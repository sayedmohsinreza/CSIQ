"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","814","Add missing super.httpMethods(); in OkHttpClientHttpRequestFactoryTes…","…ts.httpMethods()","closed","","izeye","2015-06-07T09:53:59Z","2015-06-15T16:18:13Z"
"","777","Fix javadoc error with multiple profiles","When multiple profiles are specified, they are treated as an OR condition. The javadoc incorrectly says ""and/or"".","closed","","mikeroda","2015-04-15T18:46:40Z","2015-04-15T20:04:06Z"
"","831","SPR-13183 Send BindingResult Errors in ResponseEntityExceptionHandler","When a RESTful API method returns a 400 status due to validation errors, those errors are not returned. This commit changes the handleBindException() and handleMethodArgumentNotValid() methods to return the BindingResult errors as the response entity.  Issue: SPR-13183  I have signed the SpringSource CLA.","closed","","bonhamcm","2015-07-01T20:57:40Z","2015-07-06T17:57:34Z"
"","711","Merge pull request #1 from spring-projects/master","Update from master","closed","","furkanzumrut","2014-12-27T10:42:46Z","2014-12-27T10:43:03Z"
"","767","Document @Bean definitions via default methods","Update chapter “Declaring a bean” to mention the @default method bean definition approach.  Issue: SPR-12882","closed","in: core,","thomasdarimont","2015-04-02T12:05:37Z","2021-11-22T11:57:00Z"
"","820","Reduce BeanDefinition cloning from isFactoryBean","Update AbstractBeanFactory.isFactoryBean to only create the merged local bean definition when absolutely necessary.","open","type: enhancement,","philwebb","2015-06-18T19:26:11Z","2021-11-23T09:42:15Z"
"","821","Use method meta-data in getTypeForFactoryMethod","Update AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod to use already loaded method meta-data when deducing the type of a factory method.","open","type: enhancement,","philwebb","2015-06-18T19:36:15Z","2021-11-23T09:38:33Z"
"","841","Merge pull request #1 from spring-projects/master","update","closed","","ghost","2015-07-20T04:03:01Z","2015-07-20T04:23:23Z"
"","760","Merge pull request #1 from spring-projects/master","Update","closed","","aqzwss","2015-03-22T03:51:31Z","2015-03-22T03:54:27Z"
"","716","Add 'public' visibility to facilitate tags (such as Select) extension.","Unless there is any side effect, when customizing JSP tags (e.g. extending SelectTag),  being able to access OptionWriter would be rather helpful.","closed","","hadri3n","2014-12-31T13:47:20Z","2022-02-18T19:11:05Z"
"","801","Parse @Scheduled attributes as long instead of int.","Trivial change: use `Long.parseLong` instead of `Integer.parseInt` because the assigned fields are of type `long`, not `int`. The current code is causing errors on startup when I try to use a value too big for an `int`.","closed","","echatman","2015-05-19T18:58:02Z","2015-05-20T18:47:16Z"
"","809","Long waiting on jms connection recovering when stopping application","This fix prevent long waiting on jms connection recovering when stopping application.","closed","","nivolg","2015-05-29T13:21:17Z","2016-10-21T08:47:51Z"
"","804","Support Forwarded-Header in UriComponentsBuilder","This commit introduces support for RFC 7239: Forwarded HTTP Extension in the UriComponentsBuilder. Unfortunately, RFC 7239 is not a complete replacement for the X-Forwarded-\* headers: specifically, there is not direct replacement for X-Forwarded-Port. The JIRA contains more information.  Issue: SPR-11856","closed","","poutsma","2015-05-21T12:15:31Z","2015-06-10T15:49:00Z"
"","800","Support OkHttp as (Async)ClientHttpRequestFactory","This commit introduces support for OkHttp (http://square.github.io/okhttp/) as a backing implementation for ClientHttpRequestFactory and AsyncClientHttpRequestFactory.  Issue: SPR-12893","closed","","poutsma","2015-05-18T13:00:31Z","2015-05-18T20:49:27Z"
"","754","Support byte ranges in ResourceHttpRequestHandler","This commit introduces support for HTTP byte ranges in the ResourceHttpRequestHandler. This support consists of a number of changes: - Parsing of HTTP Range headers in HttpHeaders, including a nested Range   class and ByteRange/SuffixByteRange subclasses. - MIME boundary generation moved from FormHttpMessageConverter to   MimeTypeUtils. - writePartialContent() method introduced in ResourceHttpRequestHandler,   handling the byte range logic - Additional partial content tests added to   ResourceHttpRequestHandlerTests.  Issue: SPR-10805","closed","","poutsma","2015-03-13T13:54:38Z","2016-01-03T10:10:13Z"
"","759","Support {/...} patterns in UriComponents(Builder)","This commit introduces support for ""Path Segment URI Variable expansion"", see https://tools.ietf.org/html/rfc6570#section-3.2.6. In practice, this means that URI template variables prefixed with a '/' are treated like path segments and - as such - will encode any '/' found. For example: {/foo} expanded with ""bar/baz"" with result in ""bar%2F"".  Issue: SPR-12750","closed","","poutsma","2015-03-20T11:33:42Z","2015-04-01T01:35:47Z"
"","794","Introduce Marshalling MessageConverter","This commit introduces a messaging.converter.MessageConverter that marshals to/from XML using the abstractions provided in the OXM module.  Issue: SPR-12726","closed","","poutsma","2015-05-07T13:20:29Z","2015-05-07T16:04:18Z"
"","838","Reference more recent resources","There is a new version of AspectJ in Action which is now mentioned in the _Further Resources_ section of the AOP chapter.  Issue: SPR-13238  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","mdeinum","2015-07-16T05:46:55Z","2015-07-16T07:27:09Z"
"","770","Improve RedirectAttributes reference docs","The use of RedirectAttributes was documented in four places in the reference documentation. This commit merges some of the places and links properly between them.  Issue: SPR-12759  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","dgtombs","2015-04-07T13:22:09Z","2015-04-07T13:27:39Z"
"","771","Improve RedirectAttributes reference docs","The use of `RedirectAttributes` was documented in four places in the reference documentation. This commit merges some of the places and links properly between them.  Issue:   I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","dgtombs","2015-04-07T13:29:38Z","2015-04-13T19:27:15Z"
"","728","Fixed bug for build file.","The javadoc url of ehcache ""http://ehcache.org/apidocs/"" is invalid,use ""http://ehcache.org/apidocs/2.9/"" instead.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","xiaolongzuo","2015-01-26T09:55:17Z","2016-01-01T11:08:55Z"
"","725","Fix bug for build file.","The javadoc url of ehcache ""http://ehcache.org/apidocs/"" is invalid,use ""http://ehcache.org/apidocs/2.9/"" instead.","closed","","xiaolongzuo","2015-01-25T15:39:19Z","2015-01-26T09:58:27Z"
"","849","Clarify documentation on @Ordered","The `LOWEST_PRECEDENCE` is not only the default value for `@Ordered` but is also applied to any compared elements that are unannotated.  See spring-projects/spring-boot#3599.","closed","","chrylis","2015-07-28T15:33:51Z","2015-07-30T13:25:18Z"
"","864","Support CALL Statement for SAP HANA","Support for calling Stored Proedures in SAP HANA. Adding support for HANA alongwith the already existing support for ""Derby"", ""DB2"", ""Mysql"", ""Microsoft SQL Server"", ""Oracle"", ""POSTgreSQL"" & ""Sybase"". - Bug Fixes: The names of Stored Procedures in SAP HANA can be in lowercase   as well. The default implementation in GenericCallMetaDataProvider always   converts name to uppercase.  Issue: SPR-13381  CLA form signed. Ref. no. : 135320150823102506","closed","","sbcd90","2015-08-23T10:42:10Z","2015-08-25T15:19:35Z"
"","840","Reset Pragma header when caching","Spring Security by default sets a `Pragma: no-cache` header (see [CacheControlHeadersWriter](https://github.com/spring-projects/spring-security/blob/master/web/src/main/java/org/springframework/security/web/header/writers/CacheControlHeadersWriter.java)). Even if explicitly calling `WebContentGenerator#applyCacheSeconds` that header is still present, preventing the browser from caching the resource. So `cacheForSeconds` should remove the Pragma header if it has been set.","closed","","felixbarny","2015-07-17T12:51:05Z","2015-07-21T14:24:19Z"
"","833","Configure embedded database with properties","Spring embedded database support isn't very configurable at the moment. These changes related to SPR-12455.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","type: enhancement,","akalotkin","2015-07-04T00:17:56Z","2019-02-22T14:44:02Z"
"","832","Configure embedded database with properties","Spring embedded database support isn't very configurable at the moment. These changes related to SPR-12455.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","akalotkin","2015-07-03T17:59:29Z","2015-07-04T13:57:48Z"
"","722","SPR-12639 : Corrected the method name in Spring JDBC section","SPR-12639 : Corrected the method name from 'executeReturningKey' to 'executeAndReturnKey' under Spring JDBC.","closed","","mgooty","2015-01-20T08:55:07Z","2015-01-22T18:24:09Z"
"","852","Add EnumToEnumConverter","sometime we need copy a shadow package for export remote service interface, service interface depend domain object which include domain enum type, it is necessary to support conversion between origin Enum type to shadow Enum.","closed","","quaff","2015-08-04T02:09:10Z","2022-02-18T19:11:03Z"
"","835","correction for single quote inside double quote","Some databases (Oracle for example) allow alias of columns inside double quote in order to have case sensitive and special characters, including single quote. For example :  select address as ""programmer’s address"" from programmer  So those single quotes must not be taken as literal beginning.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","ndebeiss","2015-07-10T12:51:56Z","2015-07-14T12:36:43Z"
"","758","Allow subclass adaptation of @Scheduled runnable creation.","Small change in ScheduledAnnotationBeanPostProcessor to allow subclass adaptation of @Scheduled runnable creation. This allows generic behaviour for scheduled tasks to be added in one place.","closed","","ManicRooks","2015-03-19T17:35:32Z","2018-07-14T09:24:59Z"
"","815","Allow StopWatch to be started on construction","Simplify starting stopwatch after construction  Return ""this"" from the start method of the stopwatch, so that a stopwatch can be constructed and started in one line. Most of the time you use the stopwatch you want to start it right away, this saves a line of code and makes the stopwatch a preferable approach to a simple system time comparison.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.  Issue: SPR-13106","closed","","magJ","2015-06-09T13:34:15Z","2018-08-14T01:58:52Z"
"","776","FutureAdapter should wrap RuntimeExceptions","RuntimeExceptions thrown from FutureAdapter.adapt() should be wrapped in an ExecutionException, not thrown as is.  Issue: SPR-12887","closed","","poutsma","2015-04-10T11:08:06Z","2015-04-13T17:27:18Z"
"","748","Fix SpEL Compilation mode IMMEDIATE.","Require 1 interpreted pass only (instead of 2)  cc @aclement","closed","in: core,","ericbottard","2015-02-27T14:22:00Z","2021-11-22T09:45:16Z"
"","855","Update NumberUtils.java - constructor -> valueOf method","Replace calling the constructor of Number classes by calling valueOf method.","closed","","vladad","2015-08-06T11:49:08Z","2015-08-06T18:07:42Z"
"","747","Fix SPR-11759, added support of List injection from YAML propert...","Related to this issue: https://jira.spring.io/browse/SPR-11759 Also related to this discussion: https://github.com/spring-projects/spring-boot/issues/501","closed","","cooniur","2015-02-27T11:25:27Z","2015-05-14T00:35:08Z"
"","826","Refactor WebSocket int. tests to work w/ Jetty 9.3","Recent builds of Jetty 9.3 require that Jetty's own ServletContext implementation be supplied to WebSocketServerFactory's init() method. Otherwise, the Jetty server will fail to start with the exception message: ""Not running on Jetty, WebSocket support unavailable"".  This commit refactors AbstractSockJsIntegrationTests and all WebSocketTestServer implementations in order to support this new requirement. Specifically: - WebSocketTestServer defines a new getServletContext() method.   TomcatWebSocketTestServer and UndertowTestServer simply return a   MockServletContext; whereas, JettyWebSocketTestServer returns the   ServletContext created internally by Jetty's ServletContextHandler. - The setup() method in AbstractSockJsIntegrationTests has been   refactored so that the WebApplicationContext is supplied the   appropriate ServletContext, after the WebSocketTestServer has been set   up.  Issue: SPR-13162","closed","","sbrannen","2015-06-24T15:54:26Z","2015-06-24T19:18:31Z"
"","715","Revisit empty body response support in HTTP client","Prior to this commit, HTTP responses without body (response status 204 or 304, Content-Length: 0) were handled properly by RestTemplates. But some other cases were not properly managed, throwing exceptions for valid HTTP responses.  This commit better handles HTTP responses, using a response wrapper that can tell if a response: - has no message body (HTTP status 1XX, 204, 304 or Content-Length:0) - has an empty message body  This covers rfc7230 Section 3.3.3.  Issue: SPR-8016","closed","","bclozel","2014-12-31T13:07:22Z","2015-01-27T13:25:07Z"
"","795","Remove duplicate separators when combining","Prior to this commit, AntPathMatcher would not correctly combine a path that ends with a separator with a path that starts with a separator. I.e. /foo/ + /bar combined into /foo//bar.  This commit removes the duplicates separator. It also improves RequestMappingInfo's String representation.  Issue: SPR-12975","closed","","poutsma","2015-05-08T09:35:18Z","2015-05-08T12:06:52Z"
"","843","Improve DateHeaders in MockServletRequest/Response","Prior to this change, calling the `setDateHeader` method on a Spring Test MockHttpServletResponse instance would just store the given long value in a Map, not writing it as a formatted date String. Also, calling `getDateHeader` on a MockHttpServletRequest would not support date strings and could not parse those values.  This can be problematic when testing features related to date headers such as ""Expires"", ""If-Modified-Since"", ""Last-Modified"", etc.  This commit adds formatting and parsing capabilities to Servlet Mocks for date strings in HTTP headers.  When formatting dates to Strings, the date format used is the one preferred by the HTTP RFC. When parsing date Strings, multiple date formats are supported for better compatibility.  Issue: SPR-11912","closed","","bclozel","2015-07-22T11:43:58Z","2015-07-23T11:13:47Z"
"","816","Improve charset management in XpathResultMatchers","Prior to this change, `XpathResultMatchers` and more generally the `MockHttpServletResponse` would default to ISO-8859-1 encoding even when it's not supposed to. The Servlet/HTTP specs mention this encoding for all `text/*` mime types when decoding bodies to Strings, but this issue is about XML Parsers.  XML Parsers should use the encoding: - defined in the `Content-Type` response header (if available) - written in the XML declaration of the document - ""guessed"" by a built-in auto-detection mechanism  This commit changes the following: - XPathMatchers now feed the XML parser with byte arrays instead of   decoded Strings - the response should be written to `MockHttpServletResponse` using   its OutputStream, and not a PrintWriter which defaults to ISO-8859-1  Issue: SPR-12676","closed","","bclozel","2015-06-10T15:16:31Z","2015-06-17T08:17:38Z"
"","834","DelegatingFilterProxy looks at ""registered"" WebApplicationContexts","Previously when users registered an additional Filter in the DispatcherServlet the DelegatingFilterProxy would not find it unless the context attribute was set. The value for which was difficult to remember and added quite a bit of additional ""if"" statements to setting up Spring Security successfully.  This change allows registering additional known WebApplicationContext instances. The DispatcherServlet uses this mechanism to register its context. With that change DelegatingFilterProxy searches for the first registered WebApplicationContext that contains the bean name.  This change also sets up the ability for Spring Security to lookup Beans defined in the child context within the Tag libs.  Issue: SPR-13191","closed","","rwinch","2015-07-09T21:02:25Z","2015-10-27T19:13:44Z"
"","836","Add support for JdbcTempalte.queryForObject(sql,.class)","Previously using jdbcTemplate.queryForObject(sql, int.class) produced a TypeMismatchDataAccessException stating it could not convert an Integer to an int.  This update allows conversion to the respective primitives instead of just the wrapper Objects.  Issue: SPR-13220","closed","","rwinch","2015-07-10T15:11:17Z","2015-07-13T18:18:34Z"
"","782","SPR-12945: Add merged RequestPostProcessor to front on merge","Previously MockHttpServletRequestBuilder merge method would append the parent's (default) RequestPostProcessor implementations to the end. This means that the default RequestPostProcessor implementations would override values set by previous RequestPostProcessor implementations.  This commit ensures that the default RequestPostProcessor are preformed first so that additional RequestPostProcessor implementations override the defaults.  Issue: SPR-12945","closed","","rwinch","2015-04-22T20:43:03Z","2015-04-24T17:14:36Z"
"","762","Override properties using system properties in PropertyOverrideConfigurer","Please review. For detail, refer to https://jira.spring.io/browse/SPR-12853.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","in: core,","kazuki43zoo","2015-03-26T15:09:23Z","2021-11-22T09:48:27Z"
"","773","Performance Optimization on getResultSetValue","Performance Optimization, using "".equals"" is signifigantly slower than ""=="".   When using ""BeanPropertyRowMapper"", we ran load tests and found significant lack of performance when calling ""getColumnValue"". I noticed that ""getColumnValue"" simply just calls ""JdbcUtils.getResultSetValue"". These tests were run on an table with roughly 70 columns.  After making change I ran three tests 1) with existing BeanPropertyRowMapper 2) with optimized BeanPropertyRowMapper 3) with a Custom RowMapper, mapped exactly to the class. # Benchmark Results  1) round: 0.38 [+- 0.11], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 1, GC.time: 0.01, time.total: 7.98, time.warmup: 0.28, time.bench: 7.70 2) round: 0.23 [+- 0.02], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 4.80, time.warmup: 0.22, time.bench: 4.58 3) round: 0.22 [+- 0.02], round.block: 0.00 [+- 0.00], round.gc: 0.00 [+- 0.00], GC.calls: 0, GC.time: 0.00, time.total: 4.62, time.warmup: 0.19, time.bench: 4.43  As you can see the optimized version makes BeanPropertyRowMapper almost as fast as a custom made RowMapper.","closed","","DR9885","2015-04-09T05:11:30Z","2015-07-11T07:04:19Z"
"","736","access user-agent via requestContext","Our colleagues want to access the ""user-agent"" in freemarker.","closed","status: declined,","xiaoshuai","2015-02-11T06:23:58Z","2020-06-23T07:00:53Z"
"","839","fix package of MockMvcResultHandlers and MockMvcResultMatchers","org.springframework.test.web.SERVER.result.MockMvcResultMatchers -> org.springframework.test.web.SERVLET.result.MockMvcResultMatchers","closed","","ghost","2015-07-16T08:25:43Z","2015-07-16T09:29:01Z"
"","763","SPR-12801 Support for named parameters in SimpleJdbcCall","Modification to support named parameter binding in JDBC calls. See SPR-12801 for more info.","closed","","cynicLT","2015-03-29T13:28:30Z","2015-05-15T07:58:44Z"
"","769","4.1.x","love springframework","closed","","gaods","2015-04-04T04:27:27Z","2015-04-04T06:01:28Z"
"","854","SPR-13320: Additional Testing Methods Added To JsonPathResultMatchers","JsonPathResultMatchers has some useful methods: - doesNotExist - exists - isArray  This commit adds a few more useful methods: - isBoolean - isNumber - isMap - isString  Issue: https://jira.spring.io/browse/SPR-13320  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","candrews","2015-08-06T04:52:44Z","2015-08-06T22:30:59Z"
"","853","SPR-13321: SocketUtils, Bind to localhost","JIRA: https://jira.spring.io/browse/SPR-13321","closed","","garyrussell","2015-08-05T16:41:24Z","2015-08-12T16:50:47Z"
"","865","4.1.x","Java config  Quartz + Spring double execution on startup   Example :   import java.time.LocalTime; import javax.servlet.http.HttpServletResponse; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.scheduling.annotation.EnableScheduling; import org.springframework.scheduling.annotation.Scheduled; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseBody; import org.springframework.web.servlet.config.annotation.EnableWebMvc; import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter; import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;   @Configuration @EnableWebMvc @EnableScheduling @ComponentScan({""ru.web.portal.onlinescheduling""}) @Controller public class WebConfig extends WebMvcConfigurerAdapter {       @Scheduled(fixedDelay = 3000)     public void time() {         System.out.printf(""%s\n"", LocalTime.now());     }           public static class MvcWebApplicationInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {             @Override         protected Class<?>[] getRootConfigClasses() {             return new Class[]{WebConfig.class};         }           @Override         protected Class<?>[] getServletConfigClasses() {             return new Class[]{WebConfig.class};         }           @Override         protected String[] getServletMappings() {             return new String[]{""/""};           }     }   }     not a singleton by default   14:19:25.386 14:19:25.491 14:19:28.386 14:19:28.492 14:19:31.387 14:19:31.492   solution       @Override         protected Class<?>[] getServletConfigClasses() {             return null;         }   14:20:25.477 14:20:28.478 14:20:31.478 14:20:34.479","closed","","isalnikov","2015-08-24T11:22:43Z","2015-08-24T11:35:00Z"
"","737","Fix Animal Sniffer","Jasper Reports’ transitive dependency on spring-context (via castor-xml which is a new dependency in 6.0.3) was being mapped by Gradle to a dependency on the spring-context project. For reasons that I do not fully understand this was causing -source and -javadoc jars to be added to the project's compile classpath which is used by the Animal Sniffer Ant task. When the task runs these jars do not exist which causes it to fail. This commit fixes the problem by adding an exclusion of org.springframework:spring-context to the Jasper Reports dependencies in spring-context-support and spring-webmvc.","closed","","wilkinsona","2015-02-11T17:06:43Z","2015-02-11T17:10:30Z"
"","810","Add nullToEmpty convenience method to StringUtils","It allows you to replace common patterns like:  ``` java if(string == null) {     string = """"; } doSomethingWith(string); ```  or:  ``` java return string == null ? """" : string; ```  with a `nullToEmpty(string)` method call.","closed","status: declined,","kamilszymanski","2015-05-30T15:50:15Z","2020-06-23T13:57:16Z"
"","867","Support MessageSourceResolvable to string argument value at SpringValidatorAdapter","Issues: SPR-13406  For details, refer to the [SPR-13406](https://jira.spring.io/browse/SPR-13406). I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-08-29T20:17:52Z","2016-02-17T23:21:52Z"
"","787","Change to the BeanPropertyRowMapper from the ParameterizedBeanPropertyRowMapper","Issues: SPR-12980  For details, please refer to the [SPR-12980](https://jira.spring.io/browse/SPR-12980). I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-05-05T12:31:05Z","2015-05-05T12:55:10Z"
"","869","Prevent a IllegalStateException in BindStatus at the time of without property access","Issue: SPR-13426  For details, refer to the [SPR-13426](https://jira.spring.io/browse/SPR-13426). I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-09-03T18:50:21Z","2016-03-04T14:10:54Z"
"","866","Add preventBinding attribute at @ModelAttribute","Issue: SPR-13402  For details, refer to the [SPR-13402](https://jira.spring.io/browse/SPR-13402). I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-08-27T21:56:53Z","2016-07-18T06:17:28Z"
"","856","Modify default value of CommonsPool2TargetSource#maxWait","Issue: SPR-13350  For details, refer to the [SPR-13350](https://jira.spring.io/browse/SPR-13350). I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-08-14T14:08:49Z","2015-08-14T14:41:24Z"
"","796","Modify to use the ConfigurableApplicationContext in reference document","Issue: SPR-13000  For details, please refer to the [SPR-13000](https://jira.spring.io/browse/SPR-13000). I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-05-09T01:28:30Z","2015-05-09T10:26:08Z"
"","792","Remove the RemoteAccountService","Issue: SPR-12992  For details, please refer to the [SPR-12992](https://jira.spring.io/browse/SPR-12992). I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-05-06T10:17:39Z","2015-05-08T15:28:55Z"
"","791","Modify to disply the image of oxm exceptions hierarchy","Issue: SPR-12990  For details, please refer to the [SPR-12990](https://jira.spring.io/browse/SPR-12990). I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-05-06T06:44:50Z","2015-05-06T17:04:37Z"
"","790","JpaDialect description replace to EclipseLink from Toplink","Issue: SPR-12988  For details, please refer to the [PR-12988](https://jira.spring.io/browse/SPR-12988). I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-05-05T19:24:34Z","2015-05-06T11:21:30Z"
"","789","Remove descriptions of classic ORM API(JDO/JPA)","Issue: SPR-12987  For details, please refer to the [PR-12987](https://jira.spring.io/browse/SPR-12987). I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-05-05T18:21:23Z","2015-05-06T12:05:05Z"
"","788","Improve description of DefaultLobHandler","Issue: SPR-12985  For details, please refer to the [PR-12985](https://jira.spring.io/browse/SPR-12985). I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.  **Note:** Sorry, I don't have a confidence to the English. If bad grammar or representation or words exist, please modify it.","closed","","kazuki43zoo","2015-05-05T14:21:01Z","2015-05-06T17:45:57Z"
"","786","Fixes bad grammar in reference document","Issue: SPR-12981  For details, please refer to the [SPR-12981](https://jira.spring.io/browse/SPR-12981). I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-05-05T12:24:02Z","2015-05-05T12:54:48Z"
"","785","Fixes description of JdbcTemplate#setResultsMapCaseInsensitive","Issue: SPR-12979  For details, please refer to the [SPR-12979](https://jira.spring.io/browse/SPR-12979). I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-05-05T09:05:15Z","2015-05-05T12:54:18Z"
"","857","Add @since at SimpleJdbcCallOperations#withNamedBinding","Issue: SPR-12801  I've improve JavaDoc comment. I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-08-14T22:56:39Z","2015-08-15T07:08:26Z"
"","753","Ignore null in HeadersBuilder#headers","Issue: SPR-12792  For detail, refer to https://jira.spring.io/browse/SPR-12792.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-03-07T03:53:52Z","2015-03-10T15:51:18Z"
"","741","Support the meta annotation at @NumberFormat","Issue: SPR-12743  I support the meta annotation mechanism at the `@NumberFormat` as same with the `@DateTimeForamt`. For detail, refer to https://jira.spring.io/browse/SPR-12743.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-02-22T15:07:44Z","2015-03-08T04:44:22Z"
"","723","Make TransactionAwareCacheDecorator.clear synchronized with transaction","Issue: SPR-12653  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","svolsky","2015-01-22T20:55:16Z","2015-02-10T13:54:06Z"
"","860","Register Hibernate4Module and Hibernate5Module when available","Issue: https://jira.spring.io/browse/SPR-13355, https://jira.spring.io/browse/SPR-13356  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","candrews","2015-08-17T13:05:33Z","2015-09-15T00:45:50Z"
"","861","Register Jdk7Module when using Java 7","Issue: https://jira.spring.io/browse/SPR-13354  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","candrews","2015-08-17T13:10:32Z","2015-08-18T12:33:38Z"
"","850","SPR-13293","Issue https://jira.spring.io/browse/SPR-13293","closed","","m-szalik","2015-07-30T10:09:16Z","2015-07-30T10:13:42Z"
"","829","Add an ObjectMapper constructor to MappingJackson2JsonView","Instead of having to use the default constructor then calling #setObjectMapper(ObjectMapper), this constructor allows the MappingJackson2JsonView to be created and configured with the desired object mapper in one step.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","candrews","2015-06-29T14:34:28Z","2015-08-19T12:26:08Z"
"","830","Update about dependency library for integrating the email functionality in reference document","In the JDK requirement of Spring 4 (JDK 1.6+), the activation.jar is unnecessary on the class path. Therefore i removed description about the activation.jar.  Please review this PR.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-06-30T15:08:11Z","2015-06-30T16:21:57Z"
"","775","Add isNotEmpty convenience method to StringUtils","In some (most?) cases `isNotEmpty(someString)` expresses your intentions better than `hasLength(someString)` and is more readable and less error-prone than `!isEmpty(someString)`","closed","","kamilszymanski","2015-04-10T07:36:34Z","2015-04-23T20:34:27Z"
"","779","HttpMessageConverterExtractor.extractData should TRY each HttpMessageConverter","In `HttpMessageConverterExtractor.extractData` method, it loops for all `HttpMessageConverter` to return the converted result. This is correct but not perfect. Sometimes, it's not always possible to determine `canRead` with only 'return type' and `MediaType`. So my suggestion is, within the `for` loop, 'TRY' each `HttpMessageConverter` - I mean wrap the `return` statement within a try-catch. As I said, it's possible that one or more `HttpMessageConverter` `canRead` but in practice it `throws IOException`, then with the round robin loop, it may ultimately find the last one `HttpMessageConverter` which `canRead` and really convert the data into the expected return type. If none of them did the expected conversion, let `RestClientException` throw as usual.  So my suggested solution is:  ``` Java     public T extractData(ClientHttpResponse response) throws IOException {          MessageBodyClientHttpResponseWrapper responseWrapper = new MessageBodyClientHttpResponseWrapper(response);         if(!responseWrapper.hasMessageBody() || responseWrapper.hasEmptyMessageBody()) {             return null;         }         MediaType contentType = getContentType(responseWrapper);          for (HttpMessageConverter messageConverter : this.messageConverters) {             if (messageConverter instanceof GenericHttpMessageConverter) {                 GenericHttpMessageConverter genericMessageConverter = (GenericHttpMessageConverter) messageConverter;                 if (genericMessageConverter.canRead(this.responseType, null, contentType)) {                     if (logger.isDebugEnabled()) {                         logger.debug(""Reading ["" + this.responseType + ""] as \"""" +                                 contentType + ""\"" using ["" + messageConverter + ""]"");                     }                     try{                         return (T) genericMessageConverter.read(this.responseType, null, responseWrapper);                     }catch(IOException|HttpMessageNotReadableException e){                         if (logger.isDebugEnabled()) {                             logger.debug(""FAILURE of Reading ["" + this.responseType + ""] as \"""" +                                     contentType + ""\"" using ["" + messageConverter + ""]"", e);                          }                     }                 }             }             if (this.responseClass != null) {                 if (messageConverter.canRead(this.responseClass, contentType)) {                     if (logger.isDebugEnabled()) {                         logger.debug(""Reading ["" + this.responseClass.getName() + ""] as \"""" +                                 contentType + ""\"" using ["" + messageConverter + ""]"");                     }                     try{                         return (T) messageConverter.read((Class) this.responseClass, responseWrapper);                     }catch(IOException|HttpMessageNotReadableException e){                         if (logger.isDebugEnabled()) {                             logger.debug(""FAILURE of Reading ["" + this.responseType + ""] as \"""" +                                     contentType + ""\"" using ["" + messageConverter + ""]"", e);                          }                     }                 }             }         }         throw new RestClientException(                 ""Could not extract response: no suitable HttpMessageConverter found for response type ["" +                         this.responseType + ""] and content type ["" + contentType + ""]"");     }    ```","closed","","jhcao23","2015-04-18T22:01:14Z","2015-04-20T12:49:16Z"
"","780","Spr 12683","Improve extensibility of TestContext bootstrapping & context caching  These commits include numerous refactorings and enhancements to the bootstrapping and context caching mechanisms in the Spring TestContext Framework.  Issue: SPR-12683","closed","","sbrannen","2015-04-19T17:32:37Z","2015-04-19T17:44:15Z"
"","858","Improve description about return value types of handler method in reference doc","Improve as follows: - Add an WebAsyncTask - Add a CompletionStage - Trivial improvement  Please review. I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","in: web,","kazuki43zoo","2015-08-15T17:53:44Z","2019-05-24T08:35:01Z"
"","870","RequestParam plus MultipartFIle","if there is a controller method with code like this:  ``` public void uploadFile( @RequestParam(value = ""file"",required = true) MultipartFile file){     //some code } ```  and there is no header which name is ""Content-Type"" in the request,then the method ""resolveName"" will throw MultipartException which is from the method ""assertIsMultipartRequest"" even if the value of attribute which name is ""required"" is true.   The expected response should be throw MissingServletRequestParameterException i think. Because it is convenient for coder to execute the same code when there is no enough parameters.","closed","","rocky-peng","2015-09-05T07:33:41Z","2022-02-18T19:11:04Z"
"","863","ignore illegal String in SpringFactoriesLoader#loadFactoryNames","I write a spring-boot app，but when config EnableAutoConfiguration like as follows：  ``` org.springframework.boot.autoconfigure.EnableAutoConfiguration=\ com.yiji.boot.core.configuration.AppConfiguration,\ com.yiji.boot.core.configuration.LogConfiguration,\ com.yiji.boot.core.configuration.HeraConfiguration, ```  a comma at the end，and throw exception `class path resource [.class] cannot be opened because it does not exist`.this is because `SpringFactoriesLoader#loadFactoryNames` dont ignore blank character.","closed","status: declined,","bohrqiu","2015-08-20T02:29:46Z","2021-11-16T13:22:18Z"
"","817","Make AbstractAdaptableMessageListener getResponseDestination aware of response JMS Destination if set","I was trying to implement a kind of router - retrieve a message in JmsListener annotated method, create a new message inside it (that basically embraces the request message) and send it to dynamically chosen queue, based on some processing logic. Unfortunately SendTo annotation doesn't allow for dynamic destination choosing and my incoming messages can't have ReplyTo field set. I've ended witch the following code, that works:  ``` @JmsListener(destination = ""inbound.queue"") //@SendTo(""Only static queue possible"") public Message router(Message src, Session s) throws JMSException {     TextMessage dst = s.createTextMessage(((TextMessage) src).getText());     // based on some processing logic, we want dst to be placed in some queue     // This works, but is a ""hack"":     src.setJMSReplyTo(new MQQueue(""some.queue""));     // This doesn't work but is much more clean solution provided with this pull request     dst.setJMSDestination(new MQQueue(""some.queue""));     return dst; } ```  There are some good reasons why modifying request (incoming) message is bad idea. First of all, it is good to treat inbound messages as immutable objects and not mess with changing their properties. Second, not all listener use cases are suitable for request/reply patterns. The original meaning for JMSDestination is informative one (to be used by receiving party to check what queue message originates from). Therefore message brokers ignore those properties when sending messages, while try to keep it informative on message reception. So reusing JMSDestination for hinting Spring Container about overriding SendTo annotation is not abusive and will allow to write a more clean code.","closed","","bartprokop","2015-06-14T17:37:08Z","2015-06-15T22:04:42Z"
"","842","SPR-13257 support empty URIs","I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","dvdckl","2015-07-22T02:17:54Z","2015-07-29T09:44:47Z"
"","847","SPR-13229: Remove Tiles 2 support","I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","cynicLT","2015-07-23T18:58:05Z","2015-07-24T11:18:08Z"
"","846","SPR-13235: Deprecate Velocity support","I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","cynicLT","2015-07-23T18:46:32Z","2015-07-24T11:17:21Z"
"","845","SPR-13235: Deprecate Velocity support","I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","cynicLT","2015-07-23T17:32:54Z","2015-07-23T18:36:57Z"
"","735","Fix reserved set definition according to appendix A of RFC 3986","I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","rjozwik","2015-02-10T22:32:01Z","2016-01-25T22:31:38Z"
"","818","Header values are optional in Stomp 1.1 and 1.2","I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement","closed","","jking-roar","2015-06-15T17:37:32Z","2015-06-15T18:58:35Z"
"","812","SPR-13099: Prevent class leak in GenericConversionService","I briefly discussed this with @philwebb.  This is the (simple change) solution that I found, although it is not entirely correct.  The problem is that what is strongly reachable as long as a module is loaded is a Class object. Yet, the cache in GCS holds complex objects (keys), which in turn hold the aforementioned class object. Hence, with the proposed patch, it is possible that the `cache -> key -> class object` connection will get severed here:  ``` cache -> key -> class object       ^ ```  before the class object is being disposed of, while the ""correct"" loose link should be here:  ``` cache -> key -> class object              ^ ```  Yet, I've looked at the problem for a couple of hours and don't see how we can do better. This is in part mitigated by the use of soft (as opposed to weak) references though.","closed","","ericbottard","2015-06-05T09:11:42Z","2015-06-15T13:46:39Z"
"","745","Provide access to tasks scheduled with the ScheduledTaskRegistrar","https://jira.spring.io/browse/SPR-12748","closed","","tobiasmh","2015-02-24T04:40:35Z","2015-02-26T13:06:48Z"
"","732","allow passing a TestContext and TestContextBootstrapper instance to TestContextManager","https://jira.spring.io/browse/SPR-12683 in Spring Jira  /cc @sbrannen @jhoeller","closed","type: enhancement,","lhotari","2015-02-03T16:36:15Z","2019-02-22T14:27:26Z"
"","731","allow overriding AbstractTestContextBootstrapper.resolveContextLoader method","https://jira.spring.io/browse/SPR-12682 in Spring Jira  /cc @sbrannen","closed","","lhotari","2015-02-03T15:14:49Z","2015-04-14T22:41:39Z"
"","729","SPR-5580 Adding ChildOf annotation to apply MergedBeanDefinition to annotated beans.","How to reference parent-bean from annotated spring, like with component-scan?  The question came up during work life when we were trying to shift towards component-scan. Found that ""historical"" issue with most of the most given.  Here some pull-request extended with some comments and a test-case.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","janesser","2015-01-31T09:44:58Z","2018-06-08T06:02:48Z"
"","726","SPR-6343 ChildOf annotation.","How to reference parent-bean from annotated spring, like with component-scan?  The question came up during work life when we were trying to shift towards component-scan. Found that ""historical"" issue with most of the most given.  Here some pull-request extended with some comments and a test-case.","closed","","janesser","2015-01-25T21:37:47Z","2015-01-31T09:46:18Z"
"","868","Fix error in function org.springframework.http.HttpHeaders.getContent…","Function org.springframework.web.client.MessageBodyClientHttpResponseWrapper.hasMessageBody() returns wrong positive answer when http response has no body and no Content-Length header.  Important, that function org.springframework.http.HttpHeaders.getContentLength() returns -1 if header Content-Length does not exist in response and. But we rely only on 0 as answer.","closed","","auk","2015-09-01T09:50:55Z","2018-07-18T21:52:59Z"
"","823","Merge pull request #1 from spring-projects/master","fork","closed","","leizhiyuan","2015-06-22T14:13:09Z","2015-06-22T14:13:54Z"
"","768","Expose SimpleCommandLineArgsParser methods and fields","For example you work with Spring Boot + Spring Batch and you need to validate command line arguments as `JobParameters` in batch job. By default Spring Boot uses `SimpleCommandLinePropertySource` to resolve `Environment` parameters. This `PropertySource` implementation recognize `--optName[=optValue]` as argument with name `optName` and value `optValue`. On the other hand Spring Batch provides `DefaultJobParametersConverter` to resolve job parameters. This converter recognize `--optName[=optValue]` as _non-identifying_ argument with name `-optName` and value `optValue`. And if you want to use `JobParametersValidator` to validate requred and optional keys in `JobParameters` you need to check for `-optName` rather then `optName`. Or implement custom `JobParametersConverter` which will detect these arguments right. This functionality is pretty common but there are no JIRA features or discussions in mailing lists. This commit is to expose `SimpleCommandLineArgsParser` methods and extract fields for `--` and `=` to implement `SimpleCommandLineJobParametersConverter` in Spring Batch project.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","status: superseded,","mkanev","2015-04-03T23:18:27Z","2021-11-22T10:10:14Z"
"","744","Permit easier overriding of mapping","Following the feature enabled by SPR-7812, we overrode `RequestMappingHandlerMapping.getCustomMethodCondition()` to add a custom `RequestCondition` that does some evaluation of custom headers and custom annotations on `@RequestMapping` endpoints. (The end result is beyond what is possible using `headers` on `@RequestMapping`.) We then discovered `WebMvcConfigurationSupport` instantiates its own `RequestMappingHandlerMapping` in `requestMappingHandlerMapping()`, requiring overriding of that protected method to use our new subclass.   The existing `requestMappingHandlerMapping()` not only instantiates the mapping, but performs all of the default configuration of it. Initially, we copied that method intact into our subclass, replacing only the `new RequestMappingHandlerMapping()` with our own subclass. However, this duplicates the default config code in our code and exposes the possibility that we may miss changes to that config in future releases of Spring.  We did a simple refactor to extract the application of default configuration to into a separate method so overriders of `requestMappingHandlerMapping()` can simply pass their custom implementation into the new `configureDefaultHandlerMapping()`.  Example override in `WebMvcConfigurationSupport` subclass:  ``` @Bean public RequestMappingHandlerMapping requestMappingHandlerMapping() {     RequestMappingHandlerMapping handlerMapping = new RequestMappingHandlerMapping() {         protected RequestCondition getCustomMethodCondition(Method method) {             // do custom request condition processing         }     };     configureDefaultHandlerMapping(handlerMapping);      return handlerMapping; } ```  Issue: [SPR-12746](https://jira.spring.io/browse/SPR-12746)  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","ryanskow","2015-02-23T19:51:11Z","2015-02-24T14:46:13Z"
"","721","Fixed examples in java docs in class ResultActions.","Fixed examples in java docs in class ResultActions.  2 changes: status -> status()  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","MaciejZiarko","2015-01-17T11:32:20Z","2015-01-17T12:50:40Z"
"","784","Reactor2 net update","Fixed API for -net on the 2.0.1.GA","closed","","smaldini","2015-04-27T21:55:11Z","2015-04-30T09:00:22Z"
"","851","Remove type parameter of ResponseBodyEmitter","Fix wrong example of `ResponseBodyEmitter` in reference doc","closed","","making","2015-07-31T15:34:06Z","2015-07-31T15:46:20Z"
"","862","fix typo in web-mvc doc","fix typo in web-mvc doc , ""server-sent""  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","xueyumusic","2015-08-18T01:44:21Z","2015-08-18T14:23:36Z"
"","778","SPR-12003 StringUtils.commaDelimitedListToSet sorts resulting list","Fix for SPR-12003, the sorting is extra and not necessary computation towards the output, we should use  LinkedHashSet. Performance of LinkedHashSet is always better than TreeSet.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","ameyjadiye","2015-04-17T10:04:41Z","2015-05-07T15:13:57Z"
"","724","Add Optional Support to JdbcTemplate","Extend `JdbcTemplate` to support `Optional` for cases where queries return one or no row. - Add a `queryForOptional` method for every `queryForObject` method in   `JdbcOperations`. - Implement the new methods in `JdbcTemplate`. - Add tests for the new methods in `JdbcTemplate`.  Issue: SPR-12662  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","status: declined,","marschall","2015-01-24T10:42:59Z","2021-12-12T20:15:28Z"
"","797","Conditional Error Message Formatting","Create error message strings only if an actual error has happened. This seems to be the common pattern in the code base base and saves both CPU and memory. We found only very few places where unconditional error message formatting happens. - fix unconditional error message formatting in   AdviceModeImportSelector - fix unconditional error message formatting in AnnotationAttributes - fix unconditional error message formatting in   ReadOnlySystemAttributesMap, this also fixes a potential   NullPointerException  I did sign the CLA.  Issue: SPR-13007","closed","","marschall","2015-05-10T09:17:14Z","2015-05-10T10:48:25Z"
"","752","SPR-12771 The builder port must always be set","Context: [SPR-12771](https://jira.spring.io/browse/SPR-12771)  When the `X-Forwarded-Port` is set, its value should always be taken into account. When looking at the `org.springframework.web.util.UriComponentsBuilder#fromHttpRequest` code, we see in the end that the `port` must always be set into the `builder`. If not, we have cases where the `port` remains set to `80`.","closed","","dcoraboeuf","2015-03-05T20:05:06Z","2022-02-18T19:11:05Z"
"","783","Upgrade to Reactor 2","Changed STOMP and TcpClient support to Reactor 2, needs to improve send confirm however but tests are passing","closed","","smaldini","2015-04-23T17:43:07Z","2015-04-30T09:00:05Z"
"","746","@AuthenticationPrincipal in handler parameters","By adding this `AuthenticationPrincipalArgumentResolver` to the arguments resolvers, `@AuthenticationPrincipal` should be supported and we will be able to inject Spring Security principal object. It will be useful when using `@MessageMapping` to handle remote STOMP messages over websockets.","closed","","fromi","2015-02-25T18:51:29Z","2015-02-27T15:46:36Z"
"","757","Fix StackOverflowError due to recursion in DefaultManagedAwareThreadFactory","Bug easily reproducible by passing invalid JNDI name leading to recursion in newThread method","closed","","gedrox","2015-03-18T15:51:20Z","2015-03-18T17:17:01Z"
"","765","Netty4ClientHttpRequest ignores query params","Before this commit, Netty4ClientHttpRequest ignored query parameters (?foo=bar). This commit fixes that.  Issue: SPR-12779","closed","","poutsma","2015-04-01T11:10:33Z","2015-04-01T11:15:31Z"
"","837","[SPR-13223] ResponseBodyEmitter skips same messages during initialization","Before ResponseBodyEmitter initialization events were kept in a my map, effectively discarding same messages. Additionally this PR clears `initHandlerCache` (wasn't the case before).  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.  See: [SPR-13223](https://jira.spring.io/browse/SPR-13223).","closed","","nurkiewicz","2015-07-11T20:16:09Z","2015-07-13T20:58:53Z"
"","808","SPR-13080 SseEventBuilder needs event rather than name","As per the W3C recommendation (http://www.w3.org/TR/eventsource/#event-stream-interpretation) the event type field is called ""event"". The SseEmitter.SseEventBuilder class erroneously builds it using ""name"" as a prefix.  Issue created as https://jira.spring.io/browse/SPR-13080  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","litpho","2015-05-28T19:33:43Z","2015-06-01T14:04:10Z"
"","743","Add strategy for handling Stomp client errors (SPR-12732)","As mentioned in SPR-12732, the current implementation does not allow for sufficient information to be return in a STOMP ERROR frame to the client during errors resulting from either client message error parsing, or output channel processing (perhaps through the use of an output channel interceptor).  This commit enhances the StompSubProtocolHandler by adding the StompSubProtocolErrorHandler strategy with a default implementation matching the existing behavior.  Developers will be able to configure the StompSubProtocolHandler with customized versions of the error handler strategy to delegate error handling behavior. For example, this can allow developers to have different behavior for different types of exceptions.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.  Issue: SPR-12732","closed","","jaymes-bearden","2015-02-23T01:52:59Z","2015-06-01T14:14:17Z"
"","742","Add strategy for handling Stomp client errors (SPR-12732)","As mentioned in SPR-12732, the current implementation does not allow for sufficient information to be return in a STOMP ERROR frame to the client during errors resulting from either client message error parsing, or output channel processing (perhaps through the use of an output channel interceptor).  This commit enhances the StompSubProtocolHandler by adding the StompSubProtocolErrorHandler strategy with a default implementation matching the existing behavior.  Developers will be able to configure the StompSubProtocolHandler with customized versions of the error handler strategy to delegate error handling behavior. For example, this can allow developers to have different behavior for different types of exceptions.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.  Issue: SPR-12732","closed","","jaymes-bearden","2015-02-23T01:42:31Z","2015-02-23T01:56:26Z"
"","802","Fix missing space in assertion message","An assertion failure from `MockMvcResultMatchers.jsonPath` used to give an assertion message as follows:  ``` java.lang.AssertionError: JSON pathhealthChecks.dummy Expected: is ""OK""      but: was null     at org.springframework.test.util.MatcherAssertionErrors.assertThat(MatcherAssertionErrors.java:80)     at org.springframework.test.util.JsonPathExpectationsHelper.assertValue(JsonPathExpectationsHelper.java:92)     at org.springframework.test.web.servlet.result.JsonPathResultMatchers$1.match(JsonPathResultMatchers.java:56)     at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:152) ```  This pull request fixes the missing space before the expression, so that the assertion message will be `JSON path healthChecks.dummy`  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","luontola","2015-05-19T19:20:01Z","2015-06-01T14:58:09Z"
"","750","HttpMessageConverters should support streaming","All HttpMessageConverters should support StreamingHttpOutputMessage. Specifically, the BufferedImageHttpMessageConverter and FormHttpMessageConverter should do so.  Issue: SPR-12715","closed","","poutsma","2015-03-02T14:33:28Z","2015-03-06T03:51:23Z"
"","813","4.1.x","Adding functionality like audit trail, logging, cryptography, and more fine grained exception handling among other features executed as aspects.","closed","","ileinone","2015-06-05T19:19:13Z","2015-06-18T08:10:03Z"
"","749","Add connect/read timeout to Netty RequestFactory","Added connectTimeout and readTimeout properties to the Netty4ClientHttpRequestFactory.  Issue: SPR-12612","closed","","poutsma","2015-02-27T14:38:58Z","2015-02-27T16:45:21Z"
"","756","Add methods for creating error object in SpringValidatorAdapter","Add the `createFieldError` and `createObjectError` method as protected method.  Issue:   For detail, refer to https://jira.spring.io/browse/SPR-12819. I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-03-15T15:33:11Z","2015-03-26T15:12:18Z"
"","799","SPR-13033: Use @RequestMapping of correct class","`MvcUriComponentsBuilder::fromMethodCall` creates wrong URLs with derived controller classes. The `@RequestMapping` of the declaring class of the method that is called is used instead of the `@RequstMapping` of the given controller class.  The same issue exists for the `fromMethod(Method method, ...)` methods. You'd also need to add the class of the controller to get the correct type level `@RequestMapping`. I'm not sure how you want to handle such API breaking changes though...  https://jira.spring.io/browse/SPR-13033","closed","","ractive","2015-05-15T20:41:21Z","2015-05-18T18:57:42Z"
"","712","SPR-7509 JSP tag spring:eval does not apply @NumberFormat and @DateTimeF...","...ormat formatting on the expression when using the var attribute  Hi, I am sending you pull request witch fixes SPR-7509 according to discussion. Hope you will like it. Thx Ivos","closed","in: web,","bedla","2014-12-27T11:49:04Z","2021-11-15T12:13:04Z"
"","751","Organize reference documentation","- modularize the reference documentation - update asciidoctor gradle plugin to 1.5.2","closed","","bclozel","2015-03-03T10:41:26Z","2015-03-06T09:55:13Z"
"","793","Modify typo in reference document","- AccountServletEndpoint -> AccountServiceEndpoint  Issue: SPR-12993  For details, please refer to the [SPR-12993](https://jira.spring.io/browse/SPR-12993). I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-05-06T10:32:24Z","2015-05-09T01:26:35Z"
"","17246","The max-file-size has no effect [SPR-12645]","**[张少伟](https://jira.spring.io/secure/ViewProfile.jspa?name=daojoo)** opened **[SPR-12645](https://jira.spring.io/browse/SPR-12645?redirect=false)** and commented  I have a multipartpart config in the web.xml to limit the max upload size  ```      services     org.springframework.web.servlet.DispatcherServlet              contextConfigLocation         classpath*:services-servlet.xml          1              1048576         5242880       ```  and a multipartResolver config in spring-mvc-context configure file  ```  ```  I'm using Tomcat7.0.57. When I upload a file which the size granter than the max size, no exception occur and upload success.   ---  **Affects:** 3.2.12, 3.2.13","closed","status: invalid,","spring-projects-issues","2015-01-19T19:56:46Z","2019-01-12T05:24:47Z"
"","17971","SimpleAliasRegistry should detect circles between non-canonical aliases as well [SPR-13390]","**[俞火江](https://jira.spring.io/secure/ViewProfile.jspa?name=jddxf)** opened **[SPR-13390](https://jira.spring.io/browse/SPR-13390?redirect=false)** and commented  ```java @Test(expected=Exception.class) public void test() { 	SimpleAliasRegistry registry = new SimpleAliasRegistry(); /*	SimpleAliasRegistry registry = new SimpleAliasRegistry() { 		@Override 		protected void checkForAliasCircle(String name, String alias) { 			if (ObjectUtils.containsElement(getAliases(alias), name)) { 				throw new IllegalStateException(""Cannot register alias '"" + alias + 						""' for name '"" + name + ""': Circular reference - '"" + 						name + ""' is a direct or indirect alias for '"" + alias + ""' already""); 			} 		} 	};*/  	String a = ""a""; 	String b = ""b""; 	String c = ""c""; 	registry.registerAlias(a, b); 	registry.registerAlias(b, c); 	registry.registerAlias(c, b); }  ```  The test above didn't pass.   ---  **Affects:** 4.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b198cad58e8f9a0316f2d7fafce12b3a07cf5071","closed","type: enhancement,","spring-projects-issues","2015-08-24T21:03:49Z","2015-09-01T11:38:23Z"
"","17725","@ResponseBody doesn't work when used on the type level [SPR-13134]","**[俞火江](https://jira.spring.io/secure/ViewProfile.jspa?name=jddxf)** opened **[SPR-13134](https://jira.spring.io/browse/SPR-13134?redirect=false)** and commented  When I add `@ResponseBody` on the method level as follows:  ```java @Controller //@ResponseBody public class UserController { 	 	@RequestMapping(""/hello"") 	@ResponseBody 	public String hello() { 		return ""hello""; 	} } ```  It works as expected.  However, if I add the annotation on the type level:  ```java @Controller @ResponseBody public class UserController { 	 	@RequestMapping(""/hello"") 	//@ResponseBody 	public String hello() { 		return ""hello""; 	} } ```  Then an exception is thrown: Servlet.service() for servlet [dispatcher] in context with path [/practice] threw exception [Circular view path [hello]: would dispatch back to the current handler URL [/practice/main/hello] again. Check your ViewResolver setup! (Hint: This may be the result of an unspecified view, due to default view name generation.)] with root cause javax.servlet.ServletException: Circular view path [hello]: would dispatch back to the current handler URL [/practice/main/hello] again. Check your ViewResolver setup! (Hint: This may be the result of an unspecified view, due to default view name generation.) at org.springframework.web.servlet.view.InternalResourceView.prepareForRendering(InternalResourceView.java:205) at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:145) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:303) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1244) at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1027) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:971) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857)   ---  **Affects:** 4.1.6","closed","status: declined,","spring-projects-issues","2015-06-15T19:08:17Z","2019-01-12T16:23:17Z"
"","17420","Support singleSession(false) in Hibernate 4 OpenSessionInViewInterceptor [SPR-12823]","**[zyro](https://jira.spring.io/secure/ViewProfile.jspa?name=zyro)** opened **[SPR-12823](https://jira.spring.io/browse/SPR-12823?redirect=false)** and commented  Comparing Springs Hibernate 3 `OpenSessionInViewInterceptor` with the one for Hibernate 4, you can see that singleSession support seems to have been dropped.  It would be nice to see support for singleSession (= false) in the Hibernate 4 version, too.  Without it, we get a `LazyInitializationException` with the following pattern: * `OpenSessionInViewInterceptor` (Hibernate 4) is active * Non-Transactional `@Controller` method invokes a * `@Transactional` service method which * throws `RuntimeException`, tx is rolled back, session is cleared * controller method catches exception * controller renders view with detached objects * view accesses lazy-loaded collection  Now, we have to take care manually that all detached objects get re-loaded/re-attached after a service exception rolling back a transaction. With singleSession = false (as was supported for Hibernate 3), only the transactions' session was cleared and the objects stayed attached to the pre-bound session created by OSIVI. meaning you could still access lazy-loaded associations/collections.  Is there any downside (except for the caching/performance impact mentioned in the javadoc) of using singleSession = false, or why was it removed? basically we do only want to display information after rollback, maybe marking the (pre-bound?) session read-only after rollback would by a possible solution, too.  (Short update: I refined the description noting that the rollback clears the session. it does not actually close it)  Thanks, zyro   ---  **Affects:** 4.1.5  0 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-03-16T09:51:49Z","2019-01-12T03:29:46Z"
"","17804","As of Jackson 2.6 the module class supporting the java.time (java8) package has changed [SPR-13212]","**[Zoltan Kiss](https://jira.spring.io/secure/ViewProfile.jspa?name=zkiss)** opened **[SPR-13212](https://jira.spring.io/browse/SPR-13212?redirect=false)** and commented  Previously the module class supporting Java 8's `java.time` package was `com.fasterxml.jackson.datatype.jsr310.JSR310Module`. Now it has been changed to `com.fasterxml.jackson.datatype.jsr310.JavaTimeModule`.  This is because of a change in the way `ZonedDateTime` s are serialized; until 2.6 the zone id was included in the string representation. With 2.6 this behaviour has been changed to adhere to ISO 8601 standards in string representation of dates and a new serialization feature `WRITE_DATES_WITH_ZONE_ID` has been added to enable the old behaviour.  In an effort to provide a backwards compatible behaviour, a new module class `JavaTimeModule` was created which respects the new serialization feature and the old one was kept which ignores it.  ---  **Affects:** 4.2 RC2  **Reference URL:** https://github.com/FasterXML/jackson-datatype-jsr310/pull/15  **Issue Links:** - #17654 Require Jackson 2.6+, FreeMarker 2.3.21+, XStream 1.4.5+  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8fdbf4285b65088599aed432f69f14825be867e6","closed","type: enhancement,","spring-projects-issues","2015-07-08T03:29:36Z","2019-01-11T18:06:38Z"
"","17893","Path variable is set as ModelAttribute value is their names are the same String [SPR-13308]","**[Yuriy Galavay](https://jira.spring.io/secure/ViewProfile.jspa?name=ygalav)** opened **[SPR-13308](https://jira.spring.io/browse/SPR-13308?redirect=false)** and commented  For Example: We have post request by following URL:  ``` /{id}/addProperty ```  Controller method looks like:  ```java @RequestMapping(value = ""/{id}/addProperty"", method = RequestMethod.POST) public String addProperty(@PathVariable Integer id, CategoryProperty property) ```  CategoryPropery has next fields: id : Integer key : String value : String  Post request provides only: key and value but in controller CategoryPropery.id will be set with the same value as PathVariable's ""id"" if their names are the same.  To fix this issue is just enough to rename PathVariable from ""id"" to for example ""categoryId""   --- No further details from [SPR-13308](https://jira.spring.io/browse/SPR-13308?redirect=false)","closed","status: declined,","spring-projects-issues","2015-08-03T04:02:27Z","2019-01-12T16:23:06Z"
"","17477","misplaced   will cause utf-8 characters mal-encoded [SPR-12879]","**[Youmoo Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=youmoo)** opened **[SPR-12879](https://jira.spring.io/browse/SPR-12879?redirect=false)** and commented  when config spring-web.xml, the order of  and \ ...\ will affect utf-8 encoding.  when the order is :  \ ...\ utf-8 characters will be mal-encoded.  when the order is : \ ...\  utf-8 characters will be displayed correctly.  Try this project : https://github.com/Youmoo/pages/raw/gh-pages/rar/spring-sample.tar.gz Sorry for my poor English..    ---  **Affects:** 4.1.5  **Reference URL:** https://github.com/Youmoo/pages/raw/gh-pages/rar/spring-sample.tar.gz","closed","status: declined,","spring-projects-issues","2015-04-01T22:19:14Z","2019-01-12T16:23:23Z"
"","17915","Flexible locale resolution based on supported languages [SPR-13330]","**[Yi EungJun](https://jira.spring.io/secure/ViewProfile.jspa?name=yi%20eungjun)** opened **[SPR-13330](https://jira.spring.io/browse/SPR-13330?redirect=false)** and commented  When an HTTP client prefers a specific language, the server can return a message in the language as follows:  ```java @Autowired private MessageSource messageSource;  public String say (Locale locale) {     return messageSource.getMessage(""my.message"", null, locale); } ```  But Here is a difficult case. If a client requests with many acceptable languages by Accept-Language header:  ```http Accept-Language: ko, ja;q=0.9, en;q=0.8; *;q=0.1 ```  and the server supports many languages, the server should find the best match. In this case, if the server supports 'ja' and 'en', the best match is 'ja'.  But it seems that Spring Framework does not provide a way to do that. It would be nice if it supports that as the following examples:  1. getMessage() accepts a list of locales and choose the best one  ```java @Autowired private MessageSource messageSource;  public String say1 (Collection locales) {     return messageSource.getMessage(""my.message"", null, locales); } ```  2. MessageSource has a method to lookup the best locale [as java.util.Locale does](https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html#lookup-java.util.List-java.util.Collection-).  ```java public String say2(Collection locales) {     Locale locale = messageSource.lookupBestLocale(locales);     return messageSource.getMessage(""my.message"", null, locale); } ```  ---  **Issue Links:** - #18642 Support for HTTP Vary configuration (e.g. in reaction to locale-based rendering) - #18884 AcceptHeaderLocaleResolver should allow to define a default Locale - #19987 Revise AcceptHeaderLocaleResolver default locale handling  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3d67b928b28fe68df6ccb7f9ed949ecdac63a94","closed","type: enhancement,","spring-projects-issues","2015-08-07T02:47:46Z","2019-01-11T18:22:22Z"
"","17876","RequestMapping: case insensitive path matching [SPR-13286]","**[Yi EungJun](https://jira.spring.io/secure/ViewProfile.jspa?name=yi%20eungjun)** opened **[SPR-13286](https://jira.spring.io/browse/SPR-13286?redirect=false)** and commented  I want `@RequestMapping` annotations to match paths in case-insensitive manner so that `@RequestMapping(""/path/to/{name}"")` matches not only `/path/to/me` but also `/path/To/me`, `/PATH/to/me`, and so on.  There is a [known workaround](http://stackoverflow.com/questions/12684183/case-insensitive-mapping-for-spring-mvc-requestmapping-annotations) to do that as follows:  ```java public class CaseInsensitivePathMatcher extends AntPathMatcher {     @Override     protected boolean doMatch(String pattern, String path, boolean fullMatch, Map uriTemplateVariables) {         return super.doMatch(pattern.toLowerCase(), path.toLowerCase(), fullMatch, uriTemplateVariables);     } } ```  But it makes the values of URI template variables lowercase. I want to keep the case information.  ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/291550a4843edbecd371e6f040c3b154dac6189f","closed","type: enhancement,","spring-projects-issues","2015-07-28T19:19:56Z","2019-01-13T20:51:42Z"
"","17726","Status 406 ""Not Accepted"" is not appropriate when no message converter can handle return type [SPR-13135]","**[Yi EungJun](https://jira.spring.io/secure/ViewProfile.jspa?name=yi%20eungjun)** opened **[SPR-13135](https://jira.spring.io/browse/SPR-13135?redirect=false)** and commented  Spring Framework seems to response 406 Not Accepted if there is no proper converter. For example, the following controller method responses always 406 Not Accepted because there is no proper message converter for the method which returns `java.io.OutputStream` , even if the client requested with ""`Accept: \*/\*`"" header which means accept any media type.  ```java @RequestMapping(""/"") public OutputStream test() {     return new ByteArrayOutputStream(); } ```  I think the behavior, which respones 4xx Client Error, is not correct because it is a server error. The reason of the failure of the content negitation is the server programmer's mistake. The programmer should write a controller method that returns supported return type or register a propert converter.  If the server responses 406 Not Accepted incorrectly, the person on the client will waste time to find ""the proper media type"", which does not exist, the server can send. But if the server responses 5xx correctly, the person will report it to the server programmer without wasting time.   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8d7812b1b6c47c3edef1332639cb57b92327ec46","closed","type: enhancement,","spring-projects-issues","2015-06-16T06:42:43Z","2019-01-13T05:40:29Z"
"","17712","400 Bad Request for missing URI template variable is incorrect [SPR-13121]","**[Yi EungJun](https://jira.spring.io/secure/ViewProfile.jspa?name=yi%20eungjun)** opened **[SPR-13121](https://jira.spring.io/browse/SPR-13121?redirect=false)** and commented  If I have a controller which has a method whose RequestMapping is incorrect as follows:  ```java @RestController public class HelloController {     @RequestMapping(""/test/{a}"")     public String test(@PathVariable String b) {         return ""ok"";     } } ```  Then I request '/test/1' the server will response with 400 Bad Request as follows:  ```json {""timestamp"":1434182424954,""status"":400,""error"":""Bad Request"",""exception"":""org.springframework.web.bind.ServletRequestBindingException"",""message"":""Missing URI template variable 'b' for method parameter of type String"",""path"":""/test/aaa""} ```  But 400 Bad Request is incorrect for this situation because it was not a client error but a server error, because there is no way to request correctly without modifying the server.  ---  **Affects:** 4.1.6  **Issue Links:** - #19384 Specific exceptions for missing request headers, cookies, etc - #17858 InvocableHandlerMethod.getMethodArgumentValues() failure should lead to warn-level logging by default  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4b05bda0bf1507af578f042a5a29901e307bccf2","closed","type: enhancement,","spring-projects-issues","2015-06-13T01:12:54Z","2019-01-11T16:24:40Z"
"","17895","Add EnumToEnumConverter [SPR-13310]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-13310](https://jira.spring.io/browse/SPR-13310?redirect=false)** and commented  sometime we need copy a shadow package for export remote service interface, service interface depend domain object which include domain enum type, it is necessary to support conversion between origin Enum type to shadow Enum.   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/852","open","type: enhancement,","spring-projects-issues","2015-08-03T19:15:49Z","2016-06-02T08:46:54Z"
"","17503","HttpMessageConverter should close OutputStream [SPR-12904]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-12904](https://jira.spring.io/browse/SPR-12904?redirect=false)** and commented  I'm writing a HttpServletResponseWrapper implementing my own ServletOutputStream  for logging response body. I found ServletOutputStream.close() never called,  ServletOutputStream.flush() called once, It could be a workaround but not recommended. spring should close ServletOutputStream as same as ServletInputStream.  ``` else {      writeInternal(t, outputMessage);      outputMessage.getBody().flush();      outputMessage.getBody().close(); //stream should be closed } ```  here is my own implementation  ``` public class LoggingBodyHttpServletResponse extends HttpServletResponseWrapper {  	private Logger logger;  	private volatile ServletOutputStream streamOutputStream;  	private ByteArrayOutputStream baos = new ByteArrayOutputStream(2048);  	public LoggingBodyHttpServletResponse(HttpServletResponse response, 			Logger logger) { 		super(response); 		this.logger = logger; 	}  	@Override 	public ServletOutputStream getOutputStream() throws IOException {  		final ServletOutputStream os = super.getOutputStream(); 		if (streamOutputStream == null) { 			synchronized (this) { 				if (streamOutputStream == null) { 					streamOutputStream = new ServletOutputStream() {  						@Override 						public boolean isReady() { 							return os.isReady(); 						}  						@Override 						public void setWriteListener(WriteListener writeListener) { 							os.setWriteListener(writeListener); 						}  						@Override 						public void write(int b) throws IOException { 							os.write(b); 							baos.write(b); 						}  						@Override 						public void flush() throws IOException { 							os.flush(); 						}  						@Override 						public void close() throws IOException { 							os.flush(); 							os.close(); 							if (baos != null) { 								byte[] bytes = baos.toByteArray(); 								baos.close(); 								baos = null; 								String encoding = getCharacterEncoding(); 								if (encoding == null) 									encoding = ""UTF-8""; 								logger.info(""\n{}"", new String(bytes, 0, 										bytes.length, encoding)); 							} 						}  					}; 				} 			} 		} 		return streamOutputStream;  	}  } ```    ---  **Affects:** 4.1.6","closed","status: bulk-closed,","spring-projects-issues","2015-04-13T01:43:59Z","2019-01-12T00:17:27Z"
"","17257","context register @Configuration doesn't respect @Order  [SPR-12657]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-12657](https://jira.spring.io/browse/SPR-12657?redirect=false)** and commented  according to http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/PropertySource.html  ```java @Order(1) @Configuration  @PropertySource(""classpath:/com/myco/a.properties"")  public class ConfigA { }  @Order(-1)  @Configuration  @PropertySource(""classpath:/com/myco/b.properties"")  public class ConfigB { } ```  ```xml  ```  changing `@Order` of `@Configuration` doesn't affect property source overriding.  ---  **Issue Links:** - #17527 Regression: `@Primary` annotation not working when overriding bean definition with classpath scanning  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f5b4e18209c45c948ab6bce6d166ef17b3f5b25d  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2015-01-22T17:21:58Z","2019-01-13T05:42:39Z"
"","17237","@Order should get detected in case of proxyTargetClass=false as well [SPR-12636]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-12636](https://jira.spring.io/browse/SPR-12636?redirect=false)** and commented  ```java public interface UserService  	public boolean exists(String username); } ```  ```java @Component @Order(1) public class UserService1 implements UserService { 	@Transactional 	public boolean exists(String username) { 		return false; 	} } ```  ```java @Component @Order(2) public class UserService2 implements UserService { 	public boolean exists(String username) { 		return false; 	} } ```  ```java @Autowired private List userServices; ```  userServices will be [userService1,userService2] when proxyTargetClass=true , [userService2,userService1] when proxyTargetClass=false. If JDK proxy cannot obtain `@Order`, I suggest spring use proxyTargetClass=true as default.  ---  **Issue Links:** - #17301 No way to retrieve the actual target type using beanName (_**""depends on""**_) - #20761 Document common use cases for `@Order` vs `@Priority` vs `@DependsOn`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1aec6a6cc29c54cd74a7e609a2fa08d39835abe1","closed","type: enhancement,","spring-projects-issues","2015-01-17T05:55:08Z","2019-01-13T05:42:47Z"
"","17473","How to use in gradle/groovy [SPR-12875]","**[yangjun](https://jira.spring.io/secure/ViewProfile.jspa?name=yangjun)** opened **[SPR-12875](https://jira.spring.io/browse/SPR-12875?redirect=false)** and commented  I want to use  such as  in context-mvc.groovy,and i do not know how to write.do you have any idea?  import org.springframework.web.servlet.view.InternalResourceViewResolver  beans { xmlns context: ""http://www.springframework.org/schema/context""  context.""component-scan""(""base-package"" : ""com.oberon.fm"")  viewResolver(InternalResourceViewResolver) { prefix = ""/pages/"" suffix = "".jsp"" } }   --- No further details from [SPR-12875](https://jira.spring.io/browse/SPR-12875?redirect=false)","closed","status: invalid,","spring-projects-issues","2015-04-01T02:14:01Z","2019-01-12T05:24:33Z"
"","17717","Mismatch of the PrintWriter in ServletResponse [SPR-13126]","**[Xian Li](https://jira.spring.io/secure/ViewProfile.jspa?name=lixian)** opened **[SPR-13126](https://jira.spring.io/browse/SPR-13126?redirect=false)** and commented  `javax.servlet.ServletResponse#getWriter` will return `java.io.PrintWriter`.  > Methods in this class never throw I/O exceptions, although some of its constructors may. The client may inquire as to whether any errors have occurred by invoking checkError().  But the renders of popular templates (FreeMarker/Velocity) just use `java.io.Writer` and expect an `IOException` thrown if something is wrong.  This mismatch will lead the render writes data continuously while the connection has been broken.  I have met a bug while using default Jetty 8 and FreeMarker. If the client close the connection, The render will write data continuously and the Jetty 8 continuously flush a full buffer. This will lead a performance issue dramatically.  Fixing It depends on the servlet container to return a subclass of `java.io.PrintWriter`, which can handle exception properly while the connection is broken and the render don't known that.  For popular containers: * Jetty 8 will swallow the `IOException` by default, while you can config to use a `UncheckedPrintWriter`. * Jetty 9 (latest 9.2.11.v20150529) swallow the `IOException` by default, and you can't change it. This bug has been fixed and will release in jetty 9.3. (https://bugs.eclipse.org/bugs/show_bug.cgi?id=465754) * Tomcat will swallow the `IOException`. But it will abandon the Writer and do nothing further.  But I think maybe the spring framework has the responsibility to handle it because the contract of the ServletResponse declare `PrintWriter`. You should not assume the web container has handled the mismatch properly.   ---  **Affects:** 4.2 RC1","closed","status: bulk-closed,","spring-projects-issues","2015-06-15T05:29:03Z","2019-01-12T02:27:34Z"
"","17605","Commons FileUpload failed after Spring framework upgrade [SPR-13014]","**[william zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=william_zhou)** opened **[SPR-13014](https://jira.spring.io/browse/SPR-13014?redirect=false)** and commented  We recently upgraded from Spring framework 3.2.2 to 4.1.6 for our RESTful Services. We have a custom HTTP message reader for multipart request parsing using Apache Commons FileUpload. The code is like this:  ```java @Override public T read(Class clazz, HttpInputMessage inputMessage) 		throws HttpMessageNotReadableException, IOException { 	if (inputMessage instanceof ServletServerHttpRequest 			&& ServletFileUpload.isMultipartContent(                                ((ServletServerHttpRequest) inputMessage).getServletRequest())) { 		ServletFileUpload upload = new ServletFileUpload(); 		try { 			FileItemIterator iterator = upload 				.getItemIterator(                                      ((ServletServerHttpRequest)inputMessage).getServletRequest()); 			T po = null; 			if (iterator.hasNext()) { 					po = parseDocument(iterator.next(), clazz); 			... } ```  It works fine while we were using Spring framework 3.2.2. However, after we upgraded to the Spring framework 4.1.6, the multipart request failed as the 1st part was dropped.  After debugging into the Spring code, we found that **org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor** has been changed that, in Spring 3.2.2, it wraps the servlet request's inputstream as a PushbackInputStream **only when `@RequestBody` is not required**.  ```java RequestBody annot = methodParam.getParameterAnnotation(RequestBody.class); if (!annot.required()) {      ...      inputMessage = new ServletServerHttpRequest(servletRequest) { 		@Override 		public InputStream getBody() throws IOException { 		// Form POST should not get here 		return pushbackInputStream; 	} }; ```  And in Spring 4.1.6, it always wraps the inputstream. This makes our code failed because Commons FileUpload takes the **HttpServletRequest** as the input parameter, and the wrapped inputstream is just ignored.  To make it work, we have to workaround our code, like below:  ```java final InputStream bodyWrapper = inputMessage.getBody();  HttpServletRequest requestWrapper = new HttpServletRequestWrapper(((ServletServerHttpRequest) inputMessage)        .getServletRequest()) {           @Override           public ServletInputStream getInputStream() throws IOException {                    return new ServletInputStreamWrapper(bodyWrapper);           } };  FileItemIterator iterator = upload.getItemIterator(requestWrapper); ```  However, this should really be fixed by Spring code.  ---  **Affects:** 4.1.6  **Issue Links:** - #17376 Re-allow handling empty request body  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a899e066f2944aea29e51bc281f4f30cda86cc9b","closed","in: core,","spring-projects-issues","2015-05-11T07:48:57Z","2019-01-11T16:05:03Z"
"","17449","spring.mvc.favicon.enabled=false does not work on sprint-boot-starter-web [SPR-12851]","**[watanabe](https://jira.spring.io/secure/ViewProfile.jspa?name=nabedge)** opened **[SPR-12851](https://jira.spring.io/browse/SPR-12851?redirect=false)** and commented  spring.mvc.favicon.enabled=false spring.favicon.enabled=false  The above properties on src/main/resources/application.properties does not work on sprint-boot 1.2.x or 1.1.x .  sample project: https://github.com/nabedge/sb-favicon-sample  1. start sample application 2. go http://localhost:8080/ 3. click link ""get favicon.ico""  actual behavier: download default favicon (green leaf image)  expected behavier: 404 not found.    ---  **Reference URL:** https://github.com/nabedge/sb-favicon-sample","closed","status: invalid,","spring-projects-issues","2015-03-25T04:12:02Z","2019-01-12T05:24:35Z"
"","17290","MockMvc fails to capture the Exception message [SPR-12692]","**[Volkan Yazici](https://jira.spring.io/secure/ViewProfile.jspa?name=vy)** opened **[SPR-12692](https://jira.spring.io/browse/SPR-12692?redirect=false)** and commented  `MockMvc` fails to capture the message field of exceptions thrown by a controller; whereas, the same message gets captured perfectly well by the application server. That is, given the following controller:  ```java @RestController public class Controller {      @RequestMapping(""/test"")     public void create() {         throw new BadRequestException(""it works"");     }  } ```  such that `BadRequestException` is defined as:  ```java @ResponseStatus(value = HttpStatus.BAD_REQUEST, reason = ""bad request"") public class BadRequestException extends IllegalArgumentException {      public BadRequestException(String message) { super(message); }  } ```  the unit test shown below  ```java @RunWith(SpringJUnit4ClassRunner.class) @SpringApplicationConfiguration(classes = { Main.class }) @WebAppConfiguration public class ControllerTest {      @Autowired     private WebApplicationContext webApplicationContext;      private MockMvc mockMvc;      @Before     public void setup() {         mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();     }      @Test     public void testUserNewWithInvalidInput() throws Exception {         mockMvc.perform(get(""/test"")).andDo(print());     }  } ```  shows that `MockMvc` did not capture the response body:  ``` ... MockHttpServletResponse:               Status = 400        Error message = bad request              Headers = {}         Content type = null                 Body =         Forwarded URL = null       Redirected URL = null              Cookies = [] ```  However, the same controller works perfectly fine when run within a Servlet container:  ``` $ curl -v http://localhost:8080/test * Hostname was NOT found in DNS cache *   Trying 127.0.0.1... * Connected to localhost (127.0.0.1) port 8080 (#0) > GET /test HTTP/1.1 > User-Agent: curl/7.35.0 > Host: localhost:8080 > Accept: */* >  < HTTP/1.1 400 Bad Request * Server Apache-Coyote/1.1 is not blacklisted < Server: Apache-Coyote/1.1 < Content-Type: application/json;charset=UTF-8 < Transfer-Encoding: chunked < Date: Thu, 05 Feb 2015 13:40:46 GMT < Connection: close <  * Closing connection 0 {""timestamp"":1423143646099,""status"":400,""error"":""Bad Request"",""exception"":""com.vlkan.springtest.BadRequestException"",""message"":""bad request"",""path"":""/test""} ```    ---  **Affects:** 4.1.4  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2015-02-05T05:42:03Z","2021-05-06T16:07:51Z"
"","17407","Not reusable input stream in ContentCachingRequestWrapper  [SPR-12810]","**[Vlad Bochenin](https://jira.spring.io/secure/ViewProfile.jspa?name=vbochenin)** opened **[SPR-12810](https://jira.spring.io/browse/SPR-12810?redirect=false)** and commented  in org/springframework/web/util/ContentCachingRequestWrapper.java  When you call getParameterMap(), Tomcat, for example, reads parameters from InputStream, so impossible to read from input stream in servlet  I tried in Tomcat 7.0.52, but I think it will be reproduced in other servlet containers  Step to reproduce 1. Register logging filter (CommonsRequestLogginFilter etc) in filter chain 2. Execute POST Form request 3. Try to read something from request input stream in servlet (after filter was executed)  Expected result: you can read data from input stream  Actual Result: You cannot read any data from input stream  ---  **Affects:** 4.1.5  **Issue Links:** - #17412 Improve ContentCachingRequestWrapper  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/151e96cac4b3ea0afa42a0c341a7f2ec37b5db72, https://github.com/spring-projects/spring-framework/commit/abd7052b160cde88c6a046ca58d3d18e899ce60a, https://github.com/spring-projects/spring-framework/commit/ce84fafde4c2031506ca119f9a586328f061a54c, https://github.com/spring-projects/spring-framework/commit/c6250f5164245e0e3aa76d56078465f4ee611a5b","closed","type: bug,","spring-projects-issues","2015-03-12T06:18:36Z","2019-01-11T22:00:40Z"
"","17596","ContentCachingResponseWrapper should NOT sendError() before write body [SPR-13004]","**[Victor Lyuboslavsky](https://jira.spring.io/secure/ViewProfile.jspa?name=getvictor)** opened **[SPR-13004](https://jira.spring.io/browse/SPR-13004?redirect=false)** and commented  The fix for #16327 does not work with Tomcat 8.0.21  ``` public void sendError(int sc, String msg) throws IOException {      copyBodyToResponse();      super.sendError(sc, msg);      this.statusCode = sc; } ```  When `copyBodyToResponse()` is called, Tomcat considers the response committed. Then, when `sendError` is called, Tomcat throws  ``` org.glassfish.jersey.server.ServerRuntime$Responder - Error while closing the output stream in order to commit response. java.lang.IllegalStateException: Cannot call sendError() after the response has been committed 	at org.apache.catalina.connector.ResponseFacade.sendError(ResponseFacade.java:462) 	at javax.servlet.http.HttpServletResponseWrapper.sendError(HttpServletResponseWrapper.java:120) 	at javax.servlet.http.HttpServletResponseWrapper.sendError(HttpServletResponseWrapper.java:120) 	at org.springframework.web.util.ContentCachingResponseWrapper.sendError(ContentCachingResponseWrapper.java:83) ```  Tomcat considers the response committed because contentLength is more than 0, and it is the same as contentWritten. From org/apache/catalina/connector/Response.java:  ``` public boolean isAppCommitted() {     return (this.appCommitted || isCommitted() || isSuspended()             || ((getContentLength() > 0)                 && (getContentWritten() >= getContentLength()))); } ```  I propose that whenever content length > 0, sendError should not be called.  My current workaround:  ``` public class BackendContentCachingResponseWrapper extends ContentCachingResponseWrapper {      public BackendContentCachingResponseWrapper(HttpServletResponse response) {         super(response);     }      @Override     public void sendError(int sc, String msg) throws IOException {         try {             super.sendError(sc, msg);         } catch (IllegalStateException e) {             // ignore         }     }  } ```  ---  **Affects:** 4.1.6  **Issue Links:** - #16327 ShallowEtagHeaderFilter should write body early when HttpServletResponse.sendError() is called","closed","type: bug,","spring-projects-issues","2015-05-09T10:25:13Z","2019-01-11T16:07:11Z"
"","17404","Spring 4.1 upgrade and  Transaction Propagation issue from readOnly to readWrite [SPR-12807]","**[Venkat Srinivasan](https://jira.spring.io/secure/ViewProfile.jspa?name=venkatsrinivasan)** opened **[SPR-12807](https://jira.spring.io/browse/SPR-12807?redirect=false)** and commented  Hello All, I had posted this question on stackoverflow and somone suggesting writing a test program and open a jira ticket . To summarize, I have  a service method A with `@Transactional` marked readOnly calling a service2 method B with `@Transactional` marked non-readOnly. We have been using spring 3.x for a while and are now migrating to spring 4  and found that now it gives the exception ""Connection is read-only. Queries leading to data modification are not allowed; "" I tested this with Spring 4.0.9 and it seems to work fine but not 4.1 and above.  I was under the assumption a propagation change from readOnly to readWrite in an underlying tx advice if so specified would switch the transaction to write mode. Maybe my understanding is incorrect but this flow seems to work until 4.1. I have attached a test program which illustrates this. mvn test will fail if the pom.xml in the test package contains spring .version = 4.1.5.RELEASE but work pass through if spring.version = 4.0.9.RELEASE. We will go back and refactor our code but just curious if in case this is a bug or expected behavior which has been eventually resolved in 4.1.  ---  Thanks in advance  ---  **Affects:** 4.1 GA, 4.1.4, 4.1.5  **Reference URL:** http://stackoverflow.com/questions/28978948/spring-4-1-upgrade-causing-transaction-propagation-issue  **Attachments:** - [tx-tester.tar.gz](https://jira.spring.io/secure/attachment/22684/tx-tester.tar.gz) (_4.40 kB_)","closed","in: core,","spring-projects-issues","2015-03-11T08:51:35Z","2019-01-13T20:57:08Z"
"","17588","WorkManagerTaskExecutor (org.springframework.scheduling.commonj.WorkManagerTaskExecutor) not allowed to run my test case ( Juit 4) [SPR-12996]","**[vaquar khan](https://jira.spring.io/secure/ViewProfile.jspa?name=vaquarkhan)** opened **[SPR-12996](https://jira.spring.io/browse/SPR-12996?redirect=false)** and commented  I am using WorkManagerTaskExecutor and it’s working fine for my code .  Issue : WorkManagerTaskExecutor (org.springframework.scheduling.commonj.WorkManagerTaskExecutor) is not allowed to run my test case ( Juit 4)  Logs:  Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'abcManager' defined in class path resource [com/abc/abc_business_context.xml]: Invocation of init method failed; nested exception is javax.naming.NameNotFoundException: remaining name: env/abceAppWorkManager at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1455) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322) ... 162 more Caused by: javax.naming.NameNotFoundException: remaining name: env/abcAppWorkManager at weblogic.j2eeclient.SimpleContext.resolve(SimpleContext.java:35) at weblogic.j2eeclient.SimpleContext.resolve(SimpleContext.java:39) at weblogic.j2eeclient.SimpleContext.lookup(SimpleContext.java:59) at weblogic.j2eeclient.SimpleContext.lookup(SimpleContext.java:59) at weblogic.j2eeclient.SimpleContext.lookup(SimpleContext.java:64) at weblogic.jndi.factories.java.ReadOnlyContextWrapper.lookup(ReadOnlyContextWrapper.java:45) at weblogic.jndi.internal.AbstractURLContext.lookup(AbstractURLContext.java:130) at javax.naming.InitialContext.lookup(InitialContext.java:392) at org.springframework.jndi.JndiTemplate$1.doInContext(JndiTemplate.java:154) at org.springframework.jndi.JndiTemplate.execute(JndiTemplate.java:87) at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:152) at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:178) at org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:95) at org.springframework.scheduling.commonj.WorkManagerTaskExecutor.afterPropertiesSet(WorkManagerTaskExecutor.java:137) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1514) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452) ... 169 more    ---  **Affects:** 3.2.14","closed","in: core,","spring-projects-issues","2015-05-07T01:07:22Z","2019-01-12T05:24:21Z"
"","17243","ProxyFactoryBean intercepts methods that are not in interceptorNames [SPR-12642]","**[Valery Tydykov](https://jira.spring.io/secure/ViewProfile.jspa?name=isobretatel)** opened **[SPR-12642](https://jira.spring.io/browse/SPR-12642?redirect=false)** and commented  Problem: ""toString"" method should not be intercepted, since it is not in javax.servlet.Filter interface.  \ \ \ \ \ \ \ \myInterceptor\ \ \ \  public class MyInterceptor implements MethodInterceptor { public Object invoke(final MethodInvocation invocation) throws Throwable { if (""toString"".equals(invocation.getMethod().getName())) { // ""toString"" method should not be intercepted return invocation.proceed(); }          return invocation.proceed();     }  }  Environment: JavaSE 1.6.   ---  **Affects:** 4.1.3  **Reference URL:** https://jira.spring.io/browse/SEC-2821","closed","in: core,","spring-projects-issues","2015-01-19T08:55:43Z","2019-01-12T16:23:40Z"
"","17998","org.springframework.orm.hibernate5.HibernateTemplate doesn't work [SPR-13419]","**[Vadim Marchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=vvmar)** opened **[SPR-13419](https://jira.spring.io/browse/SPR-13419?redirect=false)** and commented  ``` java.lang.ClassCastException: org.springframework.orm.hibernate4.SessionHolder cannot be cast to org.springframework.orm.hibernate5.SessionHolder 	at org.springframework.orm.hibernate5.HibernateTemplate.prepareQuery(HibernateTemplate.java:1154) ~[spring-orm-4.2.1.BUILD-SNAPSHOT.jar:4.2.1.BUILD-SNAPSHOT] 	at org.springframework.orm.hibernate5.HibernateTemplate$CloseSuppressingInvocationHandler.invoke(HibernateTemplate.java:1247) ~[spring-orm-4.2.1.BUILD-SNAPSHOT.jar:4.2.1.BUILD-SNAPSHOT] 	at com.sun.proxy.$Proxy102.createQuery(Unknown Source) ~[na:na] 	at com.eedgesoft.dao.model.conf.jobs.feed.RSSJobFactory$1.doInHibernate(RSSJobFactory.java:37) ~[classes/:na] 	at com.eedgesoft.dao.model.conf.jobs.feed.RSSJobFactory$1.doInHibernate(RSSJobFactory.java:1) ~[classes/:na] 	at org.springframework.orm.hibernate5.HibernateTemplate.doExecute(HibernateTemplate.java:341) ~[spring-orm-4.2.1.BUILD-SNAPSHOT.jar:4.2.1.BUILD-SNAPSHOT] 	at org.springframework.orm.hibernate5.HibernateTemplate.execute(HibernateTemplate.java:296) ~[spring-orm-4.2.1.BUILD-SNAPSHOT.jar:4.2.1.BUILD-SNAPSHOT] ```    --- No further details from [SPR-13419](https://jira.spring.io/browse/SPR-13419?redirect=false)","closed","in: core,","spring-projects-issues","2015-09-02T01:01:10Z","2019-02-15T04:30:09Z"
"","17283","LocalContainerEntityManagerFactoryBean returns null when trying to retrieve the EntityManagerFactory using .getObject() after having datasource set to a jdni, vendorAdapter set to hibernate and jpa properties set using spring java config  [SPR-12684]","**[Tyron James Hall](https://jira.spring.io/secure/ViewProfile.jspa?name=tyron)** opened **[SPR-12684](https://jira.spring.io/browse/SPR-12684?redirect=false)** and commented  See attached config file and error is per below:  ___________________________________  null 03-Feb-2015 18:36:28.875 SEVERE [http-apr-8080-exec-8] org.apache.catalina.core.StandardContext.startInternal Error listenerStart 03-Feb-2015 18:36:28.875 SEVERE [http-apr-8080-exec-8] org.apache.catalina.core.StandardContext.startInternal Context [] startup failed due to previous errors  In server log:  03-Feb-2015 18:36:23.537 INFO [http-apr-8080-exec-6] org.apache.catalina.core.ApplicationContext.log Closing Spring root WebApplicationContext 03-Feb-2015 18:36:27.700 INFO [http-apr-8080-exec-8] org.apache.catalina.core.ApplicationContext.log Spring WebApplicationInitializers detected on classpath: [com.tyron.config.SpringMvcInitializer@5ee2033d] 03-Feb-2015 18:36:27.740 INFO [http-apr-8080-exec-8] org.apache.catalina.core.ApplicationContext.log Initializing Spring root WebApplicationContext 03-Feb-2015 18:36:28.870 SEVERE [http-apr-8080-exec-8] org.apache.catalina.core.StandardContext.listenerStart Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in com.tyron.config.AppConfig: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean]: Factory method 'entityManagerFactory' threw exception; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1111) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1006) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:956) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:747) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:403) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:106) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4795) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5221) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:724) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:700) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:714) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:581) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:455) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1495) at sun.reflect.GeneratedMethodAccessor84.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:483) at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) at org.apache.catalina.manager.ManagerServlet.check(ManagerServlet.java:1432) at org.apache.catalina.manager.ManagerServlet.deploy(ManagerServlet.java:884) at org.apache.catalina.manager.ManagerServlet.doGet(ManagerServlet.java:335) at javax.servlet.http.HttpServlet.service(HttpServlet.java:618) at javax.servlet.http.HttpServlet.service(HttpServlet.java:725) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:108) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:618) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:537) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1081) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:658) at org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler.process(Http11AprProtocol.java:277) at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2403) at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:2392) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:744) Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean]: Factory method 'entityManagerFactory' threw exception; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ... 59 more Caused by: java.lang.NullPointerException at com.tyron.config.AppConfig.entityManagerFactory(AppConfig.java:87) at com.tyron.config.AppConfig$$EnhancerBySpringCGLIB$$60f3127f.CGLIB$entityManagerFactory$1(\) at com.tyron.config.AppConfig$$EnhancerBySpringCGLIB$$60f3127f$$FastClassBySpringCGLIB$$c78012aa.invoke(\) at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:309) at com.tyron.config.AppConfig$$EnhancerBySpringCGLIB$$60f3127f.entityManagerFactory(\) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:483) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ... 60 more   ---  **Affects:** 4.1.4  **Attachments:** - [AppConfig.java](https://jira.spring.io/secure/attachment/22645/AppConfig.java) (_7.00 kB_)","closed","status: bulk-closed,","spring-projects-issues","2015-02-03T08:39:06Z","2019-01-12T03:30:15Z"
"","17933","Avoid ambiguous property warning for setter methods with multiple parameters [SPR-13349]","**[Tristan Hill](https://jira.spring.io/secure/ViewProfile.jspa?name=tristanh)** opened **[SPR-13349](https://jira.spring.io/browse/SPR-13349?redirect=false)** and commented  I'm getting this warning on application initialization:  ```java WARN  org.springframework.beans.GenericTypeAwarePropertyDescriptor  - Invalid JavaBean property 'endpoint' being accessed! Ambiguous write methods found next to actually used [public void com.amazonaws.AmazonWebServiceClient.setEndpoint(java.lang.String) throws java.lang.IllegalArgumentException]: [public void com.amazonaws.AmazonWebServiceClient.setEndpoint(java.lang.String,java.lang.String,java.lang.String)] ```  The bean configuration is:  ```xml                  ```  Is the method really ambiguous since only a single string parameter is provided as argument?  ---  **Affects:** 3.2.14  **Issue Links:** - #9606 Spring inconsistently resolves an overloaded setter method  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eb5b147364b591763cf5385fc3139c337416f116, https://github.com/spring-projects/spring-framework/commit/42d5780cd3647e92fd4108eaec4e68410e711556, https://github.com/spring-projects/spring-framework/commit/05a16a1bfab15215f0b9a71f383cfe99b15f322b  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1), [3.2.15](https://github.com/spring-projects/spring-framework/milestone/103?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-08-13T02:54:17Z","2019-01-11T18:21:56Z"
"","17306","@Scheduled no longer works in case of multiple proxied target classes implementing the same interface [SPR-12709]","**[Trent Summerfield](https://jira.spring.io/secure/ViewProfile.jspa?name=tsummerfield)** opened **[SPR-12709](https://jira.spring.io/browse/SPR-12709?redirect=false)** and commented  We had a number of `@Scheduled` tasks stop firing after upgrading spring 3.2.x. I have tracked down the problem to changes introduced by #16803  We have a point cut set as such  ```java @Pointcut(""execution(* com.example.Processor.process())"")}} ```  where Processor is a simple interface  ```java public interface Processor {     void process(); } ```  The implementing class looks like  ```java @Component public class ProcessorImpl implements Processor {      @Override     @Scheduled(cron = ""*/2 * * * * *"")     public void process() {         System.out.println(""It works!"");     } } ```  This works as expected in 3.2.11, printing ""It works!"" every 2 seconds. However the scheduled task fails to fire since 3.2.12. I have tested this with aspectj versions 1.7.4 and 1.8.5 and both fail to work.  I have confirmed that reverting commit `37da70629f68b07d83d5c57abb74cecb7ecb358b`, introduced by #16803, fixes this problem.  ---  **Affects:** 3.2.12, 3.2.13  **Issue Links:** - #16803 Scheduled/JmsListenerAnnotationBeanPostProcessor needlessly scans every scoped instance  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1273c90a645a4fcc79719f14b4dc500106dfac2b, https://github.com/spring-projects/spring-framework/commit/3b8d8782851fe447db3b40f09444f428e1e7f5c3, https://github.com/spring-projects/spring-framework/commit/f8a8ecd8feafadc2863e0f5fab766543c4f4044c  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)  1 votes, 7 watchers","closed","type: bug,","spring-projects-issues","2015-02-11T16:23:34Z","2019-01-11T21:29:33Z"
"","17959","Apply Filter or Interceptor to Controller class via annotations [SPR-13377]","**[Travis Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=tsmith)** opened **[SPR-13377](https://jira.spring.io/browse/SPR-13377?redirect=false)** and commented  I think it would be awesome to be able to apply Filters or perhaps Interceptors as annotations. E.g.  ``` @Controller public class DefaultController {     @RequestMapping(""/"")     @ResponseBody     String home() {         return ""Hello World!"";     } } ```  And we want to apply some specific, custom authentication to that controller or request handlers.  ``` @Controller @MyAuthenticationFilter public class DefaultController {     @RequestMapping(""/"")     @ResponseBody     String home() {         return ""Hello World!"";     } } ```  Or maybe `@Filter(MyAuthenticationFilter.class)` could work as well.  ---  **Issue Links:** - #9447 `@HandlerInterceptor` (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2015-08-21T12:43:21Z","2019-01-13T05:36:37Z"
"","17727","XML input vulnerability based on DTD declaration [SPR-13136]","**[Toshiaki Maki](https://jira.spring.io/secure/ViewProfile.jspa?name=making)** opened **[SPR-13136](https://jira.spring.io/browse/SPR-13136?redirect=false)** and commented  If DTD is not entirely disabled, inline DTD declarations can be used to perform _Denial of Service_ attacks known as _XML bombs_. Such declarations are both well-formed and valid according to XML schema rules but when parsed can cause out of memory errors. To protect against this kind of attack DTD support must be disabled by setting the `disallow-doctype-dec` feature in the DOM and SAX APIs to `true` and by setting the `supportDTD` property in the StAX API to `false`.  ---  **Issue Links:** - #20352 Disable DTD and external entities support in XmlEventDecoder to prevent XXE and XML bomb attack  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2015-06-16T17:47:44Z","2019-01-11T16:23:41Z"
"","17677","Autowiring with @Autowired/@Inject get much slower than with @Resource as the number of classes increases [SPR-13086]","**[Toshiaki Maki](https://jira.spring.io/secure/ViewProfile.jspa?name=making)** opened **[SPR-13086](https://jira.spring.io/browse/SPR-13086?redirect=false)** and commented  I had a performance issue at the project which had a few thousand of `@Component` classes. The start up time of the application took a few minutes. That application used `@Autowired` for autowiring and the start up time reduced to less than one minute after swiching `@Autowired` to `@Resource`.  So, I measured the time to create `ApplicationContext` for the following patterns:  * Pattern1 `@Inject` * Pattern2 `@Inject + @Named` * Pattern3 `@Autowired` * Pattern4 `@Autowired + @Qualifier` * Pattern5 `@Resource`  I generated a lot of components with [the script](https://github.com/making/autowiring-benchmark) . This script generates N `Controller` s, `Service` s, and `ServiceImpl` s. The result was as follows:  |N|1000|2000|3000|4000|5000|6000| |:---|:---|:---|:---|:---|:---|:---| | Pattern 1 | 8549 | 21171 | 35018 | 55879 | 86589 | 112140 | | Pattern 2 | 9547 | 19830 | 35662 | 57174 | 85846 | 108736 | | Pattern 3 | 9282 | 19121 | 35586 | 57377 | 81274 | 106385 | | Pattern 4 | 9126 | 19394 | 36292 | 57704 | 81762 | 110087 | | Pattern 5 | 6663 | 11203 | 16427 | 23868 | 30603 | 33978 | (unit=milli second)  ![Graph.png](https://jira.spring.io/secure/attachment/22891/Graph.png)  At that time, I used Spring 4.1.6.RELEASE with the following environment:  * OS: Windows 7 64bit * CPU: Core i7-4610M CPU @ 3.00GHz * RAM: 16GB * JDK: Oracle JDK 8u45  Previous versions will be same.  `@Inject` and `@Autowired` (Pattern 1-4) seems to take `O(N^2)` time. On the other hand  `@Resource` seems to take `O(N)` time.  I guess autowirng ""by name"" is faster than ""by type"" because the number of candidates for each ""type"" increase as the target of component-scan increases and `@Qualifier`, `@Named` doesn't give any optimization for autowiring.  So I hope * Autowiring by type gets faster * `@Autowired` + `@Qualifier` and `@Inject` + `@Named` became as fast as `@Resource`  ---  **Affects:** 4.1.6  **Attachments:** - [Autowired.xlsx](https://jira.spring.io/secure/attachment/22890/Autowired.xlsx) (_15.33 kB_) - [Graph.png](https://jira.spring.io/secure/attachment/22891/Graph.png) (_63.26 kB_)  **Issue Links:** - #18188 Improve performance of #getBeanNamesForType() while the BeanFactory configuration is not yet frozen - #16483 Optimize performance of autowiring for Groovy/Grails - #22060 Efficient type matching support for large number of beans  8 votes, 12 watchers","open","type: enhancement,","spring-projects-issues","2015-05-29T21:32:56Z","2022-07-13T09:24:03Z"
"","17546","New controller for Spring MVC using Lambda [SPR-12954]","**[Toshiaki Maki](https://jira.spring.io/secure/ViewProfile.jspa?name=making)** opened **[SPR-12954](https://jira.spring.io/browse/SPR-12954?redirect=false)** and commented  After Java SE 8 has been released, some frameworks using lambda appear. For example [Spark](http://sparkjava.com/), [Siden](https://github.com/taichi/siden).  These frameworks are inspired by Sinatra and will resolve ""Annotation Hell"" which revealed after ""XML Hell"" had been cleared.  Spring MVC has a good mechanism to abstract controller layer (`HandlerMapping`, `HandlerAdopter`). To implement these, Spring MVC can have a power to make use of lambda.  I've created a prototype for Spring MVC to provide a router like Sinatra. https://github.com/making/new-controller  [RouterHandlerMapping](https://github.com/making/new-controller/blob/master/src/main/java/newcontroller/RouterHandlerMapping.java) is a key component.  So far, this prototype does not use the url matching algorithm which `@MVC` uses. But you can see how this controller could be used.  Sample code is following:  ```java @SpringBootApplication public class App {     public static void main(String[] args) {         SpringApplication.run(App.class, args);     }     // omitted      // Define request mapping using lambda     @Bean     RouterDefinition routerDef() {         return router -> router                 /* curl localhost:8080 ==> Sample*/                 .get(""/"", (req, res) -> res.body(""Sample""))                 /* curl localhost:8080/hello ==> Hello World! */                 .get(""/hello"", (req, res) -> res.body(""Hello World!""))                 /* curl localhost:8080/json ==> {""name"":""John"",""age"":30} */                 .get(""/json"", (req, res) -> res                         .contentType(MediaType.APPLICATION_JSON)                         .body(new Person(""John"", 30)))                 /* curl localhost:8080/xml ==> 30John */                 .get(""/xml"", (req, res) -> res                         .contentType(MediaType.APPLICATION_XML)                         .body(new Person(""John"", 30)))                 /* curl localhost:8080/template ==> [templates/hello.html will be rendered via Thymeleaf] */                 .get(""/template"", (req, res) -> {                     req.put(""message"", ""Hello World!"");                     return res.view(""hello"");                 })                 /* curl localhost:8080/bar/aaa ==> foo = aaa */                 .get(""/bar/{foo}"", (req, res) ->                         res.body(""foo = "" + req.param(""foo"")                                 .orElse(""??"")))                 /* curl localhost:8080/param -d name=John ==> Hi John */                 .post(""/echo"", (req, res) ->                         res.body(req.param(""name"")                                 .map(name -> ""Hi "" + name)                                 .orElse(""Please input name!"")))                 /* curl localhost:8080/param -d name=John -d age=30 ==> {""name"":""John"",""age"":30} */                 .post(""/param"", (req, res) -> {                     Person person = req.params(Person.class);                     return res.body(person);                 })                 /* curl localhost:8080/body -H 'Content-Type: application/json' -d '{""name"":""John"",""age"":30}' ==> {""name"":""John"",""age"":30} */                 .post(""/body"", (req, res) -> {                     Person person = req.body(Person.class);                     return res.body(person);                 });     } } ```  How do you think about this idea?  ---  **Issue Links:** - #18353 Programmatic bean registration within configuration classes  2 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2015-04-25T00:24:00Z","2019-01-11T21:07:47Z"
"","17276","Improve charset parsing in MockHttpServletRequest and Response [SPR-12677]","**[Tor-Einar Jarnbjo](https://jira.spring.io/secure/ViewProfile.jspa?name=jarnbjo)** opened **[SPR-12677](https://jira.spring.io/browse/SPR-12677?redirect=false)** and commented  In MockHttpServletResponse, the parsing of the charset parameter in the content-type field is not correct. The implementation simply looks for the occurence of ""charset="" anywhere in the contet-type header and treats the rest of the string as a character encoding name:  ```java String CHARSET_PREFIX = ""charset=""; ... int charsetIndex = contentType.toLowerCase().indexOf(CHARSET_PREFIX); if (charsetIndex != -1) { 	this.characterEncoding = contentType.substring(charsetIndex + CHARSET_PREFIX.length()); 	this.charset = true; } ```  This simplified approach will fail for any of the following valid content-type headers:  text/plain;charset=""utf-8"" (the parameter value may be quoted)  text/plain;foocharset=bar (there may be other parameters ending with ""charset"")  text/plain;foo=""charset=bar"" (""charset="" may occur within the quoted value of a different parameter)  text/plain;charset=utf-8;foo=bar (the charset parameter may be followed by other parameters, here the character set would be parsed as ""utf-8;foo=bar""   ---  **Affects:** 4.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f06dffb714804737b7a0b0356ab00663a368b1dc","closed","type: enhancement,","spring-projects-issues","2015-01-30T03:56:00Z","2015-05-26T01:15:12Z"
"","17275","XpathResultMatchers ignores character encoding of XML document [SPR-12676]","**[Tor-Einar Jarnbjo](https://jira.spring.io/secure/ViewProfile.jspa?name=jarnbjo)** opened **[SPR-12676](https://jira.spring.io/browse/SPR-12676?redirect=false)** and commented  When using MockMvcResultMatcher.xpath(...) to assert the result of a REST service, the XML document in the response is decoded using WebUtils.DEFAULT_CHARACTER_ENCODING (ISO-8859-1) as defined in MockHttpServletResponse instead of the character set specified in the XML header. In the implementation of XpathResultMatchers, the XML document is accessed with result.getResponse().getContentAsString(), which only considers any character set potentially specified in the content-type HTTP header.  This fails, if the XML character set is not UTF-8 and the response does not specify the character encoding in the content-type header and contains characters encoded differently in UTF-8 and the actual default character set.  E.g.for the response  Content-Type: application/xml  \  \ö\  the test  andExpect(xpath(""/foo"").string(""ö""))  will fail with  java.lang.AssertionError: XPath /foo Expected :ö Actual   :Ã¶    ---  **Affects:** 4.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f9881511637c52836c8a1743fa586113de5cdfd5","closed","type: bug,","spring-projects-issues","2015-01-30T03:22:09Z","2019-01-11T19:00:34Z"
"","17911","Race condition when inbound message handling fails and StompSubProtocolHandler sends ERROR frame [SPR-13326]","**[Tong Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=chentong)** opened **[SPR-13326](https://jira.spring.io/browse/SPR-13326?redirect=false)** and commented  If for any reason such as some message parsing failed, StompSubProtocolHandler.sendErrorMessage is called and it ultimately calling StandardWebSocketSession.sendTextMessage to send the error msg back to client.  But from that method call I am getting exception: ""The remote endpoint was in state [TEXT_PARTIAL_WRITING] which is an invalid state for called method"".  It looks like a race condition because when it is trying to use the native session to send msg back, the native session is also used by other normal messages. Adding the following work around seems to fixed the problem.  ```java @Override protected void sendTextMessage(TextMessage message) throws IOException {     Session nativeSession = getNativeSession();     synchronized (nativeSession) {         nativeSession.getBasicRemote().sendText(message.getPayload(), message.isLast());     } } ```  The message calling flow is quite complicated so I may have missed something obvious please let me know if my observation is flawed.  ---  **Issue Links:** - #18029 Lock acquired on object responseLock in method sendMessageInternal of class AbstractHttpSockJsSession is not released in some error condition resulting in deadlock  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/33f9eadd6a2e2eceacdb78bb2432d1a788024512, https://github.com/spring-projects/spring-framework/commit/7defbfc18b5e43f1de271419ea37ace7a2984d43  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","type: bug,","spring-projects-issues","2015-08-06T08:56:43Z","2019-01-11T18:23:37Z"
"","17442","Create SessionSubscribedEvent and SessionUnsubscribedEvent  [SPR-12844]","**[Tong Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=chentong)** opened **[SPR-12844](https://jira.spring.io/browse/SPR-12844?redirect=false)** and commented  It would be nice to have these events (SessionSubscribedEvent and SessionUnsubscribedEvent ) alongside SessionSubscribeEvent and SessionUnsubscribeEvent  one use case is that the msg sent to client using MessageSendingOperations would be lost if the registration is not completed. In comparison, I am not actually sure if SessionSubscribeEvent is as useful, I would guess most of the times we would like to know the subscription is completed.   ---  **Reference URL:** http://stackoverflow.com/questions/29194530/stomp-over-websocket-using-spring-and-sockjs-message-lost  3 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-03-22T14:34:04Z","2019-01-12T00:17:45Z"
"","17815","SseEmitter is not thread safe [SPR-13224]","**[Tomasz Nurkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=nurkiewicz)** opened **[SPR-13224](https://jira.spring.io/browse/SPR-13224?redirect=false)** and commented  `SseEmitter` misbehaves when multiple threads call `send()` at the same time. Sometimes container fails, but most of the time different messages get interleaved, e.g.:  ``` emitter.send(""foo"");  //thread A emitter.send(""bar"");  //thread B ```  sometimes results in:  ``` data:data:AB ```  It happens because `emitter.send(""A"")` actually sends three independent messages: `data:`, `A` and `\n\n`. These three messages can be interleaved with messages from different threads. Please either synchronize properly or document clearly that `SseEmitter` is not thread safe, so that if clients want to use from multiple threads (I think it's quite useful), it must be synchronized manually:  ``` synchronized(sseEmitter) {   sseEmitter.send(""foo""); } ```  ---  **Affects:** 4.2 RC2  **Issue Links:** - #17814 ResponseBodyEmitter skips same messages during initialization  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bdb63483df2cd81bdbcc963db8789f37ea2a6727","closed","type: bug,","spring-projects-issues","2015-07-11T13:36:51Z","2021-05-04T07:47:01Z"
"","17814","ResponseBodyEmitter skips same messages during initialization [SPR-13223]","**[Tomasz Nurkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=nurkiewicz)** opened **[SPR-13223](https://jira.spring.io/browse/SPR-13223?redirect=false)** and commented  When the same message is sent via `ResponseBodyEmitter` before initialization, subsequent messages are dropped because uses `ResponseBodyEmitter#initHandlerCache` map keys to store events.  Problematic code (using `SseEmitter`):  ``` @RequestMapping(""/sse"") public SseEmitter sse() throws IOException, InterruptedException { 	final SseEmitter emitter = new SseEmitter(); 	emitter.send(""A""); 	emitter.send(""B""); 	emitter.send(""C""); 	emitter.complete(); 	return emitter; } ```  The response is:  ``` data:A  BC ```  while it should be:  ``` data:A  data:B  data:C  ```  The reason is that both `data:` and `\n\n` are dropped as duplicates. Pull request with test case and fix comes shortly.  ---  **Affects:** 4.2 RC2  **Issue Links:** - #17815 SseEmitter is not thread safe  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bdb63483df2cd81bdbcc963db8789f37ea2a6727","closed","type: bug,","spring-projects-issues","2015-07-11T13:06:47Z","2019-01-11T18:05:43Z"
"","17321","Add possibility to set supportedMimeTypes in MappingJackson2MessageConverter [SPR-12724]","**[Tomasz Krym](https://jira.spring.io/secure/ViewProfile.jspa?name=tkrym)** opened **[SPR-12724](https://jira.spring.io/browse/SPR-12724?redirect=false)** and commented  It is possible to use Jackson API (annotations, ObjectMapper, etc.) with other formats than JSON (see reference URL), i.e. BSON, XML, Smile JSON. It is possible to configure MappingJackson2MessageConverter to use those JsonFactories, but it is not possible to configure supportedMediaTypes.  The possibility of setting supportedMediaTypes is explicitely blocked by declaring non parametrized constructor in MappingJackson2MessageConverter.  Adding a parametrized constructor would solve this issue.   ---  **Affects:** 4.1.4  **Reference URL:** http://wiki.fasterxml.com/JacksonOutsideofJSON  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1dc39324b92b50277589e37b1d41dcb5c7c6090a, https://github.com/spring-projects/spring-framework/commit/8159aa99a1e5e8d3ff327549967c376fba7b3192, https://github.com/spring-projects/spring-framework/commit/8716129058b533c32d29d21bab8bb3d3a77d26ad","closed","type: enhancement,","spring-projects-issues","2015-02-17T09:30:20Z","2015-02-20T04:13:15Z"
"","17345","Allowing access to scheduled tasks in the ScheduledTaskRegistrar [SPR-12748]","**[Tobias Montagna-Hay](https://jira.spring.io/secure/ViewProfile.jspa?name=tobiasm)** opened **[SPR-12748](https://jira.spring.io/browse/SPR-12748?redirect=false)** and commented  I am working on a Spring Batch application and I would like to be able to provide to the users a list of scheduled jobs.  I would like to use the Spring task scheduling features instead of Quartz. At present the ScheduledTaskRegistrar does not have a public API that allows the retrieval of currently scheduled tasks.  Is there a design consideration behind not allowing this to be made available?  I have been able to access the tasks using reflection although this is not an optimal solution.  As a comparison Quartz does make scheduled tasks available via their API. [1]  This is also an issue that other developers are facing.[2],[3]  I have submitted a pull request for a patch that provides this functionality. [4]  [1] http://quartz-scheduler.org/documentation/quartz-2.x/cookbook/ListJobs [2] http://stackoverflow.com/questions/21791853/how-are-spring-taskscheduled-objects-represented-at-runtime [3] http://stackoverflow.com/questions/25017691/accessing-scheduled-tasks-in-spring [4] https://github.com/spring-projects/spring-framework/pull/745  ---  **Affects:** 4.1.5  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/745  **Issue Links:** - #18255 ScheduledTaskRegistrar's task list getters fail with NPE when no tasks set - #18084 Modify creation of the ScheduledTaskRegistrar to be a Spring managed bean","closed","type: enhancement,","spring-projects-issues","2015-02-23T20:38:41Z","2019-01-11T21:27:02Z"
"","17722","ObjenesisCglibAopProxy's fallback mode triggers duplicate class definition error [SPR-13131]","**[Tobias Gesellchen](https://jira.spring.io/secure/ViewProfile.jspa?name=gesellix)** opened **[SPR-13131](https://jira.spring.io/browse/SPR-13131?redirect=false)** and commented  With #15223 CGLIB has been replaced by Objenesis without the ability to configure CGLIB as proxy factory.  We would like to use CGLIB proxying in a GAE environment, where Objenesis isn't allowed. We didn't find the `org.springframework.aop.framework.DefaultAopProxyFactory` to be configurable for our needs, where the `ObjenesisCglibAopProxy` instantiation is hard coded.  Would it be possible to allow the `org.springframework.aop.framework.CglibAopProxy` to be configured as default proxy factory?  ---  **Affects:** 4.1.6  **Issue Links:** - #17689 java.lang.VerifyError: $$EnhancerBySpringCGLIB$$744256ce, method:  signature: ()V) Illegal type in constant pool - #15223 Add ability to create proxy around classes that has no default constructor - #17352 ProxyFactory should not discard objenesis cache, thereby enabling efficient proxy instantiation - #18403 Automated smoke test for GAE compatibility","closed","in: core,","spring-projects-issues","2015-06-15T12:57:43Z","2019-01-11T16:23:17Z"
"","17174","formCheckboxes macro should use seq_contains for selected check [SPR-12573]","**[Tinus Sky](https://jira.spring.io/secure/ViewProfile.jspa?name=tinussky)** opened **[SPR-12573](https://jira.spring.io/browse/SPR-12573?redirect=false)** and commented  In spring.ftl in formCheckboxes macro  <#assign isSelected = contains(status.value?default([""""]), value)>  Situation: checkboxes: 1,2,.., to 20 selected: value=10, 20  contain(""10,20"", 1) returns true, but should return false, cause 1 isn't one of the selected values.  Better use ?seq_contains on array.   ---  **Affects:** 4.1.3","closed","status: bulk-closed,","spring-projects-issues","2014-12-29T01:37:38Z","2019-01-12T03:30:40Z"
"","17769","Unresolvable class in 'basePackageClasses' annotation attribute results in misleading and hard to diagnose error [SPR-13177]","**[Tim Reidel](https://jira.spring.io/secure/ViewProfile.jspa?name=reideltj)** opened **[SPR-13177](https://jira.spring.io/browse/SPR-13177?redirect=false)** and commented  I ran into an issue with my spring-based project that results in a hard-to diagnose error.  Fortunately I also have the solution. :)  When starting my application using spring-boot I get the following exception trace:  ``` Exception in thread ""main"" org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [ XXXXXXX ]; nested exception is java.lang.IllegalArgumentException: Attribute 'basePackageClasses' not found         at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:179)         at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:306)         at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:239)         at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254)         at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94)         at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:462)         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:109)         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)         at com.fancypants.common.application.Application.main(Application.java:36) Caused by: java.lang.IllegalArgumentException: Attribute 'basePackageClasses' not found         at org.springframework.util.Assert.notNull(Assert.java:112)         at org.springframework.core.annotation.AnnotationAttributes.doGet(AnnotationAttributes.java:108)         at org.springframework.core.annotation.AnnotationAttributes.getClassArray(AnnotationAttributes.java:93)         at org.springframework.context.annotation.ComponentScanAnnotationParser.parse(ComponentScanAnnotationParser.java:127)         at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:265)         at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:229)         at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:196)         at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:165)         ... 10 more ```  where `XXXXXXX` = one of my configuration classes.  `basePackageClasses` is certainly defined in the `@ComponentScan` annotation. It turns out that one of the classes referenced in `basePackageClasses` is not defined. The effect of this is that in `AnnotationReadingVisitorUtils` (which helps to parse the annotation) a `ClassNotFoundException` is thrown. This is expected and normal since my configuration was wrong and I was missing some jars in the classpath.  The `ClassNotFoundException` is caught by this piece of code in `AnnotationReadingVisitorUtils`:  ```java catch (Exception ex) { 	// Class not found - can't resolve class reference in annotation 	// attribute. } ```  Nothing is done with the error with the effect being that `basePackageClasses` is not defined in the resulting `AnnotiationAttributes` object. Later on when the `AnnotationAttributes` object is queried for the `basePackageClasses` they aren't found, resulting in the misleading error above.  My suggestion is to throw an `IllegalArgumentException` in the `catch` block above, indicating which class was not found. I can likely submit a pull request to this effect if needed.   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b7acddbb1975b386553227f163dd00f37d8d73bd","closed","type: enhancement,","spring-projects-issues","2015-07-01T09:00:28Z","2015-07-15T09:05:13Z"
"","18006","When deploy booking-mvc.war and delete exploded webapp throws CNF exceptions [SPR-13427]","**[Thusitha Thilina Dayaratne](https://jira.spring.io/secure/ViewProfile.jspa?name=thusithathilina)** opened **[SPR-13427](https://jira.spring.io/browse/SPR-13427?redirect=false)** and commented  Build and deployed the https://github.com/spring-projects/spring-webflow-samples/tree/master/booking-mvc in Tomcat Delete the exploded webapp folder. Following CNF error get thrown  ``` ERROR: org.springframework.beans.factory.support.DefaultListableBeanFactory - Destroy method on bean with name 'org.springframework.security.userDetailsServiceFactory' threw an exception java.lang.NoClassDefFoundError: org/springframework/orm/jpa/EntityManagerFactoryUtils ```  It seems that the appbase is set to the exploded webapp folder since we are deleting it it can't find the required classes hence throwing the CNF  Please refer to https://wso2.org/jira/browse/WSAS-1903  In the tomcat 7.0.59 this exception not get thrown since it get covered up with some logging errors. I've debug the code using tomcat. It throws the exception as well.    --- No further details from [SPR-13427](https://jira.spring.io/browse/SPR-13427?redirect=false)","closed","in: core,","spring-projects-issues","2015-09-04T06:04:17Z","2019-01-12T05:23:50Z"
"","17587","JMS message always acknowledged even with CLIENT_ACKNOWLEDGE [SPR-12995]","**[Thomas Diesler](https://jira.spring.io/secure/ViewProfile.jspa?name=tdiesler)** opened **[SPR-12995](https://jira.spring.io/browse/SPR-12995?redirect=false)** and commented  On a JMS message consumer route, we support  ``` jms:...&acknowledgementModeName=CLIENT_ACKNOWLEDGE ```  The pattern is that a client may chose to process a batch of msgs before it acks. If batch processing succeeds the client calls Message.acknowledge(). If it fails, the client may choose to recover the msgs in the batch with Session.recover()  In a Processor we can now call Message.acknowledge() or  Session.recover(). However, even if the route (i.e. the client) does not call Message.acknowledge() it is called automatically in `org.springframework.jms.listener.AbstractMessageListenerContainer`  ``` protected void commitIfNecessary(Session session, Message message) throws JMSException {      // Commit session or acknowledge message.      if (session.getTransacted()) {           // Commit necessary - but avoid commit call within a JTA transaction.           if (isSessionLocallyTransacted(session)) {                // Transacted session created by this container -> commit.                JmsUtils.commitIfNecessary(session);           }      }      else if (message != null && isClientAcknowledge(session)) {           message.acknowledge();      } } ```  This would not be correct if the route is the JMS client. Redelivery can only be achieved in the context of one message invocation  CrossRef: https://issues.apache.org/jira/browse/CAMEL-8711  ---  **Affects:** 4.1.6  **Issue Links:** - #17846 CLIENT_ACKNOWLEDGE with JmsTemplate - implicit message acknowledge each read","closed","status: declined,","spring-projects-issues","2015-05-06T08:32:52Z","2019-01-12T16:23:20Z"
"","17553","JMS Session not exposed to Camel route [SPR-12961]","**[Thomas Diesler](https://jira.spring.io/secure/ViewProfile.jspa?name=tdiesler)** opened **[SPR-12961](https://jira.spring.io/browse/SPR-12961?redirect=false)** and commented  With a JMS message consumer, there is support for  ``` jms:...&acknowledgementModeName=CLIENT_ACKNOWLEDGE ```  The pattern is that a client may chose to process a batch of msgs before it acks. If batch processing succeeds the client calls Message.acknowledge(). If it fails, the client may choose to recover the msgs in the batch with Session.recover()  The Session is however not exposed to the client, which makes it impossible to call Session.recover().  CLIENT_ACKNOWLEDGE has IMHO currently limited use because of this.  CrossRef: https://issues.apache.org/jira/browse/CAMEL-8711   ---  **Affects:** 4.1.6","closed","type: enhancement,","spring-projects-issues","2015-04-28T01:21:11Z","2015-05-06T06:19:02Z"
"","17874","Fix references and typos in Spring MVC Test Javadoc [SPR-13284]","**[Thomas Darimont](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasd)** opened **[SPR-13284](https://jira.spring.io/browse/SPR-13284?redirect=false)** and commented  The javadoc in `org.springframework.test.web.servlet.ResultMatcher` refers to: `org.springframework.test.web.server.result.MockMvcResultMatchers` whereas the actual class is `org.springframework.test.web.servlet.result.MockMvcResultMatchers`.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6a59d005769008b8c9a02bc87cc1123a8c73cb7f","closed","type: task,","spring-projects-issues","2015-07-28T08:29:47Z","2015-07-31T02:39:18Z"
"","17871","ResponseEntity factory method inferring FOUND / NOT_FOUND from Optional [SPR-13281]","**[Thomas Darimont](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasd)** opened **[SPR-13281](https://jira.spring.io/browse/SPR-13281?redirect=false)** and commented  It would be helpful if `org.springframework.http.ResponseEntity` would support `Optional` as constructor parameter since it could be used to automatically derive a `HttpStatus.FOUND` status if `Optional.isPresent` is `true` or `HttpStatus.NOT_FOUND` otherwise.  ```java interface FooRepository extends Repository {   Optional findById(String id); } ```  ```java @RestController class FooController {    @Autowired   FooRepository repository;      @RequestMapping(""/foo/{id}"")     ResponseEntity getById(@PathVariable(""id"") String id) {       return new ResponseEntity(repository.getById(id));     } } ```  Currently one has to write a bit more boiler-plate:  ```java @RequestMapping(""/foo/{id}"") public ResponseEntity getById(@PathVariable(""id"") String id) {     return Optional.ofNullable(repository.getById(id))         .map(result -> new ResponseEntity(result, HttpStatus.FOUND))         .orElseGet(() -> new ResponseEntity(HttpStatus.NOT_FOUND)); } ```  ---  **Issue Links:** - #21722 Handle Optional Controller handler return types  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7e9173350270377354d5518a4604da695fed33d0  2 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2015-07-27T04:19:40Z","2019-01-13T20:52:16Z"
"","17734","Let @Async calls wait for completion of surrounding transaction. [SPR-13143]","**[Thomas Darimont](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasd)** opened **[SPR-13143](https://jira.spring.io/browse/SPR-13143?redirect=false)** and commented  In transactional service methods where data is written to a transactional data store, it is not possible to access the just written state from an `@Async` service method since it runs in a different tx and has no way to see the data that was written by the spawning method since the TX has not been comitted yet.  use case:  ```java interface SomeRepository extends CrudRepository{ 	 	@Async 	CompletableFuture> readAllBy(); } ```  ```java @Transactional public Completable transactionalBusinessMethod(){  	//compute something     repository.save(customer);      return repository.readAllBy().thenApply(someListConversion); //doesn't see the new customer }  ```  How ever if we would introduce something like an `boolean afterSurroundingTx()` to the `@Async` annotation we could let users express that certain asynchronous read calls should wait for the TX that spawned that async execution to complete before running.  In order to avoid to create deadlocks here in case a user waits for the async execution in the spawning thread we could wrap the returned `Future` or `CompletableFuture` objects in an wrapper that throws `Exception` in case a blocking method like `Future.get(...)` is called within the same TX that spawned the async method call with `@Async(afterSurroundingTx=true)`.  Of course the same functionality could be realised via an `ApplicationEvent` listener that is fired on the completion of the current transaction - but this would involve some boilerplate which could be avoided with something like `@Async(afterSurroundingTx=true)`.   --- No further details from [SPR-13143](https://jira.spring.io/browse/SPR-13143?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-06-18T04:54:36Z","2019-01-12T02:27:26Z"
"","17723","Support dynamic bean lookup a la CDI's Instance type [SPR-13132]","**[Thomas Darimont](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasd)** opened **[SPR-13132](https://jira.spring.io/browse/SPR-13132?redirect=false)** and commented  It would be helpful to be able to dynamically query an application context for beans that match a specific type and or are annotated with some specific qualifier annotations.  CDI offers support for this via `javax.enterprise.inject.Instance`. Currently the application context only offers to query beans by type. It would be great if we could support dynamic bean lookups via `Instance` backed by the `BeanRegistry`.  I did a quick PoC [here](https://github.com/thomasdarimont/spring-boot-cdi-instance-example/blob/master/src/main/java/demo/CustomAutowireCandidateResolver.java). The basic idea is to provide a custom `AutowireCandidateResolver` that detects `Instance` autowire targets, identifies the actual target bean type and provides some kind of `Instance` adapter which performs the actual bean lookup.  ---  **Reference URL:** https://github.com/thomasdarimont/spring-boot-cdi-instance-example/blob/master/src/test/java/demo/SimpleCdiInstanceAdapterTests.java#L73  **Issue Links:** - #16761 Add generics / parameterized type support to ListableBeanFactory getBeanNamesForType/getBeansOfType methods - #18515 An ObjectFactory variant with lenient not-unique handling - #13532 Convenient programmatic bean retrieval with qualifiers - #18529 ObjectFactory lacks method for getting bean with specified constructor arguments - #17522 Ability to query an ApplicationContext for annotations on a bean  3 votes, 7 watchers","open","type: enhancement,","spring-projects-issues","2015-06-15T13:25:15Z","2019-01-11T16:23:28Z"
"","17719","Support CompletableFuture<> as return type of @Async methods [SPR-13128]","**[Thomas Darimont](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasd)** opened **[SPR-13128](https://jira.spring.io/browse/SPR-13128?redirect=false)** and commented  Currently `@Async` annotated methods support to return Future<> result wrappers via AsyncResult<> it would be great if we would support CompletableFuture here as well.  I created a small example that adds the necessary functionality to `AsyncExecutionInterceptor`.  Usage:  ```java 	@Async 	public  CompletableFuture asyncOperation(T input) {  		System.out.println(""working...""); 		LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(5)); 		System.out.println(""done.""); 		 		return CompletableFuture.completedFuture(input); 	} ```  Consumer:  ```java service.asyncOperation(""test"").thenAccept(System.out::println); ```  ---  **Reference URL:** https://gist.github.com/thomasdarimont/197e92e537554634adbd  **Issue Links:** - [DATACMNS-714](https://jira.spring.io/browse/DATACMNS-714) Add support for CompletableFuture as query method return type on Spring 4.2 (_**""is depended on by""**_) - #16821 Support CompletableFuture as return value in `@MessageMapping` handlers - #17198 Support CompletableFuture as alternative to DeferredResult in MVC - [INT-3724](https://jira.spring.io/browse/INT-3724) Please add support for CompletableFuture in Asynchronous Gateways - [DATACMNS-712](https://jira.spring.io/browse/DATACMNS-712) Support CompletableFuture as repository return type - #19447 Document supported return types for `@Async` methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dd4bc630c3de70204081ab196945d6b55ab03beb, https://github.com/spring-projects/spring-framework/commit/c41779f895f49758344b63dd40bcbf5ae1b2dee3, https://github.com/spring-projects/spring-framework/commit/581ab18b85f8b3ddb016a7dc7b65d372880a38da  0 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2015-06-15T06:37:01Z","2019-01-13T05:40:33Z"
"","17497","Improve exception message in case of incomplete Caching configuration. [SPR-12898]","**[Thomas Darimont](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasd)** opened **[SPR-12898](https://jira.spring.io/browse/SPR-12898?redirect=false)** and commented  If a user declares multiple `CacheManager`'s without declaring one of them as `@Primary` and without using a `CacheResolver` the following Exception is thrown during bootstrap:  ``` java.lang.IllegalStateException: No CacheResolver specified, and no unique bean of type CacheManager found. Mark one as primary or declare a specific CacheManager to use. ```  In the linked example gist I had two `CacheManager`'s and a Service with two operations where each operation was explicitly referring to a `CacheManager`. So from looking at the code it seemed that everything was setup correctly.  We should enhance the exception message to make clear that a `CacheManager` needs to be the ""default"" one in case no additional configuration is present etc.  How about:  ``` No CacheResolver specified, and no unique bean of type CacheManager found. Mark one as primary (or give it the name cacheManager) or declare a specific CacheManager to use, that serves as the default one. ```    ---  **Affects:** 4.1.6  **Reference URL:** https://gist.github.com/thomasdarimont/b855ae97708d4d8c3c1f  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e5b505224b77bb2428ab9ca85e894a1ba51f8994","closed","type: enhancement,","spring-projects-issues","2015-04-08T03:24:08Z","2019-01-11T21:35:20Z"
"","17480","Document @Bean definitions via default methods [SPR-12882]","**[Thomas Darimont](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasd)** opened **[SPR-12882](https://jira.spring.io/browse/SPR-12882?redirect=false)** and commented  We should document the new configuration capabilities that came via: #15547  ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/767, and commits https://github.com/spring-projects/spring-framework/commit/f58e1db2e69b2bc0bcb4da7d83c01c1c9b56695d","closed","type: documentation,","spring-projects-issues","2015-04-02T04:45:55Z","2019-01-11T21:35:58Z"
"","17468","Improve handling of JDK dynamic proxies in DefaultAopProxyFactory. [SPR-12870]","**[Thomas Darimont](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasd)** opened **[SPR-12870](https://jira.spring.io/browse/SPR-12870?redirect=false)** and commented  Currently the AOP infrastructure cannot deal with of a JDK proxy target instance when asked to create a new cglib-proxy with `proxyTargetClass=true` which leads to exceptions such as:  ``` Could not generate CGLIB subclass of class [class com.sun.proxy.$Proxy48]: Common causes of this problem include using a final class or a non-visible class; nested exception is java.lang.IllegalArgumentException: Cannot subclass final class class com.sun.proxy.$Proxy48 ```  One common case where this happens is when Spring Security's `@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true, proxyTargetClass = true)` is used with pre/post security checks on Spring Data Repositories, e.g.:  ```java public interface CustomerRepository extends JpaRepository {  	@PreAuthorize(""hasRole('ADMIN')"") 	List findByLastnameLike(String lastname); } ```    ---  **Affects:** 4.1.6  **Reference URL:** https://github.com/thomasdarimont/spring-data-bugs/blob/master/spring-boot-example-double-proxy/src/main/java/demo/App.java  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e1395a6c68c5b8e779ec084555bb91f5617255da, https://github.com/spring-projects/spring-framework/commit/f9c2d1d17161f884ca30f88e3d781bd5115e5daf","closed","type: enhancement,","spring-projects-issues","2015-03-31T05:25:08Z","2015-05-26T01:15:32Z"
"","17359","Thread blocking at Proxy.getProxyClass on getBean call [SPR-12762]","**[Thilak](https://jira.spring.io/secure/ViewProfile.jspa?name=urthilak)** opened **[SPR-12762](https://jira.spring.io/browse/SPR-12762?redirect=false)** and commented  Hi team, when our application spins up multiple threads all using applicationContext.getBean(String, Class\), we see that our threads get blocked at Proxy.getProxyClass(ClassLoader, Class[]).  Can anything be done from spring implementation to remove accessting this Java class at once?    ---  **Attachments:** - [Block.jpg](https://jira.spring.io/secure/attachment/22666/Block.jpg) (_26.57 kB_)","closed","type: enhancement,","spring-projects-issues","2015-02-27T05:20:50Z","2015-03-03T08:21:26Z"
"","17787","Allow to disable method mappings from parent class [SPR-13195]","**[Thierry Messer](https://jira.spring.io/secure/ViewProfile.jspa?name=javaguru-ch)** opened **[SPR-13195](https://jira.spring.io/browse/SPR-13195?redirect=false)** and commented  If I extend a `@Controller` with the intention to replace the extended with the sub-classed one there is no possibility to disable a request mapping for a method of the super controller. Example:  ``` @Controller @RequestMapping(""/XY"") public class ParentController {     @RequestMapping(""/"")     public ModelAndView index() {         return new ModelAndView(""my-index-view"");     }      @RequestMapping(""/list"")     public ModelAndView list() {         return new ModelAndView(""my-list-view"");     } } ```  The sub-classed controller:  ``` @Controller @RequestMapping(""/XY"") public class SubController extends ParentController {     @Override     @RequestMapping(""/should-not-be-accessible"")     public ModelAndView list() {         return null;     }      @Override     @RequestMapping(""/list"")     public ModelAndView list(@RequestParam(value = ""selection"", required = false) String selection) {         ModelAndView mav = ModelAndView(""my--specialized-list-view"");         mav.addObject(""selection"", selection);         return mav;     } } ```  It would be great to support disabling request mapping definition of the parent controller by overriding methods using the following approach:  ``` @Controller @RequestMapping(""/XY"") public class SubController extends ParentController {     @Override     @RequestMapping(ValueConstants.DEFAULT_NONE)     public ModelAndView list() {         return null;     }      @Override     @RequestMapping(""/list"")     public ModelAndView list(@RequestParam(value = ""selection"", required = false) String selection) {         ModelAndView mav = ModelAndView(""my--specialized-list-view"");         mav.addObject(""selection"", selection);         return mav;     } } ```  I think it should be fairly easy to add an appropriate check to the method ""getMappingForMethod"" in the class ""RequestMappingHandlerMapping"".   ---  **Affects:** 4.1.7  5 votes, 7 watchers","closed","in: web,","spring-projects-issues","2015-07-03T04:28:01Z","2022-04-15T13:42:30Z"
"","17461","MethodValidationPostProcessor could be more open to extension [SPR-12863]","**[Thibault Kruse](https://jira.spring.io/secure/ViewProfile.jspa?name=tkruse)** opened **[SPR-12863](https://jira.spring.io/browse/SPR-12863?redirect=false)** and commented  Using JSR303 annotations and bean validation works gret for validating, but sadly the ConstraintViolationException class thrown by MethodValidationInterceptor does not provide any useful output as to the context of validation. So the log file does not help telling what went wrong.  See https://hibernate.atlassian.net/browse/BVAL-264  In order to work around this, it would be nice to wrap/extend Spring to prove an Exception with a better Error message.  Ideally I would want to override a method that creates the interceptor, such as:  ```     @Bean     public MethodValidationPostProcessor methodValidator() {         @Override         return new MethodValidationPostProcessor() {              protected Advisor createAdvisor() { Pointcut pointcut = new AnnotationMatchingPointcut(this.getValidatedAnnotationType(), true); 		Advice advice = (this.getValidator() != null ? new CustomMethodValidationInterceptor(this.getValidator() : 				new CustomMethodValidationInterceptor()); 		this.advisor = new DefaultPointcutAdvisor(pointcut, advice);              }         };     } ```  or something similar like  ``` protected MethodValidationInterceptor createMethodValidationInterceptor() {...} ```  so that I can provide an interceptor that throws an Exception with a more useful message.   ---  **Affects:** 4.1.6","closed","type: enhancement,","spring-projects-issues","2015-03-30T10:07:31Z","2015-05-26T01:15:09Z"
"","19949","HHH000008 if using Hibernate 4.3.7.Final [SPR-15386]","**[The Alchemist](https://jira.spring.io/secure/ViewProfile.jspa?name=the_alchemist)** opened **[SPR-15386](https://jira.spring.io/browse/SPR-15386?redirect=false)** and commented  ### Warning Message  ``` [main]  WARN  o.h.i.SessionFactoryImpl  - HHH000008: JTASessionContext being used with JDBCTransactionFactory; auto-flush will not operate correctly with getCurrentSession()  ```  ### Description  I'm using Spring Test and Spring ORM to write Hibernate-based tests.  ### Code  I'm basically using the code from http://www.baeldung.com/2011/12/13/the-persistence-layer-with-spring-3-1-and-jpa/#javaconfig.  Basically,  ```java    @Bean     public LocalContainerEntityManagerFactoryBean entityManagerFactory() {         LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();         em.setDataSource(dataSource());         em.setPackagesToScan(this.packages);          JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();         em.setJpaVendorAdapter(vendorAdapter);         em.setJpaProperties(additionalProperties());          return em;     }      @Bean     public DataSource dataSource() {         DriverManagerDataSource dataSource = new DriverManagerDataSource();   	dataSource.setDriverClassName(driverClassName);         dataSource.setUrl(url);          dataSource.setUsername(username);         dataSource.setPassword(password);          return dataSource;     }      @Bean     public JdbcTemplate jdbcTemplate() {         return new JdbcTemplate(dataSource());     }      @Bean     public SimpleJdbcInsert simpleJdbcInsert() {         return new SimpleJdbcInsert(dataSource());     }      @Bean     public PlatformTransactionManager transactionManager(EntityManagerFactory emf) {         JpaTransactionManager transactionManager = new JpaTransactionManager();         transactionManager.setEntityManagerFactory(emf);          return transactionManager;     }      @Bean     public PersistenceExceptionTranslationPostProcessor exceptionTranslation() {         return new PersistenceExceptionTranslationPostProcessor();     } ```  I get this error if I use a `HibernateTransactionManager` instead of a `JpaTransactionManager`, too.  I didn't get this error with Hibernate 4.2.0.CR1.  P.S. I tried to assign this to the Spring ORM project, but that doesn't seem to exist.   --- No further details from [SPR-15386](https://jira.spring.io/browse/SPR-15386?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-04-24T11:41:41Z","2019-01-12T00:10:52Z"
"","17806","RestTemplate - Provide option to retain default Message Converter whenever a non-default Message Converter is set. [SPR-13215]","**[Tarundeep Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=jiratarun)** opened **[SPR-13215](https://jira.spring.io/browse/SPR-13215?redirect=false)** and commented  Developing a RESTTemplate based REST Client application. Using Spring v4.1.6.RELEASE By default, RestTemplate's default constructor sets eleven Message Converters, if appropriate jars are in classpath. I use atleast four of the default MCs. However, I also use ProtoBufMessageConverter, in addition to couple of more customized messageConverters.  To set these non-default and customized messageConverters, used property based Spring configuration. However, the corresponding setter 'setMessageConverters' in RESTTemplate class, clears default MCs. Thus, forcing manual addition of the default MCs.  Suggesting an attribute like register-default that is available with  to optionally allow retaining old default MCs.   ---  **Affects:** 4.1.6","closed","type: enhancement,","spring-projects-issues","2015-07-09T08:37:55Z","2018-12-24T17:43:40Z"
"","17774","MappingJackson2HttpMessageConverter does not support application/javascript media type out of the box [SPR-13182]","**[Tarundeep Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=jiratarun)** opened **[SPR-13182](https://jira.spring.io/browse/SPR-13182?redirect=false)** and commented  ContentNegotiationManager is unable to handle application/javascript media type although MappingJackson2HttpMessageConverter is available to it. I was expecting it to be part of the out of the box support for JSONP by Spring 4. Is this as per design or a bug?   ---  **Reference URL:** http://stackoverflow.com/questions/31170199/spring-4-mappingjackson2httpmessageconverter-does-not-support-application-javas  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9b5e47026c61268eda2d8a0bee4cb7bdb72ede1c","closed","status: declined,","spring-projects-issues","2015-07-01T12:57:01Z","2019-01-12T16:23:12Z"
"","17698","An exception is thrown when validation fails on public nested fields [SPR-13107]","**[Tapio Koskinen](https://jira.spring.io/secure/ViewProfile.jspa?name=milanka)** opened **[SPR-13107](https://jira.spring.io/browse/SPR-13107?redirect=false)** and commented  Binding and validation work fine for nested fields even without getters and setters, but an exception is thrown when validation constraints are not met for nested fields. In this case when nested.number is greater than 5.  ```java public class JavaBean {     @Valid     public NestedJavaBean nested;     @Max(5)     public Integer number; }  public class NestedJavaBean {     @NotNull     @Max(5)     public Integer number; } ```  ``` java.lang.IllegalStateException: JSR-303 validated property 'nested.number' does not have a corresponding accessor for Spring data binding - check your DataBinder's configuration (bean property versus direct field access)         at org.springframework.validation.beanvalidation.SpringValidatorAdapter.processConstraintViolations(SpringValidatorAdapter.java:158)         at org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(SpringValidatorAdapter.java:107)         at org.springframework.validation.DataBinder.validate(DataBinder.java:781)         at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.validateIfApplicable(AbstractMessageConverterMethodArgumentResolver.java:188)         at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:104)         at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77) .... Caused by: org.springframework.beans.NotReadablePropertyException: Invalid property 'nested' of bean class [org.springframework.samples.mvc.messageconverters.JavaBean]: Bean property 'nested' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter?         at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:731)         at org.springframework.beans.BeanWrapperImpl.getNestedBeanWrapper(BeanWrapperImpl.java:572)         at org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:549)         at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:720)         at org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:99)         at org.springframework.validation.AbstractBindingResult.getRawFieldValue(AbstractBindingResult.java:283)         at org.springframework.validation.beanvalidation.SpringValidatorAdapter.processConstraintViolations(SpringValidatorAdapter.java:143) ```    ---  **Affects:** 4.1.6  **Attachments:** - [spring-mvc-showcase-master.zip](https://jira.spring.io/secure/attachment/22899/spring-mvc-showcase-master.zip) (_180.08 kB_)","closed","in: core,","spring-projects-issues","2015-06-09T07:43:22Z","2019-07-25T20:31:43Z"
"","17212","Enable reuse of DefaultActiveProfilesResolver [SPR-12611]","**[Tadaya Tsuyukubo](https://jira.spring.io/secure/ViewProfile.jspa?name=tadaya)** opened **[SPR-12611](https://jira.spring.io/browse/SPR-12611?redirect=false)** and commented  #### Background  I want to write a custom profile resolver for **`@ActiveProfiles`**.  The profile resolution logic is to dynamically **append** profiles on top of profiles resolved by default logic. Since it is appending profiles, I wanted to either extend or delegate to the `DefaultActiveProfilesResolver` class to reuse the default logic.  ```java public class MyProfileResolver extends DefaultActiveProfilesResolver {   @Override   public String[] resolve(Class testClass) {     String[] profiles = super.resolve(testClass);     // my logic to append profiles   } } ```  ```java public class MyProfileResolver implements ActiveProfilesResolver {   private final ActiveProfilesResolver defaultResolver = new DefaultActiveProfilesResolver();   @Override   public String[] resolve(Class testClass) {     String[] profiles = defaultResolver.resolve(testClass);     // my logic to append profiles   } } ```  However, in `DefaultActiveProfilesResolver`, there is this check logic:  ```java Class resolverClass = annAttrs.getClass(""resolver""); if (!ActiveProfilesResolver.class.equals(resolverClass)) {   String msg = String.format(""Configuration error for test class [%s]: %s cannot be used ""     + ""in conjunction with custom resolver [%s]."", rootDeclaringClass.getName(),     getClass().getSimpleName(), resolverClass.getName());   logger.error(msg);   throw new IllegalStateException(msg); } ```  Basically, this check logic prevents the reuse of the `DefaultActiveProfilesResolver` class.  ---  #### Proposal  Can this check can be removed, or should this check be `isAssignableFrom()` instead of `equals()`?  ---  **Affects:** 4.1 GA  **Issue Links:** - #14588 Introduce bootstrap strategy in the TestContext framework (_**""depends on""**_)","closed","type: enhancement,","spring-projects-issues","2015-01-09T21:10:27Z","2019-01-13T05:42:54Z"
"","17706","FileNotFoundException when implementing a nested interface with groovy closure in a @Component [SPR-13115]","**[Tadas Krivickas](https://jira.spring.io/secure/ViewProfile.jspa?name=tadaskay)** opened **[SPR-13115](https://jira.spring.io/browse/SPR-13115?redirect=false)** and commented  ```java org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.springframework.issues.DogService]; nested exception is java.io.FileNotFoundException: class path resource [org/springframework/issues/DogService$Wuffing$1.class] cannot be opened because it does not exist 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:179) ... Caused by: java.io.FileNotFoundException: class path resource [org/springframework/issues/DogService$Wuffing$1.class] cannot be opened because it does not exist 	at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:172) 	at org.springframework.core.type.classreading.SimpleMetadataReader.(SimpleMetadataReader.java:50) 	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:98) 	at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:102) 	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:93) 	at org.springframework.context.annotation.ConfigurationClassParser.asSourceClass(ConfigurationClassParser.java:596) 	at org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getMemberClasses(ConfigurationClassParser.java:758) 	at org.springframework.context.annotation.ConfigurationClassParser.processMemberClasses(ConfigurationClassParser.java:314) 	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:246) 	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:229) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:196) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:165) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:306) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:239) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:462) 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:686) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:320) 	at org.springframework.boot.test.SpringApplicationContextLoader.loadContext(SpringApplicationContextLoader.java:103) 	at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:68) 	at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:86) 	at org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:72) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:212) 	at org.spockframework.spring.SpringTestContextManager.prepareTestInstance(SpringTestContextManager.java:49) 	at org.spockframework.spring.SpringInterceptor.interceptSetupMethod(SpringInterceptor.java:42) 	at org.spockframework.runtime.extension.AbstractMethodInterceptor.intercept(AbstractMethodInterceptor.java:28) 	at org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:87) 	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283) 	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173) 	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) 	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128) 	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203) 	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155) 	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) ```  I've observed that this can be fixed in two ways: 1. Moving the interface outside of class to package 2. Replacing `@Component` with `@javax.inject.Named`  Other notes: - Does not occur in an analogous situation using java, by implementing a private nested interface via lambda expression.  Pull request to reproduce: https://github.com/spring-projects/spring-framework-issues/pull/98   ---  **Affects:** 4.1.6  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/98  **Referenced from:** pull request https://github.com/spring-projects/spring-framework-issues/pull/98, and commits https://github.com/spring-projects/spring-framework/commit/1c01f575c2d3407e5c3c18a58d19ee00f5420249, https://github.com/spring-projects/spring-framework/commit/ef9910c3c48cc56b655f189a4362cbc8907b7e61  3 votes, 5 watchers","closed","in: core,","spring-projects-issues","2015-06-12T00:59:37Z","2015-06-30T10:41:38Z"
"","17990","Add a section about HttpMessageConverter customization in the reference documentation [SPR-13411]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-13411](https://jira.spring.io/browse/SPR-13411?redirect=false)** and commented  Update reference documentation with a section that explain how to customize `HttpMessageConverter` and document the list of Jackson well-known modules auto-registered and how to register additional modules, as explained in the updated [Latest Jackson integration improvements in Spring](https://spring.io/blog/2014/12/02/latest-jackson-integration-improvements-in-spring) blog post.  ---  **Reference URL:** https://spring.io/blog/2014/12/02/latest-jackson-integration-improvements-in-spring  **Issue Links:** - #17886 Automatic registration of Jackson parameter names module (_**""supersedes""**_) - #17939 Add Hibernate5Module to Jackson2ObjectMapperBuilder's well known modules (_**""supersedes""**_) - #17940 Add Hibernate4Module to Jackson2ObjectMapperBuilder's well known modules (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/12937680b7b68fb03119945dbd95e1f97f763bc8","closed","in: web,","spring-projects-issues","2015-08-31T09:19:33Z","2019-01-11T17:12:31Z"
"","17798","Avoid rejecting same origin requests detected as CORS requests [SPR-13206]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-13206](https://jira.spring.io/browse/SPR-13206?redirect=false)** and commented  Browsers like Chrome or Safari include an `Origin` header on same-origin `POST`/`PUT`/`DELETE` requests. As a consequence, these requests are detected as potential CORS requests by `CorsUtils.isCorsRequest()` and wrongly rejected if a `CorsConfiguration` is defined with an `allowedOrigins` property that does not contain the same origin domain. This is an issue since most users will configure only the cross origin domains.   ---  **Affects:** 4.2 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/84138abfd1b436dd7046933e6cecd76fe37cd1ce","closed","type: enhancement,","spring-projects-issues","2015-07-07T01:58:02Z","2015-07-15T09:05:14Z"
"","17785","Add an Access-Control-Request-Method check for CORS preflight requests [SPR-13193]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-13193](https://jira.spring.io/browse/SPR-13193?redirect=false)** and commented  Since based on [CORS specification](http://www.w3.org/TR/cors/#resource-preflight-requests) the `Access-Control-Request-Method` request header is mandatory for preflight requests, we should add this check to `CorsUtils.isPreFlightRequest()` and `FrameworkServlet.doOptions()` to identify them more reliably.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8ee0e78980de0e8ed2da2f6d30a145b63f9806d7","closed","type: enhancement,","spring-projects-issues","2015-07-02T09:49:50Z","2015-07-15T09:05:07Z"
"","17784","Add a CORS Filter [SPR-13192]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-13192](https://jira.spring.io/browse/SPR-13192?redirect=false)** and commented  In addition to current global and fine grained CORS Spring MVC capabilities, we should provide an optional CORS filter that could be executed before the `DispatcherServlet`.  This filter should use the existing `DefaultCorsProcessor` and a `CorsConfigurationSource` implementation that could be configured with a `Map`.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/70a03ee2a486a85dcee23b1d58217444979fb63f, https://github.com/spring-projects/spring-framework/commit/cd9b3903a743eb7656c41390a77b7be7c12f6a5f","closed","type: enhancement,","spring-projects-issues","2015-07-02T09:40:18Z","2015-07-15T09:05:15Z"
"","17752","Type aware canWrite() method should be called for GenericHttpMessageConverter [SPR-13161]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-13161](https://jira.spring.io/browse/SPR-13161?redirect=false)** and commented  ---  **Issue Links:** - #17408 Make `@ResponseBody` method return type available to message converters  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/289f35da3a57bb5e491b30c7351072b4e801c519","closed","type: bug,","spring-projects-issues","2015-06-24T06:31:28Z","2019-01-13T05:40:16Z"
"","17745","Better parameterized type serialization for the request body in RestTemplate [SPR-13154]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-13154](https://jira.spring.io/browse/SPR-13154?redirect=false)** and commented  Since #17408 make it possible to use parameterized type for writing the response body, it would be nice to be able to do the same for request body in client side use cases.  Since we don't have this information in the method declaration like for server side, the user will have to provide the type explicitly.  The proposal for this: * Retaining the type as an `RequestEntity#type` property * In `RequestEntity.BodyBuilder`, adding `RequestEntity body(T body, Type type)` method * In `RestTemplate#doWithRequest()`, use `RequestEntity#type` if defined to get the type information, and call the type-aware `canWrite()` and `write()` methods if the message converter implements `GenericHttpMessageConverter`  ---  **Issue Links:** - #17408 Make `@ResponseBody` method return type available to message converters  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3329abffc8cf51c81887cf4a9a5be4b4486f96c0  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-06-22T08:23:12Z","2019-01-13T05:40:22Z"
"","17688","Fix combining class and method level @CrossOrigin attributes [SPR-13097]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-13097](https://jira.spring.io/browse/SPR-13097?redirect=false)** and commented  Fix combining class and method level `@CrossOrigin` attributes by keeping current behavior (no origin defined = `*` for example) but using empty string and empty arrays default values in `@CrossOrigin` in order to be able to detect if an attribute has been explicitly set by the user or not.   ---  **Affects:** 4.2 RC1","closed","type: bug,","spring-projects-issues","2015-06-04T06:21:33Z","2015-06-30T15:26:24Z"
"","17638","CORS global configuration support in XML namespace [SPR-13046]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-13046](https://jira.spring.io/browse/SPR-13046?redirect=false)** and commented  ---  **Issue Links:** - #17526 Add global CORS configuration capabilities  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0c3b34f7d5448f26b4484856bdabb5f225d37453, https://github.com/spring-projects/spring-framework/commit/e5f76af193d1ea4c57c1a0a7af0d8a77da2cd75f","closed","type: enhancement,","spring-projects-issues","2015-05-19T07:06:08Z","2019-01-11T16:01:38Z"
"","17626","ScriptTemplateView configuration option for JavaScript concurrency issues [SPR-13034]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-13034](https://jira.spring.io/browse/SPR-13034?redirect=false)** and commented  As discussed in #16871 and on the Nashorn dev mailing list (see the reference URL), there are some concurrency issues at least with Handlebars and React, so we need to work with the Nashorn team to identify if it comes from a Nashorn bug, or if there is something on Spring side we can do to fix theses issues.  ---  **Affects:** 4.2 RC1  **Reference URL:** http://mail.openjdk.java.net/pipermail/nashorn-dev/2015-May/004482.html  **Issue Links:** - #16871 Support JavaScript Templating  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/34de167e597dd7a56ab563163730782f59ed1e17, https://github.com/spring-projects/spring-framework/commit/d183bbb6679f6550d28f7bf4f998f30fb240d932  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2015-05-15T16:11:09Z","2019-01-11T16:02:17Z"
"","17532","Add onTimeout() and onCompletion() callbacks to ResponseBodyEmitter [SPR-12939]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12939](https://jira.spring.io/browse/SPR-12939?redirect=false)** and commented  ---  This issue is a sub-task of #16826  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/713fc5c4ab2a7b4aaf3685db2bea356eddef0db3","closed","type: task,","spring-projects-issues","2015-04-21T10:12:56Z","2019-01-11T21:08:20Z"
"","17526","Add global CORS configuration capabilities [SPR-12933]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12933](https://jira.spring.io/browse/SPR-12933?redirect=false)** and commented  As discussed in #13916 comments, we should add global and URL-mapped CORS configuration capabilities, for example by using a `CorsProcessor` that is also a `CorsConfigurationSource`.  This should be exposed by MVC config and namespace.  ---  **Reference URL:** https://jira.spring.io/browse/SPR-9278?focusedCommentId=114187&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-114187  This issue is a sub-task of #13916  **Issue Links:** - #17638 CORS global configuration support in XML namespace","closed","type: task,","spring-projects-issues","2015-04-20T00:41:29Z","2019-01-11T21:08:04Z"
"","17524","CorsConfiguration should not be registered for handler methods without @CrossOrigin [SPR-12931]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12931](https://jira.spring.io/browse/SPR-12931?redirect=false)** and commented  `RequestMappingHandlerMapping#initCorsConfiguration()` should be modified to not register `CorsConfiguration` for handler methods without `@CrossOrigin` annotations.  ---  **Affects:** 4.2 RC1  This issue is a sub-task of #13916  **Issue Links:** - #17523 Invalid CORS requests should not been rejected  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9a65eec36fdbdf76c4ac45e3a1e106f0d26362d1","closed","type: task,","spring-projects-issues","2015-04-19T14:08:53Z","2019-01-11T21:09:06Z"
"","17523","Invalid CORS requests should not been rejected [SPR-12930]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12930](https://jira.spring.io/browse/SPR-12930?redirect=false)** and commented  As specified in [CORS specification](http://www.w3.org/TR/cors/), invalid CORS requests should just ""do not set any additional headers and terminate this set of steps. The request is outside the scope of this specification"".  Currently, we reject the request. This behavior is an issue with non CORS request with `Origin` header.  ---  This issue is a sub-task of #13916  **Issue Links:** - #17524 CorsConfiguration should not be registered for handler methods without `@CrossOrigin`","closed","status: declined,","spring-projects-issues","2015-04-19T12:56:43Z","2019-01-13T05:41:11Z"
"","17296","Add CSP 1.1 frame-ancestors support [SPR-12699]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12699](https://jira.spring.io/browse/SPR-12699?redirect=false)** and commented  The purpose of this issue is adding CSP 1.1 `frame-ancestors` support in order to be able to enable Iframe based transports when an origin check is enabled.  `X-Frame-Options: ALLOW-FROM uri` is [only supported by IE and Firefox](http://erlend.oftedal.no/blog/tools/xframeoptions/). Chrome and Safari **will** support a similar functionality thanks to CSP 1.1 `frame-ancestors`. Currently, you still need [to add flag to Chrome](https://code.google.com/p/chromium/issues/detail?id=129139) to enable `frame-ancestors` support (they seem to wait CSP 1.1 final to be published to make it available by default), and it is [not yet supported in Safari](https://bugs.webkit.org/show_bug.cgi?id=94836). So until Safari and Chrome support it, we have to disable Iframe based transports when an origin check is specified by the user.  We should implement this when CSP 1.1 will supported by Safari and Chrome (I hope in 4.2 timeframe).  ---  **Issue Links:** - #17260 AbstractSockJsService.checkAndAddCorsHeaders fails for same origin requests when setAllowedOrigins is set","closed","type: enhancement,","spring-projects-issues","2015-02-06T01:11:36Z","2019-01-11T18:40:07Z"
"","17295","Javascript error with SockJS when using iframe-htmlfile + IE8 [SPR-12698]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12698](https://jira.spring.io/browse/SPR-12698?redirect=false)** and commented  While testing all the combinaisons of browsers + SockJS same/cross domain origins, I found an issue on `iframe-htmlfile` support with IE8, [this line](https://github.com/spring-projects/spring-framework/blob/master/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/HtmlFileTransportHandler.java#L69) produces a Javascript error (I will also create an issue for this one tomorrow, I think it could wait 4.1.6 for the fix).  ---  **Reference URL:** https://docs.google.com/a/pivotal.io/spreadsheets/d/1nmrUh3wl5bsEGFK6jjagikd2SoQ7OIxZ-DlhCbSwnEM/edit#gid=1634238534  **Issue Links:** - #17260 AbstractSockJsService.checkAndAddCorsHeaders fails for same origin requests when setAllowedOrigins is set","closed","in: web,","spring-projects-issues","2015-02-06T01:06:11Z","2019-01-11T18:40:10Z"
"","17294","Add same origin support to SockJS and WebSocket [SPR-12697]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12697](https://jira.spring.io/browse/SPR-12697?redirect=false)** and commented  Simplified support for ""same origin"" requests for SockJS and WebSocket makes sense for a lot of use cases. But we can't just rely on the lack of `Origin` header to identify same origin requests, since for example Chrome provides it even for same origin AJAX requests.  As proposed by [Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch), we should support a smart ""same origin"" check that compares `Origin` header to `Host` header. A possible implementation is available in this [Gist](https://gist.github.com/sdeleuze/a522ef9096b03737e553). This check should be added to both `AbstractSockJSService` and `OriginHandshakeInterceptor`.  You can see the impact on supported browsers when this mode is enabled in this [browser support matrix](https://docs.google.com/spreadsheets/d/1nmrUh3wl5bsEGFK6jjagikd2SoQ7OIxZ-DlhCbSwnEM/edit?usp=sharing).  ---  **Reference URL:** https://gist.github.com/sdeleuze/a522ef9096b03737e553  **Issue Links:** - #17284 Change SockJS default to allowing same origin only (_**""is depended on by""**_) - #17260 AbstractSockJsService.checkAndAddCorsHeaders fails for same origin requests when setAllowedOrigins is set","closed","type: enhancement,","spring-projects-issues","2015-02-06T01:00:20Z","2019-01-11T18:39:59Z"
"","17716","HttpComponentsAsyncClientHttpRequestFactory overrides default request config of httpclient [SPR-13125]","**[Sylvain LAURENT](https://jira.spring.io/secure/ViewProfile.jspa?name=sylvain.laurent)** opened **[SPR-13125](https://jira.spring.io/browse/SPR-13125?redirect=false)** and commented  Same problem as #17144 but for HttpComponentsAsyncClientHttpRequestFactory : if I configure timeouts at the httpclient level but nothing in HttpComponentsAsyncClientHttpRequestFactory, then no timeout is applied.  In org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory.createAsyncRequest(URI, HttpMethod) one can see that RequestConfig.DEFAULT is set instead of leaving it as nul :  ```java if (context.getAttribute(HttpClientContext.REQUEST_CONFIG) == null) {     // Use request configuration given by the user, when available     RequestConfig config = null;     if (httpRequest instanceof Configurable) {         config = ((Configurable) httpRequest).getConfig();     }     if (config == null) {         config = RequestConfig.DEFAULT;     }     context.setAttribute(HttpClientContext.REQUEST_CONFIG, config); } ```  ---  **Affects:** 4.1.6  **Issue Links:** - #17144 Configured RequestConfig in HttpClient gets overwritten by default - #18993 Defensively access deprecated AbstractHttpClient class from Apache HttpComponents  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/04348901f8bfd2af1a2fdc366ab692c8b5117735, https://github.com/spring-projects/spring-framework/commit/5236eb6b63f1b76463779faaa5963b61ab5492a4","closed","type: enhancement,","spring-projects-issues","2015-06-15T04:25:57Z","2019-01-11T16:25:08Z"
"","17962","Support CALL Statement for SAP HANA [SPR-13381]","**[Subhobrata Dey](https://jira.spring.io/secure/ViewProfile.jspa?name=sbcd90)** opened **[SPR-13381](https://jira.spring.io/browse/SPR-13381?redirect=false)** and commented  Support for calling Stored Proedures in SAP HANA. The names of Stored Procedures in SAP HANA can be in lowercase as well. The default implementation in GenericCallMetaDataProvider always converts name to uppercase while calling a stored procedure with SimpleJdbcCall.  Pull Request #864 provided to solve this issue.  ---  **Affects:** 4.2 GA  **Issue Links:** - #18833 Add database product name for SAP HANA  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/864, and commits https://github.com/spring-projects/spring-framework/commit/5f3559fbad0d2853113a88f514d8ace01479f90f","closed","type: enhancement,","spring-projects-issues","2015-08-23T03:37:29Z","2019-01-11T18:18:42Z"
"","17573","HandlerInterceptor.afterCompletion() in spring MVC changes response code [SPR-12982]","**[SUBHASH LENGARE](https://jira.spring.io/secure/ViewProfile.jspa?name=subhashlg26)** opened **[SPR-12982](https://jira.spring.io/browse/SPR-12982?redirect=false)** and commented  I am using spring MVC framework. I want to log error statuses whenever exception is thrown, so afterCompletion method is used in HanlderInterceptor.  ``` @Override public void afterCompletion( final HttpServletRequest request, final HttpServletResponse response, final Object handler, final Exception ex) {     final int responseCode = response.getStatus();     s_logger_error.error(""status code: "" + responseCode ); } ```  This code works fine if I run this as an application on local machine. But when we host it on the jetty server, UI gets correct error response (In my case 409), but in this method it gets logged as 200.  [Image from remote debug where it shows status=200 but in response it is 409]  I am using sprint 1.1.10.RELEASE spring boot version and jetty-distribution-8.1.16   ---  **Attachments:** - [When Run As application.png](https://jira.spring.io/secure/attachment/22775/When+Run+As+application.png) (_92.95 kB_) - [When Run on Jetty server.png](https://jira.spring.io/secure/attachment/22776/When+Run+on+Jetty+server.png) (_116.69 kB_)","closed","status: invalid,","spring-projects-issues","2015-05-05T06:02:09Z","2019-01-12T05:24:23Z"
"","18010","Outdated ContentNegotiatingViewResolver example in section 21.5.4  [SPR-13431]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13431](https://jira.spring.io/browse/SPR-13431?redirect=false)** and commented  > In the documentation you have posted, the example in 21.5.4 ContentNegotiatingViewResolver is obsolete, that class has no more a set method for mediaTypes.  https://spring.io/blog/2015/09/01/spring-framework-4-2-1-available-now#comment-2235448525  ---  **Issue Links:** - #18134 Backport corrected ContentNegotiationManager reference in MVC chapter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f2c9838e9565fe5d11326d6114c9072161247180","closed","type: task,","spring-projects-issues","2015-09-04T15:40:02Z","2019-01-11T17:11:10Z"
"","17955","Introduce hook for creating a custom BeanPropertyBindingResult in DataBinder [SPR-13373]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13373](https://jira.spring.io/browse/SPR-13373?redirect=false)** and commented  An [issue in Spring Boot](https://github.com/spring-projects/spring-boot/issues/3778) would benefit from an extension point when the actual `BeanPropertyBindingResult` is created. That way, it can provide extra customization at the right place.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/22948bd7f04075a30c211c6b89cd014e09593382  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2015-08-20T08:21:37Z","2015-09-01T11:38:23Z"
"","17744","Package tangle in org.springframework.core [SPR-13153]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13153](https://jira.spring.io/browse/SPR-13153?redirect=false)** and commented  #### Status Quo  Commit [518c85b](https://github.com/spring-projects/spring-framework/commit/518c85b1077e34b63d17dfbf5d0149bb7c764f00) introduced a package tangle resulting from `MethodParameter`'s new dependency on `AnnotationUtils`.  #### Analysis  `MethodParameter` now uses `AnnotationUtils` in order to support annotation attribute aliases via `@AliasFor`. Without this functionality, many of the aliases for `value` attributes cannot be supported in annotations on methods and method parameters. For example, the following (amongst others) rely on this support:  | `spring-messaging`      | `@Header` | | `spring-messaging`      | `@Payload` | | `spring-messaging`      | `@SendToUser` | | `spring-web`            | `@CookieValue` | | `spring-web`            | `@MatrixVariable` | | `spring-web`            | `@RequestHeader` | | `spring-web`            | `@RequestParam` | | `spring-web`            | `@RequestPart` | | `spring-web`            | `@ResponseStatus` |  However, `AnnotationUtils` already has a dependency on `BridgeMethodResolver` which resides in the `core` package alongside `MethodParameter`, and this causes the package cycle.  #### Proposals  1. [ ] Refactor `MethodParameter` to use reflection to invoke utility methods in `AnnotationUtils`. 2. [ ] Refactor `AnnotationUtils` to use reflection to invoke utility methods in `BridgeMethodResolver`. 3. [x] Introduce subclass of `MethodParameter` in package `org.springframework.core.annotation` with support for _synthesizing_ annotations.    - Proposed name: `SynthesizingMethodParameter`  ---  **Affects:** 4.2 RC2  **Issue Links:** - #16020 Introduce aliases for 'value' annotation attributes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dc1f921f5c357ed6593b3d99b22cb8f6d34849f2","closed","type: task,","spring-projects-issues","2015-06-22T07:57:04Z","2019-01-11T16:21:08Z"
"","17720","Remove reference to codehaus.org [SPR-13129]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13129](https://jira.spring.io/browse/SPR-13129?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/95acf8c989b0741195f993da40a39c07a500d59f","closed","type: task,","spring-projects-issues","2015-06-15T06:41:34Z","2015-06-30T15:26:28Z"
"","17672","Wrong IllegalStateException for @Cacheable without a cache name [SPR-13081]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13081](https://jira.spring.io/browse/SPR-13081?redirect=false)** and commented  In 4.1, we've relaxed the structure of caching annotations so that they don't need to refer to any name at all. The name(s) can be provided by a `CacheConfig` annotation at class level for instance or via a custom `CacheResolver` that retrieves the cache names using a custom algorithm.  Unfortunately, we are still validating that at least one cache names is specified per operation and we throw an `IllegalStateException` if that's not the case: it prevent the `CacheResolver` use case to be used in practice.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/daf12a972306aa3e2e104be9666529882ec7db5b, https://github.com/spring-projects/spring-framework/commit/08c032d9fdf3f0016008e1ebfe98c1a60c5ea5dd","closed","in: core,","spring-projects-issues","2015-05-29T01:20:13Z","2015-06-30T10:41:38Z"
"","17649","SynthesizedAnnotation must be public [SPR-13057]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13057](https://jira.spring.io/browse/SPR-13057?redirect=false)** and commented  #### Status Quo  > How do you go about using Spring Boot 1.3.0.BUILD-SNAPSHOT? >  > I've set it in my Maven POM, but I'm getting strange errors when trying to run it. >  > ``` > Caused by: java.lang.IllegalAccessError: class org.springframework.core.annotation.$Proxy62 cannot access its superinterface org.springframework.core.annotation.SynthesizedAnnotation > ```  ---  #### Analysis  The `SynthesizedAnnotation` must be `public` so that non-public annotations from different packages can be proxied.  ---  **Issue Links:** - #16137 Introduce unified support for declaring and looking up annotation attribute aliases - #16138 Introduce support for explicit annotation attribute overrides  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e7ea92561d5d5c0f25e49def6b9d4e7d1dd6b9c6, https://github.com/spring-projects/spring-framework/commit/39b2fbbccf154adf511d3c3084087ce2d0b80af4","closed","in: core,","spring-projects-issues","2015-05-22T00:32:25Z","2019-01-13T20:54:23Z"
"","17645","No possible matches for invalid field access in DirectFieldAccessor [SPR-13053]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13053](https://jira.spring.io/browse/SPR-13053?redirect=false)** and commented  `BeanWrapper` has this feature of providing alternative matches if no property with a given name is found but a _similar_ property exists on the target bean.  This is not provider for `DirectFieldAccessor`. Since we just harmonized the two, it would be nice to provide that feature as well.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2ab34373d17c251b0ee89d4fa4537998164413c6, https://github.com/spring-projects/spring-framework/commit/24783303a7b6b2d1fd9c080bab00a1890b1a9e49","closed","type: enhancement,","spring-projects-issues","2015-05-21T05:59:39Z","2015-05-26T01:15:19Z"
"","17613","Destroy callback cannot be disabled for AutoCloseable beans [SPR-13022]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13022](https://jira.spring.io/browse/SPR-13022?redirect=false)** and commented  The `destroyMethod` argument of `@Bean` is `(inferred)` which will try to find a matching destroy method (`close` and `shutdown`).  If one wants to disable this behaviour, the documented approach is to override that argument with the empty string, something like `@Bean(destroyMethod="""")`.  This does not work for `Closeable` (`AutoCloseable`) beans as the callback is invoked no matter what.  ---  **Affects:** 4.0 GA  **Issue Links:** - #17633 Add description of Closeable and AutoCloseable in reference document - #18494 Spring fails to find bean's destroy method in case there is a bridge method - #17153 Document how to prevent a JNDI DataSource retrieved using JavaConfig to be removed on shutdown of the context  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0ed9ca097bb499b46c67d34d59e08a1337758097","closed","type: enhancement,","spring-projects-issues","2015-05-13T04:38:36Z","2019-01-11T16:03:18Z"
"","17611","Harmonize default converters with available editors [SPR-13020]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13020](https://jira.spring.io/browse/SPR-13020?redirect=false)** and commented  The framework provides a `CharsetEditor` but no converter for it. It turns out that we have the same for `TimeZone` and `Currency`. The purpose of this issue is to align our `DefaultConversionService` to provide converters for those as well.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0612bc7bc5a82ff7414d8c8bcf665599d23a5225, https://github.com/spring-projects/spring-framework/commit/91b3caf238de067edaac5c4228605ca0d797516f","closed","type: enhancement,","spring-projects-issues","2015-05-13T04:31:40Z","2015-05-26T01:15:32Z"
"","17448","Exception cache resolver shouldn't be mandatory [SPR-12850]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12850](https://jira.spring.io/browse/SPR-12850?redirect=false)** and commented  The caching abstraction provides various ways of configuring the component responsible of retrieving the cache at runtime.  `CachingConfigurer` was the main interface and an extra interface was created when the abstraction runs with JSR-107 support `JCacheConfigurer`  JCache has the notion of an exception resolver that can be different from the main one.  Use case:  1. you don't use JSR-107 at all and you define a `CacheResolver` via an implementation of `CachingConfigurer`. All work fine. 2. You add the JCache API in your classpath, your app breaks because an exception `CacheResolver` is required and not found  Two potential solutions:  1. Use the ""main"" `CacheResolver` if no specific one has been set 2. Lazy check for the exception cache resolver (after all you only need this if an `exceptionCacheName` attribute has been set on a JSR-107 annotation.  Using 1 is probably the easier but I can't recall why it wasn't done initially.   ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/314b069fd814fd4629a4449a16b80b6f2e968061, https://github.com/spring-projects/spring-framework/commit/073c1764002d310b2d4689b1e5293f2b4431251e, https://github.com/spring-projects/spring-framework/commit/7aa3175a712842052147259096088f22c80a03d7, https://github.com/spring-projects/spring-framework/commit/5f6ae130026163fe5112409a67c88ca52d335daa, https://github.com/spring-projects/spring-framework/commit/a7fec6a4595f8709b37550b8e856c73e23d05475","closed","in: core,","spring-projects-issues","2015-03-25T01:18:23Z","2015-03-25T09:42:32Z"
"","17440","CacheLoader is ignored as of Guava 11 [SPR-12842]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12842](https://jira.spring.io/browse/SPR-12842?redirect=false)** and commented  Since Guava 11, there is a separate interface to manipulate a `CacheLoader`: `LoadingCache`.  Our implementation uses `Cache` regardless of the fact we have specified a `CacheLoader` or not. In the former case a `LoadingCache` is created and as a  `get` method that will invoke the loader if necessary.  Our current `GuavaCache` calls `getIfPresent` that will never use the loader.   ---  **Affects:** 4.1.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9172a6d05e26a9103d0fbcc5ae1d047482319938, https://github.com/spring-projects/spring-framework/commit/f52702ea3ce77b1be00ba1aeba821198c0dde0f0","closed","in: core,","spring-projects-issues","2015-03-21T07:54:38Z","2015-03-25T09:42:35Z"
"","17439","JCacheCacheManager has no way to shutdown the underlying JSR-107 cache manager [SPR-12841]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12841](https://jira.spring.io/browse/SPR-12841?redirect=false)** and commented  `JCacheManager` would use a method to actually shutdown the underlying `javax.cache.CacheManager` since it won't be shutdown when the context shutdowns by default.  Of course, we could keep a handle on `javax.cache.CacheManager` and shutdown it ourselves but it may not be always possible.  The problem is that if we add a `close()` or `shutdown()` method, these will be called automatically. It may or may be what we want so an extra flag to determine if we should shutdown the JCache cache manager would be good.   --- No further details from [SPR-12841](https://jira.spring.io/browse/SPR-12841?redirect=false)","closed","type: enhancement,","spring-projects-issues","2015-03-21T02:32:40Z","2015-05-15T01:36:49Z"
"","17396","Support for Transport connectivity check in JavaMailSender [SPR-12799]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12799](https://jira.spring.io/browse/SPR-12799?redirect=false)** and commented  Currently, there is no way to check that a particular `JavaMailSender` instance is ""alive"" (that is it could connect to the SMTP server successfully. There is now a health check in boot for mail that had to copy some protected method around in the meantime.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a64532ede2546f5e4bdb470f6087d053201d2317","closed","type: enhancement,","spring-projects-issues","2015-03-10T02:16:02Z","2015-05-26T01:14:40Z"
"","17388","Documentation regression: some TIP and NOTE wrongly displayed [SPR-12791]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12791](https://jira.spring.io/browse/SPR-12791?redirect=false)** and commented  I believe since the move to a new version of asciidoctor we have now display problems for `[TIP]` and `[NOTE]` if the delimiter is `===` instead of `====` (4 equal signs instead of 3).  Adding an extra = sign fixes the problem.   --- No further details from [SPR-12791](https://jira.spring.io/browse/SPR-12791?redirect=false)","closed","type: documentation,","spring-projects-issues","2015-03-06T08:53:22Z","2015-05-26T01:14:40Z"
"","17373","Upgrade to animal sniffer 1.14 [SPR-12775]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12775](https://jira.spring.io/browse/SPR-12775?redirect=false)** and commented  This release is compatible with Java8   --- No further details from [SPR-12775](https://jira.spring.io/browse/SPR-12775?redirect=false)","closed","type: task,","spring-projects-issues","2015-03-02T05:47:22Z","2015-05-26T01:15:04Z"
"","17371","@JmsListener cannot be a scoped proxy [SPR-12774]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12774](https://jira.spring.io/browse/SPR-12774?redirect=false)** and commented  See [AMQP-481](https://jira.spring.io/browse/AMQP-481)  ---  **Affects:** 4.1.5  **Issue Links:** - [AMQP-481](https://jira.spring.io/browse/AMQP-481) `@RabbitListener` cannot be a scoped proxy  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5c9f09c2c778be2dc0def9c471ceb3061fc8472a","closed","type: bug,","spring-projects-issues","2015-03-02T05:37:41Z","2019-01-13T05:41:58Z"
"","17363","Harmonize resource and code split [SPR-12766]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12766](https://jira.spring.io/browse/SPR-12766?redirect=false)** and commented  While we have a clear separation between code (`src/main/java`) and resources (`src/main/resources`) many modules of the framework still have resources in the code directory (mostly in tests).  Let's harmonize all that; this will simplify the build as well.   --- No further details from [SPR-12766](https://jira.spring.io/browse/SPR-12766?redirect=false)","closed","type: task,","spring-projects-issues","2015-02-28T01:20:25Z","2015-05-26T01:15:07Z"
"","17303","BeanWrapper should auto-grow arrays on indexed set attempt as well [SPR-12706]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12706](https://jira.spring.io/browse/SPR-12706?redirect=false)** and commented  `BeanWrapper` does not manage indexed access for an array if it has to create the actual array. This gives a weird situation where if the array is already initialized the bracket notation works but if the binder has to initialize it it always fails with an `ArrayIndexOutOfBoundsException` as it creates an empty array by default.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1646f62700018006526dccbc0bbb9ea17084e0a5, https://github.com/spring-projects/spring-framework/commit/aa213396b4aa73501d44927d3fe016571bba7555","closed","type: enhancement,","spring-projects-issues","2015-02-10T07:31:08Z","2015-02-20T04:13:17Z"
"","17301","No way to retrieve the actual target type using beanName [SPR-12704]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12704](https://jira.spring.io/browse/SPR-12704?redirect=false)** and commented  `ApplicationContext#getType(String beanName)` returns the `Class` of the bean exposed with the specified name.  When the bean is wrapped in a proxy, it returns the class of the proxy which does not help much. The  way to workaround that for the moment is to get the bean instance (`getBean(beanName`) and use `AopUtils.getTargetClass()` with the result. Unfortunately the whole point of calling `getType` is to use the meta-data of the bean factory and **not** early initialize the bean instance.  It would be nice if the target type would be exposed as well.  ---  **Issue Links:** - #17237 `@Order` should get detected in case of proxyTargetClass=false as well (_**""is depended on by""**_)  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-02-10T03:12:06Z","2019-01-13T05:42:26Z"
"","17300","AnnotatedElementUtils does not find annotations on methods in dynamic proxies [SPR-12703]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12703](https://jira.spring.io/browse/SPR-12703?redirect=false)** and commented  The following two calls do not yield consistent results when the `method` is a method of a dynamic proxy.  ```java AnnotatedElementUtils.getAnnotationAttributes(this.method, FooBar.class.getName()); ```  The above returns `null`; whereas, the following call **on the same method** returns the `FooBar` annotation instance.  ```java AnnotationUtils.findAnnotation(this.method, FooBar.class) ```  The code merged for #16696 has some TODOs in `ApplicationListenerMethodAdapter` and tests that expose this behavior (removing the call to `AnnotationUtils` will fail with a `NullPointerException`).  ---  **Affects:** 4.1 GA  **Issue Links:** - #17534 AnnotationUtils does not support arbitrary levels of meta-annotations on methods - #15734 Support composed annotations declared on interfaces - #17335 AnnotatedElementUtils fails to find annotations on abstract, bridge, or interface methods - #17537 AnnotatedElementUtils fails to find type-level annotations on interfaces","closed","in: core,","spring-projects-issues","2015-02-10T00:01:16Z","2019-01-12T16:46:12Z"
"","17299","Document event infrastructure improvements [SPR-12702]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12702](https://jira.spring.io/browse/SPR-12702?redirect=false)** and commented  See #12850, #16245, #16696 and #17330 for more details  ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0b84f137ccec2a31ced652d5edb1f1565c9670c0","closed","type: documentation,","spring-projects-issues","2015-02-09T23:56:12Z","2019-01-11T21:29:23Z"
"","17297","Define explicitly in the documentation when @Cacheable annotations can be used [SPR-12700]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12700](https://jira.spring.io/browse/SPR-12700?redirect=false)** and commented  https://stackoverflow.com/questions/28350082/spring-cache-using-cacheable-during-postconstruct-does-not-work   --- No further details from [SPR-12700](https://jira.spring.io/browse/SPR-12700?redirect=false)","closed","in: core,","spring-projects-issues","2015-02-07T06:06:49Z","2015-02-20T04:13:13Z"
"","17289","Cache aspect should also clear expression caches on shutdown [SPR-12691]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12691](https://jira.spring.io/browse/SPR-12691?redirect=false)** and commented  We've introduced a `clearMetadata()` hook point on `CacheAspectSupport` that AspectJ uses to clear the metadata cache on shutdown (since an aspect is basically a singleton). It would be better to also clear expression caches from the `ExpressionEvaluator`   --- No further details from [SPR-12691](https://jira.spring.io/browse/SPR-12691?redirect=false)","closed","type: enhancement,","spring-projects-issues","2015-02-05T04:54:12Z","2015-05-26T01:14:46Z"
"","17263","Add support for ordered application event listener [SPR-12663]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12663](https://jira.spring.io/browse/SPR-12663?redirect=false)** and commented  `ApplicationListener` handling order is currently undefined. We should be able to order them using either `@Order` or `Ordered`.  ---  **Issue Links:** - #16245 ApplicationListener-like annotation for consuming application events","closed","type: enhancement,","spring-projects-issues","2015-01-26T06:23:05Z","2019-01-11T19:01:38Z"
"","17202","Review MBean related performance tests [SPR-12601]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12601](https://jira.spring.io/browse/SPR-12601?redirect=false)** and commented  Our performance job on CI is failing sometimes on the following tests:  ``` MBeanClientInterceptorTests testTestLazyConnectionToRemote	Default Job RemoteMBeanClientInterceptorTests testSetAttributeValueWithRuntimeException	Default Job RemoteMBeanClientInterceptorTests testSetAttributeValue	Default Job RemoteMBeanClientInterceptorTests testInvokeNoArgs	Default Job RemoteMBeanClientInterceptorTests testSetReadOnlyAttribute	Default Job RemoteMBeanClientInterceptorTests testInvokeUnexposedMethodWithException	Default Job RemoteMBeanClientInterceptorTests testTestLazyConnectionToRemote	Default Job RemoteMBeanClientInterceptorTests testSetAttributeValueWithIOException	Default Job RemoteMBeanClientInterceptorTests testGetAttributeValue	Default Job RemoteMBeanClientInterceptorTests testDifferentProxiesSameClass	Default Job RemoteMBeanClientInterceptorTests testSetAttributeValueWithCheckedException	Default Job RemoteMBeanClientInterceptorTests testProxyClassIsDifferent	Default Job RemoteMBeanClientInterceptorTests testInvokeArgs	Default Job ConnectorServerFactoryBeanTests testNoRegisterWithMBeanServer	Default Job ConnectorServerFactoryBeanTests testRegisterWithMBeanServer	Default Job ConnectorServerFactoryBeanTests testStartupWithSuppliedServer	Default Job ConnectorServerFactoryBeanTests testStartupWithLocatedServer	Default Job MBeanServerConnectionFactoryBeanTests testTestWithLazyConnection	Default Job MBeanServerConnectionFactoryBeanTests testTestValidConnection ```  ---  **Issue Links:** - #15289 Install jmxremote_optional.jar in Java 8 JVM used for Spring performance builds","closed","in: core,","spring-projects-issues","2015-01-07T00:44:25Z","2019-01-11T19:07:14Z"
"","17185","Core interceptors overhaul [SPR-12584]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12584](https://jira.spring.io/browse/SPR-12584?redirect=false)** and commented  Core framework interceptors essentially require the same infrastructure but does not share a lot of code.  For instance, some interceptors are qualified-based (i.e. a qualifier can be set in the annotation to customize the ""handler"") which brings the need for a smart cache and proper handling for AspectJ (that should clean that cache appropriately since the aspect is basically a singleton for the classloader).  This issue is a general overhaul of that infrastructure that could span other issues along  the way depending of the outcome of the initial investigation.  Things to investigate:  * Some interceptor uses a qualifier on the annotation. Instead of retrieving the service every time (`determineXyz`) we should cache it. Transaction support has a good support now. * `ReflectionUtils#doWithMethods` can return the same method several times if it's overridden. If the parent method also has the annotation we may register a proxy or a handler several times for the same bean instance! Check `ReflectionUtils.getUniqueDeclaredMethods` instead  ---  **Issue Links:** - #17178 Regression in TransactionAspectSupport.determineTransactionManager(…) - #17164 MethodValidationPostProcessor using multiple (custom) validators","closed","status: bulk-closed,","spring-projects-issues","2014-12-31T06:56:15Z","2019-01-12T03:30:36Z"
"","17184","Merge default request config with local customizations [SPR-12583]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12583](https://jira.spring.io/browse/SPR-12583?redirect=false)** and commented  Before #17144, only the local customizations on the factory were available to each request and the defaults of the client were always ignored.  If the factory is defined with `HttpClient`, its default settings are taken into account as long as no local customizations are made. Therefore, all customizations should be set in the created client.  We can do better as from HttpComponents 4.4 since the default config of the `HttpClient` can be accessed. In that case we can retrieve that config and **merge** it with our local customizations instead of overriding everything else.  ---  **Issue Links:** - #17144 Configured RequestConfig in HttpClient gets overwritten by default - #17423 HttpComponentsClientHttpRequestFactory should not depend on CloseableHttpClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bce145c06e3f92744b57d8a54cbb077774b2b9a2","closed","type: enhancement,","spring-projects-issues","2014-12-31T06:41:08Z","2019-01-11T18:24:06Z"
"","17898","[doc] Update Javadoc on RestTemplate/AsyncRestTemplate to highlight supported HTTP client libraries [SPR-13313]","**[Stojan Sljivic](https://jira.spring.io/secure/ViewProfile.jspa?name=ssljivic)** opened **[SPR-13313](https://jira.spring.io/browse/SPR-13313?redirect=false)** and commented  Is there any plan to support non blocking IO, Java NIO2, in AsyncRestTemplate?  Thanks   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bdf735125f20f652b1a7df0158bd1bac96dacde7","closed","in: web,","spring-projects-issues","2015-08-04T05:54:39Z","2015-09-01T11:38:23Z"
"","17506","Concurrent session attributes updates potentially lost [SPR-12907]","**[Steven D Maurer](https://jira.spring.io/secure/ViewProfile.jspa?name=stevenmaurer)** opened **[SPR-12907](https://jira.spring.io/browse/SPR-12907?redirect=false)** and commented  We ran into a deadlock in Spring when attempting to shutdown on a downrev version of this file.  We ended up tracking the issue to #5750, but then noticed something else. There is a  sync hole that allows losing elements off this list from race conditions (in both ServletRequestAttributes and PortletRequestAttributes). It can be fixed by changing the lines within updateSessionAccessedAttributes() from this:  for (Iterator it = this.sessionAttributesToUpdate.entrySet().iterator() ; it.hasNext() ; ) { Map.Entry entry = (Map.Entry) it.next(); String name = (String) entry.getKey(); Object newValue = entry.getValue();  to this:  for (Iterator it = this.sessionAttributesToUpdate.keySet().iterator(); it.hasNext(); ) { String name = (String) it.next(); Object newValue = this.sessionAttributesToUpdate.remove( name );  ...and removing the  this.sessionAttributesToUpdate.clear() statement on exit. The works because the ""sessionAttributesToUpdate.remove( name );"" is an atomic operation. Elements may be added at any time, but the second way of structuring this ensures that none will be cleared from the list without being processed.  I have not directly committed my own changes over this, so there is no associated pull request, but I think this will solve the issue in the code, and I hope that Juergen, or whoever is the current gatekeeper on this, will look favorably on it.  Steven Maurer Portal / Threat Intelligence Architect Dell Secureworks  ---  **Affects:** 4.1.6  **Reference URL:** #15069  **Issue Links:** - #15069 Sporadic deadlocks while using servlet scoped beans from another thread.","closed","status: bulk-closed,","spring-projects-issues","2015-04-13T15:43:29Z","2019-01-14T04:43:21Z"
"","17680","H4 SpringSessionSynchronization#beforeCompletion leaves irreparably broken state if exception thrown in session.disconnect() [SPR-13089]","**[Steve Storey](https://jira.spring.io/secure/ViewProfile.jspa?name=stevestorey)** opened **[SPR-13089](https://jira.spring.io/browse/SPR-13089?redirect=false)** and commented  Requires Hibernate 4, Spring 4, JDBC DataSourceTransactionManager:  H4 SpringSessionSynchronization#beforeCompletion doesn't put a try/finally around the session operations (in particular session.disconnect() ), and leaves the  ``` TransactionSynchronizationManager.unbindResource(this.sessionFactory); ```  call until after the disconnect. If the disconnect throws a SQLException (as can happen if a org.springframework.jdbc.datasource.DataSourceTransactionManager is in place), then the TSM's thread local is left with a closed Session, from which the org.springframework.orm.hibernate4.SpringSessionContext will never recover.  H3 support didn't have the same problem because: 1. the SpringSessionSynchronization would only call disconnect (or anything) before deregistering from the TSM if a JTA transaction was in progress 2. Even if there were such a problem, the H3 SessionHolder used getValidatedSession to ensure it was valid (returning null it not) and the H3 SessionFactoryUtils#doGetSession would deal with the possibility that the SessionHolder would return null and automatically open a new Session.  Suggested fix is to put a try/finally in the beforeCompletion() method (not sure whether or not the SpringSessionContext should check Session.isOpen() before returning since it should never really be in that state?)  The attached test case can be run with ""mvn test"". It can trivially be fixed by using the HibernateTransactionManager instead, or by not throwing the exception during the close() method. We discovered this having upgraded our code to H4, and having a SQL Server reboot on us at which point the threads that had open connections all broke until the app server was restarted.  ---  **Affects:** 4.1.6  **Attachments:** - [spring-hibernate-disconnect-bug.tar.gz](https://jira.spring.io/secure/attachment/22893/spring-hibernate-disconnect-bug.tar.gz) (_4.22 kB_)  **Issue Links:** - #13659 Hibernate4 version of SpringSessionContext.currentSession() does not create a session if TransactionSynchronizationManager does not contain one  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8c337a48a973bb3522fca22910b379a3e0062bcc, https://github.com/spring-projects/spring-framework/commit/55de4a69aed7d10a86fd153e8acce792960c1c65","closed","type: bug,","spring-projects-issues","2015-06-01T10:41:59Z","2019-01-11T15:45:35Z"
"","17858","InvocableHandlerMethod.getMethodArgumentValues() failure should lead to warn-level logging by default [SPR-13267]","**[Steve Roy](https://jira.spring.io/secure/ViewProfile.jspa?name=stevedroy)** opened **[SPR-13267](https://jira.spring.io/browse/SPR-13267?redirect=false)** and commented  The InvocableHandlerMethod logs request mapping values at the TRACE and more recently the DEBUG levels when a request can't be mapped without issue.  We normally run Spring at LOG.warn to keep the log chattiness down.  We were a bit thrown off on the issue until the Spring logging was dropped to the TRACE level.  We will have external partner systems calling us in Production and we can't run Production at even a DEBUG level to troubleshoot these problems.  This is going to be an ongoing issue for our software solution.  - steve  ---  **Affects:** 4.1.6  **Issue Links:** - #17518 Use higher log level in InvocableHandlerMethod.getMethodArgumentValues() - #17712 400 Bad Request for missing URI template variable is incorrect - #18965 Improve warn logging in AbstractHandlerExceptionResolver  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9e62c8efa1ac54ac36b9d37fb76ed584d7552996, https://github.com/spring-projects/spring-framework/commit/76d7f4527acaaeb784938cada6b57c73eb4abdb7","closed","type: enhancement,","spring-projects-issues","2015-07-22T07:40:27Z","2019-01-11T18:03:09Z"
"","17701","Attempted Duplicate Class Definition for Name [SPR-13110]","**[Steve Roy](https://jira.spring.io/secure/ViewProfile.jspa?name=stevedroy)** opened **[SPR-13110](https://jira.spring.io/browse/SPR-13110?redirect=false)** and commented  Hi,  We are receiving an error after upgrading to Spring 4 during bean initialization  attempted  duplicate class definition for name  This bean happens to be an AOP scoped proxy, but other beans that are not receive the same error.  Here is the top of the stack trace:  java.lang.LinkageError: loader (instance of  com/google/appengine/tools/development/IsolatedAppClassLoader): attempted  duplicate class definition for name: ""com/thecompany/theproject/uifacade/web/http/RequestScopedContext$$EnhancerBySpringCGLIB$$c8b76c25"" at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:800) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at com.google.appengine.tools.development.agent.runtime.Runtime.invoke(Runtime.java:130) at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:384) at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:219) at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:377) at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:285) [Stack trace truncated for brevity]    ---  **Affects:** 4.1.6","closed","status: bulk-closed,","spring-projects-issues","2015-06-10T12:18:22Z","2019-01-12T02:27:43Z"
"","17333","Allow creation of bean factory method implementations inline with groovy bean config [SPR-12736]","**[Steve Ash](https://jira.spring.io/secure/ViewProfile.jspa?name=steve.ash)** opened **[SPR-12736](https://jira.spring.io/browse/SPR-12736?redirect=false)** and commented  Let's say that I have a bean named ""greeter"" of type Function. In the javaconfig I could implement this as:  ``` @Bean public Function greeter() {   return new Function() {       public String apply(String name) { return ""Hello "" + name; }   }; } ```  One use case that we use a lot is using java config for everything at development but delivering a spring beans xml file with the app that is imported last. We deliver this beans file empty, but at deployment time we can ""override"" beans to help with integration tasks and debugging. With the xml I can do something like this if I want to customize the greeter bean at deployment time:  ```xml                   ```  If I wanted to replace our ""override"" xml with the groovy dsl I don't know how I would use the  namespace. I could probably embed it as a string script -- but it seems like it would be even better to be able to do something like:  ``` beans {   greeter(Function) {     factory = { ->        return { ""Hiya "" + input } as Function     }   } } ```  So the dsl would have some kind of ""special"" property representing the factory function itself -- i.e. in the same way that the proxied `@Bean` method body works.   ---  **Affects:** 4.1.4  **Reference URL:** http://spring.io/blog/2014/03/03/groovy-bean-configuration-in-spring-framework-4#comment-1846826191","closed","status: bulk-closed,","spring-projects-issues","2015-02-20T07:47:39Z","2019-01-12T03:29:56Z"
"","17805","ConcurrentModificationException when doing a merge on AbstractEnvironment [SPR-13213]","**[Stephen Liang](https://jira.spring.io/secure/ViewProfile.jspa?name=stephenliang)** opened **[SPR-13213](https://jira.spring.io/browse/SPR-13213?redirect=false)** and commented  I seem to get an occasional ConcurrentModificationException when doing a merge on various different threads. Perhaps merge() needs to be synchronized?  ``` Caused by: java.util.ConcurrentModificationException         at java.util.LinkedHashMap$LinkedHashIterator.nextEntry(LinkedHashMap.java:373)         at java.util.LinkedHashMap$KeyIterator.next(LinkedHashMap.java:384)         at java.util.AbstractCollection.toArray(AbstractCollection.java:171)         at org.springframework.util.StringUtils.toStringArray(StringUtils.java:816)         at org.springframework.core.env.AbstractEnvironment.getDefaultProfiles(AbstractEnvironment.java:268)         at org.springframework.core.env.AbstractEnvironment.merge(AbstractEnvironment.java:437)         at org.springframework.context.support.AbstractApplicationContext.setParent(AbstractApplicationContext.java:402)         at org.springframework.context.support.GenericApplicationContext.setParent(GenericApplicationContext.java:148)         at org.springframework.webflow.engine.builder.model.FlowModelFlowBuilder.createFlowApplicationContext(FlowModelFlowBuilder.java:336)         at org.springframework.webflow.engine.builder.model.FlowModelFlowBuilder.initLocalFlowContext(FlowModelFlowBuilder.java:302)         at org.springframework.webflow.engine.builder.model.FlowModelFlowBuilder.doInit(FlowModelFlowBuilder.java:147)         at org.springframework.webflow.engine.builder.support.AbstractFlowBuilder.init(AbstractFlowBuilder.java:46)         at org.springframework.webflow.engine.builder.FlowAssembler.assembleFlow(FlowAssembler.java:90)         at org.springframework.webflow.engine.builder.DefaultFlowHolder.assembleFlow(DefaultFlowHolder.java:109)         at org.springframework.webflow.engine.builder.DefaultFlowHolder.getFlowDefinition(DefaultFlowHolder.java:84)         at org.springframework.webflow.definition.registry.FlowDefinitionRegistryImpl.getFlowDefinition(FlowDefinitionRegistryImpl.java:61)         at org.springframework.webflow.executor.FlowExecutorImpl.launchExecution(FlowExecutorImpl.java:138)         at org.springframework.webflow.mvc.servlet.FlowHandlerAdapter.handle(FlowHandlerAdapter.java:193)         at org.springframework.webflow.mvc.servlet.FlowController.handleRequest(FlowController.java:174)         at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:48)         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:953)         ... 227 more ```  ---  **Affects:** 3.2.8  **Issue Links:** - #17034 Concurrent registration/iteration in PropertySourcesPropertyResolver - #20380 Consistent logging in Environment and PropertySource implementations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d2447ce5238f9d7ee4ef33f9b7b7d581b057a983, https://github.com/spring-projects/spring-framework/commit/e393c7b1ee03321ab2afda7ea8aff775128aca94, https://github.com/spring-projects/spring-framework/commit/af5f4e6fb4e6955c0ac2ab7fb9f978402e4d577b  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1), [3.2.15](https://github.com/spring-projects/spring-framework/milestone/103?closed=1)","closed","type: bug,","spring-projects-issues","2015-07-08T10:54:56Z","2019-01-11T18:07:01Z"
"","17210","AbstractRequestLoggingFilter and CommonsRequestLoggingFilter log level checks [SPR-12609]","**[stephane cizeron](https://jira.spring.io/secure/ViewProfile.jspa?name=stephane.cizeron)** opened **[SPR-12609](https://jira.spring.io/browse/SPR-12609?redirect=false)** and commented  Hello, The AbstractRequestLoggingFilter is very usefull but the perfomances could be improved. In fact, when a request is coming, a request message is created and after that, the log level check is done. Most of the time, the request message is useless. It's the same case for the response message (the ""after request"" message exactlty).  You could add the log level test :  protected void doFilterInternal(...) throws ServletException, IOException { ... if (isFirstRequest && logger.isDebugEnabled()) { beforeRequest(requestToUse, getBeforeMessage(requestToUse)); } ... if (!isAsyncStarted(requestToUse) && logger.isDebugEnabled()) {  afterRequest(requestToUse, getAfterMessage(requestToUse)); }  Regards Stephane    ---  **Affects:** 4.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d4dac250a835c54428d6f1e29f8fe8eaec59330e, https://github.com/spring-projects/spring-framework/commit/bfba988a0d831507de481351c4668a534898e37c","closed","type: enhancement,","spring-projects-issues","2015-01-09T04:08:55Z","2015-02-20T04:13:15Z"
"","17520","MethodJmsListenerEndpoint does not set the DestinationResolver on the MessagingMessageListenerAdapter [SPR-12927]","**[Stephan Oudmaijer](https://jira.spring.io/secure/ViewProfile.jspa?name=soudmaijer)** opened **[SPR-12927](https://jira.spring.io/browse/SPR-12927?redirect=false)** and commented  The MethodJmsListenerEndpoint does not set a destination resolver in the createMessageListener() method. Therefore it always uses the DynamicDestinationResolver defined at spring-jms-4.1.6.RELEASE-sources.jar!/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java:60  ---  **Affects:** 4.1.6  **Issue Links:** - #17651 MessagingMessageListenerAdapter should use DestinationResolver of MessageListenerContainer (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bd05e3ade2900d3a321d640d6112eb1ba2d6e556, https://github.com/spring-projects/spring-framework/commit/444b9032be7fa73d12103cbf351f82751b08a95b","closed","type: enhancement,","spring-projects-issues","2015-04-17T01:45:18Z","2019-01-11T21:08:45Z"
"","17511","Allow for marshalling the messaging Message payload with an user defined marshaller [SPR-12912]","**[Stephan Oudmaijer](https://jira.spring.io/secure/ViewProfile.jspa?name=soudmaijer)** opened **[SPR-12912](https://jira.spring.io/browse/SPR-12912?redirect=false)** and commented  Sorry for changing this ticket a few times. Took me some time to figure out what I need ;-)  The MessagingMessageListenerAdapter does not allow for a user defined marshaller the the Message payload.  An example:  ```java @JmsListener(destination = ""someDestination"") @SendTo(""someOtherDestination"") public Message onMessage(final IncomingMessage message) { ... }  ```  The SomeObjectThatNeedsToBeMarshalledWithJaxb needs to be marshalled using a MarshallingMessageConverter. Configuring a MessageConverter on the DefaultJmsListenerContainerFactory is not sufficient. Because the MessagingMessageListenerAdapter internally always uses the MessagingMessageConverterAdapter which uses the SimpleMessageConverter internally.  ---  **Affects:** 4.1.4  **Attachments:** - [screenshot-1.png](https://jira.spring.io/secure/attachment/22744/screenshot-1.png) (_183.41 kB_)  **Issue Links:** - #17715 `@SendTo` does not get converter applied when returning Message  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/72894b26c24b1ea31c6dda4634cfde67e7dc3050","closed","type: enhancement,","spring-projects-issues","2015-04-15T02:26:11Z","2019-01-13T05:41:16Z"
"","17510","Configure reply type via JmsListenerContainerFactory [SPR-12911]","**[Stephan Oudmaijer](https://jira.spring.io/secure/ViewProfile.jspa?name=soudmaijer)** opened **[SPR-12911](https://jira.spring.io/browse/SPR-12911?redirect=false)** and commented  In our scenario we listen for messages on a queue but we want to be able to reply on a topic.  Using the `@JmsListener`(destination = ""someQueue"") with `@Reply`(""someTopic"") does not work with the DefaultMessageListenerContainerFactory out of the box. Example:  ```java @JmsListener(destination = ""someQueue"") @SendTo(""someTopic"") public Message onMessage(final Some request) {    ... } ```  Because the DMLC uses the pubSubDomain property for the DynamicDestinationResolver for both the destination resolution and the MessageListenerAdapters DynamicDestinationResolver.    ---  **Affects:** 4.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2c7d2d38a9a3499947e7a83d9f0a81e8b4c45dc3","closed","type: enhancement,","spring-projects-issues","2015-04-15T02:19:44Z","2015-05-26T01:15:32Z"
"","17317","Document how HandlerInterceptor can hook into async request timedout [SPR-12720]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-12720](https://jira.spring.io/browse/SPR-12720?redirect=false)** and commented  When async request is timed out, neither HandlerInterceptor.postHandle nor HandlerInterceptor.afterCompletion is called.  How to reproduce a problem.  1. Clone github project:  https://github.com/stepancheg/spring-webmvc-async-interceptor  interesting file is:  https://github.com/stepancheg/spring-webmvc-async-interceptor/blob/master/src/main/java/demo/InterceptorDemo.java  as you see, InterceptorDemo prints to stdout information about all interceptor events.  2. Start demo from InterceptorDemo class  3. Open  http://localhost:8080/async?s=61000  in browser. Wait for 61 second.  Stdout would be like this:  ``` preHandle /async afterConcurrentHandlingStarted /async DeferredResult.onTimeout 2015-02-16 20:56:00.829 ERROR 8128 --- [nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost]           : Exception Processing ErrorPage[errorCode=0, location=/error] java.lang.IllegalStateException: Cannot forward after response has been committed ... (stack trace skipped) returning ```  As you may see, postHandle and afterCompletion interceptors are not called.  I don't know any workaround for this problem.  I used latest available spring-boot and its default dependencies, which are:  ``` spring-boot 1.2.1.RELEASE spring 4.1.4.RELEASE tomcat 8.0.15 ```  ---  **Affects:** 4.1.4  **Issue Links:** - #17209 Document how HandlerInterceptor should differentiate an ASYNC dispatch  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/18039785aeacc3ca76c70014b11fb30923a54941","closed","type: task,","spring-projects-issues","2015-02-16T10:07:08Z","2019-01-11T21:29:08Z"
"","17419","Make ReflectionUtils.doWithMethods work on Java 8 default interface methods [SPR-12822]","**[Stefaan Neyts](https://jira.spring.io/secure/ViewProfile.jspa?name=stefaan.neyts)** opened **[SPR-12822](https://jira.spring.io/browse/SPR-12822?redirect=false)** and commented  I'd like to use the `@ServiceActivator` annotation on a Java 8 default interface method. This does not work because Spring Integration relies on the `ReflectionUtils.doWithMethods`, which uses `ReflectionUtils.getDeclaredMethods` and the last one just does this `clazz.getDeclaredMethods()`, which doesn't return those default methods on the interface.  ---  **Affects:** 4.1.5  **Reference URL:** http://stackoverflow.com/questions/29076108/spring-integration-serviceactivator-on-a-java-8-default-interface-method  **Issue Links:** - #15547 `@Bean` on Java 8 default methods in interfaces - #16501 ReflectionUtils slow down application startup on WebSphere - #18357 ReflectionUtils cache uses up a fairly big chunk of heap even - #18754 Support `@BeforeTransaction` and `@AfterTransaction` on interface default methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/192462902ef3d97c0b6684d467c7d2023ecd5be1","closed","type: enhancement,","spring-projects-issues","2015-03-16T07:00:35Z","2019-01-13T05:41:42Z"
"","17353","Changes in cache made within transaction must be visible for current transaction [SPR-12756]","**[Stas Volsky](https://jira.spring.io/secure/ViewProfile.jspa?name=stas.volsky@gmail.com)** opened **[SPR-12756](https://jira.spring.io/browse/SPR-12756?redirect=false)** and commented  As TransactionAwareCacheDecorator do actual cache operations on afterCommit phase there is incorrect behavior. Changes made in transaction are not visible to that transaction.  case: 1) begin transaction 2) call some method annotated with `@Cacheable`. 3) call another method annotated with `@CacheEvict` 4) call `@Cacheable` method one more time  expected behavior is that on step 4 cache will be empty inside current transaction and method will be executed one more time. but as changes will be applied only on transaction commit there are still cached results.  I suggest to make ThreadLocal map inside TransactionAwareCacheDecorator that will hold uncommited changes so it will be available to current transaction only. Or may be there is another solution.    ---  1 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-02-25T12:26:22Z","2019-08-02T07:38:11Z"
"","17254","TransactionAwareCacheDecorator method clear not synchronised with transaction [SPR-12653]","**[Stas Volsky](https://jira.spring.io/secure/ViewProfile.jspa?name=stas.volsky@gmail.com)** opened **[SPR-12653](https://jira.spring.io/browse/SPR-12653?redirect=false)** and commented  Method clear of TransactionAwareCacheDecorator not synchronised with transaction.  When method annotated with `@CacheEvict`(allEntries = true) called by one thread in transactional method cache clears immidiatly. but when another thread do read, old value puts in cache and not evicted then first transaction commits. So there are incorrect value in cache.  when cache evicts by key - all works fine.   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/723  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/13ccc8ede85c5b3154b5cb7e5ab26fb99024c04f, https://github.com/spring-projects/spring-framework/commit/ef95fc2f7ef001f3f1a17aae3f83387a77db91a3  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2015-01-22T03:57:27Z","2015-05-26T01:14:39Z"
"","17463","CookieGenerator.removeCookie doesnt support secure field [SPR-12865]","**[Sriram](https://jira.spring.io/secure/ViewProfile.jspa?name=sriramr03)** opened **[SPR-12865](https://jira.spring.io/browse/SPR-12865?redirect=false)** and commented  While trying to use the removeCookie API we noticed that it does not support the isSecureCookie. Is there a specific reason to not allow this feature?  Thanks!   ---  **Reference URL:** http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/CookieGenerator.html","closed","type: enhancement,","spring-projects-issues","2015-03-30T13:45:37Z","2015-05-26T01:14:42Z"
"","17600","Compile issue with SpringValidatorAdapter [SPR-13009]","**[Spase Markovski](https://jira.spring.io/secure/ViewProfile.jspa?name=berzerker)** opened **[SPR-13009](https://jira.spring.io/browse/SPR-13009?redirect=false)** and commented  SpringValidatorAdapter implements javax.validation.Validator which has two methods (in 1.1.0.Final version) which are not implemented in the SpringValidatorAdapter? Why is this class only working with 1.0.0.GA of javax.validation-api?   --- No further details from [SPR-13009](https://jira.spring.io/browse/SPR-13009?redirect=false)","closed","status: declined,","spring-projects-issues","2015-05-11T03:45:12Z","2019-01-12T16:23:19Z"
"","17755","Configuration metadata documentation [SPR-13164]","**[sonic pow](https://jira.spring.io/secure/ViewProfile.jspa?name=spuser)** opened **[SPR-13164](https://jira.spring.io/browse/SPR-13164?redirect=false)** and commented  ""The value of the id attribute refers to collaborating objects""  I think the above is not correct. Isn't it the xml inside the bean tag that refers to collaborating objects?   ---  **Affects:** 4.1.6  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-factory-metadata","closed","status: bulk-closed,","spring-projects-issues","2015-06-25T09:08:42Z","2019-01-12T02:27:15Z"
"","17817","Regression in ResponseStatusExceptionResolver: setStatus versus sendError [SPR-13226]","**[Slava Semushin](https://jira.spring.io/secure/ViewProfile.jspa?name=slava.semushin)** opened **[SPR-13226](https://jira.spring.io/browse/SPR-13226?redirect=false)** and commented  After upgrading from Spring Framework from 4.2.0.RC1 to RC2 I've got empty page instead of 404 error.  I've found out that error occurs at `ResponseStatusExceptionResolver.resolveResponseStatus()` (that was changed in [0ef8af4798222eccfa69d3e3a0c339b170e6d072](https://github.com/spring-projects/spring-framework/commit/0ef8af4798222eccfa69d3e3a0c339b170e6d072): commit during fixing #15819):  ```java 		int statusCode = responseStatus.code().value(); 		String reason = responseStatus.reason(); ... 		if (!StringUtils.hasLength(reason)) { 			response.setStatus(statusCode); 		} 		else { 			response.sendError(statusCode, reason); 		} ```  My application is throwing the custom exception that looks like this:  ```java @ResponseStatus(HttpStatus.NOT_FOUND) public class NotFoundException extends RuntimeException { } ```  When exception arrives to `ResponseStatusExceptionResolver` it turns out that it doesn't have a reason and hence instead of `sendError()`, `setStatus()` is invoked.  I see there 2 problemes: 1) I don't know why, but `setStatus()` doesn't lead to showing the error page 2) Algorithm of getting the reason may be improved by invoking `HttpStatus.getReasonPhrase()` when `ResponseStatus.reason()` is empty  This bug report addresses to last problem.  Also I'm not sure where to post my first problem: I'm using Spring Boot and there is a chance that the problem somewhere in Boot's code. So, probably, you could give me advice about it.  ---  **Affects:** 4.2 RC2  **Issue Links:** - #15818 `@ResponseStatus` documentation is incorrect (_**""is duplicated by""**_) - #15819 ResponseStatusExceptionResolver should use .setStatus with `@ResponseStatus`(code=XXX)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/80767ff6e9963761aa7e5516090fcda2c5a3bf74","closed","type: bug,","spring-projects-issues","2015-07-13T05:16:28Z","2019-01-13T05:39:52Z"
"","17462","Exception during websocket close when using StompBrokerRelay [SPR-12864]","**[slash3tc](https://jira.spring.io/secure/ViewProfile.jspa?name=slash3tc)** opened **[SPR-12864](https://jira.spring.io/browse/SPR-12864?redirect=false)** and commented  As discussed on SO, an exception occurs in the StompBrokerRelayMessageHandler during websocket close when using the StompBrokerRelay with RabbitMQ.  This doesn't appear to affect the server, but it does clog up the logs.   ---  **Reference URL:** http://stackoverflow.com/questions/29353923/spring-websocket-exception-during-close-when-using-stompbrokerrelay-rabbitmq","closed","status: declined,","spring-projects-issues","2015-03-30T11:53:26Z","2019-01-12T16:23:25Z"
"","17329","Customize STOMP ERROR frame [SPR-12732]","**[slash3tc](https://jira.spring.io/secure/ViewProfile.jspa?name=slash3tc)** opened **[SPR-12732](https://jira.spring.io/browse/SPR-12732?redirect=false)** and commented  The ability to customize which headers are present in the ERROR frame would allow for better front-end handling for error conditions that may have been triggered from ChannelInterceptors.  Currently, if an exception occurs in a channel interceptor (such as if you are attempting to control subscription events based on arbitrary logic), an ERROR frame is sent back to the client from StompSubProtocolHandler.sendErrorMessage.  The ERROR frame simply contains the throwable.getMessage() in a header which causes awkward client side handling.  Could a StompProtocolErrorHandlerStrategy be created to allow for message customization?  ---  **Affects:** 4.1.4  **Issue Links:** - #15519 Provide mechanism for tracking failed messages in STOMP protocol support - [SEC-2881](https://jira.spring.io/browse/SEC-2881) Provide an exception handling mechanism for ChannelSecurityInterceptor  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/743","closed","type: enhancement,","spring-projects-issues","2015-02-18T15:05:11Z","2019-01-11T21:28:38Z"
"","17687","Binary data in POST multipart request is unmarshalled incorrectly [SPR-13096]","**[Simone Russo](https://jira.spring.io/secure/ViewProfile.jspa?name=sr89)** opened **[SPR-13096](https://jira.spring.io/browse/SPR-13096?redirect=false)** and commented  Example server code:  ```java @RequestMapping(value = ""/"", method = RequestMethod.POST, consumes = MediaType.MULTIPART_FORM_DATA_VALUE) @ResponseStatus(value = HttpStatus.CREATED) public void addItem(    @RequestPart(""objectValue"") byte[] objectValue,    @RequestPart(""metadata"") SomeJsonDeserialisableClass metadata ) {    /// ... } ```  Example client:  ```java public void makeRequest(byte[] content, SomeJsonDeserialisableClass  metadata) {       HttpHeaders octetStreamHeader = new HttpHeaders();       octetStreamHeader.setContentType(MediaType.APPLICATION_OCTET_STREAM);       octetStreamHeader.setContentLength(content.length);        HttpHeaders jsonHeader = new HttpHeaders();       jsonHeader.setContentType(MediaType.APPLICATION_JSON);        MultiValueMap requestParts = new LinkedMultiValueMap<>();       requestParts.add(""objectValue"", new HttpEntity<>(content, octetStreamHeader));       requestParts.add(""metadata"", new HttpEntity<>(metadata, jsonHeader));        URI requestUri = //endpoint url..        HttpHeaders requestHeaders = new HttpHeaders();       requestHeaders.setContentType(MediaType.MULTIPART_FORM_DATA);        ResponseEntity response = restOperations.exchange(          requestUri,          HttpMethod.POST,          new RequestEntity<>(requestParts, requestHeaders, HttpMethod.POST, requestUri),          Void.class       );    } ```  If the byte array passed to the client method contains negative values, the byte array received by the controller method on the server side will have different contents.  This happens because:  1. In org.springframework.web.multipart.commons.CommonsFileUploadSupport, the original binary data is read as a string in the following line:  ```java value = fileItem.getString(partEncoding); ```  1. That string is then converted back into a byte array in org.springframework.web.multipart.support.RequestPartServletServerHttpRequest in this line:  ```java return new ByteArrayInputStream(paramValue.getBytes(FORM_CHARSET)); ```  Where FORM_CHARSET is hardcoded to ""UTF-8""   ---  **Affects:** 4.1.6","closed","type: bug,","spring-projects-issues","2015-06-04T02:43:29Z","2015-07-15T09:05:12Z"
"","17397","Allow use of MvcUriComponentsBuilder independent of Servlet request lifecycle [SPR-12800]","**[Simon](https://jira.spring.io/secure/ViewProfile.jspa?name=sbuettner)** opened **[SPR-12800](https://jira.spring.io/browse/SPR-12800?redirect=false)** and commented  It is a common requirement to generate links to controllers outside of an HttpServletRequest when generating E-Mails etc. Therefore it would be nice to have a way to create links which uses a configurable **baseURI** for the link generation instead of the request context path like this:  ``` private String fromStatelessMethodCall(Object invocationInfo) {   MvcUriComponentsBuilder.MethodInvocationInfo info = (MvcUriComponentsBuilder.MethodInvocationInfo) invocationInfo;   Method method = info.getControllerMethod();   String typePath = getTypeRequestMapping(method.getDeclaringClass());   String methodPath = getMethodRequestMapping(method);   String path = pathMatcher.combine(typePath, methodPath);   UriComponentsBuilder builder = UriComponentsBuilder.fromUri(baseURI).path(path);   UriComponents uriComponents = applyContributors(builder, method, info.getArgumentValues());   return uriComponents.toUriString(); } ```  ---  **Affects:** 4.1.5  **Issue Links:** - #17218 Allow customizing ""base"" path in MvcUriComponentsBuilder (e.g. path prefix for locale)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/febcd0c46d63f720ba6bf834825c9f8d1a01d167","closed","type: enhancement,","spring-projects-issues","2015-03-10T04:35:03Z","2019-01-11T22:00:44Z"
"","17946","Failed to Instantiate Java 8 Date and Time class if perform direct parameter binding [SPR-13362]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-13362](https://jira.spring.io/browse/SPR-13362?redirect=false)** and commented  Failed to Instantiate Java 8 Date and Time class if perform direct parameter binding  ``` @RestController @RequestMapping(""some_path"") public class MyController {     @RequestMapping(value = ""/my_sub_path"", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)     public void test(@DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate myDate) {       // throws org.springframework.beans.BeanInstantiationException: Failed to instantiate [java.time.LocalDate]: No default constructor found;     } } ```  There are several workaround with their own limitations  ``` @RestController @RequestMapping(""some_path"") public class MyController {     @ModelAttribute     LocalDate myDate() {         return LocalDate.now();     }      @RequestMapping(value = ""/my_sub_path"", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)     public void test(@DateTimeFormat(iso = DateTimeFormat.ISO.DATE) @ModelAttribute LocalDate myDate) {       // It could instantiate the LocalDate class, but it WILL NOT do any data binding from web parameter also called ""myDate""     } } ```  ``` @RestController @RequestMapping(""some_path"") public class MyController {     @ModelAttribute     LocalDate myDate() {         return LocalDate.now();     }      @RequestMapping(value = ""/my_sub_path"", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)     public void test(@DateTimeFormat(iso = DateTimeFormat.ISO.DATE) @RequestParam @ModelAttribute LocalDate myDate) {       // Works perfectly if explicit @RequestParam or @RequestParam(""myDate"") annotation is provided     } } ```  ``` @RestController @RequestMapping(""some_path"") public class MyController {     @RequestMapping(value = ""/my_sub_path"", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)     public void test(@DateTimeFormat(iso = DateTimeFormat.ISO.DATE) @RequestParam LocalDate myDate) {       // This will also create a LocalDate model attribute impliclity and works perfectly!!     } } ```    ---  **Affects:** 4.1.2","closed","status: declined,","spring-projects-issues","2015-08-18T00:00:05Z","2019-01-12T16:23:00Z"
"","17471","@Bean and @Value with external property file causes bean creation mis-ordering [SPR-12873]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-12873](https://jira.spring.io/browse/SPR-12873?redirect=false)** and commented  I tried to modify the Spring Security Sample to reproduce this issue. Please refer to the attachment.  ``` @Bean ServiceProperties serviceProperties(@Value(""#{casProp.casServiceUrl}"") String casServiceUrl) {   // .... } ```  I have externalized the CAS Service URL in a property file cas.properties. It could be resolved through `@Value` annotation through the property bean name called ""casProp"".  When I am using SPF <= 4.1.2, everything works fine. But the resolution failed in latest SPF version  ``` Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.security.cas.web.CasAuthenticationEntryPoint]: Factory method 'casAuthenticationEntryPoint' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serviceProperties' defined in class path resource [org/springframework/security/samples/config/SecurityConfig.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: service cannot be empty. 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:591) ~[spring-beans-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	... 27 common frames omitted Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serviceProperties' defined in class path resource [org/springframework/security/samples/config/SecurityConfig.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: service cannot be empty. ```  I suspect that SPF >= 4.1.3 has bean creation ordering issue. The `@Bean` is called prior to `@Value` in method parameter.   ---  **Affects:** 4.1.3, 4.1.4, 4.1.5, 4.1.6  **Attachments:** - [cas-sample-jc.zip](https://jira.spring.io/secure/attachment/22721/cas-sample-jc.zip) (_3.39 kB_) - [SPR-123873.zip](https://jira.spring.io/secure/attachment/22747/SPR-123873.zip) (_6.17 kB_)","closed","status: bulk-closed,","spring-projects-issues","2015-03-31T20:58:35Z","2019-01-13T20:56:55Z"
"","17222","Configuration of path mapping options for websockets via XML [SPR-12621]","**[Simon Smithson](https://jira.spring.io/secure/ViewProfile.jspa?name=smithsos)** opened **[SPR-12621](https://jira.spring.io/browse/SPR-12621?redirect=false)** and commented  #16393 added options to configure the websocket URL handler when using annotations but the XML does not appear to contain an equivalent.  ---  **Affects:** 4.1.4  **Reference URL:** #16393  **Issue Links:** - #16393 Allow configuration of path mapping options for websocket handler mapping (e.g. alwaysUseFullPath)","closed","type: enhancement,","spring-projects-issues","2015-01-13T02:38:21Z","2019-01-14T05:13:44Z"
"","17922","Spring RestTemplate with backoff policies [SPR-13336]","**[Simon Chan](https://jira.spring.io/secure/ViewProfile.jspa?name=winghin2517)** opened **[SPR-13336](https://jira.spring.io/browse/SPR-13336?redirect=false)** and commented  I'm reading up on GCM: https://developers.google.com/cloud-messaging/server  and one of the requirements is that the server needs to be able to:  * handle requests and resend them using exponential back-off.  I use Spring RestTemplate for my backend which comes from Spring Boot. There doesn't seem to be a method which I can use to set my retry policy in the docs: http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html  Also when I googled, I found the RetryTemplate, but it is part of Spring Batch and doesn't extend RestTemplate which makes me think that it is not supposed to be used for Rest operations, but rather Spring Batch operations like processing large amount of transactions: http://docs.spring.io/spring-batch/2.1.x/apidocs/org/springframework/batch/retry/support/RetryTemplate.html  Would you be able to build support for backoff policies into the RestTemplate going forward?   ---  **Affects:** 4.2 GA  **Reference URL:** http://stackoverflow.com/questions/31906419/spring-resttemplate-exponential-backoff-retry-policy?noredirect=1#comment51741491_31906419  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-08-10T02:53:15Z","2018-12-05T18:12:13Z"
"","18008","Spring response handler returning abstract object drops unique fields from concrete class [SPR-13429]","**[Simen Bekkhus](https://jira.spring.io/secure/ViewProfile.jspa?name=simenb)** opened **[SPR-13429](https://jira.spring.io/browse/SPR-13429?redirect=false)** and commented  Not really a good title...  We have a `@Controller` containing a method returning an abstract object (Foo). Another method returns an instance Bar (Bar extends Foo), and this is returned from the request-handler.  The bug is that the fields defined on Bar but not on Foo is dropped during serialization to JSON.  If I return List\ instead of just Bar, it works (all fields are correctly serialized).  A workaround for us now is to return the correct type from the request-handler, manually casting it from Foo to Bar.  Manually calling new ObjectMapper().writeValueAsString on the object in the controller produces the correct JSON, but whatever Spring does to it does not.  Using Jackson 2.6.1  EDIT: Using Spring 4.2.1 fixes the problem. Sorry about the noise!  ---  **Affects:** 4.2 GA  **Issue Links:** - #17903 Jackson 2.6: message converter should use type only for collections","closed","type: bug,","spring-projects-issues","2015-09-04T12:05:33Z","2019-01-11T17:10:55Z"
"","17344","Specified MVC resource at root level not considered ""under location"" [SPR-12747]","**[Silvio Assunção Junior](https://jira.spring.io/secure/ViewProfile.jspa?name=assuncao.s)** opened **[SPR-12747](https://jira.spring.io/browse/SPR-12747?redirect=false)** and commented  I use now Spring 3.2.2 and I'm upgrading to 3.2.13 but I found a error on ResourceHttpRequestHandler  I configured my MVC resources example:   When I request the favicon (http://localhost:8080/favicon.ico) I receive 404 (Not found). I debug the ResourceHttpRequestHandler and see that in this version has a method that in old version don't have ""isResourceUnderLocation""  This method have a validation that I think is wrong if (!resourcePath.startsWith(locationPath)) { return false; }  The correct in this case is locationPath.startsWith(resourcePath) because before this validation we have this code bellow locationPath = (locationPath.endsWith(""/"") || !StringUtils.hasLength(locationPath) ? locationPath : locationPath + ""/"");   ---  **Affects:** 3.2.13, 4.1.4  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","type: bug,","spring-projects-issues","2015-02-23T11:00:06Z","2015-03-25T09:42:34Z"
"","17969","Method lookup doesn't allow for overriding definitions in parent bean [SPR-13388]","**[Sidi Mohamed EL AATIFI](https://jira.spring.io/secure/ViewProfile.jspa?name=smelaatifi)** opened **[SPR-13388](https://jira.spring.io/browse/SPR-13388?redirect=false)** and commented  Let's take an example :  we want to override a lookup method already defined in a parent bean. This means that both MethodOverride will have the same method name and same signature, in nutshell both will matches in the interceptor.  Spring keep track of lookup-method and replaced-method in: org.springframework.beans.factory.support.MethodOverrides  but this class use a HashSet which do not guarantee the order. When there is two MethodOverride that matches the invoked method but have different bean name they will always take the first MethodOverride that matches even if it's the parent.  The quick fix for this issue is to use order-wise Set (LinkedHashSet) and return the last MethodOverride that matches.  ---  **Affects:** 4.2 GA  **Attachments:** - [App.java](https://jira.spring.io/secure/attachment/22993/App.java) (_495 bytes_) - [beans.xml](https://jira.spring.io/secure/attachment/22991/beans.xml) (_1.02 kB_) - [Greeter.java](https://jira.spring.io/secure/attachment/22992/Greeter.java) (_285 bytes_) - [MethodOverrides.java](https://jira.spring.io/secure/attachment/22994/MethodOverrides.java) (_1.20 kB_)  **Issue Links:** - #12998 Non-deterministic behaviour of method injection  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/74e6213bafd70cc7727a2b7ac91b5d9f3bf5011f","closed","type: enhancement,","spring-projects-issues","2015-08-24T06:03:35Z","2019-01-11T18:18:54Z"
"","17918","Handling HttpMediaTypeNotAcceptableException by writing error message to the response body throws same exception again for error message. [SPR-13333]","**[Shiv Veeram](https://jira.spring.io/secure/ViewProfile.jspa?name=shivaveeram)** opened **[SPR-13333](https://jira.spring.io/browse/SPR-13333?redirect=false)** and commented  My class extends ResponseEntityExceptionHandler annotated with ControllerAdvice and have override the protected method, so all the response entity type exceptions can be written as error message. Spring message converter then resolves content type to application/json;charset=UTF-8 or application/*+json;charset=UTF-8 based on return value( my error message object in this case) and compares with the accept header type (application/xml) and throws the HttpMediaTypeNotAcceptableException again when writing to the response, but this is exactly something we are trying to communicate to the client using error message. All the other exception defined in the base class transforms to error message just fine. So here the question is how do I make the client to accept my response in case of error message ? Let me know if you need more details.  ```java @ControllerAdvice     public class RestExceptionHandler extends ResponseEntityExceptionHandler {       @Override       protected ResponseEntity handleExceptionInternal(Exception ex, Object body,           HttpHeaders headers, HttpStatus status, WebRequest request) {           if (body == null)            body = new ValidationError(ex.getMessage(), ErrorType.OTH);           headers.setContentType(MediaType.APPLICATION_JSON);         return ResponseEntity.status(status).headers(headers).body(body);       }     } ```    --- No further details from [SPR-13333](https://jira.spring.io/browse/SPR-13333?redirect=false)","closed","status: declined,","spring-projects-issues","2015-08-08T11:18:56Z","2019-01-12T16:23:04Z"
"","17864","Not able to unit test validations using MockMVC [SPR-13273]","**[Shailesh Vaishampayan](https://jira.spring.io/secure/ViewProfile.jspa?name=shaileshv)** opened **[SPR-13273](https://jira.spring.io/browse/SPR-13273?redirect=false)** and commented  I am starting out on using `MockMvc`, and I don't understand why my validations (javax and hibernate) do not execute when I run my unit test.  Here is the summary :  1. I have a mvc controller annotated with `@RestController`. This controller has a method to delete resource.  uri to delete resource is `/myresources/{resourceId}`. I have given context relative url. This method accepts the Path Parameter in `resourceId` parameter annotated with `@PathParam`. Also this parameter is annotated with two other annotations for validating the path parameter.    1. `@Pattern` which is a javax.validation annotation which specifies following pattern:       `regexp=\[0-9\]{1,12}` to accept only 1 to 12 digits as input.    2. it has `@NotBlank` validation which is org.hibernate validation to check if its not empty.  I am building **standalone** `MockMvc` setup and using the `perform` method to call the url with path parameter.  Should it not preempt the call by carrying out validation so that it doesn't reach my method?  In fact I receive the NumberFormatException in my deleteResource method. I convert Path Parameter resourceId which is a String, into Integer in my deleteResource method..Now if I send resourceId as something which cannot be converted to Integer (e.g. abcd) instead of regular integer it throws NumberFormatException. However it should not reach inside my method  where it throws NumberFormatException.(rather it happens at the first line itself where I convert String into Integer)  if validations are executed as it would pre-empt the call and should return response which indicate validation errors.  If yes, why is it not working? If no, is this possible in anyway because I want to write a unit test for each of the validations?  I found similar issue on [Stack Overflow](http://stackoverflow.com/questions/27106298/mock-mvc-javax-validation-test).  ---  **Reference URL:** http://stackoverflow.com/questions/27106298/mock-mvc-javax-validation-test","closed","type: enhancement,","spring-projects-issues","2015-07-24T04:49:48Z","2019-01-13T20:52:44Z"
"","17320","ServletUriComponentsBuilder#initFromRequest can cause NPE [SPR-12723]","**[Seth Katzman](https://jira.spring.io/secure/ViewProfile.jspa?name=seppyk)** opened **[SPR-12723](https://jira.spring.io/browse/SPR-12723?redirect=false)** and commented  When using ServletUriComponentsBuilder.fromCurrentServletMapping() in a test environment (and probably some others), a NullPointerException can occur in method initFromRequest(HttpServletRequest request) on line 147.  Specifically, if the HTTP servlet request returns a null scheme value, a NullPointerException can occur on the following line...  ``` if (scheme.equals(""http"") && port != 80 || scheme.equals(""https"") && port != 443) { ```  The variable names is being compared for equality to the constant string which leads to an NPE.  This should either be reversed (""http"".equals(scheme) / ""https"".equals(scheme)) or preconditions should check for this scenario earlier in the code branching.  The partial stack trace as follows:  ``` at org.springframework.web.servlet.support.ServletUriComponentsBuilder.initFromRequest(ServletUriComponentsBuilder.java:147) at org.springframework.web.servlet.support.ServletUriComponentsBuilder.fromContextPath(ServletUriComponentsBuilder.java:68) at org.springframework.web.servlet.support.ServletUriComponentsBuilder.fromServletMapping(ServletUriComponentsBuilder.java:83) at org.springframework.web.servlet.support.ServletUriComponentsBuilder.fromCurrentServletMapping(ServletUriComponentsBuilder.java:182) at c.b.c.r.a.R.g(R.java:60) ... ```    ---  **Affects:** 3.2.13, 4.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/61cc3b5bfff7d0f4c8025470b1a84f778a758601, https://github.com/spring-projects/spring-framework/commit/3ed24bca20bded0b8a957d4d724d310c9680a33a, https://github.com/spring-projects/spring-framework/commit/2a240b0dc8d917a4cadf89b35d732bed1dce4ce0  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","type: bug,","spring-projects-issues","2015-02-17T08:02:19Z","2015-02-20T04:13:15Z"
"","17882","onCompletion SseEmitter callback never gets called [SPR-13292]","**[Sergi Almar](https://jira.spring.io/secure/ViewProfile.jspa?name=salmar)** opened **[SPR-13292](https://jira.spring.io/browse/SPR-13292?redirect=false)** and commented  onCompletion() is supposed to be called when the async request is complete, but it never gets called. This makes detecting disconnects impossible, dealing to exceptions being thrown when sending new events as the stream is already closed.  Happens on Tomcat, Jetty and Undertow.   ---  **Affects:** 4.2 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/27cd87926ac57208996bf30d2e6c57a23bc626e7  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2015-07-29T23:00:23Z","2015-07-31T02:39:21Z"
"","17422","Support POJO programming model for TestNG in the TestContext framework [SPR-12825]","**[Sergey Krasilnikov](https://jira.spring.io/secure/ViewProfile.jspa?name=illapikov)** opened **[SPR-12825](https://jira.spring.io/browse/SPR-12825?redirect=false)** and commented  #### Status Quo  A _POJO programming model_ for tests implies that test classes are not required to implement any particular interface or extend any particular classes. Instead, tests are instrumented via annotations or services discovered via a service locator, etc.  With JUnit, it possible to write POJO test classes by specifying the `SpringJUnit4ClassRunner` via JUnit's `@RunWith` annotation, as follows:  ```java @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(""/testApplicationContext.xml"") public class TestClass {} ```  For TestNG, however, it is required that one of the following is true:  1. the test class extends `AbstractTestNGSpringContextTests` or `AbstractTransactionalTestNGSpringContextTests`. 2. the test class instruments itself with Spring's `TestContextManager` analogous to what `AbstractTestNGSpringContextTests` does.  For example, to use TestNG with the _Spring TestContext Framework_, the test class can extend an abstract base class, as follows:  ```java @ContextConfiguration(""/testApplicationContext.xml"") public class TestClass extends AbstractTestNGSpringContextTests {} ```  The lacking support for a POJO programming model with TestNG becomes cumbersome if you have a base class with common methods for both JUnit and TestNG test classes.  #### Proposal  Introduce support for a POJO programming model for TestNG in the TestContext framework -- for example, via custom TestNG listeners, custom extensions to TestNG internals, plug-ins configured via `ServiceLoader`, etc.   ---  **Affects:** 3.0 GA","closed","status: bulk-closed,","spring-projects-issues","2015-03-17T04:04:49Z","2019-01-12T03:29:43Z"
"","17393","Spring MVC can't bind java.util.List like java.util.Optional [SPR-12796]","**[Seiji Kawakami](https://jira.spring.io/secure/ViewProfile.jspa?name=haljik)** opened **[SPR-12796](https://jira.spring.io/browse/SPR-12796?redirect=false)** and commented  I tried on Spring 4.1.5.  java.util.Optional that can be in place of `@RequestParam`(value=""foo"", required=false) .  but List type is not.  I hope binding java.util.List like java.util.Optional. as below when java.util.Optional parameter is nothing then bound Optional.empty() when java.util.List parameters are nothing then bound Collections.emptyList()  ```java @RestController public class App {      @RequestMapping(""/"")      public Foo entry(@RequestParam(""bars"") List bars) {            //when no ""bars"" found in request parameters            assert bars.isEmpty();            ...      } } ```    ---  **Affects:** 4.1.5  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2015-03-08T06:37:50Z","2018-11-30T21:44:47Z"
"","17205","Don't use Exception for normal behavior in org.springframework.core.annotation.AnnotationUtils.getValue [SPR-12604]","**[Sebastian Dietrich](https://jira.spring.io/secure/ViewProfile.jspa?name=sebastian.dietrich)** opened **[SPR-12604](https://jira.spring.io/browse/SPR-12604?redirect=false)** and commented  If annotation is null this method throws a NullPointerException and catches it to return null. This method is called frequently with annotation==null - at least in my case (using spring-data to findById)  Please rewrite it to: public static Object getValue(Annotation annotation, String attributeName) { if (annotation == null) return null; try { Method method = annotation.annotationType().getDeclaredMethod(attributeName); ReflectionUtils.makeAccessible(method); return method.invoke(annotation); } catch (Exception ex) { return null; } }  here is the end of the corresponding stack: AnnotationUtils.getValue(Annotation, String) line: 642 AnnotationUtils.getValue(Annotation) line: 630	 JpaQueryMethod.getLockModeType() line: 164	 PartTreeJpaQuery(AbstractJpaQuery).applyLockMode(Query, JpaQueryMethod) line: 155	 PartTreeJpaQuery(AbstractJpaQuery).createQuery(Object[]) line: 164	 JpaQueryExecution$SingleEntityExecution.doExecute(AbstractJpaQuery, Object[]) line: 202	 JpaQueryExecution$SingleEntityExecution(JpaQueryExecution).execute(AbstractJpaQuery, Object[]) line: 74	 ...   ---  **Affects:** 4.0.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a7975c685dd189939b9422c16736ff888408d544, https://github.com/spring-projects/spring-framework/commit/0ddf8dde128a1904bfe5af30817836ac09e07f1c","closed","type: enhancement,","spring-projects-issues","2015-01-08T13:05:20Z","2015-02-20T04:13:17Z"
"","17909","FlashAttributes for bindingresult replaced in redirected model [SPR-13324]","**[Sean Hinkley](https://jira.spring.io/secure/ViewProfile.jspa?name=seanhinkley)** opened **[SPR-13324](https://jira.spring.io/browse/SPR-13324?redirect=false)** and commented  When implementing handlers following post / redirect / get, BindingResult set in the POST mapping and assigned as flash attribute is removed prior to GET mapping.  Within the GET request, It looks like form objects and their BindingResults are removed from the model and readded: https://github.com/spring-projects/spring-framework/blob/4.1.x/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java#L119-L120  Prior to this point, the flash attribute is available in the model.  If the model already contains a BindingResult for a command object / form, could it be kept?   ---  **Affects:** 4.1.5  **Reference URL:** https://gist.github.com/seanhinkley/795ec06dbfbec909a5b6  1 votes, 4 watchers","closed","status: declined,","spring-projects-issues","2015-08-06T08:33:09Z","2019-01-12T16:23:05Z"
"","17952","Issue with Java 1.6 Compatibility using Tomcat & gradle [SPR-13368]","**[Sathish Kumar Thiyagarajan](https://jira.spring.io/secure/ViewProfile.jspa?name=sathishk)** opened **[SPR-13368](https://jira.spring.io/browse/SPR-13368?redirect=false)** and commented  As per the documentation http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#_use_tomcat_7_with_gradle We shall enforce tomcat version for Spring Boot. However with the latest version (1.2.5.RELEASE) it seems this property is ignored  **Steps:** Unzip the contents of **spring-java6-issue.zip** run gradlew clean build run  java -jar build\libs\java6spring-1.0-SNAPSHOT.jar  **Expected Result** Spring Boot Application should start with **tomcat version 7.0.59**  **Actual Result:** Spring Boot Application started with **tomcat version 8.0.23** (Ref: SpringTomcat8.PNG)  **Note** 1. If i change the build.gradle to use **+old version of Spring Boot, 1.1.12.RELEASE+**, Then +**tomcat version is considered properly**+. 2. Also, There are **+no issues If i use maven+** to build the application.    ---  **Attachments:** - [spring-java6-issue.zip](https://jira.spring.io/secure/attachment/22986/spring-java6-issue.zip) (_80.89 kB_) - [SpringTomcat8.PNG](https://jira.spring.io/secure/attachment/22987/SpringTomcat8.PNG) (_26.64 kB_)","closed","in: core,","spring-projects-issues","2015-08-19T03:32:11Z","2019-01-12T05:23:56Z"
"","17891","No dedicated 4.2 versions of spring-aop, spring-oxm, spring-tx xsd [SPR-13300]","**[Santhosh Manickam](https://jira.spring.io/secure/ViewProfile.jspa?name=santhoshm)** opened **[SPR-13300](https://jira.spring.io/browse/SPR-13300?redirect=false)** and commented  Spring TX xsd file is not accessible. Can't access following URLs:  http://www.springframework.org/schema/tx/spring-tx.xsd   ---  **Affects:** 4.2 GA  **Reference URL:** http://www.springframework.org/schema/tx/spring-tx.xsd  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3f39d52570b97d31b9ab7cf9d118bbbaef0fd3e  0 votes, 5 watchers","closed","type: task,","spring-projects-issues","2015-07-31T20:00:27Z","2015-09-01T11:38:23Z"
"","17989","Cannot cache bean definition on JBoss 7 AS due to JBoss ModuleClassLoader [SPR-13410]","**[Sammy Chu](https://jira.spring.io/secure/ViewProfile.jspa?name=sammychu)** opened **[SPR-13410](https://jira.spring.io/browse/SPR-13410?redirect=false)** and commented  In Spring 3.2.X it use ClassUtils.isCacheSafe() to check if the the bean definition can be cache or not to boot the autowiring/ bean lookup performance, but in JBoss 7 cannot enjoy this benefit due to the JBoss ModuleClassLoader. Considering the following deployment:  ``` myear.ear  |- mywar.war  |- myejb.jar  |- lib      |- commonlib.jar ```  And using ContextLoaderListener in the mywar to start the ApplicationContext. Since JBoss using ModuleClassLoader, for the above deployment, each sub-deployment is in a separated classloader: lib/commonlib.jar (classloader from module EAR -> parent is booststrap classloader) myejb.jar (classloader from module EJB -> parent is booststrap classloader) mywar.war (classloader from module WAR -> parent is booststrap classloader)  The application context stated by the ContextLoaderListener is loaded by module WAR classloader, so the bean managed by the application context is loaded by module WAR classloader, too. The ClassUtils.isCacheSafe() will always return false for the classes located in the lib/commonlib.jar, resulting the bean definition not cached.  In our real deployment, we place all of the library jars under the EAR/lib folder, resulting all of the bean definition not being cached.   ---  **Affects:** 3.2.10","closed","status: bulk-closed,","spring-projects-issues","2015-08-31T04:08:23Z","2019-01-12T00:16:01Z"
"","17985","Support transitive implicit attribute aliases with @AliasFor [SPR-13405]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13405](https://jira.spring.io/browse/SPR-13405?redirect=false)** and commented  This issue picks up where #17929 left off by adding support for _transitive_ implicit aliases configured via `@AliasFor`.  See the description of #17929 for details on _transitive implicit aliases_.  ---  **Affects:** 4.2 GA  **Issue Links:** - #17929 Support implicit attribute aliases with `@AliasFor` (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2a6716d38051cb8fa8b4d09174a01b77ad9cda8a, https://github.com/spring-projects/spring-framework/commit/9b1178cf71e7dcc78d59653e70c88db3a1880924, https://github.com/spring-projects/spring-framework/commit/8e14520bf5b9183f7e32bb705566a19f3c1ee540","closed","type: enhancement,","spring-projects-issues","2015-08-28T17:24:10Z","2019-01-13T05:36:28Z"
"","17957","Regression: SpringHandlerInstantiator breaks stand-alone support in the MVC Test framework [SPR-13375]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13375](https://jira.spring.io/browse/SPR-13375?redirect=false)** and commented  The `SpringHandlerInstantiator` introduced in #15394 always attempts to create new beans using its `AutowireCapableBeanFactory`. In the case of a `StubWebApplicationContext`, however, this results in an `UnsupportedOperationException` being thrown.  This behavior breaks support for JSON serialization in conjunction with the default configuration of the `MockMvcBuilders.standaloneSetup()` support in the Spring MVC Test framework since it internally uses a `StubWebApplicationContext`.  See the linked discussion on Stack Overflow for details.  #### Analysis  The following code in `WebMvcConfigurationSupport.addDefaultHttpMessageConverters()` is what _causes_ this behavior:  ```java if (jackson2Present) { 	ObjectMapper objectMapper = Jackson2ObjectMapperBuilder.json().applicationContext(this.applicationContext).build(); 	messageConverters.add(new MappingJackson2HttpMessageConverter(objectMapper)); } ```  The fact that it supplies the `ApplicationContext` results in a `SpringHandlerInstantiator` being created in `Jackson2ObjectMapperBuilder.configure()`, even though a `SpringHandlerInstantiator` makes no sense for the stand-alone test setup in MVC Test.  ---  **Affects:** 4.1.3  **Reference URL:** http://stackoverflow.com/questions/32101611/spring-mockmvc-unsupportedoperationexception-after-upgrading-to-new-spring-versi/32140898  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/028ace9149efd00e9d4f6f5f60692bca8715cffc  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)  0 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2015-08-21T06:05:08Z","2019-01-11T18:19:08Z"
"","17954","Log connection URL for embedded databases [SPR-13370]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13370](https://jira.spring.io/browse/SPR-13370?redirect=false)** and commented  #### Status Quo  `EmbeddedDatabaseFactory` currently logs the name of an embedded database just before it is created; however, the name alone is not sufficient for connecting to the database via external tools.  #### Deliverables  1. Log the complete connection URL for embedded databases.    ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d54aab233859886ea987adcd733a200710a09c95","closed","type: enhancement,","spring-projects-issues","2015-08-19T13:13:51Z","2015-09-01T11:38:22Z"
"","17936","Introduce JsonPath matchers for empty and non-empty content [SPR-13352]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13352](https://jira.spring.io/browse/SPR-13352?redirect=false)** and commented  This issue picks up where #17935 left off.  ---  **Affects:** 3.2 GA  **Issue Links:** - #17935 JsonPath assertions fail to differentiate between definite and indefinite results in checks for existence (_**""depends on""**_) - #17905 Introduce additional JsonPath matchers in Spring MVC Test - #18262 Why MockMvcResultMatchers has not a xpath method with org.hamcrest.Matcher?  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7a17abe4480fff9bd2ed4f960176c5deae4798aa","closed","type: enhancement,","spring-projects-issues","2015-08-14T13:48:32Z","2019-01-11T18:20:38Z"
"","17935","JsonPath assertions fail to differentiate between definite and indefinite results in checks for existence [SPR-13351]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13351](https://jira.spring.io/browse/SPR-13351?redirect=false)** and commented  #### Status Quo  In `JsonPathExpectationsHelper`, the `exists()` method asserts that the evaluated `JsonPath` expression results in a value; however, if the value is an array the `exists()` method throws an `AssertionError` if the array exists but is _empty_. Similarly, the `doesNotExist()` method does **not** throw an `AssertionError` if an array exists but is empty.  This specialized treatment for arrays is illogical and inconsistent with the treatment of empty strings and empty maps.  #### Analysis  It turns out that existing specialized treatment of arrays is a result of the fact that the `JsonPath` library always returns an empty array if the path is an _indefinite_ path that does not evaluate to a specific result. This can be the case when a JsonPath expression uses a filter to select results based on a predicate for which there is no match in the content. Consult the discussion on [what is returned when](https://github.com/jayway/JsonPath#what-is-returned-when) in the JsonPath documentation for details.  #### Deliverables  1. [x] Ensure that empty arrays are considered _existent_ when the JsonPath is _definite_ but _nonexistent_ when the JsonPath is _indefinite_, in line with current support for empty strings and empty maps. 2. [ ] Introduce a new mechanism for asserting that an array, map, or string is _empty_.    - addressed in #17936  ---  **Affects:** 3.2 GA  **Issue Links:** - #17936 Introduce JsonPath matchers for empty and non-empty content (_**""is depended on by""**_) - #17905 Introduce additional JsonPath matchers in Spring MVC Test  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/07bb0378b9e6ac3097d8a121d17b74fa9fb0596b","closed","type: bug,","spring-projects-issues","2015-08-14T09:16:31Z","2019-01-13T20:50:12Z"
"","17929","Support implicit attribute aliases with @AliasFor [SPR-13345]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13345](https://jira.spring.io/browse/SPR-13345?redirect=false)** and commented  #### Status Quo  Spring Framework 4.2 introduced support for explicit annotation attribute overrides in meta-annotations via `@AliasFor`.  For example, the following `@SingleAliasConfig` works as expected. `xmlFiles` functions as an attribute override for `locations` in `@ContextConfiguration`.  ```java @ContextConfiguration public @interface SingleAliasConfig {     @AliasFor(annotation = ContextConfiguration.class, attribute = ""locations"")    String[] xmlFiles() default {};     // ... } ```  However, the following `@ImplicitAliasesConfig` does **not** work as expected. One would intuitively expect that any one of `xmlFiles`, `groovyScripts`, or `value` could be used as an attribute override for `locations` in `@ContextConfiguration`, but at runtime, we don't actually know which one of the aliases will be ultimately used. In other words, one would expect `xmlFiles`, `groovyScripts`, and `value` to be considered _implicit aliases_ for each other.  The reason is that the merge algorithm in `MergedAnnotationAttributesProcessor` in `AnnotatedElementUtils` overwrites previous aliased values with subsequent aliased values, thereby letting the last one win -- which happens silently and is unintuitive.  ```java @ContextConfiguration public @interface ImplicitAliasesConfig {     @AliasFor(annotation = ContextConfiguration.class, attribute = ""locations"")    String[] xmlFiles() default {};     @AliasFor(annotation = ContextConfiguration.class, attribute = ""locations"")    String[] groovyScripts() default {};     @AliasFor(annotation = ContextConfiguration.class, attribute = ""locations"")    String[] value() default {};     // ... } ```  Similarly, the following declaration of _transitive implicit aliases_ is not supported: `xml` and `groovy` will not be considered as _implicit aliases_ for each other even though they override attributes in `@ImplicitAliasesConfig` which _are_ implicit aliases for each other.  ```java @ImplicitAliasesConfig public @interface TransitiveImplicitAliasesConfig {     @AliasFor(annotation = ImplicitAliasesConfig.class, attribute = ""xmlFiles"")    String[] xml() default {};     @AliasFor(annotation = ImplicitAliasesConfig.class, attribute = ""groovyScripts"")    String[] groovy() default {};     // ... } ```  ---  #### Deliverables  1. [x] Support _implicit aliases_ configured via `@AliasFor` for the same attribute in a meta-annotation. 2. [ ] Support _transitive implicit aliases_.    - Covered by #17985.  ---  **Affects:** 4.2 GA  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/3635  **Issue Links:** - #17910 `@AliasFor` potentially overrides attribute in wrong meta-annotation (_**""depends on""**_) - #17985 Support transitive implicit attribute aliases with `@AliasFor` (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2a6716d38051cb8fa8b4d09174a01b77ad9cda8a, https://github.com/spring-projects/spring-framework/commit/d40a35ba5c65e30f2c0a609b4e3ccf5ad92ec90c, https://github.com/spring-projects/spring-framework/commit/3eacb837c2c40870647c88fb58c66a57d72ba283","closed","type: enhancement,","spring-projects-issues","2015-08-12T11:29:00Z","2019-01-13T05:39:13Z"
"","17923","AnnotationUtils fails to synthesize nested maps into annotations [SPR-13338]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13338](https://jira.spring.io/browse/SPR-13338?redirect=false)** and commented  #### Status Quo  The Javadoc for the `synthesizeAnnotation(Map, Class, AnnotatedElement)` method in `AnnotationUtils` states the following:  > Synthesize an annotation from the supplied map of annotation attributes by wrapping the map in a dynamic proxy that implements an annotation of the specified `annotationType` and transparently enforces attribute alias semantics for annotation attributes that are annotated with `@AliasFor`. >  > The supplied map must contain a key-value pair for every attribute defined in the supplied `annotationType` that is not aliased or does not have a default value. >  > Note that `AnnotationAttributes` is a specialized type of Map that is an ideal candidate for this method's `attributes` argument.  Note that the Javadoc says that key-value pairs must be present, but it does not say that there are any limitations on the types of values that are permitted. The Javadoc also explicitly states that `AnnotationAttributes` is an ideal candidate for synthesis.  However, if the map of annotation attributes was created manually (with nested maps instead of annotations) or with one of the `getAnnotationAttributes(..)` variants with `nestedAnnotationsAsMap` set to `true`, an exception is thrown during synthesis since a map or array or maps is not compatible with an annotation or array of annotations, respectively.  #### Deliverables  1. [x] Ensure that a nested map or nested array of maps is properly synthesized into an annotation or array of annotations when synthesizing the enclosing map into an annotation.    ---  **Affects:** 4.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f17173f6d5fb167db1c0a6905c23e52caace939b","closed","in: core,","spring-projects-issues","2015-08-10T05:38:04Z","2015-09-01T11:38:23Z"
"","17921","AnnotationUtils fails to throw exception if meta-annotation is not present [SPR-13335]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13335](https://jira.spring.io/browse/SPR-13335?redirect=false)** and commented  #### Status Quo  It is a user configuration error if an alias is configured via `@AliasFor` for an attribute in a meta-annotation and the meta-annotation is not _meta-present_. However, the support for validating the configuration of `@AliasFor` in `AnnotationUtils` currently silently ignores such errors.  #### Deliverables  1. [x] Ensure that an exception is thrown whenever a required meta-annotation is not _present_ or _meta-present_ on an annotation that declares an alias for an attribute in the meta-annotation.    ---  **Affects:** 4.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/82890361653c968299c7afc0d3a654395d6a1383","closed","in: core,","spring-projects-issues","2015-08-09T10:08:01Z","2015-09-01T11:38:22Z"
"","17910","@AliasFor potentially overrides attribute in wrong meta-annotation [SPR-13325]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13325](https://jira.spring.io/browse/SPR-13325?redirect=false)** and commented  #### Status Quo  Spring Framework 4.2 introduced support for explicit attribute overrides in meta-annotations via the `@AliasFor` annotation.  For example, the following `@MyTestConfig` annotation uses `@AliasFor` to explicitly override the `locations` attribute in `@ContextConfiguration`, effectively renaming it.  ```java @ContextConfiguration public @interface MyTestConfig {      @AliasFor(annotation = ContextConfiguration.class, attribute = ""locations"")     String[] xmlFiles();  } ```  `@MyTestConfig` works fine as long as there is not more than one meta-annotation with an attribute named `locations`.  In contrast, the following currently does not work.  ```java @ContextConfiguration @TestPropertySource(locations = ""test.properties"") public @interface MyCombinedTestConfig {      @AliasFor(annotation = ContextConfiguration.class, attribute = ""locations"")     String[] xmlFiles(); } ```  ```java @MyCombinedTestConfig(xmlFiles = ""test.xml"") public class MyTests {     // ... } ```  The reason is that the `getAliasedAttributeName(Method attribute, Class targetAnnotationType)` method in `AnnotationUtils` does not verify that the supplied `attribute` actually declares an alias for the `targetAnnotationType`. Consequently, a lookup for the `locations` attribute in `@TestPropertySource` on `MyTests` will incorrectly return `""test.xml""` instead of `""test.properties""`.  #### Deliverables  1. Ensure that an explicit annotation attribute override configured via `@AliasFor` is only applied to the configured target meta-annotation.  ---  **Affects:** 4.2 GA  **Issue Links:** - #17929 Support implicit attribute aliases with `@AliasFor` (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e20b47c3bc424ac4fd30dd101e730c280681c3f1, https://github.com/spring-projects/spring-framework/commit/c8d604bf053c6359a3a703f2688daf433494b16c","closed","in: core,","spring-projects-issues","2015-08-06T08:48:27Z","2019-01-13T05:39:16Z"
"","17879","Introduce 'value' alias for 'attribute' in @AliasFor [SPR-13289]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13289](https://jira.spring.io/browse/SPR-13289?redirect=false)** and commented  #### Status Quo  #16137 introduced support for annotation attribute aliases via `@AliasFor`. For example, this support allows `@ContextConfiguration` from the `spring-test` module to declare aliases as follows:  ```java public @interface ContextConfiguration {       @AliasFor(attribute = ""locations"")      String[] value() default {};       @AliasFor(attribute = ""value"")      String[] locations() default {};      // ... } ```  For greater readability, it would be beneficial to be able to omit the `attribute = ""...""` declaration by providing a `value` alias for `attribute`.  #### Deliverables  1. Introduce a `value` alias for `attribute` in `@AliasFor`.  ---  **Affects:** 4.2 RC1  **Issue Links:** - #16137 Introduce unified support for declaring and looking up annotation attribute aliases (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/725292081e804ce33ac9848796f50e30e793fd25, https://github.com/spring-projects/spring-framework/commit/1c8ac2b2aa573b776b7ff5e01a403b46cb074295","closed","type: enhancement,","spring-projects-issues","2015-07-29T06:21:14Z","2019-01-11T18:02:23Z"
"","17870","Support custom base scope annotation type for @Bean methods [SPR-13280]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13280](https://jira.spring.io/browse/SPR-13280?redirect=false)** and commented  #### Status Quo  `AnnotationScopeMetadataResolver` supports custom scope annotation types via its `scopeAnnotationType` property, and `ConfigurationClassBeanDefinitionReader` internally uses an `AnnotationScopeMetadataResolver` for certain uses cases (see its `scopeMetadataResolver` field).  However, `ConfigurationClassBeanDefinitionReader` does not consistently support custom scope annotation types for all use cases. For example, `ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForBeanMethod()` hard codes the scope annotation type to `org.springframework.context.annotation.Scope`.  ---  #### Deliverables  1. Determine why the scope annotation type in `ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForBeanMethod()` is hard coded to `org.springframework.context.annotation.Scope`.    - See `TODO` in `ConfigurationClassBeanDefinitionReader`. 2. Support custom scope annotation types consistently throughout `ConfigurationClassBeanDefinitionReader`.  ---  **Affects:** 4.0 GA  **Issue Links:** - #17974 ScopedProxyMode resolution for custom scope meta-annotation not working with `@Bean` methods (with ASM-based scanning)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f0ac2784a4e9602a06bc91c3368f7cf423fc52dc, https://github.com/spring-projects/spring-framework/commit/aae0bd2fb43092bd3e1bc5c3296265e760b4fc43  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2015-07-25T12:45:15Z","2019-01-14T04:42:25Z"
"","17372","Introduce @Commit alias for @Rollback(false) [SPR-13279]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13279](https://jira.spring.io/browse/SPR-13279?redirect=false)** and commented  #### Status Quo  Since _test-managed transactions_ are rolled back by default in the _Spring TestContext Framework_, the primary usage of `@Rollback` is to indicate that transactions should be committed instead of rolled back. This is achieved via `@Rollback(false)`.  Since the use of `@Rollback(false)` is so common, it would be beneficial to developers to introduce a new `@Commit` annotation that more clearly documents the intent of the code while retaining the semantics.  ---  #### Deliverables  1. Introduce `@Commit` alias for `@Rollback(false)`  ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d6bdfcaa6e29ef40ead5dbbfd3e2bf6d6373f026","closed","type: enhancement,","spring-projects-issues","2015-07-25T11:35:36Z","2019-01-13T05:41:57Z"
"","17868","Deprecate @TransactionConfiguration in favor of @Rollback and @Transactional qualifiers [SPR-13277]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13277](https://jira.spring.io/browse/SPR-13277?redirect=false)** and commented  Once #17867 has been implemented, the use of `@TransactionConfiguration` will become completely superfluous. We should therefore deprecate `@TransactionConfiguration` and completely remove it in a later release.  ---  **Issue Links:** - #17867 Support `@Rollback` at the class level (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3f8b51283e8c5a6e07bc3b5cc62659e831e19093, https://github.com/spring-projects/spring-framework/commit/47e1724d0e8d2c8447112b8d88b516ac514fbb99, https://github.com/spring-projects/spring-framework/commit/c4bbc9df338dca9cff49b0c5e6c70c999eb47654","closed","type: task,","spring-projects-issues","2015-07-24T08:07:55Z","2019-01-13T05:39:30Z"
"","17867","Support @Rollback at the class level [SPR-13276]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13276](https://jira.spring.io/browse/SPR-13276?redirect=false)** and commented  `@Rollback` is currently supported on test methods, with class-level rollback settings configured via `@TransactionConfiguration`.  Allowing `@Rollback` to be declared on test classes with method-level declarations overriding class-level declarations would prove more intuitive than having to declare `@TransactionConfiguration` _and_ `@Rollback`. Furthermore, the `transactionManager` flag in `@TransactionConfiguration` was made superfluous many years ago with the introduction of support for a _qualifier_ in `@Transactional` (which is also supported by the TestContext framework).  See also: #17868  ---  **Issue Links:** - #17868 Deprecate `@TransactionConfiguration` in favor of `@Rollback` and `@Transactional` qualifiers (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3f8b51283e8c5a6e07bc3b5cc62659e831e19093, https://github.com/spring-projects/spring-framework/commit/c4bbc9df338dca9cff49b0c5e6c70c999eb47654","closed","type: enhancement,","spring-projects-issues","2015-07-24T08:06:35Z","2019-01-13T05:39:32Z"
"","17808","Populate RequestAttributes before invoking FilterChain in MockMvc [SPR-13217]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13217](https://jira.spring.io/browse/SPR-13217?redirect=false)** and commented  #### Status Quo  The combination of loading a `WebApplicationContext` with the _Spring TestContext Framework_ (TCF) and using the _Spring MVC Test Framework_ results in two instances of `MockHttpServletRequest` being created. See #17803 for additional information.  The fact that two mocked requests are created can lead to a subtle bug if a Servlet `Filter` (or a Spring-managed component invoked by a filter) attempts to access the `RequestAttributes` before the `TestDispatcherServlet` is invoked by `MockMvc`. Specifically, the filter (or its collaborator) will work with the mocked request created by the `ServletTestExecutionListener`; whereas, the controller that is invoked by `MockMvc` will work with the mocked request managed by `MockMvc`. Consequently, if the controller expects the filter to store information in the request (e.g., request attributes), the test will fail.  #### Analysis  In production deployments the aforementioned bug will not occur if the `RequestContextFilter` or `RequestContextListener` is configured for the web application. When using `MockMvc` with the TCF, however, it is necessary to manually add a `RequestContextFilter` to `MockMvc` _before_ any such custom filters -- for example:  ```java this.mockMvc = MockMvcBuilders   .webAppContextSetup(this.wac)   .addFilters(new RequestContextFilter(), myFilter)   .build(); ```  #### Deliverables  1. [x] Ensure that `RequestAttributes` are populated in the `RequestContextHolder` using the `MockHttpServletRequest` managed by `MockMvc` _before_ any filters are invoked by `MockMvc`.  ---  **Affects:** 3.2 GA  **Issue Links:** - #17803 Reuse MockHttpServletRequest from ServletTestExecutionListener in Spring MVC Test framework","closed","type: bug,","spring-projects-issues","2015-07-10T05:45:23Z","2019-01-11T18:07:24Z"
"","17803","Reuse MockHttpServletRequest from ServletTestExecutionListener in Spring MVC Test framework [SPR-13211]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13211](https://jira.spring.io/browse/SPR-13211?redirect=false)** and commented  #### Status Quo  As discussed in the referenced question on Stack Overflow, the combination of loading a `WebApplicationContext` with the _Spring TestContext Framework_ and using the _Spring MVC Test Framework_ results in two instances of `MockHttpServletRequest` being created.  1. `ServletTestExecutionListener.setUpRequestContextIfNecessary()` creates a `MockHttpServletRequest` and makes it available to the `WebApplicationContext` via the `RequestAttributes` stored as a thread-local variable in the `RequestContextHolder`.    - The mocked request is then injected into any session-scoped or request-scoped bean in the `WebApplicationContext` (following standard Spring semantics for scoped beans) _or_ into the test instance. 2. `MockMvc.perform()` creates another `MockHttpServletRequest` (via `MockHttpServletRequestBuilder.createServletRequest()`).    - This mocked request is the one that is eventually supplied to the `TestDispatcherServlet` in `MockMvc.perform()` (via the `MockFilterChain`).  The end result is that there are two mocked requests. Consequently, components that have the request injected into them (following scoped-proxy semantics) will interact with a request object that has nothing to do with the request configured via `RequestBuilders` (e.g., `get()`, `post()`, etc.) in Spring MVC Test.  NB: the above assumptions regarding interactions between mocked requests and session/request-scoped beans have not been fully confirmed, but in any case it is possible to have a `MockHttpServletRequest` injected into a test that is then not used by Spring MVC Test, which leads to confusing results. For example, request parameters configured in the mock request created by the `ServletTestExecutionListener` are _not_ visible to controller methods invoked via Spring MVC Test.  ---  #### Deliverables  _TBD_  ---  #### Proposal  Initial analysis shows that modifying the `createServletRequest()` method in `MockHttpServletRequestBuilder` as follows could work. In fact, no side effects have been uncovered within Spring's test suite as a result of this change.  ```java /**  * Create a {@link MockHttpServletRequest}.  * If an instance of {@code MockHttpServletRequest} is available via  * the {@link RequestAttributes} bound to the current thread in  * {@link RequestContextHolder}, this method simply returns that instance.  * Otherwise, this method creates a new {@code MockHttpServletRequest}  * based on the supplied {@link ServletContext}.  * Can be overridden in subclasses.  * @see RequestContextHolder#getRequestAttributes()  * @see ServletRequestAttributes  */ protected MockHttpServletRequest createServletRequest(ServletContext servletContext) { 	RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes(); 	if (requestAttributes instanceof ServletRequestAttributes) { 		HttpServletRequest request = ((ServletRequestAttributes) requestAttributes).getRequest(); 		if (request instanceof MockHttpServletRequest) { 			return (MockHttpServletRequest) request; 		} 	}  	return new MockHttpServletRequest(servletContext); } ```  However, special care should be taken with regard to `MockMultipartHttpServletRequestBuilder.createServletRequest()` since it creates a `MockMultipartHttpServletRequest` instead of a `MockHttpServletRequest`. Furthermore, potential side effects for third-party add-ons (e.g., the upcoming support for HtmlUnit in Spring MVC Test (#17749)) must be taken into consideration as well.  ---  **Affects:** 3.2 GA  **Reference URL:** http://stackoverflow.com/questions/30757044/autowired-httpservletrequest-in-spring-test-integration-tests  **Issue Links:** - #17808 Populate RequestAttributes before invoking FilterChain in MockMvc - #17749 Add MockMvc HtmlUnit Integration - #17851 MockMvc.perform with the TestContext framework causes additional perform invocations to be ""polluted""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5e24ee9b5599ee16a83b19c41ef6a8d5499cf5c7, https://github.com/spring-projects/spring-framework/commit/3c799e6e05a44989016912b8b80af6d653f28035, https://github.com/spring-projects/spring-framework/commit/bf06bf33abbf0d3169ae6465757808cf3bc9e4ab, https://github.com/spring-projects/spring-framework/commit/3c2efeece40951f0775252a640165a51d71b47e6  0 votes, 5 watchers","closed","status: invalid,","spring-projects-issues","2015-07-07T11:38:05Z","2019-01-13T05:39:55Z"
"","17772","BEFORE_* modes in @DirtiesContext cause context to be closed before test [SPR-13180]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13180](https://jira.spring.io/browse/SPR-13180?redirect=false)** and commented  #### Status Quo  #17035 introduced `BEFORE_METHOD`, `BEFORE_EACH_TEST_METHOD`, and `BEFORE_CLASS` modes in `@DirtiesContext`. In Spring Framework 4.2 RC1, the `DirtiesContextTestExecutionListener` was updated to support these new `BEFORE_\*` modes in addition to the existing `AFTER_\*` modes.  However, there is a problem with having `DirtiesContextTestExecutionListener` support `BEFORE_\*` modes since it is configured (by default) to execute after the `DependencyInjectionTestExecutionListener`. This leads to several undesired side effects:  1. The test's `ApplicationContext` is closed by the `DirtiesContextTestExecutionListener` **after** dependencies have been injected into the test instance. 2. Injected dependencies may therefore attempt to interact with an `ApplicationContext` that is no longer _active_. 3. If a test has its `ApplicationContext` injected as a dependency, interaction with the context will likely fail since the context has been closed. 4. Furthermore, any `TestExecutionListeners` registered after the `DirtiesContextTestExecutionListener` will get a _new_ `ApplicationContext` if they invoke `TestContext.getApplicationContext()`.  #### Deliverables  1. [x] Introduce a new `TestExecutionListener` dedicated to handling `BEFORE_\*` modes in `@DirtiesContext`. 2. [x] Remove the support for `BEFORE_\*` modes from `DirtiesContextTestExecutionListener`. 3. [x] Update all supporting code to ensure that the new `TestExecutionListener` is registered _before_ the `DependencyInjectionTestExecutionListener` (by default).  ---  **Affects:** 4.2 RC1  **Issue Links:** - #17035 Introduce BEFORE_METHOD and BEFORE_CLASS modes for `@DirtiesContext`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0aac02d6496865dc987c60bf8fcf7b65eeb41801","closed","type: bug,","spring-projects-issues","2015-07-01T11:34:27Z","2019-01-13T05:40:09Z"
"","17762","Introduce logging support for MvcResult details in the Spring MVC Test framework [SPR-13171]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13171](https://jira.spring.io/browse/SPR-13171?redirect=false)** and commented  #### Status Quo  The Spring MVC Test framework has always supported printing debug information about the `MvcResult` to `System.out`; however, there is currently not a mechanism for choosing a different output stream or for having the information logged via a logging framework.  #### Deliverables  1. [x] Introduce a new `log()` method in `MockMvcResultHandlers` for logging the output via Commons Logging and Log4j.    - Consider introducing additional `print(..)` variants for printing debug information to custom output streams.    ---  **Affects:** 3.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/693dcba8679ebc83b6b871a214c9e4bf98449eb4, https://github.com/spring-projects/spring-framework/commit/688014ad9d593adf508e0f983e9bbe31ef66e970, https://github.com/spring-projects/spring-framework/commit/63a1348c32264efb80a71bef13af9f617842320b","closed","type: enhancement,","spring-projects-issues","2015-06-27T12:37:27Z","2015-06-30T15:26:33Z"
"","17760","Improve documentation on limitations of Spring MVC Test [SPR-13169]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13169](https://jira.spring.io/browse/SPR-13169?redirect=false)** and commented  As [Chris Beams pointed out](https://jira.spring.io/browse/SPR-13166?focusedCommentId=117058&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-117058), the documentation on the limitations of the Spring MVC Test Framework should be extended to include discussions of session IDs, filters, etc.  ---  **Affects:** 3.2 GA  **Issue Links:** - #17757 Spring MVC Test framework never stores more than one cookie - #17759 Print cookies in human-readable form in Spring MVC Test  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dc715a0f192cabe5b5433f2f685d910e9c197ea1","closed","type: documentation,","spring-projects-issues","2015-06-26T10:59:15Z","2019-01-11T16:20:28Z"
"","17759","Print cookies in human-readable form in Spring MVC Test [SPR-13168]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13168](https://jira.spring.io/browse/SPR-13168?redirect=false)** and commented  #### Status Quo  When rendering cookies via `andDo(print())` in Spring MVC Test, the output for the `MockHttpServletResponse` looks something like the following:  ``` Cookies = [javax.servlet.http.Cookie@3ccd3277] ```  The reason is that `Cookie` in `javax.servlet-api-3.0.1.jar` does not implement `toString()`. Consequently, nothing about the cookie's name, value, etc., is displayed, thereby making the debug output for cookies next to useless.  ---  #### Deliverables  1. [x] Implement custom `toString()` logic in `PrintingResultHandler` for Cookies.  ##### Before  ``` MockHttpServletResponse:    ...    Cookies = [javax.servlet.http.Cookie@25084a1e] ```  ##### After  ``` MockHttpServletResponse:    ...    Cookies = [[Cookie@47faa49c name = 'enigma', value = '42', comment = [null], domain = [null], maxAge = -1, path = [null], secure = false, version = 0, httpOnly = false]] ```  ---  **Affects:** 3.2 GA  **Issue Links:** - #17757 Spring MVC Test framework never stores more than one cookie - #17760 Improve documentation on limitations of Spring MVC Test  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/895d43a2b3a80c88390345fd2c135d1c9d1cc7d2","closed","type: enhancement,","spring-projects-issues","2015-06-26T10:56:14Z","2019-01-13T20:54:08Z"
"","17753","Refactor WebSocket integration tests to work with Jetty 9.3 [SPR-13162]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13162](https://jira.spring.io/browse/SPR-13162?redirect=false)** and commented  #### Status Quo  In order to support CDI, Jetty 9.3 has introduced changes that coincidentally break Spring's integration testing support for WebSocket integration in an embedded Jetty server. For an example of one such change, consult [this commit](https://github.com/eclipse/jetty.project/commit/1f3097ff162ea4198f9979fed09b19ef49f69572).  #### Analysis  The recent changes in Jetty 9.3 cause Spring's `JettyWebSocketTestServer` to fail to start because of the following.  1. A `ServletContext` must now be supplied to Spring's `JettyRequestUpgradeStrategy`; otherwise, a `NullPointerException` is thrown by the `init()` method in Jetty's `WebSocketServerFactory`. 2. The `ServletContext` supplied to `JettyRequestUpgradeStrategy` **must** be an instance of Jetty's `ContextHandler.Context`; otherwise `WebSocketServerFactory` throws a `ServletException` with the message ""Not running on Jetty, WebSocket    support unavailable"".  #### Accessing ServletContext in Embedded Containers  - Jetty: `org.eclipse.jetty.server.handler.ContextHandler.getServletContext()` - Tomcat: `org.apache.catalina.Context.getServletContext()` - Undertow: `io.undertow.servlet.api.Deployment.getServletContext()`   - You can only access the `Deployment` via the `DeploymentManager` (i.e., `manager.getDeployment()` in `UndertowTestServer`) after you've invoked `manager.deploy()`, which happens late in the game in `UndertowTestServer.deployConfig()`.    ---  **Affects:** 4.2 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e8c8d2a6ad1d75b72bb680a2bf76043a7a8cee79","closed","type: task,","spring-projects-issues","2015-06-24T08:34:37Z","2015-06-30T15:26:28Z"
"","17750","Support inlined statements in @Sql in the TestContext framework [SPR-13159]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13159](https://jira.spring.io/browse/SPR-13159?redirect=false)** and commented  #### Status Quo  Spring Framework 4.1 introduced support for declarative SQL script execution in the _Spring TestContext Framework_ (TCF) via the `@Sql` annotation. With that support, scripts can be configured as resources (e.g., classpath or file system resources); however, many developers have inquired about the ability to _inline_ SQL statements with `@Sql` analogous to the support for _inlined properties_ in `@TestPropertySource`.  ---  #### Deliverables  1. [x] Introduce support for declaring _inlined_ SQL statements in `@Sql`.  ---  #### Examples  ```java @Sql( 	scripts    = ""schema.sql"", 	statements = ""INSERT INTO user VALUES('Dilbert')"" ) public class TransactionalInlinedStatementsSqlScriptsTests { /* ... */ } ```  ```java @Test @Sql(statements = ""DROP TABLE user IF EXISTS"") @Sql(""schema.sql"") @Sql(statements = ""INSERT INTO user VALUES ('Dilbert'), ('Dogbert'), ('Catbert')"") public void methodLevelScripts() { /* ... */ } ```  ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/10a691bd510ecefe51eedee31e4abfdbf57d6ae8","closed","type: enhancement,","spring-projects-issues","2015-06-23T11:01:32Z","2019-01-13T05:40:18Z"
"","17748","MimeType must use case insensitive comparisons for Charsets [SPR-13157]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13157](https://jira.spring.io/browse/SPR-13157?redirect=false)** and commented  #### Status Quo  Spring's `MimeType` currently performs exact equality checks for `""charset""` values in its `parameters` field -- see `org.springframework.util.MimeType.equals(Object)`.  As a result, the MIME types `text/plain;charset=UTF-8` and `text/plain;charset=utf-8` are incorrectly considered to be different, and this breaks the contract for Java's `Charset`:  > Charset names are not case-sensitive; that is, case is always ignored when comparing charset names.  See also: [failing build SPR-PUB-2539](https://build.spring.io/browse/SPR-PUB-2539).  #### Related Resources  - [Change in Jetty 9](https://bugs.eclipse.org/bugs/show_bug.cgi?id=414449) that is related to charsets.  ---  **Affects:** 4.0 GA  **Issue Links:** - #21003 MimeType compareTo implementation is not compatible with equals  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/75fe61843ae10fdfbd223d4f2b72d436a68776a2, https://github.com/spring-projects/spring-framework/commit/89e504c2f1f5a72ccce054dbd616755aa9678fff","closed","in: core,","spring-projects-issues","2015-06-23T06:13:40Z","2019-01-11T16:21:23Z"
"","17710","Introduce general purpose isEmpty() method in ObjectUtils [SPR-13119]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13119](https://jira.spring.io/browse/SPR-13119?redirect=false)** and commented  #### Status Quo  Currently, there are several `isEmpty()` methods scattered across various utilities within Spring such as `ObjectUtils`, `CollectionUtils`, and `StringUtils`; however, each of these methods typically requires a cast to the type supported for that particular variant. Consequently, there is no general purpose _catch-all_ `isEmpty()` method for checking whether an object is empty without knowing its concrete type.  #### Deliverables  1. Introduce a general-purpose `isEmpty(Object)` method in `ObjectUtils` that supports multiple object types in a central location and transparently delegates to existing functionality in `ObjectUtils`, `CollectionUtils`, and `StringUtils`.    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/05de9a8c4accef1bcc0b09b061f81f6c0c8001d3","closed","type: enhancement,","spring-projects-issues","2015-06-12T09:20:57Z","2015-06-30T15:26:31Z"
"","17678","Allow annotation to be synthesized from a map with minimal attributes [SPR-13087]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13087](https://jira.spring.io/browse/SPR-13087?redirect=false)** and commented  #### Status Quo  #17659 introduced support for synthesizing an annotation from a `Map` (or `AnnotationAttributes`). This initial support also validates the supplied map and requires that it ""_must contain key-value pairs for every attribute defined by the supplied `annotationType`._""  The validation that `MapAnnotationAttributeExtractor` currently performs was implemented in order to support Spring's internal use case of synthesizing an annotation from merged `AnnotationAttributes` (as created by `AnnotatedElementUtils`), and for that use case it is in fact an error if any attributes defined by the annotation are not present (including aliased attributes).  However, there are use cases that would benefit from being able to supply a reduced set of attributes and still have the annotation synthesized properly. See the discussion in this [Spring Integration pull request](https://github.com/spring-projects/spring-integration/pull/1455) for an example.  #### Deliverables  1. [x] Refine the validation mechanism in `MapAnnotationAttributeExtractor` so that a reduced set of attributes may be supplied.    - If an attribute is missing it should be set _either_ to value of its alias (if an alias value exists) _or_ to the value of the attribute's default value (if defined), and otherwise an exception should be thrown.  ---  **Affects:** 4.2 RC2  **Issue Links:** - [INT-3723](https://jira.spring.io/browse/INT-3723) Fix IntegrationRequestMappingHandlerMapping according to the latest Spring Framework changes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d0c0d9fc5a1c26a78ddfeda5bc511f136f623db6, https://github.com/spring-projects/spring-framework/commit/ece12f9d370108549fffac105e4bcb7faeaaf124","closed","type: enhancement,","spring-projects-issues","2015-05-31T06:20:20Z","2019-01-11T15:45:31Z"
"","17675","AnnotationUtils.getRepeatableAnnotation() swallows AnnotationConfigurationException [SPR-13084]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13084](https://jira.spring.io/browse/SPR-13084?redirect=false)** and commented   ---  **Affects:** 4.2 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/46be176875d33fb3d11980929854e3a9ec7a44fe","closed","in: core,","spring-projects-issues","2015-05-29T12:15:03Z","2015-06-30T15:26:28Z"
"","17673","Introduce synthesized annotation alternative to getAnnotationAttributes() in AnnotatedElementUtils [SPR-13082]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13082](https://jira.spring.io/browse/SPR-13082?redirect=false)** and commented  #### Status Quo  #17659 introduced support for synthesizing a map (or `AnnotationAttributes` instance) into an annotation. In addition, it also introduced `AnnotatedElementUtils.findAnnotation()` methods as a convenience for automatically synthesizing merged `AnnotationAttributes` when searching with _find semantics_.  #### Deliverables  1. [x] Introduce synthesized annotation alternative to `getAnnotationAttributes()` in `AnnotatedElementUtils`, analogous to the existing `findAnnotation()` methods.  ---  **Affects:** 4.2 RC2  **Issue Links:** - #17659 Introduce support for synthesizing AnnotationAttributes into an annotation (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9f717871e6aafaa0bc53762622b21cacdfff5584","closed","type: enhancement,","spring-projects-issues","2015-05-29T05:52:56Z","2019-01-11T15:45:22Z"
"","17669","Nested arrays of annotations are synthesized with wrong component type [SPR-13077]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13077](https://jira.spring.io/browse/SPR-13077?redirect=false)** and commented  #### Status Quo  The support for synthesizing annotations that was introduced in #16137 and #16138 incorrectly _adapts_ a nested array of annotations by converting it to an array of generic annotations (i.e., `Annotation[]`). This improper behavior can lead to unexpected exceptions at run time -- for example, `Annotation[]` is not compatible with `Filter[]`.  The broken code resides in `AnnotationUtils.adaptValue()`.  #### Deliverables  1. [ ] Ensure that nested arrays of synthesized annotations are created with the appropriate component type.  ---  **Affects:** 4.2 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f41de12cf62aebf1be9b30be590c12eb2c030853","closed","in: core,","spring-projects-issues","2015-05-27T08:17:45Z","2019-01-11T15:46:12Z"
"","17666","Support retrieval of nested annotations in AnnotationAttributes [SPR-13074]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13074](https://jira.spring.io/browse/SPR-13074?redirect=false)** and commented  `AnnotationAttributes` has always provided support for retrieving nested instances and arrays of `AnnotationAttributes`, but it has never provided explicit support for retrieving nested annotations and nested arrays of annotations in a _type-safe_ (i.e., cast-free) manner.  The goal of this issue is to introduce support for retrieving nested annotations that is on par with the existing support for retrieving nested `AnnotationAttributes`.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a2f152ce8bdbd99f97e4d4b5aced4b5b2b778d86","closed","type: enhancement,","spring-projects-issues","2015-05-27T07:30:32Z","2015-06-30T15:26:28Z"
"","17664","Document public API in AnnotationAttributes [SPR-13072]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13072](https://jira.spring.io/browse/SPR-13072?redirect=false)** and commented  `AnnotationAttributes` has existed for several years, but none of the ""get"" methods that make up its public API are documented. In many cases, the behavior can be inferred from the name of the method, but for some methods there are ""hidden gems"" and unexpected behavior lurking behind the scenes.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0ac0e2ce2067f40362ebbc4d4deb5eee251b149a","closed","type: enhancement,","spring-projects-issues","2015-05-27T06:34:34Z","2015-06-30T15:26:30Z"
"","17660","AnnotationUtils breaks contract for @Repeatable annotations [SPR-13068]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13068](https://jira.spring.io/browse/SPR-13068?redirect=false)** and commented  #### Status Quo  The current implementation of `getRepeatableAnnotation()` in Spring's `AnnotationUtils` complies neither with the contract of `getAnnotationsByType()` nor with the contract of `getDeclaredAnnotationsByType()` as defined in `AnnotatedElement` in Java 8.  This leads to unexpected results when using Spring's _support_ for `@Repeatable` annotations: either annotations show up in the returned set in the wrong order, or annotations are returned in the set that should not even be found based on the semantics of `@Repeatable`.  #### Deliverables  1. [x] Introduce an equivalent to `getDeclaredAnnotationsByType()` in `AnnotationUtils`. 2. [x] Ensure that `getRepeatableAnnotation()` in `AnnotationUtils` complies with the contract of `getAnnotationsByType()`.    ---  **Affects:** 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/594c3302055748a31c99239080c4ddb45c002e97, https://github.com/spring-projects/spring-framework/commit/fb83e83e789097ff3197bb93781ea09be92d6869, https://github.com/spring-projects/spring-framework/commit/a0040245ca3bf968aec55db00f401e10b71a875f","closed","in: core,","spring-projects-issues","2015-05-25T06:15:08Z","2016-09-03T12:38:07Z"
"","17659","Introduce support for synthesizing AnnotationAttributes into an annotation [SPR-13067]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13067](https://jira.spring.io/browse/SPR-13067?redirect=false)** and commented  This issue picks up where #16137 and #16138 left off, with the primary goal of providing support for synthesizing an annotation from merged `AnnotationAttributes` like those returned from the `getAnnotationAttributes(\*)` and `findAnnotationAttributes(\*)` methods in `AnnotatedElementUtils`.  ---  **Issue Links:** - #17673 Introduce synthesized annotation alternative to getAnnotationAttributes() in AnnotatedElementUtils (_**""is depended on by""**_) - #16137 Introduce unified support for declaring and looking up annotation attribute aliases - #16138 Introduce support for explicit annotation attribute overrides - #16136 Introduce a comprehensive programming model for meta-annotation support","closed","type: enhancement,","spring-projects-issues","2015-05-24T14:12:29Z","2019-01-11T15:47:01Z"
"","17658","Implement hashCode() for synthesized annotations [SPR-13066]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13066](https://jira.spring.io/browse/SPR-13066?redirect=false)** and commented  #16137 introduced support for annotation attribute aliases by synthesizing annotations; however, synthesized annotations currently do not properly implement `hashCode()` which can lead to unexpected errors.  ---  **Affects:** 4.2 RC1  **Issue Links:** - #16137 Introduce unified support for declaring and looking up annotation attribute aliases (_**""depends on""**_) - #17656 Implement toString() for synthesized annotations (_**""depends on""**_) - #17657 Implement equals() for synthesized annotations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/def7663ec465ee293d70efd14dbded1fa3332ee5","closed","type: enhancement,","spring-projects-issues","2015-05-23T09:07:15Z","2019-01-11T15:47:06Z"
"","17657","Implement equals() for synthesized annotations [SPR-13065]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13065](https://jira.spring.io/browse/SPR-13065?redirect=false)** and commented  #16137 introduced support for annotation attribute aliases by synthesizing annotations; however, synthesized annotations currently do not properly implement `equals()` which can lead to unexpected errors. For example, a synthesized annotation is not even _equal_ to itself.  ---  **Affects:** 4.2 RC1  **Issue Links:** - #16137 Introduce unified support for declaring and looking up annotation attribute aliases (_**""depends on""**_) - #17656 Implement toString() for synthesized annotations (_**""depends on""**_) - #17658 Implement hashCode() for synthesized annotations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7bf609f11164c54b66a84632fb2ac4ac06ddae1c","closed","type: enhancement,","spring-projects-issues","2015-05-23T09:06:45Z","2019-01-11T15:46:50Z"
"","17656","Implement toString() for synthesized annotations [SPR-13064]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13064](https://jira.spring.io/browse/SPR-13064?redirect=false)** and commented  #16137 introduced support for annotation attribute aliases by synthesizing annotations; however, synthesized annotations currently do not properly implement `toString()` which can lead to confusion in log output and while debugging.  ---  **Affects:** 4.2 RC1  **Issue Links:** - #16137 Introduce unified support for declaring and looking up annotation attribute aliases (_**""depends on""**_) - #17657 Implement equals() for synthesized annotations (_**""is depended on by""**_) - #17658 Implement hashCode() for synthesized annotations (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2015-05-23T09:05:24Z","2019-01-11T15:46:53Z"
"","17652","Introduce putIfAbsent() in AnnotationAttributes [SPR-13060]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13060](https://jira.spring.io/browse/SPR-13060?redirect=false)** and commented  `java.util.Map` introduces `putIfAbsent(K, V)` in Java 8.  Thus, the goal of this issue is to provide the same convenience to users of `AnnotationAttributes` before Spring requires Java 8.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ca09b1ff200280c885bca7a4191711e7a21e62de","closed","type: enhancement,","spring-projects-issues","2015-05-22T06:43:19Z","2015-05-26T01:15:04Z"
"","17629","Document SpringClassRule and SpringMethodRule in the reference manual [SPR-13037]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13037](https://jira.spring.io/browse/SPR-13037?redirect=false)** and commented  Document the JUnit rule-based support introduced in #12387 in the _Testing_ chapter and ""what's new in 4.2"" section of the reference manual.  ---  **Affects:** 4.2 RC1  **Issue Links:** - #12387 Provide `@Rule` alternative to SpringJUnit4ClassRunner (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/754b7672f4ca854a0aca924b4574ba886a735499","closed","type: documentation,","spring-projects-issues","2015-05-16T14:36:43Z","2019-01-13T05:40:51Z"
"","17623","Document ""present"" terminology in AnnotationUtils [SPR-13030]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13030](https://jira.spring.io/browse/SPR-13030?redirect=false)** and commented  The current documentation within `AnnotationUtils` is inconsistent with regard to annotations that are _present_ or _directly present_ on annotated elements. Furthermore, Spring needs the explicit notion of _meta-present_ to denote that annotations are present within annotation hierarchies above annotated elements.  ---  **Issue Links:** - #17622 Document ""present"" terminology in AnnotationUtils (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/477d4c5126ac986083ed2678be84641fca106dbf","closed","type: enhancement,","spring-projects-issues","2015-05-14T12:12:31Z","2019-01-11T16:01:58Z"
"","17622","Document ""present"" terminology in AnnotationUtils [SPR-13029]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13029](https://jira.spring.io/browse/SPR-13029?redirect=false)** and commented  ---  **Issue Links:** - #17623 Document ""present"" terminology in AnnotationUtils (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2015-05-14T12:12:30Z","2019-01-11T16:03:52Z"
"","17603","Upgrade build to Gradle 2.5 for JDK 9 support [SPR-13012]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13012](https://jira.spring.io/browse/SPR-13012?redirect=false)** and commented  #### Overview  Gradle 2.5 aims to support JDK 1.9.  In fact, the [Gradle 2.5 nightly build](https://gradle.org/nightly/) already supports building `spring-test` (and presumably the rest of the spring-framework) against JDK 1.9.  For details, see the [comments from Adrian Kelly on the Gradle Forums](https://discuss.gradle.org/t/gradle-2-4-does-not-work-with-jdk-9/9554).  ---  #### Update from Luke Daley -- May 12, 2015  > To be clear, it's not quite guaranteed that 2.5 works flawlessly with Java 9. We are making steps towards this; how far we get remains to be seen. >  > At this time we won't be doing a point release of 2.4. You could try using the http://gradle.org/nightly2 build in the interim. >  > We are looking to issue the first RC of 2.5 in the next two-ish weeks.  ---  **Affects:** 4.2 RC2  **Issue Links:** - #17369 Upgrade build to Gradle 2.4 - #18063 Upgrade build to Gradle 2.10 - #17823 Revisit date-time tests for compatibility with JDK 9 build 72  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2577ac300b608899ab7327e16a97853c7188507a, https://github.com/spring-projects/spring-framework/commit/c1b526282444609145db74a24bf1808743833eae, https://github.com/spring-projects/spring-framework/commit/48f330dd31f4fa5105a28e75bf73a8c7d1cefd1c","closed","type: task,","spring-projects-issues","2015-05-11T06:20:10Z","2019-01-13T20:55:46Z"
"","17598","Document AopTestUtils in the reference manual [SPR-13006]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13006](https://jira.spring.io/browse/SPR-13006?redirect=false)** and commented  Document the features of `AopTestUtils` introduced in #17597 in the _Testing_ chapter of the reference manual.  ---  **Affects:** 4.2 RC1  **Issue Links:** - #17597 Introduce AopTestUtils in spring-test (_**""depends on""**_)","closed","type: documentation,","spring-projects-issues","2015-05-09T11:39:22Z","2019-01-11T16:07:18Z"
"","17597","Introduce AopTestUtils in spring-test [SPR-13005]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13005](https://jira.spring.io/browse/SPR-13005?redirect=false)** and commented  #### Status Quo  `AopProxyUtils` provides for determining the ultimate target class for a proxied object via `ultimateTargetClass(Object)`; however, there is currently no first-class support for determining the ultimate target object behind a proxy of set of nested proxies.  In testing scenarios it is sometimes necessary to obtain a reference to the underlying target object -- for example, to configure expectations on a mocked bean that was proxied by Spring.  #### Deliverables  1. [x] Introduce support in the `spring-test` module for retrieving the ultimate target object behind a proxy.  ---  **Issue Links:** - #17598 Document AopTestUtils in the reference manual (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cf51f0c0aa84d48de5b4ac2ea1029d80efb552c7, https://github.com/spring-projects/spring-framework/commit/efe3a35da871a7ef34148dfb65d6a96cac1fccb9","closed","type: enhancement,","spring-projects-issues","2015-05-09T11:27:48Z","2019-01-11T16:07:00Z"
"","17590","AntPathMatcher should throw an IllegalArgumentException if patterns cannot be combined [SPR-12998]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12998](https://jira.spring.io/browse/SPR-12998?redirect=false)** and commented  #### Status Quo  The Javadoc for the `combine(String, String)` method in `AntPathMatcher` states that it will thrown an `IllegalArgumentException` if the two patterns cannot be combined. However, the following simply returns `""/*.html""` (i.e., `pattern1`) instead of throwing an exception.  ```java pathMatcher.combine(""/*.html"", ""/*.txt""); ```  #### Deliverables  1. Ensure that `combine(String, String)` properly throws an exception if the supplied patterns cannot be properly combined.    - Enable the `combineWithTwoFileExtensionPatterns()` test case in `AntPathMatcherTests` by deleting the `@Ignore` declaration.    --- No further details from [SPR-12998](https://jira.spring.io/browse/SPR-12998?redirect=false)","closed","in: core,","spring-projects-issues","2015-05-08T05:29:38Z","2015-05-26T01:14:57Z"
"","17580","Eliminate inspection of meta-annotations on Java annotations [SPR-12989]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12989](https://jira.spring.io/browse/SPR-12989?redirect=false)** and commented  This issue picks up where #16108 left off, with the goal of eliminating all unnecessary inspection of core Java annotations within Spring's search algorithms for annotations and meta-annotations.  ---  **Affects:** 4.0.3  **Issue Links:** - #16108 Avoid unnecessary inspection of meta-annotations on Java annotations (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5d67219a4e06e4b1d9557ce4a26fe91b0fd8a86c","closed","type: enhancement,","spring-projects-issues","2015-05-05T15:12:25Z","2019-01-11T21:02:52Z"
"","17568","MvcUriComponentsBuilder does not support bridged methods [SPR-12977]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12977](https://jira.spring.io/browse/SPR-12977?redirect=false)** and commented  #### Status Quo  Given the example classes listed below, an invocation of `fromMethodName(PersonCrudController.class, ""get"", new Long(42)).build()` on `MvcUriComponentsBuilder` fails with the following exception.  ``` java.lang.IllegalArgumentException: Found two methods named 'get' accepting arguments [42] on controller org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests$PersonCrudController: [public org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests$Person org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests$PersonCrudController.get(java.lang.Long)] and [public java.lang.Object org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests$PersonCrudController.get(java.lang.Object)] ```  #### Analysis  `MvcUriComponentsBuilder.getMethod(Class, String, Object...)` throws an `IllegalArgumentException` if it encounters both a _bridge_ and _bridged_ method which naturally have the same name and signature (excluding argument types and return type). In the failing scenario described in this issue, `Person get(Long)` is the _bridged_ method, and `Object get(Object)` is the _bridge_ method.  #### Example Classes  ```java public abstract class AbstractCrudController { 	public abstract T get(ID id); }  public class PersonCrudController extends AbstractCrudController {  	@RequestMapping(path = ""/{id}"", method = RequestMethod.GET) 	public Person get(@PathVariable Long id) { 		return new Person(); 	} } ```    ---  **Affects:** 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/205e5dfd6fdf89e0049da29817a6474abddbc2e9, https://github.com/spring-projects/spring-framework/commit/e9c4db34ecbba6ab528055f170b8148669c2fc3d, https://github.com/spring-projects/spring-framework/commit/859751b9d9166eb5bd2e16aec5ab5978b6ad7068","closed","type: bug,","spring-projects-issues","2015-05-04T04:27:06Z","2015-05-26T01:15:07Z"
"","17537","AnnotatedElementUtils fails to find type-level annotations on interfaces [SPR-12944]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12944](https://jira.spring.io/browse/SPR-12944?redirect=false)** and commented  ---  **Issue Links:** - #17300 AnnotatedElementUtils does not find annotations on methods in dynamic proxies - #17335 AnnotatedElementUtils fails to find annotations on abstract, bridge, or interface methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7f0f04dfe38ead84e502f0d34897d1c415565cdd","closed","in: core,","spring-projects-issues","2015-04-22T12:11:48Z","2019-01-11T21:06:56Z"
"","17534","AnnotationUtils does not support arbitrary levels of meta-annotations on methods [SPR-12941]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12941](https://jira.spring.io/browse/SPR-12941?redirect=false)** and commented  #### Status Quo  In contrast to the search algorithm used by the `findAnnotation(Class, Class)` method in `AnnotationUtils`, the `findAnnotation(Method, Class)` method currently only finds direct annotations or direct meta-annotations (i.e., one level of meta-annotations).  This lacking support for multiple levels of meta-annotations has been the cause of failing (though currently `@Ignored`) tests in `TransactionalEventListenerTests` since `@EventListener` is not discovered as a meta-meta-annotation by the `EventListenerMethodProcessor`.  #### Deliverables  1. [x] Rework `findAnnotation(Method, Class)` so that it supports arbitrary levels of meta-annotations on methods.  ---  **Issue Links:** - #17533 Document meta-annotation support in AnnotationUtils - #17300 AnnotatedElementUtils does not find annotations on methods in dynamic proxies  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b9b0b78fa1f80efa5f5549a862d44d11b0bc3ba1","closed","in: core,","spring-projects-issues","2015-04-21T17:11:57Z","2019-01-11T21:08:24Z"
"","17533","Document meta-annotation support in AnnotationUtils [SPR-12940]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12940](https://jira.spring.io/browse/SPR-12940?redirect=false)** and commented  ---  **Issue Links:** - #17534 AnnotationUtils does not support arbitrary levels of meta-annotations on methods - #16139 Document and test status quo for AnnotatedElementUtils  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/19a75f2c668de369f6e9dd10d0441841e2daea99","closed","in: core,","spring-projects-issues","2015-04-21T10:52:04Z","2019-01-11T21:08:26Z"
"","17525","Autowiring against a closed ApplicationContext should consistently fail [SPR-12932]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12932](https://jira.spring.io/browse/SPR-12932?redirect=false)** and commented  #### Status Quo  It is currently possible to autowire against an `ApplicationContext` that has been _closed_. However, attempting to do so should result in some sort of exception being thrown. See the example failing tests below.  This issue was brought to our attention when integration tests in the Spring Integration test suite started failing. See [INT-3543](https://jira.spring.io/browse/INT-3543) for details.  ---  #### Analysis by Jürgen Höller  `AbstractApplicationContext` already invokes `assertBeanFactoryActive()` before it delegates to the internal `DefaultListableBeanFactory` but of course only for methods on the `ApplicationContext` itself.  The underlying `BeanFactory` doesn't have the notion of a _'closed'_ state -- it may just have had its singletons destroyed but could, from its perspective, recreate them at any point.  The semantically cleaner solution is to perform the assertion in the application context's `getAutowireCapableBeanFactory()` implementation: `AbstractRefreshableApplicationContext` subclasses do throw an `IllegalStateException` there after closing, but `GenericApplicationContext` subclasses don't. The latter needs to be fixed, and the `getAutowireCapableBeanFactory()` Javadoc in the `ApplicationContext` interface needs to explicitly state that an `IllegalStateException` will be thrown after context closing.  ---  #### Example Failing Tests  `Example1Test` does not fail until the second line of the `test2()` method, thus demonstrating that the test instance was autowired from a closed `ApplicationContext`.  `Example2Test` contains a copy of the actual code from `DependencyInjectionTestExecutionListener.injectDependencies()`, demonstrating that autowiring against a closed `ApplicationContext` in fact does not throw any kind of exception.  ```java @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration public class Example1Test {      @Configuration static class Config {         @Bean String foo() { return ""foo""; }     }      @Autowired ConfigurableApplicationContext context;     @Autowired String foo;      @Test     public void test1() {         assertEquals(""foo"", foo);         assertTrue(context.isActive());     }      @After     public void close() {         context.close();     }      @Test     public void test2() {         assertEquals(""foo"", foo);         assertTrue(context.isActive());     } } ```  ```java public class Example2Test {      @Test(expected = Exception.class)     public void autowiringAgainstClosedContextShouldThrowAnException() {         ConfigurableApplicationContext context = new GenericApplicationContext();         context.refresh();         context.close();          // Simulate DependencyInjectionTestExecutionListener         AutowireCapableBeanFactory beanFactory = context.getAutowireCapableBeanFactory();         beanFactory.autowireBeanProperties(this, AutowireCapableBeanFactory.AUTOWIRE_NO, false);     } } ```  ---  **Affects:** 4.1.2, 4.1.6  **Issue Links:** - [INT-3543](https://jira.spring.io/browse/INT-3543) Fix tests do not close ApplicationContext between test methods - #17517 ApplicationContext fails to load in TestNG test if previous test is annotated with `@DirtiesContext` - #17012 DefaultListableBeanFactory should allow efficient access to current bean names  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/706d3adf07988d8248d2a13a6585b2a40388de78, https://github.com/spring-projects/spring-framework/commit/93f403cbf65ff4d584dc2d168c929d5683e065a4","closed","type: enhancement,","spring-projects-issues","2015-04-19T14:49:21Z","2019-01-13T05:41:09Z"
"","17508","Introduce isNotEmpty() aliases for hasLength() in StringUtils [SPR-12909]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12909](https://jira.spring.io/browse/SPR-12909?redirect=false)** and commented   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/775  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/47f8d435e621163f56727891bb2e874e76e1f9b8","closed","type: enhancement,","spring-projects-issues","2015-04-14T10:49:46Z","2015-05-07T07:04:18Z"
"","17437","Document support for generating unique names for embedded databases in the reference manual [SPR-12839]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12839](https://jira.spring.io/browse/SPR-12839?redirect=false)** and commented  #13491 introduced support for auto-generating unique names for embedded databases, but this has not yet been documented in the reference manual.  ---  **Affects:** 4.2 RC1  **Issue Links:** - #13491 Introduce support for generating unique names for embedded databases (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bfdf6b7b3ae3c4c8e8ee5bd73311440faafae841","closed","type: documentation,","spring-projects-issues","2015-03-20T16:46:28Z","2019-01-11T21:39:00Z"
"","17432","Introduce database-name attribute in  [SPR-12835]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12835](https://jira.spring.io/browse/SPR-12835?redirect=false)** and commented  #### Status Quo  Since its inception, the `` XML namespace element (or more specifically the `EmbeddedDatabaseBeanDefinitionParser`) has set the name of the embedded database that it creates to the value of the `id` attribute. This makes it impossible to reuse an XML configuration file containing such a bean definition in multiple application contexts loaded within the same JVM -- for example, by importing the common test data source configuration into multiple contexts loaded by the _Spring TestContext Framework_.  Furthermore, the `EmbeddedDatabaseBuilder` already provides support for setting the `name` in Java Config.  #### Deliverables  1. Introduce a `database-name` attribute in `` to bring XML configuration of embedded databases on par with the support in Java Config.  ---  **Affects:** 3.0 GA  **Issue Links:** - #17431 Allow  to be declared as an anonymous bean (_**""depends on""**_) - #13491 Introduce support for generating unique names for embedded databases (_**""is depended on by""**_) - #12260 jdbc:datasource lacks 'name' attribute or related mechanism - #13560 Using multiple declarations of jdbc:embedded-database creates only one H2 instance per JVM (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ab771dfd97b14f978a0513f4e9425db86099b348, https://github.com/spring-projects/spring-framework/commit/c36c6cbfaafc5efdcc707d86226acf2258a1bba1","closed","type: enhancement,","spring-projects-issues","2015-03-20T07:22:53Z","2019-01-11T21:38:44Z"
"","17431","Allow  to be declared as an anonymous bean [SPR-12834]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12834](https://jira.spring.io/browse/SPR-12834?redirect=false)** and commented  #### Status Quo  Currently, `` cannot be declared without specifying an `id`. However, when the `DataSource` is _autowired by type_, an explicit `id` is not absolutely necessary.  #### Deliverables  1. Allow `` to be declared as an anonymous bean  ---  **Affects:** 3.0 GA  **Issue Links:** - #17432 Introduce database-name attribute in  (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7e2f12cf9f505c6fe1b2608874f3c5f926ea0dc3","closed","type: enhancement,","spring-projects-issues","2015-03-20T07:17:26Z","2019-01-11T21:38:49Z"
"","17390","TypeDescriptor should support arbitrary levels of meta-annotations [SPR-12793]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12793](https://jira.spring.io/browse/SPR-12793?redirect=false)** and commented  #### Status Quo  The `getAnnotation()` method in `TypeDescriptor` currently only supports a single level of meta-annotations.  In other words, meta-annotations on meta-annotations will never be found, and this does not align with Spring's standard support for meta-annotations with arbitrary levels.  For example, `@NumberFormat` and `@DateTimeFormat` are supported as meta-annotations but not as meta-meta-annotations.  #### Deliverables  1. [x] Alter the search algorithm used in `TypeDescriptor.getAnnotation()` so that arbitrary levels of meta-annotations are supported.  ---  **Affects:** 3.2 GA  **Issue Links:** - #17340 Support `@NumberFormat` as a meta-annotation (_**""depends on""**_) - #16074 AnnotationUtils.findAnnotation() should support arbitrary levels of meta-annotations - #16095 MetaAnnotationUtils should support arbitrary levels of meta-annotations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/04d6afe54d39d9769c9c54e45a5e61e946156152","closed","type: enhancement,","spring-projects-issues","2015-03-07T13:08:43Z","2019-01-13T05:41:50Z"
"","17369","Upgrade build to Gradle 2.4 [SPR-12772]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12772](https://jira.spring.io/browse/SPR-12772?redirect=false)** and commented  #### Tweets and Blogs about Gradle 2.4  - [Gradle 2.4: The fastest yet](http://gradle.org/gradle-2-4-the-fastest-yet/): Gradle blog - [Spring Security builds](https://twitter.com/rob_winch/status/581162990147235841): tweet by [Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch) - [Spring Framework builds](https://twitter.com/sam_brannen/status/581884182156197888): tweet by [Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)  ---  **Affects:** 4.2 RC1  **Issue Links:** - #16551 Upgrade build to Gradle 2.2.1 (_**""depends on""**_) - #17603 Upgrade build to Gradle 2.5 for JDK 9 support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ed60b8cf5b2f0216ac06d1ae25f176b73a22d69b","closed","type: task,","spring-projects-issues","2015-03-01T14:13:59Z","2019-01-11T21:25:20Z"
"","17366","GroovyBeanDefinitionReader does not fully support XML config files [SPR-12769]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12769](https://jira.spring.io/browse/SPR-12769?redirect=false)** and commented  #### Status Quo  The class-level Javadoc for `GroovyBeanDefinitionReader` states the following.  > This bean definition reader also understands XML bean definition files, allowing for seamless mixing and matching with Groovy bean definition files.  However, the support for XML configuration files is actually limited since `GroovyBeanDefinitionReader` disables XML validation for the `XmlBeanDefinitionReader` that it uses internally. As a consequence, certain standard features for XML configuration files do not work. For example, as discussed in #17365, the absence of XML validation causes the `default` value of the `type` attribute (defined in the `spring-beans` XSD) in the `` tag to be ignored, and this results in a `BeanDefinitionParsingException` when the `ApplicationContext` is loaded.  #### Deliverables  1. [x] Ensure that XML configuration files are fully supported when bean definitions are loaded via `GroovyBeanDefinitionReader`.  ---  **Affects:** 4.0 GA  **Issue Links:** - #17365 XML config isn't fully supported for web integration tests if Groovy is on the classpath  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e24a7ded620b74110141bc6d4a80ae86c74c157b, https://github.com/spring-projects/spring-framework/commit/7edc7c2c8f3e98a9c61d4c9520489d132c00e0a0, https://github.com/spring-projects/spring-framework/commit/b6f22aa514b6769985356dc41e6824b4cd3aacc3","closed","in: core,","spring-projects-issues","2015-02-28T13:14:32Z","2019-01-11T21:24:57Z"
"","17365","XML config isn't fully supported for web integration tests if Groovy is on the classpath [SPR-12768]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12768](https://jira.spring.io/browse/SPR-12768?redirect=false)** and commented  #### Status Quo  As discussed in the ""[spring-test, groovy library and qualifier tag incompatibility](http://stackoverflow.com/questions/28212993/spring-test-groovy-library-and-qualifier-tag-incompatibility)"" thread on Stack Overflow, it is currently impossible to configure an integration test using `@WebAppConfiguration` and XML config that uses the `` tag _if Groovy is on the classpath_. Any attempt to do so will result in a stack trace similar to the following.  ``` Caused by: org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Unexpected failure during bean definition parsing Offending resource: class path resource [spring/app-config.xml] Bean 'service'; nested exception is org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Tag 'qualifier' must have a 'type' attribute Offending resource: class path resource [spring/app-config.xml] ```  ---  #### Analysis  The reason that the aforementioned `BeanDefinitionParsingException` is thrown is that `GenericGroovyXmlWebContextLoader` internally uses a `GroovyBeanDefinitionReader` for loading bean definitions from XML configuration files, and `GroovyBeanDefinitionReader` disables XML validation for its internal `XmlBeanDefinitionReader`.  The absence of XML validation apparently causes the `default` value of the `type` attribute (from the `spring-beans` XSD) in the `` tag to be ignored.  ---  #### Temporary Work-around  It is possible to circumvent this bug by explicitly setting the `type` attribute in the `` tag to the intended _default_ value which is `""org.springframework.beans.factory.annotation.Qualifier""`   - for example, as follows.  ```xml        ```  ---  #### Deliverables  1. [x] Ensure that it is possible to use all features of XML configuration when loading a `WebApplicationContext` in the TestContext framework if Groovy is on the classpath.  ---  **Affects:** 4.1 GA  **Reference URL:** http://stackoverflow.com/questions/28212993/spring-test-groovy-library-and-qualifier-tag-incompatibility  **Issue Links:** - #17366 GroovyBeanDefinitionReader does not fully support XML config files  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/55eb5b622c7ecb740298a3128dd7427cb1cbbfb6, https://github.com/spring-projects/spring-framework/commit/2ba1151b7fa3fcd3b0c964fc377ce57671eabb8b","closed","type: bug,","spring-projects-issues","2015-02-28T09:20:41Z","2019-01-13T05:42:03Z"
"","17364","EncodedResource does not include charset in equals() implementation [SPR-12767]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12767](https://jira.spring.io/browse/SPR-12767?redirect=false)** and commented  #### Status Quo  `EncodedResource` supports an `encoding` or a `Charset` for reading from the underlying `Resource`; however, the implementation of `equals()` is based solely on the `resource` and `encoding`. Thus, if a `Charset` is specified instead of an `encoding`, invocations of `equals()` will not work as expected.  #### Deliverables  1. [x] Include the `Charset` in the implementation of `equals()` in `EncodedResource`.    ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/93c70b7440783e9b047a52ee3ff9dec5d45300a6, https://github.com/spring-projects/spring-framework/commit/1f9bc50c3e0e78e11754d4f5bbbba5e94a4b8d91, https://github.com/spring-projects/spring-framework/commit/6c93745f35a3f65337bac7258e846b0e69d8989d  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","in: core,","spring-projects-issues","2015-02-28T08:01:16Z","2015-03-25T09:42:33Z"
"","17318","Open up TestPropertySourceUtils for public consumption [SPR-12721]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12721](https://jira.spring.io/browse/SPR-12721?redirect=false)** and commented  #### Status Quo  Spring Framework 4.1 introduced `TestPropertySourceUtils` for working with `@TestPropertySource`; however, the utilities in this class are package private.  In light of requirements from Spring Boot (and potentially other third-party frameworks), it would be beneficial to make such utilities _public_ so that the logic contained in them can be reused outside the `spring-test` module.  #### Deliverables  1. [x] Make `TestPropertySourceUtils` public. 2. [x] Make utility methods in `TestPropertySourceUtils` public as appropriate.  ---  **Affects:** 4.1 GA  **Issue Links:** - #17307 Preserve ordering of inlined properties in `@TestPropertySource`","closed","type: enhancement,","spring-projects-issues","2015-02-16T16:31:23Z","2019-01-13T05:42:22Z"
"","17219","Fix broken schedulerWithHsqlDataSource() test in QuartzSupportTests [SPR-12618]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12618](https://jira.spring.io/browse/SPR-12618?redirect=false)** and commented  #### Status Quo  Changes made in [GitHub commit b43fc7a](https://github.com/spring-projects/spring-framework/commit/b43fc7ac0f52adfe0874c338eda4bd4b2c1b3130) caused the `schedulerWithHsqlDataSource()` test in `QuartzSupportTests` to start failing.  Specifically, this test has been failing during _Performance Builds_ since build [#297](https://build.spring.io/browse/SPR-PERF-297/).  #### Assumptions  Since the commit in question upgraded the Quartz version, one could assume that it is necessary to upgrade the `quartz-hsql.sql` file (as was done in the fix for #16253); however, an initial attempt at this did not seem to resolve the problem. Thus further analysis is required.  #### Deliverables  1. Determine why `schedulerWithHsqlDataSource()` is failing after an upgrade to Quartz 2.2.1 and refactor tests and related configuration to ensure that all tests pass during Spring's Performance builds.  ---  **Affects:** 4.1 GA  **Issue Links:** - #16253 Fix broken tests in QuartzSupportTests  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/49e31c302b6c29ea6901ebc18846a501bcdfb673, https://github.com/spring-projects/spring-framework/commit/b82e9c4d46bb85a62b6097701d3847413b80bb33","closed","in: core,","spring-projects-issues","2015-01-11T14:39:49Z","2019-01-11T19:04:53Z"
"","17214","Handle exceptions properly in SpringJUnit4ClassRunner [SPR-12613]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12613](https://jira.spring.io/browse/SPR-12613?redirect=false)** and commented  #### Status Quo  `SpringJUnit4ClassRunner` has extended `BlockJUnit4ClassRunner` for several years and inherited default JUnit behavior from `BlockJUnit4ClassRunner`. At times, the default behavior needed to be copied and modified for special needs of the Spring TestContext Framework. For example, the `BlockJUnit4ClassRunner.runChild()` method has always been overridden in order to support Spring's `@IfProfileValue` annotation for _ignored_ tests.  In JUnit 4.9, the [implementation of `BlockJUnit4ClassRunner.runChild()`](https://github.com/junit-team/junit/blob/r4.9/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java) changed such that the invocation of `BlockJUnit4ClassRunner.methodBlock()` is no longer wrapped in a try-catch block. The end result is a change in backwards compatibility. Namely, any exceptions thrown from `methodBlock()` are no longer properly associated with the currently executing test method. Consequently:  1. such failures are displayed as ""_unrooted_"" (i.e., not associated with the corresponding test method) 2. all subsequent test methods for the current test class are **not** executed at all 3. JUnit test listeners are not notified of such failures or of any subsequent test methods that should have been executed  In conjunction with #16527, `SpringJUnit4ClassRunner` was updated to use the aforementioned changes to `BlockJUnit4ClassRunner.runChild()` introduced in JUnit 4.9. As a consequence, this introduces a regression in `SpringJUnit4ClassRunner` which can be seen in test failures in [TimedSpringRunnerTests](https://build.spring.io/browse/SPR-PERF-JOB1-400/test/case/119934756).  ---  #### Deliverables  1. [x] Ensure that any exceptions thrown within `SpringJUnit4ClassRunner.methodBlock()` are properly associated with the currently executing test. 2. [x] Inform the JUnit team of the regression they introduced in JUnit 4.9  ---  **Affects:** 4.1 GA  **Issue Links:** - #16527 Require JUnit 4.9 or higher in the TestContext framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b81c522ee1624f3d5f170fc3468f4600956950bd, https://github.com/spring-projects/spring-framework/commit/7d171e6722341419c5024647cbdcfe33f5eab6a8","closed","type: bug,","spring-projects-issues","2015-01-10T08:36:54Z","2019-01-13T05:42:53Z"
"","17197","Document type safety limitations of the CollectionFactory API [SPR-12596]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12596](https://jira.spring.io/browse/SPR-12596?redirect=false)** and commented  #### Status Quo  As discussed in #17142, the `CollectionFactory` API is not type-safe.  #### Deliverables  1. [x] Update the Javadoc for `CollectionFactory` to point out that the API is not necessarily type-safe.  ---  **Affects:** 4.1.3  **Issue Links:** - #17142 CollectionFactory API is not type-safe (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a49a6535d4bbb8b6e575c4fb2725c620cb8dfd9","closed","in: core,","spring-projects-issues","2015-01-04T12:33:35Z","2019-01-11T18:38:37Z"
"","17183","ExtendedBeanInfo test fails on JDK 8u40 Build b19 [SPR-12582]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12582](https://jira.spring.io/browse/SPR-12582?redirect=false)** and commented  After upgrading the JDK to version _8u40 Build b19_ (i.e., `jdk-8u40-ea-bin-b19-macosx-x86_64-16_dec_2014.dmg` on a Mac), the `ExtendedBeanInfoTests.cornerSpr8937()` test fails with the following stack trace:  ``` java.lang.AssertionError:  Expected: is       but: was  	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20) 	at org.junit.Assert.assertThat(Assert.java:956) 	at org.junit.Assert.assertThat(Assert.java:923) 	at org.springframework.beans.ExtendedBeanInfoTests.cornerSpr8937(ExtendedBeanInfoTests.java:847) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) ```  Note: this test passed against JDK _8u40 Build b11_ (i.e., installed via `jdk-8u40-ea-bin-b11-macosx-x86_64-21_oct_2014.dmg` on a Mac).  ---  **Affects:** 4.1.4  **Issue Links:** - #13577 java.beans.IntrospectionException: type mismatch between indexed and non-indexed methods:  - #17186 General compatibility with JDK 8u40  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7492129236b3b37530a5f54cea0e3b38ff33c20f, https://github.com/spring-projects/spring-framework/commit/60cee7f52643c4a9f29cb081a1d50022bf17f955, https://github.com/spring-projects/spring-framework/commit/36da55128041778e98f52168d8806fe83b72a4c3","closed","in: core,","spring-projects-issues","2014-12-30T15:57:59Z","2019-01-11T18:24:13Z"
"","17343","Allow easier use of custom RequestMappingHandlerMapping in WebMvcConfigurationSupport  [SPR-12746]","**[Ryan Skow](https://jira.spring.io/secure/ViewProfile.jspa?name=skow)** opened **[SPR-12746](https://jira.spring.io/browse/SPR-12746?redirect=false)** and commented  The ability to customize `RequestMappingHandlerMapping` by overriding protected methods was added in #12468. However, `WebMvcConfigurationSupport` instantiates its own `RequestMappingHandlerMapping` and configures it with default settings all in a single method. This makes it hard to extend `WebMvcConfigurationSupport` to make it return an extension of `RequestMappingHandlerMapping` without copying and pasting a substantial chunk of code (in the `requestMappingHandlerMapping()` method).  It would be simple to extract the addition of the default configuration to `RequestMappingHandlerMapping` to a separate method, allowing extenders to avoid this duplication of internal Spring logic. A pull request will follow this issue.  ---  **Affects:** 4.1.5","closed","type: enhancement,","spring-projects-issues","2015-02-23T10:09:54Z","2019-01-11T21:26:52Z"
"","17733","Add an easy way to configure custom StompSubProtocolErrorHandler for StompSubProtocolHandler. [SPR-13142]","**[Rostislav Georgiev Georgiev](https://jira.spring.io/secure/ViewProfile.jspa?name=rgeorgiev)** opened **[SPR-13142](https://jira.spring.io/browse/SPR-13142?redirect=false)** and commented  Right now StompSubProtocolHandler is created inside WebMvcStompEndpointRegistry, but there is no easy way to configure it with custom StompSubProtocolErrorHandler. The only way I see is to use a BeanPostProcessor.    ---  **Affects:** 4.2 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d1cc8bac5cc4612caaa42e625b80b789a9c1dd80  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2015-06-18T00:55:47Z","2015-06-30T15:26:32Z"
"","17548","Same Origin check in both AbstractSockJSService and OriginHandshakeInterceptor is not working with Tyrus client [SPR-12956]","**[Rostislav Georgiev Georgiev](https://jira.spring.io/secure/ViewProfile.jspa?name=rgeorgiev)** opened **[SPR-12956](https://jira.spring.io/browse/SPR-12956?redirect=false)** and commented  Same Origin check in both AbstractSockJSService and OriginHandshakeInterceptor is delegating the check to WebUtils.isValidOrigin() . In this method a UriComponentsBuilder.fromHttpUrl(origin) is used, but if the origin header is set to only ""host:port"", which is the case with Tyrus client, an exception is thrown and validation is ""false"". So the only option is to configure the server with ""*"". Here a snippet from Tyrus' client Handshake.java class:  ```java public static void updateHostAndOrigin(final UpgradeRequest upgradeRequest) {         URI requestUri = upgradeRequest.getRequestURI();          String host = requestUri.getHost();         int port = requestUri.getPort();         if (upgradeRequest.isSecure()) {             if (port != 443 && port != -1) {                 host += "":"" + port;             }         } else {             if (port != 80 && port != -1) {                 host += "":"" + port;             }         }          Map> requestHeaders = upgradeRequest.getHeaders();         requestHeaders.put(UpgradeRequest.HOST, Collections.singletonList(host));         requestHeaders.put(UpgradeRequest.ORIGIN_HEADER, Collections.singletonList(host));     } ```  Maybe it's a bug in the Tyrus implementation, which is not appending the scheme. The Tyrus version used is 1.10.  In addition, some .NET libraries are specifying the request's schema as part of Origin value, which leads to Origin value like ""ws://host:port"" or ""wss://host:port"", which again fails the validation.   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b44044e36f4a670006c803795b20a62c836f2975, https://github.com/spring-projects/spring-framework/commit/68ecb92d1f3f9599d54dd48a1feff7e7af07544f","closed","type: enhancement,","spring-projects-issues","2015-04-26T03:56:27Z","2015-05-26T01:15:03Z"
"","17547","Using StandardWebSocketClient it's not possible to customize ClientEndpointConfig before it's passed to WebSocketContainer.connectToServer method [SPR-12955]","**[Rostislav Georgiev Georgiev](https://jira.spring.io/secure/ViewProfile.jspa?name=rgeorgiev)** opened **[SPR-12955](https://jira.spring.io/browse/SPR-12955?redirect=false)** and commented  StandardWebSocketClient in it's doHandshakeInternal method is using ClientEndpointConfig.Builder to initialize ClientEndpointConfig and is passing it directly to WebSocketContainer.connectToServer method. ClientEndpointConfig has a UserProperties map,  which can used to pass additional Container specific configurations. E.g. for example Tomcat WebSocket container will check userProperties for ""org.apache.tomcat.websocket.SSL_CONTEXT"" to setup SSLEngine.  It would be nice to have a way to supply StandardWebSocketClient with custom UserProperties.   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/222f6998e4013370f6179ffdd8353b2e9afcd1f5","closed","type: enhancement,","spring-projects-issues","2015-04-25T04:07:34Z","2015-05-26T01:15:06Z"
"","17796","NullPointerException possible in DefaultSubscriptionRegistry [SPR-13204]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13204](https://jira.spring.io/browse/SPR-13204?redirect=false)** and commented  #17482 introduced support for a selector header expression on SUBSCRIBE frames so that messages from the destination cache are further filtered based on that selector expression. During that additional filtering a NullPointerException is possible if unsubscribe takes place concurrently and the session subscription has been removed.  ---  **Affects:** 4.2 RC1  **Issue Links:** - #17482 Support 'selector' header for subscriptions with SimpleBrokerMessageHandler  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0b43e4e4f2ae8d59bcfb16b8d88c6a0c3a7b7ace","closed","type: bug,","spring-projects-issues","2015-07-06T14:06:27Z","2019-01-11T18:08:05Z"
"","17674","Custom async HandlerMethodReturnValueHandler should work with @ResponseBody  [SPR-13083]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13083](https://jira.spring.io/browse/SPR-13083?redirect=false)** and commented  Currently custom return value handlers are registered after built-in ones. This works fine except when creating a custom return value handler to support a DeferredResult-like return type, for example the RxJava `rx.Observable`, in which case the custom return value handler should be called first and then when the async value is computed the `@ResponseBody` return value handling should take place.    ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/210e10c6576ac87906d1a1f8ae037df72dfd2a9c  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-05-29T10:28:53Z","2015-06-30T15:26:26Z"
"","17483","DefaultCorsProcessor relies on Servlet 3 specific methods [SPR-12885]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12885](https://jira.spring.io/browse/SPR-12885?redirect=false)** and commented  The getHeader methods in the HttpServletResponse are 3.0 specific and may not be present. We've added some checks before in ServletServerHttpResponse for similar reasons (checking if the response has CORS headers already) and the check is only successful in Servlet 3+ environments.  Rather than re-implementing this or extracting it, I think it would make sense for DefaultCorsProcessor to create an instance of ServletServerHttpResponse and use it throughout instead of using the HttpServletRequest/Response directly.  There are added benefits to doing this. It will simplify access to header values via HttpHeaders and it also gives a reason to encapsulate CORS related header manipulation in HttpHeaders.  ---  This issue is a sub-task of #13916  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/83f269b512fb75508d8a53f1696a370134be0219, https://github.com/spring-projects/spring-framework/commit/e3060981551013c57486b72cfd6637d9b8a90292","closed","type: task,","spring-projects-issues","2015-04-03T08:08:31Z","2019-01-11T21:36:10Z"
"","17459","HttpEntity controller method arguments should allow null body [SPR-12861]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12861](https://jira.spring.io/browse/SPR-12861?redirect=false)** and commented  An HttpEntity controller method argument should be able to handle the case when the request body is empty by setting the body to null. Instead depending on the HttpMessageConverter used, currently it may result in an HttpMessageNotReadableException that is translated to 400 by default.  ---  **Affects:** 4.1.6  **Issue Links:** - #16447 Contract of `@RequestBody`(required=true) not obeyed - #17376 Re-allow handling empty request body","closed","type: bug,","spring-projects-issues","2015-03-29T07:49:44Z","2019-01-13T05:41:34Z"
"","17458","Contract of @RequestPart(required=false) not obeyed [SPR-12860]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12860](https://jira.spring.io/browse/SPR-12860?redirect=false)** and commented  Currently `@RequestPart`(required=false) works as expected only if the part is missing altogether. It should also work if the part is present but the content is empty. Instead currently, depending on the specific HttpMessageConverter used, it may result in an HttpMessageNotReadableException instead of null.  ---  **Affects:** 4.1.6  **Issue Links:** - #16447 Contract of `@RequestBody`(required=true) not obeyed - #17376 Re-allow handling empty request body","closed","type: bug,","spring-projects-issues","2015-03-29T07:43:46Z","2019-01-13T05:41:35Z"
"","17411","[doc] Update reference for STOMP client [SPR-12814]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12814](https://jira.spring.io/browse/SPR-12814?redirect=false)** and commented  ---  This issue is a sub-task of #16212  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/867971de899f038ddd3601fb35e906e05b8d04d1","closed","type: documentation,","spring-projects-issues","2015-03-12T20:03:40Z","2019-01-11T22:00:02Z"
"","17335","AnnotatedElementUtils fails to find annotations on abstract, bridge, or interface methods [SPR-12738]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12738](https://jira.spring.io/browse/SPR-12738?redirect=false)** and commented  #### Overview  This was encountered while adding support for `@RequestMapping` as meta annotation. Following a change from `AnnotationUtils.findAnnotation` to `AnnotatedElementUtils.getAnnotationAttributes`, there are failing integration tests with controller hierarchies.  ---  #### Analysis / Known Issues  1. `AnnotatedElementUtils` does not currently support interfaces or bridge methods in its search algorithms.  ---  #### Deliverables  1. [x] Support abstract methods in `AnnotatedElementUtils`. 2. [x] Support interface methods in `AnnotatedElementUtils`. 3. [x] Support bridge methods in `AnnotatedElementUtils`. 4. [ ] Support _bridged_ methods in `AnnotatedElementUtils`. 5. [x] Search for TODOs in `AnnotatedElementUtilsTests` and re-instate `@Ignore`'d tests. 6. [x] Search for TODOs in `TransactionalEventListenerTests` and re-instate `@Ignore`'d tests.  ---  **Affects:** 4.1.5  **Issue Links:** - #16901 Custom `@RequestMapping` annotations (_**""is depended on by""**_) - #17300 AnnotatedElementUtils does not find annotations on methods in dynamic proxies - #15734 Support composed annotations declared on interfaces - #16221 Favor more locally declared composed annotations over inherited annotations - #17537 AnnotatedElementUtils fails to find type-level annotations on interfaces - #16331 Consider not overriding meta-annotation attributes if empty  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7f0f04dfe38ead84e502f0d34897d1c415565cdd, https://github.com/spring-projects/spring-framework/commit/91e46cf2ad55fc8ec3bda087d5fe9c02aa1ec45b, https://github.com/spring-projects/spring-framework/commit/bccd59e6c8845c6521d3b325bea89bcbcbe4d833, https://github.com/spring-projects/spring-framework/commit/8ece1b145cf8e462a343c6088b4a75af67ea1b89, https://github.com/spring-projects/spring-framework/commit/ad6bea1cda366bd24ce641ed2207529dfca8b382, https://github.com/spring-projects/spring-framework/commit/e0d2dbd21da68e1e5bb6279934b8a2a7461aec51, https://github.com/spring-projects/spring-framework/commit/b94c6fdf7ae1305516166db710070acf4f967f21","closed","in: core,","spring-projects-issues","2015-02-20T10:12:16Z","2019-01-13T05:42:16Z"
"","17271","Add documentation for Server-Sent Events support [SPR-12672]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12672](https://jira.spring.io/browse/SPR-12672?redirect=false)** and commented  ---  **Affects:** 4.2 RC1  This issue is a sub-task of #16826  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/209e8de18855087329bf3a5a61fd31572559e7a2  1 votes, 3 watchers","closed","type: task,","spring-projects-issues","2015-01-29T14:58:55Z","2019-01-11T19:00:14Z"
"","17258","Use UUID.randomUUID() for session id's in SockJsClient [SPR-12658]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12658](https://jira.spring.io/browse/SPR-12658?redirect=false)** and commented  ---  **Affects:** 4.1.4  **Issue Links:** - #21761 Spring WebSocket Stomp tomcat cluster with user destinations sends message to wrong subscriber.","closed","type: enhancement,","spring-projects-issues","2015-01-22T18:21:50Z","2019-01-11T19:00:50Z"
"","17248","ResourceUrlProvider does not keep resource handlers ordered [SPR-12647]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12647](https://jira.spring.io/browse/SPR-12647?redirect=false)** and commented  When ResourceUrlProvider detects resource handlers, it sorts them with the OrderComparator but then internally uses a HashMap for the ""handlerMap"" field which stores the discovered handlers.  ---  **Affects:** 4.1.4  **Issue Links:** - #17193 ResourceUrlProvider should initialize only once","closed","type: bug,","spring-projects-issues","2015-01-20T13:17:17Z","2019-01-11T19:02:14Z"
"","17200","Upgrade to Reactor 2 [SPR-12599]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12599](https://jira.spring.io/browse/SPR-12599?redirect=false)** and commented  ---  **Affects:** 4.1.4  **Issue Links:** - #17387 Spring Messaging not compatible with Reactor 2.0 (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/60b19c784d7c8431ac0545a18607fe18fff4bfda, https://github.com/spring-projects/spring-framework/commit/74c025052541e70d61d3569a59f80d612fb08272  1 votes, 4 watchers","closed","type: task,","spring-projects-issues","2015-01-05T11:30:40Z","2019-01-11T18:38:46Z"
"","17621","Allow developers to specify the separates that the configLocation is split by [SPR-13028]","**[Rod Widdowson](https://jira.spring.io/secure/ViewProfile.jspa?name=rdw@steadingsoftware.com)** opened **[SPR-13028](https://jira.spring.io/browse/SPR-13028?redirect=false)** and commented  We (the Shibboleth Project) recently had an issue in which a user could not deploy our application into Tomcat while specifying a path with a space in it (it worked on Jetty because we hide the path in a property and jetty does not do property replacement as Tomcat does).  We fixed this by overriding  ``` org.springframework.context.support.AbstractRefreshableConfigApplicationContext#setConfigLocation ```  in our App Context  But we think it would be generally useful to others with a Windows userbase.  I attach a proposed fix - redirecting through a protected method which can be overridden,   ---  **Affects:** 4.1.5  **Attachments:** - [0001-Allow-the-developer-to-specify-the-config-location-s.patch](https://jira.spring.io/secure/attachment/22795/0001-Allow-the-developer-to-specify-the-config-location-s.patch) (_1.86 kB_)","closed","status: bulk-closed,","spring-projects-issues","2015-05-14T07:20:09Z","2019-01-12T00:16:27Z"
"","17244","Add the ability to turn off automatic derivation of Aliases for custom parsers. [SPR-12643]","**[Rod Widdowson](https://jira.spring.io/secure/ViewProfile.jspa?name=rdw@steadingsoftware.com)** opened **[SPR-12643](https://jira.spring.io/browse/SPR-12643?redirect=false)** and commented  We (The Shibboleth team), just rolled out a new version based on Spring 4.1.3 and a customer has tripped over an unfortunate side effect of the use of the attribute name=”whatever” as an alias for the bean.  We make extensive use of custom schema parsing and in one such schema we have a specific use for an attribute “name”.  It is in the nature of this attribute that the value (which is not used as a bean, but as an on-the-wire string) will have the same value as a different spring bean id.  The net result is that after our custom parser has done its stuff, AbstractBeanDefinitionParser#parse comes along an unconditionally pulls the content of the attribute called “name” and makes an alias.  This alias then tramples on the different bean definition with that id.  Things then rapidly deteriorate at this stage.  We have “fixed” this by overriding the method “registerBeanDefinition” in our parser:  ``` /** {@inheritDoc}     * We do not want Spring to add aliases derived from {@literal #NAME_ATTRIBUTE_NAME} so strip them out   * from the registry. */ @Override protected void registerBeanDefinition(BeanDefinitionHolder definition, BeanDefinitionRegistry registry) {     // Register bean definition under primary name. Do *not* register the aliases.     String beanName = definition.getBeanName();     registry.registerBeanDefinition(beanName, definition.getBeanDefinition());  } ```  But this is ugly and makes more use of internal knowledge than we’d like. Our suggestion is that you introduce another protected boolean method like “shouldGenerateId()” called (shall we say) ”shouldParseAliasesFromName()” with a default value of true.  You then consult this prior to creating the alias.  I can provide example code if you want, or even a proposed patch.  Or you might like to see our workaround in situ at  http://svn.shibboleth.net/view/java-identity-provider/trunk/idp-attribute-resolver-spring/src/main/java/net/shibboleth/idp/attribute/resolver/spring/enc/BaseAttributeEncoderParser.java?revision=7253&view=markup  Thanks  Rod   ---  **Affects:** 4.1.3  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2015-01-19T09:13:10Z","2015-02-20T04:13:17Z"
"","17907","Extend default script detection in `@Sql` to account for execution phase [SPR-13322]","**[Robert Thaler](https://jira.spring.io/secure/ViewProfile.jspa?name=rthaler)** opened **[SPR-13322](https://jira.spring.io/browse/SPR-13322?redirect=false)** and commented  #### Status Quo  We often need to prepare data before a specific test and clean up this data after the test. Therefore we use two distinct scripts assigned to the test's `ExecutionPhase`.  #### Proposal  Appending a suffix such as `_before` or `_after` to the default script name would allow one to use default detection with different scripts for preparation and cleanup.  #### Deliverables  1. Default script detection should take the `ExecutionPhase` into account.    ---  **Affects:** 4.1 GA","open","type: enhancement,","spring-projects-issues","2015-08-06T02:49:18Z","2021-10-13T12:56:46Z"
"","17847","Regression: PropertiesFactoryBean values do not get converted to target type without ConversionService [SPR-13256]","**[Robert Thaler](https://jira.spring.io/secure/ViewProfile.jspa?name=rthaler)** opened **[SPR-13256](https://jira.spring.io/browse/SPR-13256?redirect=false)** and commented  After upgrading a project from Spring 3.1.4 to 4.1.6, values set from property files via PropertyFactoryBean do not get converted to the destination type anymore.  Sample:  content of enum.properties level.warn=WARN level.info=INFO level.error=ERROR  enum Level { WARN, INFO, ERROR }  class TestBean { private Map levelMap;      public void setLevelMap( Map levelMap ) {     	this.levelMap = levelMap;     }  }  Instead of the expected value type Level a map with String values is set by spring.   ---  **Affects:** 4.1.6, 4.1.7  **Attachments:** - [testcase.zip](https://jira.spring.io/secure/attachment/22955/testcase.zip) (_4.33 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d4a23b81e9e49a6e9cc871d8bb1accc70c6444df","closed","in: core,","spring-projects-issues","2015-07-21T13:12:00Z","2015-09-01T11:38:23Z"
"","17988","DefaultDeserializer should use ConfigurableObjectInputStream [SPR-13409]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-13409](https://jira.spring.io/browse/SPR-13409?redirect=false)** and commented  It would be nice if DefaultDeserializer would use ConfigurableObjectInputStream with the ClassUtils.getDefaultClassLoader(). This would prevent issues with things like [spring-boot/issues/3805](https://github.com/spring-projects/spring-boot/issues/3805)   ---  **Affects:** 4.2 GA  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/3805  **Issue Links:** - [DATAREDIS-427](https://jira.spring.io/browse/DATAREDIS-427) Allow injecting deserializer for JdkSerializationRedisSerializer  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d99717c1cb4ca00405a8eac2aa75d16c7de80c52","closed","type: enhancement,","spring-projects-issues","2015-08-30T18:52:28Z","2015-09-01T11:38:22Z"
"","17851","MockMvc.perform with the TestContext framework causes additional perform invocations to be ""polluted"" [SPR-13260]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-13260](https://jira.spring.io/browse/SPR-13260?redirect=false)** and commented  The following has worked in prior versions of Spring Framework and the 4.2.0.BUILD-SNAPSHOT up until today. To be clear I believe this bug is a regression that is in 4.2.0.BUILD-SNAPSHOT.  ```java @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration @WebAppConfiguration public class MockMvcPerformTwiceTests { 	@Autowired 	WebApplicationContext context;  	@Test 	public void mockMvcPerformTwice() throws Exception { 		final String SESSION_ATTR = ""mockMvcPerformTwice""; 		MockMvc mvc = MockMvcBuilders 				.webAppContextSetup(context) 				.build();  		mvc 			.perform(get(""/"").sessionAttr(SESSION_ATTR, ""value"")) 			.andExpect(request().sessionAttribute(SESSION_ATTR, not(nullValue())));  		mvc 			.perform(get(""/"")) 			.andExpect(request().sessionAttribute(SESSION_ATTR, nullValue())); 	}  	@Configuration 	@EnableWebMvc 	static class Config { 		@Bean 		public MyController myController() { 			return new MyController(); 		} 	}  	@RestController 	static class MyController { 		@RequestMapping(""/"") 		public String hello() { 			return ""hello""; 		} 	} } ```  I believe this is related to the changes in #17803 but do not have time investigate further. I wanted to log this issue to ensure we figure out what is going on before GA.  ---  **Affects:** 4.2 GA  **Issue Links:** - #17803 Reuse MockHttpServletRequest from ServletTestExecutionListener in Spring MVC Test framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3c799e6e05a44989016912b8b80af6d653f28035","closed","type: regression,","spring-projects-issues","2015-07-21T20:59:07Z","2019-01-11T18:02:54Z"
"","17811","JdbcTemplate.queryForObject(sql, .class) produces TypeMismatchDataAccessException [SPR-13220]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-13220](https://jira.spring.io/browse/SPR-13220?redirect=false)** and commented  The following code  ```java int i = jdbcTemplate.queryForObject(sql,int.class); ```  produces  ``` org.springframework.dao.TypeMismatchDataAccessException: Type mismatch affecting row number 0 and column type 'null': Value [22] is of type [java.lang.Integer] and cannot be converted to required type [int] 	at org.springframework.jdbc.core.SingleColumnRowMapper.mapRow(SingleColumnRowMapper.java:101) 	at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:93) 	at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:60) 	at org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:459) 	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:404) 	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:470) 	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:480) 	at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:490) 	at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:496) ```  Instead, Spring should convert the Integer to an int.  **Migrating from Spring 4.1 to 4.2**  This bug is much more apparent now that Spring 4.2 [removed](https://github.com/spring-projects/spring-framework/commit/9ac02b319d2fde39b5bb1cf11b5525b4f55cd198#diff-2607d67efa0efe6a1199318df70470d7) methods like `int queryForInt(String sql)`. It seems that many users may update the following Spring pre 4.2 code:  ```java int i = jdbcTemplate.queryForInt(sql); ```  to be  ```java int i = jdbcTemplate.queryForObject(sql, int.class); ```  which would produce the above `TypeMismatchDataAccessException`. Obviously one could easily do:  ```java int i = jdbcTemplate.queryForObject(sql, Integer.class); ```  to workaround the issue.  ---  **Affects:** 4.2 RC2  **Issue Links:** - #17179 Remove pre-3.2 deprecated classes and methods  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/836, and commits https://github.com/spring-projects/spring-framework/commit/e0329306dffd31ca4f3b9dfd5167b4f7e612158e","closed","type: enhancement,","spring-projects-issues","2015-07-10T08:03:30Z","2019-01-11T18:05:38Z"
"","17783","DelegatingFilterProxy should be aware of FrameworkServlet's WebApplicationContext [SPR-13191]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-13191](https://jira.spring.io/browse/SPR-13191?redirect=false)** and commented  #### Status Quo  Currently Spring Security users are accustomed to configuring Spring Security in a _root_ WAC (`WebApplicationContext`) and Spring MVC in the `DispatcherServlet` WAC.  This makes configuration unnecessarily complex in many situations (a parent / child context). For example, when users want to have method level security for a Spring MVC application it is unintuitive to them that they need to add a `BeanPostProcessor` to the `DispatcherServlet` WAC as well.  #### Proposal  To support a single WAC, it would be nice if `DelegatingFilterProxy` could fall back to looking in the `DispatcherServlet` WAC. This simplifies the configuration so that users don't need to specify the `contextAttribute` on the `DelegatingFilterProxy` which is difficult to remember the value for (i.e. `org.springframework.web.servlet.FrameworkServlet.CONTEXT.dispatcher`).   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/834, and commits https://github.com/spring-projects/spring-framework/commit/1fcd465f2d281a432eee79adfe1d4d8dd7ec3630  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-07-02T09:36:40Z","2015-07-15T09:05:07Z"
"","17749","Add MockMvc HtmlUnit Integration [SPR-13158]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-13158](https://jira.spring.io/browse/SPR-13158?redirect=false)** and commented  This issue depends on the release of HtmlUnit 2.18 which will support Apache HttpComponents 4.5. See [HtmlUnit issue 1692](http://sourceforge.net/p/htmlunit/bugs/1692/#80b9) for details.  Pull Request: https://github.com/spring-projects/spring-framework/pull/825  ---  **Affects:** 4.2 RC2  **Reference URL:** https://github.com/spring-projects/spring-test-htmlunit  **Issue Links:** - #17803 Reuse MockHttpServletRequest from ServletTestExecutionListener in Spring MVC Test framework - #18261 Support for HtmlUnit 2.19  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2015-06-23T08:55:36Z","2019-01-11T16:21:36Z"
"","17538","Default RequestPostProcessor should be executed first [SPR-12945]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12945](https://jira.spring.io/browse/SPR-12945?redirect=false)** and commented  If a RequestPostProcessor is used with the default request, it is placed after additional RequestPostProcessors. For example, the following test fails:  ```java  @Before public void setup() { 	MockHttpServletRequestBuilder defaultRequest = get(""/"") 			.with(requestAttr(""ATTR"").value(""default"")); 	mvc = MockMvcBuilders.webAppContextSetup(context) 		.defaultRequest(defaultRequest) 		.build(); }  @Test public void defaultRequestPostProcessorsShouldExecuteBeforeAdditionalRequestPostProcessors() throws Exception { 	MockHttpServletRequestBuilder request = get(""/abc"") 			.with(requestAttr(""ATTR"").value(""override""));  	mvc.perform(request) 		.andExpect(request().attribute(""ATTR"", ""override"")); }  private static RequestAttributePostProcessor requestAttr(String name) { 	return new RequestAttributePostProcessor().attr(name); }  public class RequestAttributePostProcessor implements RequestPostProcessor {  	String attr;  	String value;  	public RequestAttributePostProcessor attr(String attr) { 		this.attr = attr; 		return this; 	}  	public RequestAttributePostProcessor value(String value) { 		this.value = value; 		return this; 	}  	public MockHttpServletRequest postProcessRequest(MockHttpServletRequest request) { 		request.setAttribute(attr, value); 		return request; 	}  } ```  A default RequestPostProcessor should happen first so that additional RequestPostProcessors override additional RequestPostProcessors.  The problem appears to be in [MockHttpServletRequestBuilder.merge](https://github.com/spring-projects/spring-framework/blob/a3159dfbf24168b95f9d3435bea15721cde8fb38/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java#L540) which adds the parent to the end instead of the front of the postProcessors.   ---  **Affects:** 4.1.6  **Issue Links:** - [SEC-2941](https://jira.spring.io/browse/SEC-2941) Default RequestPostProcessor overrides additional DefaultRequestPostProcessor (_**""is depended on by""**_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/782, and commits https://github.com/spring-projects/spring-security/commit/dd092431a03b5500617dc4d8d606fed8208fb768, https://github.com/spring-projects/spring-security/commit/269127c2c62bc0f86ab94c9ccffabce1e7b05024","closed","type: enhancement,","spring-projects-issues","2015-04-22T13:30:41Z","2015-05-26T01:15:31Z"
"","17443","Provide Access to Spring WebSocket's Configured PathMatcher [SPR-12845]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12845](https://jira.spring.io/browse/SPR-12845?redirect=false)** and commented  Spring Security should be able to default to using the same PathMatcher that Spring WebSockets is using. This is ideal so that they both use the same PathMatcher (i.e. using . or / separators).  Using SimpAnnotationMethodMessageHandler PathMatcher property does not work because it fails with a circular bean reference. This happens because:  * stompWebSocketHandlerMapping requests subProtocolWebSocketHandler * subProtocolWebSocketHandler requests clientInboundChannel * clientInboundChannel requests clientInboundChannelExecutor * clientInboundChannelExecutor requests simpAnnotationMethodMessageHandler. This is due to the fact the creation of clientInboundChannelExecutor invokes configureClientInboundChannel and in order to configureClientInboundChannel, we must lookup simpAnnotationMethodMessageHandler to determine the PatternMatcher * simpAnnotationMethodMessageHandler then looks up clientInboundChannel (which is a cycle)  You can find my attempt at https://github.com/rwinch/spring-security/tree/SEC-2864 The exact test is [AbstractSecurityWebSocketMessageBrokerConfigurerTests#msmsRegistryCustomPatternMatcher](https://github.com/rwinch/spring-security/commit/df19926175646feec9b9310d40cbed4d32e5d292#diff-f231f014004aa0ce1fcd63c1f4f9c683R236)  Note that I cannot use MessageBrokerRegistry directly because it is not exposed as a Bean and the accessor is protected.   ---  **Issue Links:** - [SEC-2864](https://jira.spring.io/browse/SEC-2864) Default PathMatcher for WebSocket Destination Matching  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ae3417133bc0537d55a09a0be210161a8957515f, https://github.com/spring-projects/spring-framework/commit/e81862eed6438c1acf1ecaf6f6d554e31300fb56","closed","type: enhancement,","spring-projects-issues","2015-03-23T15:16:01Z","2015-05-26T01:15:31Z"
"","17315","Allow Extensions to provide default HandshakeInterceptors [SPR-12718]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12718](https://jira.spring.io/browse/SPR-12718?redirect=false)** and commented  There is currently no easy way to allow extensions to provide a `HandshakeInterceptor` automatically when using Java Configuration.  This is necessary for Spring Security to provide a `HandshakeInterceptor` implementation that copies an `HttpServletRequest` attribute (the current valid CSRF token) into the WebSocket Session attributes map using a `HandshakeInterceptor` implementation.  The approach that was suggested (using a `BeanPostProcessor`) will not work because the `TransportHandlingSockJsService` that `SockJsServiceRegistration` produces is not exposed as a Bean.  One approach that might work is overriding the `StompEndpointRegistry` to return a `SockJsServiceRegistration` instance that was already populated with the necessary `HandshakeInterceptor` implementation. However, this limits users as pointed out in [spring-session/issues/98](https://github.com/spring-projects/spring-session/issues/98)   ---  **Affects:** 4.1.4","closed","type: enhancement,","spring-projects-issues","2015-02-15T14:24:36Z","2015-02-16T11:36:23Z"
"","17313","WebSocketTransportHandler passes Collections.emptyMap() to HandshakeHandler [SPR-12716]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12716](https://jira.spring.io/browse/SPR-12716?redirect=false)** and commented  [WebSocketTransportHandler](https://github.com/spring-projects/spring-framework/blob/v4.1.4.RELEASE/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/WebSocketTransportHandler.java#L83) passes in an empty Map into the delegate `HandshakeHandler`. This causes two problems:  * The first is that no attributes that are were copied from any `HandshakeInterceptor` instances are available. For example, `TransportHandlingSockJsService` will invoke the `HandshakeInterceptor` and then delegate to a [WebSocketTransportHandler](https://github.com/spring-projects/spring-framework/blob/v4.1.4.RELEASE/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java#L270). Since the attributes provided by the `HandshakeInterceptor` are not passed into the delegate `HandshakeHandler` * The second is that the delegate `HandshakeHandler` cannot populate any attributes to be provided in the WebSocket Session. For one Collections.emptyMap() is immutable. For two, the values are never copied to the WebSocket Session.    ---  **Affects:** 4.1.4","closed","type: bug,","spring-projects-issues","2015-02-14T13:23:27Z","2015-02-20T04:13:16Z"
"","17284","Change SockJS default to allowing same origin only [SPR-12685]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12685](https://jira.spring.io/browse/SPR-12685?redirect=false)** and commented  Now that #17294 brings same origin check support, we should use this as the default behavior. Users that needs cross origin supports should explicitly set allowedOrgins to `*` as described in section [Configuring allowed origins](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#websocket-server-allowed-origins) of the reference documentation.  ---  **Reference URL:** https://groups.google.com/d/msg/sockjs/4aP-b8tyK7w/5ZY7pFmuSj8J  **Issue Links:** - #17294 Add same origin support to SockJS and WebSocket (_**""depends on""**_) - #17337 Websocket call to /ws/info now returns a 403  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6062e15572eefa73954a69c109cc90f068486065, https://github.com/spring-projects/spring-framework/commit/23fa37b08b8cc3fe3a716cdd1d9b612c2eaecb50  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-02-03T10:02:23Z","2019-01-11T18:40:50Z"
"","17260","AbstractSockJsService.checkAndAddCorsHeaders fails for same origin requests when setAllowedOrigins is set [SPR-12660]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12660](https://jira.spring.io/browse/SPR-12660?redirect=false)** and commented  If the StompEndpointRegistry.setAllowedOrigins does not contain ""*"", then any requests made from the same domain will be rejected (i.e. it is only possible for an external domain to work).  This is due to the fact that that if a request made from the same domain, the browser does not add the ""Origin"" header. That means that [checkAndAddCorsHeaders](https://github.com/spring-projects/spring-framework/blob/v4.1.4.RELEASE/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java#L427) will reject the request.  ---  **Affects:** 4.1.4  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/v4.1.4.RELEASE/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java#L427  **Issue Links:** - #16841 Add Simple way of whitelisting origin - #17295 Javascript error with SockJS when using iframe-htmlfile + IE8 - #17296 Add CSP 1.1 frame-ancestors support - #17294 Add same origin support to SockJS and WebSocket  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cc78d40c6bd925b762088d75c6534b19fdc5f9da, https://github.com/spring-projects/spring-framework/commit/9b3319b3b3f4c974c34a326c29dec480051dcae9  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2015-01-23T13:02:34Z","2019-01-11T19:01:04Z"
"","17247","@Autowired List into Configuration that defines @Bean ToAutoWire fails [SPR-12646]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12646](https://jira.spring.io/browse/SPR-12646?redirect=false)** and commented  Starting with Spring 4.0.7 (4.0.6 works) the following setup will fail because only the ToAutoWire(""a"") will be `Autowired` :  ``` public class ToAutoWire {     private final String name;      public ToAutoWire(String name) {         super();         this.name = name;     } }  @Configuration public class ConfigA {      @Bean     public ToAutoWire a() {         return new ToAutoWire(""a"");     } }  @Configuration public class ConfigB {     List values;      @Bean     public ToAutoWire b() {         return new ToAutoWire(""b"");     }      @Autowired     public void setValues(List values) {         this.values = values;     } }  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = {ConfigA.class, ConfigB.class}) public class AutowireListTests {     @Autowired     ConfigB b;      @Test     public void run() {         assertEquals(2,b.values.size());     } } ```  A few notes: * Using Spring 4.0.6 and prior appears to work just fine * If ConfigA is removed from the test, `ConfigB` will correctly autowire `ToAutoWire(""b"")` * When I was putting this together I got this isolated test case within another project and tried to reproduce it, but it failed. For whatever reason coping the complete project exactly as is and then removing the additional pieces seemed to ensure the issue was fixed in 4.0.6 properly (it was consistently failing otherwise). This leads me to believe this may be some sort of ordering issue. * You can find a sample of the application at https://github.com/rwinch/spring-framework-issues/tree/SPR-12646/SPR-12646 (Note this is in my #17247 branch) * This seems to be causing [SEC-2822](https://jira.spring.io/browse/SEC-2822)  ---  **Affects:** 4.0.7, 4.0.8, 4.0.9, 4.1 GA, 4.1.1, 4.1.2, 4.1.3, 4.1.4  **Reference URL:** https://github.com/rwinch/spring-framework-issues/tree/SPR-12646  **Issue Links:** - #16743 Autowire bean in `@Configuration` class itself - #16634 Spring may invoke `@Bean` methods too early in case of a circular reference - [SEC-2822](https://jira.spring.io/browse/SEC-2822) IllegalStateException: Cannot apply DaoAuthenticationConfigurer to already built object","closed","in: core,","spring-projects-issues","2015-01-19T21:05:24Z","2019-01-13T05:42:42Z"
"","17475","@SessionAttributes contract fails when using @ResponseBody [SPR-12877]","**[Rob Shepherd](https://jira.spring.io/secure/ViewProfile.jspa?name=robshep)** opened **[SPR-12877](https://jira.spring.io/browse/SPR-12877?redirect=false)** and commented  `@ResponseBody` commits the body before `@SessionAttributes-related` actions can provide a Session.  See the example on StackOverflow.  I can appreciate the mechanism why this fails, but at the least a note in the Docs would save somebody else ""discovering"" this caveat for themselves.    ---  **Affects:** 4.1.6  **Reference URL:** https://stackoverflow.com/questions/29381181/spring-sessionattributes-and-cannot-create-a-session-after-the-response-has-be","closed","type: enhancement,","spring-projects-issues","2015-04-01T09:03:27Z","2015-04-01T12:22:08Z"
"","17919","hibernate 5 abstract method error [SPR-13334]","**[Rob Platt](https://jira.spring.io/secure/ViewProfile.jspa?name=drrob)** opened **[SPR-13334](https://jira.spring.io/browse/SPR-13334?redirect=false)** and commented  When switching to hibernate 5 and using Hibernate with JPA, I get a ""java.lang.AbstractMethodError: null"".  I've found someone else has the same problem on Stackoverflow currently with no solution:  http://stackoverflow.com/questions/31775410/spring4-2-1-hibernate5-integrate-abstract-method-error#  I tried Hibernate 5.0.0.CR1 and 5.0.0.CR4, both have the same issue.   ---  **Affects:** 4.2 GA  **Reference URL:** http://stackoverflow.com/questions/31775410/spring4-2-1-hibernate5-integrate-abstract-method-error#","closed","status: duplicate,","spring-projects-issues","2015-08-09T09:44:43Z","2019-01-12T16:46:03Z"
"","17852","Transaction synchronizations are not invoked in AbstractPlatformTransactionManager [SPR-13261]","**[Rob Barrett](https://jira.spring.io/secure/ViewProfile.jspa?name=barrett.rob)** opened **[SPR-13261](https://jira.spring.io/browse/SPR-13261?redirect=false)** and commented  All TransactionSynchronizationManager.invoke* methods are guarded by a if (status.isNewSynchronization()) { ... } guard.  When the transaction status object is instantiated, the value of the newSynchronization boolean is set as follows:      boolean actualNewSynchronization = newSynchronization &&               !TransactionSynchronizationManager.isSynchronizationActive();     return new DefaultTransactionStatus(               transaction, newTransaction, actualNewSynchronization,               definition.isReadOnly(), debug, suspendedResources);  This does not make sense. The first line should be boolean actualNewSynchronization = newSynchronization && TransactionSynchronizationManager.isSynchronizationActive();   ---  **Affects:** 3.2.4","closed","status: declined,","spring-projects-issues","2015-07-22T00:03:35Z","2019-01-12T16:23:08Z"
"","17614","NPE in PropertyOrFieldReference due to concurrency issue when caching SpelExpression objects [SPR-13023]","**[Rene Avontuur](https://jira.spring.io/secure/ViewProfile.jspa?name=ravontuur)** opened **[SPR-13023](https://jira.spring.io/browse/SPR-13023?redirect=false)** and commented  Thymeleaf applications may experience frequent null-pointer exceptions in their production logs or load test logs due to a multi-threading issue in Spring's PropertyOrFieldReference class. See also https://github.com/thymeleaf/thymeleaf-spring/issues/83 for a reproduction path.  The cacheManager in Thymeleaf shares SpelExpression objects over multiple threads. These threads could possibly change concurrently the shared field ast.cachedReadAccessor, which happens in class PropertyOrFieldReference.  Added a patch file that solves this issue.  ``` SEVERE: Servlet.service() for servlet [spring] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: ""prices"" (page_element:9)] with root cause java.lang.NullPointerException 	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:84) 	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:115) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:265) 	at org.thymeleaf.spring4.expression.SpelVariableExpressionEvaluator.evaluate(SpelVariableExpressionEvaluator.java:139) 	at org.thymeleaf.standard.expression.SelectionVariableExpression.executeSelectionVariable(SelectionVariableExpression.java:146) 	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:80) 	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:103) 	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:133) 	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:120) 	at org.thymeleaf.standard.fragment.StandardFragmentProcessor.resolveFragmentParameters(StandardFragmentProcessor.java:154) 	at org.thymeleaf.standard.fragment.StandardFragmentProcessor.computeStandardFragmentSpec(StandardFragmentProcessor.java:98) 	at org.thymeleaf.standard.processor.attr.AbstractStandardFragmentHandlingAttrProcessor.computeFragment(AbstractStandardFragmentHandlingAttrProcessor.java:68) 	at org.thymeleaf.processor.attr.AbstractFragmentHandlingAttrProcessor.processAttribute(AbstractFragmentHandlingAttrProcessor.java:63) 	at org.thymeleaf.processor.attr.AbstractAttrProcessor.doProcess(AbstractAttrProcessor.java:87) 	at org.thymeleaf.processor.AbstractProcessor.process(AbstractProcessor.java:212) 	at org.thymeleaf.dom.Node.applyNextProcessor(Node.java:1017) 	at org.thymeleaf.dom.Node.processNode(Node.java:972) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.Document.process(Document.java:93) 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1155) 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060) 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011) 	at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335) 	at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190) 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1228) 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1011) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:955) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:852) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100) 	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408) 	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041) 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:603) 	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:312) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) 	at java.lang.Thread.run(Thread.java:745)  ```  ---  **Affects:** 4.1.6  **Reference URL:** https://github.com/thymeleaf/thymeleaf-spring/issues/83  **Attachments:** - [PropertyOrFieldReference.patch](https://jira.spring.io/secure/attachment/22792/PropertyOrFieldReference.patch) (_1.56 kB_)  **Issue Links:** - #19416 NPE PropertyOrFieldReference$AccessorLValue due to concurrency issue - #17838 PropertyOrFieldReference throws ClassCastException","closed","in: core,","spring-projects-issues","2015-05-13T06:11:19Z","2019-01-11T16:03:14Z"
"","17383","Regression in 4.1: UnsatisfiedDependencyException because a prototype-scoped FactoryBean is unexpectedly instantiated by getTypeForFactoryBean() [SPR-12786]","**[Reid Harrison](https://jira.spring.io/secure/ViewProfile.jspa?name=rharr90)** opened **[SPR-12786](https://jira.spring.io/browse/SPR-12786?redirect=false)** and commented  Occurs after update to 4.1.4 from 4.0.4. More specifically, 4.0.9 to 4.1.0.  Please see https://github.com/reid-harrison/my-failing-bean for a sample project that reproduces the issue.  ---  **Affects:** 4.1 GA, 4.1.5  **Reference URL:** http://stackoverflow.com/questions/28859716/prototype-scoped-spring-bean-incorrectly-created-at-context-creation-time-after  **Issue Links:** - #16461 HttpInvokerProxyFactoryBean and co do not reliably expose correct type when declared via `@Bean` - #15860 BeanFactory lacks method for getting bean by type with specified constructor arguments  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9b25d6ad8bf3ca40a1dfc9d4327831fd4a8cf6fc, https://github.com/spring-projects/spring-framework/commit/f01a0303f176439f6d3976296dea94a83ff00a45","closed","in: core,","spring-projects-issues","2015-03-04T19:36:20Z","2019-01-13T05:41:53Z"
"","18009","Bad mapping with @Resource [SPR-13430]","**[RAZE Olivier](https://jira.spring.io/secure/ViewProfile.jspa?name=olivier57420)** opened **[SPR-13430](https://jira.spring.io/browse/SPR-13430?redirect=false)** and commented  Hi,  I have defined two beans with same class: org.springframework.scheduling.quartz.SchedulerFactoryBean but with different id;  when i want inject a bean i write `@Resource`(name=""id1"") and i have this error:  org.springframework.beans.factory.BeanNotOfRequiredTypeException: Bean named 'id1' must be of type [org.springframework.scheduling.quartz.SchedulerFactoryBean], but was actually of type [org.quartz.impl.StdScheduler]  if i write `@Autowired` `@Qualifer`('id1') there is no error.  PS: Sorry for my english   ---  **Affects:** 3.2.3","closed","in: core,","spring-projects-issues","2015-09-04T13:25:40Z","2019-01-11T17:11:03Z"
"","17842","JSR-303 assertTrue not working for nested properties [SPR-13251]","**[Raul Mordillo LLuva](https://jira.spring.io/secure/ViewProfile.jspa?name=roaslin)** opened **[SPR-13251](https://jira.spring.io/browse/SPR-13251?redirect=false)** and commented  Related to #15251  ```java package test;  import static org.junit.Assert.assertEquals;  import javax.validation.Valid; import javax.validation.constraints.AssertTrue;  import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import org.springframework.validation.DirectFieldBindingResult; import org.springframework.validation.Errors; import org.springframework.validation.Validator; import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = ValidationIntegrationTest.TestConfiguration.class) public class ValidationIntegrationTest {      @Autowired     private Validator springValidator;      @Autowired     private javax.validation.Validator jsr303Validator;      @Test     public void jsr303() {         A a = new A();         assertEquals(1, jsr303Validator.validate(a).size());     }      @Test     public void spring() {         A a = new A();         Errors errors = new DirectFieldBindingResult(a, ""A"");         springValidator.validate(a, errors);         assertEquals(1, errors.getAllErrors().size());     }      @Test     public void jsr303Nested() {         A a = new A();         a.setB(new B());         assertEquals(1, jsr303Validator.validate(a).size());     }      @Test     public void springNested() {         A a = new A();         a.setB(new B());         Errors errors = new DirectFieldBindingResult(a, ""A"");         springValidator.validate(a, errors);         assertEquals(1, errors.getAllErrors().size());     }      @Configuration     static class TestConfiguration {         @Bean         public LocalValidatorFactoryBean localValidatorFactoryBean() {             return new LocalValidatorFactoryBean();         }     }      public static class A {         @Valid         private B b;          @AssertTrue         private boolean isBPresent() {             return b != null;         }          public B getB() {             return b;         }          public void setB(B b) {             this.b = b;         }     }      public static class B {         private String value;          @AssertTrue         private boolean isValuePresent() {             return value != null;         }          public String getValue() {             return value;         }          public void setValue(String value) {             this.value = value;         }     } } ```  ---  **Affects:** 4.1.7","closed","in: core,","spring-projects-issues","2015-07-20T02:15:58Z","2019-01-12T05:24:03Z"
"","17216","Supporting method in SimpleBrokerMessageHandlerTests not asserting anything [SPR-12615]","**[Ralph Schaer](https://jira.spring.io/secure/ViewProfile.jspa?name=ralsa)** opened **[SPR-12615](https://jira.spring.io/browse/SPR-12615?redirect=false)** and commented  The return value of the method org.springframework.messaging.simp.broker.SimpleBrokerMessageHandlerTests#assertCapturedMessage is never checked. So it never asserts the captured messages  There are two wrong expected assert messages (assertEquals(""Expected .....) in this unit test org.springframework.messaging.simp.broker.DefaultSubscriptionRegistryTests  Line 269: Should be ""two"" instead of ""three"" Line 313: Should be ""one"" instead of ""three""   ---  **Affects:** 4.1.4  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-messaging/src/test/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandlerTests.java  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/497944f0dd9a9cb49b5f41397cb41a07a67eaf25, https://github.com/spring-projects/spring-framework/commit/84807c5d61bec8a72c42f7bf8aaf83df858a1593","closed","type: task,","spring-projects-issues","2015-01-11T01:44:45Z","2015-02-20T04:13:11Z"
"","17740","GzipResourceResolver has NullPointerException when used with VersionResourceResolver [SPR-13149]","**[Rakesh](https://jira.spring.io/secure/ViewProfile.jspa?name=rpanati)** opened **[SPR-13149](https://jira.spring.io/browse/SPR-13149?redirect=false)** and commented  Hi,  I have my Resource Handling config as below  ```java     @Override     public void addResourceHandlers(ResourceHandlerRegistry registry) {          //Set cachePeriod to 1 year if its not local mode         Integer cachePeriod = (365*24*60*60);          VersionResourceResolver versionResolver = new VersionResourceResolver()                 .addContentVersionStrategy(""/**"");          registry.addResourceHandler(""/**"")                 .addResourceLocations(""/"")                     .setCachePeriod(cachePeriod)                         .resourceChain(true)                             .addResolver(versionResolver)                                 .addResolver(new GzipResourceResolver())                                 .addResolver(new PathResourceResolver())                                 .addTransformer(new AppCacheManifestTransformer())                                 .addTransformer(new CssLinkResourceTransformer());     } ```  My thymeleaf based HTML page has the resource as below        Now, when this page is loading, the request fails with NullPointerException. Below is the stack trace  ``` Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Error during execution of processor 'org.thymeleaf.spring4.processor.attr.SpringHrefAttrProcessor' (error) 	at org.thymeleaf.processor.AbstractProcessor.process(AbstractProcessor.java:225) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.applyNextProcessor(Node.java:1017) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.processNode(Node.java:972) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.processNode(Node.java:990) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.processNode(Node.java:990) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.processNode(Node.java:990) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Document.process(Document.java:93) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1155) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335) [thymeleaf-spring4-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190) [thymeleaf-spring4-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1244) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1027) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:971) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	... 140 more Caused by: java.lang.NullPointerException 	at org.springframework.web.servlet.resource.GzipResourceResolver.isGzipAccepted(GzipResourceResolver.java:69) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.resource.GzipResourceResolver.resolveResourceInternal(GzipResourceResolver.java:51) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.resource.AbstractResourceResolver.resolveResource(AbstractResourceResolver.java:46) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.resource.DefaultResourceResolverChain.resolveResource(DefaultResourceResolverChain.java:57) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.resource.VersionResourceResolver.resolveUrlPathInternal(VersionResourceResolver.java:190) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.resource.AbstractResourceResolver.resolveUrlPath(AbstractResourceResolver.java:60) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.resource.DefaultResourceResolverChain.resolveUrlPath(DefaultResourceResolverChain.java:71) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.resource.CachingResourceResolver.resolveUrlPathInternal(CachingResourceResolver.java:99) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.resource.AbstractResourceResolver.resolveUrlPath(AbstractResourceResolver.java:60) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.resource.DefaultResourceResolverChain.resolveUrlPath(DefaultResourceResolverChain.java:71) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.resource.ResourceUrlProvider.getForLookupPath(ResourceUrlProvider.java:221) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter$ResourceUrlEncodingResponseWrapper.encodeURL(ResourceUrlEncodingFilter.java:78) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.thymeleaf.standard.expression.LinkExpression.executeLink(LinkExpression.java:378) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:77) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:103) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:133) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:120) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.standard.processor.attr.AbstractStandardSingleAttributeModifierAttrProcessor.getTargetAttributeValue(AbstractStandardSingleAttributeModifierAttrProcessor.java:67) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.spring4.processor.attr.SpringHrefAttrProcessor.getTargetAttributeValue(SpringHrefAttrProcessor.java:68) [thymeleaf-spring4-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.processor.attr.AbstractSingleAttributeModifierAttrProcessor.getModifiedAttributeValues(AbstractSingleAttributeModifierAttrProcessor.java:59) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.processor.attr.AbstractAttributeModifierAttrProcessor.processAttribute(AbstractAttributeModifierAttrProcessor.java:62) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.processor.attr.AbstractAttrProcessor.doProcess(AbstractAttrProcessor.java:87) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.processor.AbstractProcessor.process(AbstractProcessor.java:212) [thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	... 162 more ```  This is because VersionResourceResolver passes the request object as null in below code snippet      @Override     protected String resolveUrlPathInternal(String resourceUrlPath, List locations, ResourceResolverChain chain) {     	String baseUrl = chain.resolveUrlPath(resourceUrlPath, locations);     	if (StringUtils.hasText(baseUrl)) {     		VersionStrategy versionStrategy = getStrategyForPath(resourceUrlPath);     		if (versionStrategy == null) {     			return null;     		}     		if (logger.isTraceEnabled()) {     			logger.trace(""Getting the original resource to determine version"");     		}     		Resource resource = chain.resolveResource(null, baseUrl, locations);     		String version = versionStrategy.getResourceVersion(resource);     		if (logger.isTraceEnabled()) {     			logger.trace(""Version="" + version);     		}     		return versionStrategy.addVersion(baseUrl, version);     	}     	return baseUrl;     }    ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3f01998d20b1b8fdde97c7f229ecbc4cfde50a4, https://github.com/spring-projects/spring-framework/commit/9ada55dc6bd75059a8790193a137840ad8d20fec","closed","type: bug,","spring-projects-issues","2015-06-19T20:20:21Z","2015-06-30T10:41:39Z"
"","17241","mvc:resources does not work with Wildfly 8.x [SPR-12640]","**[Rahul Sethi](https://jira.spring.io/secure/ViewProfile.jspa?name=rahulsethi)** opened **[SPR-12640](https://jira.spring.io/browse/SPR-12640?redirect=false)** and commented   works fine on apache tomcat and jboss 7 server but it does not work with jboss wildfly server. The error is:  ``` 18:08:54,122 ERROR [io.undertow.request] (default task-24) Blocking request failed HttpServerExchange{ GET /aladdinview/css/brs_chrome.css}: java.lang.RuntimeException: io.undertow.server.TruncatedResponseException 	at io.undertow.servlet.spec.HttpServletResponseImpl.responseDone(HttpServletResponseImpl.java:527) 	at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:287) 	at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:227) 	at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:73) 	at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:146) 	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:177) 	at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:727) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) [rt.jar:1.7.0_67] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) [rt.jar:1.7.0_67] 	at java.lang.Thread.run(Unknown Source) [rt.jar:1.7.0_67] Caused by: io.undertow.server.TruncatedResponseException 	at io.undertow.server.protocol.http.HttpResponseConduit.truncateWrites(HttpResponseConduit.java:667) 	at io.undertow.conduits.AbstractFixedLengthStreamSinkConduit.terminateWrites(AbstractFixedLengthStreamSinkConduit.java:230) 	at org.xnio.conduits.ConduitStreamSinkChannel.shutdownWrites(ConduitStreamSinkChannel.java:178) [xnio-api-3.2.2.Final.jar:3.2.2.Final] 	at io.undertow.channels.DetachableStreamSinkChannel.shutdownWrites(DetachableStreamSinkChannel.java:60) 	at io.undertow.servlet.spec.ServletOutputStreamImpl.close(ServletOutputStreamImpl.java:624) 	at io.undertow.servlet.spec.HttpServletResponseImpl.closeStreamAndWriter(HttpServletResponseImpl.java:451) 	at io.undertow.servlet.spec.HttpServletResponseImpl.responseDone(HttpServletResponseImpl.java:525) 	... 9 more ```  Below is a similar issue between atmosphere-framework and wildfly which was fixed by atmosphere framework: https://groups.google.com/forum/#!topic/atmosphere-framework/s0q7bHcQMbA   ---  **Affects:** 3.0.5","closed","in: web,","spring-projects-issues","2015-01-19T04:26:35Z","2019-01-11T19:03:24Z"
"","17391","PropertyResourceConfigurerTests class throwing exception during build in 4 test methods [SPR-12794]","**[rahul chaudhary](https://jira.spring.io/secure/ViewProfile.jspa?name=rahul-chaudhary)** opened **[SPR-12794](https://jira.spring.io/browse/SPR-12794?redirect=false)** and commented  In spring-beans module when test class PropertyResourceConfigurerTests execute during build 4 test cases fails  PropertyResourceConfigurerTests. testPropertyPlaceholderConfigurer PropertyResourceConfigurerTests. testPropertyPlaceholderConfigurerWithOverridingSystemProperty PropertyResourceConfigurerTests. testPropertyPlaceholderConfigurerWithParentChildSeparation PropertyResourceConfigurerTests. testPropertyPlaceholderConfigurerWithSystemPropertyFallback  I am attaching stack trace. these 4 test method test against System operating system and set a property on TestBean touchy as ${os.name} which ultimately flow reaches to BeanWrapperImpl to set the property on bean and in this class at call writeMethod.invoke(this.object, value); throws exception since I am running windows 8.1 hence value comes as Windows 8.1 and this method call throw exception of beancreation saying that value  contain a . character  Please help :-)   ---  **Attachments:** - [screenshot-1.png](https://jira.spring.io/secure/attachment/22680/screenshot-1.png) (_144.76 kB_) - [stack trace.txt](https://jira.spring.io/secure/attachment/22679/stack+trace.txt) (_4.12 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0920266b3337da2131e57a4608dece5e7bc222fb, https://github.com/spring-projects/spring-framework/commit/6fe85c2dd4ab4f9ec2d6cd2c6f78027a40c992ff, https://github.com/spring-projects/spring-framework/commit/f2b9a0a1179ffb3ac2644f5cc8032d24201e97dc  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","type: task,","spring-projects-issues","2015-03-07T14:02:08Z","2015-03-25T09:42:36Z"
"","17994","@ModelAttribute support to builder pattern [SPR-13415]","**[Raffaele Litto](https://jira.spring.io/secure/ViewProfile.jspa?name=r_litto)** opened **[SPR-13415](https://jira.spring.io/browse/SPR-13415?redirect=false)** and commented  Spring `@ModelAttribute` has no way to support builder pattern, unlike support introduced into Jackson: (check http://wiki.fasterxml.com/JacksonFeatureBuilderPattern)  Use cases where this could be worth being useful:  mapping query arguments to bean like in:  `/entity/search?id=23&status=OPEN&pageSize=10&page=1`  to a method like  ```java List  searchEntities(HttpServletRequest request, @ModelAttribute     EntitySearchDTO searchDTO) ```    ---  **Reference URL:** http://stackoverflow.com/questions/31141945/cannot-instantiate-a-pojo-with-jackson-3-with-builder-pattern","closed","status: bulk-closed,","spring-projects-issues","2015-09-01T14:58:48Z","2020-06-08T19:29:22Z"
"","17171","Update documentation after SPR-3542 [SPR-12570]","**[Qadeer Ahmad](https://jira.spring.io/secure/ViewProfile.jspa?name=qadeer.ahmad)** opened **[SPR-12570](https://jira.spring.io/browse/SPR-12570?redirect=false)** and commented  In #8225, changes were made in bean inheritance regarding scope. However, the documentation about this particular bit remains unchanged:  http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/html/beans.html#beans-child-bean-definitions  > ... > The remaining settings are always taken from the child definition: depends on, autowire mode, dependency check, singleton, scope, lazy init.  The same text is found in the version prior to this change: http://docs.spring.io/spring/docs/2.5.x/reference/beans.html#beans-child-bean-definitions  With the changes in #8225, the scope property is inherited from the parent bean definition if not defined in the child. The scope property is not _always_ taken from the child property. In my opinion this part of the documentation should be updated to explicitly describe when the scope property is inherited.  Background: I was working with a some legacy system where I updated Spring from version 2.5.x to 3.2.x. After the upgrade, many tests started to fail due to this change. After some debugging I found that the scope was not the same anymore, but I could not understand why because the documentation was the same about this part. Fortunately, I found the Jira issue and the changelog, and understood that the bean definition inheritance had actually changed.  I think the update in documentation can help others in the similar situation.  ---  **Issue Links:** - #8225 scope (& similar attributes) on abstract beans should be inherited in child beans, or not permitted  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1), [3.2.13](https://github.com/spring-projects/spring-framework/milestone/101?closed=1)","closed","type: documentation,","spring-projects-issues","2014-12-25T16:25:16Z","2019-01-11T18:24:40Z"
"","17208","Default value of  context-relative attribute is not ""true"" [SPR-12607]","**[Péter Kovács](https://jira.spring.io/secure/ViewProfile.jspa?name=psmith)** opened **[SPR-12607](https://jira.spring.io/browse/SPR-12607?redirect=false)** and commented  In practice the context-relative attribute on an  element defaults to ""false"" when it's not set. For example  will create a controller that redirects from http://localhost:8080/context/a to http://localhost:8080/b.  This contradicts the description of the attribute (from spring-mvc-4.1.xsd): Whether to interpret a given redirect URL that starts with a slash (""/"") as relative to the current ServletContext, i.e. as relative to the web application root. _The default is ""true""._   ---  **Affects:** 4.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3da9d92bf53c205f7e7ce1d58b5701e095a7e474, https://github.com/spring-projects/spring-framework/commit/0c8d07fcffde75fc01dc338e00dcff310f485b7c","closed","type: bug,","spring-projects-issues","2015-01-09T03:50:43Z","2015-02-20T04:13:10Z"
"","17433","There is no spring-beans.dtd file inside of the spring-beans-4.1.5.RELEASE jar [SPR-12836]","**[Przemek Wyszkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=przemyslaw.wyszkowski@cern.ch)** opened **[SPR-12836](https://jira.spring.io/browse/SPR-12836?redirect=false)** and commented  After migrating our application to Spring4 it is unable to start due to beans configured using XML DTD. The application runs behind the firewall without any access to the Internet and fails with the following error:  ``` org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Failed to import bean definitions from relative location [rmi-exporters-spring-beans.xml] Offending resource: class path resource [applicationContext.xml]; nested exception is org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Failed to import bean definitions from URL location [classpath:log4j-config-server-spring-beans.xml] Offending resource: class path resource [rmi-exporters-spring-beans.xml]; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from class path resource [log4j-config-server-spring-beans.xml]; nested exception is java.net.UnknownHostException: www.springframework.org         at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:70)         at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85)         at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:76)         at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:261)         at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseDefaultElement(DefaultBeanDefinitionDocumentReader.java:186)         at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:171)         at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:144)         at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:100)         at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:510)         at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:392)         at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336)         at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)         at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181)         at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:217)         at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:188)         at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:252)         at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:127)         at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:93)         at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129)         at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:537)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:452) ```  It is due to missing spring-beans.dtd file in the spring-beans.jar which used to be there in org/springframework/beans/factory/xml/spring-beans.dtd in the spring 3.2.x jars. Lack of this file breaks the backward compatibility of the applications running without the access to the Internet.  What is interesting is that **spring-beans-2.0.dtd** is present in the jar... However, spring does not automatically resolve to this file in the absence of spring-beans.dtd.  Currently we have added an additional jar containing this single missing file to our classpath which is a workaround for this issue, but you might take a look if the lack of the file was done intentionally.  ---  **Affects:** 4.1.5  **Reference URL:** http://stackoverflow.com/questions/28371328/can-a-spring-4-application-support-spring-beans-dtd-when-it-is-run-in-a-firewall  **Issue Links:** - #15070 Create v4 XML schema - #16781 XML bean singleton attribute silently ignored - #18125 Consistently detect spring-beans.dtd reference  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8e4bfa9cc17d2192e33d20023ab3b4b732087f83, https://github.com/spring-projects/spring-framework/commit/2de5faf56c4011cbb51a80b8bb207074c2a520c3","closed","in: core,","spring-projects-issues","2015-03-20T07:43:53Z","2019-01-11T21:38:55Z"
"","17228","Not able to download spring-beans.xsd in one attempt. [SPR-12627]","**[Prabhat Ranjan](https://jira.spring.io/secure/ViewProfile.jspa?name=prabhatranjan)** opened **[SPR-12627](https://jira.spring.io/browse/SPR-12627?redirect=false)** and commented  It is not able to load http://www.springframework.org/schema/beans/spring-beans.xsd in one attempt which is not allowing our service to start. It is failing as it is not able to download the latest spring-benas.xsd   --- No further details from [SPR-12627](https://jira.spring.io/browse/SPR-12627?redirect=false)","closed","status: invalid,","spring-projects-issues","2015-01-14T06:06:01Z","2019-01-12T05:24:49Z"
"","17792","CommonsMultipartResolver should support setFileSizeMax [SPR-13200]","**[Ponymz](https://jira.spring.io/secure/ViewProfile.jspa?name=ponymz)** opened **[SPR-13200](https://jira.spring.io/browse/SPR-13200?redirect=false)** and commented  Current CommonsMultipartResolver contains attribute maxUploadSize, it invokes apache commons fileupload.setSizeMax() which limits the size of the whole request.  It should provide another attribute which invokes apache commons fileupload.setFileSizeMax() which limits the size of a single file.  Note: Now even I create a customMultipartResolver which extends CommonsMultipartResolver, and then invoke this.getFileupload().setFileSizeMax(), it doesn' work.  ---  **Issue Links:** - #18229 CommonsMultipartResolver.setMaxUploadSizePerFile() does not work if encoding does not match the default encoding - #19204 CommonsMultipartResolver should explicitly convert FileSizeLimitExceededException next to SizeLimitExceededException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/23124d106b730215ab9c540e7b7cc93312d51301","closed","type: enhancement,","spring-projects-issues","2015-07-06T03:01:16Z","2019-01-11T18:07:45Z"
"","17264","ConcurrentModificationException in SimpleBrokerMessageHandler [SPR-12665]","**[Piotr Leśniak](https://jira.spring.io/secure/ViewProfile.jspa?name=plesniak)** opened **[SPR-12665](https://jira.spring.io/browse/SPR-12665?redirect=false)** and commented  During invocation of SimpMessageSendingOperations::convertAndSend method ConcurrentModificationException occures. It happens very rarely (I found out about this bug by checking logs from production, I haven't seen it in application), probably when invocation of this method happens simultaneously with closing webSocket on a client.  Here's a stack:  ``` org.springframework.messaging.MessageDeliveryException: Failed to handle message to ExecutorSubscribableChannel[brokerChannel] in SimpleBroker[DefaultSubscriptionRegistry[cache[2 destination(s)], registry[2 sessions]]]; nested exception is java.util.ConcurrentModificationException 	at org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.run(ExecutorSubscribableChannel.java:180) ~[spring-messaging-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.messaging.support.ExecutorSubscribableChannel.sendInternal(ExecutorSubscribableChannel.java:93) ~[spring-messaging-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.messaging.support.AbstractMessageChannel.send(AbstractMessageChannel.java:107) ~[spring-messaging-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.messaging.support.AbstractMessageChannel.send(AbstractMessageChannel.java:94) ~[spring-messaging-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.messaging.simp.SimpMessagingTemplate.sendInternal(SimpMessagingTemplate.java:185) ~[spring-messaging-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.messaging.simp.SimpMessagingTemplate.doSend(SimpMessagingTemplate.java:160) ~[spring-messaging-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.messaging.simp.SimpMessagingTemplate.doSend(SimpMessagingTemplate.java:47) ~[spring-messaging-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.messaging.core.AbstractMessageSendingTemplate.send(AbstractMessageSendingTemplate.java:95) ~[spring-messaging-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(AbstractMessageSendingTemplate.java:133) ~[spring-messaging-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(AbstractMessageSendingTemplate.java:113) ~[spring-messaging-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(AbstractMessageSendingTemplate.java:108) ~[spring-messaging-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at  .... [our application stack leading to convertAndSend on SimpMessageSendingOperations object] Caused by: java.util.ConcurrentModificationException: null 	at java.util.LinkedHashMap$LinkedHashIterator.nextEntry(LinkedHashMap.java:394) ~[na:1.7.0_55] 	at java.util.LinkedHashMap$KeyIterator.next(LinkedHashMap.java:405) ~[na:1.7.0_55] 	at org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.sendMessageToSubscribers(SimpleBrokerMessageHandler.java:227) ~[spring-messaging-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.handleMessageInternal(SimpleBrokerMessageHandler.java:183) ~[spring-messaging-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.handleMessage(AbstractBrokerMessageHandler.java:180) ~[spring-messaging-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.run(ExecutorSubscribableChannel.java:172) ~[spring-messaging-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	... 24 common frames omitted ```  Can it be related to this #16377 bug?  ---  **Affects:** 4.1 GA  **Issue Links:** - #17777 ConcurrentModificationException when calling SimpMessagingTemplate.convertAndSend","closed","type: bug,","spring-projects-issues","2015-01-26T08:06:57Z","2019-01-11T19:01:49Z"
"","17409","SubProtocolWebSocketHandler should check is session is open before adding it to its map [SPR-12812]","**[Pierantonio Cangianiello](https://jira.spring.io/secure/ViewProfile.jspa?name=pcan)** opened **[SPR-12812](https://jira.spring.io/browse/SPR-12812?redirect=false)** and commented  After dropping some websocket connections from the client (sock.js 0.3.4), the checkSessions() method complains about hanging connection, logging many times the following line: SEVERE: No messages received after 5449478 ms. Closing XhrStreamingSockJsSession[id=pkwy0gwf]. These errors get logged continuously, for each message that the server dispatches. Looking at the code in debug mode, the checkSessions method does not detect that the sessions it is trying to close have already been closed previously (I checked the internal PollingSockJsSession.state variables, they are CLOSED), and they should be removed from the sessions Map.  Environment: Tomcat 7.0.53 running on Oracle JVM 1.8.0_20  ---  **Affects:** 4.1.5  **Issue Links:** - #19370 SubProtocolWebSocketHandler should check session status before adding to map  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0c9cd4cc3298ac4aa60ed492dd847836784b5058  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2015-03-12T09:01:36Z","2019-01-11T21:39:54Z"
"","17599","Avoid eager error message formatting in pre-condition checks [SPR-13007]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-13007](https://jira.spring.io/browse/SPR-13007?redirect=false)** and commented  During profiling of our application we found a place where Spring unconditionally created an error message using `String#format` even if no error is raised later. This costs performance as both a `java.util.Formatter` and error string are created but not used later on. This seems to be the exception from the rule: in most cases the error string is only created in case of an error (e.g., as in  `AbstractPropertyResolver`). In `ReadOnlySystemAttributesMap` we even found a potential `NullPointerException`.   --- No further details from [SPR-13007](https://jira.spring.io/browse/SPR-13007?redirect=false)","closed","type: enhancement,","spring-projects-issues","2015-05-10T02:10:19Z","2015-05-26T01:15:18Z"
"","17262","Add Optional Support to JdbcTemplate [SPR-12662]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-12662](https://jira.spring.io/browse/SPR-12662?redirect=false)** and commented  ### Problem  From time to time we find ourselves working on queries that may return either one for no row. We feel this situation is currently not well addressed with `JdbcTemplate`. Current options include:  - using `#queryForObject` and catching `EmptyResultDataAccessException` - using `#query` or `#queryForList` and checking the size of the list  Both of them feel rather cumbersome.  ### Proposal  We feel Java 8 Optionals are ideally suited for this problem. We therefore propose to add new `queryForOptional` methods with the following behaviour  * no row: empty Optional * one row: present Optional * NULL: empty Optional * more than one row: IncorrectResultSizeDataAccessException  We feel these semantics are natural match for `Optional`. Mapping both no row and SQL `NULL` to an empty `Optional` may be a bit surprising at first however an `Optional` can not contain Java `null` and returning Java `null` would seem against the sprit of `Optional`. We feel the name fits well into the existing naming pattern and gives users a clear indication of the behaviour to expect without having to read the Javadoc first.  As the master in now on 5 which has a minimum of Java 8 these can be added directly to `JdbcTemplate`.  ---  **Issue Links:** - #18474 Add iterable JDBC template to process large amount of data - #20599 Customize PreparedStatementCreatorFactory in getPreparedStatementCreator  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/724  13 votes, 15 watchers","closed","has: votes-jira,","spring-projects-issues","2015-01-24T02:37:22Z","2021-11-30T17:35:12Z"
"","17221","SimpleJdbcCall fails if user is not schema owner [SPR-12620]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-12620](https://jira.spring.io/browse/SPR-12620?redirect=false)** and commented  When the database user is not the schema owner the parameters have to be declared.  The following works when the database user is the schema owner.  ```java     Map params = Collections.singletonMap(""pi_param_name"", param);      Map result = new SimpleJdbcCall(jdbcTemplate)       .withCatalogName(""the_package"")       .withProcedureName(""the_procedure"")       .execute(params); ```  However it fails when when he's not the schema owner and `the_package.the_procedure` is accessed through a public synonym. If that is the case you need to additionally call `#declareParameters` and disable metadata access  ```java     Map params = Collections.singletonMap(""pi_param_name"", param);      Map result = new SimpleJdbcCall(jdbcTemplate)       .withCatalogName(""the_package"")       .withProcedureName(""the_procedure"")       .withoutProcedureColumnMetaDataAccess()       .declareParameters(new SqlParamter(""pi_param_name"", Types.VARCHAR))       .execute(params); ```  Which forces you to repeat yourself. The issue boils down to: * when the `SimpleJdbcCall` is compiled it does not have access to the parameters and relies solely on the database metadata to compose the query string * `OracleCallMetaDataProvider#metaDataCatalogNameToUse` defaults to the user name * `GenericCallMetaDataProvider#processProcedureColumns` passes the above result to `DatabaseMetaData#getProcedures`  Solving this is a bit tricky. A possible way we see is to change `GenericCallMetaDataProvider#processProcedureColumns`  to: * first call `DatabaseMetaData#getProcedures` with either `""""` or the result of `#metaDataSchemaNameToUse` (at this point we don't see which one is preferable). * If nothing was found and and the `schemaPattern` passed to `DatabaseMetaData#getProcedures` was not `null` call it again with `null`  We are using Oracle.   ---  **Affects:** 4.1.1  2 votes, 5 watchers","open","type: enhancement,","spring-projects-issues","2015-01-12T08:53:05Z","2017-04-04T13:46:50Z"
"","17238","Add support for automatic remote export of services using Spring Remoting [SPR-12637]","**[Philipp Nanz](https://jira.spring.io/secure/ViewProfile.jspa?name=philippn)** opened **[SPR-12637](https://jira.spring.io/browse/SPR-12637?redirect=false)** and commented  Spring’s HTTP invoker is a good choice if you need HTTP-based remoting but also rely on Java serialization. It can be cumbersome to configure though because every new service that you wish to share among server and client needs to be registered in both application contexts manually via XML configuration.  It would be great if Spring would make this easier by providing annotation support for this use case out of the box.  I have already created a simple implementation of this using Springs HttpInvoker, but it is merely to be considered a proof of concept rather than a production ready library (see https://github.com/philippn/spring-remoting-autoconfigure).  ---  **Affects:** 4.1.4  **Reference URL:** https://github.com/philippn/spring-remoting-autoconfigure  **Issue Links:** - #8606 Introduce annotation-based configuration for remoting","closed","type: enhancement,","spring-projects-issues","2015-01-17T06:22:58Z","2019-01-11T19:03:11Z"
"","18013","Add lambda support to Assert [SPR-13434]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13434](https://jira.spring.io/browse/SPR-13434?redirect=false)** and commented  I quite often want to use `Assert` but throw a different exception. Something similar to `Optional.orElseThrow` might be a nice addition for the Java 8 theme:  ```java Assert.hasLength(x, () -> new IllegalStateException()); ```    --- No further details from [SPR-13434](https://jira.spring.io/browse/SPR-13434?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-09-04T19:08:57Z","2019-01-12T00:15:52Z"
"","18012","Add @FormAttribute attributes to customize x-www-form-urlencoded [SPR-13433]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13433](https://jira.spring.io/browse/SPR-13433?redirect=false)** and commented  As requested on the Spring Boot issue tracker: https://github.com/spring-projects/spring-boot/issues/3890  —  When processing an `HttpRequest` with `x-www-form-urlencoded` content, we can use a controller with POJO matching the payload structure.  Example payload: `value_first=value1&value_second=value2`  ```java @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)  public String handlePost(@ModelAttribute Body body) {  } ```  POJO:  ```java public class Body {  private String value_first;  private String value_second; } ```  The problem is that the variable names must match the field names in the `HttpRequest` payload in order  to be processed by the controller. There is not way of naming them differently, for example, if I do not want to use underscores in Java variable and method names.  What I would appreciate would be using something like this:  ```java @FormAttribute private String value1; ```  ---  **Issue Links:** - #13880 Provide a way to customize the names of JavaBean properties when they're read and written for data binding purposes - #12403 Provide support for configuring the bindable properties of a form-backing object using field-level annotations - #14816 Customizable parameter name when binding an object (_**""supersedes""**_)  20 votes, 16 watchers","open","has: votes-jira,","spring-projects-issues","2015-09-04T19:04:35Z","2022-07-29T09:28:12Z"
"","17953","Allow @JsonSerialize to be used on @Controller methods [SPR-13369]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13369](https://jira.spring.io/browse/SPR-13369?redirect=false)** and commented  Similar to the `@JsonView` support it would be helpful if the `@JsonSerialize` annotation could be used on a `@Controller` method.  Possibly raised before in #13935  ---  **Issue Links:** - #13935 MappingJacksonJsonView: Recognize Jackson Annotations (ex `@JsonSerialize`) when returning objects from methods annotated with `@ResponseBody`","closed","status: bulk-closed,","spring-projects-issues","2015-08-19T13:04:14Z","2019-01-13T05:36:39Z"
"","17735","Use already loaded metadata when possible for AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod [SPR-13144]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13144](https://jira.spring.io/browse/SPR-13144?redirect=false)** and commented  The `AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod()` is called frequently when a typical Spring Boot application starts and tends to show up often when profiling applications.  The majority of the calls are resolving `@Configuration` `@Bean` methods and since Spring 4.2 now surfaces `getReturnTypeName()` in `MethodMetadata` we could use this information rather than needing to iterate all methods in the class.  ---  **Issue Links:** - #16851 Reduce BeanDefinition cloning in AbstractBeanFactory.getMergedBeanDefinition  0 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-06-18T12:32:17Z","2019-01-12T02:27:23Z"
"","17684","Reduce memory consumption for caches [SPR-13093]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13093](https://jira.spring.io/browse/SPR-13093?redirect=false)** and commented  Currently several classes in the framework use `ConcurrentReferenceHashMap` with soft references for caching. Unfortunately soft references only get cleared when the JVM is [completely out of memory](https://twitter.com/lagergren/status/604272409567457280) making it appear that Spring is consuming a lot of resources.  We could create a dedicated `MemoryCache` abstraction with additional bounds to ensure that no individual cache is consuming too much memory.  Another, perhaps simpler approach, could be to clear caches after the `ApplicationContext` has loaded. The `ResolvableType` cache especially could benefit from this approach.  ---  **Affects:** 4.1.6  **Issue Links:** - #16851 Reduce BeanDefinition cloning in AbstractBeanFactory.getMergedBeanDefinition - #18357 ReflectionUtils cache uses up a fairly big chunk of heap even  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-06-02T15:19:57Z","2019-01-11T15:44:40Z"
"","17531","Base64 support option without Commons Codec dependency on Java 6/7 [SPR-12938]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12938](https://jira.spring.io/browse/SPR-12938?redirect=false)** and commented  `Base64Utils` currently requires Java 8 or Apache Commons Codec. It would be useful if we could include a direct implementation so that it always works.  We can crib code from   https://github.com/spring-projects/spring-security/blob/master/crypto/src/main/java/org/springframework/security/crypto/codec/Base64.java  ---  **Affects:** 4.1 GA  **Issue Links:** - #22188 Base64Utils: Support URL and filename safe alphabet (RFC 4648)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a5349eb2f86715b382a52909f7a990879fc5fd5c","closed","type: enhancement,","spring-projects-issues","2015-04-20T14:38:32Z","2019-01-11T21:08:15Z"
"","17464","Incorrect value in InvalidPropertyException message from BeanWrapperImpl.setPropertyValue [SPR-12866]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12866](https://jira.spring.io/browse/SPR-12866?redirect=false)** and commented  Line 1056:  I believe that:  ```java } else { 	throw new InvalidPropertyException(getRootClass(), this.nestedPath + propertyName, 			""Property referenced in indexed property path '"" + propertyName + 			""' is neither an array nor a List nor a Map; returned value was ["" + pv.getValue() + ""]""); } ```  Should probably be:  ```java } else { 	throw new InvalidPropertyException(getRootClass(), this.nestedPath + propertyName, 			""Property referenced in indexed property path '"" + propertyName + 			""' is neither an array nor a List nor a Map; returned value was ["" + propValue + ""]""); } ```    ---  **Affects:** 3.2.13, 4.1.6  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","in: core,","spring-projects-issues","2015-03-30T16:27:04Z","2015-05-26T01:14:55Z"
"","17456","Support package private annotations with AnnotationUtils [SPR-12858]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12858](https://jira.spring.io/browse/SPR-12858?redirect=false)** and commented  `AnnotationUtils.getAnnotationAttributes` currently doesn't work with package scope annotations.  I believe that calling method.setAccessible(true) when iterating the methods would solve the issue.  https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java#L586  ---  **Affects:** 4.1.6  **Issue Links:** - #17487 AnnotatedElementUtils should leniently ignore TypeNotPresentExceptions (just like AnnotationUtils)","closed","type: enhancement,","spring-projects-issues","2015-03-27T12:59:34Z","2019-01-11T21:37:47Z"
"","17203","Explicit failure if multiple @BootstrapWith annotations are used on the same test [SPR-12602]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12602](https://jira.spring.io/browse/SPR-12602?redirect=false)** and commented  `BootstrapUtils.resolveTestContextBootstrapper` currently finds the first `@BootstrapWith` annotation to create the bootstrapper. If the user has accidentally included more than one `@BootstrapWith` annotation (via meta-annotated annotations) it's seemingly arbitrary which is used.  It would be better to throw an explicit error.  ---  **Affects:** 4.1 GA  **Issue Links:** - #21544 Relax explicit TestContextBootstrapper resolution - #17606 Throw exception if multiple meta-annotations are found by AnnotationUtils  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e85e9768c578fa1e5fbdb52a77115c36db8def07","closed","type: enhancement,","spring-projects-issues","2015-01-07T15:17:47Z","2019-01-11T19:07:10Z"
"","17457","Enhance GenericConversionService to support conversion of collections. [SPR-12859]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-12859](https://jira.spring.io/browse/SPR-12859?redirect=false)** and commented  Hello, I want to propose to enhance the generic conversion service to support conversions of collections like this:  ```  Collection convert(Collection sources, Class sourceClass, Class targetClass);  Collection convert(Collection sources, Class targetClass); ```  At the moment I have created my own conversion service and it works perfectly, but I thought maybe you would be interested to include this in the `GenericConversionSerivce`.   --- No further details from [SPR-12859](https://jira.spring.io/browse/SPR-12859?redirect=false)","closed","type: enhancement,","spring-projects-issues","2015-03-28T06:01:05Z","2015-03-30T00:34:02Z"
"","17381","Add new method: CollectionUtils.singletonMultiValueMap() [SPR-12784]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-12784](https://jira.spring.io/browse/SPR-12784?redirect=false)** and commented  Hi there,  I'm using the `UriComponentsBuilder` quite a lot, and most of the times I'm passing a single parameter like this:  ``` MultiValueMap params = new LinkedMultiValueMap<>(); params.put(""param"", ""value""); UriComponentsBuilder.newInstance().queryParams(params) ```  where `params` is an instance of `MultiValueMap`. So it would be really convenient if there was a method to create a single `MultiValueMap`. Then I could simply do:  ``` UriComponentsBuilder.newInstance().queryParams(CollectionUtils.singleMultiValueMap(""param"", ""value"")) ```    --- No further details from [SPR-12784](https://jira.spring.io/browse/SPR-12784?redirect=false)","closed","type: enhancement,","spring-projects-issues","2015-03-04T12:21:39Z","2015-03-05T04:47:33Z"
"","17367","Spring Boot + MockMvc + MessageSource  [SPR-12770]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-12770](https://jira.spring.io/browse/SPR-12770?redirect=false)** and commented  Hello,  following this question here:  http://stackoverflow.com/questions/28569445/spring-boot-mockmvc-and-messagesource  I have created a sample application that demonstrates the problem.  https://github.com/paranoiabla/spring-boot-mockmvc  If you try to use `MessageSource` in one of your `Controller` classes in a spring-boot application you get this exception:  ``` org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.context.NoSuchMessageException: No message found under code 'custom.link' for locale 'en'. 	at org.springframework.context.support.AbstractMessageSource.getMessage(AbstractMessageSource.java:159) 	at net.test.MyController.home(MyController.java:29) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:606) 	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:777) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:706) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:943) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:618) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) 	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:65) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:725) 	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:167) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:134) 	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:144) 	at net.test.MyControllerIntegrationTest.testGetAccount(MyControllerIntegrationTest.java:23) ```    --- No further details from [SPR-12770](https://jira.spring.io/browse/SPR-12770?redirect=false)","closed","status: invalid,","spring-projects-issues","2015-03-01T06:59:44Z","2019-01-12T05:24:38Z"
"","17288","Add a getPropertyAsMap in the PropertyResolver [SPR-12690]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-12690](https://jira.spring.io/browse/SPR-12690?redirect=false)** and commented  Hi there,  looking at the `commons-configuration` project they have a method to get a property as a map: `configuration.getProperty(""property.key"", Map.class)` so one can read properties like these:  ``` elasticsearch.properties=path.data=${elasticsearch.data.dir}/data,path.work=${elasticsearch.data.dir}/work,path.logs=${elasticsearch.data.dir}/logs ```  into the following `Map`  ``` path.data -> ${elasticsearch.data.dir}/data path.work -> ${elasticsearch.data.dir}/work path.logs -> ${elasticsearch.data.dir}/logs ```  which comes quite handy in certain situations.   --- No further details from [SPR-12690](https://jira.spring.io/browse/SPR-12690?redirect=false)","closed","type: enhancement,","spring-projects-issues","2015-02-05T02:28:07Z","2015-03-05T04:44:14Z"
"","17215","Unable to pass connection parameters to EmbeddedDatabaseBuilder [SPR-12614]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-12614](https://jira.spring.io/browse/SPR-12614?redirect=false)** and commented  Following this problem here: http://stackoverflow.com/questions/24687769/how-can-i-resolve-this-sqltransactionrollbackexception-with-hsqldb-in-spring-bat  I had a look at the `EmbeddedDatabaseBuilder` and it looks like it is always created with `new EmbeddedDatabaseFactory();` (burried inside the constructor), so we can't change the `EmbeddedDatabaseFactory` being used. The factory, however does provide a setter method to set `EmbeddedDatabaseConfigurer` which would technically allow us to set additional connection properties (like hsqldb.tx=mvcc). I think the proper solution would be to add a setter method to `EmbeddedDatabaseBuilder` to allow setting custom `DatabaseFactory`.   --- No further details from [SPR-12614](https://jira.spring.io/browse/SPR-12614?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-01-10T15:38:28Z","2019-01-12T03:30:28Z"
"","17479","Unable to Login [SPR-12881]","**[Pawan Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=pawan.kumar)** opened **[SPR-12881](https://jira.spring.io/browse/SPR-12881?redirect=false)** and commented  Steps to Produce (1)Go to Login Page (2)Enter User Name and Password Click on Login Actual Output-Unable to Login Expected Result-User should be login   ---  **Attachments:** - [SpringwebMVC.war](https://jira.spring.io/secure/attachment/22723/SpringwebMVC.war) (_5.04 MB_)","closed","status: invalid,","spring-projects-issues","2015-04-02T03:06:37Z","2019-01-12T05:24:32Z"
"","17380","UrlTag mishandles foreign root context URIs [SPR-12782]","**[Pavel Horal](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel.horal)** opened **[SPR-12782](https://jira.spring.io/browse/SPR-12782?redirect=false)** and commented  When constructing URL for a **foreign root context** (i.e. `/`):  ```xml  ```  the expected output is `/foo`.  However `UrlTag` incorrectly renders `//foo`, which is equivalent to incorrect URL `http://foo`.  This behavior is also inconsistent with the JSTL's `` tag.   ---  **Affects:** 4.1.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8b545f47bd625aba2cd7d4d4877498d5a28f4f28","closed","type: enhancement,","spring-projects-issues","2015-03-04T07:09:19Z","2015-05-26T01:15:07Z"
"","17662","Data binding treats parameterized type as object even when the parameterized type is specified by a subclass [SPR-13070]","**[Pavan Veeramachineni](https://jira.spring.io/secure/ViewProfile.jspa?name=maverickthinker)** opened **[SPR-13070](https://jira.spring.io/browse/SPR-13070?redirect=false)** and commented  Given the following classes:  ```java public class Bean extends BaseBean{ } ```  ```java public class BaseBean { 	List> typedNestedBeanList = new ArrayList>();  	public List> getTypedNestedBeanList() { 		return typedNestedBeanList; 	}  	public void setTypedNestedBeanList( 			List> typedNestedBeanList) { 		this.typedNestedBeanList = typedNestedBeanList; 	}  } ```  ```java public class TypedNestedBean { 	T property;  	public T getProperty() { 		return property; 	}  	public void setProperty(T property) { 		this.property = property; 	} } ```  The following code returns java.lang.Object instead of the 'SomeEnum' class:  ```java BeanWrapperImpl beanWrapper = new BeanWrapperImpl(Bean.class); beanWrapper.setAutoGrowNestedPaths(true); PropertyDescriptor tpd = beanWrapper.getPropertyDescriptor(""typedNestedBeanList[0].property""); System.out.println(""Typed: "" + tpd.getPropertyType()); ```  Attached is a sample project I used for testing.  ---  **Affects:** 4.1.6  **Attachments:** - [playground.zip](https://jira.spring.io/secure/attachment/22826/playground.zip) (_13.14 kB_)  **Issue Links:** - #12936 BeanWrapperImpl.getPropertyTypeDescriptor() doesn't resolve generic type parameters when a generic bean class is subclassed with actual type parameter. (_**""duplicates""**_)","closed","status: bulk-closed,","spring-projects-issues","2015-05-25T15:19:33Z","2019-01-12T00:16:22Z"
"","17334","RequestMapping value doesn't handle regex correctly. [SPR-12737]","**[Paulius Matulionis](https://jira.spring.io/secure/ViewProfile.jspa?name=p.matulionis)** opened **[SPR-12737](https://jira.spring.io/browse/SPR-12737?redirect=false)** and commented  Having : ``` `@RequestMapping`(value = ""{configKey}/{arguments:.*}"")  ```  and calling GET on URL like /test/a/b results in 404. Calling /test/a - all OK.  Problem is that it should match everything what is beyond \{configKey\}/ and assign the value to arguments path variable.  The value beyond the \{configKey\} may be anything and shouldn't end up in 404. For e.g using MockMVC and calling method with this request mapping:  get(""/test/document"") - 200 OK configKey = test arguments = document  I would expect the following to work as well:  get(""/test/document/download/1/2/3"") - 404 Should be: configKey = test arguments = download/1/2/3  get(""/test/whatever/a"") - 404 Should be: configKey = test arguments = whatever/a  get(""/something/do/stuff/3"") - 404 Should be: configKey = something arguments = do/stuff/3  I've also included StackOverflow URL where I've raised this problem. ```    ---  **Affects:** 4.1.4  **Reference URL:** http://stackoverflow.com/questions/28632790/matching-anything-in-spring-requestmapping","closed","in: core,","spring-projects-issues","2015-02-20T09:12:58Z","2019-01-12T16:23:36Z"
"","17272","Unable to explicitly order WebRequestInterceptors via addInterceptors method [SPR-12673]","**[Paul](https://jira.spring.io/secure/ViewProfile.jspa?name=bewdym8)** opened **[SPR-12673](https://jira.spring.io/browse/SPR-12673?redirect=false)** and commented  I would like to be able to explicitly order Interceptors via the addInterceptors method on WebMvcConfigurationSupport class.  With the method below the interceptors are run in order they are added to registry.      @Override     protected void addInterceptors(InterceptorRegistry registry) {         registry.addWebRequestInterceptor(new FirstInterceptor());         registry.addWebRequestInterceptor(new SecondInterceptor());         registry.addWebRequestInterceptor(new ThirdInterceptor());     }  Now when I add a path pattern to the first interceptor it becomes a mapped interceptor and then it ends up being run last.      @Override     protected void addInterceptors(InterceptorRegistry registry) {         registry.addWebRequestInterceptor(new FirstInterceptor()).addPathPatterns(""/doh/**"");         registry.addWebRequestInterceptor(new SecondInterceptor());         registry.addWebRequestInterceptor(new ThirdInterceptor());     }  So in this instance to get the ordering correct I need to add path patterns to all interceptors as follows      @Override     protected void addInterceptors(InterceptorRegistry registry) {         registry.addWebRequestInterceptor(new FirstInterceptor()).addPathPatterns(""/doh/**"");         registry.addWebRequestInterceptor(new SecondInterceptor()).addPathPatterns(""/**"");         registry.addWebRequestInterceptor(new ThirdInterceptor()).addPathPatterns(""/**"");     }    ---  **Affects:** 4.1.1, 4.1.3, 4.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c5d6cc41346710f8277057d52ce90dcf0705a528, https://github.com/spring-projects/spring-framework/commit/c36435c0427c75d4dcee382a88a466ad96241faa","closed","type: enhancement,","spring-projects-issues","2015-01-29T17:34:55Z","2015-05-26T01:15:26Z"
"","17269","Resource Handler is not Forwarding to correct Resource Location [SPR-12670]","**[Paul](https://jira.spring.io/secure/ViewProfile.jspa?name=bewdym8)** opened **[SPR-12670](https://jira.spring.io/browse/SPR-12670?redirect=false)** and commented  When I override the addResourceHandlers from WebMvcConfigurationSupport the resources are not being resolved to correct location.  e.g. this works with Spring 4.1.0      @Override     protected void addResourceHandlers(ResourceHandlerRegistry registry) {         registry.addResourceHandler(""/resources-build12/**"").addResourceLocations(""/resources/**"");     }  but not the most recent versions failed against 4.1.3 and 4.1.4  I suspect it is similar to issue #17225 and seems to be related to following code fragment in PathResourceResolver      locationPath = (locationPath.endsWith(""/"") || locationPath.isEmpty() ? locationPath : locationPath + ""/"");     	if (!resourcePath.startsWith(locationPath)) {     		return false;     	}  ---  **Affects:** 4.1.3, 4.1.4  **Issue Links:** - #17225 PathResourceResolver.isResourceUnderLocation does not handle relative paths correctly  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/ee2a4f34a2e9cc7ea6c47e567841906389cbb2eb, https://github.com/spring-projects/spring-framework-issues/commit/d1854e42716dc9e69aae175a577072433df68e91  1 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2015-01-28T23:32:17Z","2019-01-12T16:23:37Z"
"","17577","flash attributes not mapped from session to request scope when parameter value is url encoded [SPR-12986]","**[Patrick Bucher](https://jira.spring.io/secure/ViewProfile.jspa?name=patrick.bucher)** opened **[SPR-12986](https://jira.spring.io/browse/SPR-12986?redirect=false)** and commented  Here's my controller:  ```java package com.getabstract.web;  import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.servlet.mvc.support.RedirectAttributes;  @Controller @RequestMapping(""/mock"") public class MockController {     @RequestMapping(value = ""/input"", method = RequestMethod.GET)     public String postInput(RedirectAttributes redirectAttributes)     {         redirectAttributes.addFlashAttribute(""message"", ""some message"");         redirectAttributes.addAttribute(""mockParam"", ""this_is_a_test"");         return ""redirect:/mock/output"";     }      @RequestMapping(value = ""/output"", method = RequestMethod.GET)     public String getOutput(@RequestParam String mockParam, Model model)     {         model.addAttribute(""mockAttribute"", ""some mock text: "" + mockParam);         return ""mock/output"";     } } ```  And here's my JSP:  ```jsp         Message: ${message}   ```  When I run this code by calling /mock/input, the message ""this_is_a_test"" is outputted correctly on the JSP.  ``` Message: some message ```  Now I change my message slightly, so that URL Encoding becomes necessary (replacing underscores with spaces):  ```java redirectAttributes.addAttribute(""mockParam"", ""this is a test""); ```  Now I'm getting forwarded to mock/output?mockParam=this+is+a+test, URL encoding has taken place. The flash attribute map is not mapped from the session to the request, because AbstractFlashMapManager.isFlashMapForRequest() returns false. This method compares URL encoded values with non-encoded values. There's no org.springframework.web.servlet.DispatcherServlet.INPUT_FLASH_MAP available in the request scope, but all the parameters are in the session scope's org.springframework.web.servlet.support.SessionFlashMapManager.FLASH_MAPS.  ---  **Affects:** 3.2.2  **Issue Links:** - #17170 Flash attributes not working with spaces in query parameters (_**""duplicates""**_) - #16441 Unable to retrieve FlashMap when contains ""+""(half-space) in the request parameters","closed","in: web,","spring-projects-issues","2015-05-05T07:34:18Z","2019-01-12T16:46:07Z"
"","17924","StompSubProtocolHandler should send SessionSubscribeEvent after ChannelSecurityInterceptor has validated access rights [SPR-13339]","**[pascal gehl](https://jira.spring.io/secure/ViewProfile.jspa?name=paskos)** opened **[SPR-13339](https://jira.spring.io/browse/SPR-13339?redirect=false)** and commented  Only ""Platinium"" user of my application can subscribe to a dedicated `/topic/platinum` topic. Every time an authorized user subscribes I want to run some code. For this I implemented `ApplicationListener< SessionSubscribeEvent >`.  Unauthorized users should receive the equivalent of `403 Unauthorized` response.  Unfortunately my `ApplicationListener< SessionSubscribeEvent >` is called wether the user is authorized or not and I could not find where to hook some code after `ChannelSecurityInterceptor` has been executed.  `@SubscribeMapping` only works for `/app/platinum` but I really want to execute some code when user subscribes to `/topic/platinum`.   ---  **Affects:** 4.1.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/27899abcb6c1651b0b25e196ae9768a264474b70","closed","type: enhancement,","spring-projects-issues","2015-08-10T14:58:24Z","2015-09-01T11:38:23Z"
"","17878","@MessageMapping should support generically typed Message argument with converted payload [SPR-13288]","**[pascal gehl](https://jira.spring.io/secure/ViewProfile.jspa?name=paskos)** opened **[SPR-13288](https://jira.spring.io/browse/SPR-13288?redirect=false)** and commented  I have a `@Controller` method wired with a `@MessagingGateway` annotated service.  ```java @MessageMapping(value = ""/messages/save"") public void save(Message msg) {      service.save(msg);  } ```  Unfortunately this does not work; I get  ```java SimpAnnotationMethodMessageHandler -- Unhandled exception MethodArgumentTypeMismatchException: Could not resolve method parameter at index 0 in method: public void MyEndpoint.save(Message) The expected Message payload type [ToBeSaved] does not match the actual payload type [[B] 	at org.springframework.messaging.handler.annotation.support.MessageMethodArgumentResolver.resolveArgument(MessageMethodArgumentResolver.java:59) ```  After investigation generic `Message` is not understood as being a `Message` instance with `ToBeSaved` payload class but only `Message` with `Byte[]` payload.  It would be nice if `MessageMethodArgumentResolver` was able to use `MessageConverter` the same way `PayloadArgumentResolver` can.  ---  **Affects:** 4.1.7  **Issue Links:** - #17828 JsonView support for JMS - #17856 Jackson `@JsonView` deserialization support for `@MessageMapping` payloads - #19183 Missing MessageMethodArgumentResolver default constructor - [AMQP-582](https://jira.spring.io/browse/AMQP-582) The MethodRabbitListenerEndpointTests.invalidMessagePayloadType() isn't compatible with SF-4.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/416966d943300c1155d4202196096ced535f6586  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2015-07-29T06:20:42Z","2019-01-13T05:39:23Z"
"","17188","Provide doc/guide for propagating transaction context in asynchronous threadpool based application [SPR-12587]","**[pascal gehl](https://jira.spring.io/secure/ViewProfile.jspa?name=paskos)** opened **[SPR-12587](https://jira.spring.io/browse/SPR-12587?redirect=false)** and commented  I work on a project where we want to leverage servlet-api 3.1 non-blocking io + servlet-api async + real time graph update using websocket.  When a user wants to watch a real time graph the web server will (simplified) start a scheduled task (running every second) executed in a threadpool based scheduler. This task will access multiple legacy services, RDBMS and NoSQL store. (not `@async` or `@scheduled` annotated method because it's spawned at runtime).  Same principle for REST services leveraging async and non-blocking io.  My challenge here is to propagate spring transactional context over multiple threads. Spring-transaction works very well when everything happens in the servletContainer (jetty, tomcat) thread.  I searched all the interwebs for some recipe on how to create/propagate spring transaction context in a threadpool based async application but I haven't something useful.  It would be nice if people had access to a sample application/documentation/guide written directly by the ninjas who brought spring.  Thanks in advance   ---  1 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-12-31T08:33:36Z","2019-01-12T03:30:33Z"
"","17182","Add MQTT over WebSocket support [SPR-12581]","**[pascal gehl](https://jira.spring.io/secure/ViewProfile.jspa?name=paskos)** opened **[SPR-12581](https://jira.spring.io/browse/SPR-12581?redirect=false)** and commented  STOMP over websocket is really nice as starting point but for resource-constrained devices and low bandwidth (lots of mobile out there running on small data plans and not necessarily 4G) it would be nice to be able to choose MQTT instead of STOMP when implementing websocket based messaging.  ---  **Issue Links:** - #16288 Support WAMP messaging protocol  6 votes, 17 watchers","open","type: enhancement,","spring-projects-issues","2014-12-30T15:09:28Z","2019-01-11T18:23:58Z"
"","17350","Spring MVC Session Object ScopedProxyMode.TARGET_CLASS JSR 303 validation [SPR-12753]","**[Oscar Fanchin](https://jira.spring.io/secure/ViewProfile.jspa?name=nexus061)** opened **[SPR-12753](https://jira.spring.io/browse/SPR-12753?redirect=false)** and commented   ---  **Affects:** 3.2.13  **Reference URL:** https://stackoverflow.com/questions/28542535/spring-mvc-session-object-scopedproxymode-target-class-and-jsr-303-validation","closed","status: invalid,","spring-projects-issues","2015-02-25T08:06:11Z","2019-01-12T05:24:41Z"
"","17794","StoredProcedure does not allow for SQL to be provided after initialization [SPR-13202]","**[omkar](https://jira.spring.io/secure/ViewProfile.jspa?name=omkar)** opened **[SPR-13202](https://jira.spring.io/browse/SPR-13202?redirect=false)** and commented  when creating org.springframework.jdbc.object.StoredProcedure with `@component` by a subclass throws 'sql' property not set exception. Making stored procedure to be created using new keyword and not able to inject.   ---  **Reference URL:** http://stackoverflow.com/questions/9813306/error-trying-to-use-storedprocedure-in-spring","closed","type: enhancement,","spring-projects-issues","2015-07-05T22:06:10Z","2015-07-07T05:45:06Z"
"","17951","Cannot combine @RestController @SubscribeMapping @RequestMapping and @PreAuthorize [SPR-13367]","**[Omer Kudat](https://jira.spring.io/secure/ViewProfile.jspa?name=omerkudat)** opened **[SPR-13367](https://jira.spring.io/browse/SPR-13367?redirect=false)** and commented  We have controller beans that combine both REST and WebSocket function. Generally the classes look like this:  ```java @RestController @RequestMapping(""/api"") public class Controller {      @SubscribeMapping(""/topic/{subject}"")     public Object snapshot(@DestinationVariable String subject) {         // code     }      @RequestMapping(value = ""/add"", method = POST)     //@PreAuthorize // Can't use this here     public void add(@RequestBody Object obj) {         // code     } } ```  These classes work fine as they are listed above (although I have omitted some attributed for brevity.)  However, the above class no longer maps the subscription topic if the `add` method is annotated with `@PreAuthorize`. This happens because the presence of `@PreAuthorize` breaks `org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler#afterPropertiesSet()`. This method calls `applicationContext.getType(beanName)` which returns `Proxy` with the annotation, but `Controller` without. When `Proxy` is returned `AbstractMethodMessageHandler` thinks the class is not a handler and does not try to detect handler methods.  For now, we have had to revert to doing the auth checks manually.   ---  **Affects:** 4.1.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/52b63528c5e5ac08f62b0578c0e901877793d4ee  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2015-08-18T11:24:19Z","2019-01-11T18:20:09Z"
"","18014","Double slashes (optional Path variable) removed via MockHttpServletRequestBuilder [SPR-13435]","**[Oliver Lehmann](https://jira.spring.io/secure/ViewProfile.jspa?name=ollil)** opened **[SPR-13435](https://jira.spring.io/browse/SPR-13435?redirect=false)** and commented  When running a Unittest with MockHttpServletRequestBuilder I have the following URI for example:  `/test//currentlyValid/0`  After Calling `MockMvcRequestBuilders.get(uri);` The uri inside the returning builder is set to  `/test/currentlyValid/0`  The double slash was replaced by a single slash!  This was done by the following code in `org.springframework.web.util.UriComponentsBuilder.FullPathComponentBuilder`  ``` public PathComponent build() {      if (this.path.length() == 0) {           return null;      }      String path = this.path.toString();      while (true) {           int index = path.indexOf(""//"");           if (index == -1) {                    break;           }           path = path.substring(0, index) + path.substring(index + 1);      }      return new HierarchicalUriComponents.FullPathComponent(path); } ```  What is the point in replacing double slashes by a single slash? How am I supposed to test usecases with optional path variables? For me, this feels like a bug to report....   ---  **Affects:** 4.1.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/df171ff5bb47a761edc8def7ea6c0456d4a4d3ed","closed","type: enhancement,","spring-projects-issues","2015-09-06T13:12:45Z","2015-10-15T13:04:43Z"
"","17837","Make AbstractFallbackTransactionAttributeSource.computeTransactionAttribute(…) protected [SPR-13246]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-13246](https://jira.spring.io/browse/SPR-13246?redirect=false)** and commented  Spring Data needs to customize the annotation attribute lookup algorithm implemented in `AbstractFallbackTransactionAttributeSource.computeTransactionAttribute(…)` to basically flip around the preference of annotations to the ones declared on interfaces. This is to make sure users can override the default transaction settings shipped with implementation classes on the user-declared repository interfaces.  Currently we have local copies of `AbstractFallbackTransactionAttributeSource` and `AnnotationTransactionAttributeSource` to accommodate this scenario. This unfortunately lead to the fact that we didn't catch the change to [support JTA 1.2's `@Transactional`|DATACMNS-732].  So far, this has worked to the repositories accidentally being wrapped in a standard Spring transaction proxy and thus the standard implementation kicking in, which was a bug in itself, fixed for [DATACMNS-715](https://jira.spring.io/browse/DATACMNS-715). This has now basically unveiled the missing support for JTA 1.2 in the Spring Data transaction implementation.  To avoid theses kinds of errors in the future, it would be helpful not having to copy the classes and just override `computeTransactionAttribute(…)` selectively to benefit from future fixes to the surrounding code directly.  ---  **Affects:** 4.1.7, 4.2 RC3  **Issue Links:** - [DATACMNS-732](https://jira.spring.io/browse/DATACMNS-732) JTA 1.2's `@Transactional` not being applied to query methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a8fb551b1c655a7ac0b953d6caed219402b13618, https://github.com/spring-projects/spring-framework/commit/35b257514d480348fe585ad115752780f729825b  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-07-17T00:31:57Z","2019-01-13T05:39:43Z"
"","17700","Provide means to opt out of default annotation based transaction management by bean [SPR-13109]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-13109](https://jira.spring.io/browse/SPR-13109?redirect=false)** and commented  Spring Data JPA repositories create proxies that already apply custom transaction handling to it's beans. The proxy is exposing interfaces that might contain `@Transactional` annotations. This causes the proxy being rewrapped into yet another proxy in case `@EnableTransactionManagement` is activated. This causes the default transaction attribute lookup to be used for transactions instead of our customized one cause it's hidden inside the nested proxy.  It would be cool if the proxy we create could expose some kind of marker interface (Jürgen suggested `GoAway` :D ) that would cause the pointcut not to match and thus avoid the default transaction interceptor to be deployed in the outer proxy.  ---  **Affects:** 4.1.6, 4.2 RC1  **Issue Links:** - [DATACMNS-715](https://jira.spring.io/browse/DATACMNS-715) `@Transactional` customizations not applied correctly on redeclared methods (_**""is depended on by""**_) - [DATAJPA-755](https://jira.spring.io/browse/DATAJPA-755) Overriding `@Transactional` on repository method not working  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9f64230131dbe4d11c0c95986d5f5e58486aee7e, https://github.com/spring-projects/spring-framework/commit/c85127d3f816d9cf44a0223073d7e37d569a8cdb","closed","type: enhancement,","spring-projects-issues","2015-06-10T07:47:17Z","2019-01-13T05:40:39Z"
"","17681","ServletWebRequest.checkNotModified(…) writes Last-Modified header in invalid format [SPR-13090]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-13090](https://jira.spring.io/browse/SPR-13090?redirect=false)** and commented  As of version 4.2 RC1 `ServletWebRequest` has a `checkNotModified(String, long)` method, that – unexpectedly – sets headers (the method name does not imply that). Even worse, it calls `setDateHeader(…)` on the response, which writes the given timestamp as is. This is wrong as per HTTP spec the value has to be a formatted date.  So if you set a `Last-Modified` header in a controller and return a `ResponseEntity`, the just mentioned check adds an invalid header to the response and later on **adds** the actually correct value as second value for that parameter.  Trying to access the header value then finally fails with an execption as `HttpHeaders.getLastModified()` tries to parse the first value found into a `Date` which it can't because of the invalid format.  I'd argue:  - a `check…` method that changes the state of the object is weird - why does that method set headers at all? If the header in question (`Last-Modified` in this case) is present it will be added later on by definition. Why create a second code path that writes headers and bypasses the code paths making sure headers are in the right format  I'd expect a single header value to be present in the response in the correct format.  The issue can be verified running https://github.com/spring-projects/spring-data-examples/tree/master/rest/headers and changing the Spring version to be used to anything 4.2.  ---  **Affects:** 4.2 RC1  **Issue Links:** - #18074 ETag/If-None-Match logic in HttpEntityMethodProcessor should not affect methods other than HTTP GET - #17976 ServletWebRequest.checkNotModified attempts to call HttpServletResponse.getStatus() on Servlet 2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dba46c13582051dce22f9ce0bbdf89894452886f, https://github.com/spring-projects/spring-framework/commit/39d689da0c938fa242f1c26cfe507a84a4256711, https://github.com/spring-projects/spring-framework/commit/a421bd2c27dd77f7f6cb05b040d2024945199365, https://github.com/spring-projects/spring-framework/commit/e2c8d3762fb1739193858553966474b82ec94791, https://github.com/spring-projects/spring-framework/commit/0175068cab7d294b6cce4369cbd7745dd03198ab  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2015-06-01T11:12:07Z","2019-01-11T15:44:28Z"
"","17661","Improve generics matching of ApplicationEvent subtypes with generic payload parameter [SPR-13069]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-13069](https://jira.spring.io/browse/SPR-13069?redirect=false)** and commented  Spring 4.2 introduces better matching of generic types for `ApplicationEvent` instances. The matching now requires a complete generic match for an event being delivered to an `ApplicationListener`. Assume the following scenario:  ```java class EventWithPayload {    public EventWithPayload(T source) {     super(source);   } } ```  The main purpose of a generic type introduced in an `ApplicationEvent` is to allow `ApplicationListeners` to be declared to match that particular type:  ```java class PersonEventListener implements ApplicationListener> { … } ```  The delivery of instances of such an event now only works if a dedicated sub-type that fills the generic parameter is used (e.g. a `new EventWithPayload(person) {`} is thrown). However, if the generic type is used as is, delivery fails as the event type is basically interpreted as `EventWithPayload` and thus (understandably) doesn't match the generics matching.  I suggest to introduce an annotation that can be used on `EventWithPayload` to let Spring Framework inspect the event's payload type and include that in the matching algorithm. It basically expresses: ""in this event type the generic type is used to bind the payload"".  ```java @PayloadGenerics(0) // index of the generic parameter in case multiple ones are use, default to 0 class EventWithPayload { … } ```  Alternatively, an idea might be to analyze the return type of `getSource()` and inspect the payload if that method has been overridden to return any of the generic parameters of the type.  ```java class EventWithPayload {    public EventWithPayload(T source) {     super(source);   }    @Override   public T getSource() {     return (T) super.getSource();   } } ```    ---  **Affects:** 4.2 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/06a0dfa6823e3c70249ec4a0dd96a3f18d5c6158, https://github.com/spring-projects/spring-framework/commit/b87816ed205b4976c47541f8838e931fc9a425c2","closed","type: enhancement,","spring-projects-issues","2015-05-25T10:04:49Z","2015-06-30T15:26:23Z"
"","17646","Make PropertyMatches public [SPR-13054]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-13054](https://jira.spring.io/browse/SPR-13054?redirect=false)** and commented  `PropertyMatches` is currently used by the `BeanWrapper` implementations to hint users to available properties in case a property reference the user expressed can't be resolved.  Calculating these possible matches would be generally useful in the data projects, e.g. to guide users in creating repository query methods or generally building up domain type based queries referencing properties.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a87d5f8a63f69691fb7bac5aa758fc1b73dc0f18, https://github.com/spring-projects/spring-framework/commit/bd601ce2e49cba84447f2374747108099e8867c8","closed","type: enhancement,","spring-projects-issues","2015-05-21T06:51:08Z","2015-05-26T01:14:57Z"
"","17632","Doc: Don't mix up native schema creation with JPA 2.1 standard one [SPR-13040]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-13040](https://jira.spring.io/browse/SPR-13040?redirect=false)** and commented  JPA 2.1 defines a property to enable schema creation with a persistence provider. According to Steve Ebersole of Hibernate that might conflict with the native schema creation we currently activate in the `JpaVendorAdapter` implementations (at least for Hibernate). We should make sure that a user does not accidentally activates both.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/11ec9998aeeef96560f41886984d44e450915e87","closed","type: task,","spring-projects-issues","2015-05-18T00:52:23Z","2015-07-15T09:05:06Z"
"","17612","Improve JavaDoc for ApplicationEvent constructor [SPR-13021]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-13021](https://jira.spring.io/browse/SPR-13021?redirect=false)** and commented  The JavaDoc of the `source` parameter of the constructor of `ApplicationEvent` mentions ""component"" which might be misread as ""the application component that produces the even"". The JavaDoc of `EventObject` rather implies that it's the contextual object that the event occurs on (e.g. a user for a `PasswordChangedEvent`).  We should improve the JavaDoc of the parameter in `ApplicationEvent`'s constructor to avoid this ambiguity.   --- No further details from [SPR-13021](https://jira.spring.io/browse/SPR-13021?redirect=false)","closed","in: core,","spring-projects-issues","2015-05-13T04:36:38Z","2015-05-26T01:15:28Z"
"","17556","Add HttpMessageConverter for XMLBeam projector [SPR-12964]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12964](https://jira.spring.io/browse/SPR-12964?redirect=false)** and commented  [XMLBeam](http://xmlbeam.org/) is a nice little library to create proxies for projection interfaces that refer to XML documents by using XPath expressions on methods (an approach somewhat related to Spring Data repositories).  The primary benefit in XMLBeam based data binding is that XPath expressions allow you to define more lenient data binding expressions that - in contrast to a object binding approach like JAXB - is less likely to break in case the schema changes slightly.  It would be cool if we shipped an `HttpMessageConverter` that would get registered with Spring MVC if XMLBeam was on the classpath. I prepared a sample and a rudimental implementation of such a converter [here](https://github.com/olivergierke/spring-examples/commit/3b7e5c0215f0759e5fef95fc73bda29f14fc1929).   --- No further details from [SPR-12964](https://jira.spring.io/browse/SPR-12964?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-04-29T02:41:43Z","2019-01-12T00:16:51Z"
"","17403","@Order annotations not consistently honored within DispatcherServlet and other parts of the framework [SPR-12806]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12806](https://jira.spring.io/browse/SPR-12806?redirect=false)** and commented  `DispatcherServlet.initHandlerMappings(…)` uses `OrderComparator.sort(…)` instead of `AnnotationAwareOrderComparator.sort(…)` which misses out `HandlerMappings` that use `@Order` instead of implementing `Ordered`.  Probably an oversight that stems from the times when `@Order` didn't even exists. Might be worth grepping the framework sources for other uses of `OrderComparator` as I think `AnnotationAwareOrderComparator` should be used everywhere `OrderComparator` is used nowadays.  ---  **Affects:** 4.0.9, 4.1.5  **Issue Links:** - #17018 Support `@Order` on ApplicationListeners - #20761 Document common use cases for `@Order` vs `@Priority` vs `@DependsOn`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/13659d645ba73b6bf5cbb286bc25c10404c4301d","closed","type: enhancement,","spring-projects-issues","2015-03-11T06:58:34Z","2019-01-13T05:41:47Z"
"","17376","Re-allow handling empty request body [SPR-12778]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12778](https://jira.spring.io/browse/SPR-12778?redirect=false)** and commented  In case a request contains an empty body, Spring 4.1's `RequestResponseBodyMethodProcessor` calls `handleEmptyBody(…)` and immediately returns `null` without further consideration of `HandlerMethodArgumentResolver` instances that might be able to deal with an empty request body.  This is a regression in cases where the `HandlerMethodArgumentResolver` was explicitly designed to return a default value, which worked fine with 4.0.x.  ---  **Affects:** 4.1.5  **Issue Links:** - #16447 Contract of `@RequestBody`(required=true) not obeyed - #16766 ResponseBodyAdvice to accept null values? - [DATAREST-485](https://jira.spring.io/browse/DATAREST-485) RepositoryPropertyReferenceController.createPropertyReference(…) does not work for empty content supplied on Spring 4.1 - #18434 Spring Controller is not able to detect empty string ("""") as a string object in RequestBody - #17458 Contract of `@RequestPart`(required=false) not obeyed - #17459 HttpEntity controller method arguments should allow null body - #17605 Commons FileUpload failed after Spring framework upgrade  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-03-03T00:40:36Z","2019-01-13T05:41:55Z"
"","17298","ResolvableType.getType() should reflect the set up type correctly [SPR-12701]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12701](https://jira.spring.io/browse/SPR-12701?redirect=false)** and commented  When creating `ResolvableType` instances using the factory methods that take generics as arguments (e.g. `forClassWithGenerics(…)`) I'd expect `ResolvableType.getType()` to return a `ParameterizedType` instance. Currently it just returns the raw `Class`.  The context I'd like to use this in is `RestTemplates` `ParameterizedTypeReference` whose `getType()` method I override to return a `ParameterizedType` whose outer type I am aware of but need to customize the component type. Imagine I need to translate an `List` defined as method return type into a `Resources`. I currently create an anonymous class to implement `ParameterizedType` and manually convert the generics exposed by the manually set up `ResolvableType`.  ```java ResolvableType resolvableType = ResolvableType.forClassWithGenerics(ObjectFactory.class, String.class);  Type type = resolvableType.getType();  assertThat(type, is(instanceOf(ParameterizedType.class))); assertThat(((ParameterizedType) type).getActualTypeArguments()[0], is(equalTo(String.class))); ```  ---  **Issue Links:** - #18116 OutOfMemory Exception when publishing User Events - #21001 Resolvable type cannot resolve generic between different collection types  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/91a0107e4abba457f72ed1b6bd541611039832fe","closed","type: enhancement,","spring-projects-issues","2015-02-08T10:01:41Z","2019-01-11T21:29:50Z"
"","17291","ClassCastException in ResponseBodyEmitterReturnValueHandler.supportsReturnType(…) [SPR-12693]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12693](https://jira.spring.io/browse/SPR-12693?redirect=false)** and commented  `ResponseBodyEmitterReturnValueHandler.supportsReturnType(…)` casts a previously looked up type argument to cast and thus will cause a `ClassCastException` in case the type argument is a parameterized in turn (e.g. using `ResponseEntity>`).  ```java ParameterizedType type = (ParameterizedType) paramType; Type[] typeArguments = type.getActualTypeArguments(); if (typeArguments.length == 1) { 	return ResponseBodyEmitter.class.isAssignableFrom((Class) typeArguments[0]); } ```    --- No further details from [SPR-12693](https://jira.spring.io/browse/SPR-12693?redirect=false)","closed","type: bug,","spring-projects-issues","2015-02-05T07:52:30Z","2015-05-26T01:15:20Z"
"","17255","Add support for @Lazy on @Resource injection points [SPR-12654]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12654](https://jira.spring.io/browse/SPR-12654?redirect=false)** and commented  Currently using `@Lazy` alongside `@Autowired` causes a proxy with a `LazyInitTargetSource` created for the component injected. Currently this does not work with `@Resource` but it would be cool if it did.   ---  **Affects:** 4.0.9, 4.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e3d1a1dda22723fc896bfc96c6db57c500faf208  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2015-01-22T07:56:07Z","2015-05-26T01:15:25Z"
"","17190","ObjectToOptionalConverter should use Optional.ofNullable(…) instead of Optional.of(…) [SPR-12589]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12589](https://jira.spring.io/browse/SPR-12589?redirect=false)** and commented  In case the `ConversionService` used in the `ObjectToOptionalConverter` is a `FormattingConversionService`, a `ParserConverter` will be used for the `String` to object conversion. For empty `String` instances this will immediately return `null` from `convert(…)` which then causes an exception as the `ObjectToOptionalConverter` passes it to `Optional.of(…)`.  Here's a sample scenario:  ```java String someMethod(@RequestParam Optional location) { … } ```  Now imagine we have a `Formatter` registered to turn a request parameter `String` into a `Point`. If now a request `?location=` (no value) is triggered, the scenario described above kicks in.   ---  **Affects:** 4.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ed665a12a32b8ad1dcdd8fc4549bae3ed7a1074d, https://github.com/spring-projects/spring-framework/commit/ec84fa6da3279cdb8e082d0646db3d886acc12ae","closed","in: core,","spring-projects-issues","2014-12-31T08:46:07Z","2015-02-20T04:13:09Z"
"","17178","Regression in TransactionAspectSupport.determineTransactionManager(…) [SPR-12577]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12577](https://jira.spring.io/browse/SPR-12577?redirect=false)** and commented  If multiple `PlatformTransactionManager` beans are registered in an `ApplicationContext`, a raw `@Transactional` declaration should use the transaction manager bean that is determined via `TransactionAspectSupport.transactionManagerBeanName`. The changes for #17145 now completely ignore that property as the `TransactionAttribute.getQualifier()` is mistakenly compared to `null`. A not set qualifier will result in an empty `String` for annotation based `TransactionAttributeSource` instances so that the else clause can never be reached when using `@Transactional` and thus the configured bean name gets ignored. This subsequently leads to a `NoUniqueBeanDefinitionException` due to the by-type lookup returning two candidate beans.  ---  **Affects:** 4.1.4  **Issue Links:** - [DATAJPA-657](https://jira.spring.io/browse/DATAJPA-657) TransactionManager reference is ignored when using Spring 4.1.4 (_**""is depended on by""**_) - #17145 `@Transactional` qualifier is ignored by TransactionAspectSupport if default transaction manager is set - #17185 Core interceptors overhaul - #17207 Wrong TransactionManager selected when mixing `@Transactional` with and w/o qualifier  0 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2014-12-30T09:11:58Z","2019-01-13T05:43:06Z"
"","17863","DispatcherServlet: enable applyDefaultViewName to access multipart request parameters [SPR-13272]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-13272](https://jira.spring.io/browse/SPR-13272?redirect=false)** and commented  I wonder if it is on purpose that `DispatcherServlet.applyDefaultViewName` gets the original `request` as parameter and not `processedRequest` (see `doDispatch`, currently line 965).  We have a scenario where our default view name might depend on the current request parameters. However, in the case of a multipart request these parameters are gone and have been parsed already into `processedRequest`. So the simple solution to this problem would be to pass `processedRequest` instead of `request` as parameter to `applyDefaultViewName`.  Is there a reason not to do this?   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e1cce309ae6ceb75faa6cb09a6e51d3344210092","closed","type: enhancement,","spring-projects-issues","2015-07-24T03:46:16Z","2015-07-31T02:39:20Z"
"","17860","HibernateJpaDialect should warn about connection release mode other than ON_CLOSE (when upgrading from 4.0.x) [SPR-13269]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-13269](https://jira.spring.io/browse/SPR-13269?redirect=false)** and commented  We have a Spring MVC web application with Hibernate 4.3.10 as JPA provider and HikariCP 2.3.9 as our data source.  After updating Spring to the latest 4.1 version we noticed connection leaks (reported by Hikari). These leaking connections always belong to readonly transactions, more specific the outermost transaction must be readonly (annotated as `@Transactional(readonly=true)`)  After some debugging the relevant code seems to be in `org.springframework.orm.jpa.vendor.HibernateJpaDialect`, inner class `SessionTransactionData`, method `resetSessionState`.  The point is that this method is called from `cleanupTransaction`, i.e. after the transaction has been committed and the corresponding connection has been released already. `resetSessionState` then gets again a connection (the same instance), but this time it is never released. This happens only if `resetConnection` is `true`, which in turn happens for readonly transactions. So if this transaction is the outermost transaction then nobody closes the connection obtained in `resetSessionState`.  I cannot really believe that there is such a serious bug present for already 7 minor releases - so what am I doing wrong? Where is the reset connection supposed the be released?  ---  **Affects:** 4.1.7  **Issue Links:** - #17594 Compatibility with Hibernate ORM 5.0 GA - #13599 readOnly transaction doesn't work with JPA and Hibernate 4 - #16559 Isolation support for JPA with Hibernate EntityManager 4 - #18966 JDBC Connection to reset not identical to originally prepared Connection with Hibernate 5.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a1107af06f592f35d0e17e0f24041d5d6eb01cd3  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-07-23T06:40:41Z","2019-01-11T18:03:17Z"
"","17739","ResourceUtils issue [SPR-13148]","**[Oleksandr Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=aivanov)** opened **[SPR-13148](https://jira.spring.io/browse/SPR-13148?redirect=false)** and commented  Hi guys. Have an issue with org.springframework.util.ResourceUtils. So currently I'm not able to use clsasspath files from archives(jar). Method ""getFile(String resourceLocation)"" throws FileNotFoundException. Input string: ""classpath:mapping/rules/Reload.groovy"" Output is next: `class path resource [mapping/rules/Reload.groovy] cannot be resolved to absolute file path because it does not reside in the file system: jar:file:/C:/Dev/lib/ext/rules-mapping-4.4.4-SNAPSHOT.jar!/mapping/rules/Reload.groovy`   --- No further details from [SPR-13148](https://jira.spring.io/browse/SPR-13148?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-06-19T03:00:32Z","2019-01-12T02:27:20Z"
"","17691","Spring does not log deserialization / marshalling errors to the console [SPR-13100]","**[Ole K Ersoy](https://jira.spring.io/secure/ViewProfile.jspa?name=ole)** opened **[SPR-13100](https://jira.spring.io/browse/SPR-13100?redirect=false)** and commented  When submitting dates that Spring does not know how to desearialize it's possible to see the exception in the REST response.  For example I can do the following:          response =             given().auth()                 .basic(ADMIN_USER, PASSWORD)                 .contentType(APPLICATION_JSON_CONTENT_TYPE)                 .body(updatedJSON)                 .when()                 .put(contactRestPath);              System.out.println(response.getBody().asString());  I was running the above in a test, however GSON did not serialize the date to something Spring could read, thus the corresponding controller method (Update method) was never called.  It would be nice if Spring could log the exception to the console, so that what is happening is more clear.  SIDE NOTE: GSON has been around for a while, so I assumed that it would have a serialization/desearialization strategy that fits well with most rest frameworks: https://github.com/google/gson/issues/650  Cheers, - Ole  ---  **Affects:** 4.2 RC1  **Issue Links:** - #18174 Inappropriate warn logging in AbstractHandlerExceptionResolver (e.g. for 404 status) - #18189 Consistent warn logging without stacktrace in Portlet HandlerExceptionResolver","closed","type: enhancement,","spring-projects-issues","2015-06-05T09:19:53Z","2019-01-11T16:26:21Z"
"","17227","ConfigurationClassPostProcessor's MetaData resolution ignores the defining class loader, failing to load classes from transitive class loaders [SPR-12626]","**[Olaf Otto](https://jira.spring.io/secure/ViewProfile.jspa?name=olaf)** opened **[SPR-12626](https://jira.spring.io/browse/SPR-12626?redirect=false)** and commented  During the resolution of AnnotationMetadata, the following issue arises if a class A with classloader Ca and a super class B with classloaderCb is processed in the ConfigurationClassParser (provided  Cb is not the parent of Ca, for instance when using imported types in OSGi)  ``` org.springframework.beans.factory.BeanDefinitionStoreException: Failed to load bean class:  nested exception is java.io.FileNotFoundException: class path resource path/to/B.class] cannot be opened because it does not exist at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:291) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:242) ```  Here, the parsing of the super class is unaware of the class loader of the extending class:  ```java String superclass = metadata.getSuperClassName(); ... MetadataReader reader = this.metadataReaderFactory.getMetadataReader(superclass); return reader.getAnnotationMetadata(); ```  However, this also is an architectural issue, as it is an explicit design goal of the ClassMetadata not to load the type (resulting in the defining class loader being ignored), as state in the ClassMetaData JavaDoc:  ```java * in a form that does not require that class to be loaded yet. ```  As there is no way to determine the defining class loader without loading the class, I do suggest to drop this design goal as it directly contradicts proper treatment of class loading semantics.   ---  **Affects:** 3.2.13  **Attachments:** - [SPR-12626-testcase.patch](https://jira.spring.io/secure/attachment/22594/SPR-12626-testcase.patch) (_5.03 kB_)","closed","status: bulk-closed,","spring-projects-issues","2015-01-14T05:02:59Z","2019-01-12T03:30:25Z"
"","17545","DispatcherServlet throw two Exceptions when the uploading file exceed the limit size [SPR-12953]","**[nivance](https://jira.spring.io/secure/ViewProfile.jspa?name=nivance)** opened **[SPR-12953](https://jira.spring.io/browse/SPR-12953?redirect=false)** and commented  when upload a SizeLimited file, the below coeds in DispatcherServlet throw the MaxUploadSizeExceededException,  if (!mappedHandler.applyPreHandle(processedRequest, response)) { return; }  this exception can catch by `@ExceptionHandler`.  But after that, in the finally code block, cleanupMultipart throws SizeLimitExceededException again, this exception can't catch by `@ExceptionHandler`, and response nothing for the request.   ---  **Affects:** 4.0.3, 4.1.6  **Issue Links:** - [SEC-2945](https://jira.spring.io/browse/SEC-2945) DispatcherServlet throw two Exceptions when the uploading file exceed the limit size (_**""supersedes""**_)","closed","status: bulk-closed,","spring-projects-issues","2015-04-24T22:07:11Z","2019-01-12T00:16:56Z"
"","17809","Support single quotes nested in double quotes in SQL scripts [SPR-13218]","**[Nicolas Debeissat](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeb)** opened **[SPR-13218](https://jira.spring.io/browse/SPR-13218?redirect=false)** and commented  #### Status Quo  Some databases (e.g., Oracle) permit double quoted column aliases that include case-sensitive characters, single quotes, and other special special characters.  For example, in the following SQL statement that is used to populate an embedded database from scripts with Spring, the single quote should not be interpreted as a literal.  ```sql select address as ""programmer's address"" from programmer ```  #### Analysis  Spring's `ScriptUtils` currently interprets a single quote nested in double quotes as the start of a string literal, causing the parsing of the SQL statement to fail.  #### Deliverables  1. [x] Ensure that single quotes nested in double quotes do not result in a parsing error.  ---  **Affects:** 4.0.3  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/835  **Issue Links:** - #19952 Oracle SQL hints are ignored as comments in ScriptUtils  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/629bcb6599f02be63bcdf03da6e1d3df3481437f","closed","type: enhancement,","spring-projects-issues","2015-07-10T06:23:54Z","2019-01-11T18:07:18Z"
"","17429","Thread contention in HandlerMethod due to unnecessary BeanFactory.getType call [SPR-12832]","**[Nick Verbeck](https://jira.spring.io/secure/ViewProfile.jspa?name=nerdynick)** opened **[SPR-12832](https://jira.spring.io/browse/SPR-12832?redirect=false)** and commented  I am seeing a very large thread blocking contention on AbstractRefreshableApplicationContext.getBeanFactory() method for a very high transnational MVC app. I have done a bit of digging into the spring code base and know what the issue is. I have also got a few ideas on how to fix it. First off here is the thread dump showing the block:  ``` java.lang.Thread.State: BLOCKED at org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableApplicationContext.java:168) waiting to lock <78d90cb> (a java.lang.Object) owned by ""EmbeddedJettyThread-75"" t@75 at org.springframework.context.support.AbstractApplicationContext.getType(AbstractApplicationContext.java:1009) at org.springframework.web.method.HandlerMethod.getBeanType(HandlerMethod.java:161) at org.springframework.web.method.HandlerMethod$HandlerMethodParameter.getContainingClass(HandlerMethod.java:258) at org.springframework.core.ResolvableType.forMethodParameter(ResolvableType.java:1094) at org.springframework.core.ResolvableType.forMethodParameter(ResolvableType.java:1063) at org.springframework.core.convert.TypeDescriptor.(TypeDescriptor.java:77) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:107) at org.springframework.beans.TypeConverterSupport.doConvert(TypeConverterSupport.java:64) at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:47) at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:603) at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:104) at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77) at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162) at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:129) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:777) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:706) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:943) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857) at javax.servlet.http.HttpServlet.service(HttpServlet.java:687) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) ```  In my digging around and debugging. I traced the contention back to the RequestMappingHandlerMapping. When it goes to handle a request it will find the respective HandlerMethod for the controller method being requested. Once it has the instance it then calls HandlerMethod.createWithResolvedBean(). This is where one of the first blockings happens, as the HandlerMethod instance is created with just the beanName value vs the actual bean reference. So it now must call out to the BeanFactory and get the bean, resulting in a sync lock. Now as part of the createWithResolvedBean() flow the method params (HandlerMethod.HandlerMethodParameter) from the previous HandlerMethod are passed to the new one. This part becomes important as you will see. Continuing on with the handling of the request we later go about performing method parameter resolving. At this point we iterate over all the HandlerMethod.parameters (InvocableHandlerMethod.getMethodArgumentValues()) to see if we need to resolve the type to a different one. As part of that check we call HandlerMethod.HandlerMethodParameter.getContainingClass() which is a call back up to the parent class's HandlerMethod.getBeanType(). Now as I mentioned earlier this parent was created with the beanName not the bean reference. Even thought the params where copied to a new HandlerMethod instance with a resolved bean. The parent reference in HandlerMethodParameter is to the previous HandlerMethod it was created under. This results in a block for every parameter your controller method is looking for. So in a highly transactional app, especially with lots of params being expected, it ends up blocking most of the threads all the time. Hopefully that all makes sense. Now I have 2 proposals for a change to remedy this issue. 1) Change the AbstractHandlerMethodMapping.initHandlerMethods() to pass the bean reference when it calls detectHandlerMethods() instead of the beanName. This would cause the cached instances of HandlerMethod to hold a reference as well as their HandlerMethodParameter instances. This would removed the locks during params type resolution as well as during the initial HandlerMapping.getHandler() (HandlerMethod.createWithResolvedBean). This should also greatly reduce CPU load. 2) The second optional I have is to modify HandlerMethod.\(HandlerMethod handlerMethod) and HandlerMethod.\(HandlerMethod handlerMethod, Object handler). To do a shallow copy of the params. Which I believe should move the parent reference over to the new HandlerMapping instance. This would remove the contention on the param type resolution, but would leave the one on the HandlerMapping.getHandler().  ---  **Affects:** 4.1.5  **Issue Links:** - #14382 Share MethodParameter cache between HandlerMethods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5f95ff6bfd367664e76b48cdca9f33f6c6ee9b64, https://github.com/spring-projects/spring-framework/commit/898c24fcdd7930bff9717903c9884c0c8d146fa5","closed","type: bug,","spring-projects-issues","2015-03-19T16:24:18Z","2019-01-11T21:39:51Z"
"","17877","Undefined behaviour for annotation based configs when method return type doesn't match returned object [SPR-13287]","**[Nicholas Wertzberger](https://jira.spring.io/secure/ViewProfile.jspa?name=rannick)** opened **[SPR-13287](https://jira.spring.io/browse/SPR-13287?redirect=false)** and commented  ```java public class A implements B, C {  }  @Configuration public class Configuration {     @Bean     public B getB() {         return new A();     }      @Bean     public D getD(B b) {         return new D(b);     }      @Bean     public E getE(C c) {         return new E(c);     } } ```  If D is created first, E will also be successfully created (the object returned by getB implements C). If D is created second, E will fail to be created. The expected behavior is that getE should never succeed.   ---  **Affects:** 4.1.1","closed","status: bulk-closed,","spring-projects-issues","2015-07-29T06:05:10Z","2019-01-12T02:26:28Z"
"","17460","Spring's AbstractResource (used in spring-mvc) is unusable in Docker. [SPR-12862]","**[Nicholas Wertzberger](https://jira.spring.io/secure/ViewProfile.jspa?name=rannick)** opened **[SPR-12862](https://jira.spring.io/browse/SPR-12862?redirect=false)** and commented  It appears that Spring does a sanity check on the lastModified date of files before using them with the AbstractResource class.  When using spring templates to render a UI for an html page, this sanity check fails on docker images, which appear to have a lastModified date of Jan 1, 1970 (an epoch time of 0L).  This means that no spring-mvc app works in a docker container without some echo -n >> /path/to/file's (totally ruining the point) to start up the container.  Here's the failing line: http://grepcode.com/file/repo1.maven.org/maven2/org.springframework/spring-core/4.1.4.RELEASE/org/springframework/core/io/AbstractResource.java?av=f#152  P.S. I also have a bug with docker to not have a last modified of NEVER, but it seems weird that you would fail completely on this.  ---  **Affects:** 4.1.4  **Reference URL:** http://stackoverflow.com/questions/29337432/spring-templates-in-docker-container/29337588#29337588  **Issue Links:** - #21853 HTTP 404 for static resources with last modified = 0L (breaks Docker images build with Jib)  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2015-03-29T19:57:07Z","2019-01-12T16:23:26Z"
"","17896","UriComponents should support URI variables that contain a regex [SPR-13311]","**[nbank](https://jira.spring.io/secure/ViewProfile.jspa?name=nbank)** opened **[SPR-13311](https://jira.spring.io/browse/SPR-13311?redirect=false)** and commented  In org.springframework.web.util.UriComponents#NAMES_PATTERN the following Pattern is used: {([^/]+?)}  If you use Path-Variables like myurl/{name:[a-z]{1,5}}/show so accept only 5 lower case letters, then the UriCompents work wrong, because it will expand for name=test to myurl/test}/show which is wrong.  One Workaround is to cleanup the url before with  ```java url.replaceAll(""\\{([A-Za-z0-9_-]+?):([^{}]+?\\{[0-9,]+?\\})*([^{}]+)*\\}"", ""{$1}""); ```  ---  **Affects:** 4.1.7  **Issue Links:** - #18205 UriTemplate should support regex matching with n times {n} pattern  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2e79a30fedef46d02c3fd8c18a012c3e48495e6f","closed","type: enhancement,","spring-projects-issues","2015-08-04T00:32:03Z","2019-01-13T20:51:24Z"
"","17648","ByteBuffer corrupted by ByteBufferConverter when passed through Spring [SPR-13056]","**[Nathan Hull](https://jira.spring.io/secure/ViewProfile.jspa?name=lilnate)** opened **[SPR-13056](https://jira.spring.io/browse/SPR-13056?redirect=false)** and commented  It looks like spring-core 4.x has a bug in how it handles a ByteBuffer being sent on a Spring channel. It converts the ByteBuffer to a byte array, then takes the first element of that array, converts that to a byte array, and then wraps that byte array in a new ByteBuffer. As a result, when I pass a ByteBuffer on a Spring channel, I get a different ByteBuffer out and it only contains the first element, if the ByteBuffer had one or more elements remaining. Most of this happens in ByteBufferConverter.   ---  **Attachments:** - [springBug-sources.jar](https://jira.spring.io/secure/attachment/22816/springBug-sources.jar) (_2.16 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/792b7b9d114b4075c3bbe111ffdf056261c60562, https://github.com/spring-projects/spring-framework/commit/1177f5c0a30b94b42b3aed38eb9d2dcf380c0119, https://github.com/spring-projects/spring-framework/commit/008c9a3b459a5dfd14ae334f03099cbff848d7d9, https://github.com/spring-projects/spring-framework/commit/fee63fdfb854c072ebfe23db1d7e949647320fd4","closed","type: bug,","spring-projects-issues","2015-05-15T05:24:41Z","2015-05-26T01:15:00Z"
"","17689","java.lang.VerifyError: $$EnhancerBySpringCGLIB$$744256ce, method:  signature: ()V) Illegal type in constant pool [SPR-13098]","**[Narasimha](https://jira.spring.io/secure/ViewProfile.jspa?name=narasimhachinimilly@gmail.com)** opened **[SPR-13098](https://jira.spring.io/browse/SPR-13098?redirect=false)** and commented  Hi,  Recently we migrated our project from Spring 3.X to Spring 4.0.9. We did this upgradation for Java8 support and Tomcat 7.0.59 support. And currently migrating the project to full Spring MVC.  We have a requirement like some of our controllers might night be instantiated out of Spring. For that we have used `@Configurable` annotation. Everything is working fine so far.  Now the requirement came like we need to introduce an aspect to do some operation dynamically. For example we need to execute a method on the target object when a particular annotation is available on the method.  We are using LoadTimeWeaving , I did all configuration as per spring documents. But whenever I am starting the server I am getting the following error.  java.lang.VerifyError: (class: XXXServiceSpringMvc$$EnhancerBySpringCGLIB$$744256ce, method: \ signature: ()V) Illegal type in constant pool at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:386) at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:219) at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:377) at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:317) at org.springframework.aop.framework.ObjenesisCglibAopProxy.createProxyClassAndInstance(ObjenesisCglibAopProxy.java:57) at org.springframework.aop.framework.CglibAopProxy.getProxy(CglibAopProxy.java:202) at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:109) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.createProxy(AbstractAutoProxyCreator.java:496) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:381) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:341) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:421) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1559) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:229) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:706) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:762) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482) at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136) at javax.servlet.GenericServlet.init(GenericServlet.java:158) at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1284) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1197) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1087) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:5262) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5550) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1575) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1565) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745)  ---  **Affects:** 4.0.9  **Issue Links:** - #17722 ObjenesisCglibAopProxy's fallback mode triggers duplicate class definition error","closed","status: bulk-closed,","spring-projects-issues","2015-06-04T08:17:08Z","2020-09-10T13:32:32Z"
"","17309","RestTemplate cannot handle GZIP response since 4.1.3 [SPR-12712]","**[Moosh Ben](https://jira.spring.io/secure/ViewProfile.jspa?name=mooshben)** opened **[SPR-12712](https://jira.spring.io/browse/SPR-12712?redirect=false)** and commented  We are using RestTemplate in our project with HttpClient. Calling an API that returns a Gzipped response stopped working after upgrading to 4.1.3 (also not working in 4.1.4) .  RestTemplate creation:  ``` RestTemplate rt = new RestTemplate(); 		 List> messageConverters = new ArrayList<>();  Jaxb2RootElementHttpMessageConverter xmlConverter = new Jaxb2RootElementHttpMessageConverter(); List mediaTypes = new ArrayList(); mediaTypes.add(MediaType.APPLICATION_XML); mediaTypes.add(MediaType.TEXT_XML); xmlConverter.setSupportedMediaTypes(mediaTypes); messageConverters.add(xmlConverter);  MappingJackson2HttpMessageConverter jsonConverter = new MappingJackson2HttpMessageConverter(); mediaTypes = new ArrayList(); mediaTypes.add(MediaType.APPLICATION_JSON);  // Only valid for qualys mediaTypes.add(MediaType.TEXT_HTML); jsonConverter.setSupportedMediaTypes(mediaTypes); messageConverters.add(jsonConverter);  messageConverters.add(new StringHttpMessageConverter(Charset.forName( ""UTF-8""))); messageConverters.add(new FormHttpMessageConverter());  MultiPartMessageConverter multipartConverter = new MultiPartMessageConverter(); mediaTypes = new ArrayList(); mediaTypes.add(new MediaType(""multipart"", ""mixed""));  multipartConverter.setSupportedMediaTypes(mediaTypes); messageConverters.add(multipartConverter);  rt.setMessageConverters(messageConverters); rt.setRequestFactory(new HttpComponentsClientHttpRequestFactory(httpClientFactory.getHttpClient()));  return rt; ```  Trace log of request and response (check the last line that prints the response of the exchange call):  ``` 2015-02-12 12:47:39,500 DEBUG RestTemplate             :78   - Created POST request for ""https://1.1.1.1/test"" 2015-02-12 12:47:39,500 DEBUG RestTemplate             :696  - Setting request Accept header to [application/json, text/html, text/plain, */*] 2015-02-12 12:47:39,547 DEBUG RestTemplate             :769  - Writing [{name=[value]}] as ""application/x-www-form-urlencoded"" using [org.springframework.http.converter.FormHttpMessageConverter@4f836d9] 2015-02-12 12:47:39,579 DEBUG RequestAddCookies        :122  - CookieSpec selected: default 2015-02-12 12:47:39,579 DEBUG RequestAddCookies        :151  - Unsupported cookie policy: default 2015-02-12 12:47:39,579 DEBUG RequestAuthCache         :76   - Auth cache not set in the context 2015-02-12 12:47:39,579 DEBUG tpClientConnectionManager:249  - Connection request: [route: {s}->https://1.1.1.1][total kept alive: 0; route allocated: 0 of 20; total allocated: 0 of 200] 2015-02-12 12:47:39,625 DEBUG tpClientConnectionManager:282  - Connection leased: [id: 0][route: {s}->https://1.1.1.1][total kept alive: 0; route allocated: 1 of 20; total allocated: 1 of 200] 2015-02-12 12:47:39,625 DEBUG MainClientExec           :234  - Opening connection {s}->https://1.1.1.1 2015-02-12 12:47:39,641 DEBUG pClientConnectionOperator:131  - Connecting to /1.1.1.1 2015-02-12 12:47:39,641 DEBUG SLConnectionSocketFactory:336  - Connecting socket to /1.1.1.1 with timeout 0 2015-02-12 12:47:40,109 DEBUG SLConnectionSocketFactory:389  - Enabled protocols: [TLSv1, TLSv1.1, TLSv1.2] 2015-02-12 12:47:40,109 DEBUG SLConnectionSocketFactory:390  - Enabled cipher suites:[TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_DSS_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_ECDSA_WITH_RC4_128_SHA, TLS_ECDHE_RSA_WITH_RC4_128_SHA, SSL_RSA_WITH_RC4_128_SHA, TLS_ECDH_ECDSA_WITH_RC4_128_SHA, TLS_ECDH_RSA_WITH_RC4_128_SHA, SSL_RSA_WITH_RC4_128_MD5, TLS_EMPTY_RENEGOTIATION_INFO_SCSV] 2015-02-12 12:47:40,109 DEBUG SLConnectionSocketFactory:394  - Starting handshake 2015-02-12 12:47:40,312 DEBUG SLConnectionSocketFactory:424  - Secure session established 2015-02-12 12:47:40,312 DEBUG SLConnectionSocketFactory:425  -  negotiated protocol: TLSv1 2015-02-12 12:47:40,312 DEBUG SLConnectionSocketFactory:426  -  negotiated cipher suite: TLS_RSA_WITH_AES_128_CBC_SHA 2015-02-12 12:47:40,312 DEBUG SLConnectionSocketFactory:434  -  peer principal: CN=Test, ST=NY, C=US, L=New York, OU=My Server, O=My Users United 2015-02-12 12:47:40,312 DEBUG SLConnectionSocketFactory:447  -  issuer principal: CN=My Certification Authority (5c858e74), ST=NY, C=US, L=New York, OU=My Certification Authority (5c858e74), O=My Users United 2015-02-12 12:47:40,312 DEBUG pClientConnectionOperator:138  - Connection established 192.168.3.182:51715<->1.1.1.1 2015-02-12 12:47:40,312 DEBUG MainClientExec           :255  - Executing request POST /test HTTP/1.1 2015-02-12 12:47:40,312 DEBUG MainClientExec           :260  - Target auth state: UNCHALLENGED 2015-02-12 12:47:40,312 DEBUG MainClientExec           :266  - Proxy auth state: UNCHALLENGED 2015-02-12 12:47:40,327 DEBUG headers                  :124  - http-outgoing-0 >> POST /test HTTP/1.1 2015-02-12 12:47:40,327 DEBUG headers                  :127  - http-outgoing-0 >> Accept: application/json, text/html, text/plain, */* 2015-02-12 12:47:40,327 DEBUG headers                  :127  - http-outgoing-0 >> Content-Type: application/x-www-form-urlencoded 2015-02-12 12:47:40,327 DEBUG headers                  :127  - http-outgoing-0 >> Cookie: token=00e645824aa40ffb1c0819017d0a3dffdc64c3d5ae86d0f5 2015-02-12 12:47:40,327 DEBUG headers                  :127  - http-outgoing-0 >> Content-Length: 88 2015-02-12 12:47:40,327 DEBUG headers                  :127  - http-outgoing-0 >> Host: 1.1.1.1 2015-02-12 12:47:40,327 DEBUG headers                  :127  - http-outgoing-0 >> Connection: Keep-Alive 2015-02-12 12:47:40,327 DEBUG headers                  :127  - http-outgoing-0 >> User-Agent: Apache-HttpClient/4.4 (Java 1.5 minimum; Java/1.8.0_31) 2015-02-12 12:47:40,327 DEBUG headers                  :127  - http-outgoing-0 >> Accept-Encoding: gzip,deflate 2015-02-12 12:47:40,327 DEBUG wire                     :72   - http-outgoing-0 >> ""POST /test HTTP/1.1[\r][\n]"" 2015-02-12 12:47:40,327 DEBUG wire                     :72   - http-outgoing-0 >> ""Accept: application/json, text/html, text/plain, */*[\r][\n]"" 2015-02-12 12:47:40,327 DEBUG wire                     :72   - http-outgoing-0 >> ""Content-Type: application/x-www-form-urlencoded[\r][\n]"" 2015-02-12 12:47:40,327 DEBUG wire                     :72   - http-outgoing-0 >> ""Cookie: token=00e645824aa40ffb1c0819017d0a3dffdc64c3d5ae86d0f5[\r][\n]"" 2015-02-12 12:47:40,327 DEBUG wire                     :72   - http-outgoing-0 >> ""Content-Length: 88[\r][\n]"" 2015-02-12 12:47:40,327 DEBUG wire                     :72   - http-outgoing-0 >> ""Host: 1.1.1.1[\r][\n]"" 2015-02-12 12:47:40,327 DEBUG wire                     :72   - http-outgoing-0 >> ""Connection: Keep-Alive[\r][\n]"" 2015-02-12 12:47:40,327 DEBUG wire                     :72   - http-outgoing-0 >> ""User-Agent: Apache-HttpClient/4.4 (Java 1.5 minimum; Java/1.8.0_31)[\r][\n]"" 2015-02-12 12:47:40,327 DEBUG wire                     :72   - http-outgoing-0 >> ""Accept-Encoding: gzip,deflate[\r][\n]"" 2015-02-12 12:47:40,327 DEBUG wire                     :72   - http-outgoing-0 >> ""[\r][\n]"" 2015-02-12 12:47:40,327 DEBUG wire                     :86   - http-outgoing-0 >> ""name=value"" 2015-02-12 12:47:40,327 DEBUG wire                     :72   - http-outgoing-0 << ""HTTP/1.1 200 OK[\r][\n]"" 2015-02-12 12:47:40,343 DEBUG wire                     :72   - http-outgoing-0 << ""Date: Thu, 12 Feb 2015 10:47:40 GMT[\r][\n]"" 2015-02-12 12:47:40,343 DEBUG wire                     :72   - http-outgoing-0 << ""Server: MyWWW[\r][\n]"" 2015-02-12 12:47:40,343 DEBUG wire                     :72   - http-outgoing-0 << ""Connection: close[\r][\n]"" 2015-02-12 12:47:40,343 DEBUG wire                     :72   - http-outgoing-0 << ""Expires: Thu, 12 Feb 2015 10:47:40 GMT[\r][\n]"" 2015-02-12 12:47:40,343 DEBUG wire                     :72   - http-outgoing-0 << ""Content-Length: 122[\r][\n]"" 2015-02-12 12:47:40,343 DEBUG wire                     :72   - http-outgoing-0 << ""Content-Type: text/xml[\r][\n]"" 2015-02-12 12:47:40,343 DEBUG wire                     :72   - http-outgoing-0 << ""Content-Encoding: gzip[\r][\n]"" 2015-02-12 12:47:40,343 DEBUG wire                     :72   - http-outgoing-0 << ""X-Frame-Options: DENY[\r][\n]"" 2015-02-12 12:47:40,343 DEBUG wire                     :72   - http-outgoing-0 << ""Cache-Control: [\r][\n]"" 2015-02-12 12:47:40,343 DEBUG wire                     :72   - http-outgoing-0 << ""Expires: 0[\r][\n]"" 2015-02-12 12:47:40,343 DEBUG wire                     :72   - http-outgoing-0 << ""Pragma: [\r][\n]"" 2015-02-12 12:47:40,343 DEBUG wire                     :72   - http-outgoing-0 << ""[\r][\n]"" 2015-02-12 12:47:40,343 DEBUG wire                     :72   - http-outgoing-0 << ""[0x1f][0x8b][0x8][0x0][0x0][0x0][0x0][0x0][0x0][0x3][0xb3][0xb1][0xaf][0xc8][0xcd]Q(K-*[0xce][0xcc][0xcf][0xb3]U2[0xd4]3PRH[0xcd]K[0xce]O[0xc9][0xcc]K[0xb7]U[\n]"" 2015-02-12 12:47:40,343 DEBUG wire                     :72   - http-outgoing-0 << ""[\r]q[0xd3][0xb5]P[0xb2][0xb7][0xe3][0xb2])J-[0xc8][0xa9][0x4][0xd2][0xc5][0xa9][0x85]v6[0xfa] [0x12][0xc8].I,)-[0xb6][0xf3][0xf7][0x6][\n]"" 2015-02-12 12:47:40,343 DEBUG wire                     :86   - http-outgoing-0 << ""@[0x98]\6[0xc9][0xf9]y%[0xa9]y%[0xc5]v6[0x5]9[0xa5][0xe9][0x99]y>[0x99][0xc5]%@[\r]H[0x1c].[0x1b]}[0xb8]"" [0x1b]b0[0x0][0x9e]'[0xc0][0xa8][0x87][0x0][0x0][0x0]"" 2015-02-12 12:47:40,343 DEBUG headers                  :113  - http-outgoing-0 << HTTP/1.1 200 OK 2015-02-12 12:47:40,343 DEBUG headers                  :116  - http-outgoing-0 << Date: Thu, 12 Feb 2015 10:47:40 GMT 2015-02-12 12:47:40,343 DEBUG headers                  :116  - http-outgoing-0 << Server: MyWWW 2015-02-12 12:47:40,343 DEBUG headers                  :116  - http-outgoing-0 << Connection: close 2015-02-12 12:47:40,343 DEBUG headers                  :116  - http-outgoing-0 << Expires: Thu, 12 Feb 2015 10:47:40 GMT 2015-02-12 12:47:40,343 DEBUG headers                  :116  - http-outgoing-0 << Content-Length: 122 2015-02-12 12:47:40,343 DEBUG headers                  :116  - http-outgoing-0 << Content-Type: text/xml 2015-02-12 12:47:40,343 DEBUG headers                  :116  - http-outgoing-0 << Content-Encoding: gzip 2015-02-12 12:47:40,343 DEBUG headers                  :116  - http-outgoing-0 << X-Frame-Options: DENY 2015-02-12 12:47:40,359 DEBUG headers                  :116  - http-outgoing-0 << Cache-Control:  2015-02-12 12:47:40,359 DEBUG headers                  :116  - http-outgoing-0 << Expires: 0 2015-02-12 12:47:40,359 DEBUG headers                  :116  - http-outgoing-0 << Pragma:  2015-02-12 12:47:40,359 DEBUG ResponseProcessCookies   :76   - Cookie spec not specified in HTTP context 2015-02-12 12:47:40,374 DEBUG RestTemplate             :596  - POST request for ""https://1.1.1.1/test"" resulted in 200 (OK) 2015-02-12 12:47:40,390 DEBUG nagedHttpClientConnection:87   - http-outgoing-0: Shutdown connection 2015-02-12 12:47:40,390 DEBUG MainClientExec           :128  - Connection discarded 2015-02-12 12:47:40,390 DEBUG nagedHttpClientConnection:79   - http-outgoing-0: Close connection 2015-02-12 12:47:40,390 DEBUG tpClientConnectionManager:320  - Connection released: [id: 0][route: {s}->https://1.1.1.1][total kept alive: 0; route allocated: 0 of 20; total allocated: 0 of 200] 2015-02-12 12:48:12,022 INFO  TestTask                 :67   - Response: null ```  ---  **Affects:** 4.1.3, 4.1.4  **Issue Links:** - #12671 RestTemplate - support response mapping to entity with potentially empty response body. (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2015-02-12T02:56:26Z","2019-01-12T16:46:10Z"
"","17642","JDK 8 issue with Spring 2.5.x [SPR-13050]","**[Mohanavelu](https://jira.spring.io/secure/ViewProfile.jspa?name=mhnvelu)** opened **[SPR-13050](https://jira.spring.io/browse/SPR-13050?redirect=false)** and commented  Hi,  Our project used Spring 2.5.6 version and JDK 7. Currently we have upgraded from JDK 7 to JDK 8. During the upgrade and at runtime, the we have faced issue with HashMap.  Here is the HashMap created. Map objectMap = new HashMap();  On JDK 7,Spring 2.5.6: long key=1; objectMap.containsKey(key)  The above returns true.  On JDK 8,Spring 2.5.6: long key = 1; objectMap.containsKey(key)  The above returns false, though the map contains the key.  I have attached the class file and xml file for the reference.  Could you please suggest the solution for this issue and it is a blocker for us.   ---  **Attachments:** - [Bean.xml](https://jira.spring.io/secure/attachment/22814/Bean.xml) (_812 bytes_) - [SpringHashMapTest.java](https://jira.spring.io/secure/attachment/22813/SpringHashMapTest.java) (_1.27 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/a47fcd06b87c0209583622fd2dbef7406ea55490  0 votes, 6 watchers","closed","in: core,","spring-projects-issues","2015-05-19T22:53:00Z","2019-01-12T16:23:18Z"
"","17900","Spring Transactions - Bug. PROPAGATION REQUIRED FAILS TO BEHAVE [SPR-13315]","**[moe](https://jira.spring.io/secure/ViewProfile.jspa?name=moe1234512345)** opened **[SPR-13315](https://jira.spring.io/browse/SPR-13315?redirect=false)** and commented  EDIT: PLEASE DO NOT RECOMMEND THAT I USE TRANSACTION ANNOTAIONS FOR THIS. THIS IS NOT WHAT THIS BUG REPORT IS ABOUT. Related: http://stackoverflow.com/questions/31817664/spring-hibernate-manually-creating-transactions-propagation-required-fails-b  I have run into what appears to be a bug, related to Spring handling of transactions.  Please have a look at these two test cases, comments are in the code:  Entity class for example:  ```java @Entity public class Person{     @Id     String name; } ```  Some methods used:  ```java     public TransactionStatus requireTransaction() {             TransactionTemplate template = new TransactionTemplate();             template.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);             return getTransactionManager().getTransaction(template);     }          public Session session() {             return getRepository().session();     }          public PlatformTransactionManager getTransactionManager() {             return getRepository().getTransactionManager();     }  ```  Here is the first test, testA();  ```java     @Test     public void testA() throws InterruptedException {             // We create the first transaction             TransactionStatus statusOne = requireTransaction();                  // Create person one             Person pOne = new Person();             pOne.name = ""PersonOne"";             session().persist(pOne);                  // ---> 111) NOTE! We do not commit! Intentionally!                  // We requireTransaction again. We should be getting the same transaction status.                  TransactionStatus statusTwo = requireTransaction();             if ( !statusTwo.isNewTransaction() ) {                     System.out.println(""isNewTransaction: false! As expected! Meaning we are getting the original transaction status!"");             }                       // Create person two             Person pTwo = new Person();             pTwo.name = ""PersonTwo"";             session().persist(pTwo);                  // We will now be committing statusTwo which should actually be the first one, statusOne,             // since we are using propagation required and the previous transaction was never committed             // or rolledback or completed in any other fashion!                  getTransactionManager().commit(statusTwo);                  // !!!!!!! However !!!!!! Nothing is actually written to the database here!                  // This must be a bug. It existed on Spring 4.0.4 and I have upgraded to 4.2.0 and still the same thing happens!                  // Lets go on to the next test. testB() below.                  // If we now, at 111) instead do, let me repeat the entire logic:     }  ```  Here is the second test, testA();  ```java @Test     public void testB() throws InterruptedException {             // We create the first transaction             TransactionStatus statusOne = requireTransaction();                  Person pOne = new Person();             pOne.name = ""PersonOne"";             session().persist(pOne);                  // -----> 111) NOW WE ARE COMMITTING INSTEAD, SINCE WE ARE ALMOST FORCED TO BUT DO NOT WANT TO             getTransactionManager().commit(statusOne);                  // ----> 222) HOWEVER, NOW WE WILL NOT BE ABLE TO ROLLBACK THIS AT A LATER POINT                  // We requireTransaction again. We should be getting A NEW transaction status.                  TransactionStatus statusTwo = requireTransaction();             if ( statusTwo.isNewTransaction() ) {                     System.out.println(""isNewTransaction: true! As expected! Meaning we are getting a new transaction status!"");             }                  Person pTwo = new Person();             pTwo.name = ""PersonTwo"";             session().persist(pTwo);                  getTransactionManager().commit(statusTwo);                  // Now we will have two instances in the database, as expected.                  // If we instead of committing statusTwo would have done:             // getTransactionManager().rollback(statusTwo)             // then only the last one will be rolledback which is not desired!                  // Why are we forced to commit the first one to have any effect on future transactions!             // Delegation will not work like this!     } ```  Was that clear?  This is obviously a bug, is it not?  Why purpose would requireTransaction with PROPAGATION_REQUIRED have other than destroy future commits by the same thread?  Why is the commit on **statusTwo** in **testA()** not sufficient to commit the work on the first one as well?  Should this be done some other way? I think not, right? Bug!   ---  **Affects:** 4.2 GA  **Reference URL:** http://stackoverflow.com/questions/31817664/spring-hibernate-manually-creating-transactions-propagation-required-fails-b","closed","status: duplicate,","spring-projects-issues","2015-08-04T12:37:33Z","2019-01-12T16:46:04Z"
"","17287","Jade to HTML ResourceTransformers not provided out-of-box [SPR-12689]","**[Mithun Gooty](https://jira.spring.io/secure/ViewProfile.jspa?name=mgooty)** opened **[SPR-12689](https://jira.spring.io/browse/SPR-12689?redirect=false)** and commented  Spring is integrated with ""jade4j"" to facilitate Jade to HTML transformation. It is possible to use spring-jade integration for Server side rendering. But, for client side rendering we need to write custom transformers. As more and more applications are starting to adopt Jade as templating engine, it would be great if a default ""Jade to HTML"" transformer is part of the Spring framework.   --- No further details from [SPR-12689](https://jira.spring.io/browse/SPR-12689?redirect=false)","closed","type: enhancement,","spring-projects-issues","2015-02-05T00:55:26Z","2015-02-06T05:23:25Z"
"","17240","Documentation error in ""SimpleJdbcInsert"" section [SPR-12639]","**[Mithun Gooty](https://jira.spring.io/secure/ViewProfile.jspa?name=mgooty)** opened **[SPR-12639](https://jira.spring.io/browse/SPR-12639?redirect=false)** and commented  Section where the issue is identified: 14.5.2 Retrieving auto-generated keys using SimpleJdbcInsert  There is an explanation about the sample code to demonstrate SimpleJdbcInsert. In this section, the method name is wrongly documented. It should be changed from ""executeReturningKey"" to ""executeAndReturnKey"".   ---  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/jdbc.html#jdbc-simple-jdbc-insert-2  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","type: documentation,","spring-projects-issues","2015-01-18T04:09:39Z","2015-02-20T04:13:11Z"
"","17841","Feature to support reloadable properties placeholder [SPR-13250]","**[Misagh Moayyed](https://jira.spring.io/secure/ViewProfile.jspa?name=mmoayyed)** opened **[SPR-13250](https://jira.spring.io/browse/SPR-13250?redirect=false)** and commented  I would like to request the feature of allowing the context to refresh based on properties that may dynamically change.  ```xml   ```  ...where upon changes to cas.properties, I'd like the context to recognize those and re-adjust accordingly. Otherwise, I may need to restart the application container which is not a practical solution.   ---  1 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-07-19T14:17:45Z","2019-01-12T02:26:48Z"
"","17408","Make @ResponseBody method return type available to message converters [SPR-12811]","**[Miroslav Senaj](https://jira.spring.io/secure/ViewProfile.jspa?name=mior)** opened **[SPR-12811](https://jira.spring.io/browse/SPR-12811?redirect=false)** and commented  In Spring MVC I have following object hierarchy.  ``` @JsonTypeInfo( use = JsonTypeInfo.Id.NAME,       include = JsonTypeInfo.As.PROPERTY,       property = ""type"")  public abstract class ParentClass { } ```  ``` @JsonTypeName(""foo"")  public class Foo extends ParentClass {     private String person; } ```  ``` @JsonTypeName(""bar"")  public class Bar extends ParentClass {     private String item; } ```  **ACTUAL:** When I generate response from method as List\ it generates JSON without ""type"" : ""foo"" or ""type"" : ""bar"".  ``` @ResponseBody public List method() {     List result =  // generate classes foo and bar     return result; } ```  ``` [{ ""person"" : ""John Doe"" }, { ""item"" : ""rifle"" }] ```  **EXPECTED:** In List\ response type it should generate ""type"" as well.  ``` @ResponseBody public List method() {     List result =  // generate classes foo and bar     return result; } ```  ``` [{ ""type"" : ""foo"", ""person"" : ""John Doe"" }, { ""type"" : ""bar"", ""item"" : ""rifle"" }] ```  **TRIVIA:** When I return from `@Controller` in `@ResponseBody` object which contains List\ as  ``` public class AnotherClass {      public List values;  } ```  It generates proper response with proper ""type"" in it.  ``` @ResponseBody public AnotherClass method() {     AnotherClass result =  // generate Another class and list of foo and bar     return result; } ```  ``` { ""values"" :[      { ""type"" : ""foo"", ""person"" : ""John Doe"" },       { ""type"" : ""bar"", ""item"" : ""rifle"" } ]  } ```  See also [stackoverflow issue](http://stackoverflow.com/questions/28990813/populate-object-type-in-springmvc-using-jacksonjson)  What I found so far that in org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter:228 this.objectMapper.writerWithView(serializationView).writeValue(generator, value);  Is serializing data without its type and base on [this topic](http://www.studytrails.com/java/json/java-jackson-Serialization-list.jsp) it should have writerWithType in order to write type.  ---  **Affects:** 4.1.1  **Issue Links:** - #17752 Type aware canWrite() method should be called for GenericHttpMessageConverter - #17903 Jackson 2.6: message converter should use type only for collections - #18301 Revise AbstractJackson2HttpMessageConverter's generic type adaptation - #19776 HTTP Response should not contain both Transfer-Encoding and Content-Length headers - #21006 GSON converter only serialises fields of controller method return type, ignoring subclass fields of response object - #18423 RequestPartMethodArgumentResolver should defensively handle MethodParameter nesting level and java.util.Optional access - #17745 Better parameterized type serialization for the request body in RestTemplate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/31a5434ea433bdec2283797bf9415c02bb2f41c1, https://github.com/spring-projects/spring-framework/commit/3bff7bd895e47981751c91fbd222710b96315736  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2015-03-12T08:59:20Z","2019-01-11T22:00:38Z"
"","17377","Netty4ClientHttpRequest ignores query parameters [SPR-12779]","**[Miroslav Matejovsky](https://jira.spring.io/secure/ViewProfile.jspa?name=bsmk)** opened **[SPR-12779](https://jira.spring.io/browse/SPR-12779?redirect=false)** and commented  Netty4ClientHttpRequest.createFullHttpRequest(HttpHeaders) forgets to add query params from URI  if you want to send  ``` GET www.test.io?param=some-value ```  only  ``` GET www.test.io ```  is sent   ---  **Affects:** 4.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/25f6001ad60dd658bebb24ab2d1d82585696bd53, https://github.com/spring-projects/spring-framework/commit/e799554ab8ae8cfe62d8b624a955c5cbf2164668, https://github.com/spring-projects/spring-framework/commit/caee78aee3ebbb4425c2df4c039fa62536ed4277","closed","type: bug,","spring-projects-issues","2015-03-03T06:47:19Z","2015-05-26T01:15:32Z"
"","17413","X-Forwarded-Proto with comma separated list causes incorrect scheme [SPR-12816]","**[Miranda LeBlanc](https://jira.spring.io/secure/ViewProfile.jspa?name=miralebl)** opened **[SPR-12816](https://jira.spring.io/browse/SPR-12816?redirect=false)** and commented  This issue is very similar to #17410.  In the UriComponentsBuilder, the scheme is set using the following X-Forwarded-Proto which can be a comma separated list as well.  For example, I am seeing ""http,http"" as the value of my X-Forwarded-Proto header. ```java String protocolHeader = request.getHeaders().getFirst(""X-Forwarded-Proto""); if (StringUtils.hasText(protocolHeader)) { scheme = protocolHeader; } ``` This causes issues later on when the URIs are built due to the invalid characters within the scheme.  ---  **Affects:** 4.1.5  **Issue Links:** - #17410 X-Forwarded-Port with Comma Separated List Not Able to be Parsed in Spring 4.1.x","closed","type: bug,","spring-projects-issues","2015-03-13T09:11:51Z","2020-01-31T13:54:53Z"
"","18000","ConcurrentModificationException in SingleConnectionFactory$AggregatedExceptionListener [SPR-13421]","**[Mike Noordermeer](https://jira.spring.io/secure/ViewProfile.jspa?name=miken)** opened **[SPR-13421](https://jira.spring.io/browse/SPR-13421?redirect=false)** and commented  The `SingleConnectionFactory$AggregatedExceptionListener` objects contains a list of delegates in a `LinkedHashSet`, protected by the `SingleConnectionFactory.connectionMonitor` lock object.  If you configure a `SingleConnectionFactory` with `reconnectOnException = true`, and use it in a `SimpleMessageListenerContainer`, the following will happen on a `JMSException`:  1. `SingleConnectionFactory$AggregatedExceptionListener.onException()` is called, and starts looping over the `delegates Set` 2. At a certain point in time, it will call `SimpleMessageListenerContainer.onException()`, which calls `refreshSharedConnection()`, `createSharedConnection()`, `prepareSharedConnection()`, `connection.setExceptionListener()` 3. This modifies the `delegates` list (from the same thread, so the locking does not help) 4. A `ConcurrentModificationException` will be thrown in `SingleConnectionFactory$AggregatedExceptionListener.onException()`  Full exception message:  ``` Exception in thread ""ActiveMQ Connection Executor: tcp://localhost/127.0.0.1:61616@52892"" java.util.ConcurrentModificationException 	at java.util.LinkedHashMap$LinkedHashIterator.nextNode(LinkedHashMap.java:711) 	at java.util.LinkedHashMap$LinkedKeyIterator.next(LinkedHashMap.java:734) 	at org.springframework.jms.connection.SingleConnectionFactory$AggregatedExceptionListener.onException(SingleConnectionFactory.java:670) 	at org.apache.activemq.ActiveMQConnection$5.run(ActiveMQConnection.java:2004) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:745) ```  The list of delegates should probably be copied before iteration, or the `SimpleMessageListenerContainer` should not re-add itself as listener.  ---  **Affects:** 4.1.7, 4.2.1  **Issue Links:** - #15030 Memory leak with SimpleMessageListenerContainer and ChainedExceptionListener on Single/CachingConnectionFactory - #20294 JMS Integration with Tibco causes deadlock while using DefaultMessageListenerContainer  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f562eb5ff6e4b0d7408b23977104238d8970da20, https://github.com/spring-projects/spring-framework/commit/1ed1167153fe3717e72e3a064bcde934304416fe  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","type: bug,","spring-projects-issues","2015-09-02T13:52:19Z","2019-01-11T17:11:44Z"
"","17865","BCP 47 compatible Locale support [SPR-13274]","**[Mike Noordermeer](https://jira.spring.io/secure/ViewProfile.jspa?name=miken)** opened **[SPR-13274](https://jira.spring.io/browse/SPR-13274?redirect=false)** and commented  Currently, the Spring localehandling (i.e., `LocaleChangeInterceptor` and `LocaleResolver`) only support language tags in the legacy pre-Java 7 format (e.g., `nl_NL`). Nowadays BCP 47 language tags [1] are the recommended approach [2], but none of the Spring supplied classes accept the new format.  I think it should be fairly easy to support both formats (simply replacing some underscores with dashes should bring you a long way), and am willing to provide a PR once we agree on which classes should be changed and whether BCP 47 should be opt-in or not. What are your thoughts on this?  [1]: https://tools.ietf.org/html/bcp47 [2]: http://docs.oracle.com/javase/7/docs/api/java/util/Locale.html  ---  **Affects:** 4.2 RC3  **Issue Links:** - #14091 Better handling of illegal locale values in LocaleChangeInterceptor - #20736 StringToLocaleConverter should allow BCP 47 values  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4668aa775d274550826651504322c4a88f05ebb8","closed","type: enhancement,","spring-projects-issues","2015-07-24T05:53:26Z","2019-01-11T18:02:29Z"
"","17799","WebContentGenerator not backwards compatible [SPR-13207]","**[Mike Noordermeer](https://jira.spring.io/secure/ViewProfile.jspa?name=miken)** opened **[SPR-13207](https://jira.spring.io/browse/SPR-13207?redirect=false)** and commented  After the rework of the caching in `WebContentGenerator` (see #16413), it is no longer backwards compatible with some older configurations. In our case, we have the following XML config:  ```xml                                                                                                                                      31536000                                         ```  This causes all resources to have 'no-cache' headers applied. Reason for this is that the (deprecated) `alwaysMustRevalidate` triggers the variable `usePreviousHttpCachingBehavior`. This causes `checkAndPrepare(HttpServletRequest, HttpServletResponse, CacheControl)` to completely ignore the `CacheControl` setting specific to the request.  Workaround is to make sure you do not combine any of the deprecated methods with custom `cacheMappings`, but it is probably better to get this fixed to prevent surprises on upgrades.  ---  **Affects:** 4.2 RC2  **Issue Links:** - #16413 Server-side HTTP caching improvements  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ef0eb01f93d6c485cf37692fd193833a6821272a  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2015-07-07T06:08:22Z","2019-01-11T18:08:09Z"
"","17336","Deadlock publishing event while creating listener bean [SPR-12739]","**[Mike Heath](https://jira.spring.io/secure/ViewProfile.jspa?name=heathma)** opened **[SPR-12739](https://jira.spring.io/browse/SPR-12739?redirect=false)** and commented  Publishing an application event in a second thread while creating an application event listener bean causes a deadlock.  The Reference URL points to a Github gist of a simple Spring Boot app that duplicates the deadlock.  Dump of the deadlocked threads:  ""main@1"" prio=5 tid=0x1 nid=NA waiting for monitor entry java.lang.Thread.State: BLOCKED blocks executor-1@2266 waiting for executor-1@2266 to release lock on <0x919> (a org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerRetriever) at org.springframework.context.event.AbstractApplicationEventMulticaster.addApplicationListener(AbstractApplicationEventMulticaster.java:72) at org.springframework.context.support.AbstractApplicationContext.addApplicationListener(AbstractApplicationContext.java:422) at org.springframework.context.support.PostProcessorRegistrationDelegate$ApplicationListenerDetector.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:354) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:422) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1571) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) - locked <0x8ee> (a java.util.concurrent.ConcurrentHashMap)   at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)   at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:762)   at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)   at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480) - locked <0x91f> (a java.lang.Object)   at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)   at org.springframework.boot.SpringApplication.run(SpringApplication.java:321)   at cloudfoundry.norouter.test.DeadlockTest.main(DeadlockTest.java:61)  ""executor-1@2266"" prio=5 tid=0xf nid=NA waiting for monitor entry java.lang.Thread.State: BLOCKED blocks main@1 waiting for main@1 to release lock on <0x8ee> (a java.util.concurrent.ConcurrentHashMap) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:187) at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:567) at org.springframework.context.event.AbstractApplicationEventMulticaster.retrieveApplicationListeners(AbstractApplicationEventMulticaster.java:212) at org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(AbstractApplicationEventMulticaster.java:172) - locked <0x919> (a org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerRetriever)   at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:117)   at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)   at cloudfoundry.norouter.test.DeadlockTest.lambda$publisherBean$0(DeadlockTest.java:45)   at cloudfoundry.norouter.test.DeadlockTest$$Lambda$1.1037475674.run(Unknown Source:-1)   at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)   at java.util.concurrent.FutureTask.run(FutureTask.java:266)   at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)   at java.lang.Thread.run(Thread.java:744)  ---  **Affects:** 3.2.13, 4.1.4  **Reference URL:** https://gist.github.com/mheath/547ce1044c282acd88e6  **Issue Links:** - #17148 AbstractApplicationEventMulticaster ""lost"" application listener - #18814 Deadlock possible with AspectJ aspects and multi-threading  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","in: core,","spring-projects-issues","2015-02-20T11:59:26Z","2019-01-11T21:27:59Z"
"","17991","DeferredResult broken when running Wildfly 8.2 [SPR-13412]","**[Mikael Norrman](https://jira.spring.io/secure/ViewProfile.jspa?name=mick0n)** opened **[SPR-13412](https://jira.spring.io/browse/SPR-13412?redirect=false)** and commented  When running my Spring MVC application on Wildfly 8.2 application server and using DeferredResult I get an exception from the application server, caught by Spring, that no servlet context is found.  I tried using the simplest possible form of DeferredResult to get this error and it fails every time.  (I erased company-specific class from the following stacktrace)  ``` Exception in thread ""Thread-118"" java.lang.IllegalArgumentException: UT010046: No servlet context at  to dispatch to         at io.undertow.servlet.spec.AsyncContextImpl.dispatch(AsyncContextImpl.java:158)         at org.springframework.security.web.servletapi.HttpServlet3RequestFactory$SecurityContextAsyncContext.dispatch(HttpServlet3RequestFactory.java:251)         at org.springframework.web.context.request.async.StandardServletAsyncWebRequest.dispatch(StandardServletAsyncWebRequest.java:123)         at org.springframework.web.context.request.async.WebAsyncManager.setConcurrentResultAndDispatch(WebAsyncManager.java:351)         at org.springframework.web.context.request.async.WebAsyncManager.access$200(WebAsyncManager.java:57)         at org.springframework.web.context.request.async.WebAsyncManager$7.handleResult(WebAsyncManager.java:417)         at org.springframework.web.context.request.async.DeferredResult.setResultInternal(DeferredResult.java:194)         at org.springframework.web.context.request.async.DeferredResult.setResult(DeferredResult.java:183)         at com.*******.Controller$1.run(********Controller.java:444)         at java.lang.Thread.run(Thread.java:745) ```    ---  **Affects:** 4.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/3affcf791eec7f8cce9f22d6d09b35ff7c810820","closed","in: web,","spring-projects-issues","2015-08-31T11:53:58Z","2019-01-11T17:12:27Z"
"","17897","Deprecate JdkVersion (for optimistic compatibility with newer JDK generations) [SPR-13312]","**[Michał Sobkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=perceptron8)** opened **[SPR-13312](https://jira.spring.io/browse/SPR-13312?redirect=false)** and commented  After hitting something similar to #16518 (with legacy code using Spring 2.5), I'd like to suggest some refactoring. There **will be** similar bugs in the future because of how org.springframework.core.JdkVersion is designed. It breaks when you use JVM which was not included in constants.  If full version information is needed at runtime (which I doubt), see org.apache.maven.artifact.versioning.ComparableVersion as an example of how to handle versioning properly. However, if checking runtime compatibility is the only thing needed (which is the case, I think), it can be done in a much simpler way.  I attached my own helper, JvmVersion. It provides everything that is necessary ""to allow for automatically adapting to the present platform's capabilities"". I know that there were no enums before Java 5, but, well, Java 5 is over 10 years old, Spring 4 requires Java 6. As you can see, JvmVersion delegates to Package#isCompatibleWith(String) - so you don't have to handle system properties or dot notation manually - it just works. You could refactor existing code and deprecate JdkVersion to avoid new bugs. It would make me very proud of myself ;-)  Sorry for not creating pull request - it's just one file... Hope you will find it useful anyway.  PS. See standardReflectionAvailable property in org.springframework.core.DefaultParameterNameDiscoverer (Spring 4.2) as an example of what can go wrong.  ---  **Affects:** 4.2 GA  **Attachments:** - [JvmVersion.java](https://jira.spring.io/secure/attachment/22966/JvmVersion.java) (_406 bytes_)  **Issue Links:** - #18412 Upgrade to AspectJ 1.9 beta 3 (for build compatibility with JDK 9 build 95+)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/acb44f9d46fa80bfc69c69f107780f900c31a606, https://github.com/spring-projects/spring-framework/commit/e0f012f32d923b2e2c858c92075bf10d208ef89a, https://github.com/spring-projects/spring-framework/commit/27e9db8c8c30a941bbbc4ceae6a18bd2124ea527, https://github.com/spring-projects/spring-framework/commit/5e9a96817bf6f55f982746774c4c76671785f5cd, https://github.com/spring-projects/spring-framework/commit/bec3b0fa1a69e251340b9abe0a34ef3fafb67335","closed","type: enhancement,","spring-projects-issues","2015-08-04T03:53:25Z","2019-01-11T18:08:45Z"
"","17634","DataBinder should use ConversionService if PropertyEditor cannot produce required type [SPR-13042]","**[Michał Sobkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=perceptron8)** opened **[SPR-13042](https://jira.spring.io/browse/SPR-13042?redirect=false)** and commented  When there is PropertyEditor registered for String, TypeConverterDelegate uses it to convert from every possible class... to String: https://github.com/spring-projects/spring-framework/blob/v4.1.6.RELEASE/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java#L164  Thus, it doesn't even try to use custom ConversionService: https://github.com/spring-projects/spring-framework/blob/v4.1.6.RELEASE/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java#L170  It makes no sense. IMHO, TypeConverterDelegate should use editors registered for types other than String (for instance, where there is PropertyEditor registered for Integer, it is ok to use it for String -> Integer and Integer -> String; however it is not ok to use it to convert MyEntity -> String).  Attached test is based on: https://github.com/spring-projects/spring-framework/blob/v4.1.6.RELEASE/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/support/RedirectAttributesModelMapTests.java  If you want to show my use case, just let me know.   ---  **Affects:** 4.1.6  **Attachments:** - [MoreDataBinderTests.java](https://jira.spring.io/secure/attachment/22800/MoreDataBinderTests.java) (_1.62 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6418b54f81a9e56242fb78fda4bf95e7b3d4c572","closed","type: enhancement,","spring-projects-issues","2015-05-18T06:42:49Z","2015-05-26T01:14:37Z"
"","17830","Regression: AnnotationScopeMetadataResolver fails to resolve VaadinView [SPR-13239]","**[Michal Kytýr](https://jira.spring.io/secure/ViewProfile.jspa?name=mikro)** opened **[SPR-13239](https://jira.spring.io/browse/SPR-13239?redirect=false)** and commented  We are using the `spring-vaadin` library in our project, which has its own annotation `@VaadinView`:  ```java @Target({java.lang.annotation.ElementType.TYPE}) @Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @Documented @VaadinComponent @VaadinViewScope public @interface VaadinView {      /**      * The name of the view. This is the name that is to be passed to the      * {@link com.vaadin.navigator.Navigator} when navigating to the view. There can be multiple views      * with the same name as long as they belong to separate UI subclasses.      *      * @see #ui()      */     String name();      /**      * By default, the view will be available for all UI subclasses in the application. This attribute can be used      * to explicitly specify which subclass (or subclasses) that the view belongs to.      */     Class[] ui() default {}; } ```  Library also defines its own scope ""vaadin-view"", which has a ""shortcut"" annotation `@VaadinViewScope` defined like:  ```java @Scope(""vaadin-view"") @Target({ElementType.TYPE, ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface VaadinViewScope { } ```  I tried our project with 4.2.0.RC2 (RC1 worked fine) and suddenly there is an exception when scanning scope of classes with `@VaadinView` annotation:  ``` Caused by: org.springframework.core.annotation.AnnotationConfigurationException: In annotation [org.springframework.context.annotation.Scope] declared on [file [D:\...\AdminViewImpl.class]], attribute [value] and its alias [name] are present with values of [vaadin-view] and [admin], but only one is permitted. 	at org.springframework.core.annotation.AnnotationAttributes.getRequiredAttributeWithAlias(AnnotationAttributes.java:434) 	at org.springframework.core.annotation.AnnotationAttributes.getAliasedString(AnnotationAttributes.java:149) 	at org.springframework.context.annotation.AnnotationScopeMetadataResolver.resolveScopeMetadata(AnnotationScopeMetadataResolver.java:82) 	at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:250) 	at org.springframework.context.annotation.ComponentScanAnnotationParser.parse(ComponentScanAnnotationParser.java:137) 	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:267) 	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:231) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:198) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:167) 	... 18 more ```  I think it has something to do with #16020, parameters ""name"" and ""value"" of different annotations are mixed together.  ---  **Affects:** 4.2 RC2  **Issue Links:** - #16020 Introduce aliases for 'value' annotation attributes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9f15f347bf11baa2d00543ddcde3e2de692ae6cb","closed","in: core,","spring-projects-issues","2015-07-16T02:59:38Z","2019-01-11T18:05:23Z"
"","17721","Spring should have default support for OPTIONS, HEAD and Allow [SPR-13130]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-13130](https://jira.spring.io/browse/SPR-13130?redirect=false)** and commented  Consider this simple REST controller:  ```java @RestController @RequestMapping(""/rest/projects"") public class ProjectsController {    @RequestMapping(value = ""/{project}"",       method = { RequestMethod.GET },       produces = { MediaType.APPLICATION_XML_VALUE, ""application/json;charset=UTF-8"" })   public ResponseEntity lookupProject(       @PathVariable(""project"") String project,       @RequestParam(value = ""attributes"", required = false) String[] attributes,       @RequestParam(value = ""outputType"", defaultValue = ""hash"") OutputType outputType,       @RequestParam(value = ""omitEmptyResponse"", defaultValue = ""true"") boolean omitEmptyResponse)       throws MissingServletRequestParameterException {     ...   }  } ```  In my `web.xml` I have set `dispatchOptionsRequest` to `true`.  `HEAD` requests are not automatically served by the framework:  ``` $ curl --verbose -I http://localhost:8081/app/rest/projects/123 -H ""Accept: application/json"" *   Trying 147.54.67.187... * Connected to localhost (...) port 8081 (#0) > HEAD /app/rest/projects/123 HTTP/1.1 > Host: localhost:8081 > User-Agent: curl/7.42.1 > Accept: application/json > < HTTP/1.1 405 Method Not Allowed HTTP/1.1 405 Method Not Allowed < Server: Apache-Coyote/1.1 Server: Apache-Coyote/1.1 < Allow: GET Allow: GET < Content-Type: text/html;charset=utf-8 Content-Type: text/html;charset=utf-8 < Content-Length: 1105 Content-Length: 1105 < Date: Mon, 15 Jun 2015 13:59:16 GMT Date: Mon, 15 Jun 2015 13:59:16 GMT  < * Connection #0 to host localhost left intact ```  This means that all `GET` methods need to have `RequestMethod.HEAD`. The behavior of the framework violates the HTTP RFCs, as far as I can see.  `OPTIONS` request responds with 405 where I would expect a 200 OK.  ``` $ curl --verbose -X OPTIONS http://localhost:8081/app/rest/projects/123 -H ""Accept: application/json"" *   Trying 147.54.67.187... * Connected to localhost () port 8081 (#0) > OPTIONS /app/rest/projects/123 HTTP/1.1 > Host: localhost:8081 > User-Agent: curl/7.42.1 > Accept: application/json > < HTTP/1.1 405 Method Not Allowed < Server: Apache-Coyote/1.1 < Allow: GET < Content-Type: text/html;charset=utf-8 < Content-Length: 1108 < Date: Mon, 15 Jun 2015 14:01:57 GMT < * Connection #0 to host localhost left intact ```  One has to implement `OPTIONS` for every single request mapping. Very annoying. Moreover, the `Allow` header does neither include `HEAD` nor `OPTIONS`.  Not implemented methods respond with an incorrect `Allow` header:  ``` i$ curl --verbose -X TRACE http://localhost:8081/app/rest/projects/123 -H ""Accept: application/json"" *   Trying 147.54.67.187... * Connected to localhost () port 8081 (#0) > TRACE /app/rest/projects/123 HTTP/1.1 > Host: localhost:8081 > User-Agent: curl/7.42.1 > Accept: application/json > < HTTP/1.1 405 Method Not Allowed < Server: Apache-Coyote/1.1 < Allow: POST, GET, DELETE, OPTIONS, PUT, HEAD < Content-Length: 0 < Date: Mon, 15 Jun 2015 14:04:24 GMT < * Connection #0 to host localhost left intact ```  ---  **Affects:** 4.1.6  **Issue Links:** - #18753 Regression: Handler method detection reporting ambiguous methods for explicit HEAD mapping - #18642 Support for HTTP Vary configuration (e.g. in reaction to locale-based rendering) - #18436 Support for conditional PUT in Web MVC (using If-Unmodified-Since header) - #18516 Mis-typed URL should give 404 not 405 - #21056 HTTP OPTIONS response for `@RequestMapping` should contain OPTIONS consistently  1 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2015-06-15T07:06:22Z","2019-01-13T05:40:31Z"
"","17591","does not handles directories well [SPR-12999]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-12999](https://jira.spring.io/browse/SPR-12999?redirect=false)** and commented  Say I have this mapping:  ```  ```  Request `docs/` or any other subdirectory ends up in a HTTP 500:  ``` 19:27:23.669 [http-8081-2] DEBUG o.s.web.servlet.DispatcherServlet - Could not complete request java.io.FileNotFoundException: class path resource [docs/rest] cannot be opened because it does not exist 	at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:172) ~[spring-core-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.writeContent(ResourceHttpRequestHandler.java:407) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:241) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:51) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) [servlet-api.jar:na] 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:723) [servlet-api.jar:na] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) [catalina.jar:6.0.41] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.41] 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) [catalina.jar:6.0.41] 	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:191) [catalina.jar:6.0.41] 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java) [catalina.jar:6.0.41] 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:470) [catalina.jar:6.0.41] 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) [catalina.jar:6.0.41] 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103) [catalina.jar:6.0.41] 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) [catalina.jar:6.0.41] 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) [catalina.jar:6.0.41] 	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:861) [tomcat-coyote.jar:6.0.41] 	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:606) [tomcat-coyote.jar:6.0.41] 	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489) [tomcat-coyote.jar:6.0.41] 	at java.lang.Thread.run(Thread.java:745) [na:1.7.0_67] ```  I would rather expect here 200 or better yet 204. The directory does exist but WebMVC does not know how to handle. I have debugged the implementation and `Resource` is retrieved but `getInputStream` fails. Moreover, content length is 0.  I don't expect an extensive handling like in Apache`s `mod_dir` but at least not a 500.  Meanwhile, I have applied this workaround:  ```   	 		mod_dir fake         ^/docs(/rest)?$         %{context-path}/docs$1/                    mod_dir fake         ^/docs(.+)/$         /docs$1/index.html        ```    ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9e8e7aa6b9bebd47344abfc024325d7d1dd44c7e, https://github.com/spring-projects/spring-framework/commit/c99cc53da16b2d75eb25a2166cfee7db77060215, https://github.com/spring-projects/spring-framework/commit/4d5fca596dfe193556ad7148d16aae718805a84d","closed","type: enhancement,","spring-projects-issues","2015-05-08T10:32:06Z","2015-05-26T01:15:22Z"
"","17995","StompDecoder fails for partial headers containing escape sequence [SPR-13416]","**[Michael Kötter](https://jira.spring.io/secure/ViewProfile.jspa?name=mkoetter)** opened **[SPR-13416](https://jira.spring.io/browse/SPR-13416?redirect=false)** and commented  We encountered frequent disconnects in our STOMP-Websocket application and traced the issue to the following exceptions occuring in StompDecoder:  ``` org.springframework.messaging.simp.stomp.StompConversionException: Illegal escape sequence at index 2: ID\ .. org.springframework.messaging.simp.stomp.StompConversionException: Illegal escape sequence at index 41: ID\cf9677c70d5f4-59973-1440685240095-7\c1\ ```  StompDecoder seems to decode the message in chunks, which is fine as long as the chunk doesn't end right after the start of an escape sequence in the header (as is the case with the above exceptions).  This is related to #17025, which doesn't really fix the root cause - the message header is not necessarily invalid because it ends with ""\"", it's just incomplete, and the next chunk would probably contain the remaining bits.  Attached is a patch with proposed fix (only parses headers after an EOL was encountered) and test case to reproduce the issue.  ---  **Affects:** 4.1.7, 4.2 GA  **Attachments:** - [issue.patch](https://jira.spring.io/secure/attachment/23094/issue.patch) (_3.82 kB_)  **Issue Links:** - #17025 StompDecoder StringIndexOutOfBoundsException with Apache ActiveMQ - #17702 Stomp version 1.1 and 1.2 allows headers with empty values  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4428c347a5b5645ee47afa246958ad7afb2d31a6, https://github.com/spring-projects/spring-framework/commit/daa49c9bcde1c5c8d83e60f3765bec84fbc70fc1  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","type: bug,","spring-projects-issues","2015-09-01T15:04:59Z","2019-01-11T17:12:47Z"
"","17718","REST/Spring MVC: conflict between @ModelAttribute and @RequestBody [SPR-13127]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-13127](https://jira.spring.io/browse/SPR-13127?redirect=false)** and commented  Hi, when working with JSPs, I can easily create a `@ModelAttribute` annotated method as follows:  ```java @ModelAttribute    public DiningForm addToModel(@PathVariable String number) {       return new DiningForm(rewardNetwork.find(number));    }     @RequestMapping(method=RequestMethod.PUT)    public String update(DiningForm df, BindingResult result) {         …    }  @RequestMapping(method=RequestMethod.POST)    public String create(DiningForm df, BindingResult result) {         …    } ```  In the above example, the 'addToModel' method is called before each call to 'update' and 'create'.  Using AngularJS and REST services, I have tried to do something similar but have not found a ""clean"" way to do it.  The only way I have found is to merge the 2 objects manually (as below).  ```java @RequestMapping(value = ""/owner/{ownerId}"", method = RequestMethod.PUT)     public Owner updateOwner(@ModelAttribute Owner ownerModel, @RequestBody Owner ownerRequest) {     	ownerModel.setFirstName(ownerRequest.getFirstName());     	ownerModel.setLastName(ownerRequest.getLastName());     	ownerModel.setCity(ownerRequest.getCity());     	ownerModel.setAddress(ownerRequest.getAddress());     	ownerModel.setTelephone(ownerRequest.getTelephone());         this.clinicService.saveOwner(ownerModel);         return ownerModel;     } ```  I wish I could do something like this instead:  ```java @RequestMapping(value = ""/owner/{ownerId}"", method = RequestMethod.PUT)     public Owner updateOwner(@ModelAttribute @RequestBody Owner owner) {         this.clinicService.saveOwner(owner);         return owner;     } ```  Currently, in the above code sample, the `@RequestBody` annotation is not taken into account.  Cheers, Michael.    ---  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-06-15T06:06:06Z","2019-01-12T02:27:32Z"
"","17316","View.RESPONSE_STATUS_ATTRIBUTE not consistently used by RedirectView [SPR-12719]","**[Michael Gissing](https://jira.spring.io/secure/ViewProfile.jspa?name=m.gissing@nc)** opened **[SPR-12719](https://jira.spring.io/browse/SPR-12719?redirect=false)** and commented  When using a String based controller and doing a redirect there is no way to set the HTTP status code.  The RedirectView gets constructed with `http10Compatible = true`. The method `getHttp11StatusCode()` doesn't get called and in the other branch in `RedirectView.sendRedirect()` there is no `request.getAttribute(View.RESPONSE_STATUS_ATTRIBUTE)`.   ---  **Affects:** 3.2.13, 4.1.4","closed","type: enhancement,","spring-projects-issues","2015-02-16T00:19:25Z","2015-03-26T02:11:34Z"
"","17491","CachingResourceResolver + GzipResourceResolver caches different results depending on what is requested first [SPR-12892]","**[Michael de Hoog](https://jira.spring.io/secure/ViewProfile.jspa?name=mdehoog)** opened **[SPR-12892](https://jira.spring.io/browse/SPR-12892?redirect=false)** and commented  I've configured a resource handler as below:  ``` @Override public void addResourceHandlers(ResourceHandlerRegistry registry) {      GzipResourceResolver gzipResolver = new GzipResourceResolver();      registry.addResourceHandler(""/assets/**"")                .addResourceLocations(""classpath:public/assets/"")                .setCachePeriod(0)                .resourceChain(true)                .addResolver(gzipResolver); } ```  When requesting a resource from the server using curl, adding the ""Accept-Encoding: gzip"" header (using curl's --compressed flag), the GzipResourceResolver finds a .gz resource and returns it:  ``` curl --compressed -v http://localhost:8080/assets/client.js ```  If I then request the same resource without the ""Accept-Encoding: gzip"" header, the gzipped version is still returned, as it is cached by the CachingResourceResolver:  ``` curl -v http://localhost:8080/assets/client.js ```  If I restart the server and first call curl without the ""Accept-Encoding: gzip"" header, the non gzipped version is returned.  Then requesting the resource with the header still returns the non gzipped version.  To summarise, the server returns different results for the same request, depending on the request headers in the first request for the resource. This is because the CachingResourceResolver caches the resource only using the requestPath as the key, ignoring request headers.  Is this expected behaviour?   ---  **Affects:** 4.1.6","closed","type: bug,","spring-projects-issues","2015-04-06T23:49:04Z","2015-05-26T01:14:49Z"
"","17956","ResourceUrlProvider should only consider paths and not request parameters [SPR-13374]","**[Michael Cramer](https://jira.spring.io/secure/ViewProfile.jspa?name=bigmichi1)** opened **[SPR-13374](https://jira.spring.io/browse/SPR-13374?redirect=false)** and commented  we use spring-webmvc with thymeleaf 2.1.4 and got a problem when we use this tag  ```html Login ```  the error message that appears is the following  ``` java.lang.StringIndexOutOfBoundsException: String index out of range: -1 	at java.lang.String.substring(String.java:1967) ~[na:1.8.0_60] 	at org.springframework.web.servlet.resource.ResourceUrlProvider.getForLookupPath(ResourceUrlProvider.java:215) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter$ResourceUrlEncodingResponseWrapper.encodeURL(ResourceUrlEncodingFilter.java:78) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.thymeleaf.standard.expression.LinkExpression.executeLink(LinkExpression.java:378) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:77) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:103) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:133) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:120) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.standard.processor.attr.AbstractStandardSingleAttributeModifierAttrProcessor.getTargetAttributeValue(AbstractStandardSingleAttributeModifierAttrProcessor.java:67) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.spring4.processor.attr.SpringHrefAttrProcessor.getTargetAttributeValue(SpringHrefAttrProcessor.java:68) ~[thymeleaf-spring4-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.processor.attr.AbstractSingleAttributeModifierAttrProcessor.getModifiedAttributeValues(AbstractSingleAttributeModifierAttrProcessor.java:59) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.processor.attr.AbstractAttributeModifierAttrProcessor.processAttribute(AbstractAttributeModifierAttrProcessor.java:62) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.processor.attr.AbstractAttrProcessor.doProcess(AbstractAttrProcessor.java:87) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.processor.AbstractProcessor.process(AbstractProcessor.java:212) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.applyNextProcessor(Node.java:1017) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.processNode(Node.java:972) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.processNode(Node.java:990) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.processNode(Node.java:990) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.processNode(Node.java:990) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.processNode(Node.java:990) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.processNode(Node.java:990) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.processNode(Node.java:990) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.processNode(Node.java:990) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.processNode(Node.java:990) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.processNode(Node.java:990) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.processNode(Node.java:990) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.processNode(Node.java:990) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Node.processNode(Node.java:990) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.dom.Document.process(Document.java:93) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1155) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011) ~[thymeleaf-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335) ~[thymeleaf-spring4-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190) ~[thymeleaf-spring4-2.1.4.RELEASE.jar:2.1.4.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1244) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1027) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:971) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.0.23.jar:8.0.23] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilterInternal(ResourceUrlEncodingFilter.java:51) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:235) ~[spring-boot-actuator-1.3.0.M4.jar:1.3.0.M4] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:102) ~[spring-boot-actuator-1.3.0.M4.jar:1.3.0.M4] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:316) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:122) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:149) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:169) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:48) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:205) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:205) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:205) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:120) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:96) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:91) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:53) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:213) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:176) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:87) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:69) ~[spring-boot-actuator-1.3.0.M4.jar:1.3.0.M4] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) ~[tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) [tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142) [tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518) [tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091) [tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:668) [tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1521) [tomcat-embed-core-8.0.23.jar:8.0.23] 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1478) [tomcat-embed-core-8.0.23.jar:8.0.23] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_60] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_60] 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.0.23.jar:8.0.23] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_60] ```  we traced it down that the method String AntPathMatcher.extractPathWithinPattern(String pattern, String path) returns the wrong result when called with ""/**"" as pattern and ""/login/openid?openid_identifier=https://steamcommunity.com/openid"" as path. attached is a simple reproducer that shows the input and the output. the output is 2 chars shorter when it should be only 1 shorter. This method removes a slash from the url parameter which then results in a broken url that is then passed in the filter chain  ---  **Affects:** 4.2 GA  **Attachments:** - [Reproducer.java](https://jira.spring.io/secure/attachment/22989/Reproducer.java) (_374 bytes_)  **Issue Links:** - #18420 Regression: ResourceUrlEncodingFilter can throw StringIndexOutOfBoundsException with relative URL - #22067 ResourceUrlEncodingFilter versioning breaks when URL contains fragment  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0b9c3de320df81acd06dcfd927faadf72fb66409  0 votes, 6 watchers","closed","in: core,","spring-projects-issues","2015-08-21T02:12:50Z","2019-01-11T18:19:12Z"
"","17835","Adding ConditionalOnProperty to spring-core [SPR-13244]","**[Meang Akira Tanaka](https://jira.spring.io/secure/ViewProfile.jspa?name=mat013)** opened **[SPR-13244](https://jira.spring.io/browse/SPR-13244?redirect=false)** and commented  This issue seems to be a variant of #16372, however I have created a new feature request as the description is not exactly the same thing.  I would like to suggest that beans can be enabled based upon whether some property or a value is set or not set in the Environment of the application context.  The concrete usage which I have is somewhat related to [SWS-911](https://jira.spring.io/browse/SWS-911), where a URL connection factory has to be created based upon proxy settings in the environment, however I can think that there must be other valid usage scenarios, where beans should be registered based on some settings in the environment.  Currently the spring core already has a limit support for Conditional Bean registration, however this is based on the profile.  It has been argued in #16372 that this feature exists in Spring-boot, however it is not necessary the case that one uses spring-boot.  As an alternative to provide an implementation I would like to suggest that ConditionalOnXX are moved to Spring-core from Spring-boot.  ---  **Issue Links:** - #20614 Adopt a spring boot Condition  (_**""is duplicated by""**_) - #16372 Add `@Bean` condition based on a SpEL condition","open","type: enhancement,","spring-projects-issues","2015-07-16T15:47:47Z","2021-07-26T11:26:23Z"
"","17885","ResourceBundleMessageSource performance optimization for getStringOrNull [SPR-13295]","**[Maxim Kirilov](https://jira.spring.io/secure/ViewProfile.jspa?name=maximkir)** opened **[SPR-13295](https://jira.spring.io/browse/SPR-13295?redirect=false)** and commented  Exception creation is very expensive due to fillStackTrace method (Throwable class). See [here](http://stackoverflow.com/questions/299068/how-slow-are-java-exceptions) stackoverflow post.  The current method implementation replaces the thrown exception with null value.  ``` private String getStringOrNull(ResourceBundle bundle, String key) {      try {           return bundle.getString(key);      }      catch (MissingResourceException ex) {           // Assume key not found           // -> do NOT throw the exception to allow for checking parent message source.           return null;      } } ```  I suggest to refactor the code to:  ``` private String getStringOrNull(ResourceBundle bundle, String key) {      try {           /**            * ResourceBundle is checked for actually having the key before            * calling getString. This is because getString will throw an            * exception if the key is not found. We would like to avoid            * creating an exception because of fillStackTrace method which is            * very expensive.            */           if (bundle != null && bundle.containsKey(key)) {                return bundle.getString(key);           } else {                return null;           }      }      catch (MissingResourceException ex) {           // Assume key not found           // -> do NOT throw the exception to allow for checking parent message source.           return null;      } } ```  This will eliminate unnessary exception object creation.  ---  **Attachments:** - [Patch.patch](https://jira.spring.io/secure/attachment/22961/Patch.patch) (_1.18 kB_)  **Issue Links:** - #20782 Remove synchronization from ResourceBundleMessageSource  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2c2bed2adbff39ec2508ba89af7a017bb57d3e95","closed","type: enhancement,","spring-projects-issues","2015-07-30T04:44:04Z","2019-01-11T18:01:58Z"
"","17981","Websocket does not respect configured timeouts [SPR-13401]","**[Matthew Mah](https://jira.spring.io/secure/ViewProfile.jspa?name=mattm3a)** opened **[SPR-13401](https://jira.spring.io/browse/SPR-13401?redirect=false)** and commented  While using Tomcat in Spring Boot 1.2.5, I am unable to configure the websockets to timeout in 5 seconds. The section in the documentation ""Configuring the WebSocket Engine"" appears to be directly applicable, but I have been unable to follow the example to successfully configure timeouts in 5 seconds.  I have also tried explicitly pinging the client and setting 'server.session-timeout = 5'.  In my latest test, I can connect a websocket, and despite setting container.setMaxSessionIdleTimeout(5000); container.setAsyncSendTimeout(5000); the client can be disconnected (hardware network switch turned off) and still come back minutes later without the websocket having been closed.  I expect the websocket to have been closed after 5 seconds of inactivity.   ---  **Affects:** 4.1.7  **Reference URL:** http://stackoverflow.com/q/26193072/4107809  3 votes, 5 watchers","closed","status: invalid,","spring-projects-issues","2015-08-27T19:45:12Z","2019-01-12T05:23:52Z"
"","17818","@DateTimeFormat does not work with @PathVariable for Java 8 OffsetDateTime [SPR-13227]","**[Matt Byrne](https://jira.spring.io/secure/ViewProfile.jspa?name=mbyrne00)** opened **[SPR-13227](https://jira.spring.io/browse/SPR-13227?redirect=false)** and commented  I'm using (currently) the latest stable version of Spring Boot (1.2.5.RELEASE) which brings in Spring 4.1.7.RELEASE and `@DateTimeFormat` does not work in conjunction with `@PathVariable`. It works fine for me with `@RequestParam`, however.  I see from this article that it _should_ be possible: http://www.infoq.com/articles/spring-4-java-8.  Sample code within a Controller annotated with `@RestController` ...  ``` @RequestMapping(value = ""/at/{timePoint}"", method = RequestMethod.GET) public MyResponseBean getContentAtPointInTime(@PathVariable @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime timePoint) {     // Code goes here } ```  Result of a GET request with path ending in `/at/2015-06-08T10:36:04.542+10:00`  ``` java.lang.NoSuchMethodException: java.time.OffsetDateTime.() 	at java.lang.Class.getConstructor0(Class.java:3082) 	at java.lang.Class.getDeclaredConstructor(Class.java:2178) 	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:104) 	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.createAttribute(ModelAttributeMethodProcessor.java:137) 	at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.createAttribute(ServletModelAttributeMethodProcessor.java:80) 	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:106) 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77) 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:129) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:776) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:705) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdandle(AbstractHandlerMethodAdapter.java:85) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:295) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ```  I also tried removing `@PathVariable` to match the example in the infoq post with the same result.   ---  **Affects:** 4.1.7","closed","status: invalid,","spring-projects-issues","2015-07-13T17:57:54Z","2019-01-12T05:24:05Z"
"","17786","Wrong assertion message in ShallowEtagHeaderFilter [SPR-13194]","**[Matt Byrne](https://jira.spring.io/secure/ViewProfile.jspa?name=mbyrne00)** opened **[SPR-13194](https://jira.spring.io/browse/SPR-13194?redirect=false)** and commented  Looking at the source of https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java  The assertion error seems incorrect  ``` ContentCachingResponseWrapper responseWrapper = 				WebUtils.getNativeResponse(response, ContentCachingResponseWrapper.class); 		Assert.notNull(responseWrapper, ""ShallowEtagResponseWrapper not found""); ```  Should be ""ContentCachingResponseWrapper not found"".   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2c32873309417d5bba8f9aa376c30e7690ae2ba1, https://github.com/spring-projects/spring-framework/commit/85a80e2a946898d7258228092c8aab96b6b25f3f","closed","type: bug,","spring-projects-issues","2015-07-02T18:03:51Z","2015-07-15T09:05:11Z"
"","17348","Support @ControllerAdvice registrations in the MockMvcBuilders standalone setup [SPR-12751]","**[Matt Byrne](https://jira.spring.io/secure/ViewProfile.jspa?name=mbyrne00)** opened **[SPR-12751](https://jira.spring.io/browse/SPR-12751?redirect=false)** and commented  We are using `standaloneSetup` for our `MockMvc` test and want to create a `HandlerExceptionResolver` so that we can instruct Spring to use an `@ControllerAdvice` class much like [this post](http://stackoverflow.com/a/25881974/945789); however, if we set handler exception resolvers the builder will overwrite any defaults and **only** use our resolver.  Our setup is like so (I didn't bother including code for how our resolver is created).  ```java MockMvcBuilders.standaloneSetup(buildController())         .setHandlerExceptionResolvers(createExceptionResolver())         .build(); ```  What we'd really like to do is **add** our resolver to the default list. We've had to do some nasty reflection to get a handle on the `WebMvcConfigurationSupport#addDefaultHandlerExceptionResolvers(java.util.List)` method so we can get the default resolvers first before creating our own, and that works as a workaround.  Can a suitable method be added to the builder to allow this?  ---  **Issue Links:** - #22074 Fix support of `@ControllerAdvice` registrations in the MockMvcBuilders standalone setup  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-02-24T20:55:07Z","2019-01-13T05:42:07Z"
"","17729","Allow the ManagedResource/Attribute/Metric/Operation to be placed on interface [SPR-13138]","**[Mathieu Lachance](https://jira.spring.io/secure/ViewProfile.jspa?name=matlach)** opened **[SPR-13138](https://jira.spring.io/browse/SPR-13138?redirect=false)** and commented  I'd like to ship in a separate jar my MBean interface so other can consume it remotely using the MBeanProxyFactoryBean.  Having the ManagedResource/Attribute.... placed over the api interface would allows self-documentation through annotations and be ""DRY"" (don't repeat yourself).  This improvement would make ManagedResource/Attribute.... similar to the Spring RESTful MVC annotations that can be placed over the interface. Validated/constraints annotations follow also the same pattern.  I've used improvement as the issue type, as I do not know if this is actually a bug.  ---  **Affects:** 4.1.6  **Issue Links:** - #14541 Allow `@ManagedResource` to be used with `@Bean` methods - #18275 `@ManagedOperationParameter` not marked with `@Target`/`@Retention`/`@Documented`/`@Repeatable`","closed","type: enhancement,","spring-projects-issues","2015-06-17T07:59:52Z","2019-01-13T05:40:25Z"
"","17728","Add an enum for MBeanExporter Autodetect Mode [SPR-13137]","**[Mathieu Lachance](https://jira.spring.io/secure/ViewProfile.jspa?name=matlach)** opened **[SPR-13137](https://jira.spring.io/browse/SPR-13137?redirect=false)** and commented  It would be nice for the MBeanExporter#setAutodetectMode to accept a newly created enum for AutodetectMode.  The work has been done for MBeanExporter#setRegistrationPolicy but not for AutodectMode.  If you have a look at RegistrationPolicy#valueOf it re-use the MBeanRegistrationSupport constants. To keep backward compatibility we could leverage the same pattern and/or maybe consider to ditch the pattern as it's already marked with `@Deprecated`.  ---  **Affects:** 4.1.6  **Issue Links:** - #13583 Introduce `@EnableMBeanExport` equivalent to","open","type: enhancement,","spring-projects-issues","2015-06-17T06:25:32Z","2019-01-13T05:40:27Z"
"","17704","proxy generated by @Validated is not considered as a DynamicMBean [SPR-13113]","**[Mathieu Lachance](https://jira.spring.io/secure/ViewProfile.jspa?name=matlach)** opened **[SPR-13113](https://jira.spring.io/browse/SPR-13113?redirect=false)** and commented  I'd like to create an `@ManagedResource` `@Component` with an interface to: 1. be able to create client proxy 2. leverage the `@Validated` feature and have a very clear contract  let's assume the following example:  ``` @Validated public interface LoggerJMXService {     List findAllLogger();     void setLoggerLevel(@NotBlank String loggerName, @NotBlank String loggerLevel); }  @ManagedResource(objectName = ""domain:type=type,name=name"", description = ""description"") @Component public class LoggerJMXServiceImpl implements LoggerJMXService {      @ManagedOperation     @Override     public List findAllLogger() {         //...     }      @ManagedOperation     @ManagedOperationParameters({             @ManagedOperationParameter(name = ""loggerName"", description = ""the logger name""),             @ManagedOperationParameter(name = ""loggerLevel"", description = ""the logger level"") })     @Override     public void setLoggerLevel(String loggerName, String loggerLevel) {         //...     } } ```  along with the following configuration:  ``` @EnableMBeanExport @Configuration public class MBeanExportConfiguration {     @Bean     public AnnotationMBeanExporter mbeanExporter() {         AnnotationMBeanExporter mBeanExporter = new AnnotationMBeanExporter();         mBeanExporter.setAutodetectMode(MBeanExporter.AUTODETECT_ALL);         mBeanExporter.setRegistrationPolicy(RegistrationPolicy.FAIL_ON_EXISTING);         mBeanExporter.setNamingStrategy(new MetadataNamingStrategy(new AnnotationJmxAttributeSource()));         return mBeanExporter;     } } ```  when bootstrapping the example, the JmxUtils:  ``` public static boolean isMBean(Class clazz) {      return (clazz != null &&                (DynamicMBean.class.isAssignableFrom(clazz) ||                                  (getMBeanInterface(clazz) != null || getMXBeanInterface(clazz) != null))); } ```  will return false as the proxy generated by the `@Validated` is not assignable to `DynamicMBean`.  If I remove the `@Validated` issue disappear though also with the validation feature which I'd like to keep.   ---  **Affects:** 4.1.6","closed","status: bulk-closed,","spring-projects-issues","2015-06-11T06:00:21Z","2019-01-12T02:27:40Z"
"","17668","AsyncResult implementation does not allow for throwing ExecutionException [SPR-13076]","**[Mathieu Lachance](https://jira.spring.io/secure/ViewProfile.jspa?name=matlach)** opened **[SPR-13076](https://jira.spring.io/browse/SPR-13076?redirect=false)** and commented  There's something not totally great about the implementation of the Spring's AsyncResult; the get methods signature erase the throws declaration.  java Future interface:  ```     /**      * Waits if necessary for the computation to complete, and then      * retrieves its result.      *      * @return the computed result      * @throws CancellationException if the computation was cancelled      * @throws ExecutionException if the computation threw an      * exception      * @throws InterruptedException if the current thread was interrupted      * while waiting      */     V get() throws InterruptedException, ExecutionException;  /**      * Waits if necessary for at most the given time for the computation      * to complete, and then retrieves its result, if available.      *      * @param timeout the maximum time to wait      * @param unit the time unit of the timeout argument      * @return the computed result      * @throws CancellationException if the computation was cancelled      * @throws ExecutionException if the computation threw an      * exception      * @throws InterruptedException if the current thread was interrupted      * while waiting      * @throws TimeoutException if the wait timed out      */     V get(long timeout, TimeUnit unit)         throws InterruptedException, ExecutionException, TimeoutException; ```  spring AsyncResult:  ``` 	@Override 	public V get() { 		return this.value; 	}  	@Override 	public V get(long timeout, TimeUnit unit) { 		return this.value; 	} ```  if you want to do the following you can't  ```     @Async     public  Future submit(Callable callable) {         try {             T result = callable.call();             return new AsyncResult<>(result);         }         catch (final Exception e) {             return executionExceptionAsyncResult(e);         }     }      private  AsyncResult executionExceptionAsyncResult(final Throwable cause) {         return new AsyncResult(null) {             @Override             public T get() throws InterruptedException, ExecutionException { // that line don't compile                 throw new ExecutionException(cause);             }         };     } ```  Also, if you have a look at the EE counterpart, you'll see that the throws declaration are part of the signature: http://docs.oracle.com/javaee/7/api/javax/ejb/AsyncResult.html  ---  **Affects:** 4.1.6  **Issue Links:** - #18822 AsyncResult calls SuccessCallback when it should call FailureCallback  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9410dff99cd193715de8cb0e242879018b775aec  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-05-27T07:47:21Z","2019-01-11T15:46:03Z"
"","17557","consider moving SimpleNamingContextBuilder outside of spring-test artifact [SPR-12965]","**[Mathieu Lachance](https://jira.spring.io/secure/ViewProfile.jspa?name=matlach)** opened **[SPR-12965](https://jira.spring.io/browse/SPR-12965?redirect=false)** and commented  We have some standalone application that run outside a Web container in plain Java SE.  The available SimpleNamingContext and SimpleNamingContextBuilder would work perfectly fine for this kind of usage.  The javadoc of SimpleNamingContextBuilder also state:  ``` * Mainly targeted at test environments, where each test case can * configure JNDI appropriately, so that {@code new InitialContext()} * will expose the required objects. Also usable for standalone applications, * e.g. for binding a JDBC DataSource to a well-known JNDI location, to be * able to use traditional J2EE data access code outside of a J2EE container. ```  Since there's also a check that make sure that SimpleNamingContextBuilder do not overrides the already present JNDI, I think we are safe to move the dependency?  ``` if (NamingManager.hasInitialContextFactoryBuilder()) {     throw new IllegalStateException(             ""Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. "" +                     ""Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, "" +                     ""with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.""); ```  I think that feature should be fully re-usable; could we move SimpleNamingContext/Builder from ""spring-test"" to the ""core"" artifact ?  Thanks,   ---  **Affects:** 4.1.6","closed","status: bulk-closed,","spring-projects-issues","2015-04-29T05:23:26Z","2019-01-12T00:16:48Z"
"","17341","Regression in 4.1.5: Alternative @Bean declarations with same primary bean name do not work anymore [SPR-12744]","**[Martin Wegner](https://jira.spring.io/secure/ViewProfile.jspa?name=martin.wegner@ebp.de)** opened **[SPR-12744](https://jira.spring.io/browse/SPR-12744?redirect=false)** and commented  Since Spring 4.1.5 the DI cannot find my profile activated 'database.dataSource' bean.  My web.xml activates the 'jetty' profile:  ```    spring.profiles.default   jetty  ```  And my config looks like:  ``` @Profile(""live"") @Bean(name = ""database.dataSource"") public DataSource jndiDataSource() {   ... } ```  ``` @Profile(""!live"") @Bean(name = ""database.dataSource"") public DataSource jdbcDataSource() {   ... } ```  ``` @DependsOn({""database.dataSource"", ""databaseForUnitTestFramework""}) @Bean(name = ""sessionFactory"") public LocalSessionFactoryBean localSessionFactoryBean() {   ... } ```  The '!live' annotated bean must be activated and used. With Spring 4.1.4 and lower it works. It is a blocker bug because the whole application does not start.  ---  **Affects:** 4.1.5  **Issue Links:** - #17292 Conditions on an overriding bean method effectively get ignored - #19831 Doc: Consistent `@Profile` declarations on overloaded `@Bean` methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ce085a606f3e5f019037cff565c10702bf691237, https://github.com/spring-projects/spring-framework/commit/bb5b5d52edf60350f09cf11c41e6fba534bebb54","closed","in: core,","spring-projects-issues","2015-02-23T01:47:46Z","2019-01-13T05:42:12Z"
"","17251","Document how MultiPartFile.transferTo works with Servlet 3 [SPR-12650]","**[Martin Sivák](https://jira.spring.io/secure/ViewProfile.jspa?name=marsik)** opened **[SPR-12650](https://jira.spring.io/browse/SPR-12650?redirect=false)** and commented  When a multipart file upload is attempted using Spring MVC, MultiPartFile object is received.  ``` @RequestMapping(method = RequestMethod.POST) @ResponseStatus(HttpStatus.OK) public EmberModel upload(@RequestParam(""files[]"") MultipartFile[] files) { ```  The documentation (http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/MultipartFile.html#transferTo-java.io.File-) then says that the transferTo(File destination) method will move the uploaded file to the provided location.  Well on Jetty 9 it won't..  The reason for this is hidden in org.eclipse.jetty.util.MultiPartInputStreamParser.MultiPart#write(java.lang.String) which tries to do the following (the second codepath does that in the same way):  ``` File f = new File(_tmpDir, fileName); if (_file.renameTo(f))     _file = f; ```  The filename argument bubbles there from:  ``` // org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java @Override public void transferTo(File dest) throws IOException, IllegalStateException { 	this.part.write(dest.getPath()); } ```  The destination itself is correct, but the File(parent, path) constructor will always convert it to relative path and prefix it with the _tmpDir. That will convert path like /home/myuser/destination.txt to /tmp/home/myuser/destination.txt on my system.  Now this might be Jetty's fault, but it essentially means that the transferTo method is useless for Jetty backed application, because there is no way to give it an absolute path.  ---  **Affects:** 4.1.4  **Issue Links:** - #19822 StandardMultipartFile.transferTo should fall back to manual copy if Part.write doesn't support absolute locations (e.g. on Jetty)","closed","type: task,","spring-projects-issues","2015-01-21T14:52:02Z","2019-01-11T19:02:36Z"
"","17905","Introduce additional JsonPath matchers in Spring MVC Test [SPR-13320]","**[Martin Meyer](https://jira.spring.io/secure/ViewProfile.jspa?name=elreydetodo)** opened **[SPR-13320](https://jira.spring.io/browse/SPR-13320?redirect=false)** and commented  #### Status Quo  `JsonPathResultMatchers` currently has the following `ResultMatcher` methods.  * `value(Object)` * `value(Matcher)` * `doesNotExist()` * `exists()` * `isArray()`  #### Proposal  It would be beneficial to introduce the following.  * `isBoolean()` * `isNumber()` * `isObject()` * `isString()`  ---  **Affects:** 3.2 GA  **Issue Links:** - #17935 JsonPath assertions fail to differentiate between definite and indefinite results in checks for existence - #17936 Introduce JsonPath matchers for empty and non-empty content  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/854","closed","type: enhancement,","spring-projects-issues","2015-08-05T08:48:14Z","2019-01-11T18:23:17Z"
"","17565","@RequestPart should take optional ContentType [SPR-12974]","**[Martin Meyer](https://jira.spring.io/secure/ViewProfile.jspa?name=elreydetodo)** opened **[SPR-12974](https://jira.spring.io/browse/SPR-12974?redirect=false)** and commented  In a multipart form data message, each part can have its own content type attached to it. It would be nice if the `@RequestPart` annotation supported an optional content type field. It would be great also if routing to the controller only worked if the content type of the part in question matches.   ---  **Affects:** 4.1.3","closed","type: enhancement,","spring-projects-issues","2015-05-01T11:55:48Z","2018-11-30T21:43:43Z"
"","17486","Better exception message for missing @RequestBody method parameter [SPR-12888]","**[Martin Meyer](https://jira.spring.io/secure/ViewProfile.jspa?name=elreydetodo)** opened **[SPR-12888](https://jira.spring.io/browse/SPR-12888?redirect=false)** and commented  When I use `@RequestBody` on one of my controllers for a required parameter, I need some useful way of saying which parameter was missing if it's not there. The exception message I see currently looks like this:  ``` Required request body content is missing: org.springframework.web.method.HandlerMethod$HandlerMethodParameter@a8b8886e 	at org.springframework.test.util.MatcherAssertionErrors.assertThat(MatcherAssertionErrors.java:80) 	at org.springframework.test.util.JsonPathExpectationsHelper.assertValue(JsonPathExpectationsHelper.java:92) 	at org.springframework.test.web.servlet.result.JsonPathResultMatchers$1.match(JsonPathResultMatchers.java:56) 	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:152) ... ```  It would be nice if when that exception could have a reference to the parameter name that was missing, or if the message itself included it instead of the `MethodParameter#toString()`. I'll eventually want to internationalize the message I produce, so the parameter name is preferable.   ---  **Affects:** 4.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/13403d51e589a3612f8359c8f3e4d2c21947af81","closed","type: enhancement,","spring-projects-issues","2015-04-03T12:51:21Z","2015-05-26T01:15:04Z"
"","17730","AntPathMatcher throws StringIndexOutOfBoundsException [SPR-13139]","**[Martin Lippert](https://jira.spring.io/secure/ViewProfile.jspa?name=mlippert)** opened **[SPR-13139](https://jira.spring.io/browse/SPR-13139?redirect=false)** and commented  AntPathMatcher throws an StringIndexOutOfBoundsException when the comparator is used with a path that starts with a ""*"".  Will create pull request to fix this.  ---  **Affects:** 4.1.4, 4.2 RC1  **Issue Links:** - #17707 AntPathMatcher isn't fully conform Ant Style","closed","in: core,","spring-projects-issues","2015-06-17T08:12:46Z","2019-01-11T16:23:43Z"
"","17266","Restore ability to override bean definition names in DefaultListableBeanFactory subclass [SPR-12667]","**[Martin Lippert](https://jira.spring.io/secure/ViewProfile.jspa?name=mlippert)** opened **[SPR-12667](https://jira.spring.io/browse/SPR-12667?redirect=false)** and commented  There are changes made to DefaultListableBeanFactory that can cause subclasses to break:  https://github.com/spring-projects/spring-framework/commit/965bea7b3e4e1a0af44acb206e71c63ca37183a6  The problem is that inside method ""doGetBeanNames..."" the access of the bean definition names is changed from calling ""getBeanDefinitionNames"" to the direct field access. This breaks subclasses that have overridden ""getBeanDefinitonNames"" in order to do special things.  This is the case in Spring IDE, where there is a subclass of DefaultListableBeanFactory, which doesn't track the bean definition names itself, but delegates that to a BeanDefinitionRegistry object. This delegation is implemented for the BeanDefinitionRegistry methods in DefaultListableBeanFactory. I am not sure whether this is the optimal way to do this or if there is a more elegant way, but I tried to avoid to implement the methods of ListableBeanFactory by re-using them from the DefaultListableBeanFactory. That works if the implementation of DefaultListableBeanFactory is consequently calling the methods of BeanDefinitionRegistry instead of using fields directly. But I am open to other ideas, of course.  ---  **Affects:** 4.1.2, 4.1.3, 4.1.4  **Issue Links:** - #17012 DefaultListableBeanFactory should allow efficient access to current bean names","open","type: enhancement,","spring-projects-issues","2015-01-27T03:15:08Z","2019-01-11T19:02:03Z"
"","17829","AOP section referencs outdated resources [SPR-13238]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-13238](https://jira.spring.io/browse/SPR-13238?redirect=false)** and commented  The AOP chapter has a section called **Further Resources** this still references old books. A small update to at least AspectJ in Action 2nd edition would be nice (this one would also be more targeted on Spring then plain Aspectj).   ---  **Affects:** 4.0.9, 4.1.7, 4.2 RC3  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html#aop-resources  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/838, and commits https://github.com/spring-projects/spring-framework/commit/f120f22d517d7f24ae1800875ea09b52a6667abc","closed","type: documentation,","spring-projects-issues","2015-07-15T22:36:45Z","2015-07-31T02:39:18Z"
"","17742","@ComponentScan should be repeatable [SPR-13151]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-13151](https://jira.spring.io/browse/SPR-13151?redirect=false)** and commented  Currently it isn't possible to have multiple `@ComponentScan` annotations  on a class. It would be nice if there would be a container using `@Repeatable` for this annotations.   ---  **Affects:** 4.0.9, 4.1.6, 4.2 RC1  **Reference URL:** http://stackoverflow.com/questions/30970748/multiple-componentscan-in-spring-4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/388bd87ef03b3c080f1c351855d01af1df033a94","closed","type: enhancement,","spring-projects-issues","2015-06-21T22:32:37Z","2016-04-06T08:38:12Z"
"","17651","MessagingMessageListenerAdapter should use DestinationResolver of MessageListenerContainer [SPR-13059]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-13059](https://jira.spring.io/browse/SPR-13059?redirect=false)** and commented  When using `@JmsListener` and a `@SendTo` the created `MessagingMessageListenerAdapter` always uses a `DynamicDestinationResolver`. When the used `MessageListenerContainer` is configured with a different `DestinationResolver`.  This is problematic in the case of using a `JndiDestinationResolver`.  A fix could be to set the appropriate `DestinationResolver` in the `setupMessageListener` method of the `AbstractMessageListenerContainer` so that the appropriate one is used.  ---  **Affects:** 4.1.6  **Issue Links:** - #17520 MethodJmsListenerEndpoint does not set the DestinationResolver on the MessagingMessageListenerAdapter (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2015-05-22T03:42:06Z","2019-01-12T16:46:06Z"
"","17176","Add TimeZone and ZoneId to list of supported method arguments [SPR-12575]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-12575](https://jira.spring.io/browse/SPR-12575?redirect=false)** and commented  The list of supported method arguments in Spring MVC lacks the newly added `TimeZone` and `ZoneId` parameters.   ---  **Affects:** 4.0.8, 4.1.3  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)","closed","in: web,","spring-projects-issues","2014-12-29T06:34:22Z","2014-12-30T05:21:47Z"
"","17903","Jackson 2.6: message converter should use type only for collections [SPR-13318]","**[Markus Heiden](https://jira.spring.io/secure/ViewProfile.jspa?name=markus_heiden)** opened **[SPR-13318](https://jira.spring.io/browse/SPR-13318?redirect=false)** and commented  All our JSON entities implement an interface which is not annotated with Jackson annotations. Since using Jackson 2.6.0 the code snippet below of AbstractJackson2HttpMessageConverter#writeInternal(Object, Type, HttpOutputMessage) causes javaType always to be detected as the not annotated interface instead of the concrete JSON entity class. And Jackson later on complains about not finding any serializer for it.  ```java if (jackson26Available && type != null && value != null && TypeUtils.isAssignable(type, value.getClass())) {    javaType = getJavaType(type, null); } ```  ---  **Affects:** 4.2 GA  **Issue Links:** - [DATAREST-664](https://jira.spring.io/browse/DATAREST-664) GET on single resource does not show link for association collection resource - #18008 Spring response handler returning abstract object drops unique fields from concrete class - #18062 Full support for Jackson 2.7 - #18100 Jackson 2.6: message converter should use type also for Iterable - #17408 Make `@ResponseBody` method return type available to message converters - #18426 Improve Jackson 2.7 compatibility  1 votes, 10 watchers","closed","type: bug,","spring-projects-issues","2015-08-05T06:18:39Z","2019-01-13T05:39:19Z"
"","17618","Spring bean not autowiring when using Groovy closures [SPR-13027]","**[Mark Manders](https://jira.spring.io/secure/ViewProfile.jspa?name=mmjmanders)** opened **[SPR-13027](https://jira.spring.io/browse/SPR-13027?redirect=false)** and commented  When using the Spring framework in combination with the Groovy language, it is impossible to access `@Autowired` beans from a Groovy closure.  Exception in thread ""main"" java.lang.IllegalStateException: Failed to execute CommandLineRunner at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGroovyObjectGetProperty(AbstractCallSite.java:304) at org.springframework.boot.SpringApplication.runCommandLineRunners(SpringApplication.java:675) at com.example.closures.ClosuresApplication$_run_closure1.doCall(ClosuresApplication.groovy:22) at org.springframework.boot.SpringApplication.afterRefresh(SpringApplication.java:690) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at org.springframework.boot.SpringApplication.run(SpringApplication.java:321) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at org.springframework.boot.SpringApplication.run(SpringApplication.java:957) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.springframework.boot.SpringApplication.run(SpringApplication.java:946) at java.lang.reflect.Method.invoke(Method.java:497) at org.springframework.boot.SpringApplication$run.call(Unknown Source) at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90) at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45) at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:324) at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:110) at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:130) at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:292) at com.example.closures.ClosuresApplication.main(ClosuresApplication.groovy:27) at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1016) Caused by: groovy.lang.MissingPropertyException: No such property: bank for class: com.example.closures.ClosuresApplication$$EnhancerBySpringCGLIB$$44735576 at groovy.lang.Closure.call(Closure.java:423) at groovy.lang.Closure.call(Closure.java:439) at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2027) at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.unwrap(ScriptBytecodeAdapter.java:51) at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2012) at org.codehaus.groovy.runtime.callsite.PogoGetPropertySite.getProperty(PogoGetPropertySite.java:49) at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2053) at org.codehaus.groovy.runtime.dgm$162.invoke(Unknown Source) at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGroovyObjectGetProperty(AbstractCallSite.java:304) at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoMetaMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:271) at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:53) at com.example.closures.ClosuresApplication$_run_closure1.doCall(ClosuresApplication.groovy:22) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:110) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:122) at java.lang.reflect.Method.invoke(Method.java:497) at com.example.closures.ClosuresApplication.run(ClosuresApplication.groovy:21) at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90) at org.springframework.boot.SpringApplication.runCommandLineRunners(SpringApplication.java:672) ... 9 common frames omitted  is thrown from within the 'each' closure in the main class:  `@SpringBootApplication` class ClosuresApplication implements CommandLineRunner {      @Autowired     private Bank bank          @Override     void run(String... args) throws Exception {         for (def i = 0; i < 10; i++) {             printf 'Bank %02d: %s%n', (i + 1), bank         }              (1..10).each {             printf 'Bank %02d: %s%n', it, bank         }     }          static void main(String[] args) {         SpringApplication.run ClosuresApplication, args     }  }   ---  **Affects:** 4.1.6  **Reference URL:** http://stackoverflow.com/questions/29920281/exception-accessing-spring-managed-bean-from-groovy-closure","closed","status: bulk-closed,","spring-projects-issues","2015-05-14T01:04:16Z","2019-01-12T00:16:30Z"
"","17624","LocaleChangeInterceptor not protected against CSRF [SPR-13032]","**[Mark Janssen](https://jira.spring.io/secure/ViewProfile.jspa?name=praseodym)** opened **[SPR-13032](https://jira.spring.io/browse/SPR-13032?redirect=false)** and commented  When [Spring Security CSRF protection](http://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#csrf-configure) is enabled, all POST requests are protected against CSRF. [Logout requests are made HTTP POST-only](http://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#csrf-logout) to prevent against malicious logouts.  The LocaleChangeInterceptor also changes the user's (session) state, but is not protected against CSRF by default. In addition, there is no configuration option available to make it POST-only.  ---  **Affects:** 4.1.6  **Issue Links:** - #21241 CookieLocaleResolver is not RFC6265 compliant when setting a locale and time zone - #14091 Better handling of illegal locale values in LocaleChangeInterceptor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/90d54285d292fca38727700874824092fb6a3dc9, https://github.com/spring-projects/spring-framework/commit/0dd320f92e31d516df9c5f85d4ddbe16ffeaa2cc","closed","type: enhancement,","spring-projects-issues","2015-05-15T05:53:17Z","2019-01-11T16:02:07Z"
"","17325","Stomp error when PongMessage is passed to StompSubProtocolHandler [SPR-12728]","**[Mark Anderson](https://jira.spring.io/secure/ViewProfile.jspa?name=markanderson)** opened **[SPR-12728](https://jira.spring.io/browse/SPR-12728?redirect=false)** and commented  StompSubProtocolHandler cannot handle receiving a PongMessage.  ``` ERROR Feb 18 11:15:47 (56612 [qtp300104620-57] org.springframework.web.socket.messaging.StompSubProtocolHandler) Failed to parse PongMessage payload=[java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]], byteCount=0, last=true] in session 123f6cb6. Sending STOMP ERROR to client.      [java] java.lang.IllegalArgumentException: Unexpected WebSocket message type: PongMessage payload=[java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]], byteCount=0, last=true]      [java] 	at org.springframework.web.socket.messaging.StompSubProtocolHandler.handleMessageFromClient(StompSubProtocolHandler.java:203)      [java] 	at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.handleMessage(SubProtocolWebSocketHandler.java:309)      [java] 	at org.springframework.web.socket.handler.WebSocketHandlerDecorator.handleMessage(WebSocketHandlerDecorator.java:75)      [java] 	at org.springframework.web.socket.handler.WebSocketHandlerDecorator.handleMessage(WebSocketHandlerDecorator.java:75)      [java] 	at org.springframework.web.socket.handler.WebSocketHandlerDecorator.handleMessage(WebSocketHandlerDecorator.java:75)      [java] 	at org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.handleMessage(LoggingWebSocketHandlerDecorator.java:56)      [java] 	at org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.handleMessage(ExceptionWebSocketHandlerDecorator.java:72)      [java] 	at com.psymetrix.pdc.web.CustomJettyWebSocketHandlerAdapter.onWebSocketFrame(CustomJettyWebSocketHandlerAdapter.java:55)      [java] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)      [java] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)      [java] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)      [java] 	at java.lang.reflect.Method.invoke(Method.java:483)      [java] 	at org.eclipse.jetty.websocket.common.events.annotated.CallableMethod.call(CallableMethod.java:71)      [java] 	at org.eclipse.jetty.websocket.common.events.annotated.OptionalSessionCallableMethod.call(OptionalSessionCallableMethod.java:72)      [java] 	at org.eclipse.jetty.websocket.common.events.JettyAnnotatedEventDriver.onFrame(JettyAnnotatedEventDriver.java:149)      [java] 	at org.eclipse.jetty.websocket.common.events.AbstractEventDriver.incomingFrame(AbstractEventDriver.java:107)      [java] 	at org.eclipse.jetty.websocket.common.WebSocketSession.incomingFrame(WebSocketSession.java:309)      [java] 	at org.eclipse.jetty.websocket.common.extensions.ExtensionStack.incomingFrame(ExtensionStack.java:214)      [java] 	at org.eclipse.jetty.websocket.common.Parser.notifyFrame(Parser.java:220)      [java] 	at org.eclipse.jetty.websocket.common.Parser.parse(Parser.java:258)      [java] 	at org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.readParse(AbstractWebSocketConnection.java:613)      [java] 	at org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:468)      [java] 	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)      [java] 	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:626)      [java] 	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:546)      [java] 	at java.lang.Thread.run(Thread.java:745) ```  Note that the CustomJettyWebSocketHandlerAdapter class in the stack trace is used to workaround #17324  ---  **Affects:** 4.1.4  **Issue Links:** - #17324 Unhandled websocket error when unsolicited pong frame with zero length payload received from IE11  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/917eb1de0b2f4f75ea40ca46e32b164cd6b2338f, https://github.com/spring-projects/spring-framework/commit/6fafe63311e1a6ebfed21f3be21b92f4f139ab8b","closed","type: bug,","spring-projects-issues","2015-02-18T03:21:13Z","2019-01-11T21:28:34Z"
"","17324","Unhandled websocket error when unsolicited pong frame with zero length payload received from IE11 [SPR-12727]","**[Mark Anderson](https://jira.spring.io/secure/ViewProfile.jspa?name=markanderson)** opened **[SPR-12727](https://jira.spring.io/browse/SPR-12727?redirect=false)** and commented  An unhandled error occurs when an unsolicited pong frame with zero length payload is received from IE11. I'm using Spring Framework 4.1.4 and Jetty 9.2.6.  It seems that Jetty returns a null payload when an unsolicited pong frame is received and Spring cannot handle this.  ``` WARN  Feb 18 10:54:50 (328489 [qtp300104620-117] org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter) Unhandled Error (closing connection)      [java] org.eclipse.jetty.websocket.api.WebSocketException: Cannot call method public void org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter#onWebSocketFrame(org.eclipse.jetty.websocket.api.extensions.Frame) with args: [org.eclipse.jetty.websocket.common.frames.PongFrame]      [java] 	at org.eclipse.jetty.websocket.common.events.annotated.CallableMethod.call(CallableMethod.java:99)      [java] 	at org.eclipse.jetty.websocket.common.events.annotated.OptionalSessionCallableMethod.call(OptionalSessionCallableMethod.java:72)      [java] 	at org.eclipse.jetty.websocket.common.events.JettyAnnotatedEventDriver.onFrame(JettyAnnotatedEventDriver.java:149)      [java] 	at org.eclipse.jetty.websocket.common.events.AbstractEventDriver.incomingFrame(AbstractEventDriver.java:107)      [java] 	at org.eclipse.jetty.websocket.common.WebSocketSession.incomingFrame(WebSocketSession.java:309)      [java] 	at org.eclipse.jetty.websocket.common.extensions.ExtensionStack.incomingFrame(ExtensionStack.java:214)      [java] 	at org.eclipse.jetty.websocket.common.Parser.notifyFrame(Parser.java:220)      [java] 	at org.eclipse.jetty.websocket.common.Parser.parse(Parser.java:258)      [java] 	at org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.readParse(AbstractWebSocketConnection.java:613)      [java] 	at org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:468)      [java] 	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)      [java] 	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:626)      [java] 	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:546)      [java] 	at java.lang.Thread.run(Thread.java:745)      [java] Caused by: java.lang.reflect.InvocationTargetException      [java] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)      [java] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)      [java] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)      [java] 	at java.lang.reflect.Method.invoke(Method.java:483)      [java] 	at org.eclipse.jetty.websocket.common.events.annotated.CallableMethod.call(CallableMethod.java:71)      [java] 	... 13 more      [java] Caused by: java.lang.IllegalArgumentException: payload must not be null      [java] 	at org.springframework.util.Assert.notNull(Assert.java:112)      [java] 	at org.springframework.web.socket.AbstractWebSocketMessage.(AbstractWebSocketMessage.java:52)      [java] 	at org.springframework.web.socket.AbstractWebSocketMessage.(AbstractWebSocketMessage.java:40)      [java] 	at org.springframework.web.socket.PongMessage.(PongMessage.java:41)      [java] 	at org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter.onWebSocketFrame(JettyWebSocketHandlerAdapter.java:99)      [java] 	... 18 more  ```  ---  **Affects:** 4.1.4  **Issue Links:** - #17325 Stomp error when PongMessage is passed to StompSubProtocolHandler","closed","type: bug,","spring-projects-issues","2015-02-18T03:06:46Z","2019-01-11T21:28:26Z"
"","17308","@JSONP annotation doesn't work Spring boot jersey @Component resource  [SPR-12711]","**[Marius Grama](https://jira.spring.io/secure/ViewProfile.jspa?name=mariusneo)** opened **[SPR-12711](https://jira.spring.io/browse/SPR-12711?redirect=false)** and commented  Adding `@Component` on the jersey REST resource class breaks for some reason the JSONP functionality of Jersey.  If not adding `@Component` on the jersey REST resource class and when using perf4j for performance logging, the methods of the REST resource class require explicit perf4j stopwatches because `@Profiled` annotations are not taken anymore into account  Spring boot version used 1.2.1.RELEASE   --- No further details from [SPR-12711](https://jira.spring.io/browse/SPR-12711?redirect=false)","closed","status: invalid,","spring-projects-issues","2015-02-12T01:33:16Z","2019-01-12T05:24:43Z"
"","17562","Doc: DefaultListableBeanFactory is not thread-safe for manual singleton registration [SPR-12970]","**[Mariano Gonzalez](https://jira.spring.io/secure/ViewProfile.jspa?name=mariano.gonzalez)** opened **[SPR-12970](https://jira.spring.io/browse/SPR-12970?redirect=false)** and commented  Although the DefaultListableBeanFactory class uses ConcurrentHashMap to keep track of the contained objects, the manualSingletonNames is a simple LinkedHashMap.  As a result, if a Thread is manually registering a bean via the registerSingleton(String, Object) method, while another thread is executing the doGetBeanNamesForType(Class, boolean, boolean) -- or any of the other methods which iterate that Set -- then a ConcurrentModificationException is thrown.  It seems to me that this should be allowed and that if the maps are concurrent, then it makes sense that this Set is also.  Additionally I noticed that the beanDefinitionNames and resolvableDependencies attributes are also not synchronised. I haven't run into any issues with that, but it's still worth analysing.  Thank you!  ---  **Affects:** 4.1.6  **Issue Links:** - #17012 DefaultListableBeanFactory should allow efficient access to current bean names - #17714 ConcurrentModificationException in DefaultListableBeanFactory.doGetBeanNamesForType() - #18071 ConcurrentModificationException when executing AutowireCapableBeanFactory.createBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/90493f49e628929b2d83ac564c0e5a6e8d524875","closed","in: core,","spring-projects-issues","2015-04-30T10:11:36Z","2019-01-11T21:05:20Z"
"","17513","JSR-330 @Named and @Qualifier annotations are ignored in some scenarios [SPR-12914]","**[Mariano Gonzalez](https://jira.spring.io/secure/ViewProfile.jspa?name=mariano.gonzalez)** opened **[SPR-12914](https://jira.spring.io/browse/SPR-12914?redirect=false)** and commented  I found an issue regarding org.springframework.beans.factory.support.DefaultListableBeanFactory#findAutowireCandidates method when a AutowiredAnnotationBeanPostProcessor is being used.  For a given type A, I have a context in which two instances exists, respectively named as ""a1"" and ""a2"".  I have a class which uses JSR-330 annotations as follows:  ```java public class MyClass {  @Inject @Named(""a2"") private A object; } ```  Spring fails to start because it says that there're two possible resolutions for the field:  > Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [org.mule.api.serialization.ObjectSerializer] is defined: expected single matching bean but found 2: a1,a2.  If you look at the code, AutowiredAnnotationBeanPostProcessor did considered the `@Inject` annotation but didn't propagate any other kind of metadata to specify that I'm looking for a specific named instance. Thus, autowire candidates resolution fails because the list didn't got filtered.  The same thing happens if you try to use a javax.inject.Qualifier.  I built this other example:  First, define a Qualifier:  ```java @Qualifier @Retention(RUNTIME) @Target({TYPE, ElementType.METHOD, FIELD, PARAMETER}) public @interface DefaultObjectSerializer {  } ```  And annotated a Factory Bean with it:  ```java @DefaultObjectSerializer public class DefaultObjectSerializerFactoryBean implements SmartFactoryBean { ... } ```  I then try to use that dependency in an object:  ```java public static class TestObjectSerializerAware {      @Inject     @DefaultObjectSerializer     private ObjectSerializer objectSerializer;      public ObjectSerializer getObjectSerializer()     {         return objectSerializer;     } } ```  I would expected that class to be injected with the factory bean's return object. Instead, I get this error:  > Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [org.mule.api.serialization.ObjectSerializer] is defined: expected single matching bean but found 2:    ---  **Affects:** 4.1.5  **Attachments:** - [spr12914.zip](https://jira.spring.io/secure/attachment/22810/spr12914.zip) (_32.67 kB_) - [SPR-12914-failing.zip](https://jira.spring.io/secure/attachment/23451/SPR-12914-failing.zip) (_52.49 kB_)  3 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-04-15T08:36:56Z","2019-01-12T00:17:16Z"
"","17172","org.springframework.cache.aspectj.JCacheCacheAspect is missing from META-INF/aop.xml in spring-aspects [SPR-12571]","**[Marek Wiącek](https://jira.spring.io/secure/ViewProfile.jspa?name=marekw)** opened **[SPR-12571](https://jira.spring.io/browse/SPR-12571?redirect=false)** and commented  META-INF/aop.xml in spring-aspects contains an entry for org.springframework.cache.aspectj.AnnotationCacheAspect, but not org.springframework.cache.aspectj.JCacheCacheAspect   ---  **Affects:** 4.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/73c21fbac1d629a460dfc3292a0fb482e591142b","closed","type: enhancement,","spring-projects-issues","2014-12-27T11:10:59Z","2014-12-30T05:21:46Z"
"","17883","Unable to override RequestMappingHandlerAdapter#createRequestMappingMethod [SPR-13293]","**[Marek Szalik](https://jira.spring.io/secure/ViewProfile.jspa?name=szalik)** opened **[SPR-13293](https://jira.spring.io/browse/SPR-13293?redirect=false)** and commented  I want to create my own implementation of org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod  An instance of ServletInvocableHandlerMethod is created in RequestMappingHandlerAdapter#**createRequestMappingMethod**  Unfortunately that method is private so I am not able to override it in my **RequestMappingHandlerAdapter**. Please change it to protected.  Source code link: https://github.com/spring-projects/spring-framework/blob/4.1.x/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java#L785   ---  **Affects:** 4.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/10a2f50130998d16f0a94d0270ab6b2cab977a87","closed","type: enhancement,","spring-projects-issues","2015-07-30T02:26:09Z","2015-07-31T02:39:15Z"
"","17507","Document connection handling in ScriptUtils.executeSqlScript() methods [SPR-12908]","**[Marcel Stör](https://jira.spring.io/secure/ViewProfile.jspa?name=marcelstoer)** opened **[SPR-12908](https://jira.spring.io/browse/SPR-12908?redirect=false)** and commented  The Javadoc for the deprecated `JdbcTestUtils#executeSqlScript` methods is missing information that's IMO crucial for the migration to `ScriptUtils#executeSqlScript`.  I migrated something like  ```java JdbcTemplate template = new JdbcTemplate(dataSource); org.springframework.core.io.Resource sqlScript = context.getResource(scriptLocation); JdbcTestUtils.executeSqlScript(template, sqlScript, false); ```  to  ```java try {   ScriptUtils.executeSqlScript(dataSource.getConnection(), sqlScript); } catch (ScriptException | SQLException e) {   throw new RuntimeException(""Failed to execute script '"" + sqlScript.getFilename() + ""'."", e); } ```  It took me quite a while to figure out why the underlying connection pool kept throwing ""Timeout waiting for idle object"" exceptions.  Reason: in contrast to using `JdbcTemplate` with `JdbcTestUtils` you need to close the `Connection` manually if you work with `ScriptUtils`.  Hence, my new test method should be  ```java try (Connection connection = dataSource.getConnection()) {   ScriptUtils.executeSqlScript(connection, sqlScript); } catch (ScriptException | SQLException e) {   throw new RuntimeException(""Failed to execute script '"" + sqlScript.getFilename() + ""'."", e); } ```  It's trivial to understand why this has to be the way it is but I think it's important enough to deserve a specific remark in the `\@deprecated` messages (or `ScriptUtils#executeSqlScript`).   ---  **Affects:** 4.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1226596b8b15454acbc15f422b9afb96c4d09e12","closed","type: task,","spring-projects-issues","2015-04-14T03:59:04Z","2015-05-26T01:15:00Z"
"","17428","HTTP Streaming Directly to the OutputStream [SPR-12831]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-12831](https://jira.spring.io/browse/SPR-12831?redirect=false)** and commented  Provide a way to returning a ResponseEntity containing a streaming output stream. This similar to Jersey's https://docs.oracle.com/javaee/6/api/javax/ws/rs/core/StreamingOutput.html  This is useful for large files to be downloaded.  ---  **Affects:** 4.1.5  **Issue Links:** - #16826 HTTP Streaming and Server-Sent Events (SSE)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/95f6e4cc9bda491e20da26ba05eb7ba3f3c15bbe","closed","type: enhancement,","spring-projects-issues","2015-03-19T04:08:53Z","2019-01-11T21:39:44Z"
"","17435","RequestThemeResolver [SPR-12837]","**[Marc Wielansky](https://jira.spring.io/secure/ViewProfile.jspa?name=mwielansky)** opened **[SPR-12837](https://jira.spring.io/browse/SPR-12837?redirect=false)** and commented  I'd like to propose a new RequestThemeResolver class which would be very similar to the SessionThemeResolver with the exception that it stores the theme as a request attribute.  I'm working on a session-less, stateless REST api app that detects theme based on domain name. I'd like a place to store this data after its detected in the interceptor.   --- No further details from [SPR-12837](https://jira.spring.io/browse/SPR-12837?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-03-20T14:20:45Z","2019-01-12T00:17:47Z"
"","17850","Unwanted recursive behaviour on databinding [SPR-13259]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-13259](https://jira.spring.io/browse/SPR-13259?redirect=false)** and commented  When you have a recursive element with identical fields as the parent element, Spring will bind a supplied value to both items even if this is not allowed.  Let's say we have an existing post.  ``` post      id:10      user.id:15      txt:bla ```  We want to reference this post in another post. The user for this other post will be a different one And therefore we have a form such as this  ```   ```  The databinder looks something like this:  ``` @InitBinder public void initBinder(WebDataBinder dataBinder) {          dataBinder.setAllowedFields([""post"",""user""]);          dataBinder.registerCustomEditor(Post.class, ""post"", new SpringEntityEditorSupport(Post.class, mgr));      dataBinder.registerCustomEditor(User.class, ""user"", new SpringEntityEditorSupport(User.class, mgr)); } ```  The result of this will be:  ``` post      id:11      user.id:20      post           id:10           user.id:20 !Changed ```  Now, imho this should not happen.  First of all, I'm dubious whether the customEditor should execute recursively, since the path states ""user"" and not ""post.user"". Second of all, the allowedFields state ""user"" as well, and not ""post.user"" which should make this recursive behaviour a definite NoNo even if one would argue that the customEditor should execute recursively.   ---  **Affects:** 4.1.6","closed","status: invalid,","spring-projects-issues","2015-07-21T19:11:45Z","2019-01-12T05:24:02Z"
"","17977","Misleading note on readonly and disabled flags in spring-form.tld [SPR-13397]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13397](https://jira.spring.io/browse/SPR-13397?redirect=false)** and commented  Hello  Considering if I have the following:  ```xml","","","closed","in: web,","spring-projects-issues"
"","17495","Improve Documentation about when use BindingAwareModelMap and ExtendedModelMap [SPR-12896]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-12896](https://jira.spring.io/browse/SPR-12896?redirect=false)** and commented  In the current [Spring Framework Reference Documentation](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/)  does not teach when should be use BindingAwareModelMap and ExtendedModelMap. Even worst, both terms do not appear in the reference documentation.  According with their APIs [BindingAwareModelMap](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/support/BindingAwareModelMap.html) [ExtendedModelMap](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/ExtendedModelMap.html) The latter is a superclass of the former. But the current explanation of BindingAwareModelMap is not solid (To be honest, I don't understand in a 100% the idea)  Thefore: - improve the API documentation for BindingAwareModelMap. - Include some explanation and examples (specially for testing) about these two classes in the reference documentation. - About testing (Spring MVC Test) give a clear the idea about when use BindingAwareModelMap and ExtendedModelMap for some specific scenario.  Thank you.   ---  **Affects:** 4.1.6","closed","in: web,","spring-projects-issues","2015-04-07T14:50:26Z","2019-01-14T04:43:25Z"
"","17311","Why jdbcTemplate.queryForObject with a RowMapper throws EmptyResultDataAccessException [SPR-12714]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-12714](https://jira.spring.io/browse/SPR-12714?redirect=false)** and commented  I am working with Spring Core 4.1.4 and wondered why when I use  ```java @Override public Product findOne(Integer id) { 	String sql = ""SELECT p.* FROM product p WHERE p.id=?""; 	return jdbcTemplate.queryForObject(sql, new ProductRowMapper(), id); } ```  And there is no a row, instead to 'receive' null an EmptyResultDataAccessException exception is thrown instead.  I did a research on Github and therefore:  From  ```java @Override public  T queryForObject(String sql, Object[] args, RowMapper rowMapper) throws DataAccessException {      List results = query(sql, args, new RowMapperResultSetExtractor(rowMapper, 1));      return DataAccessUtils.requiredSingleResult(results); } ```  To  ```java public static  T requiredSingleResult(Collection results) throws IncorrectResultSizeDataAccessException {      int size = (results != null ? results.size() : 0);      if (size == 0) {          throw new EmptyResultDataAccessException(1);       }       if (results.size() > 1) {          throw new IncorrectResultSizeDataAccessException(1, size);       }      return results.iterator().next(); } ```  We have even two kind of exceptions  Is verbose include a try/catch in the method and return null.  Perhaps in the RowMapper we would be able to check if the ResultSet is empty or null, but even when I do that, the RowMapper\ is not called, it because the Exception has been thrown   ---  **Affects:** 4.1.4","closed","status: bulk-closed,","spring-projects-issues","2015-02-12T14:20:38Z","2019-01-12T03:30:02Z"
"","17181","Add RestTemplate support to get Links from Spring Hateoas access [SPR-12580]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-12580](https://jira.spring.io/browse/SPR-12580?redirect=false)** and commented  I am working with Spring Hateoas, I have watched the 2 or 3 webinars of Ben Hale available on Spring youtube channel about this project.  See the attached image, I know it works, you can do the click and go to the other ""resource"", but I am confused, thinking in the user, he working through a GUI (Swing or Browser), mostly a JSP file or HTML file (Thymeleaf), how is supposed the app get that ""links"" through the RestTemplate? It to be included and presented/rendered in the JSP/HTML through a simple form or table list?. From the image attached, the data is raw about its format or presentation, and practically not friendly for a common user.  With the RestTemplate I am able to get the POJO returned by the server or service, but how get the links (if any exists) theoretically returned by the service or server together/attached with the POJO to be appended in the GUI for the user?  In [RestTemplate](http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/web/client/RestTemplate.html) API I can see the methods:  * exchange * getForEntity  Would has sense create the methods  * exchangeWithLinks * getForEntityWithLinks  to let me retrieve the POJO and the Links?  **Note**: The POJO returned by the service should be agnostic that returns together with a possible Link(s), it to keep a zero coupling and maintain the POJO without refactoring to represent the Link(s) associated.  ---  **Affects:** 4.1.3  **Attachments:** - [resthateoas.png](https://jira.spring.io/secure/attachment/22447/resthateoas.png) (_135.00 kB_)  **Issue Links:** - #17277 Provide better RestTemplate tooling for Spring Data REST","closed","type: enhancement,","spring-projects-issues","2014-12-30T11:00:04Z","2019-01-14T05:13:50Z"
"","17180","Improve Reference Documentation about Spring WebSocket [SPR-12579]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-12579](https://jira.spring.io/browse/SPR-12579?redirect=false)** and commented  I am doing a research about Spring Web Socket. I already have read the current spring reference documentation.  I want ask for an improvement about the following:  1) Images about better explanation/complement about how work the Destinations and interceptors , it to understand clearly or much better about `@MessageMapping` and `@SubscribeMapping`.  The slides available by Rossen about Spring Websocket are nice, they should be included with a detailed explanation on Spring Reference Documentation.  2) Best suggestion/practice about configure:  ```java registry.enableStompBrokerRelay(""/topic"", ""/queue""); registry.setApplicationDestinationPrefixes(""/theapp"", ""/topic""); ```  For example in the current documentation always appears  ```java registry.setApplicationDestinationPrefixes(""/app""); ```  Always one, there is no reason or note about when use other value, how  ```java registry.setApplicationDestinationPrefixes(""/app"", ""/abc""); ```  A sample snippet code with an image would be valuable for a better understanding for a specific scenario  3) Is not clear if for  ```java registry.enableStompBrokerRelay(""/topic"", ""/queue""); ```  or  ```java registry.enableSimpleBroker(""/queue"",""/topic""); ```  the values of /queue or /topic are mandatory.  **If yes**, why not consider make available them how constants such the [MediaType](http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/http/MediaType.html) Class? or like an Enum such as [HttpMethod](http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/http/HttpMethod.html) enum?  **If not**, a sample snippet code with an image would be valuable for a better understanding for a specific scenario.  In the current documentation, I always see /queue or /topic, not other _possible_ values  Thank You   ---  **Affects:** 4.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/66791200570a360b04484e0f95dba24743cddf5c","closed","in: web,","spring-projects-issues","2014-12-30T09:46:39Z","2015-07-15T09:05:14Z"
"","17892","Spring MVC View for supporting PHP using Quercus [SPR-13301]","**[Manish](https://jira.spring.io/secure/ViewProfile.jspa?name=manish.in.java)** opened **[SPR-13301](https://jira.spring.io/browse/SPR-13301?redirect=false)** and commented  PHP is a very popular templating engine and I am seeing a growing trend of developers looking to migrate from PHP to Java (especially to frameworks like Spring MVC, Grails and Play) due to the better performance and stability of the Java platform and the ever-increasing number of security issues being discovered in PHP.  These developers find it very hard to code web pages on the Java platform because there is a plethora of choice when it comes to using a templating engine on the JVM.  It will therefore be useful if PHP can be supported as a view technology in Spring MVC, just like Freemarker, Velocity, JSTL, Thymeleaf and others.  This will make the learning curve for the those migrating from PHP to Java gentler and make the move inviting for decision-makers.  I have myself started enjoying writing views in PHP just because the PHP syntax is so much based on C, my first programming language.  If this sounds useful, I can contribute a PHP view based on Caucho Technology's Quercus engine.  A sample page is available as a [live demo](http://spring-mvc-enum.appspot.com/php).   ---  **Affects:** 4.2 GA","closed","type: enhancement,","spring-projects-issues","2015-08-01T08:41:53Z","2015-08-04T06:34:09Z"
"","17795","HttpMessageConverter based on Protostuff library [SPR-13203]","**[Manish](https://jira.spring.io/secure/ViewProfile.jspa?name=manish.in.java)** opened **[SPR-13203](https://jira.spring.io/browse/SPR-13203?redirect=false)** and commented  We have a large application with an API layer on top.  Current customers invoke the API using JSON or XML data packets.  A few potential customers have asked us to add support for Google Protocol Buffers and BSON as well.  Since our `@RestController` s already exchange JSON and XML data using regular POJOs, we want to explore whether we can add Profobuf and BSON using the same POJOs.  When we looked at existing Protobuf support in Spring WebMVC, we could see the `ProtobufHttpMessageConverter` class.  However, this class only works with POJOs generated using `protoc` and hence does not work for our existing set up.  After searching around, we found the [Protostuff library](http://www.protostuff.io) that can generate Protobuf messages with POJOs.  We therefore created an `HttpMessageConverter` using Protostuff.  As a bonus, we got BSON support through a format called `smile` that is also supported by Protostuff.  I would imagine that it would be a common need for other projects to integrate Protobuf support in an existing API layer.  Would there be interest in adding Protostuff support to Spring WebMVC?  If yes, I can contribute code to the project along with its necessary tests.  I have attached our current message converter with this ticket for review and comments.  If this is acceptable, I will submit a pull request on Github.  ---  **Affects:** 4.1.7  **Attachments:** - [ProtostuffHttpMessageConverter.java](https://jira.spring.io/secure/attachment/22929/ProtostuffHttpMessageConverter.java) (_3.95 kB_)  **Issue Links:** - #18166 ProtobufHttpMessageConverter support for protobuf 3.0.0-beta4  7 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2015-07-06T08:28:10Z","2019-01-11T18:07:52Z"
"","17375","Multi-module Maven application fails to start when multiple proxying styles are mixed [SPR-12777]","**[Manish](https://jira.spring.io/secure/ViewProfile.jspa?name=manish.in.java)** opened **[SPR-12777](https://jira.spring.io/browse/SPR-12777?redirect=false)** and commented  I have a multi-module Maven project with three important modules, namely `data`, `service` and `web`.  These are interdependent as follows (most dependent first): `web <- service <- data`.  A sample project is available on [Github](https://github.com/manish-in-java/spring-aop-scala).  If you attempt to run it as `mvn -am -pl web clean tomcat7:run`, the application fails to start with the error `Caused by: java.lang.IllegalArgumentException: Cannot subclass final class class com.sun.proxy.$Proxy44`.  I guess the application is trying to generate a proxy for a proxy object.  Is this an error in AOP or a misconfiguration in the application?  I am using the following:  || OS | Windows 7 Professional 64-bit, CentOS Linux 5| || JDK | Oracle JDK 1.8 patch 11 | || Maven | 3.1.1 |   ---  **Affects:** 4.1.5  **Reference URL:** https://github.com/manish-in-java/spring-aop-scala","closed","in: core,","spring-projects-issues","2015-03-02T21:07:17Z","2019-01-12T05:24:37Z"
"","17331","Spring 4 Integration with Tiles2 and Tiles3 [SPR-12734]","**[Mandar Chatufale](https://jira.spring.io/secure/ViewProfile.jspa?name=mandarchatufale)** opened **[SPR-12734](https://jira.spring.io/browse/SPR-12734?redirect=false)** and commented  Hello,  I am trying to intergrate Spring 4 with Tiles 2.1.2. Below are the configurations      @Bean     public AjaxUrlBasedViewResolver ajaxUrlBasedViewResolver(){     	AjaxUrlBasedViewResolver ajaxUrlBasedViewResolver =  new AjaxUrlBasedViewResolver();     	ajaxUrlBasedViewResolver.setViewClass(org.springframework.js.ajax.tiles2.AjaxTilesView.class);     	ajaxUrlBasedViewResolver.setOrder(0);     	return ajaxUrlBasedViewResolver;     }          @Bean     public TilesConfigurer tilesConfigurer(){     	TilesConfigurer tilesConfigurer = new TilesConfigurer();     	tilesConfigurer.setDefinitions(""/WEB-INF/defs/tiles.xml"");     	tilesConfigurer.setCheckRefresh(true);     	return tilesConfigurer;     }  However, above configuration is not working and it is giving me below error  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tilesConfigurer' defined in com.xyz.SpringMvcConfig: Invocation of init method failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/web/servlet/view/tiles2/TilesConfigurer$SpringTilesInitializer  A quick help is highly appreciated  Thanks   ---  **Affects:** 4.1.4","closed","status: invalid,","spring-projects-issues","2015-02-19T22:35:42Z","2019-01-12T05:24:42Z"
"","17697","Allow StopWatch to be started on construction. [SPR-13106]","**[Magnus Jason](https://jira.spring.io/secure/ViewProfile.jspa?name=magnusj)** opened **[SPR-13106](https://jira.spring.io/browse/SPR-13106?redirect=false)** and commented  The class org.springframework.util.StopWatch is a handy utility to time simple tasks.  However it actually takes 3 times of code to do a simple timer operation compared to two lines for the common no dependency approach:  Existing minimal approach:  ```java StopWatch stopWatch = new StopWatch(); stopWatch.start(); usefulService.doWork(); System.out.println(stopWatch.getTime()); ```  Common no dependency approach:  ```java long startTime = System.currentTimeMillis(); usefulService.doWork(); System.out.println(System.currentTimeMillis() - startTime); ```  I propose adding a new constructor that starts the timer on constrution so we can cut it down to two lines like so:  ```java StopWatch stopWatch = new StopWatch(true); usefulService.doWork(); System.out.println(stopWatch.getTime()); ```    ---  **Affects:** 4.2 RC1  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/815","closed","status: bulk-closed,","spring-projects-issues","2015-06-09T05:56:09Z","2019-01-12T02:27:46Z"
"","17948","@ComponentScan breaks @Configurable detection [SPR-13364]","**[Maarten De Cock](https://jira.spring.io/secure/ViewProfile.jspa?name=mdcock7)** opened **[SPR-13364](https://jira.spring.io/browse/SPR-13364?redirect=false)** and commented  `@Configuration` `@EnableSpringConfigured` `@EnableLoadTimeWeaving` `@ComponentScan`(""a.b.c"") public class Config { ...  new AnnotationConfigApplicationContext(Config.class);  ==> Objects created outside spring with the `@Configurable` annotation do not get their `@Autowired` fields initialized  Workaround: remove the `@ComponentScan` and use the scan method  `@Configuration` `@EnableSpringConfigured` `@EnableLoadTimeWeaving` public class Config { ...  new AnnotationConfigApplicationContext(Config.class).scan(""a.b.c"");  The `@Configurable` annotated class resides in package a.b.c.x   ---  **Affects:** 4.2 GA","closed","status: bulk-closed,","spring-projects-issues","2015-08-18T05:37:16Z","2019-01-12T00:16:16Z"
"","17378","Document null input requirements in Converter [SPR-12780]","**[M. Justin](https://jira.spring.io/secure/ViewProfile.jspa?name=mjustin)** opened **[SPR-12780](https://jira.spring.io/browse/SPR-12780?redirect=false)** and commented  Looking at the JavaDocs for [Converter](http://docs.spring.io/spring/docs/4.2.0.BUILD-SNAPSHOT/javadoc-api/), I see no mention about whether an implementation of the interface should expect to handle null values.  However, the [Spring Framework documentation](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html#core-convert-Converter-API) indicates that ""for each call to convert(S), the source argument is guaranteed to be NOT null.""  It would be therefore useful if the expected null input behavior was called out explicitly in the Javadoc, so that implementors of the interface would know they should not put in null checks.  Instead, they currently have to look in another source of documentation (not linked from the JavaDoc) to determine how they are expected to implement the interface.   ---  **Affects:** 3.2.13, 4.1.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff76be2d1665fd85730c4efd7a6a282aba3ef0fc, https://github.com/spring-projects/spring-framework/commit/5f305759fa063752e66c1a40343febc9c7d303d2, https://github.com/spring-projects/spring-framework/commit/dcb1145354fc0f59e7a9a4037017ea887ce29839  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","in: core,","spring-projects-issues","2015-03-03T12:53:07Z","2015-03-25T09:42:32Z"
"","17992","AsyncRestTemplate should wrap RuntimeExceptions in ExecutionException [SPR-13413]","**[Lukas Krecan](https://jira.spring.io/secure/ViewProfile.jspa?name=dart0)** opened **[SPR-13413](https://jira.spring.io/browse/SPR-13413?redirect=false)** and commented  We are migrating to RestTemplate and for backward compatibility reasons we have custom ResponseErrorHandler that throws RuntimExceptions. AsyncRestTemplate uses ResponseExtractorFuture which wraps IOExceptions to ExecutionException. Unfortunately it does not do the same for runtime exceptions which in turn causes different problems (for example response ""caching"" in ListenableFutureAdapters does not work)  It concerns this code from ResponseExtractorFuture (see comments inside)  ```      @Override protected final T adapt(ClientHttpResponse response) throws ExecutionException {      try {           if (!getErrorHandler().hasError(response)) {                    logResponseStatus(this.method, this.url, response);           }           else {                    handleResponseError(this.method, this.url, response);  // throws Runtime exception           }           return convertResponse(response);      }      catch (IOException ex) { // here I suggest to catch RuntimeException as well           throw new ExecutionException(ex);      }      finally {           if (response != null) {                    response.close();           }      } } ```  ---  **Affects:** 4.1.6  **Issue Links:** - #17485 HttpClientErrorException missing response body if callback is registered - #18925 AsyncRestTemplate changes in SPR-13413 made its harder to detect Client/Server errors  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/856561fa6e5ecc97df6c7014073f75300722b16d, https://github.com/spring-projects/spring-framework/commit/de0f3aec53e88962411b629350d8d86ad3447730, https://github.com/spring-projects/spring-framework/commit/3402c1380373aa91d5d0c9dc3d66fbd4e99e07d5, https://github.com/spring-projects/spring-framework/commit/2bb7164c64d94469cc93cd5e95da55a83ef02aad","closed","type: enhancement,","spring-projects-issues","2015-08-31T14:02:11Z","2019-01-11T17:12:41Z"
"","17737","Base64Utils inconsistencies between Java versions [SPR-13146]","**[Lukas Krecan](https://jira.spring.io/secure/ViewProfile.jspa?name=dart0)** opened **[SPR-13146](https://jira.spring.io/browse/SPR-13146?redirect=false)** and commented  Base64Utils behave differently in Java 7 and Java 8. The reason is that org.apache.commons.codec.binary.Base64.encode adds ""\r\n"" to the end of the encoded array while java.util.Base64 does not. It may cause issues for example if you want to use the value in HTTP header. It will work fine in Java 8 but will fail in Java 7.   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3b6548f3c20f32ea411eb94bf55fea7fe6965e4e","closed","in: core,","spring-projects-issues","2015-06-19T00:21:26Z","2019-01-12T05:24:10Z"
"","17575","NoHandlerFoundException message should not contain all headers [SPR-12984]","**[Lukas Krecan](https://jira.spring.io/secure/ViewProfile.jspa?name=dart0)** opened **[SPR-12984](https://jira.spring.io/browse/SPR-12984?redirect=false)** and commented  If DispetcherServlet throwExceptionIfNoHandlerFound is set to true, NoHandlerFoundException is thrown. Unfortunately its message contains headers and thus cookies, which may be a security risk.  In our scenario we serialize the exception to JSON which is returned to the user. Malicious script (for example injected by XSS) can call nonexisting resource and it will get sensitive cookies in the error message.  We have fixed it by overriding noHandlerFound and by throwing custom exception but I am afraid that other users may get to similar situation.   ---  **Affects:** 4.1.6","closed","type: enhancement,","spring-projects-issues","2015-05-05T07:03:10Z","2015-05-26T01:15:17Z"
"","17559","Support for Future responses in caching annotations [SPR-12967]","**[Lukas Krecan](https://jira.spring.io/secure/ViewProfile.jspa?name=dart0)** opened **[SPR-12967](https://jira.spring.io/browse/SPR-12967?redirect=false)** and commented  It would be nice to support caching of ListenableFuture (CompletableFuture) results. Imagine that your method returns ListenableFuture and you want to cache the result (not the future itself). If I am not mistaken it is not currently supported.  I may send you a pull request, but I'd like to hear if it makes sense. It may be a bit confusing since the cache would be filled/evicted not upon the method exit but upon the future completion.    ---  **Affects:** 4.1.6","closed","status: bulk-closed,","spring-projects-issues","2015-04-30T06:19:30Z","2019-01-12T00:16:42Z"
"","17751","Set spring.profiles.active from yaml list [SPR-13160]","**[Lukas Hinsch](https://jira.spring.io/secure/ViewProfile.jspa?name=lukashinsch)** opened **[SPR-13160](https://jira.spring.io/browse/SPR-13160?redirect=false)** and commented  When using yaml configuration files, it is not possible to set a list of active profiles from a yaml list like  ``` spring.profiles.active:   - profile1   - profile2 ```  Instead, only comma-separated lists are supported.  I am not sure if this is something that spring-framework supports in other places, but it generally works with spring-boot's ConfigurationProperties. And since the check for active profiles lies in spring-framework, it might also be easiest to fix here.  I have a working version that modifies AbstractEnvironment.doGetActiveProfiles to not only check for property ""spring.profiles.active"" but also for ""spring.profiles.active\[0..n\]"". Is this a reasonable path to pursue (I'd gladly try to form it into a PR in that case) or should this be handled in spring-boot only?   ---  **Affects:** 4.1.6, 4.2 RC1","closed","in: core,","spring-projects-issues","2015-06-24T05:24:24Z","2019-01-12T05:24:07Z"
"","17256","Javadoc for ModelAttributeMethodProcessor.validateIfApplicable is misleading [SPR-12655]","**[Lukas Hinsch](https://jira.spring.io/secure/ViewProfile.jspa?name=lukashinsch)** opened **[SPR-12655](https://jira.spring.io/browse/SPR-12655?redirect=false)** and commented  Update: The javadoc for ModelAttributeMethodProcessor.validateIfApplicable claims that validation is triggered by checking for annotation of type javax.validation.Valid, whereas the actual implementation looks for annotation type names starting with ""Valid"" to allow for additional annotations (see comment below). To avoid confusion the javadoc should be adjusted to reflect this behavior (such as ""The default implementation checks for annotations starting with ""Valid"" to cover {`@code` javax.validation.Valid}, {`@code` org.springframework.validation.annotation.Validated} and others."")  Was originally: When checking for annotation javax.validation.Valid the code only checks if the simple class name starts with ""Valid"". I was playing around with controller aspects in combination with custom annotations that by accident also started with ""Valid"" and it took me a while to understand why bean validation was triggered by my custom annotation.  So I think in: ModelAttributeMethodProcessor:162 the code should be changed from  ``` if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith(""Valid"")) ```  to something like  ``` if (validatedAnn != null || ann.annotationType().getName().equals(""javax.validation.Valid"")) ```  (https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java#L162)  ---  **Affects:** 3.2.13, 4.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9a7871fb708333e92df20bdd562a9fa1d472832f, https://github.com/spring-projects/spring-framework/commit/7585be85f3e8a08327ea9b3946a750293915abd7, https://github.com/spring-projects/spring-framework/commit/d77af71e9cec6f6f385bc5f8251dca6e171308b2, https://github.com/spring-projects/spring-framework/commit/186fef6808a39c6590bc02bd3214cf5f8826273c, https://github.com/spring-projects/spring-framework/commit/25644dbdb9d8b94d9de78c2dfd78c48a6dbc37d4, https://github.com/spring-projects/spring-framework/commit/7191050e26ae8954f5a6683ea86b4c4bf77110fd  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","type: task,","spring-projects-issues","2015-01-22T08:07:51Z","2019-01-13T20:57:35Z"
"","17492","OkHttp implementations of ClientHttpRequestFactory / AsyncClientHttpRequestFactory [SPR-12893]","**[Luciano Leggieri](https://jira.spring.io/secure/ViewProfile.jspa?name=lukiano)** opened **[SPR-12893](https://jira.spring.io/browse/SPR-12893?redirect=false)** and commented  Alternative for existing implementation that uses the lightweight OkHttp library.  ---  **Affects:** 4.1.6  **Issue Links:** - [ANDROID-138](https://jira.spring.io/browse/ANDROID-138) Implement OkHttp RequestFactory - #18596 Support for OkHttp 3 - #18916 Deprecate OkHttp 2.x support  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/800, and commits https://github.com/spring-projects/spring-framework/commit/6468aa775ca34cd3b052b9b78562ce0db951a1e4, https://github.com/spring-projects/spring-framework/commit/69fc2a8ab2cdfc355b53d544085eeebb2c7ae7cd  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2015-04-07T06:47:19Z","2019-01-11T21:34:44Z"
"","17869","Doc: Clarify AUTO_ACKNOWLEDGE semantics with SimpleMessageListenerContainer [SPR-13278]","**[Lubos Krnac](https://jira.spring.io/secure/ViewProfile.jspa?name=lkrnac)** opened **[SPR-13278](https://jira.spring.io/browse/SPR-13278?redirect=false)** and commented  Re-delivery of message when exception happen for combination AUTO_ACKNOWLEDGE and SimpleJmsListenerContainerFactory doesn't work since 4.1.7.RELEASE.  To reproduce I submitted spring-framework-issues sample project. Test expects duplicate message to be stored in DB, because app simulates error for first received message.  Behavior is different for Spring Boot 1.2.5.RELEASE in comparison to 1.2.4.RELEASE.  ---  **Affects:** 3.2.14, 4.1.7  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/100  **Issue Links:** - #16631 AbstractMessageListenerContainer#doExecuteListener can cause a dropped message if using CLIENT_ACKNOWLEDGE and the container is stopped and subsequently started again. - #17644 Remoting over JMS with receiveTimeout blocks service forever  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1), [3.2.15](https://github.com/spring-projects/spring-framework/milestone/103?closed=1)","closed","type: task,","spring-projects-issues","2015-07-24T15:48:29Z","2019-01-11T18:02:38Z"
"","17846","CLIENT_ACKNOWLEDGE with JmsTemplate - implicit message acknowledge each read [SPR-13255]","**[Lubos Krnac](https://jira.spring.io/secure/ViewProfile.jspa?name=lkrnac)** opened **[SPR-13255](https://jira.spring.io/browse/SPR-13255?redirect=false)** and commented  I found this code in JmsTemplate.doReceive(Session session, MessageConsumer consumer):  ```java          Message message = doReceive(consumer, timeout); if (session.getTransacted()) {      // Commit necessary - but avoid commit call within a JTA transaction.      if (isSessionLocallyTransacted(session)) {               // Transacted session created by this template -> commit.               JmsUtils.commitIfNecessary(session);      } } else if (isClientAcknowledge(session)) {      // Manually acknowledge message, if any.      if (message != null) {               message.acknowledge();      } } ```  Why is message acknowledged straight after reception before returning to application code? That effectively means we can't use JmsTemplate with CLIENT_ACKNOWLEDGE for bulk processing of messages. Does it relates somehow to #17587?  ---  **Issue Links:** - #17587 JMS message always acknowledged even with CLIENT_ACKNOWLEDGE","closed","status: declined,","spring-projects-issues","2015-07-21T13:04:22Z","2019-01-12T16:23:10Z"
"","17314","Decoupling support [SPR-12717]","**[Lubos Krnac](https://jira.spring.io/secure/ViewProfile.jspa?name=lkrnac)** opened **[SPR-12717](https://jira.spring.io/browse/SPR-12717?redirect=false)** and commented  I would like to have some decoupling support for autowiring. For example to be able to specify that this bean can be autowired only to persistence and service layer (and can't be used in web layer).  Is there such support or is anything planned?  Was thinking about some tagging concept. E.g. bean could be tagged with one or various string tags (e.g. ""persistence"", ""service""). And only beans with same tags could be linked together.  There are `@Service` / `@Persistence` annotations, but AFAIK there is nothing stopping me to autowire persistence bean into `@Controller`.   --- No further details from [SPR-12717](https://jira.spring.io/browse/SPR-12717?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-02-15T03:32:19Z","2019-01-12T03:29:59Z"
"","17886","Automatic registration of Jackson parameter names module [SPR-13296]","**[Lovro Pandžić](https://jira.spring.io/secure/ViewProfile.jspa?name=lpandzic)** opened **[SPR-13296](https://jira.spring.io/browse/SPR-13296?redirect=false)** and commented  After upgrade to jackson 2.6.0 [jackson parameter names module](https://github.com/FasterXML/jackson-module-parameter-names) can be used in a java 8 environment to construct classes using non default constructors for classes that have parameter names stored. For such classes default constructors can be removed and no annotations are required! I suggest this module be added for JDK 8+ projects.  ---  **Issue Links:** - #17990 Add a section about HttpMessageConverter customization in the reference documentation (_**""is superseded by""**_)  1 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2015-07-30T13:07:58Z","2019-01-11T18:01:56Z"
"","17400","SpEL chooses wrong method to invoke when varargs method is present [SPR-12803]","**[Lior Lipshitz](https://jira.spring.io/secure/ViewProfile.jspa?name=peshitz)** opened **[SPR-12803](https://jira.spring.io/browse/SPR-12803?redirect=false)** and commented  I'm trying to evaluate the following SpEL expression:  T(com.google.common.collect.Lists).newArrayList(#iterable) where #iterable is of type java.lang.Iterable. Google Guava com.google.common.collect.Lists (version 14.0) does have a method newArrayList(Iterable) but for some reason SpEL chooses to invoke a different method: newArrayList(Object[])  The issue seems to be with org.springframework.expression.spel.support.ReflectiveMethodResolver implementation: it seems to be sensitive to the manner in which methods are sorted by the java.lang.Class::getMethods. If 2 methods match the invocation (in the case one of the methods is varargs), the later method (in the order) will be invoked, instead of choosing the method that isn't varargs (which is more specific). It seems like JDK doesn't guarantee the order the methods are sorted: different runs yield different order.  ---  **Affects:** 3.1.1  **Reference URL:** http://stackoverflow.com/questions/28924430/spring-spel-chooses-wrong-method-to-invoke  **Issue Links:** - #17107 SpEL: problem with static methods conflicting with instance methods - #16931 VerifyError when trying to compile constructor invocation with SpEL - #17405 SpEL's ReflectiveMethodResolver should use distance computation by default","closed","in: core,","spring-projects-issues","2015-03-10T22:27:17Z","2019-01-11T22:00:22Z"
"","17417","On CONNECT and external broker is not available, StompBrokerRelayMessageHandler should return ERROR frame [SPR-12820]","**[Leonard Siu](https://jira.spring.io/secure/ViewProfile.jspa?name=lsiu)** opened **[SPR-12820](https://jira.spring.io/browse/SPR-12820?redirect=false)** and commented  According to the Stomp Specification (http://stomp.github.io/stomp-specification-1.1.html#Connecting):  > The server can reject any connection attempt. The server SHOULD respond back with an ERROR frame listing why the connection was rejected and then close the connection.  However, at [line# 402 of StompBrokerRelayMessageHandler class](https://github.com/spring-projects/spring-framework/blob/master/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java#L394) where the code simply log and error, ignores and return:  ``` SimpMessageType messageType = SimpMessageHeaderAccessor.getMessageType(message.getHeaders()); if (logger.isErrorEnabled() && SimpMessageType.CONNECT.equals(messageType)) { 	logger.error(""Broker not active. Ignoring "" + message); } else if (logger.isDebugEnabled()) { 	logger.debug(""Broker not active. Ignoring "" + message); } return; ```    ---  **Affects:** 4.1.5  **Attachments:** - [error message from shutting down activemq.png](https://jira.spring.io/secure/attachment/22717/error+message+from+shutting+down+activemq.png) (_18.34 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4886edd10b4df22ed4e61f24e0c11124b255687b","closed","type: enhancement,","spring-projects-issues","2015-03-15T08:44:14Z","2019-01-14T05:13:13Z"
"","17908","BeanPropertyRowMapper should log if mapRow doesn't find a PropertyDescriptor [SPR-13323]","**[Leonard Meyer](https://jira.spring.io/secure/ViewProfile.jspa?name=lmeyer)** opened **[SPR-13323](https://jira.spring.io/browse/SPR-13323?redirect=false)** and commented  I just spent a bit of time on a rather dumb problem...  I just added a new field to my model and modified my database schema consequently, The thing is, my database column didn't have a proper name to match with the name of my field. I first though it was some problem of entity mapping from my custom BeanPropertyRowMapper but it didn't make any sense because it was all strings. It must have been related to something else, but I had no clue what. I enabled Spring debug logs but found nothing relevant, but after some debugging I did find some columns index were skipped in the mapRow method of BeanPropertyRowMapper. It all happened here :  ```java for (int index = 1; index <= columnCount; index++) {   String column = JdbcUtils.lookupColumnName(rsmd, index);   PropertyDescriptor pd = this.mappedFields.get(column.replaceAll("" "", """").toLowerCase());   if (pd != null) {    [...]   } } ```  Some property descriptor were null because the column name didn't match anything in mappedFields. Anyway, I was just thinking it would've been way quicker to just have something like this in the logs :  ```java if (pd != null) {  [...] } else {  logger.debug(""Column {} did not match any field name for {} "", column, mappedClass.getSimpleName) } ```  Can contribute if necessary.  Thanks  ---  **Affects:** 4.2 GA  **Issue Links:** - #18461 BeanPropertyRowMapper should use ConversionService for date-time support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/35e1eca9e8df62e48c1af6a8971d93b8a1302882  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2015-08-06T03:10:06Z","2019-01-11T18:23:28Z"
"","17974","ScopedProxyMode resolution for custom scope meta-annotation not working with @Bean methods (with ASM-based scanning) [SPR-13394]","**[Leonard Loesche](https://jira.spring.io/secure/ViewProfile.jspa?name=hdloesche)** opened **[SPR-13394](https://jira.spring.io/browse/SPR-13394?redirect=false)** and commented  The Meta-Annotation for `@RefreshScope` (as mentioned in the linked ticket) overwrites the default proxyMode (with ScopedProxyMode.TARGET_CLASS) which is unfortunately only working with an annotation at type level (with proxy mode resolution via `ClassPathBeanDefinitionScanner` and a `ScopeMetadataResolver`) but not for `@Bean` annotated methods, which uses a different approach to resolve the proxyMode. Even setting the proxyMode manually at the custom scope annotation does not help.  There is the 'workaround', not to use the meta annotation but the original `@Scope` with correct proxyMode at the method, but it would be an improvement to have the same behaviour for the custom scope annotation on both sides.  ---  **Affects:** 4.1.6, 4.2 GA  **Reference URL:** https://github.com/spring-cloud/spring-cloud-config/issues/190  **Attachments:** - [scopedbeanissue.zip](https://jira.spring.io/secure/attachment/22998/scopedbeanissue.zip) (_80.10 kB_)  **Issue Links:** - #17870 Support custom base scope annotation type for `@Bean` methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/75187e3a8e355d87a171cf093679e08e9882fc37, https://github.com/spring-projects/spring-framework/commit/3430f7623c242681ef3f1ccec6c48596ce13d4b9  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","in: core,","spring-projects-issues","2015-08-25T07:23:17Z","2019-01-13T05:36:33Z"
"","17574","Automatically register Jackson's JDK 8 module when available [SPR-12983]","**[Leon Radley](https://jira.spring.io/secure/ViewProfile.jspa?name=leon)** opened **[SPR-12983](https://jira.spring.io/browse/SPR-12983?redirect=false)** and commented  If I overwrite SpringBootRepositoryRestMvcConfiguration to enable some extra conf (simplified in the example below) the jsr-310 / jdk8 jackson modules are not being used  ```java @Configuration public class RestConfig extends SpringBootRepositoryRestMvcConfiguration {      @Override     protected void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {         config.setBasePath(""/restapi"");         config.setReturnBodyOnCreate(true);     }  } ```  As soon as I remove the RestConfig class the modules are in use and the dates come out right.  I've created a demo repo. https://github.com/leon/temp-spring-boot-data-rest-jackson-problem  Another strange thing is that the JSR-310 module gets autoregistered, but the JDK8Module doesn't so I need to add it explicitly?!      1. Solution  Can we somehow wait for the jackson auto configuration to complete before creating the rest object mapper, or even better why not use the same object mapper?  ---  **Affects:** 4.1.6  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/2914  **Issue Links:** - #17641 Http message conversion not finding Jackson JDK8 module in context","closed","type: enhancement,","spring-projects-issues","2015-05-05T06:09:43Z","2019-01-11T21:04:08Z"
"","17282","Improve extensibility of TestContext bootstrap and context caching mechanisms [SPR-12683]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-12683](https://jira.spring.io/browse/SPR-12683?redirect=false)** and commented  Currently it's not possible to provide a `TestContext` or `TestContextBootstrapper` instance to `TestContextManager`. This restricts the reusability of it.  I'm currently working on [GRAILS-11963](https://jira.grails.org/browse/GRAILS-11963) (_""Use Spring TestContext Framework for initializing the test context""_) for Grails 3, and we would like to reuse as much as possible from the Spring TCF.  As a fix, there should be a new constructor that allows passing `TestContext` and `TestContextBootstrapper` instances to the `TestContextManager`   - for example:  ```java public TestContextManager(TestContextBootstrapper testContextBootstrapper, TestContext testContext) ```  Something should be done to the `ContextCache contextCache` field, since that is static and has package visibility. The `ContextCache` class isn't a public class either. Perhaps that could be separated from `TestContextManager`?  ---  **Affects:** 4.1 GA  **Issue Links:** - #17281 Make resolveContextLoader() method in AbstractTestContextBootstrapper protected  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5cbe4b948d15fceb98ba2800d7309a632db163d6, https://github.com/spring-projects/spring-framework/commit/9e6a5ae4a748bedba9caca39158d8c16d541fa23, https://github.com/spring-projects/spring-framework/commit/c52a0ccdfdc238e972e720f99e9ff86b6c0e8181, https://github.com/spring-projects/spring-framework/commit/129488cb4fba9592cfa3f0091ef2ecb25881b72a, https://github.com/spring-projects/spring-framework/commit/0392a88c6954bdcd391eea07b513973ebee3ba08, https://github.com/spring-projects/spring-framework/commit/186abcb054303c30620ecf3620be25e7b9cf7e29, https://github.com/spring-projects/spring-framework/commit/c9d597f5191f0bc3be69d689baf38e3095845777, https://github.com/spring-projects/spring-framework/commit/e6c24f71672a14a27179bef15a592cea029177ee  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2015-02-03T07:59:00Z","2019-01-11T18:40:43Z"
"","17281","Make resolveContextLoader() method in AbstractTestContextBootstrapper protected [SPR-12682]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-12682](https://jira.spring.io/browse/SPR-12682?redirect=false)** and commented  I'm working on the Grails Unit test support and since Grails 3 is based on Spring Boot, the integration to Spring is tighter. We'd like to be able to reuse some parts of the Spring Test Context Framework in the Grails ""Unit test runtime"".  The issue in Grails Jira is https://jira.grails.org/browse/GRAILS-11959 .  I've been designing the changes and it seems that we should be using the TestContext Framework's Bootstrap strategy to plug-in the Grails specific features. I'd like to be able to sub-class AbstractTestContextBootstrapper and override the resolveContextLoader method.  ---  **Affects:** 4.1 GA  **Issue Links:** - #17282 Improve extensibility of TestContext bootstrap and context caching mechanisms  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c006b74e910ef20e66fb0f4e7eddd7d97490ffc8","closed","type: enhancement,","spring-projects-issues","2015-02-03T06:57:07Z","2019-01-11T18:40:22Z"
"","17493","ResourceHttpMessageConverter always returns ""application/octet-stream"" Content-Type [SPR-12894]","**[Konstantinos Filios](https://jira.spring.io/secure/ViewProfile.jspa?name=konfilios)** opened **[SPR-12894](https://jira.spring.io/browse/SPR-12894?redirect=false)** and commented  I have the following controller:  ```java @RestController public class TestController {     @RequestMapping(value = ""/image"", method = RequestMethod.GET)     public Resource getImage()     {         return new FileSystemResource(""/path/to/image.png"");     } } ```  I have configured web mvc to only add a `ResourceHttpMessageConverter` so I rule out interference from other converters. I have also made sure JAF is included in the classpath.  When I test the method with an HTTP client (always with `Accept: **/**`), I do get the contents of the image back, but the Content-Type is wrong. It's always `application/octet-stream;charset=UTF-8`  While debugging the code, I noticed that the `ResourceHttpMessageConverter.getDefaultContentType` method **never** gets called.  This seems to happen because in `AbstractMessageConverterMethodProcessor.writeWithMessageConverters`, the following block yields a `selectedMediaType` equal to `MediaType.APPLICATION_OCTET_STREAM`  ```java MediaType selectedMediaType = null; for (MediaType mediaType : mediaTypes) {      if (mediaType.isConcrete()) {           selectedMediaType = mediaType;           break;      }      else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {           selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;           break;      } } ```  This is actually expected if you consider that the only constructor of `ResourceHttpMessageConverter` defines `MediaType.ALL` as the supported media type:  ```java public ResourceHttpMessageConverter() {      super(MediaType.ALL); } ```  Consequently, when `AbstractHttpMessageConverter.write` is called a few instructions later, it reaches the code block below, in which the `if` condition evaluates to `false` since the passed `contentType` equals `MediaType.APPLICATION_OCTET_STREAM`:  ```java if (contentType == null || contentType.isWildcardType() || contentType.isWildcardSubtype()) {      contentTypeToUse = getDefaultContentType(t); } ```  I tried changing the controller method's `@RequestMapping` with a `produces=""image/*""` but obviously nothing changed.   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8ff7cc73bcffca02117aab069017e857b17d59f3","closed","type: enhancement,","spring-projects-issues","2015-04-07T07:16:20Z","2015-05-26T01:15:20Z"
"","17385","CompositePropertySource doesn't fulfil EnumerablePropertySource [SPR-12788]","**[Konrad Garus](https://jira.spring.io/secure/ViewProfile.jspa?name=konrad.garus)** opened **[SPR-12788](https://jira.spring.io/browse/SPR-12788?redirect=false)** and commented  In #16897 `CompositePropertySource` became `EnumerablePropertySource`. It doesn't fully satisfy its contract though and it violates Liskov substitution principle.  For example, Spring Boot assumes that `EnumerablePropertySource.getPropertyNames` contains names of all properties available on the property source. That is not the case with `CompositePropertySource` containing non-enumerable property sources. See also https://github.com/spring-projects/spring-boot/issues/2608  ---  **Affects:** 4.1.5  **Issue Links:** - #16897 CompositePropertySource should extend EnumerablePropertySource  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7e8ffc7bf56dcc9d7fcc3992589b126b0eecf22f","closed","type: bug,","spring-projects-issues","2015-03-05T07:43:51Z","2019-01-11T21:24:48Z"
"","17484","Improve docs on concurrent sending with direct use of WebSocket API [SPR-12886]","**[knockout user](https://jira.spring.io/secure/ViewProfile.jspa?name=knockoutuser)** opened **[SPR-12886](https://jira.spring.io/browse/SPR-12886?redirect=false)** and commented  Inside the websocket package there is the ConcurrentWebSocketSessionDecorator class. I'm thinking of using this because I have multiple components writing to the same websocket and want to remove the external locking I now have in place.  But I can't find any example of the way to use this class. I'm thinking something like this should do it:  ``` public class MyWebsocketHandler extends TextWebSocketHandler { @Override protected void handleTextMessage(WebSocketSession websocketSession, TextMessage message) throws Exception {     ConcurrentWebSocketSessionDecorator concurrentWebsocketSession = new ConcurrentWebSocketSessionDecorator(websocketSession, sendTimeLimit, bufferSizeLimit); .... ```  ... then have the concurrentWebsocketSession sent downstream to all components who need it.  Is this all there is to it? Could the documentation be updated to at least mention this (very useful) class?   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/14e87d27334f90141f10733b57de810f08c6a6ac","closed","in: web,","spring-projects-issues","2015-04-03T09:28:41Z","2019-01-09T13:06:52Z"
"","17812","JaxbMarshaller scan should skip annotated interfaces [SPR-13221]","**[Kiril Nugmanov](https://jira.spring.io/secure/ViewProfile.jspa?name=cyniclt)** opened **[SPR-13221](https://jira.spring.io/browse/SPR-13221?redirect=false)** and commented  Spring JAXB marshaller (`org.springframework.oxm.jaxb.Jaxb2Marshaller`)  incorrectly scans packages with JAXB annotations.  Problems is when package is being scanned used `org.springframework.oxm.jaxb.ClassPathJaxb2TypeScanner` which checks if class has following annotations: * XmlRootElement * XmlType * XmlSeeAlso * XmlEnum * XmlRegistry  So if you generating client from WSDL - webservice interface will have an anotation `XmlSeeAlso.`  Whis annotatio leads to the error  ```java org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'marshaller' defined in class path resource [application.xml]: Invocation of init method failed; nested exception is org.springframework.oxm.UncategorizedMappingException: Unknown JAXB exception; nested exception is com.sun.xml.internal.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions org.cynic.test.client.Service is an interface, and JAXB can't handle interfaces. 	this problem is related to the following location: 		at org.cynic.test.client.Service ```  ```xml                        ```  The only dirty fix is to downgrade JAXB binding version from 2.1 to 2.0 For more details why this annotation is being generated on interfaces see this [post](http://stackoverflow.com/questions/7092390/omitting-xmlseealso-from-xjc-output)  Solution  should be following: `org.springframework.oxm.jaxb.ClassPathJaxb2TypeScanner` must ignore annotated interfaces (even if there is default implementation for Java 8)  I can create pull request (after discussion).   ---  **Affects:** 4.1.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/18c46713185744c477814959f1043d918300a0d8","closed","type: enhancement,","spring-projects-issues","2015-07-11T10:06:58Z","2015-07-15T09:05:10Z"
"","17398","Support for named parameters in SimpleJdbcCall [SPR-12801]","**[Kiril Nugmanov](https://jira.spring.io/secure/ViewProfile.jspa?name=cyniclt)** opened **[SPR-12801](https://jira.spring.io/browse/SPR-12801?redirect=false)** and commented  org.springframework.jdbc.core.simple.AbstractJdbcCall uses org.springframework.jdbc.core.metadata.CallMetaDataContext to generate JDBC statement.  In case of Oracle PL/SQL org.springframework.jdbc.core.metadata.CallMetaDataContext.createCallString can be changed to support default values by implementing following changes in constructing JDBC statement from:  ``` {call some_package.some_procedure(?,?,?)} ```  to  ``` {call some_package.some_procedure(p_parameter_1 => ?, p_parameter_2 => ?, p_parameter_3 =>?)} ```  Change can be implemented in 2 ways: * modify org.springframework.jdbc.core.metadata.CallMetaDataContext in case if DB is Oracle * introduce setter for callMetaDataContext  in org.springframework.jdbc.core.simple.AbstractJdbcCall then users can introduce it's own modification of org.springframework.jdbc.core.metadata.CallMetaDataContext  Related to #9084, #8193  ---  **Affects:** 4.1.5  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/763  **Issue Links:** - #8193 StoredProcedure enhancement to allow parameters to be optional - #9084 Support named parameters in CallableStatementCreator implementation  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2015-03-10T11:48:06Z","2019-01-11T22:00:17Z"
"","17489","After Returning Advice called on a method returning void [SPR-12891]","**[Khaled Yousfi](https://jira.spring.io/secure/ViewProfile.jspa?name=yk)** opened **[SPR-12891](https://jira.spring.io/browse/SPR-12891?redirect=false)** and commented  After return advice is called on a method returning void.  In the following example, I commented out throwing the IllegalArgumentException in the printThrowException method to see what happens but I discovered that the after-returning advice is called and a NPE was raised.  Spring AOP XML config:  ---            ---  Java class:  ---  public class Student { public void printThrowException() { System.out.println(""Exception raised""); //throw new IllegalArgumentException(); } }  ---  ---  **Affects:** 4.2 RC1","closed","status: bulk-closed,","spring-projects-issues","2015-04-06T08:21:18Z","2019-01-13T20:56:51Z"
"","17987","Add ListenableScheduledFuture support to TaskScheduler [SPR-13407]","**[Kevin Conaway](https://jira.spring.io/secure/ViewProfile.jspa?name=kevinconaway)** opened **[SPR-13407](https://jira.spring.io/browse/SPR-13407?redirect=false)** and commented  [Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) what are your thoughts on adding listenable support for the _TaskScheduler_ interface?  I'm envisioning an _AsyncListenableTaskScheduler_ interface that has _scheduleListenableXXX_ methods that mirror those in _TaskScheduler_ (similar to _AsyncListenableTaskExecutor -> TaskExecutor_)  The use case here is to register callbacks that fire for every execution of the scheduled task.  I'm happy to submit a PR for this if you think it would be worthwhile.  I have written an implementation for for _ListenableScheduledFuture scheduleListenable(Runnable task, Trigger trigger);_ that we're using here but I would like to get a full featured version in to core if possible  ---  **Affects:** 4.2 GA  **Issue Links:** - #19475 Allow ReschedulingRunnable to receive a TriggerContext on creation","open","type: enhancement,","spring-projects-issues","2015-08-30T02:38:38Z","2019-01-11T17:12:10Z"
"","17944","Async dispatches happen in the wrong state [SPR-13360]","**[Kenzie Togami](https://jira.spring.io/secure/ViewProfile.jspa?name=kenzierocks)** opened **[SPR-13360](https://jira.spring.io/browse/SPR-13360?redirect=false)** and commented  [This line](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java#L337) causes WebAsyncManager to incorrectly cause an async dispatch after the connection has closed during async processing.   ---  **Affects:** 4.2 GA","closed","in: web,","spring-projects-issues","2015-08-17T17:36:01Z","2019-01-11T18:19:27Z"
"","17931","Unable to send just comments with SseEventBuilder [SPR-13347]","**[Kenzie Togami](https://jira.spring.io/secure/ViewProfile.jspa?name=kenzierocks)** opened **[SPR-13347](https://jira.spring.io/browse/SPR-13347?redirect=false)** and commented  If a `SseEventBuilder` only contains comments, it will still send an empty event to ""hold"" the comment. I expected it to only send the comments so that there are not spurious events.   ---  **Affects:** 4.2 GA","closed","status: declined,","spring-projects-issues","2015-08-12T14:43:57Z","2019-01-12T16:23:02Z"
"","17925","ResponseBodyEmitter doesn't get headers written immediately [SPR-13341]","**[Kenzie Togami](https://jira.spring.io/secure/ViewProfile.jspa?name=kenzierocks)** opened **[SPR-13341](https://jira.spring.io/browse/SPR-13341?redirect=false)** and commented  When returning a `ReponseBodyEmitter` from a controller method, the headers for the connection are not written to the stream until something is emitted. If nothing is emitted, clients timeout and think the server is unavalible.   ---  **Affects:** 4.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f5210ce0c82b8baa82f3a82326f0bf239a6044f9","closed","type: bug,","spring-projects-issues","2015-08-11T15:56:34Z","2015-09-01T11:38:23Z"
"","17807","BeanPropertyRowMapper should always call toLowerCase with US encoding [SPR-13216]","**[Kenan Sevindik](https://jira.spring.io/secure/ViewProfile.jspa?name=ksevindik)** opened **[SPR-13216](https://jira.spring.io/browse/SPR-13216?redirect=false)** and commented  When the JVM's default locale is Turkish BeanPropertyRowMapper and deprecated ParameterizedBeanPropertyRowMapper as well, try to initialize themselves by obtaining PropertyDescriptors from given mappedClass, and then process given resultset within mapRow() method by trying to match database column names against identified mapped Fields. However, PropertyDescriptor name and database column name lowercase conversions with toLowerCase() method cause problems when JVM default locale is Turkish. For example, a field such as item is expected to match with ITEM database column. However, due to column.replaceAll("" "", """").toLowerCase() call in mapRow() method column ITEM is converted into ""ıtem"" (i without dotted) and it won't match with ""item"" field. Similarly, ""myItem"" property is converted into ""myıtem"" within initialize() method, and it won't match against a database column name like ""my_item"" which is already lowercase.  Obvious solution for such Turkish character problems is to call toLowerCase() with Locale.US encoding.  ---  **Affects:** 4.1.7  **Issue Links:** - #21476 The BeanPropertyRowMapper does not work for field names ending with ""numbers"" which worked for 3.1 - #18461 BeanPropertyRowMapper should use ConversionService for date-time support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/41b58584eaa26f0ed028f2e533237154f012659d","closed","type: enhancement,","spring-projects-issues","2015-07-10T01:29:11Z","2019-01-11T18:07:09Z"
"","17436","ConcurrentModificationException in ConfigurationClassParser.processDeferredImportSelectors [SPR-12838]","**[Ken Schultz](https://jira.spring.io/secure/ViewProfile.jspa?name=schultzy51)** opened **[SPR-12838](https://jira.spring.io/browse/SPR-12838?redirect=false)** and commented  Original Exception  ``` Exception in thread ""main"" java.util.ConcurrentModificationException at java.util.LinkedList$ListItr.checkForComodification(LinkedList.java:953) at java.util.LinkedList$ListItr.next(LinkedList.java:886) at org.springframework.context.annotation.ConfigurationClassParser.processDeferredImportSelectors(ConfigurationClassParser.java:420) at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:180) at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:306) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:239) at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254) at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:462) at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:686) at org.springframework.boot.SpringApplication.run(SpringApplication.java:320) at org.springframework.boot.SpringApplication.run(SpringApplication.java:957) at org.springframework.boot.SpringApplication.run(SpringApplication.java:946) at com.grubhub.main.Application.main(Application.java:16) ```  Reproduced Exception  ``` java.util.ConcurrentModificationException java.util.ConcurrentModificationException: null         at java.util.LinkedList$ListItr.checkForComodification(LinkedList.java:966)         at java.util.LinkedList$ListItr.checkForComodification(LinkedLisat java.util.LinkedList$ListItr.next(LinkedList.java:888) a:966)         at org.springframework.context.annotation.ConfigurationClassParser.processDeferredImportSelectors(ConfigurationClassParser.java:420)         at java.util.LinkedList$ListItr.next(LinkedList.java:888)         at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:180)         at org.springframework.context.annotation.ConfigurationClassParser.processDeferredImportSelectors(ConfigurationClassParser.java:420)         at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:306)         at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:180)         at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:239)         at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:306)         at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254)         at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:239)         at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94)         at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254)         at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606)         at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:462)         at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606)         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:462)         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:686)         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:686)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:957)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:946)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:957)         at com.kschultz.linkedlist.Application.main(Application.java:11)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:946)         at com.kschultz.linkedlist.Application.main(Application.java:11) ```  This looked very similiar to #16613  More details and an example can be found here: https://github.com/schultzy51/spring-boot-linked-list  ---  **Affects:** 4.1.5  **Reference URL:** https://github.com/schultzy51/spring-boot-linked-list  **Issue Links:** - #16613 ConcurrentModificationException in ConfigurationClassParser.processDeferredImportSelectors  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/34aac078b18b3af8990cfc53f99a476269eea87e, https://github.com/spring-projects/spring-framework/commit/1a8c6fa5ee9e70ed880cd2e9afefc4fe38283f1e","closed","in: core,","spring-projects-issues","2015-03-20T15:08:40Z","2019-01-14T05:13:08Z"
"","17438","HttpSessionHandshakeInterceptor's getSession(request) [SPR-12840]","**[Keesun Baik](https://jira.spring.io/secure/ViewProfile.jspa?name=keesun)** opened **[SPR-12840](https://jira.spring.io/browse/SPR-12840?redirect=false)** and commented  On the [websocket document](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html#websocket-server-handshake), it describes about **HttpSessionHandshakeInterceptor** and I've used it but I didn't get the session's id for the request. So, I've debugged it for a while and I got the reason why I didn't get it.  ``` private HttpSession getSession(ServerHttpRequest request) { 	if (request instanceof ServletServerHttpRequest) { 		ServletServerHttpRequest serverRequest = (ServletServerHttpRequest) request; 		return serverRequest.getServletRequest().getSession(false); 	} 	return null; } ```  As you can see, the **getSession(false)** is used to get the HttpSession from ServletServerHttpRequest, and (as you may know) it returns session object or null if there's no current session. That's why I can't see the session id when I tried to connect websocket without using getSession() before.  like below:  ``` @RequestMapping(""/"") public String lounge() {     return ""/lounge/index.html""; } ```  I didn't use getSession() explicitly or implicitly. The controller is just serving a static HTML file like this:  ```             lounge   Hi there,      Entrance       ```  In this case, **HttpSessionHandshakeInterceptor** can't provide the session id, even though I config like this.  ``` @Override public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {     registry.addHandler(echoHandler(), ""/echo"")             .addInterceptors(new HttpSessionHandshakeInterceptor())             .withSockJS(); } ```  It was a little bit long to describe, I just create this issue to know why you made decision to use **getSession(false)** and I want to suggest how about using **getSession()** or providing an option that the developers can use it for a flag to decide to use getSession(true) or getSession(false).  And, If you agree with me and If you don't mind, I want to contribute with this issue using pull-request on the Github.  Thanks for reading.   ---  **Affects:** 4.1.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/73d6d30951cb145bbd6b2e2fcdc0388019b15ae9","closed","type: enhancement,","spring-projects-issues","2015-03-20T21:52:20Z","2019-01-14T05:13:06Z"
"","18005","Support for using  without target object [SPR-13426]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13426](https://jira.spring.io/browse/SPR-13426?redirect=false)** and commented  Currently, ``  tag is required to specify a target object using `modelAttribute` attribute of `` tag. (`IllegalStateException` occurred as follows.)  ``` java.lang.IllegalStateException: Neither BindingResult nor plain target object for bean name 'command' available as request attribute ```  I want to use `` tag without specifying target object as follows:  ```xml       Delete  ```  I think that `BindStatus` is not necessary to occur a exception when it does not access to the property of target object.  I submit a PR at the later.   ---  **Affects:** 4.2.1  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/869","closed","type: enhancement,","spring-projects-issues","2015-09-03T18:20:21Z","2016-03-10T15:53:02Z"
"","17997","Request parameters cannot bind to Optional> [SPR-13418]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13418](https://jira.spring.io/browse/SPR-13418?redirect=false)** and commented  Request parameter cannot bind to `Optional>` at the `@RequestMapping` method.  I define the following method as handler method(`@RequestMapping` method).  ```java @RequestMapping(path=""search"") public String search(@RequestParam(defaultValue=""word1,word2,word3"") Optional> words, Model model) {     List searchWords = words.get();     System.out.println(searchWords);     //... } ```  I submit a request to `http://localhost:8080/myApp/search?words=aaa&words=bbb`. In this case, i was expected a printing as follow:  ```console [aaa, bbb] ```  But actually, printed as follow:  ```console [aaa] ```  In this case, request parameters can be bind to first element only.  In addition, i submit a request to `http://localhost:8080/myApp/search`. (without request parameters) In this case, printed as follow:  ```console [word1, word2, word3] ```  In this case,default value converted by conversion service was applied.  This behavior is bug or specification ?  I will submit a repro project at the later.  ---  **Affects:** 4.2.1  **Issue Links:** - #16448 Support for java.util.Optional as a `@RequestParam` - #18423 RequestPartMethodArgumentResolver should defensively handle MethodParameter nesting level and java.util.Optional access - #20235 Request params Optional and List are inconsistent - #18422 MultipartFile argument requires multipart request even when optional (and empty)  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-09-01T17:55:48Z","2019-01-13T05:36:24Z"
"","17986","Support MessageSourceResolvable to string argument value at SpringValidatorAdapter [SPR-13406]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13406](https://jira.spring.io/browse/SPR-13406?redirect=false)** and commented  I want to support the `MessageSourceResolvable` to string argument value(attribute value of Bean Validation constraint annotation).  For example,i want to apply the `MessageSourceResolvable` at the following case.  ```java @Documented @Constraint(validatedBy = {SameValidator.class}) @Target({TYPE, ANNOTATION_TYPE}) @Retention(RUNTIME) public @interface Same { 	String message() default ""{org.springframework.validation.beanvalidation.Same.message}""; 	Class[] groups() default {}; 	Class[] payload() default {};  	String field();  // ### specify a field name of target bean 	String comparingField(); // ### specify a comparing field name of target bean } ```  ```java public class SameValidator implements ConstraintValidator { 	private String field; 	private String comparingField; 	private String message;  	public void initialize(Same constraintAnnotation) { 		field = constraintAnnotation.field(); 		comparingField = constraintAnnotation.comparingField(); 		message = constraintAnnotation.message(); 	}  	public boolean isValid(Object value, ConstraintValidatorContext context) { 		BeanWrapper beanWrapper = new BeanWrapperImpl(value); 		Object fieldValue = beanWrapper.getPropertyValue(field); 		Object comparingFieldValue = beanWrapper.getPropertyValue(comparingField); 		boolean matched = ObjectUtils.nullSafeEquals(fieldValue, 				comparingFieldValue); 		if (matched) { 			return true; 		} else { 			context.disableDefaultConstraintViolation(); 			context.buildConstraintViolationWithTemplate(message) 					.addNode(field) 					.addConstraintViolation(); 			return false; 		} 	} } ```  ```java @Same(field = ""password"", comparingField = ""confirmPassword"") public class TestBean {  	@Size(min = 8, max = 128) 	private String password; 	private String confirmPassword;          // omit other fields & setter/getter } ```  ```properties Same={2} must be same value with {1} password=Password confirmPassword=Password(Confirm) ```  Currently, If different values are input with password and confirmPassword, message is `""password must be same value with confirmPassword""`. Placeholder({n}) replace to physical field name. If apply the `MessageSourceResolvable`, message is `""Password must be same value with Password(Confirm)""`. I wan to replace to logical field name !!  How do think? I submit PR at the later.  ---  **Affects:** 4.2 GA  **Issue Links:** - #19344 SpringValidatorAdapter's ResolvableAttribute is not serializable - #19690 Incorrect resolution of ResolvableAttributes when MessageSourceSupport#alwaysUseMessageFormat is true  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/867, and commits https://github.com/spring-projects/spring-framework/commit/51c35bf81c50142bb94497a7cddfb3042e9fad4b","closed","type: enhancement,","spring-projects-issues","2015-08-29T20:07:33Z","2019-01-13T20:49:32Z"
"","17982","Prevent binding for @ModelAttribute [SPR-13402]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13402](https://jira.spring.io/browse/SPR-13402?redirect=false)** and commented  Add new attribute(`preventBinding`) to prevents binding for request parameter at `@ModelAttribute`. I want to obtained an read only object (Entity that was fetched from the database, etc) from the `Model` without binding request values for security countermeasure.  e.g.)  ```java @Controller @RequestMapping(""account/{accountId}"") @SessionAttributes(types = {AccountUpdateForm.class, Account.class}) public class AccountUpdateController {      @ModelAttribute public AccountUpdateForm setUpAccountUpdateForm() { return new AccountUpdateForm(); }      @ModelAttribute public Account findAccount(@PathVariable String accountId) { return accountRepository.findOne(accountId); }     // ...     @RequestMapping(path = ""update"", method = RequestMethod.POST)     public String update(             @PathVariable String accountId,             @Valid AccountUpdateForm form,             BindingResult result,             // ### new attribute of @ModelAttribute ###             @ModelAttribute(preventBinding = true) Account account,             RedirectAttributes redirectAttributes) {         // ...         return ""/account/{accountId}/update?complete"";     }      @RequestMapping(path = ""update"", method = RequestMethod.GET, params = ""complete"")     public String updateComplete(SessionStatus sessionStatus){         sessionStatus.setComplete();         return ""account/complete"";     }  } ```  How do think? I submit PR at later.  ---  **Affects:** 4.2 GA  **Issue Links:** - #20632 `@ModelAttribute` binding defined globally for particular attribute rather than per method invocation - #19832 Introduce `@FromModel` as substitute to `@ModelAttribute`(binding=false) - #18269 Portlet MVC `@ModelAttribute` interdependency is still not supported  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/866, and commits https://github.com/spring-projects/spring-framework/commit/2e7470b27f0eaae042334cd86f212cd958676be0","closed","type: enhancement,","spring-projects-issues","2015-08-27T21:40:04Z","2019-01-13T05:36:30Z"
"","17961","Cannot set a Content-Type using ScriptTemplateView [SPR-13379]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13379](https://jira.spring.io/browse/SPR-13379?redirect=false)** and commented  If `ScriptTemplateView` is used as `View`, response data display as plain text in Web Browser because it cannot set a Content-Type header(such as `""text/html""`).  I tried it using following implementations and configuration.  ```java @Controller @RequestMapping(""script-template"") public class ScriptTemplateController {      private static final Logger logger = LoggerFactory             .getLogger(ScriptTemplateController.class);      @RequestMapping(method = RequestMethod.GET)     public String home(Locale locale, Model model,HttpServletResponse response) {         logger.info(""Welcome home! The client locale is {}."", locale);          DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG,                 DateFormat.LONG, locale);          model.addAttribute(""title"", ""Sample title"")                 .addAttribute(""body"", ""Sample body"")                 .addAttribute(""serverTime"", dateFormat.format(new Date()));          return ""script-template/home"";     }  } ```  ```html       `title`   `body`  The time on the server is `serverTime`.   ```  ```xml                ```  I access to `""http://localhost:8080/script-template/""`. However response data does not render as HTML. it render as plain text.  ```html       Sample title   Sample body  The time on the server is August 23, 2015 4:58:33 AM JST.   ```  I expect to display as follows in Web Browser.  ``` Sample body  The time on the server is August 23, 2015 5:20:12 AM JST. ```  I tried following other solution. However, it cannot resolved.  ```xml                     ```  The `contentType` property is not used  in `ScriptTemplateView`.  I think it should be fix as can be specify a content-type. How do think ?   ---  **Affects:** 4.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/04cff89eb700e82765615ff47b78aa47a9daf3fa","closed","type: bug,","spring-projects-issues","2015-08-22T13:44:58Z","2015-09-01T11:38:22Z"
"","17943","CGLIB error occurred via MvcUriComponentsBuilder when handler method's return type is final [SPR-13359]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13359](https://jira.spring.io/browse/SPR-13359?redirect=false)** and commented  When handler method's return type is final, CGLIB error is occurred at the time of calling method of controller instance which generates via `MvcUriComponentsBuilder#on`.  As follows:  ```java @RequestMapping(""messages"") public class MessageRestController {      @RequestMapping(""{id}"")     public String getMessage(@PathVariable(""id"") String id) {         return ""dummy message by "" + id;     }      @RequestMapping(""{id}"")     public ResponseEntity getMessageWithEntity(@PathVariable(""id"") String id) {         return ResponseEntity.ok(""dummy message by "" + id);     }  } ```  ```java private UriComponentsBuilder baseUri = UriComponentsBuilder.fromHttpUrl(""http://example.com"");   /**  * NG Pattern.  */ @Test public void testReturnString() {      MessageRestController controller = on(MessageRestController.class);     controller.getMessage(""MSG0001"");     URI uri = MvcUriComponentsBuilder.relativeTo(baseUri).withMethodCall(controller).build().toUri();      assertThat(uri, is(URI.create(""http://example.com/messages/MSG0001""))); }   /**  * OK Pattern.  */ @Test public void testReturnStringWithEntity() {      MessageRestController controller = on(MessageRestController.class);     controller.getMessageWithEntity(""MSG0001"");     URI uri = MvcUriComponentsBuilder.relativeTo(baseUri).withMethodCall(controller).build().toUri();      assertThat(uri, is(URI.create(""http://example.com/messages/MSG0001""))); } ```  Error of NG pattern is as follow:  ```console java.lang.IllegalArgumentException: Cannot subclass final class class java.lang.String 	at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:446) 	at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25) 	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:216) 	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:377) 	at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:317) 	at org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.initProxy(MvcUriComponentsBuilder.java:615) 	at org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.access$000(MvcUriComponentsBuilder.java:89) 	at org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder$ControllerMethodInvocationInterceptor.intercept(MvcUriComponentsBuilder.java:724) 	at org.springframework.issues.ReproTests$MessageRestController$$EnhancerBySpringCGLIB$$d08e95b6.getMessage() 	at org.springframework.issues.ReproTests.testReturnString(ReproTests.java:33) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:160) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140) ```    ---  **Affects:** 4.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/ae772b5ac66fefe658005d7d70352dc6d2b7866c, https://github.com/spring-projects/spring-framework-issues/commit/1572a8e0304656398a322979a271e4c8a6373082","closed","status: declined,","spring-projects-issues","2015-08-17T11:55:35Z","2019-01-12T16:23:01Z"
"","17934","Default value of CommonsPool2TargetSource#maxWait is incorrect [SPR-13350]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13350](https://jira.spring.io/browse/SPR-13350?redirect=false)** and commented  Current implementation is as follow:  ```java private long maxWait = GenericObjectPoolConfig.DEFAULT_MAX_TOTAL; ```  It should be modified as follow:  ```java private long maxWait = GenericObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS; ```    ---  **Affects:** 4.2 GA  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/856, and commits https://github.com/spring-projects/spring-framework/commit/bad57f752a5eb65ac7516659849f7277891d3c21, https://github.com/spring-projects/spring-framework/commit/9524f9640598bc1c621ef42d8fe46702cd6c32db","closed","in: core,","spring-projects-issues","2015-08-14T07:04:08Z","2015-09-01T11:38:23Z"
"","17715","@SendTo does not get converter applied when returning Message [SPR-13124]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13124](https://jira.spring.io/browse/SPR-13124?redirect=false)** and commented  When return a Message\ on `@JmsListener`'s method, a specified `MessageConverter` has not been applied.  **The following method is not work.**  ```java @JmsListener(destination = ""TodoQueue"") @SendTo(""ReplyTodoQueue"") public Message receive(Message message)  {     Object xTrack = message.getHeaders().get(""X-Track"");     Todo todo = message.getPayload();     todo.setTodoId(UUID.randomUUID().toString());     return MessageBuilder             .withPayload(todo)             .setHeader(""X-Track"", xTrack)             .build(); } ```  **The following method is work.**  ```java @JmsListener(destination = ""TodoQueue"") @SendTo(""ReplyTodoQueue"") public Todo receive(Message message)  {     Todo todo = message.getPayload();     todo.setTodoId(UUID.randomUUID().toString());     return todo; } ```  ---  **Affects:** 4.1.6  **Issue Links:** - #17511 Allow for marshalling the messaging Message payload with an user defined marshaller  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/1344959a2579a01c1138b91fbdc15c53a540ca00, https://github.com/spring-projects/spring-framework-issues/commit/51bdab0ec8d566241bc123572292f9ca7359ee04","closed","type: enhancement,","spring-projects-issues","2015-06-14T11:35:45Z","2019-01-11T16:24:49Z"
"","17694","A wrong description of CGLIB proxying in reference document ? [SPR-13103]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13103](https://jira.spring.io/browse/SPR-13103?redirect=false)** and commented  Probably, a description of CGLIB proxying is wrong in the ""9.6 Proxying mechanisms"".  A wrong description is follows:  > The constructor of your proxied object will be called twice. This is a natural consequence of the CGLIB proxy model whereby a subclass is generated for each proxied object. For each proxied instance, two objects are created: the actual proxied object and an instance of the subclass that implements the advice. This behavior is not exhibited when using JDK proxies. Usually, calling the constructor of the proxied type twice, is not an issue, as there are usually only assignments taking place and no real logic is implemented in the constructor.  The constructor of proxied object will be not called twice on the Spring 4(i tried using  4.1.6.RELEASE).    ---  **Affects:** 4.1.6","closed","type: documentation,","spring-projects-issues","2015-06-07T09:24:35Z","2015-06-30T10:41:37Z"
"","17693","When use a @args as pointcut, there is case that occur a NPE at calling the unrelated method [SPR-13102]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13102](https://jira.spring.io/browse/SPR-13102?redirect=false)** and commented  I used a `@args` as PCD(Point Cut Designator), there is case that occur a NPE at calling the unrelated method.  if all of following cases are matched, NPE are occurs.  * A pointcut define using a `@args`. * Define a both with java method that applying AOP and java method that not applying AOP. * Call a java method that not applying AOP with specifying a null parameter.  ```  java.lang.NullPointerException 	at org.aspectj.weaver.reflect.ShadowMatchImpl$RuntimeTestEvaluator.visit(ShadowMatchImpl.java:195) 	at org.aspectj.weaver.ast.HasAnnotation.accept(HasAnnotation.java:31) 	at org.aspectj.weaver.reflect.ShadowMatchImpl$RuntimeTestEvaluator.matches(ShadowMatchImpl.java:132) 	at org.aspectj.weaver.reflect.ShadowMatchImpl.matchesJoinPoint(ShadowMatchImpl.java:87) 	at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:333) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:167) 	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) 	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:653) 	at org.springframework.issues.SampleService$$EnhancerBySpringCGLIB$$832f92bb.execute() 	at org.springframework.issues.ReproTests.executeWithNull(ReproTests.java:32) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:160) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140) ```  For example:  **Target Class**  ```java public class SampleService {      /**      * Not matched method on {@link LoggingAspect}.      */     public void execute(SampleInputBean inputBean) {         System.out.println(getClass().getName() + ""#execute(SampleInputBean) called."");     }      /**      * Matched method on {@link LoggingAspect}      *       * The SampleDto class have a {@link Loggable} annotation.      */     public void execute(SampleDto dto) {         System.out.println(getClass().getName() + ""#execute(SampleDto) called."");     }  } ```  **Aspect**  ```java @Aspect public class LoggingAspect {      @Before(""@args(org.springframework.issues.Loggable))"")     public void loggingBeginByAtArgs() {         System.out.println(""★★★start by @args★★★★"");     }  } ```  **JavaBean(TDO)**  ```java @Loggable public class SampleDto { } ```  ```java public class SampleInputBean { } ```  **Test Case**  ```java @Test public void test() {     ConfigurableApplicationContext ctx = new ClassPathXmlApplicationContext(""org/springframework/issues/ReproTests-context.xml"");     ctx.registerShutdownHook();      SampleService sampleService = ctx.getBean(""sampleService"", SampleService.class);     sampleService.execute(new SampleDto()); // -> OK     sampleService.execute(new SampleInputBean()); // -> OK     sampleService.execute((SampleDto)null); // -> OK     sampleService.execute((SampleInputBean)null); // -> NPE  } ```  ---  **Affects:** 3.2.13, 4.1.6  **Issue Links:** - #13973 Unsafe fallback pointcut construction in AspectJExpressionPointcut - #19586 Pointcut evaluation fails against AbstractHandlerMethodMapping$MappingRegistry with AspectJ 1.8.10  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","in: core,","spring-projects-issues","2015-06-07T01:58:29Z","2019-01-11T16:26:28Z"
"","17633","Add description of Closeable and AutoCloseable in reference document [SPR-13041]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13041](https://jira.spring.io/browse/SPR-13041?redirect=false)** and commented  Currently, in ""5.6.1 Lifecycle callbacks"" of reference document, does not describe a destruction behavior for the `Closeable` or `AutoCloseable` interface.  If possible, i hope adding a description of a bean that implemented the `Closeable` or `AutoCloseable`.  ---  **Affects:** 4.1.6  **Issue Links:** - #17613 Destroy callback cannot be disabled for AutoCloseable beans  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c111ea89cf767ca83835f3cc1302c220343b0a35","closed","type: documentation,","spring-projects-issues","2015-05-18T05:34:05Z","2019-01-11T16:01:09Z"
"","17630","Add xsd description for default handling of autowire and lazy-init attributes [SPR-13038]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13038](https://jira.spring.io/browse/SPR-13038?redirect=false)** and commented  Currently, description for the `default` mode of autowiring does not exist in reference document and xsd file.  The reference document say ""The autowiring functionality has **five** modes. "". But in ""Table 5.2. Autowiring"", it describe about **four** modes. In other words, a description for the `default` mode does not describe. In the `spring-beans.xsd`, there is as similar description.  If possible , i hope adding a description of `default` mode in reference document and xsd file.  Thanks.   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e6f99ffe37ec63309dd1117cc221933b79ccdbdc","closed","in: core,","spring-projects-issues","2015-05-17T07:49:38Z","2015-05-26T01:15:08Z"
"","17616","Add description of PriorityOrdered in reference document [SPR-13025]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13025](https://jira.spring.io/browse/SPR-13025?redirect=false)** and commented  Currently, description of the `PriorityOrdered` interface has not written in `BeanFactoryPostProcessor` and `BeanPostProcessor` sections.  The `PriorityOrdered` has been used to control the processing order. Therefor, i think a better that append description of the `PriorityOrdered` interface in ""5.8 Container Extension Points"".  How do think ?   ---  **Affects:** 4.1.6","closed","status: declined,","spring-projects-issues","2015-05-13T08:56:36Z","2015-07-07T09:44:03Z"
"","17592","Improve description of shutting down the IoC container in reference document [SPR-13000]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13000](https://jira.spring.io/browse/SPR-13000?redirect=false)** and commented  In the ""Shutting down the Spring IoC container gracefully in non-web applications"" of ""5.6.1 Lifecycle callbacks"", I think it's appropriate to use the `ConfigurableApplicationContext` interface instead of the `AbstractApplicationContext` class.   ---  **Affects:** 3.2.13, 4.1.6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/796","closed","type: documentation,","spring-projects-issues","2015-05-08T18:16:50Z","2015-05-26T01:14:36Z"
"","17586","Sample code of ""Jackson JSON Views support"" is wrong ? [SPR-12994]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12994](https://jira.spring.io/browse/SPR-12994?redirect=false)** and commented  In ""Jackson JSON Views support"" of ""22.10.1 RestTemplate"", sample code is wrong ?  * `JacksonSerializationValue` -> `MappingJacksonValue` ?  Currently:  ```java JacksonSerializationValue jsv = new JacksonSerializationValue(new User(""eric"", ""7!jd#h23""),     User.WithoutPasswordView.class); HttpEntity entity = new HttpEntity(jsv); String s = template.postForObject(""http://example.com/user"", entity, String.class); ```  Modification candidate :  ```java MappingJacksonValue mjv = new MappingJacksonValue(new User(""eric"", ""7!jd#h23"")); mjv.setSerializationView(User.WithoutPasswordView.class); HttpEntity entity = new HttpEntity(mjv); String s = template.postForObject(""http://example.com/user"", entity, String.class); ```  How do think ?   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/581cf3a0a5624c6d0b12d7516d15fe98cb698cc6, https://github.com/spring-projects/spring-framework/commit/2b2186781b71de6319a517a57a7d4f48ef065edf","closed","type: documentation,","spring-projects-issues","2015-05-06T04:56:39Z","2015-05-26T01:15:24Z"
"","17585","Modify typo in the reference document [SPR-12993]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12993](https://jira.spring.io/browse/SPR-12993?redirect=false)** and commented  In the ""22.5.1 Exposing servlet-based web services using JAX-WS"", typo is exist.  As follows:  > Our AccountServletEndpoint needs to run in the same web application ...(omit)  Probably, `AccountServiceEndpoint` is correct instead of  `AccountServletEndpoint`.   ---  **Affects:** 3.2.13, 4.1.6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/793, and commits https://github.com/spring-projects/spring-framework/commit/6aef452e59b68bb5933b6b9cba2f5664369c1aeb, https://github.com/spring-projects/spring-framework/commit/702fb08dd560314354226333d32adc3e6cb290c1","closed","type: documentation,","spring-projects-issues","2015-05-06T03:28:56Z","2015-05-26T01:15:02Z"
"","17584","Remove the RemoteAccountService(sample code for JAX-RPC) from the reference document [SPR-12992]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12992](https://jira.spring.io/browse/SPR-12992?redirect=false)** and commented  In the ""22. Remoting and web services using Spring"", unnecessary sample code for JAX-RPC (`RemoteAccountService`) is exist.  as follows:  ```java public interface RemoteAccountService extends Remote {      public void insertAccount(Account account) throws RemoteException;      public List getAccounts(String name) throws RemoteException;  } ```    ---  **Affects:** 4.1.6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/792","closed","type: documentation,","spring-projects-issues","2015-05-06T03:10:59Z","2015-05-26T01:15:25Z"
"","17583","Update links to new Castor website [SPR-12991]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12991](https://jira.spring.io/browse/SPR-12991?redirect=false)** and commented  Currently, link of the Castor web site is broken.  Modify as follow:  * http://castor.codehaus.org/xml-framework.html -> http://castor.codehaus.org/reference/1.3.3/html/XML%20data%20binding.html * http://castor.codehaus.org/xml-mapping.html -> http://castor.codehaus.org/reference/1.3.3/html/XML%20data%20binding.html#xml.mapping    ---  **Affects:** 3.2.13, 4.1.6  **Reference URL:** https://jira.codehaus.org/browse/CASTOR-3269  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aed523c112e6f5fbcf4b2127f3d35c5fa15cad3e","closed","type: documentation,","spring-projects-issues","2015-05-06T00:40:08Z","2015-06-30T15:26:22Z"
"","17582","OXM exception hierarchy image is not displayed in reference manual [SPR-12990]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12990](https://jira.spring.io/browse/SPR-12990?redirect=false)** and commented  At the ""16.2.3 XmlMappingException"", image is not display.  follows:  > image::images/oxm-exceptions.png[width=400]    ---  **Affects:** 4.1.6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/791","closed","type: documentation,","spring-projects-issues","2015-05-05T23:17:26Z","2015-05-26T01:14:51Z"
"","17579","JpaDialect description replace to EclipseLink from TopLink [SPR-12988]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12988](https://jira.spring.io/browse/SPR-12988?redirect=false)** and commented  Currently,TopLink contains in the `JpaDialect` description. Incidentally, integration APIs of TopLink has been removed from the Spring 4.  Description is follows:  > Out of the box, Spring provides dialects for the Toplink, Hibernate and OpenJPA JPA implementations.  Probably,TopLink should be replaced to EclipseLink.   ---  **Affects:** 4.1.6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/790, and commits https://github.com/spring-projects/spring-framework/commit/c9d4e4eab8d462656614c0f5ac098cf08ef41523, https://github.com/spring-projects/spring-framework/commit/7fdd3f39d66bc41d6d26383ffe1044e2702539b9","closed","type: documentation,","spring-projects-issues","2015-05-05T12:18:33Z","2015-05-26T01:15:09Z"
"","17578","Remove descriptions of classic API of ORM(JDO/JPA) [SPR-12987]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12987](https://jira.spring.io/browse/SPR-12987?redirect=false)** and commented  Currently, API descriptions of ORM(JDO/JPA) that has been removed from the Spring 4 exists.  For example:  * `JdoTemplate` * `JdoDaoSupport` * `JpaTemplate` * `JpaDaoSupport`    ---  **Affects:** 4.1.6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/789","closed","type: documentation,","spring-projects-issues","2015-05-05T11:01:45Z","2015-05-26T01:15:29Z"
"","17576","Improve description of DefaultLobHandler in reference manual [SPR-12985]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12985](https://jira.spring.io/browse/SPR-12985?redirect=false)** and commented  Reflect the change of #16870 in the ""14.7.2 Handling BLOB and CLOB objects"" in reference document.  ---  **Affects:** 4.1.6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/788","closed","type: documentation,","spring-projects-issues","2015-05-05T07:03:38Z","2019-01-11T21:04:18Z"
"","17572","Bad grammar in reference document [SPR-12981]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12981](https://jira.spring.io/browse/SPR-12981?redirect=false)** and commented  At ""14.7.2 Handling BLOB and CLOB objects"", several bad grammar exist.  * AbstractLobCreatingPreparedStatementCallback * lobHandler    ---  **Affects:** 4.1.6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/786","closed","type: documentation,","spring-projects-issues","2015-05-05T05:12:26Z","2015-05-26T01:15:16Z"
"","17571","Reference manual should not refer to deprecated ParameterizedBeanPropertyRowMapper [SPR-12980]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12980](https://jira.spring.io/browse/SPR-12980?redirect=false)** and commented  Currently at ""14.5.9 Returning ResultSet/REF Cursor from a SimpleJdbcCall"", usage have described using the deprecated API (`ParameterizedBeanPropertyRowMapper`). Incidentally, the `ParameterizedBeanPropertyRowMapper` has been deprecated from the Spring 4.1.0.RELEASE.  I think it should be changed to use the `BeanPropertyRowMapper` instead of the `ParameterizedBeanPropertyRowMapper`.   ---  **Affects:** 4.1.6","closed","type: documentation,","spring-projects-issues","2015-05-05T03:18:08Z","2015-05-26T01:15:03Z"
"","17570","Update documentation for the resultsMapCaseInsensitive flag in JdbcTemplate [SPR-12979]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12979](https://jira.spring.io/browse/SPR-12979?redirect=false)** and commented  Currently, description is follows :  > To make your code more portable you should do a case-insensitive lookup or instruct Spring to use a CaseInsensitiveMap from the Jakarta Commons project. To do the latter, you create your own JdbcTemplate and set the setResultsMapCaseInsensitive property to true. Then you pass this customized JdbcTemplate instance into the constructor of your SimpleJdbcCall. You must include the commons-collections.jar in your classpath for this to work.  But from the Spring 3, the `LinkedCaseInsensitiveMap` has been used instead of the `CaseInsensitiveMap` of the Jakarta Commons.   ---  **Affects:** 3.2.13, 4.1.6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/785, and commits https://github.com/spring-projects/spring-framework/commit/4f8ef803422063cf2222927947fae8ce2b4e3d82, https://github.com/spring-projects/spring-framework/commit/123e7c14eb6fc8b0ed903c5138c3e7f51baf46ff, https://github.com/spring-projects/spring-framework/commit/9ed34b81fd94c49c89f6f3c4f7a6c2d702e65c61","closed","type: documentation,","spring-projects-issues","2015-05-05T01:33:56Z","2015-05-26T01:15:16Z"
"","17451","Override properties using system properties in PropertyOverrideConfigurer [SPR-12853]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12853](https://jira.spring.io/browse/SPR-12853?redirect=false)** and commented  I want to be able to override properties using system properties in `PropertyOverrideConfigurer`. (as same as `PropertyPlaceholderConfigurer` or `PropertySourcesPlaceholderConfigurer`)  I submit pull-request(proposed amendment) later.   ---  **Affects:** 4.1.6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/762","closed","status: bulk-closed,","spring-projects-issues","2015-03-26T08:01:00Z","2019-01-12T00:17:41Z"
"","17416","Support a customizable FieldError creation at SpringValidatorAdapter [SPR-12819]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12819](https://jira.spring.io/browse/SPR-12819?redirect=false)** and commented  I want to customize a `FieldError` creation processing. In production environment of my application, a part of rejected value need exclude from `toString` method. (e.g. password, credit card number etc. ) (But in development and test environment, all of rejected values require for the debugging.)  e.g. ) Specifically, i want to extract as protected method.  ```java protected FieldError createFieldError( 		String objectName, String field, Object rejectedValue, 		String[] codes, Object[] arguments, ConstraintViolation violation) { 	return new FieldError(objectName, field, rejectedValue, false, 			codes, arguments, violation.getMessage()); } ```  I will submit a pull request later.   ---  **Affects:** 4.1.5  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/756","closed","type: enhancement,","spring-projects-issues","2015-03-15T07:59:34Z","2015-05-26T01:15:07Z"
"","17389","Ignore null in HeadersBuilder#headers [SPR-12792]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12792](https://jira.spring.io/browse/SPR-12792?redirect=false)** and commented  If specified null value as method argument of `HeadersBuilder#headers`, `NullPointerException` occur.  I want to change this behavior as follows:  * Ignore a null value(the same as `HttpEntity` constructor) * Check a null value using `Assert#notNull` method  I want to apply a first idea(ignore a null value).  e.g)  ```java private ResponseEntity createResponseEntity(         String body,         HttpHeaders customHeaders) {     return ResponseEntity             .ok()             .headers(customHeaders)             .header(""X-Track"", UUID.randomUUID().toString())             .body(body); }  // ...  @Test public void test() {     System.out.println(createResponseEntity(""test"", new HttpHeaders()));     System.out.println(createResponseEntity(""test"", null)); } ```  ``` <200 OK,test,{X-Track=[2a7ed446-c805-42a6-ada7-982ff9d2b6d7]}>  java.lang.NullPointerException 	at org.springframework.util.LinkedCaseInsensitiveMap.putAll(LinkedCaseInsensitiveMap.java:101) 	at org.springframework.http.HttpHeaders.putAll(HttpHeaders.java:907) 	at org.springframework.http.ResponseEntity$DefaultBuilder.headers(ResponseEntity.java:384) 	at org.springframework.http.ResponseEntity$DefaultBuilder.headers(ResponseEntity.java:364) 	at ResponseEntityTest.createResponseEntity(ResponseEntityTest.java:33) 	at ResponseEntityTest.test(ResponseEntityTest.java:17)         ... ```    ---  **Affects:** 4.1.5  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/753","closed","type: enhancement,","spring-projects-issues","2015-03-06T18:42:28Z","2015-03-25T09:42:33Z"
"","17340","Support @NumberFormat as a meta-annotation [SPR-12743]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12743](https://jira.spring.io/browse/SPR-12743?redirect=false)** and commented  Support `@NumberFormat` as a meta-annotation the same as `@DateTimeFormat`.  ```java @NumberFormat(style = NumberFormat.Style.PERCENT) @Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) public @interface PercentNumber {} ```  ```java public class TestBean {     @PercentNumber     private Double percent;     // ... } ```  ---  **Affects:** 4.1 GA  **Issue Links:** - #17390 TypeDescriptor should support arbitrary levels of meta-annotations (_**""is depended on by""**_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/741  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2015-02-22T06:52:52Z","2019-01-11T21:28:12Z"
"","17766","Add nullToEmpty convenience method to StringUtils [SPR-13174]","**[Kamil Szymanski](https://jira.spring.io/secure/ViewProfile.jspa?name=kamilszymanski)** opened **[SPR-13174](https://jira.spring.io/browse/SPR-13174?redirect=false)** and commented  Feature submitted in PR #810 allows to replace common patterns like:  ```java if(string == null) {     string = """"; } doSomethingWith(string); ```  or:  ```java return string == null ? """" : string; ```  with a nullToEmpty(string) method call.   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/810","closed","type: enhancement,","spring-projects-issues","2015-06-29T12:25:28Z","2016-06-09T17:18:23Z"
"","17068","@DirtiesContext does not restart ehcache [SPR-12687]","**[Juraj Misur](https://jira.spring.io/secure/ViewProfile.jspa?name=jmisur)** opened **[SPR-12687](https://jira.spring.io/browse/SPR-12687?redirect=false)** and commented  If I use `@DirtiesContext` annotation together with shared (or not) ehcache instance, it does not properly reinitialize the cache, thus taking existing shutdown cache into fresh context. See attached project.  * By running `mvn test -Dshared=true` 3rd test fails on   `java.lang.IllegalStateException: The strings Cache is not alive (STATUS_SHUTDOWN)` * By running `mvn test -Dshared=false` 2nd fails on `net.sf.ehcache.CacheException: Another unnamed CacheManager already exists in the same VM`  The only difference between tests is that CachebugApplication2Test have different context configuration + `@DirtiesContext` annotation. If you make CachebugApplication2Test configuration the same as 1Test and 2Test, the tests succeed. Also different behavior can be observed when commenting out `@DirtiesContext` annotation.  The tests should run **together**, in order: CachebugApplication1Test , CachebugApplication2Test , CachebugApplication3Test   ---  **Affects:** 3.2.8, 4.1.4  **Attachments:** - [cachebug.zip](https://jira.spring.io/secure/attachment/22646/cachebug.zip) (_3.97 kB_)","closed","in: core,","spring-projects-issues","2015-02-04T07:27:22Z","2019-01-12T05:25:05Z"
"","17606","Throw exception if multiple meta-annotations are found by AnnotationUtils [SPR-13015]","**[Juha Komulainen](https://jira.spring.io/secure/ViewProfile.jspa?name=komu)** opened **[SPR-13015](https://jira.spring.io/browse/SPR-13015?redirect=false)** and commented  When an element is annotated with multiple _composed annotations_ that are meta-annotated with the target annotation, the first meta-annotation is returned, and the rest are silently discarded. This seems quite dangerous.  Consider the following example using Spring Security:  ```java @Retention(RUNTIME) @PreAuthorize(""isAuthenticated()"") public @interface RequireAuthenticated { }  @Retention(RUNTIME) @PreAuthorize(""hasRole('FROBNICATION')"") public @interface RequireFrobnication { } ```  Now consider a method annoted with both:  ```java @RequireAuthenticated @RequireFrobnication public void myMethod() { } ```  Spring Security will query the annotation with `AnnotationUtils.getAnnotation(method, PreAuthorize.class)`, but the call will silently ignore the second annotation and produce a security vulnerability.  Of course there are probably other similar issues in Spring that have nothing to do with Spring Security.  ---  **Affects:** 4.1.6  **Reference URL:** https://gist.github.com/komu/cadd2e1d3ce9b193fe55  **Issue Links:** - #17203 Explicit failure if multiple `@BootstrapWith` annotations are used on the same test  1 votes, 7 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-05-11T13:16:38Z","2019-01-13T20:55:45Z"
"","17980","Deprecate log4j 1.x support classes [SPR-13400]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13400](https://jira.spring.io/browse/SPR-13400?redirect=false)** and commented  Following Apache's EOL declaration for log4j 1.x (https://blogs.apache.org/foundation/entry/apache_logging_services_project_announces), let's mark our log4j 1.x support classes as deprecated.  There are no immediate replacements since Log4J 2 and Logback have their own ways of bootstrapping themselves in web environments etc. If something specific is desired, application-specific support code (following the log provider's documentation) should easily fill the gap.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e518d7dcc6675d04d827faa0ffeb3aa7bcb4b000","closed","type: task,","spring-projects-issues","2015-08-27T09:56:31Z","2015-09-01T11:38:22Z"
"","17979","Deprecate XMLBeans support [SPR-13399]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13399](https://jira.spring.io/browse/SPR-13399?redirect=false)** and commented  Apache XMLBeans (http://xmlbeans.apache.org/) has been retired last year. As of Spring 4.2, XMLBeans is therefore effectively deprecated and needs to be marked as such.  ---  **Affects:** 4.2 GA  **Issue Links:** - #20767 Deprecate Castor support - #18369 Remove XMLBeans support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b9d7913407d0e18c0968b97ea63666ef2e4599d7","closed","type: task,","spring-projects-issues","2015-08-27T09:51:29Z","2019-01-11T18:18:25Z"
"","17975","Registering a Spring ConversionService for Jackson serialization [SPR-13395]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13395](https://jira.spring.io/browse/SPR-13395?redirect=false)** and commented  As discussed on Monday, inspired by Stéphane's live coding preparations, let's see what we can do towards applying a Spring `ConversionService` for Jackson serialization purposes:  https://github.com/snicoll-scratches/modern-component-design-spring-4.2/blob/accf58ecb17d522dd1224d0b3679458fa848efcf/src/main/java/demo/JacksonCustomizations.java  It seems that we have to enumerate the types to apply the `ConversionService` to, since there doesn't seem to be a fallback hook for cases where no Jackson serializer is registered.  A significant limitation is that we can't expose a full descriptor to the `ConversionService`, i.e. we can't expose formatting annotations since the Jackson serializer callbacks only provide us with the raw value :-(   ---  **Affects:** 4.2 GA  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-08-26T01:50:54Z","2019-01-12T00:16:07Z"
"","17950","Make UndertowXhrTransport compatible with Undertow 1.3 [SPR-13366]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13366](https://jira.spring.io/browse/SPR-13366?redirect=false)** and commented  WildFly 10 is scheduled for general availability on October 8, shipping with Undertow 1.3 and Hibernate 5.0... Let's make sure that Spring is fully compatible with it in the 4.2.2 timeframe.  ---  **Affects:** 4.2 GA  **Issue Links:** - #17075 Support for Undertow 1.2 / WildFly 9.0 - #18127 Modifications to UndertowXhrTransport for Undertow 1.3 introduce breaking changes - #18056 Compatibility with WildFly 10 - #18072 Make UndertowRequestUpgradeStrategy compatible with Undertow 1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/90409cbe9834e8b6b798da6308cc38a0ec88ae5a, https://github.com/spring-projects/spring-framework/commit/0510329b54a265e7dc2e83be83235da7dcea4196, https://github.com/spring-projects/spring-framework/commit/42588cb03e484565c24298ac834e8d0921dee9ec","closed","type: enhancement,","spring-projects-issues","2015-08-18T10:41:58Z","2019-01-11T18:19:52Z"
"","17937","Upgrade to CGLIB 3.2 [SPR-13353]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13353](https://jira.spring.io/browse/SPR-13353?redirect=false)** and commented  See e.g. #17430 for a concrete need. But even in general, a CGLIB update is really overdue; let's pick it up immediately once available.  ---  **Issue Links:** - #17430 Unable to use Configuration classes in signed jar due to CGLIB (_**""is depended on by""**_) - #18506 Upgrade to CGLIB 3.2.2","closed","type: task,","spring-projects-issues","2015-08-17T00:52:53Z","2019-01-11T18:20:36Z"
"","17930","Revisit RedirectView's use of getCurrentWebApplicationContext() [SPR-13346]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13346](https://jira.spring.io/browse/SPR-13346?redirect=false)** and commented  Since 3.1, `RedirectView` falls back to a `ContextLoader.getCurrentWebApplicationContext()` check to determine the `ServletContext` for building a `RequestContext`, which in turn gets used to retrieve the current `RequestDataValueProcessor` (if any). This doesn't seem to be the best possible arrangement, since the `ServletContext` is just used to retrieve the root `WebApplicationContext`... when we actually started with a current `WebApplicationContext` to begin with! Also, there is `HttpServletRequest.getServletContext()` since Servlet 3.0... even if there is probably no benefit in using that one here, it's generally preferable to a `WebApplicationContext.getServletContext()` lookup.  ---  **Affects:** 4.2 GA  **Issue Links:** - #13413 RequestDataValueProcessor not called in RedirectView - #17912 Provide a SpringConstraintValidatorFactory variant for use with validation.xml  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4314da922adefdc64bcfc2243ae6b049f5925080","closed","type: enhancement,","spring-projects-issues","2015-08-12T12:39:48Z","2019-01-11T18:21:36Z"
"","17928","Compatibility with merged JDK 9 mainline [SPR-13344]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13344](https://jira.spring.io/browse/SPR-13344?redirect=false)** and commented  As of 4.2.1, the core Spring Framework is fully compatible with mid-2015 JDK 9 builds already, at runtime as well as for running the framework build.  For 4.3, we aim for full runtime compatibility with the merged JDK 9 mainline, including the current state of the Jigsaw module system which has been developed in a parallel branch for a long time. Note that this not include any actual support for JDK 9 modules yet; this remains a Spring 5 topic.  ---  **Issue Links:** - #18289 Stable module names for Spring Framework jars on JDK 9 module path (_**""is depended on by""**_) - #17778 Upgrade core framework build to JDK 11 (_**""is depended on by""**_) - #19211 Out-of-the-box build compatibility with JDK 9 build 136 (_**""is depended on by""**_) - #19138 Upgrade build to Gradle 3.0 - #19148 Document Spring recommendations/restrictions for Java 9 module setups - #19642 Remove use of Boolean constructors in tests - #19643 Avoid use of double constructor of BigDecimal in tests - #19055 Avoid deprecated Class.newInstance in favor of constructor-based instantiation - #19056 SerializableTypeWrapper should reobtain type accessors from declaring interface","closed","type: task,","spring-projects-issues","2015-08-12T08:39:36Z","2019-01-11T18:21:27Z"
"","17927","Introduce SmartMessageConverter interface with conversionHint arguments [SPR-13343]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13343](https://jira.spring.io/browse/SPR-13343?redirect=false)** and commented  We introduced conversionHint arguments as part of #17856, but just in `AbstractMessageConverter` which we optionally downcast to. Unfortunately, `CompositeMessageConverter` isn't covered that way. We've already considered introducing a `SmartMessageConverter` interface with the same signatures; it seems that this is now necessary.  See https://jira.spring.io/browse/SPR-13237?focusedCommentId=118436&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-118436 for the original comment that triggered this issue.  ---  **Affects:** 4.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a369fc8afda4c9863bd8e74502113ff3d1e924c9","closed","type: enhancement,","spring-projects-issues","2015-08-12T07:27:03Z","2019-01-11T18:21:30Z"
"","17926","Test against EhCache 3.0 M2 [SPR-13342]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13342](https://jira.spring.io/browse/SPR-13342?redirect=false)** and commented  EhCache 3.0 M2 is available in the meantime, and unfortunately has conflicting versions of Terracotta packages inside its jar, which means we can't test it as part of `spring-context-support` anymore (flipping a comment in the build script). Instead, let's add a regular integration test for it to `spring-test`.  ---  **Affects:** 4.2 GA  **Issue Links:** - #17445 Compatibility with EhCache 3.0 (as a JCache provider) - #18756 Compatibility with EhCache 3.0 GA - #20435 Merge EhCache 3 tests into spring-context-support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3a5cc3df80347422681d4c6add2f6031c2070704, https://github.com/spring-projects/spring-framework/commit/d8794a1edc4327e79b2bc5b553bc5e4890b294ee","closed","type: task,","spring-projects-issues","2015-08-12T06:51:25Z","2019-01-11T18:21:14Z"
"","17887","Upgrade to AspectJ 1.9 beta 2 (for build compatibility with JDK 9 build 74+) [SPR-13297]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13297](https://jira.spring.io/browse/SPR-13297?redirect=false)** and commented  As of JDK 9 build 74, our `ajc` task fails to find the JDK libraries again...  ---  **Issue Links:** - #18412 Upgrade to AspectJ 1.9 beta 3 (for build compatibility with JDK 9 build 95+)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/01bc2519c583142faf3bb39210a4c440acff3748","closed","type: task,","spring-projects-issues","2015-07-31T00:51:48Z","2019-01-11T18:02:00Z"
"","17884","Drop JasperReports support [SPR-13294]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13294](https://jira.spring.io/browse/SPR-13294?redirect=false)** and commented  JasperReports deprecated its classic `JRExporter` API as of version 5.5.2, in favor of a new `Exporter` API. Let's migrate to this for Spring Framework 5.0 (by then more than two years after JasperReports 5.5.2 already).  ---  **Issue Links:** - #18368 Remove Velocity support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7dda9fbd8c64251421cead58c5ef6d5720e2d3c0","closed","type: task,","spring-projects-issues","2015-07-30T02:37:28Z","2019-01-11T18:01:52Z"
"","17873","Deprecate native JRuby support [SPR-13283]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13283](https://jira.spring.io/browse/SPR-13283?redirect=false)** and commented  Spring's native JRuby support in `JRubyScriptUtils` and `JRubyScriptFactory` is not compatible with the freshly released JRuby 9.0.0.0, and it's not worth making it compatible given that we have JRuby support via JSR-223 in `StandardScriptFactory` / `lang:std` now. As a consequence, let's deprecate it as of Spring 4.2.  ---  **Issue Links:** - #9888 ScriptFactory for JSR-223 - #19885 JRubyScriptFactory compatibility with JRuby 9.1.7+  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b74377932cbe86c8f1570420af44057d9fb2e122","closed","type: task,","spring-projects-issues","2015-07-28T05:14:48Z","2019-01-11T18:02:12Z"
"","17866","Require JUnit 4.12 or higher in the TestContext framework [SPR-13275]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13275](https://jira.spring.io/browse/SPR-13275?redirect=false)** and commented  JUnit 4.12 was released in December 2014. We should make it required as of Spring Framework 4.3, getting rid of deprecated calls in `SpringJUnit4ClassRunner`.  ---  **Issue Links:** - #17116 Upgrade to JUnit 4.12 - #16527 Require JUnit 4.9 or higher in the TestContext framework - [SEC-3178](https://jira.spring.io/browse/SEC-3178) Update to junit-4.12  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/66562f258917fa448db96787107ba6574359040d  0 votes, 5 watchers","closed","type: task,","spring-projects-issues","2015-07-24T06:47:35Z","2019-01-11T18:02:35Z"
"","17856","Jackson @JsonView deserialization support for @MessageMapping payloads [SPR-13265]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13265](https://jira.spring.io/browse/SPR-13265?redirect=false)** and commented  #17338 introduced support for `@JsonView` for response messages returned from `@MessageMapping` methods. For completeness, we should also support `@JsonView` for the payloads of incoming messages, along the lines of #17106 which introduced analogous support for HTTP request bodies. This effort also provides an opportunity to fine-tune the `MethodParameter` passing into our `MessageConverter` infrastructure, as introduced in 4.2 RC1.  ---  **Affects:** 4.2 RC1  **Issue Links:** - #17106 Jackson `@JsonView` deserialization support for request bodies - #17338 Allow use of `@JsonView` on `@MessageMapping` methods - #17828 JsonView support for JMS - #17878 `@MessageMapping` should support generically typed Message argument with converted payload  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0f54f686b26c9a49c83ed775166ad9a10b0990cc, https://github.com/spring-projects/spring-framework/commit/02d05ed133566cc4ba2d72c51e5f7ca3ede02e2a","closed","type: enhancement,","spring-projects-issues","2015-07-22T04:30:06Z","2019-01-13T05:39:36Z"
"","17839","AsyncAnnotationBeanPostProcessor could find TaskExecutor by type/name [SPR-13248]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13248](https://jira.spring.io/browse/SPR-13248?redirect=false)** and commented  Along the lines of #17827, `AsyncAnnotationBeanPostProcessor` could find a `TaskExecutor` bean by type and/or name in the context, avoiding the need to implement `AsyncConfigurer` for that purpose.  ---  **Issue Links:** - #17827 ScheduledAnnotationBeanPostProcessor should fall back to default TaskScheduler by name - #18293 Regression: AsyncAnnotationBeanPostProcessor fails on startup when encountering ambiguous TaskExecutor beans - #18602 Regression: Early instantiation of a bean prevents proxying for `@Async` in 4.2.x but works in 4.1.x - #20125 Consistently accept ""taskExecutor"" bean of type Executor (as stated in `@EnableAsync`'s javadoc) - #19633 SchedulingConfigurer's ScheduledTaskRegistrar should reliably shut down before TaskScheduler  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c3e57dd245d45dfd334d1d44775c95093458b543","closed","type: enhancement,","spring-projects-issues","2015-07-17T07:44:54Z","2019-01-13T05:39:41Z"
"","17826","Deprecate Velocity support [SPR-13235]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13235](https://jira.spring.io/browse/SPR-13235?redirect=false)** and commented  Velocity 1.7 dates back to 2010. After more than five years of no maintenance in the original project, it's about time to deprecate Velocity support on Spring's side.  ---  **Issue Links:** - #17821 Deprecate Hibernate 3 support - #19029 Documentation still favoring velocity but it is deprecated in 4.3 - #18368 Remove Velocity support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0e68d2e951dbe720745636ccf65c7dd76f3893b3, https://github.com/spring-projects/spring-framework/commit/a2a9c47e59090e71fe199560a9aa0b6335061a3d","closed","type: task,","spring-projects-issues","2015-07-15T04:55:17Z","2019-01-11T18:05:08Z"
"","17825","Compatibility with WebLogic 12.2.1 / Tyrus 1.11 [SPR-13234]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13234](https://jira.spring.io/browse/SPR-13234?redirect=false)** and commented  https://blogs.oracle.com/emeapartnerweblogic/entry/weblogic_12_2_1_coherence  ---  **Affects:** 4.2.2  **Issue Links:** - #18073 Require Undertow 1.3.5+, Tyrus 1.11+, Jetty 9.3+, Tomcat 8.5+ (_**""is depended on by""**_) - #18366 Upgrade to JMS 2.0+ (_**""is depended on by""**_) - #17824 Compatibility with WebSphere 9 Traditional - #15917 Support for JSR-356 on WebLogic 12.1.3 - #18142 Compatibility with GlassFish 4.1.1 / Tyrus 1.12 - #18758 Component scanning does not find sub-packages in EAR on Weblogic 12.2.x  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3e807c297de0e1de892e6c7b074fbb1693c9d0e0","closed","type: enhancement,","spring-projects-issues","2015-07-15T04:12:20Z","2019-01-11T18:04:51Z"
"","17824","Compatibility with WebSphere 9 Traditional [SPR-13233]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13233](https://jira.spring.io/browse/SPR-13233?redirect=false)** and commented  Spring's WebSocket support (and other vendor-specific support spots) are compatible with WebSphere's Liberty profile as of 4.2.1 already. WebSphere Classic just got updated to EE 7 as well for a first beta; let's aim for full compatibility in the Spring Framework 4.3 timeframe.  https://developer.ibm.com/wasdev/blog/2015/10/17/websphere-application-server-v9-beta/  ---  **Issue Links:** - #16973 Support for JSR-356 WebSockets on WebSphere Liberty Profile (_**""depends on""**_) - #18366 Upgrade to JMS 2.0+ (_**""is depended on by""**_) - #18360 Compatibility with JBoss EAP 7 - #17825 Compatibility with WebLogic 12.2.1 / Tyrus 1.11","closed","type: task,","spring-projects-issues","2015-07-15T04:09:47Z","2019-01-11T18:04:56Z"
"","17823","Revisit date-time tests for compatibility with JDK 9 build 72 [SPR-13232]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13232](https://jira.spring.io/browse/SPR-13232?redirect=false)** and commented  Several of our date-time formatting tests fail on JDK 9 build 72 due to slightly different default output from the JDK date-time types. Let's fine-tune those tests to accept both the JDK 8 and the JDK 9 variant of the output.  ---  **Issue Links:** - #17603 Upgrade build to Gradle 2.5 for JDK 9 support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ef781b6353e453551fc5c30248f182894c98ccad, https://github.com/spring-projects/spring-framework/commit/f4f508d869a61283d1ae794cc9732656eefedf2f","closed","type: task,","spring-projects-issues","2015-07-14T11:38:21Z","2019-01-11T18:04:43Z"
"","17821","Deprecate Hibernate 3 support [SPR-13230]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13230](https://jira.spring.io/browse/SPR-13230?redirect=false)** and commented  After the introduction of Hibernate 5 support in Spring 4.2, we should officially deprecate our `orm.hibernate3` package in Spring 4.3.  ---  **Issue Links:** - #16316 Support for Hibernate ORM 5.0 - #16828 Deprecate Tiles 2 support - #17826 Deprecate Velocity support - #18747 Section 19.3.2 of reference mentions Hibernate 3 should be just Hibernate - #18400 Remove native support for Hibernate 3.6 and 4.x  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e90942223fd642700fcf479ab81e55c07a236cc7, https://github.com/spring-projects/spring-framework/commit/2cfe00ce32e7d4c893d63a559a8d9234b23de924","closed","type: task,","spring-projects-issues","2015-07-14T04:07:52Z","2019-01-11T18:04:39Z"
"","17820","Remove Tiles 2 support [SPR-13229]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13229](https://jira.spring.io/browse/SPR-13229?redirect=false)** and commented  After the deprecation in Spring 4.2 (#16828), let's eventually remove Tiles 2 support in Spring 4.3.  Tiles 3.0 went GA in May 2012. However, arguably it was only properly usable with Spring as of 3.0.3 in November 2013. That'll be 2.5 years ago by the time of our 4.3 GA.  ---  **Issue Links:** - #16828 Deprecate Tiles 2 support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b75f5faf88c3be80d16abe4ecd96754989eddcd8, https://github.com/spring-projects/spring-framework/commit/4027bda168ecef2f0235686e93d399726ec2aced, https://github.com/spring-projects/spring-framework/commit/57b3ee324fc182b13b86a7854d690bc1a0b0c8c0","closed","type: task,","spring-projects-issues","2015-07-14T03:48:18Z","2019-01-11T18:06:08Z"
"","17819","Upgrade to Objenesis 2.2 [SPR-13228]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13228](https://jira.spring.io/browse/SPR-13228?redirect=false)** and commented  Objenesis 2.2 is about to be released and will introduce support for Google App Engine.  ---  **Issue Links:** - #18864 Upgrade to Objenesis 2.4 - #19712 Upgrade to Objenesis 2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4dd6b789ef6ed902fb83dde2a8bde409ad88d2d8","closed","type: task,","spring-projects-issues","2015-07-14T03:45:35Z","2019-01-11T18:06:11Z"
"","17793","LinkedMultiValueMap should allow for deep copy of List values [SPR-13201]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13201](https://jira.spring.io/browse/SPR-13201?redirect=false)** and commented  `LinkedMultiValueMap`'s copy constructor takes a shallow copy of the given `Map`, reusing the `List` values there. In order to fix #17777 but also generally, we should allow for taking a deep copy as well.  ---  **Issue Links:** - #17777 ConcurrentModificationException when calling SimpMessagingTemplate.convertAndSend  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/df8e9638ee88472717a0e44d2ac7cc7416e4caa1","closed","type: enhancement,","spring-projects-issues","2015-07-06T05:32:53Z","2019-01-11T18:07:40Z"
"","17781","Drop Servlet 2.5 runtime compatibility [SPR-13189]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13189](https://jira.spring.io/browse/SPR-13189?redirect=false)** and commented  Getting rid of the reflective checks for `HttpServletResponse.getHeader` and `HttpServletRequest.startAsync`...  ---  **Issue Links:** - #17273 Support for Servlet 4.0 API - #19036 Comprehensive Servlet 3.1 support in spring-web and spring-test  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ae0b7c26c56cbe519f8ec9ab7dbd780d93b6bf3f  1 votes, 3 watchers","closed","type: task,","spring-projects-issues","2015-07-02T02:33:27Z","2019-01-11T16:17:54Z"
"","17780","Upgrade framework codebase to JDK 8+ [SPR-13188]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13188](https://jira.spring.io/browse/SPR-13188?redirect=false)** and commented  Avoiding defensive checks for `java.util.Optional` etc, selective use of lambdas and method references in particular with the `Stream` API, Java 8's reflection facilities... but also Java 7 source code refinements such as inferred generic types and multi-catch clauses.  ---  **Issue Links:** - #19003 Core Spring interfaces declared with Java 8 default methods and `@FunctionalInterface` markers - #21187 Use Map.forEach instead of manual Map.Entry iteration wherever possible  1 votes, 5 watchers","closed","type: task,","spring-projects-issues","2015-07-02T02:30:53Z","2019-01-13T05:40:06Z"
"","17779","Support for new JDK 9 HTTP Client API [SPR-13187]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13187](https://jira.spring.io/browse/SPR-13187?redirect=false)** and commented  http://openjdk.java.net/jeps/110 https://bugs.openjdk.java.net/browse/JDK-8042950  ---  **Issue Links:** - #17778 Upgrade core framework build to JDK 11 (_**""depends on""**_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2015-07-02T02:26:39Z","2019-01-11T16:17:52Z"
"","17778","Upgrade core framework build to JDK 17","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13186](https://jira.spring.io/browse/SPR-13186?redirect=false)** and commented  #### Resources  - [JDK 9 early access builds](https://jdk9.java.net/download/) - [Gradle 3.0 nightly builds](http://gradle.org/gradle-nightly-build/)   - [nightly release notes](https://docs.gradle.org/nightly/release-notes) - [Gradle JDK 9 Support](https://github.com/gradle/gradle/blob/master/design-docs/jdk9-support.md) wiki page  ---  **Issue Links:** - #17928 Compatibility with merged JDK 9 mainline (_**""depends on""**_) - #19138 Upgrade build to Gradle 3.0 (_**""depends on""**_) - #18092 Remove AbstractJpaTests and revise spring-orm test suite accordingly (_**""depends on""**_) - #18079 Declare Spring modules with JDK 9 module metadata (_**""is depended on by""**_) - #17779 Support for new JDK 9 HTTP Client API (_**""is depended on by""**_)  2 votes, 12 watchers","closed","type: task,","spring-projects-issues","2015-07-02T02:24:49Z","2021-12-14T12:15:59Z"
"","17731","Support for Jetty 9.3 [SPR-13140]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13140](https://jira.spring.io/browse/SPR-13140?redirect=false)** and commented  Jetty 9.3 is GA now.  Unfortunately, our `JettyRequestUpgradeStrategy` doesn't seem to be compatible with it: `WebSocketServerFactory.init()` doesn't exist anymore, just a variant `init(ServletContext)`. Since we don't have access to the `ServletContext` at that point yet, we'll have to allow for passing it in, e.g. through `ServletContextAware`, and reflectively call the new init method...  Let's sort this out in time for 4.2 GA.  ---  **Issue Links:** - #18073 Require Undertow 1.3.5+, Tyrus 1.11+, Jetty 9.3+, Tomcat 8.5+ (_**""is depended on by""**_) - #19507 Support for Jetty 9.4 (and 9.3.15+)","closed","type: enhancement,","spring-projects-issues","2015-06-17T16:10:03Z","2019-01-11T16:22:09Z"
"","17703","Avoid reflection for creating StandardServletAsyncWebRequest [SPR-13112]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13112](https://jira.spring.io/browse/SPR-13112?redirect=false)** and commented  `WebAsyncUtils` uses reflection to create a `StandardServletAsyncWebRequest`, trying to avoid a Servlet 3.0 API dependency, despite an inner class delegate approach working equally well. Let's avoid the reflection overhead if we can, since we're doing this per (asynchronous) request.   ---  **Affects:** 4.1.6, 4.2 RC1","closed","type: enhancement,","spring-projects-issues","2015-06-11T01:01:27Z","2015-06-30T10:41:37Z"
"","17679","Upgrade to Hibernate ORM 5.0 RC1 and Hibernate Validator 5.2 RC1 [SPR-13088]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13088](https://jira.spring.io/browse/SPR-13088?redirect=false)** and commented  As released at the end of May...  ---  **Affects:** 4.2 RC1  **Issue Links:** - #16316 Support for Hibernate ORM 5.0 - #17355 Support for Hibernate Validator 5.2 - #17594 Compatibility with Hibernate ORM 5.0 GA - #17595 Compatibility with Hibernate Validator 5.2 GA / 5.2.1","closed","type: task,","spring-projects-issues","2015-06-01T09:29:34Z","2019-01-11T15:45:37Z"
"","17654","Require Jackson 2.6+, FreeMarker 2.3.21+, XStream 1.4.5+ [SPR-13062]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13062](https://jira.spring.io/browse/SPR-13062?redirect=false)** and commented  * Jackson 2.6 went GA in July 2015, almost a year ago by the time of our 4.3 GA release. Let's get rid of the reflective checks and deprecated method calls in `MappingJackson2MessageConverter` and `AbstractJackson2HttpMessageConverter`.  * FreeMarker 2.3.21 was released in October 2014, as a rather major update. Let's get rid of the deprecated method calls in `FreeMarkerConfigurationFactory` and `FreeMarkerView`.  * XStream 1.4.5 was released in September 2013. Let's finally require it and get rid of the deprecated constructor call in `XStreamMarshaller`.  ---  **Issue Links:** - #15887 Require Jackson 2.1+, Quartz 2.1.4+, EhCache 2.5+ - #19617 Spring MVC 4.3.5's Jackson auto-configuration breaks against Jackson 2.3.3 on the classpath - #18301 Revise AbstractJackson2HttpMessageConverter's generic type adaptation - #18919 SpringHandlerInstantiator should support all HandlerInstantiator-provided factory methods - #17804 As of Jackson 2.6 the module class supporting the java.time (java8) package has changed","closed","type: task,","spring-projects-issues","2015-05-22T12:30:45Z","2019-01-11T15:46:48Z"
"","17631","Upgrade to ASM 5.0.4 [SPR-13039]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13039](https://jira.spring.io/browse/SPR-13039?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/50eef1b979a188d90116720ba4d24c2e77b5cecd","closed","type: task,","spring-projects-issues","2015-05-17T13:22:40Z","2015-06-30T10:54:42Z"
"","17608","General compatibility with JDK 8u60 [SPR-13017]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13017](https://jira.spring.io/browse/SPR-13017?redirect=false)** and commented  JDK 8 update 60 is scheduled for general availability in August 2015. In the Spring Framework 4.2 timeframe, we need to make sure that the framework is fully runtime-compatible with it and that our build and test suite execute fine on 8u60.  There might be nothing to do here. This ticket is primarily for running tests against an 8u60 RC.  ---  **Affects:** 4.1.6  **Issue Links:** - #17151 Compatibility with JDK 9 Jigsaw Builds - #17186 General compatibility with JDK 8u40","closed","type: task,","spring-projects-issues","2015-05-12T05:34:22Z","2019-01-11T16:05:36Z"
"","17602","Backport DispatcherServlet and ServletContextResourcePatternResolver refinements to 3.2.x [SPR-13011]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13011](https://jira.spring.io/browse/SPR-13011?redirect=false)** and commented  `DispatcherServlet`'s async processing finally blocks have been refined in 4.x. `ServletContextResourcePatternResolver` explicitly closes `JarFile` references now.   ---  **Affects:** 3.2.13","closed","type: task,","spring-projects-issues","2015-05-11T04:28:09Z","2015-06-30T10:54:41Z"
"","17601","CustomBooleanEditor may run into NPE when configured with allowEmpty=false [SPR-13010]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13010](https://jira.spring.io/browse/SPR-13010?redirect=false)** and commented  Due to the inverted `equals` comparisons for custom `trueString` and `falseString` values, the code will run into NPEs when encountering a `null` input value (in case of `allowEmpty=false`.   ---  **Affects:** 3.2.13, 4.1.6  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","type: bug,","spring-projects-issues","2015-05-11T03:52:00Z","2015-05-26T01:14:41Z"
"","17595","Compatibility with Hibernate Validator 5.2 GA / 5.2.1 [SPR-13003]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13003](https://jira.spring.io/browse/SPR-13003?redirect=false)** and commented  As a final step after the work that begun in #17355.  ---  **Affects:** 4.2 RC1  **Issue Links:** - #17355 Support for Hibernate Validator 5.2 - #17679 Upgrade to Hibernate ORM 5.0 RC1 and Hibernate Validator 5.2 RC1 - #17763 Compatibility with Hibernate Validator 5.3 - #19565 Compatibility with Hibernate Validator 5.4","closed","type: task,","spring-projects-issues","2015-05-09T09:00:49Z","2019-01-11T16:06:44Z"
"","17594","Compatibility with Hibernate ORM 5.0 GA [SPR-13002]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13002](https://jira.spring.io/browse/SPR-13002?redirect=false)** and commented  ---  **Affects:** 4.2 RC1  **Issue Links:** - #16316 Support for Hibernate ORM 5.0 - #17679 Upgrade to Hibernate ORM 5.0 RC1 and Hibernate Validator 5.2 RC1 - #17972 Compatibility with Hibernate ORM 5.0 Final - create instance of entityManagerFactory - #18059 Compatibility with Hibernate ORM 5.1 - #17860 HibernateJpaDialect should warn about connection release mode other than ON_CLOSE (when upgrading from 4.0.x)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a1107af06f592f35d0e17e0f24041d5d6eb01cd3, https://github.com/spring-projects/spring-framework/commit/79e24aeceda3f2d1f43b26cbd11ffa3ff23263b2  1 votes, 4 watchers","closed","type: task,","spring-projects-issues","2015-05-09T08:24:02Z","2019-01-11T16:06:54Z"
"","17593","Compatibility with WildFly 9.0 GA [SPR-13001]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13001](https://jira.spring.io/browse/SPR-13001?redirect=false)** and commented  ---  **Affects:** 4.2 RC1  **Issue Links:** - #17075 Support for Undertow 1.2 / WildFly 9.0","closed","type: task,","spring-projects-issues","2015-05-09T08:22:55Z","2019-01-11T16:06:29Z"
"","17549","Tracking ASM 5.0.4 development (final) [SPR-12957]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12957](https://jira.spring.io/browse/SPR-12957?redirect=false)** and commented  * Fix for ASM issue 317555 (http://forge.ow2.org/tracker/?func=detail&aid=317555&group_id=23&atid=100023)  ---  **Affects:** 4.1.6  **Issue Links:** - #17076 Tracking ASM 5.0.4 development (continued) - #18609 Upgrade to ASM 5.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5b10575ce5498999c2bf481b2568f2813a3cc2e1, https://github.com/spring-projects/spring-framework/commit/2c043ec9d7ad41a171882a7a06281fa4fd2bf0df","closed","type: task,","spring-projects-issues","2015-04-26T05:17:12Z","2019-01-11T21:06:10Z"
"","17487","AnnotatedElementUtils should leniently ignore TypeNotPresentExceptions (just like AnnotationUtils) [SPR-12889]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12889](https://jira.spring.io/browse/SPR-12889?redirect=false)** and commented  As indicated by [SWS-877](https://jira.spring.io/browse/SWS-877), it would be good to defensively ignore `TypeNotPresentException` (and other annotation introspection exceptions}} in `AnnotatedElementUtils` as well, analogous to how we do it in `AnnotationUtils` already.  ---  **Affects:** 4.1.6  **Issue Links:** - [SWS-877](https://jira.spring.io/browse/SWS-877) Support `@Repeatable` in `@PayloadRoot` and `@SoapAction` - #16930 AnnotationUtils provides poor diagnostics if getDeclaredAnnotations throws an exception - #17456 Support package private annotations with AnnotationUtils - #18364 Defensive error reporting when ConfigurationClassParser introspects declared methods via StandardAnnotationMetadata","closed","type: enhancement,","spring-projects-issues","2015-04-03T14:09:36Z","2019-01-13T05:41:26Z"
"","17447","TcpConnection should extend java.io.Closeable [SPR-12849]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12849](https://jira.spring.io/browse/SPR-12849?redirect=false)** and commented  Aligned with #14596 and #16916, TcpConnection should extend the `java.io.Closeable` interface.  ---  **Affects:** 4.1.5  **Issue Links:** - #14596 Implement java.io.Closeable where appropriate - #16916 WebSocketSession should extend java.io.Closeable  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/13a87453b626cfb2361d5821ae271c2ce89c5b19, https://github.com/spring-projects/spring-framework/commit/4e28da439d9a5a8880318960124b4196fe6d275f","closed","type: enhancement,","spring-projects-issues","2015-03-24T16:36:16Z","2019-01-11T21:38:29Z"
"","17445","Compatibility with EhCache 3.0 (as a JCache provider) [SPR-12847]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12847](https://jira.spring.io/browse/SPR-12847?redirect=false)** and commented  EhCache 3.0 lives in a different package namespace and has a quite different API from classic EhCache. Due to its redesign and repurposing as a JCache provider (which is built into EhCache 3.0 out of the box now), it's probably best to focus on compatibility with it as a provider behind Spring's JCache support. This means that there won't be an `org.springframework.cache.ehcache` equivalent for it.  This issue tracks our efforts to provide compatibility with it, optionally running parts of our test suite against it etc.  ---  **Issue Links:** - #18756 Compatibility with EhCache 3.0 GA - #17926 Test against EhCache 3.0 M2 - #18150 Compatibility with JCache 1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/26d4f91835efecd2c16d537205e1da9292a405dc","closed","in: core,","spring-projects-issues","2015-03-24T10:49:06Z","2019-01-11T21:38:21Z"
"","17427","DefaultManagedAwareThreadFactory's non-JNDI fallback leads to StackOverflowError [SPR-12830]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12830](https://jira.spring.io/browse/SPR-12830?redirect=false)** and commented  As indicated in https://github.com/spring-projects/spring-framework/pull/757, `DefaultManagedAwareThreadFactory` accidentally recurses to itself instead of `super.newThread`.   ---  **Affects:** 4.1.5  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/757  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3e5fbf5edcd5193b025eab144441ce91ba13cd2, https://github.com/spring-projects/spring-framework/commit/4446b5fe8ada73356989f11d2f430b028f8565bc","closed","type: bug,","spring-projects-issues","2015-03-18T10:12:54Z","2015-03-25T09:42:32Z"
"","17405","SpEL's ReflectiveMethodResolver should use distance computation by default [SPR-12808]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12808](https://jira.spring.io/browse/SPR-12808?redirect=false)** and commented  `ReflectiveMethodResolver` has had a ""useDistance"" mode for a while but this hasn't been activated by default yet. In the course of the work on #17400, the ""useDistance"" mode is being heavily tested as well. With a few remaining corner cases ironed out, we should be able to switch it on by default in Spring Framework 4.2.  ---  **Affects:** 4.1.5  **Issue Links:** - #17400 SpEL chooses wrong method to invoke when varargs method is present  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b455626ce1bab774d375744bd46852238ad1802f, https://github.com/spring-projects/spring-framework/commit/348eb918914ab3cf0ea428adeacd54e86585256b, https://github.com/spring-projects/spring-framework/commit/9d47a2b87e234ce25d48b7af278e59cef0329a45","closed","type: enhancement,","spring-projects-issues","2015-03-11T10:13:17Z","2019-01-11T22:00:30Z"
"","17374","LoadTimeWeavingConfiguration should not rely on private field injection [SPR-12776]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12776](https://jira.spring.io/browse/SPR-12776?redirect=false)** and commented  `LoadTimeWeavingConfiguration` uses private field injection for the purpose of injecting an optional configurer, like other internal configuration classes backing various `@Enable` annotations historically did. As of the 4.1.x line, no other such internal use of field injection remains, so this one needs to be replaced with a regular public setter as well. The benefit remains the same: public setter access doesn't cause issues in unit testing or security manager environments.   ---  **Affects:** 4.1.5","closed","type: bug,","spring-projects-issues","2015-03-02T12:38:39Z","2015-03-25T09:42:36Z"
"","17355","Support for Hibernate Validator 5.2 [SPR-12758]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12758](https://jira.spring.io/browse/SPR-12758?redirect=false)** and commented  Hibernate Validator 5.2 entered its beta phase yesterday and is likely to become generally available around the same time as Spring Framework 4.2.  Specifically, we should autodetect and support Hibernate Validator 5.2's new configuration features such as `externalClassLoader`.  ---  **Issue Links:** - #17595 Compatibility with Hibernate Validator 5.2 GA / 5.2.1 - #17679 Upgrade to Hibernate ORM 5.0 RC1 and Hibernate Validator 5.2 RC1 - #18060 Upgrade to JPA 2.1+ and Bean Validation 1.1+  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/09fde31732cb380c1ac5783f75220119b3733e17","closed","type: enhancement,","spring-projects-issues","2015-02-25T14:54:03Z","2019-01-11T21:26:00Z"
"","17274","Support for JMS 2.1 [SPR-12675]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12675](https://jira.spring.io/browse/SPR-12675?redirect=false)** and commented  JMS 2.1 is likely to define an alternative to EJB Message-Driven Beans, in the form of annotated listener methods - very similar to Spring 4.1's `@JmsListener`. Let's track that spec revision and support any standard variant of this next to Spring's own mechanism, as far as feasible.  ---  **Issue Links:** - #18366 Upgrade to JMS 2.0+","closed","type: enhancement,","spring-projects-issues","2015-01-30T03:15:38Z","2019-01-11T19:00:18Z"
"","17273","Support for Servlet 4.0 API [SPR-12674]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12674](https://jira.spring.io/browse/SPR-12674?redirect=false)** and commented  A placeholder for dedicated Servlet 4.0 support, such as declaring push resources in an MVC controller. Targeting Spring Framework 5.0 in Q2 2017, against Servlet 4.0 public final draft.  ---  **Issue Links:** - #19036 Comprehensive Servlet 3.1 support in spring-web and spring-test - #17781 Drop Servlet 2.5 runtime compatibility - #19490 Support for JSON Binding API (JSON-B) - #19942 Compatibility with Servlet 4.0 final draft - #20434 Upgrade to Servlet API 4.0 for MVC (PushBuilder and Servlet mocks) - #19883 Make use of Servlet 4.0 mapping introspection when available  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eeb01db88821b988edbda405d6726149c12dc8bc, https://github.com/spring-projects/spring-framework/commit/199aa776c96d9a50ff4fcbf18673eb59960c6d48  2 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2015-01-30T02:35:04Z","2019-01-11T19:00:26Z"
"","17192","Migration guide from 4.1 to 4.2 (deprecations etc) [SPR-12591]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12591](https://jira.spring.io/browse/SPR-12591?redirect=false)** and commented  https://github.com/spring-projects/spring-framework/wiki/Migrating-from-earlier-versions-of-the-spring-framework  ---  **Issue Links:** - #17191 No clear migration guide from 4.0 to 4.1 (-> dependency versions)","closed","","spring-projects-issues","2015-01-01T04:56:44Z","2019-01-11T18:38:26Z"
"","17186","General compatibility with JDK 8u40 [SPR-12585]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12585](https://jira.spring.io/browse/SPR-12585?redirect=false)** and commented  JDK 8 update 40 is scheduled for general availability in March 2015. In the Spring Framework 4.1.5 timeframe, we need to make sure that the framework is fully runtime-compatible with it and that our build and test suite execute fine on 8u40.  ---  **Affects:** 4.1.4  **Issue Links:** - #17151 Compatibility with JDK 9 Jigsaw Builds - #17183 ExtendedBeanInfo test fails on JDK 8u40 Build b19 - #17608 General compatibility with JDK 8u60","closed","type: task,","spring-projects-issues","2014-12-31T07:10:43Z","2019-01-11T18:24:19Z"
"","17179","Remove pre-3.2 deprecated classes and methods [SPR-12578]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12578](https://jira.spring.io/browse/SPR-12578?redirect=false)** and commented  The Spring Framework codebase still contains many classes and methods which have been deprecated before 3.2, in particular from the 3.1 timeframe. As of Spring Framework 4.2, more than three years after the introduction of those deprecation markers, we should consistently remove those artifacts, except for old extension points with ongoing use in third-party libraries.  ---  **Affects:** 4.1.4  **Issue Links:** - #18695 Re-introduce deprecated addConstructorArg method (again) - #21718 Removed Jackson view property ""renderedAttributes"" still mentioned in Spring Framework docs - #17811 JdbcTemplate.queryForObject(sql, .class) produces TypeMismatchDataAccessException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9ac02b319d2fde39b5bb1cf11b5525b4f55cd198","closed","type: task,","spring-projects-issues","2014-12-30T09:20:18Z","2019-01-11T18:24:59Z"
"","17177","Compatibility with Groovy 2.4 [SPR-12576]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12576](https://jira.spring.io/browse/SPR-12576?redirect=false)** and commented  Running our test suite against the recently released Groovy 2.4 RC1.  ---  **Affects:** 4.1.3  **Issue Links:** - #17166 Compatibility with Jackson 2.5 - #19970 Compatibility with Groovy 2.5","closed","type: task,","spring-projects-issues","2014-12-29T11:24:08Z","2019-01-11T18:24:51Z"
"","17175","Spring's JMX support can rely on native MXBean detection on Java 6+ [SPR-12574]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12574](https://jira.spring.io/browse/SPR-12574?redirect=false)** and commented  Spring's `JmxUtils` and `MBeanClientInterceptor` historically have conditional MXBean support due to Java 5 compatibility concerns. Since Spring 4 is Java 6+, that code may get refined towards native MXBean detection via the Java 6 `JMX` class.  ---  **Affects:** 4.0.8, 4.1.3  **Issue Links:** - #17173 Improve diagnostics when AnnotationJmxAttributeSource triggers an ArrayStoreException from Class.getAnnotation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dff2a3d18059eca92c7418f2e34df861101b223a, https://github.com/spring-projects/spring-framework/commit/4a27a9870276dc78bcf04f0b1a6ed322c6c8cce6, https://github.com/spring-projects/spring-framework/commit/0919a15f915590db274c135084b6f939a7a508c0  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-12-29T04:23:41Z","2019-01-11T18:24:47Z"
"","17902","Multipart request tests fail when enabling spring security [SPR-13317]","**[José Carlos Valero Sánchez](https://jira.spring.io/secure/ViewProfile.jspa?name=calamarbicefalo)** opened **[SPR-13317](https://jira.spring.io/browse/SPR-13317?redirect=false)** and commented  After enabling SpringSecurity parts in a multipart file are not properly extracted anymore because of Request being wrapped.  Disabling security make the test pass, and similar tests with non-multipart method work as expected.  The given test is an example to reproduce the bug:  ```java @Test public void postNewResourceDefinitionShouldReturnLocationHeader() throws Exception {     mvc.perform((fileUpload(""/documents/""))                     .file(""file"", ""abc"".getBytes())                     .file(new MockMultipartFile(""metadata"", ""metadata"", ""application/json"", ""{\""name\"":\""yeeeah\""}"".getBytes()))                     .with(writeOnlyUser)     )             .andExpect(header().string(""location"", not(isEmptyOrNullString())))     .andExpect(header().string(""location"", containsString(""http://localhost/documents/"")))     ; } ```  Producing the exception:  ``` Caused by: java.lang.IllegalArgumentException: Failed to obtain request part: metadata. The part is missing or multipart processing is not configured. Check for a MultipartResolver bean or if Servlet 3.0 multipart processing is enabled. 	at org.springframework.web.multipart.support.RequestPartServletServerHttpRequest.(RequestPartServletServerHttpRequest.java:73) 	at org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver.resolveArgument(RequestPartMethodArgumentResolver.java:149) 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77) 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:129) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:776) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:705) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) 	... 68 more ```    ---  **Affects:** 4.1.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/473dd5e9e8b1442be32e4864eb343bbed923c809","closed","type: bug,","spring-projects-issues","2015-08-05T02:51:33Z","2015-09-01T11:38:22Z"
"","17204","Introduce declarative customization of ApplicationContext before refresh in the TestContext framework [SPR-12603]","**[Josiah Haswell](https://jira.spring.io/secure/ViewProfile.jspa?name=haswellj)** opened **[SPR-12603](https://jira.spring.io/browse/SPR-12603?redirect=false)** and commented  It would be very nice for creating custom test annotations if we could get access to the `GenericApplicationContext` before it's loaded.  For instance:  I'm creating Cassandra and Datomic unit-testing support.  I would like to generate schemata and import data before a test class is run, then clean up after a test is finished. Consider the following scenario:  ```java @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration @CassandraTest(         configurationFile = ""cassandra.yaml"",         timeout = 3600,         port = 9143,         host = ""localhost"",         clusterName = ""cluster"" ) public class CassandraPersistenceTestCase {      @Configuration     static class Config {         // Cassandra configuration ...     }      @Autowired     Cluster cluster;      // test methods ...  } ```  In this scenario, I would like to use the annotation `@CassandraTest` on `CassandraPersistenceTestCase` to:  1. Set up an embedded Cassandra instance 2. Access the application context to register a Cluster configured from the annotation so that I may inject it into the test case.  If I use the `TestExecutionListener` APIs, then I have access to the `PersistenceTestCase` class, but only after the `ApplicationContext` has been refreshed.  If I use the `ApplicationContextInitializer` APIs, then I can access the `ApplicationContext` before it has been refreshed, but I cannot easily access the class annotated by `CassandraTest`.  I could implement all of this very easily if I could only get access to a subclass of the `AbstractGenericContextLoader` (specifically the `customizeContext` method), but everything in the call chain is package-local.  I could even work around this if `TestContextManager` were an interface or an abstract superclass, but it isn't.  My proposal would be to introduce the following classes:  ```java @Retention(RetentionPolicy.RUNTIME) public @interface ContextDecorators {      Class[] value() default {}; } ```  ```java interface ContextDecorator {      void decorate(TestContext context); } ```  Then, in `SpringJUnit4ClassRunner`, check to see if that annotation exists on the test class.  If it does, route it to an implementation of `customizeContext()` in `AbstractGenericContextLoader` that applies each `ContextDecorator` to that context.  This would be minimally invasive and not change the existing behavior at all if the annotation is omitted.  I will submit a pull request along these lines if no one has any objections, or if no superior alternatives are available.  ---  **Affects:** 3.2 GA  **Issue Links:** - #18571 Introduce ContextCustomizer API in the TestContext framework - #18571 Introduce ContextCustomizer API in the TestContext framework (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2015-01-07T16:46:31Z","2019-01-11T19:05:46Z"
"","17450","WebMvcConfigurer callback behavior changes when autowired dependencies are added [SPR-12852]","**[Joshua White](https://jira.spring.io/secure/ViewProfile.jspa?name=joshuawhite929)** opened **[SPR-12852](https://jira.spring.io/browse/SPR-12852?redirect=false)** and commented  The WebMvcConfigurer callback interface currently has 16 methods.  When you implement this interface and have no autowired dependencies, all 16 callback methods are called giving the end user the ability to customize how Spring MVC is set up.  This behavior changes when your WebMvcConfigurer autowires a ContentNegotiationManager or other Spring MVC dependencies.  This creates a problem when you want to use the WebMvcConfigurer callback mechanism to add an Interceptor (for example) that may also need to inject the current ContentNegotiationManager.  I will upload a project to Github (https://github.com/spring-projects/spring-framework-issues) that demonstrates the issue.   ---  **Affects:** 4.1.6  **Reference URL:** https://github.com/spring-projects/spring-framework-issues  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/a5a9449ac67b3191be28b5579cc9d474935ecbb4, https://github.com/spring-projects/spring-framework-issues/commit/cc260d024be720171b40a20f6e62b63b92cf56ab, https://github.com/spring-projects/spring-framework-issues/commit/29a26c750c34e5ba65b27162315b5e5d26b0a0a1, https://github.com/spring-projects/spring-framework-issues/commit/23af0b261fb30b13c8a0aad20c029f7800a14014","closed","status: declined,","spring-projects-issues","2015-03-25T16:06:30Z","2019-01-12T16:23:27Z"
"","17236","Backport encrypted property functionality from spring-cloud-config environment work [SPR-12635]","**[Joshua White](https://jira.spring.io/secure/ViewProfile.jspa?name=joshuawhite929)** opened **[SPR-12635](https://jira.spring.io/browse/SPR-12635?redirect=false)** and commented  The spring-cloud team has implemented a feature that allows users to encrypt properties, prefixing them with {cipher}. This feature is something that would be nice to have in the core spring framework for those that can't yet take advantage of boot.  See the following code for reference:  There is Spring configuration support in [spring-cloud-commons](https://github.com/spring-cloud/spring-cloud-commons/tree/master/spring-cloud-context/src/main/java/org/springframework/cloud/bootstrap/encrypt) and also [server-side support](https://github.com/spring-cloud/spring-cloud-config/blob/master/spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/encryption) where encryption and decryption services are exposed as HTTP endpoints. Also [see documentation](http://projects.spring.io/spring-cloud/spring-cloud.html#_encryption_and_decryption_2).  ---  **Affects:** 4.1.4  **Issue Links:** - #13568 PropertySourcesPlaceholderConfigurer never calls ""convertProperties"" on merged properties - #15294 Add encryption support for PropertyPlaceholderConfigurer - #13603 Allow the use of custom PropertySource annotations in `@Configuration` classes - [SEC-3123](https://jira.spring.io/browse/SEC-3123) Encrypted property value support  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2015-01-16T15:01:34Z","2019-01-13T20:57:39Z"
"","17702","Stomp version 1.1 and 1.2 allows headers with empty values [SPR-13111]","**[Josh King](https://jira.spring.io/secure/ViewProfile.jspa?name=kingjoshdavid)** opened **[SPR-13111](https://jira.spring.io/browse/SPR-13111?redirect=false)** and commented  Spring messaging currently throws a StompConversionException when an incoming message header does not have a value.  Stomp 1.1 and 1.2 spec shows support for headers with empty values https://stomp.github.io/stomp-specification-1.1.html#Augmented_BNF https://stomp.github.io/stomp-specification-1.2.html#Augmented_BNF  ---  **Affects:** 4.1.6  **Issue Links:** - #17995 StompDecoder fails for partial headers containing escape sequence  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7b365583e39f6195a7b2d3b149b9a5290f3ab01f","closed","type: bug,","spring-projects-issues","2015-06-10T12:58:31Z","2019-01-11T16:25:30Z"
"","17791","Make @SessionAttributes  work with @ControllerAdvice [SPR-13199]","**[Joseph](https://jira.spring.io/secure/ViewProfile.jspa?name=fawzyj)** opened **[SPR-13199](https://jira.spring.io/browse/SPR-13199?redirect=false)** and commented  In my application, I need to make some objects available to all controllers using the session, these objects are loaded depending on the current loged in user.  I think that this functionality can be extracted in a common `@ControllerAdvice` class, but unfortunately `@SessionAttributes` does not work properly on `@ControllerAdvice` classes   ---  **Affects:** 4.1.7","closed","type: enhancement,","spring-projects-issues","2015-07-05T03:34:31Z","2018-12-05T18:12:52Z"
"","17667","DefaultMockMvcBuilder combined with @ContextHierarchy registers wrong context as ROOT [SPR-13075]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-13075](https://jira.spring.io/browse/SPR-13075?redirect=false)** and commented  When you have test class that looks like this:  ```java @RunWith(SpringJUnit4ClassRunner.class) @ContextHierarchy({     @ContextConfiguration(classes = DemoApplicationTests.RootConfig.class),     @ContextConfiguration(classes = DemoApplicationTests.ServletConfig.class) }) @WebAppConfiguration public class DemoApplicationTests {     // .... ```  ... and you bootstrap a `MockMvc` variable using `MockMvcBuilders.webAppContextSetup(applicationContext).build()`, you end up with the wrong `WebApplicationContext` getting registered as the ROOT context in the mocked `ServletContext`.  We found this when upgrading an app using the Thymeleaf Spring Security dialect: their code expects some security expression handler bean which we register in the root context, but since the wrong context is found the code fails.  The corresponding code change was introduced in Spring 4.1.4, probably as part of #17155.  There's a check missing to see if the given context is in fact the root context in `DefaultMockMvcBuilder#initWebAppContext()`. A similar check is done in other places of the test support (like the `AbstractGenericWebContextLoader`).  I've attached a project with (only) a test case to reproduce the issue. By commenting out the line of code which created the `MockMvc` or by lowering the Spring version to 4.1.3 the test case passes, but as given it fails. I think it should succeed, and the most likely solution seems to navigate the context hierarchy to find the real root context in `DefaultMockMvcBuilder#initWebAppContext()`: I'll leave that up to you guys to decide. ;)  ---  **Affects:** 4.1.4, 4.1.5, 4.1.6  **Attachments:** - [spring-bug.zip](https://jira.spring.io/secure/attachment/22837/spring-bug.zip) (_2.38 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/321c4c354c822eec2ff1e8ac8cbdbf85881cd22e","closed","type: bug,","spring-projects-issues","2015-05-27T07:32:14Z","2019-01-11T15:46:10Z"
"","17193","ResourceUrlProvider should initialize only once [SPR-12592]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-12592](https://jira.spring.io/browse/SPR-12592?redirect=false)** and commented  Currently, the ResourceUrlProvider auto-initializes itself on every ContextRefreshedEvent. This breaks down when the application has all beans configured in the root context and uses an empty web application context for its DispatcherServlet. The ContextRefreshedEvent of the latter is handled by the ResourceUrlProvider after it has already properly initialized itself, thereby causing it to empty its handlerMap.  I would suggest to set the `autodetect` flag to false in `onApplicationEvent` if the `handlerMap` is non-empty after calling `detectResourceHandlers`. Right now it's quite complicated to work around this issue.  ---  **Affects:** 4.1.4  **Issue Links:** - #17248 ResourceUrlProvider does not keep resource handlers ordered  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2bf6b41bcc02ac137d2fc4b2731057c55157d16f, https://github.com/spring-projects/spring-framework/commit/f902fb911c5cbdbc73abbdbbaf00a11436151029  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2015-01-02T09:25:49Z","2019-01-11T18:38:21Z"
"","17801","ResourceBundleThemeSource could expose the property fallbackToSystemLocale of ResourceBundleMessageSource [SPR-13209]","**[Jordi Llach Fernandez](https://jira.spring.io/secure/ViewProfile.jspa?name=jllachf)** opened **[SPR-13209](https://jira.spring.io/browse/SPR-13209?redirect=false)** and commented  `ResourceBundleThemeSource` is responsible for creating a `MessageSource`, which in fact is a `ResourceBundleMessageSource`, the last one can be configured to avoid using the fallback to system locale mechanism by setting fallbackToSystemLocale to false.  I think it would be useful to make this property visible to `ResourceBundleThemeSource` in order to create `MessageSource` s system locale aware or not.  ---  **Issue Links:** - #12050 Make ResourceBundleMessageSource more flexible (catching up with Java 6's java.util.ResourceBundle)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c7fef87e767898478d5fbe732690081d5f9f2557","closed","type: enhancement,","spring-projects-issues","2015-07-07T07:12:36Z","2019-01-11T18:06:13Z"
"","17280","RequestMappingHandlerMapping unable to map urls if start class has package name too long  [SPR-12681]","**[Jonatas Chagas](https://jira.spring.io/secure/ViewProfile.jspa?name=jonatas.chagas)** opened **[SPR-12681](https://jira.spring.io/browse/SPR-12681?redirect=false)** and commented  Version: spring-boot-starter (org.springframework.boot:spring-boot-starter-web) with gradle org.springframework.boot:spring-boot-gradle-plugin:1.1.5.RELEASE  When using a long package name for the ""Start-Class"" the framework has problems to generate a proper MANIFEST.MF file in the final ""war"" file. The issue seems to be that in the MANIFEST.MF file, the ""Start-Class"" property breaks the line if the package or the class name exceeds certain length of characters. Here's an example of broken MANIFEST file:  Manifest-Version: 1.0 Start-Class: com.mycompany.marketing.reports.postbacks.base.Applicati on Spring-Boot-Version: 1.1.5.RELEASE Main-Class: org.springframework.boot.loader.WarLauncher  When deploying the war file, everything seems to be ok except that the `@RequestMapping` doesn't work. It was really hard to find out why the requests were not being mapped since there were no ""warnings"" or ""errors"" generated by the framework to prevent this.   --- No further details from [SPR-12681](https://jira.spring.io/browse/SPR-12681?redirect=false)","closed","status: invalid,","spring-projects-issues","2015-02-03T03:10:54Z","2019-01-12T05:24:44Z"
"","17498","Support expression in @SendTo for JMS endpoints [SPR-12899]","**[John W](https://jira.spring.io/secure/ViewProfile.jspa?name=jdigweed)** opened **[SPR-12899](https://jira.spring.io/browse/SPR-12899?redirect=false)** and commented  I have a case where a JMSListener needs to send back a message on the original queue/topic it was received.  Here is a really small version of what I am trying to do:  ``` foo.topic=my.foo.topic ```  ```java @Component public class FooReceiver { ...  @JmsListener(destination = ""${foo.topic}"")  @SendTo(""${foo.topic}"")  public Message handleFooMessage(final String message) {  ...   Message reply = MessageBuilder.withPayload(someString).build();   return reply;  } ```  The replies were never showing up.  I set a JMSReplyTo on the incoming message, and then the reply worked. Strange..  So I started stepping through org.springframework.jms.config.MethodJmsListenerEndpoint.getDefaultResponseDestination() to make sure that I wasn't having some sort of proxy issue (i.e. #17118). On line 122 though, I could see the issue - the value of  ```java return (String) destinations[0]; ```  shows up as  ```java [${foo.topic}] ```  In other words, it does not appear to be getting expanded. Sure enough, in my activemq queue list I see a queue named ${foo.topic}.  Should I expect this property to be getting expanded inside the `@SendTo` annotation?  Thanks John  ---  **Affects:** 4.1.4  **Issue Links:** - #16784 Support destination variable placeholders in `@SendTo` and `@SendToUser` for STOMP endpoints  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f98a6c6b6ac6e391f3eee7c4a7f8690a869403fd","closed","type: enhancement,","spring-projects-issues","2015-04-08T15:07:49Z","2019-01-13T20:56:48Z"
"","18117","MessageHeaders is declared immutable - but writeObject() removes any non-serializable fields [SPR-13541]","**[John Nichol](https://jira.spring.io/secure/ViewProfile.jspa?name=johnrnichol)** opened **[SPR-13541](https://jira.spring.io/browse/SPR-13541?redirect=false)** and commented  org.springframework.messaging.MessageHeaders clearly states it is immutable in its JavaDoc. However the private void writeObject(ObjectOutputStream out) method any non-serializable values in the map are actually removed from the headers,  this.headers.remove(key);  rather than simply not being placed in the output stream.  So a result (and I appreciate this is probably an usual use case), if the MessageHeaders are serialized in say a ChannelInterceptor it is possible to break a message flow by accidentally removing the reply-channel from the headers.  The correct implementation is to write the keys/values that ARE serializable as a map into the output stream rather than the whole map.  ---  **Affects:** 4.2.1  **Issue Links:** - #17966 MessageHeaders mutable through Map.Entry.setValue()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/181533c4641ef0b1ea076c4299b2f4c6ffc93657","closed","type: bug,","spring-projects-issues","2015-03-18T10:34:59Z","2019-01-11T17:26:15Z"
"","17636","MockRestRequestMatchers should have matchers for form data [SPR-13044]","**[John Mark](https://jira.spring.io/secure/ViewProfile.jspa?name=springiscool)** opened **[SPR-13044](https://jira.spring.io/browse/SPR-13044?redirect=false)** and commented  RestTemplate makes it easy to POST `application/x-www-form-urlencoded` data using a MultiValueMap. The problem I am having is that there is no easy way to test this.  MockRestRequestMatchers has jsonPath and xpath matchers, but nothing to match form data. Currently, the only way to verify the form data would be to manually assemble the expected string, but that is clumsy and can be error prone,  and can break if the order of parameters changes.  ---  **Affects:** 4.2.4  **Issue Links:** - #18306 Parse form data request content and populate request params in Spring MVC Test  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1416c2a00e4624bf7b2ce18a3d9b1ca7ae7096b4  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-05-18T08:25:17Z","2019-01-11T16:01:25Z"
"","17312","All HttpMessageConverters should support StreamingHttpOutputMessage [SPR-12715]","**[John Mark](https://jira.spring.io/secure/ViewProfile.jspa?name=springiscool)** opened **[SPR-12715](https://jira.spring.io/browse/SPR-12715?redirect=false)** and commented  I would be nice if HttpComponentsClientHttpRequestFactory was able to fully support streaming (non-buffered) requests.  Currently, the HttpComponentsStreamingClientHttpRequest class does not support the getBodyInternal() method which prevents it from being used with many MessageConverters.  I would think the HttpComponentsClientHttpRequestFactory should mirror the SimpleClientHttpRequestFactory which does provide full streaming support.  ---  **Issue Links:** - #15825 Error while using HttpComponentsStreamingClientHttpRequest (_**""is duplicated by""**_) - #18480 Regression: BufferedImageHttpMessageConverter does not set content-type header - #21650 HttpComponentsStreamingClientHttpRequest fails if restTemplate has interceptors  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8ab2e47556e91b0d0cf71ad9bede7d8cbcd968c4","closed","type: enhancement,","spring-projects-issues","2015-02-13T11:06:32Z","2019-01-11T21:28:54Z"
"","17641","Http message conversion not finding Jackson JDK8 module in context [SPR-13049]","**[John Franco](https://jira.spring.io/secure/ViewProfile.jspa?name=john_f_xoom)** opened **[SPR-13049](https://jira.spring.io/browse/SPR-13049?redirect=false)** and commented  Despite having a Jackson JDK 8 module bean available in the context, deserializing a request having an Optional\ field fails with an error indicating that the object mapper in use does not have the module installed.  The attached git bundle has a maven project and a unit test to reproduce the problem.  The unit test demonstrates that the object mapper available from the context does have the module installed (by deserializing a JSON string into an object having an Optional\ field), which seems to indicate that the http message handling is using a different object mapper that doesn't have the module installed.  ---  **Affects:** 4.1.6  **Attachments:** - [spring-jackson-jdk8-bug.bundle](https://jira.spring.io/secure/attachment/22824/spring-jackson-jdk8-bug.bundle) (_6.96 kB_) - [spring-jackson-jdk8-bug.bundle](https://jira.spring.io/secure/attachment/22812/spring-jackson-jdk8-bug.bundle) (_6.04 kB_)  **Issue Links:** - #17574 Automatically register Jackson's JDK 8 module when available","closed","status: invalid,","spring-projects-issues","2015-05-19T16:07:22Z","2019-01-12T05:24:18Z"
"","17536","ttpMessageConverterExtractor.extractData should TRY each HttpMessageConverter [SPR-12943]","**[John Cao](https://jira.spring.io/secure/ViewProfile.jspa?name=jhcao23)** opened **[SPR-12943](https://jira.spring.io/browse/SPR-12943?redirect=false)** and commented  Please see attachment Java file.  In HttpMessageConverterExtractor.extractData method, it loops for all HttpMessageConverter to return the converted result. This is correct but not perfect. Sometimes, it's not always possible to determine canRead with only 'return type' and MediaType. So my suggestion is, within the for loop, 'TRY' each HttpMessageConverter - I mean wrap the return statement within a try-catch. As I said, it's possible that one or more HttpMessageConverter canRead but in practice it throws IOException, then with the round robin loop, it may ultimately find the last one HttpMessageConverter which canRead and really convert the data into the expected return type. If none of them did the expected conversion, let RestClientException throw as usual.  For example, I've encounter an issue when I am writing a spring-social project: the 3rd party server return 'text/plain' header for a request URL, no matter the actual response content is an image(byte[]) or json or html or real text. Also some other URLs can possibly return 'text/plain' for json response data. So the best alternative for me is to add more MediaType to some of my converters such as add 'text/plain' to byte converter and json converter both. But from a consistent perspective I really don't like this way as it looks messy.  Let's focus only on this method: I don't like to rely on canRead for control flow either, however, this method's current code does rely on canRead. The problem is this 'canRead' sometimes doesn't mean it really really can read. It only reflects it possibly can read by looking at the MediaType and response type, it doesn't look into the actual data; and there is no easy way to override the converters' canRead method. So I think I have to override this method: HttpMessageConverterExtractor.extractData.   ---  **Affects:** 4.1.7  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/779#event-285171662  **Attachments:** - [HttpMessageConverterExtractor.java](https://jira.spring.io/secure/attachment/22757/HttpMessageConverterExtractor.java) (_5.96 kB_)","closed","type: enhancement,","spring-projects-issues","2015-04-21T21:45:48Z","2015-04-24T06:45:06Z"
"","17261","@TestExecutionListeners is not fully supported as a meta-annotation [SPR-12661]","**[John Bass](https://jira.spring.io/secure/ViewProfile.jspa?name=jbass203)** opened **[SPR-12661](https://jira.spring.io/browse/SPR-12661?redirect=false)** and commented  #### Status Quo  When using TestNG and deriving a test from `AbstractTestNGSpringContextTests`, `@TestExecutionListeners` as a meta-annotation doesn't seem to be working.  Here's a little 3-class test:  ```java @Target({TYPE, ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @TestExecutionListeners(listeners=MyTestExecutionListener.class, mergeMode=MergeMode.MERGE_WITH_DEFAULTS) public @interface Composed { } ```  ```java public class MyTestExecutionListener extends AbstractTestExecutionListener { 	private static final Logger logger = LoggerFactory.getLogger( MyTestExecutionListener.class ); 	 	@Override 	public void prepareTestInstance( final TestContext testContext ) throws Exception { 		logger.trace( ""prepareTestInstance()"" ); 	}  } ```  ```java @ContextConfiguration @Composed public class Experiment extends AbstractTestNGSpringContextTests { 	@Configuration 	static class Configurer { 		@Bean 		public Object object() { 			return new Object(); 		} 	} 	 	@Test 	public void aTest() { 	} } ```  Here's some output when this is run:  ``` [org.springframework.test.context.BootstrapUtils] - Instantiating TestContextBootstrapper from class [org.springframework.test.context.support.DefaultTestContextBootstrapper] [org.springframework.test.context.support.ContextLoaderUtils] - Retrieved @ContextConfiguration attributes [{name=, value=[], classes=[], loader=interface org.springframework.test.context.ContextLoader, locations=[], initializers=[], inheritLocations=true, inheritInitializers=true}] for declaring class [com.comcast.cpt.test.Experiment]. [org.springframework.test.context.support.ContextLoaderUtils] - Resolved context configuration attributes: [ContextConfigurationAttributes@5a49cb8c declaringClass = 'com.comcast.cpt.test.Experiment', classes = '{}', locations = '{}', inheritLocations = true, initializers = '{}', inheritInitializers = true, name = [null], contextLoaderClass = 'org.springframework.test.context.ContextLoader'] [org.springframework.test.context.support.DefaultTestContextBootstrapper] - Resolving ContextLoader for context configuration attributes [ContextConfigurationAttributes@5a49cb8c declaringClass = 'com.comcast.cpt.test.Experiment', classes = '{}', locations = '{}', inheritLocations = true, initializers = '{}', inheritInitializers = true, name = [null], contextLoaderClass = 'org.springframework.test.context.ContextLoader'] [org.springframework.test.context.support.DefaultTestContextBootstrapper] - Using ContextLoader class [org.springframework.test.context.support.DelegatingSmartContextLoader] for test class [com.comcast.cpt.test.Experiment] [org.springframework.test.context.support.DefaultTestContextBootstrapper] - Processing locations and classes for context configuration attributes [ContextConfigurationAttributes@5a49cb8c declaringClass = 'com.comcast.cpt.test.Experiment', classes = '{}', locations = '{}', inheritLocations = true, initializers = '{}', inheritInitializers = true, name = [null], contextLoaderClass = 'org.springframework.test.context.ContextLoader'] [org.springframework.test.context.support.AbstractDelegatingSmartContextLoader] - Delegating to GenericXmlContextLoader to process context configuration [ContextConfigurationAttributes@5a49cb8c declaringClass = 'com.comcast.cpt.test.Experiment', classes = '{}', locations = '{}', inheritLocations = true, initializers = '{}', inheritInitializers = true, name = [null], contextLoaderClass = 'org.springframework.test.context.ContextLoader']. [org.springframework.test.context.support.AbstractContextLoader] - Did not detect default resource location for test class [com.comcast.cpt.test.Experiment]: class path resource [com/comcast/cpt/test/Experiment-context.xml] does not exist [org.springframework.test.context.support.AbstractContextLoader] - Could not detect default resource locations for test class [com.comcast.cpt.test.Experiment]: no resource found for suffixes {-context.xml}. [org.springframework.test.context.support.AbstractDelegatingSmartContextLoader] - Delegating to AnnotationConfigContextLoader to process context configuration [ContextConfigurationAttributes@5a49cb8c declaringClass = 'com.comcast.cpt.test.Experiment', classes = '{}', locations = '{}', inheritLocations = true, initializers = '{}', inheritInitializers = true, name = [null], contextLoaderClass = 'org.springframework.test.context.ContextLoader']. [org.springframework.test.context.support.AbstractDelegatingSmartContextLoader] - AnnotationConfigContextLoader detected default configuration classes for context configuration [ContextConfigurationAttributes@5a49cb8c declaringClass = 'com.comcast.cpt.test.Experiment', classes = '{class com.comcast.cpt.test.Experiment$Configurer}', locations = '{}', inheritLocations = true, initializers = '{}', inheritInitializers = true, name = [null], contextLoaderClass = 'org.springframework.test.context.ContextLoader']. [org.springframework.test.context.support.ApplicationContextInitializerUtils] - Processing context initializers for context configuration attributes [ContextConfigurationAttributes@5a49cb8c declaringClass = 'com.comcast.cpt.test.Experiment', classes = '{class com.comcast.cpt.test.Experiment$Configurer}', locations = '{}', inheritLocations = true, initializers = '{}', inheritInitializers = true, name = [null], contextLoaderClass = 'org.springframework.test.context.ContextLoader'] [org.springframework.test.context.support.ActiveProfilesUtils] - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [com.comcast.cpt.test.Experiment]  // notice this interesting line ... [org.springframework.test.context.support.DefaultTestContextBootstrapper] - Retrieved @TestExecutionListeners attributes [{value=[class org.springframework.test.context.web.ServletTestExecutionListener,class org.springframework.test.context.support.DependencyInjectionTestExecutionListener,class org.springframework.test.context.support.DirtiesContextTestExecutionListener], listeners=[], inheritListeners=true, mergeMode=REPLACE_DEFAULTS}] for declaring class [com.comcast.cpt.test.Composed].  [org.springframework.test.context.support.DefaultTestContextBootstrapper] - Retrieved @TestExecutionListeners attributes [{value=[class org.springframework.test.context.web.ServletTestExecutionListener,class org.springframework.test.context.support.DependencyInjectionTestExecutionListener,class org.springframework.test.context.support.DirtiesContextTestExecutionListener], listeners=[], inheritListeners=true, mergeMode=REPLACE_DEFAULTS}] for declaring class [org.springframework.test.context.testng.AbstractTestNGSpringContextTests]. [org.springframework.test.context.support.DefaultTestContextBootstrapper] - Could not instantiate TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener]. Specify custom listener classes or make the default listener classes (and their required dependencies) available. Offending class: [javax/servlet/ServletContext] [org.springframework.test.context.support.DefaultTestContextBootstrapper] - Could not instantiate TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener]. Specify custom listener classes or make the default listener classes (and their required dependencies) available. Offending class: [javax/servlet/ServletContext] [org.springframework.test.context.support.DefaultTestContextBootstrapper] - Using TestExecutionListeners: [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@223dd567, org.springframework.test.context.support.DirtiesContextTestExecutionListener@9856ec1, org.springframework.test.context.support.DependencyInjectionTestExecutionListener@172a45c9, org.springframework.test.context.support.DirtiesContextTestExecutionListener@584b9b00] [org.springframework.test.context.TestContextManager] - Registering TestExecutionListener: org.springframework.test.context.support.DependencyInjectionTestExecutionListener@223dd567 [org.springframework.test.context.TestContextManager] - Registering TestExecutionListener: org.springframework.test.context.support.DirtiesContextTestExecutionListener@9856ec1 [org.springframework.test.context.TestContextManager] - Registering TestExecutionListener: org.springframework.test.context.support.DependencyInjectionTestExecutionListener@172a45c9 [org.springframework.test.context.TestContextManager] - Registering TestExecutionListener: org.springframework.test.context.support.DirtiesContextTestExecutionListener@584b9b00 [TestNG] Running:   /private/var/folders/h1/s64jf53x51gcgns7trlqc230074rk5/T/testng-eclipse--225524899/testng-customsuite.xml  [org.springframework.test.context.TestContextManager] - beforeTestClass(): class [com.comcast.cpt.test.Experiment] [org.springframework.test.context.TestContextManager] - prepareTestInstance(): instance [com.comcast.cpt.test.Experiment@44875666] [org.springframework.test.context.support.DependencyInjectionTestExecutionListener] - Performing dependency injection for test context [[DefaultTestContext@19264fa9 testClass = Experiment, testInstance = com.comcast.cpt.test.Experiment@44875666, testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@2237ed25 testClass = Experiment, locations = '{}', classes = '{class com.comcast.cpt.test.Experiment$Configurer}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]]]. [org.springframework.test.context.support.AbstractDelegatingSmartContextLoader] - Delegating to AnnotationConfigContextLoader to load context from [MergedContextConfiguration@2237ed25 testClass = Experiment, locations = '{}', classes = '{class com.comcast.cpt.test.Experiment$Configurer}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]. [org.springframework.test.context.support.AbstractGenericContextLoader] - Loading ApplicationContext for merged context configuration [[MergedContextConfiguration@2237ed25 testClass = Experiment, locations = '{}', classes = '{class com.comcast.cpt.test.Experiment$Configurer}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]]. [org.springframework.test.context.support.AnnotationConfigContextLoader] - Registering annotated classes: {class com.comcast.cpt.test.Experiment$Configurer} [org.springframework.core.io.support.SpringFactoriesLoader] - Loaded [org.springframework.beans.BeanInfoFactory] names: [org.springframework.beans.ExtendedBeanInfoFactory] [org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate] - Storing ApplicationContext in cache under key [[MergedContextConfiguration@2237ed25 testClass = Experiment, locations = '{}', classes = '{class com.comcast.cpt.test.Experiment$Configurer}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]] [org.springframework.test.context.cache] - Spring test ApplicationContext cache statistics: [ContextCache@50b7c740 size = 1, hitCount = 0, missCount = 1, parentContextCount = 0] [org.springframework.test.context.support.DependencyInjectionTestExecutionListener] - Performing dependency injection for test context [[DefaultTestContext@19264fa9 testClass = Experiment, testInstance = com.comcast.cpt.test.Experiment@44875666, testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@2237ed25 testClass = Experiment, locations = '{}', classes = '{class com.comcast.cpt.test.Experiment$Configurer}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]]]. [org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate] - Retrieved ApplicationContext from cache with key [[MergedContextConfiguration@2237ed25 testClass = Experiment, locations = '{}', classes = '{class com.comcast.cpt.test.Experiment$Configurer}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]] [org.springframework.test.context.cache] - Spring test ApplicationContext cache statistics: [ContextCache@50b7c740 size = 1, hitCount = 1, missCount = 1, parentContextCount = 0] [org.springframework.test.context.TestContextManager] - beforeTestMethod(): instance [com.comcast.cpt.test.Experiment@44875666], method [public void com.comcast.cpt.test.Experiment.aTest()] [org.springframework.test.context.TestContextManager] - afterTestMethod(): instance [com.comcast.cpt.test.Experiment@44875666], method [public void com.comcast.cpt.test.Experiment.aTest()], exception [null] [org.springframework.test.context.support.DirtiesContextTestExecutionListener] - After test method: context [DefaultTestContext@19264fa9 testClass = Experiment, testInstance = com.comcast.cpt.test.Experiment@44875666, testMethod = aTest@Experiment, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@2237ed25 testClass = Experiment, locations = '{}', classes = '{class com.comcast.cpt.test.Experiment$Configurer}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]], class dirties context [false], class mode [null], method dirties context [false]. [org.springframework.test.context.support.DirtiesContextTestExecutionListener] - After test method: context [DefaultTestContext@19264fa9 testClass = Experiment, testInstance = com.comcast.cpt.test.Experiment@44875666, testMethod = aTest@Experiment, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@2237ed25 testClass = Experiment, locations = '{}', classes = '{class com.comcast.cpt.test.Experiment$Configurer}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]], class dirties context [false], class mode [null], method dirties context [false]. [org.springframework.test.context.TestContextManager] - afterTestClass(): class [com.comcast.cpt.test.Experiment] [org.springframework.test.context.support.DirtiesContextTestExecutionListener] - After test class: context [DefaultTestContext@19264fa9 testClass = Experiment, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@2237ed25 testClass = Experiment, locations = '{}', classes = '{class com.comcast.cpt.test.Experiment$Configurer}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]], dirtiesContext [false]. [org.springframework.test.context.support.DirtiesContextTestExecutionListener] - After test class: context [DefaultTestContext@19264fa9 testClass = Experiment, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@2237ed25 testClass = Experiment, locations = '{}', classes = '{class com.comcast.cpt.test.Experiment$Configurer}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]], dirtiesContext [false]. ```  ---  #### Analysis  In the above log output, it's clear that the `listeners` declared via `@TestExecutionListeners` on `@Composed` are somehow getting set to the listeners declared via `@TestExecutionListeners` on `AbstractTestNGSpringContextTests`.  ---  **Affects:** 4.1 GA  **Issue Links:** - #16221 Favor more locally declared composed annotations over inherited annotations (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2015-01-23T18:44:10Z","2019-01-13T05:42:36Z"
"","17234","AnnotationTypeFilter not finding java.lang annotations as meta annotations [SPR-12633]","**[John Bass](https://jira.spring.io/secure/ViewProfile.jspa?name=jbass203)** opened **[SPR-12633](https://jira.spring.io/browse/SPR-12633?redirect=false)** and commented  After upgraded from Spring 4.0.2.RELEASE to 4.1.4.RELEASE, I noticed that the AnnotationTypeFilter class is no longer able to find meta annotations.  Here's a snippet:      public @interface MetaAnnotation {     }           @MetaAnnotation     public @interface CustomAnnotation {     }          @CustomAnnotation     public class TestBean {     }          @Test     public void metaAnnotationNotWorking() throws Exception {     	AnnotationTypeFilter typeFilter = new AnnotationTypeFilter( MetaAnnotation.class, true );     	ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider( false );     	provider.addIncludeFilter( typeFilter );     	Set candidates = provider.findCandidateComponents( TestBean.class.getPackage().getName() );     	assert !candidates.isEmpty();     }  ---  **Affects:** 4.1.4  **Issue Links:** - #16198 Support meta-annotation attribute overrides in ASM-based annotation processing","closed","in: core,","spring-projects-issues","2015-01-14T17:20:29Z","2019-01-12T16:34:25Z"
"","17709","Doc: Static @Bean methods cannot refer to each other with Spring scoping semantics [SPR-13118]","**[Johannes Zick](https://jira.spring.io/secure/ViewProfile.jspa?name=grannath)** opened **[SPR-13118](https://jira.spring.io/browse/SPR-13118?redirect=false)** and commented  In our project, we use a custom `Scope` that can be controlled to some degree by the application. The Bean is declared in a `@Configuration` class using the `@Bean` annotation. The same class contains the `CustomScopeConfigurer` declaration referencing the `Scope` by method name.  ``` @Configuration public class Configuration {     @Bean     static CustomScope getCustomScope()     {         return new CustomScope();     }      @Bean     static CustomScopeConfigurer getCustomScopeConfigurer()     {         CustomScopeConfigurer customScopeConfigurer = new CustomScopeConfigurer();         customScopeConfigurer.addScope(""customScope"", getCustomScope());         return customScopeConfigurer;     } } ```  To control the custom `Scope`, we tried to inject it using `@Autowired`. This resulted in a new Bean being created. To access the Bean being used internally, we have to inject the `ApplicationContext`, retrieve the `BeanFactory`, then the registered `Scope`.  Usually, one would expect to have easy access to the custom `Scope`, since it is declared in the same `@Configuration` class. But apparently it lives in a completely separate Context. I can access it, however, via public methods.  I would highly recommend to change this, and add a word or two to the Javadocs. Either have it in a separate `Context` and not accessible, or allow access and make it injectable. The current behavior is inconsistent and not documented, as far as I can tell.  ---  **Affects:** 4.1.5  **Issue Links:** - #17875 Doc: Autowiring in `@Configuration` classes with post-processor definitions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f58e1db2e69b2bc0bcb4da7d83c01c1c9b56695d","closed","in: core,","spring-projects-issues","2015-06-12T07:40:02Z","2019-01-13T05:40:36Z"
"","17349","ScriptUtils and ScriptStatementFailedException confuse lines and statements [SPR-12752]","**[Johannes Mockenhaupt](https://jira.spring.io/secure/ViewProfile.jspa?name=jotomo)** opened **[SPR-12752](https://jira.spring.io/browse/SPR-12752?redirect=false)** and commented  I'm using a `ResourceDatabasePopulator` to initialize a DB for tests. If a SQL statements fails (and `continueOnError` is `false`) an exception like this is raised:  ``` org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement at line 7 of resource class path resource [sql/test-data-insert.sql]: INSERT INTO [...] at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:474) ~[spring-jdbc-4.0.6.RELEASE.jar:4.0.6.RELEASE] ```  The issue is that the exception message is misleading. The statement in question is in line 16 (with comments and blank lines in between), which is the 7th statement. It seems the [lineNumber](https://github.com/spring-projects/spring-framework/blob/master/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java#L454) variable doesn't refer to line numbers but rather to parsed statements.   ---  **Affects:** 4.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/45a80fa3ed66c7dd8555c2599704a59a1d87c53a, https://github.com/spring-projects/spring-framework/commit/8f228d1db4d83a67ec2599870111221e3eea9d62, https://github.com/spring-projects/spring-framework/commit/291b3de72bcf290f07ce901c422e7f5031163e99, https://github.com/spring-projects/spring-framework/commit/448c99f2241fcb26ec3a550bb8dbc323ffa8f0e9, https://github.com/spring-projects/spring-framework/commit/c0e550cfb4b7a3967fd6be33d62e9140d6707852, https://github.com/spring-projects/spring-framework/commit/23d52d5e35d142ae62e2fd8ac29792a664201e03, https://github.com/spring-projects/spring-framework/commit/0f95c81712e6508756a5b2bba6d1f1b0c347438e","closed","type: bug,","spring-projects-issues","2015-02-25T05:57:45Z","2015-03-25T09:42:35Z"
"","17515","Jackson2ObjectMapperBuilder inconsistently used, impossible to customize Jackson ObjectMapper [SPR-12916]","**[Johann Burkard](https://jira.spring.io/secure/ViewProfile.jspa?name=johann%20burkard)** opened **[SPR-12916](https://jira.spring.io/browse/SPR-12916?redirect=false)** and commented  I tried to combat Jackson's buffer bloat (16 KB per-request) by using my own `ObjectMapper` subclass but couldn't.  There is a `Jackson2ObjectMapperBuilder` class that's badly designed right now: It's a stateful factory with static builder methods and it's not possible to control all `ObjectMapper` creation by creating an own `Jackson2ObjectMapperBuilder` bean.  First of all, the `createXmlMapper` attribute has no getters, making it invisible in subclasses and secondly, `WebMvcConfigurationSupport` uses the static builders in `Jackson2ObjectMapperBuilder`.  What I would do is to create two subclasses of `Jackson2ObjectMapperBuilder`, one for XML, one for JSON. Then, I would make all occurrences use the Spring bean, if available.  The workaround for me was to modify the static `BYTE_BUFFER_LENGTHS` and `CHAR_BUFFER_LENGTHS` arrays.   ---  **Affects:** 4.1.6  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/2806","closed","type: enhancement,","spring-projects-issues","2015-04-15T10:02:42Z","2015-05-07T01:43:39Z"
"","17476","AnnotationUtils should use threadsafe ConcurrentMap (contention) [SPR-12878]","**[Johann Burkard](https://jira.spring.io/secure/ViewProfile.jspa?name=johann%20burkard)** opened **[SPR-12878](https://jira.spring.io/browse/SPR-12878?redirect=false)** and commented  ``` 	private static final Map, Boolean> annotatedInterfaceCache = new WeakHashMap, Boolean>(); ... 	private static boolean isInterfaceWithAnnotatedMethods(Class iface) { 		synchronized (annotatedInterfaceCache) { 			Boolean flag = annotatedInterfaceCache.get(iface); ```  is a point of contention in my app and should be replaced by something like `ConcurrentSkipListMap` (but not `ConcurrentHashMap` because `ConcurrentSkipListMap` uses 1/10th the memory initially). Here's a `Comparator` for `WeakReference`:  ``` import java.lang.ref.WeakReference; import java.util.Comparator;  import org.springframework.util.ObjectUtils;  public class WeakReferenceClassComparator implements Comparator> {      @Override     public int compare(WeakReference o1, WeakReference o2) {         if (o1.get() == null && o2.get() == null) {             return 0;         }         return new Integer(ObjectUtils.nullSafeHashCode(o1.get())).compareTo(ObjectUtils.nullSafeHashCode(o2.get()));     }  } ```  ---  **Affects:** 4.0.5, 4.0.8  **Issue Links:** - #16501 ReflectionUtils slow down application startup on WebSphere","closed","type: enhancement,","spring-projects-issues","2015-04-01T11:25:27Z","2019-01-11T21:35:32Z"
"","17529","Investigate possibility of SockJS without sticky sessions [SPR-12936]","**[Johan Frick](https://jira.spring.io/secure/ViewProfile.jspa?name=johanfrick)** opened **[SPR-12936](https://jira.spring.io/browse/SPR-12936?redirect=false)** and commented  (This was posted on Stackoverflow as well, before we realized that you had a Jira. Let us know if you want us to remove it from Stackoverflow.)  We are trying to use spring-websocket with STOMP using SockJS as a fallback option. We have based our solution on this guide: https://spring.io/guides/gs/messaging-stomp-websocket/.  The environment is running multiple tomcats without sticky session.  The problem we have run into is that it is not possible to use the fallback from websocket due to the xhr requests ending up on separate tomcats where the original session does not exist, causing it to retry with a websocket connection and it will continue in this loop.  Is there a preferred way of solving this issue?  We were hoping that spring-session would be an answer but it does not seem to help in this case.  ---  **Affects:** 4.1.5  **Reference URL:** http://stackoverflow.com/questions/29743065/spring-websocket-with-fallback-over-load-balancer  **Issue Links:** - #16243 Support user destinations with multiple WebSocket servers  0 votes, 8 watchers","open","type: enhancement,","spring-projects-issues","2015-04-20T03:45:59Z","2020-08-24T17:41:56Z"
"","17899","MockHttpServletRequest returns empty cookies array instead of null if instance is built using MockHttpServletRequestBuilder [SPR-13314]","**[Joan Parera](https://jira.spring.io/secure/ViewProfile.jspa?name=jparera)** opened **[SPR-13314](https://jira.spring.io/browse/SPR-13314?redirect=false)** and commented  If a `MockHttpServletRequest` is built using the `MockHttpServletRequestBuilder` in Spring MVC Test and no cookies are added, the `getCookies()` method returns an empty array.  However, according to the Servlet API, an implementation of `HttpServletRequest.getCookies()` must return `null` _if the request has no cookies_.   ---  **Affects:** 3.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/93c07e76bc2d20b495314792938361f561be25fb","closed","type: bug,","spring-projects-issues","2015-08-04T11:55:11Z","2015-09-01T11:38:22Z"
"","17610","Validation of frame content in org.springframework.web.socket.sockjs.frame.SockJsFrame is a NoOp [SPR-13019]","**[Joakim Örtbrant](https://jira.spring.io/secure/ViewProfile.jspa?name=joakim.ortbrant)** opened **[SPR-13019](https://jira.spring.io/browse/SPR-13019?redirect=false)** and commented  Validation of frame content in **org.springframework.web.socket.sockjs.frame.SockJsFrame#SockJsFrame** is not doing anything since first line in constructor: **StringUtils.hasText(content)** returns a boolean that is not checked, when content is empty it instead fails on this line: **else if (content.charAt(0) == 'a')** with a **java.lang.StringIndexOutOfBoundsException: String index out of range: 0** exception.  Please update so that a proper exception is thrown   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/633d13ffab0dcafb6baeed6420b8104021aa9801, https://github.com/spring-projects/spring-framework/commit/02d28ae9eef79afef18659b6a140b55720b452da","closed","type: bug,","spring-projects-issues","2015-05-13T04:29:16Z","2015-05-26T01:15:03Z"
"","17736","UriTemplateHandler is not called for requests without url variables [SPR-13145]","**[Jiri Mikulasek](https://jira.spring.io/secure/ViewProfile.jspa?name=pirkojm)** opened **[SPR-13145](https://jira.spring.io/browse/SPR-13145?redirect=false)** and commented  In #17627 some baseUrl - prepending mechanism was introduced in DefaultUriTemplateHandler. When verifying that I unfortunately missed the situation when restTemplate called with URL without some variables and it seems in that situation the UriTemplateHandler [is not invoked at all](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java#L564), which results to inconsistent behaviour.  Please make it consistent - either move the baseUrl prefixing mechanism somewehere else (which is invoked for every request) or invoke the UriTemplateHandler for each request.  Sorry for not realizing this problem at the beginning.  ---  **Affects:** 4.2 RC1  **Issue Links:** - #17627 Ability to prefix each RestTemplate request using some kind of UriPrefixingClientHttpRequestFactory","closed","status: declined,","spring-projects-issues","2015-06-18T23:13:30Z","2019-01-12T16:23:16Z"
"","17627","Ability to prefix each RestTemplate request using some kind of UriPrefixingClientHttpRequestFactory [SPR-13035]","**[Jiri Mikulasek](https://jira.spring.io/secure/ViewProfile.jspa?name=pirkojm)** opened **[SPR-13035](https://jira.spring.io/browse/SPR-13035?redirect=false)** and commented  Please consider to provide some way how to prefix all requests from RestTemplate with the same basic prefix (usually protocol://host:port/someapiprefix form).  I believe this use case is pretty widespread as people uses RestTemplate to implement custom client libraries for apis, which resides on the same prefix quite often.  If there already is such possibility, please point me the right direction. Otherwise I would love to cooperate on inclusion (and possible improvements) of our [UriPrefixingClientHttpRequestFactory](https://github.com/martiner/gooddata-java/blob/master/src/main/java/com/gooddata/UriPrefixingClientHttpRequestFactory.java) and [UriPrefixer](https://github.com/martiner/gooddata-java/blob/master/src/main/java/com/gooddata/UriPrefixer.java) into springframework  ---  **Issue Links:** - #12459 Add constructor base address in RestTemplate (_**""is duplicated by""**_) - #17736 UriTemplateHandler is not called for requests without url variables  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1ba0625cd9d9043b3b80a0de872cfbaf3e324467","closed","type: enhancement,","spring-projects-issues","2015-05-15T21:39:24Z","2019-01-11T16:02:29Z"
"","17423","HttpComponentsClientHttpRequestFactory should not depend on CloseableHttpClient [SPR-12826]","**[Jiri Mikulasek](https://jira.spring.io/secure/ViewProfile.jspa?name=pirkojm)** opened **[SPR-12826](https://jira.spring.io/browse/SPR-12826?redirect=false)** and commented  This dependency makes spring rest client support unusable for cases, where only bare implementation of HttpClient interface is needed - i.e. we have custom HttpClient - wrapper, for which is not useful to extend CloseableHttpClient (in the opposite it would complicate and mess all that thing).  I also believe it is bad practice to rely on abstract classes instead of interfaces.  Please consider to depend only on the HttpClient interface and implement the ""closing logic"" only for clients which also implements Closeable.  Well, I know I can provide custom ClientHttpRequestFactory for RestTemplate and it could be a workaround, but to do that I need to reimplement also HttpClientRequest and Response and whole the thing would be copy&paste from your code with only small change.  ---  **Affects:** 4.1.5  **Issue Links:** - #17184 Merge default request config with local customizations - #20223 Support CachingHttpAsyncClient from httpasyncclient-cache in HttpComponentsAsyncClientHttpRequestFactory  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/370e3a52bfacdb28d8e58388778086b8358279ce","closed","type: enhancement,","spring-projects-issues","2015-03-17T10:33:26Z","2019-01-11T21:39:24Z"
"","17472","client-library-url in sockjs config is not working [SPR-12874]","**[Jiji Sasidharan](https://jira.spring.io/secure/ViewProfile.jspa?name=jijisv)** opened **[SPR-12874](https://jira.spring.io/browse/SPR-12874?redirect=false)** and commented  The sockjs client library url configured in websocket namespace element sockjs is not getting set to AbstractSockJsService.  for eg, the configuration is  ```xml  	 		 	 	  ```  And the generated iframe in IE8 is  ```html          Don't panic! This is a SockJS hidden iframe. It's used for cross domain magic.  ```  The generated code is still using the CDN url rather than url in the config.  I checked WebSocketNamespaceUtil and the logic to read the client-library-url from application context xml and set to AbstractSockJsService is missing in WebSocketNamespaceUtil https://github.com/spring-projects/spring-framework/blob/master/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java#L104   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/100d75da26355aec8a76c3652527efb09ff41385, https://github.com/spring-projects/spring-framework/commit/e2a55ced5052cff78dbf7d15d5e7d8c722f6fa1a","closed","type: bug,","spring-projects-issues","2015-04-01T02:16:08Z","2015-05-26T01:15:14Z"
"","17711","Improve DispatcherServlet diagrams [SPR-13120]","**[Jesus Calimlim Angeles Jr.](https://jira.spring.io/secure/ViewProfile.jspa?name=jesusangeles)** opened **[SPR-13120](https://jira.spring.io/browse/SPR-13120?redirect=false)** and commented  The Figure in ""Figure 17.2. Context hierarchy in Spring Web MVC"" can be improved.  1. What is the significance of the blue two-headed arrows?  Does it mean anything? 2. Why is the ""WebApplicationContext(s)"" having an ""(s)""?  It is the root application context if I am not wrong.  There is only 1 if I am not wrong. 3. Why is the box of ""WebApplicationContext(s)"" showing multiple boxes?  Does it represent multiple XML files forming one context?  If so, it is not important to put it so, as any context is understood to possibly come from multiple XML files (or java config, etc.).    ---  **Affects:** 4.1.6  **Reference URL:** http://docs.spring.io/spring-framework/docs/4.1.6.RELEASE/spring-framework-reference/html/images/mvc-contexts.gif  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/df9290c00dc7beb4e1b260f88809afae8cf5f870  0 votes, 5 watchers","closed","type: documentation,","spring-projects-issues","2015-06-12T15:34:06Z","2015-07-15T09:05:09Z"
"","17543","form:checkbox not working with nested properties [SPR-12951]","**[Jens Schoedt](https://jira.spring.io/secure/ViewProfile.jspa?name=schodt)** opened **[SPR-12951](https://jira.spring.io/browse/SPR-12951?redirect=false)** and commented  My userWrapper object contains a userProperties object that has a boolean emailShared = true.      Correctly creates the hidden field \  Unchecking the checkbox does NOTset the emailShared to false.  It works fine if i move emailShared to the wrapper object.      Correctly creates the hidden field \   ---  **Affects:** 4.1.6","closed","status: bulk-closed,","spring-projects-issues","2015-04-24T01:52:06Z","2019-01-12T00:16:59Z"
"","17354","FlashMap's cannot be easily serialized by means other than java serialization [SPR-12757]","**[Jelmer Kuperus](https://jira.spring.io/secure/ViewProfile.jspa?name=jelmer)** opened **[SPR-12757](https://jira.spring.io/browse/SPR-12757?redirect=false)** and commented  Currently it is not easy to serialize a org.springframework.web.servlet.FlashMap using anything other than regular java serialization or frameworks that use reflective field access  The problem is that the expirationStartTime and  timeToLive fields can only be set by invoking startExpirationPeriod.  So suppose that I wanted to serialize this object to a json object to store in a cookie then i would not be able to do this  Using java serialization in this context would be ill advised as this post points out  http://stackoverflow.com/questions/19054460/what-is-the-security-impact-of-deserializing-untrusted-data-in-java  ---  **Affects:** 4.1.5  **Issue Links:** - #13637 Make flash attributes use cookie to enable stateless webapp  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/83ff0adc2ece396b21561c3a76c47d2413a818c8","closed","type: enhancement,","spring-projects-issues","2015-02-25T13:23:01Z","2019-01-11T21:26:04Z"
"","17220","task:annotation-driven does not process exception-handler with mode aspectj [SPR-12619]","**[Jefim](https://jira.spring.io/secure/ViewProfile.jspa?name=jefimm)** opened **[SPR-12619](https://jira.spring.io/browse/SPR-12619?redirect=false)** and commented   directive does not process exception-handler when mode is aspectj   ---  **Affects:** 4.1.1, 4.1.2, 4.1.3, 4.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/66735d01cf7eef64e630c353285233fd1c500b17","closed","type: enhancement,","spring-projects-issues","2015-01-12T08:02:17Z","2015-05-26T01:15:29Z"
"","17958","Spring-tx-2.0.xsd missing mode from schema [SPR-13376]","**[Jeffrey Haskovec](https://jira.spring.io/secure/ViewProfile.jspa?name=haskovec)** opened **[SPR-13376](https://jira.spring.io/browse/SPR-13376?redirect=false)** and commented  We configure our Transactions with the following configuration:    When I change the xsi:schemaLocation in the application context to point to the http://www.springframework.org/schema/tx/spring-tx-4.2.xsd I get an error that mode is not a valid member of that schema. When I look at it, it appears that there isn't an entry in the schema to specify the mode.  According to Section 16.5.6 of the documentation in table 16.2 mode is still a valid part of the declaration. http://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/transaction.html   ---  **Affects:** 4.2 GA","closed","in: core,","spring-projects-issues","2015-08-21T09:14:08Z","2019-01-12T05:23:55Z"
"","17683","STOMP 1.2: Invalid value for the ""id"" header in (N)ACK frames [SPR-13092]","**[Jean-Sébastien Pédron](https://jira.spring.io/secure/ViewProfile.jspa?name=dumbbell)** opened **[SPR-13092](https://jira.spring.io/browse/SPR-13092?redirect=false)** and commented  Hi!  A RabbitMQ user reported us that RabbitMQ rejects all `ACK` and `NACK` frames from his Spring Websocket STOMP client when using STOMP 1.2.  According the trace he posted, we believe the problem comes from the ACK `id` header, not RabbitMQ: it was set to the subscription ID. However, the STOMP 1.2 specification states this header must match the `ack` header from the `MESSAGE` frame to be acknowledged. The same goes for the `NACK` frame.  The full story, including the trace, can be found in the RabbitMQ STOMP issue referenced in this issue.   ---  **Reference URL:** https://github.com/rabbitmq/rabbitmq-stomp/issues/10","closed","status: invalid,","spring-projects-issues","2015-06-02T07:05:34Z","2019-01-12T05:24:12Z"
"","17625","Wrong URL with MvcUriComponentsBuilder::fromMethodCall in case of inheritance [SPR-13033]","**[Jean-Pierre Bergamin](https://jira.spring.io/secure/ViewProfile.jspa?name=ractive)** opened **[SPR-13033](https://jira.spring.io/browse/SPR-13033?redirect=false)** and commented  MvcUriComponentsBuilder::fromMethodCall creates wrong URLs with derived controller classes, e.g.:  ```java @RequestMapping(""/something"") static class ControllerWithMethods { 	@RequestMapping(""/else"") 	HttpEntity myMethod(@RequestBody Object payload) { 		return null; 	} }  @RequestMapping(""/extended"") static class ExtendedController extends ControllerWithMethods { 		 }  UriComponents uriComponents = fromMethodCall(on(ExtendedController.class).myMethod(null)).build(); ```  The URL that is built is http://localhost/something/else instead of http://localhost/extended/else.  The `@RequestMapping` of the declaring class of the method that is called is used instead of the `@RequstMapping` of the given controller class.   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/85cf4e6999495d86cb0c08338fa6b98fa47ecbec, https://github.com/spring-projects/spring-framework/commit/e41877d64e5c0b60f54702219be1ddc8cd480802","closed","type: bug,","spring-projects-issues","2015-05-15T12:57:16Z","2015-05-26T01:15:02Z"
"","17996","Regression: @RequestBody(required = false) not respected [SPR-13417]","**[Jean-Baptiste Nizet](https://jira.spring.io/secure/ViewProfile.jspa?name=jnizet)** opened **[SPR-13417](https://jira.spring.io/browse/SPR-13417?redirect=false)** and commented  I'm migrating from 4.1.2 to 4.2.1, and am observing a regression. A RestController method annotated with `@RequestMapping(method = POST)` and having an argument annotated with `@RequestBody(required = false)` causes a 415 response to be sent back by Spring MVC if the request doesn't have a body.  This used to work. And the behavior contradicts the javadoc of RequestBody. BTW, a similar bug used to exist, and had been fixed: #14575.  ---  **Affects:** 4.2.1  **Issue Links:** - #14575 HttpMessageNotReadableException when `@RequestBody`(required=false)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/6bdf34570d2dcb025e492f9607846fe1d2c8d288, https://github.com/spring-projects/spring-framework-issues/commit/fb75c0d2b90ac8d31bb0e898929e26d6e3389809","closed","type: bug,","spring-projects-issues","2015-09-01T15:50:10Z","2019-01-14T05:18:22Z"
"","17999","ServletWebRequest.checkNotModified attempts to call HttpServletResponse.getHeader(String) on Servlet 2.5 [SPR-13420]","**[Jean Detoeuf](https://jira.spring.io/secure/ViewProfile.jspa?name=thebignet)** opened **[SPR-13420](https://jira.spring.io/browse/SPR-13420?redirect=false)** and commented  It seems that getHeader(String) is also being called inside checkNotModified. This method is not in HttpServletResponse in Servlet 2.5. Here is the stacktrace I'm facing. Issue was introduced in 4.2.0 as we were previously in 4.1.7.  Using the following:  Java 7.0_11 Jonas 5.2.4 - Servlet 2.5 Spring 4.2.1.RELEASE  ```java [ERROR] 2015-09-02 11:04:12,663 [TP-Processor15]  org.apache.juli.logging.DirectJDKLog:167 - Servlet.service() for servlet appServlet threw exception java.lang.NoSuchMethodError: javax.servlet.http.HttpServletResponse.getHeader(Ljava/lang/String;)Ljava/lang/String;         at org.springframework.web.context.request.ServletWebRequest.checkNotModified(ServletWebRequest.java:187) ~[spring-web-4.2.1.RELEASE.jar:4.2.1.RELEASE]         at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:240) ~[spring-webmvc-4.2.1.RELEASE.jar:4.2.1.RELEASE]         at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:51) ~[spring-webmvc-4.2.1.RELEASE.jar:4.2.1.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) ~[spring-webmvc-4.2.1.RELEASE.jar:4.2.1.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) ~[spring-webmvc-4.2.1.RELEASE.jar:4.2.1.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.2.1.RELEASE.jar:4.2.1.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.2.1.RELEASE.jar:4.2.1.RELEASE]         at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) ~[javaee-api-5.2.4.jar:5.2.4]         at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.2.1.RELEASE.jar:4.2.1.RELEASE]         at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) ~[javaee-api-5.2.4.jar:5.2.4]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) ~[jonas-web-container-tomcat-6.0-5.2.4-ipojo.jar:5.2.4]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[jonas-web-container-tomcat-6.0-5.2.4-ipojo.jar:5.2.4]         at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) ~[jonas-web-container-tomcat-6.0-5.2.4-ipojo.jar:5.2.4]         at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) [jonas-web-container-tomcat-6.0-5.2.4-ipojo.jar:5.2.4]         at org.ow2.jonas.web.tomcat6.CheckOpenResourcesValve.invoke(CheckOpenResourcesValve.java:73) [jonas-web-container-tomcat-6.0-5.2.4-ipojo.jar:5.2.4]         at org.ow2.jonas.web.tomcat6.tx.TransactionValve.invoke(TransactionValve.java:90) [jonas-web-container-tomcat-6.0-5.2.4-ipojo.jar:5.2.4]         at org.ow2.jonas.web.tomcat6.ResetAuthenticationValve.invoke(ResetAuthenticationValve.java:95) [jonas-web-container-tomcat-6.0-5.2.4-ipojo.jar:5.2.4]         at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) [jonas-web-container-tomcat-6.0-5.2.4-ipojo.jar:5.2.4]         at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) [jonas-web-container-tomcat-6.0-5.2.4-ipojo.jar:5.2.4]         at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) [jonas-web-container-tomcat-6.0-5.2.4-ipojo.jar:5.2.4]         at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) [jonas-web-container-tomcat-6.0-5.2.4-ipojo.jar:5.2.4]         at org.apache.jk.server.JkCoyoteHandler.invoke(JkCoyoteHandler.java:190) [jonas-web-container-tomcat-6.0-5.2.4-ipojo.jar:5.2.4]         at org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:291) [jonas-web-container-tomcat-6.0-5.2.4-ipojo.jar:5.2.4]         at org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:776) [jonas-web-container-tomcat-6.0-5.2.4-ipojo.jar:5.2.4]         at org.apache.jk.common.ChannelSocket.processConnection(ChannelSocket.java:705) [jonas-web-container-tomcat-6.0-5.2.4-ipojo.jar:5.2.4]         at org.apache.jk.common.ChannelSocket$SocketConnection.runIt(ChannelSocket.java:898) [jonas-web-container-tomcat-6.0-5.2.4-ipojo.jar:5.2.4]         at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:690) [jonas-web-container-tomcat-6.0-5.2.4-ipojo.jar:5.2.4]         at java.lang.Thread.run(Thread.java:722) [na:1.7.0_11] ```  As of today, we're not able to switch to a servlet 3.0 compatible application server.  ---  **Affects:** 4.2 GA, 4.2.1  **Reference URL:** #17976  **Issue Links:** - #17976 ServletWebRequest.checkNotModified attempts to call HttpServletResponse.getStatus() on Servlet 2.5","closed","type: bug,","spring-projects-issues","2015-09-02T09:48:41Z","2019-01-14T04:41:57Z"
"","17983","Regression: BeanWrapperImpl.getPropertyDescriptor does not allow nested paths [SPR-13403]","**[Jasper Floor](https://jira.spring.io/secure/ViewProfile.jspa?name=jasperfloor)** opened **[SPR-13403](https://jira.spring.io/browse/SPR-13403?redirect=false)** and commented  `BeanWrapper.getPropertyDescriptor(String propertyName)` promises that you can use a nested path in the property name:  > **propertyName** the property to obtain the descriptor for (may be a nested path, but no indexed/mapped property) > **propertyName** the property to obtain the descriptor for (may be a nested path, but no indexed/mapped property)  `BeanWrapperImpl`, however, does not seem to respect that contract. This is confirmed working correctly in Spring 4.1.4 and broken in 4.2.  The implementation of this method has changed, and it is getting the PD in a different way. For some reason the new implementation does not use nested paths.   ---  **Affects:** 4.2 GA","closed","in: core,","spring-projects-issues","2015-08-28T08:19:14Z","2015-09-01T11:38:23Z"
"","17671","Server Sent Events use ""event"" as the type prefix [SPR-13080]","**[Jasper de Vries](https://jira.spring.io/secure/ViewProfile.jspa?name=litpho)** opened **[SPR-13080](https://jira.spring.io/browse/SPR-13080?redirect=false)** and commented  As per the W3C recommendation (http://www.w3.org/TR/eventsource/#event-stream-interpretation) the event type field is called ""event"".  The SseEmitter.SseEventBuilder class erroneously builds it using ""name"" as a prefix.   ---  **Affects:** 4.2 RC1  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/808  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4297612e4c4db53a92c0b6c0c11679a76389fab8, https://github.com/spring-projects/spring-framework/commit/ec4783400c115ca3f85d43b0a9ffa27ec5533a4d","closed","type: bug,","spring-projects-issues","2015-05-28T12:25:15Z","2015-06-30T15:26:31Z"
"","17758","need a way of preventing multiple imports in large projects:  ? [SPR-13167]","**[Jason Vas Dias](https://jira.spring.io/secure/ViewProfile.jspa?name=jvd)** opened **[SPR-13167](https://jira.spring.io/browse/SPR-13167?redirect=false)** and commented  In trying to debug a large project that imports over 100 spring XML context files, many of which export beans through JMX using MBeanExporter , it has become apparent that Spring needs a way of preventing a resource being included multiple times, similar to ""C""'s: #ifndef _SOME_HEADER_H #include  /* which does: #define _SOME_HEADER_H 1 */ #endif It becomes a nightmarish task to try to determine which of all the spring configuration files imported via JAR resources in the classpath (which in my case contains @ 1000 JARs and @ 10000 spring configuration files) might potentially include a resource more than once. One has to analyse all possible dependency chains of file A importing file B, which imports file C, and then find any other file in any JAR in the classpath that might import files B or C , to prevent multiple resource imports  which can end up failing the bean initialization because of for instance : javax.management.InstanceAlreadyExistsException particularly as AbstractApplicationContext.refresh() ends up exporting the JMX MBeans more than once for multiply imported files. My personal preference would be for a new ""Common Application Property"" (   http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html ) like : spring.beans.import.once = true which would mean that any \ element would only ever be evaluated once no matter how many times that element was parsed , and / or for a new import attribute: \ which for that resource would ensure it is only ever evaluated once.   --- No further details from [SPR-13167](https://jira.spring.io/browse/SPR-13167?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-06-26T06:59:13Z","2019-01-12T02:27:12Z"
"","17421","Add setAutoStartup(boolean) to AbstractJmsListenerContainerFactory [SPR-12824]","**[Jaro Kuruc](https://jira.spring.io/secure/ViewProfile.jspa?name=koxo)** opened **[SPR-12824](https://jira.spring.io/browse/SPR-12824?redirect=false)** and commented  `AbstractJmsListenerContainerFactory` does not support setting `autoStartup` out of the box. One can subclass `AbstractJmsListenerContainerFactory` and do it in `initializeContainer()` method, but it would be nice to support this out of the box.   ---  **Affects:** 4.1.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6f3570a0f6ae996789188c1738b7a287ce4a49b2","closed","type: enhancement,","spring-projects-issues","2015-03-17T00:30:23Z","2015-05-26T01:15:21Z"
"","17754","BeanPostProcessor won't ever get proxied bean in case of circular references in the bean [SPR-13163]","**[Jan Novotný](https://jira.spring.io/secure/ViewProfile.jspa?name=novoj)** opened **[SPR-13163](https://jira.spring.io/browse/SPR-13163?redirect=false)** and commented  BeanPostProcessors will obtain reference to unwrapped bean instead of proxy class that handles (for example) transaction attributes of the bean. This happens only for beans that have circular bean references in them.  Steps to reproduce: 1. load application context with proxy-exporting-example.xml file (correct packages in it) 2. add PublicInterfacePostProcessor in it 3. watch it crash :)  One of the beans will come as proxy to the post processor, the other one in unwrapped shape. This happens despite of BeanFactory has both beans in singletons repository proxied.  Workaround for this bug is to pass BeanFactory to the BeanPostProcessor class and do this:  {{`@Override` public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { if(bean instanceof PublicInterface) { Advised proxy = beanFactory.getBean(beanName, Advised.class); }		 return bean; }}}   ---  **Affects:** 4.1.6  **Attachments:** - [proxy-exporting-example.xml](https://jira.spring.io/secure/attachment/22919/proxy-exporting-example.xml) (_847 bytes_) - [PublicInterfacePostProcessor.java](https://jira.spring.io/secure/attachment/22916/PublicInterfacePostProcessor.java) (_1.10 kB_) - [TestServiceBean1.java](https://jira.spring.io/secure/attachment/22918/TestServiceBean1.java) (_664 bytes_) - [TestServiceBean2.java](https://jira.spring.io/secure/attachment/22917/TestServiceBean2.java) (_664 bytes_)","closed","status: bulk-closed,","spring-projects-issues","2015-06-25T08:52:36Z","2019-01-12T02:27:18Z"
"","17670","Performing an asyncDispatch with MockMvc fails if DeferredResult is not yet set [SPR-13079]","**[Jacek Suchenia](https://jira.spring.io/secure/ViewProfile.jspa?name=jsuchenia)** opened **[SPR-13079](https://jira.spring.io/browse/SPR-13079?redirect=false)** and commented  When failing DeferredResult, mockMvc do not populate correct error into response.  In an attached test, both deferred results were failed, but one immediately, and second one after a while - results are different  Tested on 4.2 RC1  Jacek   ---  **Affects:** 4.2 RC1  **Attachments:** - [SpringDefferedResultTest.java](https://jira.spring.io/secure/attachment/22888/SpringDefferedResultTest.java) (_3.72 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-boot/commit/d793d5abcb6814a0b74f07ab1adf733a62ffef22, https://github.com/spring-projects/spring-boot/commit/6387f36efa93cebf16e4cd65cd07a1ddd8611028  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2015-05-28T03:12:41Z","2015-07-03T08:57:24Z"
"","17713","Add support for exact request parameters in RequestMapping annotation  [SPR-13122]","**[Izek Greenfield](https://jira.spring.io/secure/ViewProfile.jspa?name=igreenfi1)** opened **[SPR-13122](https://jira.spring.io/browse/SPR-13122?redirect=false)** and commented  I have this `@RequestMapping`:  ```scala @RequestMapping(method = Array[RequestMethod](RequestMethod.GET), params = Array[String](""limit"", ""offset""), produces = Array[String](""application/json"")) def selectFoo1(request: HttpServletRequest, @RequestParam(""limit"") limit: Int, @RequestParam(""offset"") offset: Int) 	 @RequestMapping(method = Array[RequestMethod](RequestMethod.GET), produces = Array[String](""application/json"")) def selectFoo2(request: HttpServletRequest) ```  The request is:  ``` http://localhost:8080/foo?limit=2 ```  I know that from the docs it will be mapped to the second method. I want that it will be get 400 (BAD REQUEST)  I want support for exact parameters something like:  ```scala @RequestMapping(method = Array[RequestMethod](RequestMethod.GET), exactParams = Array[String](""limit"", ""offset""), produces = Array[String](""application/json"")) ```    ---  **Affects:** 4.1.6  6 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2015-06-13T23:36:00Z","2015-09-09T15:09:01Z"
"","17481","BeanDefinition.getDependsOn() always returns null [SPR-12883]","**[Ivan Bovin](https://jira.spring.io/secure/ViewProfile.jspa?name=ivan.a.bovin)** opened **[SPR-12883](https://jira.spring.io/browse/SPR-12883?redirect=false)** and commented  Method `BeanDefinition.getDependsOn()` always returns `null`.  Sample:  ```java import org.springframework.aop.TargetSource; import org.springframework.aop.framework.autoproxy.TargetSourceCreator; import org.springframework.beans.factory.config.BeanDefinition; import org.springframework.beans.factory.config.ConfigurableListableBeanFactory; import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;  public class SampleTargetSourceCreator implements TargetSourceCreator {     private static final Logger logger = LoggerFactory.getLogger(SampleTargetSourceCreator.class);      private final ConfigurableListableBeanFactory beanFactory;      public SampleTargetSourceCreator(ConfigurableListableBeanFactory beanFactory) {         this.beanFactory = beanFactory;     }      @Override     public TargetSource getTargetSource(Class beanClass, String beanName) {         final BeanDefinition definition = beanFactory.getBeanDefinition(beanName);         final String[] dependencies = definition.getDependsOn();         if (dependencies != null) {             for (String dependency : dependencies) {                 logger.debug(dependency);             }         }         return null;     } } ```    ---  **Affects:** 4.1.5","closed","in: core,","spring-projects-issues","2015-04-02T04:53:21Z","2019-01-12T05:24:31Z"
"","17470","@Scheduled methods in @Lazy beans are not scheduled [SPR-12872]","**[Ivan Bovin](https://jira.spring.io/secure/ViewProfile.jspa?name=ivan.a.bovin)** opened **[SPR-12872](https://jira.spring.io/browse/SPR-12872?redirect=false)** and commented  If we have a `@Scheduled` method in a `@Lazy` bean, it will be added to `ScheduledTaskRegistrar` (e.g. using a `addFixedDelayTask` method) but not scheduled in the `taskScheduler`.  Example:  ```java @Lazy @Component public class SampleBean {     @Scheduled(fixedDelay = 500)     public void task() {         System.out.println(""-"");     } } ```  ---  **Affects:** 4.1.5  **Issue Links:** - #16830 ScheduledAnnotationBeanPostProcessor should unregister tasks on destruction of individual beans - #22119 `@Scheduled` methods in `@Lazy` beans are not scheduled - #19230 Performance regression when scheduling is enabled and context contains URL beans - #18739 Improve reference documentation for Task Execution and Scheduling about bean scopes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ab478d14fa8125daf1c4165e6d7ca2cccd0838e9","closed","type: enhancement,","spring-projects-issues","2015-03-31T08:41:11Z","2019-01-13T05:41:31Z"
"","17544","No handling for a single | [SPR-12952]","**[Igors Ustinovs](https://jira.spring.io/secure/ViewProfile.jspa?name=gooniebird)** opened **[SPR-12952](https://jira.spring.io/browse/SPR-12952?redirect=false)** and commented  Specifying OR operator as a single | instead of || causes the system to hang   ---  **Affects:** 3.2 GA","closed","in: core,","spring-projects-issues","2015-04-24T06:30:05Z","2019-01-11T21:07:40Z"
"","17384","Spring 4.2 application event is firing twice with Spring MVC , why? [SPR-12787]","**[Iddy Magohe](https://jira.spring.io/secure/ViewProfile.jspa?name=iamiddy)** opened **[SPR-12787](https://jira.spring.io/browse/SPR-12787?redirect=false)** and commented  Event listener is firing twice after publishing any events whether extending from ApplicationEvent or any arbitrary event, however everything works as expected while running test-cases, now wondering what is going on with annotation-driven events in Spring MVC context   ---  **Reference URL:** http://stackoverflow.com/questions/28871403/spring-4-2-application-event-is-firing-twice-with-spring-mvc-why","closed","in: core,","spring-projects-issues","2015-03-05T04:49:19Z","2019-01-11T21:24:37Z"
"","17441","add support of xlsx format to JasperReportsMultiFormatView [SPR-12843]","**[Husin Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=nisuhw)** opened **[SPR-12843](https://jira.spring.io/browse/SPR-12843?redirect=false)** and commented  Please add support XLSX format to class JasperReportsMultiFormatView  ---  **Affects:** 4.1.5  **Issue Links:** - #11563 Support for XSSFWorkbook and SXSSFWorkbook (xmlx format; POI 3.9+)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e2110e353e0f7119aad1450446ca1246deb7de4b","closed","type: enhancement,","spring-projects-issues","2015-03-22T05:28:17Z","2019-01-11T21:39:21Z"
"","17685","StandardMultipartHttpServletRequest.parseRequest() should check !filename.isEmpty() [SPR-13094]","**[Hurelhuyag](https://jira.spring.io/secure/ViewProfile.jspa?name=hurelhuyag)** opened **[SPR-13094](https://jira.spring.io/browse/SPR-13094?redirect=false)** and commented  Empty file inputs should be null MultipartFile   ---  **Affects:** 4.0.9  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/4.0.x/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java","closed","status: bulk-closed,","spring-projects-issues","2015-06-03T01:57:27Z","2019-01-12T02:27:52Z"
"","17655","Push Message from JMS to Spring Controller [SPR-13063]","**[Howard Shieh](https://jira.spring.io/secure/ViewProfile.jspa?name=zjhzxhz)** opened **[SPR-13063](https://jira.spring.io/browse/SPR-13063?redirect=false)** and commented  As I mentioned in Stackoverflow.  I'm using Spring MVC, ActiveMQ and WebSocket(via sock.js and stomp.js) to build a real-time data delivery application.  As we know, when a producer(another desktop application) push a message to ActiveMQ, and the onMessage() method will catch it.  ```java public class MessageReceiver implements MessageListener {     public void onMessage(Message message) {         System.out.println(message);          // How to push the message to a Controller in Spring?     } } ```  Most of the tutorials just print the message to the console.  I have another controller called WebSocketController:  ```java @Controller public class WebSocketController {     @SubscribeMapping(""/getRealTimeResult.action/{submissionId}"")     public Message getRealTimeResultAction(             @DestinationVariable long submissionId) {         return new Message(""Message content from onMessage() method"");     } } ```  I want to push the message received in onMessage() method to the getRealTimeResultAction() method. Can you tell me how to do it?  I know that the ActiveMQ can communicate with the browser using stomp via the port 61613.  I don't want to do this because I think the MQ should be transparent to the user. Also I need to do some authorization in the WebSocketController.    ---  **Affects:** 4.1.6  **Reference URL:** http://stackoverflow.com/questions/30387710/push-message-from-activemq-to-spring-controller  1 votes, 4 watchers","closed","status: invalid,","spring-projects-issues","2015-05-23T04:08:06Z","2019-01-12T05:24:14Z"
"","17699","Doc: @Lookup not working for a bean created in a @Configuration class [SPR-13108]","**[Horatiu Cherebetiu](https://jira.spring.io/secure/ViewProfile.jspa?name=horatiu.cherebetiu)** opened **[SPR-13108](https://jira.spring.io/browse/SPR-13108?redirect=false)** and commented  I have a class annotated with `@Configuration` where I create my beans, one of them has a  method annotated with `@Lookup`. When I call the method inside my bean I get NullPointerException.  The workaround for this is to not create the bean in `@Configuraiton` class but instead to annotate the class with `@Component`/Service.   --- No further details from [SPR-13108](https://jira.spring.io/browse/SPR-13108?redirect=false)","closed","type: task,","spring-projects-issues","2015-06-09T22:36:37Z","2015-06-30T10:41:37Z"
"","17845","SockJS client does not use HttpHeaders passed by WebSocketConnectionManager for ServerInfo request [SPR-13254]","**[Holger Schott](https://jira.spring.io/secure/ViewProfile.jspa?name=holger.schott)** opened **[SPR-13254](https://jira.spring.io/browse/SPR-13254?redirect=false)** and commented  SockJSClient does a ServerInfo request to obtain capabilities supported by SockJS server. The websocket endpoint is secured with BASIC AUTH, thus i need to pass in valid credentials by adding HttpHeaders to the WebSocketConnectionManager. When using raw rfc-6455 websockets the user gets authenticated and everything is fine. But when using SockJS with RestTemplateXhrTransport and WebSocketTransport the user will not be authenticated while the SockJSClient does the ServerInfo request. The HttpHeaders added to the WebSocketConnectionManager will not be used for the ServerInfo request. As a workaround i can configure a RestTemplateXhrTransport as InfoReceiver and pass in the HttpHeaders there, but then i have to configure the authentication credentials twice. And thats not what i want.   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b7bdd724b2eab6959eade7868cfb1ecf21aa118b","closed","type: enhancement,","spring-projects-issues","2015-07-21T05:37:50Z","2015-07-31T02:39:14Z"
"","17797","NullPointerException in DefaultSubscriptionRegistry.removeSubscription [SPR-13205]","**[Henrik Olsson](https://jira.spring.io/secure/ViewProfile.jspa?name=henolsmob)** opened **[SPR-13205](https://jira.spring.io/browse/SPR-13205?redirect=false)** and commented  ``` Exception in thread ""clientInboundChannel-2"" org.springframework.messaging.MessageDeliveryException: Failed to handle GenericMessage [payload=byte[0], headers={simpMessageType=UNSUBSCRIBE, stompCommand=UNSUBSCRIBE, nativeHeaders={id=[/api/en/stuff/7839]}, simpSessionAttributes={scopedTarget.scopedRequestsPerSessionCounter=com.mobenga.ngen.socket.session.ScopedRequestsPerSessionCounter@680b5ef0, org.springframework.messaging.simp.SimpAttributes.DESTRUCTION_CALLBACK.scopedTarget.scopedRequestsPerSessionCounter=org.springframework.beans.factory.support.DisposableBeanAdapter@2f8c0ae0}, simpSubscriptionId=/api/en/stuff/7839, simpSessionId=tj3eu5ly}] to org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask@2288647f in SimpleBroker[DefaultSubscriptionRegistry[cache[281 destination(s)], registry[284 sessions]]]; nested exception is java.lang.NullPointerException 	at org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.run(ExecutorSubscribableChannel.java:144) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.NullPointerException 	at org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionSubscriptionInfo.removeSubscription(DefaultSubscriptionRegistry.java:330) 	at org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.removeSubscriptionInternal(DefaultSubscriptionRegistry.java:99) 	at org.springframework.messaging.simp.broker.AbstractSubscriptionRegistry.unregisterSubscription(AbstractSubscriptionRegistry.java:83) 	at org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.handleMessageInternal(SimpleBrokerMessageHandler.java:177) 	at org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.handleMessage(AbstractBrokerMessageHandler.java:238) 	at org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.run(ExecutorSubscribableChannel.java:135) 	... 3 more ```  ---  **Affects:** 4.1.6  **Issue Links:** - #17777 ConcurrentModificationException when calling SimpMessagingTemplate.convertAndSend  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f79a5c12d5a91c91c662cf77783dc1776a369a64, https://github.com/spring-projects/spring-framework/commit/4fbf6a3572b818cdc9269a3619165b01cfe2b7fb","closed","type: bug,","spring-projects-issues","2015-07-07T01:43:22Z","2019-01-11T18:07:57Z"
"","17777","ConcurrentModificationException when calling SimpMessagingTemplate.convertAndSend [SPR-13185]","**[Henrik Olsson](https://jira.spring.io/secure/ViewProfile.jspa?name=henolsmob)** opened **[SPR-13185](https://jira.spring.io/browse/SPR-13185?redirect=false)** and commented  ``` 18:35:42.312 [http-nio-8080-exec-47] ERROR o.s.w.s.m.StompSubProtocolHandler - Error publishing SessionSubscribeEvent[GenericMessage [payload=byte[0], headers={simpMessageType=SUBSCRIBE, stompCommand=SUBSCRIBE, nativeHeaders={id=[/api/event-lists/list], destination=[/api/event-lists/list]}, simpSessionAttributes={scopedTarget.scopedRequestsPerSessionCounter=session.ScopedRequestsPerSessionCounter@48538a7d, org.springframework.messaging.simp.SimpAttributes.DESTRUCTION_CALLBACK.scopedTarget.scopedRequestsPerSessionCounter=org.springframework.beans.factory.support.DisposableBeanAdapter@46758ba2}, simpSubscriptionId=/api/event-lists/list, simpSessionId=ialw0jal, simpDestination=/api/event-lists/list}]]. org.springframework.messaging.MessageDeliveryException: Failed to handle GenericMessage [payload=byte[3067], headers={simpMessageType=MESSAGE, stompCommand=SEND, nativeHeaders={id=[/api/event-lists/list], destination=[/api/event-lists/list], type=[FULL], simpOrigDestination=[/user/request-response]}, simpSessionAttributes={scopedTarget.scopedRequestsPerSessionCounter=session.ScopedRequestsPerSessionCounter@48538a7d, org.springframework.messaging.simp.SimpAttributes.DESTRUCTION_CALLBACK.scopedTarget.scopedRequestsPerSessionCounter=org.springframework.beans.factory.support.DisposableBeanAdapter@46758ba2}, simpSubscriptionId=/api/event-lists/list, contentType=application/json;charset=UTF-8, simpSessionId=ialw0jal, simpDestination=/request-response-userialw0jal}] to org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask@fe59cf8 in SimpleBroker[DefaultSubscriptionRegistry[cache[509 destination(s)], registry[584 sessions]]]; nested exception is java.util.ConcurrentModificationException         at org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.run(ExecutorSubscribableChannel.java:144) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.support.ExecutorSubscribableChannel.sendInternal(ExecutorSubscribableChannel.java:91) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.support.AbstractMessageChannel.send(AbstractMessageChannel.java:117) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.support.AbstractMessageChannel.send(AbstractMessageChannel.java:104) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.simp.SimpMessagingTemplate.sendInternal(SimpMessagingTemplate.java:184) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.simp.SimpMessagingTemplate.doSend(SimpMessagingTemplate.java:176) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.simp.SimpMessagingTemplate.doSend(SimpMessagingTemplate.java:47) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.core.AbstractMessageSendingTemplate.send(AbstractMessageSendingTemplate.java:95) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.simp.user.UserDestinationMessageHandler.handleMessage(UserDestinationMessageHandler.java:190) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.run(ExecutorSubscribableChannel.java:135) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.support.ExecutorSubscribableChannel.sendInternal(ExecutorSubscribableChannel.java:91) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.support.AbstractMessageChannel.send(AbstractMessageChannel.java:117) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.support.AbstractMessageChannel.send(AbstractMessageChannel.java:104) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.simp.SimpMessagingTemplate.sendInternal(SimpMessagingTemplate.java:184) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.simp.SimpMessagingTemplate.doSend(SimpMessagingTemplate.java:176) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.simp.SimpMessagingTemplate.doSend(SimpMessagingTemplate.java:47) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.core.AbstractMessageSendingTemplate.send(AbstractMessageSendingTemplate.java:95) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(AbstractMessageSendingTemplate.java:133) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.simp.SimpMessagingTemplate.convertAndSendToUser(SimpMessagingTemplate.java:224) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.simp.SimpMessagingTemplate.convertAndSendToUser(SimpMessagingTemplate.java:208) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]    [  .... application frames ..... ]  Caused by: java.util.ConcurrentModificationException: null         at java.util.LinkedList$ListItr.checkForComodification(LinkedList.java:966) ~[na:1.8.0_45]         at java.util.LinkedList$ListItr.next(LinkedList.java:888) ~[na:1.8.0_45]         at org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.sendMessageToSubscribers(SimpleBrokerMessageHandler.java:201) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.handleMessageInternal(SimpleBrokerMessageHandler.java:149) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.handleMessage(AbstractBrokerMessageHandler.java:238) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         at org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.run(ExecutorSubscribableChannel.java:135) ~[spring-messaging-4.1.6.RELEASE.jar:4.1.6.RELEASE]         ... 73 common frames omitted ```  ---  **Affects:** 4.1.6  **Issue Links:** - #17264 ConcurrentModificationException in SimpleBrokerMessageHandler - #17482 Support 'selector' header for subscriptions with SimpleBrokerMessageHandler - #17793 LinkedMultiValueMap should allow for deep copy of List values - #17797 NullPointerException in DefaultSubscriptionRegistry.removeSubscription - #21789 UriComponentsBuilder.uriComponents doesn't properly clone unmodifiable queryParams  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ca9beeac9d517a7ee0356f6c449a2513abe38497, https://github.com/spring-projects/spring-framework/commit/16cbfcfd2fb18f6ee55b720bf91321f76cc25d6e, https://github.com/spring-projects/spring-framework/commit/f0175bc42d823abe3cc210b731ea9b408bc65ed5","closed","type: bug,","spring-projects-issues","2015-07-02T01:57:47Z","2019-01-11T16:17:48Z"
"","17773","Incorrect named parameter parsing results in InvalidDataAccessApiUsageException: No value supplied for the SQL parameter [SPR-13181]","**[Hendy Irawan](https://jira.spring.io/secure/ViewProfile.jspa?name=ceefour)** opened **[SPR-13181](https://jira.spring.io/browse/SPR-13181?redirect=false)** and commented  For the following SQL:  ``` UPDATE ppdbbandung2015.school   SET     name=:name,     code=:code,     level=:level,     address=:address,     address_district=:address_district,     address_subdistrict=:address_subdistrict,     address_rw=:address_rw,     address_rt=:address_rt,     is_border=:is_border,     foreigner_percentage=:foreigner_percentage,     option_i=:option_i,     option=ARRAY[:option]::json[]   WHERE id=:id; ```  Notice that we have `ARRAY[:option]` which should be proper when executed in PostgreSQL, however Spring parses the `]` after `:option` as part of the parameter name, resulting in:  ``` org.springframework.dao.InvalidDataAccessApiUsageException: No value supplied for the SQL parameter 'option]': No value registered for key 'option]' 	at org.springframework.jdbc.core.namedparam.NamedParameterUtils.buildValueArray(NamedParameterUtils.java:336) 	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.getPreparedStatementCreator(NamedParameterJdbcTemplate.java:374) 	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:313) 	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:318) 	at org.soluvas.scrape.core.sql.TableDmlGenerator.lambda$upsert$6(TableDmlGenerator.java:128) 	at org.soluvas.scrape.core.sql.TableDmlGenerator$$Lambda$3/1563634025.doInTransaction(Unknown Source) 	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:133) 	at org.soluvas.scrape.core.sql.TableDmlGenerator.upsert(TableDmlGenerator.java:108) 	at org.soluvas.scrape.core.UpsertTest.upsert(UpsertTest.java:76) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) ```  Workaround: just add a space after the parameter name, however such special characters (e.g. ""]"", ""{"" ) should never form part of a named parameter.  Related to #17770, #17771.  ---  **Affects:** 4.1.7","open","status: bulk-closed,","spring-projects-issues","2015-07-01T11:37:27Z","2021-04-27T06:22:08Z"
"","17771","Built-in support for SQL arrays in JdbcTemplate/NamedParameterJdbcTemplate [SPR-13179]","**[Hendy Irawan](https://jira.spring.io/secure/ViewProfile.jspa?name=ceefour)** opened **[SPR-13179](https://jira.spring.io/browse/SPR-13179?redirect=false)** and commented  Currently we have to do this (http://stackoverflow.com/a/4656173/122441) to use SQL/PostgreSQL arrays:  ```java private static final String ARRAY_DATATYPE = ""int4""; private static final String SQL_UPDATE = ""UPDATE foo SET arr = ? WHERE d = ?""; final Integer[] existing = ...; final DateTime dt = ...;  getJdbcTemplate().update(new PreparedStatementCreator() {     @Override     public PreparedStatement createPreparedStatement(final Connection con) throws SQLException {         final PreparedStatement ret = con.prepareStatement(SQL_UPDATE);         ret.setArray(1, con.createArrayOf(ARRAY_DATATYPE, existing));         ret.setDate(2, new java.sql.Date(dt.getMillis()));         return ret;     } }); ```  Please make this support built-in for simple arrays, i.e. `Integer[]`, `String[]`, etc.  Related to #17770, #17773  ---  **Affects:** 4.1.7","closed","status: bulk-closed,","spring-projects-issues","2015-07-01T11:32:06Z","2019-01-12T02:27:06Z"
"","17770","Support PreparedStatementCreator in NamedParameterJdbcTemplate [SPR-13178]","**[Hendy Irawan](https://jira.spring.io/secure/ViewProfile.jspa?name=ceefour)** opened **[SPR-13178](https://jira.spring.io/browse/SPR-13178?redirect=false)** and commented  Makes it possible to do this http://stackoverflow.com/a/4656173/122441 with named parameters:  ```java private static final String ARRAY_DATATYPE = ""int4""; private static final String SQL_UPDATE = ""UPDATE foo SET arr = ? WHERE d = ?""; final Integer[] existing = ...; final DateTime dt = ...;  getJdbcTemplate().update(new PreparedStatementCreator() {     @Override     public PreparedStatement createPreparedStatement(final Connection con) throws SQLException {         final PreparedStatement ret = con.prepareStatement(SQL_UPDATE);         ret.setArray(1, con.createArrayOf(ARRAY_DATATYPE, existing));         ret.setDate(2, new java.sql.Date(dt.getMillis()));         return ret;     } }); ```  Related to #17771, #17773  ---  **Affects:** 4.1.7  2 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-07-01T11:28:51Z","2019-01-12T02:27:09Z"
"","17714","ConcurrentModificationException in DefaultListableBeanFactory.doGetBeanNamesForType() [SPR-13123]","**[Hendy Irawan](https://jira.spring.io/secure/ViewProfile.jspa?name=ceefour)** opened **[SPR-13123](https://jira.spring.io/browse/SPR-13123?redirect=false)** and commented  It's hard to reproduce this even for me. It only happens once and then the app works normally. Using Spring Boot 1.2.3 webapp. While Spring Boot is still initializing, and trying to open a webpage (an MVC controller request method), this could happen.  So it seems `appCtx.getBean(Class)` is not fully thread-safe:  ```java final WebApplicationContext appCtx = WebApplicationContextUtils.getRequiredWebApplicationContext( 		((ServletRequest) request.getContainerRequest()).getServletContext()); final GoogleSysConfig sysConfig = appCtx.getBean(GoogleSysConfig.class); ```  Stack trace:  ``` Unexpected RuntimeException Last cause: null  Stacktrace Root cause:  java.util.ConcurrentModificationException      at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)      at java.util.ArrayList$Itr.next(ArrayList.java:851)      at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:423)      at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:412)      at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:398)      at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:337)      at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:331)      at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:968)      at org.soluvas.web.site.google.GoogleVerifyRequestMapper.mapRequest(GoogleVerifyRequestMapper.java:76)      at org.apache.wicket.request.mapper.CompoundRequestMapper.mapRequest(CompoundRequestMapper.java:152)      at org.apache.wicket.request.cycle.RequestCycle.resolveRequestHandler(RequestCycle.java:190)      at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:215)      at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289)      at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:259)      at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:201)      at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:282)      at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)      at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132)      at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:102)      at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)      at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)      at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132)      at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85)      at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)      at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)      at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132)      at org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration$MetricsFilter.doFilterInternal(MetricFilterAutoConfiguration.java:90)      at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)      at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)      at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132)      at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:85)      at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:61)      at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)      at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:131)      at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:56)      at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)      at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:45)      at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:63)      at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:58)      at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:70)      at io.undertow.security.handlers.SecurityInitialHandler.handleRequest(SecurityInitialHandler.java:76)      at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)      at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)      at io.undertow.servlet.handlers.ServletInitialHandler.jrHandle(ServletInitialHandler.java)      at org.zeroturnaround.javarebel.integration.servlet.undertow.cbp.ServletInitialHandlerCBP.handleRequest(ServletInitialHandlerCBP.java:104)      at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:261)      at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:247)      at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:76)      at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:166)      at io.undertow.server.Connectors.executeRootHandler(Connectors.java:197)      at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:765)      at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)      at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)      at java.lang.Thread.run(Thread.java:745)  display page view ```  Related to #4990.  ---  **Affects:** 4.1.6  **Issue Links:** - #17562 Doc: DefaultListableBeanFactory is not thread-safe for manual singleton registration - #18071 ConcurrentModificationException when executing AutowireCapableBeanFactory.createBean  **Referenced from:** commits https://github.com/spring-projects/spring-boot/commit/0069e41c29382a788a3515937a6a14a9b71c9107  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2015-06-14T00:53:13Z","2019-01-11T16:24:53Z"
"","18011","A heavy CPU consumption SQL detected after executing jdbctemplate call to oracle 11gr2 store procedure [SPR-13432]","**[Hendry Lai](https://jira.spring.io/secure/ViewProfile.jspa?name=hendry%20lai)** opened **[SPR-13432](https://jira.spring.io/browse/SPR-13432?redirect=false)** and commented  Spring Framework 4.0.6 ,  using jdbctemplate call oracle 11gr2 store procedure a heavy CPU consumption SQL detected after executing jdbctemplate call to oracle 11gr2 store procedure.   We found that root cause is : jdbcUtil try to get procedure metadata before execute store procedure,  and that sql in oracle 11g is very slow ( reference to URL or SQL below ) For oracle maybe it can be improved performance if LIKE operator can be replaced as equal operator and prevent IS NULL condition (such as  sub-query from ALL_OBJECTS view )  detected top sql like http://stackoverflow.com/questions/3894896/mysterious-sql-blocking-my-stored-procedure-from-executing-on-oracle  SELECT package_name AS procedure_cat, owner AS procedure_schem, object_name AS procedure_name, argument_name AS column_name, DECODE(position, 0, 5, DECODE(in_out, 'IN', 1, 'OUT', 4, 'IN/OUT', 2, 0)) AS column_type, DECODE(data_type, 'CHAR', 1, 'VARCHAR2', 12, 'NUMBER', 3, 'LONG', -1, 'DATE', 91, 'RAW', -3, 'LONG RAW', -4, 'TIMESTAMP', 93, 'TIMESTAMP WITH TIME ZONE', -101, 'TIMESTAMP WITH LOCAL TIME ZONE', -102, 'INTERVAL YEAR TO MONTH', -103, 'INTERVAL DAY TO SECOND', -104, 'BINARY_FLOAT', 100, 'BINARY_DOUBLE', 101, 1111) AS data_type, DECODE(data_type, 'OBJECT', type_owner || '.' || type_name, data_type) AS type_name, DECODE(data_precision, NULL, data_length, data_precision) AS precision, data_length AS length, data_scale AS scale, 10 AS radix, 1 AS nullable, NULL AS remarks, sequence, overload, default_value FROM all_arguments WHERE owner LIKE :1 ESCAPE '/' AND object_name LIKE :2 ESCAPE '/' AND package_name IS NULL AND (argument_name LIKE :5 ESCAPE '/' OR (argument_name IS NULL AND data_type IS NOT NULL)) ORDER BY procedure_schem, procedure_name, overload, sequence   ---  **Affects:** 4.0.6  **Reference URL:** http://stackoverflow.com/questions/3894896/mysterious-sql-blocking-my-stored-procedure-from-executing-on-oracle  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-09-04T16:34:51Z","2021-03-11T08:43:52Z"
"","17196","Spring MVC: Spring URL containing '/' in the path variable always fails with Bad Request error [SPR-12595]","**[hema](https://jira.spring.io/secure/ViewProfile.jspa?name=hemabs)** opened **[SPR-12595](https://jira.spring.io/browse/SPR-12595?redirect=false)** and commented  Hi,  I am using Spring MVC in my application. There is below mapping in my controller Class as below:  ``` /circuit/{circuitId} ```  ```java @Controller @RequestMapping(value= ""circuit"") public class CircuitController {  @RequestMapping(value= ""/{circuitId}"", method =RequestMethod.GET, produces=""application/json"")  	public @ResponseBody List getVolume(@PathVariable final String circuitId) { 		return circuit.getValues(decodeURL(circuitId)); 	} ```  When I pass the below URL from my rest client:  ``` http://...../circuit/my/Id ```  Here `circuitId` is my/Id  myId works perfectly fine with no issues. However my/Id never worked for me. It throws below error: HTTP Status 404  I tried below encoded URL too; still no luck. Control never enters the method.  ``` http://...../circuit/my%2FId ```  Seems like an issue where path segment and path variables containing '/' are not differentiated.   ---  **Affects:** 4.1.4","closed","status: declined,","spring-projects-issues","2015-01-02T14:43:09Z","2019-01-12T16:34:26Z"
"","17650","Duplicate bean names do not throw an NoUniqueBeanDefinitionException [SPR-13058]","**[Heiko Scherrer](https://jira.spring.io/secure/ViewProfile.jspa?name=scherrer)** opened **[SPR-13058](https://jira.spring.io/browse/SPR-13058?redirect=false)** and commented  The setup is as follows: Maven module `m1` exposes an implementation (Impl1) of interface I1. Maven module `m2` exposes an implementation (Impl2) of the same interface I1.  Class and package name of Impl1 equals to Impl2, e.g. foo.bar.DocumentRepositoryImpl  I expected a NoUniqueBeanDefinitionException but the application starts up fine and one of both implementations is used to autowire.  Is this behaviour expected and designed like it is? Wouldn't it make sense to be more strict and throw an exception in this case?   ---  **Affects:** 4.1.6","closed","in: core,","spring-projects-issues","2015-05-22T01:38:43Z","2019-01-12T05:24:16Z"
"","17402","Make initDirectFieldAccess work with array, List and Map [SPR-12805]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-12805](https://jira.spring.io/browse/SPR-12805?redirect=false)** and commented  Currently initDirectFieldAccess does not work with array, List and Map.  Given following command object class  ``` package be.vdab.web;  import java.util.Arrays; import java.util.HashMap; import java.util.List; import java.util.Map;  public class CommandObject { 	private String[] array = new String[1]; 	private List list = Arrays.asList(""""); 	private Map map = new HashMap<>();  	public String[] getArray() { 		return array; 	}  	public List getList() { 		return list; 	}  	public void setList(List list) { 		this.list = list; 	}  	public void setArray(String[] array) { 		this.array = array; 	}  	public Map getMap() { 		return map; 	}  	public void setMap(Map map) { 		this.map = map; 	}  } ```  , the following controller:  ``` package be.vdab.web;  import java.util.Arrays;  import org.springframework.stereotype.Controller; import org.springframework.web.bind.WebDataBinder; import org.springframework.web.bind.annotation.InitBinder; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.servlet.ModelAndView;  @Controller @RequestMapping(""/"") public class IndexController { 	@RequestMapping(method = RequestMethod.GET) 	public ModelAndView get() { 		return new ModelAndView(""/WEB-INF/JSP/index.jsp"", ""commandObject"", 				new CommandObject()); 	}  	@RequestMapping(method = RequestMethod.POST) 	public String post(CommandObject commandObject) { 		System.out.println(Arrays.toString(commandObject.getArray())); 		System.out.println(commandObject.getList()); 		System.out.println(commandObject.getMap()); 		return ""redirect:""; 	}  	@InitBinder(""commandObject"") 	void initBinder(WebDataBinder binder) { 		binder.initDirectFieldAccess(); 	} } ```  and the following JSP  ``` <%@page contentType='text/html' pageEncoding='UTF-8' session='false'%> <%@taglib prefix='form' uri='http://www.springframework.org/tags/form'%>    initDirectFieldAccess           ```  you get following stacktrace:  ``` SEVERE: Servlet.service() for servlet [dispatcher] in context with path [/initdirectfieldaccess] threw exception [org.springframework.beans.NotReadablePropertyException: Invalid property 'array[0]' of bean class [be.vdab.web.CommandObject]: Field 'array[0]' does not exist] with root cause org.springframework.beans.NotReadablePropertyException: Invalid property 'array[0]' of bean class [be.vdab.web.CommandObject]: Field 'array[0]' does not exist 	at org.springframework.beans.DirectFieldAccessor.getPropertyValue(DirectFieldAccessor.java:116) 	at org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:99) 	at org.springframework.validation.AbstractBindingResult.getFieldValue(AbstractBindingResult.java:229) 	at org.springframework.web.servlet.support.BindStatus.(BindStatus.java:120) 	at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:168) 	at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getPropertyPath(AbstractDataBoundFormElementTag.java:188) 	at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getName(AbstractDataBoundFormElementTag.java:154) 	at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.autogenerateId(AbstractDataBoundFormElementTag.java:141) 	at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.resolveId(AbstractDataBoundFormElementTag.java:132) 	at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.writeDefaultAttributes(AbstractDataBoundFormElementTag.java:116) 	at org.springframework.web.servlet.tags.form.AbstractHtmlElementTag.writeDefaultAttributes(AbstractHtmlElementTag.java:422) 	at org.springframework.web.servlet.tags.form.InputTag.writeTagContent(InputTag.java:142) 	at org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:84) 	at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:80) 	at org.apache.jsp.WEB_002dINF.JSP.index_jsp._jspx_meth_form_005finput_005f0(index_jsp.java:194) 	at org.apache.jsp.WEB_002dINF.JSP.index_jsp._jspx_meth_form_005fform_005f0(index_jsp.java:151) 	at org.apache.jsp.WEB_002dINF.JSP.index_jsp._jspService(index_jsp.java:108) 	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:725) 	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:431) 	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:396) 	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:340) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:725) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:721) 	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:466) 	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:391) 	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:318) 	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:168) 	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:303) 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1228) 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1011) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:955) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:618) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:725) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) 	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:516) 	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1086) 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659) 	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Unknown Source)  ```  When you put the line binder.initDirectFieldAccess(); in comment in the class IndexController, the program works.  ---  **Affects:** 4.1.5  **Issue Links:** - #14339 org.springframework.beans.DirectFieldAccessor fails to go through field paths recursively - #16820 DirectFieldAccessor should support collections","closed","type: enhancement,","spring-projects-issues","2015-03-11T03:54:25Z","2019-01-11T22:00:28Z"
"","17323","MessageConverter implementation that marshals from/to XML [SPR-12726]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-12726](https://jira.spring.io/browse/SPR-12726?redirect=false)** and commented  MessageConverter has an easy to use implementation to convert from/to JSON: MappingJackson2MessageConverter It would be interesting to have an equally easy to use implementation to convert from/to XML  ---  **Affects:** 4.1.4  **Issue Links:** - #17338 Allow use of `@JsonView` on `@MessageMapping` methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a36319e91ccf4624e2dcdba529496f0dc1633920","closed","type: enhancement,","spring-projects-issues","2015-02-18T02:10:25Z","2019-01-13T05:42:20Z"
"","17790","@SendTo annotation improvements [SPR-13198]","**[Gökhan Öner](https://jira.spring.io/secure/ViewProfile.jspa?name=gokhanoner)** opened **[SPR-13198](https://jira.spring.io/browse/SPR-13198?redirect=false)** and commented  Useful annotation combined with `@JmsListener`. But currently only get a destination queue name. Some additional features that I can think of:  * An options for routing messages to different queues depends on a header value and/or a bean reference that returns the queue name, getting message header or itself as parameter. * A message splitter options: when JmsListener return a list to decide whether send it as a single message or send each element as a separate message * A filter option, to filter out some messages depends of header and/or message value. Possibly a bean reference or maybe SpeL on some header values or message itself ?  It could seem that I'm asking Spring Integration features for Spring Framework but simple decision making while routing the messages is essential. Currently  that can be done by writing service in the middle & sending the message there to route it, instead of using `@SendTo`, but I believe this way , annotations and properties, are more elegant.   --- No further details from [SPR-13198](https://jira.spring.io/browse/SPR-13198?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-07-04T16:18:08Z","2019-01-12T02:26:57Z"
"","17268","ResourceChainRegistration forces CssLinkResourceTransformer registration [SPR-12669]","**[Guillaume DROUET](https://jira.spring.io/secure/ViewProfile.jspa?name=gdrouet)** opened **[SPR-12669](https://jira.spring.io/browse/SPR-12669?redirect=false)** and commented  Hi,  I'm facing a tricky integration issue with resolver/transformer registration.  I define my own PathResourceResolver which delivers resources already transformed by an integrated framework. This means that CSS URls are already updated.  Then if I want to write public URLs of the transformed CSS itself, I delegate the job to a ResourceUrlProvider. The provider calls a registered VersionStrategy which gives a timestamp to append to the URL.  This configuration leads to the following condition in ResourceChainRegistration: https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceChainRegistration.java#L108  I added a VersionResolver but I did'nt intentionally set the CssLinkTransformer. However the ResourceChainRegistration froces its creation.  So the transformer is called on a CSS which does not needs to be transformed.  Do you think I should disable my internal transformer and delegate the job to existing transformers? I don't think this is the goal of spring. The framework provides its own set of of Transformers but it also allows the developer to substitue its own transformers.  Thanks!   ---  **Affects:** 4.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/29d7294caba143e901ad24f78c4b66c06fc22990  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2015-01-28T04:16:07Z","2015-03-16T11:24:18Z"
"","17217","Exception with JSON serialization in ResponseBodyAdviceChain when debug logging is on [SPR-12616]","**[Grigory Kislin](https://jira.spring.io/secure/ViewProfile.jspa?name=gkislin)** opened **[SPR-12616](https://jira.spring.io/browse/SPR-12616?redirect=false)** and commented  During serialization bean with lazy initialization hibernate collection I use https://github.com/FasterXML/jackson-datatype-hibernate (Hibernate4Module).  It works OK, but when I set debug logging level I have org.hibernate.LazyInitializationException' exception. Cannot evaluate ... at line:  org/springframework/spring-webmvc/4.1.4.RELEASE/spring-webmvc-4.1.4.RELEASE org/springframework/web/servlet/mvc/method/annotation/ResponseBodyAdviceChain.java:61  logger.debug(""Invoking ResponseBodyAdvice chain for body="" + body);  Here it trying to make toString entity with lazy initialization. As workaround I set in logging settings: \   ---  **Affects:** 4.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f949b2d3c34d10d099338fc7c2e340edec85b959, https://github.com/spring-projects/spring-framework/commit/cdaf4497b624ae25e5e899d65224cdfa7041cb52","closed","type: bug,","spring-projects-issues","2015-01-11T02:18:25Z","2015-02-20T04:13:13Z"
"","17516","Random NegativeArraySizeExceptions from AOP-driven getMethod call on JDK 8 [SPR-12917]","**[Greg Adams](https://jira.spring.io/secure/ViewProfile.jspa?name=gadams00)** opened **[SPR-12917](https://jira.spring.io/browse/SPR-12917?redirect=false)** and commented  We're seeing random NegativeArraySizeException from Spring AOP when running with jdk 1.8 on linux (centos).  For us these are all in stacktraces including CacheOperationSourcePointcut from the spring caching abstraction support, but I've seen a similar report on stackoverflow regarding the `@Transactional` interceptor.  Occasionally, these exceptions result in a jvm crash with core dump. Oracle support opened an openjdk bug about this here:  https://bugs.openjdk.java.net/browse/JDK-8076521  but I think it's possible this may be a Spring AOP bug instead of a JDK bug. Downgrading to JDK 1.7 makes this issue go away.  Also note that we are unable to reproduce this exception at will, since the exact same code works the vast majority of the time. We can only find these via production monitoring, where I believe it happens just due to the sheer number of requests served over a long period of time.  stacktrace  ``` java.lang.Class.getDeclaredMethods0 (Native Method)                java.lang.Class.privateGetDeclaredMethods (Class.java:2701)                java.lang.Class.privateGetMethodRecursive (Class.java:3048)                               java.lang.Class.getMethod0 (Class.java:3018)                                java.lang.Class.getMethod (Class.java:1784)  ….springframework.util.ClassUtils.getMostSpecificMethod (ClassUtils.java:768)  …actFallbackCacheOperationSource.computeCacheOperations (AbstractFallbackCacheOperationSource.java:135)  …bstractFallbackCacheOperationSource.getCacheOperations (AbstractFallbackCacheOperationSource.java:100)  …cache.interceptor.CacheOperationSourcePointcut.matches (CacheOperationSourcePointcut.java:39)   org.springframework.aop.support.MethodMatchers.matches (MethodMatchers.java:94)  …ainFactory.getInterceptorsAndDynamicInterceptionAdvice (DefaultAdvisorChainFactory.java:67)  …sedSupport.getInterceptorsAndDynamicInterceptionAdvice (AdvisedSupport.java:489)  …pringframework.aop.framework.JdkDynamicAopProxy.invoke (JdkDynamicAopProxy.java:193)          com.sun.proxy.$Proxy133.getCartShippingEstimate (Unknown Source)   com.build.service.cart.CartServiceImpl.getLeadTimeText (CartServiceImpl.java:1926)  …m.build.service.order.OrderServiceImpl.getOrderReceipt (OrderServiceImpl.java:2157)     com.build.service.order.OrderServiceImpl.cancelOrder (OrderServiceImpl.java:2341) ```  The DAO method being called by CartServiceImpl.getLeadTimeText actually does not have `@Cacheable` or any other caching annotations. However, one of our `@Configuration` classes has `@EnableCaching`, which I believe applies the caching interceptor to all proxies.  in case it's helpful, a core dump from one of the jvm crashes is here: https://www.dropbox.com/s/ixnm3d7g7rneau4/core_1421.tgz?dl=0   ---  **Affects:** 4.1.5  **Reference URL:** http://stackoverflow.com/questions/29311288/java-lang-negativearraysizeexception-from-spring-cache","closed","in: core,","spring-projects-issues","2015-04-15T10:18:24Z","2019-01-12T05:24:30Z"
"","17741","Support for injecting optional properties into a Optional field [SPR-13150]","**[Graham Cox](https://jira.spring.io/secure/ViewProfile.jspa?name=sazzer)** opened **[SPR-13150](https://jira.spring.io/browse/SPR-13150?redirect=false)** and commented  It would be very useful to be able to inject a property into a field of type java.util.Optional\, and have it so that if the property is not present in the configured Property Sources then a value of Optional.empty() is injected instead.  Currently there's no easy way to specify that a specific property is optional, and if it's not present then the application will work fine. It's possible to give a property a default value, but this is not the same as not specifying it at all.  Unfortunately, setting ignore-unresolvable on the property-placeholder doesn't help here, because injecting into an Optional\ still gives an ""java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [java.util.Optional]: no matching editors or conversion strategy found""  Currently I'm having to inject a String into a constructor, and then wrap the assigning to a field in:  ``` Optional.ofNullable(value).filter(value -> !value.isEmpty()) ```  and then give the property in the context a default value of the empty string. This means that it's not possible to deliberately assign the empty string to a property, as it will be treated the same as if it's not present.  ---  **Affects:** 4.1.6  **Issue Links:** - #18505 Support of Optional for data binding  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2015-06-21T13:48:00Z","2019-01-11T16:20:59Z"
"","17551","Need to improve spring's JavaMailSenderImpl [SPR-12959]","**[Govardhana Rao Ganji](https://jira.spring.io/secure/ViewProfile.jspa?name=vardhan4vm)** opened **[SPR-12959](https://jira.spring.io/browse/SPR-12959?redirect=false)** and commented  \ \ \ \ \ \ \ \smtp\ \false\ \false\ \true\ \ \ \  If we get ""mail.smtp.auth"" value as ""false"",we no need to evaluate the PasswordAuthentication (username & password properties).  May be this snippet of code helps.  Write like Session session= Session.getDefaultInstance(props); *insted of * Session session= Session.getDefaultInstance(props,new javax.mail.Authenticator() { protected PasswordAuthentication getPasswordAuthentication() { return new PasswordAuthentication(username,password); } });  Please consider this as a first priority in next builds.  ---  **Issue Links:** - #17550 No authentication mechanisms supported by both server and client","closed","status: bulk-closed,","spring-projects-issues","2015-04-26T21:46:13Z","2019-01-12T00:16:54Z"
"","17550","No authentication mechanisms supported by both server and client [SPR-12958]","**[Govardhana Rao Ganji](https://jira.spring.io/secure/ViewProfile.jspa?name=vardhan4vm)** opened **[SPR-12958](https://jira.spring.io/browse/SPR-12958?redirect=false)** and commented  Am using client given SMTP credentials, but those guys are not authenticating,they are simply checking the host and port number only.  am setting : mail.smtp.auth > false  In javaMailProperties am setting property key ""mail.smtp.auth"" & its value ""false"" ,so our code won't evaluate the username & password properties.  My snippet of code :  \ \ \ \ \ \ \ \smtp\ \false\ \false\ \true\ \ \ \  Am getting an error saying like this:  DEBUG SMTP: Attempt to authenticate using mechanisms: LOGIN PLAIN DIGEST-MD5 NTLM DEBUG SMTP: mechanism LOGIN not supported by server DEBUG SMTP: mechanism PLAIN not supported by server DEBUG SMTP: mechanism DIGEST-MD5 not supported by server DEBUG SMTP: mechanism NTLM not supported by server  Authentication failed; nested exception is javax.mail.AuthenticationFailedException: No authentication mechanisms supported by both server and client: org.springframework.mail.MailAuthenticationException: Authentication failed; nested exception is javax.mail.AuthenticationFailedException: No authentication mechanisms supported by both server and client at org.springframework.mail.javamail.JavaMailSenderImpl.doSend(JavaMailSenderImpl.java:392) [spring-context-support-3.2.8.RELEASE.jar:3.2.8.RELEASE] at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:340) [spring-context-support-3.2.8.RELEASE.jar:3.2.8.RELEASE] at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:336) [spring-context-support-3.2.8.RELEASE.jar:3.2.8.RELEASE] at com.alesco.util.MessageThread.sendMail(MessageThread.java:143) [classes:] at com.alesco.service.impl.UserDetailServiceImpl.sendForgotPasswordMail(UserDetailServiceImpl.java:855) [classes:] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [rt.jar:1.8.0_25] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) [rt.jar:1.8.0_25] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) [rt.jar:1.8.0_25] at java.lang.reflect.Method.invoke(Method.java:483) [rt.jar:1.8.0_25] at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317) [spring-aop-3.2.9.RELEASE.jar:3.2.9.RELEASE] at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:198) [spring-aop-3.2.9.RELEASE.jar:3.2.9.RELEASE] at com.sun.proxy.$Proxy59.sendForgotPasswordMail(Unknown Source) at com.alesco.controller.AuthenticationController.forgotPassword(AuthenticationController.java:266) [classes:] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [rt.jar:1.8.0_25] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) [rt.jar:1.8.0_25] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) [rt.jar:1.8.0_25] at java.lang.reflect.Method.invoke(Method.java:483) [rt.jar:1.8.0_25] at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:215) [spring-web-3.2.9.RELEASE.jar:3.2.9.RELEASE] at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132) [spring-web-3.2.9.RELEASE.jar:3.2.9.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:685) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:919) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:851) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:953) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:855) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) [jboss-servlet-api_3.1_spec-1.0.0.Final.jar:1.0.0.Final] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:829) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) [jboss-servlet-api_3.1_spec-1.0.0.Final.jar:1.0.0.Final] at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:85) [undertow-servlet-1.1.0.Final.jar:1.1.0.Final] at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:61) [undertow-servlet-1.1.0.Final.jar:1.1.0.Final] at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36) [undertow-servlet-1.1.0.Final.jar:1.1.0.Final] at org.wildfly.extension.undertow.security.SecurityContextAssociationHandler.handleRequest(SecurityContextAssociationHandler.java:78) at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) [undertow-core-1.1.0.Final.jar:1.1.0.Final] at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:131) [undertow-servlet-1.1.0.Final.jar:1.1.0.Final] at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:56) [undertow-servlet-1.1.0.Final.jar:1.1.0.Final] at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) [undertow-core-1.1.0.Final.jar:1.1.0.Final] at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:45) [undertow-core-1.1.0.Final.jar:1.1.0.Final] at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:63) [undertow-servlet-1.1.0.Final.jar:1.1.0.Final] at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:58) [undertow-core-1.1.0.Final.jar:1.1.0.Final] at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:70) [undertow-servlet-1.1.0.Final.jar:1.1.0.Final] at io.undertow.security.handlers.SecurityInitialHandler.handleRequest(SecurityInitialHandler.java:76) [undertow-core-1.1.0.Final.jar:1.1.0.Final] at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) [undertow-core-1.1.0.Final.jar:1.1.0.Final] at org.wildfly.extension.undertow.security.jacc.JACCContextIdHandler.handleRequest(JACCContextIdHandler.java:61) at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) [undertow-core-1.1.0.Final.jar:1.1.0.Final] at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) [undertow-core-1.1.0.Final.jar:1.1.0.Final] at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:261) [undertow-servlet-1.1.0.Final.jar:1.1.0.Final] at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:247) [undertow-servlet-1.1.0.Final.jar:1.1.0.Final] at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:76) [undertow-servlet-1.1.0.Final.jar:1.1.0.Final] at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:166) [undertow-servlet-1.1.0.Final.jar:1.1.0.Final] at io.undertow.server.Connectors.executeRootHandler(Connectors.java:197) [undertow-core-1.1.0.Final.jar:1.1.0.Final] at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:759) [undertow-core-1.1.0.Final.jar:1.1.0.Final] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [rt.jar:1.8.0_25] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [rt.jar:1.8.0_25] at java.lang.Thread.run(Thread.java:745) [rt.jar:1.8.0_25] Caused by: javax.mail.AuthenticationFailedException: No authentication mechanisms supported by both server and client at com.sun.mail.smtp.SMTPTransport.authenticate(SMTPTransport.java:769) [javax.mail-1.5.1.jar:1.5.1] at com.sun.mail.smtp.SMTPTransport.protocolConnect(SMTPTransport.java:687) [javax.mail-1.5.1.jar:1.5.1] at javax.mail.Service.connect(Service.java:345) [javax.mail-1.5.1.jar:1.5.1] at org.springframework.mail.javamail.JavaMailSenderImpl.doSend(JavaMailSenderImpl.java:389) [spring-context-support-3.2.8.RELEASE.jar:3.2.8.RELEASE]  ---  **Affects:** 3.2 GA  **Issue Links:** - #17551 Need to improve spring's JavaMailSenderImpl","closed","status: invalid,","spring-projects-issues","2015-04-26T05:48:22Z","2019-01-12T05:24:26Z"
"","17434","Support for last-modified resolution in Tomcat's unpackwar=false mode [SPR-13393]","**[Gaurav Rawat](https://jira.spring.io/secure/ViewProfile.jspa?name=gauravbrills)** opened **[SPR-13393](https://jira.spring.io/browse/SPR-13393?redirect=false)** and commented  Hi I am using spring data rest provided HAL browser to view my sprign data rest HAL based api .So far things have been good when I am running it via eclipse or as a spring boot app for testing in my local tomcat on windows.Though when I deploy on aws on a tomcat container (as a spring boot war) I get this weird error as below when I browse to the root or the address of the hal browser /browser/index.html#  ```java Whitelabel Error Page  This application has no explicit mapping for /error, so you are seeing this as a fallback.  Mon Aug 24 07:05:46 UTC 2015 There was an unexpected error (type=Internal Server Error, status=500). Jar URL cannot be resolved to absolute file path because it does not reside in the file system: war:jar:file:/deployment/wars/hfds.1.3.war!/WEB-INF/lib/spring-data-rest-hal-browser-2.4.0.BUILD-SNAPSHOT.jar ```  -I am still not able to find a valid justification on why its not being able to find the provided hal browser though things work fine in local .Am I missing something can someone please help .Is this a bug with spring framework or otherwise-  This works if unpackwar=true but doesnt if unpackwar is set to false - That seems to cause the real issue **UPDATE**  The stack trace shows the issue coming from the code below when unpackw=false ,I get war:jar:file which causes the issue due to this code section in org.springframework.util.ResourceUtils  ```java public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {     Assert.notNull(resourceUrl, ""Resource URL must not be null"");     if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {         throw new FileNotFoundException(                 description + "" cannot be resolved to absolute file path "" +                 ""because it does not reside in the file system: "" + resourceUrl);     }     try {         return new File(toURI(resourceUrl).getSchemeSpecificPart());     }     catch (URISyntaxException ex) {         // Fallback for URLs that are not valid URIs (should hardly ever happen).         return new File(resourceUrl.getFile());     } } ```  Not sure it should go to the Spring data bucket or Spring framework in general .  **+UPDATE NEW+**  ALso after more analysis seems this is not an environment specific issue but it occurs if a resource like HAL_Browser is packed inside a jar and tomcat unpackwar is set to false .In this situation somehow spring is not able to extract contents from the jar file and render them .  ---  **Affects:** 4.1.7, 4.2 GA  **Reference URL:** http://stackoverflow.com/questions/32176383/not-able-to-open-spring-default-hal-browser-provided-by-spring-data-rest-on-aws  **Issue Links:** - #19895 PathMatchingResourcePatternResolver fails to work under Tomcat 8.0.41 with unpackWARs=false  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/302a069257eacc5ef15846a92ecf4b5eb26f3881, https://github.com/spring-projects/spring-framework/commit/1c3a668370cdac328b2f9920d68f170c99a2a76c, https://github.com/spring-projects/spring-framework/commit/155bbf5057ef5a691a48fa1f9bb36c68bd8e0d2e  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-08-25T04:04:38Z","2019-01-11T18:18:02Z"
"","17906","SocketUtils does not properly detect available port on localhost [SPR-13321]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-13321](https://jira.spring.io/browse/SPR-13321?redirect=false)** and commented  #### Status Quo  `SocketUtils` attempts to find an unused socket.  This does not work (at least on OS X) if something is already bound to `localhost` but not to other network interfaces. Instead, the requested socket is successfully bound to other network interfaces.  #### Proposal  Since tests generally want to bind to `localhost`, `SocketUtils` should test the `loopback` interface to ensure that the port is actually available for `localhost`.  #### Further Resources  See [pull request 1537](https://github.com/spring-projects/spring-integration/pull/1537) for a similar fix in Spring Integration.   ---  **Affects:** 4.0 GA  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/853, and commits https://github.com/spring-projects/spring-framework/commit/f15140415ad827b6c865e5d61f744a7de8f59f82","closed","in: core,","spring-projects-issues","2015-08-05T09:03:56Z","2015-09-01T11:38:22Z"
"","17875","Doc: Autowiring in @Configuration classes with post-processor definitions [SPR-13285]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-13285](https://jira.spring.io/browse/SPR-13285?redirect=false)** and commented  While the [new documentation](https://github.com/spring-projects/spring-framework/commit/c7fcf7cd4c7f40263b60ef7500a0d6a6fa737fac ) now warns that factory-method injection is preferred to auto wiring, there are cases where auto wiring does not work at all with `@Configuration` classes.  Consider:  ``` @Configuration public class FooConfig {  	@Value(""${foo}"") 	public String foo;  	@Bean 	public String earlyFoo() { 		return this.foo; 	}  	@Bean 	public String foo(@Value(""${foo}"") String foo) { 		return foo; 	}  	@Bean 	public PropertySourcesPlaceholderConfigurer configurer() { 		return new PropertySourcesPlaceholderConfigurer(); 	}  }  public class Testing {  	@Test 	public void test() { 		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(); 		context.register(FooConfig.class); 		StandardEnvironment env = new StandardEnvironment(); 		Properties props = new Properties(); 		props.setProperty(""foo"", ""bar""); 		PropertiesPropertySource pps = new PropertiesPropertySource(""sftpprop"", props); 		env.getPropertySources().addLast(pps); 		context.setEnvironment(env); 		context.refresh(); 		assertNull(context.getBean(""earlyFoo"")); 		assertEquals(""bar"", context.getBean(""foo"")); 		context.close(); 	}  } ```  In this case, the value is not injected into the field because `fooConfig` is created before the `BPP` s...  > 2015-07-28 14:39:08,114 [main] DEBUG: org.springframework.beans.factory.support.DefaultListableBeanFactory - Finished creating instance of bean 'fooConfig' > ... > 2015-07-28 14:39:08,130 [main] DEBUG: org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'  I don't know if this can be fixed, but perhaps we should document the conditions under which it occurs.  ---  **Affects:** 4.2 RC3  **Issue Links:** - #17370 Documentation the limitation of injecting components in `@Configuration` classes - #17709 Doc: Static `@Bean` methods cannot refer to each other with Spring scoping semantics  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/90493f49e628929b2d83ac564c0e5a6e8d524875","closed","type: documentation,","spring-projects-issues","2015-07-28T11:50:27Z","2019-01-14T04:42:23Z"
"","17414","Support SpEL in bean class names [SPR-12817]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-12817](https://jira.spring.io/browse/SPR-12817?redirect=false)** and commented  This (using a property placeholder for a class) works...  ```  	java.lang.String      	  ```  ...but this does not...  ```  	java.lang.String    	  ```  ...ClassNotFoundException: #{props.fooClass}  It would be useful if it was possible to use SpEL as an alternative to a PPH to determine a bean class.  ---  **Issue Links:** - [INT-3677](https://jira.spring.io/browse/INT-3677) JMS: Support Properties/SpEL in container-class  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/768f6e836aaea822352d7135570d4dd4eebb6ebb  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2015-03-14T09:11:47Z","2019-01-13T20:57:05Z"
"","17357","RestTemplate logging for 404 status code [SPR-12760]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-12760](https://jira.spring.io/browse/SPR-12760?redirect=false)** and commented  I would like to reduce the log level of 404 (NOT FOUND) from WARN to INFO or DEBUG, while still treating it as an error (still have an `HttpClientErrorException` thrown).  I don't want to set the log level to ERROR because we do want to see WARNs for other errors.  We have added code to XD's admin to clean up rabbitmq using it's REST API. We have to look up several resources to see if they are eligible to be deleted and it is normal that some resource(s) might not be present.  At the moment this causes a bunch of WARN logs to be emitted.  I could, of course, use a custom `ResponseErrorHandler` and handle 404s differently but that would add a fair amount more complexity to the code.  One solution might be to widen `handleResponseError` to `protected` so I can control the logging myself, but I am open to other ideas.   ---  **Affects:** 4.1.5","closed","type: enhancement,","spring-projects-issues","2015-02-26T14:25:11Z","2015-03-25T09:42:32Z"
"","17351","Consider lowering EventListenerMethodProcessor log levels [SPR-12754]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-12754](https://jira.spring.io/browse/SPR-12754?redirect=false)** and commented  Consider lowering this  https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java#L132  to TRACE level.  I see a lot of pollution in debug logs (with large contexts).   ---  **Affects:** 4.2 RC1","closed","in: core,","spring-projects-issues","2015-02-25T09:20:34Z","2015-05-26T01:14:42Z"
"","17302","Consider rewording ack modes on the listener container javadocs [SPR-12705]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-12705](https://jira.spring.io/browse/SPR-12705?redirect=false)** and commented  > ""sessionAcknowledgeMode"" set to ""AUTO_ACKNOWLEDGE"" (default): Automatic message acknowledgment before listener execution; no redelivery in case of exception thrown. > ...  While a following sentence says...  > The exact behavior might vary according to the concrete listener container and JMS provider used.  ...this might be confusing (as has been proved to be - see the SO question) to users because it is contrary to the standard JMS behavior, as exhibited by the `SMLC`.  The SMLC also says...  > See the AbstractMessageListenerContainer javadoc for details on acknowledge modes and transaction options.  ...and also does not explicitly explain that `AUTO_ACKNOWLEDGE` works in the standard JMS way.  ---  **Affects:** 3.2.13, 4.1.4  **Reference URL:** http://stackoverflow.com/questions/28426467/difference-between-auto-acknowledgement-mode-with-and-without-spring-jms  **Issue Links:** - #17644 Remoting over JMS with receiveTimeout blocks service forever  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c1a9e3484ae28d4af045310b7df5116744bd5f08, https://github.com/spring-projects/spring-framework/commit/91c47a9eb8cde8ded4587839dff961caf4f04cc1, https://github.com/spring-projects/spring-framework/commit/1c10861a92d7118d3879bb314d9349a25e8c5d0f  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","type: documentation,","spring-projects-issues","2015-02-10T06:10:04Z","2019-01-11T21:29:25Z"
"","17278","Handle URI variables containing '/' [SPR-12679]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-12679](https://jira.spring.io/browse/SPR-12679?redirect=false)** and commented  I am not sure if this is a corner case and/or whether Spring Framework can help, but...  RabbitMQ's ReST API has urls of the form...  ``` http://localhost:15672/api/exchanges/{vhost} ```  The default vhost in rabbitmq is `""/""`.  Since this is part of the `path`, a URI variable of `""/""` remains un-encoded. Encoding it to `%2f` causes it to be double encoded to `%252f`.  The root cause is that the `HierarchicalUriComponents.toUri()` method uses the URI ctor that takes individual components to build the URI (where the encoding (or not) takes place).  However, `HierarchicalUriComponents.toUriString()` builds the URI as a simple String. So this works...  `uri = new URI(components.toUriString());`  but then no other special characters are encoded (possibly in other variables).  I was able to work around it with this...  ``` private URI encodeAndExpand(String uri, String... params) { 	for (int i = 0; i < params.length; i++) { 		params[i] = params[i].replaceAll(""/"", ""%2f""); 	} 	UriComponents components = UriComponentsBuilder 			.fromUriString(uri) 			.buildAndExpand((Object[]) params); 	URI tempUri = components.toUri(); 	String escaping = tempUri.toString().replaceAll(""%252f"", ""%2f""); 	try { 		tempUri = new URI(escaping); 	} 	catch (URISyntaxException e) { 		... 	} 	return tempUri; } ```  ...but I wonder if there's a better way or whether the builder can help in any way. For example, perhaps the URI variables could be encoded individually (as well as other components) and then in `toUri()` we could use `new URI(toUriString())`.    ---  **Affects:** 4.1.4","closed","type: enhancement,","spring-projects-issues","2015-01-30T14:11:39Z","2015-02-02T07:45:10Z"
"","17211","Consider caching the compiled pattern in OperatorMatches [SPR-12610]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-12610](https://jira.spring.io/browse/SPR-12610?redirect=false)** and commented  `OperatorMatches` invokes `Pattern.compile()` on the right operand on every invocation. This could be relatively expensive, especially with a complex regex, even with compiled SpEL.  In many cases, the regex will be a literal.  Consider caching (at least) the most recent compiled `Pattern` and reuse it if the right operand matches.   ---  **Affects:** 4.1.4  **Reference URL:** http://stackoverflow.com/questions/19742528/spel-how-does-matches-work  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d34402d3ba0470423ae763e98889160580230379, https://github.com/spring-projects/spring-framework/commit/87b7cd6368f24a3d9ecff36dfdf45c9cbc4983c0","closed","type: enhancement,","spring-projects-issues","2015-01-09T08:23:15Z","2015-02-20T04:13:11Z"
"","17395","Spring SOCKJS and Websockets - support for Websphere Liberty  [SPR-12798]","**[Ganapathy Pichumani](https://jira.spring.io/secure/ViewProfile.jspa?name=ganapathyp)** opened **[SPR-12798](https://jira.spring.io/browse/SPR-12798?redirect=false)** and commented  I'm using Liberty 9 beta (free download at https://developer.ibm.com/wasdev/downloads/liberty-profile-beta/  Liberty has support for request upgrade strategy - please look at com.ibm.ws.wsoc.WsocUpgradeHandler.  Sample apps using pure websockets works just fine on Liberty.But we are using the sockjs & stomp functions as well.  DefaultHandshakeHandler supports only a handful of servers and it doesnt include Liberty. Please enable support for Liberty,  ---  **Affects:** 4.1.4  **Issue Links:** - #16973 Support for JSR-356 WebSockets on WebSphere Liberty Profile (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2015-03-09T11:07:19Z","2019-01-11T21:23:48Z"
"","17881","Regression in 4.2: NPE due to WebJarsResourceResolver [SPR-13291]","**[Gabriele Del Prete](https://jira.spring.io/secure/ViewProfile.jspa?name=gdelprete)** opened **[SPR-13291](https://jira.spring.io/browse/SPR-13291?redirect=false)** and commented  I'm updating my app from Spring 4.1.6 to 4.2.RC3. I have webjars-locator in myh classpath as we use webjars. With 4.2.RC3, the new WebJarsRecourceResolver kicks in and results in an NPE:  ```java java.lang.NullPointerException: null 	at org.springframework.core.io.UrlResource.createRelative(UrlResource.java:223) ~[spring-core-4.2.0.RC3.jar:4.2.0.RC3] 	at org.springframework.web.servlet.resource.PathResourceResolver.getResource(PathResourceResolver.java:121) ~[spring-webmvc-4.2.0.RC3.jar:4.2.0.RC3] 	at org.springframework.web.servlet.resource.PathResourceResolver.getResource(PathResourceResolver.java:94) ~[spring-webmvc-4.2.0.RC3.jar:4.2.0.RC3] 	at org.springframework.web.servlet.resource.PathResourceResolver.resolveResourceInternal(PathResourceResolver.java:78) ~[spring-webmvc-4.2.0.RC3.jar:4.2.0.RC3] 	at org.springframework.web.servlet.resource.AbstractResourceResolver.resolveResource(AbstractResourceResolver.java:46) ~[spring-webmvc-4.2.0.RC3.jar:4.2.0.RC3] 	at org.springframework.web.servlet.resource.DefaultResourceResolverChain.resolveResource(DefaultResourceResolverChain.java:57) ~[spring-webmvc-4.2.0.RC3.jar:4.2.0.RC3] 	at org.springframework.web.servlet.resource.WebJarsResourceResolver.resolveResourceInternal(WebJarsResourceResolver.java:66) ~[spring-webmvc-4.2.0.RC3.jar:4.2.0.RC3] 	at org.springframework.web.servlet.resource.AbstractResourceResolver.resolveResource(AbstractResourceResolver.java:46) ~[spring-webmvc-4.2.0.RC3.jar:4.2.0.RC3] ```  I checked the code and this (from WebJarsRecourceResolver) seems wrong:  ```java 	@Override 	protected String resolveUrlPathInternal(String resourceUrlPath, 			List locations, ResourceResolverChain chain) {  		String path = chain.resolveUrlPath(resourceUrlPath, locations); 		if (path == null) { 			String webJarResourcePath = findWebJarResourcePath(resourceUrlPath); 			return chain.resolveUrlPath(webJarResourcePath, locations); 		} 		return path; 	} ```  In fact, findWebJarResourcePath may very well return null, something that PathResourceResolver.getResource and UrlResource.createRelative do not like.  This is my resource handling setup:  ```java @Override public void addResourceHandlers(ResourceHandlerRegistry registry) {           boolean devMode = appConfig.isDevelopment();           final String location = devMode ? ""file:///"" + appConfig.getDevelopmentProjectRoot() + ""myapp/src/"" : ""classpath:/static/"";      int cachePeriod = devMode ? 0 : 31556926; // one year      boolean useResourceCache = !devMode;           registry           .addResourceHandler(""/static/**"")           .addResourceLocations(location)           .setCachePeriod(cachePeriod)           .resourceChain(useResourceCache).addResolver(new VersionResourceResolver().addContentVersionStrategy(""/**""));           // TODO: remove      registry.addResourceHandler(""/webjars/**"").addResourceLocations(""classpath:/META-INF/resources/webjars/"");           if (devMode) {           // in dev mode, we need access to the Bower components to load less.js           registry           .addResourceHandler(""/bower_components/**"")           .addResourceLocations(""file:///"" + appConfig.getDevelopmentProjectRoot() + ""frontend-project/bower_components/"")           .setCachePeriod(cachePeriod)           .resourceChain(useResourceCache).addResolver(new VersionResourceResolver().addContentVersionStrategy(""/**""));      } } ```  The reources that trigger the NPE are all supposed to be loaded by my 'bower_components' folder (I load client code from the FS in development to speed up coding).   ---  **Affects:** 4.2 RC3","closed","type: bug,","spring-projects-issues","2015-07-29T10:12:40Z","2015-07-31T02:39:12Z"
"","17686","CGLIB code generation failure for cross-@Bean FactoryBean call [SPR-13095]","**[Gabriele Del Prete](https://jira.spring.io/secure/ViewProfile.jspa?name=gdelprete)** opened **[SPR-13095](https://jira.spring.io/browse/SPR-13095?redirect=false)** and commented  ``` Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [java.util.concurrent.ExecutorService]: Factory method 'casCheckExecutor' threw exception; nested exception is org.springframework.cglib.core.CodeGenerationException: java.lang.IllegalArgumentException-->Protected method: getDefaultThreadNamePrefix()Ljava/lang/String; 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) 	... 67 more Caused by: org.springframework.cglib.core.CodeGenerationException: java.lang.IllegalArgumentException-->Protected method: getDefaultThreadNamePrefix()Ljava/lang/String; 	at org.springframework.cglib.core.ReflectUtils.newInstance(ReflectUtils.java:235) 	at org.springframework.cglib.core.ReflectUtils.newInstance(ReflectUtils.java:220) 	at org.springframework.cglib.core.ReflectUtils.newInstance(ReflectUtils.java:216) 	at org.springframework.cglib.proxy.Enhancer.createUsingReflection(Enhancer.java:643) 	at org.springframework.cglib.proxy.Enhancer.firstInstance(Enhancer.java:538) 	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:225) 	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:377) 	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:285) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.enhanceFactoryBean(ConfigurationClassEnhancer.java:402) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:295) 	at com.marketnews.scrollers.security.SecurityConfig$$EnhancerBySpringCGLIB$$4d2a9eb1.casCheckExecutorFactoryBean() 	at com.marketnews.dbsso.spring.AbstractCASWebSecurityConfigurerAdapter.casCheckExecutor(AbstractCASWebSecurityConfigurerAdapter.java:318) 	at com.marketnews.scrollers.security.SecurityConfig$$EnhancerBySpringCGLIB$$4d2a9eb1.CGLIB$casCheckExecutor$17() 	at com.marketnews.scrollers.security.SecurityConfig$$EnhancerBySpringCGLIB$$4d2a9eb1$$FastClassBySpringCGLIB$$433a316a.invoke() 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:312) 	at com.marketnews.scrollers.security.SecurityConfig$$EnhancerBySpringCGLIB$$4d2a9eb1.casCheckExecutor() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:606) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) 	... 68 more Caused by: java.lang.IllegalArgumentException: Protected method: getDefaultThreadNamePrefix()Ljava/lang/String; 	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:209) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor$1.intercept(ConfigurationClassEnhancer.java:399) 	at org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean$$EnhancerBySpringCGLIB$$93e65b95.getDefaultThreadNamePrefix() 	at org.springframework.util.CustomizableThreadCreator.(CustomizableThreadCreator.java:51) 	at org.springframework.scheduling.concurrent.CustomizableThreadFactory.(CustomizableThreadFactory.java:42) 	at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.(ExecutorConfigurationSupport.java:45) 	at org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean.(ThreadPoolExecutorFactoryBean.java:53) 	at org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean$$EnhancerBySpringCGLIB$$93e65b95.() 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:526) 	at org.springframework.cglib.core.ReflectUtils.newInstance(ReflectUtils.java:228) 	... 89 more ```  Related code is this:  ``` 	@Bean 	public ThreadPoolExecutorFactoryBean casCheckExecutorFactoryBean() throws Exception { 		ThreadPoolExecutorFactoryBean threadPoolExecutorFactoryBean = new ThreadPoolExecutorFactoryBean(); 		threadPoolExecutorFactoryBean.setCorePoolSize(Runtime.getRuntime().availableProcessors() * 2); 		threadPoolExecutorFactoryBean.setQueueCapacity(Integer.MAX_VALUE); 		threadPoolExecutorFactoryBean.setThreadNamePrefix(""casCheckExecutor-""); 		return threadPoolExecutorFactoryBean; 	}  	@Bean(name=""casCheckExecutor"") 	public ExecutorService casCheckExecutor() throws Exception { 		return casCheckExecutorFactoryBean().getObject(); 	} ```  ---  **Affects:** 4.2 RC1  **Issue Links:** - #17514 ConfigurationClassEnhancer.enhanceFactoryBean is not transparent for method calls other than getObject()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/869b0bc7eed62463df87c3052f4fa84c28b56399, https://github.com/spring-projects/spring-framework/commit/063a720ac0f0848bc86946b891df27b828d58946","closed","type: bug,","spring-projects-issues","2015-06-03T11:42:08Z","2019-01-11T15:44:44Z"
"","17554","Documention error for Stomp application destination prefix [SPR-12962]","**[Gabriele Del Prete](https://jira.spring.io/secure/ViewProfile.jspa?name=gdelprete)** opened **[SPR-12962](https://jira.spring.io/browse/SPR-12962?redirect=false)** and commented  At this point in the docs: http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html#websocket-stomp-enable  This part of the documentation is clearly wrong I'd say:  Here is an example of configuring a STOMP WebSocket endpoint with SockJS fallback options. The endpoint is available for clients to connect to a URL path /app/portfolio:  This is with regards to the example that comes next, where /app is used as an app destination prefix, while /portfolio is the Stomp Endpoint.  By reading the sentence one could think that /app is the stomp endpoint and portfolio is the app destination prefix.   ---  **Affects:** 4.1.6  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html#websocket-stomp-enable  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9637b12f8929da7a986f80f114db8936692a9ae3","closed","type: task,","spring-projects-issues","2015-04-28T13:41:10Z","2015-05-26T01:14:41Z"
"","17563","PatternMatchUtils infinite loop bug [SPR-12971]","**[g2757219@trbvm.com](https://jira.spring.io/secure/ViewProfile.jspa?name=g2757219@trbvm.com)** opened **[SPR-12971](https://jira.spring.io/browse/SPR-12971?redirect=false)** and commented  org.springframework.util.PatternMatchUtils has an infinite loop bug.  Repro:  ``` PatternMatchUtils.simpleMatch(""**a"", ""*""); ```  tested on spring-core-3.2.8 and 4.1.0    ---  **Affects:** 3.2.8, 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ed9769a11be9ba3b6ee77420038a5b9116048f3a, https://github.com/spring-projects/spring-framework/commit/db80378dbef4bba302a3f1248f7315ae1ef8f614, https://github.com/spring-projects/spring-framework/commit/8e074b6b6744d4797175c534e7c0424d1f4d9f60  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","type: bug,","spring-projects-issues","2015-04-30T13:09:14Z","2015-05-26T01:14:45Z"
"","17912","Provide a SpringConstraintValidatorFactory variant for use with validation.xml [SPR-13327]","**[Fábio Carvalho](https://jira.spring.io/secure/ViewProfile.jspa?name=fabiocarvalho777)** opened **[SPR-13327](https://jira.spring.io/browse/SPR-13327?redirect=false)** and commented  I have a RESTful application using: * RESTEasy 3.0.9 as JAX-RS implementation * Spring 4.1.7 as DI framework * Hibernate Validator 5.0.1 as Bean Validations 1.1 framework.  This application relies on the integration between RESTEasy and Spring, and it also has some specific custom constraint validators, which are supposed to be Spring beans, and where I would like to inject some other Spring beans. That is the goal I am trying to achieve, and, according to my findings after debugging a lot, that is not working well because of a bug in Spring class [org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory](https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/validation/beanvalidation/SpringConstraintValidatorFactory.java).  In order to allow injection to a custom constraint validator, which is also supposed to be a Spring bean, I need to configure the Bean Validations engine to use a custom validator factory, and that can be done by configuration in the **validation.xml** file. Under my Bean Validations configuration file validation.xml file I added the Spring constraint validator factory, according to Spring documentation, as seen below.  ``` org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory ```  So, if I don't set the Spring constraint validator factory (as seen above), obviously the custom validator is not a Spring bean, so I get a **NullPointerException** when attempting to refer to a member that were supposed to be injected.  But, if I do set the Spring constraint validator factory, then my server fails to start with the following exception:  ``` Caused by: javax.validation.ValidationException: HV000064: Unable to instantiate constraint factory class: class org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory. 	at org.hibernate.validator.internal.util.privilegedactions.NewInstance.run(NewInstance.java:51) ~[hibernate-validator-5.0.1.Final.jar:5.0.1.Final] 	at org.hibernate.validator.internal.util.ReflectionHelper.run(ReflectionHelper.java:671) ~[hibernate-validator-5.0.1.Final.jar:5.0.1.Final] 	at org.hibernate.validator.internal.util.ReflectionHelper.newInstance(ReflectionHelper.java:219) ~[hibernate-validator-5.0.1.Final.jar:5.0.1.Final] 	at org.hibernate.validator.internal.xml.ValidationBootstrapParameters.setConstraintFactory(ValidationBootstrapParameters.java:189) ~[hibernate-validator-5.0.1.Final.jar:5.0.1.Final] 	... 31 common frames omitted Caused by: java.lang.InstantiationException: org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory 	at java.lang.Class.newInstance(Class.java:359) ~[na:1.7.0_45] 	at org.hibernate.validator.internal.util.privilegedactions.NewInstance.run(NewInstance.java:48) ~[hibernate-validator-5.0.1.Final.jar:5.0.1.Final] 	... 34 common frames omitted ```  After debugging that, I realized that Hibernate Validator tries to instantiate SpringConstraintValidatorFactory using reflection, and it expects SpringConstraintValidatorFactory to have a public and no argument constructor (see the Hibernate Validator lines of code mentioned in the stack trace), but SpringConstraintValidatorFactory does not have it, and that is why the **InstantiationException** exception is thrown.  I have also tested with and without **LocalValidatorFactoryBean** Spring bean, but it did not help at all.  >   ## About how my custom validator gets triggered  As said in earlier, my application is a JAX-RS application. So, I am not injecting my custom validator anywhere in my code, it gets triggered behind the scenes by the JAX-RS engine via annotations I use in my REST endpoint. For example, I have created a custom validator to evaluate zip codes, and I have a REST endpoint that receives as an URI parameter the actual zip code. So, in this use case, this is how I define the validation constraint (see below). So, as you can see, I never inject the validator, and no, I am not trying to get my validator by calling the factory explicitly. Everything happens behind the scenes, done by the JAX-RS engine (via this jar called resteasy-validator-provider-11).  ```java @GET @Path(""/echozip/{zip}"") public String echoZip(@ValidateZip @PathParam(""zip"") String zip) { ```  ## About constraint-validator-factory  Spring document does not refer to the **constraint-validator-factory** property, or even to the file validation.xml at all, that comes from Bean Validations 1.1 document, which Hibernate Validator complies with. [See it here](http://beanvalidation.org/1.1/spec/#xml-config).  ---  **Affects:** 4.1.7, 4.2 GA  **Issue Links:** - #17930 Revisit RedirectView's use of getCurrentWebApplicationContext()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6d1b8b5a31879a466c589693e088390a6a1c9f77","closed","type: enhancement,","spring-projects-issues","2015-08-06T10:15:27Z","2019-01-11T18:23:52Z"
"","17707","AntPathMatcher isn't fully conform Ant Style [SPR-13116]","**[FXDev](https://jira.spring.io/secure/ViewProfile.jspa?name=fxdev)** opened **[SPR-13116](https://jira.spring.io/browse/SPR-13116?redirect=false)** and commented  According to the Spring Javadoc, [org.springframework.util.AntPathMatcher](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/AntPathMatcher.html) is an implementation of the [Ant-style path patterns](http://ant.apache.org/manual/dirtasks.html#patterns), but the following isn't conform Ant style.  The Ant pattern documentation says:  ``` **/test/** Matches all files that have a test element in their path, including test as a filename. ```  AntPathMatcher fails in the following test:  ```java String pattern = ""**/test/**""; String path = ""/a/test/b"";  // Spring implementation AntPathMatcher springMatcher = new AntPathMatcher(); boolean springMatch = springMatcher.match(pattern, path); System.out.println(springMatch); // false, but should be true  System.out.println(new AntPathMatcher().match(pattern, ""a/test/b"")); // true, as expected ```  So AntPathMatcher doesn't seem to work correctly when a path is an absolute path (starting with a slash).  The official Ant Style pattern is implemented in: http://www.docjar.com/docs/api/org/apache/tools/ant/DirectoryScanner.html https://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/DirectoryScanner.java  Also note that Java 7 also supports globbing patterns: http://docs.oracle.com/javase/7/docs/api/java/nio/file/FileSystem.html#getPathMatcher%28java.lang.String%29  ---  **Affects:** 4.1.6  **Issue Links:** - #17730 AntPathMatcher throws StringIndexOutOfBoundsException - [SEC-3017](https://jira.spring.io/browse/SEC-3017) AntPathMatcher isn't fully conform Ant Style","closed","type: enhancement,","spring-projects-issues","2015-06-12T04:40:01Z","2019-01-11T16:26:00Z"
"","18007","@Validated support on Iterables (and implementors) [SPR-13428]","**[Frédéric Camblor](https://jira.spring.io/secure/ViewProfile.jspa?name=fcamblor)** opened **[SPR-13428](https://jira.spring.io/browse/SPR-13428?redirect=false)** and commented  Putting a `@Validated` annotation on `@RequestBody` of an Iterable (or any implementation such as List) doesn't trigger any bean validation process  To reproduce, take the following controller declaration :  ``` @Controller public class HelloWorldController {      public static class Hello {         @NotNull         private String who;                  public String getWho() { return who; }         public void setWho(String who) { this.who = who; }     }      // If I send JSON : {}     // => Validation error about ""who"" field being mandatory (it's ok)     @RequestMapping(value=""/testWithPOJO"", method=RequestMethod.POST)     public @ResponseBody List testPost5(@RequestBody @Validated Hello hello) {         return Arrays.asList(hello);     }      // If I send JSON : [ {} ]     // => No Validation error, bean validation is not triggered on instances, this looks weird     @RequestMapping(value=""/testWithArray"", method=RequestMethod.PUT)     public @ResponseBody List testPost1(@RequestBody @Validated List hellos) {         return hellos;     }      @ExceptionHandler(MethodArgumentNotValidException.class)     @ResponseStatus(value = HttpStatus.PRECONDITION_FAILED)     public @ResponseBody List handleValidationFailure(MethodArgumentNotValidException exception) {         return exception.getBindingResult().getAllErrors();     } } ```  WDYT ?  ---  **Affects:** 3.2 GA, 4.0 GA, 4.1 GA  **Issue Links:** - #16519 Bean Validation invocation API for use with individual values and constraints - #16917 Add support for validating a collection of objects - #19182 Validate values in top-level Map parameters  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2015-09-04T06:23:13Z","2019-01-29T20:53:39Z"
"","17560","Resttemplate with HttpComponentsClientHttpRequestFactory will make HttpMessageConverterExtractor.extractData return null if the header contains content-encoding gzip, the connection is closed and the response isn't chunked [SPR-12968]","**[Fredrik Albihn](https://jira.spring.io/secure/ViewProfile.jspa?name=albihnf)** opened **[SPR-12968](https://jira.spring.io/browse/SPR-12968?redirect=false)** and commented  Resttemplate with HttpComponentsClientHttpRequestFactory will make HttpMessageConverterExtractor.extractData return null if the header contains content-encoding gzip, the connection is closed and the response isn't chunked  When using Resttemplate with HttpComponentsClientHttpRequestFactory and the response includes content-encoding gzip The HttpResponseInterceptor org.apache.http.client.protocol.ResponseContentEncoding  will replace the entity with a org.apache.http.client.entity.GzipDecompressingEntity which always returns -1 as content length.  This will have the affect that HttpMessageConverterExtractor.hasMessageBody will return false if the connection is closed and the response isn't chunked  ---  **Affects:** 4.1.4  **Issue Links:** - #12671 RestTemplate - support response mapping to entity with potentially empty response body. (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2015-04-30T07:32:49Z","2019-01-12T16:46:08Z"
"","17838","PropertyOrFieldReference throws ClassCastException [SPR-13247]","**[Franklin Bristow](https://jira.spring.io/secure/ViewProfile.jspa?name=fbristow)** opened **[SPR-13247](https://jira.spring.io/browse/SPR-13247?redirect=false)** and commented  Hi, I discovered this issue when I was debugging a problem that I was encountering using Thymeleaf. I describe the issue that I encountered with Thymeleaf here: http://forum.thymeleaf.org/Expression-Caching-td4029136.html  The problem actually seems to boil down to how `PropertyOrFieldReference#readProperty` expects a `PropertyAccessor` to behave when the class type of `contextObject` has changed.  The situation that I'm running in to is that when I evaluate a `Map` with a SpEL expression, then try to evaluate a different class with the same parsed SpEL expression, the `cachedReadAccessor` in `PropertyOrFieldReference` is of type `MapAccessor`. `MapAccessor#read` is expecting that the argument passed to it is of type `Map` (it doesn't check), but when the type is not of type `Map`, it just throws `ClassCastException` because it's trying to cast to `Map`.  `PropertyOrFieldReference` has a comment explaining that it can handle class-type changes, but it's expecting the `PropertyAccessor` to throw `AccessException`. Since `MapAccessor` is just throwing `ClassCastException`, the exception just goes all the way up the stack, even though the expected behaviour is to just try a different `PropertyAccessor`.  I've attached some code that demonstrates the behaviour. It contains some thymeleaf code, but that's the context that I'm using it in that demonstrates the behaviour.  ---  **Affects:** 4.1.7  **Attachments:** - [spring-propertyorfieldreference-caching-exception.tar.bz2](https://jira.spring.io/secure/attachment/22947/spring-propertyorfieldreference-caching-exception.tar.bz2) (_1.53 kB_)  **Issue Links:** - #17614 NPE in PropertyOrFieldReference due to concurrency issue when caching SpelExpression objects  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/34a81b605abfa2c2d9d62652a43fbc6bf38e3016, https://github.com/spring-projects/spring-framework/commit/ac4c278d3a933a6f86b2e68cb30a4dc97ddb4f24  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","in: core,","spring-projects-issues","2015-07-17T07:31:29Z","2019-01-11T18:04:19Z"
"","17914","Incorrect advice by aspect with pointcut combining type annotations [SPR-13329]","**[Frank Pavageau](https://jira.spring.io/secure/ViewProfile.jspa?name=fpavageau)** opened **[SPR-13329](https://jira.spring.io/browse/SPR-13329?redirect=false)** and commented  I have an aspect with a pointcut like  ```java execution(* (@Annotation1 !@Annotation2 *).*(..)) ```  which actually advises classes having both `@Annotation1` and `@Annotation2`: the bean is proxied during the context initialization, and since the proxy only checks the method match on invocation (always true here, because of the `.*(..)` part), the advice applies.  I've traced the initialization through `AbstractAutoProxyCreator.wrapIfNecessary()`, to `AopUtils.findAdvisorsThatCanApply()`, to `AspectJExpressionPointcut.matches()`, which then calls into AspectJ through `PointcutExpressionImpl.couldMatchJoinPointsInType()`. That, in turn, does a ""fast match"" which only supports ""exact annotation matches"", i.e. a single annotation match, to determine if the pointcut can actually match with a yes or no answer; otherwise, the fast match returns ""maybe"", which is interpreted as a yes. Hence the name of the method: _could_ match...  It might be related to #15178, since that's not an exact match either (to be precise, it's neither an exact type match nor an exact annotation match).  Shouldn't Spring call a regular match instead of a ""potential"" one (if such as method exists for a partial match, since it's only interested on the type part at this point)? Of course, the fast match could also probably be improved in AspectJ to actually support annotation combinations through conjunction, disjunction and negation, as I [proposed on the aspectj-users](http://dev.eclipse.org/mhonarc/lists/aspectj-users/msg14833.html) mailing list.  ---  **Affects:** 4.1.5  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/tree/master/SPR-13329  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/dfdc079f41ed36de4c0329198fc49f529731c6fc, https://github.com/spring-projects/spring-framework-issues/commit/be0680fbcfef4454852e5d8e26171b4ba86fcffd","closed","status: bulk-closed,","spring-projects-issues","2015-08-07T00:47:06Z","2019-01-12T02:26:23Z"
"","17647","In SPEL projection expression,  #this as the same value as #root [SPR-13055]","**[Franck MARCHAND](https://jira.spring.io/secure/ViewProfile.jspa?name=fmarchand)** opened **[SPR-13055](https://jira.spring.io/browse/SPR-13055?redirect=false)** and commented  I think #this is not resolved correctly when it is used as an argument of a static method.  If I try to execute this code  :  ```  List> myPayload = new ArrayList>();  Map v1 = new HashMap(); Map v2 = new HashMap();  v1.put(""test11"", ""test11""); v1.put(""test12"", ""test12""); v2.put(""test21"", ""test21""); v2.put(""test22"", ""test22"");  myPayload.add(v1); myPayload.add(v2);  EvaluationContext context = new StandardEvaluationContext(myPayload);  ExpressionParser parser=new SpelExpressionParser();  List res = parser.parseExpression(""#root.![T(org.springframework.util.StringUtils).collectionToCommaDelimitedString(#this.values())]"").getValue(context, List.class);  ```  I get an exception :  ``` org.springframework.expression.spel.SpelEvaluationException: EL1004E:(pos 6): Method call: Method values() cannot be found on java.util.ArrayList type 	at org.springframework.expression.spel.ast.MethodReference.findAccessorForMethod(MethodReference.java:211) 	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:125) 	at org.springframework.expression.spel.ast.MethodReference.access$000(MethodReference.java:49) 	at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:342) 	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:88) 	at org.springframework.expression.spel.ast.MethodReference.getArguments(MethodReference.java:154) ```  In this case #this shouldn't be an ArrayList but a HashMap.  If I don't use #this in the method collectionToCommaDelimitedString, but directly in the projection expression like this :  ``` List res = parser.parseExpression(""#root.![#this.values()]"").getValue(context, List.class); ```  I don't have any exceptions and the result is the one I was expecting.  ---  **Affects:** 4.1.4  **Attachments:** - [patch_13055.txt](https://jira.spring.io/secure/attachment/22821/patch_13055.txt) (_12.58 kB_)  **Issue Links:** - #15050 Collection selection and the use of #this - #16651 SpEL Collection Selection: ""selectionExpression"" with method invocation pushes root object as active context instead of current item","closed","in: core,","spring-projects-issues","2015-05-21T07:57:02Z","2019-01-11T16:00:04Z"
"","17232","Netty4ClientHttpRequestFactory buffers (aggregates) all requests/responses [SPR-12631]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-12631](https://jira.spring.io/browse/SPR-12631?redirect=false)** and commented  The usage of HttpObjectAggregator is convenient for a quick implementation, but it makes it unfeasible to handle big uploads/downloads.  A streaming-friendly solution would be very useful for handling big requests.  ---  **Affects:** 4.1.4  **Issue Links:** - #17224 Netty4ClientHttpRequestFactory always allocates ""maxRequestSize"" bytes for each request - #19426 RestTemplate POST and PUT don't work with Netty4ClientHttpRequestFactory  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2015-01-14T12:35:57Z","2019-01-11T19:04:16Z"
"","17224","Netty4ClientHttpRequestFactory always allocates ""maxRequestSize"" bytes for each request [SPR-12623]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-12623](https://jira.spring.io/browse/SPR-12623?redirect=false)** and commented  There are two inter-related issues here: 1. The maxRequestSize parameter  name is incorrect, as it also affects the maximum response size (it's passed to HttpObjectAggregator):  ``` private Bootstrap getBootstrap() {      if (this.bootstrap == null) {           Bootstrap bootstrap = new Bootstrap();           bootstrap.group(this.eventLoopGroup).channel(NioSocketChannel.class)                         .handler(new ChannelInitializer() {                                  @Override                                  protected void initChannel(SocketChannel channel) throws Exception {                                           ChannelPipeline pipeline = channel.pipeline();                                           if (sslContext != null) {                                                    pipeline.addLast(sslContext.newHandler(channel.alloc()));                                           }                                           pipeline.addLast(new HttpClientCodec());                                           pipeline.addLast(new HttpObjectAggregator(maxRequestSize));                                  }                         }); ```  -Way to solve this would be to add a separate maxResponseSize parameter and use it in HttpObjectAggregator.-  2. Because of the issue above, when you increase the `maxRequestSize` parameter (to be able to process `maxRequestSize`-big responses), even if the request to be processed is just a few kB's, it will always allocate `maxRequestSize` for it.  This can easily cause OOM errors - but it's not a leak, it's just an abusive use of memory.  ``` java.lang.OutOfMemoryError: Java heap space         at io.netty.buffer.UnpooledHeapByteBuf.(UnpooledHeapByteBuf.java:45) ~[netty-all-4.0.24.Final.jar:4.0.24.Final]         at io.netty.buffer.UnpooledByteBufAllocator.newHeapBuffer(UnpooledByteBufAllocator.java:43) ~[netty-all-4.0.24.Final.jar:4.0.24.Final]         at io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:136) ~[netty-all-4.0.24.Final.jar:4.0.24.Final]         at io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:127) ~[netty-all-4.0.24.Final.jar:4.0.24.Final]         at io.netty.buffer.Unpooled.buffer(Unpooled.java:118) ~[netty-all-4.0.24.Final.jar:4.0.24.Final]         at org.springframework.http.client.Netty4ClientHttpRequest.(Netty4ClientHttpRequest.java:68) ~[spring-web-4.1.4.RELEASE.jar:4.1.4.RELEAS E]         at org.springframework.http.client.Netty4ClientHttpRequestFactory.createRequestInternal(Netty4ClientHttpRequestFactory.java:148) ~[spring-web- 4.1.4.RELEASE.jar:4.1.4.RELEASE]         at org.springframework.http.client.Netty4ClientHttpRequestFactory.createAsyncRequest(Netty4ClientHttpRequestFactory.java:144) ~[spring-web-4.1 .4.RELEASE.jar:4.1.4.RELEASE]         at org.springframework.http.client.support.AsyncHttpAccessor.createAsyncRequest(AsyncHttpAccessor.java:76) ~[spring-web-4.1.4.RELEASE.jar:4.1. 4.RELEASE]         at org.springframework.web.client.AsyncRestTemplate.doExecute(AsyncRestTemplate.java:533) ~[spring-web-4.1.4.RELEASE.jar:4.1.4.RELEASE]         at org.springframework.web.client.AsyncRestTemplate.execute(AsyncRestTemplate.java:512) ~[spring-web-4.1.4.RELEASE.jar:4.1.4.RELEASE]         at org.springframework.web.client.AsyncRestTemplate.exchange(AsyncRestTemplate.java:456) ~[spring-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] ```  The issue is here:  ``` public Netty4ClientHttpRequest(Bootstrap bootstrap, URI uri, HttpMethod method, int maxRequestSize) {      this.bootstrap = bootstrap;      this.uri = uri;      this.method = method;      this.body = new ByteBufOutputStream(Unpooled.buffer(maxRequestSize)); } ```  The method used allocates always the max capacity:  ``` /**  * Creates a new big-endian Java heap buffer with the specified {@code capacity}, which  * expands its capacity boundlessly on demand.  The new buffer's {@code readerIndex} and  * {@code writerIndex} are {@code 0}.  */ public static ByteBuf buffer(int initialCapacity) {     return ALLOC.heapBuffer(initialCapacity); } ```  Instead, this allocation method should be used:  ``` /**  * Creates a new big-endian Java heap buffer with the specified  * {@code initialCapacity}, that may grow up to {@code maxCapacity}  * The new buffer's {@code readerIndex} and {@code writerIndex} are  * {@code 0}.  */ public static ByteBuf buffer(int initialCapacity, int maxCapacity) {     return ALLOC.heapBuffer(initialCapacity, maxCapacity); } ```  I set this bug as critical because, with current status, the client is unusable for any meaningful load.  Aside from this, it'd be great if it was possible to provide the memory allocator, instead of using always the static Unpooled one...  ---  **Affects:** 4.1.4  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/719  **Issue Links:** - #17232 Netty4ClientHttpRequestFactory buffers (aggregates) all requests/responses  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d9d8a79c3075d90e3d21eda5ce26d34de1618c42, https://github.com/spring-projects/spring-framework/commit/fd426aaa4df5ae08b448d21541d375f9a9d5b3a6","closed","type: bug,","spring-projects-issues","2015-01-13T07:39:02Z","2019-01-11T19:05:38Z"
"","17213","Allow readTimeout / connectTimeout in Netty4ClientHttpRequestFactory [SPR-12612]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-12612](https://jira.spring.io/browse/SPR-12612?redirect=false)** and commented  In older ClientHttpRequestFactory's (java native and in Apache HTTP components) it is possible to declare readTimeout and connectTimeout.  Netty4ClientHttpRequestFactory doesn't allow this.  Connect timeout looks straightforward: it can be easily implemented in ChannelConfig (http://netty.io/4.0/api/io/netty/channel/ChannelConfig.html).  Read timeout could be implemented with a timeout handler in the pipeline (http://netty.io/4.0/api/io/netty/handler/timeout/ReadTimeoutHandler.html). I'm not sure about this one however - the timeout should affect only when waiting for an HTTP request.   ---  **Affects:** 4.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e24ebd6dbb1b2e3d5ce25c275c3ce900ddf8869b","closed","type: enhancement,","spring-projects-issues","2015-01-10T05:03:26Z","2015-05-26T01:14:53Z"
"","17209","Document how HandlerInterceptor should differentiate an ASYNC dispatch  [SPR-12608]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-12608](https://jira.spring.io/browse/SPR-12608?redirect=false)** and commented  HandlerIntercetor#preHandle is invoked twice in an async scenario.  The problem is that it's not documented how to differentiate and avoid double-executing some logic. As it's a very common problem when using interceptors and using async handling, adding some explicit doc about how to handle would help.  ``` if (DispatcherType.ASYNC.equals(request.getDispatcherType())) {           return true;                 } doStuffAsUsual(); return whatever; ```  ---  **Affects:** 4.1.4  **Reference URL:** https://github.com/flozano/spring-interceptor-async-test  **Issue Links:** - #16826 HTTP Streaming and Server-Sent Events (SSE) - #17317 Document how HandlerInterceptor can hook into async request timedout  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/18039785aeacc3ca76c70014b11fb30923a54941","closed","type: enhancement,","spring-projects-issues","2015-01-09T03:54:58Z","2019-01-11T19:05:57Z"
"","17199","Support CompletableFuture as alternative to DeferredResult in MVC [SPR-12598]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-12598](https://jira.spring.io/browse/SPR-12598?redirect=false)** and commented  It would be great if, when using Java 8, CompletableFuture (or CompletionStage) was supported as return method of MVC controllers.  ---  **Issue Links:** - #17198 Support CompletableFuture as alternative to DeferredResult in MVC (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2015-01-05T08:31:08Z","2019-01-11T18:38:39Z"
"","17198","Support CompletableFuture as alternative to DeferredResult in MVC [SPR-12597]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-12597](https://jira.spring.io/browse/SPR-12597?redirect=false)** and commented  It would be great if, when using Java 8, CompletableFuture (or CompletionStage) was supported as return method of MVC controllers.  ---  **Issue Links:** - #17199 Support CompletableFuture as alternative to DeferredResult in MVC (_**""is duplicated by""**_) - #16821 Support CompletableFuture as return value in `@MessageMapping` handlers - #17719 Support CompletableFuture<> as return type of `@Async` methods - #19823 Consistently support CompletionStage next to CompletableFuture  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5b0a0f4db5e1e7527bb76f10e55ce0d539571ab6  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-01-05T08:31:03Z","2019-01-13T05:43:00Z"
"","17194","Possible PoolingHttpClientConnectionManager connection leaks with HttpComponentsClientRequestFactory [SPR-12593]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-12593](https://jira.spring.io/browse/SPR-12593?redirect=false)** and commented  I found that someone is reporting a possible leak in the Http-components mailing list, related to Spring's RestTemplate:  > We're using Spring's RestTemplate to make the HTTP calls, and if a response extractor is not > specified (which is the case for a put (because by default there is not response) the input > stream is never closed. I'm not sure how I'm going to fix that because it's in a method I > can't just override.  http://mail-archives.apache.org/mod_mbox/hc-httpclient-users/201412.mbox/%3C61A570E2FDBE0A4FB8F4EC8F764A9767C779D0%40PARS1PZEXMBX003.mercury.intra%3E  I am a heavy user of HttpComponentsClientRequestFactory with a pooled connection manager, and haven't found this issue myself... but I think it may be worth checking.   ---  **Affects:** 4.1.4  **Reference URL:** http://mail-archives.apache.org/mod_mbox/hc-httpclient-users/201412.mbox/%3C61A570E2FDBE0A4FB8F4EC8F764A9767C779D0%40PARS1PZEXMBX003.mercury.intra%3E","closed","in: web,","spring-projects-issues","2015-01-02T09:47:22Z","2019-01-11T18:38:35Z"
"","17857","Cannot extends PersistenceAnnotationBeanPostProcessor [SPR-13266]","**[Francesco Chicchiricco](https://jira.spring.io/secure/ViewProfile.jspa?name=ilgrosso)** opened **[SPR-13266](https://jira.spring.io/browse/SPR-13266?redirect=false)** and commented  Even though some methods in `PersistenceAnnotationBeanPostProcessor` are `protected`, it is virtually impossible to extend this class.  This mainly because `PersistenceElement` is `private static`, and protected methods are only invoked from within there.   ---  **Affects:** 4.1.7","closed","","spring-projects-issues","2015-07-22T07:17:59Z","2019-01-11T18:03:11Z"
"","17518","Use higher log level in InvocableHandlerMethod.getMethodArgumentValues() [SPR-12925]","**[Flávio Viveiros de Castro Etrusco](https://jira.spring.io/secure/ViewProfile.jspa?name=etrusco)** opened **[SPR-12925](https://jira.spring.io/browse/SPR-12925?redirect=false)** and commented  If an exception occurs in argumentResolvers.resolveArgument() (e.g. a binding error in jackson) nothing is logged unless log level for org.springframework.web.method.HandlerMethod is TRACE. On TRACE log level every request is logged, however. It would be nice if InvocableHandlerMethod.getMethodArgumentValues() would log parameter info on DEBUG level.  ---  **Affects:** 4.1.5  **Issue Links:** - #17858 InvocableHandlerMethod.getMethodArgumentValues() failure should lead to warn-level logging by default  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fb7476f543ea797e9e375fbbbb64ddcf258d75f3, https://github.com/spring-projects/spring-framework/commit/10a51a4f1957e5c579e9e63c023d422b0db55793","closed","type: enhancement,","spring-projects-issues","2015-04-16T09:58:39Z","2019-01-11T21:08:42Z"
"","17972","Compatibility with Hibernate ORM 5.0 Final - create instance of entityManagerFactory [SPR-13391]","**[Florian](https://jira.spring.io/secure/ViewProfile.jspa?name=flodes7)** opened **[SPR-13391](https://jira.spring.io/browse/SPR-13391?redirect=false)** and commented  Hello,  Spring can not instantiate the bean EntityManagerFactory with the final version of Hibernate ORM 5.0 Looking at the sources of Hibernate 5.0 RC3 / RC4, I realize that resolvePropertyAccessStrategy method has an additional parameter: containerClass (type: class) https://github.com/hibernate/hibernate-orm/blob/c622d391990969a7d776cf06f565c5934c0d8be4/hibernate-core/src/main/java/org/hibernate/property/access/internal/PropertyAccessStrategyResolverStandardImpl.java  Errors : org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [applicationContextDb.xml]: Invocation of init method failed; nested exception is java.lang.NoSuchMethodError: org.hibernate.property.access.spi.PropertyAccessStrategyResolver.resolvePropertyAccessStrategy(Ljava/lang/String;Lorg/hibernate/EntityMode;)Lorg/hibernate/property/access/spi/PropertyAccessStrategy; at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1578) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1045) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:824) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:537) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:83)  ---  **Affects:** 4.2 GA  **Attachments:** - [applicationContext.xml](https://jira.spring.io/secure/attachment/22996/applicationContext.xml) (_1005 bytes_) - [applicationContextDataSource.xml](https://jira.spring.io/secure/attachment/22997/applicationContextDataSource.xml) (_693 bytes_) - [applicationContextDb.xml](https://jira.spring.io/secure/attachment/22995/applicationContextDb.xml) (_1.14 kB_)  **Issue Links:** - #17594 Compatibility with Hibernate ORM 5.0 GA  0 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-08-25T02:24:46Z","2019-01-12T00:16:10Z"
"","17418","Doc: MutablePersistenceUnitInfo.addManagedPackage() not triggering a package scan [SPR-12821]","**[Filipe Leandro](https://jira.spring.io/secure/ViewProfile.jspa?name=ffleandro)** opened **[SPR-12821](https://jira.spring.io/browse/SPR-12821?redirect=false)** and commented  When using the PersistenceUnitPostProcessor interface for dynamically injecting Entities and Named Queries in my EntityManagerFactory, I use the method MutablePersistenceUnitInfo.addManagedPackage() to add a package for the EntityManagerFactory scan for entities.  However these packages never get scanned. If I use the method MutablePersistenceUnitInfo.addManagedClassName() and manually add all the classes in thoses packages it works with no problem.  I'm I doing something wrong? I have tried using these persistenceProviders with the same end result: - org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider - org.hibernate.jpa.HibernatePersistenceProvider    ---  **Affects:** 4.1.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/98d00ea69876029a7bc288749f5b10b7622145bc, https://github.com/spring-projects/spring-framework/commit/4f1d9fddc871307b26a7ce76c8adad7a2f25081f","closed","type: task,","spring-projects-issues","2015-03-16T05:23:59Z","2015-03-25T09:42:36Z"
"","17485","HttpClientErrorException missing response body if callback is registered [SPR-12887]","**[Fedor Bartosh](https://jira.spring.io/secure/ViewProfile.jspa?name=bartosh)** opened **[SPR-12887](https://jira.spring.io/browse/SPR-12887?redirect=false)** and commented  AsyncRestTemplate.execute returns ListenableFuture that allows to register callbacks. Let's say we have following example:  ```      public void test() throws InterruptedException, ExecutionException {         AsyncRestTemplate restTemplate = new AsyncRestTemplate();         String url = ""http://graph.facebook.com/some-non-existing-resource"";         ListenableFuture> responseEntity = restTemplate.exchange(url, HttpMethod.GET, HttpEntity.EMPTY, Object.class);         final String[] listenerExceptionBody = new String[1];         String getExceptionBody = null;         try {             responseEntity.addCallback(new ListenableFutureCallback>() {                 @Override                 public void onFailure(Throwable throwable) {                     if (throwable instanceof HttpClientErrorException) {                         HttpClientErrorException exception = (HttpClientErrorException) throwable;                         listenerExceptionBody[0] = exception.getResponseBodyAsString();                     }                 }                  @Override                 public void onSuccess(ResponseEntity objectResponseEntity) {                     System.out.println(""onSuccess"");                 }             });              Thread.sleep(100);             responseEntity.get();         } catch (HttpClientErrorException e) {             getExceptionBody = e.getResponseBodyAsString();         }         Assert.assertEquals(listenerExceptionBody[0], getExceptionBody);     }  ```  If 4xx error occurs during REST call, two HttpClientErrorException will be created, one of them containing response body and another one missing.  Sample maven project is attached.  ---  **Affects:** 4.1.6  **Attachments:** - [client-error-body-test.tar](https://jira.spring.io/secure/attachment/22726/client-error-body-test.tar) (_20.00 kB_)  **Issue Links:** - #17992 AsyncRestTemplate should wrap RuntimeExceptions in ExecutionException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b119a9c82cfbbd7d652d5adc6e3564383adb1479, https://github.com/spring-projects/spring-framework/commit/de0f3aec53e88962411b629350d8d86ad3447730, https://github.com/spring-projects/spring-framework/commit/3402c1380373aa91d5d0c9dc3d66fbd4e99e07d5, https://github.com/spring-projects/spring-framework/commit/b18053f93a2f3b01c53843284627a54e751577cf","closed","type: bug,","spring-projects-issues","2015-04-03T10:24:32Z","2019-01-11T21:36:19Z"
"","17230","Session attributes object properties changed by framework during request [SPR-12629]","**[Fantarama](https://jira.spring.io/secure/ViewProfile.jspa?name=fantarama)** opened **[SPR-12629](https://jira.spring.io/browse/SPR-12629?redirect=false)** and commented  On a controller with `@SessionAttributes` annotation I have an attribute named ""ente"" which is a java pojo with a property named ""id"" (I set this session attribute during login).  On same controlle there is a `@RequestMapping` annotated method like this:  public ModelAndView handleRequest(`@ModelAttribute`(""ente"") Ente ente, `@RequestParam`(""id"") String id) ...  When the method is called the attribute ""ente"" is my session object and the ""id"" is the correct request parameter but here comes the BUG: Spring has changed the Ente's ""id"" property with the value of the ""id"" parameter so my persistence layer didn't found the object ""ente"" ... ente.id has a totally different meaning.    ---  **Affects:** 4.0.4","closed","type: enhancement,","spring-projects-issues","2015-01-14T08:44:33Z","2015-01-15T16:54:53Z"
"","17947","Add 'preparer-factory' attribute to  [SPR-13363]","**[Fabien Baligand](https://jira.spring.io/secure/ViewProfile.jspa?name=fbaligand)** opened **[SPR-13363](https://jira.spring.io/browse/SPR-13363?redirect=false)** and commented  This would be great to add 'preparer-factory' attribute to .  This would allow such a configuration :  ```xml  ...  ```  Thereby, it allows to fully enjoy spring dependency injection in ViewPreparers.   ---  **Affects:** 4.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6aa9e0caf984ec99a4d1bc276f116ebd62eff311","closed","type: enhancement,","spring-projects-issues","2015-08-18T01:15:02Z","2015-09-05T08:55:13Z"
"","17916","@JsonView not working with @RestController [SPR-13331]","**[Fabian Cernota](https://jira.spring.io/secure/ViewProfile.jspa?name=cernota)** opened **[SPR-13331](https://jira.spring.io/browse/SPR-13331?redirect=false)** and commented  Hi,  i use Spring 4.1.6 with Jackson 2.5.1 and i want to customize my json output using `@jsonview` annotation.  I have a Entity Like  ```java @Entity public class Version{      @JsonVIew(Views.List.class      private int id;      @JsonView(Views.Detail.class)      private int productId;  //Getter and setters } ```  Define my views as follows  ```java public class Views{    public interface List{    }    public interface Detail{   } } ```  JPA Repository:  ```java  public interface VersionRepository extends JpaRepository {  	public Version findById(int versionId);  	@Query(value = ""select v from Version v"") 	public List findWithPageable(Pageable pageable);  	public List findByProdukt_id(int IdProdukt, Pageable pageable);  } ```  And RestController:  ```java @RestController @RequestMapping(""/versionen"") @Transactional public class VersionService { 	Logger log = LoggerFactory.getLogger(this.getClass()); 	private final ObjectMapper objectMapper = new ObjectMapper();  	@PostConstruct 	public void initialize() { 		log.info(""VersionRest Schnittstelle erzeugt""); 	}  	@Autowired 	VersionRepository versionRepository;         @JsonView(Views.List.class)   	@RequestMapping(method = RequestMethod.GET) 	public Resources> getVersionList(@RequestParam(required = false, 			defaultValue = ""10"") 	final int limit, @RequestParam(required = false, defaultValue = ""0"") 	final int page, @RequestParam(required = false) Integer produkt) { 		List versionList; 		if (produkt == null) {  			versionList = 					versionRepository.findWithPageable(new PageRequest(page, limit, Direction.DESC, 							""id"")); 		} else { 			versionList = 					versionRepository.findByProdukt_id(produkt, new PageRequest(page, limit, 							Direction.DESC, ""id"")); 		} 		List> versionResourceList = new ArrayList<>(); 		for (Version v : versionList) { 			Resource r = new Resource<>(v); 			r.add(ControllerLinkBuilder.linkTo( 					ControllerLinkBuilder.methodOn(VersionService.class).getVersion(v.getId())) 					.withSelfRel()); 			versionResourceList.add(r); 		}  		Resources> result = new Resources<>(versionResourceList); 		/** 		 * Letzte Seite berechnen 		 */ 		long pageCount = versionRepository.count(); 		int lastPage = (int) (pageCount / limit);  		result.add(ControllerLinkBuilder.linkTo( 				ControllerLinkBuilder.methodOn(VersionService.class).getVersionList(limit, 0, 						(produkt == null ? null : produkt))).withRel(""first"")); 		if (page != 0) { 			result.add(ControllerLinkBuilder.linkTo( 					ControllerLinkBuilder.methodOn(VersionService.class).getVersionList(limit, 							page - 1, (produkt == null ? null : produkt))).withRel(""prev"")); 		} 		if (page != lastPage) { 			result.add(ControllerLinkBuilder.linkTo( 					ControllerLinkBuilder.methodOn(VersionService.class).getVersionList(limit, 							page + 1, (produkt == null ? null : produkt))).withRel(""next""));  		}  		result.add(ControllerLinkBuilder.linkTo( 				ControllerLinkBuilder.methodOn(VersionService.class).getVersionList(limit, 						lastPage, (produkt == null ? null : produkt))).withRel(""last"")); 		 		return result;  	}  	 }  } ```  In my browser i only see empty brackets {}. When i doesn't use JSONViews it shows me everything from the entities.  Thanks Fabian   ---  **Affects:** 4.1.6","closed","status: invalid,","spring-projects-issues","2015-08-07T08:24:44Z","2019-01-12T05:23:59Z"
"","17328","Add TimeoutException to JmsInvokerClientInterceptor [SPR-12731]","**[Ezequiel Rosas Garcia](https://jira.spring.io/secure/ViewProfile.jspa?name=nhtzr.rg)** opened **[SPR-12731](https://jira.spring.io/browse/SPR-12731?redirect=false)** and commented  JmsInvokerClientInterceptor currently allows a `timeout` field, but it is currently not checking the return value of `MessageConsumer#receive(long timeout)` for null, which occurs when a timeout happens.  That leaves a NullPointerException coming from MessageConverter as the only signal for available for when a timeout happens .  [MessageConsumer documentation mentions this null return value for receive(long)](http://docs.oracle.com/javaee/6/api/javax/jms/MessageConsumer.html#receive(long))  Right now, It is possible to work around this issue by checking for null in a custom MessageConverter, but current MessageConverter implementations are naturally not expecting a null Message. (Except MessagingMessageConverter, though)  I would like to propose a change similar to the following to JmsInvokerClientInterceptor in order to signal a timeout situation to client code:  ``` /*line 246*/ Message responseMessage = doExecuteRequest(session, queueToUse, requestMessage); /* added  */ if (responseMessage == null) throw new TimeoutException() /*line 247*/ return extractInvocationResult(responseMessage); ```    ---  **Affects:** 4.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8fcbdaee24ffefaa4e73209c61cf76e8f4fbce2b","closed","type: enhancement,","spring-projects-issues","2015-02-18T13:31:39Z","2015-05-26T01:15:15Z"
"","17639","@TransactionalEventListener is never being called [SPR-13047]","**[Evan Larson](https://jira.spring.io/secure/ViewProfile.jspa?name=evbo23)** opened **[SPR-13047](https://jira.spring.io/browse/SPR-13047?redirect=false)** and commented  I am implementing `@EventListener` from Spring 4.2 and it works fine. When I try to implement a `@TransactionalEventListener` it never gets called.  The ApplicationListenerMethodTransactionalAdapter makes the check:  if(TransactionSynchronizationManager.isSynchronizationActive())  and it is always false so it skips running the event because it says it is not in a transaction.  The code for the event listener is simply:  `@TransactionalEventListener`() public void handleTransactionalAddEvent(Event event) { logger.info(""Add Event: {}""); } The code which publishes the event is as follows:  `@Override` `@Transactional` public Order addToOrder(String username, Long orderId) { Order order = getOrder(orderId, username);      publisher.publishEvent(new Event(order, Event.EventType.ADD));          ... Code to do stuff to the order ...          updateOrder(order);     return order;  }  If I change the `@TransactionEventListener` to just be `@EventListener`, or I add the fallbackExecution attribute it will run fine, but with the `@TransactionEventListener` it never gets called even though it is published inside of a `@transactional` code block   --- No further details from [SPR-13047](https://jira.spring.io/browse/SPR-13047?redirect=false)","closed","","spring-projects-issues","2015-05-19T11:17:15Z","2019-01-11T16:01:31Z"
"","17973","/schema/plugin/spring-plugin.xsd is missing on http://www.springframework.org [SPR-13392]","**[Eugene Pakhomov](https://jira.spring.io/secure/ViewProfile.jspa?name=p-himik)** opened **[SPR-13392](https://jira.spring.io/browse/SPR-13392?redirect=false)** and commented  https://github.com/spring-projects/spring-plugin has spring-plugin.xsd and and example on how to include it in context configuration files. However an attempt to access it on http://www.springframework.org/schema/plugin/spring-plugin.xsd yields HTTP 404 error.   --- No further details from [SPR-13392](https://jira.spring.io/browse/SPR-13392?redirect=false)","closed","status: invalid,","spring-projects-issues","2015-08-25T03:38:34Z","2019-01-12T05:23:54Z"
"","17201","Log warning for Isolation.READ_UNCOMMITTED with Propagation.NOT_SUPPORTED [SPR-12600]","**[Ethan Zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=ethanzhang)** opened **[SPR-12600](https://jira.spring.io/browse/SPR-12600?redirect=false)** and commented  The actual Isolation Level for the setting ""`@Transactional`(propagation = Propagation.NOT_SUPPORTED, isolation = Isolation.READ_UNCOMMITTED)"" is READ_COMMITTED rather than READ_UNCOMMITTED.  The environment: spring: 3.1.0 hibernate: 3.5.6  ---  **Affects:** 3.1 GA  **Issue Links:** - #19583 Validation of existing transactions with transaction synchronization turned off not working (?) - #11234 Rollback of transaction participating in nested transaction should not enforce rollback of global transaction  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ec2cd79470aeaa8e676dfbe794a63b189349fa2  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2015-01-06T00:44:53Z","2019-01-11T19:07:06Z"
"","17644","Remoting over JMS with receiveTimeout blocks service forever [SPR-13052]","**[Erik van Paassen](https://jira.spring.io/secure/ViewProfile.jspa?name=evpaassen)** opened **[SPR-13052](https://jira.spring.io/browse/SPR-13052?redirect=false)** and commented  I'm using remoting over JMS the way it is explained here: http://docs.spring.io/spring/docs/current/spring-framework-reference/html/remoting.html. I'm using the receiveTimeout on the JmsInvokerProxyFactoryBean, which makes the temp-queue on which the reply is ought to be sent disappear after this timeout. This still works fine.  Since Spring Framework 4.0.7, the MessageListenerContainer does not remove the message from the queue when it can't deliver the reply to the reply queue, resulting in endless retries, as the temp queue will never come back. With Spring Framework 4.0.6 all just worked fine. I think the change has to be related to issue #16631, and the following commit: https://github.com/spring-projects/spring-framework/commit/7af1e002bd83ccca5d8edbb9ae1f23245844ab05.  I created a test project (https://github.com/eveoh/spring-jms-remoting-test) which demonstrates the problem with the example code found in the Spring docs. First, run the Server and then run the Client. The client has a receive timeout of 1s and the Server waits 1.5s before sending a reply, so the reply is already gone. The server will keep retrying to process the message endlessly. There's also a _spring-v4.0.6_ branch, which uses Spring Framework 4.0.6 and works just fine. A message is processed only once and discarded when it can't be delivered to the reply destination.  (The server spawns an ActiveMQ broker, so there's no need to start one by hand.)  ---  **Affects:** 3.2.11, 3.2.12, 3.2.13, 4.0.7, 4.0.8, 4.0.9  **Reference URL:** https://github.com/eveoh/spring-jms-remoting-test  **Issue Links:** - #16631 AbstractMessageListenerContainer#doExecuteListener can cause a dropped message if using CLIENT_ACKNOWLEDGE and the container is stopped and subsequently started again. - #17302 Consider rewording ack modes on the listener container javadocs - #17869 Doc: Clarify AUTO_ACKNOWLEDGE semantics with SimpleMessageListenerContainer  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c111bd75471719a21086ffd336929baa4c474f3e, https://github.com/spring-projects/spring-framework/commit/a64dcc2a31ac9af8f97398f6c0909c9e8bbcf943  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","type: bug,","spring-projects-issues","2015-05-21T03:38:00Z","2019-01-11T15:47:42Z"
"","17765","YAML Processor leaves StreamDecoder open [SPR-13173]","**[Erik Salter](https://jira.spring.io/secure/ViewProfile.jspa?name=an1310)** opened **[SPR-13173](https://jira.spring.io/browse/SPR-13173?redirect=false)** and commented  When the YAMLProcessor is closed, it is still leaving a reference to a StreamDecoder instance open.  (See UnicodeReader::init())   While Spring’s YamlProcessor closes the underlying input stream, the StreamDecoder (and thus the reference to the YAML and all its loaded references) remain open until the YAML reference is eventually GC’d.  The issue comes in when these references are promoted from new to the old generation.  The references are then only collected on a FGC.  In the interim, the application can have many open handles (we counted 900+ on a production system that only had 2 FGC cycles)  Attached is a snapshot after the YAMLProcessor closes the stream.  ---  **Affects:** 4.1.3  **Reference URL:** #17093  **Attachments:** - [yaml.png](https://jira.spring.io/secure/attachment/22921/yaml.png) (_70.46 kB_)  **Issue Links:** - #17093 Need a defensive close() in YamlProcessor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/26acb4887d5e8521e4f7d1bb23994e1992904996, https://github.com/spring-projects/spring-framework/commit/3d131c9f3ceed70700dfe79eb7431708e74f7b0c","closed","in: core,","spring-projects-issues","2015-06-29T09:57:08Z","2019-01-14T04:42:39Z"
"","18004","ClasspathXmlApplicationContext cannot be closed twice [SPR-13425]","**[Eric Vigeant](https://jira.spring.io/secure/ViewProfile.jspa?name=evigeant)** opened **[SPR-13425](https://jira.spring.io/browse/SPR-13425?redirect=false)** and commented  Here is some simple code that will show the pattern:  ```java ClassPathXmlApplicationContext ctx = ...  ctx.refresh(); // This works as expected ctx.close(); // This closes the context correctly ctx.refresh(); // This restarts the context properly ctx.close(); // This does NOT close the context ```  I traced it down to the ""closed"" field in AbstractApplicationContext, it is initialized to false, it is set to true when closing, but it is never set again to false after it is restarted. This causes the doClose() method to do nothing.  ---  **Affects:** 4.1.7, 4.2 GA  **Issue Links:** - #18132 Close processing triggered by shutdown hook isn't thread safe  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/811de8e50bb68bc055961ceb2719d1992b66df15, https://github.com/spring-projects/spring-framework/commit/57125c0adc505b386dd85769e311035027f1bfd0  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-09-03T17:29:15Z","2019-01-11T17:11:53Z"
"","17665","Jackson2ObjectMapperFactoryBean.setAutoDetectGettersSetters(boolean) does not affect ""is"" getters [SPR-13073]","**[Eric Rizzo](https://jira.spring.io/secure/ViewProfile.jspa?name=erizzo)** opened **[SPR-13073](https://jira.spring.io/browse/SPR-13073?redirect=false)** and commented  The method `Jackson2ObjectMapperFactoryBean.setAutoDetectGettersSetters(boolean)` currently does not control auto detection of ""is"" getters. There is a separate `MapperFeature` for that, `AUTO_DETECT_IS_GETTERS`, which can be configured via `Jackson2ObjectMapperFactoryBean`. Because there is no separate setter method on `Jackson2ObjectMapperFactoryBean` to control the `AUTO_DETECT_IS_GETTERS` feature, it's not possible to truly disable getter/setter auto detection via configuration through `Jackson2ObjectMapperFactoryBean`. It could be argued that the name of `setAutoDetectGettersSetters()`, in absence of any other getter-auto-detection config methods, is misleading. Either another config method should be provided or the behavior of `setAutoDetectGettersSetters()` should be modified to include ""is"" getters.""  Note that the underlying class `Jackson2ObjectMapperBuilder` probably needs to be updated to accomodate either of those two options, `Jackson2ObjectMapperFactoryBean` is just a thin wrapper around functionality provided by `Jackson2ObjectMapperBuilder`.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/48b512c5f40bf3c01472c0dacb3cfd5cd38afaf8","closed","type: enhancement,","spring-projects-issues","2015-05-27T07:03:36Z","2015-10-15T13:04:43Z"
"","17195","Support specifying TimeZone in Jackson2ObjectMapperFactoryBean [SPR-12594]","**[Eric Rizzo](https://jira.spring.io/secure/ViewProfile.jspa?name=erizzo)** opened **[SPR-12594](https://jira.spring.io/browse/SPR-12594?redirect=false)** and commented  Jackson2ObjectMapperFactoryBean should expose the timeZone property of ObjectMapper, to allow easily specifying a TimeZone to be used when parsing ""plain"" dates. Currently this can be done by extending Jackson2ObjectMapperFactoryBean and setting the ObjectMapper.setTimeZone() as it is being built, but that's awkward. In general, Jackson2ObjectMapperFactoryBean should be consistent and expose all properties of ObjectMapper that an application might want to set.  ---  **Affects:** 4.1.3  **Issue Links:** - #17235 Allow Jackson2ObjectMapperBuilder configuration to override the well-known modules' configuration  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/77fcf21401ab98c886cc5c98afdf43a545d9b38f, https://github.com/spring-projects/spring-framework/commit/fab8dd3d0bb726cee22c042775baf575a3e2a7c2, https://github.com/spring-projects/spring-framework/commit/bf7a9754d5060668fdbfe93c70b0d357d258c323, https://github.com/spring-projects/spring-framework/commit/b89e62e5f6bf066952831c8515910ab08deb9d27","closed","type: enhancement,","spring-projects-issues","2015-01-02T14:20:05Z","2019-01-11T18:38:30Z"
"","17976","ServletWebRequest.checkNotModified attempts to call HttpServletResponse.getStatus() on Servlet 2.5 [SPR-13396]","**[Eric Burns](https://jira.spring.io/secure/ViewProfile.jspa?name=eburns)** opened **[SPR-13396](https://jira.spring.io/browse/SPR-13396?redirect=false)** and commented  Using the following: * Java 6 * WebSphere 7.0.0.31 - Servlet 2.5 * Spring 4.2.0.RELEASE * Spring Security 3.2.7.RELEASE  getStatus is being called from the checkNotModified functions in the ServletWebRequest class, specificially ServletWebRequest.java (line 176):  ```java public boolean checkNotModified(String etag, long lastModifiedTimestamp) { 		HttpServletResponse response = getResponse(); 		if (StringUtils.hasLength(etag) && !this.notModified) { 			if (response == null || HttpStatus.valueOf(response.getStatus()).is2xxSuccessful()) { 				etag = addEtagPadding(etag); 				this.notModified = isETagNotModified(etag) && isTimestampNotModified(lastModifiedTimestamp); 				if (response != null) { 					if (this.notModified && supportsNotModifiedStatus()) { 						response.setStatus(HttpServletResponse.SC_NOT_MODIFIED); 					} 					if(response.getHeader(HEADER_ETAG) == null) { 						response.setHeader(HEADER_ETAG, etag); 					} 					if(response.getHeader(HEADER_LAST_MODIFIED) == null) { 						response.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp); 					} 				} 			} 		} 		return this.notModified; ```  Stacktrace:  ``` [8/25/15 15:21:21:005 CDT] 0000001e webapp        E com.ibm.ws.webcontainer.webapp.WebApp logServletError SRVE0293E: [Servlet Error]-[carepathui]: java.lang.NoSuchMethodError: javax/servlet/http/HttpServletResponse.getStatus()I 	at org.springframework.web.context.request.ServletWebRequest.checkNotModified(ServletWebRequest.java:176) 	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:241) 	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:51) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:718) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:831) 	at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1661) 	at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1602) 	at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:149) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:199) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) 	at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:190) 	at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:125) 	at com.ibm.ws.webcontainer.filter.WebAppFilterChain._doFilter(WebAppFilterChain.java:80) 	at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:908) 	at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:939) 	at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:507) 	at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:181) 	at com.ibm.ws.webcontainer.webapp.WebApp.handleRequest(WebApp.java:3954) 	at com.ibm.ws.webcontainer.webapp.WebGroup.handleRequest(WebGroup.java:276) 	at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:945) 	at com.ibm.ws.webcontainer.WSWebContainer.handleRequest(WSWebContainer.java:1592) 	at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:191) 	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:453) 	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewRequest(HttpInboundLink.java:515) 	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.processRequest(HttpInboundLink.java:306) 	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.ready(HttpInboundLink.java:277) 	at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.sendToDiscriminators(NewConnectionInitialReadCallback.java:214) 	at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.complete(NewConnectionInitialReadCallback.java:113) 	at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:175) 	at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217) 	at com.ibm.io.async.AsyncChannelFuture$1.run(AsyncChannelFuture.java:205) 	at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1660) ```  ---  **Affects:** 4.2 GA  **Issue Links:** - #17681 ServletWebRequest.checkNotModified(…) writes Last-Modified header in invalid format - #17999 ServletWebRequest.checkNotModified attempts to call HttpServletResponse.getHeader(String) on Servlet 2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/803d7b50b9bf59ecc534e1db9b7be7c79cd3c2f1","closed","type: bug,","spring-projects-issues","2015-08-26T09:10:49Z","2019-01-14T04:42:05Z"
"","17690","Prevent class/classloader retention in GenericConversionService [SPR-13099]","**[Eric Bottard](https://jira.spring.io/secure/ViewProfile.jspa?name=eric.bottard)** opened **[SPR-13099](https://jira.spring.io/browse/SPR-13099?redirect=false)** and commented  Context: Spring XD creates disposable application contexts (modules) with their own classloader, from a main context which is loaded from the system classloader. That main context happens to have a GenericConversionService that is aware of types that are loaded from the modules classloaders.  This creates a leak that prevents the module classloaders to be GC'ed.  The path is as below:  ``` mainContext -> stuff -> genericConversionService -> converterCache -> cacheKey -> (source|target)Type -> resolvableType -> resolved(Class) -> module ClassLoader ```  Note that there may be other paths that may be problematic in other situations   ---  **Affects:** 4.2 RC1","closed","type: enhancement,","spring-projects-issues","2015-06-05T02:01:28Z","2015-06-30T15:26:29Z"
"","17802","TomcatInstrumentableClassLoader should support Tomcat 7.0.63+ as well [SPR-13210]","**[Emil Lundström](https://jira.spring.io/secure/ViewProfile.jspa?name=emill)** opened **[SPR-13210](https://jira.spring.io/browse/SPR-13210?redirect=false)** and commented  TomcatInstrumentableClassLoader in spring-instrument-tomcat contains a method override:  ```java @Override protected ResourceEntry findResourceInternal(String name, String path) {     ... } ```  which in Tomcat 7.0.63 no longer exists. Another parameter has been added, and the method signature is now:  ```java protected ResourceEntry findResourceInternal(String name, String path, boolean manifestRequired) ```  (see http://svn.apache.org/repos/asf/tomcat/tc7.0.x/tags/TOMCAT_7_0_63/java/org/apache/catalina/loader/WebappClassLoader.java)  The ""overridden"" method is never called, so the weaving process fails silently. Issue does not reproduce on Tomcat 7.0.62.  ---  **Affects:** 4.1.7  **Issue Links:** - #18073 Require Undertow 1.3.5+, Tyrus 1.11+, Jetty 9.3+, Tomcat 8.5+ (_**""is depended on by""**_) - #15414 Use Tomcat 8's new instrumentable WebappClassLoader  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/08fb62570e77069b0f47d79baf2e750441b2bbfa, https://github.com/spring-projects/spring-framework/commit/37f74e76f674e175813f36d3562a9333d7c6654e  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-07-07T07:22:45Z","2019-01-11T18:06:29Z"
"","17426","NullPointerException in AspectJ's Java15AnnotationFinder when running on JDK 1.7 [SPR-13380]","**[Elad Tabak](https://jira.spring.io/secure/ViewProfile.jspa?name=tzvatot)** opened **[SPR-13380](https://jira.spring.io/browse/SPR-13380?redirect=false)** and commented  Same sympthom as #9069, getting NPE, using java 1.7.055, spring 4.1.7:  Caused by: java.lang.NullPointerException: null at org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations(Java15AnnotationFinder.java:260) ~[aspectjweaver-1.8.5.jar:1.8.5] at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getAnnotationTypes(Java15ReflectionBasedReferenceTypeDelegate.java:91) ~[aspectjweaver-1.8.5.jar:1.8.5] at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.hasAnnotation(Java15ReflectionBasedReferenceTypeDelegate.java:106) ~[aspectjweaver-1.8.5.jar:1.8.5] at org.aspectj.weaver.ReferenceType.hasAnnotation(ReferenceType.java:223) ~[aspectjweaver-1.8.5.jar:1.8.5] at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.fastMatches(ExactAnnotationTypePattern.java:85) ~[aspectjweaver-1.8.5.jar:1.8.5] at org.aspectj.weaver.patterns.WithinAnnotationPointcut.fastMatch(WithinAnnotationPointcut.java:85) ~[aspectjweaver-1.8.5.jar:1.8.5] at org.aspectj.weaver.patterns.NotPointcut.fastMatch(NotPointcut.java:52) ~[aspectjweaver-1.8.5.jar:1.8.5] at org.aspectj.weaver.patterns.AndPointcut.fastMatch(AndPointcut.java:52) ~[aspectjweaver-1.8.5.jar:1.8.5] at org.aspectj.weaver.patterns.AndPointcut.fastMatch(AndPointcut.java:52) ~[aspectjweaver-1.8.5.jar:1.8.5] at org.aspectj.weaver.patterns.OrPointcut.fastMatch(OrPointcut.java:48) ~[aspectjweaver-1.8.5.jar:1.8.5] at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.couldMatchJoinPointsInType(PointcutExpressionImpl.java:84) ~[aspectjweaver-1.8.5.jar:1.8.5] at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:250) ~[spring-aop-4.1.7.RELEASE.jar:4.1.7.RELEASE] at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:208) ~[spring-aop-4.1.7.RELEASE.jar:4.1.7.RELEASE] at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:262) ~[spring-aop-4.1.7.RELEASE.jar:4.1.7.RELEASE] at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:294) ~[spring-aop-4.1.7.RELEASE.jar:4.1.7.RELEASE] at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:118) ~[spring-aop-4.1.7.RELEASE.jar:4.1.7.RELEASE] at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:88) ~[spring-aop-4.1.7.RELEASE.jar:4.1.7.RELEASE] at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:69) ~[spring-aop-4.1.7.RELEASE.jar:4.1.7.RELEASE] at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:330) ~[spring-aop-4.1.7.RELEASE.jar:4.1.7.RELEASE] at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:293) ~[spring-aop-4.1.7.RELEASE.jar:4.1.7.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:422) ~[spring-beans-   ---  **Affects:** 4.1.7  2 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-08-23T00:53:30Z","2019-01-14T05:13:10Z"
"","17764","Add MultipartFileToDataSource converter, and include in default set [SPR-13172]","**[Eirik Lygre](https://jira.spring.io/secure/ViewProfile.jspa?name=elygre)** opened **[SPR-13172](https://jira.spring.io/browse/SPR-13172?redirect=false)** and commented  Several APIs will use a javax.activation.DataSource as input for their file/attachment based methods. A typical example is javax.mail, where both the native code and the spring helpers use a javax.activation.DataSource.  Accepting file uploads from web and forwarding to such APIs will be greatly simplified if the default conversion infrastructure would include a simple MultipartFileToDataSourceConverter. Web components could then use DataSource properties directly, with no particular coding:  ``` public class MyForm {     public DataSource uploadedFile; } ```  The magic is in the very advanced converter, and a corresponding DataSource, as shown below, plus an automatic registration ""somewhere"" (possibly in WebMvcConfigurationSupport.mvcConversionService()).  ``` public class MultipartDataSource implements DataSource {      private final MultipartFile multipartFile;      public MultipartDataSource(MultipartFile multipartFile) {         this.multipartFile = multipartFile;     }      @Override     public String getName() {         return multipartFile.getOriginalFilename();     }      @Override     public String getContentType() {         return multipartFile.getContentType();     }      @Override     public InputStream getInputStream() throws IOException {         return multipartFile.getInputStream();     }      @Override     public OutputStream getOutputStream() throws IOException {         throw new UnsupportedOperationException(""Not implemented"");     }      @Override     public String toString() {         return ""[MultipartDataSource"" +                 "": filename="" + multipartFile.getOriginalFilename() +                 ""; empty="" + multipartFile.isEmpty() + ""]"";     } } ```  and  ``` public class MultipartFileToDataSourceConverter implements Converter {     @Override     public DataSource convert(MultipartFile multipartFile) {         return multipartFile.isEmpty() ? null : new SpringMultipartDataSource(multipartFile);     } } ```  If there is interest, I can submit a pull request with this functionality.   ---  **Affects:** 4.1.6","closed","type: enhancement,","spring-projects-issues","2015-06-29T05:15:12Z","2016-01-20T21:37:25Z"
"","17469","CronSequenceGenerator constructor goes into infinite loop with invalid increments [SPR-12871]","**[Edward](https://jira.spring.io/secure/ViewProfile.jspa?name=monepic)** opened **[SPR-12871](https://jira.spring.io/browse/SPR-12871?redirect=false)** and commented  The constructor for the `org.springframework.scheduling.support.CronSequenceGenerator` will go into an infinite loop if one of the fields is of the form **`n/0`**  For example  ```java public static void main (String[] s) {     new CronSequenceGenerator(""*/0 * * * * *"");     System.out.println(""We will never get here""); } ```  I guess that either the  **`/0`** should be ignored, or it should throw an IllegalArgumentException  ---  **Affects:** 3.2.13, 4.1.6  **Issue Links:** - #19158 CronSequenceGenerator.next() is not implemented as documented - #19031 CronSequenceGenerator causes StackOverflowError with reversed range values  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ceb17fcaca2aab5eb79df360d3fd4765704a3e4f, https://github.com/spring-projects/spring-framework/commit/b5a56ca3a94011fe3e67f30799f67faf6d432b18, https://github.com/spring-projects/spring-framework/commit/50f49774bcb948efd0aa4c425908f2c77d4f2c13  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","in: core,","spring-projects-issues","2015-03-31T08:33:11Z","2019-01-11T21:36:55Z"
"","17453","Doc: Lifecycle (not SmartLifecycle) beans not started at refresh() time [SPR-12855]","**[Edward Sargisson](https://jira.spring.io/secure/ViewProfile.jspa?name=esarge)** opened **[SPR-12855](https://jira.spring.io/browse/SPR-12855?redirect=false)** and commented  The [docs](http://docs.spring.io/spring/docs/4.0.9.RELEASE/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-processor) say that a top-level bean may implement Lifecycle and have its start method called at startup.  Using such a bean with XmlWebApplicationContext does **not** have its start method called. Only a bean that implements SmartLifecycle does.  The defects appears to be that FrameworkServlet.configureAndRefreshWebApplicationContext only calls refresh on the web application context. It only ever calls refresh(). This means that the DefaultLifecycleProcessor ends up calling startBeans(autoStartupOnly=true).  In startBeans the following check means that only SmartLifecycle beans are added to the phases collection (and then started). if (!autoStartupOnly || (bean instanceof SmartLifecycle && ((SmartLifecycle) bean).isAutoStartup()))  I found this in 4.0.5 but a check of the source on github suggests it's still there.  If there are other code paths that result in DefaultLifecycleProcessor.start() being called I couldn't find them.  ## Workaround  Implement SmartLifecycle instead of Lifecycle.   ---  **Affects:** 3.2.13, 4.0.5  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","in: core,","spring-projects-issues","2015-03-26T11:02:06Z","2015-05-26T01:15:12Z"
"","17225","PathResourceResolver.isResourceUnderLocation does not handle relative paths correctly [SPR-12624]","**[Eduard Semsch](https://jira.spring.io/secure/ViewProfile.jspa?name=esemsch)** opened **[SPR-12624](https://jira.spring.io/browse/SPR-12624?redirect=false)** and commented  My resources location path has a .. element in it like this:  file:C:/dev/project/module1/../module2/src/resources.  Resource paths get checked against this location path in https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java#L181, and it gets wrongly turned down (false is returned) because the resource path has already been cleaned in https://github.com/spring-projects/spring-framework/blob/dd2bf28a4f2c20cc6510266f245c619755e851ba/spring-core/src/main/java/org/springframework/core/io/UrlResource.java#L222 but the location path hasn't been cleaned.  The paths are of type UrlResource.  I believe you should be using the cleaned paths for both the resource and the location.  ---  **Affects:** 4.1.4  **Issue Links:** - #17269 Resource Handler is not Forwarding to correct Resource Location","closed","type: bug,","spring-projects-issues","2015-01-13T08:19:44Z","2019-01-11T19:05:35Z"
"","18003","Determine the URL for a controller method [SPR-13424]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-13424](https://jira.spring.io/browse/SPR-13424?redirect=false)** and commented  In some cases the URL that activates a controller is of interest - e.g. to add it to an HTML template. However, this seems not to be possible using the current API. It would be great to have a method that returns the URL for a controller method.   ---  **Affects:** 4.2.1","closed","type: enhancement,","spring-projects-issues","2015-09-03T16:15:34Z","2015-09-04T07:28:52Z"
"","17705","Let default-autowire-mode also be specified outside XML [SPR-13114]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-13114](https://jira.spring.io/browse/SPR-13114?redirect=false)** and commented  It would be great if I could also set default-autowire-mode outside XML. When I use `@ComponentScan` to have my beans created I don't want to use `@Autowired` everywhere...   ---  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-06-11T06:25:11Z","2019-01-12T02:27:37Z"
"","17880","StompBrokerRelayMessageHandler does not recover after systemHeartbeatReceiveInterval fails [SPR-13290]","**[Duc Dang](https://jira.spring.io/secure/ViewProfile.jspa?name=dangduc)** opened **[SPR-13290](https://jira.spring.io/browse/SPR-13290?redirect=false)** and commented  When the system heartbeat receive interval times out in the relay broker, the underlying reactor tcp client does not attempt reconnection, putting the relay broker into a permanent offline state until the backend broker closes the stomp connection when it detects that the system heartbeat send interval times out.  We're using RabbitMQ as the backend Stomp broker.  Issue observed on: - Spring 4.2.0 RC3 w/ Reactor 2.0.1.RELEASE, and - Spring 4.1.6.RELEASE w/ Reactor 1.1.5.RELEASE  This is easy enough to reproduce by setting setSystemHeartbeatSendInterval(0) when configuring the stomp relay broker, and triggering the receive interval to time out.  My theory is the Reactor11TcpClient's close() method doesn't work properly.   ---  **Affects:** 4.1.6, 4.2 RC3  0 votes, 6 watchers","closed","status: declined,","spring-projects-issues","2015-07-29T08:45:30Z","2019-01-12T16:23:07Z"
"","17828","JsonView support for JMS [SPR-13237]","**[doom777](https://jira.spring.io/secure/ViewProfile.jspa?name=doom777)** opened **[SPR-13237](https://jira.spring.io/browse/SPR-13237?redirect=false)** and commented  Just like MappingJackson2HttpMessageConverter now supports JsonView, so too should MappingJackson2MessageConverter.  Also would be nice to set JsonView, or just a Class in JmsTemplate.convertAndSend  ---  **Issue Links:** - #17856 Jackson `@JsonView` deserialization support for `@MessageMapping` payloads - #11815 Integrate Jackson `@JsonView` - #17106 Jackson `@JsonView` deserialization support for request bodies - #17338 Allow use of `@JsonView` on `@MessageMapping` methods - #17878 `@MessageMapping` should support generically typed Message argument with converted payload  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/faab220946d3cd8c72dffa3e0047c1f1d3eba110, https://github.com/spring-projects/spring-framework/commit/dc8de514089f23766ee24f681d0db6003ca71fdf  1 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2015-07-15T12:13:39Z","2019-01-13T05:39:47Z"
"","17643","spring-cloud-starter-parent is missing artifacts from mvn repository [SPR-13051]","**[doom777](https://jira.spring.io/secure/ViewProfile.jspa?name=doom777)** opened **[SPR-13051](https://jira.spring.io/browse/SPR-13051?redirect=false)** and commented  spring-cloud-starter-aws artifacts reference nonexisting versions of spring-cloud-aws artifacts, causing build failures.  For example, spring-cloud-starter-aws-jdbc:1.0.1.RELEASE depends on spring-cloud-aws-jdbc:1.0.1.RELEASE which does not exist (mvnrepository.com shows a 404) So too, spring-cloud-starter-aws depends on nonexist autoconfigure and context artifacts.  The workaround for now is to use 1.0.0 versions of spring-cloud-starter artifacts.  The easy solution is publishing the 1.0.1/1.0.2 versions of spring-cloud-aws artifacts to maven repositories.  Side note, maven repositories should anyway block publishes of artifacts with invalid dependencies.   ---  **Reference URL:** http://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-aws/1.0.1.RELEASE","closed","status: invalid,","spring-projects-issues","2015-05-20T06:12:42Z","2019-01-12T05:24:17Z"
"","17399","ClassPathScanningCandidateComponentProvider doesn't respect AnnotationTypeFilter [SPR-12802]","**[Diego Plentz](https://jira.spring.io/secure/ViewProfile.jspa?name=plentz)** opened **[SPR-12802](https://jira.spring.io/browse/SPR-12802?redirect=false)** and commented  ClassPathScanningCandidateComponentProvider doesn't find interfaces when used with AnnotationTypeFilter. AnnotationTypeFilter has [a constructor](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/type/filter/AnnotationTypeFilter.html#AnnotationTypeFilter-java.lang.Class-boolean-boolean-) that explicitly says that it can be used to find annotated interfaces:  > public AnnotationTypeFilter(Class annotationType, > boolean considerMetaAnnotations, > boolean considerInterfaces) > Create a new AnnotationTypeFilter for the given annotation type. > Parameters: > annotationType - the annotation type to match > considerMetaAnnotations - whether to also match on meta-annotations > considerInterfaces - whether to also match interfaces  But, since [ClassPathScanningCandidateComponentProvider](https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java) implementation filter interfaces out in the [isCandidateComponent(AnnotatedBeanDefinition beanDefinition)](https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java#L373-L375) method, the type filter doesn't work as expected.  ``` ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(); provider.addIncludeFilter(new AnnotationTypeFilter(MyCustomAnnotation.class, false, true)); Set findCandidateComponents = provider.findCandidateComponents(""com.foo""); ```  ---  **Affects:** 4.1.5  **Issue Links:** - #16286 Introduce a mechanism for abstract types at component scanning","closed","in: core,","spring-projects-issues","2015-03-10T20:22:44Z","2019-12-03T09:50:31Z"
"","17555","package org.springframework.core.io.DefaultResourceLoader does not work with windows paths [SPR-12963]","**[Dennis Heimbigner](https://jira.spring.io/secure/ViewProfile.jspa?name=dennis.heimbigner)** opened **[SPR-12963](https://jira.spring.io/browse/SPR-12963?redirect=false)** and commented  Not sure this is the right place to report this, but... The DefaultResourceLoader appears to assume that all file paths start with '/'. This is false for Windows paths (e.g. f:/...) and causes to throw an exception.   --- No further details from [SPR-12963](https://jira.spring.io/browse/SPR-12963?redirect=false)","closed","status: invalid,","spring-projects-issues","2015-04-28T21:49:02Z","2019-01-12T05:24:25Z"
"","17430","Unable to use Configuration classes in signed jar due to CGLIB [SPR-12833]","**[Denis Carniel](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.carniel@loginpeople.com)** opened **[SPR-12833](https://jira.spring.io/browse/SPR-12833?redirect=false)** and commented  When using Java Configuration from a signed jar (in a multi-module project), I get an error stating that the class enhanced by CGLIB doesn't have the same signer information than other classes from the same package.  Looking into ConfigurationClassPostProcessor and related classes code it appears that classes annotated with `@Configuration` will always be enhanced using CGLIB (I've plenty of other classes in the same module that work fine but they are apparently enhanced using JDK proxy).  Is there a way to use Java Configuration from a signed jar ? Or to have `@configuration` classes enhanced using JDK proxy ? (I tried giving them interfaces with no luck).  ---  **Affects:** 4.1.4  **Reference URL:** https://stackoverflow.com/questions/29162865/use-java-configuration-in-signed-jar  **Issue Links:** - #17937 Upgrade to CGLIB 3.2 (_**""depends on""**_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2015-03-20T03:08:41Z","2019-01-11T21:39:47Z"
"","17356","Improve RedirectAttributes reference documentation [SPR-12759]","**[David Tombs](https://jira.spring.io/secure/ViewProfile.jspa?name=dgtombs)** opened **[SPR-12759](https://jira.spring.io/browse/SPR-12759?redirect=false)** and commented  The use of `RedirectAttributes` is documented in four places in the reference documentation:  1. In its bullet in [Supported method argument types](http://docs.spring.io/spring/docs/4.2.0.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#mvc-ann-arguments) 2. In [Specifying redirect and flash attributes](http://docs.spring.io/spring/docs/4.2.0.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#mvc-ann-redirect-attributes) 3. In [RedirectView](http://docs.spring.io/spring/docs/4.2.0.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#mvc-redirecting-redirect-view) 4. In [Using flash attributes](http://docs.spring.io/spring/docs/4.2.0.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#mvc-flash-attributes)  The problem is you have to read (and find) all four sections to fully understand how `RedirectAttributes` is used, and even what the default behavior is if `ignoreDefaultModelOnRedirect` is false.  I suggest improving the documentation to eliminate #2 (merging content into #3 and #4) and link to #3 and #4 from #1. This would have saved me about an hour of scratching my head yesterday!  I'm happy to do this myself and create a pull request if others agree.   ---  **Affects:** 4.1.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b0848db17c53695087e3961c66d0028c9c56f8f1, https://github.com/spring-projects/spring-framework/commit/463878a03fdc20f73fae62d7ed0e9c21e23772e2","closed","type: documentation,","spring-projects-issues","2015-02-26T06:00:49Z","2015-05-26T01:15:07Z"
"","17607","NPE for alias resolved to null in SimpleAliasRegistry [SPR-13016]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-13016](https://jira.spring.io/browse/SPR-13016?redirect=false)** and commented  UseCase: I have to override a property (during integration-testing) to be null instead of another value defined in a propertyfile for use with the propertyplaceholderconfigurer. When doing so this will result in a NPE at SimpleAliasRegistry in line 125 here:  ``` if (resolvedAlias.equals(resolvedName)) { 					this.aliasMap.remove(alias); 				} ```  because resolvedAlias is null   ---  **Affects:** 3.2.13, 4.1.6  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","in: core,","spring-projects-issues","2015-05-12T01:06:49Z","2015-05-26T01:15:00Z"
"","17387","Spring Messaging not compatible with Reactor 2.0 [SPR-12790]","**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** opened **[SPR-12790](https://jira.spring.io/browse/SPR-12790?redirect=false)** and commented  Hi,  It appears that in Reactor 2.0, the location of certain classes have moved about and some have been renamed/functionality changed, making the dependency of using Reactor 2.0 for Spring Messaging broken.  For example:  Reactor11TcpClient references these files:  ``` import reactor.net.NetChannel; import reactor.net.Reconnect; import reactor.net.netty.tcp.NettyTcpClient; import reactor.net.tcp.TcpClient; import reactor.net.tcp.spec.TcpClientSpec; ```  A couple of examples where classes have been renamed/moved in Reactor 2.0 include:  ``` reactor.net.NetChannel -> reactor.io.net.NetStreams reactor.net.netty.tcp.NettyTcpClient -> reactor.io.net.impl.netty.tcp.NettyTcpClient ... ... ```  -=david=-  ---  **Affects:** 4.1.5, 4.1.6, 4.1.7  **Issue Links:** - #17200 Upgrade to Reactor 2 (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2015-03-06T04:18:36Z","2019-01-12T16:46:09Z"
"","17346","Favor more locally declared composed annotations over inherited annotations in the TestContext framework [SPR-12749]","**[David Erickson](https://jira.spring.io/secure/ViewProfile.jspa?name=daviderickson)** opened **[SPR-12749](https://jira.spring.io/browse/SPR-12749?redirect=false)** and commented  Specific case: a test class is annotated with a meta annotation that itself is annotated with a TestExecutionListeners annotation, and the test class also extends a parent class annotated with a TestExecutionListeners annotation (say AbstractJunit4SpringContextTests).  In this case, MetaAnnotationUtils.findAnnotationDescriptor returns a AnnotationDescriptor class that is correct on all of its fields, except for getAnnotationAttributes(), which is incorrectly returning the attributes of the TestExecutionListeners from the parent class, rather than the meta annotation, which is incorrect based on the description of MetaAnnotationUtils.findAnnotationDescriptor:  > The algorithm operates as follows: >  > Search for the annotation on the given class and return a corresponding AnnotationDescriptor if found. > Recursively search through all annotations that the given class declares. > Recursively search through the superclass hierarchy of the given class.  The net result being the test framework does not pick up my declared TestExecutionListeners from the meta annotation any time a parent of the Test class also declares TestExecutionListeners.  I added a spring-framework-issues reproducible project to demonstrate the issue.  ---  **Affects:** 4.1.4  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/92  **Issue Links:** - #18245 `@ContextConfiguration` defined on a base class and a composed annotation do not merge (_**""is duplicated by""**_) - #18321 ActiveProfiles not included when using a custom annotation. (_**""is duplicated by""**_) - #16221 Favor more locally declared composed annotations over inherited annotations","closed","type: bug,","spring-projects-issues","2015-02-24T00:23:18Z","2019-01-13T05:42:09Z"
"","17849","RFC 3986: UriComponents should never return a null path [SPR-13258]","**[David Eckel](https://jira.spring.io/secure/ViewProfile.jspa?name=dvdckl)** opened **[SPR-13258](https://jira.spring.io/browse/SPR-13258?redirect=false)** and commented  Assuming that the goal of UriComponents is to be more compliant with RFC 3986 than consistent with java.net.URI, ""A path is always defined for a URI, though the defined path may be empty (zero length).""  Currently OpaqueUriComponents always returns null, and HierarchicalUriComponents will return null if there was no slash in the URI.   ---  **Affects:** 3.2.14, 4.1.7, 4.2 RC3","closed","status: bulk-closed,","spring-projects-issues","2015-07-21T19:07:22Z","2019-01-12T02:26:45Z"
"","17848","RFC 3986: UriComponentsBuilder.fromUriString should support empty URIs [SPR-13257]","**[David Eckel](https://jira.spring.io/secure/ViewProfile.jspa?name=dvdckl)** opened **[SPR-13257](https://jira.spring.io/browse/SPR-13257?redirect=false)** and commented  Empty strings are valid URIs per RFC 3986, so `UriComponentsBuilder.fromUriString(String uri)` should accept them.  Additionally, java.net.URI will also accept empty URIs.  This  ``` Assert.hasLength(uri, ""'uri' must not be empty""); ```  should change to  ``` Assert.notNull(uri, ""'uri' must not be null""); ```    ---  **Affects:** 3.2.14, 4.1.7, 4.2 RC3  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/842, and commits https://github.com/spring-projects/spring-framework/commit/8196af4bc540f4648098fd460c654e35567308c2, https://github.com/spring-projects/spring-framework/commit/e1a0c50046b11e2ca6b0633bb77d5085f5b1b9e3, https://github.com/spring-projects/spring-framework/commit/b7c2881a4f9a92ac1e056156b4f4ca7abd1ecf0a","closed","type: enhancement,","spring-projects-issues","2015-07-21T19:07:16Z","2015-07-31T02:39:10Z"
"","17517","ApplicationContext fails to load in TestNG test if previous test is annotated with @DirtiesContext [SPR-12918]","**[David Blake](https://jira.spring.io/secure/ViewProfile.jspa?name=dblake)** opened **[SPR-12918](https://jira.spring.io/browse/SPR-12918?redirect=false)** and commented  Upgrading from Spring Framework 4.0.5 to 4.1.6 (or 4.1.0) causes Test class #2 to fail with the following exception if Test class #1 is annotated with `@DirtiesContext` at the class level (see example code in the comments section for details).  ``` java.lang.IllegalStateException: Failed to load ApplicationContext 	at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:94) 	at org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:72) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:212) 	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextPrepareTestInstance(AbstractTestNGSpringContextTests.java:145) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:606) 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84) 	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564) 	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213) 	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138) 	at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:175) 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:107) 	at org.testng.TestRunner.privateRun(TestRunner.java:767) 	at org.testng.TestRunner.run(TestRunner.java:617) 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334) 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329) 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291) 	at org.testng.SuiteRunner.run(SuiteRunner.java:240) 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52) 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86) 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224) 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149) 	at org.testng.TestNG.run(TestNG.java:1057) 	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111) 	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204) 	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'schedulerContext': Invocation of init method failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.hp.ipg.framework.config.amqp.AmqpFrameworkConfig': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.hp.ipg.framework.queue.RabbitMQManagementClient com.hp.ipg.framework.config.amqp.AmqpFrameworkConfig.rabbitMQManagementClient; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rabbitMQManagementClient': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.hp.ipg.framework.HttpClientFactory com.hp.ipg.framework.client.Client.httpClient; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'httpClientFactoryUntrusted': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: org.springframework.core.env.Environment com.hp.ipg.framework.HttpClientFactory.env; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'environment' is defined 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:136) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1566) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:755) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:125) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:109) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:261) 	at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:68) 	at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:86) 	... 29 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.hp.ipg.framework.config.amqp.AmqpFrameworkConfig': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.hp.ipg.framework.queue.RabbitMQManagementClient com.hp.ipg.framework.config.amqp.AmqpFrameworkConfig.rabbitMQManagementClient; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rabbitMQManagementClient': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.hp.ipg.framework.HttpClientFactory com.hp.ipg.framework.client.Client.httpClient; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'httpClientFactoryUntrusted': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: org.springframework.core.env.Environment com.hp.ipg.framework.HttpClientFactory.env; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'environment' is defined 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1210) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:368) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1119) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1014) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:523) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:512) 	at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:227) 	at org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils.qualifiedBeanOfType(BeanFactoryAnnotationUtils.java:80) 	at org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils.qualifiedBeanOfType(BeanFactoryAnnotationUtils.java:56) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.determineQualifiedTransactionManager(TransactionAspectSupport.java:377) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.determineTransactionManager(TransactionAspectSupport.java:361) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:271) 	at org.springframework.transaction.aspectj.AbstractTransactionAspect.ajc$around$org_springframework_transaction_aspectj_AbstractTransactionAspect$1$2a73e96c(AbstractTransactionAspect.aj:70) 	at com.hp.ipg.services.SchedulerService.deletePriorBuildTriggersAndJobs(SchedulerService.java:119) 	at com.hp.ipg.services.config.SchedulerContext.configureTriggerAndJobState(SchedulerContext.java:51) 	at com.hp.ipg.services.config.SchedulerContext.init(SchedulerContext.java:37) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:606) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:349) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:300) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:133) 	... 46 more Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.hp.ipg.framework.queue.RabbitMQManagementClient com.hp.ipg.framework.config.amqp.AmqpFrameworkConfig.rabbitMQManagementClient; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rabbitMQManagementClient': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.hp.ipg.framework.HttpClientFactory com.hp.ipg.framework.client.Client.httpClient; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'httpClientFactoryUntrusted': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: org.springframework.core.env.Environment com.hp.ipg.framework.HttpClientFactory.env; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'environment' is defined 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:561) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331) 	... 81 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rabbitMQManagementClient': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.hp.ipg.framework.HttpClientFactory com.hp.ipg.framework.client.Client.httpClient; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'httpClientFactoryUntrusted': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: org.springframework.core.env.Environment com.hp.ipg.framework.HttpClientFactory.env; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'environment' is defined 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1210) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.resolvedCachedArgument(AutowiredAnnotationBeanPostProcessor.java:496) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.access$100(AutowiredAnnotationBeanPostProcessor.java:115) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:526) 	... 83 more Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.hp.ipg.framework.HttpClientFactory com.hp.ipg.framework.client.Client.httpClient; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'httpClientFactoryUntrusted': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: org.springframework.core.env.Environment com.hp.ipg.framework.HttpClientFactory.env; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'environment' is defined 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:561) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331) 	... 93 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'httpClientFactoryUntrusted': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: org.springframework.core.env.Environment com.hp.ipg.framework.HttpClientFactory.env; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'environment' is defined 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1210) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.resolvedCachedArgument(AutowiredAnnotationBeanPostProcessor.java:496) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.access$100(AutowiredAnnotationBeanPostProcessor.java:115) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:526) 	... 95 more Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: org.springframework.core.env.Environment com.hp.ipg.framework.HttpClientFactory.env; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'environment' is defined 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:561) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331) 	... 103 more Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'environment' is defined 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:687) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1168) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:281) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.resolvedCachedArgument(AutowiredAnnotationBeanPostProcessor.java:496) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.access$100(AutowiredAnnotationBeanPostProcessor.java:115) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:526) 	... 105 more ```  ---  **Affects:** 4.1 GA  **Issue Links:** - [INT-3543](https://jira.spring.io/browse/INT-3543) Fix tests do not close ApplicationContext between test methods - #10800 AbstractTransactionalTestNGSpringContextTests not working as expected when an EJB with TransactionAttribute.REQUIRES_NEW is encountered - #15172 getBean(Object.class) fails when introspecting Environment bean - #15166 Do not serialize ApplicationContext creation in the TestContext framework - #17012 DefaultListableBeanFactory should allow efficient access to current bean names - #19400 No bean of type ConfigurableEnvironment in AbstractTestNGSpringContextTests - #17525 Autowiring against a closed ApplicationContext should consistently fail  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3c5a9b4e1d302b789fcad45a1f75715618dff0e7","closed","status: bulk-closed,","spring-projects-issues","2015-04-15T12:40:02Z","2019-01-15T11:35:04Z"
"","17827","ScheduledAnnotationBeanPostProcessor should fall back to default TaskScheduler by name [SPR-13236]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-13236](https://jira.spring.io/browse/SPR-13236?redirect=false)** and commented  Spring Integration creates a bean of type `TaskScheduler` but only if it doesn't find one using a sensible search strategy. The strategy in `ScheduledAnnotationBeanPostProcessor` is different and not as sensible IMO (it has no fallback to a well-known bean name if there are multiple instances). This can be surprising for users.  See discussion here for background: https://github.com/spring-projects/spring-boot/issues/3508, https://github.com/spring-projects/spring-xd/pull/1747#discussion_r34687973  ---  **Affects:** 4.2 RC2  **Issue Links:** - #20125 Consistently accept ""taskExecutor"" bean of type Executor (as stated in `@EnableAsync`'s javadoc) - #17839 AsyncAnnotationBeanPostProcessor could find TaskExecutor by type/name","closed","type: enhancement,","spring-projects-issues","2015-07-15T09:28:04Z","2019-01-13T05:39:49Z"
"","17682","Configuration class parsing may trigger NoClassDefFoundError for nested classes [SPR-13091]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-13091](https://jira.spring.io/browse/SPR-13091?redirect=false)** and commented  Interestingly, it's not configuration class parsing itself, it's the fallback `isLiteConfigurationCandidate` check looking for the presence of `@Bean` methods on non-`@Configuration` classes which may fail with a `NoClassDefFoundError`. Making that check more defensive now allows for ignoring any nested classes which cannot be fully resolved, simply not considering them as configuration class candidates to begin with.  That said, Spring Cloud's `ServiceConnectionFactory` is a fragile affair in any case, even as a top-level class. Doesn't it drag in all sorts of external dependencies through its method return types? This may work for scenarios where only specific methods are being called but will fail at any general introspection attempt if some dependencies are not actually present...  Juergen   ---  **Affects:** 4.1.6, 4.2 RC1  **Reference URL:** https://github.com/spring-cloud/spring-cloud-connectors/issues/88","closed","in: core,","spring-projects-issues","2015-06-02T02:25:47Z","2015-06-30T10:41:36Z"
"","17307","Preserve ordering of inlined properties in @TestPropertySource [SPR-12710]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-12710](https://jira.spring.io/browse/SPR-12710?redirect=false)** and commented  #### Status Quo  `@TestPropertySource` currently does not preserve the order of its _inlined_ properties. Since it uses `java.util.Properties` internally to parse the property values, the order is lost.  Spring's `Environment` `PropertySource` is not restricted in the same way (for instance a Spring Boot app using YAML has ordered properties), so there is no way for a test to mimic the behavior of the configuration for the production application.  #### Proposal  Using an ordered `Map` as the source of the `PropertySource` would work.  #### Further Resources  - [Spring Boot Issue #1110](https://github.com/spring-projects/spring-boot/issues/1110) regarding syntax and parsing of inlined properties - Major [overhaul of `extractEnvironmentProperties()`](https://github.com/spring-projects/spring-boot/commit/f6ae300ec319b9a49213b22046a72aa183ea336d) from Spring Boot's `SpringApplicationContextLoader`  ---  **Affects:** 4.1 GA  **Issue Links:** - #17318 Open up TestPropertySourceUtils for public consumption  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e5d41d91d53873c55d2ba6c196916f7dde7ae84d, https://github.com/spring-projects/spring-framework/commit/d6a799ad4af81da8840fbd5536efd49b9225ef8a, https://github.com/spring-projects/spring-framework/commit/67934a22e2f77449dc1fd8e614028e3d42e20e81, https://github.com/spring-projects/spring-framework/commit/f82c6635d7d677eacf07c3b5e809b64c5e23a715","closed","type: enhancement,","spring-projects-issues","2015-02-12T01:32:26Z","2019-01-11T21:29:45Z"
"","17265","ResourceBundleMessageSource should allow for custom PropertyResourceBundle subclass [SPR-12666]","**[Dave Jarvis](https://jira.spring.io/secure/ViewProfile.jspa?name=dave.jarvis)** opened **[SPR-12666](https://jira.spring.io/browse/SPR-12666?redirect=false)** and commented  Property files, resource bundles, and therefore property resources bundles incur a lot of duplication (in practice) because there is no way for one entry to refer to other entries.  Lines 431 to 433 of org.springframework.context.support.ResourceBundleMessageSource hard-code a specific instance of PropertyResourceBundle:  ``` return (defaultEncoding != null ?   new PropertyResourceBundle(new InputStreamReader(stream, defaultEncoding)) :   new PropertyResourceBundle(stream)); ```  These lines should be:  ``` return (defaultEncoding != null ?   createPropertyResourceBundle(new InputStreamReader(stream, defaultEncoding)) :   createPropertyResourceBundle(stream)); ```  Then two corresponding protected methods ""createPropertyResourceBundle"" should be created (with one calling the other). For example:  ``` protected PropertyResourceBundle createPropertyResourceBundle( InputStream stream ) {   return createPropertyResourceBundle( stream, Locale.getDefaultEncoding() ); } ```  This would allow for systems to override the specific type of PropertyResourceBundle. Once in place, it is then possible to write properties that refer to other properties, such as:  ``` app.title=Spring Framework app.login=Please log in to the ${app.title} to continue. app.contact.thanks=Thank you for your suggestions to improve the ${app.title}. ```  Currently, this is not possible due to lines 431 - 433.  ---  **Affects:** 4.1.4  **Issue Links:** - #21316 ResourceBundleMessageSource should avoid ResourceBundle.Control on Jigsaw - #19152 Method getMergedProperties in ReloadableResourceBundleMessageSource does not set fileTimestamp","closed","type: enhancement,","spring-projects-issues","2015-01-26T15:40:36Z","2019-01-11T19:01:43Z"
"","17326","Caching strategy [SPR-12729]","**[Danilkovich Denis](https://jira.spring.io/secure/ViewProfile.jspa?name=danilychen)** opened **[SPR-12729](https://jira.spring.io/browse/SPR-12729?redirect=false)** and commented  When I am using `@Cachable` annotaton with service-method, that return some domain-level object all work pretty well:  `@Cacheable`(value=""entity.User"") public User getUserById(Long userId)...  After first execution user object will be fetched, for example, from Db and put to cache. Next method call will return value from cache.  Problem is when I use `@Cachable` annotation on method that returns collection of objects:  `@Cacheable`(value=""list.User"") public List\ filterUsers(Date regDateStart, Date regDateEnd)...  Cache key will be created using method params. But this method can return identical user object when I call it with different method params, as a result the same data will be puted in cache.  The solution is to put in cache only list of ids for filterUsers method and in parallel put in cache User objects with cache key - user.id field.  To do this we need to specify custom put/get Caching strategy.  ---  **Affects:** 4.1.4  **Reference URL:** https://spring.io/blog/2014/06/16/further-cache-improvements-in-spring-4-1#disqus_thread  **Issue Links:** - #14172 Optionally improve memory use by sharing Cache Elements across Cache keys (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2015-02-18T04:26:21Z","2019-01-11T21:28:32Z"
"","17968","Excessive SockJS Reconnection Attempts [SPR-13387]","**[Daniel Siviter](https://jira.spring.io/secure/ViewProfile.jspa?name=dansiviter)** opened **[SPR-13387](https://jira.spring.io/browse/SPR-13387?redirect=false)** and commented  I'm not sure if this is intentional but on both EventSource and XHR-Streaming connections there appears to be excessive connection attempts (with `c[3000,""Go away!""]` returned) while the SockJS Session is recycled. This appears to be caused by the timing of the `AbstractSockJSSession#close(...)` being called by `SubProtocolWebSocketHandler#checkSessions()` and the clean-up task occurring after `AbstractSockJsService#disconnectDelay` (normally 5 seconds). The connection itself is maintained, but just seems a waste of network resources and manic amount of logging (albeit at `DEBUG` level) as it reconnects in rapid fire for up to 5 seconds.  ---  **Affects:** 4.2 GA  **Issue Links:** - #18903 Add a Basic Websocket Java Client with Reconnection capability as a new Package of Spring  1 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2015-08-24T03:01:52Z","2019-01-14T05:13:35Z"
"","17319","Don't forceably override client login and passcode on STOMP CONNECT [SPR-12722]","**[Daniel Siviter](https://jira.spring.io/secure/ViewProfile.jspa?name=dansiviter)** opened **[SPR-12722](https://jira.spring.io/browse/SPR-12722?redirect=false)** and commented  The `StompBrokerRelayMessageHandler` is forceably overwriting the Client login and passcode regardless. I've been trying to lock-down the broker but all relayed messages are send with guest/guest regardless. I would suggest a null/empty check for `login` on `CONNECT` and only setting login/passcode if not available.  Also, as I can't find anywhere that states what implementation of STOMP Spring supports it should be noted the spec states:  _STOMP servers SHOULD handle a STOMP frame in the same manner as a CONNECT frame. STOMP 1.1 clients SHOULD continue to use the CONNECT command to remain backward compatible with STOMP 1.0 servers._  Therefore the `CONNECT` logic should also be applied on a `STOMP` command.  ---  **Affects:** 4.1.4, 4.3.7  **Issue Links:** - #15781 client-side stomp authentication headers are passed to the message broker","closed","type: enhancement,","spring-projects-issues","2015-02-17T02:55:50Z","2019-01-14T05:13:30Z"
"","17872","Move Jackson2ObjectMapperBuilder and SpringHandlerInstantiator to a separate artifact [SPR-13282]","**[Daniel Raniz Raneland](https://jira.spring.io/secure/ViewProfile.jspa?name=raniz)** opened **[SPR-13282](https://jira.spring.io/browse/SPR-13282?redirect=false)** and commented  It would be useful to have `Jackson2ObjectMapperBuilder` and `SpringHandlerInstantiator` reside outside of **spring-web** since they can be used to build and integrate the Jackson `ObjectMapper` very easily, they are also required by Spring Boot for autoconfiguration of said `ObjectMapper` and pulling in the entire **spring-web** artifact is a bit overkill for just those two classes.  My suggestion is to move these two into a separate artifact, say **spring-jackson**, and have **spring-web** depend on it, that would allow usage of these two classes for integration/configuration of Jackson without requiring a dependency on **spring-web**.   --- No further details from [SPR-13282](https://jira.spring.io/browse/SPR-13282?redirect=false)","closed","type: enhancement,","spring-projects-issues","2015-07-27T22:56:46Z","2019-10-13T07:55:09Z"
"","17519","Spring Performance Optimization, Comparing Classes [SPR-12926]","**[Daniel P Rossi](https://jira.spring.io/secure/ViewProfile.jspa?name=dr9885)** opened **[SPR-12926](https://jira.spring.io/browse/SPR-12926?redirect=false)** and commented  This is a task to update class comparisons to use ""=="" instead of "".equals()"". There is a significant performance gain in this change. It also makes utilities like ""BeanPropertyRowMapper"" just as efficient as writing a custom row mapper.  ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/773  **Attachments:** - [EqualsTest.java](https://jira.spring.io/secure/attachment/22801/EqualsTest.java) (_30.53 kB_)  **Issue Links:** - #19493 Improve performance for conversions using a method parameter based type descriptor with annotations","closed","type: enhancement,","spring-projects-issues","2015-04-16T17:39:14Z","2019-01-11T21:08:47Z"
"","17527","Regression: @Primary annotation not working when overriding bean definition with classpath scanning [SPR-12934]","**[Daniel Hiller](https://jira.spring.io/secure/ViewProfile.jspa?name=dhiller)** opened **[SPR-12934](https://jira.spring.io/browse/SPR-12934?redirect=false)** and commented  The `\@Primary` annotation seemed to stop working as expected since Spring 4.1.0.RELEASE (including 4.1.6.RELEASE) as demonstrated in this stripped down [github repo](https://github.com/dhiller/spring-primary-annotation).  In the repository mentioned we created a stripped down version of our situation to demonstrate the problem. To get a quick start please have a look at the Application classes.  Run  `mvn clean install && cd overridden-bean && mvn exec:java`  for a demonstration. An execption should state that another bean type was expected.  NB: This looks like a regression as this is still working with latest Spring 4.0.9.RELEASE. Change the spring version in parent pom to 4.0.9.RELEASE, run the above command and see that it works as expected.  Versions used: * Apache Maven 3.2.3 * Java 1.8.0_45 * Ubuntu 14.04 LTS  Interestingly, when trying to convert this into spring unit tests (see branch convert-to-unit-tests) and then running the tests from either Intellij vs. maven I get a non deterministic behavior (i.e. running from Intellij fails the test, while mvn clean install does _not_ fail the tests)  ---  **Affects:** 4.1 GA, 4.1.6  **Issue Links:** - #15434 Reconsider whether to generally allow bean overriding by name - #17257 context register `@Configuration` doesn't respect `@Order`","closed","in: core,","spring-projects-issues","2015-04-20T01:37:05Z","2019-01-13T05:41:08Z"
"","17494","Async Execution Aspect compiler error when using ListenableFuture [SPR-12895]","**[Daniel Gonzalez](https://jira.spring.io/secure/ViewProfile.jspa?name=dgonsan)** opened **[SPR-12895](https://jira.spring.io/browse/SPR-12895?redirect=false)** and commented  When using `@Async` annotation to create an async execution for a method ListenableFuture is one of the options that could be used as return type in the method as it seems to be supported by all the spring async aspect code.  On aspect AnnotationAsyncExecutionAspect.aj the pointcut to intercept async annotations classes is as follows:  ``` private pointcut asyncMarkedMethod() 		: execution(@Async (void || Future+) *(..)); ```  Which accepts Future or one of its subclasses as return type.  But then in the same class a compiler error is declared that only accepts Future:  ``` declare error: 		execution(@Async !(void||Future) *(..)): 		""Only methods that return void or Future may have an @Async annotation""; ```  This declarations causes that when I used something like:  ``` @Async public ListenableFuture execute() { ... return new AsyncResult(); } ```  Fails with a compiler error.  Also I cannot used the plain Future as then I cannot add callback handlers to the future. I always can call the task manager directly but as it seems that it is a feature that it is supported by the annotation I would prefer to do that as I'm using it in other places on the application without any issue.   ---  **Affects:** 4.1.6","closed","in: core,","spring-projects-issues","2015-04-07T12:20:48Z","2015-05-26T01:14:43Z"
"","17569","Autoconfiguration cannot be disabled for JmsAnnotationDrivenConfiguration [SPR-12978]","**[daniel carter](https://jira.spring.io/secure/ViewProfile.jspa?name=dantheperson)** opened **[SPR-12978](https://jira.spring.io/browse/SPR-12978?redirect=false)** and commented  JmsAnnotationDrivenConfiguration has package visibility and thus cannot be referenced in an autoconfiguration exclude  ``` @EnableAutoConfiguration(exclude = {JmsAnnotationDrivenConfiguration.class}) ```  I am using apache camel-jms which depends on spring-jms, but camel will take care of configuring jms, i do not want spring-boot to be configuring it in this instance.   ---  **Affects:** 4.1.6","closed","status: invalid,","spring-projects-issues","2015-05-04T20:25:50Z","2019-01-12T05:24:24Z"
"","17535","Support RFC 6570 style URI template encoding [SPR-12942]","**[daniel carter](https://jira.spring.io/secure/ViewProfile.jspa?name=dantheperson)** opened **[SPR-12942](https://jira.spring.io/browse/SPR-12942?redirect=false)** and commented  As per RFC6570, the URI template ""http://host/path/${var1}""  where var1=a/b should expand to ""http://host/path/a%2Fb""  actual result is ""http://host/path/a/b""  Current spring behaviour, as per RFC6570, should only occur when the + operator is specified, ie ""http://host/path/${+var1}""  Relevant parts of the spec: 3.2.1 Variable Expansion  > The allowed set for a given expansion depends on the expression type: reserved (""+"") and fragment (""#"") expansions allow the set of characters in the union of ( unreserved / reserved / pct-encoded ) to be passed through without pct-encoding, whereas **all other expression types allow only unreserved characters to be passed through without pct-encoding.**  Section 3.2.3 shows an explicit example illustrating that / should be encoded unless the + operator is used. (base  := ""http://example.com/home/"")  > {base}index           http%3A%2F%2Fexample.com%2Fhome%2Findex > {+base}index          http://example.com/home/index  Spring is also falling over with it's new ${/var} support as it is failing to add the /  3.2.6  > For each defined variable in the variable-list, **append ""/"" to the result** string and then perform variable expansion  Here are some test cases to further illustrate the issue, and a comparison with another RFC6570 template library.  Run against 4.2.0.BUILD-SNAPSHOT  ```  import org.hamcrest.Matchers; import org.junit.Assert; import org.junit.Test;  /**  * @author cartedan  *  */ public class URLEncodingTest {      @Test     public void testDamnHandyDefaultSyntax() {         String uri = com.damnhandy.uri.template.UriTemplate.fromTemplate(""http://localhost:80/path/{var1}"").set(""var1"", ""my/Id"").expand();         Assert.assertThat(uri, Matchers.is(""http://localhost:80/path/my%2FId""));     }      @Test     public void testDamnHandyPlusSyntax() {         String uri = com.damnhandy.uri.template.UriTemplate.fromTemplate(""http://localhost:80/path/{+var1}"").set(""var1"", ""my/Id"").expand();         Assert.assertThat(uri, Matchers.is(""http://localhost:80/path/my/Id""));     }      @Test     public void testDamnHandySlashSyntax() {         String uri = com.damnhandy.uri.template.UriTemplate.fromTemplate(""http://localhost:80/path{/var1}"").set(""var1"", ""my/Id"").expand();         Assert.assertThat(uri, Matchers.is(""http://localhost:80/path/my%2FId""));     }      @Test     public void testSpringDefaultSyntax() {         String uri = new org.springframework.web.util.UriTemplate(""http://localhost:80/path/{var1}"").expand(""my/Id"").toString();         // Fails, as spring does not correctly encode / in variable values         Assert.assertThat(uri, Matchers.is(""http://localhost:80/path/my%2FId""));     }      @Test     public void testSpringPlusSyntax() {         String uri = new org.springframework.web.util.UriTemplate(""http://localhost:80/path/{+var1}"").expand(""my/Id"").toString();         Assert.assertThat(uri, Matchers.is(""http://localhost:80/path/my/Id""));     }      @Test     public void testSpringSlashSyntax() {         String uri = new org.springframework.web.util.UriTemplate(""http://localhost:80/path{/var1}"").expand(""my/Id"").toString();         // Fails as spring does not append the slash before doing the variable substitution.         Assert.assertThat(uri, Matchers.is(""http://localhost:80/path/my%2FId""));     }  } ```  ```xml    com.damnhandy   handy-uri-templates   2.0.2  ```  I understand the desire expressed in earlier bug reports to maintain backward compatibility. Now that RFC6570 is becoming well supported, spring 4.2 would seem a good time to switch to the RFC behaviour, while allowing a configuration parameter to switch back to springs earlier behaviour.  ---  **Affects:** 4.1.6  This issue is a sub-task of #15137  **Issue Links:** - #18706 Support limited subset of RFC 6570 syntax including operators """", ""?"", ""/"", ""#""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ca410fea531c5d486e034df3ab815229d7356f86","closed","status: declined,","spring-projects-issues","2015-04-21T18:12:33Z","2019-01-13T20:56:42Z"
"","17332","MockMvc PrintResultHandler asserts before result is set [SPR-12735]","**[Dan Parrella](https://jira.spring.io/secure/ViewProfile.jspa?name=dparrella)** opened **[SPR-12735](https://jira.spring.io/browse/SPR-12735?redirect=false)** and commented  When running controller tests against endpoints that are asynchronous and using the `PrintResultHandler`, my tests always fail because the `PrintResultHandler` seems to attempt to print the result before it is available.  When the endpoint is asynchronous, I would expect that we wait to print until `asyncDispatch(mvcResult)` gets called or waiting some period of time before the result becomes available.  #### Example Code  ```java final MvcResult mvcResult = getMockMvc().perform(post())                     .andExpect(request().asyncStarted())                     .andExpect(request().asyncResult(instanceOf(WebResponse.class)))                     .andReturn();  getMockMvc().perform(asyncDispatch(mvcResult))                     .andExpect(status().isOk()); ```  #### Stack Trace  ``` java.lang.IllegalStateException: Async result for handler [public ] was not set during the specified timeToWait=0 	at org.springframework.util.Assert.state(Assert.java:385) 	at org.springframework.test.web.servlet.DefaultMvcResult.getAsyncResult(DefaultMvcResult.java:143) 	at org.springframework.test.web.servlet.result.PrintingResultHandler.printAsyncResult(PrintingResultHandler.java:131) 	at org.springframework.test.web.servlet.result.PrintingResultHandler.handle(PrintingResultHandler.java:79) 	at org.springframework.test.web.servlet.MockMvc.applyDefaultResultActions(MockMvc.java:176) 	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:146) ```    ---  **Affects:** 4.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b4d9fb9e6e355d55c88f8c6e2b7987ed7bf3e236, https://github.com/spring-projects/spring-framework/commit/c48858c9728031c29db9e1a3508cf24b48e06226","closed","type: bug,","spring-projects-issues","2015-02-20T00:32:26Z","2015-03-25T09:42:33Z"
"","17945","hibernate exception caching [SPR-13361]","**[D.T.Rajendra Prasad](https://jira.spring.io/secure/ViewProfile.jspa?name=dtrprasad)** opened **[SPR-13361](https://jira.spring.io/browse/SPR-13361?redirect=false)** and commented  based on spring4 WebMvc ,we are using Spring-hibernate for persistence using LocalSessionFactoryBean. when there is a database error like Column size exceeding , then org.hibernate.engine.jdbc.spi.SqlExceptionHelper class converting the errors. and aborting program execution. But we are not able directly load any error page using SimpleMappingExceptionResolver. we are able to read the exception message and loading suitable display page.Is there any way this can be done through rethrowing the exception.   ---  **Affects:** 4.1.7","closed","status: invalid,","spring-projects-issues","2015-08-17T22:53:19Z","2019-01-12T05:23:57Z"
"","17940","Add Hibernate4Module to Jackson2ObjectMapperBuilder's well known modules [SPR-13356]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-13356](https://jira.spring.io/browse/SPR-13356?redirect=false)** and commented  Jackson2ObjectMapperBuilder.registerWellKnownModulesIfAvailable should register Hibernate4Module if it's available. Jackson's behavior isn't quite as one would expect (at least, it surprised me a bit) without it, so it would be nice for it to be included automatically.  https://github.com/FasterXML/jackson-datatype-hibernate  ---  **Affects:** 4.2 GA  **Issue Links:** - #17939 Add Hibernate5Module to Jackson2ObjectMapperBuilder's well known modules - #17990 Add a section about HttpMessageConverter customization in the reference documentation (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2015-08-17T05:35:35Z","2019-01-11T18:20:57Z"
"","17939","Add Hibernate5Module to Jackson2ObjectMapperBuilder's well known modules [SPR-13355]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-13355](https://jira.spring.io/browse/SPR-13355?redirect=false)** and commented  Jackson2ObjectMapperBuilder.registerWellKnownModulesIfAvailable should register Hibernate5Module if it's available. Jackson's behavior isn't quite as one would expect (at least, it surprised me a bit) without it, so it would be nice for it to be included automatically.  https://github.com/FasterXML/jackson-datatype-hibernate  ---  **Affects:** 4.2 GA  **Issue Links:** - #17940 Add Hibernate4Module to Jackson2ObjectMapperBuilder's well known modules - #17990 Add a section about HttpMessageConverter customization in the reference documentation (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2015-08-17T05:35:31Z","2019-01-11T18:20:45Z"
"","17938","Add Jdk7Module to Jackson2ObjectMapperBuilder's well known modules [SPR-13354]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-13354](https://jira.spring.io/browse/SPR-13354?redirect=false)** and commented  Jackson2ObjectMapperBuilder.registerWellKnownModulesIfAvailable should register Jdk7Module if it's available. This improvement would make Java 7 types (currently only java.nio.file.Path) be properly handled by Jackson.  https://github.com/FasterXML/jackson-datatype-jdk7   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cccf5f65f5e8ee58530b94acae7feb0049ffbb05","closed","type: enhancement,","spring-projects-issues","2015-08-17T05:35:13Z","2015-09-01T11:38:22Z"
"","17782","STOMP CONNECT ignored (""No session for..."") when using  [SPR-13190]","**[Clark Duplichien](https://jira.spring.io/secure/ViewProfile.jspa?name=cduplichien)** opened **[SPR-13190](https://jira.spring.io/browse/SPR-13190?redirect=false)** and commented  Currently running spring 4.2.0.BUILD-SNAPSHOT  Adding the  element to a  configuration in XML will prevent the associated SubProtocolWebSocketHandler from starting. Any attempts to make websocket connections will hang on the CONNECT frame.  Connect log with  in place:  ``` 2015-07-01 12:57:08,817 DEBUG: org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator - New WebSocketServerSockJsSession[id=2r1eakba] 2015-07-01 12:57:08,819 TRACE: org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator - Handling TextMessage payload=[CONNECT ac..], byteCount=56, last=true] in WebSocketServerSockJsSession[id=2r1eakba] 2015-07-01 12:57:08,820 DEBUG: org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler - Processing CONNECT user=cduplichien session=2r1eakba 2015-07-01 12:57:08,829 DEBUG: org.springframework.web.socket.messaging.SubProtocolWebSocketHandler - No session for GenericMessage [payload=byte[0], headers={simpMessageType=CONNECT_ACK, simpUser=org.springframework.security.authentication.UsernamePasswordAuthenticationToken@fb48ec72: Principal: org.springframework.security.core.userdetails.User@40dd7ab4: Username: cduplichien; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: ...omitted..., simpHeartbeat=[J@6b8741, simpSessionId=2r1eakba}], simpSessionId=2r1eakba}] ```  Connect log without  in place:  ``` 2015-07-01 12:54:35,054 DEBUG: org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator - New WebSocketServerSockJsSession[id=4hbhkzih] 2015-07-01 12:54:35,054 TRACE: org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator - Handling TextMessage payload=[CONNECT ac..], byteCount=56, last=true] in WebSocketServerSockJsSession[id=4hbhkzih] 2015-07-01 12:54:35,054 DEBUG: org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler - Processing CONNECT user=cduplichien session=4hbhkzih 2015-07-01 12:54:38,642 INFO : org.springframework.web.socket.config.WebSocketMessageBrokerStats - WebSocketSession[1 current WS(1)-HttpStream(0)-HttpPoll(0), 2 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(2)-CONNECTED(2)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannelpool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0] ```  The ""No Session for Generic Message"" log is produced when using  because the SubProtocolWebSocketHandler was not started when the CONNECT frame was received, and did not create a new session.  In Debugging, there actually was a SubProtocolWebSocketHandler which was started by the SmartLifecycle, but it was a different instance than the one wrapped by the decorator factory configured through .  Manually starting the SubProtocolWebSocketHandler from my DecoratorFactory as a workaround makes the connections usable, and the websockets function as expected.  It would seem that a separate instance is provided to the DecoratingFactoryBean by MessageBrokerBeanDefinitionParser, and this instance is never started.   ---  **Affects:** 4.2 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/05f163b37deeb2d9063b32d368b768efcdb28785, https://github.com/spring-projects/spring-framework/commit/3eb54cc0b35ad89ae5d450504efd27fab9577a5e","closed","type: bug,","spring-projects-issues","2015-07-02T07:35:41Z","2015-07-15T09:05:06Z"
"","17663","Documentation definition for ConditionalGenericConverter not the same as the source definition [SPR-13071]","**[Ciprian](https://jira.spring.io/secure/ViewProfile.jspa?name=ciprianspring)** opened **[SPR-13071](https://jira.spring.io/browse/SPR-13071?redirect=false)** and commented  The **ConditionalGenericConverter** documentation definition differs from the source. Documentation:  ```java public interface ConditionalGenericConverter extends GenericConverter {     boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType); } ```  Source:  ```java public interface ConditionalGenericConverter extends GenericConverter, ConditionalConverter {  } ```    ---  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html#core-convert-ConditionalGenericConverter-SPI  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d6056182aa8f7599f435e867a7e57cd67c18f91d","closed","type: documentation,","spring-projects-issues","2015-05-27T01:13:24Z","2015-06-30T15:26:30Z"
"","17467","Inter-bean dependencies using @Component classes [SPR-12869]","**[Ciprian](https://jira.spring.io/secure/ViewProfile.jspa?name=ciprianspring)** opened **[SPR-12869](https://jira.spring.io/browse/SPR-12869?redirect=false)** and commented  I don't know if the documentation is wrong and hasn't been updated or if it's an actual bug. In part 3 (Core technologies) of the documentation at 5.12 (Java-based container configuration) there is a paragraph in injecting inter-bean dependencies that states the following: ""...inter-bean dependencies only works when the `@Bean` method is declared within a `@Configuration` class. You cannot declare inter-bean dependencies using plain `@Component` classes."" Here is a simple example that shows that you can use inter-bean dependency inside `@Component` classes  public class App { public static void main(String[] args) { AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(); applicationContext.register(SimpleComponent.class); applicationContext.refresh();          Movie movie = applicationContext.getBean(Movie.class);         System.out.println(movie.getSongName());     }          @Component     static class SimpleComponent {         @Bean         public Movie getMovie() {             return new Movie(getSong());         }              @Bean         public Song getSong() {             return new Song(""Popular band - Popular song"");         }     }          static class Movie {         private Song song;              public Movie(Song song) {             this.song = song;         }              public String getSongName() {             return song.getName();         }     }          static class Song {         private String name;              public Song(String name) {             this.name = name;         }              public String getName() {             return name;         }     }  }   --- No further details from [SPR-12869](https://jira.spring.io/browse/SPR-12869?redirect=false)","closed","in: core,","spring-projects-issues","2015-03-31T04:06:37Z","2019-01-12T16:23:24Z"
"","18002","Coerce @ResponseBody CharSequences to strings [SPR-13423]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-13423](https://jira.spring.io/browse/SPR-13423?redirect=false)** and commented  In the vein of #17756, but possibly more controversial, I suggest that any `CharSequence` returned from an `@ReponseBody` method be coerced to a text string. I believe that in the cases I can think of (returning a `StringBuilder` or `GString`), the intent is probably to return the text contents rather than a JSON/XML representation of the its internal structure.  ---  **Affects:** 4.2 GA  **Issue Links:** - #17756 Allow MVC handler methods to return any CharSequence type as view name  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1291d6e1bd5ba6524c3fb68813aad807d123c2e1","closed","type: enhancement,","spring-projects-issues","2015-09-03T13:20:20Z","2019-01-11T17:11:49Z"
"","17889","Document selenium-htmlunit-driver dependency [SPR-13299]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-13299](https://jira.spring.io/browse/SPR-13299?redirect=false)** and commented  The standalone `spring-test-htmlunit` project pulled in `selenium-htmlunit-driver` as a _required_ dependency, but the `spring-test` module in Spring Framework 4.2 does not -- since it is an _optional_ dependency in `spring-test`.  However, the Javadoc and the corresponding section in the _Testing_ chapter do not indicate that `selenium-htmlunit-driver` is necessary for the Selenium `WebDriver` support in the Spring MVC Test framework to work.   ---  **Affects:** 4.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/af905aaaea7209ed63d4d9f64e45222bdaa07bec","closed","type: documentation,","spring-projects-issues","2015-07-31T18:10:24Z","2015-09-01T11:38:23Z"
"","17840","MVC does not like advised controller methods in classes with Groovy traits [SPR-13249]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-13249](https://jira.spring.io/browse/SPR-13249?redirect=false)** and commented  I am attempting to use a Groovy trait to apply a mixin to some of my controller classes. On classes where no advice is defined in the class itself (the class's mapping paths are subject to the Spring Security filter, but there's no `@PreAuthorize`), I have no trouble. However, when I apply the trait to a controller that uses `@PreAuthorize`, I get two reliable failure modes. The failure is caused by including the trait in the class regardless of whether it's actually used.  When I launch the application normally, the controller's mappings are silently ignored. I've debugged and confirmed that the controller bean is being registered, and both the constructor injection and the setter injection exposed via the trait are being processed correctly. JRebel notices if I modify the controller class and reloads the bean; MVC keeps ignoring it.  When I try to use the controller class in a MockMvc test, the mappings show up in the logs from `RequestMappingHandlerMapping`, but requests fail with the error  ``` java.lang.IllegalStateException: The mapped controller method class 'com.artsquare.gallery.web.html.WorkHtmlController' is not an instance of the actual controller bean instance 'com.sun.proxy.$Proxy135'. If the controller requires proxying (e.g. due to @Transactional), please use class-based proxying. HandlerMethod details:  Controller [com.artsquare.gallery.web.html.WorkHtmlController] Method [public java.lang.Object com.artsquare.gallery.web.html.WorkHtmlController.createForm()] Resolved arguments:   	at org.springframework.web.method.support.InvocableHandlerMethod.assertTargetBean(InvocableHandlerMethod.java:261) 	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:224) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:111) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:799) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:728) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:969) 	... 56 more ```    ---  **Affects:** 4.2 RC2, 4.2.1  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-07-17T07:45:44Z","2019-01-12T02:26:51Z"
"","17789","Support @ResponseStatus with RedirectView [SPR-13197]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-13197](https://jira.spring.io/browse/SPR-13197?redirect=false)** and commented  This is a duplicate of #10812, which was closed by allowing a programmatic setting of the response code on the `RedirectView` object. It would be convenient to be able to set this with `@ResponseStatus` on the controller method if this is practical.  ---  **Affects:** 4.2 RC2  **Issue Links:** - #10812 `@ResponseStatus` annotation is ignored in an `@Controller` redirect (RedirectView) - #17800 Make RedirectViews use RESPONSE_STATUS_ATTRIBUTE as a response status if defined - #18019 Document that `@ResponseStatus` overrides redirect views  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/6521f1587a2faeb745214fdbda217eeee8f2079d","closed","type: enhancement,","spring-projects-issues","2015-07-04T15:06:17Z","2019-01-13T05:40:00Z"
"","17776","What context variables are available in an MVC @Value context? [SPR-13184]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-13184](https://jira.spring.io/browse/SPR-13184?redirect=false)** and commented  I would like to use SpEL to resolve a message placeholder based on a request parameter `status`. I can specify `@Value(""spelExpression"") String message`, but I can't figure out how to refer to the request parameter; these expressions (can't inline) don't work:  ``` ""${status}"" ""${#status}"" ""${#requestParams.status}"" // (a la Spring Integration) ```  It would be helpful for the MVC chapter to list what, if any, request variables are available in that SpEL context.   ---  **Affects:** 4.2 RC1  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-07-01T15:44:52Z","2019-01-12T02:26:59Z"
"","17756","Allow MVC handler methods to return any CharSequence type as view name [SPR-13165]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-13165](https://jira.spring.io/browse/SPR-13165?redirect=false)** and commented  When a method does not have an explicit return type of `String` (which causes, among other things, problems with Spring HATEOAS), returning a Groovy `GString` (particularly helpful with building `redirect:` links) confuses MVC. Using the regular string-return semantics requires an explicit call to `toString()`.  It would be helpful, when `groovy.lang.GString` is present on the classpath, for the dispatcher servlet to automatically call `toString()` on returned GString values.  ---  **Affects:** 4.2 RC1  **Issue Links:** - #18002 Coerce `@ResponseBody` CharSequences to strings  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a2d3c27ed1b9fc573cb18262444b9c905ebd27a6","closed","type: enhancement,","spring-projects-issues","2015-06-25T13:42:03Z","2019-01-13T05:40:14Z"
"","17692","Improve circular import exception, in particular for @Import vs import through nesting [SPR-13101]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-13101](https://jira.spring.io/browse/SPR-13101?redirect=false)** and commented  I have the following configuration class, with a nested extension:  ``` @Configuration @Import(GalleryMockMvcConfig.InMemorySecurity) @CompileStatic class MockMvcMyConfig {     @Bean     MyHtmlController myHtmlController(WorkImageRepository images) {         new MyHtmlController(images)     }      @Configuration     @Import(MockMvcMyConfig)     @CompileStatic     static class Digitizer {         @Bean         DigitizerClientHtmlController digitizerClientHtmlController(PersonRepository people, UploadPermissionRepository permissions, UserOperations userOps) {             new DigitizerClientHtmlController(people, permissions, userOps)         }     } } ```  `GalleryMockMvcConfig.InMemorySecurity` does not include `Digitizer`.  When trying to use this class in `@ContextConfiguration`, I get the following exception:  ``` java.lang.IllegalStateException: Failed to load ApplicationContext 	at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:94) 	at org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:72) 	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:170) 	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:110) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:212) 	at org.spockframework.spring.SpringTestContextManager.prepareTestInstance(SpringTestContextManager.java:49) 	at org.spockframework.spring.SpringInterceptor.interceptSetupMethod(SpringInterceptor.java:42) 	at org.spockframework.runtime.extension.AbstractMethodInterceptor.intercept(AbstractMethodInterceptor.java:28) 	at org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:87) 	at org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:88) 	at org.spockframework.runtime.extension.builtin.AbstractRuleInterceptor$1.evaluate(AbstractRuleInterceptor.java:37) 	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55) 	at org.spockframework.runtime.extension.builtin.TestRuleInterceptor.intercept(TestRuleInterceptor.java:38) 	at org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:87) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: A circular @Import has been detected: Illegal attempt by @Configuration class 'MockMvcMyConfig.Digitizer' to import class 'MockMvcMyConfig.Digitizer' as 'MockMvcMyConfig.Digitizer' is already present in the current import stack [ImportStack: [MockMvcMyConfig.Digitizer]] Offending resource: com.artsquare.gallery.web.html.mockmvc.config.MockMvcMyConfig$Digitizer 	at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:70) 	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:450) 	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:275) 	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:229) 	at org.springframework.context.annotation.ConfigurationClassParser.processMemberClasses(ConfigurationClassParser.java:317) 	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:246) 	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:229) 	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:485) 	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:275) 	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:229) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:196) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:165) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:306) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:239) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:462) 	at org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:133) 	at org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:60) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:109) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:261) 	at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:68) 	at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:86) 	... 19 more ```  ---  **Affects:** 4.1.6  **Issue Links:** - #19086 Do not fail with a circular `@Import` error caused by an `@ComponentScan`","closed","type: enhancement,","spring-projects-issues","2015-06-05T09:25:39Z","2019-01-14T04:42:50Z"
"","17567","MockMvc isn't matching handler mappings [SPR-12976]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-12976](https://jira.spring.io/browse/SPR-12976?redirect=false)** and commented  I'm trying to run some MockMvc test with the new HtmlUnit support, but for some reason MockMvc isn't matching mappings:  ``` 2015-05-04 01:46:33.357  INFO   --- [           main] ilder$StaticRequestMappingHandlerMapping : Mapped ""{[/about/{page}/{page2}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.artsquare.gallery.web.html.StaticPagesHtmlController.aboutDigitization(java.lang.String,java.lang.String) 2015-05-04 01:46:33.366  INFO   --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.test.web.servlet.setup.StubWebApplicationContext@1cc9cfb2 2015-05-04 01:46:33.381 DEBUG   --- [           main] o.s.w.c.s.StandardServletEnvironment     : Adding [servletConfigInitParams] PropertySource with lowest search precedence 2015-05-04 01:46:33.381 DEBUG   --- [           main] o.s.w.c.s.StandardServletEnvironment     : Adding [servletContextInitParams] PropertySource with lowest search precedence 2015-05-04 01:46:33.381 DEBUG   --- [           main] o.s.w.c.s.StandardServletEnvironment     : Adding [systemProperties] PropertySource with lowest search precedence 2015-05-04 01:46:33.381 DEBUG   --- [           main] o.s.w.c.s.StandardServletEnvironment     : Adding [systemEnvironment] PropertySource with lowest search precedence 2015-05-04 01:46:33.381 DEBUG   --- [           main] o.s.w.c.s.StandardServletEnvironment     : Initialized StandardServletEnvironment with PropertySources [servletConfigInitParams,servletContextInitParams,systemProperties,systemEnvironment] 2015-05-04 01:46:33.381  INFO   --- [           main] o.s.mock.web.MockServletContext          : Initializing Spring FrameworkServlet '' 2015-05-04 01:46:33.382  INFO   --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : FrameworkServlet '': initialization started 2015-05-04 01:46:33.382  INFO   --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : FrameworkServlet '': initialization completed in 0 ms 2015-05-04 01:46:34.498  WARN   --- [           main] o.s.web.servlet.PageNotFound             : No mapping found for HTTP request with URI [/about/digitization/comparison] in DispatcherServlet with name '' ```  Excerpts from Geb spec; can fill in if there's something particular that's needed:  ```java     @Autowired     StaticPagesHtmlController c      MockMvc buildMvc() {         MockMvcBuilders.standaloneSetup(c).build()     }      def setup() {         MockMvc mvc = buildMvc()         driver = new MockMvcHtmlUnitDriver(mvc, true)         browser.driver = driver     } ```  ---  **Affects:** 4.1.6  **Issue Links:** - #17566 RequestMapping maps root-controller handler methods with double slashes","closed","status: declined,","spring-projects-issues","2015-05-03T23:50:25Z","2019-01-12T16:23:21Z"
"","17566","RequestMapping maps root-controller handler methods with double slashes [SPR-12975]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-12975](https://jira.spring.io/browse/SPR-12975?redirect=false)** and commented  The handler-mapping builder is adding an extra slash to the beginning of handler mappings, causing `MockMvc` tests to fail because of strict matching in `MockMvc`.  ```java @Controller @CompileStatic @RequestMapping(""/"") class StaticPagesHtmlController {     @RequestMapping("""")     public String home() {         ""index2""     }      @RequestMapping(""about"")     String aboutMain() {         ""about/index""     } } ```  ``` 2015-05-04 01:37:09.954  INFO   --- [           main] ilder$StaticRequestMappingHandlerMapping : Mapped ""{[/],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.artsquare.gallery.web.html.StaticPagesHtmlController.home() 2015-05-04 01:37:09.954  INFO   --- [           main] ilder$StaticRequestMappingHandlerMapping : Mapped ""{[//about],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.artsquare.gallery.web.html.StaticPagesHtmlController.aboutMain() ```  It looks like a potential defensive rule that adds the slash to the root-root mapping is also adding erroneous, breaking, slashes to the other mappings.  ---  **Affects:** 4.1.6  **Issue Links:** - #17567 MockMvc isn't matching handler mappings  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bf423b2ca001d39ca1daa4f8421c2656ae57c353, https://github.com/spring-projects/spring-framework/commit/a80d0e87a481242bc0a32aae26e0135f98913596, https://github.com/spring-projects/spring-framework/commit/76beb36e4bd1162bed6ff91f4ba5df6f9e47b528","closed","type: bug,","spring-projects-issues","2015-05-03T23:42:21Z","2019-01-11T21:05:52Z"
"","17539","Error message if form-backing bean is not writable [SPR-12946]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-12946](https://jira.spring.io/browse/SPR-12946?redirect=false)** and commented  I have a Groovy class I'm using as a form-backing bean. I tend to mark everything that I can as `@Immutable`, but MVC can only handle beans it can populate with setters. It silently fails to set properties on immutable beans.  It would be helpful to have some sort of warning that the binder was unable to save form elements on the bean.  Alternatively, if this isn't practical (because of the possibility of splitting different sections of the form onto different beans, for example), it would also be nice for the binder to be able to call constructors with the appropriate arguments (in the case of an `@Immutable` class, it **had** to use the constructor with arguments, but it just passed default values).   ---  **Affects:** 4.1.6","closed","status: bulk-closed,","spring-projects-issues","2015-04-22T16:22:18Z","2019-01-12T00:17:02Z"
"","17504","@Configuration enhancer does not throw proper exception in case of mismatched @Bean method [SPR-12905]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-12905](https://jira.spring.io/browse/SPR-12905?redirect=false)** and commented  Given two unrelated `@Configuration` classes, one of which (`FooConfiguration`) provides `@Bean Foo fooBean()` and the other which (`BarConfiguration`) provides `@Bean Bar fooBean()` and has another bean method that calls `fooBean()`, the CGLib enhancer will fill in the `Foo fooBean` from the first configuration, causing a `ClassCastException` trying to cast `Foo` to `Bar`. This is something of a bug on the user's side for having a name collision, but if the container can't handle duplicate names, it needs to report that error explicitly.   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e403aefe860d12f7427655f4fd2a59966a5d6442, https://github.com/spring-projects/spring-framework/commit/aa49949d7ad09944db4284b957d754e8189ecc74","closed","type: enhancement,","spring-projects-issues","2015-04-13T06:09:23Z","2015-05-26T01:15:30Z"
"","17502","MVC should respect @ResponseStatus on exceptions during mapping [SPR-12903]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-12903](https://jira.spring.io/browse/SPR-12903?redirect=false)** and commented  I am using a `Converter` to directly inject `@PathVariable` parameters as rich domain objects. If the domain object is not found, I would like to throw a `NotFoundException`, which is annotated with `@ResponseStatus(NOT_FOUND)`, but MVC treats all mapping exceptions as 400 errors regardless of any status annotation. If a converter or other mapping component throws an annotated exception, the status should be returned to the client.   ---  **Affects:** 4.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/26cfe5795fcaf59288a3c0e3ccdbb60751a9dd4b","closed","type: enhancement,","spring-projects-issues","2015-04-10T02:40:25Z","2015-05-26T01:14:53Z"
"","17501","Revisit ""ApplicationEventMulticaster not initialized"" behavior for early event publication scenarios [SPR-12902]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-12902](https://jira.spring.io/browse/SPR-12902?redirect=false)** and commented  I hit a bizarre bug in my application that has several StackOverflow and similar posts around the Web. Each time there's been an immediate workaround, but the behavior smells like a bug in the DI dependency algorithms, and I wanted to raise it for review.  The problem manifests when a component used by MVC, such as a `Converter` or argument resolver, depends on a Spring Data repository. Attempting to create the component's bean throws an `IllegalStateException` with the message  ``` ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@491b9b8: startup date [Fri Apr 10 03:28:32 CDT 2015]; root of context hierarchy ```  Removing the dependency on the repository bean or the `implements` clause that makes it interesting to MVC makes the exception go away. Injecting via field or constructor makes no difference. Creating the bean via component scanning or an `@Bean` method (with parameter or configuration-field injection) makes no difference. The issue has been seen with JPA, MongoDB, and Neo4J repositories.  Workarounds have suggested ""use the latest snapshot of Spring library $FOO"", but I believe this is masking the bug: I have sandbox Spring Boot launchers for my (multi-module) core Maven project and my (multi-module) application project that depends on it; all of the Spring dependencies are of identical versions, and only the application launcher throws the exception while the core launcher starts normally. Both are obtaining the MongoDB configuration from a common `CloudConfig` class in the core project, using the same properties file for connection parameters.  This appears to be a fairly nondeterministic failure, and the apparent sensitivity on irrelevant details like the existence of extraneous beans makes me suspect that the problem is in the DI container, but it might be a bug in the Spring Data mapping code.  Similar reports: - https://github.com/spring-projects/spring-boot/issues/1195 - http://stackoverflow.com/questions/26105148/spring-boot-mvc-converter-cannot-autowire-neo4j-data-repositories - http://stackoverflow.com/questions/8330414/java-lang-illegalstateexception-applicationeventmulticaster-not-initialized  Stack trace:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration': Initialization of bean failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'stringKeyToImageAssetConverter' defined in file [/home/christopher/git/studio/studio-domain-core/target/classes/com/artsquare/studio/domain/converter/StringKeyToImageAssetConverter.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [com.artsquare.studio.domain.repository.ImageAssetRepository]: : Error creating bean with name 'imageAssetRepository': Cannot resolve reference to bean 'mongoTemplate' while setting bean property 'mongoOperations'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoTemplate' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mappingMongoConverter' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.convert.MappingMongoConverter]: Factory method 'mappingMongoConverter' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoMappingContext' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@491b9b8: startup date [Fri Apr 10 03:45:47 CDT 2015]; root of context hierarchy; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'imageAssetRepository': Cannot resolve reference to bean 'mongoTemplate' while setting bean property 'mongoOperations'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoTemplate' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mappingMongoConverter' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.convert.MappingMongoConverter]: Factory method 'mappingMongoConverter' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoMappingContext' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@491b9b8: startup date [Fri Apr 10 03:45:47 CDT 2015]; root of context hierarchy 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:547) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:368) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1111) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1006) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) 	at org.springframework.context.support.AbstractApplicationContext.initMessageSource(AbstractApplicationContext.java:625) 	at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:468) 	at org.springframework.context.support.AbstractApplicationContext.jrLockAndRefresh(AbstractApplicationContext.java) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java) 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118) 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:321) 	at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:139) 	at com.artsquare.gallery.sandbox.SandboxLauncher.main(SandboxLauncher.java:18) Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'stringKeyToImageAssetConverter' defined in file [/home/christopher/git/studio/studio-domain-core/target/classes/com/artsquare/studio/domain/converter/StringKeyToImageAssetConverter.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [com.artsquare.studio.domain.repository.ImageAssetRepository]: : Error creating bean with name 'imageAssetRepository': Cannot resolve reference to bean 'mongoTemplate' while setting bean property 'mongoOperations'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoTemplate' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mappingMongoConverter' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.convert.MappingMongoConverter]: Factory method 'mappingMongoConverter' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoMappingContext' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@491b9b8: startup date [Fri Apr 10 03:45:47 CDT 2015]; root of context hierarchy; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'imageAssetRepository': Cannot resolve reference to bean 'mongoTemplate' while setting bean property 'mongoOperations'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoTemplate' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mappingMongoConverter' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.convert.MappingMongoConverter]: Factory method 'mappingMongoConverter' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoMappingContext' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@491b9b8: startup date [Fri Apr 10 03:45:47 CDT 2015]; root of context hierarchy 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:185) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1131) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1034) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:523) 	at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.getDefaultConversionService(ConfigurationPropertiesBindingPostProcessor.java:363) 	at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:282) 	at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:250) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1558) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) 	... 23 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'imageAssetRepository': Cannot resolve reference to bean 'mongoTemplate' while setting bean property 'mongoOperations'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoTemplate' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mappingMongoConverter' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.convert.MappingMongoConverter]: Factory method 'mappingMongoConverter' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoMappingContext' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@491b9b8: startup date [Fri Apr 10 03:45:47 CDT 2015]; root of context hierarchy 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:359) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1469) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1127) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1051) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:949) 	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813) 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) 	... 39 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoTemplate' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mappingMongoConverter' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.convert.MappingMongoConverter]: Factory method 'mappingMongoConverter' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoMappingContext' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@491b9b8: startup date [Fri Apr 10 03:45:47 CDT 2015]; root of context hierarchy 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1111) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1006) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351) 	... 53 more Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.MongoTemplate]: Factory method 'mongoTemplate' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mappingMongoConverter' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.convert.MappingMongoConverter]: Factory method 'mappingMongoConverter' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoMappingContext' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@491b9b8: startup date [Fri Apr 10 03:45:47 CDT 2015]; root of context hierarchy 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) 	... 62 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mappingMongoConverter' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.convert.MappingMongoConverter]: Factory method 'mappingMongoConverter' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoMappingContext' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@491b9b8: startup date [Fri Apr 10 03:45:47 CDT 2015]; root of context hierarchy 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1111) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1006) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:322) 	at com.artsquare.studio.config.StudioMongoConfig$$EnhancerBySpringCGLIB$$5affeadb.mappingMongoConverter() 	at org.springframework.data.mongodb.config.AbstractMongoConfiguration.mongoTemplate(AbstractMongoConfiguration.java:95) 	at com.artsquare.studio.config.StudioMongoConfig$$EnhancerBySpringCGLIB$$5affeadb.CGLIB$mongoTemplate$6() 	at com.artsquare.studio.config.StudioMongoConfig$$EnhancerBySpringCGLIB$$5affeadb$$FastClassBySpringCGLIB$$d28108ee.invoke() 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:309) 	at com.artsquare.studio.config.StudioMongoConfig$$EnhancerBySpringCGLIB$$5affeadb.mongoTemplate() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) 	... 63 more Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.mongodb.core.convert.MappingMongoConverter]: Factory method 'mappingMongoConverter' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoMappingContext' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@491b9b8: startup date [Fri Apr 10 03:45:47 CDT 2015]; root of context hierarchy 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) 	... 84 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mongoMappingContext' defined in class path resource [com/artsquare/studio/config/StudioMongoConfig.class]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@491b9b8: startup date [Fri Apr 10 03:45:47 CDT 2015]; root of context hierarchy 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1566) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:322) 	at com.artsquare.studio.config.StudioMongoConfig$$EnhancerBySpringCGLIB$$5affeadb.mongoMappingContext() 	at org.springframework.data.mongodb.config.AbstractMongoConfiguration.mappingMongoConverter(AbstractMongoConfiguration.java:192) 	at com.artsquare.studio.config.StudioMongoConfig$$EnhancerBySpringCGLIB$$5affeadb.CGLIB$mappingMongoConverter$7() 	at com.artsquare.studio.config.StudioMongoConfig$$EnhancerBySpringCGLIB$$5affeadb$$FastClassBySpringCGLIB$$d28108ee.invoke() 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:309) 	at com.artsquare.studio.config.StudioMongoConfig$$EnhancerBySpringCGLIB$$5affeadb.mappingMongoConverter() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) 	... 85 more Caused by: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@491b9b8: startup date [Fri Apr 10 03:45:47 CDT 2015]; root of context hierarchy 	at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:344) 	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331) 	at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:307) 	at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:257) 	at org.springframework.data.mapping.context.AbstractMappingContext.initialize(AbstractMappingContext.java:373) 	at org.springframework.data.mapping.context.AbstractMappingContext.afterPropertiesSet(AbstractMappingContext.java:363) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1625) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562) 	... 104 more ```  Trivial component class triggering the exception:  ``` @Component public class StringKeyToImageAssetConverter implements Converter {      final ImageAssetRepository repository;      @Autowired     public StringKeyToImageAssetConverter(ImageAssetRepository repository) {         this.repository = repository;     }      @Override     public ImageAsset convert(String source) {         return repository.findByKey(source);     } } ```  List of dependencies for working core launcher:  ``` aopalliance:aopalliance:jar:1.0:compile ch.qos.logback:logback-classic:jar:1.1.2:compile ch.qos.logback:logback-core:jar:1.1.2:compile com.artsquare.gallery.api:artsquare-gallery-api:jar:0.3.2-SNAPSHOT:compile com.artsquare.studio:studio-deployment:jar:2015.4.8-106:compile com.artsquare.studio:studio-domain-core:jar:2015.4.8-106:compile com.artsquare.studio:studio-domain-events:jar:2015.4.8-106:compile com.artsquare.studio:studio-image-processing-api:jar:2015.4.8-106:compile com.artsquare.studio:studio-image-processing-blitline:jar:2015.4.8-106:compile com.artsquare.studio:studio-image-processing-generic:jar:2015.4.8-106:compile com.artsquare.studio:studio-image-s3:jar:2015.4.8-106:compile com.artsquare.studio:studio-security-inmemory:jar:2015.4.8-106:compile com.artsquare.studio:studio-security-stormpath:jar:2015.4.8-106:compile com.artsquare.studio:studio-security:jar:2015.4.8-106:compile com.artsquare.studio:studio-wiring:jar:2015.4.8-106:compile com.blitline:blitline-image-client-spring:jar:0.15.0:compile com.blitline:blitline-image-client:jar:0.15.0:compile com.chrylis:base58-codec:jar:1.2.0:compile com.fasterxml.jackson.core:jackson-annotations:jar:2.4.4:compile com.fasterxml.jackson.core:jackson-core:jar:2.4.4:compile com.fasterxml.jackson.core:jackson-databind:jar:2.4.4:compile com.fasterxml.jackson.dataformat:jackson-dataformat-csv:jar:2.5.1:compile com.fasterxml:classmate:jar:1.0.0:compile com.goldmansachs:gs-collections-api:jar:5.1.0:compile com.goldmansachs:gs-collections:jar:5.1.0:compile com.google.guava:guava:jar:18.0:compile com.lmax:disruptor:jar:3.2.1:compile com.rabbitmq:amqp-client:jar:3.4.3:compile com.stormpath.sdk:stormpath-sdk-api:jar:1.0.RC3.1:compile com.stormpath.sdk:stormpath-sdk-httpclient:jar:1.0.RC3.1:compile com.stormpath.sdk:stormpath-sdk-impl:jar:1.0.RC3.1:compile commons-codec:commons-codec:jar:1.10:compile commons-io:commons-io:jar:2.4:compile io.gatling:jsr166e:jar:1.0:compile javax.validation:validation-api:jar:1.1.0.Final:compile log4j:log4j:jar:1.2.17:compile org.apache.commons:commons-lang3:jar:3.3.2:compile org.apache.httpcomponents:httpclient:jar:4.3.6:compile org.apache.httpcomponents:httpcore:jar:4.3.3:compile org.apache.tomcat.embed:tomcat-embed-core:jar:7.0.57:compile org.apache.tomcat.embed:tomcat-embed-el:jar:7.0.57:compile org.apache.tomcat.embed:tomcat-embed-logging-juli:jar:7.0.57:compile org.apache.tomcat.embed:tomcat-embed-websocket:jar:7.0.57:compile org.aspectj:aspectjrt:jar:1.8.4:compile org.aspectj:aspectjweaver:jar:1.8.4:compile org.codehaus.groovy:groovy-all:jar:indy:2.4.3:compile org.hamcrest:hamcrest-core:jar:1.3:compile org.hamcrest:hamcrest-library:jar:1.3:compile org.hibernate.javax.persistence:hibernate-jpa-2.0-api:jar:1.0.1.Final:compile org.hibernate:hibernate-validator:jar:5.1.3.Final:compile org.jboss.logging:jboss-logging:jar:3.1.3.GA:compile org.mongodb:mongo-java-driver:jar:2.13.0:compile org.objenesis:objenesis:jar:2.1:compile org.projectreactor:reactor-core:jar:1.1.5.RELEASE:compile org.slf4j:jcl-over-slf4j:jar:1.7.8:compile org.slf4j:jul-to-slf4j:jar:1.7.8:compile org.slf4j:log4j-over-slf4j:jar:1.7.8:compile org.slf4j:slf4j-api:jar:1.7.10:compile org.springframework.amqp:spring-amqp:jar:1.4.2.RELEASE:compile org.springframework.amqp:spring-rabbit:jar:1.4.2.RELEASE:compile org.springframework.boot:spring-boot-autoconfigure:jar:1.2.1.RELEASE:compile org.springframework.boot:spring-boot-starter-aop:jar:1.2.1.RELEASE:compile org.springframework.boot:spring-boot-starter-integration:jar:1.2.1.RELEASE:compile org.springframework.boot:spring-boot-starter-logging:jar:1.2.1.RELEASE:compile org.springframework.boot:spring-boot-starter-tomcat:jar:1.2.1.RELEASE:compile org.springframework.boot:spring-boot-starter-web:jar:1.2.1.RELEASE:compile org.springframework.boot:spring-boot-starter:jar:1.2.1.RELEASE:compile org.springframework.boot:spring-boot:jar:1.2.1.RELEASE:compile org.springframework.cloud:spring-cloud-cloudfoundry-connector:jar:1.1.0.RELEASE:compile org.springframework.cloud:spring-cloud-core:jar:1.1.0.RELEASE:compile org.springframework.cloud:spring-cloud-localconfig-connector:jar:1.1.0.RELEASE:compile org.springframework.cloud:spring-cloud-spring-service-connector:jar:1.1.0.RELEASE:compile org.springframework.data:spring-data-commons:jar:1.9.1.RELEASE:compile org.springframework.data:spring-data-mongodb:jar:1.6.1.RELEASE:compile org.springframework.data:spring-data-redis:jar:1.4.1.RELEASE:compile org.springframework.hateoas:spring-hateoas:jar:0.16.0.RELEASE:compile org.springframework.integration:spring-integration-core:jar:4.1.2.RELEASE:compile org.springframework.integration:spring-integration-file:jar:4.1.2.RELEASE:compile org.springframework.integration:spring-integration-http:jar:4.1.2.RELEASE:compile org.springframework.integration:spring-integration-ip:jar:4.1.2.RELEASE:compile org.springframework.integration:spring-integration-stream:jar:4.1.2.RELEASE:compile org.springframework.plugin:spring-plugin-core:jar:1.1.0.RELEASE:compile org.springframework.retry:spring-retry:jar:1.1.2.RELEASE:compile org.springframework.security:spring-security-config:jar:4.0.0.RC2:compile org.springframework.security:spring-security-core:jar:4.0.0.RC2:compile org.springframework.security:spring-security-web:jar:4.0.0.RC2:compile org.springframework:spring-aop:jar:4.1.4.RELEASE:compile org.springframework:spring-beans:jar:4.1.4.RELEASE:compile org.springframework:spring-context-support:jar:4.1.4.RELEASE:compile org.springframework:spring-context:jar:4.1.4.RELEASE:compile org.springframework:spring-core:jar:4.1.4.RELEASE:compile org.springframework:spring-expression:jar:4.1.4.RELEASE:compile org.springframework:spring-messaging:jar:4.1.4.RELEASE:compile org.springframework:spring-tx:jar:4.1.4.RELEASE:compile org.springframework:spring-web:jar:4.1.4.RELEASE:compile org.springframework:spring-webmvc:jar:4.1.4.RELEASE:compile org.yaml:snakeyaml:jar:1.14:compile ```  Dependencies for broken application launcher:  ``` aopalliance:aopalliance:jar:1.0:compile ch.qos.logback:logback-classic:jar:1.1.2:compile ch.qos.logback:logback-core:jar:1.1.2:compile com.artsquare.gallery.api:artsquare-gallery-api:jar:0.3.2-SNAPSHOT:compile com.artsquare.gallery:gallery-base-controllers:jar:2015.4.9-234:compile com.artsquare.gallery:gallery-configuration:jar:2015.4.9-234:compile com.artsquare.gallery:gallery-html-controllers:jar:2015.4.9-234:compile com.artsquare.gallery:gallery-html-external:jar:2015.4.9-234:compile com.artsquare.gallery:gallery-html-resources:jar:2015.4.9-234:compile com.artsquare.gallery:gallery-json-v0:jar:2015.4.9-234:compile com.artsquare.gallery:gallery-scaffold:jar:2015.4.9-234:compile com.artsquare.studio:studio-deployment:jar:2015.4.8-106:compile com.artsquare.studio:studio-domain-core:jar:2015.4.8-106:compile com.artsquare.studio:studio-domain-digitization:jar:2015.4.8-106:compile com.artsquare.studio:studio-domain-events:jar:2015.4.8-106:compile com.artsquare.studio:studio-image-processing-api:jar:2015.4.8-106:compile com.artsquare.studio:studio-image-processing-blitline:jar:2015.4.8-106:compile com.artsquare.studio:studio-image-processing-generic:jar:2015.4.8-106:compile com.artsquare.studio:studio-image-s3:jar:2015.4.8-106:compile com.artsquare.studio:studio-policy:jar:2015.4.8-106:compile com.artsquare.studio:studio-security-inmemory:jar:2015.4.8-106:compile com.artsquare.studio:studio-security-stormpath:jar:2015.4.8-106:compile com.artsquare.studio:studio-security:jar:2015.4.8-106:compile com.artsquare.studio:studio-stripe:jar:2015.4.8-106:compile com.artsquare.studio:studio-wiring:jar:2015.4.8-106:compile com.blitline:blitline-image-client-spring:jar:0.15.0:compile com.blitline:blitline-image-client:jar:0.15.0:compile com.chrylis:base58-codec:jar:1.2.0:compile com.fasterxml.jackson.core:jackson-annotations:jar:2.4.4:compile com.fasterxml.jackson.core:jackson-core:jar:2.4.4:compile com.fasterxml.jackson.core:jackson-databind:jar:2.4.4:compile com.fasterxml.jackson.dataformat:jackson-dataformat-csv:jar:2.5.1:compile com.fasterxml:classmate:jar:1.0.0:compile com.goldmansachs:gs-collections-api:jar:5.1.0:compile com.goldmansachs:gs-collections:jar:5.1.0:compile com.google.code.gson:gson:jar:2.3:compile com.google.guava:guava:jar:18.0:compile com.lmax:disruptor:jar:3.2.1:compile com.rabbitmq:amqp-client:jar:3.4.3:compile com.stormpath.sdk:stormpath-sdk-api:jar:1.0.RC3.1:compile com.stormpath.sdk:stormpath-sdk-httpclient:jar:1.0.RC3.1:compile com.stormpath.sdk:stormpath-sdk-impl:jar:1.0.RC3.1:compile com.stripe:stripe-java:jar:1.27.0:compile commons-codec:commons-codec:jar:1.10:compile commons-logging:commons-logging:jar:1.2:compile io.gatling:jsr166e:jar:1.0:compile io.undertow:undertow-core:jar:1.1.1.Final:compile io.undertow:undertow-servlet:jar:1.1.1.Final:compile io.undertow:undertow-websockets-jsr:jar:1.1.1.Final:compile javax.inject:javax.inject:jar:1:compile javax.servlet:javax.servlet-api:jar:3.1.0:compile javax.validation:validation-api:jar:1.1.0.Final:compile log4j:log4j:jar:1.2.17:compile net.spy:spymemcached:jar:2.11.2:compile nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:jar:1.2.7:compile ognl:ognl:jar:3.0.8:compile opensymphony:ognl:jar:2.6.11:compile org.apache.commons:commons-lang3:jar:3.3.2:compile org.apache.commons:commons-pool2:jar:2.2:compile org.apache.httpcomponents:httpclient:jar:4.3.6:compile org.apache.httpcomponents:httpcore:jar:4.3.3:compile org.codehaus.groovy:groovy-all:jar:indy:2.4.3:compile org.glassfish:javax.el:jar:3.0.0:compile org.hamcrest:hamcrest-core:jar:1.3:compile org.hamcrest:hamcrest-library:jar:1.3:compile org.hibernate.javax.persistence:hibernate-jpa-2.0-api:jar:1.0.1.Final:compile org.hibernate:hibernate-validator:jar:5.1.3.Final:compile org.javassist:javassist:jar:3.18.1-GA:compile org.jboss.logging:jboss-logging:jar:3.1.3.GA:compile org.jboss.spec.javax.annotation:jboss-annotations-api_1.2_spec:jar:1.0.0.Final:compile org.jboss.spec.javax.websocket:jboss-websocket-api_1.1_spec:jar:1.1.0.Final:compile org.jboss.xnio:xnio-api:jar:3.3.0.Final:compile org.mongodb:mongo-java-driver:jar:2.12.4:compile org.objenesis:objenesis:jar:2.1:compile org.projectreactor:reactor-core:jar:1.1.5.RELEASE:compile org.slf4j:jcl-over-slf4j:jar:1.7.8:compile org.slf4j:jul-to-slf4j:jar:1.7.8:compile org.slf4j:log4j-over-slf4j:jar:1.7.8:compile org.slf4j:slf4j-api:jar:1.7.10:compile org.springframework.amqp:spring-amqp:jar:1.4.2.RELEASE:compile org.springframework.amqp:spring-rabbit:jar:1.4.2.RELEASE:compile org.springframework.boot:spring-boot-autoconfigure:jar:1.2.1.RELEASE:compile org.springframework.boot:spring-boot-starter-logging:jar:1.2.1.RELEASE:compile org.springframework.boot:spring-boot-starter-thymeleaf:jar:1.2.1.RELEASE:compile org.springframework.boot:spring-boot-starter-undertow:jar:1.2.1.RELEASE:compile org.springframework.boot:spring-boot-starter-web:jar:1.2.1.RELEASE:compile org.springframework.boot:spring-boot-starter:jar:1.2.1.RELEASE:compile org.springframework.boot:spring-boot:jar:1.2.1.RELEASE:compile org.springframework.cloud:spring-cloud-cloudfoundry-connector:jar:1.1.0.RELEASE:compile org.springframework.cloud:spring-cloud-core:jar:1.1.0.RELEASE:compile org.springframework.cloud:spring-cloud-localconfig-connector:jar:1.1.0.RELEASE:compile org.springframework.cloud:spring-cloud-spring-service-connector:jar:1.1.0.RELEASE:compile org.springframework.data:spring-data-commons:jar:1.9.1.RELEASE:compile org.springframework.data:spring-data-mongodb:jar:1.6.1.RELEASE:compile org.springframework.data:spring-data-redis:jar:1.4.1.RELEASE:compile org.springframework.hateoas:spring-hateoas:jar:0.16.0.RELEASE:compile org.springframework.integration:spring-integration-core:jar:4.1.2.RELEASE:compile org.springframework.plugin:spring-plugin-core:jar:1.1.0.RELEASE:compile org.springframework.retry:spring-retry:jar:1.1.2.RELEASE:compile org.springframework.security:spring-security-config:jar:4.0.0.RC2:compile org.springframework.security:spring-security-core:jar:4.0.0.RC2:compile org.springframework.security:spring-security-web:jar:4.0.0.RC2:compile org.springframework.session:spring-session-data-redis:jar:1.0.0.RELEASE:compile org.springframework.session:spring-session:jar:1.0.0.RELEASE:compile org.springframework.webflow:spring-binding:jar:2.4.1.RELEASE:compile org.springframework.webflow:spring-js-resources:jar:2.4.1.RELEASE:compile org.springframework.webflow:spring-js:jar:2.4.1.RELEASE:compile org.springframework.webflow:spring-webflow:jar:2.4.1.RELEASE:compile org.springframework:spring-aop:jar:4.1.4.RELEASE:compile org.springframework:spring-beans:jar:4.1.4.RELEASE:compile org.springframework:spring-context-support:jar:4.1.4.RELEASE:compile org.springframework:spring-context:jar:4.1.4.RELEASE:compile org.springframework:spring-core:jar:4.1.4.RELEASE:compile org.springframework:spring-expression:jar:4.1.4.RELEASE:compile org.springframework:spring-messaging:jar:4.1.4.RELEASE:compile org.springframework:spring-tx:jar:4.1.4.RELEASE:compile org.springframework:spring-web:jar:4.1.4.RELEASE:compile org.springframework:spring-webmvc:jar:4.1.4.RELEASE:compile org.thymeleaf.extras:thymeleaf-extras-springsecurity4:jar:2.1.2-SNAPSHOT:compile org.thymeleaf:thymeleaf-spring4:jar:2.1.4.RELEASE:compile org.thymeleaf:thymeleaf:jar:2.1.4.RELEASE:compile org.unbescape:unbescape:jar:1.1.0.RELEASE:compile org.yaml:snakeyaml:jar:1.14:compile redis.clients:jedis:jar:2.5.2:compile ```  **Note:** I have found that annotating the injection point with `@Lazy` seems to work as a workaround, but since nothing explicitly depends on this bean (and if it did, the exception should be one for a circular dependency), eager initialization should work.  ---  **Affects:** 4.1.4  **Issue Links:** - #20697 Early ApplicationContext close call may lead to ApplicationEventMulticaster/LifecycleProcessor access exception - #19689 Annotation-based event listener does not receive event published in `@PostConstruct`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9ed0a56d840886e4d6d9d90a4e21066c789f128e","closed","type: enhancement,","spring-projects-issues","2015-04-10T01:50:01Z","2019-01-14T04:43:23Z"
"","17474","Support injecting resource as Reader [SPR-12876]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-12876](https://jira.spring.io/browse/SPR-12876?redirect=false)** and commented  I am using the ability to inject an `InputStream` from the classpath, a la  ``` @Autowired MyConstructor(@Value('classpath:foo.csv') InputStream csv) ```  It would be convenient to be able to work with the resource as a `Reader` instead of an `InputStream`, but Spring doesn't know how to translate the string value into a `Reader`. Would it be feasible to have the conversion system understand how to wrap an `InputStreamReader` around the injected resource?   ---  **Affects:** 4.1.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2c637dcb2ed847c4919dd979894da38ca6ee7cbb","closed","type: enhancement,","spring-projects-issues","2015-04-01T05:18:24Z","2015-05-26T01:15:10Z"
"","17482","Support 'selector' header for subscriptions with SimpleBrokerMessageHandler [SPR-12884]","**[Christopher Shannon](https://jira.spring.io/secure/ViewProfile.jspa?name=chris8204)** opened **[SPR-12884](https://jira.spring.io/browse/SPR-12884?redirect=false)** and commented  I am currently using STOMP over Websockets and the Simple message broker to publish messages to clients. In my case, the simple message broker support works great, except the one feature that is missing that would be really useful is message selector support to filter out certain messages sent to clients.  I could use a full featured message broker for this feature but a full broker is a bit overkill for what I need.  I suggest adding message selector support to the Simple message broker (or to another internal broker in spring).  Instead of having to write custom logic to filter messages, it would be nice to be able to register a selector in a header to filter out messages dynamically.  Adding support for a JMS message selector expression (which is based on a subset of SQL92 conditional syntax) would be great but would probably be difficult and might best suited to leave for a full featured broker.  Something else that might work instead would be to use a syntax based on the Spring Expression Language if there is a good way to implement this in a generic way.  This should be a lot more straight forward since SpEL is used elsewhere all over the framework.  Even if SpEL wouldn't work really work, just having basic filtering support on headers by using a syntax such as ""someProperty = 'true'"" or ""someProperty > 10"" would be useful.  ---  **Affects:** 4.1.6  **Issue Links:** - #17777 ConcurrentModificationException when calling SimpMessagingTemplate.convertAndSend - #17796 NullPointerException possible in DefaultSubscriptionRegistry  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0b43e4e4f2ae8d59bcfb16b8d88c6a0c3a7b7ace, https://github.com/spring-projects/spring-framework/commit/b6327acec825aefadead62bd7825425b048b214c","closed","type: enhancement,","spring-projects-issues","2015-04-02T16:02:40Z","2019-01-11T21:36:04Z"
"","17187","Support Jackson @JsonFilter [SPR-12586]","**[Christopher Shannon](https://jira.spring.io/secure/ViewProfile.jspa?name=chris8204)** opened **[SPR-12586](https://jira.spring.io/browse/SPR-12586?redirect=false)** and commented  I occasionally need to be able to dynamically filter what fields are returned from a rest controller.  The Jackson `@JsonView` annotation is a good improvement but it still requires configuration ahead of time and isn't dynamic.  One use case I have is that a user will pass in a list of parameters specifying what they want to see (or exclude) in a result set.  Based on that list the result set could then be customized for the user.  A way this can be done with Jackson is using filters.  Here is an example:  ```java  @JsonFilter(""someFilter"") class MyBean {     ... }  MyBean value; //business logic to set value ObjectMapper mapper = new ObjectMapper(); FilterProvider filters = new SimpleFilterProvider().addFilter(""someFilter"",     SimpleBeanPropertyFilter.filterOutAllExcept(""someProperty""));  String json = mapper.filteredWriter(filters).writeValueAsString(value); //.... ```  It would be nice to be able to do this with Spring MVC using either the MappingJackson2HttpMessageConverter or a view (MappingJackson2JsonView)  For controllers using view resolution I think it would be pretty straight forward.  The filter could be applied the same way a JsonView is done now, it could be done like this:  ```java     @RequestMapping(value = ""/data"", method = RequestMethod.GET)     public String getData(Model model) {         //business logic to create or look up filter         FilterProvider filters = new SimpleFilterProvider().addFilter(""someFilter"",             SimpleBeanPropertyFilter.filterOutAllExcept(""someProperty""));          //add to model         model.addAttribute('jsonFilters', filters);          return ""dataView"";     } ```  And then the MappingJackson2JsonView class could read that value to configure the serializer.  It gets a little more tricky with the message converter set up (which is what I mosly use) since the AbstractJackson2HttpMessageConverter needs a way to dynamically know what filter to use.  Maybe the controller method could return a wrapper type that could be detected by the message converter.  Something like:  ```java     @RequestMapping(value = ""/data"", method = RequestMethod.GET)     @ResponseBody     public Object getData() {         MyObject data;         //....do some business logic and set data         //create or look up filter         FilterProvider filters = new SimpleFilterProvider().addFilter(""someFilter"",             SimpleBeanPropertyFilter.filterOutAllExcept(""someProperty""));          return new FilterWrapper(filters, data);     } ```  If the converter detects that FilterWrapper type then it could set up the writer to use the filter when serializing.  The filter would need to be configured dynamically at runtime so an annotation on the controller method wouldn't work in this case.  Let me know what you think.  ---  **Affects:** 4.1.4  **Reference URL:** http://wiki.fasterxml.com/JacksonFeatureJsonFilter  **Issue Links:** - #19730 Support `@JsonFilter` on `@ResponseBody` and ResponseEntity Controller methods (_**""is duplicated by""**_) - #21742 Support both filters and views in AbstractJackson2HttpMessageConverter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ca06582f2af2e31b23031d8650148d95129ce4a1  2 votes, 14 watchers","closed","type: enhancement,","spring-projects-issues","2014-12-31T08:23:53Z","2019-01-13T05:43:03Z"
"","17233","CssLinkResourceTransformer throws Exception on links that start with // [SPR-12632]","**[Christopher Savory](https://jira.spring.io/secure/ViewProfile.jspa?name=csavory)** opened **[SPR-12632](https://jira.spring.io/browse/SPR-12632?redirect=false)** and commented  We have background images in our CSS that are served off the CDN.  Instead of prefixing with http:// or https://, we start them with //.  CssLinkResourceTransformer will throw an IllegalStateException state exception when it encounters one of these.  I see there is a hasScheme method, but it seems to only be looking for http or https.  ``` java.lang.IllegalStateException: Failed to get public resource URL path for d2lwa1fwilioys.cloudfront.net/elrc/img/content/global/feedbackIcon.png 	at org.springframework.web.servlet.resource.ResourceUrlProvider.getForLookupPath(ResourceUrlProvider.java:211) 	at org.springframework.web.servlet.resource.ResourceUrlProvider.getForRequestUrl(ResourceUrlProvider.java:174) 	at org.springframework.web.servlet.resource.ResourceTransformerSupport.resolveUrlPath(ResourceTransformerSupport.java:81) 	at org.springframework.web.servlet.resource.CssLinkResourceTransformer.transform(CssLinkResourceTransformer.java:106) ```    ---  **Affects:** 4.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/028c0e8b809dcfd641d290de4eda0e48c08fd5f2, https://github.com/spring-projects/spring-framework/commit/bb5da15e1c8fe9ca217839091edf262b4ff992fd","closed","type: bug,","spring-projects-issues","2015-01-14T13:55:10Z","2019-01-11T19:04:26Z"
"","17231","ResourceUrlEncodingFilter fails when Thymeleaf and the ""/**"" resource pattern is used [SPR-12630]","**[Christopher Savory](https://jira.spring.io/secure/ViewProfile.jspa?name=csavory)** opened **[SPR-12630](https://jira.spring.io/browse/SPR-12630?redirect=false)** and commented  I could not get ResourceUrlEncodingFilter to work with Thymleaf templates.  I believe the problem is that Thymleaf calls encodeURL on all of it's URLs, even standard links.  What happens is that ResourceUrlEncodingFilter tries to look up resources of links and can't find them (because they don't exist, but are just mappings) and throws an exception.  I had to create my own filter based on ResourceUrlEncodingFilter that would only encode resources that had specific extensions I wanted encoded.  It would be nice if ResourceUrlEncodingFilter used the same set of extensions supplied when the path patterns are supplied to ResourceHandlerRegistry.addResourceHandler and further, only those with a Transformer attached to it.   ---  **Affects:** 4.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/25f7f0d3c3a98e01897414b2f2fddf3df2e055ca","closed","type: enhancement,","spring-projects-issues","2015-01-14T11:26:13Z","2015-02-20T04:13:12Z"
"","17229","CssLinkResourceTransformer does not transform LESS files [SPR-12628]","**[Christopher Savory](https://jira.spring.io/secure/ViewProfile.jspa?name=csavory)** opened **[SPR-12628](https://jira.spring.io/browse/SPR-12628?redirect=false)** and commented  CssLinkResourceTransformer has this conditional which excludes LESS files:  ``` String filename = resource.getFilename(); if (!""css"".equals(StringUtils.getFilenameExtension(filename))) {      return resource; } ```  Can less files be included?   ---  **Affects:** 4.1.3","closed","type: enhancement,","spring-projects-issues","2015-01-14T06:43:15Z","2015-01-16T08:35:05Z"
"","17267","@PathVariable truncates anything after the last dot '.' [SPR-12668]","**[Christophe](https://jira.spring.io/secure/ViewProfile.jspa?name=fargette.c)** opened **[SPR-12668](https://jira.spring.io/browse/SPR-12668?redirect=false)** and commented  When using `@PathVariable` in a `@RequestMapping` method, the value received is truncated. Anything after the last dot character is removed.  For example, using an OAuth2 access token, the JWT (JSON Web Token) is composed of 3 parts separated with the '.' character.  Attached, a simple SpringBoot project to reproduce the issue. http://localhost:8080/v1/test/123.456.789   ---  **Affects:** 4.1.4  **Attachments:** - [demoTruncate.zip](https://jira.spring.io/secure/attachment/22622/demoTruncate.zip) (_38.69 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/92fb8d1bcf25674569d680104968063eff873014","closed","status: declined,","spring-projects-issues","2015-01-27T19:50:09Z","2019-01-12T16:23:38Z"
"","17406","2 persistent units with parameter generatedll=true --> All entities are generated in the 2 databases [SPR-12809]","**[christophe larcher](https://jira.spring.io/secure/ViewProfile.jspa?name=clarcher)** opened **[SPR-12809](https://jira.spring.io/browse/SPR-12809?redirect=false)** and commented      Hello,  I just configure 2 persistent Unit  in my project; each persistent unit (attached to one particular datasource) manage different entities : everything works fine till I I set the generateDll parameter to true ( when I want to create the tables from the jpa entities) When I run the application : it seems that it creates twice all the tables from the entities in the 2 databases.( instead of creating tables from entities managed by persistentUnit1 in database1, and also all tables .....in database2) : I cant figure out why it occurs. When I run my application with the parameter  ""generateDll=false"" : I have no problem with the demarcation of the 2 persistent Unit. I attach my configuration files. I have ever tried to use 2 persistent.xml files (one for each persistent unit) : but the problem still occurs. Best regards. Christophe   ---  **Affects:** 4.1.1  **Attachments:** - [DefaultProfileConfiguration.java](https://jira.spring.io/secure/attachment/22689/DefaultProfileConfiguration.java) (_2.80 kB_) - [persistence.xml](https://jira.spring.io/secure/attachment/22692/persistence.xml) (_902 bytes_) - [PersistentUnit_1Configuration.java](https://jira.spring.io/secure/attachment/22690/PersistentUnit_1Configuration.java) (_4.88 kB_) - [PersistentUnit_2Configuration.java](https://jira.spring.io/secure/attachment/22691/PersistentUnit_2Configuration.java) (_4.87 kB_)","closed","status: invalid,","spring-projects-issues","2015-03-12T05:12:44Z","2019-01-12T05:24:36Z"
"","17813","Allow customizing DispatcherServlet in AbstractDispatcherServletInitializer [SPR-13222]","**[Christian Rudolph](https://jira.spring.io/secure/ViewProfile.jspa?name=cmrudolph)** opened **[SPR-13222](https://jira.spring.io/browse/SPR-13222?redirect=false)** and commented  It would be nice if `AbstractDispatcherServletInitializer#registerDispatcherServlet`'s default implementation would call a configuration hook for the registered dispatcher servlet. This would allow to configure properties like `throwExceptionIfNoHandlerFound` and others that aren't easily accessible in a pure java config environment.  It could be implemented the same way as `AbstractDispatcherServletInitializer#customizeRegistration`: simply a protected method with the instance of the `DispatcherServlet` as its sole argument.   ---  **Affects:** 4.2 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d738dddd8fc73f6dfeb04dcad4ab95d97c20a99f","closed","type: enhancement,","spring-projects-issues","2015-07-11T12:53:09Z","2015-07-15T09:05:09Z"
"","17339","MvcUriComponentsBuilder drops trailing slash from @RequestMapping [SPR-12742]","**[Christian Rudolph](https://jira.spring.io/secure/ViewProfile.jspa?name=cmrudolph)** opened **[SPR-12742](https://jira.spring.io/browse/SPR-12742?redirect=false)** and commented  `UriComponentsBuilder#uriComponents` drops trailing slashes when constructing a `UriComponentsBuilder` from given `UriComponents` that have a trailing slash.  This is an issue when using `MvcUriComponentsBuilder` to fetch a controller method's uri that ends on a slash. The constructed uri doesn't point to the correct location.   ---  **Affects:** 4.1.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0e7eecfe348428efa9e6ab4c2cda1c83d2ca7201","closed","type: enhancement,","spring-projects-issues","2015-02-21T09:34:07Z","2015-05-26T01:15:07Z"
"","17218","Allow customizing ""base"" path in MvcUriComponentsBuilder (e.g. path prefix for locale) [SPR-12617]","**[Christian Rudolph](https://jira.spring.io/secure/ViewProfile.jspa?name=cmrudolph)** opened **[SPR-12617](https://jira.spring.io/browse/SPR-12617?redirect=false)** and commented  Google [recommends](https://support.google.com/webmasters/answer/182192?hl=en#2) to use country specific (toplevel) domains, subdomains or subdirectories to indicate the locale of a sites content.  Spring provides out of the box support for url parameters to change the locale of a site (explicitly not recommended by google) when using a `LocaleChangeInterceptor`. It should be relatively easy to create an interceptor that extracts the locale from the TLD or a subdomain, but creating ""directories"" that indicate the locale is not possible as of spring 4.1.4 in a noninvasive way.  The urls should look like this: http://www.example.com/en/foo  It is easy to write an interceptor/localeResolver to extract the locale part from the url. But request mapping becomes a pain, because every controller must be aware of the locale that is present in the url. It becomes more difficult, if one would like http://www.example.com/foo to point to an automatically evaluated locale (AcceptHeaderLocale, IP lookup, default locale).  I tried to solve the problem by extending `UrlPathHelper` to strip the locale part from the url. Then the mapping becomes easy again.  The problem is, that the `MvcUriComponentsBuilder` is not aware of the fact that there is some stripped part of the url. At least when using the spring url tag library to construct urls from controller methods (the tag utilizes `MvcUriComponentsBuilder#fromMappingName`), the stripped part is lost. I didn't test it, but all factory methods of `MvcUriComponentsBuilder` should lose the locale part.  It should be possible to to configure a strategy to manipulate the retrieved url path, like it is possible for controller method arguments using `UriComponentsContributor` s. With such a strategy, it should be possible to restore the stripped part of the url.  ---  **Affects:** 4.1.4  **Attachments:** - [SPR-12617.zip](https://jira.spring.io/secure/attachment/22593/SPR-12617.zip) (_54.89 kB_)  **Issue Links:** - #17397 Allow use of MvcUriComponentsBuilder independent of Servlet request lifecycle  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b528bb6436da728d130f595b1a12a02133bd204, https://github.com/spring-projects/spring-framework/commit/1cd0f433e0a5dd9b659143664ea432d24b4386eb, https://github.com/spring-projects/spring-framework/commit/0ddcbce90ac37581988a8850e990d98731ff77fa  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2015-01-11T10:36:23Z","2019-01-11T19:04:45Z"
"","17249","Importing Spring configuration in Groovy bean configuration [SPR-12648]","**[Christian LIPP](https://jira.spring.io/secure/ViewProfile.jspa?name=chrlipp)** opened **[SPR-12648](https://jira.spring.io/browse/SPR-12648?redirect=false)** and commented  I am developing a batch import with Spring batch and Spring boot. For the bean configuration I am using the Groovy bean configuration. Since it is not possible to set up Spring batch completely inside the Groovy DSL (see  #17023) I am combining Groovy-based bean definition with a configuration class like  ``` @EnableAutoConfiguration @EnableBatchProcessing @ComponentScan public class Application {     public static void main(String[] args) {         new SpringApplicationBuilder(Application.class, ""appcontext.groovy"").run(args)     } } ```  Inside appcontext.groovy I can access the beans from Application.class when I am defining beans which are using `@AutoWired` inside. But when I am going to define beans which are no components and are not autowired like the FlatFileItemReader  ``` fileReaderPerson(FlatFileItemReader) {      resource =""file:data/p00""      bufferedReaderFactory = bzipBufferedReaderFactory      encoding = ""CP1250""      lineMapper = lineMapper } ```  it is not possible to reference the beans registered by the application ComponentScan inside the Groovy DSL eg. the bzipBufferedReaderFactory. In Java Configuration you can import another configuration as  ``` @Configuration @Import(ConfigA.class) public class ConfigB { } ```  In the Groovy DSL it is not possible to import (or access in any other way) a configuration and I would like to request that feature (analog to importBeans for including configuration in XML/Groovy DSL). Also all beans from Spring boot autoconfiguration (e.g. Session) are not accessible inside the Groovy DSL.  ---  **Issue Links:** - #17023 EnableXXX support for GroovyBeanDefinitionReader","closed","status: bulk-closed,","spring-projects-issues","2015-01-21T05:16:27Z","2019-01-14T05:13:39Z"
"","17696","[Boot] Can't use square brackets in YAML map  [SPR-13105]","**[Chris Pimlott](https://jira.spring.io/secure/ViewProfile.jspa?name=pimlottc)** opened **[SPR-13105](https://jira.spring.io/browse/SPR-13105?redirect=false)** and commented  I'm using a map defined in my application.yml but ran into an unexpected problem when trying to use keys that include square brackets [ ].  It seems like Spring Boot is trying to interpret them as named indices or something, and I can't figure out any way to quote or escape them so they are taken as strings.  For example, this map:  ``` myConfig:   myMap:     'x A y': 'apple'     'x B y': 'ball'     'x [C] y': '[cat]'     ""x [D] y"": ""[dog]""     ? ""x [E] y"": ""[eiffel tower]"" ```  Results in a map with these keys:  ``` x A y x B y x .C y x .D y {x .E ```    ---  **Attachments:** - [YamlPropertiesBracketKeyTest.java](https://jira.spring.io/secure/attachment/22898/YamlPropertiesBracketKeyTest.java) (_1.55 kB_)","closed","status: invalid,","spring-projects-issues","2015-06-08T15:17:38Z","2019-01-12T05:24:11Z"
"","17446","POST of Spring edit form on Tomcat 8 fails with 405 while on tomcat 7 works [SPR-12848]","**[Chris Korakidis](https://jira.spring.io/secure/ViewProfile.jspa?name=ckorakidis)** opened **[SPR-12848](https://jira.spring.io/browse/SPR-12848?redirect=false)** and commented  example end-point:  ``` @RequestMapping(value=""/edit/{id}"", method=RequestMethod.PUT) 	public ModelAndView edditingTeam(@ModelAttribute Team team, @PathVariable Integer id) {..} ```  Example jsp:  ```      ""> ..... ```  web.xml:  ```    HttpMethodFilter   org.springframework.web.filter.HiddenHttpMethodFilter     HttpMethodFilter   /*  ```  There's attached also the full poc  Works on tomcat 7.0.55 Fails on tomcat 8.0.0-RC5, 8.0.9, 8.0.11, 8.0.20   ---  **Affects:** 4.1.1  **Attachments:** - [405.png](https://jira.spring.io/secure/attachment/22715/405.png) (_91.15 kB_) - [spring.zip](https://jira.spring.io/secure/attachment/22718/spring.zip) (_59.02 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/8672ddde304464701e7d1add8159bb655c052650  1 votes, 4 watchers","closed","status: declined,","spring-projects-issues","2015-03-24T13:06:11Z","2019-01-12T16:23:29Z"
"","17775","Send BindingResult Errors in ResponseEntityExceptionHandler [SPR-13183]","**[Chris Bonham](https://jira.spring.io/secure/ViewProfile.jspa?name=bonhamcm)** opened **[SPR-13183](https://jira.spring.io/browse/SPR-13183?redirect=false)** and commented  I propose adding the `BindingResult` errors in the entity response for these `ResponseEntityExceptionHandler` methods:  * `handleBindException()` * `handleMethodArgumentNotValid()`  This will give the RESTful API caller more information when a 400 status is received.  ---  **Affects:** 4.2 RC2  **Issue Links:** - #17136 Provide a standard exception hierarchy  for REST end points","closed","type: enhancement,","spring-projects-issues","2015-07-01T13:50:54Z","2019-01-11T16:17:39Z"
"","17757","Spring MVC Test framework never stores more than one cookie [SPR-13166]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-13166](https://jira.spring.io/browse/SPR-13166?redirect=false)** and commented  #### Scenario  An HTTP response contains multiple `Set-Cookie` headers, e.g.:  ``` $ http head localhost:8080 HTTP/1.1 200 OK [...] Set-Cookie: JSESSIONID=58FA8366CB58657E4AD0AE50809D63CB; Path=/; HttpOnly Set-Cookie: XSRF-TOKEN=27d3cc6d-6d9f-4b50-9d3c-adb67e41639e; Path=/ ```  #### Problem  Spring MVC Test only stores the **last** cookie seen:  ```java http.perform(get(""/""))     .andDo(print())     .andExpect(status().isOk())     .andExpect(cookie().exists(""XSRF-TOKEN"")) // PASS     .andExpect(cookie().exists(""JSESSIONID"")) // FAIL ; ```  The output from the `print()` above tells the tale:  ``` MockHttpServletResponse:               Status = 200        Error message = null              Headers = {...}         Content type = null                 Body =         Forwarded URL = index.html       Redirected URL = null              Cookies = [javax.servlet.http.Cookie@3ccd3277] ```  Note that the `Cookies` array contains only a single entry, where it should have two. (and it would be nice by the way, if the cookie entries themselves were rendered in a friendlier way).  ---  **Affects:** 4.2 RC1  **Issue Links:** - #17760 Improve documentation on limitations of Spring MVC Test - #17759 Print cookies in human-readable form in Spring MVC Test","closed","status: declined,","spring-projects-issues","2015-06-25T22:34:10Z","2019-01-12T16:23:14Z"
"","17330","Collections returned from @EventListener methods should result in each element being published as an individual event [SPR-12733]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-12733](https://jira.spring.io/browse/SPR-12733?redirect=false)** and commented  ``` @EventListener public List handleFoo(FooEvent fooEvent) {     // handling a FooEvent results in the creation of zero or more BarEvents     return barEvents; }  @EventListnener public void handleBar(BarEvent barEvent) {     // ... } ```  - Where `barEvents` is null or empty, no event is published. - Where `barEvents` is non-empty and of size `n`, an event is published for each `BarEvent` element, resulting in `n` invocations of `#handleBar`.  This approach excludes (intentionally) treating a `Collection` returned from an `@EventListener` as a first-class event, for reasons of (a) reducing implementation complexit and (b) because there's not much reason to believe this is a use case anyone would want.  Should it become a desirable use case, support for binding collections as first-class events could be added (with some difficulty), but in the meantime, users always have a natural workaround: simply drop down to `@Autowiring` the `ApplicationEventPublisher` and calling `#publishEvent` manually. (Note that this approach does not solve the problem of erasure on its own, and users would only be able to match against the raw collection type, but that's again another issue, and not likely to be of importance to many users anyway).  The feature as suggested above should be, relatively speaking, quite straightforward to implement and should align well with the semantics that most users would expect.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/152a7b645f61a55f19882219c237a7cee09fd620","closed","type: enhancement,","spring-projects-issues","2015-02-19T02:48:56Z","2015-02-27T08:41:38Z"
"","17322","Objects returned from non-void @EventListener methods are not routed as expected [SPR-12725]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-12725](https://jira.spring.io/browse/SPR-12725?redirect=false)** and commented  Given the following `@Component` classes with `@EventListener` methods:  ``` @Component class FooListener {     @EventListener     public Bar handle(Foo foo) {         System.out.println(""Got foo: "" + foo);         return new Bar();     } }  @Component class BarListener {     @EventListener     public void handle(Bar bar) {         System.out.println(""Got bar: "" + bar);     } } ```  And a main method as follows:  ``` public static void main(String... args) {     ApplicationContext ctx = new AnnotationConfigApplicationContext(FooListener.class, BarListener.class);     ctx.publishEvent(new Foo()); } ```  The expected behavior is that the `FooListener` will handle the new `Foo`, print a message to the console, and return a new `Bar`. The new `Bar` is expected to be routed to the `BarListener` which is expected to handle it and print a message to the console.  The actual behavior is that the `FooListener` gets the new `Foo` event as expected, but the `Bar` that it returns never gets routed to the `BarListener`, i.e. no Bar-related message is ever printed to the console.  I'm working around this issue by `@Autowiring` the `ApplicationEventPublisher` into `FooListener` and manually publishing the new `Bar`, so it's not a showstopper, but it also doesn't work as advertised on the linked blog.  Note that when I ran into this, I was attempting to create an `@EventListener` method that accepted a parameter of type `List`, where another `@EventListener` in the system returned a `List","closed","in: core,","spring-projects-issues","2015-02-17T13:10:22Z","2019-01-11T21:28:25Z"
"","17286","ConcurrentModificationException thrown while iterating over bean definition names in DefaultListableBeanFactory#getBeansWithAnnotation(Class annotationType)  [SPR-12688]","**[Chip Killmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ckillmar)** opened **[SPR-12688](https://jira.spring.io/browse/SPR-12688?redirect=false)** and commented  During the creation of one of our beans, we call `getBeansWithAnnotation(Class annotationType)` to get a map of lazy-loaded annotated beans.  This method instantiates these annotated beans using `getBean(String beanName)`.  In our configuration, we're dynamically registering Spring beans using a post processor bean.  The post processor bean receives a callback whenever one of these annotated beans is created, and dynamically registers new bean definitions.  The problem is that dynamic registration modifies `List beanDefinitionNames` while Spring is iterating over it, causing a `java.util.ConcurrentModificationException` to be thrown:  ``` Caused by: java.util.ConcurrentModificationException 	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901) 	at java.util.ArrayList$Itr.next(ArrayList.java:851) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansWithAnnotation(DefaultListableBeanFactory.java:566) 	at com.homeaway.TestConfiguration.testBean(TestConfiguration.java:43) 	at com.homeaway.TestConfiguration$$EnhancerBySpringCGLIB$$c0d0df0c.CGLIB$testBean$0() 	at com.homeaway.TestConfiguration$$EnhancerBySpringCGLIB$$c0d0df0c$$FastClassBySpringCGLIB$$7a010a97.invoke() 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:309) 	at com.homeaway.TestConfiguration$$EnhancerBySpringCGLIB$$c0d0df0c.testBean() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:483) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) 	... 36 more ```  Spring 3.2.2.RELEASE doesn't exhibit the same behavior because it creates a local set of bean names and iterates over that:  ```java    // 3.2.2.RELEASE, DefaultListableBeanFactory.java    public Map getBeansWithAnnotation(Class annotationType) {      Set beanNames = new LinkedHashSet(getBeanDefinitionCount());      beanNames.addAll(Arrays.asList(getBeanDefinitionNames()));      beanNames.addAll(Arrays.asList(getSingletonNames()));      Map results = new LinkedHashMap();      for (String beanName : beanNames) {           if (findAnnotationOnBean(beanName, annotationType) != null) {                results.put(beanName, getBean(beanName));           }      }      return results; } ```  ```java    // 4.1.4.RELEASE, DefaultListableBeanFactory.java @Override public Map getBeansWithAnnotation(Class annotationType) {      Map results = new LinkedHashMap();      for (String beanName : this.beanDefinitionNames) {           BeanDefinition beanDefinition = getBeanDefinition(beanName);           if (!beanDefinition.isAbstract() && findAnnotationOnBean(beanName, annotationType) != null) {                results.put(beanName, getBean(beanName));           }      }      for (String beanName : this.manualSingletonNames) {           if (!results.containsKey(beanName) && findAnnotationOnBean(beanName, annotationType) != null) {                results.put(beanName, getBean(beanName));           }      }      return results; } ```  As a workaround for Spring 4.1.4.RELEASE, I've implemented a separate version of `getBeansWithAnnotation(Class annotationType` as a custom method outside of Spring using the logic in 3.2.2.RELEASE.  I've attached an isolated test configuration and unit test that demonstrates the problem.  ---  **Affects:** 4.1.4  **Attachments:** - [spr-12688.tar.gz](https://jira.spring.io/secure/attachment/22647/spr-12688.tar.gz) (_2.52 kB_)  **Issue Links:** - #17012 DefaultListableBeanFactory should allow efficient access to current bean names - #18071 ConcurrentModificationException when executing AutowireCapableBeanFactory.createBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/918bc3b1032d1cf7024f74a641d3d94e145189c7, https://github.com/spring-projects/spring-framework/commit/6c47b5f5d31a112a146002174955d5b377de61b8","closed","in: core,","spring-projects-issues","2015-02-04T10:30:27Z","2019-01-11T18:40:59Z"
"","17932","Creating Multiple Beans with Java Configuration [SPR-13348]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-13348](https://jira.spring.io/browse/SPR-13348?redirect=false)** and commented  It would be great to have `@Beans` annotation along with `@Bean`.  My use case: Generating Datasources from YAML file of Spring Boot. I have declared multiple datasources in my YAML file and would like to create multiple beans with it. `org.springframework.context.annotation.ImportBeanDefinitionRegistrar` is cumbersome and I believe that `@Beans` would be complementary to `@Bean`   ---  **Affects:** 4.2 GA  2 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-08-12T23:43:19Z","2019-01-12T00:16:19Z"
"","17617","Improve ImportBeanDefinitionRegistrar for Generic Injection  [SPR-13026]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-13026](https://jira.spring.io/browse/SPR-13026?redirect=false)** and commented  Dear Juergen,  Since release of Spring 4.0, Spring supports java generic injection [1]. I came across a case that I could not find a solution. I would like to create a service with generic types programatically. Let me to give an example:  ###### Library  ```java interface Animal{}  interface GenericAnimalRepository {     A getAnimal(Class clazz, int animalId); }   interface AnimalService {    A getAnimal(int animalId); }  @Service class AnimalServiceImpl implements AnimalService {     private Class clazz;     GenericAnimalRepository animalRepository;     public AnimalServiceImpl(Class clazz, GenericAnimalRepository animalRepository) {       this.clazz = clazz;       this.animalRepository = animalRepository;    }     @Override    public A getAnimal(int animalId) {       return animalRepository.getAnimal(clazz, animalId);    }     }  ```  ###### Client  ```  class Dog implements Animal{}  class Cat implements Animal{}  ```  Here I would like to create both AnimalService\ and AnimalService\. However my library does not aware of Animal implementations directly. At runtime It can access them as an Animal subclass but at compile time it does not aware of them. Generic Injection with Spring 4 is using GenericTypeResolver which is based on reflection. What I would like to create is that A BeanDefinition with custom Generic Types. I would like to build my BeanDefinitionBuilder with Dog or Cat and expecting correctly to be injected into my beans as this:  ``` @Service class MyService{          @Autowired      AnimalService dogService;       @Autowired      AnimalService catService;      }   ```  What I am considering currently is that improving generic injection to support custom provided generic types. Hope that I am clear.  [1]: https://spring.io/blog/2013/12/03/spring-framework-4-0-and-java-generics    ---  **Affects:** 4.1.6","closed","status: bulk-closed,","spring-projects-issues","2015-05-14T00:02:48Z","2019-01-12T00:16:33Z"
"","17589","Support JDK8 Optional MethodArgumentResolver and HandlerMethodReturnValueHandler [SPR-12997]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-12997](https://jira.spring.io/browse/SPR-12997?redirect=false)** and commented  I think that it would be nice to have OptionalMethodArgumentResolver and OptionalHandlerMethodReturnValueHandler. This would be ideal and complementary to Optional injection which is already addressed before.   --- No further details from [SPR-12997](https://jira.spring.io/browse/SPR-12997?redirect=false)","closed","type: enhancement,","spring-projects-issues","2015-05-08T01:44:21Z","2015-05-22T05:25:32Z"
"","17558","Improve RequestAttributes and RequestContextHolder [SPR-12966]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-12966](https://jira.spring.io/browse/SPR-12966?redirect=false)** and commented  As far as I known there is two direct subclass of RequestAttributes, Portlet and Servlet implementations. Both of them have getRequest and getResponse methods. It would be handy to add these methods to RequestAttributes. As a result I would like to improve  ``` ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes(); HttpServletResponse response = requestAttributes.getResponse(); ```  to  ``` HttpServletResponse response = RequestContextHolder.currentRequestAttributes().getResponse(); ```  This can be even improved to this by introducing these methods to RequestContextHolder and using generics:  ``` HttpServletResponse response = RequestContextHolder.getResponse(); ```    --- No further details from [SPR-12966](https://jira.spring.io/browse/SPR-12966?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-04-29T23:36:57Z","2019-01-12T00:16:45Z"
"","17415","Provide an option for trailing slash for AbstractUrlHandlerMapping like RequestMappingHandlerMapping [SPR-12818]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-12818](https://jira.spring.io/browse/SPR-12818?redirect=false)** and commented  RequestMappingHandlerMapping has useTrailingSlashMatch option and it is quite useful. I am using SimpleUrlHandlerMapping and would like to see an option to use or not trailing slash.   ---  **Affects:** 4.1.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c172d9d745c30c90dbba416cb15b38b7e9b54fb3","closed","type: enhancement,","spring-projects-issues","2015-03-14T16:58:45Z","2015-05-26T01:15:33Z"
"","17412","Improve ContentCachingRequestWrapper [SPR-12815]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-12815](https://jira.spring.io/browse/SPR-12815?redirect=false)** and commented  I have an issue with reading inputstream from request multiple times. Before trying an implementation, I have searched in Spring and came across ContentCachingRequestWrapper. This is a nice utility but requires you to have an instance of ContentCachingRequestWrapper to use it as this:  ``` ContentCachingRequestWrapper wrapper = (ContentCachingRequestWrapper) request; byte[] buf = wrapper.getContentAsByteArray(); ```  This is pretty much limiting because servlet filters are usually wrapping requests into another request instance to provide additional capabilities. I can access this content if only I have an instance of this filter.  It would be great If this behaviour can be changed to provide a new inputstream with cached data.  I have questioned myself why It was not implemented like this in the first place but really could not find a reason.  Shortly, please improve getInputStream and getReader methods to provide cached content in case a consumed stream. Thus we do not need to consider whether request is an instance of ContentCachingRequestWrapper or not.  ---  **Affects:** 4.1.5  **Issue Links:** - #17407 Not reusable input stream in ContentCachingRequestWrapper  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-03-13T01:25:50Z","2019-01-11T21:39:56Z"
"","17223","Provide reusable parts of Cache implementation for others [SPR-12622]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-12622](https://jira.spring.io/browse/SPR-12622?redirect=false)** and commented  This issue is a complementary issue to #16245.  It seems that preliminary implementation of Annotation-based Event Listeners is sharing a great amount of code with Cache part of Spring. In our projects we  had to duplicated necessary parts as Stéphane Nicoll has done.  My use cases:  1. My first use case was about `@Audit`. We wanted to track necessary actions in some controllers for audit trailing. It can access parameters, request, response etc... as in done Cache annotations.  2. My second use case was relatively simple to first one. We wanted to declaratively to track some product views, clicks etc... We created another annotation, `@Track`. It was also creating a context to access context parameters.  I would be glad to if necessary changes will be provided by means of #16245.  ---  **Affects:** 4.1.4  **Issue Links:** - #16245 ApplicationListener-like annotation for consuming application events  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c7b324b89b6d0d0f000f0619f22fcfca21cf03c6","closed","type: enhancement,","spring-projects-issues","2015-01-13T07:22:01Z","2019-01-11T19:05:22Z"
"","17941","MVC default components are sometimes registered twice [SPR-13357]","**[Cedomir Igaly](https://jira.spring.io/secure/ViewProfile.jspa?name=cigaly)** opened **[SPR-13357](https://jira.spring.io/browse/SPR-13357?redirect=false)** and commented  Whne configuring with java configuration and mvc XML namespace, default components (BeanNameUrlHandlerMapping, SimpleControllerHandlerAdapter and HttpRequestHandlerAdapter) are registered twice with different bean names. Once in MvcNamespaceUtils, second time in WebMvcConfigurationSupport.  If this is not intentional, bean names in MvcNamespaceUtils should be changed to match those in WebMvcConfigurationSupport.   ---  **Affects:** 4.2 GA","closed","type: enhancement,","spring-projects-issues","2015-08-17T06:04:56Z","2015-08-19T20:10:31Z"
"","17967","IE9 with SockJS and HTTPS throws ""SEC7111: HTTPS security is compromised by"" [SPR-13386]","**[Cecchinato Bastien](https://jira.spring.io/secure/ViewProfile.jspa?name=zebasto)** opened **[SPR-13386](https://jira.spring.io/browse/SPR-13386?redirect=false)** and commented  Hi !  I'm facing an issue with IE9 fallback for SockJS. When the page /htmlfile/?c= is loaded, IE9 throws the following error (in the console): SEC7111: HTTPS security is compromised.  My website is accessible only via HTTPS. After some digging, it seems that there is some mixed content, but I've been unable to find what content can be mixed.  The configuration class is the following :  ```java @Slf4j @Configuration @EnableWebSocket @EnableScheduling public class WebSocketConfig implements WebSocketConfigurer {     @Override     public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {         registry                 .addHandler(delegateSocketHandler(), ""/mvc/socket"", ""/mvc/socket/**"")                 .setAllowedOrigins(""*"")                 .withSockJS();     }      @Bean     public WebSocketHandler delegateSocketHandler() {         return new DelegateSocketHandler();     } } ```  I've also attached a network capture, if this can help.  Thanks in advance.  Regards,   ---  **Affects:** 4.1.6  **Attachments:** - [network.xml](https://jira.spring.io/secure/attachment/22990/network.xml) (_3.49 MB_) - [websocket.png](https://jira.spring.io/secure/attachment/22999/websocket.png) (_82.31 kB_)","closed","in: web,","spring-projects-issues","2015-08-24T01:25:15Z","2019-01-11T18:18:49Z"
"","17861","Multiple requests with SockJS provides 404 error [SPR-13270]","**[Cecchinato Bastien](https://jira.spring.io/secure/ViewProfile.jspa?name=zebasto)** opened **[SPR-13270](https://jira.spring.io/browse/SPR-13270?redirect=false)** and commented  Hi there !  I'm using SockJS with ember-cli (using the following module https://github.com/kenobifoundation/ember-cli-sockjs) and I'm getting a bug on IE10 when sending messages throw the ""simulated"" websocket.  My JS code is :  ```js _onSocketOpen: function() {     Ember.Logger.info(""Socket vers le serveur ouverte"");     if (this.get('hasContactAccess')) {       this._subscribeToTopic('contact-request/count');     }      if (this.get('hasFundAppAccess')) {       this._subscribeToTopic('funding-application/count');     }   },    _subscribeToTopic: function(topicName) {     Ember.Logger.info(""Sourscription au topic "" + topicName);     this.get('socket').send('SUBSCRIBE:' + topicName + ':' + this.get('token'));   }, ```  I'm not using STOMP as messaging protocol (but it is much alike as we do). When the first subscription is made, then the response is 204. But on the second subscription, the servers responds 404 no matter the request.  My config is the following :  ```java @Configuration @EnableWebSocket @EnableScheduling public class WebSocketConfig implements WebSocketConfigurer {     @Override     public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {         registry                 .addHandler(delegateSocketHandler(), ""/socket"", ""/socket/**"")                 .setAllowedOrigins(""*"")                 .withSockJS();     }      @Bean     public WebSocketHandler delegateSocketHandler() {         return new DelegateSocketHandler();     } } ```  And the DelegateSocketHandler is :  ```java  @Slf4j public class DelegateSocketHandler extends TextWebSocketHandler {      /**      * Pattern définissant la méthode avec laquelle on va souscrire ou désouscrire à un ""topic""      * La commande doit prendre la forme suivante :      *       *     SUBSCRIBE:topic-name/type:token-oauth      *     UNSUBSCRIBE:topic-name/type:token-oauth      *       */     private static final Pattern COMMAND = Pattern.compile(""(SUBSCRIBE|UNSUBSCRIBE):([a-z-]+/[a-z-]+):([0-9a-f-]+)"");      @Inject     private List socketHandlers;      @Inject     private ObjectMapper objectMapper;      @Inject     private TokenStore tokenStore;      /**      * Cette map permet de stocker la liste des indicateurs sur lequels une websocket à souscrit      */     private Map> webSocketSessionMap = new ConcurrentHashMap<>();      /**      * Implémentation du handler de requête entrante sur la WebSocket ouverte par le client      *      * @param session      *            La session WebSocket créée par Spring      * @param message      *            Le message entrant qui doit être de la forme SUBSCRIBE:topic-name/type:token-oauth      */     @Override     public final void handleTextMessage(WebSocketSession session, TextMessage message) {         log.debug(""Réception d'une requête WebSocket sur la session {} et le message {}"", session, message.getPayload());         Matcher matcher = COMMAND.matcher(message.getPayload());         Assert.isTrue(matcher.matches());          SocketAction action = SocketAction.valueOf(matcher.group(1));         String topicName = matcher.group(2);         String token = matcher.group(3);          OAuth2Authentication authentication = tokenStore.readAuthentication(token);          Assert.notNull(authentication);         Assert.isTrue(socketHandlers.stream().anyMatch(handler -> handler.getTopicName().equals(topicName)));          SecurityContextHolder.getContext().setAuthentication(authentication);         if (session.getPrincipal() == null) {             injectPrincipal(session, authentication);         }         handleRequest(session, action, topicName);     }      // Some code here but not relevant for my problem. } ```  I don't get why the second call gets a 404. Is it normal because of a specific design when the fallback is used ? I've attached the IE10 network capture so you can have a look.  Thanks in advance.  Regards,   ---  **Affects:** 4.1.6  **Attachments:** - [NetworkData.xml](https://jira.spring.io/secure/attachment/22957/NetworkData.xml) (_3.11 MB_)","closed","in: web,","spring-projects-issues","2015-07-24T01:52:48Z","2019-01-11T18:02:27Z"
"","17379","ContextRefreshedEvent thrown twice when servlet is not attached to the root applicationContext [SPR-12781]","**[Cecchinato Bastien](https://jira.spring.io/secure/ViewProfile.jspa?name=zebasto)** opened **[SPR-12781](https://jira.spring.io/browse/SPR-12781?redirect=false)** and commented  Hi !  I'm facing an issue which is blocking me on a developement point. I'm using a listener that catches the event ContextRefreshedEvent, and executes some code after. This works like a charm when there is one application context.  However, when declaring a servlet like this :  ```xml  		contextConfigLocation 		 			/WEB-INF/applicationContext.xml 			/WEB-INF/security-config.xml 			/WEB-INF/cache-config.xml 		 	 	 		org.springframework.web.context.ContextLoaderListener 	 	 	 		dispatcherServlet 		org.springframework.web.servlet.DispatcherServlet 		 			contextConfigLocation 			/WEB-INF/ebook-servlet.xml 		 		1 		true 	 	 	 		dispatcherServlet 		/ 	 ```  This registers a root context loading the following files : - /WEB-INF/applicationContext.xml - /WEB-INF/security-config.xml - /WEB-INF/cache-config.xml  And a sub context loading the following file : - /WEB-INF/ebook-servlet.xml  Causing to fire twice the event ContextRefreshedEvent. My question is, how can I catch only the last event, as I need to execute my method after that all beans are loaded ?  Thanks in advance for your help.  Regards, Bastien Cecchinato   ---  **Affects:** 4.1.5  **Reference URL:** https://github.com/ricoyu/ebook-lover/blob/master/ebook-lover/src/main/webapp/WEB-INF/web.xml","closed","in: core,","spring-projects-issues","2015-03-04T06:13:44Z","2015-03-04T07:45:35Z"
"","17862","@MessageMapping with placeholders [SPR-13271]","**[Carlos Rivas](https://jira.spring.io/secure/ViewProfile.jspa?name=crm86)** opened **[SPR-13271](https://jira.spring.io/browse/SPR-13271?redirect=false)** and commented  I am working with Spring-websocket and I have the following problem:  ```java @RequestMapping(value= ""${myProperty}"") @MessageMapping(""${myProperty}"") -> If I use this placeholder, the URL is null.  ```  I am trying to put a placeholder within a `@MessageMapping` annotation in order to obtain the url from properties. I have managed to make it work with `@RequestMapping` but not with `@MessageMapping`.  I would like to indicate the URL using properties, that is ${myProperty} indicates the complete URL  ---  **Affects:** 4.1.6, 4.1.7, 4.1.8  **Reference URL:** http://stackoverflow.com/questions/31185321/messagemapping-with-placeholders  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4b4efa9f6e45460438186927397bbaba343f3185","closed","type: enhancement,","spring-projects-issues","2015-07-24T03:30:18Z","2019-01-13T20:53:31Z"
"","17521","Regression: DLL handled as classpath resource [SPR-12928]","**[Carlo Luib-Finetti](https://jira.spring.io/secure/ViewProfile.jspa?name=carlo.lf)** opened **[SPR-12928](https://jira.spring.io/browse/SPR-12928?redirect=false)** and commented  After migrating our Eclipse-based RCP-Client from Spring 2.5.6 (!) to the latest release 4.1.6 we met this strange error:  ``` java.util.zip.ZipException: Exception in opening zip file: D:\uvdms\client\configuration\org.eclipse.osgi\bundles\101\1\.cp\lib\jacob-1.17-x86.dll ```  This jacob DLL comes into play as an entry in the MANIFEST.MF of one of out jars; it looks as this:  ``` Bundle-NativeCode: lib/jacob-1.17-x86.dll ```  It seems that Spring treets it as classpath Jar, and the classloader tries to open it as Zip file.  ---  **Affects:** 4.1.6  **Issue Links:** - #16711 PathMatchingResourcePatternResolver cannot search for ""classpath*"" patterns in a jar file roots - #10961 PathMatchingResourcePatternResolver should close jar file from JarURLConnection if not cached  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6a7aab02aa0a47811839364c9598b46c156f8b78, https://github.com/spring-projects/spring-framework/commit/49f3046f6637030743a1560f37245cd0dffc95a5","closed","in: core,","spring-projects-issues","2015-04-17T04:31:25Z","2019-01-11T21:08:54Z"
"","17965","[doc] Document use of @Transactional on controller via @MessageMapping [SPR-13384]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-13384](https://jira.spring.io/browse/SPR-13384?redirect=false)** and commented  The actual cause is a  little speculative (I can't imagine any reason other than the default would cause it), but I have a controller that works as expected until I implement this interace.  ```java package com.xenoterracide.util;  import org.slf4j.Logger; import org.slf4j.LoggerFactory;  public interface Loggable {     default Logger log() {         return LoggerFactory.getLogger( this.getClass() );     } } ```  Here's my controller; I realize it's a bit verbose for a test, but as soon as I removed `Loggable` everything started working.  ```java package com.xenoterracide.mmp.musicdb.controller.message;  import com.xenoterracide.mmp.domain.music.Seeder; import com.xenoterracide.mmp.domain.repository.SeederRepository; import com.xenoterracide.mmp.domain.repository.StationRepository; import com.xenoterracide.mmp.domain.station.Seed; import com.xenoterracide.mmp.domain.station.Station; import com.xenoterracide.mmp.domain.station.exception.SeedNotFoundException; import org.springframework.context.ApplicationContext; import org.springframework.messaging.handler.annotation.MessageExceptionHandler; import org.springframework.messaging.handler.annotation.MessageMapping; import org.springframework.messaging.handler.annotation.SendTo; import org.springframework.stereotype.Controller; import org.springframework.transaction.annotation.Transactional; import org.springframework.validation.annotation.Validated;  import javax.inject.Inject; import java.util.Optional;  @Controller @MessageMapping( ""/stations"" ) public class StationMessageController {      private final ApplicationContext context;     private final StationRepository repository;      @Inject     StationMessageController( final ApplicationContext context, final StationRepository repository ) {         this.context = context;         this.repository = repository;     }      @Transactional     @MessageMapping( ""/create"" )     @SendTo( ""/topic/stations/created"" )     public Station createStation( @Validated final Seed seed ) throws SeedNotFoundException {         SeederRepository seederRepository = context.getBean( seed.getType().getRepositoryClass() );         Optional optionalEntity = seederRepository.findOneById( seed.getSeederId() );          Station station = optionalEntity.map( Station::new ).orElseThrow( () -> new SeedNotFoundException( seed ) );          return repository.save( station );     }      @SendTo( ""/topic/stations/seed-not-found"" )     @MessageExceptionHandler( SeedNotFoundException.class )     public Seed notFound( final SeedNotFoundException e ) {         return e.getSeed();     }  } ```  By not working I mean that the controller methods are not called when broadcast to websockets: they seem to be ignored completely.   ---  **Affects:** 4.1.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4ecb3d4f3fcfe7f753b542cae6f94b4ca8fb48f1","closed","in: web,","spring-projects-issues","2015-08-23T18:23:36Z","2015-09-01T11:38:23Z"
"","17708","Document use of Provider interface at injection point [SPR-13117]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-13117](https://jira.spring.io/browse/SPR-13117?redirect=false)** and commented  Let's say I define a bean  ``` @Bean @Scope( ""request"" ) static Foo myFoo() { ... ```  and have another  ``` @Service public class MySingletonService { ... ```  that needs the request scoped instance of foo across multiple methods.  what I'd like to be able to write is something like this  ``` @Autowired Provider fooProvider;  public void myUsesFoo() {      Foo foo = fooProvider.get();      ... } ```  to do this currently I am Autowiring ApplicationContext and calling getBean(...).  I would like to wire something less flexible and have it work in a ""magic"" way. meaning I don't write the provider I just request one. I would also like implementing the provider to be easy for unit test purposes.  as a Note: I'd be ok if Provider was a new interface, or perhaps I could just request any Bean wrapped with Optional or ThreadLocal (or something I haven't thought of).  ---  **Issue Links:** - #12515 Provide better documentation for support of JSR-330 (`@Inject`) (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a13a1eb1f17579954b784618f52664a72df494b6","closed","type: task,","spring-projects-issues","2015-06-12T06:28:14Z","2019-01-13T05:40:37Z"
"","17676","Transaction Scope [SPR-13085]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-13085](https://jira.spring.io/browse/SPR-13085?redirect=false)** and commented  It would be nice to have a scope that was aware of transactions (in the way that request is aware of http) so that beans could be cleared at the end of a transaction.  I currently have need of creating a bean that only lasts for the transaction, if a new transaction exists I need a new bean.  I know I can write this myself (and will have to) but it'd be nice and would seem obvious that spring-tx could facilitate this scope.   --- No further details from [SPR-13085](https://jira.spring.io/browse/SPR-13085?redirect=false)","closed","type: enhancement,","spring-projects-issues","2015-05-29T19:12:08Z","2015-06-30T15:26:23Z"
"","17454","create a Util method for instantiating a class with parameters [SPR-12856]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-12856](https://jira.spring.io/browse/SPR-12856?redirect=false)** and commented  here's my problem, I don't want to catch the ""get*Constructor"" NoSuchMethodExists exception, because that means a coder error and is actually unrecoverable in my scenario.  Right now I can write this, which is a mix of Apache Utils and Spring Utils  ```java 			Constructor constructor = ConstructorUtils.getMatchingAccessibleConstructor( 					componentClass, 					category.getClass(), 					dto.getClass() );  			return BeanUtils.instantiateClass(constructor, category, dto ); ```  I'm think we could have either these 2 methods  ```java static  T instantiateClass(Constructor ctor, Object... args) throws BeanInstantiationException static  Constructor getConstructor(Class clazz, Clazz... args) throws BeanInstantiationException // maybe different exception ```  and maybe this method, or maybe just this as the added method  ```java static  T instantiateClass(Class clazz, Object... args) throws BeanInstantiationException ```  since it would be easy to match the constructor based on the args.   --- No further details from [SPR-12856](https://jira.spring.io/browse/SPR-12856?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-03-27T09:41:35Z","2019-01-12T00:17:39Z"
"","17189","Make StopWatch more DWIM [SPR-12588]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-12588](https://jira.spring.io/browse/SPR-12588?redirect=false)** and commented  prefix, I think we're using Spring 3.2, so it's possible this changed in Spring 4 haven't tested.  I find it incredibly frustrating to have a stopwatch that would do  stopwatch.stop()  // Exception not running stopwatch.start() stopwatch.start() // Exception already running stopwatch.prettyPrint() // behavior undefined while running  this is not how a hardware stopwatch would behave. a hardware stopwatch would do nothing on stop if it's already stopped. due to having an accrual of times I would suggest that telling it to start again would stop it and start recording the next time. I have made the following subclass for our application to demonstrate how I think it should behave. I could probably work up a patch, but will wait because I'm not sure the behavior would be accepted. I also understand that it might have to wait until the probably theoretical Spring 5.  ```java package com.myapp;  import org.springframework.util.StopWatch;  public class MyAppStopWatch extends StopWatch { 	public MyAppStopWatch( final Object o ) { 		super( o.getClass().getSimpleName() ); 	}  	@Override 	public void start( final String taskName ) throws IllegalStateException { 		this.stop(); 		super.start( taskName ); 	}  	@Override 	public void stop() throws IllegalStateException { 		if ( this.isRunning() ) 		{ 			super.stop(); 		} 	}  	@Override 	public String prettyPrint() { 		this.stop(); 		return super.prettyPrint(); 	} } ```    --- No further details from [SPR-12588](https://jira.spring.io/browse/SPR-12588?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2014-12-31T08:43:33Z","2019-01-12T03:30:31Z"
"","17541","Generics support improvement for core.convert.support.GenericConversionService [SPR-12948]","**[Byron Ellacott](https://jira.spring.io/secure/ViewProfile.jspa?name=bje)** opened **[SPR-12948](https://jira.spring.io/browse/SPR-12948?redirect=false)** and commented  The type signature for `addConverter` would be more convenient for Java 8 lambda syntax sugar if the types were connected:  ```java public  void addConverter(Class sourceType, Class targetType, Converter converter) { ```  This would allow, eg:  ```java         import java.time.Period;          foo.addConverter(String.class, Period.class, Period::parse) ```  The current signature means the type of the third argument cannot be inferred by the compiler, so lambdas must be explicit:  ```java foo.addConverter(String.class, Period.class, (String s) -> Period.parse(s)); ```  Note that even in this form, the lambda argument must be explicitly typed.   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java#L106  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8a691590041eb8295d48f27e84e0e08a160a711e","closed","type: enhancement,","spring-projects-issues","2015-04-22T17:52:52Z","2016-04-06T08:38:15Z"
"","17836","Validator.validate method that calls nested class validate() gets wrong object in childs error.entity validation [SPR-13245]","**[Bruce Edge](https://jira.spring.io/secure/ViewProfile.jspa?name=bedge42)** opened **[SPR-13245](https://jira.spring.io/browse/SPR-13245?redirect=false)** and commented  I'm implementing a Validator for a class with a nested array of children objects and the child validator is failing because the context in which the child validator runs contains the parent's reference in the Error.entity instead of the child's.  I'm following the docs here: http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html  My data model, a parent Collection object with a child Collectionitem list.  ```java public class Collection {     private String name;     private List items; }  public class CollectionItem {    private String title; } ```  My Collection parent and CollectionItem child validators:  ```java @Component public class CollectionValidator implements Validator {  	@Override 	public boolean supports(Class clazz) { 		return Collection.class.equals(clazz); 	}         // DI for nested object validator        @Autowired CollectionItemValidator collectionItemValidator;          @Override 	public void validate(Object obj, Errors errors) { 		ValidationUtils.rejectIfEmpty(errors, ""name"", ""empty"", ""missing""); 		try {                        errors.pushNestedPath(""items""); 			for(CollectionItem collectionItem : collection.getItems()) {  // Validate each Collectionitem object 				ValidationUtils.invokeValidator(collectionItemValidator, collectionItem, errors); 			} 		} 		finally { 			errors.popNestedPath(); 		} 	} }  @Component public class CollectionItemValidator implements Validator { 	@Override 	public boolean supports(Class clazz) { 		return CollectionItem.class.equals(clazz); 	} 	@Override 	public void validate(Object obj, Errors e) {                          // The Error e.entity here has the wrong (parent) object in it when called from                 // ValidationUtils.invokeValidator(collectionItemValidator, collectionItem, errors);                // Therefore ""title"" is never found, as the parent Collection object does not have a ""title"" field. 		ValidationUtils.rejectIfEmpty(e, ""title"", ""empty"", ""missing"") 	} } ```  The problem is that when the child items array is validated and CollectionItemValidator.validate() is called for each ColectionItem by ValidationUtils.invokeValidator(collectionItemValidator...) , the Error e.entity passed into the child validator is a still the parent Collection, not the child CollectionItem object, so the check for a ""title"" field always fails because ValidationUtils.rejectIfEmpty is looking at the parent rather than the child object in the errors.getFieldValue(field);:  ```java 	public static void rejectIfEmpty( 			Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage) { 		Object value = errors.getFieldValue(field); .... ```  is using the parent Collection object in the errors.getFieldValue(), so it never finds the field as only the child has a ""title"" field, the parent does not.  Note that the ValidationUtils  ```java 	public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) {  ```  has the right obj in the args, the problem is that the errors.entity is never updated to point to the child element.   ---  **Affects:** 4.2 RC2  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-07-16T16:09:20Z","2019-01-12T02:26:54Z"
"","17859","Allow @JsonView to be used on meta-annotations on Rest methods [SPR-13268]","**[Bruce Brouwer](https://jira.spring.io/secure/ViewProfile.jspa?name=bruce.brouwer)** opened **[SPR-13268](https://jira.spring.io/browse/SPR-13268?redirect=false)** and commented  `JsonViewResponseBodyAdvice` should use Spring's meta-annotation support for determining the serialization view class to be used.  Having this would allow me to create my own `@View` annotation that could be used on my REST methods.  ``` @Target({ ElementType.FIELD, ElementType.METHOD, ElementType.TYPE, ElementType.PARAMETER }) @Retention(RetentionPolicy.RUNTIME) @JsonView public @Interface View {   Class value();    public interface Summary {}   public interface Detail {} }  @RestController public class MyController {    @RequestMapping(""/myResources"")   @View(View.Summary.class)   public List list() {      // return stuff   } } ```  Right now it seems to be finding the `@JsonView` annotation, but it doesn't apply the value to it, leaving it empty which causes an `IllegalArgumentException`.  Also notice that `@JsonView` takes a `Class[]` array for the value, while I would like my `@View` to take a single `Class` value. It would be good if `JsonViewResponseBodyAdvice` was flexible enough to allow for this mismatch. I did try making my `@View`'s value defined as a `Class[]` array, but it still did not work.  ---  **Affects:** 4.1.5  **Issue Links:** - #11815 Integrate Jackson `@JsonView` - #17106 Jackson `@JsonView` deserialization support for request bodies","closed","status: bulk-closed,","spring-projects-issues","2015-07-22T08:15:35Z","2019-01-13T05:39:35Z"
"","17279","No Response Body when using custom HttpMessageConverter with @ResponseBody annotated Controller Advice method [SPR-12680]","**[Brian May](https://jira.spring.io/secure/ViewProfile.jspa?name=brian.may)** opened **[SPR-12680](https://jira.spring.io/browse/SPR-12680?redirect=false)** and commented  I have a controller advice method which is annotated with `@ResponseBody`. I have also defined an HttpMessageConverter supporting the returned type and text/csv, application/csv content types. I have confirmed that the message converter writeInternal method is being invoked, but writing to the stream from HttpOutputMessage.getBody() does not produce anything in the response body.  Returning the same object from a rest controller produces the expected response body.   ---  **Affects:** 4.1.4  **Reference URL:** http://stackoverflow.com/questions/28237983/no-response-body-with-httpmessageconverter-invoked-by-controlleradvice/28262535#28262535","closed","status: invalid,","spring-projects-issues","2015-02-01T04:25:46Z","2019-01-12T05:24:46Z"
"","17964","Create new annotation to set ""Link"" HTTP header for resource hints [SPR-13383]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13383](https://jira.spring.io/browse/SPR-13383?redirect=false)** and commented  The new [Resource Hints](http://w3c.github.io/resource-hints/) spec is still a W3C draft but is already [partially implemented in popular browsers](https://www.chromestatus.com/features#resource hints).  A new Controller/handler level annotation could help applications leverage this feature, even when the handler response is not a `ResponseEntity` return type (indeed, in this case, `ResponseEntity` already has builder methods for leveraging HTTP response headers).  The following code:  ```java @Controller public class MyController {    @RequestMapping(""/home"")   @Link(url=""https://example.com"", rel=""preconnect"")   public String home() {     //...     return ""home"";   } } ```  would result in an additional HTTP header in the handler response:  ``` Link: ; rel=preconnect ```  ---  **Affects:** 4.2 GA  **Reference URL:** http://w3c.github.io/resource-hints/  **Issue Links:** - #14179 Annotation that can control the HTTP response headers","closed","type: enhancement,","spring-projects-issues","2015-08-23T05:24:35Z","2019-01-11T18:18:47Z"
"","17963","VersionResourceResolver should add ETag headers when resolving resources [SPR-13382]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13382](https://jira.spring.io/browse/SPR-13382?redirect=false)** and commented  `VersionStrategy` and `VersionResourceResolver` can resolve resources using version strings. Those resources are then served without using this version information to set the `ETag` header.  The `VersionResourceResolver` should by default add this header value as this is valuable for HTTP clients. It should also provide an optional configuration setting to disable that behavior.  ---  **Affects:** 4.2 GA  **Issue Links:** - #18390 Preserve HTTP headers when caching resources in CachingResourceResolver  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/190eb6ace1acc03e2805dd25f16bc2359195821e","closed","type: enhancement,","spring-projects-issues","2015-08-23T05:10:00Z","2019-01-11T18:18:39Z"
"","17960","Quote if necessary Etags set with ResponseEntity builder API [SPR-13378]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13378](https://jira.spring.io/browse/SPR-13378?redirect=false)** and commented  Using `ResponseEntity`'s builder API like the following throws an `IllegalArgumentException` because the ETag is not quoted `""foo""` nor a weak ETag `W/""foo""`:  ```java ResponseEntity responseEntity = ResponseEntity.ok().eTag(""foo"").build(); ```    ---  **Affects:** 4.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/88405be8a5953e6541a3821fdeace125492f3764","closed","type: enhancement,","spring-projects-issues","2015-08-22T06:27:20Z","2015-09-01T11:38:23Z"
"","17854","Add a new ResultMatcher for date formats in HTTP headers [SPR-13263]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13263](https://jira.spring.io/browse/SPR-13263?redirect=false)** and commented  HTTP headers such as `""Expires""`, `""Last-Modified""` all use date strings like `""Tue, 21 Jul 2015 10:00:00 GMT""`.  A new `ResultMatcher` should be useful to test those date headers using a long timestamp:  ```java this.mockMvc.perform(get(""/persons/1"").header(""If-Modified-Since"", now))   .andExpect(status().isNotModified())   .andExpect(header().dateValue(""Last-Modified"", timestamp)); ```  ---  **Affects:** 4.2 RC3  **Issue Links:** - #16531 MockHttpServletResponse.setDateHeader does not perform date formatting  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cf2aed9d005686a7955c2ccfd42c07526b24fbd3","closed","type: enhancement,","spring-projects-issues","2015-07-22T02:03:13Z","2019-01-11T18:02:57Z"
"","17844","Document changes about HTTP cache header defaults in migration docs [SPR-13253]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13253](https://jira.spring.io/browse/SPR-13253?redirect=false)** and commented  ---  **Affects:** 4.2 RC3  **Issue Links:** - #16413 Server-side HTTP caching improvements","closed","in: web,","spring-projects-issues","2015-07-20T08:31:44Z","2019-01-11T18:03:38Z"
"","17843","Reset Pragma header in WebContentGenerator when caching resources [SPR-13252]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13252](https://jira.spring.io/browse/SPR-13252?redirect=false)** and commented  When using Spring Security or any other servlet filter setting the pragma HTTP header, applications may write inconsistent responses with caching `Cache-Control` headers and ""no-cache"" `Pragma` headers.  The resource handling code path should make sure that this header is not set.  ---  **Affects:** 4.2 RC3  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/840  **Issue Links:** - #16413 Server-side HTTP caching improvements - #18625 Reset Expires header in WebContentGenerator when caching resources  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15fe8279e6342dcd5cd52d59052c77d2159bff6b, https://github.com/spring-projects/spring-framework/commit/09e3fc40e5c24a9e10e807f892e1158ba16680d1, https://github.com/spring-projects/spring-framework/commit/ed34ea48764d65665f2ba4cceda7add50d15b152","closed","type: bug,","spring-projects-issues","2015-07-20T08:24:21Z","2019-01-11T18:03:28Z"
"","17832","PathResourceResolver should not resolve ""/"" as a JAR resource [SPR-13241]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13241](https://jira.spring.io/browse/SPR-13241?redirect=false)** and commented  This [StackOverflow question](http://stackoverflow.com/questions/31182261/thymeleaf-at-syntax-returns-empty-if-i-include-resourceurlencodingfilter/) demonstrates an issue with resource handling.  The following problem can be reproduced by: * adding at least one webjar resource on classpath * configuring it as a resource location * using the `ResourceUrlProvider` to resolve `""/""`  Doing so will call the resource chain to resolve this URL as an existing resource. Even if ""/"" is not a resource _per se_, folders within JARs are resolved as **existing and readable** resources, translating `""/""` into `""""` and thus breaking the root application link.   ---  **Affects:** 4.1.7  **Reference URL:** https://github.com/quwahara/stackoverflow-questions-31182261  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/daf94ea576b3d1b781e5d5db855538a97b1a1417, https://github.com/spring-projects/spring-framework/commit/064abad9d872253dd5a9d68795e4b03543cd4112, https://github.com/spring-projects/spring-framework/commit/106cce58cc32ef5afcbe17cf6bb18e325591a1be, https://github.com/spring-projects/spring-framework/commit/3a4085a286a4212c25cb95d9c595b33c0f28bb29  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","type: bug,","spring-projects-issues","2015-07-16T10:23:54Z","2015-07-31T02:39:16Z"
"","17800","Make RedirectViews use RESPONSE_STATUS_ATTRIBUTE as a response status if defined [SPR-13208]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13208](https://jira.spring.io/browse/SPR-13208?redirect=false)** and commented  With #16413, many defaults regarding HTTP caching policies have been updated to the latest standards.  By default, `RedirectViews` have `http10Compatible` set to `true`, which means that they use HTTP 302 as a default HTTP response status. Setting this property to `false` make `RedirectViews` use HTTP 303 by default.  Now when set to false, RedirectViews don't use the `RESPONSE_STATUS_ATTRIBUTE` request attribute as a response HTTP if it is available. Both configuration choices should behave the same regarding to this request attribute.  ---  **Affects:** 4.1.7  **Reference URL:** https://jira.spring.io/browse/SPR-13197?focusedCommentId=117313&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-117313  **Issue Links:** - #17789 Support `@ResponseStatus` with RedirectView  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8e566026e0bf46f1c7b7ca2e38a37d2bee3a941e","closed","type: enhancement,","spring-projects-issues","2015-07-07T07:05:32Z","2019-01-13T05:39:58Z"
"","17768","Avoid reading (empty) RequestBody for HTTP methods that aren't expected to have a body [SPR-13176]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13176](https://jira.spring.io/browse/SPR-13176?redirect=false)** and commented  #17376 introduced the ability for a RequestBodyAdvice to turn empty input into some default value by iterating over all converters even when the body is empty. In some cases existing code that implicitly relies on the previous behavior (i.e. not looping over converters when the body is empty) may be affected.  For example consider the following from the referenced Boot ticket:  ```java @RequestMapping(value = ""/test"", method = [RequestMethod.GET, RequestMethod.POST]) public Person test(@RequestBody(required = false) Person person) {        //... } ```  The above is arguably not ideal way to declare request mappings since GET requests should not have a body and they don't typically have a content-type (the `required=false` attribute is somewhat used as a workaround instead of creating a separate handler method for GET requests). In this scenario, previously Spring MVC would exit early due to the null body + required=false. Currently however it loops over converters, it picks application/octet-stream by default, and since no converter can handle that, it results in an `HttpMediaTypeNotSupportedException`.  ---  **Affects:** 4.2 RC1  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/3313  **Issue Links:** - #18068 `@RequestBody` required parameter is ignored allowing null payloads (_**""is duplicated by""**_) - #18434 Spring Controller is not able to detect empty string ("""") as a string object in RequestBody  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3272a3b8badc29fd6f6022476dfb0124fbfeca85, https://github.com/spring-projects/spring-framework/commit/244c95b076542b112ab884392ebfbc9ab6dd8db0","closed","type: enhancement,","spring-projects-issues","2015-06-30T09:52:55Z","2019-01-13T05:40:11Z"
"","17609","StringIndexOutOfBoundsException in ResourceUrlEncodingFilter [SPR-13018]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13018](https://jira.spring.io/browse/SPR-13018?redirect=false)** and commented  When trying to encode an empty URL value for an application that has a configured servlet contextpath, the ResourceUrlEncodingFilter throws a StringIndexOutOfBoundsException.  ---  **Affects:** 4.1.6  **Reference URL:** https://github.com/aberasarte/spring-resource-handling/commit/c21e87256829ac184a88365071dc94cdffc598d0  **Issue Links:** - #18420 Regression: ResourceUrlEncodingFilter can throw StringIndexOutOfBoundsException with relative URL  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/71c3e4e4ee2d0cf206fd733a424b6afb83254f13, https://github.com/spring-projects/spring-framework/commit/51c941ca11e3006faaaeda45a71ba549481a4a19","closed","type: bug,","spring-projects-issues","2015-05-13T01:10:14Z","2019-01-11T16:05:32Z"
"","17604","Fix maven dependency scope conflicts in Gradle build [SPR-13013]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13013](https://jira.spring.io/browse/SPR-13013?redirect=false)** and commented  The build currently fails with:  ``` * What went wrong: Execution failed for task ':spring-orm:install'. > Could not publish configuration 'archives'    > Could not write to file '/opt/bamboo-home/xml-data/build-dir/SPR-PUB-JOB1/spring-orm/build/poms/pom-default.xml'.  Caused by: org.gradle.api.UncheckedIOException: Could not write to file '/opt/bamboo-home/xml-data/build-dir/SPR-PUB-JOB1/spring-orm/build/poms/pom-default.xml'.         at org.gradle.internal.IoActions$TextFileWriterIoAction.execute(IoActions.java:115) ...  Caused by: org.gradle.api.InvalidUserDataException: The configuration to scope mapping is not unique. The following configurations have the same priority: [org.gradle.api.artifacts.maven.Conf2ScopeMapping@46b852c, org.gradle.api.artifacts.maven.Conf2ScopeMapping@59d2e9ae] ```  While trying to write the pom.xml file, gradle is mapping all dependencies to versions + scope for the spring-orm module. I this case, it's finding several mappings for the same dependency and throws an Exception.  [Ensuring unique priority in our gradle plugin](https://github.com/spring-projects/spring-framework/blob/9d6c38bd54fe8931ee73fbb7a076625deb934e28/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy#L136) should fix the situation.   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/9d6c38bd54fe8931ee73fbb7a076625deb934e28/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy#L136  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/58d8a81b16540cfd7a716373f55ac00e8e9fa39b","closed","type: task,","spring-projects-issues","2015-05-11T07:47:07Z","2015-05-26T01:14:36Z"
"","17425","document groovy markup templating in reference doc [SPR-12829]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12829](https://jira.spring.io/browse/SPR-12829?redirect=false)** and commented   ---  **Affects:** 4.1.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ba48d6489ff5b01ca656cceba19414b6eb404ebb","closed","type: task,","spring-projects-issues","2015-03-18T03:17:44Z","2015-06-30T15:26:32Z"
"","17401","Document XML attributes in mvc:resource-chain element [SPR-12804]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12804](https://jira.spring.io/browse/SPR-12804?redirect=false)** and commented   --- No further details from [SPR-12804](https://jira.spring.io/browse/SPR-12804?redirect=false)","closed","type: task,","spring-projects-issues","2015-03-11T02:39:05Z","2015-06-30T10:41:36Z"
"","17410","X-Forwarded-Port with Comma Separated List Not Able to be Parsed in Spring 4.1.x [SPR-12813]","**[Brett Hall](https://jira.spring.io/secure/ViewProfile.jspa?name=thydian)** opened **[SPR-12813](https://jira.spring.io/browse/SPR-12813?redirect=false)** and commented  A NumberFormatException is thrown when attempting to parse HTTP header X-Forwarded-Port where header value is comma separated list of ports.  ``` 2015-03-12 12:56:34.961 ERROR 8784 --- [bio-3000-exec-7] s.d.r.w.AbstractRepositoryRestController [] : For input string: ""80,52022""  java.lang.NumberFormatException: For input string: ""80,52022"" 	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) 	at java.lang.Integer.parseInt(Integer.java:492) 	at java.lang.Integer.parseInt(Integer.java:527) 	at org.springframework.web.util.UriComponentsBuilder.fromHttpRequest(UriComponentsBuilder.java:300) 	at org.springframework.web.servlet.support.ServletUriComponentsBuilder.initFromRequest(ServletUriComponentsBuilder.java:121) 	at org.springframework.web.servlet.support.ServletUriComponentsBuilder.fromContextPath(ServletUriComponentsBuilder.java:74) 	at org.springframework.web.servlet.support.ServletUriComponentsBuilder.fromServletMapping(ServletUriComponentsBuilder.java:88) 	at org.springframework.web.servlet.support.ServletUriComponentsBuilder.fromCurrentServletMapping(ServletUriComponentsBuilder.java:159) 	at org.springframework.data.rest.webmvc.BaseUri.getUriComponentsBuilder(BaseUri.java:157) 	at org.springframework.data.rest.webmvc.support.RepositoryLinkBuilder.(RepositoryLinkBuilder.java:45) 	at org.springframework.data.rest.webmvc.support.RepositoryEntityLinks.linkFor(RepositoryEntityLinks.java:103) 	at org.springframework.data.rest.webmvc.RepositoryEntityController.getCollectionResource(RepositoryEntityController.java:182) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:601) 	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:777) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:706) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:943) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 	at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:291) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:201) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:57) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 	at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:102) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 	at org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration$MetricsFilter.doFilterInternal(MetricFilterAutoConfiguration.java:90) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 	at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:108) 	at org.springframework.boot.context.web.ErrorPageFilter.access$000(ErrorPageFilter.java:59) 	at org.springframework.boot.context.web.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:88) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:101) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99) 	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:936) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407) 	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1004) 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589) 	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) 	at java.lang.Thread.run(Thread.java:722) ```  ---  **Affects:** 4.1.5  **Reference URL:** http://stackoverflow.com/questions/28948580/x-forwarded-port-in-spring-web-mvc  **Issue Links:** - #15329 ServletUriComponentsBuilder doesn't work if X-Forwarded-Host is in host:port format - #17368 Regression in 4.1.5: UriComponentsBuilder.fromHttpRequest sets port to 80 i.s.o nothing/443 - #17413 X-Forwarded-Proto with comma separated list causes incorrect scheme","closed","type: bug,","spring-projects-issues","2015-03-12T13:13:32Z","2019-01-11T21:39:52Z"
"","17277","Provide better RestTemplate tooling for Spring Data REST [SPR-12678]","**[Brandon Vulaj](https://jira.spring.io/secure/ViewProfile.jspa?name=bvulaj)** opened **[SPR-12678](https://jira.spring.io/browse/SPR-12678?redirect=false)** and commented  As outlined in the SO link I've provided, RestTemplate doesn't seem to support the HAL based Spring Data REST resources very well out of the box.  At least not without some overhead.  While the benefit of using SDR is clear from both the client and service perspective, working with the currently exposed resources creates significantly more overhead on the client side at this point.  As a side note, one approach I've used is to use Spring's Traverson API to build the actual reference links for associations.  That functionality essentially ends up as a `Serializer` / `Converter` bound to a `MixIn`;  whether that is decent practice or not is up for debate.  ---  **Reference URL:** http://stackoverflow.com/questions/28181201/java-client-for-posting-complex-entities-to-a-spring-data-rest-hateoas-service  **Issue Links:** - #17181 Add RestTemplate support to get Links from Spring Hateoas access","closed","type: enhancement,","spring-projects-issues","2015-01-30T06:16:09Z","2019-01-11T19:00:42Z"
"","17761","Improve web socket header support [SPR-13170]","**[Bobby Warner](https://jira.spring.io/secure/ViewProfile.jspa?name=bobbywarner)** opened **[SPR-13170](https://jira.spring.io/browse/SPR-13170?redirect=false)** and commented  There is no way to access any of the web socket STOMP headers in the Spring handshake handler.  This is required to support custom authentication / authorization schemes.  For example, given a JS file like this:  ``` var socket = new SockJS(""http://localhost:8080/stomp""); var client = Stomp.over(socket); var headers = { login: ""foo"", passcode: ""bar"" }; client.connect( headers, function() {     // do stuff }); ```  It would be great to be able to access the STOMP headers in the handler like this.  ``` import org.springframework.http.server.ServerHttpRequest import org.springframework.web.socket.WebSocketHandler import org.springframework.web.socket.server.support.DefaultHandshakeHandler import java.security.Principal  class ChatHandshakeHandler extends DefaultHandshakeHandler {     @Override     protected Principal determineUser(ServerHttpRequest request, WebSocketHandler wsHandler,                                       Map attributes) {          // Get the STOMP login and passcode headers here. (login = foo, passcode = bar)     } } ```  ---  **Affects:** 4.1.6  **Issue Links:** - #19254 Spring WebSockets should support token-based authentication","closed","type: enhancement,","spring-projects-issues","2015-06-26T14:09:17Z","2019-01-11T16:18:46Z"
"","17747","Add @EventListener value() support for event class literals [SPR-13156]","**[Bob Tiernay](https://jira.spring.io/secure/ViewProfile.jspa?name=btiernay)** opened **[SPR-13156](https://jira.spring.io/browse/SPR-13156?redirect=false)** and commented  This allows to have the event parameter as optional if it is unused:  ```java @EventListener(ApplicationReadyEvent.class) public void start() {   // ... } ```  and also allow for multiple:  ```java @EventListener({ApplicationStartEvent.class, ApplicationReadyEvent.class}) public void start() {   // ... } ```    ---  **Affects:** 4.2 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bf786c31760722cfa9119b7c0b5412e9c1b7bd5d","closed","type: enhancement,","spring-projects-issues","2015-06-22T19:54:13Z","2015-07-15T09:05:11Z"
"","17746","Add @Profile support for @EventListener annotated methods [SPR-13155]","**[Bob Tiernay](https://jira.spring.io/secure/ViewProfile.jspa?name=btiernay)** opened **[SPR-13155](https://jira.spring.io/browse/SPR-13155?redirect=false)** and commented  This would be very useful for conditional processing of startup methods, etc:  ```java @EventListener @Profile(""simulation"") public void start(ApplicationReadyEvent ready) {     simulator.simulate(); } ```    --- No further details from [SPR-13155](https://jira.spring.io/browse/SPR-13155?redirect=false)","closed","type: enhancement,","spring-projects-issues","2015-06-22T19:48:12Z","2021-10-08T05:35:52Z"
"","17347","Provide option in RestTemplate to encode slash in URI variables [SPR-12750]","**[Björn Voß](https://jira.spring.io/secure/ViewProfile.jspa?name=bjoern.voss)** opened **[SPR-12750](https://jira.spring.io/browse/SPR-12750?redirect=false)** and commented  In a uri template like: ``` http://example.com/hotels/{hotel}/pic/{publicpath}/{size}  ```I want to have slashes '/' to be encoded for the variable \{publicpath\}.  This is discussed in SPR-8662 with a workaround, but I just want to use UriTemplate and not always use the workaround when I'm not 100% sure that slashes in uri variables are permitted. ```  ---  **Affects:** 4.0.9, 4.1.5  **Attachments:** - [SPR-12750_encode_slashes_in_UriTemplate.patch](https://jira.spring.io/secure/attachment/22661/SPR-12750_encode_slashes_in_UriTemplate.patch) (_2.36 kB_) - [SPR-12750_respect_slash_rfc6570_in_UriTemplate_and_UriComponentsBuilder.patch](https://jira.spring.io/secure/attachment/22664/SPR-12750_respect_slash_rfc6570_in_UriTemplate_and_UriComponentsBuilder.patch) (_6.79 kB_)  **Issue Links:** - #15137 Support advanced URI Template Syntax - #15587 UriComponents should parse the path of a String URI into path segments","closed","type: enhancement,","spring-projects-issues","2015-02-24T01:19:49Z","2019-01-13T20:57:21Z"
"","17337","Websocket call to /ws/info now returns a 403 [SPR-12740]","**[Bjorn Harvold](https://jira.spring.io/secure/ViewProfile.jspa?name=bjornharvold)** opened **[SPR-12740](https://jira.spring.io/browse/SPR-12740?redirect=false)** and commented  I just updated www.bearchoke.com to use the latest 4.1.5 Spring libraries only to find that websocket functionality was no longer working. I could replicate both locally and on Cloud Foundry that when my app calls /ws/info I get a 403. When I downgraded back down to 4.1.4, it worked fine again.  Please advise if any changes made in 4.1.5 affects the configuration of web socket beans.  ---  **Affects:** 4.1.5  **Issue Links:** - #17284 Change SockJS default to allowing same origin only","closed","status: declined,","spring-projects-issues","2015-02-20T21:47:16Z","2019-01-12T16:23:34Z"
"","17542","DeferredResult & Filter with request scoped bean doesn't work [SPR-12949]","**[Bilguun Bayarmagnai](https://jira.spring.io/secure/ViewProfile.jspa?name=bilguun)** opened **[SPR-12949](https://jira.spring.io/browse/SPR-12949?redirect=false)** and commented  I'm trying to do async processing from my controller with `DeferredResult`  ``` @RequestMapping(""/deferred"") public DeferredResult deferred() throws InterruptedException, ExecutionException{     DeferredResult deferred = new DeferredResult<>();     pagePreparer.setResult(deferred);     return deferred; } ```  ``` @Async public void setResult(DeferredResult result){     try {         logger.debug(""Execute method asynchronously - "" + Thread.currentThread().getName());         Thread.sleep(2000l);         result.setResult(""deferred"");     } catch (InterruptedException e) {         e.printStackTrace();     } } ```  Apparently `DeferredResult` calls all the filters again to ""finalize"" the request. One of my filter, needs to access `oauth2ClientContext` bean, which is a request scoped bean.  In one of my filters I've:  ``` logger.debug(""filtering""); // you could see this twice in the log from different threads OAuth2ClientContext context = applicationContext.getBean(OAuth2ClientContext.class); ```  That call is throwing an exception  ``` 2015-04-23 15:47:28.501 DEBUG 20530 --- [nio-8084-exec-3] com.fm.nd.common.web.Oauth2TokenFilter   : filtering  2015-04-23 15:47:28.525 DEBUG 20530 --- [nio-8084-exec-3] com.fm.nd.common.web.Oauth2TokenFilter   : clearing context 2015-04-23 15:47:28.529 DEBUG 20530 --- [cTaskExecutor-2] com.fm.nd.doc.service.PagePreparer       : Execute method asynchronously - SimpleAsyncTaskExecutor-2 2015-04-23 15:47:30.550 DEBUG 20530 --- [nio-8084-exec-4] com.fm.nd.common.web.Oauth2TokenFilter   : filtering  2015-04-23 15:47:30.551 DEBUG 20530 --- [nio-8084-exec-4] com.fm.nd.common.web.Oauth2TokenFilter   : clearing context 2015-04-23 15:47:30.557 ERROR 20530 --- [nio-8084-exec-4] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet dispatcherServlet threw exception  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.oauth2ClientContext': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:352)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)     at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)     at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:187)     at com.sun.proxy.$Proxy106.getAccessToken(Unknown Source)     at com.fm.nd.common.web.Oauth2TokenFilter$$EPAf9Cq0.doFilter(Oauth2TokenFilter.java:59)     at com.fm.nd.common.web.Oauth2TokenFilter$$DPAf9Cq0.doFilter(Unknown Source)     at com.fm.nd.common.web.Oauth2TokenFilter.doFilter(Oauth2TokenFilter.java)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at com.fm.nd.common.web.TenantFilter.doFilter(TenantFilter.java:31)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)     at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:108)     at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:64)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:160)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192)     at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at org.springframework.security.oauth2.client.filter.OAuth2ClientContextFilter.doFilter(OAuth2ClientContextFilter.java:57)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:721)     at org.apache.catalina.core.ApplicationDispatcher.doDispatch(ApplicationDispatcher.java:639)     at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:605)     at org.apache.catalina.core.AsyncContextImpl$1.run(AsyncContextImpl.java:208)     at org.apache.catalina.core.AsyncContextImpl.doInternalDispatch(AsyncContextImpl.java:367)     at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:214)     at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)     at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)     at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)     at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)     at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)     at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:388)     at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1705)     at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:650)     at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)     at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.     at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:131)     at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:41)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)     ... 73 common frames omitted ```  Looking at the exception I've configured:  ``` @Bean public RequestContextListener requestContextListener(){     return new RequestContextListener(); } ```  But there's no difference. Most probably this is not a bug, however is there a workaround here?   ---  **Affects:** 4.1.5  **Reference URL:** http://stackoverflow.com/questions/29817342/spring-deferred-result-request-scoped-beanoauth2clientcontext-in-the-web-fil","closed","status: invalid,","spring-projects-issues","2015-04-23T01:28:56Z","2019-01-12T05:24:28Z"
"","17831","AllEncompassingFormHttpMessageConverter does not prefer Jackson2 over JAXB for XML marshalling [SPR-13240]","**[Bertrand Renuart](https://jira.spring.io/secure/ViewProfile.jspa?name=brenuart)** opened **[SPR-13240](https://jira.spring.io/browse/SPR-13240?redirect=false)** and commented  When configuring itself, `AllEncompassingFormHttpMessageConverter` doesn't prefer Jackson2 over JAXB for XML serialisation if Jackson2 is present on the classpath.  Because of this, it doesn't follow the behaviour of `WebMvcConfigurationSupport` or `RestTemplate`.  ---  **Affects:** 4.2 RC3  **Issue Links:** - #14123 Add Gson HttpMessageConverter - #16407 Support Jackson2 based XML serialization/deserialization - #16840 Support Jackson based XML serialization in RestTemplate - #17894 AllEncompassingFormHttpMessageConverter prioritizes Jackson 2 XML over JSON  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9de824b73debb520189063ed61f4d3a6500e2767","closed","type: enhancement,","spring-projects-issues","2015-07-16T09:16:33Z","2019-01-11T18:04:02Z"
"","17695","Add request timeout to ResponseBodyEmitter [SPR-13104]","**[Bernhard Frauendienst](https://jira.spring.io/secure/ViewProfile.jspa?name=oxc)** opened **[SPR-13104](https://jira.spring.io/browse/SPR-13104?redirect=false)** and commented  As discussed in #16826, request handler methods returning a ResponseBodyEmitter (or a subclass like SseEmitter) have no way of specifying a request-specific timeout to be set on the request's AsyncContext. The only way to specify that timeout is using the global default value.  However, most ResponseBodyEmitter connections are explicitly created to be long-running, especially in the Server-Sent Event case (SseEmitter), where the connection is created as an async back-channel to the client. As such, those request handlers will in most cases want to set a much higher timeout value than the one appropriate for single-result async tasks.  Therefore, the possibility to specify a per-request timeout value should be added to the ResponseBodyEmitter (probably similar to the property in DeferredResult).  ---  **Affects:** 4.2 RC1  **Issue Links:** - #16826 HTTP Streaming and Server-Sent Events (SSE) - #18026 SseEmitter does not expose super constructor with timeout value","closed","type: enhancement,","spring-projects-issues","2015-06-08T12:09:33Z","2019-01-11T16:26:43Z"
"","17528","@Scheduled(fixedRate) is blocking, preventing multiple concurrent thread execution. [SPR-12935]","**[bernard](https://jira.spring.io/secure/ViewProfile.jspa?name=bht)** opened **[SPR-12935](https://jira.spring.io/browse/SPR-12935?redirect=false)** and commented  Please refer to the attached maven web project.  Although the executor is configured with a pool size > 1, executions appear to be single threaded. Using fixedRate, I could not observe multiple interleaved executions.  I used the the sample configuration code provided on the page http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html as follows:  ```     ```  and  ``` @Scheduled(fixedRate = 100) ```  My expectation was, that with today's hardware and corresponding software e.g. multi-processor and Java 8, a default implementation would be multi-threaded without any additional programming effort.  The documentation for `@Scheduled`(fixedRate=5000) appears to be unambiguous:  ""The following would be executed every 5 seconds measured between the successive start times of each invocation.""  which in the provided test case does not occur.  Perhaps I have missed an important detail. My apologies in this case.   ---  **Attachments:** - [Scheduled.zip](https://jira.spring.io/secure/attachment/22748/Scheduled.zip) (_5.81 kB_)","closed","status: bulk-closed,","spring-projects-issues","2015-04-16T21:46:03Z","2019-01-14T05:07:40Z"
"","17628","Order of Autowired change success of fail status [SPR-13036]","**[Benoit Lacelle](https://jira.spring.io/secure/ViewProfile.jspa?name=blasd)** opened **[SPR-13036](https://jira.spring.io/browse/SPR-13036?redirect=false)** and commented  Given barely the same unit-test, changing the order of `@Autowired` beans will change the configuration from valid to a configuration with missing beans.  ``` package solven.zabel.test;  import java.io.InputStream; import java.util.concurrent.ThreadPoolExecutor.AbortPolicy;  import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.test.annotation.DirtiesContext; import org.springframework.test.annotation.DirtiesContext.ClassMode; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = { BuggyOkConfig.FirstConfig.class, BuggyOkConfig.SecondConfig.class, BuggyOkConfig.ThirdConfig.class, 		BuggyOkConfig.FourthConfig.class, BuggyOkConfig.class }) @DirtiesContext(classMode = ClassMode.AFTER_CLASS) public class BuggyOkConfig {  	public static interface FirstFirstInterface {  	}  	public static interface FirstSecondInterface {  	}  	public static class FirstImpl implements FirstFirstInterface, FirstSecondInterface {  	}  	public static interface TopInterface {  	}  	public static interface SubInterface extends TopInterface {  	}  	public static class SecondImpl implements SubInterface {  	}  	public static class FirstConfig {  		@Bean 		public AbortPolicy retrievePriceRequestProvider(FirstFirstInterface userAlerts) { 			return null; 		} 	}  	public static class SecondConfig {  		@Bean 		public FirstFirstInterface userAlerts() { 			return new FirstImpl(); 		}  		@Bean 		public SubInterface userProposals() { 			return new SecondImpl(); 		} 	}  	public static class ThirdConfig {  		@Bean 		public String glue(InputStream priceProvider, TopInterface userProposals) { 			return ""123""; 		} 	}  	public static class FourthConfig {  		@Bean 		public InputStream userAvailable(FirstSecondInterface userAlerts) { 			return null; 		} 	}  	@Bean 	public Double inMemoryServerClient(String glue) { 		return Double.parseDouble(glue); 	}  	@Autowired 	AbortPolicy provider; 	@Autowired 	Double zabelClient;  	@Test 	public void test() { 	} } ```  ``` package solven.zabel.test;  import java.io.InputStream; import java.util.concurrent.ThreadPoolExecutor.AbortPolicy;  import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.test.annotation.DirtiesContext; import org.springframework.test.annotation.DirtiesContext.ClassMode; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = { BuggyFailConfig.FirstConfig.class, BuggyFailConfig.SecondConfig.class, BuggyFailConfig.ThirdConfig.class, 		BuggyFailConfig.FourthConfig.class, BuggyFailConfig.class }) @DirtiesContext(classMode = ClassMode.AFTER_CLASS) public class BuggyFailConfig {  	public static interface FirstFirstInterface {  	}  	public static interface FirstSecondInterface {  	}  	public static class FirstImpl implements FirstFirstInterface, FirstSecondInterface {  	}  	public static interface TopInterface {  	}  	public static interface SubInterface extends TopInterface {  	}  	public static class SecondImpl implements SubInterface {  	}  	public static class FirstConfig {  		@Bean 		public AbortPolicy retrievePriceRequestProvider(FirstFirstInterface userAlerts) { 			return null; 		} 	}  	public static class SecondConfig {  		@Bean 		public FirstFirstInterface userAlerts() { 			return new FirstImpl(); 		}  		@Bean 		public SubInterface userProposals() { 			return new SecondImpl(); 		} 	}  	public static class ThirdConfig {  		@Bean 		public String glue(InputStream priceProvider, TopInterface userProposals) { 			return ""123""; 		} 	}  	public static class FourthConfig {  		@Bean 		public InputStream userAvailable(FirstSecondInterface userAlerts) { 			return null; 		} 	}  	@Bean 	public Double inMemoryServerClient(String glue) { 		return Double.parseDouble(glue); 	}  	@Autowired 	Double zabelClient; 	@Autowired 	AbortPolicy provider;  	@Test 	public void test() { 	} }  ```  Thanks   ---  **Affects:** 4.1.6","closed","status: bulk-closed,","spring-projects-issues","2015-05-16T01:29:46Z","2019-01-12T00:16:25Z"
"","17810","getBeanNamesForType doesn't work with a class presented by an aop-proxy [SPR-13219]","**[Benjamin Sawary](https://jira.spring.io/secure/ViewProfile.jspa?name=bsawary)** opened **[SPR-13219](https://jira.spring.io/browse/SPR-13219?redirect=false)** and commented  Hello,  when I search a bean name with AbstractBeanFactory:getBeanNameForType() and a scoped bean-type as parameter behind an aop-proxy, spring doesn't find a result.  It fails within the method isTypeMatch. The existing singleton instance isn't a factory bean and proxy instance getClass() returning ProxyXY.class on ClassUtil.isAssignableValue.  Here is my fix to avoid this problem:  `@Override` public boolean isTypeMatch(String name, Class targetType) throws NoSuchBeanDefinitionException { boolean typeMatch = super.isTypeMatch(name, targetType);          if (!typeMatch && targetType != null)         {             Object beanInstance = getSingleton(transformedBeanName(name), false);             Optional advised = Classes.cast(beanInstance, Advised.class);                  if (advised.isPresent())             {                 typeMatch = advised.get().getTargetClass().isAssignableFrom(targetType);             }         }              return typeMatch;     }  and here my declared beans:  `@Named` `@Singleton` public class MyBean { `@AspectAware` public void test() { ... } }  `@Aspect` `@Named` public static class DummyAspect { `@Before`(""`@annotation`(AspectAware)"") public void test() throws Throwable{ ... } }  Best Regards Benjamin Sawary   ---  **Affects:** 3.2.14","closed","in: core,","spring-projects-issues","2015-07-10T07:43:29Z","2019-01-12T16:23:11Z"
"","17305","Provide a method to customize WebBindingInitializer [SPR-12708]","**[Benjamin M](https://jira.spring.io/secure/ViewProfile.jspa?name=benneq)** opened **[SPR-12708](https://jira.spring.io/browse/SPR-12708?redirect=false)** and commented  It would be nice to provide a custom RequestMappingHandlerAdapter within WebMvcConfigurationSupport, i.e.  ``` protected RequestMappingHandlerAdapter configureRequestMappingHandlerAdapter() {     RequestMappingHandlerAdapter adapter = new RequestMappingHandlerAdapter(); }  @Bean public RequestMappingHandlerAdapter requestMappingHandlerAdapter() { ...     RequestMappingHandlerAdapter adapter = configureRequestMappingHandlerAdapter(); ... } ```  The reason for this is, that otherwise it's not possible to inject a custom WebDataBinder (see: http://stackoverflow.com/questions/28349488/customize-spring-requestparam-deserialization-for-maps-and-or-nested-objects ) _and_ also keep all that auto configuration stuff that Spring provides.  Another option would be to somehow provide a way to _only_ inject a custom WebDataBinder.  Thank you!   ---  **Affects:** 4.1.4  **Reference URL:** http://stackoverflow.com/questions/28349488/customize-spring-requestparam-deserialization-for-maps-and-or-nested-objects","closed","type: enhancement,","spring-projects-issues","2015-02-11T03:38:04Z","2015-02-23T12:04:21Z"
"","17342","RequestResponseBodyMethodProcessor should turn IOException to HttpMessageNotReadableException [SPR-12745]","**[Benjamin Gehrels](https://jira.spring.io/secure/ViewProfile.jspa?name=bgehrels)** opened **[SPR-12745](https://jira.spring.io/browse/SPR-12745?redirect=false)** and commented  When a client on a subway ride tries to PUT a http request to a Spring Web application, it may happen, that the request takes really long and finally runs into timeouts.  If this happens while Spring Web tries to resolve a Method Handler Argument, an Exception will be thrown, that will never be caught again.  ``` java.net.SocketTimeoutException: null 	at org.apache.tomcat.util.net.NioBlockingSelector.read(NioBlockingSelector.java:202) ~[tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.tomcat.util.net.NioSelectorPool.read(NioSelectorPool.java:251) ~[tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.tomcat.util.net.NioSelectorPool.read(NioSelectorPool.java:232) ~[tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.coyote.http11.InternalNioInputBuffer.fill(InternalNioInputBuffer.java:133) ~[tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.coyote.http11.InternalNioInputBuffer$SocketInputBuffer.doRead(InternalNioInputBuffer.java:177) ~[tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.coyote.http11.filters.IdentityInputFilter.doRead(IdentityInputFilter.java:110) ~[tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.coyote.http11.AbstractInputBuffer.doRead(AbstractInputBuffer.java:413) ~[tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.coyote.Request.doRead(Request.java:460) ~[tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.connector.InputBuffer.realReadBytes(InputBuffer.java:338) ~[tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.tomcat.util.buf.ByteChunk.substract(ByteChunk.java:363) ~[tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.connector.InputBuffer.readByte(InputBuffer.java:352) ~[tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.connector.CoyoteInputStream.read(CoyoteInputStream.java:94) ~[tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at java.io.FilterInputStream.read(FilterInputStream.java:83) ~[na:1.8.0_25] 	at java.io.PushbackInputStream.read(PushbackInputStream.java:139) ~[na:1.8.0_25] 	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:168) ~[spring-webmvc-4.1.4.RELEASE.jar!/:4.1.4.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:105) ~[spring-webmvc-4.1.4.RELEASE.jar!/:4.1.4.RELEASE] 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77) ~[spring-web-4.1.4.RELEASE.jar!/:4.1.4.RELEASE] 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162) ~[spring-web-4.1.4.RELEASE.jar!/:4.1.4.RELEASE] 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:129) ~[spring-web-4.1.4.RELEASE.jar!/:4.1.4.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) ~[spring-webmvc-4.1.4.RELEASE.jar!/:4.1.4.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:777) ~[spring-webmvc-4.1.4.RELEASE.jar!/:4.1.4.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:706) ~[spring-webmvc-4.1.4.RELEASE.jar!/:4.1.4.RELEASE] 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.1.4.RELEASE.jar!/:4.1.4.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:943) ~[spring-webmvc-4.1.4.RELEASE.jar!/:4.1.4.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877) ~[spring-webmvc-4.1.4.RELEASE.jar!/:4.1.4.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) ~[spring-webmvc-4.1.4.RELEASE.jar!/:4.1.4.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:879) ~[spring-webmvc-4.1.4.RELEASE.jar!/:4.1.4.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:647) ~[tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) ~[spring-webmvc-4.1.4.RELEASE.jar!/:4.1.4.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:725) ~[tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.filters.ExpiresFilter.doFilter(ExpiresFilter.java:1201) ~[tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) [spring-web-4.1.4.RELEASE.jar!/:4.1.4.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.1.4.RELEASE.jar!/:4.1.4.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:673) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:537) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1085) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:658) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1556) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1513) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_25] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_25] 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.0.15.jar!/:8.0.15] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_25] ```  Since Spring Web manages the Stream, it should probably also manage the Exceptions thrown by it. I would suggest to just more or less silently (maybe Log.warn) drop the request since * the handler has not yet been called, so the request is unhandled and therefore no bad side effects should have happened * no response code has yet been sent to the client, so it has no reason to think, that anything usefull has happened to the request.    ---  **Affects:** 4.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ffd9c62fc8b7cbeb5fbbc9a4fd487b1284a0b264","closed","type: enhancement,","spring-projects-issues","2015-02-23T08:03:08Z","2015-10-15T13:04:43Z"
"","17949","HTTP content negotiation does not respect media type parameters [SPR-13365]","**[Benedict Adamson](https://jira.spring.io/secure/ViewProfile.jspa?name=raedwald)** opened **[SPR-13365](https://jira.spring.io/browse/SPR-13365?redirect=false)** and commented  The `org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor` class does not respect media-type parameters when doing content negotiation. In the `writeWithMessageConverters` method, if a `requestedType` has a non empty `MimeType.getParameters()` map, those parameters have no effect on which type is the `selectedMediaType`. I believe that HTTP standard conformance requires that those parameters **do** have an effect on content negotiation.  The cause of this seems to be that `writeWithMessageConverters` uses `MimeType.isCompatibleWith(MimeType)`, which ignores the parameters, and then (indirectly) sorts the produceable media types using `MediaType.SPECIFICITY_COMPARATOR`, which also ignores the parameters.  ---  Worse still, if the `selectedMediaType` (the supported media type of the chosen HTTP message converter) differs from the requested type only in the media-type parameters, the `Content-Type` header of the response will contain the requested media type **even though** the response body is actually of the `selectedMediaType`.  The cause of that seems to be that the `AbstractMessageConverterMethodProcessor.getMostSpecificMediaType(MediaType, MediaType)` chooses the `acceptType` rather than the `produceTypeToUse` when the two types have equal specificity, according to the `MediaType.SPECIFICITY_COMPARATOR`, and that comparator ignores the media-type parameters.  ---  **Affects:** 4.1 GA  **Issue Links:** - #15531 Content negotiation ignores media type parameters (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2015-08-18T06:25:00Z","2019-01-13T15:57:24Z"
"","17360","two parameters with the same name on view are no transferred to controller. [SPR-12763]","**[Ben S](https://jira.spring.io/secure/ViewProfile.jspa?name=ausme2)** opened **[SPR-12763](https://jira.spring.io/browse/SPR-12763?redirect=false)** and commented  This bug is being reported on SpringMVC. This may have been a design choice, or been already reported.  Because Spring uses a LinkedHashMap to store parameters from the view, and because the HTTP protocol allows you to send the same parameter with different values. Then, if you send two parameters with the same name, of type say Long, then it will only record the first one and all others will be ignored.  Use Case: Access a URL similar to the one below: http://localhost:8080/greeting?name=3&name=4  Inside the controller, name will only be set to value 3. Value 4 will be ignored.   ---  **Affects:** 4.1.4","closed","status: invalid,","spring-projects-issues","2015-02-27T08:47:48Z","2019-01-12T05:24:39Z"
"","17984","Possibility to sort sql-files in ResourceDatabasePopulator [SPR-13404]","**[Ben Pezzei](https://jira.spring.io/secure/ViewProfile.jspa?name=kaminsky)** opened **[SPR-13404](https://jira.spring.io/browse/SPR-13404?redirect=false)** and commented  Hi,  I'm using springboot 1.2.5 and have multiple projects cotaining sql (data & schema) fragments. The springboot app then ""collects"" those projects and starts to run the various SQL files during startup. They are configured like this: spring.datasource.data=classpath*:/sql/schema-${spring.datasource.platform}.sql  The order of these files seems random (due to the various resrouceloaders), so an SQL error will pop up if the order of statements is not correct (i.e. deleting a FK)  My request would be additional lines in ResourceDatabasePopulator, which would sort the scripts (Method: populate) by filename, so it may possible to use:  spring.datasource.data=classpath*:/sql/schema-${spring.datasource.platform}-??.sql  and use doubledigits to implement a given order (e.g. schema-h2-00.sql to schema-h2-99.sql  I know, it's quite a specific request ;-)  tnx & regards Ben   --- No further details from [SPR-13404](https://jira.spring.io/browse/SPR-13404?redirect=false)","closed","status: invalid,","spring-projects-issues","2015-08-25T12:03:26Z","2019-01-12T05:23:51Z"
"","17424","Wrong proxy type for @Validated classes with interfaces [SPR-12827]","**[baymon](https://jira.spring.io/secure/ViewProfile.jspa?name=baymon)** opened **[SPR-12827](https://jira.spring.io/browse/SPR-12827?redirect=false)** and commented  I am using a service with the `@Validated` annotation. The service class also implements some interfaces.  ```java @Service @Validated public class MyService implements Interface1, Interface2 {      @override     public void methodFromInterface1() {     }      @override     public void methodFromInterface2() {     }      public void serviceMethod() {     } } ```  I also have `@EnableAspectJAutoProxy(proxyTargetClass = true)` configured in my configuration class. (Although it seems that this doesn't matter for the validation Intercepter)  When spring tries to inject this service, the JDK default proxy is used and my application results in an error with a message like ""Can not set ... field ... to com.sun.proxy.$Proxy30"". If I modify my service to not implement any interfaces, the CGLIB proxy is used (with or without the declaration of `@EnableAspectJAutoProxy(proxyTargetClass = true)`) and everything works.  ```java @Service @Validated public class MyService {      public void methodFromInterface1() {     }      public void methodFromInterface2() {     }      public void serviceMethod() {     } } ```  Is CGLIB unable to handle classes with interfaces, or why spring decides to use the default JDK proxy for this class? And why the declaration `@EnableAspectJAutoProxy(proxyTargetClass = true)` has no affect in this case?   ---  **Affects:** 4.1.5","closed","in: core,","spring-projects-issues","2015-03-17T11:19:02Z","2019-01-12T16:23:30Z"
"","17368","Regression in 4.1.5: UriComponentsBuilder.fromHttpRequest sets port to 80 i.s.o nothing/443 [SPR-12771]","**[Bart Van Bos](https://jira.spring.io/secure/ViewProfile.jspa?name=boeboe)** opened **[SPR-12771](https://jira.spring.io/browse/SPR-12771?redirect=false)** and commented  Hi,  I am using spring-hateoas to generate URL links between my REST managed resources. Since the upstep from Spring 4.1.4 -> 4.1.5, I'm having problems with the PORT/SCHEME combination generated.  Example link before the update:      https://example.com/rest/mobile/users/1  Example link after the update:      https://example.com:80/rest/mobile/users/1  As you can see, it automatically append port 80 to the URL. The problem is that my rest back-end is running on a cloud platform heroku, which is using a reverse proxy to terminate the TLS (HTTPS).      browser --- (HTTPS/TLS on :443) --- reverse proxy --- (HTTP on :80) --- Heroku web server  This worked well before the update since the port was not automatically appended and the browser could figure out the port by negotiation. By hard coding it (by taking it form the original request), this auto detecting is not possible anymore.  These are my headers:      Header Name: host, Header Value: example.com     Header Name: connection, Header Value: close     Header Name: user-agent, Header Value: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:36.0) Gecko/20100101 Firefox/36.0     Header Name: accept, Header Value: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8     Header Name: accept-language, Header Value: en-US,en;q=0.5     Header Name: accept-encoding, Header Value: gzip, deflate     Header Name: x-request-id, Header Value: d97ed0c8-c91e-492a-b609-e05290f2fb2d     Header Name: x-forwarded-for, Header Value: 84.198.58.199     Header Name: x-forwarded-proto, Header Value: https     Header Name: x-forwarded-port, Header Value: 443     Header Name: via, Header Value: 1.1 vegur  I believe the problem lies in UriComponentsBuilder.fromHttpRequest:      String portHeader = request.getHeaders().getFirst(""X-Forwarded-Port"");     if (StringUtils.hasText(portHeader)) {         port = Integer.parseInt(portHeader);     }          ...          builder.scheme(scheme);     builder.host(host);     if (scheme.equals(""http"") && port != 80 || scheme.equals(""https"") && port != 443) {         builder.port(port);     }     return builder;  In my case X-Forwarded-Port == 443, so the builder.port should be set to 443 or left blank (not filled with 80 as is now the case).  ---  **Affects:** 4.1.5  **Reference URL:** https://github.com/spring-projects/spring-hateoas/issues/301  **Issue Links:** - #14743 Add support for X-Forwarded-Host in ServletUriComponentsBuilder - #15346 X-Forwarded-Host handling in ServletUriComponentsBuilder does not treat ports correctly - #17410 X-Forwarded-Port with Comma Separated List Not Able to be Parsed in Spring 4.1.x  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/410fc6d7633a9c04d97020de71aa69432425e08d, https://github.com/spring-projects/spring-framework/commit/d64c48ff5f06aa444c199ae0cfa0d86f1b36af00  2 votes, 7 watchers","closed","type: bug,","spring-projects-issues","2015-03-01T12:09:50Z","2019-01-11T21:25:27Z"
"","17724","Allow body of JmsListener annotated method to define returned Message Destination [SPR-13133]","**[Bart Prokop](https://jira.spring.io/secure/ViewProfile.jspa?name=bartprokop)** opened **[SPR-13133](https://jira.spring.io/browse/SPR-13133?redirect=false)** and commented  There are three possible use-cases for JmsListener annotated method processing: 1. request-reply scenario. The request have a JMSReplyTo set. Supported. 2. processing messages and sending result back to predefined queue. Supported with SendTo annotation. 3. processing message but the destination where to send response is determined during request processing. In most trivial case it can be forwarding incoming message to various destination, based on incoming message evaluation. There is no elegant solution to do this.  Please note that elegant solution would allow for implementing very rich/advance functionality inside listeners including dispatching multiple replies, dynamic destinations.  Some workaround for point 3 exists like returning void and use JMSTemplate or hacking request JMSReplyTo - but they are not elegant solution and not intended to use patterns.  The solution would require to inspect returning object that could be placeholder for both Message and Destination. There was some discussion around it that excluded using Message properties for this as JMS non compliant solution (see the ref URL). Alternatively a Map could be passed as parameter (or returned from listener method).   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/817  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/be4329545a1e7fd336a7dc3c5ef70cd9a125912a, https://github.com/spring-projects/spring-framework/commit/bd093eb6bfead14b978e4709fff69d0199bada23, https://github.com/spring-projects/spring-framework/commit/c8fcdadbae37ca9daa7e44d51116d084272a0781","closed","type: enhancement,","spring-projects-issues","2015-06-15T15:03:38Z","2015-06-30T15:26:29Z"
"","17564","Null safe navigation on map [SPR-12973]","**[Balakrishnan](https://jira.spring.io/secure/ViewProfile.jspa?name=balatbn)** opened **[SPR-12973](https://jira.spring.io/browse/SPR-12973?redirect=false)** and commented  Would it be possible to add null safe navigation to map?  For ex:  if myMap is a map(can be null), can I do something like  #myMap?['key'] == 'value'  Related SO question:  http://stackoverflow.com/questions/15554065/spring-el-safe-navigation-with-map-access   ---  **Affects:** 4.1.6","closed","status: bulk-closed,","spring-projects-issues","2015-04-30T18:47:39Z","2019-01-12T00:16:39Z"
"","17540","Branch 3.2.x has compiler errors when imported into Eclipse on Windows [SPR-12947]","**[bailei](https://jira.spring.io/secure/ViewProfile.jspa?name=bailei)** opened **[SPR-12947](https://jira.spring.io/browse/SPR-12947?redirect=false)** and commented  I cloned [branch 3.2.x](https://github.com/spring-projects/spring-framework/tree/3.2.x) from GitHub and followed the `import-into-eclipse.bat` instructions, but I get several compiler errors (see attached screenshot).  My environment seems to be OK: - Windows 7 - JDK 1.7 - Eclipse Luna 4.4.0  I think the problem is that some dependencies are not the appropriate versions or some code files are not updated to stable versions.  ---  **Affects:** 3.2.14  **Attachments:** - [spring-eclipse-errors.png](https://jira.spring.io/secure/attachment/22762/spring-eclipse-errors.png) (_118.75 kB_)  **Issue Links:** - #16455 Eclipse project dependencies override locally declared Gradle dependencies (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e748cf17d9761ff79c435931b620ca4bd7444ea7, https://github.com/spring-projects/spring-framework/commit/f2e5e5aa86d827f14754f77666a76da89cfbf8d0","closed","type: task,","spring-projects-issues","2015-04-22T23:35:02Z","2019-01-14T04:43:14Z"
"","17206","Provide access to the target HandlerMethod from @ExceptionHandler methods [SPR-12605]","**[Ayushya Devmurari](https://jira.spring.io/secure/ViewProfile.jspa?name=pathfinder2104)** opened **[SPR-12605](https://jira.spring.io/browse/SPR-12605?redirect=false)** and commented  Hi,  Please refer the url provided and feel free to contact me.  Thanks and regards,  Ayushya  ---  **Affects:** 3.2.3  **Reference URL:** http://stackoverflow.com/questions/27817544/find-the-class-from-where-the-exception-has-generated-without-using-stacktrace/27834873?noredirect=1#comment44112807_27834873  **Issue Links:** - #14681 Add HandlerMethod as possible parameter to `@ExceptionHandler` method (_**""is duplicated by""**_) - #17788 Support HandlerMethod parameter in `@MessageExceptionHandler`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d68fde57cdd997414cd5421d2c02a3ae1186364c  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2015-01-08T22:14:12Z","2019-01-13T05:42:58Z"
"","17738","Allow multiple destination per @JmsListener [SPR-13147]","**[Ayman Musmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ayman)** opened **[SPR-13147](https://jira.spring.io/browse/SPR-13147?redirect=false)** and commented  Could you please allow setting of multiple destinations per `@JmsListener` method? Now we must add multiple methods to support this, if we want one class/method  to handle multiple destinations.   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e81a430e6174a67d453cb9c1871e01193f96867a, https://github.com/spring-projects/spring-framework/commit/4631add6cfe2537cc6bd5a442fe74a6604a62207","closed","type: enhancement,","spring-projects-issues","2015-06-19T02:45:03Z","2015-06-30T15:26:29Z"
"","17253","Add ""expose model attributes"" property to mvc:view-controller [SPR-12652]","**[Axel Dörfler](https://jira.spring.io/secure/ViewProfile.jspa?name=axeld)** opened **[SPR-12652](https://jira.spring.io/browse/SPR-12652?redirect=false)** and commented  When redirecting, you often don't want to expose the model attributes in the URL. This is easily possible to achieve via the API, but view-controller has no such mechanism.  A more generic alternative would be to have a ""redirect-no-model-attrs:"" prefix type (and while you're at it, a ""redirect-keep-query"" would also be nice).   ---  **Affects:** 4.1.4","closed","type: enhancement,","spring-projects-issues","2015-01-22T02:32:25Z","2018-03-08T12:43:06Z"
"","17252","Add ""useFullPath"" ability to mvc:view-controller [SPR-12651]","**[Axel Dörfler](https://jira.spring.io/secure/ViewProfile.jspa?name=axeld)** opened **[SPR-12651](https://jira.spring.io/browse/SPR-12651?redirect=false)** and commented  When your url-mapper is something like ""/path/*"", you may want to include ""/path/"" in the view-controller's path to distinguish it from other controllers in a different path.  This is a quite superfluous restriction of the current implementation.   ---  **Affects:** 4.1.4","closed","type: enhancement,","spring-projects-issues","2015-01-22T02:29:41Z","2018-03-08T12:42:55Z"
"","17509","ResponseEntity's #equals fails symmetric property. [SPR-12910]","**[Austin Davis](https://jira.spring.io/secure/ViewProfile.jspa?name=adavis1990)** opened **[SPR-12910](https://jira.spring.io/browse/SPR-12910?redirect=false)** and commented  The current implementation of ResponseEntity's equals method fails the symmetric property (as defined by [Object.equals(Object obj)](https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object))) as shown in the following test.  ``` @Test public void testSymmetricProperty() {     HttpHeaders b = new HttpHeaders();     b.add(""headerName"", ""headerValue"");     String a = ""body"";     HttpEntity http = new HttpEntity(a, b);     ResponseEntity response = new ResponseEntity(a, b, HttpStatus.ACCEPTED);          assertTrue(http.equals(response)); //Succeeds, http = response     assertTrue(response.equals(http)); //Fails response != http } ```  This was discovered when attempting to write an equals function for our own subclass of ResponseEntity that had it's own state, testing with [equalsVerifier](http://www.jqno.nl/equalsverifier/) (specific failed assertion, with suggestion on solution [here](http://www.jqno.nl/equalsverifier/2014/11/17/redefined-superclass-object-should-not-equal-superclass-instance/))   ---  **Affects:** 4.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/af272c212419a373d09078eb717e5f2195962f53, https://github.com/spring-projects/spring-framework/commit/8f6ac19f508152a2c9b4f460ee5d083cc0bafaa4","closed","type: bug,","spring-projects-issues","2015-04-14T14:44:54Z","2015-05-26T01:14:57Z"
"","17561","Upgrade JsonPath dependency to 2.0.0 [SPR-12969]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-12969](https://jira.spring.io/browse/SPR-12969?redirect=false)** and commented  See also https://github.com/spring-projects/spring-boot/issues/2720.  ---  **Reference URL:** https://github.com/jayway/JsonPath/releases  **Issue Links:** - #18302 Require JsonPath 1.1+  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8049dc358fe56b9afdfcec580fd280b67b1a6003","closed","type: task,","spring-projects-issues","2015-04-30T07:38:34Z","2019-01-11T21:04:46Z"
"","17496","SimpleAliasRegistry.resolveAliases is applied only from the PlaceholderConfigurerSupport with PlaceholderResolvingStringValueResolver and any SpEL usage isn't resolved [SPR-12897]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-12897](https://jira.spring.io/browse/SPR-12897?redirect=false)** and commented  The config looks like:  ```xml  ```  and we end up with an `alias` like `#{bar.value`}. That SpEL isn't resolved as it can be done using `EmbeddedValueResolver`.  See the linked [AMQP-488](https://jira.spring.io/browse/AMQP-488) issue for more info.  ---  **Issue Links:** - [AMQP-488](https://jira.spring.io/browse/AMQP-488) Queue name containing ${random.value} can not be bound to an exchange binding","closed","type: enhancement,","spring-projects-issues","2015-04-08T01:27:13Z","2019-01-13T20:56:49Z"
"","17382","ObjectToOptionalConverter wraps a source Optional to the new one [SPR-12785]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-12785](https://jira.spring.io/browse/SPR-12785?redirect=false)** and commented  See the linked SO question.   ---  **Affects:** 4.1.5  **Reference URL:** http://stackoverflow.com/questions/28865232/spring-integration-annotation-java-8-optional-incorrect-handling  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f786fc32263ff6260b347076212c06d320412273, https://github.com/spring-projects/spring-framework/commit/f2691901bb7ff3ccb100956b9d0cd8c02695346f","closed","in: core,","spring-projects-issues","2015-03-04T14:10:38Z","2015-03-25T09:42:35Z"
"","17358","ProxyAsyncConfiguration is eagerly loaded due to AsyncAnnotationBeanPostProcessor [SPR-12761]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-12761](https://jira.spring.io/browse/SPR-12761?redirect=false)** and commented  The test-case to reproduce:  ```java @ContextConfiguration @RunWith(SpringJUnit4ClassRunner.class) public class EnableAsyncTests {  	@Test 	public void testIt() {}  	@Configuration 	@EnableAsync 	public static class ContextConfiguration {  	}  } ```  And we see in logs:  ``` 2015-02-27 12:47:46,007 INFO PostProcessorRegistrationDelegate$BeanPostProcessorChecker [main] : Bean 'org.springframework.scheduling.annotation.ProxyAsyncConfiguration' of type [class org.springframework.scheduling.annotation.ProxyAsyncConfiguration$$EnhancerBySpringCGLIB$$5806bc78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) ```  As far as I can tell making `ProxyAsyncConfiguration.asyncAdvisor()` bean-method as `static` should fix the issue, because `AsyncAnnotationBeanPostProcessor` is `BeanPostProcessor`.   ---  **Affects:** 4.1.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/772a26a743466ef84239aa97f1e07560426ad71b, https://github.com/spring-projects/spring-framework/commit/31df7155ab40e6f4b98f4fd46ad9229031a716c4","closed","type: enhancement,","spring-projects-issues","2015-02-27T03:02:20Z","2015-05-26T01:14:51Z"
"","17327","MessageHeaderAccessor.getContentType() should get deal with String value too, rather than rely only casting to MimeType [SPR-12730]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-12730](https://jira.spring.io/browse/SPR-12730?redirect=false)** and commented  See the issue in the linked SO question.  Spring Integration AMQP populates `content-type` headers from AMQP Message headers as `String`. There are other components in Spring Integration which do the same, e.g. `ObjectToJsonTransformer`.  From other side `AmqpMessageHeaderAccessor` has this code:  ```java @Override public MimeType getContentType() { 	Object value = getHeader(AmqpHeaders.CONTENT_TYPE); 	if (value != null && value instanceof String) { 	return MimeType.valueOf((String) value); 	} 	else { 	return super.getContentType();         } } ```  Looks like would be better to move this code to the core `MessageHeaderAccessor` and allow for end-application to avoid this transformation:  ```java .setHeader(MessageHeaders.CONTENT_TYPE, amqpMessageHeaderAccessor.getContentType()) ```  Or manual `MimeType.valueOf()` invocation.  For me this is minor change, so can be backported.   ---  **Affects:** 4.1.4  **Reference URL:** http://stackoverflow.com/questions/28587286/having-trouble-with-contenttype-going-from-amqp-to-stomp-message  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dbd353bbd95267c46085d192981de8d8acbde4d1, https://github.com/spring-projects/spring-framework/commit/55a14eb684205e6fc3b1a98002ec4517cf877917","closed","type: enhancement,","spring-projects-issues","2015-02-18T12:12:23Z","2015-02-20T04:13:12Z"
"","17259","Support @Configuration as a meta-annotation in the TestContext framework [SPR-12659]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-12659](https://jira.spring.io/browse/SPR-12659?redirect=false)** and commented  #### Status Quo  The case with Spring Boot to reproduce:  ```java @SpringApplicationConfiguration @RunWith(SpringJUnit4ClassRunner.class) public class MyTests {  	@SpringBootApplication 	public static class ContextConfiguration {  	} } ```  Since `@SpringBootApplication` is meta-annotated with `@Configuration` there should be no reason to explicitly declare `@Configuration`, but right now it is a necessary workaround in order to allow `AnnotationConfigContextLoaderUtils.isDefaultConfigurationClassCandidate()` to detect `@Configuration` on the nested static `ContextConfiguration` class. The reason is that `AnnotationConfigContextLoaderUtils` invokes `clazz.isAnnotationPresent(Configuration.class)` which does not search for meta-annotations.  ---  #### Deliverables  1. [x] Refactor `isDefaultConfigurationClassCandidate()` in `AnnotationConfigContextLoaderUtils` so that it detects the presence of `@Configuration` when used indirectly as a meta-annotation.  ---  **Affects:** 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2d918380f0553238087ec264688ecba066e49ab5, https://github.com/spring-projects/spring-framework/commit/0c856b3d2299eeb91ae6fca5679a20a5010413f2","closed","type: enhancement,","spring-projects-issues","2015-01-23T11:02:42Z","2019-01-13T05:42:38Z"
"","17888","Definition of basic attributes in MANIFEST.MF file (for all spring projects) [SPR-13298]","**[Arnošt Havelka](https://jira.spring.io/secure/ViewProfile.jspa?name=arnost.havelka@gmail.com)** opened **[SPR-13298](https://jira.spring.io/browse/SPR-13298?redirect=false)** and commented  Hello,  recently I fixed [issue 27](https://github.com/spring-projects/spring-boot/issues/27) in Spring Boot (PR is still open). There I have introduced ManifestReader which is reading manifests from all spring libraries on classpath.  The problem is there are manifests with different content: 1. spring-framework, spring-ws, spring-batch, etc.  > Implementation-Title: spring-core > Implementation-Version: 4.2.0.RC2  _Note: attribute 'Implementation-Title' is defined as artifactId_ 2. spring-boot, spring-cloud-starter, spring-ldap-core, etc.  > Implementation-Title: Spring Boot > Implementation-Version: 1.3.0.BUILD-SNAPSHOT > Archiver-Version: Plexus Archiver > Built-By: bamboo > Specification-Vendor: Pivotal Software, Inc. > Specification-Title: Spring Boot > Implementation-Vendor-Id: org.springframework.boot > Created-By: Apache Maven 3.0.5 > Build-Jdk: 1.8.0_40 > Specification-Version: 1.3.0.BUILD-SNAPSHOT > Implementation-Vendor: Pivotal Software, Inc.  3. spring-data-jpa, spring-plugin-core, spring-hateoas, etc.  > Bundle-SymbolicName: org.springframework.data.core > Archiver-Version: Plexus Archiver > Built-By: bamboo > Bundle-RequiredExecutionEnvironment: SE-1 > Bundle-ManifestVersion: 2 > Bundle-Vendor: Pivotal Software, Inc. > Import-Package: com.fasterxml.jackson.annotation;version=""[2.5.1,3.0.0 > ... > =""0"" > DynamicImport-Package: * > Tool: Bundlor 1.0.0.RELEASE > Export-Package: org.springframework.data.annotation;version=""1.11.0.M1 > ... > et.config.annotation"" > Bundle-Name: spring-data-commons > Bundle-Version: 1.11.0.M1 > Created-By: Apache Maven 3.0.5 > Build-Jdk: 1.8.0_40  4. e.g. spring-cloud-core    _Note: no information at all_    ---  **Affects:** 4.2 GA  **Attachments:** - [manifest_examples.zip](https://jira.spring.io/secure/attachment/22964/manifest_examples.zip) (_9.63 kB_)","closed","type: enhancement,","spring-projects-issues","2015-07-31T05:46:09Z","2019-01-14T05:12:56Z"
"","17478","MockHttpServletRequestBuilder should not decode query string [SPR-12880]","**[Arien Kock](https://jira.spring.io/secure/ViewProfile.jspa?name=arienkock)** opened **[SPR-12880](https://jira.spring.io/browse/SPR-12880?redirect=false)** and commented  While testing I discovered that (per the spec) `HttpServletRequest.getQueryString()` should not be decoded. In fact, it is not when the web application is deployed to Jetty.  Excerpt from the Javadoc for `HttpServletRequest.getQueryString()`:  > Returns: a String containing the query string or null if the URL contains no query string. **The value is not decoded by the container.**  However, `MockHttpServletRequestBuilder` decodes the `queryString` when building. Thus, I believe this is a defect in `MockHttpServletRequestBuilder`.   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0b8554f94a73b1620d8c34d1a68b3eb8e56d482a","closed","type: bug,","spring-projects-issues","2015-04-02T00:48:21Z","2015-05-26T01:15:05Z"
"","17226","Invalid Internal State [SPR-12625]","**[Arash Farzin](https://jira.spring.io/secure/ViewProfile.jspa?name=arash_farzin)** opened **[SPR-12625](https://jira.spring.io/browse/SPR-12625?redirect=false)** and commented  we are using Spring.Net 1.3.2.  we have alot of services registered in spring. sometimes, resolving a service my result the following exception.  after recycling the application poo(iis 6 on windows server 2003 with dot net 3.5) the service will work normally but another service my act the same way.  MESSAGE : Invalid internal state. SOURCE : mscorlib STACKTRACE :    at System.Reflection.Emit.TypeBuilder._InternalSetMethodIL(Int32 methodHandle, Boolean isInitLocals, Byte[] body, Byte[] LocalSig, Int32 sigLength, Int32 maxStackSize, Int32 numExceptions, __ExceptionInstance[] exceptions, Int32[] tokenFixups, Int32[] rvaFixups, Module module) at System.Reflection.Emit.TypeBuilder.InternalSetMethodIL(Int32 methodHandle, Boolean isInitLocals, Byte[] body, Byte[] LocalSig, Int32 sigLength, Int32 maxStackSize, Int32 numExceptions, __ExceptionInstance[] exceptions, Int32[] tokenFixups, Int32[] rvaFixups, Module module) at System.Reflection.Emit.TypeBuilder.CreateTypeNoLock() at System.Reflection.Emit.TypeBuilder.CreateType() at Spring.Aop.Framework.DynamicProxy.CompositionAopProxyTypeBuilder.BuildProxyType() at Spring.Aop.Framework.DynamicProxy.CachedAopProxyFactory.BuildProxyType(IProxyTypeBuilder typeBuilder) at Spring.Aop.Framework.DynamicProxy.DefaultAopProxyFactory.DoCreateAopProxyInstance(AdvisedSupport advisedSupport) at Spring.Aop.Framework.DynamicProxy.AbstractAopProxyFactory.CreateAopProxy(AdvisedSupport advisedSupport) at Spring.Aop.Framework.AdvisedSupport.CreateAopProxy() at Spring.Aop.Framework.ProxyFactory.GetProxy() at Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.CreateProxy(Type targetType, String targetName, Object[] specificInterceptors, ITargetSource targetSource) at Spring.Aop.Framework.AutoProxy.AbstractAutoProxyCreator.PostProcessBeforeInstantiation(Type objectType, String objectName) at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ApplyObjectPostProcessorsBeforeInstantiation(Type objectType, String objectName) at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(String name, RootObjectDefinition definition, Object[] arguments, Boolean allowEagerCaching, Boolean suppressConfigure)   --- No further details from [SPR-12625](https://jira.spring.io/browse/SPR-12625?redirect=false)","closed","status: invalid,","spring-projects-issues","2015-01-14T03:11:49Z","2019-01-12T05:24:51Z"
"","17394","Exception not thrown by OnFailure() when using ListenableFutureCallback [SPR-12797]","**[Antonio Parolini](https://jira.spring.io/secure/ViewProfile.jspa?name=antonio.parolini@hcuge.ch)** opened **[SPR-12797](https://jira.spring.io/browse/SPR-12797?redirect=false)** and commented  In class `AsyncExecutionAspectSupport`, line 171:  The check to see if the method return type is of type Futur and descendants is inverted. It dosen't rethrow the original exception in case of  ListenableFuture It should be  ``` if (Future.class.isAssignableFrom(method.getReturnType())) { ```  Exemple code when using ListenableFuture with asyc:  ``` @Async((Application.MASS_THREAD_EXECUTOR)) public ListenableFuture importOneJobMassAsync(ImportJob importJob, UTILSessionData sessionData) {     //throw new IllegalArgumentException(""test execption"");     importPartialData(importJob, sessionData);     return new AsyncResult<>(importJob); } ```  ```               futur.addCallback(                         new ListenableFutureCallback() {                             /**                              * On success is called also when we cancel the execussion pool                              * But Import Job will be null                             */                              @Override                             public void onSuccess(ImportJob importJob) {                                 UTILLog.logInfo(this.getClass().getName(), ""futur.get finished"");                            }                              /**                              * This is called only when the job has been canceled                              * @param ex                              */                             @Override                             public void onFailure(Throwable ex) {                                 UTILLog.logError(this.getClass().getName(), ""Job in error:"" + ex.getMessage(), ex);                             }                         });    ```  ---  **Affects:** 4.1.5  **Attachments:** - [AsyncExecutionAspectSupport.java](https://jira.spring.io/secure/attachment/22681/AsyncExecutionAspectSupport.java) (_8.01 kB_)  **Issue Links:** - #16706 UncaughtExceptionHandler is not configured with AspectJ  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/406adb3381c37b890ac562c14d5b99a35cba1472, https://github.com/spring-projects/spring-framework/commit/8f8a85912a16f57ed204ca0c12423fedbf4ebe30","closed","in: core,","spring-projects-issues","2015-03-09T00:35:07Z","2019-01-11T21:23:52Z"
"","17978","YamlMapFactoryBean wraps integer keys with square brackets [SPR-13398]","**[Anthony](https://jira.spring.io/secure/ViewProfile.jspa?name=anthofo)** opened **[SPR-13398](https://jira.spring.io/browse/SPR-13398?redirect=false)** and commented  Hi,  Given the following yaml file :  ``` 5804: height 24103: weight ```  yamlFactory.getObject() returns a map in which the integer keys are all wrapped with square brackets :  ``` ""[5804]"" -> ""height"" ""[24103]"" -> ""weight"" ```  I expected that YamlMapFactoryBean would convert the integer keys into Strings, but without brackets.   --- No further details from [SPR-13398](https://jira.spring.io/browse/SPR-13398?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-08-27T08:24:24Z","2019-01-12T00:16:04Z"
"","17615","Provide access to the return type in MethodMetadata [SPR-13024]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-13024](https://jira.spring.io/browse/SPR-13024?redirect=false)** and commented  We'd like to enhance Spring Boot's auto-configuration report to include the return type of any `@Bean` methods that have been conditionally included or excluded. We can't do so at the moment as `MethodMetadata` doesn't make that information available.  I'm happy to contribute a PR if you agree with the change and can offer some guidance on the implementation. The main decision that I can see is whether or not it's ok to change the `MethodMetadata` interface, or if the return type should only be exposed on the implementations (and we'd use a cast in Boot to access it).  ---  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/2208  **Issue Links:** - #15547 `@Bean` on Java 8 default methods in interfaces  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1e7d954fcb5c47fab5ee61d8c43664e5edda6072","closed","type: enhancement,","spring-projects-issues","2015-05-13T08:35:29Z","2019-01-13T05:40:54Z"
"","17444","BeanFactoryUtils.beanNamesForTypeIncludingAncestors(factory, RepositoryFactoryInformation.class, false, false) doesn't find beans that are found in 4.1 [SPR-12846]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-12846](https://jira.spring.io/browse/SPR-12846?redirect=false)** and commented  A Spring Data JPA-based test is failing in Spring Boot when I upgrade to Spring Framework 4.2. The failure occurs because Spring Data's `Repositories` class fails to find the `JpaRepositoryFactoryBean` in the application context. It looks for it by calling `BeanFactoryUtils.beanNamesForTypeIncludingAncestors(factory, RepositoryFactoryInformation.class, false, false))`. `RepositoryFactoryInformation` is an interface that is implemented by `JpaRepositoryFactoryInformation`.  The problem looks like it may be due to the use of `ResolvableType` in 4.2. When run against Spring Framework 4.1.x, it boils down to `AbstractBeanFactory.isTypeMatch` calling `org.springframework.data.repository.core.support.RepositoryFactoryInformation.class.isAssignableFrom(org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.class)`. When run against Spring Framework 4.2 it's the `ResolvableType` for `RepositoryFactoryInformation` that's used. In 4.1.x the `isAssignableFrom` call returns `true`, in 4.2 it returns `false`. This is summarised in the following test:  ``` assertTrue(RepositoryFactoryInformation.class         .isAssignableFrom(JpaRepositoryFactoryBean.class)); assertTrue(ResolvableType.forClass(RepositoryFactoryInformation.class)         .isAssignableFrom(JpaRepositoryFactoryBean.class)); ```  It fails on the second assertion.   ---  **Affects:** 4.2 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/09027f797233263283f1830f83ed4a7d2ee46d3b","closed","type: bug,","spring-projects-issues","2015-03-24T05:36:03Z","2015-05-26T01:14:45Z"
"","17292","Conditions on an overriding bean method effectively get ignored [SPR-12694]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-12694](https://jira.spring.io/browse/SPR-12694?redirect=false)** and commented  In Spring Boot, I'd like to be able to override a method in a Spring Data REST configuration class to make it conditional, however this doesn't work. The condition on the overriding method is evaluated and correctly considered as not matching but the overridden method is then also considered. It has no conditions so a bean definition is created.  This is illustrated by this test:  ```java import java.util.Map;  import org.junit.Test; import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Condition; import org.springframework.context.annotation.ConditionContext; import org.springframework.context.annotation.Conditional; import org.springframework.context.annotation.Configuration; import org.springframework.core.type.AnnotatedTypeMetadata;  import static org.junit.Assert.assertEquals;  public class ConditionalOverriddenBeanMethodTests {  	@Test 	public void conditionsOnOverriddenMethodsAreHonoured() { 		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext( 				Bar.class); 		Map beansOfType = context.getBeansOfType(Baz.class); 		assertEquals(0, beansOfType.size()); 	}  	@Configuration 	private static class Foo {  		@Bean 		public Baz baz() { 			return new Baz(); 		}  	}  	private static class Bar extends Foo {  		@Override 		@Bean 		@Conditional(NeverMatchesCondition.class) 		public Baz baz() { 			return new Baz(); 		}  	}  	private static class Baz {  	}  	private static class NeverMatchesCondition implements Condition {  		@Override 		public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) { 			return false; 		}  	}  } ```  My expectation is that the condition will prevent the `Baz` bean from being created.  ---  **Affects:** 4.1.4  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/2267  **Issue Links:** - #17341 Regression in 4.1.5: Alternative `@Bean` declarations with same primary bean name do not work anymore - #19831 Doc: Consistent `@Profile` declarations on overloaded `@Bean` methods  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2015-02-05T08:06:12Z","2019-01-13T05:42:30Z"
"","17285","Allow MBeanExporter's excludedBeans to be configured additively [SPR-12686]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-12686](https://jira.spring.io/browse/SPR-12686?redirect=false)** and commented  MBeanExporter currently only provides a setter for its set of excluded bean names. In Spring Boot we'd like to be able to collect the excluded bean names in an additive fashion as we process an application's (auto-)configuration. I'm envisaging being able to do something like this:  ``` @Autowired(required = false) private MBeanExporter mBeanExporter;  @Bean(destroyMethod = """") @ConditionalOnMissingBean public DataSource dataSource(DataSourceProperties properties) {     if (this.mBeanExporter != null) {         this.mBeanExporter.addExcludedBean(""dataSource"");     }     JndiDataSourceLookup dataSourceLookup = new JndiDataSourceLookup();     return dataSourceLookup.getDataSource(properties.getJndiName()); } ```    ---  **Affects:** 4.1.4  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/2397  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/982f9ce6c9a731fdfbfb49c90c19885ba5788da2, https://github.com/spring-projects/spring-framework/commit/09bd7037e9b48755077199377739b8efcd7b8090","closed","type: enhancement,","spring-projects-issues","2015-02-04T05:22:46Z","2015-02-20T04:13:14Z"
"","17270","Allow YamlProcessor subclasses to provide the Yaml instance that's used [SPR-12671]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-12671](https://jira.spring.io/browse/SPR-12671?redirect=false)** and commented  By default, SnakeYAML will turn a timestamp-like string into a `java.util.Date`. To disable this behaviour a `Yaml` instance has to be created with a custom `Resolver`. I'd like to be able to use `YamlProcessor` with such a `Yaml` instance but `YamlProcessor` doesn't make it easy to do so. Currently I'd have to override `process(MatchCallback)` and duplicate its logic. I'd also have to duplicate `StrictMapAppenderConstructor` as it's declared private preventing me from using it when I create my own `Yaml` instance.   ---  **Affects:** 4.1.4  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/2422  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d8cec8534e2c9ffd0056665f9421710e44a3ebec, https://github.com/spring-projects/spring-framework/commit/6fce6d466868323ed7fd2e97b1db979b43c7f4a4","closed","type: enhancement,","spring-projects-issues","2015-01-29T02:47:10Z","2015-02-20T04:13:16Z"
"","17242","During startup scheduled tasks are driven earlier than before causing problems with Spring Batch [SPR-12641]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-12641](https://jira.spring.io/browse/SPR-12641?redirect=false)** and commented  Spring Batch performs it job registration in response to a `ContextRefreshedEvent`. In Spring 4.0, the scheduler starts calling scheduled tasks in response to a `ContextRefreshedEvent`. In Spring 4.1 the latter has changed due  #16655 which made `ScheduledAnnotationBeanPostProcessor` a `SmartInitializingSingleton`. In short this means that the scheduler now starts calling scheduled tasks before the `ContextRefreshedEvent` is sent. This means that scheduled tasks that are driven during startup can no longer depend on a Batch job having been registered.  ---  **Affects:** 4.1.4  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/2310  **Issue Links:** - #16655 JmsListener/ScheduledAnnotationBeanPostProcessor should use SmartInitializingSingleton instead of ContextRefreshedEvent  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0479ca68fe319e6e38bfa8970a0ddcbe4235cd76, https://github.com/spring-projects/spring-framework/commit/14a3bf39418fb899dd6145f91a8fbb9542f86bd8  0 votes, 6 watchers","closed","in: core,","spring-projects-issues","2015-01-19T06:56:53Z","2019-01-11T19:03:37Z"
"","17235","Allow Jackson2ObjectMapperBuilder configuration to override the well-known modules' configuration [SPR-12634]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-12634](https://jira.spring.io/browse/SPR-12634?redirect=false)** and commented  My specific use case is that I'd like to be able to override JodaModule's serialiser for `DateTime` with one configured with a custom format. I can't do this at the moment by adding the serialiser to Jackson2ObjectMapperBuilder as its module that registers the serialiser is registered before the well-known modules are configured. This means that JodaModule overwrites my custom serialiser.  I've discussed this a little with Sebastien. One suggestion was to add a module to Jackson2ObjectMapperBuilder. This would work, but only because it would then switch off the registration of the well-known modules. I'd like to keep the well-known module registration and be able to apply my own configuration after those modules have been registered.  Would it be possible to change the ordering in Jackson2ObjectMapperBuilder.configure so that the well-known modules are registered with the ObjectMapper before the builder's own module is registered? This would allow the builder's configuration to override the configuration provided by the well-known modules, but could break an existing (slightly strange) use the was expecting their custom configuration to be overridden by a well-known module.  ---  **Affects:** 4.1.4  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/2225  **Issue Links:** - #17195 Support specifying TimeZone in Jackson2ObjectMapperFactoryBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/77fcf21401ab98c886cc5c98afdf43a545d9b38f, https://github.com/spring-projects/spring-framework/commit/fab8dd3d0bb726cee22c042775baf575a3e2a7c2, https://github.com/spring-projects/spring-framework/commit/b215d4c29e0795e9577bb0edc9af00a95d5f966c, https://github.com/spring-projects/spring-framework/commit/ccb1c13951da01603345504115fd3c177c65dd59, https://github.com/spring-projects/spring-framework/commit/5fb6d6d89c5fe799cf2cd8f32a2fd5f77a59c2ee  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-01-16T03:07:04Z","2019-01-11T19:04:39Z"
"","17173","Improve diagnostics when AnnotationJmxAttributeSource triggers an ArrayStoreException from Class.getAnnotation [SPR-12572]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-12572](https://jira.spring.io/browse/SPR-12572?redirect=false)** and commented  As with other issues like this, it'd be useful to know the name of the class that's being introspected when the failure occurs. Here's an example stacktrace for the failure:  ``` Caused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy     at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:724)     at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:531)     at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:355)     at sun.reflect.annotation.AnnotationParser.parseAnnotation2(AnnotationParser.java:286)     at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:120)     at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:72)     at java.lang.Class.createAnnotationData(Class.java:3513)     at java.lang.Class.annotationData(Class.java:3502)     at java.lang.Class.getAnnotation(Class.java:3407)     at org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource.getManagedResource(AnnotationJmxAttributeSource.java:73)     at org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler.includeBean(MetadataMBeanInfoAssembler.java:121)     at org.springframework.jmx.export.MBeanExporter$1.include(MBeanExporter.java:856)     at org.springframework.jmx.export.MBeanExporter.autodetect(MBeanExporter.java:891)     at org.springframework.jmx.export.MBeanExporter.autodetectBeans(MBeanExporter.java:853)     at org.springframework.jmx.export.MBeanExporter.registerBeans(MBeanExporter.java:532)     at org.springframework.jmx.export.MBeanExporter.afterSingletonsInstantiated(MBeanExporter.java:420) ```  ---  **Affects:** 4.0.8, 4.1.3  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/2196  **Issue Links:** - #17099 AnnotationAttributesReadingVisitor.doVisitEnd doesn't handle possible null return from AnnotationUtils.getAnnotations - #16995 Improve diagnostics when AnnotationAttributesReadingVisitor triggers an ArrayStoreException from Class.getAnnotations() - #17175 Spring's JMX support can rely on native MXBean detection on Java 6+  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-12-28T13:26:35Z","2019-01-11T18:24:42Z"
"","17904","File upload with Servlet 3 multipart requests should support filename with charset encoding (RFC 2231) [SPR-13319]","**[Andy Goossens](https://jira.spring.io/secure/ViewProfile.jspa?name=gandy)** opened **[SPR-13319](https://jira.spring.io/browse/SPR-13319?redirect=false)** and commented  We have a Django/Python application that tries to upload a file to a Spring web application. This fails for non-latin file names as Spring Framework does not support the Content-Disposition header it is receiving. It looks something like this:  ``` Content-Disposition: form-data; name=""file""; filename*=UTF-8''foo-%c3%a4-%e2%82%ac.html ```  This should result in a file called foo-ä-€.html.  I cannot blame the Python app as it is following [RFC 2231](https://tools.ietf.org/html/rfc2231). The method StandardMultipartHttpServletRequest.extractFilename(String contentDisposition) has a TODO comment that seems to refer to its incapability to handle such cases:  ```java // TODO: can only handle the typical case at the moment ```  This site has a nice overview of possible Content-Disposition values and how browsers cope with them: http://greenbytes.de/tech/tc2231/ But note that this page describes  **download** actions and not **uploads**.  ---  **Affects:** 4.1.7  **Issue Links:** - #19769 StandardMultipartHttpServletRequest cannot decode multipart Content-Disposition header encoded by FormHttpMessageConverter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1a9e42b49d814cf54836eeff4a72ff8216ca9e95","closed","type: enhancement,","spring-projects-issues","2015-08-05T07:48:42Z","2019-01-11T18:23:01Z"
"","17913","Unable to intercept methods with mixed enum types as varargs [SPR-13328]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-13328](https://jira.spring.io/browse/SPR-13328?redirect=false)** and commented  This was raised against AspectJ but I'm thinking (from the stack trace) it may be Spring AOP. The AJ bug is : https://bugs.eclipse.org/bugs/show_bug.cgi?id=474266  and the text from that is:  The method I used AspectJ+SpringAOP to intercept is declared as below:  ``` public  void getMessageValue(V... messages) ```  And the arguments passed into this method are actually enums declared like below:  ``` public enum CustomMessage implements IMessage {     WELCOME(""Hello""),     GOODBYE(""Bye"");     ...  } ```  The method call of getMessageValue() is like:  ``` getMessageValue(CustomMessage.WELCOME, CustomMessage.GOODBYE); ```  And there will be an exception thrown:  ``` java.lang.ClassCastException: [Ljava.lang.Enum; cannot be cast to [Lcom.read.maventest.interface.IMessage; 	at com.read.maventest.bean.TestEnumList$$FastClassBySpringCGLIB$$21d778f3.invoke() 	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) 	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:717) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) 	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) 	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:85) 	at com.read.maventest.bean.TimingAspect.timeStats(TimingAspect.java:25) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) ```  ---  **Affects:** 4.1.6  **Issue Links:** - #18270 Regression: Spring on WildFly causing ClassNotFoundException in ASM when deployed outside of EAR  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8c4b8d253a79c4d349b09c14202e7a8ee96a0ca1, https://github.com/spring-projects/spring-framework/commit/a8432bc8a10fa714efd560aa741fe4ac45cfa3c5  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2015-08-06T12:40:35Z","2019-01-11T18:23:46Z"
"","17386","SpEL: reduce restrictions on compiling mathematical expressions [SPR-12789]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-12789](https://jira.spring.io/browse/SPR-12789?redirect=false)** and commented  A few people have noticed that we are currently quite strict on what mathematical expressions we will 'compile' in SpEL. For the standard operators (plus, minus, divide, multiply) we require the operands to be **exactly** the same type. E.g. both ints, both doubles, both floats, etc. Due to this strict rule you sometimes have to write something funky to get the compiler to compile your expression:  ``` (T(java.lang.Double).parseDouble(payload.someBoxedInt.toString()))/60D ```  Basically perform a conversion yourself to ensure the operands are compatible.  This was done deliberately as we didn't have use cases and every bit of extra flexibility needs many more test cases and enhanced byte code generation - some of the expressions you can write naturally in Java cause extra byte code to be generated that you aren't aware of for converting numbers and we'd need to start generating that too (instructions like i2d). The XD/Integration teams have hit this problem a couple of times.  Under this jira I'd try to lift the restriction.  Juergen (or someone) - are there any upcoming deadlines that you would want me to hit (or not hit) with this feature?    ---  **Affects:** 4.1.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b7ef04767a4d0dc4eb3d80219073ddfcfdf1980b","closed","type: enhancement,","spring-projects-issues","2015-03-05T22:50:34Z","2015-05-26T01:15:30Z"
"","17239","Factory-bean with property resolution doesn't work [SPR-12638]","**[André Pinto](https://jira.spring.io/secure/ViewProfile.jspa?name=andresp)** opened **[SPR-12638](https://jira.spring.io/browse/SPR-12638?redirect=false)** and commented  I'm getting:  NoSuchBeanDefinitionException: No bean named '$APP{some.factory.bean}'  while setting a factory-bean which the name is defined in a property.  Github changes to your PetClinic example: https://github.com/andredasilvapinto/spring-petclinic/commit/e2a1d03ad0909c7ef1cbcfcfc4986325515185b8  StackOverflow discussion: http://stackoverflow.com/questions/28000530/spring-factory-bean-with-property-resolution/   ---  **Affects:** 4.1.4  **Reference URL:** https://github.com/andredasilvapinto/spring-petclinic/commit/e2a1d03ad0909c7ef1cbcfcfc4986325515185b8  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2015-01-18T11:49:21Z","2019-01-11T19:03:17Z"
"","17743","Old link to SnakeYAML [SPR-13152]","**[Andrey Somov](https://jira.spring.io/secure/ViewProfile.jspa?name=asomov)** opened **[SPR-13152](https://jira.spring.io/browse/SPR-13152?redirect=false)** and commented  SnakeYAML has migrated from Google code to Bitbucket. The documentation contains old URL for SnakeYAML at: http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html  It would be better to point to this URL: www.snakeyaml.org  Andrey (SnakeYAML developer)   --- No further details from [SPR-13152](https://jira.spring.io/browse/SPR-13152?redirect=false)","closed","status: invalid,","spring-projects-issues","2015-06-22T00:04:42Z","2019-01-12T05:24:08Z"
"","17855","Not possible to distinguish between unary negation and subtraction in OperatorOverloader [SPR-13264]","**[Andrew Whitehead](https://jira.spring.io/secure/ViewProfile.jspa?name=agib)** opened **[SPR-13264](https://jira.spring.io/browse/SPR-13264?redirect=false)** and commented  Within the default minus operator handling (org.springframework.expression.spel.ast.OpMinus), when there is no right operand then the operation is assumed to be a unary minus.  When this is handled by the OperatorOverloader, it is called with the value of the left operand, and null for the value of the right.  When there is a left and right operand, both left value and right value are passed to the OperatorOverloader.  Unfortunately this means there is no way to distinguish between ""-#foo"" and ""#foo - null"" from the OperatorOverloader. Both look the same (left value is the contents of #foo, right value is null).  Would it be possible to give us some way that we can handle this situation?   --- No further details from [SPR-13264](https://jira.spring.io/browse/SPR-13264?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-07-22T04:18:24Z","2019-01-12T02:26:39Z"
"","17853","Allow default operations to be overridden by checking OperatorOverloader before performing default [SPR-13262]","**[Andrew Whitehead](https://jira.spring.io/secure/ViewProfile.jspa?name=agib)** opened **[SPR-13262](https://jira.spring.io/browse/SPR-13262?redirect=false)** and commented  We're using SpEL to allow some calculations to be configured within our system. However we're running into some issues with how the number types are handled by default.  **Example 1** For the expression ""new java.math.BigDecimal(10) / new java.math.BigDecimal(100)"" we would _expect_ the result to be a BigDecimal containing ""0.1"". However within org.springframework.expression.spel.ast.OpDivide the scale of the resultant BigDecimal is being set to 0 (the maximum of the operand scales), which causes the result to be ""0"".  In addition the rounding mode is set to HALF_EVEN, which is not what we require.  **Example 2** For the expression ""10 / 100"" we would _like_ the result to be a BigDecimal containing ""0.1"". Of course we understand the behaviour at the moment treats it as an integer operation, which results in ""0"", but this is not what our users configuring the system would expect.  **Suggestion** Both these issues could be resolved if the OperatorOverloader was used before falling back to the default behaviour if it does not override the current operation.  This would allow us to override the operations on BigDecimal so that we can set the scale and rounding mode according to our needs. We could then also override the Integer (and any other Number) operations to use BigDecimals, avoiding any rounding/floating point errors.   --- No further details from [SPR-13262](https://jira.spring.io/browse/SPR-13262?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-07-22T01:40:07Z","2019-01-12T02:26:41Z"
"","17822","Allow Collection Selection/Projection to be applied to instances of Iterable [SPR-13231]","**[Andrew Whitehead](https://jira.spring.io/secure/ViewProfile.jspa?name=agib)** opened **[SPR-13231](https://jira.spring.io/browse/SPR-13231?redirect=false)** and commented  Currently Collection Selection/Projection only operates on Maps, Collections and Arrays.  It would be nice if it also supported instances of Iterator and Iterable so that the same functionality can be achieved without requiring user objects to implement the entire Collection interface, or wrapping them in a Collection.  The implementation of org.springframework.expression.spel.ast.Selection#getValueRef and org.springframework.expression.spel.ast.Projection#getValueRef only iterate over the collections anyway (after copying them into a List), so it doesn't seem like the extra functionality in Collection is required.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0783a1c667f9fbd34d4b86bc7d4204d8f4e04ee4","closed","type: enhancement,","spring-projects-issues","2015-07-14T05:39:19Z","2015-07-15T09:05:10Z"
"","17522","Ability to query an ApplicationContext for annotations on a bean [SPR-12929]","**[Andres Almiray](https://jira.spring.io/secure/ViewProfile.jspa?name=aalmiray)** opened **[SPR-12929](https://jira.spring.io/browse/SPR-12929?redirect=false)** and commented  Currently the ApplicationContext is capable of resolving beans and beans names given an annotation but the reverse is not, that is, obtain an annotation given a bean name.  Currently annotation metadata is harvested and stored in `org.springframework.core.type.AnnotationMetadata` but the actual annotation is not.  For reference, this feature was discussed with Jürgen at Voxxed Days Ticino 2015 in the context of a generic, external JSR-330 compatible API on top of Spring and Guice.  ---  **Affects:** 4.1.6  **Issue Links:** - #17723 Support dynamic bean lookup a la CDI's Instance type - #13532 Convenient programmatic bean retrieval with qualifiers  2 votes, 4 watchers","open","type: enhancement,","spring-projects-issues","2015-04-18T06:44:08Z","2021-08-16T14:43:28Z"
"","17499","Spring logs FactoryBean type check warning in case of factory method with arguments [SPR-12900]","**[Andrei](https://jira.spring.io/secure/ViewProfile.jspa?name=stanand)** opened **[SPR-12900](https://jira.spring.io/browse/SPR-12900?redirect=false)** and commented  I have two configuration files:  ``` @Configuration public class FactoryBeansContext {      @Bean     public HessianProxyFactoryBean deviceServiceHessianProxyFactoryBean(final Environment env) {         final HessianProxyFactoryBean factory = new HessianProxyFactoryBean();         factory.setProxyFactory(miHessianProxyFactoy(env));         factory.setServiceUrl(env.getProperty(PropertyConstants.URL));         factory.setServiceInterface(com.mi.eas.service.DeviceService.class);         factory.setOverloadEnabled(true);         return factory;     }      @Bean     public static MIHessianProxyFactory miHessianProxyFactoy(final Environment env) {         final MIHessianProxyFactory bean = new MIHessianProxyFactory();         bean.setUserName(env.getProperty(PropertyConstants.USER_ID));         bean.setEncryptedPassword(env.getProperty(PropertyConstants.ENCRYPTED_PASSWORD));         return bean;     }  } ```  ``` @Configuration @ComponentScan(some package here)  public class Context {      @Autowired     private Environment env;      @Autowired     private FactoryBeansContext factoryBeansContext;      @Bean      public DeviceService deviceService() {         return (DeviceService)this.factoryBeansContext.deviceServiceHessianProxyFactoryBean(this.env).getObject();     }  } ```  Here MIHessianProxyFactory extends com.caucho.hessian.client.HessianProxyFactory  When i run my application Spring tries to create deviceServiceHessianProxyFactoryBean.  It goes to AbstractAutowireCapableBeanFactory#getSingletonFactoryBeanForTypeCheck and execute method #beforeSingletonCreation.  In #beforeSingletonCreation  method it puts bean name ""deviceServiceHessianProxyFactoryBean"" in singletonsCurrentlyInCreation List.  Than it goes to AbstractAutowireCapableBeanFactory#createBeanInstance() method and tries to create deviceServiceHessianProxyFactoryBean bean.  But inside #createBeanInstance() method Srping calls #beforeSingletonCreation() method one more time and it throws BeanCurrentlyInCreationException because it was already called for this bean.  Of cause it is correct situation if i have circular dependencies but there are no circular dependencies in my config.  There are two stack traces below. See comments in both stack traces.  ``` ""localhost-startStop-1@305"" daemon prio=5 tid=0x10 nid=NA runnable   java.lang.Thread.State: RUNNABLE  // #beforeSingletonCreation() method put  ""deviceServiceHessianProxyFactoryBean"" name in singletonsCurrentlyInCreation list  	  at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.beforeSingletonCreation(DefaultSingletonBeanRegistry.java:349)  // #getSingletonFactoryBeanForTypeCheck method calls  #beforeSingletonCreation() method  	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck(AbstractAutowireCapableBeanFactory.java:856)    	  - locked <0x449> (a java.util.concurrent.ConcurrentHashMap) 	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:790) 	  at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:542) 	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:436) 	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:404) 	  at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187) 	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1112) 	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1051) 	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:949) 	  at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813) 	  at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) 	  at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:464) 	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1111) 	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1006) 	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) 	  at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) 	  at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) 	  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) 	  at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:150) 	  at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606) 	  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:462) 	  - locked <0x7a2> (a java.lang.Object) 	  at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:403) 	  at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306) 	  at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:106) 	  at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4992) 	  at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5492) 	  - locked <0x434> (a org.apache.catalina.core.StandardContext) 	  at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) 	  at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901) 	  at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877) 	  at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:649) 	  at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:1081) 	  at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1877) 	  at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) 	  at java.util.concurrent.FutureTask.run(FutureTask.java:266) 	  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	  at java.lang.Thread.run(Thread.java:745) ```  ```  ""localhost-startStop-1@3"" daemon prio=5 tid=0xf nid=NA runnable   java.lang.Thread.State: RUNNABLE  // here Spring calls #beforeSingletonCreation() for same bean second time but ""deviceServiceHessianProxyFactoryBean"" bean is already there  	  at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.beforeSingletonCreation(DefaultSingletonBeanRegistry.java:346)  	  at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) 	  - locked <0x2ae> (a java.util.concurrent.ConcurrentHashMap) 	  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) 	  at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1421) 	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:802) 	  at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:542) 	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:436) 	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:404) 	  at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187) 	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1112) 	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1051) 	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:949) 	  at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813) 	  at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) 	  at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:464) 	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1111)   // Spring tries to create ""deviceServiceHessianProxyFactoryBean"" bean and during creation it tries to call #beforeSingletonCreation() one more time   	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1006)   	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck(AbstractAutowireCapableBeanFactory.java:860)   	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:790) 	  at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:542) 	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:436) 	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:404) 	  at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187) 	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1112) 	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1051) 	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:949) 	  at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813) 	  at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) 	  at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:464) 	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1111) 	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1006) 	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) 	  at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) 	  at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) 	  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) 	  at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:150) 	  at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606) 	  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:462) 	  - locked <0x7bc> (a java.lang.Object) 	  at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:403) 	  at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306) 	  at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:106) 	  at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4992) 	  at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5492) 	  - locked <0x278> (a org.apache.catalina.core.StandardContext) 	  at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) 	  at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901) 	  at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877) 	  at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:649) 	  at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:1081) 	  at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1877) 	  at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) 	  at java.util.concurrent.FutureTask.run(FutureTask.java:266) 	  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	  at java.lang.Thread.run(Thread.java:745) ```  ---  **Affects:** 4.1.4  **Issue Links:** - #18406 Lot of undesired WARN logs after migration from Spring 3 to Spring 4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/65ba72f1fc61c5424564cc94267d9a0733645851, https://github.com/spring-projects/spring-framework/commit/56f8d17b0c056391874d9a801838acc8b2acf335","closed","type: enhancement,","spring-projects-issues","2015-04-09T15:59:51Z","2019-01-11T21:09:43Z"
"","17505","Using CharacterEncodingFilter with FormHttpMessageConverter [SPR-12906]","**[Andrei Tuzhilin](https://jira.spring.io/secure/ViewProfile.jspa?name=astorath)** opened **[SPR-12906](https://jira.spring.io/browse/SPR-12906?redirect=false)** and commented  The problem occur when embedded Tomcat (or Jetty) container receives ""application/x-www-form-urlencoded"" request without encoding specified and CharacterEncodingFilter is setup to force encoding other than UTF-8.  * When using **CharacterEncodingFilter**, Spring adds _characterEncoding_ property to the request. * Request is parsed by container itself (Tomcat). * Then **FormHttpMessageConverter** calls _inputMessage.getBody()_ on **ServletServerHttpRequest**. * **ServletServerHttpRequest** uses _getBodyFromServletRequestParameters_ instead of raw input. * _getBodyFromServletRequestParameters_ rebuild input form with **UTF-8** encoding (hardcoded). * **FormHttpMessageConverter** reads encoding from _contentType_ (which is forced to encoding, setup in **CharacterEncodingFilter**).  There are two problems here: * I'm unable to use **CharacterEncodingFilter** with encoding other than **UTF-8**. * All requests are parsed twice (by container itself and by spring converter).    ---  **Affects:** 4.1.6","closed","status: bulk-closed,","spring-projects-issues","2015-04-13T13:18:38Z","2019-01-12T00:17:25Z"
"","17465","Make ListenableFuture chainable [SPR-12867]","**[Andrei Tuzhilin](https://jira.spring.io/secure/ViewProfile.jspa?name=astorath)** opened **[SPR-12867](https://jira.spring.io/browse/SPR-12867?redirect=false)** and commented  In #16440 there was a proposal to add chainable Future callbacks, like google guava ListenableFuture does.  [Here](https://github.com/sdeleuze/spring-framework/commit/53523b912c700f723bdd6bb30fbc362dcd283ae3) is the the code by [Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze).  PS: Why not just use Google guava or Reactor promises for that, instead of adding Yet Another Listenable Future Implementation?  ---  **Affects:** 4.1.6  **Issue Links:** - #16440 Make ListenableFuture lambda compliant","closed","type: enhancement,","spring-projects-issues","2015-03-31T01:50:39Z","2019-01-11T21:36:31Z"
"","17966","MessageHeaders mutable through Map.Entry.setValue() [SPR-13385]","**[Andrei Amariei](https://jira.spring.io/secure/ViewProfile.jspa?name=andrei.amariei)** opened **[SPR-13385](https://jira.spring.io/browse/SPR-13385?redirect=false)** and commented  `org.springframework.messaging.MessageHeaders` can be modified using `Map.Entry.setValue()` method like in the following snippet:  ```java Integer value = 123; Map map = new HashMap(); map.put(""test"", value); MessageHeaders headers = new MessageHeaders(map); headers.entrySet().iterator().next().setValue(124); ```  Immutability should be achievable using something like in `java.util.Collections.UnmodifiableMap.entrySet()`  Doesn't seem like a big problem, but it's in contradiction with the documentation of the class which describes it as immutable  ---  **Affects:** 4.2 GA  **Issue Links:** - #18117 MessageHeaders is declared immutable - but writeObject() removes any non-serializable fields  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8cd283729b3cb8f1ed5499f9d60b201d6fb03f23","closed","type: bug,","spring-projects-issues","2015-08-24T00:50:24Z","2019-01-11T18:18:51Z"
"","17304","When using CsrfRequestDataValueProcessor, the hidden field with the CSRF token is put into an unnecessarily created div element [SPR-12707]","**[Andreas R.](https://jira.spring.io/secure/ViewProfile.jspa?name=an-re)** opened **[SPR-12707](https://jira.spring.io/browse/SPR-12707?redirect=false)** and commented  When using CsrfRequestDataValueProcessor (with configuration mentioned in https://jira.spring.io/browse/SPR-6125?focusedCommentId=97055&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-97055), i.e.:  ```                                            ```  to fill the CSRF token automatically into the forms generated by spring form, the hidden field for the CSRF token is put into a div which is unnecessary (and may sometime break the layout):  ```     ...    ```  For  a GET request there is still a div added, even though CSRF token is not necessary and not included in this case:  ```  ...       ```  It would be better if this div would not be created because it is unnecessary (and can cause layout issues).  ---  **Affects:** 4.1.4  **Issue Links:** - #15554 FormTag generates hidden fields from RequestDataValueProcessor.getExtraHiddenFields(...) without container, resulting in invalid xhtml  2 votes, 7 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-02-10T11:01:19Z","2020-11-04T14:05:14Z"
"","17361","When a DeferredResult hits its timeout the Response seems to be in an illegal state [SPR-12764]","**[Andreas Kluth](https://jira.spring.io/secure/ViewProfile.jspa?name=andreask)** opened **[SPR-12764](https://jira.spring.io/browse/SPR-12764?redirect=false)** and commented  When the following code snippet is executed on Tomcat 7.0.59/8.0.20 or Jetty 9.2.9 instead of an error page either nothing (Tomcat) or a ""Service Unavailable"" (Jetty) page is displayed.  Instead of the above behaviour the default (Spring Boot) white-label error page should be handling the faulty request, however fails at: `org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration.SpelView.render(Map, HttpServletRequest, HttpServletResponse)`  I observed a similar issue: https://github.com/spring-projects/spring-boot/issues/1920 which was fixed in tomcat; however this scenario seems to be Spring Web MVC specific.  ### Sample Source  ``` @Controller @EnableAutoConfiguration public class Application {      @RequestMapping(""/"")     @ResponseBody     DeferredResult home() {         DeferredResult result = new DeferredResult<>(2000);         ForkJoinPool.commonPool().execute(() -> {             doHeavyWork(result);         });         return result;     }      private void doHeavyWork(DeferredResult result) {         try {             Thread.sleep(3000);         }         catch (InterruptedException e) {             Thread.interrupted();         }         result.setResult(""Hello World"");     }      public static void main(String[] args) throws Exception {         SpringApplication.run(Application.class, args);     } } ```  ### Stacktrace Jetty:  ``` org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalStateException: STREAM 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:978) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:618) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:725) 	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:808) 	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:587) 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) 	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:595) 	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223) 	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127) 	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) 	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185) 	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061) 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) 	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) 	at org.eclipse.jetty.server.Server.handleAsync(Server.java:553) 	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:347) 	at org.eclipse.jetty.server.HttpChannel.run(HttpChannel.java:261) 	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635) 	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555) 	at java.lang.Thread.run(Unknown Source) Caused by: java.lang.IllegalStateException: STREAM 	at org.eclipse.jetty.server.Response.getWriter(Response.java:920) 	at org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$SpelView.render(ErrorMvcAutoConfiguration.java:196) 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1228) 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1011) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:955) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) 	... 21 common frames omitted ```  ### Tomcat 8.0.20  ``` java.lang.IllegalStateException: Cannot forward after response has been committed 	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:328) 	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:318) 	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:439) 	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:305) 	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:399) 	at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:434) 	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:289) 	at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1705) 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:650) 	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Unknown Source) ```    ---  **Affects:** 4.1.5","closed","status: declined,","spring-projects-issues","2015-02-27T14:21:12Z","2019-01-12T16:23:33Z"
"","17834","Inconsistent JPA behavior using no transaction, propagation SUPPORTS and OpenEntityManager pattern [SPR-13243]","**[Andreas Benneke](https://jira.spring.io/secure/ViewProfile.jspa?name=abeani)** opened **[SPR-13243](https://jira.spring.io/browse/SPR-13243?redirect=false)** and commented  We are using JPA (Hibernate 4) with Spring 4 managing the JTA transactions. To allow lazy initialization even when simply reading from the database without any transaction we added the ""OpenEntityManager"" pattern.  We know that there is a difference between having no transaction synchronization at all and SUPPORTS synchronization. But the JPA behaviour seems to be inconsistent somehow:  * If there is no transaction synchronization active, we get a TransactionRequiredException from Springs SharedEntityManagerCreator when trying to persist something using JPA. * If there is only a SUPPORTS transaction synchronization active, we don't get this exception and the persist request is silently ignored. This however is exactly the situation to avoid in the SharedEntityManagerCreator when creating the above exception. * If there is an ""OpenEntityManager"" pattern active, there is no exception also and the persist request is silently ignored as well.  In my opinion there is no real difference between these situations and I would expect to see this exception in all cases or none?  You can find a test case for these questions on GitHub https://github.com/abenneke/sandbox/tree/master/spring-hibernate4-transaction  ---  **Affects:** 4.1.7  **Reference URL:** http://stackoverflow.com/questions/27346975  **Issue Links:** - #16541 Shared EntityManager should immediately throw TransactionRequiredException if no transaction in progress - #17833 Transaction propagation SUPPORTS leads to “HHH000326: Cannot join transaction” warning - #18944 Shared EntityManager's target lookup doesn't work with Spring Data's ChainedTransactionManager - #18411 Regression: Shared EntityManager proxy insists on actualTransactiveActive flag even with SYNCHRONIZATION_NEVER  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7e2a662f637a1b2cecb2d99a6c1d119cd1b4acbf, https://github.com/spring-projects/spring-framework/commit/fca33f53e3cef7c15cec636a0a7b74dba49c0078  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-07-16T15:12:04Z","2019-01-11T18:04:06Z"
"","17833","Transaction propagation SUPPORTS leads to “HHH000326: Cannot join transaction” warning [SPR-13242]","**[Andreas Benneke](https://jira.spring.io/secure/ViewProfile.jspa?name=abeani)** opened **[SPR-13242](https://jira.spring.io/browse/SPR-13242?redirect=false)** and commented  We are using JPA (Hibernate 4) with Spring 4 managing the JTA transactions. To allow lazy initialization even when simply reading from the database without any transaction we added the ""OpenEntityManager"" pattern.  However with this pattern active, Spring tries to join the already open entity manager to a SUPPORTS transaction as well (EntityManagerFactoryUtils.doGetTransactionalEntityManager). Hibernate however denies this request with a (somehow misleading) warning:  ``` WARN: HHH000326: Cannot join transaction: do not override hibernate.transaction.factory_class ```  I think that joinTransaction() should only be called if TransactionSynchronizationManager.isActualTransactionActive()?  You can find a test case for this issue on GitHub https://github.com/abenneke/sandbox/tree/master/spring-hibernate4-transaction - this case is covered in openEntityManagerSupports test.  Thank you!  ---  **Affects:** 4.1.7  **Reference URL:** http://stackoverflow.com/questions/27345538  **Issue Links:** - #18411 Regression: Shared EntityManager proxy insists on actualTransactiveActive flag even with SYNCHRONIZATION_NEVER - #17834 Inconsistent JPA behavior using no transaction, propagation SUPPORTS and OpenEntityManager pattern  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2f8ac91872f64094084bac90bc1c8c7f4908f406","closed","type: enhancement,","spring-projects-issues","2015-07-16T14:48:46Z","2019-01-11T18:04:08Z"
"","17245","Support for java.util.Optional as a @RequestPart [SPR-12644]","**[Anderson Vaz](https://jira.spring.io/secure/ViewProfile.jspa?name=avaz)** opened **[SPR-12644](https://jira.spring.io/browse/SPR-12644?redirect=false)** and commented  In issue #16448 was introduced support for java.util.Optional for `@ResquestParam` Controllers method parameters however it was not spread to `@RequestPart` parameters. Attached is a project Spring Boot demonstrating the issue. When the parameter is `@RequestPart` and Optional, Spring can't convert the value.  I think that would be nice to have this feature implemented for `@RequestPart` parameters too.  Thanks!  ---  **Affects:** 4.1.3, 4.1.4  **Reference URL:** https://github.com/avaz/spring-bug-optional-requestpart.git  **Issue Links:** - #16448 Support for java.util.Optional as a `@RequestParam` - #18328 Second call to MVC handler method with Optional parameter fails with argument type mismatch - #18423 RequestPartMethodArgumentResolver should defensively handle MethodParameter nesting level and java.util.Optional access - #18422 MultipartFile argument requires multipart request even when optional (and empty) - #19574 Support for java.util.Optional as a `@RequestBody`","closed","type: enhancement,","spring-projects-issues","2015-01-19T13:56:48Z","2019-01-13T05:42:45Z"
"","17816","SimpleClientHttpRequestFactory: headers with null values should be sent as empty Strings [SPR-13225]","**[Anatoly Deyneka](https://jira.spring.io/secure/ViewProfile.jspa?name=deyneka)** opened **[SPR-13225](https://jira.spring.io/browse/SPR-13225?redirect=false)** and commented  RestTemplate+SimpleClientHttpRequestFactory: All headers with null values are sent without colon. Such requests are rejected by HAProxy(\). BTW it's correctly processed in HttpComponentsClientHttpRequestFactory  ```java HttpHeaders requestHeaders = new HttpHeaders(); requestHeaders.set(""some-header"", null); HttpEntity entity = new HttpEntity<>(requestHeaders); restTemplate.exchange(url, HttpMethod.GET, entity, SomeResponse.class); ```  ---  **Affects:** 4.1.6  **Issue Links:** - #22120 Consistent handling of null header values in HttpHeaders  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de6bbe7797ec3c310c1e302f669ddf9a0b57950c","closed","type: enhancement,","spring-projects-issues","2015-07-13T02:25:43Z","2019-01-11T18:05:48Z"
"","17191","No clear migration guide from 4.0 to 4.1 (-> dependency versions) [SPR-12590]","**[Amr Mostafa](https://jira.spring.io/secure/ViewProfile.jspa?name=amr.mostafa)** opened **[SPR-12590](https://jira.spring.io/browse/SPR-12590?redirect=false)** and commented  I'd like to claim that the referenced document is only geared toward those who are upgrading from 3.x to 4.x, and is pretty confusing for those who were on 4.0 and upgrading to 4.1, it doesn't indicate what needs to be done.  After simply updating the version in my build, running the project and getting exceptions, I had to check around until I found out that 4.1 require upgraded versions of the optional dependencies. I wouldn't make an issue out of it for smaller projects, but this is Spring.  ---  **Reference URL:** https://github.com/spring-projects/spring-framework/wiki/Migrating-from-earlier-versions-of-the-Spring-Framework  **Issue Links:** - #17192 Migration guide from 4.1 to 4.2 (deprecations etc)","closed","","spring-projects-issues","2015-01-01T02:20:17Z","2019-01-11T18:38:19Z"
"","17970","Support triggers & stored procedures alongside standard statements in SQL scripts [SPR-13389]","**[Amol Khanolkar](https://jira.spring.io/secure/ViewProfile.jspa?name=amolskh)** opened **[SPR-13389](https://jira.spring.io/browse/SPR-13389?redirect=false)** and commented  #### Status Quo  In the current version of Spring we cannot execute an SQL script like the following if the script also contains standard SQL statements (e.g., `INSERT`, `DELETE`, etc.), because nested semicolons in the trigger declaration are interpreted as the _default statement separator_.  ```sql CREATE TRIGGER {TriggerNameName} 	BEFORE INSERT ON  {TableName}  		FOR EACH ROW BEGIN  			SET NEW.date_modified = CURTIME(6); 			SET NEW.modified_by = USER();  		END; ```  We can easily fix this by escaping the semicolons within the trigger declaration like this:  ```sql CREATE TRIGGER {TriggerNameName} 	BEFORE INSERT ON  {TableName}  		FOR EACH ROW BEGIN  			SET NEW.date_modified = CURTIME(6)\; 			SET NEW.modified_by = USER()\;  		END\; ; ```  #### Proposal  Actually I see the following snippet in the source code for `ScriptUtils`:  ```java if (inEscape) { 	inEscape = false; 	sb.append(c); 	continue; } // MySQL style escapes if (c == '\\') { 	inEscape = true; 	sb.append(c); 	continue; } ```  Modifying as follows fixes the issue. I am not sure why in original code Escape String was appended to the `StringBuffer`.  ```java if (inEscape) { 	inEscape = false; 	sb.append(c); 	continue; } // MySQL style escapes if (c == '\\') { 	inEscape = true; 	continue; } ```  ---  **Affects:** 4.1.7  **Issue Links:** - #13459 Support per-script statement separator configuration for SQL scripts - #16310 Support EOF as statement separator in SQL scripts","closed","type: enhancement,","spring-projects-issues","2015-08-24T19:43:50Z","2019-01-11T18:19:05Z"
"","18001","is not compatible with WebSphere PMI [SPR-13422]","**[Amitabh](https://jira.spring.io/secure/ViewProfile.jspa?name=amsrivastava)** opened **[SPR-13422](https://jira.spring.io/browse/SPR-13422?redirect=false)** and commented  When using  in the dispatcher servlet in the WebSphere version 8.5.5.4 Full WebSphere Profile (not WebSphere Liberty) with PMI enabled, org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler dispatches static resource requests to WebSphere SimpleFileServlet which, according to IBM WebSphere team, is not supported anymore in the new architecture of WebSphere container. For every static resource we get the PMI error below.  8/27/15 0:42:15:989 IST] 000000a6 PmiRegistry   W   CWPMI0023W: Unable to register PMI module due to duplicate name: SimpleFileServlet [8/27/15 0:42:15:994 IST] 000000a6 StatsFactoryU W   CWPMI0103W: Unable to register custom PMI module due to duplicate name under the same parent or invalid PMI tree path: SimpleFileServlet [8/27/15 0:42:16:007 IST] 000000a6 stats         E com.ibm.ws.wswebcontainer.stats.ServletPmiModule ServletPmiModule SRVE8087E: Error creating PMI statistics instance. [8/27/15 0:42:16:009 IST] 000000a6 ServletWrappe I com.ibm.ws.webcontainer.servlet.ServletWrapper init SRVE0242I: [forecasting] [/] [SimpleFileServlet]: Initialization successful. [8/27/15 0:42:16:185 IST] 000000a6 ServletWrappe I com.ibm.ws.webcontainer.servlet.ServletWrapper init SRVE0242I: [forecasting] [/] [cssServlet]: Initialization successful. [8/27/15 0:42:16:343 IST] 000000a6 PmiRegistry   W   CWPMI0023W: Unable to register PMI module due to duplicate name: SimpleFileServlet [8/27/15 0:42:16:345 IST] 000000a6 StatsFactoryU W   CWPMI0103W: Unable to register custom PMI module due to duplicate name under the same parent or invalid PMI tree path: SimpleFileServlet [8/27/15 0:42:16:348 IST] 000000a6 stats         E com.ibm.ws.wswebcontainer.stats.ServletPmiModule ServletPmiModule SRVE8087E: Error creating PMI statistics instance. [8/27/15 0:42:16:350 IST] 000000a6 ServletWrappe I com.ibm.ws.webcontainer.servlet.ServletWrapper init SRVE0242I: [forecasting] [/] [SimpleFileServlet]: Initialization successful. [8/27/15 0:42:16:377 IST] 000000a6 PmiRegistry   W   CWPMI0023W: Unable to register PMI module due to duplicate name: SimpleFileServlet [8/27/15 0:42:16:380 IST] 000000a6 StatsFactoryU W   CWPMI0103W: Unable to register custom PMI module due to duplicate name under the same parent or invalid PMI tree path: SimpleFileServlet [8/27/15 0:42:16:384 IST] 000000a6 stats         E com.ibm.ws.wswebcontainer.stats.ServletPmiModule ServletPmiModule SRVE8087E: Error creating PMI statistics instance. [8/27/15 0:42:16:386 IST] 000000a6 ServletWrappe I com.ibm.ws.webcontainer.servlet.ServletWrapper init SRVE0242I: [forecasting] [/] [SimpleFileServlet]: Initialization successful. [8/27/15 0:42:17:204 IST] 000000a6 ServletWrappe I com.ibm.ws.webcontainer.servlet.ServletWrapper init SRVE0242I: [forecasting] [/] [/csrf/token.jsp]: Initialization successful. [8/27/15 0:42:17:239 IST] 000000a6 PmiRegistry   W   CWPMI0023W: Unable to register PMI module due to duplicate name: SimpleFileServlet [8/27/15 0:42:17:240 IST] 000000a6 StatsFactoryU W   CWPMI0103W: Unable to register custom PMI module due to duplicate name under the same parent or invalid PMI tree path: SimpleFileServlet [8/27/15 0:42:17:241 IST] 000000a6 stats         E com.ibm.ws.wswebcontainer.stats.ServletPmiModule ServletPmiModule SRVE8087E: Error creating PMI statistics instance.   ---  **Affects:** 4.2.1  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2015-09-02T15:31:14Z","2015-11-04T14:04:11Z"
"","17370","Documentation the limitation of injecting components in @Configuration classes [SPR-12773]","**[Amit Gadkari](https://jira.spring.io/secure/ViewProfile.jspa?name=amitashokgadkari)** opened **[SPR-12773](https://jira.spring.io/browse/SPR-12773?redirect=false)** and commented  I have `@Configuration` class with `@EnableAspectJAutoProxy`. In this class I have injected `@Autowired` `@Qualifier`(value=""customerService"") private CustomerService customerService;  Code for CustomerService is as follows  `@Service`(value=""customerService"") public class CustomerServiceImpl implements CustomerService  In this customerService class I have `@Transactional` method which is also present in Service Interface class  In `@Configuration` class instead of proxy instance of CustomerService I get instance of customerServiceImpl. Hence transaction management is not working in application. If I use applicationContext.getBean(""customerService"", CustomerService.class) and print classname name then also I am getting CustomerServiceImpl and not proxy.  I ran application 10 times a) 7 times I got instance of customerServiceImpl b) 3 times I got instance of proxy  My application works fine when I get instance of proxy I think this is bug in Spring JavaConfig  ---  **Affects:** 4.1.5  **Attachments:** - [sample-tomcat.7z](https://jira.spring.io/secure/attachment/22669/sample-tomcat.7z) (_644.37 kB_)  **Issue Links:** - #17875 Doc: Autowiring in `@Configuration` classes with post-processor definitions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c7fcf7cd4c7f40263b60ef7500a0d6a6fa737fac","closed","type: documentation,","spring-projects-issues","2015-03-02T02:12:50Z","2019-01-13T05:42:00Z"
"","17362","Set ignore if not found for imports [SPR-12765]","**[Alireza Fattahi](https://jira.spring.io/secure/ViewProfile.jspa?name=afattahi)** opened **[SPR-12765](https://jira.spring.io/browse/SPR-12765?redirect=false)** and commented  If one set the import element to a non existing folder the spring throws exception,  is it possible to set some flag for import which cause the spring to ignore if it could not find the specified folder.    ---  **Affects:** 4.1.4","closed","status: bulk-closed,","spring-projects-issues","2015-02-27T21:26:50Z","2019-01-12T03:29:49Z"
"","17993","org.springframework.web.client.MessageBodyClientHttpResponseWrapper.hasMessageBody() works improperly in some conditions [SPR-13414]","**[Alexey Ukhov](https://jira.spring.io/secure/ViewProfile.jspa?name=auk)** opened **[SPR-13414](https://jira.spring.io/browse/SPR-13414?redirect=false)** and commented  Function `org.springframework.http.HttpHeaders.getContentLength()` returns -1 if header `Content-Length` does not exist in response.  And in case if we have no body and no header `Content-Length` function returns `true` anyway.  In attached file is patch for this problem.  Also I've created pull request: https://github.com/spring-projects/spring-framework/pull/868   ---  **Affects:** 4.1.7  **Attachments:** - [MessageBodyClientHttpResponseWrapper.java.diff](https://jira.spring.io/secure/attachment/23093/MessageBodyClientHttpResponseWrapper.java.diff) (_775 bytes_)","closed","status: declined,","spring-projects-issues","2015-09-01T09:51:35Z","2019-01-12T16:22:58Z"
"","17552","ShallowEtagHeaderFilter breaks SockJS and HTTP streaming async responses [SPR-12960]","**[Alexander Zagumennikov](https://jira.spring.io/secure/ViewProfile.jspa?name=zgmnkv)** opened **[SPR-12960](https://jira.spring.io/browse/SPR-12960?redirect=false)** and commented  ShallowEtagHeaderFilter wraps response into ContentCachingResponseWrapper that does not pass body data to wrapped response body. If body data is written asynchronously after filter completes processing, data never goes to client.  This problem was found when using Spring WebSocket with SockJS in fallback mode. xhr-polling and xhr-streaming fallback options do not work with ShallowEtagHeaderFilter.  ShallowEtagHeaderFilter performs some checks to detect asynchronous request via WebAsyncManager, but WebAsyncManager seems to work only with Spring MVC annotated controllers, because I found only one usage of WebAsyncManager#setAsyncWebRequest - in RequestMappingHandlerAdapter.  Please, let me know if you need more details or examples to reproduce the issue.  Thanks   ---  **Affects:** 4.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/49e90575e90495447351f13d9ab24705cc221195  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2015-04-27T05:25:42Z","2020-10-06T08:31:03Z"
"","17207","Wrong TransactionManager selected when mixing @Transactional with and w/o qualifier [SPR-12606]","**[Alexander Imfeld](https://jira.spring.io/secure/ViewProfile.jspa?name=aimfeld)** opened **[SPR-12606](https://jira.spring.io/browse/SPR-12606?redirect=false)** and commented  When using multiple TransactionManagers and declarative transaction management with `@Transactional` (with and w/o qualifier) and `@EnableTransactionManagement`, the TransactionInterceptor will lookup and store the default transaction manager in TransactionAspectSupport#determineTransactionManager in case there is no qualifier. This TransactionManager will then also be used in case there actually is a qualifier (as soon as a transactionManager is set it in determineTransactionManager, it will be used for all further calls).  Seems to me it's not possible to have multiple TransactionManagers (e.g. 'transactionManager' and 'anotherTransactionManager) and mix qualified with non-qualified Transactional annotations (e.g. `@Transactional` and `@Transactional`(""anotherTransactionManager""))  Shouldn't qualifier based TransactionManager lookup be the primary mechanism to determine the TransactionManager in TransactionAspectSupport?  ---  **Affects:** 4.1.3  **Issue Links:** - [DATAJPA-657](https://jira.spring.io/browse/DATAJPA-657) TransactionManager reference is ignored when using Spring 4.1.4 - #17145 `@Transactional` qualifier is ignored by TransactionAspectSupport if default transaction manager is set - #17178 Regression in TransactionAspectSupport.determineTransactionManager(…)","closed","type: bug,","spring-projects-issues","2015-01-09T02:51:15Z","2019-01-13T05:42:56Z"
"","17788","Support HandlerMethod parameter in @MessageExceptionHandler [SPR-13196]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-13196](https://jira.spring.io/browse/SPR-13196?redirect=false)** and commented  I have a `@ControllerAdvice` that handles exceptions using `@MessageExceptionHandler` methods.  One of these methods has this kind of signature:  ```   @MessageExceptionHandler   @SendToUser(""/queue/errors"")   public StompRpcException handleException(BadParamException e, SimpMessageHeaderAccessor headerAccessor, HandlerMethod handlerMethod) { ... ```  and when it gets called spring fails with the following error:  ``` 2015-07-03 17:40:22.807 ERROR AnnotationMethodMessageHandler ndlerMethodException Error while processing handler method exception  org.springframework.messaging.converter.MessageConversionException: Could not read JSON: No suitable constructor found for type [simple type, class org.springframework.messaging.handler.HandlerMethod]: can not instantiate from JSON object (missing default constructor or creator, or perhaps need to add/enable type information?)  at [Source: [B@14019705; line: 1, column: 2]; nested exception is com.fasterxml.jackson.databind.JsonMappingException: No suitable constructor found for type [simple type, class org.springframework.messaging.handler.HandlerMethod]: can not instantiate from JSON object (missing default constructor or creator, or perhaps need to add/enable type information?)  at [Source: [B@14019705; line: 1, column: 2]         at org.springframework.messaging.converter.MappingJackson2MessageConverter.convertFromInternal(MappingJackson2MessageConverter.java:210)         at org.springframework.messaging.converter.AbstractMessageConverter.fromMessage(AbstractMessageConverter.java:181)         at org.springframework.messaging.converter.CompositeMessageConverter.fromMessage(CompositeMessageConverter.java:55)         at org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver.resolveArgument(PayloadArgumentResolver.java:113)         at org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77)         at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:129)         at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:102)         at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.processHandlerMethodException(AbstractMethodMessageHandler.java:496)         at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMatch(AbstractMethodMessageHandler.java:478)         at org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.handleMatch(SimpAnnotationMethodMessageHandler.java:456)         at org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.handleMatch(SimpAnnotationMethodMessageHandler.java:84)         at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMessageInternal(AbstractMethodMessageHandler.java:423)         at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMessage(AbstractMethodMessageHandler.java:361)         at org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.run(ExecutorSubscribableChannel.java:135)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at java.lang.Thread.run(Thread.java:745) Caused by: com.fasterxml.jackson.databind.JsonMappingException: No suitable constructor found for type [simple type, class org.springframework.messaging.handler.HandlerMethod]: can not instantiate from JSON object (missing default constructor or creator, or perhaps need to add/enable type information?)  at [Source: [B@14019705; line: 1, column: 2]         at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:148)         at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1080)         at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:295)         at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:142)         at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3564)         at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2705)         at org.springframework.messaging.converter.MappingJackson2MessageConverter.convertFromInternal(MappingJackson2MessageConverter.java:203)         ... 16 common frames omitted ```  ---  **Affects:** 4.2 RC2  **Issue Links:** - #17206 Provide access to the target HandlerMethod from `@ExceptionHandler` methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/97936140cc33fb0d5019f57a1f85ceef71a287df","closed","type: enhancement,","spring-projects-issues","2015-07-03T08:46:31Z","2019-01-13T05:40:03Z"
"","17653","spring initializr does not check valid package name [SPR-13061]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-13061](https://jira.spring.io/browse/SPR-13061?redirect=false)** and commented  The form asking data does not check for valid input so if for example one enters ""my project"" as package name, the resulting zip uses that name with spaces (and possibly other invalid characters for package names) and the project does not even compile   ---  **Reference URL:** http://start.spring.io/","closed","status: invalid,","spring-projects-issues","2015-05-22T11:30:58Z","2019-01-12T05:24:15Z"
"","17640","DataSourceInitializedEvent fired two times in a row during initialization [SPR-13048]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-13048](https://jira.spring.io/browse/SPR-13048?redirect=false)** and commented  I'm developing an app with spring boot 1.2.3 and noticed that a bean implementing the ApplicationListener interface, during boot receives the DataSourceInitializedEvent two times.  I suppose this is incorrect and that the event should be fired only once.   ---  **Affects:** 4.1.6","closed","in: core,","spring-projects-issues","2015-05-19T12:29:18Z","2019-01-12T05:24:20Z"
"","17338","Allow use of @JsonView on @MessageMapping methods [SPR-12741]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-12741](https://jira.spring.io/browse/SPR-12741?redirect=false)** and commented  It is my understanding that the selection of the view to be used in serialization as defined by #11815 is available only for `@ResponseBody` REST methods.  It would be very useful to be used also in `@MessageMapping` methods.  ---  **Affects:** 4.1.5  **Issue Links:** - #17293 Support global `@MessageExceptionHandler` (_**""depends on""**_) - #17323 MessageConverter implementation that marshals from/to XML - #17828 JsonView support for JMS - #17856 Jackson `@JsonView` deserialization support for `@MessageMapping` payloads  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/876c9694c4f5f01161a311e30c2ac2cdd37d0335","closed","type: enhancement,","spring-projects-issues","2015-02-21T02:51:08Z","2019-01-14T05:13:27Z"
"","17293","Support global @MessageExceptionHandler [SPR-12696]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-12696](https://jira.spring.io/browse/SPR-12696?redirect=false)** and commented  I find useful to annotate a class with `@ControllerAdvice` so that the same error handler is used for multiple controllers.  I would like to do the same, i.e. having some kind of class with a special annotation where I would put my `@MessageExceptionHandler` methods  ---  **Affects:** 4.1.4  **Issue Links:** - #17338 Allow use of `@JsonView` on `@MessageMapping` methods (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2015-02-05T13:41:22Z","2019-01-13T05:42:28Z"
"","17392","StandardMultipartHttpServletRequest.StandardMultipartFile not serializable [SPR-12795]","**[Alex Scroggins](https://jira.spring.io/secure/ViewProfile.jspa?name=scrogginsa)** opened **[SPR-12795](https://jira.spring.io/browse/SPR-12795?redirect=false)** and commented  Can StandardMultipartHttpServletRequest$StandardMultipartFile be made to implement Serializable like CommonsMultipartFile does?  I'm getting this error in a project using Spring Framework 4.1.1.RELEASE and Spring Web Flow 2.4.0.RELEASE: org.springframework.webflow.execution.repository.snapshot.SnapshotCreationException: Could not serialize flow execution  Caused by: java.io.NotSerializableException: org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile   ---  **Affects:** 3.2.13, 4.1.1, 4.1.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/474862a7c9e5e6a091ddd2309ccb726b778e02fe, https://github.com/spring-projects/spring-framework/commit/5ba7b89e29a8be73efe99c53940da00d8000617c, https://github.com/spring-projects/spring-framework/commit/6b9e89118f97a0a6e5ae5e3bc4460f63a9c321db  **Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)","closed","type: bug,","spring-projects-issues","2015-03-07T21:00:26Z","2015-03-25T09:42:33Z"
"","17250","Eager initialization of TransactionManagementConfigurer results in application failure [SPR-12649]","**[Alex Pogrebnyak](https://jira.spring.io/secure/ViewProfile.jspa?name=alex.spring@reflexion.net)** opened **[SPR-12649](https://jira.spring.io/browse/SPR-12649?redirect=false)** and commented  The issue is one of those described in this summary -> https://gist.github.com/dsyer/ebeb25d5afbdd9242cd5  Similar problem exists in version 3.2.5 of Spring Security and has been described in this report -> [SEC-2815](https://jira.spring.io/browse/SEC-2815)  Probably the fix for [SEC-2815](https://jira.spring.io/browse/SEC-2815) will be very similar for what is required to fix `AbstractTransactionManagementConfiguration` here.   ---  **Affects:** 4.1.4","closed","status: bulk-closed,","spring-projects-issues","2015-01-21T13:02:31Z","2019-01-12T03:30:19Z"
"","17637","mvcUrl is always rendering scheme+host+port, that should be optional only when absolute link is needed [SPR-13045]","**[Alex Panchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=apanchenko)** opened **[SPR-13045](https://jira.spring.io/browse/SPR-13045?redirect=false)** and commented   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ad4c8795ae13c94f942526765b5cf36ac6c3ae9b","closed","type: enhancement,","spring-projects-issues","2015-05-19T01:56:46Z","2019-01-11T16:01:23Z"
"","17635","Documentation typo in mvcUrl example - class/method name [SPR-13043]","**[Alex Panchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=apanchenko)** opened **[SPR-13043](https://jira.spring.io/browse/SPR-13043?redirect=false)** and commented  In http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-links-to-controllers-from-views  The controller is defined as  ``` public class MyController {    public HttpEntity getAddress(@PathVariable String country) { ... } } ```  however, jsp contains `s:mvcUrl('PC#getPerson')`   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cd9b58b0ab89f7d4e24a9010ca885c0810188fa9, https://github.com/spring-projects/spring-framework/commit/d686f615f6d207ef9ad554cf7a9850cebd977b10","closed","type: task,","spring-projects-issues","2015-05-18T07:36:46Z","2015-05-26T01:15:20Z"
"","17512","SmartInitializingSingleton.afterSingletonsInstantiated() is not called for lazy beans [SPR-12913]","**[Alex Panchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=apanchenko)** opened **[SPR-12913](https://jira.spring.io/browse/SPR-12913?redirect=false)** and commented  I understand that the primary purpose of this interface is to be implemented by non-lazy beans.  I have the following case: - initially developed as non-lazy bean, everything works as expected - some time later I change that bean to be lazy (e.g. `lazy-init=""true""` in xml) - it is not initialized anymore, and I have to change this interface to InitializingBean  I would suggest still calling this interface and logging a warning, that it is less useful in a lazy bean.  WDYT? Should I create a PR?  ---  **Affects:** 4.1.6  **Issue Links:** - #19417 ResourceHttpRequestHandler no longer works as prototype bean  1 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-04-15T05:05:08Z","2019-01-12T00:17:19Z"
"","17488","Regression in handling of String passed as Types.OTHER to JdbcTemplate [SPR-12890]","**[Alex Panchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=apanchenko)** opened **[SPR-12890](https://jira.spring.io/browse/SPR-12890?redirect=false)** and commented  For PostgreSQL if columns are defined as JSON or XML, then String values should be passed via setObject. We are doing that via JdbcTemplate. Now that code throws an exception after the change https://github.com/spring-projects/spring-framework/commit/759f430ba56d55d702ed2f0f07d468402a1202df from #13215 which always passes String via setString().  As I commented on the commit: IMHO JdbcTemplate should not be too smart - if I pass String as OTHER - it should reach the driver as is. OTHER is documented as ""indicates that the SQL type is database-specific and gets mapped to a Java object that can be accessed via the methods getObject and setObject"" So, probably some other place using OTHER is just not doing that correctly?  ---  **Affects:** 4.1 GA  **Issue Links:** - #16951 SqlTypes not propagated to database (_**""is duplicated by""**_) - #13215 Can't insert into nvarchar2 using SimpleJdbcInsert whereas it works with SimpleJdbcTemplate - #18688 Java boolean is not handled correctly when used with Oracle JDBC driver - #19954 Support for Oracle JDBC connection properties Ex: fixedString - #18398 Oracle 12c JDBC driver throws inconsistent exception from getParameterType (affecting setNull calls)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/050e581c103d61fe8cefb038748d83f2a9f09749, https://github.com/spring-projects/spring-framework/commit/e95a7a47c37486b0f9c41603eeb0aaebe6351cff","closed","in: core,","spring-projects-issues","2015-04-04T01:13:16Z","2019-01-11T21:34:40Z"
"","17500","Autowired fails upon upcasting with @Configurable [SPR-12901]","**[albert kam](https://jira.spring.io/secure/ViewProfile.jspa?name=moonblade.wolf@gmail.com)** opened **[SPR-12901](https://jira.spring.io/browse/SPR-12901?redirect=false)** and commented  I'm using load time weaving, `@Configurable`, `@Autowired`, and they all seem to be working properly until i make use of inheritance for my classes that uses `@Autowired`.  In my included context file and source code below (available in here and as attachments): This passes the test: Child child = new Child(); This fails the test: Parent parent = new Child();  Incredibily, one fail in one test method seems to affect all other working test methods.  Edit: Just found other similar cases, upcasting causes failures: http://stackoverflow.com/questions/9422200/aspectj-and-spring-ltw-doesnt-work-when-upcasting http://forum.spring.io/forum/spring-projects/aop/114130-aspectj-and-spring-ltw-doesn-t-work-when-upcasting  Any quick workarounds will be appreciated, very tight in schedule right now. Thank you very much.  Here's the working reproducable bug files  ```    	 	 	  	 	 	  	 	  ```  ``` package engine;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertNotNull;  import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Configurable; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;  import engine.tool.Tester;  // Run with jvm param of -javaagent:C:/Users/me/.m2/repository/org/springframework/spring-instrument/4.1.6.RELEASE/spring-instrument-4.1.6.RELEASE.jar -XX:-UseSplitVerifier @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations = { ""classpath:/bug-context.xml"" }) public class AutowiredNullTest { 	@Autowired Tester tester;  	@Test 	public void shouldNotBeNullSubjectUtils() { 		assertNotNull(this.tester); 	}  	@Test 	public void shouldBeNotNullTesterInParent() { 		Parent parent = new Parent(); 		assertEquals(this.tester.getName(), parent.getTesterName()); 	}  	@Test 	public void shouldBeNotNullTesterInParentFromChild() { 		Child child = new Child(); 		assertEquals(this.tester.getName(), child.getTesterName()); 	}  	// the working: Child child = new Child(); (see above) 	// the not working: Parent parent = new Child(); (see below) 	// Super strangely, if this method below is commented out, all tests will pass 	//   and if this method below were enabled, then all 3 other tests will go red 	@Test 	public void thisNullsTheAutowiredTesterInParent() { 		Parent parent = new Child(); 		assertEquals(this.tester.getName(), parent.getTesterName()); 	}  	@Configurable(preConstruction=true) 	public static class Parent { 		@Autowired Tester tester; 		private String testerName; 		public Parent() { 			this.testerName = this.tester.getName(); 		} 		public String getTesterName() { 			return this.testerName; 		} 	}  	@Configurable(preConstruction=true) 	public static class Child extends Parent { 		// nothing to add here 	} } ```  ``` package engine.tool;  public class TesterImpl implements Tester {  	@Override 	public String getName() { 		return this.getClass().getName(); 	}  } ```    ---  **Affects:** 4.1.6  **Reference URL:** http://none  **Attachments:** - [AutowiredNullTest.java](https://jira.spring.io/secure/attachment/22741/AutowiredNullTest.java) (_2.02 kB_) - [bug-context.xml](https://jira.spring.io/secure/attachment/22740/bug-context.xml) (_1.71 kB_) - [Tester.java](https://jira.spring.io/secure/attachment/22742/Tester.java) (_74 bytes_) - [TesterImpl.java](https://jira.spring.io/secure/attachment/22743/TesterImpl.java) (_157 bytes_)","closed","status: bulk-closed,","spring-projects-issues","2015-04-09T21:23:10Z","2019-01-12T00:17:30Z"
"","17901","No redirect to index.html for static resources inside a folder [SPR-13316]","**[Akshay Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=dolvic)** opened **[SPR-13316](https://jira.spring.io/browse/SPR-13316?redirect=false)** and commented  With Spring Boot, if I have a static file src/main/resources/public/index.html then navigating to http://\/ will redirect me to that file. However, if I have a file src/main/resources/public/subdir/index.html, then navigating to http://\/subdir/ will not redirect to /subdir/index.html. As a result loading the resource fails and I get an redirected to /error with a 404 response.  In 4.1.7 there was a small workaround. Using /subdir// would redirect me to page. However, in 4.2.0 both methods redirect me to /error.   ---  **Affects:** 4.1.7, 4.2 GA","closed","status: invalid,","spring-projects-issues","2015-08-04T13:46:48Z","2021-10-20T09:24:27Z"
"","17917","Add support for SpEL expressions and placeholders in caching annotation [SPR-13332]","**[Agim Emruli](https://jira.spring.io/secure/ViewProfile.jspa?name=agim)** opened **[SPR-13332](https://jira.spring.io/browse/SPR-13332?redirect=false)** and commented  Some users might have the need to use expresions in the cache name to externalize cache names. Users might have this use case in a cloud environment where cache names are stage dependent.  As outlined in the referenced issue, this can be solved outside. Nevertheless supporting expresions/placeholder could be beneficial also for other users.   ---  **Affects:** 4.2 GA  **Reference URL:** https://github.com/spring-cloud/spring-cloud-aws/issues/81","closed","in: core,","spring-projects-issues","2015-08-08T11:02:21Z","2019-01-12T05:23:58Z"
"","17455","Add support to enhance default resource loader [SPR-12857]","**[Agim Emruli](https://jira.spring.io/secure/ViewProfile.jspa?name=agim)** opened **[SPR-12857](https://jira.spring.io/browse/SPR-12857?redirect=false)** and commented  There are a few implementations of the resource loader already available that support custom protocols like S3 (https://github.com/spring-cloud/spring-cloud-aws/blob/master/spring-cloud-aws-core/src/main/java/org/springframework/cloud/aws/core/io/s3/PathMatchingSimpleStorageResourcePatternResolver.java) and HDFS (https://github.com/spring-projects/spring-hadoop/blob/master/spring-hadoop-core/src/main/java/org/springframework/data/hadoop/fs/HdfsResourceLoader.java)  that can not register easily within the application context. It would be great if the Spring Framework would allow to register some custom ResourceLoader so that the default one can be overriden and then used by the beans.  Currently it is hard / not possible to override the resource load if the user is using a ClasspathXmlApplicationContext (or any context that does not extend GenericApplicationContext).  ---  **Affects:** 4.1.6  **Issue Links:** - #19235 Improve documentation on ProtocolResolvers and ResourceLoaders. - #18479 Ability to add a custom ResourceLoader conveniently in AnnotationConfigWebApplicationContext or conveniently as can be done via spring boot  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0dff782402e93234d0714a9991419ff212b6c1d7, https://github.com/spring-projects/spring-framework/commit/37de0b241dc2f2da5b5d31d405cefdd96dafab29  0 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2015-03-27T10:27:52Z","2019-01-11T21:37:40Z"
"","17530","Enable easy overriding of @Import in @Configuration class hierarchies [SPR-12937]","**[Adrian Moos](https://jira.spring.io/secure/ViewProfile.jspa?name=bedag-moo)** opened **[SPR-12937](https://jira.spring.io/browse/SPR-12937?redirect=false)** and commented  We have a small in-house framework that registers some default beans with the ApplicationContext, but should be modular, and enable callers to override bean definitions in a compile-time checked manner.  For overriding, we provide `@Configuration` classes to be extended so our users can override the factory methods, and we achieve modularity by splitting configuration across several `@Configuration` classes, which are `@Imported` by the main class. We want that `@Import`, as our users should not have to be aware of these `@Configuration` classes until they want to change them, but our users also need the be able to override these imports. Alas, it appears that `@Import` can not be overridden.  **Alternatives** We would ask our users to `@Import` an ImportSelector, and provide them with a default implementation they can override, but that's quite a bit of boilerplate code - in particular because the `@Configuration` classes are defined in different JAR files.  Or we could ask our users to do bean definition overriding, but that is quite brittle (breaks silently if a bean is renamed), and introduce a hidden temporal coupling among imports.   --- No further details from [SPR-12937](https://jira.spring.io/browse/SPR-12937?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-04-20T09:39:06Z","2019-01-12T00:17:05Z"
"","17514","ConfigurationClassEnhancer.enhanceFactoryBean is not transparent for method calls other than getObject() [SPR-12915]","**[Adrian Moos](https://jira.spring.io/secure/ViewProfile.jspa?name=bedag-moo)** opened **[SPR-12915](https://jira.spring.io/browse/SPR-12915?redirect=false)** and commented  When a `@Bean` method returns an instance of a FactoryBean, Spring proxies the factory bean, redirecting calls to getObject() to applicationContext.getBean().  The relevant code reads:  ``` 	/** 	 * Create a subclass proxy that intercepts calls to getObject(), delegating to the current BeanFactory 	 * instead of creating a new instance. These proxies are created only when calling a FactoryBean from 	 * within a Bean method, allowing for proper scoping semantics even when working against the FactoryBean 	 * instance directly. If a FactoryBean instance is fetched through the container via &-dereferencing, 	 * it will not be proxied. This too is aligned with the way XML configuration works. 	 */ 	private Object enhanceFactoryBean(Class fbClass, final ConfigurableBeanFactory beanFactory, 			final String beanName) throws InstantiationException, IllegalAccessException {  		Enhancer enhancer = new Enhancer(); 		enhancer.setSuperclass(fbClass); 		enhancer.setUseFactory(false); 		enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE); 		enhancer.setCallback(new MethodInterceptor() { 			@Override 			public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable { 				if (method.getName().equals(""getObject"") && args.length == 0) { 					return beanFactory.getBean(beanName); 				} 				return proxy.invokeSuper(obj, args); // bug here? 			} 		}); 		return enhancer.create(); 	} ```  In the marked line, obj refers to the proxy object.  Therefore, calls to methods other than getObject() are forwarded to the super implementation **on the proxy object**, which has a different state than the FactoryBean it proxies.  This breaks the following usecase:  ```         @Bean         protected DBTool dbTool() {             return new DBTool(hibernateSessionFactory());         }          @Bean         protected AnnotationSessionFactoryBean hibernateSessionFactory() {              // hibernate setup goes here         } ```  where DBTool has a method:  ``` public void createSchema() {     annotationSessionFactory.createDatabaseSchema(); } ```  which now throws  ``` java.lang.IllegalStateException: SessionFactory not initialized yet 	at org.springframework.orm.hibernate3.AbstractSessionFactoryBean.getSessionFactory(AbstractSessionFactoryBean.java:215) 	at org.springframework.orm.hibernate3.LocalSessionFactoryBean.createDatabaseSchema(LocalSessionFactoryBean.java:989) 	at org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean$$EnhancerBySpringCGLIB$$2fba14bc.CGLIB$createDatabaseSchema$12() 	at org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean$$EnhancerBySpringCGLIB$$2fba14bc$$FastClassBySpringCGLIB$$52787a0.invoke() 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor$1.intercept(ConfigurationClassEnhancer.java:383) 	at org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean$$EnhancerBySpringCGLIB$$2fba14bc.createDatabaseSchema() 	at ch.bedag.ste.app.cf.hibernate.framework.DBTool.createSchema(DBTool.java:23) ```  because the proxy object is a factory that has not been configured.  ---  **Affects:** 4.1.2  **Issue Links:** - #11268 Calls to FactoryBean `@Bean` methods cause ClassCastException - #17686 CGLIB code generation failure for cross-`@Bean` FactoryBean call  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/063a720ac0f0848bc86946b891df27b828d58946, https://github.com/spring-projects/spring-framework/commit/1da98b054210b1bcb4e65cde66e378e034b1baa3, https://github.com/spring-projects/spring-framework/commit/6783ba2903e35ab3d13b9202272b3affea4826f2","closed","in: core,","spring-projects-issues","2015-04-15T09:44:05Z","2019-01-14T04:43:19Z"
"","17352","ProxyFactory should not discard objenesis cache, thereby enabling efficient proxy instantiation [SPR-12755]","**[Adrian Moos](https://jira.spring.io/secure/ViewProfile.jspa?name=bedag-moo)** opened **[SPR-12755](https://jira.spring.io/browse/SPR-12755?redirect=false)** and commented  We are using ProxyFactory to decorate Spring Beans when passing them over an api boundary to give each caller a proxy object of their own.  We have now noticed that proxy creation is quite an expensive process, taking 0.3 ms per proxy object, even though the proxies were all for the same target class in this test.  Analysis with JProfiler yielded the attached screenshot. Apparently, the proxy class is reused, but the objenesis ObjectInstantiator is recreated for every call to getProxy().  The [objenesis tutorial](http://objenesis.org/tutorial.html) recommends:  > To improve performance, it is best to reuse the ObjectInstantiator objects as much as possible. For example, if you are instantiating multiple instances of a specific class, do it from the same ObjectInstantiator. Both InstantiatorStrategy and ObjectInstantiator can be shared between multiple threads and used concurrently. They are thread safe.  ---  **Affects:** 4.1.2  **Attachments:** - [JProfiler Session.png](https://jira.spring.io/secure/attachment/22665/JProfiler+Session.png) (_84.87 kB_)  **Issue Links:** - #15223 Add ability to create proxy around classes that has no default constructor - #17722 ObjenesisCglibAopProxy's fallback mode triggers duplicate class definition error  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/287045ef7452b92d6f8e64a14b48a9026e0648f7","closed","type: enhancement,","spring-projects-issues","2015-02-25T10:21:23Z","2019-01-14T05:13:22Z"
"","17466","Ability to exclude HandlerInterceptors from specific path with  [SPR-12868]","**[Adrian Ber](https://jira.spring.io/secure/ViewProfile.jspa?name=beradrian)** opened **[SPR-12868](https://jira.spring.io/browse/SPR-12868?redirect=false)** and commented  As `mvc:interceptor`, `mvc:interceptors` should have a path parameter to exclude path from intercepting. For example: Interceptors runs for all paths /* , but it must not intercept specified paths: /admin/ *. /image/ * and /styles/  This will enable to easy configure all the interceptors, instead of repeating the same for all interceptors.  ---  **Issue Links:** - #11236 Ability to exclude HandlerInterceptor from specific path with","closed","type: enhancement,","spring-projects-issues","2015-03-31T03:31:56Z","2019-01-11T21:36:26Z"
"","17310","Extract RestTemplate into it's own jar file with minimal dependencies [SPR-12713]","**[Adib Saikali](https://jira.spring.io/secure/ViewProfile.jspa?name=asaikali)** opened **[SPR-12713](https://jira.spring.io/browse/SPR-12713?redirect=false)** and commented  Please split `spring-web.jar` into `spring-web-client.jar` and `spring-web-mvc.jar`  When building Java based REST clients the Spring `RestTemplate` saves a lot time and offers a great abstraction to build clients on top of. However, if the client being written is packaged as a library to be distributed and embedded within other apps the dependency on the rest of the spring  introduces a lot of extra dependencies.  For example consider the cloud foundry java library `https://github.com/cloudfoundry/cf-java-client` it currently uses Spring RestTemplate which is packaged in spring-web along with the rest of spring mvc requiring a very large dependency set.  Looking at the spring-web.jar it seems that `org.springframework.http.*` packages  and `org.springframework.web.client` don't depend on servelts and many of the other parts of spring like the application context therefore pulling all these packages into a single jar file maybe `spring-web-client.jar` would make it possible to use the RestTemplate with a minimal number of jar dependencies.   ---  **Affects:** 4.1 GA  9 votes, 9 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-02-12T13:24:00Z","2019-01-12T03:30:05Z"
"","17767","Oracle database constraint violation reported as org.springframework.transaction.UnexpectedRollbackException with JTA transaction manager [SPR-13175]","**[Adelino Rodrigues](https://jira.spring.io/secure/ViewProfile.jspa?name=adelinor)** opened **[SPR-13175](https://jira.spring.io/browse/SPR-13175?redirect=false)** and commented  Hi,  In an application configured to run on Weblogic 12c, with Java 7, using JPA version 2.1 with an hibernate implementation, version 4.3.10, a NOT NULL constraint violation issue is reported as org.springframework.transaction.UnexpectedRollbackException (see stack trace in attached file).  The transaction manager is set to:  ```xml  ```  Please note: 1. the database constraint is not deferred as mentioned in a [previous issue](http://forum.spring.io/forum/spring-projects/data/11293-unique-key-constraint-violation-causes-unexpectedrollbackexception). 2. when using a JPA transaction manager, the exception is correct (i.e. about the database constraint violation)    ---  **Affects:** 4.1.6  **Attachments:** - [stack_trace.log](https://jira.spring.io/secure/attachment/22922/stack_trace.log) (_12.13 kB_)","closed","in: core,","spring-projects-issues","2015-06-30T04:48:11Z","2019-01-12T16:23:13Z"
"","17452","Indeterministic UnsatisfiedServletRequestParameterException#paramConditions [SPR-12854]","**[Adam Michalik](https://jira.spring.io/secure/ViewProfile.jspa?name=hattifnat)** opened **[SPR-12854](https://jira.spring.io/browse/SPR-12854?redirect=false)** and commented  Consider a REST controller with the following request mappings on methods:  ``` @RequestMapping(method = GET, params = ""!myParam"") public void methodA(){...}  @RequestMapping(method = GET, params = ""myParam=a"") public void methodB(){...} ```  When a request is made with `myParam=b` it does not match either of the mappings and an `UnsatisfiedServletRequestParameterException` is thrown in `RequestMappingInfoHandlerMapping`. However, the message of the exception is indeterministic - sometimes it's  ``` Parameter conditions ""myParam=a"" not met for actual request parameters: myParam={b} ```  and sometimes  ``` Parameter conditions ""!myParam"" not met for actual request parameters: myParam={b} ```  In my case it depended on which method was invoked first with a correct request after the server restart. This is due to the logic in `RequestMappingInfoHandlerMapping#getRequestParams` where only first matching `RequestMappingInfo` is processed and the set of `partialMatches` is a `HashSet` with indeterministic order.   ---  **Affects:** 4.1.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b6449baaa6aea0c015fdac8ad359a8772815fc1f","closed","type: enhancement,","spring-projects-issues","2015-03-26T09:45:45Z","2015-05-26T01:15:27Z"
"","17894","AllEncompassingFormHttpMessageConverter prioritizes Jackson 2 XML over JSON [SPR-13309]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-13309](https://jira.spring.io/browse/SPR-13309?redirect=false)** and commented  `AllEncompassingFormHttpMessageConverter` forces Jackson XML without any option given to the user to choose an implementation. Until 4.1.7.RELEASE, Jackson JSON used to be the default and the code didn't set part converters exclusively (as it does now using `if-else` instead of `if` as was before). There's no log statements indicating what converters are chosen by default causing a whole lot of pain for people like me whose code is now broken.  ---  **Affects:** 4.2 GA  **Attachments:** - [AllEncompassingFormHttpMessageConverter.jpg](https://jira.spring.io/secure/attachment/22967/AllEncompassingFormHttpMessageConverter.jpg) (_234.54 kB_)  **Issue Links:** - #17831 AllEncompassingFormHttpMessageConverter does not prefer Jackson2 over JAXB for XML marshalling - #18908 AllEncompassingFormHttpMessageConverter ignores JAXB XML when Jackson used for JSON  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/257cc631411727666497acdc0325518f37b3a772","closed","in: core,","spring-projects-issues","2015-08-03T17:06:03Z","2019-01-11T18:08:26Z"
"","17732","Async annotation doesn't support request or custom scoped beans and is not designed for extension [SPR-13141]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-13141](https://jira.spring.io/browse/SPR-13141?redirect=false)** and commented  `@Async` annotation and it's associated support classes don't support request or custom scoped beans. Consider the use case where the main thread invokes methods with `@Async` annotation and immediately exits. And no, we can't return a `DeferredResult` or `Callable` from the controller because our clients can't handle that. `DispatcherServlet` clears out the `RequestContextHolder` such that the async threads get to a point where they invoke methods on request scoped beans, the infamous `IllegalStateException` ??""Are you referring to request attributes outside of an actual web request...""?? is thrown. As far as I can see, the classes that mainly support `@Async` are [AnnotationAsyncExecutionInterceptor](https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/scheduling/annotation/AnnotationAsyncExecutionInterceptor.java), [AsyncAnnotationAdvisor](https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncAnnotationAdvisor.java) and [AsyncAnnotationBeanPostProcessor](https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessor.java) which're not designed for extension. `AnnotationAsyncExecutionInterceptor` spins up a new `Callable` that if there were a hook to provide data to, both request and custom scoped beans could be supported. The `AsyncAnnotationBeanPostProcessor` has private fields like `executor` etc that have setters but no getters so there's no easy way to extend the class and use the fields in the subclass without resorting to reflection hacks. I've a [maven project](https://github.com/abhijitsarkar/java-ee/tree/master/spring-custom-scope) that demonstrates these problems using a custom scope and `@Async`. In a world where all clients now expect concurrent and fast response, this is a serious issue that forces an application to adopt not-so-elegant workarounds for an apparently simple problem.   ---  **Affects:** 4.2 RC1  **Reference URL:** http://stackoverflow.com/questions/30842242/how-to-instantiate-spring-bean-with-custom-scope-and-autowired-dependencies  0 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-06-17T18:43:09Z","2019-01-12T02:27:29Z"
"","17942","Generics and caching causing issues [SPR-13358]","**[Abdul Rahim Suriya](https://jira.spring.io/secure/ViewProfile.jspa?name=arsuriya)** opened **[SPR-13358](https://jira.spring.io/browse/SPR-13358?redirect=false)** and commented  The LazyParamAwareEvaluationContext caches the java.lang.reflect.Method instance on which the Caching annotations are present against a (programmatically generated) method signature.  This causes issue with generics in an interface hierarchy. If not a fix in the code, a documentation update should help in warning under certain circumstances. In fact the default recommendation can be to use the #root.args[] or #a0, #p0 for referring to method parameters rather than by name (which would also not be available in cases where compilation step did not include debug information)  The referenced github project is a sample that helps reproduce the issue and also provides recommendation for the fix in such scenario.  ---  **Affects:** 3.2.14  **Reference URL:** https://github.com/arsuriya/spring-caching-generics  **Issue Links:** - #14159 The expression language used in cache annotations can be error prone when referencing explict parameter names","closed","in: core,","spring-projects-issues","2015-08-17T06:09:05Z","2019-01-11T18:21:02Z"
"","761","4.1.x","(cherry picked from commit d23893f)","closed","","yifzhan","2015-03-25T03:32:03Z","2015-03-25T05:25:47Z"
"","805","4.1.4","(cherry picked from commit 92bf32b)","closed","","AIshibashi","2015-05-24T06:21:57Z","2015-05-24T09:27:11Z"
"","825","Add MockMvc HtmlUnit Support","# Important NOTE  I'm posting this for review. Before we merge this, we need to wait until HtmlUnit 2.18 is released to support httpcomponents 4.5. See [SPR-13158](https://jira.spring.io/browse/SPR-13158).  Issues [SPR-13158](https://jira.spring.io/browse/SPR-13158)","closed","","rwinch","2015-06-23T16:36:14Z","2015-07-27T10:48:39Z"
"","859","fix typo in web-mvc","","closed","","xueyumusic","2015-08-17T07:41:11Z","2015-08-18T14:23:47Z"
"","848","3 2 x","","closed","","vincent-chua","2015-07-27T10:54:39Z","2015-07-27T10:55:46Z"
"","844","spring-framework-bom - add link to docs","","closed","","paulvi","2015-07-23T07:02:58Z","2015-08-18T05:03:06Z"
"","828","fix example code","","closed","","Youmoo","2015-06-26T12:55:28Z","2015-06-26T13:54:37Z"
"","827","fix typo","","closed","","Youmoo","2015-06-26T08:15:59Z","2015-06-26T09:59:20Z"
"","824","Create spring-source","","closed","","hxc316","2015-06-23T03:37:52Z","2015-06-23T06:07:02Z"
"","822","Fix typo in Javadoc","","closed","","izeye","2015-06-20T10:24:36Z","2015-06-20T14:35:06Z"
"","819","fix StringIndexOutOfBoundsException in AntPathMatcher for leading *","","closed","","martinlippert","2015-06-17T15:34:45Z","2015-06-17T20:19:03Z"
"","811","Fix typo.","","closed","","izeye","2015-05-31T23:53:26Z","2015-06-01T07:22:22Z"
"","807","4.1.x","","closed","","f429656668","2015-05-27T08:05:48Z","2015-05-27T08:07:53Z"
"","806","3.2.x","","closed","","liuchenjun","2015-05-25T09:27:26Z","2015-05-25T14:19:44Z"
"","803","4.1.x","","closed","","martinmathew","2015-05-19T22:54:58Z","2015-05-20T06:34:40Z"
"","798","Wanglifeng patch 1","","closed","","wanglifeng","2015-05-11T06:37:36Z","2015-05-11T06:37:48Z"
"","781","update from spring-framework","","closed","","nkjackzhang","2015-04-22T07:41:53Z","2015-04-22T08:02:59Z"
"","774","3.2.x","","closed","","wdinNJ","2015-04-09T09:06:44Z","2015-04-09T09:08:56Z"
"","772","SPR-12893 Support OkHttp as an implementation for ClientHttpRequestFactory / AsyncClientHttpRequestFactory","","closed","","lukiano","2015-04-07T14:01:03Z","2015-06-01T14:59:15Z"
"","766","Fix typo.","","closed","","izeye","2015-04-02T05:58:58Z","2015-04-02T07:06:43Z"
"","764","4.1.x","","closed","","luckygxf","2015-03-31T15:49:47Z","2015-03-31T15:50:42Z"
"","755","fix minor typo in testing documentation","","closed","","bwestrich","2015-03-14T12:58:42Z","2015-03-16T17:22:49Z"
"","740","4.1.x","","closed","","simplyakshat","2015-02-22T08:56:55Z","2015-02-22T09:33:11Z"
"","739","Fix copy/paste error in Javadoc","","closed","","ericbottard","2015-02-19T11:38:20Z","2015-02-19T14:26:57Z"
"","738","fix javadoc typo","","closed","","johnktims","2015-02-11T18:11:03Z","2015-02-12T07:43:22Z"
"","734","4.1.x","","closed","","lifangzhen","2015-02-04T08:30:34Z","2015-02-04T08:32:20Z"
"","733","4.0.x","","closed","","anupkumarsahu","2015-02-04T04:42:23Z","2015-02-04T07:14:29Z"
"","730","Fix javadoc","","closed","","ralscha","2015-02-02T15:59:27Z","2015-02-03T15:42:58Z"
"","727","4.1.x","","closed","","nagul-git","2015-01-26T00:21:16Z","2015-01-26T02:11:25Z"
"","720","4.1.x","","closed","","shinestarwang","2015-01-15T08:33:55Z","2015-01-15T08:44:08Z"
"","719","Improve Netty4ClientHttpRequestFactory configurability and memory usage (SPR-12623)","","closed","status: declined,","flozano","2015-01-14T20:04:03Z","2021-11-11T10:04:48Z"
"","718","spring3.2.x","","closed","","ericsy","2015-01-14T05:40:08Z","2015-01-14T08:12:01Z"
"","717","Fix typo","","closed","","johnktims","2015-01-07T05:29:11Z","2015-01-07T08:52:00Z"
"","714","4.1.x","","closed","","champagne","2014-12-31T09:36:25Z","2014-12-31T10:09:42Z"
"","713","4.1.x","","closed","","champagne","2014-12-31T09:00:48Z","2014-12-31T09:09:43Z"