"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","1232","4.0.x","我需要源码","closed","","lianyiwuming","2016-11-08T08:10:53Z","2016-11-08T08:19:59Z"
"","1197","SPR-14779: providing type-safe static methods like Collections.emptyLi…","…st() to Comparators.","closed","","hakamairi","2016-10-05T21:14:40Z","2017-02-15T19:51:49Z"
"","1138","Improve performance of assertion in StompSubProtocolHandler.convertCo…","…nnectAcktoStompConnected()  Closes SPR-14624","closed","","dreis2211","2016-08-24T17:50:20Z","2016-08-24T18:05:52Z"
"","1086","4.2.x","xx","closed","","Harries","2016-06-20T08:35:06Z","2016-06-20T08:37:45Z"
"","1123","Refactor AbstractResponseBodyFlushProcessor states","With the current state machine - the implementation can hang after the last element when executing   on Jetty. - in some cases there will be no flush after the last   Publisher.","closed","","violetagg","2016-07-27T14:49:04Z","2016-07-27T17:10:21Z"
"","1054","Add MediaType IMAGE_SVG","When you do a Web Service to Expose a svg (example: web service expose flags of the world)  in my RestControler I use this syntax: @RequestMapping(value = ""/{country}"", method = RequestMethod.GET, produces = MediaType.IMAGE_SVG_VALUE)   instead of  @RequestMapping(value = ""/{country}"", method = RequestMethod.GET, produces = ""image/svg+xml"")  is more smart :)","closed","","sgrillon14","2016-05-10T21:22:52Z","2018-05-03T09:18:03Z"
"","1124","Add a bean aware CacheManager.","When trying to select a SSMCache based on a spring.active.profile the CacheManager was unable to select the correct cache based on the dynamic nature of the lookup. This CacheManager offers a sufficient level of abstraction and a standardised way of dynamically selecting a cache.  New cache manager that resolves the cache name against the Cache type beans registered in the application context.  Issue: SPR-14519","closed","","phillescott","2016-07-28T06:06:00Z","2016-07-29T04:27:56Z"
"","1087","Is there a better way to solve this problem？","When I call ""request.getParameter"" in the javax.servlet.Filter, request will be parsed into ""parts"" field.After then,the request reaches ""org.springframework.web.multipart.commons.CommonsMultipartResolver.parseRequest"" and will be parsed again,but it can not get any request parameter values. The method in my controller is ""public String saveImage(@RequestParam(""imageFile"") MultipartFile file, @RequestParam Integer userId)"". The logic in my filter proceed as follows. [code] public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {     Integer userId = request.getParameter(""userId"")     if (isauthorized(userId)) {         filterChain.doFilter(request, response);         return;     }     ((HttpServletResponse) response).sendError(HttpServletResponse.SC_FORBIDDEN); } [/code] I solved this problem temporarily by change ""CommonsMultipartResolver.parseRequest"",but it is not rigorous.Is there a better way to solve this problem？ Thanks.","closed","","hxy1991","2016-06-20T12:14:10Z","2016-06-20T13:19:00Z"
"","1091","Fixed #DATAREDIS-527 Added ErrorHandler to the AspectjCachingConfiguration","When enabling caching on aspectj mode, custom error handler was not getting inject. Fix is to set errorHandler on AspectJCachingConfiguration","closed","","jayarampradhan","2016-06-25T16:48:18Z","2016-06-29T07:23:03Z"
"","1192","SPR-14597: Fix CachingResourceResolver's handling of same path with different locations","When calling `CachingResourceResolver#resolveUrlPathInternal` with the same `resourceUrlPath` param but different list of search locations, the same cache key will be assigned to both resources.  This effectively breaks Spring's `VersionResourceResolver`. Considering two calls for the same `ressourceUrlPath` 'sprite.png', with the following locations: - First call: class path resource [static/alpha/style.css] - Second call: class path resource [static/beta/style.css]  The first call will resolve to the alpha 'sprite.png' ('sprite-1cf43f6ba5cbc71b4b2d040f2a358f3e.png') and cache this value under a key that only depends on 'sprite.png'.  The second call will use the cached value and thus won't resolve to the beta 'sprite.png' file.  This commit changes the way the cache keys are generated. Cache keys now depends of both the `ressourceUrlPath` and the `locations` parameters.  Issue: [SPR-14597](https://jira.spring.io/browse/SPR-14597)  Note: I have signed Pivotal Contributor License Agreement.","closed","","heffebaycay","2016-10-02T19:15:13Z","2016-10-11T14:06:09Z"
"","1150","Update import-into-idea.md","Update tutorial for import and build project in IntelliJ IDEA 2016.2.2. Steps are outdated and existing issues is not applicable in new versions.","closed","","neetkee","2016-08-30T10:46:24Z","2016-09-02T13:06:13Z"
"","1133","Support RootBeanDefinition targetResolvableType","Update RootBeanDefinition and GenericTypeAwareAutowireCandidateResolver to support target ResolvableTypes. This allows a bean definition to be registered programmatically with support for generics based injection.  Issue: SPR-14580","closed","","philwebb","2016-08-13T17:48:43Z","2016-08-17T14:51:12Z"
"","1272","Merge pull request #1 from spring-projects/master","update from origin","closed","","zhaoshengxuan108","2016-12-15T09:35:34Z","2016-12-15T09:46:05Z"
"","1271","Merge pull request #1 from spring-projects/master","update from origin","closed","","zhaoshengxuan108","2016-12-15T09:21:34Z","2016-12-15T09:26:55Z"
"","1120","update","update","closed","","ehlxr","2016-07-24T09:29:36Z","2016-07-26T10:09:00Z"
"","1228","Update reactive tests according to latest reactor-test changes","To be merged in master when https://github.com/reactor/reactor-addons/pull/31 will be merged.  These changes discussed in detail this afternoon with @smaldini provide many improvements:  - Generics are finally automatically resolved  - The new `create(Publisher)` is consistent with the new `create(Supplier>)` added by Stéphane for the time based assertions  - Shorter name very handy to use with indentation Verifier (same length than 2 tabs or 8 characters)","closed","","sdeleuze","2016-11-01T17:06:08Z","2021-04-28T09:58:50Z"
"","1220","SPR-14830: Support ResponseStatus on reactive controllers","To be discussed with @rstoyanchev and @sdeleuze","closed","","bclozel","2016-10-24T07:57:25Z","2016-11-03T12:28:31Z"
"","1238","Router without generics","To be discussed ...","closed","","sdeleuze","2016-11-16T13:57:15Z","2021-04-28T09:58:51Z"
"","1245","Make the signature of ReactiveHttpOutputMessage#writeAndFlush(…) more flexible","This solves [SPR-14952](https://jira.spring.io/browse/SPR-14952) by applying the suggested solution and cascading the change through the interface hierarchy (and clients).  Original signature of `ReactiveHttpOutputMessage#writeAndFlushWith(…)`:  ```java Mono writeAndFlushWith(Publisher> body); ```  Modified signature:  ```java Mono writeAndFlushWith(Publisher> body); ```  Which makes this method callable with `Flux>` objects as arguments. Which is what is obtained for example by means of calling `Flux#window(…)`:  ```java final Flux dataStream = ...; // Flux#window(...) returns Flux> exchange.getResponse().writeAndFlushWith(dataStream.window(3)); ```","closed","","danielfernandez","2016-11-24T22:03:30Z","2016-11-25T09:34:51Z"
"","1106","SPR-14456 - Asynchronous tests of controller that returns StreamingResponseBody","This pull requests add 3 tests to `AsyncTests.java`. They demonstrate testing of asynchronous request handling if controller returns an instance of `StreamingResponseBody`. This differs from testing of controller that return `Callable` or `DeferredResult` very much. ## Background story  While testing my Spring MVC application I came across your great examples of how to test asynchronous request processing using `spring-test` library in [AsyncTests.java](https://github.com/spring-projects/spring-framework/blob/master/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java) file.  My application however is designed to steam a huge amount of data and thus controllers return instances of `StreamingResponseBody` interface.  Unfortunately the examples from `AsyncTests.java` did not work as expected. During second step after the `asyncDispatch(mvcResult)` method my expectations against `content()` always failed claiming that response is empty whereas I've expected some data to be written to output stream.  It took me some time to debug and figure out that the `asyncDispatch(...` method is actually returns back only the modified version of original request, and the `perform(...` method creates a new instance of `MvcResult` with a fresh version of `MockHttpServletResponse`. The logic inside controllers was writing the data into original HTTP response generated by initial `perform(...` method, while I was validating the content of HTTP response generated by second `perform(...`.  If somebody else is looking for a good example to test controller with streaming body, it would be great if they could find it in the source code of original library.","closed","","darklynx","2016-07-11T20:26:16Z","2016-07-13T07:13:21Z"
"","1064","Polish Javadoc in MediaType","This PR simply removes unnecessary `*` in Javadoc for `MediaType`.","closed","","izeye","2016-05-25T05:50:41Z","2016-05-25T07:24:25Z"
"","1209","SPR-14800: Refactor tests with ScriptedSubscriber","This PR refactors all existing tests to use this new infrastructure and removed the `TestSubscriber` implementation.  This PR should be merged soon, still waiting for the latest changes on the `ScriptedSubscriber` for be reviewed by the reactor+spring team.","closed","","bclozel","2016-10-18T07:34:45Z","2016-10-25T08:57:39Z"
"","1264","SPR-14953: Provide shortcut methods for routing","This PR make the route declaration shorter and more readable, for example for Reactor website:  Instead of: ```java private static RouterFunction routes() { 	return route(GET(""/docs/api/**""), request -> 			status(FOUND).location(URI.create(request.path().replace(""/docs/"", ""/old/""))).build()) 		.andRoute(GET(""/docs/reference/**""), request -> 			status(FOUND).location(URI.create(request.path().replace(""/docs/"", ""/old/""))).build()) 		.andRoute(GET(""/docs/raw/**""), request -> 			status(FOUND).location(URI.create(request.path().replace(""/docs/"", ""/old/""))).build()) 		.andRoute(GET(""/docs/{dir}/api""), request -> 			status(FOUND).location(URI.create(request.path().replace(""api"", ""release""))).build()) 		.andRoute(GET(""/core/docs/reference/**""), request -> 			status(FOUND).location(URI.create(""https://github.com/reactor/reactor-core/blob/master/README.md"")).build()) 		.andRoute(GET(""/core/docs/api/**""), request -> 			status(FOUND).location(URI.create(request.path().replace(""/core/docs/"",""/docs/core/release/""))).build()) 		.andRoute(GET(""/netty/docs/api/**""), request -> 			status(FOUND).location(URI.create(request.path().replace(""/netty/docs/"",""/docs/netty/release/""))).build()) 		.andRoute(GET(""/ipc/docs/api/**""), request -> 			status(FOUND).location(URI.create(request.path().replace(""/ipc/docs/"", ""/docs/ipc/release/""))).build()) 		.andRoute(GET(""/ext/docs/api/**/test/**""), request -> 			status(FOUND).location(URI.create(request.path().replace(""/ext/docs/"", ""/docs/test/release/""))).build()) 		.andRoute(GET(""/ext/docs/api/**/adapter/**""), request -> 			status(FOUND).location(URI.create(request.path().replace(""/ext/docs/"", ""/docs/adapter/release/""))).build()) 		.and(resources(""/**"", new ClassPathResource(""static/""))) 		; } ```  We can write: ```java private static RouterFunction routes() { 	return routeGet(""/docs/api/**"", request -> 			status(FOUND).location(URI.create(request.path().replace(""/docs/"", ""/old/""))).build()) 		.andRouteGet(""/docs/reference/**"", request -> 			status(FOUND).location(URI.create(request.path().replace(""/docs/"", ""/old/""))).build()) 		.andRouteGet(""/docs/raw/**"", request -> 			status(FOUND).location(URI.create(request.path().replace(""/docs/"", ""/old/""))).build()) 		.andRouteGet(""/docs/{dir}/api"", request -> 			status(FOUND).location(URI.create(request.path().replace(""api"", ""release""))).build()) 		.andRouteGet(""/core/docs/reference/**"", request -> 			status(FOUND).location(URI.create(""https://github.com/reactor/reactor-core/blob/master/README.md"")).build()) 		.andRouteGet(""/core/docs/api/**"", request -> 			status(FOUND).location(URI.create(request.path().replace(""/core/docs/"",""/docs/core/release/""))).build()) 		.andRouteGet(""/netty/docs/api/**"", request -> 			status(FOUND).location(URI.create(request.path().replace(""/netty/docs/"",""/docs/netty/release/""))).build()) 		.andRouteGet(""/ipc/docs/api/**"", request -> 			status(FOUND).location(URI.create(request.path().replace(""/ipc/docs/"", ""/docs/ipc/release/""))).build()) 		.andRouteGet(""/ext/docs/api/**/test/**"", request -> 			status(FOUND).location(URI.create(request.path().replace(""/ext/docs/"", ""/docs/test/release/""))).build()) 		.andRouteGet(""/ext/docs/api/**/adapter/**"", request -> 			status(FOUND).location(URI.create(request.path().replace(""/ext/docs/"", ""/docs/adapter/release/""))).build()) 		.and(resources(""/**"", new ClassPathResource(""static/""))) 		; } ```  Also in Kotlin it provides for free a workaround for a limitation that forces to specify the lambda type, so instead of writing: ```kotlin route(GET(""/""), HandlerFunction { ok().body(fromObject(""Hello Mix-IT!"")) }) .andRoute(GET(""/user/{id}""), HandlerFunction { req -> ok().body(fromObject(User(req.pathVariable(""id"").toLong(), ""Robert""))) }) ``` We can write: ```kotlin routeGet(""/"", { ok().body(fromObject(""Hello Mix-IT!"")) }) .andRouteGet(""/user/{id}"", { req -> ok().body(fromObject(User(req.pathVariable(""id"").toLong(), ""Robert""))) }) ```","closed","","sdeleuze","2016-12-09T10:08:01Z","2021-04-28T10:12:26Z"
"","1183","fix spelling of word 'recommendation'","this PR fixes the spelling error for the word 'recommendation' in the description of the CORS headers.","closed","","joshlong","2016-09-21T04:26:56Z","2016-09-21T19:04:18Z"
"","1188","EncoderHttpMessageWriter tries to send wildcard type in response header","This PR fix issue when endpoint produce ByteBuffer's with content type octet-stream:  ``` java     @RequestMapping(value = ""/proxy"", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)     @ResponseBody     @ResponseStatus(code = HttpStatus.OK)     public Flux proxy() {        //impl     } ```  As a result I get stacktrace:  ``` java.lang.IllegalArgumentException: 'Content-Type' cannot contain wildcard type '*'     at org.springframework.util.Assert.isTrue(Assert.java:86) ~[spring-core-5.0.0.M2.jar:5.0.0.M2]     at org.springframework.http.HttpHeaders.setContentType(HttpHeaders.java:735) ~[spring-web-5.0.0.BUILD-20160926.160659-291.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.http.codec.EncoderHttpMessageWriter.write(EncoderHttpMessageWriter.java:99) ~[spring-web-5.0.0.BUILD-20160926.160659-291.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler.writeBody(AbstractMessageWriterResultHandler.java:131) ~[spring-web-reactive-5.0.0.BUILD-20160926.160659-234.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler.handleResult(ResponseBodyResultHandler.java:121) ~[spring-web-reactive-5.0.0.BUILD-20160926.160659-234.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.web.reactive.DispatcherHandler.handleResult(DispatcherHandler.java:142) ~[spring-web-reactive-5.0.0.BUILD-20160926.160659-234.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.web.reactive.DispatcherHandler.lambda$handle$2(DispatcherHandler.java:129) ~[spring-web-reactive-5.0.0.BUILD-20160926.160659-234.jar:5.0.0.BUILD-SNAPSHOT] [more] ```","closed","","soldierkam","2016-09-28T20:34:22Z","2016-10-14T21:20:12Z"
"","1193","Log unresolved exceptions at error level","This PR change the log level of unresolved exceptions from debug to error, in order to avoid the ""no exception displayed by default"" behaviour that we have currently. Are you ok with this change @rstoyanchev?","closed","","sdeleuze","2016-10-03T09:16:17Z","2021-04-28T09:58:46Z"
"","1211","Better encapsulation for CORS default permit configuration","This PR allows better encapsulation for CORS user-level configuration, and improve the `CorsRegistration` Javadoc as discussed in [SPR-14798](https://jira.spring.io/browse/SPR-14798).  I did not implement the `CorsConfiguration #PERMIT_ALL_CORS_CONFIGURATION` proposal because the properties won't be immutable, so I chose the previous proposal using `applyDefaultPermitConfiguration()` method name instead of `initEmptyToPermitAll()`.  I chose this name because this is not totally a permit all strategy, not all methods are allowed and it also set `allowCredentials` and `maxAge` to defaults that make sense for most users.","closed","","sdeleuze","2016-10-18T13:00:26Z","2021-04-28T09:58:47Z"
"","1212","add some utility methods for StringUtils","this PR add some useful method in StringUtils like ""isNotEmpty"",  this kind of method is more readable and avoid thing like this   > import static org.springframework.util.StringUtils.isEmpty; > (...) > if (!isEmpty(someString)) { > // some code with this string > }  OR   > import static org.springframework.util.StringUtils.isEmpty; > import static org.springframework.util.StringUtils.trimWhiteSpace; > (...) > if (!isEmpty(trimWhiteSpace(someString))) { > // some code with this string > }  Also I have update the StringUtils unit test","closed","","SympathyForTheDev","2016-10-19T09:16:44Z","2016-10-24T10:42:44Z"
"","1273","Ordering by root context first before exporting a json view of contexts","This is likely a fairly pointless PR - absolutely no issues if it is felt that this is likely not required.  I noticed that the `/beans` actuator endpoint in a spring-boot app returns the list of beans in a random order, this can be traced back to the behavior of the LiveBeansView class. This PR orders it parent context first before printing it as a json","closed","","bijukunjummen","2016-12-22T04:09:52Z","2016-12-22T07:55:39Z"
"","1113","Applied skeletal implementation to interface migration automated refactoring","This is a semantics-preserving refactoring that migrates existing method implementations in classes to the corresponding implemented interface methods as `default` methods. The tool **does not** add new code; it only rearranges _existing_ code. - We are evaluating a research prototype automated refactoring Eclipse plug-in called [Migrate Skeletal Implementation to Interface](https://github.com/khatchad/Migrate-Skeletal-Implementation-to-Interface-Refactoring). We have applied the tool to your project in the hopes of receiving feedback. - The approach is very conservative. That may mean that not all changes that can be made were made. Please feel free to continue the refactoring manually if you wish. - We only migrated methods declared in abstract classes with the hopes of such methods being suitable default methods in corresponding interfaces. - The source code should be semantically equivalent to the original.  Thank you for your help in this evaluation! Any feedback you can provide would be very helpful. In particular, we are interested if _each_ of the proposed changes are helpful or not.","closed","","khatchad","2016-07-16T00:03:28Z","2017-05-10T15:10:35Z"
"","1189","Add Reactive CORS support","This is a draft PR not ready yet to be merged, only here for review and discussion.  It implements CORS support by creating reactive version of Spring Web and Spring MVC CORS support classes: - I chose to keep the same class names, but in `reactive` package. - `CorsConfiguration` is not tied to Servlet API so we can reuse it - CORS `HandlerMapping` integration is done at `AbstractHandlerMapping` level. Since we can't add dynamically filters CorsProcessor#processRequest()` is directly called. - `AbstractUrlHandlerMapping` and `AbstractHandlerMethodMapping` have been slightly modified to call `AbstractHandlerMapping#processCorsRequest()` - Only support for global CORS configuration has been implemented, `@CrossOrigin` support will come with another commit.  Could you make a quick high-level overview of this PR @rstoyanchev, before I go further?","closed","","sdeleuze","2016-09-29T15:31:39Z","2021-04-28T09:58:47Z"
"","1187","ExceptionHandlingWebHandler should log exception at ""error"" level","This handler send status 500, so in logs should be information ""why"".","closed","","soldierkam","2016-09-28T19:04:48Z","2016-10-04T14:57:29Z"
"","1201","Add reactive multipart request support","This draft PR is a first Multipart support implementation here for high-level feedbacks and discussion.  It does not include RequestMapping level support, integration tests do not work yet with Reactor and RxNetty and `NioMultipartResolver` need to be rewritten using `Flux.create()` instead of `ReplayProcessor`.","closed","","sdeleuze","2016-10-12T09:24:06Z","2021-04-28T09:56:59Z"
"","1163","Refactor how hints (like JsonView) are passed to codecs","This draft PR brings the new hints API based on `Map`, a reactive port of `RequestBodyAdvice` and `ResponseBodyAdvice` and a concrete use case with the `JsonView` support for both request and response body.  Thanks in advance for your feedback @rstoyanchev, @bclozel, @poutsma !","closed","","sdeleuze","2016-09-08T09:44:56Z","2021-04-28T09:58:44Z"
"","1119","Reactor StringEncoder into CharSequenceEncoder","This commit refactors the StringEncoder to a CharSequenceEncoder, in order to support StringBuilders, Groovy GStrings, etc.  Issue: https://github.com/spring-projects/spring-reactive/issues/120","closed","","poutsma","2016-07-21T10:20:37Z","2016-07-22T17:51:11Z"
"","1267","Allow HandlerFunction to return Mono","This commit makes it possible for handler functions to return asynchronous status codes and headers, by making HandlerFunction.handle return a Mono instead of a ServerResponse. As a consequence, all other types that deal with HandlerFunctions (RouterFunction, HandlerFilterFunction, etc.) had to change as well.  However, when combining the above change with method references (a very typical use case), resulting signatures would have been something like:  ``` public Mono>> getPerson(ServerRequest request) ```  which was too ugly to consider, especially the two uses of Mono. It was considered to merge ServerResponse with the last Mono, essentialy making ServerResponse always contain a Publisher, but this had unfortunate consequences in view rendering.  It was therefore decided to drop the parameterization of ServerResponse, as the only usage of the extra type information was to manipulate the response objects in a filter. Even before the above change this was suggested; it just made the change even more necessary.  As a consequence, `BodyInserter` could be turned into a real `FunctionalInterface`, which resulted in changes in ClientRequest.  We did, however, make HandlerFunction.handle return a `Mono`, adding little complexity, but allowing for future `ServerResponse` subtypes that do expose type information, if it's needed. For instance, a RenderingResponse could expose the view name and model.  Issue: SPR-14870","closed","","poutsma","2016-12-13T16:14:24Z","2016-12-14T15:53:20Z"
"","1265","Allow athentication at the STOMP level","This commit makes it possible for a ChannelInterceptor to override the user header in a Spring Message that contains a STOMP CONNECT frame.  After the message is sent, the updated user header is observed and saved to be associated with session thereafter.  Issue: SPR-14690","closed","","rstoyanchev","2016-12-09T22:43:58Z","2016-12-14T09:39:32Z"
"","1173","Add WebApplicationInitializers for Web Reactive","This commit introduces three new WebApplicationInitializers for use with Spring Web Reactive: - The AbstractServletHttpHandlerAdapterInitializer registers a   ServletHttpHandlerAdapter that wraps a user-provided HttpHandler. - The AbstractDispatcherHandlerInitializer registers a   ServletHttpHandlerAdapter that wraps a DispatcherHandler (or any   WebHandler). The handler is provided with an application context. - The AbstractAnnotationConfigDispatcherHandlerInitializer is a   subclass of the above, creating an   AnnotationConfigWebApplicationContext based on provided `@Configuration`   classes.  Issue: SPR-14713","closed","","poutsma","2016-09-14T10:53:46Z","2016-09-16T16:57:30Z"
"","1162","Change View.render method to take Map","This commit introduces support for model & view rendering in web.reactive.function. The first three commits or this PR contain changes in web.reactive.result.view necessary to facilitate this.  @rstoyanchev: could you take a look at this, especially the first three commits? If you are OK with the changes there, then I will make a JIRA issue to link to.","closed","","poutsma","2016-09-07T11:07:21Z","2016-09-09T13:36:38Z"
"","1116","SPR-14471 - Add autowiring support to SpringBeanJobFactory","This commit introduces autowiring support to the SpringBeanJobFactory. It will call the autowireBean method if an AutowireCapableBeanFactory has been injected. The autowiring will be done on either the Job or the delegate of the DelegatingJob which contains a Runnable.  A test has been added to verify the correct behavior of the autowiring and as well as retaining the initial support of using the job data for wiring dependencies.  Issue: [SPR-14471](https://jira.spring.io/browse/SPR-14471)","closed","","mdeinum","2016-07-18T07:13:24Z","2018-10-10T12:38:18Z"
"","1144","Introduce @DisabledIf annotation for JUnit 5","This commit introduces @DisabledIf annotation that takes SpEL as a condition.  The condition is evaluated at run time whether to disable JUnit 5 (Jupiter) test method/class.  Issue: SPR-14614","closed","","ttddyy","2016-08-25T17:58:03Z","2016-08-28T19:21:13Z"
"","1202","SPR-14754 - Add EnableWebReactive + WebReactiveConfigurer","This commit improves the existing web reactive configuration infrastructure with the following changes: - renamed `WebReactiveConfiguration` to   `WebReactiveConfigurationSupport` and is is no longer a Configuration   class - created the `WebReactiveConfigurer` interface; Configuration classes   implementing it will augment the web reactive configuration support - created the `DelegatingWebReactiveConfiguration` and   `WebReactiveConfigurerComposite` to effectively tie those custom-defined   configurers to the main configuration support - created the `@EnableWebReactive` to active that support in   configuration classes  Issue: SPR-14754","closed","","bclozel","2016-10-13T18:46:59Z","2016-10-17T09:23:43Z"
"","1156","SPR-10502 - PropertyPlaceholder multiple locations resolution","This commit fixes an issue, when in XML defined config there is context:property-resolver with the value if form of value=""${placeholder}"" thus it should be resolved with system property. Issue occurs when property already resolved, but appropriate splitting by comma already had passed.  Issue: https://jira.spring.io/browse/SPR-10502","closed","","fdesu","2016-09-03T00:09:04Z","2016-11-03T20:17:05Z"
"","1121","AbstractListenerServerHttpResponse improvements","This commit changes writeWithInternal(Publisher body). It is implemented as writeAndFlushWith(Mono.just(body)).","closed","","violetagg","2016-07-26T13:24:47Z","2016-07-27T17:10:50Z"
"","1140","SpringJUnit4ClassRunner should be thread safe","This commit changes the SpringJunit4ClassRunner to use a ThreadLocal to store the TestContextManager instead of using a single instance.  Initial code from Bastian Voigt (https://github.com/BastianVoigt/spring-framework/commit/a5e466e12edca26fb3637d7acafc214f83019345)  Issue: SPR-12421","closed","","mdeinum","2016-08-25T09:43:20Z","2016-09-08T10:46:00Z"
"","1247","Add Vertx support","This commit adds Vert.x integration that includes Vert.x-based implementations of ServerHttpRequest and ServerHttpResponse as well as an adapter from the Vert.x HttpServerRequest to the HttpHandler contracts.  I'm interested in feedback if implementation of spring reactive using Vert.x is reasonable task.","closed","","melgenek","2016-11-26T12:11:41Z","2016-11-28T12:32:27Z"
"","1214","ApplicationContext-based HttpHandler setup","This commit adds support for detecting the target WebHandler along with WebFilters, WebExceptionHandlers, and other spring-web reactive strategies in an ApplicationContext.  WebReactiveConfigurationSupport has @Bean factory methods for DispatcherHandler and ResponseStatusExceptionHandler.  WebHttpHandlerBuilder has a static factory method that initializes the builder from an ApplicationContext. This method is also used in the DispatcherHandler#toHttpHandler(ApplicationContext) shortcut method.  Issue: SPR-14837","closed","","rstoyanchev","2016-10-21T22:09:10Z","2016-11-03T14:47:35Z"
"","1154","Addes static start method to HttpHandler adapters","This commit adds a static ""start"" method to the Reactor and RxNetty HttpHandler adapters, to facilitate easy starting from a main method.","closed","","poutsma","2016-09-02T13:10:01Z","2016-09-14T13:54:15Z"
"","1219","Add ""mutate"" builder to ServerWebExchange","This commit adds a default mutate method to ServerWebExchange which prepares an immutable wrapper and returns the provided mutated properties.","closed","","rstoyanchev","2016-10-24T01:10:21Z","2016-10-28T16:07:16Z"
"","1237","Add SockJS clients for EventSource transport","There were no transport implementations available in spring-websocket that were able to use the EventSource transport method. This commit adds EventSource transports based on RestTemplate, Jetty and Undertow.  This commit also extracts some common code that can be shared between XHR and EventSource transports to the `AbstractHttpTransport` class.","closed","","slovdahl","2016-11-14T18:53:09Z","2018-03-30T15:01:08Z"
"","1165","Fix typo in asciidoc","There is no attribute named `path` in `@RequestParam`, so I change it to `name`.","closed","","nkjackzhang","2016-09-09T10:25:25Z","2016-09-10T05:50:01Z"
"","1084","SPR-14433 - Inline variable that is used only once","The variable canonicalName is used only once, and there is no need to call canonicalName() when  ""alreadySeen != null && alreadySeen.contains(beanName)"" is true,  so inline it.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nkjackzhang","2016-06-17T08:37:59Z","2016-07-06T15:52:30Z"
"","1097","Fix broken javadoc","The javadocs are broken where lines start with ""@{"".  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nkjackzhang","2016-07-01T09:45:09Z","2016-07-01T12:26:26Z"
"","1205","Fix NativeJdbcExtractors documentation","The documentation mentions various NativeJdbcExtractors that no longer exist. To be specific CommonsDbcpNativeJdbcExtractor and XAPoolNativeJdbcExtractor no longer exist.  This commit includes the following changes: - remove CommonsDbcpNativeJdbcExtractor references from Asciidoctor - remove CommonsDbcpNativeJdbcExtractor references from Javadoc - remove XAPoolNativeJdbcExtractor references from Asciidoctor  I did sign and agree to the CLA.  Issue: SPR-14810","closed","","marschall","2016-10-14T13:59:10Z","2016-10-15T08:58:04Z"
"","1262","SPR-13508 - Add i18n support to ScriptTemplateView","The current ScriptTemplateView does not provide support for internationalization using a message resource bundle on the classpath. This PR allows configuring a resource bundle basename on the ScriptTemplateConfigurer and then load that resource bundle at render time using the HttpServletRequest locale.  Two new methods have been added to ResourceBundleMessageSource allowing to return a ResourceBundle as a Map for a given basename and locale, or simply for a given locale. The resulting map can then be passed to the render function from ScriptTemplateView where it can be used to replace message placeholders in the template.  Issue: SPR-13508  I have signed the CLA.","closed","","pgrimard","2016-12-07T22:21:25Z","2017-01-24T11:36:38Z"
"","1261","SPR-13508 - Add i18n support to ScriptTemplateView","The current `ScriptTemplateView` does not provide support for internationalization using a message resource bundle on the classpath.  This PR allows configuring a resource bundle basename on the `ScriptTemplateConfigurer` and then load that resource bundle at render time using the `HttpServletRequest` locale.  Two new methods have been added to `ResourceBundleMessageSource` allowing to return a `ResourceBundle` as a `Map` for a given basename and locale, or simply for a given locale.  The resulting map can then be passed to the render function from `ScriptTemplateView` where it can be used to replace message placeholders in the template.  Issue: SPR-13508  I have signed the CLA.","closed","","pgrimard","2016-12-07T20:58:56Z","2016-12-07T22:13:55Z"
"","1127","4.3.x","Test Spring code","closed","","chandramcsr","2016-07-31T04:20:32Z","2016-07-31T14:34:31Z"
"","1230","Merge pull request #1 from spring-projects/master","test","closed","","ghost","2016-11-05T10:32:44Z","2016-11-06T10:41:59Z"
"","1190","Merge pull request #1 from spring-projects/master","test","closed","","ghost","2016-09-30T14:16:22Z","2016-09-30T14:37:45Z"
"","1066","SPR-14235 - Reactive types support for @Cacheable methods","Support for cache Observable return values.  Not ready to be merge as it doesn't follow the Code style, but I need a bit of feedback :) Tests are included  https://jira.spring.io/browse/SPR-14235","closed","","padilo","2016-05-26T00:14:55Z","2016-10-03T17:37:03Z"
"","1242","Treat Kotlin nullable as non-required","Superseeds #1060  @jhoeller Could you please review the polished version of this pull request, since this is the first time we introduce Kotlin code in our unit tests and since it adds a new `Optional MethodParameter#isNullable()` method that I would like to validate with you?  Issue: https://jira.spring.io/browse/SPR-14165","closed","","sdeleuze","2016-11-21T23:20:24Z","2021-04-28T09:58:51Z"
"","1206","Replace J2EE with Java EE","String with version 5 the name of Java Platform, Enterprise Edition changed from J2EE to Java EE. However a lot of the documentation still uses the term J2EE.  This commit includes the following changes: - replace J2EE with Java EE where appropriate  This is not a blind search and replace. The following occurrences remain unchanged: - references to old J2EE releases, most notably 1.3 and 1.4. - references to ""Expert One-On-One J2EE Design and Development"" - references to ""Core J2EE patterns"" - XML namespaces - package names  I did sign and agree to the CLA.  Issue: SPR-14811","closed","","marschall","2016-10-14T14:25:40Z","2016-10-15T08:56:28Z"
"","1246","ThreadPoolExecutorFactoryBean add ability to prestart threads","Sometimes you want the executor given by ThreadPoolExecutorFactoryBean to be already hot. Thread initialization can be accomplished with MethodInvokingBean, but that is a little bit tricky.","closed","type: enhancement,","fededonna","2016-11-25T20:46:31Z","2021-11-24T13:03:37Z"
"","1259","SPR-14990 - Update JdbcUtils to improve enum support","Since we have StringToEnumConverter and IntegerToEnumConverter in shared DefaultConversionService, BeanPropertyRowMapper supports Enum now, but there is a little problem with jdbc 4.1 rs.getObject(index,type), if type is Enum it will always return null, actually we need String or Integer here, use rs.getObject(index) is fine.","closed","","quaff","2016-12-07T06:48:41Z","2016-12-08T16:15:57Z"
"","1083","Fix ambiguous static import","Since there is also a method org.mockito.Matchers.startsWith(String prefix), so the method startsWith(String) is ambiguous for the type TestPropertySourceUtilsTests, and as I don't know which one you want to use, so I just change the static import for org.hamcrest.CoreMatchers.containsString to use org.hamcrest.CoreMatchers.startsWith explicitly.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nkjackzhang","2016-06-17T04:05:20Z","2016-06-17T08:22:29Z"
"","1085","Fix ambiguous static import","Since there is also a method org.mockito.Matchers.startsWith(String prefix), so the method  startsWith(String) is ambiguous for the type TestPropertySourceUtilsTests, and as I don't know which one you want to use, so I just change the static import for  org.hamcrest.CoreMatchers.containsString to use org.hamcrest.CoreMatchers.startsWith explicitly.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nkjackzhang","2016-06-17T08:51:11Z","2016-06-17T15:20:23Z"
"","1063","Upgrade to moneta 1.1","See SPR-14296","closed","","eddumelendez","2016-05-20T22:59:51Z","2016-05-26T20:11:53Z"
"","1071","Support X-Forwarded-Prefix in ForwardedHeaderFilter","See SPR-14270","closed","","eddumelendez","2016-06-01T09:59:55Z","2016-06-01T21:25:07Z"
"","1098","SPR-13826 - Move to JDBC 4.1","See SPR-13826","closed","","eddumelendez","2016-07-04T21:11:14Z","2016-07-12T10:17:26Z"
"","1104","SPR-14443 -Autowired method ordering in AutowiredAnnotationBeanPostProcessor","See https://jira.spring.io/browse/SPR-14443. At now, it's impossible to predict order of autowired methods calls. But there are use cases when a creation of ordered beans is unwanted. For example, the code snippet at https://jira.spring.io/browse/SPR-14443 tried to inject different beans for each autowired method. Without that, I have to inject all the beans into the component class that looks bad. As a workaround I can create ordered beans but this approach has a bean creation overhead.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","dimitrovchi","2016-07-09T05:27:50Z","2016-08-10T19:05:02Z"
"","1225","Escape (( and )) to prevent asciidoc processing","See http://asciidoctor.org/docs/user-manual/#user-index.","closed","","ejain","2016-10-27T01:36:00Z","2016-10-27T06:50:46Z"
"","1227","SPR-14304 Removes makeAccessible from convert","Removes ReflectionUtils.makeAccessible from convert in ObjectToObjectConverter, as method returned from getValidatedMember will nevere be private.  Issue: SPR-14304","closed","","LinkedList","2016-10-30T17:38:18Z","2016-10-31T06:51:26Z"
"","1180","formatting fix","Removed unnecessary quotation marks that caused improper rendering of in-line code.","closed","","kosmaty","2016-09-19T07:43:21Z","2016-09-19T12:58:51Z"
"","1146","Expose aliases for beans when constructing json.","Related to: https://jira.spring.io/browse/SPR-14632","closed","","ptahchiev","2016-08-26T11:58:40Z","2016-08-26T17:52:57Z"
"","1142","Refactored SseEvent to ServerSideEvent","Refactored mutable SseEvent class into immutable ServerSideEvent with builder.","closed","","poutsma","2016-08-25T12:17:08Z","2016-08-25T12:39:01Z"
"","1218","SPR-14818 - Add exception MissingServletRequestHeaderException","Reason : I am implementing a Restful API and needed to add a custom header value to all responses.  Some endpoint contained required request headers and wanted to customize the output for the specific situation of missing header values, by handling a more specific exception than ServletRequestBindingException.  General usage benefit: This is more consistent with the implementation of required request parameters.  There exists a MissingServletRequestParameterException for the specific situation of missing required request parameters.  A more specific exception is beneficial.  Issue: SPR-14818  I have agreed to the ICLA.","closed","","AustinSong","2016-10-24T00:19:03Z","2018-07-23T13:48:03Z"
"","1172","corrected punctuation in ""PropertySource abstraction"" chapter","Punctuation was broken in TIP section in ""PropertySource abstraction"" chapter - everything was rendered in single line.","closed","","kosmaty","2016-09-14T08:33:53Z","2016-09-14T09:08:26Z"
"","1093","iterate over all negociated content-type before returning a 406","Proposal to fix issue #SPR-14411  Signed-off-by: Mathieu POUSSE m.mathieu.pousse@gmail.com","closed","","mathieu-pousse","2016-06-28T12:08:01Z","2016-06-28T12:42:13Z"
"","1194","Handle async operation events","Problem: The following exception is observed when there is async operation timeout:   ``` java.lang.IllegalStateException: It is invalid to call isReady() when the response has not been put into non-blocking mode     at org.apache.coyote.Response.isReady(Response.java:616) ~[tomcat-embed-core-8.5.5.jar:8.5.5]     at org.apache.catalina.connector.OutputBuffer.isReady(OutputBuffer.java:677) ~[tomcat-embed-core-8.5.5.jar:8.5.5]     at org.apache.catalina.connector.CoyoteOutputStream.isReady(CoyoteOutputStream.java:155) ~[tomcat-embed-core-8.5.5.jar:8.5.5]     at org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyProcessor.isWritePossible(ServletServerHttpResponse.java:169) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] ```  Current Implementation: The async operation events sent by the web container are not propagated to the internal implementation. When timeout/error happens and if the application does not complete the async operation, the web container will complete it. At that point if the application tries to read/write, the operation will fail with an exception (above) that there is not async operation started.  Proposed Solution: When there is an async operation timeout or the async operation failed to complete, calls to - AbstractRequestBodyPublisher.onError, - AbstractResponseBodyProcessor.onError, - AbstractResponseBodyFlushProcessor.onError  will be made. As a result of these calls the async operation will be completed and no more invocations of read/write will be made.","closed","","violetagg","2016-10-03T15:41:35Z","2016-10-13T20:34:57Z"
"","1174","Consider servlet context path in path matching","Prior to this commit, the reactive HttpRequestPathHelper used the path as returned from HttpRequest.getURI().getRawPath() as lookup path. However, when running in a servlet environment, this lookup path represents the entire path (including servlet context), which is not desirable.  This commit adds a getPath() method to HttpRequest, defaulting to return getURI().getRawPath(), but with an override in ServletServerHttpRequest to return the proper lookup path (obtained from UrlPathHelper).  Issue: SPR-14714","closed","","poutsma","2016-09-14T11:07:06Z","2016-09-16T19:28:16Z"
"","1199","SPR-14597: Resolve absolute resource links in ResourceTransformers","Prior to this commit, `ResourceTransformer` implementations would resolve internal links to other resources: both relative and absolute request paths. For relative request paths, those transformers would call `ResourceTransformerSupport.resolveUrlPath` with the resource path, as provided in the original file. This can cause problems when a `CachingResourceResolver` is configured in the resolver chain, because this resolver is caching resources, deriving the cache key from the given resource path — this can cause collisions for cases like this:  ``` resources/ |--foo/ |  |--foo.css (imports style.css) |  |--style.css |--bar/ |  |--bar.css (imports style.css) |  |--style.css ```  The first ""style.css"" resolved resource is then cached and will be given to any request asking for ""style.css"".  To avoid those issues, this commit improves the `ResourceTransformer` implementations to calculate the absolute request path before asking the chain to resolve the resource URL, thus avoiding duplications. The resource chain will be then asked to resolve ""/foo/style/css"" or ""/bar/style.css"".  Issue: SPR-14597","closed","","bclozel","2016-10-07T21:01:08Z","2016-10-11T16:48:30Z"
"","1255","SPR-12031 Support @ContextConfiguration at method level","Prior Spring TestContext Framework had not supported @ContextConfiguration annotation on the method-level.  This commit enables @ContextConfiguration and @ContextHierarchy to be the method-level annotations. Now TCF will emit fully configured throw-away TestContext for the particular test method.  Issue: [SPR-12031](https://jira.spring.io/browse/SPR-12031)","closed","","fdesu","2016-12-06T13:35:29Z","2017-06-12T19:02:10Z"
"","1055","MockMvcWebConnection stores cookies from response","Previously MockMvcWebConnection did not update the cookie manager with the cookies from MockHttpServletResponse. This meant that newly added cookies are not saved to the cookie manager and thus are not presented in the next request.  This commit ensures that MockMvcWebConnection stores the response cookies in the cookie manager.  Issue: [SPR-14265](https://jira.spring.io/browse/SPR-14265)","closed","","rwinch","2016-05-11T05:16:22Z","2016-05-31T16:57:50Z"
"","1270","Add Support for ForwardedHeaderFilter sendRedirect","Previously ForwrdedHeaderFilter did not ensure that HttpServletResponse.sendRedirect worked properly based on X-Forwarded-* headers.  This commit updates ForwardedHeaderFilter to overrided the HttpServletResponse.sendRedirect method to ensure X-Forwarded-* headers are honored.  Issue SPR-15020","closed","","rwinch","2016-12-14T23:23:49Z","2016-12-16T00:37:30Z"
"","1239","Reactor netty 0.6","Prepare for reactor-netty 0.6 updates","closed","","smaldini","2016-11-17T11:15:52Z","2016-11-23T18:27:51Z"
"","1223","Add FormHttpMessageReader/Writer","Only the commit `Add Form and Multipart HttpMessageReader/Writer` is expected to be reviewed in this PR, since the other one is already part of PR #1201.  @rstoyanchev I think there is currently a blocking point in `MultipartHttpMessageWriter` implementation (line 154 where there is the TODO). To summarise the issue, `MultipartHttpMessageWriter` follow the same design principle than Spring MVC `FormHttpMessageConverter`  : it creates a custom `MultipartHttpOutputMessage` designed to write the part headers in the body using existing `HttpMessageWriters`.  Unlike `Flux Encoder#encode((Publisher inputStream, ...)` which is a pure function, `Mono ReactiveHttpOutputMessage#writeWith(Publisher body)` API don't allow to get the transformed output to reuse it, so current implementation is adding `MultipartHttpOutputMessage#getBody()` with a hackish call to `Mono#subscribe()` in order to be sure that the `Flux` we retrieve is defined. That works (tests are green), but I guess that's not good in term of backpressure management and not very clean in term of software design.  Do you see a better way to do this given current `ReactiveHttpOutputMessage` contract ?","closed","","sdeleuze","2016-10-25T22:57:55Z","2021-04-28T09:58:49Z"
"","1159","Fix docs","Old links were not available.","closed","","neetkee","2016-09-07T06:32:23Z","2016-09-07T07:50:37Z"
"","1135","Update DefaultNamespaceHandlerResolver.java","ok","closed","","dzhiqiang","2016-08-16T13:15:15Z","2016-08-16T15:10:06Z"
"","1204","Remove OracleLobHandler from documentation","Now that OracleLobHandler has finally been removed it should also be removed from the documentation.  This commit includes the following changes: - remove OracleLobHandler references from Javadoc - remove OracleLobHandler references from Asciidoctor  I did sign and agree to the CLA.  Issue: SPR-14809","closed","","marschall","2016-10-14T13:46:04Z","2016-10-14T15:01:28Z"
"","1079","No need to call canonicalName() when alreadySeen is null","no need to call canonicalName() when alreadySeen is null  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nkjackzhang","2016-06-15T04:12:35Z","2016-06-17T08:36:46Z"
"","1260","3.2.x","Need 3.2.0 source jar for debugging","closed","","nbaradar","2016-12-07T18:02:26Z","2016-12-07T18:27:46Z"
"","1060","Treat Kotlin nullable as non-required","Modify the core MethodParameter class to return the Kotlin nullability of a parameteter (cached for performance).  Where `isOptional` is used, also check for `isKotlinNullable` i.e. values are not considered required if they are Kotlin nullables: - spring-messaging: named value method arguments - spring-web: named value method arguments - spring-webmvc: request parts  This means that Kotlin client code no longer has to explicity specify ""required=false"" for Kotlin nullables -- this information is inferred automatically by the framework.  Issue: SPR-14165","closed","","rocketraman","2016-05-14T18:15:59Z","2016-11-21T23:20:49Z"
"","1068","let BeanUtils.copyProperties support to copy generic property","modify BeanUtils.copyProperties, let it support to copy generic property, and add unit test","closed","","varvelworld","2016-05-28T11:51:16Z","2016-06-05T05:28:38Z"
"","1070","SPR-14453 - MethodBasedEvaluationContext.lazyLoadArguments() fails for variable arguments method call","MethodBasedEvaluationContext.lazyLoadArguments  fails for an empty variable arguments method call `java.lang.ArrayIndexOutOfBoundsException at MethodBasedEvaluationContextTests.java:70`  No similar issue is found in project JIRA ICLA signed.","closed","","spodgurskiy","2016-05-31T18:37:42Z","2016-07-14T09:24:36Z"
"","1115","Fix javadoc reference","Method is called nextBackOff() and not nextBackOffMillis().","closed","","KingBuzzer","2016-07-17T18:59:40Z","2016-07-18T06:13:31Z"
"","1240","Add RedirectView to Spring Web Reactive","Main differences with the Spring MVC original implementation:  - Default redirect HTTP code is 303 See Other since we can assume    all HTTP clients support HTTP 1.1 in 2016  - No more http10Compatible property, use statusCode instead  - By default the redirect is relative to the context path  @rstoyanchev Could you please review this PR to give me your feedback on the choices I made? Notice that `sessionId` should be correctly encoded for Servlet based engines.","closed","","sdeleuze","2016-11-21T10:25:00Z","2021-04-28T09:58:52Z"
"","1088","SPR-14370 refactoring","Made propertySource protected so that getProperty() can be overriden by copy&paste  Discussion in Jira","closed","","djechelon","2016-06-20T12:16:03Z","2016-07-04T10:18:23Z"
"","1077","3.2.x","learning","closed","","jacieyoung","2016-06-12T02:49:27Z","2016-06-12T02:51:18Z"
"","1191","4.3.x","leaning","closed","","heart1988","2016-10-02T01:33:10Z","2016-10-02T09:05:01Z"
"","1231","PropertyEditor for java.time.Duration","java.time.Duration is useful type for bean properties that represent timeouts or other time limits. It's easily instantiatable using Java configuration and XML configuration as well (e.g. with a SpEL). However, a property editor is necessary to provide Duration value in a Property-based configuration override file.  For example, this allows a bean with a definition like:  ```xml        ```  to have its property reconfigured with:  ```xml        12 s  ``` (where the actual properties might actually be sourced from an external configuration file.)","closed","","findepi","2016-11-06T17:53:24Z","2017-01-09T22:14:50Z"
"","1065","Fix comments on private fields in TableMetaDataContext","It seems that comments on private fields in TableMetaDataContext is copied from CallMetaDataContext. This PR changes unsuitable comments for TableMetaDataContext.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","benelog","2016-05-25T21:03:38Z","2016-05-26T05:51:52Z"
"","1100","Declare the injection point as a Provider","It seems like there is no injection point in the example, so I just add setter to inject the Provider.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nkjackzhang","2016-07-07T08:12:02Z","2017-10-12T08:07:21Z"
"","1089","Fix typo in asciidoc","It seems like ""("" is missing.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nkjackzhang","2016-06-21T09:47:16Z","2016-07-01T08:59:01Z"
"","1082","Move  out of @code","It looks like the <a> in the comment doesn't work, so I move the <a> out of @code.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nkjackzhang","2016-06-17T02:26:17Z","2016-06-17T06:08:36Z"
"","1243","Fix NPE in ServletServerHttpResponse.ResponseBodyProcessor.write","Issue: SPR-14941","closed","","violetagg","2016-11-23T21:29:38Z","2016-11-24T10:56:43Z"
"","1164","Add HttpBasic ClientWebRequestPostProcessor","Issue: SPR-14682","closed","","rwinch","2016-09-08T21:13:01Z","2016-09-16T19:37:39Z"
"","1171","Improve exception handling when clients disconnect.","Issue: SPR-14538","closed","","violetagg","2016-09-13T18:34:24Z","2016-09-16T20:10:14Z"
"","1067","Allow consutractor injection at the CompositeDatabasePopulator","Issue: SPR-14313  I've fixed [SPR-14313](https://jira.spring.io/browse/SPR-14313). Please review this. I have signed and agree to the terms of the Spring ICLA.  Thanks.","closed","","kazuki43zoo","2016-05-28T01:31:12Z","2016-06-01T15:01:03Z"
"","1125","SPR-14491: Added shallow filter etag support for REPORT method","Issue: https://jira.spring.io/browse/SPR-14491  REPORT is a webDAV standard and it could be effectively used for serving reporting data with massive payload and support for caching.","closed","","sunnylkumar","2016-07-28T17:57:43Z","2016-08-23T19:31:28Z"
"","1254","ChannelFutureMono renamed to FutureMono","In the latest reactor-netty there is renaming of ChannelFutureMono class to FutureMono. Thus build fails on the latest master.  Reference to the [changes](https://github.com/reactor/reactor-netty/commit/734996eadbf87f62593f1e4c1488c8e329d1abbc) in the reactor-netty repo.","closed","","fdesu","2016-12-03T17:53:32Z","2017-05-30T16:48:22Z"
"","1198","SPR-14745 SchedulerFactoryBean's setOverwriteExistingJobs does not reliably work in a cluster","In relation to [SPR-14745](https://jira.spring.io/browse/SPR-14745)   While commit doesn't actually fix the issue, it extracts the way that the jobs, triggers and calendars are being registered so that they can be registered differently in a subclass. This can be used as a workaround until the issue is fixed at some later point.  I tried making as few changes as I could in order to register the triggers in another class while keeping everything 100% backwards compatible.  It would be great if this was backported to 4.3.x so that we can subclass SchedulerFactoryBean and override the way that the triggers are created to not run into the cluster race condition.","closed","","apixandru","2016-10-07T19:08:29Z","2016-11-24T15:24:26Z"
"","1167","Request/ResponseBodyAdvice based solution to provide hints to codecs","In order to continue the discussion began in [SPR-14557](https://jira.spring.io/browse/SPR-14557) and PR https://github.com/spring-projects/spring-framework/pull/1163, here is a proposal to provide hints like `@JsonView` from annotated controllers to codecs.  I have proposed this mechanism because I think: - We need a pluggable mechanism - I guess `Request/ResponseBodyAdvice` will still be needed in Reactive world, and hints are related to request/response body - I am not in favor using `ResolvableType` source because to do so we need to pass the stream type and not just the element type to the codecs, and that create some issues by exposing specific Reactive type information (dealing with `Foo` versus Flux`versus`Observable`) at codec level) - I am in favor of handling hints in a consistent way for our 3 main use cases : annotation based controller model, new functional model introduced by [SPR-12954](https://jira.spring.io/browse/SPR-12954) and the new Reactive HTTP client at codec level.  A possible alternative is to provide a lighter pluggable mechanism specific to providing hints.  Thanks in advance for your feedbacks.","closed","","sdeleuze","2016-09-12T13:22:30Z","2021-04-28T09:58:45Z"
"","1130","extendHandlerExceptionResolvers is not supported yet.","In current version, extendHandlerExceptionResolvers method overrided by my custom WebMvcConfigurer is not triggered. This patch trigger extendHandlerExceptionResolvers and I think this would be useful. And, WebMvcConfigurerComposite seems like a bug.","closed","","hyojinbae","2016-08-04T17:32:31Z","2018-03-30T15:17:22Z"
"","1128","Improved StringUtils","Improved following StringUtils methods: - mergeStringArrays:   now this method have a linear complexity instead of quadratic. - splitArrayElementsIntoProperties:   optimized case when charsToDelete param is empty","closed","","Akirus","2016-08-01T22:59:44Z","2022-02-18T19:11:07Z"
"","1208","Improve AbstractResponseBodyProcessor.onNext(DataBuffer)","If the provided DataBuffer is empty then request the next DataBuffer.","closed","","violetagg","2016-10-14T20:27:38Z","2016-10-14T20:42:24Z"
"","1062","SPR-14291: SimpleMappingExceptionResolver doesn't catch exceptions being thrown from Spring Formatters","I've just create the following issue on JIRA https://jira.spring.io/browse/SPR-14291 and its related question in StackOverflow   http://stackoverflow.com/questions/37322182/exceptionhandler-doesnt-catch-exceptions-being-thrown-from-spring-formatters  I've just included the provided implementation that checks if the **cause exception** matches with some exception registered on `SimpleMappingExceptionResolver`.","closed","","jcagarcia","2016-05-19T16:56:07Z","2016-05-23T13:52:29Z"
"","1266","Support lazy initialization of BindingResult when customize a MessageCodesResolver","I've fixed the [SPR-15009](https://jira.spring.io/browse/SPR-15009). Please review.","closed","","kazuki43zoo","2016-12-13T15:48:29Z","2016-12-13T15:56:00Z"
"","1233","Detect invalid configuration for autoGrowCollectionLimit on DataBinder","I've fixed the [SPR-14888](https://jira.spring.io/browse/SPR-14888). Please review.","closed","","kazuki43zoo","2016-11-08T16:02:53Z","2016-11-08T16:17:47Z"
"","1217","Support a code that start with objectName to the string argument","I've fixed [SPR-14840](https://jira.spring.io/browse/SPR-14840). Please review this.","closed","","kazuki43zoo","2016-10-23T11:32:48Z","2021-11-12T13:59:39Z"
"","1215","Support YearMonth and MonthDay with the @DateTimeFormat annotation","I've fixed [SPR-14839](https://jira.spring.io/browse/SPR-14839). Please review this.","closed","type: enhancement,","kazuki43zoo","2016-10-22T07:32:44Z","2021-12-16T15:28:34Z"
"","1094","Learn","I'm so sorry..I'm new to this and I didn't know how to close by my self..so sorry..","closed","","ddbXJ","2016-06-28T14:19:46Z","2016-06-28T14:33:05Z"
"","1078","Fix getFieldValues to allow proper extending","I'm currently using Spring 4.3.0.RC2 (via Spring Boot 1.4.0.M3) and I noticed that in some circumstances CORS headers were added multiple times, which causes the request to fail.  I noticed that the DefaultCorsProcessor does perform a check to see if the headers were already added, however that check didn't seem to work.  I traced the problem back further to ServletServerHttpResponse and its class ServletResponseHttpHeaders which extends HttpHeaders. The DefaultCorsProcessor uses the getAccessControlAllowOrigin function to check for the headers. That function in turn uses the protected function getFieldValues to build a comma delimited string. This function accesses this.headers directly, instead of using the get function which causes this problem, since ServletResponseHttpHeaders only overwrites the get function.  I changed the protected getFieldValues function to use the get function which should fix the problem, but is a fairly trivial change.  As a workaround I registered the CorsFilter manually instead of relying on Spring Boots autoconfiguration (which uses an HttpInterceptor instead of a filter)","closed","status: declined,","mhlz","2016-06-13T12:43:51Z","2019-05-24T08:41:24Z"
"","1155","4.2.x","I want to explore the code base.","closed","","sumitvyas02","2016-09-02T21:25:23Z","2016-09-02T22:05:40Z"
"","1184","HttpClient instance should be shared for each call","I made simple mvc controller like this:  ``` java private final WebClient webClient;      public ProxyController() {         ClientHttpConnector httpConnector = new MyReactorClientHttpConnector(ClientOptions.create());         webClient = new WebClient(httpConnector);     }      @RequestMapping(""/proxy"")     @ResponseBody     @ResponseStatus(code = HttpStatus.OK)     public Mono proxy() {         return webClient             .perform(get(""http://localhost/static.json"").accept(APPLICATION_JSON))             .extract(ResponseExtractors.body(String.class));     } } ```  After few seconds running app start to throw too many open file exception (lsof command revealed that app use many file descriptors with name 'eventpoll').  This patch fix this problem, but I think ClientHttpConnector and WebClient needs to implement close method that will delegate to HttpClient#close","closed","","soldierkam","2016-09-24T15:14:03Z","2016-10-20T15:21:41Z"
"","1061","SPR-14293: StringIndexOutOfBoundsException","I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.  An error occurs while binding request parameters for this path as soon as the uri contains special charaters.  http://myserver/request?type=1&testA=123&testB=abc&[']  ``` May 17, 2016 6:20:34 PM org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/].[OPASpringMVC] invoke SEVERE: Servlet.service() for servlet [OPASpringMVC] in context with path [] threw exception [Request processing failed; nested exception is java.lang.StringIndexOutOfBoundsException: String index out of range: -1] with root cause java.lang.StringIndexOutOfBoundsException: String index out of range: -1     at java.lang.String.substring(String.java:1911)     at org.springframework.beans.BeanWrapperImpl.getPropertyNameTokens(BeanWrapperImpl.java:694)     at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:923)     at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:95)     at org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:750)     at org.springframework.validation.DataBinder.doBind(DataBinder.java:646)     at org.springframework.web.bind.WebDataBinder.doBind(WebDataBinder.java:189)     at org.springframework.web.bind.ServletRequestDataBinder.bind(ServletRequestDataBinder.java:106)     at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.bindRequestParameters(ServletModelAttributeMethodProcessor.java:150)     at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:110)     at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77)     at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162)     at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:129)     at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110)     at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:776)     at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:705)     at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:620)     at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) ```","closed","","wuwen5","2016-05-17T10:40:37Z","2016-05-30T12:11:47Z"
"","1075","SPR-4691 - Add SimpleJdbcUpdate","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.  This patch is about https://jira.spring.io/browse/SPR-4691","closed","status: invalid,","benelog","2016-06-08T02:04:30Z","2021-04-27T11:30:05Z"
"","1207","Add HeadMapping shortcut annotation for @RequestMapping(method = RequestMethod.HEAD)","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","SympathyForTheDev","2016-10-14T16:10:12Z","2016-10-18T20:13:59Z"
"","1110","Show clearly CGLIB classes repack package","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nkjackzhang","2016-07-14T09:52:43Z","2017-10-13T10:13:05Z"
"","1108","typo in ascii, javadoc","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nicholas-fwang","2016-07-12T18:59:37Z","2016-07-14T17:14:21Z"
"","1107","Add missing white space between words","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nkjackzhang","2016-07-12T06:40:33Z","2017-10-13T10:13:28Z"
"","1105","fix typo in ascii doc","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nicholas-fwang","2016-07-11T15:42:00Z","2016-07-12T06:53:09Z"
"","1102","Use hasLength() call instead","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nkjackzhang","2016-07-08T04:18:47Z","2017-09-14T02:36:48Z"
"","1099","It may be better to add ""@"" in this line.","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nkjackzhang","2016-07-06T08:56:04Z","2016-07-06T09:21:16Z"
"","1096","Fix typo in javadoc","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nkjackzhang","2016-07-01T08:37:29Z","2016-07-01T08:42:59Z"
"","1095","Fix typo in javadoc","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nkjackzhang","2016-07-01T08:26:37Z","2016-07-01T08:40:43Z"
"","1080","fix typo in comment","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nkjackzhang","2016-06-16T07:18:16Z","2016-06-16T10:13:40Z"
"","1058","Edit code comment and minor improvement to `PatternsRequestCondition`","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","Youmoo","2016-05-12T10:22:38Z","2018-03-30T17:37:03Z"
"","1129","Changed misspelled text from doc and source comments.","I found 'Singe' words, and corrected those as 'Single'. In two cases, 'Single' is correct words.","closed","","kduhyun","2016-08-04T10:17:50Z","2016-08-10T08:47:01Z"
"","1114","Broken hyperlink","I am reading Spring Framework Reference, I see a broken link at here:  http://www.objectmentor.com/resources/articles/ocp.pdf[Bob Martin, The Open-Closed  Principle (PDF)]","closed","","donhuvy","2016-07-17T15:31:41Z","2016-07-18T06:15:37Z"
"","1111","SPR-10343","https://jira.spring.io/browse/SPR-10343: getImports in ConfigurationClassParser fails if any annotation stems from a classloader other than the classloader of the annotated class","closed","","olaf-otto","2016-07-15T15:11:32Z","2016-07-15T15:14:58Z"
"","1081","SPR-14370 - hide sensitive data from debug logs","Hide property values from debug logs if key contains blacklisted-word ""password"". This is a trivial fix I am proposing for a ticket submitted this morning. As described in the ticket, I am taking Atlassian Bamboo's approach of hiding passwords from the logs files by blacklisting the word ""password"". Obviously one should not enable debug log unless really necessary.  The Clever Coder's Checklist: - I did run the JUnit tests and they did not break. - I did not check for key being null assuming that it will be never null at that point in the code - I skipped discussion before submitting code because it is a trivial fix  ``` I have signed and agree to the terms of the Spring Individual Contributor License Agreement. ```","closed","","djechelon","2016-06-16T12:04:58Z","2016-07-04T10:19:02Z"
"","1076","Allow method inlining of ObjectUtils.nullSafeEqauls()","Hey,  while doing a benchmark in our project with the JVM options `-XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlining `  I noticed that _ObjectUtils.nullSafeEquals()_ is a hot method, but unfortunately too big for the VM to inline it. At least with the defaults of 325 bytecodes as it currently shows up with 337 bytes.  ``` ...  @ 8   org.springframework.util.ObjectUtils::nullSafeEquals (337 bytes)   hot method too big ... ```  I made a small improvement by simply extracting the more uncommon use-case of checking for array equality, which reduces the method to 55 bytes and allows the inlining of the method. As a small side-benefit it also reduces the cyclomatic complexity of the method itself.  ``` ... @ 8   com.dreis.benchmark.ObjectUtilsInlinedEquals::nullSafeEquals (55 bytes)   inline (hot) ... ```  I also created a small microbenchmark that looks like this:  ``` java @BenchmarkMode(Mode.Throughput) @State(Scope.Thread) public class ObjectUtilsBenchmark {      @State(Scope.Thread)     public static class TestState {         public String[] firstStringArray = new String[] {""a"", ""b"", ""c""};         public String[] secondStringArray = new String[] {""a"", ""b"", ""c""};         public List firstStringCollection = Arrays.asList(""a"", ""b"", ""c"");         public List secondStringCollection = Arrays.asList(""a"", ""b"", ""c"");     }      @Benchmark     public boolean testStringArray(TestState testState) {         return ObjectUtils.nullSafeEquals(testState.firstStringArray, testState.secondStringArray);     }      @Benchmark     public boolean testStringCollection(TestState testState) {         return ObjectUtils.nullSafeEquals(testState.firstStringCollection, testState.secondStringCollection);     }      @Benchmark     public boolean testStringArrayInlined(TestState testState) {         return ObjectUtilsInlinedEquals.nullSafeEquals(testState.firstStringArray, testState.secondStringArray);     }      @Benchmark     public boolean testStringCollectionInlined(TestState testState) {         return ObjectUtilsInlinedEquals.nullSafeEquals(testState.firstStringCollection, testState.secondStringCollection);     }  } ```  The results of this microbenchmark look roughly like this.  ``` Benchmark                                          Mode  Cnt          Score        Error  Units ObjectUtilsBenchmark.testStringArray              thrpt   20  127900470,357 ± 985253,526  ops/s ObjectUtilsBenchmark.testStringArrayInlined       thrpt   20  149902422,075 ± 905479,738  ops/s ObjectUtilsBenchmark.testStringCollection         thrpt   20   61584045,911 ± 345039,219  ops/s ObjectUtilsBenchmark.testStringCollectionInlined  thrpt   20   70381357,642 ± 751583,252  ops/s ```  https://jira.spring.io/browse/SPR-14349  Keep up the great work :-)  Cheers, Christoph","closed","","dreis2211","2016-06-09T19:59:33Z","2016-06-09T20:54:54Z"
"","1249","Ignore HTML references > MAX_REFERENCE_SIZE in HtmlCharacterEntityDecoder","Hello, I think that there's something incorrect when I read the code. Although this is not a severe problem, the code just worked all fine. But I just want to get it right, and improve a little on performance :D","closed","in: web,","d4ksn","2016-11-28T17:04:35Z","2021-11-16T14:06:43Z"
"","1263","SPR-14995 - Add some new matchers for query parameters into MockRestRequestMatchers","Hello, as I have seen there isn't any request matcher for query parameters in the project spring-test. I'd like to use it in the project spring-cloud-contract and imho the place of these code pieces are here. If you have the same feelings please merge this pull request. :) The factory methods for query parameters also support charset for URI decoding or use the default one (UTF_8)  Thanks.","closed","","schjan79","2016-12-07T22:59:10Z","2016-12-13T21:16:26Z"
"","1256","Add some new matchers for query parameters into MockRestRequestMatchers","Hello, as I have seen there isn't any request matcher for query parameters in the project spring-test. I'd like to use it in the project spring-cloud-contract and imho the place of these code pieces are here. If you have the same feelings please merge this pull request. :)  Thanks.","closed","","schjan79","2016-12-06T21:19:20Z","2016-12-07T22:49:26Z"
"","1118","SPR-14496 - getDeclared","Having a problem with this method because it's not finding my inner class constructor  here's my test  ```     @Test     public void testInstantiate() {          Constructor ctor = ClassUtils.getConstructorIfAvailable( MyClassBar.class, MyInterface.class );         assertThat( ctor, notNullValue() );         }  private interface MyInterface {      }      private static class MyClassFoo implements MyInterface {      }      private static class MyClassBar {          private final MyInterface myInterface;          MyClassBar( final MyInterface myInterface )         {             this.myInterface = myInterface;         }          MyInterface getMyInterface()         {             return myInterface;         }     } ```  I can work put more work into this if desired.","closed","","xenoterracide","2016-07-18T20:18:33Z","2016-07-20T13:59:32Z"
"","1166","Is the first word ""method"" needless?","From context, It seems that the first word ""method"" is needless,","closed","","nkjackzhang","2016-09-12T02:31:29Z","2016-09-12T09:48:12Z"
"","1072","UTF-8 as default for ""MULTIPART_FORM_DATA"" conversion","FormHttpMessageConverter should use UTF-8 on default for converting ""MULTIPART_FORM_DATA"" to handle Eastern Europe characters. It could be overriden, however in default causes unnecessary bug.","closed","","RG9","2016-06-03T15:01:18Z","2016-06-08T14:37:53Z"
"","1074","Dual setDeserializers method","For simple duality with setSerializers, useful when configuring via XML app context","closed","","djechelon","2016-06-07T08:01:07Z","2016-06-07T10:42:21Z"
"","1069","Fix SPR-14315:Flush headers before return","Flush headers before method return in StreamingResponseBodyReturnValueHandler#handleReturnValue  Issue: SPR-14315","closed","","zhoulifu","2016-05-30T07:01:30Z","2016-06-01T01:35:12Z"
"","1241","Implement allocation-friendly method to get user count in SimpUserRegistry","Fixes https://jira.spring.io/browse/SPR-14930","closed","","dreis2211","2016-11-21T20:03:57Z","2016-11-21T20:14:43Z"
"","1236","SPR-14901 Allow customization of STOMP message header encoding","Fixes https://jira.spring.io/browse/SPR-14901","closed","","dreis2211","2016-11-11T20:44:41Z","2016-12-08T16:38:05Z"
"","1186","SPR-14760 - Reduce String allocations coming from TransactionAspectSupport.methodIdentification()","Fixes https://jira.spring.io/browse/SPR-14760","closed","","dreis2211","2016-09-28T06:57:24Z","2016-10-16T17:41:19Z"
"","1185","Improve performance of StompEncoder","Fixes https://jira.spring.io/browse/SPR-14747","closed","","dreis2211","2016-09-25T17:09:45Z","2016-09-25T18:42:47Z"
"","1101","Fix typo in javadoc","Fix typo in javadoc and delete extra white space line.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nkjackzhang","2016-07-07T09:19:21Z","2017-10-12T08:10:14Z"
"","1176","SPR-5503 - Fix get message from resource of basename with dots and refactor license ResourceBundleMessageSourceTests","Fix get message from resource of basename with dots and refactor license ResourceBundleMessageSourceTests  Prior to this commit, doesn't get message from ReloadableResourceBundleMessageSource if basename exist dots but slashes, for example ""package.name.messages.properties"". Following that change, these names are valid for getting messages  Issue: SPR-5503","closed","in: core,","wertklop","2016-09-15T19:28:43Z","2021-11-24T14:05:05Z"
"","1136","SPR-14593: Use HttpClient constructor that supports SSL connections","Fix for SPR-14593, using the HttpClient constructor that does support SSL, instead of one that forces port 80.","closed","","olsson","2016-08-17T16:10:01Z","2016-08-23T09:17:49Z"
"","1137","SPR-14592: Reactive response extractor does not invoke error handler","Fix for SPR-14592. When getting a `response()` from the `ResponseExtractors`, the `responseErrorHandler` is now consulted before passing forward the `ResponseEntity`.","closed","","olsson","2016-08-17T16:43:08Z","2020-11-02T11:32:36Z"
"","1222","Import format fix according to Code Style","Fix for IntelliJ IDEA import format rules according to current [Spring Framework Code Style](https://github.com/spring-projects/spring-integration/wiki/Spring-Integration-Framework-Code-Style)","closed","","akryvtsun","2016-10-25T15:09:25Z","2016-10-25T15:23:22Z"
"","1275","SPR-14503: fix multipart filename encoding issue","Fix filename encoding problem (when filename can't be convert to ascii)","closed","","viartemev","2016-12-22T12:11:21Z","2016-12-22T17:20:55Z"
"","1145","fix bug: run ""gradle eclipse"" may cause NPE.","fix bug: run ""gradle eclipse"" may cause NPE.","closed","","hall-wong","2016-08-26T09:06:09Z","2016-08-31T09:56:14Z"
"","1149","`@Inject` cannot be used with Optional","fix a wrong statement about that","closed","","destan","2016-08-28T21:16:15Z","2016-09-03T06:47:29Z"
"","1152","Add support for RxJava 2","Draft PR for discussion.  Issue: SPR-14628","closed","","sdeleuze","2016-08-31T12:56:23Z","2021-04-28T09:58:43Z"
"","1235","Support URI with https scheme and port for SSL client use with Netty","Do not check on non-specified port when scheme is https. Enables SSL for https URIs with a specified port.  Issue: SPR-14889","closed","","mp911de","2016-11-09T12:52:14Z","2016-11-11T15:51:50Z"
"","1210","DefaultDataBuffer improvements","DefaultDataBuffer.grow(int): - Copy only the remaining data - Update readPosition/writePosition","closed","","violetagg","2016-10-18T10:17:07Z","2016-10-18T11:48:40Z"
"","1221","SPR-14773: CssLinkResourceTransformer not working with gzipped CSS","CssLinkResourceTransformer is not working if you are using gzipped CSS files. The links will not be modified within a CSS file, if you have a gzipped file. The problem is that the links could not be find due to reading the gzipped content. The gzipped file should be decompressed first or if available the uncompressed version should be used.  Issue: SPR-14773","closed","","mnhock","2016-10-24T17:18:08Z","2016-11-16T09:48:47Z"
"","1132","Adds a useful example to CronSequenceGenerator","CronSequenceGenerator didn't have the example: list of comma separated expressions. The class supports it but doesn't mention it in the examples. And every time people need this feature they have to remember that this class supports it, or Google it, or inspect the source code.","closed","","igormukhin","2016-08-11T13:05:22Z","2016-08-16T09:43:17Z"
"","1274","SPR-15030: Allow to specify serialization hints to the functional web server","Could you review this in order to allow me to push in master @poutsma?","closed","","sdeleuze","2016-12-22T10:17:58Z","2021-04-28T09:56:55Z"
"","1148","Improve performance of StompCommand.getMessageType()","Closes SPR-14636","closed","","dreis2211","2016-08-28T17:46:42Z","2016-08-29T08:34:07Z"
"","1147","Improve performance when parsing MediaTypes","Closes SPR-14635","closed","","dreis2211","2016-08-28T16:07:14Z","2016-08-31T11:57:05Z"
"","1139","Avoid unnecessary String concatenations in StompHeaderAccessor","Closes SPR-14625","closed","","dreis2211","2016-08-24T18:26:01Z","2016-08-24T19:05:40Z"
"","1158","Fix typo in asciidoc","Change servlet name in the code to ""example"", because the servlet name ""example"" is mentioned below.","closed","","nkjackzhang","2016-09-06T09:41:27Z","2016-09-07T07:38:48Z"
"","1092","Fix typo in asciidoc","Change  to ``  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","nkjackzhang","2016-06-28T09:18:25Z","2016-06-28T09:20:24Z"
"","1269","SPR-15018 - Construct RowMapper using the impl hook","Call getColumnRowMapper() to create the row mapper; prevents requirement to override extractReturnedResults().  We have large result sets that are affected by the inefficiency of the LinkedCaseInsensitiveMap returned by the ColumnMapRowMapper.  The problem can be fixed if we can just override getColumnMapRowMapper().  But We are forced to override extractReturnedResults() because it's constructing a ColumnMapRowMapper directly instead of calling getColumnMapRowMapper().","closed","","moores-expedia","2016-12-14T15:55:20Z","2016-12-14T17:25:51Z"
"","1200","SPR-14745 change the way that triggers and jobs are registered","attempt to fix SPR-14745","closed","","apixandru","2016-10-11T20:19:39Z","2016-11-24T15:24:39Z"
"","1224","Add HttpHeaders#get/setContentDisposition()","As requested in [SPR-14408](https://jira.spring.io/browse/SPR-14408), this PR adds a method to get the `filename` parameter of the `Content-Disposition` header.  @bclozel I have not yet included support for `filename*` encoded headers, because I am not sure we should support this. See [this comment](https://jira.spring.io/browse/SPR-14547?focusedCommentId=133006&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-133006) for more details. I will not merge this PR before your feedback.","closed","","sdeleuze","2016-10-26T12:47:20Z","2021-04-28T09:58:51Z"
"","1170","Simpler solution to provide hints","As proposed by @rstoyanchev, here is a draft PR that allow to provide hints without implementing `Request/ResponseBodyAdvice`. I have used an `Object source` parameter to allow using this mechanism for the HTTP client and the server functional programming model if need, without exposed `MethodParameter` in the codec/reader/writer API.  Any thoughts?","closed","","sdeleuze","2016-09-13T10:11:23Z","2021-04-28T09:58:46Z"
"","1153","Fix AbstractRequestBodyPublisher to comply with the spec","As per specification ""The Subscription MUST allow the Subscriber to call Subscription.request synchronously from within onNext or onSubscribe"". With the current implementation if Subscription.request is called more than once when Subscriber.onSubscribe ISE will be thrown - java.lang.IllegalStateException: DEMAND. With this fix the implementation will not throw ISE and will allow many invocations of Subscription.request when Subscriber.onSubscribe.","closed","","violetagg","2016-09-02T08:32:18Z","2016-09-02T21:38:10Z"
"","1182","Fixes SPR-14735: Exception during initialisaton of resource handling at WebReactiveConfiguration","As explained at https://jira.spring.io/browse/SPR-14735, using the current `5.0.0.BUILD-SNAPSHOT` initialisation of static resources in a reactive web configuration class like:  ``` java     @Override     protected void addResourceHandlers(final ResourceHandlerRegistry registry) {         super.addResourceHandlers(registry);         registry.addResourceHandler(""/images/**"").addResourceLocations(""/images/"");         registry.addResourceHandler(""/css/**"").addResourceLocations(""/css/"");         registry.addResourceHandler(""/js/**"").addResourceLocations(""/js/"");     } ```  Results in an exception:  ``` Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.reactive.HandlerMapping]: Factory method 'resourceHandlerMapping' threw exception; nested exception is java.lang.IllegalArgumentException: PathMatcher must not be null     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)     ... 63 more Caused by: java.lang.IllegalArgumentException: PathMatcher must not be null     at org.springframework.util.Assert.notNull(Assert.java:165)     at org.springframework.web.reactive.handler.AbstractHandlerMapping.setPathMatcher(AbstractHandlerMapping.java:92)     at org.springframework.web.reactive.config.WebReactiveConfiguration.resourceHandlerMapping(WebReactiveConfiguration.java:202) ```  In order to fix this, I've initialised both the _path matcher_ and the _path helper_ objects in `SpringReactiveWebConfig` in a fashion very similar to what is done at `WebMvcConfigurationSupport` for creating the equivalent objects.","closed","","danielfernandez","2016-09-19T23:44:39Z","2016-09-20T01:19:15Z"
"","1181","documentation - added missing quotation mark","Added missing quotation mark in code sample in documentation for validation.","closed","","kosmaty","2016-09-19T12:35:43Z","2016-09-19T12:48:10Z"
"","1168","Add Resource.readableChannel()","Added getReadableByteChannel() to Resource, which returns a java.nio.ReadableByteChannel. The default implementation uses Channels.newChannel() to create a channel based on what is returned from getInputStream(). Subclasses have more effecient, file-based implementations.  Issue: SPR-14698","closed","","poutsma","2016-09-12T17:45:07Z","2016-09-14T19:52:18Z"
"","1141","Added Host property to HttpHeaders","Added getHost/setHost to HttpHeaders, returning/taking a InetSocketAddress.","closed","","poutsma","2016-08-25T12:03:09Z","2016-08-25T13:49:54Z"
"","1161","SPR-14706 - add setTransactionManagerBeanName","add setTransactionManagerBeanName for set TransactionAspectSupport#setTransactionManagerBeanName  so one beanfactory can have more than one TransactionManager  otherwise will:  ``` org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [org.springframework.transaction.PlatformTransactionManager] is defined: expected single matching bean but found 2: transactionManagerLog,transactionManager     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:368)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:371) ```","closed","","qxo","2016-09-07T09:37:21Z","2016-09-19T12:59:30Z"
"","1175","SPR-14664 Add byte range requests support","Add byte range requests support for static resources in the reactive web project.","closed","","bclozel","2016-09-14T21:14:28Z","2016-09-20T15:08:16Z"
"","1122","Cancel Subscription when onError is invoked internally","AbstractResponseBodyProcessor.onError and AbstractResponseBodyFlushProcessor.onError will be invoked when: - The Publisher wants to signal with onError that there are failures.   Once onError is invoked the Subscription should be considered canceled. - The internal implementation wants to signal with onError that there   are failures. In this use case the implementation should invoke   Subscription.cancel()","closed","","violetagg","2016-07-27T14:11:58Z","2016-07-27T17:10:32Z"
"","1178","SPR-14502 - Add ClientHttpRequestInterceptor for WebClient","`ClientHttpRequestInterceptor`s are meant for: 1. storing HTTP responses in a Cache and serving those instead of sending the actual request 2. client-side load-balancing, especially if it needs to periodically fetch the list of available nodes, or retry with another node if one fails 3. creating an authentication/authorization interceptor that fetches tokens from a 3rd party API (like an OAuth2 interceptor?)  Note that the current design does not allow to compose/modify the outgoing request body. I thought that this can ben done easily with a request post processor, whereas composing on a Publisher in an interceptor would be more complex.   Also, there are different ways to write the request body depending on the chosen semantics at the message encoding level: request.write(Publisher) versus request.writeAndFlush(Publisher>). This make it harder to compose the request body at the interceptor level without making the API complex.  Not exposing the request body in the interceptor may be a limiting choice in some cases, so that can still be reconsidered.","closed","","bclozel","2016-09-16T16:03:33Z","2016-09-20T16:24:59Z"
"","1257","SPR-14988: @GetMapping method annotation uses consumes attribute from @RequestMapping class annotation","[SPR-14988: @GetMapping method annotation uses consumes attribute from @RequestMapping class annotation](https://jira.spring.io/browse/SPR-14988)  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","bedrin","2016-12-06T23:09:49Z","2016-12-07T22:52:08Z"
"","1258","SPR-14988: [Spring 5] @GetMapping method annotation uses consumes attribute from @RequestMapping class annotation","[SPR-14988: @GetMapping method annotation uses consumes attribute from @RequestMapping class annotation](https://jira.spring.io/browse/SPR-14988)  I have raised a separate PR for version 4.3.0: https://github.com/spring-projects/spring-framework/pull/1257  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","bedrin","2016-12-07T00:15:50Z","2016-12-07T22:53:04Z"
"","1251","Add ""data:"" prefix for multi-line SSE data field with Jackson","@rstoyanchev Based on the Jackson `PrettyPrinter` based trick with discussed + Jackson capabilities to specify such `PrettyPrinter` at `ObjectWriter` level, I think I ended up with a pretty good solution in the sense it is not intrusive and it does not lead to performance penalty. Could you say me if that's fine for you?  Also could you confirm that we should apply that to `4.3.x` branch as well?  Issue: SPR-14899","closed","","sdeleuze","2016-11-30T18:51:56Z","2021-04-28T09:58:53Z"
"","1216","4.3.x","4.3","closed","","caoxie","2016-10-22T07:42:15Z","2016-10-22T11:52:43Z"
"","1244","Fix wrong synchronization","1. synchronization lock should on class not instance if try to access static variable 2. use double-checked locking instead","closed","","quaff","2016-11-24T08:13:28Z","2016-11-24T11:06:49Z"
"","1143","Refactored SseEvent to ServerSentEvent","- Renamed SseEvent to ServerSentEvent to make the name less redundant. - ServerSentEvent is now immutable, having a builder to create new instances. - Realigned the class properties to more closely match the events   described in the spec, so that `reconnectTime` becomes `retry`, and   `name` becomes `event`.","closed","","poutsma","2016-08-25T13:01:09Z","2016-09-01T11:53:57Z"
"","1268","Refactor the usage of Undertow ByteBufferPool","- lazy allocate the PooledByteBuffer, only if there is a request body   for reading - close the PooledByteBuffer once the request finishes","closed","","violetagg","2016-12-14T13:11:36Z","2016-12-14T19:43:18Z"
"","1213","ServletHttpHandlerAdapter improvements","- Handle the request from a different thread instead of the current   container thread - Handle AsyncListener.onComplete event  Issue: SPR-14772","closed","","violetagg","2016-10-19T11:25:58Z","2016-10-19T18:43:22Z"
"","19344","SpringValidatorAdapter's ResolvableAttribute is not serializable [SPR-14778]","**[Łukasz Glapiński](https://jira.spring.io/secure/ViewProfile.jspa?name=lglapinski)** opened **[SPR-14778](https://jira.spring.io/browse/SPR-14778?redirect=false)** and commented  After switching to spring-session-redis management there is no way to simply implement POST redirect GET scenario by assigning BindResult to RedirectAttributes. It's because [ResolvableAttribute](http://docs.spring.io/autorepo/docs/spring/4.2.5.RELEASE_to_4.3.0.RC1/Spring%20Framework%204.3.0.RC1/org/springframework/validation/beanvalidation/SpringValidatorAdapter.ResolvableAttribute.html) does not implement Serializable interface and it's part of FieldError class (as one of arguments objects).  Example:  ```java protected  boolean valid(T obj, String name, BindingResult result, RedirectAttributes redirectAttributes) {     if (result.hasErrors()) {         redirectAttributes.addFlashAttribute(""org.springframework.validation.BindingResult."" + name, result);         redirectAttributes.addFlashAttribute(name, obj);         return false;     }     return true; }  @RequestMapping(value = {""/join""}, method = RequestMethod.GET) public String handleGetSignup(Model model) {     if (!model.containsAttribute(""userJoinForm"")) {         model.addAttribute(""userJoinForm"", new UserJoinForm());     }     return ""/join/signup""; }  @RequestMapping(value = {""/join""}, method = RequestMethod.POST) public String handlePostSignup(RedirectAttributes redirectAttributes,                                @Validated @ModelAttribute UserJoinForm userJoinForm,                                BindingResult result) {      if (!valid(userJoinForm, ""userJoinForm"", result, redirectAttributes)) {         return ""redirect:/join"";     }     ... } ```  ---  **Affects:** 4.3.3  **Issue Links:** - #17986 Support MessageSourceResolvable to string argument value at SpringValidatorAdapter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d2079f32d8261680c01930c254941e7497f3a9be, https://github.com/spring-projects/spring-framework/commit/ebed7b77c356ff91e02292473c51024868feae6b","closed","type: regression,","spring-projects-issues","2016-10-05T15:57:30Z","2019-01-11T17:24:59Z"
"","19057","Various performance improvements for web request processing [SPR-14488]","**[Zhengsheng Xia](https://jira.spring.io/secure/ViewProfile.jspa?name=niaoge)** opened **[SPR-14488](https://jira.spring.io/browse/SPR-14488?redirect=false)** and commented  edited or added: AnnotatedElementUtils.java,FastOutputStreamWriter.java,StreamUtils.java,StringHttpMessageConverter.java.  By add caches, improve streamwriter ,improve base method,etc.  the http tps improved from 800 to 1200, (15k json,tomcat 9 )  ---  **Affects:** 4.3.1  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1117  **Issue Links:** - #19061 Revise encoding steps towards use of JDK Charset and StandardCharsets  1 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-07-19T15:30:15Z","2019-01-12T02:25:31Z"
"","19004","Avoid canonicalName call for already-seen bean name [SPR-14433]","**[Zhang Jie](https://jira.spring.io/secure/ViewProfile.jspa?name=nkjackzhang)** opened **[SPR-14433](https://jira.spring.io/browse/SPR-14433?redirect=false)** and commented  The variable ""canonicalName"" is used only once, and there is no need to call canonicalName() when ""alreadySeen != null && alreadySeen.contains(beanName)"" is true, so inline it.   ---  **Affects:** 4.2.7, 4.3.1  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5890758fd0db90646fb216e16dbab4c88aae0096, https://github.com/spring-projects/spring-framework/commit/52065a736b6b140291c15f0c4caf051856aca6f7, https://github.com/spring-projects/spring-framework/commit/2e075baedee8355554ae91d062677940c9d514da  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-07-06T08:31:04Z","2016-07-28T09:16:20Z"
"","19379","simp allows glob subscription to receive another user messages [SPR-14813]","**[Yury Altukhou](https://jira.spring.io/secure/ViewProfile.jspa?name=yury.altukhou@gmail.com)** opened **[SPR-14813](https://jira.spring.io/browse/SPR-14813?redirect=false)** and commented  Messages sent from server to user queue(from methods with `@SendToUser`) will also be sent to clients that subscribed with glob pattern '/queue/*'  Setup is: webmvc+(stomp over sockjs). In attached tests: 1. connect 2 stomp clients 2. subscribe client 1 to '/user/queue/*' 3. subscribe client 2 to '/queue/*' 4. send message from client 1 to 'echo' service ,that has `@SendToUser`('/queue/echo') annotation 5. expect client 1 to get two messages(connect reply,echo message) 6. expect client 2 to get one message (connect reply)    Fail: client 2 got two messages, second one with 'destination:/user/queue/echo'    ---  **Affects:** 4.3.2, 4.3.3  **Attachments:** - [simp-bug.zip](https://jira.spring.io/secure/attachment/23590/simp-bug.zip) (_11.04 kB_)","closed","status: declined,","spring-projects-issues","2016-10-14T17:10:08Z","2019-01-12T16:33:51Z"
"","19387","StringHttpMessageConverter should use its default charset [SPR-14821]","**[Yi](https://jira.spring.io/secure/ViewProfile.jspa?name=yzdytm)** opened **[SPR-14821](https://jira.spring.io/browse/SPR-14821?redirect=false)** and commented  To set `@responsebody` encoding in spring-webmvc, I used to add the following lines in configuration file:    \ \ \ \text/plain;charset=UTF-8\ \text/html;charset=UTF-8\ \ \ \ \  This override the default charset responsebody handler use. And it worked with spring-mvc version 4.2.7 and below.  However, in the latest version of spring-webmvc(4.3.3), this method does not work. In the new version, StringHttpMessageConverter reads content-type from response header, and if content-type string includes charset information, it use this charset and ignores it's default charset.  ---  **Affects:** 4.3.1, 4.3.2, 4.3.3  **Reference URL:** http://stackoverflow.com/questions/40098647/responsebody-encoding-in-spring-mvc-4-3-3  **Issue Links:** - #18209 Allow specifying HTTP response Content-Type without losing default charset","closed","status: invalid,","spring-projects-issues","2016-10-19T10:37:33Z","2019-01-12T05:21:45Z"
"","19531","Add HTTP 1.0 support on Reactor Netty [SPR-14964]","**[Yevhenii Melnyk](https://jira.spring.io/secure/ViewProfile.jspa?name=yevhenii-melnyk)** opened **[SPR-14964](https://jira.spring.io/browse/SPR-14964?redirect=false)** and commented  **Scenario**  * Web application outputting a sequence of items produced by a `Flux`, serialized as JSON * SSE not being used. * Use Apache Benchmark to perform 1000 requests  **Results**  Web app based on Jetty,Tomcat and Undertow returns result in a reasonable amount of time. Web app that runs using Reactor Netty or RxNetty doesn't finish. After benchmark timeouts server can't handle requests any more, even single ones from browser. The following test was performed from localhost as well as from another computer in the same local network. The debug console output is attached.  ```java >ab -n 1000 -c 100 http://localhost:8083/items/10  This is ApacheBench, Version 2.3 <$Revision: 1663405 $> Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/  Benchmarking localhost (be patient) apr_pollset_poll: The timeout specified has expired (70007) ```  ---  **Affects:** 5.0 M3  **Reference URL:** https://github.com/reactor/reactor-netty/issues/21  **Attachments:** - [netty.log](https://jira.spring.io/secure/attachment/23640/netty.log) (_490.33 kB_) - [rxjava.log](https://jira.spring.io/secure/attachment/23639/rxjava.log) (_490.31 kB_)  **Issue Links:** - #19510 Buffering of output in Spring Web Reactive with Netty too aggressive (_**""duplicates""**_)","closed","status: superseded,","spring-projects-issues","2016-11-30T20:07:14Z","2020-04-01T14:22:14Z"
"","19522","Introduce Vert.x as a reactive runtime [SPR-14955]","**[Yevhenii Melnyk](https://jira.spring.io/secure/ViewProfile.jspa?name=yevhenii-melnyk)** opened **[SPR-14955](https://jira.spring.io/browse/SPR-14955?redirect=false)** and commented  Vert.x as well as Reactor and RxNetty provides powerful support for creating non-blocking event-driven web applications and supports WebSockets and Http2. Are there any plans on implementing new adapters for reactive spring?   ---  **Affects:** 5.x Backlog  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1247  1 votes, 5 watchers","closed","in: web,","spring-projects-issues","2016-11-26T11:26:04Z","2019-01-11T19:18:05Z"
"","19588","BridgeMethodResolver.findBridgedMethod() return wrong method with interface [SPR-15021]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-15021](https://jira.spring.io/browse/SPR-15021?redirect=false)** and commented  BridgeMethodResolver.findBridgedMethod() should return bridged method for sub interface, attachment is test case.  ---  **Affects:** 4.3.4  **Attachments:** - [BridgeMethodTest.java](https://jira.spring.io/secure/attachment/23656/BridgeMethodTest.java) (_1.09 kB_)  **Issue Links:** - #20651 Incorrectly identify bridged method on interface (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2016-12-15T01:13:15Z","2019-01-12T16:45:19Z"
"","19571","Make BeanPropertyRowMapper more extensible for override [SPR-15004]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-15004](https://jira.spring.io/browse/SPR-15004?redirect=false)** and commented  I'm writing my own RowMapper extends BeanPropertyRowMapper to supports nested property, for example:  ```java public class Person{    private Name name;    //getter and setter; } public class Name{    private String firstName;    private String lastName;    //getter and setter } ```  ```sql select firstName as ""name.firstName"", lastName as ""name.lastName"" from person ```  I wish BeanPropertyRowMapper can expose such methods for overrides  ```java  	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {         ...... 			boolean fromFind = false; 			if (pd == null) { 				pd = tryFindPropertyDescriptor(column, bw); 				fromFind = true; 			}         ...... 					try { 						if (fromFind) { 							bw.setPropertyValue(column, value); 						} else { 							bw.setPropertyValue(pd.getName(), value); 						} 					} catch (TypeMismatchException ex) {         ...... 					}         ...... 	}  	protected PropertyDescriptor tryFindPropertyDescriptor(String column, BeanWrapper bw) { 		return null; 	}  ```  Subclass can override those methods:  ```java @Override protected PropertyDescriptor tryFindPropertyDescriptor(String column, BeanWrapper bw) {      if (column.indexOf('.') > 0)            return bw.getPropertyDescriptor(column);      return null; } ```  And there is a fallback options, change field visibility of BeanPropertyRowMapper from private to protected, let subclass override mapRow entirely, I prefer to the first solution.   ---  **Affects:** 4.3.4","open","type: enhancement,","spring-projects-issues","2016-12-12T02:37:50Z","2016-12-12T10:53:24Z"
"","19569","MapSqlParameterSource should supports nested path like BeanPropertySqlParameterSource [SPR-15002]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-15002](https://jira.spring.io/browse/SPR-15002?redirect=false)** and commented  for example: select * from user where name=:map['name'].list[1].name   ---  **Affects:** 4.3.4","closed","status: bulk-closed,","spring-projects-issues","2016-12-09T03:36:08Z","2019-01-12T00:11:50Z"
"","19556","Update JdbcUtils to improve enum support [SPR-14990]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-14990](https://jira.spring.io/browse/SPR-14990?redirect=false)** and commented  Since we have StringToEnumConverter and IntegerToEnumConverter in shared DefaultConversionService, BeanPropertyRowMapper supports Enum now, but there is a little problem with jdbc 4.1 rs.getObject(index,type), if type is Enum it will always return null, actually we need String or Integer here, use rs.getObject(index) is fine.  ---  **Affects:** 4.3.4  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1259  **Issue Links:** - #18461 BeanPropertyRowMapper should use ConversionService for date-time support - #19515 Shared DefaultConversionService instance e.g. for BeanPropertyRowMapper  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/278a6250e6643eaa856c62faf047b33201a7ab99, https://github.com/spring-projects/spring-framework/commit/4e41f749257147c32fecfc187904f469254817ac","closed","type: enhancement,","spring-projects-issues","2016-12-07T06:48:52Z","2019-01-11T19:13:21Z"
"","19555","LocalVariableTableParameterNameDiscoverer doesn't support interface method [SPR-14989]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-14989](https://jira.spring.io/browse/SPR-14989?redirect=false)** and commented  LocalVariableTableParameterNameDiscoverer can not discover parameter names from interface method, StandardReflectionParameterNameDiscoverer works fine, but we are not use JDK8 everywhere. I have tried to trace variable [ClassReader.strings] contains parameter name, so it's possible to fix it. Attachment is junit testcase, tested with jdk 1.8.0_112-b16 on macOS sierra.   ---  **Affects:** 4.3.4  **Attachments:** - [LocalVariableTableParameterNameDiscovererTest.java](https://jira.spring.io/secure/attachment/23645/LocalVariableTableParameterNameDiscovererTest.java) (_912 bytes_)","closed","type: enhancement,","spring-projects-issues","2016-12-07T06:10:09Z","2016-12-07T09:53:09Z"
"","18337","Rename urlVariables to uriVariables for consistency [SPR-14969]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-14969](https://jira.spring.io/browse/SPR-14969?redirect=false)** and commented  I have search on github and found 30 results for ""uriVariables"" 5 results for ""urlVariables"", I guess the former wins.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f64cf779da59766e5944eacd89783b91dba6802f, https://github.com/spring-projects/spring-framework/commit/2b0293578fd6dd246cc60205ab8b369b4b824ecf, https://github.com/spring-projects/spring-framework/commit/71977e8f9d2a0524ea5ded5890a81837182deec7, https://github.com/spring-projects/spring-framework/commit/6517c53768851690a0fe213610cc291860ba1154, https://github.com/spring-projects/spring-framework/commit/7a8ec4f6ebf21f2c29ced3134863af8f8cc6b6c8, https://github.com/spring-projects/spring-framework/commit/23e91e1ae6f9c38dcd3728b34b0abebc92ac2322  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","type: task,","spring-projects-issues","2016-12-01T09:39:39Z","2016-12-21T11:54:08Z"
"","19515","Shared DefaultConversionService instance e.g. for BeanPropertyRowMapper [SPR-14948]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-14948](https://jira.spring.io/browse/SPR-14948?redirect=false)** and commented  Creating DefaultConversionService instance is not so cheap, it's thread-safe, so we can create a default instance.  ```java class DefaultConversionService{ private static volatile ConversionService defaultConversionService; public static DefaultConversionService getDefaultInstance(){ if (defaultConversionService == null) { 			synchronized (DefaultConversionService.class) { 				if (defaultConversionService == null) { 					defaultConversionService = new DefaultConversionService(); 				} 			} 		} return defaultConversionService; } } ```  It could be used by other class, for example BeanPropertyRowMapper  ```java //private ConversionService conversionService = new DefaultConversionService(); private ConversionService conversionService = DefaultConversionService.getDefaultInstance(); ```  ---  **Affects:** 4.3.4  **Issue Links:** - #19034 Ineffective synchronization in StandardTypeConverter constructor - #18461 BeanPropertyRowMapper should use ConversionService for date-time support - #19556 Update JdbcUtils to improve enum support  **Referenced from:** commits https://github.com/spring-projects/spring-integration/commit/d96b8e0c852c07a6aa8644befff8720dccaed2fa","closed","type: enhancement,","spring-projects-issues","2016-11-24T08:27:41Z","2019-01-11T19:17:34Z"
"","19477","WebSocket support on Resin [SPR-14910]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-14910](https://jira.spring.io/browse/SPR-14910?redirect=false)** and commented  [Resin](http://caucho.com/products/resin) is one of mainstream Java EE server, but is not supported by spring websocket.  ``` java.lang.IllegalStateException: No suitable default RequestUpgradeStrategy found                        	at org.springframework.web.socket.server.support.AbstractHandshakeHandler.initRequestUpgradeStrategy(AbstractHandshakeHandler.java:143)                        	at org.springframework.web.socket.server.support.AbstractHandshakeHandler.(AbstractHandshakeHandler.java:109)                        	at org.springframework.web.socket.server.support.DefaultHandshakeHandler.(DefaultHandshakeHandler.java:35) ```    ---  0 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-11-16T01:06:31Z","2019-01-12T00:11:57Z"
"","19336","Aop proxy should retain annotations from target [SPR-14770]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-14770](https://jira.spring.io/browse/SPR-14770?redirect=false)** and commented  Proxies created by spring will drop annotations, sometimes it will bring unexpected behavior. for example https://issues.apache.org/jira/browse/WW-4694   ---  **Affects:** 4.3.3  **Attachments:** - [ProxyTests.java](https://jira.spring.io/secure/attachment/23581/ProxyTests.java) (_901 bytes_)","closed","status: bulk-closed,","spring-projects-issues","2016-09-30T03:50:19Z","2019-01-12T02:22:52Z"
"","19045","Workaround for Hibernate bug: setCurrentTenantIdentifierResolver not respected [SPR-14476]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-14476](https://jira.spring.io/browse/SPR-14476?redirect=false)** and commented  Spring should check if [CurrentTenantIdentifierResolver ](http://docs.jboss.org/hibernate/orm/5.1/userguide/html_single/Hibernate_User_Guide.html#_currenttenantidentifierresolver) exists when open session.  HibernateTransactionManager:  ```java SessionBuilder builder = getSessionFactory().withOptions(); CurrentTenantIdentifierResolver resolver = ((SessionFactoryImplementor)getSessionFactory()).getCurrentTenantIdentifierResolver(); if ( resolver != null ) {      builder.tenantIdentifier( resolver.resolveCurrentTenantIdentifier() ); } Interceptor entityInterceptor = getEntityInterceptor(); if ( entityInterceptor != null ) {      builder.interceptor( entityInterceptor ); } Session newSession = builder.openSession(); ```  And other place like OpenSessionInViewFilter should fix also.  BTW: Hibernate has a bug itself, https://github.com/hibernate/hibernate-orm/pull/1483 , Spring can make workaround by override method in LocalSessionFactoryBean  ```java @Override public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver) {      getHibernateProperties().put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER,                currentTenantIdentifierResolver);      super.setCurrentTenantIdentifierResolver(currentTenantIdentifierResolver); } ```  ---  **Affects:** 4.3.1  **Issue Links:** - #18644 Add setMultiTenantConnectionProvider to org.springframework.orm.hibernate5.LocalSessionFactoryBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4e7e06f54911c9ecadff9d3c0c3a03c42602cb8a, https://github.com/spring-projects/spring-framework/commit/1670b4e154f34853fcd3c3417f9c25511a573174","closed","type: enhancement,","spring-projects-issues","2016-07-18T08:08:28Z","2019-01-11T16:22:31Z"
"","19010","Improve AOP pointcut supports meta-annotation [SPR-14439]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-14439](https://jira.spring.io/browse/SPR-14439?redirect=false)** and commented  Spring supports `@GetMapping` and other `@MethodMapping` to replace `@RequestMapping` seamlessly since 4.3, but there is a problem with AOP pointcut.  ```java @Before(""execution(public * *(..)) and @annotation(requestMapping)"") public void before(JoinPoint jp, RequestMapping requestMapping)  {       ... } ```  It works fine with `@RequestMapping` but failed with `@GetMapping`.   ---  **Affects:** 4.3.1","open","type: enhancement,","spring-projects-issues","2016-07-07T04:29:04Z","2018-07-25T01:23:04Z"
"","19544","Concurrency problem in DeferredResult: potential double execution of handleResult [SPR-14978]","**[yan.zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=bzhangyan11@163.com)** opened **[SPR-14978](https://jira.spring.io/browse/SPR-14978?redirect=false)** and commented  !bug.jpg|thumbnail!  It looks like a concurrency bug.  ""this.resultHandler.handleResult(this.result);"" may be executed twice.  I think it shoule be:  ```java      private boolean setResultInternal(Object result) {         synchronized (this) {             if (isSetOrExpired()) {                 return false;             }             this.result = result;              if (this.resultHandler != null) {                 this.resultHandler.handleResult(this.result);             }         }         return true;     } ```  ---  **Affects:** 3.2.17, 4.2.8, 4.3.4, 5.0 M3  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/v5.0.0.M3/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java  **Attachments:** - [bug.jpg](https://jira.spring.io/secure/attachment/23641/bug.jpg) (_150.03 kB_) - [exm1.jpg](https://jira.spring.io/secure/attachment/23642/exm1.jpg) (_64.58 kB_) - [exm2.png](https://jira.spring.io/secure/attachment/23643/exm2.png) (_89.75 kB_) - [exm3.jpg](https://jira.spring.io/secure/attachment/23644/exm3.jpg) (_73.40 kB_)  **Issue Links:** - #15118 Deadlocks with DeferredResult timeout handling on Tomcat - #18031 DeferredResult not thread-safe for isSetOrExpired call  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","type: regression,","spring-projects-issues","2016-12-05T09:21:33Z","2019-01-11T19:16:06Z"
"","19232","Add support for spring boot to auto register DeferredResultProcessingInterceptor [SPR-14668]","**[Yair Ogen](https://jira.spring.io/secure/ViewProfile.jspa?name=yairogen)** opened **[SPR-14668](https://jira.spring.io/browse/SPR-14668?redirect=false)** and commented  Currently when using spring boot if I want to register a custom DeferredResultProcessingInterceptor (i.e.  a class teat extends DeferredResultProcessingInterceptorAdapter) I must create a class that extends WebMvcConfigurerAdapter and that causes default behaviors in WebMvcAutoConfigurationAdapter to get dropped. This is not desired.  There should be support that if I expose my DeferredResultProcessingInterceptor as a `@Bean`, spring will pick it up and auto-register it for me.   ---  6 votes, 4 watchers","closed","status: invalid,","spring-projects-issues","2016-09-04T07:34:07Z","2019-01-12T05:22:04Z"
"","18865","StringIndexOutOfBoundsException when calling BeanWrapperImpl.setPropertyValue(""[']"", ""foobar"") [SPR-14293]","**[wu wen ](https://jira.spring.io/secure/ViewProfile.jspa?name=wuwen)** opened **[SPR-14293](https://jira.spring.io/browse/SPR-14293?redirect=false)** and commented  An error occurs while binding request parameters for this path as soon as the uri contains special charaters.  In my production environment, a request with a special charaters leads to an exception.  Example: http://server/exp?name=wen&age=28&[']  ```java May 17, 2016 6:20:34 PM org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/].[OPASpringMVC] invoke SEVERE: Servlet.service() for servlet [OPASpringMVC] in context with path [] threw exception [Request processing failed; nested exception is java.lang.StringIndexOutOfBoundsException: String index out of range: -1] with root cause java.lang.StringIndexOutOfBoundsException: String index out of range: -1     at java.lang.String.substring(String.java:1911)     at org.springframework.beans.BeanWrapperImpl.getPropertyNameTokens(BeanWrapperImpl.java:694)     at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:923)     at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:95)     at org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:750)     at org.springframework.validation.DataBinder.doBind(DataBinder.java:646)     at org.springframework.web.bind.WebDataBinder.doBind(WebDataBinder.java:189)     at org.springframework.web.bind.ServletRequestDataBinder.bind(ServletRequestDataBinder.java:106)     at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.bindRequestParameters(ServletModelAttributeMethodProcessor.java:150)     at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:110)     at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77)     at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162)     at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:129)     at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110)     at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:776)     at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:705)     at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:620)     at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) ```  https://github.com/spring-projects/spring-framework/pull/1061   ---  **Affects:** 4.1.9, 4.2.6, 4.3 RC2  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","type: bug,","spring-projects-issues","2016-05-20T02:36:28Z","2016-06-10T09:19:11Z"
"","19530","Spring-Actuator prevents Beans of class ""CounterService"" from being found  [SPR-14963]","**[Wolfgang Giersche](https://jira.spring.io/secure/ViewProfile.jspa?name=wgiersche)** opened **[SPR-14963](https://jira.spring.io/browse/SPR-14963?redirect=false)** and commented  When Spring-boot actuator (1.2.4) is on the classpath, beans of name ""counterService"" will not be found and thus not included in the context. This is not a component scan issue. Even when the bean is provided by a `@Bean` method named counterService(), it will not be used for dependency injection. I suspect it's because actuator has a bean of class CounterService itself and doesn't want it to appear in the context. Perhaps, somewhere there's a check on the class's simpleName() You can easily reproduce by trying to inject a bean of that name with actuator on the classpath. It just won't work.   ---  **Affects:** 4.2.5","closed","in: core,","spring-projects-issues","2016-11-30T18:15:31Z","2019-01-12T05:21:31Z"
"","18922","Support locale parameter to DateTimeFormat annotation [SPR-14350]","**[wing-tung Leung](https://jira.spring.io/secure/ViewProfile.jspa?name=wingtung.leung)** opened **[SPR-14350](https://jira.spring.io/browse/SPR-14350?redirect=false)** and commented  Parsing and formatting dates via the `DateTimeFormat` usually works fine, especially when ""clean"", none locale dependent parts are required (e.g. ISO format).  BUT, some HTTP header headers (e.g. `Last-Modified`, `If-Modified-Since`, ..) **do** have a very specific format with parts in English. When the MVC controller method uses the `@DateTimeFormat` annotation, this can still fail with HTTP 400, because the default locale resolver may fall back to the `Accept-Language` HTTP header from the client, which is possibly **not** English.  Suggestion: add extra `locale` attribute in the `DateTimeFormat` annotation, which fixates the locale on a specific language if set.  Other workarounds I currently see: * use other locale resolver, possibly impacting many other controller methods * create new annotation (e.g. `HttpDateFormat`), formatter factory and register it * don't use converter, but parse inside controller code or use `HttpServletRequest.getDateHeader()` * ...  ---  **Issue Links:** - #18775 `@RequestHeader` doesn't accept RFC-1123 for conversion to java.time.Instant","closed","status: bulk-closed,","spring-projects-issues","2016-06-09T20:41:12Z","2019-01-13T05:24:40Z"
"","19324","SpEL varargs string arguments containing commas [SPR-14758]","**[Wim Procee](https://jira.spring.io/secure/ViewProfile.jspa?name=ee)** opened **[SPR-14758](https://jira.spring.io/browse/SPR-14758?redirect=false)** and commented  I ran into a rather odd issue using Spring Web MVC using a line comparable to this one:  ```  ```  Where obj.format is a method with a varargs parameter:  ```java public String format(String format, Object... args) ```  And obj.foo is the string ""1, 2, 3"".  I was expecting args to be Object[] { ""1, 2, 3"" } in format (so the result would be \Hello, 1, 2, 3\) instead args is Object[] { 1, 2, 3 } and the result turns into \Hello, 1\.   ---  **Affects:** 4.3.3  **Reference URL:** https://github.com/Assumeru/thymeleaf-varargs","closed","status: bulk-closed,","spring-projects-issues","2016-09-27T21:38:41Z","2019-01-12T02:24:29Z"
"","18928","SockJs heartbeat during message send closes socket [SPR-14356]","**[William Hoyle](https://jira.spring.io/secure/ViewProfile.jspa?name=teppic)** opened **[SPR-14356](https://jira.spring.io/browse/SPR-14356?redirect=false)** and commented  In the following log the heartbeat thread is `SockJsScheduler-8` and the client thread is `Broadcaster-3`.  There appears to be a race condition between the heartbeat task and the send thread. The send thread attempts to cancel the heartbeat task before sending, but the heartbeat task has already started.  ``` 2016-06-13T00:14:22.288Z [TRACE] [] [SockJsScheduler-8] [WebSocketServerSockJsSession] Preparing to write SockJsFrame content='h' 2016-06-13T00:14:22.288Z [TRACE] [] [Broadcaster-3] [UserWebSocket] Session[fair3vq5]: Tx 'h' to user 76042 2016-06-13T00:14:22.288Z [TRACE] [] [SockJsScheduler-8] [WebSocketServerSockJsSession] Writing SockJsFrame content='h' 2016-06-13T00:14:22.288Z [TRACE] [] [Broadcaster-3] [WebSocketServerSockJsSession] Cancelling heartbeat in session fair3vq5 2016-06-13T00:14:22.288Z [TRACE] [] [SockJsScheduler-8] [NativeWebSocketSession] Sending TextMessage payload=[h], byteCount=1, last=true], StandardWebSocketSession[id=83, uri=/ajax/watch/websocket/029/fair3vq5/websocket] 2016-06-13T00:14:22.288Z [TRACE] [] [Broadcaster-3] [WebSocketServerSockJsSession] Preparing to write SockJsFrame content='a[""h""]' 2016-06-13T00:14:22.288Z [TRACE] [] [Broadcaster-3] [WebSocketServerSockJsSession] Writing SockJsFrame content='a[""h""]' 2016-06-13T00:14:22.288Z [TRACE] [] [Broadcaster-3] [NativeWebSocketSession] Sending TextMessage payload=[a[""h""]], byteCount=6, last=true], StandardWebSocketSession[id=83, uri=/ajax/watch/websocket/029/fair3vq5/websocket] 2016-06-13T00:14:22.289Z [TRACE] [] [SockJsScheduler-8] [WebSocketServerSockJsSession] Scheduled heartbeat in session fair3vq5 2016-06-13T00:14:22.289Z [DEBUG] [] [Broadcaster-3] [WebSocketServerSockJsSession] Terminating connection after failure to send message to client java.lang.IllegalStateException: The remote endpoint was in state [TEXT_PARTIAL_WRITING] which is an invalid state for called method 	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$StateMachine.checkState(WsRemoteEndpointImplBase.java:1064) 	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$StateMachine.textPartialStart(WsRemoteEndpointImplBase.java:1022) 	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendPartialString(WsRemoteEndpointImplBase.java:184) 	at org.apache.tomcat.websocket.WsRemoteEndpointBasic.sendText(WsRemoteEndpointBasic.java:49) ```  ---  **Affects:** 4.2.5  **Issue Links:** - #18838 Memory leak on STOMP broker connections that fail before heartbeats start - #19133 SockJS heartbeat is causing  application send Message to fail similar to (SPR-14356)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5075dd4dfabd95dbc74bba0f5808b8338c7e6a92, https://github.com/spring-projects/spring-framework/commit/91387a5ae7707b754d0cce0322e2f8ee862c1513, https://github.com/spring-projects/spring-framework/commit/4c87167c9852fc9213c4d9d59d2d8c5e024dcc95, https://github.com/spring-projects/spring-framework/commit/16879a2cf0829047188b0f9b1b11ff87af10ab69, https://github.com/spring-projects/spring-framework/commit/ba885f3d0b6284bdadb7d4026376296fc85324db  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","type: bug,","spring-projects-issues","2016-06-13T00:27:40Z","2019-01-11T16:03:29Z"
"","19298","websocket - subscribers not notified [SPR-14732]","**[William Chuang](https://jira.spring.io/secure/ViewProfile.jspa?name=wchuang000000)** opened **[SPR-14732](https://jira.spring.io/browse/SPR-14732?redirect=false)** and commented  Hi,  I have an odd issue with web socket. This is the configuration for my web socket  ``` @Configuration @EnableWebSocketMessageBroker public class WebSocketConfiguration extends AbstractWebSocketMessageBrokerConfigurer {  	@Override 	public void configureMessageBroker(MessageBrokerRegistry config) { 		config.enableSimpleBroker(""/topic""); 		config.setApplicationDestinationPrefixes(""/broker""); 	}  	@Override 	public void registerStompEndpoints(StompEndpointRegistry registry) { 		registry.addEndpoint(""/websocket"").withSockJS() 				.setHeartbeatTime(10000) 				.setWebSocketEnabled(false); 	}  } ```  I send message simply with:  ```     @Autowired     private SimpMessagingTemplate simpMessagingTemplate;       public void pushMessage(String topic, Object payload) {          simpMessagingTemplate.convertAndSend(topic, payload);     } ```  I have disabled the web socket, because I have aws load balancer in front of the app.  In my app, I have on the js side, sockjs and stomp on top, using **long polling**.  Now, my problem is that when I send a message to the topic, not all the subscriber are notified. This happens with a specific sequence, with two browsers: - on the first message: the browser A get the message and the browser B is not notified. - on the second message: the browser B get the message and the browser A is not notified.   then it restart.  If i have a third browser open, this one is going to align with the same message receiving as A or B in sync.  If i try without the load balancer it seems to work, but it's odds, as a load balancer should control only the traffic in input and not in output.  Not sure if is a bug or not, anyone else had this issue in the past? It is giving me a huge headache :D  Thanks in advance William   ---  **Affects:** 4.2.7","closed","status: invalid,","spring-projects-issues","2016-09-19T14:34:59Z","2019-01-12T05:21:55Z"
"","19080","Transaction manager bean in TransactionInterceptor retained after JUnit test class completes [SPR-14511]","**[Will Darby](https://jira.spring.io/secure/ViewProfile.jspa?name=wbdarby)** opened **[SPR-14511](https://jira.spring.io/browse/SPR-14511?redirect=false)** and commented  I am migrating from Spring Framework 3.2.15 to 4.3.1. I have a JUnit Test Suite with ~800 tests, and started running into out of heap memory errors after changing to 4.3.1. I compared .hprof dumps to the 3.2.15 version and the difference appears to be that CglibAopProxy$ProxyCallbackFitler are created for each test class with `@Transactional` annotation (or `@Transactional` `@Test` methods). This then retains TransactionInterceptor Advice, which eventually references the HibernateTransactionManager.  The CglibAopProxy$ProxyCallbackFitler is referenced by the CGLIB$CALLBACK_FILTER field of the CGLIB enhanced test class, which is referenced by the AppClassLoader.  These ProxyCallbackFilters were not retained in Spring 3.2.15, thus it appears to be an introduced leak.  Below are 2 HPROF dumps. The first shows the reference to ProxyCallbackFilter from AppClassLoader. The second shows the reference to HibernateTransactionManager from ProxyCallbackFilter.  ``` Class Name                                                                                                                                     | Shallow Heap | Retained Heap ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter @ 0xee643418                                                               |           24 |     3,199,752 |- referent org.springframework.cglib.core.WeakCacheKey @ 0xedcec6f8                                                                           |           32 |            32 |- CGLIB$CALLBACK_FILTER class test.com.leeriver.trading.pjm.eDataFeed.ConstraintPriceUpdateTest2$$EnhancerBySpringCGLIB$$ac9e61d9 @ 0xee6427b0|          128 |         3,088 |  |- [11536] java.lang.Object[20480] @ 0xe203fe38                                                                                             |       81,936 |   215,507,136 |  |  '- elementData java.util.Vector @ 0xe0153e20                                                                                             |           32 |   215,507,168 |  |     '- classes sun.misc.Launcher$AppClassLoader @ 0xe00d5700 Native Stack                                                                 |           88 |   216,679,856 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ```  ``` Class Name                                                                                                                            | Shallow Heap | Retained Heap --------------------------------------------------------------------------------------------------------------------------------------------------------------------- org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter @ 0xee643418                                                      |           24 |     3,199,752 |-  class org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter @ 0xe1bbb878                                     |            0 |             0 |- advised org.springframework.aop.framework.AdvisedSupport @ 0xee643430                                                              |           48 |     3,199,728 |  |-  class org.springframework.aop.framework.AdvisedSupport @ 0xe0e21850                                                     |           16 |            16 |  |- targetSource org.springframework.aop.target.EmptyTargetSource @ 0xee643460                                                      |           24 |            24 |  |- advisorChainFactory org.springframework.aop.framework.DefaultAdvisorChainFactory @ 0xee643478                                   |           16 |            16 |  |- methodCache java.util.concurrent.ConcurrentHashMap @ 0xee643488                                                                 |           64 |         1,568 |  |- interfaces java.util.ArrayList @ 0xee643e88                                                                                     |           24 |            24 |  |- advisors java.util.LinkedList @ 0xee643ea0                                                                                      |           32 |            56 |  |- advisorArray org.springframework.aop.Advisor[1] @ 0xee643ed8                                                                    |           24 |            24 |  |  |-  class org.springframework.aop.Advisor[] @ 0xe0e01070                                                                 |            0 |             0 |  |  |- [0] org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor @ 0xee5cc2f0                    |           40 |            64 |  |  |  |-  class org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor @ 0xe0de84c8       |            0 |             0 |  |  |  |- order java.lang.Integer @ 0xe00cc4d0  10                                                                                  |           16 |            16 |  |  |  |- beanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory @ 0xee5907a8                             |          208 |       202,624 |  |  |  |- adviceMonitor java.util.concurrent.ConcurrentHashMap @ 0xee590ad8                                                         |           64 |         2,128 |  |  |  |- adviceBeanName java.lang.String @ 0xee592e08  org.springframework.transaction.interceptor.TransactionInterceptor#0        |           24 |           176 |  |  |  |- transactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource @ 0xee5b4898   |           32 |       206,552 |  |  |  |- pointcut org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor$1 @ 0xee5cc318          |           24 |            24 |  |  |  |- advice org.springframework.transaction.interceptor.TransactionInterceptor @ 0xee6438d8                                    |           40 |     2,784,376 |  |  |  |  |-  class org.springframework.transaction.interceptor.TransactionInterceptor @ 0xe0de9ed0                          |            0 |             0 |  |  |  |  |- logger org.apache.commons.logging.impl.SLF4JLocationAwareLog @ 0xe137ddf0                                              |           24 |            24 |  |  |  |  |- transactionManagerBeanName java.lang.String @ 0xee2f4da8  transactionManager                                           |           24 |            80 |  |  |  |  |- beanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory @ 0xee5907a8                          |          208 |       202,624 |  |  |  |  |- transactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource @ 0xee5b4898|           32 |       206,552 |  |  |  |  |- DEFAULT_TRANSACTION_MANAGER_KEY java.lang.Object @ 0xee643900                                                          |           16 |            16 |  |  |  |  |- transactionManagerCache java.util.concurrent.ConcurrentHashMap @ 0xee643910                                            |           64 |     2,784,320 |  |  |  |  |  |-  class java.util.concurrent.ConcurrentHashMap @ 0xe0002928 System Class                                      |          136 |           616 |  |  |  |  |  |- table java.util.concurrent.ConcurrentHashMap$Node[16] @ 0xee643950                                                  |           80 |     2,784,256 |  |  |  |  |  |  |-  class java.util.concurrent.ConcurrentHashMap$Node[] @ 0xe00c82d8                                         |            0 |             0 |  |  |  |  |  |  |- [10] java.util.concurrent.ConcurrentHashMap$Node @ 0xee6439a0                                                    |           32 |     2,784,176 |  |  |  |  |  |  |  |-  class java.util.concurrent.ConcurrentHashMap$Node @ 0xe0253a50 System Class                           |            0 |             0 |  |  |  |  |  |  |  |- key java.lang.String @ 0xee2f4da8  transactionManager                                                         |           24 |            80 |  |  |  |  |  |  |  |- val org.springframework.orm.hibernate5.HibernateTransactionManager @ 0xee6439c0                               |           56 |     2,784,144 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------  ```  ---  **Affects:** 4.3.1  **Issue Links:** - #17145 `@Transactional` qualifier is ignored by TransactionAspectSupport if default transaction manager is set - #16570 Reduce PlatformTransactionManager lookups in TransactionAspectSupport - #19177 Transaction manager cache fails to repopulate when multiple transaction managers defined","closed","in: core,","spring-projects-issues","2016-07-25T19:36:40Z","2019-01-13T05:23:59Z"
"","19026","Flush exception translation not working anymore with Hibernate 5.2 [SPR-14457]","**[Will Darby](https://jira.spring.io/secure/ViewProfile.jspa?name=wbdarby)** opened **[SPR-14457](https://jira.spring.io/browse/SPR-14457?redirect=false)** and commented  I am porting from Spring 3.2+Hibernate 4.1 to Spring 4.3+Hibernate 5.2. There appears to be an issue with Aspect ordering between aspects detected using annotations and those added manually with Advised.addAdvisor(). More specifically, advisors added with Advised.addAdvisor() are added after those discovered using annotations unless 'beforeExistingAdvisors' is added, in which case it is before all others.  The problem arises when using annotation-based transactions, i.e.,  ```java  ```  in combination with org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor.  The PersistenceExceptionTranslationPostProcessor adds the Aspect using Advised.addAdvisor() after the BeanFactoryTransactionAttributeSourceAdvisor. The result is that when the a transaction completes and flushes cached operations to the database, exceptions that arise are not processed by the PersistenceExceptionTranslator since it has already completed. The result is that Hibernate exceptions are not translated into Spring exceptions for database operations that occur during commit.  This was working correctly in the previous versions (Spring 3.2+Hibernate 4.1). I have tried adding 'order' to the PersistenceExceptionTranslationPostProcessor, but it is has no effect.  Below are two stack traces illustrating the issue. The first shows that the PersistenceExceptionTranslator is invoked within the TransactionInterceptor: PersistenceExceptionTranslationInterceptor.invoke(MethodInvocation) line: 136 ReflectiveMethodInvocation.proceed() line: 179 TransactionInterceptor$1.proceedWithInvocation() line: 99 **TransactionInterceptor(TransactionAspectSupport).invokeWithinTransaction**(Method, Class, InvocationCallback) line: 281 TransactionInterceptor.invoke(MethodInvocation) line: 96 ReflectiveMethodInvocation.proceed() line: 179 AspectJAfterThrowingAdvice.invoke(MethodInvocation) line: 62 ReflectiveMethodInvocation.proceed() line: 168 ExposeInvocationInterceptor.invoke(MethodInvocation) line: 92 ReflectiveMethodInvocation.proceed() line: 179 JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 213 $Proxy48.storeAnalysisRule(String, AnalysisRule) line: not available AnalysisRuleTest.duplicateSaveError() line: 71  The second shows that the exception is occurring during the flush() operation, after the PersistenceExceptionTranslator has completed: Stacktrace was: javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute batch at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:147) at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:155) at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:162) at **org.hibernate.internal.SessionImpl.flush**(SessionImpl.java:1403) at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:473) at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3133) at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2370) at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:467) at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:146) at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$100(JdbcResourceLocalTransactionCoordinatorImpl.java:38) at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:220) at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:68) at org.springframework.orm.hibernate5.HibernateTransactionManager.doCommit(HibernateTransactionManager.java:581) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:761) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:730) at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:485) at **org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction**(TransactionAspectSupport.java:291) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:168) at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) at com.sun.proxy.$Proxy48.storeAnalysisRule(Unknown Source) at test.com.leeriver.trading.account.AnalysisRuleTest.duplicateSaveError(AnalysisRuleTest.java:71) Caused by: org.hibernate.exception.ConstraintViolationException: could not execute batch at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112) at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42) at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:111) at org.hibernate.engine.jdbc.batch.internal.BatchingBatch.performExecution(BatchingBatch.java:119) at org.hibernate.engine.jdbc.batch.internal.BatchingBatch.doExecuteBatch(BatchingBatch.java:97) at org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.execute(AbstractBatchImpl.java:147) at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.executeBatch(JdbcCoordinatorImpl.java:206) at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:611) at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:456) at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:337) at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39) at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1397) ... 53 more Caused by: java.sql.BatchUpdateException: integrity constraint violation: unique constraint or index violation; USER_RULE_IDX table: USERANALYSISRULE at org.hsqldb.jdbc.JDBCPreparedStatement.executeBatch(Unknown Source) at org.apache.commons.dbcp.DelegatingStatement.executeBatch(DelegatingStatement.java:297) at org.apache.commons.dbcp.DelegatingStatement.executeBatch(DelegatingStatement.java:297) at org.apache.commons.dbcp.DelegatingStatement.executeBatch(DelegatingStatement.java:297) at org.hibernate.engine.jdbc.batch.internal.BatchingBatch.performExecution(BatchingBatch.java:110) ... 61 more  ---  **Affects:** 4.3.1  **Issue Links:** - #19024 Hibernate5 LocalSessionFactoryBean does not translate javax.persistence exceptions - #19613 Remove outdated JpaExceptionTranslatorAspect","closed","in: core,","spring-projects-issues","2016-07-12T23:32:32Z","2019-01-11T16:24:59Z"
"","19024","Hibernate5 LocalSessionFactoryBean does not translate javax.persistence exceptions [SPR-14455]","**[Will Darby](https://jira.spring.io/secure/ViewProfile.jspa?name=wbdarby)** opened **[SPR-14455](https://jira.spring.io/browse/SPR-14455?redirect=false)** and commented  Hibernate 5.0 deprecated the Criteria API resulting in a migration to the JPA CriteriaQuery API directly supported by the Hibernate Session. Exceptions thrown using the CriteriaQuery API derive from package javax.persistence rather than org.hibernate.exception. The Hibernate5 LocalSessionFactoryBean.translateExceptionIfPossible does not convert these exceptions automatically, requiring the addition of a new PersistentExceptionTranslator. The HibernateJpaDialect does translate javax.persistence exceptions correctly but is not used when a LocalSessionFactoryBean is used.  I believe Hibernate5 LocalSessionFactoryBean.translateExceptionIfPossible should match the implementation of HibernateJpaDialect for translating exceptions since JPA is natively integrated with Hibernate 5.  ---  **Affects:** 4.3 GA, 4.3.1  **Issue Links:** - #18899 Support for Hibernate ORM 5.2 - #19026 Flush exception translation not working anymore with Hibernate 5.2 - #19245 HibernateExceptionTranslator translating to InvalidDataAccessApiUsageException when using vanilla Hibernate - #21540 LocalSessionFactoryBean and HibernateTransactionManager for JPA EntityManagerFactory setup - #19613 Remove outdated JpaExceptionTranslatorAspect","closed","type: enhancement,","spring-projects-issues","2016-07-12T19:56:11Z","2019-01-11T16:24:45Z"
"","19115","HttpHeaders.setContentDispositionFormData() doesn't encode non-acsii characters correctly [SPR-14547]","**[Wenhao Ji](https://jira.spring.io/secure/ViewProfile.jspa?name=zetaplusae)** opened **[SPR-14547](https://jira.spring.io/browse/SPR-14547?redirect=false)** and commented  When passing name or filename containing non-ascii characters to the `setContentDispositionFormData` method, a browser like Chrome and IE may behave strangely, opening a download dialog where those characters are replaced by hyphens.  The parameters in http headers should be encoded according to [RFC5987] https://tools.ietf.org/html/rfc5987, so that we can get the correct string no matter what kind of characters are passed into.  For example,  ```java @RequestMapping(""downloadForm"") public HttpEntity downloadFormData() throws UnsupportedEncodingException {     HttpHeaders headers = new HttpHeaders();     headers.setContentDispositionFormData(""form"", ""中文.txt"");     return new HttpEntity(""a=b"", headers); } ```  The `Content-Disposition` header values that returns from the controller method above should be like `filename=UTF-8'zh-Hant-CN'%E4%B8%AD%E6%96%87.txt`.  ---  **Affects:** 4.3.2  **Issue Links:** - #16193 Switch source encoding to UTF-8 and enforce it in the build - #20610 FormHttpMessageConverter doesn't support utf-8 filename - #19072 Allow configuring the message converter in HttpPutFormContentFilter - #19769 StandardMultipartHttpServletRequest cannot decode multipart Content-Disposition header encoded by FormHttpMessageConverter","closed","type: enhancement,","spring-projects-issues","2016-07-30T08:29:03Z","2019-01-11T18:07:23Z"
"","19039","Jackson 2.6.x -> 2.7 deserialize generic fails when calling Spring controller [SPR-14470]","**[Wagner Michael](https://jira.spring.io/secure/ViewProfile.jspa?name=maffelbaffel)** opened **[SPR-14470](https://jira.spring.io/browse/SPR-14470?redirect=false)** and commented  I'm just trying to upgrade (Spring 4.3 project) from jackson 2.6.3 to 2.7 and getting an error.  This is my simplyfied project:  Abstract controller class with a http post method which accepts a requestBody of a generic list:  ``` public abstract class AbstractController {      @RequestMapping(value = ""/"", method = POST)     public void method1(@RequestBody final List entities){         System.out.println(""AbstractController called"");     } } ```  Controller implementation with a simple Entity class  ``` @RestController @RequestMapping(""/impl1"") public class ControllerImpl extends AbstractController { } ```  second controller with method1 overriden  ``` @RestController @RequestMapping(""/impl2"") public class ControllerImpl2 extends AbstractController {      @Override     public void method1(@RequestBody List entities) {         System.out.println(""ControllerImpl2 called"");     } } ```  My Entity:  ``` public class EntityImpl implements Entity {      private String name;      public EntityImpl() {     }      public EntityImpl(String name) {         this.name = name;     }      @Override     public String getName() {         return name;     }      @Override     public void setName(final String name) {         this.name = name;     } } ```  Ok, so this setup works fine with Jackson 2.6.x and Spring 4.2.x, but i need to upgrade to at least 2.7. But with 2.7 every post request to ""/impl1/"" gives me this error:  ``` Failed to read HTTP message: org.springframework.http.converter.HttpMessageNotReadableException: Could not read document: Can not construct instance of jackson.entity.Entity, problem: abstract types either need to be mapped to concrete types, have custom deserializer, or be instantiated with additional type information      at [Source: java.io.PushbackInputStream@1aa5c56a; line: 1, column: 2] (through reference chain: java.util.ArrayList[0]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of jackson.entity.Entity, problem: abstract types either need to be mapped to concrete types, have custom deserializer, or be instantiated with additional type information      at [Source: java.io.PushbackInputStream@1aa5c56a; line: 1, column: 2] (through reference chain: java.util.ArrayList[0]) ```  Thought posts to /impl2/ workwith both versions ... but i really dont want to override every method there.  Is there a way to solve this? I have created a sample project with some pretty easy tests showing this behavior. Just run  ``` ./gradlew build ```  If you open gradle.build and remove these lines:  ``` // uncomment both for failing tests!!     compile ""com.fasterxml.jackson.core:jackson-databind:2.7.0""     compile ""org.springframework:spring-webmvc:4.3.0.RELEASE"" ```  Tests are working fine then. (Jackson 2.6 and Spring 4.2 are being used then). Am i missing any configuration there, which was not needed prior jackson 2.7?  Hope someone can help me here :)  ---  **Affects:** 4.3.1  **Attachments:** - [spring-jackson.zip](https://jira.spring.io/secure/attachment/23440/spring-jackson.zip) (_56.52 kB_)  **Issue Links:** - #18301 Revise AbstractJackson2HttpMessageConverter's generic type adaptation - #19928 Generic type is not used sometimes - #19089 StackOverflowError at AbstractJackson2HttpMessageConverter.resolveVariable","closed","type: bug,","spring-projects-issues","2016-07-15T06:50:39Z","2019-01-11T16:22:13Z"
"","19374","spring-jdbc support multicharacter statements separators [SPR-14808]","**[Vsevolod Poletaev](https://jira.spring.io/secure/ViewProfile.jspa?name=hexfaker)** opened **[SPR-14808](https://jira.spring.io/browse/SPR-14808?redirect=false)** and commented  It would be nice, if database initialization script will support multi-character statements separators. They will be useful, for example, in scripts with SQL procedures declarations, because we usually have ';' and '\n' inside them, so they are not suitable in that case, and it's actually hard to find suitable syntax-correct character. So here comes ""\n\n"" separator. But ScriptUtils.containsSqlScriptDelimiters() method fails to recognize it.  If it's OK, I can implement this myself, because method above is the only reason ""\n\n"" doesn't work.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/71d83388d44e550ebca15964566ee026c22f66e2, https://github.com/spring-projects/spring-framework/commit/5578a2e46d44564926edad7fd38cc4aff4a2db37, https://github.com/spring-projects/spring-framework/commit/0d6dc5760cb58543ce47fd0228402a76d36c7bcc","closed","in: data,","spring-projects-issues","2016-10-14T10:29:15Z","2019-01-11T17:30:05Z"
"","19304","Not implemented EQUALS methods cause OOM while using AOP [SPR-14738]","**[Vorozhbieva Alena](https://jira.spring.io/secure/ViewProfile.jspa?name=alena)** opened **[SPR-14738](https://jira.spring.io/browse/SPR-14738?redirect=false)** and commented  AOP functionality creates classes dynamically if needed class has not exist yet. Equals method is called while checking if class has exist. In my case method equals in org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter always returns false because of this code:  ``` if (!equalsPointcuts(thisAdvisor, thatAdvisor)) { 		return false; } ```  Because of there is no overriden EQUALS in org.springframework.retry.annotation.RetryConfiguration$AnnotationClassOrMethodPointcut. Class loader stores all classes which it has loaded. So I get OOM because of many similar classes are stored in class loader (screen of heapdump is in attach)  ---  **Attachments:** - [classloader_content_OOM.PNG](https://jira.spring.io/secure/attachment/23560/classloader_content_OOM.PNG) (_43.06 kB_)  **Issue Links:** - #19267 Classloader leak with cglib proxies and spring-retry (_**""duplicates""**_)","closed","status: invalid,","spring-projects-issues","2016-09-21T16:38:02Z","2019-01-12T05:21:54Z"
"","19583","Validation of existing transactions with transaction synchronization turned off not working (?) [SPR-15016]","**[Vojtech Toman](https://jira.spring.io/secure/ViewProfile.jspa?name=vtoman)** opened **[SPR-15016](https://jira.spring.io/browse/SPR-15016?redirect=false)** and commented  In out project, we have our own transaction manager implementation. In the test suite, we have a test that checks the various cases in transaction propagation, including the following (requesting a RW transaction while the current transaction is RO):  ``` class A {   @Autowired   private B b;    @Transactional(readOnly = true)   public void readOnly() {     b.readWrite();   } }  class B {   @Transactional(propagation = Propagation.REQUIRED, readOnly = false)   public void readWrite() {     ...   } } ```  As expected, the call to `b.readWrite()` fails with an `IllegalTransactionStateException`. However, when I disable transaction synchronization in our transaction manager, I don't get an exception any more. In the code of `AbstractPlatformTransactionManager.handleExistingtransaction()`, I see that the check for this case uses `TransactionSynchronizationManager.isCurrentTransactionReadOnly()` which, obviously, returns `false` if transaction synchronization is turned off. I believe this is a bug. (It's possible that this follows from the semantics of transaction synchronization in which case I would be grateful if somebody could explain me the reasoning behind this).  ---  **Affects:** 4.3.4  **Issue Links:** - #17201 Log warning for Isolation.READ_UNCOMMITTED with Propagation.NOT_SUPPORTED","closed","status: declined,","spring-projects-issues","2016-12-14T14:30:48Z","2019-01-12T16:33:45Z"
"","19025","Missing tests for async request handling with StreamingResponseBody [SPR-14456]","**[Vladimir L.](https://jira.spring.io/secure/ViewProfile.jspa?name=vladimir_l)** opened **[SPR-14456](https://jira.spring.io/browse/SPR-14456?redirect=false)** and commented  This is a ticket to comply with [contributing guideline](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md) of Spring Framework project for already created [pull-request](https://github.com/spring-projects/spring-framework/pull/1106).  ### Background story  While testing my Spring MVC application I came across your great examples of how to test asynchronous request processing using `spring-test` library in [AsyncTests.java](https://github.com/spring-projects/spring-framework/blob/master/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java) file.  My application however is designed to steam a huge amount of data and thus controllers return instances of `StreamingResponseBody` interface.  Unfortunately the examples from `AsyncTests.java` did not work as expected. During second step after the `asyncDispatch(mvcResult)` method my expectations against `content()` always failed claiming that response is empty whereas I've expected some data to be written to output stream.  It took me some time to debug and figure out that the `asyncDispatch(...)` method is actually returns back only the modified version of original request, and the `perform(...)` method creates a new instance of `MvcResult` with a fresh version of `MockHttpServletResponse`. The logic inside controllers was writing the data into original HTTP response generated by initial `perform(...)` method, while I was validating the content of HTTP response generated by second `perform(...)`.  ### Test sample  ```java @Test public void streaming() throws Exception {     this.mockMvc.perform(get(""/streamingresult""))         .andExpect(request().asyncStarted())         .andDo(r -> r.getAsyncResult()) // fetch async result similar to what ""asyncDispatch"" builder does         .andExpect(status().isOk())         .andExpect(content().string(""expected content of streamed data ..."")); } ```    ---  **Affects:** 4.3.1  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1106  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/df556333a8a4c070a4c989588ca4bb9724d48d65","closed","type: enhancement,","spring-projects-issues","2016-07-12T21:46:35Z","2016-07-28T09:16:20Z"
"","19198","Third concurrent request hangs forever with HttpClient and maxConnPerRoute=2 [SPR-14631]","**[Vitaliy Zabolotskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=zabolots)** opened **[SPR-14631](https://jira.spring.io/browse/SPR-14631?redirect=false)** and commented  When you define custom HttpClient (Httpclients.custom()), default values for maxConnTotal = 20 and maxConnPerRoute = 2. And if then you send three concurrent requests (getForObject) with same route, third request hangs forever waiting and does not fail (does not have a timeout) more information and source code will be on tuesday 30.08   ---  **Affects:** 4.3.2","closed","in: web,","spring-projects-issues","2016-08-26T11:35:36Z","2019-01-11T18:09:18Z"
"","19508","NPE is thrown while writing the response [SPR-14941]","**[Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg)** opened **[SPR-14941](https://jira.spring.io/browse/SPR-14941?redirect=false)** and commented  o.s.http.server.reactive.AbstractResponseBodyProcessor.State.REQUESTED state: - onNext is invoked with a non empty DataBuffer - The state is changed to RECEIVED, but the DataBuffer is still not processed   (o.s.http.server.reactive.AbstractResponseBodyProcessor.receiveBuffer(DataBuffer) is not invoked) - At that moment the web container sends event onWritePossible,   but as the DataBuffer is still not processed, NPE is thrown when trying to write the response.  ``` java.lang.NullPointerException: null at org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyProcessor.write(ServletServerHttpResponse.java:215) at org.springframework.http.server.reactive.AbstractResponseBodyProcessor$State$3.onWritePossible(AbstractResponseBodyProcessor.java:253) at org.springframework.http.server.reactive.AbstractResponseBodyProcessor.onWritePossible(AbstractResponseBodyProcessor.java:113) at org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyWriteListener.onWritePossible(ServletServerHttpResponse.java:247) at org.eclipse.jetty.server.HttpOutput.run(HttpOutput.java:996) at org.eclipse.jetty.server.handler.ContextHandler.handle(ContextHandler.java:1286) at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:428) at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251) at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273) at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95) at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671) at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589) at java.lang.Thread.run(Thread.java:745) ```    ---  **Affects:** 5.0 M3","closed","type: bug,","spring-projects-issues","2016-11-23T21:22:35Z","2016-12-30T13:33:15Z"
"","19391","Do not use Jackson2JsonEncoder for byte array [SPR-14825]","**[Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg)** opened **[SPR-14825](https://jira.spring.io/browse/SPR-14825?redirect=false)** and commented  Hi,  I have the following example  ``` @RestController public class TestController {  	private final Random rnd = new Random();  	@GetMapping(path = ""/performance"") 	Flux test() { 		byte[] content = new byte[16384]; 		rnd.nextBytes(content); 		return Flux.just(content, content, content, content, content); 	}  } ```  org.springframework.http.codec.json.Jackson2JsonEncoder is used to encode the value which affects the response time. It will be better if we do not use org.springframework.http.codec.json.Jackson2JsonEncoder for byte arrays.  Regards, Violeta   ---  **Affects:** 5.0 M2","closed","type: enhancement,","spring-projects-issues","2016-10-19T17:04:04Z","2016-11-08T13:11:18Z"
"","19439","Invoking method (having @Bean) on Autowired parent class is calling subclass method [SPR-14873]","**[Vinod Kisanagaram](https://jira.spring.io/secure/ViewProfile.jspa?name=kvr2277)** opened **[SPR-14873](https://jira.spring.io/browse/SPR-14873?redirect=false)** and commented  Let's say I have a parent class defined like below  `@Configuration` public class **Parent**{ `@Bean`(name=""methodParent"") public XYZ method(){ XYZ foo = new XYZ(""foo""); } }  `@Configuration` public class **Subclass** extends Parent{ `@Bean`(name=""methodSubclass"") public XYZ method(){ XYZ bar = new XYZ(""bar"") } }  In Client Spring Junit class  public class Client{        @Autowired       @Qualifier(""*methodParent*"")       XYZ xyz;              public void clientMethod(){             system.out.print( xyz.shout()); //assuming shout returns value set in XYZ constructor           }  }  **Above prints me ""bar"" where as I expect ""foo"" from Parent** as I'm qualifying methodParent  But strange part is if I declare a second BSubClass which is alphabetically before SubClass (prefixed 'B' )  `@Configuration` public class BSubclass extends Parent{ public XYZ method(){ return null; } }  without making any other changes apart from creating this brand new SubClass2, invoking Client class returns me expected ""foo""!  But instead of **BSubClass** if I create **TSubClass** (which has letter 'T' as prefix and alphabetically comes after 'SubClass') I get the error again as ""bar""  It appears more to do with class loading problem of `@Bean` annotation    ---  **Affects:** 4.3.3","closed","status: bulk-closed,","spring-projects-issues","2016-11-02T18:05:33Z","2019-01-12T00:12:06Z"
"","19220","Broken FallbackObjectToStringConverter [SPR-14655]","**[Viktor](https://jira.spring.io/secure/ViewProfile.jspa?name=wayerr)** opened **[SPR-14655](https://jira.spring.io/browse/SPR-14655?redirect=false)** and commented  Class '[FallbackObjectToStringConverter](https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/convert/support/FallbackObjectToStringConverter.java#L59)' use same code as 'ObjectToObjectConverter' but in wrong way:  ``` final class FallbackObjectToStringConverter ... {   @Override   public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {     ...     return (CharSequence.class.isAssignableFrom(sourceClass) ||         StringWriter.class.isAssignableFrom(sourceClass) ||         ObjectToObjectConverter.hasConversionMethodOrConstructor(sourceClass, String.class));                                                               // ^^ source first ^^   } ```  ``` final class ObjectToObjectConverter ... {   public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {     return (sourceType.getType() != targetType.getType() &&       hasConversionMethodOrConstructor(targetType.getType(), sourceType.getType()));                                        // ^^ target first ^^   } ```  Therefore converting from Object by toString method is not work.   ---  **Affects:** 4.3.2","closed","in: core,","spring-projects-issues","2016-09-01T14:40:08Z","2019-01-12T16:33:58Z"
"","19124","@RequestMapping consumes type annotation filters out ""GET"" requests without Content-Type [SPR-14556]","**[Victor Herraiz Posada](https://jira.spring.io/secure/ViewProfile.jspa?name=victorherraiz)** opened **[SPR-14556](https://jira.spring.io/browse/SPR-14556?redirect=false)** and commented  ""Get"" requests should not use content type header, therefore they should not be filter by the consumes property (see example below).  The type annotation is quite useful for to add a ""general"" constrain to any POST o PUT, but it could not be use if there is any GET method in the same controller.  ```java @RestController @RequestMapping(consumes = MediaType.APPLICATION_JSON_UTF8_VALUE) public class FooController { ... ```    ---  **Affects:** 4.2.6","closed","type: enhancement,","spring-projects-issues","2016-08-02T19:26:46Z","2020-10-15T11:07:39Z"
"","19119","StackOverflowError for advisor search against factory-bean reference to FactoryBean [SPR-14551]","**[Victor Bronstein](https://jira.spring.io/secure/ViewProfile.jspa?name=victorbr)** opened **[SPR-14551](https://jira.spring.io/browse/SPR-14551?redirect=false)** and commented  StackOverflowError happens when powering up an application context that includes JPA Hibernate entity manager, defines  and Hibernate statistics bean. The minimal project reproducing the issue is attached. Here's the snippet of the XML:  ```                                                                                                                                                                 ```  ---  **Affects:** 3.2.17, 4.1.9, 4.2.7, 4.3.2  **Attachments:** - [stack-overflow-error.jar](https://jira.spring.io/secure/attachment/23491/stack-overflow-error.jar) (_3.54 kB_)  **Issue Links:** - #15828 FactoryBean bean type detection can causes fatal early instantiation - #16755 Plain FactoryBean declaration on `@Bean` method leads to early call (pre injection) - #12206 findDefaultEntityManagerFactory should consider EMF bean's primary flag - #16461 HttpInvokerProxyFactoryBean and co do not reliably expose correct type when declared via `@Bean` - #19692 Modification in AbstractAutowireCapableBeanFactory to prevent stackoverflow errors causes context not to load.  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","in: core,","spring-projects-issues","2016-08-01T19:37:48Z","2019-01-13T05:22:58Z"
"","19260","Failed to start bean 'webSocketHandlerMapping'; nested exception is java.lang.IllegalStateException: Unable to initialize Jetty WebSocketServerFactory with latest spring and jetty vesions [SPR-14696]","**[Venkata Satya Teja Siram](https://jira.spring.io/secure/ViewProfile.jspa?name=teja.siram)** opened **[SPR-14696](https://jira.spring.io/browse/SPR-14696?redirect=false)** and commented  Hi Team,  Earlier we were using  Spring websocket dependency:  ---                org.springframework          spring-websocket          4.2.4.RELEASE       JETTY dependency:  ---      9.2.1.v20140609  And websocket configuration is as follows:  ---  `@Configuration` `@EnableWebMvc` `@EnableAspectJAutoProxy` `@EnableWebSocket` public class WebMVCConfig extends WebMvcConfigurerAdapter implements WebSocketConfigurer {      private static final String NOTIFIER_ENDPOINT_URL = ""/notificationHandler"";          @Override     public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {     	registry.addHandler(socketHandler(), NOTIFIER_ENDPOINT_URL).setAllowedOrigins(""*"");     }          @Bean     public WebSocketHandler socketHandler() {     	return new NotificationSocketHandler();     }          @Override     public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {     	configurer.enable();     }          @Bean     public DefaultHandshakeHandler handshakeHandler() {          	WebSocketPolicy policy = new WebSocketPolicy(WebSocketBehavior.SERVER);     	policy.setInputBufferSize(8192);     	policy.setIdleTimeout(600000);          	return new DefaultHandshakeHandler(new JettyRequestUpgradeStrategy(new WebSocketServerFactory(policy)));     }  This configuration was working fine..Later we found some native memory related(inflater/deflater issues) in old version of jetty..So we are going to upgrade the jetty version as well as the spring websocket version  But on just chaning the spring webscket version to 4.3.2 and 9.3.11.v20160721..By changing the version the test cases which are passing earlier are failing with following stack trace  Stack Trace:  ---  java.lang.IllegalStateException: Failed to load ApplicationContext at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124) at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83) at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:183) at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:123) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:228) at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextPrepareTestInstance(AbstractTestNGSpringContextTests.java:149) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85) at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:517) at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213) at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:140) at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:170) at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:104) at org.testng.TestRunner.privateRun(TestRunner.java:771) at org.testng.TestRunner.run(TestRunner.java:621) at org.testng.SuiteRunner.runTest(SuiteRunner.java:357) at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352) at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310) at org.testng.SuiteRunner.run(SuiteRunner.java:259) at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52) at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86) at org.testng.TestNG.runSuitesSequentially(TestNG.java:1199) at org.testng.TestNG.runSuitesLocally(TestNG.java:1124) at org.testng.TestNG.run(TestNG.java:1032) at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115) at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205) at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108) at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111) at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203) at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) Caused by: org.springframework.context.ApplicationContextException: Failed to start bean 'webSocketHandlerMapping'; nested exception is java.lang.IllegalStateException: Unable to initialize Jetty WebSocketServerFactory at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:176) at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:51) at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:346) at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:149) at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:112) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:852) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541) at org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:133) at org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:60) at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:109) at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:261) at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83) at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:183) at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:123) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:228) at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextPrepareTestInstance(AbstractTestNGSpringContextTests.java:149) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85) at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:517) at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213) at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:140) at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:170) at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:104) at org.testng.TestRunner.privateRun(TestRunner.java:771) at org.testng.TestRunner.run(TestRunner.java:621) at org.testng.SuiteRunner.runTest(SuiteRunner.java:357) at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352) at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310) at org.testng.SuiteRunner.run(SuiteRunner.java:259) at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52) at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86) at org.testng.TestNG.runSuitesSequentially(TestNG.java:1199) at org.testng.TestNG.runSuitesLocally(TestNG.java:1124) at org.testng.TestNG.run(TestNG.java:1032) at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115) at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205) at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108) at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111) at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203) at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) Caused by: java.lang.IllegalStateException: Unable to initialize Jetty WebSocketServerFactory at org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.start(JettyRequestUpgradeStrategy.java:164) at org.springframework.web.socket.server.support.AbstractHandshakeHandler.doStart(AbstractHandshakeHandler.java:204) at org.springframework.web.socket.server.support.AbstractHandshakeHandler.start(AbstractHandshakeHandler.java:198) at org.springframework.web.socket.server.support.WebSocketHttpRequestHandler.start(WebSocketHttpRequestHandler.java:132) at org.springframework.web.socket.server.support.WebSocketHandlerMapping.start(WebSocketHandlerMapping.java:65) at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:173) at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:51) at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:346) at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:149) at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:112) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:852) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541) at org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:133) at org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:60) at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:109) at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:261) at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83) at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:183) at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:123) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:228) at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextPrepareTestInstance(AbstractTestNGSpringContextTests.java:149) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85) at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:517) at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213) at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:140) at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:170) at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:104) at org.testng.TestRunner.privateRun(TestRunner.java:771) at org.testng.TestRunner.run(TestRunner.java:621) at org.testng.SuiteRunner.runTest(SuiteRunner.java:357) at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352) at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310) at org.testng.SuiteRunner.run(SuiteRunner.java:259) at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52) at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86) at org.testng.TestNG.runSuitesSequentially(TestNG.java:1199) at org.testng.TestNG.runSuitesLocally(TestNG.java:1124) at org.testng.TestNG.run(TestNG.java:1032) at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115) at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205) at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108) at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111) at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203) at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) Caused by: javax.servlet.ServletException: Not running on Jetty, WebSocket support unavailable at org.eclipse.jetty.websocket.server.WebSocketServerFactory.init(WebSocketServerFactory.java:393) at org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.start(JettyRequestUpgradeStrategy.java:160) at org.springframework.web.socket.server.support.AbstractHandshakeHandler.doStart(AbstractHandshakeHandler.java:204) at org.springframework.web.socket.server.support.AbstractHandshakeHandler.start(AbstractHandshakeHandler.java:198) at org.springframework.web.socket.server.support.WebSocketHttpRequestHandler.start(WebSocketHttpRequestHandler.java:132) at org.springframework.web.socket.server.support.WebSocketHandlerMapping.start(WebSocketHandlerMapping.java:65) at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:173) at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:51) at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:346) at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:149) at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:112) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:852) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541) at org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:133) at org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:60) at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:109) at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:261) at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83) at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:183) at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:123) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:228) at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextPrepareTestInstance(AbstractTestNGSpringContextTests.java:149) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85) at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:517) at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213) at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:140) at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:170) at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:104) at org.testng.TestRunner.privateRun(TestRunner.java:771) at org.testng.TestRunner.run(TestRunner.java:621) at org.testng.SuiteRunner.runTest(SuiteRunner.java:357) at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352) at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310) at org.testng.SuiteRunner.run(SuiteRunner.java:259) at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52) at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86) at org.testng.TestNG.runSuitesSequentially(TestNG.java:1199) at org.testng.TestNG.runSuitesLocally(TestNG.java:1124) at org.testng.TestNG.run(TestNG.java:1032) at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115) at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205) at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108) at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111) at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203) at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)  ---  Is there any configuration that must be changed with this upgrade?  I could see the same stack in the following urls:  ---  https://build.spring.io/browse/SPR-PERF-JOB1-524/  Search Tag:  echoWebSocket  Request to please update if its a bug /configuration issue..  Thanks and Regards  ---  **Affects:** 4.3.2  1 votes, 3 watchers","closed","","spring-projects-issues","2016-09-12T14:26:40Z","2019-01-13T05:22:05Z"
"","19954","Support for Oracle JDBC connection properties Ex: fixedString [SPR-15391]","**[Venkata Krishna](https://jira.spring.io/secure/ViewProfile.jspa?name=vk_kopuri)** opened **[SPR-15391](https://jira.spring.io/browse/SPR-15391?redirect=false)** and commented  Oracle JDBC Connection property fixedString has some significant behavior only when we use PraparedStatement.setObject() is invoked with String value & with UNKNOWN SQL Type.  But this will never happens because of the following code in setValue() method of StatementCreatorUtils.java.  else if (sqlType == SqlTypeValue.TYPE_UNKNOWN) {           if (isStringValue(inValue.getClass())) {               ps.setString(paramIndex, inValue.toString());          }          else if (isDateValue(inValue.getClass())) {               ps.setTimestamp(paramIndex, new java.sql.Timestamp(((java.util.Date) inValue).getTime()));          }          else if (inValue instanceof Calendar) {               Calendar cal = (Calendar) inValue;               ps.setTimestamp(paramIndex, new java.sql.Timestamp(cal.getTime().getTime()), cal);          }          else {               // Fall back to generic setObject call without SQL type specified.               ps.setObject(paramIndex, inValue);          }     }    I think we need to fix this with some special datatype or with special else block code.  ---  **Issue Links:** - #17488 Regression in handling of String passed as Types.OTHER to JdbcTemplate - #13215 Can't insert into nvarchar2 using SimpleJdbcInsert whereas it works with SimpleJdbcTemplate","open","type: enhancement,","spring-projects-issues","2016-07-12T12:06:49Z","2019-01-11T14:41:19Z"
"","18918","Same instances of beans may be initialized twice [SPR-14346]","**[Valerii Pekarskyi](https://jira.spring.io/secure/ViewProfile.jspa?name=pekarskiy.valeriy@gmail.com)** opened **[SPR-14346](https://jira.spring.io/browse/SPR-14346?redirect=false)** and commented  I observe strange fact that in some cases bean's method annotated with `@PostConstruct` may be executed twice. It happens in cases like this: I have two implementations of one service, one straightforward, and another is a complex caching implementation that uses straightforward implementation inside. To choose what implementation should be injected to the application I define another bean with unique name and interface in java configuration and return ctx.getBean for necessary implementation. Then `@PostConstruct` for that bean is executed twice. I think that either ctx.getBean should not be supported inside java config, or application context should check if that instance of a bean was already initialized, even when it happened by another bean name.  I attach an example implementation that describes the behavior. See console output for same instance of CachingBean@xxxx output.   ---  **Affects:** 4.2.6  **Attachments:** - [issue.zip](https://jira.spring.io/secure/attachment/23420/issue.zip) (_2.42 kB_)","closed","in: core,","spring-projects-issues","2016-06-08T23:10:34Z","2019-01-12T16:34:17Z"
"","19225","TypeConverterSupport does not propagate custom exceptions anymore [SPR-14661]","**[Valentin Tsvetkov](https://jira.spring.io/secure/ViewProfile.jspa?name=tsvalen)** opened **[SPR-14661](https://jira.spring.io/browse/SPR-14661?redirect=false)** and commented  catch (Throwable ex) on line 77 in TypeConverterSupport. In SpringBoot application we can't properly use `@ControllerAdvice` because our specific exception that we throw in converter catches in TypeConverterSupport and instead it throws TypeMismatchException.  ---  **Affects:** 4.2.7  **Issue Links:** - #18917 Different error codes on same formatter registered in different ways - #19245 HibernateExceptionTranslator translating to InvalidDataAccessApiUsageException when using vanilla Hibernate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c69e6a36f7322d52d2989ea9136c7aff33f199c9, https://github.com/spring-projects/spring-framework/commit/73bbe0849a6c220d3a895b47b3ae8574478a654a, https://github.com/spring-projects/spring-framework/commit/883c3a6b4f4a57318ae851994fd2fb61ed7bd6b4  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","in: core,","spring-projects-issues","2016-09-02T10:51:48Z","2019-01-11T18:22:05Z"
"","18888","Support RequestScopeCacheManager [SPR-14316]","**[Vadim Kirilchuk](https://jira.spring.io/secure/ViewProfile.jspa?name=vadim%20kirilchuk)** opened **[SPR-14316](https://jira.spring.io/browse/SPR-14316?redirect=false)** and commented  Sometimes the request level scope is required for caching, i.e. you call something twice but the call never affects another request, so rather than maintaining global cache with eviction policy it's easier to clear the cache right after request was completed. I think it's quite trivial to implement that: https://github.com/rinoto/spring-request-cache  Is there any chance to get this included in next versions of spring?   ---  **Affects:** 4.3 RC2","closed","type: enhancement,","spring-projects-issues","2016-05-30T11:00:46Z","2016-06-09T12:34:49Z"
"","19598","MBeanExporter fails against null beans [SPR-15031]","**[Vadim Beilin](https://jira.spring.io/secure/ViewProfile.jspa?name=vadimb)** opened **[SPR-15031](https://jira.spring.io/browse/SPR-15031?redirect=false)** and commented  org.springframework.jmx.export.MBeanExporter#registerBeanNameOrInstance(Object,String) may encounter situation when the bean value returned by the getBean(beanName) at line 601 is null. One common situation when this happens is when a FactoryBean.getObject() returns null (valid since Spring 2.0) based on some configuration settings.  MBeanExporter or its subclasses cannot deal with this situation:  - MBeanExporter:  ``` Exception in thread ""main"" org.springframework.jmx.export.UnableToRegisterMBeanException: Unable to register MBean [spring.SpringTest$Fct] with key 'spring.SpringTest$Fct'; nested exception is javax.management.MalformedObjectNameException: Key properties cannot be empty 	at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:625) 	at org.springframework.jmx.export.MBeanExporter.registerBeans(MBeanExporter.java:550) 	at org.springframework.jmx.export.MBeanExporter.afterSingletonsInstantiated(MBeanExporter.java:432) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:792) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538) 	at org.springframework.context.annotation.AnnotationConfigApplicationContext.(AnnotationConfigApplicationContext.java:84) 	at spring.SpringTest.main(SpringTest.java:15) Caused by: javax.management.MalformedObjectNameException: Key properties cannot be empty 	at javax.management.ObjectName.construct(ObjectName.java:483) 	at javax.management.ObjectName.(ObjectName.java:1382) 	at javax.management.ObjectName.getInstance(ObjectName.java:1273) 	at org.springframework.jmx.support.ObjectNameManager.getInstance(ObjectNameManager.java:62) 	at org.springframework.jmx.export.naming.KeyNamingStrategy.getObjectName(KeyNamingStrategy.java:141) 	at org.springframework.jmx.export.MBeanExporter.getObjectName(MBeanExporter.java:751) 	at org.springframework.jmx.export.MBeanExporter.registerBeanInstance(MBeanExporter.java:654) 	at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:602) 	... 7 more ```  - AnnotationMBeanExporter:  ``` Exception in thread ""main"" org.springframework.jmx.export.UnableToRegisterMBeanException: Unable to register MBean [spring.SpringTest$Fct] with key 'spring.SpringTest$Fct'; nested exception is java.lang.IllegalArgumentException: Candidate object must not be null 	at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:625) 	at org.springframework.jmx.export.MBeanExporter.registerBeans(MBeanExporter.java:550) 	at org.springframework.jmx.export.MBeanExporter.afterSingletonsInstantiated(MBeanExporter.java:432) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:792) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538) 	at org.springframework.context.annotation.AnnotationConfigApplicationContext.(AnnotationConfigApplicationContext.java:84) 	at spring.SpringTest.main(SpringTest.java:15) Caused by: java.lang.IllegalArgumentException: Candidate object must not be null 	at org.springframework.util.Assert.notNull(Assert.java:115) 	at org.springframework.aop.support.AopUtils.getTargetClass(AopUtils.java:104) 	at org.springframework.jmx.export.naming.MetadataNamingStrategy.getObjectName(MetadataNamingStrategy.java:111) 	at org.springframework.jmx.export.MBeanExporter.getObjectName(MBeanExporter.java:751) 	at org.springframework.jmx.export.MBeanExporter.registerBeanInstance(MBeanExporter.java:654) 	at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:602) 	... 7 more ```  Example for reproduction:  ``` package spring;  import org.springframework.beans.factory.FactoryBean; import org.springframework.context.annotation.*; import org.springframework.jmx.export.MBeanExporter;  @Configuration @Import({/*AnnotationMBeanExporter.class*/MBeanExporter.class, SpringTest.Fct.class}) public class SpringTest {     public static void main(String[] args) { new AnnotationConfigApplicationContext(SpringTest.class);   }          public static class Fct implements FactoryBean {         // returns null if some condition is not met          @Override public Something getObject() throws Exception { return null; }         @Override public Class getObjectType() { return Something.class; }         @Override public boolean isSingleton() { return true; }     }      // uncomment to use AnnotatedMBeanExporter //    @ManagedResource     public static class Something implements SomethingMBean{}     public static interface SomethingMBean {} } ```  Tested with 4.2.6, code in either 4.3.x or 5. does not appear to have any changes.   ---  **Affects:** 3.2.17, 4.2.6  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","in: core,","spring-projects-issues","2016-12-19T12:12:14Z","2016-12-21T11:54:08Z"
"","18929","Introduce class-level execution phases for @Sql [SPR-14357]","**[urbanq](https://jira.spring.io/secure/ViewProfile.jspa?name=urbanq)** opened **[SPR-14357](https://jira.spring.io/browse/SPR-14357?redirect=false)** and commented  It would be helpful to introduce class-level support in the `ExecutionPhase` enum used by `@Sql`: `BEFORE_CLASS` and `AFTER_CLASS`.  So when executing integration test we can easily run one single SQL script for all test methods in the test class.  ---  **Affects:** 4.2.6  **Reference URL:** https://stackoverflow.com/questions/32871817/using-annotation-sql-is-it-possible-to-execute-scripts-in-class-level-before-m  **Issue Links:** - #20570 Introduce opt-in support for merging class-level and method-level `@Sql` declarations  4 votes, 5 watchers","open","type: enhancement,","spring-projects-issues","2016-06-13T08:46:31Z","2021-08-16T07:42:32Z"
"","19224","Entity manager factory bean: Support native WebSphere JPA implementation [SPR-14660]","**[Ulrich Hecht](https://jira.spring.io/secure/ViewProfile.jspa?name=uhecht)** opened **[SPR-14660](https://jira.spring.io/browse/SPR-14660?redirect=false)** and commented  WebSphere Application Server (WAS) provides a JPA 2.0 implementation which is actually a customized version of OpenJPA 2.1. Provider and EntityManagerFactory differ from OpenJPA which seems to be a problem for Spring Framework's `LocalContainerEntityManagerFactoryBean`. As far as I understood, `LocalContainerEntityManagerFactoryBean` creates a proxy class and fails in the case of WebSphere's JPA implementation.  Every now and then I see people getting confused by this. See this SO answer and comments (!) for example: [http://stackoverflow.com/a/4640126/395879](http://stackoverflow.com/a/4640126/395879).  This is a problem with WebSphere Liberty Profile (the light version of WAS for developers). I wasn't able (and think it is not possible) to get standard OpenJPA working on liberty profile and remember the origin of this problem having something to do with load time weaving and entity enhancement. Maybe this is a reason why they even provide a customized version of OpenJPA: http://www.ibm.com/support/knowledgecenter/en/SSAW57_liberty/com.ibm.websphere.wlp.nd.doc/ae/rwlp_jpa_enhance.html.  I debugged `@createEntityManagerFactoryProxy`@ (see screenshot in attachment). I think this information is useful for fixing this:  Interfaces required for the proxy: * `com.ibm.websphere.persistence.WsJpaEntityManagerFactory` * `org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI` * `org.apache.openjpa.persistence.OpenJPAEntityManagerFactory` * `javax.persistence.PersistenceUnitUtil` * `org.springframework.orm.jpa.EntityManagerFactoryInfo`  Persistence provider class (as specified in persistence.xml): `com.ibm.websphere.persistence.PersistenceProviderImpl`  Exception:  ``` java.lang.IllegalArgumentException: methods with same signature createEntityManager() but incompatible return types: [interface com.ibm.websphere.persistence.WsJpaEntityManager, interface org.apache.openjpa.persistence.OpenJPAEntityManagerSPI] ```  My workaround in the past was to use Hibernate ORM for development and to switch to OpenJPA when deploying the application to WAS full profile test and production servers. So I have to change persistence.xml everytime. Not using liberty profile at all is not an option, because deployment / restarting the server etc. takes too long for the full profile.  My current project has been developed by someone else originally who used OpenJPA and unfortunately depends on some OpenJPA-specific features. That's why I'm asking for a fix. I cannot switch to Hibernate ORM this time.  My spring configuration (applicationContext.xml):  ```xml        ```  persistence.xml:  ```xml   	 		com.ibm.websphere.persistence.PersistenceProviderImpl 		java:comp/env/jdbc/my_ds  		 	  ```  Important note: This is related to JavaEE 6, JPA 2.0 and OpenJPA 2.1. WebSphere's JPA 2.1 implementation is probably completely different.  ---  **Affects:** 4.3.2  **Attachments:** - [Debugging createEntityManagerFactoryProxy.png](https://jira.spring.io/secure/attachment/23532/Debugging+createEntityManagerFactoryProxy.png) (_99.93 kB_)  **Issue Links:** - #13023 LocalEntityManagerFactoryBean : Illegal Argument Exception while using in WAS7","closed","status: bulk-closed,","spring-projects-issues","2016-09-02T06:52:12Z","2019-01-12T02:25:02Z"
"","19212","Allow @PathVariable to be optional [SPR-14646]","**[Ulrich Hecht](https://jira.spring.io/secure/ViewProfile.jspa?name=uhecht)** opened **[SPR-14646](https://jira.spring.io/browse/SPR-14646?redirect=false)** and commented  `@PathVariable`'s named-value-method-argument-resolver (`PathVariableMethodArgumentResolver`) defines it always as 'required'. In general this makes sense, because if you use `@PathVariable` then the path variable is expected to be available in the `@RequestMapping`'s path value.  But consider the usage of `@PathVariable` in `@ModelAttribute` annotated methods. Those methods are called for all handlers and not all handlers provide the same path variables.  In my case I have a controller in which 4 of 5 methods provide a specific path variable. In order to avoid duplicate code I collect view variables in `@ModelAttribute`-methods.  This is, how it would look like if `@PathVariable` had a ""required""-attribute:  ```java @RequestMapping(""/activity-recordings"") public String getActivityRecordingsAction(/*...*/) { /* This method doesn't have and need path variables */ }  @RequestMapping(""/activity-recordings/{purchasePositionNumber}-{index}"") public String getActivityRecordingAction(/*...*/) { /* ... */ }  @PostMapping(""/activity-recordings/{purchasePositionNumber}-{index}"") public String updateActivityRecordingAction(/*...*/) { /* ... */ }  @RequestMapping(""/activity-recordings/{purchasePositionNumber}-new"") public String newActivityRecordingAction(/*...*/) { /* ... */ }  @PostMapping(""/activity-recordings/{purchasePositionNumber}-new"") public String addActivityRecordingAction(/*...*/) { /* ... */ }  @ModelAttribute(""activityRecordingPriceLimit"") public Double getActivityRecordingPriceLimit(@PathVariable(name = ""purchasePositionNumber"", required = ""false"") String purchasePositionNumber) {    if (purchasePositionNumber == null) return null;    /* Some code calculating the value. I don't want to duplicate it 4 times */ }  /* Lots of other @ModelAttribute methods. If I cannot use them I will need to have a block of multiple ""modelMap.put(...)"" lines that I need to duplicate in the last 4 request handlers */ ```  At the moment, this code will throw a `MissingPathVariableException` when the first handler is called. My workaround is to define the `@ModelAttribute` method's argument as `Map`:  ```java @ModelAttribute(""activityRecordingPriceLimit"") public Double getActivityRecordingPriceLimit(@PathVariable Map pathVariableMap) { /* Look up required path variable in the map */ } ```  However, I don't like this solution.  ---  **Affects:** 4.3.2  **Issue Links:** - #16171 Provide `@ModelAttribute`(required=""false"") for session attributes - #18468 Convenient access to session and request attributes in controller methods - #10172 Using PathVariable in ModelAttribute method","closed","type: enhancement,","spring-projects-issues","2016-08-31T08:45:01Z","2019-01-14T04:38:08Z"
"","19145","Spring boot failing to start up while using experimental spring reactive 5.0 [SPR-14576]","**[Tzachi Strugo](https://jira.spring.io/secure/ViewProfile.jspa?name=tzachi)** opened **[SPR-14576](https://jira.spring.io/browse/SPR-14576?redirect=false)** and commented  Spring boot failing to start up while using experimental spring reactive from below reason  org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is java.lang.NoSuchMethodError: org.springframework.http.server.reactive.ServletHttpHandlerAdapter: method \()V not found at org.springframework.boot.context.embedded.ReactiveWebApplicationContext.onRefresh(ReactiveWebApplicationContext.java:52) ~[spring-boot-autoconfigure-web-reactive-0.1.0.BUILD-20160804.004532-18.jar:1.4.0.BUILD-SNAPSHOT] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:535) ~[spring-context-5.0.0.BUILD-20160809.192615-131.jar:5.0.0.BUILD-SNAPSHOT] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759) [spring-boot-1.4.0.BUILD-20160728.175440-591.jar:1.4.0.BUILD-SNAPSHOT] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369) [spring-boot-1.4.0.BUILD-20160728.175440-591.jar:1.4.0.BUILD-SNAPSHOT] at org.springframework.boot.SpringApplication.run(SpringApplication.java:313) [spring-boot-1.4.0.BUILD-20160728.175440-591.jar:1.4.0.BUILD-SNAPSHOT] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1185) [spring-boot-1.4.0.BUILD-20160728.175440-591.jar:1.4.0.BUILD-SNAPSHOT] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1174) [spring-boot-1.4.0.BUILD-20160728.175440-591.jar:1.4.0.BUILD-SNAPSHOT]  it seems like a problem of un synchronisation between jars of Spring-web and spring-boot-autoconfigure-web-rective projects.  dependency tree: [INFO] --- maven-dependency-plugin:2.10:tree (default-cli) @ rectiveprojectdemo --- [INFO] com.behalf.learning.reactive:rectiveprojectdemo:jar:0.0.1-SNAPSHOT [INFO] +- org.springframework.boot.experimental:spring-boot-starter-web-reactive:jar:0.1.0.BUILD-SNAPSHOT:compile [INFO] |  +- org.springframework.boot:spring-boot-starter:jar:1.4.0.RELEASE:compile [INFO] |  |  +- org.springframework.boot:spring-boot:jar:1.4.0.RELEASE:compile [INFO] |  |  |  \- org.springframework:spring-context:jar:5.0.0.BUILD-SNAPSHOT:compile [INFO] |  |  |     +- org.springframework:spring-aop:jar:5.0.0.BUILD-SNAPSHOT:compile [INFO] |  |  |     +- org.springframework:spring-beans:jar:5.0.0.BUILD-SNAPSHOT:compile [INFO] |  |  |     \- org.springframework:spring-expression:jar:5.0.0.BUILD-SNAPSHOT:compile [INFO] |  |  +- org.springframework.boot:spring-boot-autoconfigure:jar:1.4.0.RELEASE:compile [INFO] |  |  +- org.springframework.boot:spring-boot-starter-logging:jar:1.4.0.RELEASE:compile [INFO] |  |  |  +- ch.qos.logback:logback-classic:jar:1.1.7:compile [INFO] |  |  |  |  \- ch.qos.logback:logback-core:jar:1.1.7:compile [INFO] |  |  |  +- org.slf4j:jcl-over-slf4j:jar:1.7.21:compile [INFO] |  |  |  +- org.slf4j:jul-to-slf4j:jar:1.7.21:compile [INFO] |  |  |  \- org.slf4j:log4j-over-slf4j:jar:1.7.21:compile [INFO] |  |  \- org.yaml:snakeyaml:jar:1.17:runtime [INFO] |  +- org.springframework.boot.experimental:spring-boot-autoconfigure-web-reactive:jar:0.1.0.BUILD-SNAPSHOT:compile [INFO] |  |  +- org.springframework:spring-web-reactive:jar:5.0.0.BUILD-SNAPSHOT:compile [INFO] |  |  |  \- org.springframework:spring-web:jar:5.0.0.BUILD-SNAPSHOT:compile [INFO] |  |  \- io.netty:netty-buffer:jar:4.1.3.Final:compile [INFO] |  |     \- io.netty:netty-common:jar:4.1.3.Final:compile [INFO] |  +- org.springframework.boot:spring-boot-starter-tomcat:jar:1.4.0.RELEASE:compile [INFO] |  |  +- org.apache.tomcat.embed:tomcat-embed-core:jar:8.5.4:compile [INFO] |  |  +- org.apache.tomcat.embed:tomcat-embed-el:jar:8.5.4:compile [INFO] |  |  \- org.apache.tomcat.embed:tomcat-embed-websocket:jar:8.5.4:compile [INFO] |  \- com.fasterxml.jackson.core:jackson-databind:jar:2.8.1:compile [INFO] |     +- com.fasterxml.jackson.core:jackson-annotations:jar:2.8.1:compile [INFO] |     \- com.fasterxml.jackson.core:jackson-core:jar:2.8.1:compile [INFO] +- org.springframework.boot:spring-boot-starter-test:jar:1.4.0.RELEASE:test [INFO] |  +- org.springframework.boot:spring-boot-test:jar:1.4.0.RELEASE:test [INFO] |  +- org.springframework.boot:spring-boot-test-autoconfigure:jar:1.4.0.RELEASE:test [INFO] |  +- com.jayway.jsonpath:json-path:jar:2.2.0:test [INFO] |  |  +- net.minidev:json-smart:jar:2.2.1:test [INFO] |  |  |  \- net.minidev:accessors-smart:jar:1.1:test [INFO] |  |  |     \- org.ow2.asm:asm:jar:5.0.3:test [INFO] |  |  \- org.slf4j:slf4j-api:jar:1.7.21:compile [INFO] |  +- junit:junit:jar:4.12:test [INFO] |  +- org.assertj:assertj-core:jar:2.5.0:test [INFO] |  +- org.mockito:mockito-core:jar:1.10.19:test [INFO] |  |  \- org.objenesis:objenesis:jar:2.1:test [INFO] |  +- org.hamcrest:hamcrest-core:jar:1.3:test [INFO] |  +- org.hamcrest:hamcrest-library:jar:1.3:test [INFO] |  +- org.skyscreamer:jsonassert:jar:1.3.0:test [INFO] |  |  \- org.json:json:jar:20140107:test [INFO] |  +- org.springframework:spring-core:jar:5.0.0.BUILD-SNAPSHOT:compile [INFO] |  \- org.springframework:spring-test:jar:5.0.0.BUILD-SNAPSHOT:test [INFO] +- io.projectreactor:reactor-core:jar:3.0.0.BUILD-SNAPSHOT:compile [INFO] |  \- org.reactivestreams:reactive-streams:jar:1.0.0:compile [INFO] \- org.projectlombok:lombok:jar:1.16.10:compile [INFO] -----------------------------------------------   ---  **Attachments:** - [pom.xml](https://jira.spring.io/secure/attachment/23498/pom.xml) (_2.61 kB_)","closed","in: web,","spring-projects-issues","2016-08-10T07:52:52Z","2019-01-12T16:45:32Z"
"","19437","Default order of  should be prioritized [SPR-14871]","**[Tomoyuki Ikeya](https://jira.spring.io/secure/ViewProfile.jspa?name=ikeyat)** opened **[SPR-14871](https://jira.spring.io/browse/SPR-14871?redirect=false)** and commented  Default `order` of `` is `Order.LOWEST_PRECEDENCE - 1`. This means search of mappings for static resources is done after all other mappings are evaluated. Without changing default `order`, it takes overheads and causes performance problem especially when an app has a lot of accesses to static resources or request mappings.  Of course, it may be solved to set `order` explicitly such as ``, but the current default `order` often leads performance problem.  To avoid the mis-leading, I propose to change the default `order` to `-1`, or improve reference document to mention to `order` option.   ---  **Affects:** 4.1.9, 4.2.8, 4.3.3  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2016-11-02T10:53:33Z","2019-01-11T17:26:01Z"
"","18920","Gradle generates different Uber jar than Maven [SPR-14348]","**[Tom Palarz](https://jira.spring.io/secure/ViewProfile.jspa?name=tpalarz)** opened **[SPR-14348](https://jira.spring.io/browse/SPR-14348?redirect=false)** and commented  Hi,  I've been building simple web services using Spring Boot with both the Maven and Gradle plugins and I'm seeing differences between the two. I am working with Spring Boot 1.3.5.RELEASE .  The primary difference is that the gradle plugin does not appear to create a jar in the format from the reference doc: http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#executable-jar . There is no BOOT-INF folder in the jar created and the META-INF/MANIFEST.MF doesn't have entries for ""Spring-Boot-Classes"" or ""Spring-Boot-Libs"" like the the file would if it were generated by the maven plugin.  I'm using gradle version 2.13 and Java jdk 8.  My build.gradle is as follows:  buildscript { repositories { mavenCentral() } dependencies { classpath(""org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE"") } }  apply plugin: 'java' apply plugin: 'spring-boot'  jar { baseName = 'test-app' version =  '0.1.0' }  repositories { mavenCentral() }  sourceCompatibility = 1.8 targetCompatibility = 1.8  dependencies { compile(""org.springframework.boot:spring-boot-starter-web"") }  task wrapper(type: Wrapper) { gradleVersion = '2.3' }   ---  **Reference URL:** http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#executable-jar","closed","status: invalid,","spring-projects-issues","2016-06-09T18:03:52Z","2019-01-12T05:22:38Z"
"","19143","Avoid repeated getParameterType calls for setNull with Oracle 12c driver [SPR-14574]","**[Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tjahncke)** opened **[SPR-14574](https://jira.spring.io/browse/SPR-14574?redirect=false)** and commented  In the StatementCreatorUtils class, setNull method, the call to ps.getParameterMetaData().getParameterType(paramIndex), happens for every null parameter.  If the database is not local to where the Java application is running the overhead of this repeated statement is a significant performance hit due to the latency overhead of each DB operation.  For example, we are performing a batch insert from a remote site back to the main enterprise system of thousands of records each with several nulls.  Not sure how feasible it is, but could you cache the sql type for a prepared statement / parameter index so once it is determine it does not have to be derive again?  Thanks!!  ---  **Affects:** 4.2.5  **Issue Links:** - #15726 performancedrop due to repeated JDBC 3.0 getParameterType calls in setNull in StatementCreatorUtils - #18398 Oracle 12c JDBC driver throws inconsistent exception from getParameterType (affecting setNull calls) - #19196 Protect against getParameterType cursor leak with Oracle 12c JDBC driver  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-08-09T12:40:57Z","2019-01-14T04:38:21Z"
"","19306","spring.ftl doesn't work on freemarker 2.3.24+'s auto escaping feature [SPR-14740]","**[Tokuhiro Matsuno](https://jira.spring.io/secure/ViewProfile.jspa?name=tokuhirom)** opened **[SPR-14740](https://jira.spring.io/browse/SPR-14740?redirect=false)** and commented  spring boot's spring.ftl is using ?html (legacy escaping) in some macros.  As a result, if user enables auto escaping feature by **-Dspring.freemarker.settings.output_format=HTMLOutputFormat**, **<`@spring`.formInput ""filter.identityPrincipal"", 'size=""20"" maxlength=""20""'/>** throws exception.  ``` FreeMarker template error (HTML_DEBUG mode; use RETHROW in production!)  Lazy initialization of the imported namespace for ""spring.ftl"" has failed; see cause exception  ---- FTL stack trace (""~"" means nesting-related):     - Failed at: @spring.formInput ""filter.identityPri...  [in template ""spring_ftl.ftl"" at line 4, column 5]     ~ Reached through: #nested  [in template ""__wrapper.ftl"" in macro ""main"" at line 15, column 5]     ~ Reached through: @wrapper.main  [in template ""spring_ftl.ftl"" at line 2, column 1] ----  Java stack trace (for programmers): ---- freemarker.template.TemplateModelException: [... Exception message was already printed; see it above ...]     at freemarker.core.Environment$LazilyInitializedNamespace.ensureInitializedTME(Environment.java:2882)     at freemarker.core.Environment$LazilyInitializedNamespace.get(Environment.java:2939)     at freemarker.core.Dot._eval(Dot.java:43)     at freemarker.core.Expression.eval(Expression.java:81)     at freemarker.core.UnifiedCall.accept(UnifiedCall.java:73)     at freemarker.core.Environment.visit(Environment.java:363)     at freemarker.core.Environment.invokeNestedContent(Environment.java:572)     at freemarker.core.BodyInstruction.accept(BodyInstruction.java:60)     at freemarker.core.Environment.visit(Environment.java:363)     at freemarker.core.Environment.invoke(Environment.java:715)     at freemarker.core.UnifiedCall.accept(UnifiedCall.java:83)     at freemarker.core.Environment.visit(Environment.java:327)     at freemarker.core.Environment.visit(Environment.java:333)     at freemarker.core.Environment.process(Environment.java:306)     at freemarker.template.Template.process(Template.java:386)     at org.springframework.web.servlet.view.freemarker.FreeMarkerView.processTemplate(FreeMarkerView.java:367)     at org.springframework.web.servlet.view.freemarker.FreeMarkerView.doRender(FreeMarkerView.java:284)     at org.springframework.web.servlet.view.freemarker.FreeMarkerView.renderMergedTemplateModel(FreeMarkerView.java:234)     at org.springframework.web.servlet.view.AbstractTemplateView.renderMergedOutputModel(AbstractTemplateView.java:167)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:303)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1257)     at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1037)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:980)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:622)     at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)     at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)     at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)     at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:87)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)     at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)     at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)     at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)     at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108)     at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:522)     at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)     at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)     at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)     at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:677)     at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349)     at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:1110)     at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)     at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:785)     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1425)     at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)     at java.lang.Thread.run(Thread.java:745) Caused by: freemarker.core.ParseException: Syntax error in template ""spring.ftl"" in line 225, column 36: Using ?html (legacy escaping) is not allowed when auto-escaping is on with a markup output format (HTML), to avoid double-escaping mistakes.     at freemarker.core.FMParser.BuiltIn(FMParser.java:1193)     at freemarker.core.FMParser.AddSubExpression(FMParser.java:1101)     at freemarker.core.FMParser.PrimaryExpression(FMParser.java:593)     at freemarker.core.FMParser.UnaryExpression(FMParser.java:639)     at freemarker.core.FMParser.MultiplicativeExpression(FMParser.java:754)     at freemarker.core.FMParser.AdditiveExpression(FMParser.java:706)     at freemarker.core.FMParser.RangeExpression(FMParser.java:886)     at freemarker.core.FMParser.RelationalExpression(FMParser.java:834)     at freemarker.core.FMParser.EqualityExpression(FMParser.java:797)     at freemarker.core.FMParser.AndExpression(FMParser.java:953)     at freemarker.core.FMParser.OrExpression(FMParser.java:975)     at freemarker.core.FMParser.Expression(FMParser.java:534)     at freemarker.core.FMParser.StringOutput(FMParser.java:1508)     at freemarker.core.FMParser.MixedContentElements(FMParser.java:3647)     at freemarker.core.FMParser.List(FMParser.java:1731)     at freemarker.core.FMParser.FreemarkerDirective(FMParser.java:3329)     at freemarker.core.FMParser.MixedContentElements(FMParser.java:3697)     at freemarker.core.FMParser.If(FMParser.java:1611)     at freemarker.core.FMParser.FreemarkerDirective(FMParser.java:3325)     at freemarker.core.FMParser.MixedContentElements(FMParser.java:3697)     at freemarker.core.FMParser.Macro(FMParser.java:2630)     at freemarker.core.FMParser.FreemarkerDirective(FMParser.java:3352)     at freemarker.core.FMParser.MixedContentElements(FMParser.java:3697)     at freemarker.core.FMParser.Root(FMParser.java:4280)     at freemarker.template.Template.(Template.java:254)     at freemarker.cache.TemplateCache.loadTemplate(TemplateCache.java:548)     at freemarker.cache.TemplateCache.getTemplateInternal(TemplateCache.java:438)     at freemarker.cache.TemplateCache.getTemplate(TemplateCache.java:291)     at freemarker.template.Configuration.getTemplate(Configuration.java:2438)     at freemarker.core.Environment$LazilyInitializedNamespace.initialize(Environment.java:2901)     at freemarker.core.Environment$LazilyInitializedNamespace.ensureInitializedTME(Environment.java:2876)     ... 66 more ```  Freemarker's current maintainer's comment is here: http://stackoverflow.com/questions/37298463/freemarker-2-3-24-auto-escape-and-spring-ftl-macros-issue  ref. http://docs.spring.io/spring/docs/current/spring-framework-reference/html/view.html  Here's a reproduce code: https://github.com/tokuhirom/spring-boot-issues-6994  ---  **Issue Links:** - #21489 spring.ftl does not support turning off escaping for some macros on Spring 5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/72a8868f844f7a15900497915cf507ad908fbce6","closed","type: enhancement,","spring-projects-issues","2016-09-22T13:34:18Z","2019-01-11T17:12:25Z"
"","19030","MultipartResolutionDelegate in Servlet 2.5 environments not working correctly [SPR-14461]","**[Tobias Ahlers](https://jira.spring.io/secure/ViewProfile.jspa?name=tahlers)** opened **[SPR-14461](https://jira.spring.io/browse/SPR-14461?redirect=false)** and commented  As described in #18930 the MultipartResolutionDelegate has some Problems because the servletPartClass is not available (`null`) in Servlet 2.5 environments.  After closing #18930 I still got problems because the Method `resolveMultipartArgument` is called and is returning null due to  ```java else if (isPartCollection(parameter)) {      return (isMultipart ? RequestPartResolver.resolvePartList(request, name) : null); } ```  and  ```java private static boolean isPartCollection(MethodParameter methodParam) { 	return (servletPartClass == getCollectionParameterType(methodParam)); } ```  The caller (`RequestParamMethodArgumentResolver`) seems to expect the constant `MultipartResolutionDelegate.UNRESOLVABLE` instead of `null`:  ```java Object mpArg = MultipartResolutionDelegate.resolveMultipartArgument(name, parameter, servletRequest); if (mpArg != MultipartResolutionDelegate.UNRESOLVABLE) { 	return mpArg; } ```  Maybe another solution approach is to always return `MultipartResolutionDelegate.UNRESOLVABLE` instead of `null`?  ---  **Affects:** 4.3.1  **Issue Links:** - #18930 Failure to resolve `@RequestMapping` method arguments in Servlet 2.5 environments  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/70e666b4a31d83c050daf23846b0fb3b68f1a011","closed","type: bug,","spring-projects-issues","2016-07-14T10:56:31Z","2019-01-13T05:24:13Z"
"","19177","Transaction manager cache fails to repopulate when multiple transaction managers defined [SPR-14609]","**[Tim Lenz](https://jira.spring.io/secure/ViewProfile.jspa?name=seabamirum)** opened **[SPR-14609](https://jira.spring.io/browse/SPR-14609?redirect=false)** and commented  When `TransactionAspectSupport` is initialized, the transaction manager cache is populated by the `setTransactionManager` method. At this point there can be multiple `TransactionInterceptor` instances defined, each with its own cache, with no conflicts.  However, as soon as the transaction cache entry in `TransactionAspectSupport` is cleared by the garbage collector, the transaction manager bean is then looked up by type, which leads to a `NoUniqueBeanDefinitionException` if multiple transaction managers are defined in your application context.  This is a regression caused by #19080.  ---  **Affects:** 4.3.2  **Issue Links:** - #19271 one beanfactory can not have more than one TransactionManager  when low memory (_**""is duplicated by""**_) - #19080 Transaction manager bean in TransactionInterceptor retained after JUnit test class completes - [INT-4104](https://jira.spring.io/browse/INT-4104) No qualifying bean of type [org.springframework.transaction.PlatformTransactionManager] is defined","closed","type: regression,","spring-projects-issues","2016-08-19T19:50:10Z","2019-01-11T18:10:26Z"
"","18989","MySQLMaxValueIncrementer is not multi-master replication-safe [SPR-14418]","**[Tim Gokcen](https://jira.spring.io/secure/ViewProfile.jspa?name=hexetic)** opened **[SPR-14418](https://jira.spring.io/browse/SPR-14418?redirect=false)** and commented  The Spring `org.springframework.jdbc.support.incrementer` subsystem is used by Spring Batch, among others, to generate increasing ""unique"" IDs.  However, `org.springframework.jdbc.support.incrementer.MySQLMaxValueIncrementer` is not safe to use in multi-master MySQL or MariaDB environments, e.g. master-master replication or MySQL/Galera cluster. This is because of the way in which it always kicks forward last_insert_id() by getCacheSize(), which will result in duplicate IDs across hosts and result in collisions if those IDs are used to, for example, insert rows into a table that has a unique key on the ID.  The global MySQL variable `auto_increment_increment` is available and used by clustering systems to ensure that AUTO_INCREMENT columns do not collide across the cluster (see the [Galera documentation](https://mariadb.org/auto-increments-in-galera/)). The same value could also be used by MySQLMaxValueIncrementer to avoid collisions.  In multi-master environments, the cacheSize would also have to always be equal to 1; there is no way to pre-allocate IDs without guaranteeing that they were not already selected by another host.  Alternatively, the whole idea of using the backing RDBMS to generate increasing IDs could be abandoned in favour of generating non-linearly increasing ""probably-unique"" IDs, as for example in in [Twitter Snowflake](https://github.com/twitter/snowflake/tree/snowflake-2010), which uses a combination of ""timestamp + host-ID + thread-ID + counter"" to produce a very-likely-to-be-unique 64-bit integer.   ---  **Affects:** 4.2.6","open","type: enhancement,","spring-projects-issues","2016-06-29T12:44:55Z","2018-04-03T01:35:29Z"
"","18946","Multiple load-time-weaver elements cause repeated addition of AspectJ transformer [SPR-14373]","**[Tim Gokcen](https://jira.spring.io/secure/ViewProfile.jspa?name=hexetic)** opened **[SPR-14373](https://jira.spring.io/browse/SPR-14373?redirect=false)** and commented  If  or `@EnableLoadTimeWeaving` is specified multiple times, then multiple LoadTimeWeavers will be added to the java.lang.instrumentation transformer chain. However, because load-time-weaved classes are not reweavable, only the first LoadTimeWeaver implementation will actually work, and the others will fail, emitting errors at startup like the following:  ``` [TomcatInstrumentableClassLoader@67073331] error at com/company/project/MyAspect.java::0 class {0} is already woven and has not been built in reweavable mode [Xlint:nonReweavableTypeEncountered] ```  The obvious solution is ""don't specify load-time-weaver repeatedly"", but this may be confusing or difficult for large projects.  For example, in a Spring project where the context is composed of multiple submodules with beans that are imported by using \ elements, it makes logical sense for the submodule \ elements to specify  because they contain Aspect beans and were designed for load-time weaving. Placing  statement in the ""top-level"" context file may not make sense because it may not even be aware that some of its submodules use Aspect-Oriented-Programming. Also, multiple top-level context files may exist (e.g., for testing or for different actual context features using shared code) and this would mean putting the load-time-weaver element in all of them.  These error messages are not necessarily harmless. If  is specified with conflicting options, i.e., the use of the Spring AOP processor vs the full AspectJ weaver, then unexpected behaviour could result. A submodule specifying load-time-weaving without turning on AspectJ and without having an aop.xml file, but loaded near the start of the ""master"" context file, could prevent submodules that might require the full AspectJ weaver from working correctly merely because they were loaded later in the ""master"" context file.  It seems like things would be a lot easier for users if load-time-weaver instructions could be collapsed into one before java.lang.instrument.Instrumentation.addTransformer() is called. When there are conflicting options specified, the whole context should be aborted.  ---  **Affects:** 4.2.6  **Issue Links:** - #15087 Add exposeProxy to `@EnableAspectJAutoProxy`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/981d4494c68b5aa57607605b84cf3b4b9f700b22","closed","type: enhancement,","spring-projects-issues","2016-06-16T17:23:13Z","2019-01-13T05:24:32Z"
"","19606","@Aspect pointcut declarations do not support dynamically loaded classes [SPR-15040]","**[thomas weidner](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas001le)** opened **[SPR-15040](https://jira.spring.io/browse/SPR-15040?redirect=false)** and commented  The following steps should reproduce the issue: 1. Create a usual spring (boot) application 2. Load some additional jar files into an URLClassloader, where the application class loader is used as parent 3. Create a new AnnotationConfigApplicationContext using configuration classes from the jars in step 2 4. If these classes use Spring AOP AspectJ annotation advice definitions, which reference one of the dynamically loaded classes, the error occurs.  In my setup, where I dynamically load and advice freemarker I obtain the following stacktace:  ```  java.lang.IllegalArgumentException: warning no match for this type name: freemarker.cache.TemplateLoader [Xlint:invalidAbsoluteTypeName] 	at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:301) ~[aspectjweaver-1.8.9.jar:1.8.9] 	at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression(AspectJExpressionPointcut.java:207) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.aspectj.AspectJExpressionPointcut.checkReadyToMatch(AspectJExpressionPointcut.java:193) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.aspectj.AspectJExpressionPointcut.getClassFilter(AspectJExpressionPointcut.java:170) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:220) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:279) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:311) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:118) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:88) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:69) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:347) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:299) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:422) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1588) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	... 54 common frames omitted  ```  Looking at the stack trace, the problem is caused by `AspectJExpressionPointCut` passing the system classloader to AspectJ instead of the correct one. The reason for this is, that the pointcut's `beanFactory` field is always null, and not set to the actual bean factory. The cause of this problem seems to be that `AspectJExpressionPointCut.setBeanFactory` is never called when the PointCut is created by Spring for AspectJ-style annotation advices (`@Aspect`, `@Around`, etc). Otherwise, the Pointcut would pick up the correct, dynamically created classloader.  A fix for this problem shoud call `AspectJExpressionPointCut.setBeanFactory` for the newly created pointcut, somewhere around `ReflectiveAspectJAdvisorFactory.getPointcut`. where the pointcut is created. Maybe the pointcut should be obtained as prototype bean from the factory instead of being directly instantiated.  I can provide a sample project demonstrating the error, if requested.   ---  **Affects:** 4.3.4","closed","type: enhancement,","spring-projects-issues","2016-12-22T00:04:21Z","2016-12-30T13:33:15Z"
"","18967","Improve error handling when resolving message payloads [SPR-14394]","**[Thomas Hehl](https://jira.spring.io/secure/ViewProfile.jspa?name=thom@heavyweightsoftware.com)** opened **[SPR-14394](https://jira.spring.io/browse/SPR-14394?redirect=false)** and commented  The error handling provides insufficient information to resolve the error when no converter is found. What follows is lines 117-120 of PayloadArgumentResolver.java.  {{	if (payload == null) { throw new MessageConversionException(message, ""No converter found to convert to "" + targetClass + "", message="" + message); }}}  This does not provide information about the payload class that it's trying to convert. Error handling should be:  {{	if (payload == null) { throw new MessageConversionException(message, ""No converter found to convert to "" + targetClass + "", from "" + payload.getClass() + "", message="" + message); }}}    ---  **Affects:** 4.2.5, 4.2.6  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/4.2.x/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/07c9c55fd394e6996fab65f417ef61072b78b8cb, https://github.com/spring-projects/spring-framework/commit/f5282bc1e3ee30c39275eaf58c2bb549143f00ed  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-06-23T11:49:23Z","2016-07-04T10:17:09Z"
"","19416","NPE PropertyOrFieldReference$AccessorLValue due to concurrency issue [SPR-14850]","**[Thijs Vonk](https://jira.spring.io/secure/ViewProfile.jspa?name=thyzz)** opened **[SPR-14850](https://jira.spring.io/browse/SPR-14850?redirect=false)** and commented  We're seeing 'strange' NullpointerExceptions while using ThymeLeaf and having heavy load on the machine.  ``` 2016-10-26 15:17:23,200 [trace=7cd2c0bf5bcb66db,span=7cd2c0bf5bcb66db] ERROR       TemplateEngine:1085 - [THYMELEAF][http-nio-8080-exec-12] Exception processing template ""sections/default"": Exception evaluating SpringEL expression: ""article.detailUrl"" (includes/ankeilers/standard:5) 2016-10-26 15:17:23,229 [trace=,span=] ERROR  [dispatcherServlet]:182  - Servlet.service() for servlet dispatcherServlet threw exception java.lang.NullPointerException: null 	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:377) 	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:88) 	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:120) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:267) 	at org.thymeleaf.spring4.expression.SpelVariableExpressionEvaluator.evaluate(SpelVariableExpressionEvaluator.java:139) 	at org.thymeleaf.standard.expression.VariableExpression.executeVariable(VariableExpression.java:154) 	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:59) 	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:103) 	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:133) 	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:120) 	at org.thymeleaf.standard.processor.attr.AbstractStandardSingleAttributeModifierAttrProcessor.getTargetAttributeValue(AbstractStandardSingleAttributeModifierAttrProcessor.java:67) 	at org.thymeleaf.spring4.processor.attr.SpringHrefAttrProcessor.getTargetAttributeValue(SpringHrefAttrProcessor.java:68) 	at org.thymeleaf.processor.attr.AbstractSingleAttributeModifierAttrProcessor.getModifiedAttributeValues(AbstractSingleAttributeModifierAttrProcessor.java:59) 	at org.thymeleaf.processor.attr.AbstractAttributeModifierAttrProcessor.processAttribute(AbstractAttributeModifierAttrProcessor.java:62) 	at org.thymeleaf.processor.attr.AbstractAttrProcessor.doProcess(AbstractAttrProcessor.java:87) 	at org.thymeleaf.processor.AbstractProcessor.process(AbstractProcessor.java:212) 	at org.thymeleaf.dom.Node.applyNextProcessor(Node.java:1017) 	at org.thymeleaf.dom.Node.processNode(Node.java:972) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.Document.process(Document.java:93) 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1155) 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060) 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011) 	at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335) 	at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190) 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1246) 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1029) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:973) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:895) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:281) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.springframework.web.filter.ShallowEtagHeaderFilter.doFilterInternal(ShallowEtagHeaderFilter.java:87) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:115) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ```  Looking at similar NPE issues #17614 and how this was fixed I fixed this locally by doing the following in spring-expression v4.2.7 replace  ``` line:372 @Override public TypedValue getValue() { 	TypedValue value = this.ref.getValueInternal(this.contextObject, this.evalContext, this.autoGrowNullReferences); 	if (this.ref.cachedReadAccessor instanceof CompilablePropertyAccessor) { 		CompilablePropertyAccessor accessor = (CompilablePropertyAccessor) this.ref.cachedReadAccessor; 				this.ref.exitTypeDescriptor = CodeFlow.toDescriptor(accessor.getPropertyType()); 	} 	return value; } ```  with  ``` @Override public TypedValue getValue() { 	TypedValue value = this.ref.getValueInternal(this.contextObject, this.evalContext, this.autoGrowNullReferences); 	PropertyAccessor accessorToUse = this.ref.cachedReadAccessor; 	if (accessorToUse instanceof CompilablePropertyAccessor) { 		CompilablePropertyAccessor accessor = (CompilablePropertyAccessor) accessorToUse; 				this.ref.exitTypeDescriptor = CodeFlow.toDescriptor(accessor.getPropertyType()); 	} 	return value; } ```  ---  **Affects:** 4.2.7, 4.2.8  **Issue Links:** - #17614 NPE in PropertyOrFieldReference due to concurrency issue when caching SpelExpression objects  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","in: core,","spring-projects-issues","2016-10-26T13:39:04Z","2019-01-14T04:37:20Z"
"","18975","""Dynamic"" Allowed Origin [SPR-14404]","**[Thierry Messer](https://jira.spring.io/secure/ViewProfile.jspa?name=javaguru-ch)** opened **[SPR-14404](https://jira.spring.io/browse/SPR-14404?redirect=false)** and commented  In the CorsFilter provided by the spring-web project a CorsConfigurationSource may be passed which allows to generate the configuration ""on-the-fly"". We use this to dynamically create the ""whitelist"" of allowed origins in our project, so we can add allowed origins to the database without restarting the application. For the WebSocketHandlerRegistry no such concept is available (or did I miss something?). It would be great, if we could configure some kind of ""AllowedOriginSource"" or ""AllowedOriginProvider"" that could be used to achieve the same behaviour.   --- No further details from [SPR-14404](https://jira.spring.io/browse/SPR-14404?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-06-27T10:57:41Z","2018-12-24T18:04:43Z"
"","18949","ForwardedHeaderFilter should support cases where contextPath should not be replaced with X-Forwarded-Prefix [SPR-14376]","**[Thibaud Lepretre](https://jira.spring.io/secure/ViewProfile.jspa?name=kakawait)** opened **[SPR-14376](https://jira.spring.io/browse/SPR-14376?redirect=false)** and commented  With latest `ForwardedHeaderFilter` executed on Spring application that is using context-path  ``` server.context-path: /bar ```  If `X-Forwarded-Prefix: /foo` is present the following url http://blabla.com/bar/oauth/authorize will be converted to http://blabla.com/foo/oauth/authorize  However with following architecture `(1) Reverse proxy SSL` with context path `/foo`, `(2) Zuul without context path` and `(3) Microservice BAR` with context path `/bar`: rendering request will not work because http://blabla.com/foo/oauth/authorize will be `404`.  Expected result should be http://blabla.com/foo/bar/oauth/authorize.  **However** I'm aware that for some other use cases context-path should be **replaced** and not **prepended** (like I wish). **So the issue is debatable**.  Possible solutions:  1. Clearly document that `X-Forwarded-Prefix` will not really prefix but replace the existing context-path 2. Add option to choose strategy between prepending or replacing 3. If you consider it as a bug, just prepend.  For example Spring cloud netflix prepends `X-Forwarded-Prefix` during `Zuul` filtering https://github.com/spring-cloud/spring-cloud-netflix/pull/994/files#diff-8a3a3948fd59a02ea4234d960437c3a0R120  ---  **Affects:** 4.3 GA  **Issue Links:** - #18842 ForwardedHeaderFilter could support X-Forwarded-Prefix as well - #18945 ForwardedHeaderFilter should support case insensitive header name","closed","type: enhancement,","spring-projects-issues","2016-06-17T10:22:47Z","2021-11-25T16:10:24Z"
"","18945","ForwardedHeaderFilter should support case insensitive header name [SPR-14372]","**[Thibaud Lepretre](https://jira.spring.io/secure/ViewProfile.jspa?name=kakawait)** opened **[SPR-14372](https://jira.spring.io/browse/SPR-14372?redirect=false)** and commented  Since `4.3.0.RELEASE` Spring offers a new filter `ForwardedHeaderFilter` to handle `X-Forwarded-*` headers (#18192).  However method `shouldNotFilter` is case sensitive comparaison  ``` @Override protected boolean shouldNotFilter(HttpServletRequest request) throws ServletException { 	Enumeration headerNames = request.getHeaderNames(); 	while (headerNames.hasMoreElements()) { 		String name = headerNames.nextElement(); 		if (FORWARDED_HEADER_NAMES.contains(name)) { 			return false; 		} 	} 	return true; } ```  Where [RFC7230 - 3.2 Header Fields](https://tools.ietf.org/html/rfc7230#section-3.2)  > Each header field consists of a case-insensitive field name followed by a colon ("":"")  Regardless `RFC7230`, NGinX configuration like  ``` proxy_set_header X-Forwarded-Hostname $http_host; ```  Even with correct case will be transformed and container will received `x-forwarded-hostname`  ---  **Affects:** 4.3 GA  **Reference URL:** https://github.com/kakawait/spr-14372  **Issue Links:** - #18949 ForwardedHeaderFilter should support cases where contextPath should not be replaced with X-Forwarded-Prefix  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/919f6c96f9887746d14dbad2b6cd7af906484aea  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2016-06-16T11:29:04Z","2019-01-14T04:39:00Z"
"","18896","Async advisor retrieval blocks when triggered by singleton init method [SPR-14324]","**[terry.zhu](https://jira.spring.io/secure/ViewProfile.jspa?name=terry)** opened **[SPR-14324](https://jira.spring.io/browse/SPR-14324?redirect=false)** and commented  in spring 4.2.6 class： LazySingletonAspectInstanceFactoryDecorator method：getAspectInstance  thread is blocked.  please see：https://github.com/zhuyijian135757/http-server.git  run: class Booter run test: class HttpClientCase  ---  **Affects:** 3.2.17, 4.2.6, 4.3 GA  **Reference URL:** https://github.com/zhuyijian135757/http-server.git  **Attachments:** - [main_dump.txt](https://jira.spring.io/secure/attachment/23592/main_dump.txt) (_10.31 kB_) - [match.jpg](https://jira.spring.io/secure/attachment/23414/match.jpg) (_233.98 kB_)  **Issue Links:** - #18814 Deadlock possible with AspectJ aspects and multi-threading - #18961 Deadlock while creating a new thread on bean initialization with transactional code invocation  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2016-06-01T09:57:41Z","2019-01-11T16:08:13Z"
"","19424","advanced exception resolving for different exception handler methods with same signature [SPR-14858]","**[Terence Mill](https://jira.spring.io/secure/ViewProfile.jspa?name=cforce)** opened **[SPR-14858](https://jira.spring.io/browse/SPR-14858?redirect=false)** and commented  **Current state** Currently ExceptionHandlerMethodResolver does not allow to have  more than one method with same parameter signature. If i use a method annotated with many exceptions that all shall lead to the same http status code that's a blocker. I assume that finding the correct method for the exception issuance to handle is done by simply finding a method with the signature of this type. I i try to have more then one method with the same param singature i get this exception:  ```java Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.servlet.HandlerExceptionResolver]: Factory method 'handlerExceptionResolver' threw exception; nested exception is java.lang.IllegalStateException: Ambiguous @ExceptionHandler method mapped for [class org.springframework.dao.DataIntegrityViolationException]: {public void com.fug.youcast.tools.exception.ExceptionHandlerAdvice.handleBadRequestException(javax.servlet.http.HttpServletRequest,java.lang.Exception), public void com.fug.youcast.tools.exception.ExceptionHandlerAdvice.handleConflictException(javax.servlet.http.HttpServletRequest,java.lang.Exception)} 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.2.8.RELEASE.jar:4.2.8.RELEASE] 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ~[spring-beans-4.2.8.RELEASE.jar:4.2.8.RELEASE] 	... 23 common frames omitted Caused by: java.lang.IllegalStateException: Ambiguous @ExceptionHandler method mapped for [class org.springframework.dao.DataIntegrityViolationException]: {public void com.fug.youcast.tools.exception.ExceptionHandlerAdvice.handleBadRequestException(javax.servlet.http.HttpServletRequest,java.lang.Exception), public void com.fug.youcast.tools.exception.ExceptionHandlerAdvice.handleConflictException(javax.servlet.http.HttpServletRequest,java.lang.Exception)} 	at org.springframework.web.method.annotation.ExceptionHandlerMethodResolver.addExceptionMapping(ExceptionHandlerMethodResolver.java:108) ~[spring-web-4.2.8.RELEASE.jar:4.2.8.RELEASE] 	at org.springframework.web.method.annotation.ExceptionHandlerMethodResolver.(ExceptionHandlerMethodResolver.java:75) ~[spring-web-4.2.8.RELEASE.jar:4.2.8.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.initExceptionHandlerAdviceCache(ExceptionHandlerExceptionResolver.java:264) ~[spring-webmvc-4.2.8.RELEASE.jar:4.2.8.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.afterPropertiesSet(ExceptionHandlerExceptionResolver.java:240) ~[spring-webmvc-4.2.8.RELEASE.jar:4.2.8.RELEASE] 	at org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport.addDefaultHandlerExceptionResolvers(WebMvcConfigurationSupport.java:833) ~[spring-webmvc-4.2.8.RELEASE.jar:4.2.8.RELEASE] 	at org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport.handlerExceptionResolver(WebMvcConfigurationSupport.java:791) ~[spring-webmvc-4.2.8.RELEASE.jar:4.2.8.RELEASE] 	at org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration$$EnhancerBySpringCGLIB$$50fccde1.CGLIB$handlerExceptionResolver$37() ~[spring-boot-autoconfigure-1.3.8.RELEASE.jar:1.3.8.RELEASE] 	at org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration$$EnhancerBySpringCGLIB$$50fccde1$$FastClassBySpringCGLIB$$73b553ba.invoke() ~[spring-boot-autoconfigure-1.3.8.RELEASE.jar:1.3.8.RELEASE] 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.2.8.RELEASE.jar:4.2.8.RELEASE] 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:356) ~[spring-context-4.2.8.RELEASE.jar:4.2.8.RELEASE] 	at org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration$$EnhancerBySpringCGLIB$$50fccde1.handlerExceptionResolver() ~[spring-boot-autoconfigure-1.3.8.RELEASE.jar:1.3.8.RELEASE] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_11] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_11] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_11] 	at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0_11] 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.2.8.RELEASE.jar:4.2.8.RELEASE] 	... 24 common frames omitted ```  In meas of clean code and fast code writing its complety none sense to create a method per exception type if all of them should be handled in the same way.  **Proposal** 1. Check on finding the correct hanlder method of an exception isnatnce by checking if its an instance of its type defined at the `@ExceptionHandler`(value = {Ex1.class,Ex2.class}). 2. Allow a fallback for all excetions not being handled by the ""know types"", If i define a default handler which has a type anotation that is a parent of the its child having an extr handler also it must be sage guarded that the common handler will be the last one being evaluataed  **Example (currently not possible)**  ```java @ControllerAdvice @Slf4j public class ExceptionHandlerAdvice {  	@Autowired 	private ApplicationContext applicationContext;  	@ResponseStatus(value = HttpStatus.BAD_REQUEST, reason = ""validation on request argument failed"") 	@ExceptionHandler(value = { DataIntegrityViolationException.class, MethodArgumentNotValidException.class, 			DataIntegrityViolationException.class, ConstraintViolationException.class, IllegalArgumentException.class, 			HttpMessageNotReadableException.class, JsonMappingException.class, EOFException.class, InvalidEntity.class, 			JsonParseException.class, EventException.class, UnrecognizedPropertyException.class }) 	public void handleBadRequestException(HttpServletRequest request, Exception e) { 		log.error(""validation on request argument failed"", e); 	}  	@ResponseStatus(value = HttpStatus.UNAUTHORIZED, reason = ""Request not authorized"") 	@ExceptionHandler(value = { InvalidSignatureException.class }) 	public void handleUnauhthorizedException(HttpServletRequest request, Exception e) { 		log.error(""Request not authorized "", e); 	}  	@ResponseStatus(value = HttpStatus.FORBIDDEN, reason = ""This operation is not allowed or authorized"") 	@ExceptionHandler(value = { ForbiddenOperationException.class }) 	public void handleForbiddenException(HttpServletRequest request, Exception e) { 		log.error(""This operation is not allowed or authorized "", e); 	}  	@ResponseStatus(value = HttpStatus.CONFLICT, reason = ""The dataset, tried to persist, has been changed by another transaction. Object was in stale state"") 	@ExceptionHandler(value = { StaleObjectStateException.class, OptimisticLockException.class, 			LockAcquisitionException.class, RessourceAlreadyExistsException.class, 			DataIntegrityViolationException.class }) 	public void handleConflictException(HttpServletRequest request, Exception e) { 		log.error(""This operation is not allowed or authorized "", e); 	}  	@ResponseStatus(value = HttpStatus.NOT_FOUND, reason = ""Error in handling request, entity not found"") 	@ExceptionHandler(value = { EmptyResultDataAccessException.class, NotFoundException.class, 			EntityNotFoundException.class, com.fug.youcast.tools.exception.EntityNotFoundException.class }) 	public void handleNotFoundException(HttpServletRequest request, Exception e) { 		log.error(""Error in handling request, entity not found"", e); 	}  	@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR, reason = ""Unknow error state of server"") 	@ExceptionHandler(value = { PersistenceException.class, InvalidQueryResultException.class, 			CorruptDataServerError.class, TransientPropertyValueException.class, UnmappedException.class }) 	public void handleInternalServerErrorException(HttpServletRequest request, Exception e) { 		log.error(""Unknow error state of server"", e); 	}  	@ExceptionHandler(value = { Exception.class }) 	public void defaultErrorHandler(HttpServletRequest request, Exception e) throws Exception { 		// If the exception is annotated with @ResponseStatus rethrow it and let 		// the framework handle it - 		// AnnotationUtils is a Spring Framework utility class. 		if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) 			throw e;  		log.error(""Exception mapping failure"" + e.getClass().getName() + "", message: "" + e.getMessage()); 		throw new UnmappedException( 				""Exception mapping failure"" + e.getClass().getName() + "", message: "" + e.getMessage()); 	} ```    --- No further details from [SPR-14858](https://jira.spring.io/browse/SPR-14858?redirect=false)","closed","status: invalid,","spring-projects-issues","2016-10-28T08:35:38Z","2019-01-12T05:21:42Z"
"","19095","mvc Parameter annotations are not inherited [SPR-14526]","**[Terence Mill](https://jira.spring.io/secure/ViewProfile.jspa?name=cforce)** opened **[SPR-14526](https://jira.spring.io/browse/SPR-14526?redirect=false)** and commented  ```java  @RequestMapping(method = RequestMethod.GET, value = ""/{userId}"", produces = ""application/json"", consumes = ""application/json"") public IUser getUserById(@PathVariable(""userId"") Long userId); ```  Calling `@Get` on `PROT`://`DOMAIN`/users/1 -> userId is NULL :(  ```java @RequestMapping(""/users"") public interface IUserEndpoint {..}  ```  ```java @RestController public class UserEndpoint extends implements IUserEndpoint {..} ```  (!) It only works if i repeat `@PathVariable` in my implementing `@RestController`  ```java @RestController public class UserEndpoint extends implements IUserEndpoint { public IUser getUserById(@PathVariable(""userId"") Long userId); ```  Repeating the REST contract is an ugly workaround  ---  **Affects:** 4.2.6  **Issue Links:** - #15682 Enable REST controller method parameter annotations on an interface (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2016-07-29T15:22:13Z","2019-01-12T16:45:33Z"
"","18970","Spring 4.2.6 autowiring generics problem: org.springframework.beans.factory.BeanCreationException: Could not autowire field [SPR-14398]","**[Ted Kin](https://jira.spring.io/secure/ViewProfile.jspa?name=tedkin)** opened **[SPR-14398](https://jira.spring.io/browse/SPR-14398?redirect=false)** and commented  **Problem background**  I am migrating from Spring 3 to Spring 4 and everything worked fine on Spring 3 so something must have been changed in Spring 4 in the autowiring interfaces with generics.. I am attaching simple sample application reproducing the problem.  **The exception**  > Caused by: org.springframework.beans.factory.BeanCreationException: > Error creating bean with name 'firstService': Injection of autowired > dependencies failed; nested exception is > org.springframework.beans.factory.BeanCreationException:  Could not > autowire field: private my.package.SecondService > my.package.FirstServiceImpl.secondService; nested exception is > org.springframework.beans.factory.NoSuchBeanDefinitionException:  No > qualifying bean of type [my.package.SecondService] found for > dependency: expected at least 1 bean which qualifies as autowire > candidate for this dependency. Dependency annotations: > {`@org`.springframework.beans.factory.annotation.Autowired(required=true), > `@org`.springframework.beans.factory.annotation.Qualifier(value=secondService)} > at > org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334) > at > org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214) > at > org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) > at > org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) > at > org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) > at > org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) > at > org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) > at > org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) > at > org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772) > at > org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839) > at > org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538) > at > org.apache.cxf.transport.servlet.CXFServlet.createSpringContext(CXFServlet.java:151) > at > org.apache.cxf.transport.servlet.CXFServlet.loadBus(CXFServlet.java:74) > at > org.apache.cxf.transport.servlet.CXFNonSpringServlet.init(CXFNonSpringServlet.java:77)  **Classes**  ``` @Component(""firstService"")     public class FirstServiceImpl extends BaseService implements FirstService {         @Autowired         @Qualifier(""secondService"")         private SecondService secondService;      }      public interface SecondService> {      }       @Component(""secondService"")     public class SecondServiceImpl extends BaseService implements SecondService> {      }       public class Shoes implements PayableThingWithDiscount{      }      public interface PayableThingWithDiscount extends PayableThing{      }      public class ShoesPayableThingForm implements PayableThingForm{      }      public interface PayableThingForm {      }      public interface PayableThing {     } ```  **After Spring debugging...**  During autowiring Spring 4.2.6 Class ResolvableType returns false from method where it seems it should return true (I think so.. because SecondServiceImpl is not autowired due to this check)  ``` private boolean isAssignableFrom(ResolvableType other, Map matchedBefore) {}} ```  here:  ``` if (exactMatch ? !ourResolved.equals(otherResolved) : !ClassUtils.isAssignable(ourResolved, otherResolved)) {             return false;         } ```  with this parameters catched on debug:  > this = {ResolvableType@23689} ""my.package.Shoes"" > other = {ResolvableType@23691} ""my.package.PayableThing"" > matchedBefore =  {IdentityHashMap@23692}  size = 1 > ourBounds = null > typeBounds = null > exactMatch = true > checkGenerics = true > ourResolved = {Class@23346} ""class my.package.Shoes"" > otherResolved = {Class@23544} ""interface my.package.PayableThing""}}  **To reproduce that error**  In case u would be so kind to reproduce this error, it is enough to run this junit:  ``` @Configuration @ComponentScan(value=""my.package"") public class MyApplicationTest {      private AnnotationConfigApplicationContext context = null;       @Before     public void setUp() throws Exception {         context = new AnnotationConfigApplicationContext(MyApplicationTest.class);     }      @After     public void tearDown() throws Exception {         context.close();     }      @Test     public void test() {          //FirstService firstService = context.getBean(FirstService.class);     } ```    ---  **Affects:** 4.2.6  **Attachments:** - [spring-dependency-injection.zip](https://jira.spring.io/secure/attachment/23429/spring-dependency-injection.zip) (_26.14 kB_)  3 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-06-24T22:13:09Z","2019-01-12T00:13:40Z"
"","19181","Introduce support for disabling JUnit Jupiter tests with SpEL expressions [SPR-14614]","**[Tadaya Tsuyukubo](https://jira.spring.io/secure/ViewProfile.jspa?name=tadaya)** opened **[SPR-14614](https://jira.spring.io/browse/SPR-14614?redirect=false)** and commented  #### Status Quo  The JUnit Jupiter API in JUnit 5 currently provides `@Disabled` to disable tests; however, disabling of tests via this annotation is determined at compile time. Thus it's not flexible.  Another option is to use `Assumptions` within test methods, but it may not so intuitive since the logic resides in the method. Furthermore, the use of assumptions is not very reusable.  #### Proposal  For JUnit Jupiter and the Spring TestContext Framework, using SpEL expressions would provide a dynamic means for disabling tests.  Suggested API:  ```java @DisabledIf(""SpEL expression here"") ```  #### Related Resources  - [JUnit5 issue](https://github.com/junit-team/junit5/issues/219)  ---  **Issue Links:** - #19215 Support `@EnabledIf` and `@DisabledIf` without loading ApplicationContext (_**""is depended on by""**_) - #19210 Introduce support for enabling JUnit Jupiter tests with SpEL expressions","closed","type: enhancement,","spring-projects-issues","2016-08-23T08:57:27Z","2019-01-13T05:22:44Z"
"","19602","Introduce a LocaleContextResolver abstraction in WebFlux [SPR-15036]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15036](https://jira.spring.io/browse/SPR-15036?redirect=false)** and commented  Currently in Spring Web Reactive, the locale is retrieved from the `Accept-Language` headers. It would be nice to create a `LocaleResolver` abstraction with at least 2 implementations: - One using the `Accept-Language` header - One setting a fixed configured locale  ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1458  **Issue Links:** - #20262 Default Locale not set on Spring Webflux","closed","type: enhancement,","spring-projects-issues","2016-12-20T20:18:35Z","2019-01-11T15:17:46Z"
"","19597","Provide a way to specify hints in the functional web API [SPR-15030]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15030](https://jira.spring.io/browse/SPR-15030?redirect=false)** and commented  Something like `ServerResponse.BodyBuilder#hint(String key, Object value)`. It would be very useful to use Jackson `JsonView` with the functional web API.  ---  **Issue Links:** - #19670 Provide a way to enable streaming mode via annotations (and eventually app config)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fbf88d19da1a9a80c8f0e4d5854723a451910cf1","closed","type: enhancement,","spring-projects-issues","2016-12-19T09:27:37Z","2019-01-11T15:17:37Z"
"","19591","Add HttpHeaders getter and setter for Accept-Language [SPR-15024]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15024](https://jira.spring.io/browse/SPR-15024?redirect=false)** and commented  ---  **Issue Links:** - #19105 Add HttpHeaders getter and setter for Content-Language - #20999 MockHttpServletRequest.addHeader fails for invalid LanguageRange in Accept-Language - #21104 Overloaded convenience setters on HttpHeaders  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/712a63205c8b7c80352b7fbd2b73c142aec31fc1, https://github.com/spring-projects/spring-framework/commit/9376748c9c17902f650709af4fc1c572ce63f04a, https://github.com/spring-projects/spring-framework/commit/fa56361ad242723e172630e5a6706a07a191c975, https://github.com/spring-projects/spring-framework/commit/bd8af55bc7448d17b84fa4dfbfb09f4a7cbf6552, https://github.com/spring-projects/spring-framework/commit/9764d5743384fea77e0894090b6e56418ae82457","closed","type: enhancement,","spring-projects-issues","2016-12-15T16:13:57Z","2019-01-11T15:18:37Z"
"","19580","JsonObjectDecoder throws ArrayIndexOutOfBoundsException: -1 with valid input [SPR-15013]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15013](https://jira.spring.io/browse/SPR-15013?redirect=false)** and commented  `JsonObjectDecoder` fails with `ArrayIndexOutOfBoundsException: -1` error with this test case:  ```java JsonObjectDecoder decoder = new JsonObjectDecoder();  		Flux source = 				Flux.just(stringBuffer(""[""), stringBuffer(""{\""id\"":1,\""name\"":\""Robert\""}""), stringBuffer("",""), stringBuffer(""{\""id\"":2,\""name\"":\""Raide\""}""), stringBuffer("",""), stringBuffer(""{\""id\"":3,\""name\"":\""Ford\""}""), stringBuffer(""]"")); 		Flux output = 				decoder.decode(source, null, null, Collections.emptyMap()).map(JsonObjectDecoderTests::toString); 		StepVerifier.create(output) 				.expectNext(""{\""id\"":1,\""name\"":\""Robert\""}"") 				.expectNext(""{\""id\"":2,\""name\"":\""Raide\""}"") 				.expectNext(""{\""id\"":3,\""name\"":\""Ford\""}"") 				.expectComplete() 				.verify(); ```  ---  **Affects:** 5.0 M3  **Issue Links:** - #19460 WebClient ArrayIndexOutOfBoundsException (_**""is duplicated by""**_) - #19425 JsonObjectDecoder fails to decode some splitted source  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4021d239ab15dfd119d248c9e830ed2f2f935985","closed","type: bug,","spring-projects-issues","2016-12-14T12:58:22Z","2019-01-11T15:20:08Z"
"","19558","Add an integration test to validate Reactor Netty automatic flushing [SPR-14992]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14992](https://jira.spring.io/browse/SPR-14992?redirect=false)** and commented  Currently, if no explicit flush is performed, Reactor Netty flush the data only when the input stream is complete, which may cause some issues with big streams. When [this related issue](https://github.com/reactor/reactor-netty/issues/11) will be fixed, we should add an integration test in `FlushingIntegrationTests` to check it behaves as expected.  ---  This issue is a sub-task of #19510  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dfcd5b9ed9f429439980b5ffde17b2ee08593670","closed","type: task,","spring-projects-issues","2016-12-07T08:28:21Z","2019-01-11T19:13:15Z"
"","19557","Add an automatic flushing mechanism for RxNetty [SPR-14991]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14991](https://jira.spring.io/browse/SPR-14991?redirect=false)** and commented  As discussed on [this issue](https://github.com/ReactiveX/RxNetty/issues/571), RxNetty does not provide any automatic flushing mechanism and block when the send buffer is full. Our RxNetty integration should implement a flush selector based mechanism to flush the data automatically (for example after sending 8K of data).  ---  This issue is a sub-task of #19510  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/24b3614063d5f3318a0242ce62e1f2203e8ead12","closed","type: task,","spring-projects-issues","2016-12-07T08:25:10Z","2019-01-11T19:13:12Z"
"","19547","Progressive HTML rendering support [SPR-14981]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14981](https://jira.spring.io/browse/SPR-14981?redirect=false)** and commented  We should provide a way to change flushing strategy without using `ServerHttpResponse#writeAndFlushWith(Publisher>)` low level method.  That could be via supporting `Publisher>` return values or introducing a new annotation that could allow to flush the data after each element (could make sense when you serialize POJOs).  ---  **Issue Links:** - #19670 Provide a way to enable streaming mode via annotations (and eventually app config)  3 votes, 8 watchers","open","type: enhancement,","spring-projects-issues","2016-12-05T12:59:05Z","2020-08-24T17:39:30Z"
"","19545","Make it easier to use WebFilter with Functional Web Framework [SPR-14979]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14979](https://jira.spring.io/browse/SPR-14979?redirect=false)** and commented  Currently it seems to me there is no obvious way to use `WebFilter` with the Functional Web Framework without doing a cast like in this [code sample](https://github.com/reactor/projectreactor.io/blob/spring-functional/src/main/java/io/projectreactor/Application.java#L35). It is worth to notice that we expose only a `HttpHandler` return type in `RouterFunctions.toHttpHandler()` while the type actually returned in the implementation is a `HttpWebHandlerAdapter` that implements both `HttpHandler` and `WebHandler`. It could be nice to be able to get a `WebHandler` in order to make it easier to deal with `WebFilter`.  Not sure what is the best way to do that: - Add a `RouterFunctions.toWebHandler()` method? - Return `HttpWebHandlerAdapter` in `RouterFunctions.toWebHandler()`? - Introduce a new interfaces that implements both `HttpHandler` and `WebHandler` to avoid exposing `HttpWebHandlerAdapter` with is an implementation detail?  This question of using `WebFilter` versus `HttpHandler` is maybe something worth to discuss with [Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop).   --- No further details from [SPR-14979](https://jira.spring.io/browse/SPR-14979?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-12-05T09:41:56Z","2016-12-30T13:33:15Z"
"","19521","Improve nested routes API [SPR-14954]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14954](https://jira.spring.io/browse/SPR-14954?redirect=false)** and commented  Nested routes API could perhaps be improved. Current syntax is :  ```java subroute(GET(""/level1/**""), route(GET(""/foo/**""), r -> ok().body(fromObject(""foo""))) 	.andRoute(GET(""/bar/**""), r -> ok().body(fromObject(""bar""))) 	.andRoute(GET(""/baz/**""), r -> ok().body(fromObject(""baz"")) ```  It could be nice to allow to specifying `subroute(prefix(""/level1"")` instead of `subroute(GET(""/level1/**"")` (routing can apply to any method + no need to specify `/**` for this use case).  Also the method name `subroute` does not seems to be accurate here, especially for specifying the root route. And it would be nice to be able to use a fluent API (`RouterFunction` instance method ?) to specify the sub routes, not just with static methods not easy to discover from an API POV.  ---  **Issue Links:** - #19112 HTTP request pattern matching refinements (_**""depends on""**_) - #19520 Provide shortcut methods for routing - #19631 Provide a Kotlin DSL for the functional Web API  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2016-11-25T16:35:14Z","2019-01-11T19:18:13Z"
"","19520","Provide shortcut methods for routing [SPR-14953]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14953](https://jira.spring.io/browse/SPR-14953?redirect=false)** and commented  Currently, we declare routes like that:  ```java route(GET(""/foo/**""), r -> ok().body(fromObject(""foo""))) 		.andRoute(GET(""/bar/**""), r -> ok().body(fromObject(""bar""))) 		.andRoute(POST(""/baz/**""), r -> ok().body(fromObject(""baz""))) ```  This is a very common use case that deserves IMO syntactic sugar to make routes more readable and maintainable. Something like:  ```java routeGet(""/foo/**"", r -> ok().body(fromObject(""foo"")) 		.andRouteGet(""/bar/**"", r -> ok().body(fromObject(""bar"")) 		.andRoutePost(""/baz/**"", r -> ok().body(fromObject(""baz"")) ```  That will still allow to use the current more powerful/evolutive API while providing some nice shortcuts for this kind of code that application developers will have to write so many times.  ---  **Issue Links:** - #19521 Improve nested routes API  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2016-11-25T16:11:18Z","2019-01-11T19:18:10Z"
"","19518","Support Kotlin nullable information for @Autowired and @Inject [SPR-14951]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14951](https://jira.spring.io/browse/SPR-14951?redirect=false)** and commented  As implemented form Spring MVC/Spring Web Reactive in #18737, we could use Kotlin nullable information to know if a bean is required or not.  ---  **Issue Links:** - #18737 Support Kotlin nullable information in Spring MVC parameters - #19595 Support `@Nullable` annotations as indicators for optional injection points  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/39d2769bd0cee82e15104b7d10201a324e81656f","closed","type: enhancement,","spring-projects-issues","2016-11-24T17:40:55Z","2019-01-13T05:18:45Z"
"","19485","Support getting/writing the body as Flux in WebClient [SPR-14918]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14918](https://jira.spring.io/browse/SPR-14918?redirect=false)** and commented  On server side, it is possible to perform low level operations on the body thanks to `ServerHttpRequest/Response`. Should we provide similar capability to the client? That could be done by exposing access to the underlying `ClientHttpRequest/Response` or by adding a `DataBufferWriter/Reader` for example.  Note that the initial need for this is to turn a `Flux` into an `InputStream` in order to be able to unzip it, so providing such facility in Reactor Core or Spring Framework 5 could be also a valid alternative   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/735e288d465ca36ae1eeccbd8a4d044d7bd3ad50","closed","type: enhancement,","spring-projects-issues","2016-11-17T12:47:46Z","2016-12-30T13:33:14Z"
"","19481","Add a redirect() method to ServerResponse [SPR-14914]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14914](https://jira.spring.io/browse/SPR-14914?redirect=false)** and commented  That a shortcut for `status(FOUND).header(LOCATION, url)`, see [this project](https://github.com/sdeleuze/projectreactor.io/blob/spring-based-website/src/main/java/io/projectreactor/Application.java#L33) code sample for a use case.  ---  **Issue Links:** - #19103 Reactive HTTP response based RedirectView","closed","type: enhancement,","spring-projects-issues","2016-11-16T15:38:08Z","2019-01-11T19:19:52Z"
"","19480","Allow serving static files from a directory to the functional web framework [SPR-14913]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14913](https://jira.spring.io/browse/SPR-14913?redirect=false)** and commented  As shown in [Project Reactor website project](https://github.com/sdeleuze/projectreactor.io/blob/spring-based-website/src/main/java/io/projectreactor/Application.java), its is currently possible to serve static resources with `BodyInserters.fromResource()` but it is verbose and not designed to handle nested directories easily.  Like in Spring Web Reactive `ResourceHandlerRegistry`, it would be very useful to be able to serve the all the static files from a specified directory (filesystem or the classpath).   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/136b33bc4a7ae4bf43730e9b17f35c30be30058e","closed","type: enhancement,","spring-projects-issues","2016-11-16T15:35:47Z","2016-12-30T13:33:14Z"
"","19471","Automatically set the right content type in BodyInserters#fromResource() [SPR-14905]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14905](https://jira.spring.io/browse/SPR-14905?redirect=false)** and commented  I think it could be useful to set the right content type using `PathExtensionContentTypeResolver` in `BodyInserters#fromResource()`.  ---  **Issue Links:** - #19474 MediaTypeFactory should come with its own complete mime.types file","closed","type: enhancement,","spring-projects-issues","2016-11-14T12:56:25Z","2019-01-11T19:20:37Z"
"","19470","Make andRoute() a drop-in replacement for and(route()) [SPR-14904]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14904](https://jira.spring.io/browse/SPR-14904?redirect=false)** and commented  Maybe I missed something, but this code compiles:  ```java private static RouterFunction routes() { 		return route(GET(""docs/api/**""), request -> 				status(FOUND).header(LOCATION, request.path().replace(""/docs/"", ""/old/"")).build() 			).and(route(GET(""docs/reference/**""), request -> 				status(FOUND).header(LOCATION, request.path().replace(""/docs/"", ""/old/"")).build() 			).and(route(GET(""docs/raw/**""), request -> 				status(FOUND).header(LOCATION, request.path().replace(""/docs/"", ""/old/"")).build() 			).and(route(GET(""core/docs/reference/**""), request -> 				status(FOUND).header(LOCATION, ""https://github.com/reactor/reactor-core/blob/master/README.md"").build() 			) 		))); 	} ```  While this one fails with this error message: `bad return type in lambda expression: can't convert ServerResponse to ServerResponse`.  ```java private static RouterFunction routes() { 		return route(GET(""docs/api/**""), request -> 				status(FOUND).header(LOCATION, request.path().replace(""/docs/"", ""/old/"")).build() 			).andRoute(GET(""docs/reference/**""), request -> 				status(FOUND).header(LOCATION, request.path().replace(""/docs/"", ""/old/"")).build() 			).andRoute(GET(""docs/raw/**""), request -> 				status(FOUND).header(LOCATION, request.path().replace(""/docs/"", ""/old/"")).build() 			).andRoute(GET(""core/docs/reference/**""), request -> 				status(FOUND).header(LOCATION, ""https://github.com/reactor/reactor-core/blob/master/README.md"").build() 			); 	} ```    ---  **Affects:** 5.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6de062d198a0a00861a7c89c304f53dd32b76033","closed","type: bug,","spring-projects-issues","2016-11-14T11:10:21Z","2016-12-30T13:33:16Z"
"","19425","JsonObjectDecoder fails to decode some splitted source [SPR-14859]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14859](https://jira.spring.io/browse/SPR-14859?redirect=false)** and commented  Decoding  works when the source is composed on one chunk, but not always with multiple chunks. See https://github.com/sdeleuze/spring-framework/commit/decode-splitted-json that demonstrates the issue.  ---  **Affects:** 5.0 M2  **Issue Links:** - #19580 JsonObjectDecoder throws ArrayIndexOutOfBoundsException: -1 with valid input  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b1030eba3f6f0601413e1652f9b2151d21adc245","closed","type: bug,","spring-projects-issues","2016-10-28T09:23:59Z","2019-01-11T17:26:48Z"
"","19418","Improve WebClient error handling [SPR-14852]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14852](https://jira.spring.io/browse/SPR-14852?redirect=false)** and commented  Unlike `RestTemplate.exchange`, `WebClient.exchange` does not emit exceptions for HTTP response with 4xx or 5xx status code. This is due to the fact that such a particular status code is not necessarily exceptional for all use cases.  However, for a response body retrieval, these status codes should result in an exception, as the response body typically has a different format, and as such deserialising the body will not work.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7b469f9c6248fcaa522ea2492317dfaf115836c2","closed","type: enhancement,","spring-projects-issues","2016-10-26T15:26:06Z","2016-11-08T13:11:19Z"
"","19409","Add support for RxJava 2 Maybe type [SPR-14843]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14843](https://jira.spring.io/browse/SPR-14843?redirect=false)** and commented   ---  **Reference URL:** https://github.com/ReactiveX/RxJava/wiki/What's-different-in-2.0  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2075932780b9801c22222ddd2016ed63f360c894","closed","type: enhancement,","spring-projects-issues","2016-10-25T14:37:01Z","2018-12-14T22:07:40Z"
"","19390","Modify ReactiveAdapterRegistry to use official RxJava to RS adapter [SPR-14824]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14824](https://jira.spring.io/browse/SPR-14824?redirect=false)** and commented  Recently, RxJava API has changed between minor versions. As a consequence, as of Reactor Core 3.0.3, Reactor will not bundle RxJava adapter with Reactor Core but as a separate Reactor Adapter artifact.  As discussed recently, one way to handle these RxJava API changes better on Spring Framework side is to depend directly on the [official RxJava to Reactive Streams adapter](https://github.com/ReactiveX/RxJavaReactiveStreams) instead on Reactor Core or Adapter in order to reduce the moving parts and directly rely on the adapter maintained by RxJava maintainers that is likely to follow the various API variants of RxJava.  ---  **Issue Links:** - #19308 Review RxJava API surface in ReactiveAdapterRegistry  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/921bf5fb7076a6836cac1fa7cf421d2d76827899","closed","in: core,","spring-projects-issues","2016-10-19T15:33:37Z","2019-01-11T17:29:39Z"
"","19360","Fix HttpRequest#getURI() with Netty based engines [SPR-14794]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14794](https://jira.spring.io/browse/SPR-14794?redirect=false)** and commented  Currently `HttpRequest#getURI()` only exposes the request path without the scheme, host and port defined with Netty based engines (Reactor Netty, RxNetty) while other engines provide these informations correctly (Jetty, Tomcat, Undertow).  Reactor may allow to get hostname and port via `NettyChannel#remoteAddress()`. RxNetty does not expose Netty channel informations so we may use server host and port informations. In both cases, we don't have the scheme information so we maybe have to make sure that we don't rely on that in a mandatory way.  ---  **Issue Links:** - #19113 Reactive HTTP request CORS Support (_**""is depended on by""**_) - #19706 `@RequestParam` injects a raw undecoded string for reactive HTTP requests  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0cc330e8fc8b29790af7c220e828cfe393094e6b","closed","type: bug,","spring-projects-issues","2016-10-10T15:20:30Z","2019-01-13T05:19:31Z"
"","19257","Provide annotated controller hints to codecs and JsonView support [SPR-14693]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14693](https://jira.spring.io/browse/SPR-14693?redirect=false)** and commented  Following #19125, we need to build a mechanism that provides hints to the codecs based on controller annotation like `@JsonView` annotations, while keeping in mind that we will need to support provide hints for other use cases (client, new server functional programming model). See [this comment](https://jira.spring.io/browse/SPR-14557?focusedCommentId=131941&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-131941) for more details.  ---  **Issue Links:** - #19125 Refactor how hints (like JsonView) are passed to codecs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6cda08e94b9ba72da2334733443aefd2462c8755, https://github.com/spring-projects/spring-framework/commit/e74c59bf301ed18eb52fe79df03f1c3cef230a7e","closed","type: enhancement,","spring-projects-issues","2016-09-12T09:23:14Z","2019-01-11T18:19:41Z"
"","19125","Refactor how hints (like JsonView) are passed to codecs [SPR-14557]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14557](https://jira.spring.io/browse/SPR-14557?redirect=false)** and commented  We need to define and standardize how context informations (like annotations for `@JsonView`) is passed to the codecs. In 5.0 M1, we temporarily use `ResolvableType#getSource()` but that does not work for wrapped return values like `Mono` since the `ResolvableType` is not created from the `MethodParameter` + this is hardcoded and specific.  The original idea was to deal with that in a more flexible and maintainable way by using the `Object... hints` parameter of `Encoder` and `Decoder`. If we chose to go that way: - `HttpMessageWriter` and `HttpMessageReader` API will have to be updated to pass this `Object... hints` parameter - We should specify what should be in the `Object` parameter, or even perhaps use a more specific type like `CodecContext ...` - We should implement a way to provide this context in a configurable way, maybe with a mechanism similar to `RequestBodyAdvice` / `ResponseBodyAdvice`.  The mechanism should allow to pass additional informations needed for serializing / deserializing without wrapping the information like in Spring MVC `MappingJacksonValue` to provide a more powerful, flexible and maintainable mechanism.  I plan to provide a PR and will request feedbacks and reviews based on that.  ---  **Affects:** 5.0 M1  **Issue Links:** - #19228 Add ResourceRegionHttpMessageWriter (_**""is depended on by""**_) - #19257 Provide annotated controller hints to codecs and JsonView support","closed","type: task,","spring-projects-issues","2016-08-03T00:19:26Z","2019-01-11T18:06:06Z"
"","19107","Reactive WebClient SSE extractors [SPR-14539]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14539](https://jira.spring.io/browse/SPR-14539?redirect=false)** and commented   ---  **Affects:** 5.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7b183048b8179ed4cc73abb0cd6b7ac449e482c3, https://github.com/spring-projects/spring-framework/commit/69b69442bcbd1b7da6f360e33c7ccc7785e43729  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2016-07-29T16:49:58Z","2017-01-04T16:56:52Z"
"","22189","Improve error handling in reactive SSE support when the remote channel is closed [SPR-14538]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14538](https://jira.spring.io/browse/SPR-14538?redirect=false)** and commented  A lot of errors appear in the logs with an SSE connection when the browser is closed. See [example output](https://gist.github.com/sdeleuze/3953c2501bf08a0c0fd39340aa5b6eaf). This is based on https://github.com/spring-projects/spring-reactive/issues/131 where there are a few extra comments.  ---  **Affects:** 5.0 M1  **Issue Links:** - #21229 Reduce log verbosity on server-side after client unsubscribes from SSE stream  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/80ff5ae9c513372db37eb0dbcb19048adb09b21f","closed","type: enhancement,","spring-projects-issues","2016-07-29T16:45:59Z","2019-01-11T18:08:02Z"
"","19587","ForwardedHeaderFilter should support sendRedirect [SPR-15020]","**[Swagata Roy](https://jira.spring.io/secure/ViewProfile.jspa?name=sroy)** opened **[SPR-15020](https://jira.spring.io/browse/SPR-15020?redirect=false)** and commented  By default, Spring Boot provides an embedded Apache Tomcat build. Unfortunately, Tomcat does not support **X-Forwarded-Host**.  Here is the redirect code -  ``` @RequestMapping(""/testRedirect"")   public String redirect() {       return ""redirect:/home"";   } ```  These are the results -  ```   curl -i -H ""X-Forwarded-Proto:https"" -H ""X-Forwarded-Host:hare2"" http://localhost:8080/testRedirect HTTP/1.1 302 Location: http://localhost:8080/home Content-Language: en-US Content-Length: 0 Date: Wed, 14 Dec 2016 16:25:36 GMT ```  This is what I am expecting -  ``` curl -i -H ""X-Forwarded-Proto:https"" -H ""X-Forwarded-Host:hare2"" http://localhost:8080/testRedirect HTTP/1.1 302 Location: https://hare2/home Content-Language: en-US Content-Length: 0 Date: Wed, 14 Dec 2016 17:53:21 GMT ```  ---  **Affects:** 4.3.4  **Attachments:** - [ForwardedHeaderFilter.java](https://jira.spring.io/secure/attachment/23655/ForwardedHeaderFilter.java) (_7.27 kB_)  **Issue Links:** - #20273 ForwardedHeaderFilter should expose option for not converting relative redirects to absolute ones  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1270  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-12-14T23:12:10Z","2019-01-13T20:31:16Z"
"","19352","wrong scheduling targets on using cron pattern */n [SPR-14786]","**[Sven Krause](https://jira.spring.io/secure/ViewProfile.jspa?name=svn.krs)** opened **[SPR-14786](https://jira.spring.io/browse/SPR-14786?redirect=false)** and commented  When using a cron pattern for repetitive times like '0 0 */5 * * *' the CronTrigger / CronSequenceGenerator create the wrong time table, if the next time reaches new day.  ``` Date start = .... // Today 4:00 PM CronSequenceGenerator g = new CronSequenceGenerator(""0 0 */5 * * *"") Date next = g.next(start); Date repeat = g.next(next); ```  builds - next := today 4:00 PM --> correct - repeat := tomorrow 0:00 AM -> incorrect  The behaviour is independent on the use time zone or time series sequence start. In my understanding ist the issue based on the precalculated time table at generators construction point. The time table for this pattern is dependent on the next(Date) method invocation.   ---  **Affects:** 4.2.5  **Attachments:** - [CronTest.java](https://jira.spring.io/secure/attachment/23582/CronTest.java) (_2.28 kB_)","closed","status: bulk-closed,","spring-projects-issues","2016-10-07T12:45:15Z","2019-01-12T02:21:03Z"
"","19060","Support for webDAV http method REPORT in ShallowEtagHeaderFilter [SPR-14491]","**[Sunil Ingle](https://jira.spring.io/secure/ViewProfile.jspa?name=ingles)** opened **[SPR-14491](https://jira.spring.io/browse/SPR-14491?redirect=false)** and commented  REPORT is a webDAV standard and can be used overcome limits of GET (url length) and POST (not cacheable)  This method can be used for reporting APIs which often have filtering params that you can not send via GET due to length limitation and via POST because it's not cacheable.   --- No further details from [SPR-14491](https://jira.spring.io/browse/SPR-14491?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-07-19T19:24:39Z","2019-01-11T16:19:55Z"
"","19605","Upgrade to Gradle 2.5 [SPR-15039]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15039](https://jira.spring.io/browse/SPR-15039?redirect=false)** and commented  Our CI infrastructure doesn't work anymore with Gradle 1.x so we need to upgrade the 3.2 branch to Gradle 2.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f85be8ebef8f35ae48dc3e1095b7146e0d066636","closed","type: task,","spring-projects-issues","2016-12-21T15:17:49Z","2016-12-21T18:50:27Z"
"","19524","Doc: HibernateJpaVendorAdapter's ""prepareConnection"" may interfere with Hibernate 5.1+ in a JTA environment [SPR-14957]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14957](https://jira.spring.io/browse/SPR-14957?redirect=false)** and commented  See https://github.com/spring-projects/spring-boot/issues/7455 (a sample is available).  The reporter experiences a difference of behaviour when `OpenEntityManagerInViewFilter` is enabled on a Spring MVC application using Weblogic and Hibernate 5.1 or 5.2. The same code works fine with 5.0  I am wondering if that's a regression in our Hibernate support or in Hibernate itself.  ---  **Affects:** 4.3.4  **Issue Links:** - #19116 Default connection release mode inconsistent with Hibernate 5.1.1 - #20710 Make JpaVendorAdapters JTA-aware (in particular for Hibernate 5.1/5.2)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2f80b8485aa3a1e3867d7cd81d30f93678a56825, https://github.com/spring-projects/spring-framework/commit/04af30daed44084dbbe8054854eb2b8ea9ff58f5","closed","type: task,","spring-projects-issues","2016-11-27T08:43:47Z","2019-01-11T19:16:27Z"
"","19501","PathMatchingResourcePatternResolver provides duplicate resources with relative URL [SPR-14934]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14934](https://jira.spring.io/browse/SPR-14934?redirect=false)** and commented  This is a regression introduced by #18260  `PathMatchingResourcePatternResolver#doFindAllClassPathResources` first gets the path returned by the `LaunchedUrlClassLoader` which will add the URLs of all nested jar  + the URL of `BOOT-INF-classes`, something like `URL [jar:file:/Users/snicoll/workspace/pivotal/spring-framework-issues/SPR-13685/target/SPR-13685-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/]`  Because we need to get all XML files from the root (path is the empty string) we also invoke `addAllClassLoaderJarRoots` which works recursively as follow:  * does not add anything with `LaunchedUrlClassLoader` * with `classLoader.getSystemClassLoader()` adds `URL [jar:file:/Users/snicoll/workspace/pivotal/spring-framework-issues/SPR-13685/target/SPR-13685-0.0.1-SNAPSHOT.jar!/]` * with its parent (`AppClassLoader`)  adds `URL [jar:file:SPR-13685-0.0.1-SNAPSHOT.jar!/]` via `addClassPathManifestEntries`. It also adds a bunch of entries from JDK jars * does not add anything with `ExtClassLoader`  So we have the following entries for the candidate location:  ``` jar:file:/Users/snicoll/workspace/pivotal/spring-framework-issues/SPR-13685/target/SPR-13685-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/ jar:file:/Users/snicoll/workspace/pivotal/spring-framework-issues/SPR-13685/target/SPR-13685-0.0.1-SNAPSHOT.jar!/ jar:file:SPR-13685-0.0.1-SNAPSHOT.jar!/ ```  So, for the same `a.xml` at the root of the classpath in `src/main/resources` we end up with the following candidates:  ``` jar:file:/Users/snicoll/workspace/pivotal/spring-framework-issues/SPR-13685/target/SPR-13685-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/a.xml jar:file:/Users/snicoll/workspace/pivotal/spring-framework-issues/SPR-13685/target/SPR-13685-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes/a.xml jar:file:SPR-13685-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes/a.xml ```  At this point I can only guess that each entry match each candidate in the list above (in that order).  it isn't obvious how the second one lead to a lookup in `BOOT-INF/classes` though but given that a `!` is missing in the second case, it's an indication it may come from that faulty URL.  A [repro project is available](https://github.com/spring-projects/spring-framework-issues/tree/ec15861593195a709e271aa80a974270e1e009bf/SPR-13685)  ---  **Affects:** 4.3 GA  **Issue Links:** - #18260 PathMatchingResourcePatternResolver does not consider manifest based classpaths - #19503 PathMatchingResourcePatternResolver finds duplicate resources for executable jars but not for executable wars","closed","in: core,","spring-projects-issues","2016-11-22T14:56:14Z","2019-01-11T19:19:34Z"
"","19414","LiveBeansView#unregister should not rely on ApplicationContext#getApplicationName [SPR-14848]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14848](https://jira.spring.io/browse/SPR-14848?redirect=false)** and commented  `LiveBeansView` assume that the order in which contexts are started will be reversed on shutdown. That way, it registers an MBean for the first context (usually the parent) and unregisters it on shutdown.  If the shutdown sequence changes for whatever reason (more precisely if the parent isn't shutdown last), then an attempt to shutdown an unknown MBean is made. Restarting the same context will lead to another error since we're trying again to register the MBean that wasn't removed.  Rather than relying on the order there, we should store the name of the MBean that was registered to effectively do it when all the contexts have been shutdown.  See also [#7179 in the Spring Boot tracker](https://github.com/spring-projects/spring-boot/issues/7179)   ---  **Affects:** 4.3.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1f3b8ff2f7f68ee7fdb4558d604cfcf872d32938, https://github.com/spring-projects/spring-framework/commit/1a1d17e13ad09c61c2bb23f43d366ee00b1e8bfe","closed","in: core,","spring-projects-issues","2016-10-26T10:56:55Z","2016-11-07T22:01:24Z"
"","19373","Better exception message when injecting Model with two constructors in a controller [SPR-14807]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14807](https://jira.spring.io/browse/SPR-14807?redirect=false)** and commented  Consider the following use case  ```java public class A {    public A(String one) { ... }    public A(String one, String two) { ... } } ```  Define `A` as a `Bean` and wrongly try to inject it in a controller  ```java @RequestMapping(""/foo"") public String foo(A a) { ... } ```  Leads to  ``` java.lang.NoSuchMethodException: com.example.A.()     at java.lang.Class.getConstructor0(Class.java:3082) ~[na:1.8.0_91]     at java.lang.Class.getDeclaredConstructor(Class.java:2178) ~[na:1.8.0_91]     at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:102) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.createAttribute(ModelAttributeMethodProcessor.java:142) ~[spring-web-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.createAttribute(ServletModelAttributeMethodProcessor.java:80) ~[spring-webmvc-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:102) ~[spring-web-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121) ~[spring-web-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues( ```  We can't inject a bean in a controller but the exception here does not help. If you know what you're doing, you new Spring MVC is going to try to instantiate your model class and couldn't find the constructor to use. An exception that phrases this would help debugging this particular use case.   ---  **Affects:** 4.3.2","closed","status: bulk-closed,","spring-projects-issues","2016-10-14T10:21:25Z","2019-01-12T00:12:14Z"
"","19290","Add SPI to customize the qualifiers to use for a particular bean [SPR-14725]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14725](https://jira.spring.io/browse/SPR-14725?redirect=false)** and commented  The container is currently looking at very specific places to figure out the qualifiers of a particular bean dependency:  * The bean factory method, if any (i.e. the `@Bean` method) * The target class (annotations at class level) * Additional checks on the bean definition itself (we should check if those are properly documented)  Certain bean definitions are created on the fly and do not have a ""bean factory method"". Yet, it would be very interesting to specify a places where qualifier information is to be found.  See also https://github.com/spring-projects/spring-boot/issues/6753   ---  **Affects:** 4.3.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b2cc2d1cae2a465965b5e3a94ae0452aecc920e, https://github.com/spring-projects/spring-framework/commit/0dce5701573347a6c9fd880a1035e20d6d2d7c30, https://github.com/spring-projects/spring-framework/commit/2b0bf9f04a62fafd9ce28da37dbeb227b82cf462","closed","type: enhancement,","spring-projects-issues","2016-09-16T06:56:45Z","2016-09-19T15:55:27Z"
"","19277","Add the ability to create an optional bean reference by name [SPR-14712]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14712](https://jira.spring.io/browse/SPR-14712?redirect=false)** and commented  See #16509  > The reason for our own scanning is that we need to find out whether we have to wire a custom repository implementation to the proxy or not. If we relied on the users declaring the implementation class as Spring bean, we can't be sure that bean definition is already available in the registry and thus we can't reliably decide whether to configure a runtime bean reference or not. > If the container provided means to create an optional bean reference by name, we could we could drop our own scanning.  ---  **Affects:** 5.0 M1  **Issue Links:** - #16509 Spring-specific index file for component candidate classes","closed","status: bulk-closed,","spring-projects-issues","2016-09-13T16:06:05Z","2019-01-12T02:24:50Z"
"","19276","Document candidates index mechanism [SPR-14711]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14711](https://jira.spring.io/browse/SPR-14711?redirect=false)** and commented  Document the new candidates index mechanism, in particular how to use it in components that currently rely on regular classpath scanning only.  ---  **Affects:** 5.0 M2  **Issue Links:** - #19275 Backport `@Indexed` to the 4.3.x line (_**""depends on""**_) - #16509 Spring-specific index file for component candidate classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f128feb1cc1f339a93bbd162a1074c73094143d6  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2016-09-13T16:02:05Z","2019-01-13T05:19:52Z"
"","19275","Backport @Indexed to the 4.3.x line [SPR-14710]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14710](https://jira.spring.io/browse/SPR-14710?redirect=false)** and commented  Spring portfolio projects should flag their annotations and/or interfaces of interest with `@Indexed` (see #16509). To facilitate the integration, this annotation should be available in the 4.x line so that it can be added right the way.  ---  **Issue Links:** - #19276 Document candidates index mechanism (_**""is depended on by""**_) - #16509 Spring-specific index file for component candidate classes  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2016-09-13T16:00:06Z","2019-01-11T17:13:46Z"
"","19219","Cache ASM metadata at the context level [SPR-14654]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14654](https://jira.spring.io/browse/SPR-14654?redirect=false)** and commented  While working on #16509 I noticed that caching several `ClassPathScanningCandidateComponentProvider` instances are instantiated when the application context is refreshed. With Spring Boot in particular, those instances are working on the same base package(s) with different filters.  In the end we scan the same `Resources`, load the same meta-data and figure out based on that if we have to include the component.  It would be much nicer if that information was cached for the duration of the refresh. Also, creating a _valid_ `ClassPathScanningCandidateComponentProvider` requires you to pass the `Environment` and the `ResourceLoader`. Both of those are available from `ApplicationContext`. Perhaps the latter could take care of providing a shared instance or something?  ---  **Affects:** 5.0 M1  **Issue Links:** - #16509 Spring-specific index file for component candidate classes - #19844 Allow for CachingMetadataReaderFactory cache size to be easily updated - #19248 ConfigurationClassParser does not use ApplicationContext's ResourceLoader for its MetadataReaderFactory - #19627 Backport streamlined ClassPathBeanDefinitionScanner setup  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7818c650ba3ad567cff2975b408509679d03e663","closed","type: enhancement,","spring-projects-issues","2016-09-01T12:30:05Z","2019-01-11T18:23:22Z"
"","19194","Consider adding ""qualifier"" to NoSuchBeanDefinitionException [SPR-14627]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14627](https://jira.spring.io/browse/SPR-14627?redirect=false)** and commented  I am working on a `FailureAnalyzer` for `NoSuchBeanDefinitionException`. When one tries to inject a bean with a qualifier and the qualifier doesn't match the `NoSuchBeanDefinitionException` doesn't provide that information though it states so in the exception message  ``` No qualifying bean found for dependency [java.lang.String]: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Qualifier(value=test-string)} ```  It may be hard to transmit the qualifier as it can be many things but If I could know that a qualifier was required, I could tune the error message a bit. And maybe handle the simple ""string"" qualifier scenario explicitly.   ---  **Affects:** 4.3.2","closed","type: enhancement,","spring-projects-issues","2016-08-25T08:16:31Z","2016-08-25T19:27:19Z"
"","19174","AnnotationConfigApplicationContext does not consistently apply custom ClassLoader [SPR-14606]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14606](https://jira.spring.io/browse/SPR-14606?redirect=false)** and commented  `AnnotationConfigApplicationContext` does not do anything when the `ClassLoader` is changed. According to the Javadoc, this classloader should be used ""to load class path resources""  Use case:  ```java AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(); context.setClassLoader(someClassLoader); context.scan(""com.example""); <- previous class loader is used ```  ---  **Affects:** 4.3.2  **Issue Links:** - #19193 GenericApplicationContext should pick up ClassLoader from custom ResourceLoader","closed","in: core,","spring-projects-issues","2016-08-19T09:37:48Z","2019-01-12T05:22:12Z"
"","19173","Could not change message selector at runtime [SPR-14604]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14604](https://jira.spring.io/browse/SPR-14604?redirect=false)** and commented  Using `DefaultMessageListenerContainer` it is not possible to change the message selector at runtime. A `stop` call will actually not reclaim the `MessageConsumer` instances, it will only stop the connection to the broker.  This can be surprising if a user stop the container, modify its state and then start it again.  Shutdown is pretty agressive (if you have an embedded activemq broker, it even completely stops the broker). For some reason the listener container does not seem to be able to reconnect to the broker after that.  There is a very good sample showcasing all this [here](https://bitbucket.org/yovyom/jmsdemo)   ---  **Affects:** 4.3.2","closed","status: bulk-closed,","spring-projects-issues","2016-08-19T07:12:11Z","2019-01-12T02:25:19Z"
"","19169","No reference to @ManagedBean in the ref guide [SPR-14600]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14600](https://jira.spring.io/browse/SPR-14600?redirect=false)** and commented  Even though the classpath scanning handles both `Named` and `ManagedBean`, only the former is explicitly documented.   ---  **Affects:** 4.3.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/74511181de0636fdf07ebe187057e30e835e3ef7, https://github.com/spring-projects/spring-framework/commit/5f68da31538fb01ca2d8d31375a1f1d3c65289ff","closed","in: core,","spring-projects-issues","2016-08-18T13:50:14Z","2016-09-19T15:55:27Z"
"","19085","Cache limit for destination cache in SimpleBrokerMessageHandler can't be altered [SPR-14516]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14516](https://jira.spring.io/browse/SPR-14516?redirect=false)** and commented  See https://github.com/spring-projects/spring-boot/issues/6483   ---  **Affects:** 4.3.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6d5af60a7ca39389efe99aafecdc4f7d877729f0, https://github.com/spring-projects/spring-framework/commit/b5c11ffb1cea98eb758534d9ca80101a58f4bbf8","closed","type: enhancement,","spring-projects-issues","2016-07-27T08:24:51Z","2016-07-28T09:16:21Z"
"","19008","AnnotationMetadataReadingVisitor does not honour @AliasFor [SPR-14437]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14437](https://jira.spring.io/browse/SPR-14437?redirect=false)** and commented  See [#6337](https://github.com/spring-projects/spring-boot/issues/6337) for some context.  The following code does not behave the same way, considering that `FooBar` has some `@AliasFor` declaration:  ```java AnnotationAttributes attributes = AnnotationAttributes.fromMap(         metadata.getAnnotationAttributes(FooBar.class.getName())); ```  This code works as expected with `StandardAnnotationMetadata` while `AnnotationMetadataReadingVisitor` does not seem to work.   ---  **Affects:** 4.3.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ea8c2670e1b5dd9dfed2aa0061b59330b536ce1, https://github.com/spring-projects/spring-framework/commit/1ca4b81856e4c836f81de7d0d58fb201244c9b48","closed","type: enhancement,","spring-projects-issues","2016-07-06T15:51:34Z","2016-07-28T09:16:20Z"
"","18996","HibernateTemplate not binary-compatible with Hibernate 5.0/5.1's Query type [SPR-14425]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14425](https://jira.spring.io/browse/SPR-14425?redirect=false)** and commented  Hibernate 5.2 has deprecated `org.hibernate.Query` in favour of `org.hibernate.query.Query`. Unfortunately the `Session` is returning the new type.  In `HibernateTemplate#bulkUpdate` we have an explicit check on `org.hibernate.Query` that leads to:  ``` java.lang.NoSuchMethodError: org.hibernate.Session.createQuery(Ljava/lang/String;)Lorg/hibernate/query/Query;         at org.springframework.orm.hibernate5.HibernateTemplate$38.doInHibernate(HibernateTemplate.java:1103)         at org.springframework.orm.hibernate5.HibernateTemplate$38.doInHibernate(HibernateTemplate.java:1099)         at org.springframework.orm.hibernate5.HibernateTemplate.doExecute(HibernateTemplate.java:340)         at org.springframework.orm.hibernate5.HibernateTemplate.executeWithNativeSession(HibernateTemplate.java:307)         at org.springframework.orm.hibernate5.HibernateTemplate.bulkUpdate(HibernateTemplate.java:1099) ```  ---  **Affects:** 4.3.1  **Issue Links:** - #18937 NoSuchMethodError for SessionFactoryImplementor.getProperties() with Hibernate 5.1 - #18899 Support for Hibernate ORM 5.2 - #19240 Spring 4.3.2 HibernateTemplate#findByNamedQuery isn't compatible with Hibernate 5.0  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/16d5ba9b3a4d93b997e9a54f6c754923b5163fd7, https://github.com/spring-projects/spring-framework/commit/19e5a34f9f5a64ed9a13876c22d3958c27e71f59  1 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2016-07-04T15:28:11Z","2019-01-11T16:27:44Z"
"","18984","Cache infrastructure using AspectJ is not properly configured [SPR-14413]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14413](https://jira.spring.io/browse/SPR-14413?redirect=false)** and commented  In AspectJ mode the new `CacheResolver` and `ErrorHandler` are not configured.   ---  **Affects:** 4.1.7, 4.2.6  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1091  **Issue Links:** - [DATAREDIS-527](https://jira.spring.io/browse/DATAREDIS-527) Custom Error Handler not getting injected while CacheMode is ASPECTJ (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6cd85ddde7334e799d7d321836ddfd806ecc6903, https://github.com/spring-projects/spring-framework/commit/3564616b7f36c5a59f2175a5a1b834e53bf9880f, https://github.com/spring-projects/spring-framework/commit/37e42e68e858675849c90089ff2123cd5e47daec  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","type: bug,","spring-projects-issues","2016-06-28T15:20:18Z","2016-07-04T10:17:09Z"
"","18983","Add BasicAuthorizationInterceptor [SPR-14412]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14412](https://jira.spring.io/browse/SPR-14412?redirect=false)** and commented  A recent update in Spring Boot has introduced a `ClientHttpRequestInterceptor` that performs basic authentication. This is a general purpose interceptor that is better suited to the core framework.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/772bc030eea48de7a9be2998693c1f4ab686e249, https://github.com/spring-projects/spring-framework/commit/db963bc556e746509a0c3c3938520a794874202a","closed","type: enhancement,","spring-projects-issues","2016-06-28T14:41:53Z","2016-07-04T10:17:10Z"
"","18878","MockRestServiceServerBuilder cannot be cached [SPR-14306]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14306](https://jira.spring.io/browse/SPR-14306?redirect=false)** and commented  I am investigating the option of adding a `@RestClientTest` annotation in Spring Boot that would automatically configure a `RestTemplate` and `MockRestServiceServer`.  The default expectation managers throw an exception if you try to add a request after you have validated one, something like:  ``` java.lang.IllegalStateException: Cannot add more expectations after actual requests are made.  	at org.springframework.util.Assert.state(Assert.java:392) 	at org.springframework.test.web.client.AbstractRequestExpectationManager.expectRequest(AbstractRequestExpectationManager.java:60) 	at org.springframework.test.web.client.MockRestServiceServer.expect(MockRestServiceServer.java:112) 	at org.springframework.test.web.client.MockRestServiceServer.expect(MockRestServiceServer.java:95) ```  There is no way to ""reset"" the mock server at the end of the test so it looks like the only way to make this work is to create a new server instance per test.  My next move was to try to share the builder and simply call build in a `Before` annotated method but that does not work either as the builder shares an expectation manager by default, which means that every created server using the same builder share the same expectation manager.  Looking at the API, I find it weird that we can both use `ignoreExpectOrder` and `expectationManager` as those are mutually exclusive. Perhaps removing the latter and creating a fresh expectation manager would help? It also would be nice if a server instance could be reused for multiple tests with a public `reset` method that would reset the expectation manager.   ---  **Affects:** 4.3 RC2","closed","type: enhancement,","spring-projects-issues","2016-05-26T06:25:53Z","2016-06-10T09:19:10Z"
"","19188","spring bean容器初始化时存在循环依赖时错误提示信息不够准确 [SPR-14621]","**[stonefly](https://jira.spring.io/secure/ViewProfile.jspa?name=stonefly)** opened **[SPR-14621](https://jira.spring.io/browse/SPR-14621?redirect=false)** and commented  spring bean容器初始化时存在循环依赖时错误提示信息不够准确   ---  **Affects:** 4.1.9","closed","in: core,","spring-projects-issues","2016-08-24T08:53:18Z","2019-01-12T05:22:10Z"
"","19171","Doc: @Bean methods on @Configuration class returned from another @Bean method do not work [SPR-14602]","**[Steven Schlansker](https://jira.spring.io/secure/ViewProfile.jspa?name=stevenschlansker)** opened **[SPR-14602](https://jira.spring.io/browse/SPR-14602?redirect=false)** and commented  I have an `@Configuration` class which holds some internal configuration data.  It wants to instantiate a collaborating `@Configuration` class, hand off some data to it, and expects its collaborator to exist.  However, it seems that an `@Bean` method that returns a `@Configuration` class fails because its `BeanDefinition#getBeanClassName` is null, so `ConfigurationClassUtils#checkConfigurationClassCandidate` returns false.  ``` @RunWith(SpringRunner.class) @ContextConfiguration(classes=BeanDefinitionAutowireTest.Config.class) public class BeanDefinitionAutowireTest {      @Configuration     public static class InnerConfig {         @Bean         URI someUri() {             return URI.create(""/"");         }     }      @Configuration     public static class Config {         @Bean         public InnerConfig innerConfig() {             return new InnerConfig();         }     }      @Autowired     URI someUri;      @Test     public void testUri() {         assertNotNull(someUri);     } } ```  I feel that this should work.  If for some reason it can not, it should throw an exception or otherwise fail obviously, rather than silently discarding the definitions you expect.  (Note that this test case is a little simplified, in the real case I pass constructor arguments to `InnerConfig`, so making things static is not an option)  ---  **Affects:** 4.3.1  **Issue Links:** - #15258 Allow BeanDefinitionRegistryPostProcessor to register other BeanDefinitionRegistryPostProcessors - #16056 `@Configuration` imported via ImportBeanDefinitionRegistrar is not processed as configuration - #16345 `@Configuration` imported via `@ImportResource` is not processed  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9b221f58b9afda33693934456659e3d8f8675d11, https://github.com/spring-projects/spring-framework/commit/6fe7e56598e7ad8fad52d7bec6c2f07d2483e3e5","closed","in: core,","spring-projects-issues","2016-08-18T23:01:31Z","2019-01-13T05:22:47Z"
"","19240","Spring 4.3.2 HibernateTemplate#findByNamedQuery isn't compatible with Hibernate 5.0 [SPR-14676]","**[Steve Storey](https://jira.spring.io/secure/ViewProfile.jspa?name=stevestorey)** opened **[SPR-14676](https://jira.spring.io/browse/SPR-14676?redirect=false)** and commented  https://github.com/spring-projects/spring-framework/blob/master/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTemplate.java#L958 attempts to be compatible with Hibernate 5.x, but because it's compiled against 5.2, the compiler then requires that the runtime method return a org.hibernate.query.Query instance, and thus when running with standard Spring Boot 1.4 versions, you get:  ``` java.lang.NoSuchMethodError: org.hibernate.Session.getNamedQuery(Ljava/lang/String;)Lorg/hibernate/query/Query;         at org.springframework.orm.hibernate5.HibernateTemplate$32.doInHibernate(HibernateTemplate.java:958)         at org.springframework.orm.hibernate5.HibernateTemplate$32.doInHibernate(HibernateTemplate.java:954)         at org.springframework.orm.hibernate5.HibernateTemplate.doExecute(HibernateTemplate.java:356)         at org.springframework.orm.hibernate5.HibernateTemplate.executeWithNativeSession(HibernateTemplate.java:323)         at org.springframework.orm.hibernate5.HibernateTemplate.findByNamedQuery(HibernateTemplate.java:954)         at example.HibernateTemplateBugTest.testFindByNamedQuery(HibernateTemplateBugTest.java:28) ```  in the attached reproduction test when run with simply  ``` mvn clean test ```  If however, you override the standard Hibernate version to 5.2.2 then the test succeeds by running  ``` mvn -Dhibernate.version=5.2.2.Final clean test ```  ---  **Affects:** 4.3.2  **Attachments:** - [spring-bugs.tar.gz](https://jira.spring.io/secure/attachment/23536/spring-bugs.tar.gz) (_1.54 kB_)  **Issue Links:** - #18996 HibernateTemplate not binary-compatible with Hibernate 5.0/5.1's Query type  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/12afc263a46b39886d7ff9918813a3dafd02a983, https://github.com/spring-projects/spring-framework/commit/d631b4cca9421898b1992301ec090300d82caace","closed","type: bug,","spring-projects-issues","2016-09-07T17:02:28Z","2019-01-11T18:21:22Z"
"","19175","OutOfMemoryError caused by nested UnsatisfiedDependencyExceptions [SPR-14607]","**[Stephan Neumann](https://jira.spring.io/secure/ViewProfile.jspa?name=stneuman)** opened **[SPR-14607](https://jira.spring.io/browse/SPR-14607?redirect=false)** and commented  The new error logging format of UnsatisfiedDependencyInjection introduced in Spring 4.3 can cause a OutOfMemoryError. When the constructor  ``` public UnsatisfiedDependencyException(String resourceDescription, String beanName, String propertyName, BeansException ex) {   this(resourceDescription, beanName, propertyName, (ex != null ? ex.getMessage() : """"));   initCause(ex); } ```  is used (for example when a field with an `@Inject` annotation can't be resolved), the exception message of the causing exception is included twice in the current exception message, once by UnsatisfiedDependencyException, once by NestedRuntimeException which is a superclass of UnsatisfiedDependencyException. The exception message format looks like this:  ``` org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name '': Unsatisfied dependency expressed through field '': ; nested exception is  ```  This makes it more than double the size of the message of the causing exception and causes exponential growth of memory consumption. If the nesting level is high enough the application will crash with an OutOfMemoryError instead of logging the root cause of the context creation failure, which is hardly the goal of the new logging format.  I suggest to change the constructor definition to:  ``` public UnsatisfiedDependencyException(String resourceDescription, String beanName, String propertyName, BeansException ex) {   this(resourceDescription, beanName, propertyName, """");   initCause(ex); } ```  This makes the causing exception message only be included once as nested exception text.  Example project to reproduce error & logoutput is attached.  ---  **Affects:** 4.3 GA  **Attachments:** - [error.log](https://jira.spring.io/secure/attachment/23508/error.log) (_269.31 kB_) - [UnsatisfiedDependencyException_OutOfMemory.zip](https://jira.spring.io/secure/attachment/23509/UnsatisfiedDependencyException_OutOfMemory.zip) (_10.02 kB_)  **Issue Links:** - #8389 Condense exception messages accumulated through recursion  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2016-08-19T10:16:47Z","2019-01-11T18:10:11Z"
"","19165","VersionResourceResolver-  Bug when CssLinkResourceTransformer handling relative links [SPR-14596]","**[Soufiane bentaja](https://jira.spring.io/secure/ViewProfile.jspa?name=sbe)** opened **[SPR-14596](https://jira.spring.io/browse/SPR-14596?redirect=false)** and commented  Two themes are used in the project structured like this:  - themes   |-- theme1   |- style.css (wich have url('d.png'))   |- d.png   |-- theme2   |- style.css (wich have url('d.png'))   |- d.png  When we are in the production (cacheResources is true), we detect that we have only one version of the file ""d.png"" stored in the cache and both style files refer to the same d.png file.  In the CachingResourceResolver, file are cached with reference (relativePath) witch explain why we get once cached d.png file.  As you can see bellow :  ```java protected String resolveUrlPathInternal(String resourceUrlPath, 			List locations, ResourceResolverChain chain) {  		String key = RESOLVED_URL_PATH_CACHE_KEY_PREFIX + resourceUrlPath; 		String resolvedUrlPath = this.cache.get(key, String.class);  		if (resolvedUrlPath != null) { 			if (logger.isTraceEnabled()) { 				logger.trace(""Found match""); 			} 			return resolvedUrlPath; 		}  		resolvedUrlPath = chain.resolveUrlPath(resourceUrlPath, locations); 		if (resolvedUrlPath != null) { 			if (logger.isTraceEnabled()) { 				logger.trace(""Putting resolved resource URL path in cache""); 			} 			this.cache.put(key, resolvedUrlPath); 		}  		return resolvedUrlPath; 	} ```  Our ResourceHandlerRegistry configuration :  ```java VersionResourceResolver versionResourceResolver = new VersionResourceResolver()         .addContentVersionStrategy(""/**""); registry.addResourceHandler(""/static/**"")         .addResourceLocations(""/static/"")         .setCachePeriod(cachePeriod)         .resourceChain(useCache)         .addResolver(versionResourceResolver); ```  ---  **Issue Links:** - #19166 CssLinkResourceTransformer is incompatible with ContentVersionStrategy when using Caching (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2016-08-17T16:13:29Z","2019-01-12T16:45:30Z"
"","19032","SpEL evaluator cannot convert LocalDate to String [SPR-14463]","**[Sola](https://jira.spring.io/secure/ViewProfile.jspa?name=sola)** opened **[SPR-14463](https://jira.spring.io/browse/SPR-14463?redirect=false)** and commented  the snippet below:  ```java ctx = new StandardEvaluationContext(LocalDate.now()); parser.parseExpression(""#root"").getValue(ctx, String.class); ```  will produce the exception:  ```java org.springframework.expression.spel.SpelEvaluationException: EL1001E:(pos 0): Type conversion problem, cannot convert from java.time.LocalDate to java.lang.String ```  even java.time.LocalDate has toString method.   ---  **Affects:** 4.3.1","closed","in: core,","spring-projects-issues","2016-07-14T15:17:14Z","2019-01-12T16:34:12Z"
"","18914","Improve MockMvc to follow redirects and forwards [SPR-14342]","**[Sofia](https://jira.spring.io/secure/ViewProfile.jspa?name=sofiaguyang)** opened **[SPR-14342](https://jira.spring.io/browse/SPR-14342?redirect=false)** and commented  It would be very convenient to improve MockMvc to follow redirects and forwards. `@dyser` showed me how I could use a ""forwarder"" result handler with `DefaultMockMvcBuilder`'s `alwaysDo`. But as you can see from the screenshot, only the forwarded url is set -- the request object is just disregarded. If I could get a reference to the new request object, I could do the forwarding to the new url and supply the new request object in the forwarder result handler.  ---  **Affects:** 4.3 GA  **Attachments:** - [mock dispatcher setting forwaded url to mock response.png](https://jira.spring.io/secure/attachment/23417/mock+dispatcher+setting+forwaded+url+to+mock+response.png) (_528.71 kB_)  **Issue Links:** - #19321 Actually support request forwarding in MockRequestDispatcher  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-06-08T10:32:46Z","2019-01-11T16:04:58Z"
"","19955","JDBCTemplate queryForObject returning an empty list with null values [SPR-15392]","**[sneha ghosh](https://jira.spring.io/secure/ViewProfile.jspa?name=snehag)** opened **[SPR-15392](https://jira.spring.io/browse/SPR-15392?redirect=false)** and commented  JDBCTemplate.java We are calling this method from our application `@Override` public \ T queryForObject(String sql, Object[] args, int[] argTypes, Class\ requiredType) throws DataAccessException {      	return queryForObject(sql, args, argTypes, getSingleColumnRowMapper(requiredType));     }  the internal implementation would call: `@Override` public \ T queryForObject(String sql, Object[] args, int[] argTypes, RowMapper\ rowMapper) throws DataAccessException {      	List results = query(sql, args, argTypes, new RowMapperResultSetExtractor(rowMapper, 1));     	return DataAccessUtils.requiredSingleResult(results);     }  Result is being returned as an arrayList of size 1 with null values in it incase the database returns no records. this causes DataAccessUtils.requiredSingleResult(results) to throw a null pointer exception  when iterating over a null list. is there a solution for this ?      public static  T requiredSingleResult(Collection results) throws IncorrectResultSizeDataAccessException {     	int size = (results != null ? results.size() : 0);     	if (size == 0) {     		throw new EmptyResultDataAccessException(1);     	}     	if (results.size() > 1) {     		throw new IncorrectResultSizeDataAccessException(1, size);     	}     	return results.iterator().next();     }    ---  **Attachments:** - [SpringBug.PNG](https://jira.spring.io/secure/attachment/23497/SpringBug.PNG) (_10.77 kB_)","closed","in: data,","spring-projects-issues","2016-08-09T09:48:24Z","2019-01-11T14:41:36Z"
"","19359","EnableAsync javadoc not clear enough [SPR-14793]","**[Slava Semushin](https://jira.spring.io/secure/ViewProfile.jspa?name=slava.semushin)** opened **[SPR-14793](https://jira.spring.io/browse/SPR-14793?redirect=false)** and commented  The sentence  > To be used on `@Configuration` classes as follows, where MyAsyncBean is a user-defined type with one or more methods annotated with either Spring's `@Async` annotation ... > maybe understanding wrong.  For example, should I add `@EnableAsync` to all configuration classes that contain `@Async` beans? Is it possible to place `@EnableAsync` on one configuration and put the beans with `@Async` to another configuration?  Here is a quote from to Andy Wilkinson in gitter:  > They can be in separate locations > `@EnableAsync` needs to go on a `@Configuration` class  I think that documentation could be improved.  ---  **Reference URL:** http://docs.spring.io/spring/docs/4.3.x/javadoc-api/org/springframework/scheduling/annotation/EnableAsync.html  **Issue Links:** - #19447 Document supported return types for `@Async` methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7a8bf8e9a53568bb19b4a23ab9e5aec819f30b30, https://github.com/spring-projects/spring-framework/commit/fe59bc26aba5cc430e8c14d3368ec05629553b63, https://github.com/spring-projects/spring-framework/commit/ab232a538650c78628b8ac5f36bfe9c8ce003c24  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","type: task,","spring-projects-issues","2016-10-10T14:27:32Z","2019-01-13T05:19:33Z"
"","19033","Incorrect output from spring:message if using parameterized strings containing single quotes [SPR-14464]","**[Skylar Sutton](https://jira.spring.io/secure/ViewProfile.jspa?name=skylar.sutton@gmail.com)** opened **[SPR-14464](https://jira.spring.io/browse/SPR-14464?redirect=false)** and commented  Parametrized strings containing a single quote are not output correctly by the spring:message tag. In our testing removal of the single quote OR wrapping the tag and encoding the quote before spring:message begins processing eliminates the issue. We did not deep dive into the spring codebase to determine exact line number / failure, but the example below will exercise it.  1. Define an i18n messages.properties with a parameterized string that contains a single quote ('), ex:  ```java exit.label.thankyou=Merci d'utiliser le {0} ```  1. Define a JSP that uses spring:message to output said string, with a parameter  ```jsp     	  ```  1. Render the page, and note the message output displays incorrectly as:  ```java Merci d'utiliser le {0} ```  1. Change the message.properties entry and remove the single quote ('), ex:  ```jsp exit.label.thankyou=Merci d utiliser le {0} ```  1. Render the page, and note the message output now displays as expected:  ```jsp Merci d utiliser le Application Name (TM) ```    ---  **Affects:** 4.1.9, 4.2.7, 4.3.1","closed","status: declined,","spring-projects-issues","2016-07-14T18:17:33Z","2019-01-12T16:34:11Z"
"","19200","Unable to make ajax POST call for uploading file [SPR-14633]","**[shoaib](https://jira.spring.io/secure/ViewProfile.jspa?name=shoaib.aspire)** opened **[SPR-14633](https://jira.spring.io/browse/SPR-14633?redirect=false)** and commented  Hi,  I am trying to make a POST ajax call in spring  mvc for uploading file.  While making a call I get error saying ""Request method 'POST' not supported""  spring controller code:  ``` @RequestMapping(value = ""uploadFile"", method = RequestMethod.POST) 		public @ResponseBody HashMap uploadFileHandler(HttpServletRequest request) throws IOException { 		logger.debug(""Getting inside upload handler....................""); 		 MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request; 		   MultipartFile multipartFile = multipartRequest.getFile(""file""); 		//MultipartFile multipartFile = request.getFile(""file""); 		   logger.debug(""Getting inside upload handler....................""+multipartFile); 		Long size = multipartFile.getSize();         String contentType = multipartFile.getContentType();         InputStream stream = multipartFile.getInputStream();         byte[] bytes = IOUtils.toByteArray(stream);         logger.debug(""Getting inside upload handler....................""+bytes);         HashMap map = new HashMap();         map.put(""fileoriginalsize"", size);         map.put(""contenttype"", contentType);         map.put(""base64"", new String(Base64Utils.encode(bytes)));                  logger.debug(""fileoriginalsize""+size);              return map; } ```  PFA.. ajax code and logs for same.  Though this seems to be a popular issue, I have been trying this out now for a very long tim, I suspect Spring ssecurity configuration might be one of the isssue.  Please provide your valuable pointers and help me in right direction.   ---  **Affects:** 4.2.5  **Attachments:** - [logs.txt](https://jira.spring.io/secure/attachment/23527/logs.txt) (_5.03 kB_) - [upload.jsp](https://jira.spring.io/secure/attachment/23526/upload.jsp) (_3.41 kB_)","closed","status: invalid,","spring-projects-issues","2016-08-28T07:39:19Z","2019-01-12T05:22:06Z"
"","19592","ResourceDatabasePopulator needs suppressing fallback seperator option [SPR-15025]","**[Shankar Krishna](https://jira.spring.io/secure/ViewProfile.jspa?name=krishnasdfw)** opened **[SPR-15025](https://jira.spring.io/browse/SPR-15025?redirect=false)** and commented  ResourceDatabasePopulator requires an option to have a strict treatment for separator setting. Suppress fallback boolean. Falling back to end of line separator has dangerous consequences - with a DELETE statement a single statement in a file, without semi colon separator had the entire table wiped out - as the where clause next line was not read before the statement was executed.   ---  **Affects:** 4.3.3","closed","status: bulk-closed,","spring-projects-issues","2016-12-16T00:28:16Z","2019-01-12T00:11:45Z"
"","19331","@lookup method injection method documentation [SPR-14765]","**[Shahid Zaman](https://jira.spring.io/secure/ViewProfile.jspa?name=shahid)** opened **[SPR-14765](https://jira.spring.io/browse/SPR-14765?redirect=false)** and commented  While there is a [section](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-factory-method-injection) on Method injection in the documentation, the use of [@lookup](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Lookup.html) annotation is not shown.  Also may be the [Provider](http://docs.oracle.com/javaee/6/api/javax/inject/Provider.html) interface could also be mentioned as way to get instance of prototype scoped beans.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/642fbfba9fba453de045d16a4c927d69ab37b0e4, https://github.com/spring-projects/spring-framework/commit/1f92fc8d90def85ba902de0b475e725dc6f5ac8e, https://github.com/spring-projects/spring-framework/commit/684d6ab553c86808cc29ce452d8b95c53102fab4  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","type: documentation,","spring-projects-issues","2016-09-29T06:10:32Z","2019-01-14T04:37:45Z"
"","19072","Allow configuring the message converter in HttpPutFormContentFilter [SPR-14503]","**[Serhii Hromovyi](https://jira.spring.io/secure/ViewProfile.jspa?name=hromovyi)** opened **[SPR-14503](https://jira.spring.io/browse/SPR-14503?redirect=false)** and commented  Hi,  we faced a problem using FormHttpMessageConverter.MultipartHttpOutputMessage while processing multipart request. Our case is very similar to #16724, but with the only difference - we operate with InputStreamResourse (getFilename always returns null) and filename of multipart is defined in Content-Disposition header. And when MultipartHttpOutputMessage invokes writeHeaders() method - header value is retrieved in ASCII encoding: byte[] headerValue = getAsciiBytes(headerValueString); In our case we have there filename, which contains cyrillic symbols, that are transformed to ""?"" afterwards. Is it ok, that ASCII encoding is using there? If so - is it possible to allow us at least to override this encoding? Cause now there is no possibility to do it.  ---  **Affects:** 4.2.6  **Issue Links:** - #16724 FormHttpMessageConverter writes ASCII encoded so that a multipart form data can not contain filenames with German Umlaute - #19115 HttpHeaders.setContentDispositionFormData() doesn't encode non-acsii characters correctly  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-07-21T14:16:25Z","2019-01-14T04:38:34Z"
"","18903","Add a Basic Websocket Java Client with Reconnection capability as a new Package of Spring [SPR-14331]","**[Sergio Pinto](https://jira.spring.io/secure/ViewProfile.jspa?name=sergio%20p.)** opened **[SPR-14331](https://jira.spring.io/browse/SPR-14331?redirect=false)** and commented  I have found that sometime an application need a persistent connection with Websockets.  Since Spring 4.2 I see that integrated STOMP with WebSocket, I tried STOMP but I found that you can't reconnect. SockJS can do it, but is disabled when using STOMP with Spring and SockJS.  I think Spring must include a class to easy implement a websocket client that can reconnect.  Actually I implemented a Java client that initially was based in a JavaScript WebSocket implementation that can reconnect. I'm using a proxy pattern to add the _onReconnect()_ and_ reconnect()_ methods to my client. It is using an log-back algorithm to retry a new connection.  This could be a big plus to the websocket API with Spring.  Maybe the reconnect ability could be added to the STOMP version that actually is used in Spring latter.  Is possible add this to the Spring framework as a new package/class that could be used as a **out-of-the-box basic websocket cliet with reconnection**  ---  **Affects:** 4.3 RC2  **Issue Links:** - #17968 Excessive SockJS Reconnection Attempts  2 votes, 3 watchers","open","type: enhancement,","spring-projects-issues","2016-06-04T17:27:37Z","2020-08-24T18:19:11Z"
"","19022","MethodBasedEvaluationContext.lazyLoadArguments() execution fails for empty variable arguments call [SPR-14453]","**[Sergey Podgurskiy](https://jira.spring.io/secure/ViewProfile.jspa?name=spodgurskiy)** opened **[SPR-14453](https://jira.spring.io/browse/SPR-14453?redirect=false)** and commented  ``` java.lang.ArrayIndexOutOfBoundsException: 1 	at org.springframework.context.expression.MethodBasedEvaluationContext.lazyLoadArguments(MethodBasedEvaluationContext.java:93) 	at org.springframework.context.expression.MethodBasedEvaluationContext.lookupVariable(MethodBasedEvaluationContext.java:67) 	at org.springframework.context.expression.MethodBasedEvaluationContextTests.varArgEmpty(MethodBasedEvaluationContextTests.java:70) ```  ---  **Affects:** 4.2.7, 4.3.1  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1070  **Issue Links:** - #19122 ArrayIndexOutOfBoundsException in MethodBasedEvaluationContext  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","in: core,","spring-projects-issues","2016-07-12T18:46:18Z","2019-01-11T16:24:35Z"
"","19226","Improve error handling in REST Controllers [SPR-14662]","**[Sergey Derugo](https://jira.spring.io/secure/ViewProfile.jspa?name=sergey.derugo)** opened **[SPR-14662](https://jira.spring.io/browse/SPR-14662?redirect=false)** and commented  It would be nice if there is default exception handler for REST controllers.  **Motivation** Nowadays JSON response is extremely popular for REST services. It's very nice that `@RestController` and `@ResponseBody` annotations provide an easy way to generate JSON response. But there is an issue if any exception occurs in such controllers - the server response contains HTML with the stack trace. This is not convenient for the consumers of such REST service because they expect to get JSON.  The workaround is either define error handler for each method(and this handler will convert the error to appropriate JSON) - but this is not convenient do it for each method. Another solution is implement such global exception handler using `@ControllerAdvice`  **Proposed solution** Default exception handler should exist in the Spring MVC for REST controllers. If there is an exception in the REST controller then it should return HTTP response with error JSON, for example:  { success: false, statusCode: 500, errorCode: ""\"" /*  auto-generated by Error handler to facilitate search in the log*/, errorDetails: ""Stack-trace etc."" /*Exception stack trace. Might be turned off for production deployment */ }  ---  **Issue Links:** - #17136 Provide a standard exception hierarchy  for REST end points","closed","type: enhancement,","spring-projects-issues","2016-09-02T15:42:17Z","2019-01-11T18:22:10Z"
"","18972","Proposal for a FactoryBean that create a bean while scanning the bean's class constructors like it is done for components during component scan [SPR-14401]","**[Sebastian Staack](https://jira.spring.io/secure/ViewProfile.jspa?name=stse)** opened **[SPR-14401](https://jira.spring.io/browse/SPR-14401?redirect=false)** and commented  The java config feature is great but sometimes it is a mess to configure a bean that has a constructor with a large parameter list or that depends on a bean that is itself dependent on an injection point (see following example).  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration public class MyTest {      @Configuration     static class TestConfiguration {          @Bean(name = ""Logger"")         @Scope(SCOPE_PROTOTYPE)         public Logger createLogger(InjectionPoint injectionPoint) {             return LogManager.getLogger(injectionPoint.getMember()                                                       .getDeclaringClass());         }          @Bean(name = ""MyBean"")         @Scope(SCOPE_PROTOTYPE)         public MyBean createMyBean() throws NoSuchMethodException {             Constructor constructor = MyBeanImpl.class.getDeclaredConstructor(Logger.class);             InjectionPoint injectionPoint = new InjectionPoint(new MethodParameter(constructor,1));             return new MyBeanImpl(createLogger(injectionPoint));         }      }      @Autowired     private MyBean beanA;      @Autowired     private MyBean beanB;      @Test     public void test() {         assertThat(beanA, is(not(nullValue())));         assertThat(beanB, is(not(nullValue())));          assertThat(beanA, not(sameInstance(beanB)));     } } ```  With a FactoryBean like this  ``` package org.springframework.beans.factory.support;  import org.springframework.beans.factory.NoSuchBeanDefinitionException; import org.springframework.beans.factory.config.AbstractFactoryBean; import org.springframework.beans.factory.config.AutowireCapableBeanFactory;   public class AutowireFactoryBean extends AbstractFactoryBean {     private final Class clazz;      public AutowireFactoryBean(Class clazz) {         this.clazz = clazz;     }      @Override     public Class getObjectType() {         return clazz;     }      @Override     @SuppressWarnings(""unchecked"")     protected T createInstance() {         if (getBeanFactory() instanceof AbstractAutowireCapableBeanFactory) {             final AbstractAutowireCapableBeanFactory factory = (AbstractAutowireCapableBeanFactory) getBeanFactory();              return (T) factory.initializeBean(                     new ConstructorResolver(factory)                             .autowireConstructor(                                     clazz.getSimpleName(),                                     new RootBeanDefinition(clazz),                                     clazz.getDeclaredConstructors(),                                     null                             )                             .getWrappedInstance(),                     clazz.getSimpleName()             );         }          throw new NoSuchBeanDefinitionException(clazz);     }      @Override     protected void destroyInstance(T instance) throws Exception {         if (getBeanFactory() instanceof AutowireCapableBeanFactory) {             ((AutowireCapableBeanFactory) getBeanFactory()).destroyBean(instance);         }     } } ```  the above example would become a lot nicer  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration public class MyTest {      @Configuration     static class TestConfiguration {          @Bean(name = ""Logger"")         @Scope(SCOPE_PROTOTYPE)         public Logger createLogger(InjectionPoint injectionPoint) {             return LogManager.getLogger(injectionPoint.getMember()                                                       .getDeclaringClass());         }          @Bean(name = ""MyBean"")         @Scope(SCOPE_PROTOTYPE)         public AutowireFactoryBean createMyBean() {             return new AutowireFactoryBean<>(MyBeanImpl.class);         }      }       @Autowired     private MyBean beanA;      @Autowired     private MyBean beanB;       @Test     public void test() {         assertThat(beanA, is(not(nullValue())));         assertThat(beanB, is(not(nullValue())));          assertThat(beanA, not(sameInstance(beanB)));     } } ```  It is not the problem to write that FactoryBean but as you see above the Factory bean must be in a package in the spring namespace. So if you think that this is also an improvement for other user, then I would be happy to have this feature in one of the upcoming spring releases.  I have attached a proof of concept to show that this proposal works.   ---  **Affects:** 4.3 GA  **Attachments:** - [spring-autowirefactorybean.zip](https://jira.spring.io/secure/attachment/23431/spring-autowirefactorybean.zip) (_35.89 kB_)","closed","status: bulk-closed,","spring-projects-issues","2016-06-25T21:58:44Z","2019-01-12T00:13:37Z"
"","18971","InjectionPoint not propagated by AutowiredAnnotationBeanPostProcessor's cached argument resolution [SPR-14400]","**[Sebastian Staack](https://jira.spring.io/secure/ViewProfile.jspa?name=stse)** opened **[SPR-14400](https://jira.spring.io/browse/SPR-14400?redirect=false)** and commented  When there is a prototype bean with a field annotated with `@Autowired` whose value is a prototype bean created in dependence of its injection point it seams that the the injection point isn't propagated.  **Test setup:**  ``` public class MyBeanImpl implements MyBean {      @Autowired     private Logger logger;      @PostConstruct     public void init() {         logger.info(""Hello World"");     }  } ```  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration public class MyTest {      @Configuration     static class TestConfiguration {          @Bean         @Scope(SCOPE_PROTOTYPE)         public Logger createLogger(InjectionPoint injectionPoint) {             return LogManager.getLogger(injectionPoint.getMember().getDeclaringClass());         }          @Bean         @Scope(SCOPE_PROTOTYPE)         public MyBean createMyBean() {             return new MyBeanImpl();         }     }      @Autowired     private MyBean beanA;      @Autowired     private MyBean beanB;       @Test     public void test() {      }      public static void main(String[] args) {         try (AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(TestConfiguration.class)) {             ctx.getBean(MyBean.class);             ctx.getBean(MyBean.class);         }     } } ```  If I execute the test then I get the following log:  ``` 16:36:53.997 [main] INFO  org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [test.MyTest]: no resource found for suffixes {-context.xml}. 16:36:54.092 [main] INFO  org.springframework.test.context.support.AbstractDelegatingSmartContextLoader - AnnotationConfigContextLoader detected default configuration classes for context configuration [ContextConfigurationAttributes@255b53dc declaringClass = 'test.MyTest', classes = '{class test.MyTest$TestConfiguration}', locations = '{}', inheritLocations = true, initializers = '{}', inheritInitializers = true, name = [null], contextLoaderClass = 'org.springframework.test.context.ContextLoader']. 16:36:54.105 [main] INFO  org.springframework.test.context.support.DefaultTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener] 16:36:54.109 [main] INFO  org.springframework.test.context.support.DefaultTestContextBootstrapper - Could not instantiate TestExecutionListener [org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener]. Specify custom listener classes or make the default listener classes (and their required dependencies) available. Offending class: [org/springframework/transaction/interceptor/TransactionAttribute] 16:36:54.110 [main] INFO  org.springframework.test.context.support.DefaultTestContextBootstrapper - Could not instantiate TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener]. Specify custom listener classes or make the default listener classes (and their required dependencies) available. Offending class: [javax/servlet/ServletContext] 16:36:54.112 [main] INFO  org.springframework.test.context.support.DefaultTestContextBootstrapper - Could not instantiate TestExecutionListener [org.springframework.test.context.transaction.TransactionalTestExecutionListener]. Specify custom listener classes or make the default listener classes (and their required dependencies) available. Offending class: [org/springframework/transaction/interceptor/TransactionAttributeSource] 16:36:54.112 [main] INFO  org.springframework.test.context.support.DefaultTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@6295d394, org.springframework.test.context.support.DependencyInjectionTestExecutionListener@475e586c, org.springframework.test.context.support.DirtiesContextTestExecutionListener@657c8ad9]16:36:54.302 [main] INFO  org.springframework.context.support.GenericApplicationContext - Refreshing org.springframework.context.support.GenericApplicationContext@27ae2fd0: startup date [Sat Jun 25 16:36:54 CEST 2016]; root of context hierarchy 16:36:54.757 [main] INFO  test.MyBeanImpl - Hello World 16:36:54.758 [main] INFO  test.MyTest - Hello World 16:36:54.764 [Thread-1] INFO  org.springframework.context.support.GenericApplicationContext - Closing org.springframework.context.support.GenericApplicationContext@27ae2fd0: startup date [Sat Jun 25 16:36:54 CEST 2016]; root of context hierarchy ```  The lines 16:36:54.757 and 16:36:54.758 in the log show that the InjectionPoint of the Logger field differs, because the injection point's member declaring class is used to instantiate the logger. I would expect that they don't differ because both times the same bean is instantiated.  After a closer look I recognized that the second logger is instantiated for the test class MyTest, so I assume that the injection point isn't populated recursively. To prove my assumption I created the method `MyTest#main()` where I setup an `ApplicationContext` by hand. When I execute this method I get the following log:  ``` 16:56:43.372 [main] INFO  org.springframework.context.annotation.AnnotationConfigApplicationContext - Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@436e852b: startup date [Sat Jun 25 16:56:43 CEST 2016]; root of context hierarchy 16:56:44.071 [main] INFO  test.MyBeanImpl - Hello World 16:56:44.077 [main] INFO org.springframework.context.annotation.AnnotationConfigApplicationContext - Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@436e852b: startup date [Sat Jun 25 16:56:43 CEST 2016]; root of context hierarchy org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'createMyBean': Injection of autowired dependencies failed; nested exception is java.lang.IllegalStateException: No current InjectionPoint available for method 'createLogger' parameter 0 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:356) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:220) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:352) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:333) 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1088) 	at test.MyTest.main(MyTest.java:50) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144) Caused by: java.lang.IllegalStateException: No current InjectionPoint available for method 'createLogger' parameter 0 	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:830) 	at org.springframework.beans.factory.support.ConstructorResolver.resolvePreparedArguments(ConstructorResolver.java:784) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:415) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.resolvedCachedArgument(AutowiredAnnotationBeanPostProcessor.java:533) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.access$200(AutowiredAnnotationBeanPostProcessor.java:118) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:562) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:350) 	... 14 more ```  This log confirmed my assumption from above, because now there isn't a parent injection point and the thrown error state that there isn't an current injection point at all. I guess the that the method `AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject` must be fixed to populate the injection point of its field via `ConstructorResolver#setCurrentInjectionPoint()`.  I have attached a maven project so that you are able to reproduce the observed behavior.  ---  **Affects:** 4.3 GA  **Attachments:** - [spring-injectionpoint-bug.zip](https://jira.spring.io/secure/attachment/23430/spring-injectionpoint-bug.zip) (_31.30 kB_)  **Issue Links:** - #19363 Documentation for InjectionPoint argument on `@Bean` method  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e15f7efff8be464092d233ae633f5b9d6341fd28","closed","in: core,","spring-projects-issues","2016-06-25T15:07:39Z","2019-01-13T05:24:25Z"
"","19607","Constant error 416 for a byte-range request with content type application/octet-stream [SPR-15041]","**[Sebastian Slepowronski](https://jira.spring.io/secure/ViewProfile.jspa?name=sebastianslepowronski)** opened **[SPR-15041](https://jira.spring.io/browse/SPR-15041?redirect=false)** and commented  Hi guys,  we're experiencing issues with serving the static resources of ""application/octet-stream"" with the byte-range requests.  After adding a resource location by extending a  ```java WebMvcConfigurerAdapter#addResourceHandlers ```  and performing the byte-range request (it can be either _""Range=bytes:0-""_ or _""Range=bytes:1-3""_), it is always concluded with _error 416 ""Requested range not satisfiable""_.  I have debugged Spring a bit and the exception causing our error 416 is _""'Content-Type' cannot contain wildcard type '*'""_ raised in the  ```java HttpHeaders#setContentType ```  The root cause of this exception is a null media type. We have got a media type set up:  ```java spring.mvc.media-types.dat: application/octet-stream ```  At the beginning, it works correctly and the desired content type is used but at the end of the getting media type flow we are meeting such a condition in the _PathExtensionContentNegotiationStrategy#getMediaTypeForResource_:  ```java if(MediaType.APPLICATION_OCTET_STREAM.equals(mediaType)) {     mediaType = null; } ```  what of course causes a null _mediaType_ and finally an error 416 in the _ResourceHttpRequestHandler#handleRequest_.  I suspect that there was a deeper reasoning with discarding the _application/octet-stream_ so explicitly. Could you please share what is the reason of such a behaviour?  We would like to achieve a goal of serving static _application/octet-stream_ resources with byte-range support. Could you please tell whether a condition above is correct or what would be another way to achieve this goal?  FYI: Our working workaround for this issue is declaring an image content type:  ```java spring.mvc.media-types.dat: image/jpeg ```  Byte range requests are working with such an approach and correctly return the _206 Partial Content_.  Great thanks for your help and time.  Best regards   ---  **Affects:** 4.3.3","closed","type: bug,","spring-projects-issues","2016-12-22T09:19:31Z","2017-01-25T14:18:15Z"
"","19415","expose ""lenient"" from DateFormatter in DateTimeFormat annotation [SPR-14849]","**[Sebastian Davids](https://jira.spring.io/secure/ViewProfile.jspa?name=davids_s)** opened **[SPR-14849](https://jira.spring.io/browse/SPR-14849?redirect=false)** and commented  ```java public @interface DateTimeFormat { // ...   boolean lenient default true; //... } ```  ```java public DateTimeFormatAnnotationFormatterFactory ... { //...   protected Formatter getFormatter(DateTimeFormat annotation, Class fieldType) { //...     formatter.setLenient(annotation.lenient());     return formatter;   } }    ```    --- No further details from [SPR-14849](https://jira.spring.io/browse/SPR-14849?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2016-10-26T11:26:15Z","2019-01-12T00:12:09Z"
"","19410","AnnotationFormatterFactory should support @AliasFor [SPR-14844]","**[Sebastian Davids](https://jira.spring.io/secure/ViewProfile.jspa?name=davids_s)** opened **[SPR-14844](https://jira.spring.io/browse/SPR-14844?redirect=false)** and commented  Pseudo code:  ```java public @interface MyAnnotation {    @AliasFor(""alias"")    String value() default """";     @AliasFor(""value"")    String alias() default ""not aliased""; } ```  ```java public class Bean {    @MyAnnotation(""aliased"")    private String toBeAliased; //... } ```  ```java public class MyAnnotationFormatterFactory implements AnnotationFormatterFactory {    public Printer getPrinter(MyAnnotation annotation, Class fieldType) {       String alias = annotation.alias(); //... } ```  Expectation would be alias to be ""aliased"" and not ""not aliased"".  ---  **Affects:** 4.3.3  **Issue Links:** - #18054 Support `@Cache`* as merged composed annotations - #18287 Differentiate between TypeDescriptors with same annotations but different attributes - #19438 NoSuchMethodError when using AnnotatedElementAdapter with Java 7 - #19496 ConversionService performance regression - #19626 Annotated method argument matching performance issue - #19493 Improve performance for conversions using a method parameter based type descriptor with annotations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/62918ca7797a9c7822fdf960c63a29b901c2343b, https://github.com/spring-projects/spring-framework/commit/bf9083d60f5265e055eb756f9a27d8facd49618e","closed","type: enhancement,","spring-projects-issues","2016-10-25T15:28:09Z","2019-01-13T05:19:17Z"
"","18957","Support for typed caches with EhCache 3.0 [SPR-14384]","**[Sebastian Audet](https://jira.spring.io/secure/ViewProfile.jspa?name=smaudet@sebastianaudet.com)** opened **[SPR-14384](https://jira.spring.io/browse/SPR-14384?redirect=false)** and commented  There is incomplete support for the EhCache JCache solution.  If you create a CacheManager with typed key/value pairs (pass in the key class and the value class), the spring JCacheManager will fail to instantiate this cache.  The solution is to add support for a custom class map for value pairs.  I have a working patch, will submit for review later.  ---  **Affects:** 4.3 GA  **Issue Links:** - #18150 Compatibility with JCache 1.1","closed","in: core,","spring-projects-issues","2016-06-20T19:30:31Z","2019-01-12T05:22:35Z"
"","19186","Static resource served with wrong Content-Type and ERR_CONTENT_LENGTH_MISMATCH  error [SPR-14619]","**[Sean Carroll](https://jira.spring.io/secure/ViewProfile.jspa?name=seanc28@gmail.com)** opened **[SPR-14619](https://jira.spring.io/browse/SPR-14619?redirect=false)** and commented  When attempting to use Spring's web static resource handling in version 4.3.2 I'm receiving net::ERR_CONTENT_LENGTH_MISMATCH when trying to load bootstrap's glyphicons-halflings-regular.woff. I do not receive this error when using Spring 4.2.5. I have not yet tried other versions but to help try and pinpoint issue.  I'm currently experiencing this issue in a standard spring mvc app (not using spring-boot) and deploying to JBOSS EAP 6. I'm working on a sample app that reproduces the problem and will push to github and upate this ticket when complete. In the meantime I'm attaching a few screenshots   ---  **Affects:** 4.3.2  **Attachments:** - [spring_4.2.5_resource_versioning.png](https://jira.spring.io/secure/attachment/23515/spring_4.2.5_resource_versioning.png) (_6.30 kB_) - [spring_4.3.2_resource_versioning_err_content_length_mismatch.png](https://jira.spring.io/secure/attachment/23513/spring_4.3.2_resource_versioning_err_content_length_mismatch.png) (_28.65 kB_) - [spring_4.3.2_resource_versioning.png](https://jira.spring.io/secure/attachment/23514/spring_4.3.2_resource_versioning.png) (_6.32 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/7d3a0632e95c10c829c91a2e962fb46c3cbd08be","closed","status: declined,","spring-projects-issues","2016-08-24T00:07:35Z","2019-01-12T16:58:49Z"
"","19049","CronSequenceGenerator.next() returns incorrect time [SPR-14480]","**[Scott Albertine](https://jira.spring.io/secure/ViewProfile.jspa?name=scott.albertine)** opened **[SPR-14480](https://jira.spring.io/browse/SPR-14480?redirect=false)** and commented  I've found a cron line and timestamp pair that violates sane ordering of the CronSequenceGenerator#next(Date) function.  Demonstration test below:  ```java 	@Test 	public void demonstrateBug() { 		//I've found a cron line and timestamp pair that violates sane ordering of the CronSequenceGenerator#next(Date) function. 		long workingTimeStamp = 1468850400000L; //18 Jul 2016 14:00:00 GMT 		long problemTimeStamp = 1468867460443L; //18 Jul 2016 18:44:20.443 GMT   		String cronLine = ""*/3 * 13 * * *""; //cron line that causes issues, found by fuzz testing 		CronSequenceGenerator generator = new CronSequenceGenerator(cronLine, TimeZone.getTimeZone(""UTC"")); //standard generator using that cron line 		Date correctNextRun = generator.next(new Date(workingTimeStamp)); 		long correctNextRunTime = correctNextRun.getTime(); //correctly finds 1468933200000L 		//demonstrate that the problem timestamp is between the working timestamp and its next run 		Assert.assertTrue(workingTimeStamp < problemTimeStamp); 		Assert.assertTrue(problemTimeStamp < correctNextRunTime); 		//this means that, since the problem timestamp is between the working one and its next run, getting the next run of the problem timestamp should result in the SAME next run as the one from the working timestamp 		Date faultyNextRun = generator.next(new Date(problemTimeStamp)); 		long faultyNextRunTime = faultyNextRun.getTime(); //incorrectly finds 1468933221000L 		Assert.assertEquals(correctNextRunTime, faultyNextRunTime); //THIS FAILS, demonstrating the bug. 	} ```  ---  **Affects:** 4.3.1  **Issue Links:** - #19158 CronSequenceGenerator.next() is not implemented as documented","closed","status: bulk-closed,","spring-projects-issues","2016-07-18T20:34:20Z","2019-01-12T02:25:37Z"
"","19534","spring or shiro jsonp(AbstractJsonpResponseBodyAdvice) bug [SPR-14967]","**[Say.li](https://jira.spring.io/secure/ViewProfile.jspa?name=120011676)** opened **[SPR-14967](https://jira.spring.io/browse/SPR-14967?redirect=false)** and commented  `@RestControllerAdvice` public class JsonpAdvice extends AbstractJsonpResponseBodyAdvice {      public JsonpAdvice() {         super(""callback"");     }          @Override     protected void beforeBodyWriteInternal(MappingJacksonValue bodyContainer, MediaType contentType, MethodParameter returnType, ServerHttpRequest request, ServerHttpResponse response) {         System.out.println(request.getURI());         super.beforeBodyWriteInternal(bodyContainer, contentType, returnType, request, response);     }  }  The above method, if there is in the `@RequestMapping` method Shiro: SecurityUtils.getSubject().login(new UsernamePasswordToken(""admin"", ""admin"", false))  or SecurityUtils.getSubject().logout(), beforeBodyWriteInternal method will not be called,  Normal `@RequestMapping` method in normal.   --- No further details from [SPR-14967](https://jira.spring.io/browse/SPR-14967?redirect=false)","closed","status: declined,","spring-projects-issues","2016-12-01T01:54:00Z","2019-01-12T16:33:47Z"
"","19527","Consistent autowiring behavior for specifically typed injection points against loosely typed @Bean methods [SPR-14960]","**[satish surabhi](https://jira.spring.io/secure/ViewProfile.jspa?name=ssurabhi)** opened **[SPR-14960](https://jira.spring.io/browse/SPR-14960?redirect=false)** and commented  I want to report somewhat similar issue reported here: #15673 , now we are noticing autowire failing intermittently at least on the versions I have tried : 3.2.14 and  4.1.7.RELEASE. Following are the test classes with unit test. The test fails with NoSuchBeanDefinitionException for at least 2 (random) out of 5 attempts.  ```java public interface BarInterface {}  public class Bar implements BarInterface {}  public class Foo {  @Autowired  public Bar bar; }  @Configuration public class FooBarConfiguration {     @Bean     public Foo foo() {         return new Foo();     }     @Bean     public BarInterface bar() {         return new Bar();     } }  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = {FooBarConfiguration.class}, loader=AnnotationConfigContextLoader.class) public class TestSpringConfiguration {      @Test     public void testSpringConfiguration() {         System.out.println(""config test"");     } } ```  ---  **Reference URL:** #15673  **Issue Links:** - #15673 Unable to autowire concrete classes when java config methods return interface - #19073 Non-helpful NoSuchBeanDefinitionException rather than BeanNotOfRequiredTypeException due to creation order - #19074 Deterministic and JVM-independent `@Bean` registration order within Class-reflected configuration classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/845dbf040dcff315157678efd6d8b17628266b01, https://github.com/spring-projects/spring-framework/commit/66aeeedaef432554e356b946a0b524b6a429fc7b","closed","type: enhancement,","spring-projects-issues","2016-11-29T00:03:32Z","2019-01-14T04:37:01Z"
"","18944","Shared EntityManager's target lookup doesn't work with Spring Data's ChainedTransactionManager [SPR-14371]","**[Sathishkumar Murugesan](https://jira.spring.io/secure/ViewProfile.jspa?name=sathish.murugesan)** opened **[SPR-14371](https://jira.spring.io/browse/SPR-14371?redirect=false)** and commented  If we have more than one TransactionManager involved, and If we invoke JmsTransactionManager first, followed by JPATransactionManager then JPATransactionManager is coming as null. which eventually breaks code.  Exact Scenario is explained by Murali Mohan Rath : He raised a related bug at https://jira.spring.io/browse/DATACMNS-803  Because of this issue we were not able to migrate from Spring 4.1.6 to any higher Spring Version  This issue is already raised in #17834. and latest comment from Juergen Hoeller below  As for the target suddenly being null in some scenarios on 4.x, this seems to be a separate issue not caused by the changes behind #17834( #18411). Let's create a separate JIRA issue for that scenario if it remains to be a problem.  This issue is not still resolved in Spring 4.3.0 also. .  ---  **Affects:** 4.2.1, 4.2.5, 4.2.6, 4.3 GA  **Reference URL:** http://stackoverflow.com/questions/34494754/upgraded-from-spring-4-1-6-to-4-2-4-and-suddenly-getting-transactionrequiredexce  **Issue Links:** - #18411 Regression: Shared EntityManager proxy insists on actualTransactiveActive flag even with SYNCHRONIZATION_NEVER - #16541 Shared EntityManager should immediately throw TransactionRequiredException if no transaction in progress - #17834 Inconsistent JPA behavior using no transaction, propagation SUPPORTS and OpenEntityManager pattern - [DATACMNS-803](https://jira.spring.io/browse/DATACMNS-803) ChainedTransactionManager does not work with latest spring","closed","status: declined,","spring-projects-issues","2016-06-16T09:48:12Z","2019-01-14T04:39:02Z"
"","19453","Execute getBeansWithAnnotation when bean has a @RefreshScope annotation returns unexpected number of results [SPR-14887]","**[Sander Wartenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=sanderwartenberg)** opened **[SPR-14887](https://jira.spring.io/browse/SPR-14887?redirect=false)** and commented  We have a problem using the `@RefreshScope` annotation when using the following method. For context, we are using Spring Boot 1.3.8 with Spring Cloud Config 1.0.6.  ```java @RefreshScope @ServiceFactory public class MyServiceFactory implements IServiceFactory {} ```  Custom annotation:  ```java @Component @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) public @interface ServiceFactory {} ```  ```java public final class AnnotatedServiceFactory {  private void loadFactories(ApplicationContext ctx, String projectName) {     Map beans = ctx.getBeansWithAnnotation(ServiceFactory.class);          // I expected one bean, received 2 beans.   } } ```  We have a class 'AnnotatedServiceFactory' which scans the beans in the applicationContext which have an annotation called 'ServiceFactory'.  We created a class called 'MyServiceFactory' with the `@ServiceFactory` annotation but also the `@RefreshScope` annotation because we want to refresh this bean when Spring Cloud Config refresh is called.  In the method loadFactories I execute ctx.getBeansWithAnnotation and I expected to receive 1 bean but I got 2. The first is called 'scopedTarget.myServiceFactory' and the second is called 'myServiceFactory'.  Can you verify if this is a bug or expected behaviour? If it is expected, is there a way to filter those 'scopedTarget.*' beans?   ---  **Affects:** 4.2.7","closed","status: bulk-closed,","spring-projects-issues","2016-11-08T13:28:11Z","2019-01-12T00:12:01Z"
"","19342","Only print printable content for request and response body in Spring MVC Test [SPR-14776]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14776](https://jira.spring.io/browse/SPR-14776?redirect=false)** and commented  #### Overview  This issue picks up where #19282 left.  #### Deliverables  Using a mechanism similar to `MessageHeaderAccessor.isReadableContentType()`, update the `PrintingResultHandler` so that we ...  1. [x] Only print readable content for a request body in Spring MVC Test 2. [x] Only print readable content for a response body in Spring MVC Test  ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e65a1a43727ca7455ed7fa47fb4ed68f8c5e2862, https://github.com/spring-projects/spring-framework/commit/8cf19331483e09264452890e73434c06093e3b8e","closed","type: enhancement,","spring-projects-issues","2016-10-03T18:56:31Z","2019-01-11T17:24:26Z"
"","19293","Introduce 'value' alias for @Bean's 'name' attribute [SPR-14728]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14728](https://jira.spring.io/browse/SPR-14728?redirect=false)** and commented  Since use cases exist for which a user need only supply the `name` attribute for an `@Bean` method declaration, it would be beneficial to the user (in terms of usability) if the name could be supplied via an implicit `value` attribute.  For example, the following `@Bean` configuration for a Spring MVC controller that utilizes a `BeanNameUrlHandlerMapping`:  ```java @Bean(name = ""/testController"") TestController testController() { 	return new TestController(); } ```  ... could be simplified as follows:  ```java @Bean(""/testController"") TestController testController() { 	return new TestController(); } ```    --- No further details from [SPR-14728](https://jira.spring.io/browse/SPR-14728?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-09-17T13:47:03Z","2016-09-19T15:55:26Z"
"","19215","Support @EnabledIf and @DisabledIf without loading ApplicationContext [SPR-14649]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14649](https://jira.spring.io/browse/SPR-14649?redirect=false)** and commented  #### Status Quo  The recently added support for `@EnabledIf` and `@DisabledIf` allows for conditional test execution in JUnit Jupiter via SpEL expressions and property look-ups in the Spring `Environment`.  This functionality is extremely powerful; however, there is also a very large drawback with the current implementation. Namely, the test's `ApplicationContext` is _always_ eagerly loaded, even if the `ApplicationContext` will never be used by a test.  #### Deliverables  1. [x] Introduce a `boolean` flag in `@EnabledIf` and `@DisabledIf` to control whether the test's `ApplicationContext` should be eagerly loaded.    - set the default for the flag to `false` so that users have to explicitly think about the consequences. 2. [x] Introduce code for evaluating the following when the test's `ApplicationContext` is not available:    - property placeholders for system properties and environment variables    - SpEL expressions that do not access beans from the `ApplicationContext`  ---  **Affects:** 5.0 M2  **Issue Links:** - #19181 Introduce support for disabling JUnit Jupiter tests with SpEL expressions (_**""depends on""**_) - #19210 Introduce support for enabling JUnit Jupiter tests with SpEL expressions (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5c9350b8cb8678292ff5887da4ba207fbbeb67d1","closed","type: enhancement,","spring-projects-issues","2016-08-31T14:57:01Z","2019-01-11T18:23:08Z"
"","19210","Introduce support for enabling JUnit Jupiter tests with SpEL expressions [SPR-14644]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14644](https://jira.spring.io/browse/SPR-14644?redirect=false)** and commented  This issue picks up where #19181 left off, by introducing a new `@EnabledIf` annotation to serve as a logical companion to `@DisabledIf`.  ---  **Issue Links:** - #19215 Support `@EnabledIf` and `@DisabledIf` without loading ApplicationContext (_**""is depended on by""**_) - #19181 Introduce support for disabling JUnit Jupiter tests with SpEL expressions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/634d1c03a3d4b55b44c23c0b240a786331f12659","closed","type: enhancement,","spring-projects-issues","2016-08-30T18:51:20Z","2019-01-13T05:22:36Z"
"","19157","Upgrade build to Gradle 3.0 [SPR-14588]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14588](https://jira.spring.io/browse/SPR-14588?redirect=false)** and commented  ---  **Affects:** 5.0 M1  **Issue Links:** - #19138 Upgrade build to Gradle 3.0 (_**""duplicates""**_)","closed","type: task,","spring-projects-issues","2016-08-15T18:53:31Z","2019-01-11T18:03:39Z"
"","19093","Document JUnit Jupiter support in the reference manual [SPR-14524]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14524](https://jira.spring.io/browse/SPR-14524?redirect=false)** and commented   ---  **Affects:** 5.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8c9d42f793408a16b590bbf23be8dd05999b4660, https://github.com/spring-projects/spring-framework/commit/e995854f1126457c2a25ce37d6ba95694f1dd53d, https://github.com/spring-projects/spring-framework/commit/d3129a8bd7e77eef6a49e97226ceb153b6f4c8aa, https://github.com/spring-projects/spring-framework/commit/550bed29052cc7cb7ce9b8a9e149e98376d62fbb","closed","type: documentation,","spring-projects-issues","2016-07-29T13:59:01Z","2017-09-28T12:14:36Z"
"","19028","Support suppressed exceptions in the TestContext framework [SPR-14459]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14459](https://jira.spring.io/browse/SPR-14459?redirect=false)** and commented  #### Status Quo  If multiple `TestExecutionListener` 'after' methods throw an exception, the first such exception will be rethrown. Subsequent exceptions will be logged at `WARN` level, but there is no way to access or process them other than via the log file or console.  #### Deliverables  1. [x] Track subsequent exceptions thrown by `TestExecutionListener` 'after' methods as _suppressed exceptions_.    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ec85a3c3bf4aa96e8320147dae179ca181f1b33, https://github.com/spring-projects/spring-framework/commit/3fa88c2b56b1a9c2c4f36ecc665fded0d4d91f80","closed","type: enhancement,","spring-projects-issues","2016-07-13T18:21:42Z","2016-07-28T14:17:38Z"
"","19020","Introduce Supplier message support in org.springframework.util.Assert [SPR-14450]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14450](https://jira.spring.io/browse/SPR-14450?redirect=false)** and commented  1. [x] Introduce overloaded methods in `org.springframework.util.Assert` that accept `Supplier` instead of `String` for lazy evaluation of error messages.  ---  **Affects:** 5.0 M1  **Issue Links:** - #19761 Revisit Assert to avoid single-arg assert methods (with refined messages)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/68b3bc03947fc103de438d4f2482373ae2f986a8, https://github.com/spring-projects/spring-framework/commit/264f5860a86b14d2e343efa81bcbfb95474b68dd, https://github.com/spring-projects/spring-framework/commit/17dd5dd22d9b68bf60c302833c8c33d3cb914ed3","closed","type: enhancement,","spring-projects-issues","2016-07-11T15:12:17Z","2019-01-11T16:24:31Z"
"","19019","Move ""What's New"" reference manual chapter to the wiki [SPR-14449]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14449](https://jira.spring.io/browse/SPR-14449?redirect=false)** and commented  1. [x] Create a ""What's New"" wiki page.    - https://github.com/spring-projects/spring-framework/wiki/What's-New-in-the-Spring-Framework 2. [x] Link to the existing ""What's New"" content for 3.x and 4.x from the new wiki page. 3. [x] Link to the new wiki page from the appendix of the reference manual. 4. [x] Delete the existing ""What's New"" chapter from the reference manual. 5. [x] Begin documenting ""What's New in Spring Framework 5.x"" in the wiki.    ---  **Affects:** 5.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c341b39f710134a01e7db0b5a0d730744554bc7b","closed","type: documentation,","spring-projects-issues","2016-07-11T15:09:16Z","2016-07-28T14:17:37Z"
"","19017","Regression: TestContextManager no longer tracks after-class exception with log level lower than WARN [SPR-14447]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14447](https://jira.spring.io/browse/SPR-14447?redirect=false)** and commented  This minor bug was introduced in [commit 0adc492](https://github.com/spring-projects/spring-framework/commit/0adc4921ed4eadba531f12fdaa5faaf36265029b) in conjunction with #18534.  ---  **Affects:** 4.3 GA  **Issue Links:** - #18534 TestContextManager.afterTestMethod doesn't handle java.lang.Error!  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/629b95bd5cde8fb8634d9f7f2709b780bf85a03a, https://github.com/spring-projects/spring-framework/commit/813108a928fd50a1fb87e9333b974b6e7242b117","closed","type: bug,","spring-projects-issues","2016-07-10T13:51:13Z","2019-01-11T16:25:58Z"
"","19002","Introduce log4j 2 for Spring's test suite [SPR-14431]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14431](https://jira.spring.io/browse/SPR-14431?redirect=false)** and commented  ## Status Quo  #19000 removed all support for log4j 1.x; however, Spring's test suite actually used log4j (see all `src/test/resources/log4j.properties` files).  ## Deliverables  1. [x] Introduce test runtime dependencies on log4j 2 where applicable. 2. [x] Convert existing `log4j.properties` files to the `log4j2-test.xml` format.  ---  **Affects:** 5.0 M1  **Issue Links:** - #19000 Drop deprecated dependencies on Log4j, JRuby, JExcel, Burlap, Commons Pool/DBCP  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/adfea826ccbdd4119d945767bf31b0fa36182212, https://github.com/spring-projects/spring-framework/commit/1391248ea6cc5e5ce6a8e8fec1268a9304419b53","closed","type: task,","spring-projects-issues","2016-07-05T15:24:37Z","2019-01-11T16:26:19Z"
"","18973","Define and document rules for @Autowired self-injection in case of ambiguity [SPR-14402]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14402](https://jira.spring.io/browse/SPR-14402?redirect=false)** and commented  #### Status Quo  The support for self-injection via `@Autowired` introduced in #13096 works as expected if there is a single candidate bean; however, as soon as there is more than one such candidate self-injection becomes unreliable.  1. `@Primary` and `@Priority` have no influence, in contrast to standard autowiring semantics. 2. Field names do not serve as a fallback _qualifier_, in contrast to standard autowiring semantics. 3. The only work-around appears to be the use of `@Qualifier` for _every_ self-injection point.  #### Steps to Reproduce  The following test case can be used to experiment with all of the aforementioned failure scenarios.  Running `SelfInjectionTests` _as is_ in fact demonstrates that each `self` field **consistently** contains the _other_ bean of type `UserService`.  ```java @RunWith(SpringRunner.class) @ContextConfiguration(classes = { 	SelfInjectionTests.UserServiceImpl1.class, 	SelfInjectionTests.UserServiceImpl2.class }) public class SelfInjectionTests {  	@Autowired 	@Qualifier(""userService1"") 	UserService userService1;  	@Autowired 	@Qualifier(""userService2"") 	UserService userService2;  	@Test 	public void selfInjection1() { 		assertSame(userService1, userService1.getSelf()); 	}  	@Test 	public void selfInjection2() { 		assertSame(userService2, userService2.getSelf()); 	}  	interface UserService { 		UserService getSelf(); 	}  	@Service(""userService1"") 	@Primary 	static class UserServiceImpl1 implements UserService {  		@Autowired 		// @Qualifier(""userService1"") 		private UserService userService1;  		public UserService getSelf() { 			return this.userService1; 		}  		@Override 		public String toString() { 			return ""userService1""; 		} 	}  	@Service(""userService2"") 	static class UserServiceImpl2 implements UserService {  		@Autowired 		// @Qualifier(""userService2"") 		private UserService userService2;  		public UserService getSelf() { 			return this.userService2; 		}  		@Override 		public String toString() { 			return ""userService2""; 		} 	} } ```  ---  **Affects:** 4.3 GA  **Issue Links:** - #13096 Support `@Autowired-like` self injection  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c6752e6023c4948c0f2c007c166ab8ecf677d7b6","closed","in: core,","spring-projects-issues","2016-06-26T12:12:23Z","2019-01-13T05:24:23Z"
"","18935","ReflectionTestUtils should defensively invoke toString() on target objects [SPR-14363]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14363](https://jira.spring.io/browse/SPR-14363?redirect=false)** and commented  #### Status Quo  `ReflectionTestUtils` invokes `toString()` on target objects in order to create messages for exceptions and logging; however, as discussed in #14205, this practice can lead to problems if the invocation of `toString()` throws an exception.  The upgrade to Gradle 2.14 in #18934 made it apparent that `ReflectionTestUtils.setField()` in fact fails with an exception if the log level for `ReflectionTestUtils` is set to `DEBUG`. A quick inspection of the rest of the code in `ReflectionTestUtils` reveals that all other methods would fail in a similar fashion.  #### Deliverables  1. [x] Ensure that all invocations of `toString()` on target objects within `ReflectionTestUtils` are performed _defensively_ (i.e., by catching any exceptions).  ---  **Affects:** 3.2.17  **Issue Links:** - #14205 ReflectionTestUtils.setField() should not call toString() on the target - #18934 Upgrade build to Gradle 2.14.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/045ee522321ae99085ef2862f10892ba01837f20","closed","type: enhancement,","spring-projects-issues","2016-06-14T16:45:43Z","2019-01-11T16:02:12Z"
"","18934","Upgrade build to Gradle 2.14.1 [SPR-14362]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14362](https://jira.spring.io/browse/SPR-14362?redirect=false)** and commented  - [x] Upgrade the build to Gradle 2.14 once `master` has been switched to 5.0. - [x] Upgrade the build to Gradle 2.14.1 once it has been released.   - Current [Gradle release candidate](https://gradle.org/release-candidate/) page   - Gradle 2.14.1-rc-1 was released on June 29th, 2016.   - [Gradle 2.14.1-rc-2](https://docs.gradle.org/release-candidate/release-notes) is available as of July 11th, 2016.   - Gradle 2.14.1 was released on July 18th, 2016.  ---  **Issue Links:** - #19139 Upgrade 4.3.x build to Gradle 2.14.x (_**""is depended on by""**_) - #14205 ReflectionTestUtils.setField() should not call toString() on the target - #18789 Upgrade build to Gradle 2.13 - #19138 Upgrade build to Gradle 3.0 - #18935 ReflectionTestUtils should defensively invoke toString() on target objects","closed","type: task,","spring-projects-issues","2016-06-14T14:23:50Z","2019-01-11T16:02:15Z"
"","18927","Migrate to Asciidoctor 1.5 syntax [SPR-14355]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14355](https://jira.spring.io/browse/SPR-14355?redirect=false)** and commented  #### Status Quo  Commit [503956d](https://github.com/spring-projects/spring-framework/commit/503956d7c5cf69e65b0094e8303750adab3c8bc1) upgraded the build to use version 1.5.2 of the `asciidoctor-gradle-plugin`; however, there were additional changes in the Asciidoctor syntax that were missed.  For example, syntax like `\+\+TestExecutionListener\+\+s` (introduced in #16273) is no longer supported by Asciidoctor 1.5.x. Instead, the ```TestExecutionListener``s` syntax must be used.  Similarly, syntax like `\+\+guest\+\+/\+\+guest\+\+` must be replaced with ```guest``/``guest```.  See the [Migrating to Asciidoctor 1.5.0](http://asciidoctor.org/docs/migration/) guide for details.  #### Deliverables  - Migrate the reference manual to use the new syntax supported by Asciidoctor 1.5.x  ---  **Affects:** 4.2 GA  **Issue Links:** - #16273 Use unconstrained quotes instead of backticks in the reference manual - [XD-2369](https://jira.spring.io/browse/XD-2369) Make Asciidoc documentation compatible with Asciidoctor 1.5.x  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0815560c85888944f575a22b723cdd640676d01f","closed","type: documentation,","spring-projects-issues","2016-06-11T10:50:06Z","2019-01-11T16:03:36Z"
"","18994","Return type implementing DeferredResult is rejected with exception [SPR-14423]","**[S. Paetzold](https://jira.spring.io/secure/ViewProfile.jspa?name=spa)** opened **[SPR-14423](https://jira.spring.io/browse/SPR-14423?redirect=false)** and commented  In Spring 4.1.1.RELEASE following code used to work:  ```java @ResponseBody @RequestMapping(value = """", method = PUT) public CommandResult put(@Valid @RequestBody Record record) {    ...   CommandResult result = sendCommand(...);   return result; }    private class CommandResult     extends DeferredResult     implements CommandCallback {    @Override   public void onSuccess(Object result) {      setResult(result);   }    @Override   public void onFailure(Throwable cause) {     setErrorResult(cause);   } }  ```  Following exception is thrown:  ``` java.lang.IllegalArgumentException: Expected one of Callable, DeferredResult, or ListenableFuture: class com.ysura.rest.controller.ActivityController$CommandResult         at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod$ConcurrentResultMethodParameter.getParameterType(ServletInvocableHandlerMethod.java:273) ~[spring-webmvc-4.2.6.RELEASE.jar:4.2.6.RELEASE]         at org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler.supportsReturnType(ModelAndViewMethodReturnValueHandler.java:72) ~[spring-webmvc-4.2.6.RELEASE.jar:4.2.6.RELEASE]         at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.selectHandler(HandlerMethodReturnValueHandlerComposite.java:90) ~[spring-web-4.2.6.RELEASE.jar:4.2.6.RELEASE]         at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:77) ~[spring-web-4.2.6.RELEASE.jar:4.2.6.RELEASE]         at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:126) ~[spring-webmvc-4.2.6.RELEASE.jar:4.2.6.RELEASE]         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:832) ~[spring-webmvc-4.2.6.RELEASE.jar:4.2.6.RELEASE]         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:743) ~[spring-webmvc-4.2.6.RELEASE.jar:4.2.6.RELEASE]         at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.2.6.RELEASE.jar:4.2.6.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:961) ~[spring-webmvc-4.2.6.RELEASE.jar:4.2.6.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:895) ~[spring-webmvc-4.2.6.RELEASE.jar:4.2.6.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967) [spring-webmvc-4.2.6.RELEASE.jar:4.2.6.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:880) [spring-webmvc-4.2.6.RELEASE.jar:4.2.6.RELEASE]         at javax.servlet.http.HttpServlet.service(HttpServlet.java:710) [jetty-runner-9.3.6.v20151106.jar:9.3.6.v20151106]         at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843) [spring-webmvc-4.2.6.RELEASE.jar:4.2.6.RELEASE]         at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) [jetty-runner-9.3.6.v20151106.jar:9.3.6.v20151106]         at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:821) [jetty-runner-9.3.6.v20151106.jar:9.3.6.v20151106]         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1685) [jetty-runner-9.3.6.v20151106.jar:9.3.6.v20151106] ... ```  If the method return type is simply changed to `DeferredResult` it starts working again!  ---  **Affects:** 4.2.6  **Issue Links:** - #16826 HTTP Streaming and Server-Sent Events (SSE)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4ddd9572f70490bd8e1bc86bc89a74ea8391e942, https://github.com/spring-projects/spring-framework/commit/cfc560c4c460ed0ee465182d715339bd6e81c84b  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","in: core,","spring-projects-issues","2016-07-01T14:44:27Z","2019-01-11T16:27:34Z"
"","19140","A RequestParam collections not being parsed properly [SPR-14571]","**[Ryan Kaltreider](https://jira.spring.io/secure/ViewProfile.jspa?name=rkaltreider)** opened **[SPR-14571](https://jira.spring.io/browse/SPR-14571?redirect=false)** and commented  I have a request param defined as the following  `@RequestParam` List\ sourceIds  When I call the service with ?sourceIds=test1,test2  the values are parsed into the list properly When I call the service with ?sourceIds=test1&sourceIds=test2 only the last value is parsed into the list.  Is this intentional ro some type of new configuration?   --- No further details from [SPR-14571](https://jira.spring.io/browse/SPR-14571?redirect=false)","closed","status: invalid,","spring-projects-issues","2016-08-09T00:37:43Z","2019-01-12T05:22:17Z"
"","19408","The contract for StringValueResolver.resolveStringValue should be more explicit [SPR-14842]","**[Ryan Baxter](https://jira.spring.io/secure/ViewProfile.jspa?name=rbaxter)** opened **[SPR-14842](https://jira.spring.io/browse/SPR-14842?redirect=false)** and commented  The contract is unclear as to what value should be returned if the resolver could not resolve the value.  Should it return null?  Should it return the original value?   ---  **Affects:** 4.3.3  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/util/StringValueResolver.java#L37  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/20419d72ef8695b612153f40a21d5185755ed299, https://github.com/spring-projects/spring-framework/commit/fe19cfde28a8c4803b96c08a49d63baf2969be78","closed","type: documentation,","spring-projects-issues","2016-10-24T16:22:47Z","2016-11-07T22:01:23Z"
"","18917","Different error codes on same formatter registered in different ways [SPR-14345]","**[Ruslan Stelmachenko](https://jira.spring.io/secure/ViewProfile.jspa?name=djxak)** opened **[SPR-14345](https://jira.spring.io/browse/SPR-14345?redirect=false)** and commented  Using Spring Web MVC.  When new `org.springframework.format.Formatter` registered using `org.springframework.core.convert.ConversionService.addFormatter`, then when conversion fails because of parse error (in `Formatter.parse` method), then catched exception in the end turns into `org.springframework.beans.TypeMismatchException`.  When the same formatter registered in controller's `@InitBinder` method using `org.springframework.web.bind.WebDataBinder.addCustomFormatter`, then when conversion fails because of parse error (in `Formatter.parse method`), then catched exception in the end turns into `org.springframework.beans.MethodInvocationException`.  This difference leads to new problem: when you use Spring's i18n feature (`messages.properties`) to localize error messages, then message code is different depending on how formatter was registered.  In first case it is: `typeMismatch.*`. In second case it is: `methodInvocation.*`.  I'm not sure this is the intended behavior It is very strange and inconvinient, that the same formatter throws different error message depending on the way in which it was registered.  ---  **Affects:** 4.2.6  **Attachments:** - [spr-14345.zip](https://jira.spring.io/secure/attachment/23419/spr-14345.zip) (_71.26 kB_)  **Issue Links:** - #19225 TypeConverterSupport does not propagate custom exceptions anymore  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/367e663730229e645acf2e656e91dac9b8fa1e43, https://github.com/spring-projects/spring-framework/commit/f9e8924b3dd9dc883a503ed59ee88b17434aaeef, https://github.com/spring-projects/spring-framework/commit/c6f63bdb30dcbdbaaecaa772077cfa436698c0b4, https://github.com/spring-projects/spring-framework/commit/d51c22a7891108d9b86ce781df8ddbcfea6f85ce  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","type: bug,","spring-projects-issues","2016-06-08T13:32:06Z","2019-01-11T16:05:09Z"
"","19579","Create ResourceUrlEncodingFilter for the reactive module [SPR-15012]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15012](https://jira.spring.io/browse/SPR-15012?redirect=false)** and commented  Now that #19098 is resolved we can create a ResourceUrlEncoding filter that will encode static resource URLs.  ---  **Affects:** 5.0 M3  **Issue Links:** - #19098 Reactive response URL-rewriting mechanism","closed","type: enhancement,","spring-projects-issues","2016-12-14T11:01:21Z","2019-01-11T15:20:25Z"
"","19513","Normalize resource URL in ResourceServlet [SPR-14946]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14946](https://jira.spring.io/browse/SPR-14946?redirect=false)** and commented   ---  **Affects:** 3.2.17, 4.2.8, 4.3.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/43bf008fbcd0d7945e2fcd5e30039bc4d74c7a98, https://github.com/spring-projects/spring-framework/commit/e2d6e709c3c65a4951eb096843ee75d5200cfcad, https://github.com/spring-projects/spring-framework/commit/a7dc48534ea501525f11369d369178a60c2f47d0  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-11-24T02:37:20Z","2016-12-21T11:54:10Z"
"","19506","ResponseEntity builders should allow casting an empty body to any type [SPR-14939]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14939](https://jira.spring.io/browse/SPR-14939?redirect=false)** and commented  A ResponseEntity can be created for any body type without a body, e.g. `new ResponseEntity(HttpStatus.OK)`. The same however is not possible when using ResponseEntity builders where a `ResponseEntity` is returned for an empty body.  This makes the following impossible:  ```java @GetMapping(""/foo/{id}"") @ResponseBody public ResponseEntity handle(@PathVariable Long id) {     Foo foo = getFoo(id);     if (foo != null) {         return ResponseEntity.ok(foo);     }     else {         return ResponseEntity.notFound().build(); // Incompatible types compilation error     } } ```  The report is based on use case brought up in #19443.  ---  **Affects:** 4.3.4, 5.0 M3  **Issue Links:** - #19443 Returning Mono> causes NPE","closed","type: enhancement,","spring-projects-issues","2016-11-23T15:15:43Z","2019-01-11T19:18:27Z"
"","19486","Reactive view resolution should support a ""streaming"" model attribute [SPR-14919]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14919](https://jira.spring.io/browse/SPR-14919?redirect=false)** and commented  At present `ViewResolutionResultHandler` resolves all reactive/async types in the model before invoking the View to render.  For multi-value streams (Flux, Observable), in M3 we convert to a Mono effectively picking up only the first value and ignoring the rest. Post-M3 snapshots currently use Flux#collectionList() to obtain a Mono> essentially assuming all such streams have collection semantics. This is a fine assumption for most cases but there needs to be some way to allow a truly streaming model attribute.  A library such as Thymeleaf can then render HTML markup around elements as they come. Furthermore the `HttpMessageWriterView` (a View implementation that delegates to an HttpMessageWriter) would also naturally be able to render the same as JSON, XML, etc.  **Original Proposal**  The proposed solution would be for ViewResolutionResultHandler to only resolve single-valued streams and never multi-valued ones. This would mean applications would have to call `collectList()` (or similar) and add Mono or Single of a collection to the model instead of a Flux or Observable. This gives applications full control over collection semantics of model attributes.  **Updated Proposal**  Continue to resolve all reactive/async model attributes as we do now (post-M3) and provide a property on ViewResolutionResultHandler to configure the name of a ""streaming"" model attribute that should be left alone and not resolved proactively prior to rendering.  Note also that `HttpMessageWriterView` too would need a small change to expect and support rendering a reactive/async model attribute.    ---  **Affects:** 5.0 M3  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2016-11-17T18:15:58Z","2016-12-16T00:24:14Z"
"","19482","Reactive type support in org.springframework.core.Conventions [SPR-14915]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14915](https://jira.spring.io/browse/SPR-14915?redirect=false)** and commented  `Conventions` does not deal with parameter and/or value types such as Mono, Flux, and others, which can appear in controller method signatures and can also be added to the model.  An `ReactiveAdapterRegistry` is needed to determine if there is an async wrapper type to begin with and whether the variable name should be pluralized (Flux vs Mono). There is no good way to use use a ""pluggable"" ReactiveAdapterRegistry instance inside a utility class like Conventions so perhaps the solution could be to add overloaded methods in Conventions accepting an additional reactive type descriptor argument as a hint. This is currently the `ReactiveAdapter.Descriptor` type but will likely become a top-level type with a better name as part of #19468.  At present spring-web-reactive works around this and does not use Conventions. It does handle reactive types but what it does is rather basic (e.g. does not support collections and arrays) and certainly not properly encapsulated and re-usable.  ---  **Affects:** 5.0 M3  **Issue Links:** - #19468 ReactiveAdapter.Descriptor should have a more descriptive way of creating instances of it - #19775 Controller API for HTML rendering in WebFlux  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d78d82c516e08c9c74f9ad6260e7a54c8798a342, https://github.com/spring-projects/spring-framework/commit/5c502b87ca03669b92e13aa2db54d96fcd979066","closed","type: enhancement,","spring-projects-issues","2016-11-16T20:00:00Z","2019-01-11T19:19:49Z"
"","19479","Update Spring Web Reactive Reference documentation [SPR-14912]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14912](https://jira.spring.io/browse/SPR-14912?redirect=false)** and commented  * Framework integration tests * [spring-reactive-playground](https://github.com/sdeleuze/spring-reactive-playground) * [Reactor website re-write](https://github.com/sdeleuze/projectreactor.io/tree/spring-based-website) * [Spring Boot Web Reactive starter](https://github.com/bclozel/spring-boot-web-reactive) * Devoxx workshop * [Thymeleaf reactive playground](https://github.com/thymeleaf/thymeleafsandbox-springreactive)    ---  **Affects:** 5.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/963ea062e481a5c4334d0b1c94b16fac8ea5eff8","closed","type: task,","spring-projects-issues","2016-11-16T14:49:12Z","2016-12-30T13:33:16Z"
"","19403","ApplicationContext-based initialization of reactive WebFilter, WebHandler, WebExceptionHandler infrastructure [SPR-14837]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14837](https://jira.spring.io/browse/SPR-14837?redirect=false)** and commented  At present DispatcherHandler discovers the infrastructure it relies on in an ApplicationContext. The DispatchHandler however is itself expected to be instantiated and provided to the WebHttpHandlerBuilder along with instances of WebFilter and WebExceptionHandler.  As a practical example limitation the `@EnableWebReactive` configuration itself cannot automatically register a WebFilter for encoding links to static resources and that has to be left as an exercise for applications to do. Furthermore Spring Security will need to participate in the registration of filters which is also the motivation behind #19099. Coupled with that at present WebFilter is the only request interception mechanism exposed and any such mechanism should be easily accessible through a WebReactiveConfigurer for applications to use much like the registration of HandlerInterceptor's today.  The ability to declare WebExceptionHandler through WebReactiveConfigurer is also going to be very useful and along the same lines any properties that DispatcherHandler may expose in the future will be more easily configurable.  Spring Boot does mitigate these issues and has already done the same for Servlet-based applications. However on the reactive side it makes sense to provide a more complete ApplicationContext-based initialization mechanism for reactive web applictaions.  ---  **Affects:** 5.0 M2  **Issue Links:** - #19099 Reactive WebFilter registration mechanism (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/33dbbce1824a5af9b85a838a51fd3654dc8d1ede","closed","type: enhancement,","spring-projects-issues","2016-10-21T20:09:07Z","2019-01-11T17:28:28Z"
"","19364","Better encapsulate and Javadoc CORS configuration defaults [SPR-14798]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14798](https://jira.spring.io/browse/SPR-14798?redirect=false)** and commented  At present the `@CrossOrigin` annotation has constants that define some default attribute values (although not for HTTP methods?) and these values are used in places where `CorsConfiguration` is created.  We need to check if these defaults are applied consistently and consider consolidating the logic to do that, most likely in `CorsConfiguration`. Either by setting its attributes to those values by default, or providing some convenience method to apply it.  Also the Javadoc on individual methods of `CorsRegistration` could be added to reflect those defaults since that's that what users of the MVC Java config are more likely to see rather than the class-level Javadoc.    ---  **Affects:** 5.0 M2","closed","type: enhancement,","spring-projects-issues","2016-10-11T00:42:21Z","2016-11-07T22:01:23Z"
"","19291","Add support for context paths in Spring Web Reactive [SPR-14726]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14726](https://jira.spring.io/browse/SPR-14726?redirect=false)** and commented  At present there is no concept of a context path in Spring Web Reactive but there is an expressed need on some level at least.  Per [Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer): It's a feature used quite a bit in Spring Boot and in Spring Cloud where pre-configured apps are created. The thing I use the context path for the most is running multiple apps on localhost with different cookies. That's probably worth considering as a common scenario. Doesn't have to be done with a context path, but I think that makes the most sense.  Per #19279: A context path can also ""creep in"" as a side effect of running in a Servlet container.  For M2 a `getContextPath()` method will be introduced in `ServerHttpRequest` as a short term solution to the issue for #19279. However we should really consider explicit support for a context path in our configuration across all supported server runtimes.  ---  **Affects:** 5.0 M1  **Issue Links:** - #19279 Reactive path matching does not consider servlet context path  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b92d541ba0934052769d0bcf08fec7d8c44d2c2d, https://github.com/spring-projects/spring-framework/commit/0bace1b0ae7aec176607a8ffdbf3497bab7755a5","closed","type: enhancement,","spring-projects-issues","2016-09-16T19:01:55Z","2019-01-11T17:12:54Z"
"","19228","Add ResourceRegionHttpMessageWriter [SPR-14664]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14664](https://jira.spring.io/browse/SPR-14664?redirect=false)** and commented  We'll need this to complete support for static resource handling.  ---  **Affects:** 5.0 M1  **Issue Links:** - #19125 Refactor how hints (like JsonView) are passed to codecs (_**""depends on""**_) - #18407 Add support for http byte-range requests for non-static resources","closed","type: enhancement,","spring-projects-issues","2016-09-02T22:09:52Z","2019-01-11T18:22:42Z"
"","18168","Align existing checkNotModified support in Spring MVC with same on the reactive side [SPR-14659]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14659](https://jira.spring.io/browse/SPR-14659?redirect=false)** and commented  `ServerWebExchange#checkNotModified` should be functionally equivalent with the same in `WebRequest` but is more encapsulated and slightly re-arranged to align more closely with the Precedence section of RFC 7232. Most notably on the reactive side, the handling of ResponseEntity simply delegates to `ServerWebExchange` vs duplicating the same checks.  We should align the 5.0 code base on the Spring MVC and the Reactive side. For 4.3 it might be a bit harder but we can at least consider it.  ---  **Affects:** 5.0 M1  **Issue Links:** - #19222 backport improvements made in SPR-14522 about check not modified (_**""is duplicated by""**_) - #19091 Reactive HTTP request ""check not modified"" support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/43c60a02f703ef5d0686452c63299c43e08a03b0, https://github.com/spring-projects/spring-framework/commit/cc5300c4d558e3f86d592ef615104ab9092a34f4, https://github.com/spring-projects/spring-framework/commit/6501bc5d32f4150e5197031f3b943add44305aa4, https://github.com/spring-projects/spring-framework/commit/20d2e31632f0da8d4f53800df0976d2daf687b34","closed","type: enhancement,","spring-projects-issues","2016-09-01T22:18:00Z","2019-01-11T18:23:38Z"
"","19223","Add ServerWebExchange argument resolver [SPR-14658]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14658](https://jira.spring.io/browse/SPR-14658?redirect=false)** and commented  A resolver for direct access to the ServerWebExchange, as well as more specific contained types (e.g. request, response, etc) from a controller method.  ---  **Affects:** 5.0 M1  **Issue Links:** - #19179 Add ServerHttpRequest/HttpRequest MethodArgumentResolver (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9f8791ac010da6c01689a78f802d16f206820bb1","closed","type: enhancement,","spring-projects-issues","2016-09-01T21:01:15Z","2019-01-11T18:23:32Z"
"","19216","[Build] The merge plugin does not work with an import into IntelliJ [SPR-14650]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14650](https://jira.spring.io/browse/SPR-14650?redirect=false)** and commented  After an import into IntelliJ the spring-context, spring-test, and spring-web modules fail to compile due to dependencies on the GroovyBeanDefinitionReader.  As a workaround under the Project Structure each failing module can be manually updated to have a dependency on spring-beans-groovy.  This was tested with IntelliJ 2016.1.4 and 2016.2.2.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/09f16747b582faf12598c63e929a0e8a48be4317","closed","type: task,","spring-projects-issues","2016-08-31T16:23:19Z","2016-09-21T12:13:13Z"
"","19206","Improve Spring Web Reactive getting started documentation [SPR-14640]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14640](https://jira.spring.io/browse/SPR-14640?redirect=false)** and commented  Remove the references to our TestServer abstraction and show the code required to bootstrap each supported version.   ---  **Affects:** 5.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/391752abc2880de14471841f5a0a627a4cf3c802","closed","type: task,","spring-projects-issues","2016-08-29T15:43:32Z","2016-09-21T12:13:13Z"
"","19114","Reactive multipart request support [SPR-14546]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14546](https://jira.spring.io/browse/SPR-14546?redirect=false)** and commented  This needs to be investigated. I don't know if there is anything in the Servlet API for this that's non-blocking.  ---  **Affects:** 5.0 M1  **Issue Links:** - #20501 WebClient: Multipart POST doesn't work - #19109 Reactive HTTP request data binding - #19710 Functional Web API support for HTML form processing - #20067 Remove support for ""request params"" from WebFlux - #18979 Introduce HttpHeaders getContentDisposition() and setContentDisposition()  0 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2016-07-30T01:53:08Z","2019-01-11T18:07:16Z"
"","19113","Reactive HTTP request CORS Support [SPR-14545]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14545](https://jira.spring.io/browse/SPR-14545?redirect=false)** and commented  ---  **Affects:** 5.0 M1  **Issue Links:** - #19360 Fix HttpRequest#getURI() with Netty based engines (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e31a2f778bf401f59cb6ae5124bf2d8b70e8606f","closed","type: enhancement,","spring-projects-issues","2016-07-30T01:48:13Z","2019-01-11T18:06:44Z"
"","19111","Reactive HTTP request @InitBinder support [SPR-14543]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14543](https://jira.spring.io/browse/SPR-14543?redirect=false)** and commented  ---  **Affects:** 5.0 M1  **Issue Links:** - #19109 Reactive HTTP request data binding (_**""depends on""**_) - #19110 Reactive HTTP request `@ModelAttribute` support","closed","type: enhancement,","spring-projects-issues","2016-07-30T01:18:37Z","2019-01-13T05:23:02Z"
"","19110","Reactive HTTP request @ModelAttribute support [SPR-14542]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14542](https://jira.spring.io/browse/SPR-14542?redirect=false)** and commented  ---  **Affects:** 5.0 M1  **Issue Links:** - #19109 Reactive HTTP request data binding (_**""depends on""**_) - #19111 Reactive HTTP request `@InitBinder` support","closed","type: enhancement,","spring-projects-issues","2016-07-30T01:18:10Z","2019-01-13T05:23:03Z"
"","19109","Reactive HTTP request data binding [SPR-14541]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14541](https://jira.spring.io/browse/SPR-14541?redirect=false)** and commented  ---  **Affects:** 5.0 M1  **Issue Links:** - #19108 Reactive HttpMessageReader/Writer for ""x-www-form-url-encoded"" data (_**""depends on""**_) - #19111 Reactive HTTP request `@InitBinder` support (_**""is depended on by""**_) - #19110 Reactive HTTP request `@ModelAttribute` support (_**""is depended on by""**_) - #19114 Reactive multipart request support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/00a35897fe2d2667fbdfbbbf86bb9036b99c552a, https://github.com/spring-projects/spring-framework/commit/b28b3e887705f6fb8525bcfa4ffba72de003687c, https://github.com/spring-projects/spring-framework/commit/d87aa40efe851194c3add8ed2ff5082d0a1aadf1, https://github.com/spring-projects/spring-framework/commit/8a043ae9aad072f888650b9ccd929f6c1e61e7fa","closed","type: enhancement,","spring-projects-issues","2016-07-30T01:15:53Z","2019-01-13T05:23:05Z"
"","19108","Reactive HttpMessageReader/Writer for ""x-www-form-url-encoded"" data [SPR-14540]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14540](https://jira.spring.io/browse/SPR-14540?redirect=false)** and commented  ---  **Affects:** 5.0 M1  **Issue Links:** - #19109 Reactive HTTP request data binding (_**""is depended on by""**_) - #19710 Functional Web API support for HTML form processing (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/46599e7d039b95acb141308c7dfa5d3398404bc1","closed","type: enhancement,","spring-projects-issues","2016-07-29T17:20:10Z","2019-01-11T18:06:22Z"
"","19104","Reactive request and response in SpEL expression within @MVC annotations [SPR-14535]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14535](https://jira.spring.io/browse/SPR-14535?redirect=false)** and commented  Currently we have annotated controller method arguments, e.g. `@PathVariable`, `@RequestParam`, `@RequestHeader`, CookieValue, `@Value`, etc. Many of them support SpEL expressions and those should support expressions referring to the request, response, and possibly the exchange.   ---  **Affects:** 5.0 M1","open","type: enhancement,","spring-projects-issues","2016-07-29T16:31:14Z","2017-02-13T20:59:24Z"
"","19101","Reactive STOMP WebSocket messaging support [SPR-14532]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14532](https://jira.spring.io/browse/SPR-14532?redirect=false)** and commented  Based on spring-reactive [Issue 17](https://github.com/spring-projects/spring-reactive/issues/17) and also see [early experiment](https://github.com/rstoyanchev/spring-reactive/tree/messaging-poc).   ---  **Affects:** 5.0 M1  4 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2016-07-29T16:16:12Z","2019-01-29T20:04:06Z"
"","19100","Upgrade spring-messaging to the latest Reactor Netty client [SPR-14531]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14531](https://jira.spring.io/browse/SPR-14531?redirect=false)** and commented  For consistent use of Reactor 3, getting rid of our remaining Reactor 2.0.8 dependency.   ---  **Affects:** 5.0 M1  **Issue Links:** - [INT-4125](https://jira.spring.io/browse/INT-4125) Upgrade STOMP module to the latest spring-messaging foundation (_**""is depended on by""**_)  1 votes, 6 watchers","closed","type: task,","spring-projects-issues","2016-07-29T16:10:10Z","2016-12-30T13:33:14Z"
"","19097","Leverage Jackson non-blocking JSON parsing (and remove netty-buffer dependency) [SPR-14528]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14528](https://jira.spring.io/browse/SPR-14528?redirect=false)** and commented  ---  **Affects:** 5.0 M1  **Issue Links:** - #19492 Support for Jackson 2.9 (_**""depends on""**_) - #20349 WebClient fails on empty JSON array response - #20358 Parse error when reading JSON through the Jackson non-blocking parser - #19985 Add Jackson Smile support to WebFlux - #20107 Upgrade to Jackson 2.9 GA","closed","type: task,","spring-projects-issues","2016-07-29T15:32:10Z","2019-01-11T18:07:28Z"
"","19096","Reactive WebSocket adapter layer [SPR-14527]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14527](https://jira.spring.io/browse/SPR-14527?redirect=false)** and commented  A reactive equivalent of `WebSocketHandler` along with request upgrade support and adapters.  The JSR-356 WebSocket Session has an [async send](https://docs.oracle.com/javaee/7/api/javax/websocket/RemoteEndpoint.Async.html) with a callback for the result which can be translated into basic backpressure sending messages one at at time. No other options like isReady in the Servlet 3.1 non-blocking I/O. Also no options for flow control on the input side as far as I can see.  Jetty looks to be similar although there may be some extension hooks.  ---  **Affects:** 5.0 M1  **Issue Links:** - #18671 Expose asynchronous message sending in WebSocketSession  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2016-07-29T15:23:02Z","2019-01-11T17:40:08Z"
"","19094","Reactive HTTP request and response support for cache control options [SPR-14525]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14525](https://jira.spring.io/browse/SPR-14525?redirect=false)** and commented  An alternative to the `WebContentGenerator` for use with the reactive HTTP request and response exploring the option of a delegate vs a base class.  ---  **Affects:** 5.0 M1  **Issue Links:** - #19090 Reactive static resource handler (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2016-07-29T14:27:19Z","2019-01-11T17:40:14Z"
"","19091","Reactive HTTP request ""check not modified"" support [SPR-14522]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14522](https://jira.spring.io/browse/SPR-14522?redirect=false)** and commented  Provide support for checkNotModified similar to what is currently in `WebRequest#checkNotModified`.  ---  **Affects:** 5.0 M1  **Issue Links:** - #19090 Reactive static resource handler (_**""is depended on by""**_) - #18168 Align existing checkNotModified support in Spring MVC with same on the reactive side","closed","type: enhancement,","spring-projects-issues","2016-07-28T15:23:23Z","2019-01-11T17:39:51Z"
"","19090","Reactive static resource handler [SPR-14521]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14521](https://jira.spring.io/browse/SPR-14521?redirect=false)** and commented  Provide an equivalent to the ResourceHttpRequestHandler along with the ResourceResolver and ResourceTransformer chains for use with spring-web-reactive.  ---  **Affects:** 5.0 M1  **Issue Links:** - #19094 Reactive HTTP request and response support for cache control options (_**""depends on""**_) - #19091 Reactive HTTP request ""check not modified"" support (_**""depends on""**_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2016-07-28T15:20:29Z","2019-01-11T17:40:01Z"
"","19066","Add documentation on web reactive support [SPR-14497]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14497](https://jira.spring.io/browse/SPR-14497?redirect=false)** and commented  We need some basic information at least such as what how to run a simple example.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5cf8b695cb50206204636e8602b3c68d3d46b7c0","closed","type: task,","spring-projects-issues","2016-07-20T13:42:47Z","2016-07-28T14:17:37Z"
"","19036","Comprehensive Servlet 3.1 support in spring-web and spring-test [SPR-14467]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14467](https://jira.spring.io/browse/SPR-14467?redirect=false)** and commented  spring-web needs to compile with Servlet 3.1 to take advantage of the non-blocking I/O but we originally aimed to maintain 3.0 compatibility.  As a result of the reactive merge the ContentCachingRequest/ResponseWrapper had to implement 3.1 methods with Read/WriteListener. We'd need a custom solution that makes those usable with Servlet 3.0+.  Along the same lines the upgrade also required some test classes to add 3.1 related methods. Many of those were temporarily added without implementation, i.e. raising an exception. We should review and add implementations.  ---  **Issue Links:** - #17781 Drop Servlet 2.5 runtime compatibility - #17273 Support for Servlet 4.0 API","closed","type: enhancement,","spring-projects-issues","2016-07-14T20:40:27Z","2019-01-11T16:23:39Z"
"","18992","Reactive request and response ""mocks"" [SPR-14421]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14421](https://jira.spring.io/browse/SPR-14421?redirect=false)** and commented  These would be equivalent to the Servlet API mock objects under: `org.springframework.mock.web`  For reactive we have client and server HTTP request/response abstractions under: `org.springframework.http.client.reactive` `org.springframework.http.server.reactive`  Also web exchange, session, session manager, and filter chain under: `org.springframework.web.server`  We currently have some of those already for testing purposes but need to also make them available as part of spring-test.  ---  **Issue Links:** - #19159 Reactive MockMvc equivalent (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a1ac51256a96360c63e26a556cd84133f840dfb8, https://github.com/spring-projects/spring-framework/commit/73752c295d9aad626f3428939b2841bb4f6d05dc, https://github.com/spring-projects/spring-framework/commit/e17132c217c8fc54ea11108ef9a0938323633367","closed","type: enhancement,","spring-projects-issues","2016-06-30T19:31:49Z","2019-01-11T16:27:24Z"
"","18893","Provide API to expose Spring MVC's ability to match requests [SPR-14321]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14321](https://jira.spring.io/browse/SPR-14321?redirect=false)** and commented  In principle Spring MVC matches requests using an instance of `AntPathMatcher`. However there are additional [path matching options](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-config-path-matching) for annotated `@Controller` methods such as suffix pattern mapping, trailing slash matches, and others. The AntPathMatcher itself has various properties that affect how it matches requests and each HandlerMapping can be configured differently in this regard.  The goal of this ticket is to expose an API to determine whether a given request matches a given pattern. A 3rd party framework can then use this to align its own request matching configuration with that of Spring MVC.   ---  **Affects:** 4.2.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/16949941f83251662cf3c71a2a2cc6c3f806a2f6, https://github.com/spring-projects/spring-framework/commit/a30ab30e4e9ae021fdda04e9abfc228476b846b5  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-05-31T18:07:39Z","2016-07-04T10:17:09Z"
"","18858","Scheduled tasks aren't cancelled on ScheduledTaskRegistrar destruction anymore [SPR-14286]","**[Romain Moreau](https://jira.spring.io/secure/ViewProfile.jspa?name=romainmoreau)** opened **[SPR-14286](https://jira.spring.io/browse/SPR-14286?redirect=false)** and commented  With Spring 4.3.0.RC1, when ScheduledTaskRegistrar was destroyed, scheduled futures were cancelled correctly.  Now, with Spring 4.3.0.RC2, when ScheduledTaskRegistrar is destroyed, scheduled tasks aren't cancelled because the [scheduledTasks collection used to iterate the tasks to cancel](https://github.com/spring-projects/spring-framework/blob/v4.3.0.RC2/spring-context/src/main/java/org/springframework/scheduling/config/ScheduledTaskRegistrar.java#L485) is empty.  Here's below the code for a quick and dirty reproduction case. To run with Spring 4.3.0.RC1, replace the spring-boot-starter-parent version with 1.4.0.M2. With Spring 4.3.0.RC1, you'll see in the log ""1 scheduled found"" as expected. With Spring 4.3.0.RC2, you'll see in the log ""0 scheduled found"" (scheduledTasks set is empty).  ```xml     4.0.0        org.springframework.boot     spring-boot-starter-parent     1.4.0.M3      scheduled-repro             4.2.6.RELEASE                  org.springframework.boot       spring-boot-starter                                org.springframework.boot         spring-boot-maven-plugin                              spring-milestones       http://repo.spring.io/milestone                true                              spring-milestones       http://repo.spring.io/milestone                true                 ```  ```java package scheduledrepro;  import org.springframework.beans.factory.annotation.*; import org.springframework.boot.*; import org.springframework.boot.autoconfigure.*; import org.springframework.scheduling.annotation.*; import org.springframework.scheduling.config.*; import org.springframework.scheduling.concurrent.*; import org.springframework.context.annotation.*; import org.springframework.boot.context.event.*; import org.springframework.context.event.*; import org.springframework.util.*; import java.lang.*; import java.lang.reflect.*; import java.util.*; import org.slf4j.*;  @EnableScheduling @SpringBootApplication public class ScheduledReproApplication implements SchedulingConfigurer {  private static final Logger LOGGER = LoggerFactory.getLogger(ScheduledReproApplication.class);   private ScheduledTaskRegistrar taskRegistrar;   @Override  public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {   this.taskRegistrar = taskRegistrar;   taskRegistrar.setScheduler(threadPoolTaskScheduler());  }   @Bean  public ThreadPoolTaskScheduler threadPoolTaskScheduler() {   return new ThreadPoolTaskScheduler();  }   @org.springframework.context.event.EventListener  public void applicationReadyEvent(ApplicationReadyEvent applicationReadyEvent) throws Exception {   Field field = ReflectionUtils.findField(ScheduledTaskRegistrar.class, ""scheduledTasks""); // Spring 4.3.0.RC2   if (field == null) {    field = ReflectionUtils.findField(ScheduledTaskRegistrar.class, ""scheduledFutures""); // Spring 4.3.0.RC1   }   field.setAccessible(true);   Set < ? > scheduledTasks = (Set < ? > ) field.get(taskRegistrar);   LOGGER.info(""{} scheduled found"", scheduledTasks.size());  }   @Scheduled(cron = ""* * * * * *"")  public void scheduled() {   LOGGER.info(""Scheduled"");  }   public static void main(String[] args) throws Exception {   SpringApplication.run(ScheduledReproApplication.class, args);  } } ```  ---  **Affects:** 4.3 RC2  **Issue Links:** - #16830 ScheduledAnnotationBeanPostProcessor should unregister tasks on destruction of individual beans  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3576ff051cf13ccc97d8b0fea8d961d204c15f0d","closed","in: core,","spring-projects-issues","2016-05-18T14:26:16Z","2019-01-11T17:02:28Z"
"","19577","Scoped EntityManager bean cannot get unwrapped to Session (with Hibernate 5.2) [SPR-15010]","**[Rodolfo Labsch](https://jira.spring.io/secure/ViewProfile.jspa?name=w.rodolfo.labsch)** opened **[SPR-15010](https://jira.spring.io/browse/SPR-15010?redirect=false)** and commented  Cannot cast spring created proxy to a different object interface. e.g.: Given the bean: `@Bean` `@Scope`(value = ""request"", proxyMode = ScopedProxyMode.TARGET_CLASS) public EntityManager myEntityManager(EntityManagerFactory emf) { return emf.createEntityManager(); }  If I try to cast it or maybe unwrap the instance, we get a class cast exception: `@Autowired` EntityManager em;  Session s = em.unwrap(Session.class) -> ClassCastException Session s = ((Session) em) -> ClassCastException  ---  **Affects:** 4.2.8  **Issue Links:** - #18899 Support for Hibernate ORM 5.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6d1cae2f577e08ef28a21143404f4db1ab12dcaf, https://github.com/spring-projects/spring-framework/commit/d15df3489e3139d3ae15499c7a5c8c9dbb24b573","closed","type: enhancement,","spring-projects-issues","2016-12-13T16:48:30Z","2019-01-11T15:20:05Z"
"","19005","Conversion annotations should be considered at setter parameter level as well [SPR-14434]","**[Rod Widdowson](https://jira.spring.io/secure/ViewProfile.jspa?name=rdw@steadingsoftware.com)** opened **[SPR-14434](https://jira.spring.io/browse/SPR-14434?redirect=false)** and commented  We (the Shibboleth project) use annotations combined with a conversion service to simplify configuration.  This allows us (for instance) to specify that an appropriately annotated long can be specified as an XML duration and we all the conversion can be delegated to the Converter.  ```xml  ```  Since we also make extensive use of customer schemas/parsers and properties this saves us a lot FactoryBeans.  This has served us exceptionally well, but we found a drawback recently.  I believe that this is a bug, it may just be a feature, and I'd like to understand which it is.  The bug is demonstrated in the attached stand-alone program.  Basically it appeared to us that under some circumstances, if we have a setter  ```java public void setFoo(@Duration long what) ```  the annotation wouldn't have made it onto the parameter by the time we were called at our converter.  After some review it appears that in `org.springframework.core.convert.Property#resolveAnnotations()` the annotations are added to the parameter:  * From the field * From the getter return value. * From the setter _method_ not the setter _parameter_  So if our object had a correctly named and annotated getter or field then the conversion happened.  We had assumed that the annotation should apply to the parameter, not the method.  Mostly we got lucky because we had either a correctly annotated field or getter, but in one case we didn't and someone found it.  We can and will work around this but as I said above I believe that this is a bug...    ---  **Affects:** 4.2.4  **Attachments:** - [AnnotationBugTest.java](https://jira.spring.io/secure/attachment/23436/AnnotationBugTest.java) (_5.44 kB_)","closed","type: enhancement,","spring-projects-issues","2016-07-06T09:07:15Z","2016-12-24T21:35:19Z"
"","19029","Documentation still favoring velocity but it is deprecated in 4.3 [SPR-14460]","**[Robin Tan](https://jira.spring.io/secure/ViewProfile.jspa?name=redeath@gmail.com)** opened **[SPR-14460](https://jira.spring.io/browse/SPR-14460?redirect=false)** and commented  http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mail.html  Velocity are deprecated in 4.3 in favor of Freemarker. But documentation are still teaching how to use Spring + Velocity. This is confusing for people  ---  **Affects:** 4.3.1  **Issue Links:** - #17826 Deprecate Velocity support - #18368 Remove Velocity support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/12bff6b3a02cb720594d726f3a771792842d3726","closed","type: documentation,","spring-projects-issues","2016-07-14T10:18:25Z","2019-01-11T16:23:07Z"
"","19333","ETag header is removed from PUT/POST/PATCH responses [SPR-14767]","**[Robert Winkler](https://jira.spring.io/secure/ViewProfile.jspa?name=robwin)** opened **[SPR-14767](https://jira.spring.io/browse/SPR-14767?redirect=false)** and commented  Hi,  it seems after this commit (https://github.com/spring-projects/spring-framework/commit/cc5300c4d558e3f86d592ef615104ab9092a34f4) ETag headers are only added to GET/HEAD requests/responses. We can't add ETag headers to PUT/POST/PATCH responses anymore.  We are doing conditional POST/PUT/PATCH requests with ""If-Match"" HTTP header to check that the resource has not been modified concurrently by another client. The response either contains a HTTP 200 Code and the ETag header of the updated resource or a HTTP 412 Precondition failed, if the resource has been modified by another client (when the If-Match header does not match the current ETag header of the resource).  Right now we can't return the ETag of the updated resource anymore.  Kind regards,  Robert Winkler  ---  **Affects:** 4.3.3, 5.0 M2  **Reference URL:** #18168  **Issue Links:** - #19389 Regression: ETag and Last-Modified headers are removed in non-safe methods that return 200 OK (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ee17f566269b0cb9969050a7f6a66573b1e8b072, https://github.com/spring-projects/spring-framework/commit/c98cdd4f4c2f57f45d9b0344ca76474c3e7a11b9  1 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2016-09-29T09:28:04Z","2019-01-14T04:37:42Z"
"","19600","Support Verifying Errors with @ContextConfiguration at method level [SPR-15034]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15034](https://jira.spring.io/browse/SPR-15034?redirect=false)** and commented  It would be nice if #16647 could support verifying errors. For example something like this:  ```java @Test(expected = BeanDefinitionParsingException.class) @ContextConfiguration(""classpath:/just-this-method.xml"") public void testBeanDefinitionParsingException() {} ```  It would also be nice if we could access the entire Exception for verifying the description / caused by, etc.  ```java @Test @ContextConfiguration(""classpath:/just-this-method.xml"") public void testBeanDefinitionParsingException(@ExpectedException BeanDefinitionParsingException expected) {     assertThat(expected).hasDescription(""Ooops""); } ```  ---  **Issue Links:** - #16647 Support `@ContextConfiguration` at method level (_**""depends on""**_)","closed","status: bulk-closed,","spring-projects-issues","2016-12-19T21:18:21Z","2019-01-15T10:56:07Z"
"","19559","Review path matching options and defaults in the new path matching algorithms [SPR-14993]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-14993](https://jira.spring.io/browse/SPR-14993?redirect=false)** and commented  We should review options and defaults we would like to have as part of the new path matching refinements work under #19112. Especially on the reactive side we can choose different defaults and there be an opportunity to do that for existing code if the switch (from AntPathMatcher to the new one) is explicit.  For example, does the pattern `/foo` match `/foo`, `/foo/`, `/foo.html`, `/ foo`.  As part of this we should also consider default options for the strategy for determining what the path that is being matched on is, i.e. `HttpRequestPathHelper` in terms of normalizing the path by removing `..`, `.`, path parameters (i.e. semi-colon content), etc.  ---  **Issue Links:** - #20167 Replace ParsingPathMatcher with PathPattern registry - #20198 Favor query parameters for content negotiation in WebFlux - #20199 Use undecoded path for request mapping in WebFlux","closed","type: task,","spring-projects-issues","2016-12-07T16:51:55Z","2019-01-11T19:13:53Z"
"","19528","Simplify ExchangeFilterFunction on specific WebClient exchanges [SPR-14961]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-14961](https://jira.spring.io/browse/SPR-14961?redirect=false)** and commented  Currently it is not very intuitive how one would use an `ExchangeFilterFunction`. For example:  ``` ExchangeFunction robsClient = basicAuthentication(""rob"",""rob"")     .apply(this.webClient::exchange); Mono> response = robsClient     .exchange(get(""/secret"").build())     .then(...); ```  Given a WebClient or a HeadersBuilder it is not very intuitive how to leverage  `ExchangeFilterFunction`. Instead it would be nice if we could do something like:  ``` Mono> response = this.webClient     .filter(basicAuthentication(""rob"",""rob""))     .exchange(get(""/secret"").build())     .then(...); ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9e720330366bafa3ebeaed3cd99e5bca710308d5","closed","type: task,","spring-projects-issues","2016-11-30T15:07:19Z","2016-12-30T13:33:15Z"
"","19434","Consider changing return type of WebSession.getAttribute to Mono [SPR-14868]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-14868](https://jira.spring.io/browse/SPR-14868?redirect=false)** and commented  I am not sure if this is going overboard, but it is worth discussing at least. Similar to #19432 I wonder if it is worth changing the signature of `WebSession.getAttribute` to:  ```java  Mono getAttribute(String name); ```  The reason is that this would allow a `WebSession` implementation that looks up attributes on demand rather than forcing the loading of the entire `WebSession`. Loading the attributes on demand is a feature that users of Spring Session want.  It may also involve changing some of the other methods to `Mono`.  ---  No further details from [SPR-14868](https://jira.spring.io/browse/SPR-14868?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2016-11-01T16:04:21Z","2019-01-12T00:12:07Z"
"","19432","Consider changing return type of ServerWebExchange.getPrincipal [SPR-14866]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-14866](https://jira.spring.io/browse/SPR-14866?redirect=false)** and commented  After further consideration, I think it it might be a good idea to change the return type of `ServerWebExchange.getPrincipal` to be a `Mono`:  ```java  Mono getPrincipal(); ```  The reason is that it is quite likely the `Principal` will need looked up via the `WebSession` which may be a blocking operation.   --- No further details from [SPR-14866](https://jira.spring.io/browse/SPR-14866?redirect=false)","closed","type: task,","spring-projects-issues","2016-11-01T15:55:47Z","2019-01-11T17:27:34Z"
"","19431","ServerWebExchangeArgumentResolver should resolve Principal [SPR-14865]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-14865](https://jira.spring.io/browse/SPR-14865?redirect=false)** and commented  `ServerWebExchangeArgumentResolver` should resolve the `Principal` and `Optional` from the `ServerWebExchange`  ---  This issue is a sub-task of #19244","closed","type: task,","spring-projects-issues","2016-11-01T15:35:13Z","2019-01-11T17:27:30Z"
"","19252","Add param method to DefaultClientWebRequestBuilder [SPR-14688]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-14688](https://jira.spring.io/browse/SPR-14688?redirect=false)** and commented  It would be useful if `DefaultClientWebRequestBuilder` had the ability to specify HTTP parameters with a `param` method, so the consumer doesn't need to worry about encoding.   --- No further details from [SPR-14688](https://jira.spring.io/browse/SPR-14688?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-09-09T19:32:52Z","2016-10-20T14:19:43Z"
"","19246","Add HttpBasic ClientWebRequestPostProcessor [SPR-14682]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-14682](https://jira.spring.io/browse/SPR-14682?redirect=false)** and commented  It would be nice to have a `ClientWebRequestPostProcessor` that adds HTTP Basic Authorization header. The usage might look like:  ```java webClient     .perform(get(""/"").apply(httpBasic(""user"", ""password"")))     ...; ```    ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1164","closed","type: enhancement,","spring-projects-issues","2016-09-08T21:10:46Z","2016-09-21T12:13:12Z"
"","19244","Add way to obtain Principal from ServerWebExchange [SPR-14680]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-14680](https://jira.spring.io/browse/SPR-14680?redirect=false)** and commented  ---  **Affects:** 5.0 M1  **Sub-tasks:** - #19431 ServerWebExchangeArgumentResolver should resolve Principal","closed","type: enhancement,","spring-projects-issues","2016-09-08T18:29:38Z","2019-01-11T18:20:23Z"
"","19159","Reactive MockMvc equivalent [SPR-14590]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-14590](https://jira.spring.io/browse/SPR-14590?redirect=false)** and commented  It would be great to have an equivalent of MockMvc for the Reactive support. This would allow for testing with Spring Security, hooks for Spring REST Docs, etc  ---  **Issue Links:** - #18992 Reactive request and response ""mocks"" (_**""depends on""**_)","closed","type: enhancement,","spring-projects-issues","2016-08-16T15:38:13Z","2019-01-11T18:02:47Z"
"","19153","HtmlUnitRequestBuilder corrupts the parent RequestBuilder [SPR-14584]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-14584](https://jira.spring.io/browse/SPR-14584?redirect=false)** and commented  `HtmlUnitRequestBuilder` corrupts the parent `RequestBuilder`. For example:  ```java String pathInfo = ""/foo/bar""; MockMvc mockMvc = MockMvcBuilders.standaloneSetup(new HelloController()) 		.defaultRequest(get(""/"")) 		.build();  // passes assertThat(mockMvc.perform(get(pathInfo)).andReturn().getRequest().getPathInfo(), equalTo(pathInfo));  // corrupts the pathInfo of the parent builder mockMvc.perform(requestBuilder);  // fails because the parent builder's path info is now set to ""/""	 assertThat(mockMvc.perform(get(pathInfo)).andReturn().getRequest().getPathInfo(), equalTo(pathInfo));  ```    ---  **Affects:** 4.3.2, 5.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/43faabd4cc19fc1ffa197a24e8750c44fc615c34, https://github.com/spring-projects/spring-framework/commit/966baea91083844bfc7644abcde08a74e77e5244","closed","type: bug,","spring-projects-issues","2016-08-13T01:38:28Z","2016-09-19T15:55:27Z"
"","19106","Reactive HTTP request forwarding [SPR-14537]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-14537](https://jira.spring.io/browse/SPR-14537?redirect=false)** and commented  Here is a scenario I find it very useful:  Someone is using Spring Security and we need to present the user with an ""authentication prompt"". Often times this will vary by content type. So for example, I might need to return an HTTP Basic prompt for application/json but redirect to an HTML page for html request. In the json case the result might even contain some JSON in the body giving the error message.  If we support a concept like forward, this can make it easy to define a Spring `@RequestMapping` endpoint to process it. This means that the user can easily leverage things like type conversion, argument resolvers, etc.  Otherwise, (as far as I can tell) Spring Security must provide support for all these things or handicap the user with a less flexible API.  I do acknowledge having different ""dispatch"" types adds quite a bit of complexity, so that might not be worth the tradeoff. However, I thought it was worth bringing up for discussion  [Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop) points out that this would be useful in error handling (i.e. similar to global error handler ""forwards"" to a controller).  ---  **Affects:** 5.0 M1  **Issue Links:** - #20367 Improve WebExceptionHandler mechanism  1 votes, 6 watchers","open","type: enhancement,","spring-projects-issues","2016-07-29T16:39:26Z","2019-01-11T18:07:55Z"
"","18854","Clarify @Bean(autowire=NO) [SPR-14282]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-14282](https://jira.spring.io/browse/SPR-14282?redirect=false)** and commented  Given the following classes:  ```java  public class Foo {  	@Autowired 	Bar bar; }  public class Bar { }  @Configuration public class Config {  	@Bean 	public Foo foo() { 		return new Foo(); 	}  	@Bean 	public Bar bar() { 		return new Bar(); 	} } ```  It is not logical that the following test will fail since the `autowire` attribute on `@Bean`  is by default `NO`:  ```java try (AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()) { 	ctx.register(Config.class); 	ctx.refresh();  	Foo foo = ctx.getBean(Foo.class);  	assertThat(foo.bar, nullValue()); } ```  ---  **Affects:** 3.2.17, 4.2.6, 4.3 RC2  **Issue Links:** - #18751 Should `@Configuration` mark `@Inject` fields and setters as satisfied (injected)?  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7da129539fbb3cfb687ad0099ba1c83127c3ab05, https://github.com/spring-projects/spring-framework/commit/98eaf05c8fb2ecf630a3d6e58b4c3d2fb7b79d3c, https://github.com/spring-projects/spring-framework/commit/a0a2a3337a3c9c806b80130f6c4cd7e82db4395d  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","in: core,","spring-projects-issues","2016-05-17T17:02:55Z","2019-01-13T05:25:46Z"
"","18837","MockMvcWebConnection should update cookie manager with MockHttpServletResponse cookies [SPR-14265]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-14265](https://jira.spring.io/browse/SPR-14265?redirect=false)** and commented  Currently `MockMvcWebConnection` does not update the cookie manager with the cookies from MockHttpServletResponse. This means that newly added cookies are not saved to the cookie manager and thus are not presented in the next request.  The exception is the JSESSIONID cookie which has special logic to handle it and to ensure that the session is managed.  ---  **Affects:** 4.3 RC2  **Issue Links:** - #18638 MockMvcWebConnection should share CookieManager with HtmlUnit driver  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1055, and commits https://github.com/spring-projects/spring-framework/commit/e2fa282e14102d9f5c00b2e848f7649847c2fd89, https://github.com/spring-projects/spring-framework/commit/54f84cbd977643d812c146253af54909691de7af","closed","type: enhancement,","spring-projects-issues","2016-05-11T05:08:18Z","2019-01-11T17:03:41Z"
"","19335","Spring @RequestMapping javadoc wrong (String) [SPR-14769]","**[Richard Keene](https://jira.spring.io/secure/ViewProfile.jspa?name=rmkeene@gmail.com)** opened **[SPR-14769](https://jira.spring.io/browse/SPR-14769?redirect=false)** and commented  The `@RequestMapping` tag has incorrect documentation for the String return type. Looks like it was copied from the one above.  Should read that returning a String from an  `@ResponseBody` is taken as literal HTML.   ---  **Affects:** 4.3.3","closed","status: declined,","spring-projects-issues","2016-09-29T20:36:38Z","2019-01-12T16:33:52Z"
"","19463","getBeanDefinitionNames should not leak the frozenBeanDefinitionNames array [SPR-14897]","**[Richard Fearn](https://jira.spring.io/secure/ViewProfile.jspa?name=richardfearn)** opened **[SPR-14897](https://jira.spring.io/browse/SPR-14897?redirect=false)** and commented  `getBeanDefinitionNames` leaks the `getBeanDefinitionNames` array to callers. It's possible for the caller to modify the array, which affects Spring's internal list of the names of beans in the context.  ---  **Affects:** 4.3.4  **Attachments:** - [Spr14897Test.java](https://jira.spring.io/secure/attachment/23616/Spr14897Test.java) (_732 bytes_)  **Issue Links:** - #17012 DefaultListableBeanFactory should allow efficient access to current bean names - #19488 DefaultListableBeanFactory.copyConfigurationFrom should provide independent AutowireCandidateResolver instance","closed","type: enhancement,","spring-projects-issues","2016-11-10T18:29:58Z","2019-01-11T17:39:11Z"
"","19078","LinkedCaseInsensitiveMap doesn't override HashMap.clone() [SPR-14509]","**[Richard Browne](https://jira.spring.io/secure/ViewProfile.jspa?name=spring@richb.net)** opened **[SPR-14509](https://jira.spring.io/browse/SPR-14509?redirect=false)** and commented  LinkedCaseInsensitiveMap derives from HashMap, but it does not override the clone() method. As a result, if you clone() a LinkedCaseInsensitiveMap, then subsequently modify the clone, the original can become corrupt.  Here is a test program to illustrate:  ```java public class Test { 	public static void main(String[] args) 	{ 		LinkedCaseInsensitiveMap map1 = new LinkedCaseInsensitiveMap<>(); 		map1.put(""KEY"", ""FOO""); 		LinkedCaseInsensitiveMap map2 = (LinkedCaseInsensitiveMap)map1.clone(); 		map2.put(""Key"", ""Foo""); 		String value = map1.get(""KEY"");  		System.err.format(""Got '%s', expected 'FOO' .. "", value); 		System.err.println(""FOO"".equals(value) ? ""SUCCESS"" : ""FAIL!""); 	} } ```  The map1.get(""KEY"") line should return ""FOO"". But instead it returns null.  ---  **Affects:** 3.2.17, 4.2.7, 4.3.1  **Issue Links:** - #18553 LinkedCaseInsensitiveMap doesn't implement getOrDefault properly - #19593 LinkedCaseInsensitiveMap does not properly support Java 8's merge() and compute() methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/64595597f32b25335232b2a2b5c2252a4fa990c0, https://github.com/spring-projects/spring-framework/commit/dd65f7acfc3ecb053f3f7b82a3a10e1a5d14b0ce, https://github.com/spring-projects/spring-framework/commit/e8562bb3afdfa98b073c74e02d6b1e20a8c1b12c, https://github.com/spring-projects/spring-framework/commit/dadd2c3709900a019ee021c1f6073e19349f9065  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","in: core,","spring-projects-issues","2016-07-25T01:40:20Z","2019-01-11T17:40:19Z"
"","19452","Use String.intern() for Class reading [SPR-14886]","**[Renier Roth](https://jira.spring.io/secure/ViewProfile.jspa?name=renier)** opened **[SPR-14886](https://jira.spring.io/browse/SPR-14886?redirect=false)** and commented  Another place where String.intern() can be used as described in issue #19428 is in file: org.springframework.asm.ClassReader line: 3463  {CODE} /** * Reads a class constant pool item in {`@link` #b b}. \This method is  * intended for {`@link` Attribute} sub classes, and is normally not needed by  * class generators or adapters.\  *   * `@param` index  *         the start index of an unsigned short value in {@link #b b},  *         whose value is the index of a class constant pool item.  * `@param` buf  *         buffer to be used to read the item. This buffer must be  *         sufficiently large. It is not automatically resized.  * `@return` the String corresponding to the specified class item.   */   public String readClass(final int index, final char[] buf) {   // computes the start index of the CONSTANT_Class item in b   // and reads the CONSTANT_Utf8 item designated by   // the first two bytes of this CONSTANT_Class item   return readUTF8(items[readUnsignedShort(index)], buf);   }   {CODE}  This is the most inner class i could find that create the String. So the return of this method can use ....intern()  This method is used internally inside the class for super / interface and other classnames. Spring uses this ClassReader via an Visitor ""AnnotationMetadataReadingVisitor"" more precise the extend ""ClassMetadataReadingVisitor"".  This visitor is returned as an implementation for the Interface ""AnnotationMetadata"" inside ""SimpleMetadataReader"" which is the only implementation for an metadata reader in the ""ScannedGenericBeanDefinition"" definition which will be hold inside memory.  Complicated enough, if you read backwards the ScannedGenericBeanDefinition stores the metadata as a field. This is the Visitor described above, which uses the ASM ClassReader to generate the Strings. The Strings are stored multiple times in Memory, this can be avoided to intern the String inside this chain of classes - most inner one is ClassReader (see source above).  ---  **Affects:** 4.3.4  **Issue Links:** - #19428 Use String.intern() for Annotation and Class scanning - #19637 Upgrade to ASM 5.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3a29daac45d9450006e5ac463e1c82e995d408af, https://github.com/spring-projects/spring-framework/commit/7ffed858f04f582100eb87088e995ff5171a36e0","closed","type: enhancement,","spring-projects-issues","2016-11-08T13:26:12Z","2019-01-11T17:25:23Z"
"","19428","Use String.intern() for Annotation and Class scanning [SPR-14862]","**[Renier Roth](https://jira.spring.io/secure/ViewProfile.jspa?name=renier)** opened **[SPR-14862](https://jira.spring.io/browse/SPR-14862?redirect=false)** and commented  Consider Using String.intern() on the Type scanned by the Visitors. These Strings are always identical but are duplicated in Memory cause of new String() call.  Class: org.springframework.asm.Type Line 565 & 580  example: {CODE:linenumbers=true} /** * Returns the binary name of the class corresponding to this type. This  * method must not be used on method types.  *   * `@return` the binary name of the class corresponding to this type.   */   public String getClassName() {   switch (sort) {   case VOID:   return ""void"";   case BOOLEAN:   return ""boolean"";   case CHAR:   return ""char"";   case BYTE:   return ""byte"";   case SHORT:   return ""short"";   case INT:   return ""int"";   case FLOAT:   return ""float"";   case LONG:   return ""long"";   case DOUBLE:   return ""double"";   case ARRAY:   StringBuilder sb = new StringBuilder(getElementType().getClassName());   for (int i = getDimensions(); i > 0; --i) {   sb.append(""[]"");   }   return sb.toString();   case OBJECT:   return new String(buf, off, len).replace('/', '.');   default:   return null;   }   }    /**    * Returns the internal name of the class corresponding to this object or   * array type. The internal name of a class is its fully qualified name (as   * returned by Class.getName(), where '.' are replaced by '/'. This method   * should only be used for an object or array type.   *    * `@return` the internal name of the class corresponding to this object type.     */     public String getInternalName() {     return new String(buf, off, len);     }  {CODE}  Changed to: {CODE:linenumbers=true} /** * Returns the binary name of the class corresponding to this type. This  * method must not be used on method types.  *   * `@return` the binary name of the class corresponding to this type.   */   public String getClassName() {   switch (sort) {   case VOID:   return ""void"";   case BOOLEAN:   return ""boolean"";   case CHAR:   return ""char"";   case BYTE:   return ""byte"";   case SHORT:   return ""short"";   case INT:   return ""int"";   case FLOAT:   return ""float"";   case LONG:   return ""long"";   case DOUBLE:   return ""double"";   case ARRAY:   StringBuilder sb = new StringBuilder(getElementType().getClassName());   for (int i = getDimensions(); i > 0; --i) {   sb.append(""[]"");   }   return sb.toString();   case OBJECT:   return new String(buf, off, len).replace('/', '.').intern();   default:   return null;   }   }    /**    * Returns the internal name of the class corresponding to this object or   * array type. The internal name of a class is its fully qualified name (as   * returned by Class.getName(), where '.' are replaced by '/'. This method   * should only be used for an object or array type.   *    * `@return` the internal name of the class corresponding to this object type.     */     public String getInternalName() {     return new String(buf, off, len).intern();     }  {CODE} Lines difference in 34 & 49  This is used by several visitors on Class/Annotation scanning. The names of these Classes are then cached, but uses a new String Reference in Memory.  By Using String.intern() we can avoid duplicated Strings. Memory Consumption and count of duplicated Strings depends on How many Annotations you have in your managed Beans.  ---  **Affects:** 4.3.3  **Issue Links:** - #19637 Upgrade to ASM 5.2 - #19452 Use String.intern() for Class reading  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d859826be67084cb7005fc1f8eb29f206ac824c3, https://github.com/spring-projects/spring-framework/commit/61d7d1621bbd8a4a86061833a548d50665ba8239","closed","type: enhancement,","spring-projects-issues","2016-10-31T09:34:09Z","2019-01-11T17:27:15Z"
"","19184","CorsConfiguration checkHeaders wildcard ALL should allow matching empty strings header [SPR-14617]","**[Rene Loitzenbauer](https://jira.spring.io/secure/ViewProfile.jspa?name=rlb)** opened **[SPR-14617](https://jira.spring.io/browse/SPR-14617?redirect=false)** and commented  There is currently an issue with Chrome 52 where the header Access-Control-Request-Headers is sent as an empty string. Details here: (https://bugs.chromium.org/p/chromium/issues/detail?id=633729)  I thought I could fix it by setting the annotation ``` `@CrossOrigin`(allowedHeaders = ""*"")  ```in order to allow all header values including empty strings. But the implementation in CorsConfiguration:checkHeaders uses StringUtils.hasText(requestHeader) which evaluates to false for empty strings thus preventing that the following wildcard match is evaluated at all.  I'm not sure what the CORS spec says to empty values as headers, therefore I submit this as an Improvement. ```  ---  **Affects:** 4.2.7  **Attachments:** - [cors-test.zip](https://jira.spring.io/secure/attachment/23516/cors-test.zip) (_2.67 kB_)  **Issue Links:** - #18797 Consistent handling of multi-valued headers in HttpHeaders  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1e8065d04053ab629f7a06adcb20fc4d6b63db29, https://github.com/spring-projects/spring-framework/commit/d047174c6bce23c3f35590bc2e7ea63cce06838d","closed","type: enhancement,","spring-projects-issues","2016-08-23T11:58:08Z","2019-01-11T18:09:41Z"
"","19254","Spring WebSockets should support token-based authentication [SPR-14690]","**[Raman Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=raman)** opened **[SPR-14690](https://jira.spring.io/browse/SPR-14690?redirect=false)** and commented  There seems to be an inconsistency in the way Spring Messaging WebSocket is implemented and reality, when using token based authentication.  From the discussion on issue #17761 it is clear that Spring expects the authentication to be done during the HTTP message that establishes the web socket. This is fine for cookie-based auth, but when one is using a token, the token cannot be sent to the server in the headers, because SockJS does not support this (because browsers do not support it). See: https://github.com/sockjs/sockjs-client/issues/196.  Now, one has two options: 1) send the token in a query parameter (which has some security issues), or 2) as suggested in #17761, configure a  `ChannelInterceptor` on the ""clientInboundChannel"" and pass the token as a Stomp message header. Neither approach seems to be a complete solution.  The first approach, besides having security issues with server-side logging of the token and possible referral leaks, does not seem to work for SockJS fallbacks -- for fallbacks, the `determineUser` method to extract the user from the query parameter is never called.  The second approach works well up to a point: Spring Security sees the Principal set here and sets the security context properly (awesome!). However, the Principal is never set in the websocket session, and so it is not possible to send messages to a specific user, because Spring cannot tie the username to a session id.  ---  **Affects:** 4.3.2  **Issue Links:** - #18953 Better documentation on WebSockets and support for token based authentication - #17761 Improve web socket header support  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-09-10T21:33:52Z","2019-01-14T04:37:59Z"
"","18848","StandardMultipartHttpServletRequest requires filename in Content-Disposition [SPR-14276]","**[Raman Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=raman)** opened **[SPR-14276](https://jira.spring.io/browse/SPR-14276?redirect=false)** and commented  The StandardMultipartHttpServletRequest currently requires the `Content-Disposition` to have a `filename` defined in order to create a MultipartFile from the request:  https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java#L102  However, as per the RFCs, the `filename` is strongly recommended but is **not** required:  > File inputs may also identify the file name. The file name may be described using the 'filename' parameter of the ""content-disposition"" header. This is not required, but is strongly recommended in any case where the original filename is known. [Source](https://tools.ietf.org/html/rfc1867#section-7)    ---  **Affects:** 4.2.6","closed","type: enhancement,","spring-projects-issues","2016-05-16T20:52:13Z","2016-05-26T21:45:34Z"
"","19292","java.lang.NoClassDefFoundError: org/springframework/core/enums/LabeledEnum [SPR-14727]","**[Rajesh](https://jira.spring.io/secure/ViewProfile.jspa?name=gururajesh)** opened **[SPR-14727](https://jira.spring.io/browse/SPR-14727?redirect=false)** and commented  During runtime, I am getting this error.  The application is not using the LabeledEnum or Enum. So there is no trace of issue. Unable to find the root cause. All the POM files have the spring version of 4.2.6. java.lang.NoClassDefFoundError: org/springframework/core/enums/LabeledEnum at org.springframework.web.servlet.tags.form.SelectedValueComparator.exhaustiveCompare(SelectedValueComparator.java:156) at org.springframework.web.servlet.tags.form.SelectedValueComparator.isSelected(SelectedValueComparator.java:103) at org.springframework.web.servlet.tags.form.AbstractCheckedElementTag.isOptionSelected(AbstractCheckedElementTag.java:60) at org.springframework.web.servlet.tags.form.AbstractCheckedElementTag.renderFromValue(AbstractCheckedElementTag.java:50) at org.springframework.web.servlet.tags.form.AbstractCheckedElementTag.renderFromValue(AbstractCheckedElementTag.java:39) at org.springframework.web.servlet.tags.form.RadioButtonTag.writeTagDetails(RadioButtonTag.java:41) at org.springframework.web.servlet.tags.form.AbstractSingleCheckedElementTag.writeTagContent(AbstractSingleCheckedElementTag.java:86) at org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:102) at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:79) at jsp_servlet.__piecesearch._jsp__tag6(__piecesearch.java:554) at jsp_servlet.__piecesearch._jspService(__piecesearch.java:349) at weblogic.servlet.jsp.JspBase.service(JspBase.java:35) at weblogic.servlet.internal.StubSecurityHelper$ServletServiceAction.run(StubSecurityHelper.java:280) at weblogic.servlet.internal.StubSecurityHelper$ServletServiceAction.run(StubSecurityHelper.java:254) at weblogic.servlet.internal.StubSecurityHelper.invokeServlet(StubSecurityHelper.java:136) at weblogic.servlet.internal.ServletStubImpl.execute(ServletStubImpl.java:346) at weblogic.servlet.internal.TailFilter.doFilter(TailFilter.java:25) at weblogic.servlet.internal.FilterChainImpl.doFilter(FilterChainImpl.java:79)   ---  **Affects:** 4.2.6","closed","in: core,","spring-projects-issues","2016-09-16T22:40:33Z","2019-01-12T05:21:57Z"
"","19451","Spring context initializtion failed [SPR-14885]","**[Ragavamoorthy](https://jira.spring.io/secure/ViewProfile.jspa?name=raghavan1212)** opened **[SPR-14885](https://jira.spring.io/browse/SPR-14885?redirect=false)** and commented  Hi ,  One of our projects is containing spring-jmx.2.0.8.jar and spring-context-4.2.6.jar in the same path and we are getting the below exception when particular method is invoked,  - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'cacheExporter' defined in URL [jar:file:/apps/vcmp/prod/instances/prod1/vcmp-services-4.0.0/webapps/vcmp-distribution-4.0.0/WEB-INF/lib/vcmp-management-4.0.0.jar!/META-INF/spring/jmxContext.xml]: Invocation of init method failed; nested exception is java.lang.NoSuchMethodError: org.springframework.core.JdkVersion.isAtLeastJava15()Z at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1578) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)  When we analysed we found like , The method name ""isAtLeastJava15()"" is not present in jdkVersion class of spring-core-4.2.6.jar and java version we are using 1.8.0.102.  Now we are planning to remove the spring-jmx-2.0.8.jar from the path as we spring-context-4.2.6.jar,but we are concerned with impacts on other functionality which spring-jm-2.0.8.jar only provides. This issue is also not occuring on all the environments and only on some environments .  kindly help us by suggesting to go for removal of spring-jmx.2.0.8.jar and also the reason for loading class from spring jmx evn spring-context.4.2.6.jar is there.  Regards, Raghavan  [StackOverFlow link](http://stackoverflow.com/questions/40403535/spring-context-initializtion-failed)    ---  **Affects:** 4.2.6","closed","in: core,","spring-projects-issues","2016-11-08T03:34:25Z","2019-01-12T05:21:40Z"
"","18910","FormHttpMessageConverter should use configured charset (by default UTF-8) for ""text-plain"" MIME part conversion as well [SPR-14338]","**[Rafał Garbowski](https://jira.spring.io/secure/ViewProfile.jspa?name=rafal_rg9)** opened **[SPR-14338](https://jira.spring.io/browse/SPR-14338?redirect=false)** and commented  Problem: By default ""FormHttpMessageConverter"" encodes ""text/plain"" parts of ""MULTIPART_FORM_DATA"" message in ""latin-1"" charset, so eastern european characters are not supported.  Here is example, where I want to send value ""łęąć"". How it works now:  ```     --CJRdVETZo8EZUnHRNhUAkJxwfgiaRlH     Content-Disposition: form-data; name=""param""     Content-Type: text/plain;charset=ISO-8859-1     Content-Length: 4      ????     --CJRdVETZo8EZUnHRNhUAkJxwfgiaRlH-- ```  And how it should work:  ```     --QHVM39WsZleGp9jW4RYYKzO7OcqwMpQZRpaQcS7     Content-Disposition: form-data; name=""param""     Content-Type: text/plain;charset=UTF-8     Content-Length: 8      łęąć     --QHVM39WsZleGp9jW4RYYKzO7OcqwMpQZRpaQcS7-- ```  Now workaround is defining all default converters once again in some configuration bean, setting UTF-8 to ""StringHttpMessageConverter"" and then putting back as argument of method ""setPartConverters"".  ``` formConverter.setPartConverters(Arrays.asList(new ByteArrayHttpMessageConverter(), new StringHttpMessageConverter(Charsets.UTF_8), new ResourceHttpMessageConverter())); ```  Why not use UTF-8 by default to encode ""plain/text"" MIME parts? Here is link to ""pull-request"" of this solution on GitHub: https://github.com/spring-projects/spring-framework/pull/1072/commits/3cdda3a4f3c0fc75e7365afe2694f0316bb296cb  In [multipart/form-data](https://www.ietf.org/rfc/rfc2388.txt) specs I didn't find a word about **preferable** encoding. In our case ""FormHttpMessageConverter"" is **forcing** ""ISO-8859-1"" charset. It isn't the same as not defining it at all and allowing recipient to use **default** - see [this answer](http://stackoverflow.com/questions/4085449/multipart-form-data-what-is-the-default-charset-for-fields) on stackoverflow. So [FIX presented on Github](https://github.com/spring-projects/spring-framework/pull/1072) shouldn't crash old systems. Is there any application that accepts only ""latin-1"" encoded requests? I don't think so.  ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1072  **Issue Links:** - #18209 Allow specifying HTTP response Content-Type without losing default charset - #19959 Possibility to configure encoding other than ascii in FormHttpMessageConverter.MultipartHttpOutputMessage","closed","type: enhancement,","spring-projects-issues","2016-06-07T15:10:16Z","2019-01-11T16:07:16Z"
"","19271","one beanfactory can not have more than one TransactionManager  when low memory [SPR-14706]","**[qxo](https://jira.spring.io/secure/ViewProfile.jspa?name=qxo)** opened **[SPR-14706](https://jira.spring.io/browse/SPR-14706?redirect=false)** and commented  sample code :  git clone https://github.com/qxo/spring-pull-1661-test  cd /spring-pull-1661-test  mvn test ===> will found the bug!  and fix pull : https://github.com/spring-projects/spring-framework/pull/1161  then setTransactionManagerBeanName on spring config (TransactionProxyFactoryBean) will slove the issue.  ---  **Issue Links:** - #19177 Transaction manager cache fails to repopulate when multiple transaction managers defined (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2016-09-13T12:54:22Z","2019-01-12T16:45:27Z"
"","19288","Example of websocket reconnect [SPR-14723]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-14723](https://jira.spring.io/browse/SPR-14723?redirect=false)** and commented  Currently there is no code sample or documentation for the spring websocket client that shows what the right way to reconnect a connection.  considering my current code here:  ```java    void setup()     {          try         {             Log.debug(""Connecting to realtime service"");             connectionInProgress = true;             WebSocketContainer webSocketContainer = new MyContainerProvider().create();             List transports = new ArrayList(1);             transports.add(new WebSocketTransport(new StandardWebSocketClient(webSocketContainer)));              SockJsClient sockJsClient = new SockJsClient(transports);             sockJsClient.setMessageCodec(new StringMessageCodec());              stompClient = new WebSocketStompClient(sockJsClient);             stompClient.setMessageConverter(new StringMessageConverter());             stompClient.start();              stompClient.connect(WS_URL, new MyStompSessionHandler());         } catch (Exception e)         {             Log.debug(""Error connecting to realtime service"",e);              stompSession = null;             stompSession = null;         }     }      void stop()     {         StompSession stompSession = this.stompSession;         if(stompSession!=null)         {             try             {                 if(stompSession.isConnected())                 {                     stompSession.disconnect();                     Log.trace(""Disconnecting from websocket"");                 }             } catch (Exception e)             {                 Log.debug(""error disconnecting"", e);             }             this.stompSession = null;         }         WebSocketStompClient stompClient = this.stompClient;         if(stompClient!=null)         {             try             {                 stompClient.stop();             } catch (Exception e)             {                 Log.debug(""error stopping websocket"", e);             }              this.stompClient = null;         }          connectionInProgress = false;     } ```  It is unclear how much of the code in `setup()` i need to call again each time i need to reconnect a disconnected connection, or do I need to call `setup()` again and re-instantiate all the objects all over.   ---  **Affects:** 4.3.2  1 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2016-09-15T21:06:21Z","2019-01-30T19:34:07Z"
"","19286","exception during websocket client close [SPR-14721]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-14721](https://jira.spring.io/browse/SPR-14721?redirect=false)** and commented  To reproduce:  Keep the websocket client running and shutdown the server.  Here is the setup and stop code -  ```java class MyWS {  void setup() throws ExecutionException, InterruptedException     {          WebSocketContainer webSocketContainer = new MyContainerProvider().create();         List transports = new ArrayList(1);         transports.add(new WebSocketTransport(new StandardWebSocketClient(webSocketContainer)));          SockJsClient sockJsClient = new SockJsClient(transports);         sockJsClient.setMessageCodec(new StringMessageCodec());          stompClient = new WebSocketStompClient(sockJsClient);         stompClient.setMessageConverter(new StringMessageConverter());         stompClient.start();          stompClient.connect(WS_URL, new MyStompSessionHandler());     }  void stop()     {         StompSession stompSession = this.stompSession;         if(stompSession!=null)         {             try             {                 if(stompSession.isConnected())                 {                     stompSession.disconnect();                     Log.trace(""Disconnecting from websocket"");                 }             } catch (Exception e)             {                 Log.debug(""error disconnecting"", e);             }             this.stompSession = null;         }     }  private class MyStompSessionHandler extends StompSessionHandlerAdapter     {         @Override         public void afterConnected(StompSession session, StompHeaders connectedHeaders)         {             MyWS.this.stompSession = session;         }          @Override         public void handleFrame(StompHeaders headers, Object payload)         {             super.handleFrame(headers, payload);         }          @Override         public void handleException(StompSession session, StompCommand command, StompHeaders headers, byte[] payload, Throwable exception)         {             Log.debug(""Exception in realtime socket"", exception);         }          @Override         public void handleTransportError(StompSession session, Throwable exception)         {             MyWS.this.stop();         }     }     }  ```  Here is the exception:  ```java  2016-09-15 09:48:25,909 [Grizzly(1)] DEBUG   -  error disconnecting java.com.chronon.apm.libs.org.springframework.messaging.MessageDeliveryException: nested exception is java.lang.IllegalStateException: WebSocketClientSockJsSession[id='1f1aafad087b4cc78047f42b47b2ea3f, url=http://127.0.0.1:8082/wsgame] is not open, current state=CLOSED 	at java.com.chronon.apm.libs.org.springframework.messaging.simp.stomp.DefaultStompSession.execute(DefaultStompSession.java:277) 	at java.com.chronon.apm.libs.org.springframework.messaging.simp.stomp.DefaultStompSession.disconnect(DefaultStompSession.java:326) 	at java.com.chronon.apm.realtime.SpringWS.stop(SpringWS.java:88) 	at java.com.chronon.apm.realtime.SpringWS$MyStompSessionHandler.handleTransportError(SpringWS.java:190) 	at java.com.chronon.apm.libs.org.springframework.messaging.simp.stomp.DefaultStompSession.handleFailure(DefaultStompSession.java:444) 	at java.com.chronon.apm.libs.org.springframework.messaging.simp.stomp.DefaultStompSession.afterConnectionClosed(DefaultStompSession.java:459) 	at java.com.chronon.apm.libs.org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter.afterConnectionClosed(WebSocketStompClient.java:354) 	at java.com.chronon.apm.libs.org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.afterTransportClosed(AbstractClientSockJsSession.java:321) 	at java.com.chronon.apm.libs.org.springframework.web.socket.sockjs.client.WebSocketTransport$ClientSockJsWebSocketHandler.afterConnectionClosed(WebSocketTransport.java:172) 	at java.com.chronon.apm.libs.org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.onClose(StandardWebSocketHandlerAdapter.java:141) 	at java.com.chronon.apm.libs.org.glassfish.tyrus.core.TyrusEndpointWrapper.onClose(TyrusEndpointWrapper.java:1259) 	at java.com.chronon.apm.libs.org.glassfish.tyrus.core.TyrusWebSocket.onClose(TyrusWebSocket.java:130) 	at java.com.chronon.apm.libs.org.glassfish.tyrus.core.ProtocolHandler.close(ProtocolHandler.java:469) 	at java.com.chronon.apm.libs.org.glassfish.tyrus.core.TyrusWebSocket.close(TyrusWebSocket.java:264) 	at java.com.chronon.apm.libs.org.glassfish.tyrus.core.TyrusWebSocket.close(TyrusWebSocket.java:274) 	at java.com.chronon.apm.libs.org.glassfish.tyrus.core.TyrusRemoteEndpoint.close(TyrusRemoteEndpoint.java:495) 	at java.com.chronon.apm.libs.org.glassfish.tyrus.core.TyrusSession.close(TyrusSession.java:233) 	at java.com.chronon.apm.libs.org.springframework.web.socket.adapter.standard.StandardWebSocketSession.closeInternal(StandardWebSocketSession.java:217) 	at java.com.chronon.apm.libs.org.springframework.web.socket.adapter.AbstractWebSocketSession.close(AbstractWebSocketSession.java:139) 	at java.com.chronon.apm.libs.org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.tryCloseWithError(ExceptionWebSocketHandlerDecorator.java:94) 	at java.com.chronon.apm.libs.org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.handleTextMessage(StandardWebSocketHandlerAdapter.java:113) 	at java.com.chronon.apm.libs.org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.access$000(StandardWebSocketHandlerAdapter.java:42) 	at java.com.chronon.apm.libs.org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$3.onMessage(StandardWebSocketHandlerAdapter.java:81) 	at java.com.chronon.apm.libs.org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$3.onMessage(StandardWebSocketHandlerAdapter.java:78) 	at java.com.chronon.apm.libs.org.glassfish.tyrus.core.TyrusSession.notifyMessageHandlers(TyrusSession.java:576) 	at java.com.chronon.apm.libs.org.glassfish.tyrus.core.TyrusEndpointWrapper.onMessage(TyrusEndpointWrapper.java:879) 	at java.com.chronon.apm.libs.org.glassfish.tyrus.core.TyrusWebSocket.onMessage(TyrusWebSocket.java:216) 	at java.com.chronon.apm.libs.org.glassfish.tyrus.core.frame.TextFrame.respond(TextFrame.java:139) 	at java.com.chronon.apm.libs.org.glassfish.tyrus.core.ProtocolHandler.process(ProtocolHandler.java:807) 	at java.com.chronon.apm.libs.org.glassfish.tyrus.client.TyrusClientEngine$TyrusReadHandler.handle(TyrusClientEngine.java:747) 	at java.com.chronon.apm.libs.org.glassfish.tyrus.container.grizzly.client.GrizzlyClientFilter$ProcessTask.execute(GrizzlyClientFilter.java:476) 	at java.com.chronon.apm.libs.org.glassfish.tyrus.container.grizzly.client.TaskProcessor.processTask(TaskProcessor.java:114) 	at java.com.chronon.apm.libs.org.glassfish.tyrus.container.grizzly.client.TaskProcessor.processTask(TaskProcessor.java:91) 	at java.com.chronon.apm.libs.org.glassfish.tyrus.container.grizzly.client.GrizzlyClientFilter.handleRead(GrizzlyClientFilter.java:272) 	at java.com.chronon.apm.libs.org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119) 	at java.com.chronon.apm.libs.org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:284) 	at java.com.chronon.apm.libs.org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:201) 	at java.com.chronon.apm.libs.org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:133) 	at java.com.chronon.apm.libs.org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:112) 	at java.com.chronon.apm.libs.org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77) 	at java.com.chronon.apm.libs.org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:526) 	at java.com.chronon.apm.libs.org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112) 	at java.com.chronon.apm.libs.org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117) 	at java.com.chronon.apm.libs.org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56) 	at java.com.chronon.apm.libs.org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137) 	at java.com.chronon.apm.libs.org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591) 	at java.com.chronon.apm.libs.org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571) 	at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.IllegalStateException: WebSocketClientSockJsSession[id='1f1aafad087b4cc78047f42b47b2ea3f, url=http://127.0.0.1:8082/wsgame] is not open, current state=CLOSED 	at java.com.chronon.apm.libs.org.springframework.util.Assert.state(Assert.java:392) 	at java.com.chronon.apm.libs.org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.sendMessage(AbstractClientSockJsSession.java:139) 	at java.com.chronon.apm.libs.org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter.send(WebSocketStompClient.java:383) 	at java.com.chronon.apm.libs.org.springframework.messaging.simp.stomp.DefaultStompSession.execute(DefaultStompSession.java:274) 	... 47 more ```  The exception is thrown on this line:  ``` stompSession.disconnect(); ```  However, as you can see I check to see if the session is connected using the isConnected() call. The code should not throw an exception if isConnected() was checked before calling disconnect()  ---  **Affects:** 4.2.6  **Issue Links:** - #19281 exception during websocket server shutdown  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/62b02c23ab9f37ce691df2bff6367282ff178cbc, https://github.com/spring-projects/spring-framework/commit/99c7917124b8f5c997046bc169ec2a97ff5e62fb, https://github.com/spring-projects/spring-framework/commit/81f6c22e5103acb02c8a44e431c07ba5a7b5a629  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: bug,","spring-projects-issues","2016-09-15T16:53:52Z","2019-01-11T17:13:27Z"
"","19281","exception during websocket server shutdown [SPR-14716]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-14716](https://jira.spring.io/browse/SPR-14716?redirect=false)** and commented  This is the exception i get. Running on tomcat 8. Clients were connected to the server when I initiated the shutdown  ```java 15:25:55,258 DEBUG clientInboundChannel-34 stomp.StompBrokerRelayMessageHandler:777 - Forwarding DISCONNECT session=fea710adeb5c429280e56fa78a739a84 15:25:55,258 DEBUG localhost-startStop-2 support.DefaultLifecycleProcessor:235 - Bean 'subProtocolWebSocketHandler' completed its stop procedure 15:25:55,259 DEBUG localhost-startStop-2 support.DefaultLifecycleProcessor:226 - Asking bean 'stompWebSocketHandlerMapping' of type [class org.springframework.web.socket.server.support.WebSocketHandlerMapping] to stop 15:25:55,259 TRACE reactor-tcp-io-6 stomp.StompEncoder:107 - Encoding STOMP DISCONNECT, headers=null 15:25:55,259 DEBUG localhost-startStop-2 support.DefaultLifecycleProcessor:235 - Bean 'stompWebSocketHandlerMapping' completed its stop procedure 15:25:55,259 DEBUG localhost-startStop-2 support.DefaultLifecycleProcessor:226 - Asking bean 'userDestinationMessageHandler' of type [class org.springframework.messaging.simp.user.UserDestinationMessageHandler] to stop 15:25:55,259 DEBUG localhost-startStop-2 support.ExecutorSubscribableChannel:61 - clientInboundChannel removed UserDestinationMessageHandler[DefaultUserDestinationResolver[prefix=/user/]] 15:25:55,260 DEBUG localhost-startStop-2 support.ExecutorSubscribableChannel:61 - brokerChannel removed UserDestinationMessageHandler[DefaultUserDestinationResolver[prefix=/user/]] 15:25:55,260 DEBUG localhost-startStop-2 support.DefaultLifecycleProcessor:235 - Bean 'userDestinationMessageHandler' completed its stop procedure 15:25:55,260 DEBUG localhost-startStop-2 support.DefaultLifecycleProcessor:226 - Asking bean 'stompBrokerRelayMessageHandler' of type [class org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler] to stop 15:25:55,260  INFO localhost-startStop-2 stomp.StompBrokerRelayMessageHandler:177 - Stopping... 15:25:55,260  INFO localhost-startStop-2 stomp.StompBrokerRelayMessageHandler:270 - BrokerAvailabilityEvent[available=false, StompBrokerRelay[127.0.0.1:61613]] 15:25:55,261 DEBUG reactor-tcp-io-6 stomp.StompBrokerRelayMessageHandler:714 - TCP connection to broker closed in session fea710adeb5c429280e56fa78a739a84 15:25:55,261 TRACE localhost-startStop-2 support.AnnotationConfigWebApplicationContext:361 - Publishing event in WebApplicationContext for namespace 'dispatcher-servlet': BrokerAvailabilityEvent[available=false, StompBrokerRelay[127.0.0.1:61613]] 15:25:55,261 DEBUG reactor-tcp-io-6 stomp.StompBrokerRelayMessageHandler:832 - Cleaning up connection state for session fea710adeb5c429280e56fa78a739a84 15:25:55,296 ERROR globalEventExecutor-1-6 DefaultPromise.rejectedExecution:181 - Failed to submit a listener notification task. Event loop shut down? java.util.concurrent.RejectedExecutionException: event executor terminated 	at io.netty.util.concurrent.SingleThreadEventExecutor.reject(SingleThreadEventExecutor.java:836) 	at io.netty.util.concurrent.SingleThreadEventExecutor.offerTask(SingleThreadEventExecutor.java:342) 	at io.netty.util.concurrent.SingleThreadEventExecutor.addTask(SingleThreadEventExecutor.java:335) 	at io.netty.util.concurrent.SingleThreadEventExecutor.execute(SingleThreadEventExecutor.java:761) 	at io.netty.util.concurrent.DefaultPromise.safeExecute(DefaultPromise.java:767) 	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:435) 	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:111) 	at io.netty.channel.DefaultChannelPromise.trySuccess(DefaultChannelPromise.java:82) 	at io.netty.channel.AbstractChannel$CloseFuture.setClosed(AbstractChannel.java:1058) 	at io.netty.channel.AbstractChannel$AbstractUnsafe.doClose0(AbstractChannel.java:686) 	at io.netty.channel.AbstractChannel$AbstractUnsafe.access$700(AbstractChannel.java:419) 	at io.netty.channel.AbstractChannel$AbstractUnsafe$5.run(AbstractChannel.java:646) 	at io.netty.util.concurrent.GlobalEventExecutor$TaskRunner.run(GlobalEventExecutor.java:233) 	at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144) 	at java.lang.Thread.run(Thread.java:745) 15:25:55,297  WARN globalEventExecutor-1-6 channel.AbstractChannel:151 - Can't invoke task later as EventLoop rejected it java.util.concurrent.RejectedExecutionException: event executor terminated 	at io.netty.util.concurrent.SingleThreadEventExecutor.reject(SingleThreadEventExecutor.java:836) 	at io.netty.util.concurrent.SingleThreadEventExecutor.offerTask(SingleThreadEventExecutor.java:342) 	at io.netty.util.concurrent.SingleThreadEventExecutor.addTask(SingleThreadEventExecutor.java:335) 	at io.netty.util.concurrent.SingleThreadEventExecutor.execute(SingleThreadEventExecutor.java:761) 	at io.netty.channel.AbstractChannel$AbstractUnsafe.invokeLater(AbstractChannel.java:931) 	at io.netty.channel.AbstractChannel$AbstractUnsafe.access$900(AbstractChannel.java:419) 	at io.netty.channel.AbstractChannel$AbstractUnsafe$5.run(AbstractChannel.java:649) 	at io.netty.util.concurrent.GlobalEventExecutor$TaskRunner.run(GlobalEventExecutor.java:233) 	at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144) 	at java.lang.Thread.run(Thread.java:745) ```  ---  **Affects:** 4.2.6  **Issue Links:** - #19268 NPE during websocket disconnect - #19286 exception during websocket client close","closed","status: bulk-closed,","spring-projects-issues","2016-09-14T22:33:56Z","2019-01-12T02:24:47Z"
"","19268","NPE during websocket disconnect [SPR-14703]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-14703](https://jira.spring.io/browse/SPR-14703?redirect=false)** and commented  This is the exception on server  ```  Exception in thread ""clientInboundChannel-97"" org.springframework.messaging.MessageDeliveryException: Failed to handle GenericMessage [payload=byte[0], headers={simpMessageType=DISCONNECT, stompCommand=DISCONNECT, simpSessionAttributes={org.springframework.messaging.simp.SimpAttributes.COMPLETED=true}, simpSessionId=e4fb909754d849a08526503c2afa7584}] to org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask@329d23a5 in StompBrokerRelay[127.0.0.1:61613]; nested exception is java.lang.NullPointerException 	at org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.run(ExecutorSubscribableChannel.java:144) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.NullPointerException 	at org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$StompConnectionHandler.forward(StompBrokerRelayMessageHandler.java:783) 	at org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.handleMessageInternal(StompBrokerRelayMessageHandler.java:511) 	at org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.handleMessage(AbstractBrokerMessageHandler.java:238) 	at org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.run(ExecutorSubscribableChannel.java:135) 	... 3 more ```  Here is the client side code:  ```java     void setup() throws ExecutionException, InterruptedException     {          JettyWebSocketClient webSocketClient = new JettyWebSocketClient();         List transports = new ArrayList(1);         transports.add(new WebSocketTransport(webSocketClient));          SockJsClient sockJsClient = new SockJsClient(transports);         sockJsClient.setMessageCodec(new StringMessageCodec());          stompClient = new WebSocketStompClient(sockJsClient);         stompClient.setMessageConverter(new StringMessageConverter());         stompClient.start();          sessionHandler = new MyStompSessionHandler();         stompClient.connect(WS_URL, sessionHandler);     }      void stop()     {         stompSession.disconnect();         stompClient.stop();     } ```  As you can see the client closes the connection gracefully. It first disconnects the session and then calls stop() on the stompClient.  Doing so should not result in an exception on the server.  ---  **Affects:** 4.2.6  **Issue Links:** - #19281 exception during websocket server shutdown  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3bc1121b9d6f73f601776a20e6ec5b0e1ea0f4b2, https://github.com/spring-projects/spring-framework/commit/07d5f8b12300fe8559a034031143a1e598ace059, https://github.com/spring-projects/spring-framework/commit/114b2b63b1bf04a2d8743203578797387cd1527f  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: bug,","spring-projects-issues","2016-09-13T01:09:40Z","2019-01-11T17:14:00Z"
"","18843","async processing broken in 4.2.6 [SPR-14271]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-14271](https://jira.spring.io/browse/SPR-14271?redirect=false)** and commented  Ever since we upgraded to spring 4.2.6 we see this warning in tomcat output:  ``` INFO http-nio-8080-exec-1 annotation.AnnotationAsyncExecutionInterceptor:245 - No TaskExecutor bean found for async processing ```  using tomcat 8.0.14   ---  **Affects:** 4.2.6  0 votes, 5 watchers","closed","status: invalid,","spring-projects-issues","2016-05-13T20:08:48Z","2019-01-12T05:22:49Z"
"","19068","SingleConnectionFactory stops connection on every stop/close on connection proxy [SPR-14499]","**[Piotr Klimczak](https://jira.spring.io/secure/ViewProfile.jspa?name=piotrklimczak)** opened **[SPR-14499](https://jira.spring.io/browse/SPR-14499?redirect=false)** and commented  1st of all thanks for really great job, the Spring community is doing.  Now, we just started migrating from spring 3.2.X to 4.3.1 and we found that our JMS connectivity floods logs with warnings: Setup of JMS message listener invoker failed for destination 'X.Y.Z' - trying to recover. Cause: Connection closed  The problem was introduced by this issue: #15030 and this commit: https://github.com/spring-projects/spring-framework/commit/4927c9054f0bf906196c995862ad2c423b47a073. (by adding localStart, localStop methods)  The purpose of SingleConnectionFactory suppose to be sharing same connection between threads. How sharing the same connection suppose to work at all, if it can be closed any time by any thread? As we are finding this incorrect, that is the reason why this issue was created.  In fact, current implementation makes SingleConnectionFactory completely unusable. While it can pass unit tests in simple scenarios (it passes our tests too), it definitely fails in runtime, where we are using about 100 consumers to different destinations.   ---  **Affects:** 4.1.9, 4.2.7, 4.3.1","closed","status: declined,","spring-projects-issues","2016-07-21T11:36:35Z","2019-01-14T04:38:36Z"
"","18905","Race condition in handling of @Lookup annotation [SPR-14333]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-14333](https://jira.spring.io/browse/SPR-14333?redirect=false)** and commented  ##### repro steps  1. Have a `prototype` bean with a `@Lookup` method. 2. Try to acquire it (for the first time) from 2 or more threads concurrently 3. Call the `@Lookup` on acquired instance (either directly if it's `pubic`, or call other method that uses the `@Lookup` method if that one is `protected`  ##### expected  * `@Lookup` intercepted and served by the DI container  ##### observed  * Sometimes, the `@Lookup` method is not overridden, as if there was some kind of race condition or other concurrency issue in handling of that annotation.  ##### workaround  Use `` in XML configuration. That one is handled at parse time, which is definitely single threaded, and does not suffer from concurrent lazy initialization.   ---  **Affects:** 4.2.2, 4.2.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9131ebbea6e9e52162ae3068ad55c46f2c4e6390, https://github.com/spring-projects/spring-framework/commit/47c62fd1732c88102e589e8ca62903194707debf  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","in: core,","spring-projects-issues","2016-06-06T08:17:14Z","2016-06-10T09:19:12Z"
"","18850","Apply @SafeVarargs at MockRestRequestMatchers#header [SPR-14278]","**[Phillip Wirth](https://jira.spring.io/secure/ViewProfile.jspa?name=pwirth)** opened **[SPR-14278](https://jira.spring.io/browse/SPR-14278?redirect=false)** and commented  The Warning: Unchecked generics Array Creation for varags parameter in `.andExpect(header(""X-ClientVersion"", equalTo(""warnings_occurs_here"")))` does not seem to be necessary.  Complete test method code:  ```java 	@Test 	public void testSomeMethod() {  		this.mockServer.expect(requestTo(""http://somthing"")) 				.andExpect(method(HttpMethod.POST)) 				.andExpect(header(""X-ClientName"", ""gotcha"")) 				.andExpect(header(""X-ClientVersion"", equalTo(""warnings_occurs_here""))) 				.andExpect(content().string(isEmptyOrNullString())) 				.andRespond(withSuccess()); 		this.someClient.someMethod(666, 888); 		this.mockServer.verify(); 	} ```  I guess when `@SafeVarargs` would be applied to `MockRestRequestMatchers#header` everything would be fine.  `@SafeVarargs` exists since Java 7.  Spring Tests do have a `targetCompatiblity` to 1.8 so this should work too. (If I interpreted that correctly from `settings.gradle`.)    ---  **Affects:** 4.3 RC2","closed","type: enhancement,","spring-projects-issues","2016-05-17T11:46:39Z","2016-06-10T09:19:12Z"
"","19088","Lookup Cache from Application Context [SPR-14519]","**[Phill Escott](https://jira.spring.io/secure/ViewProfile.jspa?name=phill.escott)** opened **[SPR-14519](https://jira.spring.io/browse/SPR-14519?redirect=false)** and commented  When using the `@Cacheable` or `@CacheConfig` annotations you are unable to reference Cache by their bean name they're registered with in the Application Context.  [Pull Request](https://github.com/spring-projects/spring-framework/pull/1124)   --- No further details from [SPR-14519](https://jira.spring.io/browse/SPR-14519?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-07-28T03:48:31Z","2016-07-28T08:12:51Z"
"","19158","CronSequenceGenerator.next() is not implemented as documented [SPR-14589]","**[Philippe Perrault](https://jira.spring.io/secure/ViewProfile.jspa?name=pphi)** opened **[SPR-14589](https://jira.spring.io/browse/SPR-14589?redirect=false)** and commented  I believe I have found a bug in the CronSequenceGenerator.  According to your documentation in the next(...) method the plan is to first round up to the next whole second instead the code just sets the milliseconds filed to 0.  I believe the originalTimestamp should be 'long originalTimestamp = calendar.getTimeInMillis() + 1000;' in order to round up to the next second per ""The Plan""  Here is the FQDN of the class org.springframework.scheduling.support.CronSequenceGenerator  Here is the method in question: public Date next(Date date) { /* The plan:      	1 Round up to the next whole second          	2 If seconds match move on, otherwise find the next match:     	2.1 If next match is in the next minute then roll forwards          	3 If minute matches move on, otherwise find the next match     	3.1 If next match is in the next hour then roll forwards     	3.2 Reset the seconds and go to 2          	4 If hour matches move on, otherwise find the next match     	4.1 If next match is in the next day then roll forwards,     	4.2 Reset the minutes and seconds and go to 2          	...     	*/          	Calendar calendar = new GregorianCalendar();     	calendar.setTimeZone(this.timeZone);     	calendar.setTime(date);          	// First, just reset the milliseconds and try to calculate from there...     	calendar.set(Calendar.MILLISECOND, 0);     	long originalTimestamp = calendar.getTimeInMillis();     	doNext(calendar, calendar.get(Calendar.YEAR));          	if (calendar.getTimeInMillis() == originalTimestamp) {     		// We arrived at the original timestamp - round up to the next whole second and try again...     		calendar.add(Calendar.SECOND, 1);     		doNext(calendar, calendar.get(Calendar.YEAR));     	}          	return calendar.getTime();     }  ---  **Affects:** 3.2.17, 4.2.7, 4.3.1  **Issue Links:** - #19049 CronSequenceGenerator.next() returns incorrect time - #14094 CronSequenceGenerator fails to accurately compute earliest next date when using second expression - #17469 CronSequenceGenerator constructor goes into infinite loop with invalid increments - #19031 CronSequenceGenerator causes StackOverflowError with reversed range values","closed","status: declined,","spring-projects-issues","2016-08-15T19:20:33Z","2019-01-12T16:34:00Z"
"","19377","Replace J2EE with Java EE [SPR-14811]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-14811](https://jira.spring.io/browse/SPR-14811?redirect=false)** and commented  With version 5 the name of Java Platform, Enterprise Edition changed from ""J2EE"" to ""Java EE"". However a lot of Spring's documentation still uses the term J2EE.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1206, and commits https://github.com/spring-projects/spring-framework/commit/33bf439a74b710b31f39a10b27e5bd798139f424, https://github.com/spring-projects/spring-framework/commit/ae5b0c6fb5f02a525ec3e394f45e37aab25d47a1","closed","type: documentation,","spring-projects-issues","2016-10-14T14:23:36Z","2017-05-05T12:49:28Z"
"","19376","Remove not existing NativeJdbcExtractors from documentation [SPR-14810]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-14810](https://jira.spring.io/browse/SPR-14810?redirect=false)** and commented  The documentation mentions various `NativeJdbcExtractor` s that no longer exist. To be specific `CommonsDbcpNativeJdbcExtractor` and `XAPoolNativeJdbcExtractor` no longer exist.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1205, and commits https://github.com/spring-projects/spring-framework/commit/7565355debde4be196fd38fbf604d89021795f71, https://github.com/spring-projects/spring-framework/commit/f7c79295f35b8ecaad5088322a970c08e9732614","closed","type: enhancement,","spring-projects-issues","2016-10-14T13:51:15Z","2016-11-08T13:11:18Z"
"","19375","Remove OracleLobHandler from documentation [SPR-14809]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-14809](https://jira.spring.io/browse/SPR-14809?redirect=false)** and commented  Now that `OracleLobHandler` has finally been removed it should also be removed from the documentation.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1204, and commits https://github.com/spring-projects/spring-framework/commit/6fb4352e5c93eaf33aa356a55ebbb606b4e776d0, https://github.com/spring-projects/spring-framework/commit/eee742da7f618d9b7df7d32c1103445cb3c040c7","closed","type: documentation,","spring-projects-issues","2016-10-14T13:40:51Z","2016-11-08T13:11:18Z"
"","19578","getBeanNamesForType(ResolvableType) doesn't match generic factory method return type for yet-to-be-created bean [SPR-15011]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-15011](https://jira.spring.io/browse/SPR-15011?redirect=false)** and commented  Originally raised as a `@SpyBean` [issue with Spring Boot](https://github.com/spring-projects/spring-boot/issues/7625). When calling `beanFactory.getBeanNamesForType` from a `BeanFactoryPostProcessor` the `predictBeanType` method does not consider generics. This means given a bean definition `Foo` calling `ResolvableType.forClassWithGenerics(Foo.class, String.class)` will not work.  Here's a minimal test case:  ```java import static org.junit.Assert.assertTrue;  import org.junit.Test; import org.springframework.beans.BeansException; import org.springframework.beans.factory.config.BeanFactoryPostProcessor; import org.springframework.beans.factory.config.ConfigurableListableBeanFactory; import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.core.Ordered; import org.springframework.core.ResolvableType; import org.springframework.core.annotation.Order;  public class GenericBeanTests {  	@Test 	public void test() { 		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(); 		context.register(Config.class); 		context.register(TestPostProcessor.class); 		context.refresh(); 		context.close(); 	}  	@Order(Ordered.LOWEST_PRECEDENCE) 	public static class TestPostProcessor implements BeanFactoryPostProcessor {  		@Override 		public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException { 			assertTrue(beanFactory.getBeanNamesForType(Foo.class).length > 0); 			assertTrue(beanFactory.getBeanNamesForType(ResolvableType.forClass(Foo.class)).length > 0); 			assertTrue(beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Foo.class, String.class)).length > 0); 		}  	}  	@Configuration 	public static class Config {  		@Bean 		public Foo fooBean() { 			return new StringFoo(); 		}  	}  	public static interface Foo {  	}  	public static class StringFoo implements Foo {  	}  } ```  ---  **Affects:** 4.3.4  **Issue Links:** - #18690 ListableBeanFactory#getBeanNamesForType(ResolvableType) fails to return generic `@Bean` methods (_**""is duplicated by""**_) - #16761 Add generics / parameterized type support to ListableBeanFactory getBeanNamesForType/getBeansOfType methods - #18669 getBeanNamesForType(ResolvableType) does not reliably work for beans with AOP proxies - #21261 Inconsistent getTypeForFactoryMethod results for parameterized factory method - #22056 getBeanNamesForType(ResolvableType) doesn't work for raw singleton instance from `@Bean` method with generic return type - #18463 Provide registerBean variants based on ResolvableType  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2016-12-13T19:19:03Z","2019-01-13T05:18:26Z"
"","19392","ResolvableType equals method should not consider TypeProvider source [SPR-14826]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-14826](https://jira.spring.io/browse/SPR-14826?redirect=false)** and commented  Originally discovered as part of https://github.com/spring-projects/spring-boot/issues/7174  If two resolvable types are created from different fields, but would ultimately yield the same result they are currently not considered equal. This is because the method uses `this.typeProvider.getSource()`, I wonder if it should instead use `this.typeProvider.getType()`?  ---  **Affects:** 4.3.3  **Issue Links:** - #20758 DispatcherHandler invoke wrong method when discriminating request with params  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/be187babf9d00c5145bd43f9300eadf472a9af87, https://github.com/spring-projects/spring-framework/commit/adb9dc7ede4fd5685c986f6bb3ae1dcda9ed4b0d","closed","type: enhancement,","spring-projects-issues","2016-10-19T20:58:31Z","2019-01-11T17:28:53Z"
"","19149","Allow programmatic registration of bean definitions with a ResolvableType [SPR-14580]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-14580](https://jira.spring.io/browse/SPR-14580?redirect=false)** and commented  As discussed on this Spring Boot issue (https://github.com/spring-projects/spring-boot/issues/6602) it would be useful if we could programmatically register a `RootBeanDefinition` that including a `ResolvableType`.  Currently generics are only considered when a bean is defined against a factory method.  ---  **Affects:** 4.3.2  **Issue Links:** - #18472 Allow manually registered bean definitions to specify a generic type to participate in generics qualifier resolution (_**""is duplicated by""**_) - #14969 Introduce a pre-resolved target type in RootBeanDefinition - #18463 Provide registerBean variants based on ResolvableType - #21566 Publicly expose ResolvableType in RootBeanDefinition  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4b06b60007bc737681457ac7184f070b1162f51a, https://github.com/spring-projects/spring-framework/commit/e6cefdca25200b8ff7f1f8827538dd9a7a22831c","closed","type: enhancement,","spring-projects-issues","2016-08-10T15:51:07Z","2019-01-11T18:03:21Z"
"","19059","Nested @Async annotations can block indefinitely [SPR-14490]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-14490](https://jira.spring.io/browse/SPR-14490?redirect=false)** and commented  Originally raised on the Spring Boot issue tracker:  https://github.com/spring-projects/spring-boot/issues/6429  — here is an issue introduced in Spring 4.2.6.RELEASE (used by Spring Boot 1.3.4.RELEASE) which means that it is possible for `@Async` annotated method calls to become blocked. This happens when you have nested `@Async` annotated calls which use the default task executor, and you have a task executor defined in your application context (but not explicitly used).  I have created a proof of concept here https://github.com/foygl/spring-async-problem  I've only tested this with Spring Boot so I'm not sure if this is a wider Spring problem or just an issue with Spring Boot (although I suspect the former). I've replicated this in Spring Boot version 1.4.0.RC1 (i.e. Spring 4.3.1.RELEASE) so this problem still exists in the latest version.  Thanks —  Using Spring Boot 1.3.3 with the following in the build script also shows the issue:  ``` ext['spring.version'] = '4.2.6.RELEASE' ```  ---  **Affects:** 4.2.6  **Issue Links:** - #18602 Regression: Early instantiation of a bean prevents proxying for `@Async` in 4.2.x but works in 4.1.x","closed","status: declined,","spring-projects-issues","2016-07-19T17:29:15Z","2019-01-13T05:24:07Z"
"","18963","AnnotationUtils.findAnnotationCache doesn't respect synthesize [SPR-14390]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-14390](https://jira.spring.io/browse/SPR-14390?redirect=false)** and commented  It looks to me like the `synthesize` flag is ignored with `findAnnotationCache`.  ```java 	@SuppressWarnings(""unchecked"") 	private static  A findAnnotation(Class clazz, Class annotationType, boolean synthesize) { 		Assert.notNull(clazz, ""Class must not be null""); 		if (annotationType == null) { 			return null; 		}  		AnnotationCacheKey cacheKey = new AnnotationCacheKey(clazz, annotationType); 		A result = (A) findAnnotationCache.get(cacheKey); 		if (result == null) { 			result = findAnnotation(clazz, annotationType, new HashSet()); 			if (result != null && synthesize) { 				result = synthesizeAnnotation(result, clazz); 				findAnnotationCache.put(cacheKey, result); 			} 		} 		return result; 	} ```  Calling `findAnnotation(c, a, false)` followed by `findAnnotation(c, a, true)` will result in the unsynthesized version being returned.   ---  **Affects:** 4.2.6, 4.3 GA","closed","in: core,","spring-projects-issues","2016-06-22T19:25:36Z","2019-01-12T05:22:32Z"
"","18959","Better support for injecting custom PropertySources into Environment in non-web modules [SPR-14386]","**[Phanindra](https://jira.spring.io/secure/ViewProfile.jspa?name=phani.me1)** opened **[SPR-14386](https://jira.spring.io/browse/SPR-14386?redirect=false)** and commented  There's support for modifying Environment and injecting custom PropertySource(s) in web applications via `EnvironmentPostProcessor`, `ApplicationContextInitializer`, etc.  However, such API hooks are not provided to achieve the same in non-web applications. Logically a web application might be composed of several modules (or projects/libraries). Those modules typically have their own tests and they may import resources with - `@Value(""$[value.from.custom.propertySource]"")` or - `environment.get(""value.from.custom.propertySource"")`, etc.  It's important that above operations work transparently in - `@RunWith(SpringJUnit4ClassRunner.class)` or - `Spock Spring`, etc. test classes.  Probable solutions to enable above operations transparently without boilerplate code: - A special type of BFPP which is dedicated to modify Environment and is guaranteed to get invoked in the correct phase on app context life-cycle. - Add support for 'ApplicationContextInitializer' in META-INF/spring.factories in plain Spring project (not SpringBoot). It's important that it gets discovered automatically.  Please note that this story is a feature request at Spring core/context level and has nothing to do with Spring Boot despite above references.  References: 1) http://stackoverflow.com/questions/37581092/how-to-inject-a-custom-spring-propertysource-into-environment-in-a-non-web-proje 2) Another where people tried to come up with different workarounds: http://stackoverflow.com/questions/14416005/spring-environment-property-source-configuration  Note: This is my first ticket. Please point out if I missed any standard expectations.   ---  **Affects:** 4.3 GA","closed","in: core,","spring-projects-issues","2016-06-20T21:38:40Z","2019-01-12T05:22:34Z"
"","18974","@ConditionalOnBean considers only ""already"" defined beans  [SPR-14403]","**[Peter Rietzler](https://jira.spring.io/secure/ViewProfile.jspa?name=prietzler)** opened **[SPR-14403](https://jira.spring.io/browse/SPR-14403?redirect=false)** and commented  ConditionalOnBean considers only beans that are ""already contained in the BeanFactory"" (literally taken from the configuration). It took me quite some time (and some unexpected bugs) to understand this since the natural use case is ""include this bean only if a given other one also exists"" - no matter in which order configurations are included.  Here's what I expected (the test fails):  ``` @Configuration static class A {     @Bean     String a() { return ""a"" } }  @Configuration static class B {     @ConditionalOnBean(name = ""a"")     @Bean     String b() { return ""b"" } }  def ""ConditionalOnBean also considers beans that were added by contexts added later""() {     given:     def applicationContext = new AnnotationConfigApplicationContext(B, A)      when:     def names = applicationContext.beanFactory.getBeanDefinitionNames()     then:     names.contains(""a"")     names.contains(""b"") } ```  The test succeeds once I switch the line  ``` def applicationContext = new AnnotationConfigApplicationContext(B, A) ```  to  ``` def applicationContext = new AnnotationConfigApplicationContext(A, B) ```  In a larger environment with many configurations it can get pretty tricky to get everything to work when you have to consider the order. A good use case is that you want to install some ""plugins"" (beans) on a very high level configuration (e.g. the startup configuration) depending on what's already been defined by other imported configurations. The plugins are to be injected into lower level services. Here's a simple example (the test fails):  ``` @Configuration @Import([Plugins, ServiceConfiguration]) static class Application { }  @Configuration static class Plugins {     @ConditionalOnBean(name = ""service"")     @Bean     String plugin() { return ""a"" } }  @Configuration static class ServiceConfiguration implements BeanFactoryAware {     ListableBeanFactory beanFactory      @Bean     String service() { return new String(Arrays.asList(beanFactory.getBeansOfType(String).values()) as String) }      @Override     void setBeanFactory(BeanFactory beanFactory) throws BeansException {         this.beanFactory = beanFactory     } }  def ""ConditionalOnBean also considers beans that were added by contexts added later""() {     given:     def applicationContext = new AnnotationConfigApplicationContext(Application)      expect:     applicationContext.beanFactory.getBean(""service"") == Arrays.asList([""a""]) as String } ```  Again, when I switch ``` [Plugins, ServiceConfiguration]  ```to ```[ServiceConfiguration, Plugins] ```, the test succeeds. It can be pretty tricky since the import is not always so clear (e.g. hidden in some @Enable... annotation, etc.). In the best case you've got a good test that does the assertion for you, in the worst case you won't even notice that some of your plugins are simply not loaded until you notice that there's something wrong/missing on your live system.  ```    --- No further details from [SPR-14403](https://jira.spring.io/browse/SPR-14403?redirect=false)","closed","in: core,","spring-projects-issues","2016-06-26T18:29:52Z","2019-01-12T05:22:30Z"
"","18932","Cannot override beans defined through ImportBeanDefinitionRegistrar [SPR-14360]","**[Peter Rietzler](https://jira.spring.io/secure/ViewProfile.jspa?name=prietzler)** opened **[SPR-14360](https://jira.spring.io/browse/SPR-14360?redirect=false)** and commented  It looks like that I can't override a bean by name if it is defined through an ImportBeanDefinitionRegistrar. A (spock) test is attached.  Tested with 4.1.4.   ---  **Attachments:** - [OverrideSpringBeanSpec.groovy](https://jira.spring.io/secure/attachment/23421/OverrideSpringBeanSpec.groovy) (_2.07 kB_)","closed","status: bulk-closed,","spring-projects-issues","2016-06-14T10:12:31Z","2019-01-12T00:13:49Z"
"","18872","Java vs ECMA clash for max long [SPR-14300]","**[Peter Rader](https://jira.spring.io/secure/ViewProfile.jspa?name=grim01re)** opened **[SPR-14300](https://jira.spring.io/browse/SPR-14300?redirect=false)** and commented  Returning a long:      @RequestMapping(value = ""/test"", method = RequestMethod.GET)     public long test() {     	return -1369082024195183657l;     }  Creates illegal JSON because the ECMA-Limit for number is 2^53^−2.   ---  **Affects:** 4.1.9  **Reference URL:** http://stackoverflow.com/questions/37408966/","closed","status: invalid,","spring-projects-issues","2016-05-24T09:44:30Z","2019-01-12T05:22:44Z"
"","19270","Add support for commons-vfs2 Resource [SPR-14705]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-14705](https://jira.spring.io/browse/SPR-14705?redirect=false)** and commented  Hello,  I would like to propose an improvement. The same way spring has a class to wrap JBoss VFS resource (`org.springframework.core.io.VfsResource`) I would like to propose to add the same for commons-vfs2. In fact i'll try to make a pull request later today.   --- No further details from [SPR-14705](https://jira.spring.io/browse/SPR-14705?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2016-09-13T10:01:43Z","2019-01-12T02:24:53Z"
"","19235","Improve documentation on ProtocolResolvers and ResourceLoaders. [SPR-14671]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-14671](https://jira.spring.io/browse/SPR-14671?redirect=false)** and commented  This is a follow-up on:  #17455  There `@Brian` Clozel mentioned that I can  ""create your own ResourceResolver implementation and configure it in the chain.""  I have done so:  ``` public class MediaResourceResolver implements ResourceResolver {      @Override     public Resource resolveResource(HttpServletRequest request, String requestPath, List locations, ResourceResolverChain chain) {         LOG.info(""TADAA"");         return null;     }      @Override     public String resolveUrlPath(String resourcePath, List locations, ResourceResolverChain chain) {         LOG.info(""TADAA"");         return null;     } } ```  but I can't find anywhere on the internet how to register my custom `ResourceResolver` ""in the chain"".  Brian also said: ""You can even use a DefaultResourceLoader with custom `ProtocolResolver`s if this might help you.""  and this was my second try. I created:  ``` public class MediaProtocolResolver implements ProtocolResolver {     @Override     public Resource resolve(String location, ResourceLoader resourceLoader) {          if (location.startsWith(MEDIA_URL_PREFIX)) {             LOG.info(""TADAA"");         }         return null;     }  }  ```  and registered it like this in my spring-boot application:  ``` @Override     public void addResourceHandlers(ResourceHandlerRegistry registry) {         if (!registry.hasMappingForPattern(""/media/**"")) {             applicationContext.addProtocolResolver(new MediaProtocolResolver());             registry.addResourceHandler(""/media/**"").addResourceLocations(""media:/media/"").setCacheControl(CacheControl.maxAge(365, TimeUnit.DAYS));         }         super.addResourceHandlers(registry);     } ```  but nothing was printed on command line. Can you please improve the documentation on `ProtocolResolver`s and `ResourceLoader`s.  Thank you.  ---  **Issue Links:** - #17455 Add support to enhance default resource loader","closed","status: declined,","spring-projects-issues","2016-09-05T19:09:34Z","2019-01-14T04:38:04Z"
"","19199","ListBeansView should also expose aliases [SPR-14632]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-14632](https://jira.spring.io/browse/SPR-14632?redirect=false)** and commented  The json that `ListBeansView` constructs must also contain the aliases for the given bean. This is very important for our project because we have several beans all having different names but same aliases and it is hard for the customer to find out which bean has which alias.  I will prepare a pull-request later today.   ---  **Affects:** 4.3.2  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1146, and commits https://github.com/spring-projects/spring-framework/commit/5a004c3b2a336157ac4fb94e61ab22f42b1b76e9, https://github.com/spring-projects/spring-framework/commit/57cb7c7e0a6b7979ab38cf6e47f2e0a33a062bad","closed","type: enhancement,","spring-projects-issues","2016-08-26T11:56:13Z","2016-09-19T15:55:27Z"
"","19441","TaskScheduler interface should support java.time.Instant/Duration [SPR-14875]","**[Periata Breatta](https://jira.spring.io/secure/ViewProfile.jspa?name=periata)** opened **[SPR-14875](https://jira.spring.io/browse/SPR-14875?redirect=false)** and commented  For the sake of convenience, the task scheduler interface should be modernized to support Java 8 improvements in date & time handling.  At the very least, methods accepting a java.util.Date should have an overload accepting a java.time.Instant, while methods taking a long millisecond count should have an overload accepting a java.time.Duration.  These can, of course, be implemented trivially using default methods.  ---  **Affects:** 5.0 M2  **Issue Links:** - #22103 Allow java.time types for setting the Last-Modified header  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/313c89dd5c3dc144d0f43ca8b3f56930dd36c1ac","closed","type: enhancement,","spring-projects-issues","2016-11-03T05:05:06Z","2019-01-11T17:26:12Z"
"","19239","Align ISO timezone parsing in DateFormatter with Joda-Time / JSR-310 [SPR-14675]","**[Per Holmberg](https://jira.spring.io/secure/ViewProfile.jspa?name=pehol)** opened **[SPR-14675](https://jira.spring.io/browse/SPR-14675?redirect=false)** and commented  First, the javadoc example for DateTimeFormat.ISO.DATE_TIME is wrong; literal 'T' should be used between date and time. But even when this corrected it does not work:  ```java DateFormatter formatter = new DateFormatter(); formatter.setIso(DateTimeFormat.ISO.DATE_TIME); formatter.parse(""2000-10-31T01:30:00.000-05:00"", Locale.getDefault()); ```  Reason is the pattern specified in DateFormatter is wrong; for ISO, X should be used for timezone instead of Z (se javadoc for SimpleDateFormat). Correct pattern: yyyy-MM-dd'T'HH:mm:ss.SSSXXX  I guess same applies to DateTimeFormat.ISO.TIME.  ---  **Affects:** 4.2.7, 4.3.2  **Issue Links:** - #19525 `@DateTimeFormat`(iso = ISO.DATE_TIME) should use optimized formatter for LocalDateTime  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb94ba6e3ff8dfc053c5808d337289e8df37e935, https://github.com/spring-projects/spring-framework/commit/db196ce5d8840a23a16ac5e1ce851fedffb94809, https://github.com/spring-projects/spring-framework/commit/a5070d562c1c45db0ffcc4565403c89587ed46c5, https://github.com/spring-projects/spring-framework/commit/68332bf240b2f6f2b39a39993c2543bcf363519a, https://github.com/spring-projects/spring-framework/commit/d5c9cc62f1c67d04428ffc76c29e3665d549a8a9","closed","type: enhancement,","spring-projects-issues","2016-09-07T13:30:39Z","2019-01-13T05:22:25Z"
"","19209","Spring Web Reactive does not correctly support setting the content-length header. [SPR-14643]","**[Pedro Alvarado](https://jira.spring.io/secure/ViewProfile.jspa?name=pedro.alvarado)** opened **[SPR-14643](https://jira.spring.io/browse/SPR-14643?redirect=false)** and commented  At the moment, reactor-netty will set the transfer-encoding header by default and there is no trivial way to override that behavior via spring-web-reactive. This means that a user of spring-web-reactive has no reasonable way to set the content-length when it is known in advance. Worth pointing out, per RFC2616 Section 4.4, the content-length header must not be present when transfer-encoding is used.  Given that reactor-netty sets this header by default, a solution could be to detect the presence of the content-length header set by the user and disable/remove the transfer-encoding header, possibly, as shown below.  ```java @Override protected void writeHeaders() {      for (String name : getHeaders().keySet()) {           if(name.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)){                this.channel.responseTransfer(false);           }           for (String value : getHeaders().get(name)) {                this.channel.responseHeaders().add(name, value);           }      } } ```  https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java#L87   ---  **Affects:** 5.0 M1  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java#L87  1 votes, 3 watchers","closed","type: task,","spring-projects-issues","2016-08-30T15:23:12Z","2016-12-14T13:52:21Z"
"","19349","Inner bean behind BeanFactoryPostProcessor should be able to receive application events [SPR-14783]","**[Pavel Mukhataev](https://jira.spring.io/secure/ViewProfile.jspa?name=mpashka)** opened **[SPR-14783](https://jira.spring.io/browse/SPR-14783?redirect=false)** and commented  Spring bean doesn't get subscribed to application events if inner bean is used as a property for bean that implements BeanFactoryPostProcessor.  BeanFactoryPostProcessor bean itself get subscribed to application events, while it's inner beans are not.  Source code to reproduce problem: https://github.com/mpashka/checkSpringInitialization  ---  **Affects:** 4.3.3  **Reference URL:** https://github.com/mpashka/checkSpringInitialization  **Issue Links:** - #12513 Application event listeners not removed from listener registry on listener destroy - #10718 ApplicationListener callbacks to be supported for inner beans as well - #18317 Avoid scoped destruction callbacks in case of no post-processor actually applying - #18788 ApplicationListenerDetector should prevent serialization of its ApplicationContext reference - #19445 ApplicationListenerDetector should ignore non-managed bean instances","closed","type: enhancement,","spring-projects-issues","2016-10-06T13:20:54Z","2019-01-11T17:23:03Z"
"","18955","Non-static PostProcessor leads to missing injections that are hard to track [SPR-14382]","**[Pavel Micka](https://jira.spring.io/secure/ViewProfile.jspa?name=malejpavouk)** opened **[SPR-14382](https://jira.spring.io/browse/SPR-14382?redirect=false)** and commented  Hi,  I found the following issue, maybe a bug in Spring Framework core. I have the following setup of my MVC application  * **UiConfiguration** ROOT context (where all classes common for business logic and web reside), also Jackson ObjectMapper   *  REST context (child context for rest classes), represented by **ResourceConfiguration** class (`@Configuration`). This config file is used for definition of all `@Controller` beans.   * **RestEndpointConfiguration** file is imported by **ResourceConfiguration** (contains technology stuff like message converters etc.)   *** This file uses object mapper for configuration of MappingJackson2HttpMessageConverter  When I do  ``` @Configuration @ComponentScan(""com.something.here.rest"") @Import(RestEndpointConfiguration.class) public class ResourceConfiguration {     @Autowired     private ObjectMapper objectMapper; // instance present      @Bean     public String string() {         return """"; // breakpoint here     } ... ```  ``` @EnableWebMvc @Configuration public class RestEndpointConfiguration extends WebMvcConfigurerAdapter {     @Autowired     private ObjectMapper objectMapper; // null     @Bean     public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter() {         MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter = new MappingJackson2HttpMessageConverter();         mappingJackson2HttpMessageConverter.setObjectMapper(objectMapper); //breakpoint here         return mappingJackson2HttpMessageConverter;     } ```  The bad part is that I'm unable isolate the source of the problem. I have the perfectly same configuration also for web endpoints (returning thymeleaf templates instead of REST) and objectmapper's autowing works perfectly even in the imported `@Configuration` file... I suppose there is some lifecycle related problem, as no ""NoSuchBeanDefinition"" exception is thrown and plain null is present...   ---  **Affects:** 4.2.6  **Attachments:** - [spring.tar.gz](https://jira.spring.io/secure/attachment/23427/spring.tar.gz) (_76.00 kB_)","closed","status: bulk-closed,","spring-projects-issues","2016-06-20T08:16:38Z","2019-01-12T00:13:46Z"
"","19160","Disappearing JavaDoc with o.s.web.servlet.view [SPR-14591]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-14591](https://jira.spring.io/browse/SPR-14591?redirect=false)** and commented  This is in regards to the upper-left frame of the JavaDoc -- the list of packages. If you click on any package that starts with ""org.springframework.web.servlet.view"", the entire package view of the JavaDoc disappears. It collapses to zero size. You can drag it back down again (if you can realize it!).  I haven't been able to reproduce this behavior with any other package. I am using Firefox 48. It doesn't happen in IE 11. Truthfully, I didn't dig far enough to know if this a bug in the JavaDoc tool itself, or some custom code of yours, but at least you should know about it. Usability is affected. It's something about that package name.... does having ""view"" in the name cause it?   ---  **Affects:** 4.3.2  **Reference URL:** http://docs.spring.io/spring/docs/current/javadoc-api/","closed","","spring-projects-issues","2016-08-16T17:40:35Z","2019-01-11T18:02:44Z"
"","18859","Label ""for"" attribute is wrongly documented as required [SPR-14287]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-14287](https://jira.spring.io/browse/SPR-14287?redirect=false)** and commented  JavaDoc says ""for"" is required for the Label tag: https://docs.spring.io/spring/docs/4.3.0.RC2/javadoc-api/org/springframework/web/servlet/tags/form/LabelTag.html  The TLD doc says the tag has no required attributes: http://docs.spring.io/spring/docs/4.3.0.RC2/spring-framework-reference/html/spring-form-tld.html#spring-form.tld.label    ---  **Affects:** 3.2.17, 4.2.6, 4.3 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dacc31e3d31527f2fbd75122bb75ffb24758a2a8, https://github.com/spring-projects/spring-framework/commit/49ae46d7e430aecd6fcb980f383cc6d3c0e901cf, https://github.com/spring-projects/spring-framework/commit/7b73f23f43ca1c9a75b0fcacb2db3aa974d669df  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","type: task,","spring-projects-issues","2016-05-18T20:19:41Z","2016-06-10T09:19:12Z"
"","19148","Document Spring recommendations/restrictions for Java 9 module setups [SPR-14579]","**[Paul Bakker](https://jira.spring.io/secure/ViewProfile.jspa?name=paul.bakker@luminis.eu)** opened **[SPR-14579](https://jira.spring.io/browse/SPR-14579?redirect=false)** and commented  As part of the work I'm doing for the upcoming Java 9 book for O'Reilly I'm experimenting with migration scenarios towards Java 9 modules.  The scenario is the following. The user migrated her code to a module (meaning that a module-info.java was added). The code relies on a Spring version which is not yet Java 9 compatible. This should't be a problem, because existing libraries should be able to work as ""automatic modules"". This works well with Spring, up until the point that namespaces in the xml configuration are used.  ```  ```  This results in the following error:  ``` Exception in thread ""main"" org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Unable to locate Spring NamespaceHandler for XML schema namespace [http://www.springframework.org/schema/context] Offending resource: class path resource [services.xml]  	at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(spring.beans@4.3.2.RELEASE/FailFastProblemReporter.java:70) 	at org.springframework.beans.factory.parsing.ReaderContext.error(spring.beans@4.3.2.RELEASE/ReaderContext.java:85) 	at org.springframework.beans.factory.parsing.ReaderContext.error(spring.beans@4.3.2.RELEASE/ReaderContext.java:80) 	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.error(spring.beans@4.3.2.RELEASE/BeanDefinitionParserDelegate.java:301) 	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(spring.beans@4.3.2.RELEASE/BeanDefinitionParserDelegate.java:1408) 	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(spring.beans@4.3.2.RELEASE/BeanDefinitionParserDelegate.java:1401) 	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(spring.beans@4.3.2.RELEASE/DefaultBeanDefinitionDocumentReader.java:172) 	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(spring.beans@4.3.2.RELEASE/DefaultBeanDefinitionDocumentReader.java:142) 	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(spring.beans@4.3.2.RELEASE/DefaultBeanDefinitionDocumentReader.java:94) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(spring.beans@4.3.2.RELEASE/XmlBeanDefinitionReader.java:508) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(spring.beans@4.3.2.RELEASE/XmlBeanDefinitionReader.java:392) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(spring.beans@4.3.2.RELEASE/XmlBeanDefinitionReader.java:336) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(spring.beans@4.3.2.RELEASE/XmlBeanDefinitionReader.java:304) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(spring.beans@4.3.2.RELEASE/AbstractBeanDefinitionReader.java:181) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(spring.beans@4.3.2.RELEASE/AbstractBeanDefinitionReader.java:217) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(spring.beans@4.3.2.RELEASE/AbstractBeanDefinitionReader.java:188) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(spring.beans@4.3.2.RELEASE/AbstractBeanDefinitionReader.java:252) 	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(spring.context@4.3.2.RELEASE/AbstractXmlApplicationContext.java:127) 	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(spring.context@4.3.2.RELEASE/AbstractXmlApplicationContext.java:93) 	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(spring.context@4.3.2.RELEASE/AbstractRefreshableApplicationContext.java:129) 	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(spring.context@4.3.2.RELEASE/AbstractApplicationContext.java:612) 	at org.springframework.context.support.AbstractApplicationContext.refresh(spring.context@4.3.2.RELEASE/AbstractApplicationContext.java:513) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(spring.context@4.3.2.RELEASE/ClassPathXmlApplicationContext.java:139) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(spring.context@4.3.2.RELEASE/ClassPathXmlApplicationContext.java:93) 	at demo.bootstrapper.Main.setup(bootstrap/Main.java:11) 	at demo.bootstrapper.Main.main(bootstrap/Main.java:16) ```  I'm not suggesting this is an error in Spring, or that this must be fixed, but hopefully it's useful information for compatibility issues in the future.  A (pretty bad) workaround is to extract the META-INF folder from the JAR file and put that on the classpath.  ---  **Affects:** 5.0 M1  **Issue Links:** - #18079 Declare Spring modules with JDK 9 module metadata - #18289 Stable module names for Spring Framework jars on JDK 9 module path - [DATACMNS-1033](https://jira.spring.io/browse/DATACMNS-1033) Assert Java 9 compatibility - #17928 Compatibility with merged JDK 9 mainline - #18941 Compatibility with JDK 9 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6ef7dd4d5e864007d12494087773f34ce743990f  0 votes, 9 watchers","closed","type: documentation,","spring-projects-issues","2016-08-10T14:31:00Z","2019-01-11T18:04:32Z"
"","19258","Support BufferingClientHttpRequestFactory in MockRestServiceServer  [SPR-14694]","**[Oyku Gencay](https://jira.spring.io/secure/ViewProfile.jspa?name=oyku)** opened **[SPR-14694](https://jira.spring.io/browse/SPR-14694?redirect=false)** and commented  MockRestServiceServer replaces RestTemplate's RequestFactory with RequestMatcherClientHttpRequestFactory.  In order to support multiple reads in tests the factory needs be wrapped with BufferingClientHttpRequestFactory.  Most REST apis in real life relies heavily on JSON error payload instead of HTTP statuses. That requires to consume the body of the response in error handler thus requiring a BufferingClientHttpRequestFactory. Due to error checking, responses return null from MockRestServiceServer  If by default MockRestServiceServer wraps in BufferingClientHttpRequestFactory both multiple reads in tests would be possible and body error checks would not be affected from mocking.  Until then, in test setups, rest client's request factory should be manually wrapped.Which is the case in many spring-social test cases   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/541ee13934cf8c1dfcbcfadce2bb6299bd25900c","closed","type: enhancement,","spring-projects-issues","2016-09-12T10:13:37Z","2018-04-03T20:34:29Z"
"","19542","Misleading parameter names and JavaDoc in ResolvableType [SPR-14976]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14976](https://jira.spring.io/browse/SPR-14976?redirect=false)** and commented  `ResolvableType` exposes overloads for `forClass(…)`. The one taking a single `Class` parameter says `sourceClass` and gives an implementation type as parameter in the JavaDoc. The one taking two `Class` parameters takes a `sourceClass` first, but in that case, it's not the type binding the generic parameters but the type exposing the parameters to bind (`List` in the example above). So in the second case the parameter binding the types is called `implementationClass` but is semantically equivalent to what has been called `sourceClass` in the one-parameter method.   ---  **Affects:** 4.2.8, 4.3.4  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","in: core,","spring-projects-issues","2016-12-05T08:41:34Z","2016-12-21T11:54:09Z"
"","19525","@DateTimeFormat(iso = ISO.DATE_TIME) should use optimized formatter for LocalDateTime [SPR-14958]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14958](https://jira.spring.io/browse/SPR-14958?redirect=false)** and commented  It looks like the usage of `DateTimeFormatter.ISO_DATE_TIME` to format `LocalDateTime` instances is significantly slower than a usage of `DateTimeFormatter.ISO_LOCAL_DATE_TIME` (see [this benchmark](https://gist.github.com/olivergierke/487d58bd146a47574fb5a8316f950b04#gistcomment-1931384) for details).  It would be cool if we could switch to that `DateTimeFormatter` in case a `LocalDateTime` instance is to be converted.  ---  **Affects:** 4.3.4, 5.0 M3  **Issue Links:** - #19239 Align ISO timezone parsing in DateFormatter with Joda-Time / JSR-310 - #19493 Improve performance for conversions using a method parameter based type descriptor with annotations","closed","type: enhancement,","spring-projects-issues","2016-11-28T15:25:42Z","2019-01-11T19:16:32Z"
"","19494","Potentially cache compiled Patterns in UriTemplate.TemplateInfo.parse(…) [SPR-14927]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14927](https://jira.spring.io/browse/SPR-14927?redirect=false)** and commented  A profiling session for the related ticket in Spring HATEOAS (linked to above), indicated that `UriTemplate.TemplateInfo.parse(…)` would benefit from caching the `Pattern` instances that are compiled eventually as the compilation process is repeated over and over again.   ---  **Affects:** 4.3.4  **Reference URL:** https://github.com/spring-projects/spring-hateoas/issues/511  **Attachments:** - [Bildschirmfoto 2016-11-21 um 11.53.26.PNG](https://jira.spring.io/secure/attachment/23624/Bildschirmfoto+2016-11-21+um+11.53.26.PNG) (_58.54 kB_)","closed","type: enhancement,","spring-projects-issues","2016-11-21T10:57:06Z","2016-12-07T11:51:12Z"
"","19493","Improve performance for conversions using a method parameter based type descriptor with annotations [SPR-14926]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14926](https://jira.spring.io/browse/SPR-14926?redirect=false)** and commented  When a conversion is invoked using a `TypeDescriptor` instance that was created for a `MethodParameter` containing annotations, the lookup of the `Converter` is significantly slowed down as the `TypeDescriptor` instances undergo an `….equals(…)` check that's quite expensive due to the synthesized annotations.  I wonder whether `TypeDescriptor` really needs to compare the annotations if the method and the parameter index are well defined as they by definition uniquely identify the parameter.  Here's a sample test case showing the issue:  ```java package org.example.myapi;  import java.lang.reflect.Method; import java.util.Date;  import org.junit.Test; import org.springframework.core.MethodParameter; import org.springframework.core.convert.ConversionService; import org.springframework.core.convert.TypeDescriptor; import org.springframework.format.annotation.DateTimeFormat; import org.springframework.format.annotation.DateTimeFormat.ISO; import org.springframework.format.support.DefaultFormattingConversionService; import org.springframework.http.ResponseEntity; import org.springframework.util.ReflectionUtils; import org.springframework.web.bind.annotation.RequestParam;  /**  * @author Oliver Gierke  */ public class FooTests {  	private static final int ITERATIONS = 1000000;  	private static final ConversionService CONVERSION_SERVICE = new DefaultFormattingConversionService(); 	private static final TypeDescriptor STRING_TYPE = TypeDescriptor.valueOf(String.class);  	@Test 	public void methodParameterWithAnnotations() {  		Date date = new Date();  		Method method = ReflectionUtils.findMethod(SomeController.class, ""someMethod"", Date.class); 		TypeDescriptor sourceDescriptor = TypeDescriptor.nested(new MethodParameter(method, 0), 0);  		long startTime = System.currentTimeMillis();  		for (int i = 0; i < ITERATIONS; i++) { 			CONVERSION_SERVICE.convert(date, sourceDescriptor, STRING_TYPE); 		}  		long duration = (System.currentTimeMillis() - startTime);  		System.out.println(""With annotations "" + duration); 	}  	@Test 	public void methodParameterWithoutAnnotations() {  		Method method = ReflectionUtils.findMethod(SomeController.class, ""someMethod"", String.class); 		TypeDescriptor sourceDescriptor = TypeDescriptor.nested(new MethodParameter(method, 0), 0);  		long startTime = System.currentTimeMillis();  		for (int i = 0; i < ITERATIONS; i++) { 			CONVERSION_SERVICE.convert(""Foo"", sourceDescriptor, STRING_TYPE); 		}  		long duration = (System.currentTimeMillis() - startTime);  		System.out.println(""Without annotations "" + duration); 	}  	static class SomeController {  		ResponseEntity someMethod(@RequestParam(""foo"") @DateTimeFormat(iso = ISO.DATE) Date date) { 			return null; 		}  		ResponseEntity someMethod(String value) { 			return null; 		} 	} } ```  ---  **Affects:** 4.3.4  **Reference URL:** https://github.com/spring-projects/spring-hateoas/issues/511  **Attachments:** - [Bildschirmfoto 2016-11-21 um 11.20.48.PNG](https://jira.spring.io/secure/attachment/23623/Bildschirmfoto+2016-11-21+um+11.20.48.PNG) (_154.80 kB_) - [Bildschirmfoto 2016-11-26 um 13.16.01.PNG](https://jira.spring.io/secure/attachment/23633/Bildschirmfoto+2016-11-26+um+13.16.01.PNG) (_89.78 kB_) - [Bildschirmfoto 2016-11-26 um 13.56.30.PNG](https://jira.spring.io/secure/attachment/23634/Bildschirmfoto+2016-11-26+um+13.56.30.PNG) (_110.74 kB_)  **Issue Links:** - #17519 Spring Performance Optimization, Comparing Classes - #19410 AnnotationFormatterFactory should support `@AliasFor` - #18287 Differentiate between TypeDescriptors with same annotations but different attributes - #19496 ConversionService performance regression - #19626 Annotated method argument matching performance issue - #19525 `@DateTimeFormat`(iso = ISO.DATE_TIME) should use optimized formatter for LocalDateTime","closed","type: enhancement,","spring-projects-issues","2016-11-21T10:04:01Z","2019-01-13T05:18:55Z"
"","19468","ReactiveAdapter.Descriptor should have a more descriptive way of creating instances of it [SPR-14902]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14902](https://jira.spring.io/browse/SPR-14902?redirect=false)** and commented  `Descriptor` currently has a constructor that takes three `boolean` instances. While this is fine if you look at the code or the JavaDoc, code using that constructor is kind of illegible: `new Descriptor(true, false, true)`. It get's especially confusing if you have multiple of them around as in [here](https://github.com/spring-projects/spring-data-commons/blob/c8ea914b7dc5a3205416d264543976aff6d27810/src/main/java/org/springframework/data/repository/util/ReactiveWrappers.java#L78-L101).  It would be nice if these boolean values were translated into a set of builder methods that guided the user through the creation process and thus would clearly document what was actually set up here.  ---  **Affects:** 5.0 M3  **Issue Links:** - [DATACMNS-947](https://jira.spring.io/browse/DATACMNS-947) Adopt ReactiveTypeDescriptor changes - #19482 Reactive type support in org.springframework.core.Conventions","closed","type: enhancement,","spring-projects-issues","2016-11-13T12:58:26Z","2019-01-11T19:20:38Z"
"","19447","Document supported return types for @Async methods [SPR-14881]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14881](https://jira.spring.io/browse/SPR-14881?redirect=false)** and commented  It looks like the reference documentation currently doesn't contain any details about the variety of supported return types (`Future`, `ListenableFuture`, `CompletableFuture`).  ---  **Affects:** 4.2.8, 4.3.3  **Issue Links:** - #17719 Support CompletableFuture<> as return type of `@Async` methods - #19359 EnableAsync javadoc not clear enough  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c8bb32b5c3685b6e28b54751b2e0feb215b6f8c9, https://github.com/spring-projects/spring-framework/commit/8df45dd274b9b962b3af4d71e51256ca7d3f525d, https://github.com/spring-projects/spring-framework/commit/9be1710dcac81af25756856bb88bb7286557084f  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","type: documentation,","spring-projects-issues","2016-11-04T10:50:55Z","2019-01-13T05:19:06Z"
"","19264","Provide Stream-based alternatives to doWith(…) methods in ReflectionUtils [SPR-14700]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14700](https://jira.spring.io/browse/SPR-14700?redirect=false)** and commented  `ReflectionUtils` provides a couple of `doWith(…)` methods to inspect fields and methods of a class. If you use those methods to detect e.g. a field with a particular annotation, those methods are quite cumbersome to work with, as you have to create a stateful component that captures the desired output (as the methods don't return a result). Also, you can't really prevent the iteration from looking at all fields or methods, even if the first field you get is the one you're interested in.  It would be cool if `ReflectionUtils` just exposed a `Stream` of `Field` and `Method` so that the caller can build up a pipeline of filters, map and find fields and methods, while `ReflectionUtils` still preserves the logic of traversing type hierarchies.   ---  **Affects:** 5.0 M1","closed","type: enhancement,","spring-projects-issues","2016-09-12T17:23:25Z","2017-01-18T11:23:49Z"
"","19214","ResolvableType for a raw type is not assignable to generic types of the same class [SPR-14648]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14648](https://jira.spring.io/browse/SPR-14648?redirect=false)** and commented  This test case fails for me and I think it shouldn't as a concrete generic type should always be assignable to a raw variant of it:  ```java public class RawTypeAssignmentTests {  	@Test 	public void rawTypeShouldBeassignable() throws Exception {  		// That works. 		Collection value = someMethod(); 		 		// So that should, too. 		ResolvableType fromClass = ResolvableType.forClass(Collection.class); 		ResolvableType fromReturnType = ResolvableType.forMethodReturnType(RawTypeAssignmentTests.class.getMethod(""someMethod""));  		assertThat(fromClass.isAssignableFrom(fromReturnType), is(true)); 	}  	public Collection someMethod() { 		return Collections.emptyList(); 	} } ```    ---  **Affects:** 4.2.7, 4.3.2, 5.0 M1  **Issue Links:** - [DATAREST-881](https://jira.spring.io/browse/DATAREST-881) ResourceProcessor is not invoked if RepositoryEntityController does not return a subtype of Resources (_**""is depended on by""**_)  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","in: core,","spring-projects-issues","2016-08-31T10:34:54Z","2016-09-19T15:46:49Z"
"","19038","Sources for reactive types missing in distributed source bundles [SPR-14469]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14469](https://jira.spring.io/browse/SPR-14469?redirect=false)** and commented  The source JARs contained by the build don't seem to contain the sources of the types introduced by merging the spring-reactive efforts into the core framework.   ---  **Affects:** 5.0 M1  **Attachments:** - [Bildschirmfoto 2016-07-15 um 08.01.16.PNG](https://jira.spring.io/secure/attachment/23439/Bildschirmfoto+2016-07-15+um+08.01.16.PNG) (_633.56 kB_)","closed","status: invalid,","spring-projects-issues","2016-07-15T06:01:40Z","2019-01-12T05:22:23Z"
"","19035","Misleading exception message for invalid MethodParameter instance [SPR-14466]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14466](https://jira.spring.io/browse/SPR-14466?redirect=false)** and commented  ```java public class MethodParameterTests {  	@Test 	public void testname() throws Exception { 		new MethodParameter(MethodParameterTests.class.getMethod(""testname""), 0); 	} } ```  On Spring 5.0 snapshots, the code above results in an exception with the following message:  ``` Parameter index needs to be between 0 and -1 ```  This is misleading as 0 was indeed passed into the constructor. However, throwing exception is perfectly fine, but only -1 is a valid value as the method doesn't take any parameters in the first place.   ---  **Affects:** 5.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e2c7653da4286e8daa9e9a185ef3f8016a035f87","closed","in: core,","spring-projects-issues","2016-07-14T19:24:12Z","2016-07-28T14:17:37Z"
"","18985","Rendering of a Resource should try to derive the served media type [SPR-14414]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14414](https://jira.spring.io/browse/SPR-14414?redirect=false)** and commented  When a controller returns a `Resource` implementation to be served to clients and the client didn't send any preferred media type (either through the URI or via the `Accept` header).  The culprit is that the content negotiation calculates all compatible media types first and for that consults the `HttpMessageConverter`'s supported media types. The one handling `Resource` instances returns `*/*`. The converter backed by Jackson returns a more concrete media type and thus the converter handling `Resource` instances is called with a media type. That in turn causes the media type detection to be turned off as it's only triggered as fallback, i.e. when no media type is given in the first place — which is never the case in the server side use case.  As discussed with [Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop), a potential solution could be to hand the value (or at least the type of the value) to an overload of `getSupportedMediaTypes()` so that the converter can return a more concrete media type for the object about to be rendered.  ---  **Affects:** 4.3 GA  **Issue Links:** - #18980 Allow defining custom file extension to media type mappings in ResourceHttpMessageConverter - #19603 BufferedImageHttpMessageConverter cannot convert to a media type it claims it can","open","type: enhancement,","spring-projects-issues","2016-06-28T17:26:16Z","2019-01-14T02:09:59Z"
"","18980","Allow defining custom file extension to media type mappings in ResourceHttpMessageConverter [SPR-14409]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14409](https://jira.spring.io/browse/SPR-14409?redirect=false)** and commented  `ResourceHttpMessageConverter` currently uses the `mime.types` mapping file contained in `org/springframework/mail/javamail` to control which file extension is mapped to which media type.  It would be cool if there was an easy way to register additional mappings on the converter itself that would take precedence over the automated lookup via JAF. That way, Spring Boot could expose those additional mappings through `application.properties`.  ---  **Affects:** 4.3 GA  **Issue Links:** - #18985 Rendering of a Resource should try to derive the served media type","open","type: enhancement,","spring-projects-issues","2016-06-27T16:00:07Z","2019-01-14T02:18:18Z"
"","18979","Introduce HttpHeaders getContentDisposition() and setContentDisposition() [SPR-14408]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14408](https://jira.spring.io/browse/SPR-14408?redirect=false)** and commented  The HTTP 1.1 spec defines the [`Content-Disposition` header](https://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) to contain a `filename` attribute that servers can use to indicate the name of the file served. Currently, users of `HttpHeaders` manually have to lookup the `Content-Disposition` header and then parse the value to extract the filename.  It would be cool if the filename was either available directly or `HttpHeaders` allowed to get access to a `ContentDisposition` object, that provides access to the filename contained in it.  ---  **Affects:** 4.3 GA  **Issue Links:** - #19114 Reactive multipart request support - #19757 ResourceHttpMessageConverter should read the Content-Disposition header (if available) to get the file name - #19769 StandardMultipartHttpServletRequest cannot decode multipart Content-Disposition header encoded by FormHttpMessageConverter - #21104 Overloaded convenience setters on HttpHeaders  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/99a8510ace46af9b05b822e7c65f08aae885ca98","closed","type: enhancement,","spring-projects-issues","2016-06-27T15:26:23Z","2019-01-11T16:27:58Z"
"","18894","CGLIB proxies should still consider @Transactional annotations on interface methods [SPR-14322]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14322](https://jira.spring.io/browse/SPR-14322?redirect=false)** and commented  If an application components implements an interface whose methods carry annotations that are triggering interceptors (e.g. for transactions), enabling target class proxying will result in the interceptors for those annotations not being triggered anymore. Here's a sample:  ```java interface SomeComponent {    @Transactional   void init(); }  @Component class SomeComponentImpl  implements SomeComponent {    @Override   public void init() {     if (!TransactionSynchronizationManager.isActualTransactionActive()) {       throw new IllegalStateException(""Expected transaction to be active!"");     }   } }  @Component class Invoker {    public Invoker(List components) {     components.forEach(SomeComponent::init);   } } ```  If the above is bootstrapped with standard `@EnableTransactionManagement` the instances handed to the constructor of `Invoker` are JDK proxies and the lookup of the advice chain results in the interceptor for transactions being returned and thus activated. If `proxyTargetClass` is set to `true`, the instances received by the constructor are CGLib proxies and the lookup of the advice chain results in an empty one and thus no transaction is created in the first place.  ---  **Affects:** 4.2.6, 4.3 RC2  **Attachments:** - [tx-differences.zip](https://jira.spring.io/secure/attachment/23413/tx-differences.zip) (_54.85 kB_)  **Issue Links:** - [DATAJPA-1222](https://jira.spring.io/browse/DATAJPA-1222) Overriding type level `@Transactional` does not appear to work in custom repository implementation - #19084 Consider target-class proxy mode by default - #20072 Revisit storage of null attributes in AbstractFallbackTransaction/CacheAttributeSource - #18915 Caching annotation on interface are ignored when cglib proxies are used - #19836 Reliably detect `@Cacheable` declarations on interface methods - #19516 Cglib proxy not working with `@Async` if there is another interceptor  1 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2016-05-31T19:29:29Z","2019-01-13T05:25:37Z"
"","18884","AcceptHeaderLocaleResolver should allow to define a default Locale [SPR-14312]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14312](https://jira.spring.io/browse/SPR-14312?redirect=false)** and commented  It would be cool if `AcceptHeaderLocaleResolver` would allow configuring a default `Locale` just as `CookieLocaleResolver` does. The use case is that I'd like to allow clients to explicit request a certain local but at the same time make sure that a well-defined default is used, independently of the system language (to prevent different deployment locations from changing the default).  It looks like we'd have to check whether the `Accept-Language` header is set explicitly to find out whether to use the configured default in the first place.  ---  **Issue Links:** - #17915 Flexible locale resolution based on supported languages - #19773 Mock MVC / RequestBuilder should handle Accept-Language header appropriately - #19987 Revise AcceptHeaderLocaleResolver default locale handling  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8343ce9e441313513b1459f6f56724ad1fcead19","closed","type: enhancement,","spring-projects-issues","2016-05-27T16:10:50Z","2019-01-11T16:08:58Z"
"","18876","ObjectToObjectConverter should be able to use constructors on non-public classes [SPR-14304]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14304](https://jira.spring.io/browse/SPR-14304?redirect=false)** and commented  `ObjectToObjectConverter` makes factory methods accessible before invoking them, but doesn't do the same for constructor invocations.   ---  **Affects:** 3.2.17, 4.2.6, 4.3 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9659bc5fe7ad70811bae0b2057194b47d5a506cd, https://github.com/spring-projects/spring-framework/commit/1e2b8aba76cdb5cf5a1025285d98e031cd4fac75, https://github.com/spring-projects/spring-framework/commit/17d622176d1673e42345739c8acbdc9282bc3e12, https://github.com/spring-projects/spring-framework/commit/edf1df33cc61a21f2547f902f84d6c8545fdce06  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","in: core,","spring-projects-issues","2016-05-25T08:09:56Z","2016-11-07T22:01:22Z"
"","19018","Problem when DeferredResult set before controller's method returns it [SPR-14448]","**[Oleg Mikhailenko](https://jira.spring.io/secure/ViewProfile.jspa?name=o1egon)** opened **[SPR-14448](https://jira.spring.io/browse/SPR-14448?redirect=false)** and commented  I'm currently using Spring 4.2,6 version and observe that once a result set before DeferredResult returned by controller's method, f.e. this way  ```java public DeferredResult foo() {         DeferredResult result = new DeferredResult<>();         result.setResult(ResponseEntity.ok(""Success""));         return result; } ```  it tries to resolve a View by usual (sync) way, and since it does not find any view (of course), it throws an error.  I investigated a little Spring's code and found the following line in method `RequestMappingHandlerAdapter#invokeHandlerMethod`:  ```java if (asyncManager.isConcurrentHandlingStarted()) {    return null; }  return getModelAndView(mavContainer, modelFactory, webRequest); ```  And since async process was not started yet, it tries to resolve view in `RequestMappingHandlerAdapter#getModelAndView`. What is wrong of course. But there in the method I found interesting line:  ```java if (mavContainer.isRequestHandled()) {    return null; } ```  So my current workaround is the following. I've created an interceptor (`extends DeferredResultProcessingInterceptorAdapter`) and put the following code in there:  ```java @Override public  void postProcess(NativeWebRequest request, DeferredResult deferredResult, Object concurrentResult) throws Exception {         super.postProcess(request, deferredResult, concurrentResult);          final WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);         ModelAndViewContainer mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[0];         mavContainer.setRequestHandled(true);     } ```  and after that this seems working properly. But I'm wondering why this works like this? Is that bug or feature?  Here I understand that my sample shows some unusual way of using `DeferredResult`. But imagine situation when we expect the result set in another thread and this happens exaclty right before the controller's method returns it in current thread. So here we've got truly race condition which very hard to detect sometimes. So that's why it would be nice to fix.   ---  **Affects:** 4.2.6  1 votes, 3 watchers","closed","","spring-projects-issues","2016-07-11T14:38:37Z","2019-01-11T16:25:54Z"
"","18925","AsyncRestTemplate changes in SPR-13413 made its harder to detect Client/Server errors  [SPR-14353]","**[Oleg Mikhailenko](https://jira.spring.io/secure/ViewProfile.jspa?name=o1egon)** opened **[SPR-14353](https://jira.spring.io/browse/SPR-14353?redirect=false)** and commented  After migrating to 4.2.6 our response statuses were broken for our client side. It always showed 500 error status. It turned out our client's exception handler (`@ControllerAdvice`) caught `ExecutionException` even though a server responded with 4xx/5xx error statuses. Spring's error hander for AsyncRestTemplate (`DefaultResponseErrorHandler`) contains code:  ```java public void handleError(ClientHttpResponse response) throws IOException { 	HttpStatus statusCode = getHttpStatusCode(response); 	switch (statusCode.series()) { 		case CLIENT_ERROR: 			throw new HttpClientErrorException(statusCode, response.getStatusText(), 					response.getHeaders(), getResponseBody(response), getCharset(response)); 		case SERVER_ERROR: 			throw new HttpServerErrorException(statusCode, response.getStatusText(), 					response.getHeaders(), getResponseBody(response), getCharset(response)); 		default: 			throw new RestClientException(""Unknown status code ["" + statusCode + ""]""); 	} } ```  It's OK but then (after #17992) any of these exceptions wrapped into `ExecutionException` in `ResponseExtractorFuture` (look `throw new ExecutionException(ex);`):  ```java @Override protected final T adapt(ClientHttpResponse response) throws ExecutionException { 	try { 		if (!getErrorHandler().hasError(response)) { 			logResponseStatus(this.method, this.url, response); 		} 		else { 			handleResponseError(this.method, this.url, response); 		} 		return convertResponse(response); 	} 	catch (Throwable ex) { 		throw new ExecutionException(ex); 	} 	finally { 		if (response != null) { 			response.close(); 		} 	} } ```  So as result it does not matter what error response sent by server `HttpClientErrorException/HttpServerErrorException`. It always wrapped to `ExecutionException`. And to fetch response status and body I have to get inner cause and cast to appropriate type. What is not so convenient.  It would be great if you could change the code of `ResponseExtractorFuture` to something like:  ```java @Override protected final T adapt(ClientHttpResponse response) throws ExecutionException {         try {             if (!getErrorHandler().hasError(response)) {                 logResponseStatus(this.method, this.url, response);             }             else {                 handleResponseError(this.method, this.url, response);             }             return convertResponse(response);         }         catch (RestClientException ex) {             throw ex;         }         catch (Throwable ex) {             throw new ExecutionException(ex);         }         finally {             if (response != null) {                 response.close();             }         }     } ```  ---  **Affects:** 4.2.6  **Issue Links:** - #18863 `@ExceptionHandler` should match cause as well (e.g. for exception thrown from argument formatter) - #17992 AsyncRestTemplate should wrap RuntimeExceptions in ExecutionException  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-06-10T13:04:03Z","2019-01-13T05:24:39Z"
"","19460","WebClient ArrayIndexOutOfBoundsException [SPR-14894]","**[Oleg Kovrizhin](https://jira.spring.io/secure/ViewProfile.jspa?name=kovrizhin)** opened **[SPR-14894](https://jira.spring.io/browse/SPR-14894?redirect=false)** and commented  Hello All,  I am playing little bit with spring reactive and found some strange behavior: I have ArrayIndexOutOfBoundsException when I receive more than 924 entities in the client:  Server side:  ```java   @GetMapping(""/persons"") @Produces(MediaType.APPLICATION_JSON) Flux list() {      return this.repository.findAll().take(925); } ```  Client side:  ``` ReactorClientHttpConnector clientHttpConnector = new ReactorClientHttpConnector(); ClientRequest.HeadersBuilder get = ClientRequest.GET(""http://localhost:8080/persons""); Flux personFlux = WebClient.create(clientHttpConnector).retrieveFlux(get.build(), Person.class); System.out.println(personFlux.toStream().count()); ```  Stack Trace: ``` Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException: -8236 at io.netty.buffer.HeapByteBufUtil.getByte(HeapByteBufUtil.java:24) at io.netty.buffer.UnpooledHeapByteBuf._getByte(UnpooledHeapByteBuf.java:323) at io.netty.buffer.UnpooledHeapByteBuf.getByte(UnpooledHeapByteBuf.java:318) at org.springframework.http.codec.json.JsonObjectDecoder$1.apply(JsonObjectDecoder.java:140) at org.springframework.http.codec.json.JsonObjectDecoder$1.apply(JsonObjectDecoder.java:103) at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:353) at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:120) at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:120) at reactor.core.publisher.FluxSubscribeOn$SubscribeOnSubscriber.onNext(FluxSubscribeOn.java:148) at reactor.ipc.netty.common.NettyChannelHandler$InboundSink.drain(NettyChannelHandler.java:707) at reactor.ipc.netty.common.NettyChannelHandler$InboundSink.next(NettyChannelHandler.java:616) at reactor.ipc.netty.common.NettyChannelHandler.doRead(NettyChannelHandler.java:134) at reactor.ipc.netty.http.NettyHttpClientHandler.channelRead(NettyHttpClientHandler.java:133) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:373) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359) at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:351) at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435) at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293) at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:280) at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:396) at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:248) at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:373) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359) at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:351) at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1334) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:373) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359) at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:926) at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:129) at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:651) at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:574) at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:488) at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:450) at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:873) at java.lang.Thread.run(Thread.java:745)  gradle: compile ""org.springframework:spring-core:5.0.0.M3"" compile ""org.springframework:spring-web:5.0.0.M3"" compile ""org.springframework:spring-web-reactive:5.0.0.M3"" compile ""io.netty:netty-all:4.1.6.Final"" compile ""io.projectreactor.ipc:reactor-netty:0.5.2.RELEASE"" ``` Then I decriese count of produced entity, all works fine, and I recieved all entities.  Best regards, Oleg  ---  **Affects:** 5.0 M3  **Issue Links:** - #19580 JsonObjectDecoder throws ArrayIndexOutOfBoundsException: -1 with valid input (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2016-11-10T10:33:05Z","2019-01-12T20:19:05Z"
"","19092","Both value and name attribute in AnnotationMetadata [SPR-14523]","**[ofbiz](https://jira.spring.io/secure/ViewProfile.jspa?name=ofbizbrazil)** opened **[SPR-14523](https://jira.spring.io/browse/SPR-14523?redirect=false)** and commented  After migrating to Spring 4.3.2 the value attribute set in an annotation is repeated to name attribute. In earlier version each one has its own value, but now attribute name can not be more empty.  I noticed using feign clients with Eureka, and FeignClientsRegistrar throws an exception saying it:  ```java  2016-07-28 14:43:22,812 ERROR org.springframework.boot.SpringApplication - Application startup failed java.lang.IllegalArgumentException: Either name or value can be specified, but not both 	at org.springframework.util.Assert.isTrue(Assert.java:68) 	at org.springframework.cloud.netflix.feign.FeignClientsRegistrar.validate(FeignClientsRegistrar.java:193) 	at org.springframework.cloud.netflix.feign.FeignClientsRegistrar.registerFeignClient(FeignClientsRegistrar.java:173) 	at org.springframework.cloud.netflix.feign.FeignClientsRegistrar.registerFeignClients(FeignClientsRegistrar.java:162) 	at org.springframework.cloud.netflix.feign.FeignClientsRegistrar.registerBeanDefinitions(FeignClientsRegistrar.java:87) 	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsFromRegistrars(ConfigurationClassBeanDefinitionReader.java:352) 	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:143) 	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:116) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:333) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:243) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:273) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:98) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:681) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:523) ```    ---  **Affects:** 4.3.2","closed","in: core,","spring-projects-issues","2016-07-28T17:46:06Z","2019-01-12T16:34:02Z"
"","19952","Oracle SQL hints are ignored as comments in ScriptUtils [SPR-15389]","**[Oded Shopen](https://jira.spring.io/secure/ViewProfile.jspa?name=odedia)** opened **[SPR-15389](https://jira.spring.io/browse/SPR-15389?redirect=false)** and commented  `ScriptUtils executeSqlScript()` method has a default comment delimiter of `/*` and `*/`.  This markers are used by Oracle for hints. For example:  ```sql SELECT /*+ DRIVING_SITE (BA) leading (BA S SR) FULL(BA) PARALLEL(BA 4) PARALLEL(S 4) PARALLEL(SR 4) */ BA.CUSTOMER FROM..... ```  These hints, when added, are crucial for db performance in production. We recently noticed in a production environment that  these hints in an SQL file executed by ScriptUtils was ignored. After looking at the code, we saw that the hints were simply removed.  We solved this issue by calling the overloaded `executeSqlScript` method that takes specific delimiters, and used ""fake"" delimiters (`##/*` and `*/##`) in order to get the hints working again. However, I feel this should not be the correct approach as default.  Suggestions would be:  - Implement a different behavior based on the JDBC driver being used: In case of Oracle, don't ignore these ""comments"".  - Alternatively, Take into account the full `/*+` marker as not being a comment (although that might not be a solution for all Oracle hints).  ---  **Reference URL:** http://stackoverflow.com/questions/33144628/springs-scriptutils-ignores-code-containing-comments-in-dump  **Issue Links:** - #17809 Support single quotes nested in double quotes in SQL scripts - #19999 org.springframework.jdbc.datasource.init.ScriptUtils#splitSqlScript cannot deal with semicolons in stored procedures","open","type: enhancement,","spring-projects-issues","2016-06-07T13:41:25Z","2020-07-21T13:20:40Z"
"","19461","Allow HTTP status exceptions to be easily thrown from Controllers [SPR-14895]","**[Norris Shelton](https://jira.spring.io/secure/ViewProfile.jspa?name=sheltonn)** opened **[SPR-14895](https://jira.spring.io/browse/SPR-14895?redirect=false)** and commented  There is no way to throw exceptions out of the box.  Developers must create exceptions for each HTTP status they want to throw, create exception handlers, etc.  It would be much better if basic functionality was included.  I created a ResourceException class (probably could have a better name for Spring), a generic controller advice (maybe call it something specific to the exception class).  If they are included in the SpringFramework, it would be backwards compatible and it would be very easy to throw an exception.  An example usage would be:  `throw new ResourceException(HttpStatus.BAD_REQUEST, ""Missing the user first name"");`  ---  **Affects:** 4.3.4  **Reference URL:** http://stackoverflow.com/questions/16232833/how-to-respond-with-http-400-error-in-a-spring-mvc-responsebody-method-returnin/40518283#40518283  **Attachments:** - [ControllerAdvice.java](https://jira.spring.io/secure/attachment/23614/ControllerAdvice.java) (_853 bytes_) - [ResourceException.java](https://jira.spring.io/secure/attachment/23615/ResourceException.java) (_1.31 kB_)  **Issue Links:** - #17136 Provide a standard exception hierarchy  for REST end points - #19473 ExceptionHandlerExceptionResolver should not log propagated exceptions at warn level  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2016-11-10T14:05:22Z","2019-01-11T17:39:21Z"
"","19133","SockJS heartbeat is causing  application send Message to fail similar to (SPR-14356) [SPR-14564]","**[Nilesh Rao](https://jira.spring.io/secure/ViewProfile.jspa?name=nileshprataprao@gmail.com)** opened **[SPR-14564](https://jira.spring.io/browse/SPR-14564?redirect=false)** and commented  I was able to reproduce the error message from Bug "" #18928"". Here is the scenario for testing also I am not using STOMP framework  1. Created a scheduler which runs for every 5 seconds. configured the sockjs heartbeat at the same time and was getting this error :  ``` 2016-08-05 19:28:04,963 TRACE [MessageBroker-1] o.s.w.s.s.t.s.WebSocketServerSockJsSession [AbstractSockJsSession.java:346] Preparing to write SockJsFrame content='h' 2016-08-05 19:28:04,964 TRACE [MessageBroker-1] o.s.w.s.s.t.s.WebSocketServerSockJsSession [WebSocketServerSockJsSession.java:219] Writing SockJsFrame content='h' 2016-08-05 19:28:04,964 TRACE [MessageBroker-1] o.s.w.s.a.NativeWebSocketSession [AbstractWebSocketSession.java:100] Sending TextMessage payload=[h], byteCount=1, last=true], StandardWebSocketSession[id=0, uri=/statchat-app-0.0.1-SNAPSHOT/onetoone/987/30pkeppn/websocket?email=statchat@hfhs.org&access_token=Bearer%20cwt=AAEBHAEFAAAAAAAFFQAAAHsAXEbHxgEhNpSCuUzpBQCBEPG03KmKqGVYoJGm-eyP8YKCAobPgyA44vbuH0LIQOXZWk_ou7d_oKHnFHrE_rxhUVcuhHL73oYIw6qBWsi90wgNEICZY2jjhKJSpjrDqcajWYI] 2016-08-05 19:28:04,965 TRACE [MessageBroker-4] o.s.w.s.s.t.s.WebSocketServerSockJsSession [AbstractSockJsSession.java:301] Cancelling heartbeat in session 30pkeppn 2016-08-05 19:28:04,966 TRACE [MessageBroker-4] o.s.w.s.s.t.s.WebSocketServerSockJsSession [AbstractSockJsSession.java:346] Preparing to write SockJsFrame content='a[""{\""data\"":\""ping from server 17\"",\""type\"":\""ping\""}""]' 2016-08-05 19:28:04,967 TRACE [MessageBroker-4] o.s.w.s.s.t.s.WebSocketServerSockJsSession [WebSocketServerSockJsSession.java:219] Writing SockJsFrame content='a[""{\""data\"":\""ping from server 17\"",\""type\"":\""ping\""}""]' 2016-08-05 19:28:04,967 TRACE [MessageBroker-4] o.s.w.s.a.NativeWebSocketSession [AbstractWebSocketSession.java:100] Sending TextMessage payload=[a[""{\""data..], byteCount=57, last=true], StandardWebSocketSession[id=0, uri=/statchat-app-0.0.1-SNAPSHOT/onetoone/987/30pkeppn/websocket?email=statchat@hfhs.org&access_token=Bearer%20cwt=AAEBHAEFAAAAAAAFFQAAAHsAXEbHxgEhNpSCuUzpBQCBEPG03KmKqGVYoJGm-eyP8YKCAobPgyA44vbuH0LIQOXZWk_ou7d_oKHnFHrE_rxhUVcuhHL73oYIw6qBWsi90wgNEICZY2jjhKJSpjrDqcajWYI] 2016-08-05 19:28:04,970 TRACE [MessageBroker-1] o.s.w.s.s.t.s.WebSocketServerSockJsSession [AbstractSockJsSession.java:288] Scheduled heartbeat in session 30pkeppn 2016-08-05 19:28:05,032 DEBUG [MessageBroker-4] o.s.w.s.s.t.s.WebSocketServerSockJsSession [AbstractSockJsSession.java:387] Terminating connection after failure to send message to client java.lang.IllegalStateException: The remote endpoint was in state [TEXT_PARTIAL_WRITING] which is an invalid state for called method 	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$StateMachine.checkState(WsRemoteEndpointImplBase.java:1177) 	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$StateMachine.textPartialStart(WsRemoteEndpointImplBase.java:1135) 	at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendPartialString(WsRemoteEndpointImplBase.java:226) 	at org.apache.tomcat.websocket.WsRemoteEndpointBasic.sendText(WsRemoteEndpointBasic.java:49) 	at org.springframework.web.socket.adapter.standard.StandardWebSocketSession.sendTextMessage(StandardWebSocketSession.java:197) 	at org.springframework.web.socket.adapter.AbstractWebSocketSession.sendMessage(AbstractWebSocketSession.java:104) 	at org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.writeFrameInternal(WebSocketServerSockJsSession.java:222) 	at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.writeFrame(AbstractSockJsSession.java:349) 	at org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.sendMessageInternal(WebSocketServerSockJsSession.java:212) 	at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.sendMessage(AbstractSockJsSession.java:165) 	at org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator.tryFlushMessageBuffer(ConcurrentWebSocketSessionDecorator.java:131) 	at org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator.sendMessage(ConcurrentWebSocketSessionDecorator.java:104) 	at com.visionit.statchat.stomp.CustomStompSubProtocolHandler.handleMessageFromClient(CustomStompSubProtocolHandler.java:31) 	at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.handleMessage(SubProtocolWebSocketHandler.java:307) 	at org.springframework.web.socket.handler.WebSocketHandlerDecorator.handleMessage(WebSocketHandlerDecorator.java:75) 	at com.visionit.statchat.stomp.WebSocketSessionCapturingHandlerDecorator.handleMessage(WebSocketSessionCapturingHandlerDecorator.java:60) 	at com.visionit.statchat.stomp.WebSocketSessionCapturingHandlerDecorator.sendToAll(WebSocketSessionCapturingHandlerDecorator.java:154) 	at com.visionit.statchat.service.impl.RedisMessageListener.pingClients(RedisMessageListener.java:90) 	at sun.reflect.GeneratedMethodAccessor81.invoke(Unknown Source) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:65) 	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54) 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) 	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:745) 2016-08-05 19:28:05,034 DEBUG [MessageBroker-4] o.s.w.s.a.NativeWebSocketSession [AbstractWebSocketSession.java:137] Closing StandardWebSocketSession[id=0, uri=/statchat-app-0.0.1-SNAPSHOT/onetoone/987/30pkeppn/websocket?email=statchat@hfhs.org&access_token=Bearer%20cwt=AAEBHAEFAAAAAAAFFQAAAHsAXEbHxgEhNpSCuUzpBQCBEPG03KmKqGVYoJGm-eyP8YKCAobPgyA44vbuH0LIQOXZWk_ou7d_oKHnFHrE_rxhUVcuhHL73oYIw6qBWsi90wgNEICZY2jjhKJSpjrDqcajWYI]  ```  ---  **Affects:** 4.2.7  **Issue Links:** - #18928 SockJs heartbeat during message send closes socket - #19137 StompSubProtocolHandler responds with ERROR (Session closed.) on DISCONNECT when using SimpleBrokerMessageHandler  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/977b67e418d8ffde04c88f1b416599372fcfad94  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: bug,","spring-projects-issues","2016-08-05T23:41:44Z","2019-01-11T18:05:00Z"
"","19213","Number of Beans in a Config class breaks injection [SPR-14647]","**[Nikolaos Ballas](https://jira.spring.io/secure/ViewProfile.jspa?name=mpallas@gmail.com)** opened **[SPR-14647](https://jira.spring.io/browse/SPR-14647?redirect=false)** and commented  Hi guys, I have to configure spring securityto work with SAML. But when I define my WebSecurityConfig class with all the `@Bean` definitions being more than 20(according to the JavaConfig also pointed out) if I want to Inject a properties holder class with `@Autowired`, the Injection point isn't repected but thet beans start to be defined without the DI to have finished. Try running the vdeontaris from github will produce the same error.   ---  **Affects:** 4.2.6  **Attachments:** - [WebSecurityConfig.java](https://jira.spring.io/secure/attachment/23531/WebSecurityConfig.java) (_34.19 kB_)","closed","in: core,","spring-projects-issues","2016-08-31T10:07:36Z","2019-01-12T05:22:05Z"
"","19334","Spring @PostConstruct init/sequence weirdness [SPR-14768]","**[Nikola Kolev](https://jira.spring.io/secure/ViewProfile.jspa?name=nkolev)** opened **[SPR-14768](https://jira.spring.io/browse/SPR-14768?redirect=false)** and commented  This is a dup of the following [stackoverflow question](http://stackoverflow.com/questions/39668229). Apologies for the cross post but a week after posting on stackoverflow there has not been an answer. So here it goes here as well..  Env: `spring 4.2.6.RELEASE`, `JDK 7`, `Tomcat 7`  I have two beans that carry a `@PostConstruct` decorated method.  Both beans, in their post construct method, make use of a library. This library creates and places an object/resource in thread local scope which resource then gets used by all code running on this thread when the library is interacted with until the library gets instructed to free the resource. Said resource gets freed at the termination of the post construct method (via an explicit call). The two beans do not need to and do not attempt to share this object/resource.  The intent behind both beans' post construct methods is caching some fairly static data that is managed by another system. This in-memory cache also gets refreshed via a separate `@Scheduled`-annotated method.  I'd reasoned that this shouldn't be an issue when:  a) the beans' post construct methods run in separate threads since the thread local object/resource the two beans would see/use would be different, or,  b) the beans' post construct methods run on the same thread, since the call into both of those post construct method blocks and there would be no way to ""interleave"" the execution of those methods hence no way for the method calls to interleave usage of the same thread local object/resource.  What I observe, however, is:  - bean_A's post construct method starts executing on thread_A. - bean_A's post construct method makes a call into the library -> library resource gets created and placed in thread local scope. - bean_A's post construct method gets some work done, some of which involves interacting with the library, and hence the thread local resource. Some of that work involves **making IO calls** related to populating said in-memory cache. - before bean_A's post construct method has completed, bean_B's post construct method starts executing on that same thread_A, finishes its work, and frees up the thread local resource. - bean_A's post construct method comes back in action on thread_A and blows up when it tries to interact with the library as the resource that its interaction depends on got freed by bean_B's post construct method finishing its execution.  Am I crazy, reading things wrong, or this is something that happens and I shouldn't be surprised that it does?   --- No further details from [SPR-14768](https://jira.spring.io/browse/SPR-14768?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2016-09-29T17:19:36Z","2019-01-12T02:24:20Z"
"","18860","@Bean not detected in extended interface [SPR-14288]","**[Niko Wittenbeck](https://jira.spring.io/secure/ViewProfile.jspa?name=nikowitt)** opened **[SPR-14288](https://jira.spring.io/browse/SPR-14288?redirect=false)** and commented  Hi there,  I'm currently playing with the Spring JavaConf and I'm using lots of interfaces with default methods. It seems that there are issues with `@Bean` detection in deep inheritance structures.  This config is detected in my test environment:  ```java @Configuration @Profile(""test"") public class SumaSpringTestConfig extends SumaBasicConfig implements SumaTestConfig { } ```  This config extends from SumaBasicConfig, which is  ```java public abstract class SumaBasicConfig implements BasicApplicationConfig { 	@Override 	@Bean 	public SumaApplication getApplication() { 		return init(SumaApplication.class); 	}  } ```  SumaBasicConfig implements the interface BasicApplicationConfig:  ```java public interface BasicApplicationConfig {  	default  T init(Class clazz) { 		return ReflectionUtils.newInstanceOf(clazz, true); 	}  	JAFApplication getApplication();  	DataSource dataSource(DataSource jndiDataSource); } ```  SumaBasicConfig's SumaApplication extends from JAFApplication, so everything is all right here.  So what still needs to be implemented is dataSource. But SumaSpringTestConfig also implements SumaTestConfig, which is:  ```java public interface SumaTestConfig extends TestConfig {  	@Override 	@Bean 	public default TestTools testTools() { 		return init(SumaTestTools.class); 	} } ```  SumaTestConfig extends the TestConfig interface, which is  ```java public interface TestConfig extends BasicApplicationConfig {  	@Override 	@Bean 	public default DataSource dataSource(DataSource jndiDataSource) { 		return ProxyDataSourceBuilder 				.create(jndiDataSource) 				.logQueryBySlf4j(""org.hibernate.SQL"") 				.asJson() 				.name(""dataSource"") 				.countQuery() 				.build(); 	}  	public TestTools testTools(); } ```  So this that all requirements are fulfilled and everything is implemented. But when I execute my test, the dataSource bean is not found:  ``` org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'dataSource' is defined ```  **When I move my default dataSource implementation from TestConfig to SumaTestConfig, it is recognized properly.**  So to me it seems that not all all levels are parsed for the `@Bean` annotation.  ---  **Affects:** 4.2.6  **Issue Links:** - #19086 Do not fail with a circular `@Import` error caused by an `@ComponentScan`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/62199e82efb99de16a9b547b24262da0f0025f90, https://github.com/spring-projects/spring-framework/commit/03affa02dbb3d629d12228b1622a1d2c8cd37931  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","in: core,","spring-projects-issues","2016-05-19T05:52:00Z","2019-01-13T05:25:44Z"
"","19027","Support timeout settings in MockRestServiceServer [SPR-14458]","**[Nikita Zhuravlev](https://jira.spring.io/secure/ViewProfile.jspa?name=nzhuravlev)** opened **[SPR-14458](https://jira.spring.io/browse/SPR-14458?redirect=false)** and commented  Since MockRestServiceServer simply replaces RestTemplate requestFactory and requestFactory serves as the holder of HttpClient and timeouts settings you will get irrelevant test results in case you'll make your own realisation of ResponseCreator with timeout simulation.  ---  **Issue Links:** - #20866 Limit thread synchronization in AbstractRequestExpectationManager  1 votes, 4 watchers","closed","status: superseded,","spring-projects-issues","2016-07-13T10:27:44Z","2019-11-08T18:08:48Z"
"","19372","Wait for Quartz jobs to finish before continuing shutdown of singleton beans [SPR-14806]","**[Nicolas Labrot](https://jira.spring.io/secure/ViewProfile.jspa?name=nithril)** opened **[SPR-14806](https://jira.spring.io/browse/SPR-14806?redirect=false)** and commented  This one originated as ticket in Spring Data but the essence seems to be this:  > The `SchedulerFactoryBean.stop()` method calls the Quartz `standby()` method which does not wait for job completion. Thus, Spring continues its shutdown process and it starts to destroy singletons and especially the `auditingHandler` bean before the `schedulerFactoryBean` bean.  ### Original description  Hello,  When my application shutdown I got this exception:  ``` org.springframework.transaction.TransactionSystemException: Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Error while committing the transaction     at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:526)     at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:761)     at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:730)     at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:485)     at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:291)     at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)     at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)     at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:655)     at com.victorbuckservices.vbackbone.common.transaction.DoInTransactionService$$EnhancerBySpringCGLIB$$4c864b6e.execute()     at com.victorbuckservices.vbackbone.service.distribution.fax.service.DistributionFaxService.particularRslFolderPolling(DistributionFaxService.java:757)     at com.victorbuckservices.vbackbone.service.distribution.fax.service.DistributionFaxService.rslPolling(DistributionFaxService.java:723)     at com.victorbuckservices.vbackbone.service.distribution.fax.service.DistributionFaxService$$FastClassBySpringCGLIB$$7c544f09.invoke()     at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)     at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:651)     at com.victorbuckservices.vbackbone.service.distribution.fax.service.DistributionFaxService$$EnhancerBySpringCGLIB$$75a0516b.rslPolling()     at com.victorbuckservices.vbackbone.service.distribution.fax.quartz.PollingJob.execute(PollingJob.java:28)     at org.quartz.core.JobRunShell.run(JobRunShell.java:202)     at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573) Caused by: javax.persistence.RollbackException: Error while committing the transaction     at org.hibernate.jpa.internal.TransactionImpl.commit(TransactionImpl.java:94)     at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:517)     ... 17 common frames omitted Caused by: org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'jpaAuditingHandler': Singleton bean creation not allowed while the singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!) ```  Some tasks must be finished prior to the shutdown and because spring is shutting down, it forbids call to DefaultSingletonBeanRegistry#getSingleton and thus AuditingEntityListener#touchForUpdate failed because he used an ObjectFactory\:  ```java @PreUpdate public void touchForUpdate(Object target) {     if (handler != null) {         handler.getObject().markModified(target);     } } ```  ---  **Issue Links:** - #19311  SchedulerFactoryBean's setOverwriteExistingJobs does not reliably work in a cluster","closed","status: bulk-closed,","spring-projects-issues","2016-07-22T06:41:09Z","2019-01-14T04:37:29Z"
"","19356","Add support for URI templates in redirectedUrl() & forwardedUrl() [SPR-14790]","**[Nicolai Ehemann](https://jira.spring.io/secure/ViewProfile.jspa?name=mcnetic)** opened **[SPR-14790](https://jira.spring.io/browse/SPR-14790?redirect=false)** and commented  #### Status Quo  Currently, `redirectedUrl()` and `forwardedUrl()` in `MockMvcResultMatchers` support constant URLs and pattern matching.  However, I think often the redirect or forward URL is dependent on the URL of the controller method (for example, ""/item/{id}"" forwarding to ""/item/{id}/something""). It would be much more readable not to build the `redirectedUrl()` arguments by string concatenation, but to provide URL template and vars equivalent to the `get()` or `post()` calls.  #### Proposal  So, the proposal is to replace `redirectedUrl(expectedUrl)` with `redirectedUrl(expectedUrl, vars)`. The default behavior (when omitting the vars argument) would be unchanged.  The implementation is quite trivial, I would be willing to provide a pull request if the proposal is accepted.  ---  **Issue Links:** - #20389 Regression after URI template support added to MockMvcResultMatchers  **Referenced from:** commits https://github.com/spring-projects/spring-social/commit/15395125aafed884bcb7ff459a44457b7c743df9","closed","type: enhancement,","spring-projects-issues","2016-10-10T09:27:39Z","2019-01-13T20:31:56Z"
"","18969","RequestMappingInfoHandlerMapping.handleNoMatch throws 415 when it should throw 406 [SPR-14397]","**[Nick](https://jira.spring.io/secure/ViewProfile.jspa?name=nickb)** opened **[SPR-14397](https://jira.spring.io/browse/SPR-14397?redirect=false)** and commented  When two methods have the same mapping but differ on what media types they consume, handleNoMatch is throwing a 415 Unsupported media type when it should be throwing 406 Not acceptable. In the following example, we have two methods that both produce JSON, but take different input formats:  1. POST /test, Input (consumes): JSON, Output (produces): JSON 2. POST /test, Input (consumes): TEXT, Output (produces): JSON  ```java @RestController @RequestMapping(value = ""/test"") public class Controller {     @RequestMapping(value = """",         method = { RequestMethod.POST },         consumes = { MediaType.APPLICATION_JSON_VALUE },         produces = { MediaType.APPLICATION_JSON_VALUE }     )     public String post1() {         return ""Accept: JSON"";     }      @RequestMapping(value = """",         method = { RequestMethod.POST },         consumes = { MediaType.TEXT_PLAIN_VALUE },         produces = { MediaType.APPLICATION_JSON_VALUE }     )     public String post2() {         return ""Accept: TEXT"";     } } ```  The following requests fail with 415 when they should be 406: * POST /test, Content-Type: JSON, Accept: application/xml * POST /test, Content-Type: TEXT, Accept: applicaton/xml  This is because in my project, I also have an HttpMessageConverter that can produce XML. If I didn't, I would get a 406, since the sequence of events would be: 1. handleNoMatch throws 415 2. AbstractMessageConverterMethodProcessor attempts to convert this exception with the current message handlers 3. It finds none and throws a 406 which causes the 415 to be ignored  But since there is also an HttpMessageConverter that can write XML, #3 in the above sequence succeeds and an error message is printed in XML and an HTTP status of 415 is returned.  ---  **Affects:** 4.3 GA  **Issue Links:** - #14237 RequestMappingInfoHandlerMapping.handleNoMatch throws HttpRequestMethodNotSupportedException incorrectly","closed","type: enhancement,","spring-projects-issues","2016-06-24T20:19:26Z","2019-01-11T15:47:04Z"
"","18881","Spring Web should process requests with empty/invalid mime type [SPR-14309]","**[Nazar Vishka](https://jira.spring.io/secure/ViewProfile.jspa?name=nazar%20vishka)** opened **[SPR-14309](https://jira.spring.io/browse/SPR-14309?redirect=false)** and commented  If a client is sending a POST message with an empty/invalid header 'Content-Type' the request fails with [InvalidMediaTypeException](https://github.com/spring-projects/spring-framework/blob/v4.2.6.RELEASE/spring-web/src/main/java/org/springframework/http/InvalidMediaTypeException.java).  ``` org.springframework.http.InvalidMediaTypeException: Invalid mime type ""null"": does not contain '/'         at org.springframework.http.MediaType.parseMediaType(MediaType.java:385) ~[spring-web-4.2.5.RELEASE.jar!/:4.2.5.RELEASE]         at org.springframework.http.HttpHeaders.getContentType(HttpHeaders.java:722) ~[spring-web-4.2.5.RELEASE.jar!/:4.2.5.RELEASE]         at org.springframework.http.server.ServletServerHttpRequest.getHeaders(ServletServerHttpRequest.java:116) ~[spring-web-4.2.5.RELEASE.jar!/:4.2.5.RELEASE]         at org.springframework.web.util.WebUtils.isSameOrigin(WebUtils.java:810) ~[spring-web-4.2.5.RELEASE.jar!/:4.2.5.RELEASE]         at org.springframework.web.cors.DefaultCorsProcessor.processRequest(DefaultCorsProcessor.java:71) ~[spring-web-4.2.5.RELEASE.jar!/:4.2.5.RELEASE]         at org.springframework.web.servlet.handler.AbstractHandlerMapping$CorsInterceptor.preHandle(AbstractHandlerMapping.java:503) ~[spring-webmvc-4.2.5.RELEASE.jar!/:4.2.5.RELEASE]         at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:134) ~[spring-webmvc-4.2.5.RELEASE.jar!/:4.2.5.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:954) ~[spring-webmvc-4.2.5.RELEASE.jar!/:4.2.5.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) ~[spring-webmvc-4.2.5.RELEASE.jar!/:4.2.5.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:968) [spring-webmvc-4.2.5.RELEASE.jar!/:4.2.5.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:870) [spring-webmvc-4.2.5.RELEASE.jar!/:4.2.5.RELEASE] ```  I think that [org.springframework.http.HttpHeaders#getContentType](https://github.com/spring-projects/spring-framework/blob/v4.2.6.RELEASE/spring-web/src/main/java/org/springframework/http/HttpHeaders.java#L720-L723) should handle  InvalidMediaTypeException exception and return null in such cases or you should change behaviour of [org.springframework.http.MediaType#parseMediaType](https://github.com/spring-projects/spring-framework/blob/v4.2.6.RELEASE/spring-web/src/main/java/org/springframework/http/MediaType.java#L379-L393)  ---  **Affects:** 4.2.6  **Issue Links:** - #18350 Regression: HttpEntityMethodProcessor does not allow other Http methods than defined in the HttpMethod Enum - #16787 HttpHeaders should accept empty Content-Type header  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-05-27T07:01:26Z","2019-02-08T18:55:57Z"
"","19011","UriTemplate and restTemplate don't url encode the Hash-sign (#) [SPR-14441]","**[Naveen Singireddy](https://jira.spring.io/secure/ViewProfile.jspa?name=singireddy_naveen@network.lilly.com)** opened **[SPR-14441](https://jira.spring.io/browse/SPR-14441?redirect=false)** and commented  Trying to pass in a request parameter containing #  doesn't work correctly as the Hash-sign isn't correctly encoded to %23.   ---  **Affects:** 4.3.1","closed","status: invalid,","spring-projects-issues","2016-07-07T17:43:58Z","2019-01-12T05:22:26Z"
"","18897","Declarative annotation-based caching not respecting Hazelcast configuration for maps of type: ReplicatedMap  [SPR-14325]","**[Nasko Vasilev](https://jira.spring.io/secure/ViewProfile.jspa?name=magiccrafter)** opened **[SPR-14325](https://jira.spring.io/browse/SPR-14325?redirect=false)** and commented  Cache Abstraction and respectively the declarative annotation-based caching seems to not recognize the configuration for Hazelcast's ReplicatedMap data structure. Instead of adding to the correct map (the ReplicatedMap) it creates a new IMap map with the same mbean and map name as the replicated one. This can be easily be reproduced and verified by trying both ways for using the ReplicatedMap.  - Cache abstraction via Java annotations   When the Java annotations (i.e. `@Cacheable`) is used the problem is reproducible and can be clarified by checking the Hazelcast's MBeans for the configured maps.   The observed result is:   com.hazelcast  > IMap > replMap (wrong and the data goes here) > ReplicatedMap > replMap (visible but never used)  - without cache abstraction   com.hazelcast  > ReplicatedMap > replMap (correct and the data goes here as expected)  Please check the gist (Reference URL) for example configuration.   ---  **Affects:** 4.2.6  **Reference URL:** https://gist.github.com/magiccrafter/cfc18d574d157b0001405606f1cf45e3","closed","in: core,","spring-projects-issues","2016-06-02T12:49:57Z","2019-01-12T05:22:41Z"
"","18890","Spring MVC: Reusing Resources (sub-resources) [SPR-14318]","**[Nahshon Unna Tsameret](https://jira.spring.io/secure/ViewProfile.jspa?name=nahsh)** opened **[SPR-14318](https://jira.spring.io/browse/SPR-14318?redirect=false)** and commented  Hi.  I'm Trying to move my server from JAX-RS to Spring MVC. The implementation uses JAX-RS sub-resources, as well as inheriting resources and abstract resource classes.  For example:  The server's data model include entities of type A, that contain several entities of type B, several of type C etc. So each unique B, C, D or E entity, belongs to one specific entity of type A. The application offers REST CRUD operations for these entities, where the access is by A unique ID, or by the sub-entity unique ID. Also, there are many more APIs, such as - reading all B's of a specific A, read all C's with a specific property value, setting a property within n entity and so on.  These two URLs are equivalent: /As/{a_id}/Bs/{b_id}   /Bs/{b_id}  In JAX-RS, the implementation is a resource class for each type, where this class is used both as a component, and as a reference from A:  ```java @Component @Path(""/As"") class resourceA {     @Resource     ResourceB resourceB;      @Resource     ResourceC resourceC;      @Resource     ResourceD resourceD;      @Resource     ResourceE resourceE;      @Path(""/a_id}"")     @PUT     public Response createA(...) { ... }      ...      @Path(""/{a_id}/Bs"")     public getResourceB() {         return resourceB;     }     ... }  @Component @Path(""Bs"") class ResourceB {     ... } ```  As I understand that the concept of sub-resources is not related to spring MVC, I'm trying to understand how to do the migration, without changing the API.  I tried to use multiple paths, but there is a bug:  ```java @RequestMapping(value={""/As/{a_id}/Bs/{b_id}"", ""/Bs/{ b_id}""}, method=GET) public getSpecificBEntity(@PathVariable(""a_id"") String aId, @PathVariable(""b_id"") String bId) {...} ```  Now, /As/{a_id}/Bs/{b_id} URL is working, but /Bs/{b_id} returns HTTP status of 400, because there is no way to make a PathVariable optional (required=false).  So I tried delegation:  ```java @RequestMapping(value=""/As/{a_id}/Bs/{b_id}"", method=GET) public DifferedResult getSpecificBEntity(@PathVariable(""a_id"") String aId, @PathVariable(""b_id"") String bId) {     ... }  @RequestMapping(value=""/Bs/{b_id}"", method=GET) public DifferedResult getSpecificBEntity(@PathVariable(""b_id"") String bId) {     return getSpecificBEntity(null, bId); } ```  This is working, but the code became huge and unreadable, because each resource includes many handlers, and each one of them should handle multiple URLs.  What is the best approach to implement this set of URLs in Spring MVC?  Thanks!  ---  **Affects:** 4.1.7  **Reference URL:** https://stackoverflow.com/questions/37528055/sub-resources-in-spring-mvc  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2016-05-31T05:09:31Z","2019-01-13T20:33:13Z"
"","19502","May spring need update to take account of Oracle's fix for CVE-2016-3427. [SPR-14935]","**[myvyang](https://jira.spring.io/secure/ViewProfile.jspa?name=myvyang)** opened **[SPR-14935](https://jira.spring.io/browse/SPR-14935?redirect=false)** and commented  see http://tomcat.apache.org/security-8.html CVE-2016-8735 and http://engineering.pivotal.io/post/java-deserialization-jmx/  JMX deserialize user name and password without any validation, will cause Remote Code Execution if the JMX service can access from untrusted client, even the server set a password.  Oracle have release a fix, and tomcat update. May Spring need update too   ---  **Affects:** 5.0 M3","closed","in: core,","spring-projects-issues","2016-11-23T02:19:00Z","2019-01-12T16:33:50Z"
"","18954","Spring @Async with multiple exception handlers [SPR-14381]","**[Mukund Jalan](https://jira.spring.io/secure/ViewProfile.jspa?name=mukundjalan)** opened **[SPR-14381](https://jira.spring.io/browse/SPR-14381?redirect=false)** and commented  Currently if I am using XML configuration, as per #13635 I can specify **exception-handler** in tag **** to specify an exception handling strategy for all the **`@Async`** methods in my system. If I have multiple executors, I can specify **value** to the **`@Async`** annotation and have a different executor configured. Similarly, if I need to specify a different exception handler, there is no provision to have it for different scenarios.  I hope to have a provision to specify the class of my **AsyncUncaughtExceptionHandler** in **`@Async`** annotation.  ---  No further details from [SPR-14381](https://jira.spring.io/browse/SPR-14381?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-06-20T07:29:30Z","2019-01-11T15:47:33Z"
"","18906","Add support for Hibernate 5.2 [SPR-14334]","**[Mohsen Kashi](https://jira.spring.io/secure/ViewProfile.jspa?name=mohsenkashi)** opened **[SPR-14334](https://jira.spring.io/browse/SPR-14334?redirect=false)** and commented  By changing the Transaction management in Hibernate 5.2 Spring project stops working with Hibernate 5.2. for detail see this StackOverflow  question:  http://stackoverflow.com/questions/37651837/integrate-hibernate-5-2-with-spring  ---  **Affects:** 4.2.6  **Reference URL:** http://stackoverflow.com/questions/37651837/integrate-hibernate-5-2-with-spring  **Issue Links:** - #18899 Support for Hibernate ORM 5.2 (_**""duplicates""**_) - #19135 spring boot 1.4 support with hibernate 5.2.1","closed","type: enhancement,","spring-projects-issues","2016-06-06T08:55:32Z","2019-01-11T16:06:48Z"
"","19948","JdbcTemplate.queryForRowSet does not work in case of nested SELECT clause on MySQL [SPR-15385]","**[Mohammed Zubair](https://jira.spring.io/secure/ViewProfile.jspa?name=zubaeyrodin)** opened **[SPR-15385](https://jira.spring.io/browse/SPR-15385?redirect=false)** and commented  JDBCTemplate fails to execute the query containing ""SELECT"" statement inside ""FROM clause.  *Please refer to the stack-overflow link for more details : * http://stackoverflow.com/questions/39855818/spring-jdbc-template-cant-execute-queries-containing-nested-query-in-the-from-c  The same query runs perfectly fine in both Mysql workbench and console. I tested the same query in a different program using plain jdbc, without using spring. And it works fine.  **Note :** There is no problem with the connection initialization or whatsoever. Only these type of queries are making a fuss. All other queries are running perfectly fine.   ---  **Reference URL:** http://stackoverflow.com/questions/39855818/spring-jdbc-template-cant-execute-queries-containing-nested-query-in-the-from-c","closed","status: bulk-closed,","spring-projects-issues","2016-10-09T20:11:48Z","2019-01-12T00:11:39Z"
"","18998","When I try to acquire MD5 using DigestUtils, java.lang.OutOfMemoryError occurs. [SPR-14427]","**[Mitsuyoshi Hasegawa](https://jira.spring.io/secure/ViewProfile.jspa?name=yggd)** opened **[SPR-14427](https://jira.spring.io/browse/SPR-14427?redirect=false)** and commented  When InputStream of a huge file size (approximately 3 GB) is given, OOM occurs by the following method.  * org.springframework.util.DigestUtils#md5Digest(InputStream inputStream) * org.springframework.util.DigestUtils#md5DigestAsHex(InputStream inputStream) * org.springframework.util.DigestUtils#appendMd5DigestAsHex(InputStream inputStream, StringBuilder builder)  Stack trace is as follows:  ``` Exception in thread ""main"" java.lang.OutOfMemoryError: Java heap space 	at java.util.Arrays.copyOf(Arrays.java:3236) 	at java.io.ByteArrayOutputStream.grow(ByteArrayOutputStream.java:118) 	at java.io.ByteArrayOutputStream.ensureCapacity(ByteArrayOutputStream.java:93) 	at java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:153) 	at org.springframework.util.StreamUtils.copy(StreamUtils.java:128) 	at org.springframework.util.StreamUtils.copyToByteArray(StreamUtils.java:60) 	at org.springframework.util.DigestUtils.digest(DigestUtils.java:131) 	at org.springframework.util.DigestUtils.digestAsHexChars(DigestUtils.java:163) 	at org.springframework.util.DigestUtils.digestAsHexString(DigestUtils.java:141) 	at org.springframework.util.DigestUtils.md5DigestAsHex(DigestUtils.java:80) 	at org.yggd.files.FileMisc.md5String(FileMisc.kt:36) ```  When I use org.apache.commons.codec.digest.DigestUtils in Apache Commons Codec (version 1.10) referred by the API document, It normally works.   ---  **Affects:** 4.2.6, 4.3.1  **Reference URL:** http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/DigestUtils.html  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-07-04T16:40:34Z","2016-07-28T09:16:21Z"
"","19256","ScheduledAnnotationBeanPostProcessor should reliably apply after AnnotationAwareAspectJAutoProxyCreator [SPR-14692]","**[Mischa Neumann](https://jira.spring.io/secure/ViewProfile.jspa?name=mischa)** opened **[SPR-14692](https://jira.spring.io/browse/SPR-14692?redirect=false)** and commented  if you use `@EnableAspectJAutoProxy` and e.g. `@EnableScheduling` you might accidentally create a `ScheduledMethodRunnable` with an unproxied bean.  this is caused by `AnnotationAwareAspectJAutoProxyCreator` and `ScheduledAnnotationBeanPostProcessor` both having a default order of Ordered.LOWEST_PRECEDENCE.  as the developer usually has no insight in which post processor is applied in which order and the ordering might be critical for the application to function properly, I would suggest: * log all post processors and their ordering at INFO level on startup * force all post processors to have a unique order (there is enough space between Ordered.LOWEST_PRECEDENCE and HIGHEST_PRECEDENCE) * review the existing spring framework post processors for having a reasonable default order  ---  **Affects:** 4.2.7  **Issue Links:** - #19526 Ordered interface not respected on non-singleton aspects - #19633 SchedulingConfigurer's ScheduledTaskRegistrar should reliably shut down before TaskScheduler  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fd21e0e69aceb0c1f2f2296f282e49d39d8f6ee7, https://github.com/spring-projects/spring-framework/commit/edc62be2310acbce918f742bb6960fcd69d413d2","closed","type: enhancement,","spring-projects-issues","2016-09-12T07:56:50Z","2019-01-11T18:19:37Z"
"","19255","@SessionAttributes not working as expected [SPR-14691]","**[Mischa Neumann](https://jira.spring.io/secure/ViewProfile.jspa?name=mischa)** opened **[SPR-14691](https://jira.spring.io/browse/SPR-14691?redirect=false)** and commented  `@SessionAttributes(""pet"")` creates a global session attribute ""pet"".  Imagine you have some similar controllers, e.g. for searching. all inherit from a common super class, share some views but use specific form beans. then you would use a common model attribute name  - e.g. ""searchForm"".  if you now add `@SessionAttributes(""searchForm"")` to more than one search controller, you would expect that each specific controller gets its own form bean and not the stored bean from some other controller (which results in a ClassCastException).  ---  **Affects:** 4.2.7  **Issue Links:** - #8838 `@SessionAttributes` doesn't work with tabbed browsing - #9494 Session's attribute name in HandlerMethodInvoker's sessionAttributeStore","closed","type: enhancement,","spring-projects-issues","2016-09-12T07:40:50Z","2019-01-13T05:22:18Z"
"","19350","IOException: Stream is closed (HttpOutputStreamImpl) on WebSphere Liberty [SPR-14784]","**[Milan Plancik](https://jira.spring.io/secure/ViewProfile.jspa?name=plancik.m)** opened **[SPR-14784](https://jira.spring.io/browse/SPR-14784?redirect=false)** and commented  Dear team,  could you please have a look into following issue which occurs on Websphere liberty profile (last versioning naming convention for wlp says, that the version is 16.0.0.2)  I think simple web page with ""hello world"" should reproduce the issue, while executed on wlp.  Launching srv1 (WebSphere Application Server 16.0.0.2/wlp-1.0.13.cl160220160526-2258) on Java HotSpot(TM) 64-Bit Server VM, version 1.7.0_40-b43 (en_US) [AUDIT   ] CWWKE0001I: The server srv1 has been launched. [AUDIT   ] CWWKE0100I: This product is licensed for development, and limited production use. The full license terms can be viewed here: https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/wasdev/license/base_ilan/ilan/16.0.0.2/lafiles/en.html [WARNING ] CWWKS3103W: There are no users defined for the BasicRegistry configuration of ID basic. [AUDIT   ] CWWKZ0058I: Monitoring dropins for applications. [WARNING ] SRVE9967W: The manifest class path activation.jar can not be found in jar file file:/C:/work/was6/wlp/usr/servers/srv1/apps/expanded/web.war/WEB-INF/lib/mail-1.4.jar or its parent. [WARNING ] SRVE9967W: The manifest class path activation.jar can not be found in jar file file:/C:/work/was6/wlp/usr/servers/srv1/apps/expanded/web.war/WEB-INF/lib/mail-1.4.jar or its parent. [ERROR   ] CWWKS9582E: The [defaultSSLConfig] sslRef attributes required by the orb element with the defaultOrb id have not been resolved within 10 seconds. As a result, the applications will not start. Ensure that you have included a keyStore element and that Secure Sockets Layer (SSL) is configured correctly. If the sslRef is defaultSSLConfig, then add a keyStore element with the id defaultKeyStore and a password. [AUDIT   ] CWWKT0016I: Web application available (default_host): http://localhost:9080/webapp/ [AUDIT   ] CWWKZ0001I: Application web started in 23,482 seconds. [AUDIT   ] CWWKF0012I: The server installed the following features: [mdb-3.2, webProfile-7.0, jaxrs-2.0, json-1.0, appSecurity-2.0, jpa-2.1, jaspic-1.1, distributedMap-1.0, jaxb-2.2, jaxws-2.2, ssl-1.0, jdbc-4.1, managedBeans-1.0, jsf-2.2, appClientSupport-1.0, jacc-1.5, ejbHome-3.2, wasJmsClient-2.0, cdi-1.2, wasJmsSecurity-1.0, jaxrsClient-2.0, ejbRemote-3.2, javaMail-1.5, batch-1.0, j2eeManagement-1.1, websocket-1.1, el-3.0, beanValidation-1.1, ejbPersistentTimer-3.2, jca-1.7, wasJmsServer-1.0, servlet-3.1, ejb-3.2, jsp-2.3, jndi-1.0, jsonp-1.0, concurrent-1.0, ejbLite-3.2, jcaInboundSecurity-1.0, javaee-7.0]. [AUDIT   ] CWWKF0011I: The server srv1 is ready to run a smarter planet. [WARNING ] `@Bean` method ScopeConfiguration.stepScope is non-static and returns an object assignable to Spring's BeanFactoryPostProcessor interface. This will result in a failure to process annotations such as `@Autowired`, `@Resource` and `@PostConstruct` within the method's declaring `@Configuration` class. Add the 'static' modifier to this method to avoid these container lifecycle issues; see `@Bean` javadoc for complete details. [WARNING ] `@Bean` method ScopeConfiguration.jobScope is non-static and returns an object assignable to Spring's BeanFactoryPostProcessor interface. This will result in a failure to process annotations such as `@Autowired`, `@Resource` and `@PostConstruct` within the method's declaring `@Configuration` class. Add the 'static' modifier to this method to avoid these container lifecycle issues; see `@Bean` javadoc for complete details. 2016-10-03-14:21:44.000244  INFO [LargeThreadPool-thread-61] G10CdsToolDataSourceSpringConfig - G10SteeringDataSourceSpringConfig->DataSource=com.ibm.ws.rsadapter.jdbc.WSJdbcDataSource@4072986e 2016-10-03-14:21:44.000923  INFO [LargeThreadPool-thread-61] G10CdsToolDataSourceSpringConfig - G10SteeringDataSourceSpringConfig->DataSource->Connection=com.ibm.ws.rsadapter.jdbc.WSJdbcConnection@3ef08ca9 2016-10-03-14:21:44.000927  INFO [LargeThreadPool-thread-61] G10CdsToolDataSourceSpringConfig - G10SteeringDataSourceSpringConfig->DataSource->Connection->Metadata->UserName=some user name [WARNING ] org.springframework.batch.item.ItemStreamReader is an interface.  The implementing class will not be queried for annotation based listener configurations.  If using `@StepScope` on a `@Bean` method, be sure to return the implementing class so listner annotations can be used. [ERROR   ] SRVE0777E: Exception thrown by application class 'com.ibm.ws.http.channel.internal.outbound.HttpOutputStreamImpl.validate:203' java.io.IOException: Stream is closed at com.ibm.ws.http.channel.internal.outbound.HttpOutputStreamImpl.validate(HttpOutputStreamImpl.java:203) at [internal classes] at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:101) at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:232) at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:173) at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:81) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:130) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) at [internal classes] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) at [internal classes]  thank you With regards milan   ---  **Affects:** 4.3.3  1 votes, 6 watchers","closed","in: web,","spring-projects-issues","2016-10-06T13:58:12Z","2020-11-04T19:48:30Z"
"","18849","Allow customization of TestDispatcherServlet when using @MockMvcTest [SPR-14277]","**[Mike Pleimann](https://jira.spring.io/secure/ViewProfile.jspa?name=penguin944)** opened **[SPR-14277](https://jira.spring.io/browse/SPR-14277?redirect=false)** and commented  I'm using spring-boot and attempting to test a `@ControllerAdvice` component with an exception handler method for NoHandlerFoundException. I've set spring.mvc.throw-exception-if-no-handler-found to true in application.yml which will set DispatcherServlet.throwExceptionIfNoHandlerFound true. When running the application as normal the DispatcherServlet throws the exceptions and they're handled appropriately. However, when attempting to test it with a `@MockMvcTest`, the NoHandlerFoundException is never thrown.  MockMvcBuilderSupport's constructor doesn't call setThrowExceptionIfNoHandlerFound on the TestDispatcherServlet as Boot's DispatcherServletAutoConfiguration#DispatcherServletConfiguration does when building the DispatcherServlet. Because it's passed to the MockMvc constructor without adding to the ApplicationContext and the TestDispatcherServlet isn't accessible there seems to be no way to set this property.  A Github issue was opened but closed as the change would be needed in spring-test rather than boot.  ```java @RunWith(SpringRunner.class) @WebMvcTest(controllers = { RootController.class, ExceptionHandlerAdvice.class }) public class RootControllerTest {     @Autowired     private MockMvc mockMvc;      @Test     public void testNoHandler() throws Exception {         this.mockMvc.perform(get(""/FOO""))                 .andExpect(status().isBadRequest())                 .andExpect(jsonPath(""$.message"").value(startsWith(""Invalid Request"")));     } } ```  ```java @RestControllerAdvice class ExceptionHandlerController {     @ExceptionHandler(NoHandlerFoundException.class)     @ResponseStatus(HttpStatus.BAD_REQUEST)     public ErrorData noHandlerFoundHandler(NoHandlerFoundException e, HttpServletRequest request) {         String message = String.format(""Invalid Request: %s"", e.getMessage());          log.info(message);          return new ErrorData(e.getClass(), message, request.getRequestURL().toString());     }      @Data     public static class ErrorData {         private final Instant timestamp = Instant.now();         private final Class type;         private final String message;         private final String requestUrl;     } } ```    ---  **Affects:** 4.3 RC2, 4.3 GA  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/5891  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/30291a8cd7b2808a7146b88593e2d514dea2138e, https://github.com/spring-projects/spring-framework/commit/1e3012cb49c9446056e7151d52cabdc36292ec61  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-05-17T00:32:27Z","2016-11-07T22:01:24Z"
"","19552","MimeTypeUtils.parseMimeType should ignore an inner "";"" inside a quoted value [SPR-14986]","**[Michal Polák](https://jira.spring.io/secure/ViewProfile.jspa?name=mpolak)** opened **[SPR-14986](https://jira.spring.io/browse/SPR-14986?redirect=false)** and commented  I am not able to handle a request by Spring MVC, when the request is sent with this HTTP header:  ``` Content-Type: application/xop+xml;charset=utf-8;type=""application/soap+xml;action=\""http://katastr.cuzk.cz/nv/v2.9/NavrhyNaVklad/vratCiselniky\""""  ```  (btw it is generated by JaxWS-RI)  I think the Content-type value is correct, see  https://tools.ietf.org/html/rfc822 https://www.w3.org/Protocols/rfc1341/4_Content-Type.html  IMHO a ""quoted-string"" can contain the semicolon ("";"")  The problem code is on the begin in the MimeTypeUtils.parseMimeType:  ```java String[] parts = StringUtils.tokenizeToStringArray(mimeType, "";""); ```  How to reproduce:  ```java final String contentType = ""application/xop+xml;charset=utf-8;type=\""application/soap+xml;action=\\\""http://katastr.cuzk.cz/nv/v2.9/NavrhyNaVklad/vratCiselniky\\\""\""""; final org.springframework.util.MimeType mt = org.springframework.util.MimeTypeUtils.parseMimeType(contentType); ```  Result:  ``` Exception in thread ""main"" org.springframework.util.InvalidMimeTypeException: Invalid mime type ""application/xop+xml;charset=utf-8;type=""application/soap+xml;action=\""http://katastr.cuzk.cz/nv/v2.9/NavrhyNaVklad/vratCiselniky\"""""": Invalid token character '""' in token """"application/soap+xml"" 	at org.springframework.util.MimeTypeUtils.parseMimeType(MimeTypeUtils.java:266) ```    ---  **Affects:** 4.3.4","closed","type: enhancement,","spring-projects-issues","2016-12-06T15:24:46Z","2016-12-21T11:54:09Z"
"","19120","@Configuration constructor behaviour documentation differs between Reference Documentation and API docs [SPR-14552]","**[Michael Vitz](https://jira.spring.io/secure/ViewProfile.jspa?name=mvitz)** opened **[SPR-14552](https://jira.spring.io/browse/SPR-14552?redirect=false)** and commented  The reference documentation at http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#beans-java-composing-configuration-classes states that ""Constructor injection in `@Configuration` classes is only supported as of Spring Framework 4.3."". However if looking in the javadoc API for `@Configuration` at http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html the following is said: ""`@Configuration` classes must have a default/no-arg constructor and may not use `@Autowired` constructor parameters. Any nested configuration classes must be static."" I think the javadoc needs to be fixed here.   ---  **Affects:** 4.3.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8aadb8d1936e1b362f4836daf8d94a29617712cb, https://github.com/spring-projects/spring-framework/commit/4854989db4c44d58f905f8d6a3e15fe374832799","closed","type: documentation,","spring-projects-issues","2016-08-01T21:10:14Z","2016-09-19T15:55:27Z"
"","18976","MvcUriComponentsBuilder should not include empty query parameters in build URI [SPR-14405]","**[Michael Vitz](https://jira.spring.io/secure/ViewProfile.jspa?name=mvitz)** opened **[SPR-14405](https://jira.spring.io/browse/SPR-14405?redirect=false)** and commented  Expected: When building an URI with the MvcUriComponentsBuilder to a Controller-Method that references an optional query parameter (`@RequestParam`) which value isn't specified I would expected that this query parameter is left out.  Actual: The empty query parameter is defined without an equal sign and value.  This prevents the usage of such generated URIs as action of a form with a GET method. See the referenced GIST for an simple Spring-Boot Configuration/Controller to reproduce this issue.   ---  **Affects:** 4.2.6  **Reference URL:** https://gist.github.com/mvitz/02b216b0e8a8064ec7af8413d8e5273b  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2cdcf752ba830e4d641842ea1b3c546011d04284","closed","type: enhancement,","spring-projects-issues","2016-06-27T11:59:33Z","2016-07-04T10:17:09Z"
"","19433","Sockjs XHR Fallback on already existing WebSocketServerSockJsSession [SPR-14867]","**[Michael Nahler](https://jira.spring.io/secure/ViewProfile.jspa?name=min)** opened **[SPR-14867](https://jira.spring.io/browse/SPR-14867?redirect=false)** and commented  When a web socket client with an existing WebSocketServerSockJsSession falls back to XHR transport then I get the following error:  ``` java.lang.ClassCastException: org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession cannot be cast to org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession 	at org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.handleTransportRequest(TransportHandlingSockJsService.java:313) 	at org.springframework.web.socket.sockjs.support.AbstractSockJsService.handleRequest(AbstractSockJsService.java:433) 	at org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler.handleRequest(SockJsHttpRequestHandler.java:132) 	... 96 common frames omitted Caused by: java.lang.ClassCastException: org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession cannot be cast to org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession 	at org.springframework.web.socket.sockjs.transport.handler.AbstractHttpSendingTransportHandler.handleRequest(AbstractHttpSendingTransportHandler.java:57) 	at org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.handleTransportRequest(TransportHandlingSockJsService.java:306) 	... 98 common frames omitted ```  As client I use springs WebSocketStompClient with sockJs and RestTemplateXhrTransport as fallback option:  ```java List transports = new ArrayList<>(2); transports.add(new WebSocketTransport(new StandardWebSocketClient())); transports.add(new RestTemplateXhrTransport()); SockJsClient sockJsTransport = new SockJsClient(transports); WebSocketStompClient stompClient = new WebSocketStompClient(sockJsTransport); ```    ---  **Affects:** 4.2.6","closed","type: enhancement,","spring-projects-issues","2016-11-01T16:01:32Z","2016-11-07T22:01:24Z"
"","19585","JdbcTemplate should consistently delegate to getColumnMapRowMapper [SPR-15018]","**[Michael Moores](https://jira.spring.io/secure/ViewProfile.jspa?name=mmoores)** opened **[SPR-15018](https://jira.spring.io/browse/SPR-15018?redirect=false)** and commented  Using JdbcTemplate, we have large result sets that are affected by the inefficiency of the LinkedCaseInsensitiveMap returned by the ColumnMapRowMapper. The problem can be fixed if we can just override getColumnMapRowMapper(). But we are forced to override extractReturnedResults() because it's constructing a ColumnMapRowMapper directly instead of calling getColumnMapRowMapper().  I opened a pull request: https://github.com/spring-projects/spring-framework/pull/1269   ---  **Affects:** 4.3.4","closed","type: enhancement,","spring-projects-issues","2016-12-14T16:34:46Z","2016-12-21T11:54:10Z"
"","19075","HeaderContentNegotiationStrategy does not support multiple Accept headers [SPR-14506]","**[Michael Mansell](https://jira.spring.io/secure/ViewProfile.jspa?name=diamondq)** opened **[SPR-14506](https://jira.spring.io/browse/SPR-14506?redirect=false)** and commented  There are two ways to provide multiple values for a given HTTP header.  Accept: text/plain, application/json  and  Accept: text/plain Accept: application/json  The default strategy for parsing the Accept header exists in org.springframework.web.accept.HeaderContentNegotiationStrategy.  This code currently uses request.getHeader(""Accept""), which only returns the 'first' Accept header if there are multiple headers (ie. the second case).  This means that ONLY the first way works. The second way does not work (it simply returns the result of the first header instead of the complete set).  The code should be using request.getHeaders(""Accept"") and looping through each. NOTE: The code still needs to parse out the comma separated list, since it is possible to have both at the same time.  ---  **Affects:** 4.3.1  **Issue Links:** - #14289 HttpHeaders.getAccept() does not return all accept headers for Iplanet WebServer 7 - #19202 Consistent comma splitting without regex overhead (e.g. in MediaType/MimeType)","closed","type: enhancement,","spring-projects-issues","2016-07-22T02:00:46Z","2019-01-11T17:40:25Z"
"","19551","HttpInvokerClientInterceptor should not wrap client-side Error as RemoteAccessException [SPR-14985]","**[Michael Krüske](https://jira.spring.io/secure/ViewProfile.jspa?name=mkrueske)** opened **[SPR-14985](https://jira.spring.io/browse/SPR-14985?redirect=false)** and commented  When doing a remote call via HttpInvoker an OutOfMemoryError occured in our client application. However this OutOfMemoryError  got wrapped as RemoteAccessException which is quite confusing.  HttpInvokerClientInterceptor#convertHttpInvokerAccessException should not wrap java.lang.Error, but just throw them as-is.  ---  **Affects:** 3.2.17, 4.3.4  **Issue Links:** - #15593 HttpInvokerClientInterceptor.convertHttpInvokerAccessException implementation throws the RemoteAccessException instead of return it","closed","type: enhancement,","spring-projects-issues","2016-12-06T13:07:04Z","2019-01-11T19:14:56Z"
"","19023","UrlPathHelper in PathExtensionContentNegotiationStrategy should be configurable [SPR-14454]","**[Michael Feige](https://jira.spring.io/secure/ViewProfile.jspa?name=mezzomicks)** opened **[SPR-14454](https://jira.spring.io/browse/SPR-14454?redirect=false)** and commented  Hello,  I have a scenario, where I am required to change some behaviour of the UrlPathHelper. I was able to inject my Implementation via a BeanPostProcessor nearly everywhere I needed to. But then I figured that org.springframework.web.accept.PathExtensionContentNegotiationStrategy (which seems to be used when I map mvc-resources) holds a ""private final static"" Instance of the UrlPathHelper.  Would it be an option to make it an Instance-member?  I marked it as a bug, because there are multiple places (as when xml-configuring mvc:annotation-driven or websockets) where overriding the UrlPathHelper is encouraged. So I think it should be possible in general.  Regards, Michael    ---  **Affects:** 4.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5c3c0f73c1912602163741d6d74e610f0b33f68c, https://github.com/spring-projects/spring-framework/commit/82ca2011e34d6cae9f70baf3027a606835702a86, https://github.com/spring-projects/spring-framework/commit/84afc601b823903b61039b2da56061d1159ab984  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-07-12T19:24:12Z","2016-07-28T09:16:20Z"
"","18987","Spring boot - can't load log4j2 config file [SPR-14416]","**[Michael Davis](https://jira.spring.io/secure/ViewProfile.jspa?name=michael@damaru.com)** opened **[SPR-14416](https://jira.spring.io/browse/SPR-14416?redirect=false)** and commented  Spring boot 1.3.5:  I have a web app based on Spring Boot. It worked fine using log4j (version 1) When I try to use log4j2 (version 2) and deploy it on a local jboss, I get the error when the app starts.  The file log4j2.xml is at the top of the classpath.  The Log4J2LoggingSystem.getConfigurationSource class identifies the url to the file as vfs:/C/devtools....  The ResourceUtils.getFile function throws an exception because it only allows urs starting with the ""file:"" scheme and rejects this one because the scheme is ""vfs:"".  Caused by: java.io.FileNotFoundException: URL cannot be resolved to absolute file path because it does not reside in the file system: vfs:/C:/devtools/jboss/jboss-as-7.1.3.Final/bin/content/template.ear/sis-app-template-war.war/WEB-INF/classes/log4j2.xml at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:218) [spring-core-4.2.6.RELEASE.jar:4.2.6.RELEASE] at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:202) [spring-core-4.2.6.RELEASE.jar:4.2.6.RELEASE] at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.getConfigurationSource(Log4J2LoggingSystem.java:176) [spring-boot-1.3.5.RELEASE.jar:1.3.5.RELEASE] at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.loadConfiguration(Log4J2LoggingSystem.java:164) [spring-boot-1.3.5.RELEASE.jar:1.3.5.RELEASE]   --- No further details from [SPR-14416](https://jira.spring.io/browse/SPR-14416?redirect=false)","closed","status: invalid,","spring-projects-issues","2016-06-28T18:35:24Z","2019-01-12T05:22:29Z"
"","19236","Better Exception Message for JMS Jackson Converter Error [SPR-14672]","**[Michael Böckling](https://jira.spring.io/secure/ViewProfile.jspa?name=michael%20b%C3%B6ckling)** opened **[SPR-14672](https://jira.spring.io/browse/SPR-14672?redirect=false)** and commented  In org.springframework.jms.support.converter.MappingJackson2MessageConverter#getJavaTypeForMessage, an exception is thrown if a message lacks the property that has been configured as the typeIdPropertyName, and thus Jackson has no idea to which Java type to map the message to.  The error message is ""Could not find type id property ["" + this.typeIdPropertyName + ""]"", which lacks sufficient diagnostic context to really track down the issue once it appears in a logfile. It would be very useful to have the name of the JMS queue, so I can make a guess which application forgot to set that ID. The Message ID might also be useful for some cases.  Proposal:  ```java protected JavaType getJavaTypeForMessage(Message message) throws JMSException {      String typeId = message.getStringProperty(this.typeIdPropertyName);      if (typeId == null) {           throw new MessageConversionException(""Could not find type id property ["" + this.typeIdPropertyName + ""] on message "" + message.getJMSMessageID() + "" from destination "" + message.getJMSDestination().toString());      } ```    ---  **Affects:** 4.2.6  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-09-06T12:00:10Z","2016-09-19T15:46:50Z"
"","18892","ThreadPoolTaskExecutor behaves different than ThreadPoolExecutor [SPR-14320]","**[member sound](https://jira.spring.io/secure/ViewProfile.jspa?name=membersound)** opened **[SPR-14320](https://jira.spring.io/browse/SPR-14320?redirect=false)** and commented  spring-boot 1.3.5 java 1.8  The following two task executors are constructed differently, but with the same pool values. Thus their behaviour should be the same. But it's not: the task of ThreadPoolTaskExecutor  are not executed at all.  ``` @Bean public void taskExecutor() {         return new ThreadPoolExecutor(1, 5,                60, TimeUnit.SECONDS,                new LinkedBlockingQueue()); 	} }  @Bean public void taskExecutor2() { 		ThreadPoolTaskExecutor bean = new ThreadPoolTaskExecutor(); 		bean.setCorePoolSize(1); 		bean.setMaxPoolSize(5); 		bean.setKeepAliveSeconds(60); //default 		return bean; 	} }  @Scheduled(initialDelay = 3000, fixedDelay = 10000) public void init() {     int nthreads = 1;     for (int i = 0; i < nthreads; i++)         async.run(i); }  @Service public class MyAsync {     @Async(""taskExecutor"") //run a 2nd time with ""taskExecutor2""     public void run(int i) { 	TimeUnit.SECONDS.sleep(5);         Sysout(""running: "" + i);     } } ```  Result: - the first ""taskExecutor"" behaves as expected: some tasks are rejected, and some are executed. - but the 2nd ""taskExecutor2"" just does NOT execute the tasks!    --- No further details from [SPR-14320](https://jira.spring.io/browse/SPR-14320?redirect=false)","closed","in: core,","spring-projects-issues","2016-05-31T09:20:37Z","2019-01-11T16:07:46Z"
"","18847","Remote code execution in framework [SPR-14275]","**[Maxim Tyukov](https://jira.spring.io/secure/ViewProfile.jspa?name=mfocuz)** opened **[SPR-14275](https://jira.spring.io/browse/SPR-14275?redirect=false)** and commented  Please provide email or resource for reporting vulnerability details, to avoid info leak to public.   --- No further details from [SPR-14275](https://jira.spring.io/browse/SPR-14275?redirect=false)","closed","","spring-projects-issues","2016-05-16T13:06:39Z","2019-01-11T17:02:55Z"
"","19122","ArrayIndexOutOfBoundsException in MethodBasedEvaluationContext [SPR-14554]","**[Matthias Rühl](https://jira.spring.io/secure/ViewProfile.jspa?name=mruehl)** opened **[SPR-14554](https://jira.spring.io/browse/SPR-14554?redirect=false)** and commented  ``` java.lang.ArrayIndexOutOfBoundsException: 2 at org.springframework.context.expression.MethodBasedEvaluationContext.lazyLoadArguments(MethodBasedEvaluationContext.java:94) at org.springframework.context.expression.MethodBasedEvaluationContext.lookupVariable(MethodBasedEvaluationContext.java:68) at org.springframework.cache.interceptor.CacheEvaluationContext.lookupVariable(CacheEvaluationContext.java:74) at org.springframework.expression.spel.ExpressionState.lookupVariable(ExpressionState.java:144) at org.springframework.expression.spel.ast.VariableReference.getValueInternal(VariableReference.java:75) at org.springframework.expression.spel.ast.MethodReference.getArguments(MethodReference.java:154) at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:84) at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:57) at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:87) at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:120) at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:242) at org.springframework.cache.interceptor.CacheOperationExpressionEvaluator.key(CacheOperationExpressionEvaluator.java:117) at org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext.generateKey(CacheAspectSupport.java:738) at org.springframework.cache.interceptor.CacheAspectSupport.generateKey(CacheAspectSupport.java:554) at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:498) at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:389) at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:327) at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) ```  This is my cacheable annotation:  ```java @Cacheable(value = ""dummyCache"", key = ""'getSomethingList_'.concat(#var1).concat(T(java.util.Arrays).deepHashCode(#var2))"") List getSomethingList(String var1, Integer... var2); ```  ---  **Affects:** 4.2.7, 4.3.2  **Issue Links:** - #19022 MethodBasedEvaluationContext.lazyLoadArguments() execution fails for empty variable arguments call  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4543a28e518ad561324f658df018d59fc75cf4bb, https://github.com/spring-projects/spring-framework/commit/48980a247a028fc380b28618c86f0ef41a8906c9, https://github.com/spring-projects/spring-framework/commit/fae503d5681f0c08936e68bf9bb6f61713adc84f  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: bug,","spring-projects-issues","2016-08-02T13:40:10Z","2019-01-11T18:05:53Z"
"","18840","No way to update the resourceCache of CachingResourceResolver [SPR-14268]","**[Matthias Dietl](https://jira.spring.io/secure/ViewProfile.jspa?name=dietl@sitefusion.de)** opened **[SPR-14268](https://jira.spring.io/browse/SPR-14268?redirect=false)** and commented  As far as i can see, there is no way to manually update the cache of the CachingResourceResolver. As soon as one file is cached, the CachingResourceResolver resolves it from its cache.  In our case, we delete a resource from time to time on the filesystem to trigger a 404-gateway - this does not work because it is cached and Spring tries to resolve the cached resource (which does not exist anymore) which leads to an error.  We've circumvented this by overriding the resolveResourceInteral-Method of the CachingResourceResolver like this:  ```java @Override protected Resource resolveResourceInternal(final HttpServletRequest request,  			   final String requestPath, 			   final List locations,  			   final ResourceResolverChain chain) { 	final String key = RESOLVED_RESOURCE_CACHE_KEY_PREFIX + requestPath; 	final Resource resource = this.getCache().get(key, Resource.class); 	try { 		if (resource != null && !resource.getFile().exists()) { 			this.getCache().evict(key); 		} 	} catch (final IOException e) { 		LOG.trace(""Error while reading resource"", e); 	} 	return super.resolveResourceInternal(request, requestPath, locations, chain); } ```  This works but isn't very elegant; could there be a better way to solve this, mabye directly in the framework?   ---  **Affects:** 4.1.7  1 votes, 4 watchers","closed","status: declined,","spring-projects-issues","2016-05-12T08:34:43Z","2020-03-31T17:58:18Z"
"","19380","Present helpful hint to developer that forgets to add getters to object returned from a @RestController @ExceptionHandler @ResponseBody handler method. [SPR-14814]","**[Matthew K Parker](https://jira.spring.io/secure/ViewProfile.jspa?name=moonmaster9000)** opened **[SPR-14814](https://jira.spring.io/browse/SPR-14814?redirect=false)** and commented  Hi!  If you forget to add getters to the object returned from an `@ExceptionHandler` annotated method, you'll get a generic json-formatted 500 response... even though your method actually executed...  ```java @RestController public class SomeController {      @PostMapping(""/foos"")     public Foo createFoo(@RequestBody Foo foo){         throw new SomethingWrongException();     }      @ResponseStatus(HttpStatus.UNPROCESSABLE_ENTITY)     @ExceptionHandler(SomethingWrongException.class)     public ErrorResponse handleSomethingWrong(SomethingWrongException e){         return new ErrorResponse(""message"")     }  }  class ErrorResponse{     private String message;      public ErrorResponse(String message) {         this.message = message;     } } ```  If you post to ""/foos"", you'll get a 500 error response that looks like the exception was never caught; in the logs, it will also appear as if the exception was never caught. Adding a getter to the ErrorResponse object in this example will then fix the issue.  It would have been nice if it had given the developer a message like ""your exception handler method returned an object with no getters, so can't convert to JSON / presenting generic 500 error response instead - did you forget to add getters?""   --- No further details from [SPR-14814](https://jira.spring.io/browse/SPR-14814?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-10-16T18:54:16Z","2016-10-17T20:13:11Z"
"","18871","negating specific media type in RequestMapping causes requests with no Accept header to fail [SPR-14299]","**[Matt Fletcher](https://jira.spring.io/secure/ViewProfile.jspa?name=fletcm)** opened **[SPR-14299](https://jira.spring.io/browse/SPR-14299?redirect=false)** and commented  I am running on Spring/Spring MVC 3.2.11.  I have a controller as follows:  ```java @Controller @RequestMapping(""/cost"") public class CostGuideHomeController {    @RequestMapping(value="""", method = RequestMethod.GET, produces = ""!application/json"")    public String costGuideHome(final HttpServletRequest request, final ModelMap model)    { //...    } } ```  I have view resolvers as follows:  ```                                                                                                                                Looks for view names with the 'redirect:' or 'permanent-redirect:'          and performs either a 302 or 301 redirect, respectively.               	            Attempts to map a view name to a tiles definition.               	            Look up view name in /WEB-INF/jsp directory                                            Default view resolver that attempts to look up the view name as a JSP.  This is really only needed       because historically we didn't put jsps under /WEB-INF/jsp/*.  All spring controllers should be returning views       that live in WEB-INF.  This view resolver handles all the old code that doesn't                   ```  I have been seeing requests to this controller with Accept=application/json.  I want to disallow these.  So I change the request mapping to the following:  ```java @RequestMapping(value="""", method = RequestMethod.GET, produces = ""!application/json"") ```  This does disallow requests with Accept=application/json, however it also appears to disallow requests which don't include a Accept header.  Very unexpected behavior.  Appears to be because the ProducesRequestCondition#getAcceptedMediaTypes returns a singleton list of MediaType.ALL.  So it matches everything.  Since the requestmapping has a negation, the subsequent check in ProducesRequestCondition#getMatchingCondition thinks that matching the request is not good... and I get back a 404 since no other handlers are configured for this endpoint.  I don't think we have a ContentNegotiationManager directly configured, and Spring appears to be using a default one that just looks at request headers.   ---  **Affects:** 3.2.17  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fc406430331b1c681193b087998e8336e4a61445, https://github.com/spring-projects/spring-framework/commit/27215b50614a1b543ec98b992cae96c9d8bba32c","closed","type: enhancement,","spring-projects-issues","2016-05-23T19:07:15Z","2016-06-10T09:19:12Z"
"","18982","Content negotiation fails with the conjonction of text/plain and ExceptionHandler [SPR-14411]","**[Mathieu POUSSE](https://jira.spring.io/secure/ViewProfile.jspa?name=poussma)** opened **[SPR-14411](https://jira.spring.io/browse/SPR-14411?redirect=false)** and commented  When a client request an url with an ""Accept"" header such as ""text/plain, application/json, \*/\*"" and the handler method that produces ""text/plain"" throws and exception that is handled with an `@ExceptionHandler` that returns an object to serialize as json, the framework fails to negotiate the content and returns a 406.  This is because in org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor#writeWithMessageConverters(T, org.springframework.core.MethodParameter, org.springframework.http.server.ServletServerHttpRequest, org.springframework.http.server.ServletServerHttpResponse) at line 195, we take the first MediaType matching the requested and the productible (in this case text/plain).  Unfortunatly, there is no HttpMessageConverter able to serialize the object to text/plain and then it returns the 406.  Instead of that, it should proceed with the other MediaType matching the requested and productible types.  ---  **Affects:** 4.2.6  **Reference URL:** https://github.com/mathieu-pousse/spring-framework-issues/tree/SPR-14411  **Issue Links:** - #20865 `@RequestMapping` produces condition should not impact error responses  (_**""duplicates""**_) - #20753  `@RequestMapping` get '406 Not Acceptable' when change 'produces' order (_**""is duplicated by""**_) - #20865 `@RequestMapping` produces condition should not impact error responses","closed","in: web,","spring-projects-issues","2016-06-28T12:07:45Z","2019-01-13T05:24:21Z"
"","19141","Spring HATEOAS implementation of VndErrors.VndError#logRef is not optional [SPR-14572]","**[Mathieu Lachance](https://jira.spring.io/secure/ViewProfile.jspa?name=matlach)** opened **[SPR-14572](https://jira.spring.io/browse/SPR-14572?redirect=false)** and commented  According to the specification https://github.com/blongden/vnd.error  ``` logref  OPTIONAL  For expressing a (numeric/alpha/alphanumeric) identifier to refer to the specific error on the server side for logging purposes (i.e. a request number). ```  The logref attribute should be optional. Though, in Sping org.springframework.hateoas.VndErrors.VndError:  ``` 		/** 		 * Creates a new {@link VndError} with the given logref, a message as well as some {@link Link}s. 		 *  		 * @param logref must not be {@literal null} or empty. 		 * @param message must not be {@literal null} or empty. 		 * @param links 		 */ 		public VndError(String logref, String message, Link... links) {  			Assert.hasText(logref, ""Logref must not be null or empty!""); 			Assert.hasText(message, ""Message must not be null or empty!"");  			this.logref = logref; 			this.message = message; 			this.add(Arrays.asList(links)); 		} ```  PS: I'm sorry I haven't found the proper Jira project for HATEOAS component. Affects version should have been: 0.21.0   --- No further details from [SPR-14572](https://jira.spring.io/browse/SPR-14572?redirect=false)","closed","status: invalid,","spring-projects-issues","2016-08-09T11:59:55Z","2019-01-12T05:22:16Z"
"","19242","@PathVariable will cut off the last point [SPR-14678]","**[mashuai](https://jira.spring.io/secure/ViewProfile.jspa?name=mashuai)** opened **[SPR-14678](https://jira.spring.io/browse/SPR-14678?redirect=false)** and commented  When use `@PathVariable` like  ```java @RequestMapping(value = ""/test/{test}"", method = RequestMethod.GET)    @ResponseBody    public String test(@PathVariable(""test"") String test, HttpServletResponse response) throws IOException {        System.out.println(test);        return test;    } ```  if let the test like 1.0.0.0.1  the test wil be 1.0.0.0 not expect  ---  **Affects:** 4.2.5  **Attachments:** - [bug.zip](https://jira.spring.io/secure/attachment/23537/bug.zip) (_4.82 kB_)  **Issue Links:** - #12288 Allow valid file extension paths for content negotiation to be specified (_**""duplicates""**_) - #10832 a Uri Value is incorrectly extracted if it contains '.'. (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2016-09-08T09:32:04Z","2019-01-12T16:45:29Z"
"","19575","@JsonIgnoreProperties(ignoreUnknown=false) is not working in Spring 4.2.8 and upper version [SPR-15008]","**[Masbha Uddin Ahmed](https://jira.spring.io/secure/ViewProfile.jspa?name=masbha)** opened **[SPR-15008](https://jira.spring.io/browse/SPR-15008?redirect=false)** and commented  Recently we have increased our Spring version from 4.0.4 to 4.2.8 and this we have done in order to support MongoDB upgrade to 3.2.x version. After upgrading to latest spring version we have noticed, in all Rest Api's if we pass some invalid inputs along with valid input fields, requests are still getting through and getting 200 response code even though it has invalid fields.  This was working fine in previous Spring version of 4.0.4, where it will throw malformed syntax with 400 response code.  Somehow with recent upgrades of Spring, this feature is not working anymore. We have tried different Spring version in 4.2.x and 4.3.x series, still it is not working as expected.  Please find the example below for understanding on this issue. We need a solution or workaround on this issue as we couldn't figure out what is causing the issue.  Also could you confirm is this a bug in Spring or are we missing anything with Spring upgrade.  `@JsonIgnoreProperties`(ignoreUnknown=false) is not working with spring 4.2.0 and upper version of spring. But it is working with 4.0.4 and 4.0.1  .  Spring and Jackson dependency we have used,  ```java                 			com.fasterxml.jackson.core 			jackson-databind 			2.6.3 		 		 			com.fasterxml.jackson.core 			jackson-core 			2.6.3 		 		 			com.fasterxml.jackson.core 			jackson-annotations 			2.6.3 		                  			org.springframework 			spring-context 			4.2.8.RELEASE 		 		 			org.springframework 			spring-webmvc 			4.2.8.RELEASE 		  ```  If I send json request with invalid fields then it is accepting as a valid request. But it should give the bad request response.  For example: If I have class  public class Student { private String id; private String name; }  If send valid corresponding json request it should be like  { ""id"": ""123"", ""name"": ""test"" }  But even if I send json request with invalid fields like below it is still accepting.  { ""id"": ""123"", ""name"": ""test"", ""anyinvalidkey"": ""test"" }  ---  **Affects:** 4.2.4, 4.2.8  **Issue Links:** - #16510 Set Jackson FAIL_ON_UNKNOWN_PROPERTIES property to false by default","closed","","spring-projects-issues","2016-12-12T21:53:44Z","2021-08-11T14:07:33Z"
"","19498","NPE in LoadTimeWeavingConfiguration: loadTimeWeaver() called too early [SPR-14931]","**[Marvin Luchs](https://jira.spring.io/secure/ViewProfile.jspa?name=serendipitic)** opened **[SPR-14931](https://jira.spring.io/browse/SPR-14931?redirect=false)** and commented  The `enableLTW` property of LoadTimeWeavingConfiguration is null on instantiation and is set by `setImportMetadata` via the ConfigurationClassPostProcessor.ImportAwareBeanPostProcessor BeanPostProcessor. However, the `loadTimeWeaver` method of LoadTimeWeavingConfiguration, which uses `enableLTW`, is called before ImportAwareBeanPostProcessor can set `enableLTW` to an appropriate value which leads to a NullPointerException.  The `loadTimeWeaver` method call seems to originate from LoadTimeWeaverAwareProcessor's `postProcessBeforeInitialization` method.  I should mention that I upgraded the spring-framework dependency of my project from 3.2.0 to 4.3.4 and that my configuration worked with 3.2.0.  {CODE} 25252 [RMI TCP Connection(3)-127.0.0.1] INFO  org.springframework.beans.factory.support.DefaultListableBeanFactory  - Overriding bean definition for bean 'loadTimeWeaver' with a different definition: replacing [Generic bean: class [org.springframework.context.weaving.DefaultContextLoadTimeWeaver]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.context.annotation.LoadTimeWeavingConfiguration; factoryMethodName=loadTimeWeaver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/context/annotation/LoadTimeWeavingConfiguration.class]] 25919 [RMI TCP Connection(3)-127.0.0.1] INFO  org.springframework.context.weaving.DefaultContextLoadTimeWeaver  - Determined server-specific load-time weaver: org.springframework.instrument.classloading.tomcat.TomcatLoadTimeWeaver 25920 [RMI TCP Connection(3)-127.0.0.1] WARN  org.springframework.web.context.support.XmlWebApplicationContext  - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.context.config.internalAspectJWeavingEnabler': Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'loadTimeWeaver' defined in class path resource [org/springframework/context/annotation/LoadTimeWeavingConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.instrument.classloading.LoadTimeWeaver]: Factory method 'loadTimeWeaver' threw exception; nested exception is java.lang.NullPointerException 25922 [RMI TCP Connection(3)-127.0.0.1] ERROR org.springframework.web.servlet.DispatcherServlet  - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.context.config.internalAspectJWeavingEnabler': Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'loadTimeWeaver' defined in class path resource [org/springframework/context/annotation/LoadTimeWeavingConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.instrument.classloading.LoadTimeWeaver]: Factory method 'loadTimeWeaver' threw exception; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:166) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:686) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:524) at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:668) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:634) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:682) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:553) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:494) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136) at javax.servlet.GenericServlet.init(GenericServlet.java:158) at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1269) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1182) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1072) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:5368) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5660) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:899) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:875) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:652) at org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1863) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:618) at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:565) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468) at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76) at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309) at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401) at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:324) at sun.rmi.transport.Transport$1.run(Transport.java:200) at sun.rmi.transport.Transport$1.run(Transport.java:197) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.Transport.serviceCall(Transport.java:196) at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'loadTimeWeaver' defined in class path resource [org/springframework/context/annotation/LoadTimeWeavingConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.instrument.classloading.LoadTimeWeaver]: Factory method 'loadTimeWeaver' threw exception; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1022) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:512) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) at org.springframework.context.weaving.LoadTimeWeaverAwareProcessor.postProcessBeforeInitialization(LoadTimeWeaverAwareProcessor.java:97) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1575) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) ... 63 more Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.instrument.classloading.LoadTimeWeaver]: Factory method 'loadTimeWeaver' threw exception; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ... 75 more Caused by: java.lang.NullPointerException at org.springframework.context.annotation.LoadTimeWeavingConfiguration.loadTimeWeaver(LoadTimeWeavingConfiguration.java:87) at org.springframework.context.annotation.LoadTimeWeavingConfiguration$$EnhancerBySpringCGLIB$$50f50148.CGLIB$loadTimeWeaver$1(\) at org.springframework.context.annotation.LoadTimeWeavingConfiguration$$EnhancerBySpringCGLIB$$50f50148$$FastClassBySpringCGLIB$$82132845.invoke(\) at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:356) at org.springframework.context.annotation.LoadTimeWeavingConfiguration$$EnhancerBySpringCGLIB$$50f50148.loadTimeWeaver(\) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) {CODE}  ---  **Affects:** 4.3.4  **Issue Links:** - #15296 Self-injection in configuration class hierarchies broken - #19538 ImportAware.setImportMetadata not invoked if import inherited from superclass with negative condition - #19458 Injecting bean in configurable class using load-time weaving broken when referenced on scoped-proxy class - #15483 Detect LoadTimeWeaver bean when declared through `@Bean` method as well","closed","in: core,","spring-projects-issues","2016-11-21T21:30:36Z","2019-01-13T05:18:51Z"
"","19273","Deadlock sending SSE events [SPR-14708]","**[Martin Mace](https://jira.spring.io/secure/ViewProfile.jspa?name=martinm)** opened **[SPR-14708](https://jira.spring.io/browse/SPR-14708?redirect=false)** and commented  A test client has been created (as a PoC) to test SSE functionality. Chrome was used as a client to access a REST endpoint. Once the connection was established, an SseEmitter instance is created and stored in a list of subscribers. Subsequently, SSE events are being pushed to the subscribers. The events are generated in a separate thread (1k events) and sent to all subscribers:  ```java       for (SseEmitter subscribers : notificationSubscribers) {             try {                 subscribers.send(message.toString());             } catch (IOException e) {                 // TODO Auto-generated catch block                 logger.error(""Exception sending sse message."", e);                 e.printStackTrace();             }         }  ```  Multiple connections are attempted from the same browser. After three connections were established the notifications stop, no events are being pushed anymore. Looking in the stack it is noticed that there seems to be a deadlock in sending the events. The culprit classes seem to be SseEmitter.java and/or ResponseBodyEmitterReturnValueHandler.java Please see the attached stack.  The scenario is as follows: 1. In Chrome invoke the REST (GET) on the endpoint: https://localhost:8080/ext-notification/api/notifications/subscriber 2. After all the events are received, invoke the endpoint again (step 1), either in the same tab or another 3. After all the events are received for the second invocation, invoke endpoint again (step 1), either in the same tab or another 4. At this point, about 400 events are being received before the condition occurs.  The SseEmitter was created with no timeout, basically: LONG.MAX_VALUE.   ---  **Affects:** 4.3.2  **Attachments:** - [outfile](https://jira.spring.io/secure/attachment/23541/outfile) (_97.48 kB_)","closed","status: declined,","spring-projects-issues","2016-09-13T14:51:24Z","2019-01-12T16:33:55Z"
"","19339","CssLinkResourceTransformer should not transform gzipped CSS files [SPR-14773]","**[Martin Hock](https://jira.spring.io/secure/ViewProfile.jspa?name=mnhock)** opened **[SPR-14773](https://jira.spring.io/browse/SPR-14773?redirect=false)** and commented  CssLinkResourceTransformer is not working if you are using gzipped CSS files. Here is a example configuration:  ```java VersionResourceResolver versionResolver = new VersionResourceResolver().addContentVersionStrategy(""/**"");          registry             .addResourceHandler(RESOURCES_PATH)             .addResourceLocations(""/resources/"")             .setCachePeriod(TWO_YEAR_IN_SECONDS)             .resourceChain(true)                 .addResolver(new GzipResourceResolver())                 .addResolver(versionResolver)                 .addResolver(new PathResourceResolver())                 .addTransformer(new CssLinkResourceTransformer()); ```  The links will not be modified within a CSS file, if you have a gzipped file. The problem is that the links could not be find due to this line in CssLinkResourceTransformer:  ```java byte[] bytes = FileCopyUtils.copyToByteArray(resource.getInputStream()); ```  If this is a gzipped file it should be decompressed first or if available the uncompressed version should be used.   ---  **Affects:** 4.3.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cb44f2746e8854fac384af96a53ef1155d9cd05e","closed","type: bug,","spring-projects-issues","2016-10-01T21:10:31Z","2016-12-30T13:33:14Z"
"","19182","Validate values in top-level Map parameters [SPR-14615]","**[Martin Asenov](https://jira.spring.io/secure/ViewProfile.jspa?name=martin.3361)** opened **[SPR-14615](https://jira.spring.io/browse/SPR-14615?redirect=false)** and commented  Class with RestController annotation Method with RequestMapping annotation, method is POST Map is a parameter, annotated with `@Valid` and `@RequestBody` CustomDto has `@NotNull` on one of its fields. The input passes even though a CustomDto entry is not valid (null value on the `@NotNull` field) When I try to change the Map with a single CustomDto, it is validated correctly, but when a map, it is not.  ---  **Affects:** 4.2.5  **Issue Links:** - #16519 Bean Validation invocation API for use with individual values and constraints - #18007 `@Validated` support on Iterables (and implementors) - #16917 Add support for validating a collection of objects  1 votes, 3 watchers","open","type: enhancement,","spring-projects-issues","2016-08-23T10:01:02Z","2020-08-24T17:39:29Z"
"","19488","DefaultListableBeanFactory.copyConfigurationFrom should provide independent AutowireCandidateResolver instance [SPR-14921]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-14921](https://jira.spring.io/browse/SPR-14921?redirect=false)** and commented  When using a `GenericApplicationContextFactory` it, by default, use the `ConfigurableBeanFactory.copyConfigurationFrom` method. This method also copies the `AutowireCandidateResolver` from the parent, which internally references a `BeanFactory` which effectively points to the parent instead of the current `BeanFactory`.  This introduces an issue when trying to resolve generic typed dependencies, which is an issue in the `isAutowireCandidate` in de `DefaultListableBeanFactory` which ultimately delegates to the configured `AutowireCandidateResolver`. This now tries to resolve/check the dependency with the parent instead of the current context.  To solve this for now we have a extended the `GenericApplicationContextFactory` and reset the `AutowireCandidateResolver` on the context created. This solves the issue of not being able to auto wire beans.  This could be a bug/issue in Spring itself instead of Spring Batch as the `DefaultListableBeanFactory.copyConfigurationFrom` is actually copying the `autowireCandidateResolver`.  ---  **Affects:** 4.3.4  **Issue Links:** - #19463 getBeanDefinitionNames should not leak the frozenBeanDefinitionNames array  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ac5933a7acc343f3ba77e6a7a3a667ca66838a1a, https://github.com/spring-projects/spring-framework/commit/7ac9f92bc228f6eeea6977217a8e916f36cb1e8a","closed","type: enhancement,","spring-projects-issues","2016-10-28T08:18:08Z","2019-01-11T19:20:33Z"
"","19040","Add autowiring support to SpringBeanJobFactory  [SPR-14471]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-14471](https://jira.spring.io/browse/SPR-14471?redirect=false)** and commented  > Subclass of [@link AdaptableJobFactory] that also supports Spring-style > dependency injection on bean properties.  This is according to the javadoc of `SpringBeanJobFactory`.  Now with the introduction of annotation based auto wiring it would be nice that instead of only using the `BeanWrapper` to inject values from the `JobDataMap` it would also use the autowiring capabilities of the `ApplicationContext` to configure the `Job` instance that is being created.   ---  **Affects:** 4.3.1  **Reference URL:** http://stackoverflow.com/questions/38389962/how-to-configure-spring-job-dynamically-using-quartz-scheduler/38391699#38391699  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1116  5 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2016-07-15T08:53:41Z","2019-01-11T16:22:08Z"
"","18933","Doc: SpEL behavior when comparing value to null [SPR-14361]","**[Marko Talijanac](https://jira.spring.io/secure/ViewProfile.jspa?name=mtalijanac)** opened **[SPR-14361](https://jira.spring.io/browse/SPR-14361?redirect=false)** and commented  When in SpEL a number is compared to null, a result is interpreted as ""null is always the lowest number"". Behavior is unexpected and undocumented.  As null is not a number expected behavior would be either exception or false in all cases except when comparing with other null value.  For example expression **""x == null && x < 100""** should always yield false (or raise exception) as x is either null or a number with a value.  Behavior is not overridable with user provided TypeComparator (except by throwing exception from TypeComparator) as operators never invoke TypeComparator#canCompare method, and always flatten comparator result of (-1,0,1) to true|false result.  Also current behaviour is not consistent with past spring versions. See this stack overflow [question](http://stackoverflow.com/questions/26405556/spel-null-value-comparison)  {{examples of popular comparisons null == null	=> true  null < 1	=> true 1 > null	=> true null <= 1	=> true 1 >= null	=> true  null < -1	=> true -1 > null	=> true null <= -1	=> true -1 >= null	=> true  null > 1	=> false 1 < null	=> false null >= 1	=> false 1 <= null	=> false  null > -1	=> false -1 < null	=> false null >= -1	=> false -1 <= null	=> false}}  ---  **Affects:** 3.2.16, 4.3 GA  **Issue Links:** - #12496 Spring SpEL - behavioural inconsistency when using greater than  (>) operator in an expression - #19553 SpEL and Date Literals  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6bdc5bfc081f9462730251518b8a964b8dc55ded, https://github.com/spring-projects/spring-framework/commit/05579fd1b9e1e75e28d31e32b49efc5834c28186, https://github.com/spring-projects/spring-framework/commit/5ccc8e341cc69c25ffe2e179aa8a8480b60ffdc3, https://github.com/spring-projects/spring-framework/commit/c22cad145bc9194641d92dbeab01ff67a0ca9b13  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","in: core,","spring-projects-issues","2016-06-14T13:53:30Z","2019-01-11T16:02:02Z"
"","19582","OkHttpClientHttpRequestFactory should allow POST requests without body [SPR-15015]","**[Mark Paluch](https://jira.spring.io/secure/ViewProfile.jspa?name=mp911de)** opened **[SPR-15015](https://jira.spring.io/browse/SPR-15015?redirect=false)** and commented  OkHttp 2 and 3 require a request body for certain HTTP methods (`PUT`, `POST`, `PATCH`, …). `OkHttpClientHttpRequestFactory` and `OkHttp3ClientHttpRequestFactory` passes a `null` argument as body if the request entity is `null` or the content is empty. The empty-body check prevents a workaround by passing in an empty `byte[]`.  Exception:  ``` java.lang.IllegalArgumentException: method POST must have a request body.  	at okhttp3.Request$Builder.method(Request.java:236) 	at org.springframework.http.client.OkHttp3ClientHttpRequestFactory.buildRequest(OkHttp3ClientHttpRequestFactory.java:138) 	at org.springframework.http.client.OkHttp3ClientHttpRequest.executeInternal(OkHttp3ClientHttpRequest.java:67) 	at org.springframework.http.client.AbstractBufferingClientHttpRequest.executeInternal(AbstractBufferingClientHttpRequest.java:48) 	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:53) 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:619) 	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:580) 	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:407)	 ```  Test code:  ```java @Test public void shouldThrowIllegalArgumentExceptionForEmptyBody() throws Exception {  	RestTemplate restTemplate = new RestTemplate(new OkHttp3ClientHttpRequestFactory());  	restTemplate.postForEntity(""http://www.google.com"", new byte[0], String.class); }  @Test public void shouldThrowIllegalArgumentExceptionForNullBody() throws Exception {  	RestTemplate restTemplate = new RestTemplate(new OkHttp3ClientHttpRequestFactory());  	restTemplate.postForEntity(""http://www.google.com"", null, String.class); } ```  Proposed fix:  The proposed fix (see [OkHttp #2651](https://github.com/square/okhttp/issues/2651)) coerces an absent body into an empty body. OkHttp provides internal APIs to determine whether a request body is required. The fix would use `HttpMethod.requiresRequestBody(…)` to determine whether to create an empty body if the request entity is `null` or the `content` is empty.   ---  **Affects:** 4.2.4, 4.3 GA","closed","type: enhancement,","spring-projects-issues","2016-12-14T13:39:04Z","2016-12-21T11:54:09Z"
"","19455","Netty4ClientHttpRequestFactory should use SSL if port is 443 or scheme is https [SPR-14889]","**[Mark Paluch](https://jira.spring.io/secure/ViewProfile.jspa?name=mp911de)** opened **[SPR-14889](https://jira.spring.io/browse/SPR-14889?redirect=false)** and commented  Currently, `Netty4ClientHttpRequestFactory` uses SSL if either the port is `443` or not port is given and the scheme is `https`. URIs having a port specified other than `443` but using `https` use plain-text connections so SSL is not applied.  So `https://localhost:8200` connects via plaintext but should use SSL.  ---  **Affects:** 4.3.4  **Issue Links:** - #19310 Netty4ClientHttpRequestFactory should configure a default SslContext - #19668 Netty4ClientHttpRequestFactory should use SNI for TLS connections  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1235, and commits https://github.com/spring-projects/spring-framework/commit/6261106a93099d714fd38f0b7007f0a40a662170, https://github.com/spring-projects/spring-framework/commit/5285f5300a5338351021e8187c04a3e2f7ac8edd","closed","type: bug,","spring-projects-issues","2016-11-09T10:54:28Z","2019-01-11T17:25:33Z"
"","19358","Access-Control-Allow-Methods contains duplicate HTTP methods [SPR-14792]","**[Mark Paluch](https://jira.spring.io/secure/ViewProfile.jspa?name=mp911de)** opened **[SPR-14792](https://jira.spring.io/browse/SPR-14792?redirect=false)** and commented  HTTP Header `Access-Control-Allow-Methods` contains duplicate method names using CORS Preflight requests. This happens when global, and handler CORS configurations are combined. Seems this can happen also for other CORS headers, see [CorsConfiguration.combine ](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java#L104).  ```java class Config extends WebMvcConfigurerAdapter {  	@Override 	public void addCorsMappings(CorsRegistry registry) { 		registry.addMapping(""/**"").allowedMethods(""GET"").allowedOrigins(""http://far.far.away""); 	} }  @RestController class MyRestController {  	@RequestMapping(value = ""/resource"", method = RequestMethod.GET) 	@CrossOrigin 	String resource() { 		return ""OK""; 	} }  @Test public void allowedMethodsShouldContainUniqueMethodNames() throws Exception {  	mockMvc 			.perform(options(""/resource"") // 					.header(HttpHeaders.ORIGIN, ""http://far.far.away"") // 					.header(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, ""GET"")) 			.andExpect(status().isOk()) // 			.andExpect(header().string(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS, ""GET"")); } ```    ---  **Affects:** 4.3 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f5ecdda40054bc1832f16a3aa308fb41c7218996, https://github.com/spring-projects/spring-framework/commit/9bf8489afd9cdfbbc217f5d4ad3461660a00d671","closed","type: bug,","spring-projects-issues","2016-10-10T12:13:14Z","2016-11-07T22:01:23Z"
"","19483","HtmlUnitRequestBuilder ignores form encoding type [SPR-14916]","**[Mark Hobson](https://jira.spring.io/secure/ViewProfile.jspa?name=markhobson)** opened **[SPR-14916](https://jira.spring.io/browse/SPR-14916?redirect=false)** and commented  When using MockMvc with HtmlUnit submitting a form via WebDriver does not send the correct content type header.  The problem is that `HtmlUnitRequestBuilder` does not use HtmlUnit's `WebRequest.encodingType` when determining the resultant `MockHttpServletRequest`'s content type.  See the referenced GitHub repo for an example. This Spring test fails using HtmlUnit but passes when ChromeDriver is configured as the WebDriver bean.   ---  **Affects:** 4.3.4  **Reference URL:** https://github.com/markhobson/spring-htmlunit-bug  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/38b6746d3d92d82c8fc57110f5f62370ef3d68df, https://github.com/spring-projects/spring-framework/commit/872d6ef55a0c3c4209465619ff4008c5fb57e6ea","closed","type: enhancement,","spring-projects-issues","2016-11-16T21:44:13Z","2016-12-21T11:54:10Z"
"","19307","@ComponentScan ignores @Order on @Configuration classes [SPR-14741]","**[Mark Hale](https://jira.spring.io/secure/ViewProfile.jspa?name=pulquero)** opened **[SPR-14741](https://jira.spring.io/browse/SPR-14741?redirect=false)** and commented  When using context:component-scan the resulting beans are ordered according to `@Order` annotations hence the order of bean overrides can be controlled. The same is not true of `@ComponentScan`, at least not in 4.3.2, I think it did work in 4.2.0 though so this might be a regression. Use case is to have a bunch of `@Configuration` classes in a package with `@Profile` annotations and a default `@Configuration` class. The `@Profile` `@Configuration` class should override the default `@Configuration` if the relevant profile is active. This depends crucially on the order the classes are processed.   ---  **Affects:** 4.3.2  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-09-22T22:05:31Z","2019-06-07T12:59:01Z"
"","18986","Convert comma-separated string into list of classes analogous to existing support for class array [SPR-14415]","**[Mariusz Kopylec](https://jira.spring.io/secure/ViewProfile.jspa?name=mkopylec)** opened **[SPR-14415](https://jira.spring.io/browse/SPR-14415?redirect=false)** and commented  When a configuration property type is `List` it is not resolved properly. See https://github.com/spring-projects/spring-boot/issues/6240 for more informations.  ---  **Affects:** 4.2.6  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/6240  **Issue Links:** - #11213 Property injection fails for arrays of enums if there is more than 1 value  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c4c941c43fc23f58503c7b687fd1469d4a27c777","closed","type: enhancement,","spring-projects-issues","2016-06-28T17:42:14Z","2019-01-11T16:28:36Z"
"","18841","markBeanAsCreated does not clear merged bean definition in a thread-safe fashion [SPR-14269]","**[Marcin Piela](https://jira.spring.io/secure/ViewProfile.jspa?name=mpiela)** opened **[SPR-14269](https://jira.spring.io/browse/SPR-14269?redirect=false)** and commented  When creating a context and then calling `getBean` on it from multiple threads we sometimes get a `BeanInitializationException` from `RequiredAnnotationBeanPostProcessor.postProcessPropertyValues`. Attached is a simple maven project to reproduce. In a loop it: 1. creates a fresh spring context 2. attempts to fetch some beans from it in parallel.    The number of threads and max number of loop iterations can be passed as the first and second argument to the Main class.    Usage:    `mvn clean package && java -jar target/spring-bug-1.0-SNAPSHOT-jar-with-dependencies.jar`    We never get any errors when the getBean method is called from a single thread, so:    `java -jar target/spring-bug-1.0-SNAPSHOT-jar-with-dependencies.jar 1`    always works.    We don't get any errors for spring version 4.1.9, but as long as we switch to 4.2.0 or later the errors start occuring.    Example exception:  ``` Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'service-2' defined in class path resource [example-context.xml]: Cannot resolve reference to bean 'bean_0_1' while setting bean property 'bean_0_1'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bean_0_1' defined in URL [jar:file:/home/mpiela/devel/repo/spring-bug/target/spring-bug-1.0-SNAPSHOT-jar-with-dependencies.jar!/test/Bean_0_1.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanInitializationException: Properties 'bean_1_0' and 'bean_1_1' are required for bean 'bean_0_1' 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:359) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1481) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1226) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054) 	at test.Main.lambda$tryToGetBean$0(Main.java:75) 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:745) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bean_0_1' defined in URL [jar:file:/home/mpiela/devel/repo/spring-bug/target/spring-bug-1.0-SNAPSHOT-jar-with-dependencies.jar!/test/Bean_0_1.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanInitializationException: Properties 'bean_1_0' and 'bean_1_1' are required for bean 'bean_0_1' 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351) 	... 13 more Caused by: org.springframework.beans.factory.BeanInitializationException: Properties 'bean_1_0' and 'bean_1_1' are required for bean 'bean_0_1' 	at org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor.postProcessPropertyValues(RequiredAnnotationBeanPostProcessor.java:156) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) 	... 17 more ```  ---  **Affects:** 4.2.6  **Attachments:** - [spring-bug.tar.gz](https://jira.spring.io/secure/attachment/23392/spring-bug.tar.gz) (_2.25 kB_)  **Issue Links:** - #16851 Reduce BeanDefinition cloning in AbstractBeanFactory.getMergedBeanDefinition  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9064d38e4c77addbb5682e28e8c04df9fc8cd652, https://github.com/spring-projects/spring-framework/commit/71463fb3991a2b7e8e79cafa91a824c51f4fc73a, https://github.com/spring-projects/spring-framework/commit/933bbf2de90c720e6ada08089c3401317230d3b0, https://github.com/spring-projects/spring-framework/commit/6efa0589170fbcdd7fc0fe850d5b55b75918fdb2  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","in: core,","spring-projects-issues","2016-05-13T10:37:15Z","2019-01-11T17:03:47Z"
"","19329","AntPathMatcher.isPattern returns false if pattern contains variable [SPR-14763]","**[Marcin Kamionowski](https://jira.spring.io/secure/ViewProfile.jspa?name=soldier.kam@gmail.com)** opened **[SPR-14763](https://jira.spring.io/browse/SPR-14763?redirect=false)** and commented  This should be fixed by: https://github.com/spring-projects/spring-framework/pull/956 but one test failed:  ``` org.springframework.core.io.support.ResourceArrayPropertyEditorTests > testSystemPropertyReplacement ```    --- No further details from [SPR-14763](https://jira.spring.io/browse/SPR-14763?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2016-09-28T21:07:33Z","2019-01-12T02:24:26Z"
"","19247","Allow JMS listener instrumentation [SPR-14683]","**[Marcin Grzejszczak](https://jira.spring.io/secure/ViewProfile.jspa?name=mgrzejszczak)** opened **[SPR-14683](https://jira.spring.io/browse/SPR-14683?redirect=false)** and commented  In Spring Cloud Sleuth we would want to give the users a possibility to instrument all `@JmsListener` annotated methods in order to propagate tracing information. In the Issue Garry mentions that  ``` It's not currently possible to customize the adapter.  Or, a tweak in JmsListenerAnnotationBeanPostProcessor to wrap the listener in a proxy or similar. ```  Can we give the possibility of adding listeners / proxies / whatever to instrument the listeners?  For all incoming messages from JMS we would like to be able to do some pre processing and post processing (let's assume that the message arrived from a destination ""foo"").  ```java  class SomeMagicalClassThatWillHelpUsSolveThisProblem {      private final  SpanExtractor messagingSpanExtractor;     private final Tracer tracer;  // constructor      public void magicalMethod(Message message, String destination, ProceedingPointcut pointcut) {         // we need to extract tracing information from a message and inject it into a span         Span parentSpan = messagingSpanExtractor.joinTrace(message);         Span continuedSpan = tracer.continueSpan(span);         tracer.addTag(""method"", pointcut.giveMeTheNameOfTheMethodThatWillProcessTheMessage());         tracer.addTag(""class"", pointcut.giveMeTheNameOfTheClassThatWillProcessTheMessage());         try {             // let the normal method execution take place             pointcut.proceed(...);         } finally {             // once the message has been processed we need to close the span             tracer.close(span);         }     }  } ```    ---  **Reference URL:** https://github.com/spring-cloud/spring-cloud-sleuth/issues/151#issuecomment-245828688  2 votes, 9 watchers","open","type: enhancement,","spring-projects-issues","2016-09-09T06:35:00Z","2022-03-28T08:31:54Z"
"","18911","Unmarshalling classes with lombok's @AllArgsConstructor may be breaking backwards compatibility [SPR-14339]","**[Marcel Montes](https://jira.spring.io/secure/ViewProfile.jspa?name=spiceman)** opened **[SPR-14339](https://jira.spring.io/browse/SPR-14339?redirect=false)** and commented  With Spring Boot 1.3.5.RELEASE (which uses Spring 4.2.6.RELEASE for core, web etc),  Classes that have no default constructor give an error when the Objectmapper tries to create an instance while unmarshalling.  Boot 1.4.0 (Spring 4.3.0) seems to have some kind of support for non-default constructors. IE: Classes annotated with `@AllArgsConstructor` (and no `@NoArgsConstructor`) now are unmarshalled, which seems nice... BUT:  1. Missing properties in the serialized data now yield instances with NULL values (instead of the POJO default value) 2. If both lombok's `@AllArgsConstructor` and `@NoArgsConstructor` are present, `@AllArgsConstructor` is taking precedence.  Number 1) is ok. There was no functionality provided before so... any new behavior is fine, I guess.  Number 2) can break backwards compatibility (and did break one project of mine) ie: I had POJOs with both annotations, `@NoArgs` for unmarshalling, `@AllArgs` for in-code creation or whatever.... and suddenly missing fields in the JSON data started being null instead of the POJO default value.  In code:  ```java @Controller @RequestMapping public class FooController {  	@Data 	@AllArgsConstructor 	public static class Foo { 		String name = ""foo""; 	} 	 	@Data 	@NoArgsConstructor 	public static class Bar { 		String name = ""bar""; 	} 	 	@Data 	@NoArgsConstructor 	@AllArgsConstructor 	public static class Baz { 		String name = ""baz""; 	} 	 	@RequestMapping(value=""/allargs"", method=RequestMethod.POST) 	@ResponseBody 	public Foo allargs(@RequestBody Foo f) { 		return f; 	}  	@RequestMapping(value=""/noargs"", method=RequestMethod.POST) 	@ResponseBody 	public Bar noargs(@RequestBody Bar b) { 		return b; 	} 	 	@RequestMapping(value=""/both"", method=RequestMethod.POST) 	@ResponseBody 	public Baz both(@RequestBody Baz b) { 		return b; 	} } ```  Result:  ``` 3:43 spiceman@cynic ~ % curl localhost:8080/allargs  -d '{}' -H ""Content-Type: application/json"" {""name"":null}  3:43 spiceman@cynic ~ % curl localhost:8080/noargs  -d '{}' -H ""Content-Type: application/json"" {""name"":""bar""}  3:43 spiceman@cynic ~ % curl localhost:8080/both  -d '{}' -H ""Content-Type: application/json"" {""name"":null} ```  /noargs and /both have the POJO default value in previous versions. /allargs failed with an error that said ""couldn't find default constructor"" or similar.  PS1: didn't test this with a custom made ""SomeArgsConstructor"".  PS2: I don't know which project this should belong to, so I went for SPR.  Also I don't know if the affected versions are correct, since I'm using the Spring Boot 1.4.0-BUILD-SNAPSHOT.  Actual versions; spring-boot: 1.4.0.BUILD-20160607.034636-404 -> spring-core, web, etc: 4.3.0-BUILD-20160606.202347-431  ---  EDIT: confirmed that the same happens with Spring Boot 1.4.0.M3 ( Spring 4.3.0.RC2 )  ---  **Affects:** 4.3 RC1, 4.3 RC2","closed","status: invalid,","spring-projects-issues","2016-06-08T06:58:47Z","2019-01-13T05:25:31Z"
"","19495","ResourceUrlEncodingFilter, ResourceUrlProvider should correctly resolve hash'ed resource paths [SPR-14928]","**[Marc Vanbrabant](https://jira.spring.io/secure/ViewProfile.jspa?name=slyoldfox)** opened **[SPR-14928](https://jira.spring.io/browse/SPR-14928?redirect=false)** and commented  This popped up when debugging a production issue, where a lot of calls to ResourceResolver.resolveResourceInternal() were showing in the CPU profiler.  We use thymeleaf 2.x (but thymeleaf 3 on spring 4.3.2 seems affected as well). When a LinkExpression is evaluated in Thymeleaf with the value of ""/resources/main.svg#mail"", the CachingResourceResolver.resolveResourceInternal will return null and not ever cache this resource (this seems correct up to a point).  The entry points are ResourceUrlEncodingFilter.encodeURL() - the argument being ""/resources/main.svg#mail"" which gets passed to resourceUrlProvider.getForLookupPath(lookupPath) which eventually returns null.  In the end we fall back on ""return super.encodeURL(url);"" call which leaves this url as-is.  Note that the same call with ""/resources/main.svg"" correctly caches and resolves the resource. Maybe it seems sane to ignore everything behind the hash when finding the resource?  [Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel) [Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) any ideas if this is a ""bug"" or should we work around the issue ourselves?  For reference, this is used by often with svg's like so: https://css-tricks.com/svg-use-external-source/  Where  ``` th:attr=""'xlink:href'=@{'/resources/main.svg#icon-hamburgermenu'}"" ```  I suppose this is a corner case but note that HttpServletResponseWrapper also correctly handles #hashed urls when calling encodeURL() Likewise I would expect all ResourceResolvers (CachingResourceResolver and VersionResourceResolver at least) to do the same.   ---  **Affects:** 4.1.9, 4.3.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b59455b63cdacaae3dc544364adb112edec717f6, https://github.com/spring-projects/spring-framework/commit/933f1501e84240b72e6da93ab3e43714017b44db","closed","type: enhancement,","spring-projects-issues","2016-11-21T15:11:01Z","2016-12-21T11:54:08Z"
"","19347","@CacheConfig(cacheNames) broken when used on interface [SPR-14781]","**[Marc Vanbrabant](https://jira.spring.io/secure/ViewProfile.jspa?name=slyoldfox)** opened **[SPR-14781](https://jira.spring.io/browse/SPR-14781?redirect=false)** and commented  Since upgrading from 4.1 to 4.3 we are seeing the following exception thrown in CacheAspectSupport.getCaches when a call to a `@Cacheable` method occurs:  ``` throw new IllegalStateException(""No cache could be resolved for '"" +               context.getOperation() + ""' using resolver '"" + cacheResolver +               ""'. At least one cache should be provided per cache operation.""); ```  As far as I have been able to trace, it looks like the refactoring from #18054 (https://github.com/spring-projects/spring-framework/commit/59c88eb3c0611aac802e162d53503ce71864baef) might be the cause.  It seems to fail when the `@CacheConfig` annotation is **not** on the Impl class of the interface, but on the interface itself.  ``` @CacheConfig( cacheNames = ""userCache"") public interface UserService { 	@Cacheable(key = ""('username:' + #username).toLowerCase()"") 	User getUserByUsername( String username ); }  public class UserServiceImpl implements UserService { 	@Override 	public User getUserByUsername( String username ) { 		return userRepository.findByUsername( username ); 	} } ```  We observe the same error if the `@Cachable` annotation is placed on the UserServiceImpl class:  ``` @CacheConfig( cacheNames = ""userCache"") public interface UserService { 	User getUserByUsername( String username ); }  public class UserServiceImpl implements UserService { 	@Override         @Cacheable(key = ""('username:' + #username).toLowerCase()"") 	public User getUserByUsername( String username ) { 		return userRepository.findByUsername( username ); 	} } ```  Moving down the `@CacheConfig` down to the UserServiceImpl class circumvents the issue.  The difference compared to 4.1 (as far as I was manage to debug), seem to be that SpringCacheAnnotationParser.parseCacheAnnotations() now uses AnnotatedElementUtils.findAllMergedAnnotations(ae, CacheEvict.class)  In 4.1 SpringCacheAnnotationParser.parseCacheAnnotations() would return _null_ when called with the UserServiceImpl.getUserByUsername as second argument. It would then return null all the way up to AbstractFallbackCacheOperationSource.computeCacheOperations() where it would fallback onto the following check:  ``` if (specificMethod != method) {      // Fallback is to look at the original method.      opDef = findCacheOperations(method);      if (opDef != null) {           return opDef;      }      // Last fallback is the class of the original method.      opDef = findCacheOperations(method.getDeclaringClass());      if (opDef != null && ClassUtils.isUserLevelMethod(method)) {           return opDef;      } } ```  The **method** here being the interface method.  https://github.com/spring-projects/spring-framework/blob/4.1.x/spring-context/src/main/java/org/springframework/cache/interceptor/AbstractFallbackCacheOperationSource.java#L146  In 4.3 it seems that SpringCacheAnnotationParser.parseCacheAnnotations() does not return null and that the defaultConfig of the interface is not merged with parsed annotations from the Impl method.  Note: If this is indeed a bug, the workaround is to put the `@CacheConfig` on the implementing classes, or specify the cacheNames in the `@Cacheable` annotations  ---  **Affects:** 4.3.2  **Issue Links:** - #18054 Support `@Cache`* as merged composed annotations - #19367 Cache annotation lookup in 4.3 finds more annotations than in 4.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/08972eff9b696fbb7089de1dc26a28979e96c71a, https://github.com/spring-projects/spring-framework/commit/3cca57a801ac8b4867b8e6abda4baca39b06c6c3  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2016-10-06T07:13:28Z","2019-01-14T04:37:37Z"
"","19126","Forward leads to garbled output [SPR-14558]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-14558](https://jira.spring.io/browse/SPR-14558?redirect=false)** and commented  I am upgrading an application from 3.x to 4.1, moving from xml to javaconfig configuration. Whenever I forward a page, I get garbled page output on pages that were fine under the previous version.  ``` ��Wێ�D}�����Hk9!��""$X����k�""}q�۳;| <��+�����mg�6$/��i��T�j�M4z:)+��� ```  Everywhere else, output is fine. But with forwards, this happens each and every time. It only happens with forwards and the exact same template rendered without a forward, renders fine. Also, when I use Sitemesh, the only area that is ""bad"" is the area that represents the body of the response.  Everything is UTF-8 as far as I can see. Java 8, Tomcat 8, freemarker, full java config.  ``` @Override public void onStartup(ServletContext servletContext) throws ServletException { 	 	//This needs to be top of the chain, before Spring Security 	 	CharacterEncodingFilter characterEncoding = new CharacterEncodingFilter(); 	characterEncoding.setEncoding(""UTF-8""); 	characterEncoding.setForceEncoding(true);          registerServletFilter(servletContext, characterEncoding);  	super.onStartup(servletContext);  	FilterRegistration.Dynamic encodingFilter = servletContext.addFilter(""encoding-filter"", characterEncoding); 	encodingFilter.addMappingForUrlPatterns(null, false, ""/*""); ```    ---  **Affects:** 4.1.9  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/04dd72ae4fae8b2252094fbfbd4a2dce9dfd741a","closed","status: invalid,","spring-projects-issues","2016-08-04T11:34:32Z","2019-01-12T05:22:20Z"
"","18960","Create OpenSessionInViewChannelInterceptor [SPR-14387]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-14387](https://jira.spring.io/browse/SPR-14387?redirect=false)** and commented  It would be nice to be able to work in Hibernate in Message handlers. In order to do this, an  OpenSessionInViewChannelInterceptor would be required.   ---  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-06-21T19:14:48Z","2019-01-12T00:13:43Z"
"","18953","Better documentation on WebSockets and support for token based authentication [SPR-14380]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-14380](https://jira.spring.io/browse/SPR-14380?redirect=false)** and commented  Spring Websocket, basically relies on HTTP Session Cookie based authentication. Custom header tokens, provided when creating a WebSocket are ignored. STOMP login,passcode are also ignored for whatever reason.  After much trial and error and tons and tons of Stackoverflow research, I finally got that Spring WebSocket expects you to create an authenticated session through ""normal"" website interactions and then use the resulting cookies as an authenticated way to interact with the WebSocket.  So, Spring WebSocket makes the implicit assumption that the WebSocket is created within a webpage where session creation and authentication have basically already taken place through ""normal"" website interactions. This assumption is what makes Spring WebSocket documentation and examples so confusing.  In a mobile phone scenario. we can get this ""normal"" website interaction also through a REST endpoint, and then use the resulting cookies to connect with the WebSocket (this suggestion is not documented).  Only, the mobile environment is not such a cut and dried place as the modern web browser is. Not all Mobile Environments supply cookies through their WebSocket connections. Mine doesn't by default, also not documented by the mobile platform vendor, and I'm still trying to hack my way around that.  I would say that most websocket implementations out there assume header based authentication. It would make life a lot easier. The whole concept of cookies is a browser concept. Headers are much more transparent and clearcut.  So, let me take you through that scenario: getting an existing Spring application to work on websockets.  * You have to integrate Spring Session, Spring Security and Spring WebSocket. All of which are upgrade and implementation challenges by themselves. * None of the Websocket concepts that you need to understand how this works are clearly documented (101 upgrades, session cookies as the only way to authenticate, etc etc). There are two lines about Authentication in the Spring WebSocket documentation. So, good luck. I would rate Spring's documentation on websockets as 'terrible'. The blog posts and examples as outdated and too simplistic * The examples and blog posts cover various versions of each library. Some time are even hidden in branches * Most people don't hit Tomcat directly. Most people use a webserver like nginx in front. It too, needs some specific configuration to deal with 101 upgrades. Good to know.  So, this is just a little list of the issues I ran into. There are issues on all sides: server, webserver, session, security, frontend.  The huge amount of time spent on this stuff could have been significantly reduced if there had been clear documentation on the concepts and assumptions of Spring WebSockets. It would be nice if I knew that step 1 should result in a 101 status. If it doesn't, something is wrong.  Some suggestions:  * Start with a paragraph on how WebSockets work   * First there is a socket request that results in a 101 upgrade   * If you get another status something is wrong   * Differences of creating the websocket (101 upgrade) if you use .withSockJS() or not * Add a paragraph on how Spring WebSockets work and what it does and doesn't support:   * Assumption of cookie based authentication   * session headers will be ignored   * STOMP username, password will be ignored * Add a paragraph on Webserver integration   * headers to send back for a 101 upgrade or at least some indication that special configuration is needed for this * Add a paragraph on integration with Spring Session   * There are tons of session variables floating around in the code. It's not clear why there is a SPRING.SESSION.ID, a SESSION, simpSessionId, etc   * How do sessions work when I get a mobile client that may suffer from network connection loss reconnects?   * Should you use stateless session for mobile phones or not? Pros and Cons?   * What happens if a mobile phone disconnects and reconnects with a session that has expired.   * .i.e. describe some common mobile phone scenarios and how to deal with them. * Add a paragraph on integration with Spring Security * Suggestions for debugging   * Check that your webserver is configured to forward 101 to your app server   * Check that the client is sending a session cookie id   * Check that the client is sending a remember me   * Check that the client writes a session and rememberme cookie on ""normal"" login   * Check that the session cookie path is matching your request (spring session adds an extra slash to a contextpath and spring security does not, it seems)   * [...]  So, this is a bit of a rambling list of suggestions. I hope it's useful nonetheless.  ---  **Issue Links:** - #19254 Spring WebSockets should support token-based authentication  2 votes, 7 watchers","open","in: web,","spring-projects-issues","2016-06-19T15:15:17Z","2019-01-14T04:38:57Z"
"","19362","ModelAndView's setStatus does not work for @ExceptionHandler methods [SPR-14796]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14796](https://jira.spring.io/browse/SPR-14796?redirect=false)** and commented  I am working with Spring Framework 4.3.3  About Spring MVC about handle exceptions I have the following about a `@ControllerAdvice` (**note**: not totally valid about logic):  ```java @ExceptionHandler(value={EntityNotPreviouslyPersistedException.class}) public ModelAndView handleEntityNotPreviouslyPersistedException( 	EntityNotPreviouslyPersistedException ex, 	WebRequest request, 	HttpServletRequest request_) {  	logger.info(""EntityNotPreviouslyPersistedException..."");         ... 		 	logger.info(""HTTP method: {}"", request_.getMethod());  	HttpStatus httpStatus = null;  	if(request_.getMethod().equals(HttpMethod.DELETE.toString()) || request_.getMethod().equals(HttpMethod.PUT.toString())){ 		httpStatus = HttpStatus.BAD_REQUEST; 	} 	else if(request_.getMethod().equals(HttpMethod.GET.toString())){ 		httpStatus = HttpStatus.NOT_FOUND; 	} 	else{ 		logger.warn(""It should be not printed...""); 	}  	logger.info(""HTTP method: {} - HttpStatus: {}"", request_.getMethod(), httpStatus.toString());  	ModelAndView mav = new ModelAndView(); 	mav.setStatus(httpStatus); 	mav.addObject(""message"", error); 	mav.setViewName(""redirect:/error""); //but was:<302> 	//mav.setViewName(""/error"");// was:<200> 	return mav; } ```  I did realize that `mav.setStatus(httpStatus)` is executed but finally is ignored.  * If I use `mav.setViewName(""redirect:/error"");` the status 302 is applied * If I use `mav.setViewName(""/error"");` the status 200 is applied * If I don't use  or not declare `mav.setViewName` the status 200 is applied  Even when has more sense the 302 status, it to show an error page with some message. I have two questions from here:  (1) Why the `setViewName` overrides the `HttpStatus` value? (2) In what valid scenario the `setStatus` is mandatory to be used? I did a research on Google about to get some examples seeing in action the `setStatus` method and nothing. Of course the better approach is use a `@RequestMapping` or `@GetMapping` method that returns a `String` object (view name) and use `Model` object.  I know it is trivial, but I am with this doubt.  Note: If I put in the current `Spring Reference Documentation` (**htmlsingle** mode) the `setStatus` term, there are no results.  Thanks by your understanding.  ---  **Affects:** 4.3 GA, 4.3.3  **Issue Links:** - #18136 ability to set response status on ModelAndView","closed","type: bug,","spring-projects-issues","2016-10-10T16:25:31Z","2019-01-11T17:22:51Z"
"","19361","Possible bug about close resources when exists many ActiveProfilesResolver [SPR-14795]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14795](https://jira.spring.io/browse/SPR-14795?redirect=false)** and commented  I am working with Spring Framework 4.3.3.  I have for testing/development purposes the following:  ```java 	@Bean 	@H2Profile 	public DataSource dataSource(){  		EmbeddedDatabaseBuilder builder = new EmbeddedDatabaseBuilder();  		builder.setName(""web-##""); 		builder.setType(EmbeddedDatabaseType.H2); 		builder.addScript(""classpath:/com/manuel/jordan/h2/h2-creation-script.sql""); 		builder.addScript(""classpath:/com/manuel/jordan/h2/h2-insertion-script.sql""); 		EmbeddedDatabase db = builder.build();  		return db; 	} ```  When I had **only** one `ActiveProfilesResolver` such as:  ```java public class TestActiveProfilesResolver implements ActiveProfilesResolver {  	public TestActiveProfilesResolver(){  	}  	/** 	 * {@inheritDoc} 	 */ 	@Override 	public String[] resolve(Class testClass) { 		return new String[]{...}; 	}  } ```  All work fine  For testing reasons I've added other `ActiveProfilesResolver` such as:  ```java public class TestActiveProfilesResolver_ implements ActiveProfilesResolver {  	public TestActiveProfilesResolver_(){  	}  	/** 	 * {@inheritDoc} 	 */ 	@Override 	public String[] resolve(Class testClass) { 		return new String[]{...}; 	}  } ```  Therefore until now I have two `ActiveProfilesResolver`:  - `TestActiveProfilesResolver` - `TestActiveProfilesResolver_`  According with the [ActiveProfilesResolver API](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/ActiveProfilesResolver.html) it says:  > A custom ActiveProfilesResolver can be registered via the resolver attribute of `@ActiveProfiles`.  Ok, I have according the case `@ActiveProfiles(resolver=TestActiveProfilesResolver.class)` **or** `@ActiveProfiles(resolver=TestActiveProfilesResolver_.class)`  > Concrete implementations must provide a public no-args constructor.  Well I have that, see again my two classes shown above  > Strategy interface for programmatically resolving which active bean definition profiles should be used when loading an ApplicationContext for a test class.  Here I have now the following behaviour when `@Test` methods complete  ```java INFO  o.s.w.c.s.GenericWebApplicationContext - Closing org.springframework.web.context.support.GenericWebApplicationContext@30836671: startup date [Mon Oct 10 07:50:50 PET 2016]; root of context hierarchy INFO  o.s.w.c.s.GenericWebApplicationContext - Closing org.springframework.web.context.support.GenericWebApplicationContext@201c45f: startup date [Mon Oct 10 07:50:59 PET 2016]; root of context hierarchy INFO  org.apache.tiles.access.TilesAccess - Removing TilesContext for context: org.springframework.web.servlet.view.tiles3.SpringWildcardServletTilesApplicationContext INFO  org.apache.tiles.access.TilesAccess - Removing TilesContext for context: org.springframework.web.servlet.view.tiles3.SpringWildcardServletTilesApplicationContext INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Shutting down embedded database: url='jdbc:h2:mem:web-##;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false' INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Shutting down embedded database: url='jdbc:h2:mem:web-##;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false' ```  I see how the `Application Context` is closed twice (see from above each line appears twice). It for me has sense because now I have two `ActiveProfilesResolver`. It according (if I am correct) with the latest quote shown above.  The **problem** is that only **sometimes** I get the following `warn` error message after of the closing lines shown above:  ``` 11882 [Thread-4] WARN  o.s.j.d.e.H2EmbeddedDatabaseConfigurer - Could not shut down embedded database org.h2.jdbc.JdbcSQLException: The database has been closed [90098-192]         at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)         at org.h2.message.DbException.get(DbException.java:179)         at org.h2.message.DbException.get(DbException.java:155)         at org.h2.message.DbException.get(DbException.java:144)         at org.h2.engine.Session.getTransaction(Session.java:1595)         at org.h2.engine.Session.getStatementSavepoint(Session.java:1605)         at org.h2.engine.Session.setSavepoint(Session.java:799)         at org.h2.command.Command.executeUpdate(Command.java:252)         at org.h2.engine.Engine.openSession(Engine.java:206)         at org.h2.engine.Engine.createSessionAndValidate(Engine.java:154)         at org.h2.engine.Engine.createSession(Engine.java:137)         at org.h2.engine.Engine.createSession(Engine.java:27)         at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:349)         at org.h2.jdbc.JdbcConnection.(JdbcConnection.java:118)         at org.h2.jdbc.JdbcConnection.(JdbcConnection.java:102)         at org.h2.Driver.connect(Driver.java:72)         at org.springframework.jdbc.datasource.SimpleDriverDataSource.getConnectionFromDriver(SimpleDriverDataSource.java:140)         at org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.getConnectionFromDriver(AbstractDriverBasedDataSource.java:196)         at org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.getConnection(AbstractDriverBasedDataSource.java:159)         at org.springframework.jdbc.datasource.embedded.AbstractEmbeddedDatabaseConfigurer.shutdown(AbstractEmbeddedDatabaseConfigurer.java:42)         at org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.shutdownDatabase(EmbeddedDatabaseFactory.java:225)         at org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy.shutdown(EmbeddedDatabaseFactory.java:298)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:364)         at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:287)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:951)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:958)         at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1028)         at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1004)         at org.springframework.context.support.AbstractApplicationContext$2.run(AbstractApplicationContext.java:923) ```  The `warn` shown above appears **randomly**. It does not matter if the `@Test` methods fail or not. I can clean and re run the test, and **randomly** that `warn` appears.  Why this behavior? it would problematic if I work through Continuous Integration such as Jenkins.   ---  **Affects:** 4.3 GA, 4.3.3","closed","in: core,","spring-projects-issues","2016-10-10T15:30:56Z","2019-01-12T05:21:46Z"
"","19354","Spring MVC Test & AOP & Rest: Around advice is not executed how is expected for rest controller (just for invalid data) [SPR-14788]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14788](https://jira.spring.io/browse/SPR-14788?redirect=false)** and commented  Hello  I am totally confused with this behaviour. I don't if it is a kind of bug or I need configure something extra around there.  Please read the link about SO and return here because the following is a complement.  The `@ControllerAdvice` class used by `Rest` for validation purposes through `@Validated` is:  ```java @ControllerAdvice(basePackages={""com.manuel.jordan.rest""}) public class ResponseEntityExceptionHandlerControllerAdvice  extends ResponseEntityExceptionHandler {  ...          @Override <---- 	protected ResponseEntity handleMethodArgumentNotValid(                  MethodArgumentNotValidException ex, 		 HttpHeaders headers,                   HttpStatus status,                   WebRequest request) {  .... ```  Again it works always with valid and invalid data. Here there is any problem. The problem is with the `@Around` advice. Seems this `@ControllerAdvice` takes precedence over my `@Aspect` class (even with the `@Aspect` has been declared `@Order(0)`).  But since my `@ControllerAdvice` extends from `ResponseEntityExceptionHandler` and the [ResponseEntityExceptionHandler API](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.html) says:  > Note that in order for an `@ControllerAdvice` sub-class to be detected, ExceptionHandlerExceptionResolver must be configured.  **But** according with `Spring Reference Documentation` in the [22.16.1 Enabling the MVC Java Config or the MVC XML Namespace](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-config-enable) section it says:  > The above registers a RequestMappingHandlerMapping, a RequestMappingHandlerAdapter, and an ExceptionHandlerExceptionResolver (among others) in support of processing requests with annotated controller methods using annotations such as `@RequestMapping`, `@ExceptionHandler`, and others.  That `The above registers` part means use either `@EnableWebMvc` or ``  Well I already have:  ```java @EnableWebMvc @Configuration public class WebMvcConfig extends WebMvcConfigurerAdapter { ```  Therefore I am using `@EnableWebMvc` and it already has created `ExceptionHandlerExceptionResolver`  **One:** Is it a contradiction about the API? **Two**: what is missing or wrong?  Thank you.   ---  **Affects:** 4.3 GA, 4.3.3  **Reference URL:** http://stackoverflow.com/questions/39907258/spring-mvc-test-aop-around-advice-is-not-executed-how-is-expected-for-rest-co","closed","status: invalid,","spring-projects-issues","2016-10-09T22:22:35Z","2019-01-14T04:37:32Z"
"","19340","Add more samples (updated) about ""HtmlUnit Integration"" section [SPR-14774]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14774](https://jira.spring.io/browse/SPR-14774?redirect=false)** and commented  Respecting the huge valuable work in Spring Framework.  With the best intentions for the [15.6.2 HtmlUnit Integration](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#spring-mvc-test-server-htmlunit) section. I want to know if is possible improve the sample about:  * MockMvc and HtmlUnit * MockMvc and WebDriver  It working with and without Javascript.  I did a research on Google, and sadly practically there are no samples about these two options.  Perhaps if other Github examples would be added and referenced through the Reference documentation would be more valuable.  Thanks by your understanding   ---  **Affects:** 4.3 GA, 4.3.3","open","type: documentation,","spring-projects-issues","2016-10-02T15:19:24Z","2018-09-10T09:32:40Z"
"","19319","Spring MVC and AOP: @EnableAspectJAutoProxy needs to be redeclared for each application context [SPR-14753]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14753](https://jira.spring.io/browse/SPR-14753?redirect=false)** and commented  Hello  According with the following:  * [Spring MVC and AOP: @Pointcuts for @Controllers only works in Testing and not for Production](http://stackoverflow.com/questions/39694633/spring-mvc-and-aop-pointcuts-for-controllers-only-works-in-testing-and-not-fo)  Why the class annotated with `@EnableAspectJAutoProxy` and scanned through `RootApplicationContext` is practically ignored by `ServletApplicationContext`?  Exists two possible solutions:  * the class annotated with `@EnableAspectJAutoProxy` should be scanned through `ServletApplicationContext` instead * the class annotated with `@EnableAspectJAutoProxy` should be scanned twice, by `RootApplicationContext` and `ServletApplicationContext`  I think each approach has a drawback  Furthermore from the current answer:  > Seems that BeanFactoryPostProcessor (which is `@EnableAspectJAutoProxy` in your case) from parent context not applied to child contexts. To make it work in production you must explicitly define `@EnableAspectJAutoProxy` in child context too  If that is true is it a bug or is the expected behaviour?  Your explanation about this situation with the solution (extra configuration if exists) should be added in the [Spring Framework Reference Documentation](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/), it for the rest of the community.  I think here we have a situation about `Best Practices`  Thanks by your understanding.  ---  **Affects:** 4.3 GA  **Reference URL:** http://stackoverflow.com/questions/39694633/spring-mvc-and-aop-pointcuts-for-controllers-only-works-in-testing-and-not-fo  **Issue Links:** - #20356 Doc: Spring AOP dependency on aspectjweaver - #21392 Spring MVC: `@EnableScheduling` needs to be redeclared for each application context  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0e734d83d5c6351aa17c42922a0a667bb838552b, https://github.com/spring-projects/spring-framework/commit/13c213481a040b6d30088eb841747e72a5405b70  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2016-09-26T14:35:21Z","2019-01-13T05:19:45Z"
"","19318","Spring MVC Test with Validation JSR-303/349: Locale or accept-language does not work in testing [SPR-14752]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14752](https://jira.spring.io/browse/SPR-14752?redirect=false)** and commented  Hello..  Please read [Spring MVC Test with Validation JSR-303/349: Locale or accept-language does not work in testing](http://stackoverflow.com/questions/39680012/spring-mvc-test-with-validation-jsr-303-349-locale-or-accept-language-does-not)  I want to know the missing configuration.  Your explanation about this situation with the solution (extra configuration) should be added in the [Spring Framework Reference Documentation](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/) for the rest of the community  Thanks by your understanding.   ---  **Affects:** 4.3 GA, 4.3.2, 4.3.3  **Reference URL:** http://stackoverflow.com/questions/39680012/spring-mvc-test-with-validation-jsr-303-349-locale-or-accept-language-does-not","closed","in: core,","spring-projects-issues","2016-09-26T13:22:29Z","2017-01-04T22:34:57Z"
"","19317","Spring AOP - @Pointcut: @Before advice for @Test methods does not work [SPR-14751]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14751](https://jira.spring.io/browse/SPR-14751?redirect=false)** and commented  Hello  Please read [Spring AOP - @Pointcut: @Before advice for @Test methods does not work](http://stackoverflow.com/questions/39619982/spring-aop-pointcut-before-advice-for-test-methods-does-not-work/39695779#39695779).  I want to know if the behaviour is normal or not.  Not sure if `Sergey`'s answer is correct or not. I want assume that I need some Spring extra configuration to get everything working how is expected. I am assuming that Spring should managed this and not disable it how seems the answer suggest  Your explanation about this situation with the solution (extra configuration if exists) should be added in the [Spring Framework Reference Documentation](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/)  Thanks a lot by your understanding.   ---  **Affects:** 4.3 GA  **Reference URL:** http://stackoverflow.com/questions/39619982/spring-aop-pointcut-before-advice-for-test-methods-does-not-work/39695779#39695779","closed","in: core,","spring-projects-issues","2016-09-26T12:44:51Z","2016-09-26T17:32:46Z"
"","19300","Add new Filter to handle ""HTTP Status 405 - JSPs only permit GET POST or HEAD"" [SPR-14734]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14734](https://jira.spring.io/browse/SPR-14734?redirect=false)** and commented  Hello according with the link in the `Reference URL:` section shown above  And in my case, with the following:  ```java @PutMapping(value=""/update/{id}"", 			consumes=MediaType.APPLICATION_FORM_URLENCODED_VALUE, 			produces=MediaType.TEXT_HTML_VALUE) public String updateOne(@PathVariable String id, 			@Validated @ModelAttribute Persona persona, 			BindingResult result, 			RedirectAttributes redirectAttributes){ ... if(result.hasErrors()){ 	logger.error(""# Errors: {}"", result.getErrorCount()); 	logger.error(""result: {}"", result.toString()); 	return ""persona/updateOne""; } ... ```  When the validation detects the error(s) for any field it works how is expected, but instead to load the same page with the errors details (it works fine for `@PostMapping`) I receive instead:  ``` HTTP Status 405 - JSPs only permit GET POST or HEAD  type Status report  message JSPs only permit GET POST or HEAD  description The specified HTTP method is not allowed for the requested resource.  Apache Tomcat/8.0.26 ```  In the link attached for this report, the explanation has sense. But until this point with Spring 4.3.2 and 5 and even more thinking in Spring Boot. Wondered if it has been covered and resolved with the current API to just configure 'something' in a `WebMvcConfigurerAdapter` extension class, such as:  ```java @EnableWebMvc @Configuration public class WebMvcConfig extends WebMvcConfigurerAdapter {  ...what to do? where and how?  ```  Seems it does not exist, because I did a research in the current Reference Documentation and JavaDoc and no mention about this situation.  Thanks by your understanding.   ---  **Affects:** 4.3 GA, 4.3.1, 4.3.2, 5.0 M1  **Reference URL:** http://stackoverflow.com/questions/24673041/405-jsp-error-with-put-method","closed","status: declined,","spring-projects-issues","2016-09-19T17:33:35Z","2016-09-22T13:34:51Z"
"","19299","Fix Reference Documentation for sample code about HiddenHttpMethodFilter and CharacterEncodingFilter working together. [SPR-14733]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14733](https://jira.spring.io/browse/SPR-14733?redirect=false)** and commented  In the [22.15 Code-based Servlet container initialization](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-container-config) section it contains the following example.  ```java @Override     protected Filter[] getServletFilters() {         return new Filter[] { new HiddenHttpMethodFilter(), new CharacterEncodingFilter() };     } ```  Even when it compiles, it does not work. It for `CharacterEncodingFilter()`, when I do a submit through a Web Form that contains 'weird' characters such as: `é ê ñ` they are not received in the expected format.  According with my experiments, the inverse order is mandatory. Therefore must be  ```java @Override  protected Filter[] getServletFilters() {         return new Filter[] {new CharacterEncodingFilter(), new HiddenHttpMethodFilter() };  } ```  Currently I have the following:  ```java @Override protected Filter[] getServletFilters() {          CharacterEncodingFilter characterEncodingFilter = new CharacterEncodingFilter();         characterEncodingFilter.setForceEncoding(true);         characterEncodingFilter.setEncoding(""UTF-8"");  	    return new Filter[]{characterEncodingFilter, new HiddenHttpMethodFilter()}; } ```  Consider update the javadocs too.  Thanks    ---  **Affects:** 4.3 GA, 4.3.1, 4.3.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/031d709ce4e2446a8195b31c5486c5461587193d","closed","in: web,","spring-projects-issues","2016-09-19T16:10:33Z","2019-01-11T17:13:06Z"
"","19296","Spring MVC for Rest: How set a Locale value [SPR-14730]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14730](https://jira.spring.io/browse/SPR-14730?redirect=false)** and commented  About `Rest` for `POST` and `PUT`  For `POST` I have the following:  ```java @PostMapping(consumes={MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_UTF8_VALUE}) public ResponseEntity saveOne(@Validated @RequestBody Persona persona){ ```  Observe the method has declared `@Validated`. I need do the validation and return the error text message according the `Locale` sent it by the client/user. I can do it through Spring MVC Test I have the following:  ```java resultActions = mockMvc.perform(post(uri).contentType(MediaType.APPLICATION_XML)                      .accept(MediaType.APPLICATION_XML)                      .locale(locale)                      .content(...content...))).andDo(print()); ```  Observe the `.locale(locale)` part.  Until here about `JUnit` through `@Parameters` I am able to send a list of `Locale` and thus see the error message in different languages.  Now, the other way to access a `Rest` controller is through `RestTemplate`  I have the following:  ```java RequestEntity requestEntity = RequestEntity.post(uri) .contentType(MediaType.APPLICATION_JSON_UTF8) .accept(MediaType.APPLICATION_JSON_UTF8)																   .body(personaValid);  ....  ResponseEntity> responseEntity_    = restTemplate.exchange(requestEntity, parameterizedTypeReference);  ```  Sadly for `RequestEntity` through the `post` does not support `.locale(locale)`  Even If I add `.header(""Accept-Language"", locale.toString())` it does not work, same consideration for `.header(""locale"", locale.toString())`. I can confirm when I print the `RequestEntity` object it sends the expected `Locale` **but** in the server it ignores the 'locale' sent it and uses the default `Locale` available in the server. I am confused with this approach.  I want keep the `RequestEntity` and `ResponseEntity` objects.  I already did a research on Google and StackOverflow and nothing. That's why I am posting here.  Therefore what is the correct way?. I am with the impression an extra configuration is need it in some place. It for `Spring MVC` (production/development) and `Spring MVC Test` Consider the correct approach to be added in the reference documentation.  Thank you   ---  **Affects:** 4.3 GA, 5.0 M1  **Reference URL:** http://stackoverflow.com/questions/39574080/spring-mvc-test-for-rest-how-set-a-locale-value","closed","status: bulk-closed,","spring-projects-issues","2016-09-19T00:47:33Z","2019-01-12T02:24:41Z"
"","19289","Reference Documentation: instruct how RestTemplate should handle the errors thrown about @Validated (JSR 303/349) [SPR-14724]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14724](https://jira.spring.io/browse/SPR-14724?redirect=false)** and commented  Hello  In the current Reference Documentation, for the [28.10 Accessing RESTful services on the Client](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#rest-client-access) section.  Why not add a section about how `RestTemplate` should handle the errors thrown by validation (JSR 303/349)?. It when a `@Controller` for Rest is using [@Validated](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/annotation/Validated.html). Consider cover the testing scenarios too.  I have seen some tutorials but seems the developer must write his own code. Even more, I did realise exists many approaches, in some way verbose until some point.  Therefore just curious what is the best approach recommended by the source (Spring Reference documentation) with the current version `4.3.2` and 5 coming, just curious if the API is friendly for this.  Thanks by your understanding.   ---  **Affects:** 4.3 GA, 4.3.1, 4.3.2, 5.0 M1","closed","in: web,","spring-projects-issues","2016-09-16T00:56:03Z","2019-01-11T17:13:30Z"
"","19287","XpathExpectationsHelper should support Hamcrest matching against typed objects [SPR-14722]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14722](https://jira.spring.io/browse/SPR-14722?redirect=false)** and commented  I am working with:  * Spring Framework `4.3.2`  About `Spring MVC Test` for **Json** I have the following:  ```java .andExpect(jsonPath(""$.id"").exists()) .andExpect(jsonPath(""$.id"").value(is(""100""))) .andExpect(jsonPath(""$.id"").value(is(persona.getId()))) .andExpect(jsonPath(""$.nombre"").exists()) .andExpect(jsonPath(""$.nombre"").value(is(""Jesús Você""))) .andExpect(jsonPath(""$.nombre"").value(is(persona.getNombre()))) .andExpect(jsonPath(""$.apellido"").exists()) .andExpect(jsonPath(""$.apellido"").value(is(""Mão Nuñez""))) .andExpect(jsonPath(""$.apellido"").value(is(persona.getApellido()))) .... ```  now consider a more complex object, either _more fields_ or _relation with other objects_. With the following I have a considerable reduction of code  ``` .andExpect(jsonPath(""$"", is(persona))) .andExpect(jsonPath(""$"").value(is(persona))) ```  Same thought for collections of data returned in JSON format. Here `jsonPath` works in peace with `Hamcrest`  The problem is with **XML**. I have the following:  ``` .andExpect(xpath(""persona/*"").nodeCount(is(4))) .andExpect(xpath(""persona/id"").exists()) .andExpect(xpath(""persona/id"").string(is(""100""))) .andExpect(xpath(""persona/id"").string(is(persona.getId()))) .andExpect(xpath(""persona/nombre"").exists()) .andExpect(xpath(""persona/nombre"").string(is(""Jesús Você""))) .andExpect(xpath(""persona/nombre"").string(is(persona.getNombre()))) .andExpect(xpath(""persona/apellido"").exists()) .andExpect(xpath(""persona/apellido"").string(is(""Mão Nuñez""))) .andExpect(xpath(""persona/apellido"").string(is(persona.getApellido()))) ```  The code works or pass, but again consider a more complex object, either _more fields_ or _relation with other objects_. Sadly `xpath` does not work with `Hamcrest`. So I am not able to do a reduction of code. Same problem for collections of data returned in XML format.  This problem has been discussed in some way in: [SPR-13687 - Why MockMvcResultMatchers has not a xpath method with org.hamcrest.Matcher?](#18262) Pls. read the latest comment  Considering that Spring Framework 5 is coming, perhaps would have sense in re-consider in apply this improvement?  Thanks by your understanding.  ---  **Affects:** 4.3 GA, 4.3.1, 4.3.2, 5.0 M1  **Issue Links:** - #18262 Why MockMvcResultMatchers has not a xpath method with org.hamcrest.Matcher?  **Backported to:** Contributions Welcome","open","type: enhancement,","spring-projects-issues","2016-09-15T18:02:51Z","2019-01-14T04:37:51Z"
"","19285","Possible Bug: MappingJackson2XmlHttpMessageConverter does not share same ObjectMapper than MappingJackson2HttpMessageConverter [SPR-14720]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14720](https://jira.spring.io/browse/SPR-14720?redirect=false)** and commented  I want start here because is related with `HttpMessageConverter` s  After to read: [Latest Jackson integration improvements in Spring](https://spring.io/blog/2014/12/02/latest-jackson-integration-improvements-in-spring)  I have the following for `JSON`:  ```java @Bean     public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(){     	MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();     	converter.setObjectMapper(jackson2ObjectMapperBuilder().build());     	converter.setPrettyPrint(true);     	return converter;     }      @Bean     public Jackson2ObjectMapperBuilder jackson2ObjectMapperBuilder(){     	Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder();     	builder.simpleDateFormat(""yyyy-MM-dd"");     	return builder;     } ```  I've confirmed that `setObjectMapper` requires an `ObjectMapper` from the `com.fasterxml.jackson.databind` package.  Now I have the following for `XML`:  ```java @Bean public MappingJackson2XmlHttpMessageConverter mappingJackson2XmlHttpMessageConverter(){ 		MappingJackson2XmlHttpMessageConverter converter = new MappingJackson2XmlHttpMessageConverter(); 		converter.setPrettyPrint(true); 		converter.setSupportedMediaTypes(Arrays.asList(MediaType.APPLICATION_XML)); 		converter.setObjectMapper(jackson2ObjectMapperBuilder().build()); 		return converter; } ```  See I am using again `converter.setObjectMapper(jackson2ObjectMapperBuilder().build())` sentence and I've confirmed that the `converter.setObjectMapper` method requires the same `ObjectMapper` type from the `com.fasterxml.jackson.databind` package.  I've confirmed both scenarios just doing `Ctrl + click` to the `setObjectMapper` method and then `ObjectMapper` type parameter.  Therefore `MappingJackson2HttpMessageConverter.setObjectMapper` and `MappingJackson2XmlHttpMessageConverter.setObjectMapper` methods use the same `ObjectMapper` type  Now the `Jackson2ObjectMapperBuilder().build()` returns an `ObjectMapper` from the same `com.fasterxml.jackson.databind` package. Until here all seem fine.  But when Spring creates the `Spring ApplicationContext` through testings I get the following error message:  ```java Caused by: java.lang.IllegalArgumentException: class com.fasterxml.jackson.databind.ObjectMapper is not assignable to class com.fasterxml.jackson.dataformat.xml.XmlMapper 	at org.springframework.util.Assert.isAssignable(Assert.java:376) 	at org.springframework.util.Assert.isAssignable(Assert.java:359) 	at org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter.setObjectMapper(MappingJackson2XmlHttpMessageConverter.java:72) 	at com.manuel.jordan.config.httpmessageconverter.HttpMessageConverterXmlConfig.mappingJackson2XmlHttpMessageConverter(HttpMessageConverterXmlConfig.java:69) 	a ```  Even when the error is closely related with `Jackson` I need your confirmation it is really true before to report this issue in its Github account. Perhaps is an error of configuration by my side.   ---  **Affects:** 4.3 GA, 4.3.1, 4.3.2","closed","status: invalid,","spring-projects-issues","2016-09-15T13:33:51Z","2019-01-12T05:21:58Z"
"","19282","Print request body in PrintingResultHandler in Spring MVC Test [SPR-14717]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14717](https://jira.spring.io/browse/SPR-14717?redirect=false)** and commented  #### Form Submission  The following applies to form submission via `POST` and `PUT` requests.  I have the following handler method that processes a form submission via `POST`.  ```java @PostMapping(value=""/save"",                           consumes=MediaType.APPLICATION_FORM_URLENCODED_VALUE,                           produces=MediaType.TEXT_HTML_VALUE) public String saveOne(@Validated @ModelAttribute Persona persona,                                      BindingResult result,                                      RedirectAttributes redirectAttributes){ ```  And this is the test:  ```java resultActions = mockMvc.perform(post(url).contentType(MediaType.APPLICATION_FORM_URLENCODED)                .param(""id"", persona.getId())                .param(""nombre"", persona.getNombre())                .param(""apellido"", persona.getApellido())                .param(""fecha"", ... )                .andDo(print()); ```  Using `andDo(print())`, I can see the following:  ``` MockHttpServletRequest:       HTTP Method = POST       Request URI = /personas/save.html        Parameters = {id=[700], nombre=[Filipito], apellido=[Jordan], fecha=[06/16/1988]}           Headers = {Content-Type=[application/x-www-form-urlencoded]} ```  From that I can confirm and see what I am sending to the server. Until here I am fine.  #### XML or JSON payload in request body  Regarding REST requests, I have the following handler method.  ```java @PostMapping(consumes={MediaType.APPLICATION_XML_VALUE,                                 MediaType.APPLICATION_JSON_UTF8_VALUE}) public ResponseEntity saveOne(@Validated @RequestBody Persona persona){ ```  And these are the tests:  ```java resultActions = mockMvc.perform(post(uri).contentType(MediaType.APPLICATION_XML)                         .content(....persona....))).andDo(print()); ```  ```java resultActions = mockMvc.perform(post(uri).contentType(MediaType.APPLICATION_JSON_UTF8)                         .content(....persona....))).andDo(print()); ```  For both XML and JSON I am again using `.andDo(print())` which results in the following.  ``` MockHttpServletRequest:       HTTP Method = POST       Request URI = /personas        Parameters = {}           Headers = {Content-Type=[application/json;charset=UTF-8]} ...etc ```  and  ``` MockHttpServletRequest:       HTTP Method = POST       Request URI = /personas        Parameters = {}           Headers = {Content-Type=[application/xml]} ...etc ```  Where `...etc` provides additional information but does not print the XML or JSON body of the request.  #### Workaround  If I use `RestTemplate`, I can print the `RequestEntity` object (e.g., via logging).  #### Proposal  I would like to see the REST request body when using `MockMvc`.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/487bc7505b7587b48aaab2ad0c89297bc30ef4c3, https://github.com/spring-projects/spring-framework/commit/04b8ae921ee1a91987ea264e9d6967a5f04e1918","closed","type: enhancement,","spring-projects-issues","2016-09-15T00:37:56Z","2019-01-11T17:13:14Z"
"","19280","Document why ""charset=UTF-8"" is specified for JSON and not for XML [SPR-14715]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14715](https://jira.spring.io/browse/SPR-14715?redirect=false)** and commented  Hello  I just added the `jackson-dataformat-xml` module to my project and the following  ```java @Bean    public MappingJackson2XmlHttpMessageConverter mappingJackson2XmlHttpMessageConverter(){             MappingJackson2XmlHttpMessageConverter converter = new MappingJackson2XmlHttpMessageConverter();             converter.setPrettyPrint(true);             return converter;    } ```  Now my test classes are failing with the following error message:  ```java java.lang.AssertionError: Content type expected: but was: ```  Therefore in the same way the [MediaType](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/MediaType.html) class has declared  * APPLICATION_JSON_UTF8 * APPLICATION_JSON_UTF8_VALUE  The same consideration would be for XML.  My RestController has currently the following:  ```java 	@GetMapping(produces={MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_UTF8_VALUE}) 	public @ResponseBody GenericCollection findAll(){ 		return new GenericCollection<>(personaService.findAll()); 	}  	@GetMapping(value=""/{id}"", produces={MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_UTF8_VALUE}) 	public @ResponseBody Persona findOneById(@PathVariable String id){ 		return personaService.findOne(id); 	} ```  Thank you.  ---  **Affects:** 4.3 GA, 4.3.1, 4.3.2  **Issue Links:** - #18178 Add MediaType.APPLICATION_JSON_UTF8 and improve documentation - #18209 Allow specifying HTTP response Content-Type without losing default charset  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/27e87e559362026b132c42856c7d7bf7ff65f9ee, https://github.com/spring-projects/spring-framework/commit/387917992786ca0d048385b9fd3febeb40df8f37","closed","type: task,","spring-projects-issues","2016-09-14T15:47:10Z","2019-01-14T04:37:53Z"
"","19077","Consideration in create a new project/module about Spring Web View technology based in Java [SPR-14508]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14508](https://jira.spring.io/browse/SPR-14508?redirect=false)** and commented  Hello Spring Team  Just taking in consideration the following JIRA about: [Improved support for 'containerless' web application architectures](#14521) where it gave birth to `Spring Boot`  Just curious if Spring/Pivotal Team would consider in create a new project or module within the `Spring Framework` for a new **Web View** technology based on Java to take advantage `type safe` and `refactoring` and be able to create/add/delete new fields in some Entity (same consideration if I change some `instance variable` name) and to get automatically these changes reflected in an EntityForm (here the improvement).  Yes, I know exists:  * `Thymeleaf` but for a simple refactoring from any java entity it does not work or is not reflected in the `.html` file automatically. * `Vaadin` but it is based on `MVP` and not in `MVC` and I can't find some examples of integration for common and mandatory things such as ([Formatter](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/Formatter.html)), Validation (something equivalent about the ` tag`), [InitBinder](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html) restrictions through [WebDataBinder](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/WebDataBinder.html) to use the `setDisallowedFields` method. And even more when it only integrates with Spring just through `Spring Boot` * About `JSF` according with my current understanding it only integrates with Spring just through `Spring Web Flow`  Just being curious about why not create something about views.  Thanks by your understanding.   ---  **Affects:** 4.3 GA","closed","type: enhancement,","spring-projects-issues","2016-07-25T01:15:49Z","2019-01-14T04:38:32Z"
"","19076","Let @ModelAttribute work for specific @RequestMapping and Composed @RequestMapping Variants [SPR-14507]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14507](https://jira.spring.io/browse/SPR-14507?redirect=false)** and commented  Hello  According with my experiments and understanding `@ModelAttribute` reacts or works for any `@RequestMapping` or `Composed @RequestMapping Variants` method execution  Now thinking and considering that  a `@Repository` and `@Service` represents `CRUD` operations, for `@Controller` is problematic with `@ModelAttribute` since it would be executed for  any `@RequestMapping` execution.  I mean, I would have a method with `@ModelAttribute` where It should **only** work for a `GET`, but when other such as `POST` or now `@PostMapping` _event_ happens the `@ModelAttribute` is executed unnecessarily, therefore consuming resources in case it calls some service or do a 'complex' work.  I want avoid create many `@Controller` s representing each `CRUD` operation such as:  * PersonaDeleteOneController * PersonaFindAllController * PersonaFindOneController * PersonaSaveOneController * PersonaUpdateOneController  If something such as the following would be applied, would be fantastic  ```java @ModelAttribute(   @ReactTo(@GetMapping(""/{day}""))   @ReactTo(@GetMapping(""/{new}""))   ) ```  or  ```java @ModelAttribute(   @ReactTo(@RequestMapping(path = ""/{day}"", method = RequestMethod.GET))   @ReactTo(@RequestMapping(path = ""/new"", method = RequestMethod.GET))   ) ```  Or hybrid  ```java @ModelAttribute(   @ReactTo(@GetMapping(""/{day}""))   @ReactTo(@RequestMapping(path = ""/new"", method = RequestMethod.GET))   ) ```  Yes, I know the downsides i:  * DRY is violated since each value from `@ReactTo` is repeated twice: One inside `@ReactTo` and other from the method  If exists a better solution with the current API, perhaps should be added to the `Reference Documentation` for the community.  Thanks in advance   ---  **Affects:** 4.3 GA, 4.3.1","closed","type: enhancement,","spring-projects-issues","2016-07-24T23:59:08Z","2016-08-08T21:56:04Z"
"","18862","Explain the relation about concurrency for DefaultJmsListenerContainerFactory and JmsListener [SPR-14290]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14290](https://jira.spring.io/browse/SPR-14290?redirect=false)** and commented  I am doing a research about JMS  I did realize that to let me work with `@JmsListener` I need configure a `DefaultJmsListenerContainerFactory`, it according with the reference documentation. Until here I am ok and I am able to execute the code.  But I did realize in the current API I have the following:  [JmsListener's concurrency attribute](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/annotation/JmsListener.html#concurrency--) [DefaultJmsListenerContainerFactory's setConcurrency method ](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/config/DefaultJmsListenerContainerFactory.html#setConcurrency-java.lang.String-)  My points/doubts are:  * is there a relation between the _concurrency_ attribute and method? * one setting overrides or complements the other?  Is not clear the idea with the current documentation.  I could assume that the `@JmsListener` should 'use' in some way the settings about concurrency from `DefaultJmsListenerContainerFactory`  Thanks   ---  **Affects:** 4.2 GA, 4.2.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9c02a99d38f69e976e38a65cb7f49f8b0169c9f1","closed","status: invalid,","spring-projects-issues","2016-05-19T15:40:37Z","2019-01-12T05:22:45Z"
"","18835","Make any Embedded Database available to be accessed through an external tool (access outside of JVM) [SPR-14263]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14263](https://jira.spring.io/browse/SPR-14263?redirect=false)** and commented  Hello  I can create a simple app working with an embedded DB, such as H2, HSQL and Derby, of course, it for development purposes, Test classes work fine. Everything is Ok.  The 'problem' is that I can't see the data in realtime through a:  * Visual tool * Web Browser Console * Terminal  It just in case I want do a simple interaction with the system/app (simple presentation/academic purposes). It because any of these in-memory db runs within the Spring app. Therefore in its own JVM and is not visible outside of the Spring App.  I have found the following tutorial:  [Spring – View content of HSQLDB embedded database](http://www.mkyong.com/spring/spring-view-content-of-hsqldb-embedded-database/)  How you can see, it uses `org.hsqldb.util.DatabaseManagerSwing`, but If I change of in-memory provider, I have problem.  Therefore: could be viable make any Embedded Database available to be accessed through a external tool (access outside of JVM)?  Something like:  From [Class EmbeddedDatabaseBuilder](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilder.html)  ```java EmbeddedDatabase db = new EmbeddedDatabaseBuilder()      .generateUniqueName(true)      .setType(H2)      .setScriptEncoding(""UTF-8"")      .ignoreFailedDrops(true)      .addScript(""schema.sql"")      .addScripts(""user_data.sql"", ""country_data.sql"")      .enableOutsideAccess(true) // <---- the new feature (default false)      .build();   // perform actions against the db (EmbeddedDatabase extends javax.sql.DataSource)   db.shutdown(); ```  Thanks   ---  **Affects:** 4.2 GA, 4.3 RC2","closed","type: enhancement,","spring-projects-issues","2016-05-10T16:34:34Z","2016-07-01T12:21:27Z"
"","19116","Default connection release mode inconsistent with Hibernate 5.1.1 [SPR-14548]","**[Manuel Dominguez Sarmiento](https://jira.spring.io/secure/ViewProfile.jspa?name=mads1980)** opened **[SPR-14548](https://jira.spring.io/browse/SPR-14548?redirect=false)** and commented  We're using LocalSessionFactoryBuilder and when upgrading from [Hibernate 5.1.0 + Spring 4.2.5] to [Hibernate 5.2.1 + Spring 4.3.2] the effective connection release mode changed from ""after transaction"" to ""on close"". The Hibernate default for non-JTA environments has been ""after transaction"" for ages, since ""on close"" holds connections way too long. This caused major connection pool exhaustion which went unnoticed in our preproduction and test environments, but was hit immediately once our apps got real production load. The defaults should be: ""after transaction"" for non-JTA environments ""after statement"" for JTA environments At least this is what connection release mode ""auto"" (the default) has been doing in Hibernate for a long time. Otherwise upgrading to latest Spring+Hibernate versions causes a major change in behavior and performance. This can be resolved by explicitly configuring the following Hibernate property: hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION (see org.hibernate.resource.jdbc.spi.PhysicalConnectionHandlingMode which is new in Hibernate 5.2 - this used to be handled by the old hibernate.connection.release_mode property)  FYI ""on close"" ceased to be the default back in 2005: https://hibernate.atlassian.net/browse/HHH-1038  ---  **Affects:** 4.3.1, 4.3.2  **Issue Links:** - #18966 JDBC Connection to reset not identical to originally prepared Connection with Hibernate 5.2 - #19524 Doc: HibernateJpaVendorAdapter's ""prepareConnection"" may interfere with Hibernate 5.1+ in a JTA environment - #19820 Database.SQL_SERVER should set more recent Hibernate dialect with Spring 4.3.x  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/36143692ac434228d741dd9c80ba4a8378f3214e, https://github.com/spring-projects/spring-framework/commit/7d1c2f191ad8b58630e3c78e1e5ebe3fd8749b51, https://github.com/spring-projects/spring-framework/commit/fad931d76487e65848bc39c3cbcb6e3def5e6201  0 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2016-07-31T13:05:02Z","2019-01-14T04:38:27Z"
"","18952","Background initialization for Hibernate SessionFactory breaks transaction management [SPR-14379]","**[Manuel Dominguez Sarmiento](https://jira.spring.io/secure/ViewProfile.jspa?name=mads1980)** opened **[SPR-14379](https://jira.spring.io/browse/SPR-14379?redirect=false)** and commented  SpringSessionContext.currentSession() invokes TransactionSynchronizationManager.getResource(this.sessionFactory) and TransactionSynchronizationManager maintains a Map of resource references keyed by object references. Ordinarily this is not a problem when invoking TransactionSynchronizationManager.getResource(this.sessionFactory) since the SessionFactory reference is always the same.  However, when background initialization of the SessionFactory is enabled (new feature in 4.3 GA as per #18305) then the SessionFactory can turn out to be a proxy created using a LocalSessionFactoryBuilder$BootstrapSessionFactoryInvocationHandler depending on how the SessionFactory reference was obtained. Thus the map key for TransactionSynchronizationManager will be different. So effectively this will cause SpringSessionContext.currentSession() to return different Hibernate SessionImpl instances within the same thread and transaction context. Meaning all hell breaks loose when this happens.  TransactionSynchronizationManager.getResource() invokes TransactionSynchronizationUtils.unwrapResourceIfNecessary(key) before attempting to use the key as provided. This method's name seems to imply that it would solve the proxy wrapping issue described above, however it does not. It only checks for InfrastructureProxy and ScopedProxyUnwrapper, but neither resolves the issue described here.  The workaround is not to use background initilization as per #18305 (i.e. avoiding configuration of a bootstrapExecutor for LocalSessionFactoryBean). The solution would probably involve either fixing TransactionSynchronizationUtils.unwrapResourceIfNecessary() or having the LocalSessionFactoryBuilder$BootstrapSessionFactoryInvocationHandler proxy implement InfrastructureProxy so that the correct SessionFactory reference could be unwrapped.  ---  **Affects:** 4.3 GA  **Issue Links:** - #18305 Background initialization option for JPA EntityManagerFactory / Hibernate SessionFactory  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/01f115869b7af0e60e30c284d4238a2becca3548","closed","type: bug,","spring-projects-issues","2016-06-17T20:56:15Z","2019-01-11T16:01:42Z"
"","18936","Hibernate 5 SpringSessionSynchronization calls Session.getFlushMode() directly instead of using SessionFactoryUtils.getFlushMode(session) [SPR-14364]","**[Manuel Dominguez Sarmiento](https://jira.spring.io/secure/ViewProfile.jspa?name=mads1980)** opened **[SPR-14364](https://jira.spring.io/browse/SPR-14364?redirect=false)** and commented  Hibernate 5.2.0 changed the method signature for Session.getFlushMode() so that it returns a javax.persistence.FlushModeType instead of a org.hibernate.FlushMode  Spring 4.3.0 introduced several changes so that it could remain compatible with both 5.1.0 and 5.2.0 mainly by introducing indirection to obtain the Hibernate flush mode through SessionFactoryUtils.getFlushMode(session). However, this necessary change was omitted from SpringSessionSynchronization which still uses the following code snippet in beforeCommit():      if (!session.getFlushMode().equals(FlushMode.MANUAL)) { ... }  which should now be:      FlushMode flushMode = SessionFactoryUtils.getFlushMode(session);     if (FlushMode.MANUAL.equals(flushMode)) { ... }  This has critical consequences. Due to this bug, Spring 4.3.0 is not compatible with either Hibernate 5.1.0 nor 5.2.0  When using Hibernate 5.1.0 this bug causes a java.lang.NoSuchMethodError due to the method signature change:  java.lang.NoSuchMethodError: org.hibernate.Session.getFlushMode()Ljavax/persistence/FlushModeType; at org.springframework.orm.hibernate5.SpringSessionSynchronization.beforeCommit(SpringSessionSynchronization.java:101)  While in Hibernate 5.2.0 this causes javax.persistence.TransactionRequiredException due to equals(FlushMode.MANUAL) always returning false since it is comparing javax.persistence.FlushModeType vs org.hibernate.FlushMode  javax.persistence.TransactionRequiredException: no transaction is in progress at org.hibernate.internal.SessionImpl.checkTransactionNeeded(SessionImpl.java:3392) at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1385) at org.springframework.orm.hibernate5.SpringSessionSynchronization.beforeCommit(SpringSessionSynchronization.java:104)   ---  **Affects:** 4.3 GA","closed","type: regression,","spring-projects-issues","2016-06-14T19:21:23Z","2019-01-14T04:39:06Z"
"","19118","Classes with abstract @Lookup methods not registered in case of classpath scanning [SPR-14550]","**[Manfred Quasten](https://jira.spring.io/secure/ViewProfile.jspa?name=manfred.quasten@t-online.de)** opened **[SPR-14550](https://jira.spring.io/browse/SPR-14550?redirect=false)** and commented  `@Service`(""exchangeRateService"") class ExchangeRateServiceImpl implements ExchangeRateService { ...  `@Lookup` ExchangeRateCalculatorBuilder newBuilder() { return null; }  }  the newBuilder Method is used inside an other public method and it works fine.  But when I will make the service class  and the method newBuilder abstract then  an exception is thrown: No qualifying bean of type [de.mq.portfolio.exchangerate.support.ExchangeRateService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency.  Ok, I can understand, that the spring container will not instantiate abstract classes but when only methods for methodInjection  are abstract the bean can be instantiated. It is enhanced by cglib or what ever and it works as I've  tried without  abtract. For the (cglib) proxy there is no difference if an abstract or an other method will be overwritten.  It is not very esthetic to write the dummy method returning null or what ever and it is not nesseary.  In case of an abstract class that has only  abstract methods for method injection the container can  instantite the proxy.  ---  **Affects:** 4.2.5  **Attachments:** - [methodinjection.test.zip](https://jira.spring.io/secure/attachment/23495/methodinjection.test.zip) (_7.89 kB_)  **Issue Links:** - #16286 Introduce a mechanism for abstract types at component scanning","closed","type: enhancement,","spring-projects-issues","2016-08-01T18:13:01Z","2019-01-11T18:05:36Z"
"","19397","Type information not available on NoSuchBeanDefinitionException for collections [SPR-14831]","**[Madhura Bhave](https://jira.spring.io/secure/ViewProfile.jspa?name=mbhave)** opened **[SPR-14831](https://jira.spring.io/browse/SPR-14831?redirect=false)** and commented  The original issue is in Spring Boot (https://github.com/spring-projects/spring-boot/issues/6996). It would be helpful to get the type parameter for the `NoSuchBeanDefinitionException` for collections/maps to provide better failure analysis.   ---  **Affects:** 4.3.3","closed","type: enhancement,","spring-projects-issues","2016-10-20T21:56:43Z","2018-10-02T18:14:32Z"
"","19050","Specifying preferred default media type for a single path in Spring MVC [SPR-14481]","**[M. Justin](https://jira.spring.io/secure/ViewProfile.jspa?name=mjustin)** opened **[SPR-14481](https://jira.spring.io/browse/SPR-14481?redirect=false)** and commented  I would like to see an option for specifying the preferred default media type in a per controller/controller method basis, and not just globally.  Searching through the documentation, I have not found any method for doing this.  Furthermore, I asked on Stack Overflow (which per the Spring Website is the proper channel for requesting community support), and received no responses as to whether this functionality exists. http://stackoverflow.com/questions/37038894/can-you-specify-preferred-default-media-type-for-a-single-path-in-spring-mvc  **Use Case:**  I have a Jersey application which has been converted to Spring MVC. One piece of functionality that I don't see a way to port directly over is the ability, per endpoint, to specify the preferred media type if none is specified. In Jersey, I could specify the ""qs"" property on the media type, and it would use that to determine which response type to send if none were specified (or if multiple options were specified in the Accept header, I believe this value was multiplied by the quality scores specified).  I don't see any easy way to do this in Spring MVC, particularly not if I want to restrict the default to applying to just that one endpoint (there are other endpoints in the app that should have a different preferred default). I do see that there is a way to globally set a default content type (per the ""defaultContentType"" and ""defaultContentTypeStrategy"" methods in ContentNegotiationConfigurer), but that does not easily address the per-endpoint use case.   --- No further details from [SPR-14481](https://jira.spring.io/browse/SPR-14481?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-07-18T22:24:03Z","2020-12-15T16:03:58Z"
"","18940","Regression: Static JS files served as 'application/octet-stream' instead of 'application/javascript' [SPR-14368]","**[Luis Lebolo](https://jira.spring.io/secure/ViewProfile.jspa?name=lebolo)** opened **[SPR-14368](https://jira.spring.io/browse/SPR-14368?redirect=false)** and commented  I upgraded from Spring 4.2.6 to 4.3.0 and now I'm receiving the following error in Chrome when my web page tries to load _static javascript files_.  > Refused to execute script from `http://.../someJsFile.js` because its MIME type ('application/octet-stream') is not executable, and strict MIME type checking is enabled.  I double-checked the response header (using Spring 4.3.0) and I indeed see `Content-Type:application/octet-stream`. However, when I drop back down to Spring 4.2.6 I see `Content-Type:application/javascript`.  The files are included in my page like  ```html                ```  and my config looks like  ```xml  	    ```  I tried looking at the Spring 4.3.0 release notes, but nothing immediately stood out (maybe #17493).  Any ideas what changes in 4.3.0 are affecting me? How do I tell Spring 4.3.0 to set the correct content type for static javascript files? Let me know if you need more details about configuration, etc. Unfortunately, I don't think I could package up the project - it's quite complex and lots of proprietary info.  ---  **Affects:** 4.3 GA  **Reference URL:** http://stackoverflow.com/questions/37822460/upgraded-to-spring-4-3-0-and-static-js-files-are-now-served-as-application-octe  **Issue Links:** - #18233 ResourceHttpRequestHandler does not take into account mime types configured in WebMvcConfigurerAdapter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e38623df87cf6cbc529724d6cf1170874c05bcf0  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2016-06-15T17:13:54Z","2019-02-10T16:02:42Z"
"","18958","Upgrade to CGLIB 3.2.4 [SPR-14385]","**[Lucas Pate](https://jira.spring.io/secure/ViewProfile.jspa?name=lucaspate)** opened **[SPR-14385](https://jira.spring.io/browse/SPR-14385?redirect=false)** and commented  CGLIB has been updated to version 3.2.3 to fix a bug and two regressions: https://github.com/cglib/cglib/releases/tag/RELEASE_3_2_3  ---  **Affects:** 4.2.6  **Reference URL:** https://github.com/cglib/cglib/releases/tag/RELEASE_3_2_3  **Issue Links:** - #18506 Upgrade to CGLIB 3.2.2 - #19713 Upgrade to CGLIB 3.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/848562d68ac84f2d6d93587ace9522c857fd2706, https://github.com/spring-projects/spring-framework/commit/ea5baeb05aff5743c9dc981186155a9c1fa3ea5f, https://github.com/spring-projects/spring-framework/commit/f60c6c90c18f2d78ba4c55bb06bde65bc632665b  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","in: core,","spring-projects-issues","2016-06-20T20:15:30Z","2019-01-11T15:59:53Z"
"","19537","List-to-String conversion exception does not refer to element type [SPR-14971]","**[Luca Burgazzoli](https://jira.spring.io/secure/ViewProfile.jspa?name=lburgazzoli)** opened **[SPR-14971](https://jira.spring.io/browse/SPR-14971?redirect=false)** and commented  I'm leveraging ConversionService to convert from different types and I found out an issue related to a conversion from a List of POJO to String.  The issue are: * the conversion services says that it can convert from List to String but then while converting elements it fails because FallbackObjectToStringConverter can convert only POJO with some characteristics (a String constructors or with some static methods) but then none of those methods is used as it invokes source.toString(). * the exceptions says that it can't convert from List to String but it is not true as teh real cause is that it can't convert from POJO to String  ``` Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.util.Arrays$ArrayList] to type [java.lang.String]  at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:324)  at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:206)  at org.springframework.core.convert.support.CollectionToStringConverter.convert(CollectionToStringConverter.java:68)  at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:36)  ... 38 more ```            ---  **Affects:** 4.2.8, 4.3.4  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/142  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/442d8a68a68a54dc34e9e680d7eeea36110ecc76, https://github.com/spring-projects/spring-framework/commit/bcdda917e738d75287e34eff24652f0239a7a16e, https://github.com/spring-projects/spring-framework/commit/aef1460a64628739146a0b91df708933931d0a60  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","in: core,","spring-projects-issues","2016-12-01T14:30:58Z","2019-01-13T20:31:26Z"
"","18990","Make ResourceBundleMessageSource support more file formats [SPR-14419]","**[Loïc Dreux](https://jira.spring.io/secure/ViewProfile.jspa?name=ldreux)** opened **[SPR-14419](https://jira.spring.io/browse/SPR-14419?redirect=false)** and commented  ResourceBundleMessageSource could store and load Properties with a custom implementation of the PropertiesPersister like [YamlPropertiesPersister.java](https://github.com/calavera/ey_yaml_persister/blob/master/src/main/java/com/engineyard/appcloud/yaml/YamlPropertiesPersister.java) but the extensions "".properties"" and "".xml"" are hard coded in Java Source.  A good solution could be to had a property ""customExtension"" to support other file format like yaml.   ---  **Affects:** 4.2.6","open","type: enhancement,","spring-projects-issues","2016-06-29T15:19:43Z","2022-05-08T00:07:21Z"
"","19584","LocaleContextHolder default value should be customizable [SPR-15017]","**[Louis-Rémi](https://jira.spring.io/secure/ViewProfile.jspa?name=l-r)** opened **[SPR-15017](https://jira.spring.io/browse/SPR-15017?redirect=false)** and commented  LocaleContextHolder#getLocale fallbacks on Locale.getDefault() and it may not be the expected result.  The obvious use case is when default application locale is different of JVM's default locale.  **Example:** The ""application default locale"" has ""en"" as the default locale and jvm is running with ""en_US"" as the default locale. The expected result would be to return ""en"" to be consistent with the rest of the application.   --- No further details from [SPR-15017](https://jira.spring.io/browse/SPR-15017?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-12-14T16:29:25Z","2016-12-21T11:54:10Z"
"","19190","@Profile  don't work.  [SPR-14623]","**[liushaofei](https://jira.spring.io/secure/ViewProfile.jspa?name=javajoker)** opened **[SPR-14623](https://jira.spring.io/browse/SPR-14623?redirect=false)** and commented  I write a `@Configuration` AppConfig.class. It's like that: `@Configuration` public class AppConfig{ `@Profile`(""dev"") public DataSource datasource(){ ....... }  `@Profile`(""test"") public DataSource datasource(){ ........ } } My Environment is ""dev"".When i run my application, debug shows javax.sql.DataSource instance is not in context. When i change to it, it's right! `@Profile`(""dev"") `@Configuration` public DevEnv class{ public DataSource datasource(){ ....... } }  `@Profile`(""test"") `@Configuration` public TestEnv class{ public DataSource datasource(){ ....... } }   --- No further details from [SPR-14623](https://jira.spring.io/browse/SPR-14623?redirect=false)","closed","status: invalid,","spring-projects-issues","2016-08-24T15:06:25Z","2019-01-12T05:22:09Z"
"","18887","Headers were lost when returning a null StreamingResponseBody within a ResponseEntity [SPR-14315]","**[Lifu Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=dokd229933)** opened **[SPR-14315](https://jira.spring.io/browse/SPR-14315?redirect=false)** and commented  If a controller method's specification were:  ```java public ResponseEntity foo(){     //  code... } ```  and returns:  ```java return new ResponseEntity(someHeaders, HttpStatus.OK); ```  Then, the headers would be lost because they weren't flushed after not null check:  ```java //  StreamingResponseBodyReturnValueHandler#handleReturnValue if (ResponseEntity.class.isAssignableFrom(returnValue.getClass())) { 	ResponseEntity responseEntity = (ResponseEntity) returnValue; 	outputMessage.setStatusCode(responseEntity.getStatusCode()); 	outputMessage.getHeaders().putAll(responseEntity.getHeaders());  	returnValue = responseEntity.getBody(); 	if (returnValue == null) { 		mavContainer.setRequestHandled(true); 		return;		// <--- here, return directly without flushing headers.  	} } ```  But I'm not sure it was intentional or just a oversight ;)   ---  **Affects:** 4.3 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/22c260f3fe0e46faf7b30ed483ab5fc1cd7e2e8f, https://github.com/spring-projects/spring-framework/commit/7e95cd8b4ee8ced753043495534e3d55c4892718, https://github.com/spring-projects/spring-framework/commit/f20f6c952aa9385d622fb1cd9ec6a4cc9023364c","closed","type: bug,","spring-projects-issues","2016-05-30T06:33:16Z","2016-06-10T09:19:11Z"
"","19172","Invalid WARN when returning a BeanDefinitionRegistryPostProcessor from within a @Configuration class [SPR-14603]","**[Les Hazlewood](https://jira.spring.io/secure/ViewProfile.jspa?name=lhazlewood)** opened **[SPR-14603](https://jira.spring.io/browse/SPR-14603?redirect=false)** and commented  Consider the following configuration class:  ```java import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration;  @Configuration public class MyConfiguration {      @Bean     public static BeanDefinitionRegistryPostProcessor myPostProcessor() {         return new MyBeanDefinitionPostProcessor();     } } ```  (if it matters, this class is loaded in Spring MVC and Spring Boot applications via an `@Import(MyConfiguration.class)` annotation.)  This causes a WARN message to be printed as follows:  `Cannot enhance @Configuration bean definition 'myPostProcessor' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.`  As you can see, the method **is** declared as static, yet I still receive the WARN message.  When I remove the `static` modifier, I still receive the same WARN message.  Something is amiss.  This is a problem for us because we use this code in a Spring library as well as a Spring Boot starter/plugin that we distribute to customers - when they see the WARN message, they think something is wrong, even though everything is working as expected.  ---  **Issue Links:** - #15258 Allow BeanDefinitionRegistryPostProcessor to register other BeanDefinitionRegistryPostProcessors","closed","in: core,","spring-projects-issues","2016-08-18T23:40:17Z","2019-01-11T18:11:14Z"
"","19325","Spring MVC Flash attributes not working with reverse proxy [SPR-14759]","**[Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=asterix74)** opened **[SPR-14759](https://jira.spring.io/browse/SPR-14759?redirect=false)** and commented  I have deployed my Spring MVC application on Wildfly server on Amazon cloud with Apache for reverse proxy. Error messages on login or forgot password show up just fine but flash attributes do not show up. However, when I access the site using the static ip and port number (http://12.34.56.789:8080/myWebApp/forgot) the flash attributes show up!  I'm thinking this has got to be the issue with the way FlashMap is being looked up, specifically the method isFlashMapForRequest on line 163.(https://github.com/spring-projects/spring-framework/blob/1204d2aef4afdefb4ba73c86565aab3f5b2a6931/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractFlashMapManager.java)  Because of the reverse proxy the if check on line 166 fails and returns false.  Any help/direction is much appreciated.   ---  **Affects:** 4.1.9  **Reference URL:** http://stackoverflow.com/questions/39443239/spring-mvc-flash-attributes-amazon-ec2-apache-mod-proxy","closed","status: invalid,","spring-projects-issues","2016-09-28T01:49:56Z","2019-01-12T05:21:52Z"
"","19243","ResponseHeaderAdvice [SPR-14679]","**[Kris Bloe](https://jira.spring.io/secure/ViewProfile.jspa?name=chrisbloe)** opened **[SPR-14679](https://jira.spring.io/browse/SPR-14679?redirect=false)** and commented  Please could we have a ResponseHeaderAdvice (similar to ResponseBodyAdvice)?  Response headers can be modified in ResponseBodyAdvice, but its intention is to focus on the body, and it only works when the response contains a body.  Having a dedicated class would be really helpful (even more so if the http status code was available, too).   ---  **Affects:** 4.3.2  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2016-09-08T14:26:38Z","2018-11-30T21:36:19Z"
"","18966","JDBC Connection to reset not identical to originally prepared Connection with Hibernate 5.2 [SPR-14393]","**[Koen van Dijk](https://jira.spring.io/secure/ViewProfile.jspa?name=koenvd)** opened **[SPR-14393](https://jira.spring.io/browse/SPR-14393?redirect=false)** and commented  This issue occured after updating my application to the latest versions of spring, spring data and hibernate (from 4.3.9.Final to 5.2.0.Final, 4.2.2.Release to 4.3.0.Release, 1.9.1.RELEASE to 1.10.2.Release)  I noticed that a warning started to appear in my logs. "" WARN  org.springframework.orm.jpa.vendor.HibernateJpaDialect (HibernateJpaDialect.java:366) qtp883841715-95 :JDBC Connection to reset not identical to originally prepared Connection - please make sure to use connection release mode ON_CLOSE (the default) and to run against Hibernate 4.2+ (or switch HibernateJpaDialect's prepareConnection flag to false""  I found this warning quite worrisome since it indicated a fairly serious bug in my application if it were true that the connection that initiated the transaction was not the same as the one that ended it. After some digging I found that the connections were in fact equal and that this warning was caused by the fact that Hikari uses proxy objects to wrap the connections. Hikari did manage to wrap the same connection but it uses a different wrapper object during the beginning and ending of the transaction.  The piece of code in the class org.springframework.orm.jpa.vendor.HibernateJpaDialect of particular interest is:  ```java if (conToReset != this.preparedCon)  { 	LogFactory.getLog(HibernateJpaDialect.class).warn( 	""JDBC Connection to reset not identical to originally prepared Connection - please "" + 	""make sure to use connection release mode ON_CLOSE (the default) and to run against "" + 	""Hibernate 4.2+ (or switch HibernateJpaDialect's prepareConnection flag to false""); } ```  I have the following question: I am under the impression that in this case I am safely able to ignore this warning since it is only the proxy object that differs and not the actual jdbc connection, do you share my conclusion?  ---  **Affects:** 4.3 GA  **Reference URL:** https://github.com/brettwooldridge/HikariCP  **Issue Links:** - #18899 Support for Hibernate ORM 5.2 - #17860 HibernateJpaDialect should warn about connection release mode other than ON_CLOSE (when upgrading from 4.0.x) - #19116 Default connection release mode inconsistent with Hibernate 5.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5e08598a2a439109eaea91289b8cb4cb3b8aedc7, https://github.com/spring-projects/spring-framework/commit/351a729317322d9c94341886510ff612968b6234, https://github.com/spring-projects/spring-framework/commit/711eb998125ceaf23237f9a2eef2b90086f4e48a  0 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2016-06-23T10:31:11Z","2019-01-11T15:46:46Z"
"","19245","HibernateExceptionTranslator translating to InvalidDataAccessApiUsageException when using vanilla Hibernate [SPR-14681]","**[Koen Serneels](https://jira.spring.io/secure/ViewProfile.jspa?name=koen.serneels)** opened **[SPR-14681](https://jira.spring.io/browse/SPR-14681?redirect=false)** and commented  The new org.springframework.orm.hibernate5.HibernateExceptionTranslator uses a fallthrough in the sense that it first tries to map the exception using vanilla Hibernate (SessionFactoryUtils). If no translation could be done it tries JPA via EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible().  The latter troubles us as it is translating IllegalStateException to InvalidDataAccessApiUsageException. I'm not really sure why IllegalStateException and IllegalArgumentException get this special treatment, but ok. So now we suddenly end up with translated exceptions that weren't translated before. Since these extra translations are in context of JPA (as it is called 'convertJpaAccessExceptionIfPossible') this also makes no sense as we are not using JPA but vanilla Hibernate.  So, what is the correct way to make sure that we only get Hibernate exceptions translated? Afaic the HibernateExceptionTranslator has no options to turn off JPA translation and the LocalSessionFactoryBean extends HibernateExceptionTranslator without the option to inject another implementation. Wouldn't it make more sense to have the HibernateExceptionTranslator JPA unaware and add another translator in case JPA is actually used?  ---  **Affects:** 4.3.2  **Reference URL:** https://stackoverflow.com/questions/39393116/how-to-deactivate-spring-data-exception-translation  **Issue Links:** - #19225 TypeConverterSupport does not propagate custom exceptions anymore - #19024 Hibernate5 LocalSessionFactoryBean does not translate javax.persistence exceptions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4b445531f56ccb106c935bcbdee27c55cb867b83, https://github.com/spring-projects/spring-framework/commit/34ab818dfa795bd67fa44061f71e68bc665fa0bf","closed","type: regression,","spring-projects-issues","2016-09-08T19:48:30Z","2019-01-11T18:20:34Z"
"","19351","A simple way to manipulate exceptions in ExceptionHandlerExceptionResolver [SPR-14785]","**[Klaus Groenbaek](https://jira.spring.io/secure/ViewProfile.jspa?name=qwertgold)** opened **[SPR-14785](https://jira.spring.io/browse/SPR-14785?redirect=false)** and commented  I need to remove sensitive information (passwords) from all exceptions before they are logged. ExceptionHandlerExceptionResolver (and subclasses) automatically logs a warnings and debug when it starts to process exceptions, this is done before you can intercept them in ResponseEntityExceptionHandler or other `@ControllerAdvices`.  You can disable this logging, but this info is often useful for debugging JSON-to-DTO mismatch.  By default ExceptionHandlerExceptionResolver is instantiated by spring (WebMvcConfigurationSupport.addDefaultHandlerExceptionResolvers) so in order to subclass it you need to suppress the default behaviour, and configure it manually, which is extremely messy, because some of it's properties are created through the configurer framework.  I can think of two possible solutions. 1. Allow the user to instantiate the ExceptionHandlerExceptionResolver bean, similar to other beans, like ContentNegotiationManager, which are configured through the configurer framework. 2. Add a ExceptionProcessor callback interface to ExceptionHandlerExceptionResolver, so the user has a chance to rewrite the exception (typically BindException) before it is being logged. However since ExceptionHandlerExceptionResolver is not a bean, there is no easy way to set an ExceptionProcessor, but perhaps it could be configured through an annotation like with `@ControllerAdvice`.  If you can think of a way to sanitise exceptions without any modifications to Spring MVC please let me know. I have marked this is a minor issue, but it is quite important to us, as we manage other users passwords. We therefore want to make sure no one can get their hands on a password in case we are hacked and log files are leaked, or that someone can blame a sysadmin of stealing a password. Our lives as developers are much easier if passwords only live in memory.  P.s. Not happy with the issue title, please rewrite it if you can think of a better one.   --- No further details from [SPR-14785](https://jira.spring.io/browse/SPR-14785?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-10-06T17:00:28Z","2016-10-14T18:36:37Z"
"","19526","Ordered interface not respected on non-singleton aspects [SPR-14959]","**[Ken DeLong](https://jira.spring.io/secure/ViewProfile.jspa?name=kenwdelong)** opened **[SPR-14959](https://jira.spring.io/browse/SPR-14959?redirect=false)** and commented  I am using Java 8, Boot 1.4.1, and Spring 4.3.3 (from Boot).  I have a set of aspects that I instantiate as prototype scope, because they maintain state (like a CircuitBreaker) and they are individually exported to JMX for monitoring purposes.  https://github.com/kenwdelong/stability-utils  The interceptors under consideration are: https://github.com/kenwdelong/stability-utils/blob/stability-utils-1.3.10/src/main/java/com/kendelong/util/circuitbreaker/CircuitBreakerAspect.javahttps://github.com/kenwdelong/stability-utils/blob/stability-utils-1.3.10/src/main/java/com/kendelong/util/concurrency/ConcurrencyLimitingAspect.java https://github.com/kenwdelong/stability-utils/blob/stability-utils-1.3.10/src/main/java/com/kendelong/util/performance/PerformanceMonitoringAspect.java https://github.com/kenwdelong/stability-utils/blob/stability-utils-1.3.10/src/main/java/com/kendelong/util/retry/RetryInterceptor.java  The ordering of these interceptors is critical (and also the ordering relative to TransactionInterceptor and MethodSecurityInterceptor).  However, the Ordered interface is not being respected here.  My configuration (XML here, but JavaConfig behaves the same) is  {code:html/xml} \ \ \ \  ```  However, the aspects are ordered randomly.  I tried to trace this through the code, to the AnnotationAwareOrderComparator.findOrder() method.  It returns after the first check for the Ordered interface (line 65), which is good, but the value it returns is Integer.MAX_VALUE, which is bad.  OrderComparator.findOrder() returns the Integer.  From there it asks the LazySingletonAspectInstanceFactoryDecorator for the order, which delegates to BeanFactoryAspectInstanceFactory.getOrder().  Finally, that method calls OrderUtils.getOrder() (line 68)  but this method ONLY looks for the annotation then gives up and assigns the default value.  I think perhaps this method should also check for the Ordered interface and call that getOrder() method.  If I use the @Order annotation on my aspects, it works fine.  But as this is a reusable library, hard-coding the order values may be incompatible with the project using the library. ```  ---  **Affects:** 4.3.3  **Reference URL:** http://stackoverflow.com/questions/40768177/spring-aop-prototype-scoped-aspects-are-firing-out-of-order  **Issue Links:** - #19256 ScheduledAnnotationBeanPostProcessor should reliably apply after AnnotationAwareAspectJAutoProxyCreator","open","type: enhancement,","spring-projects-issues","2016-11-28T17:23:43Z","2019-01-11T19:16:20Z"
"","19168","`WebMvcConfigurer#extendHandlerExceptionResolvers` is not invoked [SPR-14599]","**[Keita ISEKI](https://jira.spring.io/secure/ViewProfile.jspa?name=netpenguin)** opened **[SPR-14599](https://jira.spring.io/browse/SPR-14599?redirect=false)** and commented  An implementation of `extendHandlerExceptionResolvers` method is missing in 'DelegatingWebMvcConfiguration' class.  For that reason, `WebMvcConfigurer#extendHandlerExceptionResolvers` is not invoked even though it is implemented.   ---  **Affects:** 4.3.2  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java#L134-Lundefined  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8d7db8e450abf1123f7b4dc2c3e0969b40e376fa, https://github.com/spring-projects/spring-framework/commit/453822817f53a26331672423c588576aec3d28b4, https://github.com/spring-projects/spring-framework/commit/d2e3a1a4f5c1407cd4bd1fcb3dd556dbe87c83c3","closed","type: bug,","spring-projects-issues","2016-08-18T03:46:12Z","2016-09-19T15:55:27Z"
"","19576","Cannot customize autoGrowCollectionLimit on @InitBinder method when set custom MessageCodesResolver to Spring MVC [SPR-15009]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-15009](https://jira.spring.io/browse/SPR-15009?redirect=false)** and commented  In current implementation, We cannot customize the `autoGrowCollectionLimit` of `DataBinder` when set a custom `MessageCodesResolver` to the Spring MVC using  `WebMvcConfigurerAdapter` or ``.  Because it initialize a `BindingResult` on the `DataBinder` as follow:  ```java public void setMessageCodesResolver(MessageCodesResolver messageCodesResolver) {     getInternalBindingResult().setMessageCodesResolver(messageCodesResolver); } ```  I think it should be changed to same logic with `ConversionService` as follow:  ```java public void setMessageCodesResolver(MessageCodesResolver messageCodesResolver) {     Assert.state(this.messageCodesResolver == null, ""DataBinder is already initialized with MessageCodesResolver"");     this.messageCodesResolver = messageCodesResolver;     if (this.bindingResult != null && messageCodesResolver != null) {         this.bindingResult.setMessageCodesResolver(messageCodesResolver);     } } ```  What do you think ? I will submit a PR at the later.  ---  **Affects:** 4.3.4  **Issue Links:** - #19454 Detect invalid configuration for autoGrowCollectionLimit on DataBinder  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1266, and commits https://github.com/spring-projects/spring-framework/commit/307e37a69f001ce9b6e7017eb2e9b2261429ef5c, https://github.com/spring-projects/spring-framework/commit/8d55c7d60a004cf5bf43dd83107a9e69ac4b59e6, https://github.com/spring-projects/spring-framework/commit/58eccfe5bdab21212c19f39a1ab635a0e5f541d6, https://github.com/spring-projects/spring-framework/commit/361ab6b6219b4e44908bab206b18e185d8f76bb4, https://github.com/spring-projects/spring-framework/commit/9f229283fb4690aee347d22aae5f4625a8576746","closed","type: enhancement,","spring-projects-issues","2016-12-13T15:30:21Z","2019-01-11T15:21:49Z"
"","19454","Detect invalid configuration for autoGrowCollectionLimit on DataBinder [SPR-14888]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-14888](https://jira.spring.io/browse/SPR-14888?redirect=false)** and commented  In current implementation, the `DataBinder` can't detect invalid configuration for `autoGrowCollectionLimit` as follow:  ``` DataBinder binder = new DataBinder(new BeanWithIntegerList()); binder.registerCustomEditor(String.class, new StringTrimmerEditor(true)); binder.setAutoGrowCollectionLimit(257); // Invalid configuration -> But no error ```  In this case, we should be call the setAutoGrowCollectionLimit method before calling the registerCustomEditor method. I think it would be better to raise an exception as follow:  ``` public void setAutoGrowCollectionLimit(int autoGrowCollectionLimit) {     Assert.state(this.bindingResult == null,         ""DataBinder is already initialized - call setAutoGrowCollectionLimit before other configuration methods"");     this.autoGrowCollectionLimit = autoGrowCollectionLimit; } ```  What do you think ? I will submit a PR at the later.  ---  **Affects:** 4.2.8, 4.3.4  **Issue Links:** - #19576 Cannot customize autoGrowCollectionLimit on `@InitBinder` method when set custom MessageCodesResolver to Spring MVC  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1233","closed","type: enhancement,","spring-projects-issues","2016-11-08T15:48:16Z","2019-01-13T05:19:03Z"
"","19440","The 500 error occur when receive a indexed parameter equal or greater than autoGrowCollectionLimit [SPR-14874]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-14874](https://jira.spring.io/browse/SPR-14874?redirect=false)** and commented  By default settings, the `autoGrowCollectionLimit` is 256. I tried to request as follow:  ``` public class SearchQuery {     private List ids;     // ... } ```  ``` @RestController @RequestMapping(""/accounts"") public class AccountRestController {     @GetMapping     public List search(@Validated SearchQuery query) {         // ...     } } ```  I submit a request for `http://localhost:8080/accounts?ids[256]=foo`.  ``` Whitelabel Error Page  This application has no explicit mapping for /error, so you are seeing this as a fallback.  Thu Nov 03 12:53:53 JST 2016 There was an unexpected error (type=Internal Server Error, status=500). Invalid property 'ids[256]' of bean class [com.example.AccountQuery]: Invalid list index in property path 'ids[256]'; nested exception is java.lang.IndexOutOfBoundsException: Index: 256, Size: 0 ```  I will expect to be the 400(Bad Request) error in this case. What do you think ?   ---  **Affects:** 4.1.9, 4.2.8, 4.3.3","closed","status: bulk-closed,","spring-projects-issues","2016-11-03T03:59:42Z","2019-01-12T00:12:03Z"
"","19406","Support a code that start with objectName to the string argument [SPR-14840]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-14840](https://jira.spring.io/browse/SPR-14840?redirect=false)** and commented  I wan to support a message resolvable code that start with `objectName` to the string argument  (string attribute of Bean Validation constraint annotation) at `SpringValidatorAdapter`.  e.g. )  ``` @Same(field = ""password"", comparingField = ""confirmPassword"") public class AccountForm {   	private String password; 	private String confirmPassword;           // omit other fields & setter/getter } ```  By current implementation, we can define message and logical filed name as follow:  ``` Same={2} must be same value with {1} password=Password confirmPassword=Password(Confirm) ```  Displayed message is as follow:  ``` Password must be same value with Password(Confirm) ```  After improved by this issue, we can override logical field name per target object as follow:  ``` ... accountForm.password=New Account Password accountForm.confirmPassword=New Account Password(Confirm) ```  Displayed message is as follow:  ``` New Account Password must be same value with New Account Password(Confirm) ```  What do you think ? I will submit a PR on GitHub.   ---  **Affects:** 4.3.3  **Reference URL:** #17986  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1217","closed","status: bulk-closed,","spring-projects-issues","2016-10-23T11:11:30Z","2019-01-14T04:37:22Z"
"","18886","ConcurrentMapCacheManager's storeByValue does not pick up ClassLoader [SPR-14314]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-14314](https://jira.spring.io/browse/SPR-14314?redirect=false)** and commented  I've tried a new feature of cacheing supported at Spring 4.3. I've used the `storeByValue` property of `ConcurrentMapCacheManager` as follow:  ``` @EnableCaching @Configuration public class CacheConfig {     @Bean     CacheManager cacheManager() {         ConcurrentMapCacheManager cacheManager = new ConcurrentMapCacheManager(""configs"");         cacheManager.setStoreByValue(true);         return cacheManager;     } } ```  However, it does not worked serialization and deserialization a cache value :( Is my configuration wrong ?  I've tried as follow, it work fine.  I want to know best configuration for this case.  ``` @EnableCaching @Configuration public class CacheConfig implements BeanClassLoaderAware { // Add      ClassLoader classLoader;      @Override     public void setBeanClassLoader(ClassLoader classLoader) {         this.classLoader = classLoader;     }      @Bean     CacheManager cacheManager() {         ConcurrentMapCacheManager cacheManager = new ConcurrentMapCacheManager(""configs"");         cacheManager.setBeanClassLoader(classLoader); // Add         cacheManager.setStoreByValue(true);         return cacheManager;     }  } ```  ---  **Affects:** 4.3 RC2  **Issue Links:** - #18331 Support store-by-value in ConcurrentMapCacheManager","closed","in: core,","spring-projects-issues","2016-05-28T12:18:00Z","2019-01-11T16:09:09Z"
"","18885","Allow constructor injection at CompositeDatabasePopulator [SPR-14313]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-14313](https://jira.spring.io/browse/SPR-14313?redirect=false)** and commented  I want to support constructor injection at the `CompositeDatabasePopulator` as follow:  ```java public class CompositeDatabasePopulator implements DatabasePopulator {     public CompositeDatabasePopulator(DatabasePopulator... populators) {         addPopulators(populators);     }     // ... } ```  What do you think ? I will submit a PR for this.   ---  **Affects:** 4.3 RC2","closed","type: enhancement,","spring-projects-issues","2016-05-28T01:27:05Z","2016-06-10T09:19:12Z"
"","18877","NPE was occurred at WebUtils.isSameOrigin [SPR-14305]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-14305](https://jira.spring.io/browse/SPR-14305?redirect=false)** and commented  NPE was occurred at the WebUtils.isSameOrigin when i access to a host (name) that supported by RFC 3986. In actually, i tried a host name include with ""`_`"". (e.g. http://spring_app/)  ``` ... Caused by: java.lang.NullPointerException 	at org.springframework.web.util.WebUtils.isSameOrigin(WebUtils.java:816) 	at org.springframework.web.cors.DefaultCorsProcessor.processRequest(DefaultCorsProcessor.java:76) 	at org.springframework.web.servlet.handler.AbstractHandlerMapping$CorsInterceptor.preHandle(AbstractHandlerMapping.java:503) 	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:134) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:956) ```  I will submit repro project on https://github.com/spring-projects/spring-framework-issues.  ---  **Affects:** 4.2.6  **Issue Links:** - #18652 DefaultCorsProcessor's origin comparison is restrictive and inefficient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9a4177436464368b10a89fa5d61453cae0d9d29b, https://github.com/spring-projects/spring-framework/commit/6807bcb863775908fc19773924dca8c8734687b4","closed","type: bug,","spring-projects-issues","2016-05-25T18:20:22Z","2019-01-11T16:10:13Z"
"","19405","@DateTimeFormat support for YearMonth, MonthDay, Year [SPR-14839]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** (@kazuki43zoo) opened **[SPR-14839](https://jira.spring.io/browse/SPR-14839?redirect=false)** and commented  I hope to support the `@DateTimeFormat` annotation for Joda-Time's `YearMonth`, `MonthDay`, and `Year` types, analogous to the existing support for the corresponding JSR-310 types.  For example:  ```java public class AccountForm {      @DateTimeFormat(pattern=""MM/uuuu"")     private YearMonth expirationMonth;      @DateTimeFormat(pattern=""M/d"")     private MonthDay dayOfBirth;      // ... } ```  ---  **Affects:** 4.3.3  **Issue Links:** - #18095 Conversion support for java.time.YearMonth (as well as MonthDay) - #20016 ScheduledAnnotationBeanPostProcessor does not support Duration syntax - #20983 Missing java.time.Year Formatter  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1215","closed","status: superseded,","spring-projects-issues","2016-10-22T07:23:35Z","2021-11-24T14:11:26Z"
"","19413","TransactionStatus.flush() should trigger TransactionSynchronization.flush() when using DataSourceTransactionManager  [SPR-14847]","**[Karsten Sperling](https://jira.spring.io/secure/ViewProfile.jspa?name=ksperling)** opened **[SPR-14847](https://jira.spring.io/browse/SPR-14847?redirect=false)** and commented  TransactionStatus.flush() does not trigger TransactionSynchronization.flush() when using DataSourceTransactionManager, even though this transaction manager supports transaction synchronization, while the same call with JtaTransactionManager and WebSphereUowTransactionManager does.  Given that TransactionSynchronization support is implemented in AbstractPlatformTransactionmanager I would expect this behaviour to be consistent between the various TMs that derive from this.  DefaultTransactionStatus.flush() delegates to SmartTransactionObject.flush() (if the underlying transaction object implements that interface), but then some of the STO implementations call TransactionSynchronizationUtils.triggerFlush() and some don't. Maybe a more appropriate approach would be to have DefaultTransactionStatus itself call triggerFlush() directly after calling STO.flush() and removing the call from the STO sub-classes.  Another wrinkle is that the transaction manager may have been configured to not enable transaction synchronization, in which TransactionSynchronizationUtils.triggerFlush() will raise an IllegalStateException, so DefaultTransactionStatus should probably check for isSynchronizationActive first.  (As motivation for all this, I'm using Ebean ORM with Spring's transaction management, and would like it to be able to correctly participate via it's TransactionSynchronization listener when flush() is called. My workaround is currently to register another TransactionSynchronization before calling TransactionStatus.flush(), and then checking if the flush() call has been propagated, and calling triggerFlush myself otherwise, however this seems pretty hacky.)   ---  **Affects:** 4.3.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/01e9307fb7423ced74d0c81abcd093657c8f99fb, https://github.com/spring-projects/spring-framework/commit/2874066a975b28128856ee07ac44f37f83f624eb","closed","type: enhancement,","spring-projects-issues","2016-10-26T08:51:19Z","2016-11-07T22:01:24Z"
"","18839","JettyWebSocketSession.send*Message() can throw Jetty-specific WebSocketException instead of IOException [SPR-14267]","**[Karsten Sperling](https://jira.spring.io/secure/ViewProfile.jspa?name=ksperling)** opened **[SPR-14267](https://jira.spring.io/browse/SPR-14267?redirect=false)** and commented  The various send*() methods in org.springframework.web.socket.adapter.jetty.JettyWebSocketSession call getNativeSession().getRemote() each time. If the connection has been closed by the remote end, this will throw a org.eclipse.jetty.websocket.api.WebSocketException.WebSocketException. Expected behaviour would be to receive an IOException instead.  Whether this is a bug in the Jetty API is debatable -- I would certainly consider it somewhat undesirable in the same way as the recently fixed #18710, and it would be nice if the Jetty API aligned with the javax.websocket API where getBasicRemote() / getAsyncRemote() doesn't throw even when the connection has been closed.  If the Jetty RemoteEndpoint has been obtained while the connection is still open, any subsequent call to send*() after the connection has been closed will throw an IOException as expected.  In either case, it would be helpful if this could be worked around in spring-websocket. The easiest approach to fix the specific issue would be to simply call getRemote() once when the connection is established. Another approach would be to catch the Jetty-specific WebSocketException and wrap it in an IOException.  As an aside, is there any particular reason why JettyWebSocketHandlerAdapter is implemented using the annotation-based Jetty websocket API rather than the more straightforward WebSocketListener and related interfaces?  ---  **Affects:** 4.2.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3fb58cda8e9b5a36ce241f32f3578344328e240b","closed","type: enhancement,","spring-projects-issues","2016-05-12T08:33:48Z","2019-01-11T17:03:43Z"
"","19156","Improve documentation for Cacheable#result (re: Optional wrapper) [SPR-14587]","**[Karol Krawczyk](https://jira.spring.io/secure/ViewProfile.jspa?name=kkrawczyk.pl@gmail.com)** opened **[SPR-14587](https://jira.spring.io/browse/SPR-14587?redirect=false)** and commented  After migrating from spring-context 4.2.7 to spring-context 4.3.2 I noticed a change in a way you handle the caching of optionals. If you look at the code below:  ```java class UserService {     @Cacheable(cacheNames = ""userCache"", unless = ""!#result.isPresent()"")     public Optional getUser(Integer id) {         //return user     } } ```  it throws: EL1004E:(pos 1): Method call: Method isPresent() cannot be found on com.test.User type It's because #result expression is now a concrete class and not Optional like before.  I am not sure if this is an intended behaviour or a bug. Though for me it is a bit misleading to be able to use Optionals for caching and at the same time to operate on unwrapped object for #result expression.   ---  **Affects:** 4.3.2  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2016-08-15T17:23:09Z","2019-01-11T18:03:49Z"
"","19561","Add request matchers for query parameters in MockRestRequestMatchers [SPR-14995]","**[János Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=schjan79)** opened **[SPR-14995](https://jira.spring.io/browse/SPR-14995?redirect=false)** and commented  There isn't any request matcher factory method for query parameters in MockRestRequestMatchers.  Such request matchers would be use full in the component spring-cloud-contract-wiremock of project spring-cloud-contract when creating a MockRestServiceServer from a WireMock JSON. The request matchers of test components are used for the creation but there is no assertion against query parameters.  The implementation of query parameter request matchers could be there as well but imho it would be more beautiful if the request matchers are in the same place, in the same code base.   ---  **Affects:** 4.3.4","closed","type: enhancement,","spring-projects-issues","2016-12-08T20:37:34Z","2016-12-21T11:54:10Z"
"","19136","spring boot 1.4 compatibility issue with hibernate 5 [SPR-14567]","**[jyoti ](https://jira.spring.io/secure/ViewProfile.jspa?name=jyoti008)** opened **[SPR-14567](https://jira.spring.io/browse/SPR-14567?redirect=false)** and commented  org.springframework.beans.factory.BeanCreationException: Error in creating bean  ---  **Issue Links:** - #19135 spring boot 1.4 support with hibernate 5.2.1 (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2016-08-08T12:15:57Z","2019-01-11T18:04:55Z"
"","19135","spring boot 1.4 support with hibernate 5.2.1 [SPR-14566]","**[jyoti ](https://jira.spring.io/secure/ViewProfile.jspa?name=jyoti008)** opened **[SPR-14566](https://jira.spring.io/browse/SPR-14566?redirect=false)** and commented  Unable to start embedded container; nested exception is org.springframework.beans.factory.BeanCreationException  ---  **Issue Links:** - #19136 spring boot 1.4 compatibility issue with hibernate 5 (_**""is duplicated by""**_) - #18906 Add support for Hibernate 5.2","closed","status: invalid,","spring-projects-issues","2016-08-08T03:29:26Z","2019-01-12T05:22:19Z"
"","18951","Support @TestPropertySource at method level [SPR-14378]","**[Justin Knowles](https://jira.spring.io/secure/ViewProfile.jspa?name=justinrknowles@gmail.com)** opened **[SPR-14378](https://jira.spring.io/browse/SPR-14378?redirect=false)** and commented  `@TestPropertySource` allows you to set test-suite / class-level properties, but I want test-level properties so I can test drive classes with `@ConditionalOnProperty` and `@Value(${var:default})` type annotations for correct behavior.  I have considered creating separate test suites for each test, but that seems unnatural.  I currently manually manage the context within the test to validate the behavior.  ---  **Issue Links:** - #13977 Support `@ActiveProfiles` at method level - #16647 Support `@ContextConfiguration` at method level  8 votes, 14 watchers","open","type: enhancement,","spring-projects-issues","2016-06-17T12:28:35Z","2022-06-13T07:01:23Z"
"","18968","Freemarker and content type [SPR-14395]","**[Julian FLORIO](https://jira.spring.io/secure/ViewProfile.jspa?name=julian.florio@worldline.com)** opened **[SPR-14395](https://jira.spring.io/browse/SPR-14395?redirect=false)** and commented  When I set ""application/xml"" or ""application/voicexml+xml"" in the property spring.freemarker.content-type, I have an error : javax.servlet.ServletException: Circular view path [XXX]: would dispatch back to the current handler URL [/YYY/XXX] again. Check your ViewResolver setup! (Hint: This may be the result of an unspecified view, due to default view name generation.)  If I don't set this property, I work.   ---  **Affects:** 4.3 RC2","closed","status: invalid,","spring-projects-issues","2016-06-23T12:57:03Z","2019-01-12T05:22:31Z"
"","19604","Revisit dependency baseline: Jetty 9.4+, OkHttp 3+ [SPR-15038]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15038](https://jira.spring.io/browse/SPR-15038?redirect=false)** and commented  We're still tolerating older dependencies in 5.0 milestones but should eventually raise the baseline for 5.0 GA. In rather obvious cases, we'd gain quite a bit by going Jetty 9.4+ (for WebSocket support) and OkHttp 3+, both of which look entirely feasible in Spring 5.  Another one still up for consideration is Hibernate ORM 5.2+ for our native `orm.hibernate5` package, while our JPA support will remain compatible with Hibernate 4.3+ in any case. However, since JBoss EAP 7 still comes with Hibernate ORM 5.0.x, this does not seem feasible yet. We might rather drop the entire native Hibernate API support at some point.  ---  **Issue Links:** - #18073 Require Undertow 1.3.5+, Tyrus 1.11+, Jetty 9.3+, Tomcat 8.5+ - #18916 Deprecate OkHttp 2.x support - #19507 Support for Jetty 9.4 (and 9.3.15+) - #19882 Support for HtmlUnit 2.25+","closed","type: task,","spring-projects-issues","2016-12-21T10:59:27Z","2019-01-11T15:18:02Z"
"","19595","Support @Nullable annotations as indicators for optional injection points [SPR-15028]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15028](https://jira.spring.io/browse/SPR-15028?redirect=false)** and commented  Along the lines of Guice (https://github.com/google/guice/wiki/UseNullable), we can easily detect `@Nullable` annotations and automatically mark method parameters and dependency descriptors as optional, i.e. not required, injecting `null` instead of throwing an `UnsatisfiedDependencyException`. This is particularly useful with JSR-330's `@Inject` where not `@Autowired`-style `required` attribute is available at the injection annotation level, as an alternative to using Java 8's `java.util.Optional` (which Spring supports for a while already). This also nicely goes along with our support for nullable type declarations in Kotlin.  ---  **Issue Links:** - #19518 Support Kotlin nullable information for `@Autowired` and `@Inject` - #16452 Support for java.util.Optional with `@Inject` (a la `@Autowired`'s required=false)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/12aa14ddbc9fe1699bbd0f559b15074946a1c2ed","closed","type: enhancement,","spring-projects-issues","2016-12-18T19:57:29Z","2019-01-13T05:18:21Z"
"","19565","Compatibility with Hibernate Validator 5.4 [SPR-14998]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14998](https://jira.spring.io/browse/SPR-14998?redirect=false)** and commented  Hibernate Validator 5.4 beta 1 is available now. Everything looking good so far with our 5.0 build... Let's double-check compatibility against Hibernate Validator 5.4 GA in the Spring Framework 5.0 RC1 timeframe.  ---  **Issue Links:** - #17595 Compatibility with Hibernate Validator 5.2 GA / 5.2.1 - #17763 Compatibility with Hibernate Validator 5.3","closed","type: task,","spring-projects-issues","2016-12-08T23:48:23Z","2019-01-11T19:14:32Z"
"","19550","Move web.client.reactive to web.reactive.client [SPR-14984]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14984](https://jira.spring.io/browse/SPR-14984?redirect=false)** and commented  As discussed, let's consolidate all reactive web entry points into the same module and move the `web.client.reactive` package to `web.reactive.client`, i.e. from the `spring-web` module to the `spring-web-reactive` module. Our new reactive WebSocket client will also live there eventually.  This is also an opportunity to further align the web client with `web.reactive.function`, consolidating `ExchangeFunction`, `ClientRequest` and co into the same `web.reactive.function` package or making them part of a common subpackage arrangement, along the lines of our existing `http.server` and `http.client` packages.  ---  **Affects:** 5.0 M3  **Issue Links:** - #19393 Align Reactive Web Client with web.reactive.function","closed","type: task,","spring-projects-issues","2016-12-06T08:41:40Z","2019-01-11T19:14:52Z"
"","19532","Self reference fallback in 4.3 is not meant to apply to collection elements [SPR-14965]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14965](https://jira.spring.io/browse/SPR-14965?redirect=false)** and commented  Introducing self reference injection in 4.3, the revision of the algorithm accidentally also choses a self reference as a fallback element for an empty collection injection point. Of course, self references were only meant to be used as a direct dependency declaration, not as a collection element. This is also what the documentation and the existing test cases suggest.  A collection of the same type can be used for aggregates, e.g. propagating an event to listeners, with the aggregate also implementing the listener interface itself. This still works fine if there are delegate listener beans in the context but unfortunately fails as of 4.3 when the collection is declared as optional and meant to remain uninjected if no delegates are found, since all of a sudden there is a single-element collection with a self reference to the aggregate... This is a regression that needs to be fixed as of 4.3.5; better late than never.  ---  **Affects:** 4.3.4  **Issue Links:** - #18536 Optional autowire of Map accidentally falls back to unrelated Map - #13096 Support `@Autowired-like` self injection - #16794 `@Autowired` does not work for target bean of type Collection - #19563 Behaviour of field injection for List dependencies that are produced and consumed by the same configuration class has changed in 4.3.5 snapshots  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ac9f92bc228f6eeea6977217a8e916f36cb1e8a, https://github.com/spring-projects/spring-framework/commit/ac5933a7acc343f3ba77e6a7a3a667ca66838a1a","closed","in: core,","spring-projects-issues","2016-11-30T20:16:28Z","2019-01-13T05:18:40Z"
"","19507","Support for Jetty 9.4 (and 9.3.15+) [SPR-14940]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14940](https://jira.spring.io/browse/SPR-14940?redirect=false)** and commented  While Jetty 9.4 RC1 worked fine, RC2 seems to have broken HEAD handling (closing the HTTP connection too early for HEAD requests) which makes our `AsyncRestTemplateIntegrationTests` fail.  More importantly, Jetty 9.4 RC3 breaks our `JettyRequestUpgradeStrategy` now which turns this ticket into more than just a compatibility target. The underlying `WebSocketServerFactory` configuration changes seem to have been backported to Jetty 9.3.15 (even if not released yet), so we have to immediately backport them to Spring Framework 4.3.5 as well. That aside, we want Spring Framework 4.3.x to be compatible with Jetty 9.4 going forward in any case.  Due to those `WebSocketServerFactory` changes, we are technically unable to support WebSockets on Jetty 9.0.x any longer (but that branch got phased out in 2013 already). **The support range is Jetty 9.1+ for Spring Framework 4.3.5+ now, and remains at Jetty 9.3+ for Spring Framework 5.0.**  ---  **Issue Links:** - #19594 Release of 4.3.x supporting Jetty 9.4.0.v20161208+ (_**""is duplicated by""**_) - #19426 RestTemplate POST and PUT don't work with Netty4ClientHttpRequestFactory - #18900 Compatibility with Undertow 1.4 - #17731 Support for Jetty 9.3 - #19604 Revisit dependency baseline: Jetty 9.4+, OkHttp 3+  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-11-23T19:37:56Z","2019-01-11T19:18:45Z"
"","19492","Support for Jackson 2.9 [SPR-14925]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14925](https://jira.spring.io/browse/SPR-14925?redirect=false)** and commented  Jackson 2.9 is likely to be available in time for our 5.0 GA: https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9  ---  **Issue Links:** - #19918 Return 5xx/4xx status code and print the reason in logs for CodecException (_**""is depended on by""**_) - #19097 Leverage Jackson non-blocking JSON parsing (and remove netty-buffer dependency) (_**""is depended on by""**_) - #18062 Full support for Jackson 2.7 - #18912 Compatibility with Jackson 2.8 - #20935 Support for Jackson 3 - #20107 Upgrade to Jackson 2.9 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/61a4eaf3cfd3f4d21d9f999415e0907f37d25b6a, https://github.com/spring-projects/spring-framework/commit/9a501fac46a9e4879ba8d72360ad1713169f2d8e, https://github.com/spring-projects/spring-framework/commit/23e35c0e1a98c6c3659b38ae7b79e3f90a790df4, https://github.com/spring-projects/spring-framework/commit/4db2daae5cfee193cb66776b099b2845c91f73e4, https://github.com/spring-projects/spring-framework/commit/9e8bc95dd643f16505f039f4fa7261d82d613303, https://github.com/spring-projects/spring-framework/commit/113f0fb13f08c465f8ae03c893d62a6ef1c4349d, https://github.com/spring-projects/spring-framework/commit/ed8565894a4780716d238a9ae32910020730d0ce","closed","type: enhancement,","spring-projects-issues","2016-11-20T14:00:12Z","2019-01-11T19:19:15Z"
"","19491","Upgrade to JUnit 5.0 M3 [SPR-14924]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14924](https://jira.spring.io/browse/SPR-14924?redirect=false)** and commented  https://github.com/junit-team/junit5/milestone/6  ---  **Issue Links:** - #18151 Introduce support for JUnit 5 in the TestContext framework - #19924 Upgrade to JUnit 5.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2f9a775a8ebd77da5014a402e02377a20640e377","closed","type: task,","spring-projects-issues","2016-11-20T13:52:26Z","2019-01-11T19:19:13Z"
"","19490","Support for JSON Binding API (JSON-B) [SPR-14923]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14923](https://jira.spring.io/browse/SPR-14923?redirect=false)** and commented  The JSON-B specification (part of Java EE 8, building on EE 7's JSON-P processing API) looks straightforward to integrate as an alternative to Jackson and Gson for JSON object binding, analogous to JAXB for XML binding. Let's aim for supporting it in Spring Framework 5, next to Servlet 4.0 and Bean Validation 2.0.  The JSON-B reference implementation - Yasson - originated within the Eclipse Persistence project but recently moved to a standalone home. It will probably be as commonly used as Hibernate Validator for the Bean Validation API, both standalone and as part of all major application servers.  http://json-b.net/ https://jcp.org/en/jsr/detail?id=367  ---  **Issue Links:** - #20149 Use Apache Johnzon 1.1 for JSON-B integration tests (_**""is depended on by""**_) - #19835 Explicit support for JSON parsing/streaming APIs (JSON Processing API, Gson, Jackson) - #17273 Support for Servlet 4.0 API - #18150 Compatibility with JCache 1.1 - #19944 Revise generic type handling in GsonHttpMessageConverter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cf306037b5be019eaf6876e7271902d05854e7e9","closed","type: enhancement,","spring-projects-issues","2016-11-20T12:06:18Z","2019-01-11T19:20:29Z"
"","19472","Upgrade build to Gradle 3.2.1 [SPR-14906]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14906](https://jira.spring.io/browse/SPR-14906?redirect=false)** and commented  Gradle 3.2 is out now...  ---  **Issue Links:** - #19138 Upgrade build to Gradle 3.0 - #19704 Upgrade to Gradle 3.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/04ed5910ba7772682f506f5f82c6f44e6dff5f41, https://github.com/spring-projects/spring-framework/commit/57130b2d10ebc4faafb4de6488bc437787901819  0 votes, 5 watchers","closed","type: task,","spring-projects-issues","2016-11-14T16:24:25Z","2019-01-11T19:20:46Z"
"","19446","Upgrade to Mockito 2.2 [SPR-14880]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14880](https://jira.spring.io/browse/SPR-14880?redirect=false)** and commented  Mockito 1.10 is rather old in the meantime, so let's upgrade our test suite to Mockito 2.2 for Spring Framework 5.0.  ---  **Issue Links:** - #19047 Mis-proxying of Mockito mock and poor diagnostics for type mismatch on proxy injection - #20705 Upgrade to Mockito 2.11","closed","type: task,","spring-projects-issues","2016-11-03T20:10:07Z","2019-01-11T17:25:17Z"
"","19445","ApplicationListenerDetector should ignore non-managed bean instances [SPR-14879]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14879](https://jira.spring.io/browse/SPR-14879?redirect=false)** and commented  As indicated by the Spring Integration team, our `ApplicationListenerDetector` issues a warning not only for non-singleton inner beans but also for bean instances which are simply not managed by the container at all, i.e. not backed by a bean definition but rather created through the `AutowireCapableBeanFactory` interface and externally managed or manually registered as a singleton instance via `registerSingleton`. Let's revise this to only log a warning for actual non-singleton inner bean definitions.  ---  **Issue Links:** - #19349 Inner bean behind BeanFactoryPostProcessor should be able to receive application events  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e83c11667f7174045ed8834a68774ea2481a1ae9, https://github.com/spring-projects/spring-framework/commit/8ae0bd6ea949a6685cada34d4bca92072f511f4b","closed","type: enhancement,","spring-projects-issues","2016-11-03T20:01:33Z","2019-01-11T17:26:35Z"
"","19363","Documentation for InjectionPoint argument on @Bean method [SPR-14797]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14797](https://jira.spring.io/browse/SPR-14797?redirect=false)** and commented  As of 4.3, a factory method may declare an argument of type `InjectionPoint` (or its subclass `DependencyDescriptor`) in order to react to the injection point that triggers the creation of the current instance. We need to cover this in our reference documentation.  ---  **Affects:** 4.3 GA  **Issue Links:** - #18971 InjectionPoint not propagated by AutowiredAnnotationBeanPostProcessor's cached argument resolution - #18605 InjectionPoint/DependencyDescriptor as injectable argument for `@Bean` methods - #18540 Improve core container exception meta-data","closed","in: core,","spring-projects-issues","2016-10-10T18:19:38Z","2019-01-13T05:19:29Z"
"","19250","Consistent *Aware callbacks for TypeFilters, ImportSelectors and ImportBeanDefinitionRegistrars [SPR-14686]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14686](https://jira.spring.io/browse/SPR-14686?redirect=false)** and commented  Spring's configuration class processor provides callbacks for the common `BeanClassLoaderAware`, `BeanFactoryAware`, `EnvironmentAware`, and `ResourceLoaderAware` contracts, as known from the core `BeanFactory` creation algorithm. However, its callback order differs from the core `BeanFactory` for historic reasons: Let's finally align these for 4.3.3, since there are no side effects to expect beyond Boot (which we have immediate CI tests for).  Also, `ComponentScanBeanDefinitionParser` a.k.a. `` does not provide any such callbacks for XML-defined `TypeFilter` class names. Let's close that gap as well.  ---  **Affects:** 4.3.2  **Issue Links:** - #14202 Support Aware interfaces for ImportBeanDefinitionRegistrar - #15160 Support *Aware ImportSelectors - #19248 ConfigurationClassParser does not use ApplicationContext's ResourceLoader for its MetadataReaderFactory - #15231 ImportSelector and ImportBeanDefinitionRegistrar should be able to implement EnvironmentAware - #18581 Allow `@ComponentScan` custom filters to implement *Aware interfaces  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/09a0615df03446147ceee24d6a48d6c9a11445fa, https://github.com/spring-projects/spring-framework/commit/0c2e8a6246348b9ea01131943581235dbff3bf71","closed","type: enhancement,","spring-projects-issues","2016-09-09T15:06:35Z","2019-01-13T05:22:20Z"
"","19211","Out-of-the-box build compatibility with JDK 9 build 136 [SPR-14645]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14645](https://jira.spring.io/browse/SPR-14645?redirect=false)** and commented  The Spring Framework 5.0 M1 build ran on JDK 9 already but required a manual Gradle upgrade. As of 5.0 M2, we're building on Gradle 3.0 out of the box, so our entire framework build can run on JDK 9 out of the box as well. Let's verify our compatibility against the latest JDK 9 snapshot.  ---  **Affects:** 5.0 M1  **Issue Links:** - #17928 Compatibility with merged JDK 9 mainline (_**""depends on""**_) - #19138 Upgrade build to Gradle 3.0 (_**""depends on""**_) - #20245 Compatibility with JDK 9 release candidate","closed","type: task,","spring-projects-issues","2016-08-31T00:05:46Z","2019-01-11T18:08:53Z"
"","19204","CommonsMultipartResolver should explicitly convert FileSizeLimitExceededException next to SizeLimitExceededException [SPR-14638]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14638](https://jira.spring.io/browse/SPR-14638?redirect=false)** and commented  While we added support for `setFileSizeMax` in the form of `setMaxUploadSizePerFile` on `CommonsFileUploadSupport` in Spring 4.2, we did not add corresponding translation of `FileSizeLimitExceededException`. Let's close that gap for 4.2.8 / 4.3.3.  ---  **Affects:** 4.2.7, 4.3.2  **Issue Links:** - #18229 CommonsMultipartResolver.setMaxUploadSizePerFile() does not work if encoding does not match the default encoding - #13932 StandardServletMultipartResolver should support MaxUploadSizeExceededException against common servers - #17792 CommonsMultipartResolver should support setFileSizeMax  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/05f74b42186243e3f90bb87555ff75fa3a29b9ee, https://github.com/spring-projects/spring-framework/commit/e76ed49513670ee338e15b871498385a73183e19, https://github.com/spring-projects/spring-framework/commit/58ffca76c3da0c8af39bbbb569b00ee0bde2546e  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-08-29T13:12:53Z","2019-01-11T18:08:20Z"
"","19196","Protect against getParameterType cursor leak with Oracle 12c JDBC driver [SPR-14629]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14629](https://jira.spring.io/browse/SPR-14629?redirect=false)** and commented  As mentioned in recent comments on #18398, the Oracle 12c JDBC driver has a bug that leads to a cursor leak when `getParameterType` throws an exception. Our #18398 change in Spring Framework 4.2.5 unfortunately reveals that cursor leak, ironically as a side effect of consistent runtime behavior which implies consistent exposure to that leak :-(  Let's consider a `spring.jdbc.getParameterType.ignore` default of `true` for Oracle 12c for the time being.  ---  **Affects:** 4.2.5, 4.3 GA  **Issue Links:** - #14717 NamedParameterJdbcTemplate for ""insert / select"" clause, set NULL value causes JConnect 7 (Sybase) problem - java.io.IOException: JZ0SL: Unsupported SQL type 0. - Affects 3.1.3.RELEASE, works in 3.1.1.RELEASE - #15018 JdbcTemplate cannot set null parameter with Oracle driver - #18764 Regression: Insert statement fails with inconsistent datatypes on Oracle 12c driver - #15726 performancedrop due to repeated JDBC 3.0 getParameterType calls in setNull in StatementCreatorUtils - #18399 Raise JDBC driver feature baseline to JDBC 4.0+ - #18398 Oracle 12c JDBC driver throws inconsistent exception from getParameterType (affecting setNull calls) - #19143 Avoid repeated getParameterType calls for setNull with Oracle 12c driver - #20687 Doc: ParameterMetaData.getParameterType performance on Oracle 12c  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/52447efb97ae584a0242172c4b98a9767dc38e53, https://github.com/spring-projects/spring-framework/commit/2adbfb6d02fded3772e4b987a6815a6231f92c9d  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-08-25T18:28:37Z","2019-01-11T18:09:00Z"
"","19195","Support for RxJava 2 [SPR-14628]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14628](https://jira.spring.io/browse/SPR-14628?redirect=false)** and commented  RxJava 2.0 went RC1 today: https://github.com/ReactiveX/RxJava/releases  Let's evaluate composition adapters for it, possibly shipping them in our 5.0 M2 in September already.  ---  **Affects:** 5.0 M1  **Issue Links:** - #18731 Composition adapters for Reactive Streams - #20056 Upgrade to RxJava 1.3 & 2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/48d67a245b0d7742a6a2bf0b5e801c5e00bc91bf","closed","type: enhancement,","spring-projects-issues","2016-08-25T11:25:35Z","2019-01-11T18:09:08Z"
"","19193","GenericApplicationContext should pick up ClassLoader from custom ResourceLoader [SPR-14626]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14626](https://jira.spring.io/browse/SPR-14626?redirect=false)** and commented  `GenericApplicationContext` can be configured with a custom `ClassLoader` as well as with a custom `ResourceLoader`. When only configured with a custom `ResourceLoader`, that loader's `getClassLoader()` is not taken into account. We should pick up that `ClassLoader` over `GenericApplicationContext`'s default if not explicitly overridden through a `setClassLoader` call.  ---  **Affects:** 4.3.2  **Issue Links:** - #19174 AnnotationConfigApplicationContext does not consistently apply custom ClassLoader - [SWF-1713](https://jira.spring.io/browse/SWF-1713) ClassNotFoundException (backwards compatibility issue)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/405e74b6ae3b1863d9809f199b74b083e5b150fe, https://github.com/spring-projects/spring-framework/commit/74bf659c566508545981e97a4ce5cbba7984bdbb","closed","type: enhancement,","spring-projects-issues","2016-08-24T19:15:49Z","2019-01-11T18:10:01Z"
"","19183","Missing MessageMethodArgumentResolver default constructor [SPR-14616]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14616](https://jira.spring.io/browse/SPR-14616?redirect=false)** and commented  As raised in https://github.com/spring-projects/spring-kafka/issues/172, `MessageMethodArgumentResolver` has a breaking change in 4.3 in that its default constructor got substituted with one accepting a `MessageConverter`. Let's reintroduce a default constructor side by side for backwards compatibility.  ---  **Affects:** 4.3 GA  **Issue Links:** - #17878 `@MessageMapping` should support generically typed Message argument with converted payload  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7135bc2dc24e5198f77e21c407c6882ce63d6bfb, https://github.com/spring-projects/spring-framework/commit/c4fff6db1b5d35b65f01229fd057daab3bd730e2","closed","type: bug,","spring-projects-issues","2016-08-23T10:28:22Z","2019-01-13T05:22:40Z"
"","19180","CommonsMultipartFile.getOriginalFilename() should be able to preserve header-specified filename as-is [SPR-14613]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14613](https://jira.spring.io/browse/SPR-14613?redirect=false)** and commented  `getOriginalFilename()` explicitly strips path information from a Commons-FileUpload-given filename in `CommonsMultipartFile` but just exposes the header-specified filename as-is in `StandardMultipartFile`.  Let's revisit what's actually necessary in 2016 and whether the behavior needs to be more consistent here.  ---  **Issue Links:** - #18237 CommonsMultipartFile.getOriginalFilename() does not strip file path properly - #13932 StandardServletMultipartResolver should support MaxUploadSizeExceededException against common servers - #19822 StandardMultipartFile.transferTo should fall back to manual copy if Part.write doesn't support absolute locations (e.g. on Jetty)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5115c61b036c55cda29423780395f7a1fef93f33, https://github.com/spring-projects/spring-framework/commit/aa29495d1d00d633875ed1872622fe03ed4dc600  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2016-08-22T20:00:07Z","2019-01-11T18:10:47Z"
"","19164","NoSuchBeanDefinitionException message shows internal array class names [SPR-14595]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14595](https://jira.spring.io/browse/SPR-14595?redirect=false)** and commented  Since 4.3's revision of the collection/array matching algorithm, a `NoSuchBeanDefinitionException` may get thrown with a undesirable reference to internal array class names instead of a proper `ClassUtils.getQualifiedName` representation.  Also, the primary type may get mentioned twice in the exception message which we should streamline towards a simpler message.  ---  **Affects:** 4.3.2, 5.0 M1  **Issue Links:** - #12570 Allow for normal bean wiring semantics for types assignable to Map - #16794 `@Autowired` does not work for target bean of type Collection  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/022b013563b55dd03c88c0d3a200bec90c7ac58c, https://github.com/spring-projects/spring-framework/commit/7b11fa18a19d903992ad1d153ed59f3d2feab7f5","closed","type: bug,","spring-projects-issues","2016-08-17T15:06:40Z","2019-01-13T05:22:49Z"
"","19142","Compatibility with WildFly 10.1 [SPR-14573]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14573](https://jira.spring.io/browse/SPR-14573?redirect=false)** and commented  WildFly 10.1 is currently in RC, shipping with plenty of component upgrades. There are no issues to be expected but let's nevertheless do some integration testing in time for our 4.3.3 release.  ---  **Issue Links:** - #18056 Compatibility with WildFly 10","closed","type: task,","spring-projects-issues","2016-08-09T12:22:39Z","2019-01-11T18:03:55Z"
"","19139","Upgrade 4.3.x build to Gradle 2.14.x [SPR-14570]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14570](https://jira.spring.io/browse/SPR-14570?redirect=false)** and commented  Following on our upgrade to Gradle 2.14.1 for our 5.0 M1, let's upgrade the 4.3.x line to Gradle 2.14.x as well, possibly for 4.3.3 in September already.  ---  **Issue Links:** - #18934 Upgrade build to Gradle 2.14.1 (_**""depends on""**_) - #19138 Upgrade build to Gradle 3.0  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/af53f3d6cf7285e53f135dd3930f242f806f8cec","closed","type: task,","spring-projects-issues","2016-08-08T21:50:59Z","2019-01-11T18:03:51Z"
"","19138","Upgrade build to Gradle 3.0 [SPR-14569]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14569](https://jira.spring.io/browse/SPR-14569?redirect=false)** and commented  Gradle 3.0 is in RC2 now and very likely generally available in time for our 5.0 M2. Let's upgrade to it for a smoother JDK 9 experience, literally just requiring a `JAVA_HOME` change then.  ---  **Issue Links:** - #17778 Upgrade core framework build to JDK 11 (_**""is depended on by""**_) - #19211 Out-of-the-box build compatibility with JDK 9 build 136 (_**""is depended on by""**_) - #19157 Upgrade build to Gradle 3.0 (_**""is duplicated by""**_) - #17928 Compatibility with merged JDK 9 mainline - #18934 Upgrade build to Gradle 2.14.1 - #19139 Upgrade 4.3.x build to Gradle 2.14.x - #19472 Upgrade build to Gradle 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c399b4b3ad94c673d99caeff43f0dc8a6c66d9d2, https://github.com/spring-projects/spring-framework/commit/e6353f0ec7d92e4174044be05ac13b14732229b2, https://github.com/spring-projects/spring-framework/commit/c64cdcc47f2f49b2ed630eaa8026fde3c62130e2, https://github.com/spring-projects/spring-framework/commit/669fd8085478d96e7d2b7c8b8a0bd97f43cafe16, https://github.com/spring-projects/spring-framework/commit/9629afbcfd9c315b74297460a465c1433a721fe2  0 votes, 5 watchers","closed","type: task,","spring-projects-issues","2016-08-08T21:38:51Z","2019-01-11T18:05:21Z"
"","19087","Avoid JNDI property lookup attempts for invalid JNDI keys [SPR-14518]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14518](https://jira.spring.io/browse/SPR-14518?redirect=false)** and commented  As indicated by https://github.com/spring-projects/spring-boot/issues/6460, when running in a Servlet environment, Spring tries to resolve property names in JNDI (even if they are typically not actually found there). The performance impact of this has been raised in #18598 already, leading to the introduction of the ""spring.jndi.ignore"" property in 4.3. However, even with that option around, it still seems wasteful to try a JNDI lookup for property keys which are clearly invalid in JNDI's naming scheme. We should try to bypass JNDI lookups for such keys by default.  ---  **Affects:** 4.2.7, 4.3.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/328e04f16732cc83be882670fec42421b88aa8e4, https://github.com/spring-projects/spring-framework/commit/7021a4be4474714ebf13f98f0b8a0e9873f4c37b, https://github.com/spring-projects/spring-framework/commit/4e94e848c901a8e2e035526e4ff089b334d5cf60  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-07-27T19:39:39Z","2019-01-11T17:39:47Z"
"","19084","Consider target-class proxy mode by default [SPR-14515]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14515](https://jira.spring.io/browse/SPR-14515?redirect=false)** and commented  Following up on #19047, we should once again consider changing the default proxy mode to target-class (CGLIB)...  ---  **Affects:** 5.0 M1  **Issue Links:** - #19047 Mis-proxying of Mockito mock and poor diagnostics for type mismatch on proxy injection - #8346 Add support for mixed, fine-grained JDK- and CGLIB-based proxying - #18894 CGLIB proxies should still consider `@Transactional` annotations on interface methods","open","in: core,","spring-projects-issues","2016-07-26T14:03:35Z","2019-01-13T05:23:11Z"
"","19083","Upgrade to ASM 6.0 [SPR-14514]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14514](https://jira.spring.io/browse/SPR-14514?redirect=false)** and commented  For Spring Framework 5.0 milestones, we keep using our variant of ASM 5.1, leniently accepting the 1.9 bytecode level but not having actual support for it. Once ASM 6.0 matures beyond its current alpha, we should upgrade our fork to it.  ---  **Affects:** 5.0 M1  **Reference URL:** http://websvn.ow2.org/listing.php?repname=asm&path=%2Fbranches%2FASM_6_FUTURE%2Fasm%2Fsrc%2Forg%2Fobjectweb%2Fasm%2F  **Issue Links:** - #18609 Upgrade to ASM 5.1 - #19637 Upgrade to ASM 5.2 - #20226 Upgrade to Gradle 4.1 for clean JDK 9 build compatibility - #18941 Compatibility with JDK 9 GA - #20944 Upgrade to ASM 6.2 - #20951 Upgrade to ASM 6.0 level (for CGLIB 3.2.6) - #21800 Upgrade to ASM 7.0  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8a2262e21007438731cb8e9c322935d7b8369e5e, https://github.com/spring-projects/spring-framework/commit/185c2bf5b6b114788c20d789a113455da3ad57fe  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2016-07-26T13:44:57Z","2019-01-11T17:40:56Z"
"","19081","Revisit Commons Logging vs java.util.logging vs SLF4J vs Log4j 2 [SPR-14512]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14512](https://jira.spring.io/browse/SPR-14512?redirect=false)** and commented  Following up on recent discussions about the good old Commons Logging vs SLF4J conflict (a manual exclusion needed in the POM etc) and the recent attractiveness of Log4J 2's logging API:  Let's revisit our logging API arrangement. A straight migration to SLF4J doesn't seem to be a worthwhile option from a 2017 perspective, in particular since Log4J 2 actually has a nicer API. However, a straight migration to Log4J 2 isn't ideal either since so many people use SLF4J at the moment. And of course, none of those ""simple"" migration options addresses the problem of backwards compatibility with Spring extensions which happen to use our exposed protected logger reference... which is a hard Commons Logging reference in pre-compiled binaries.  Beyond a straight migration, we may also introduce our own logging abstraction (sigh). Alternatively, we could ship a variant of the Commons Logging API in our own `spring-core.jar`, controlling the target binding through our own adaptive setup logic: This is essentially what the JCL-over-SLF4J adapter does, and it seems to work fine there. As long as we're able to bind to `java.util.logging`, SLF4J and Log4J 2 without too much hassle (ideally through autodetection in the classpath), it might be a sweet compromise for the backwards compatibility issue.  Of course, it would also be nice to have a richer logging API available for our internal purposes. Log4J 2 looks quite attractive there but we might not want to require it at runtime, in particular for SLF4J users or `java.util.logging` users in application server environments. We could also use a facade of our own internally or augment our variant of Commons Logging accordingly.  ---  **Affects:** 5.0 M1  **Issue Links:** - #12774 Revisit subsystem-oriented logging - #11273 Migrate logger from commons-logging to slf4j (remove commons-logging dependency) - [DATACMNS-1040](https://jira.spring.io/browse/DATACMNS-1040) Remove exclusion for Commons Logging - #20022 spring-core source jar contains two copies of source code - #10000 Consider migrating from Commons-Logging to SLF4j - #20774 commons-logging LogFactory and String arguments - #20014 Fix compilation warning on JDK 9: use deprecated method LogRecord.setMillis - #20611 Remove duplicate commons logging classes from spring-jcl - #22118 spring-jcl routes logging inefficiently against SLF4J with log4j-to-slf4j setup  0 votes, 11 watchers","closed","in: core,","spring-projects-issues","2016-07-26T09:29:58Z","2019-01-11T17:40:39Z"
"","19074","Deterministic and JVM-independent @Bean registration order within Class-reflected configuration classes [SPR-14505]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14505](https://jira.spring.io/browse/SPR-14505?redirect=false)** and commented  As noted in #19073, the JVM's `Class.getDeclaredMethods()` may return the methods in any order... not just dependent on the bytecode but even dependent on the particular JVM run, which means it might differ on re-execution of the very same classes on the very same JVM.  As a consequence, we should consider some deterministic order that we can enforce within the framework, e.g. sorting the `@Bean` methods within each configuration class before registering bean definitions for them.  However, we have two modes of registration: ASM-based, automatically applied for bean definitions registered with class name (and therefore also for classpath scanning); and reflection-based, automatically applied for bean definitions registered with a pre-resolved `Class`. ASM-based parsing follows source-code declaration order, while reflection-based parsing follows the `Class.getDeclaredMethods()` order of the particular JVM. While the latter would benefit from a custom deterministic order that we're enforcing, that'd be a step backwards for our ASM mode since source-code declaration order is arguably ideal there.  ---  **Affects:** 4.3.1  **Issue Links:** - #19073 Non-helpful NoSuchBeanDefinitionException rather than BeanNotOfRequiredTypeException due to creation order - #19527 Consistent autowiring behavior for specifically typed injection points against loosely typed `@Bean` methods - #19831 Doc: Consistent `@Profile` declarations on overloaded `@Bean` methods - #19635 Track bean dependencies for calls between `@Bean` methods within `@Configuration` classes - #19947 Support for `@Order` on nested configuration classes","closed","type: enhancement,","spring-projects-issues","2016-07-21T21:18:41Z","2019-01-13T05:24:02Z"
"","19070","DataSource adapters should expose setCatalog/setSchema next to setUsername/setPassword [SPR-14501]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14501](https://jira.spring.io/browse/SPR-14501?redirect=false)** and commented  As of JDBC 4.1 in JDK 7, `Connection` supports a `setSchema` method, avoiding the use of connection properties for that purpose. Let's expose it on our `UserCredentialsDataSourceAdapter` and `Driver*DataSource` classes next to the existing `setUsername`/`setPassword` methods there, also adding `setCatalog` at that opportunity.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/610bdf1cc3aa8fdcb77347ebd33a11c83eb183d3, https://github.com/spring-projects/spring-framework/commit/77f22e9674e8e60ab281b6dc91defa5b5e236da8","closed","type: enhancement,","spring-projects-issues","2016-07-21T12:00:23Z","2016-07-28T09:16:20Z"
"","19061","Revise encoding steps towards use of JDK Charset and StandardCharsets [SPR-14492]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14492](https://jira.spring.io/browse/SPR-14492?redirect=false)** and commented  The framework codebase traditionally relies on encoding name Strings, in particular in code that predates JDK 1.4 where the NIO `Charset` class got introduced. As of JDK 7, there is even a convenient `StandardCharsets` class with constants for all common encodings. Let's consistently use these modern-day JDK facilities as of Spring Framework 5.0, in both our main sources and our test sources.  ---  **Issue Links:** - #19057 Various performance improvements for web request processing  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2e4a7480fc74f08aa23fb3a069dc2b53645f6a9d, https://github.com/spring-projects/spring-framework/commit/99be15f58b537d235d521e62cc3ad5368cfeff36, https://github.com/spring-projects/spring-framework/commit/d21b6e596fd54381c8bbbb5cf80d28d302faf6a6","closed","type: enhancement,","spring-projects-issues","2016-07-19T20:48:02Z","2019-01-11T16:20:02Z"
"","19058","GenericSqlQuery configured with RowMapper instance [SPR-14489]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14489](https://jira.spring.io/browse/SPR-14489?redirect=false)** and commented  Historically, `GenericSqlQuery` just supports configuration with a `RowMapper Class` but not with a `RowMapper` instance. That aside, it lacks javadoc.   ---  **Affects:** 4.3.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7287baefeb6ba9d43acc65034f0553b52990c557, https://github.com/spring-projects/spring-framework/commit/3663aa675ad79e0a09e65d3f264f0529a6016078","closed","type: enhancement,","spring-projects-issues","2016-07-19T16:43:26Z","2016-07-28T09:16:21Z"
"","19056","SerializableTypeWrapper should reobtain type accessors from declaring interface [SPR-14487]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14487](https://jira.spring.io/browse/SPR-14487?redirect=false)** and commented  `SerializableTypeWrapper` restores type accessor methods on deserialization. It does so against the concrete type implementation at this point which breaks on JDK 9 due to an enforced visibility barrier. Resolving the method against the declaring interface is more appropriate in any case and also solves the JDK 9 issue.  ---  **Affects:** 4.3.1  **Issue Links:** - #17928 Compatibility with merged JDK 9 mainline","closed","type: enhancement,","spring-projects-issues","2016-07-19T11:29:26Z","2019-01-11T16:21:26Z"
"","19055","Avoid deprecated Class.newInstance in favor of constructor-based instantiation [SPR-14486]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14486](https://jira.spring.io/browse/SPR-14486?redirect=false)** and commented  As of JDK 9, `Class.newInstance()` is deprecated in favor of `Constructor.newInstance()`, with the latter throwing `InvocationTargetException` instead of simply propagating user exceptions to the caller. Let's use this as an opportunity to revise our remaining use of `Class.newInstance()`, in particular our remaining use of `BeanUtils.instantiate(Class)` which is based on it (in contrast to `BeanUtils.instantiateClass(Class` which explicitly uses the default constructor).  Along the same line, `Proxy.getProxyClass` and `XMLReaderFactory.createXMLReader` are in JDK 9 now as well. While we have no immediate replacement for those yet, we seem to be able to keep using them under our conditions (within the same `ClassLoader`). Those spots need to be marked as `@SuppressWarnings(""deprecated"")` though in order for our build to work on JDK 9 (with `-Werror`).  ---  **Issue Links:** - #17928 Compatibility with merged JDK 9 mainline","closed","type: enhancement,","spring-projects-issues","2016-07-19T11:23:57Z","2019-01-11T16:21:10Z"
"","19054","Drop mock.staticmock package from spring-aspects [SPR-14485]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14485](https://jira.spring.io/browse/SPR-14485?redirect=false)** and commented  `AnnotationDrivenStaticEntityMockingControl` turned into a source of build pain lately, in particular in IDE setup but now also in a JDK 9 based build. Since this is rather esoteric from a traditional Spring perspective, we'll remove the entire `mock.staticmock` package in 5.0 (marking it as deprecated in 4.3.2) and leave it up to projects shipping those aspecs on their own (e.g. Roo).  ---  **Issue Links:** - #14648 Allow ""Any"" arguments for AbstractMethodMockingControl expectations (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3253ca5e21aafd75ba2ce28741757886065544b, https://github.com/spring-projects/spring-framework/commit/90752f9d87d4231df6768dd70ed6ae3d560fb0e9","closed","type: enhancement,","spring-projects-issues","2016-07-19T11:02:16Z","2019-01-11T16:21:15Z"
"","19053","Resource.isFile() and JAF MediaTypeFactory [SPR-14484]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14484](https://jira.spring.io/browse/SPR-14484?redirect=false)** and commented  Two common delegates have been in demand for a while and are now strongly suggested by our reactive efforts:  * A `Resource.isFile()` indicator for whether `Resource.getFile()` would succeed. This can make use of default methods in the interface, like `isReadable()` and `isOpen()`.  * A `MediaTypeFactory` in `org.springframework.http`, resolving content type values to `MediaType` instances via the Java Activation Framework (remaining an implementation detail).  ---  **Issue Links:** - #19474 MediaTypeFactory should come with its own complete mime.types file  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8bb34bc962ae1b6b297bba8f8109e1af20c40404","closed","type: enhancement,","spring-projects-issues","2016-07-19T10:56:55Z","2019-01-11T16:21:03Z"
"","19034","Ineffective synchronization in StandardTypeConverter constructor [SPR-14465]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14465](https://jira.spring.io/browse/SPR-14465?redirect=false)** and commented  `StandardTypeConverter`'s default constructor uses `synchronized (this)` for initializing a shared static `DefaultConversionService`. However, in a constructor, synchronization on `this` is effectively a no-op. Let's rather simply use a `volatile` variable there.  ---  **Affects:** 3.2.17, 4.2.7, 4.3.1  **Issue Links:** - #19515 Shared DefaultConversionService instance e.g. for BeanPropertyRowMapper  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0065a160cc8316fec43adb8da80078d1ff3be242, https://github.com/spring-projects/spring-framework/commit/97d73eb70c46865f877c146978d96d7a380d2483, https://github.com/spring-projects/spring-framework/commit/6d91d54fc9e93bbecbfb2778cf4d1fed1a39b7f6, https://github.com/spring-projects/spring-framework/commit/cb64dd15838ee073631e145b21d3c9f78b35dcb8  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","in: core,","spring-projects-issues","2016-07-14T18:24:45Z","2019-01-11T16:23:32Z"
"","19009","MethodParameter should not be equal to SynthesizingMethodParameter [SPR-14438]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14438](https://jira.spring.io/browse/SPR-14438?redirect=false)** and commented  `MethodParameter.equals` historically just checks `instanceof MethodParameter`. With the introduction of `SynthesizingMethodParameter` in 4.2, we need to insist on the same class there: Otherwise, a `MethodParameter` would be considered as equal to a `SynthesizingMethodParameter` for the same target declaration.  ---  **Affects:** 4.2.7, 4.3.1  **Issue Links:** - #18627 Introduce support for creating a MethodParameter from a Java 8 Parameter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/39e3f2ebf6690b72b7a8af852a35df6ff6229515, https://github.com/spring-projects/spring-framework/commit/dd65689e0a4fd2724ae1f701154417c79613ec61","closed","status: declined,","spring-projects-issues","2016-07-06T22:02:46Z","2019-01-12T16:34:14Z"
"","19003","Core Spring interfaces declared with Java 8 default methods and @FunctionalInterface markers [SPR-14432]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14432](https://jira.spring.io/browse/SPR-14432?redirect=false)** and commented  We have many multi-method interfaces in the core framework codebase, a few of which are obvious candidates for Java 8 default methods. We should also consistently mark user-level single-method interfaces as `@FunctionalInterface`. As a special consideration, even a multi-method interface can be a `@FunctionalInterface` if only one method is **not** declared as `default`..  ---  **Issue Links:** - #17780 Upgrade framework codebase to JDK 8+","closed","type: enhancement,","spring-projects-issues","2016-07-05T22:06:31Z","2019-01-11T16:26:32Z"
"","19001","Broadly remove deprecated core classes and methods [SPR-14430]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14430](https://jira.spring.io/browse/SPR-14430?redirect=false)** and commented  5.0 is once again an opportunity to broadly remove deprecated classes and methods from our core API. We're still going to leave a few exceptions where it is about feature guidance but not where it is just about outdated API calls.  ---  **Issue Links:** - #19000 Drop deprecated dependencies on Log4j, JRuby, JExcel, Burlap, Commons Pool/DBCP","closed","","spring-projects-issues","2016-07-05T13:51:58Z","2019-01-11T16:26:23Z"
"","19000","Drop deprecated dependencies on Log4j, JRuby, JExcel, Burlap, Commons Pool/DBCP [SPR-14429]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14429](https://jira.spring.io/browse/SPR-14429?redirect=false)** and commented  As of 5.0, we're broadly removing deprecated dependencies such as Log4j, JRuby, JExcel, Burlap, Commons Pool/DBCP and also outdated support classes for Oracle, GlassFish, JBoss.  ---  **Issue Links:** - #19002 Introduce log4j 2 for Spring's test suite - #19001 Broadly remove deprecated core classes and methods","closed","type: task,","spring-projects-issues","2016-07-05T13:43:58Z","2019-01-11T16:26:09Z"
"","18997","Drop native OpenJPA support [SPR-14426]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14426](https://jira.spring.io/browse/SPR-14426?redirect=false)** and commented  OpenJPA is barely maintained these days and has not caught up with JPA 2.1 in three years (!) ... Even TomEE 7 - as the sole remaining OpenJPA stakeholder - recently went GA without updating OpenJPA either, recommending EclipseLink along the lines of WebSphere 8.5/9.0 instead.  Since the latest OpenJPA 2.4.1 still causes issues in a Java 8 based build, in particular with its Java 6 limited annotation processor, let's remove our dedicated OpenJPA support right away. If it ever gets updated to JPA 2.1 (which is unlikely), it will still work as a standard JPA provider.  ---  **Issue Links:** - #20584 OpenJpaVendorAdapter missing from spring-orm - #18060 Upgrade to JPA 2.1+ and Bean Validation 1.1+","closed","type: task,","spring-projects-issues","2016-07-04T16:21:07Z","2019-01-11T16:27:38Z"
"","18995","@MessageExceptionHandler should match cause as well (analogous to @ExceptionHandler) [SPR-14424]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14424](https://jira.spring.io/browse/SPR-14424?redirect=false)** and commented  As of 4.3, `@ExceptionHandler` matches against cause types as well (#18863). We missed to revise `@MessageExceptionHandler` the same way; let's close that gap for 4.3.1.  ---  **Affects:** 4.3 GA  **Issue Links:** - #18863 `@ExceptionHandler` should match cause as well (e.g. for exception thrown from argument formatter) - #21451 AbstractMethodMessageHandler does not rethrow Errors  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e5de7d5455a6fbd750504daa3a8f605fa506fa65","closed","type: enhancement,","spring-projects-issues","2016-07-02T09:04:34Z","2019-01-13T05:24:18Z"
"","18993","Defensively access deprecated AbstractHttpClient class from Apache HttpComponents [SPR-14422]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14422](https://jira.spring.io/browse/SPR-14422?redirect=false)** and commented  During an upgrade attempt to HttpAsyncClient 4.1.2, it turns out that - under certain constellations - we get build warnings for `AbstractHttpClient`'s use of `@GuardedBy`. Not diving too deep there, the root of our problem is that we're still compiling against the long-deprecated `AbstractHttpClient` class for legacy checks in `HttpComponentsClientHttpRequestFactory` and `HttpComponentsHttpInvokerRequestExecutor`. Since that class may go away at any time in a future HttpClient release, let's reflectively access it instead and therefore get rid of the build warnings as well as not insisting on its presence at runtime anymore. We're just using it for a legacy property check anyway which we'll remove in 5.0 for good.  ---  **Affects:** 4.3 GA  **Issue Links:** - #16068 RestTemplate's connection/read timeout settings not applied when using Apache HttpClient - #17716 HttpComponentsAsyncClientHttpRequestFactory overrides default request config of httpclient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/447835465fe209d00b9cbb309f32ef40cc71d6ba, https://github.com/spring-projects/spring-framework/commit/1c73664c4019eb11855ca92faa13cc71632950a0","closed","type: enhancement,","spring-projects-issues","2016-07-01T11:50:53Z","2019-01-11T16:27:19Z"
"","18991","Add missing package-info files for common packages [SPR-14420]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14420](https://jira.spring.io/browse/SPR-14420?redirect=false)** and commented  Several packages are missing `package-info.java` declarations and therefore do not show package-level information in our generated javadocs. Aside from a couple of new ones in 4.3, we're also missing package javadoc for several other packages.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/080dcad218e2ecc3646e27ced0e42bc1d09def01, https://github.com/spring-projects/spring-framework/commit/833ed7168e04149486fcc31d3948b7376ba8ced1, https://github.com/spring-projects/spring-framework/commit/66ec1c1618ae70bdd1a5ad24ef1d1c294043f9eb  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","type: task,","spring-projects-issues","2016-06-30T19:20:57Z","2016-07-04T10:17:10Z"
"","18919","SpringHandlerInstantiator should support all HandlerInstantiator-provided factory methods [SPR-14347]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14347](https://jira.spring.io/browse/SPR-14347?redirect=false)** and commented  Since we're requiring Jackson 2.6+ as of Spring 4.3, we should finally override all of Jackson's factory methods in `HandlerInstantiator`, including non-abstract ones and recently introduced ones from Jackson 2.4 and 2.5: for `ValueInstantiator`, `ObjectIdGenerator`, `ObjectIdResolver`, `PropertyNamingStrategy`, `Converter`, `VirtualBeanPropertyWriter`.  ---  **Issue Links:** - #15394 Spring dependency injection for Jackson serializers - #18062 Full support for Jackson 2.7 - #17654 Require Jackson 2.6+, FreeMarker 2.3.21+, XStream 1.4.5+  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1dfc0ffd437ad5df791780cc8e9fc34b494011bb","closed","type: enhancement,","spring-projects-issues","2016-06-09T14:50:30Z","2019-01-11T16:05:18Z"
"","18916","Deprecate OkHttp 2.x support [SPR-14344]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14344](https://jira.spring.io/browse/SPR-14344?redirect=false)** and commented  The current OkHttp 3.3 supersedes OkHttp 2.x in every respect.  ---  **Issue Links:** - #17492 OkHttp implementations of ClientHttpRequestFactory / AsyncClientHttpRequestFactory - #18596 Support for OkHttp 3 - #19604 Revisit dependency baseline: Jetty 9.4+, OkHttp 3+  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ccf791b63fa93ffc1c6582080e05873ebc8aad13","closed","type: task,","spring-projects-issues","2016-06-08T13:25:52Z","2019-01-11T16:05:12Z"
"","18912","Compatibility with Jackson 2.8 [SPR-14340]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14340](https://jira.spring.io/browse/SPR-14340?redirect=false)** and commented  Jackson 2.8 RC1 is available now. Let's make sure that we're fully compatible with it for our 4.3 GA.  ---  **Issue Links:** - #18062 Full support for Jackson 2.7 - #18596 Support for OkHttp 3 - #18715 Compatibility with Netty 4.1 - #18900 Compatibility with Undertow 1.4 - #19492 Support for Jackson 2.9","closed","type: task,","spring-projects-issues","2016-06-08T07:12:42Z","2019-01-11T16:04:46Z"
"","18909","Jackson2ObjectMapperBuilder/FactoryBean should accept deserializers by handled type as well [SPR-14337]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14337](https://jira.spring.io/browse/SPR-14337?redirect=false)** and commented  `Jackson2ObjectMapperBuilder` and `Jackson2ObjectMapperFactoryBean` allow for registering serializers by their declared handled type but not deserializers. Let's close that gap for 4.3, as raised here: https://github.com/spring-projects/spring-framework/pull/1074  ---  **Issue Links:** - #18547 Support JacksonXmlModule.setDefaultUseWrapper  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c412eabb00330418b286f33885fe794b1962dcf9","closed","type: enhancement,","spring-projects-issues","2016-06-07T10:29:47Z","2019-01-11T16:07:19Z"
"","18900","Compatibility with Undertow 1.4 [SPR-14328]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14328](https://jira.spring.io/browse/SPR-14328?redirect=false)** and commented  Undertow 1.4 Beta 1 got released today (along with 1.3.23). Let's do some compatibility testing against it for our 4.3 GA already since their 1.4 RC1 doesn't seem to be far away, whereas Undertow 2.0 (tracked by #18694) proper won't be happening before 2017.  ---  **Issue Links:** - #18715 Compatibility with Netty 4.1 - #18171 Make use of native doUpgrade operation in Undertow 1.3.5+ / 1.4 - #18694 Initial compatibility with Undertow 2.0 - #18912 Compatibility with Jackson 2.8 - #21015 Upgrade framework build to Tomcat 9.0 and Undertow 2.0 - #19507 Support for Jetty 9.4 (and 9.3.15+)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d7320f41c0f5d08d641fac2ba4711ee3c218d4e3, https://github.com/spring-projects/spring-framework/commit/0de85e3a7355a0884c124e74af3ca673fb274ffa, https://github.com/spring-projects/spring-framework/commit/0a5e5776c1fd2c6e4d2a1ec5ed5085a6980f33fc, https://github.com/spring-projects/spring-framework/commit/8fc84e2d6fd31257873c47b6be1c54ac630f123a, https://github.com/spring-projects/spring-framework/commit/79f3cf326350238139bed103b3088ce136df09d3, https://github.com/spring-projects/spring-framework/commit/12d373659a167086625d2659a7bd6b331f5bc268","closed","type: task,","spring-projects-issues","2016-06-03T08:26:34Z","2019-01-11T16:08:37Z"
"","18899","Support for Hibernate ORM 5.2 [SPR-14327]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14327](https://jira.spring.io/browse/SPR-14327?redirect=false)** and commented  Hibernate ORM 5.2 got released just in time for Spring Framework 4.3. Let's do everything we can to support it right away, in particular upgrading our `spring-orm-hibernate5` build to 5.2 while retaining compatbility with 5.0 and 5.1.  ---  **Issue Links:** - #18906 Add support for Hibernate 5.2 (_**""is duplicated by""**_) - #18059 Compatibility with Hibernate ORM 5.1 - #19897 Hibernate Envers listeners fail because EntityManager is closed too early when using JPA/JTA/Hibernate 5.2.8/Envers - #18937 NoSuchMethodError for SessionFactoryImplementor.getProperties() with Hibernate 5.1 - #18966 JDBC Connection to reset not identical to originally prepared Connection with Hibernate 5.2 - #18996 HibernateTemplate not binary-compatible with Hibernate 5.0/5.1's Query type - #20850 Support for Hibernate ORM 5.3 - #12206 findDefaultEntityManagerFactory should consider EMF bean's primary flag - #19024 Hibernate5 LocalSessionFactoryBean does not translate javax.persistence exceptions - #19577 Scoped EntityManager bean cannot get unwrapped to Session (with Hibernate 5.2)  0 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2016-06-02T20:32:16Z","2019-01-11T16:08:15Z"
"","18895","Consistent Error handling in MessageChannel implementations [SPR-14323]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14323](https://jira.spring.io/browse/SPR-14323?redirect=false)** and commented  In contrast to `AbstractMessageChannel`, our `ExecutorSubscribableChannel` does not consistently wrap handler-thrown `Errors` in a `MessageDeliveryException`: It propagates the latter to `ExecutorChannelInterceptors` but rethrows the plain `Error`. Let's align this for 4.3.  ---  **Affects:** 4.2.6, 4.3 RC2  **Issue Links:** - #18901 After-completion callback not triggered for custom Throwable subclass  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-06-01T09:34:50Z","2019-01-11T16:07:49Z"
"","18864","Upgrade to Objenesis 2.4 [SPR-14292]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14292](https://jira.spring.io/browse/SPR-14292?redirect=false)** and commented  Objenesis 2.3 was released in May, superseded by Objenesis 2.4 two weeks later. Let's pick up the latest for Spring Framework 4.3 GA.  ---  **Issue Links:** - #17819 Upgrade to Objenesis 2.2 - #18609 Upgrade to ASM 5.1 - #19712 Upgrade to Objenesis 2.5","closed","type: task,","spring-projects-issues","2016-05-19T23:53:56Z","2019-01-11T17:02:09Z"
"","18863","@ExceptionHandler should match cause as well (e.g. for exception thrown from argument formatter) [SPR-14291]","**[Juan Carlos García del Canto](https://jira.spring.io/secure/ViewProfile.jspa?name=jcgarcia)** opened **[SPR-14291](https://jira.spring.io/browse/SPR-14291?redirect=false)** and commented  The following problem is related with [this](http://stackoverflow.com/questions/37322182/exceptionhandler-doesnt-catch-exceptions-being-thrown-from-spring-formatters) StackOverFlow question.  I have a controller that contains a show method to display info about the provided entity.  ``` @Controller @RequestMapping(""/owners"") public class OwnersController {        @RequestMapping(value = ""/{owner}"", method = RequestMethod.GET,     	      produces = MediaType.TEXT_HTML_VALUE)     public String show(@PathVariable Owner owner, Model model) {         // Return view         return ""owners/show"";     } } ```  To invoke this operation I use http://localhost:8080/owners/1 URL. As you could see, I provide Owner identifier 1.  To be able to convert identifier 1 to a valid Owner element is necessary to define an Spring Formatter and register it on _addFormatters_ method from _WebMvcConfigurerAdapter_.  I have the following _OwnerFormatter_:  ``` public class OwnerFormatter implements Formatter {   private final OwnerService ownerService;   private final ConversionService conversionService;     public OwnerFormatter(OwnerService ownerService,       ConversionService conversionService) {     this.ownerService = ownerService;     this.conversionService = conversionService;   }   @Override   public Owner parse(String text, Locale locale) throws ParseException {     if (text == null || !StringUtils.hasText(text)) {       return null;     }     Long id = conversionService.convert(text, Long.class);     Owner owner = ownerService.findOne(id);     if(owner == null){         throw new EntityResultNotFoundException();     }     return owner;   }   @Override   public String print(Owner owner, Locale locale) {     return owner == null ? null : owner.getName();   } } ```  As you could see, I've use _findOne_ method to obtain Owner with id 1. But, what happens if this method returns null because there aren't any Owner with id 1?  To prevent this, I throw a custom Exception called _EntityResultNotFoundException_. This exception contains the following code:  ``` public class EntityResultNotFoundException extends RuntimeException {          public EntityResultNotFoundException() {                   super(""ERROR: Entity not found"");          } } ```  I want to configure project to be able to return **errors/404.html** when this exception throws, so, following [Spring documentation](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-ann-exceptionhandler), I have two options:  **Option a)**  Read StackOverFlow question, this is not related with this issue.  **Option b)**  Include a new _`@Bean`_ _SimpleMappingExceptionResolver_ inside a _`@Configuration`_ class to map exceptions with the view identifier.  ``` @Configuration public class WebMvcConfiguration extends WebMvcConfigurerAdapter {   [...]   @Bean   public SimpleMappingExceptionResolver simpleMappingExceptionResolver() {       SimpleMappingExceptionResolver resolver =             new SimpleMappingExceptionResolver();       Properties mappings = new Properties();       mappings.setProperty(""EntityResultNotFoundException"", ""errores/404"");       resolver.setExceptionMappings(mappings);       return resolver;   } } ```  However, the implementation above doesn't works with exceptions throwed on Spring Formatters.  I've been debugging Spring code and I've found two things that maybe could be an interesting improvement to Spring Framework.  First of all, _DispatcherServlet_ is loading all registered _HandlerExceptionResolver_ from _initStrategies_ and _initHandlerExceptionResolvers_ methods. This method is taken all HandlerExceptionResolvers in the correct order, but then, uses the following code to order them again:  ``` AnnotationAwareOrderComparator.sort(this.handlerExceptionResolvers); ```  The problem is that this method delegates on the _findOrder_ method that tries to obtain order from the HandlerExceptionResolver that is instance of _Ordered_. As you could see, I've not defined order on my registered `@Bean`, so when tries to obtain order from my declared bean _SimpleMappingExceptionResolver_ is using LOWEST_PRECEDENCE. This causes that Spring uses _DefaultHandlerExceptionResolver_ because is the first one that returns a result.  So, to solve this I've added order value to my declared bean with the following code.  ``` @Bean public SimpleMappingExceptionResolver simpleMappingExceptionResolver() {     SimpleMappingExceptionResolver resolver =           new SimpleMappingExceptionResolver();     Properties mappings = new Properties();     mappings.setProperty(""EntityResultNotFoundException"", ""errores/404"");     resolver.setOrder(-1);     resolver.setExceptionMappings(mappings);     return resolver; }   ```  Now, when _AnnotationAwareOrderComparator_ sorts all registered _HandlerExceptionResolver_ the _SimpleMappingExceptionResolver_is the first one and it will be used as resolver.  Anyway, is not working yet. I've continue debugging and I've saw that now is using _doResolveException_ from _SimpleMappingExceptionResolver_ to resolve the exception, so it's ok. However, the method _findMatchingViewName_ that tries to obtain the mapped view returns null.  The problem is that _findMatchingViewName_ is trying to check if the received exception match with some exception defined on the exceptionMappings of the _SimpleMappingExceptionResolver_, but it's only checking the super classes inside _getDepth_ method. Should be necessary to check the cause exception.  I've applied the following workaround to continue working (just extend _SimpleMappingExceptionResolver_ and implements _findMatchingViewName_ method to try to find matching view again with cause exception if depth is not valid)  ``` public class CauseAdviceSimpleMappingExceptionResolver extends SimpleMappingExceptionResolver{          /**           * Find a matching view name in the given exception mappings.           * @param exceptionMappings mappings between exception class names and error view names           * @param ex the exception that got thrown during handler execution           * @return the view name, or {@code null} if none found           * @see #setExceptionMappings           */          @Override          protected String findMatchingViewName(Properties exceptionMappings, Exception ex) {                   String viewName = null;                   String dominantMapping = null;                   int deepest = Integer.MAX_VALUE;                   for (Enumeration names = exceptionMappings.propertyNames(); names.hasMoreElements();) {                            String exceptionMapping = (String) names.nextElement();                            int depth = getDepth(exceptionMapping, ex);                            if (depth >= 0 && (depth < deepest || (depth == deepest &&                                                  dominantMapping != null && exceptionMapping.length() > dominantMapping.length()))) {                                     deepest = depth;                                     dominantMapping = exceptionMapping;                                     viewName = exceptionMappings.getProperty(exceptionMapping);                            }else if(ex.getCause() instanceof Exception){                                     return findMatchingViewName(exceptionMappings, (Exception) ex.getCause() );                            }                   }                   if (viewName != null && logger.isDebugEnabled()) {                            logger.debug(""Resolving to view '"" + viewName + ""' for exception of type ["" + ex.getClass().getName() +                                                  ""], based on exception mapping ["" + dominantMapping + ""]"");                   }                   return viewName;          }          } ```  I think that this implementation is really interesting because also use the cause exception class instead of use only the superclasses exceptions.  I'm going to create a new Pull-Request on Spring Framework github including this improvement.  With these 2 changes (order and extending _SimpleMappingExceptionResolver_) I'm able to catch an exception thrown from Spring Formatter and return a custom view.  What do you think about it?  ---  **Affects:** 4.2.5  **Reference URL:** http://stackoverflow.com/questions/37322182/exceptionhandler-doesnt-catch-exceptions-being-thrown-from-spring-formatters  **Issue Links:** - #9728 Allow SimpleMappingExceptionResolver to navigate exception ""cause"" hierarchy - #15732 `@ExceptionHandler` cannot handler java.lang.Error despite the annotation accept ? extends Throwable - #21284 Exception swallowed in ResponseEntityExceptionHandler - #18925 AsyncRestTemplate changes in SPR-13413 made its harder to detect Client/Server errors - #18995 `@MessageExceptionHandler` should match cause as well (analogous to `@ExceptionHandler`)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/981c894acf8ee075961c98b9f5fdff2b35d9f765  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2016-05-19T16:35:07Z","2019-01-14T04:39:19Z"
"","19321","Actually support request forwarding in MockRequestDispatcher [SPR-14755]","**[Jostein Gogstad](https://jira.spring.io/secure/ViewProfile.jspa?name=jgogstad)** opened **[SPR-14755](https://jira.spring.io/browse/SPR-14755?redirect=false)** and commented  Not sure if this ever where the scope, but I have a filter ([tuckey](http://tuckey.org/urlrewrite/)) that rewrites some URLs and expects the requests to be forwarded to the updated URLs. It would be nice if spring-test recognized request forwarding during tests.  Currently [MockRequestDispatcher](https://github.com/spring-projects/spring-framework/blob/v4.3.2.RELEASE/spring-test/src/main/java/org/springframework/mock/web/MockRequestDispatcher.java#L59) only sets the forward URL on the response. Wouldn't it suffice to update the request URL on the request in order to support forwarding?  ---  **Affects:** 4.3.2  **Issue Links:** - #18914 Improve MockMvc to follow redirects and forwards","closed","type: enhancement,","spring-projects-issues","2016-09-26T16:36:13Z","2019-01-11T17:12:04Z"
"","19163","Support Listening on Interface of Events thrown as impls [SPR-14594]","**[Joseph Valerio](https://jira.spring.io/secure/ViewProfile.jspa?name=jvalerio)** opened **[SPR-14594](https://jira.spring.io/browse/SPR-14594?redirect=false)** and commented  If I have an IFoo interface and a Foo implementation, and I publish PayloadApplicationEvent\ and Listen for PayloadApplicationEvent\ it does not get triggered. I have a condition work around, but I was wondering if you guys plan to support this in the future.   ---  **Affects:** 4.3 GA  **Attachments:** - [listener-annotation-test.zip](https://jira.spring.io/secure/attachment/23505/listener-annotation-test.zip) (_8.65 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b183934ed4a09d8f27b48fb492b6d3a614ddab43, https://github.com/spring-projects/spring-framework/commit/9044706796bb34fac66c1c3df3bd4569b624f344","closed","in: core,","spring-projects-issues","2016-08-17T14:35:24Z","2019-01-12T05:22:14Z"
"","19478","Spring Boot Actuator endpoints not registered when using Spring Web Reactive [SPR-14911]","**[Jose Antonio Iñigo](https://jira.spring.io/secure/ViewProfile.jspa?name=codependent)** opened **[SPR-14911](https://jira.spring.io/browse/SPR-14911?redirect=false)** and commented  I added the Spring Boot Starter Actuator dependency to a spring web reactive proyect but none of the actuator endpoints are available.   ---  **Affects:** 5.0 M3  **Reference URL:** https://github.com/codependent/spring5-playground/tree/build-snapshot","closed","status: invalid,","spring-projects-issues","2016-11-16T11:56:35Z","2019-01-12T05:21:38Z"
"","19386","Reactive Web Client reference documentation error [SPR-14820]","**[Jose Antonio Iñigo](https://jira.spring.io/secure/ViewProfile.jspa?name=codependent)** opened **[SPR-14820](https://jira.spring.io/browse/SPR-14820?redirect=false)** and commented  The documentation states:  _The same can also be done with RxJava using static imports from RxJava1ClientWebRequestBuilder and..._  The import is wrong, it should be RxJava1ClientWebRequestBuilders (notice the final s).   ---  **Affects:** 5.0 M2  **Reference URL:** http://docs.spring.io/spring/docs/5.0.0.M2/spring-framework-reference/htmlsingle/#web-reactive-client","closed","type: task,","spring-projects-issues","2016-10-19T10:17:23Z","2016-11-08T13:11:19Z"
"","19369","Hot publishing to an event stream not working [SPR-14803]","**[Jose Antonio Iñigo](https://jira.spring.io/secure/ViewProfile.jspa?name=codependent)** opened **[SPR-14803](https://jira.spring.io/browse/SPR-14803?redirect=false)** and commented  I am struggling to make a hot publisher push values into a event stream. In the referenced stackoverflow question there's a detailed explanation of how I'm trying to achieve it and the errors produced.  To sum up, I have this EmitterProcessor:  ```java @Component public class AlertEmitterProcessor {      private Logger logger = LoggerFactory.getLogger(getClass());      private EmitterProcessor processor;      public AlertEmitterProcessor(){         processor = EmitterProcessor.create();         processor.connect();     }      public EmitterProcessor getProcessor() {         return processor;     }      public void onNext(Alert alert){         logger.info(""onNext [{}]"", alert);         processor.onNext(alert);     }      public void onComplete(){         logger.info(""onComplete"");         processor.onComplete();     }      public void onError(Throwable t){         logger.error(""onError"", t);         processor.onError(t);     } } ```  And this RestController:  ```java @Autowired private AlertEmitterProcessor alertTopicProcessor;  @GetMapping(value=""/accounts/{id}/alerts/live2"", produces=""text/event-stream"") public Flux getAccountAlertsStreaming2(@PathVariable Integer id) {     return alertTopicProcessor.getProcessor()         .log().filter( a -> a.getAccountId().equals(id) ); } ```  Either the client doesn't get any data and ends with a 500 error:  ```java 2016-10-03 13:43:43.063 DEBUG 12800 --- [nio-8080-exec-2] o.s.web.reactive.DispatcherHandler       : Processing GET request for [http://localhost:8080/mock/accounts/1/alerts/put] 2016-10-03 13:43:43.063 DEBUG 12800 --- [nio-8080-exec-2] s.w.r.r.m.a.RequestMappingHandlerMapping : Looking up handler method for path /mock/accounts/1/alerts/put 2016-10-03 13:43:43.068 DEBUG 12800 --- [nio-8080-exec-2] s.w.r.r.m.a.RequestMappingHandlerMapping : Returning handler method [public void com.codependent.spring5.playground.reactive.web.AccountsRestController.putAlert(java.lang.Integer) throws com.fasterxml.jackson.core.JsonProcessingException] 2016-10-03 13:43:43.069 DEBUG 12800 --- [nio-8080-exec-2] o.s.b.f.s.DefaultListableBeanFactory     : Returning cached instance of singleton bean 'accountsRestController' 2016-10-03 13:43:43.071  INFO 12800 --- [nio-8080-exec-2] reactor.unresolved                       : onSubscribe(reactor.core.publisher.FluxPeek$PeekSubscriber@2ba7d09c) 2016-10-03 13:43:43.071  INFO 12800 --- [nio-8080-exec-2] reactor.unresolved                       : request(unbounded) 2016-10-03 13:43:43.072  INFO 12800 --- [nio-8080-exec-2] reactor.unresolved                       : onNext(1) 2016-10-03 13:43:43.112  INFO 12800 --- [nio-8080-exec-2] c.c.s.p.r.message.AlertMessageListener   : Message received: [com.codependent.spring5.playground.reactive.message.MockTextMessage@37262c9e] 2016-10-03 13:43:43.145  INFO 12800 --- [nio-8080-exec-2] c.c.s.p.r.message.AlertEmitterProcessor  : onNext [Alert [alertId=3, message=Message, accountId=1]] 2016-10-03 13:43:43.146  INFO 12800 --- [nio-8080-exec-2] reactor.Flux.EmitterProcessor.2          : onNext(Alert [alertId=3, message=Message, accountId=1]) 2016-10-03 13:43:43.177  INFO 12800 --- [nio-8080-exec-2] reactor.unresolved                       : onComplete() 2016-10-03 13:43:43.177 DEBUG 12800 --- [nio-8080-exec-2] o.s.h.s.r.ServletHttpHandlerAdapter      : Successfully completed request ```  ...or it some rare occasions gets data:  ```java 2016-10-03 13:45:07.726 DEBUG 12800 --- [nio-8080-exec-8] s.w.r.r.m.a.RequestMappingHandlerMapping : Returning handler method [public reactor.core.publisher.Flux com.codependent.spring5.playground.reactive.web.AccountsRestController.getAccountAlertsStreaming2(java.lang.Integer)] 2016-10-03 13:45:07.726 DEBUG 12800 --- [nio-8080-exec-8] o.s.b.f.s.DefaultListableBeanFactory     : Returning cached instance of singleton bean 'accountsRestController' 2016-10-03 13:45:07.727  INFO 12800 --- [nio-8080-exec-8] reactor.unresolved                       : onSubscribe(reactor.core.publisher.FluxPeek$PeekSubscriber@909f06f) 2016-10-03 13:45:07.727  INFO 12800 --- [nio-8080-exec-8] reactor.unresolved                       : request(unbounded) 2016-10-03 13:45:07.727  INFO 12800 --- [nio-8080-exec-8] reactor.unresolved                       : onNext(1) 2016-10-03 13:45:07.729  INFO 12800 --- [nio-8080-exec-8] reactor.Flux.EmitterProcessor.9          : onSubscribe(reactor.core.publisher.EmitterProcessor$EmitterSubscriber@7ce1f3e) 2016-10-03 13:45:07.729  INFO 12800 --- [nio-8080-exec-8] reactor.Flux.EmitterProcessor.9          : request(1) 2016-10-03 13:45:07.729  INFO 12800 --- [nio-8080-exec-8] reactor.Flux.EmitterProcessor.9          : onNext(Alert [alertId=4, message=Message, accountId=1]) 2016-10-03 13:45:07.730  INFO 12800 --- [nio-8080-exec-8] reactor.unresolved                       : onComplete() 2016-10-03 13:45:07.747  INFO 12800 --- [nio-8080-exec-8] reactor.Flux.EmitterProcessor.9          : request(1) 2016-10-03 13:45:07.747  INFO 12800 --- [nio-8080-exec-8] reactor.Flux.EmitterProcessor.9          : onNext(Alert [alertId=0, message=Message, accountId=1]) 2016-10-03 13:45:07.748  INFO 12800 --- [nio-8080-exec-8] reactor.Flux.EmitterProcessor.9          : request(1) ```  ---  **Affects:** 5.0 M2  **Reference URL:** http://stackoverflow.com/questions/39830866/spring-5-web-reactive-hot-publishing-how-to-use-emitterprocessor-to-bridge-a  **Issue Links:** - #19338 Flux looses messages when using a Processor from another Thread (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2016-10-13T09:31:13Z","2019-01-12T16:45:26Z"
"","19341","Reactive controller event stream crashes after 30 seconds [SPR-14775]","**[Jose Antonio Iñigo](https://jira.spring.io/secure/ViewProfile.jspa?name=codependent)** opened **[SPR-14775](https://jira.spring.io/browse/SPR-14775?redirect=false)** and commented  I have noticed a different behaviour between Spring 4's controllers with SseEmitter and Spring 5's controllers with Flux producing ""text/event-stream"".  In **Spring 4**, calling the stream from a browser it will run forever:  ```java 	@RequestMapping(""/accounts/alerts"") 	public SseEmitter getAccountAlertsNoPathVariable(HttpSession session) { 		 		SseEmitter emitter = new SseEmitter(Long.MAX_VALUE);  		Thread t1 = new Thread(() ->{ 			try { 				int i = 0; 				while(++i<=10000){ 					Thread.sleep(1000); 					System.out.println(""Sending""); 					try{ 						emitter.send(new Alert((long)i, ""Alert message""+i)); 					}catch(ClientAbortException cae){ 						cae.printStackTrace(); 						i = 10000; 					} 				} 				emitter.complete(); 			} catch (IOException | InterruptedException e) { 				e.printStackTrace(); 			} 		}); 		t1.start(); 		 		return emitter; 	} } ```  However in **Spring 5**'s web reactive it crashes after reaching the (tomcat 8) container's request timeout (30 seconds):  ```java  	@GetMapping(value=""/accounts/{id}/alerts/live"", produces=""text/event-stream"") 	public Flux getAccountAlertsStreaming(@PathVariable Integer id) { 		return accountService.getAccountAlertsStreaming(id); 	}          ...         public Flux getAccountAlertsStreaming(Integer id){ 		return Flux.range(1, 50) 				.map((Integer i) -> { 					return new Alert((long)i, ""Alert message""+i); 				}) 				.delayMillis(1000) 				.log(); 	} ```  **Exception:**  ```java  2016-10-03 10:04:45.908  INFO 4588 --- [        timer-1] reactor.Flux.ConcatMap.2                 : request(1) 2016-10-03 10:04:46.910  INFO 4588 --- [        timer-1] reactor.Flux.ConcatMap.2                 : onNext(Alert [alertId=31, message=Alert message31]) 2016-10-03 10:04:46.912  INFO 4588 --- [        timer-1] reactor.Flux.ConcatMap.2                 : cancel() 2016-10-03 10:04:46.922 DEBUG 4588 --- [        timer-1] o.s.w.s.h.ExceptionHandlingWebHandler    : Could not complete request  java.lang.IllegalStateException: It is invalid to call isReady() when the response has not been put into non-blocking mode 	at org.apache.coyote.Response.isReady(Response.java:616) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.connector.OutputBuffer.isReady(OutputBuffer.java:677) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.connector.CoyoteOutputStream.isReady(CoyoteOutputStream.java:155) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyProcessor.isWritePossible(ServletServerHttpResponse.java:168) ~[spring-web-5.0.0.M2.jar:5.0.0.M2] 	at org.springframework.http.server.reactive.AbstractResponseBodyProcessor.writeIfPossible(AbstractResponseBodyProcessor.java:142) ~[spring-web-5.0.0.M2.jar:5.0.0.M2] 	at org.springframework.http.server.reactive.AbstractResponseBodyProcessor.access$300(AbstractResponseBodyProcessor.java:47) ~[spring-web-5.0.0.M2.jar:5.0.0.M2] 	at org.springframework.http.server.reactive.AbstractResponseBodyProcessor$State$2.onNext(AbstractResponseBodyProcessor.java:223) ~[spring-web-5.0.0.M2.jar:5.0.0.M2] 	at org.springframework.http.server.reactive.AbstractResponseBodyProcessor.onNext(AbstractResponseBodyProcessor.java:77) ~[spring-web-5.0.0.M2.jar:5.0.0.M2] 	at org.springframework.http.server.reactive.AbstractResponseBodyProcessor.onNext(AbstractResponseBodyProcessor.java:47) ~[spring-web-5.0.0.M2.jar:5.0.0.M2] 	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onNext(FluxConcatArray.java:162) ~[reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1508) ~[reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1225) ~[reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1188) ~[reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55) ~[reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:193) ~[reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.publisher.FluxConcatArray.subscribe(FluxConcatArray.java:96) ~[reactor-core-3.0.2.RELEASE.jar:na] 	at org.springframework.http.server.reactive.AbstractResponseBodyFlushProcessor$State$2.onNext(AbstractResponseBodyFlushProcessor.java:150) ~[spring-web-5.0.0.M2.jar:5.0.0.M2] 	at org.springframework.http.server.reactive.AbstractResponseBodyFlushProcessor.onNext(AbstractResponseBodyFlushProcessor.java:72) ~[spring-web-5.0.0.M2.jar:5.0.0.M2] 	at org.springframework.http.server.reactive.AbstractResponseBodyFlushProcessor.onNext(AbstractResponseBodyFlushProcessor.java:44) ~[spring-web-5.0.0.M2.jar:5.0.0.M2] 	at org.springframework.http.server.reactive.ChannelSendOperator$WriteWithBarrier.doNext(ChannelSendOperator.java:95) ~[spring-web-5.0.0.M2.jar:5.0.0.M2] 	at reactor.core.publisher.Operators$SubscriberAdapter.onNext(Operators.java:1021) ~[reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122) [reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122) [reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:168) [reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:261) [reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:743) [reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122) [reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.publisher.MonoDelay$MonoDelayRunnable.run(MonoDelay.java:88) [reactor-core-3.0.2.RELEASE.jar:na] 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:522) [na:1.8.0-internal] 	at java.util.concurrent.FutureTask.run(FutureTask.java:277) [na:1.8.0-internal] 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:191) [na:1.8.0-internal] 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304) [na:1.8.0-internal] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1153) [na:1.8.0-internal] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [na:1.8.0-internal] 	at java.lang.Thread.run(Thread.java:785) [na:1.8.0-internal]  2016-10-03 10:04:46.923 DEBUG 4588 --- [        timer-1] o.s.h.s.r.ServletServerHttpResponse      : Can't set the status 500 because the HTTP response has already been committed 2016-10-03 10:04:46.923 DEBUG 4588 --- [        timer-1] o.s.h.s.r.ServletHttpHandlerAdapter      : Successfully completed request ```    ---  **Affects:** 5.0 M2  **Reference URL:** https://github.com/codependent/spring5-playground/tree/spring-5-m2","closed","in: web,","spring-projects-issues","2016-10-03T08:12:49Z","2019-01-11T17:24:16Z"
"","19314","Error while serializing ServerSentEvent [SPR-14748]","**[Jose Antonio Iñigo](https://jira.spring.io/secure/ViewProfile.jspa?name=codependent)** opened **[SPR-14748](https://jira.spring.io/browse/SPR-14748?redirect=false)** and commented  After upgrading from Spring 5.0.0 M1 to M2 the following code has stopped working (I changed from SseEvent to ServerSentEvent class):  ```java @RestController public class StringsRestController {      @GetMapping(""/strings/sse/event"")     public Flux> sse() {         return Flux.interval(Duration.ofMillis(100)).map(l -> {             ServerSentEvent event = ServerSentEvent.builder(""foo"").build();             return event;         }).take(2);     } } ```  I have uploaded a sample project at this URL (branch spring5-m2): https://github.com/codependent/spring5-playground/tree/spring-5-m2  To reproduce:  1) Start the application with com.codependent.spring5.playground.Spring5PlaygroundApplication  2) Call http://localhost:8080/strings/serversentsevent (com.codependent.spring5.playground.reactive.web.StringsRestController.sse())  This is the exception:  ```java  2016-09-26 08:50:10.966 DEBUG 10488 --- [nio-8080-exec-1] o.s.web.reactive.DispatcherHandler       : Processing GET request for [http://localhost:8080/strings/serversentsevent] 2016-09-26 08:50:10.997 DEBUG 10488 --- [nio-8080-exec-1] s.w.r.r.m.a.RequestMappingHandlerMapping : Looking up handler method for path /strings/serversentsevent 2016-09-26 08:50:11.002 DEBUG 10488 --- [nio-8080-exec-1] s.w.r.r.m.a.RequestMappingHandlerMapping : Returning handler method [public reactor.core.publisher.Flux> com.codependent.spring5.playground.reactive.web.StringsRestController.sse()] 2016-09-26 08:50:11.002 DEBUG 10488 --- [nio-8080-exec-1] o.s.b.f.s.DefaultListableBeanFactory     : Returning cached instance of singleton bean 'stringsRestController' 2016-09-26 08:50:11.407 DEBUG 10488 --- [        timer-1] o.s.w.s.h.ExceptionHandlingWebHandler    : Could not complete request  org.springframework.core.codec.CodecException: Error while writing the data; nested exception is com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class org.springframework.http.codec.ServerSentEvent and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) 	at org.springframework.http.codec.json.Jackson2JsonEncoder.encodeValue(Jackson2JsonEncoder.java:134) ~[spring-web-5.0.0.M2.jar:5.0.0.M2] 	at org.springframework.http.codec.json.Jackson2JsonEncoder.lambda$encode$2(Jackson2JsonEncoder.java:100) ~[spring-web-5.0.0.M2.jar:5.0.0.M2] 	at org.springframework.http.codec.json.Jackson2JsonEncoder$$Lambda$75.0000000013BE51F0.apply(Unknown Source) ~[na:na] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:339) [reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:232) [reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.publisher.FluxTake$TakeSubscriber.onNext(FluxTake.java:136) [reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122) [reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.publisher.FluxInterval$IntervalRunnable.run(FluxInterval.java:93) [reactor-core-3.0.2.RELEASE.jar:na] 	at reactor.core.scheduler.SingleTimedScheduler$TimedPeriodicScheduledRunnable.run(SingleTimedScheduler.java:383) [reactor-core-3.0.2.RELEASE.jar:na] 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:522) [na:1.8.0-internal] 	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:319) [na:1.8.0-internal] 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:191) [na:1.8.0-internal] 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) [na:1.8.0-internal] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1153) [na:1.8.0-internal] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [na:1.8.0-internal] 	at java.lang.Thread.run(Thread.java:785) [na:1.8.0-internal] Caused by: com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class org.springframework.http.codec.ServerSentEvent and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) 	at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:275) ~[jackson-databind-2.8.3.jar:2.8.3] 	at com.fasterxml.jackson.databind.SerializerProvider.mappingException(SerializerProvider.java:1110) ~[jackson-databind-2.8.3.jar:2.8.3] 	at com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(SerializerProvider.java:1135) ~[jackson-databind-2.8.3.jar:2.8.3] 	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:69) ~[jackson-databind-2.8.3.jar:2.8.3] 	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:32) ~[jackson-databind-2.8.3.jar:2.8.3] 	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:292) ~[jackson-databind-2.8.3.jar:2.8.3] 	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1419) ~[jackson-databind-2.8.3.jar:2.8.3] 	at com.fasterxml.jackson.databind.ObjectWriter._configAndWriteValue(ObjectWriter.java:1147) ~[jackson-databind-2.8.3.jar:2.8.3] 	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:977) ~[jackson-databind-2.8.3.jar:2.8.3] 	at org.springframework.http.codec.json.Jackson2JsonEncoder.encodeValue(Jackson2JsonEncoder.java:131) ~[spring-web-5.0.0.M2.jar:5.0.0.M2] 	... 15 common frames omitted  2016-09-26 08:50:11.407 DEBUG 10488 --- [        timer-1] o.s.h.s.r.ServletServerHttpResponse      : Can't set the status 500 because the HTTP response has already been committed 2016-09-26 08:50:11.407 DEBUG 10488 --- [        timer-1] o.s.h.s.r.ServletHttpHandlerAdapter      : Successfully completed request ```    ---  **Affects:** 5.0 M2  **Reference URL:** http://stackoverflow.com/questions/39655499/spring-5-m2-reactive-error-while-serializing-serversentevent","closed","type: bug,","spring-projects-issues","2016-09-26T06:53:21Z","2016-11-08T13:11:18Z"
"","19187","Reactive controllers don't fully support returning org.reactivestreams.Publisher. It fails when calling s.onNext() multiple times. [SPR-14620]","**[Jose Antonio Iñigo](https://jira.spring.io/secure/ViewProfile.jspa?name=codependent)** opened **[SPR-14620](https://jira.spring.io/browse/SPR-14620?redirect=false)** and commented  Given this controller:  ```java package com.codependent.spring5.playground.reactive.web;  import java.time.Duration;  import org.reactivestreams.Publisher; import org.reactivestreams.Subscriber; import org.springframework.http.codec.SseEvent; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController;  import reactor.core.publisher.Flux;  @RestController public class StringsRestController { 		     @GetMapping(""/singleStrings"")     public Publisher getSingleString(){         return new Publisher() { 		@Override 		public void subscribe(Subscriber s) { 			s.onNext(""message""+Math.random()); 			s.onComplete(); 		}         };      } 	     @GetMapping(value=""/strings"", produces=""text/event-stream"")     public Publisher getStrings(){         return new Publisher() { 		@Override 		public void subscribe(Subscriber s) { 			int i = 0; 			while(++i <= 5){ 				try { 					Thread.sleep(1000); 				} catch (InterruptedException e) { 					e.printStackTrace(); 				} 				s.onNext(""message""+Math.random()); 			} 			s.onComplete(); 		}         };     } } ```  Calling `/singleStrings` return correctly a generated String. However when hitting the second endpoint `/strings`, that calls s.onNext() multiple times the following exception is thrown:  ```java  2016-08-24 09:25:37.185 DEBUG 9780 --- [nio-8080-exec-1] o.s.web.reactive.DispatcherHandler       : Processing GET request for [http://localhost:8080/strings] 2016-08-24 09:25:37.240 DEBUG 9780 --- [nio-8080-exec-1] s.w.r.r.m.a.RequestMappingHandlerMapping : Looking up handler method for path /strings 2016-08-24 09:25:37.246 DEBUG 9780 --- [nio-8080-exec-1] s.w.r.r.m.a.RequestMappingHandlerMapping : Returning handler method [public org.reactivestreams.Publisher com.codependent.spring5.playground.reactive.web.StringsRestController.getStrings()] 2016-08-24 09:25:37.246 DEBUG 9780 --- [nio-8080-exec-1] o.s.b.f.s.DefaultListableBeanFactory     : Returning cached instance of singleton bean 'stringsRestController' 2016-08-24 09:25:39.301 DEBUG 9780 --- [nio-8080-exec-1] o.s.w.s.h.ExceptionHandlingWebHandler    : Could not complete request  java.lang.IllegalStateException: RECEIVED 	at org.springframework.http.server.reactive.AbstractResponseBodyFlushProcessor$State.onNext(AbstractResponseBodyFlushProcessor.java:216) ~[spring-web-5.0.0.M1.jar:5.0.0.M1] 	at org.springframework.http.server.reactive.AbstractResponseBodyFlushProcessor.onNext(AbstractResponseBodyFlushProcessor.java:72) ~[spring-web-5.0.0.M1.jar:5.0.0.M1] 	at org.springframework.http.server.reactive.AbstractResponseBodyFlushProcessor.onNext(AbstractResponseBodyFlushProcessor.java:44) ~[spring-web-5.0.0.M1.jar:5.0.0.M1] 	at org.springframework.http.server.reactive.ChannelSendOperator$WriteWithBarrier.doNext(ChannelSendOperator.java:97) ~[spring-web-5.0.0.M1.jar:5.0.0.M1] 	at reactor.core.publisher.OperatorAdapter.onNext(OperatorAdapter.java:88) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onNext(FluxConcatArray.java:162) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:123) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at com.codependent.spring5.playground.reactive.web.StringsRestController$2.subscribe(StringsRestController.java:40) [classes/:na] 	at reactor.core.publisher.FluxSource.subscribe(FluxSource.java:59) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:73) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:193) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxConcatArray.subscribe(FluxConcatArray.java:96) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:54) [spring-web-5.0.0.M1.jar:5.0.0.M1] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenApply$MonoThenApplyManager.onNext(MonoThenApply.java:133) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.Operators$DeferredScalarSubscriber.complete(Operators.java:1006) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenApply$MonoThenApplyManager$SecondSubscriber.onNext(MonoThenApply.java:203) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxResume$ResumeSubscriber.onNext(FluxResume.java:75) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:130) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1507) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:186) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1224) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxResume$ResumeSubscriber.onSubscribe(FluxResume.java:70) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:100) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:169) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenApply.subscribe(MonoThenApply.java:51) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:69) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenApply$MonoThenApplyManager.onNext(MonoThenApply.java:133) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:71) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:383) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:192) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:96) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:60) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:116) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:45) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOtherwiseIfEmpty.subscribe(MonoOtherwiseIfEmpty.java:47) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenApply.subscribe(MonoThenApply.java:58) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenApply.subscribe(MonoThenApply.java:58) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenSupply$MonoConcatIgnoreManager.drain(MonoThenSupply.java:167) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenSupply.subscribe(MonoThenSupply.java:55) [reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at org.springframework.http.server.reactive.ServletHttpHandlerAdapter.service(ServletHttpHandlerAdapter.java:93) [spring-web-5.0.0.M1.jar:5.0.0.M1] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:522) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:1110) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:785) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1425) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45] 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]  2016-08-24 09:25:39.302 DEBUG 9780 --- [nio-8080-exec-1] o.s.h.s.r.ServletServerHttpResponse      : Can't set the status 500 because the HTTP response has already been committed 2016-08-24 09:25:40.326 ERROR 9780 --- [nio-8080-exec-1] a.c.c.C.[.[.0.0.0.[.[httpHandlerServlet] : Servlet.service() for servlet [httpHandlerServlet] in context with path [] threw exception  reactor.core.Exceptions$BubblingException: java.lang.IllegalStateException: RECEIVED 	at reactor.core.Exceptions.bubble(Exceptions.java:96) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.Exceptions.onErrorDropped(Exceptions.java:173) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenApply$MonoThenApplyManager$SecondSubscriber.onError(MonoThenApply.java:209) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxResume$ResumeSubscriber.onError(FluxResume.java:105) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.OperatorAdapter.doOnSubscriberError(OperatorAdapter.java:113) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.OperatorAdapter.onNext(OperatorAdapter.java:91) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onNext(FluxConcatArray.java:162) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:123) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at com.codependent.spring5.playground.reactive.web.StringsRestController$2.subscribe(StringsRestController.java:40) ~[classes/:na] 	at reactor.core.publisher.FluxSource.subscribe(FluxSource.java:59) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:73) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:193) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxConcatArray.subscribe(FluxConcatArray.java:96) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:54) ~[spring-web-5.0.0.M1.jar:5.0.0.M1] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenApply$MonoThenApplyManager.onNext(MonoThenApply.java:133) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.Operators$DeferredScalarSubscriber.complete(Operators.java:1006) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenApply$MonoThenApplyManager$SecondSubscriber.onNext(MonoThenApply.java:203) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxResume$ResumeSubscriber.onNext(FluxResume.java:75) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:130) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1507) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:186) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1224) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxResume$ResumeSubscriber.onSubscribe(FluxResume.java:70) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:100) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:169) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenApply.subscribe(MonoThenApply.java:51) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:69) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenApply$MonoThenApplyManager.onNext(MonoThenApply.java:133) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:71) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:383) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:192) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:96) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:60) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:116) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:45) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOtherwiseIfEmpty.subscribe(MonoOtherwiseIfEmpty.java:47) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenApply.subscribe(MonoThenApply.java:58) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenApply.subscribe(MonoThenApply.java:58) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenSupply$MonoConcatIgnoreManager.drain(MonoThenSupply.java:167) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenSupply.subscribe(MonoThenSupply.java:55) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	at org.springframework.http.server.reactive.ServletHttpHandlerAdapter.service(ServletHttpHandlerAdapter.java:93) ~[spring-web-5.0.0.M1.jar:5.0.0.M1] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) ~[tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) ~[tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:522) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:1110) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:785) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1425) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45] 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45] Caused by: java.lang.IllegalStateException: RECEIVED 	at org.springframework.http.server.reactive.AbstractResponseBodyFlushProcessor$State.onNext(AbstractResponseBodyFlushProcessor.java:216) ~[spring-web-5.0.0.M1.jar:5.0.0.M1] 	at org.springframework.http.server.reactive.AbstractResponseBodyFlushProcessor.onNext(AbstractResponseBodyFlushProcessor.java:72) ~[spring-web-5.0.0.M1.jar:5.0.0.M1] 	at org.springframework.http.server.reactive.AbstractResponseBodyFlushProcessor.onNext(AbstractResponseBodyFlushProcessor.java:44) ~[spring-web-5.0.0.M1.jar:5.0.0.M1] 	at org.springframework.http.server.reactive.ChannelSendOperator$WriteWithBarrier.doNext(ChannelSendOperator.java:97) ~[spring-web-5.0.0.M1.jar:5.0.0.M1] 	at reactor.core.publisher.OperatorAdapter.onNext(OperatorAdapter.java:88) ~[reactor-core-3.0.0.BUILD-SNAPSHOT.jar:na] 	... 60 common frames omitted ```    ---  **Affects:** 5.0 M1  **Reference URL:** http://stackoverflow.com/questions/38715692/spring-5-reactive-fails-when-extending-flux-implementing-publisher-and-calling-s","closed","status: invalid,","spring-projects-issues","2016-08-24T07:27:00Z","2019-01-12T05:22:11Z"
"","19147","Let users control reactive SSE stream completion [SPR-14578]","**[Jose Antonio Iñigo](https://jira.spring.io/secure/ViewProfile.jspa?name=codependent)** opened **[SPR-14578](https://jira.spring.io/browse/SPR-14578?redirect=false)** and commented  Given this Spring 4.2 server sent events code  example:  ```java @RestController public class AccountController {  	@RequestMapping(""/accounts/alerts"") 	public SseEmitter getAccountAlerts() { 		 		SseEmitter emitter = new SseEmitter(Long.MAX_VALUE);  		Thread t1 = new Thread(() ->{ 			try { 				int i = 0; 				while(++i<=3){ 					Thread.sleep(1000); 					emitter.send(new Alert((long)i, ""Alert message""+i)); 				} 				emitter.complete(); 			} catch (IOException | InterruptedException e) { 				e.printStackTrace(); 			} 		}); 		t1.start(); 		 		return emitter; 	} 	 } ```  It could be translated to spring reactive like this:  ```java @RestController public class AccountsController { 			 	@GetMapping(value=""/accounts/alerts"", produces=""text/event-stream"") 	public Flux getAccountAlerts() { 	@GetMapping(value=""/accounts/alertsStreaming"", produces=""text/event-stream"") 	public Flux getAccountAlertsNoPathVariableStreaming() { 		return Flux.range(1, 3) 			.map((Integer i) -> { 		    	    return new Alert((long)i, ""Alert message""+i); 		        }) 			.delayMillis(1000) 			.log(); 	} }  ```  In the spring 4.2 case, after sending the 3 events, `emitter.complete()` frees the HTTP connection.  However, in the reactive version, the connection is held open 27 seconds after the 3 events are sent (in 3 seconds). Shouldn't it be closed when the Flux completes?   ---  **Affects:** 5.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/06d4bb6a1a42a50cba2f0e39f8ef405fd46f53cd","closed","type: bug,","spring-projects-issues","2016-08-10T11:29:52Z","2016-09-21T12:13:12Z"
"","19130","Documentation error in 23.2.2 Reactive Web Client [SPR-14561]","**[Jose Antonio Iñigo](https://jira.spring.io/secure/ViewProfile.jspa?name=codependent)** opened **[SPR-14561](https://jira.spring.io/browse/SPR-14561?redirect=false)** and commented  The documentation in 23.2.2 Reactive Web Client states:  > The above assumes static method imports from ClientWebRequestBuilder and [...]  However the actual class whose static methods have to be imported is ClientWebRequestBuilders (notice the final s).   ---  **Affects:** 5.0 M1  **Reference URL:** http://docs.spring.io/spring/docs/5.0.0.M1/spring-framework-reference/htmlsingle/#web-reactive-client","closed","type: task,","spring-projects-issues","2016-08-05T06:32:59Z","2016-09-21T12:13:13Z"
"","19121","Reactive controller methods annotated with @PathVariable aren't invoked [SPR-14553]","**[Jose Antonio Iñigo](https://jira.spring.io/secure/ViewProfile.jspa?name=codependent)** opened **[SPR-14553](https://jira.spring.io/browse/SPR-14553?redirect=false)** and commented  A reactive RestController method like this works as expected:  ```java @GetMapping(""/accounts/alerts"") public Flux getAccountAlertsNoPathVariable() {      return Flux.just(new Alert((long)1, ""Alert message"")); } ```  However, when using a `@PathVariable` parameter, the method isn't even invoked:  ```java @GetMapping(""/accounts/{id}/alerts"") public Flux getAccountAlertsWithPathVariable(@PathVariable Long id) {      return Flux.just(new Alert(id, ""Alert message"")); } ```  Log trace:  ```java  2016-08-02 13:36:02.038  INFO 12024 --- [nio-8080-exec-5] reactor.unresolved                       :  onSubscribe(reactor.core.publisher.MonoWhen$MonoWhenCoordinator@61821ca3) 2016-08-02 13:36:02.038  INFO 12024 --- [nio-8080-exec-5] reactor.unresolved                       :  request(unbounded) 2016-08-02 13:36:02.038  INFO 12024 --- [nio-8080-exec-5] reactor.unresolved                       :  onSubscribe(reactor.core.publisher.FluxResume$ResumeSubscriber@6f45eee3) 2016-08-02 13:36:02.038  INFO 12024 --- [nio-8080-exec-5] reactor.unresolved                       :  request(unbounded) 2016-08-02 13:36:02.039  INFO 12024 --- [nio-8080-exec-5] reactor.unresolved                       :  onNext(1) 2016-08-02 13:36:02.039  INFO 12024 --- [nio-8080-exec-5] reactor.unresolved                       :  onComplete() 2016-08-02 13:36:02.039  INFO 12024 --- [nio-8080-exec-5] reactor.unresolved                       :  onComplete() ```    ---  **Affects:** 5.0 M1  **Reference URL:** https://github.com/codependent/spring5-playground","closed","type: bug,","spring-projects-issues","2016-08-02T11:37:48Z","2016-09-21T12:13:12Z"
"","19238","Update CONTRIBUTING.md to require use of UTF-8 (instead of ISO-8859-1)) [SPR-14674]","**[Jorge Alonso García](https://jira.spring.io/secure/ViewProfile.jspa?name=jorgeal)** opened **[SPR-14674](https://jira.spring.io/browse/SPR-14674?redirect=false)** and commented  Issue #16193 asked for configuring the build to enforce use of UTF-8 in the code base. This should be reflected acordingly in the documentation. For example, CONTRIBUTING.md should require UTF-8 for Java sources. There may be other files to be updated...  ---  **Affects:** 4.3.3, 5.0 M1  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d1f60e3de185458021b23f540a5e5cc07176d11c, https://github.com/spring-projects/spring-framework/commit/fcf3ccba98ec6454eb069598e55a1205e821c5ad","closed","type: documentation,","spring-projects-issues","2016-09-07T08:11:34Z","2019-01-11T18:21:35Z"
"","19465","sse breaks with indenting serializer [SPR-14899]","**[Jorg Heymans](https://jira.spring.io/secure/ViewProfile.jspa?name=heymjo)** opened **[SPR-14899](https://jira.spring.io/browse/SPR-14899?redirect=false)** and commented  in application.properties i have spring.jackson.serialization.indent_output=true  i then send a normal pojo object:  ```java emitter.send(SseEmitter.event().data(pojo)); ```  The jackson serializer config indents the output, and the result is sent as one dataline which is invalid:  ```json data:{   ""userId"" : ""myuser"",   ""objectId"" : ""s1"" } ```  in fact this should be  ``` data: {\n data: ""userId"" : ""myuser"",\n data: ""objectId"" : ""s1""\n data: }\n\n ```  when i remove the indentation on the jackson serializer it's correct:  ``` data: { ""userId"" : ""myuser"", ""objectId"" : ""s1"" } ```  ---  **Affects:** 4.3.3  **Issue Links:** - #19617 Spring MVC 4.3.5's Jackson auto-configuration breaks against Jackson 2.3.3 on the classpath  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5700d65a53a995de8179a7941418d919edafa36d, https://github.com/spring-projects/spring-framework/commit/2735cba4b353027ac649b592bc9eb38c473b4fa1","closed","type: bug,","spring-projects-issues","2016-11-11T14:07:41Z","2019-01-11T17:39:37Z"
"","19505","RestTemplate's getSupportedMediaTypes method drop messageconverter mediatype character set information [SPR-14938]","**[Joonhaeng Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=joonhaeng)** opened **[SPR-14938](https://jira.spring.io/browse/SPR-14938?redirect=false)** and commented  When create restTemplate with Custom MessageConverter, RestTemplate's GetSupportedMediaTypes method drop my mediatype character types info.  read below codes  ```java private List getSupportedMediaTypes(HttpMessageConverter messageConverter) { 	List supportedMediaTypes = messageConverter.getSupportedMediaTypes(); 	List result = new ArrayList(supportedMediaTypes.size()); 	for (MediaType supportedMediaType : supportedMediaTypes) { 		if (supportedMediaType.getCharset() != null) { 			supportedMediaType = 					new MediaType(supportedMediaType.getType(), supportedMediaType.getSubtype()); 		} 		result.add(supportedMediaType); 	} 	return result; } ```  get messageconverter's supportmediatype and check charset is presented.  but after check charset, do not set charset info to new MediaType  ```java if (supportedMediaType.getCharset() != null) { 	supportedMediaType = 			new MediaType(supportedMediaType.getType(), supportedMediaType.getSubtype()); } ```  is this bug? or intentional action?   ---  **Affects:** 4.3.4","closed","status: declined,","spring-projects-issues","2016-11-23T11:05:34Z","2019-01-12T16:33:49Z"
"","18926","RequestContextListener requestDestroyed called before web thread is finished [SPR-14354]","**[Jonas Hartwig](https://jira.spring.io/secure/ViewProfile.jspa?name=jonashartwig)** opened **[SPR-14354](https://jira.spring.io/browse/SPR-14354?redirect=false)** and commented  There is something wrong with the lifecycle of RequestContextListener. I am not quite sure if this is supposed to be placed here or something else. Maybe one can assist? maybe it is a jersey issue? or tomcat?  http://stackoverflow.com/questions/37749585/spring-requestcontextfilter-requestdestroyed-called-before-request-thread-finish  I can provide a project into spring-framework-issues if that is of interest.  Regards Jonas   ---  **Affects:** 4.2.6  2 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-06-10T13:38:06Z","2019-01-12T00:13:52Z"
"","19394","UriComponentBuilder doesn't work with encoded HTTP URL having '+'. [SPR-14828]","**[Johnny Lim](https://jira.spring.io/secure/ViewProfile.jspa?name=izeye)** opened **[SPR-14828](https://jira.spring.io/browse/SPR-14828?redirect=false)** and commented  '+' is valid for a space but with the following code:  ```java String httpUrl = ""http://localhost:8080/test/print?value=%EA%B0%80+%EB%82%98""; URI uri = UriComponentsBuilder.fromHttpUrl(httpUrl).build(true).toUri(); System.out.println(uri); ```  I got the following error:  ```java java.lang.IllegalArgumentException: Invalid character '+' for QUERY_PARAM in ""%EA%B0%80+%EB%82%98""  	at org.springframework.web.util.HierarchicalUriComponents.verifyUriComponent(HierarchicalUriComponents.java:313) 	at org.springframework.web.util.HierarchicalUriComponents.verify(HierarchicalUriComponents.java:281) 	at org.springframework.web.util.HierarchicalUriComponents.(HierarchicalUriComponents.java:90) 	at org.springframework.web.util.UriComponentsBuilder.build(UriComponentsBuilder.java:336) 	at learningtest.org.springframework.web.UriComponentBuilderTests.testFromHttpUrlBuildEncoded(UriComponentBuilderTests.java:19) ```  ---  **Affects:** 4.3.3  **Reference URL:** https://github.com/izeye/spring-boot-throwaway-branches/blob/rest-and-logback-access/src/test/java/learningtest/org/springframework/web/UriComponentBuilderTests.java  **Issue Links:** - #20551 UriComponentsBuilder inconsistent encode/decode query params behavior (_**""is duplicated by""**_) - #14805 UriComponents.Type.QUERY_PARAM does not match spec (_**""is duplicated by""**_) - #21259 UriComponentsBuilder does not encode ""+"" properly - #22006 Not encoding '+' in URLs anymore breaks backwards compatibility with apps running on spring 4 - #20750 Encoding of URI Variables on RestTemplate - #21473 UriUtils query param ""safe"" encoding mode (%-encode sub-delims)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f2e293aadf98cb64ba7ef3044b59f469efd21503  1 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2016-10-20T12:32:47Z","2019-01-13T20:31:50Z"
"","19051","LiveBeansView should expose FactoryBean's scope [SPR-14482]","**[Johnny Lim](https://jira.spring.io/secure/ViewProfile.jspa?name=izeye)** opened **[SPR-14482](https://jira.spring.io/browse/SPR-14482?redirect=false)** and commented  LiveBeansView doesn't respect FactoryBean (including SmartFactoryBean)'s scope.  This is a test to show it: https://github.com/izeye/spring-boot-throwaway-branches/blob/448ed084f14646d72dc533f9e5987c7cdf843982/src/test/java/learningtest/org/springframework/context/support/LiveBeansViewBeanScopeTests.java  and the result is as follows:  ```java [ { ""context"": ""org.springframework.context.annotation.AnnotationConfigApplicationContext@73f792cf"", ""parent"": null, ""beans"": [ { ""bean"": ""liveBeansViewBeanScopeTests.BeanScopeTestConfig"", ""scope"": ""singleton"", ""type"": ""learningtest.org.springframework.context.support.LiveBeansViewBeanScopeTests$BeanScopeTestConfig$$EnhancerBySpringCGLIB$$3db21cc4"", ""resource"": ""null"", ""dependencies"": [] }, { ""bean"": ""singletonObject"", ""scope"": ""singleton"", ""type"": ""com.izeye.throwaway.config.SingletonObject"", ""resource"": ""learningtest.org.springframework.context.support.LiveBeansViewBeanScopeTests$BeanScopeTestConfig"", ""dependencies"": [] }, { ""bean"": ""prototypeObject"", ""scope"": ""singleton"", ""type"": ""com.izeye.throwaway.config.PrototypeObject"", ""resource"": ""learningtest.org.springframework.context.support.LiveBeansViewBeanScopeTests$BeanScopeTestConfig"", ""dependencies"": [] }, { ""bean"": ""smartPrototypeObject"", ""scope"": ""singleton"", ""type"": ""com.izeye.throwaway.config.SmartPrototypeObject"", ""resource"": ""learningtest.org.springframework.context.support.LiveBeansViewBeanScopeTests$BeanScopeTestConfig"", ""dependencies"": [] }, { ""bean"": ""anotherPrototypeObject"", ""scope"": ""prototype"", ""type"": ""com.izeye.throwaway.config.AnotherPrototypeObject"", ""resource"": ""learningtest.org.springframework.context.support.LiveBeansViewBeanScopeTests$BeanScopeTestConfig"", ""dependencies"": [] }] }]  ```  Originally I reported it to Spring Boot because this affects to Spring Boot Actuator's /beans endpoint: https://github.com/spring-projects/spring-boot/issues/6411  ---  **Affects:** 4.3.1  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/6411  **Issue Links:** - #18773 LiveBeansView doesn't contain singletons registered programmatically","closed","status: bulk-closed,","spring-projects-issues","2016-07-19T03:13:45Z","2019-01-12T02:25:34Z"
"","19234","Drop NativeJdbcExtractor mechanism in favor of java.sql.Connection.unwrap() [SPR-14670]","**[John Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=jmithmstr)** opened **[SPR-14670](https://jira.spring.io/browse/SPR-14670?redirect=false)** and commented  Spring's `NativeJdbcExtractor` predates JDBC 4.0 and therefore `Connection#unwrap`. With JDBC 4 pools and drivers being reliably available now, there is no need to keep a separate mechanism around.  ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1090  **Issue Links:** - #18400 Remove native support for Hibernate 3.6 and 4.x - #19720 Drop outdated BeanFactoryLocator / beanRefContext.xml mechanism - #21038 NPE in Spring-JDBC with Oracle and SimpleJdbcInsert  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/427fd9b19a25f735c14a9c9ae7d45306895094f6, https://github.com/spring-projects/spring-framework/commit/07dd61eabdfe73a816cc71b44191afc8bbafcb51","closed","type: task,","spring-projects-issues","2016-09-05T08:38:09Z","2020-07-24T05:27:23Z"
"","19573","Provide a way to unregister a DataSource in SQLErrorCodesFactory [SPR-15006]","**[John Poth](https://jira.spring.io/secure/ViewProfile.jspa?name=jpoth)** opened **[SPR-15006](https://jira.spring.io/browse/SPR-15006?redirect=false)** and commented  Spring currently [caches](https://github.com/spring-projects/spring-framework/blob/master/spring-jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java#L88) the datasources and are removed by the Garbage collector once they are no longer used. It would be great to provide a way to allow the user to manually unregister a Datasource and not have to wait until a GC kicks in. This is a problem in OSGI and the current workaround is to get the error codes by Datasource [name](https://github.com/spring-projects/spring-framework/blob/master/spring-jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java#L160) so the cache isn't used.  So something like:  ``` public DataSource unregisterDatabase(DataSource dataSource) { 		synchronized (this.dataSourceCache) { 			return this.dataSourceCache.put(dataSource); 		} 	} ```  Would be great!   ---  **Affects:** 4.3.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8190e7838fc933fbc45a5205c8db2632f16703ee, https://github.com/spring-projects/spring-framework/commit/b825528d01c6d166118bf0cdd4f238d6b30864e1","closed","type: enhancement,","spring-projects-issues","2016-12-12T09:48:08Z","2016-12-21T11:54:09Z"
"","19593","LinkedCaseInsensitiveMap does not properly support Java 8's merge() and compute() methods [SPR-15026]","**[John Mark](https://jira.spring.io/secure/ViewProfile.jspa?name=springiscool)** opened **[SPR-15026](https://jira.spring.io/browse/SPR-15026?redirect=false)** and commented  `LinkedCaseInsensitiveMap` does not properly implement many of the new Map methods that have been added in Java 1.8 such as merge() and the compute* methods.  Using those methods on a `LinkedCaseInsensitiveMap` results in an entry that can never be retrieved.  ---  **Affects:** 4.3.4  **Issue Links:** - #18553 LinkedCaseInsensitiveMap doesn't implement getOrDefault properly - #19078 LinkedCaseInsensitiveMap doesn't override HashMap.clone() - #19653 HttpHeaders.keySet() is no longer case-insensitive  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e9a87de965c4bf35d2fff1afe3364232b93b5f6b, https://github.com/spring-projects/spring-framework/commit/505480cf630a09c55a4a21d82731a8b6e6212f7f, https://github.com/spring-projects/spring-framework/commit/8147c112f542c3ec384a177c11aafe3b9603deec, https://github.com/spring-projects/spring-framework/commit/50e5a65b2d76e0b62b262a6caf071698963d75b8","closed","in: core,","spring-projects-issues","2016-12-16T18:08:40Z","2019-01-11T15:19:06Z"
"","19305","Default async timeout handling results in Logged Exception for Tomcat 8.5.x [SPR-14739]","**[Johannes Edmeier](https://jira.spring.io/secure/ViewProfile.jspa?name=joshi)** opened **[SPR-14739](https://jira.spring.io/browse/SPR-14739?redirect=false)** and commented  When the response has been already committed and the request timeouts afterwards there is an AsyncRequestTimeoutException logged on Tomcat 8.5.x. When the response hasn't been committed no error is logged.  I guess this is due to the change in #19233. Is the logged exception expected behaviour?  ``` 2016-09-21 21:27:02.101 ERROR 18717 --- [nio-8080-exec-5] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.web.context.request.async.AsyncRequestTimeoutException] with root cause  org.springframework.web.context.request.async.AsyncRequestTimeoutException: null         at org.springframework.web.context.request.async.TimeoutDeferredResultProcessingInterceptor.handleTimeout(TimeoutDeferredResultProcessingInterceptor.java:42)         at org.springframework.web.context.request.async.DeferredResultInterceptorChain.triggerAfterTimeout(DeferredResultInterceptorChain.java:75)         at org.springframework.web.context.request.async.WebAsyncManager$5.run(WebAsyncManager.java:392)         at org.springframework.web.context.request.async.StandardServletAsyncWebRequest.onTimeout(StandardServletAsyncWebRequest.java:143)         at org.apache.catalina.core.AsyncListenerWrapper.fireOnTimeout(AsyncListenerWrapper.java:44)         at org.apache.catalina.core.AsyncContextImpl.timeout(AsyncContextImpl.java:131)         at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:157)         at org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:228)         at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53)         at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802)         at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1410)         at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)         at java.lang.Thread.run(Thread.java:745) ```  ---  **Affects:** 4.2.8, 4.3.3  **Issue Links:** - #19233 Default async request timeout handling does not work with Jetty 9.x  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/d44d40cde786d0bb15ae12fd3413c489ebdad431  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-09-21T19:29:37Z","2019-01-11T17:12:07Z"
"","19014","SSE: Terminating chunk not sent using tomcat >= 8.0.35 [SPR-14444]","**[Johannes Edmeier](https://jira.spring.io/secure/ViewProfile.jspa?name=joshi)** opened **[SPR-14444](https://jira.spring.io/browse/SPR-14444?redirect=false)** and commented  Since tomcat version 8.0.35 chrome complains about an `net::ERR_INCOMPLETE_CHUNKED_ENCODING` error. When you have a look in tcpdump you can see that the terminating chunk with size zero is missing and the tcp connection gets closed. Also a exception is thrown on the server side (for the next polling request?).  A tcp dump for wireshark is attached.  ``` 2016-07-08 18:40:00.918 ERROR 7382 --- [nio-8080-exec-6] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet dispatcherServlet threw exception  java.lang.IllegalStateException: Can't set AsyncWebRequest with concurrent handling in progress         at org.springframework.util.Assert.state(Assert.java:392)         at org.springframework.web.context.request.async.WebAsyncManager.setAsyncWebRequest(WebAsyncManager.java:108)         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:818)         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:743)         at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:961)         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:895)         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967)         at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:622)         at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)         at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)         at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:720)         at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:584)         at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:523)         at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:436)         at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:301)         at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:178)         at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)         at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)         at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:388)         at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1719)         at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:652)         at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1520)         at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1476)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)         at java.lang.Thread.run(Thread.java:745) ```    ---  **Affects:** 4.2.7  **Attachments:** - [error.dump.pcap](https://jira.spring.io/secure/attachment/23438/error.dump.pcap) (_1.45 kB_)  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2016-07-08T16:44:42Z","2019-01-14T04:38:47Z"
"","19370","SubProtocolWebSocketHandler should check session status before adding to map [SPR-14804]","**[Joe Sweden](https://jira.spring.io/secure/ViewProfile.jspa?name=mandudeboy)** opened **[SPR-14804](https://jira.spring.io/browse/SPR-14804?redirect=false)** and commented  Using websockets with mobile devices we are having issues with underlying native sessions leaking which causes OutOfMemory crashes after weeks of running in production. It seems to be related to closed sessions still existing in some map. We tried to trace it back and ended up in the SubProtocolWebSocketHandler and saw the fix described in #17409 as a possible solution (we were running Spring 4.1.4 where the fix doesn't exist).  Looking at the SubProtocolWebSocketHandler source for 4.2.1 I can see the improvement/fix but when I download and look at 4.3.3(current) it's no longer there. Is there a missing merge of this fix, or is there another reason why this code is no longer there?  ---  **Affects:** 4.3.3  **Issue Links:** - #17409 SubProtocolWebSocketHandler should check is session is open before adding it to its map","closed","in: web,","spring-projects-issues","2016-10-13T11:25:08Z","2019-01-11T17:30:00Z"
"","19310","Netty4ClientHttpRequestFactory should configure a default SslContext [SPR-14744]","**[Joaquim Pedro Silveira](https://jira.spring.io/secure/ViewProfile.jspa?name=pedroxs)** opened **[SPR-14744](https://jira.spring.io/browse/SPR-14744?redirect=false)** and commented  As title describes, when trying to use AsyncRestTemplate with a Netty4ClientHttpRequestFactory, the client is not properly configured by default for https servers.  I also tried with the following code, which results in an `HttpClientErrorException`:  ```java @Test public void asyncRestNetty() throws Exception {     final CountDownLatch latch = new CountDownLatch(1);     AsyncRestTemplate restTemplate = new AsyncRestTemplate(new Netty4ClientHttpRequestFactory());     // the client should send a request to an HTTPS server     ListenableFuture> listenableFuture = restTemplate.getForEntity(""https://example.org/some/resource"", String.class);     listenableFuture.addCallback((result) -> {         latch.countDown();         assertThat(result, is(notNullValue()));         assertThat(result.getBody(), is(not(isEmptyOrNullString())));     }, (throwable) -> {         latch.countDown();         fail(throwable.getMessage());     });     if (!latch.await(30, TimeUnit.SECONDS)) {         fail(""Timeout"");     } } ```  ---  **Affects:** 4.3.3  **Reference URL:** http://stackoverflow.com/questions/39639467/spring-resttemplate-asyncresttemplate-with-netty4-hangs-forever  **Issue Links:** - #19426 RestTemplate POST and PUT don't work with Netty4ClientHttpRequestFactory - #19455 Netty4ClientHttpRequestFactory should use SSL if port is 443 or scheme is https - #19668 Netty4ClientHttpRequestFactory should use SNI for TLS connections","closed","type: enhancement,","spring-projects-issues","2016-09-23T18:03:58Z","2019-01-11T17:12:43Z"
"","19504","Allow PayloadArgumentResolver to only apply to @Payload annotated parameters [SPR-14937]","**[Jens Zastrow](https://jira.spring.io/secure/ViewProfile.jspa?name=jzastrow)** opened **[SPR-14937](https://jira.spring.io/browse/SPR-14937?redirect=false)** and commented  PayloadArgumentResolver should only be activated when `@Payload` annotation actually added to a method parameter.  Example:  ``` @SqsListener(...)   public void handleMessage(@Header(""SentTimestamp"") Long t, @Payload Message m) ```  In our case we configured a custom PayloadArgumentResolver to a QueueMessageHandlerFactory with results it beeing added as **first** argument resolver. Since it always tries to resolve it breaks any other default resolver e.g. HeaderArgumentResolver  As workaround all default resolvers must also be added before the custom PayloadArgumentResolver.  More or less copy/paste from org.springframework.cloud.aws.messaging.listener.QueueMessageHandler.initArgumentResolvers()  ``` factory.setArgumentResolvers(       asList(         new HeaderMethodArgumentResolver(null, null),         new HeadersMethodArgumentResolver(),         new NotificationSubjectArgumentResolver(),         new AcknowledgmentHandlerMethodArgumentResolver(""Acknowledgment""),         new NotificationMessageArgumentResolver(compositeMessageConverter),         new PayloadArgumentResolver(compositeMessageConverter)         )     ); ```  ---  **Issue Links:** - #19217 Add RedirectAttributesMethodArgumentResolver to the default argument resolvers in ExceptionHandlerExceptionResolver","closed","type: enhancement,","spring-projects-issues","2016-11-23T10:39:09Z","2019-01-11T19:18:18Z"
"","19086","Do not fail with a circular @Import error caused by an @ComponentScan [SPR-14517]","**[Jean-Pierre Bergamin](https://jira.spring.io/secure/ViewProfile.jspa?name=ractive)** opened **[SPR-14517](https://jira.spring.io/browse/SPR-14517?redirect=false)** and commented  This ticket is a follow up on #17692:  We're facing a ""Configuration problem: A circular `@Import` has been detected"" error when upgrading from Spring Boot 1.3.1 to 1.3.5.  Our case is like:  A shared repository maven module contains:  ```java @Configuration @ComponentScan MyRepositoryContextConfiguration { } ```  ```java @Configuration @Import(MyRepositoryContextConfiguration.class) MyRepositoryTestConfiguration { } ```  A webapp using this shared repository (including it as a test-jar as well) has:  ```java @Configuration @Import(MyRepositoryTestConfiguration) MyWebappTestConfiguration { } ```  The component scan in the MyRepositoryContextConfiguration class picks up the MyRepositoryTestConfiguration again when running tests and leads to the following error:  ``` Configuration problem: A circular @Import has been detected: Illegal attempt by @Configuration class 'MyRepositoryTestConfiguration' to import class 'MyRepositoryTestConfiguration' as 'MyRepositoryTestConfiguration' is already present in the current import stack [MyRepositoryTestConfiguration->MyWebappTestConfiguration] ```  A `@ComponentScan` should not trigger this error since it's not an explicit `@Import` definition.  ---  **Affects:** 4.2.6  **Reference URL:** https://jira.spring.io/browse/SPR-13101?focusedCommentId=130875&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-130875  **Issue Links:** - #14977 ConfigurationClassParser needs to load annotations through source class loader - #18425 Spring does not reliably detect circular imports in Java configurations - #18860 `@Bean` not detected in extended interface - #17692 Improve circular import exception, in particular for `@Import` vs import through nesting  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","in: core,","spring-projects-issues","2016-07-27T11:56:22Z","2019-01-13T05:23:09Z"
"","19475","Allow ReschedulingRunnable to receive a TriggerContext on creation [SPR-14909]","**[Jean-Philippe Legault](https://jira.spring.io/secure/ViewProfile.jspa?name=jipi00636)** opened **[SPR-14909](https://jira.spring.io/browse/SPR-14909?redirect=false)** and commented  Allowing ReschedulingRunnable to receive a TriggerContext on creation (instead of always creating a new one) and updating the TaskScheduler interface to add a new signature ""ScheduledFuture schedule(Runnable task, Trigger trigger, TriggerContext initialContext);"" would allow me to resume a task that was created with a Trigger trough the TaskScheduler.  The current behavior is that a job scheduled with the TaskScheduler with the CronTrigger ""0 0 0 */2 * *"" task will run in 2 days from now, no matter what. Updating this would allow me to resume a task.  As an example, if I have the CronTrigger ""0 0 0 */2 * *"", and I know that the last time this task ran was yesterday, I could setup an initial TriggerContext to be passed along the TaskScheduler and used at the creation of the first ReschedulingRunnable instead of using a new one. The following ReschedulingRunnable that will be created would use the current Context, which mean the behavior would not change after the first pass.  ---  **Issue Links:** - #17987 Add ListenableScheduledFuture support to TaskScheduler","open","type: enhancement,","spring-projects-issues","2016-11-15T20:16:13Z","2019-01-11T19:20:44Z"
"","18977","Regression: DefaultCorsProcessor ignores already present Access-Control-Allow-Origin header [SPR-14406]","**[Jean-Charles Eloi](https://jira.spring.io/secure/ViewProfile.jspa?name=jeloi)** opened **[SPR-14406](https://jira.spring.io/browse/SPR-14406?redirect=false)** and commented  Hello,  My application is a spring boot 1.4.0.M3 application exposing spring MVC rest services.  Since the update to 1.4.0.M3, I experience problems with the CORS behaviour, which was until then totally managed by a custom filter.  Spring boot 1.4.0.M3's web starter pulls spring-web 4.3.0.RC2.  The problem is that along with my Access-Control-Allow-Origin: * response header was also being returned an Access-Control-Allow-Origin: [content of the Origin: header in the request]. The duplicate header was not really appreciated by the browser.  I traced the problem to the DefaultCorsProcessor and found that :  * Given a HttpServletResponse already containing CORS headers, the processor should do nothing, as per this section :  ```java if (responseHasCors(serverResponse)) {      logger.debug(""Skip CORS processing: response already contains \""Access-Control-Allow-Origin\"" header"");      return true; }       ```  The problem is that just above that,  ```java ServletServerHttpResponse serverResponse = new ServletServerHttpResponse(response); ```  does not preserve the initial response's headers, cf the constructor :  in org.springframework.http.server.ServletServerHttpResponse  ```java public ServletServerHttpResponse(HttpServletResponse servletResponse) {      Assert.notNull(servletResponse, ""HttpServletResponse must not be null"");      this.servletResponse = servletResponse;      this.headers = (servlet3Present ? new ServletResponseHttpHeaders() : new HttpHeaders()); } ```  The headers returned by this constructor are always empty, resulting in responseHasCors(serverResponse) always returning false, and eventually this leads to the CORS header duplication.  Am I missing something, because as is, this really seems broken ?  Best regards  ---  **Affects:** 4.3 GA  **Issue Links:** - #18797 Consistent handling of multi-valued headers in HttpHeaders  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15c96b8efd9cb0a1126c48f0fe8262101067162e","closed","type: bug,","spring-projects-issues","2016-06-27T12:01:37Z","2019-01-11T16:11:32Z"
"","18907","Make it possible to mock ApplicationEventPublisher in Spring Boot tests [SPR-14335]","**[Jean-Baptiste Nizet](https://jira.spring.io/secure/ViewProfile.jspa?name=jnizet)** opened **[SPR-14335](https://jira.spring.io/browse/SPR-14335?redirect=false)** and commented  This is a followup to [this bug](https://github.com/spring-projects/spring-boot/issues/6060) posted on the Spring Boot project.  ApplicationEventPublisher, which is a direct dependency of application components that must publish events, can't be mocked as other beans in Spring Boot tests, because it's not a ""regular"" Spring bean. Just testing that an event has been fired by a method thus requires workarounds such as defining a fake listener bean, and I think that workaround shouldn't be necessary.   ---  **Affects:** 4.3 RC2  5 votes, 6 watchers","open","type: enhancement,","spring-projects-issues","2016-06-07T06:43:49Z","2022-03-31T06:59:28Z"
"","19302","get Class package and location returns null when use   [SPR-14736]","**[jasperMin](https://jira.spring.io/secure/ViewProfile.jspa?name=jaspermin)** opened **[SPR-14736](https://jira.spring.io/browse/SPR-14736?redirect=false)** and commented  Recently, I use   """" config to support `@Configurable` annotation in my project.I found serious problems below when I trace the errors in my project. 1.XXX.class.getPackage() returns null 2.XXX.class.getProtectionDomain().getCodeSource().getLocation() returns null These problems disappear when I don't use """". The code  ""XXX.class.getPackage()"" is used in many dependencies such as the static method in com.mysql.jdbc.Util:  packageName = MultiHostConnectionProxy.class.getPackage().getName();  The null result of Class.getPackage() causes NullPointerException.    --- No further details from [SPR-14736](https://jira.spring.io/browse/SPR-14736?redirect=false)","open","type: enhancement,","spring-projects-issues","2016-09-20T04:40:49Z","2016-09-20T13:30:45Z"
"","19589","Support collections when expanding UriBuilder placeholders [SPR-15022]","**[Jaro Kuruc](https://jira.spring.io/secure/ViewProfile.jspa?name=koxo)** opened **[SPR-15022](https://jira.spring.io/browse/SPR-15022?redirect=false)** and commented   ---  **Affects:** 4.3.4","closed","status: bulk-closed,","spring-projects-issues","2016-12-15T07:42:23Z","2019-01-12T00:11:47Z"
"","19608","Regression with poolTargetSource and scoped proxy [SPR-15042]","**[Janne Valkealahti](https://jira.spring.io/secure/ViewProfile.jspa?name=jvalkeal)** opened **[SPR-15042](https://jira.spring.io/browse/SPR-15042?redirect=false)** and commented  It seems that this which is pretty much straight from docs works with 4.3.3 but not with 4.3.4, 4.3.5 or 5.0.0.BUILD-SNAPSHOT.  ``` @Bean @Scope(value = ""request"", proxyMode = ScopedProxyMode.TARGET_CLASS) public ProxyFactoryBean myObject() { 	ProxyFactoryBean pfb = new ProxyFactoryBean(); 	pfb.setTargetSource(poolTargetSource()); 	return pfb; }  @Bean public CommonsPool2TargetSource poolTargetSource() { 	CommonsPool2TargetSource pool = new CommonsPool2TargetSource(); 	pool.setMaxSize(3); 	pool.setTargetBeanName(""myObjectTarget""); 	return pool; }  @Bean(name = ""myObjectTarget"") @Scope(scopeName=""prototype"") public Object myObjectTarget() { 	return new Object(); } ```  ``` Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myObject' defined in BeanDefinition defined in com.example.ScopeConfiguration: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Cannot create scoped proxy for bean 'scopedTarget.myObject': Target type could not be determined at the time of proxy creation. 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:577) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:484) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.AbstractBeanFactory.isSingleton(AbstractBeanFactory.java:424) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:419) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:385) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:503) 	at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.getSinglePropertySourcesPlaceholderConfigurer(ConfigurationPropertiesBindingPostProcessor.java:259) 	at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.deducePropertySources(ConfigurationPropertiesBindingPostProcessor.java:238) 	at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.afterPropertiesSet(ConfigurationPropertiesBindingPostProcessor.java:202) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1668) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1605) 	... 59 more Caused by: java.lang.IllegalStateException: Cannot create scoped proxy for bean 'scopedTarget.myObject': Target type could not be determined at the time of proxy creation. 	at org.springframework.aop.scope.ScopedProxyFactoryBean.setBeanFactory(ScopedProxyFactoryBean.java:96) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeAwareMethods(AbstractAutowireCapableBeanFactory.java:1628) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1596) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:568) 	... 73 more ```  ---  **Affects:** 4.3.4  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/144  **Issue Links:** - #19458 Injecting bean in configurable class using load-time weaving broken when referenced on scoped-proxy class - #19382 Allow type produced by ScopedProxyFactoryBean to be determined before singleton is created","closed","in: core,","spring-projects-issues","2016-12-22T14:27:16Z","2019-01-11T15:16:25Z"
"","18908","AllEncompassingFormHttpMessageConverter ignores JAXB XML when Jackson used for JSON [SPR-14336]","**[Jan Zahornadsky](https://jira.spring.io/secure/ViewProfile.jspa?name=yankyo)** opened **[SPR-14336](https://jira.spring.io/browse/SPR-14336?redirect=false)** and commented  After changes introduced in #17894, the new conditions are causing that in a project that uses both XML (via JAXB) and JSON (via Jackson) AllEncompassingFormHttpMessageConverter no longer works correctly with XML.  Referring to the code in https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java, the condition for including Jaxb part converter should read  ```java // instead of && !jackson2Present if (jaxb2Present && !jackson2XmlPresent) { 	addPartConverter(new Jaxb2RootElementHttpMessageConverter()); } ```  ---  **Affects:** 4.2.6  **Issue Links:** - #17894 AllEncompassingFormHttpMessageConverter prioritizes Jackson 2 XML over JSON  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/abcfffdde9aa833c1ce493525e9d2b9e4f15c46c, https://github.com/spring-projects/spring-framework/commit/d0b2fe5e8c8e8d1a51f57f15ffbcbb8c2180b835  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","type: bug,","spring-projects-issues","2016-06-07T08:36:06Z","2019-01-11T16:07:06Z"
"","19343","Application destination prefix filter out SubscribeMapping [SPR-14777]","**[Jan Vodolan](https://jira.spring.io/secure/ViewProfile.jspa?name=wooff)** opened **[SPR-14777](https://jira.spring.io/browse/SPR-14777?redirect=false)** and commented  Currently, to succesfully use `@SubscribeMapping` a application-destination-prefix needs to be add to subscribe destination (on client). But then convertAndSend to the very same destination does not work.           	     	     	     		     	     	       `@Controller` public class WsController {      @SubscribeMapping(""*/log/config*"")     public ConfigurationData subscribeConfig(SimpMessageHeaderAccessor accessor) {             // ...     	return configData;     }          @MessageMapping(""/log/message"")     public void message(MessageData messageData, Principal principal, SimpMessageHeaderAccessor headerAccessor) {     	// ...     }  }  JavaScript ... stompClient.subscribe('**/app/log/config**', function(config) { showConfig(config.body); });  ... **template.convertAndSend(""/app/log/config"", payload); // not working** template.convertAndSend(""/log/config"", payload); // also not working  But... When client subscribe without app prefix stompClient.subscribe('**/log/config**', function(config) { showConfig(config.body); }); then `@SubscribeMapping` **does not work**. But messages are *succesfully sended *by template.convertAndSend(""/log/config"", payload);  But ... when application destintion prefix is removed from configuration  ... then everything is working. So, I think it is bug that `@SubscribeMapping` is somehow filtered out.  PS: `@MessageMapping` is working all the time    ---  **Affects:** 4.3.3","closed","status: bulk-closed,","spring-projects-issues","2016-10-04T08:29:55Z","2019-01-12T02:22:11Z"
"","18882","OPTIONS-preflight is not processed correctly (with CORS) [SPR-14310]","**[Jan Staggenborg](https://jira.spring.io/secure/ViewProfile.jspa?name=jan89)** opened **[SPR-14310](https://jira.spring.io/browse/SPR-14310?redirect=false)** and commented  Our application still returns Status-Code 401 (unauthorized) when trying to POST data Cross-Origin to a Spring 4.3.0.RC2 application. The OPTIONS preflight seems not to be possible unauthenticated. I could be wrong on this one, but shouldn't it work out-of-the-box now?  Setup looks basically like this:  angular version:  ```javascript $http({method: 'POST', withCredentials: true, url: 'http://localhost:8080/app/rest/document/visit',  data: calldata}) ```  Posting the data with jquery does work (and worked with Spring <4.3). I guess that jquery handles the preflight in a different way (sending credentials in preflight?) than angular does or that there is no preflight at all for specific cases.  Controller:  ```java @CrossOrigin @RequestMapping(value = ""/rest/document/visit"", method = RequestMethod.POST) public Type visit(final Principal principal, 			HttpServletRequest request) { ...... return result;		 } ```  Auth:  ```java http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.NEVER) .and()     .httpBasic() .and()     .csrf().disable()     .authenticationProvider(authenticationProvider())     .securityContext().securityContextRepository(ehCacheSecurityContextRepository()) .and()     .addFilterAfter(j2eePreAuthenticatedProcessingFilter(), SecurityContextPersistenceFilter.class)     .authorizeRequests()     .anyRequest().authenticated(); ```  The documentation says  ""`@RequestMapping` method have built-in support for HTTP OPTIONS. By default an HTTP OPTIONS request is handled by setting the ""Allow"" response header to the HTTP methods explicitly declared on all `@RequestMapping` methods with matching URL patterns. When no HTTP methods are explicitly declared the ""Allow"" header is set to ""GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS"". Ideally always declare the HTTP method(s) an `@RequestMapping` method is intended to handle.""   ---  **Affects:** 4.2.6, 4.3 RC2","closed","status: invalid,","spring-projects-issues","2016-05-27T10:01:45Z","2019-01-12T05:22:43Z"
"","19450","Single ehcache manager in a multi module project with multiple ehcache.xml files [SPR-14884]","**[James Selvakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=james@mcruncher.com)** opened **[SPR-14884](https://jira.spring.io/browse/SPR-14884?redirect=false)** and commented  I have a multi module project with all the modules defining their cache configurations in their own ehcache.xml. This use case is addressed by the now unmaintained ""ehcache-spring-annotations"" project (via a third party cache manager factory) through a configuration like this:  ```              ```  Basically, [ItcbEhCacheManagerFactoryBean](https://sourceforge.net/p/itcb/code/HEAD/tree/addons/itcb-cache/trunk/src/main/java/net/sf/itcb/addons/cachemanager/ItcbEhCacheManagerFactoryBean.java) merges all the ""ehcache.xml"" files found in various modules into one stream and effectively creating one cache manager.  Since we would like to migrate to Spring's Cache Abstraction, I tried something similar in Spring  ```             ```  However, I ran into this exception:  ``` Caused by: java.io.FileNotFoundException:  class path resource [classpath*:ehcache.xml] cannot be opened because it does not exist ```  I checked CompositeCacheManager and unfortunately, it's doesn't address our use-case specified. I personally feel it would be great to have this feature out of the box in Spring.   ---  **Reference URL:** http://stackoverflow.com/questions/40460488/spring-cache-abstraction-ehcache-integration-in-a-multi-module-project","closed","type: enhancement,","spring-projects-issues","2016-11-08T02:32:07Z","2020-10-06T03:32:55Z"
"","19574","Support for java.util.Optional as a @RequestBody [SPR-15007]","**[James Howe](https://jira.spring.io/secure/ViewProfile.jspa?name=jamesmhowe)** opened **[SPR-15007](https://jira.spring.io/browse/SPR-15007?redirect=false)** and commented  Unlike `@RequestParam` or `@PathVariable`, `@RequestBody` doesn't seem to understand that an `Optional` type should imply `required=false`, nor that `Optional.empty()` should be passed rather than `null`.  ---  **Affects:** 4.3.4  **Issue Links:** - #16448 Support for java.util.Optional as a `@RequestParam` - #13877 `@RequestBody` should have a required parameter to allow a request body to be optional - #17245 Support for java.util.Optional as a `@RequestPart`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f3cc4ab09debd404a4a6790128c5d4e4570a7c8b, https://github.com/spring-projects/spring-framework/commit/eeb7ae537feb79c7ed1a585e2c76f43bd021ef06","closed","type: enhancement,","spring-projects-issues","2016-12-12T16:57:22Z","2019-01-13T05:18:28Z"
"","19529","Rename ContentNegotiationConfigurer favorX [SPR-14962]","**[James Howe](https://jira.spring.io/secure/ViewProfile.jspa?name=jamesmhowe)** opened **[SPR-14962](https://jira.spring.io/browse/SPR-14962?redirect=false)** and commented  As [Content Negotiation using Spring MVC](https://spring.io/blog/2013/05/11/content-negotiation-using-spring-mvc) says:  > Note that favor does not mean use one approach in preference to another, it just enables or disables it.  Can new, less-misleading methods be added - e.g. `enablePathExtensions(boolean)` - and the existing ones deprecated?   ---  **Affects:** 4.3.4  **Reference URL:** https://spring.io/blog/2013/05/11/content-negotiation-using-spring-mvc","closed","status: bulk-closed,","spring-projects-issues","2016-11-30T17:22:33Z","2019-01-12T00:11:54Z"
"","19337","Ability to suppress ""rejectedValue"" in error responses [SPR-14771]","**[James Howe](https://jira.spring.io/secure/ViewProfile.jspa?name=jamesmhowe)** opened **[SPR-14771](https://jira.spring.io/browse/SPR-14771?redirect=false)** and commented  By default, validation errors on `@Controller` method parameters result in a response body detailing the specific `FieldError`s.  Primarily for security purposes, it would be desirable to disable the echoing of the `rejectedValue`, both globally and perhaps with some kind of field annotation. This would reduce the chance of sensitive data (passwords, PII, etc.) ending up in logs, for example.  I realise that the whole response can be fully customised anyway, but it seems like this sort of thing should be available by default, to help people secure their systems.  ---  **Issue Links:** - #18408 Addressing Mass Assignment vulnerabilities with `@NoBind` annotation for domain objects - #21857 Quartz job bean can't have constructor with injected parameters","open","type: enhancement,","spring-projects-issues","2016-09-30T11:16:51Z","2019-01-13T05:19:40Z"
"","18915","Caching annotation on interface are ignored when cglib proxies are used [SPR-14343]","**[James Howe](https://jira.spring.io/secure/ViewProfile.jspa?name=jamesmhowe)** opened **[SPR-14343](https://jira.spring.io/browse/SPR-14343?redirect=false)** and commented  Unlike other annotations such as `@Repository` or `@Secured`, the caching annotations are ignored when making calls to a CGLib proxy via the interface in which they are defined.  See attached project for details. Currently the test fails, but if `@EnableAspectJAutoProxy(proxyTargetClass = true)` is removed then it passes.  ---  **Affects:** 4.2.5  **Attachments:** - [example.7z](https://jira.spring.io/secure/attachment/23418/example.7z) (_5.68 kB_)  **Issue Links:** - #18894 CGLIB proxies should still consider `@Transactional` annotations on interface methods - #19836 Reliably detect `@Cacheable` declarations on interface methods","closed","type: enhancement,","spring-projects-issues","2016-06-08T11:31:24Z","2019-01-13T05:24:43Z"
"","18913","Allow @CachePut to specify the object to store using SpEL [SPR-14341]","**[James Howe](https://jira.spring.io/secure/ViewProfile.jspa?name=jamesmhowe)** opened **[SPR-14341](https://jira.spring.io/browse/SPR-14341?redirect=false)** and commented  Currently, `@CachePut` can only store the result of a method. Here are some examples where I'd like to store something else.  ``` @CachePut(object = ""#object"", key = ""#object.id"") public void save(object); ```  ``` @CachePut(object = ""#result.get()"", condition = ""#result.isPresent()"", key = ""#result.get().id"") public Optional getObject(); ```  ``` @Caching(   cacheable = @Cacheable(key = ""#key""),   put = @CachePut(object = ""#result.relatedObject"", key = ""#result.relatedObject.id"") ) public Object getObjectAndJoin(Serializable key); ```  ---  **Issue Links:** - #18804 Allow `@Cacheable` method to return java.util.Optional variant of cached value","closed","type: enhancement,","spring-projects-issues","2016-06-08T10:19:30Z","2019-01-13T05:24:44Z"
"","18861","Return 400 for PUT with Content-Range [SPR-14289]","**[James Howe](https://jira.spring.io/secure/ViewProfile.jspa?name=jamesmhowe)** opened **[SPR-14289](https://jira.spring.io/browse/SPR-14289?redirect=false)** and commented  From RFC 7231 §4.3.4  > An origin server that allows PUT on a given target resource MUST send a 400 (Bad Request) response to a PUT request that contains a Content-Range header field  This seems like something Spring can easily enforce across the board.   --- No further details from [SPR-14289](https://jira.spring.io/browse/SPR-14289?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-05-19T09:49:46Z","2016-05-23T17:16:22Z"
"","18853","Poor comparison for ContentRequestMatchers#bytes [SPR-14281]","**[James Howe](https://jira.spring.io/secure/ViewProfile.jspa?name=jamesmhowe)** opened **[SPR-14281](https://jira.spring.io/browse/SPR-14281?redirect=false)** and commented  This request matcher uses `assertEquals` instead of something like JUnit's `assertArrayEquals`. Because of this, the output on failure is  ``` java.lang.AssertionError: Request content  Expected :[B@7976d382 Actual   :[B@59f36439 ```  Instead of showing the actual difference between the arrays.   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java#L141  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/822e40e24f458ec00ffe9e67a79365ba82a9867c","closed","type: enhancement,","spring-projects-issues","2016-05-17T15:50:07Z","2016-06-10T09:19:12Z"
"","19367","Cache annotation lookup in 4.3 finds more annotations than in 4.2 [SPR-14801]","**[Jakob Fels](https://jira.spring.io/secure/ViewProfile.jspa?name=kamikazee)** opened **[SPR-14801](https://jira.spring.io/browse/SPR-14801?redirect=false)** and commented  Hi, I'm currently trying to use caching in my application, and I noticed that Spring 4.3 breaks previously working behaviour. My implementation uses a spring cloud netflix Feign client with a fallback, the cache is only used in case of errors. The current setup is that the main client uses `@CachePut` so that the data returned is always current. In case of an error the fallback acts and uses `@Cacheable` to return cached results or throws an exception if there are no cached results. Due to the way spring cloud's feign integration works, the main client is an annotated interface and the fallback is a bean implementing this interface.  When using spring 4.2 (through spring boot 1.3.x) the setup works as expected. But when upgrading to 4.3 (spring boot 1.4.x) the caching no longer works. I tracked the change in behaviour down to the introduction of the merged annotation lookup (In SpringCacheAnnotationParser). For the fallback, the old lookup used in 4.2 would only return the `@Cacheable` annotation. Starting with 4.3, AnnotatedElementUtils.findAllMergedAnnotations will also return the `@CachePut` from the interface. Due to both annotation being parsed for the fallback, the caching logic will ignore the `@Cacheable` step, since it assumes a CachePut just happened, meaning the cached values will never be returned.  I hope this description is sufficient, but I could try and provide an example if needed  ---  **Affects:** 4.3.3  **Issue Links:** - #19347 `@CacheConfig`(cacheNames) broken when used on interface - #18054 Support `@Cache`* as merged composed annotations - #19836 Reliably detect `@Cacheable` declarations on interface methods","closed","type: regression,","spring-projects-issues","2016-10-12T13:29:06Z","2019-01-13T05:19:27Z"
"","18942","Flush  outputstream  in  AbstractHttpMessageConverter.write will cause  it is   not effective that  add some attributes to the session at  HandlerInterceptorAdapter.postHandle or  HandlerInterceptorAdapter.afterCompletion; [SPR-14369]","**[Jacarri Chan](https://jira.spring.io/secure/ViewProfile.jspa?name=jacarrichan)** opened **[SPR-14369](https://jira.spring.io/browse/SPR-14369?redirect=false)** and commented  ""outputMessage.getBody().flush();""  at https://github.com/spring-projects/spring-framework/blob/4.1.x/spring-web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java#L209   ,  i think it  should be removed.  Because  wil cause  it is   not effective that  add some attributes to the session at  HandlerInterceptorAdapter.postHandle or  HandlerInterceptorAdapter.afterCompletion;   ---  **Affects:** 4.1.7  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/4.1.x/spring-web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java","closed","type: enhancement,","spring-projects-issues","2016-06-16T03:47:17Z","2016-06-17T12:52:44Z"
"","19327","IPv6 + Origin header + X-Forwarded-Host header gives NumberFormatException (Safari10 / CORS) [SPR-14761]","**[Jaap](https://jira.spring.io/secure/ViewProfile.jspa?name=jaap)** opened **[SPR-14761](https://jira.spring.io/browse/SPR-14761?redirect=false)** and commented  When an IPv6-only client connects to our WebApp which uses Spring 4.3.2  And the browser sends an Origin header (Safari 10 does this under certain circumstances)  And the LoadBalancer/Reverse Proxy adds an X-Forwarded-Host header (with the IPv6 address)  Then you get a java.lang.NumberFormatException: For input string: ""a51:0:920::30:20"" at org.springframework.web.util.UriComponentsBuilder.adaptFromForwardedHeaders(UriComponentsBuilder.java:691)  It appears that this CORS code is IPv4 only?   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/306452720f485f22777eb6c81f58d23c67b60439, https://github.com/spring-projects/spring-framework/commit/ea5ff87f8ec8d34871aaf3bcc49a165e2db076e5, https://github.com/spring-projects/spring-framework/commit/8751c9931e7aed007fd612c8ef13b043100e818a  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","type: bug,","spring-projects-issues","2016-09-28T09:46:12Z","2016-11-07T22:01:23Z"
"","19207","Provide Dynamic Scheduling similar to quartz [SPR-14641]","**[Izuchukwu Oleka](https://jira.spring.io/secure/ViewProfile.jspa?name=pretizy)** opened **[SPR-14641](https://jira.spring.io/browse/SPR-14641?redirect=false)** and commented  this would be a smoother implementation with the `@Scheduled` annotation rather than resorting to using quartz.   --- No further details from [SPR-14641](https://jira.spring.io/browse/SPR-14641?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2016-08-29T21:50:16Z","2019-01-12T02:25:07Z"
"","19233","Default async request timeout handling does not work with Jetty 9.x [SPR-14669]","**[Izek Greenfield](https://jira.spring.io/secure/ViewProfile.jspa?name=igreenfi1)** opened **[SPR-14669](https://jira.spring.io/browse/SPR-14669?redirect=false)** and commented  when I use async spring-mvc I send request with body:  PUT http://localhost/kuku?key=EKUpdateTestUpdate  Body: { ""1"": 1 }  if the request timed out then the error I get is:  org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing:  log file attached!  ---  **Affects:** 4.3.2  **Attachments:** - [izek-sim.zip](https://jira.spring.io/secure/attachment/23534/izek-sim.zip) (_62.26 kB_) - [log.txt](https://jira.spring.io/secure/attachment/23533/log.txt) (_12.29 kB_)  **Issue Links:** - #19305 Default async timeout handling results in Logged Exception for Tomcat 8.5.x  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2016-09-04T08:32:30Z","2019-01-11T18:22:46Z"
"","18879","BeanCurrentlyInCreationException error depends on @ComponentScan basePackages values order [SPR-14307]","**[István pató](https://jira.spring.io/secure/ViewProfile.jspa?name=patoi)** opened **[SPR-14307](https://jira.spring.io/browse/SPR-14307?redirect=false)** and commented  https://github.com/spring-projects/spring-boot/issues/6045  We have an issue with 'circular reference' error. When I started my Spring Boot app on my Ubuntu 16.04 desktop OS, the issue is not showing up. If I running the app on the Ubuntu 16.10 Server OS, then I get an error:  _Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'exampleService': Requested bean is currently in creation: Is there an unresolvable circular reference?_  If I change  ```java @ComponentScan(basePackages = ""org.springframework.boot.issues.ghXXXX"") ```  to  ```java @ComponentScan(basePackages = {""org.springframework.boot.issues.ghXXXX.server"", ""org.springframework.boot.issues.ghXXXX.service"", ""org.springframework.boot.issues.ghXXXX""}) ```  then I don't get BeanCurrentlyInCreationException on Ubuntu 16.10 Server OS.  I can reproduce the issue with a maven project. The code is failing on same OS, if I change `@ComponentScan` basePackages order.   ---  **Affects:** 4.2.6  **Reference URL:** https://github.com/patoi/spring-boot-issues/tree/gh-6045/gh-6045  3 votes, 6 watchers","open","in: core,","spring-projects-issues","2016-05-26T12:20:36Z","2022-05-25T12:04:14Z"
"","19150","'Invalid column type' exception generated when writing a Boolean data member to Oracle database  [SPR-14581]","**[Ionut Gradinaru](https://jira.spring.io/secure/ViewProfile.jspa?name=ionuteduard)** opened **[SPR-14581](https://jira.spring.io/browse/SPR-14581?redirect=false)** and commented  Spring JDBC uses StatementCreatorUtils to identify the mapping between Java data types and the SQL data types when persisting DOs using BeanPropertySqlParameterSource for DO to table mapping. The data type mappings are hard coded in StatementCreatorUtils and the following new mapping have been added starting from v 4.2.3: javaTypeToSqlTypeMap.put(boolean.class, Types.BOOLEAN); javaTypeToSqlTypeMap.put(Boolean.class, Types.BOOLEAN); The Oracle JDBC driver does not know how to handle Types.BOOLEAN for the target DB column, so we get the ‘java.sql.SQLException: Invalid column type’ when trying to write a DO which has a boolean data member To bypass this issue in the application domain, the hard coded data type map defined in StatementCreatorUtils may updated by removing the faulty mappings using reflection. Please consider addressing this issue in the framework domain too.  ---  **Affects:** 4.2.4  **Issue Links:** - #18688 Java boolean is not handled correctly when used with Oracle JDBC driver (_**""duplicates""**_) - #16223 JdbcTemplate should support JDBC 4.1 getObject(columnIndex, type)","closed","status: duplicate,","spring-projects-issues","2016-08-11T07:44:25Z","2019-01-12T16:45:31Z"
"","18981","Possible issue with handling http method OPTIONS [SPR-14410]","**[Ionut David](https://jira.spring.io/secure/ViewProfile.jspa?name=iodavid)** opened **[SPR-14410](https://jira.spring.io/browse/SPR-14410?redirect=false)** and commented  I currently upgraded spring framework to 4.3 from 4.2.5 and all of the integration tests that use OPTIONS method are failing. For the test we use RestAssured and the scenario is like this:  ```java  given().     	auth().basic(some_user_Name, some_password).     	when().options(""some_base_path"").     	then().statusCode(200).and().header(....) ```  I see that the way the http request method matching is changed and specially for method OPTIONS.  Code snippet from RequestMethodsRequestCondition:  ```java public RequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request) { 		if (CorsUtils.isPreFlightRequest(request)) { 			return matchPreFlight(request); 		} 		if (getMethods().isEmpty()) { 			if (RequestMethod.OPTIONS.name().equals(request.getMethod())) { 				return null; // No implicit match for OPTIONS (we handle it) 			} 			return this; 		} 		return matchRequestMethod(request.getMethod()); 	} ```  but in RequestMappingInfo.getMatchingCondition sinse the getMatchingCondition for http methods return null my url won't be matched.  ```java public RequestMappingInfo getMatchingCondition(HttpServletRequest request) { RequestMethodsRequestCondition methods = this.methodsCondition.getMatchingCondition(request); .... if (methods == null || params == null || headers == null || consumes == null || produces == null) { 			return null; 		} ... } ```  Thanks in advance for the help.   ---  **Affects:** 4.3 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9c29ed75f8aeaf224730522a57bcb67903417bb1","closed","type: bug,","spring-projects-issues","2016-06-28T07:54:44Z","2016-07-04T10:17:10Z"
"","19459","TemplateInputException MVC spring-boot-starter-parent [SPR-14893]","**[Ihor](https://jira.spring.io/secure/ViewProfile.jspa?name=doom)** opened **[SPR-14893](https://jira.spring.io/browse/SPR-14893?redirect=false)** and commented  pom.xml  ```          org.springframework.boot         spring-boot-starter-parent         1.4.1.RELEASE                                 org.springframework.boot             spring-boot-starter-data-rest                               org.springframework.boot             spring-boot-starter-data-mongodb                               org.springframework.boot             spring-boot-starter-thymeleaf                               org.springframework.boot             spring-boot-devtools             true                               org.springframework.boot             spring-boot-starter-test             test                               commons-codec             commons-codec             1.9                               com.google.code.gson             gson             2.7                              1.8                                                   org.springframework.boot                 spring-boot-maven-plugin                            ```  ``` @RequestMapping(value = ""/jira/update/{noteId}"", method = RequestMethod.POST)     public void findNoteUpdate(@PathVariable String noteId, Model model) { } ```  ``` 2016-11-09 19:02:13.860 ERROR 32282 --- [nio-8080-exec-1] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-1] Exception processing template ""jira/update/NOTE-1365"": Error resolving template ""jira/update/NOTE-1365"", template might not exist or might not be accessible by any of the configured Template Resolvers 2016-11-09 19:02:13.871 ERROR 32282 --- [nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template ""jira/update/NOTE-1365"", template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause  org.thymeleaf.exceptions.TemplateInputException: Error resolving template ""jira/update/NOTE-1365"", template might not exist or might not be accessible by any of the configured Template Resolvers 	at org.thymeleaf.TemplateRepository.getTemplate(TemplateRepository.java:246) ~[thymeleaf-2.1.5.RELEASE.jar:2.1.5.RELEASE] 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1104) ~[thymeleaf-2.1.5.RELEASE.jar:2.1.5.RELEASE] 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060) ~[thymeleaf-2.1.5.RELEASE.jar:2.1.5.RELEASE] 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011) ~[thymeleaf-2.1.5.RELEASE.jar:2.1.5.RELEASE] 	at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335) ~[thymeleaf-spring4-2.1.5.RELEASE.jar:2.1.5.RELEASE] 	at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190) ~[thymeleaf-spring4-2.1.5.RELEASE.jar:2.1.5.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1257) ~[spring-webmvc-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1037) ~[spring-webmvc-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:980) ~[spring-webmvc-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) ~[spring-webmvc-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872) ~[spring-webmvc-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:648) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.5.jar:8.5.5] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:89) ~[spring-web-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) ~[spring-web-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) ~[tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:784) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1410) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_101] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_101] 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_101] ```    --- No further details from [SPR-14893](https://jira.spring.io/browse/SPR-14893?redirect=false)","closed","status: invalid,","spring-projects-issues","2016-11-09T17:12:35Z","2019-01-12T05:21:39Z"
"","19176","Child spring app context refresh causes app micro downtime during which the app server responds with error 404 [SPR-14608]","**[Igors Sakels](https://jira.spring.io/secure/ViewProfile.jspa?name=igors%20sakels)** opened **[SPR-14608](https://jira.spring.io/browse/SPR-14608?redirect=false)** and commented  Architecture used: -Spring 3.2.9(the same issue with 4.3.2) -RestEasy 2.3.2(the same issue with 3.0.19) -one common parent spring app context -multiple child spring app contexts with ability to reinit(destroy-create-refresh) in live.  Issue: During child spring app context refresh, the `ContextRefreshedEvent` is propagated to parent spring app context, that causes the micro downtime. Original code looks like this `org.springframework.context.support.AbstractApplicationContext.publishEvent()` line 329:  ``` if (this.parent != null) { 			this.parent.publishEvent(event); 		} ```  This workaround change prevents the issue:  ``` if (this.parent != null && !(event instanceof ContextRefreshedEvent)) { 			this.parent.publishEvent(event); 		} ```  Proper solution is very much appreciated.  p.s. how dangerous is this mentioned workaround? There is one listener for `ContextRefreshedEvent` in the app code, its' content is triggered only for the main(parent) app context:  ``` @Override     public void onApplicationEvent(ApplicationContextEvent applicationEvent) {         if (applicationEvent instanceof ContextRefreshedEvent && applicationEvent.getApplicationContext().getParent() == null) { ... }} ```  There are not changes in the parent spring app context during the reinit.   ---  **Affects:** 4.3.2  **Attachments:** - [Spring404.7z](https://jira.spring.io/secure/attachment/23525/Spring404.7z) (_2.94 kB_)","closed","status: bulk-closed,","spring-projects-issues","2016-08-19T12:54:11Z","2019-01-12T02:25:16Z"
"","19152","Method getMergedProperties in ReloadableResourceBundleMessageSource does not set fileTimestamp [SPR-14583]","**[Igor Stepanov](https://jira.spring.io/secure/ViewProfile.jspa?name=stepio.ua)** opened **[SPR-14583](https://jira.spring.io/browse/SPR-14583?redirect=false)** and commented  Hello Spring team,  I'd like to use ReloadableResourceBundleMessageSource to implement REST service to access localized content. And to achieve best performance, I'd like to support caching with ""if-modified-since"". So the idea is to rely on PropertiesHolder.getFileTimestamp() method to understand if some of the underlying property files was updated or not.  I've extended ReloadableResourceBundleMessageSource and call next method:  ```java protected PropertiesHolder getMergedProperties(Locale locale) {      PropertiesHolder mergedHolder = this.cachedMergedProperties.get(locale);      if (mergedHolder != null) {           return mergedHolder;      }      Properties mergedProps = newProperties();      mergedHolder = new PropertiesHolder(mergedProps, -1);      String[] basenames = StringUtils.toStringArray(getBasenameSet());      for (int i = basenames.length - 1; i >= 0; i--) {           List filenames = calculateAllFilenames(basenames[i], locale);           for (int j = filenames.size() - 1; j >= 0; j--) {                String filename = filenames.get(j);                PropertiesHolder propHolder = getProperties(filename);                if (propHolder.getProperties() != null) {                         mergedProps.putAll(propHolder.getProperties());                }           }      }      PropertiesHolder existing = this.cachedMergedProperties.putIfAbsent(locale, mergedHolder);      if (existing != null) {           mergedHolder = existing;      }      return mergedHolder; } ```  However in current implementation property fileTImestamp is initialized with -1 and never gets updated, so it's not really useful. What do you think about updating it with latest fileTimestamp of the PropertiesHolder instances which are merged into this one?  Moreover, what about adding some setPropertiesChangedCallback() method to make it possible to subscribe to the file updates? In my case this change will allow to push changes to consumer through some message bus and prevent repeated checking through REST interface.  ---  **Affects:** 4.3.2  **Issue Links:** - #16791 Race condition in ReloadableResourceBundleMessageSource since 4.1.0 - #15133 ReloadableResourceBundleMessageSource locks properties hashmap and fails under load. - #17265 ResourceBundleMessageSource should allow for custom PropertyResourceBundle subclass - #14948 Allow adding resources to ReloadableResourceBundleMessageSource","closed","type: enhancement,","spring-projects-issues","2016-08-12T07:36:52Z","2019-01-11T18:03:36Z"
"","18891","Incorrect annotation is given in ""Cache Abstraction"" part of Spring reference [SPR-14319]","**[Igor Stepanov](https://jira.spring.io/secure/ViewProfile.jspa?name=stepio.ua)** opened **[SPR-14319](https://jira.spring.io/browse/SPR-14319?redirect=false)** and commented  While studying the documentation for Spring Cache I've spotted a minor issue here:  > Since the Spring Framework 4.1, the caching abstraction fully supports the JCache standard annotations: these are `@CacheResult`, `@CacheEvict`, `@CacheRemove` and `@CacheRemoveAll` as well as the `@CacheDefaults`, `@CacheKey` and `@CacheValue` companions. These annotations can be used right the way without migrating your cache store to JSR-107: the internal implementation uses Spring's caching abstraction and provides default CacheResolver and KeyGenerator implementations that are compliant with the specification. In other words, if you are already using Spring's caching abstraction, you can switch to these standard annotations without changing your cache storage (or configuration, for that matter).  Correct me if I'm wrong, but I think here should be ""CachePut"" annotation instead of ""CacheEvict"".   ---  **Affects:** 4.2.6  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html#cache-jsr-107  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ad29db86755e190a6352ca21ad27c5a74bb56209","closed","in: core,","spring-projects-issues","2016-05-31T08:13:58Z","2016-07-04T10:55:33Z"
"","19265","Mockito fails to verify the second time on the proxied bean [SPR-14701]","**[Igor Mukhin](https://jira.spring.io/secure/ViewProfile.jspa?name=iimuhin)** opened **[SPR-14701](https://jira.spring.io/browse/SPR-14701?redirect=false)** and commented  I discovered this bug by using `@SpyBean` in a Spring Boot 1.4.0 web application. But [the bug ](https://github.com/spring-projects/spring-boot/issues/6871) is reproducable without Spring Boot and `@SpyBean`, so [snicoll](https://github.com/spring-projects/spring-boot/issues/6871#issuecomment-246389189) said I should file the bug here.  ---  It looks like there is an issue with verifying **multiple times** with Mockito on a **proxied** bean.  Test-case:  ```java public class SpringBootMockitoTest {      private AnnotationConfigApplicationContext context;      private SomeServiceWithTransact someServiceWithTransact;     private SomeServiceNoTransact someServiceNoTransact;      @Configuration     @EnableTransactionManagement     public static class Config {          @Bean         public SomeServiceWithTransact someServiceWithTransact() {             return new SomeServiceWithTransact();         }          @Bean         public SomeServiceNoTransact someServiceNoTransact() {             return new SomeServiceNoTransact();         }          @Bean         public PlatformTransactionManager tm() {             return new DataSourceTransactionManager(dataSource());         }          @Bean         public DataSource dataSource() {             return DataSourceBuilder.create()                              .driverClassName(""org.h2.Driver"")                              .url(""jdbc:h2:mem:tst;DB_CLOSE_DELAY=-1"")                              .username(""sa"")                              .password("""")                              .build();         }      }      private static class SomeServiceNoTransact {          public void normalMethod(int param1) {             // do nothing         }      }      private static class SomeServiceWithTransact {          @Transactional         public void transactionalMethod(int param1) {             // do nothing         }              }      @Before     public void setUp() throws Exception {         context = new AnnotationConfigApplicationContext(Config.class);         context.start();          someServiceWithTransact = context.getBean(SomeServiceWithTransact.class);         someServiceNoTransact = context.getBean(SomeServiceNoTransact.class);     }      @After     public void tearDown() throws Exception {         context.stop();     }      @Test     public void testNormalMethod() throws Exception {         SomeServiceNoTransact serviceSpy = spy(someServiceNoTransact);          // when         serviceSpy.normalMethod(1);          // then         Mockito.verify(serviceSpy, Mockito.times(1)).normalMethod(1);         Mockito.verify(serviceSpy, Mockito.times(1)).normalMethod(anyInt());     }      @Test     public void testTransactionalMethod() throws Exception {         SomeServiceWithTransact serviceSpy = spy(someServiceWithTransact);          // when         serviceSpy.transactionalMethod(1);          // then         Mockito.verify(serviceSpy, Mockito.times(1)).transactionalMethod(1);         Mockito.verify(serviceSpy, Mockito.times(1)).transactionalMethod(anyInt());     } } ```  Now:  - `testNormalMethod()` will be green and all right - `testTransactionalMethod()` will be red and it is not all right. The only difference to the first test in the code is that the method unter test is annotated with `@Transactional`  `testTransactionalMethod()` fails with:  ``` org.mockito.exceptions.misusing.UnfinishedVerificationException:  Missing method call for verify(mock) here: -> at de.audi.pbt.problem.service.MockitoIT.testTransactionalMethod(MockitoIT.java:123) ```  But! * If you remove `@Transactional` form the bean under test, the test will become green. * If you remove the first call to `verify`, the test will become green.  ---  **Affects:** 4.3.2","closed","status: invalid,","spring-projects-issues","2016-09-12T19:23:07Z","2019-01-13T05:20:20Z"
"","19123","Annotation Enum AutowiredMap [SPR-14555]","**[Igor Dmitriev](https://jira.spring.io/secure/ViewProfile.jspa?name=shoot3r)** opened **[SPR-14555](https://jira.spring.io/browse/SPR-14555?redirect=false)** and commented  Hi there, I am wondering about a such kind of functionality: I would like to have an opportunity to autowire map with key - enum, values - beans. I know it's possible to do it via xml configuration (for instance using MapFactoryBean). And by default we can autowire map with key - String (bean class name) and value - Bean. But it will be cool to do it via annotation configuration, like this:  ``` @Component public class WoodlandParkZoo implements Zoo {      @AutowiredMap // or @Autowired     private Map animals;      @Override     public String say(LifeArea lifeArea) {         return animals.get(lifeArea).say();     } }   @Component @MapKeyEnumerated(key = LifeArea.DESERT) public class Lion implements Animal {     @Override     public String say() {         return ""r-r-r!"";     } }  ```  but now I just can do like this, as I know:  ``` private final Map animals = new HashMap<>();      @Autowired     public WoodlandParkZoo(@Qualifier(""lion"") Animal lion, @Qualifier(""seal"") Animal seal) {         animals.put(LifeArea.DESERT, lion);         animals.put(LifeArea.SEA, seal);     }      @Override     public String say(LifeArea lifeArea) {         String say = animals.get(lifeArea).say();         if (say == null) {             throw new IllegalArgumentException(""There is no animal in the zoo"");         }         return say;     } ```  But I think it will be easier and more comfortable to have the previous feature, using `@AutowiredMap` annotation.  I have a solution, workaround here - https://github.com/Playmate/SpringAutowiredMap.git.   ---  **Affects:** 4.3.2  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1496  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2016-08-02T18:44:40Z","2021-11-26T09:59:54Z"
"","18017","Ambiguous sentence in the cache documentation [SPR-14399]","**[Igor Bolic](https://jira.spring.io/secure/ViewProfile.jspa?name=igor.bolic)** opened **[SPR-14399](https://jira.spring.io/browse/SPR-14399?redirect=false)** and commented  Ambiguous sentence in the cache documentation:  ??If true, the method is cached - if not, it behaves as if the method is not cached, that is executed every since time no matter what values are in the cache or what arguments are used.??  In this part _""that is executed every since time no matter what values are in the cache or what arguments are used""_ , the _""since""_ should probably be removed.   ---  **Affects:** 3.2.17, 4.2.6, 4.3 GA  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html#cache-annotations-cacheable-condition  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","type: documentation,","spring-projects-issues","2016-06-25T11:35:08Z","2016-07-04T10:17:09Z"
"","18875","BeanCreationException for factory-method-created bean [SPR-14303]","**[Ievgen Starodiedov](https://jira.spring.io/secure/ViewProfile.jspa?name=ghosty)** opened **[SPR-14303](https://jira.spring.io/browse/SPR-14303?redirect=false)** and commented  The following bean declaration causes BeanCreationException:  ```xml             ```  (!) Path to file with bean definition is partially hidden according to NDA (!)  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'submissionDateFormatter' defined in file [%path%\target\classes\spring\integration\elections-submission-service-int.xml]: No matching factory method found: factory method 'ofPattern(String,Locale)'. Check that a method with the specified name and arguments exists and that it is static. 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:551) ~[spring-beans-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1113) ~[spring-beans-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1008) ~[spring-beans-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:505) ~[spring-beans-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) ~[spring-beans-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) ~[spring-beans-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:229) ~[spring-beans-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) ~[spring-beans-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) ~[spring-beans-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:725) ~[spring-beans-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:139) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:83) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at com.ubs.f35.core.server.container.ContainerStart.main(ContainerStart.java:25) ~[core-server-container-3.0.1.jar:na] ```  The same declaration without constructor argument names causes no exception though  ```xml             ```  ---  Spring version - **4.1.0.RELEASE** Java version - **1.8.0_05**  ---  **Issue Links:** - #18559 Unique XML-specified constructor not accepted in case of unresolvable name (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2016-05-25T07:24:30Z","2019-01-13T15:49:57Z"
"","19427","Log exception from @ExceptionHandler at higher level than debug [SPR-14861]","**[Ibrahim Ghazal](https://jira.spring.io/secure/ViewProfile.jspa?name=ibrahim.mg)** opened **[SPR-14861](https://jira.spring.io/browse/SPR-14861?redirect=false)** and commented  If an `@ExceptionHandler` annotated method throws an exception, the exception is only logged at the Debug level (see: https://github.com/spring-projects/spring-framework/blob/9ccffb6de5783b970d06d5aa036531d46524aa9b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java#L385 ). This means that by default, no log is produced. I think this should instead be logged at Error level.  Note that spring-web-reactive already logs it at the Error level (see: https://github.com/spring-projects/spring-framework/blob/9ccffb6de5783b970d06d5aa036531d46524aa9b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java#L241 )  ---  **Affects:** 4.3.3  **Issue Links:** - #19473 ExceptionHandlerExceptionResolver should not log propagated exceptions at warn level - #18504 Exclude an exception from `@ExceptionHandler`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7627c38695fbe4b2457640548cc03041abed3618, https://github.com/spring-projects/spring-framework/commit/7e80d2de79b006c1a7db3199411187efbdaff803","closed","type: enhancement,","spring-projects-issues","2016-10-30T06:50:19Z","2019-01-13T05:19:13Z"
"","18988","@Component and @Bean with same name [SPR-14417]","**[Hubertus Willuhn](https://jira.spring.io/secure/ViewProfile.jspa?name=h.willuhn)** opened **[SPR-14417](https://jira.spring.io/browse/SPR-14417?redirect=false)** and commented  Hi,  i am developing a java application that uses Spring. I got many different beans and two java config classes.  All works fine up to the point at which i tried to integrate a new feature. The new feature uses some additional beans. So i decide to put them into one of the java config classes like:  ```java @Configuration public class DownloadConfig { 	@Bean 	@Profile ({""update"", ""upd""}) 	public LLDownloader updateDownloader() throws Exception 	{ 		return new LLDownloader(); 	}  	@Bean 	@Profile ({""update"", ""upd""}) 	public CompanionDownloadProcessor updateProcessor(LLDownloader downloader) 			throws Exception 	{ 		return new CompanionDownloadProcessor(downloader, getDownloadDir()); 	}  ... } ```  This is nice and works. But i made a mistake: i added a new Component like:  ```java @Component @ThreadSafe @Profile ({""update"", ""upd""}) public class UpdateDownloader extends Downloader { 	@Autowired 	public UpdateDownloader(@Update CompanionDownloadProcessor processor) 	{ 		System.out.println(""Hello World"");  		this.processor = processor; 	}  ... } ```  This new component does not get loaded by Spring. After hours of testing i finally realized that the bean gets overwritten, because of the name.  The problem is the same like in #18552 and #17504.  Could you add something like a warn or info message to the logger for those scenarios? Its a primitive bug of the developer to do such things but it happen so fast and its nearly unpossible to track them in complex applications without a simple hint like: ""Spring Loader detected two beans with the same name, will overwrite"".  Thanks in advanced for response.   ---  **Affects:** 4.2.5","closed","status: bulk-closed,","spring-projects-issues","2016-06-29T11:12:49Z","2019-01-14T04:38:50Z"
"","19458","Injecting bean in configurable class using load-time weaving broken when referenced on scoped-proxy class [SPR-14892]","**[Holger Stenzhorn](https://jira.spring.io/secure/ViewProfile.jspa?name=holger)** opened **[SPR-14892](https://jira.spring.io/browse/SPR-14892?redirect=false)** and commented  In version 4.3.3 the following code to inject a bean into a Hibernate entity using load time weaving worked flawlessly and `someBean` is correctly set _but_ after upgrading to version 4.3.4 `someBean` is now `null`.  ``` @Configurable(preConstruction = true) @Entity public class ExampleEntity {     @Inject SomeBean someBean;     ... } ```  ---  **Affects:** 4.3.4  **Issue Links:** - #19382 Allow type produced by ScopedProxyFactoryBean to be determined before singleton is created - #19498 NPE in LoadTimeWeavingConfiguration: loadTimeWeaver() called too early - #19608 Regression with poolTargetSource and scoped proxy","closed","in: core,","spring-projects-issues","2016-11-09T16:18:17Z","2019-01-11T17:38:48Z"
"","19117","PathEditor returns wrong result for absolute path in servletContext.getRealPath(...) [SPR-14549]","**[Holger Stenzhorn](https://jira.spring.io/secure/ViewProfile.jspa?name=holger)** opened **[SPR-14549](https://jira.spring.io/browse/SPR-14549?redirect=false)** and commented  In relation to #19007, when I now put the following code in my webapp...  ```   @Value(""#{servletContext.getRealPath('/resources/ontologies')}"")   private void setString(String string) {     System.out.println(string);   }    @Value(""#{servletContext.getRealPath('/resources/ontologies')}"")   private void setFile(File file) {     System.out.println(file);   }    @Value(""#{servletContext.getRealPath('/resources/ontologies')}"")   private void setPath(Path path) {     System.out.println(path);   } ```  ...then this results in the following output...  ``` /Users/holger/Developer/ObTiMA/out/artifacts/ObTiMA_Web_exploded/resources/ontologies /Users/holger/Developer/ObTiMA/out/artifacts/ObTiMA_Web_exploded/resources/ontologies /Users/holger/Developer/ObTiMA/out/artifacts/ObTiMA_Web_exploded/Users/holger/Developer/ObTiMA/out/artifacts/ObTiMA_Web_exploded/resources/ontologies ```  ...where the first two lines are indeed correct but the last one is not.  Looking at your implementation of `PathEditor`, it seems that the code below from my original post needs to be added to make things work correctly:  ``` // Check whether we got an absolute file path without ""file:"" prefix. // For backwards compatibility, we'll consider those as straight file path. if (!ResourceUtils.isUrl(text)) {   Path path = Paths.get(text);   if (path.isAbsolute()) {     setValue(path);     return;   } } ```  ---  **Affects:** 4.3.2  **Issue Links:** - #19007 Add PathEditor to enable conversion to java.nio.file.Path - #19821 Different handling in PathEditor in Servlet Context for existing and non-existing paths  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d69afaada8ecdbb7ec2707a1e793792ef314a105, https://github.com/spring-projects/spring-framework/commit/4ada5713846ca9f4eab6b4be1b12b32e9f9e54aa","closed","type: enhancement,","spring-projects-issues","2016-08-01T11:13:30Z","2019-01-13T20:32:35Z"
"","19007","Add PathEditor to enable conversion to java.nio.file.Path [SPR-14436]","**[Holger Stenzhorn](https://jira.spring.io/secure/ViewProfile.jspa?name=holger)** opened **[SPR-14436](https://jira.spring.io/browse/SPR-14436?redirect=false)** and commented  Currently  ``` @Value{some.path.property} private Path path; ```  fails with  ``` Cannot convert value of type [java.lang.String] to required type [java.nio.file.Path]: no matching editors or conversion strategy found; ```  because no `PathEditor` is implemented (and added to the `defaultEditors` of `PropertyEditorRegistrySupport`).  It would be nice if this could be changed... :-) Below you can find a quick implementation for `PathEditor`:  ``` /*  * Copyright 2002-2016 the original author or authors.  *  * Licensed under the Apache License, Version 2.0 (the ""License"");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an ""AS IS"" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.springframework.beans.propertyeditors;  import java.beans.PropertyEditorSupport; import java.io.IOException; import java.nio.file.Path; import java.nio.file.Paths;  import org.springframework.core.io.Resource; import org.springframework.core.io.ResourceEditor; import org.springframework.util.Assert; import org.springframework.util.ResourceUtils; import org.springframework.util.StringUtils;  /**  * Editor for {@code java.nio.file.{@link Path}}, to directly populate a Path property  * from a Spring resource location.  *  * Supports Spring-style URL notation: any fully qualified standard URL  * (""file:"", ""http:"", etc) and Spring's special ""classpath:"" pseudo-URL.  *  * @author Juergen Hoeller  * @author Thomas Risberg  * @author Holger Stenzhorn  * @since 06.07.2016  * @see java.nio.file.Path  * @see org.springframework.core.io.ResourceEditor  * @see org.springframework.core.io.ResourceLoader  * @see URLEditor  * @see InputStreamEditor  */ public class PathEditor extends PropertyEditorSupport {  	private final ResourceEditor resourceEditor;   	/** 	 * Create a new PathEditor, 	 * using the default ResourceEditor underneath. 	 */ 	public PathEditor() { 		this.resourceEditor = new ResourceEditor(); 	}  	/** 	 * Create a new PathEditor, 	 * using the given ResourceEditor underneath. 	 * @param resourceEditor the ResourceEditor to use 	 */ 	public PathEditor(ResourceEditor resourceEditor) { 		Assert.notNull(resourceEditor, ""ResourceEditor must not be null""); 		this.resourceEditor = resourceEditor; 	}   	@Override 	public void setAsText(String text) throws IllegalArgumentException { 		if (!StringUtils.hasText(text)) { 			setValue(null); 			return; 		}  		// Check whether we got an absolute file path without ""file:"" prefix. 		// For backwards compatibility, we'll consider those as straight file path. 		if (!ResourceUtils.isUrl(text)) { 			Path path = Paths.get(text); 			if (path.isAbsolute()) { 				setValue(path); 				return; 			} 		}  		// Proceed with standard resource location parsing. 		this.resourceEditor.setAsText(text); 		Resource resource = (Resource) this.resourceEditor.getValue();  		// If it's a URL or a path pointing to an existing resource, use it as-is. 		if (ResourceUtils.isUrl(text) || resource.exists()) { 			try { 				setValue(resource.getFile().toPath()); 			} 			catch (IOException ex) { 				throw new IllegalArgumentException( 						""Could not retrieve Path for "" + resource + "": "" + ex.getMessage()); 			} 		} 		else { 			// Create a relative Path reference and hope for the best. 			setValue(Paths.get(text)); 		} 	}  	@Override 	public String getAsText() { 		Path value = (Path) getValue(); 		return (value != null ? value.toString() : """"); 	}  } ```  ---  **Issue Links:** - #15237 Introduce java.nio.file.Path based Resource implementation - #19117 PathEditor returns wrong result for absolute path in servletContext.getRealPath(...)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f85d48dd31f4c8df7eb7db4acfc4985f219a051c, https://github.com/spring-projects/spring-framework/commit/23c2b6ad41ac8c4915d4789e5ec0d272635dcc5b","closed","type: enhancement,","spring-projects-issues","2016-07-06T15:09:21Z","2019-01-11T16:26:53Z"
"","19348","Bad Table Rendering in Default Exception Handling Documentation [SPR-14782]","**[Henning Hoefer](https://jira.spring.io/secure/ViewProfile.jspa?name=hho)** opened **[SPR-14782](https://jira.spring.io/browse/SPR-14782?redirect=false)** and commented  The table given in [Section 22.11.3 of the manual](http://docs.spring.io/spring/docs/4.3.x/spring-framework-reference/html/mvc.html#mvc-ann-rest-spring-mvc-exceptions) is rendered with only one column, which kind of misses the point of having a table in the first place.   ---  **Affects:** 4.3.3  **Reference URL:** http://docs.spring.io/spring/docs/4.3.x/spring-framework-reference/html/mvc.html#mvc-ann-rest-spring-mvc-exceptions","closed","in: web,","spring-projects-issues","2016-10-06T10:08:30Z","2016-11-07T22:01:23Z"
"","19548","ServletRequestBindingException should be wrapped as JSON response body [SPR-14982]","**[Hendy Irawan](https://jira.spring.io/secure/ViewProfile.jspa?name=ceefour)** opened **[SPR-14982](https://jira.spring.io/browse/SPR-14982?redirect=false)** and commented  I have the following controller method:  ```java @RestController @Scope(""request"") @RequestMapping(""api/me"") public class MeController {      @PostMapping(""photo"")     public Person updatePhoto(@RequestHeader(""Authorization"") String authorization, @RequestParam(""file"") MultipartFile file) { ... ```  The problem is, if the client doesn't send ""Authorization"" header, the error is only logged with DEBUG level, and client is given a plain 400 error **without any response body**:  ``` 2016-12-05 20:54:58.138 DEBUG 14972 --- [nio-8080-exec-1] .w.s.m.m.a.ServletInvocableHandlerMethod : Error resolving argument [0] [type=java.lang.String] HandlerMethod details:  Controller [com.satukancinta.mvc.MeController] Method [public org.soluvas.commons.Person com.satukancinta.mvc.MeController.updatePhoto(java.lang.String,org.springframework.web.multipart.MultipartFile)]   org.springframework.web.bind.ServletRequestBindingException: Missing request header 'Authorization' for method parameter of type String 	at org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver.handleMissingValue(RequestHeaderMethodArgumentResolver.java:82) 	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.handleMissingValue(AbstractNamedValueMethodArgumentResolver.java:208) 	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:104) 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121) 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:160) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:129) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:648) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:269) 	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203) 	at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:284) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) 	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) 	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:169) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) 	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:121) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) 	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) 	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) 	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:108) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:784) 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1410) 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Thread.java:745)  2016-12-05 20:54:58.145 DEBUG 14972 --- [nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolving exception from handler [public org.soluvas.commons.Person com.satukancinta.mvc.MeController.updatePhoto(java.lang.String,org.springframework.web.multipart.MultipartFile)]: org.springframework.web.bind.ServletRequestBindingException: Missing request header 'Authorization' for method parameter of type String 2016-12-05 20:54:58.148 DEBUG 14972 --- [nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Invoking @ExceptionHandler method: public final org.springframework.http.ResponseEntity org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler.handleException(java.lang.Exception,org.springframework.web.context.request.WebRequest) ```  Expected behavior: Wrapped exception with message as JSON in response body.  I've tried sending ""Accept: application/json"" from client -- no effect.  or adding:  ```java @PostMapping(value = ""photo"", produces = ""application/json"") ```  no effect too.  ---  **Affects:** 4.3.4  **Issue Links:** - #17136 Provide a standard exception hierarchy  for REST end points","closed","status: declined,","spring-projects-issues","2016-12-05T14:06:02Z","2019-01-12T16:33:46Z"
"","19021","@RequestMapping consumes/produces InvalidMediaTypeException should mention offending class & method [SPR-14452]","**[Hendy Irawan](https://jira.spring.io/secure/ViewProfile.jspa?name=ceefour)** opened **[SPR-14452](https://jira.spring.io/browse/SPR-14452?redirect=false)** and commented  The stacktrace given if we have erroneous `@RequestMapping`, e.g. `@RequestMapping(consumes=""text_plain"")` is currently less useful. It should mention the class and method where the error occured, so the developer can easily fix it.  Sample error below.  ``` 10:53:07.200 WARN  |            |            |                                                                                                    | host-startStop-1 | ationConfigWebApplicationContext | Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'requestMappingHandlerMapping' defined in class org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: Invocation of init method failed; nested exception is org.springframework.http.InvalidMediaTypeException: Invalid mime type ""text_plain"": does not contain '/' 10:53:07.790 ERROR |            |            |                                                                                                    | host-startStop-1 | o.s.w.c.ContextLoader            | Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'requestMappingHandlerMapping' defined in class org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: Invocation of init method failed; nested exception is org.springframework.http.InvalidMediaTypeException: Invalid mime type ""text_plain"": does not contain '/' 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1578) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839) 	at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:538) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java) 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107) 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4937) 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5434) 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549) 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:745) Caused by: org.springframework.http.InvalidMediaTypeException: Invalid mime type ""text_plain"": does not contain '/' 	at org.springframework.http.MediaType.parseMediaType(MediaType.java:385) 	at org.springframework.web.servlet.mvc.condition.AbstractMediaTypeExpression.(AbstractMediaTypeExpression.java:53) 	at org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition$ConsumeMediaTypeExpression.(ConsumesRequestCondition.java:210) 	at org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.parseExpressions(ConsumesRequestCondition.java:97) 	at org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.(ConsumesRequestCondition.java:71) 	at org.springframework.web.servlet.mvc.method.RequestMappingInfo$DefaultBuilder.build(RequestMappingInfo.java:507) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.createRequestMappingInfo(RequestMappingHandlerMapping.java:258) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.createRequestMappingInfo(RequestMappingHandlerMapping.java:206) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.getMappingForMethod(RequestMappingHandlerMapping.java:185) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.getMappingForMethod(RequestMappingHandlerMapping.java:53) 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$1.inspect(AbstractHandlerMethodMapping.java:233) 	at org.springframework.core.MethodIntrospector$1.doWith(MethodIntrospector.java:72) 	at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:530) 	at org.springframework.core.MethodIntrospector.selectMethods(MethodIntrospector.java:68) 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.detectHandlerMethods(AbstractHandlerMethodMapping.java:229) 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.initHandlerMethods(AbstractHandlerMethodMapping.java:213) 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.afterPropertiesSet(AbstractHandlerMethodMapping.java:183) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.afterPropertiesSet(RequestMappingHandlerMapping.java:125) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574) 	... 22 common frames omitted Caused by: org.springframework.util.InvalidMimeTypeException: Invalid mime type ""text_plain"": does not contain '/' 	at org.springframework.util.MimeTypeUtils.parseMimeType(MimeTypeUtils.java:231) 	at org.springframework.http.MediaType.parseMediaType(MediaType.java:382) 	... 41 common frames omitted Jul 11, 2016 11:23:07 PM org.apache.catalina.core.StandardContext listenerStart SEVERE: Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'requestMappingHandlerMapping' defined in class org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: Invocation of init method failed; nested exception is org.springframework.http.InvalidMediaTypeException: Invalid mime type ""text_plain"": does not contain '/' 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1578) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839) 	at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:538) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java) 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107) 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4937) 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5434) 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549) 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:745) Caused by: org.springframework.http.InvalidMediaTypeException: Invalid mime type ""text_plain"": does not contain '/' 	at org.springframework.http.MediaType.parseMediaType(MediaType.java:385) 	at org.springframework.web.servlet.mvc.condition.AbstractMediaTypeExpression.(AbstractMediaTypeExpression.java:53) 	at org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition$ConsumeMediaTypeExpression.(ConsumesRequestCondition.java:210) 	at org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.parseExpressions(ConsumesRequestCondition.java:97) 	at org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.(ConsumesRequestCondition.java:71) 	at org.springframework.web.servlet.mvc.method.RequestMappingInfo$DefaultBuilder.build(RequestMappingInfo.java:507) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.createRequestMappingInfo(RequestMappingHandlerMapping.java:258) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.createRequestMappingInfo(RequestMappingHandlerMapping.java:206) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.getMappingForMethod(RequestMappingHandlerMapping.java:185) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.getMappingForMethod(RequestMappingHandlerMapping.java:53) 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$1.inspect(AbstractHandlerMethodMapping.java:233) 	at org.springframework.core.MethodIntrospector$1.doWith(MethodIntrospector.java:72) 	at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:530) 	at org.springframework.core.MethodIntrospector.selectMethods(MethodIntrospector.java:68) 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.detectHandlerMethods(AbstractHandlerMethodMapping.java:229) 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.initHandlerMethods(AbstractHandlerMethodMapping.java:213) 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.afterPropertiesSet(AbstractHandlerMethodMapping.java:183) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.afterPropertiesSet(RequestMappingHandlerMapping.java:125) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574) 	... 22 more Caused by: org.springframework.util.InvalidMimeTypeException: Invalid mime type ""text_plain"": does not contain '/' 	at org.springframework.util.MimeTypeUtils.parseMimeType(MimeTypeUtils.java:231) 	at org.springframework.http.MediaType.parseMediaType(MediaType.java:382) 	... 41 more ```  Related to #13781.  ---  **Affects:** 4.2.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e4179553b6e8610417b06f57ffaa478fd978d18f, https://github.com/spring-projects/spring-framework/commit/8ccd727c9a439f5444ed249f2197a38b0186b973, https://github.com/spring-projects/spring-framework/commit/f0a826ec0ce2572a947791f1a9ca384227adc166  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-07-12T15:54:32Z","2019-01-11T16:24:38Z"
"","18880","Implement aspect to validate JSR-303 annotated method arguments [SPR-14308]","**[Heiko Scherrer](https://jira.spring.io/secure/ViewProfile.jspa?name=scherrer)** opened **[SPR-14308](https://jira.spring.io/browse/SPR-14308?redirect=false)** and commented  **Issue** Spring MVC enables to use JSR-303 annotations on method signatures. While this works for Spring MVC controller methods only, we miss this feature for services or repositories as well as for POJOs.  **Possible solution** Add a pointcut definition to match all public methods in classes annotated with `org.springframework.validation.annotation.Validated` on class-level. Add an aspect implementation tied to this pointcut definition that analyses the method signature to find JSR-303 annotations. If an annotation exists, a bean validator instance is looked up and if exists the validator is used to validate the annotated argument. If no validator instance exists in the application context, the aspect implementation can proceed quietly.  Example how an annotated POJO could use this feature:  ```java @Validated class A {  public T save(@NotNull T arg) { } } ```  **References** Issue https://github.com/abraxas-labs/ameba-lib/issues/78   ---  **Reference URL:** https://github.com/abraxas-labs/ameba-lib/issues/78","closed","type: enhancement,","spring-projects-issues","2016-05-26T18:20:26Z","2016-05-30T10:28:53Z"
"","19421","Can't return JSON view from RequestMappings with Trailing Slashes [SPR-14855]","**[Hector Guilarte](https://jira.spring.io/secure/ViewProfile.jspa?name=hectorg87)** opened **[SPR-14855](https://jira.spring.io/browse/SPR-14855?redirect=false)** and commented  When using the PathExtensionContentNegotiationStrategy in Spring 3.2.3, an URL with a RequestMapping that had a Trailing Slash could be returned as Json, now it is not possible.  For example, in Spring 3.2.3: /hello/world/ => Would return a HTML view /hello/world/.json => Would return a JSON View  This is no longer the case in Spring 4.3.3, and the difference is in the ""extractFilename"" functiones used by each version.  Not sure if it is a bug in Spring 3 or in Spring 4, because I don't know if an URL with a trailing slash and an extension afterwards is a valid URI, but it used to work in Spring 3 and it no longer working in 4.3.3 is a big problem in our project.  Spring 3.2.3 used the org.springframework.util.StringUtils.getFilenameExtension, while Spring 4.3.3 is using the org.springframework.web.util.UriUtils.extractFileExtension.  Code for org.springframework.util.StringUtils.getFilenameExtension  ```java public static String getFilenameExtension(String path) {     if(path == null) {         return null;     } else {         int extIndex = path.lastIndexOf(46);         if(extIndex == -1) {             return null;         } else {             int folderIndex = path.lastIndexOf(""/"");             return folderIndex > extIndex?null:path.substring(extIndex + 1);         }     } } ```  Code for org.springframework.web.util.UriUtils.extractFileExtension  ```java public static String extractFileExtension(String path) {      int end = path.indexOf('?');      if (end == -1) {           end = path.indexOf('#');           if (end == -1) {                end = path.length();           }      }      int begin = path.lastIndexOf('/', end) + 1;      int paramIndex = path.indexOf(';', begin);      end = (paramIndex != -1 && paramIndex < end ? paramIndex : end);      int extIndex = path.lastIndexOf('.', end);      if (extIndex != -1 && extIndex > begin) {           return path.substring(extIndex + 1, end);      }      return null; } ```    ---  **Affects:** 4.3.3","closed","status: invalid,","spring-projects-issues","2016-10-26T18:30:20Z","2019-01-12T05:21:44Z"
"","18844","Doc: @Component bean auto naming working differently for two capital letter start [SPR-14272]","**[Heartin](https://jira.spring.io/secure/ViewProfile.jspa?name=heartin)** opened **[SPR-14272](https://jira.spring.io/browse/SPR-14272?redirect=false)** and commented  If my class name start with two capital letters and I annotate with `@Component`, the auto generated name starts with capital letter. Else it starts with small letter.  JJwriterComp gives JJwriterComp JaaJwriterComp gives jaaJwriterComp  I could not find any reference for this difference in any documentation.   ---  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","in: core,","spring-projects-issues","2016-05-14T14:35:37Z","2016-06-10T09:19:12Z"
"","19385","Server Side Event - Socket is not released. [SPR-14819]","**[Harshal Vora](https://jira.spring.io/secure/ViewProfile.jspa?name=harshal)** opened **[SPR-14819](https://jira.spring.io/browse/SPR-14819?redirect=false)** and commented  While using SSE Emitter, consider a scenario where a) Client & Server are in a different LAN. Client is behind a NAT, server can be on a public IP or behind a NAT. b) Server is deployed on Tomcat7 c) Timeout is set to infinite (i.e. never times out)  If the client kills the connection, the socket on the server goes into Close_Wait state. This socket is never closed even if you try to send something via sseEmitter until and unless 1) Shut down / Restart the tomcat server 2) Stop this servlet only, not the entire tomcat.  In the second case, connection goes into LAST_ACK state and then gets closed. SSE thread gets killed but sseComplete method is not called.  This behaviour is not seen if both the client and server are part of the same LAN.  The difference that we have observed at the TCP level is that there is no Reset packet when the client and the server are on a different LAN whereas a Reset packet is received by the server if both of them are within the same LAN which kills the connection on the server side and thus sseEmitter thread.  We have also done some testing with Netcat utility and a minimal Java Socket program and they always close the socket on the server side if the client dies.  Currently we have to kill the server side thread on timeout, but this means that the thread is running till timeout is reached (timeout is calculated from the time the connection is created and not from the time the client dies). This has two disadvantages 1) If timeout is too large, then the thread keeps running for long. 2) If the timeout is too small, then the thread might timeout and kill the connection while some transfer is taking place.  Is there any solution for this?  Kindly Note: We are using ""org.springframework:spring-webmvc:4.2.1.RELEASE"" jar. It does not give me an option to select 4.2.1.RELEASE in the ""Affects Version/s"" section.   --- No further details from [SPR-14819](https://jira.spring.io/browse/SPR-14819?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-10-18T14:17:29Z","2018-01-12T03:23:33Z"
"","18923","ContentCachingResponseWrapper in combination of hystrix.stream is causing stuck thread [SPR-14351]","**[hari krishna ponakala](https://jira.spring.io/secure/ViewProfile.jspa?name=thefalconfeat@gmail.com)** opened **[SPR-14351](https://jira.spring.io/browse/SPR-14351?redirect=false)** and commented  We have a filter to log the request and response and we are using the ContentCachingResponseWrapper to get and log the response. After integrating our project with hystrix, on hitting ""hystrix.stream"" endpoint, on the client side we are not seeing any data coming back from the app. After digging into the problem, figured that the ""HystrixMetricsStreamServlet"" is continuously writing the data and flushing it in each loop cycle, but, the ""ContentCachingResponseWrapper"" is writing the data continuously to the internal content but not flushing out the data. This could potentially cause memory issues on our application.   --- No further details from [SPR-14351](https://jira.spring.io/browse/SPR-14351?redirect=false)","closed","status: declined,","spring-projects-issues","2016-06-10T05:32:49Z","2019-01-12T16:34:16Z"
"","19388","GenericConversionService.addConverter should be able to determine generic types from target class behind proxy [SPR-14822]","**[Harald Radi](https://jira.spring.io/secure/ViewProfile.jspa?name=harald)** opened **[SPR-14822](https://jira.spring.io/browse/SPR-14822?redirect=false)** and commented  WebMvcConfigurationSupport.mvcConversionService() creates a non-overrideable DefaultFormattingConversionService which scans for all Converter-beans. If one of those beans happens to be advised an IllegalArgumentException is thrown, since GenericConversionService.getRequiredTypeInfo() tries to derive the type info from the Proxy that only contains the type erasures and not the actual types. Adding a proxy check and deriving the type info from the proxy-target would resolve that issue.  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mvcConversionService' defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.format.support.FormattingConversionService]: Factory method 'mvcConversionService' threw exception; nested exception is java.lang.IllegalArgumentException: Unable to the determine sourceType  and targetType  which your Converter converts between; declare these generic types. ```  ---  **Affects:** 4.3.3  **Issue Links:** - #18457 AnnotationAwareOrderComparator getPriority does not work if bean is a proxy - #19496 ConversionService performance regression  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f9fcd243154bfd42872d6b8dce4a57fd0ea5c1d1, https://github.com/spring-projects/spring-framework/commit/f7d740fa69397b8e998b11b13149f541d9553f9c","closed","type: enhancement,","spring-projects-issues","2016-10-19T11:00:26Z","2019-01-11T17:29:44Z"
"","19398","Add a functional way to register a bean [SPR-14832]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-14832](https://jira.spring.io/browse/SPR-14832?redirect=false)** and commented  Add a registerBean method to ApplicationContext which accepts a lambda with which you register as bean.  The following code uses this method to register a bean of a class A and to register a bean of class B which has a dependency on class A  ```java @Configuration public class MyConfiguration   private final ApplicationContext context;   public MyConfiguration(ApplicationContext context) {     this.context = context;     context.registerBean(AClass.class -> new AClass());     context.registerBean(BClass.class -> new BClass(context.getBean(AClass.class));   } ```  ---  **Affects:** 5.0 M2  **Issue Links:** - #18353 Programmatic bean registration within configuration classes (_**""is depended on by""**_) - #13410 Parallel bean initialization during startup - #18273 ResolvableType should support resolving lambda types - #18794 `@Configuration` interface with Java 8 default methods (as a standalone artifact) - #19614 Kotlin extension for GenericApplicationContext with registerBean(KClass) variants - #19615 Document functional configuration style - #18463 Provide registerBean variants based on ResolvableType - #19979 Functional bean dependencies tracking - #19546 Provide computeIfAbsent-like method on ObjectProvider  1 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2016-10-21T07:05:43Z","2019-01-13T05:19:22Z"
"","19395","ContentCachingRequestWrapper can have maxContentLength to limit caching [SPR-14829]","**[Hamid Virani](https://jira.spring.io/secure/ViewProfile.jspa?name=hamidvirani)** opened **[SPR-14829](https://jira.spring.io/browse/SPR-14829?redirect=false)** and commented  we wanted to use ContentCachingRequestWrapper so that we can log the payload in one of the error handler of the `@ControllerAdvice`.  But, to protect from OutOfMemoryError, we want to restrict maximum content length that can be cached. If the content length is greater than this maximum length, the class can just throw an exception.  This maxContentLength can be be optional (so an overridden constructor which takes this parameter). If provided then it can throw a RunTimeException to indicate the same or else it can continue working without any restriction as it is working today.  This feature may be beneficial to anyone who wants to have the same capability.   ---  **Affects:** 4.1.9  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ad5386773e8d501215da9b2218917c97ecaa9994, https://github.com/spring-projects/spring-framework/commit/4beeeb8118661d8f1759bc108414deca2dbbc453","closed","type: enhancement,","spring-projects-issues","2016-10-20T13:52:59Z","2017-01-25T14:18:15Z"
"","19345","Provide static type safe methods like Collections.emptyList() for Comparators [SPR-14779]","**[hakamairi](https://jira.spring.io/secure/ViewProfile.jspa?name=hakamairi)** opened **[SPR-14779](https://jira.spring.io/browse/SPR-14779?redirect=false)** and commented  It seems that several of org.springframework.util.comparator package's classes need static methods that would provide a type-safe way of obtaining the INSTANCE (similar to java.util.Collections.emptyList()).  This was already mentioned in #14364 but the changes haven't made it to master.  Instead of referencing ComparableComparator.INSTANCE (which is a raw type) we would be able to use just one `@SuppressWarnings` on the level of type-safe static method get().  Similarly NullSafeComparator and CompoundComparator should be refactored.  Unnecessary `@SuppressWarnings` can be refactored from equals methods of Comparators.  CompoundComparator could use some refactoring in general.  ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1197  **Issue Links:** - #14364 Introduce ConvertingComparator and InstanceComparator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5f531a7a7d0a6d2c3ad099ca8014192af847a94e, https://github.com/spring-projects/spring-framework/commit/9543384d9e3b7c51aa997a47b3758a0284ff72d4","closed","in: core,","spring-projects-issues","2016-10-05T21:11:05Z","2019-01-11T17:24:41Z"
"","19448","Disable streaming when reading to Resources in RestTemplate [SPR-14882]","**[Hadrien Kohl](https://jira.spring.io/secure/ViewProfile.jspa?name=hadrien.kohl)** opened **[SPR-14882](https://jira.spring.io/browse/SPR-14882?redirect=false)** and commented  This issue has been updated to reflect the actual outcome of the discussion. See next section and comments for the original report.  The `ResourceHttpMessageConverter` supports converting from an `HttpInputMessage` to an `InputStreamResource`. This is valid when reading resources on the server side, but it's not compatible with the way `RestTemplate` works.  The API exposed by `RestOperations` imply that the HTTP server response should be fully consumed and properly closed by the time the `exchange` method returns. In other words, this HTTP client does not support streaming the HTTP response.  The current arrangement allows reading `InputStreamResource` with `RestTemplate`, which should not be possible.  ### Original report:  InputStreamResource are closed by SimpleClientHttpResponse  The http stream wrapped by InputStreamResource is closed by SimpleClientHttpResponse, rendering it unusable.  https://github.com/spring-projects/spring-framework/pull/1017#issuecomment-258672682  I'll make a PR with a test.  ---  **Affects:** 4.3.3  **Reference URL:** #18612  **Issue Links:** - #21424 RestTemplate should support streaming download and upload (_**""is duplicated by""**_) - #18612 HTTP persistent connections for HTTP Invoker and RestTemplate - #19757 ResourceHttpMessageConverter should read the Content-Disposition header (if available) to get the file name  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/afd93a0b52441d2ecf23242850ed8c1776524e0b","closed","type: enhancement,","spring-projects-issues","2016-11-06T14:30:58Z","2019-01-14T04:37:14Z"
"","18869","i can not using custom scopeResolver class on @ComponentScan annotation. [SPR-14297]","**[hadi](https://jira.spring.io/secure/ViewProfile.jspa?name=hadi.tayebi)** opened **[SPR-14297](https://jira.spring.io/browse/SPR-14297?redirect=false)** and commented  hi i can not using custom scopeResolver class on `@ComponentScan` annotation. i set scopeResolver attribute : `@ComponentScan`(basePackages = {""mypackage""}, scopedProxy = ScopedProxyMode.TARGET_CLASS, scopeResolver = CustomScopeMetadataResolver.class)  but, do not working :(  why,you create hard code ""new AnnotationScopeMetadataResolver"" object ?????????????????????????    --- No further details from [SPR-14297](https://jira.spring.io/browse/SPR-14297?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2016-05-21T13:09:46Z","2019-01-12T00:14:04Z"
"","19016","Hibernate bootstrap fails for Hibernate 5.1 and Spring 4.2.6 [SPR-14446]","**[gx](https://jira.spring.io/secure/ViewProfile.jspa?name=gx)** opened **[SPR-14446](https://jira.spring.io/browse/SPR-14446?redirect=false)** and commented  ``` /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/bin/java -ea -Didea.launcher.port=7536 ""-Didea.launcher.bin.path=/Applications/IntelliJ IDEA.app/Contents/bin"" -Didea.junit.sm_runner -Dfile.encoding=UTF-8 -classpath ""/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar:/Applications/IntelliJ IDEA.app/Contents/plugins/junit/lib/junit-rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/lib/tools.jar:/Users/zhaoguoxin/Java/IDEA/gxspringdata/jpa/target/test-classes:/Users/zhaoguoxin/Java/IDEA/gxspringdata/jpa/target/classes:/Users/zhaoguoxin/devtools/repo/org/springframework/data/spring-data-jpa/1.10.2.RELEASE/spring-data-jpa-1.10.2.RELEASE.jar:/Users/zhaoguoxin/devtools/repo/org/springframework/data/spring-data-commons/1.12.2.RELEASE/spring-data-commons-1.12.2.RELEASE.jar:/Users/zhaoguoxin/devtools/repo/org/springframework/spring-core/4.2.6.RELEASE/spring-core-4.2.6.RELEASE.jar:/Users/zhaoguoxin/devtools/repo/org/springframework/spring-beans/4.2.6.RELEASE/spring-beans-4.2.6.RELEASE.jar:/Users/zhaoguoxin/devtools/repo/org/slf4j/slf4j-api/1.7.21/slf4j-api-1.7.21.jar:/Users/zhaoguoxin/devtools/repo/org/slf4j/jcl-over-slf4j/1.7.21/jcl-over-slf4j-1.7.21.jar:/Users/zhaoguoxin/devtools/repo/org/springframework/spring-orm/4.2.6.RELEASE/spring-orm-4.2.6.RELEASE.jar:/Users/zhaoguoxin/devtools/repo/org/springframework/spring-jdbc/4.2.6.RELEASE/spring-jdbc-4.2.6.RELEASE.jar:/Users/zhaoguoxin/devtools/repo/org/springframework/spring-tx/4.2.6.RELEASE/spring-tx-4.2.6.RELEASE.jar:/Users/zhaoguoxin/devtools/repo/org/springframework/spring-context/4.2.6.RELEASE/spring-context-4.2.6.RELEASE.jar:/Users/zhaoguoxin/devtools/repo/org/springframework/spring-aop/4.2.6.RELEASE/spring-aop-4.2.6.RELEASE.jar:/Users/zhaoguoxin/devtools/repo/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/Users/zhaoguoxin/devtools/repo/org/aspectj/aspectjrt/1.8.9/aspectjrt-1.8.9.jar:/Users/zhaoguoxin/devtools/repo/org/apache/commons/commons-dbcp2/2.1.1/commons-dbcp2-2.1.1.jar:/Users/zhaoguoxin/devtools/repo/org/apache/commons/commons-pool2/2.4.2/commons-pool2-2.4.2.jar:/Users/zhaoguoxin/devtools/repo/commons-logging/commons-logging/1.2/commons-logging-1.2.jar:/Users/zhaoguoxin/devtools/repo/mysql/mysql-connector-java/6.0.3/mysql-connector-java-6.0.3.jar:/Users/zhaoguoxin/devtools/repo/org/hibernate/hibernate-core/5.1.0.Final/hibernate-core-5.1.0.Final.jar:/Users/zhaoguoxin/devtools/repo/org/jboss/logging/jboss-logging/3.3.0.Final/jboss-logging-3.3.0.Final.jar:/Users/zhaoguoxin/devtools/repo/org/hibernate/javax/persistence/hibernate-jpa-2.1-api/1.0.0.Final/hibernate-jpa-2.1-api-1.0.0.Final.jar:/Users/zhaoguoxin/devtools/repo/org/javassist/javassist/3.20.0-GA/javassist-3.20.0-GA.jar:/Users/zhaoguoxin/devtools/repo/antlr/antlr/2.7.7/antlr-2.7.7.jar:/Users/zhaoguoxin/devtools/repo/org/apache/geronimo/specs/geronimo-jta_1.1_spec/1.1.1/geronimo-jta_1.1_spec-1.1.1.jar:/Users/zhaoguoxin/devtools/repo/org/jboss/jandex/2.0.0.Final/jandex-2.0.0.Final.jar:/Users/zhaoguoxin/devtools/repo/com/fasterxml/classmate/1.3.0/classmate-1.3.0.jar:/Users/zhaoguoxin/devtools/repo/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar:/Users/zhaoguoxin/devtools/repo/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.jar:/Users/zhaoguoxin/devtools/repo/org/hibernate/common/hibernate-commons-annotations/5.0.1.Final/hibernate-commons-annotations-5.0.1.Final.jar:/Users/zhaoguoxin/devtools/repo/junit/junit/4.12/junit-4.12.jar:/Users/zhaoguoxin/devtools/repo/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/zhaoguoxin/devtools/repo/org/springframework/spring-expression/4.2.6.RELEASE/spring-expression-4.2.6.RELEASE.jar"" com.intellij.rt.execution.application.AppMain com.intellij.rt.execution.junit.JUnitStarter -ideVersion5 @w@/private/var/folders/4j/773bjdlx0mb_21jzt1hlsvbm0000gn/T/idea_working_dirs_junit.tmp @/private/var/folders/4j/773bjdlx0mb_21jzt1hlsvbm0000gn/T/idea_junit.tmp SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"". SLF4J: Defaulting to no-operation (NOP) logger implementation SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [applicationContext.xml]: Cannot create inner bean 'org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#68ceda24' of type [org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter] while setting bean property 'jpaVendorAdapter'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#68ceda24' defined in class path resource [applicationContext.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter]: Constructor threw exception; nested exception is java.lang.IllegalStateException: Failed to determine Hibernate PersistenceProvider  	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:313) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:122) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1481) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1226) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:829) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:139) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:83) 	at com.github.gx.springdata.jpa.repository.UserRepositoryTest.(UserRepositoryTest.java:25) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) 	at org.junit.runners.BlockJUnit4ClassRunner.createTest(BlockJUnit4ClassRunner.java:217) 	at org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRunner.java:266) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java:263) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.junit.runners.Suite.runChild(Suite.java:128) 	at org.junit.runners.Suite.runChild(Suite.java:27) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:119) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#68ceda24' defined in class path resource [applicationContext.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter]: Constructor threw exception; nested exception is java.lang.IllegalStateException: Failed to determine Hibernate PersistenceProvider 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1105) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1050) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:299) 	... 49 more Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter]: Constructor threw exception; nested exception is java.lang.IllegalStateException: Failed to determine Hibernate PersistenceProvider 	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:163) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:89) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1098) 	... 53 more Caused by: java.lang.IllegalStateException: Failed to determine Hibernate PersistenceProvider 	at org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter.(HibernateJpaVendorAdapter.java:96) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) 	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:147) 	... 55 more Caused by: java.lang.ClassNotFoundException: org.hibernate.ejb.HibernateEntityManagerFactory 	at java.net.URLClassLoader.findClass(URLClassLoader.java:381) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) 	at org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter.(HibernateJpaVendorAdapter.java:89) 	... 60 more ```  Process finished with exit code 255   ---  **Affects:** 4.2.6","closed","status: invalid,","spring-projects-issues","2016-07-09T04:25:33Z","2019-01-12T05:22:25Z"
"","19015","NoOpCacheManager and @Cacheable(sync=true) [SPR-14445]","**[Gustavo Felisberto](https://jira.spring.io/secure/ViewProfile.jspa?name=gfelisberto)** opened **[SPR-14445](https://jira.spring.io/browse/SPR-14445?redirect=false)** and commented  When using the NoOpCacheManager and `@Cacheable`(sync=true) the actual methods are never called and we always get a null from the repository.  I created a fork from the example project with updated libs and with a Config.  Just run with sync = true and false and the difference is clear.   ---  **Affects:** 4.3.1  **Reference URL:** https://github.com/gfelisberto/gs-caching  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15c3cdd48deded4e7f8c21b07b1a88a8d097fcb2, https://github.com/spring-projects/spring-framework/commit/ab62edeeaa56e8acf246d3f121e4d95ca19a1ba4","closed","in: core,","spring-projects-issues","2016-07-08T17:34:21Z","2016-07-28T09:16:20Z"
"","19338","Flux looses messages when using a Processor from another Thread [SPR-14772]","**[Guillaume DROUET](https://jira.spring.io/secure/ViewProfile.jspa?name=gdrouet)** opened **[SPR-14772](https://jira.spring.io/browse/SPR-14772?redirect=false)** and commented  Hi,  I modified [this example](https://github.com/bclozel/spring-boot-web-reactive/tree/master/spring-boot-sample-web-reactive) to expose a REST endpoint that creates a **Flux**. The messages are sent by a **ReplayProcessor** invoked from another REST endpoint that creates a **ServerSentEvent** from the parameter.  ```java @RestController public class HomeController {      private FluxProcessor, ServerSentEvent> replayProcessor =             ReplayProcessor.>create().serialize();      @GetMapping(""/{val}"")     public void receive(@PathVariable(""val"") final String s) {         replayProcessor.onNext(ServerSentEvent.builder(s).build());     }  	@RequestMapping(value = ""/"") 	public Flux> starter() {         return replayProcessor.log(""starter""); 	} } ```  When I open the SSE endpoint in a browser tab and send messages with the correct URL opened in a second tab, I don't receive anything on SSE side when I run the application with Tomcat. With netty I can receive some messages but the **onNext()** method randomly blocks and some messages are lost.  Also note that if I switch to an **EmitterProcessor**, all messages are lost also with Netty while I'm expecting the same behavior between the two implementations here.  ---  **Affects:** 5.0 M2  **Issue Links:** - #19369 Hot publishing to an event stream not working (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aea3a750189977ca231172db87408f03979bace6, https://github.com/spring-projects/spring-framework/commit/25e7cd577d6855bd56c463ad0ce4ae20bf33d541, https://github.com/spring-projects/spring-framework/commit/5c9c5e0b45fd4d00eb06b021d2d57df76413b64b","closed","type: bug,","spring-projects-issues","2016-10-01T06:19:16Z","2019-01-11T17:24:00Z"
"","19399","SockJs heartbeat causes deadlock with XHR polling [SPR-14833]","**[Grégory Coutant](https://jira.spring.io/secure/ViewProfile.jspa?name=groggy)** opened **[SPR-14833](https://jira.spring.io/browse/SPR-14833?redirect=false)** and commented  When using XHR polling as a transport for SockJs, a deadlock can occur when one thread is sending a message at the same time the heartbeat run.  Stack from thread sending a message :  ``` at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.cancelHeartbeat(AbstractSockJsSession.java:280)  - waiting to lock [0x00000000820ce450] (a java.lang.Object)  at org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.sendMessageInternal(AbstractHttpSockJsSession.java:301)  - locked [0x00000000820cfce0] (a java.lang.Object)  at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.sendMessage(AbstractSockJsSession.java:166) ```  Heartbeat task :  ``` at org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.resetRequest(AbstractHttpSockJsSession.java:334)  - waiting to lock [0x00000000820cfce0] (a java.lang.Object)  at org.springframework.web.socket.sockjs.transport.session.PollingSockJsSession.writeFrame(PollingSockJsSession.java:83)  at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.sendHeartbeat(AbstractSockJsSession.java:255)  - locked [0x00000000820ce450] (a java.lang.Object)  at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession$HeartbeatTask.run(AbstractSockJsSession.java:451)  - locked [0x00000000820ce450] (a java.lang.Object) ```  Looking at the code, there seem to be two locks : heartbeatLock in AbstractSockJsSession and responseLock in AbstractHttpSockJsSession. When calling sendMessage(), the lock order is responseLock then heartbeatLock. For the HeartbeatTask, the lock order is heartbeatLock then responseLock.  ---  **Affects:** 4.2.8, 4.3.3  **Issue Links:** - #19484 AbstractSockJsSession deadlock when tomcat WsSession is closing  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/72e1f7e898a31bdac4233fdf52a79f65eee44dfe, https://github.com/spring-projects/spring-framework/commit/1c80d2ac2f1e0c2fa2915a4523cadc685903996f, https://github.com/spring-projects/spring-framework/commit/4ce0e6b3c3311c0f2d2ff1a67401a696ba4f8da5  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","type: bug,","spring-projects-issues","2016-10-21T09:47:26Z","2019-01-11T17:29:21Z"
"","19041","Regression: character set in ContentResultMatchers.contentType(MediaType) is taken into accounts. [SPR-14472]","**[Grigory Kislin](https://jira.spring.io/secure/ViewProfile.jspa?name=gkislin)** opened **[SPR-14472](https://jira.spring.io/browse/SPR-14472?redirect=false)** and commented  After switch from Spring MVC 4.2.6.RELEASE to 4.3.1.RELEASE my tests failed with: Content type expected: but was:  See issue: #14798  ---  **Affects:** 4.3.1  **Issue Links:** - #14798 Provide a means to ignore the character set in ContentResultMatchers.contentType(MediaType)","closed","in: core,","spring-projects-issues","2016-07-15T17:20:01Z","2019-01-14T04:38:42Z"
"","19572","Spring should tolerate zero-argument constructors with javax.inject.Inject [SPR-15005]","**[Greg Methvin](https://jira.spring.io/secure/ViewProfile.jspa?name=gmethvin)** opened **[SPR-15005](https://jira.spring.io/browse/SPR-15005?redirect=false)** and commented  According to https://docs.oracle.com/javaee/6/api/javax/inject/Inject.html, ""injectable constructors are annotated with `@Inject` and accept zero or more dependencies as arguments"". However, when you try to use `@Inject` with a zero-argument constructor, you receive an IllegalStateException: ""Autowired annotation requires at least one argument"".  In other words, `@Autowired` requires at least one argument in the constructor, and `@Inject` requires at least zero. Spring attempts to support the `@Inject` annotation by treating it as equivalent to `@Autowired` (see https://github.com/spring-projects/spring-framework/blob/v5.0.0.M3/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java#L149), but full support requires supporting zero-argument constructors as well.  This makes it a bit more difficult if you'd like to create a library that supports multiple DI frameworks, many of which have (or at least allow you to configure) a requirement that injectable classes have at least one constructor annotated with `@Inject`.  So, I guess there are a few options here: 1. Treat `@Inject` differently from `@Autowired` when autowiring beans 2. Change the semantics of `@Autowired` to require zero or more arguments like `@Inject` (I'm not sure why this would be a bad thing). 3. Provide some other mechanism for allowing zero-argument constructors  I'm not that familiar with Spring so perhaps one of these things is already possible. But it didn't seem evident to me looking at the code.  ---  **Affects:** 4.3.4, 5.0 M3  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/v5.0.0.M3/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java#L149  **Issue Links:** - #16883 Make `@Autowired` optional on a single constructor of a class decorated with `@Component` - #18050 Detect `@Autowired` constructors for configuration classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8b5ee4ef9150dd3294e005225c215a1fa6f52fa1, https://github.com/spring-projects/spring-framework/commit/934fffec683d5144b88a76d06491dc84c54bce87","closed","type: enhancement,","spring-projects-issues","2016-12-12T08:28:15Z","2019-01-13T05:18:30Z"
"","19189","Since 4.2.6 Spring MVC view resolution occasionally hangs under load [SPR-14622]","**[Graeme Rocher](https://jira.spring.io/secure/ViewProfile.jspa?name=graemerocher)** opened **[SPR-14622](https://jira.spring.io/browse/SPR-14622?redirect=false)** and commented  A change introduced in Spring 4.2.6 and above is causing view resolution to hang under load in recent versions of Grails 3.1.x  The issue has been reported here https://github.com/grails/grails-core/issues/10102  We are awaiting further feedback to aid in debugging, but since fixing the issue simply involves downgrading the 4.2.5 I thought I would raise the issue here in order to get feedback as to whether there are any known issues that have already been addressed in the Spring codebase   ---  **Affects:** 4.2.6, 4.2.7","closed","in: web,","spring-projects-issues","2016-08-24T13:52:10Z","2019-01-11T18:09:50Z"
"","19953","BeanPropertySqlParameterSource does not work fine with NamedParameterJdbcTemplate.query() [SPR-15390]","**[Govind Somani](https://jira.spring.io/secure/ViewProfile.jspa?name=govindksomani)** opened **[SPR-15390](https://jira.spring.io/browse/SPR-15390?redirect=false)** and commented  Spring BeanPropertySqlParameterSource is not working fine with NamedParameterJdbcTemplate for object having attribute as List.  For following example myObject is having attribute which is List and myObject is used for bean parameter source for putting value against place holder.  It gives issue as wrong number of parameters provided.  Example :  String selectSql = ""Select * from emaplyees WHERE dept_id IN (:departmentIds)"";  SqlParameterSource parameterSource = new BeanPropertySqlParameterSource(myObject);  List\ results = (List\) namedParameterJdbcTemplate.query(selectSql, parameterSource, new BeanPropertyRowMapper\(ResultObject.class));  Basically, its NamedParameterUtils issue. In this class method buildValueArray() is not considering collection as it is considering for substituteNamedParameters() method. No of ? should match no of parameters.  If list is of two length, then two place holders are created. But only one parameter is considered belongs to particular list attribute.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/af6f688196856af93412e3a3d694c854cf1d14a4, https://github.com/spring-projects/spring-framework/commit/7f3d0b3e6e63c381a52c0cc00c40996cf1678479","closed","in: data,","spring-projects-issues","2016-06-09T18:03:43Z","2019-01-11T14:41:15Z"
"","19137","StompSubProtocolHandler responds with ERROR (Session closed.) on DISCONNECT when using SimpleBrokerMessageHandler [SPR-14568]","**[Gottfried Huber](https://jira.spring.io/secure/ViewProfile.jspa?name=paxdei)** opened **[SPR-14568](https://jira.spring.io/browse/SPR-14568?redirect=false)** and commented  I think this was introduced with #16893  StompSubProtocolHandler.getStompHeaderAccessor converts a DISCONNECT_ACK to an ERROR message.  This has the effect that on the client side, the error-callback is called instead of the expected disconnect-callback, which leads to some very dirty workarounds for keeping the state sane.  This only happens when using SimpleBrokerMessageHandler. With the StompBrokerRelayMessageHandler, the MessageHeaderAccessor is already instanceof StompHeaderAccessor, and I don't get into the else if clause where the ERROR thing happens.  I would expect to see -StompHeaderAccessor.create(StompCommand.DISCONNECTED)-  a RECEIPT frame response according to the receipt header of the DISCONNECT frame  ---  **Affects:** 4.2.7, 4.3.1  **Issue Links:** - #19133 SockJS heartbeat is causing  application send Message to fail similar to (SPR-14356) - #16893 Allow server-side code to send DISCONNECT messages to the broker  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cc33bfaf612fde9d74cff6e92433e3edc8ce9c17, https://github.com/spring-projects/spring-framework/commit/8b4f60b8e555a7bfdaf2ab4a08922b359ff62933, https://github.com/spring-projects/spring-framework/commit/198a74d793f18f246c3385b732a71a1bd7ff6ed3  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: bug,","spring-projects-issues","2016-08-08T14:09:26Z","2019-01-14T04:38:23Z"
"","18867","All SockJS fallback options fail if request.getRemotePort() is not forwarded by proxy [SPR-14295]","**[Gottfried Huber](https://jira.spring.io/secure/ViewProfile.jspa?name=paxdei)** opened **[SPR-14295](https://jira.spring.io/browse/SPR-14295?redirect=false)** and commented  If the request's remote port is not available (-1), all SockJS fallback strategies fail in  ```java org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.handleInitialRequest(ServerHttpRequest, ServerHttpResponse, SockJsFrameFormat) ```  at this line:  ```java this.remoteAddress = request.getRemoteAddress(); ```  This is because the InetSocketAddress constructor checks the port argument and throws an IllegalArgumentException if the value is not between 0 and 0xFFFF  We have this issue with an apache httpd proxy load-balancing to tomcat 8 instances via AJP. Apache would require the lates mod_jk 1.2.32 to support remotePort forwarding.  See https://tomcat.apache.org/connectors-doc/common_howto/proxy.html  I know that the issue could be resolved by updating apache. But I think the whole point of using sockJS is to provide a fool proof websocket emulation for unsupportive browsers and proxies.  Our proxy works fine with standard http traffic, and it certainly would support XHR-Streaming fallback, if just this initialRequest handling would not fail.  As far as I can see this remote address is not used anywhere for the polling streaming options.    ---  **Affects:** 4.2.1, 4.3 RC2","closed","type: enhancement,","spring-projects-issues","2016-05-20T16:25:51Z","2016-06-10T09:19:11Z"
"","19609","Backward compatibility: initDefaultStrategies() is no longer invoked on subclasses of ""MessageListenerAdapter"" [SPR-15043]","**[Gordon Daugherty](https://jira.spring.io/secure/ViewProfile.jspa?name=gjd6640)** opened **[SPR-15043](https://jira.spring.io/browse/SPR-15043?redirect=false)** and commented  Tl;dr - [This comment](https://github.com/spring-projects/spring-framework/commit/fa4f51c5d0f3e74ece578aeaa2a8a15a57b7df0a#commitcomment-20276425) more succinctly states the concern.  ***  We have an extension of ""MessageListenerAdapter"" in a widely-shared component. That component doesn't work with Spring versions 4.1.0 and higher due to it no longer invoking ""initDefaultStrategies()"". As apps that use that component upgrade past Spring v4.0.9 they're experiencing breakages.  Before we patch around the issue I wanted to check with the Spring team to make sure that this change was a deliberate design evolution choice and not a mistake.  As you can see in [this API analysis report](https://abi-laboratory.pro/java/tracker/compat_report/spring-framework/4.0.9/4.1.0/6f189/bin_compat_report.html) v4.1.0 of library ""spring-jms"" removed the protected method ""initDefaultStrategies()"" from MessageListenerAdapter. [This commit](https://github.com/spring-projects/spring-framework/commit/713dd60fa74843ba8d27c1c459dc9e7beb9dac19) was made in support of delivering #14515 and made MessageListenerAdapter extend ""AbstractAdaptableMessageListener"" and moved the initDefaultStrategies() call to that class. So far so good / I don't think this commit is an issue. [This later commit](https://github.com/spring-projects/spring-framework/commit/fa4f51c5d0f3e74ece578aeaa2a8a15a57b7df0a) was made in support of #15500 which removed the initDefaultStrategies() call from ""AbstractAdaptableMessageListener"".  Neither of the Jira tickets appears to speak to an intentional change of this behavior. If it was intentional your response(s) to this ticket will serve to document for others the ""why"" behind this backward-incompatible change.  If this change wasn't intentional and you fix it in a later version of Spring that simplifies my process and my software as I can just enable controls to prevent people from using the versions that lack the necessary code.  [This comment](https://github.com/spring-projects/spring-framework/commit/fa4f51c5d0f3e74ece578aeaa2a8a15a57b7df0a#commitcomment-20276425) explains why I think this change was unintentional.  ---  **Affects:** 4.1.9  **Issue Links:** - #14515 Annotation-driven JMS endpoints - #15500 Applying the spring-messaging module to JMS  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/afe022853cb9ec9c3f9efe302dec1f173449b722  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2016-12-22T17:10:04Z","2019-01-11T15:16:28Z"
"","19464","BeanPropertyRowMapper should be able to convert SQL timestamp to java.time.LocalDate/LocalTime [SPR-14898]","**[gopalarao](https://jira.spring.io/secure/ViewProfile.jspa?name=gopal.kolluri)** opened **[SPR-14898](https://jira.spring.io/browse/SPR-14898?redirect=false)** and commented  Caused by: java.lang.IllegalStateException: Cannot convert value of type [java.sql.Timestamp] to required type [java.time.LocalDate] for property 'effectiveFromDate': no matching editors or conversion strategy found at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:306)  ---  **Affects:** 4.3.2  **Issue Links:** - #18461 BeanPropertyRowMapper should use ConversionService for date-time support","closed","type: enhancement,","spring-projects-issues","2016-11-11T02:05:06Z","2019-01-11T17:39:33Z"
"","19253","CustomNumberEditor issue with string conversion [SPR-14689]","**[Giuseppe Corsaro](https://jira.spring.io/secure/ViewProfile.jspa?name=gcorsaro@gmail.com)** opened **[SPR-14689](https://jira.spring.io/browse/SPR-14689?redirect=false)** and commented  Hello, I think to have found an issue in the CustomNumberEditor class in the Spring Beans package. The issue is caused by a presumable bug in java.text.NumberFormat.parse that doesn't convert the number following the specified pattern. Here you can find an example on ideone https://ideone.com/6l0bGF In the example I'd expect to have one digit after comma, when using _parse_, as done by using _format_ method To workaround the issue I have created a copy of CustomNumberEditor where I changed the setAsText method from:  ```java @Override public void setAsText(String text) throws IllegalArgumentException {      if (this.allowEmpty && !StringUtils.hasText(text)) {           // Treat empty String as null value.           setValue(null);      }      else if (this.numberFormat != null) {           // Use given NumberFormat for parsing text.           setValue(NumberUtils.parseNumber(text, this.numberClass, this.numberFormat));      }      else {           // Use default valueOf methods for parsing text.           setValue(NumberUtils.parseNumber(text, this.numberClass));      } } ```  to  ```java @Override public void setAsText(String text) throws IllegalArgumentException {      if (this.allowEmpty && !StringUtils.hasText(text)) {           // Treat empty String as null value.           setValue(null);      }      else if (this.numberFormat != null) {           // Use given NumberFormat for parsing text.           try {                setValue(this.numberFormat.parse(this.numberFormat.format(NumberUtils.parseNumber(text, this.numberClass, this.numberFormat))));           } catch (ParseException e) {                setValue(null);           }      }      else {           // Use default valueOf methods for parsing text.           setValue(NumberUtils.parseNumber(text, this.numberClass));      } } ```  I realize it's an issue related to java framework but it would be great to change the modifier for numberClass, numberFormat and allowEmpty to protected in order to make CustomNumberEditor class extensible. Just for info, I'm running the code in a Spring Batch job.   ---  **Affects:** 4.3.2","open","status: bulk-closed,","spring-projects-issues","2016-09-10T19:27:56Z","2019-06-28T10:34:51Z"
"","19170","Environment variables as properties stopped working after disabling XML validation [SPR-14601]","**[Giovanni Toraldo](https://jira.spring.io/secure/ViewProfile.jspa?name=gionn)** opened **[SPR-14601](https://jira.spring.io/browse/SPR-14601?redirect=false)** and commented  I tried to disable XML validation as advertised here: https://cloud.google.com/appengine/articles/spring_optimization#Disable_XML_Validation  I have constant failure on our CI since disabling XML validation, due to properties anymore populated via OS environment variables (build relies on them).  I don't understand what is the correlation between XML parsing and properties evaluation.   ---  **Affects:** 4.3.2","closed","status: bulk-closed,","spring-projects-issues","2016-08-18T15:07:45Z","2019-01-12T02:25:22Z"
"","19297","cve-2016-5007 [SPR-14731]","**[gil](https://jira.spring.io/secure/ViewProfile.jspa?name=puntogil)** opened **[SPR-14731](https://jira.spring.io/browse/SPR-14731?redirect=false)** and commented  hi any plan for fix https://pivotal.io/security/cve-2016-5007 also in 3.x , 4.1, and 4.2 branches? thanks in advance regards   --- No further details from [SPR-14731](https://jira.spring.io/browse/SPR-14731?redirect=false)","closed","status: declined,","spring-projects-issues","2016-09-19T09:11:02Z","2019-01-12T16:33:53Z"
"","19089","StackOverflowError at AbstractJackson2HttpMessageConverter.resolveVariable [SPR-14520]","**[Gerasimov Gennady](https://jira.spring.io/secure/ViewProfile.jspa?name=mumukiller)** opened **[SPR-14520](https://jira.spring.io/browse/SPR-14520?redirect=false)** and commented  Jackson 2.8.1 Spring 4.3.1.RELEASE  We have a complex hierarchy of classes like  ```java  public class Api         extends BaseApi         implements CrudApi { } ```  where  ```java public interface CrudApi, D extends Dto, ID extends Serializable & Comparable> extends ReadOnlyApi { } ```  Applications fails with: Caused by: java.lang.StackOverflowError: null at org.springframework.core.ResolvableType.hasGenerics(ResolvableType.java:474) at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.resolveVariable(AbstractJackson2HttpMessageConverter.java:326) at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.resolveVariable(AbstractJackson2HttpMessageConverter.java:332) at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.resolveVariable(AbstractJackson2HttpMessageConverter.java:332) at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.resolveVariable(AbstractJackson2HttpMessageConverter.java:332) ...  The issue is in line 332. At some point the method resolveVariable faces Object as result of contextType.getSuperType() and falls with StackOverflowError as result for getSuperType() method for Object is Object.  I tried to check what if there is a check for that and method continues further. Looks like it works well.  There is a code below which i added to check what happenes if method passes further after line 332  ```java final Class contextTypeSuperType = contextType.getSuperType().resolve();                 if (!(contextTypeSuperType == null || contextTypeSuperType.equals(Object.class))) {                     resolvedType = resolveVariable(typeVariable, contextType.getSuperType());                     if (resolvedType.resolve() != null) {                         return resolvedType;                     }                 } ```  I'm not sure that this is a bug, but i do not find any solutions for my case in stackoverflow.com or other similar resources.  ---  **Affects:** 4.3.1  **Attachments:** - [SPR14520.java](https://jira.spring.io/secure/attachment/23490/SPR14520.java) (_3.73 kB_)  **Issue Links:** - #19039 Jackson 2.6.x -> 2.7 deserialize generic fails when calling Spring controller  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7c5050cf804fe2b0f391fe48c691ffc7b3c7cdd0, https://github.com/spring-projects/spring-framework/commit/e86529ec9042705edcd086c4e2f00c58c6c118bd","closed","in: core,","spring-projects-issues","2016-07-28T14:11:42Z","2019-01-11T17:39:58Z"
"","19560","Clarify rollback-on consistency between DefaultTransactionAttribute and TransactionTemplate [SPR-14994]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-14994](https://jira.spring.io/browse/SPR-14994?redirect=false)** and commented  The `DefaultTransactionAttribute.rollbackOn()` javadoc says it is ""consistent with the `TransactionTemplate` 's default behavior""...  ``` /**  * The default behavior is as with EJB: rollback on unchecked exception.  * Additionally attempt to rollback on Error.  * This is consistent with TransactionTemplate's default behavior.  */ @Override public boolean rollbackOn(Throwable ex) { 	return (ex instanceof RuntimeException || ex instanceof Error); } ```  Since #11027, this is no longer strictly correct, in that a rollback will occur for any exception there.  Of course, as seen in that JIRA attachment, actually throwing a checked exception is a bit convoluted (reflection on a ctor that throws a checked exception), so perhaps this is ok.  However when looking at the code it appears incorrect and I had to dig back into the commit history to understand what's going on; perhaps adding a comment to the template code where we catch `Exception` (now `Throwable` since #18901) would help.  Or, [Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller), feel free to just close this if you don't think any changes are warranted.  ---  **Affects:** 4.2.8, 4.3.4  **Issue Links:** - #11027 TransactionTemplate leaks transactions when TransactionCallback propagates undeclared checked exception - #18901 After-completion callback not triggered for custom Throwable subclass  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/953bc189e706950ac25cb36b95d62afb9b0d2740, https://github.com/spring-projects/spring-framework/commit/0296c7c5b6a856fd06b3aac2ec83caaaf778c99f, https://github.com/spring-projects/spring-framework/commit/2de488e7f54bba760ba353ff720a6e795a0a357b  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","type: task,","spring-projects-issues","2016-12-08T17:22:49Z","2019-01-11T19:13:58Z"
"","19553","SpEL and Date Literals [SPR-14987]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-14987](https://jira.spring.io/browse/SPR-14987?redirect=false)** and commented  The reference documentation talks about date literals...  > The types of literal expressions supported are strings, dates, numeric values (int, real, and hex), boolean and null.  but it appears that `DateLiteral` was [removed before GA](https://github.com/spring-projects/spring-framework/commit/efee3b34346202b5397ecceea5a9e023001101b4).  ---  **Affects:** 3.2.17, 4.2.8, 4.3.4  **Reference URL:** http://stackoverflow.com/questions/40998928/how-to-express-date-literal-in-spel  **Issue Links:** - #18933 Doc: SpEL behavior when comparing value to null  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","in: core,","spring-projects-issues","2016-12-06T18:57:38Z","2019-01-14T04:36:55Z"
"","19496","ConversionService performance regression [SPR-14929]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-14929](https://jira.spring.io/browse/SPR-14929?redirect=false)** and commented  Consider the following:  ```java public class SpELTests {  	@Test 	public void test() { 		Expression exp = new SpelExpressionParser().parseExpression( 				""#target.filter(headers['dummyHeader'] != null "" 				+ ""? headers['dummyHeader'] "" 				+ "": T(org.springframework.util.Assert).isTrue(false, 'required header not available: dummyHeader'))""); 		Message message = MessageBuilder.withPayload(""foo"").setHeader(""dummyHeader"", ""bar"").build(); 		EvaluationContext context = new StandardEvaluationContext(); 		context.setVariable(""target"", new DummyFilter()); 		StopWatch watch = new StopWatch(); 		watch.start(); 		for (int i = 0; i < 5000; i++) { 			Object value = exp.getValue(context, message); 		} 		watch.stop(); 		System.out.println(""Elapsed: "" + watch.getTotalTimeSeconds()); 	}  	public static class DummyFilter {  		@Filter 		public boolean filter(@Header(""dummyHeader"") String dummyValue) { 			return true; 		}  	}  } ```  When run with Spring Framework 4.3.3 it runs in < 0.5 seconds; with 4.3.4 it takes 40+ seconds.  With YourKit, I tracked the problem down to `DefaultConversionService.getConverter()` with source and target type descriptors:  ``` java.lang.String @org.springframework.messaging.handler.annotation.Header java.lang.String ```  The performance issue is because `this.converterCache.get(key);` seems to miss on every iteration (which in turn causes `AnnotationUtils.getDefaultValue()` which is where the cost is incurred). `getDefaultConverter()` correctly returns a NoOp converter which is inserted into the cache but, for some reason, that entry is not found in later iterations.  After several iterations, `this.converterCache` contains  ``` {ConverterCacheKey [sourceType = java.lang.String, targetType = @org.springframework.messaging.handler.annotation.Header java.lang.String]=NO_OP,  ConverterCacheKey [sourceType = java.lang.String, targetType = @org.springframework.messaging.handler.annotation.Header java.lang.String]=NO_OP,  ConverterCacheKey [sourceType = java.lang.String, targetType = java.lang.String]=NO_OP,  ConverterCacheKey [sourceType = java.lang.String, targetType = @org.springframework.messaging.handler.annotation.Header java.lang.String]=NO_OP,  ConverterCacheKey [sourceType = java.lang.String, targetType = @org.springframework.messaging.handler.annotation.Header java.lang.String]=NO_OP,  ConverterCacheKey [sourceType = java.lang.Boolean, targetType = java.lang.Boolean]=NO_OP} ```  With 4.3.3, I `this.converterCache` contains:  ``` {ConverterCacheKey [sourceType = java.lang.String, targetType = @org.springframework.messaging.handler.annotation.Header java.lang.String]=NO_OP,  ConverterCacheKey [sourceType = java.lang.String, targetType = java.lang.String]=NO_OP,  ConverterCacheKey [sourceType = java.lang.Boolean, targetType = java.lang.Boolean]=NO_OP} ```  So the issue seems to be the cache entries are not found, perhaps some problem with the hash.  ---  **Affects:** 4.3.4  **Issue Links:** - [INT-4170](https://jira.spring.io/browse/INT-4170) The delivery of message with be much slower to downstream filter with Header parameter - #19410 AnnotationFormatterFactory should support `@AliasFor` - #18287 Differentiate between TypeDescriptors with same annotations but different attributes - #19388 GenericConversionService.addConverter should be able to determine generic types from target class behind proxy - #19493 Improve performance for conversions using a method parameter based type descriptor with annotations - #19626 Annotated method argument matching performance issue  0 votes, 7 watchers","closed","in: core,","spring-projects-issues","2016-11-21T17:17:38Z","2019-01-13T05:18:53Z"
"","19420","Consider making MessageChannel a @FunctionalInterface [SPR-14854]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-14854](https://jira.spring.io/browse/SPR-14854?redirect=false)** and commented  We have a number of test cases with ...  ``` handler.setOutputChannel(new MessageChannel() {  	@Override 	public boolean send(Message message, long timeout) {                 ... 	}  	@Override 	public boolean send(Message message) { 		return send(message, 0); 	} }); ```  If there was a `default` implementation of one of these methods, we could use lambdas in the test cases.   ---  **Affects:** 5.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-integration/commit/67d6cd0c89ecb6e948887fd25de6f86705eac0e9","closed","type: enhancement,","spring-projects-issues","2016-10-26T17:58:13Z","2016-11-08T13:11:18Z"
"","19221","Consider moving Spring Boot's OutputCapture Rule to spring-test [SPR-14656]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-14656](https://jira.spring.io/browse/SPR-14656?redirect=false)** and commented  Boot has a JUnit `@Rule` `OutputCapture`. It has no boot dependencies (although it does do a runtime check for boot's `AnsiOutput` being on the class path, but there's no hard dependency).  This would be useful in a number of our projects where we currently use `Mockito` to `spy()` on the commons logger to verify some expected output.   ---  **Reference URL:** http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html#boot-features-output-capture-test-utility","closed","status: bulk-closed,","spring-projects-issues","2016-09-01T14:53:19Z","2019-01-12T02:25:05Z"
"","19401","Spring MVC binding of email influences other fields too [SPR-14835]","**[G. Stach](https://jira.spring.io/secure/ViewProfile.jspa?name=geooorg)** opened **[SPR-14835](https://jira.spring.io/browse/SPR-14835?redirect=false)** and commented  Hello,  since this is my first bug report I hope all relevant information are correctly inserted.  I'm using Spring WebFlow 2.3.3 and  org.springframework:spring-webmvc:jar:**4.0.9**.RELEASE. NOTE I could not select this version from the version chooser.  This bug has the following behaviour: The Spring Binding calls another setter for a property of a form bean if the types match, although these are two different properties. It seems to depend on the JSP form input type attribute.  In this case I noticed that two fields related to an email address were bound with a value, although these are two different fields with different paths.  **Concrete example:** There is a form bean with two properties:  String email String emailRepeat.  It's bound to the request in Spring WebFlow like this:  ```xml  ```  The start state looks like this:  ```xml                     .../> ```  The PrefillRegistrationHelper just returns an email address from the session. It's a comfort feature so that the user does not have to enter the email address again if it was already entered before in another form (there is an action that saves it to the session of course).  Now in the JSP we have the form containing these two fields:  ```xml                ```  The bug: The field emailRepeat is bound to the emailAddress field. But if you remove the (see bold print) highlighted attribute type=""email"", it works as expected.  Thanks in advance for having a look and fixing the bug.   --- No further details from [SPR-14835](https://jira.spring.io/browse/SPR-14835?redirect=false)","closed","in: web,","spring-projects-issues","2016-10-21T12:47:24Z","2019-01-11T17:29:05Z"
"","18931","Hibernate 5.2 misses SessionImplementor.getTransactionCoordinator() [SPR-14359]","**[Frank Prumbaum](https://jira.spring.io/secure/ViewProfile.jspa?name=fprumbau)** opened **[SPR-14359](https://jira.spring.io/browse/SPR-14359?redirect=false)** and commented  Since updating to Hibernate 5.2 and Spring 4.3.GA our Integrationtests fail with  ```xml java.lang.NoSuchMethodError: org.hibernate.event.spi.EventSource.getTransactionCoordinator()Lorg/hibernate/resource/transaction/TransactionCoordinator;  	at org.hibernate.search.backend.impl.EventSourceTransactionContext.isLocalTransaction(EventSourceTransactionContext.java:117) 	at org.hibernate.search.backend.impl.EventSourceTransactionContext.registerSynchronization(EventSourceTransactionContext.java:84) 	at org.hibernate.search.backend.impl.PerTransactionWorker.performWork(PerTransactionWorker.java:73) 	at org.hibernate.search.event.impl.FullTextIndexEventListener.processWork(FullTextIndexEventListener.java:237) 	at org.hibernate.search.event.impl.FullTextIndexEventListener.onPostInsert(FullTextIndexEventListener.java:110) 	at org.hibernate.action.internal.EntityInsertAction.postInsert(EntityInsertAction.java:164) 	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:131) 	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:560) 	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:434) 	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:337) 	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39) 	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1396) 	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:472) 	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3132) 	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2369) 	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:467) 	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:147) 	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$100(JdbcResourceLocalTransactionCoordinatorImpl.java:38) 	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:221) 	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:68) 	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:517) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:761) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:730) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:485) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:291) 	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) 	at de.xxx.mad.core.service.spi.ConfigServiceImplTest_IT.ShouldCheckCopyFile(ConfigServiceImplTest_IT.java:348) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75) 	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86) 	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:119) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144) ```  Looking at the code, the interface **org.hibernate.engine.spi.SessionImplementor**, which is extended by EventSource lost the method **getTransactionCoordinator**.   ---  **Affects:** 4.3 RC1, 4.3 RC2, 4.3 GA  **Attachments:** - [screenshot-1.png](https://jira.spring.io/secure/attachment/23423/screenshot-1.png) (_96.29 kB_) - [screenshot-2.png](https://jira.spring.io/secure/attachment/23424/screenshot-2.png) (_1.49 kB_)  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2016-06-13T15:43:32Z","2019-01-12T05:22:37Z"
"","18956","HEAD/GET in MVC not fully backward-compatible [SPR-14383]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-14383](https://jira.spring.io/browse/SPR-14383?redirect=false)** and commented  I have a controller that looks more or less like this (just relevant parts):  ```java @RequestMapping(""/abcd/{myID}/stuff"") public class StuffController extends AbstractBaseController { 	/* ... */ 	@ResponseBody 	@ResponseStatus(value = HttpStatus.NO_CONTENT) 	@RequestMapping(value = ""/*"", method = HEAD) 	public void checkExists(@PathVariable MyID myID) throws StuffNotFoundException { 		stuffService.checkExists(myID, parsePath()); 	}   	@ResponseBody 	@RequestMapping(value = ""/*"", method = GET, produces = StuffRetrievalResponse.JSON_MIME_TYPE) 	public StuffRetrievalResponse get(@PathVariable MyID myID) throws StuffNotFoundException { 		Stuff stuff = stuffService.get(myID, parsePath()); 		StuffRetrievalResponse res = new StuffRetrievalResponse(); 		fill(res, stuff); 		return res; 	}  } ```  Now, always GET gets invoked instead of HEAD. We are still debugging but we're thinking that the compareTo method in RequestMethodsRequestCondition is related to the issue.   ---  **Affects:** 4.3 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/058279bc7ed0466c0106b62c6a3455f1f316cb0c  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2016-06-20T15:45:33Z","2019-01-14T04:38:55Z"
"","19064","Inherited Controller @RequestMapping does not work [SPR-14495]","**[fangsj](https://jira.spring.io/secure/ViewProfile.jspa?name=fangsj)** opened **[SPR-14495](https://jira.spring.io/browse/SPR-14495?redirect=false)** and commented  ```java public interface ControllerInterface {      @RequestMapping(""sayYes"")     @ResponseBody     String sayYes();      @RequestMapping(""sayNo"")     @ResponseBody     String sayNo(); } ```  ```java public abstract class ControllerInterfaceImpl {     public String sayYes() {         return ""yes"";     } } ```  ```java public abstract class ControllerInterface1     extends ControllerInterfaceImpl implements ControllerInterface { } ```  ```java @RequestMapping(""test"") public class TestController extends ControllerInterface1 {     @Override     public String sayNo() {         return ""sayNo"";     } } ```  I found that the RequestMapping for ""test/sayYes"" works, but the RequestMapping for ""test/sayNo"" does not work.   --- No further details from [SPR-14495](https://jira.spring.io/browse/SPR-14495?redirect=false)","closed","status: declined,","spring-projects-issues","2016-07-20T13:28:56Z","2019-01-12T16:34:06Z"
"","18904","Doc: Constructor injection of arrays and collections [SPR-14332]","**[Fabrizio Cucci](https://jira.spring.io/secure/ViewProfile.jspa?name=fabrizio.cucci)** opened **[SPR-14332](https://jira.spring.io/browse/SPR-14332?redirect=false)** and commented  Hi spring staff,  I'm writing to signal a documentation improvement related to [this](http://stackoverflow.com/questions/37622337/constructor-injection-and-arrays-with-spring) Stack Overflow question.  I'm referring to [this](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#beans-autowired-annotation-qualifiers) section and specifically the following statement:  ??As a specific consequence of this semantic difference, beans that are themselves defined as a collection or map type cannot be injected through `@Autowired`, because type matching is not properly applicable to them. Use `@Resource` for such beans, referring to the specific collection or map bean by unique name.??  There are a couple of implicit, but important, consequences of the previous statement: 1. since `@Autowired` cannot be used to inject beans that are themselves defined as a collection or map and `@Resource` is not applicable to constructors, **constructor injection of those beans is currently not possible**; 2. what mentioned before **applies also to arrays**, besides collections and maps.  Whether this is a limitation or a design choice is debatable but still, for the time being, I think the documentation should be more explicit about those points.  Thanks, Fabrizio  ---  **Affects:** 4.3 RC2  **Reference URL:** http://stackoverflow.com/questions/37622337/constructor-injection-and-arrays-with-spring  **Issue Links:** - #12570 Allow for normal bean wiring semantics for types assignable to Map - #16794 `@Autowired` does not work for target bean of type Collection","closed","type: documentation,","spring-projects-issues","2016-06-05T10:01:19Z","2019-01-13T05:25:33Z"
"","19166","CssLinkResourceTransformer is incompatible with ContentVersionStrategy when using Caching [SPR-14597]","**[Fabien Chebel](https://jira.spring.io/secure/ViewProfile.jspa?name=fchebel)** opened **[SPR-14597](https://jira.spring.io/browse/SPR-14597?redirect=false)** and commented  ## The problem  In our application, we are using a ContentVersionStrategy within Spring's VersionResourceResolver. Spring is serving 2 css files which are in the following hierarchy path:  ``` - themes |- alpha    |- style.css    |- sprite.png |- beta    |- style.css    |- sprite.png ```  Both style.css files define different classes, so they can safely be included on the same HTML page. Each style.css file references the sprite.png file in the following way:  ```css .alpha {      background-image:url(""sprite.png""); } ```  After being processed by the CssLinkResourceTransformer and the VersionResourceResolver components, the css files look like this (assuming I load `alpha/style.css` in my browser first):  **alpha/style.css**  ```css .alpha {      background-image:url(""sprite-md5-of-alpha-sprite.png""); } ```  **beta/style.css**  ```css .beta {      background-image:url(""sprite-md5-of-alpha-sprite.png""); } ```  As you can see, both file names are being rewritten with the same md5 hash. I expected to get the following result for **beta/style.css** :  ```css .beta {      background-image:url(""sprite-md5-of-beta-sprite.png""); } ```  ## Problem cause  After debbuging the code for a bit, I noticed that the `CssLinkResourceTransformer` component forwards the png file name as is (as it appears within the ""url()"" declaration, so ""sprite.png"" in my case) to the `CachingResourceResolver` component via `CssLinkResourceTransformer#resolveUrlPath`.  After having successfully resolved the url path of the 'sprite.png' file, `CachingResourceResolver#resolveUrlPathInternal` proceeds to store it in its internal cache using the following cache key:  ``` resolvedUrlPath:sprite.png ```  The problem is that this cache key is not unique at all. When the `CachingResourceResolver` is subsequently called to resolve the sprite.png file (from the beta folder), it will return the cached entry that matches the sprite.png file from the alpha folder.  So far I haven't found a reliable fix for this issue.  I know that as a workaround I can rename the 'sprite.png' file to make it unique (thus making the cache key unique), but I may not have that kind of liberty if a library loads multiple resources with the same file name.  ---  **Affects:** 4.2.7  **Reference URL:** https://github.com/heffebaycay/spring-css-resource-issue  **Issue Links:** - #19165 VersionResourceResolver-  Bug when CssLinkResourceTransformer handling relative links (_**""is duplicated by""**_) - #18300 CssLinkResourceTransformer is incompatible with FixedVersionStrategy VersionResourceResolver - #19933 Regression: CssLinkResourceTransformer is now incompatible with relative links  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2016-08-17T16:28:00Z","2019-01-11T18:03:13Z"
"","19581","JsonPathExpectationsHelper with a JSON path filter does not work well with Matchers [SPR-15014]","**[Fabian Winter](https://jira.spring.io/secure/ViewProfile.jspa?name=fdw)** opened **[SPR-15014](https://jira.spring.io/browse/SPR-15014?redirect=false)** and commented  In Spring MVC tests with MockMVC, it is possible to test single values from the response using JSON path and Hamcrest matchers like `andExpect(jsonPath(""$.books\[0\].title"").value(endsWith(""Games""))`. JSON path also supports filtering, for example `$.books\[?(@.author==""Iain Banks"")\].title`. Here, the result must necessarily be a list of items, since more than one title (or none) is possible.  If an expectation uses such a filter and only one item is in the list, a test against an expected value works intuitively, because the single item is automatically extracted (see `assertValue(String responseContent, Object expectedValue)` in [JsonPathExpectationsHelper](https://github.com/spring-projects/spring-framework/blob/master/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java)) and can thus be tested against the single expected value. However, a similar test using a matcher is not possible, since there is no such automatic extraction in the used method (`assertValue(String responseContent, Matcher matcher)` - even if there is only one item in the list, I cannot test it with a String matcher like `endsWith`. Additionally, I cannot select a specific item of this list to test against (f.e. `$.books\[?(@.author==""Iain Banks"")\].title[0]`); this always throws an error ""No matching value for JSON path"". Thus, it is impossible to select a single value using a JSON path with a filter and test it using matchers. This is a problem if one has an unordered set of different items that need to be tested individually and wants to find the correct one using such a filtered JSON path. What I specifically want to do is something like `jsonPath(""$.books\[?(@.author==""Iain Banks"")\].title"").value(endsWith(""Games""))`, followed by `jsonPath(""$.books\[?(@.author==""China Mieville"")\].title"").value(endsWith(""City""))`, although I do not know the order in `$.books` and thus cannot identify each by an index.  Is there a reason that the method for matchers does not support extraction from a singleton list? Would you accept a pull request for the automatic extraction?   ---  **Affects:** 4.1.9, 4.3.4","closed","status: bulk-closed,","spring-projects-issues","2016-12-14T13:32:55Z","2019-01-12T00:11:48Z"
"","19162","ReactorHttpClientConnector ignores SSL support [SPR-14593]","**[Erik Olsson](https://jira.spring.io/secure/ViewProfile.jspa?name=mrpeachum)** opened **[SPR-14593](https://jira.spring.io/browse/SPR-14593?redirect=false)** and commented  The `org.springframework.http.client.reactive.ReactorClientHttpConnector` disables SSL support by calling `reactor.ipc.netty.http.HttpClient.create(uri.toString())` instead of `reactor.ipc.netty.http.HttpClient.create()`.  `reactor.ipc.netty.http.HttpClient.create(uri.toString())` forces all connections over port 80.   ---  **Affects:** 5.0 M1  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1136, and commits https://github.com/spring-projects/spring-framework/commit/64bc0ca744781af2bf96412ced0f439fc98ee00d","closed","type: bug,","spring-projects-issues","2016-08-17T13:38:40Z","2016-09-21T12:13:13Z"
"","19161","Reactive response extractor does not invoke error handler [SPR-14592]","**[Erik Olsson](https://jira.spring.io/secure/ViewProfile.jspa?name=mrpeachum)** opened **[SPR-14592](https://jira.spring.io/browse/SPR-14592?redirect=false)** and commented  The helper methods in `org.springframework.web.client.reactive.ResponseExtractors` that return a `Mono>` do not invoke the `webClientConfig.getResponseErrorHandler()`, and as such do not throw errors when getting an error response code, as the `body()` extractors do.  This is solved by adding a `.doOnNext()` to the `ResponseExtractor>> response(ResolvableType bodyType)` method to invoke the error handler, similar to the way the `body()` extractors work.   ---  **Affects:** 5.0 M1  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1137","closed","status: invalid,","spring-projects-issues","2016-08-17T13:33:37Z","2019-01-12T05:22:15Z"
"","18962","@JmsListener endpoint @Payload resolution fails due to interplay of new LazyResolutionMessage and MessagingMessageConverterAdapter [SPR-14389]","**[Eric Milles](https://jira.spring.io/secure/ViewProfile.jspa?name=eric.milles)** opened **[SPR-14389](https://jira.spring.io/browse/SPR-14389?redirect=false)** and commented  When migrating to Spring 4.3.0, we found an incompatibility between our current `@JmsListener` config and the new lazy message resolution change https://github.com/spring-projects/spring-framework/commit/31a3607de6fd95a372e9330632a869db064892bd).  When a message comes in, the PayloadArgumentResolver is trying to handle it.  PAR.resolveArgument receives a LazyResolutionMessage.  Calling getPayload delegates to an overridden extractPayload in MessagingMessageConverterAdapter.  MMCA.extractPayload delegates to our configured MessagingMessageConverter's fromMessage.  However, MMC.fromMessage has been overridden and so another LazyResolutionMessage is produced, instead of the converted payload.  As a workaround, I overrode MessagingMessageConverter.fromMessage to call its extractPayload.  In Spring 4.2.6, I did not need this.  We have a JMS listener method like this:  ```java    @JmsListener(id = ""1"", containerFactory = ""jmsListenerContainerFactory"", destination = ""theEventsQueue"")     public void processResearchTrailEvents(@Payload final Event[] events, @Headers final Map headers)  @Configuration @EnableJms public class MessagingConfig {     @Bean @Scope(""prototype"")     public DefaultJmsListenerContainerFactory jmsListenerContainerFactory()         throws Exception     {         final DefaultJmsListenerContainerFactory containerFactory = new DefaultJmsListenerContainerFactory();         ...         containerFactory.setMessageConverter(jmsMessageConverter());         return containerFactory;     }      @Bean     public MessageConverter jmsMessageConverter()     {         final MessagingMessageConverter messageConverter = new MessagingMessageConverter();         messageConverter.setPayloadConverter(new EventsPayloadMessageConverter());         return messageConverter;     } } ```    ---  **Affects:** 4.3 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eba873067c27dd3c64b95a38583ef4a45ea0c759","closed","type: bug,","spring-projects-issues","2016-06-22T17:14:01Z","2016-11-28T08:49:18Z"
"","19540","Introduce patchForObject/patchForLocation to RestTemplate/RestOperations [SPR-14974]","**[Eric Deandrea](https://jira.spring.io/secure/ViewProfile.jspa?name=edeandrea)** opened **[SPR-14974](https://jira.spring.io/browse/SPR-14974?redirect=false)** and commented  RestOperations/RestTemplate should support patchForObject/patchForLocation just like it does for post.  ---  **Affects:** 4.3.4  **Issue Links:** - #19423 Add PATCH HTTP operation to RestTemplate (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2016-12-02T19:27:10Z","2019-01-11T19:15:37Z"
"","19473","ExceptionHandlerExceptionResolver should not log propagated exceptions at warn level [SPR-14907]","**[Eric Deandrea](https://jira.spring.io/secure/ViewProfile.jspa?name=edeandrea)** opened **[SPR-14907](https://jira.spring.io/browse/SPR-14907?redirect=false)** and commented  In spring-webmvc - org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver line 386 was changed from a logger.debug in version 4.3.3 (line 384 in version 4.3.3) to logger.warn in version 4.3.4. This might not seem like a big deal but is causing lots of non-necessary stack traces in our applications.  We have a FaultBarrier implemented as a SpringMVC `@ExceptionHandler` method, implemented as below. Basically its a generic handler that catches all exceptions. If the exception itself is annotated with `@ResponseStatus`, we simply re-throw it & let SpringMVC handle it. Now as of version 4.3.4 this is logging warning exception stack traces to our logs which is triggering out paging system to page people (our system pages out if any stack traces appear as WARN or ERROR levels), even though most of the exception codes in the `@ResponseStatus` are 400 series exceptions and are not error conditions at all. Our only fix so far is to downgrade back to 4.3.3.  ```java @ExceptionHandler(Exception.class) public ResponseEntity defaultErrorHandler(Exception ex) throws Exception { 	ResponseStatus responseStatusAnnotation = AnnotationUtils.findAnnotation(ex.getClass(), ResponseStatus.class);  	if (responseStatusAnnotation != null) { 		// If the exception is annotated with @ResponseStatus, rethrow it and let the framework handle it 		throw ex; 	} 	else { 		// Do some other stuff here which isn't important to this issue 	} } ```  Here's the stack trace it generates:  ``` [11/14/2016 16:54:24.101 | WARN](http-nio-8080-exec-1 | org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver:386): Failed to invoke @ExceptionHandler method: public org.springframework.http.ResponseEntity my.app.common.api.FaultBarrier.defaultErrorHandler(java.lang.Exception) throws java.lang.Exception my.app.model.NotFoundException: Policy 1000 was not found 	at my.app.api.PoliciesApi.convert(PoliciesApi.java:126) 	at my.app.api.PoliciesApi.getPolicy(PoliciesApi.java:100) 	at my.app.api.PoliciesApi$$FastClassBySpringCGLIB$$b9887c8b.invoke() 	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) 	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:720) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) 	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133) 	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) 	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:655) 	at my.app.api.PoliciesApi$$EnhancerBySpringCGLIB$$2c76a269.getPolicy() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:220) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:105) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:89) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:107) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:784) 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1410) 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Thread.java:745) Caused by: my.app.model.PolicyNotFoundException: Policy 1000 was not found ```  ---  **Affects:** 4.3.4  **Issue Links:** - #19427 Log exception from `@ExceptionHandler` at higher level than debug - #19461 Allow HTTP status exceptions to be easily thrown from Controllers - #21916 ExceptionHandlerExceptionResolver started to log on WARN level - #18504 Exclude an exception from `@ExceptionHandler`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/96bfc14dba7691f0f8cd893ac90b39e09ac8ae1a, https://github.com/spring-projects/spring-framework/commit/f22a4a4e807aaa673e7290835766052974c5eb47","closed","type: regression,","spring-projects-issues","2016-11-14T21:52:14Z","2019-01-14T04:37:09Z"
"","19402","Grammatical Error in Spring Framework Code Style github wiki page [SPR-14836]","**[Emil Abraham](https://jira.spring.io/secure/ViewProfile.jspa?name=emilabraham)** opened **[SPR-14836](https://jira.spring.io/browse/SPR-14836?redirect=false)** and commented  In this section, you mention that single characters should not be used as variable names. Currently in the wiki it says:  ``` Avoid using variable name for a single character. For instance prefer Method method to Method m. ```  What I believe it should say is:  ``` Avoid using single characters as variable names. For instance prefer Method method to Method m. ```    ---  **Reference URL:** https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style#variable-names","closed","","spring-projects-issues","2016-10-21T13:28:02Z","2019-01-11T17:28:22Z"
"","19426","RestTemplate POST and PUT don't work with Netty4ClientHttpRequestFactory [SPR-14860]","**[Emanuel Seidinger](https://jira.spring.io/secure/ViewProfile.jspa?name=eseidinger)** opened **[SPR-14860](https://jira.spring.io/browse/SPR-14860?redirect=false)** and commented  When configuring the RestTemplateBuilder using the Netty4ClientHttpRequestFactory I get an error message when making PUT or POST requests with the built RestTemplate:  > Failed to read HTTP message:... HttpMessageNotReadableException: Required request body is missing > When I use SimpleClientHttpRequestFactory everything works fine.  I use the following Netty dependency: `compile 'io.netty:netty-all:4.1.6.Final'`  A sample project illustrating the problem can be found here: [https://github.com/eseidinger/spring-boot-netty-problem](https://github.com/eseidinger/spring-boot-netty-problem)  I first thought it's a Spring Boot issue with the TestRestTemplate only, because creating a RestTemplate using its constructor worked. But it turned out that the TestRestTemplate was automatically configured to use the Netty4ClientHttpRequestFactory when it finds Netty on the classpath and configuring the RestTemplate with the Netty4ClientHttpRequestFactory resulted in the same problem. The issue can be found here: [https://github.com/spring-projects/spring-boot/issues/7240](https://github.com/spring-projects/spring-boot/issues/7240)  ---  **Affects:** 4.3.3  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/7240  **Issue Links:** - #17232 Netty4ClientHttpRequestFactory buffers (aggregates) all requests/responses - #19310 Netty4ClientHttpRequestFactory should configure a default SslContext - #19806 RestTemplate with Netty produces two Content-Length headers - #19507 Support for Jetty 9.4 (and 9.3.15+)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ec8391a7fbc8ba67d1a04c9b93408230345fec36, https://github.com/spring-projects/spring-framework/commit/9d37472f23b987a1d1e06092b82a3b7fd917708b  2 votes, 7 watchers","closed","in: core,","spring-projects-issues","2016-10-29T11:31:55Z","2019-01-11T17:26:52Z"
"","18889","Can't read List from .yml File into Map [SPR-14317]","**[Emanuel Schulze Pröbsting](https://jira.spring.io/secure/ViewProfile.jspa?name=emasch)** opened **[SPR-14317](https://jira.spring.io/browse/SPR-14317?redirect=false)** and commented  ### Situation  I have a Single Page App and a Spring Boot backend. From the Backend I want to put some properties through to the Frontend. As thr Frontend is JS, I use Jackson to produce JSON from the Java Beans.  Most of my properties are only used by the frontend so that I don't have Java-Beans for all of the Properties, and it is not suitable to create them all.  So I hava a .yml File like this:  ``` gui:   service:     contact:       salutations:         - Mr.         - Mrs.         - ... ```  ### What I've done so far  Therefore I have a Java Class  ```java @Component @ConfigurationProperties(prefix = ""gui"") public class CosGuiProperties implements CosProperties {      private Map service;  } ```  I also have configrued my Application to read the yml-Files correctly into my application and that works fine, except of one exception:  ### The Problem  In Java, Springs makes from the List (Mr., Mrs, ...) a LinkedHashMap (1 => Mr., 2 => Mrs., 3 => ...) but I need List (and that is what I expect, because from the yml point of view it is a List). I debuged the Spring-Code and found the code-line where the Map is created.  ### Where the Map comes from  The Map was created in `org.springframework.beans.factory.config.YamlProcessor#300` with the comment _`Need a compound key`_  ### The Question:  Is it possible to keep the ArrayList (wich is the datatype from yml) and don't convert it to a Map with a compound key?   ---  **Affects:** 4.2.5","closed","status: invalid,","spring-projects-issues","2016-05-30T12:36:06Z","2019-01-12T05:22:42Z"
"","19389","Regression: ETag and Last-Modified headers are removed in non-safe methods that return 200 OK [SPR-14823]","**[Emanuel Hategan](https://jira.spring.io/secure/ViewProfile.jspa?name=h.emanuel)** opened **[SPR-14823](https://jira.spring.io/browse/SPR-14823?redirect=false)** and commented  It seems ETag and Last-Modified headers are removed in non-safe methods  Using the below controller endpoint  ```java @RequestMapping(method = RequestMethod.PUT, path = ""/{resId}"") public ResponseEntity put(@RequestBody String str) {   return ResponseEntity.ok()       .eTag(""1"")       .lastModified(1476890138)       .body(str); } ```  this test fails  ```java @Test public void putBug() throws Exception {   mockMvc.perform(       put(""/123"").content(""hello""))       .andExpect(status().isOk())       .andExpect(header().string(HttpHeaders.ETAG, ""\""1\""""))       .andExpect(header().string(HttpHeaders.LAST_MODIFIED, ""Sun, 18 Jan 1970 02:14:50 GMT""))       .andExpect(header().string(HttpHeaders.CONTENT_LENGTH, ""5"")); } ```  If needed, I can provide a fully fledged maven project with the code that reproduces the issue.  **In version 4.2.8 this was working fine.**  Hint: ServletWebRequest#checkNotModified(String etag, long lastModifiedTimestamp) only adds back Last-Modified and ETag headers for safe methods.  According to https://tools.ietf.org/html/rfc7231#section-4.3.4 we can have ETag and Last-Modified fields in PUT requests  ``` An origin server MUST NOT send a validator header field (Section 7.2), such as an ETag or Last-Modified field, in a successful response to PUT unless the request's representation data was saved without any transformation applied to the body ```  ---  **Affects:** 4.3.3  **Issue Links:** - #19333 ETag header is removed from PUT/POST/PATCH responses (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2016-10-19T15:25:03Z","2019-01-12T16:56:58Z"
"","19484","AbstractSockJsSession deadlock when tomcat WsSession is closing [SPR-14917]","**[Ekaterina Grebtsova](https://jira.spring.io/secure/ViewProfile.jspa?name=kali_hindi)** opened **[SPR-14917](https://jira.spring.io/browse/SPR-14917?redirect=false)** and commented  We are using spring version 4.2.8 and tomcat 7. And we got deadlock when tomcat started closing websocket session and in the same time AbstractSockJsSession started hearbeat task.  THREAD 1: org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.HeartbeatTask -> LOCK org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession#responseLock LOCK -> org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession#sendHeartbeat -> org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession#writeFrame -> org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession#disconnect -> org.springframework.web.socket.adapter.AbstractWebSocketSession#close(org.springframework.web.socket.CloseStatus) -> org.springframework.web.socket.adapter.standard.StandardWebSocketSession#closeInternal -> org.apache.tomcat.websocket.WsSession#close(javax.websocket.CloseReason) -> org.apache.tomcat.websocket.WsSession#doClose -> DEADLOCK org.apache.tomcat.websocket.WsSession#stateLock DEADLOCK  THREAD 2: org.apache.tomcat.websocket.WsSession#onClose -> LOCK org.apache.tomcat.websocket.WsSession#stateLock LOCK -> org.apache.tomcat.websocket.WsSession#fireEndpointOnClose -> org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter#onClose -> org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler#afterConnectionClosed -> org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession#delegateConnectionClosed -> org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession#cancelHeartbeat -> DEADLOCK org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession#responseLock DEADLOCK  ---  **Affects:** 4.2.8  **Issue Links:** - #19399 SockJs heartbeat causes deadlock with XHR polling  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","type: bug,","spring-projects-issues","2016-11-17T11:20:06Z","2019-01-11T19:20:02Z"
"","19031","CronSequenceGenerator causes StackOverflowError with reversed range values [SPR-14462]","**[Edward](https://jira.spring.io/secure/ViewProfile.jspa?name=monepic)** opened **[SPR-14462](https://jira.spring.io/browse/SPR-14462?redirect=false)** and commented  `CronSequenceGenerator` `next(Date date)` method causes a StackOverflowError if there is a range value in the 'minutes' or 'hours' fields where the numbers are reversed.  For example :  ```java public static void main(String[] s) {     new CronSequenceGenerator(""* 6-5 * * * *"").next(new Date());     System.out.println(""Won't get here cos StackOverflowError""); } ```  It seems to me it is fixed by adding another check to the `getRange(String field, int min, int max)` method  ---  **Affects:** 3.2.17, 4.2.7, 4.3.1  **Issue Links:** - #17469 CronSequenceGenerator constructor goes into infinite loop with invalid increments - #19158 CronSequenceGenerator.next() is not implemented as documented  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/da59b4da9be5bc1a7c84a80eed2c4f4fd95f3ec5, https://github.com/spring-projects/spring-framework/commit/44152ce4019f58337806f09bf0bf37d7f9e2a6bc, https://github.com/spring-projects/spring-framework/commit/9be54047e996b502d7cdce4057de1c9d46e4239a, https://github.com/spring-projects/spring-framework/commit/e431624e8472b3b53d1a0c4528bf736c612f1fd9  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","in: core,","spring-projects-issues","2016-07-14T15:15:11Z","2019-01-11T16:23:13Z"
"","19586","Pointcut evaluation fails against AbstractHandlerMethodMapping$MappingRegistry with AspectJ 1.8.10 [SPR-15019]","**[Eduard Dudar](https://jira.spring.io/secure/ViewProfile.jspa?name=edudar)** opened **[SPR-15019](https://jira.spring.io/browse/SPR-15019?redirect=false)** and commented  Two days ago a context in some of our builds stopped starting up. Further investigation led to the fact that AspectJ 1.8.10 was released 2 days ago and our Gradle script picked it up through ""1.8.+"" dependency. When spring-web is in dependency list the following exception occurs. We use spring-boot but the exception is in core classes thus the ticket here. Rolling back AspectJ 1.8.9 fixes this issue.  ```java org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'requestMappingHandlerMapping' defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Expected raw type form of org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:754) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:866) ~[spring-context-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:542) ~[spring-context-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.4.2.RELEASE.jar:1.4.2.RELEASE] 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761) [spring-boot-1.4.2.RELEASE.jar:1.4.2.RELEASE] 	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:371) [spring-boot-1.4.2.RELEASE.jar:1.4.2.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-1.4.2.RELEASE.jar:1.4.2.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1186) [spring-boot-1.4.2.RELEASE.jar:1.4.2.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1175) [spring-boot-1.4.2.RELEASE.jar:1.4.2.RELEASE] Caused by: java.lang.IllegalStateException: Expected raw type form of org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry 	at org.aspectj.weaver.reflect.JavaLangTypeToResolvedTypeConverter.fromType(JavaLangTypeToResolvedTypeConverter.java:71) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.reflect.Java15GenericSignatureInformationProvider.getGenericReturnType(Java15GenericSignatureInformationProvider.java:61) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.getGenericReturnType(ReflectionBasedResolvedMemberImpl.java:122) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:789) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:742) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:859) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.ResolvedType$MethodGetterIncludingItds.get(ResolvedType.java:252) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.ResolvedType$MethodGetterIncludingItds.get(ResolvedType.java:250) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.Iterators$4$1.hasNext(Iterators.java:213) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.Iterators$6.hasNext(Iterators.java:288) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.Iterators$4.hasNext(Iterators.java:230) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.ResolvedType.lookupResolvedMember(ResolvedType.java:619) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(JoinPointSignatureIterator.java:192) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(JoinPointSignatureIterator.java:229) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.JoinPointSignatureIterator.hasNext(JoinPointSignatureIterator.java:68) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:317) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:197) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:137) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.getShadowMatch(PointcutExpressionImpl.java:319) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesExecution(PointcutExpressionImpl.java:129) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesMethodExecution(PointcutExpressionImpl.java:110) ~[aspectjweaver-1.8.10.jar:1.8.10] 	at org.springframework.aop.aspectj.AspectJExpressionPointcut.getShadowMatch(AspectJExpressionPointcut.java:416) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:271) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:241) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:279) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:311) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:118) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:88) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:69) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:347) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:299) ~[spring-aop-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:422) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1588) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	... 15 common frames omitted ```  ---  **Affects:** 4.2.8, 4.3.4  **Issue Links:** - #19616 IllegalStateException after upgrading aspectjweaver to 1.8.10 (_**""is duplicated by""**_) - #13973 Unsafe fallback pointcut construction in AspectJExpressionPointcut - #17693 When use a `@args` as pointcut, there is case that occur a NPE at calling the unrelated method - #16166 Provide public methods to register and un-register handler method mappings - #20525 Upgrade to AspectJ 1.9 beta 7  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","type: bug,","spring-projects-issues","2016-12-14T16:59:48Z","2019-01-13T05:18:23Z"
"","19269","Springmvc+mybatis project use @transaction not roll back with Spring JavaConfig [SPR-14704]","**[edeye](https://jira.spring.io/secure/ViewProfile.jspa?name=edeye)** opened **[SPR-14704](https://jira.spring.io/browse/SPR-14704?redirect=false)** and commented  demo project is --> https://github.com/edeye/tt  1.   add `@ImportResource`({ ""classpath:spring-ctx-ds.xml"" }) in com.common.spring.config.DataCfg line 19 Spring `@Transaction` roll back success  2.   del `@ImportResource`({ ""classpath:spring-ctx-ds.xml"" }) in com.common.spring.config.DataCfg line 19 Spring `@Transaction` roll back fail,  I ask the same question to mybatis   ---  **Affects:** 4.3.2  **Reference URL:** https://github.com/edeye/tt","closed","status: invalid,","spring-projects-issues","2016-09-13T06:48:04Z","2019-01-12T05:21:59Z"
"","18868","Upgrade to Moneta 1.1 [SPR-14296]","**[Eddú Meléndez](https://jira.spring.io/secure/ViewProfile.jspa?name=eddu.melendez)** opened **[SPR-14296](https://jira.spring.io/browse/SPR-14296?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/65f6ea320a13bc4d1f702ff44e871e68dfbcaba2","closed","type: task,","spring-projects-issues","2016-05-20T22:55:55Z","2016-06-10T09:19:11Z"
"","19549","using ParallelComputer to test spring test cases got error [SPR-14983]","**[dxt](https://jira.spring.io/secure/ViewProfile.jspa?name=dxt29)** opened **[SPR-14983](https://jira.spring.io/browse/SPR-14983?redirect=false)** and commented  I am using ParallelComputer to test spring test cases, but got error  it seems that I am autowiring beans on the same instance, But the `@Before` method is running on different instances, I think may be it's the SpringJUnit4ClassRunner‘s issue, or the BlockJUnit4ClassRunner's createTest method, BUT I don't know how to handle this, would you please help me ?  here is a link about this. https://github.com/bazelbuild/bazel/issues/2188  ---  **Affects:** 4.2.6  **Issue Links:** - #10532 Allow for concurrent test execution in the TestContext framework (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2016-12-06T03:56:31Z","2019-01-12T16:45:21Z"
"","19535","lazy-init beans cause ClassNotFoundException [SPR-14968]","**[Doug Breaux](https://jira.spring.io/secure/ViewProfile.jspa?name=breaux)** opened **[SPR-14968](https://jira.spring.io/browse/SPR-14968?redirect=false)** and commented  Since upgrading from 3.0 to 4.3.1, we have some lazy-init beans in XML configuration files that are causing ClassNotFoundExceptions when the class isn't available, despite the beans never being instantiated.  Search finds a few similar things, but only in some non-applicable special cases or in much older versions.   ---  **Affects:** 4.3.1","closed","status: bulk-closed,","spring-projects-issues","2016-12-01T04:55:56Z","2019-01-12T00:11:51Z"
"","19167","NoHandlerFoundException is mapped to 404 twice [SPR-14598]","**[doom777](https://jira.spring.io/secure/ViewProfile.jspa?name=doom777)** opened **[SPR-14598](https://jira.spring.io/browse/SPR-14598?redirect=false)** and commented  NoHandlerFoundException -- 404 is the last entry, and the fifth to last   ---  **Affects:** 4.2.7, 4.3 GA  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-ann-rest-spring-mvc-exceptions  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: documentation,","spring-projects-issues","2016-08-17T18:21:53Z","2016-09-19T15:46:49Z"
"","19430","ObjectMapper used by Jackson2JsonDecoder doesn't pick up jackson-parameter-names module [SPR-14864]","**[Dominic Fox](https://jira.spring.io/secure/ViewProfile.jspa?name=domfox)** opened **[SPR-14864](https://jira.spring.io/browse/SPR-14864?redirect=false)** and commented  The `Jackson2JsonDecoder` cannot decode a `Flux` where `Foo` is a class initialised with a constructor or static method annotated with `@JsonCreator` and the `jackson-module-parameter-names` module is used to bind parameter names directly to property names without the use of further annotations.  I've verified that the `ObjectMapper` in the Spring Application Context has been configured with the `jackson-module-parameter-names` module, and that this works as expected (given that the `-parameters` compiler flag has been set). However, the `Jackson2JsonDecoder` appears to be initialised with a different `ObjectMapper`.  See the attached `ThingController` class for an example. When you post  ``` [{""foo"":""foo"", ""bar"":""bar""}] ```  to the `/things` endpoint, a `415` HTTP Status Code is returned. There is no indication in either the error message or the stack trace that the problem is actually in the JSON deserialisation.  Stack trace below. (The Reactor Framework does seem to result in rather convoluted and unhelpful stack traces...)  ``` 2016-10-31 16:29:26.608 ERROR 30666 --- [nio-8080-exec-1] reactor.unresolved                       : | onError(org.springframework.web.server.UnsupportedMediaTypeStatusException: Request failure [status: 415, reason: ""Content type 'application/json' not supported""]) 2016-10-31 16:29:26.616 ERROR 30666 --- [nio-8080-exec-1] reactor.unresolved                       :  org.springframework.web.server.UnsupportedMediaTypeStatusException: Request failure [status: 415, reason: ""Content type 'application/json' not supported""] 	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.readBody(AbstractMessageReaderArgumentResolver.java:177) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.method.annotation.RequestBodyArgumentResolver.resolveArgument(RequestBodyArgumentResolver.java:79) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$resolveArguments$4(InvocableHandlerMethod.java:133) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.method.InvocableHandlerMethod$$Lambda$84/1872731880.apply(Unknown Source) ~[na:na] 	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[na:1.8.0_45] 	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[na:1.8.0_45] 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512) ~[na:1.8.0_45] 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502) ~[na:1.8.0_45] 	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) ~[na:1.8.0_45] 	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[na:1.8.0_45] 	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) ~[na:1.8.0_45] 	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.resolveArguments(InvocableHandlerMethod.java:146) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:93) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.handle(RequestMappingHandlerAdapter.java:217) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.DispatcherHandler.invokeHandler(DispatcherHandler.java:135) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.DispatcherHandler.lambda$handle$1(DispatcherHandler.java:128) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.DispatcherHandler$$Lambda$76/647551778.apply(Unknown Source) ~[na:na] 	at reactor.core.publisher.MonoThenMap$MonoThenApplyMain.onNext(MonoThenMap.java:98) ~[reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:316) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:68) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:316) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:78) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:316) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:258) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:740) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:316) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:124) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:316) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1565) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:394) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:180) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:394) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1282) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1245) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:378) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:94) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:378) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:187) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:70) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:64) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:187) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:47) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:397) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:189) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:378) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:93) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:56) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:187) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:219) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:113) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:187) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:219) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:41) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:187) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:47) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOtherwiseIfEmpty.subscribe(MonoOtherwiseIfEmpty.java:44) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:187) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:47) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenMap.subscribe(MonoThenMap.java:55) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:187) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:47) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenMap.subscribe(MonoThenMap.java:55) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:187) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:47) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:44) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:187) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:47) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:44) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:187) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:47) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:44) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:187) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:47) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenIgnore$MonoThenIgnoreMain.drain(MonoThenIgnore.java:166) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoThenIgnore.subscribe(MonoThenIgnore.java:54) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:187) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:47) [reactor-core-3.0.3.BUILD-SNAPSHOT.jar:na] 	at org.springframework.http.server.reactive.ServletHttpHandlerAdapter.service(ServletHttpHandlerAdapter.java:104) [spring-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:784) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1410) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45] 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.5.jar:8.5.5] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45] 	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: Assembly trace from producer [reactor.core.publisher.MonoError] : 	reactor.core.publisher.Mono.error(Mono.java:271) 	org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.readBody(AbstractMessageReaderArgumentResolver.java:177) 	org.springframework.web.reactive.result.method.annotation.RequestBodyArgumentResolver.resolveArgument(RequestBodyArgumentResolver.java:79) 	org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$resolveArguments$4(InvocableHandlerMethod.java:133) 	java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) 	java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) 	java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512) 	java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502) 	java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) 	java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) 	java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) 	org.springframework.web.reactive.result.method.InvocableHandlerMethod.resolveArguments(InvocableHandlerMethod.java:146) 	org.springframework.web.reactive.result.method.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:93) 	org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.handle(RequestMappingHandlerAdapter.java:217) 	org.springframework.web.reactive.DispatcherHandler.invokeHandler(DispatcherHandler.java:135) 	org.springframework.web.reactive.DispatcherHandler.lambda$handle$1(DispatcherHandler.java:128) 	reactor.core.publisher.MonoThenMap$MonoThenApplyMain.onNext(MonoThenMap.java:98) 	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:68) 	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:78) 	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:258) 	reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:740) 	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:124) 	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1565) 	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:180) 	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1282) 	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1245) 	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:94) 	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) 	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:64) 	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:397) 	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:189) 	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:93) 	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:56) 	reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:113) 	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:41) 	reactor.core.publisher.MonoOtherwiseIfEmpty.subscribe(MonoOtherwiseIfEmpty.java:44) 	reactor.core.publisher.MonoThenMap.subscribe(MonoThenMap.java:55) 	reactor.core.publisher.MonoThenMap.subscribe(MonoThenMap.java:55) 	reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:44) 	reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:44) 	reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:44) 	reactor.core.publisher.MonoThenIgnore$MonoThenIgnoreMain.drain(MonoThenIgnore.java:166) 	reactor.core.publisher.MonoThenIgnore.subscribe(MonoThenIgnore.java:54) 	org.springframework.http.server.reactive.ServletHttpHandlerAdapter.service(ServletHttpHandlerAdapter.java:104) 	org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:784) 	org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) 	org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802) Composition chain until failing Operator : 	|_	Mono.error(AbstractMessageReaderArgumentResolver.java:177) 	|_	Mono.defaultIfEmpty(InvocableHandlerMethod.java:134) 	|_	Mono.doOnError(InvocableHandlerMethod.java:135) ```    ---  **Affects:** 5.0 M2  **Attachments:** - [Application.java](https://jira.spring.io/secure/attachment/23604/Application.java) (_874 bytes_) - [ThingController.java](https://jira.spring.io/secure/attachment/23603/ThingController.java) (_1.04 kB_)","closed","in: core,","spring-projects-issues","2016-11-01T10:32:20Z","2019-01-12T16:45:24Z"
"","18999","Spring Security OAuth2 Rejects Non-Spring Clients [SPR-14428]","**[Dollar Coffee](https://jira.spring.io/secure/ViewProfile.jspa?name=dollarcoffee)** opened **[SPR-14428](https://jira.spring.io/browse/SPR-14428?redirect=false)** and commented  This is a Spring OAuth2 question or a Spring Security OAuth2 question.  However, there were no links to those items in your choices, so this is being posted generally under Spring Framework.  The Spring OAuth2 sample app on GitHub treats non-Spring clients differently than it treats the Spring `ui` client in its sample configuration.  This means that the sample is non-compliant with the OAuth2 spec in its out-of-the-box form.  Here are the specifics:  The Spring OAuth2 Ui client was carefully translated into Node.js to avoid any confusion in re-creating the conditions under which the Spring OAuth2 ui sample app works.  The new node.js client (whose code can be downloaded from a file sharing site at this link), is able to initiate Step A of the flow by redirecting to the Spring OAuth2 `authserver` app.  The `authserver` app is able to authenticate the user and redirect back to the Node.js client in Step C of the flow.  However, then the client app then initiates Step D of the flow, the `authserver` app rejects the request as anonymous.  Here are the logs in the nodemon console:      Finished Step C of Authorization Code Flow.  Welcome back from authserver     queryData.code is: Z3B1mb     About to start Step D of Authorization Code Flow.      The POST is finished.  Waiting for response.     Step D.  Token Request Sent To AuthServer.     JSON data response is: [object Object]     access token is: undefined     error is: unauthorized  To confirm that this is not a client problem, I re-wrote the above code using two separate npm packages, including passport.js and client-oauth2.  However, both of these well-tested, production-ready npm packages failed to connect to the Spring OAuth2 sample app's `authserver` /token endpoint at the same point in the flow.  For simplicity, I am posting here my Node.js code, because it removes abstraction and isolates at the lowest level the steps that the client takes to try to connect with Spring OAuth2 `authserver`.  Here is the `route.js` from the zip file in the link above:      var url = require('url');     var request = require('request');          // expose the routes to our app with module.exports     module.exports = function(app) {              // application --------------------------------         app.get('/resource/**', function(req, res) {             console.log(""You Hit The Resource Route TOP. "");             request.get('http://localhost:9000/resource', function (error, response, body) {                 if(error){console.log('ERROR with resource request.')}                 if (!error){// && response.statusCode == 200) {                     console.log(response.statusCode);                     console.log(body);                 };             });             console.log(""You Hit The Resource Route BOTTOM. "");         });              app.get('/user**', function(req, res) {             console.log(""You Hit The User Route TOP"");             request.get('http://localhost:9999/uaa/user', function (error, response, body) {                 if(error){console.log('ERROR with user request.')}                 if (!error){// && response.statusCode == 200) {                     console.log(response.statusCode);                     console.log(body);                     console.log(""response is: "");console.log(response);console.log(""end of response."");                 };             });             console.log(""You Hit The User Route BOTTOM"");         });              app.get('/login', function(req, res) {             console.log(""You Hit The Login Route "");             console.log(""headers are: "");        console.log(req.headers);             console.log(""cookies are: "");        console.log(req.cookies);             console.log(""params are: "");        console.log(req.params);             console.log(""body is: "");        console.log(req.body);             console.log(""method is: "");        console.log(req.method);             console.log(""query is: "");        console.log(req.query);             console.log(""route is: "");        console.log(req.route);             console.log(""signedCookies are: "");        console.log(req.signedCookies);             var queryData = url.parse(req.url, true).query;     //        response.writeHead(200, {""Content-Type"": ""text/plain""});                  if (queryData.code) {                 //This is the end of Step C in the flow                 // code was in the GET request, ex: http://localhost:8080/login?code=w6zGJO&state=IuaO63                 console.log('Finished Step C of Authorization Code Flow.  Welcome back from authserver');                 console.log('queryData.code is: ' + queryData.code);                 //Now start Step D in the flow                 console.log('About to start Step D of Authorization Code Flow. ');                 request.post('http://localhost:9999/uaa/oauth/token?grant_type=authorization_code&code='+queryData.code+'&client_id=acme&redirect_uri=http://localhost:8080/login', function(err, response, body){                     // Step E is the response received as follows:                     if(err){console.log('ERROR with token request.')}                     var data = JSON.parse(body);                     console.log('JSON data response is: ' + data);                     var variable1 = data.access_token;                     var variable2 = data.token_type;                     var variable3 = data.error;                     console.log('access token is: ' + variable1);                     console.log('error is: ' + variable3);                     //Do more processing here                 });         console.log('The POST is finished.  Waiting for response.');     ///                 console.log('Step D.  Token Request Sent To AuthServer.');             } else {                 //This is Step A                 console.log('Step A of Authorization Code flow about to start. ');                 res.redirect('http://localhost:9999/uaa/oauth/authorize?client_id=acme&redirect_uri=http://localhost:8080/login&response_type=code&state=IuaO63');             }     //         });              app.get('*', function(req, res) {             res.sendfile('./public/index.html'); // load the single view file (angular will handle the front-end)         });          };  This has also been posted as a Stack Overflow question at this link.   ---  **Reference URL:** https://jumpshare.com/v/QfAutW91EpwqXMArbttq","closed","status: invalid,","spring-projects-issues","2016-07-04T16:48:51Z","2019-01-12T05:22:27Z"
"","19013","AutowiredAnnotationBeanPostProcessor should silently accept no-arg methods [SPR-14443]","**[Dmitry Ovchinnikov](https://jira.spring.io/secure/ViewProfile.jspa?name=dimitrovchi)** opened **[SPR-14443](https://jira.spring.io/browse/SPR-14443?redirect=false)** and commented  In the following code  ```java @Autowired @Order(1) private void column1(Bean1 bean1) { //...    getColumns().add(column); }  @PostConstruct @Order(2) private void column2() { //...    getColumns().add(column); }  @Autowired @Order(3) private void column3(Bean2 bean2) { //...    getColumns().add(column); } ```  the order of calling is 'column1', 'column3', 'column2'.  If I annotate the 'column2' method with Autowired annotation, the order is predictable but the AutowiredAnnotationBeanPostProcessor warns about method parameters. There is nothing wrong with Autowired annotation on argument-less method: in this case, however, this helps to predict the calling order.   ---  **Affects:** 4.3.1","closed","status: bulk-closed,","spring-projects-issues","2016-07-08T16:44:27Z","2019-01-12T00:13:29Z"
"","19554","@GetMapping method annotation uses consumes attribute from @RequestMapping class annotation [SPR-14988]","**[Dmitry Bedrin](https://jira.spring.io/secure/ViewProfile.jspa?name=bedrin)** opened **[SPR-14988](https://jira.spring.io/browse/SPR-14988?redirect=false)** and commented  _`@GetMapping`_ method-level annotation on method uses _consumes_ element from _`@RequestMapping`_ annotation on class and doesn't allow to override it.  As a result if you specify _consumes_ element in class level annotation your GET mapping handler becomes unusable since it requires an appropriate`Content-Type` request header.  ```java 	@Controller 	@RequestMapping(consumes = MediaType.APPLICATION_XML_VALUE) 	public class ComposedAnnotationController {  		@GetMapping(""/get"") 		public void get() { 			// Cannot be called without Content-Type header 		}  	} ```  ---  **Affects:** 4.3.4, 5.0 M3  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1257, and commits https://github.com/spring-projects/spring-framework/commit/8315a4033feea39f04a14c0b088e634b13fe774c, https://github.com/spring-projects/spring-framework/commit/e707c40e0b91500cbbf0eee9326301e781f8c82b","closed","type: enhancement,","spring-projects-issues","2016-12-06T22:52:48Z","2019-01-13T05:18:35Z"
"","18930","Failure to resolve @RequestMapping method arguments in Servlet 2.5 environments [SPR-14358]","**[Dmitri Gabbasov](https://jira.spring.io/secure/ViewProfile.jspa?name=dmitrigb)** opened **[SPR-14358](https://jira.spring.io/browse/SPR-14358?redirect=false)** and commented  Given the following bean configuration:  ```xml          ```  and the following controller:  ```java package test; // ... @Controller public class TestController {   @RequestMapping(""/home"")   @ResponseBody   public String home(@RequestParam String param) {     return param; } ```  and using them in a Servlet 2.5 environment (e.g. Tomcat 6) will result in the following exception when a request is made to `/home`:  ``` org.springframework.web.multipart.MultipartException: Current request is not a multipart request         at org.springframework.web.method.annotation.RequestParamMethodArgumentResolver.handleMissingValue(RequestParamMethodArgumentResolver.java:188)         at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:104)         at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)         at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:161)         at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:128)         at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:114)         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)         at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963)         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)         at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:617)         at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)         ... ```  This only occurs when Spring chooses to use the `RequestMappingHandlerAdapter` (as opposed to the deprecated `AnnotationMethodHandlerAdapter`).  The root cause of this seems to be in the (somewhat recent) `MultipartResolutionDelegate` class. Its `servletPartClass` field remains `null` in pre Servlet 3.0 environments, and some equality checks yield false positives due to that. For instance:  ```java private static boolean isPartCollection(MethodParameter methodParam) { 	return (servletPartClass == getCollectionParameterType(methodParam)); } private static Class getCollectionParameterType(MethodParameter methodParam) { 	Class paramType = methodParam.getNestedParameterType(); 	if (Collection.class == paramType || List.class.isAssignableFrom(paramType)){ 		Class valueType = GenericCollectionTypeResolver.getCollectionParameterType(methodParam); 		if (valueType != null) { 			return valueType; 		} 	} 	return null; } ```  `getCollectionParameterType` returns `null` for non-collection parameters, which makes `isPartCollection` return `true`. The `isPartArray` method is plagued by the same issue (and maybe other places are too).  ---  **Affects:** 4.3 GA  **Issue Links:** - #19030 MultipartResolutionDelegate in Servlet 2.5 environments not working correctly  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dcb2c73102302d0795748ea45dca8031be808f23","closed","type: bug,","spring-projects-issues","2016-06-13T15:41:48Z","2019-01-11T16:03:43Z"
"","19237","DispatcherServlet changes response locale when dispatching to DefaultServlet [SPR-14673]","**[Diogo Sant'Ana](https://jira.spring.io/secure/ViewProfile.jspa?name=diogosantana)** opened **[SPR-14673](https://jira.spring.io/browse/SPR-14673?redirect=false)** and commented  When dispatching to Default Servlet, DispatcherServlet sets the response locale and change default behavior of Jetty DefaultServlet when serving static files.  The ofending code is:  ```java public class DispatcherServlet extends FrameworkServlet {  	...  	protected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response) throws Exception { 			// Determine locale for request and apply it to the response. 			Locale locale = this.localeResolver.resolveLocale(request); 			response.setLocale(locale); 	... ```  I will create a spring-framework-issues example.   ---  **Affects:** 4.3.2","closed","status: invalid,","spring-projects-issues","2016-09-07T04:07:38Z","2019-01-12T05:22:02Z"
"","18874","Messages not delivered to all user sessions using distributed topic [SPR-14302]","**[Derek Meyer](https://jira.spring.io/secure/ViewProfile.jspa?name=dsmeyer)** opened **[SPR-14302](https://jira.spring.io/browse/SPR-14302?redirect=false)** and commented  My app is hosted on multiple servers, each with its own broker. A user can have more than one open session, where each of those sessions are sticky but may be on different servers in the cluster. Clients are connected to the broker via Spring Websocket.  The problem I'm seeing is when a message is sent to a distributed topic user destination.  Expected: The message would be relayed to all the brokers in the cluster, so that all of the sessions open for that user (regardless of the app server hosting the session) would receive the message.  Observed: If there are any sessions for the user open on the app server that's executing the send, the message will only be delivered to to those sessions and will not be relayed to the other brokers in the cluster.  ---  **Affects:** 4.2.6  **Issue Links:** - #18373 Users logged in to multiple servers do not get messages in sessions on remote servers","closed","in: web,","spring-projects-issues","2016-05-24T15:27:13Z","2019-01-12T16:45:37Z"
"","19303","YAML + PropertyPlaceholderConfigurer needs to process non-String values as well [SPR-14737]","**[Dennis Mellert](https://jira.spring.io/secure/ViewProfile.jspa?name=mllrt)** opened **[SPR-14737](https://jira.spring.io/browse/SPR-14737?redirect=false)** and commented  When loading a Yaml resource (using `YamlPropertiesFactoryBean`) and passing it to a `PropertyPlaceholderConfigurer` (using ``) only String in the Yaml are replaced correctly.  The Problem seems to be that `org.springframework.beans.factory.config.PropertyResourceConfigurer.convertProperties(Properties)` only handles Strings (`String propertyValue = props.getProperty(propertyName);`). Since the propertyValue is not a String in this case (as parsed from `YamlPropertiesFactoryBean`, the method call returns null.  Workaround: Overriding `convertProperties` and dealing with propertyValues as `Object`: `(Object propertyValue = props.get(propertyName);`  ---  **Affects:** 4.3.3  **Issue Links:** - #10340 mergePropertiesIntoMap only works with String - #17104 Allow YamlProcessor subclasses to build the flattened map - #21310 YamlPropertiesFactoryBean loses entries in the YAML document that have an empty array value  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/74c618892e3d270b42369a753f2592b0564f3835, https://github.com/spring-projects/spring-framework/commit/3346c594e4367f117ede1aa05f9b988c2ddc7ec9","closed","type: enhancement,","spring-projects-issues","2016-09-20T07:03:17Z","2019-01-11T17:12:14Z"
"","19429","SpEL: Compiled OpNE should favor equals() to != [SPR-14863]","**[Denis Zhdanov](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.zhdanov)** opened **[SPR-14863](https://jira.spring.io/browse/SPR-14863?redirect=false)** and commented  There is a problem with _!=_ SpEL in compiled form. It compares strings using reference identity instead of _equals()_.  I.e. the following byte code is generated from the following expression _data\['my-key'\] \!= 'my-value'_ (note **if_acmpeq** instruction usage)  ```java invokevirtual org/denis/spring/spel/Test$MyContext/getData()Ljava/util/Map; checkcast java/util/Map ldc ""my-key"" invokeinterface java/util/Map/get(Ljava/lang/Object;)Ljava/lang/Object; 2 ldc ""my-value"" if_acmpeq 11 iconst_1 goto 12 iconst_0 invokestatic java/lang/Boolean/valueOf(Z)Ljava/lang/Boolean; areturn ```  A complete standalone project which illustrates the problem can be found [here](https://github.com/denis-zhdanov/spring-spel-compilation-problem)  I checked spring source code and the problem is in the [OpNE](https://github.com/spring-projects/spring-framework/blob/master/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpNE.java#L112) class.  There was a similar report for the _OpEQ_ class (#13832) and it was fixed - [OpEQ](https://github.com/spring-projects/spring-framework/blob/master/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java#L137)  ---  **Affects:** 4.3.3  **Issue Links:** - #13832 SpEL: OpEQ should use equals()","closed","in: core,","spring-projects-issues","2016-10-31T12:24:29Z","2019-01-11T17:26:58Z"
"","19248","ConfigurationClassParser does not use ApplicationContext's ResourceLoader for its MetadataReaderFactory [SPR-14684]","**[Denis Miorandi](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.miorandi)** opened **[SPR-14684](https://jira.spring.io/browse/SPR-14684?redirect=false)** and commented  # Scenario description:  I've got a spring webapp like this - webapp is main context + main classloader - plugins are child contexts + child classloaders. Note that plugins read files from disk   (via custom classloader, not from jar)   this work fine in spring 3.2.x.   When migrated to spring 4.3.2 + spring boot 1.4, I've got an issue starting up.   In some cases it doesn't load file using the expected resourceLoader (classpath instead of expexted file)   The only changing is I've used a spring boot annotated class starting instead a web.xml one.  # Issue:  If you look at attacched files (stack), it seems that spring scan two times 1. On scan 1 spring use the webapp/plugin ResourceLoader, so that file are loaded as FileSystemResource as  expected 2. On scan 2 (ConfigurationClassParser one) spring use DefaultResourceLoader instead of the webapp/plugin one. In this case it recognize resource as classpath/jar and it fails (due to application logic). It seems that ConfigurationClassParser doesn't take in account main context  # My ugly patch  Actually the only solution I found is to patch SimpleMetadataReaderFactory forcing my logic  {{	`@Override` public MetadataReader getMetadataReader(String className) throws IOException { String resourcePath = ResourceLoader.CLASSPATH_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(className) + ClassUtils.CLASS_FILE_SUFFIX; Resource resource = this.resourceLoader.getResource(resourcePath);      	// CLESIUS PATCH - BEGIN     	// Load from disk instead of jar, otherwise crash     	if(SingletonLoader.getInstance()!=null && className.startsWith(""it.clesius"")){     		Class cPlugin=SingletonLoader.getInstance().getClass(className);     		if (cPlugin!=null){     			try{     				resourcePath=cPlugin.getClassLoader().getResource(ClassUtils.convertClassNameToResourcePath(className) + ClassUtils.CLASS_FILE_SUFFIX).toString().replace(""file://"", ""//"");     				resource=new FileSystemResource(resourcePath);     			}catch(Exception e){     				System.out.println(""CLESIUS PATCH - Error on spring clesius Patch"");     			}     		}     	}		     	// CLESIUS PATCH - END		     	     	if (!resource.exists()) {     		// Maybe an inner class name using the dot name syntax? Need to use the dollar syntax here...     		// ClassUtils.forName has an equivalent check for resolution into Class references later on.     		int lastDotIndex = className.lastIndexOf('.');     		if (lastDotIndex != -1) {     			String innerClassName =     					className.substring(0, lastDotIndex) + '$' + className.substring(lastDotIndex + 1);     			String innerClassResourcePath = ResourceLoader.CLASSPATH_URL_PREFIX +     					ClassUtils.convertClassNameToResourcePath(innerClassName) + ClassUtils.CLASS_FILE_SUFFIX;     			Resource innerClassResource = this.resourceLoader.getResource(innerClassResourcePath);     			if (innerClassResource.exists()) {     				resource = innerClassResource;     			}     		}     	}     	return getMetadataReader(resource);     }  }}  ---  **Affects:** 4.3.2  **Attachments:** - [scan1_right.png](https://jira.spring.io/secure/attachment/23539/scan1_right.png) (_188.25 kB_) - [scan2_wrong(fail).png](https://jira.spring.io/secure/attachment/23538/scan2_wrong%28fail%29.png) (_183.84 kB_)  **Issue Links:** - #19219 Cache ASM metadata at the context level - #19250 Consistent *Aware callbacks for TypeFilters, ImportSelectors and ImportBeanDefinitionRegistrars","closed","type: enhancement,","spring-projects-issues","2016-09-09T06:53:17Z","2019-01-11T18:20:29Z"
"","19322","Replacement for methods of AuthenticationException class in 4.0.3.RELEASE [SPR-14756]","**[Deepak](https://jira.spring.io/secure/ViewProfile.jspa?name=jaindee)** opened **[SPR-14756](https://jira.spring.io/browse/SPR-14756?redirect=false)** and commented  Hi Experts, I was using spring-security-core-3.0.5.RELEASE in my project and now I have upgraded to spring-security-core-4.0.3.RELEASE but could not find the replacement for methods of AuthenticationException.  I tried googling lot of times but didn't get any idea. can you people suggest?  Thanks   --- No further details from [SPR-14756](https://jira.spring.io/browse/SPR-14756?redirect=false)","closed","in: core,","spring-projects-issues","2016-09-27T09:02:33Z","2019-01-12T05:21:53Z"
"","18845","Setting RequestConfiguration per request using RestTemplate [SPR-14273]","**[David](https://jira.spring.io/secure/ViewProfile.jspa?name=techky)** opened **[SPR-14273](https://jira.spring.io/browse/SPR-14273?redirect=false)** and commented  I am using RestTemplate in my projects and I want to set ""RequestConfiguration"" per request but I don't see any option to do that.  Here is the SO post:  http://stackoverflow.com/questions/37125694/how-to-set-requestconfiguration-per-request-using-resttemplate   --- No further details from [SPR-14273](https://jira.spring.io/browse/SPR-14273?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-05-14T18:12:18Z","2016-05-18T12:51:57Z"
"","19365","IllegalArgumentException: HttpEntity parameter 'null' [SPR-14799]","**[David Zhu](https://jira.spring.io/secure/ViewProfile.jspa?name=zhu1982@gmail.com)** opened **[SPR-14799](https://jira.spring.io/browse/SPR-14799?redirect=false)** and commented  This is probably related to #16892.  We are returning a DeferredResult\, with ? always being ResponseEntity\  If we change the signature to DeferredResult> the error does not occur.  ---  **Affects:** 4.3.2  **Issue Links:** - #16892 HttpEntity parameter 'null' in method (regression)","closed","type: enhancement,","spring-projects-issues","2016-10-11T06:12:27Z","2019-01-11T17:22:58Z"
"","18866","@MatrixVariable Map params [SPR-14294]","**[David Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=mavisto)** opened **[SPR-14294](https://jira.spring.io/browse/SPR-14294?redirect=false)** and commented  I have been trying to get Matrix Variables to work when they are declared as `@MatrixVariable`(pathVar=""price"") Map params,  OR `@MatrixVariable` Map params,  I am completely unable to get the 'value' from the map.  My aim is to cycle through each map entry, validate the key and retrieve the value.  There is only one value for each key which is why I was declaring the matrix variable as a Map.  I have got the code to work using the declaration Map> because it is valid for me to loop through the List\ and get the value from the list, but I am unable to retrieve the value from the map when declared without the List. I can get the key, but whatever way I have tried to get the value (iterator, for/next loop, while loop) it always gives me a ClassCastException because it cannot cast between a LinkedList and whatever data type I'm using; a string in this case.  The code I am using to retrieve the value is as follows  ```java     for(Map.Entry e : params.entrySet()) {         for( Product product : listOfProducts) {             if(""low"".equals( e.getKey())) {                     System.out.println(e.getValue() );             }         }     }  ```  The code fails at the point where it is trying to call the getValue method.  I have debugged the code and evaluated the 'value' from HashMap.class and the datatype of the value is always shown as a LinkedList.  Because the Map is declared as Map the compiler will not allow me to iterate through a String.  However, the ClassCastException error is always because it is not possible to cast between a LinkedList (the return data type from getValue() in HashMap.class) and a String (the map declaration).  I don't know if this is a bug or a problem with my code, but I have been unable to find a single example where a MatrixVariable has been declared as a Map.  All the examples I have found, including a number of text books always show the map declaration as a Map>. This declaration does work because the declaration and the returned value will allow iteration though the LinkedList that is returned from the HashMap.class   ---  **Affects:** 4.2.6  **Reference URL:** http://stackoverflow.com/questions/37325634/spring-matrixvariable-usage-for-single-value-per-key  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c2625f968c9722b6d8d9617a8c2293ec0a3950ab","closed","type: bug,","spring-projects-issues","2016-05-20T12:08:58Z","2016-06-10T09:19:12Z"
"","18902","EventListenerMethodProcessor resolves classes (by MethodIntrospector) of lazy beans causing NoClassDefFoundError [SPR-14330]","**[David Rain](https://jira.spring.io/secure/ViewProfile.jspa?name=davesman)** opened **[SPR-14330](https://jira.spring.io/browse/SPR-14330?redirect=false)** and commented  After upgrading from 4.1.x to 4.2.5 and 4.2.6 we encounter the same problem mentioned in #17619. It seems it still persist... in another piece of code. org.springframework.context.event.EventListenerMethodProcessor#processBean calls MethodIntrospector#selectMethods which in turn calls ReflectionUtils#doWithMethods. In this method there's a call to getDeclaredMethods which fires NoClassDefFoundError (during reflection) even on lazy beans. This in turn wraps to BeanInitializationException and is fired out.  ---  **Affects:** 4.2.6  **Issue Links:** - #17619 EventListenerMethodProcessor resolves classes of lazy beans causing NoClassDefFoundError  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2fd691b3402a495cd857dc55767b9a81fc0ad2fe, https://github.com/spring-projects/spring-framework/commit/f657952cee063f9b0879c8e0650f9aa03652946f  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","in: core,","spring-projects-issues","2016-06-03T19:41:08Z","2019-01-11T16:06:17Z"
"","19353","Allow setting the escape order for  [SPR-14787]","**[David Balažic](https://jira.spring.io/secure/ViewProfile.jspa?name=xerces8)** opened **[SPR-14787](https://jira.spring.io/browse/SPR-14787?redirect=false)** and commented  The spring:EscapeBody tag with the attributes htmlEscape=""true"" javaScriptEscape=""true"" first does a HTML escape on the body and then a JavaScript escape.  Is it possible to reverse the order of the operations? Maybe a new attribute or similar.    ---  **Affects:** 4.3.3","closed","status: bulk-closed,","spring-projects-issues","2016-10-07T17:28:55Z","2022-08-03T17:14:33Z"
"","19603","BufferedImageHttpMessageConverter cannot convert to a media type it claims it can [SPR-15037]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-15037](https://jira.spring.io/browse/SPR-15037?redirect=false)** and commented  The samples in spring-secuirty-oauth2 suffer from this problem. I think it is probably platform/browser dependent because I couldn't reproduce it till today, and now I can (Ubuntu 14.04, Chrome 50.0.2661.86). The browser sends  ``` [text/html, application/xhtml+xml, image/webp, application/xml;q=0.9, */*;q=0.8] ```  and the app sends back a response entity with `Content-Type: image/jpeg`. The converter comes in and claims that it can convert to  ``` [image/vnd.wap.wbmp, image/png, image/x-png, image/jpeg, image/bmp, image/gif] ```  And then fails to do the conversion to the highest priority media type:  ``` Dec 21, 2016 8:35:20 AM org.apache.catalina.core.StandardWrapperValve invoke SEVERE: Servlet.service() for servlet [dispatcher] in context with path [/tonr2] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Only integral single-band bilevel image is supported.] with root cause java.lang.IllegalArgumentException: Only integral single-band bilevel image is supported. 	at com.sun.imageio.plugins.wbmp.WBMPImageWriter.checkSampleModel(WBMPImageWriter.java:313) 	at com.sun.imageio.plugins.wbmp.WBMPImageWriter.write(WBMPImageWriter.java:171) 	at org.springframework.http.converter.BufferedImageHttpMessageConverter.write(BufferedImageHttpMessageConverter.java:225) 	at org.springframework.http.converter.BufferedImageHttpMessageConverter.write(BufferedImageHttpMessageConverter.java:67) ... ```  The sample is old and still uses Spring 4.0.9, but I tried with 4.3.4 (just add `4.3.4.RELEASE` to the properties in the tonr2 pom.xml) and the problem is the same.  ---  **Affects:** 4.3.4  **Reference URL:** https://github.com/spring-projects/spring-security-oauth/issues/427  **Issue Links:** - #18985 Rendering of a Resource should try to derive the served media type","open","type: enhancement,","spring-projects-issues","2016-12-21T09:04:11Z","2021-07-26T11:25:12Z"
"","19516","Cglib proxy not working with @Async if there is another interceptor [SPR-14949]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-14949](https://jira.spring.io/browse/SPR-14949?redirect=false)** and commented  It appears that when an AOP interceptor is added to a bean which also has `@Async`, then the async aspect doesn't get applied if it is declared on the interface, and if Cglib is used. WIth JDK proxies it always works, and with the `@Async` declared on the concrete class likewise.  ---  **Affects:** 4.3.4  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/141  **Issue Links:** - #18894 CGLIB proxies should still consider `@Transactional` annotations on interface methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6c43d14a77287bbf3272251f6e50563357a6c8c3, https://github.com/spring-projects/spring-framework/commit/d003f6614b2456b50c574f1579e5e97efd4d5b06, https://github.com/spring-projects/spring-framework/commit/ce3cf3251d8bc01f688b1f1abccc4ffaa85db120","closed","type: enhancement,","spring-projects-issues","2016-11-24T16:24:27Z","2019-01-13T05:18:47Z"
"","19407","Publish a ""slim"" version of spring-core without asm and cglib [SPR-14841]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-14841](https://jira.spring.io/browse/SPR-14841?redirect=false)** and commented  I'm not sure how much of spring-core depends on asm and cglib, but I'm guessing not much. We use spring-core as a library in parts of Spring Boot and Spring Cloud where we don't need those features (just the Resource abstraction and some utils, ReflectionUtils and StringUtils mainly). It would be great if there was a smaller library (e.g. spring-boot-cli is 5MB but it could be closer to 4MB).   --- No further details from [SPR-14841](https://jira.spring.io/browse/SPR-14841?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2016-10-24T07:33:05Z","2019-01-12T00:12:10Z"
"","19378","Documentation on @EventListener SpEL features is not very clear [SPR-14812]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-14812](https://jira.spring.io/browse/SPR-14812?redirect=false)** and commented  The documentation has an example where the condition in an `@EventListener` uses `#event` in a SpEL expression. Then there is a table where all the examples are `#root.*`. What is this `#root`, and why is it not used in the previous example? What are ""the arguments (as array) used for invoking the target""? What is the target - isn't the listener method always invoked with a single argument, which is an event (all the examples look like that)?   ---  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#context-functionality-events-annotation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/19db0424d2dd13bfd22faa7fd39631d307ac999e, https://github.com/spring-projects/spring-framework/commit/02541022b3279b9a75affd52bddfc99245f78284, https://github.com/spring-projects/spring-framework/commit/196200bcc0d397c4afb933ae78a0c4629c41a8df  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","type: task,","spring-projects-issues","2016-10-14T14:31:59Z","2016-11-07T22:01:24Z"
"","19357","StompSubProtocolHandler makes the same assumption about header accessor as SimpleBrokerMessageHandler used to [SPR-14791]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-14791](https://jira.spring.io/browse/SPR-14791?redirect=false)** and commented  Just like in #18851, `StompSubProtocolHandler.getStompHeaderAccessor()` makes an assumption about the content of the `Message` it is processing. In particular, it assumes that there is a `MessageHeaderAccessor`, but that isn't necessarily the case, for instance if the user has added a `ChannelInterceptor` that rebuilds the message and adds some headers by calling `MessageBuilder.fromMessage(...).build()`.  ---  **Affects:** 4.2.8, 4.3.3  **Issue Links:** - #18851 SimpleBrokerMessageHandler makes an assertion about the type of the MessageHeaderAccessor, but doesn't seem to care  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f5cd5387dae4a92ca3a6bf285246b3467415810e, https://github.com/spring-projects/spring-framework/commit/aff5d211f4a5f65d99781ad37c7f023b9179f52e, https://github.com/spring-projects/spring-framework/commit/66722afda0ae391f0cd994e64516cc12f3807840  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-10-10T10:24:06Z","2019-01-11T17:22:39Z"
"","19284","Refreshable Groovy scripts failing on refresh [SPR-14719]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-14719](https://jira.spring.io/browse/SPR-14719?redirect=false)** and commented  A groovy bean defined through `` is supposed to be refreshable (and there are tests that prove it I know). But actually executing a method on one of those beans after a refresh appears to be an error:  ``` 2016-09-15 11:46:50.517[0;39m [31mERROR[0;39m [35m22523[0;39m [2m---[0;39m [2m[nio-8080-exec-2][0;39m [36mo.a.c.c.C.[.[.[/].[dispatcherServlet]   [0;39m [2m:[0;39m Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: Sample cannot be cast to Sample] with root cause  java.lang.ClassCastException: Sample cannot be cast to Sample 	at Sample$$FastClassBySpringCGLIB$$932c61ca.invoke() ~[na:na] 	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) ~[spring-core-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:720) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:655) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at Sample$$EnhancerBySpringCGLIB$$e2736740.home() ~[na:na] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_60] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_60] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_60] 	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_60] 	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221) ~[spring-web-4.3.2.RELEASE.jar:4.3.2.RELEASE] ... ```  Here's a sample: https://github.com/spring-projects/spring-framework-issues/pull/140 (just run the app, curl the home page, then edit the script and try again).  It's a Spring Cloud user again that noticed this: https://github.com/spring-cloud/spring-cloud-netflix/issues/223   ---  **Affects:** 4.3.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/272b94e4e24bbe1dc62009d15cb8da1932dea356, https://github.com/spring-projects/spring-framework-issues/commit/d1fb3d9b54e3e76d0460142cff91761c8aa6fa9a","closed","status: bulk-closed,","spring-projects-issues","2016-09-15T10:55:06Z","2019-01-12T02:24:44Z"
"","19267","Classloader leak with cglib proxies and spring-retry [SPR-14702]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-14702](https://jira.spring.io/browse/SPR-14702?redirect=false)** and commented  It's quite likely that this is a problem in spring-retry, but I can't see what's exactly wrong there, so it might be better to shine a light on it here. The problem manifests itself when you have `@Retryable` with `@EnableRetry(proxyTargetClass=true)`, when you load the same application classes (and close the context) repeatedly, you can see new classes popping into the default `ClassLoader` and they never get garbage collected. Users report this as an OOM (metaspace) in Spring Cloud, but I think they are just exacerbating this basic leak by pinging it repeatedly (https://github.com/spring-cloud/spring-cloud-consul/issues/183).  Test case: https://github.com/spring-projects/spring-framework-issues/pull/139  ---  **Affects:** 4.3.2  **Issue Links:** - #19304 Not implemented EQUALS methods cause OOM while using AOP (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-retry/commit/b3c3f50e9e236e69f32854feacdc257287282720","closed","status: invalid,","spring-projects-issues","2016-09-12T20:04:44Z","2019-01-12T05:22:00Z"
"","19099","Reactive WebFilter registration mechanism [SPR-14530]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-14530](https://jira.spring.io/browse/SPR-14530?redirect=false)** and commented  As a user I like the fact that I can write a Spring Bean and declare a `@RequestMapping` and it just works. It would be nice if there was a similar abstraction for filters (like `@WebFilter` from servlet spec) that worked for Spring beans independent of the platform. In Spring Boot we have quite a lot of features that work as filters, or configuring filters. The split between ""business"" implementation and path matching/configuration can be useful - it would be useful at least to be able to externalize the path matching part.  ---  **Affects:** 5.0 M1  **Issue Links:** - #19403 ApplicationContext-based initialization of reactive WebFilter, WebHandler, WebExceptionHandler infrastructure (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2016-07-29T15:46:07Z","2019-01-11T18:07:36Z"
"","19046","ReactorClientHttpConnector assumes that URI.port is valid [SPR-14477]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-14477](https://jira.spring.io/browse/SPR-14477?redirect=false)** and commented  it looks like the default value of URI.port is -1 and netty doesn't like that   ---  **Affects:** 5.0 M1  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java#L38  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dca80788d4d3240bdb016d86ecc1e781ac9c6eb7","closed","type: bug,","spring-projects-issues","2016-07-18T13:59:56Z","2016-07-28T14:17:38Z"
"","18852","@AliasFor does not allow for deprecation of attributes [SPR-14280]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-14280](https://jira.spring.io/browse/SPR-14280?redirect=false)** and commented  The validation of `@AliasFor` seems to disallow a simple use case where an attribute is deprecated and replaced by one with a different name. Example:  ``` @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface FeignClient { 	@AliasFor(""name"") 	String value() default """";  	@Deprecated 	@AliasFor(""value"") 	String serviceId() default """";  	@AliasFor(""value"") 	String name() default """"; } ```  `context.getBeansWithAnnotation(...)` throws an exception if any beans have this annotation because it claims the aliases are invalid:  ``` org.springframework.core.annotation.AnnotationConfigurationException: Attribute [value] in annotation [org.springframework.cloud.netflix.feign.FeignClient] must be declared as an @AliasFor [serviceId], not [name]. 	at org.springframework.core.annotation.AnnotationUtils$AliasDescriptor.validate(AnnotationUtils.java:1991) 	at org.springframework.core.annotation.AnnotationUtils$AliasDescriptor.from(AnnotationUtils.java:1937) 	at org.springframework.core.annotation.AnnotationUtils.getAttributeAliasNames(AnnotationUtils.java:1626) 	at org.springframework.core.annotation.AnnotationUtils.isSynthesizable(AnnotationUtils.java:1585) 	at org.springframework.core.annotation.AnnotationUtils.synthesizeAnnotation(AnnotationUtils.java:1368) 	at org.springframework.core.annotation.AnnotationUtils.findAnnotation(AnnotationUtils.java:685) 	at  ... ```    ---  **Affects:** 4.2.6  **Reference URL:** https://github.com/spring-cloud/spring-cloud-netflix/issues/1025#issuecomment-219702187","closed","status: bulk-closed,","spring-projects-issues","2016-05-17T14:18:47Z","2019-01-12T00:14:07Z"
"","18851","SimpleBrokerMessageHandler makes an assertion about the type of the MessageHeaderAccessor, but doesn't seem to care [SPR-14279]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-14279](https://jira.spring.io/browse/SPR-14279?redirect=false)** and commented  There's an assertion here: https://github.com/spring-projects/spring-framework/blob/master/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java#L227. It says that the type of the accessor must be SimpMessageHeaderAccessor. But then the accessor is never actually used, so I'm wondering if the assertion is redundant.  It causes issues if anyone adds a ChannelInterceptor which manipulates headers, which seems like a perfectly valid thing to do, independent of whether you are a websocket client or not.  ---  **Affects:** 4.2.6  **Reference URL:** https://github.com/spring-cloud/spring-cloud-sleuth/issues/276  **Issue Links:** - #19357 StompSubProtocolHandler makes the same assumption about header accessor as SimpleBrokerMessageHandler used to  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-05-17T12:33:30Z","2019-01-11T17:02:59Z"
"","18842","ForwardedHeaderFilter could support X-Forwarded-Prefix as well [SPR-14270]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-14270](https://jira.spring.io/browse/SPR-14270?redirect=false)** and commented  The ServletUriComponentsBuilder supports X-Forwarded-Prefix as a way to add a context path to the forwarded host and port. The new filter could adopt the same convention.  ---  **Affects:** 4.3 RC2  **Issue Links:** - #18192 Add support for x-forwarded- HttpServletRequest wrapping - #17105 Support for X-Forwarded-Prefix in ServletUriComponentsBuilder - #21191 ServletUriComponentsBuilder should replace context path when X-Forwarded-Prefix is present - #18949 ForwardedHeaderFilter should support cases where contextPath should not be replaced with X-Forwarded-Prefix  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-05-13T14:35:40Z","2019-01-11T17:02:53Z"
"","18838","Memory leak on STOMP broker connections that fail before heartbeats start [SPR-14266]","**[dave burns](https://jira.spring.io/secure/ViewProfile.jspa?name=daveburnslit)** opened **[SPR-14266](https://jira.spring.io/browse/SPR-14266?redirect=false)** and commented  The original [boot](https://github.com/spring-projects/spring-boot/issues/5810) issue  (or similar issue) still occurs for a broker/server receiving simultaneous connections. I've modified the sample project and added a multi-threaded Junit [method](https://github.com/daveburnsLIT/springboot-websocket-leak/blob/master/src/test/java/org/sample/websocket/WebsocketTest.java)  as a client. This launches 2000 concurrent threads, about 1100 successfully connect to the server (on my setup). I don't know if its the load or the failed connections (rather than clean disconnects) but the org.springframework.messaging.tcp.reactor.Reactor2TcpClient can be seen to be leaking following by the same instructions as in the original boot issue.  Weird thing is the original leak showed both the Reactor2TcpClient and StompBrokerRelayMessagHandler leaking, this just shows the reactor 2 client.  Noticed this in our production application, i.e. system accepting concurrent connections. The multi-threaded harness mimics this behavior.  ---  **Affects:** 4.2.6  **Reference URL:** #18805  **Issue Links:** - #18928 SockJs heartbeat during message send closes socket  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a81aaba6c6d58a7e49b116b94b8f6c518392d99, https://github.com/spring-projects/spring-framework/commit/b5022108c74763d0695f5655a3a685c364477afd  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","type: bug,","spring-projects-issues","2016-05-11T13:45:30Z","2019-01-14T04:39:25Z"
"","19082","@RequestMapping inheritance on inner classes [SPR-14513]","**[Darion Haase](https://jira.spring.io/secure/ViewProfile.jspa?name=frozn)** opened **[SPR-14513](https://jira.spring.io/browse/SPR-14513?redirect=false)** and commented  Similar to how mapping 'inheritance' works on methods it should be possible to do this on inner classes as well:  ```java @Controller @RequestMapping(""/category"") public class CategoriesController {  	// maps to ""/category/"" 	@RequestMapping(""/"") 	public String showAll(Model model) { [...] }  	@RequestMapping(""/{category}"") 	public class CategoryController {  		// maps to ""/category/{category}/"" 		@RequestMapping(""/"") 		public String showCategory(@PathVariable Category category, Model model) { [...] }  		// maps to ""/category/{category}/download"" 		@RequestMapping(""/download"") 		public String downloadCategory(@PathVariable Category category, Model model) { [...] } 	} } ```  The CategoryController could itself include another class if necessary. This system would reduce duplicate mapping descriptions on larger controllers, currently it has to be like this:  ```java @Controller @RequestMapping(""/category"") public class CategoriesController {  	// maps to ""/category/"" 	@RequestMapping(""/"") 	public String showAll(Model model) { [...] }  	// maps to ""/category/{category}/"" 	@RequestMapping(""/{category}"") 	public String showCategory(@PathVariable Category category, Model model) { [...] }  	// maps to ""/category/{category}/download"" 	@RequestMapping(""/{category}/download"") 	public String downloadCategory(@PathVariable Category category, Model model) { [...] } } ```  More mapped methods would increase the amount of duplication.  There has been a similar request which uses inheritance of classes in #16048  ---  No further details from [SPR-14513](https://jira.spring.io/browse/SPR-14513?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-07-26T11:51:58Z","2020-11-30T10:39:37Z"
"","19128","add cacheResult property to cache annotations with SPEL support [SPR-14560]","**[Daniel Woo](https://jira.spring.io/secure/ViewProfile.jspa?name=danielywoo)** opened **[SPR-14560](https://jira.spring.io/browse/SPR-14560?redirect=false)** and commented  Currently Cacheable and CachePut just cache object returned, what we want is add a new property ""cacheResult"" with SPEL to specify what field to cache in the returned object. e,g.  ``` @Cacheable(cacheResult=""user"") // cache GetUserResponse.getUser() public GetUserResponse getUser(int id) {   User user = dao.getUser(id);   if (user == null) {     return GetUserResponse(ErrorCode.USER_NOT_FOUND, null);   } else {     return GetUserResponse(null, user);   } } ```  In this case, the return type has to be an RPC response object which wraps an error code and the result, currently cacheable will cache the whole response, and we also have other scenarios that we need to wrap the result. So can we use ""cacheResult"" to tell spring what to cache in the returned object?   ---  **Affects:** 4.3.2","closed","type: enhancement,","spring-projects-issues","2016-08-05T03:37:42Z","2016-08-10T12:31:44Z"
"","19568","Provide a RequestDataValueProcessor (or equivalent) mechanism in Spring Web Reactive [SPR-15001]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-15001](https://jira.spring.io/browse/SPR-15001?redirect=false)** and commented  The `RequestDataValueProcessor` mechanism in Spring MVC provides a way to rewrite URLs, form `action` attributes and form field values, and to add additional hidden fields to forms without the need to add specific code for them (used e.g by Spring Security in order to add `CSRF` functionality).  Now that Spring Web Reactive has a `RequestContext` equivalent to that of Spring Web MVC (see #19102), it looks like a good idea to add an equivalent to the `RequestDataValueProcessor` mechanism to Spring Web Reactive.  ---  **Affects:** 5.0 M3  **Issue Links:** - #19098 Reactive response URL-rewriting mechanism","closed","type: enhancement,","spring-projects-issues","2016-12-09T00:49:58Z","2019-01-11T15:21:27Z"
"","19567","Support for ""request parameters"" (query string + form data) in ServerWebExchange [SPR-15000]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-15000](https://jira.spring.io/browse/SPR-15000?redirect=false)** and commented  **Scenario**  A web application using Spring `5.0.0.BUILD-SNAPSHOT`, Spring Boot `2.0.0.BUILD-SNAPSHOT` and Spring Web Reactive provides an HTML form that executes different `@Controller` methods when submitted depending on the presence of specific parameters (managed by means of the `params` property at `@RequestMapping`).  For instance:  ```html     ...    Do thing one    Do thing two   ```  And then at the `@Controller`:  ```java     @RequestMapping(value=""/doit"")     public String doThingNone(final FormBean seedStarter, final BindingResult bindingResult) {         ...     }      @RequestMapping(value=""/doit"", params={""thingone""})     public String doThingOne(final FormBean seedStarter, final BindingResult bindingResult) {         ...     }          @RequestMapping(value=""/doit"", params={""thingtwo""})     public String doThingTwo(final FormBean seedStarter, final BindingResult bindingResult) {         ...     } ```  **Observed results**  -Submitting a form like this form will result in HTTP 400.- The controller method that is selected for execution is the wrong one, `doThingNone(...)`, as if the `params` attribute in other `@RequestMapping` methods didn't apply)  **Example repository**  I'm creating a Spring Web Reactive-enabled version of Thymeleaf's STSM example application at the `thymeleaf/thymeleafexamples-stsm-reactive` repository on GitHub: https://github.com/thymeleaf/thymeleafexamples-stsm-reactive/tree/SPR-15000 (tag: `SPR-15000`)  It can be executed with `mvn -U clean compile spring-boot:run` and accessed pointing a browser to `http://localhost:8080`  Once there, clicking on any of the `Add row` or `Add Seed Starter` buttons will provoke -an HTTP 400- the wrong controller selection behaviour.  ---  **Affects:** 5.0 M3  **Reference URL:** https://github.com/thymeleaf/thymeleafexamples-stsm-reactive/tree/SPR-15000  **Issue Links:** - #20067 Remove support for ""request params"" from WebFlux  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6119415427861cb5d99d7795cf4c7d3547ce286c","closed","type: enhancement,","spring-projects-issues","2016-12-09T00:10:36Z","2019-01-11T15:21:23Z"
"","19566","Bad Content-Type for static resources in Spring Web Reactive [SPR-14999]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-14999](https://jira.spring.io/browse/SPR-14999?redirect=false)** and commented  **Scenario**  A web application using Spring `5.0.0.BUILD-SNAPSHOT`, Spring Boot `2.0.0.BUILD-SNAPSHOT` and Spring Web Reactive does server-side rendering and needs to serve static resources, such as images and CSS style sheet files.  Server is Tomcat (though it seems to affect all servers, or at least several).  **Observed Results**  All static resources: images, CSSs, etc, are being served with `Content-Type: application/octet-stream`. This causes e.g. CSS style sheets not to be rendered by browsers:  See the returned headers, using `httpie`:  ``` $ http http://localhost:8080/css/stsm.css HTTP/1.1 200 Accept-Ranges: bytes Cache-Control: max-age=0 Content-Length: 2518 Content-Type: application/octet-stream Date: Thu, 08 Dec 2016 23:42:12 GMT Last-Modified: Thu, 08 Dec 2016 23:24:46 GMT  (content follows)... ```  **Example Repository**  I'm creating a Spring Web Reactive-enabled version of Thymeleaf's STSM example application at the thymeleaf/thymeleafexamples-stsm-reactive repository on GitHub: https://github.com/thymeleaf/thymeleafexamples-stsm-reactive/tree/SPR-14999 (tag: `SPR-14999`)  It can be executed with `mvn -U clean compile spring-boot:run`. The URL shown above (`http://localhost:8080/css/stsm.css`) can be used for testing this issue.  ---  **Affects:** 5.0 M3  **Reference URL:** https://github.com/thymeleaf/thymeleafexamples-stsm-reactive/tree/SPR-14999  **Issue Links:** - #19474 MediaTypeFactory should come with its own complete mime.types file (_**""is superseded by""**_)","closed","in: web,","spring-projects-issues","2016-12-08T23:49:09Z","2019-01-12T16:45:20Z"
"","19541","Exception accessing static resources in Spring Web Reactive with Netty [SPR-14975]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-14975](https://jira.spring.io/browse/SPR-14975?redirect=false)** and commented  **Scenario**  A Spring Web Reactive application (`5.0.0.BUILD-SNAPSHOT`) using Spring Boot (`2.0.0.BUILD-SNAPSHOT`) and running on a **Netty** server, contains a static resource at its `/src/main/resources/static/images` folder.  This resource is accessed from a browser or `curl`, like:  ``` $ curl http://localhost:8080/images/logo.png ```  **Observed Results**  An exception is thrown:  ``` 2016-12-03 17:55:34.082 ERROR 14751 --- [ctor-http-nio-2] o.s.w.s.h.ExceptionHandlingWebHandler    : Could not complete request  io.netty.handler.codec.EncoderException: java.lang.IllegalStateException: unexpected message type: DefaultFileRegion 	at io.netty.handler.codec.MessageToMessageEncoder.write(MessageToMessageEncoder.java:106) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.CombinedChannelDuplexHandler.write(CombinedChannelDuplexHandler.java:345) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:749) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite(AbstractChannelHandlerContext.java:741) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:827) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:734) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.ChannelDuplexHandler.write(ChannelDuplexHandler.java:106) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.handler.codec.http.HttpServerKeepAliveHandler.write(HttpServerKeepAliveHandler.java:87) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:749) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite(AbstractChannelHandlerContext.java:741) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:827) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:734) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.ChannelDuplexHandler.write(ChannelDuplexHandler.java:106) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:749) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:812) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:825) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.AbstractChannelHandlerContext.writeAndFlush(AbstractChannelHandlerContext.java:805) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.AbstractChannelHandlerContext.writeAndFlush(AbstractChannelHandlerContext.java:842) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.DefaultChannelPipeline.writeAndFlush(DefaultChannelPipeline.java:1032) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.channel.AbstractChannel.writeAndFlush(AbstractChannel.java:296) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at reactor.ipc.netty.channel.ChannelOperations.lambda$sendFile$3(ChannelOperations.java:363) ~[reactor-netty-0.6.0.BUILD-SNAPSHOT.jar:na] 	at reactor.core.publisher.MonoUsing.subscribe(MonoUsing.java:83) ~[reactor-core-3.0.3.RELEASE.jar:na] 	at reactor.core.publisher.FluxConcatIterable$ConcatIterableSubscriber.onComplete(FluxConcatIterable.java:152) ~[reactor-core-3.0.3.RELEASE.jar:na] 	at reactor.core.publisher.FluxConcatIterable.subscribe(FluxConcatIterable.java:69) ~[reactor-core-3.0.3.RELEASE.jar:na] 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:41) ~[reactor-core-3.0.3.RELEASE.jar:na] 	... Caused by: java.lang.IllegalStateException: unexpected message type: DefaultFileRegion 	at io.netty.handler.codec.http.HttpObjectEncoder.encode(HttpObjectEncoder.java:97) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	at io.netty.handler.codec.MessageToMessageEncoder.write(MessageToMessageEncoder.java:88) ~[netty-all-4.1.6.Final.jar:4.1.6.Final] 	... 109 common frames omitted ```  **Example Application**  Please find a very simple example application for reproducing this issue here: https://github.com/danielfernandez/test-spring-boot-reactive-static-netty   ---  **Affects:** 5.0 M3  **Reference URL:** https://github.com/danielfernandez/test-spring-boot-reactive-static-netty  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ba47d06cbb6a07bdc57042da9dd59daafe5c5aae, https://github.com/spring-projects/spring-framework/commit/953f7d40cf9e42d62027e9c756d545ba0ace2b74  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2016-12-03T17:01:34Z","2016-12-30T13:33:15Z"
"","19519","Make signature of ReactiveHttpOutputMessage#writeAndFlushWith(...) more flexible [SPR-14952]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-14952](https://jira.spring.io/browse/SPR-14952?redirect=false)** and commented  **Scenario**  Currently, the `writeAndFlushWith(...)` method in the `org.springframework.http.ReactiveHttpOutputMessage` interface looks like this:  ```java /**  * Use the given {@link Publisher} of {@code Publishers} to write the body of the  * message to the underlying HTTP layer, flushing after each  * {@code Publisher}.  * @param body the body content publisher  * @return a {@link Mono} that indicates completion or error  */ Mono writeAndFlushWith(Publisher> body); ```  The signature in itself makes sense, but due to the way Java generics work this is not very flexible, because it requires the argument to be **exactly of type `Publisher>`**.  This can be uncomfortable for code calling this method like e.g. _reactive views_ (implementations of `org.springframework.web.reactive.result.view.View`), which will normally work with `Flux` objects and may have code like:  ```java final Flux> responseFlux = ...; // Error: Publisher is not assignable from Flux> exchange.getResponse().writeAndFlushWith(responseFlux); ```  The above code would not compile. `Publisher` is not assignable from `Flux>`.  Ending up with a `Flux>` could be relatively common. For example, that's what the `Flux#window(...)` methods return. Imagine we configure our data stream as `Flux` and want to make sure that output is flushed every 3 data items:  ```java final Flux dataStream = ...; // Flux#window(...) returns Flux> exchange.getResponse().writeAndFlushWith(dataStream.window(3)); ```  Which, again, would not compile and would require some (ugly) fiddling with the generic types to make it compile.  **Suggested solution**  Modify the signature of `ReactiveHttpOutputMessage#writeAndFlushWith` to:  ```java Mono writeAndFlushWith(Publisher> body); ```  Given `Publisher>` **is assignable** from `Flux`, this signature would be more flexible and directly usable.  Also, note that this way the signature of this method would better match the one used for equivalent purposes at `reactor.ipc.netty.NettyOutbound`:  ```java Mono sendGroups(Publisher> dataStreams); ```    ---  **Affects:** 5.0 M3","closed","type: enhancement,","spring-projects-issues","2016-11-24T21:54:44Z","2016-12-30T13:33:15Z"
"","19512","Suboptimal performance of Jetty in Spring Web Reactive compared to Tomcat or Undertow [SPR-14945]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-14945](https://jira.spring.io/browse/SPR-14945?redirect=false)** and commented  **Scenario**  This is the scenario:  * Web application outputting a very large sequence of items produced by a `Flux`, serialized as JSON.  **Observed Results**  When using Spring Web Reactive in a Spring Boot 2.0.0 (snapshot) application and comparing execution times between Jetty and other server options like Tomcat or Undertow, **Jetty is considerably slower than the other two**, being this difference increased with the length of the sequence of items being returned by the `Flux` publisher being returned by the `@Controller` method.  Compare Jetty (intro being hit during `curl` execution to see the data transfer flow):  ``` $ curl http://localhost:8081/items/10000 > out.jetty   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100  400k    0  400k    0     0  73855      0 --:--:--  0:00:05 --:--:-- 76756 100  752k    0  752k    0     0  74798      0 --:--:--  0:00:10 --:--:-- 75892 100 1136k    0 1136k    0     0  76268      0 --:--:--  0:00:15 --:--:-- 79320 100 1520k    0 1520k    0     0  76949      0 --:--:--  0:00:20 --:--:-- 79032 100 1905k    0 1905k    0     0  77142      0 --:--:--  0:00:25 --:--:-- 77921 100 2289k    0 2289k    0     0  77345      0 --:--:--  0:00:30 --:--:-- 78372 100 2421k    0 2421k    0     0  77823      0 --:--:--  0:00:31 --:--:-- 82026 ```  With Tomcat:  ``` $ curl http://localhost:8084/items/10000 > out.tomcat   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100 1959k    0 1959k    0     0   334k      0 --:--:--  0:00:05 --:--:--  340k 100 2421k    0 2421k    0     0   336k      0 --:--:--  0:00:07 --:--:--  340k ```  Or with Undertow:  ``` $ curl http://localhost:8085/items/10000 > out.undertow   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100 1353k    0 1353k    0     0   232k      0 --:--:--  0:00:05 --:--:--  249k 100 2421k    0 2421k    0     0   245k      0 --:--:--  0:00:09 --:--:--  265k ```  Also note that this happens both when returning JSON arrays and SSE (Server-Sent Events).  **Example applications**  Example applications: https://github.com/danielfernandez/test-spring-boot-reactive-netty-output  The above applications replicate the scenario using Spring Boot 2.0.0 apps with Jetty, Netty, RxNetty, Tomcat and Undertow. Note this application also tests other issues (specified in separate tickets).  Please have a look at the detailed test explanation at the linked repository's `README`  ---  **Affects:** 5.0 M3  **Reference URL:** https://github.com/danielfernandez/test-spring-boot-reactive-netty-output  **Issue Links:** - #19511 Large performance impact when using SSE in Spring Web Reactive - #19510 Buffering of output in Spring Web Reactive with Netty too aggressive","closed","in: web,","spring-projects-issues","2016-11-24T00:59:50Z","2019-01-11T19:18:55Z"
"","19511","Large performance impact when using SSE in Spring Web Reactive [SPR-14944]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-14944](https://jira.spring.io/browse/SPR-14944?redirect=false)** and commented  **Scenario**  This is the scenario:  * Web application outputting a very large sequence of items produced by a `Flux` * SSE (`Accept:text/event-stream`) being used.  **Observed Results**  When using Spring Web Reactive in a Spring Boot 2.0.0 (snapshot) application, comparing execution times between SSE and non-SSE requests for all the five server options (Jetty, Netty, RxNetty, Tomcat and Undertow), **SSE requests take much more time (4x to 12x) than equivalent non-SSE requests (JSON array result)**.  Compare Tomcat (intro being hit during `curl` execution to see the data transfer flow) returning a normal JSON array:  ``` $ curl http://localhost:8084/items/10000 > out.tomcat   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100 1959k    0 1959k    0     0   334k      0 --:--:--  0:00:05 --:--:--  340k 100 2421k    0 2421k    0     0   336k      0 --:--:--  0:00:07 --:--:--  340k ```  ...and returning Server-Sent Events:  ``` $ curl -H ""Accept:text/event-stream"" http://localhost:8084/items/10000 > outsse.tomcat   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100  388k    0  388k    0     0  26500      0 --:--:--  0:00:15 --:--:-- 26772 100  781k    0  781k    0     0  26658      0 --:--:--  0:00:30 --:--:-- 26881 100 1173k    0 1173k    0     0  26710      0 --:--:--  0:00:45 --:--:-- 26925 100 1566k    0 1566k    0     0  26731      0 --:--:--  0:01:00 --:--:-- 26783 100 1960k    0 1960k    0     0  26764      0 --:--:--  0:01:15 --:--:-- 26894 100 2352k    0 2352k    0     0  26767      0 --:--:--  0:01:30 --:--:-- 26746 100 2746k    0 2746k    0     0  26782      0 --:--:--  0:01:45 --:--:-- 26888 100 3007k    0 3007k    0     0  26786      0 --:--:--  0:01:54 --:--:-- 26840 ```  **Example applications**  Example applications: https://github.com/danielfernandez/test-spring-boot-reactive-netty-output  The above applications replicate the scenario using Spring Boot 2.0.0 apps with Jetty, Netty, RxNetty, Tomcat and Undertow. Note this application also tests other issues (specified in separate tickets).  Please have a look at the detailed test explanation at the linked repository's README  ---  **Affects:** 5.0 M3  **Reference URL:** https://github.com/danielfernandez/test-spring-boot-reactive-netty-output  **Issue Links:** - #19510 Buffering of output in Spring Web Reactive with Netty too aggressive - #19512 Suboptimal performance of Jetty in Spring Web Reactive compared to Tomcat or Undertow","closed","status: invalid,","spring-projects-issues","2016-11-24T00:46:46Z","2019-01-12T05:21:34Z"
"","19510","Buffering of output in Spring Web Reactive with Netty too aggressive [SPR-14943]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-14943](https://jira.spring.io/browse/SPR-14943?redirect=false)** and commented  **Scenario**  This is the scenario:  * Web application outputting a very large sequence of items produced by a `Flux`, serialized as JSON * Clients expecting to receive first results quickly, then keep on receiving more results until the `Flux` finishes producing items. * SSE not being used.  **Observed Results**  When using Spring Web Reactive in a Spring Boot 2.0.0 (snapshot) application:  * If **Netty** is used as a server, no results come until the end (**Netty seems to buffer all output until it's finished**, then send it altogether). * If **RxNetty** is used as a server, **no results ever come** (or at least during a very large period of time).  Compare Tomcat (intro being hit during `curl` execution to see the data transfer flow):  ``` $ curl http://localhost:8084/items/10000 > out.tomcat   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100 1959k    0 1959k    0     0   334k      0 --:--:--  0:00:05 --:--:--  340k 100 2421k    0 2421k    0     0   336k      0 --:--:--  0:00:07 --:--:--  340k ```  With Netty:  ``` $ curl http://localhost:8082/items/10000 > out.netty   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed   0     0    0     0    0     0      0      0 --:--:--  0:00:05 --:--:--     0   0     0    0     0    0     0      0      0 --:--:--  0:00:10 --:--:--     0   0     0    0     0    0     0      0      0 --:--:--  0:00:15 --:--:--     0   0     0    0     0    0     0      0      0 --:--:--  0:00:20 --:--:--     0   0     0    0     0    0     0      0      0 --:--:--  0:00:25 --:--:--     0   0     0    0     0    0     0      0      0 --:--:--  0:00:30 --:--:--     0 100 2421k    0 2421k    0     0  74041      0 --:--:--  0:00:33 --:--:--  579k ```  And RxNetty:  ``` $ curl http://localhost:8083/items/10000 > out.rxnetty   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed   0     0    0     0    0     0      0      0 --:--:--  0:00:15 --:--:--     0   0     0    0     0    0     0      0      0 --:--:--  0:00:30 --:--:--     0   0     0    0     0    0     0      0      0 --:--:--  0:00:45 --:--:--     0   0     0    0     0    0     0      0      0 --:--:--  0:01:00 --:--:--     0   0     0    0     0    0     0      0      0 --:--:--  0:01:15 --:--:--     0   0     0    0     0    0     0      0      0 --:--:--  0:01:30 --:--:--     0   0     0    0     0    0     0      0      0 --:--:--  0:01:45 --:--:--     0   0     0    0     0    0     0      0      0 --:--:--  0:02:00 --:--:--     0   0     0    0     0    0     0      0      0 --:--:--  0:02:15 --:--:--     0   0     0    0     0    0     0      0      0 --:--:--  0:02:30 --:--:--     0   0     0    0     0    0     0      0      0 --:--:--  0:02:45 --:--:--     0 ... (cancelled after 7 minutes) ```  **Example applications**  Example applications: https://github.com/danielfernandez/test-spring-boot-reactive-netty-output  The above applications replicate the scenario using Spring Boot 2.0.0 apps with Jetty, Netty, RxNetty, Tomcat and Undertow. Note this application also tests other issues (to be specified in separate tickets).  Please have a look at the detailed test explanation at the linked repository's `README`  ---  **Affects:** 5.0 M3  **Reference URL:** https://github.com/danielfernandez/test-spring-boot-reactive-netty-output  **Sub-tasks:** - #19557 Add an automatic flushing mechanism for RxNetty - #19558 Add an integration test to validate Reactor Netty automatic flushing  **Issue Links:** - #19531 Add HTTP 1.0 support on Reactor Netty (_**""is duplicated by""**_) - #19511 Large performance impact when using SSE in Spring Web Reactive - #19512 Suboptimal performance of Jetty in Spring Web Reactive compared to Tomcat or Undertow","closed","type: enhancement,","spring-projects-issues","2016-11-24T00:35:30Z","2019-01-11T19:19:06Z"
"","19499","Class loading issues due to thread context classloader hierarchy (Spring Web Reactive + Tomcat) [SPR-14932]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-14932](https://jira.spring.io/browse/SPR-14932?redirect=false)** and commented  **Scenario**  This is the scenario:  * A web application uses a library. * That library needs to dynamically load a class that implements a specific interface, for example, in order to select the best implementation for the specific environment in which it is being run.  **Observed Result**  When using Spring Web Reactive in a Spring Boot 2.0.0 (snapshot) application, if Tomcat is used as a server, a `ClassNotFound` exception is thrown when the library tries to load the implementation class by means of the _thread context_ class loader.  **Example application**  Example application: https://github.com/danielfernandez/test-spring-boot-tomcat  The above application replicates the scenario with Spring Boot 1.4.2 and 2.0.0, using Spring Web MVC and Spring Web Reactive (in 2.0.0). Spring Web Reactive is tested both using Netty and Tomcat. Only Tomcat fails.  **Possible Diagnosis**  This is possibly due to the hierarchy of the _thread context_ class loader. Let's compare:  _Thread context_ class loader in Spring Boot 2.0.0, Spring Web MVC 5.0.0, Tomcat:  ``` +-> sun.misc.Launcher$ExtClassLoader - [sun.misc.Launcher$ExtClassLoader@198ff037]     +-> sun.misc.Launcher$AppClassLoader - [sun.misc.Launcher$AppClassLoader@330bedb4]         +-> org.springframework.boot.loader.LaunchedURLClassLoader - [org.springframework.boot.loader.LaunchedURLClassLoader@65ab7765]             +-> org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader - [TomcatEmbeddedWebappClassLoader\n\n  context: ROOT\n\n  delegate: true\n\n----------> Parent Classloader:\n\norg.springframework.boot.loader.LaunchedURLClassLoader@65ab7765\n\n] ```  _Thread context_ class loader in Spring Boot 2.0.0, Spring Web Reactive 5.0.0, Netty:  ``` +-> sun.misc.Launcher$ExtClassLoader - [sun.misc.Launcher$ExtClassLoader@67449f2]     +-> sun.misc.Launcher$AppClassLoader - [sun.misc.Launcher$AppClassLoader@330bedb4]         +-> org.springframework.boot.loader.LaunchedURLClassLoader - [org.springframework.boot.loader.LaunchedURLClassLoader@65ab7765] ```  _Thread context_ class loader in Spring Boot 2.0.0, Spring Web Reactive 5.0.0, Tomcat:  ``` +-> sun.misc.Launcher$ExtClassLoader - [sun.misc.Launcher$ExtClassLoader@32e33c96]     +-> sun.misc.Launcher$AppClassLoader - [sun.misc.Launcher$AppClassLoader@330bedb4]         +-> org.apache.catalina.loader.ParallelWebappClassLoader - [ParallelWebappClassLoader\n\n  context: ROOT\n\n  delegate: false\n\n----------> Parent Classloader:\n\nsun.misc.Launcher$AppClassLoader@330bedb4\n\n] ```  Given the `org.springframework.boot.loader.LaunchedURLClassLoader` is the one which _class path_ contains all the `.jar` files contained inside the Spring Boot _über jar_, it seems as if the `org.apache.catalina.loader.ParallelWebappClassLoader` used as a _thread context_ class loader in Spring Web Reactive + Tomcat should be delegating to `LaunchedURLClassLoader`. **But it isn't**.  Please see the `README` for the example application on GitHub for more detail on how this was tested and diagnosed.  **Impact**  This affects the integration of Thymeleaf into applications using Spring Web Reactive. Thymeleaf needs to initialise some implementations depending on the specific scenario it is being run on, and this issue makes it impossible to use the current version of the Thymeleaf + Spring integration packages in Spring Web Reactive applications using Tomcat.   ---  **Affects:** 5.0 M3  **Reference URL:** https://github.com/danielfernandez/test-spring-boot-tomcat","closed","status: invalid,","spring-projects-issues","2016-11-21T22:26:27Z","2019-01-12T05:21:35Z"
"","19301","Exception during initialisaton of resource handling at WebReactiveConfiguration [SPR-14735]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-14735](https://jira.spring.io/browse/SPR-14735?redirect=false)** and commented  Once #19090 has allowed for the definition of a static resource handling mechanism, a bug in WebReactiveConfiguration prevents this from correctly initialising.  Using 5.0.0.BUILD-SNAPSHOT (20160916), something like this:  ```java @Override protected void addResourceHandlers(final ResourceHandlerRegistry registry) {     super.addResourceHandlers(registry);     registry.addResourceHandler(""/images/**"").addResourceLocations(""/images/"");     registry.addResourceHandler(""/css/**"").addResourceLocations(""/css/"");     registry.addResourceHandler(""/js/**"").addResourceLocations(""/js/""); } ```  Provokes this on initialisation:  ``` Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.reactive.HandlerMapping]: Factory method 'resourceHandlerMapping' threw exception; nested exception is java.lang.IllegalArgumentException: PathMatcher must not be null 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) 	... 63 more Caused by: java.lang.IllegalArgumentException: PathMatcher must not be null 	at org.springframework.util.Assert.notNull(Assert.java:165) 	at org.springframework.web.reactive.handler.AbstractHandlerMapping.setPathMatcher(AbstractHandlerMapping.java:92) 	at org.springframework.web.reactive.config.WebReactiveConfiguration.resourceHandlerMapping(WebReactiveConfiguration.java:202) ```  This is because a PathMatcher object is being pushed into the handler mapping even it if is null.  ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/adc69097fa45690a1d9937a29bf92f98d501ea68","closed","type: bug,","spring-projects-issues","2016-09-19T22:51:36Z","2019-01-11T17:13:01Z"
"","19134","Missing String return type from reactive @Controller doc at Ref Manual [SPR-14565]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-14565](https://jira.spring.io/browse/SPR-14565?redirect=false)** and commented  The Reference Manual for 5.0.0 in section [Spring Web Reactive Module](http://docs.spring.io/spring/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#web-reactive-module) lists the possible return types for `@Controller` in reactive web apps, but it leaves `String` out of that list.  `String` is an allowed return type, and actually the one used for specifying a view-layer template name in reactive web applications that perform server-side markup rendering using a template engine as a result of controller execution.   ---  **Affects:** 5.0 M1  **Reference URL:** http://docs.spring.io/spring/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#web-reactive  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/62e08a5ebe1107febf11fc260edf800d9d8f42b2","closed","type: enhancement,","spring-projects-issues","2016-08-06T23:06:39Z","2016-09-21T12:13:13Z"
"","19105","Add HttpHeaders getter and setter for Content-Language [SPR-14536]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-14536](https://jira.spring.io/browse/SPR-14536?redirect=false)** and commented  Now that **content negotiation** is in place at the `View`/`ViewResolver` mechanism and therefore `View` implementations don't need to manually create the `Content-Type` HTTP header, it would be nice to have a similar mechanism that avoided the manual creation of the `Content-Language` header.  The current code at the **reactive** version of `ThymeleafView` (see [here](https://github.com/thymeleaf/thymeleafsandbox-springreactive/blob/31777ef358c36b2bd8ccd11234149cac5798dfee/src/main/java/thymeleafsandbox/springreactive/thymeleaf/ThymeleafView.java)) does something like:  ```java final HttpHeaders responseHeaders = exchange.getResponse().getHeaders(); if (templateLocale != null) {     responseHeaders.set(""Content-Language"", templateLocale.toString()); } ```  However, in Spring MVC thanks to the `HttpServletResponse#setLocale(Locale)` method, all it had to do is:  ```java response.setLocale(templateLocale); ```  It's not that creating this header is extremely ugly code, but anyway IMHO it would be great if Spring Reactive included some kind of higher-level mechanism for setting this `Content-Language` that kept `View` implementations from having to create it manually.  ---  **Affects:** 5.0 M1  **Issue Links:** - #19368 Content-Language not set for responses rendered with Message Converters - #19591 Add HttpHeaders getter and setter for Accept-Language - #21104 Overloaded convenience setters on HttpHeaders  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/36da299f96e7be182ea956f3094d0cf1715da6c5","closed","type: enhancement,","spring-projects-issues","2016-07-29T16:36:24Z","2019-01-11T18:08:14Z"
"","19103","Reactive HTTP response based RedirectView [SPR-14534]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-14534](https://jira.spring.io/browse/SPR-14534?redirect=false)** and commented  An equivalent to Spring MVC's `RedirectView` so that the `ViewResolver` can return these when the view name specified at the controller starts with the ""redirect:"" prefix.  ---  **Affects:** 5.0 M1  **Issue Links:** - #19098 Reactive response URL-rewriting mechanism - #19857 Spring WebFlux doesn't handle redirect: directives when media type is requested - #19481 Add a redirect() method to ServerResponse  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/300f2cd2ddc6a2a22df40ff2e2ede2167c5eccf5, https://github.com/spring-projects/spring-framework/commit/2e994f7dc38b5520555720dac215064949ccfabf","closed","type: enhancement,","spring-projects-issues","2016-07-29T16:27:03Z","2019-01-11T18:07:43Z"
"","19102","Reactive equivalent for RequestContext and BindStatus [SPR-14533]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-14533](https://jira.spring.io/browse/SPR-14533?redirect=false)** and commented  Spring MVC's `RequestContext` plays an important role with regard to form binding or other mechanisms such as themes or the use of the `RequestDataValueProcessor`.  But I see no current equivalents for these mechanisms in Spring Reactive yet, which means for now implementing a form-binding mechanism would not be possible…   ---  **Affects:** 5.0 M1","closed","type: enhancement,","spring-projects-issues","2016-07-29T16:24:20Z","2016-12-30T13:33:15Z"
"","19098","Reactive response URL-rewriting mechanism [SPR-14529]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-14529](https://jira.spring.io/browse/SPR-14529?redirect=false)** and commented  Spring MVC-based applications make quite a lot of use of the URL-rewriting mechanism available at `HttpServletResponse#encodeUrl()`. This is normally done in a transparent way by the template engine.  This URL-rewriting mechanism allows the usage of several resource-management-oriented techniques, as well as of course setting URL-based session ids like `;jsessionid=x` in case browser cookies are disabled.  I cannot find anything similar to this in ServerHttpResponse, so I suppose this is something not implemented yet. And probably not to be until a later milestone, but I need it for Thymeleaf's new Spring Reactive-specific link builder (in charge of building @{...} expressions), so I would like to keep track of when this gets implemented :)  ---  **Affects:** 5.0 M1  **Issue Links:** - #20478 Consider moving ServerHttpResponse encodeUrl / registerUrlEncoder to ServerWebExchange? - #19579 Create ResourceUrlEncodingFilter for the reactive module - #19103 Reactive HTTP response based RedirectView - #19568 Provide a RequestDataValueProcessor (or equivalent) mechanism in Spring Web Reactive  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7193686bb0d7686383e8479b13f9c17796c1e98f","closed","type: enhancement,","spring-projects-issues","2016-07-29T15:37:46Z","2019-01-13T20:32:40Z"
"","19132","MockClientHttpResponse should close stream [SPR-14563]","**[Daniel Dacar](https://jira.spring.io/secure/ViewProfile.jspa?name=daniphp@gmail.com)** opened **[SPR-14563](https://jira.spring.io/browse/SPR-14563?redirect=false)** and commented  MockClientHttpResponse should mimic the way real implementation work (HttpComponentsClientHttpResponse) and close the stream inside the close method. Failure to do this introduce a different behaviour during tests.   ---  **Affects:** 4.3.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/47e9360d62a2474e4cb04caaaaa0a1c32ab14e27, https://github.com/spring-projects/spring-framework/commit/e2ba7c9b8c7f91865cc246788ffaa71b2bb5cb52","closed","type: enhancement,","spring-projects-issues","2016-08-05T12:12:30Z","2016-09-19T15:55:27Z"
"","18948","Need a way to escape ${} syntax in property loading [SPR-14375]","**[Dan Dowma](https://jira.spring.io/secure/ViewProfile.jspa?name=codingdiscer)** opened **[SPR-14375](https://jira.spring.io/browse/SPR-14375?redirect=false)** and commented  Here's the scenario - I'm using Spring's configuration system to load my beans.  The actual value that I want to load into my bean is this:  ``` G001.${date:now:yyyyMMdd.HHmmss} ```  That value will be used in a camel application, and passed into a _simple_ string, which camel will evaluate at runtime.  This link shows how I'm trying to use this string value (search for ""date"") http://camel.apache.org/simple.html  So I have this class:  ``` @Component @ConfigurationProperties(prefix=""configurationProperties"") public class NameConfigurationProperties { 	private String namePattern;  	public String getNamePattern() { return namePattern; } 	public void setNamePattern(String namePattern) { this.namePattern = namePattern; } } ```  The problem is how do I structure a value in a properties file such that I can get the value that I'm looking for.  Obviously this won't work:  ``` configurationProperties.namePattern=G001.${date:now:yyyyMMdd.HHmmss} ```  ^^ evaluates to...:  ``` G001.now:yyyyMMdd.HHmmss ```  ... because the _${}_ syntax is reserved for variable replacement.  In the specific case of the string that I'm trying to load, the _date_ portion evaluates to null (since it is an undefined value), so the _now:yyyyMMdd.HHmmss_ is returned as the default option.  I found a work-around that gives me what I want:  ``` configurationProperties.namePattern=G001.${dollar_sign:$}{date:now:yyyyMMdd.HHmmss} ```  This works for 2 reasons: * The _${dollar_sign:$}_ evaluates to _$_ because there is no defined value for _dollar_sign_ * No secondary evaluation occurs for the _${}_ syntax when using the `@ConfigurationProperties`  ### Different behavior using **`@Value`**  I prefer to use **`@ConfigurationProperties`** over **`@Value`** because I generally load alot of properties into beans, and it requires less code rather than annotating every property in the bean with **`@Value`**  However, **`@Value`** works differently than **`@ConfigurationProperties`** in a couple of cases.  Consider the scenario when I use **`@Value`**.  ``` @Component public class NameValues {     @Value(""${value.namePattern}"")     private String namePattern;      public String getNamePattern() { return namePattern; }     public void setNamePattern(String namePattern) { this.namePattern = namePattern; } } ```  Using the work-around from above does not work:  ``` value.namePattern=G001.${dollar_sign:$}{date:now:yyyyMMdd.HHmmss} ```  Yields:  ``` G001.now:yyyyMMdd.HHmmss ```  ... because **`@Value`** performs another round of variable replacement.  However, this input does give the correct desired output:  ``` value.namePattern=G001.${dollar_sign:$}{dollar_sign:$}{date:now:yyyyMMdd.HHmmss} ```  ... because it looks like **`@Value`** does not perform a third round of variable replacement.  I can use SpEL syntax to create a work-around that works for **`@Value`**, as such:  ``` value.namePattern=G001.#{'$'}{date:now:yyyyMMdd.HHmmss} ```  ### Conclusion  I'm a bit surprised that details behind **`@ConfigurationProperties`** and **`@Value`** work differently.  Maybe that is by design, and there is likely more to the story than I understand, but regardless, I feel that I need to know the tricks behind either to make my seemingly straight forward scenario work.  Can you design a simpler way to escape the variable replacement mechanism to address this scenario?  ---  **Affects:** 4.2.6","open","type: enhancement,","spring-projects-issues","2016-06-16T20:13:59Z","2019-01-13T20:33:02Z"
"","19412","SimpleApplicationEventMulticaster should not generally suppress ClassCastException [SPR-14846]","**[Damien Hollis](https://jira.spring.io/secure/ViewProfile.jspa?name=damien.hollis)** opened **[SPR-14846](https://jira.spring.io/browse/SPR-14846?redirect=false)** and commented  We have a situation where an ApplicationListener was throwing a ClassCastException but we were never aware of this issue because invokeListener defaults to catching and suppressing ClassCastExceptions:  ``` protected void invokeListener(ApplicationListener listener, ApplicationEvent event) {      ErrorHandler errorHandler = getErrorHandler();      if (errorHandler != null) {           try {                listener.onApplicationEvent(event);           }           catch (Throwable err) {                errorHandler.handleError(err);           }      }      else {           try {                listener.onApplicationEvent(event);           }           catch (ClassCastException ex) {                // Possibly a lambda-defined listener which we could not resolve the generic event type for                LogFactory.getLog(getClass()).debug(""Non-matching event type for listener: "" + listener, ex);           }      } } ```  This seems like a very bad idea and in our case led to a very subtle bug (luckily we had other checks and balances that showed we had an issue but it took a long time to track it down).  I'm not sure what can happen with a lambda-defined listener, so I can't suggest a better solution than what you have.  We have now implemented our own ErrorHandler, so this issue is resolved for us but other users may not be aware of ClassCastExceptions in their own listeners.  ---  **Affects:** 4.2.8, 4.3.3  **Issue Links:** - #18681 Wrong detection of event type on ApplicationListener<> when using lambdas (ClassCast Exception) - #20981 Lambda error detection might not work on JDK 9 - #19711 SimpleApplicationEventMulticaster should not rely on ClassCastException having a message - #21630 Classification of ClassCastExceptions doesn't work in JDK 11 (OpenJDK)  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","in: core,","spring-projects-issues","2016-10-26T02:19:09Z","2019-01-11T17:28:39Z"
"","19456","Using the MvcUriComponentsBuilder to get a URL to a controller method adds empty parameter when the value is not provided [SPR-14890]","**[Cèsar Ordiñana](https://jira.spring.io/secure/ViewProfile.jspa?name=cordin)** opened **[SPR-14890](https://jira.spring.io/browse/SPR-14890?redirect=false)** and commented  I'm developing a Spring boot with Spring MVC web app using Thymeleaf views. I'm using the [Building URIs to Controllers and methods from views](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-links-to-controllers-from-views) feature through the Thymeleaf _#mvc.url_ utility.  I have the following sample controller:  ```java @Controller @RequestMapping(value = ""/categories/{category}/products"",     name = ""CategoriesItemProductsThymeleafController"",     produces = MediaType.TEXT_HTML_VALUE) public class CategoriesItemProductsThymeleafController {   public CategoryService categoryService;    @Autowired   public CategoriesItemProductsThymeleafController(CategoryService categoryService) {     this.categoryService = categoryService;   }    @PostMapping(name = ""addToProducts"")   @ResponseBody   public ResponseEntity addToProducts(@ModelAttribute Category category,       @RequestParam(""products"") List products) {     categoryService.addToProducts(category, products);     return ResponseEntity.ok().build();   } } ```  In the Thymeleaf view I get the link to that controller method with something like:  ```html  ```  It uses internally the _MvcUriComponentsBuilder.fromMappingName(String)_ method which returns a _MethodArgumentBuilder_. It expects a list of product ids as a request parameter, but I can't use the _MethodArgumentBuilder.arg()_ method because the values I want to send are to be selected in javascript.  The problem with this method is that the Url return is the following one:  ```html /categories/CATEGORY_ID/products?products ```  I use that Url as a parameter to call _jQuery.ajax()_ using my own _products_ values. If I use a GET method, the url ends up being:  ```html /categories/CATEGORY_ID/products?products&products=1&products=2 ```  Then the controller method receives the following list of values: [null, 1, 2]. As a workaround I can remove those null values from the list, but I think the Url is not constructed as it should.  After some debugging I've found the code which add those empty parameters is the _HierarchicalUriComponents.getQuery()_ method. It has the following code:  ```java for (Object value : values) {     if (queryBuilder.length() != 0) {         queryBuilder.append('&');     }     queryBuilder.append(name);      if (value != null) {         queryBuilder.append('=');         queryBuilder.append(value.toString());     }   } ```  The problem could be solved by changing the code to add the parameter only if _value!=null_.  ---  **Affects:** 4.3.3  **Issue Links:** - #18113 UriComponentsBuilder interprets empty request parameters as null  1 votes, 3 watchers","open","type: enhancement,","spring-projects-issues","2016-11-09T12:44:39Z","2019-01-11T17:38:55Z"
"","19419","Allow @Cacheable method to return java.util.Optional variant of cached value with @Cacheable(sync=true) [SPR-14853]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-14853](https://jira.spring.io/browse/SPR-14853?redirect=false)** and commented  #18804 is still reproducible if ""sync=true"" is set on the `@Cacheable` annotation.  For example, in  ```java class MyServiceImpl implements MyService {      private static final String CACHE_NAME = ""itemCache"";            @Override     @Cacheable(value=CACHE_NAME, sync=)     public Optional findById(Long id) {         // access the repository to retrieve the item     }      @Override     @CachePut(cacheNames = CACHE_NAME, key = ""#item.id"")     public Item insertItem(Item item) {         ...     }  }  ```  a ClassCastException is thrown.  The problem is in https://github.com/spring-projects/spring-framework/blob/v4.3.3.RELEASE/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java#L358 - when sync=true, a diffferent path is taken that does not do the Optional wrapping/unwrapping which takes place at https://github.com/spring-projects/spring-framework/blob/v4.3.3.RELEASE/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java#L404  ---  **Affects:** 4.3.3  **Issue Links:** - #18804 Allow `@Cacheable` method to return java.util.Optional variant of cached value  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2016-10-26T17:57:16Z","2019-01-13T05:19:15Z"
"","19079","HTML5 Application Cache Manifest not served with Content-Type ""text/cache-manifest"" [SPR-14510]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-14510](https://jira.spring.io/browse/SPR-14510?redirect=false)** and commented  The HTML 5 Application Cache Manifest should be served with a content type of ""text/cache-manifest"" according to https://html.spec.whatwg.org/multipage/browsers.html#writing-cache-manifests  However, Spring serves it with a content type of ""text/html""  You can reproduce this issue by running the demo application at https://github.com/bclozel/spring-resource-handling/ and looking at the response for http://localhost:8080/cache.manifest   ---  **Affects:** 4.3.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/084daa7fb510cdc650b0ade942c2fc067d2b2027","closed","type: enhancement,","spring-projects-issues","2016-07-25T17:59:33Z","2016-09-21T12:13:12Z"
"","18947","RestartClassLoader should implement LoadTimeWeaver [SPR-14374]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-14374](https://jira.spring.io/browse/SPR-14374?redirect=false)** and commented  [org.springframework.boot.devtools.restart.classloader.RestartClassLoader](https://github.com/spring-projects/spring-boot/blob/v1.4.0.M3/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/classloader/RestartClassLoader.java) should implement org.springframework.instrument.classloading.LoadTimeWeaver which would allow load time weaving to Just Work when using Spring Boot dev tools (ex, ""mvn spring-boot:run"").  With this change, org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver would work with RestartClassLoader, making the `@EnableLoadTimeWeaving` annotation work as expected under Spring boot dev tools.   ---  **Affects:** 4.3 GA","closed","status: invalid,","spring-projects-issues","2016-06-16T18:23:15Z","2019-01-12T05:22:36Z"
"","18939","@WebAppConfiguration fails with ServletServerContainerFactoryBean in the ApplicationContext [SPR-14367]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-14367](https://jira.spring.io/browse/SPR-14367?redirect=false)** and commented  The servlet container used by unit tests doesn't support websockets.  To see this issue, define this configuration class (as documented at http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html#websocket-server-runtime-configuration )  ```java @Configuration @EnableWebSocket public class WebSocketConfig {  	private static final int MAX_MESSAGE_SIZE = 16 * 1024 * 1024;  	@Bean 	public ServletServerContainerFactoryBean createWebSocketContainer() { 		ServletServerContainerFactoryBean container = new ServletServerContainerFactoryBean(); 		container.setMaxTextMessageBufferSize(MAX_MESSAGE_SIZE); 		container.setMaxBinaryMessageBufferSize(MAX_MESSAGE_SIZE); 		return container; 	} } ```  then run this unit test (which is created by the Spring boot web application archetype):  ```java @RunWith(SpringJUnit4ClassRunner.class) @SpringApplicationConfiguration(classes = ExampleApplication.class) @WebAppConfiguration public class ExampleApplicationTests {  	@Test 	public void contextLoads() { 	}  } ```  The result is that the test fails with this stack trace:  ``` Caused by: java.lang.IllegalStateException: A ServletContext is required to access the javax.websocket.server.ServerContainer instance 	at org.springframework.util.Assert.state(Assert.java:392) 	at org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean.afterPropertiesSet(ServletServerContainerFactoryBean.java:99) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:753) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538) 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766) 	at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307) 	at org.springframework.boot.test.SpringApplicationContextLoader.loadContext(SpringApplicationContextLoader.java:98) 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) 	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83) 	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:183) 	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:123) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:228) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:230) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:249) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:89) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:193) 	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283) 	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173) 	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) 	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128) 	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203) 	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155) 	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) ```  The problem is that the org.springframework.mock.web.MockServletContext instance (referenced in the stack trace frame ""org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean.afterPropertiesSet(ServletServerContainerFactoryBean.java:99)"") doesn't have the servlet attribute ""javax.websocket.server.ServerContainer"" set to an instance of javax.websocket.server.ServerContainer  (the attribute is instead set to null).  As a workaround, the test class can be annotated with:  ```java @org.springframework.boot.test.IntegrationTest(""server.port:0"") ```  causing a real servlet context (which does support websockets) to be used instead of a mock one.   ---  **Affects:** 4.2.6","closed","type: enhancement,","spring-projects-issues","2016-06-15T15:53:40Z","2016-11-14T22:08:01Z"
"","19346","Remove @Inherited from @Primary [SPR-14780]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-14780](https://jira.spring.io/browse/SPR-14780?redirect=false)** and commented  This is a request for a breaking change in the API for Spring 5.  The `@Primary` annotation, which can be applied to interfaces, is currently marked as `@Inherited`. There are some cases in which factory-generated implementations of both a superinterface and subinterface are needed in the context, and `@Primary` cannot be used to indicate that the superinterface should be used non-invasively because it will be inherited by the subinterface.  As one concrete example of this in action, consider a `UserRepository` that is intended to be the backing store for a Spring Security `UserDetailsService` and also exported by Spring Data REST. The only mechanism for applying granular security to Spring Data REST is method-level security, but this breaks the repository for use in other areas of the application that aren't operating under the same security context.  The only manageable approach is to create a `RestUserRepository extends UserRepository` and apply the security annotations there. However, it is now unwieldy to inject a `UserRepository` into other consumers, as `@Primary` is unavailable. The only option is to add a qualifier to every other use of the dependency in the application.  Primary beans are an atypical case, and I believe that it is reasonable to expect that in the case where a user wants to apply `@Primary` to a subtype, the user is aware of that characteristic and can apply the annotation explicitly instead of inheriting it.   ---  **Affects:** 4.3.3  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-10-06T06:21:04Z","2016-11-08T13:11:19Z"
"","19328","Content negotiation conflict with Data REST Repository [SPR-14762]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-14762](https://jira.spring.io/browse/SPR-14762?redirect=false)** and commented  Spring Data REST repository mappings do not coexist cleanly with base Web MVC mappings. When an `@RestController` is manually mapped to the same URL as an HTML controller, where the latter has a `produces=""text/html""` directive, the dispatcher will perform content negotiation and return the preferred representation. When the conflicting mapping is a Spring Data REST mapping, however, the dispatcher servlet returns a 406 Not Acceptable instead of using the `/api/{repository}/{id}` mapping.  I am not **certain** whether resolution for this more properly belongs in the dispatcher or in the Data REST project, but since the REST mappings are correctly identifying the path (with a parameter) and providing the content type, and mappings that vary only by content type can coexist otherwise, it seems that the case where the fixed mapping (`/api/foos` is ""unacceptable"" but a fallback mapping with a path parameter that matches (`/api/{repository}`) exists, the dispatcher should attempt the fallback mapping before returning an error to the client.  ---  **Affects:** 4.3.3, 4.3.8  **Reference URL:** https://github.com/chrylis/spring-SPR-14762","closed","status: invalid,","spring-projects-issues","2016-09-28T19:01:24Z","2019-01-13T20:32:02Z"
"","18856","SpEL should not attempt conversion when exact match is available [SPR-14284]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-14284](https://jira.spring.io/browse/SPR-14284?redirect=false)** and commented  I have an overloaded method where one overload's single parameter exactly matches the argument supplied to the SpEL evaluator. SpEL nevertheless attempts to find a suitable conversion for each of the overloads, which is triggering a bug in Data Commons.  In the case where the supplied argument exactly matches the parameter type (or potentially is an `instanceof`), SpEL could avoid the conversion attempt entirely.   ---  **Affects:** 4.3 RC2","open","type: enhancement,","spring-projects-issues","2016-05-17T19:18:40Z","2016-12-23T22:47:25Z"
"","18855","SpEL does not dispatch subclass argument to signature overload with superclass [SPR-14283]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-14283](https://jira.spring.io/browse/SPR-14283?redirect=false)** and commented  I just added an overload to a SpEL utility object with an existing, working method whose argument is an abstract class:  ``` String format(AbstractClass param) {...}  String format(SomethingElse param) {...} ```  Now attempting to call `format(concreteObject)` results in EL1004E:  ``` Method call: Method format(com.foo.ConcreteClass) cannot be found on com.foo.expressions.Expressions type ```    ---  **Affects:** 4.3 RC2","closed","in: core,","spring-projects-issues","2016-05-17T18:36:21Z","2019-01-12T05:22:48Z"
"","19069","ResourcePatternUtils.getResourcePatternResolver does not accept null arg [SPR-14500]","**[Christoph Strebin](https://jira.spring.io/secure/ViewProfile.jspa?name=cstrebin)** opened **[SPR-14500](https://jira.spring.io/browse/SPR-14500?redirect=false)** and commented  Method `org.springframework.core.io.support.ResourcePatternUtils.getResourcePatternResolver` does not accept null argument, although the javadoc says it does.  ``` @Test public void testGetResourcePatternResolver() { 	assertNotNull(ResourcePatternUtils.getResourcePatternResolver(null)); } ```  =>  ``` java.lang.IllegalArgumentException: ResourceLoader must not be null 	at org.springframework.util.Assert.notNull(Assert.java:165) 	at org.springframework.core.io.support.ResourcePatternUtils.getResourcePatternResolver(ResourcePatternUtils.java:62) ```    ---  **Affects:** 3.2.17, 4.2.6, 4.3.1  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","in: core,","spring-projects-issues","2016-07-21T11:43:02Z","2016-07-28T09:16:20Z"
"","19497","Implement allocation-friendly method to get user count in SimpUserRegistry [SPR-14930]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-14930](https://jira.spring.io/browse/SPR-14930?redirect=false)** and commented  Hey,  in my application I implemented a method to get the currently connected user count backed by the implementations of the SimpUserRegistry interface, which is used for monitoring purposes. Unfortunately, this involves creating a completely new HashSet every time.  What about an additional method to just get the user count in a more allocation-friendly manner? Much like Method.getParameterCount() in Java 8.  Attached you will find my proposal, but if I missed something feel free to adjust it accordingly.  Cheers, Christoph   ---  **Affects:** 4.3.4  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1241","closed","type: enhancement,","spring-projects-issues","2016-11-21T20:01:33Z","2016-12-21T11:54:10Z"
"","19467","Improve performance of STOMP message header encoding [SPR-14901]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-14901](https://jira.spring.io/browse/SPR-14901?redirect=false)** and commented  Hey,  ## Problem  In recent loadtests I noticed quite some heap pressure coming from the encoding and escaping from STOMP headers that are sent to the client by our application. This is caused by mainly two things: * Escaping creates `StringBuilder` and `String` objects for every header and every of its values * Serializing the escaped header (and its values) requires to copy the bytes coming from `StringCoding.safeTrim()` every time.  Overall this creates around ~3-4GB of heap pressure in a 10 minute profile for us and is the TOP 1 reason for causing allocations right now. (I'd be happy to post a screenshot on Monday since I don't have it running on my laptop currently - if you need it).  ## Proposed solution  I thought a bit about a possible solution and came up with the idea to allow the `StompEncoder` (and `StompDecoder`) to be configured on the `StompSubProtocolHandler`. In the proposed solution this is done via a new `StompWebSocketCodecRegistration` object - consisting of both the encoder (and the decoder for consistency reasons). (I explicitly didn't call it a StompWebSocketCodec because it doesn't offer the actual decoding and encoding a real codec would offer.) In order to don't change too much contracts and allow a possible backport to 4.3.x I didn't create an interface for `StompEncoder` (and `StompDecoder`), but decided to go for encapsulating the header encoding via a new interface `StompHeaderEncoder`. Which in the end is the sole culprit for the allocations and thereby the interesting part.  With the proposed solution I am now able to specify a customized `StompEncoder` with a specialized version of a `StompHeaderEncoder`. In our case I would now write an implementation that makes use of a precompiled Map of headers and their byte representation, since we know them pretty much upfront. JMH microbenchmarks show a possible uplift of factor 20 with that sort of mechanism, but one could also think about a ""trainable"" header encoding.  Let me know what you think about the proposed solution. I'd be happy to adjust it according to your feedback.  Cheers, Christoph   ---  **Affects:** 4.3.4  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1236","closed","type: enhancement,","spring-projects-issues","2016-11-11T20:39:39Z","2019-01-11T19:21:44Z"
"","19326","Reduce String allocations in TransactionAspectSupport.methodIdentification() [SPR-14760]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-14760](https://jira.spring.io/browse/SPR-14760?redirect=false)** and commented  Hey,  in some of my recent tests I noticed a rather ""high"" pressure on the heap coming from TransactionAspectSupport.methodIdentification(). (The image below shows the result of a 10 minute flight recording) for StringBuilder.append(String). Of course there are some more MBs (~200) allocated for the StringBuilder and the actual toString() calls - in case you need this data as well - just tell me.  !transaction-methodIdentification.jpg|thumbnail!  As far as I understood the method it's ""just"" used for logging and monitoring - both of which are disabled in most situations, I'd say. Is this observation correct? Unfortunately, I didn't figure out yet how to implement my own version of TransactionAspectSupport inside a Spring-Boot app in order to workaround the problem at least for us, but that might be an issue for Boot after all.  Nonetheless, I attached a small PR that should at least force the compiler to concat the dot with a char instead of a String. Maybe this is the first step for 4.x until you can maybe come up with something smarter in 5.x.  Cheers, Christoph  ---  **Affects:** 4.3.3  **Attachments:** - [transaction-methodIdentification.jpg](https://jira.spring.io/secure/attachment/23575/transaction-methodIdentification.jpg) (_67.74 kB_)  **Issue Links:** - #21035 `@Transactional` annotation lead to a huge memory allocation during creation String representation of Method uses for logging only (_**""is duplicated by""**_) - #19202 Consistent comma splitting without regex overhead (e.g. in MediaType/MimeType)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1186","closed","type: enhancement,","spring-projects-issues","2016-09-28T06:37:51Z","2019-01-13T05:19:43Z"
"","19313","Improve performance of StompEncoder.encode() [SPR-14747]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-14747](https://jira.spring.io/browse/SPR-14747?redirect=false)** and commented  Hey,  I just noticed a rather costly assertion in the websocket layer - more explicitly in StompEncoder.encode(). Sorry I didn't notice this earlier in order to bring this to 4.3.3.  It is very similar to #19191, but has a much bigger impact on websocket applications as its executed on basically every message apart from heartbeats. Apart from the JMH benchmarks below, which show a factor of ~1200, the Assert statement in question produced more than 60GB of heap pressure in just 20 seconds. Mostly coming from the string concatenation of course.  !stomp-encoder.jpg|thumbnail!  |Benchmark|Mode|Cnt|Score|Error|Units| |:---|:---|:---|:---|:---|:---| |MyBenchmark.testNormal|thrpt|100|1639083,456|± 68418,140|ops/s| |MyBenchmark.testEnhanced|thrpt|100|2087033509,372|± 21891731,313|ops/s|  Much like the fix for #19191 I switched from Assert.notNull to a simple null check with an IllegalStateException.  While looking into StompEncoder I also moved one variable declaration a bit down, which was not needed in every-case. I hope you don't mind.  Best, Christoph  ---  **Affects:** 4.2.8, 4.3.3  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1185  **Attachments:** - [stomp-encoder.jpg](https://jira.spring.io/secure/attachment/23574/stomp-encoder.jpg) (_50.38 kB_)  **Issue Links:** - #19191 Improve performance of assertion in StompSubProtocolHandler  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f2e1e1b890a94d1eae4a3a9eae6095b3d49ca411, https://github.com/spring-projects/spring-framework/commit/6c764f6b8a3305ed38d77fa8b1fe920562307815, https://github.com/spring-projects/spring-framework/commit/02d83cedeacd1ea92feb0dab4525874a4734231c, https://github.com/spring-projects/spring-framework/commit/94753b5e87a622751493071ec1957bfdfded199e, https://github.com/spring-projects/spring-framework/commit/a6b0b6e27945dcf3c84f2c8ae49969470a1c8c76, https://github.com/spring-projects/spring-framework/commit/774e4c3dc10035448d12e5f883823c260569f891, https://github.com/spring-projects/spring-framework/commit/6577faa2da8b94997eb3de53d4bc575388b25e00  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-09-25T17:07:48Z","2019-01-11T17:12:35Z"
"","19208","Optimize ordered event listener performance [SPR-14642]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-14642](https://jira.spring.io/browse/SPR-14642?redirect=false)** and commented  Hey,  while doing some loadtests in our project, I noticed that **AnnotatedElementUtils.searchWithFindSemantics()** or rather **AnnotatedElementUtils.findMergedAnnotation()** are consuming quite some CPU. It's even above HashMap.getNode(int, Object) in some tests, which I find quite precarious for such a utility class. It looks like this is especially true for using **`@Order`** somewhere in the application in combination with **`@EventListener`** functionality.  I was wondering if this could be improved in any way? Maybe by caching merged annotation lookups much like in AnnotationUtils. Or maybe by just caching the order in the ApplicationListener context.  !annotated_element_utils_jmc.jpg|thumbnail!  Cheers, Christoph  ---  **Affects:** 4.3.2  **Attachments:** - [annotated_element_utils_jmc.jpg](https://jira.spring.io/secure/attachment/23529/annotated_element_utils_jmc.jpg) (_483.01 kB_)  **Issue Links:** - #16245 ApplicationListener-like annotation for consuming application events - #18020 Use AnnotatedElementUtils instead of AnnotationUtils wherever feasible  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/58fa63fdd109af831d8c674f640029b43a03b5ed, https://github.com/spring-projects/spring-framework/commit/3b91dec46241d8ef21af34e5c621de2570d6b234","closed","type: enhancement,","spring-projects-issues","2016-08-30T08:32:27Z","2019-01-11T18:08:40Z"
"","19203","Improve performance of StompCommand.getMessageType() [SPR-14636]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-14636](https://jira.spring.io/browse/SPR-14636?redirect=false)** and commented  Hey,  I was doing some benchmarks of StompCommand.getMessageType() in order to improve it a bit. While doing so, I noticed that the underlying map of stomp commands can be turned into an EnumMap.  |Benchmark|Mode|Cnt|Score|Error|Units| |:---|:---|:---|:---|:---|:---| |MyBenchmark.getMessageTypeBefore|thrpt|30|163519811,370|± 8667018,099|ops/s| |MyBenchmark.getMessageTypeNew|thrpt|30|222591672,767|± 4476266,088|ops/s|  As you can see there is ~36% performance increase.  Cheers, Christoph  ---  **Affects:** 4.2.7, 4.3.2  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1148  **Issue Links:** - #19191 Improve performance of assertion in StompSubProtocolHandler  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aa12288d509111669232cd66a8e2b66ac724cf8d, https://github.com/spring-projects/spring-framework/commit/899ebd8ee2e7acdc6bc0296d0c0db332cc4b43a5, https://github.com/spring-projects/spring-framework/commit/8e98177fb33597a21c43077a805375045279cd01  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-08-28T17:45:15Z","2019-01-11T18:09:20Z"
"","19202","Consistent comma splitting without regex overhead (e.g. in MediaType/MimeType) [SPR-14635]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-14635](https://jira.spring.io/browse/SPR-14635?redirect=false)** and commented  Hey,  I was doing some benchmarks of MediaType.parseMediaTypes() in order to improve it a bit. While doing so, I noticed that the splitting of media types recompiles the regex pattern for each call. I therefore extracted the regex to a static field to reduce the compilation overhead on each call.  |Benchmark|Mode|Cnt|Score|Error|Units| |:---|:---|:---|:---|:---|:---| |MyBenchmark.parseMediaTypesBefore|thrpt|30| 945618,154|± 29701,378|ops/s| |MyBenchmark.parseMediaTypesNew|thrpt|30|1530048,625|± 21685,694|ops/s|  As you can see there is ~60% performance increase.  Cheers, Christoph  ---  **Affects:** 4.3.2  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1147  **Issue Links:** - #18350 Regression: HttpEntityMethodProcessor does not allow other Http methods than defined in the HttpMethod Enum - #19075 HeaderContentNegotiationStrategy does not support multiple Accept headers - #19326 Reduce String allocations in TransactionAspectSupport.methodIdentification()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/03609c15188c727f576487193f0512791393f443, https://github.com/spring-projects/spring-framework/commit/d8f7347000408363c5e91a778d73eb164d71925d","closed","type: enhancement,","spring-projects-issues","2016-08-28T16:05:18Z","2019-01-11T18:09:27Z"
"","19192","Fix assertions in StompHeaderAccessor [SPR-14625]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-14625](https://jira.spring.io/browse/SPR-14625?redirect=false)** and commented  Hey,  while looking into #19191 I noticed another case of unnecessary and rather costly string concatenations. Not as severe as in #19191 but with a factor of 8 it still has an effect. Applications that send a lot of websocket messages could benefit from this as it eases the pressure on the heap.  |Benchmark|Mode|Cnt|Score|Error|Units| |:---|:---|:---|:---|:---|:---| |MyBenchmark.testAssertNormal|thrpt|30|21121,046|225,696|ops/s| |MyBenchmark.testAssertEnhanced|thrpt|30|173947,320|2253,248|ops/s|  I used traditional if statements instead of the supplier functionality in **Assert** in order to be able to backport it to 4.3.x or even 4.2.x - much like the fixes for #19191.  Cheers  ---  **Affects:** 4.2.7, 4.3.2  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1139  **Issue Links:** - #19191 Improve performance of assertion in StompSubProtocolHandler  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: bug,","spring-projects-issues","2016-08-24T18:24:19Z","2019-01-11T18:09:58Z"
"","19191","Improve performance of assertion in StompSubProtocolHandler [SPR-14624]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-14624](https://jira.spring.io/browse/SPR-14624?redirect=false)** and commented  Hey,  I just noticed a rather costly assertion in the websocket layer - more explicitly in StompSubProtocolHandler.convertConnectAcktoStompConnected().  As the framework is now using Java 8 features, I wanted to add methods in `Assert` that can make use of suppliers. But you already did that ;-)  So I just used the new methods in an isolated test for a benchmark and the results show a crazy factor of 4300. I might be tricked by dead code elimination or some other compiler voodoo, because I don't trust those results.  ```java @BenchmarkMode(Mode.Throughput) @State(Scope.Thread) public class MyBenchmark {      @State(Scope.Thread)     public static class TestState {         public String testObject = ""a"";         public StompHeaderAccessor headerAccessor;          public TestState() {             MultiValueMap extHeaders = new LinkedMultiValueMap<>();             extHeaders.add(StompHeaderAccessor.STOMP_LOGIN_HEADER, ""joe"");             extHeaders.add(StompHeaderAccessor.STOMP_PASSCODE_HEADER, ""joe123"");             headerAccessor = StompHeaderAccessor.create(StompCommand.CONNECT, extHeaders);         }      }      @Benchmark     public void testAssertNormal(TestState testState) {         for (int i = 0; i < 1000; i++) {             Assert.notNull(testState.testObject, ""Original STOMP CONNECT not found in "" + testState.headerAccessor);         }     }      @Benchmark     public void testAssertSupplier(TestState testState) {         for (int i = 0; i < 1000; i++) {             Assert.notNull(testState.testObject, () -> ""Original STOMP CONNECT not found in "" + testState.headerAccessor);         }     }  }  ```  |Benchmark|Mode|Cnt|Score|Error|Units| |:---|:---|:---|:---|:---|:---| |MyBenchmark.testAssertNormal|thrpt|30|966,149|12,945|ops/s| |MyBenchmark.testAssertSupplier|thrpt|30|4194886,453|72553,850|ops/s|  Nevertheless, I changed the code to use the supplier methods in the attached PR.  Unfortunately, this will be only available in 5.x so I would appreciate a solution for 4.x that avoids the apparently rather costly assertion/string-concatenation of StompHeaderAccessor instances.  Best, Christoph  ---  **Affects:** 4.2.7, 4.3.2  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1138  **Issue Links:** - #19192 Fix assertions in StompHeaderAccessor - #19203 Improve performance of StompCommand.getMessageType() - #19313 Improve performance of StompEncoder.encode()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0735e9ba98821f9c204ab0005aab6d9ac24dd740, https://github.com/spring-projects/spring-framework/commit/3811a595edd55bb09bbcf20ee97dad7a7edee0f9, https://github.com/spring-projects/spring-framework/commit/56b197bce1491f18f33d7c33de483a49682e6d52  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-08-24T17:47:53Z","2019-01-11T18:10:09Z"
"","18921","Allow method inlining of ObjectUtils.nullSafeEquals() [SPR-14349]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-14349](https://jira.spring.io/browse/SPR-14349?redirect=false)** and commented  Hey,  while doing a benchmark in our project with the JVM options  ``` -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlining ```  I noticed that **ObjectUtils.nullSafeEquals()** is a hot method, but is unfortunately too big for the VM to inline it. At least with the defaults of 325 bytecodes as it currently shows up with 337 bytes.  ``` ...  @ 8   org.springframework.util.ObjectUtils::nullSafeEquals (337 bytes)   hot method too big ... ```  I made a small improvement by simply extracting the more uncommon use-case of checking for array equality, which reduces the method to 55 bytes and allows the inlining of the method. As a small side-benefit it also reduces the cyclomatic complexity of the method itself.  ``` ... @ 8   com.dreis.benchmark.ObjectUtilsInlinedEquals::nullSafeEquals (55 bytes)   inline (hot) ... ```  I also created a small microbenchmark that looks like this:  ```java @BenchmarkMode(Mode.Throughput) @State(Scope.Thread) public class ObjectUtilsBenchmark {  	@State(Scope.Thread) 	public static class TestState { 		public String[] firstStringArray = new String[] {""a"", ""b"", ""c""}; 		public String[] secondStringArray = new String[] {""a"", ""b"", ""c""}; 		public List firstStringCollection = Arrays.asList(""a"", ""b"", ""c""); 		public List secondStringCollection = Arrays.asList(""a"", ""b"", ""c""); 	}  	@Benchmark 	public boolean testStringArray(TestState testState) { 		return ObjectUtils.nullSafeEquals(testState.firstStringArray, testState.secondStringArray); 	}  	@Benchmark 	public boolean testStringCollection(TestState testState) { 		return ObjectUtils.nullSafeEquals(testState.firstStringCollection, testState.secondStringCollection); 	}  	@Benchmark 	public boolean testStringArrayInlined(TestState testState) { 		return ObjectUtilsInlinedEquals.nullSafeEquals(testState.firstStringArray, testState.secondStringArray); 	}  	@Benchmark 	public boolean testStringCollectionInlined(TestState testState) { 		return ObjectUtilsInlinedEquals.nullSafeEquals(testState.firstStringCollection, testState.secondStringCollection); 	}  } ```  The results of this microbenchmark look roughly like this.  ``` Benchmark                                          Mode  Cnt          Score        Error  Units ObjectUtilsBenchmark.testStringArray              thrpt   20  127900470,357 ± 985253,526  ops/s ObjectUtilsBenchmark.testStringArrayInlined       thrpt   20  149902422,075 ± 905479,738  ops/s ObjectUtilsBenchmark.testStringCollection         thrpt   20   61584045,911 ± 345039,219  ops/s ObjectUtilsBenchmark.testStringCollectionInlined  thrpt   20   70381357,642 ± 751583,252  ops/s ```  I created a PR with my changes at https://github.com/spring-projects/spring-framework/pull/1076 and would be very happy if this gets accepted.  Keep up the great work!  Cheers, Christoph   ---  **Affects:** 3.2.17, 4.2.6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1076, and commits https://github.com/spring-projects/spring-framework/commit/ca12e13ef8a22e3dfd62405ef44aad0482b844b0, https://github.com/spring-projects/spring-framework/commit/14ab9800ff607c75ae1717ab1b00dcf67755cb90, https://github.com/spring-projects/spring-framework/commit/71df9cef804b74495ceeb7f1f5bc58741599c3dd  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-06-09T19:54:26Z","2016-06-24T19:33:43Z"
"","19274","Don't log property values in PropertySourcesPropertyResolver by default [SPR-14709]","**[Christoffer Sawicki](https://jira.spring.io/secure/ViewProfile.jspa?name=christoffer.sawicki@gmail.com)** opened **[SPR-14709](https://jira.spring.io/browse/SPR-14709?redirect=false)** and commented  `PropertySourcesPropertyResolver` currently logs all values it finds (at level ""debug""). This is problematic since some values can be of sensitive nature (e.g. passwords) and some systems have requirements to never log such information.  The safest way to fix this is to modify `PropertySourcesPropertyResolver` to never log property values at all.  Leaving a hook (like the current `logKeyFound`) could still be useful for users that would like to — for whatever reason — override this new default behaviour.  (Filing this improvement issue was suggested by `@juergen`.hoeller in this comment: https://jira.spring.io/browse/SPR-14370?focusedCommentId=132028)  ---  **Affects:** 4.3.2  **Issue Links:** - #18943 Revise PropertySourcesPropertyResolver's default logging and customizability  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/782c99dfaf23f5954380dd5a47dcf760ef0d5a58, https://github.com/spring-projects/spring-framework/commit/fbe7ddb6403382554ab75239834ede534d06b6af","closed","type: enhancement,","spring-projects-issues","2016-09-13T14:52:58Z","2019-01-11T17:13:44Z"
"","19517","@Scheduled on AWS EC2 does not work [SPR-14950]","**[Christian Hoene](https://jira.spring.io/secure/ViewProfile.jspa?name=hoene)** opened **[SPR-14950](https://jira.spring.io/browse/SPR-14950?redirect=false)** and commented  I tried to schedule some tasks with `@Schedule` or with a function call, using jdk 1.8 or jdk 1.7.  It did not worked on a AWS EC virtual machine. At either the beginning or the second call, scheduling was stopped.  Moving to real PCs solved the problem.   ---  **Affects:** 4.3.4","closed","in: core,","spring-projects-issues","2016-11-24T17:38:50Z","2019-01-11T19:18:03Z"
"","19469","Early ""Constructor Injection"" beans ignore @Transactional silently when  using @EnableTransactionManagement [SPR-14903]","**[Christian Hersevoort](https://jira.spring.io/secure/ViewProfile.jspa?name=chersevoort)** opened **[SPR-14903](https://jira.spring.io/browse/SPR-14903?redirect=false)** and commented  For lak of a better title, please bear with me:  It is somehow possible for some ""Constructor Injection""-beans too ignore the `@Transactional` annotation silently because the beans get constructed BEFORE all ""infrastructure beans"" are constructed. In this case when using `@EnableTransactionManagement` ProxyTransactionManagementConfiguration.transactionAdvisor() is constructed too late. The biggest problem with this issue is that it happens completely silent. (You can't know for sure that the spring-context has created all the necessary proxy's). I think this is caused by an 'ordering' issue causing some ""Constructor Injection""-beans to be constructed too early in combination with `@EnableTransactionManagement`. I included an example showcasing the bug.  I observed this bug in combination with Apache CXF using the """" configuration-tag. (https://cxf.apache.org/docs/jax-ws-configuration.html). But I think this bug is not caused by CXF itself.  The context looks as following:  ```java @Configuration @EnableTransactionManagement public class SpringTransactionConfiguration  @Service @Transactional(propagation = Propagation.REQUIRED) public class ShouldHaveTransactionalImpl implements ShouldHaveTransactional // Interface without annotations  // Bean that breaks the @Transactional on ShouldHaveTransactional(Impl) public class BreakTransactionalFeature extends LoggingFeature {     // Constructor Injection     @Inject public BreakTransactionalFeature(final ShouldHaveTransactional shouldHaveTransactional) {...} }  @RequestMapping(""/test"") @RestController  public class TestController {     @Inject  private ShouldHaveTransactional shouldHaveTransactional;     // more methods } ```  And some XML:  ```xml                      ```  What I observe:  1. JaxWsProxyFactoryBeanDefinitionParser is called to construct the  2. BreakTransactionalFeature gets constructed 3. SpringTransactionConfiguration gets constructed 4. ProxyTransactionManagementConfiguration.transactionAdvisor()-bean gets constructed    1. All new beans now get the required `@Transactional-proxy` 5. TestController gets constructed 6. Observe that BreakTransactionalFeature on the TestController doesn't have a Proxy  What I expected:  1. SpringTransactionConfiguration gets constructed 2. ProxyTransactionManagementConfiguration.transactionAdvisor() gets constructed    1. All new beans now get the required `@Transactional-proxy` 3. JaxWsProxyFactoryBeanDefinitionParser is called to construct the  4. BreakTransactionalFeature gets constructed 5. TestController gets constructed 6. Observe that BreakTransactionalFeature has a Proxy  There is however a workaround by changing the BreakTransactionalFeature from constructor Injection to Field-injection. (yay!) Switching from `@EnableTransactionManagement` to XML also fixes the problem weirdly enough.  In my opinion all beans should get processed by the `@Transactional` or no beans get processed, so it is consistent. Even If this is a CXF bug, spring should still throw an exception or log an error and not fail silently. Do you agree?  I included an example showcasing the bug, https://github.com/ChristianHersevoort/spring-transactionmanager-bug . Clone repo and run ""mvn jetty:run""   ---  **Affects:** 4.3.4, 5.0 M3  **Reference URL:** https://github.com/ChristianHersevoort/spring-transactionmanager-bug","closed","status: bulk-closed,","spring-projects-issues","2016-11-13T20:22:55Z","2019-01-12T00:11:58Z"
"","19067","MockMvcResultMatchers.jsonPath(String).value() should have a matching method to declare the expected type [SPR-14498]","**[Chris Mercer](https://jira.spring.io/secure/ViewProfile.jspa?name=cmercer)** opened **[SPR-14498](https://jira.spring.io/browse/SPR-14498?redirect=false)** and commented  Java `Double` instances will sometimes be converted from ""12.0""  to ""12"" in JSON based on rules/Jackson configuration.  While reading the results back in testing, JsonPath will convert the ""JSON number"" to an `Integer`.  ```javascript String json = ""{ \""value\"" : 12}""; ```  ```java Double expectedValue = 12.0; MockMvcResultMatchers.jsonPath(""$.value"").value(expectedValue)  ... ... ... expected: but was: ```  There should be an additional ""value"" method that accepts the target type for JsonPath to convert to.  ```java Double expectedValue = 12.0; MockMvcResultMatchers.jsonPath(""$.value"").value(expectedValue, Double.class)  ```  ---  **Affects:** 4.2.5  **Issue Links:** - #21129 MockMvcResultMatchers.jsonPath(String).value() should have a matching method to declare the expected type  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2c2ce55f47cddd4e510cbbdefb34d7dde6144762, https://github.com/spring-projects/spring-framework/commit/7fdb892042750be534c4a677b2bdc01d7ede8bd8, https://github.com/spring-projects/spring-framework/commit/68463e2018eed926b7a9d1aaba7fe4215c51c0fd, https://github.com/spring-projects/spring-framework/commit/d09b0fe83af3d70a0333d6de53e2f1473ad85317","closed","type: enhancement,","spring-projects-issues","2016-07-20T21:07:13Z","2019-01-11T16:20:25Z"
"","19368","Content-Language not set for responses rendered with Message Converters [SPR-14802]","**[Chris DaMour](https://jira.spring.io/secure/ViewProfile.jspa?name=drdamour)** opened **[SPR-14802](https://jira.spring.io/browse/SPR-14802?redirect=false)** and commented  When Spring MVC works with a controller result that ends up with rendering a view, the Dispatch servlet sets the locale on the response, which in turn sets the contentLanguage and thus the response Content-Language header.  at this line https://github.com/spring-projects/spring-framework/blob/69116c2acc3881040686da594ced49cb9a964eb5/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java#L1228  The same thing does not happen when returning something that is handled by a MessageConverter as there is now mv by the time it gets to https://github.com/spring-projects/spring-framework/blob/69116c2acc3881040686da594ced49cb9a964eb5/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java#L1036  but even then the response has been flushed so it wouldn't work anyways.  Seems like this should be set somewhere during the processing of the http message converter.  ---  **Affects:** 4.2.7  **Issue Links:** - #19105 Add HttpHeaders getter and setter for Content-Language","closed","type: enhancement,","spring-projects-issues","2016-10-12T22:12:40Z","2019-01-11T17:30:25Z"
"","19012","MockMvcWebConnection doesn't work with async results [SPR-14442]","**[Chris DaMour](https://jira.spring.io/secure/ViewProfile.jspa?name=drdamour)** opened **[SPR-14442](https://jira.spring.io/browse/SPR-14442?redirect=false)** and commented  MockMvcWebConnection calls MockMVC.perform().andReturn().getResponse() but that doesn't work if you are doign async in your controllers, like returning a deferredResult or Single\ etc (probably CompletableFuture as well).  The mockmvc syntax for achieving a result is a bit clunky requiring two calls to perform()..maybe it could be made simpler there  also HtmlUnitRequestBuilder doesn't set async support to true   ---  **Affects:** 4.3.1","open","type: enhancement,","spring-projects-issues","2016-07-08T05:27:07Z","2016-07-12T21:36:15Z"
"","19355","RestController annotation supports Target of java.lang.annotation.ElementType.METHOD [SPR-14789]","**[Cheng Wei](https://jira.spring.io/secure/ViewProfile.jspa?name=cheng)** opened **[SPR-14789](https://jira.spring.io/browse/SPR-14789?redirect=false)** and commented  I want to compose my RestControllers in java configuration files. In this way, I don't have to expose all my RestControllers' dependencies as `@Beans`, as some of objects are only used by one controller. I don't want expose all my objects into spring context as managed beans, which is kind of unnecessary and pollution to me. But meanwhile, i do want compose my RestControllers and passing in dependencies, which allows maximal testability.  Thanks, Cheng   ---  **Affects:** 4.3.3, 5.0 M2","closed","status: bulk-closed,","spring-projects-issues","2016-10-10T04:30:21Z","2019-01-12T00:12:17Z"
"","19283","StringUtils.parseLocaleString(): does not parse locale string in java 7 for Serbian (Latin) [SPR-14718]","**[Chalitha Jayanath](https://jira.spring.io/secure/ViewProfile.jspa?name=chalitha85)** opened **[SPR-14718](https://jira.spring.io/browse/SPR-14718?redirect=false)** and commented  StringUtils.parseLocaleString() does not parse locale String in java 7 for Serbian (Latin).  Issue: The Locale.toString() method is different from Java 6 to Java 7, also the Locale Code (variants) are different as well hence its returning different values in Java 7.  StringUtils.parseLocaleString() unable to pass the Locale Serbian (Latin) local.  See the attached Error log  ---  **Affects:** 3.2.17, 4.2.7, 4.3.2  **Attachments:** - [Error.txt](https://jira.spring.io/secure/attachment/23552/Error.txt) (_8.69 kB_)  **Issue Links:** - #12435 Vulnerability in LocaleChangeInterceptor - #21192 Revise StringUtils.parseLocale(String) for proper handling of corner cases  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","in: core,","spring-projects-issues","2016-09-15T10:53:03Z","2019-01-11T17:13:15Z"
"","19131","Manually init for Scheduled [SPR-14562]","**[Carlos Rivas](https://jira.spring.io/secure/ViewProfile.jspa?name=crm86)** opened **[SPR-14562](https://jira.spring.io/browse/SPR-14562?redirect=false)** and commented  It is possible to launch a **`@Scheduled`** task with initialDelay, Cron and fixedRate. Sometimes,  could be useful to have a manually initialization for Spring **`@Scheduled`** tasks. The Job could be waiting until the programmer sends the manual init.  ```java @Component class Service {     @Scheduled(initMode=MANUAL/AUTO     public void task(){} } ```  **myService.task()** will invoke the **`@Scheduled`** job. At this moment, this could be done by reflection but I think it could be improved.   --- No further details from [SPR-14562](https://jira.spring.io/browse/SPR-14562?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2016-08-05T11:08:14Z","2019-01-12T02:25:25Z"
"","19599","Provide a way to filter merged PropertySources [SPR-15033]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-15033](https://jira.spring.io/browse/SPR-15033?redirect=false)** and commented  Currently upgrading to Platform Athens. Had to write the following code, to convert some duplicated xml configs overlapping some constructor injection (which 4.2 would do constructor injection plus xml config, but 4.3 complains, seems like bad code, but maybe an unintended regression)  ``` private static final Stream PROPERTY_KEYS = Stream.of( 		""hibernate.show_sql"", 		""hibernate.format_sql"", 		""hibernate.session_factory_name"", 		""hibernate.session_factory_name_is_jndi"", 		""hibernate.dialect"", 		""hibernate.cache.use_second_level_cache"", 		""hibernate.cache.use_query_cache"", 		""hibernate.cache.inifinispan.statistics"", 		""hibernate.cache.infinispan.cfg"", 		""hibernate.cache.infinispan.entity.cfg"", 		""hibernate.generate_statistics"", 		""hibernate.cache.use_structured_entries"", 		""hibernate.search.lucene_version"", 		""hibernate.search.default.worker.backend"", 		""hibernate.search.default.exclusive_index_use"", 		""hibernate.search.services.jgroups.clusterName"", 		""hibernate.search.services.jgroups.configurationFile"", 		""hibernate.search.default.directory_provider"", 		""hibernate.search.infinispan.configuration_resourcename"", 		""hibernate.search.default.worker.execution"", 		""hibernate.search.default.worker.thread_pool.size"" 	);  	private final Environment env;  	public JpaOracleConfig( final Environment env ) 	{ 		this.env = env; 	}  	private Map jpaPropertyMap() 	{ 		Map props = PROPERTY_KEYS.collect( Collectors.toMap( Function.identity(), env::getProperty ) ); 		props.put( ""javax.persistence.validation.mode"", ValidationMode.NONE.toString() ); 		props.put( ""hibernate.search.similarity"", IgnoreAllSimilarity.class.getName() ); 		props.put( ""hibernate.cache.region.factory_class"", InfinispanRegionFactory.class.getName() ); 		props.put( ""hibernate.id.new_generator_mappings"", Boolean.toString( false ) ); 		return props; 	}  	@Primary 	@Profile( ""!test"" ) 	@Bean( JpaConfig.EMF ) 	public LocalContainerEntityManagerFactoryBean entityManagerFactory( 		final DataSource dataSource, 		final JpaVendorAdapter jpaVendorAdapter ) 	{ 		LocalContainerEntityManagerFactoryBean emf = new DexLocalContainerEntityManagerFactoryBean( env ); 		emf.setDataSource( dataSource ); 		emf.setPersistenceUnitName( ""persistenceUnit"" ); 		emf.setPackagesToScan( com.myapp.JpaConfig.PACKAGES ); 		emf.setJpaVendorAdapter( jpaVendorAdapter ); 		emf.setJpaPropertyMap( this.jpaPropertyMap() ); 		return emf; 	} ```  The problem I'd like to see fixed is this  ``` Map props = PROPERTY_KEYS.collect( Collectors.toMap( Function.identity(), env::getProperty ) ); ```  I'd have rather written something like ``` Map map = env.filter( key -> StringUtils.startsWith(key, 'hibernate') )  ```, or some other iterable or stream, etc. Some interface on top of getting the individual property sources so you can do a filter, but ensure you've maintained the correct resolve order, and don't have to specify every key individually. ```    --- No further details from [SPR-15033](https://jira.spring.io/browse/SPR-15033?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2016-12-19T18:52:28Z","2019-01-12T00:11:44Z"
"","19509","Include expression string in SpelParseException [SPR-14942]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-14942](https://jira.spring.io/browse/SPR-14942?redirect=false)** and commented  ``` SPELL parsing a valid expression, there is still more data in expression ```  in this exception, examples of which can be found http://stackoverflow.com/q/29534883/206466  spring will give you the column number, the problem is if you have, say a Spring Data JPA query with multiple spring expressions, figuring out what, for example column 66 is can be painful.  It would be nice if the exception included the piece of string leading up to or after.  So it's easier to find in your code.  so instead of ``` Exception in thread ""main"" org.springframework.expression.spel.SpelParseException: EL1041E:(pos 6):  ```  the linked SO might have had ``` Exception in thread ""main"" org.springframework.expression.spel.SpelParseException: EL1041E:(pos 6) at ""ello"" ```  in my case the exception was near right parens, because I had a duplicate right parens but I had 4 different spel expressions in my query, all of them using T() to wrap an enum.  ---  **Affects:** 4.2.8  **Issue Links:** - #15566 SpEL: Make EvaluationException more informative with Expression  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ca10b1d6776f9f1cd591647a421f6724be00980, https://github.com/spring-projects/spring-framework/commit/14eba5034d40c04f0b7a8b2aa3d47e6fdcf31922","closed","type: enhancement,","spring-projects-issues","2016-11-23T22:26:25Z","2019-01-11T19:19:01Z"
"","19231","support for providing a path component on a package-info [SPR-14667]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-14667](https://jira.spring.io/browse/SPR-14667?redirect=false)** and commented  could have (pseudocode)  ``` com.xenoterracide.rpf.api.package-info @RequestMapping( path = 'api' )  com.xenoterracide.rpf.api  @RestController @RequestMapping( path = 'strings' ) class Strings {      @RequestMapping( path = ""/{id}"" }      String get( Long id ) {         ...      } } ```  this would allow us to call this by doing `/api/strings/1`  This is perhaps easier than adding additional servlet mappings or prepending static strings.  ---  **Issue Links:** - #20467 Handle `@RequestMapping` at package level (_**""is duplicated by""**_) - #20883 Ability to provide an external base path for controllers (_**""is superseded by""**_)  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-09-03T17:50:14Z","2019-01-13T05:22:27Z"
"","19229","Auto-resolve bean name conflicts for scanned classes [SPR-14665]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-14665](https://jira.spring.io/browse/SPR-14665?redirect=false)** and commented  so let's say I have two `WebSecurityConfig` classes which extend `WebSecurityConfigurerAdapter`. You will get a conflict like this  ``` nested exception is org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'webSecurityConfig' for bean class [com.xenoterracide.rpf.security.config.WebSecurityConfig] conflicts with existing, non-compatible bean definition of same name and class [com.xenoterracide.rpf.config.WebSecurityConfig] ```  this of course would be even worse if they were in jars you didn't control the source for (not that I've ever encountered that).  It occurs to me that I never need to use name injection for these. Perhaps spring could auto name them including the package name... or some other unique method (or perhaps do away with the name requirement?). Basically the idea is if you want a user friendly name to inject that you can still specify one.  This probably does break backwards compatibility so maybe it could be part of 5 if possible.  ---  **Issue Links:** - #15434 Reconsider whether to generally allow bean overriding by name","open","type: enhancement,","spring-projects-issues","2016-09-03T03:59:37Z","2019-01-11T18:22:29Z"
"","19205","Relative @Order [SPR-14639]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-14639](https://jira.spring.io/browse/SPR-14639?redirect=false)** and commented  maintaining order seem painful, especially across multiple jars. I'm thinking what might be nice is to be able to do something like.  ``` @Configuration @Order( group = WebSecurityConfigurerAdapter.ORDER ) // ORDER is an int class Foo extends WebSecurityConfigurerAdapter { }  @Configuration @Order( group = WebSecurityConfigurerAdapter.ORDER, after = {Foo.class} )  // could also allow afterBean = ""foo"", class Bar extend WebSecurityConfigurerAdapter { } ```  this way configurations that require ordering wouldn't have to maintain an explicit number but could be configured relative to each other. I'm not married to the exact annotation structure here, just trying to address the pain of exceptions like  ``` Order of 100 was already used on com.xenoterracide.rpf.security.AuthenticationTest$Config$$EnhancerBySpringCGLIB$$b5bff5c8@6e21c6ed ```    ---  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-08-29T14:00:56Z","2019-01-12T02:25:10Z"
"","19065","ClassUtils.getConstructorIfAvailable doesn't respect inner classes [SPR-14496]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-14496](https://jira.spring.io/browse/SPR-14496?redirect=false)** and commented  Building a utility,  using springs utilities with signature of  ```  public T instantiate( Class clazz, Objects... args ) ```  basically it tries to instantiate the constructor given the args using largely springs other utilities. Side note: if there's interest in adding this method to BeanUtils, or another class I can contribute it.  When I went to write a test for this method it failed, seems because my test used static inner classes and `ClassUtils.getConstructorIfAvailable(...` doesn't use `getDeclaredConstructor`.  referenced a pull request that fixes this, there's also a test embedded in its comments that I could apply presumably to the corresponding `ClassUtilsTest`.   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1118","closed","status: declined,","spring-projects-issues","2016-07-20T13:41:57Z","2019-01-12T16:34:05Z"
"","19564","Move to pure Asciidoctor for documentation [SPR-14997]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14997](https://jira.spring.io/browse/SPR-14997?redirect=false)** and commented  This should in fact: * remove docbook from the documentation toolchain * not generate the multi-page variant (only the single page is linked from the project page); we could use the [experimental multi-page support](https://github.com/asciidoctor/asciidoctor/issues/626), but this has many drawbacks * generate PDF, epub variants * allow us to update the reference documentation stylesheet and nav  Also, the documentation could use [the dedicated asciidoctor plugin](https://github.com/spring-io/spring-asciidoctor-extensions) to switch from java to xml config in the HTML backend.  ---  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/7447  **Issue Links:** - #20031 AsciiDoctor task does not support Rouge on MS Windows","closed","type: documentation,","spring-projects-issues","2016-12-08T21:11:03Z","2019-01-11T19:14:24Z"
"","19442","Wrong HandlerResultHandler select when dealing with exceptions [SPR-14876]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14876](https://jira.spring.io/browse/SPR-14876?redirect=false)** and commented  In some cases, the wrong `HandlerResultHandler` can be resolved when handling exceptions; this can happen only if the original handler and exception handler have different signatures:  ```java Publisher originalHandler() { ... }  @ExceptionHandler(MyCustomException.class) ResponseEntity> handleException() { ... } ```  In that case, the `ResponseBodyResultHandler` will be used when handling exceptions instead of the `ResponseEntityResultHandler`.   ---  **Affects:** 5.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/95abd18fea067b271bf50252b0a741c5850cab93","closed","type: bug,","spring-projects-issues","2016-11-03T16:13:40Z","2016-11-08T13:11:18Z"
"","19396","Support @ResponseStatus on reactive controller methods [SPR-14830]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14830](https://jira.spring.io/browse/SPR-14830?redirect=false)** and commented  `InvocableHandlerMethod` should look for `@ResponseStatus` annotations on reactive controllers and set the response status accordingly, only if the method invocation was done succesfully.   ---  **Reference URL:** https://github.com/bclozel/spring-boot-web-reactive/issues/40  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/00069572740906bf6ce5b83525753edc89e2db42","closed","type: enhancement,","spring-projects-issues","2016-10-20T20:50:06Z","2016-11-08T13:11:17Z"
"","19383","Improve VersionResourceResolver javadoc [SPR-14817]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14817](https://jira.spring.io/browse/SPR-14817?redirect=false)** and commented  The `pathPatterns` arguments should be relative to the resource handling pattern, and not absolute to the whole application. The current javadoc does not explain that part.   ---  **Affects:** 4.3.4, 5.0 M3","closed","type: task,","spring-projects-issues","2016-10-17T11:58:49Z","2016-12-21T11:54:09Z"
"","19366","Use StepVerifier from reactor-test and delete TestSubscriber [SPR-14800]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14800](https://jira.spring.io/browse/SPR-14800?redirect=false)** and commented  The reactor project created a new artifact `io.projectreactor.addons.reactor-test:3.0.3.BUILD-SNAPSHOT`, containing the `StepVerifier`.  The `spring-web-reactive` module should delete its custom `TestSubscriber` implementation and migrate all tests to `StepVerifier`.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8705df502dd2254e3b3af4ed61e3f3a2273c59af, https://github.com/spring-projects/spring-framework/commit/b4b7c278dfb17017cc176ca95525372b5a830dd1, https://github.com/spring-projects/spring-framework/commit/99a321085902ac002bf6ac918500f0d30d71cf0b","closed","type: task,","spring-projects-issues","2016-10-11T16:59:19Z","2016-11-08T13:11:19Z"
"","19320","Add @EnableWebReactive and WebReactiveConfigurerAdapter configuration model [SPR-14754]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14754](https://jira.spring.io/browse/SPR-14754?redirect=false)** and commented  Right now the web reactive server confguration is based on `WebReactiveConfiguration` with protected methods and one should create her own configuration by extending that class.  In order to allow more flexible configurations (in developers' applications, libraries and SPring Boot support), we could support an `@EnableWebReactive` annotation and `WebReactiveConfigurerAdapter` classes.   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1202  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/351cfb8eeff0eaa7ac8c1b4da80017d202445a06, https://github.com/spring-projects/spring-framework/commit/3533024ab87468a9edcd95e762458e6af9516ba9  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2016-09-26T14:50:38Z","2016-11-08T13:11:18Z"
"","19316","Close resources in WebClient and ClientHttpConnector [SPR-14750]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14750](https://jira.spring.io/browse/SPR-14750?redirect=false)** and commented  The lifecycle of `WebClient` and `ClientHttpConnector` should be improved: they should expose `Mono shutdown()` methods to allow the closing of the underlying resources.  The attached PR already improves the lifecycle of `ReactorClientHttpConnector` and avoids re-creating resource for each client call.   ---  **Affects:** 5.0 M2  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1184  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2016-09-26T12:30:48Z","2016-11-08T13:11:17Z"
"","19309","Remove RxJava 1.x variants of WebClient adapters [SPR-14743]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14743](https://jira.spring.io/browse/SPR-14743?redirect=false)** and commented  Remove `RxJava1ResponseExtractors`, `RxJava1ClientWebRequestBuilder`, `RxJava1ClientWebRequestBuilders` since those types should be directly adapted from `Flux`/`Mono`.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/11aa920785151c76c381f482e8b3810ccf59929f","closed","type: task,","spring-projects-issues","2016-09-23T12:07:06Z","2016-11-08T13:11:18Z"
"","19308","Review RxJava API surface in ReactiveAdapterRegistry [SPR-14742]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14742](https://jira.spring.io/browse/SPR-14742?redirect=false)** and commented  Remove all types/operators marked as `@Beta` or `@Experimental` in our RxJava support, since those types are not safe to be supported in libraries (see [`@Beta` javadoc](https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/annotations/Beta.java)).  ---  **Issue Links:** - #19390 Modify ReactiveAdapterRegistry to use official RxJava to RS adapter","closed","in: core,","spring-projects-issues","2016-09-23T12:00:33Z","2019-01-11T17:12:20Z"
"","19294","ScriptTemplateView should check template resource [SPR-14729]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14729](https://jira.spring.io/browse/SPR-14729?redirect=false)** and commented  The `ScriptTemplateView` class does not override the `checkResource` method. This means that, when configuring multiple template resolvers within an application, the `ScriptTemplateViewResolver` won't properly check if a template is available before trying to render it, thus throwing an exception. The next view resolvers in the chain are then never called.   ---  **Affects:** 4.2.7, 4.3.2, 5.0 M1  **Reference URL:** https://stackoverflow.com/questions/39547340/mustache-and-internalviewresolvers-spring-mvc  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-09-17T20:11:23Z","2016-09-19T15:46:50Z"
"","19251","Change default file extension in AppCacheManifestTransformer [SPR-14687]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14687](https://jira.spring.io/browse/SPR-14687?redirect=false)** and commented  The ""official"" file extension for appcache manifests is now `"".appcache""`. We should reflect that (breaking) change in the dedicated transformers.   ---  **Reference URL:** https://github.com/whatwg/html/commit/b3e6c2404739a6850afe389c487175f7e09a605c  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1881aa5b5bdc31a2609326bef7c80cf84a02af7d","closed","type: enhancement,","spring-projects-issues","2016-09-09T18:24:57Z","2016-09-21T12:13:12Z"
"","19227","Handle ResponseEntity with null bodies [SPR-14663]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14663](https://jira.spring.io/browse/SPR-14663?redirect=false)** and commented  Controller methods like the following throw `NullPointerExceptions` because the `ResponseEntityResultHandler` is trying to serialize the response entity body even though it's `null`:  ```java @RequestMapping(""/test"") public Mono> test() { 	return Mono.just(ResponseEntity.notFound().build()); } ```    ---  **Affects:** 5.0 M1  **Reference URL:** https://github.com/bclozel/spring-boot-web-reactive/issues/22  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/01bd8b9e017e36ac928fbc388069909aff95e5af","closed","type: bug,","spring-projects-issues","2016-09-02T21:00:53Z","2016-09-21T12:13:12Z"
"","19222","backport improvements made in SPR-14522 about check not modified [SPR-14657]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14657](https://jira.spring.io/browse/SPR-14657?redirect=false)** and commented  #19091 is adding support for check not modified in the reactive module. It's also making improvements to its MVC counterpart and fixing issues along the way.  This issue is about ""backporting"" those changes to the MVC implementation and making sure that the behavior is the same between `HttpEntityMethodProcessor` and `ServletWebRequest` implementations.  Also now that Servlet 2.5 is not a constraint anymore, we can now share more code between `HttpEntityMethodProcessor` and `ServletWebRequest`.  During that process, parts of this can be selectively backported to the 4.x branch, on a case by case basis.  ---  **Affects:** 5.0 M1  **Issue Links:** - #18168 Align existing checkNotModified support in Spring MVC with same on the reactive side (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2016-09-01T15:15:04Z","2019-01-11T18:23:50Z"
"","19217","Add RedirectAttributesMethodArgumentResolver to the default argument resolvers in ExceptionHandlerExceptionResolver [SPR-14651]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14651](https://jira.spring.io/browse/SPR-14651?redirect=false)** and commented  Without an instance of a `RedirectAttributesMethodArgumentResolver` configured in the list of default argument resolvers in `ExceptionHandlerExceptionResolver`, the following exception handling method signature is not possible:  ``` @ExceptionHandler(MyCustomException.class) public String handleMyCustomExceptions(MyCustomException exc, RedirectAttributes redirectAttributes) {         redirectAttributes.addFlashAttribute(""errorMessage"", ""My Custom error message"");         return ""redirect:/viewName""; } ```  ---  **Reference URL:** http://stackoverflow.com/questions/14961869/performing-a-redirect-from-a-spring-mvc-exceptionhandler-method/  **Issue Links:** - #19504 Allow PayloadArgumentResolver to only apply to `@Payload` annotated parameters","closed","type: enhancement,","spring-projects-issues","2016-08-31T16:51:36Z","2022-04-22T10:04:23Z"
"","19185","Inconsistent handling of ResponseStatusExceptions [SPR-14618]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14618](https://jira.spring.io/browse/SPR-14618?redirect=false)** and commented  Given a Controller like the following:  ``` @RequestMapping(value = ""/"", consumes=""application/json"") public Mono createUser(@RequestBody User user) ```  Sending a request with the wrong content type results in a HTTP 415, as expected.  ``` curl -H ""Content-Type:text/plain"" -X POST -D""wrong"" http://localhost:8080 ```  Now, deleting the `consumes` part of the method declaration yields a different result, with an HTTP 500 response:  ``` @RequestMapping(value = ""/"") public Mono createUser(@RequestBody User user) ```  It seems the `InvocableHandlerMethod` wraps the original `ResponseStatusException` in a `IllegalStateException`, making it impossible for the `ResponseStatusExceptionHandler` to do the right thing and update the HTTP response status. The next element in the pipeline handles that exception and marks the response as an HTTP 500.  ``` java.lang.IllegalStateException: Error resolving argument [0] of type [sample.web.reactive.BootStarter] on method [public reactor.core.publisher.Mono sample.web.reactive.HomeController.createUser(sample.web.reactive.User)] 	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.getArgError(InvocableHandlerMethod.java:154) ~[spring-web-reactive-5.0.0.BUILD-20160822.150545-100.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$null$28(InvocableHandlerMethod.java:132) ~[spring-web-reactive-5.0.0.BUILD-20160822.150545-100.jar:5.0.0.BUILD-SNAPSHOT] 	at reactor.core.publisher.FluxResume$ResumeSubscriber.onError(FluxResume.java:89) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.Operators$MonoSubscriber.onError(Operators.java:866) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.Operators.error(Operators.java:208) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoError.subscribe(MonoError.java:80) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoPeek.subscribe(MonoPeek.java:98) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoWhen$MonoWhenCoordinator.subscribe(MonoWhen.java:126) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoWhen.subscribe(MonoWhen.java:92) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoThenApply.subscribe(MonoThenApply.java:57) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:66) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoThenApply$MonoThenApplyManager.onNext(MonoThenApply.java:131) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:71) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:81) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:383) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:192) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:95) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:59) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:116) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:44) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoOtherwiseIfEmpty.subscribe(MonoOtherwiseIfEmpty.java:47) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoThenApply.subscribe(MonoThenApply.java:57) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoThenApply.subscribe(MonoThenApply.java:57) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoThenSupply$MonoConcatIgnoreManager.drain(MonoThenSupply.java:166) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.core.publisher.MonoThenSupply.subscribe(MonoThenSupply.java:54) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	at reactor.ipc.netty.http.NettyHttpServerHandler.channelRead(NettyHttpServerHandler.java:92) ~[reactor-netty-0.6.0.BUILD-20160822.170641-2.jar:na] 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:372) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:358) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:350) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:372) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:358) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:350) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1334) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:372) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:358) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:926) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:123) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:571) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:512) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:426) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:398) ~[netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:877) ~[netty-common-4.1.3.Final.jar:4.1.3.Final] 	at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_102] Caused by: org.springframework.web.server.UnsupportedMediaTypeStatusException: Request failure [status: 415, reason: ""Content type 'text/plain' not supported""] 	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.readBody(AbstractMessageReaderArgumentResolver.java:163) ~[spring-web-reactive-5.0.0.BUILD-20160822.150545-100.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.method.annotation.RequestBodyArgumentResolver.resolveArgument(RequestBodyArgumentResolver.java:81) ~[spring-web-reactive-5.0.0.BUILD-20160822.150545-100.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$resolveArguments$29(InvocableHandlerMethod.java:130) ~[spring-web-reactive-5.0.0.BUILD-20160822.150545-100.jar:5.0.0.BUILD-SNAPSHOT] 	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[na:1.8.0_102] 	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[na:1.8.0_102] 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[na:1.8.0_102] 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[na:1.8.0_102] 	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) ~[na:1.8.0_102] 	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[na:1.8.0_102] 	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) ~[na:1.8.0_102] 	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.resolveArguments(InvocableHandlerMethod.java:139) ~[spring-web-reactive-5.0.0.BUILD-20160822.150545-100.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:93) ~[spring-web-reactive-5.0.0.BUILD-20160822.150545-100.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.handle(RequestMappingHandlerAdapter.java:242) ~[spring-web-reactive-5.0.0.BUILD-20160822.150545-100.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.DispatcherHandler.invokeHandler(DispatcherHandler.java:119) ~[spring-web-reactive-5.0.0.BUILD-20160822.150545-100.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.DispatcherHandler.lambda$handle$1(DispatcherHandler.java:112) ~[spring-web-reactive-5.0.0.BUILD-20160822.150545-100.jar:5.0.0.BUILD-SNAPSHOT] 	at reactor.core.publisher.MonoThenApply$MonoThenApplyManager.onNext(MonoThenApply.java:97) ~[reactor-core-3.0.1.BUILD-20160822.145222-2.jar:na] 	... 38 common frames omitted ```  Is this expected behavior? Can we improve the current situation?   ---  **Affects:** 5.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/960d335c35a9aaacc71e8ac8afb7fb915dd6530d","closed","type: bug,","spring-projects-issues","2016-08-23T15:51:17Z","2016-09-21T12:13:12Z"
"","19179","Add ServerHttpRequest/HttpRequest MethodArgumentResolver [SPR-14612]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14612](https://jira.spring.io/browse/SPR-14612?redirect=false)** and commented  ---  **Affects:** 5.0 M1  **Reference URL:** https://github.com/bclozel/spring-boot-web-reactive/issues/17  **Issue Links:** - #19223 Add ServerWebExchange argument resolver (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2016-08-22T14:17:20Z","2019-01-11T18:10:44Z"
"","19151","NoSuchElementException when receiving a HTTP 401 with WebClient [SPR-14582]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14582](https://jira.spring.io/browse/SPR-14582?redirect=false)** and commented  When using the `WebClient` with the following example and the server returns HTTP 401:  ``` Mono> response = this.webClient                 .perform(peopleRequest().apply(httpBasic(""rob"",""invalid"")))                 .extract(response(Map.class)); ```  The client throws a `NoSuchElementException`:  ``` java.util.NoSuchElementException: Source was empty     at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:179)     at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)     at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:762)     at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:520)     at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:500)     at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:493)     at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)     at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:155)     at reactor.core.publisher.FluxSubscribeOn$SubscribeOnPipeline.onComplete(FluxSubscribeOn.java:136)     at reactor.core.publisher.Operators.complete(Operators.java:182)     at reactor.ipc.netty.common.NettyChannelHandler.subscribe(NettyChannelHandler.java:537)     at reactor.core.publisher.FluxSource.subscribe(FluxSource.java:59)     at reactor.core.publisher.FluxSubscribeOn$SourceSubscribeTask.run(FluxSubscribeOn.java:234)     at reactor.core.scheduler.ExecutorScheduler$ExecutorTrackedRunnable.run(ExecutorScheduler.java:136)     at io.netty.util.concurrent.SingleThreadEventExecutor.safeExecute(SingleThreadEventExecutor.java:451)     at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:418)     at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:401)     at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:877)     at java.lang.Thread.run(Thread.java:745) ```    ---  **Affects:** 5.0 M1  **Reference URL:** https://github.com/rwinch/spring-reactive-security","closed","type: bug,","spring-projects-issues","2016-08-11T21:50:12Z","2016-09-21T12:13:13Z"
"","19127","HttpEntityMethodProcessor should not throw IllegalArgumentExceptions for invalid If-None-Match headers [SPR-14559]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14559](https://jira.spring.io/browse/SPR-14559?redirect=false)** and commented  When an HTTP client sends a request with invalid validators in headers, like `If-None-Match:bar` instead of `If-None-Match:""bar""`, the `HttpHeaders` class is trying to parse the values and throws an `InvalidArgumentException` if they aren't valid.  In that case, `ServletWebRequest` and `HttpEntityMethodProcessor` should behave the same way and not try to further process the validators and just serve the resource as if it wasn't a conditional request.   ---  **Affects:** 4.3.2, 5.0 M1  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/6531  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d8fc13f6fc9076a46cd7b32e6cd4fa6d6198ac0e, https://github.com/spring-projects/spring-framework/commit/798d8668a48626003ef2d5aa52fe84e8ed3ffc55","closed","type: enhancement,","spring-projects-issues","2016-08-04T19:03:52Z","2016-09-19T15:55:26Z"
"","19112","HTTP request pattern matching refinements [SPR-14544]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14544](https://jira.spring.io/browse/SPR-14544?redirect=false)** and commented  ## Proposed changes  1. No ""?"" or ""\*\*"" allowed within the pattern:    ""/te?t"" or ""/user/**/something""  (/) Yes  2. Allow ""{\*foobar}"" and ""/\*\*"" at the end of the pattern to allow multiple segment matching until the end of the path:    ""/files/{\*path}""  (/) Yes  3. Not supporting ""\*"" in patterns and ensure use of named tokens like ""{name}"" in all cases:    ""/user/\*/repositories"" becomes ""/user/{name}/repositories""  (x) Those are interchangeable  4. Clarify that multiple tokens should be allowed within one segment only if separated by a literal    ""/user/{id}_{name}/  (/) Yes  These are relatively straight forward changes that would allow creating a grammar and a state machine for parsing patterns. Also, ensuring single segment tokens could help with creating a more efficient matching algorithm.  ## Additional changes for discussion  The following makes things a bit more complex and I'm not sure it's as useful but worth considering.  #### Keep constraints within the pattern or externalize those?  (x) Rejected because there is no tangible benefit besides readability and even that is subjective.  // keep everything within the pattern  ```java @RequestMapping(""/user/{id:[\\d\\.]+}"") ```  // externalized constraints in method params: http headers, request params, etc  ```java @RequestMapping(path=""/user/{id}"") String handler(@PathVariable(constraint=""[\\d\\.]+"") id, @RequestParam (required=true) param) ```  #### Add a new constraint based on Host  Quite useful for routers, applications managing several domains or sub-domains. Since you can map several domains on PWS, this is quite useful.  We can also define those as patterns like ""{subdomain}.example.org""  #### Have default values for Path variables  (x) Rejected because it creates multiple mappings (one with and one without), it does not work unless it's in the last segment, and arguably it should be expressed as a request parameter since the route does not match.  // In case the page path var is empty, instead of declaring a separate route  ```java @RequestMapping(path=""/blog/{page}"") String handler(@PathVariable(default=""1"") page) ```  ---  **Affects:** 5.0 M1  **Issue Links:** - #19521 Improve nested routes API (_**""is depended on by""**_) - #19811 PathPatternParser#parse method failed with java.lang.IndexOutOfBoundsException - #20090 Polish PathPattern parser - #18766 Wildcard mapping for path segments at the end of a `@RequestMapping` (_**""supersedes""**_)  2 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2016-07-30T01:36:20Z","2019-01-13T20:32:37Z"
"","19071","ClientHttpRequestInterceptor for WebClient [SPR-14502]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14502](https://jira.spring.io/browse/SPR-14502?redirect=false)** and commented  The `WebClient` should get a new extension point, an interception mechanism for client requests/responses. There's an existing `ClientHttpRequestInterceptor` class for `RestOperations`, `WebClient` should get its own as well as a `RequestExecutionHttpConnector` for request execution.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5b33e02fb441357f0160f24be89a7f61bbbad1a4","closed","type: enhancement,","spring-projects-issues","2016-07-21T13:31:24Z","2016-09-21T12:13:13Z"
"","19048","Avoid dependency on WebUtils for extracting file extension [SPR-14479]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14479](https://jira.spring.io/browse/SPR-14479?redirect=false)** and commented  When running a web reactive project without the servlet dependency, we're getting a NCDFE because `PathExtensionContentTypeResolver.extractKey` is calling `WebUtils.extractFullFilenameFromUrlPath` which itself is importing/using the Servlet API extensively.  ``` java.lang.NoClassDefFoundError: javax/servlet/ServletRequest 	at org.springframework.web.reactive.accept.PathExtensionContentTypeResolver.extractKey(PathExtensionContentTypeResolver.java:89) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.accept.AbstractMappingContentTypeResolver.resolveMediaTypes(AbstractMappingContentTypeResolver.java:91) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.accept.CompositeContentTypeResolver.resolveMediaTypes(CompositeContentTypeResolver.java:77) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.ContentNegotiatingResultHandlerSupport.getAcceptableTypes(ContentNegotiatingResultHandlerSupport.java:130) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.ContentNegotiatingResultHandlerSupport.selectMediaType(ContentNegotiatingResultHandlerSupport.java:102) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.method.annotation.AbstractMessageConverterResultHandler.writeBody(AbstractMessageConverterResultHandler.java:118) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler.handleResult(ResponseBodyResultHandler.java:119) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.DispatcherHandler.handleResult(DispatcherHandler.java:126) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.DispatcherHandler.lambda$handle$2(DispatcherHandler.java:113) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at reactor.core.publisher.MonoThenApply$MonoThenApplyManager.onNext(MonoThenApply.java:99) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.Operators$DeferredScalarSubscriber.complete(Operators.java:796) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.MonoThenApply$MonoThenApplyManager$SecondSubscriber.onNext(MonoThenApply.java:204) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.FluxResume$ResumeSubscriber.onNext(FluxResume.java:75) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:131) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1292) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:187) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1009) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.FluxResume$ResumeSubscriber.onSubscribe(FluxResume.java:70) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:100) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:172) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.MonoThenApply.subscribe(MonoThenApply.java:51) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:69) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.MonoThenApply$MonoThenApplyManager.onNext(MonoThenApply.java:133) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:71) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:391) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:192) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:95) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:59) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:116) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:45) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.MonoOtherwiseIfEmpty.subscribe(MonoOtherwiseIfEmpty.java:47) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.MonoThenApply.subscribe(MonoThenApply.java:58) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.MonoThenApply.subscribe(MonoThenApply.java:58) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:47) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.MonoThenSupply$MonoConcatIgnoreManager.drain(MonoThenSupply.java:169) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.core.publisher.MonoThenSupply.subscribe(MonoThenSupply.java:55) ~[reactor-core-3.0.0.BUILD-20160718.121732-24.jar:na] 	at reactor.io.netty.http.NettyHttpServerHandler.channelRead(NettyHttpServerHandler.java:91) ~[reactor-netty-0.5.0.BUILD-20160718.122522-17.jar:na] 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:372) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:358) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:350) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:372) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:358) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:350) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1334) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:372) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:358) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:926) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:123) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:571) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:512) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:426) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:398) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:877) [netty-all-4.1.3.Final.jar:4.1.3.Final] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_92] Caused by: java.lang.ClassNotFoundException: javax.servlet.ServletRequest 	at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_92] 	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_92] 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[na:1.8.0_92] 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_92] 	... 62 common frames omitted  ```  ---  **Affects:** 4.3.1, 5.0 M1  **Issue Links:** - #20341 UriUtils.extractFileExtension() does not properly handle all fragments  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b583aa1579f032a8921a27f4e99fb1d9dd6a225b, https://github.com/spring-projects/spring-framework/commit/adc595b5f17e7d858b1faf16ccf9d74918f0f761","closed","type: enhancement,","spring-projects-issues","2016-07-18T16:08:59Z","2019-01-11T16:22:36Z"
"","19006","Add Smile and CBOR Jackson data formats support [SPR-14435]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14435](https://jira.spring.io/browse/SPR-14435?redirect=false)** and commented  ---  **Reference URL:** https://github.com/FasterXML/jackson-dataformats-binary  **Issue Links:** - #19985 Add Jackson Smile support to WebFlux  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e8530c917e3f267ce82df0050d3f914552ac6145","closed","type: enhancement,","spring-projects-issues","2016-07-06T11:33:45Z","2019-01-11T16:26:39Z"
"","18978","Enforce UTF-8 encoding in SseEmitter [SPR-14407]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14407](https://jira.spring.io/browse/SPR-14407?redirect=false)** and commented  Even if the spec says that the charset is optional and that only UTF-8 is allowed for `""text/event-stream""` media types, we should still specify the encoding because some containers might choose `""ISO-8859-1""` by default.   ---  **Affects:** 4.2.6, 4.3 GA  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/6230  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a25c43f695b1e527cdc8d7c987534fcb1029bb2c","closed","type: enhancement,","spring-projects-issues","2016-06-27T14:56:28Z","2016-07-04T10:17:11Z"
"","18965","Improve warn logging in AbstractHandlerExceptionResolver [SPR-14392]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14392](https://jira.spring.io/browse/SPR-14392?redirect=false)** and commented  When the WARN logger is enabled, `AbstractHandlerExceptionResolver` currently logs the exception for **all** registered `ExceptionResolver`, which can lead to multiple logs for each exception and does not provide enough information on which resolver processed the current exception.  ---  **Affects:** 4.3 GA  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/2176  **Issue Links:** - #17858 InvocableHandlerMethod.getMethodArgumentValues() failure should lead to warn-level logging by default  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0345d734e63e33096ec91b8ef62b6868b0e5fc36","closed","type: enhancement,","spring-projects-issues","2016-06-23T09:18:22Z","2019-01-11T15:46:42Z"
"","18836","Allow Resources resolved through the resource chain to update the response [SPR-14264]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14264](https://jira.spring.io/browse/SPR-14264?redirect=false)** and commented  Currently the resource chain is resolving and decorating resources with specific types such as `EncodedResource` and `VersionedResource`. The `ResourceHttpRequestHandler` is checking for those types when serving resources and ""manually"" augment the HTTP response using information provided by those resources.  By as described in [this Spring Boot issue](https://github.com/spring-projects/spring-boot/issues/5876), composing resource resolvers can lead to issues.  If possible, we should add a common mechanism for the resource handling pipeline to update the HTTP response when serving resources. Note that this mechanism should be cache-friendly (the `CachingResourceResolver` can cache resolved resources so resolvers aren't called for each request).   ---  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/5876  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ccb3c44dbcd4ab4741aec7b366ed43efa2f90b44, https://github.com/spring-projects/spring-framework/commit/27bbb73583c6b6c030c6628656921fef600c46aa, https://github.com/spring-projects/spring-framework/commit/4588b6c9f43b0f7608088df9b7ba6e97217b7c0c  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-05-10T21:18:24Z","2016-09-21T12:13:13Z"
"","19423","Add PATCH HTTP operation to RestTemplate [SPR-14857]","**[Bradley Buda](https://jira.spring.io/secure/ViewProfile.jspa?name=bradleybuda)** opened **[SPR-14857](https://jira.spring.io/browse/SPR-14857?redirect=false)** and commented  It would be useful to me and my team if RestTemplate supported the HTTP PATCH method on equal footing with the other common HTTP methods (GET, PUT, POST, DELETE). My team's RESTful APIs use PATCH extensively, as do many public REST APIs (Salesforce, Github, and Google Drive off the top of my head). I am willing to do the implementation of this, but I wanted to reach out and see if there was interest before I began work / send a PR.  I understand that PATCH is possible via the `exchange` / `execute` methods, but their signatures are much more verbose and less ergonomic for simple cases.  The APIs would follow the same structure as the POST APIs, since the [relevant RFC](https://tools.ietf.org/html/rfc5789) seems to indicate that PATCH can return a response (in my team we return 204 No Content from successful PATCHes, but that might not be the case for others). I would also submit a PR to spring-boot for a similar change in TestRestTemplate (my true goal ;))  ---  **Issue Links:** - #19540 Introduce patchForObject/patchForLocation to RestTemplate/RestOperations (_**""is duplicated by""**_) - #11685 Proper handling of parameterized types in RestTemplate - #16374 Provide builders for HttpEntity and ResponseEntity - #11634 Introduce HttpEntity  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dbe81bef52e1bcaf802663d2bb3236c69f922512, https://github.com/spring-projects/spring-framework/commit/594f4d56b8bdb53ebc1b07e38c70ea954d2a8d1e  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2016-10-28T00:12:47Z","2019-01-11T17:28:07Z"
"","19218","Add documentation about URI variables in AntPathMatcher [SPR-14652]","**[Bob Tiernay](https://jira.spring.io/secure/ViewProfile.jspa?name=btiernay)** opened **[SPR-14652](https://jira.spring.io/browse/SPR-14652?redirect=false)** and commented  Currently, there is no mention of URI variables / regexes in `AntPathMatcher`:  ``` PathMatcher implementation for Ant-style path patterns.  Part of this mapping code has been kindly borrowed from Apache Ant.  The mapping matches URLs using the following rules: ? matches one character * matches zero or more characters ** matches zero or more directories in a path ... ```  However, more complicated expressions are possible using regexes within braces:  ``` {name}/submissions/{projectKey:.+}/files/{fileName:.+}/report ```  This deserves mentioning because it is a very powerful feature that allows one to do things like negative lookahead assertions, etc.  Also, it might be nice to add Javadocs to `ViewControllerRegistry#addViewController` and `ResourceHandlerRegistry#addResourceHandler` that mention that regexes are supported. I would expect a lot of Spring MVC users use these methods and are unaware that this is possible (like myself). This could free users from having to bring in third party libs like the urlrewrite filter for a lot of use cases. A common example is HTML5 pushState mode with an  angular SPA:  ```java registry.addViewController(""/**/{path:[^.]+}"").setViewName(""forward:/index.html""); ```  which maps all URLs to index.html.  Lastly, it may be worth reviewing the `isPattern` method to ensure all patterns are covered:  ```java @Override public boolean isPattern(String path) {      return (path.indexOf('*') != -1 || path.indexOf('?') != -1); } ```  Notice in the above there is no check for a brace character which is one of the valid metacharacters. My concern is that this may not cover patterns such as the following which neither contain '*' nor '?':  ``` /{path:[^.]+} ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a8ba065a6e6a2f435fdf29748d21fd416731370b, https://github.com/spring-projects/spring-framework/commit/f3dae0c9ad76f3c4a7354464a50ba31d30fcdb77","closed","type: task,","spring-projects-issues","2016-09-01T11:49:07Z","2016-09-19T15:55:27Z"
"","19201","Allow class literals on @Bean methods [SPR-14634]","**[Bob Tiernay](https://jira.spring.io/secure/ViewProfile.jspa?name=btiernay)** opened **[SPR-14634](https://jira.spring.io/browse/SPR-14634?redirect=false)** and commented  Assuming a bean such as:  ```java class MyBeanImpl implements MyBean {   @Autowired   MyBeanImpl(Dep1 dep1, Dep2 dep2, Dep3 dep3, Dep4 dep4, Dep5 dep5, Dep6 dep6, ...) {     ...   }   ... } ```  It would be very convenient to allow the following:  ```java @Bean(class =  v.class) public MyBean myBean(MyBeanImpl value) {   // Potentially configure other stuff   ...   return value; } ```  or perhaps:  ```java public MyBean myBean(@Bean MyBeanImpl value) {   // Potentially configure other stuff   ...   return value; } ```  to mean:  ```java @Autowired GenericApplicationContext context;  @Bean public MyBean myBean() {   MyBeanImpl value = context.getBeanFactory().createBean(MyBeanImpl.class);     // Potentially configure other stuff   ...   return value; } ```  This is very succinct when when classpath scanning is inappropriate and the bean uses constructor injection with many dependencies. It relieves the programmer of having to manually wire all dependencies in such a method. As a point of reference, something similar to this is possible in Guice:  ```java public class MyModule extends AbstractModule {   @Override    protected void configure() {     bind(MyBean.class).to(MyBeanImpl.class);   } } ```    ---  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-08-28T13:56:47Z","2019-01-12T02:25:13Z"
"","19417","ResourceHttpRequestHandler no longer works as prototype bean [SPR-14851]","**[Bernhard Frauendienst](https://jira.spring.io/secure/ViewProfile.jspa?name=oxc)** opened **[SPR-14851](https://jira.spring.io/browse/SPR-14851?redirect=false)** and commented  After upgrading from 4.3.1 to 4.3.3, accessing a prototype bean ResourceHttpRequestHandler triggers a NullPointerException when the handler tries to access the pathExtensionStrategy that is created in afterSingletonsInstantiated.  This is caused by the fix for #19146.  Such a use-case breakage on a minor version upgrade is very inconvenient, even more so when it only is detected at runtime.  This is also somewhat unexpected behaviour. One might expect this method to be called on every bean that is created after the singleton instantiation phase. See #17512 for a related issue wrt lazy-init beans.  ---  **Affects:** 4.3.3  **Issue Links:** - #19146 When favorPathExtension is false ResourceHttpRequestHandler serves resources with different content type in 4.3 compared to 4.2 - #17512 SmartInitializingSingleton.afterSingletonsInstantiated() is not called for lazy beans  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2016-10-26T14:26:05Z","2019-01-11T17:27:57Z"
"","19523","Startup performance differences between Spring Boot versions and main class vs jar file formats [SPR-14956]","**[Bernd Götz](https://jira.spring.io/secure/ViewProfile.jspa?name=bernd)** opened **[SPR-14956](https://jira.spring.io/browse/SPR-14956?redirect=false)** and commented  While I was reproducing what Josh Long was presenting in https://www.infoq.com/presentations/spring-boot-cloud-case-study, I observed some not so nice performance differences between Spring Boot 1.3.5 and 1.4.2, and the second dimension, main class vs jar file execution. I've measured the differences for all four services, config, eureka, reservation service and reservation client. Please find the numbers below.  I'm actually seeing similar performance numbers when running our Spring Boot applications in Websphere Liberty. It seems to be connected to how the containers are taking up the involved libraries. I would not complain too much but we have to use Liberty for our local development because we depend on a Liberty/Websphere feature for our security integration for backend services. That's why we can't fall back to main class execution.  Moreover, it will always run as a war file (and maybe sometimes in the future as a jar file) in CloudFoundry, so any slow start there is also not very nice.  Any insights on this? Is this a known issue? Any idea what the root cause could be?  Regards, Bernd  Numbers:  config-service:  Spring Boot 1.3.5/Brixton.RELEASE: main class: Started ConfigServiceApplication in 3.191 seconds (JVM running for 3.564)  jar: Started ConfigServiceApplication in 5.424 seconds (JVM running for 6.105) Started ConfigServiceApplication in 5.89 seconds (JVM running for 6.574)  -> factor 1 to 2  Spring Boot 1.4.2/Camden.SR2: main class: Started ConfigServiceApplication in 4.178 seconds (JVM running for 4.715) Started ConfigServiceApplication in 4.192 seconds (JVM running for 4.598)  jar: Started ConfigServiceApplication in 17.426 seconds (JVM running for 19.412) Started ConfigServiceApplication in 16.899 seconds (JVM running for 18.793)  -> factor 4  eureka-service:  Spring Boot 1.3.5/Brixton.RELEASE: main class: Started EurekaServiceApplication in 5.324 seconds (JVM running for 5.776) Started EurekaServiceApplication in 5.308 seconds (JVM running for 5.737)  jar: Started EurekaServiceApplication in 10.352 seconds (JVM running for 11.322) Started EurekaServiceApplication in 9.605 seconds (JVM running for 10.47)  -> factor 2  Spring Boot 1.4.2/Camden.SR2: main class: Started EurekaServiceApplication in 6.223 seconds (JVM running for 6.695) Started EurekaServiceApplication in 5.976 seconds (JVM running for 6.501)  jar: Started EurekaServiceApplication in 30.074 seconds (JVM running for 32.498) Started EurekaServiceApplication in 29.58 seconds (JVM running for 31.99)  -> factor 5 to 6  reservation-service:  Spring Boot 1.3.5/Brixton.RELEASE: main class: Started ReservationServiceApplication in 14.975 seconds (JVM running for 15.457) Started ReservationServiceApplication in 13.45 seconds (JVM running for 13.989)  jar: Started ReservationServiceApplication in 25.705 seconds (JVM running for 26.753) Started ReservationServiceApplication in 27.056 seconds (JVM running for 28.273)  -> factor 2  Spring Boot 1.4.2/Camden.SR2: main class: Started ReservationServiceApplication in 16.472 seconds (JVM running for 17.012) Started ReservationServiceApplication in 15.042 seconds (JVM running for 15.517)  jar: Started ReservationServiceApplication in 83.614 seconds (JVM running for 86.423) Started ReservationServiceApplication in 82.873 seconds (JVM running for 85.814)  -> factor  5 !!!  reservation-client:  Spring Boot 1.3.5/Brixton.RELEASE: main class: Started ReservationClientApplication in 11.776 seconds (JVM running for 12.24) Started ReservationClientApplication in 12.212 seconds (JVM running for 12.699)  jar: Started ReservationClientApplication in 22.645 seconds (JVM running for 23.862) Started ReservationClientApplication in 21.705 seconds (JVM running for 22.945)  -> factor 2  Spring Boot 1.4.2/Camden.SR2: main class: Started ReservationClientApplication in 15.828 seconds (JVM running for 16.405) Started ReservationClientApplication in 15.606 seconds (JVM running for 16.149)  jar: Started ReservationClientApplication in 73.462 seconds (JVM running for 76.298) Started ReservationClientApplication in 72.955 seconds (JVM running for 75.935)  -> factor 5 !!!   --- No further details from [SPR-14956](https://jira.spring.io/browse/SPR-14956?redirect=false)","closed","status: invalid,","spring-projects-issues","2016-11-26T20:15:57Z","2019-01-12T05:21:33Z"
"","19044","Add  to Spring Tags [SPR-14475]","**[Ben Markham](https://jira.spring.io/secure/ViewProfile.jspa?name=bmarkham)** opened **[SPR-14475](https://jira.spring.io/browse/SPR-14475?redirect=false)** and commented  It would be great to make it possible to just map a file to JPA when filing out a form by using the tag.   ---  **Affects:** 5.x Backlog","closed","status: bulk-closed,","spring-projects-issues","2016-07-18T06:00:49Z","2019-01-12T00:13:27Z"
"","18898","Content Type mapping falls back to text/html when serving static resources like yaml files [SPR-14326]","**[Ben Madore](https://jira.spring.io/secure/ViewProfile.jspa?name=madorb)** opened **[SPR-14326](https://jira.spring.io/browse/SPR-14326?redirect=false)** and commented  We are using Spring Boot for a restful json services application and are exposing [Swagger UI](https://github.com/swagger-api/swagger-ui) by copy their js and html as well as our yaml swagger specification into `src/main/webapp/swagger-ui`.  This was working fine up until RC1, but as of RC1 spring started returning a new header of `Content-Type: text/html;charset=UTF-8` when serving the swagger-api.yaml file which causes swagger-ui and other tooling to fail. I'm unsure what changed, but i don't think the default content negotiation should be set to text/html if not able to be determined.  ---  **Affects:** 4.3 RC1, 4.3 RC2  **Issue Links:** - #18233 ResourceHttpRequestHandler does not take into account mime types configured in WebMvcConfigurerAdapter  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/76ac8b08f621d880621100a1e6c0eda25907be17","closed","status: declined,","spring-projects-issues","2016-06-02T19:29:22Z","2019-01-12T16:34:18Z"
"","18901","After-completion callback not triggered for custom Throwable subclass [SPR-14329]","**[Ben Heilers](https://jira.spring.io/secure/ViewProfile.jspa?name=benheilers)** opened **[SPR-14329](https://jira.spring.io/browse/SPR-14329?redirect=false)** and commented  Our team observed this, although I admit it is probably a rare situation.  To summarize, the JDBC connection is never released if: * an exception is thrown in the controller method * a second exception is thrown during handling of the first exception * attempting to log that second exception causes a third exception to be thrown * the third exception directly extends Throwable, not Exception or Error  I reproduced it with just small changes to the project at https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-data-jpa.  First, I changed the line in the controller method from ""Bath"" to ""Foo"", below:  ```java @GetMapping(""/"") @ResponseBody @Transactional(readOnly = true) public String helloWorld() {     return this.cityService.getCity(""Foo"", ""UK"").getName(); } ```  This causes getCity() to return null, so the method throws an NPE.  So far, everything is okay, the exception is [caught here](https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java#L972,L974), and the JDBC connection is still released within the call to triggerAfterCompletion().  But we really wanted a custom response HTTP status of 400 instead of 500, so we added:  ```java @ResponseStatus(value=HttpStatus.BAD_REQUEST) @ExceptionHandler(Exception.class) public void handleException(Exception ex) {    //TODO: some more handling logic to come later } ```  Now the status is 500, but we still wanted some special logic in that exception handler for adding a log message.  Eventually, we observed now that in some scenarios that handling logic ends up throwing an second exception while trying to handle the exception thrown in the controller method.  This isn't so bad, because secondary exceptions thrown during exception handling are caught and [handled here](https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java#L377,L382).  But we observed that the second exception is a custom class, that had an override of some of the methods in Throwable ... and those overrides in turn threw a third exception.  This also wouldn't be so bad by itself, because there is [logic here](https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java#L982,L988) to still end up unreleasing the JDBC connection in that scenario, as long as the exception sublcasses either Exception or Error.  Unfortunately, we found in our case this custom exception class was directly extending Throwable.  This means the JDBC connection **is not** released.  The below is a bit contrived, but it proves the point:  ```java 	@ResponseStatus(value=HttpStatus.BAD_REQUEST) 	@ExceptionHandler(Exception.class) 	public void handleException(Exception ex) { 		throwUnchecked(new MyException()); 	}  	public static class MyException extends Throwable { 		@Override 		public String getMessage() { 			SampleController.throwUnchecked(this); 			return """"; 		} 	}  	public static void throwUnchecked(Throwable e) { 		SampleController.throwAny(e); 	}  	@SuppressWarnings(""unchecked"") 	private static  void throwAny(Throwable e) throws E { 		throw (E) e; 	} ```  While I admit this is probably a rare edge case, this is actually a security vulnerability, since unreleased connections can be used as an attack vector.  And there is nothing inapprorpiate about subclassing Throwable, or overriding methods like getMessage() to do custom logic there.  **NOTE:** if you are on spring 4.3, the logging level is debug, where [it used to be error](https://github.com/spring-projects/spring-framework/commit/cdfcc23b6f1424f04e8273b3aa69fe185fb73dde), so this whole issue is only reproducible if you also add the following to resources/application.properties:  ``` logging.level.org.springframework.web.servlet.mvc.method.annotation=debug ```  ---  **Affects:** 4.2.6, 4.3 RC2  **Issue Links:** - #15732 `@ExceptionHandler` cannot handler java.lang.Error despite the annotation accept ? extends Throwable - #18895 Consistent Error handling in MessageChannel implementations - #19560 Clarify rollback-on consistency between DefaultTransactionAttribute and TransactionTemplate  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","type: bug,","spring-projects-issues","2016-06-03T18:46:38Z","2019-01-13T05:25:34Z"
"","19241","Allow declaring bean stereotypes using Java configuration [SPR-14677]","**[Behrang Saeedzadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=behrangsa)** opened **[SPR-14677](https://jira.spring.io/browse/SPR-14677?redirect=false)** and commented  It would be nice if we could declare that a given bean has a particular stereotype using Java based configuration. For example:  ```java @Bean @Service public TwitterService twitterService() {    // ... }  @Bean @Repository public TweetRepository tweetRepository() {    // ... } ```  or  ```java @Service public TwitterService twitterService() {    // ... } ```  or  ```java @Bean(stereotype = Service.class) public TwitterService twitterService() {    // ... } ```  ---  No further details from [SPR-14677](https://jira.spring.io/browse/SPR-14677?redirect=false)","open","status: bulk-closed,","spring-projects-issues","2016-09-08T05:16:35Z","2019-06-28T10:34:30Z"
"","19197","Potential AsyncConfigurer bug or mis-interpreted/missing documentation [SPR-14630]","**[Behrang Saeedzadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=behrangsa)** opened **[SPR-14630](https://jira.spring.io/browse/SPR-14630?redirect=false)** and commented  In the following small program, the `AsyncConfigurer` methods are invoked after `asyncBean` is injected and not only `asyncBean` doesn't use the custom executor, but it doesn't even use the default out of the box executor (i.e. `SimpleAsyncTaskExecutor`), hence its async method runs synchronously on the main thread:  ``` @SpringBootApplication @EnableAsync public class AsyncConfigurerDemo implements AsyncConfigurer, CommandLineRunner {  	@Autowired 	private IAsyncBean asyncBean;  	public static void main(String[] args) { 		SpringApplication.run(AsyncConfigurerDemo.class, args); 	}  	@Override     public Executor getAsyncExecutor() { 		System.out.printf(""%d - AsyncConfigurerDemo.getAsyncExecutor\n"", Counter.getAndIncrement()); 		return new SimpleAsyncTaskExecutor(""AsyncConfigurerDemo-""); 	}  	@Override 	public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() { 		System.out.printf(""%d - AsyncConfigurerDemo.getAsyncUncaughtExceptionHandler\n"", Counter.getAndIncrement()); 		return (ex, method, params) -> ex.printStackTrace(); 	}   	@Override 	public void run(String... args) throws Exception { 		System.out.printf(""%d - AsyncConfigurerDemo.run\n"", Counter.getAndIncrement()); 		asyncBean.whoAmI(); 	} }  @Component public class AsyncBean implements IAsyncBean {      @Override     @Async     public void whoAmI() {         final String message =                 String.format(""My name is %s and I am running in thread [%s]"",                         getClass().getSimpleName(),                         Thread.currentThread().getName()                 );          System.out.println(message);     }      @PostConstruct     public void setup() {         System.out.printf(""%d - AsyncBean.setup\n"", Counter.getAndIncrement());     } } ```  When running this program, it outputs:  ``` 0 - AsyncBean.setup 1 - AsyncConfigurerDemo.getAsyncExecutor 2 - AsyncConfigurerDemo.getAsyncUncaughtExceptionHandler 3 - AsyncConfigurerDemo.run My name is AsyncBean and I am running in thread [main] ```  As it can be seen, `asyncBean`'s `whoAmI()` method is running in the main thread.  If I change the `AsyncConfigurerDemo` and make it not implement `AsyncConfigurer`, the `whoAmI()` method runs asynchronously:  ``` @SpringBootApplication @EnableAsync public class AsyncConfigurerDemo implements CommandLineRunner {  	@Autowired 	private IAsyncBean asyncBean;  	public static void main(String[] args) { 		SpringApplication.run(AsyncConfigurerDemo.class, args); 	}  	@Override 	public void run(String... args) throws Exception { 		System.out.printf(""%d - AsyncConfigurerDemo.run\n"", Counter.getAndIncrement()); 		asyncBean.whoAmI(); 	} } ```  Which outputs:  ``` 0 - AsyncBean.setup 1 - AsyncConfigurerDemo.run My name is AsyncBean and I am running in thread [SimpleAsyncTaskExecutor-1] ```  This looks like a bug to me. Especially, given Spring's bean lifecycle:  1. Loads bean definitions (bean instances not created yet) 2. Post processes bean definitions (bean instances not created yet) 3. Instantiates beans () 4. Calls setter methods 5. Invokes beans post processors 6. Makes beans ready for use  I was expecting the configurer methods to run before the 3rd phase. However, it looks like the bean instances are created and their `@PostConstruct` methods executed before the `AsyncConfigurer` extension points are executed.  Could you please confirm if this is a bug or if this behaviour is as it should be? And if the behaviour is correct, is it documented somewhere?  I have attached the source code to this issue. There are two main classes: `org.behrang.bugreports.scenario1.AsyncConfigurerDemo` and `org.behrang.bugreports.scenario2.AsyncConfigurerDemo`.   ---  **Affects:** 4.3.2  **Reference URL:** http://stackoverflow.com/questions/30730185/spring-async-doesnt-work-when-implements-asyncconfigurer/39158776  **Attachments:** - [enable-async-bug.zip](https://jira.spring.io/secure/attachment/23520/enable-async-bug.zip) (_83.86 kB_)","closed","in: core,","spring-projects-issues","2016-08-26T09:07:47Z","2019-01-12T05:22:07Z"
"","19539","Spring websocket client cannot connecting on some computers [SPR-14973]","**[Batbayar Bazarragchaa](https://jira.spring.io/secure/ViewProfile.jspa?name=digz6666)** opened **[SPR-14973](https://jira.spring.io/browse/SPR-14973?redirect=false)** and commented  Spring websocket client is not connecting to Spring Stomp websocket server on some computers and I enabled trace logging but there's no clear error message.  Websocket client: tyrus standalone client version 1.13  My test code:  ```java public class AstWebsocketClient {      private static final Logger LOGGER = Logger.getLogger(AstWebsocketClient.class.getName());     private final WebSocketStompClient stompClient;     private ThreadPoolTaskScheduler taskScheduler;      private AstWebsocketSessionHandler sessionHandler;     private CountDownLatch connectLatch;      public AstWebsocketClient() {         LOGGER.info(""[ast websocket] initializing..."");         WebSocketClient webSocketClient = new StandardWebSocketClient();         stompClient = new WebSocketStompClient(webSocketClient);         //stompClient.setMessageConverter(new StringMessageConverter());         stompClient.setMessageConverter(new MappingJackson2MessageConverter());         LOGGER.info(""[ast websocket] initialized."");     }      public void connect() {         LOGGER.info(""[ast websocket] connecting..."");         connectLatch = new CountDownLatch(1);          taskScheduler = new ThreadPoolTaskScheduler();         taskScheduler.afterPropertiesSet();         taskScheduler.schedule(new Runnable() {             @Override             public void run() {                 try {                     heartbeat();                 } catch (InterruptedException ex) {                     LOGGER.log(Level.SEVERE, ""[ast websocket] heartbeat failed"");                 }             }         }, new CronTrigger(""0/10 * * * * ?""));         stompClient.setTaskScheduler(taskScheduler); // for heartbeats          sessionHandler = new AstWebsocketSessionHandler(this, connectLatch);          stompClient.connect(""ws://127.0.0.1:8080/gis-server/websocket"", sessionHandler);         stompClient.setAutoStartup(true);         stompClient.start();         LOGGER.info(""[ast websocket] connected."");     }      public void disconnect() {         LOGGER.info(""[ast websocket] disconnecting..."");         try {             connectLatch.await();         } catch (InterruptedException e) {         }          taskScheduler.destroy();         sessionHandler.getSession().disconnect();         LOGGER.info(""[ast websocket] disconnected."");     }      public void login(LoginRequest loginRequest) throws InterruptedException {         LOGGER.log(Level.INFO, ""[ast websocket] Loggin in: {0}"", loginRequest.getUsername());         connectLatch.await();          if (sessionHandler.getSession() != null) {             sessionHandler.getSession().send(""/app/login"", loginRequest);             LOGGER.log(Level.INFO, ""[ast websocket] Sent login: {0}"", loginRequest.getUsername());              // subscribe to online user topic             sessionHandler.getSession().subscribe(""/topic/online-user"", new StompFrameHandler() {                 @Override                 public Type getPayloadType(StompHeaders headers) {                     return OnlineUserList.class;                 }                  @Override                 public void handleFrame(StompHeaders headers, Object payload) {                     //LOGGER.log(Level.INFO, ""[ast websocket] online user count frame: {0}"", payload);                     if (payload instanceof OnlineUserList) {                         OnlineUserList onlineUserList = (OnlineUserList) payload;                         LOGGER.log(Level.INFO, ""[ast websocket] online users: {0}"", onlineUserList.getCount());                     }                 }             });         } else {             LOGGER.log(Level.SEVERE, ""[ast websocket] Login request failed: {0}"", loginRequest.getUsername());         }     }      public void logout(String username) throws InterruptedException {         LOGGER.log(Level.INFO, ""[ast websocket] Loggin out: {0}"", username);         connectLatch.await();         sessionHandler.getSession().send(""/app/logout"", username);         LOGGER.log(Level.INFO, ""[ast websocket] Logged out: {0}"", username);     }      private void heartbeat() throws InterruptedException {         connectLatch.await();         try {             LOGGER.log(Level.INFO, ""[ast websocket] heartbeat"");         } catch (NullPointerException | IllegalStateException e) {             LOGGER.log(Level.INFO, ""[ast websocket] heartbeat error: {0}"", e);         }     } } ```  ```java import java.util.concurrent.CountDownLatch; import java.util.logging.Level; import java.util.logging.Logger; import javax.swing.JOptionPane; import org.springframework.messaging.simp.stomp.ConnectionLostException; import org.springframework.messaging.simp.stomp.StompCommand; import org.springframework.messaging.simp.stomp.StompHeaders; import org.springframework.messaging.simp.stomp.StompSession; import org.springframework.messaging.simp.stomp.StompSessionHandlerAdapter;  /**  *  * @author MethoD  */ public class AstWebsocketSessionHandler extends StompSessionHandlerAdapter {      private static final Logger LOGGER = Logger.getLogger(AstWebsocketSessionHandler.class.getName());      private final AstWebsocketClient astWebsocketClient;     private final CountDownLatch connectLatch;      private StompSession session;      public AstWebsocketSessionHandler(AstWebsocketClient astWebsocketClient, CountDownLatch connectLatch) {         this.astWebsocketClient = astWebsocketClient;         this.connectLatch = connectLatch;     }      @Override     public void afterConnected(StompSession session, StompHeaders connectedHeaders) {         LOGGER.log(Level.INFO, ""[ast websocket] after connect, session created: {0}"", session);         this.session = session;         session.setAutoReceipt(true);         connectLatch.countDown();     }      @Override     public void handleException(StompSession session, StompCommand command, StompHeaders headers, byte[] payload, Throwable e) {         LOGGER.log(Level.SEVERE, ""[ast websocket] handle exception {0}"", e.getMessage());         LOGGER.log(Level.SEVERE, ""[ast websocket] handle exception, session: {0}"", session);         LOGGER.log(Level.SEVERE, ""[ast websocket] handle exception, command: {0}"", command);         LOGGER.log(Level.SEVERE, null, e);     }      @Override     public void handleTransportError(StompSession session, Throwable e) {         LOGGER.log(Level.SEVERE, ""[ast websocket] handle error {0}"", e.getMessage());         LOGGER.log(Level.SEVERE, ""[ast websocket] handle error, session: {0}"", session);         LOGGER.log(Level.SEVERE, null, e);         if (e instanceof ConnectionLostException) {             JOptionPane.showMessageDialog(null, ""Сервертэй холболт саллаа!"", ""Сервертэй холболт саллаа: "" + e.getMessage(), JOptionPane.ERROR_MESSAGE);              astWebsocketClient.disconnect();             astWebsocketClient.connect();         } else if (e instanceof NullPointerException) {             JOptionPane.showMessageDialog(null, ""Алдаа null!"", ""Алдаа null: "" + e.getMessage(), JOptionPane.ERROR_MESSAGE);         }     }      public StompSession getSession() {         return session;     } ```  My error log:  ```java INFO [mn.astvision.assetmanagement.appwebsocketservice.AppWebsocketClient]: [ast websocket] initializing... INFO [mn.astvision.assetmanagement.appwebsocketservice.AppWebsocketClient]: [ast websocket] initialized. INFO [mn.astvision.assetmanagement.appwebsocketservice.AppWebsocketClient]: [ast websocket] connecting... INFO [org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler]: Initializing ExecutorService  FINE [org.springframework.web.socket.client.standard.StandardWebSocketClient]: Connecting to ws://192.168.0.240:8080/gis-server/websocket INFO [mn.astvision.assetmanagement.appwebsocketservice.AppWebsocketClient]: [ast websocket] connected. FINEST [org.springframework.web.socket.client.standard.StandardWebSocketClient]: Handshake request headers: {Connection=[Upgrade], Host=[192.168.0.240:8080], Origin=[192.168.0.240:8080], Sec-WebSocket-Key=[nSt3/t8R2sNjOxub/ru/4g==], Sec-WebSocket-Version=[13], Upgrade=[websocket]} FINEST [org.springframework.web.socket.client.standard.StandardWebSocketClient]: Handshake response headers: {connection=[upgrade], date=[Fri, 02 Dec 2016 07:35:15 GMT], sec-websocket-accept=[9cQOOde1P6/kGxvJf2YjCRbqTT4=], upgrade=[websocket]} FINE [org.springframework.messaging.simp.stomp.DefaultStompSession]: Connection established in session id=961b9636-4fd6-6fe7-5546-747cbebf32c0 FINEST [org.springframework.messaging.simp.stomp.DefaultStompSession]: Sending CONNECT {heart-beat=[10000,10000], accept-version=[1.1,1.2]} session=961b9636-4fd6-6fe7-5546-747cbebf32c0 FINEST [org.springframework.messaging.simp.stomp.StompEncoder]: Encoding STOMP CONNECT, headers={heart-beat=[10000,10000], accept-version=[1.1,1.2]} Sending TextMessage payload=[CONNECT he..], byteCount=56, last=true], StandardWebSocketSession[id=13061b96-2e27-42da-a5db-703d580b5489, uri=ws://192.168.0.240:8080/gis-server/websocket] FINE [org.springframework.messaging.simp.stomp.DefaultStompSession]: Connection closed session id=961b9636-4fd6-6fe7-5546-747cbebf32c0 FINE [org.springframework.web.socket.adapter.NativeWebSocketSession]: Closing StandardWebSocketSession[id=13061b96-2e27-42da-a5db-703d580b5489, uri=ws://192.168.0.240:8080/gis-server/websocket] SEVERE [mn.astvision.assetmanagement.appwebsocketservice.AppWebsocketSessionHandler]: [ast websocket] handle error Connection closed SEVERE [mn.astvision.assetmanagement.appwebsocketservice.AppWebsocketSessionHandler]: [ast websocket] handle error, session: org.springframework.messaging.simp.stomp.DefaultStompSession@c805 SEVERE [mn.astvision.assetmanagement.appwebsocketservice.AppWebsocketSessionHandler] org.springframework.messaging.simp.stomp.ConnectionLostException: Connection closed 	at org.springframework.messaging.simp.stomp.DefaultStompSession.afterConnectionClosed(DefaultStompSession.java:484) 	at org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter.afterConnectionClosed(WebSocketStompClient.java:354) 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.onClose(StandardWebSocketHandlerAdapter.java:141) 	at org.glassfish.tyrus.core.TyrusEndpointWrapper.onClose(TyrusEndpointWrapper.java:1259) 	at org.glassfish.tyrus.core.TyrusWebSocket.onClose(TyrusWebSocket.java:130) 	at org.glassfish.tyrus.core.ProtocolHandler.close(ProtocolHandler.java:469) 	at org.glassfish.tyrus.core.TyrusWebSocket.close(TyrusWebSocket.java:264) 	at org.glassfish.tyrus.client.TyrusClientEngine$2$1.close(TyrusClientEngine.java:635) 	at org.glassfish.tyrus.container.grizzly.client.GrizzlyClientFilter$CloseTask.execute(GrizzlyClientFilter.java:494) 	at org.glassfish.tyrus.container.grizzly.client.TaskProcessor.processTask(TaskProcessor.java:114) 	at org.glassfish.tyrus.container.grizzly.client.TaskProcessor.processTask(TaskProcessor.java:91) 	at org.glassfish.tyrus.container.grizzly.client.GrizzlyClientFilter.handleClose(GrizzlyClientFilter.java:221) 	at org.glassfish.grizzly.filterchain.ExecutorResolver$4.execute(ExecutorResolver.java:76) 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:284) 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:201) 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:133) 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:112) 	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77) 	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:526) 	at org.glassfish.grizzly.nio.NIOConnection.preClose(NIOConnection.java:879) 	at org.glassfish.grizzly.nio.transport.TCPNIOConnection.preClose(TCPNIOConnection.java:97) 	at org.glassfish.grizzly.nio.NIOConnection.terminate0(NIOConnection.java:603) 	at org.glassfish.grizzly.nio.transport.TCPNIOConnection.terminate0(TCPNIOConnection.java:291) 	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.read(TCPNIOTransport.java:599) 	at org.glassfish.grizzly.nio.transport.TCPNIOTransportFilter.handleRead(TCPNIOTransportFilter.java:75) 	at org.glassfish.grizzly.filterchain.TransportFilter.handleRead(TransportFilter.java:173) 	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119) 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:284) 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:201) 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:133) 	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:112) 	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77) 	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:526) 	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112) 	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117) 	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56) 	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137) 	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591) 	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571) 	at java.lang.Thread.run(Unknown Source) INFO [mn.astvision.assetmanagement.appwebsocketservice.AppWebsocketClient]: [ast websocket] disconnecting... ```    ---  **Affects:** 4.3.4","closed","in: web,","spring-projects-issues","2016-12-02T07:54:09Z","2019-01-11T19:15:33Z"
"","19514","Add connection closed callback for StompSessionHandlerAdapter [SPR-14947]","**[Batbayar Bazarragchaa](https://jira.spring.io/secure/ViewProfile.jspa?name=digz6666)** opened **[SPR-14947](https://jira.spring.io/browse/SPR-14947?redirect=false)** and commented  I'd like to handle connection closed event for Spring websocket client, but there's no afterConnectionClosed handler. My code:  ```java public class AppWebsocketSessionHandler extends StompSessionHandlerAdapter {      private static final Logger LOGGER = Logger.getLogger(AppWebsocketSessionHandler.class.getName());      private StompSession session;     private final CountDownLatch connectLatch;      private OnlineUserList onlineUserList;      public AppWebsocketSessionHandler(CountDownLatch connectLatch) {         this.connectLatch = connectLatch;     }      @Override     public void afterConnected(StompSession session, StompHeaders connectedHeaders) {         LOGGER.log(Level.INFO, ""[websocket] after connect, session created: {0}"", session);         this.session = session;         connectLatch.countDown();          session.subscribe(""/topic/online-user"", new StompFrameHandler() {             @Override             public Type getPayloadType(StompHeaders headers) {                 return OnlineUserList.class;             }              @Override             public void handleFrame(StompHeaders headers, Object payload) {                 //LOGGER.log(Level.INFO, ""[websocket] online user count frame: {0}"", payload);                 if (payload instanceof OnlineUserList) {                     onlineUserList = (OnlineUserList) payload;                 }             }         });     }      @Override     public void handleException(StompSession session, StompCommand command, StompHeaders headers, byte[] payload, Throwable e) {         LOGGER.log(Level.SEVERE, ""[websocket] handle exception {0}"", e.getMessage());         LOGGER.log(Level.SEVERE, null, e);     }      @Override     public void handleTransportError(StompSession session, Throwable e) {         LOGGER.log(Level.SEVERE, ""[websocket] handle error {0}"", e.getMessage());         LOGGER.log(Level.SEVERE, null, e);         if (e instanceof ConnectionLostException) {             LOGGER.log(Level.SEVERE, ""[websocket] handle connection close {0}"", e.getMessage()); // not consistent, throws exception when connection restores         }         try {             session.disconnect();         } catch (Exception ex) {         }     } ```  It throws following exception after connection restored, not when lost. org.springframework.messaging.simp.stomp.ConnectionLostException: Connection closed at org.springframework.messaging.simp.stomp.DefaultStompSession.afterConnectionClosed(DefaultStompSession.java:484)   ---  **Affects:** 4.3.4","closed","status: bulk-closed,","spring-projects-issues","2016-11-24T02:59:44Z","2019-01-13T20:31:31Z"
"","18961","Deadlock while creating a new thread on bean initialization with transactional code invocation [SPR-14388]","**[Bartosz Popiela](https://jira.spring.io/secure/ViewProfile.jspa?name=pbartosz)** opened **[SPR-14388](https://jira.spring.io/browse/SPR-14388?redirect=false)** and commented  ``` ""main"": 	at org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor.getAdvice(AbstractBeanFactoryPointcutAdvisor.java:84) 	- waiting to lock <0x00000000c17da860> (a java.lang.Object) 	at org.springframework.aop.framework.adapter.DefaultAdvisorAdapterRegistry.getInterceptors(DefaultAdvisorAdapterRegistry.java:79) 	at org.springframework.aop.framework.DefaultAdvisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(DefaultAdvisorChainFactory.java:62) 	at org.springframework.aop.framework.AdvisedSupport.getInterceptorsAndDynamicInterceptionAdvice(AdvisedSupport.java:482) 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:190) 	at com.sun.proxy.$Proxy120.transactionalMethod(Unknown Source) 	at com.example.BeanB.transactionalMethod(BeanB.java:219) 	at com.example.BeanB.init(BeanB.java:31) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:606) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1638) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1579) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1509) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) 	- locked <0x00000000c01b17b0> (a java.util.concurrent.ConcurrentHashMap) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:320) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:107) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1417) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1158) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) 	- locked <0x00000000c01b17b0> (a java.util.concurrent.ConcurrentHashMap) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:320) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:107) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1417) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1158) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) 	- locked <0x00000000c01b17b0> (a java.util.concurrent.ConcurrentHashMap) ... ```  ``` ""forked-thread-1"": 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:207) 	- waiting to lock <0x00000000c01b17b0> (a java.util.concurrent.ConcurrentHashMap) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) 	at org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor.getAdvice(AbstractBeanFactoryPointcutAdvisor.java:86) 	- locked <0x00000000c17da860> (a java.lang.Object) 	at org.springframework.aop.framework.adapter.DefaultAdvisorAdapterRegistry.getInterceptors(DefaultAdvisorAdapterRegistry.java:79) 	at org.springframework.aop.framework.DefaultAdvisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(DefaultAdvisorChainFactory.java:62) 	at org.springframework.aop.framework.AdvisedSupport.getInterceptorsAndDynamicInterceptionAdvice(AdvisedSupport.java:482) 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:190) 	at com.sun.proxy.$Proxy121.methodInvokedInTransaction(Unknown Source) 	at com.example.BeanA.methodInvokedInTransaction(BeanA.java:358) 	at com.example.BeanA.access$300(BeanA.java:44) 	at com.example.BeanA$1$1.doInTransaction(BeanA.java:91) 	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:89) 	at com.example.BeanA$1.run(BeanA.java:86) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) 	at java.lang.Thread.run(Thread.java:745) ```      Initialization of BeanA occurs before initialization of BeanB. The forked thread try to get an ""org.springframework.transaction.interceptor.TransactionInterceptor#0"" singleton instance while the main thread has already acquired a lock on singletonObjects map of an org.springframework.beans.factory.support.DefaultSingletonBeanRegistry instance because some other bean with a default bean scope which is singleton is higher in the bean hierarchy.  ``` public class BeanA {     	... 	     @Override     public void afterPropertiesSet() throws Exception {         executor.execute(new Runnable() {             @Override             public void run() {                 TransactionTemplate tt = new TransactionTemplate(transactionManager);                 tt.setPropagationBehavior(TransactionTemplate.PROPAGATION_REQUIRES_NEW);                 tt.execute(new TransactionCallback() {                     @Override                     public Object doInTransaction(TransactionStatus status) {                         return methodInvokedInTransaction();                     }                 });             }         });     } } ```  Is it a Spring TX bug or a client code should take care of this situation?  As a workaround I added``` depends-on=""org.springframework.transaction.interceptor.TransactionInterceptor#0""  ```attribute to the BeanA declaration. It works because ```org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(String, Class, Object[], boolean) ```will use an already created TransactionInterceptor singleton instance instead of creating a new one. Using``` @Transactional(propagation = Propagation.REQUIRED) ```or ```@Transactional(propagation = Propagation.REQUIRES_NEW) ```on the BeanA.afterPropertiesSet() method doesn't work. ```  ---  **Affects:** 3.2.17, 4.2.6, 4.3 GA  **Issue Links:** - #18814 Deadlock possible with AspectJ aspects and multi-threading - #18896 Async advisor retrieval blocks when triggered by singleton init method  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0d3a22c4877f189b49bcf87b7121d514efd6e885, https://github.com/spring-projects/spring-framework/commit/fd9d518c36081b3233326bfb95d79f2087c3edc6, https://github.com/spring-projects/spring-framework/commit/a1c09877d94dd04ec3b2ebbd925d601fc965b6b4  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","type: bug,","spring-projects-issues","2016-06-22T10:47:56Z","2019-01-11T16:00:09Z"
"","18857","better control of csrf tokens [SPR-14285]","**[Bagel Place](https://jira.spring.io/secure/ViewProfile.jspa?name=bagelplace)** opened **[SPR-14285](https://jira.spring.io/browse/SPR-14285?redirect=false)** and commented  This question may be Spring MVC or Spring Security, but there are no sections for that in the JIRA menu.  The very serious and real problem is that there seems to be no way to manually control the propagation of an updated CSRF token.  The implication of this limitation is that it is harder to create custom filter sequences.  I have posted a number of questions about this on Stack Overflow, and even the most advanced users of that site have told me they have no idea how to move an updated CSRF token into session scope and then back into request scope.  I posted a 500 point bounty at this link, but no one was able to answer.  And then I posted a much narrower question at this other link, and no one has answered yet.  Can you please show how to 1.) access a session-scoped CSRF token, 2.) put that CSRF token into an inert variable for storage and 3.) take that variable out of the session?  All three of these steps need to be available in tools like custom OncePerRequestFilters, custom DefaultOAuth2RequestFactories, and `@Controller` classes, etc.  If you can show these very simple three steps, I can figure out the bigger question on my own.  The lack of response from advanced users implies that this is a problem with the Spring API.   --- No further details from [SPR-14285](https://jira.spring.io/browse/SPR-14285?redirect=false)","closed","status: invalid,","spring-projects-issues","2016-05-17T23:46:20Z","2019-01-12T05:22:47Z"
"","19384","Specific exceptions for missing request headers, cookies, etc [SPR-14818]","**[Austin Song](https://jira.spring.io/secure/ViewProfile.jspa?name=austins89@gmail.com)** opened **[SPR-14818](https://jira.spring.io/browse/SPR-14818?redirect=false)** and commented  When a parameter annotated with `@RequestHeader` and has required = true, a ServletBindingException is thrown when it is missing from the incoming request.  This exception appears to be able to be thrown from multiple places.  A more specific exception such as a MissingServletRequestHeader exception makes sense here to be consistent with parameters (i.e. MissingServletRequestParameter exception).  ``` org.springframework.web.bind.ServletRequestBindingException: Missing request header 'auth-token' for method parameter of type String 	at org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver.handleMissingValue(RequestHeaderMethodArgumentResolver.java:82) 	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:96) 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:99) 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:161) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:128) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:832) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:743) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:961) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:895) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:261) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.springframework.security.oauth2.client.filter.OAuth2ClientContextFilter.doFilter(OAuth2ClientContextFilter.java:60) 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.springframework.security.oauth2.client.filter.OAuth2ClientContextFilter.doFilter(OAuth2ClientContextFilter.java:60) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.springframework.cloud.sleuth.instrument.web.TraceFilter.doFilter(TraceFilter.java:161) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:115) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:316) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:122) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:169) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:48) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:120) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:91) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:53) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:213) 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:176) 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:87) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:103) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522) 	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095) 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Thread.java:745) ```  ---  **Issue Links:** - #17712 400 Bad Request for missing URI template variable is incorrect - #19967 Exception hierarchy under HttpClientException and HttpServerException for the RestTemplate - #16425 MVC: which parameter cannot be parsed?  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1653  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-10-18T00:40:13Z","2019-01-11T17:29:32Z"
"","19155","Encoding of flux data is incorrect [SPR-14586]","**[Athul ](https://jira.spring.io/secure/ViewProfile.jspa?name=athulrajeev)** opened **[SPR-14586](https://jira.spring.io/browse/SPR-14586?redirect=false)** and commented  The response from spring-reactive-web controller given an invalid JSON data.  Example : If the return value of a controller is Flux\ and assume there are four items the output  is in the following format  [{""age"":1,""name"":""Tom""},{""age"":2,""name"":""Tom""}{""age"":3,""name"":""Tom""}{""age"":4,""name"":""Tom""},,]  The ordering of the data and the delimiter is getting lost while encoding the data from Flux\ to Flux\.  I think the root cause of the issue is org.springframework.http.codec.json.Jackson2JsonEncoder.encode() has a particular step where Data and Delimiter are merged to a single flux. However currently it is using flatMap which leads to loosing of order. Instead if concatMap was used the order between data and delimiter would have been retained.   ---  **Affects:** 5.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/417a9d455965d3ce3eabf684c348ce1a1fd3b743","closed","type: bug,","spring-projects-issues","2016-08-14T09:06:10Z","2016-09-21T12:13:12Z"
"","19323","Spring Websocket is leaking ThreadPoolExecutor queue tasks  [SPR-14757]","**[Askar Ibragimov](https://jira.spring.io/secure/ViewProfile.jspa?name=askaribragimov)** opened **[SPR-14757](https://jira.spring.io/browse/SPR-14757?redirect=false)** and commented  The initial problem came up when I noticed that memory usage of my Spring Websocket Stomp application grown dramatically and it stopped distributing new messages. Upon investigation, I found that Memory usage increase was (seemingly) assocuated with faulty sessions, e.g. those that experienced Send Limit. Though, it might be some underlying issue that generates both the leak and the send limit or other error.  In order to reproduce, I did the following  * I have a multi-threaded Java test websocket-stomp client. It usually works quite fine with several hundreds clients. These clients are made from standard Java Stomp client found in Spring. * I use SimpleMessageBroker. * To simulate the issue with client, I put in its Frame Handler (routine that processes incoming messages) Thread.sleep(4000), that is every message is ""handled"" for four seconds on the client side. So it generates issues for transferring more WebSocket messages to client. * TaskExecutor for outgoing channel is a custom one, since I want different Reject policy. It is defined as:  ```      protected ThreadPoolTaskExecutor getCustomTaskExecutor() {         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();          executor.setCorePoolSize(CORE_POOL_SIZE); // 1         executor.setMaxPoolSize(Integer.MAX_VALUE);         executor.setKeepAliveSeconds(KEEP_ALIVE_SEC); // 120 sec         executor.setQueueCapacity(Integer.MAX_VALUE);         executor.setAllowCoreThreadTimeOut(true);         executor.setRejectedExecutionHandler(new CallerRunsPolicyLogging());// only difference from default one         return executor;     } ```  Buffer sizes for outgoing websocket messaging were set to low values to speed up ""send limit"" failure.  * Finally, I started to monitor the quantity (webSocketConfig is just the object I use to configure websockets, it has abovementioned getCustomtasExecutor() and configures Outbound Channel to use it. It simply stores the generated Executor for later use, so I can just use it like  ``` LOGGER.info("" Outbound WS Queue Size:"" + webSocketConfig.getOutboundChannelExecutor().getThreadPoolExecutor().getQueue().size()); ```  that appears also as ""queued tasks"" for outbound channel in Websocket standard logging.  **What happened:**  1. Deliberately slow message processing has been introduced for Websocket. 2. A client was disconnected with status 1006. 3. Around this time (slightly earlier maybe) Queue starts to build up. 4. While more clients were still connected, Queue continued to grow. 5. When all clients were disconnected, Queue size remained big, albeit stabilized.  Apart from blocking the sending, Queue in taskExecutor is not cleaned and leaking memory therefore. Slow clients that are disconnected with non-OK errors, such as send limit, will make this problem appear and memory/Queue leaked, resulting at some point in non-responsive application.  **Expected behaviour** * Tasks related to disconnected websocket should be pulled from queue. * When all clients are disconnected, task queue should be empty.  Here's some of my logs, pay close attention to ""queued tasks"" or ""Outbound WS Queue Size"" (same thing)  ```  INFO ] 2016-09-27 13:06:26.733 [schedulerFactoryBean_Worker-1] StatsLogger - Outbound WS Queue Size:0 [INFO ] 2016-09-27 13:06:27.733 [schedulerFactoryBean_Worker-1] StatsLogger - CPU Usage: 1.5625%, Heap memory: 36.13988494873047 Mb [INFO ] 2016-09-27 13:06:27.733 [schedulerFactoryBean_Worker-1] StatsLogger - WebSocketSession[80 current WS(80)-HttpStream(0)-HttpPoll(0), 90 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(90)-CONNECTED(90)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 570], outboundChannelpool size = 8, active threads = 5, queued tasks = 0, completed tasks = 8841], sockJsScheduler[pool size = 4, active threads = 0, queued tasks = 76, completed tasks = 18] [INFO ] 2016-09-27 13:06:27.733 [schedulerFactoryBean_Worker-1] StatsLogger - Outbound WS Queue Size:0 [INFO ] 2016-09-27 13:06:28.733 [schedulerFactoryBean_Worker-1] StatsLogger - CPU Usage: 0.0%, Heap memory: 36.13988494873047 Mb [INFO ] 2016-09-27 13:06:28.733 [schedulerFactoryBean_Worker-1] StatsLogger - WebSocketSession[80 current WS(80)-HttpStream(0)-HttpPoll(0), 90 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(90)-CONNECTED(90)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 570], outboundChannelpool size = 8, active threads = 8, queued tasks = 214, completed tasks = 8864], sockJsScheduler[pool size = 4, active threads = 0, queued tasks = 73, completed tasks = 18] [INFO ] 2016-09-27 13:06:28.733 [schedulerFactoryBean_Worker-1] StatsLogger - Outbound WS Queue Size:214 [INFO ] 2016-09-27 13:06:28.875 [qtp866370634-61] DisconnectStompEventHandler -  [DISCONNECT] event, STATUS 1006 Reason: WebSocket Read EOF Sess: 6ebdad4fb4a146bebe509d1c61f98bec [INFO ] 2016-09-27 13:06:28.915 [qtp866370634-104] DisconnectStompEventHandler -  [DISCONNECT] event, STATUS 1006 Reason: WebSocket Read EOF Sess: 7f874fc1a690474cb5dfec032a6033f4 [INFO ] 2016-09-27 13:06:29.312 [qtp866370634-60] DisconnectStompEventHandler -  [DISCONNECT] event, STATUS 1006 Reason: WebSocket Read EOF Sess: 1d2fbd1ddd154011b31ce4876e9eb5a7 [INFO ] 2016-09-27 13:06:29.376 [qtp866370634-61] StatsLogger - CPU Usage: 0.78125%, Heap memory: 36.13988494873047 Mb [INFO ] 2016-09-27 13:06:29.415 [qtp866370634-104] StatsLogger - CPU Usage: 0.78125%, Heap memory: 36.13988494873047 Mb [INFO ] 2016-09-27 13:06:29.745 [schedulerFactoryBean_Worker-1] StatsLogger - CPU Usage: 1.5625%, Heap memory: 36.13988494873047 Mb [INFO ] 2016-09-27 13:06:29.745 [schedulerFactoryBean_Worker-1] StatsLogger - WebSocketSession[77 current WS(77)-HttpStream(0)-HttpPoll(0), 90 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(90)-CONNECTED(90)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 576], outboundChannelpool size = 8, active threads = 8, queued tasks = 456, completed tasks = 8864], sockJsScheduler[pool size = 4, active threads = 0, queued tasks = 70, completed tasks = 18] [INFO ] 2016-09-27 13:06:29.745 [schedulerFactoryBean_Worker-1] StatsLogger - Outbound WS Queue Size:456 [INFO ] 2016-09-27 13:06:29.819 [qtp866370634-60] StatsLogger - CPU Usage: 1.5409270524978638%, Heap memory: 36.13988494873047 Mb  [INFO ] 2016-09-27 13:06:30.733 [schedulerFactoryBean_Worker-1] StatsLogger - CPU Usage: 0.0%, Heap memory: 36.13988494873047 Mb [INFO ] 2016-09-27 13:06:30.733 [schedulerFactoryBean_Worker-1] StatsLogger - WebSocketSession[77 current WS(77)-HttpStream(0)-HttpPoll(0), 90 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(90)-CONNECTED(90)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 579], outboundChannelpool size = 8, active threads = 8, queued tasks = 689, completed tasks = 8864], sockJsScheduler[pool size = 4, active threads = 0, queued tasks = 70, completed tasks = 19] [INFO ] 2016-09-27 13:06:30.733 [schedulerFactoryBean_Worker-1] StatsLogger - Outbound WS Queue Size:689 [INFO ] 2016-09-27 13:06:31.734 [schedulerFactoryBean_Worker-1] StatsLogger - CPU Usage: 0.0%, Heap memory: 36.13988494873047 Mb [INFO ] 2016-09-27 13:06:31.734 [schedulerFactoryBean_Worker-1] StatsLogger - WebSocketSession[77 current WS(77)-HttpStream(0)-HttpPoll(0), 90 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(90)-CONNECTED(90)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 579], outboundChannelpool size = 8, active threads = 8, queued tasks = 920, completed tasks = 8864], sockJsScheduler[pool size = 4, active threads = 0, queued tasks = 70, completed tasks = 19] [INFO ] 2016-09-27 13:06:31.734 [schedulerFactoryBean_Worker-1] StatsLogger - Outbound WS Queue Size:920 [INFO ] 2016-09-27 13:06:32.734 [schedulerFactoryBean_Worker-1] StatsLogger - CPU Usage: 1.5593812465667725%, Heap memory: 36.13988494873047 Mb [INFO ] 2016-09-27 13:06:32.734 [schedulerFactoryBean_Worker-1] StatsLogger - WebSocketSession[77 current WS(77)-HttpStream(0)-HttpPoll(0), 90 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(90)-CONNECTED(90)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 579], outboundChannelpool size = 8, active threads = 8, queued tasks = 1151, completed tasks = 8864], sockJsScheduler[pool size = 4, active threads = 0, queued tasks = 70, completed tasks = 19] [INFO ] 2016-09-27 13:06:32.734 [schedulerFactoryBean_Worker-1] StatsLogger - Outbound WS Queue Size:1151 [INFO ] 2016-09-27 13:06:33.021 [qtp866370634-85] DisconnectStompEventHandler -  [DISCONNECT] event, STATUS 1006 Reason: WebSocket Read EOF Sess: a27abcc298bf47ce9d5139a2c2aff5bc [INFO ] 2016-09-27 13:06:33.027 [qtp866370634-98] DisconnectStompEventHandler -  [DISCONNECT] event, STATUS 1006 Reason: WebSocket Read EOF Sess: ac9095c7ce704de1b1be1b4037b71903 [INFO ] 2016-09-27 13:06:33.521 [qtp866370634-85] StatsLogger - CPU Usage: 1.5625%, Heap memory: 36.13988494873047 Mb  [INFO ] 2016-09-27 13:06:33.527 [qtp866370634-98] StatsLogger - CPU Usage: 1.5593812465667725%, Heap memory: 36.13988494873047 Mb  [INFO ] 2016-09-27 13:06:33.733 [schedulerFactoryBean_Worker-1] StatsLogger - CPU Usage: 1.5593812465667725%, Heap memory: 36.13988494873047 Mb [INFO ] 2016-09-27 13:06:33.733 [schedulerFactoryBean_Worker-1] StatsLogger - WebSocketSession[75 current WS(75)-HttpStream(0)-HttpPoll(0), 90 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(90)-CONNECTED(90)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 585], outboundChannelpool size = 8, active threads = 8, queued tasks = 1384, completed tasks = 8864], sockJsScheduler[pool size = 4, active threads = 0, queued tasks = 68, completed tasks = 19] [INFO ] 2016-09-27 13:06:33.734 [schedulerFactoryBean_Worker-1] StatsLogger - Outbound WS Queue Size:1384 [INFO ] 2016-09-27 13:06:34.734 [schedulerFactoryBean_Worker-1] StatsLogger - CPU Usage: 1.5625%, Heap memory: 36.13988494873047 Mb [INFO ] 2016-09-27 13:06:34.734 [schedulerFactoryBean_Worker-1] StatsLogger - WebSocketSession[75 current WS(75)-HttpStream(0)-HttpPoll(0), 90 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(90)-CONNECTED(90)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 585], outboundChannelpool size = 8, active threads = 8, queued tasks = 1609, completed tasks = 8864], sockJsScheduler[pool size = 4, active threads = 0, queued tasks = 68, completed tasks = 19] [INFO ] 2016-09-27 13:06:34.734 [schedulerFactoryBean_Worker-1] StatsLogger - Outbound WS Queue Size:1609 [INFO ] 2016-09-27 13:06:35.733 [schedulerFactoryBean_Worker-1] StatsLogger - CPU Usage: 0.0%, Heap memory: 36.13988494873047 Mb [INFO ] 2016-09-27 13:06:35.733 [schedulerFactoryBean_Worker-1] StatsLogger - WebSocketSession[75 current WS(75)-HttpStream(0)-HttpPoll(0), 90 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(90)-CONNECTED(90)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 585], outboundChannelpool size = 8, active threads = 8, queued tasks = 1834, completed tasks = 8864], sockJsScheduler[pool size = 4, active threads = 0, queued tasks = 68, completed tasks = 20] [INFO ] 2016-09-27 13:06:35.733 [schedulerFactoryBean_Worker-1] StatsLogger - Outbound WS Queue Size:1834 [INFO ] 2016-09-27 13:06:36.732 [schedulerFactoryBean_Worker-1] StatsLogger - CPU Usage: 0.78125%, Heap memory: 36.13988494873047 Mb [INFO ] 2016-09-27 13:06:36.732 [schedulerFactoryBean_Worker-1] StatsLogger - WebSocketSession[75 current WS(75)-HttpStream(0)-HttpPoll(0), 90 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(90)-CONNECTED(90)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 585], outboundChannelpool size = 8, active threads = 8, queued tasks = 2059, completed tasks = 8864], sockJsScheduler[pool size = 4, active threads = 0, queued tasks = 68, completed tasks = 20] [INFO ] 2016-09-27 13:06:36.732 [schedulerFactoryBean_Worker-1] StatsLogger - Outbound WS Queue Size:2059 [INFO ] 2016-09-27 13:06:37.000 [qtp866370634-64] DisconnectStompEventHandler -  [DISCONNECT] event, STATUS 1006 Reason: WebSocket Read EOF Sess: 1a5555a80b2148149e6d406e37662fdf [INFO ] 2016-09-27 13:06:37.501 [qtp866370634-64] StatsLogger - CPU Usage: 2.339071750640869%, Heap memory: 36.13988494873047 Mb  [INFO ] 2016-09-27 13:06:37.734 [schedulerFactoryBean_Worker-1] StatsLogger - CPU Usage: 0.78125%, Heap memory: 36.13988494873047 Mb [INFO ] 2016-09-27 13:06:37.734 [schedulerFactoryBean_Worker-1] StatsLogger - WebSocketSession[74 current WS(74)-HttpStream(0)-HttpPoll(0), 90 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(90)-CONNECTED(90)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 588], outboundChannelpool size = 8, active threads = 8, queued tasks = 2264, completed tasks = 8885], sockJsScheduler[pool size = 4, active threads = 0, queued tasks = 67, completed tasks = 20] [INFO ] 2016-09-27 13:06:37.734 [schedulerFactoryBean_Worker-1] StatsLogger - Outbound WS Queue Size:2264 [INFO ] 2016-09-27 13:06:38.733 [schedulerFactoryBean_Worker-1] StatsLogger - CPU Usage: 1.5593812465667725%, Heap memory: 36.13988494873047 Mb [INFO ] 2016-09-27 13:06:38.733 [schedulerFactoryBean_Worker-1] StatsLogger - WebSocketSession[74 current WS(74)-HttpStream(0)-HttpPoll(0), 90 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(90)-CONNECTED(90)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 588], outboundChannelpool size = 8, active threads = 8, queued tasks = 2486, completed tasks = 8885], sockJsScheduler[pool size = 4, active threads = 0, queued tasks = 67, completed tasks = 20] [INFO ] 2016-09-27 13:06:38.733 [schedulerFactoryBean_Worker-1] StatsLogger - Outbound WS Queue Size:2486 [INFO ] 2016-09-27 13:06:39.733 [schedulerFactoryBean_Worker-1] StatsLogger - CPU Usage: 0.0%, Heap memory: 36.13988494873047 Mb [INFO ] 2016-09-27 13:06:39.733 [schedulerFactoryBean_Worker-1] StatsLogger - WebSocketSession[74 current WS(74)-HttpStream(0)-HttpPoll(0), 90 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(90)-CONNECTED(90)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 588], outboundChannelpool size = 8, active threads = 8, queued tasks = 2708, completed tasks = 8885], sockJsScheduler[pool size = 4, active threads = 0, queued tasks = 67, completed tasks = 20] [INFO ] 2016-09-27 13:06:39.733 [schedulerFactoryBean_Worker-1] StatsLogger - Outbound WS Queue Size:2708 [INFO ] 2016-09-27 13:06:40.124 [clientOutboundChannel-5] DisconnectStompEventHandler -  [DISCONNECT] event, STATUS 4500 Reason: null Sess: da39cfd61d1f435b8e3686408dd65a41 [INFO ] 2016-09-27 13:06:40.624 [clientOutboundChannel-5] StatsLogger - CPU Usage: 1.5656312704086304%, Heap memory: 36.13988494873047 Mb [INFO ] 2016-09-27 13:06:40.624 [clientOutboundChannel-5] DisconnectStompEventHandler -  [DISCONNECT] event, STATUS 4500 Reason: null Sess: da39cfd61d1f435b8e3686408dd65a41 [INFO ] 2016-09-27 13:06:40.733 [schedulerFactoryBean_Worker-1] StatsLogger - CPU Usage: 1.5593812465667725%, Heap memory: 36.13988494873047 Mb [INFO ] 2016-09-27 13:06:40.733 [schedulerFactoryBean_Worker-1] StatsLogger - WebSocketSession[73 current WS(73)-HttpStream(0)-HttpPoll(0), 90 total, 1 closed abnormally (0 connect failure, 1 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(90)-CONNECTED(90)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 8, active threads = 0, queued tasks = 0, completed tasks = 591], outboundChannelpool size = 8, active threads = 8, queued tasks = 2841, completed tasks = 8901], sockJsScheduler[pool size = 4, active threads = 0, queued tasks = 67, completed tasks = 21] [INFO ] 2016-09-27 13:06:40.733 [schedulerFactoryBean_Worker-1] StatsLogger - Outbound WS Queue Size:2841 [INFO ] 2016-09-27 13:06:40.983 [qtp866370634-100] DisconnectStompEventHandler -  [DISCONNECT] event, STATUS 1006 Reason: WebSocket Read EOF Sess: 4ae79b882128424d9fe2555a0f7d7d89 [INFO ] 2016-09-27 13:06:40.988 [qtp866370634-97] DisconnectStompEventHandler -  [DISCONNECT] event, STATUS 1006 Reason: WebSocket Read EOF Sess: db75485a78b943208375f6df7fff774c [INFO ] 2016-09-27 13:06:41.018 [qtp866370634-86] DisconnectStompEventHandler -  [DISCONNECT] event, STATUS 1006 Reason: WebSocket Read EOF Sess: 39fb348ad2854efcbb406f1962d0b3db [ ```  and when no one is connected, still have 22000 tasks enqueued:  ``` [INFO ] 2016-09-27 13:12:06.734 [schedulerFactoryBean_Worker-1] StatsLogger - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 90 total, 1 closed abnormally (0 connect failure, 1 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(90)-CONNECTED(90)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 813], outboundChannelpool size = 8, active threads = 8, queued tasks = 22688, completed tasks = 8974], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 1, completed tasks = 316] [INFO ] 2016-09-27 13:12:06.734 [schedulerFactoryBean_Worker-1] StatsLogger - Outbound WS Queue Size:22688 ```  Tested with latest release 4.3.3. I also appreciate a work-around for the time being.  **UPDATE**  I have used source code of 4.3.3 to add some logging to ConcurrentWebSocketSessionDecorator and have found that in private boolean tryFlushMessageBuffer() , the line  ``` getDelegate().sendMessage(message); ```  may deadlock. Lock is never released, it seems. I will continue to look into it.   ---  **Affects:** 4.3.3  **Attachments:** - [treaddump_1.txt](https://jira.spring.io/secure/attachment/23585/treaddump_1.txt) (_81.34 kB_) - [treaddump_2.txt](https://jira.spring.io/secure/attachment/23584/treaddump_2.txt) (_75.12 kB_) - [treaddump_3.txt](https://jira.spring.io/secure/attachment/23583/treaddump_3.txt) (_73.75 kB_)","closed","in: web,","spring-projects-issues","2016-09-27T10:54:02Z","2019-01-11T17:11:51Z"
"","19259","Frequent messages via Websocket are sent unreliably [SPR-14695]","**[Askar Ibragimov](https://jira.spring.io/secure/ViewProfile.jspa?name=askaribragimov)** opened **[SPR-14695](https://jira.spring.io/browse/SPR-14695?redirect=false)** and commented  Consider a simple code that sends messages via routine  ```  public void publishToSessionUsingTopic(String sessionId, String subscriptionTopic, Map payload) {         // necessary message headers for per-session send         SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE);         headerAccessor.setSessionId(sessionId);         headerAccessor.setLeaveMutable(true);                   simpMessagingTemplate.convertAndSendToUser(sessionId, subscriptionTopic, Collections.singletonList(payload), headerAccessor.getMessageHeaders());  } ```  When running in a circle over 100 different sessions, convertAndSendToUser is called every 3ms, one session at a time. Upon checking websocket traffic and reception on clients (in our case, it was collection of Spring websocket java clients within a test program) it was discovered that some messages weren't sent.  Version of Spring: 4.3.2.RELEASE, used Simple Message Broker inside Spring and Jetty (default).   ---  **Affects:** 4.3.2  **Reference URL:** http://stackoverflow.com/questions/39447342/frequent-send-to-spring-websocket-session-lost-in-transit","closed","status: declined,","spring-projects-issues","2016-09-12T14:03:15Z","2019-01-12T16:33:57Z"
"","19178","Avoid creation of lazy candidates when the primary bean is injected [SPR-14611]","**[Asaf Romano](https://jira.spring.io/secure/ViewProfile.jspa?name=aromano)** opened **[SPR-14611](https://jira.spring.io/browse/SPR-14611?redirect=false)** and commented  Consider the following code in a Config class:  ```java     @Bean(name = ""sharedExecutorService"")     @Primary     @Lazy     public ExecutorService sharedExecutorService()     {         System.out.println(""In sharedExecutorService"");         ExecutorService executorService = Executors.newFixedThreadPool(5);         System.out.println(String.format(""Created: %s"", executorService));         return executorService;     }      @Bean(name = ""localExecutorService1"")     @Lazy     public ExecutorService localExecutorService1()     {         System.out.println(""In localExecutorService1"");         ExecutorService executorService = sharedExecutorService();         System.out.println(String.format(""Created: %s"", executorService));         return executorService;     }      @Bean(name = ""localExecutorService2"")     @Lazy     public ExecutorService localExecutorService2()     {         System.out.println(""In localExecutorService2"");         ExecutorService executorService = sharedExecutorService();         System.out.println(String.format(""Created: %s"", executorService));         return executorService;     } ```  Later on, someone injects the primary bean as follows:  ```java @Inject private ExecutorService executorService; ```  The expectation is for the primary bean to be constructed and injected at this point, but for the other two beans not to be constructed yet (as they are lazy). What seems to happen, however, is that all three beans are constructed at this point (albeit the primary bean is successfully injected).  Please note that this issue seems to be quite similar to #18314  ---  **Affects:** 4.3.2  **Issue Links:** - #12206 findDefaultEntityManagerFactory should consider EMF bean's primary flag - #18314 BeanFactoryAnnotationUtils.qualifiedBeanOfType should not instantiate all beans of given type before checking qualifier  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c4fcdb68648f24a7f1fb3e40e94aa89870866dae, https://github.com/spring-projects/spring-framework/commit/a7849b2861eea7af18da9b0023bde5cfce2321da","closed","type: enhancement,","spring-projects-issues","2016-08-21T15:02:18Z","2019-01-14T04:38:14Z"
"","19381","Hibernate 5 LocalSessionFactoryBean should allow for dynamic mapping registration (like for Hibernate 4) [SPR-14815]","**[Arunkumar](https://jira.spring.io/secure/ViewProfile.jspa?name=arung.cse)** opened **[SPR-14815](https://jira.spring.io/browse/SPR-14815?redirect=false)** and commented  We are working on a project where we have to invoke the localSessionFactoryBean.afterPropertiesSet(); to reload the hibernate's session factory to add dynamically created HBM from our application, but we got the org.hibernate.DuplicateMappingException.  Upon debugging hibernate5.2.2 source code, we found that the issue starts at the localSessionFactoryBean.afterPropertiesSet().  ```java @Override 	public void afterPropertiesSet() throws IOException { 		LocalSessionFactoryBuilder sfb = new LocalSessionFactoryBuilder( 				this.dataSource, getResourceLoader(), getMetadataSources());  // Here the getMetadataSources() has been reused in LocalSessionFactoryBuilder  public MetadataSources getMetadataSources() { 		if (this.metadataSources == null) { 			BootstrapServiceRegistryBuilder builder = new BootstrapServiceRegistryBuilder(); 			if (this.resourcePatternResolver != null) { 				builder = builder.applyClassLoader(this.resourcePatternResolver.getClassLoader()); 			} 			this.metadataSources = new MetadataSources(builder.build()); 		} 		return this.metadataSources; 	}  /*Here the previously created metadatasources values are being returned without clearing the xmlbindings values, so hibernate again adds (duplicates) all the .hbm  files to its sessionfactory which finally results in DuplicateMappingException. */ ```  As a quick fix in our code we have cleared the getMetadataSources.getXnlBindings  ```java localSessionFactoryBean.getMetadataSources().getXmlBindings().clear(); //and then we called the  localSessionFactoryBean.afterPropertiesSet(); ```  This scenario will be reproduced only when we have the joined subclass hbm mapping, because  in hiberanate 5.2.2 the duplication validation happens at InFlightMetadataCollectorImpl (Line No: 268). This method will be invoked by ModelBinder class method : bindJoinedSubclassEntities( Line No: 576).  ---  **Affects:** 4.3.3  **Issue Links:** - #18285 Hibernate5 metadata access  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5912d6f52af193e8bc562db80a64062394158851, https://github.com/spring-projects/spring-framework/commit/7cbab0efe3e939814657c5fdab7024bcd7eae339","closed","type: enhancement,","spring-projects-issues","2016-10-17T07:51:40Z","2019-01-11T17:29:28Z"
"","19330","MessageHeaders doesn't use serialization properly [SPR-14764]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-14764](https://jira.spring.io/browse/SPR-14764?redirect=false)** and commented  Although my test-case isn't related to the `MessageHeaders` it demonstrates the problem:  ```java @Test public void serializeWithNonSerializableHeader2() throws Exception { 	serializeAndDeserialize(new Foo(""foo"")); }  private static Object serializeAndDeserialize(Object object) throws Exception { 	ByteArrayOutputStream baos = new ByteArrayOutputStream(); 	ObjectOutputStream out = new ObjectOutputStream(baos); 	out.writeObject(object); 	out.close(); 	ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray()); 	ObjectInputStream in = new ObjectInputStream(bais); 	Object result = in.readObject(); 	in.close(); 	return result; }  private static class Foo implements Serializable {  	private final String foo;  	private Foo(String foo) { 		this.foo = foo; 	}  	private void writeObject(ObjectOutputStream out) throws IOException { 		if (""foo"".equals(this.foo)) { 			out.writeObject(new Foo(this.foo.toUpperCase())); 		} 		else { 			out.defaultWriteObject(); 		} 	}  	private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { 		in.defaultReadObject(); 	}  } ```  Where the result is like:  ``` java.lang.ClassCastException: cannot assign instance of org.springframework.integration.message.MessageHeadersTests$Foo to field org.springframework.integration.message.MessageHeadersTests$Foo.foo of type java.lang.String in instance of org.springframework.integration.message.MessageHeadersTests$Foo  	at java.io.ObjectStreamClass$FieldReflector.setObjFieldValues(ObjectStreamClass.java:2133) 	at java.io.ObjectStreamClass.setObjFieldValues(ObjectStreamClass.java:1305) 	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2006) 	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:501) 	at org.springframework.integration.message.MessageHeadersTests$Foo.readObject(MessageHeadersTests.java:185) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) ```  Similar code we have in the `MessageHeaders`:  ```java private void writeObject(ObjectOutputStream out) throws IOException { ... 	if (keysToIgnore.isEmpty()) { 		out.defaultWriteObject(); 	} 	else { ... 		out.writeObject(new MessageHeaders(this, keysToIgnore)); 	} }  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { 	in.defaultReadObject(); } ```  We don't catch the `ClassCastException` problem in the `MessageHeaders` because the `headers` field is a `Map<>`, therefore it can be assigned to the `MessageHeaders`. But at the same time `MessageHeaders` is immutable, therefore having a subclass and use its `getRawHeaders()` for modification makes us surprised that we deal with `MessageHeaders` instead of `HashMap` after deserialization.  Not sure how to fix properly, but seems for me making `headers` as `transient` and use an appropriate `writeObject(headersToSerialize)` and, therefore, `this.headers = readObject()` would make it possible and meet Java serialization standards.  OTOH `transient` may make other serialization systems, like Kryo, powerless...   ---  **Issue Links:** - [INT-4122](https://jira.spring.io/browse/INT-4122) Error ""MessageHeaders is immutable""  in AbstractKeyValueMessageStore normalizeMessage","closed","status: bulk-closed,","spring-projects-issues","2016-09-28T21:34:36Z","2019-01-12T02:24:23Z"
"","19263","Consider to make ApplicationEventPublisher as @FunctionalInterface [SPR-14699]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-14699](https://jira.spring.io/browse/SPR-14699?redirect=false)** and commented  The story from the Slack discussion:  > Didn't you think to make `ApplicationEventPublisher` as `@FunctionalInterface` and `publishEvent(ApplicationEvent event)` as `default` to the `publishEvent(Object event)`? >  > At least that is what I see in the target implementation: >  > ```java > @Override > public void publishEvent(ApplicationEvent event) { >     publishEvent(event, null); > } >  > @Override > public void publishEvent(Object event) { >     publishEvent(event, null); > } > ``` >  > that lets me to avoid some code in tests : >  > ```java > container.setApplicationEventPublisher(new ApplicationEventPublisher() { >  >             @Override >             public void publishEvent(Object event) { >             } >  >             @Override >             public void publishEvent(ApplicationEvent event) { >             // Some testing logic >             } >  >         }); > ``` >  > where I could get a gain from a lambda syntax.  So, my suggestion is like (only possible though...):  ```java @FunctionalInterface public interface ApplicationEventPublisher { 		 	default void publishEvent(ApplicationEvent event) { 		publishEvent((Object) event); 	}  	void publishEvent(Object event);  } ```    ---  **Affects:** 5.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a86f6d3676ab655b7e7c4f82009c0c20726bd144","closed","type: enhancement,","spring-projects-issues","2016-09-12T16:07:32Z","2016-09-21T12:13:12Z"
"","19042","AbstractAdaptableMessageListener should not ""eat"" exceptions in the onMessage() [SPR-14473]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-14473](https://jira.spring.io/browse/SPR-14473?redirect=false)** and commented  It isn't clear why originally the logic in the `AbstractAdaptableMessageListener` has been chosen like:  ```java try { 	onMessage(message, null); } catch (Throwable ex) { 	handleListenerException(ex); } ```  where the last one just logs an exception:  ```java logger.error(""Listener execution failed"", ex); ```  but that looks inconsistent with the `onMessage(Message message, Session session)`. Especially when some custom wrapper decides to delegate to this `onMessage(Message)` and won't be able to see exception handling in the container.  In Spring Kafka (https://github.com/spring-projects/spring-kafka/issues/150) and Spring AMQP (https://jira.spring.io/browse/AMQP-623) we concluded always throw exception in the default `AbstractAdaptableMessageListener` logic. Any custom implementation may choose to use that ""odd"" `handleListenerException(ex)` method.   ---  **Affects:** 4.3.1  **Issue Links:** - [AMQP-623](https://jira.spring.io/browse/AMQP-623) AbstractAdaptableMessageListener should not ""eat"" exceptions in the onMessage()","closed","status: declined,","spring-projects-issues","2016-07-15T21:23:59Z","2019-01-12T16:34:09Z"
"","19037","MessageHeaderAccessor doesn't remove headers if they are null [SPR-14468]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-14468](https://jira.spring.io/browse/SPR-14468?redirect=false)** and commented  The test-case to reproduce:  ```java @Test public void testRemoveEvenIfNull() { 	Message message = new GenericMessage<>(""payload"", Collections.singletonMap(""foo"", null)); 	MessageHeaderAccessor accessor = new MessageHeaderAccessor(message); 	accessor.removeHeader(""foo""); 	Map headers = accessor.toMap(); 	assertFalse(headers.containsKey(""foo"")); } ```  The workaround is only to extract a target `Map` and remove from there, and build a new `Message`.  But that doesn't help for Spring Integration's `HeaderFilter` to work properly.   ---  **Affects:** 4.2.7, 4.3.1  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: bug,","spring-projects-issues","2016-07-14T21:27:55Z","2016-07-28T09:16:21Z"
"","19543","Add status code check to bodyTo[Mono|Flux] [SPR-14977]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-14977](https://jira.spring.io/browse/SPR-14977?redirect=false)** and commented  The `retrieveMono` and `retrieveFlux` methods on `WebClient` allow users to retrieve the body of the response,  with an exception if the response status code is 4xx or 5xx. However, these methods are the exception, rather than the rule: `bodytoMono` and `bodyToFlux` on `ClientResponse` do not check the status code.  Checking for status codes should be the default: `bodyToMono` and `bodyToFlux` should do so. If that change is made, we can get rid of `retrieveMono` and `retrieveFlux` on `WebClient`, since they offer no added value any more. Retrieving the body without a status code check will be exposed in the standard `body` method.   --- No further details from [SPR-14977](https://jira.spring.io/browse/SPR-14977?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-12-05T09:07:34Z","2016-12-30T13:33:15Z"
"","19474","MediaTypeFactory should come with its own complete mime.types file [SPR-14908]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-14908](https://jira.spring.io/browse/SPR-14908?redirect=false)** and commented  A couple of improvements to `MediaTypeFactory`, in order to improve the experience of serving `Resource` instances from web apps:  * Copy (or move) the `mime.types` file from context-support to the factory module. context-support is not necessarily included on the classpath, and is quite vital since the default mime types file provided by JAF is not satisfactory (see below) * Add additional file types to the `mime.types` file. It has does not reflect current web media types (such as `woff`, `woff2`, `ico`)  Optionally: * -Rename it to `MimeTypeFactory` and move it to the core module, next to `MimeType` (or possibly merge it into `MimeType`). Determining the mime type of a file is not necessarily only a concern for web apps.- * Drop the Java Activation dependency, as we don't really need it: the `mimetypes.default` file provided in the JDK brings us even less than our own `mime.types`, and in JDK 9 we cannot assume that JAF is always present.  ---  **Issue Links:** - #19053 Resource.isFile() and JAF MediaTypeFactory - #19703 Deprecate unused web-specific MimeTypeUtils constants - #19471 Automatically set the right content type in BodyInserters#fromResource() - #19566 Bad Content-Type for static resources in Spring Web Reactive (_**""supersedes""**_)  1 votes, 6 watchers","closed","type: task,","spring-projects-issues","2016-11-15T12:05:29Z","2019-01-11T19:20:42Z"
"","19393","Align Reactive Web Client with web.reactive.function [SPR-14827]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-14827](https://jira.spring.io/browse/SPR-14827?redirect=false)** and commented  We should refactor the WebClient to be more similar to web.reactive.function:  * make ClientWebRequest immutable * replace ClientHttpRequestInterceptor with filter function * reuse BodyInserters and BodyExtractors * and more  ---  **Affects:** 5.0 M2  **Issue Links:** - #19550 Move web.client.reactive to web.reactive.client  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/31af6783a51834f286c05c40b81bcacc26ed4b33, https://github.com/spring-projects/spring-framework/commit/0cfb6b37f2f1e9eedcc5d34673cf24205c5a5ff6","closed","type: task,","spring-projects-issues","2016-10-20T10:09:43Z","2019-01-11T17:28:47Z"
"","19279","Reactive path matching does not consider servlet context path [SPR-14714]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-14714](https://jira.spring.io/browse/SPR-14714?redirect=false)** and commented  When mapping against path patterns, the `HttpRequestPathHelper` currently uses the path as returned from `HttpRequest.getURI().getRawPath()` as lookup path. However, when running in a servlet environment, this lookup path represents the entire path (including servlet context), which is not desirable.  Proposed solution: add a `getPath()` method to `HttpRequest`, defaulting to return  `getURI().getRawPath()`, but with an override in `ServletServerHttpRequest` to return the proper lookup path (obtained from `UrlPathHelper`.  ---  **Affects:** 5.0 M1  **Issue Links:** - #19291 Add support for context paths in Spring Web Reactive","closed","type: bug,","spring-projects-issues","2016-09-14T10:40:51Z","2019-01-11T17:13:50Z"
"","19278","Add WebApplicationInitializers for Web Reactive [SPR-14713]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-14713](https://jira.spring.io/browse/SPR-14713?redirect=false)** and commented  We should add `WebApplicationInitializer` s that facilitate running reactive-web in a servlet environment, through the `ServletHttpHandlerAdapter`. The initializers should be similar to the existing `DispatcherServlet`-based ones.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cf2112f5398c74f1d7279fea17b4db3a4dc6f4e1, https://github.com/spring-projects/spring-framework/commit/2b57a4d618a1e755ee9e362208291c0cde813e8d","closed","type: enhancement,","spring-projects-issues","2016-09-14T10:23:01Z","2016-09-21T12:13:13Z"
"","19262","Expose Channel on Resource [SPR-14698]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-14698](https://jira.spring.io/browse/SPR-14698?redirect=false)** and commented  We should expose a `java.nio.Channel` on `org.springframework.org.springframework.core.io.Resource`. This is particularly useful for our reactive runtimes, for copying over Resources to the HTTP output.  ---  **Issue Links:** - #20304 Revise FileSystemResource / FileSystemUtils / FileCopyUtils towards NIO.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c6a61e0d8538f5dc70aa9a21f366efba064e3702","closed","type: enhancement,","spring-projects-issues","2016-09-12T14:59:48Z","2019-01-11T18:19:48Z"
"","19249","Change View.render method to take Map [SPR-14685]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-14685](https://jira.spring.io/browse/SPR-14685?redirect=false)** and commented  Reactive view rendering is currently based on HandlerResults, which does not work well with web.reactive.function (where HandlerResults are not used). We should change the View abstraction so that operates on a Model, rather than a HandlerResult.   --- No further details from [SPR-14685](https://jira.spring.io/browse/SPR-14685?redirect=false)","closed","type: task,","spring-projects-issues","2016-09-09T13:30:18Z","2016-09-21T12:13:12Z"
"","18924","Small issues with Spring Framework Code Style Guide [SPR-14352]","**[Arend v. Reinersdorff](https://jira.spring.io/secure/ViewProfile.jspa?name=arend.von.reinersdorff)** opened **[SPR-14352](https://jira.spring.io/browse/SPR-14352?redirect=false)** and commented  # 1. ""Source files must be encoded using -1""  Was ISO-8859-1 before.  # 2. ""see \ for a suggestion to move to UTF-8""  Was a link to #16193 before.  # 3. Section on Braces not clear  * ""Line break after the closing brace [...] with the exception of the else, catch and finally statements [...]"" * Example below shows line breaks between closing brace and else:  ``` if (condition()) {     something(); } else {     // ... } ```  Reads like a contradiction between the description and the example to me. But maybe I misread the sentence, I find it hard to understand. Maybe it could be clarified?  Suggestion (assuming the example is correct): * Line break after the closing brace if that brace terminates a statement or the body of a method, constructor, or named class * Line break before else, catch and finally statements  # 4. Deletion of content  On Feb 20, 2016 a lot of content was deleted from the style guide, eg Constant names, Ternary operator, `@Override`. I'm not sure if this was on purpose.   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style","closed","type: documentation,","spring-projects-issues","2016-06-10T08:03:53Z","2019-01-14T04:39:09Z"
"","19500","Cron Expression validation [SPR-14933]","**[Arcadius Ahouansou](https://jira.spring.io/secure/ViewProfile.jspa?name=arcadius)** opened **[SPR-14933](https://jira.spring.io/browse/SPR-14933?redirect=false)** and commented  With Spring, the   ``` CronSequenceGenerator.parse() ``` method does not seem robust enough....  It silently takes expressions such as   ``` 0 0/05 * * * *SUN ```  ``` 0 0/05 * * * SUN* ```  ``` 0 0/05 *ANYTHING_HERE * * * ```  as valid cron expressions.  Moreover,   ``` 0 0/05 * * * MON-SUN ``` throws   ``` java.lang.IllegalArgumentException: Overflow in day for expression ""0 0/05 * * * MON-SUN"" ```  Ideally, we want to have a proper and robust cron expression validator.   Note that this issue is related to #13621   ---  **Affects:** 4.3.4  **Attachments:** - [CronExpressionValidationEnhancement.java](https://jira.spring.io/secure/attachment/23626/CronExpressionValidationEnhancement.java) (_1.35 kB_)  **Issue Links:** - #13621 Cron expression with fixed weekday and fixed date may or may not lead to IllegalStateException (runaway search for next trigger) - #20163 Cron expression validation method in CronSequenceGenerator improved","closed","type: enhancement,","spring-projects-issues","2016-11-22T09:44:33Z","2020-08-04T21:19:53Z"
"","18873","Provider injection is extremely slow [SPR-14301]","**[Anuraag Agrawal](https://jira.spring.io/secure/ViewProfile.jspa?name=anuraaga)** opened **[SPR-14301](https://jira.spring.io/browse/SPR-14301?redirect=false)** and commented  When injecting something as Provider\ rather than directly as T, it seems that every call to Provider.get() uses very slow reflection to resolve the injection. I would expect the reflection to be cached so the slow processing only happens once. A CPU profile shows the below common stacktrace when using Provider injection (via com.google.auto.factory), and in a production environment it was causing significant CPU usage. I have also attached a JMH benchmark that shows Provider injection as 3 orders of magnitude slower than direct injection. Of course it should be slower, but not this much.  ``` TRACE 313653: (thread=200107) 	java.lang.Class.getConstantPool(Class.java:Unknown line) 	java.lang.System$2.getConstantPool(System.java:1227) 	java.lang.reflect.Method.getDefaultValue(Method.java:608) 	org.springframework.core.annotation.AnnotationUtils.retrieveAnnotationAttributes(AnnotationUtils.java:1059) 	org.springframework.core.annotation.AnnotationUtils.getAnnotationAttributes(AnnotationUtils.java:1017) 	org.springframework.core.annotation.AnnotationUtils.getAnnotationAttributes(AnnotationUtils.java:992) 	org.springframework.core.annotation.AnnotationUtils.getAnnotationAttributes(AnnotationUtils.java:935) 	org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver.checkQualifier(QualifierAnnotationAutowireCandidateResolver.java:256) 	org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver.checkQualifiers(QualifierAnnotationAutowireCandidateResolver.java:171) 	org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver.isAutowireCandidate(QualifierAnnotationAutowireCandidateResolver.java:144) 	org.springframework.beans.factory.support.DefaultListableBeanFactory.isAutowireCandidate(DefaultListableBeanFactory.java:687) 	org.springframework.beans.factory.support.DefaultListableBeanFactory.isAutowireCandidate(DefaultListableBeanFactory.java:646) 	org.springframework.beans.factory.support.DefaultListableBeanFactory.isAutowireCandidate(DefaultListableBeanFactory.java:630) 	org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1191) 	org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116) 	org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectFactory.getObject(DefaultListableBeanFactory.java:1484) 	org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyProvider.get(DefaultListableBeanFactory.java:1501) ```  ``` Benchmark                        Mode  Cnt          Score         Error  Units InjectionBenchmark.nonProvider  thrpt  200  471226988.979 ± 2757690.855  ops/s InjectionBenchmark.provider     thrpt  200     789840.165 ±    3630.818  ops/s ```    ---  **Affects:** 4.2.6  **Attachments:** - [InjectionBenchmark.java](https://jira.spring.io/secure/attachment/23406/InjectionBenchmark.java) (_1.85 kB_)  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-05-24T09:57:47Z","2019-01-14T04:39:17Z"
"","18883","Cannot put  inside  [SPR-14311]","**[Antonio Petrelli](https://jira.spring.io/secure/ViewProfile.jspa?name=apetrelli)** opened **[SPR-14311](https://jira.spring.io/browse/SPR-14311?redirect=false)** and commented  When using Tiles 3 in JSP pages, if I have a mutable container I can do:      This does not work with SpringConfigurer.  It seems that the problem relies in: TilesConfigurer.SpringTilesContainerFactory.createContainer The problem is that the DefinitionRenderer takes the non-decorated container.  Solution that I suggest: override method createDecoratedContainer instead of createContainer.  Workaround: use your own TilesInitializer.   ---  **Affects:** 4.2.6  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","in: core,","spring-projects-issues","2016-05-27T10:04:32Z","2016-06-10T09:19:12Z"
"","19487","Asynchronous initialization of beans during startup [SPR-14920]","**[Antonio Anzivino](https://jira.spring.io/secure/ViewProfile.jspa?name=antonio.anzivino@csttech.it)** opened **[SPR-14920](https://jira.spring.io/browse/SPR-14920?redirect=false)** and commented  Some projects take a few minutes to start up because of I/O operations required for their initialization. For example, one of my projects queries a European Central Bank web service as part of its init sequence, while other beans query the database to retrieve the initial data set.  In general, Spring initializes beans one by one on the same thread and it has been working safe so far.  It is quite a few years I was thinking to this: make bean initialization asynchronous.  I imagine the process like this: if a bean's initialization method (AsyncInitializingBean?) returns a Future\, then Spring uses the default task executor to defer bean initialization and go to the next bean. Only when all the Futures return, the context is said to have initialized.  If a bean has a dependency on an asynchronous bean, then obviously its initialization cannot start before the dependent asynchronous bean has initialized.  I am opening this ticket to get feedback from the community.  And now let's talk about the workaround, because there is one. A developer can speed up the context init process by manually deferring I/O operations after init, but then the developer has to make sure that beans calling it in an uninitialized state (before the deferred initialization completes) get a consistent result, e.g. implementing locks on all methods. This works but requires a lot more code.  Example:  ``` public class AsyncWorkaround1Bean {      private boolean inited = false;      @PostConstruct     public void init() {         this.taskExecutor.submit(() -> doAsyncInit());     }       private void doAsyncInit() {         ........         inited = true;     }       public List getData() {          if (!inited) throw new NotReadyYetException();     } }  ```  ``` public class AsyncWorkaround2Bean {      private boolean inited = false;     private final Object lock = new Object();      @PostConstruct     public void init() {         this.taskExecutor.submit(() -> doAsyncInit());     }       private void doAsyncInit() {         ........         inited = true;         synchronized(lock) {             lock.notifyAll();         }     }       public List getData() {         while (!inited)             synchronized(lock) {                 lock.wait;             }     } }  ```  Thanks for your feedback  ---  **Issue Links:** - #13410 Parallel bean initialization during startup - #18305 Background initialization option for JPA EntityManagerFactory / Hibernate SessionFactory - #20904 Initialization blocked by multi-threaded event publishing  2 votes, 4 watchers","open","type: enhancement,","spring-projects-issues","2016-11-18T09:22:42Z","2020-08-24T17:32:03Z"
"","19462","Accepting null as default value for a property [SPR-14896]","**[Antonio Anzivino](https://jira.spring.io/secure/ViewProfile.jspa?name=antonio.anzivino@csttech.it)** opened **[SPR-14896](https://jira.spring.io/browse/SPR-14896?redirect=false)** and commented  Very silly issue.  I have a configuration mechanism that is based on both XML and property files and I use SpEL with a custom property resolver (the same as #18943).  Example XML  ```        ```  Then in the property files, if I want not to use this component, I can set null to its value:  ``` password.oldValues=3 #enables component password.oldValues= #sets null, leaving it disabled ```  This **requires** a property _password.oldValues_ to be defined in the property files. Since I am maintaining an application already in production, I have been asked not to require additional properties. So I wanted to use null as default value (which is legal in my case) **without** adding a line to my property file. If I don't add the property, even empty, I get an exception  I have tried the following SpEL  ``` ${password.oldValues:} #with empty String  org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'lengthPasswordPolicy' defined in file [D:\Workspace\phoenix.web.3.0\build\classes\META-INF\context\phoenix-web-context.xml]: 1; nested exception is java.lang.ArrayIndexOutOfBoundsException: 1 	at org.springframework.beans.factory.config.PlaceholderConfigurerSupport.doProcessProperties(PlaceholderConfigurerSupport.java:223) 	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.processProperties(PropertySourcesPlaceholderConfigurer.java:180) 	at it.phoenix.core.properties.EncrypedPropertyPlaceholderConfigurer.processProperties(EncrypedPropertyPlaceholderConfigurer.java:43) 	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.postProcessBeanFactory(PropertySourcesPlaceholderConfigurer.java:152) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:284) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:166) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:681) 	at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:523) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java) 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107) 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:5099) 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5615) 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1571) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1561) 	at java.util.concurrent.FutureTask.run(FutureTask.java:262) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) 	at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.ArrayIndexOutOfBoundsException: 1 	at it.phoenix.core.properties.EncryptedPropertyResolver.getPropertyAsRawString(EncryptedPropertyResolver.java:98) 	at org.springframework.core.env.AbstractPropertyResolver$1.resolvePlaceholder(AbstractPropertyResolver.java:222) 	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:147) 	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126) 	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:219) 	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:193) 	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer$2.resolveStringValue(PropertySourcesPlaceholderConfigurer.java:172) 	at org.springframework.beans.factory.config.BeanDefinitionVisitor.resolveStringValue(BeanDefinitionVisitor.java:282) 	at org.springframework.beans.factory.config.BeanDefinitionVisitor.resolveValue(BeanDefinitionVisitor.java:204) 	at org.springframework.beans.factory.config.BeanDefinitionVisitor.visitPropertyValues(BeanDefinitionVisitor.java:141) 	at org.springframework.beans.factory.config.BeanDefinitionVisitor.visitBeanDefinition(BeanDefinitionVisitor.java:82) 	at org.springframework.beans.factory.config.PlaceholderConfigurerSupport.doProcessProperties(PlaceholderConfigurerSupport.java:220) 	... 20 more  ```  ``` ${password.oldValues:null} #with explicit null  Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'lengthPasswordPolicy' defined in file [D:\Workspace\phoenix.web.3.0\build\classes\META-INF\context\phoenix-web-context.xml]: Initialization of bean failed; nested exception is org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [java.lang.Integer] for property 'minLength'; nested exception is java.lang.NumberFormatException: For input string: ""null"" 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351) 	... 50 more Caused by: org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [java.lang.Integer] for property 'minLength'; nested exception is java.lang.NumberFormatException: For input string: ""null"" 	at org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:596) 	at org.springframework.beans.AbstractNestablePropertyAccessor.convertForProperty(AbstractNestablePropertyAccessor.java:603) 	at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:216) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1532) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1491) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1231) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) 	... 56 more Caused by: java.lang.NumberFormatException: For input string: ""null"" 	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) 	at java.lang.Integer.parseInt(Integer.java:492) 	at java.lang.Integer.valueOf(Integer.java:582) 	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:208) 	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:113) 	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:468) 	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:441) 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:199) 	at org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:576) 	... 62 more  ```  The following article reminds that Integer.valueOf does not accept null, so it shall be treated in advance https://stackoverflow.com/questions/15115772/why-integer-doesnt-solve-null-string  As for the solution, I don't care whether empty string or ""null"" (actually, ""null"" is a legitimate String) should be the correct solution, but Spring should be smart enough to parse it as a null number  Point of fix should be  org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:208)  Open to discussion. I currently don't know about any workaround  ---  **Affects:** 4.3.3  **Issue Links:** - #14064 spring-expression: null values in (boolean) expressions won't be converted - #14247 SpEL should support case-insensitive null literals - #18943 Revise PropertySourcesPropertyResolver's default logging and customizability","closed","type: enhancement,","spring-projects-issues","2016-11-10T15:17:39Z","2019-01-11T17:39:09Z"
"","19449","Improve exception when failing to create a specific bean due to a NoClassDefFoundError [SPR-14883]","**[Antonio Anzivino](https://jira.spring.io/secure/ViewProfile.jspa?name=antonio.anzivino@csttech.it)** opened **[SPR-14883](https://jira.spring.io/browse/SPR-14883?redirect=false)** and commented  I am currently stuck in determining the cause of a NoClassDefFoundError that is occurring in my project.  I am reporting this ticket to request an improvement, and to discuss how it should be implemented.  My specific problem (which I can't diagnose on my own) is a NoClassDefFoundError  ``` java.lang.NoClassDefFoundError: WebJarAssetLocator 	at java.lang.Class.getDeclaredMethods0(Native Method) ~[?:1.7.0_79] 	at java.lang.Class.privateGetDeclaredMethods(Class.java:2615) ~[?:1.7.0_79] 	at java.lang.Class.getDeclaredMethods(Class.java:1860) ~[?:1.7.0_79] 	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:612) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:524) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:510) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.determineCandidateConstructors(AutowiredAnnotationBeanPostProcessor.java:243) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineConstructorsFromBeanPostProcessors(AbstractAutowireCapableBeanFactory.java:1074) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1047) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:751) ~[spring-beans-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:541) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444) ~[spring-web-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326) [spring-web-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107) [spring-web-4.3.3.RELEASE.jar:4.3.3.RELEASE] 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:5099) [catalina.jar:7.0.70] 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5615) [catalina.jar:7.0.70] 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147) [catalina.jar:7.0.70] 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1571) [catalina.jar:7.0.70] 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1561) [catalina.jar:7.0.70] 	at java.util.concurrent.FutureTask.run(FutureTask.java:262) [?:1.7.0_79] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [?:1.7.0_79] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [?:1.7.0_79] 	at java.lang.Thread.run(Thread.java:745) [?:1.7.0_79] Caused by: java.lang.ClassNotFoundException: WebJarAssetLocator 	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1891) ~[catalina.jar:7.0.70] 	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1734) ~[catalina.jar:7.0.70] 	... 31 more ```  From my understanding, some bean contains an `@Autowired` dependency for which the autowired bean contains a constructor dependency with WebJarAssertLocator. I am not willing to inlude WebJarAssetLocator in my classpath, I need to identify the component dependent to that class in order to remove its dependency from webjars package.  Now the problem is that this stack trace does not provide information on **what** bean caused the failure. I could get more information if I had _either_ the name of the bean that contains the faulty `@Autowired` definition or else the name of the bean that is faulty to instantiate as an `@Autowired` bean.  My proposal is for Spring Framework to increase the number of catch(Throwable) statements, and log little extra contextual information when these Throwables occur.  A simple, but probably insufficient and too simplicistic, proposal for which I could create a PR easily, is to wrap the entire doGetBean method in the following:  ```  	@SuppressWarnings(""unchecked"") 	protected  T doGetBean( 			final String name, final Class requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException {              try{                 ---- old code             }catch(Throwable ex){                 throw new BeansException(""Unable to get bean: "" + name + "" of required type "" + requiredType, ex);             }          } ```  Another alternate proposal, that follows a pattern I like a lot to apply, is the following (DefaultListableBeanFactory#731):  ``` for(String beanName: beanNames)      try{         ---old code     }catch(Throwable ex){         throw new BeansException(""Unable to init singleton bean ""+beanName, ex);     }  ```  The pattern is: when performing a loop, identify the element that caused an exception and throw its identifying information in a new exception that wraps the cause. This helps diagnosis.  This is meant to provide discussion and improvement. I will have to debug my specific error on my own, but I would like to see this (especially the second pattern) implemented in future releases  ---  **Affects:** 4.3.3  **Issue Links:** - #17066 PersistenceAnnotationBeanPostProcessor.findPersistenceMetadata(PersistenceAnnotationBeanPostProcessor.java:392) too aggressive, resulting in NoClassDefFoundError - #18738 Improve failure metadata that is available from BeanInstantiationException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c44c6075701ff46d356f09729f5c738337add39a, https://github.com/spring-projects/spring-framework/commit/cf479bf893df758b54f1a7117a7eae9a32728ab7, https://github.com/spring-projects/spring-framework/commit/b3cd1ad7f13db8a8d495a693d35c585f148f36e8, https://github.com/spring-projects/spring-framework/commit/b42d731fc8fc47b2ca60e2c675994badbf3ad427, https://github.com/spring-projects/spring-framework/commit/3d2e4c338c9a72f74dc45e634bbe5ba4064de14b, https://github.com/spring-projects/spring-framework/commit/37f4f43726d1f7f4c2a7d6e192a1fa96d0efd810","closed","type: enhancement,","spring-projects-issues","2016-11-07T10:35:08Z","2019-01-11T17:25:25Z"
"","18950","Redirecting via controller's ""redirect: [pagename]"" output returns 200 instead of 3xx [SPR-14377]","**[Antonio Anzivino](https://jira.spring.io/secure/ViewProfile.jspa?name=antonio.anzivino@csttech.it)** opened **[SPR-14377](https://jira.spring.io/browse/SPR-14377?redirect=false)** and commented  I have an application running with Spring 4.2.3 release.  In my MVC navigation controller I use `return ""redirect:"" + url;` syntax in order to get a target page to be redirected, without setting additional headers. I do use RedirectAttributes normally (not in this invocation anyway)  After updating to snapshot 4.3.1 I found that the redirection does not work. It returns an empty page with 200 code  Attached is a Firebug screnshot. Below headers  |Header|Value| |:---| |Cache-Control	|no-cache, no-store, max-age=0, must-revalidate| |Connection	|Keep-Alive| |Content-Language	|it-IT| |Content-Length	|0| |Content-Type	|text/plain| |Date	|Fri, 17 Jun 2016 10:55:29 GMT| |Expires	|0| |Keep-Alive|	timeout=5, max=100| |Location	|/phoenix.web.3.0/secure/admin/pages/process/index.jsp| |Pragma|	no-cache| |X-Frame-Options|	SAMEORIGIN| |X-XSS-Protection	|1; mode=block| |x-content-type-options	|nosniff|  I am reporting this as a bug because I have no information about API breaking changes between 4.2.x and 4.3.x  I understand that the level of information I am providing is very poor and because of that this issue might be rejected. I am not asking this on Stackoverflow both because I was working on a pre-release version and I think that this, or Github issues if you prefer, is the correct place.  Thank you and have a nice day   ---  **Affects:** 4.3.1  **Attachments:** - [Cattura.PNG](https://jira.spring.io/secure/attachment/23425/Cattura.PNG) (_32.51 kB_)","closed","in: web,","spring-projects-issues","2016-06-17T11:04:55Z","2019-01-11T16:01:36Z"
"","18943","Revise PropertySourcesPropertyResolver's default logging and customizability [SPR-14370]","**[Antonio Anzivino](https://jira.spring.io/secure/ViewProfile.jspa?name=antonio.anzivino@csttech.it)** opened **[SPR-14370](https://jira.spring.io/browse/SPR-14370?redirect=false)** and commented  PropertySourcesPropertyResolver may, under some circumstances, leak information that should not be normally logged. On line 90 it will log the key and the value of the property it finds if debug logging is enabled.  The following is the scenario in which the unwanted information is logged:  In order to store sensitive information (e.g. database password) in property files, we chose to encrypt them using a proprietary class that extends PropertySorucesPropertyResolver (in particular getPropertyAsRawString method). Since the class extends PropertySourcesPropertyResolver, the logger will be named according to our package (com.acme.EncryptedPropertyResolver). Unfortunately for us, we have enabled debug logging in UAT environment, resulting in the following  2015-07-17 10:57:13,683 DEBUG [localhost-startStop-1] com.acme.EncryptedPropertyResolver - getProperty - Found key 'database.password' in [file [/path/to/app.properties]] with type [String] and value '[redacted encrypted string]'  The string that is output to the log is encrypted, but our customer is still upset and reported this to us after an automated security scan. We had two options: 1) override the entire method and avoid logging value of property, 2) set logging level to > DEBUG for com.acme.EncryptedPropertyResolver and leave the rest intact.  Security consideration: the string output to the logs is encrypted as I said, so the password is not clearly printed to the logs, however this extends the attack surface as a malicious user with access to the code and application has more chances to obtain the key and the final plaintext password. Of course the key must be protected too, but that is another issue. The fact is that while property files are protected (by technical and administrative policies) on customer's UAT instance, log files are normally not part of the security policy and are easily sent via email to interested parties when a problem occurs.  I might suggest, since dropping the entire value logging in the official Spring release might be excessive for debug purposes, implementing a blacklist-based value obfuscation. Like if the key contains word such as ""password"", ""secret"", ""key"" (key, really???) Spring may drop the value in the logging statement. Just to give an example.  This, in my personal experience, is done by Atlassian Bamboo logs too (e.g [BAM-14475](https://jira.atlassian.com/browse/BAM-14475) or [Answers](https://answers.atlassian.com/questions/24131/answers/4048367)  This issue is marked trivial by OP because it can be addressed with additional logging configuration.  Ref: https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java#L90  ---  **Affects:** 3.2.17, 4.2.3  **Issue Links:** - #19462 Accepting null as default value for a property - #19274 Don't log property values in PropertySourcesPropertyResolver by default - #20380 Consistent logging in Environment and PropertySource implementations","closed","type: enhancement,","spring-projects-issues","2016-06-16T08:23:33Z","2019-01-11T16:01:01Z"
"","19601","Reactor2StompTcpClient should use a shared EventLoopGroup [SPR-15035]","**[Anton Shukalo](https://jira.spring.io/secure/ViewProfile.jspa?name=toha134)** opened **[SPR-15035](https://jira.spring.io/browse/SPR-15035?redirect=false)** and commented  Broker is down. It try reconnect to broker. On each connection attempt create new instance of NettyTcpClient, inside NettyTcpClient runs thread. This thread never stops because it not shutdown on connection error.  ---  **Affects:** 4.3.4  **Attachments:** - [messagingapp.zip](https://jira.spring.io/secure/attachment/23662/messagingapp.zip) (_6.92 kB_)  **Issue Links:** - #18803 Reactor2TcpClient leaks threads on shutdown","closed","type: enhancement,","spring-projects-issues","2016-12-20T05:44:27Z","2019-01-11T15:17:43Z"
"","18938","Cache documentation does not mention ""sync"" attribute. [SPR-14366]","**[Angus Mezick](https://jira.spring.io/secure/ViewProfile.jspa?name=amezick)** opened **[SPR-14366](https://jira.spring.io/browse/SPR-14366?redirect=false)** and commented  The documentation at http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html does not mention the new sync=true flag as described in this blog post: https://spring.io/blog/2016/03/04/core-container-refinements-in-spring-framework-4-3#cache-abstraction-refinements  This description in the javadocs also left me confused as to what was actually happening.   http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html#sync-- The javadocs say the attribute is a hint to the cache provider (ehcache for me) and the blog post says that the framework(Spring) will handle the blocking of threads.   ---  **Affects:** 4.3 GA  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html","closed","type: documentation,","spring-projects-issues","2016-06-15T15:37:30Z","2016-07-04T10:17:11Z"
"","19563","Behaviour of field injection for List dependencies that are produced and consumed by the same configuration class has changed in 4.3.5 snapshots [SPR-14996]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14996](https://jira.spring.io/browse/SPR-14996?redirect=false)** and commented  I noticed this in 5.0 as well but didn't think too much of it, however I've just noticed that the latest 4.3.5 snapshots exhibit the same change in behaviour.  Here's small application that will reproduce the problem:  ``` package com.example;  import java.util.List;  import javax.annotation.PostConstruct;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.util.Assert;  public class FieldInjectionBehaviorChange {  	public static void main(String[] args) { 		new AnnotationConfigApplicationContext(ExampleConfiguration.class).close(); 	}  	@Configuration 	static class ExampleConfiguration {  		@Autowired(required = false) 		private List things;  		@PostConstruct 		public void postConstruct() { 			Assert.notNull(this.things); 		}  		@Bean 		public Thing thing() { 			return new Thing() {}; 		}  	}  	interface Thing {  	}  } ```  It will run successfully with 4.3.4.RELEASE and fail with 4.3.5.BUILD-SNAPSHOT due to `things` being `null`.  It also works without `required=false` with 4.3.4.RELEASE but fails with a `NoSuchBeanDefinitionException` with 4.3.5.BUILD-SNAPSHOT.  It works with both 4.3.4.RELEASE and 4.3.5.BUILD-SNAPSHOT if the field is `Thing` rather than `List`.  ---  **Affects:** 4.3.5  **Issue Links:** - #19532 Self reference fallback in 4.3 is not meant to apply to collection elements - #19692 Modification in AbstractAutowireCapableBeanFactory to prevent stackoverflow errors causes context not to load.  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/547b9638dc851e8b25bf719abc30acc1a49b3ff6, https://github.com/spring-projects/spring-framework/commit/4571975414ffa497582f1d549a0a282277c88616","closed","in: core,","spring-projects-issues","2016-12-08T20:53:55Z","2019-01-11T19:13:42Z"
"","19546","Provide computeIfAbsent-like method on ObjectProvider [SPR-14980]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14980](https://jira.spring.io/browse/SPR-14980?redirect=false)** and commented  When using `ObjectProvider` with constructor injection, I quite often find myself doing something like this:  ``` public class FooConfiguration {  	private final List fooCustomizers;  	public FooConfiguration(ObjectProvider> fooCustomizersProvider) { 		List providedCustomizers = fooCustomizersProvider.getIfAvailable(); 		this.fooCustomizers = providedCustomizers == null ? Collections.emptyList() 				: providedCustomizers; 	}  } ```  I'd quite like to be able to avoid the temporary storage in `providedCustomizers` and do something like this instead:  ``` public FooConfiguration(ObjectProvider> fooCustomizersProvider) { 	this.fooCustomizers = fooCustomizersProvider.computeIfAbsent(() -> { 		return Collections.emptyList(); 	}); } ```  ---  **Affects:** 5.0 M3  **Issue Links:** - #19398 Add a functional way to register a bean - #20550 Lambda-based consumption of an ObjectProvider's object when available","closed","type: enhancement,","spring-projects-issues","2016-12-05T10:03:17Z","2019-01-11T19:14:43Z"
"","19503","PathMatchingResourcePatternResolver finds duplicate resources for executable jars but not for executable wars [SPR-14936]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14936](https://jira.spring.io/browse/SPR-14936?redirect=false)** and commented  PathMatchingResourcePatternResolver behaves differently depending on the file extension of a Spring Boot executable archive that's been launched with `java -jar`. If the archive is a `.jar` file duplicate resources will be found, whereas if the archive is a `.war` file they will not. This is due to the logic in `addAllClassLoaderJarRoots` that provides special treatment for `.jar` files.  I'll attach an application that reproduces the problem.  If you package and run it  ``` mvn clean package && java -jar duplicate-resources-0.0.1-SNAPSHOT.jar ```  You should see the following output:  ``` jar:file:/Users/awilkinson/duplicate-resources-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/a.zzz jar:file:/Users/awilkinson/duplicate-resources-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/nested/b.zzz jar:file:/Users/awilkinson/duplicate-resources-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes/a.zzz jar:file:/Users/awilkinson/duplicate-resources-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes/nested/b.zzz ```  Note that there are two URLs for `a.zzz` and `b.zzz`, one found via the nested `BOOT-INF/classes` ""archive"" and the other found via the jar root. We only want the entries found via the nested archive.  If you run it as a `.war` file:  ``` cp duplicate-resources-0.0.1-SNAPSHOT.jar duplicate-resources-0.0.1-SNAPSHOT.war && java -jar duplicate-resources-0.0.1-SNAPSHOT.war ```  The duplicates are gone and we get the desired result:  ``` jar:file:/Users/awilkinson/duplicate-resources-0.0.1-SNAPSHOT.war!/BOOT-INF/classes!/a.zzz jar:file:/Users/awilkinson/duplicate-resources-0.0.1-SNAPSHOT.war!/BOOT-INF/classes!/nested/b.zzz ```  I'd like the behaviour to be consistent, irrespective of the file extension that's used for the archive passed to `java -jar`.  One final data point. If the archive is unpacked:  ``` mkdir unpacked && cd unpacked && unzip ../duplicate-resources-0.0.1-SNAPSHOT.jar ```  And then run:  ``` java -cp . org.springframework.boot.loader.JarLauncher ```  The duplicates do not occur:  ``` file:/Users/awilkinson/unpacked/BOOT-INF/classes/a.zzz file:/Users/awilkinson/unpacked/BOOT-INF/classes/nested/b.zzz ```  I suspect this is because the URLs are identical, i.e. they do not have the subtle `/` vs `!/` difference. This may give us an avenue to explore for fixing the problem in Spring Boot, but I'd like this to be investigated on the Framework side too as the file extension-specific behaviour is rather surprising.  ---  **Affects:** 4.3.4  **Attachments:** - [duplicate-resources.zip](https://jira.spring.io/secure/attachment/23630/duplicate-resources.zip) (_2.77 kB_)  **Issue Links:** - #19501 PathMatchingResourcePatternResolver provides duplicate resources with relative URL  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f16d453805c2f76938b2a01d86bc9787ab384f28, https://github.com/spring-projects/spring-framework/commit/b3e94dc747715b468775312458ac0c9eef6f89f8","closed","type: enhancement,","spring-projects-issues","2016-11-23T10:16:16Z","2019-01-11T19:18:23Z"
"","19457","Content-based versions are not inserted into resource URLs in an error page [SPR-14891]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14891](https://jira.spring.io/browse/SPR-14891?redirect=false)** and commented  The problem appears to be that `ResourceUrlEncodingFilter` is a `OncePerRequestFilter`. The response wrapper is applied for the initial dispatch of the request, but then isn't applied when the request is being dispatched to render the error page. The referenced Boot issue includes a sample application that will reproduce the problem.   ---  **Affects:** 4.3.4  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/7348","closed","type: bug,","spring-projects-issues","2016-11-09T15:41:41Z","2016-12-21T11:54:09Z"
"","19438","NoSuchMethodError when using AnnotatedElementAdapter with Java 7 [SPR-14872]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14872](https://jira.spring.io/browse/SPR-14872?redirect=false)** and commented  The changes made in [this commit](https://github.com/spring-projects/spring-framework/commit/62918ca7797a9c7822fdf960c63a29b901c2343b#diff-fc2c4d51949d677cc8ad3d926d0186e9) don't appear to work on Java 7. It looks like `AnnotatedElementAdapter` is relying on `isAnnotationPresent(Class)` being provide as a default method. That's not the case when running on Java 7. An example of the failure is:  ``` java.lang.AbstractMethodError: org.springframework.core.convert.TypeDescriptor$AnnotatedElementAdapter.isAnnotationPresent(Ljava/lang/Class;)Z 	at org.springframework.core.annotation.AnnotatedElementUtils.isAnnotated(AnnotatedElementUtils.java:272) 	at org.springframework.core.convert.TypeDescriptor.hasAnnotation(TypeDescriptor.java:243) 	at org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter.matches(FormattingConversionService.java:246) 	at org.springframework.core.convert.support.GenericConversionService$ConvertersForPair.getConverter(GenericConversionService.java:668) 	at org.springframework.core.convert.support.GenericConversionService$Converters.getRegisteredConverter(GenericConversionService.java:566) 	at org.springframework.core.convert.support.GenericConversionService$Converters.find(GenericConversionService.java:551) 	at org.springframework.core.convert.support.GenericConversionService.getConverter(GenericConversionService.java:269) 	at org.springframework.core.convert.support.GenericConversionService.canConvert(GenericConversionService.java:159) 	at org.springframework.core.convert.support.GenericConversionService.canConvert(GenericConversionService.java:149) 	at org.springframework.binding.convert.service.GenericConversionService.getConversionExecutor(GenericConversionService.java:159) 	at org.springframework.binding.convert.service.GenericConversionService.executeConversion(GenericConversionService.java:345) 	at org.springframework.binding.expression.el.BindingValueExpression.convertValueIfNecessary(BindingValueExpression.java:99) 	at org.springframework.binding.expression.el.BindingValueExpression.getValue(BindingValueExpression.java:55) 	at org.springframework.binding.expression.el.ELExpression.getValue(ELExpression.java:54) 	at org.springframework.binding.expression.el.ELExpressionParserTests.testGetValueWithCoersion(ELExpressionParserTests.java:160) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:606) 	at junit.framework.TestCase.runTest(TestCase.java:176) 	at junit.framework.TestCase.runBare(TestCase.java:141) 	at junit.framework.TestResult$1.protect(TestResult.java:122) 	at junit.framework.TestResult.runProtected(TestResult.java:142) 	at junit.framework.TestResult.run(TestResult.java:125) 	at junit.framework.TestCase.run(TestCase.java:129) 	at junit.framework.TestSuite.runTest(TestSuite.java:252) 	at junit.framework.TestSuite.run(TestSuite.java:247) 	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86) 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86) 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49) 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:64) 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:50) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:606) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) 	at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) 	at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) 	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) 	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:106) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:606) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) 	at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:360) 	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54) 	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) 	at java.lang.Thread.run(Thread.java:745) ```  ---  **Affects:** 4.3.4  **Issue Links:** - #19410 AnnotationFormatterFactory should support `@AliasFor`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/17863dfbda56f1a9d820d5dd550ca9e6d8d7b01a, https://github.com/spring-projects/spring-framework/commit/be853d466b406b7f6a66420158b5eba1de2fe267","closed","in: core,","spring-projects-issues","2016-11-02T12:59:46Z","2019-01-13T05:19:10Z"
"","19382","Allow type produced by ScopedProxyFactoryBean to be determined before singleton is created [SPR-14816]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14816](https://jira.spring.io/browse/SPR-14816?redirect=false)** and commented  We have some code in Spring Boot that looks up beans using `beanFactory.getBeanNamesForType(type, true, false);`. It does so during application context refresh. It fails to find any scoped beans (in this specific case they're scoped due to Spring Cloud's `@RefreshScope`). If the call is made once refresh has completed, the scoped beans are found.  This simplified example should illustrate the described behaviour:  ``` package com.example;  import java.util.Arrays;  import javax.annotation.PostConstruct;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Scope; import org.springframework.context.annotation.ScopedProxyMode;  @SpringBootApplication public class Gh7150Application {      @Autowired     private ApplicationContext applicationContext;      public static void main(String[] args) {         String[] names = SpringApplication.run(Gh7150Application.class, args).getBeanNamesForType(MyBean.class, true, false);         System.out.println(""Names post refresh: "" + Arrays.toString(names));     }      @PostConstruct     public void postConstruct() {         String[] names = this.applicationContext.getBeanNamesForType(MyBean.class, true, false);         System.out.println(""Names in post construct: "" + Arrays.toString(names));     }      @Bean     @Scope(scopeName=""example"", proxyMode=ScopedProxyMode.TARGET_CLASS)     public MyBean myBean() {         return new MyBean();     }      private static class MyBean {      }  } ```  Digging into it a bit, the problem appears to be that a singleton hasn't been created for the `ScopedProxyFactoryBean` and the bean definition contains insufficient information to determine the type of bean that will be produced. However, all of the information does appear to be available. Would it be possible to enhance the container such this information is used and the bean can be found before it's created?  I believe we need this enhancement to fix the referenced Spring Boot issue. If appropriate, a change in 4.3.x would be much appreciated.  ---  **Affects:** 4.3.3  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/7150  **Issue Links:** - #19458 Injecting bean in configurable class using load-time weaving broken when referenced on scoped-proxy class - #19608 Regression with poolTargetSource and scoped proxy","closed","type: enhancement,","spring-projects-issues","2016-10-17T10:02:01Z","2019-01-11T17:29:23Z"
"","19332","SingleConnectionFactory only works with JMS 2.0 [SPR-14766]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14766](https://jira.spring.io/browse/SPR-14766?redirect=false)** and commented  Using `SingleConnectionFactory` with JMS 1.1 results in a `NoClassDefFoundError`:  ``` java.lang.NoClassDefFoundError: javax/jms/JMSContext 	at java.lang.Class.getDeclaredMethods0(Native Method) ~[na:1.8.0_102] 	at java.lang.Class.privateGetDeclaredMethods(Class.java:2701) ~[na:1.8.0_102] 	at java.lang.Class.getDeclaredMethods(Class.java:1975) ~[na:1.8.0_102] 	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:628) ~[spring-core-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.util.ReflectionUtils.doWithLocalMethods(ReflectionUtils.java:505) ~[spring-core-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.buildLifecycleMetadata(InitDestroyAnnotationBeanPostProcessor.java:205) ~[spring-beans-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.findLifecycleMetadata(InitDestroyAnnotationBeanPostProcessor.java:186) ~[spring-beans-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(InitDestroyAnnotationBeanPostProcessor.java:124) ~[spring-beans-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(CommonAnnotationBeanPostProcessor.java:295) ~[spring-context-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyMergedBeanDefinitionPostProcessors(AbstractAutowireCapableBeanFactory.java:940) ~[spring-beans-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:518) ~[spring-beans-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) ~[spring-beans-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) ~[spring-beans-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) ~[spring-beans-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:741) ~[spring-beans-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861) ~[spring-context-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541) ~[spring-context-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:736) [spring-boot-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT] 	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369) [spring-boot-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:313) [spring-boot-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1161) [spring-boot-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1150) [spring-boot-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT] 	at com.example.Application.main(Application.java:13) [classes/:na] Caused by: java.lang.ClassNotFoundException: javax.jms.JMSContext 	at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_102] 	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_102] 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[na:1.8.0_102] 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_102] 	... 25 common frames omitted ```  I believe it's happening when introspecting the various overloaded `createContext` methods.   ---  **Affects:** 5.0 M2","closed","status: invalid,","spring-projects-issues","2016-09-29T08:32:54Z","2019-01-14T04:37:44Z"
"","19315","DefaultPersistenceUnitManager may configure a persistence unit root URL that does not point to a file or directory [SPR-14749]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14749](https://jira.spring.io/browse/SPR-14749?redirect=false)** and commented  When using a custom class loader, a call to `getResource("""")` may return a URL that points inside a JAR. This [may become the case in Spring Boot](https://github.com/spring-projects/spring-boot/issues/7003), for example. This adversely affects `DefaultPersistenceUnitManager.determineDefaultPersistenceUnitRootUrl()` which returns a URL that Hibernate then logs a warning about.  It looks like the same `ResourceUtils.isJarURL(url)` and `ResourceUtils.extractJarFileURL(url)` arrangement that is in `buildDefaultPersistenceUnitInfo` may also be appropriate in `determineDefaultPersistenceUnitRootUrl()`.   ---  **Affects:** 4.3.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb7d20762c0c45740319ac526c86c204bc1d18b7, https://github.com/spring-projects/spring-framework/commit/acdf139137acce1f6a4c323db0a5aa8919165a50","closed","type: bug,","spring-projects-issues","2016-09-26T10:02:16Z","2016-11-07T22:01:23Z"
"","19230","Performance regression when scheduling is enabled and context contains URL beans [SPR-14666]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14666](https://jira.spring.io/browse/SPR-14666?redirect=false)** and commented  When scheduling is enabled and the context contains URL beans, context refresh becomes very slow. It appears to be due to [this change](https://github.com/spring-projects/spring-framework/commit/ab478d14fa8125daf1c4165e6d7ca2cccd0838e9) which results in `hashCode` being called on each bean as a result of the new `requiresDestruction` method. When the bean is a `URL` this causes a host name look up, the stack of which is:  ``` java.lang.Thread.State: RUNNABLE 	at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method) 	at java.net.InetAddress$2.lookupAllHostAddr(InetAddress.java:907) 	at java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1302) 	at java.net.InetAddress.getAllByName0(InetAddress.java:1255) 	at java.net.InetAddress.getAllByName(InetAddress.java:1171) 	at java.net.InetAddress.getAllByName(InetAddress.java:1105) 	at java.net.InetAddress.getByName(InetAddress.java:1055) 	at java.net.URLStreamHandler.getHostAddress(URLStreamHandler.java:436) 	- locked <0x00000007ab7abdf0> (a sun.net.www.protocol.http.Handler) 	at java.net.URLStreamHandler.hashCode(URLStreamHandler.java:353) 	at java.net.URL.hashCode(URL.java:878) 	- locked <0x00000007ab84c240> (a java.net.URL) 	at java.util.AbstractList.hashCode(AbstractList.java:541) 	at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936) 	at java.util.concurrent.ConcurrentHashMap.containsKey(ConcurrentHashMap.java:964) 	at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.requiresDestruction(ScheduledAnnotationBeanPostProcessor.java:423) 	at org.springframework.beans.factory.support.DisposableBeanAdapter.hasApplicableProcessors(DisposableBeanAdapter.java:431) 	at org.springframework.beans.factory.support.AbstractBeanFactory.requiresDestruction(AbstractBeanFactory.java:1628) 	at org.springframework.beans.factory.support.AbstractBeanFactory.registerDisposableBeanIfNecessary(AbstractBeanFactory.java:1645) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:586) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	- locked <0x000000078135afd0> (a java.util.concurrent.ConcurrentHashMap) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:776) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541) 	- locked <0x0000000780e56240> (a java.lang.Object) 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759) 	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:313) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1185) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1174) 	at de.malkusch.issue6813.Application.main(Application.java:10) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:483) 	at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:483) 	at java.lang.Thread.run(Thread.java:745) ```  See the referenced Spring Boot issue for more details and for a sample project that reproduces the problem.  ---  **Affects:** 4.3.2  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/6813  **Issue Links:** - #17470 `@Scheduled` methods in `@Lazy` beans are not scheduled - #16830 ScheduledAnnotationBeanPostProcessor should unregister tasks on destruction of individual beans  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/480cd2c2f00491b1700ac9bfc24ef3215a15554d, https://github.com/spring-projects/spring-framework/commit/bd24b97bd3df75e811c7b2ca07e65c6bfb8c90d6  1 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2016-09-03T10:34:15Z","2019-01-13T05:22:29Z"
"","19146","When favorPathExtension is false ResourceHttpRequestHandler serves resources with different content type in 4.3 compared to 4.2 [SPR-14577]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14577](https://jira.spring.io/browse/SPR-14577?redirect=false)** and commented  As a result of [this change](https://github.com/spring-projects/spring-framework/commit/f1622569065374352b44a8e8dee9a16bbacef5a7), when favoring of path extensions is disabled `ResourceHttpRequestHandler` serves static resources with a content type based on the request's accept header. In the referenced Spring Boot issue this leads to HTML being served as `application/json` as the accept header was `Accept: application/json,text/plain,\*/\*`. With 4.2.x, the HTML page is served as `text/html` as expected.  I've attached a small Spring Boot application that reproduces the problem. It's configured to use Spring Framework 4.3.2 in order to reproduce the problem. Removing the override of the `spring.version` property from the pom will show the old, desired behaviour with Spring Framework 4.2.x.  With Spring Framework 4.3.2:  ``` $ curl -I localhost:8080/ -H ""Accept: application/json,text/plain,*/*"" HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Last-Modified: Wed, 10 Aug 2016 09:49:22 GMT Accept-Ranges: bytes Content-Type: application/json;charset=UTF-8 Content-Language: en-US Content-Length: 7 Date: Wed, 10 Aug 2016 09:49:32 GMT ```  With Spring Framework 4.2:  ``` $ curl -I localhost:8080/ -H ""Accept: application/json,text/plain,*/*"" HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Last-Modified: Wed, 10 Aug 2016 10:44:33 GMT Accept-Ranges: bytes Content-Type: text/html;charset=UTF-8 Content-Language: en-US Content-Length: 7 Date: Wed, 10 Aug 2016 10:44:45 GMT ```  ---  **Affects:** 4.3.2  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/6562  **Attachments:** - [gh-6562.zip](https://jira.spring.io/secure/attachment/23499/gh-6562.zip) (_53.13 kB_)  **Issue Links:** - #18233 ResourceHttpRequestHandler does not take into account mime types configured in WebMvcConfigurerAdapter - #19417 ResourceHttpRequestHandler no longer works as prototype bean","closed","type: regression,","spring-projects-issues","2016-08-10T10:51:12Z","2019-01-11T18:04:11Z"
"","19144","Calling Validator.forExecutables throws an AbstractMethodError when using LocalValidatorFactoryBean and Hibernate Validator 5.2 [SPR-14575]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14575](https://jira.spring.io/browse/SPR-14575?redirect=false)** and commented  When using Hibernate Validator 5.2, if a `LocalValidatorFactoryBean` is added to the context and it's injected as a `Validator`, calls to `forExecutables` fail with an `AbstractMethodError`.  Hibernate Validator 5.2 implements Bean Validation 1.1 and, judging by the test dependencies, is intended to be supported by Spring Framework 4.3 (and 4.2). However, that's not the entirely the case as `SpringValidatorAdapter` only implements Bean Validation 1.0 and therefore doesn't implement `Validator.forExecutables`.  Note, AFAIK this is only a theoretical problem. It was raised on Gitter by a user of the IO Platform who noticed the potential mismatch.   ---  **Affects:** 4.2.7, 4.3.2","closed","status: declined,","spring-projects-issues","2016-08-09T14:50:42Z","2019-01-12T16:34:01Z"
"","19073","Non-helpful NoSuchBeanDefinitionException rather than BeanNotOfRequiredTypeException due to creation order [SPR-14504]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14504](https://jira.spring.io/browse/SPR-14504?redirect=false)** and commented  With reference to #19047, I am trying to add a `FailureAnalyzer` to Spring Boot that outputs some advice when refresh fails due to a `BeanNotOfRequiredTypeException`. In doing so I have observed an unpleasant side-effect of bean creation ordering not being deterministic. Sometimes refresh will fail with a `BeanNotOfRequiredTypeException` as the root cause and other times the root cause will be a `NoSuchBeanDefinitionException`. When it's the latter there is no information to help you figure out why there was no such bean.  Here's a small class that demonstrates the problem caused by the non-deterministic ordering:  ``` public class NonDeterministicBeanCreationOrdering {  	public static void main(String[] args) { 		try { 			new AnnotationConfigApplicationContext(JdkProxyConfiguration.class).close(); 		} 		catch (Exception ex) { 			Throwable rootCause = getRootCause(ex); 			if (!(rootCause instanceof BeanNotOfRequiredTypeException)) { 				throw new IllegalStateException(""Unexpected root cause"", rootCause); 			} 		} 	}  	private static Throwable getRootCause(Throwable candidate) { 		while (candidate.getCause() != null) { 			candidate = candidate.getCause(); 		} 		return candidate; 	}  	@Configuration 	@EnableAsync 	static class JdkProxyConfiguration {  		@Bean 		public AsyncBean asyncBean() { 			return new AsyncBean(); 		}  		@Bean 		public AsyncBeanUser user(AsyncBean bean) { 			return new AsyncBeanUser(bean); 		}  	}  	static class AsyncBean implements SomeInterface {  		@Async 		public void foo() {  		}  		@Override 		public void bar() {  		}  	}  	static interface SomeInterface {  		void bar();  	}  	static class AsyncBeanUser {  		AsyncBeanUser(AsyncBean asyncBean) { 		}  	}  } ```  If you run it a few times you should see the two different root causes. The key thing is the order in which `asyncBean` and `user` are created.  If `asyncBean` is created first its proxy is stored in the bean factory and, subsequently, the attempt to find an `AsyncBean` instance for injection into the `user` bean method fails as there's no matching bean.  If `user` is created first then its creation triggers the creation of `asyncBean`. I think this means that `asyncBean` is directly available to be passed into the `user` bean method rather than requiring a bean factory lookup. When this fails as the types don't actually match a `BeanNotOfRequiredTypeException` is thrown with details of the actual type.  Ideally, the ordering would be deterministic, but I realise that's almost certainly not possible in 4.3 and perhaps at all. Failing that, some information in the `NoSuchBeanDefinitionException` that points towards the proxied `asyncBean` would be very useful.  ---  **Affects:** 4.3.1  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/6434  **Issue Links:** - #19047 Mis-proxying of Mockito mock and poor diagnostics for type mismatch on proxy injection - #19074 Deterministic and JVM-independent `@Bean` registration order within Class-reflected configuration classes - #19527 Consistent autowiring behavior for specifically typed injection points against loosely typed `@Bean` methods","closed","type: enhancement,","spring-projects-issues","2016-07-21T14:42:27Z","2019-01-13T05:24:03Z"
"","19063","Pointcut using @target causes unexpected proxy creation [SPR-14494]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14494](https://jira.spring.io/browse/SPR-14494?redirect=false)** and commented  I _think_ this is a bug but I am at the limits of my rusty AspectJ knowledge.  When `@EnableAspectJAutoProxy` is used with a pointcut that uses `@target` to apply advice to classes annotated with a particular annotation, proxies are created for classes that do not have the annotation. My expectation is that proxies are only created for classes that do have the annotation.  For classes that do not have the required annotation, AspectJ returns a maybe match. I had thought that `AspectJExpressionPointcut` would then turn this into `false` due to this logic in `matches(Method, Class, boolean)`:  ``` // A match test returned maybe - if there are any subtype sensitive variables // involved in the test (this, target, at_this, at_target, at_annotation) then // we say this is not a match as in Spring there will never be a different // runtime subtype. RuntimeTestWalker walker = getRuntimeTestWalker(shadowMatch); return (!walker.testsSubtypeSensitiveVars() || walker.testTargetInstanceOfResidue(targetClass)); ```  However, that's not the case.  There's a sample project in the referenced Spring Boot issue that reproduces the issue. I have also attached another project that simplifies things a little and takes Boot out of the picture.   ---  **Affects:** 4.2.7  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/6431  **Attachments:** - [aop-at-target-problem.zip](https://jira.spring.io/secure/attachment/23448/aop-at-target-problem.zip) (_2.11 kB_)","closed","status: bulk-closed,","spring-projects-issues","2016-07-20T11:00:19Z","2019-01-12T02:25:28Z"
"","19047","Mis-proxying of Mockito mock and poor diagnostics for type mismatch on proxy injection [SPR-14478]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14478](https://jira.spring.io/browse/SPR-14478?redirect=false)** and commented  There's a small sample application in the referenced Spring Boot issue that reproduces the problem.  There's a Mockito-created mock bean in the context. Due to `@EnableAsync` this bean is proxied using a JDK proxy (`proxyTarget` class is `false`). An attempt is then made to autowire the mocked bean into another class. This fails because the JDK proxy is for a Mockito interface. This in itself could perhaps be considered a problem as the proxy has the wrong form.  The proxy is considered to be a viable candidate for autowiring due to `predictBeanType` on `AbstractAutowireCapableBeanFactory` returning the type of the underlying bean, ignoring the proxying that'll be performed by `AsyncAnnotationBeanPostProcessor`. Ultimately this results in a `BeanInstantiationException` that doesn't shed much light on what's actually gone wrong:  ``` Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.example.TestController]: Illegal arguments for constructor; nested exception is java.lang.IllegalArgumentException: argument type mismatch 	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:156) ~[spring-beans-4.3.1.RELEASE.jar:4.3.1.RELEASE] 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:122) ~[spring-beans-4.3.1.RELEASE.jar:4.3.1.RELEASE] 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:271) ~[spring-beans-4.3.1.RELEASE.jar:4.3.1.RELEASE] 	... 41 common frames omitted Caused by: java.lang.IllegalArgumentException: argument type mismatch 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_60] 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_60] 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_60] 	at java.lang.reflect.Constructor.newInstance(Constructor.java:422) ~[na:1.8.0_60] 	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:147) ~[spring-beans-4.3.1.RELEASE.jar:4.3.1.RELEASE] 	... 43 common frames omitted ```  There are three areas where things are going wrong, each probably a knock-on effect of the previous one:  1. The proxy creation goes wrong and creates a proxy for a Mockito interface rather than anything that was actually implemented by the underlying bean 2. The type prediction is wrong and returns a type of which the proxied bean is not an instance 3. The diagnostics for the resulting `IllegalArgumentException` don't reveal anything about the arguments that were passed to the constructor and their types so you can't immediately see why it might have failed.  ---  **Affects:** 4.3.1  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/6405  **Issue Links:** - #18515 An ObjectFactory variant with lenient not-unique handling - #16337 Auto-proxy creation should not consider GroovyObject as a user-specified interface - #18540 Improve core container exception meta-data - #18529 ObjectFactory lacks method for getting bean with specified constructor arguments - #19084 Consider target-class proxy mode by default - #19446 Upgrade to Mockito 2.2 - #19073 Non-helpful NoSuchBeanDefinitionException rather than BeanNotOfRequiredTypeException due to creation order  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0e3f0bd9d03285e620a689c0c686c595505f66a7, https://github.com/spring-projects/spring-framework/commit/503d65d57034674f3ae0b225d785791e66e52929  0 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2016-07-18T15:20:14Z","2019-01-11T16:22:43Z"
"","18937","NoSuchMethodError for SessionFactoryImplementor.getProperties() with Hibernate 5.1 [SPR-14365]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14365](https://jira.spring.io/browse/SPR-14365?redirect=false)** and commented  The signature of `SessionFactoryImplementor.getProperties()` changed in 5.2 to return `Map` rather than `Properties`. This leads to a `NoSuchMethodError` with 5.1 (and 5.0 too, I presume):  ``` java.lang.NoSuchMethodError: org.hibernate.engine.spi.SessionFactoryImplementor.getProperties()Ljava/util/Map; 	at org.springframework.orm.hibernate5.SessionFactoryUtils.getDataSource(SessionFactoryUtils.java:153) 	at org.springframework.orm.hibernate5.HibernateTransactionManager.afterPropertiesSet(HibernateTransactionManager.java:353) 	at org.springframework.orm.hibernate5.HibernateTransactionManager.(HibernateTransactionManager.java:145) ```  ---  **Affects:** 4.3 GA  **Issue Links:** - #18899 Support for Hibernate ORM 5.2 - #18996 HibernateTemplate not binary-compatible with Hibernate 5.0/5.1's Query type - [SWF-1685](https://jira.spring.io/browse/SWF-1685) HibernateFlowExecutionListener is incompatible with Hibernate 5  1 votes, 8 watchers","closed","type: bug,","spring-projects-issues","2016-06-15T11:25:02Z","2019-01-11T16:02:22Z"
"","19536","Simplify options for strict encoding of URI variable when using UriComponentsBuilder [SPR-14970]","**[Andrew Garland](https://jira.spring.io/secure/ViewProfile.jspa?name=aeg)** opened **[SPR-14970](https://jira.spring.io/browse/SPR-14970?redirect=false)** and commented  Because of past (html4) W3C recommendation, some web servers treat semi-colon as a separator of query parameters in addition to &. https://www.w3.org/TR/1999/REC-html401-19991224/appendix/notes.html#h-B.2.2  When interacting with such servers, the HierarchicalUriComponents.encodeQueryParams (and by extension .encode) will not produce a usable URL.  For example, it will generate https://192.168.46.168/query/?name_eq=C;D  but the server will fail to find an object named 'C;D'  If the URL generated were https://192.168.46.168/query/?name_eq=C%3BD  the server will return the correct object.  I don't see the harm in UTF-8 percent encoding the semi-colon in query parameters in all cases.  If there is such a downside, then there at least needs to be a way to customize the behavior in order to properly interact with such servers.  —  A more ambitious change would be to UTF-8 Percent encode all of the characters noted as part of the userinfo encode set in the html5 URL spec https://url.spec.whatwg.org FWIW, I could not find any html5 recommendations about using the semi-colon similar to the one referenced above.    ---  **Affects:** 4.2.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb3b1f2fe200f93253af49d413d037a6ccc4be1f","closed","type: enhancement,","spring-projects-issues","2016-12-01T13:48:10Z","2017-02-23T09:29:12Z"
"","19533","RestTemplate.exchange throws IllegalArgumentException instead of RestClientException when a template cannot be expanded [SPR-14966]","**[Andrew Garland](https://jira.spring.io/secure/ViewProfile.jspa?name=aeg)** opened **[SPR-14966](https://jira.spring.io/browse/SPR-14966?redirect=false)** and commented  When incorrect number of arguments are passed into the exchange method, the code currently throws IllegalArgumentException.  I think this should be ResourceAccessException or RestClientException since that better reflects the likelihood that a caller would want to catch this vs catching a runtime exception.  Sample top of the stacktrace.  java.lang.IllegalArgumentException: Not enough variable values available to expand '|' at org.springframework.web.util.UriComponents$VarArgsTemplateVariables.getValue(UriComponents.java:327) at org.springframework.web.util.UriComponents.expandUriComponent(UriComponents.java:230) at org.springframework.web.util.HierarchicalUriComponents.expandQueryParams(HierarchicalUriComponents.java:343) at org.springframework.web.util.HierarchicalUriComponents.expandInternal(HierarchicalUriComponents.java:329) at org.springframework.web.util.HierarchicalUriComponents.expandInternal(HierarchicalUriComponents.java:47) at org.springframework.web.util.UriComponents.expand(UriComponents.java:163) at org.springframework.web.util.DefaultUriTemplateHandler.expand(DefaultUriTemplateHandler.java:101) at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:556) at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:475)   ---  **Affects:** 4.2.6","closed","status: bulk-closed,","spring-projects-issues","2016-11-30T21:14:44Z","2019-01-12T00:11:53Z"
"","19590","RequestHeader annotation does not work if it's put on an interface [SPR-15023]","**[Andrei Sfat](https://jira.spring.io/secure/ViewProfile.jspa?name=sfat)** opened **[SPR-15023](https://jira.spring.io/browse/SPR-15023?redirect=false)** and commented  Basically, I have a controller which is an interface where I put every annotations on that interface and when I implement that interface, apparently RequestHeader is not picked up. If I repeat myself and put the RequestHeader in the implementation, it will work fine.  Shouldn't this annotation work the same as the other annotations? I think I've tried almost all annotations and they are picked up correctly.  I've attached a example.  ---  **Affects:** 4.2.6  **Attachments:** - [HeaderRequestNotWorking.zip](https://jira.spring.io/secure/attachment/23657/HeaderRequestNotWorking.zip) (_937 bytes_)  **Issue Links:** - #15682 Enable REST controller method parameter annotations on an interface (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2016-12-15T14:41:03Z","2019-01-12T16:45:18Z"
"","19594","Release of 4.3.x supporting Jetty 9.4.0.v20161208+ [SPR-15027]","**[Andreas Voellmy](https://jira.spring.io/secure/ViewProfile.jspa?name=andreasv)** opened **[SPR-15027](https://jira.spring.io/browse/SPR-15027?redirect=false)** and commented  The Spring framework 4.3.x branch has added support for Jetty version 9.4.v20161208, but there doesn't yet seem to be a tag and release for this branch with these recent updates.  It would be great to have a release with these recent updates. This update of Jetty adds some important features, including proxy support for websockets.  ---  **Issue Links:** - #19507 Support for Jetty 9.4 (and 9.3.15+) (_**""duplicates""**_)","closed","type: task,","spring-projects-issues","2016-12-16T18:43:50Z","2019-01-11T15:19:13Z"
"","19400","No bean of type ConfigurableEnvironment in AbstractTestNGSpringContextTests [SPR-14834]","**[Andreas Höhmann](https://jira.spring.io/secure/ViewProfile.jspa?name=ahoehma)** opened **[SPR-14834](https://jira.spring.io/browse/SPR-14834?redirect=false)** and commented  I have spring based integration tests, all these tests are based on a base test class which extends org.springframework.test.context.testng.AbstractTestNGSpringContextTests.  If I run all these IT's ... then ""sometimes"" (I guess if at least one of the test fails) the following test (not all, strange behavior) are also not successful because the whole spring-context startup crash and that because of a missing bean of type ""ConfigurableEnvironment"" ... yes I have somewhere in the configuration classes code like this:  ```java @Autowired ConfigurableEnvironment environment; ```  And in the real world the application have no problem with that :)  But in the test environment there is something strange ... I have no idea :-/  Here is the ""important"" stuff of that class maybe you see immediately that something is wrong :)  ```java /**  * Base class for integration tests which require a complete Spring context.  *  *   * Takes care of following aspects:  *   * mark as {@link DirtiesContext}  * load environment properties from META-INF/spring-test/hscm-environment.properties (are generated during build or must be  * provided manually in class path)  *   *   *  *   * Loading of environment-properties:  *   * add generated test properties ""classpath:META-INF/spring-test/hscm-environment.properties"" to simulate ""jndi environment"", see  * {@link TestContextLoader}  * add (optional) customized environment-properties for tests, see {@link TestContextLoader}, see {@link TestEnvironmentProperties}  *   *   *  *   * Currently the whole customizing for HSCM IT's are located inside the test-resources:  *   * default: /hscm/src/test/resources/com/siemens/spice/hscm/test/customizing/hscm-test  * default: /hscm/src/test/resources/com/siemens/spice/hscm/test/customizing/pcmplus-test  * for some tests: /hscm/src/test/resources/com/siemens/spice/hscm/test/customizing/hscm-test-freeze  * for some tests: /hscm/src/test/resources/com/siemens/spice/hscm/test/customizing/pcmplus-test-freeze  *   *   *  *   * You can override every property with the help of the {@link TestEnvironmentProperties} annotation.  *   *  * @author Sebastian Paul  * @author Andreas Höhmann  */ @WebAppConfiguration @ContextConfiguration( //   locations = { //       ""classpath:META-INF/spring-test/test-applicationContext.xml"", //       ""classpath:META-INF/spring-test/test-spring-propertyplaceholder.xml"", //   }, loader = AbstractHscmSpringIntegrationTest.TestContextLoader.class) @DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD) @SuppressWarnings(""javadoc"") public abstract class AbstractHscmSpringIntegrationTest extends AbstractTestNGSpringContextTests { ....     // autowired some spring basics  @Autowired   protected transient MockHttpServletRequest request;   @Autowired   protected transient MockHttpServletResponse response;   @Autowired   protected transient WebApplicationContext webApplicationContext;     // but also autowire some core bean which should be available for all tests   @Autowired   protected transient HscmConfigurationManager configurationManager;   @Autowired   protected transient HscmInitializationManager hscmInitializationManager;  ...  @Override   @AfterMethod(alwaysRun = true)   protected final synchronized void springTestContextAfterTestMethod(final Method testMethod) throws Exception {     // FIXME concurrency issues in the TestContext framework - #10532     LOGGER.debug(""Shutdown spring context ..."");     super.springTestContextAfterTestMethod(testMethod);     LOGGER.debug(""Shutdown spring context done"");   }    @Override   @BeforeMethod(alwaysRun = true)   protected final synchronized void springTestContextBeforeTestMethod(final Method testMethod) throws Exception {     // FIXME concurrency issues in the TestContext framework - #10532     LOGGER.debug(""Start spring context ..."");     super.springTestContextBeforeTestMethod(testMethod);     LOGGER.debug(""Start spring context done"");   } ... } ```  ---  **Affects:** 3.2.17  **Issue Links:** - #10800 AbstractTransactionalTestNGSpringContextTests not working as expected when an EJB with TransactionAttribute.REQUIRES_NEW is encountered - #17517 ApplicationContext fails to load in TestNG test if previous test is annotated with `@DirtiesContext` - #15166 Do not serialize ApplicationContext creation in the TestContext framework","closed","in: test,","spring-projects-issues","2016-10-21T10:46:45Z","2019-01-14T04:37:24Z"
"","19312","Access to generic list throws java.lang.IndexOutOfBoundsException: Index: 0, Size: 0 [SPR-14746]","**[Amit Baghel](https://jira.spring.io/secure/ViewProfile.jspa?name=abaghel)** opened **[SPR-14746](https://jira.spring.io/browse/SPR-14746?redirect=false)** and commented  I am using Spring Boot 1.4.0.RELEASE and following is method in Controller.  ```java @RequestMapping(value = ""/postComment"", method = RequestMethod.POST) 		public @ResponseBody String postComment(GenericComments comment) { 			System.out.println(comment.getCommentList()); 			return ""success""; 			 		} ```  GenericComments class is like below.  ```java public class GenericComments { 	private List commentList;  	public List getCommentList() { 		return commentList; 	}  	public void setCommentList(List commentList) { 		this.commentList = commentList; 	} ```  Comment class is like below.  ```java public class Comment {  	private Long id; 	private String message;  	public Long getId() { 		return id; 	}  	public void setId(Long id) { 		this.id = id; 	}  	public String getMessage() { 		return message; 	}  	public void setMessage(String message) { 		this.message = message; 	} } ```  I am calling the Controller method from jsp like below.  ```java","closed","status: bulk-closed,","spring-projects-issues","2016-09-24T09:02:09Z","2019-01-12T02:24:32Z"
"","18870","SettableListenableFuture.setException(Throwable) doesn't work for Error [SPR-14298]","**[Alexis Terrat](https://jira.spring.io/secure/ViewProfile.jspa?name=alexisterrat)** opened **[SPR-14298](https://jira.spring.io/browse/SPR-14298?redirect=false)** and commented  Hi, I encountered a bug using a SettableListenableFuture. When I call future.setException() with a Throwable that is not an Exception, it is set as a result instead. So, it raises a ClassCastException. See the samples below.  And sorry if this is a duplicate btw :)  sample 1 : - code :   SettableListenableFuture\ future = new SettableListenableFuture<>();   Consumer\ printRes = res -> System.out.println(""success "" + res);   Consumer\ printErr = err -> System.out.println(""failure "" + err);   future.addCallback(printRes::accept, printErr::accept);   future.setException(new Throwable(""test""));  - expected output :   failure java.lang.Throwable: test  - actual output :   failure java.lang.ClassCastException: java.lang.Throwable cannot be cast to java.lang.String  sample 2 : - code :   SettableListenableFuture\ future = new SettableListenableFuture<>();   Consumer\ printRes = res -> System.out.println(""success "" + res);   Consumer\ printErr = err -> System.out.println(""failure "" + err);   future.addCallback(printRes::accept, printErr::accept);   future.setException(new Throwable(""test""));  - expected output :   failure java.lang.Throwable: test  - actual output :   success java.lang.Throwable: test    ---  **Affects:** 4.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cc7758869c01eed1d69fa98398344acc11866a9f, https://github.com/spring-projects/spring-framework/commit/a979885d17d3eb18ad1d35bab5c664cfc6d8bd98  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","in: core,","spring-projects-issues","2016-05-23T17:44:34Z","2016-06-10T09:19:13Z"
"","19311","SchedulerFactoryBean's setOverwriteExistingJobs does not reliably work in a cluster [SPR-14745]","**[Alexandru-Constantin Bledea](https://jira.spring.io/secure/ViewProfile.jspa?name=apixandru)** opened **[SPR-14745](https://jira.spring.io/browse/SPR-14745?redirect=false)** and commented  This happens when I want to deploy a spring boot application on a cluster.  What I suspect the problem to be is SchedulerFactoryBean's setOverwriteExistingJobs not offering enough protection.  One node will be initializing the scheduler and it will decide to replace the trigger (breakpoint org.quartz.impl.jdbcjobstore.SimpleTriggerPersistenceDelegate#deleteExtendedTriggerProperties )  Right after it executes this method, the trigger won't be in the database any longer so when another node in the cluster will try to read it (org.quartz.impl.jdbcjobstore.JobStoreSupport#retrieveTrigger) it will fail with the exception below. Because of this exception, the whole application will fail to start (not just the scheduler).  ```java Caused by: org.quartz.JobPersistenceException: Couldn't retrieve trigger: No record found for selection of Trigger with key: ```  I attached the logs (The exception can be found on the Server-1 node after the 4th restart)  For the whole project that demonstrates this issue go to https://github.com/apixandru/case-study/tree/master/spring-boot-quartz  The way that we configure the scheduler is here  ```java  @Bean JobDetailFactoryBean jobFactoryBean() {     JobDetailFactoryBean bean = new JobDetailFactoryBean();     bean.setDurability(true);     bean.setName(""Sampler"");     bean.setJobClass(SampleJob.class);     return bean; }  @Bean SimpleTriggerFactoryBean triggerFactoryBean(JobDetailFactoryBean jobFactoryBean) {     SimpleTriggerFactoryBean bean = new SimpleTriggerFactoryBean();     bean.setName(""Sampler Trigger"");     bean.setRepeatInterval(20_000);     bean.setJobDetail(jobFactoryBean.getObject());     return bean; }  @Bean SchedulerFactoryBean schedulerFactoryBean(SimpleTriggerFactoryBean triggerFactoryBean, DataSource dataSource, Dependency dependency) {     Properties props = new Properties();     props.put(""org.quartz.scheduler.instanceId"", ""AUTO"");     props.put(""org.quartz.jobStore.isClustered"", ""true"");      SchedulerFactoryBean bean = new SchedulerFactoryBean();     bean.setTriggers(triggerFactoryBean.getObject());     bean.setSchedulerName(""Demo Scheduler"");     bean.setSchedulerContextAsMap(Collections.singletonMap(""dependency"", dependency));     bean.setOverwriteExistingJobs(true);     bean.setDataSource(dataSource);     bean.setQuartzProperties(props);      return bean; } ```  This happens a lot on our work servers but it's a lot harder to get locally (possibly due to the fact that the actual servers are dedicated and have a lot more power than my local machine?)  To get the bug on any machine, start one server in debug mode and put a breakpoint on SimpleTriggerPersistenceDelegate.deleteExtendedTriggerProperties and just after it executes, start the second server and you will get this exception  Anyway, I managed to get this error locally as well after about 40 redeploys to my local clustered weblogic server.  ---  **Affects:** 4.3.3  **Reference URL:** http://stackoverflow.com/questions/39673572/spring-quartz-scheduler-race-condition  **Attachments:** - [myserver.log](https://jira.spring.io/secure/attachment/23571/myserver.log) (_38.69 kB_) - [myserver.stdout](https://jira.spring.io/secure/attachment/23570/myserver.stdout) (_9.96 kB_) - [Server-0.log](https://jira.spring.io/secure/attachment/23569/Server-0.log) (_28.62 kB_) - [Server-0.stdout](https://jira.spring.io/secure/attachment/23568/Server-0.stdout) (_50.53 kB_) - [Server-1.log](https://jira.spring.io/secure/attachment/23567/Server-1.log) (_39.90 kB_) - [Server-1.stdout](https://jira.spring.io/secure/attachment/23566/Server-1.stdout) (_58.06 kB_)  **Issue Links:** - #19372 Wait for Quartz jobs to finish before continuing shutdown of singleton beans  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-09-24T07:38:38Z","2019-01-12T02:24:35Z"
"","19422","Possibility to use org.springframework.cache.support.NoOpCacheManager.NoOpCache as public class as NoOpCacheManager [SPR-14856]","**[Alexandre Navarro](https://jira.spring.io/secure/ViewProfile.jspa?name=schumnana)** opened **[SPR-14856](https://jira.spring.io/browse/SPR-14856?redirect=false)** and commented  Possibility to use org.springframework.cache.support.NoOpCacheManager.NoOpCache as public class as NoOpCacheManager.  I just explain my use case to use NoOpCache as a client.  I configure some caches via in my spring-boot microservice. Some are server side, some are client side via interface designed with feign/spring-cloud annotation and `@Cacheable` For server side, I want always to use cache. For client side, depending of my microservice, I want to activate or not some caches, for instance, on a spring-batch microservice I want to cache. Just for information, my different interface of my feign client with `@Cacheable` are shared between the different microservices via client jar of my microservice.  So my configuration should be in some case like  ```     @Bean     public CacheManager cacheManager() {         final SimpleCacheManager cacheManager = new SimpleCacheManager();         cacheManager.setCaches(Arrays.asList(                 new NoOpCacheManager.NoOpCache(""bar""),                 new ConcurrentMapCache(""foo"")));         return cacheManager;     }  ```  Can you just see NoOpCache as public class or have something close. Of course, I can have a basic NoOpCache on my side but it should be by default in spring-cache.   ---  **Affects:** 4.3.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ffa728c23c2b9b1d5630e879680e46dc54ed9f93, https://github.com/spring-projects/spring-framework/commit/1c4433555ad043cead1dc21175cdadef893b1a1b","closed","type: enhancement,","spring-projects-issues","2016-10-26T22:08:56Z","2016-11-07T22:01:24Z"
"","19371","Spring Mvc Annotations in argument of a method (like @Path) annotated with @RequestMapping are not supported when you create a @RestController via an Interface [SPR-14805]","**[Alexandre Navarro](https://jira.spring.io/secure/ViewProfile.jspa?name=schumnana)** opened **[SPR-14805](https://jira.spring.io/browse/SPR-14805?redirect=false)** and commented  Spring Mvc Annotations in argument of a method (like `@Path`) annotated with `@RequestMapping` are not supported when you create a `@RestController` implementation via an Interface annotated  Example to illustrate the problem :  Interface  ``` @RequestMapping(value = UserResource.API_URL , produces = {V2_JSON_VALUE}) @FeignClient(""user"") public interface UserResource {     String API_URL = ""/api/users"";      @RequestMapping(value = ""/{id:.+}"" , method = RequestMethod.GET)     @ResponseBody     User getUser(@PathVariable(""id"") String userId); } ```  Implementation  ``` @RestController(""userRestControllerV2"") public class UserRestController implements UserResource {     public static final String API_URL = ""/api/users"";          public User getUser(String userId) {         return new User(userId);     }  } ```  You have to change the implementation to  ``` public User getUser(@PathVariable(""id"") String userId) {     return new User(userId); } ```  to have a work around. The different annotation (like `@RequestMapping`) on class / method are well recognized.  I really want to use all the annotations in the interface in order to use the same interface between the server (implemented via `@RestController`) and the client (implemented feign via spring-cloud). Very useful when you develop many microservices via spring-boot and spring-cloud (eureka).  Don't hesitate to comment if it is not clear.  ---  **Affects:** 4.3.3  **Issue Links:** - #15682 Enable REST controller method parameter annotations on an interface (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2016-10-14T09:27:27Z","2019-01-12T16:45:25Z"
"","19466","component-scan for .groovy files does not work on JDK 9 [SPR-14900]","**[Alexander](https://jira.spring.io/secure/ViewProfile.jspa?name=chabapok)** opened **[SPR-14900](https://jira.spring.io/browse/SPR-14900?redirect=false)** and commented  ""component-scan"" function not working on java-9 (tested on jdk-9-ea+143) with groovy configuration:  ``` package prob; import org.springframework.context.support.GenericGroovyApplicationContext; public class Main {     public static void main(String[] args) {         GenericGroovyApplicationContext ggac = new GenericGroovyApplicationContext(""classpath:beans.groovy"");         Foo foo = (Foo) ggac.getBean(""foo"");         System.out.println(foo.ok? ""Ok"":""FAIL!"");     } }   package prob; public class Foo {     boolean ok;     @javax.annotation.PostConstruct     public void pc(){         ok = true;     } }  beans.groovy:  import prob.Foo this.beans {     xmlns([ctx:'http://www.springframework.org/schema/context'])     ctx.'component-scan'('base-package':'prob')     foo(Foo) }  ```  java8 output: Ok java9 output: FAIL!   ---  **Affects:** 5.0 M3","closed","status: bulk-closed,","spring-projects-issues","2016-11-11T20:15:44Z","2019-01-12T00:12:00Z"
"","19043","NPE while try to use abstract beans with optional properties [SPR-14474]","**[Alexander](https://jira.spring.io/secure/ViewProfile.jspa?name=chabapok)** opened **[SPR-14474](https://jira.spring.io/browse/SPR-14474?redirect=false)** and commented  Since spring 4.3 there is NPE when i try to use abstract beans with optional properties. NPE was thrown when trying to create bean with parent abstract bean without optional property.  Pls, see attached files (complete example present at github)  ---  **Affects:** 4.3 GA, 4.3.1  **Reference URL:** https://github.com/chabapok/springBugDemo  **Attachments:** - [beans1.groovy](https://jira.spring.io/secure/attachment/23444/beans1.groovy) (_309 bytes_) - [MyCoolBean.java](https://jira.spring.io/secure/attachment/23445/MyCoolBean.java) (_411 bytes_)  **Issue Links:** - #18693 Unable to define empty java.util.Optional bean in spring xml  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/938b56c0fe87dd242967b00dd9fbd54f91b5742f, https://github.com/spring-projects/spring-framework/commit/fe17f8da41ac3f329da751caa69239140f0bf1ff","closed","in: core,","spring-projects-issues","2016-07-17T19:52:01Z","2019-01-11T16:22:27Z"
"","19154","Allow specifying CompilationCustomizer for Groovy based beans [SPR-14585]","**[Alexander Zobkov](https://jira.spring.io/secure/ViewProfile.jspa?name=alexander.zobkov)** opened **[SPR-14585](https://jira.spring.io/browse/SPR-14585?redirect=false)** and commented  Groovy (since 1.8) supports customizing compilation process. For example: * adding various types of imports to the compilation unit:http://docs.groovy-lang.org/latest/html/api/org/codehaus/groovy/control/customizers/ImportCustomizer.html, * applying AST transformations without specifing them in sources:   http://docs.groovy-lang.org/latest/html/gapi/org/codehaus/groovy/control/customizers/ASTTransformationCustomizer.html  Adding support for this feature allows to increase expressiveness of source files for groovy beans by hiding ""noise"" of explicit imports and AST annotations. With usage of DSL and groovy syntax sugar, source files for groovy beans can look like plain text in english that can be used and understandable for non programmers.  I tried to enable Import customizer with existing Spring API but failed to to do so, see attachment for code snippet.  ---  **Affects:** 4.3 GA  **Attachments:** - [1.txt](https://jira.spring.io/secure/attachment/23504/1.txt) (_1.77 kB_)  **Issue Links:** - #9888 ScriptFactory for JSR-223 - #15635 ScriptExecutor for JSR-223  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/da56758054e7f1001eae86e9ae0108c789cf9fe6, https://github.com/spring-projects/spring-framework/commit/53819c472fd0d47ca2178800982dfbf0907d0eb2, https://github.com/spring-projects/spring-framework/commit/fbeff475b391d38c232c0fe23db47f1ed039c61a, https://github.com/spring-projects/spring-framework/commit/433764d2179e649dc869b759551c467c19be543a, https://github.com/spring-projects/spring-framework/commit/6a0d9d3d97820c47d13cc296b08b6c06a51cfbcd","closed","type: enhancement,","spring-projects-issues","2016-08-13T08:42:02Z","2019-01-11T18:03:30Z"
"","19570","Allow @ConditionalOnProperty on @RequestMapping registration [SPR-15003]","**[Alexander KIRILOV](https://jira.spring.io/secure/ViewProfile.jspa?name=sashokbg)** opened **[SPR-15003](https://jira.spring.io/browse/SPR-15003?redirect=false)** and commented  It might be useful to have a functionality similar to `@ConditionalOnProperty` but applied on a `@RequestMapping`. This way it will be possible to activate / deactivate RequestMappings depending on the Environment, without having to switch the whole controller off.  If you think this might be a useful contribution to the spring project, I would like to implement it :)  Example:  ```java @Controller class MyController{      @RequestMapping     @ConditionalOnProperty(""${myMapping.enabled}"")     public String myGetMethod(Model model){         return ""view"";     } } ```    ---  **Affects:** 5.0 M3","closed","type: enhancement,","spring-projects-issues","2016-12-09T17:02:44Z","2019-07-20T20:35:51Z"
"","18846","WAMP and crossbar.io support [SPR-14274]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-14274](https://jira.spring.io/browse/SPR-14274?redirect=false)** and commented  While not yet completely developed, the [crossbar.io](http://crossbar.io/) project is rapidly gaining acceptance in the workplace due to the fact that it provides a lightweight but extremely fast message processing architecture with very high speed processing and it integrates code developed in various languages (C++/C#/Java/Javascript/python/etc).  It's a pity that spring-powered backends can't be interconnected to this fast-growing ecosystem, but since the messaging layer is sufficiently abstract, maybe some kind of adaptor can be developed?  A related issue is #16288   ---  **Reference URL:** http://crossbar.io/about/What-is-Crossbar.io/","closed","status: bulk-closed,","spring-projects-issues","2016-05-16T11:49:13Z","2019-01-14T04:39:21Z"
"","19404","JpaTransactionManager is not passing on constraint violations with Hibernate 5.2 [SPR-14838]","**[Alex Quezada](https://jira.spring.io/secure/ViewProfile.jspa?name=elbulla1)** opened **[SPR-14838](https://jira.spring.io/browse/SPR-14838?redirect=false)** and commented  Up to Hibernate 5.1.2, encountering a constraint violation in the DB will cause an Exception with appropriate messaging, however when moving to 5.2.3 the same violation causes a NPE in the JpaTransactionManager. This is with spring-orm 4.3.3.  See comparison of stack traces below.  **With Hibernate 5.2:** java.lang.NullPointerException: null at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:71) at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:517) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:761) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:730) at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:487) at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:291) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) at com.sun.proxy.$Proxy211.saveApplication(Unknown Source) at us.nm.state.hsd.yesnm.web.action.BaseAction.saveApplication(BaseAction.java:61) at us.nm.state.hsd.yesnm.web.action.OtherBenefitsAction.processBenefits(OtherBenefitsAction.java:81) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.webflow.action.DispatchMethodInvoker.invoke(DispatchMethodInvoker.java:99) at org.springframework.webflow.action.MultiAction.doExecute(MultiAction.java:123) at org.springframework.webflow.action.AbstractAction.execute(AbstractAction.java:188) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:85) at us.nm.state.hsd.yesnm.web.aop.ActionTransitionAspect.changeEventTransition(ActionTransitionAspect.java:47) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:629) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:618) at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:168) at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) at com.sun.proxy.$Proxy221.execute(Unknown Source) at org.springframework.webflow.execution.AnnotatedAction.execute(AnnotatedAction.java:145) at org.springframework.webflow.execution.ActionExecutor.execute(ActionExecutor.java:51) at org.springframework.webflow.action.EvaluateAction.doExecute(EvaluateAction.java:77) at org.springframework.webflow.action.AbstractAction.execute(AbstractAction.java:188) at org.springframework.webflow.execution.AnnotatedAction.execute(AnnotatedAction.java:145) at org.springframework.webflow.execution.ActionExecutor.execute(ActionExecutor.java:51) at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:101) at org.springframework.webflow.engine.State.enter(State.java:194) at org.springframework.webflow.engine.Transition.execute(Transition.java:228) at org.springframework.webflow.engine.impl.FlowExecutionImpl.execute(FlowExecutionImpl.java:395) at org.springframework.webflow.engine.impl.RequestControlContextImpl.execute(RequestControlContextImpl.java:214) at org.springframework.webflow.engine.TransitionableState.handleEvent(TransitionableState.java:116) at org.springframework.webflow.engine.Flow.handleEvent(Flow.java:547) at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleEvent(FlowExecutionImpl.java:390) at org.springframework.webflow.engine.impl.RequestControlContextImpl.handleEvent(RequestControlContextImpl.java:210) at org.springframework.webflow.engine.ViewState.handleEvent(ViewState.java:231) at org.springframework.webflow.engine.ViewState.resume(ViewState.java:195) at org.springframework.webflow.engine.Flow.resume(Flow.java:537) at org.springframework.webflow.engine.impl.FlowExecutionImpl.resume(FlowExecutionImpl.java:259) at org.springframework.webflow.executor.FlowExecutorImpl.resumeExecution(FlowExecutorImpl.java:169) at org.springframework.webflow.mvc.servlet.FlowHandlerAdapter.handle(FlowHandlerAdapter.java:253) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872) at javax.servlet.http.HttpServlet.service(HttpServlet.java:648) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at com.github.dandelion.datatables.core.web.filter.DatatablesFilter.doFilter(DatatablesFilter.java:73) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at org.apache.catalina.filters.AddDefaultCharsetFilter.doFilter(AddDefaultCharsetFilter.java:88) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:169) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:121) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:124) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:134) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at us.nm.state.hsd.yesnm.web.filter.LoggingFilter.doFilter(LoggingFilter.java:44) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at com.github.dandelion.datatables.extras.servlet2.filter.DatatablesFilter.doFilter(DatatablesFilter.java:71) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:108) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at us.nm.state.hsd.yesnm.web.filter.PragmaFilter.doFilter(PragmaFilter.java:18) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:528) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1099) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:670) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:285) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:745)  **With Hibernate 5.1:** org.springframework.transaction.TransactionSystemException: Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Error while committing the transaction at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:526) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:761) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:730) at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:487) at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:291) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) at com.sun.proxy.$Proxy211.saveApplication(Unknown Source) at us.nm.state.hsd.yesnm.web.action.BaseAction.saveApplication(BaseAction.java:61) at us.nm.state.hsd.yesnm.web.action.OtherBenefitsAction.processBenefits(OtherBenefitsAction.java:81) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.webflow.action.DispatchMethodInvoker.invoke(DispatchMethodInvoker.java:99) at org.springframework.webflow.action.MultiAction.doExecute(MultiAction.java:123) at org.springframework.webflow.action.AbstractAction.execute(AbstractAction.java:188) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:85) at us.nm.state.hsd.yesnm.web.aop.ActionTransitionAspect.changeEventTransition(ActionTransitionAspect.java:47) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:629) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:618) at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:168) at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) at com.sun.proxy.$Proxy221.execute(Unknown Source) at org.springframework.webflow.execution.AnnotatedAction.execute(AnnotatedAction.java:145) at org.springframework.webflow.execution.ActionExecutor.execute(ActionExecutor.java:51) at org.springframework.webflow.action.EvaluateAction.doExecute(EvaluateAction.java:77) at org.springframework.webflow.action.AbstractAction.execute(AbstractAction.java:188) at org.springframework.webflow.execution.AnnotatedAction.execute(AnnotatedAction.java:145) at org.springframework.webflow.execution.ActionExecutor.execute(ActionExecutor.java:51) at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:101) at org.springframework.webflow.engine.State.enter(State.java:194) at org.springframework.webflow.engine.Transition.execute(Transition.java:228) at org.springframework.webflow.engine.impl.FlowExecutionImpl.execute(FlowExecutionImpl.java:395) at org.springframework.webflow.engine.impl.RequestControlContextImpl.execute(RequestControlContextImpl.java:214) at org.springframework.webflow.engine.TransitionableState.handleEvent(TransitionableState.java:116) at org.springframework.webflow.engine.Flow.handleEvent(Flow.java:547) at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleEvent(FlowExecutionImpl.java:390) at org.springframework.webflow.engine.impl.RequestControlContextImpl.handleEvent(RequestControlContextImpl.java:210) at org.springframework.webflow.engine.ViewState.handleEvent(ViewState.java:231) at org.springframework.webflow.engine.ViewState.resume(ViewState.java:195) at org.springframework.webflow.engine.Flow.resume(Flow.java:537) at org.springframework.webflow.engine.impl.FlowExecutionImpl.resume(FlowExecutionImpl.java:259) at org.springframework.webflow.executor.FlowExecutorImpl.resumeExecution(FlowExecutorImpl.java:169) at org.springframework.webflow.mvc.servlet.FlowHandlerAdapter.handle(FlowHandlerAdapter.java:253) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872) at javax.servlet.http.HttpServlet.service(HttpServlet.java:648) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at com.github.dandelion.datatables.core.web.filter.DatatablesFilter.doFilter(DatatablesFilter.java:73) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at org.apache.catalina.filters.AddDefaultCharsetFilter.doFilter(AddDefaultCharsetFilter.java:88) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:169) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:121) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:124) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:134) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at us.nm.state.hsd.yesnm.web.filter.LoggingFilter.doFilter(LoggingFilter.java:44) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at com.github.dandelion.datatables.extras.servlet2.filter.DatatablesFilter.doFilter(DatatablesFilter.java:71) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:108) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at us.nm.state.hsd.yesnm.web.filter.PragmaFilter.doFilter(PragmaFilter.java:18) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:528) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1099) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:670) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:285) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:745) Caused by: javax.persistence.RollbackException: Error while committing the transaction at org.hibernate.jpa.internal.TransactionImpl.commit(TransactionImpl.java:87) at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:517) ... 140 common frames omitted Caused by: javax.validation.ConstraintViolationException: Validation failed for classes [us.nm.state.hsd.yesnm.model.Phone] during persist time for groups [javax.validation.groups.Default, ] List of constraint violations:[ 	ConstraintViolationImpl{interpolatedMessage='may not be empty', propertyPath=number, rootBeanClass=class us.nm.state.hsd.yesnm.model.Phone, messageTemplate='{org.hibernate.validator.constraints.NotBlank.message}'} ] at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:138) at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:78) at org.hibernate.action.internal.EntityInsertAction.preInsert(EntityInsertAction.java:205) at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:82) at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:582) at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:456) at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:337) at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39) at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1295) at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:468) at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3135) at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2352) at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:491) at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:147) at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$100(JdbcResourceLocalTransactionCoordinatorImpl.java:38) at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:231) at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:65) at org.hibernate.jpa.internal.TransactionImpl.commit(TransactionImpl.java:61) ... 141 common frames omitted   ---  **Affects:** 4.3.3","closed","status: bulk-closed,","spring-projects-issues","2016-10-21T20:59:52Z","2019-01-12T00:12:13Z"
"","19062","Use apache httpclient send request with header(content-type=application/x-protobuf) wihout Authorization header to visit LDAP protect resource, should not return 406 not acceptable [SPR-14493]","**[Alex J K Lin](https://jira.spring.io/secure/ViewProfile.jspa?name=alex%20lin)** opened **[SPR-14493](https://jira.spring.io/browse/SPR-14493?redirect=false)** and commented  One project use spring boot, spring security. In the controller it use `@PreAuthorize`(""hasAnyRole(xxx)) to control the access to the Rest interface.  If use apache httpclient send request with header(content-type=application/x-protobuf) and **without** set the BasicHeader(""Authorization"", ""Basic "" + username: password),  it will return status code: **406**, status reason: **not acceptable**.  I think it should return status code: **401** status reason: **Unauthorized**  I write a ProtobufErrorHttpMessageConverter extends AbstractJackson2HttpMessageConverter to register.      public ProtobufErrorHttpMessageConverter(final ObjectMapper objectMapper) {         super(objectMapper, new MediaType(""application"", ""x-protobuf"", DEFAULT_CHARSET));     }  to fix that issue.  but i think if the framework can handle that situation is better, don't need to write one custom MessgeConver.  I also meet another issue, it will have warn message in the log:  WARN  messages.ProtobufErrorHttpMessageConverter     - Failed to evaluate deserialization for type [simple type, class com..messagesProto$Request]: com.fasterxml.jackson.databind.JsonMappingException: Can not find a (Map) Key deserializer for type [simple type, class com.google.protobuf.Descriptors$FieldDescriptor]  Fortunately, it has fixed in #18735.    --- No further details from [SPR-14493](https://jira.spring.io/browse/SPR-14493?redirect=false)","closed","status: invalid,","spring-projects-issues","2016-07-20T03:31:56Z","2019-01-14T04:38:38Z"
"","19411","Make HttpComponentsAsyncClientHttpRequest abortable [SPR-14845]","**[Alessandro Ciccimarra](https://jira.spring.io/secure/ViewProfile.jspa?name=alessandro.ciccimarra@gmail.com)** opened **[SPR-14845](https://jira.spring.io/browse/SPR-14845?redirect=false)** and commented  In HttpComponentsAsyncClientHttpRequest, the inner class HttpResponseFutureCallback has an empty cancelled() callback method. It should call httpRequest.abort() to be able to clean resources when we cancel the future, shouldn't it? A possible simple implementation in the attached Gist.   ---  **Affects:** 4.3.3  **Reference URL:** https://gist.github.com/alex859/59e5489b5e20eed03d456f8c41114786  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b6b536682e67bf811710bdfb95de737dfe9ce81b, https://github.com/spring-projects/spring-framework/commit/8f844461a06503d09e1f2dae4907bb56a8071edc","closed","type: enhancement,","spring-projects-issues","2016-10-25T22:30:37Z","2016-11-07T22:01:22Z"
"","19596","ConcurrentModificationException in AbstractRequestExpectationManager [SPR-15029]","**[Alastair Paterson](https://jira.spring.io/secure/ViewProfile.jspa?name=alastairpaterson)** opened **[SPR-15029](https://jira.spring.io/browse/SPR-15029?redirect=false)** and commented  We are using MockRestServiceServer in conjunction with expectations to conduct testing of our Spring application.  We have noticed that when a method under test invokes asynchronous network requests the MockRestServiceServer will occasionally throw a ConcurrentModificationException causing the test to fail. The issue is observed when using parallelStream() as well as other asynchronous methods. Reintroducing concurrency alleviates the issue.  Please find attached a trivial Spring Boot application that reproduces this issue.   ---  **Affects:** 4.2.4, 4.3.4  **Attachments:** - [springtestexception.zip](https://jira.spring.io/secure/attachment/23658/springtestexception.zip) (_10.81 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fcead670f034aa36b53545e11dda10bee48b3bfb, https://github.com/spring-projects/spring-framework/commit/6e508f70d31818916c34d13a538b1fdc803eb274","closed","type: bug,","spring-projects-issues","2016-12-19T02:25:13Z","2017-01-25T14:18:14Z"
"","19261","AbstractPollingMessageListenerContainer's workaround for Tibco causes performance delays during ems failover [SPR-14697]","**[Aihua Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=aihuazhou)** opened **[SPR-14697](https://jira.spring.io/browse/SPR-14697?redirect=false)** and commented  We're using DefaultMessageListenerContainer with tibco EMS and transaction enabled,  when ems fails over, and there is no messages on ems, then we observer the following behavior:  1. If there are no messages on EMS during failover, and we publish a message well after all clients have reconnected, then the client will still throws TransactionRolledbackException, due to the fact that the polling container does not commit the transaction if it receives no message if it's using Tibco EMS.  2. This is a problem for high concurrency systesm, where we're running over 100 clients.  In this case each client is holding on to a transaction which will be rolled back.  With queue redelivery set to mas of 255 and delivery delay set to 15, it takes over 1 hour for the messages to get reprocessed.  The issue is caused by the work around that was put in place for a tibco deadlock issue See spring jira below.  #12215  Tibco has confirmed that the deadlock issue was fixed in ems 4.4.2, and is no longer present in any supported versions of ems.  Please roll back the special check that was added.  ---  **Affects:** 4.1.9, 4.2.4, 4.3.2  **Issue Links:** - #12215 JMS integration with Tibco causes deadlock due to commitIfNecessary in AbstractPollingMessageListenerContainer  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/edbc1e92129f659b9c59722611065befa705e2fe, https://github.com/spring-projects/spring-framework/commit/4396b211ce06237a7408a2f5be0177e3e81258c0, https://github.com/spring-projects/spring-framework/commit/53fc1e96c68a7b2469f19f187afe617803218c6e  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)","closed","type: enhancement,","spring-projects-issues","2016-09-12T14:40:05Z","2019-01-14T04:37:56Z"
"","19538","ImportAware.setImportMetadata not invoked if import inherited from superclass with negative condition [SPR-14972]","**[Adrian Moos](https://jira.spring.io/secure/ViewProfile.jspa?name=bedag-moo)** opened **[SPR-14972](https://jira.spring.io/browse/SPR-14972?redirect=false)** and commented  Reproducer:  ``` // a company-wide auto configuration class providing default implementations for many beans @EnableTransactionManagement @Configuration @ConditionalOnMissingBean(Parent.class) // so individual applications can use a subclass instead class Parent { 	@Bean 	Object someBean() { 		return new Object(); 	} }  @SpringBootApplication class Child extends Parent { 	// type safe bean definition override         // compiler warns if overridden definition has been renamed or is of incompatible type 	@Override 	Object someBean() { 		return ""asdf""; 	} }   public class Main { 	public static void main(String[] args) { 		SpringApplication.run(Child.class); 	} } ```  Expected behavior: Spring boots.  Actual behaviour: The following exception occurs:  ``` 2016-12-01 23:33:45.716 ERROR 7544 --- [           main] o.s.boot.SpringApplication               : Application startup failed  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.context.event.internalEventListenerProcessor': Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.transaction.config.internalTransactionAdvisor' defined in class path resource [org/springframework/transaction/annotation/ProxyTransactionManagementConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor]: Factory method 'transactionAdvisor' threw exception; nested exception is java.lang.NullPointerException 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:776) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861) ~[spring-context-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541) ~[spring-context-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759) [spring-boot-1.4.0.RELEASE.jar:1.4.0.RELEASE] 	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369) [spring-boot-1.4.0.RELEASE.jar:1.4.0.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:313) [spring-boot-1.4.0.RELEASE.jar:1.4.0.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1185) [spring-boot-1.4.0.RELEASE.jar:1.4.0.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1174) [spring-boot-1.4.0.RELEASE.jar:1.4.0.RELEASE] 	at test.Main.main(Main.java:35) [classes/:na] Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.transaction.config.internalTransactionAdvisor' defined in class path resource [org/springframework/transaction/annotation/ProxyTransactionManagementConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor]: Factory method 'transactionAdvisor' threw exception; nested exception is java.lang.NullPointerException 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans(BeanFactoryAdvisorRetrievalHelper.java:92) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:101) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:87) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:69) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:347) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:299) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:422) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1583) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	... 14 common frames omitted Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor]: Factory method 'transactionAdvisor' threw exception; nested exception is java.lang.NullPointerException 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	... 31 common frames omitted Caused by: java.lang.NullPointerException: null 	at org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration.transactionAdvisor(ProxyTransactionManagementConfiguration.java:46) ~[spring-tx-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$57eb8409.CGLIB$transactionAdvisor$0() ~[spring-tx-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$57eb8409$$FastClassBySpringCGLIB$$b24624a2.invoke() ~[spring-tx-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:356) ~[spring-context-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$57eb8409.transactionAdvisor() ~[spring-tx-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_31] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_31] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_31] 	at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0_31] 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	... 32 common frames omitted ```  ---  **Affects:** 4.2.8, 4.3.2  **Issue Links:** - #20765 Configuration class's superclass may be incorrectly skipped if first importer isn't skipped till register bean phase of condition evaluation - #19737 ProxyTransactionManagementConfiguration enableTx NPE - #19498 NPE in LoadTimeWeavingConfiguration: loadTimeWeaver() called too early  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a7ec6dc0afb5ad83371ed073a26a31cb9e1dd4f1, https://github.com/spring-projects/spring-framework/commit/dd3c370bca76b40679eaa5e8c3a41ce5bea00a2f, https://github.com/spring-projects/spring-framework/commit/c732f38b85c8be6d33903c4412fbd11ef9445385  **Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)","closed","in: core,","spring-projects-issues","2016-12-01T22:46:27Z","2019-01-11T19:15:50Z"
"","18964","STOMP 1.1 protocol support for client [SPR-14391]","**[Achmad Nasirudin Sandi](https://jira.spring.io/secure/ViewProfile.jspa?name=achmadns)** opened **[SPR-14391](https://jira.spring.io/browse/SPR-14391?redirect=false)** and commented  I am working with spring spring-boot-starter-websocket 1.4.0.M3 and using stomp over websocket client to ack my message. Yet, when I tried to connect the broker to Apache ActiveMQ 5.13.3, I got this:  ``` : org.apache.activemq.transport.stomp.ProtocolException: Unexpected ACK received for message-id [null]  WARN | Exception occurred processing: ACK id:ID:moi-laptop-2-34547-1466655368399-10:1:1:1:1 ```  When I checked the supported version in ActiveMQ https://stomp.github.io/implementations.html, it only support version up to 1.1. Could you please add suport for previous version also for STOMP client?  Thank you.   ---  **Affects:** 4.3 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ebdc770ed3e56471d960d8792c2ceeb8faceb3b1","closed","type: enhancement,","spring-projects-issues","2016-06-23T07:15:36Z","2016-07-04T10:17:10Z"
"","19489","Provide an exclude URL pattern for FilterRegistrationBean [SPR-14922]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-14922](https://jira.spring.io/browse/SPR-14922?redirect=false)** and commented  `FilterRegistrationBean` has a `setUrlPatterns` for customizing the URL patterns that the filter will be registered against. Sometimes, setting exclusion pattern is desired. For example, I want to be able to say _Exclude all URLs that start with monitoring, thank you_, vs. listing each endpoint that my service may support. This ticket is to provide support for exclude URL patterns. If both exclude and include patterns exist, and there's a conflict, exclude should win as usually is the case.   ---  **Affects:** 5.0 M3","closed","status: invalid,","spring-projects-issues","2016-11-18T19:01:16Z","2019-01-12T05:21:36Z"
"","19444","Spring Data REST is Not Activated for Reactive Web [SPR-14878]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-14878](https://jira.spring.io/browse/SPR-14878?redirect=false)** and commented  I've a pet project called [feign](https://github.com/abhijitsarkar/feign) using Spring HATEOAS, Spring Data Rest and Spring Data MongoDB. The `master` branch works fine but the `feign-boot-reactive` branch, which uses Boot Web Reactive, doesn't activate Spring Data REST. I know this from the logs where, in successful scenario, the URLs mapped to the repositories are logged.  Steps to reproduce the problem: 1. Clone the project and checkout branch `feign-boot-reactive`. 2. Open in an IDE. 3. Run integration test `matches POST request and finds it` from [FeignSpecP1.groovy](https://github.com/abhijitsarkar/feign/blob/feign-boot-reactive/src/integration-test/groovy/name/abhijitsarkar/feign/FeignSpecP1.groovy)    ---  **Affects:** 5.0 M2","closed","status: invalid,","spring-projects-issues","2016-11-03T17:48:36Z","2019-01-12T05:21:41Z"
"","19443","Returning Mono> causes NPE [SPR-14877]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-14877](https://jira.spring.io/browse/SPR-14877?redirect=false)** and commented  ``` @RequestMapping(path = ""/feign/**"", produces = APPLICATION_JSON_VALUE)     Mono> all(Request request) {         Mono response = feignService.findFeignMapping(request);          return response.map(r -> {             ResponseProperties rp = r.getResponseProperties();              HttpHeaders httpHeaders = new HttpHeaders();              if (!isEmpty(rp.getHeaders())) {                 rp.getHeaders().entrySet()                         .forEach(e -> httpHeaders.put(e.getKey(), singletonList(e.getValue())));             }              Body responseBody = rp.getBody();              if (!isEmpty(responseBody.toString())) {                 return ResponseEntity.status(rp.getStatus())                         .headers(httpHeaders)                         .body(responseBody.getContent());             }              return ResponseEntity.status(rp.getStatus())                     .headers(httpHeaders)                     .build();         }).defaultIfEmpty(ResponseEntity.notFound().build());     } ```  ``` java.lang.NullPointerException: null 	at java.lang.Class.isAssignableFrom(Native Method) ~[na:1.8.0_66] 	at org.springframework.core.codec.ByteArrayEncoder.canEncode(ByteArrayEncoder.java:46) ~[spring-core-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.http.codec.EncoderHttpMessageWriter.canWrite(EncoderHttpMessageWriter.java:64) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler.lambda$getProducibleMediaTypes$0(AbstractMessageWriterResultHandler.java:142) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174) ~[na:1.8.0_66] 	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374) ~[na:1.8.0_66] 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[na:1.8.0_66] 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[na:1.8.0_66] 	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) ~[na:1.8.0_66] 	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[na:1.8.0_66] 	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) ~[na:1.8.0_66] 	at org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler.getProducibleMediaTypes(AbstractMessageWriterResultHandler.java:144) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler.writeBody(AbstractMessageWriterResultHandler.java:116) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler.lambda$handleResult$2(ResponseEntityResultHandler.java:165) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at reactor.core.publisher.MonoThenMap$MonoThenApplyMain.onNext(MonoThenMap.java:98) [reactor-core-3.0.3.RELEASE.jar:na] ```  Apparently, the code doesn't pay attention to the `Accept` header or `RequestMapping.produces` attribute but tries to use the generic parameter (wildcard `?` in this case) to find an appropriate `HttpMessageWriter`. The workaround, as shown below, is to specify a type (`String` in this case) and not use the `ResponseEntity` builder.  ``` @RequestMapping(path = ""/feign/**"", produces = APPLICATION_JSON_VALUE)     Mono> all(Request request) {         Mono response = feignService.findFeignMapping(request);          return response.map(r -> {             ResponseProperties rp = r.getResponseProperties();              HttpHeaders httpHeaders = new HttpHeaders();              if (!isEmpty(rp.getHeaders())) {                 rp.getHeaders().entrySet()                         .forEach(e -> httpHeaders.put(e.getKey(), singletonList(e.getValue())));             }              Body responseBody = rp.getBody();              if (!isEmpty(responseBody.toString())) {                 return ResponseEntity.status(rp.getStatus())                         .headers(httpHeaders)                         .body(responseBody.getContent());             }              return new ResponseEntity(httpHeaders, HttpStatus.valueOf(rp.getStatus()));         }).defaultIfEmpty(new ResponseEntity(HttpStatus.NOT_FOUND));     }  ```  ---  **Affects:** 5.0 M2  **Issue Links:** - #19506 ResponseEntity builders should allow casting an empty body to any type  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c43040287253bda3e9710759eb722fb54c1e9cc0","closed","type: bug,","spring-projects-issues","2016-11-03T17:38:31Z","2019-01-11T17:26:43Z"
"","19436","Allow HandlerFunction to return a Mono [SPR-14870]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-14870](https://jira.spring.io/browse/SPR-14870?redirect=false)** and commented  [HandlerFunction](http://docs.spring.io/spring/docs/5.0.0.M2/javadoc-api/org/springframework/web/reactive/function/HandlerFunction.html) returns a [Response](http://docs.spring.io/spring/docs/5.0.0.M2/javadoc-api/org/springframework/web/reactive/function/Response.html), so it's not possible to use a `org.reactivestreams.Publisher` implementation for anything other than the body (using the [BodyInserters](http://docs.spring.io/spring/docs/5.0.0.M2/javadoc-api/org/springframework/web/reactive/function/BodyInserters.html)). In many cases, it's desirable to return the `Mono/Flux` directly, just like in regular Spring web people return `ResponseEntity` all the time. Currently this is not possible without blocking.   ---  **Affects:** 5.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/582e625fcf340f76964888e93d1ba19df5742f2b","closed","type: enhancement,","spring-projects-issues","2016-11-02T05:08:35Z","2016-12-30T13:33:14Z"
"","19435","[spring-web-reactive] NPE in RequestMappingHandlerAdapter at Startup [SPR-14869]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-14869](https://jira.spring.io/browse/SPR-14869?redirect=false)** and commented  [RequestMappingHandlerAdapter.getDefaultInitBinderArgumentResolvers](https://github.com/spring-projects/spring-framework/blob/master/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java) has the following which blows up with a NPE at startup.  ``` // Custom resolvers if (getCustomArgumentResolvers() != null) {     resolvers.addAll(getCustomInitBinderArgumentResolvers()); } ```  ``` Caused by: java.lang.NullPointerException 	at java.util.ArrayList.addAll(ArrayList.java:577) 	at org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.getDefaultInitBinderArgumentResolvers(RequestMappingHandlerAdapter.java:277) 	at org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.afterPropertiesSet(RequestMappingHandlerAdapter.java:220) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1642) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1579) 	... 58 more ```  Obviously, `getCustomInitBinderArgumentResolvers` returns null. I'm running Spring Boot `2.0.0.BUILD-SNAPSHOT` with `spring-boot-starter-web-reactive` `0.1.0.BUILD-SNAPSHOT`. The project wouldn't start due to this issue, and is not particularly small, so I am not providing a link to it to begin with. I'm hoping that this is an obvious issue that doesn't need a reproducible project as proof.   ---  **Affects:** 5.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/388e173ba3bc4b70363f65cc4bacdd714c8b5798","closed","type: bug,","spring-projects-issues","2016-11-02T04:50:54Z","2016-11-08T13:11:19Z"
"","19052","No processor claimed any of these annotations [SPR-14483]","**[Aaron Haskins](https://jira.spring.io/secure/ViewProfile.jspa?name=aaron.haskins)** opened **[SPR-14483](https://jira.spring.io/browse/SPR-14483?redirect=false)** and commented  Building a Spring Boot maven project with Lombok dependency using **-Xlint:all** compiler option produces a compiler warning  ``` COMPILATION WARNING :  ------------------------------------------------------------- No processor claimed any of these annotations: org.springframework.boot.autoconfigure.SpringBootApplication 1 warning ```  \\  **-Xlint** -enables all recommended warnings, see [javac docs](http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html) for more details.  \\  ### Reproduction steps  * Create a new Spring Boot 1.4.0 RC1 maven project with [Spring Initializr](https://start.spring.io/) with Lombok dependency * Modify the build section of the pom file to include maven compiler flag **-Xlint:all**  ```xml                      org.apache.maven.plugins          maven-compiler-plugin                       true             true                             -Werror                -Xlint:all                                               org.springframework.boot          spring-boot-maven-plugin             ```  * Expect this output  ``` ------------------------------------------------------------- COMPILATION WARNING :  ------------------------------------------------------------- No processor claimed any of these annotations: org.springframework.boot.autoconfigure.SpringBootApplication 1 warning ------------------------------------------------------------- ------------------------------------------------------------- COMPILATION ERROR :  ------------------------------------------------------------- warnings found and -Werror specified 1 error ------------------------------------------------------------- ------------------------------------------------------------------------ BUILD FAILURE ------------------------------------------------------------------------ ```  \\  If you remove lombok dependency from the pom file, the project builds successfully.   --- No further details from [SPR-14483](https://jira.spring.io/browse/SPR-14483?redirect=false)","closed","status: invalid,","spring-projects-issues","2016-07-19T07:58:31Z","2019-01-12T05:22:22Z"
"","19272","Add support for MediaType for EDIFACT and EDI-X12 [SPR-14707]","**[ Dawud Tan (陳大衛)](https://jira.spring.io/secure/ViewProfile.jspa?name=dawud_tan)** opened **[SPR-14707](https://jira.spring.io/browse/SPR-14707?redirect=false)** and commented  Currently, there are no support for the MIME type application/EDIFACT and application/EDI-X12, these MIME types are the most used in B2B environments, after that we could add support for EDIFACTHttpMessageConverter same as ProtobufHttpMessageConverter ##10477.  thanks.  ---  **Affects:** 4.3.3  **Reference URL:** https://tools.ietf.org/html/rfc1767","closed","status: declined,","spring-projects-issues","2016-09-13T14:43:02Z","2019-01-11T17:13:40Z"
"","1195","4.2.x","(cherry picked from commit d04567b)","closed","","VikneswaranThangarasu","2016-10-04T07:22:34Z","2016-10-04T07:27:59Z"
"","1229","4.2.5","# （Spring Cache）To make cache name (value) support dynamic (SpEL or otherwise) expressions ### When I want to evict partial caches ,it's not allow to set  a dynamic variales to annotation of value.Please see the questiton on stackoverflow: [How can I make the cache name in Spring cache configurable?](http://stackoverflow.com/questions/13189814/how-can-i-make-the-cache-name-in-spring-cache-configurable),Thank you.","closed","","qh529","2016-11-04T06:45:01Z","2016-11-04T09:36:20Z"
"","1203","Update JavaDoc for BeanFactory.java","![image](https://cloud.githubusercontent.com/assets/5267663/19351804/7f7e676e-915d-11e6-89eb-52e499eb6859.png)  [BeanFactory JavaDoc](http://docs.spring.io/spring-framework/docs/4.3.3.RELEASE/javadoc-api/org/springframework/beans/factory/BeanFactory.html)","closed","","rand0m86","2016-10-13T20:44:10Z","2016-10-26T07:51:22Z"
"","1253","Javadoc fix","","closed","","nicklasholm","2016-12-02T06:51:44Z","2016-12-02T21:29:31Z"
"","1252","Add twice to ExpectedCount as convenience method","","closed","","drumonii","2016-12-01T04:00:27Z","2016-12-02T21:29:17Z"
"","1250","update STOMP support to reactor-netty","","closed","","smaldini","2016-11-30T16:22:59Z","2019-03-06T14:43:52Z"
"","1248","Refactor ReactiveAdapter support","","closed","","rstoyanchev","2016-11-28T02:44:10Z","2016-11-28T02:45:24Z"
"","1234","3.0.x","","closed","","zlikun","2016-11-09T06:41:06Z","2016-11-09T08:51:04Z"
"","1226","Master","","closed","","huaqh1024","2016-10-29T08:58:23Z","2016-10-29T09:05:46Z"
"","1196","4.3.x","","closed","","yulinling1230","2016-10-04T09:40:04Z","2016-10-04T09:46:41Z"
"","1179","handle -> whenComplete because new CompletionStage (return null) is not needed.","","closed","","kazuki-ma","2016-09-18T11:26:15Z","2018-03-30T15:10:20Z"
"","1177","4.3.x","","closed","","lx73697223","2016-09-16T14:56:58Z","2016-09-16T14:59:52Z"
"","1169","SPR-14705 Add support for CommonsVfs resources.","","closed","in: core,","ptahchiev","2016-09-13T10:06:42Z","2021-11-22T12:30:34Z"
"","1160","Merge remote-tracking branch 'refs/remotes/spring-projects/master'","","closed","","hwhmusic","2016-09-07T06:37:11Z","2016-09-07T07:02:54Z"
"","1157","4.1.x","","closed","","TinaLan-525","2016-09-05T08:44:57Z","2016-09-05T09:00:03Z"
"","1151","Doc: fixed class literal in instanceof","","closed","","sylvainlaurent","2016-08-30T18:26:14Z","2016-09-01T14:24:01Z"
"","1134","4.3.x","","closed","","satimovm","2016-08-15T10:52:07Z","2016-08-18T07:20:41Z"
"","1131","4.3.x","","closed","","soulfrozen","2016-08-10T17:35:06Z","2016-08-11T01:06:54Z"
"","1126","Use abbreviated expression lambda instead of statement lambda","","closed","","kamilszymanski","2016-07-29T22:33:50Z","2016-07-30T10:55:57Z"
"","1117","SPR-14488 - FastOutputStreamWriter to improve tps of http response and save memory","","closed","status: declined,","niaoge","2016-07-18T16:23:20Z","2021-11-16T13:33:14Z"
"","1112","Fix typo in javadocs","","closed","","nicholas-fwang","2016-07-15T18:44:00Z","2016-07-25T10:35:34Z"
"","1109","removing duplicates should not change the order of the test execution listeners","","closed","","philipp-classen","2016-07-13T14:48:12Z","2016-07-13T15:00:34Z"
"","1103","3.2.x","","closed","","tangchd","2016-07-08T12:27:17Z","2016-07-08T12:45:58Z"
"","1090","SPR-14670 - Deprecating NativeJdbcExtractor in favor of java.sql.Connection.unwrap()","","closed","","jmithmstr","2016-06-21T19:15:53Z","2017-02-15T10:08:42Z"
"","1073","Fix typos in asciidoc","","closed","","nicholas-fwang","2016-06-06T10:49:31Z","2016-06-09T08:38:58Z"
"","1059","fix SPR-14269: make markBeanAsCreated(String beanName) thread safe","","closed","","anguo-wenz","2016-05-14T13:24:49Z","2016-06-10T09:18:07Z"
"","1057","3.2.x","","closed","","sensen2030","2016-05-12T08:30:21Z","2016-05-12T08:30:46Z"
"","1056","4.2.x","","closed","","hailin0","2016-05-12T01:49:29Z","2016-05-12T05:48:49Z"