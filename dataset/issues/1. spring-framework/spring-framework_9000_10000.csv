"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","1471","refactor redundancy code in spring-core/src/main/java/org/springframe…","…work/util/CommonsLogWriter.java","closed","status: superseded,","qcq","2017-07-07T16:09:59Z","2021-04-27T11:09:57Z"
"","1331","Make PathPatternParser multi-threaded","With this change the original PathPatternParser is renamed InternalPathPatternParser and a new PathPatternParser class is added. This new PathPatternParser class is a very simple thread-safe wrapper for the InternalPathPatternParser. It achieves this by creating a new InternalPathPatternParser for each new parse request.  This follows the model used for SpEL parsing.","closed","","aclement","2017-02-20T01:18:22Z","2017-02-21T10:51:15Z"
"","1355","SPR-11587: Support multiple TilesContainer per ServletContext","Why i did this - because Spring fails to properly support multiple TilesContainer per ServletContext because its using a ""null"" key mapping, multiple container in different FrameworkServlets will override each others factory. See ticket for details.  Question to be answered:  1. Should i include visibility/extension changes according to the ticket in this one or do another changeset - still tbd? 2. Are the test enhancements / naming made sufficient?  Discussion in general:  Still need to polish it to the coding guidelines - but want to get early feedback on the general refactoring  stuf, if it fits your expectations or how todo it better. Package visibility access on many properties is not my favourite - should i refactor those in getters or pass the needed references to each instance via construction parameters? Any other ideas?  ICLA  submitted.  Issue: SPR-11587","closed","status: declined,","tkrah","2017-03-13T17:13:53Z","2021-11-11T09:36:51Z"
"","1345","SPR-15683 Avoid NullPointerException if cron expression is null","When you pass a null cron expression to the constructor of ```CronTrigger```, it creates a ```CronSequenceGenerator``` instance which calls the ```parse()``` method from its constructor. Inside this method the cron expression is first tokenized by ```StringUtils.tokenizeToStringArray()``` (which will return null if the cron expression is null) and put into the ```fields``` variable. Then, if the content of ```fields``` is considered invalid (null or not having the right number of elements), an ```IllegalArgumentException``` is thrown. But as we are using ```fields.count```'s value to create the message of the exception, we get a ```NullPointerException``` (with no message) instead when ```fields``` is null.  These changes let the ```parse()``` method throw an ```IllegalArgumentException``` with a message when ```fields``` is null.","closed","","tonymanou","2017-03-03T21:51:19Z","2017-06-25T10:10:50Z"
"","1297","SPR-15140: @RequestParam injects a raw undecoded string for reactive HTTP requests","When using spring-web-reactive, %-encoded strings were injected as-is into @RequestParam variables, which does not coincide with spring-webmvc behaviour.  Example:   ```java @ResponseBody @GetMapping(""/search"") public String search(@RequestParam(""q"") String q) {     return q; } ``` ```bash curl -s 'http://localhost:8080/search?q=%20%2B+%C3%A0' ```  Spring Web Reactive: `%20%2B+%C3%A0` Spring Web MVC: `(space)+ à`  (`(space)` is a space character, GitHub seems to remove leading whitespaces...)  ---  The cause is that `AbstractServerHttpRequest.getQueryParams()` is returning undecoded name-value pairs, while the interface method `ServerHttpRequest.getQueryParams()` specifies (in javadoc) to return *decoded* ones.  This commit fixed the `AbstractServerHttpRequest` implementation to correctly return decoded name-value pairs and added an unit test.  https://jira.spring.io/browse/SPR-15140  (I have signed the CLA.)","closed","","eiiches","2017-01-14T19:04:10Z","2017-01-17T17:48:55Z"
"","1400","Clear the buffer provided by Undertow before reading the request","When reading more that once for a given request, the position/limit of the buffer provided by Undertow should be reset in order to use the full capacity of the buffer.","closed","","violetagg","2017-04-24T20:19:02Z","2017-06-19T18:41:39Z"
"","1393","SPR-15470 - Update MimeType.java","When I use io.undertow.util.Headers#extractQuotedValueFromHeader it required space","closed","","dmitriyartanov","2017-04-19T10:40:56Z","2017-06-01T17:59:45Z"
"","1477","SPR-7582 - Rebuild Advisor chain when interceptor list is updated in ProxyFactoryBean","When getObject() on ProxyFactoryBean is called it might not be fully initialized yet, leading to an exception. This is fine, but the empty Advisor chain is never rebuilt, not even after initialization has finished. This leads to 'no-op' proxies which don't do anything.  Issue: SPR-7582","closed","in: core,","marijnm","2017-07-16T20:33:24Z","2021-12-13T13:39:09Z"
"","1414","AbstractListenerWriteProcessor/AbstractListenerWriteFlushProcessor error handling","When an exception happens while writing/flushing the data, the exception handling for Servlet 3.1 based implementation will happen when WriteListener#onError and AsyncListener#onError events are received","closed","","violetagg","2017-05-02T21:25:31Z","2017-06-19T18:41:58Z"
"","1290","Guava throw NPE when 'allowNullValues=false'","When `GuavaCache.allowNullValues = false`, if cache value is null, the Guava cache will throw a *NullPointerException*:  ```java java.lang.NullPointerException: null 	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210) 	at com.google.common.cache.LocalCache.put(LocalCache.java:4147) 	at com.google.common.cache.LocalCache$LocalManualCache.put(LocalCache.java:4754) 	at org.springframework.cache.guava.GuavaCache.put(GuavaCache.java:122) 	at org.springframework.cache.interceptor.AbstractCacheInvoker.doPut(AbstractCacheInvoker.java:82) 	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.apply(CacheAspectSupport.java:780) 	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:428) 	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:327) 	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ```","closed","","Robin7Ma","2017-01-10T07:06:44Z","2017-01-20T16:54:44Z"
"","1416","Merge pull request #1 from spring-projects/master","WebFlux multpart support polish + minor refactoring","closed","","leerenbo","2017-05-04T13:55:30Z","2017-05-04T13:56:08Z"
"","1415","Merge pull request #1 from spring-projects/master","WebFlux multpart support polish + minor refactoring","closed","","leerenbo","2017-05-04T13:50:31Z","2017-05-04T13:50:46Z"
"","1286","SPR-15107 Updating MySQLMaxValueIncrementer to not rely on MYISAM","We should no longer rely on MYISAM for the sequence table since this engine might not always be available. After this change the storage engine used by the sequence table can be MYISAM or INNODB since the sequences are allocated using a separate connection without being affected by any other transactions that might be in progress.  Issue: SPR-15107","closed","","trisberg","2017-01-06T22:09:32Z","2017-01-12T19:25:05Z"
"","1487","New overview","We have written a replacement for the current overview, as the beginning of a larger documentation effort.","closed","","Buzzardo","2017-07-28T13:39:59Z","2017-07-28T14:18:35Z"
"","1420","WebJarsResourceResolver: multiple matches fix","Using WebJarAssetLocator.getFullPathExact instead of WebJarAssetLocator.getFullPath avoid multiple matches in case of multiple files with the same name in the same webjar.  Refer to this issue for details https://github.com/webjars/webjars-locator/issues/90","closed","","Skarafaz","2017-05-07T17:14:25Z","2017-05-24T08:52:30Z"
"","1418","Fix WebJarsResourceResolver multiple matches","Using WebJarAssetLocator.getFullPathExact instead of WebJarAssetLocator.getFullPath avoid multiple matches in case of multiple files with the same name in the same webjar.  Refer to this issue for details https://github.com/webjars/webjars-locator/issues/90","closed","","Skarafaz","2017-05-07T14:48:52Z","2017-05-07T15:55:25Z"
"","1321","SPR-15238 - Use getOrDefault method","Use the getOrDefault method for Maps in Java 8.","closed","","jonathanborenstein","2017-02-09T07:48:57Z","2017-02-09T11:32:01Z"
"","1404","Use Java 8 forEach method on Map","Use the forEach Method that Java 8 provides for the Map class.","closed","","jonathanborenstein","2017-04-25T22:03:19Z","2017-04-28T09:09:57Z"
"","1278","Build - Update Apache Licence 2.0 name and URL","Use same Apache Licence 2.0 formal name and URL across all Spring projects.  References: * https://www.apache.org/licenses/LICENSE-2.0#apply * https://github.com/spring-projects/spring-data-build/blob/master/pom.xml#L42","closed","","stonio","2016-12-29T16:55:06Z","2017-03-27T15:21:52Z"
"","1334","Polish CollectionFactoryTests","Use `is(empty())` to test empty collections.","closed","","stonio","2017-02-21T15:07:05Z","2017-03-27T15:21:11Z"
"","1352","[Documentation] Updated URI Template reference links","Updated link to URI Template reference - the existing link no longer works/exists.  Instead I've linked to the RFC and related GitHub repository.","closed","","pgpx","2017-03-07T18:12:31Z","2017-03-27T19:50:04Z"
"","1403","Merge pull request #1 from spring-projects/master","update","closed","","jonathanborenstein","2017-04-25T20:43:54Z","2017-04-25T20:44:09Z"
"","1351","Typo","Typo on the front page","closed","","neo01124","2017-03-07T11:46:59Z","2017-03-07T12:01:06Z"
"","1432","Polish RequestMappingHandlerMapping.java","type-level RequestMapping annotation is functionaly equal to Controller annotation","closed","","QBNemo","2017-05-24T09:18:34Z","2017-06-01T01:26:51Z"
"","1381","SPR-15423 ForwardedHeaderRequestWrapper should return a new StringBuffer instance on each invocation of the getRequestURL method","To be consistent with servlet containers a new StringBuffer instance should be returned each time the request.getRequestURL() method is invoked.    https://jira.spring.io/browse/SPR-15423","closed","","xyloman","2017-04-07T20:01:36Z","2017-04-07T21:02:20Z"
"","1456","Update to Reactor Bismuth-M2","This resolves https://jira.spring.io/browse/SPR-15646","closed","","rwinch","2017-06-09T14:52:12Z","2017-06-09T15:15:10Z"
"","1422","SPR-15505 - Use original query string of forwarded request","This pull request solves the problem happening when FlashMaps are used in conjunction with forwarded requests with differing query parameters. The AbstractFlashMapManager has used the originating URI but the query string of the forwarded request. That resulted to FlashMap not being matched even when both originating URI and query string matched the FlashMap attributes. The originating query string is now used to match the forwarded request.  This is my first pull request to Spring project so I hope I followed all the guidelines correctly. I've submitted the ICLA.   Issue: SPR-15505","closed","","svorcmar","2017-05-08T14:19:23Z","2017-05-20T06:05:31Z"
"","1380","[freemarker] improve ftl marcos support especially for handling forms","This PR will introduce a new freemarker template `spring-form.ftl` for proper form handling similar to the spring tag library and in addition it improves some of the existing message macros.  **spring-form.ftl** Here is a quick example of how the new form macros work.  ```ftl                                                          Value 1     Value 2                      ${error}                              ${error}                      ${error}               ${error}     ``` Most of the marcos are similar to the existing elements in the spring tag library. They also cover the type conversion via `PropertyEditor` to parse and format property values in the same way as the JSP tag library.  **spring.ftl** ```ftl   ``` Both macros now support optional parameters so there is now need to use the other marcos `messageText`,  `messageArgsText`, `themeText`, `themeArgsText` anymore. I've marked them deprecated, but let me know if we should remove them.  This PR is currently WIP, because the test cases fail and need some more love. Before I spent more time in this, let me know if this PR might be interesting and will be merged if everything is fine.","closed","","xhaggi","2017-04-07T08:21:25Z","2018-03-06T07:32:22Z"
"","1296","Fix SPR-15136 - Exception if no RequestDataValueProcessor is present","This modifications fix the way the reactive AbstractView retrieves the RequestDataValueProcessor bean, correctly returning null if there is no bean of such type at the Application Context.  This avoids an exception at the reactive RedirectView (which extends AbstractView) when trying to post-process the URL generated for  redirection, when no RequestDataValueProcessor exists.","closed","","danielfernandez","2017-01-13T23:04:38Z","2017-01-17T15:14:08Z"
"","1442","SPR-15604 Fixed cron expression validation method in CronSequenceGenerator","This method validated only fields length of the given expression, not the validity of cron expression. It seems logical that the method with name 'isValidExpression' would validate cron as well. Plus, possible NPE fixed.","closed","","Enigo","2017-05-31T19:55:43Z","2017-06-29T20:24:10Z"
"","1315","Add ability to set a caffeine ticker","This is useful for easier testing of cache implementations. Normally you would have to configure a completely new cache in the tests (e.g. something as described here: http://dolszewski.com/spring/multiple-ttl-caches-in-spring-boot/). Then it makes no more sense to actually write a test at all...  With spring boot you can use a CacheManagerCustomizer to just change the ticker, still testing the real configuration of the cache.  ```java     private static FakeTicker fakeTicker = new FakeTicker();      @Configuration     public static class TestConfig {         @Bean         public CacheManagerCustomizer customizer() {             return cacheManager -> cacheManager.setTicker(fakeTicker::read);         }     }      @Test     public void testRefresh() {         (...)         fakeTicker.advance(1, TimeUnit.HOURS);         (...)     } ```","closed","","ulich","2017-02-03T12:25:22Z","2017-02-03T20:02:53Z"
"","1390","SPR 15260 & 15419","This fixes SPR-15260 and SPR-15419.  SPR-15260 relates to automatically matching trailing separators so you don't need to add paths with  and without them. The behaviour is configurable on the path pattern parser and defaults to ON. It also better handles multiple separators, we don't silently match multiple separators in the path with a single one in the pattern.  SPR-15419 is related so i've included it in here. I've changed getPathRemaining() to return not only the remaining path but also any variables bound in the part of the path that matched.  I am submitting this as a PR because there are 'other tests' that are failing and I suspect some behaviours need altering to cope with the fact that trailing separators are auto matched now and I don't know 100% where all those places are. Feedback welcome.","closed","","aclement","2017-04-14T17:44:14Z","2017-04-19T19:38:17Z"
"","1482","Support instantiating Kotlin classes with optional parameters","This commit updates BeanUtils class in order to add Kotlin optional parameters with default values support to the immutable data classes support introduced by SPR-15199.  @jhoeller Could you please review and hopefully merge it with your changes if any?  Issue: SPR-15673","closed","","sdeleuze","2017-07-19T15:25:46Z","2021-04-28T09:58:06Z"
"","1316","Making example easier for GenericApplicationContext.","This commit makes easier for understanding example of GenericApplicationContext. The beginners may get confused while reading the reference docs due to undeclared object `ctx`. Hence, I think this change is essential.","closed","","aviskarBasnet","2017-02-06T05:50:50Z","2017-03-05T06:04:53Z"
"","1458","Introduce LocaleContextResolver in WebFlux","This commit introduces LocaleContextResolver interface, which is used at ServerWebExchange level to resolve Locale, TimeZone and other i18n related informations.  It follows Spring MVC locale resolution patterns with a few differences:  - Only LocaleContextResolver is supported since LocaleResolver is less    flexible  - Support is implemented in the org.springframework.web.server    package of spring-web module rather than in spring-webflux in order    to be able to leverage it at ServerWebExchange level  - The LocaleContextResolver to use is an optional DefaultServerWebExchange    constructor parameter rather than a bean with well known name  2 implementations are provided:  - FixedLocaleContextResolver  - AcceptHeaderLocaleContextResolver  It can be configured with both functional or annotation-based APIs.  Issue: SPR-15036","closed","","sdeleuze","2017-06-12T07:47:52Z","2021-04-28T09:57:04Z"
"","1314","Introduce JSON streaming support","This commit introduces JSON streaming support which consists of serializing HTTP request with `application/stream+json` media type as line delimited JSON.  It also optimize `Flux` serialization for `application/json` by using `flux.collectList()` and a single Jackson invocation instead of one call per element previous strategy. This change result in a x4 throughput improvement for collection with a lot of small elements.  Issues: [SPR-15095](https://jira.spring.io/browse/SPR-15095), [SPR-15104](https://jira.spring.io/browse/SPR-15104)","closed","","sdeleuze","2017-02-03T10:23:46Z","2021-04-28T09:56:58Z"
"","1472","Make getters and setters null-safety consistent","This commit ensures that null-safety is consistent between getters and setters in order to be able to provide beans with properties with a common type when type safety is taken in account like with Kotlin.  It also adds a few missing property-level @Nullable annotations.  Issue: SPR-15540","closed","","sdeleuze","2017-07-10T16:56:16Z","2021-04-28T09:57:06Z"
"","1304","Support i18n and nested template in ScriptTemplateView","This commit changes the 3rd parameter passed to the rendering function from String url to RenderingContext renderingContext.  RenderingContext contains 4 properties:  - ApplicationContext applicationContext  - Locale locale  - Function templateLoader  - String url  Issue: [SPR-15064](https://jira.spring.io/browse/SPR-15064)","closed","","sdeleuze","2017-01-24T10:59:11Z","2021-04-28T09:56:56Z"
"","1462","SPR-15690 Add cloneBuilder method on WebClient.Builder","This commit adds a new `cloneBuilder()` method on `WebClient.Builder`; we can now reuse the customizations of an existing builder without sharing its state across several `WebClient` building code paths.  cc @poutsma  Issue: SPR-15690","closed","","bclozel","2017-06-22T16:07:51Z","2017-06-27T22:49:24Z"
"","1313","SPR-15218 - Add logging to processPropertySource() (Obvious Fix)","This change set amends ConfigurationClassParser.processPropertySource() to log a message at debug level when a PropertySource with ignoreResourceNotFound = true cannot be loaded for any reason.  Detailed justification for this change, including a link to an illustrative project, may be found on the JIRA:  https://jira.spring.io/browse/SPR-15218  I believe this qualifies as an ""obvious fix"" which does not require a CLA signature according to the following document:  https://cla.pivotal.io/about#obvious-fixes","closed","","amdw","2017-02-03T03:55:10Z","2017-02-08T23:34:03Z"
"","1279","Update logging documentation to include Log4j 2","This also updates the version numbers provided in the sample pom.xml snippets for configuring logging for SLF4J and Log4j 1.x. A sample log4j2.xml file is also given with the same configuration as demonstrated in the log4j.properties example. The link to the Log4j 1.x site has been fixed to point to the 1.2 URL (do note that Log4j 1.2 is end of life and is not compatible with JDK 9+).  ---  I was also thinking of adding info about how Log4j 2.3 is the last release that supports JDK6, but that would only be relevant in the Spring 4.x documentation.","closed","","jvz","2016-12-31T08:31:03Z","2017-01-20T16:19:04Z"
"","1372","SPR-15411: Avoid query parameters in filename","The URL.getFile() javadocs say : Gets the file name of this URL. The returned file portion will be the same as getPath(), plus the concatenation of the value of getQuery(), if any. If there is no query portion, this method and getPath() will return identical results.  This causes a bug in Spring boot when specifying --spring.config.location=http://host/group/repo/raw/branch/config.yml?private_token=NyAq4wDit3hmJ7UZPyMU because "".yml?private_token=NyAq4wDit3hmJ7UZPyMU"" is not a supported extension.  My workaround until this gets fixed is to use --spring.config.location=http://host/group/repo/raw/branch/config.yml?private_token=NyAq4wDit3hmJ7UZPyMU&fake_param=whatever.yml  https://jira.spring.io/browse/SPR-15411","closed","","jhordies","2017-04-04T13:31:49Z","2017-04-06T12:03:50Z"
"","1413","SPR-15504 - UriComponentsBuilder's fromHttpRequest uses server port as host port when handling the Forwarded header","The UriComponentsBuilder's adaptFromForwardedHeaders method doesn't handle the host port of the Forwarded header correctly, which means that the URI generated through the fromHttpRequest method will append the server port to the host (of the Forwarded header), instead of just using the port (if any) defined in the host part of the Forwarded header. This pull request will try to parse the port of the host of the Forwarded header, and configure the builder accordingly. According to the RFC https://tools.ietf.org/html/rfc7239#section-5.3 and https://tools.ietf.org/html/rfc7230#section-5.4 the host part of the Forwarded header ""provides the host and port information from the target URI"", and as such should be handled in the adaptFromForwardedHeaders method.","closed","","gvdenbro","2017-05-02T08:35:32Z","2017-05-02T21:02:07Z"
"","1283","SPR-8190: Added support for Byte Buddy AOP proxies and bean subclassing instantiation strategy.","The suggested proxy makers are working but this is still work in progress. I require input for any further steps:  There is still no mechanism to specify a specific another byte code provider. Also, there is potential of sharing code for the cglib and Byte Buddy proxy classes unit tests but for this PR, i tried to not change any existing code. There are no explicit tests for the cglib bean proxy maker which could serve as a specimen which is why this call is untested.","open","in: core,","raphw","2017-01-02T12:54:14Z","2021-11-10T10:04:13Z"
"","1360","ServerHttpMessage[Reader|Writer] refactoring","The refactoring removes the separate class hierarchy under `ServerHttpMessage[Reader|Writer]`, including `AbstractServerHttpMessage[Reader|Writer]` and `Jackson2ServerHttpMessage[Reader|Writer]`, which used to wrap and delegate to the ""regular"" `HttpMessage[Reader|Writer]`.  Instead `[Encoder|Decoder]HttpMessage[Writer|Reader]` now have an expanded role covering the server-side contract too. There is also a new `ServerHttp[Encoder|Decoder]` that allows encoders and decoders to encapsulate the preparation of the very hints they also look for. The approach works well for the SSE writer which no longer needs to be wrapped with the `Jackson2ServerHttpMessageWriter` to get the encoding hints needed for the `Jackson2Encoder`.  See individual commits for more details.","closed","","rstoyanchev","2017-03-21T02:00:48Z","2017-04-05T18:46:18Z"
"","1323","Add a Kotlin RouterFunction implementation","The reason for this PR is to give opportunity to create functional controllers in Kotlin without implementing `RouterFunction.route` function but writing mappings inside the controller. Insired by [Twitter Finatra](https://github.com/twitter/finatra/blob/develop/examples/hello-world/src/main/scala/com/twitter/hello/HelloWorldController.scala) ""server as a function principle"" and [Spek](http://spekframework.org/)  - Kotlin testing framework.  Sample controller can look like this: ```kotlin class SampleController : KotlinRouterFunction({     GET(""/super"") { req ->         ServerResponse.ok().body(fromObject(""super!!!""))     } }) ```","closed","","melgenek","2017-02-12T13:11:34Z","2017-02-24T18:56:37Z"
"","1378","webmvc: AbstractEmitterSubscriber check terminated the right time","The original version was prone to lose the final item in case of an unfortunate interleaving:  ``` Drain thread                Source thread ----------------------------------------- elementRef.get() != null   request(1)                             onNext(item) -> elementRef.lazySet(item)                             onComplete() -> terminated = true; if (terminated)   emitter.complete() ``` The emitter is completed but the ""queue"" still holds the final element that will never be emitted.","closed","","akarnokd","2017-04-06T17:21:28Z","2017-04-06T19:01:39Z"
"","1425","Specify the HandlerMapping#order in the websocket example","The order value has to be specified for the HandlerMapping so that it will be ordered before the one that serves the static resources.","closed","","violetagg","2017-05-12T17:46:19Z","2017-05-29T08:51:20Z"
"","1411","Minor Javadoc typo fix: form -> from","The method takes in an `HttpInputMessage inputMessage`, so I don't think the intent of the comment was to _form_ an input message.","closed","","andreykaipov","2017-05-01T16:28:10Z","2017-06-13T17:00:34Z"
"","1310","Fix Javadoc in UriComponentsBuilder","The Javadoc for `UriComponentsBuilder.fromHttpUrl` contains an example that uses the wrong method.  If not paying attention, like me, this might lead you to believe that `fromHttpUrl` could be used with relative URIs, when in fact this leads to a `java.lang.IllegalArgumentException: ... is not a valid HTTP URL`.  This PR alters the Javadoc example to demonstrate correct use of the method.  I'm sure this is an Obvious Fix but I've signed the CLA anyway.","closed","","hdpe","2017-02-02T18:06:33Z","2017-02-02T22:30:35Z"
"","1483","Formatting fix","The ending backtick (`) is not not recognized when an apostroph (') is following. Corrected it by inserting a space.","closed","","jonasholtkamp","2017-07-21T09:53:50Z","2017-09-29T12:42:43Z"
"","1474","SPR-15762: improve performance of ContentCachingRequestWrapper","The `ContentCachingInputStream` class has only implemented the `int read()` method of the stream, let the corresponding `read(byte[], int, int)` method inherit from the `InputStream` class.  However, reading a few bytes from an `InputStream` with a loop call of the `int read()` method and a call with the `read(byte[], int, int)` method differs a lot. The latter method is much faster than the former method. My code and result for this comparison are listed bellow.  ```java byte[] bytes = new byte[100_000]; // 100k // test reading an input stream with loop method ByteArrayInputStream in1 = new ByteArrayInputStream(bytes); long start = System.nanoTime(); for (int i = 0; i < 100_000; i++) {     in1.read(); } System.out.println(""loop calling cost: "" + (System.nanoTime() - start) + ""ns"");  // test reading the same input stream with batch method ByteArrayInputStream in2 = new ByteArrayInputStream(bytes); byte[] buffer = new byte[1000]; int c = 0; start = System.nanoTime(); while (c < 100_000) {     c += in2.read(buffer); } System.out.println(""batch calling cost: "" + (System.nanoTime() - start) + ""ns""); ```  Finally, I got the following result on my machine.  ``` loop calling cost: 9158452ns batch calling cost: 85389ns ```","closed","","xnslong","2017-07-11T16:57:14Z","2018-07-10T05:29:14Z"
"","1342","1Merge pull request #1 from spring-projects/master","sync","closed","","chenjianyao","2017-02-27T05:05:27Z","2017-02-27T06:49:19Z"
"","1326","SPR-15254 RestTemplate with MockMvcClientHttpRequestFactory double encodes URIs","SPR-15254 RestTemplate with MockMvcClientHttpRequestFactory double encodes URIs  Using an URI with an email address as a request parameter with a RestTemplate method causes the @ to be double encoded. It should be encoded as %40, but will eventually end up as %2540. The reason is that the MockMvcClientHttpRequestFactory will run .toString() on the URI before passing it over to the MockMvc request builder. The MockMvc request builder assumes that Strings are unencoded, and will (re-) encode the URI. Passing it as an URI to the MockMvc builder will skip that encoding step.","closed","","JanespenCerpus","2017-02-14T08:55:38Z","2017-02-14T14:17:55Z"
"","1392","Fix Selenium links in testing.adoc","Selenium wiki & javadoc moved from google code to github. Also a fix to a link for Geb.","closed","","KingBuzzer","2017-04-18T17:37:57Z","2017-04-19T07:23:39Z"
"","1386","SPR-15448 - Fix condition in caching examples","See ticket SPR-15448, those conditions need the lenght() call.","closed","","michael-simons","2017-04-13T06:18:26Z","2017-04-13T15:51:14Z"
"","1488","Upgrade jackson to 2.9.0","See SPR-15548","closed","","eddumelendez","2017-07-30T23:39:47Z","2017-07-31T08:46:00Z"
"","1387","SPR-15449 - Improve unless condition and hint","See SPR-15449. The unless condition with an optional should use the safe navigation operator.","closed","","michael-simons","2017-04-13T06:19:31Z","2017-04-13T15:51:14Z"
"","1423","Remove redundant slashes in URI-string before it's URI will be resolve.","See more about issue here: https://github.com/spring-projects/spring-boot/issues/9133","closed","","daggerok","2017-05-09T00:09:27Z","2017-05-23T02:03:35Z"
"","1280","SPR-15075 - Remove String#toCharArray from ScriptUtils","ScriptUtils contains two calls to String#toCharArray for the sole purpose to iterating over all chars in a String. Not only is this unnecessary and can be replaced with String#charAt it also causes additional allocator and heap pressure because String#toCharArray rather than returning the backing array (which is gone in Java 9) creates a copy.  This commit contains the following changes:   - remove String#toCharArray from ScriptUtils and replace with    String#charAt  Issue: SPR-15075","closed","","marschall","2016-12-31T09:01:42Z","2017-01-03T22:31:16Z"
"","1353","spring-jdbc meta data prcoessing bugfix","ResultSet.getBoolean doesn't describe how to handle anything other than NULL, 0, or 1. Since the 'NULLABLE' column can return 2, meaning unknown, the code should change to process the ResultSet with the explicitly defined types.  Issue: SPR-15333","closed","","seanmmills","2017-03-08T19:33:02Z","2017-03-16T15:37:06Z"
"","1428","SPR-15544 - RestTemplate is missing ""Typed"" error handler.","RestTemplate's default error handler is DefaultResponseErrorHandler  The default error handler creates a String body from the output source. It would be nice if there were an alternative ""Typed"" Error handler that could use the same HttpMessageConverterExtractor to non-success states that handle JSON/XML responses.  See ticket: https://jira.spring.io/browse/SPR-15544  And similar historical request: https://jira.spring.io/browse/SPR-7001","closed","","SamG1000","2017-05-15T01:37:47Z","2017-06-01T01:30:58Z"
"","1363","Use a WebClient instead of a RestTemplate","Replace the RestTemplate with a WebClient.","closed","","jonathanborenstein","2017-03-22T01:23:09Z","2017-03-24T20:26:31Z"
"","1469","replace for  with addAdvisors method","replace the code  for (Advisor advisor : advisors) { 			proxyFactory.addAdvisor(advisor); 		} with proxyFactory.addAdvisors(advisors)","closed","","tian-junwei","2017-07-06T04:40:50Z","2017-07-12T15:25:30Z"
"","1465","Fix typo.","replace sessiondId to sessionId in SimpleBrokerMessageHandler.java","closed","","hackerwins","2017-06-27T00:29:15Z","2017-07-12T15:16:06Z"
"","1333","CollectionToObjectConverter - Refactor with Collection#isEmpty()","Replace `sourceCollection.size() == 0` by `sourceCollection.isEmpty()` in class `CollectionToObjectConverter`.","closed","","stonio","2017-02-21T14:51:14Z","2017-03-27T15:21:03Z"
"","1484","SPR-15741 - Remove the unuseful check from ReflectionUtils.getUniqueDeclaredMethods()","Remove the covariant return type check from ReflectionUtils.getUniqueDeclaredMethods(…)  This check is not needed as doWithMethods(…) by definition traverses the type hierarchy bottom up. Although, the check is not correctly implemented because it add the method just after it remove from the resulting list  Issue : SPR-15741 ICLA: Signed","closed","","medbelamachi","2017-07-21T22:01:44Z","2017-07-21T22:33:32Z"
"","1343","Remove extra string ""","Remove extra string ""","closed","","nkjackzhang","2017-03-03T04:01:05Z","2017-10-13T10:03:28Z"
"","1309","SPR-15124 Fix missing uriVariables","Related to https://jira.spring.io/browse/SPR-15124","closed","","making","2017-01-29T13:35:19Z","2017-01-30T17:15:07Z"
"","1430","Merge pull request #1 from spring-projects/master","pull from oirgin","closed","","tempestLXC","2017-05-18T10:35:18Z","2017-05-18T11:21:56Z"
"","1319","Implement reactive HiddenHttpMethodFilter","Provides the ability to embed an HTTP verb inside a hidden form field (like Thymeleaf's th:method operator).","closed","","gregturn","2017-02-06T19:58:55Z","2017-08-30T21:03:03Z"
"","1277","SPR-15066 - Allow request interceptor to add to headers set via entity","Provide a fully mutable `HttpHeaders` to `ClientHttpRequestInterceptor`s of a `RestTemplate` when headers are set using `HttpEntity`. This avoids `UnsupportedOperationException` if both `HttpEntity` and `ClientHttpRequestInterceptor` add values for the same HTTP header.  I came upon this error while investigating a bug report in a third-party starter I maintain. The user was using a `RestTemplate` where our starter (without the user's knowledge) provided a `ClientHttpRequestInterceptor` that added an `Authorization` header. The user rather wanted to use a different authentication method and provided an `Authorization` header with a different scheme through an `HttpEntity` passed to the `RestTemplate`. I am avoiding this problem in our starter by calling `HttpHeaders#set(String, String)` instead of `#add(String, String)`.  But seeing that `HttpEntityRequestCallback` was copying over headers from the provided `HttpEntity` to another `HttpHeaders` object used for the request, I thought the intended behavior was rather to provide a fully mutable `HttpHeaders` for the remainder of the processing of the request, including any invocation of `ClientHttpRequestInterceptor`s.  On the other hand, this is a marginal use case at best, and could even be considered misuse of the API.  Issue: [SPR-15066](https://jira.spring.io/browse/SPR-15066)","closed","","einarpehrson","2016-12-29T15:18:30Z","2017-12-15T16:48:15Z"
"","1480","SPR-15786 - Fix UriUtils.extractFileExtension() when the path fragment include '?' character","Prior to this commit, the function UriUtils.extractFileExtension()  is not able to correclty parse a path uri which include a fragment path mixed by a query string.  e.g :  - UriUtils.extractFileExtension(""/xxx/yyy.json#aaa?bbb""); // => return ""json#aaa"" instead of ""json""  - UriUtils.extractFileExtension(""/xxx/yyy.json#aaa.xml?bbb""); // => return ""xml"" instead of ""json""  Issue: SPR-15786 ICLA: already submitted","closed","","medbelamachi","2017-07-18T21:13:50Z","2017-07-19T20:35:24Z"
"","1375","SPR-15413: Add Kotlin coroutines for ListenableFuture","Prior to this commit there was no support for converting Kotlin **coroutines** to/from **ListenableFuture**. Following that change a number of functions will be available for such conversion.  Specifically these functions are introduced:   - // for converting suspending lambda to ListenableFuture    `fun  listenableFuture(context: CoroutineContext = CommonPool,        block: suspend () -> T): ListenableFuture`   - // for converting Deffered into ListenableFuture    `fun  Deferred.asListenableFuture(): ListenableFuture`   - // for converting ListenableFuture into suspending function    `suspend fun  ListenableFuture.await(): T`  The code in this PR draws heavily on the code from https://github.com/Kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-jdk8/src/main/kotlin/kotlinx/coroutines/experimental/future/Future.kt. This is why Roman Elizarov is also an author.","closed","in: core,","konrad-kaminski","2017-04-04T22:49:46Z","2022-05-26T15:11:05Z"
"","1306","Print session attributes in PrintingResultHandler in Spring MVC Test","Print session attributes in PrintingResultHandler in Spring MVC Test when print result handler is enabled. Update unit and smoke tests accordingly.  JIRA issue: https://jira.spring.io/browse/SPR-15189","closed","","f-lopes","2017-01-25T18:59:31Z","2017-04-30T17:58:14Z"
"","1302","Only apply dependency-management and propdeps-maven to subprojects","Previously, the dependency management and propdeps-maven plugins were being applied to all projects. The latter caused a problem with publishing to Artifactory as the buildSrc project now had the propdeps-maven plugin applied to it.  This commit removes the logic that was applying the propdeps-plugin to all projects so that it's only applied to subprojects excluding the buildSrc project. The logic that applies the dependency management plugin has been moved to the same location. It is applied after the propdeps-maven plugin as, otherwise, the pom customization does not work correctly and optional dependencies are not included in generated poms.  Issue: SPR-15167","closed","","wilkinsona","2017-01-19T21:42:03Z","2017-01-19T21:44:23Z"
"","1276","SPR-15054: Add Kotlin extensions for function Web API","PR ready to be merged after @jhoeller approval.","closed","","sdeleuze","2016-12-26T16:56:17Z","2021-04-28T09:56:56Z"
"","1335","Refactor with String#isEmpty()","Polish few classes with `.isEmpty()` instead of `.length() == 0`.","closed","","stonio","2017-02-21T15:25:06Z","2017-02-22T11:25:18Z"
"","1369","Deprecate AsyncRestTemplate and simply access to request/response object in Web[Test]Client","Please read the individual commit messages for more information.  @rstoyanchev Can this be merged?","closed","","poutsma","2017-03-29T12:13:21Z","2017-03-29T16:25:50Z"
"","1408","SPR-15492 - Improve servlet request parameter name handling","Parameters whose names are including square brackets such as ""items[0][id]"" and ""items[0][tags][]"" produce org.springframework.beans.InvalidPropertyException when binding to a model object  This commit improves the WebUtils class by adding simple regular expressions, so those parameters can be bound to a model object without unnecessary exception  Issue: SPR-15492","closed","","HomoEfficio","2017-04-28T04:13:45Z","2017-06-01T02:11:26Z"
"","1461","fix a missing line of xml fragment","Obviously missing the **""schemaLocation""** property","closed","","vincenthsin","2017-06-17T06:18:17Z","2017-06-17T08:34:05Z"
"","1329","Fix typo in Javadoc","Obvious Fix","closed","","kmiya","2017-02-16T09:26:11Z","2017-02-16T14:59:03Z"
"","1470","SPR-15742 - Add Mediatype for Nottingham Problem","Nottingham Problem Media type: application/problem+json https://tools.ietf.org/html/rfc7807","closed","","simplicii","2017-07-06T09:06:01Z","2017-08-17T04:50:28Z"
"","1385","Merge pull request #1 from spring-projects/master","mrege Request","closed","","tianrobin","2017-04-12T07:58:10Z","2017-04-12T08:01:13Z"
"","1406","merge request","merge request","closed","","tianrobin","2017-04-26T11:09:32Z","2017-04-26T12:00:53Z"
"","1349","Doc fix for example of GenericApplicationContext & representation of ConditionalGenericConverter","Making easier for understanding example of GenericApplicationContext by changing undeclared object `ctx` to `context`. And, also fix for representation of ConditionalGenericConverter interface. I think these changes are essential.","closed","","aviskarBasnet","2017-03-05T06:42:39Z","2017-03-05T09:12:24Z"
"","1366","Spring JDBC not correctly processing Postgresql ?| and ?& operator","JIRA link https://jira.spring.io/browse/SPR-15382  Postgresql has many functional operators such as ?| and ?& (for example [https://www.postgresql.org/docs/9.5/static/functions-json.html]).  Spring JDBC processing for this case is not correct. When running the following SQL: ``` select '[""3"", ""11""]'::jsonb ?| '{1,3,11,12,17}'::text[] ```  ... I see exceptions like this: ``` class org.springframework.dao.InvalidDataAccessApiUsageException SQL [select '[""3"", ""11""]'::jsonb ?| '{1,3,11,12,17}'::text[]]: given 1 parameters but expected 0 ```  If I use placeholders I see: ``` class org.springframework.dao.InvalidDataAccessApiUsageException Not allowed to mix named and traditional ? placeholders. You have 1 named parameter(s) and 1 traditional placeholder(s) in statement:  ... ```","closed","","arturgspb","2017-03-27T08:49:18Z","2017-03-27T08:57:16Z"
"","1298","SPR-15142: Set MockSessionCookieConfig#maxAge default to -1","JIRA issue [SPR-15142](https://jira.spring.io/browse/SPR-15142).","closed","","vpavic","2017-01-15T23:16:58Z","2017-01-16T02:24:00Z"
"","1370","javadocs : removed a duplicate word and fixed grammar.","javadocs : removed a duplicate word and fixed grammar.","closed","","ameyjadiye","2017-03-31T20:52:12Z","2017-04-02T06:11:18Z"
"","1361","[javadoc] Remove a redundant word.","javadoc: remove a redundant word.","closed","","linbaiye","2017-03-21T05:01:25Z","2017-03-27T12:31:05Z"
"","1354","Fix a typo in ValidationUtils.java","javadoc typo","closed","","QBNemo","2017-03-13T03:55:59Z","2017-03-27T08:13:13Z"
"","1440","Revert Incorrect MessagingTemplate Change","Issue: SPR-15991  The change to ""optimize"" the template by not rebuilding the reply message when the original header channels was null was incorrect.  We need to null out those headers if they were originally null.","closed","","garyrussell","2017-05-31T16:32:50Z","2017-05-31T19:13:54Z"
"","1466","SPR-15708 - Add debug logging for CORS rejections","Issue: SPR-15708 I have submitted the ICLA.","closed","","shorn","2017-06-28T01:15:26Z","2017-07-03T07:50:12Z"
"","1463","Add onError callback to DeferredResult","Issue: SPR-15614","closed","","violetagg","2017-06-23T19:54:46Z","2017-06-30T07:15:29Z"
"","1435","Timeout Overrides in Messaging Templates","Issue: SPR-15591  Provide a mechanism to override the configured send and receive timeouts in the GenericMessagingTemplate.  - overload `doReceive()` to take a receive timeout argument - for `sendAndReceive()` methods examine message headers for these timeout values   - remove headers to avoid propagation   - avoid the unconditional rebuild of the reply message if the original headers weren't present - also remove headers from simple `send()` operations - change javadocs for the setters to indicate they are now defaults - add properties to allow the user to override the header names used - change `TemporaryReplyChannel` to use the `send` argument and change it to static   - add package-protected ctor to avoid the compiler creating a synthetic ctor for access","closed","","garyrussell","2017-05-26T17:33:10Z","2017-05-31T16:33:45Z"
"","1395","Add originalMessage to ErrorMessage","Issue: SPR-15459","closed","","garyrussell","2017-04-19T18:07:04Z","2017-04-19T18:16:58Z"
"","1368","Use JDK8 hashCode() for primitives in ObjectUtils","Issue: SPR-15395","closed","","dreis2211","2017-03-28T17:15:26Z","2017-04-06T11:34:14Z"
"","1367","Ensure NPE will not be thrown when cancelling a subscription","Issue: SPR-15393","closed","","violetagg","2017-03-28T11:09:02Z","2017-03-29T20:03:41Z"
"","1301","Apply propdeps-maven plugin to ensure the optional deps are in poms","Issue: SPR-15167","closed","","wilkinsona","2017-01-19T17:32:18Z","2017-01-19T19:48:40Z"
"","1303","Enable Reactive Jetty's Websocket suspend/resume functionality","Issue: SPR-15130","closed","","violetagg","2017-01-23T18:49:51Z","2017-01-25T00:50:05Z"
"","1308","Fix trailing / handling in UriComponents(Builder)","Issue: SPR-15124","closed","","sdeleuze","2017-01-28T11:25:47Z","2021-04-28T09:56:57Z"
"","1284","Implement MessagingException.toString()","Issue: SPR-15091","closed","","garyrussell","2017-01-04T13:56:49Z","2017-01-05T09:26:10Z"
"","1439","SPR-15602 - Optimize DefaultUserDestinationResolver.resolveDestination()","Issue: https://jira.spring.io/browse/SPR-15602","closed","","dreis2211","2017-05-31T14:56:49Z","2017-06-01T06:31:07Z"
"","1320","Use Class.getTypeName() where appropriate","Issue: https://jira.spring.io/browse/SPR-15237","closed","","dreis2211","2017-02-08T19:38:31Z","2017-02-08T23:25:02Z"
"","1291","SPR-15121 - Update DataSourceTransactionManager.java","IsolationLevelDataSourceRouter.determineCurrentLookupKey returns the result was null, since AbstractPlatformTransactionManager.getTransaction (TransactionDefinition definition) before calling doBegin(Object transaction, TransactionDefinition definition), setCurrentTransactionIsolationLevel(Integer isolationLevel) is not set, but get a connection, it's bug.","closed","status: declined,","springrain","2017-01-10T10:10:19Z","2021-11-24T14:13:05Z"
"","1376","SPR-14925: Return 5xx HTTP status for invalid target types with Jackson","InvalidDefinitionException has been introduced in Jackson 2.9 to be able to differentiate invalid data sent from the client (should still generate a 4xx HTTP status code) from server side errors like beans with no default constructor (should generate a 5xx HTTP status code).  Could you have a look and say me if you are ok @poutsma ?","closed","","sdeleuze","2017-04-05T08:39:14Z","2021-04-28T09:56:58Z"
"","1305","Use separate reactive HttpHandler for Tomcat/Jetty","Introduce separate adapters TomcatHttpHandlerAdapter/JettyHttpHandlerAdapter so that each adapter can use the Tomcat/Jetty APIs for reading/writing with ByteBuffer.","closed","","violetagg","2017-01-24T19:25:56Z","2017-01-26T12:39:21Z"
"","1348","Process all strategies for ContentNegotiationManager to resolve mediaTypes","In regards to https://jira.spring.io/browse/SPR-15312","closed","","sethrife","2017-03-04T20:49:03Z","2017-03-06T19:43:12Z"
"","1347","Process all strategies for ContentNegotiationManager to resolve mediaTypes","In regards to https://jira.spring.io/browse/SPR-15312","closed","","sethrife","2017-03-04T20:05:22Z","2017-03-04T20:47:43Z"
"","1346","Process all strategies for ContentNegotiationManager to resolve media…","In regards to https://jira.spring.io/browse/SPR-15312","closed","","sethrife","2017-03-04T18:46:05Z","2017-03-04T20:02:28Z"
"","1431","add value predicate support in BeanUtils.copyProperties()","In my project, I have some ugly code to merge 2 properties object like this   ```java Configuration global = ... Configuration config = ...  Configuration mergeConfig = new Configuration() BeanUtils.copyProperties(mergeConfig, global);  if(config.getFoo() != null){    mergeConfig.setFoo(config.getFoo()); }  if(config.getBar() != null){    mergeConfig.setBar(config.getBar()); }  if(config.getXxx() != null){    mergeConfig.setXxx(config.getXxx()); } ```  My code only make sure that I only override non null values. This is very ugly because I need to check null in all of attributes.  This pull request is to add Predicate support for BeanUtils.copyProperties, so I can merge properties easily.  ```java  Configuration global= ... Configuration config = ...  Configuration mergeConfig = new Configuration(); BeanProperties.copyProperties(mergeConfig, global); BeanProperties.copyProperties(mergeConfig, config, Object::nonNull)  ```","closed","in: core,","khannedy","2017-05-23T11:40:14Z","2021-11-24T14:34:33Z"
"","1419","Fix sample code for bean definition using functional style on web-flux.adoc","I've fixed wrong sample code for bean definition using functional style.  * The `registerBean` does not exist  on the `ApplicationContext` * `AnnotationConfigApplicationContext` instance generated by default constructor is need calling the `refresh` method  Please review this.","closed","","kazuki43zoo","2017-05-07T16:00:01Z","2017-06-01T02:06:32Z"
"","1421","Fix javadoc of AbstractHandlerMapping#setPathMatcher","I've fixed wrong javadoc comment.","closed","","kazuki43zoo","2017-05-07T20:53:16Z","2017-05-07T21:04:16Z"
"","1288","Add media tpyes defined by RFC 7807: Problem Details for HTTP APIs","I've fixed the [SPR-15110](https://jira.spring.io/browse/SPR-15110). Please review this.","closed","","kazuki43zoo","2017-01-08T03:24:10Z","2017-01-19T14:16:04Z"
"","1330","Add tests for AbstractRoutingDataSource","I've added test case class for the `AbstractRoutingDataSource`.","closed","type: task,","kazuki43zoo","2017-02-18T17:22:14Z","2021-11-22T12:47:34Z"
"","1325","SPR-15253 - Add convenience setup methods in AbstractRoutingDataSource","I've added following methods in `AbstractRoutingDataSource`.  * `addTargetDataSource` * `addTargetDataSourceName`  Issue: [SPR-15253](https://jira.spring.io/browse/SPR-15253)  Please review this.","closed","","kazuki43zoo","2017-02-14T00:06:28Z","2017-02-14T07:52:59Z"
"","1292","SPR-15188 - If backing Cache is down @CacheResult does not seamlessly call method and return.","I wish to have the JCache annotation `@CacheResult` work seamlessly when the backing cache is down or unavailable at present this is not possible.    I've been able to intercept cache down exceptions during the GET cache call that is executed in the before method phase, this is because the `CacheResultInterceptor` at line 53 correctly defers to the `AbstractCacheInvoker` for the GET which in turns handles exceptions with the ErrorHandler.  However in the post method call phase where we attempt to place a value into the cache, it fails and throws an exception further up to the caller, because `CacheResultInterceptor` at line 62 deals directly with the cache rather than going through `AbstractCacheInvoker`  Therefore this change...  Allows ErrorHandler to intercept cache.put AFTER the method call in same manner that cache.get allows for ErrorHandler before method call.  Also adding ErrorHandler interceptor to put on ExceptionCache.  This then allows us to handle ANY cache exceptions in the same manner, such as the cache being down in both PRE and POST method call phases.","closed","","dbrimley","2017-01-11T16:47:18Z","2017-02-18T05:05:42Z"
"","1452","Remove duplicate code","I think this is duplicate code.   It's possible to reduce the duplicate code by extracting a `Comparator`.","closed","","diguage","2017-06-07T07:09:40Z","2019-12-11T07:00:22Z"
"","1344","Fix JRubyException message access","I do not think I created this PR properly but maybe. Newer JRuby changed access on message in JRubyException to private. This causes an error when attempting to use a private variable in public scope. I changed it from .message to ex.getMessage(). Also removed null check, as it is only needed on the JRubyException object.  If the PR is in fact improperly created, let me know and I will attempt to recreate/resubmit properly. This pertains to 4.3.7 release/branch.","closed","","wltjr","2017-03-03T18:13:28Z","2017-03-07T14:34:30Z"
"","1434","Spr 15585","I copied in ""Integration"" and forgot to change it to ""Framework"". I've fixed that.  Cancel this pull request, please. I got all the changes rather than just one.","closed","","Buzzardo","2017-05-24T21:40:23Z","2017-05-29T11:19:11Z"
"","1407","Add more static builder methods to ResponseEntity","I added a couple more static helper methods that either produce a BodyBuilder or a ResponseEntity with specified body. I find myself typing .build() or 'manually' constructing such response entities frequently, thus I made these changes. Some unit tests were added as well as changed (prefixed with 'NoBody') in order to fit the new changes & be understood better by just reading the method name.  * I've signed the CLA","closed","","ntakouris","2017-04-26T16:34:20Z","2017-06-01T13:07:20Z"
"","1337","Update AnnotationUtils.java","https://jira.spring.io/browse/SPR-15287","closed","","jonathanborenstein","2017-02-24T20:01:34Z","2017-02-27T19:04:21Z"
"","1300","SPR-15158 Add Kotlin idiomatic extensions for JDBC API","https://jira.spring.io/browse/SPR-15158","closed","","MarioAriasC","2017-01-18T01:26:52Z","2017-01-31T16:32:20Z"
"","1424","SPR-15537 - Logging exception in ExceptionWebSocketHandlerDecorator.","Hello, I am working on an app which includes a module of spring-websocket. I did some changes in the code and I was having some hibernate exception in the back, but the exception is not getting printed/logged. I found out this while debugging the code. In this class ""ExceptionWebSocketHandlerDecorator"" in this public static method ""tryCloseWithError"", exception handling is there but logging is missing.","closed","","pathfinder2104","2017-05-12T07:13:18Z","2017-06-01T01:33:00Z"
"","1358","Fixed a bug where gradle build would fail on windows.","Gradle build would fail because of differences of path separators between linux and windows.","closed","","Andrei94","2017-03-19T14:15:28Z","2017-05-17T20:22:40Z"
"","1356","MediaTypeFactory should come with its own complete mime.types file","For your consideration, @jhoeller and @rstoyanchev, here is my PR for resolving https://jira.spring.io/browse/SPR-14908. I've opted to split the PR in three commits: the first showing the `MediaTypeFactory` changes, the second fixes the main code base to conform to these changes, and the third does the same for the test code base.  As per discussion with Juergen, I've dropped all JAF usage in favour of the new `MediaTypeFactory`, including that in pre 5.0 code, and deprecate the various `useJaf` properties we had in that code, with no direct replacement.","closed","","poutsma","2017-03-14T14:25:38Z","2017-03-23T14:21:18Z"
"","1478","Fix ProtobufJavaUtilSupport not flushing output stream.","Flush stream once we have finished printing the protobuf object to json.  We were having a problem with empty responses, and tracked it down to here.  @bclozel You seemed to have implemented the protobuf v3 converter. Can you look over it quickly?","closed","","LarsOL","2017-07-17T06:22:37Z","2017-09-26T14:43:39Z"
"","1399","Optimize AntPathMatcher when checking for potential matches","Fixes: https://jira.spring.io/browse/SPR-15477","closed","","dreis2211","2017-04-24T16:55:34Z","2017-04-27T18:26:38Z"
"","1384","Improve performance of StringUtils.replace() if pattern is not found","Fixes https://jira.spring.io/browse/SPR-15430","closed","","dreis2211","2017-04-10T20:11:38Z","2017-04-11T14:11:49Z"
"","1285","Improve performance of StringUtils.capitalize()","Fixes https://jira.spring.io/browse/SPR-15094","closed","","dreis2211","2017-01-04T18:15:24Z","2017-01-12T19:22:27Z"
"","1379","Ensure the subscriber is initialized before switching the states","Fixed NPE thrown by WriteResultPublisher$State$2.publishComplete caused by a thread-safety issue  Issue: SPR-15418","closed","","violetagg","2017-04-06T19:15:00Z","2017-04-12T06:21:55Z"
"","1322","Fix Javadoc in ContentResultMatchers","Fix example code in Javadoc.","closed","","msysyamamoto","2017-02-09T12:54:00Z","2017-02-09T15:07:47Z"
"","1357","Extract CompositeHttpHandler functionality","Extract CompositeHttpHandler to a package private class and add direct support via `HttpHandler.of(...)`. This removes the need for the `HttpHandlerAdapterSupport` class.  See https://github.com/spring-projects/spring-boot/issues/8559 for background.","closed","","philwebb","2017-03-14T17:30:53Z","2017-03-15T21:23:54Z"
"","1295","Fix construction of UndertowServerHttpRequest.uri","Ensure there is no ""?"" at the end of the generated URI when there is no query available.","closed","","violetagg","2017-01-12T14:29:46Z","2017-01-17T15:19:32Z"
"","1307","SPR-15196 - Check for null on the argument instead of the message","Don't know if this fix is _truly trivial_, but let me know if a JIRA ticket is required.  I did already sign the CLA, so that should be good.","closed","","Shredder121","2017-01-27T12:58:26Z","2017-01-27T13:21:02Z"
"","1426","SPR-15543: Fix duplicate subscriptionId for destination-sessionId key","DefaultSubscriptionRegistry's destinationCache accessCache contains duplicate subscriptionId for destination - sessionId key if findSubscriptions is called after addSubscription and before updateAfterNewSubscription.  The change includes checking for existing subsId in updateAfterNewSubscription method before adding subsId value to sessionId key. (Set implementation to avoid duplication can be considered or other better solutions are appreciated).  Issue: SPR-15492  I have submitted CLA.","closed","","baot","2017-05-14T14:10:28Z","2017-05-14T15:53:14Z"
"","1427","SPR-15543: Fix duplicate subscriptionId for destination-sessionId key","DefaultSubscriptionRegistry's destinationCache accessCache contains duplicate subscriptionId for destination - sessionId key if findSubscriptions is called after addSubscription and before updateAfterNewSubscription.  The change includes checking for existing subId in updateAfterNewSubscription method before adding subId value to sessionId key. (Set implementation to avoid duplication can be considered or other better solutions are appreciated).  Issue: SPR-15543  I have submitted CLA.","closed","","baot","2017-05-14T16:01:21Z","2017-05-22T20:13:40Z"
"","1475","SPR-15763 - Unnecessary assertion in setExceptionMessage of CustomizableTraceInterceptor","CustomizableTraceInterceptor used to not calculate the invocation time when an exception occurred.  Because of that, INVOCATION_TIME was not valid in the exception message.  However, that bug was fixed, but the prohibition on the INVOCATION_TIME placeholder was not removed from the setExceptionMessage() for the CustomizableTraceInterceptor.  As such, I just removed this assertion.  The tests looked like they ignored checking this.","closed","","solidjb","2017-07-11T23:55:36Z","2017-07-13T02:59:29Z"
"","1448","add ordered support in interceptor registration","Currently there is no guarantee for ordering of `HandlerInterceptor` to be invoked. So if we want to create `HandlerInterceptor` that invoked before or after third party library's `HandlerInterceptor`, we can not guarantee that.  The idea of this feature is add order attribute in `InterceptorRegistration`, and when `InterceptorRegistry.getInterceptors()` being invoked, it will sorted first, so we can customize    ```java registry.addInterceptor(interceptor1).order(Ordered.LOWEST_PRECEDENCE); registry.addInterceptor(interceptor2).order(Ordered.HIGHEST_PRECEDENCE); ```  This is the JIRA https://jira.spring.io/browse/SPR-15620","closed","","khannedy","2017-06-04T07:30:51Z","2018-12-04T14:10:36Z"
"","1281","Remove use of Boolean constructors","Codacy warns us that there are several references to Boolean constructors in the tests. Direct usage of the Boolean constructor is discouraged and even deprecated in Java 9 [1]. Boolean constructor use can easily be replaced with the constant instances.  This commit contains the following changes:   - replace references to Boolean constructors with boolean constants in    JSP tag tests  - update the copyright year where necessary  - BooleanComparatorTests is intentionally left unchanged as it should    also work with the non-constant instances correctly   [1] http://download.java.net/java/jdk9/docs/api/java/lang/Boolean.html#Boolean-boolean-  Issue: SPR-15076","closed","","marschall","2016-12-31T10:26:42Z","2017-01-04T08:34:18Z"
"","1282","Avoid use of double constructor of BigDecimal","Codacy warns about an Error Prone [1] use of the double constructor of BigDecimal in tests. The reason given is that it is a source of precision loss if the number does not have an exact double representation. The recommendation is to use the String constructor of BigDecimal instead as it does not require using a lossy argument.  This commit contains the following changes:   - replace usage of the double constructor of BigDecimal with the    String constructor of BigDecimal in JdbcTemplateQueryTests  - update the copyright year   [1] http://errorprone.info/bugpattern/BigDecimalLiteralDouble  Issue: SPR-15077","closed","","marschall","2016-12-31T11:16:20Z","2017-01-04T08:33:34Z"
"","1468","Adapt to the changes in Reactor Netty ClientOptions","ClientOptions/HttpClientOptions are now created via Builder","closed","","violetagg","2017-07-04T13:26:29Z","2017-07-13T14:10:39Z"
"","1338","Clean up findAnnotation Method","Clean up method by removing multiple for loops.  https://jira.spring.io/browse/SPR-15288","closed","","jonathanborenstein","2017-02-24T20:41:10Z","2017-03-27T08:18:45Z"
"","1441","Doc update","Changed a note to a warning and added more detail.","closed","","Buzzardo","2017-05-31T18:10:36Z","2021-01-08T17:07:01Z"
"","1444","Fixed reference","Can not find the `NonNull`. I think it is `Nullable`.","closed","","diguage","2017-06-03T07:23:21Z","2017-06-03T14:52:48Z"
"","1443","Support date properties in Content-Disposition HTTP header","As discussed with @rstoyanchev, before merging this PR we should choose a strategy regarding to date/time that we previously exposed with `long` like in `long HttpHeaders.getAccessControlMaxAge()`.  Should we continue to use `long` for consistency? Should we add `Instant` based variants and deprecate `long` based ones?  Pros and cons should be discussed and the solution should be applied globally to Spring Framework API like we did for `Optional`.  cc @jhoeller   Issue: SPR-15555","closed","","sdeleuze","2017-06-02T14:24:14Z","2021-04-28T09:57:03Z"
"","1473","SPR-15755: Introduce Kotlin functional bean registration DSL","As a follow-up of the [ApplicationContext Kotlin extensions](https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0#functional-bean-registration-with-kotlin), close to the [Kotlin functional WebFlux DSL](https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0#spring-web-functional-api-the-kotlin-way) and similar to the [Groovy bean configuration DSL](https://spring.io/blog/2014/03/03/groovy-bean-configuration-in-spring-framework-4) (but very different in term of implementation since no internal XML-based application context is involved), this commit is about introducing a lightweight Kotlin DSL for functional bean registration.  It allows declaring beans as following:  ```kotlin beans { 	bean() 	profile(""bar"") { 		bean(""bar"") 	} 	environment({it.activeProfiles.contains(""baz"")}) { 		bean { Baz(it.ref()) } 		bean { Baz(it.ref(""bar"")) } 	} }  ```  Advantages compared to Regular `ApplicationContext` API are:  - No exposure of low-level `ApplicationContext` API  - Focused DSL easier to read, but also easier to write with a fewer    entries in the auto-complete  - Declarative syntax instead of functions with verbs like `registerBeans`    while still allowing programmatic registration of beans with if    expressions or for loops  - Such DSL is idiomatic in Kotlin  - No need to have an `ApplicationContext` instance to write how you    register your beans since `beans { }` DSL is conceptually a    `Consumer`  This DSL effectively replaces `ApplicationContext` Kotlin extensions as the recommended way to register beans in a functional way with Kotlin.  Issue: [SPR-15755](https://jira.spring.io/browse/SPR-15755)","closed","","sdeleuze","2017-07-11T12:37:14Z","2021-04-28T09:57:07Z"
"","1362","Add preferred content type configurer method","Applications which support end points with a variety of content types often want to specify a default set of content types to ""prefer"" when a client does not request a specific content type. Such a list would replicate a set of default content types with ""quality"" parameters (such as those used in accept headers) for requests which accept all (*/*) content types.  The existing functionality to set the default content type will cause any end point which does not support the specified default to return a 406 status code when ""*/*"" (or nothing) is provided in an Accept header - however, based on the documentation, it appears this is intended. For this reason, this PR adds a new method to the configurer, as opposed to enhancing the defaultContentType method.  I proposed this addition/enhancement in JIRA issue [SPR-15367](https://jira.spring.io/browse/SPR-15367) I have also submitted ICLA per the contribution guidelines","closed","","romeara","2017-03-21T05:07:02Z","2017-04-11T16:51:27Z"
"","1486","SPR-15819 - URI variables with MockRestRequestMatchers requestTo","Adds ability to use URI variables with `MockRestRequestMatchers`'s `requestTo`","closed","","drumonii","2017-07-25T01:27:42Z","2017-08-15T13:11:45Z"
"","1433","Spr 15585","Added an intro paragraph, so that the heading wouldn't show up on a page by itself. Addresses issue SPR-15585.","closed","","Buzzardo","2017-05-24T21:03:04Z","2017-05-25T16:10:22Z"
"","1402","Support for the last day in month cron expression","Add the support of the code ""L"" for the field day of month in the cron expression.","closed","status: superseded,","Flounn","2017-04-25T18:36:44Z","2021-04-27T11:30:58Z"
"","1289","SPR-15119: Add Kotlin array-like addAttribute to Model and ModelMap","Add idiomatic Kotlin `addAAttribute` to Model and ModelMap (cc @sdeleuze)  ```kotlin // orginal code model.addAttribute(""firstName"", firstName) //kotlin idiomatic code model[""firstName""] = firstName ```","closed","","MarioAriasC","2017-01-10T01:23:13Z","2017-01-10T21:05:16Z"
"","1481","MimeType should use last `+` to delimit suffix","According to the [RFC][1], multiple `+` symbols are allowed in a media type. The _last_ one should always be used to delimit the structured syntax suffix.    The `MimeType` class was using the first `+` rather than the last, so media types with multiple `+` symbols failed to be included in the correct type matchers.    Issue: [SPR-15795][2]  CLA: Signed.    [1]: https://trac.tools.ietf.org/html/draft-ietf-appsawg-media-type-regs-14#section-4.2  [2]: https://jira.spring.io/browse/SPR-15795","closed","","drautb","2017-07-19T14:46:52Z","2017-07-25T13:17:51Z"
"","1287","Introduce mime/media types for application/rss+xml","`MimeTypeUtils` and `MediaType` have constants for Atom but not for RSS. It'd be useful to have constants for both.  Issue: SPR-15109  Submitted ICLA.","closed","","markhobson","2017-01-07T17:37:47Z","2017-01-12T19:24:28Z"
"","1377","webmvc: fix AbstractEmitterSubscriber","@smaldini brought this class to my attention and asked me to verify it. There were a couple of problems with the `AbstractEmitterSubscriber`:  - Using a shared queue for items, error and completion signals. The problem with this is that if the user is in the business of processing `Exception`s as values, the logic may treat it as an error even if it came through `onNext`. - Since `onError` and `onComplete` are at most once events, there is no need to queue them up but could be simply saved in a field and read out in the emission side. - Now that the terminal events have their own fields, the queue can be simplified to an `AtomicReference` because this class requests items one-by-one. - It is unclear where the `onTimeout` body would trigger in respect to the regular signals, thus calling `emitter` directly from it is likely violating the serialization requirement of the emitter. The code now pretends to call `onComplete` which gets properly serialized with respect to any other signal. - In the handler method, if the `send` method crashed, the exception was not forwarded to the emitter for some reason. I assume the error should be reported since the source is otherwise cancelled and won't send any new item/signal. - Changed the `executing` to a linearizing atomic counter because the original CAS+Set based trampolining is generally hard to verify on not losing request for scheduling.  I also kept the one-by-one nature and the rescheduling logic assuming the intent was not to ""cannibalize"" the executor if there was plenty of source items available and behave ""fairly"" with other tasks running on the same executor.","closed","","akarnokd","2017-04-06T13:26:57Z","2017-04-06T17:03:15Z"
"","1332","Merge pull request #1 from spring-projects/master","2月21日更新","closed","","see","2017-02-21T06:48:16Z","2017-02-21T11:25:50Z"
"","1374","Ensure ISE will not be thrown when the client disconnects","- ServletServerHttpResponse.ResponseAsyncListener#onError/onTimeout must complete the async operation - ServletHttpHandlerAdapter.HandlerResultSubscriber#onComplete must check that the async operation is not completed  Issue: SPR-15412","closed","","violetagg","2017-04-04T18:37:39Z","2017-04-12T06:23:09Z"
"","1401","SPR-15481 Fixed AnnotationUtils.getValue() operation","- Fixed AnnotationUtils.getValue() operation to ensure it re-throws AnnotationConfigurationException instead of swallowing it (as it is done in few other operations in AnnotationUtils) - Added test - Removed unnecessary '@SuppressWarnings(""unchecked"")'","closed","","olegz","2017-04-25T16:46:47Z","2017-04-26T13:05:34Z"
"","1294","Fix Javadoc for CronSequenceGenerator","- fix minute field set to * in example pattern which in fact makes execution to happen every minute of specified hours.","closed","","echoAlexey","2017-01-12T13:07:02Z","2017-01-20T16:28:45Z"
"","1324","SPR-13735 - Move ChainedTransactionManager from spring-data commons to spring-tx","- copy ""org.springframework.data.transaction"" package from spring-data-commons as ""org.springframework.transaction.chained"" into spring-tx module - change logger from slf4j to commons-logging","closed","status: declined,","akiraly","2017-02-13T21:47:24Z","2021-11-24T14:16:32Z"
"","20224","ServletRequestHandledEvent response code does not take security filter into account [SPR-15665]","**[Ömer Yildiz](https://jira.spring.io/secure/ViewProfile.jspa?name=mcescher)** opened **[SPR-15665](https://jira.spring.io/browse/SPR-15665?redirect=false)** and commented  There are circumstances where this event does not contain the ""real"" response code. Consider the case when a controller's handler method is annotated with `@PreAuthorize` and the expression in it evaluates to false. If this happens the event's `getStatusCode` does not return `403` (in my case it returns `200`), but in fact the HTTP client is receiving a `403` response.  The reason for this is that the response code a client will observe is set at a later time, namely in  `ExceptionTranslationFilter.handleSpringSecurityException`, which is executed after the event has been processed.   --- No further details from [SPR-15665](https://jira.spring.io/browse/SPR-15665?redirect=false)","closed","status: declined,","spring-projects-issues","2017-06-14T11:41:31Z","2019-01-12T16:33:17Z"
"","19871","sockjs heartbeat failure logged at ERROR level [SPR-15307]","**[zyro](https://jira.spring.io/secure/ViewProfile.jspa?name=zyro)** opened **[SPR-15307](https://jira.spring.io/browse/SPR-15307?redirect=false)** and commented  when a sockjs heartbeat fails with a `SockJsTransportFailureException`, it seems the exception just bubbles up and is logged at `ERROR` level.  however, looks like this exception is also thrown if a client just goes away, which does not qualify as an error condition but should rather be expected.  ref. * https://github.com/spring-projects/spring-framework/blob/v4.3.7.RELEASE/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java#L255 * https://github.com/spring-projects/spring-framework/blob/v4.3.7.RELEASE/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java#L339  would be nice if this condition is just logged at `DEBUG` not causing that much noise.  the reference url shows a corresponding stackoverflow question. that one is using the tomcat APR connector, it seems but we also get such error logs frequently with the tomcat NIO connector, then it looks like:  ``` 2017-03-01 11:14:59.932 ERROR 23697 --- [MessageBroker-2] o.s.s.s.TaskUtils$LoggingErrorHandler    : Unexpected error occurred in scheduled task.  org.springframework.web.socket.sockjs.SockJsTransportFailureException: Failed to write SockJsFrame content='h'; nested exception is org.apache.catalina.connector.ClientAbortException: java.io.IOException: Broken pipe                 at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.writeFrame(AbstractSockJsSession.java:338)                 at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.sendHeartbeat(AbstractSockJsSession.java:254)                 at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession$HeartbeatTask.run(AbstractSockJsSession.java:450)                 at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)                 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)                 at java.util.concurrent.FutureTask.run(FutureTask.java:266)                 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)                 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)                 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)                 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)                 at java.lang.Thread.run(Thread.java:745)  Caused by: org.apache.catalina.connector.ClientAbortException: java.io.IOException: Broken pipe                 at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:396)                 at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:426)                 at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:345)                 at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:320)                 at org.apache.catalina.connector.Response.flushBuffer(Response.java:496)                 at org.apache.catalina.connector.ResponseFacade.flushBuffer(ResponseFacade.java:318)                 at javax.servlet.ServletResponseWrapper.flushBuffer(ServletResponseWrapper.java:176)                 at org.springframework.boot.context.web.ErrorPageFilter$ErrorWrapperResponse.flushBuffer(ErrorPageFilter.java:321)                 at javax.servlet.ServletResponseWrapper.flushBuffer(ServletResponseWrapper.java:176)                 at javax.servlet.ServletResponseWrapper.flushBuffer(ServletResponseWrapper.java:176)                 at javax.servlet.ServletResponseWrapper.flushBuffer(ServletResponseWrapper.java:176)                 at org.springframework.security.web.context.OnCommittedResponseWrapper.flushBuffer(OnCommittedResponseWrapper.java:143)                 at org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper.flushBuffer(SaveContextOnUpdateOrErrorResponseWrapper.java:40)                 at org.springframework.http.server.ServletServerHttpResponse.flush(ServletServerHttpResponse.java:95)                 at org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.writeFrameInternal(AbstractHttpSockJsSession.java:355)                 at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.writeFrame(AbstractSockJsSession.java:321)                 ... 10 common frames omitted  Caused by: java.io.IOException: Broken pipe                 at sun.nio.ch.FileDispatcherImpl.write0(Native Method)                 at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47)                 at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)                 at sun.nio.ch.IOUtil.write(IOUtil.java:65)                 at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)                 at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:124)                 at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)                 at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:172)                 at org.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:139)                 at org.apache.coyote.http11.InternalNioOutputBuffer.addToBB(InternalNioOutputBuffer.java:197)                 at org.apache.coyote.http11.InternalNioOutputBuffer.access$000(InternalNioOutputBuffer.java:41)                 at org.apache.coyote.http11.InternalNioOutputBuffer$SocketOutputBuffer.doWrite(InternalNioOutputBuffer.java:320)                 at org.apache.coyote.http11.filters.ChunkedOutputFilter.doWrite(ChunkedOutputFilter.java:118)                 at org.apache.coyote.http11.AbstractOutputBuffer.doWrite(AbstractOutputBuffer.java:256)                 at org.apache.coyote.Response.doWrite(Response.java:491)                 at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:391)                 ... 25 common frames omitted ```  thanks, zyro   ---  **Affects:** 4.2.6, 4.3.7  **Reference URL:** http://stackoverflow.com/questions/42555686/grails-3-2-4-grails-spring-websocket-2-3-error  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d3324c8d4f0797b28eed44681cac9ec6a4d3f73c, https://github.com/spring-projects/spring-framework/commit/71852a9241a594ea74d0ecd32c1facfdcd7efb58","closed","type: enhancement,","spring-projects-issues","2017-03-02T13:27:49Z","2017-04-18T15:43:21Z"
"","20317","improve performance of ContentCachingRequestWrapper [SPR-15762]","**[Zilong Song](https://jira.spring.io/secure/ViewProfile.jspa?name=xnslong)** opened **[SPR-15762](https://jira.spring.io/browse/SPR-15762?redirect=false)** and commented  The `ContentCachingInputStream` class has only implemented the `int read()` method defined in the `InputStream` class, and inherit all other methods from the super class. Among them, one is the `int read(byte[], int, int)` method which is often used for reading a batch of bytes.  The default implementation defined in the `InputStream` only do a repeated call of the `int read()` method. However, many subclasses of the `InputStream` provide some more efficient implementations for the `int read(byte[], int, int)` method, instead of using the default implementation (it is encouraged by the JDK). The following is part of the java doc for the `int read(byte[], int, int)` method.  > The `read(b, off, len)` method for class `InputStream` simply calls the method `read()` repeatedly. If the first such call results in an IOException, that exception is returned from the call to the int `read(b, off, len)` method. If any subsequent call to `read()` results in a `IOException`, the exception is caught and treated as if it were end of file; the bytes read up to that point are stored into b and the number of bytes read before the exception occurred is returned. The default implementation of this method blocks until the requested amount of input data len has been read, end of file is detected, or an exception is thrown. Subclasses are encouraged to provide a more efficient implementation of this method.  Performance of reading a few bytes from an `InputStream` with a loop call of the `int read()` method and a call with the `int read(byte[], int, int)` method differs a lot. The latter method is much faster than the former method. My code and result for this comparison are listed bellow.  ```java byte[] bytes = new byte[100_000]; // 100k // test reading an input stream with loop method ByteArrayInputStream in1 = new ByteArrayInputStream(bytes); long start = System.nanoTime(); for (int i = 0; i < 100_000; i++) {     in1.read(); } System.out.println(""loop calling cost: "" + (System.nanoTime() - start) + ""ns"");  // test reading the same input stream with batch method ByteArrayInputStream in2 = new ByteArrayInputStream(bytes); byte[] buffer = new byte[1000]; int c = 0; start = System.nanoTime(); while (c < 100_000) {     c += in2.read(buffer); } System.out.println(""batch calling cost: "" + (System.nanoTime() - start) + ""ns""); ```  Finally, I got the following result on my machine.  ``` loop calling cost: 9158452ns batch calling cost: 85389ns ```    ---  **Affects:** 4.3.9  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1474, and commits https://github.com/spring-projects/spring-framework/commit/d00f6f09a522ba6d13b2a341e317249bbff117ec, https://github.com/spring-projects/spring-framework/commit/4d0800f3924fa8a7fc4a9b411974760b9e4e1305","closed","type: enhancement,","spring-projects-issues","2017-07-12T05:45:16Z","2018-07-26T08:09:33Z"
"","20270","@RequestBody annotation in interface is ignored [SPR-15714]","**[Zhihong Zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=zhihongz)** opened **[SPR-15714](https://jira.spring.io/browse/SPR-15714?redirect=false)** and commented  Spring checks super-class/interface for annotation so all Spring annotations are inherited. This works for `@RequestMapping` and `@RequestParam`. However, it doesn't work for `@RequestBody`. This is inconsistent at least.  In the attached example, `@RequestMapping` is inherited but `body` doesn't get the JSON because `@RequestBody` in interface is ignored.  To reproduce the error, run the App.java and run this curl command,  ``` curl -H “Content-Type: application/json” -X POST -d ‘{“bar”:“world”}’ http://localhost:8080/test?foo=hello ```  ```java public interface TestApi {      @RequestMapping(value = ""/test"", produces = { ""text/html"" })     @ResponseBody     String test(             @RequestParam String foo,             @RequestBody Map body     );  }  @Controller public class TestController implements TestApi {     public String test(String foo, Map body) {         String bar;         if (body == null) {             bar = null;         } else {             bar = (String)(body.get(""bar""));         }         return ""foo="" + foo + ""bar="" + bar + """";     } }  ```  ---  **Affects:** 4.3.7  **Attachments:** - [spring-bug.tar](https://jira.spring.io/secure/attachment/25021/spring-bug.tar) (_9.00 kB_)  **Issue Links:** - #15682 Enable REST controller method parameter annotations on an interface (_**""duplicates""**_) - #20658 Supports annotating parameter annotations like `@PathVariable` on interface method","closed","in: core,","spring-projects-issues","2017-06-27T20:58:31Z","2019-01-13T05:15:39Z"
"","19806","RestTemplate with Netty produces two Content-Length headers [SPR-15241]","**[Zeljko Tomic](https://jira.spring.io/secure/ViewProfile.jspa?name=ztomic)** opened **[SPR-15241](https://jira.spring.io/browse/SPR-15241?redirect=false)** and commented  RestTemplate with Netty4ClientHttpRequestFactory produces two Content-Length headers.  It can be easily reproduced with little modification of org/springframework/http/client/AbstractMockWebServerTestCase, just add one assertation (`assertTrue(""Multiple Content-Length request headers received"", request.getHeaders().toMultimap().get(""Content-Length"").size() == 1);`) and run RestTemplateIntegrationTests.  If needed, I can share sample project to reproduce issue with Spring Boot 1.5.1.RELEASE and AbstractMockWebServiceTestCase and RestTemplateIntegrationTests copied from spring-framework master branch.  ``` private MockResponse postRequest(RecordedRequest request, String expectedRequestContent, 			String location, String contentType, byte[] responseBody) { 		assertTrue(""Multiple Content-Length request headers received"", request.getHeaders().toMultimap().get(""Content-Length"").size() == 1); 		assertTrue(""Invalid request content-length"", 				Integer.parseInt(request.getHeader(""Content-Length"")) > 0); 		String requestContentType = request.getHeader(""Content-Type""); 		assertNotNull(""No content-type"", requestContentType); 		Charset charset = StandardCharsets.ISO_8859_1; 		if (requestContentType.contains(""charset="")) { 			String charsetName = requestContentType.split(""charset="")[1]; 			charset = Charset.forName(charsetName); 		} 		assertEquals(""Invalid request body"", expectedRequestContent, request.getBody().readString(charset)); 		Buffer buf = new Buffer(); 		buf.write(responseBody); 		return new MockResponse() 				.setHeader(""Location"", baseUrl + location) 				.setHeader(""Content-Type"", contentType) 				.setHeader(""Content-Length"", responseBody.length) 				.setBody(buf) 				.setResponseCode(201); } ```  ---  **Affects:** 4.3.6  **Issue Links:** - #20036 Duplicate content-length header using Netty4ClientHttpRequestFactory (_**""is duplicated by""**_) - #19426 RestTemplate POST and PUT don't work with Netty4ClientHttpRequestFactory  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/08b9e7b83e78a5c918a9948e34fa27f7c19322b3, https://github.com/spring-projects/spring-framework/commit/4ff17676d3827fdef46f2d0e3243696730faea64","closed","type: bug,","spring-projects-issues","2017-02-09T13:31:49Z","2019-01-11T14:30:56Z"
"","20139","ServletRequestAttributes becomes inactive before child thread finishes its task  [SPR-15580]","**[Yongqin Xu](https://jira.spring.io/secure/ViewProfile.jspa?name=yongqin)** opened **[SPR-15580](https://jira.spring.io/browse/SPR-15580?redirect=false)** and commented  I am using SpringBoot 1.5.2 release. I have an asynchronous REST call that spawns separate java thread to finish a long running job. i use Postman to send POST request to async REST api. I set DispatcherServlet's setThreadContextInheritable() to true, so that my ServletRequestAttributes instance can be passed to child thread for its task. Debugging shows the ServletRequestAttributes instance is set inactive status and cached in RequestContextHolder when child thread in async call and that stops child thread to get some values from the attributes object. Debugging shows at line 989 of FrameworkServlet.java, it calls requestCompleted() right after parent thread process the request. Here is my Application.java snippets:  ```  @SpringBootApplication(exclude = DispatcherServletAutoConfiguration.class)  @EnableAsync   public class Application extends AsyncConfigurerSupport {   @Override   public Executor getAsyncExecutor() {     SimpleAsyncTaskExecutor executor = new      SimpleAsyncTaskExecutor(appProperties.threadNamePrefix);     return executor;   }   @Bean   public ServletRegistrationBean registerAirportDispatchServlet() {     DispatcherServlet dispatcherServlet = new DispatcherServlet();     AnnotationConfigWebApplicationContext applicationContext = new AnnotationConfigWebApplicationContext();     dispatcherServlet.setApplicationContext(applicationContext);     dispatcherServlet.setThreadContextInheritable(true);     ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(dispatcherServlet, ""/*"");     servletRegistrationBean.setName(""MyDispacherServlet"");     return servletRegistrationBean;   } } ```  My REST Controller async snippets:  ``` @RestController public class AsyncController {   @RequestMapping(path = ""/async"", method = RequestMethod.POST)   @Async   public DeferredResult doAsync(     DeferredResult result = new DeferredResult();     ServletRequestAttributes attributes =   (ServletRequestAttributes)RequestContextHolder.getRequestAttributes();     result.setResult(doLongTask());     return result;   } } ```  You can easily verify the attributes object returned from RequestContextHolder is in inactive. This will cost issue down the path especially when child thread enables JPA auditing and updates DB data where child thread need to access current security token stored in ServletRequestAttributes instance from RequestContextHolder. i got error message: ""Cannot ask for request attribute - request is not active anymore!""  I think for async REST calls, if inheritable flag is set to true, FrameworkServlet shouldn't mark the request attributes to inactive especially child thread hasn't finish its job yet. Should leave the attributes instance as it is in RequestContextHolder for child thread.   ---  **Affects:** 4.3.6  **Reference URL:** https://stackoverflow.com/questions/44121654/inherited-servletrquestattributes-is-marked-completed-before-child-thread-finish","open","in: web,","spring-projects-issues","2017-05-23T18:59:18Z","2019-01-11T17:04:44Z"
"","19922","Use Content-Range from ServerHttpResponse [SPR-15359]","**[Yevhenii Melnyk](https://jira.spring.io/secure/ViewProfile.jspa?name=yevhenii-melnyk)** opened **[SPR-15359](https://jira.spring.io/browse/SPR-15359?redirect=false)** and commented  Currently when the `org.springframework.core.io.Resource` is returned from controller the `ResourceHttpMessageWriter` writes it back to client. It consideres `Range` headers from `ServerHttpRequest` but ignores `Content-Range` headers from `ServerHttpResponse`. According to [spec](https://tools.ietf.org/html/rfc7233#section-3.1) it seems that server initiates communication adding ""Accept-Ranges"" header so it is reasonable to be able to send only chunk of data. The scenario seems to be viable when server wants to start `byte-range` communication, for  example, creating video player sending only small chunks of video.   ---  **Affects:** 5.0 M5","closed","type: enhancement,","spring-projects-issues","2017-03-18T23:20:09Z","2018-03-08T13:45:51Z"
"","19906","Undertow ZeroCopyHttpOutputMessage exception [SPR-15343]","**[Yevhenii Melnyk](https://jira.spring.io/secure/ViewProfile.jspa?name=yevhenii-melnyk)** opened **[SPR-15343](https://jira.spring.io/browse/SPR-15343?redirect=false)** and commented  ResourceHttpMessageWriter fails to write the whole response for Undertow server. At the same time it works for Reactor Netty as it also uses ZeroCopyHttpOutputMessage.  The exception is as follows:  ```java java.io.IOException: Could only write 16384 out of 317951 bytes 	at org.springframework.http.server.reactive.UndertowServerHttpResponse.writeWith(UndertowServerHttpResponse.java:90) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.http.codec.ResourceHttpMessageWriter.writeContent(ResourceHttpMessageWriter.java:175) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.http.codec.ResourceHttpMessageWriter.lambda$write$0(ResourceHttpMessageWriter.java:98) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.http.codec.ResourceHttpMessageWriter$$Lambda$112/616983446.apply(Unknown Source) ~[na:na] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:343) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:203) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxTake$TakeFuseableSubscriber.onSubscribe(FluxTake.java:402) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:69) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxTakeFuseable.subscribe(FluxTakeFuseable.java:46) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:126) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:41) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:174) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenMap.subscribe(MonoThenMap.java:50) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:44) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenMap$MonoThenApplyMain.onNext(MonoThenMap.java:130) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:928) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenMap$MonoThenApplyMain$SecondSubscriber.onNext(MonoThenMap.java:202) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:928) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenIgnore$MonoThenAcceptSubscriber.onNext(MonoThenIgnore.java:261) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxResume$ResumeSubscriber.onNext(FluxResume.java:73) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:178) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1657) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:121) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1476) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxResume$ResumeSubscriber.onSubscribe(FluxResume.java:68) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:154) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:163) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenMap.subscribe(MonoThenMap.java:50) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:78) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:44) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:59) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenIgnore$MonoThenIgnoreMain.drain(MonoThenIgnore.java:151) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenIgnore.subscribe(MonoThenIgnore.java:54) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenMap$MonoThenApplyMain.onNext(MonoThenMap.java:130) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:68) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:78) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:263) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:743) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:119) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:928) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenIgnore$MonoThenAcceptSubscriber.onNext(MonoThenIgnore.java:261) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1657) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenIgnore$MonoThenAcceptSubscriber.onSubscribe(MonoThenIgnore.java:250) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:59) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenIgnore$MonoThenIgnoreMain.drain(MonoThenIgnore.java:151) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenIgnore.subscribe(MonoThenIgnore.java:54) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:60) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:402) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:203) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:97) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:57) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:126) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:41) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoOtherwiseIfEmpty.subscribe(MonoOtherwiseIfEmpty.java:44) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenMap.subscribe(MonoThenMap.java:57) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenMap.subscribe(MonoThenMap.java:57) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:44) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:44) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:44) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenIgnore$MonoThenIgnoreMain.drain(MonoThenIgnore.java:169) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenIgnore.subscribe(MonoThenIgnore.java:54) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at org.springframework.http.server.reactive.UndertowHttpHandlerAdapter.handleRequest(UndertowHttpHandlerAdapter.java:69) [spring-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:211) [undertow-core-1.4.11.Final.jar:1.4.11.Final] 	at io.undertow.server.protocol.http.HttpReadListener.handleEventWithNoRunningRequest(HttpReadListener.java:243) [undertow-core-1.4.11.Final.jar:1.4.11.Final] 	at io.undertow.server.protocol.http.HttpReadListener.handleEvent(HttpReadListener.java:134) [undertow-core-1.4.11.Final.jar:1.4.11.Final] 	at io.undertow.server.protocol.http.HttpReadListener.handleEvent(HttpReadListener.java:58) [undertow-core-1.4.11.Final.jar:1.4.11.Final] 	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) [xnio-api-3.3.6.Final.jar:3.3.6.Final] 	at org.xnio.conduits.ReadReadyHandler$ChannelListenerHandler.readReady(ReadReadyHandler.java:66) [xnio-api-3.3.6.Final.jar:3.3.6.Final] 	at org.xnio.nio.NioSocketConduit.handleReady(NioSocketConduit.java:88) [xnio-nio-3.3.6.Final.jar:3.3.6.Final] 	at org.xnio.nio.WorkerThread.run(WorkerThread.java:559) [xnio-nio-3.3.6.Final.jar:3.3.6.Final] ```  Sample project url is in `Reference URL` field   ---  **Affects:** 5.0 M5  **Reference URL:** https://github.com/melgene/spring-webflux-file-ops/tree/master/undertow-module","closed","type: bug,","spring-projects-issues","2017-03-11T19:59:18Z","2017-05-08T08:41:45Z"
"","19718","ShallowEtagHeaderFilter won't set ETag for DeferredResult in Undertow  [SPR-15152]","**[Yaroslav Gnatyuk](https://jira.spring.io/secure/ViewProfile.jspa?name=gnatyuk)** opened **[SPR-15152](https://jira.spring.io/browse/SPR-15152?redirect=false)** and commented  When using `DeferredResult` in Undertow, ETag is not set in response headers due to the fact that Undertow restores `HttpServletResponse` after filter chain processing. As a result, `ShallowEtagHeaderFilter` cannot access `HttpStreamingAwareContentCachingResponseWrapper` on ASYNC phase.  See `io.undertow.servlet.handlers.FilterHandler.FilterChainImpl#doFilter`   ---  **Affects:** 4.3.5","closed","status: invalid,","spring-projects-issues","2017-01-17T08:29:29Z","2019-01-12T05:21:24Z"
"","20364","Advice is not called in some cases with Spring AOP [SPR-15809]","**[Yan Tuizhi](https://jira.spring.io/secure/ViewProfile.jspa?name=yantuizhi)** opened **[SPR-15809](https://jira.spring.io/browse/SPR-15809?redirect=false)** and commented  I have made the following test application with spring boot 1.5.3:  ```java @SpringBootApplication public class TestApplication { 	public static void main(String[] args) { 		ApplicationContext context = SpringApplication.run(TestApplication.class); 		context.getBean(ClassA.class).init(); 	} } ```  ```java @Component public class ClassA {     private ApplicationContext context;      @Autowired     public void setContext(ApplicationContext context) {         this.context = context;     }      public void init() {         System.out.println(""Test 1 (Works):"");         context.getBean(ClassB.class);          System.out.println(""Test 2 (Not Working):"");         context.getBean(ClassB.class, this);          System.out.println(""Test 3 (Not Working):"");         new ClassB(this);     }      @TestAnnotation     public void annotatedMethod() { } } ```  ```java @Component @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) public class ClassB {     private ClassA classA;      @Autowired     public ClassB(ClassA classA) {         classA.annotatedMethod();     } } ```  with the following annotation and aspect:  ```java @Target({ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface TestAnnotation { } ```  ```java @Aspect @Component public class TestAnnotationAspect {     private static final Logger log = LoggerFactory.getLogger(TestAnnotation.class);      @Before(""@annotation(test.sscce.aspect.TestAnnotation)"")     public void log(JoinPoint joinPoint) {         System.out.println(""OK"");     } } ```  The advice for the test annotation is called only in the first case (printing ""OK""), in the other two cases not. Why does it only work in the first case? Shouldn't ""this"" already refer to the proxied instance? It would be a much more consistent design, if all three cases would work.  At least for the second case I would expect that it just works  like the first case, as here it is possible to intercept and replace ""this"" with the proxied instance. Please correct me, if am wrong.  Thank you very much for your efforts.    --- No further details from [SPR-15809](https://jira.spring.io/browse/SPR-15809?redirect=false)","open","in: core,","spring-projects-issues","2017-07-23T19:56:45Z","2021-11-10T10:04:14Z"
"","19777","Insert all elements of a returned list into a Cache [SPR-15213]","**[Wouter Lievens](https://jira.spring.io/secure/ViewProfile.jspa?name=wlievens)** opened **[SPR-15213](https://jira.spring.io/browse/SPR-15213?redirect=false)** and commented  When a query method returns a list, I would like to be able to insert each element of that list separately into a Cache, each with its own associated key.   ---  **Reference URL:** http://stackoverflow.com/questions/41966690/putting-all-returned-elements-into-a-spring-boot-cache-using-annotations","closed","type: enhancement,","spring-projects-issues","2017-01-31T21:04:02Z","2017-02-01T07:41:39Z"
"","20007","`Netty4ClientHttpRequest` appends duplicate `Host` and `Connection` headers to requests [SPR-15446]","**[Vyacheslav](https://jira.spring.io/secure/ViewProfile.jspa?name=acc15)** opened **[SPR-15446](https://jira.spring.io/browse/SPR-15446?redirect=false)** and commented  ### How to reproduce  Download and launch demo spring boot app (attachments). Wire up Netcat on 9000 port (`ncat -kl 9000`) Telnet to `localhost:8080` and send following request:  ``` POST / HTTP/1.1 Host: localhost:8080 Connection: keep-alive content-type: application/json accept: */* accept-encoding: gzip, deflate, br accept-language: ru,en;q=0.8,en-US;q=0.6 X-Forwarded-For: 0:0:0:0:0:0:0:1 X-Forwarded-Proto: http X-Forwarded-Host: localhost X-Forwarded-Port: 8080 Content-lengtH: 11  {""a"":""b""} ```  In ncat you will see this  ``` POST / HTTP/1.1 ===> Host: localhost ===> Connection: close ===> host: localhost:8080 ===> connection: keep-alive content-type: application/json accept: */* accept-encoding: gzip, deflate, br accept-language: ru,en;q=0.8,en-US;q=0.6 content-length: 11 X-Forwarded-For: 0:0:0:0:0:0:0:1 X-Forwarded-For: 0:0:0:0:0:0:0:1 X-Forwarded-Proto: http X-Forwarded-Host: localhost X-Forwarded-Port: 8080  {""a"":""b""} ```  ### Specifications  #### Host header  The definition of `Host` header:  ``` Host = ""Host"" "":"" host [ "":"" port ] ; Section 3.2.2 ```  source: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.23  ``` Multiple message-header fields with the same field-name MAY be present in a message  if and only if the entire field-value for that header field is defined as a comma-separated list [i.e., #(values)].  It MUST be possible to combine the multiple header fields into one ""field-name: field-value"" pair, without changing  the semantics of the message, by appending each subsequent field-value to the first, each separated by a comma.  The order in which header fields with the same field-name are received is therefore significant to the interpretation  of the combined field value, and thus a proxy MUST NOT change the order of these field values when a message is forwarded. ```  source: https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2  That means: if definition isn't list - then those duplicate headers MUST BE avoided  #### Connection header  ``` Connection options are signaled by the presence of a connection-token in the Connection header field,  not by any corresponding additional header field(s), since the additional header field may not be sent  if there are no parameters associated with that connection option. ```  source: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.10  ##### PS  im not the author of `charon` - maybe this can be considered as `charon` bug in some sense (i.e. it can remove those headers from original request) however i think that http client must avoid duplication of headers, either preserve them ""as is"" - (for `Host`), or replace (for `Connection`) - but dont duplicate.   ---  **Affects:** 4.3.6, 4.3.7  **Attachments:** - [charon-test.zip](https://jira.spring.io/secure/attachment/24904/charon-test.zip) (_53.74 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-boot/commit/c84204bc819fb8cd39c82d1d964263a4414bceef","closed","in: web,","spring-projects-issues","2017-04-12T20:41:31Z","2019-01-11T16:41:29Z"
"","19928","Generic type is not used sometimes [SPR-15364]","**[Vitaly Merenkov](https://jira.spring.io/secure/ViewProfile.jspa?name=vmrnkv@gmail.com)** opened **[SPR-15364](https://jira.spring.io/browse/SPR-15364?redirect=false)** and commented  Hello, I'm trying to create a hierarchy of REST controllers for objects which could be parents for another objects and not. I have a lot of sub types for parents and children and do not want to duplicate the same resources in every controller even with delegate pattern.  The sample code is attached. I can't reproduce an issue by some reason in this code as in real environment, but in any case it works not as expected.  The base controller from which every controller should be inherited:  ``` public class BaseRESTController {      @RequestMapping(method = RequestMethod.POST)     public String create(@RequestBody List requests) {         System.out.println(""Create parents "" + requests);         return ""OK"";     } } ```  The base controller for objects which could have children:  ``` public class BaseRESTControllerWithChildren extends BaseRESTController {     @RequestMapping(path = ""/{id}/children"", method = RequestMethod.POST)     public String createResources(@PathVariable(name = ""id"") String containerID, @RequestBody List requests) {         System.out.println(""Create children "" + requests);         return ""OK"";     } } ```  The implementation which works as expected:  ``` @RestController @RequestMapping(path = ""/working"") public class WorkingRESTController extends BaseRESTController{      } ```  Request example:  ``` [   {     ""base"": ""string"",     ""field1"": ""string""   } ] ```  Output from logs:  ``` Create parents [test.complexgenericrest.ParentRequest@1dca0c02] ```  The implementation which doesn't work as expected:  ``` @RestController @RequestMapping(path = ""/not-working"") public class NOTWorkingRESTController extends BaseRESTControllerWithChildren {      } ```  Request example:  ``` [   {     ""base"": ""string"",     ""field1"": ""string""   } ] ```  Output from logs:  ``` Create parents [test.complexgenericrest.BaseRequest@16641e47] ```  In second case I have incorrect request type. In real environment I have this error in logs:  ``` 2017-03-20 16:52:05.918  WARN 10944 --- [io-8090-exec-10] .w.s.m.s.DefaultHandlerExceptionResolver : Failed to read HTTP message: org.springframework.http.converter.HttpMessageNotReadableException: Could not read document: Unrecognized field ""type"" (class mycompany.BaseRequest), not marked as ignorable (6 known properties: ""domain-id"", ""name"", ""description"", ""fault-status"", ""monitoring-profile-id"", ""external-id""])  at [Source: java.io.PushbackInputStream@4a4c323e; line: 9, column: 14] (through reference chain: java.util.ArrayList[0]->mycompany.BaseRequest[""type""]); nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field ""type"" (class mycompany.BaseRequest), not marked as ignorable (6 known properties: ""domain-id"", ""name"", ""description"", ""fault-status"", ""monitoring-profile-id"", ""external-id""])  at [Source: java.io.PushbackInputStream@4a4c323e; line: 9, column: 14] (through reference chain: java.util.ArrayList[0]->mycompany.BaseRequest[""type""]) ```  The interesting part is that documentation generated by springfox is correct in any case.  Please suggest what should I change in configuration or fix this issue. I think it is related to #19039.  ---  **Attachments:** - [ComplexGenericREST.zip](https://jira.spring.io/secure/attachment/23813/ComplexGenericREST.zip) (_7.76 kB_)  **Issue Links:** - #19039 Jackson 2.6.x -> 2.7 deserialize generic fails when calling Spring controller","open","in: web,","spring-projects-issues","2017-03-20T15:16:20Z","2021-11-08T11:46:06Z"
"","20286","Incorrect handling of ABNF notation in HTTP Headers parsing [SPR-15730]","**[Vitalii Ishchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=betalb)** opened **[SPR-15730](https://jira.spring.io/browse/SPR-15730?redirect=false)** and commented  In HTTP ABNF there are two different ways to define list of values in headers: # and * (https://tools.ietf.org/html/rfc2616#section-2.1). There is one significant difference in interpretation of NULL tokens, which is currently not handled by Srping org.springframework.http.HttpHeaders class  Below is the list of headers that defined using # form in HTTP 1.1 (https://tools.ietf.org/html/rfc2616) and CORS (https://www.w3.org/TR/cors/) Specification with comments on how they are handled in HttpHeaders class (note that in Spring 4.3 method names slightly changed: getFirstValueAsList was replaced with getValuesAsList)  HTTP 1.1 * Accept-Charset: _has separate method getAcceptCharset that most likely will throw exception due to missing Charset with name equal to empty string, but may be implementation dependent_ * Allow: _handled correctly in dedicated getAllow, as null tokens will be filtered out due to HttpMethod.resolve returning null for them_ * Accept, Accept-Encoding, Accept-Language, Accept-Ranges, Cache-Control, Connection, Content-Encoding, Content-Language, Expect, If-Match, If-None-Match, Pragma, Proxy-Authenticate, TE, Trailer, Transfer-Encoding, Upgrade, Vary, Via, Warning, WWW-Authenticate: _handled with getFirstValueAsList method, which will return null tokens as part of result instead of filtering them_  CORS * Access-Control-Allow-Methods: _handled correctly in dedicated getAccessControlAllowMethods, as null tokens will be filtered out due to HttpMethod.resolve returning null for them_ * Access-Control-Request-Headers, Access-Control-Expose-Headers, Access-Control-Allow-Headers: _handled with getFirstValueAsList method, which will return null tokens as part of result instead of filtering them_  Currently this bug is causing issue with CORS processing of pre-flight requests issued by Google Chrome when upload progress events are registered on XMLHttpRequest and no additional headers are added to request through setHeader method. Only in such case Google Chrome will send empty Access-Control-Request-Headers header, which will be parsed into list with one element -- empty string. In such case org.springframework.web.cors.DefaultCorsProcessor will reject request (org.springframework.web.cors.CorsConfiguration#checkHeaders will return null)  I'm not sure if there is also a bug in org.springframework.web.cors.CorsConfiguration#checkHeaders method, but looks like it should not perform hasText check and just check for null. In this case empty header name may be allowed with *, or presence of empty string in Allowed Headers list. which looks odd.   ---  **Affects:** 4.2.9","closed","status: invalid,","spring-projects-issues","2017-07-03T10:39:00Z","2019-01-12T05:20:38Z"
"","20174","Consider using different ByteBuffers when reading the request body in Undertow integration [SPR-15615]","**[Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg)** opened **[SPR-15615](https://jira.spring.io/browse/SPR-15615?redirect=false)** and commented  Hi,  The integration with Undertow is made in a way that when reading the request body the implementation uses the pooled ByteBuffer provided by Undertow: https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java#L148  ""PooledByteBuffer#getBuffer"" returns always one and the same ByteBuffer. In some use case it might appear that more than one read will be performed. If the subscriber does not consume the ByteBuffer with the request body immediately when it is provided then the next read will override the data.  My proposal is to change the integration in a way that it is guaranteed that different ByteBuffers are returned as a result of request body reading.  What do you think?  Regards, Violeta   ---  **Affects:** 5.0 RC1","closed","type: enhancement,","spring-projects-issues","2017-06-02T11:59:05Z","2019-01-29T15:35:21Z"
"","20173","Handle onError events that are sent by the servlet containers [SPR-15614]","**[Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg)** opened **[SPR-15614](https://jira.spring.io/browse/SPR-15614?redirect=false)** and commented  Hi,  Currently when an I/O error happens, `completeWithError` will be called: https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitter.java#L172  At some point this call will result in: https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java#L357 Thus the implementation guarantees that the I/O error will be handled properly and the corresponding error handlers will be invoked.  On the other hand there is `AsyncListener` that will be notified by the servlet containers that an error occurred: https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/context/request/async/StandardServletAsyncWebRequest.java#L137 This does not trigger any error handling but just completes the async operation.  When the error is I/O then this is not a problem as the implementation handles it as described above, but if it is another type of error then it will not be handled properly.  What do you think?  Regards, Violeta  ---  **Affects:** 5.0 RC1  **Issue Links:** - #20607 WebAsyncManager concurrency issue with SseEmitter when client disconnect - #21091 Improve docs and handling of send errors in ResponseBodyEmitter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e0678ba5835eb6f0a8d8b3ac344c8728102c4a4d","closed","type: enhancement,","spring-projects-issues","2017-06-02T11:27:05Z","2019-01-11T15:41:19Z"
"","22192","NPE thrown by WriteResultPublisher$State$2.publishComplete caused by a thread-safety issue [SPR-15418]","**[Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg)** opened **[SPR-15418](https://jira.spring.io/browse/SPR-15418?redirect=false)** and commented  Hi,  I experience the NullPointerException below  ``` java.lang.NullPointerException: null 	at org.springframework.http.server.reactive.WriteResultPublisher$State$2.publishComplete(WriteResultPublisher.java:152) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar!/:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.http.server.reactive.WriteResultPublisher.publishComplete(WriteResultPublisher.java:69) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar!/:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State$3.onWritePossible(AbstractListenerWriteProcessor.java:255) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar!/:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.http.server.reactive.AbstractListenerWriteProcessor.onWritePossible(AbstractListenerWriteProcessor.java:107) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar!/:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyProcessor.lambda$registerListener$0(UndertowServerHttpResponse.java:159) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar!/:5.0.0.BUILD-SNAPSHOT] 	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) ~[xnio-api-3.3.6.Final.jar!/:3.3.6.Final] 	at io.undertow.channels.DetachableStreamSinkChannel$SetterDelegatingListener.handleEvent(DetachableStreamSinkChannel.java:285) ~[undertow-core-1.4.11.Final.jar!/:1.4.11.Final] 	at io.undertow.channels.DetachableStreamSinkChannel$SetterDelegatingListener.handleEvent(DetachableStreamSinkChannel.java:272) ~[undertow-core-1.4.11.Final.jar!/:1.4.11.Final] ```  This can happen if - the first thread sees UNSUBSCRIBED state and invokes 'subscribe' method. Then it changes the state to SUBSCRIBED - before reaching ```   publisher.subscriber = subscriber;  ```a second thread sees SUBSCRIBED state and invokes 'publishComplete'. Then it tries to invoke ```publisher.subscriber.onComplete(); ``` but NPE is thrown because the subscriber is still not initialized.  Regards, Violeta ```    ---  **Affects:** 5.0 M5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff03b4a4adbaf4a2e05f6163584379a1335706d7","closed","type: bug,","spring-projects-issues","2017-04-06T19:04:52Z","2017-05-08T08:41:48Z"
"","22191","ISE is thrown when the client disconnects while the server is still sending the response [SPR-15412]","**[Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg)** opened **[SPR-15412](https://jira.spring.io/browse/SPR-15412?redirect=false)** and commented  Hi,  I have an application that starts sending the response. If the client disconnects while the server is sending the response the following exceptions appear on the server.  ``` 2017-04-04 21:01:28.235 ERROR 69240 --- [nio-8080-exec-2] etServerHttpRequest$RequestBodyPublisher : COMPLETED onError: java.io.IOException: Broken pipe  java.io.IOException: Broken pipe 	at sun.nio.ch.FileDispatcherImpl.write0(Native Method) ~[na:1.8.0_121] 	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47) ~[na:1.8.0_121] 	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93) ~[na:1.8.0_121] 	at sun.nio.ch.IOUtil.write(IOUtil.java:65) ~[na:1.8.0_121] 	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471) ~[na:1.8.0_121] 	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:134) ~[tomcat-embed-core-8.5.12.jar!/:8.5.12] ```  ``` 2017-04-04 21:01:28.240 ERROR 69240 --- [        timer-1] reactor.core.scheduler.Schedulers        : Scheduler worker in group main failed with an uncaught exception  java.lang.IllegalStateException: The request associated with the AsyncContext has already completed processing. 	at org.apache.catalina.core.AsyncContextImpl.check(AsyncContextImpl.java:502) ~[tomcat-embed-core-8.5.12.jar!/:8.5.12] 	at org.apache.catalina.core.AsyncContextImpl.complete(AsyncContextImpl.java:94) ~[tomcat-embed-core-8.5.12.jar!/:8.5.12] 	at org.springframework.http.server.reactive.ServletHttpHandlerAdapter$HandlerResultSubscriber.onComplete(ServletHttpHandlerAdapter.java:178) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar!/:5.0.0.BUILD-SNAPSHOT] 	at reactor.core.publisher.Operators$MonoSubscriber.onComplete(Operators.java:994) ~[reactor-core-3.0.6.BUILD-SNAPSHOT.jar!/:3.0.6.BUILD-SNAPSHOT] 	at reactor.core.publisher.MonoThenIgnore$ThenAcceptInner.onComplete(MonoThenIgnore.java:302) ~[reactor-core-3.0.6.BUILD-SNAPSHOT.jar!/:3.0.6.BUILD-SNAPSHOT] 	at reactor.core.publisher.Operators.complete(Operators.java:189) ~[reactor-core-3.0.6.BUILD-SNAPSHOT.jar!/:3.0.6.BUILD-SNAPSHOT] 	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:45) ~[reactor-core-3.0.6.BUILD-SNAPSHOT.jar!/:3.0.6.BUILD-SNAPSHOT] 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) ~[reactor-core-3.0.6.BUILD-SNAPSHOT.jar!/:3.0.6.BUILD-SNAPSHOT] 	at reactor.core.publisher.MonoThenIgnore$ThenIgnoreMain.drain(MonoThenIgnore.java:146) ~[reactor-core-3.0.6.BUILD-SNAPSHOT.jar!/:3.0.6.BUILD-SNAPSHOT] ```  When an exception ""Broken Pipe"" occurs the events below are invoked  ``` org.springframework.http.server.reactive.ServletServerHttpRequest.RequestAsyncListener#onError(AsyncEvent) org.springframework.http.server.reactive.ServletServerHttpResponse.ResponseAsyncListener#onError(AsyncEvent) ```  According to Servlet specification  > If none of the listeners called AsyncContext.complete or any of the AsyncContext.dispatch methods, then perform an error dispatch with a status code equal to HttpServletResponse.SC_INTERNAL_SERVER_ERROR and make the Throwable available as the value of the RequestDispatcher.ERROR_EXCEPTION request attribute. >  > If no matching error page is found, or the error page does not call AsyncContext.complete() or any of the AsyncContext.dispatch methods, then the container MUST call AsyncContext.complete.  When the event below happens the async operation is already completed by the container  ``` org.springframework.http.server.reactive.ServletHttpHandlerAdapter.HandlerResultSubscriber#onComplete() ```  There are two issue: - AsyncListener#onError should  complete the async operation. - ServletHttpHandlerAdapter.HandlerResultSubscriber#onComplete should check whether the async operation is started  Regards, Violeta   ---  **Affects:** 5.0 M5","closed","type: bug,","spring-projects-issues","2017-04-04T18:24:01Z","2017-05-08T08:41:44Z"
"","19956","NPE thrown by AbstractListenerWriteFlushProcessor.cancel [SPR-15393]","**[Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg)** opened **[SPR-15393](https://jira.spring.io/browse/SPR-15393?redirect=false)** and commented  Hi,  When a request is made but methods  ``` AbstractListenerWriteFlushProcessor#onSubscribe/AbstractListenerWriteProcessor#onSubscribe  ```  are not invoked then the fields  ``` AbstractListenerWriteFlushProcessor#subscription/AbstractListenerWriteProcessor#subscription  ```  will be NULL.  As a result of request timeout, methods  ``` AbstractListenerWriteFlushProcessor#cancel/AbstractListenerWriteProcessor#cancel ```  will be invoked and the following exception will be thrown:  ``` java.lang.NullPointerException: null 	at org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.cancel(AbstractListenerWriteFlushProcessor.java:101) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar!/:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseAsyncListener.handleError(ServletServerHttpResponse.java:192) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar!/:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseAsyncListener.onTimeout(ServletServerHttpResponse.java:182) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar!/:5.0.0.BUILD-SNAPSHOT] 	at org.apache.catalina.core.AsyncListenerWrapper.fireOnTimeout(AsyncListenerWrapper.java:44) ~[tomcat-embed-core-8.5.12.jar!/:8.5.12] 	at org.apache.catalina.core.AsyncContextImpl.timeout(AsyncContextImpl.java:133) ~[tomcat-embed-core-8.5.12.jar!/:8.5.12] 	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:153) [tomcat-embed-core-8.5.12.jar!/:8.5.12] ... ```  Regards, Violeta   ---  **Affects:** 5.0 M5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/25561784228a60c125a237933f5064ecfde1a96e","closed","type: bug,","spring-projects-issues","2017-03-28T11:06:04Z","2017-05-08T08:41:46Z"
"","19792","Avoid re-retrieval of @ResponseStatus annotation for each request [SPR-15227]","**[Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg)** opened **[SPR-15227](https://jira.spring.io/browse/SPR-15227?redirect=false)** and commented  Hi,  Currently `@ResponseStatus` is calculated every time when a request is performed.  https://github.com/spring-projects/spring-framework/blob/master/spring-webflux/src/main/java/org/springframework/web/reactive/result/AbstractHandlerResultHandler.java#L166  It is better to calculate it when constructing the MethodParameter.  Regards, Violeta  ---  **Affects:** 4.3.7, 5.0 M4  **Issue Links:** - #19950 Minimize reflective interaction with annotation instances during retrieval","closed","type: enhancement,","spring-projects-issues","2017-02-06T17:58:12Z","2019-01-11T14:33:21Z"
"","22190","Enable Reactive Jetty's Websocket suspend/resume functionality [SPR-15130]","**[Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg)** opened **[SPR-15130](https://jira.spring.io/browse/SPR-15130?redirect=false)** and commented  With the fix for https://github.com/eclipse/jetty.project/issues/1218 it is possible to enable the Jetty's Websocket suspend/resume functionality. The fix will be available in the next Jetty release.   ---  **Affects:** 5.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1443c0808dc1ccd32bf6eaf201c60db6115b704a","closed","type: task,","spring-projects-issues","2017-01-11T13:54:20Z","2017-02-23T09:29:10Z"
"","20269","Enable support for custom vnd types in messaging MappingJackson2MessageConverter [SPR-15712]","**[Vinicius Carvalho](https://jira.spring.io/secure/ViewProfile.jspa?name=vcarvalho)** opened **[SPR-15712](https://jira.spring.io/browse/SPR-15712?redirect=false)** and commented  The current implementation of converters will not allow conversion of vnd types such as application/vnd.springframework.type+json, although one could set the custom types beforehand, it is useful at least on Spring Cloud Stream use cases that we could support any type that has +json on the payload.  using subtypes from MimeType would not work as json and vnd... will be consider different types.  Spring AMQP takes a different approach using just a simple contains for the word json on the content type.  It would be nice to have some sort of support on this core component and avoid another snowflake implementation on Spring Cloud Stream to override the default behavior.   ---  **Affects:** 4.3.9","closed","type: enhancement,","spring-projects-issues","2017-06-27T15:23:04Z","2021-12-14T22:00:10Z"
"","19842","Provide Subresource Integrity helpers [SPR-15276]","**[Vincent Ricard](https://jira.spring.io/secure/ViewProfile.jspa?name=ghostd)** opened **[SPR-15276](https://jira.spring.io/browse/SPR-15276?redirect=false)** and commented  Hi,  I think it could be useful to provide some [Subresource Integrity](https://www.w3.org/TR/SRI/) helpers. The specification allows the web author to provide a hash for resources hosted on an other domain (like CDNs). Here an example from the specification :  ```html  ```  I think Spring could help the web developer with the following use case: - the developer creates a webapp depending on CDN (for performance reason or whatever) - the developer embeds the resource (JS script, CSS stylesheet, etc) into the war (eg. with a webjar dependency) - the developer can use a spring helper into his preferred template engine to generate the hash (eg. with a Freemarler template)  ```html  ```  Now the developer can just update the resource files without re-computing the hash.   --- No further details from [SPR-15276](https://jira.spring.io/browse/SPR-15276?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-02-21T20:35:33Z","2018-03-08T12:41:36Z"
"","20008","Issue while upgrading from Spring 3 to 4 [SPR-15447]","**[Vinay Tadvi](https://jira.spring.io/secure/ViewProfile.jspa?name=vinaytadvi83)** opened **[SPR-15447](https://jira.spring.io/browse/SPR-15447?redirect=false)** and commented  We have recently upgraded project from JBoss 7 to EAP 6.4 along with below upgrades:  Hibernate 3 to 4 JSF 1.2 to 2.1 Spring 3 to 4 Icefaces 1.8 to Icefaces 3.3  After upgrade we are facing issue with Spring Remoting.  We are getting error about serialization, But non of our code involved in stack trace. As per analysis Saaj and Xerces libraries are involved in this. Please help on this as this critical and project development is 2 week behind schedule and actually on halt because of this. See attache file for stack trace.  JBWEB000236: Servlet.service() for servlet policySummaryServiceExporter threw exception: java.io.NotSerializableException: com.sun.xml.messaging.saaj.soap.ver1_1.SOAPPart1_1Impl   ---  **Affects:** 4.3.2  **Attachments:** - [Log.txt](https://jira.spring.io/secure/attachment/24905/Log.txt) (_8.28 kB_)","closed","status: invalid,","spring-projects-issues","2017-04-13T04:46:10Z","2019-01-12T05:20:59Z"
"","20388","Make AopUtils.canApply use all interfaces implemented by targetClass [SPR-15833]","**[Victor Khovanskiy](https://jira.spring.io/secure/ViewProfile.jspa?name=victor.khovanskiy)** opened **[SPR-15833](https://jira.spring.io/browse/SPR-15833?redirect=false)** and commented  I'd like to use the following structure:  ```java interface A {     @Transactional     default void myMethod() {} } interface B extends A {} class C implements B {} ```  But Spring doesn't see `myMethod` as transactional, because `AopUtils.canApply` uses `ClassUtils.getAllInterfacesForClassAsSet` which returns for the class `C` only `B` without  `A`.   ---  **Affects:** 4.3.9  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/697d14a02899a7217e7ed8f8fe2eb3f0b753846b  1 votes, 2 watchers","closed","status: invalid,","spring-projects-issues","2017-07-30T15:50:04Z","2019-01-12T05:20:29Z"
"","19708","MockSessionCookieConfig#maxAge defaults to 0 instead of -1 [SPR-15142]","**[Vedran Pavic](https://jira.spring.io/secure/ViewProfile.jspa?name=vpavic)** opened **[SPR-15142](https://jira.spring.io/browse/SPR-15142?redirect=false)** and commented  `MockSessionCookieConfig#maxAge` defaults to 0 which causes cookies to be deleted instead of written during tests. Rather than 0, default value for `maxAge` should be -1 as one would expect from a typical container.  ---  **Affects:** 4.3.5  **Issue Links:** - #19721 CookieLocaleResolver maxAge documentation wrong  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/83beb9d57d558d1386c194b7792c88134105dfa4, https://github.com/spring-projects/spring-framework/commit/d1c0ea7d74db8691ea7b72ecce7a84544a2026be","closed","type: enhancement,","spring-projects-issues","2017-01-15T23:10:54Z","2019-01-11T15:31:20Z"
"","19656","GenericTableMetaDataProvider could use non standard named TableMeta-Schema if only one found [SPR-15090]","**[Uwe Grünheid](https://jira.spring.io/secure/ViewProfile.jspa?name=ugruenheid)** opened **[SPR-15090](https://jira.spring.io/browse/SPR-15090?redirect=false)** and commented  ### Use Case  1. Postgres 9.5 accessed via spring DatabaseBuilder and URL including currentSchema(since Postgres 9.4) 2. Spring Batch accessing database using spring jdbc (JdbcTemplate, etc) 3. SimpleJdbcInsert using _doExecuteAndReturnKey(SqlParameterSource parameterSource)_  ### Problem  1. method _locateTableAndProcessMetaData_ fills tableMeta with schema from given table (see on picture)    * _tmd.setSchemaName(tables.getString(""TABLE_SCHEM""));_ (line. 308) 2. Afterwards fetching tableMeta fails because it checks for default schema or known database schemas like **PUBLIC** or **DBO** 3. _DataAccessResourceFailureException_ is thrown  ### Improvement  If no standard schema fits and tableMeta has size 1 use the schema found by selecting table meta data.   ---  **Affects:** 4.2.6  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/4.2.x/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java  **Attachments:** - [snapshot_debug_issue.png](https://jira.spring.io/secure/attachment/23675/snapshot_debug_issue.png) (_58.61 kB_) - [stacktrace.txt](https://jira.spring.io/secure/attachment/23674/stacktrace.txt) (_6.23 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de7eea44983b7f0a69b3a606e95d946440c39f7d, https://github.com/spring-projects/spring-framework/commit/de4349792b56254476f513a40948aaa998308cf2","closed","type: enhancement,","spring-projects-issues","2017-01-04T12:41:06Z","2017-01-25T14:18:14Z"
"","19639","url path variable works incorrectly for string starting/ending with ""."" [SPR-15073]","**[Tushar Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=tushar19892002)** opened **[SPR-15073](https://jira.spring.io/browse/SPR-15073?redirect=false)** and commented  ```java @RequestMapping(value = ""/{url}"", method = RequestMethod.GET)  public String widen(@PathVariable String url) {      return url;  } ```  when url is passed as "".xyz"" this end point returns """". when url is passed as ""xyz."" this end point returns ""xyz""   --- No further details from [SPR-15073](https://jira.spring.io/browse/SPR-15073?redirect=false)","closed","status: declined,","spring-projects-issues","2016-12-30T09:18:17Z","2019-01-12T16:33:44Z"
"","19784","Decouple o.s.w.reactive.result.view.UrlBasedViewResolver from ApplicationContext [SPR-15219]","**[Toshiaki Maki](https://jira.spring.io/secure/ViewProfile.jspa?name=making)** opened **[SPR-15219](https://jira.spring.io/browse/SPR-15219?redirect=false)** and commented  Router functions are actually available without `ApplicationContext` for very small footprint applications, but `UrlBasedViewResolver` calls `getApplicationContext().getAutowireCapableBeanFactory()`. This causes `NullPointerException` if i use router functions and freemaker without `ApplicationContext`.  ```java private View applyLifecycleMethods(String viewName, AbstractView view) {      return (View) getApplicationContext().getAutowireCapableBeanFactory().initializeBean(view, viewName); } ```  https://github.com/spring-projects/spring-framework/blob/fafd2d20e177d56b5d08dfa630b920d7095877da/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/UrlBasedViewResolver.java#L250-L252  I'd be happy if these are decoupled.  Easiest way might be using `lifecycleMethods` as a `BiFunction` like following:  ```java 	private BiFunction lifecycleMethods = (viewName, 			view) -> (View) getApplicationContext().getAutowireCapableBeanFactory() 					.initializeBean(view, viewName);  	public void setLifecycleMethods( 			BiFunction lifecycleMethods) { 		this.lifecycleMethods = lifecycleMethods; 	}  	private View applyLifecycleMethods(String viewName, AbstractView view) { 		return lifecycleMethods.apply(viewName, view); 	} ```  I'm using this hack as a workarround.  https://github.com/making/ik.am/tree/622b1c289ea4273210d4bc0a1a905fa890e8b1b7/src/main/java/am/ik/FreeMarkerConfig.java https://github.com/making/ik.am/blob/622b1c289ea4273210d4bc0a1a905fa890e8b1b7/src/main/java/org/springframework/web/reactive/result/view/UrlBasedViewResolver.java  ---  **Affects:** 5.0 M4  **Issue Links:** - #20099 Introduce null-safety of Spring Framework API - #21583 AOP and use of redirect view can lead to unbounded caching in AbstractAutoProxyCreator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/14161d1dbf922f6fbaa9ca7a5ac54bbce3387281  1 votes, 3 watchers","closed","type: task,","spring-projects-issues","2017-02-03T08:37:53Z","2019-01-11T14:34:46Z"
"","19691","Provide convenient ways to specify query parameters to WebClient  [SPR-15124]","**[Toshiaki Maki](https://jira.spring.io/secure/ViewProfile.jspa?name=making)** opened **[SPR-15124](https://jira.spring.io/browse/SPR-15124?redirect=false)** and commented  In my understanding, when specifying query parameters to `WebClient`, `ClientRequest#method(HttpMethod, URI)` or building url string can be used. I'd like to have more convenient way.  For example, when  `http://api.example.com` is a externalized property(`api.path`) and an application accesses `$(api.path)/v1/foo?bar=$(bar)&baz=$(baz)`, we need to write code such as following:  ```java int bar = 100; String baz = aaa; ClientRequest req = ClientRequest 		.method(GET, UriComponentsBuilder.fromHttpUrl(apiPath) 		  .pathSegment(""v1"", ""foo"") 		  .queryParam(""bar"", bar) 		  .queryParam(""baz"", baz).build().encode().toUri());  // or ClientRequest req = ClientRequest.GET(apiPath + ""/v1/foo?bar="" + bar + ""&baz="" + baz);  // I don't like this style ```  I would like to propose adding the following methods in `org.springframework.web.reactive.function.client.ClientRequest`  ```java // though rough design static BodyBuilder method(HttpMethod method, String url, 		Function f) { 	UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url); 	URI uri = f.apply(builder).toUri(); 	return new DefaultClientRequestBuilder(method, uri); }  static HeadersBuilder GET(String url, 		Function f) { 	return method(HttpMethod.GET, url, f); }  // POST, PUT, ... ```  With this method, the example code above can be re-written as follows:  ```java ClientRequest req = ClientRequest 		.GET(apiHost, b -> b.pathSegment(""v1"", ""foo"")                                                  .queryParam(""bar"", bar)                                                  .queryParam(""baz"", baz)                                                  .build().encode()) 		.build(); ```  ---  **Affects:** 5.0 M4  **Issue Links:** - #19765 RestTemplate drops trailing / from request URI","closed","type: enhancement,","spring-projects-issues","2017-01-10T17:56:33Z","2019-01-11T15:33:54Z"
"","20192","Remote Invocation - Add attributes support to remote invocation result [SPR-15633]","**[Tomer Arbel](https://jira.spring.io/secure/ViewProfile.jspa?name=tomerarbel)** opened **[SPR-15633](https://jira.spring.io/browse/SPR-15633?redirect=false)** and commented  Spring's remote invocation infrastructure allows adding serializable attributes on a remote request in `org.springframework.remoting.support.RemoteInvocation`. As the javadoc explains:  > This is very useful for adding additional invocation data without having to subclass `RemoteInvocation`. (RemoteInvocation#addAttribute(...))  While this is supported on the remote request side, the response side does not support that. Meaning, if there is a need to add data to the remote response, `org.springframework.remoting.support.RemoteInvocationResult` must be subclassed to contain the extra data.  I suggest adding attributes support to `org.springframework.remoting.support.RemoteInvocationResult` to match the capabilities of  `org.springframework.remoting.support.RemoteInvocation`.   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2017-06-07T11:09:23Z","2021-11-08T10:41:13Z"
"","20182","Some published artifacts have bad signatures [SPR-15623]","**[Tom Zeller](https://jira.spring.io/secure/ViewProfile.jspa?name=tzeller)** opened **[SPR-15623](https://jira.spring.io/browse/SPR-15623?redirect=false)** and commented  Some Spring Framework 4.3.8 JARs have bad signatures - or maybe I'm just doing it wrong.  Is the proper fingerprint published in GitHub somewhere ?  For example, bad signature for spring-core-4.3.8.RELEASE.jar :  wget http://repo1.maven.org/maven2/org/springframework/spring-core/4.3.8.RELEASE/spring-core-4.3.8.RELEASE.jar wget http://repo1.maven.org/maven2/org/springframework/spring-core/4.3.8.RELEASE/spring-core-4.3.8.RELEASE.jar.asc  or  https://repo.spring.io/release/org/springframework/spring-core/4.3.8.RELEASE/spring-core-4.3.8.RELEASE.jar https://repo.spring.io/release/org/springframework/spring-core/4.3.8.RELEASE/spring-core-4.3.8.RELEASE.jar.asc  gpg --verify spring-core-4.3.8.RELEASE.jar.asc gpg: assuming signed data in 'spring-core-4.3.8.RELEASE.jar' gpg: Signature made Tue Apr 18 10:27:31 2017 CDT using RSA key ID D401AB61 gpg: BAD signature from ""Bintray (by JFrog) "" [unknown]  But a good signature for spring-core-4.3.8.RELEASE.pom :  wget http://repo1.maven.org/maven2/org/springframework/spring-core/4.3.8.RELEASE/spring-core-4.3.8.RELEASE.pom wget http://repo1.maven.org/maven2/org/springframework/spring-core/4.3.8.RELEASE/spring-core-4.3.8.RELEASE.pom.asc  gpg --verify spring-core-4.3.8.RELEASE.pom.asc gpg: assuming signed data in 'spring-core-4.3.8.RELEASE.pom' gpg: Signature made Tue Apr 18 10:27:23 2017 CDT using RSA key ID D401AB61 gpg: Good signature from ""Bintray (by JFrog) "" [unknown] gpg: WARNING: This key is not certified with a trusted signature! gpg:          There is no indication that the signature belongs to the owner. Primary key fingerprint: 8756 C4F7 65C9 AC3C B6B8  5D62 379C E192 D401 AB61  Imported new signing key for 4.3.8 via :  gpg --keyserver hkp://pool.sks-keyservers.net --search-keys 0x379CE192D401AB61  For reference, here's 4.3.7 :  gpg --verify spring-core-4.3.7.RELEASE.pom.asc gpg: Signature made Mon 20 Mar 2017 11:41:37 AM EDT using RSA key ID E457C53D gpg: Good signature from ""Spring Buildmaster "" gpg: WARNING: This key is not certified with a trusted signature! gpg:          There is no indication that the signature belongs to the owner. Primary key fingerprint: E2AC B037 933C DEAA B7BF  77D4 9A2C 7A98 E457 C53D  and 4.3.6, whose key was revoked :  gpg --verify spring-core-4.3.6.RELEASE.pom.asc gpg: Signature made Wed 25 Jan 2017 09:09:05 AM EST using DSA key ID 93185045 gpg: Good signature from ""Spring Buildmaster "" gpg: WARNING: This key has been revoked by its owner! gpg:          This could mean that the signature is forged. gpg: reason for revocation: Key has been compromised gpg: WARNING: This key is not certified with a trusted signature! gpg:          There is no indication that the signature belongs to the owner. Primary key fingerprint: 73FE 03B9 CB49 3113 DB54  89DE 23EF 3D2F 9318 5045   ---  **Affects:** 4.3.8","closed","","spring-projects-issues","2017-06-05T17:39:03Z","2019-01-11T16:10:47Z"
"","19699","Cache Control set at resource handler being trumped by spring security on 304 response [SPR-15133]","**[Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tjahncke)** opened **[SPR-15133](https://jira.spring.io/browse/SPR-15133?redirect=false)** and commented  Using the resource handler to set cache controls works initially, meaning on initial request the response header has the specified cache control header.  However, the next request of the resource with a response status of 304 (Not Modified) has the default cache control header from spring security (no-store, no-cache ...).  This means that the resource will go back and forth between specified caching and no caching causing a full request to be executed.  Here is a snippet of code from my class that extends WebMvcConfigurerAdapter  ``` wmsWebResourceHandler.addResourceLocations(                                  ""classpath:/META-INF/resources/wmsWeb/""); wmsWebResourceHandler.setCacheControl(CacheControl.noCache()); ```  I did explore disable the cacheControl via http.headers().cacheControl().disable(); in my class that extends WebSecurityConfigurerAdapter, however, I do desire that other requests that are not part of the resourceHandler pattern are not stored or cached.  I will attach two screenshots to depict what I am seeing.  This is with Spring Boot 1.4.2.RELEASE   ---  **Attachments:** - [Initial-http-request correct cache-control header.png](https://jira.spring.io/secure/attachment/23682/Initial-http-request+correct+cache-control+header.png) (_80.14 kB_) - [Next request with a proper 304 response, but incorrect cache-control header..png](https://jira.spring.io/secure/attachment/23683/Next+request+with+a+proper+304+response%2C+but+incorrect+cache-control+header..png) (_82.57 kB_)","closed","status: declined,","spring-projects-issues","2017-01-11T17:25:00Z","2019-01-12T16:33:39Z"
"","19785","Memory leak in AbstractAutoProxyCreator for custom initializeBean calls [SPR-15220]","**[thomas.kummer](https://jira.spring.io/secure/ViewProfile.jspa?name=tkummer)** opened **[SPR-15220](https://jira.spring.io/browse/SPR-15220?redirect=false)** and commented  Our server is creating (a lot) prototype beans programatically see code below:  ```java @Autowired     private AutowireCapableBeanFactory beanFactory;      @Override     public final ServiceStageProcessor newProcessor() {         ServiceStageProcessor processor = create();    beanFactory.autowireBeanProperties(processor,AutowireCapableBeanFactory.AUTOWIR_NO, false);          beanFactory.initializeBean(processor,                 processor.getClass().getSimpleName() + ""@"" + Integer.toHexString(processor.hashCode())); // this call causes the memory leak         return processor;     } ```  As side effect for every created bean a entry is created in org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#advisedBeans This map contains the bean name and the information if this bean was proxied. In our case the responsible class was the AspectJAwareAdvisorAutoProxyCreator. After creating ~7 million prototype beans the map  advisedBeans had a size of ~ 4GB.    ---  **Affects:** 4.2.6","closed","in: core,","spring-projects-issues","2017-02-03T12:30:47Z","2019-01-11T14:33:10Z"
"","19726","Collection autowiring does not resolve field-level type variable against containing class [SPR-15160]","**[thomas weidner](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas001le)** opened **[SPR-15160](https://jira.spring.io/browse/SPR-15160?redirect=false)** and commented  Spring fails to autowire fields correctly, if the field contains a generic type variable, which is later bound. It does not matter if the type variable is bound by deriving a concrete (not generic) type or just defining a bean of the generic type with fixed type parameters.  Spring either finds not all beans or too many beans, whereas the second case is especially troublesome as it breaks static type checking.  Consider two beans of types `Foo` and `Bar` both implementing an interface `Base`. Moreover, we have a type `BeanCollector` which autowires a single field of type `List`, a field of type `C` and prints both values after construction. Additionally, a `BaseBeanCollector","closed","in: core,","spring-projects-issues","2017-01-18T12:37:08Z","2019-01-11T15:29:30Z"
"","19674","Update MySQLMaxValueIncrementer to not rely on MYISAM [SPR-15107]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-15107](https://jira.spring.io/browse/SPR-15107?redirect=false)** and commented  We should update MySQLMaxValueIncrementer to not rely on MYISAM for the sequence table since this engine might not always be available. This is the case with the latest MySQL service available in Cloud Foundry. It would be better to do the sequence value update in a separate transaction so we can support any type of storage engine.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1286, and commits https://github.com/spring-projects/spring-framework/commit/cc53d597c0522ae3df66051bc9f218e4051cf211, https://github.com/spring-projects/spring-framework/commit/5c7aee7d38c3c2d37ae1abc61864736ba5a71c7e, https://github.com/spring-projects/spring-framework/commit/60882ceb4e207f9c846eacd2626a49b50307a110","closed","type: enhancement,","spring-projects-issues","2017-01-06T21:15:06Z","2018-06-22T07:17:59Z"
"","19895","PathMatchingResourcePatternResolver fails to work under Tomcat 8.0.41 with unpackWARs=false [SPR-15332]","**[Thomas Meyer](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasmey)** opened **[SPR-15332](https://jira.spring.io/browse/SPR-15332?redirect=false)** and commented  Because of Tomcat commit https://github.com/apache/tomcat80/commit/7e767cc6efe79cdd367213da3c1f88711a29ad7a#diff-a72fb99b0729353084d2c437f749e718 ResourceUtils.isJarURL will return false https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java#L473 and then Spring tries to access the non-existing file from filesystem and will issue the warning ""Cannot search for matching files underneath because it does not correspond to a directory in the file system"" https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java#L665  I did see this bug with Spring 4.x but seems still to exists on master branch.  ---  **Issue Links:** - #17434 Support for last-modified resolution in Tomcat's unpackwar=false mode - #20045 Last modified check of Resource created from Tomcat war:file: URL fails with FileNotFoundException - #20115 ResourceUtils.extractArchiveURL fails to work under Tomcat 8.0.41 with unpackWARs=false  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/57c8c759ae7659c683e409cfde6220862b87419a, https://github.com/spring-projects/spring-framework/commit/012c56a1f071d4ce14b78ce73f287cfb4582b624, https://github.com/spring-projects/spring-framework/commit/899f2359984c4fbf396bfc74a824541b6332eb2f  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2017-03-08T18:13:28Z","2019-01-11T15:05:33Z"
"","20343","Spring modelattribute not recognized after ajax update anymore [SPR-15788]","**[Thomas Lang](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.lang@th-deg.de)** opened **[SPR-15788](https://jira.spring.io/browse/SPR-15788?redirect=false)** and commented  Short summary of the problem. Please see the detailed in the attached stackoverflow link: 1. I use a pojo dto to bind a thymeleaf view to it. 2. This pojo has a list of T instances, called items 3. I bind this dto pojo to the view in my controller:  ```java model.addAttribute(""invoiceDto"", new InvoiceDto(setting.get(), applicationUserContactProjection.get())); ```  1. I can access the list in the pojo via thymeleaf  ```java  ```  1. the path is items 2. i can add items via ajax in a controller method (i post the whole invoiceDto Model to the controller)  ```java invoiceDto.addItem(new LineItem()); ```  1. i return a thymeleaf partial view from this controller´s method 2. when spring renders the partial view the access to the path fails  ```java  ```  1. i have to use a separate partial view  ```java  ```  1. in this special view i have to prepend ""invoiceDto"" to get the path right  I hope my problem has been clearly described? This is not a critical issue. It´s just annoying, because i have to use different views.  See the files attached. Thank you for your help.    ---  **Affects:** 4.3.7  **Reference URL:** https://stackoverflow.com/questions/41242507/spring-modelattribute-not-recognized-anymore-after-ajax-update  **Attachments:** - [create.html](https://jira.spring.io/secure/attachment/25052/create.html) (_15.76 kB_) - [dynamicitems.html](https://jira.spring.io/secure/attachment/25050/dynamicitems.html) (_7.52 kB_) - [InvoiceController.java](https://jira.spring.io/secure/attachment/25053/InvoiceController.java) (_31.42 kB_) - [InvoiceDto.java](https://jira.spring.io/secure/attachment/25049/InvoiceDto.java) (_5.81 kB_) - [InvoiceMacroDto.java](https://jira.spring.io/secure/attachment/25048/InvoiceMacroDto.java) (_3.48 kB_) - [items.html](https://jira.spring.io/secure/attachment/25051/items.html) (_7.58 kB_)","closed","status: invalid,","spring-projects-issues","2017-07-18T11:24:02Z","2019-01-12T05:20:34Z"
"","20309","RestTemplate retry strategy based on response [SPR-15754]","**[Thibaud Lepretre](https://jira.spring.io/secure/ViewProfile.jspa?name=kakawait)** opened **[SPR-15754](https://jira.spring.io/browse/SPR-15754?redirect=false)** and commented  I would propose a new feature for `RestTemplate` that allow us to describe a kind of _retry strategy_ regarding the _HTTP response_ sent back by the targeted server.  This feature is very close to what Apache HTTP Client can offer with https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/client/ServiceUnavailableRetryStrategy.html  Use case can be apply to existing `Oauth2RestTemplate` https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/OAuth2RestTemplate.java#L140  Indeed `Oauth2RestTemplate` provides a way to retry request if access token is too old.  > Flag to determine whether a request that has an existing access token, and which then leads to an AccessTokenRequiredException should be retried (immediately, once). Useful if the remote server doesn't recognize an old token which is stored in the client, but is happy to re-grant it.  I have similar needs since I'm developing a _Spring security CAS starter_ from _Spring boot_ https://github.com/kakawait/cas-security-spring-boot-starter and I would offer a pre-configured `RestTemplate` with that starter that allow client to execute request with a pre-filled _proxy ticket_ (similar to _access token_ in OAuth2 vocabulary).  In addition CAS _proxy ticket_ unlike OAuth2 _access token_ is one time use, so to do not call each time CAS server to get a _proxy ticket_ you can define a stateful strategy (like http://docs.spring.io/spring-security/site/docs/current/reference/html/cas.html#cas-pt) but I can't determine how many time _proxy ticket_ is valid. Only way is to try the request!  Thus I would be a great to get something to be able to retry `RestTemplate` request with new _proxy ticket_.  Today if I have to implement such thing I have only 1 solution: extends `RestTemplate` like Dave Syer did for `Oauth2RestTemplate`...   ---  **Affects:** 4.3.9  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2017-07-10T14:42:29Z","2020-04-01T10:35:20Z"
"","20092","@target PointCut causes unrelated beans to be proxied [SPR-15533]","**[Thao-Nguyen Do](https://jira.spring.io/secure/ViewProfile.jspa?name=donguyen)** opened **[SPR-15533](https://jira.spring.io/browse/SPR-15533?redirect=false)** and commented  When `@target` is used in a PointCut, all beans created in the same context are proxied, although that PointCut does not match those beans.  This bug was already mentioned and according to that ticket also fixed (#6859), but this behavior is still present in later versions of Spring.  In our application context some beans cannot be proxied. These beans cannot be modified, so usage of `@target` PointCuts breaks our application. However, not using `@target` is also not possible, as our use case requires Aspects to be applied to all methods of a wide range of classes (including inherited and interface methods). Our desired behavior for aspects could not be implemented with other PointCut definitions.  ---  **Affects:** 4.3.4  **Issue Links:** - #6859 `@target`() advices beans it should not  1 votes, 4 watchers","open","in: core,","spring-projects-issues","2017-05-10T11:54:07Z","2019-01-14T04:35:25Z"
"","19890","UriComponentsBuilder fromHttpRequest breaks with relative URIs [SPR-15327]","**[Tapio Rautonen](https://jira.spring.io/secure/ViewProfile.jspa?name=trautonen)** opened **[SPR-15327](https://jira.spring.io/browse/SPR-15327?redirect=false)** and commented  We are building relative URIs with `UriComponentsBuilder` `fromHttpRequest` method. Everything works fine if the `X-Forwarded-Proto` header is available because it sets the scheme, but same method can be used when there is no proxy in front of the service. In this case if `HttpRequest` `getURI` method returns a relative URI, eg. `/` a `NullPointerException` is thrown because scheme comparison is not null safe.  This can be easily reproduced with a following example.  ```java HttpRequest request = new HttpRequest() { 	@Override 	public HttpMethod getMethod() { 		return HttpMethod.GET; 	}  	@Override 	public URI getURI() { 		return UriComponentsBuilder.fromUriString(""/"").build().toUri(); 	}  	@Override 	public HttpHeaders getHeaders() { 		return new HttpHeaders(); 	} };  UriComponentsBuilder.fromHttpRequest(request); // java.lang.NullPointerException ```    ---  **Affects:** 4.3.6  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java#L738-L741","closed","status: invalid,","spring-projects-issues","2017-03-07T20:42:39Z","2019-01-28T15:46:41Z"
"","20352","Disable DTD and external entities support in XmlEventDecoder to prevent XXE and XML bomb attack [SPR-15797]","**[Takuya Iwatsuka](https://jira.spring.io/secure/ViewProfile.jspa?name=tiwatsuka)** opened **[SPR-15797](https://jira.spring.io/browse/SPR-15797?redirect=false)** and commented  An instance of XMLInputFactory in XmlEventDecoder supports DTD and external entities. Because Jaxb2XMLDecoder uses XMLEventDecoder, this could be exploited to some kind of attack like XXE or XML Bomb. To prevent these attacks, it should disable support DTD and external entities by setting properties of XMLInputFactory.  ---  **Affects:** 5.0 RC2  **Issue Links:** - #17727 XML input vulnerability based on DTD declaration  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e4651d6b50c5bc85c84ff537859c212ac4e33434","closed","type: enhancement,","spring-projects-issues","2017-07-20T08:57:00Z","2019-01-11T16:23:37Z"
"","20341","UriUtils.extractFileExtension() does not properly handle all fragments [SPR-15786]","**[Takuya Iwatsuka](https://jira.spring.io/secure/ViewProfile.jspa?name=tiwatsuka)** opened **[SPR-15786](https://jira.spring.io/browse/SPR-15786?redirect=false)** and commented  UriUtils.extractFileExtension() returns incorrect result when meet both conditions shown below.  * input path does not include query strings * input path includes a path fragment and the fragment contains ""?""  ```java UriUtils.extractFileExtension(""/xxx/yyy.json#aaa?bbb""); // => ""json#aaa"" ```  In addition, it might return extension-like string if the fragment contains ""."" before ""?"".  ```java UriUtils.extractFileExtension(""/xxx/yyy.json#aaa.xml?bbb""); // => ""xml"" ```  According to RFC 3986, both ""."" and ""?"" could be contained in path fragments. It is expected that the method handle these inputs correctly.  ---  **Affects:** 4.3.9  **Issue Links:** - #19048 Avoid dependency on WebUtils for extracting file extension  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1480, and commits https://github.com/spring-projects/spring-framework/commit/40b4276475bca478efa429f391862039e79b5cee, https://github.com/spring-projects/spring-framework/commit/13080f04f405f5692646fe1bdf8b887ca8147848","closed","type: bug,","spring-projects-issues","2017-07-18T08:27:48Z","2019-01-11T16:25:03Z"
"","20326","StringUtils.cleanPath() should strip successive slashes [SPR-15771]","**[Takuya Iwatsuka](https://jira.spring.io/secure/ViewProfile.jspa?name=tiwatsuka)** opened **[SPR-15771](https://jira.spring.io/browse/SPR-15771?redirect=false)** and commented  As far as I know, multiple successive slashes in a path are treated as a single slash. So I think StringUtils.cleanPath() should strip them to normalize the path.  Because StringUtils.pathEquals() compares two paths obtained from cleanPath(), the result is  strange like below.  ```java StringUtils.pathEquals(""/some/file/path"", ""/some//../file/path""); // => true ```    ---  **Affects:** 4.3.9","closed","type: enhancement,","spring-projects-issues","2017-07-14T07:48:19Z","2019-01-11T16:25:32Z"
"","20387","JDK aop invoke very slow [SPR-15832]","**[takeseem](https://jira.spring.io/secure/ViewProfile.jspa?name=takeseem)** opened **[SPR-15832](https://jira.spring.io/browse/SPR-15832?redirect=false)** and commented  ENV: jdk1.8, spring 4.3.8.RELEASES, see the pom.xml  why SpringJDKProxy is slowest? but the ori jdk proxy speed is good.  Although SpringJdkProxy performance of the slowest, but compared to the business TPS, the loss can be ignored :)  the test project is [takeseem-demo-aop](https://github.com/takeseem/takeseem-demo-aop)  ```java Run NO Proxy: 37 ms, 38,109,875 t/s Run JDK Proxy: 85 ms, 16,589,004 t/s Run CGLIB Proxy: 52 ms, 27,116,642 t/s Run Spring interface Proxy: 205 ms, 6,878,367 t/s Run Spring class Proxy: 38 ms, 37,106,984 t/s Run JAVAASSIST Proxy: 108 ms, 13,056,161 t/s Run JAVAASSIST Bytecode Proxy: 39 ms, 36,155,523 t/s Run ASM Bytecode Proxy: 39 ms, 36,155,523 t/s ```    ---  **Affects:** 4.3.8  **Reference URL:** https://github.com/takeseem/takeseem-demo-aop","open","in: core,","spring-projects-issues","2017-07-29T16:26:19Z","2019-01-11T17:41:10Z"
"","20391","spring-aspects should remain on AspectJ 1.8.9 by default (since aspectjrt 1.8.10 requires Java 7+) [SPR-15836]","**[Sören Chittka](https://jira.spring.io/secure/ViewProfile.jspa?name=soeren.chittka)** opened **[SPR-15836](https://jira.spring.io/browse/SPR-15836?redirect=false)** and commented  Since Version 4.3.10.RELEASE `spring-aspects` depends on `aspectjrt` 1.8.10, which is compiled against Java 7 (according to Maven).  This makes Spring Framework incompatible with Java 6.  ---  **Affects:** 4.3.10  **Issue Links:** - #20525 Upgrade to AspectJ 1.9 beta 7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fa2c377405ea9b65c0624bf706a4a5b71a6d77ba","closed","in: core,","spring-projects-issues","2017-07-31T13:33:49Z","2019-01-11T17:41:22Z"
"","19750","@Primary annotation on ProxyFactoryBean [SPR-15184]","**[Sönke Reimer](https://jira.spring.io/secure/ViewProfile.jspa?name=soeni)** opened **[SPR-15184](https://jira.spring.io/browse/SPR-15184?redirect=false)** and commented  If a ProxyFactoryBean returning  a bean of type 'PlatformTransactionManager' is annotated with `@Primary` in the configuration and another bean having the same interface type is also annotated with `@Primary` spring states out:  ``` more than one 'primary' bean found among candidates: [targetTransactionManager, transactionManagerProxyFactory] ``` which seems to be o.k. On the other hand the ProxyFactoryBean annotated with @Primary is not detected as 'Primary' among other beans of the same type, when we remove the @Primary annotation from the other beans with the same type and and error is shown, that the bean can not be uniquely resolved in autowiring. Example: ```      @Primary     @Bean     public PlatformTransactionManager targetTransactionManager(EntityManagerFactory entityManagerFactory) {       return new JpaTransactionManager(entityManagerFactory);     }          @Primary     @Bean     public ProxyFactoryBean transactionManagerProxyFactory(         @Qualifier(""targetTransactionManager"") PlatformTransactionManager transactionManager) {       ProxyFactoryBean proxyFactory = new ProxyFactoryBean();       proxyFactory.setInterfaces(PlatformTransactionManager.class);       proxyFactory.setInterceptorNames(""transactionLoggingInterceptor"");       proxyFactory.setTarget(transactionManager);       return proxyFactory;     }  ``` This seems to be inconsistent.  Regards Sönke ```    ---  **Affects:** 4.3.4","open","in: core,","spring-projects-issues","2017-01-24T17:16:25Z","2019-01-11T14:25:58Z"
"","19916","Add support for I18n messages file with YAML [SPR-15353]","**[Sérgio Vale e Pace](https://jira.spring.io/secure/ViewProfile.jspa?name=svpace)** opened **[SPR-15353](https://jira.spring.io/browse/SPR-15353?redirect=false)** and commented  Add support for I18n messages files in YAML format like it has been added to application properties   ---  **Affects:** 4.3.7  1 votes, 2 watchers","open","in: core,","spring-projects-issues","2017-03-17T02:50:12Z","2021-11-10T12:23:34Z"
"","20373","Use ParameterizedTypeReference instead of Class in Kotlin extensions [SPR-15818]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15818](https://jira.spring.io/browse/SPR-15818?redirect=false)** and commented  In order to avoid type erasure, we should use `ParameterizedTypeReference` based methods in `RestOperations`, `WebClient`, `ClientResponse`, `ServerRequest` and `ServerResponse` extensions.  This should  be done by keeping reified type parameters but changing `T:class.java` to `object : ParameterizedTypeReference() {}`.  ---  **Issue Links:** - #20372 Add ParameterizedTypeReference method variants to ServerRequest/ServerResponse (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6583f9f754c6a57dbb5610b916465a7dc3acf04d","closed","type: enhancement,","spring-projects-issues","2017-07-25T15:17:29Z","2019-01-11T17:41:37Z"
"","20372","Add ParameterizedTypeReference method variants to ServerRequest/ServerResponse [SPR-15817]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15817](https://jira.spring.io/browse/SPR-15817?redirect=false)** and commented  For consistency with `ClientResponse`, and because this is useful on both Java and  Kotlin side, I think we should add a `ParameterizedTypeReference` method variants to `ServerRequest#bodyToMono`, `ServerRequest#bodyToFlux` and `ServerResponse.BodyBuilder#body` `Class`  current ones.  ---  **Issue Links:** - #20373 Use ParameterizedTypeReference instead of Class in Kotlin extensions (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eb435f594779f9b31e754ee698a375b6bda17292","closed","type: enhancement,","spring-projects-issues","2017-07-25T15:04:32Z","2019-01-11T17:41:35Z"
"","20370","Avoid requiring it lambda parameter in Kotlin bean DSL [SPR-15815]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15815](https://jira.spring.io/browse/SPR-15815?redirect=false)** and commented  Based on a proposal by Joseph Taylor from Pivotal Labs London, it is possible to improve Kotlin bean DSL by avoid requiring `it` lambda parameter using [function literals with receiver](https://kotlinlang.org/docs/reference/lambdas.html#function-literals-with-receiver).  Spring Framework 5 RC3 syntax:  ``` beans { 	bean() 	bean(""bar"") 	bean { FooFoo(it.env[""name""]) } 	environment({it.activeProfiles.contains(""baz"")}) { 		bean { Baz(it.ref()) } 		bean { Baz(it.ref(""bar"")) } 	} } ```  Spring Framework 5 RC4+ syntax:  ``` beans { 	bean() 	bean(""bar"") 	bean { FooFoo(env[""name""]) } 	environment({activeProfiles.contains(""baz"")}) { 		bean { Baz(ref()) } 		bean { Baz(ref(""bar"")) } 	} } ```    ---  **Affects:** 5.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/29c112c0102300b687dd7803f5c5866175ddb644","closed","type: enhancement,","spring-projects-issues","2017-07-25T09:14:25Z","2017-09-11T12:09:50Z"
"","20369","Upgrade to Kotlin 1.1.4 [SPR-15814]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15814](https://jira.spring.io/browse/SPR-15814?redirect=false)** and commented  `-Xjsr305-annotations=enable` command line option should be enabled.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ed6fe2b72304aff14a2e419a3c8af12736542264, https://github.com/spring-projects/spring-framework/commit/3f4ec372621b49fef12dede2c3a57d4998bb18f5, https://github.com/spring-projects/spring-framework/commit/0bdd2467633bdc6de00be6b327edea1addb28bcb","closed","type: task,","spring-projects-issues","2017-07-24T14:41:34Z","2017-09-11T12:09:49Z"
"","20353","Make DataBufferUtilsTests#writeAsynchronousFileChannel reliable [SPR-15798]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15798](https://jira.spring.io/browse/SPR-15798?redirect=false)** and commented  On Spring CI we see approximately  a 50% failure rate on `DataBufferUtilsTests#writeAsynchronousFileChannel` with the following error:  ``` java.lang.AssertionError: java.lang.AssertionError: VerifySubscriber timed out on false java.lang.AssertionError: VerifySubscriber timed out on false 	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.pollTaskEventOrComplete(DefaultStepVerifierBuilder.java:1470) 	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.verify(DefaultStepVerifierBuilder.java:1056) 	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:696) 	at org.springframework.core.io.buffer.DataBufferUtilsTests.writeAsynchronousFileChannel(DataBufferUtilsTests.java:227) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) (53 more lines...) ```  I am going to ignore this test for now, but it should be fixed before GA.   ---  **Affects:** 5.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2437500cfef89629a3cbfee24a2d524a27021e11, https://github.com/spring-projects/spring-framework/commit/d5da823482134cc447a7023ad223a661cc50e348","closed","in: core,","spring-projects-issues","2017-07-20T11:49:51Z","2018-12-14T22:05:01Z"
"","20347","Make getters and setters null-safety consistent [SPR-15792]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15792](https://jira.spring.io/browse/SPR-15792?redirect=false)** and commented  Ensure that null-safety is consistent between getters and setters in order to be able to provide beans with properties with a common type when type safety is taken in account, like with Kotlin via [KT-10942](https://youtrack.jetbrains.com/issue/KT-10942).  ---  **Issue Links:** - #20099 Introduce null-safety of Spring Framework API - #20276 Extend null-safety to field level - #20396 BeanDefinitionBuilder method arguments not annotated with `@Nullable` - #20740 Consistent and efficient access to BeanDefinition argument values  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/46eba3dbfad310bbafbf0a1002a386246288df1c, https://github.com/spring-projects/spring-framework/commit/9fc4fb10b0da0d625dd7dff0bf2bd3e6b42b5684, https://github.com/spring-projects/spring-framework/commit/fb4ddb0746a3f194091043de328875596736427a","closed","type: task,","spring-projects-issues","2017-07-19T06:54:16Z","2019-01-13T05:15:25Z"
"","20310","Introduce Kotlin Functional bean registration DSL [SPR-15755]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15755](https://jira.spring.io/browse/SPR-15755?redirect=false)** and commented  As a follow-up of [Spring Framework 5.0 bean registration Kotlin extensions](https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0#functional-bean-registration-with-kotlin), close to what we did for the [Kotlin functional WebFlux DSL](https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0#spring-web-functional-api-the-kotlin-way) and similar to [Groovy bean configuration DSL](https://spring.io/blog/2014/03/03/groovy-bean-configuration-in-spring-framework-4) (but very different in term of implementation since here no internal XML-based application context is involved), this issue is about introducing a very lightweight Kotlin DSL for function bean registration.  Current Kotlin extensions in Spring Framework 5 RC2 allow to write this Java version  ```java GenericApplicationContext context = new GenericApplicationContext(); context.registerBean(Foo.class); context.registerBean(Bar.class, () -> new  	Bar(context.getBean(Foo.class)) ); ```  Like following in Kotlin:  ```kotlin GenericApplicationContext {     registerBean()     registerBean { Bar(it.getBean()) } } ```  While shorter, this syntax is not declarative (verbs like register are used), require to choose and expose a specific `ApplicationContext` implementation which is not very common in Spring Boot applications for example and could be more easy to write and read.  My proposal is to provide a lightweight Kotlin DSL to allow an even more idiomatic way to register bean in Kotlin:  ```kotlin beans {     bean()     bean { Bar(it.ref()) } } ```  This Kotlin functional bean registration DSL would return a `Consumer` allowing to register beans on an existing application context like the one created by Boot (see also the related #18353 issue).  ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1f011467b8b929928963486f8594eea460b50eb7, https://github.com/spring-projects/spring-framework/commit/f72e0daa543f91c7b37de8d02d72f1f95107b22c","closed","type: enhancement,","spring-projects-issues","2017-07-10T17:37:10Z","2019-01-11T16:27:22Z"
"","20254","Avoid requiring uri("""") when using Web(Test)Client baseUrl [SPR-15695]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15695](https://jira.spring.io/browse/SPR-15695?redirect=false)** and commented  Currently it is currently required to write code like `client.get().uri("""").retrieve().bodyToMono()` in order to use the `baseUrl` defined via the `WebClient` or `WebTestClient` instances. It would be nice to provide a solution that does not require writing `uri("""")` (maybe `client.get().retrieve().bodyToMono()` but this is not trivial with current API design).   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5f2d2b21d91f57e3f53508a9933cc8fd156d0a36, https://github.com/spring-projects/spring-framework/commit/3232cb626094123ff69ad4053b0a92f8cc768dad","closed","type: enhancement,","spring-projects-issues","2017-06-23T10:44:35Z","2017-07-24T07:51:15Z"
"","20247","Update UrlBasedCorsConfigurationSource for leveraging PathPatternParser [SPR-15688]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15688](https://jira.spring.io/browse/SPR-15688?redirect=false)** and commented  On Spring MVC side, `AbstractHandlerMapping` propagates `PathMatcher` changes to the `UrlBasedCorsConfigurationSource` used for CORS support.  Spring WebFlux CORS infrastructure is a very close port for Spring MVC one using WebFlux API instead of MVC one, but as dicussed this morning WebFlux `UrlBasedCorsConfigurationSource#setPathMatch` is still present but not used and should probably replaced by a `PathPatternParser` based setter and used in `AbstractHandlerMapping` to make sure both use the same one (notice that I am not sure that customization of `PathPatternParser` is supported on WebFlux `AbstractHandlerMapping` yet).   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9c935215126116d437e571daf6aae478e56b370f","closed","type: task,","spring-projects-issues","2017-06-21T09:22:30Z","2017-07-24T07:51:15Z"
"","20232","Kotlin class instantiation with optional parameters and default values [SPR-15673]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15673](https://jira.spring.io/browse/SPR-15673?redirect=false)** and commented  Following the work done on #19763, it seems we don't support currently Kotlin classes with default parameters since the bytecode generated contains 2 constructors.  This [comment](https://github.com/spring-projects/spring-boot/issues/8762#issuecomment-289790225) from Jayson Minard provide useful guidance. We could maybe take inspiration of https://github.com/FasterXML/jackson-module-kotlin/ that implements similar support.  This feature should if possible be reusable from Spring Boot for its [support for `@ConfigurationProperties`](https://github.com/spring-projects/spring-boot/issues/8762) and Spring Data which currently requires Kotlin [noarg compiler plugin](https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin) (I have validated it is currently required via [MiXiT application](https://github.com/mixitconf/mixit), would be nice to be able to avoid using this plugin which is basicaly a trick for libraries without Kotlin support).  [Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) I am going to try to write Kotlin tests that demonstrate the issue and try to find the right Kotlin API to use for that, I may need your guidance for the steps after that.  ---  **Issue Links:** - #19763 Data binding with immutable objects (Kotlin / Lombok / `@ConstructorProperties`) - #20406 Kotlin bean instantiation regression with default declared constructor - #20101 BindingResult support for constructor argument mismatch on immutable data object - #20432 Revisit handling of missing fields (without default values) for immutable data classes - #20569 Streamline and reduce Kotlin delegates  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d8e52c04135474821d5d063d75a37ef1ea4f56b0, https://github.com/spring-projects/spring-framework/commit/fa4d13968451bfe96eab122634c0a1eab6083aaa, https://github.com/spring-projects/spring-framework/commit/ab6430569da073e3c137daa45392f62f36a24bff, https://github.com/spring-projects/spring-framework/commit/3991ab4a2382418eb834802ed387ba293cadc7ca, https://github.com/spring-projects/spring-framework/commit/40df7b6eca32b068e2ba7ffa7ec209dd6f396219","closed","type: enhancement,","spring-projects-issues","2017-06-16T09:27:18Z","2019-01-13T05:15:47Z"
"","20221","Consider moving high-level classes from spring-web to spring-webflux [SPR-15662]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15662](https://jira.spring.io/browse/SPR-15662?redirect=false)** and commented  As discussed with [Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) during #19602 review, `org.springframework.web.server` has maybe grown too much and we should maybe consider moving some stuff to `spring-webflux` (the discussion was triggered by locale resolution implementation but was also about other functionalities that imply bean lookups).  ---  No further details from [SPR-15662](https://jira.spring.io/browse/SPR-15662?redirect=false)","closed","status: declined,","spring-projects-issues","2017-06-13T18:08:42Z","2019-01-11T16:06:15Z"
"","20220","Consider using ZonedDateTime in HttpHeaders [SPR-15661]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15661](https://jira.spring.io/browse/SPR-15661?redirect=false)** and commented  As raised during discussing #20114, ideally we Spring Framework 5 API should exposed date/time with timezone in a consistent way, but currently `HttpHeaders` existing date/time fields are exposed with `long` while they should be exposed with `ZonedDateTime` like `ContentDisposition`.  The consensus was to deprecate current `long` based variants and to add new `ZonedDateTime` ones, but this is not possible easily on getters if we use the same method name and choosing other names like `getDateAsZonedDateTime()` is not super appealing.  ---  **Affects:** 5.0 RC2  **Issue Links:** - #20114 Support missing properties from Content-Disposition spec - #20708 MockHttpServletResponse.getDateHeader fails with NPE for non-existing header - #21104 Overloaded convenience setters on HttpHeaders - #22103 Allow java.time types for setting the Last-Modified header - #20234 Use fixed GMT time-zone for WebSessionManager Clock  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1fa841099582a10f85ae2cebc112439411066ee8, https://github.com/spring-projects/spring-framework/commit/5c1d8c7c591f5447038bea4e18b9df259a0f0743","closed","type: task,","spring-projects-issues","2017-06-13T18:02:36Z","2019-01-11T16:06:37Z"
"","20219","Remove KClass based Kotlin extensions and keep only reified type parameters ones [SPR-15660]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15660](https://jira.spring.io/browse/SPR-15660?redirect=false)** and commented  After more thoughts and discussion, I think this is better to keep only the reified type parameter extensions and to remove `KClass` based variants.  These `KClass` variants add too much overloaded options, can't leverage type system to infer the type, are not super Kotlin-ish and can be replaced by the `Class` original java method using `Foo::class.java`.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/04d5a2951c36bf52f0b6e0eb23fe45ecfacfdb25","closed","type: task,","spring-projects-issues","2017-06-13T16:22:21Z","2017-06-14T10:12:19Z"
"","20218","Add documentation for Kotlin support [SPR-15659]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15659](https://jira.spring.io/browse/SPR-15659?redirect=false)** and commented   ---  **Affects:** 5.0 RC1  1 votes, 3 watchers","closed","type: task,","spring-projects-issues","2017-06-13T15:55:40Z","2017-09-11T12:09:49Z"
"","20217","Log a warning in Jackson builder when Kotlin is used without jackson-module-kotlin [SPR-15658]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15658](https://jira.spring.io/browse/SPR-15658?redirect=false)** and commented  This is a very common error that should be notified to users.  ---  **Issue Links:** - #21040 Avoid multiple warnings related to jackson-module-kotlin in Jackson2ObjectMapperBuilder","closed","type: enhancement,","spring-projects-issues","2017-06-13T15:54:19Z","2019-01-11T16:08:34Z"
"","20099","Introduce null-safety of Spring Framework API [SPR-15540]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15540](https://jira.spring.io/browse/SPR-15540?redirect=false)** and commented  The proposal brought by this issue is to make nullability of return values and parameters of Spring Framework API explicit via annotations, and leverage this information in Kotlin user Spring projects.  More details can be found in these 2 Square blog posts [Rolling out @Nullable](https://medium.com/square-corner-blog/rolling-out-nullable-42dd823fbd89) and [Non-null is the default](https://medium.com/@swankjesse/non-null-is-the-default-58ffc0bb9111).  If at some points [`@ParametersAreNonnullByDefault`](https://youtrack.jetbrains.com/issue/KT-10942) is supported at package level, it seems it could be possible to add `@Nullable` annotation only on nullable parameter and return values without bloating our code source with non-nullability annotations.  Notice that the `com.google.code.findbugs:jsr305` dependency used is applied with a `provided` scope which seems to be enough to make it [taken in account by Kotlin](https://kotlinlang.org/docs/reference/java-interop.html#nullability-annotations) (without that Kotlin consider Java nullability as unknown). We need to check this would not create some classloader related issues.  ---  **Reference URL:** https://youtrack.jetbrains.com/issue/KT-10942  **Issue Links:** - [DATACASS-459](https://jira.spring.io/browse/DATACASS-459) Adopt to changed AnnotationUtils.getValue(…) behavior - [DATAJPA-1131](https://jira.spring.io/browse/DATAJPA-1131) Adopt to changed AnnotationUtils.getValue(…) behavior - [DATAMONGO-1710](https://jira.spring.io/browse/DATAMONGO-1710) Adopt to changed AnnotationUtils.getValue(…) and OperatorNode.getRightOperand() behavior - [DATASOLR-396](https://jira.spring.io/browse/DATASOLR-396) Adopt to changed AnnotationUtils.getValue(…) behavior - #20889 BeanNotOfRequiredTypeException (NullBean instead of null) when calling ApplicationContext.getBean(name, type) - #20201 NPE in AnnotationUtils.getValue - #20377 Setting user header on CONNECT message stopped working - #20596 AbstractMessageSource does not properly interact with DelegatingMessageSource parent - #20911 Null path after UriComponents.normalize() results in NullPointerException - #20229 Inconsistent `@Nullable` on AbstractDestinationResolvingMessagingTemplate - #20378 AnnotationAwareOrderComparator doesn't handle null values anymore - #20424 Fix overridden methods nullability - #20675 AbstractMessageSource does not support null as default message anymore - #20773 Nullability inconsistency in DataAccessUtils requiredSingleResult vs requiredUniqueResult - #22016 *Utils.find### to return Optional - #20396 BeanDefinitionBuilder method arguments not annotated with `@Nullable` - #20657 STOMP SEND should not map to `@SubscribeMapping` methods - #21066 Consistent use of Collection.toArray with zero-sized array argument - #19784 Decouple o.s.w.reactive.result.view.UrlBasedViewResolver from ApplicationContext - #20135 Revisit java.util.Optional declarations in reactive API signatures - #20276 Extend null-safety to field level - #20311 Revisit nullability annotations towards GA - #20215 Backport selected refinements from the nullability efforts in 5.0 - #20347 Make getters and setters null-safety consistent  6 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2017-05-14T08:49:52Z","2019-01-13T05:16:15Z"
"","19985","Add Jackson Smile support to WebFlux [SPR-15424]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15424](https://jira.spring.io/browse/SPR-15424?redirect=false)** and commented  This is perfectly suited for server to server exchanges. This should support streaming as well.  ---  **Issue Links:** - #19006 Add Smile and CBOR Jackson data formats support - #19097 Leverage Jackson non-blocking JSON parsing (and remove netty-buffer dependency) - #20331 Support Protobuf serialization in WebFlux  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f46520e6e8e70e59ad46bc31debdfd155cf943bc, https://github.com/spring-projects/spring-framework/commit/0ead0503ebb68461da8e0e3e2eefcbadfbf8bae8","closed","type: enhancement,","spring-projects-issues","2017-04-10T08:16:22Z","2019-01-11T16:43:12Z"
"","19979","Functional bean dependencies tracking [SPR-15417]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15417](https://jira.spring.io/browse/SPR-15417?redirect=false)** and commented  The new functional bean registration mechanism gets the type of the bean to register (via an explicit class parameter in Java or via reified type parameters in Kotlin) but unlike JavaConfig which declare explicitly bean dependencies as input `@Bean` method parameters, the functional variant don't know what bean dependency are needed because it is based on opaque `applicationContext.getBean()` invocations performed by the `Supplier` implementation.  Tracking those `applicationContext.getBean()` invocations would allow the functional bean registration mechanism to build the same kind of bean dependency graph than with JavaConfig, allowing to cover the same use cases and improving consistency between both approaches.  ---  **Issue Links:** - #18353 Programmatic bean registration within configuration classes (_**""is depended on by""**_) - #19398 Add a functional way to register a bean - #19635 Track bean dependencies for calls between `@Bean` methods within `@Configuration` classes","closed","type: enhancement,","spring-projects-issues","2017-04-05T15:49:14Z","2019-01-13T05:16:38Z"
"","19932","Resolve async attributes in View hierarchy instead of ViewResolutionResultHandler [SPR-15368]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15368](https://jira.spring.io/browse/SPR-15368?redirect=false)** and commented  This will make it effective for functional WebFlux API in addition to the annotation-based one + will allow View implementers to disable/customize async attributes resolution.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/73b44828e9dba23fec73286829c4583e6342049a","closed","type: enhancement,","spring-projects-issues","2017-03-21T10:47:02Z","2017-05-08T08:41:48Z"
"","19918","Return 5xx/4xx status code and print the reason in logs for CodecException [SPR-15355]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15355](https://jira.spring.io/browse/SPR-15355?redirect=false)** and commented  `CodecException` handling should be handled in a consistent way between functional and annotation-based APIs. They should return by default 4xx status code for decoding error and 5xx for encoding error + should print the error reason in logs without the full stack trace. That would improve significantly the development experience.  ---  **Issue Links:** - #19492 Support for Jackson 2.9 (_**""depends on""**_) - #20075 Revisit CodecException vs ResponseStatusException in DecoderHttpMessageReader  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d098a4b96b0251065ea606450e5de95c9827fd19","closed","type: enhancement,","spring-projects-issues","2017-03-17T15:06:21Z","2019-01-11T15:03:46Z"
"","19907","Support ResponseStatusException in WebFlux functional [SPR-15344]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15344](https://jira.spring.io/browse/SPR-15344?redirect=false)** and commented  While experimenting with MiXiT, I faced to a pain point : each time I have a malformed template (for example missing `messages.properties` entry), I have a huge stacktrace (see attached file).  I think it would be nice for Spring WebFlux view implementers and users to have a single way to deal with such ""expected errors"" without generating such stack trace. After discussing with the team, it seems supporting  `ResponseStatusException` in the functional Web API could be what we need.  I think it could fit this need, the main point to check is if it could allow to print the message in logs (for such expected errors I would expect having the exception message in the log without teh whole stack trace).   ---  **Attachments:** - [stack-error-webflux.txt](https://jira.spring.io/secure/attachment/23809/stack-error-webflux.txt) (_44.56 kB_)","closed","type: enhancement,","spring-projects-issues","2017-03-13T14:39:47Z","2017-05-08T08:41:46Z"
"","19881","Upgrade to Reactor Core 3.1 Milestone [SPR-15318]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15318](https://jira.spring.io/browse/SPR-15318?redirect=false)** and commented  Reactor Core 3.1 will remove deprecated methods and introduce a few API changes identified post 3.0 release, so this is critical for Spring Framework 5.0 RC1 and GA to use it in order to avoid breaking user projects later.  After discussing with Stéphane Maldini, a Reactor Core 3.1 Milestone or RC should be available in time for or RC1 release. The target is to use Reactor Core 3.1 GA in Spring Framework 5.0 GA.  ---  **Issue Links:** - #20108 Upgrade to Reactor 3.1 RC1 (including Reactive Streams 1.0.1) - #20056 Upgrade to RxJava 1.3 & 2.1 - #20205 Upgrade to Reactor Bismuth M2 - #20932 Upgrade to Reactor Core 3.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/005e85b0f55c8a073e6180739232f4a124d013bf, https://github.com/spring-projects/spring-framework/commit/e3fae2716e9d70903e9790efa0bdc312fda39615, https://github.com/spring-projects/spring-framework/commit/4d9144132e25212011ba5a683d6f256398854a4c, https://github.com/spring-projects/spring-framework/commit/dce72e0ad014a774b47f0fd2f134d47f813121da","closed","type: task,","spring-projects-issues","2017-03-06T15:17:57Z","2019-01-11T15:09:20Z"
"","19866","Upgrade to Kotlin 1.1 release [SPR-15301]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15301](https://jira.spring.io/browse/SPR-15301?redirect=false)** and commented   ---  **Reference URL:** https://blog.jetbrains.com/kotlin/2017/03/kotlin-1-1/","closed","type: task,","spring-projects-issues","2017-03-01T13:35:12Z","2017-05-08T08:41:46Z"
"","19859","Introduce ServerResponse Kotlin extensions [SPR-15293]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15293](https://jira.spring.io/browse/SPR-15293?redirect=false)** and commented  Provide a `ServerResponse.BodyBuilder.body(publisher: Publisher)` Kotlin extension using reified type parameters.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/40ae8d41a450b070b23651cf3f9758dd2005d722","closed","type: enhancement,","spring-projects-issues","2017-02-27T18:32:31Z","2017-05-08T08:41:48Z"
"","19858","Polish Kotlin routing DSL [SPR-15292]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15292](https://jira.spring.io/browse/SPR-15292?redirect=false)** and commented  Polish Kotlin routing DSL with: - `typealias` to replace types like `RouterDsl.() -> Unit` by `Routes` - `String.invoke()` as `path(""/foo"")` shortcut - `String.route()` as `pathPrefix(""/foo"").route()` shortcut - Avoid requiring `PathPredicates.*` import    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/710702acdc026b189e39f94055c99fdb36171f95","closed","type: enhancement,","spring-projects-issues","2017-02-27T18:12:11Z","2017-05-08T08:41:44Z"
"","19789","Support RSS in Spring WebFlux [SPR-15224]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15224](https://jira.spring.io/browse/SPR-15224?redirect=false)** and commented   --- No further details from [SPR-15224](https://jira.spring.io/browse/SPR-15224?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-02-05T21:29:25Z","2021-06-07T13:35:11Z"
"","19749","Generate Java 8 bytecode with Kotlin compiler [SPR-15183]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15183](https://jira.spring.io/browse/SPR-15183?redirect=false)** and commented  Kotlin 1.1 compiler supports generating Java 8 bytecode but generates by default Java 6 bytecode.  It can produces Java 8 bytecode with the following Gradle configuration:  ``` compileKotlin {      kotlinOptions.jvmTarget = ""1.8""  }  compileTestKotlin {      kotlinOptions.jvmTarget = ""1.8""  }  ```  It works flawlessly with Gradle but generate some errors in IDEA with default configuration. This should be fixed by [KT-15819](https://youtrack.jetbrains.com/issue/KT-15819#comment=27-1866739) so I prefer to wait a new Kotlin 1.1 build that fixes this issue before fixing this issue.  ---  **Issue Links:** - #19667 Upgrade to Kotlin 1.1-beta  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/692e432f0b154be0acfa287a1beeb4a68d6c93d6","closed","type: task,","spring-projects-issues","2017-01-24T14:48:53Z","2019-01-11T14:25:56Z"
"","19710","Functional Web API support for HTML form processing [SPR-15144]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15144](https://jira.spring.io/browse/SPR-15144?redirect=false)** and commented  The Functional Web API should expose a way to process and retrieve form parameters sent via `POST` requests with `application/x-www-form-urlencoded` content type (and `multipart/form-data` when #19114 will be fixed). `application/x-www-form-urlencoded` is probably a good first step for the scope of this issue, I may create another issue for `multipart/form-data` support.  ---  **Issue Links:** - #19108 Reactive HttpMessageReader/Writer for ""x-www-form-url-encoded"" data (_**""depends on""**_) - #19114 Reactive multipart request support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/13a7563ddde4e66fcd5ebda84b9b08ccf552e017","closed","type: enhancement,","spring-projects-issues","2017-01-16T13:01:16Z","2019-01-11T15:31:39Z"
"","19695","Add bodyToMono() and bodyToFlux() Kotlin extensions [SPR-15128]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15128](https://jira.spring.io/browse/SPR-15128?redirect=false)** and commented  ---  **Issue Links:** - #19620 Kotlin extension for Web function API","closed","type: enhancement,","spring-projects-issues","2017-01-11T07:57:25Z","2019-01-11T15:34:10Z"
"","19694","Remove object wrapper in Kotlin extensions [SPR-15127]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15127](https://jira.spring.io/browse/SPR-15127?redirect=false)** and commented  After reviewing Spring Kotlin support with Ilya Ryzhenkov (Kotlin team), it appears that the `object` wrapper are probably not required since overload resolution should pick the best possible compatible method, are quite unusual way to provide extensions and removing them would solve [KT-15440](https://youtrack.jetbrains.com/issue/KT-15440).   ---  **Affects:** 5.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0a988fd2b1c7e2d98e87df3842c4fc053acac9a5","closed","type: task,","spring-projects-issues","2017-01-11T07:02:13Z","2017-02-23T09:29:10Z"
"","19693","Support Gradle-style API for Kotlin bean registration [SPR-15126]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15126](https://jira.spring.io/browse/SPR-15126?redirect=false)** and commented  Based on a feedback from Ilya Ryzhenkov (Kotlin team), it is possible to support this kind of Gradle-style Kotlin API for bean registration:  ``` val context = GenericApplicationContext { 	registerBean() 	registerBean { Bar(it.getBean()) } } ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8f14e29067d51b80aa4cc9562b41b7b1260e4ac8, https://github.com/spring-projects/spring-framework/commit/f8461d856ae6f9e47736a5d8b93c15472f8433b7","closed","type: enhancement,","spring-projects-issues","2017-01-10T20:39:27Z","2017-02-23T09:29:11Z"
"","19685","Avoid the need to specify Supplier in Kotlin bean registration API [SPR-15118]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15118](https://jira.spring.io/browse/SPR-15118?redirect=false)** and commented  Based on an idea from Mario Arias, we can avoid requiring specifying explicitly `Supplier` lambda type in Kotlin API by declaring the supplier parameter as `crossinline supplier: () -> T` instead of `supplier: Supplier`.   ---  **Affects:** 5.0 M4","closed","type: enhancement,","spring-projects-issues","2017-01-09T19:10:27Z","2017-02-23T09:29:12Z"
"","19682","Support ScriptEngine#eval(String, Bindings) in ScriptTemplateView [SPR-15115]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15115](https://jira.spring.io/browse/SPR-15115?redirect=false)** and commented  Supporting `ScriptEngine#eval(String, Bindings)` when no render function is specified would allow to support use cases where script templates are simply evaluating a script expression with an even more simplified configuration.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d5f9ad03a78ded2da778ae9d63b29e1a7bdd6359","closed","type: enhancement,","spring-projects-issues","2017-01-09T14:48:00Z","2017-07-24T07:51:15Z"
"","19679","Fix error handling in Jackson2JsonDecoder [SPR-15112]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15112](https://jira.spring.io/browse/SPR-15112?redirect=false)** and commented  As found by Simon Baslé when discussing [this reactor-test potential issue](https://github.com/reactor/reactor-addons/issues/64), `Jackson2JsonDecoder` wrongly return a `Flux.error()` in a `map()` operation. It should throw the exception instead.   ---  **Affects:** 5.0 M4  **Reference URL:** https://github.com/reactor/reactor-addons/issues/64  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aa43472f2ea1f8aaffa65be917bc24603dc4d56c","closed","type: bug,","spring-projects-issues","2017-01-09T10:49:46Z","2017-02-23T09:29:12Z"
"","19672","Add support for JSON streaming with specified separator in JSON decoder [SPR-15105]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15105](https://jira.spring.io/browse/SPR-15105?redirect=false)** and commented  `JsonObjectDecoder` should support decoding JSON streams separated by a separator specified as a decoding hint.  ---  **Issue Links:** - #19671 Add support for JSON Streaming","closed","type: enhancement,","spring-projects-issues","2017-01-06T14:41:41Z","2019-01-11T15:36:05Z"
"","19671","Add support for JSON Streaming [SPR-15104]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15104](https://jira.spring.io/browse/SPR-15104?redirect=false)** and commented  Currently `Jackson2JsonEncoder` supports only encoding `Flux` as JSON array. This could stay the default, but we also need to support encoding as JSON  stream with specified `String` separator.  Implementing that as a hint would be flexible and make sense IMO.  ---  **Issue Links:** - #19670 Provide a way to enable streaming mode via annotations (and eventually app config) - #19672 Add support for JSON streaming with specified separator in JSON decoder - #19662 Possible performance issue in the generation of JSON in Spring Web Reactive  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6b9b0230c4de394348c42b6f5964fc66eb659dd3, https://github.com/spring-projects/spring-framework/commit/ef550c43d61dfd506a15034756e68e0476fa4655  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2017-01-06T14:38:35Z","2019-01-11T15:36:21Z"
"","19670","Provide a way to enable streaming mode via annotations (and eventually app config) [SPR-15103]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15103](https://jira.spring.io/browse/SPR-15103?redirect=false)** and commented  Like implemented on the functional framework via #19597, we should support a way to set hints potentially via a dedicated annotation (currently only the special case of `@JsonView` is supported). That could be used to customize the flushing strategy (#19547).  ---  **Issue Links:** - #19547 Progressive HTML rendering support - #19662 Possible performance issue in the generation of JSON in Spring Web Reactive - #19597 Provide a way to specify hints in the functional web API - #19671 Add support for JSON Streaming","closed","type: enhancement,","spring-projects-issues","2017-01-06T14:23:40Z","2019-01-11T15:36:17Z"
"","19667","Upgrade to Kotlin 1.1-beta [SPR-15100]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15100](https://jira.spring.io/browse/SPR-15100?redirect=false)** and commented  We are currently using  Kotlin `1.0.6`, but it does not support Kotlin Script, producing Java 8 bytecode and other improvements provided by Kotlin 1.1.  But Kotlin `1.1-M04` has 2 blocking points that prevent us to upgrade: - It can't produce Kotlin 1.0 compatible bytecode even when specifying `apiVersion = 1.0` and `languageVersion = 1.0` - Kotlin IDEA plugin `1.1-M04` does not work in a reliable way with `kotlin-spring` plugin  Kotlin `1.1-beta` should be released in the coming weeks, and will allow us to upgrade to this version in order to re-enable Kotlin Script template rendering.  ---  **Issue Links:** - #19749 Generate Java 8 bytecode with Kotlin compiler  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/35d5dca571ead26abf5947b0161caede764d316a","closed","type: enhancement,","spring-projects-issues","2017-01-06T09:34:44Z","2019-01-11T15:36:02Z"
"","19631","Provide a Kotlin DSL for the functional Web API [SPR-15065]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15065](https://jira.spring.io/browse/SPR-15065?redirect=false)** and commented  It would be nice to find a way to avoid specifying explicitly `HandlerFunction` lambda type for Kotlin user since they won't be able to fix this for Kotlin 1.1 (see this explanation on [KT-14923](https://youtrack.jetbrains.com/issue/KT-14923)).  Possible solutions are : * Provide Kotlin specific API for the router * Provide Kotlin extensions for `RouterFunction` and `RouterFunctions` * Modify Java API signature to avoid this issue (unlikely but this is a possible solution)  ---  **Issue Links:** - #19521 Improve nested routes API","closed","type: enhancement,","spring-projects-issues","2016-12-28T18:31:03Z","2019-01-11T15:28:19Z"
"","19630","Support i18n and nested template loading in ScriptTemplateView render function [SPR-15064]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15064](https://jira.spring.io/browse/SPR-15064?redirect=false)** and commented  The render function called by `ScriptTemplateView` has currently 3 parameters provided: - `String template`: the content of the template resource - `Map`: the model to use to render the view - `String url`: the url of the 2 view  To achieve i18n support for messages and nested template loading, we need to provide these additional informations: - a `ResourceBundleMessageSource` instance (or the `ApplicationContext` that allows to retrieve it) - the view `Locale` - a `Function` that allows the render function to call `ScriptTemplateView#getTemplate(String)`  I see mainly 2 ways to support that:  1) We could be possible leverage `setExposeContextBeansAsAttributes()` or `setExposedContextBeanNames()` to access to context beans and expose them via model attributes.  2) We could transform the 3rd parameter passed to the script function (currently `String url`) to `RenderingContext` that would contains `String url`, `Locale locale`, `ResourceBundleMessageSource messageSource` and `Function templateLoader` properties. This would be a breaking change for people using `url` but `ScriptTemplateView` is a rather feature, and `url` is not widely used, so I consider this as an option in order to be consistent and provide such flexible mechanism for further needs + it provides these properties in a type-safe way which would be valuable for Kotlin JSR-223 support.  ---  **Issue Links:** - #19625 Add Kotlin ScriptTemplateView tests (_**""depends on""**_) - #18033 Expose view url to render function in ScriptTemplateView - #20992 Update and improve script templating documentation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ff257c0ea00c02e453c8390c641835ebe778955, https://github.com/spring-projects/spring-framework/commit/98642c7e29eb9596533341411b311c83c6aa5aa7, https://github.com/spring-projects/spring-framework/commit/2d95199466c52e26ff4c5c3e327e8ae6114e807f, https://github.com/spring-projects/spring-framework/commit/2a5d1b086f514fe4ddf0d9e8a42d09416f93d36a","closed","type: enhancement,","spring-projects-issues","2016-12-28T18:18:38Z","2019-01-11T15:28:10Z"
"","19629","Add a Reactive ScriptTemplateView [SPR-15063]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15063](https://jira.spring.io/browse/SPR-15063?redirect=false)** and commented  JSR 223 support would make sense for Reactive application. See https://github.com/sdeleuze/kotlin-script-templating for an interesting use case with Kotlin.  One open question to be solved is how can we deal with `ScriptEngine` that are not thread safe. In Spring MVC we use a `sharedEngine` boolean property + `ThreadLocal`, in reactive world we will need to find another solution if we want to support this, like a `ScriptEngine` pool or just getting a new `ScriptEngine` for each request.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b503e4679ce37ac099be668cc1e33705da3fead1","closed","type: enhancement,","spring-projects-issues","2016-12-28T18:05:02Z","2017-02-23T09:29:13Z"
"","19625","Add Kotlin ScriptTemplateView tests [SPR-15059]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15059](https://jira.spring.io/browse/SPR-15059?redirect=false)** and commented  As demonstrated on https://github.com/sdeleuze/kotlin-script-templating/, Kotlin `1-1-M04` supports JSR 223 and is usable with our `ScriptTemplateView` since all the blocking issues reported in Kotlin `1.1-M02` have been fixed (see [KT-14713](https://youtrack.jetbrains.com/issue/KT-14713), [KT-14707](https://youtrack.jetbrains.com/issue/KT-14707) and [KT-14706](https://youtrack.jetbrains.com/issue/KT-14706)).  Since Kotlin 1.1 is able to generate Kotlin 1.0 bytecode, we should add Kotlin + `ScriptTemplateView` tests like there are currently for Jython, JRuby, Nashorn, etc.  ---  **Issue Links:** - #19630 Support i18n and nested template loading in ScriptTemplateView render function (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/badde3a479a53e1dd0777dd1bd5b55cb1021cf9e, https://github.com/spring-projects/spring-framework/commit/ef4340063e1440d1679acbe8c35488fb8eebd15d","closed","type: task,","spring-projects-issues","2016-12-27T13:21:17Z","2019-01-11T15:15:50Z"
"","19622","Kotlin extension for RestTemplate [SPR-15056]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15056](https://jira.spring.io/browse/SPR-15056?redirect=false)** and commented  Initially contributed by [Jon Schneider](https://github.com/jkschneider) in [spring-kotlin](https://github.com/sdeleuze/spring-kotlin/) side project, `RestTemplate` Kotlin extension should be integrated directly in Spring Framework 5 as done for Functional bean and web API.   ---  **Reference URL:** https://github.com/sdeleuze/spring-kotlin/blob/master/src/main/kotlin/org/springframework/kotlin/mvc.kt  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/546687d5e44c6771a95f5334dbcbf4b37a6cea33","closed","type: enhancement,","spring-projects-issues","2016-12-27T08:02:11Z","2016-12-30T13:33:16Z"
"","19620","Kotlin extension for Web function API [SPR-15054]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15054](https://jira.spring.io/browse/SPR-15054?redirect=false)** and commented  Like what has been done on #19614 for bean registration and retrieval, it would be useful to provide Kotlin extension for client and server functional web API.  ---  **Issue Links:** - #19614 Kotlin extension for GenericApplicationContext with registerBean(KClass) variants - #19695 Add bodyToMono() and bodyToFlux() Kotlin extensions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3626a1c7f99a8026337a29bd8a958264e6bf13c0","closed","type: enhancement,","spring-projects-issues","2016-12-26T16:42:37Z","2019-01-11T15:15:27Z"
"","19865","Session-scoped bean should have its state propagated to the HttpSession at the end of its initial request (even without further access) [SPR-15300]","**[Szymon Dembek](https://jira.spring.io/secure/ViewProfile.jspa?name=demboos)** opened **[SPR-15300](https://jira.spring.io/browse/SPR-15300?redirect=false)** and commented  The state of a session-scoped bean is not properly preserved between the requests.  If I want a session-scoped bean to be injected, the AOP proxy does it's magic by creating the bean (if it does not yet exist in the session) and stores it on the session after creation:  ```java AbstractRequestAttributesScope.get(...):  Object scopedObject = attributes.getAttribute(name, getScope()); if (scopedObject == null) {     scopedObject = objectFactory.getObject();     attributes.setAttribute(name, scopedObject, getScope()); } ```  Now this is what happens inside the request attributes:  ```java ServletRequestAttributes.setAttribute(...)  HttpSession session = getSession(true); this.sessionAttributesToUpdate.remove(name); session.setAttribute(name, value); ```  When the request is completed, we have RequestContextListener calling the attributes.requestCompleted(), but because the session attribute name is not on the sessionAttributesToUpdate list, the bean is not put on the session after the request is handled (so after any potential changes to the bean state happens).  Added to that, some Http session implementations are optimised in a way, that they only update the session on calls to HttpSession.setAttribute method.  As an example: spring-session project is doing this optimisation when using an external cache storages (redis, jdbc, hazelcast) - possibly due to high cost of serialization. This way they only save the session object into the storage if it was updated since the last save.  And if you configure the session storage to flush the changes on every call to HttpSession.setAttribute, the session object is not marked as dirty even after the request has potentially updated a session-scoped bean's state.  Shouldn't the session-scoped bean be force-saved to the session after the request completed as well ?    ---  **Affects:** 4.2.9, 4.3.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f30c49816281c62e63433300309d85e0a0786fe9, https://github.com/spring-projects/spring-framework/commit/a78066830b464c8ed4fda301e936b67ec2a562d7","closed","type: enhancement,","spring-projects-issues","2017-03-01T08:15:57Z","2017-04-18T15:43:21Z"
"","20126","Add CORS support for functional style routes for WebFlux [SPR-15567]","**[Sumanth Chinthagunta](https://jira.spring.io/secure/ViewProfile.jspa?name=xmlking@outlook.com)** opened **[SPR-15567](https://jira.spring.io/browse/SPR-15567?redirect=false)** and commented  We have annotations support for adding CORS to routes but I cannot find support for adding CORS for functional style routes when using WebFlux. This capability is critical for consuming REST , SSE APIs from external SPA apps build with Angular or React.  ---  **Affects:** 5.0 RC1  **Issue Links:** - #20261 CORS Options request forbidden with Webflux  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1e04cdfa7e3ac74181efe57e0674abe4690c46a1","closed","type: enhancement,","spring-projects-issues","2017-05-19T17:49:11Z","2019-01-11T17:06:39Z"
"","20348","Clarify usage of the components indexer [SPR-15793]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15793](https://jira.spring.io/browse/SPR-15793?redirect=false)** and commented  The new components indexer introduced in Spring Framework 5 is an alternative to classpath scanning for large projects and our documentation does not clearly state it so.  There's nothing wrong adding the indexer in a small project but the gain is almost invisible so we should improve our doc to provide a bit more guidance.  See  also [this thread](https://github.com/spring-projects/spring-boot/issues/9780#issuecomment-316290027)   ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/19c88f2cfaeb519531e80797c53637c5efdc1e1f","closed","type: task,","spring-projects-issues","2017-07-19T07:22:53Z","2017-07-24T07:51:15Z"
"","20268","Get a description of all registered routes in a RouterFunction [SPR-15711]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15711](https://jira.spring.io/browse/SPR-15711?redirect=false)** and commented  Spring Boot has a `/mappings` endpoint that's quite useful to list the MVC mappings and some interesting characteristics. We build this list by looking at the available `AbstractHandlerMethodMapping`.  It would be nice if a router that was defined programmatically exposed a similar model.  ---  **Affects:** 5.0 RC2  **Issue Links:** - #20487 Log message for a composed router function contains no information about the mappings or their handlers (_**""is depended on by""**_) - #20487 Log message for a composed router function contains no information about the mappings or their handlers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2841ef5d05a1070e517c5c2b03f6e9ee60983b0f  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2017-06-27T15:09:59Z","2019-01-11T16:12:00Z"
"","20252","AbstractValueAdaptingCache does not allow for flexible null value serialization [SPR-15693]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15693](https://jira.spring.io/browse/SPR-15693?redirect=false)** and commented  `AbstractAdaptingValueCache` has been refactored to offer a `NullValue` holder that would resolve to a unique instance when deserialized (see #18129).  This infrastructure cannot be used if the cache manager implementation uses a custom serialization mechanism (for instance if the data is serialized in text using json). The redis cache manager is affected by this issue.  A simple/naive fix would be to make that instance public so that they can return what the base class is expecting.  ---  **Affects:** 4.3.9  **Issue Links:** - #18129 JCacheCache doesn't recognize null values in other JVMs - #19739 AbstractValueAdaptingCache#toStoreValue should throw an exception if the value is null and allowNulls is false  **Referenced from:** commits https://github.com/spring-projects/spring-data-redis/commit/c998abf734973430a9db00272b40a6b607a32e5c","closed","type: enhancement,","spring-projects-issues","2017-06-23T09:33:42Z","2019-01-11T16:02:20Z"
"","20083","ResponseStatusException should allow to construct an instance without a reason [SPR-15524]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15524](https://jira.spring.io/browse/SPR-15524?redirect=false)** and commented  Currently it is not possible to create a `ResponseStatusException` without providing a `String reason`. As we're passing an `HttpStatus` can we reuse that as a source of the reason?   ---  **Affects:** 5.0 M5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/25aef4d3ccd050c2b7d177f6156d74d2db1a9e43","closed","type: bug,","spring-projects-issues","2017-05-06T08:51:43Z","2017-05-08T08:41:45Z"
"","20039","Add getTargetCache to TransactionAwareCacheDecorator [SPR-15479]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15479](https://jira.spring.io/browse/SPR-15479?redirect=false)** and commented  See https://github.com/spring-projects/spring-boot/issues/8984 for a concrete use case.   ---  **Affects:** 4.3.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/547c4f69a4c4041dd28163f8d847dec0487df6b9, https://github.com/spring-projects/spring-framework/commit/226cddadef6e72e51ba118bdad2b382dccda1129","closed","type: enhancement,","spring-projects-issues","2017-04-25T13:48:26Z","2017-05-08T08:41:46Z"
"","20003","AbstractRecursiveAnnotationVisitor can't access a package protected enum value [SPR-15442]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15442](https://jira.spring.io/browse/SPR-15442?redirect=false)** and commented  This issue popped up all the sudden on boot master:  ``` java.lang.IllegalAccessException: Class org.springframework.core.type.classreading.AbstractRecursiveAnnotationVisitor can not access a member of class org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests$EnumItem with modifiers ""public static final"" 	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102) ~[na:1.8.0_121] 	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296) ~[na:1.8.0_121] 	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288) ~[na:1.8.0_121] 	at java.lang.reflect.Field.get(Field.java:390) ~[na:1.8.0_121] 	at org.springframework.core.type.classreading.AbstractRecursiveAnnotationVisitor.getEnumValue(AbstractRecursiveAnnotationVisitor.java:83) [spring-core-5.0.0.BUILD-20170411.214407-103.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.core.type.classreading.AbstractRecursiveAnnotationVisitor.visitEnum(AbstractRecursiveAnnotationVisitor.java:73) [spring-core-5.0.0.BUILD-20170411.214407-103.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.asm.ClassReader.readAnnotationValue(ClassReader.java:1936) [spring-core-5.0.0.BUILD-20170411.214407-103.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.asm.ClassReader.readAnnotationValues(ClassReader.java:1861) [spring-core-5.0.0.BUILD-20170411.214407-103.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.asm.ClassReader.accept(ClassReader.java:657) [spring-core-5.0.0.BUILD-20170411.214407-103.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.asm.ClassReader.accept(ClassReader.java:523) [spring-core-5.0.0.BUILD-20170411.214407-103.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.core.type.classreading.SimpleMetadataReader.(SimpleMetadataReader.java:64) [spring-core-5.0.0.BUILD-20170411.214407-103.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:98) [spring-core-5.0.0.BUILD-20170411.214407-103.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:121) [spring-core-5.0.0.BUILD-20170411.214407-103.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.scanCandidateComponents(ClassPathScanningCandidateComponentProvider.java:411) [spring-context-5.0.0.BUILD-20170411.214407-103.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:295) [spring-context-5.0.0.BUILD-20170411.214407-103.jar:5.0.0.BUILD-SNAPSHOT] ```    ---  **Affects:** 4.3.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4838f06d5d06c2e2cf7a437de4eae78a4980f347, https://github.com/spring-projects/spring-framework/commit/40232f4e22e19ed590f44852b121ba78b959b87e, https://github.com/spring-projects/spring-framework/commit/093e573aceda50f4e94d35ceec465a3532094f22","closed","in: core,","spring-projects-issues","2017-04-12T13:12:57Z","2017-04-18T15:43:21Z"
"","19852","Support of MockRestServiceServer for WebClient [SPR-15286]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15286](https://jira.spring.io/browse/SPR-15286?redirect=false)** and commented  Spring Boot has a `@RestClientTest` for pure client-side tests. We currently auto-configure `MockRestServiceServer` and bind any `RestTemplate` created by the `RestTemplateBuilder` to it.  This would be pretty awesome if we could port that feature to `WebClient` transparently if webflux is on the classpath. That would require that `MockRestServiceServer` can be configured with a `WebClient` in addition to a `RestTemplate`  ---  **Sub-tasks:** - #19295 Document how to test WebClient code with a mock server  15 votes, 24 watchers","closed","has: votes-jira,","spring-projects-issues","2017-02-24T17:00:36Z","2019-11-15T13:04:42Z"
"","19851","Consider removing servlet requirement on WebApplicationContext [SPR-15285]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15285](https://jira.spring.io/browse/SPR-15285?redirect=false)** and commented  The new choices in the web space offered by spring framework 5 currently brings an inconsistency that has some side effect in Spring Boot.  `WebApplicationContext` is servlet specific and there is not marker for a context that is reactive. In Spring Boot, we uses the context determines if an actual server will start as part of the lifecycle or if the web application is meant to be deployed on a server (or mocked).  So far we've used `GenericWebApplicationContext` and `EmbeddedWebApplicationContext` to determine these cases.  The introduction of reactive has brought a `ReactiveWebApplicationContext` that currently does both (and that's a problem we need to fix) but, sadly, `ReactiveWebApplicationContext` does not implement `WebApplicationContext` (for obvious reasons).  The purpose of this issue is to discuss if we want to fix this inconsistency: surely a reactive wevb application context is a web application context and many infrastructure can be shared so being able to have a common root sounds like a good idea to me.   ---  **Affects:** 5.0 M5","closed","type: enhancement,","spring-projects-issues","2017-02-24T16:56:05Z","2017-02-28T10:14:50Z"
"","19849","Consumer for `WebTestClient.baseURI` [SPR-15283]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15283](https://jira.spring.io/browse/SPR-15283?redirect=false)** and commented  I am integrating `WebTestClient` for integration tests scenario and being able to lazily resolve the baseURI to use would help me a lot. When a random port is chosen, it is published very late in the lifecycle of the application context so right now [it works](https://github.com/spring-projects/spring-boot/commit/12397edbd45b23b1c65da27d5f61ad45e8868ca3#diff-cc8487d131436de50665b2c6f82e2829R118) because I rely on the fact that the `WebTestClient` is going to be injected in a test (and that happens after).  But that's not very elegant and if I could give a consumer that would be called on first request, that would be much more elegant and robust. Or any way for me to lazily set the base URI.    ---  **Affects:** 5.0 M5","closed","in: web,","spring-projects-issues","2017-02-24T13:07:19Z","2020-04-10T15:14:28Z"
"","19836","Reliably detect @Cacheable declarations on interface methods [SPR-15271]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15271](https://jira.spring.io/browse/SPR-15271?redirect=false)** and commented  This was originally raised [in this spring boot issue](https://github.com/spring-projects/spring-boot/issues/8331). Debugging the code, it looks like `AnnotatedElementUtils#getAllMergedAnnotations` doesn't find the requested annotation when it's defined in a interface method.  I've added a unit test that fails (ignored on master) though I am not 100% sure that it actually reproduces the problem.  There is a sample that definitely does [here](https://github.com/snicoll-scratches/test-cache-interface)  ---  **Affects:** 4.3.4  **Issue Links:** - #19367 Cache annotation lookup in 4.3 finds more annotations than in 4.2 - #18915 Caching annotation on interface are ignored when cglib proxies are used - #18894 CGLIB proxies should still consider `@Transactional` annotations on interface methods  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2017-02-20T10:32:35Z","2019-01-13T05:17:06Z"
"","19820","Database.SQL_SERVER should set more recent Hibernate dialect with Spring 4.3.x [SPR-15255]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15255](https://jira.spring.io/browse/SPR-15255?redirect=false)** and commented  See [this spring boot issue](https://github.com/spring-projects/spring-boot/issues/8253)  When the `Database` is set to `SQL_SERVER`, `HibernateJpaVendorAdapter#determineDatabaseDialectClass` sets the dialect to `org.hibernate.dialect.SQLServerDialect`. However there are multiple flavours of that dialect:  ``` Microsoft SQL Server 2000	org.hibernate.dialect.SQLServerDialect Microsoft SQL Server 2005	org.hibernate.dialect.SQLServer2005Dialect Microsoft SQL Server 2008	org.hibernate.dialect.SQLServer2008Dialect ```  Ironically enough, if we don't see the dialect, Hibernate manages to detect the right one (in this particular case at least).  Should we consider stopping providing a dialect for SQL Server since we can't know which database is in use?  ---  **Affects:** 4.3.6  **Issue Links:** - #19116 Default connection release mode inconsistent with Hibernate 5.1.1 - #19774 Support for read-only transactions with Oracle 12c JDBC driver - #18400 Remove native support for Hibernate 3.6 and 4.x  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ed4884eaa99f56e3e5602aad57eb35af2468af4","closed","type: enhancement,","spring-projects-issues","2017-02-14T09:27:54Z","2019-01-11T14:29:54Z"
"","19761","Revisit Assert to avoid single-arg assert methods (with refined messages) [SPR-15196]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15196](https://jira.spring.io/browse/SPR-15196?redirect=false)** and commented  See https://github.com/spring-projects/spring-framework/pull/1307  ---  **Issue Links:** - [DATACASS-394](https://jira.spring.io/browse/DATACASS-394) Fix NoSuchMethodError: org.springframework.util.Assert.notNull(Ljava/lang/Object;)V - [DATACMNS-985](https://jira.spring.io/browse/DATACMNS-985) Remove references to single-argument assertion methods of Spring - [DATACOUCH-274](https://jira.spring.io/browse/DATACOUCH-274) Remove references to single-argument assertion methods of Spring - [DATAES-329](https://jira.spring.io/browse/DATAES-329) Remove references to single-argument assertion methods of Spring - [DATAGRAPH-966](https://jira.spring.io/browse/DATAGRAPH-966) Remove references to single-argument assertion methods of Spring. - [DATAJPA-1054](https://jira.spring.io/browse/DATAJPA-1054) Remove references to single-argument assertion methods of Spring - [DATAMONGO-1602](https://jira.spring.io/browse/DATAMONGO-1602) Remove references to single-argument assertion methods of Spring - [DATAREST-992](https://jira.spring.io/browse/DATAREST-992) Remove references to single-argument assertion methods of Spring - [DATASOLR-361](https://jira.spring.io/browse/DATASOLR-361) Remove references to single-argument assertion methods. - #19020 Introduce Supplier message support in org.springframework.util.Assert - [DATACASS-393](https://jira.spring.io/browse/DATACASS-393) Remove references to Assert single-arg methods - [AMQP-705](https://jira.spring.io/browse/AMQP-705) NoSuchMethodError: Assert.notNull(Object) - [DATAREDIS-599](https://jira.spring.io/browse/DATAREDIS-599) Remove references to single-argument assertion methods of Spring. - [INT-4221](https://jira.spring.io/browse/INT-4221) Spring Framework doesn't suppport single-arg methods in Assert any more  1 votes, 7 watchers","closed","in: core,","spring-projects-issues","2017-01-27T13:10:48Z","2019-01-11T14:25:34Z"
"","19754","If backing Cache is down @CacheResult does not seamlessly call method (in contrast to @Cacheable) [SPR-15188]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15188](https://jira.spring.io/browse/SPR-15188?redirect=false)** and commented  See https://github.com/spring-projects/spring-framework/pull/1292   ---  **Affects:** 4.3.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3476d10efad494094829ac28e3bee06c074fc57a, https://github.com/spring-projects/spring-framework/commit/1fcb2608fbd298b176658f09fc38f5e802e3fa8f, https://github.com/spring-projects/spring-framework/commit/908261b136a78a08a9336bade052e90431c4021a, https://github.com/spring-projects/spring-framework/commit/15b174a52248606c82ab3e07738725725af8bf17","closed","in: core,","spring-projects-issues","2017-01-25T14:55:16Z","2017-02-23T09:29:12Z"
"","19739","AbstractValueAdaptingCache#toStoreValue should throw an exception if the value is null and allowNulls is false [SPR-15173]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15173](https://jira.spring.io/browse/SPR-15173?redirect=false)** and commented  If a `Cache` is configured to not allow null values, `toStoreValue` can still return `null` instead of throwing an exception. This leads to a non informative exception message if the underlying cache provider tries to store the value down the road.  ---  **Affects:** 4.3.5  **Issue Links:** - [DATAREDIS-606](https://jira.spring.io/browse/DATAREDIS-606) RedisCache Tests in Spring Data Redis 2.0.x builds fail testing null values - #20252 AbstractValueAdaptingCache does not allow for flexible null value serialization","closed","type: enhancement,","spring-projects-issues","2017-01-20T16:52:58Z","2019-01-11T15:29:09Z"
"","19640","WebFilter ordering in WebHttpHandlerBuilder only works on instances [SPR-15074]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15074](https://jira.spring.io/browse/SPR-15074?redirect=false)** and commented  in `WebHttpHandlerBuilder`, `WebFilter` instances are ordered using `AnnotationAwareOrderComparator`. That will only work if the ordering is set on the class itself.  The following will be ignored  ```java @Configuration public class MyConfig {       @Bean @Order(42)    public WebFilter myFilter() { ... }  } ```  There is an ignored test in the `spring-boot-web-reactive` project [that reproduces this behaviour](https://github.com/bclozel/spring-boot-web-reactive/blob/a2d2724bb9a05dadb91ac95802faf99e4885a44c/spring-boot-autoconfigure-web-reactive/src/test/java/org/springframework/boot/autoconfigure/reactiveweb/ReactiveWebAutoConfigurationTests.java#L89-L107)  ---  **Affects:** 5.0 M4  **Issue Links:** - #19700 Assign a default order to ResponseStatusExceptionHandler bean created by WebReactiveConfigurationSupport (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b609f3a5469b269d3c1d4058529d2e675655a8bd","closed","type: enhancement,","spring-projects-issues","2016-12-30T09:25:21Z","2019-01-11T15:27:50Z"
"","19976","SimpleBrokerMessageHandler SubscriptionRegistry DestinationCache doesn't honour unique subscriptionId [SPR-15414]","**[Stephen Morrison](https://jira.spring.io/secure/ViewProfile.jspa?name=steviemo)** opened **[SPR-15414](https://jira.spring.io/browse/SPR-15414?redirect=false)** and commented  Hi folks, When creating a subscription to a destination/topic in Spring WebSockets & STOMP I'm seeing a discrepancy in how the SessionSubscriptionRegistry and DestinationCache (within DefaultSubscriptionRegistry.addSubscriptionInternal) stores the subscription when there are multiple subscriptions (with the same subscriptionId) to the same destination for the same session.  The SessionSubscriptionRegistry.addSubscription stores the subscriptions into a Set therefore not allowing duplicate subscriptions with same subscriptionId to be stored for each session. This is desired functionality as I would prefer the client can subscribe to a destination multiple times and not have to worry about subscribing and unsubscribing before re-subscribing to the same destination. My use case is a chat window modal window.  However the DestinationCache.updateAfterNewSubscription stores the subscriptions into a Map of LinkedMultiValueMap keyed off the destination then the sessionId. Therefore we get a bunch of entries with the same sessionId/subId pairing in the LinkedMultiValueMap. I think this is a bug as the SessionSubscriptionRegistry and DestinationCache should contain the same number of unique subscriptions per session and destination.  The result of this issue is we see multiple messages sent via SimpleBrokerMessageHandler.sendMessageToSubscribers as this looks into the cache which contains a bunch of duplicate subscriptionIds.  On another note is there any way I could customise the SubscriptionRegistry or the DestinationCache for the SimpleBrokerMessageHandler so I may provide my own implementation of these classes?  Thanks, Stephen  ---  **Affects:** 4.3.7  **Issue Links:** - #19848 Cannot receive message sometimes with SimpleBrokerMessageHandler","closed","in: web,","spring-projects-issues","2017-04-05T12:18:14Z","2019-01-12T16:45:12Z"
"","19751","More specific RequestMapping is suddenly ignored when adding produces attribute [SPR-15185]","**[Stephen Harper](https://jira.spring.io/secure/ViewProfile.jspa?name=steveyh25)** opened **[SPR-15185](https://jira.spring.io/browse/SPR-15185?redirect=false)** and commented  I have a controller with a single `@RequestMapping(value = ""test.htm"")`.  I then have 2 methods annotated as follows:  ```java @GetMapping(params = ""req=test"", produces = MediaType.APPLICATION_JSON_VALUE)  @GetMapping ```  If I remove the produces attribute from method 1, then it is the one that always gets hit with a request like:  http://x.x.x.x/test.htm?req=test  however, adding produces `MediaType.APPLICATION_JSON_VALUE`, method 2 is always the one being hit even with request headers as follows:  ``` Accept:application/json, text/javascript, */*; ```  If I change to produces to `MediaType = MediaType.ALL_VALUE`, then it starts working again...   ---  **Affects:** 4.3.4","closed","status: invalid,","spring-projects-issues","2017-01-24T18:40:10Z","2019-03-25T13:36:08Z"
"","19776","HTTP Response should not contain both Transfer-Encoding and Content-Length headers [SPR-15212]","**[Stefanie Loiseleur](https://jira.spring.io/secure/ViewProfile.jspa?name=sloiseleur)** opened **[SPR-15212](https://jira.spring.io/browse/SPR-15212?redirect=false)** and commented  Dear Spring Framework Team,  I'm currently building an MvcEndpoint in a SpringBoot Application to return the result of an Http GET call to another service. This service returns a JSON content, which has the header _Transfer-Encoding_ valued to ""chunked"".  My endpoint is then consumed by a Node.js server. This Node.js server returns a parse error with code _HPE_UNEXPECTED_CONTENT_LENGTH_ when consuming the endpoint, because the response headers contains both _Transfer-encoding:chunked_ and _Content-Length_ values.  This is considered has an error as specified in RFC 7230 section 3.3.3.3 :  ??If a message is received with both a Transfer-Encoding and a Content-Length header field, the Transfer-Encoding overrides the Content-Length.  Such a message might indicate an attempt to perform request smuggling (Section 9.5) or response splitting (Section 9.4) and ought to be handled as an error.  A sender MUST remove the received Content-Length field prior to forwarding such a message downstream.??  https://tools.ietf.org/html/rfc7230#section-3.3.3  This header is added in org.springframework.http.converter.AbstractHttpMessageConverter.addDefaultHeaders at line 259 for the 4.3.3.RELEASE I'm using.  I think the Content-Length header should be added only if the Transfer-Encoding header is not already set.  Do you think AbstractHttpMessageConverter should be updated ?  Thank you all.  ---  **Affects:** 4.3.3, 4.3.6  **Issue Links:** - #17408 Make `@ResponseBody` method return type available to message converters - #18147 resttemplate multipart post with InputStreamResource not working - #21523 Spring adding 'chunked' transfer encoding even if this header already exists - #19826 HEAD response has ""Content-Length: 0"" for `@RestController` `@GetMapping` methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9b3131ffbaa7a4bb312dfad66d685a348ee7e61f, https://github.com/spring-projects/spring-framework/commit/d5daa8e3a70ebbe2f8fb429460c818a9e3958184","closed","type: bug,","spring-projects-issues","2017-01-31T15:34:43Z","2019-01-13T05:17:21Z"
"","19760","AntPathMatcher does not match more specific path when there is an static path fragment given [SPR-15195]","**[Stefan Pfeiffer](https://jira.spring.io/secure/ViewProfile.jspa?name=spfeiffer)** opened **[SPR-15195](https://jira.spring.io/browse/SPR-15195?redirect=false)** and commented  In the attached demo project there are two SpringBootApplications and two corresponding tests. DemoApplication maps `/api/\*\*`, `/api/{var1}` and `/api/{var1}/\*\*` to corresponding methods, DemoApplicationTests tests that `/api` maps to the first method, `/api/a` maps to the second method and `/api/a/b` maps to the third method. But the last test fails, as this request gets mapped to the first one (`/api/\*\*`).  DemoApplication2 (Just comment out the `@SpringBootApplication` annotation on DemoApplication and comment it in at DemoApplication2) maps the same paths, but without the prefixing `/api`. DemoApplication2Tests test the new paths, and now, as expected, `/a/b` gets routed to the method that is mapped by `/{var1}/\*\*`, not to the method mapped by `/**`. The addition of the static `/api/` prefix changes the behaviour how those wildcard paths are matched to the mapped methods.  ---  **Affects:** 4.3.5, 4.3.6  **Attachments:** - [demo.zip](https://jira.spring.io/secure/attachment/23695/demo.zip) (_52.62 kB_)","closed","status: declined,","spring-projects-issues","2017-01-27T10:52:16Z","2019-01-13T20:30:50Z"
"","19654","DefaultRedirectStrategy.sendRedirect with relative URL and ForwardedHeaderFilter add contextpath to URL twice [SPR-15088]","**[Stefan Pfeiffer](https://jira.spring.io/secure/ViewProfile.jspa?name=spfeiffer)** opened **[SPR-15088](https://jira.spring.io/browse/SPR-15088?redirect=false)** and commented  Following up to #19587 discussion, the example given in the Reference URL (after accepting my PR) demonstrates a problem with `DefaultRedirectStrategy` in conjunction with `ForwardedHeaderFilter` when `DefaultRedirectStrategy.sendRedirect(request, response, url)` gets a relative URL in the `url` parameter. Both add the context path to the URL. `LoginUrlAuthenticationEntryPoint` feeds an absolute path to `DefaultRedirectStrategy.sendRedirect`, so the example has to be faked to return a relative URL. I found the problem when using a `SavedRequestAwareAuthenticationSuccessHandler`, when the `savedRequest` is `null`, which then returns a default redirect target of `/` which ends up in `DefaultRedirectStrategy.sendRedirect(…)`, triggering the double-context-path problem.  Nonetheless, `DefaultRedirectStrategy.sendRedirect(…)` should be able to handle relative URLs.  Setting `DefaultRedirectStrategy.setContextRelative(true)` should fix the problem, but i do not think that would be the right spot to prevent an interaction with the `ForwardedHeaderFilter` somewhere in the filter chain?  ---  **Affects:** 4.3.5  **Reference URL:** https://github.com/rwinch/spring-security-sample/tree/SPR-15020  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/df98d304fd0a8b7b5eb8ce133e0bcc303967f293, https://github.com/spring-projects/spring-framework/commit/523370b6f22463781668c0cffdbfd740f2c9a3d3  1 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2017-01-03T14:39:08Z","2019-01-11T15:27:39Z"
"","20223","Support CachingHttpAsyncClient from httpasyncclient-cache in HttpComponentsAsyncClientHttpRequestFactory [SPR-15664]","**[Stefan Fussenegger](https://jira.spring.io/secure/ViewProfile.jspa?name=sfussenegger)** opened **[SPR-15664](https://jira.spring.io/browse/SPR-15664?redirect=false)** and commented  `HttpComponentsAsyncClientHttpRequestFactory` expects a `CloseableHttpAsyncClient` but `CachingHttpAsyncClient` merely implements `HttpAsyncClient`.  ---  **Affects:** 4.3.9, 5.0 RC1  **Reference URL:** https://stackoverflow.com/questions/44539146  **Issue Links:** - #17423 HttpComponentsClientHttpRequestFactory should not depend on CloseableHttpClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7b5f96c804fcb34fe0157d6709ca6e25be91e5c3, https://github.com/spring-projects/spring-framework/commit/35efdf6b5130f23fb1547b73101b6c73fcf5d238","closed","type: enhancement,","spring-projects-issues","2017-06-14T07:30:54Z","2019-01-11T16:07:04Z"
"","19947","Support for @Order on nested configuration classes [SPR-15384]","**[Stefan Fussenegger](https://jira.spring.io/secure/ViewProfile.jspa?name=sfussenegger)** opened **[SPR-15384](https://jira.spring.io/browse/SPR-15384?redirect=false)** and commented  `ConfigurationClassParser` adds member classes in the order they are returned by the ASM-based `MetadataReader` and `ClassMetadata` while no further ordering seems to be applied.  Members are returned - at least in my setup - in alphabetical order by ASM. I couldn't find any documentation though that would suggest that this is the expected behavior. It simply seems to be the order in which ASM reads member names form the class file (so this might be even depending on the compiler?)  ---  **Affects:** 4.3.7  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/152  **Issue Links:** - #19074 Deterministic and JVM-independent `@Bean` registration order within Class-reflected configuration classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/4928f5275d6b328a492f008fea08f26ec5f6e224, https://github.com/spring-projects/spring-framework-issues/commit/d44710269dfde1601c12d280495bcb0c889bc79c","closed","type: enhancement,","spring-projects-issues","2017-03-27T10:27:08Z","2019-01-13T05:16:46Z"
"","19688","IsolationLevelDataSourceRouter does not work with DataSourceTransactionManager [SPR-15121]","**[springrain](https://jira.spring.io/secure/ViewProfile.jspa?name=springrain)** opened **[SPR-15121](https://jira.spring.io/browse/SPR-15121?redirect=false)** and commented  IsolationLevelDataSourceRouter.determineCurrentLookupKey returns the result was null, since AbstractPlatformTransactionManager.getTransaction (TransactionDefinition definition) before calling doBegin(Object transaction, TransactionDefinition definition), setCurrentTransactionIsolationLevel(Integer isolationLevel) is not set, but get a connection, it's bug.   ---  **Affects:** 4.3.4  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1291","open","in: data,","spring-projects-issues","2017-01-10T09:34:19Z","2021-11-22T12:37:18Z"
"","19764","Option to get the remote ip from a ServerWebExchange [SPR-15200]","**[Spencer Gibb](https://jira.spring.io/secure/ViewProfile.jspa?name=spencergibb)** opened **[SPR-15200](https://jira.spring.io/browse/SPR-15200?redirect=false)** and commented  See https://github.com/netty/netty/pull/5659/files for a workaround to switch to ipv4 and then use the the host and port from ServerHttpRequest#getUri().   ---  **Affects:** 5.0 M4","closed","type: enhancement,","spring-projects-issues","2017-01-28T03:16:20Z","2017-02-23T09:29:10Z"
"","19684","Can't autowire BiMap: container resolves non-matching Map of value beans [SPR-15117]","**[Sotirios Delimanolis](https://jira.spring.io/secure/ViewProfile.jspa?name=s_delima)** opened **[SPR-15117](https://jira.spring.io/browse/SPR-15117?redirect=false)** and commented  This issue follows the findings in [this Stack Overflow question](http://stackoverflow.com/questions/41549644/guava-immutablebimap-becomes-linkedhashmap-and-cause-spring-autowiring-mistake).  Consider the following  ``` @Component class TestControl {     @Autowired     public TestControl(BiMap parameter) { } }  @Configuration public class Example {     public static void main(String[] args) {         ApplicationContext context = new AnnotationConfigApplicationContext(Example.class, TestControl.class);     }     @Bean     BiMap someBiMap() {         return ImmutableBiMap.of(""some key"", someFoo());     }     @Bean     Integer someFoo() {         return 6;     } } ```  The expect behavior is for the bean named `someBiMap` to be injected in the `TestControl` constructor.  Instead, we get a `BeanInstantiationException`  ``` Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.example.TestControl]: Illegal arguments for constructor; nested exception is java.lang.IllegalArgumentException: argument type mismatch 	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:158) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:122) 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:267) 	... 13 more Caused by: java.lang.IllegalArgumentException: argument type mismatch 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) 	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:147) 	... 15 more ```  We can work around this by qualifying the parameter name  ``` public TestControl(@Qualifier(""someBiMap"") BiMap parameter) {} ```  or using using field injection with `@Resource` and the appropriate name, assuming the field is non-`final`.  However, the documentation states  > That said, as of 4.3, collection/map and array types can be matched through Spring’s `@Autowired` type matching algorithm as well, as long as the element type information is preserved in `@Bean` return type signatures or collection inheritance hierarchies.  which makes me think this is a bug. The resolution for a `Map` of bean names to beans seems to take precedence over the resolution by type.  ---  **Affects:** 4.3.2  **Issue Links:** - #18536 Optional autowire of Map accidentally falls back to unrelated Map - #12570 Allow for normal bean wiring semantics for types assignable to Map","closed","in: core,","spring-projects-issues","2017-01-09T16:54:01Z","2019-01-11T15:35:11Z"
"","20154","Spring MVC content negotiation default content type is not honored [SPR-15595]","**[Sofia](https://jira.spring.io/secure/ViewProfile.jspa?name=sofiaguyang)** opened **[SPR-15595](https://jira.spring.io/browse/SPR-15595?redirect=false)** and commented  According to documentation:  ``` /** 	 * Set the default content type to use when no content type is requested. 	 * By default this is not set. 	 * @see #defaultContentTypeStrategy 	 */ 	public ContentNegotiationConfigurer defaultContentType(MediaType defaultContentType) { 		this.factory.setDefaultContentType(defaultContentType); 		return this; 	} ```  So my expectation is if no Content-Type header is included in the request, the Content-Type will default to whatever was set as default with ContentNegotiationConfigurer.  However looking at how a controller method is selected, the `ConsumesRequestCondition` does not have a reference to `ContentNegotiationManager` to resolve the request's media type.  On the other hand `ProducesRequestCondition` has a reference to `ContentNegotiationManager` and is able to utilize it to make the decision.  Instead of inspecting the Content-Type header itself (which will be null if no `Content-Type` was provided explicitly in the request), shouldn't `ConsumersRequestCondition` have a reference to the `ContentNegotiationManager` to properly resolve the request's content type?   ---  **Affects:** 4.3.8","closed","status: declined,","spring-projects-issues","2017-05-30T07:46:55Z","2019-01-12T16:33:18Z"
"","20155","Error resolving template if URL has doubled slashes [SPR-15596]","**[Slava Semushin](https://jira.spring.io/secure/ViewProfile.jspa?name=slava.semushin)** opened **[SPR-15596](https://jira.spring.io/browse/SPR-15596?redirect=false)** and commented  When user is opening an URL with multiple slashes, it causes an exception because Thymeleaf tries to find a view that has leading slash. It works if URL contains a single slash.  Steps to reproduce: 1) git clone https://github.com/php-coder/mystamps.git 2) cd mystamps 3) (optionally) git reset --hard 646bb1670 4) mvn clean spring-boot:run 5) open http://127.0.0.1:8080 in a browser 6) login as user coder with password test 7) try to open http://localhost:8080//series/add  Expected behavior: A view has been resolved correctly and page is shown.  Actual behavior: An exception is shown in the console:  ``` 2017-05-30 11:49:26.531 ERROR 26527 --- [tp2036003995-15] org.thymeleaf.TemplateEngine             : [THYMELEAF][qtp2036003995-15] Exception processing template ""/series/add"": Error resolving template ""/series/add"", template might not exist or might not be accessible by any of the configured Template Resolvers  org.thymeleaf.exceptions.TemplateInputException: Error resolving template ""/series/add"", template might not exist or might not be accessible by any of the configured Template Resolvers 	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:870) ~[thymeleaf-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607) ~[thymeleaf-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) [thymeleaf-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) [thymeleaf-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:353) [thymeleaf-spring4-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:191) [thymeleaf-spring4-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1282) [spring-webmvc-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1037) [spring-webmvc-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:980) [spring-webmvc-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) [spring-webmvc-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) [spring-webmvc-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687) [javax.servlet-api-3.1.0.jar:3.1.0] 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) [javax.servlet-api-3.1.0.jar:3.1.0] 	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:812) [jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669) [jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:169) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:121) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:100) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) [spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) [spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) [spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) [spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) [spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585) [jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577) [jetty-security-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) [jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.servlets.gzip.GzipHandler.handle(GzipHandler.java:479) [jetty-servlets-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.Server.handle(Server.java:499) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544) [jetty-io-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635) [jetty-util-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555) [jetty-util-9.2.18.v20160721.jar:9.2.18.v20160721] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_60]  2017-05-30 11:49:26.534  WARN 26527 --- [tp2036003995-15] o.eclipse.jetty.servlet.ServletHandler   :   org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template ""/series/add"", template might not exist or might not be accessible by any of the configured Template Resolvers 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:982) ~[spring-webmvc-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687) ~[javax.servlet-api-3.1.0.jar:3.1.0] 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) ~[javax.servlet-api-3.1.0.jar:3.1.0] 	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:812) ~[jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669) ~[jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:169) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:121) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:100) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE] 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) ~[spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) ~[spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) ~[jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) ~[jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) ~[spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) ~[jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) ~[jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) ~[jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585) [jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577) [jetty-security-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) [jetty-servlet-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.servlets.gzip.GzipHandler.handle(GzipHandler.java:479) [jetty-servlets-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.Server.handle(Server.java:499) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257) [jetty-server-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544) [jetty-io-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635) [jetty-util-9.2.18.v20160721.jar:9.2.18.v20160721] 	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555) [jetty-util-9.2.18.v20160721.jar:9.2.18.v20160721] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_60] Caused by: org.thymeleaf.exceptions.TemplateInputException: Error resolving template ""/series/add"", template might not exist or might not be accessible by any of the configured Template Resolvers 	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:870) ~[thymeleaf-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607) ~[thymeleaf-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) ~[thymeleaf-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) ~[thymeleaf-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:353) ~[thymeleaf-spring4-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:191) ~[thymeleaf-spring4-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1282) ~[spring-webmvc-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1037) ~[spring-webmvc-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:980) ~[spring-webmvc-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) ~[spring-webmvc-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.8.RELEASE.jar:4.3.8.RELEASE] 	... 67 common frames omitted ```    ---  **Affects:** 4.3.8  1 votes, 3 watchers","closed","in: web,","spring-projects-issues","2017-05-30T10:10:12Z","2019-01-11T17:03:34Z"
"","20379","WebClientException should allow access to status code of the response [SPR-15824]","**[Simon](https://jira.spring.io/secure/ViewProfile.jspa?name=sbuettner)** opened **[SPR-15824](https://jira.spring.io/browse/SPR-15824?redirect=false)** and commented  The current implementation of the DefaultWebClient and its DEFAULT_STATUS_HANDLER returns a WebClientException if the status code is either a 4xx or a 5xx.  To allow custom retry logic for 5xx errors it would help to have access to the status code from the WebClientException the same way it is supported by the reactor.ipc.netty.http.client.HttpClientException  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20280 Convenience API for custom error handling on WebClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5394cc0c63471e7de8399c97ea201bbc0a4dd4d4","closed","type: enhancement,","spring-projects-issues","2017-07-27T12:12:53Z","2019-01-11T17:41:43Z"
"","19986","Allow to map null value from yaml [SPR-15425]","**[Simon Stratmann](https://jira.spring.io/secure/ViewProfile.jspa?name=simon.stratmann)** opened **[SPR-15425](https://jira.spring.io/browse/SPR-15425?redirect=false)** and commented  The following issue occured to me while using Spring Boot but is caused by Spring code.  With Spring Boot I have a String property that is mapped to an `application.yml` by using `@ConfigurationProperties`. The value in the yml file is `null` (or `~`). But the values are initialized with """" (empty String). According to YAML specification it does allow null values.  The culprit is `org.springframework.beans.factory.config.YamlProcessor#buildFlattenedMap` which executes `result.put(key, (value != null ? value : """"))`.  I've extended the file and configured it to be used and this seems to work fine. But I have to take over a lot of final and private code which makes it a bit brittle. I think the class should support null values, explicitly remark that their converted to """" or make a change in behavior a bit more comfortable.  Code excerpts:  ```yml test:     setting: ~ ```  ```java  @ConfigurationProperties(""test"") public class Test {      String setting;      public void setSetting(String setting) {         this.setting = setting; //Will set ""setting"" to """" instead of null     } } ```  Thanks for your time.  ---  **Affects:** 4.3.7  **Attachments:** - [demo.zip](https://jira.spring.io/secure/attachment/24899/demo.zip) (_5.25 kB_)  **Issue Links:** - #21310 YamlPropertiesFactoryBean loses entries in the YAML document that have an empty array value  4 votes, 5 watchers","open","type: enhancement,","spring-projects-issues","2017-04-10T09:09:51Z","2021-02-24T15:48:51Z"
"","20103","RestTemplate is missing ""Typed"" error handler. [SPR-15544]","**[Simon Galperin](https://jira.spring.io/secure/ViewProfile.jspa?name=simon.galperin@gmail.com)** opened **[SPR-15544](https://jira.spring.io/browse/SPR-15544?redirect=false)** and commented  RestTemplate's default error handler is _DefaultResponseErrorHandler_  The default error handler creates a String body from the output source. It would be nice if there were an alternative ""Typed"" Error handler that could use the same _HttpMessageConverterExtractor_ to non-success states that handle JSON/XML responses.  Pull request: https://github.com/spring-projects/spring-framework/pull/1428  The class would be quite simple:  ``` public class TypedResponseErrorHandler extends DefaultResponseErrorHandler {     private final Map responseExtractors = new HashMap();      public TypedResponseErrorHandler(Map> converters) {         typeMap.forEach((status, type) -> {             this.responseExtractors.put(status,                                         new HttpMessageConverterExtractor(type, converters));         });     }      @Override     protected boolean hasError(HttpStatus statusCode) {         // if any of the status codes mapped, or the default behavior         return responseExtractors.keySet().contains(statusCode) || super.hasError(statusCode);     }     @Override     public void handleError(ClientHttpResponse response) throws IOException {         HttpStatus status = response.getStatusCode();          HttpMessageConverterExtractor responseExtractor = responseExtractors.get(status);         if (responseExtractor != null) {             RestClientException exception = responseExtractor.extractData(response);             throw exception;         }          super.handleError(response);     }  } ```  ---  **Issue Links:** - #11666 RestTemplate's ResponseErrorHandler should take care the detail message at `@ResponseBody` from `@ExceptionHandler` - #15589 Make it easier for RestTemplate to deal with error object responses (_**""supersedes""**_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1428, and commits https://github.com/spring-projects/spring-framework/commit/7894efdd1e97c26d609c8698284cf12a24d212f1, https://github.com/spring-projects/spring-framework/commit/4b0dedc45e2f82d59c8414996f34520be1760698","closed","type: enhancement,","spring-projects-issues","2017-05-14T13:54:50Z","2019-01-14T04:35:21Z"
"","19937","Support for List injection [SPR-15373]","**[Simic Zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=simic)** opened **[SPR-15373](https://jira.spring.io/browse/SPR-15373?redirect=false)** and commented  While I tries to inject List via below code, it throws error :  "" No qualifying bean of type 'java.util.List' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {`@org`.springframework.beans.factory.annotation.Autowired(required=true)}""  ```java  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes={Cat.class,Dog.class,PetShop.class}) public class SpringTest {    @Autowired   private PetShop shop; 	   @Test   public void testFoo() {     for(Provider animalProvider : shop.animals){       System.out.println(animalProvider.get());     }   } }  @Component public class PetShop {   @Autowired   protected List animals; }  @Component public class Dog implements Animal {}  @Component public class Cat implements Animal {}  public interface Animal {} ```  I tried to make a fix by adding below code to DefaultListableBeanFactory.resolveMultipleBeans()  ```java   else if (Collection.class.isAssignableFrom(type) && type.isInterface()) {     Class elementType = descriptor.getResolvableType().asCollection().resolveGeneric();     if (elementType == null) {       return null;     }     if (javaxInjectProviderClass == elementType) {       String[] candidateBeanNames =  BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this,descriptor.getResolvableType().resolveGeneric(0,0), true, descriptor.isEager());       List providers = new ArrayList();       for(String candidateBeanName : candidateBeanNames) {         providers.add(new Provider(){           @Override           public Object get() {             return getBean(candidateBeanName);           }});       }       return providers;     }  ```  ---  **Affects:** 4.3.7  **Issue Links:** - #19833 Honor `@Autowired`(required=false) at parameter level, as an alternative to java.util.Optional","closed","type: enhancement,","spring-projects-issues","2017-03-22T15:06:35Z","2019-01-13T05:16:49Z"
"","19838","LocaleChangeInterceptor not working before I login [SPR-15273]","**[shyam pareek](https://jira.spring.io/secure/ViewProfile.jspa?name=shyampareek)** opened **[SPR-15273](https://jira.spring.io/browse/SPR-15273?redirect=false)** and commented  LocaleChangeInterceptor not working before I login  I just configured the LocaleChangeInterceptor in my web app (using Spring-boot). It works but only if I'm logged in. /* Localization section is started */      @Override     public void addInterceptors(InterceptorRegistry registry) {         registry.addInterceptor(localeChangeInterceptor()).addPathPatterns(""/**"");         registry.addInterceptor(new WebInterceptor()).addPathPatterns(""/**"");     }          @Bean     public LocaleChangeInterceptor localeChangeInterceptor(){         LocaleChangeInterceptor localeChangeInterceptor=new LocaleChangeInterceptor();         localeChangeInterceptor.setParamName(""language"");         return localeChangeInterceptor;     }          @Bean(name = ""localeResolver"")     public LocaleResolver getLocaleResolver(){         return new CookieLocaleResolver();     }          @Bean     public MessageSource messageSource() {         final ReloadableResourceBundleMessageSource ret = new ReloadableResourceBundleMessageSource();         ret.setBasename(""classpath:messages"");         ret.setDefaultEncoding(""UTF-8"");         return ret;     }          @Override     public Validator getValidator() {         LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean();         validator.setValidationMessageSource(messageSource());         return validator;     }          @Bean     @Order(Ordered.HIGHEST_PRECEDENCE)     CharacterEncodingFilter characterEncodingFilter() {       CharacterEncodingFilter filter = new CharacterEncodingFilter();       filter.setEncoding(""UTF-8"");       filter.setForceEncoding(true);       return filter;     }    ---  **Affects:** 5.0 M4  **Reference URL:** http://stackoverflow.com/questions/36541170/localechangeinterceptor-not-working-before-i-login","closed","status: invalid,","spring-projects-issues","2017-02-21T06:47:39Z","2019-01-12T05:21:14Z"
"","20265","improve logging of DefaultCorsProcessor for rejected headers [SPR-15708]","**[shorn tolley](https://jira.spring.io/secure/ViewProfile.jspa?name=shorn)** opened **[SPR-15708](https://jira.spring.io/browse/SPR-15708?redirect=false)** and commented  The DefaultCorsProcessor rejects quietly when various conditions aren't met.  This leads to confusion when trying to set up CORS handling with spring web/security.  In my situation, I didn't have the correct ""allowedHeaders"" configuration for a pre-flight request. This lead to me thinking the eventual ""403"" error had something to do with my authentication and authorization chain.  It would be helpful if this piece of code were refactored slightly to add a debug/trace message to tell the developer the fact that the request is being rejected because of a CORS issue (and why).  This is important because people often do auth + CORS at the same time - especially when implementation a Single-Page-Application.  They'll hit CORS issues straight away when they start developing and the CORS config problems tend to get confused with auth config problems.  I'd be happy to submit a pull request if you think this functionality would be good to have.   ---  **Affects:** 4.3.7, 4.3.8, 4.3.9, 5.0 GA  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java#L130  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9901c38f9dfadafcd29113a6887e36c661962239","closed","type: enhancement,","spring-projects-issues","2017-06-27T01:01:34Z","2017-07-24T07:51:16Z"
"","20091","Consistent overriding for all variants of init/destroy method inheritance [SPR-15532]","**[Shimon Doodkin](https://jira.spring.io/secure/ViewProfile.jspa?name=helpmepro1@gmail.com)** opened **[SPR-15532](https://jira.spring.io/browse/SPR-15532?redirect=false)** and commented  beans default settings are set to each bean regardless of parent settings, parent init destroy method not called, when beans default init destroy method exists  my guess is that the bug is here  https://github.com/spring-projects/spring-framework/blob/8d707eb5304e42babe3d680c5cd3880869cfabe2/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java#L356  in the initialization of defaults.  that it sets defaults regardless of parent settings   ---  **Affects:** 4.3.8, 5.0 RC1  **Attachments:** - [testinit.zip](https://jira.spring.io/secure/attachment/24917/testinit.zip) (_15.52 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ac5e2599f7c8ae5082871919852e5e3518c85410","closed","type: enhancement,","spring-projects-issues","2017-05-10T11:09:20Z","2017-09-11T12:09:50Z"
"","19817","org.springframework.http.client.BufferingClientHttpResponseWrapper [SPR-15252]","**[Shannon McNeill](https://jira.spring.io/secure/ViewProfile.jspa?name=smmcneill)** opened **[SPR-15252](https://jira.spring.io/browse/SPR-15252?redirect=false)** and commented  I'd like my ClientHttpRequestInterceptor to wrap its ClientHttpResponse with BufferingClientHttpResponseWrapper, but the class and its constructor aren't public.  Given this, I did a Github search of the codebase and I don't see this class used anywhere.  So, it's not public, but it's not used internally.  It'd be great if it were publicly available.   ---  **Affects:** 4.3.5  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/4.3.x/spring-web/src/main/java/org/springframework/http/client/BufferingClientHttpResponseWrapper.java","closed","type: enhancement,","spring-projects-issues","2017-02-13T23:08:37Z","2017-02-14T08:48:27Z"
"","19875","ContentNegotiationStrategy.resolveMediaTypes should process all strategies before returning [SPR-15312]","**[Seth Rife](https://jira.spring.io/secure/ViewProfile.jspa?name=sethrife)** opened **[SPR-15312](https://jira.spring.io/browse/SPR-15312?redirect=false)** and commented  In ContentNegotiationStrategy.resolveMediaTypes, the for loop returns when the first strategy returns any media types. This has a big impact on matching the correct handler to process the request.  For example, for a web request URL that ends in .IMS but is **NOT** related to the application/vnd.ms-ims MIME type, the ServletPathExtenstionContentNegotiationStrategy will return the (application/vnd.ms-ims) MediaType and subsequently return out of the method without processing the next strategy. This prevents the HeaderContentNegotiationStrategy from processing and matching on the Accept header. In my case, the end result is that the framework fails to match a handler for the request.   ---  **Affects:** 4.3.7","closed","status: declined,","spring-projects-issues","2017-03-03T22:34:52Z","2019-01-12T16:33:28Z"
"","19828","Mulltimap update bug [SPR-15263]","**[Sergey Kovalenko](https://jira.spring.io/secure/ViewProfile.jspa?name=joinedserg)** opened **[SPR-15263](https://jira.spring.io/browse/SPR-15263?redirect=false)** and commented  I'm mapping multimap in Hibernate: - it works fine with pure Hibernate; - it behaves strangely when I use Hibernate along with Spring.  There are 2 situations: 1. I save a non-empty multimap (I add 'this' element1 to the multimap), then add element2 to the multimap and update, after that the multimap contains element2 and element1 (which is fine). 2. I save an empty multimap, then add element2 to the multimap and update, after that the multimap is empty (but I expect to see element2 in the multimap).  In the first situation, during update in function flushCollections(..) !attach1.png|thumbnail!  I get ce.doupdate = true !attach2.png|thumbnail!  In situation 2, I get doupdate = false !attach3.png|thumbnail!  I’ve tried using different Spring’s versions: 4.0.5.RELEASE, 4.2.2.RELEASE, 4.3.6.RELEASE. You can find it in attachments, situation 1: if you uncomment mmapl.put(-10, this) in Some’s constructor; situation 2: if you comment mmapl.put(-10, this) in Some’s constructor.   ---  **Attachments:** - [attach1.png](https://jira.spring.io/secure/attachment/23716/attach1.png) (_435.93 kB_) - [attach2.png](https://jira.spring.io/secure/attachment/23715/attach2.png) (_250.25 kB_) - [attach3.png](https://jira.spring.io/secure/attachment/23714/attach3.png) (_344.56 kB_) - [hibernate_multimap.zip](https://jira.spring.io/secure/attachment/23713/hibernate_multimap.zip) (_13.54 kB_)","closed","status: invalid,","spring-projects-issues","2017-02-16T21:49:43Z","2022-02-18T19:44:03Z"
"","18523","WebFlux SSE controller does not detect disconnected client [SPR-15306]","**[Sergei Egorov](https://jira.spring.io/secure/ViewProfile.jspa?name=bsideup)** opened **[SPR-15306](https://jira.spring.io/browse/SPR-15306?redirect=false)** and commented  Spring SSE implementation doesn't cancel the subscription when the client disconnects but waits until the next failed emission.  It leads to a huge number of open subscriptions when notification rarely happens (i.e. Stocks SSE endpoint with a non-frequently changing stock value).  Reference URL contains a Gist with Groovy app demonstrating an issue. Start an app, use ""curl -v localhost:8080"", ""CTRL-C"". The app will continue to log because ""distinctUntilChanged()"" doesn't trigger anything, but the subscription is not canceled.  Critical because if subscription is not lightweight (i.e. polling, or distributed event listening, pub/sub) server's performance quickly goes down and can be DoS'ed by hitting SSE endpoint  ---  **Affects:** 5.0 M5  **Reference URL:** https://gist.github.com/bsideup/c69cd2395996adb246639eef43098343  **Issue Links:** - #21037 [docs] Document the need for periodic writes on a streaming response - #21875 Disconnected client exception logging should differentiate remote service exceptions too","closed","type: bug,","spring-projects-issues","2017-03-02T13:22:09Z","2019-03-06T15:06:53Z"
"","19638","Doc: autowire-candidate=""false"" does not affect autowire=""byName"" [SPR-15072]","**[Senthil Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=c_senthilkumar)** opened **[SPR-15072](https://jira.spring.io/browse/SPR-15072?redirect=false)** and commented  According to [this section](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#beans-factory-autowire-candidate) of Spring Framework Reference documentation, when `autowire-candidate` is set to `false` in a bean's XML definition, it excludes the bean from the autowiring infrastructure. The section doesn't talk about any exceptions to this case.  This works when, on the depending bean, `autowire` is set to `byType`. But when it is set to `byName`, the `autowire-candidate=""false""` configuration of the target bean is ignored and it is still autowired.   ---  **Affects:** 4.3.5  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/146  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e8a082fbe1851745cf225a0062aba71231c29330, https://github.com/spring-projects/spring-framework/commit/8fc65ab0a541ef08a8d195e650828a42659e8aea","closed","in: core,","spring-projects-issues","2016-12-30T05:29:27Z","2016-12-30T13:33:16Z"
"","20125","Consistently accept ""taskExecutor"" bean of type Executor (as stated in @EnableAsync's javadoc) [SPR-15566]","**[Sebastian Kirsch](https://jira.spring.io/secure/ViewProfile.jspa?name=sebastiankirsch)** opened **[SPR-15566](https://jira.spring.io/browse/SPR-15566?redirect=false)** and commented  The javadoc of `@EnableAsync` states  > By default, Spring will be searching for an associated thread pool definition: either a unique `org.springframework.core.task.TaskExecutor` bean in the context, or an `java.util.concurrent.Executor` bean named ""taskExecutor"" otherwise.  That is only partly true, since any `java.util.concurrent.Executor` bean, no matter how it is named, will not be considered and the fallback `SimpleAsyncTaskExecutor` will be used. I can provide a test case if that is debatable.  It would further be helpful to state that an `AsyncConfigurer` takes precedence over any registered `TaskExecutor`.  ---  **Affects:** 4.3.8  **Issue Links:** - #18602 Regression: Early instantiation of a bean prevents proxying for `@Async` in 4.2.x but works in 4.1.x - #17827 ScheduledAnnotationBeanPostProcessor should fall back to default TaskScheduler by name - #17839 AsyncAnnotationBeanPostProcessor could find TaskExecutor by type/name  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3cc94ae8b53c5d71c3cc4fc453e8569843dd2e26, https://github.com/spring-projects/spring-framework/commit/9cb9884533101808db6e85d87aec63afe25ed7ac","closed","in: core,","spring-projects-issues","2017-05-19T17:34:50Z","2019-01-13T05:16:06Z"
"","19896","GenericCallMetaDataProvider should not treat 'NULLABLE' column as boolean (for compatibility with latest Postgres driver) [SPR-15333]","**[Sean Mills](https://jira.spring.io/secure/ViewProfile.jspa?name=smills)** opened **[SPR-15333](https://jira.spring.io/browse/SPR-15333?redirect=false)** and commented  After upgrading to the latest Postgresql JDBC driver (42.0.0), I ran into a bug while processing call meta data.  The meta data ResultSet returns a short type for the 'NULLABLE' column.  However, the `org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.processProcedureColumns(...)` method uses the getBoolean() method.  I originally thought this was a problem with the latest Postgresql JDBC driver, but in reviewing the JavaDoc, the getBoolean() method doesn't describe how to handle anything other than NULL, 0, or 1.  Since the 'NULLABLE' column can return 2, meaning unknown, the code should change to process the ResultSet with the explicitly defined type.  ---  **Affects:** 4.3.6  **Issue Links:** - #19945 Spring JDBC not correctly processing Postgresql ?| and ?& operator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cfd9b3461f660db85ad25f95001abd9580ba402e, https://github.com/spring-projects/spring-framework/commit/79ea77908ac3f68103d06935a0e2100621df988a","closed","type: enhancement,","spring-projects-issues","2017-03-08T19:07:40Z","2019-01-11T15:05:39Z"
"","19893","Make formatter value configurable through Spring EL/Property PlaceHolder [SPR-15330]","**[SASI PERI](https://jira.spring.io/secure/ViewProfile.jspa?name=sasi.peri)** opened **[SPR-15330](https://jira.spring.io/browse/SPR-15330?redirect=false)** and commented  Hello, The issue that appears to be fixed here : #11747 is reoccurring in 4.3.4. We have a spring boot web app (spring cloud dependencies Camden-SR4)  We tried configuring spring datetime formatter through app.props and use it by `""${...}""`, it throughs exact same exception as mentioned in the link above. It's not able to inject this property from app.props.  Can you please check if this feature/fix is been ported from spring 3 to 4 and later ? Regards Sasi Peri  ---  **Affects:** 4.3.4  **Attachments:** - [test-spring-date-time.7z](https://jira.spring.io/secure/attachment/23803/test-spring-date-time.7z) (_49.27 kB_)  **Issue Links:** - #11747 Make formatter value configurable through Spring EL/Property PlaceHolder","closed","in: core,","spring-projects-issues","2017-03-08T16:37:13Z","2019-01-14T04:36:01Z"
"","19879","Support for @Lookup methods within @Configuration classes [SPR-15316]","**[Sandu Turcan](https://jira.spring.io/secure/ViewProfile.jspa?name=alex322)** opened **[SPR-15316](https://jira.spring.io/browse/SPR-15316?redirect=false)** and commented  I have two config classes: `MainConfig` and `ConfigExt`. `MainConfig` imports `ConfigExt`, and I would like a concise way of referencing `ConfigExt` from it. I'm trying to use `@Lookup`, but it doesn't work in this case. I have a sample project here: https://github.com/idlsoft/spring-lookup and a PR, which I believe will fix the issue here: https://github.com/spring-projects/spring-framework/pull/919   ---  **Affects:** 4.3.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fc2e635c05ea20076235d1d147117988abbb0ca5, https://github.com/spring-projects/spring-framework/commit/77c771e8746270f51eaddda7105efc443f1171d2","closed","type: enhancement,","spring-projects-issues","2017-03-06T04:13:43Z","2017-04-18T15:43:20Z"
"","19648","Spring validation crashes with Hibernate Validation 5 style list constraint violations [SPR-15082]","**[Sander van Schouwenburg](https://jira.spring.io/secure/ViewProfile.jspa?name=svschouw)** opened **[SPR-15082](https://jira.spring.io/browse/SPR-15082?redirect=false)** and commented  In Hibernate Validation 5 it is possible to let a validation error refer to a list element. However, the SpringValidatorAdapter does not cope with this situation.  Take the following code example:  ```java public class ValidatorFactoryTests { 	 	public static class ListContainer { 		@NotXList 		private List list = new LinkedList(); 		 		public void addString(String value) { 			list.add(value); 		} 		 		public List getList() { 			return list; 		} 	}  	@Retention(RetentionPolicy.RUNTIME) 	@Target(ElementType.FIELD) 	@Constraint(validatedBy=NotXListValidator.class) 	public static @interface NotXList {  		String message() default ""Should not be X"";  		Class[] groups() default { };  		Class","closed","in: core,","spring-projects-issues","2017-01-02T11:54:28Z","2019-01-11T15:27:29Z"
"","20392","Upgrade to JUnit Jupiter 5.0 RC2 [SPR-15837]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-15837](https://jira.spring.io/browse/SPR-15837?redirect=false)** and commented  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20293 Upgrade to JUnit 5.0 GA","closed","type: task,","spring-projects-issues","2017-07-31T15:18:09Z","2019-01-11T17:40:22Z"
"","20346","Upgrade to JUnit Jupiter 5.0 M6 [SPR-15791]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-15791](https://jira.spring.io/browse/SPR-15791?redirect=false)** and commented  JUnit Jupiter 5.0 M6 is already available in Maven Central: https://repo1.maven.org/maven2/org/junit/jupiter/junit-jupiter-api/5.0.0-M6/  ---  **Affects:** 5.0 RC2  **Issue Links:** - #20284 Upgrade to JUnit Jupiter 5.0 M5 - #20293 Upgrade to JUnit 5.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1e66191cbd18622cb68fc694509b78e0fce47a2b","closed","type: task,","spring-projects-issues","2017-07-18T20:01:48Z","2019-01-11T16:23:05Z"
"","20291","Supply test instance to TestExecutionListeners at class level [SPR-15735]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-15735](https://jira.spring.io/browse/SPR-15735?redirect=false)** and commented  ## Status Quo  The test instance is not supplied to `TestContextManager.beforeTestClass()` and `TestContextManager.afterTestClass()`. Consequently, the `beforeTestClass()` and `afterTestClass()` methods of `TestExecutionListener` implementations never have access to the test instance.  For JUnit 4, it is a moot point since the test instance is never available for class-level callbacks (due to per-method test instance lifecycle semantics). However, for TestNG the test instance is always available, and in JUnit Jupiter the test instance is available if the test class is annotated with `@TestInstance(Lifecycle.PER_CLASS)` (new in JUnit Jupiter 5.0 M5).  ## Deliverables  1. Introduce overloaded variants of `TestContextManager.beforeTestClass()` and `TestContextManager.afterTestClass()` that accept an `Object testInstance` parameter and use it to update the state of the managed `TestContext`. 2. Consider providing access to container-level exceptions as well (potentially in a separate JIRA issue).    ---  **Affects:** 4.3 GA","open","type: enhancement,","spring-projects-issues","2017-07-05T15:55:13Z","2020-08-24T17:39:30Z"
"","20284","Upgrade to JUnit Jupiter 5.0 M5 [SPR-15728]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-15728](https://jira.spring.io/browse/SPR-15728?redirect=false)** and commented  JUnit 5.0 M5 will introduce several breaking changes in the extension APIs for JUnit Jupiter and will therefore require an immediate upgrade in order to ensure continued compatibility within the _Spring TestContext Framework_.  ---  **Affects:** 5.0 RC2  **Issue Links:** - #20293 Upgrade to JUnit 5.0 GA - #20346 Upgrade to JUnit Jupiter 5.0 M6","closed","type: task,","spring-projects-issues","2017-07-02T16:01:10Z","2019-01-11T16:11:11Z"
"","19930","Discover test configuration on enclosing class for nested test class [SPR-15366]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-15366](https://jira.spring.io/browse/SPR-15366?redirect=false)** and commented  ## Status Quo  Spring's support for JUnit Jupiter already supports detection of test configuration (e.g., (`@ContextConfiguration`) on `@Nested` classes.  However, if a `@Nested` class does not declare its own test configuration, Spring will not find the configuration from the enclosing class.  See also [this discussion on Stack Overflow](https://stackoverflow.com/questions/44203244/transaction-roll-back-is-not-working-in-test-case-in-nested-class-of-junit5/44227179) regarding nested test classes and `@Transactional`.  ## Proposal  Inspired by [issue 8](https://github.com/sbrannen/spring-test-junit5/issues/8) from the `spring-test-junit5` project, it would perhaps be desirable if the _Spring TestContext Framework_ would discover test configuration on an enclosing class for a `@Nested` test class.  ## Deliverables   - [x] Introduce `@NestedTestConfiguration` with `EnclosingConfiguration` enum supporting `INHERITED` and `OVERRIDE` modes. - [x] Make the default `EnclosingConfiguration` mode globally configurable via `SpringProperties` - [x] Switch the default `EnclosingConfiguration` mode to `INHERITED` - [x] `@ContextConfiguration` / `@ContextHierarchy` - [x] `@ActiveProfiles` - [x] `@TestPropertySource` / `@TestPropertySources`  - [x] `@WebAppConfiguration` - [x] `@TestConstructor` - [x] `@BootstrapWith` - [x] `@TestExecutionListeners` - [x] `@DirtiesContext` - [x] `@Transactional` - [x] `@Rollback` / `@Commit` - ❌  `@Sql` / `@SqlConfig` / `@SqlGroup`   - see #25913 - ❌  Document `@NestedTestConfiguration` support in the reference manual   - see #25912 - ❌  Document `@NestedTestConfiguration` support and the switching of the default mode to `INHERITED` in the upgrade notes in the wiki   - see #25912  ---  **Affects:** 5.0  **Issue Links:** - #18722 Support nested test classes with SpringClassRule & SpringMethodRule - #21136 JUnit Jupiter `@Nested` class cannot share enclosing class's ApplicationContext if nested class is deemed to be a configuration candidate  6 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2017-03-20T19:16:39Z","2020-10-13T13:07:13Z"
"","19839","Ability to use @ContextConfiguration and a meta @ContextConfiguration on the same class [SPR-15274]","**[Réda Housni Alaoui](https://jira.spring.io/secure/ViewProfile.jspa?name=reda-alaoui)** opened **[SPR-15274](https://jira.spring.io/browse/SPR-15274?redirect=false)** and commented  Hello,  We have a project split up into multiple modules. Among them there are: - `database` module - `stream` module  Each of them defines a test project (database-test, stream-test)  And there is a consumer of these modules: - `cqrs` module  `cqrs` has a mandatory dependency on the `database` module and optional dependency on the `stream` module. Therefore the `AbstractCqrsIntegrationTest` extends `AbstractDataIntegrationTest` and cannot extend an abstract `stream` test class.  What I wanted to do was to create this meta annotation in the `stream` module:  ```java @Target({ ElementType.TYPE, ElementType.ANNOTATION_TYPE }) @Retention(RetentionPolicy.RUNTIME) @Documented @Inherited @ContextConfiguration( 		classes = {StreamConfigurationTest.class}, 		initializers = StreamEnvironmentInitializerTest.class ) public @interface EnableStreamTest {  } ```  And use it in `cqrs`:  ```java @EnableStreamTest @ContextConfiguration(         classes = {CqrsConfigurationTest.class},         loader = AnnotationConfigContextLoader.class, 		initializers = CqrsEnvironmentInitializer.class ) public abstract class AbstractCqrsIntegrationTest extends AbstractDataIntegrationTest {  } ```  But `@ContextConfiguration` coming from meta annotation is ignored and replaced by the one declared directly on `AbstractCqrsIntegrationTest`.  I know that `@ContextConfiguration` are correctly merged by traversing only superclasses. But this doesn't apply to my need.  Would it be possible to fetch all declared `@ContextConfiguration` at the class level? It seems it would require to add a method in `MetaAnnotationUtils` similar to:  ```java private static UntypedAnnotationDescriptor findAnnotationDescriptorForTypes(Class clazz, 			Set visited, Class","open","in: test,","spring-projects-issues","2017-02-21T08:05:20Z","2019-01-15T10:54:52Z"
"","19931","Improve support for fixed content type in ContentNegotiationManager [SPR-15367]","**[Ryan O'Meara](https://jira.spring.io/secure/ViewProfile.jspa?name=rdotjar)** opened **[SPR-15367](https://jira.spring.io/browse/SPR-15367?redirect=false)** and commented  ContentNegotiationConfigurer currently supports setting a default content type for all end points, or a content negotiation strategy. While useful, this can run into problems for applications with a variety of supported content types.  For example, if an application has set the default content type to ""text/html"", and has an end point which only supports ""application/json"", any calls which do not specify an accept header, or which specify ""\*/\*"" as the accept header, will receive a 406 response.  This is consistent with the documented behavior of setting the default content type, but applications such as these often would like to specify the preferred content type, as opposed to a forced default.  Such a configuration would ideally allow the above example to specify that endpoints that support ""text/html"" prefer to return it when no specific content type is requested, but still allow end points which do not support ""text/html"" to chose from among the media types they support (in the same manner as when no default content type is specified)   ---  **Affects:** 4.3.3  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1362  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f963367484bce59cd7e3f0e02a0a970f38b8842a, https://github.com/spring-projects/spring-framework/commit/043c7070e3dd73415c96b5ad5b0de0809904150e, https://github.com/spring-projects/spring-framework/commit/4a890226ea3c3502809c21b7cd652ba8a43c4c94, https://github.com/spring-projects/spring-framework/commit/49ac6d54f7703c38d8991e5b48bbc1ea901564aa","closed","type: enhancement,","spring-projects-issues","2017-03-21T03:54:05Z","2017-05-08T08:41:47Z"
"","20160","Support of exception handling in Spring WebSocket [SPR-15601]","**[Ruslan Yanyuk](https://jira.spring.io/secure/ViewProfile.jspa?name=rlnua)** opened **[SPR-15601](https://jira.spring.io/browse/SPR-15601?redirect=false)** and commented  I've found that there is no support for exception handling (through `@ControllerAdvice`). It would be nice to have it.   ---  **Affects:** 4.3.7","closed","type: enhancement,","spring-projects-issues","2017-05-31T08:00:51Z","2017-06-01T12:56:41Z"
"","19633","SchedulingConfigurer's ScheduledTaskRegistrar should reliably shut down before TaskScheduler [SPR-15067]","**[Ruslan Stelmachenko](https://jira.spring.io/secure/ViewProfile.jspa?name=djxak)** opened **[SPR-15067](https://jira.spring.io/browse/SPR-15067?redirect=false)** and commented  When I define `taskScheduler` bean with `setWaitForTasksToCompleteOnShutdown(true)` and `setAwaitTerminationSeconds(20)` and at the same time schedule some tasks using `SchedulingConfigurer` and it's `ScheduledTaskRegistrar`, then `taskScheduler` never shutdown gracefully because it's queue contains programmatically scheduled tasks (using `taskRegistrar`), but no one cancels these tasks before `taskScheduler` tries to shutdown.  ```java @SpringBootApplication @EnableScheduling public class SchedulingBugDemoApplication implements SchedulingConfigurer {  	private static final Logger log = LoggerFactory.getLogger(SchedulingBugDemoApplication.class);  	public static void main(String[] args) { 		SpringApplication.run(SchedulingBugDemoApplication.class, args); 	}  	@Bean 	public TaskScheduler taskScheduler() { 		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler(); 		scheduler.setThreadNamePrefix(""myScheduler-""); 		scheduler.setPoolSize(10); 		// block spring context stopping to allow SI pollers to complete 		// (to graceful shutdown still running tasks, without destroying beans used in these tasks) 		scheduler.setWaitForTasksToCompleteOnShutdown(true); 		scheduler.setAwaitTerminationSeconds(20); 		return scheduler; 	}  	@Override 	public void configureTasks(ScheduledTaskRegistrar taskRegistrar) { 		taskRegistrar.addTriggerTask( 				() -> work(), 				new CronTrigger(""*/5 * * * * *""));  		// The second task sits in the scheduler queue and prevents scheduler to shutdown(). 		// The task's cancellation lies in taskRegistrar's destroy() method, but no one 		// calls it until context bean destruction is in place. At the same time the context 		// waits for taskScheduler to terminate to continue beans destruction procedure. 		taskRegistrar.addTriggerTask( 				() -> work(), 				new CronTrigger(""0 0 0 */1 * *"")); 	}  	void work() { 		log.info(""Working...""); 	}  } ```  The second task sits in the scheduler queue and prevents scheduler to `shutdown()`. The task's cancellation lies in `taskRegistrar`'s `destroy()` method, but no one calls it until context bean destruction is in place. At the same time the context waits for `taskScheduler` to terminate to continue beans destruction procedure.  When we use `@Scheduled` annotation, then this problem is not present because `ScheduledAnnotationBeanPostProcessor`'s `destroy()` method explicitly calls `ScheduledTaskRegistrar`'s `destroy()` method, which cancels all the scheduled tasks.  But when we register our tasks programmatically, no one calls `ScheduledTaskRegistrar`'s `destroy()` method before `TaskScheduler` tries to `shutdown()` and `awaitTermination()`.  Maybe we can force somehow to call `ScheduledTaskRegistrar`'s `destroy()` method before `TaskScheduler`'s `destroy()` method? Of course this can be done manually for example:  ```java 	private volatile ScheduledTaskRegistrar taskRegistrar;  	@Override 	public void configureTasks(ScheduledTaskRegistrar taskRegistrar) { 		this.taskRegistrar = taskRegistrar; 		// ... 	}  	@PreDestroy 	public void destroy() { 		taskRegistrar.destroy(); 	} ```  This workaroud works because the `@Configuration` bean's `destory()` method called before `TaskScheduler`'s. But I don't know if it is guaranteed or not.  I can imagine many workarounds for this but will be better to somehow make it work out of the box, as the `@Scheduled` annotation works.  ---  Best regards, Ruslan.  ---  **Affects:** 4.3.5  **Attachments:** - [scheduling-bug-demo.zip](https://jira.spring.io/secure/attachment/23671/scheduling-bug-demo.zip) (_61.47 kB_)  **Issue Links:** - #12206 findDefaultEntityManagerFactory should consider EMF bean's primary flag - #19256 ScheduledAnnotationBeanPostProcessor should reliably apply after AnnotationAwareAspectJAutoProxyCreator - #17839 AsyncAnnotationBeanPostProcessor could find TaskExecutor by type/name - #19635 Track bean dependencies for calls between `@Bean` methods within `@Configuration` classes","closed","type: enhancement,","spring-projects-issues","2016-12-29T16:09:15Z","2019-01-13T05:18:11Z"
"","20163","Cron expression validation method in CronSequenceGenerator improved [SPR-15604]","**[Ruslan Sibgatullin](https://jira.spring.io/secure/ViewProfile.jspa?name=enigo)** opened **[SPR-15604](https://jira.spring.io/browse/SPR-15604?redirect=false)** and commented  This method validated only fields length of the given expression, not the validity of cron expression. It seems logical that the method with name 'isValidExpression' would validate cron as well. Plus, possible NPE fixed.  ---  **Affects:** 4.3.8  **Issue Links:** - #20242 NullPointerException if cron expression is null (_**""is duplicated by""**_) - #19500 Cron Expression validation  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1442, and commits https://github.com/spring-projects/spring-framework/commit/674e2320a828417eec6a77dfb31dc7ff9337fdb1, https://github.com/spring-projects/spring-framework/commit/5f4d1a4628513ab34098fa3f92ba03aa20fc4204","closed","type: enhancement,","spring-projects-issues","2017-06-01T08:54:51Z","2019-01-11T15:41:30Z"
"","20389","Regression after URI template support added to MockMvcResultMatchers [SPR-15834]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15834](https://jira.spring.io/browse/SPR-15834?redirect=false)** and commented  #19356 added support for URI templates in `MockMvcResultMatchers` and as a consequence that encodes every expectedUrl value which previously were not. There is no need to change this existing behavior. Probably best to create a separate method explicitly named for use as a URI template so that you opt into the encoding. There is one comment under the ticket already.  Such a solution would also be aligned with a client side feature of the same kind under #20374.  ---  **Affects:** 5.0 RC3  **Issue Links:** - #19356 Add support for URI templates in redirectedUrl() & forwardedUrl() - #20374 URI variables with MockRestRequestMatchers's requestTo  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9c3bd8ce853a3c0cd666842c7b29d3b140cf6036","closed","type: bug,","spring-projects-issues","2017-07-31T09:38:16Z","2019-01-11T17:41:27Z"
"","20358","Parse error when reading JSON through the Jackson non-blocking parser [SPR-15803]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15803](https://jira.spring.io/browse/SPR-15803?redirect=false)** and commented  The issue has been [reported to Jackson](https://github.com/FasterXML/jackson-core/issues/389) along with a [sample project](https://github.com/sdeleuze/demo-java-jackson-non-blocking/tree/master) .  ---  **Affects:** 5.0 RC3  **Issue Links:** - #19097 Leverage Jackson non-blocking JSON parsing (and remove netty-buffer dependency)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/14ccb38523c5b23ee8c3ac37d93c19b4a7bf24b0, https://github.com/spring-projects/spring-framework/commit/bd0de7086e846d573324f3f34c9bfd40bed4e9b8","closed","type: bug,","spring-projects-issues","2017-07-21T08:54:00Z","2019-01-11T17:42:17Z"
"","20329","Provide control over thread resources used for file I/O in WebFlux [SPR-15774]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15774](https://jira.spring.io/browse/SPR-15774?redirect=false)** and commented  `ResourceEncoder` and `ResourceRegionEncoder` use `AsynchronousFileChannel#open` and pass the resulting channel to `DataBufferUtils#read` to turn it into `Flux`. The open method has an `ExecutorService` overloaded argument but if not passed, it results in `Executors.newCachedThreadPool(..)` for each call to open.  There are other places too where we may perform read file I/O as part of static resource handling that first will need to change to do the same (see #20328) and that should also be configurable with an ExecutorService.  We should probably also create a dedicated thread pool for file I/O in WebFlux configuration and pass that into the respective places that need it.  ---  **Issue Links:** - #20328 Use AsynchronousFileChannel + DataBufferUtils in WebFlux resource resolver/transformer chain (_**""depends on""**_) - #20282 Add write methods to DataBufferUtils","closed","status: invalid,","spring-projects-issues","2017-07-14T11:16:39Z","2019-01-12T05:20:35Z"
"","20328","Use AsynchronousFileChannel + DataBufferUtils in WebFlux resource resolver/transformer chain [SPR-15773]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15773](https://jira.spring.io/browse/SPR-15773?redirect=false)** and commented  Several classes in the the WebFlux static resource handling read directly from the `InputStream` for static resources -- `CssLinkResourceTransformer`, `AppCacheManifestTransformer`, and `ContentVersionStrategy`. Those need to change to open an AsynchronousFileChannel and pass that to DataBufferUtils#read just like ResourceEncoder and ResourceRegionEncoder do.  ---  **Issue Links:** - #20329 Provide control over thread resources used for file I/O in WebFlux (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/57221ab15cc18549d8342e1c9163a47e225433d8, https://github.com/spring-projects/spring-framework/commit/b0422d02dc4ec727bdb43ace2627bf004828100d, https://github.com/spring-projects/spring-framework/commit/d56fedc226288ebca3afb248679591c4c9dbb070","closed","type: enhancement,","spring-projects-issues","2017-07-14T11:13:34Z","2019-01-11T16:25:26Z"
"","20274","Update getAttribute on ServerWebExchange and WebSession to align with Map getOrDefault [SPR-15718]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15718](https://jira.spring.io/browse/SPR-15718?redirect=false)** and commented   ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8f4eb235401374a6c3de3649fa8e58beb5b308de, https://github.com/spring-projects/spring-framework/commit/9253facf029e1592b5d9f2e0fd72fe47d3cb4515, https://github.com/spring-projects/spring-framework/commit/7de6cfa1df3cc04c08543b05010244c020efcd40","closed","type: enhancement,","spring-projects-issues","2017-06-29T15:33:25Z","2017-07-24T07:51:16Z"
"","20233","Provide hook for framework customizations of the WebTestClient MockServerSpec [SPR-15674]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15674](https://jira.spring.io/browse/SPR-15674?redirect=false)** and commented  `WebTestClient` should provide something along the lines of `ConfigurableMockMvcBuilder#apply`, i.e. a single place in the setup where a framework (such as Spring Security) can customize the `MockServerSetup`. So the end result might be:  ```java WebTestClient.bindToController(new TestController())     .apply(springSecurity())     .build(); ```  In addition to a hook for build-time `MockServerSetup` customizations, we should also explore a hook for per-instance customizations that would turn this:  ```java ExchangeMutatorWebFilter mutator = new ExchangeMutatorWebFilter();  WebTestClient client = WebTestClient.bindToApplicationContext(this.context)     .webFilter(mutator)     .build();  client.filter(mutator.perClient(withUser()))     .get().uri(""/principal"")     .exchange()     .expectStatus().isOk(); ```  Into something more like:  ```java WebTestClient client = WebTestClient.bindToApplicationContext(this.context)     .apply(springSecurity())     .build();  client.apply(springSecurityWithUser())     .get().uri(""/principal"")     .exchange()     .expectStatus().isOk(); ```  ---  **Affects:** 5.0 RC2  **Issue Links:** - #21631 WebTestClient ignores WebSessionManager bean","closed","type: enhancement,","spring-projects-issues","2017-06-16T15:29:23Z","2019-01-11T16:04:43Z"
"","20228","Disable Servlet request async timeout for reactive type streaming scenarios in Spring MVC  [SPR-15669]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15669](https://jira.spring.io/browse/SPR-15669?redirect=false)** and commented  Similar to #20023 for WebFlux on a Servlet container, in Spring MVC when a controller turns a reactive type such as Flux or Observable and that results in streaming (e.g. SSE) we need to disable the timeout and let it be controlled via operators instead.  ---  **Affects:** 5.0 RC2  **Issue Links:** - #20023 Configure default settings for Servlet async request timeout for WebFlux  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ef3e309c12853378051d294ad82d68c9299d0c17","closed","type: bug,","spring-projects-issues","2017-06-15T16:32:22Z","2019-01-11T16:07:27Z"
"","20222","Option to combine typed PathPattern + PathPattern in PathPattern [SPR-15663]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15663](https://jira.spring.io/browse/SPR-15663?redirect=false)** and commented  `PathPattern` has a combine method that takes and returns String. This doesn't fit with the overall theme of replacing String's with parsed patterns. It also means that each `PatternsRequestCondition` needs to have access to the parser rather than simply combining with the patterns of the other condition.  In turn meeting the PathMatcher contract for comine is easy to implement.   ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a06da0019fe8bf855c49eee233650193b5aba8b4","closed","type: enhancement,","spring-projects-issues","2017-06-13T22:12:55Z","2017-07-24T07:51:14Z"
"","20209","Update Spring MVC after PathPatternParser changes to encode patterns [SPR-15650]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15650](https://jira.spring.io/browse/SPR-15650?redirect=false)** and commented  After the changes for #20199 we need to ensure smooth integration when `PathPatternParser` is configured for use in Spring MVC. It likely means ensuring `urlDecode=false` in `UrlPathHelper`. In any case we need to test this out and ensure it's possible to use Spring MVC and WebFlux consistently even if default configuration is not.  ---  This issue is a sub-task of #20199","closed","status: declined,","spring-projects-issues","2017-06-09T20:52:53Z","2019-01-11T16:07:43Z"
"","20208","Update Spring MVC to allow use of query param as replacement of path extension for content negotiation  [SPR-15649]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15649](https://jira.spring.io/browse/SPR-15649?redirect=false)** and commented  ---  This issue is a sub-task of #20198  **Issue Links:** - #15740 Fallback to defaultContentType if nothing more specific and producible has been specified in request","closed","type: task,","spring-projects-issues","2017-06-09T20:46:51Z","2019-01-11T16:09:21Z"
"","20207","Expose structured request path from ServerHttpRequest in WebFlux [SPR-15648]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15648](https://jira.spring.io/browse/SPR-15648?redirect=false)** and commented  Instead of using Strings for parts of the path (contextPath vs pathWithinApplication), provide an Object-based representation of the path exposing its structure at multiple levels -- contextPath + pathWithinApplication, path segments, path segment value + path segment parameters.  A typed Object-based representation of the path means it only needs to be parsed once and then passed, any number of times, into `PathPattern` for matching purposes. Internally it can check the number of segments. Now that `PathPattern` encodes patterns, we could also ensure that encoded characters are in a consistent case.  Yet another benefit is that any code can work with the path with support for seeing or not seeing the context path, path parameter content, and so on.  ---  **Issue Links:** - #20199 Use undecoded path for request mapping in WebFlux  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2d17411ec4b3f0b973264ab270689b8f578d3e52, https://github.com/spring-projects/spring-framework/commit/38a12ed4ba54b6929db0f114a5fa439677e441ac","closed","type: enhancement,","spring-projects-issues","2017-06-09T20:37:52Z","2019-01-11T16:09:19Z"
"","20199","Use undecoded path for request mapping in WebFlux [SPR-15640]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15640](https://jira.spring.io/browse/SPR-15640?redirect=false)** and commented  # Status Quo  By default Spring MVC decodes the path before using it for request mapping purposes. In turn that means `@RequestMapping` patterns can be expressed in undecoded form. This works just fine until the path contains encoded characters with reserved URI meaning such as a ""/"" or "";"" where decoding alters the structure of the path. Applications [can configure](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-config-path-matching) a `UrlPathHelper` that does not decode the URL path which works fine and in that case URI variables are automatically decoded before being injected into a controller with `@PathVariable`. However the literal parts of mapping patterns must now be expressed with encoded characters.  # WebFlux  In WebFlux the URL path will not be decoded for request mapping purposes. Patterns can still be expressed in undecoded form but will be encoded as UTF-8 and stored that way to match to the encoded URL path of incoming requests. This eliminates the need to specify whether the path should be decoded or not along exposure to issues that can arise from decoding the path.  # Spring MVC  Since support for encoding patterns will likely be in the new `PathPatternParser`   - used by default in WebFlux, this will be a natural fit for WebFlux. The goal for Spring MVC is for applications to be able to achieve the same affect by switching to use the `PathPatternParser`.  ---  **Sub-tasks:** - #20209 Update Spring MVC after PathPatternParser changes to encode patterns  **Issue Links:** - #20207 Expose structured request path from ServerHttpRequest in WebFlux - #19559 Review path matching options and defaults in the new path matching algorithms - #20198 Favor query parameters for content negotiation in WebFlux","closed","type: enhancement,","spring-projects-issues","2017-06-07T19:38:22Z","2019-01-11T16:08:45Z"
"","20198","Favor query parameters for content negotiation in WebFlux [SPR-15639]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15639](https://jira.spring.io/browse/SPR-15639?redirect=false)** and commented  # Status Quo  Spring MVC supports [suffix pattern matching](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-ann-requestmapping-suffix-pattern-match) for mapping requests to controllers along with a [content negotiation](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-config-content-negotiation) strategy that can derive the content-type for the response from a file extension in the URI path.  Suffix pattern matching [can cause ambiguity|SPR-6164] when used in combination with URI variables unless applications [limit suffix pattern matching](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-config-path-matching) to a list of explicitly registered file extension. When it is impractical to register supported extensions explicitly, it is hard to distinguish a file extension from a regular dot in the path since the list of possible file extensions is incredibly long (in the thousands depending on the source used).  File extensions can also be difficult to extract and use consistently when path parameters (matrix variables) are present, in addition to path decoding and other issues that can be further complicated or hard to reason about through the use of configuration options. Such flexibility can also lead to security issues (see [Suffix Pattern Matching and RFD](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-ann-requestmapping-rfd)).  # WebFlux  The above are sufficient reason for WebFlux to not support suffix pattern matching and to (through default configuration) favor the use of a query parameter for URI-based content negotiation instead. This means out of the box, the presence of a file extension in the path of a URL will have no special meaning for request mapping and no impact on content negotiation. The only exception is where a file extension is naturally present in a URL such as a static resource URL for which `ResourceWebHandler` will use the `MediaTypeFactory` to look up the content type for the matched file system resource.  # Spring MVC  The goal of this ticket is also to ensure that applications can achieve the same effect on the Spring MVC side by turning off suffix pattern matching and using query parameter based content negotiation including lookups through the `MediaTypeFactory` (currently not supported).  ---  **Sub-tasks:** - #20208 Update Spring MVC to allow use of query param as replacement of path extension for content negotiation  **Issue Links:** - #20199 Use undecoded path for request mapping in WebFlux - #19559 Review path matching options and defaults in the new path matching algorithms  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b0e8e7f536e021836ec7737d6d97395f5736f2ff, https://github.com/spring-projects/spring-framework/commit/01a92517bdb657193f2aabc99c20113dada232fa, https://github.com/spring-projects/spring-framework/commit/b65bfdb9795a0a8cd2f0578dd589fd26a4b89bfe, https://github.com/spring-projects/spring-framework/commit/cb604738cf29caec954c1c7b550f9356b97adb86","closed","type: enhancement,","spring-projects-issues","2017-06-07T19:14:37Z","2019-01-11T16:08:41Z"
"","20171","Improve docs around the use of ""Forwarded"" and ""X-Forwarded-*"" headers [SPR-15612]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15612](https://jira.spring.io/browse/SPR-15612?redirect=false)** and commented  The reference documentation does not cover the topic and it should also be documented more consistently in the Javadoc of APIs that make use of such headers.  ---  **Affects:** 4.3.8  **Issue Links:** - #20169 ForwardedHeaderFilter should provide option to ""remove"" forwarded headers without using them  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4d525909642bc25e2addd8b2c4980a7ac26eee74, https://github.com/spring-projects/spring-framework/commit/8c206bf477e6fe168ffece6ff2ffb7dd46f5d571","closed","in: web,","spring-projects-issues","2017-06-01T19:54:40Z","2019-01-11T15:40:59Z"
"","20169","ForwardedHeaderFilter should provide option to ""remove"" forwarded headers without using them [SPR-15610]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15610](https://jira.spring.io/browse/SPR-15610?redirect=false)** and commented  Normally the ForwardedHeaderFilter wraps the request in order incorporate the information contained in ""forwarded"" type headers (e.g. ""X-Forwarded-*"", ""Forwarded"") and also ""removes"" those headers so they are not visible to code after the filter.  It would be easy enough to add a mode where the filter only ""removes"" but doesn't use the information from the headers. This could be used as a defensive measure to ensure such headers are always ignored if not expected.  ---  **Affects:** 4.3.8  **Issue Links:** - #20171 Improve docs around the use of ""Forwarded"" and ""X-Forwarded-*"" headers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/04a96ffa275461c8159e2407120597d51e6a8411, https://github.com/spring-projects/spring-framework/commit/895fa2ea7b272143fef828443686999f635a819a","closed","type: enhancement,","spring-projects-issues","2017-06-01T18:31:41Z","2019-01-11T15:41:02Z"
"","20074","RequestPartMethodArgumentResolver in WebFlux does not support decoding (e.g. to JSON) the content of a part  [SPR-15515]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15515](https://jira.spring.io/browse/SPR-15515?redirect=false)** and commented  At present the `RequestPartMethodArgumentResolver` does nothing more than access the `Part`. It needs to support decoding of the `Part` content based on its declared content type.  Note also an [issue in the multipart library](https://github.com/synchronoss/nio-multipart/issues/6) which only supports browser form scenarios whereas `@RequestPart` is specifically designed for REST scenarios behaving like `@RequestBody` for individual parts.    ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2d37c966b2831add8fd0e01efa9c1eb8240fbdd3, https://github.com/spring-projects/spring-framework/commit/be0b67119121901dc0221e0181a6cdee30e568dc","closed","type: enhancement,","spring-projects-issues","2017-05-04T19:43:12Z","2017-06-14T10:12:19Z"
"","20067","Remove support for ""request params"" from WebFlux [SPR-15508]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15508](https://jira.spring.io/browse/SPR-15508?redirect=false)** and commented  In the Servlet API ""request params"" provide Map-like access to both URI query params and form data (parsed from the request body). The concept fits well in the Servlet API where ""request params"" are accessed in a blocking fashion whenever needed. It does not however fit with use of the Servlet 3.1 non-blocking I/O API which is mutually exclusive with any calls to get ""request params"" since those may block.  In M3 #19567 introduced support for Servlet API style ""request params"" in WebFlux by parsing form data eagerly (without blocking) and then caching it. This was a reasonable trade-off for simple forms that made it feasible to support the concept of ""request params"".  Recently #19114 introduced support for multipart form data. A [multipart request](https://tools.ietf.org/html/rfc7578#section-1) may represent a browser form with a file input field, or it be a non-browser client sending a request with potentially large parts of data of any media type. Support for ""request params"" is now a challenge. While eager parsing + caching multipart form data may be okay for browser forms (in combination with a max file upload limit) it precludes support for streaming large multiparts sequentially, something that is a natural fit for WebFlux, e.g. a `Flux` controller method argument.  This ticket is to remove the concept of ""request params"" from WebFlux in favor of the more explicit, existing support for access to query params vs form data. We can continue to support data binding of both URI query params and form data (including multipart data) to a command object (via `@ModelAttribute`). In WebFlux however `@RequestParam` or `@RequestMapping(params=""..."")` would have to refer to URI query params only. This trade-off seems a better fit for WebFlux.  In short the concept of a single bucket (Map) for something so disparate as simple URI query params on one end and very large parts in a multipart form data request on the other is just not feasible while also providing support for on-demand, non-blocking parsing of large content.  ---  **Affects:** 5.0 M5  **Issue Links:** - #19114 Reactive multipart request support - #19567 Support for ""request parameters"" (query string + form data) in ServerWebExchange - #20738 Support for form data via `@RequestParam` on WebFlux  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1881727b37a75bd9cd3287ae57d9066c978c345b","closed","type: task,","spring-projects-issues","2017-05-02T16:25:37Z","2019-01-13T05:16:23Z"
"","20065","Improve 500 error handling and reporting in WebFlux [SPR-15506]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15506](https://jira.spring.io/browse/SPR-15506?redirect=false)** and commented  HttpWebHandlerAdapter has a debug message only.  ExceptionHandlingWebHandler has an error level message + extra smarts around suppressing ""Broken Pipe"" errors. However that only applies to DispatcherHandler setup, and not a typical setup with the functional web framework.  We need to centralize move the final 500 error and related logging to HttpWebHandlerAdapter.  ---  **Affects:** 5.0 M5  **Issue Links:** - #20069 Common root cause introspection algorithm in NestedExceptionUtils","closed","type: enhancement,","spring-projects-issues","2017-05-02T15:24:39Z","2019-01-11T17:10:47Z"
"","20024","WebFlux should support Flux and Flux rendering [SPR-15464]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15464](https://jira.spring.io/browse/SPR-15464?redirect=false)** and commented  Currently `Flux` causes NullPointerException's in message writers where there is general assumption about the generic type always being present.  Closely related to that is the rendering of `Flux` which logically should be possible to handle through Jackson for example but the `Jackson2Encoder` rejects it because `ObjectMapper#canSerialize` returns false for `java.lang.Object`.  For `Flux` or `Flux` we can reasonably assume that the actual values will be some sub-class of `Object` so we need to explicitly allow it in the Jackson encoder. This is also consistent with the treatment of `{List.class` which Jackson's `ObjectMapper` approves of.  ---  **Affects:** 5.0 M5  **Issue Links:** - #20017 Spring MVC `@ResponseBody` handling of Flux inconsistent when type of result is unknown  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cc102c2fcdd1d1e3e34cfb09e5efe21ad786e2b1","closed","type: enhancement,","spring-projects-issues","2017-04-19T21:53:04Z","2019-01-13T05:16:30Z"
"","20023","Configure default settings for Servlet async request timeout for WebFlux [SPR-15463]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15463](https://jira.spring.io/browse/SPR-15463?redirect=false)** and commented  The timeout for Servlet 3.0 async requests [is defined](https://docs.oracle.com/javaee/7/api/javax/servlet/AsyncContext.html#setTimeout-long-) roughly as the time between `ServletRequest#startAsync` and calls to either `AsyncContext#dispatch` or `AsyncContext#complete`.  In WebFlux we call `ServletRequest#startAsync` automatically and then use Servlet 3.1 non-blocking I/O with `AsyncContext#complete` at the end. The `dispatch` does not fit into our processing model which is not based on the Servlet API to begin with and we call `startAsync` quite early, way before we could know if the request will require streaming or not.  For now our only option is to set the `AsyncContext` to never time out (-1) in order to make streaming scenarios possible. The downside is the lack of protection for non-streaming requests but then again even in the Servlet API there is no protection against regular requests taking indefinitely to process.  It should also be noted that both Reactor and RxJava provide timeout operators so that's something natural to express. In the future we can consider implementing a timeout feature that's built into the Spring WebFlux processing model and works across all runtimes. For example a timeout composed on the `Mono` returned from the `HttpHandler`.  ---  **Affects:** 5.0 M5  **Issue Links:** - #20228 Disable Servlet request async timeout for reactive type streaming scenarios in Spring MVC  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4f3db9b822bf9769d5f2be5e66f0eca3d7f74370","closed","type: enhancement,","spring-projects-issues","2017-04-19T17:52:02Z","2019-01-11T16:39:41Z"
"","19966","Consider error handling strategy and support for WebClient  [SPR-15403]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15403](https://jira.spring.io/browse/SPR-15403?redirect=false)** and commented  Currently there is no configurable, cross-cutting mechanism to deal with error responses along the lines of `ResponseErrorHandler` in `RestTemplate`.  `WebClient#exchange()` does provide access to the response status and headers through the `ClientResponse` as an extra step before deciding how to decode the body and that is already big help.  However the shortcuts `ClientResponse#bodyToMono` and `ClientResponse#bodyToFlux` raise `WebClientException` which is fine but then there should probably be some control over how error responses are processed and turned into an exception, possibly decoding error details from the response body. Or the alternative would be for those shortcut methods to not raise an exception and let applications check the status first.  In the end I'm not entirely sure what an error handling mechanism should look like on the `WebClient` side. The purpose of this ticket is to give proper consideration to the preferred ways of dealing with error responses. A key use case would be REST APIs with a common representation of error details in the body of the response.  ---  **Affects:** 5.0 M5  **Issue Links:** - #19860 Simplify access to request/response object in WebClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ea85431ac55acf9e3b8dfca51879727c99c2d5f7  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2017-03-30T17:49:03Z","2019-01-11T16:44:32Z"
"","19961","Review use of Class vs ResolvableType in WebFlux APIs [SPR-15398]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15398](https://jira.spring.io/browse/SPR-15398?redirect=false)** and commented   ---  **Affects:** 5.0 M5","closed","status: declined,","spring-projects-issues","2017-03-29T14:01:30Z","2017-05-08T08:41:48Z"
"","19938","CharSequenceEncoder should support all media types [SPR-15374]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15374](https://jira.spring.io/browse/SPR-15374?redirect=false)** and commented  Currently `CharSequenceEncoder` supports `""text/plain""` only but it is inconsistent with `StringDecoder` which decodes for any media type and so does `StringHttpMessageConverter` in both directions.  Note that simply adding `\*/\*` to the list of supported media types does not work because on the reactive side a `Flux` can be handled with `CharSequenceEncoder` and `ServerSentEventMessageWriter` unlike Spring MVC where currently you need a special streaming type `SseEmitter`. So if `\*/\*` is configured for String encoding, SSE never gets a chance even with `""Accept: text/event-stream""`.    ---  **Affects:** 5.0 M5","closed","type: bug,","spring-projects-issues","2017-03-22T21:15:38Z","2019-01-11T15:01:02Z"
"","19934","Support server-side HttpMessage[Reader|Writer] in WebFlux fn [SPR-15370]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15370](https://jira.spring.io/browse/SPR-15370?redirect=false)** and commented  Currently (post M5) annotated controller infrastructure uses `ServerHttpMessage[Reader|Writer]` exclusively with access to information available only the server side, e.g. the request + handler method signature information. The latter is not applicable to functional endpoints but the former nevertheless is. Consider for example `ResourceHttpMessageWriter` which detects HTTP ranges in the request and switches to writing resource regions instead of the entire resource.  This ticket is to consider some way to align the use of `ServerHttpMessage[Reader|Writer]` on the functional side too. In the very least to consider how to support cases where writing is asymetrical with the client side and can benefit from access to the request.    ---  **Affects:** 5.0 M5","closed","type: enhancement,","spring-projects-issues","2017-03-21T15:28:37Z","2017-05-08T08:41:43Z"
"","19929","Support for reactive types in return values from Spring MVC controllers [SPR-15365]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15365](https://jira.spring.io/browse/SPR-15365?redirect=false)** and commented  The use of the reactive `WebClient` is expected for use in a Spring WebFlux application but is also just as beneficial in Spring MVC controllers on a Servlet stack along with other similar scenarios such as a Spring MVC controller using Spring Data Reactive.  It should be possible to return a reactive type such as Reactor Flux/Mono or RxJava Observable from a controller and have that be supported by Spring MVC.  Note that [this was considered](#18618) and resolved as ""Won't Fix"" a year ago. Knowing what we know now, it should be quite possible to achieve this technically and also the motivating use cases are much clearer.  ---  **Affects:** 5.0 M5  **Issue Links:** - #18618 RxJava Observable/Single and Reactor Flux/Mono as Spring MVC handler method return types  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f293c4d84bb87c9e2d2b68da2bce7ff6e3a7bdae, https://github.com/spring-projects/spring-framework/commit/ae1ed16cb89cffafb5d6e5ab3a090399d147e721, https://github.com/spring-projects/spring-framework/commit/62c1e44db212ab55b748f6d245f649289d05a361, https://github.com/spring-projects/spring-framework/commit/f7548a87ed44c4550be443f633463f741aa7b4bb, https://github.com/spring-projects/spring-framework/commit/d9221fb87d046f0311b4b97fd9c98d62d5c71998","closed","type: enhancement,","spring-projects-issues","2017-03-20T18:21:41Z","2019-01-14T04:35:53Z"
"","19921","ResourceRegionHttpMessageWriter should not use the response content-type [SPR-15358]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15358](https://jira.spring.io/browse/SPR-15358?redirect=false)** and commented  When a request includes byte ranges, `ResourceHttpMessageWriter` delegates to `ResourceRegionHttpMessageWriter`. In that case the content type of the response has to be set to `""multipart/byteranges""` instead of to what it would have been if the full resource was written (e.g. `""text/plain""`). Each region is then written with the actual content-type in the boundary section.  `ResourceRegionHttpMessageWriter` extends `EncoderHttpMessageWriter` and has depended on the incorrect wrong behavior described under #19920. After the fix for #19920, each region is written with the content type of the response, i.e. ""multipart/byteranges"" instead of the actual content type, i.e. ""text/plain"".  ---  **Affects:** 5.0 M5  **Issue Links:** - #19920 Content-type resolution issue in EncoderHttpMessageWriter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c735ffb39b0404e97ae72d9e2c6f5e52fe6eb18c","closed","type: bug,","spring-projects-issues","2017-03-17T20:56:14Z","2019-01-11T15:04:01Z"
"","19920","Content-type resolution issue in EncoderHttpMessageWriter [SPR-15357]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15357](https://jira.spring.io/browse/SPR-15357?redirect=false)** and commented  Currently when using `EncoderHttpMessageWriter` the MediaType set on the response may differ from that passed to the Encoder. This is because `EncoderHttpMessageWriter` has extra logic to fall back on a default `MediaType` and charset (if the negotiated media type is null or not concrete). The resulting media type is set on the response but is ignored for encoding purposes.  In practice the negotiated media type passed in will never be null nor will it have wildcards but it could be application/octet-stream or might not have a charset. A related corner case is when the ResponseEntity specifies a content type. In those cases the response ends up with one thing, the Encoder sees another.  The behavior is also inconsistent with `AbstractHttpMessageConverter`.  ---  **Affects:** 5.0 M5  **Issue Links:** - #19921 ResourceRegionHttpMessageWriter should not use the response content-type  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2979b37ae3badd2ff6e8048c1b21e8b6229a35f0","closed","type: bug,","spring-projects-issues","2017-03-17T20:47:45Z","2019-01-11T15:04:13Z"
"","19801","Expose ResponseCookie map from ClientResponse [SPR-15236]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15236](https://jira.spring.io/browse/SPR-15236?redirect=false)** and commented  `ClientResponse` should expose the map of cookies available from `ClientHttpResponse`. This would mirror the support for cookies in `ClientRequest` and `ClientHttpRequest` except on the response side a `ResponseCookie` has extra attributes beyond a String value so it probably should be a `MultiValueMap` as opposed to `MultiValueMap`.   ---  **Affects:** 5.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/da4af6157e13943ac27b1da19f540bb254c49a8c","closed","type: enhancement,","spring-projects-issues","2017-02-08T19:03:59Z","2017-02-23T09:29:10Z"
"","19800","Consistently expose FormHttpMessageReader and Writer [SPR-15235]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15235](https://jira.spring.io/browse/SPR-15235?redirect=false)** and commented  The `WebClient` should have both reader and writer configured.  `ServerWebExchange` exposes form data from the request so no need for the reader on the server side but the writer should be configured. Currently it's only available with functional but not annotated endpoints.  The `DefaultHandlerStrategiesBuilder` also configures the reader. [Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma) should `BodyExtractors.toFormData` delegate to `ServerWebExchange.getFormData` which has the advantage of ensuring the content is consumed once and cached, which can be an issue since form data is often accessed more than once and that can even be outside your control, e.g. from a filter (e.g. HiddenHttpMethodFilter) and then from a handler or even a view. This is one reason it's exposed at that level.    ---  **Affects:** 5.0 M4","closed","status: invalid,","spring-projects-issues","2017-02-08T18:59:11Z","2019-01-12T05:21:17Z"
"","19799","Update body related options in ClientRequest  [SPR-15234]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15234](https://jira.spring.io/browse/SPR-15234?redirect=false)** and commented  Currently if an `ExchangeFilterFunction` wants to enrich the request with a header it uses `ClientRequest.from(request)` which copies the HTTP method, URL, headers, and cookies from the current request. The body however must be accessed and passed explicitly to the builder. This can be seen in the built-in [basicAuthentication filter](https://github.com/spring-projects/spring-framework/blob/f2967467e08a969a4e338c7b9a342bb2dda7f971/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctions.java#L50-L52).  I can see that this is required for the Builder to work which has a separate `build()` (i.e. no body) vs `body` methods returning a `ClientRequest`. However now that `WebClient` provides all the necessary convenience to perform an exchange perhaps we can update the builder so that body methods return `Builder` and only `build()` actually builds the request instance. Then the `from(ClientRequest)` method could also copy the body.    ---  **Affects:** 5.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/45770d73ede714533741f97275996ea7a04a381a","closed","type: enhancement,","spring-projects-issues","2017-02-08T18:36:55Z","2017-02-23T09:29:12Z"
"","19775","Controller API for HTML rendering in WebFlux [SPR-15211]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15211](https://jira.spring.io/browse/SPR-15211?redirect=false)** and commented  Currently the reactive module does not have a `ModelAndView` equivalent. We could create one just like it but it would be useful to think more broadly about a controller API for view-resolution use cases. Similar to what `ResponseEntity` and its builders but for HTML controllers.  ---  **Affects:** 5.0 M4  **Issue Links:** - #19482 Reactive type support in org.springframework.core.Conventions","closed","type: enhancement,","spring-projects-issues","2017-01-31T15:28:45Z","2019-01-11T14:34:15Z"
"","19756","Rename spring-web-reactive to spring-webflux [SPR-15190]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15190](https://jira.spring.io/browse/SPR-15190?redirect=false)** and commented  The current module name `spring-web-reactive` is a bit of a misnomer because it does not contain all ""reactive, web"" functionality as its name advertises. The low level ""reactive, web"" infrastructure for HTTP runtimes and Reactive Streams is in `spring-web`. The higher level, generic web framework support comparable to the Servlet API is also in `spring-web`.  The situation mirrors the `spring-webmvc` module which contains the Spring MVC framework but also builds on a lot of infrastructure in the general `spring-web` module. We need a similar, distinct name for the reactive web endpoint framework.  Note also that the module name change does not have to impact the package structure. In other words just like Spring MVC actually lives in `org.springframework.web.servlet` while its module name is `spring-webmvc`, the top level package in the `spring-web-reactive` module can remain `org.springframework.web.reactive` while the module name is changed.    ---  **Affects:** 5.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/73999567083b1c20cad1aa47393056c501882663, https://github.com/spring-projects/spring-framework/commit/080a3d6a41034e9e746be0c555af81f3d4f8cf9e, https://github.com/spring-projects/spring-framework/commit/fafd2d20e177d56b5d08dfa630b920d7095877da","closed","type: task,","spring-projects-issues","2017-01-26T14:52:03Z","2017-02-23T09:29:13Z"
"","19715","Restructure Web Section of the documentation to include reactive support [SPR-15149]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15149](https://jira.spring.io/browse/SPR-15149?redirect=false)** and commented  The current chapter on reactive support is a temporary solution for the milestone phase. We need to take the steps to restructure the Web section so that it includes Servlet and Reactive stack based content side by side.  ---  **Affects:** 5.0 M4  **Sub-tasks:** - #18762 Please add documentation and examples on reactive WebSockets - #20558 Docs for WebTestClient are pretty thin  **Issue Links:** - #19923 Improve webclient and webflux documentation - #19925 Documentation for WebFlux fn","closed","in: web,","spring-projects-issues","2017-01-16T16:23:05Z","2019-01-11T15:31:40Z"
"","19698","Support for @ControllerAdvice on the reactive side [SPR-15132]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15132](https://jira.spring.io/browse/SPR-15132?redirect=false)** and commented  `@ControllerAdvice` is essential for centralized exception handling across controllers.   ---  **Affects:** 5.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ccb2c6530ee76d785eb1576411f860f291445266, https://github.com/spring-projects/spring-framework/commit/c1086f41144e43f0c0dab5761497330c91452e90, https://github.com/spring-projects/spring-framework/commit/24034447f60ac62caf2f1683eeff7ed88aa89740, https://github.com/spring-projects/spring-framework/commit/d8b150e83d1a5d617ae73d1a65d1f9364dff6d9b  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2017-01-11T16:30:37Z","2017-05-08T08:41:47Z"
"","19873","Spring WebFlux using Kotlin with RouterDsl nested mappings not matching [SPR-15310]","**[Roman Rodov](https://jira.spring.io/secure/ViewProfile.jspa?name=strelok)** opened **[SPR-15310](https://jira.spring.io/browse/SPR-15310?redirect=false)** and commented  Using Spring Boot 2.0.0 snapshot and _spring-webflux_ via the starter. This piece of code:  ```java @Component class TestRouter() : RouterFunction {   override fun route(request: ServerRequest) = route(request) {     ""/"".route {       GET(""/hello"") { ServerResponse.ok().body(BodyInserters.fromObject(""World"")) }       ""/{id}"".route {         GET(""/hello"") { ServerResponse.ok().body(BodyInserters.fromObject(""World ${request.pathVariable(""id"")}"")) }       }     }   } } ```  does not work as expected (at least as I would expect:))  ``` ➜  ~ curl -i http://localhost:8080/hello HTTP/1.1 200 OK transfer-encoding: chunked Content-Type: text/plain;charset=UTF-8 World ```  but:  ``` ➜  ~ curl -i http://localhost:8080/1/hello HTTP/1.1 404 Not Found content-length: 0 ```  Working case trace:  ``` 2017-03-03 00:58:03.865 TRACE 7666 --- [ctor-http-nio-4] o.s.w.r.f.server.RequestPredicates       : Pattern ""//**"" matches against value ""/hello"" 2017-03-03 00:58:03.865 DEBUG 7666 --- [ctor-http-nio-4] o.s.w.r.function.server.RouterFunctions  : Nested predicate ""//**"" matches against ""GET /hello"" 2017-03-03 00:58:03.865 TRACE 7666 --- [ctor-http-nio-4] o.s.w.r.f.server.RequestPredicates       : Method ""GET"" matches against value ""GET"" 2017-03-03 00:58:03.866 TRACE 7666 --- [ctor-http-nio-4] o.s.w.r.f.server.RequestPredicates       : Pattern ""/hello"" matches against value ""/hello"" 2017-03-03 00:58:03.866 DEBUG 7666 --- [ctor-http-nio-4] o.s.w.r.function.server.RouterFunctions  : Predicate ""(GET && /hello)"" matches against ""GET /hello"" ```  Not working case trace:  ``` 2017-03-03 00:59:26.958 TRACE 7666 --- [ctor-http-nio-1] o.s.w.r.f.server.RequestPredicates       : Pattern ""//**"" matches against value ""/1/hello"" 2017-03-03 00:59:26.958 DEBUG 7666 --- [ctor-http-nio-1] o.s.w.r.function.server.RouterFunctions  : Nested predicate ""//**"" matches against ""GET /1/hello"" 2017-03-03 00:59:26.958 TRACE 7666 --- [ctor-http-nio-1] o.s.w.r.f.server.RequestPredicates       : Method ""GET"" matches against value ""GET"" 2017-03-03 00:59:26.958 TRACE 7666 --- [ctor-http-nio-1] o.s.w.r.f.server.RequestPredicates       : Pattern ""/hello"" does not match against value ""/1/hello"" 2017-03-03 00:59:26.959 TRACE 7666 --- [ctor-http-nio-1] o.s.w.r.f.server.RequestPredicates       : Pattern ""/{id}/**"" matches against value ""/1/hello"" 2017-03-03 00:59:26.959 DEBUG 7666 --- [ctor-http-nio-1] o.s.w.r.function.server.RouterFunctions  : Nested predicate ""/{id}/**"" matches against ""GET /1/hello"" 2017-03-03 00:59:26.959 TRACE 7666 --- [ctor-http-nio-1] o.s.w.r.f.server.RequestPredicates       : Method ""GET"" matches against value ""GET"" 2017-03-03 00:59:26.959 TRACE 7666 --- [ctor-http-nio-1] o.s.w.r.f.server.RequestPredicates       : Pattern ""/hello"" does not match against value ""/1/hello"" ```  This seems like a bug (as the ""/{id}"".route {..} supposedly is using RouterFunctions.nest), but I could be wrong. Your thoughts and help are welcome.  I obviously know that I can make _/1/hello_ work by just writing GET(""/{id}/hello"") { .. }, but I am interested in the nested .route { .. } variant as it supports my use case of adding nested routes from another location (like a map, etc).  As discussed with Sébastien Deleuze in kotlinlang slack this seems like a bug.  ---  **Affects:** 5.0 M5  **Reference URL:** http://stackoverflow.com/questions/42553822/spring-web-flux-reactive-functional-route-not-working-as-expected-with-kotlin  **Issue Links:** - #19899 Add PathPattern method that gives remaining path given a match (_**""depends on""**_) - #19980 Allow for single-pass matching in PathPattern (_**""depends on""**_)","closed","in: web,","spring-projects-issues","2017-03-02T22:41:40Z","2019-01-12T16:45:14Z"
"","19809","UriComponentsBuilder does not correctly preserve or encode query strings [SPR-15244]","**[Rolf Watermann](https://jira.spring.io/secure/ViewProfile.jspa?name=rolf.watermann)** opened **[SPR-15244](https://jira.spring.io/browse/SPR-15244?redirect=false)** and commented  According to  https://tools.ietf.org/html/rfc3986#section-3.1 https://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1  and some helpful explanations in  http://stackoverflow.com/questions/2678551/when-to-encode-space-to-plus-or-20 http://stackoverflow.com/questions/6855624/plus-sign-in-query-string  my understanding is, that a '+' char in the query string of a URL represents a space (equivalent to %20), while a literal + must be encoded as %2B.  Given that, I would expect the attached test to be completely green.  However, UriComponentsBuilder rejects + chars in encoded query strings and does not encode spaces and + chars in unencoded query strings.   ---  **Affects:** 4.3.4  **Attachments:** - [Spr15244.java](https://jira.spring.io/secure/attachment/25489/Spr15244.java) (_2.61 kB_) - [UriComponentsBuilderTest.java](https://jira.spring.io/secure/attachment/23704/UriComponentsBuilderTest.java) (_2.33 kB_)  1 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2017-02-10T14:10:50Z","2019-01-12T16:33:33Z"
"","20184","Provide insight of singleton instance [SPR-15625]","**[Rocky Shang](https://jira.spring.io/secure/ViewProfile.jspa?name=rocky)** opened **[SPR-15625](https://jira.spring.io/browse/SPR-15625?redirect=false)** and commented  spring-bean exposes beans information through LiveBeansView. But there is no such info for instance level.  Since fields can be inject or not if they are annotated by (`@autowired` required=false) At runtime, we should know whether all fields are inject as the behavior may be different for that instance.   ---  **Affects:** 4.3.8","closed","type: enhancement,","spring-projects-issues","2017-06-06T06:51:19Z","2021-02-09T17:23:52Z"
"","20051","Enable Spring to load properties via symbolic links from file system [SPR-15491]","**[Robert Gacki](https://jira.spring.io/secure/ViewProfile.jspa?name=cgi_robertgacki)** opened **[SPR-15491](https://jira.spring.io/browse/SPR-15491?redirect=false)** and commented  In a Spring Boot application, I tried to load external properties from the file system. The path provided to Spring (spring.config.location) points to a symbolic link. In my specific case, I want to use a symlink within a Jenkins build workspace, so I don't have to expose the real file that contains credentials.  From what I found in the source code, prior loading properties for bootstrapping the ApplicationContext, no `org.springframework.core.io.ProtocolResolver` are defined. The `org.springframework.core.io.DefaultResourceLoader` falls back to use URLConnection. For a property path like `file:./foo.properties`, it would use FileURLConnection which does not follow symbolic links (also see https://bugs.openjdk.java.net/browse/JDK-4952532).  I tried to use a `org.springframework.context.ApplicationContextInitializer`. But it turns out, custom ProtocolResolvers are only used after properties have been loaded.  I suggest two solutions:  1. Add a ProtocolResolver by default, that handles ""file:"" locations using the `java.nio.file` API. 2. Load properties in two phases:    1. Load internal properties first, like spring.factory definitions.    2. Then apply ApplicationContextInitializers    3. Then load external / custom properties.    --- No further details from [SPR-15491](https://jira.spring.io/browse/SPR-15491?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-04-27T18:21:09Z","2018-05-28T13:09:00Z"
"","20325","Provide convenience method for applying WebTestClientConfigurer [SPR-15770]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15770](https://jira.spring.io/browse/SPR-15770?redirect=false)** and commented  Right now any extension that wants to provide a `WebTestClientConfigurer` needs to do the following:  ```java client   .mutate()   .apply(mockPrincipal(() -> ""user""))   .build()   ... ```  An extension could [provide a workaround](https://github.com/spring-projects/spring-framework/blob/master/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ExchangeMutatorTests.java#L65) for this by doing something like this:  ```java withIdentity(client, () -> ""user"")    ... ```  However, this workaround requires every extension providing the same logic. Additionally, applying multiple extensions becomes a bit difficult to read.  ```java withFooExtension(     withIdentity(client, () -> ""user""), ""foo"")    ... ```  Alternatively, it would be nice if something like this were provided:  ```java client   .with(mockPrincipal(() -> ""user""))   ... ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f5c54f90b309957b16ebebdeba0d57e8e59d7f37","closed","type: enhancement,","spring-projects-issues","2017-07-14T03:15:19Z","2017-07-24T07:51:15Z"
"","20319","ExchangeFilterFunctions Explicit Model For Basic Authentication Credentials [SPR-15764]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15764](https://jira.spring.io/browse/SPR-15764?redirect=false)** and commented  Currently `ExchangeFilterFunctions` provides a `USERNAME_ATTRIBUTE` and a `PASSWORD_ATTRIBUTE` and will populate the credentials in a Basic authentication header if the attributes are found.  I think this will lead to issues if we provide other ways to authenticate. Consider a client that adds both basic authentication and digest authentication (if this is eventually supported). The user wants to specify to use basic authentication so the attributes are provided. However, digest authentication overrides the basic authentication header.  Instead, it might be better to use a richer domain model for the attributes to ensure the users choice is clear.  The domain model might even provide a way to add itself to read / write the model to the attributes. For example, something like this:  ```java public class BasicAuthenticationCredential implements Consumer { 	private static String ATTRIBUTE_NAME = BasicAuthenticationCredential.class.getName().concat("".ATTRIBUTE_NAME"");  	private final String username; 	private final String password;   	BasicAuthenticationCredential(String username, String password) { 		this.username = username; 		this.password = password; 	}  	public String getUsername() { 		return username; 	}  	public String getPassword() { 		return password; 	}  	@Override 	public void accept(Map attributes) { 		attributes.put(ATTRIBUTE_NAME, this); 	}  	public static BasicAuthenticationCredential get(Map attributes) { 		return (BasicAuthenticationCredential) attributes.get(ATTRIBUTE_NAME); 	} } ```  Consumers would then be able to use:  ```java client.get() 		.uri(""/messages/20"") 		// perhaps add static factory method for BasicAuthenticationCredential 		.attributes(new BasicAuthenticationCredential(""joe"", ""joe"")) ```  Comparing that vs:  ```java client.get() 	.uri(""/messages/1"") 	.attribute(ExchangeFilterFunctions.USERNAME_ATTRIBUTE, ""rob"") 	.attribute(ExchangeFilterFunctions.PASSWORD_ATTRIBUTE, ""rob"") ```  Plus now we would be able to differentiate between the two credential types because we would add a `DigestAuthenticationCredential` if we supported it later on.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1d86c9c3d128f64afa51460e3ed7900963755cfd","closed","type: enhancement,","spring-projects-issues","2017-07-12T17:07:27Z","2017-09-11T12:09:48Z"
"","20311","Revisit nullability annotations towards GA [SPR-15756]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15756](https://jira.spring.io/browse/SPR-15756?redirect=false)** and commented  Currently `@NonNullApi` can be specified at a package level only. It would be nice if there were a way to do this at a type level as well. This is of interest to users migrating to using the annotated approach to handling `null` values who haven't converted their entire code base appropriately and want to avoid warnings.  For example, consider a user who wants to implement `WebSessionManager`. If they create an implementation, like this:  ```java public class MyWebSessionManager implements WebSessionManager { 	@Override 	public Mono getSession(ServerWebExchange serverWebExchange) { 		... 	} } ```  The user is given the warning:  > Not annotated method overrides method annotated with `@NonNullApi`....  To properly resolve this warning, the user would currently need to place `@NonNullApi` at the package level. However, any other APIs within the package would also be impacted. It would be nice if the `@NonNullApi` (or similar annotation) could be placed on the type level.  Obviously in the long run, it would be good for the user to expand through the entire package. However, there is some effort involved in migrating so something supporting the type level would be valuable.  ---  **Affects:** 5.0 RC2  **Reference URL:** https://github.com/Kotlin/KEEP/blob/jsr-305/proposals/jsr-305-custom-nullability-qualifiers.md  **Issue Links:** - #20496 Support null-safety at generics, varargs and array elements level (_**""is depended on by""**_) - #20424 Fix overridden methods nullability - #20099 Introduce null-safety of Spring Framework API - #20276 Extend null-safety to field level","closed","in: core,","spring-projects-issues","2017-07-10T17:44:36Z","2019-01-11T16:27:49Z"
"","20300","WiretapConnector does not clean up exchanges [SPR-15744]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15744](https://jira.spring.io/browse/SPR-15744?redirect=false)** and commented  `WiretapConnector.exchanges` leaks memory by referring to the `ExchangeResult`. For example, the following code will result in `WiretapConnector.exchanges` having a reference to `Long.MAX_VALUE` number of `ExchangeResult` instances.  ```java  @Test public void testMemory() throws Exception { 	WebTestClient webTestClient = WebTestClient 		.bindToController(new TestController()) 		.build(); 	for(int i=0;i","closed","type: bug,","spring-projects-issues","2017-07-06T15:30:30Z","2017-07-24T07:51:14Z"
"","20299","Add apply method to WebClient.Builder [SPR-15743]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15743](https://jira.spring.io/browse/SPR-15743?redirect=false)** and commented  It would be nice to have an apply method available to the WebClient that would allow an external framework to do multiple things. For example set multiple attributes, default the content type, etc.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d6c102d1b89b374e637639453d57c97b0f3f42b3","closed","type: enhancement,","spring-projects-issues","2017-07-06T14:52:49Z","2017-07-24T07:51:15Z"
"","20250","Simplify applying a strategy to requests from WebTestClient and WebTestClient [SPR-15691]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15691](https://jira.spring.io/browse/SPR-15691?redirect=false)** and commented  # Description  With the changes from #20216 modifying a request with a strategy (i.e. `ExchangeFilterFunction`) becomes 3 statements instead of a single one. For example, we use to have:  ``` webClient   .filter(basicAuthentication(""user"",""password))   ... ```  now the code is  ``` webClient   .mutate()   .filter(basicAuthentication(""user"",""password))   .build()   ... ```  It would be ideal to make this a single statement again.  # Solution Ideas  ## Combining Methods  One idea would be to provide a single method that accepts an `ExchangeFilterFunction` and invokes all three methods.  ``` webClient    // shortcut for mutate, filter, build   .with(basicAuthentication(""user"",""password))   ... ```  ## ClientRequest attributes  Another (improved) approach would be to allow `ClientRequest` to have some concept of attributes. Perhaps something like:  ``` webClient    .with( requestAttrs -> { .. })    ... ```  This would allow the `ExchangeFilterFunction` to leverage the requestAttrs and thus remain stateless.  This approach improves usability in regards to if an `ExchangeFilterFunction` needed some values that were always reused. Currently (and in the past) we would need to do something like:  ``` webClient   .filter(oauth(someBeanThatIsConstant, a1, b1,...))   ...  webClient   .filter(oauth(someBeanThatIsConstant, a2, b2,...))   ... ```  You can see that this is a burden on the user to have to provide `someBeanThatIsConstant` for every request. With the above approach the `someBeanThatIsConstant` can be injected into an `ExchangeFilterFunction` that is global and the requestAttrs would provide values that change.  ``` webClient = ...     .filter(oauth(aBeanThatIsConstant))     ...  webClient   .with( requestAttrs -> { ... } )   ...  webClient   // here oauth is just a static method provided by Spring Security that creates   // a consumer that does the same thing as above   .with( oauth(a1,a2) )   ... ```  This approach also means we can make additional requests in the `ExchangeFilterFunction` using the `ExchangeFunction` without worrying about another `ExchangeFilterFunction` adding something that is isn't desirable to the request. For example, currently if a user makes an HTTP basic request and we want to do something inside another `ExhangeFunction` that makes a request, the `ExchangeFunction` passed in would automatically populate HTTP Basic on the new request which is not necessarily desirable.  With `ClientRequest` attributes the attributes would not be populated on this additional request so the `ExchangeFunction` would not add the basic auth headers.  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20216 Ordering of WebClient.filter(s)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/74b4c028819c67b90d4d06d352d3083d91d8a3f8","closed","type: enhancement,","spring-projects-issues","2017-06-22T16:35:43Z","2019-01-11T16:01:53Z"
"","20234","Use fixed GMT time-zone for WebSessionManager Clock [SPR-15675]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15675](https://jira.spring.io/browse/SPR-15675?redirect=false)** and commented  Currently WebSession API uses Instant for many methods. It might be good to use a type that contains timezone information it rather than the implied timezone of GMT  ---  **Affects:** 5.0 RC2  **Issue Links:** - #20220 Consider using ZonedDateTime in HttpHeaders  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ba3a12e4ccadb561603869dd208629296d6a6473","closed","type: task,","spring-projects-issues","2017-06-16T16:20:49Z","2019-01-11T16:05:16Z"
"","20210","JdkDynamicAopProxy constructs ReflectiveMethodInvocation with EmptyTargetSource.EMPTY_TARGET for static methods [SPR-15651]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15651](https://jira.spring.io/browse/SPR-15651?redirect=false)** and commented  The [recent changes](https://github.com/spring-projects/spring-framework/commit/fd53d2a51a4de263ac18d2f698abeab7afabce75#diff-a13a4d4b7fde3f35d5233eff66e0619aR113) to `EmptyTargetSource` have broken Spring Security's tests.  Spring Security relies on checking to see if a `MethodInvocation.getThis()` is `null` to determine if the method is static. This seems to be a safe assumption based on the [javadoc](http://aopalliance.sourceforge.net/doc/org/aopalliance/intercept/Joinpoint.html#getThis()) which states:  > Returns: > the object (can be null if the accessible object is static).  What's more is it would seem non-obvious for me to use the `EmptyTargetSource.EMPTY_TARGET` (which is not accessible, so I need to use `EmptyTargetSource.INSTANCE.getTarget()` from Spring Framework to compare against the result of `MethodInvocation.getThis()` from aopalliance.  I think it makes sense to ensure that [the construction](https://github.com/spring-projects/spring-framework/blob/fd53d2a51a4de263ac18d2f698abeab7afabce75/spring-aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java#L210) of `ReflectiveMethodInvocation` contains `target=null` and `targetClass=null` for static methods.   ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/8011c930ab9688120b6e585131b245ec9e90a3fd","closed","in: core,","spring-projects-issues","2017-06-10T03:02:54Z","2017-06-14T10:12:19Z"
"","20205","Upgrade to Reactor Bismuth M2 [SPR-15646]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15646](https://jira.spring.io/browse/SPR-15646?redirect=false)** and commented  Let's upgrade to Reactor Bismuth M2.  ---  **Issue Links:** - #19881 Upgrade to Reactor Core 3.1 Milestone - #20108 Upgrade to Reactor 3.1 RC1 (including Reactive Streams 1.0.1) - #20342 Upgrade to Reactor Bismuth M3  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1456, and commits https://github.com/spring-projects/spring-framework/commit/b1345014b93ee433577e45f1013c2b1d0b8ca8a8","closed","type: task,","spring-projects-issues","2017-06-09T14:48:50Z","2019-01-11T16:09:26Z"
"","20195","Replace ResolvableType with ParameterizedTypeReference in WebFlux APIs used in applications [SPR-15636]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15636](https://jira.spring.io/browse/SPR-15636?redirect=false)** and commented  It makes sense to use `ResolvableType` for internal reflection purposes. However, for public facing APIs we lose type information when using `ResolvableType`. For example, the following compiles fine but will produce a `ClassCastException` at runtime:  ```java String body = this.webClient 	.get() 	.uri(""/"") 	.exchange() 	.flatMap(r -> r.body(BodyExtractors.toMono(ResolvableType.forClassWithGenerics(Map.class, String.class, String.class)))) 	.block(); ```  The problem is that the type information is duplicated which can lead to errors.  Instead we should remove `ResolvableType` from the public API and switch to `ParameterizedTypeReference`. For example:  ```java Map body = this.webClient 	.get() 	.uri(""/"") 	.exchange() 	.flatMap(r -> r.body(toMono(new ParameterizedTypeReference() {}))) 	.block(); ```  There are other new public APIs (for application use as opposed to SPIs) in 5.0 that we should also ensure use `ParameterizedTypeReference` and not `ResolvableType`.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5e954dcba030b607d40adf09a5f936ea27cac036","closed","type: enhancement,","spring-projects-issues","2017-06-07T16:16:05Z","2017-06-14T10:12:18Z"
"","20194","ClientRequest needs way to set header, overriding current values [SPR-15635]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15635](https://jira.spring.io/browse/SPR-15635?redirect=false)** and commented  Currently there is a way to add a header, but no easy way to set a header and override an existing value. For example the following will add another Authorization header if one exists, but I'd like a way to override the existing one:  ```java ClientRequest.from(clientRequest) 		.header(HttpHeaders.AUTHORIZATION, ""Bearer "" + token) 		.build(); ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bf66f452837a44b066433bba48b08a337742e722","closed","type: enhancement,","spring-projects-issues","2017-06-07T15:38:17Z","2017-06-14T10:12:18Z"
"","20158","Improve support for 0...n UnaryOperator to ExchangeMutatorWebFilter [SPR-15599]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15599](https://jira.spring.io/browse/SPR-15599?redirect=false)** and commented  Currently `ExchangeMutatorWebFilter` works nicely for a single `UnaryOperator`, but is not as convenient for 0 or > 1.  For example:  ``` ExchangeMutatorWebFilter mutator1 = new ExchangeMutatorWebFilter(unary1); ExchangeMutatorWebFilter mutator2 = new ExchangeMutatorWebFilter(unary2);  WebTestClient client = WebTestClient.bindToController(new MyController()).webFilter(mutator1, mutator2).build(); client     .get()     .uri(""/"")     .exchange(); ```  This can be worked around to some degree by composing the `UnaryOperator` s, but it would be nice if multiple `UnaryOperator` could be injected.  It is also not as convenient as it could be if only per request filtering is done because a no op `UnaryOperator` must be injected into the constructor. For example:  ``` // No-op lambda is required ExchangeMutatorWebFilter mutator = new ExchangeMutatorWebFilter(e -> e); WebTestClient client = WebTestClient.bindToController(new MyController()).webFilter(mutator).build(); client     .filter(mutator.perClient(unary1))     .get()     .uri(""/"")     .exchange(); ```  It would also be nice if `perClient` would accept more than one `UnaryOperator` to reduce its code from:  ``` client     .filter(mutator.perClient(unary1))     .filter(mutator.perClient(unary2))     ... ```  to  ``` client     .filter(mutator.perClient(unary1, unary2))     ... ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/abcc4ac979ca7b0d10e06d3e97b65be38ac41c82","closed","type: enhancement,","spring-projects-issues","2017-05-31T01:36:33Z","2017-06-14T10:12:17Z"
"","20130","First class WebSession change id support [SPR-15571]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15571](https://jira.spring.io/browse/SPR-15571?redirect=false)** and commented  It is critical for Spring Security to have an API that can change the WebSession's identifier to prevent things like session fixation attacks. Providing something more first class than invalidating the session and then creating a new one is ideal because in a distributed session it is better to be able to only need to update the id vs delete and then create (copying all the attributes over).   ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e2ee23bfc597c667d3f5792eb319666723cf3014","closed","type: enhancement,","spring-projects-issues","2017-05-19T22:09:17Z","2017-07-24T07:51:16Z"
"","20129","Make more obvious when WebTestClient exchangeMutator will not work [SPR-15570]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15570](https://jira.spring.io/browse/SPR-15570?redirect=false)** and commented  It would be nice if we could make it more obvious when `WebTestClient`'s `exchangeMutator` will not work. It is currently documented, but it would be an improvement if we could do one of the following (perhaps there are other ideas too):  * Only have `exchangeMutator` on the APIs exposed by the mocked WebClient. This impacts quite a few APIs, but in my opinion would be ideal from a usability perspective. * Throw an Exception if `exchangeMutator` is not allowed  ---  **Affects:** 5.0 RC1  **Issue Links:** - #20128 WebTestClient.bindToHttpHandler exchangeMutator does not work  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fd51893a44e2fe9766b9c7e78d3f151561ef3a2d, https://github.com/spring-projects/spring-framework/commit/4d4c3d5c0b74d55c4dd6a0927e813f54724cdb5f, https://github.com/spring-projects/spring-framework/commit/246e72ff2f3689b0292e119bb0b5cbc24ceb20e1","closed","type: bug,","spring-projects-issues","2017-05-19T21:40:14Z","2019-01-11T17:05:13Z"
"","20128","WebTestClient.bindToHttpHandler exchangeMutator does not work [SPR-15569]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15569](https://jira.spring.io/browse/SPR-15569?redirect=false)** and commented  Currently exchangeMutator does not work for `WebTestClient.bindToHttpHandler`. For example, the following test fails:  ```java  @Test public void bindToHttpHandlerExchangeMutator() { 	MockHttpHandler handler = new MockHttpHandler(); 	WebTestClient client = WebTestClient.bindToHttpHandler(handler) 		.build() 		.exchangeMutator( this::mutateDeleteMethod );  	client.get().uri(""/"").exchange();  	assertThat(handler.request.getMethod()).isEqualTo(HttpMethod.DELETE); }  private ServerWebExchange mutateDeleteMethod(ServerWebExchange exchange) { 	return exchange.mutate().request( mutateDeleteMethod(exchange.getRequest() )).build(); }  private ServerHttpRequest mutateDeleteMethod(ServerHttpRequest request) { 	return request.mutate().method(HttpMethod.DELETE).build(); }  private static class MockHttpHandler implements HttpHandler { 	private ServerHttpRequest request;  	@Override 	public Mono handle(ServerHttpRequest request, ServerHttpResponse response) { 		this.request = request; 		return response.setComplete(); 	} } ```  ---  **Affects:** 5.0 RC1  **Issue Links:** - #20127 Consistency with WebTestClient.bindToHttpHandler(..).exchangeMutator(..) - #20129 Make more obvious when WebTestClient exchangeMutator will not work","closed","status: invalid,","spring-projects-issues","2017-05-19T21:35:50Z","2019-01-12T05:20:49Z"
"","20127","Consistency with WebTestClient.bindToHttpHandler(..).exchangeMutator(..) [SPR-15568]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15568](https://jira.spring.io/browse/SPR-15568?redirect=false)** and commented  The `WebTestClient.bindToXXX`  methods that use mocks have an exchangeMutator method except for `bindToHttpHandler`. It would be nice if this support was added.  For example, the following compiles:  ```java WebTestClient client = WebTestClient.bindToController(controller) 	.exchangeMutator(  e -> e) 	.build(); ```  However the following does not:  ```java WebTestClient client = WebTestClient.bindToHttpHandler(handler) 	.exchangeMutator(m -> m) 	.build(); ```  It is worth mentioning that this can be worked around using the following, but it would be nice if it were supported in the builder like the other builders:  ```java WebTestClient client = WebTestClient 	.build() 	.exchangeMutator(m -> m); ```  Perhaps an alternative is to remove the exchangeMutator from the builders and only allow it on the client itself. Either way, consistency would be nice.  ---  **Affects:** 5.0 RC1  **Issue Links:** - #20128 WebTestClient.bindToHttpHandler exchangeMutator does not work","closed","status: invalid,","spring-projects-issues","2017-05-19T21:29:42Z","2019-01-12T05:20:50Z"
"","20111","Add ability to get the Principal to RouterFunctions [SPR-15552]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15552](https://jira.spring.io/browse/SPR-15552?redirect=false)** and commented  Currently there is no way to access the `Principal` in a `RouterFunction`. This means there is no way to access the current user.  Note that there is the ability to access `WebSession` however, there are cases where the user is not obtained from session (i.e. stateless applications).   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ba39697f2e568b27a97b2bf195b6b8c99ae1ce95","closed","type: enhancement,","spring-projects-issues","2017-05-15T21:52:25Z","2017-06-14T10:12:17Z"
"","20082","Simplify adding ResponseCookie to ServerHttpResponse [SPR-15523]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15523](https://jira.spring.io/browse/SPR-15523?redirect=false)** and commented  Currently the way to add a `ResponseCookie` requires the user to ensure they put the `ResponseCookie` in the map correctly (i.e. add the cookie with the key of the cookie name).  ```java exchange.getResponse().getCookies().add(cookie.getName(), cookie) ```  It would be nice if we could provide a method that makes it easy to ensure the cookie is added correctly:  ```java exchange.getResponse().add(cookie); ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b6490419764525fa427368d4068eb1e1de676060","closed","type: enhancement,","spring-projects-issues","2017-05-05T22:10:40Z","2017-06-14T10:12:17Z"
"","20081","Update Cookie headers in MockServerHttpRequest and Response [SPR-15522]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15522](https://jira.spring.io/browse/SPR-15522?redirect=false)** and commented  When using the `WebTestClient` with the mock support (i.e. `bindToHttpHandler`) cookies are not written as headers to the response like they are when a real server is used. This is illustrated in the tests below.  ```java package sample;  import org.junit.Test; import org.springframework.http.ResponseCookie; import org.springframework.http.server.reactive.HttpHandler; import org.springframework.http.server.reactive.ReactorHttpHandlerAdapter; import org.springframework.test.web.reactive.server.FluxExchangeResult; import org.springframework.test.web.reactive.server.WebTestClient; import org.springframework.web.server.ServerWebExchange; import org.springframework.web.server.WebFilter; import org.springframework.web.server.WebFilterChain; import org.springframework.web.server.adapter.WebHttpHandlerBuilder; import reactor.core.publisher.Mono; import reactor.ipc.netty.NettyContext;  import java.util.Arrays;  import static org.assertj.core.api.Assertions.assertThat;  public class HttpSessionCookieTests {  	// fails 	@Test 	public void createMockWebClient() { 		HttpHandler handler = handler(); 		WebTestClient client = WebTestClient.bindToHttpHandler(handler).build();  		assertSetCookieHeaderExists(client); 	}  	// works 	@Test 	public void createReactorNetty() { 		NettyContext netty = null; 		try { 			netty = nettyContext(); 			WebTestClient client = WebTestClient.bindToServer() 				.baseUrl(""http://localhost:"" + netty.address().getPort()) 				.build();  			assertSetCookieHeaderExists(client); 		} finally { 			if(netty != null) { 				netty.dispose(); 			} 		} 	}  	private HttpHandler handler() { 		return WebHttpHandlerBuilder.webHandler(e -> Mono.empty()).filters(Arrays.asList(new WritesCookieFilter())).build(); 	}  	private void assertSetCookieHeaderExists(WebTestClient client) { 		FluxExchangeResult result = client.get() 			.uri(""/"") 			.exchange() 			.returnResult(String.class);  		assertThat(result.getResponseHeaders()).containsKeys(""Set-Cookie""); 	}   	private NettyContext nettyContext() { 		HttpHandler handler = handler(); 		ReactorHttpHandlerAdapter adapter = new ReactorHttpHandlerAdapter(handler); 		reactor.ipc.netty.http.server.HttpServer httpServer = reactor.ipc.netty.http.server.HttpServer.create(""localhost"", 0); 		return httpServer.newHandler(adapter).block(); 	}  	static class WritesCookieFilter implements WebFilter {  		@Override 		public Mono filter(ServerWebExchange exchange, WebFilterChain chain) { 			exchange.getResponse().getCookies().add(""FOO"", ResponseCookie.from(""FOO"",""BAR"").build()); 			return chain.filter(exchange); 		} 	} } ```  This appears to be related to the fact that `AbstractServerHttpResponse` relies on [applyCookies to be implemented](https://github.com/spring-projects/spring-framework/blob/edbf9fa74edc287750d143a7ef767cedb5219036/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java#L187). While `ReactorServerHttpResponse` [implements applyCookies](https://github.com/spring-projects/spring-framework/blob/edbf9fa74edc287750d143a7ef767cedb5219036/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java#L94), `MockServerHttpResponse` [does not implement applyCookies](https://github.com/spring-projects/spring-framework/blob/edbf9fa74edc287750d143a7ef767cedb5219036/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java#L125).  ---  **Affects:** 5.0 RC1  **Issue Links:** - #19790 Update Cookie headers in MockHttpServletRequest and Response  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5dcfd84d3bf5a01b4c90cab2bb9a88ff8ffae8c5","closed","type: enhancement,","spring-projects-issues","2017-05-05T21:34:52Z","2019-01-14T04:35:28Z"
"","20079","Defer logic in DefaultWebFilter.filter [SPR-15520]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15520](https://jira.spring.io/browse/SPR-15520?redirect=false)** and commented  `DefaultWebFilter` does not delay the invocation of the method. This means that  when building a data pipleline with a `WebFilter` we must wrap it in a `Mono.defer` or the `DefaultWebFilter` will change state. For example, consider the following:  ```java mono     .doOnNext(System.out::println)     .switchIfEmpty(chain.filter(exchange)); ```  The `switchIfEmpty` statement changes the state of the `WebFilterChain` and depending on the `WebFilter` implementation may invoke additional downstream logic. This can be avoided using `Mono.defer`:  ```java mono     .doOnNext(System.out::println)     .switchIfEmpty(Mono.defer(() -> chain.filter(exchange))); ```  However, we could avoid requiring users to wrap invocations if `DefaultWebFilterChain.filter` wrapped up its logic using something like:  ```java @Override public Mono filter(ServerWebExchange exchange) { 	return Mono.defer(() -> { 		if (this.index < this.filters.size()) { 			WebFilter filter = this.filters.get(this.index++); 			return filter.filter(exchange, this); 		} else { 			return this.handler.handle(exchange); 		} 	}); } ```  With the changes above the following will work without changing the state of `DefaultWebFilterChain` and without risk of accidentally invoking logic in a `WebFilter` that may perform invocation at the time of it's {{filter]} method being invoked:  ```java mono 	.doOnNext(System.out::println) 	.switchIfEmpty(chain.filter(exchange)); ```  ---  **Issue Links:** - #20076 Consider making DefaultWebFilterChain not change state  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/459457e1aae8036e40c7f7956f647d6f790da608","closed","type: enhancement,","spring-projects-issues","2017-05-05T15:58:32Z","2019-01-11T17:09:36Z"
"","20076","Consider making DefaultWebFilterChain not change state [SPR-15517]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15517](https://jira.spring.io/browse/SPR-15517?redirect=false)** and commented  I've ran into a few issues where constructing invalid Reactive flows I've accidentally invoked the WebFilterChain twice within the same WebFilter. When Spring Security's authorization kicks in it tries to block access to the remaining WebFilter's and the WebHandler. However, if any WebFilter prior to Spring Security's authorization WebFilter constructs an invalid flow it could invoke WebFilterChain again and bypass Spring Security's authorization WebFilter.  Perhaps rather than doing something like `filter.filter(exchange, this)` we could pass in a copy that has the updated index. Then we could make index final as well.  Thoughts?  ---  **Issue Links:** - #20079 Defer logic in DefaultWebFilter.filter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/47d6e4a332fc8ba5fdd729ea77f5877901570eee","closed","type: enhancement,","spring-projects-issues","2017-05-05T07:43:28Z","2019-01-11T17:10:26Z"
"","20060","Consider Renaming request-id [SPR-15501]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15501](https://jira.spring.io/browse/SPR-15501?redirect=false)** and commented  It might be good to rename the request-id header used by `WebTestClient` to something that is more obviously used for testing purposes only. This will be useful when users see the output of their request / response for failed tests. It will also help users when they google for what it is.  ---  **Issue Links:** - #20133 Use a more descriptive name for WiretapConnector's request ID header (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ac7955de9c99ba4811cbc770426f884a2eb7b63","closed","type: enhancement,","spring-projects-issues","2017-05-02T03:03:53Z","2019-01-11T17:10:37Z"
"","20059","WebFilter with Annotated controller-like support [SPR-15500]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15500](https://jira.spring.io/browse/SPR-15500?redirect=false)** and commented  Spring's Annotation Support is very convenient for Controllers. It would be nice if similar functionality could be leveraged for `WebFilter`. For example, it would be nice if an annotated  `WebFilter` could leverage features like argument resolving, type conversion, etc. Perhaps this would be implemented with an WebFilterAdapter which converts from the standard interface into invoking arbitrary methods.   --- No further details from [SPR-15500](https://jira.spring.io/browse/SPR-15500?redirect=false)","closed","in: web,","spring-projects-issues","2017-05-01T20:28:44Z","2020-04-15T10:14:28Z"
"","20058","WebTestClient Support WebFilter only [SPR-15499]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15499](https://jira.spring.io/browse/SPR-15499?redirect=false)** and commented  #19912 added support for `WebFilter`. However, there is not a way to only test a `WebFilter` with it. This means anyone testing only `WebFilter` objects must mock a `Controller`, `ApplicationContext`, or `RouterFunction` to test the `WebFitler`.  It would be nice if there was a way that allowed testing just the `WebFilter`.  ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/add1305252f715d98cb2af7acd01753e1fec1e98, https://github.com/spring-projects/spring-framework/commit/16901b14975273034194b9c8a109ab749a90f0bc","closed","type: enhancement,","spring-projects-issues","2017-05-01T20:15:12Z","2019-01-11T16:36:25Z"
"","20055","WebTestClient should support custom HandlerMethodArgumentResolver [SPR-15495]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15495](https://jira.spring.io/browse/SPR-15495?redirect=false)** and commented   --- No further details from [SPR-15495](https://jira.spring.io/browse/SPR-15495?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-04-28T15:13:44Z","2017-05-08T08:41:45Z"
"","20054","Support resolving Mono & Mono [SPR-15494]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15494](https://jira.spring.io/browse/SPR-15494?redirect=false)** and commented  Spring WebFlux currently supports resolving `WebSession` and `Principal` but does not support resolving `Mono` and `Mon`. It would be nice to add support for `Mono` and `Mon`   --- No further details from [SPR-15494](https://jira.spring.io/browse/SPR-15494?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-04-28T15:08:01Z","2017-05-08T08:41:45Z"
"","19989","ForwardedHeaderFilter.ForwardedHeaderRequestWrapper does not preserve ; [SPR-15428]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15428](https://jira.spring.io/browse/SPR-15428?redirect=false)** and commented  When using `ForwardedHeaderFilter` and a requestURI contains a path variable (i.e. semicolon) they are stripped out. For example a requestURI of ""/foo;a=b/bar"" currently is incorrectly changed to ""/foo/bar"". The actual value should be ""/foo;a=b/bar""  ---  **Affects:** 4.3.7, 5.0 M5  **Issue Links:** - #19983 ForwardedHeaderFilter.ForwardedHeaderRequestWrapper does not preserve encoding of requestURI","closed","type: bug,","spring-projects-issues","2017-04-10T14:20:42Z","2019-01-11T16:43:24Z"
"","19914","WebFilter X-Forwarded Support [SPR-15351]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15351](https://jira.spring.io/browse/SPR-15351?redirect=false)** and commented  It would be good to explore providing WebFilter to support X-Forwarded Support. Somewhat related, it would be nice if there was a method to determine if the request is secure on `ServerHttpRequest` vs having to use:  ```java String scheme = exchange.getRequest().getURI().getScheme(); boolean isSecure = scheme != null && scheme.equalsIgnoreCase(scheme); ```  ---  **Issue Links:** - #20506 Introduce ForwardedHeaderFilter for WebFlux (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2017-03-16T03:46:36Z","2019-01-11T15:03:34Z"
"","19913","Simplify creating ServerWebExchange for testing [SPR-15350]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15350](https://jira.spring.io/browse/SPR-15350?redirect=false)** and commented  It is currently rather verbose to create a `WebServerExchange` when testing. For example, Spring Security has the following in lots of places to test `WebFilter` instances:  ```java ServerWebExchange exchange = new DefaultServerWebExchange(MockServerHttpRequest.get(""/foo"").build(), new MockServerHttpResponse()) ```  It would be nice if there was a simple way to create a `ServerWebExchange`. One possible solution is to add a `MockServerHttpRequest.BodyBuilder.toExchange()` method.   ---  **Affects:** 5.0 M5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f6e2c585c8b16c2bf88f483eb36d906bac08796d, https://github.com/spring-projects/spring-framework/commit/41c413a7489f4e3d612b1133328eb0fe2fe80e92","closed","type: enhancement,","spring-projects-issues","2017-03-15T18:55:16Z","2017-05-08T08:41:44Z"
"","19912","WebTestClient Support WebFilter [SPR-15349]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15349](https://jira.spring.io/browse/SPR-15349?redirect=false)** and commented  Currently there does not appear to be an easy way to add `WebFilter` to the `WebTestClient` unless the `ApplicationContext` is used. This means it is difficult to test a `WebFilter` in isolation or along side a set of `Controller` s or `RouterFunction` s.   ---  **Affects:** 5.0 M5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/54192cf5138c7e9bce2f05673ec448b503c0d5f2","closed","type: enhancement,","spring-projects-issues","2017-03-15T15:55:53Z","2017-05-08T08:41:47Z"
"","19911","Support testing WebFilterChain [SPR-15348]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15348](https://jira.spring.io/browse/SPR-15348?redirect=false)** and commented  It would be nice to provide a `WebFilterChain` implementation that could be used for testing `WebFilter` implementations. The only implementation that is available right now is `DefaultWebFilterChain` which is private.   ---  **Affects:** 5.0 M5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/37592ea07c1257326c98f88ca07c37974ba9f118","closed","type: enhancement,","spring-projects-issues","2017-03-15T15:32:43Z","2017-05-08T08:41:44Z"
"","19884","Typo in WebFlux Manual Bootstrapping [SPR-15321]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15321](https://jira.spring.io/browse/SPR-15321?redirect=false)** and commented  The following does not compile  ```java // Reactor Netty ReactorHttpHandlerAdapter adapter = new ReactorHttpHandlerAdapter(handler); HttpServer.create(host, port).newHandler(adapter).onClose().block(); ```    ---  **Affects:** 5.0 M5  **Reference URL:** http://docs.spring.io/spring/docs/5.0.0.M5/spring-framework-reference/htmlsingle/#web-reactive-getting-started-manual","closed","type: documentation,","spring-projects-issues","2017-03-07T03:34:47Z","2017-05-08T08:41:47Z"
"","19860","Simplify access to request/response object in WebClient [SPR-15294]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15294](https://jira.spring.io/browse/SPR-15294?redirect=false)** and commented  This idea has been bounced around for some time, but I wanted to get this documented.  We should consider providing a blocking API similar to WebClient. While we do have RestTemplate, WebClient could provide a much more fluent API for making REST requests.  Reasons to consider this before 5.0  * Would this impact the WebClient package structure (i.e. are there pieces that should be reused between blocking and non blocking) * Would this impact the reactive equivalent of MockMvc?  ---  **Affects:** 5.0 M5  **Issue Links:** - #19957 Refactor WebClient to not allow request body for GET/HEAD/etc - #19966 Consider error handling strategy and support for WebClient - #20046 Revisit handling of 4xx and 5xx status codes in WebClient - #19923 Improve webclient and webflux documentation - #19962 Deprecate AsyncRestTemplate in favour of WebClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/840d7abbf633745e8a7e17fe08ff356cac170e03, https://github.com/spring-projects/spring-framework/commit/e6b4edc757b9470db5238155a958622b1d005baa, https://github.com/spring-projects/spring-framework/commit/81430caa43849a6f1c319a4b0a379cfc8e6b69c8  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2017-02-28T03:43:52Z","2019-01-11T14:26:44Z"
"","19816","Consider UriSpec.uri(Function) to  UriSpec.uri(Function)  [SPR-15251]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15251](https://jira.spring.io/browse/SPR-15251?redirect=false)** and commented  Right now we require  ``` http.get().uri(builder -> builder.path(""/person"").build()) ```  it would be nice to be able to remove the .build()  ``` http.get().uri(builder -> builder.path(""/person"")) ```  Right now we cannot do this because .build can also accept URI variables, but perhaps there is a way we can refactor this a bit.   ---  **Affects:** 5.0 M5","closed","type: enhancement,","spring-projects-issues","2017-02-13T20:15:25Z","2017-04-17T15:37:36Z"
"","19815","WebTestClient support for initializing the MockServerHttpRequest [SPR-15250]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15250](https://jira.spring.io/browse/SPR-15250?redirect=false)** and commented  It would be nice if we had the necessary hooks to intercept and initialize the ""mock"" server request.  This is similar to the [MockMvc](https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#test-mockmvc) support which allows running as a particular user with annotations:  ``` @Before public void setup() {     this.webTestClient = WebTestClient.bindToController(new PersonController())             .apply(springSecurity())             .build(); }  @WithMockUser @Test public void test() {     webTestClient         .get()         .url(""/requires-authenticated-user"")         .assertStatus().isOk(); } ```  It is important to support something that allows the user to be passed into each request too. This is so that different users can be leveraged for multiple requests within the same test method. For example:  ``` @Test public void test() {     webTestClient         .with(user(""user""))         .get()         .url(""/requires-authenticated-user"")         .assertStatus().isOk();      webTestClient         .with(user(""admin""))         .get()         .url(""/requires-admin-user"")         .assertStatus().isOk(); } ```    --- No further details from [SPR-15250](https://jira.spring.io/browse/SPR-15250?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-02-13T19:53:21Z","2017-05-08T08:41:45Z"
"","19814","WebTestClient assert failures should log request and response details [SPR-15249]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15249](https://jira.spring.io/browse/SPR-15249?redirect=false)** and commented  Currently WebTestClient has the ability to display request / responses without regard to a failure. However, it would be nice if there was a way to do this if the assertions fail. For example, the following would include the request / response in the exception.  ``` webTestClient.get()    .url(""/foo"")    .exchange()    .assertStatus().isOk(); ```  The following would also include the request / response in the assertion (possibly with a new assertion exception that contains the original exception as a caused by)  ``` webTestClient.get() 	.uri(""/users"") 	.exchange() 	.andAssert( info -> {  		assertThat(info.getResponse().statusCode()).isEqualTo(HttpStatus.OK); 	}); ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/24358200c3b69c702d5cfed8304a3ea55ab2a6c9","closed","type: enhancement,","spring-projects-issues","2017-02-13T19:11:06Z","2017-02-23T09:29:11Z"
"","19772","Improve adding defaults to WebClient requests [SPR-15208]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15208](https://jira.spring.io/browse/SPR-15208?redirect=false)** and commented  It would be nice if there was a more elegant way to provide defaults for a request. For example, it would be nice if we could easily change the accept to JSON. The following is pretty verbose:  ```java WebClient webClient = WebClient.create(""http://localhost:"" + port)         .filter((request, next) -> {             ClientRequest json = ClientRequest                     .from(request)                     .header(""Accept"", MediaType.APPLICATION_JSON_VALUE)                     .build();             return next.exchange(json);         }); ```    --- No further details from [SPR-15208](https://jira.spring.io/browse/SPR-15208?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-01-30T21:40:18Z","2017-02-23T09:29:13Z"
"","19729","Improve initialization of org.springframework.tests.Assume  [SPR-15163]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15163](https://jira.spring.io/browse/SPR-15163?redirect=false)** and commented  Currently `org.springframework.tests.Assume` initializes based upon a static initialization of `TestGroup.parse(System.getProperty(""testGroups""))`.  If the parsing fails, using `Assume` will produce a `NoClassDefFoundError` since it could not be initialized.  It would be good if we could handle this error better and provide an informative error message to the user indicating that the `testGroups` could not be parsed.   ---  **Affects:** 5.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/264edb3fb5de63051e6a66a533e40dadee253ae0","closed","type: enhancement,","spring-projects-issues","2017-01-18T21:15:50Z","2017-02-23T09:29:12Z"
"","19978","UriComponentsBuilder http/s default port [SPR-15416]","**[Rico Pahlisch](https://jira.spring.io/secure/ViewProfile.jspa?name=pahli)** opened **[SPR-15416](https://jira.spring.io/browse/SPR-15416?redirect=false)** and commented  UriComponentsBuilder returns -1 for http and https urls if there is no port given.  Please change the behaviors to return the default ports for both schemas.  ```java @RunWith(SpringRunner.class) public class UriComponentsTest {      @Test     public void test () throws URISyntaxException {         UriComponents build = UriComponentsBuilder.fromUri(new URI(""http://localhost/"")).build();         assertThat(build.getPort()).isEqualTo(80);     } } ```    --- No further details from [SPR-15416](https://jira.spring.io/browse/SPR-15416?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-04-05T15:41:45Z","2019-01-11T16:44:11Z"
"","20298","add Mediatype for Nottingham Problem [SPR-15742]","**[Renato Soppelsa](https://jira.spring.io/secure/ViewProfile.jspa?name=simplicii)** opened **[SPR-15742](https://jira.spring.io/browse/SPR-15742?redirect=false)** and commented  With Spring 5.0 a media type was added for the Nottingham problem. application/problem+json  What is wmissing is the corresponding UTF8 type of it application/problem+json;charset=UTF-8  as it is done for the application/json;charset=UTF-8   ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3dd6069578a2aea3f87bcfeec10d9156e038c4f5  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2017-07-06T13:27:09Z","2017-07-24T07:51:15Z"
"","20166","The conversion service framework does not allow the formatter to deal with an empty string value, it always converts to null an empty string. [SPR-15607]","**[Razvan Popian](https://jira.spring.io/secure/ViewProfile.jspa?name=razvan77@gmail.com)** opened **[SPR-15607](https://jira.spring.io/browse/SPR-15607?redirect=false)** and commented  The DefaultFormattingConversionService always converts an empty string to null. However, there may be some scenarios when an empty string needs to be converted to an actual object. For example we may need to default a numeric property to 0 if empty string is passed to the conversion service. The code I am referring to is in the org.springframework.format.support.FormattingConversionService class at line 193:  ```java String text = (String) source; if (!StringUtils.hasText(text)) { 	return null; } ```  I think that maybe the target Formatter (Parser) should be given a chance to deal with the empty string.   ---  **Affects:** 4.3.7","open","in: core,","spring-projects-issues","2017-06-01T10:51:59Z","2020-04-10T06:46:06Z"
"","19664","Silent Fail When Using Incorrect Username In Bootstrap.yml Config [SPR-15097]","**[Raymond Fagan](https://jira.spring.io/secure/ViewProfile.jspa?name=rayf1)** opened **[SPR-15097](https://jira.spring.io/browse/SPR-15097?redirect=false)** and commented  I am receiving no error or notice of failure when deploying an application running spring cloud config and spring boot when the username field is incorrect (including if it is empty) in the application's configuration. The application appears to deploy properly, but the application's functionality fails when it's endpoints are called.  I've also noticed that if the url or password fields are incorrect then I receive an error and the app fails to deploy, which is the expected behavior.   --- No further details from [SPR-15097](https://jira.spring.io/browse/SPR-15097?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-01-05T15:33:53Z","2019-01-12T05:21:28Z"
"","20159","Upgrade to Objenesis 2.6 for Google App Engine Standard on Java 8 and for better JDK 9 support [SPR-15600]","**[Ray Tsang](https://jira.spring.io/secure/ViewProfile.jspa?name=saturnism)** opened **[SPR-15600](https://jira.spring.io/browse/SPR-15600?redirect=false)** and commented  App Engine Standard for Java 8 (currently in Alpha) lifted the old sandbox/API restrictions. We can now use Objenesis as-is. A recent patch was merged into Objensis to take this new environment into account.  See https://github.com/easymock/objenesis/issues/51  This is tracking issue to ensure that Spring core will use the new version when it becomes available on Maven.  ---  **Issue Links:** - #19712 Upgrade to Objenesis 2.5 - #20733 End of first-class JDK 6 support - #21905 Upgrade to Objenesis 3.0 - #20227 Jdep issue on org.springframework.objenesis.instantiator.sun.UnsafeFactoryInstantiator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8d668acbb4d88c64219f98addd3e80c35a2d4136, https://github.com/spring-projects/spring-framework/commit/098ff6f0f8ef8e9e6288279f0cf96f43e076d425, https://github.com/spring-projects/spring-framework/commit/2b0dc8d7fff85a1beb4d85e7a5800abf7a9be406, https://github.com/spring-projects/spring-framework/commit/8a2262e21007438731cb8e9c322935d7b8369e5e  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2017-05-31T01:42:56Z","2019-01-11T15:41:27Z"
"","19687","Spring Caching : introduce @CacheKeyExists annotation [SPR-15120]","**[Ravi](https://jira.spring.io/secure/ViewProfile.jspa?name=rhpvangapalli)** opened **[SPR-15120](https://jira.spring.io/browse/SPR-15120?redirect=false)** and commented  Often times, it would be very helpful to know from the caller method whether item is retrieved from cache or not.  Introducing `@CacheKeyExists`  this will help us identify wheather returned result is from cache or not  for .e.g., `@CacheKeyExists`(""\"") public boolean isCacheKeyPopulated(){ return false; }   ..... public void caller(){  if(isCacheKeyPopulated()){ //perform action if item is found in cache, perhaps hit_count++ }   --- No further details from [SPR-15120](https://jira.spring.io/browse/SPR-15120?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-01-10T06:49:26Z","2017-01-10T20:00:30Z"
"","19709","Make TestContext framework Spek friendly [SPR-15143]","**[Ranie Jade Ramiso](https://jira.spring.io/secure/ViewProfile.jspa?name=rramiso)** opened **[SPR-15143](https://jira.spring.io/browse/SPR-15143?redirect=false)** and commented  Currently Spring's `TestContext` framework makes certain assumptions on how tests are structured. Specifically, tests are class methods like in JUnit and TestNG. This is very evident on `TestContextManager` and `TestExecutionListener`. Other features (transactions, etc..) are also built on that assumption.  Spek is a bit different to most test frameworks. We don't use methods, we have our own DSL to define tests.  ```java object MySpec: Spek({     describe(""something"") {         it(""should do something"") {             // assertions         }     } }) ```  `it` here defines a test while `describe` creates a group (contains groups and other tests). Tests instances here doesn't matter, it can be a singleton or not (depending if you use **class** or **object** in defining your spec). We can't use annotations, so method level annotations like `@Commit, @Rollback` won't work. Made some initial work on the integration (https://github.com/spekframework/spek-spring-extension), but only bean injection is working.  ```java @ContextConfiguration(classes = arrayOf(MyConfiguration::class)) object MySpec: Spek({     val context = createContext(MySpec::class)     val foo = context.inject()     // val foo: Foo by context.inject() - kotlin 1.1      it(""blah blah blah"") {         foo().doSomething()         // foo.doSomething() - kotlin 1.1     } }) ```  `createContext` here hooks up Spek's lifecycle and invokes `testContext.markApplicationContextDirty(DirtiesContext.HierarchyMode.EXHAUSTIVE)` after a test is executed.  One of the major blockers here is how configuration metadata for features (like transactions, etc..) is defined. We can't use annotations, so we need to abstract the way configuration metadata is collected. The default can use the existing annotations and we let other test frameworks to hook up their own.   ---  **Reference URL:** https://github.com/JetBrains/spek/issues/50  6 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2017-01-16T09:33:40Z","2018-12-05T17:54:28Z"
"","19903","Make SpringExtension.getApplicationContext() public [SPR-15340]","**[Ralf Stuckert](https://jira.spring.io/secure/ViewProfile.jspa?name=ralf.stuckert)** opened **[SPR-15340](https://jira.spring.io/browse/SPR-15340?redirect=false)** and commented  If you are writing a custom junit-jupiter extension for spring that needs access to the application context, it would be desirable to use the `SpringExtension.getApplicationContext()` method, just like the built-in extensions.  Currently this method is package private which introduces some restrictions. Is that intended for some reason, or is there maybe a better way to get access to the app context? Otherwise it would be helpful if you make this method public.   ---  **Affects:** 5.0 M5","closed","type: enhancement,","spring-projects-issues","2017-03-10T09:28:13Z","2017-05-08T08:41:48Z"
"","20227","Jdep issue on org.springframework.objenesis.instantiator.sun.UnsafeFactoryInstantiator [SPR-15668]","**[rajendra rathore](https://jira.spring.io/secure/ViewProfile.jspa?name=rarathore)** opened **[SPR-15668](https://jira.spring.io/browse/SPR-15668?redirect=false)** and commented  Hi Team, I ran the JDep on spring core 4.3.2 version and found that org.springframework.objenesis.instantiator.sun.UnsafeFactoryInstantiator uses sun.misc.Unsafe, and it says that it is JDK internal API (jdk.unsupported). so please let me know your plan for that class.  Thanks Rajendra Rathore  ---  **Affects:** 4.3.2  **Issue Links:** - #19712 Upgrade to Objenesis 2.5 - #20159 Upgrade to Objenesis 2.6 for Google App Engine Standard on Java 8 and for better JDK 9 support","closed","type: enhancement,","spring-projects-issues","2017-06-15T12:12:11Z","2019-01-11T16:07:25Z"
"","19855","context:component-scan cannot take base-package value from a properties file [SPR-15289]","**[Rajeev Naik](https://jira.spring.io/secure/ViewProfile.jspa?name=rajeevnaikte)** opened **[SPR-15289](https://jira.spring.io/browse/SPR-15289?redirect=false)** and commented  If i put below entries, it will throw error saying ${scan.packages} not recognized.    It would be easier if we are able to get the base=packages from properties file, so that we don't need to look at xml.   --- No further details from [SPR-15289](https://jira.spring.io/browse/SPR-15289?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-02-26T12:23:06Z","2017-02-26T18:19:54Z"
"","19833","Honor @Autowired(required=false) at parameter level, as an alternative to java.util.Optional [SPR-15268]","**[Rafael Winterhalter](https://jira.spring.io/secure/ViewProfile.jspa?name=raphw)** opened **[SPR-15268](https://jira.spring.io/browse/SPR-15268?redirect=false)** and commented  When declaring a dependency on a list of beans in a Java config, the `@Autowired`(required = false) annotation is not respected when no suitable bean exists such as:  `@Bean` public Bar bar(`@Autowired`(required = false) List\ foos);  The exception states:  org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'bar' defined in dep.DepConfig: Unsatisfied dependency expressed through method 'bar' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'java.util.List' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {`@org`.springframework.beans.factory.annotation.Autowired(required=false)}  Expressing the constraint on a constructor or field does however work. Also, it is possible to declare the parameter as Optional where an empty optional is provided.  ---  **Affects:** 4.3.6  **Issue Links:** - #18629 Allow `@Autowired` to be declared on parameters (_**""depends on""**_) - #18628 Introduce autowiring support for individual handler method parameters - #19937 Support for List injection - #19901 Accept empty Collection injection for single constructor scenarios  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d74542ed21b5a6c2b93547c73e86e1a85954ca9d, https://github.com/spring-projects/spring-framework/commit/beac891ff00fc5096e3f95c7c4a7e620ad6c5c6b","closed","type: enhancement,","spring-projects-issues","2017-02-19T12:36:53Z","2019-01-13T05:17:08Z"
"","20304","Revise FileSystemResource / FileSystemUtils / FileCopyUtils towards NIO.2 [SPR-15748]","**[Qin Chuanqing](https://jira.spring.io/secure/ViewProfile.jspa?name=chuanqin)** opened **[SPR-15748](https://jira.spring.io/browse/SPR-15748?redirect=false)** and commented  I do work in nokia, we do a much strict standard for code which analysis by sonar, with the plugin of called sonarLint which can install in IDEA, I can find some bad code smell, an example is in org.springframework.util.FileSystemUtils, we can find below in attachment, I think we should do something for it. and will never introduce any more.  ---  **Affects:** 4.3.9  **Attachments:** - [Screen Shot 2017-07-08 at 18.00.22.png](https://jira.spring.io/secure/attachment/25030/Screen+Shot+2017-07-08+at+18.00.22.png) (_78.18 kB_)  **Issue Links:** - #19822 StandardMultipartFile.transferTo should fall back to manual copy if Part.write doesn't support absolute locations (e.g. on Jetty) - #19262 Expose Channel on Resource - #20401 FileSystemUtils.deleteRecursively always returns false - #20881 PropertySourcesPlaceholderConfigurer can not ignore resource if not found - #21373 java.nio.file.Path support in FileSystemResource (with regular createRelative behavior, superseding PathResource)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3714e7b044d1651280e2e6bbcc23123aa8b846d8, https://github.com/spring-projects/spring-framework/commit/12114a9d4c55e86cb0669d9c66d423b8d07c20b0","closed","in: core,","spring-projects-issues","2017-07-08T10:01:30Z","2019-01-11T16:28:38Z"
"","20084","HandlerExecutionChain toString() may miss interceptors [SPR-15525]","**[QBNemo](https://jira.spring.io/secure/ViewProfile.jspa?name=qbnemo)** opened **[SPR-15525](https://jira.spring.io/browse/SPR-15525?redirect=false)** and commented  !CHAIN.PNG|thumbnail!  1. HandlerExecutionChain has attribute: interceptors and interceptorList, and can be classed into three state : state-i, state-ii, state-iii . 2. calling getInterceptors, addInterceptor, or addInterceptors , can change state. 3. construct a HandlerExecutionChain using a handler which is not instanceof HandlerExecutionChain, will be state-i; 4. construct a HandlerExecutionChain using a handler which is instanceof HandlerExecutionChain, will be state-ii; 5. calling toString in state-i will get the wrong number of interceptors. for example:    LocaleChangeInterceptor local = new LocaleChangeInterceptor();    HandlerExecutionChain chain = new HandlerExecutionChain(new Object(), local);    System.out.println(chain);    ""chain"" has one interceptor ""local"", but the toString() missed it.    ---  **Affects:** 4.3.8, 5.0 M5  **Attachments:** - [CHAIN.PNG](https://jira.spring.io/secure/attachment/24915/CHAIN.PNG) (_19.54 kB_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1417, and commits https://github.com/spring-projects/spring-framework/commit/92f18a4985f2eb66551883a77aba5e38a6ddd0a0, https://github.com/spring-projects/spring-framework/commit/e522fec611a85e689cde9f53b0079d1a0d89ef45","closed","type: bug,","spring-projects-issues","2017-05-07T14:35:45Z","2017-05-08T08:41:44Z"
"","20035","Spring (OAuth2)RestTemplate does not map response body [SPR-15475]","**[Pär Nilsson](https://jira.spring.io/secure/ViewProfile.jspa?name=par.nilsson)** opened **[SPR-15475](https://jira.spring.io/browse/SPR-15475?redirect=false)** and commented  I guess the whole problem is described in detail in my StackOverflow question. I can provide code for reproducing issue later today. (I don't have access to the code from this computer)  To summarize: the http call to the REST API completes successfully but the response body fails to map to my POJO which i generated from the API xsd. I validated the returned payload with the xsd so it's correct. If the mapping xml -> pojo should fail i expect an exception, in my case everything proceeds without issue until i try to fetch the response entity which results in null.   ---  **Affects:** 4.3.8  **Reference URL:** http://stackoverflow.com/questions/43564431/spring-oauth2resttemplate-does-not-map-response-body","closed","in: web,","spring-projects-issues","2017-04-24T06:12:28Z","2019-01-12T16:45:11Z"
"","20283","Jackson2JsonEncoder should stream custom streaming types [SPR-15727]","**[Piotr Wielgolaski](https://jira.spring.io/secure/ViewProfile.jspa?name=pwielgolaski)** opened **[SPR-15727](https://jira.spring.io/browse/SPR-15727?redirect=false)** and commented  At the moment we only stream hardcoded type MediaType.APPLICATION_STREAM_JSON https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java#L127  In fact there is already list of streaming mediatype setStreamingMediaTypes https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java#L96    ---  **Affects:** 5.0 RC2","closed","type: enhancement,","spring-projects-issues","2017-07-02T15:19:21Z","2017-07-24T07:51:15Z"
"","19716","@EventListener not working on @Service class [SPR-15150]","**[Piers Geyman](https://jira.spring.io/secure/ViewProfile.jspa?name=piers.geyman)** opened **[SPR-15150](https://jira.spring.io/browse/SPR-15150?redirect=false)** and commented  I have followed documentation to add an `@EventListener` on my Service, but the system fails to load with the error below. None of the examples in the documentation or that I have seen on searching have the event listener method in the service interface. I think this must be a bug.  `@Service` `@Transactional` public class ItemServiceImpl implements ItemService { `@EventListener` public void handleContextRefresh(ContextRefreshedEvent event) { loadAndCacheItems(); }      ....  }  2017-01-16 20:11:56,186 ERROR [localhost-startStop-1] [org.springframework.web.context.ContextLoader] - Context initialization failed org.springframework.beans.factory.BeanInitializationException: Failed to process `@EventListener` annotation on bean with name 'itemServiceImpl'; nested exception is java.lang.IllegalStateException: Need to invoke method 'handleContextRefresh' declared on target class 'ItemServiceImpl', but not found in any interface(s) of the exposed proxy type. Either pull the method up to an interface or switch to CGLIB proxies by enforcing proxy-target-class mode in your configuration. at org.springframework.context.event.EventListenerMethodProcessor.afterSingletonsInstantiated(EventListenerMethodProcessor.java:107) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:779) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:866) at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:542) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4811) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5251) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717) at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:940) at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1816) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.IllegalStateException: Need to invoke method 'handleContextRefresh' declared on target class 'ItemServiceImpl', but not found in any interface(s) of the exposed proxy type. Either pull the method up to an interface or switch to CGLIB proxies by enforcing proxy-target-class mode in your configuration. at org.springframework.core.MethodIntrospector.selectInvocableMethod(MethodIntrospector.java:135) at org.springframework.aop.support.AopUtils.selectInvocableMethod(AopUtils.java:130) at org.springframework.context.event.EventListenerMethodProcessor.processBean(EventListenerMethodProcessor.java:156) at org.springframework.context.event.EventListenerMethodProcessor.afterSingletonsInstantiated(EventListenerMethodProcessor.java:104) ... 20 more Jan 16, 2017 8:11:56 PM org.apache.catalina.core.StandardContext listenerStart SEVERE: Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.BeanInitializationException: Failed to process `@EventListener` annotation on bean with name 'itemServiceImpl'; nested exception is java.lang.IllegalStateException: Need to invoke method 'handleContextRefresh' declared on target class 'ItemServiceImpl', but not found in any interface(s) of the exposed proxy type. Either pull the method up to an interface or switch to CGLIB proxies by enforcing proxy-target-class mode in your configuration. at org.springframework.context.event.EventListenerMethodProcessor.afterSingletonsInstantiated(EventListenerMethodProcessor.java:107) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:779) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:866) at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:542) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4811) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5251) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717) at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:940) at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1816) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.IllegalStateException: Need to invoke method 'handleContextRefresh' declared on target class 'ItemServiceImpl', but not found in any interface(s) of the exposed proxy type. Either pull the method up to an interface or switch to CGLIB proxies by enforcing proxy-target-class mode in your configuration. at org.springframework.core.MethodIntrospector.selectInvocableMethod(MethodIntrospector.java:135) at org.springframework.aop.support.AopUtils.selectInvocableMethod(AopUtils.java:130) at org.springframework.context.event.EventListenerMethodProcessor.processBean(EventListenerMethodProcessor.java:156) at org.springframework.context.event.EventListenerMethodProcessor.afterSingletonsInstantiated(EventListenerMethodProcessor.java:104) ... 20 more   ---  **Affects:** 4.3.5","closed","in: core,","spring-projects-issues","2017-01-16T21:18:09Z","2019-01-12T16:33:38Z"
"","20157","MockMvc throws java.lang.IllegalStateException: Ambiguous handler methods mapped for HTTP path [SPR-15598]","**[Phillip Rower](https://jira.spring.io/secure/ViewProfile.jspa?name=philliprower)** opened **[SPR-15598](https://jira.spring.io/browse/SPR-15598?redirect=false)** and commented  I'm getting IllegalStateException when using MockMvc to test my Controller.  Same Controller runs fine in Tomcat with no errors.  Test Code:  ```java @Test public void testController throws Exception { this.mockMvc.perform(get(""/reports/list"").accept(MediaType.TEXT_HTML_VALUE))                 .andExpect(status().isOk()) } ```  Controller Code:  ```java @Controller @RequestMapping(""/reports"") public class ReportMasterController {     static final String REPORTS_VIEW = ""reports"";     static final String REPORTS_MODEL = ""reports"";      @Inject     private ReportMasterRepository reportMasterRepository;      @RequestMapping(path = ""/list"", method = RequestMethod.GET, produces = {MediaType.TEXT_HTML_VALUE})     public String list(ModelMap modelMap) {         List reportMasters =reportMasterRepository.findAll();         modelMap.put(REPORTS_MODEL, reportMasters);         return REPORTS_VIEW;     }      @ResponseBody     @RequestMapping(path = ""/list"",method = RequestMethod.GET, produces = {MediaType.APPLICATION_JSON_VALUE})     public List listJson() {         List reportMasters =reportMasterRepository.findAll();         return reportMasters;     } } ```  Both methods map to /reports/list with a GET, but one produces JSON and the other Html, so the actually Spring Web framework handles this just fine.  Only test framework finds this mapping ambiguous.   ---  **Affects:** 4.3.8","closed","in: web,","spring-projects-issues","2017-05-30T23:15:18Z","2019-01-25T09:47:23Z"
"","20305","Inconsistent treatment of Errors by CallbackPreferringPlatformTransactionManager [SPR-15749]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-15749](https://jira.spring.io/browse/SPR-15749?redirect=false)** and commented  Most places in spring-tx treat `RuntimeException` and `Error` equally rolling back in both cases as both of them are unchecked. This can be seen in [TransactionAspectSupport. completeTransactionAfterThrowing ](https://github.com/spring-projects/spring-framework/blob/master/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L547) and [DefaultTransactionAttribute. rollbackOn ](https://github.com/spring-projects/spring-framework/blob/master/spring-tx/src/main/java/org/springframework/transaction/interceptor/DefaultTransactionAttribute.java#L132)  The execution path for `CallbackPreferringPlatformTransactionManager` seems to be different https://github.com/spring-projects/spring-framework/blob/master/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L319 where an `Error` is not thrown but instead wrapped in a `ThrowableHolderException`. However looking at the code in [UOWActionAdapter.run](https://github.com/spring-projects/spring-framework/blob/master/spring-tx/src/main/java/org/springframework/transaction/jta/WebSphereUowTransactionManager.java#L369) (used by the only present implementation of CallbackPreferringPlatformTransactionManager) any kind of `Throwable` seems to cause a rollback. It seems to me as if `RuntimeException` and `Error` should be treated equally in the `CallbackPreferringPlatformTransactionManager` path in `TransactionAspectSupport.java`   ---  **Affects:** 4.3.9","open","in: data,","spring-projects-issues","2017-07-09T14:27:12Z","2019-01-11T16:27:08Z"
"","19774","Support for read-only transactions with Oracle 12c JDBC driver [SPR-15210]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-15210](https://jira.spring.io/browse/SPR-15210?redirect=false)** and commented  Previously (with the 9i and 10g) Oracle JDBC driver read only Spring transactions resulted in read only Oracle transactions. With the 12c Oracle JDBC driver this is no longer the case (I'm unsure about the behavior of the 11g driver). Read only Oracle transactions are a nice feature because the give you read consistency including repeatable reads. Read only Spring transactions used to create read only Oracle transactions because the `DataSourceTransactionManager` calls `Connection.setReadOnly(true)`. With old versions of the Oracle JDBC driver this used to create a read only transaction. This was a bug in the driver that was later corrected. The purpose of the `Connection.setReadOnly(true)` is to create a read only connection, not a read only transaction.  Unfortunately JDBC offers no portable way to create a read only transaction. [Oracle](https://docs.oracle.com/database/121/SQLRF/statements_10005.htm#SQLRF55418), [PostgreS](https://www.postgresql.org/docs/current/static/sql-set-transaction.html) and [MySQL](https://dev.mysql.com/doc/refman/5.7/en/set-transaction.html) all require a variant of  ``` SET TRANSACTION READ ONLY ```  with possibly an isolation level. This can also be done in a `START TRANSACTION`.  We considered making a subclass of `DataSourceTransactionManager` but the requirement to register a `DataSourceTransactionObject` which is private makes this tricky. Also `DataSourceUtils.prepareConnectionForTransaction` does not offer an easy way to plug in vendor specific behavior.  ---  **Issue Links:** - #11234 Rollback of transaction participating in nested transaction should not enforce rollback of global transaction - #19820 Database.SQL_SERVER should set more recent Hibernate dialect with Spring 4.3.x","closed","type: enhancement,","spring-projects-issues","2017-01-31T10:07:44Z","2019-01-11T14:34:20Z"
"","19643","Avoid use of double constructor of BigDecimal in tests [SPR-15077]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-15077](https://jira.spring.io/browse/SPR-15077?redirect=false)** and commented  Codacy warns about an [Error Prone](http://errorprone.info/bugpattern/BigDecimalLiteralDouble) use of the double constructor of BigDecimal in tests. The reason given is that it is a source of precision loss if the number does not have an exact double representation. The recommendation is to use the String constructor of BigDecimal instead as it does not require using a lossy argument.  ---  **Issue Links:** - #17928 Compatibility with merged JDK 9 mainline - #19642 Remove use of Boolean constructors in tests  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1282","closed","type: task,","spring-projects-issues","2016-12-31T11:14:31Z","2019-01-11T15:27:52Z"
"","19642","Remove use of Boolean constructors in tests [SPR-15076]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-15076](https://jira.spring.io/browse/SPR-15076?redirect=false)** and commented  Codacy warns us that there are several references to Boolean constructors in the tests. Direct usage of the Boolean constructor is discouraged and even [deprecated in Java 9](http://download.java.net/java/jdk9/docs/api/java/lang/Boolean.html#Boolean-boolean-). Boolean constructor use can easily be replaced with the constant instances.  ---  **Issue Links:** - #17928 Compatibility with merged JDK 9 mainline - #19643 Avoid use of double constructor of BigDecimal in tests  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1281","closed","type: task,","spring-projects-issues","2016-12-31T10:13:04Z","2019-01-11T15:27:47Z"
"","19641","Remove String#toCharArray from ScriptUtils [SPR-15075]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-15075](https://jira.spring.io/browse/SPR-15075?redirect=false)** and commented  ScriptUtils contains two calls to String#toCharArray for the sole purpose to iterating over all chars in a String. Not only is this unnecessary and can be replaced with String#charAt it also causes additional allocator and heap pressure because String#toCharArray rather than returning the backing array (which is gone in Java 9) creates a copy.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1280, and commits https://github.com/spring-projects/spring-framework/commit/d912f77a31e34156d55c149d8b322ab274269cd6, https://github.com/spring-projects/spring-framework/commit/35bd00beaf25943521b5650ef6e004291b19eff7, https://github.com/spring-projects/spring-framework/commit/131d2c2051f7bf9f54d6a9cb89da79cdd67fa3a6","closed","type: enhancement,","spring-projects-issues","2016-12-31T08:59:29Z","2017-01-25T14:18:14Z"
"","20332","CssLinkResourceTransformer does not work with relative URLs if there is a query or fragment [SPR-15777]","**[Phil](https://jira.spring.io/secure/ViewProfile.jspa?name=sunflower-seed)** opened **[SPR-15777](https://jira.spring.io/browse/SPR-15777?redirect=false)** and commented  I'm currently using a Resource Handler for my CSS Files and additionally a CSS Link Resource Transformer.  Actually the output looks like this  ```css @font-face {  font-family:'bla';  src:url('fonts/bla-normal-075247c3b3e06129c47ca740a32dc7f4.eot');  src:url('fonts/bla-normal.eot?#iefix') format('embedded-opentype'),url('fonts/bla-normal-632750944fac21720bc3fb589824f72d.woff') format('woff'),url('fonts/bla-normal-f989315cb2ee10c6cf21368cd6ca9d0d.ttf') format('truetype'),url('fonts/bla-normal.svg#bla-normal') format('svg'); ```  As you can see if a parameter like #bla-normal oder #iefix is present, the file would not be versioned anymore  Current Resource Handler (using multiple Resource Handlers)  ```java registry.addResourceHandler(""/static/css/**"")                 .addResourceLocations(""/css/"")                 .setCachePeriod(cachePeriod)                 .resourceChain(true)                 .addTransformer(new CssLinkResourceTransformer())                 .addResolver(new VersionResourceResolver().addContentVersionStrategy(""/**"")); ```  CSS Files were generated on build from less Files   ---  **Affects:** 4.3.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/70252a7335f3136d661d1d8387e4452621c9ed37","closed","in: web,","spring-projects-issues","2017-07-15T15:10:44Z","2020-04-15T10:44:28Z"
"","20393","SimpleApplicationEventMulticaster does not deal with lambda-defined listeners when ErrorHandler is set [SPR-15838]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-15838](https://jira.spring.io/browse/SPR-15838?redirect=false)** and commented  Originally raised [against Spring Boot](https://github.com/spring-projects/spring-boot/issues/9915), but I think this might be a Framework issue.  The `SimpleApplicationEventMulticaster` deals with lambda-defined implementations by catching any `ClassCastException`. However, if an `ErrorHandler` has been set a different code path runs that does not catch the exception.  The relevant code [is here](https://github.com/spring-projects/spring-framework/blob/af83d2332a0011d83a4a775d57e2d28b9eb53bee/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java#L159).  ---  **Affects:** 4.3.10, 5.0 RC3  **Issue Links:** - #18681 Wrong detection of event type on ApplicationListener when using lambdas (ClassCast Exception) - #19711 SimpleApplicationEventMulticaster should not rely on ClassCastException having a message  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dd2bbcb3ec119287f1c814a1c18dde235a81f167, https://github.com/spring-projects/spring-framework/commit/f948742781e5253e5903f84217b51ffa079f5123  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2017-07-31T16:04:37Z","2019-01-11T17:40:27Z"
"","20303","Improve performance of ReactiveAdapterRegistry [SPR-15747]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-15747](https://jira.spring.io/browse/SPR-15747?redirect=false)** and commented  Whilst profiling startup times for Spring Boot I noticed that `ReactiveAdapterRegistry` is taking quite some time for a simple application.  For example, if I run `ConfigurationClassProcessingTests.simplestPossibleConfig` I get a test run time around 0.66 seconds. If I comment out the code from the `ReactiveAdapterRegistry` constructor it drops to 0.53 seconds.  Perhaps we can make the registry late binding, or unwind some of the existing lambda calls?   ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dfcc9af9384a54104b760a782e2b16884e0c1629","closed","type: enhancement,","spring-projects-issues","2017-07-07T23:57:09Z","2017-12-28T20:22:22Z"
"","20201","NPE in AnnotationUtils.getValue [SPR-15642]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-15642](https://jira.spring.io/browse/SPR-15642?redirect=false)** and commented  We've got a recent NPE in the Spring Boot build that Madhura helped to tracked down to this change:  https://github.com/spring-projects/spring-framework/commit/f813712f5b413b354560cd7cc006352e9defa9a3#diff-44945edabd4176dfd3966252ff4a589eL1322  ``` org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.NullPointerException  	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:979) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:863) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:848) 	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:66) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) 	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:162) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:129) 	at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:110) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:129) 	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:129) 	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:129) 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:129) 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:199) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:129) 	at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:106) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:129) 	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:155) 	at org.springframework.boot.actuate.hypermedia.HypermediaEndpointDocumentation.metrics(HypermediaEndpointDocumentation.java:63) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks.evaluate(RunBeforeTestExecutionCallbacks.java:73) 	at org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks.evaluate(RunAfterTestExecutionCallbacks.java:83) 	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75) 	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86) 	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:98) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) 	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:237) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) Caused by: java.lang.NullPointerException 	at org.springframework.core.annotation.AnnotationUtils.getValue(AnnotationUtils.java:1327) 	at org.springframework.core.annotation.AnnotationUtils.getValue(AnnotationUtils.java:1298) 	at org.springframework.hateoas.core.AnnotationMappingDiscoverer.getMappingFrom(AnnotationMappingDiscoverer.java:111) 	at org.springframework.hateoas.core.AnnotationMappingDiscoverer.getMapping(AnnotationMappingDiscoverer.java:73) 	at org.springframework.hateoas.mvc.ControllerLinkBuilder$CachingAnnotationMappingDiscoverer.getMapping(ControllerLinkBuilder.java:301) 	at org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo(ControllerLinkBuilder.java:119) 	at org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo(ControllerLinkBuilder.java:102) 	at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcHypermediaManagementContextConfiguration$EndpointResource.(EndpointWebMvcHypermediaManagementContextConfiguration.java:358) 	at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcHypermediaManagementContextConfiguration$MvcEndpointAdvice.beforeBodyWrite(EndpointWebMvcHypermediaManagementContextConfiguration.java:299) 	at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcHypermediaManagementContextConfiguration$MvcEndpointAdvice.beforeBodyWrite(EndpointWebMvcHypermediaManagementContextConfiguration.java:272) 	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChain.processBody(RequestResponseBodyAdviceChain.java:135) 	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChain.beforeBodyWrite(RequestResponseBodyAdviceChain.java:111) 	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:230) 	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:182) 	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:83) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:860) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:770) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:86) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:970) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:904) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:971) 	... 57 more ```  ---  **Affects:** 5.0 RC2  **Issue Links:** - #20099 Introduce null-safety of Spring Framework API  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e6f195095283beaf1637b8230e64cb324e96fe33, https://github.com/spring-projects/spring-framework/commit/c67542418921ece5be42b1aef7beadd5b36c9737","closed","in: core,","spring-projects-issues","2017-06-07T23:38:29Z","2019-01-11T16:09:05Z"
"","20176","Make SystemEnvironmentPropertySource.resolvePropertyName protected [SPR-15617]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-15617](https://jira.spring.io/browse/SPR-15617?redirect=false)** and commented  It would be super helpful is we could make `SystemEnvironmentPropertySource.resolvePropertyName` a protected final method so that it can be called by Spring Boot to return origin tracking information.  I'm happy to make the change if there are no objections.   ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/72cd24446db45b0f3af483e399fbced392286f96","closed","type: enhancement,","spring-projects-issues","2017-06-02T22:50:37Z","2017-06-14T10:12:19Z"
"","20073","Add onChangeListener support to MutablePropertySources [SPR-15514]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-15514](https://jira.spring.io/browse/SPR-15514?redirect=false)** and commented  Spring Boot would like to track when property sources are changed on a `MutablePropertySources` instance. One way to do this would be to add listener support.   --- No further details from [SPR-15514](https://jira.spring.io/browse/SPR-15514?redirect=false)","open","type: enhancement,","spring-projects-issues","2017-05-04T18:00:52Z","2017-11-02T12:31:50Z"
"","20071","Offer compile time support for `@Configuration` classes  [SPR-15512]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-15512](https://jira.spring.io/browse/SPR-15512?redirect=false)** and commented  During some discussion on the Spring Boot call about [this issue](https://github.com/spring-projects/spring-boot/issues/9068) we discussed the benefits of not needing to use CGLib for configuration classes.  A typical Spring Boot application will load 50-70 configurations and each one needs bytecode generation and increases the amount of memory used.  One option that Stephane suggested was to do the bytecode manipulation an compile time rather than runtime. We could possibly use an annotation processor to rewrite the methods and call some common SPI that both `ConfigurationClassEnhancer` and us could share.    ---  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2017-05-04T01:04:54Z","2022-06-17T11:36:48Z"
"","20068","Cache spring.factories loads [SPR-15509]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-15509](https://jira.spring.io/browse/SPR-15509?redirect=false)** and commented  Currently `SpringFactoriesLoader` reloads properties files on each call. Whilst this doesn't appear to be particularly expensive in terms of CPU, it does cause some garbage objects due to an 8K buffer that `Properties` creates each time.  We could cache the loaded properties to save repeated loading the same file.   ---  **Affects:** 4.3.8","closed","type: enhancement,","spring-projects-issues","2017-05-03T00:20:57Z","2017-05-08T08:41:47Z"
"","20066","""Not a setter"" exception cannot be be thrown in Property.java [SPR-15507]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-15507](https://jira.spring.io/browse/SPR-15507?redirect=false)** and commented  Someone from the community raised this to me:  The `Property` class includes the following:  ```java 	int index = this.writeMethod.getName().indexOf(""set"") + 3; 			if (index == -1) { 				throw new IllegalArgumentException(""Not a setter method""); } ```  Since the `index` is set with `+3` there's no way for the exception to throw.  See https://github.com/spring-projects/spring-framework/blob/3b8b3502a84714bd01594fca10e0afabcd2e48e4/spring-core/src/main/java/org/springframework/core/convert/Property.java#L146   ---  **Affects:** 4.3.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/817e80c56b8efe40e3dc28c68586b1412589d064, https://github.com/spring-projects/spring-framework/commit/aa8cf190d3d893f3fb34e8f0492114988b7c3b26","closed","in: core,","spring-projects-issues","2017-05-02T15:36:46Z","2017-05-08T08:41:45Z"
"","20062","Also clear SerializableTypeWrapper when ResolvableType cache is cleared [SPR-15503]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-15503](https://jira.spring.io/browse/SPR-15503?redirect=false)** and commented  I think we should also clear the `SerializableTypeWrapper` cache when `ResolvableType.clearCache()` is called.   ---  **Affects:** 4.3.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ca0094fa1d83de72e8cbaaea3ff8538ae8796d6, https://github.com/spring-projects/spring-framework/commit/d643e57318caaa57062154bb830c8b240ba38810","closed","type: enhancement,","spring-projects-issues","2017-05-02T04:42:36Z","2017-05-08T08:41:46Z"
"","20061","Defer StringHttpMessageConverter Charset.availableCharsets() call [SPR-15502]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-15502](https://jira.spring.io/browse/SPR-15502?redirect=false)** and commented  The `StringHttpMessageConverter` calls `Charset.availableCharsets()` which can be quite an expensive thing to do on startup. Switching it to obtain it on the first call may help improve startup times a little.   ---  **Affects:** 4.3.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/90477b40a4b92c357184cc182f546ce742b1ffa1, https://github.com/spring-projects/spring-framework/commit/ee40310c926f3ce1a51f28b20ede096995a667f2","closed","type: enhancement,","spring-projects-issues","2017-05-02T04:32:49Z","2017-05-08T08:41:46Z"
"","20025","Align WebMvcConfigurer with WebFluxConfigurer in terms of default methods [SPR-15465]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-15465](https://jira.spring.io/browse/SPR-15465?redirect=false)** and commented  I noticed that there is a `WebFluxConfigurer` interface but no `WebFluxConfigurerAdapter` implementation. Can we add one?   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7df3d68b2a0f833ec786e577a7a4ba22919bdc2f","closed","type: enhancement,","spring-projects-issues","2017-04-20T03:41:22Z","2017-05-08T08:41:44Z"
"","19999","ScriptUtils#splitSqlScript cannot deal with semicolons in stored procedures [SPR-15438]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-15438](https://jira.spring.io/browse/SPR-15438?redirect=false)** and commented  Originally raised [with Spring Boot](https://github.com/spring-projects/spring-boot/issues/6217) the `org.springframework.jdbc.datasource.init.ScriptUtils#splitSqlScript` method cannot deal with semicolons that are part of a stored procedure.  For example:  ```sql CREATE FUNCTION count_clients() RETURNS integer     LANGUAGE plpgsql     AS $$begin   select count(*) from clients; end;$$; ```  ---  **Affects:** 4.3.7  **Issue Links:** - #19952 Oracle SQL hints are ignored as comments in ScriptUtils  2 votes, 5 watchers","open","type: enhancement,","spring-projects-issues","2017-04-11T21:49:57Z","2021-10-02T12:10:50Z"
"","19874","SimpleMetadataReader fails to read meta-annotations with non-loadable attribute classes [SPR-15311]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-15311](https://jira.spring.io/browse/SPR-15311?redirect=false)** and commented  Originally raised [in Spring Boot](https://github.com/spring-projects/spring-boot/pull/8185), it appears that despite using ASM the `SimpleMetadataReader` cannot deal with references to classes that are not present when searching meta-annotations.  An example that shows the problem is [here](https://github.com/spring-projects/spring-boot-issues/tree/master/gh-8185). Putting a breakpoint on `AnnotationUtils.handleIntrospectionFailure` shows that `gh8185.lib.ConditionalOnOptionalComponent` cannot be read.  ``` Thread [main] (Suspended (breakpoint at line 1852 in AnnotationUtils))	 	owns: CachingMetadataReaderFactory$1  (id=57)	 	owns: Object  (id=42)	 	AnnotationUtils.handleIntrospectionFailure(AnnotatedElement, Throwable) line: 1852	 	AnnotationUtils.getAnnotations(AnnotatedElement) line: 234	 	AnnotationAttributesReadingVisitor.visitEnd() line: 76	 	ClassReader.readAnnotationValues(int, char[], boolean, AnnotationVisitor) line: 1869	 	ClassReader.accept(ClassVisitor, Attribute[], int) line: 657	 	ClassReader.accept(ClassVisitor, int) line: 523	 	SimpleMetadataReader.(Resource, ClassLoader) line: 64	 	CachingMetadataReaderFactory(SimpleMetadataReaderFactory).getMetadataReader(Resource) line: 98	 	CachingMetadataReaderFactory.getMetadataReader(Resource) line: 102	 	ClassPathBeanDefinitionScanner(ClassPathScanningCandidateComponentProvider).findCandidateComponents(String) line: 287	 	ClassPathBeanDefinitionScanner.doScan(String...) line: 272	 	ComponentScanAnnotationParser.parse(AnnotationAttributes, String) line: 135	 	ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClass, ConfigurationClassParser$SourceClass) line: 282	 	ConfigurationClassParser.processConfigurationClass(ConfigurationClass) line: 244	 	ConfigurationClassParser.parse(AnnotationMetadata, String) line: 197	 	ConfigurationClassParser.parse(Set) line: 166	 	ConfigurationClassPostProcessor.processConfigBeanDefinitions(BeanDefinitionRegistry) line: 308	 	ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(BeanDefinitionRegistry) line: 228	 	PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(Collection, BeanDefinitionRegistry) line: 270	 	PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory, List) line: 93	 	AnnotationConfigApplicationContext(AbstractApplicationContext).invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory) line: 686	 	AnnotationConfigApplicationContext(AbstractApplicationContext).refresh() line: 524	 	SpringApplication.refresh(ApplicationContext) line: 737	 	SpringApplication.refreshContext(ConfigurableApplicationContext) line: 370	 	SpringApplication.run(String...) line: 314	 	SpringApplication.run(Object[], String[]) line: 1162	 	SpringApplication.run(Object, String...) line: 1151	 	Application.main(String[]) line: 11	 ```    ---  **Affects:** 4.3.6","closed","in: core,","spring-projects-issues","2017-03-03T21:21:39Z","2019-01-12T16:33:29Z"
"","18463","Provide registerBean variants based on ResolvableType [SPR-15197]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-15197](https://jira.spring.io/browse/SPR-15197?redirect=false)** and commented  The current `registerBean` methods added to support functional registration take a `beanType` class.  https://github.com/spring-projects/spring-framework/blob/cb0d992303213c42403e7c0f2da6253d889b1e37/spring-context/src/main/java/org/springframework/context/support/GenericApplicationContext.java#L357-L416  I have a feeling that we may need to register beans that include generics. e.g.  ```java Repository fooRepository = SomeThing.makeSomeFoo(); context.registerBean(..., fooRepository, ...); ```  Perhaps we should also offer `registerBean` variants that take a `ResolvableType`.  ---  **Affects:** 5.0 M4  **Issue Links:** - #18353 Programmatic bean registration within configuration classes - #19398 Add a functional way to register a bean - #19149 Allow programmatic registration of bean definitions with a ResolvableType - #19578 getBeanNamesForType(ResolvableType) doesn't match generic factory method return type for yet-to-be-created bean - #21566 Publicly expose ResolvableType in RootBeanDefinition  0 votes, 5 watchers","open","type: enhancement,","spring-projects-issues","2017-01-27T17:51:39Z","2019-01-11T14:25:37Z"
"","19935","BeanValidations Error Out on Getters that return an Optional [SPR-15371]","**[Peter Luttrell](https://jira.spring.io/secure/ViewProfile.jspa?name=pluttrell)** opened **[SPR-15371](https://jira.spring.io/browse/SPR-15371?redirect=false)** and commented  If I create a `RestController` that uses BeanValidations to validate the input object such as the following:  ```java @RestController public class CarController {   @PostMapping(""/cars"")   public Car createCar(@RequestBody @Valid Car car) {     return car;   } } ```  And the entity class contains a Java 8 `Optional` such as the following:  ```java public class Car {    @Valid   private List drivers;    public Car() {   }    public Optional getDrivers() {     return Optional.ofNullable(drivers);   }    public void setDrivers(List drivers) {     this.drivers = drivers;   } }  public class Driver {    @NotEmpty()   private String name;    @Min(16)   private int age;    public Driver() {   }    public String getName() { return name; }   public void setName(String name) { this.name = name; }    public int getAge() { return age; }   public void setAge(int age) { this.age = age; } } ```  And you Post the following JSON to it:  ```java { 	""drivers"": [ 		{ 			""name"": ""driver1"", 			""age"": 14 		} 	] } ```  You'll get the following error:  ```java org.springframework.beans.InvalidPropertyException: Invalid property 'drivers[0]' of bean class [example.Car]: Property referenced in indexed property path 'drivers[0]' is neither an array nor a List nor a Set nor a Map; returned value was [Optional[[Driver{name='driver1', age=14}]]] 	at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:696) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.beans.AbstractNestablePropertyAccessor.getNestedPropertyAccessor(AbstractNestablePropertyAccessor.java:850) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyAccessorForPropertyPath(AbstractNestablePropertyAccessor.java:827) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:622) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:99) ~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.validation.AbstractBindingResult.getRawFieldValue(AbstractBindingResult.java:283) ~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.getRejectedValue(SpringValidatorAdapter.java:260) ~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.processConstraintViolations(SpringValidatorAdapter.java:140) ~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(SpringValidatorAdapter.java:109) ~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.boot.autoconfigure.web.WebMvcValidator.validate(WebMvcValidator.java:69) ~[spring-boot-autoconfigure-1.5.2.RELEASE.jar:1.5.2.RELEASE] 	at org.springframework.validation.DataBinder.validate(DataBinder.java:891) ~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.validateIfApplicable(AbstractMessageConverterMethodArgumentResolver.java:270) ~[spring-webmvc-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:133) ~[spring-webmvc-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121) ~[spring-web-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:158) ~[spring-web-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:128) ~[spring-web-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116) ~[spring-webmvc-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) ~[spring-webmvc-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) ~[spring-webmvc-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872) ~[spring-webmvc-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:648) ~[tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.7.RELEASE.jar:4.3.7.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.5.11.jar:8.5.11] ```  This appears to be caused by the fact that `org.springframework.beans.AbstractNestablePropertyAccessor` doesn't unwrap `Optional` insances.  The request with this ticket is that it supports `Optional` return types for collection entities if running with Java 8.  I know that Spring wants to remain backward compatible to pre-Java 8, so a pluggable solution is likely going to be necessary to resolve this.   ---  **Affects:** 4.3.7","open","in: web,","spring-projects-issues","2017-03-22T10:08:54Z","2022-03-30T07:03:55Z"
"","19910","Enhance RestTemplate to support PATCH out of the box [SPR-15347]","**[Peter Luttrell](https://jira.spring.io/secure/ViewProfile.jspa?name=pluttrell)** opened **[SPR-15347](https://jira.spring.io/browse/SPR-15347?redirect=false)** and commented  The `PATCH` HTTP method ([rfc5789](https://tools.ietf.org/html/rfc5789)) is gaining popularity. In fact, Spring Data Rest Repositories provides endpoints that use it by default on all entities.  The `RestTemplate`, however, does not support `PATCH` out of the box because the `RestTemplate` relies on `SimpleClientHttpRequestFactory`, which in turn relies on the JDKs `HttpURLConnection` class, which doesn't currently support it.  This issue has been reported elsewhere and treated as _a documentation issue_ because if you choose other ways of making the connections...including several hacks..it will work. Reference #19618, [GitHub Spring-cloud/spring-cloud-netflix issue #1777](https://github.com/spring-cloud/spring-cloud-netflix/issues/1777), [GitHub Spring-cloud/spring-cloud-netflix issue #1022](https://github.com/spring-cloud/spring-cloud-netflix/issues/1022) and [StackOverflow: RestTemplate PATCH request](http://stackoverflow.com/questions/29447382/resttemplate-patch-request).  But treating this as a documentation issue doesn't serve the best interest of Spring users. Sure instructions for how to enable it is buried in the javadocs for Spring... but this introduces an unnecessary barrier to successfully using the RestTemplate with Spring Data Rest Repositories...or any other service that uses `PATCH` calls. This could cause unnecessary frustration in using the `RestTemplate`.  With this ticket, I propose that the `RestTemplate` be enhanced to support the `PATCH` method by default without any custom configuration.  This might also have the added benefit of better test coverage with whatever implementation is chosen.  ---  **Affects:** 4.3.7  **Issue Links:** - #19618 Doc: Can't issue PATCH request using RestTemplate with SimpleClientHttpRequestFactory","closed","type: enhancement,","spring-projects-issues","2017-03-14T20:01:01Z","2022-05-03T06:02:03Z"
"","20383","Parameter values are null when making a PUT request [SPR-15828]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-15828](https://jira.spring.io/browse/SPR-15828?redirect=false)** and commented  Hello,  here's the setup. I have a controller which is mapped to `PUT` request method. Spring-boot configures `HttpPutFormContentFilter` and in 4.3.8 the method in `HttpPutFormContentRequestWrapper:getParameterValues` looks like this:  ``` String[] queryStringValues = super.getParameterValues(name); List formValues = this.formParameters.get(name); if (formValues == null) {      return queryStringValues; }         //more ```  So because `super.getParameterValues(name)` returns correct value and the `formParameters.get(name)` returns null, the the correct value from `queryStringValues` is returned.  Now in 4.3.9 this method looks like this:  ``` String[] queryParam = (super.getQueryString() != null ? super.getParameterValues(name) : null); List formParam = this.formParameters.get(name); if (formParam == null) {      return queryParam; }         // more  ```  Now because the `super.getQueryString()` is null and the `formParam` is null too then null is returned.  Why has this been changed? Do I need to change my forms too? I was assuming my code should work in both 4.3.8 and 4.3.9  ---  **Affects:** 4.3.10, 5.0 RC3  **Attachments:** - [screenshot-1.png](https://jira.spring.io/secure/attachment/25062/screenshot-1.png) (_505.06 kB_)  **Issue Links:** - #20475 Spring MVC : ModelAttribute not being populated on a PUT request (_**""is duplicated by""**_) - #20390 Access to request parameters via `@RequestParam` within form PUT request handlers is broken (HttpPutFormContentFilter) (_**""is duplicated by""**_) - #20308 MockMvc duplicates PUT Parameter value  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/35248498aeb269d280a63ff4c15e4d845408871a, https://github.com/spring-projects/spring-framework/commit/af83d2332a0011d83a4a775d57e2d28b9eb53bee  0 votes, 5 watchers","closed","type: regression,","spring-projects-issues","2017-07-27T21:02:16Z","2019-01-13T05:15:16Z"
"","20094","AbstractHandlerMethodMapping should allow for customized bean retrieval [SPR-15535]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-15535](https://jira.spring.io/browse/SPR-15535?redirect=false)** and commented  Hello,  looking at: `AbstractHandlerMethodMapping#initHandlerMethods` here's what we see:  ``` 		String[] beanNames = (this.detectHandlerMethodsInAncestorContexts ? 				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(getApplicationContext(), Object.class) : 				getApplicationContext().getBeanNamesForType(Object.class));  		for (String beanName : beanNames) { ```  All the beans of type `java.lang.Object` are taken, then we iterate over their names and for each one you call:  ``` beanType = getApplicationContext().getType(beanName); ```  and then:  ``` if (beanType != null && isHandler(beanType)) {          detectHandlerMethods(beanName); } ```  and this last call inspects the bean if it has certain annotation or fulfills certain criteria (which might be an expensive operation when you call it for each bean and the user has 5000 beans for instance).  In my application I have several handler mappings that extend from `AbstractHandlerMethodMapping` - one comes from Spring Webmvc(`RequestMappingInfoHandlerMapping`), the other one from spring-data(`BasePathAwareHandlerMapping`), one I wrote for myself, and several others from spring-boot(`EndpointHandlerMapping`, `CloudFoundryEndpointHandlerMapping`).  I would like to propose instead of iterating over the all the `java.lang.Object` beans, then getting the class for each bean, then using reflection to find out if this bean fits the criteria to be a handler method (has annotation or whatsoever), why not delegate the this task to the `HandlerMapping` itself. This way the `AbstractHandlerMethodMapping` can have an abstract method like this:  ``` List getBeanNamesEligibleForHandling(ApplicationContext applicationContext); ```  and the SpringWebMVC `RequestMappingInfoHandlerMapping` will provide the following implementation:  ``` :  List getBeanNamesEligibleForHandling(ApplicationContext applicationContext) {        List result = new ArrayList();       result.addAll(applicationContext.getBeansAnnotatedWith(Controller.class)));       result.addAll(applicationContext.getBeansAnnotatedWith(RequestMapping.class)));       return result; } ```  and the others too can find only the beans they are interested in. This would of course require a new method called `getBeansAnnotatedWith`, but I think it is really worth it as this would increase the performance.  One more thing we can do is give the responsibility of finding the correct `beanType` to the delegating handler mapping. Right now they all extend the `AbstractMethodHandlerMapping` which does the following:  ``` beanType = getApplicationContext().getType(beanName); ```  However, I want it to do the following:  ``` beanType = AopProxyUtils.ultimateTargetClass(getApplicationContext().getBean(beanName)) ```  so now I have to override the whole `initHandlerMethods` to achieve it.  Thank you and keep up the good work :)  ---  **Affects:** 4.3.8  **Issue Links:** - #20562 Improve HandlerMappingIntrospector performance  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fc16b2d3fb32660f2a1217330083e26fedb70d34","closed","type: task,","spring-projects-issues","2017-05-11T09:33:24Z","2019-01-11T17:09:08Z"
"","19830","OpenTracing: Embedded Boot `/error` invoked after processing in filter [SPR-15265]","**[Pavol Loffay](https://jira.spring.io/secure/ViewProfile.jspa?name=pavolloffay)** opened **[SPR-15265](https://jira.spring.io/browse/SPR-15265?redirect=false)** and commented  Hello,  I'm working on OpenTracing[1] integration [2] with Spring Web. I need to measure request processing time.  For tracing I'm using standard servlet filter with spring interceptor to add spring related logs (e.g. handler). Span is started and finished in filter. However, when there is an exception thrown after returning from filter `ErrorController` is invoked. Here I need to start next span because the one from filter is finished. This is not very nice because it breaks one request processing into two spans.  This happens in embedded spring boot. When I package it as WAR and deploy it on embedded jetty everything works as expected -> when filter finishes nothing else is called.  Is there a way to create span and finish it after all processing is done?  [1]: www.opentracing.io [2]: https://github.com/opentracing-contrib/java-spring-web  ---  **Affects:** 4.3.6  **Issue Links:** - #19782 OpenTracing interceptor - #19791 HandlerInterceptor not invoked for exception in filter, no URL mapping and unauthorized requests","closed","status: invalid,","spring-projects-issues","2017-02-17T15:42:15Z","2019-01-12T05:21:16Z"
"","19791","HandlerInterceptor not invoked for exception in filter, no URL mapping and unauthorized requests [SPR-15226]","**[Pavol Loffay](https://jira.spring.io/secure/ViewProfile.jspa?name=pavolloffay)** opened **[SPR-15226](https://jira.spring.io/browse/SPR-15226?redirect=false)** and commented  Hello,  I'm working on OpenTracing[1] integration with Spring web [2]. Integration is done with `HandlerInterceptorAdapter` which creates tracing data(spans). It starts spans ins `preHandle` and finishes in `afterCompletion`.  I would like to use this interceptor for both spring boot and spring mvc. I found couple of differences in behavior.  Spring MVC deployed on jetty, `TracingHandlerInterceptor` is not invoked for: 1. an exception in filter 2. request which does not match any URL 3. unauthenticated requests  however in spring boot it is invoked for all of these use cases. Can somebody tell me if it is possible to invoke interceptor for all of these situations as in spring boot?  In [2] there are tests for spring boot `SpringBootITest` and spring mvc `SpringMVCJettyITest`.  [1]: www.opentracing.io [2]: https://github.com/opentracing-contrib/java-spring-web/pull/1  ---  **Affects:** 4.3.6  **Issue Links:** - #19830 OpenTracing: Embedded Boot `/error` invoked after processing in filter","closed","status: declined,","spring-projects-issues","2017-02-06T17:00:10Z","2019-01-11T14:33:18Z"
"","19782","OpenTracing interceptor [SPR-15217]","**[Pavol Loffay](https://jira.spring.io/secure/ViewProfile.jspa?name=pavolloffay)** opened **[SPR-15217](https://jira.spring.io/browse/SPR-15217?redirect=false)** and commented  Hello,  I have implemented OpenTracing interceptor [1] which traces all server requests. This interceptor can be used with any tracing system (zipkin, jaeger..).  Could anybody from spring web team review the code? Especially `TracingHandlerInterceptor`. There are a couple of things which are not clear to me:  e.g.: `HandlerInterceptorAdapter#afterCompletion` is called twice on exceptions.  [1]: https://github.com/opentracing-contrib/java-spring-web/pull/1  Thanks,  Pavol  ---  **Issue Links:** - #19830 OpenTracing: Embedded Boot `/error` invoked after processing in filter","closed","status: invalid,","spring-projects-issues","2017-02-02T11:06:01Z","2019-01-12T05:21:20Z"
"","20356","Doc: Spring AOP dependency on aspectjweaver [SPR-15801]","**[Paulina Herra Flores](https://jira.spring.io/secure/ViewProfile.jspa?name=paulinaherra)** opened **[SPR-15801](https://jira.spring.io/browse/SPR-15801?redirect=false)** and commented  spring-aop 4.3.9 spring-boot-gradle-plugin:1.5.4.RELEASE  On here: https://mvnrepository.com/artifact/org.springframework/spring-aop/4.3.9.RELEASE is listed as an **optional** dependecy. But if you don't include it on runtime it causes:  ``` 2017-07-20 12:12:16.897 ERROR 15796 --- [main] o.s.boot.SpringApplication               : Application startup failed  org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'propertySourceBootstrapConfiguration': Unsatisfied dependency expressed through field 'propertySourceLocators'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'configServicePropertySource' defined in org.springframework.cloud.config.client.ConfigServiceBootstrapConfiguration: Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: org/aspectj/util/PartialOrder$PartialComparable 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:588) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:366) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1264) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) 	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) 	at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:134) 	at org.springframework.cloud.bootstrap.BootstrapApplicationListener.bootstrapServiceContext(BootstrapApplicationListener.java:138) 	at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:84) 	at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:62) 	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167) 	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) 	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:122) 	at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:74) 	at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54) 	at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:325) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:296) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) 	at com.proxibid.buyerservice.BuyerServiceApplication.main(BuyerServiceApplication.java:24) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'configServicePropertySource' defined in org.springframework.cloud.config.client.ConfigServiceBootstrapConfiguration: Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: org/aspectj/util/PartialOrder$PartialComparable 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:564) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) 	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:208) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1316) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1282) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1180) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1096) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:585) 	... 29 common frames omitted Caused by: java.lang.NoClassDefFoundError: org/aspectj/util/PartialOrder$PartialComparable ```  Documentation needs to be corrected and indicate that you do need it.  ---  **Affects:** 4.3.9  **Issue Links:** - #19319 Spring MVC and AOP: `@EnableAspectJAutoProxy` needs to be redeclared for each application context  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/13c213481a040b6d30088eb841747e72a5405b70, https://github.com/spring-projects/spring-framework/commit/0e734d83d5c6351aa17c42922a0a667bb838552b  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2017-07-20T17:21:42Z","2019-01-13T05:15:23Z"
"","20097","Unable to emulate upload filename browser behaviour with RestTemplate [SPR-15538]","**[Paul](https://jira.spring.io/secure/ViewProfile.jspa?name=asm0dey)** opened **[SPR-15538](https://jira.spring.io/browse/SPR-15538?redirect=false)** and commented  Some browsers (i.e. Chrome and Safari) can send multipart uploads with non-ascii symbols in filename like  ``` Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryNyoLBPoS0jG219lU …omitted… ------WebKitFormBoundaryNyoLBPoS0jG219lU Content-Disposition: form-data; name=""file""; filename=""фывафыва.pdf"" Content-Type: application/pdf   ------WebKitFormBoundaryNyoLBPoS0jG219lU-- ```  as you can see filename is UTF-8 string. And MultipartFile handles this correctly! I need to emulate such behaviour with RestTemplate. Best solution I've found is to use custom FormHttpMessageConverter, but it encodes filename into base64. If I override getFilename() method, removing file encoding to base64 then question marks go to server instead of non-ascii symbols.  ---  **Issue Links:** - #19769 StandardMultipartHttpServletRequest cannot decode multipart Content-Disposition header encoded by FormHttpMessageConverter","closed","type: enhancement,","spring-projects-issues","2017-05-12T09:50:12Z","2019-01-11T17:09:21Z"
"","20001","RestTemplate should (be able to) pass the session along [SPR-15440]","**[Patrick Cornelißen](https://jira.spring.io/secure/ViewProfile.jspa?name=pcornelissen)** opened **[SPR-15440](https://jira.spring.io/browse/SPR-15440?redirect=false)** and commented  As spring session enables us to create distributed services that access the session in a single place, it should be easy to pass this session around, so you can make calls to other backend services on behalf of the user. The same would work for ""regular"" JSESSIONIDs or oauthTokens.  The basic idea is to configure some parts of the request that triggered a RestTemplate Call to automatically be passed along with RestTemplate calls. This makes writing chained calls in distributed service environments much easier. I'm thinking of something similar like the sleuth integration which also passes something from the first to the last call.  As there are a few ""properties"" of the request that may be important depending on your application (""session"" cookie when using Spring-Session, ""JsessionID"" for regular webapps, oauth header fields,...) this needs to be configurable at least on a application level.  I have investigated a while and it seems like the best way currently is to use the RestTemplate methods that allow to pass a HttpEntity and set the cookie header yourself like this:  HttpHeaders headers = new HttpHeaders(); headers.add(""Cookie"", ""SESSION="" + session); ResponseEntity\ exchange = restTemplate.exchange(url, HttpMethod.GET,new HttpEntity\(headers), UUID.class); This is error prone because you could easily forget to set the header and it is cumbersome to do this for each call. (The worst thing is to have to use the exchange method all the time)  So it would be nice to have a ""session enabled"" RestTemplate that passes the session or authentication information to the called service if they are present in the current request context. (Hystrix should also be taken into account, because many RestTemplate calls are running in Hystrix so the requestContext needs to be copied to the hystrix thread context as well!)  Is that something worth considering? Or am I missing something that makes this easier?  Andy suggested in the linked github issue that this should be a suggestion in spring-session, but I think that it shouldn't be scoped to just handle spring session.   ---  **Affects:** 4.3.7  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/5892","closed","status: declined,","spring-projects-issues","2017-04-12T06:04:42Z","2020-04-01T10:13:10Z"
"","19909","Publish events with generic parameter without creating wrapper event [SPR-15346]","**[Patrick Beaumont](https://jira.spring.io/secure/ViewProfile.jspa?name=pbeaumont)** opened **[SPR-15346](https://jira.spring.io/browse/SPR-15346?redirect=false)** and commented  As seen in page [Better application events in Spring Framework 4.2](https://spring.io/blog/2015/02/11/better-application-events-in-spring-framework-4-2), we cannot publish event without creating a class that would resolve generics parameters, due to type erasure.  It seems that it might be resolved with the ResolvableType, in the PayloadApplicationevent#getResolvableType().  Currently, we have  ``` @Override public ResolvableType getResolvableType() { 	return ResolvableType.forClassWithGenerics(getClass(), ResolvableType.forInstance(getPayload())); } ```  which resolves correctly events in the form  ``` MyEvent extends GenericMyEvent ```  With something like the following, I was able to have it work in our project:  ```   @Override public ResolvableType getResolvableType() { 	return ResolvableType.forClassWithGenerics(getClass(), ResolvableType.forClassWithGenerics(payloadClass, ResolvableType.forInstance(payloadEntity))); } ```    ---  **Affects:** 4.3.5  1 votes, 2 watchers","open","in: core,","spring-projects-issues","2017-03-14T12:10:17Z","2019-01-11T15:05:06Z"
"","19613","Remove outdated JpaExceptionTranslatorAspect [SPR-15047]","**[pas filip](https://jira.spring.io/secure/ViewProfile.jspa?name=pasfilip)** opened **[SPR-15047](https://jira.spring.io/browse/SPR-15047?redirect=false)** and commented  Hello,  I've recently upgraded to hibernate 5 and seem to have some issues receiving the correct translated exception when using spring's JpaExceptionTranslatorAspect. Inside of the JpaExceptionTranslatorAspect the exception translation is immediately done by EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible which doesn't seem to take into account the fix implemented in jira #19024.  ``` @@ -43,13 +48,16 @@ public DataAccessException translateExceptionIfPossible(RuntimeException ex) {  		if (ex instanceof HibernateException) {  			return convertHibernateAccessException((HibernateException) ex);  		} -		return null; +		if (ex instanceof PersistenceException && ex.getCause() instanceof HibernateException) { +			return convertHibernateAccessException((HibernateException) ex.getCause()); +		} +		return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex);  	} ```  So instead of receiving a org.springframework.dao.DataIntegrityViolationException we receive a JpaSystemException which contains the correct exception however it's not being translated.  ``` org.springframework.orm.jpa.JpaSystemException: org.hibernate.exception.ConstraintViolationException: could not execute batch; nested exception is javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute batch  	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:418) 	at org.springframework.orm.jpa.aspectj.JpaExceptionTranslatorAspect.ajc$afterThrowing$org_springframework_orm_jpa_aspectj_JpaExceptionTranslatorAspect$1$18a1ac9(JpaExceptionTranslatorAspect.aj:37) 	.. 	.. 	at org.springframework.transaction.aspectj.AbstractTransactionAspect.ajc$around$org_springframework_transaction_aspectj_AbstractTransactionAspect$1$2a73e96cproceed(AbstractTransactionAspect.aj:66) 	at org.springframework.transaction.aspectj.AbstractTransactionAspect$AbstractTransactionAspect$1.proceedWithInvocation(AbstractTransactionAspect.aj:72) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281) 	at org.springframework.transaction.aspectj.AbstractTransactionAspect.ajc$around$org_springframework_transaction_aspectj_AbstractTransactionAspect$1$2a73e96c(AbstractTransactionAspect.aj:70) 	... Caused by: javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute batch 	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:147) 	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:155) 	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:162) 	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1413) 	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1393) 	... 	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:298) 	at com.sun.proxy.$Proxy115.flush(Unknown Source) 	... 42 more Caused by: org.hibernate.exception.ConstraintViolationException: could not execute batch 	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112) 	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42) 	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:111) 	at org.hibernate.engine.jdbc.batch.internal.BatchingBatch.performExecution(BatchingBatch.java:121) 	at org.hibernate.engine.jdbc.batch.internal.BatchingBatch.doExecuteBatch(BatchingBatch.java:97) 	at org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.execute(AbstractBatchImpl.java:147) 	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.getBatch(JdbcCoordinatorImpl.java:195) 	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2914) 	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3434) 	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89) 	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:582) 	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:456) 	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:337) 	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39) 	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407) 	... 49 more Caused by: java.sql.BatchUpdateException: ORA-00001: unique constraint (PHOENIX_DEV.SYS_C0061089_CUST) violated  	at oracle.jdbc.driver.OraclePreparedStatement.executeBatch(OraclePreparedStatement.java:12296) 	at oracle.jdbc.driver.OracleStatementWrapper.executeBatch(OracleStatementWrapper.java:246) 	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128) 	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java) 	at org.hibernate.engine.jdbc.batch.internal.BatchingBatch.performExecution(BatchingBatch.java:111) 	... 60 more  ```  Also would it be possible to perhaps adapt the JpaExceptionTranslatorAspect to delegate to a managed bean implementing org.springframework.dao.support.PersistenceExceptionTranslator This could be a nice enhancement since the JpaExceptionTranslatorAspect is included with all the other spring aspects in the same jar and for weaving purposes simplifies things as it should be possible to plug-in for example a translator that simply re-throws the exception if no translation is desired even though the aspect has been woven.  I can't entirely exclude that somehow there is an issue with my hibernate configuration but it seems the PersistenceExceptionTranslator implemented by the EntityManagerFactoryBean isn't actually called at all which results in an incorrect translation. Currently the only workaround I see, that seems to work, is to implement another aspect that implements the translation as specified in jira issue #19024.  Also seems related to jira issue #19026.  ---  **Issue Links:** - #19026 Flush exception translation not working anymore with Hibernate 5.2 - #19024 Hibernate5 LocalSessionFactoryBean does not translate javax.persistence exceptions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cff311b03cbd2b092269dbeef79992c675527139","closed","type: task,","spring-projects-issues","2016-12-23T10:05:19Z","2019-01-11T15:16:42Z"
"","19891","Load Time Weaving not working after upgrading Tomcat from 7.0.60 to 7.0.70 [SPR-15328]","**[PalMurugan](https://jira.spring.io/secure/ViewProfile.jspa?name=palmuruganc)** opened **[SPR-15328](https://jira.spring.io/browse/SPR-15328?redirect=false)** and commented  Load Time Weaving not working after upgrading my tomcat version from 7.0.60 to 7.0.70. Please guide me to resolve this issue.  2017-03-08 09:20:23,637 |INFO [localhost-startStop-1] c.g.t.c.AspectWeavingConfiguredConditional$Condition - aspect.enabled is true 2017-03-08 09:20:28,470 |INFO [localhost-startStop-1] c.g.t.c.AspectWeavingConfiguredConditional$Condition - aspect.enabled is true Mar 08, 2017 9:20:31 AM org.apache.catalina.loader.WebappClassLoaderBase addTransformer INFO: Added class file transformer [org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformer@b819e7a] to web application [/universalEngine]. [WebappClassLoader@6037c868] info register aspect org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect [WebappClassLoader@6037c868] info register aspect org.springframework.scheduling.aspectj.AnnotationAsyncExecutionAspect [WebappClassLoader@6037c868] info register aspect org.springframework.transaction.aspectj.AnnotationTransactionAspect [WebappClassLoader@6037c868] info register aspect org.springframework.transaction.aspectj.JtaAnnotationTransactionAspect [WebappClassLoader@6037c868] info register aspect org.springframework.cache.aspectj.AnnotationCacheAspect [WebappClassLoader@6037c868] info register aspect org.springframework.cache.aspectj.JCacheCacheAspect [WebappClassLoader@6037c868] info deactivating aspect 'org.springframework.cache.aspectj.JCacheCacheAspect' as it requires type 'javax.cache.annotation.CacheResult' which cannot be found on the classpath [WebappClassLoader@6037c868] info register aspect com.ghx.testframework.aspect.BrokerComponentStatisticsAspect [WebappClassLoader@6037c868] warning at com/ghx/testframework/aspect/BrokerComponentStatisticsAspect.java::0 no match for this type name: com.ghx.eventbroker.BrokerComponent [Xlint:invalidAbsoluteTypeName] [WebappClassLoader@6037c868] info register aspect com.ghx.testframework.aspect.RuleEngineAspect [WebappClassLoader@6037c868] warning javax.* types are not being woven because the weaver option '-Xset:weaveJavaxPackages=true' has not been specified  Note : Everything is registered properly but Intercept (Around - AOP) is not working.  Thank you, Pal Murugan C   --- No further details from [SPR-15328](https://jira.spring.io/browse/SPR-15328?redirect=false)","open","in: core,","spring-projects-issues","2017-03-08T11:11:17Z","2019-01-11T15:07:58Z"
"","20231","SimpleRequestExpectationManager fails with sequential calls with different count [SPR-15672]","**[Pablo Santiago](https://jira.spring.io/secure/ViewProfile.jspa?name=polysantiago)** opened **[SPR-15672](https://jira.spring.io/browse/SPR-15672?redirect=false)** and commented  When creating a `MockRestServiceServer` and setting a sequential expectation with different counts, it fails:  ```java public class ExpectedCountTest {      private SimpleRequestExpectationManager manager = new SimpleRequestExpectationManager();      @Test     public void sequentialRequestsWithDifferentCount() throws Exception {         this.manager.expectRequest(times(2), requestTo(""/foo"")).andExpect(method(GET)).andRespond(withSuccess());         this.manager.expectRequest(once(), requestTo(""/bar"")).andExpect(method(GET)).andRespond(withSuccess());          this.manager.validateRequest(createRequest(GET, ""/foo""));         this.manager.validateRequest(createRequest(GET, ""/foo""));         this.manager.validateRequest(createRequest(GET, ""/bar""));     }      private ClientHttpRequest createRequest(HttpMethod method, String url) {         return new MockAsyncClientHttpRequest(method, URI.create(url));     }  } ```  ---  **Affects:** 4.3.8  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/tree/master/SPR-15672  **Issue Links:** - #20275 MockRestServiceServer does not honor expectation order with expectations that mandate more than 1 execution. (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/efb735aa9989e9c3337daf9b91b8eab7e4e1f08a, https://github.com/spring-projects/spring-framework/commit/a17255a2e3c7d41ac192d472b32b50dd78abd804","closed","type: bug,","spring-projects-issues","2017-06-16T08:56:31Z","2019-01-11T16:04:55Z"
"","20336","Support raising exception with a custom HTTP status code","**[Ondřej Božek](https://jira.spring.io/secure/ViewProfile.jspa?name=infragile)** opened **[SPR-15781](https://jira.spring.io/browse/SPR-15781?redirect=false)** and commented  Support custom HTTP status codes in `@ResponseStatus` similary as they are supported in `ResponseEntity`. Currently `@ResponseStatus` accepts only enum values of type `HttpStatus`.  Alternatively there could be created some kind of infrastructure for application wide registration of custom status codes, extending standardised `HttpStatus` codes.   ---  **Affects:** 3.2.18, 4.3.9, 5.0 RC2  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2017-07-17T08:26:09Z","2020-07-09T12:44:32Z"
"","20378","AnnotationAwareOrderComparator doesn't handle null values anymore [SPR-15823]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-15823](https://jira.spring.io/browse/SPR-15823?redirect=false)** and commented  The [commit](https://github.com/spring-projects/spring-framework/commit/f813712f5b413b354560cd7cc006352e9defa9a3) introducing nullable annotations seems to have removed the support to handle `null` values in `AnnotationAwareOrderComparator`. Looks it's now assuming calls to `compare(…)` never submit `null` values but they actually do.  ``` java.lang.IllegalStateException: Failed to load ApplicationContext     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:125)     at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:107)     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117)     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)     at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:44)     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:242)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)     at org.junit.runners.Suite.runChild(Suite.java:128)     at org.junit.runners.Suite.runChild(Suite.java:27)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.junit.runner.JUnitCore.run(JUnitCore.java:137)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)     at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) Caused by: java.lang.NullPointerException     at org.springframework.core.annotation.AnnotationAwareOrderComparator.findOrder(AnnotationAwareOrderComparator.java:85)     at org.springframework.core.OrderComparator.getOrder(OrderComparator.java:125)     at org.springframework.core.OrderComparator.getOrder(OrderComparator.java:114)     at org.springframework.core.OrderComparator.doCompare(OrderComparator.java:83)     at org.springframework.core.OrderComparator.compare(OrderComparator.java:69)     at java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)     at java.util.TimSort.sort(TimSort.java:220)     at java.util.Arrays.sort(Arrays.java:1512)     at java.util.ArrayList.sort(ArrayList.java:1454)     at java.util.Collections.sort(Collections.java:175)     at org.springframework.core.annotation.AnnotationAwareOrderComparator.sort(AnnotationAwareOrderComparator.java:121)     at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:767)     at org.springframework.boot.SpringApplication.afterRefresh(SpringApplication.java:760)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:328)     at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:138)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:117)     ... 33 more ```  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20099 Introduce null-safety of Spring Framework API - #21125 NullPointerException in AnnotationAwareOrderComparator#getPriority - #21051 NPE in AnnotationAwareOrderComparator.getPriority  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c5fc4005344ddb355c4a9b66640d46373ad3f353","closed","in: core,","spring-projects-issues","2017-07-27T06:09:14Z","2019-01-11T17:41:49Z"
"","20361","Allow transaction control via Vavr Try type [SPR-15806]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-15806](https://jira.spring.io/browse/SPR-15806?redirect=false)** and commented  With the advent of functional libraries handling exceptions using `Try` types has become quite a recurring pattern, Vavr.io's [`Try`](http://www.vavr.io/vavr-docs/#_try) being a prominent example.  It would be cool if Spring's transaction management understood those well-known types and triggered rollbacks in case a failure representing value is returned from the method.  ---  **Issue Links:** - [DATACMNS-983](https://jira.spring.io/browse/DATACMNS-983) Support for Vavr's Try as query method return value - #21073 Cache, allow custom wrapper types other than java.util.Optional  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2017-07-21T11:45:31Z","2019-02-11T10:46:55Z"
"","20324","PropertyOrFieldReference invalidly reuses cached PropertyAccessor [SPR-15769]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-15769](https://jira.spring.io/browse/SPR-15769?redirect=false)** and commented  A `PropertyOrFieldReference` caches the `PropertyAccessor` used for the first evaluation of the node. However, if a new `EvaluationContext` is provided and a completely different set of `PropertyAccessor` instances is used, none of them actually ever get considered.  The test case below uses a custom `PropertyAccessor` that holds a `Map` of values. The second part of the test registers a new instance of it with different values and still the evaluation returns the old value.  ```java import static org.hamcrest.CoreMatchers.*; import static org.junit.Assert.*;  import java.util.Collections; import java.util.Map;  import org.junit.Test; import org.springframework.expression.AccessException; import org.springframework.expression.EvaluationContext; import org.springframework.expression.Expression; import org.springframework.expression.PropertyAccessor; import org.springframework.expression.TypedValue; import org.springframework.expression.spel.standard.SpelExpressionParser; import org.springframework.expression.spel.support.StandardEvaluationContext;  /**  * @author Oliver Gierke  */ public class PropertyOrFieldReferenceCachingIssue {  	@Test 	public void shouldAlwaysUsePropertyAccessorFromEvaluationContext() {  		SpelExpressionParser parser = new SpelExpressionParser(); 		Expression expression = parser.parseExpression(""name"");  		StandardEvaluationContext context = new StandardEvaluationContext(); 		context.addPropertyAccessor(new ConfigurablePropertyAccessor(Collections.singletonMap(""name"", ""Ollie"")));  		assertThat(expression.getValue(context), is(""Ollie""));  		context = new StandardEvaluationContext(); 		context.addPropertyAccessor(new ConfigurablePropertyAccessor(Collections.singletonMap(""name"", ""Jens"")));  		assertThat(expression.getValue(context), is(""Jens"")); 	}  	static class ConfigurablePropertyAccessor implements PropertyAccessor {  		private final Map values;  		public ConfigurablePropertyAccessor(Map values) { 			this.values = values; 		}  		@Override 		public boolean canRead(EvaluationContext context, Object target, String name) throws AccessException { 			return true; 		}  		@Override 		public boolean canWrite(EvaluationContext context, Object target, String name) throws AccessException { 			return false; 		}  		@Override 		public void write(EvaluationContext context, Object target, String name, Object newValue) throws AccessException {}  		@Override 		public TypedValue read(EvaluationContext context, Object target, String name) throws AccessException { 			return new TypedValue(values.get(name)); 		}  		@Override 		public Class[] getSpecificTargetClasses() { 			return null; 		} 	} } ```  ---  **Affects:** 4.3.9, 5.0 RC2  **Issue Links:** - #21421 ReflectivePropertyAccessor should cache sorted methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bcf9f21ecc17687ce285fa2e1e62b2ed1dfab614, https://github.com/spring-projects/spring-framework/commit/bffcd33ea338af5cc112c3796263c50a7cf4745a","closed","in: core,","spring-projects-issues","2017-07-13T14:24:04Z","2019-01-11T16:26:46Z"
"","20297","Simplify ReflectionUtils.getUniqueDeclaredMethods(…) [SPR-15741]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-15741](https://jira.spring.io/browse/SPR-15741?redirect=false)** and commented  `ReflectionUtils.getUniqueDeclaredMethods(…)` seems to check for covariant return types although it doesn't need to as `doWithMethods(…)` by definition traverses the type hierarchy bottom up.   ---  **Affects:** 4.3.9, 5.0 RC2","open","in: core,","spring-projects-issues","2017-07-06T11:34:17Z","2019-01-11T16:28:28Z"
"","20002","Introduce API to select application listeners [SPR-15441]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-15441](https://jira.spring.io/browse/SPR-15441?redirect=false)** and commented  It would be cool if there was an API that allowed accessing application event listeners by different criterias. One obvious candidate would be transactional event listeners but also being able to find and them by a concrete method reference would be useful.  This came up in the development of [a prototype](https://github.com/olivergierke/spring-domain-events) for persisted domain events that make sure event publications for transactional event listeners don't get lost in case of an application crash after the transaction has completed and before the event has been processed successfully.  ---  **Issue Links:** - #19689 Annotation-based event listener does not receive event published in `@PostConstruct` - #21411 Allow registration of application event listeners in a functional way","open","type: enhancement,","spring-projects-issues","2017-04-12T09:18:35Z","2019-01-13T05:16:34Z"
"","20000","Add constructor to ShadowingClassLoader to create an instance without default excludes [SPR-15439]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-15439](https://jira.spring.io/browse/SPR-15439?redirect=false)** and commented  For testing purposed it would be cool to be able to use `ShadowingClassLoader` but without the default excludes applied.  We currently use a copy with the default excludes registration removed. We'd rather just just a constructor that allows us to skip the default exclude registration.   ---  **Issue Links:** - [DATACMNS-993](https://jira.spring.io/browse/DATACMNS-993) Clean up class loader hacking in tests","closed","type: enhancement,","spring-projects-issues","2017-04-12T05:38:57Z","2017-04-18T15:43:20Z"
"","19995","AbstractGenericHttpMessageConverter.canWrite(Type, Class, MediaType) doesn't call canWrite(Class, MediaType) anymore [SPR-15434]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-15434](https://jira.spring.io/browse/SPR-15434?redirect=false)** and commented  A [recent commit](https://github.com/spring-projects/spring-framework/commit/e5fdd4cd1de76303842e47646213054d25242f4f#diff-53efb8f511d07783bc409424b7daad8aL68) changed the implementation of `AbstractGenericHttpMessageConverter.canWrite(Type, Class, MediaType)` to delegate execution to `canWrite(MediaType)` instead of calling `canWrite(Class, MediaType)`.  This breaks existing implementations that selectively override the method taking two arguments as it's effectively never being called anymore as the framework always invokes the three-argument method.   ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7f162a033bb3bdefe5650eae327b673017bf0ddc","closed","type: regression,","spring-projects-issues","2017-04-11T11:28:25Z","2017-05-08T08:41:47Z"
"","19990","Undeprecate TypeVariableMap methods on GenericTypeResolver [SPR-15429]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-15429](https://jira.spring.io/browse/SPR-15429?redirect=false)** and commented  [This commit](https://github.com/spring-projects/spring-framework/commit/e5fdd4cd1de76303842e47646213054d25242f4f) has removed methods on `GenericTypeResolver` that the `TypeInformation` abstraction in Spring Data relies on. The removal breaks our code without any suitable alternatives for those removed methods in place.  It would be cool if `….getTypeVariableMap(…)` and `….resolveType(Class, Map)` could be reintroduced.   ---  **Affects:** 4.3.7, 5.0 RC1  **Issue Links:** - [DATACMNS-1038](https://jira.spring.io/browse/DATACMNS-1038) java.lang.NoSuchMethodError: org.springframework.core.GenericTypeResolver.getTypeVariableMap(Ljava/lang/Class;)Ljava/util/Map; (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7fbc20e2251b5afe716361ddeda5a4db6af1d884, https://github.com/spring-projects/spring-framework/commit/93fac8882fda0866c8a143c66f7cd675ac7412f5  3 votes, 7 watchers","closed","in: core,","spring-projects-issues","2017-04-10T18:20:50Z","2017-04-18T15:43:20Z"
"","19813","Allow configuring the ContentNegotiationManager in MockMVC standalone controller setup [SPR-15248]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-15248](https://jira.spring.io/browse/SPR-15248?redirect=false)** and commented  Settings that can be made to the MVC infrastructure through `WebMvcConfigurerAdapter.configureContentNegotiation(…)` can't be easily replicated to `MockMvcBuilders.standaloneSetup(…)` as the method to set the `ContentNegotiationManager` is protected. Even if it was public, the API to interact with the manager directly is way different than the one you get through the adapter API.  That effectively means that to replicate the web framework behavior I get through my normal web configuration in standalone controller mode I have to repeat a lot of configuration code which even needs to look different than my normal configuration.  Is there maybe a way to derive the setup ffrom handing over a configration class that extends `WebMvcConfigurerAdapter` so that the production configuration can simply be reused?  To complete the picture, here's the situation that caused the issue in the first palce. The addition of Spring Data Redis transitively pulled in `spring-context-support` into the classpath of a project. That in turn causes Spring MVC all of a sudden to resolve URI endings to media types (due to the presence of `mime.types` on the classpath). This can now now be disabled in the production path by configuring the `ContentNegotiationManager`, but the tests for standalone tests still now run into that file erroneously being considered.   ---  **Affects:** 4.3.6, 5.0 M4","closed","type: enhancement,","spring-projects-issues","2017-02-13T15:13:39Z","2017-03-01T09:55:13Z"
"","20384","Autowire contract is not honored in cases where FactoryBean or @Bean return null [SPR-15829]","**[Oleg Zhurakousky](https://jira.spring.io/secure/ViewProfile.jspa?name=ozhurakousky)** opened **[SPR-15829](https://jira.spring.io/browse/SPR-15829?redirect=false)** and commented  Configuration below reproduces the issue  ``` @Autowired private FooStrategy foo;  @Bean public FooStrategy createFoo() { 	return null; } 	 public String doSomethingWithFoo(){ 	return foo.doSomething();; } ```  The bottom line is that the above does NOT result in “_Field foo in MyApplication required a bean of type 'FooStrategy' that could not be found._” And instead it results in NPE. But the NPE is not happening during AC initialization, rather during the invocation of any callback to 'foo'.  Regardless of the reason to return null from the factory method, the main issue IMHO is that _`@Autowire`_ contract is not followed for this type of scenario.  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20889 BeanNotOfRequiredTypeException (NullBean instead of null) when calling ApplicationContext.getBean(name, type) - #20582 CastClass exception when wiring Map of beans (NullBean instead of 'null' in the map) - #20612 BeanDefinitionValidationException when beans are null (NullBean) and initMethod is set - #20797 null FactoryBean results in BeanCreationException - #21572 Consistent non-exposure of null beans in the BeanFactory API - #20413 `@Lazy` collection of optional elements should not crash when no candidates are found  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/30bd5827b0d7f5ed57a4270c22b3dc6f7ba8b792, https://github.com/spring-projects/spring-framework/commit/b94302b5bde7475b9926dacb9fb69f3c8c894444","closed","type: enhancement,","spring-projects-issues","2017-07-27T23:22:49Z","2019-01-13T05:15:14Z"
"","20041","AnnotationUtils.getValue() may hide relevant errors [SPR-15481]","**[Oleg Zhurakousky](https://jira.spring.io/secure/ViewProfile.jspa?name=ozhurakousky)** opened **[SPR-15481](https://jira.spring.io/browse/SPR-15481?redirect=false)** and commented  At the core of the issue are _AliasFor_ type annotations which are synthesized into a proxy with SynthesizedAnnotationInvocationHandler which delegates to AbstractAliasAwareAnnotationAttributeExtractor.getAttributeValue(..) to get the actual annotation value. When it sees that this annotation is synthesized and has alias value mismatch it results in InvocationtargetException which is trapped inside of _AnnotationUtils.getValue()_ operation which simply return null. This can and most likely will result in subsequent error downstream, but the error message may be misleading (see https://jira.spring.io/browse/INT-4263)  IMHO, while I do believe that the initial intention of returning null for non existing attributes should stay, I also believe that we should trap InvocationTargetException and re-throw. While that may result in breaking change, it's one of those where it's for the good cause.   ---  **Affects:** 4.3.8  **Issue Links:** - [INT-4263](https://jira.spring.io/browse/INT-4263) Misleading error message during misconfigured components.  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1401, and commits https://github.com/spring-projects/spring-framework/commit/299b9d60fd40e70e32c8b91eb737586ca656ee94, https://github.com/spring-projects/spring-framework/commit/17f274fd6a9d4e73dd505594735a286557dc5127, https://github.com/spring-projects/spring-framework/commit/16fdda00c14d930261e02271dd9c0d66de673b11","closed","in: core,","spring-projects-issues","2017-04-25T14:19:56Z","2017-05-08T08:41:44Z"
"","20206","Dramatic performance degradation on writing to DefaultDataBuffer after filling the initial capacity [SPR-15647]","**[Oleg Alexeyev](https://jira.spring.io/secure/ViewProfile.jspa?name=blacklion)** opened **[SPR-15647](https://jira.spring.io/browse/SPR-15647?redirect=false)** and commented  We've faced with high CPU load in some environments having unusually more data than normally expected. After reproducing the problem in-house, it turned out that server was mostly doing reallocation of data buffers:  ``` at java.nio.HeapByteBuffer.(HeapByteBuffer.java:57) at java.nio.ByteBuffer.allocate(ByteBuffer.java:335) at org.springframework.core.io.buffer.DefaultDataBuffer.grow(DefaultDataBuffer.java:272) at org.springframework.core.io.buffer.DefaultDataBuffer.ensureExtraCapacity(DefaultDataBuffer.java:264) at org.springframework.core.io.buffer.DefaultDataBuffer.write(DefaultDataBuffer.java:165) ```  We're in the process of migration to Spring WebFlux, but the legacy code still runs on Jetty / Servlet API and uses `DefaultDataBufferFactory`. WebFlux based code uses Reactor Netty and doesn't have this problem. The matter is that Netty `ByteBuf` doubles its capacity (as does `ArrayList` or anything else) if it's not enough, while `DefaultDataBuffer` grows to the minimum needed capacity to fullfit the current `write` call:  ``` 	void grow(int minCapacity) { 		ByteBuffer oldBuffer = this.byteBuffer; 		ByteBuffer newBuffer = 				(oldBuffer.isDirect() ? ByteBuffer.allocateDirect(minCapacity) : 						ByteBuffer.allocate(minCapacity)); ... ```    ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7085a303822cda26d60e627ffefdaeaf693c5523","closed","in: core,","spring-projects-issues","2017-06-09T18:25:01Z","2017-06-14T10:12:18Z"
"","20162","Spring WebFlux fails with 500 if Accept-Language is set to an empty string [SPR-15603]","**[Oleg Alexeyev](https://jira.spring.io/secure/ViewProfile.jspa?name=blacklion)** opened **[SPR-15603](https://jira.spring.io/browse/SPR-15603?redirect=false)** and commented  ``` 31.05.2017 20:45:06,914 ERROR [org.springframework.web.server.handler.ExceptionHandlingWebHandler] - Could not complete request java.lang.IllegalArgumentException: range= 	at java.util.Locale$LanguageRange.(Locale.java:2913) ~[?:1.8.0_131] 	at sun.util.locale.LocaleMatcher.parse(LocaleMatcher.java:284) ~[?:1.8.0_131] 	at java.util.Locale$LanguageRange.parse(Locale.java:3028) ~[?:1.8.0_131] 	at org.springframework.http.HttpHeaders.getAcceptLanguage(HttpHeaders.java:471) ~[spring-web-5.0.0.M5.jar:5.0.0.M5] 	at org.springframework.http.HttpHeaders.getAcceptLanguageAsLocale(HttpHeaders.java:492) ~[spring-web-5.0.0.M5.jar:5.0.0.M5] 	at org.springframework.web.reactive.result.view.ViewResolutionResultHandler.lambda$handleResult$3(ViewResolutionResultHandler.java:214) ~[spring-webflux-5.0.0.M5.jar:5.0.0.M5] 	at reactor.core.publisher.MonoThenMap$ThenMapMain.onNext(MonoThenMap.java:120) ~[reactor-core-3.0.7.RELEASE.jar:3.0.7.RELEASE] ... ```  ---  **Affects:** 5.0 RC1  **Issue Links:** - #20999 MockHttpServletRequest.addHeader fails for invalid LanguageRange in Accept-Language  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e81651b657b088f2b122499e863dc0e27adca24b","closed","type: bug,","spring-projects-issues","2017-05-31T18:01:30Z","2019-01-11T15:41:40Z"
"","19919","StringToCollectionConverter splits string by comma [SPR-15356]","**[None](https://jira.spring.io/secure/ViewProfile.jspa?name=t3rm1)** opened **[SPR-15356](https://jira.spring.io/browse/SPR-15356?redirect=false)** and commented  When you submit a form (only tried post) with a parameter that includes a comma, and the parameter is bound to a List\ then this value is passed through to the method `org.springframework.core.convert.support.StringToCollectionConverter.convert(Object, TypeDescriptor, TypeDescriptor)`. That method then splits the String at the comma, resulting in a list with two elements instead of one.  I understand that comma is used to split array values in the url. I checked the raw request and the comma is translated to %2C so this shouldn't happen. It must be a bug somewhere in the call hierachy.  This problem only exists if **one** value is submitted for the list. If two or more values are submitted (e.g. two checkboxes checked) then a different converter is choosen (array to list) and no comma splitting is done.   ---  **Affects:** 4.3.7","closed","in: core,","spring-projects-issues","2017-03-17T15:09:12Z","2021-04-30T02:45:27Z"
"","20057","Add isCompleted method on ResponseBodyEmitter [SPR-15498]","**[Niranjan H Rao](https://jira.spring.io/secure/ViewProfile.jspa?name=nhrdls)** opened **[SPR-15498](https://jira.spring.io/browse/SPR-15498?redirect=false)** and commented  org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter does throw exception if its already complete. However there is no simple way to check if ResponseBodyEmitter is complete. Please add a simple method that return the value of complete.  I know using completion handlers could achieve functionality similar to  desired functionality. But it becomes cumbersome if ResponseBodyEmitter is passed to multiple objects/methods and it becomes invalid   ---  **Affects:** 4.3.5","closed","type: enhancement,","spring-projects-issues","2017-05-01T18:50:28Z","2017-05-04T18:48:21Z"
"","19723","Different behavior for @ResponseBody annotation between 4.2.5 and 4.3.5 [SPR-15157]","**[Niranjan H Rao](https://jira.spring.io/secure/ViewProfile.jspa?name=nhrdls)** opened **[SPR-15157](https://jira.spring.io/browse/SPR-15157?redirect=false)** and commented  We are trying to migrate from 4.2.5 to 4.3.5. We have a method like follows  ```java @ResponseBody 	public Map method() {} ```  This method works in 4.2.5, but in 4.3.5 it throws exception as follows  ```java Caused by: com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class java.util.HashMap and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: java.util.HashMap[""result""]) ```  After changing method signature to use Object instead of Serializable, it works in 4.3.5 release too. Something is different the way jackson is handled in 4.3.5.  ```java @ResponseBody 	public Map method() {} ```    ---  **Affects:** 4.3.5","closed","","spring-projects-issues","2017-01-17T22:50:38Z","2020-04-15T10:09:29Z"
"","20015","UriComponentsBuilder doesn't recognise #ed path [SPR-15454]","**[Nilesh Injulkar](https://jira.spring.io/secure/ViewProfile.jspa?name=injulkarnilesh)** opened **[SPR-15454](https://jira.spring.io/browse/SPR-15454?redirect=false)** and commented  This piece of code fails with IllegalArgumentException saying the URL is not a valid HTTP URL.  ``` final String redirectionUrl = ""http://whatever.com/path/#/angularpath?queryparam=value"";  final UriComponents uriComponents = UriComponentsBuilder.fromHttpUrl(redirectionUrl).build(); ```  The URL doesn't seem to be matching expected pattern :  ``` ""^(?i)(http|https):(//(([^@\\[/?#]*)@)?([^/?#:]*)(:(\\d*))?)?([^?#]*)(\\?(.*))?"" ```    ---  **Affects:** 4.3.7","closed","status: declined,","spring-projects-issues","2017-04-17T06:57:42Z","2019-01-12T16:33:24Z"
"","19964","Async annotation should allow for non-blocking execution with CompletableFuture [SPR-15401]","**[Nikolay Georgiev](https://jira.spring.io/secure/ViewProfile.jspa?name=nyxz)** opened **[SPR-15401](https://jira.spring.io/browse/SPR-15401?redirect=false)** and commented  When calling Async methods that have result composed of CompletableFutures Spring blocks the thread execution by calling get() method internally. This breaks the non-blocking nature of CompletableFuture and makes the use of CompletableFuture composition unusable. More details in the StackOverflow question provided.  ---  **Reference URL:** https://stackoverflow.com/questions/43095014/nested-async-calls-in-spring  **Issue Links:** - #16821 Support CompletableFuture as return value in `@MessageMapping` handlers - #19823 Consistently support CompletionStage next to CompletableFuture","closed","type: enhancement,","spring-projects-issues","2017-03-30T08:51:12Z","2019-01-13T05:16:41Z"
"","20048","Allow for HttpOnly cookie result matcher [SPR-15488]","**[Nikola Yovchev](https://jira.spring.io/secure/ViewProfile.jspa?name=nyo)** opened **[SPR-15488](https://jira.spring.io/browse/SPR-15488?redirect=false)** and commented  On some occasions, it's very useful to check whether a Cookie is httpOnly or not.  ``` CookieResultMatchers ```  provides ready-made matchers for value, age, path, etc, but not for httpOnly.  ---  **Affects:** 4.3.7  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1373  **Issue Links:** - #20047 Deceptive error message in Spring Test ModelResultMatchers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/04f0f137e69a8256078e3a6b1637decb7166cd76, https://github.com/spring-projects/spring-framework/commit/9b647021f723e30dffacc0b33b47e534681891e6","closed","type: enhancement,","spring-projects-issues","2017-04-26T20:30:49Z","2019-01-11T16:37:21Z"
"","19690","Incorrect resolution of ResolvableAttributes when MessageSourceSupport#alwaysUseMessageFormat is true [SPR-15123]","**[Nicholas Tsim](https://jira.spring.io/secure/ViewProfile.jspa?name=ntsim)** opened **[SPR-15123](https://jira.spring.io/browse/SPR-15123?redirect=false)** and commented  Since Spring 4.3, validation annotation attributes are captured as `ResolvableAttribute` in `SpringValidatorAdapter` if they are strings. This behaviour appears to have been introduced due to #17986.  When `MessageSourceSupport#alwaysUseMessageFormat` is set to true (in the case of Spring Boot, it is possible to set this using the `spring.messages.always-use-message-format` property) it appears that attributes that may not need formatting will be passed through `MessageFormat`.  In my use case, I have code like this:  ```java public class ValidatedBean {     @Pattern(regexp = ""[\\p{L} -]*"", message = ""{firstname.required}"")     private String firstName; } ```  The regex is a valid expression that matches on Unicode letter characters.  Spring will try and pass the `regexp` attribute string through `MessageFormat` which causes issues as it then tries to resolve an argument for parameter L. Specifically, it will throw `IllegalArgumentException` in `MessageFormat#makeFormat`.  I don't think `ResolvableAttribute` should be applied to the `regexp` attribute (or any other attribute) indiscriminately. Is there something that can/should be done about this?  ---  **Affects:** 4.3.5  **Issue Links:** - #17986 Support MessageSourceResolvable to string argument value at SpringValidatorAdapter","closed","in: core,","spring-projects-issues","2017-01-10T13:53:27Z","2019-01-11T15:33:52Z"
"","20320","RequestMapping annotation to support regular expressions in header value. [SPR-15765]","**[Neto Fontes](https://jira.spring.io/secure/ViewProfile.jspa?name=netofontes)** opened **[SPR-15765](https://jira.spring.io/browse/SPR-15765?redirect=false)** and commented  Spring MVC already supports exact match binding for header name & value defined in `@RequestMapping`.  This improvement would additionally allow to map a request by defining a matching regular expression for the value field so that we wouldn’t need to create additional handler methods to map all variation of the possible header values.  E.g: For a given REST API that takes the header `X-Override` with possible values `true` or `false` which are case-insensitive we would need to have one `@RequestMapping` per each possible way to write `true`: `true`, `True`, `TRUE`, `tRue`, and on…  Instead we could have a regular expression in the header value which matches `true` in all possible ways to write it.  Proposal of usage:  ```java @RequestMapping(         method = RequestMethod.PATCH,         headers = ""X-Override?=^(?i)(true)$"" ) public ResponseEntity overridingOperation( ... ) { ... }  @RequestMapping(         method = RequestMethod.PATCH,         headers = ""X-Override?=^(?i)(false)$"" ) public ResponseEntity nonOverridingOperation( ... ) { ... }  @RequestMapping(         method = RequestMethod.GET,         headers = ""X-Priority?=^(?i)(high|medium|low)$"" ) public ResponseEntity processRequest( ... ) { ... } ```  The `?=` would indicate that the following sequence is a regular expression.   ---  1 votes, 2 watchers","closed","status: declined,","spring-projects-issues","2017-07-12T18:40:30Z","2020-04-01T10:39:22Z"
"","19732","InterceptingClientHttpRequest replaces headers set in request factory instead of merging them [SPR-15166]","**[Nestor Tarin Burriel](https://jira.spring.io/secure/ViewProfile.jspa?name=nestabur)** opened **[SPR-15166](https://jira.spring.io/browse/SPR-15166?redirect=false)** and commented  When a custom requestFactory adds a header to the request and the RequestEntity contains the same header (e.g. cookies), the one in the RequestEntity will take precedence.  Checking the code in `InterceptingClientHttpRequest` class:  ```java ClientHttpRequest delegate = requestFactory.createRequest(request.getURI(), request.getMethod()); getHeaders().putAll(request.getHeaders()); ```  Is this the desired behaviour? Would it be ok if the header values are added? What if the custom request factory wants to add a cookie and the request header adds a different cookie? (the last one will be in the header and the first one discarded)  Kind regards,  Néstor   ---  **Affects:** 4.2.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9243a147946405e0bad69b7430104753dbfc34a1, https://github.com/spring-projects/spring-framework/commit/e3be94c9617b77e00340ab762f2bf226ed39d5fe, https://github.com/spring-projects/spring-framework/commit/69c16f3821354c9b0732687825cb902375649c5a","closed","type: bug,","spring-projects-issues","2017-01-19T13:54:32Z","2017-02-23T09:29:12Z"
"","19647","Common API for MockMvc tests and for real HTTP tests","**[Neil S](https://jira.spring.io/secure/ViewProfile.jspa?name=neils)** opened **[SPR-15081](https://jira.spring.io/browse/SPR-15081?redirect=false)** and commented  There seems to be no common API which can be configure to do mock HTTP tests as well as real HTTP tests.  MockMvc tests suffice during development but for production deployment projects might like to do a complete end-to-end integration test by run real tests against a the (maybe embedded) container sever which will be used in production.  At the moment that means writing the same tests twice using the MockMvc and then TestRestTemplate+assert APIs.  IMHO MockMvc has the friendlier API which results in concise and easier to read test code.  ---  **Affects:** 4.3.5  **Issue Links:** - #18391 Extract MockHttp from MockMvc - #20963 Support varargs for expectations in MockMvc  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2017-01-02T01:50:50Z","2021-04-22T07:05:09Z"
"","19734","MockRestServiceServer should allow for an expectation to never occur. [SPR-15168]","**[Nedenom](https://jira.spring.io/secure/ViewProfile.jspa?name=nedenom)** opened **[SPR-15168](https://jira.spring.io/browse/SPR-15168?redirect=false)** and commented  There was done some nice work in #15991 to allow for an expectation to occur multiple times.  However, I still miss `expect(never(), ...)`, so I am not able to easily verify that the service is **not** called for a particular case.  I did try `expect(times(0))` and `expect(max(0))`, but this throws `java.lang.IllegalArgumentException: 'count' must be >= 1`.  ---  **Affects:** 4.3.4  **Issue Links:** - #15991 MockRestServiceServer should allow for an expectation to occur multiple times.  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bc884023e41ec80dcc1bbb1d6d2006731615cd3a, https://github.com/spring-projects/spring-framework/commit/c8b0ff2fcaecf3f3a61a00103c62302319ae3306","closed","type: enhancement,","spring-projects-issues","2017-01-19T17:56:54Z","2019-01-11T15:29:52Z"
"","20052","Handling servlet request parameter names including square brackets [SPR-15492]","**[Myungwoon Oh](https://jira.spring.io/secure/ViewProfile.jspa?name=homoefficio)** opened **[SPR-15492](https://jira.spring.io/browse/SPR-15492?redirect=false)** and commented  org.springframework.web.bind.ServletRequestDataBinder produces org.springframework.beans.InvalidPropertyException when handling servlet request parameters whose names are including square brackets.  In reality, I see those parameters(whose names are including square brackets) a lot, because jQuery handles the JSON data in this way if the http method is GET.  So I want to contribute to the Spring Community with the tiny improvement.  The full story and codes are shown in the GitHub Gist I provided in the Reference URL.  ---  **Affects:** 5.0 M5  **Reference URL:** https://gist.github.com/HomoEfficio/7e57247818abaa0c2759c015cdf62190  **Issue Links:** - #15351 Binding of parameter arrays named like name[] from POST request  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1408","closed","status: invalid,","spring-projects-issues","2017-04-28T03:39:38Z","2019-01-12T05:20:54Z"
"","19872","Raise warning when Interception code fails [SPR-15308]","**[Muhammad](https://jira.spring.io/secure/ViewProfile.jspa?name=mhewedy)** opened **[SPR-15308](https://jira.spring.io/browse/SPR-15308?redirect=false)** and commented  Spring AOP Annotations (typically `@Transactional`) not working as expected when being called on a method from the same class or called on a non-public (using default spring/springboot configurations).  Most of the time developers (including me) forget about it (or even didn't expect such behaviour at all)  It would be so much gentle if spring log at some INFO+ level about the `@Transactional` annotation is there but without any affect cause to unsatisfied condition.   --- No further details from [SPR-15308](https://jira.spring.io/browse/SPR-15308?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-03-02T21:19:21Z","2017-03-03T17:29:00Z"
"","20168","Spring Webflux: ServerRequest.queryParam() throws NullPointerException for a query parameter without ""="" [SPR-15609]","**[Moritz Schulze](https://jira.spring.io/secure/ViewProfile.jspa?name=mschulze)** opened **[SPR-15609](https://jira.spring.io/browse/SPR-15609?redirect=false)** and commented  The method `ServerRequest.queryParam(String)` in the Spring Webflux project triggers a NullPointerException when a query parameter is set without value.  Example: `curl http://localhost:8080/foo?filter` will cause an NPE when `req.queryParam(""filter"")` is called.  This is due to the usage of `Optional.of(String)` here: https://github.com/spring-projects/spring-framework/blob/850408455381a6b0b5d40f76276448f0d241e69d/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java#L132  I am not sure what a good solution would be. Using `Optional.ofNullable(String)` would return an empty Optional for an existing parameter. This could be wrong for some use cases.   ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8ea54270e1bbaf32d0b2956ca6c9cab43437dbf6","closed","type: bug,","spring-projects-issues","2017-06-01T13:23:30Z","2017-06-14T10:12:19Z"
"","20240","Classpath Resource URL handling still wrong with Tomcat 8.5.12 [SPR-15681]","**[Moritz Kleine](https://jira.spring.io/secure/ViewProfile.jspa?name=mor7tz)** opened **[SPR-15681](https://jira.spring.io/browse/SPR-15681?redirect=false)** and commented  When building WAR files with resources residing in `/WEB-INF/classes` the following exception is raised when starting the webapp in tomcat 8.5.12:  ``` org.springframework.beans.factory.BeanDefinitionStoreException: I/O failure during classpath scanning; nested exception is java.io.FileNotFoundException: file:/opt/apache-tomcat-8.5.12/webapps/test.war$/WEB-INF/classes/com/acme/test (No such file or directory)         at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:323) ~[sp ring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]         at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:272) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEAS E] ... ```  The very same setup used to work fine before https://bz.apache.org/bugzilla/show_bug.cgi?id=60728 and https://github.com/spring-projects/spring-boot/issues/7949. At least we're using this packaging successfully with tomcat 7.0.x,","closed","in: core,","spring-projects-issues","2017-06-19T09:51:38Z","2022-02-18T20:24:21Z"
"","19878","MethodValidationPostProcessor not respecting aspect order [SPR-15315]","**[Mohana Rao S V](https://jira.spring.io/secure/ViewProfile.jspa?name=mohanraosv)** opened **[SPR-15315](https://jira.spring.io/browse/SPR-15315?redirect=false)** and commented  Not able to control the order of MethodValidationPostProcessor aspect.  Similar to #16397  ---  **Affects:** 4.3.7  **Attachments:** - [SPR-15315.zip](https://jira.spring.io/secure/attachment/23796/SPR-15315.zip) (_9.14 kB_)  **Issue Links:** - #16397 Asynchronous method execution is always invoked before bean validation","open","type: enhancement,","spring-projects-issues","2017-03-05T20:12:59Z","2019-01-11T15:09:09Z"
"","20366","Spring Security Web HttpSessionRequestCache Custom SavedRequest [SPR-15811]","**[MohamadReza Namazi](https://jira.spring.io/secure/ViewProfile.jspa?name=mohamadreza)** opened **[SPR-15811](https://jira.spring.io/browse/SPR-15811?redirect=false)** and commented  we have a situation where our server's are behind a LoadBalancer and we using ssl offloading and therefor  we have a non secure connection on backend. saved request make a caching a http request and later try to redirect user to http instead of https because in HttpSessionRequestCache instantiation of DefaultSavedRequest is hard coded, and there is nothing like PortResolver for customization of scheme resolving.   --- No further details from [SPR-15811](https://jira.spring.io/browse/SPR-15811?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-07-24T12:40:04Z","2019-01-12T05:20:31Z"
"","19933","Regression: CssLinkResourceTransformer is now incompatible with relative links [SPR-15369]","**[Miłosz S](https://jira.spring.io/secure/ViewProfile.jspa?name=milosz)** opened **[SPR-15369](https://jira.spring.io/browse/SPR-15369?redirect=false)** and commented  Issue caused by #19166 and commit [679b661](https://github.com/spring-projects/spring-framework/commit/679b661e199502fc47f47917dd9a54aea98529b2)  Stacktrace:  ``` java.lang.NullPointerException: null 	at org.springframework.web.servlet.resource.ResourceTransformerSupport.toAbsolutePath(ResourceTransformerSupport.java:99) ~[spring-webmvc-5.0.0.BUILD-20170321.085409-1.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.resource.CssLinkResourceTransformer.transform(CssLinkResourceTransformer.java:106) ~[spring-webmvc-5.0.0.BUILD-20170321.085409-1.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.resource.DefaultResourceTransformerChain.transform(DefaultResourceTransformerChain.java:67) ~[spring-webmvc-5.0.0.BUILD-20170321.085409-1.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.getResource(ResourceHttpRequestHandler.java:428) ~[spring-webmvc-5.0.0.BUILD-20170321.085409-1.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:323) ~[spring-webmvc-5.0.0.BUILD-20170321.085409-1.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:51) ~[spring-webmvc-5.0.0.BUILD-20170321.085409-1.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) ~[spring-webmvc-5.0.0.BUILD-20170321.085409-1.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) ~[spring-webmvc-5.0.0.BUILD-20170321.085409-1.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:964) ~[spring-webmvc-5.0.0.BUILD-20170321.085409-1.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:856) ~[spring-webmvc-5.0.0.BUILD-20170321.085409-1.jar:5.0.0.BUILD-SNAPSHOT] ```  Steps and reason:  1. `CssLinkResourceTransformer` parses relative link in CSS file 2. Tries to resolve it by calling `ResourceTransformerSupport#toAbsolutePath(...)` 3. `toAbsolutePath(...)` calls `this.getResourceUrlProvider()` 4. BUT from documentation of `setResourceUrlProvider()` we know that: _""This is required only for links expressed as full paths, i.e. including context and servlet path, and not for relative links. By default this property is not set.""_  So `toAbsolutePath` is breaking a contract by requiring resourceUrlProvider even for relative paths. See method `resolveUrlPath()` for ideas what could be a possible fix.  ---  **Affects:** 5.0 M3, 5.0 M4, 5.0 M5  **Issue Links:** - #19166 CssLinkResourceTransformer is incompatible with ContentVersionStrategy when using Caching  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2baceac5ff03489628e058c76a35306519e6cbb2","closed","type: regression,","spring-projects-issues","2017-03-21T11:55:33Z","2019-01-11T15:02:36Z"
"","20016","ScheduledAnnotationBeanPostProcessor does not support Duration syntax [SPR-15455]","**[Misagh Moayyed](https://jira.spring.io/secure/ViewProfile.jspa?name=mmoayyed)** opened **[SPR-15455](https://jira.spring.io/browse/SPR-15455?redirect=false)** and commented  The ScheduledAnnotationBeanPostProcessor component is not able to parse and support the duration syntax. (PT20S).  In order to support this, one may have to configure a StringValueResolver on ScheduledAnnotationBeanPostProcessor but there is no clear path to how that might be injected into ScheduledAnnotationBeanPostProcessor. Given how SchedulingConfiguration creates the ScheduledAnnotationBeanPostProcessor bean, it seems like the StringValueResolver instance is always hardcoded.  Received error is:  ``` Initialization of bean failed; nested exception is java.lang.IllegalStateException: Encountered invalid @Scheduled method 'run': Invalid initialDelayString value ""PT10S"" - cannot parse into integer> ```  ---  **Affects:** 4.3.7  **Issue Links:** - #20736 StringToLocaleConverter should allow BCP 47 values - #19405 `@DateTimeFormat` support for YearMonth, MonthDay, Year  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/13c735442cc126ba2cc2c8b7518f6246afffc6b3","closed","type: enhancement,","spring-projects-issues","2017-04-17T08:10:56Z","2019-01-13T05:16:32Z"
"","19769","StandardMultipartHttpServletRequest cannot decode multipart Content-Disposition header encoded by FormHttpMessageConverter [SPR-15205]","**[Miroslav Holubec](https://jira.spring.io/secure/ViewProfile.jspa?name=myroch)** opened **[SPR-15205](https://jira.spring.io/browse/SPR-15205?redirect=false)** and commented  There is wrong behavior when encoding/decoding `Content-Disposition` header. When I do setMultipartCharset() on AllEncompassingFormHttpMessageConverter, it emits header like this:  ``` Content-Disposition: form-data; name=""uploadedFile""; filename=""=?UTF-8?Q?Declara=C3=A7=C3=A3o.pdf?="" ```  `StandardMultipartHttpServletRequest` cannot decode such a name, as it expects that ""filename"" is followed by asterisk.  I'm a bit lost in RFCs, as not sure if [RFC 6266](https://tools.ietf.org/html/rfc6266) should be applied here (means asterisk required) or not.  ---  **Affects:** 4.3.6  **Issue Links:** - #19959 Possibility to configure encoding other than ascii in FormHttpMessageConverter.MultipartHttpOutputMessage (_**""is duplicated by""**_) - #16724 FormHttpMessageConverter writes ASCII encoded so that a multipart form data can not contain filenames with German Umlaute - #17904 File upload with Servlet 3 multipart requests should support filename with charset encoding (RFC 2231) - #18979 Introduce HttpHeaders getContentDisposition() and setContentDisposition() - #19115 HttpHeaders.setContentDispositionFormData() doesn't encode non-acsii characters correctly - #20097 Unable to emulate upload filename browser behaviour with RestTemplate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/390bb871d85f56aaeed98aeb45d688fcf35af8e7, https://github.com/spring-projects/spring-framework/commit/bb684ce60b82bb2d3a81828a6780800c51bb4e33, https://github.com/spring-projects/spring-framework/commit/75117f42b827397890060d2297b79bbc1b0c528c, https://github.com/spring-projects/spring-framework/commit/f89511e7fe9c32ad28de2c00a6197ca9ad6ce937, https://github.com/spring-projects/spring-framework/commit/3009e29489567f69d4f458c13eaaf2dbbb38f477","closed","type: enhancement,","spring-projects-issues","2017-01-30T11:03:59Z","2019-01-11T14:35:43Z"
"","19743","JsonViewResponseBodyAdvice have to support mutiple classes [SPR-15177]","**[Minwoo Kang](https://jira.spring.io/secure/ViewProfile.jspa?name=minwoo.kang)** opened **[SPR-15177](https://jira.spring.io/browse/SPR-15177?redirect=false)** and commented  I read the docs [1].  But Support more than one class is very useful. Do you have a plan improve this?  [1]: http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/JsonViewResponseBodyAdvice.html    --- No further details from [SPR-15177](https://jira.spring.io/browse/SPR-15177?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-01-23T06:26:18Z","2017-02-01T02:17:36Z"
"","19927","Drop DeferredQueryInvocationHandler.finalize() [SPR-15363]","**[Milan Mimica](https://jira.spring.io/secure/ViewProfile.jspa?name=mmimica)** opened **[SPR-15363](https://jira.spring.io/browse/SPR-15363?redirect=false)** and commented  Remove `org.springframework.orm.jpa.SharedEntityManagerCreator.DeferredQueryInvocationHandler.finalize()`  `Object.finalize()` is being [deprecated](https://bugs.openjdk.java.net/browse/JDK-8165641) in Java 9 and bound to be removed in later versions.  And, what I find more important, it creates significant performance issues. When the class implements `finalize()` the Hotspot VM internally calls `java.lang.ref.Finalizer#add()` from Object's constructor, and there is a `synchronized` block in it. Spring-data-jpa creates **lots** of `DeferredQueryInvocationHandler` objects.  Consider using Java 9 [Cleaner API](http://download.java.net/java/jdk9/docs/api/java/lang/ref/Cleaner.html). But if I understand correctly, the finalize() is there only ""for open/close statistics to be in sync"".  ---  **Affects:** 4.3.7, 5.0 M5  **Issue Links:** - #16077 EntityManager should explicitly get closed for non-executed Query objects  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c31bfe65aaab396aeb9bddc56de2ad162f0a773c, https://github.com/spring-projects/spring-framework/commit/b2a6a572d3855699752b54e44a3415f902da952f","closed","type: task,","spring-projects-issues","2017-03-20T13:55:03Z","2019-01-11T15:02:24Z"
"","18762","Please add documentation and examples on reactive WebSockets [SPR-15700]","**[Mikhail Konovalov](https://jira.spring.io/secure/ViewProfile.jspa?name=mskonovalov)** opened **[SPR-15700](https://jira.spring.io/browse/SPR-15700?redirect=false)** and commented  The only lines in docs now  > On the client side create a WebSocketClient for one of the supported libraries listed above: >  > WebSocketClient client = new ReactorNettyWebSocketClient(); > client.execute(""ws://localhost:8080/echo""), session -> ...).blockMillis(5000);  And that's it. I think it's definitely not enough. Here are more examples for JS client on the internet ando absolutely no for server-to-server interaction. I'd like to get more on how to authorize, how to manipulate messages, if messages in json how to add marshaller and so on. I beleive we need to add slightly more complicated example than simple echo.  Thank you in advance.  ---  **Affects:** 5.0 RC2  This issue is a sub-task of #19715  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/536e72c8df7aa206bd02268e5bef939b73d5b653, https://github.com/spring-projects/spring-framework/commit/0dd31b834e93d7f890e0b22360920011884ec2bd","closed","type: task,","spring-projects-issues","2017-06-23T20:32:56Z","2019-01-11T16:12:08Z"
"","20251","Kotlin unable to inherit type for WebTestClient#BodySpec [SPR-15692]","**[Mikhail Konovalov](https://jira.spring.io/secure/ViewProfile.jspa?name=mskonovalov)** opened **[SPR-15692](https://jira.spring.io/browse/SPR-15692?redirect=false)** and commented  It seems that due to recursive generics in `BodySpec` interface  ```java interface BodySpec ```  and due to `expectBody` method returns  ```java  BodySpec expectBody(Class bodyType); ```  `WebTestClient` cannot be used in Kotlin.  Kotlin inherits the result of `.expectBody(Person::class.java)` as `BodySpec` and thus the following methods in chain cannot be constructed due to the following error:  > Error:(25, 20) Kotlin: Type inference failed: Not enough information to infer parameter T in fun  isEqualTo(p0: Controller.Person!): T! > Please specify it explicitly.  And it applies only `Nothing` as a type parameter. But in this case generated bytecode contains the following line  ```java throw null ```  Example:  ```java @Test fun `test get`() {     val expectBody: BodySpec = client.get().uri(""/person/42"").exchange()             .expectBody(Person::class.java)     expectBody.isEqualTo(Person(""42"", ""Ivan""))                            // doesn't compile here     expectBody.isEqualTo(Person(""42"", ""Ivan""))       // doesn't compile here     expectBody.isEqualTo(Person(""42"", ""Ivan""))                   // compile but lead to ""throw null"" in bytecode } ```  If you work with list the situation is a bit better - Kotlin still cannot inherit type param automatically but you can specify it explicitly due to method `expectBodyList` in interface `ListBodySpec` doesn't return wildcards  ```java  ListBodySpec expectBodyList(Class elementType); ```  Example:  ```java @Test     fun `test list`() {         val expectBodyList: ListBodySpec = client.get().uri(""/person"").exchange()                 .expectBodyList(Person::class.java)         expectBodyList.consumeWith { list -> Assert.assertTrue(true) }   // need to specify type param explicitly     } ```  Full example with java and kotlin can be found  [here](https://gist.github.com/mskonovalov/42761bbc548e92c2af16c40cffcfcaf3). Tests in java works well in these cases.  ---  **Affects:** 5.0 RC2  **Reference URL:** https://gist.github.com/mskonovalov/42761bbc548e92c2af16c40cffcfcaf3  **Issue Links:** - #20606 Unable to use WebTestClient with mock server in Kotlin  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/91c8b62817facb1e7b25c070f0f29b8ae0e23c3d, https://github.com/spring-projects/spring-framework/commit/568a0b5b79ab170d5f9ea96df43ea9560f93f9ec  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2017-06-22T21:34:50Z","2020-06-25T12:48:04Z"
"","19844","Allow for CachingMetadataReaderFactory cache size to be easily updated [SPR-15278]","**[Mikhail Dobrinin](https://jira.spring.io/secure/ViewProfile.jspa?name=mvd)** opened **[SPR-15278](https://jira.spring.io/browse/SPR-15278?redirect=false)** and commented  Currently there doesn't appear to be any good way to set the the cache limit (`CachingMetadataReaderFactory.setCacheLimit(int)`). For example you can't set this limit through AnnotationConfigApplicationContext since the scanner field doesn't have a setter and more importantly is final. This could be a potential setting for certain applications to improve their performance.  ---  **Affects:** 4.2.9  **Issue Links:** - #19219 Cache ASM metadata at the context level","open","type: enhancement,","spring-projects-issues","2017-02-21T22:03:20Z","2019-01-11T14:28:06Z"
"","19904","Impact of RCE vulnerability with Commons FileUpload (CVE-2017-5638) [SPR-15341]","**[Mike Norman](https://jira.spring.io/secure/ViewProfile.jspa?name=mwnorman)** opened **[SPR-15341](https://jira.spring.io/browse/SPR-15341?redirect=false)** and commented  CVE-2017-5638 describes a RCE exploit due to parse-bug for `content-type` in the Jakarta Multipart parser. I believe Spring Web's CommonsMultipartResolver is based upon the above code  A patch has been proposed at:  https://git-wip-us.apache.org/repos/asf?p=struts.git;a=commitdiff;h=6b8272ce47160036ed120a48345d9aa884477228  Should be looked at, n'est-ce pas?   ---  **Reference URL:** https://github.com/rapid7/metasploit-framework/issues/8064","closed","status: invalid,","spring-projects-issues","2017-03-10T20:29:38Z","2019-01-12T05:21:04Z"
"","20202","[doc] Document urlDecode=false implies alwaysUseFullPath=true [SPR-15643]","**[Mike Noordermeer](https://jira.spring.io/secure/ViewProfile.jspa?name=miken)** opened **[SPR-15643](https://jira.spring.io/browse/SPR-15643?redirect=false)** and commented  #15727 made some changes to the URL processing, which seem to work for most of the cases, but not for 1 specific case: encoded backslashes in paths.  I have a `DispatcherServlet` mapped to `/`, and am using a `UrlPathHelper` with `urlDecode` set to `false`. When I issue a request to `/testcontroller/test%5Ctest`, this is mapped to `/testcontroller/test/test` instead of `/testcontroller/test\test`. This is because Tomcat rewrites the `%5C` to `/` in the servlet path.  I should probably set `alwaysUseFullPath`, but maybe this can be fixed by rewriting backslashes to forward slashes in `getPathWithinServletMapping()` as well?  P.S., Tomcat is running with the options necessary to support `%5C` in url's (`org.apache.catalina.connector. CoyoteAdapter.ALLOW_BACKSLASH` and `org.apache.tomcat.util.buf. UDecoder.ALLOW_ENCODED_SLASH`).  ---  **Affects:** 4.3.8  **Issue Links:** - #15727 URLs containing %2F (forward slash) are not mapped correctly to `@RequestMapping` methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e37af83459b79096f614add2df26a14a5e3aa571","closed","type: enhancement,","spring-projects-issues","2017-06-08T15:04:50Z","2019-01-13T05:15:52Z"
"","19721","CookieLocaleResolver maxAge documentation wrong [SPR-15155]","**[Mike Noordermeer](https://jira.spring.io/secure/ViewProfile.jspa?name=miken)** opened **[SPR-15155](https://jira.spring.io/browse/SPR-15155?redirect=false)** and commented  https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-localeresolver-cookie states:  > cookieMaxAge default: Integer.MAX_INT  The default is `null` though, so either the documentation needs updating, or the `CookieLocaleResolver` needs updating (`null` creates a session-bound cookie, which is kind of useless if there is also a `SessionLocaleResolver`)  ---  **Affects:** 4.3.5  **Issue Links:** - #19708 MockSessionCookieConfig#maxAge defaults to 0 instead of -1","closed","type: documentation,","spring-projects-issues","2017-01-17T14:11:45Z","2019-01-11T15:30:50Z"
"","19898","Add support for Sagas (Compensating) Transactions [SPR-15335]","**[MIhalcea Vlad](https://jira.spring.io/secure/ViewProfile.jspa?name=mih_vlad)** opened **[SPR-15335](https://jira.spring.io/browse/SPR-15335?redirect=false)** and commented  In the world of MicroServices, [Saga transactions](https://msdn.microsoft.com/en-us/library/dn589804.aspx) are a way to ensure that you can enroll multiple service calls into a workflow so that you can execute a long-running transaction without having to take any locks or imply a 2PC transaction manager, which is not suitable in a distributed system scenario where processing times can be invariable.  Currently, there is little support for the Saga pattern. I also found that [Axon supports it](http://www.axonframework.org/docs/2.0/sagas.html), and possibly [Narayana](https://github.com/jbosstm/quickstart/tree/master/compensating-transactions).  It would be great if we can discuss if there is a way to add this in Spring framework since it's definitely a handy feature. I assume that Sagas go hand-in-hand with the Spring 5 Reactive approach.   ---  1 votes, 6 watchers","open","type: enhancement,","spring-projects-issues","2017-03-09T10:50:23Z","2020-08-24T17:31:33Z"
"","20394","SpringValidatorAdapter fails to retrieve value for Bean Validation 2.0's """" literal [SPR-15839]","**[Michał Sobkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=perceptron8)** opened **[SPR-15839](https://jira.spring.io/browse/SPR-15839?redirect=false)** and commented  It seems like `SpringValidatorAdapter` doesn't handle `` literal. It is sometimes expected, as far as I understand JSR 380 spec correctly. Please, review http://beanvalidation.org/2.0/spec/2.0.0.cr3/#valueextractordefinition-builtinvalueextractors and correct me if I'm wrong. Note ``, `` and `` too.  I hope that ""Reference URL"" contains SSCCE. Will keep it for some time. I've attached all interesting files just in case something goes wrong.  As you (will be able to) see, `validator.validate(bean, errors)` ends up with `IllegalStateException`. I would expect one field error instead.  One more thing: I believe it's not about ""bean property versus direct field access"". Getters and setters are here. To be sure, I checked not only `BeanPropertyBindingResult` but `DirectFieldBindingResult` too. Same result.  ---  **Affects:** 5.0 RC3  **Reference URL:** https://github.com/perceptron8/spr-13482  **Attachments:** - [MyBean.java](https://jira.spring.io/secure/attachment/25066/MyBean.java) (_276 bytes_) - [MyConfiguration.java](https://jira.spring.io/secure/attachment/25065/MyConfiguration.java) (_387 bytes_) - [MyTest.java](https://jira.spring.io/secure/attachment/25064/MyTest.java) (_921 bytes_) - [pom.xml](https://jira.spring.io/secure/attachment/25063/pom.xml) (_2.08 kB_)  **Issue Links:** - #20363 Compatibility with Hibernate Validator 6.0 GA (_**""is depended on by""**_) - #20490 Wrong exception thrown by Springframework Beans when Type validation fails (_**""is duplicated by""**_) - #18061 Compatibility with Bean Validation 2.0 and JPA 2.2 - #20470 Error on type argument constraint validation failure  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de09f8ca1f6cc5727e4507c4c5ad65caae649dc0, https://github.com/spring-projects/spring-framework/commit/26284cac4f86a4e6aeead19d8676f6459f422fbb","closed","in: core,","spring-projects-issues","2017-07-31T19:04:14Z","2019-01-11T17:40:16Z"
"","19681","Non-JSON response  [SPR-15114]","**[Michał Marciniec](https://jira.spring.io/secure/ViewProfile.jspa?name=michal.marciniec)** opened **[SPR-15114](https://jira.spring.io/browse/SPR-15114?redirect=false)** and commented  In my Spring Boot 1.4.3.RELEASE project I have a global exception mapper:  ```java // Some comments here @ControllerAdvice public class GlobalExceptionController {      @ResponseStatus(HttpStatus.NOT_FOUND)     @ExceptionHandler({ResourceNotFoundException.class})     @ResponseBody     public ErrorMessage logNotFoundException(HttpServletRequest request, Exception exception) {         return new ErrorMessage(exception.getMessage());     }      } ```  and I've also created the following, extended Repository interface:  ```java @NoRepositoryBean public interface MyCrudRepository extends Repository {     default T getOne(ID id) {         return findOne(id).orElseThrow(ResourceNotFoundException::new);     } } ```  Now, when I invoke `getOne` with non-existent ID, method throws `ResourceNotFoundException`, what in turn prints the following stack trace:  ``` 2017-01-09 13:33:43.331 ERROR 7392 --- [nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception  org.springframework.transaction.TransactionSystemException: Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Transaction marked as rollbackOnly 	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:526) ~[spring-orm-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:761) ~[spring-tx-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:730) ~[spring-tx-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:483) ~[spring-tx-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:290) ~[spring-tx-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) ~[spring-tx-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:655) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	at com.codeball.utils.development.DevelopmentSecurityContextFilter$$EnhancerBySpringCGLIB$$74a707c4.doFilter() ~[main/:na] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) ~[tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:522) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:1110) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:785) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1425) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_65] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_65] 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.4.jar:8.5.4] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_65] Caused by: javax.persistence.RollbackException: Transaction marked as rollbackOnly 	at org.hibernate.jpa.internal.TransactionImpl.commit(TransactionImpl.java:58) ~[hibernate-entitymanager-5.0.9.Final.jar:5.0.9.Final] 	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:517) ~[spring-orm-4.3.2.RELEASE.jar:4.3.2.RELEASE] 	... 26 common frames omitted ```  which is fine, since `@Transactional(noRollbackFor = ResourceNotFoundException.class)` is missing, however, this leads to something which (in my opinion) should never happen - non-JSON response is returned to the frontend:  ```javascript {""isSilent"":false,""message"":""Requested resource is unavailable.""}{""timestamp"":1483965223345,""status"":404,""error"":""Not Found"",""exception"":""com.codeball.exceptions.ResourceNotFoundException"",""message"":""Requested resource is unavailable."",""path"":""/api/game/19""} ```  It looks like those exceptions (my custom `ResourceNotFoundException` and `javax.persistence.RollbackException`) are caught by two different mappers, translated  separately into JSON format and then **concatenated** - what ends up in non-JSON response.   --- No further details from [SPR-15114](https://jira.spring.io/browse/SPR-15114?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-01-09T12:58:04Z","2019-01-12T05:21:25Z"
"","19965","Caching of cache meta data causes classes to not be unloadable as when factory is closed this data is not removed [SPR-15402]","**[Michael Wiles](https://jira.spring.io/secure/ViewProfile.jspa?name=michaelwiles@gmail.com)** opened **[SPR-15402](https://jira.spring.io/browse/SPR-15402?redirect=false)** and commented  I have a rather interesting problem and I understand it is rather narrow but it means I cannot use caching and would be fairly simple to fix.  It relates to #16942 though it is not dependent on this.  Relevant code (in org.springframework.cache.jcache.interceptor.AbstractFallbackJCacheOperationSource)  ```java 	private final Map>(1024);  	@Override 	public JCacheOperation getCacheOperation(Method method, Class targetClass) { 		// First, see if we have a cached value. 		Object cacheKey = new MethodCacheKey(method, targetClass); 		JCacheOperation cached = this.cache.get(cacheKey); 		if (cached != null) { 			return cached; 		} 		else { 			JCacheOperation operation = computeCacheOperation(method, targetClass); 			if (operation != null) { 				if (logger.isDebugEnabled()) { 					logger.debug(""Adding cacheable method '"" + method.getName() 							+ ""' with operation: "" + operation); 				} 				this.cache.put(cacheKey, operation); 			} 			return operation; 		} 	} ```  What I do is the following...  I have a parent application context and this context has caching enabled (via ) and then with a custom class loader I load a set of classes where one of them is an `@Configuraton` class. I then load this as an application context with the ""core"" context as the parent. This child context makes a bunch of beans available that implement well known interfaces from core thus allowing core to call to these beans in a pluggable way.  What I can then do is close this child application context, make the classloader that loaded them unreachable. This causes this context and its classes to be garbage collected.  It is now possible to change something in this child context, reload it, and for the parent context to get the changes. This allows on the fly redeployment of beans. Very nice.  However I have recently discovered that my classes were not being successfully unloaded. Thanks to the amazing tool that is YourKit I have narrowed down the issue to cache field in org.springframework.cache.jcache.interceptor.AbstractFallbackJCacheOperationSource. This is the field that caches the various methods and their cache meta data.  The problem is that when I load the child context it registers all the methods in this meta data cache but when I close the context it does not remove these meta data entries thus keeping the class loader that loaded the classes alive thus stopping these classes becoming unreachable and they do not thus get unloaded and cannot therefore be reloaded.  Please can something be added to the default JCache implementation that unregisters the meta data entries added by an application context load when that context is closed.  I'd be more than happy to help with this though I suspect it might have a fairly big impact as the application context the method comes from is not passed in to this method (this would be required I suspect). Although what might be possible is for the child contexts to hold a container of what methods cache meta data were registered during their load and thus be able to unregister this when they are unloaded.  Another alternative would be for the cache activation to not be inherited by child contexts. It would sort my issue out but it would mean that I would not be able to use caching in any of my child contexts (I don't so this is not a problem for me - at this juncture).  I forgot to mention while writing that I think the best solution would be to incorporate weak references into this map thus allowing for the unload of these classes. This is fairly low impact and I think a real possibility.  ---  **Affects:** 4.3.7  **Issue Links:** - #16942 JCache operations metadata are not cached properly","closed","in: core,","spring-projects-issues","2017-03-30T12:07:35Z","2019-01-11T16:44:25Z"
"","20010","Cache Abstraction: Improve unless condition with optional [SPR-15449]","**[Michael Simons](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.simons)** opened **[SPR-15449](https://jira.spring.io/browse/SPR-15449?redirect=false)** and commented  The unless condition should use the null safe operator.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1387, and commits https://github.com/spring-projects/spring-framework/commit/135651de9a0294dfab3829eb96a399d2b200032f","closed","type: documentation,","spring-projects-issues","2017-04-13T06:06:51Z","2017-04-18T15:43:20Z"
"","20009","SpEL examples in chapter ""Cache Abstraction"" [SPR-15448]","**[Michael Simons](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.simons)** opened **[SPR-15448](https://jira.spring.io/browse/SPR-15448?redirect=false)** and commented  The conditions in ""Conditional caching"" don't work, need to call ""length()"" in Java 8.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1386, and commits https://github.com/spring-projects/spring-framework/commit/37d0db161512c2a06cfd3d80a622951c4d6f5c50","closed","type: documentation,","spring-projects-issues","2017-04-13T06:05:45Z","2017-04-18T15:43:20Z"
"","20330","Bean factory method collision with configuration class name gives unclear error message [SPR-15775]","**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[SPR-15775](https://jira.spring.io/browse/SPR-15775?redirect=false)** and commented  When a method annotated with an `@Bean` shares the same name as the `@Configuration` class it's in, an unclear exception is thrown.  I discovered this with the following configuration:  ```java @Configuration public class StatementJob { ... 	@Bean 	public Job statementJob() {  		return this.jobBuilderFactory.get(""statementJob"") 				.start(importFlow()) 				.next(updateBalance()) 				.next(generateStatements()) 				.build(); 	} ... ```  Note that the factory method name is the same (although case is different).  When I ran the code above, I received the following exception:  ``` 2017-07-14 09:46:06.881 ERROR 62285 --- [           main] o.s.boot.SpringApplication               : Application startup failed  org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'dataSourceInitializerPostProcessor': Unsatisfied dependency expressed through field 'beanFactory'; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'statementJob' defined in class path resource [io/spring/batch/configuration/StatementJob.class]: factory-bean reference points back to the same bean definition 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:588) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:366) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1264) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:223) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:703) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:528) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE] 	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE] 	at io.spring.batch.StatementApplication.main(StatementApplication.java:12) [classes/:na] Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'statementJob' defined in class path resource [io/spring/batch/configuration/StatementJob.class]: factory-bean reference points back to the same bean definition 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod(AbstractAutowireCapableBeanFactory.java:675) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineTargetType(AbstractAutowireCapableBeanFactory.java:640) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:609) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1484) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:425) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:395) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1267) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1101) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:585) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] 	... 18 common frames omitted ```  I'm still not clear as to how the collision occurs or why they need to be different, but when I change the class name to `StatementJobConfiguration` the exception goes away.  A better error message would be very useful here.   ---  **Affects:** 4.3.9  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a032e863554caf74302867b51b062bf5d15e5c97, https://github.com/spring-projects/spring-framework/commit/bca5a362168e2dad27f273966857fb2f6b9fcd88  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2017-07-14T14:48:26Z","2018-07-07T18:55:43Z"
"","20200","Protect DataSourceUtils#getConnection(DataSource) against null from DataSource [SPR-15641]","**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[SPR-15641](https://jira.spring.io/browse/SPR-15641?redirect=false)** and commented  When testing Spring Batch against the latest Spring Framework 5 snapshots, I came across the scenario where we're getting an unexpected NPE being thrown.  Specifically, the `org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBeanTests#testMissingMetaData` test mocks the use case of a `DataSource` returning `null`.  The test causes `org.springframework.jdbc.support.JdbcUtils# extractDatabaseMetaData(DataSource dataSource, DatabaseMetaDataCallback action)` to be called with a valid `DataSource` and `DatabaseMetaDataCallback` (It's called via `JdbcUtils#extractDatabaseMetaData(DataSource dataSource, final String metaDataMethodName)`).  This in turn calls `DataSourceUtils.getConnection(dataSource);` to obtain the database connection.  In the previous version, if this call returned `null`, it was checked and a `MetaDataAccessException` was thrown.  In the new version, that check does not occur so an NPE is thrown when `con.getMetaData()` is called.  `DataSourceUtils#getConnection(DataSource)` is not marked with `@Nullable` so the caller shouldn't need to expect that `null` will be returned.  I'm thinking that the `@Nullable` should be added to `DataSourceUtils#getConnection(DataSource)` and the check for null should be re-instated.  Thoughts?   ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ee5fa2633a79025a1af56365abf9a36501aa6bbc","closed","type: bug,","spring-projects-issues","2017-06-07T20:26:53Z","2017-06-14T10:12:17Z"
"","20136","Orderly register WebMvcConfigurer into WebMvcConfigurerComposite [SPR-15577]","**[Mercy Ma](https://jira.spring.io/secure/ViewProfile.jspa?name=mercyblitz)** opened **[SPR-15577](https://jira.spring.io/browse/SPR-15577?redirect=false)** and commented  On spring-webmvc module code : org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration  !code-1.jpg|thumbnail!  For example,  WebMvcConfigurer bean was used to register some ""HandlerInterceptor""s , if there were only one WebMvcConfigurer bean in Spring Application Context, all ""HandlerInterceptor""s would be registered orderly . However , If these ""HandlerInterceptor""s were assigned from multiple  WebMvcConfigurer beans , it can't ensure ordered registration , because :  ```java @Autowired(required = false) 	public void setConfigurers(List configurers) { 		if (configurers == null || configurers.isEmpty()) { 			return; 		} 		this.configurers.addWebMvcConfigurers(configurers); 	} ```  Thus I suggest that WebMvcConfigurer beans could be sorted by via invocation AnnotationAwareOrderComparator#sort(List)  before added.    ---  **Attachments:** - [code-1](https://jira.spring.io/secure/attachment/24993/code-1) (_76.80 kB_)","closed","in: web,","spring-projects-issues","2017-05-23T12:41:34Z","2019-01-11T17:05:53Z"
"","20011","Make SessionLocaleResolver's attribute name configurable [SPR-15450]","**[Mercy Ma](https://jira.spring.io/secure/ViewProfile.jspa?name=mercyblitz)** opened **[SPR-15450](https://jira.spring.io/browse/SPR-15450?redirect=false)** and commented  I used org.springframework.web.servlet.i18n.SessionLocaleResolver to resolve LocaleContext , and found the attribute name of HttpSession is a constant value ( String LOCALE_SESSION_ATTRIBUTE_NAME = SessionLocaleResolver.class.getName() + "".LOCALE"";) , and it still can't be changed in latest version of Spring WebMVC, thus , Is possible to change the attribute name of HttpSession for SessionLocaleResolver ?  ---  **Affects:** 4.3.7  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/SessionLocaleResolver.java  **Issue Links:** - #19748 CookieLocaleResolver may disturb error rendering when locale cookie has a malformed value - #19987 Revise AcceptHeaderLocaleResolver default locale handling  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cec36fe784285b4ec27692f9e4f005c09893b7a6, https://github.com/spring-projects/spring-framework/commit/421fabb2c4b2d6bf7ad825ceb278e18c4c8349ab","closed","type: enhancement,","spring-projects-issues","2017-04-13T06:45:19Z","2019-01-11T16:40:26Z"
"","20292","Support fallback parsing patterns in @DateTimeFormat","**[member sound](https://jira.spring.io/secure/ViewProfile.jspa?name=membersound)** opened **[SPR-15736](https://jira.spring.io/browse/SPR-15736?redirect=false)** and commented  It would be nice if one could set multiple formats for:  ```java @DateTimeFormat(pattern = ""yyyy-MM-dd"") @DateTimeFormat(pattern = ""yyyyMMdd"") @DateTimeFormat(pattern = ""yyyy.MM.dd"") private LocalDate date; ```  https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html   --- No further details from [SPR-15736](https://jira.spring.io/browse/SPR-15736?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-07-05T16:21:02Z","2021-03-11T10:40:59Z"
"","19757","ResourceHttpMessageConverter should read the Content-Disposition header (if available) to get the file name [SPR-15191]","**[Mauro Molinari](https://jira.spring.io/secure/ViewProfile.jspa?name=mauromol)** opened **[SPR-15191](https://jira.spring.io/browse/SPR-15191?redirect=false)** and commented  When reading contents with RestTemplate:  ```java restTemplate.getForObject(url, Resource.class, parts); ```  the returned `Resource` does not specify any file name, even if the HTTP response received from the remote server has a proper `Content-Disposition` header with file name specified.  It would save some work if `ResourceHttpMessageConverter` read that header and properly enhanced the returned `Resource` object.  ---  **Affects:** 4.2.8, 4.3.1  **Issue Links:** - #18979 Introduce HttpHeaders getContentDisposition() and setContentDisposition() - #19448 Disable streaming when reading to Resources in RestTemplate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/768802fa96afc641ce69e2d72cf9a994b411fd2e","closed","in: web,","spring-projects-issues","2017-01-26T15:17:59Z","2019-01-11T14:25:30Z"
"","19722","XmlExpectationsHelper.assertXmlEqual missing ""regardless of order"" case [SPR-15156]","**[Matthew Depue](https://jira.spring.io/secure/ViewProfile.jspa?name=dolendupes)** opened **[SPR-15156](https://jira.spring.io/browse/SPR-15156?redirect=false)** and commented  `XmlExpectationsHelper.assertXmlEqual` does not work ""regardless of order"" as stated in the JavaDoc and as was supported in 4.x.  #18615 shows an example of using the XMLUnit `DiffBuilder` with a `NodeMatcher` that seems to have not made it into the current code.  However, my local fix uses `ElementSelectors.byNameAndText` instead of just `ElementSelectors.byName`.  ```java public void assertXmlEqual(String expected, String actual) throws Exception { 		Diff diffSimilar = DiffBuilder.compare(expected).withTest(actual) 				.withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byNameAndText)) 				.ignoreWhitespace().ignoreComments() 				.checkForSimilar() 				.build(); 		if (diffSimilar.hasDifferences()) { 			AssertionErrors.fail(""Body content "" + diffSimilar.toString()); 		} 	} ```  There is also a unit test missing, something along the lines of the attached file is needed.  ---  **Affects:** 5.0 M4  **Attachments:** - [XmlExpectationsHelperTests.java](https://jira.spring.io/secure/attachment/23685/XmlExpectationsHelperTests.java) (_3.19 kB_)  **Issue Links:** - #18615 XMLUnit 2.x support","closed","type: bug,","spring-projects-issues","2017-01-17T21:38:12Z","2019-01-11T15:30:33Z"
"","19736","Improve the logging documentation [SPR-15170]","**[Matt Sicker](https://jira.spring.io/secure/ViewProfile.jspa?name=jvz)** opened **[SPR-15170](https://jira.spring.io/browse/SPR-15170?redirect=false)** and commented  The current logging documentation references Log4j 1.x which is EOL. I'd like to add some updated docs for the logging section for Log4j 2.x and integration with SLF4J, a commonly used logging facade outside of this specific project.  I have a pull request here: https://github.com/spring-projects/spring-framework/pull/1279   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1279  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f9a4856c3b4a3a0a6d41d5d4e40e795bf3249c73, https://github.com/spring-projects/spring-framework/commit/3e155736287cc8fffaeb7590a2a0e9e484b5d10c","closed","in: core,","spring-projects-issues","2017-01-20T06:01:05Z","2017-01-25T14:18:14Z"
"","20116","o/s/mail/javamail mime.types has duplicate image/jpeg entries [SPR-15557]","**[Matt Magoffin](https://jira.spring.io/secure/ViewProfile.jspa?name=msqr)** opened **[SPR-15557](https://jira.spring.io/browse/SPR-15557?redirect=false)** and commented  While investigating #20105 I noticed the `org/springframework/mail/javamail/mime.types` resource has two entries for the `*image/jpeg*` type:  1. [Line 29](https://github.com/spring-projects/spring-framework/blob/babbf6e8710ab937cd05ece20270f51490299270/spring-context-support/src/main/resources/org/springframework/mail/javamail/mime.types#L29) 2. [Line 72](https://github.com/spring-projects/spring-framework/blob/babbf6e8710ab937cd05ece20270f51490299270/spring-context-support/src/main/resources/org/springframework/mail/javamail/mime.types#L72)  The second one has one less file extension mapping than the first; I notice the [o/s/http/mime.types](https://github.com/spring-projects/spring-framework/blob/f0a43e5d5c506a2ffec5654dac6886e23d940dda/spring-web/src/main/resources/org/springframework/http/mime.types#L1550) file's `image/jpeg` entry is comparable to the second mapping so perhaps the first mapping should be removed?  ---  **Affects:** 4.3.7  **Issue Links:** - #20105 o/s/mail/javamail mime.types PNG mapped to image/x-png  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e835f4d0258b8b3067cd5d121e5826247a69b88e, https://github.com/spring-projects/spring-framework/commit/f80b2d9a945fabb097aaea71b6cceecb4219d760","closed","in: core,","spring-projects-issues","2017-05-16T18:45:54Z","2019-01-11T17:07:29Z"
"","20105","o/s/mail/javamail mime.types PNG mapped to image/x-png [SPR-15546]","**[Matt Magoffin](https://jira.spring.io/secure/ViewProfile.jspa?name=msqr)** opened **[SPR-15546](https://jira.spring.io/browse/SPR-15546?redirect=false)** and commented  I have an app that ends up using Spring's `org.springframework.http.converter.ActivationMediaTypeFactory` which configured the `org/springframework/mail/javamail/mime.types` file with the Java Activation Framework. That file, however, resolves PNG images as the `*image/x-png*` image type, which I only noticed because my version of Safari (10.1; OS X) refuses to display images with that MIME type.  I believe the [official MIME type for PNG](https://www.w3.org/Graphics/PNG/) images is `*image/png*` and thus believe this file could be changed to reflect that, instead of `image/x-png`.  For what it's worth, I notice the `org/springframework/http/mime.types` file uses `image/png` already.  ---  **Affects:** 4.3.7  **Issue Links:** - #20116 o/s/mail/javamail mime.types has duplicate image/jpeg entries - #21219 Add cpp to mime.types as text/plain  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e835f4d0258b8b3067cd5d121e5826247a69b88e, https://github.com/spring-projects/spring-framework/commit/f80b2d9a945fabb097aaea71b6cceecb4219d760","closed","in: core,","spring-projects-issues","2017-05-15T04:38:00Z","2019-01-11T17:08:16Z"
"","20260","WebClient fails to transform empty json array to emtpy flux [SPR-15703]","**[Marvin Schramm](https://jira.spring.io/secure/ViewProfile.jspa?name=marvinschramm)** opened **[SPR-15703](https://jira.spring.io/browse/SPR-15703?redirect=false)** and commented  The WebClient to consume a json api, the client seem to fail on transforming empty json array response to an empty flux.  Error Case PR https://github.com/spring-projects/spring-framework-issues/pull/159 Simple code example for demonstration. I will create an issue repository entry for this.  ```java @RestController public class TestController {       @RequestMapping(""/fail"")     public Flux fail() {         return WebClient.builder().baseUrl(""http://localhost:8080"")                 .build().get().uri(""/empty"")                 .accept(MediaType.APPLICATION_JSON)                 .exchange()                 .flux()                 .flatMap(clientResponse -> clientResponse.bodyToFlux(TestDTO.class));     }      @RequestMapping(""/success"")     public Flux sucess() {         return WebClient.builder().baseUrl(""http://localhost:8080"")                 .build().get().uri(""/single"")                 .accept(MediaType.APPLICATION_JSON)                 .exchange()                 .flux()                 .flatMap(clientResponse -> clientResponse.bodyToFlux(TestDTO.class));     }      @RequestMapping(""/empty"")     public List emptyArray() {         return Collections.emptyList();     }      @RequestMapping(""/single"")     public List singleItem() {         return Collections.singletonList(new TestDTO(""1""));     }      public static class TestDTO {         private String id;          @JsonCreator         public TestDTO(@JsonProperty(""id"") String id) {             this.id = id;         }          @JsonProperty(""id"")         public String getId() {             return id;         }     } }  ```  ---  **Issue Links:** - #20238 WebClient's handling of empty bodies seems broken (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2017-06-26T08:54:45Z","2019-01-12T16:45:07Z"
"","19621","AutoProxyRegistrar throws NullPointer on @kotlin.Metadata Annotation [SPR-15055]","**[Marvin Schramm](https://jira.spring.io/secure/ViewProfile.jspa?name=marvinschramm)** opened **[SPR-15055](https://jira.spring.io/browse/SPR-15055?redirect=false)** and commented  When using a simple spring boot application with both mixed Java And Kotlin files The Kotlin Plugin seems to introduce a new Annotation for some classes. ""`@kotlin`.Metadata""  When starting the Spring Boot Project the AutoProxyRegistrar.java#L63 is not able to resolve the annotation metadata and will throw a NullPointerException. In my case, this only happens when i use the `@EnableCaching` Annotation (i think when not using it, the AutoProxyRegistrar class is not invoked)  1. Repository For This is here    https://github.com/spring-projects/spring-framework-issues/pull/145  Only those two classes and a single dependency is needed to reproduce this issue  ``` @EnableCaching @Configuration open class CacheConfiguration {     //this can be empty. when removing the @EnableCaching Annotation everything works } ```  ``` @SpringBootApplication public class Application {      public static void main(String[] args) {         SpringApplication.run(Application.class, args);     } } ```  ``` group = 'org.springframework.issues' version = '1.0.0.SNAPSHOT'  buildscript {     ext {         kotlin_version = '1.0.5-2'         springBootVersion = '1.4.3.RELEASE'     }     repositories {         jcenter()         mavenCentral()     }     dependencies {         classpath(""org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"")         classpath(""org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"")     } }  apply plugin: 'java' apply plugin: 'eclipse' apply plugin: 'kotlin' apply plugin: 'org.springframework.boot' apply plugin: 'idea'  repositories {     maven { url 'http://repo.spring.io/snapshot' }     mavenCentral() }  dependencies {     compile(group: 'org.springframework.boot', name: 'spring-boot-starter') }  [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all']  sourceCompatibility = 1.8 targetCompatibility = 1.8 ```  P.S. I am sorry if this is more are Spring-Boot and not Spring Framework issue. It was not clear for me where I should report this issue.   ---  **Affects:** 4.3.5, 5.0 M3  **Reference URL:** http://stackoverflow.com/questions/41334909/spring-boot-kotlin-autoproxyregistrar-causes-nullpointer-exception","closed","type: bug,","spring-projects-issues","2016-12-26T20:01:42Z","2016-12-30T13:33:15Z"
"","19651","Cannot configure Jackson used in ReactiveWeb [SPR-15085]","**[Marty Pitt](https://jira.spring.io/secure/ViewProfile.jspa?name=martypitt)** opened **[SPR-15085](https://jira.spring.io/browse/SPR-15085?redirect=false)** and commented  I can't seem to configure the ObjectMapper used by the Jackson2JsonEncoder in Spring 5 M4.  I'm using Spring boot, in case that's relevant.  The issue seems to be that `WebReactiveConfigurationSupport` instantiates a new `Jackson2JsonEncoder`, (Line 485 - addDefaultHttpMessageWriters) which - in turn - instantiates it's own `Jackson2ObjectMapperBuilder`, rather than using the one made availabe on the spring context.  This means that any configuration that was defined on the `Jackson2ObjectMapperBuilder` is lost.   ---  **Affects:** 5.0 M4","closed","in: web,","spring-projects-issues","2017-01-03T13:45:18Z","2019-01-12T16:45:17Z"
"","19649","Improve WebFlux exception logging [SPR-15083]","**[Marty Pitt](https://jira.spring.io/secure/ViewProfile.jspa?name=martypitt)** opened **[SPR-15083](https://jira.spring.io/browse/SPR-15083?redirect=false)** and commented  When a Rest controller's `@RequestBody` params can't be deserialized because of incorrect JSON, the error is lost through the reactive chain.  Specifically, when Jackson throws an exception during deserialization, the exception is lost.   In my specific example, this was a Kotlin class, and I didn't pass a value for a required param. However, I suspect the same issue would occur with a malformed date, data type mismatch, etc.  A meaningful exception is thrown from Jackson (I see it caught in Jackson2JsonDecoder, line 121:  ```java catch (IOException ex) {     return Flux.error(new CodecException(""Error while reading the data"", ex)); } ```  However, when this makes it's way back up to FluxMapFuseable, and into the Reactive land, this somehow gets lost, and the below exception is what we end up with.  It'd be great to see the original exception from Jackson be made available somehow, and - ideally - this result in a 4xx error.  Stack trace below:  ```java java.lang.IllegalStateException: Failed to invoke controller with resolved arguments: [0][type=reactor.core.publisher.FluxOnAssembly][value={ operator : ""OnAssembly"" }] on method [public reactor.core.publisher.Mono io.fullyloaded.conductor.plans.PlanController.addThing(io.fullyloaded.conductor.plans.Thing2)] 	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:112) ~[spring-web-reactive-5.0.0.BUILD-20170101.132107-475.jar:5.0.0.BUILD-SNAPSHOT] 	at reactor.core.publisher.MonoThenMap$MonoThenApplyMain.onNext(MonoThenMap.java:98) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:316) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:990) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.MonoWhen$MonoWhenCoordinator.signal(MonoWhen.java:231) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.MonoWhen$MonoWhenSubscriber.onNext(MonoWhen.java:275) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:316) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:173) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:316) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:86) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:316) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:68) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:316) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxResume$ResumeSubscriber.onNext(FluxResume.java:71) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:316) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:990) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:161) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:327) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:150) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:327) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:798) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:558) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:538) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:531) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:327) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher$State.onAllDataRead(AbstractListenerReadPublisher.java:331) ~[spring-web-5.0.0.BUILD-20170101.132107-532.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher.onAllDataRead(AbstractListenerReadPublisher.java:86) ~[spring-web-5.0.0.BUILD-20170101.132107-532.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.http.server.reactive.ServletServerHttpRequest$RequestBodyPublisher$RequestBodyPublisherReadListener.onAllDataRead(ServletServerHttpRequest.java:250) ~[spring-web-5.0.0.BUILD-20170101.132107-532.jar:5.0.0.BUILD-SNAPSHOT] 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:361) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:784) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1410) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_65] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_65] 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_65] 	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException:  Assembly trace from producer [reactor.core.publisher.MonoError] : 	reactor.core.publisher.Mono.error(Mono.java:274) 	org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:112) 	reactor.core.publisher.MonoThenMap$MonoThenApplyMain.onNext(MonoThenMap.java:98) 	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:990) 	reactor.core.publisher.MonoWhen$MonoWhenCoordinator.signal(MonoWhen.java:231) 	reactor.core.publisher.MonoWhen$MonoWhenSubscriber.onNext(MonoWhen.java:275) 	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:173) 	reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:86) 	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:68) 	reactor.core.publisher.FluxResume$ResumeSubscriber.onNext(FluxResume.java:71) 	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:990) 	reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:161) 	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:150) 	reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:798) 	reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:558) 	reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:538) 	reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:531) 	org.springframework.http.server.reactive.AbstractListenerReadPublisher$State.onAllDataRead(AbstractListenerReadPublisher.java:331) 	org.springframework.http.server.reactive.AbstractListenerReadPublisher.onAllDataRead(AbstractListenerReadPublisher.java:86) 	org.springframework.http.server.reactive.ServletServerHttpRequest$RequestBodyPublisher$RequestBodyPublisherReadListener.onAllDataRead(ServletServerHttpRequest.java:250) 	org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:784) 	org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) 	org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802) Composition chain until failing Operator : 	|_	Mono.error(InvocableHandlerMethod.java:112)  ```    ---  **Affects:** 5.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-boot/commit/e399cf691888f311bbe886ff61703ca54004e0ca","closed","type: enhancement,","spring-projects-issues","2017-01-02T14:11:08Z","2020-06-18T00:34:38Z"
"","20064","AbstractFlashMapManager.isFlashMapForRequest does not inspect forwarded request coherently [SPR-15505]","**[Martin Svorc](https://jira.spring.io/secure/ViewProfile.jspa?name=svorcmar)** opened **[SPR-15505](https://jira.spring.io/browse/SPR-15505?redirect=false)** and commented  `org.springframework.web.servlet.support.AbstractFlashMapManager` never matches a FlashMap if the request is forwarded after redirect.  The original URI is obtained using `String requestUri = getUrlPathHelper().getOriginatingRequestUri(request);`, which seems to be used to handle forwarded request.  The actual request params are on the other hand obtained using `ServletUriComponentsBuilder.fromRequest(request).build().getQueryParams()`, which returns the query parameters of the **forwarded** request (which differ from the originating request parameters) unlike in case of the URI.  The result is that the subsequent code never matches the FlashMap for the given forwarded request even though it should.   ---  **Affects:** 4.3.1  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1422, and commits https://github.com/spring-projects/spring-framework/commit/34f1712d59047fa322551d1453994d2044b68a75, https://github.com/spring-projects/spring-framework/commit/bf83e4e8612512ef51272d8a7dd8533686e8a4e4, https://github.com/spring-projects/spring-framework/commit/e0a7b074ed95f278b782e159436f053d659e28ab","closed","type: bug,","spring-projects-issues","2017-05-02T10:21:08Z","2017-06-07T20:04:28Z"
"","20278","Memory Leak due to not pruning factoryBeanObjectCache when closing the ApplicationContext [SPR-15722]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-15722](https://jira.spring.io/browse/SPR-15722?redirect=false)** and commented  For our, on Spring Boot based, project we have quite some integration tests. Some of these integration tests create a new application context due to custom configuration or the use of `@MockBean`.  To limit the number of cached contexts (as they are fairly large) we decided to reduce the number of cached context by setting the `spring.test.context.cache.maxSize` property to something less then 32.  However we noticed that after running some tests we were leaking memory. After fixing some issues with our own code (static references to the app context). We still noticed a leak.  After some digging we noticed that, amongst others, the `JobRepositoryFactoryBean` from Spring Batch kept hanging around. Which in turn had a reference to our `JpaTransactionManager`, which held on to the `EntityManagerFactory` all in all leaking around 50MB. Multiple this by a factor 30 and it starts to add up.  Some further digging lead to the discovery that a `FactoryBean` that doesn't implement `DisposableBean` or doesn't create instances which themselves are a `DisposableBean` they never get cleaned.  Our workaround is now to call `getObject` on the `FactoryBean` ourself. Which disables the registration of the `FactoryBean` and thus doesn't need to be cleaned up anymore. However would be nice if such a work-around wouldn't be needed.   ---  **Affects:** 4.3.9","closed","in: core,","spring-projects-issues","2017-06-30T18:17:38Z","2017-07-20T12:33:00Z"
"","20259","AsyncHandlerInterceptor doesn't have a default method [SPR-15702]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-15702](https://jira.spring.io/browse/SPR-15702?redirect=false)** and commented  Looking at the `HandlerInterceptor` that has all methods implemented as `default` methods. However the `AsyncHandlerInterceptor` method isn't defined as a `default` method. Would be nice if this could be done as well.  Shouldn't this also deprecate the `HandlerInterceptorAdapter` as was done with the `WebMvcConfigurerAdapter`?   ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/155a1c6c71c9ea06b58c2be49d6e3ed4db51c700","closed","type: enhancement,","spring-projects-issues","2017-06-25T12:05:45Z","2017-07-24T07:51:14Z"
"","20285","use own classloader to load spring ioc container [SPR-15729]","**[MarkGuan](https://jira.spring.io/secure/ViewProfile.jspa?name=markguan)** opened **[SPR-15729](https://jira.spring.io/browse/SPR-15729?redirect=false)** and commented  I want to load spring container using my own classloader like that, !屏幕快照 2017-07-03 上午11.01.13.png|thumbnail!  It does not work if this spring container also has a inner spring container(dependent on a jar which use spring to load beans) : !屏幕快照 2017-07-03 上午11.07.06.png|thumbnail!  Ifound inner spring container use Thread.currentThread.getContextClassLoader() to get its classloader. So inner spring container can not find spring bean xml file using ClassPathXmlApplicationContext: !屏幕快照 2017-07-02 下午8.03.40.png|thumbnail!  Then I use setContextClassLoader method to solve this problem like that, !屏幕快照 2017-07-03 上午11.09.03.png|thumbnail! This loader is my own classloader which is created like a fatjar classloader from spring boot.  But this solution may have some side effect because it changes the context classloader of main thread. Will spring ioc provide function to let us set our own classloader in multilayered spring container?   ---  **Affects:** 4.3.6  **Attachments:** - [屏幕快照 2017-07-02 下午8.03.40.png](https://jira.spring.io/secure/attachment/25024/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2017-07-02+%E4%B8%8B%E5%8D%888.03.40.png) (_68.04 kB_) - [屏幕快照 2017-07-03 上午11.01.13.png](https://jira.spring.io/secure/attachment/25026/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2017-07-03+%E4%B8%8A%E5%8D%8811.01.13.png) (_55.88 kB_) - [屏幕快照 2017-07-03 上午11.07.06.png](https://jira.spring.io/secure/attachment/25025/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2017-07-03+%E4%B8%8A%E5%8D%8811.07.06.png) (_18.29 kB_) - [屏幕快照 2017-07-03 上午11.09.03.png](https://jira.spring.io/secure/attachment/25023/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2017-07-03+%E4%B8%8A%E5%8D%8811.09.03.png) (_29.04 kB_)","closed","type: enhancement,","spring-projects-issues","2017-07-03T03:14:28Z","2017-07-07T18:42:59Z"
"","20396","BeanDefinitionBuilder method arguments not annotated with @Nullable [SPR-15841]","**[Mark Paluch](https://jira.spring.io/secure/ViewProfile.jspa?name=mp911de)** opened **[SPR-15841](https://jira.spring.io/browse/SPR-15841?redirect=false)** and commented  `BeanDefinitionBuilder` declares `setInitMethodName`, `setDestroyMethodName` and `setScope` methods that do not accept `@Nullable` arguments.  Forwarding values from a given `BeanDefinition` requires warning suppression or additional code to satisfy null checks:  ```java class CassandraCqlClusterParser extends AbstractBeanDefinitionParser {  	@Override 	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {  		BeanDefinitionBuilder builder = …;  		if (parserContext.isNested()) {  			// warning is raised in the next line 			builder.setScope(parserContext.getContainingBeanDefinition().getScope()); 		}  		return …; 	} } ```  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20099 Introduce null-safety of Spring Framework API - #20347 Make getters and setters null-safety consistent  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/09f5c71374a45c2e8d2f72c0503c72161eccdf98","closed","type: enhancement,","spring-projects-issues","2017-08-01T11:43:18Z","2019-01-11T17:40:41Z"
"","20255","Allow CompletableFuture creation via ListenableFuture [SPR-15696]","**[Mark Paluch](https://jira.spring.io/secure/ViewProfile.jspa?name=mp911de)** opened **[SPR-15696](https://jira.spring.io/browse/SPR-15696?redirect=false)** and commented  ### Overview  Right now, adoption from `ListenableFuture` to `CompletableFuture` is quite cumbersome as it requires callback registrations for success and failure results. To ease adoption it would be great if `ListenableFuture` could provide a `default` `toCompletableFuture` method.  ### Motivation  Spring Data for Apache Cassandra and Spring Kafka statically declare `ListenableFuture` on their user-facing APIs. Spring Framework 5 and Spring Data for Apache Cassandra 2 are both based on Java 8 so adding a convenience method improves dev experience and require less boilerplate code within user code.   ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/87430f3cd30b401fbb10cf212cb437ff41b058f6","closed","type: enhancement,","spring-projects-issues","2017-06-23T17:50:37Z","2017-07-24T07:51:15Z"
"","19862","Improve error reporting on method arguments that don't support reactive types [SPR-15297]","**[Mark Paluch](https://jira.spring.io/secure/ViewProfile.jspa?name=mp911de)** opened **[SPR-15297](https://jira.spring.io/browse/SPR-15297?redirect=false)** and commented  Add support for `@RequestParam` to be wrapped in `Mono`. Request parameters can be obtained from the request URI (query parameter) or from the body (form parameter).  Currently, declaring a method accepting a `@RequestParam Mono` fails with Status 500 and no exception in the log.  Handler method declaration:  ``` @GetMapping(""/people"") Flux namesByLastname(@RequestParam Mono lastname) {  	Flux result = people.findByLastname(lastname); 	return result.map(it -> it.getFullName()); } ```  HTTP output:  ``` curl -i ""http://localhost:8080/people?lastname=White"" HTTP/1.1 500 Internal Server Error content-length: 0 ```  Exception (on `DEBUG` level):  ``` 2017-02-28 11:38:29.511 DEBUG 56809 --- [ctor-http-nio-2] o.s.w.r.r.method.InvocableHandlerMethod  : Failed to resolve argument 0 of type 'reactor.core.publisher.Mono' on reactor.core.publisher.Flux com.example.PersonController.namesByLastname(reactor.core.publisher.Mono)  org.springframework.web.server.ServerErrorException: Request failure [status: 500, reason: ""Conversion not supported.""]; nested exception is org.springframework.beans.ConversionNotSupportedException: Failed to convert value of type 'java.lang.String' to required type 'reactor.core.publisher.Mono'; nested exception is java.lang.IllegalStateException: Cannot convert value of type 'java.lang.String' to required type 'reactor.core.publisher.Mono': no matching editors or conversion strategy found 	at org.springframework.web.reactive.result.method.annotation.AbstractNamedValueArgumentResolver.applyConversion(AbstractNamedValueArgumentResolver.java:182) ~[spring-webflux-5.0.0.BUILD-20170227.222811-101.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.method.annotation.AbstractNamedValueArgumentResolver.lambda$resolveArgument$0(AbstractNamedValueArgumentResolver.java:99) ~[spring-webflux-5.0.0.BUILD-20170227.222811-101.jar:5.0.0.BUILD-SNAPSHOT] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:111) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1657) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:172) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1476) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1345) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:94) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:60) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoOtherwiseIfEmpty.subscribe(MonoOtherwiseIfEmpty.java:44) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoPeek.subscribe(MonoPeek.java:76) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoWhen$MonoWhenCoordinator.subscribe(MonoWhen.java:155) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoWhen.subscribe(MonoWhen.java:121) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenMap.subscribe(MonoThenMap.java:57) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:78) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:44) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenMap$MonoThenApplyMain.onNext(MonoThenMap.java:130) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:928) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenIgnore$MonoThenIgnoreMain.drain(MonoThenIgnore.java:145) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenIgnore.subscribe(MonoThenIgnore.java:54) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenMap.subscribe(MonoThenMap.java:57) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenMap$MonoThenApplyMain.onNext(MonoThenMap.java:130) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:68) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:78) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:263) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:743) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:119) [reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:928) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenIgnore$MonoThenAcceptSubscriber.onNext(MonoThenIgnore.java:261) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1657) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenIgnore$MonoThenAcceptSubscriber.onSubscribe(MonoThenIgnore.java:250) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:59) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenIgnore$MonoThenIgnoreMain.drain(MonoThenIgnore.java:151) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenIgnore.subscribe(MonoThenIgnore.java:54) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:60) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:402) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:203) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:97) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:57) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:126) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:41) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoOtherwiseIfEmpty.subscribe(MonoOtherwiseIfEmpty.java:44) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenMap.subscribe(MonoThenMap.java:57) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenMap.subscribe(MonoThenMap.java:57) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:44) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:44) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:44) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenIgnore$MonoThenIgnoreMain.drain(MonoThenIgnore.java:169) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoThenIgnore.subscribe(MonoThenIgnore.java:54) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoOtherwise.subscribe(MonoOtherwise.java:44) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:62) ~[reactor-core-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:405) ~[reactor-netty-0.6.1.RELEASE.jar:0.6.1.RELEASE] 	at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:353) ~[reactor-netty-0.6.1.RELEASE.jar:0.6.1.RELEASE] 	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) ~[netty-all-4.1.8.Final.jar:4.1.8.Final] 	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:403) ~[netty-all-4.1.8.Final.jar:4.1.8.Final] 	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:445) ~[netty-all-4.1.8.Final.jar:4.1.8.Final] 	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858) ~[netty-all-4.1.8.Final.jar:4.1.8.Final] 	at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_112] Caused by: org.springframework.beans.ConversionNotSupportedException: Failed to convert value of type 'java.lang.String' to required type 'reactor.core.publisher.Mono'; nested exception is java.lang.IllegalStateException: Cannot convert value of type 'java.lang.String' to required type 'reactor.core.publisher.Mono': no matching editors or conversion strategy found 	at org.springframework.beans.TypeConverterSupport.doConvert(TypeConverterSupport.java:74) ~[spring-beans-5.0.0.BUILD-20170227.222811-743.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:47) ~[spring-beans-5.0.0.BUILD-20170227.222811-743.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:677) ~[spring-context-5.0.0.BUILD-20170227.222811-743.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.reactive.result.method.annotation.AbstractNamedValueArgumentResolver.applyConversion(AbstractNamedValueArgumentResolver.java:179) ~[spring-webflux-5.0.0.BUILD-20170227.222811-101.jar:5.0.0.BUILD-SNAPSHOT] 	... 60 common frames omitted Caused by: java.lang.IllegalStateException: Cannot convert value of type 'java.lang.String' to required type 'reactor.core.publisher.Mono': no matching editors or conversion strategy found 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:294) ~[spring-beans-5.0.0.BUILD-20170227.222811-743.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:96) ~[spring-beans-5.0.0.BUILD-20170227.222811-743.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.beans.TypeConverterSupport.doConvert(TypeConverterSupport.java:64) ~[spring-beans-5.0.0.BUILD-20170227.222811-743.jar:5.0.0.BUILD-SNAPSHOT] 	... 63 common frames omitted ```    ---  **Affects:** 5.0 M5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/164204ca04b9b369267ef5e36c2f243b3898bae1","closed","type: enhancement,","spring-projects-issues","2017-02-28T10:41:08Z","2017-05-08T08:41:44Z"
"","19714","Support DataBuffer as reactive handler method results [SPR-15148]","**[Mark Paluch](https://jira.spring.io/secure/ViewProfile.jspa?name=mp911de)** opened **[SPR-15148](https://jira.spring.io/browse/SPR-15148?redirect=false)** and commented  Reactive handler methods should be able to produce `DataBuffer` directly so the buffer is passed through as body (or chunk if a handler method produces multiple `DataBuffer`'s).  Sample code:  ```java   @RestController public class AvatarController {    HttpClient httpClient = HttpClient.create();    @GetMapping(""user/avatar"")   Mono getAvatar() {      NettyDataBufferFactory factory = new NettyDataBufferFactory(         ByteBufAllocator.DEFAULT);      return Mono         .just(""http://www.gravatar.com/avatar/c5f6e8dffbb19acf405198c8fb917337?s=48"")         .flatMap(httpClient::get)         .map(resp -> {            HttpHeaders headers = new HttpHeaders();            Optional optionalContentType = Optional.ofNullable(resp               .responseHeaders().getAsString(HttpHeaders.CONTENT_TYPE));           headers.add(HttpHeaders.CONTENT_TYPE,               optionalContentType.orElse(MediaType.IMAGE_JPEG_VALUE));            return new ResponseEntity(resp.receive().map(factory::wrap)               .cast(DataBuffer.class), headers, HttpStatus.valueOf(resp               .status().code()));          }).next();   } } ```  Expected result:  ``` HTTP/1.1 200 OK Content-Type: …  (binary data goes here) ```  Current result:  ``` HTTP/1.1 200  Content-Type: text/event-stream  data:{""nativeBuffer"":{""direct"":true,""readOnly"":false,""writable"":false,""readable"":true}}  data:{""nativeBuffer"":{""direct"":true,""readOnly"":false,""writable"":false,""readable"":true}} ```    ---  **Affects:** 5.0 M4","closed","type: enhancement,","spring-projects-issues","2017-01-16T15:13:23Z","2017-02-23T09:29:10Z"
"","19668","Netty4ClientHttpRequestFactory should use SNI for TLS connections [SPR-15101]","**[Mark Paluch](https://jira.spring.io/secure/ViewProfile.jspa?name=mp911de)** opened **[SPR-15101](https://jira.spring.io/browse/SPR-15101?redirect=false)** and commented  `Netty4ClientHttpRequestFactory` should use SNI for TLS connections. Currently, `SslHandler` is created with just a `ByteBufAllocator`. By using the overload accepting hostname and port, `SslHandler` can indicate the requested hostname and interoperate with virtual hosts using SSL.  ---  **Affects:** 4.3.5  **Issue Links:** - #19455 Netty4ClientHttpRequestFactory should use SSL if port is 443 or scheme is https - #19310 Netty4ClientHttpRequestFactory should configure a default SslContext  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0c99346829b19a65fb435fb2557db3b2427de54b, https://github.com/spring-projects/spring-framework/commit/28c7f65a25e115104a41042f8ab8c9f8544bba87","closed","type: enhancement,","spring-projects-issues","2017-01-06T09:48:55Z","2019-01-11T15:35:53Z"
"","19676","Add MimeType and MediaType constants for RSS [SPR-15109]","**[Mark Hobson](https://jira.spring.io/secure/ViewProfile.jspa?name=markhobson)** opened **[SPR-15109](https://jira.spring.io/browse/SPR-15109?redirect=false)** and commented  `MimeTypeUtils` and `MediaType` have constants for Atom but not for RSS. It'd be useful to have constants for both.  ---  **Issue Links:** - #19703 Deprecate unused web-specific MimeTypeUtils constants  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1287, and commits https://github.com/spring-projects/spring-framework/commit/8b960099f1b9a9852f8c8d90c8129862b262f031, https://github.com/spring-projects/spring-framework/commit/0403fe340d2ec64474cf4cc0527bf33c2e476c62, https://github.com/spring-projects/spring-framework/commit/2ce2f7d9a5dea5a81d17e2ee64885ac3bf1ac807","closed","type: enhancement,","spring-projects-issues","2017-01-07T17:09:07Z","2019-01-11T15:36:23Z"
"","19886","TransactionalEventListener seperate phase AFTER_COMPLETION and AFTER_COMMIT for a group of events [SPR-15323]","**[Mark Czubin](https://jira.spring.io/secure/ViewProfile.jspa?name=czubin@gmail.com)** opened **[SPR-15323](https://jira.spring.io/browse/SPR-15323?redirect=false)** and commented  Currently the TransactionSynchronizationEventAdapter will handle both `TransactionPhase.AFTER_COMPLETION` and `TransactionPhase.AFTER_COMMIT` in the same callback function:`TransactionSynchronization::afterCompletion`.  I would expect  `TransactionPhase.AFTER_COMMIT` to be handled inside `TransactionSynchronization::afterCommit`.  So all events will first be handled in  `TransactionPhase.AFTER_COMMIT` and afterwards all events will be handled in `TransactionPhase.AFTER_COMPLETION`.  Now they are handled at the same time.   ---  **Affects:** 4.3.7","closed","type: enhancement,","spring-projects-issues","2017-03-07T10:41:04Z","2017-03-07T12:16:53Z"
"","19869","Unable to resolve persistence unit root URL with LocalContainerEntityManagerFactoryBean [SPR-15304]","**[Mark Anderson](https://jira.spring.io/secure/ViewProfile.jspa?name=markanderson)** opened **[SPR-15304](https://jira.spring.io/browse/SPR-15304?redirect=false)** and commented  When using LocalContainerEntityManagerFactoryBean without any JPA xml configurations the following error is seen `Invocation of init method failed; nested exception is javax.persistence.PersistenceException: Unable to resolve persistence unit root URL` My bean is defined as follows  ```xml                                                 mappings/mapping1.hbm.xml         mappings/mapping2.hbm.xml                                 hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect         hibernate.show_sql=false         hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory         hibernate.cache.use_second_level_cache=true         net.sf.ehcache.configurationResourceName=file:${conf.dir}/ehcache.xml                ```  This issue seems to be a further variant of #13474, #15859 and #18819.  The error only occurs when my application is deployed with all code and resources in jar files. I can run without error when the classes and resources are within directories on the classpath.  As a workaround I can add the following and my application will start.  ```xml  ```  ---  **Affects:** 4.3.6  **Issue Links:** - #13474 JPA without persistence.xml fails when all classpath items are jars - #18819 DefaultPersistenceUnitManager.determineDefaultPersistenceUnitRootUrl fails when run from a shaded jar - #15859 orm.xml should be recognized by default if using JPA","open","in: data,","spring-projects-issues","2017-03-02T10:44:53Z","2019-09-03T13:52:08Z"
"","19711","SimpleApplicationEventMulticaster should not rely on ClassCastException having a message [SPR-15145]","**[Mariusz Luciow](https://jira.spring.io/secure/ViewProfile.jspa?name=mariusz.luciow)** opened **[SPR-15145](https://jira.spring.io/browse/SPR-15145?redirect=false)** and commented  SimpleApplicationEventMulticaster in [this commit](https://github.com/spring-projects/spring-framework/commit/13001b9affad668479ebdb924f2bd491745232a8#diff-2434dcbaad29ced6a104bb6523c4f67e) driven by #19412 changed the **ClassCastException** catch logic to:  ```java catch (ClassCastException ex) {   if (ex.getMessage().startsWith(event.getClass().getName())) {     // Possibly a lambda-defined listener which we could not resolve the generic event type for     LogFactory.getLog(getClass()).debug(""Non-matching event type for listener: "" + listener, ex);   } else {     throw ex;   } } ```  Note that if **ex.getMessage()** returns NULL whole method will throw NPE.  To speed up execution of methods that frequently throw exceptions, the C2 compiler generates code that uses a pre-built exception (pre-built at compile time). The pre-built exception does not contain neither a stack trace nor a message detailing the exception.  This means that after some time the compiler can replace normal ClassCastException with empty one, without message nor stack trace.  More detailed explanation of this behaviour can be found here: * [openjdk jira](https://bugs.openjdk.java.net/browse/JDK-8169685?focusedCommentId=14024750&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14024750) * [oracle release notes](http://www.oracle.com/technetwork/java/javase/relnotes-139183.html)  There should be a check in place to ensure that message is not null.  ---  **Affects:** 4.3.5  **Reference URL:** https://github.com/spring-projects/spring-framework/commit/13001b9affad668479ebdb924f2bd491745232a8#diff-2434dcbaad29ced6a104bb6523c4f67e  **Issue Links:** - #19412 SimpleApplicationEventMulticaster should not generally suppress ClassCastException - #20393 SimpleApplicationEventMulticaster does not deal with lambda-defined listeners when ErrorHandler is set - #20981 Lambda error detection might not work on JDK 9 - #21630 Classification of ClassCastExceptions doesn't work in JDK 11 (OpenJDK)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/976d32fc5943a11668b12e83621feaa197677ec4, https://github.com/spring-projects/spring-framework/commit/153fd82946c350a0c42be2dbd13774d5ee9ffc0c, https://github.com/spring-projects/spring-framework/commit/64d4afad9f3cd06d5b911aab9d0656974310a79c, https://github.com/spring-projects/spring-framework/commit/0655d73f8e249b5f053cc10fe36f2d258acad104","closed","in: core,","spring-projects-issues","2017-01-16T13:28:02Z","2019-01-11T15:31:28Z"
"","19724","Add Kotlin idiomatic extensions for JDBC API [SPR-15158]","**[Mario Arias](https://jira.spring.io/secure/ViewProfile.jspa?name=mario.arias)** opened **[SPR-15158](https://jira.spring.io/browse/SPR-15158?redirect=false)** and commented  Add Kotlin idiomatic Extensions for JDBC API such as `JdbcOperations` interface   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c33ad15b281530f204fef4add2a66b70566d1565","closed","type: enhancement,","spring-projects-issues","2017-01-18T01:14:53Z","2017-02-23T09:29:11Z"
"","19686","Add Kotlin array-like addAttribute to Model and ModelMap  [SPR-15119]","**[Mario Arias](https://jira.spring.io/secure/ViewProfile.jspa?name=mario.arias)** opened **[SPR-15119](https://jira.spring.io/browse/SPR-15119?redirect=false)** and commented  Add Kotlin idiomatic array-like addAttribute to Model and ModelMap  ```java // orginal code model.addAttribute(""firstName"", firstName) //kotlin idiomatic code model[""firstName""] = firstName ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1af905ca0a97c1e19a60e63a1d62469888fbb12a","closed","type: enhancement,","spring-projects-issues","2017-01-10T00:24:34Z","2017-02-23T09:29:11Z"
"","20323","RouterFunction Interceptor [SPR-15768]","**[Marianne Abdelmalek](https://jira.spring.io/secure/ViewProfile.jspa?name=marianne.abdelmalek)** opened **[SPR-15768](https://jira.spring.io/browse/SPR-15768?redirect=false)** and commented  How can I add an interceptor to RouterFunction?  P.S: I am using spring-webflux-5.0.0.BUILD-SNAPSHOT   --- No further details from [SPR-15768](https://jira.spring.io/browse/SPR-15768?redirect=false)","closed","","spring-projects-issues","2017-07-13T13:26:45Z","2019-01-11T16:26:57Z"
"","20296","Issue with ServerRequest's queryParams  [SPR-15740]","**[Marianne Abdelmalek](https://jira.spring.io/secure/ViewProfile.jspa?name=marianne.abdelmalek)** opened **[SPR-15740](https://jira.spring.io/browse/SPR-15740?redirect=false)** and commented  Although the documentation states that:  ```java /** 	 * Return the first query parameter with the given name, if present. 	 * @param name the parameter name 	 * @return the parameter value 	 */ 	default Optional queryParam(String name) { 		List queryParams = this.queryParams(name); 		return (!queryParams.isEmpty() ? Optional.of(queryParams.get(0)) : Optional.empty()); 	} ```  which returns Optional, it throws null pointer exception when the query param is not present. The line that throws the null pointer exception is:  ```java //req is of type ServerRequest req.queryParam(""page"") ```  It used to work properly days ago, I guess you guys changed something. Please check.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0065bc5ee55d347de8632f1b3d79e18d6ad4db4e","closed","type: bug,","spring-projects-issues","2017-07-06T08:49:39Z","2017-07-24T07:51:16Z"
"","20246","Compilation fails in Testing Router Functions [SPR-15687]","**[Marianne Abdelmalek](https://jira.spring.io/secure/ViewProfile.jspa?name=marianne.abdelmalek)** opened **[SPR-15687](https://jira.spring.io/browse/SPR-15687?redirect=false)** and commented  I have a test method that used to work till yesterday, today it fails to compile. it is supposed to test a router function. The code snippet from the test class:  ---  HttpHeaders httpHeaders = new HttpHeaders(); httpHeaders.add(""Content-type"", MediaType.APPLICATION_JSON.toString());  WebTestClient client = WebTestClient.bindToRouterFunction(tripRest.route()).build(); client.put().uri(""/trips/timeout""). syncBody(tripRequest).accept(MediaType.APPLICATION_JSON) .headers(httpHeaders).exchange().expectStatus().isAccepted();  ---  Today when I tried to install with tests it gave me compilation error in line headers(httpHeaders), saying:  incompatible types: org.springframework.http.HttpHeaders cannot be converted to java.util.function.Consumer  How come it fails to compile even without me upgrading versions??  ---  No further details from [SPR-15687](https://jira.spring.io/browse/SPR-15687?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-06-21T07:52:21Z","2019-01-13T15:40:42Z"
"","20225","Issue with Router Functions [SPR-15666]","**[Marianne Abdelmalek](https://jira.spring.io/secure/ViewProfile.jspa?name=marianne.abdelmalek)** opened **[SPR-15666](https://jira.spring.io/browse/SPR-15666?redirect=false)** and commented  I use router functions for a while now and it was working with me, and today without touching code the following lines are not working:  > RouterFunctions.route(GET(""/trips/{id}""), this::tripById) > .and(route(GET(""/trips/history/""), this::history)) > .and(route(GET(""/trips/currentDriverTrip/{driverUserId}""), this::driverCurrentTrip)) > .and(route(GET(""/trips/currentPassengerTrip/{passengerUserId}""), ... etc  One of the getters work and the rest doesn't... If I remove all getters and leave only one, it works though.  I am using the following dependencies:  > \ >      >> \org.springframework.boot\ >> \spring-boot-starter-parent\ >> \2.0.0.BUILD-SNAPSHOT\ >  > \ >  > \ >      >> \ >>      \org.springframework.boot\ >>      \spring-boot-starter-test\ >> \ >  > \ >  > \ >      >> \1.8\ >> \UTF-8\ >> \UTF-8\ >  > \ > \ > \ > \spring-snapshots\ > \Spring Snapshots\ > \https://repo.spring.io/snapshot\ > \ > \true\ > \ > \ > \ > \spring-milestones\ > \Spring Milestones\ > \https://repo.spring.io/milestone\ > \ > \false\ > \ > \ > \ > \ > \ > \spring-snapshots\ > \Spring Snapshots\ > \https://repo.spring.io/snapshot\ > \ > \true\ > \ > \ > \ > \spring-milestones\ > \Spring Milestones\ > \https://repo.spring.io/milestone\ > \ > \false\ > \ > \ > \  NOTE: I created the issue here, I couldn't find the spring-reactor-web project on Jira. Thanks in advance.  ---  No further details from [SPR-15666](https://jira.spring.io/browse/SPR-15666?redirect=false)","closed","status: declined,","spring-projects-issues","2017-06-14T13:15:49Z","2019-01-13T20:29:29Z"
"","20113","@DirtiesContext doesn't refresh the ApplicationContext after each test method [SPR-15554]","**[Marcel Thannhäuser](https://jira.spring.io/secure/ViewProfile.jspa?name=der%20thanne)** opened **[SPR-15554](https://jira.spring.io/browse/SPR-15554?redirect=false)** and commented  When setting the `@DirtiesContext` with `classMode=AFTER_EACH_TEST_METHOD` or `classMode=BEFORE_EACH_TEST_METHOD` on the class level does not refresh the `ApplicationContext` properly.  When setting `@DirtiesContext` with `methodMode=BEFORE_METHOD` or `methodMode=AFTER_METHOD` on the method level works as expected.  So the workaround is already found and fixed my problem, but I want to know if I am doing something wrong.  I am running Spring 4.3.8 with Spring Boot 1.5.3   ---  **Affects:** 4.3.8","closed","in: test,","spring-projects-issues","2017-05-16T12:04:36Z","2019-01-11T17:07:36Z"
"","20315","AbstractJackson2HttpMessageConverter throws exception if log level is ERROR  [SPR-15760]","**[Marc Brünisholz](https://jira.spring.io/secure/ViewProfile.jspa?name=marcbrueni)** opened **[SPR-15760](https://jira.spring.io/browse/SPR-15760?redirect=false)** and commented  If the log level is set to ERROR, the expression on line 161 in AbstractJackson2HttpMessageConverter evaluates to true.  Code of interest:  ```java if (!logger.isWarnEnabled()) {      return this.objectMapper.canDeserialize(javaType); } AtomicReference causeRef = new AtomicReference(); if (this.objectMapper.canDeserialize(javaType, causeRef)) {      return true; } ```  canDeserialize without the causeRef parameter rethrows exceptions that occur, which is not expected. canDeserialize(javaType, causeRef) should be called in any case.  The log level should not influence if exceptions are thrown or not. The log level only determines what is logged or not.  We had a case where the log level was set to WARN on integration systems but to ERROR on production systems. On the integration system, the exception was logged as a warning and did not break the application. On the production system, the exception was logged with a full stack trace and rethrown, which broke the application. If the exception is considered to be logged as a warning, it should not be rethrown.  What is the initial intention of lines 		161 - 163?    ---  **Affects:** 4.3.6  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java#L161  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5f767a86f556fe04171483f3ec598a22a78f073c, https://github.com/spring-projects/spring-framework/commit/121a3bf6700cfc968d40ebdd018d6ba29b86aa03","closed","type: bug,","spring-projects-issues","2017-07-11T11:55:47Z","2017-07-20T12:33:00Z"
"","20193","@Profile should be able to define profiles to accomplish the 'and' scenario [SPR-15634]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-15634](https://jira.spring.io/browse/SPR-15634?redirect=false)** and commented  The current `@Profile`'s value attribute behaves how an **OR**  Thus having the following:  ```java @Component @JmxProfile @FileProfile @ManagedResource(description=""Admin SimpleFileReaderLoggingWriter"") public class SimpleFileReaderLoggingWriterJmx { ```  or  ```java @Component @Profile(value={""jmx"",""file""}) @ManagedResource(description=""Admin SimpleFileReaderLoggingWriter"") public class SimpleFileReaderLoggingWriterJmx { ```  It behaves: use this bean when the profile is either `jmx` **or** `file` (mostly for the second scenario, seems I need other approach for the first scenario, I mean, an annotation that wraps other annotations)  Seems we need a new attribute that behaves how an **AND**. It to represents: use this bean when the profiles are `jmx` **and** `file`  Sadly it is not a `@Configuration` class where I am able to use the `@Profile` together with the `@Configuration` and `@Bean` to represent the **AND** scenario. But here we are in the _business_ or _model_ area.  Not sure if exists other approach to accomplish this.  Thank you.  ---  **Affects:** 4.3 GA, 4.3.8  **Reference URL:** https://stackoverflow.com/questions/38133808/spring-multiple-profiles-active  **Issue Links:** - #17063 Support AND operator in `@Profile` annotation (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2017-06-07T13:52:12Z","2019-01-13T05:15:54Z"
"","19951","Create Test section with samples for WebSocket [SPR-15388]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-15388](https://jira.spring.io/browse/SPR-15388?redirect=false)** and commented  Hello Spring team  Respecting your huge valuable work.  After to look at:  * [26. WebSocket Support](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#websocket) * [15.6 Spring MVC Test Framework](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#spring-mvc-test-framework)  I did realize does not exist a section about Spring WebSocket oriented in testing with Mock for MVC.  It mainly applying or including the two broker scenarios in-memory and in not in-memory. Of course working with SockJs and STOMP  Thanks by your understanding.   ---  **Affects:** 4.3 GA, 4.3.6, 4.3.7, 5.0 M1, 5.0 M5","closed","status: declined,","spring-projects-issues","2017-03-27T15:46:49Z","2017-03-28T13:45:59Z"
"","19908","Explain why RequestEntity for POST needs the Accept header [SPR-15345]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-15345](https://jira.spring.io/browse/SPR-15345?redirect=false)** and commented  I have a situation explained in detail in SO. It is related with this JIRA.  I did a research in the [RequestEntity ](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/RequestEntity.html) javadoc.  Where we have available two samples with `POST`, where `.accept(MediaType.APPLICATION_JSON)` is used.  **One**: here my confusion is that either `POST` or `PUT` needs define _mandatorily_ the `Content-Type` header to define the _body_ format, it either for `XML` or `JSON`, I mean something like:  ```java RequestEntity.post(uri)              .contentType(MediaType.APPLICATION_XML || MediaType.APPLICATION_JSON_UTF8)              .body(entity); ```  We are expecting that the `@PostMapping` works around the `consumes` attribute, right?  _Something that the two sample codes do not include the `Content-Type`, not sure if it is valid or something special happens behind scenes_.  According with my understanding when a `POST` action goes well the following is returned:  * a `201 Created` status * a `Location` header * no body or no content  Thus from the 3rd point, therefore `RequestEntity` should be used, and not `RequestEntity`  **Two**: the obvious question: why `Accept` has been defined for a `POST` in the examples?  **Observation**: for me by the moment just has sense define the `Accept` header when the server throws an error and the client needs extract the error message returned in the format established through the `Accept` header, either `XML` or `JSON`. Thus _other_ `RequestEntity` should be created _to call the same URI_ with the purpose to know the error message. Thus `RequestEntity` is only valid for a valid scenario and perhaps this second `RequestEntity` for the invalid scenario should be of the `RequestEntity` type, where `ErrorMessage` is a POJO that contains annotations for `XML` or `JSON`  **Three** for the valid scenario working with `RequestEntity`, what represents `MyRequest`? What should be returned from the server side to be included in that object?  Perhaps a special clarification in the javadoc and perhaps in the Reference Documentation should be added. It for these three points.  Now according with my current experience explained in SO and with the current Javadoc, seems mandatory for `POST` include the `Accept` header too.  Thanks by your understanding   ---  **Affects:** 4.3 GA, 4.3.6  **Reference URL:** http://stackoverflow.com/questions/42741865/spring-requestentityobject-needs-accept-header-mandatorily-when-the-server-fai","closed","status: declined,","spring-projects-issues","2017-03-14T00:34:38Z","2017-03-14T12:31:39Z"
"","19905","When to use BeanDefinition.SCOPE_PROTOTYPE vs. ConfigurableBeanFactory.SCOPE_PROTOTYPE [SPR-15342]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-15342](https://jira.spring.io/browse/SPR-15342?redirect=false)** and commented  Hello Spring team  I have tested that these three ways are valid:  ```java @Scope(""prototype"") @Scope(BeanDefinition.SCOPE_PROTOTYPE) @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) ```  Of course the first is the most obvious, but about the other two ways: I did a research through the _javadoc/api_ and current _Reference Documentation_ for these two interfaces and there is no mention about when an approach should be used over the other.  Even when it is trivial I think is fair give some indication.   ---  **Affects:** 4.3 GA, 4.3.6","closed","type: task,","spring-projects-issues","2017-03-11T17:16:10Z","2019-11-24T13:02:17Z"
"","19888","Why for WebMvcConfigurerAdapter's configureMessageConverters method the order of the items of type HttpMessageConverter is very important? [SPR-15325]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-15325](https://jira.spring.io/browse/SPR-15325?redirect=false)** and commented  Hello Spring team  Not sure if it is a bug. But is annoying in some way. I want assume something is missing about infrastructure configuration.  Why for a class like:  ```java @EnableWebMvc @Configuration public class WebMvcConfig extends WebMvcConfigurerAdapter { ```  For the method:  ```java @Override public void configureMessageConverters(List","closed","status: invalid,","spring-projects-issues","2017-03-07T17:37:49Z","2019-01-12T05:21:08Z"
"","20382","jaxws:client no more resolves the ${property placeholder} references [SPR-15827]","**[Manish](https://jira.spring.io/secure/ViewProfile.jspa?name=manishsingh11@hotmail.com)** opened **[SPR-15827](https://jira.spring.io/browse/SPR-15827?redirect=false)** and commented  This works with CXF 3.1.10 and Spring 4.1.6 but does not when I upgrade spring to 4.3.7 I also tried upgrading to Spring 4.3.10 but that does not help either.  I load the properties file as   above referenced file contains session.manager.service.uri=http://some.com/url  and I need to use that property in below jaxws:client section    BUT it never resolves the address and throws an error: Could not find conduit initiator for address: ${session.manager.service.uri:http://enter.valid.session.manager.service.uri/} and transport:   ---  **Affects:** 4.3.7, 4.3.10  1 votes, 3 watchers","open","in: core,","spring-projects-issues","2017-07-27T19:56:44Z","2020-08-17T08:39:22Z"
"","20345","WebClient.post() not sending complete Flux on Windows [SPR-15790]","**[Malte Finnern](https://jira.spring.io/secure/ViewProfile.jspa?name=maltefinnern)** opened **[SPR-15790](https://jira.spring.io/browse/SPR-15790?redirect=false)** and commented  Hi, I have a very strange issue regarding the WebClient. It seems like, that the last bit of my Flux is not sent to the server.  I a very simple spring boot application. (just spring-boot-starter-webflux, generated by the Initializr )  My Server Code:  ```java @RestController public class TcpStreaming {     @PostMapping(value = ""eventSink"", consumes = MediaType.APPLICATION_JSON_VALUE)     public Mono eventSink(@RequestBody Flux flux) {         return flux.doOnNext(event -> System.err.println(event.getContent()))                 .then(Mono.just(new ResponseEntity(HttpStatus.OK)));     } } ```  A very simple Event Class:  ```java public class SendEvent {     private String content;      public SendEvent() {     }     public SendEvent(String content) {         this.content = content;     } } ```  And a very simple client:  ```java      public static void main(String[] args) {         int toBeSent = 257;         Flux flux = Flux.range(1, toBeSent).map(count -> ""{\""content\"":"" + ""\"""" + count + ""\""}"");          WebClient client = WebClient.create();         ClientResponse result = client.post().uri(URI.create(""http://localhost:8080/eventSink""))                 .contentType(MediaType.APPLICATION_JSON).body(flux, String.class).exchange().block();         System.err.println(result.statusCode());     } ```  When i send 256 Events, every Event reaches the server and I get a HTTP 200 response. When I send 257 Events, the WebClient never returns and the Server prints out all the Events til 256 (so one is missing).When I send 10000 events, 9984 Events  reaching the server. Either I'm using the API wrong or the last chunk of the Event Flux is not read correctly. Since 256 is the inital buffer for a lot of operators, it might be the later.  Thanks for the help, Malte    ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/58373764c89326359bf0a9a8584e1d306973f301, https://github.com/spring-projects/spring-framework-issues/commit/7a6782312af01093a929b20278a9cd45bef9a15c","closed","type: bug,","spring-projects-issues","2017-07-18T17:59:32Z","2019-01-13T15:39:23Z"
"","20119","DDoS Spring 5 RouterFunction apps [SPR-15560]","**[Maksim Kostromin](https://jira.spring.io/secure/ViewProfile.jspa?name=daggerok)** opened **[SPR-15560](https://jira.spring.io/browse/SPR-15560?redirect=false)** and commented  to reproduce bug, run [this service](https://github.com/daggerok/functional-spring/blob/master/reactive-service/src/main/java/daggerok/ReactiveServiceApplication.java)  in a console send curl request: `curl localhost:3000//`  or use httpie: `http :3000//`  terminal should hangs and fails after timeout `http: error: Request timed out (30s).`  I didn't investigate if connections will be opened while all such requests will waiting for theirs timeouts. If so, attackers can easily DDoS these kind of spring 5 apps by sending 65k requests for 30 seconds  [posible fix](https://github.com/spring-projects/spring-framework/pull/1423/commits/08fba6d237ae8f88171fb5a325401262560407b9) [previous discussion](#20088) [parent issue](https://github.com/spring-projects/spring-boot/issues/9133)  ---  **Affects:** 5.0 RC1  **Reference URL:** https://github.com/daggerok/functional-spring/blob/master/reactive-service/src/main/java/daggerok/ReactiveServiceApplication.java  **Issue Links:** - #21318 WebFlux handles requests with an illegal Host header inconsistently - #20088 Replace many following slashes of client URI with single slash. (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/11075f12bc2ac27b47d9362751a2a44f808828b9","closed","type: bug,","spring-projects-issues","2017-05-18T15:12:40Z","2019-01-14T04:35:18Z"
"","20104","webflux handler fails in case invalid method was requested [SPR-15545]","**[Maksim Kostromin](https://jira.spring.io/secure/ViewProfile.jspa?name=daggerok)** opened **[SPR-15545](https://jira.spring.io/browse/SPR-15545?redirect=false)** and commented  this:  ```java @Bean public RouterFunction routes(final TaskRepository taskRepository,                                              final ActivityRepository activityRepository) {   return       route(           DELETE(""/tasks""),           request -> ok().body(               Mono.fromCallable(() -> {                 activityRepository.deleteAll();                 taskRepository.deleteAll();                 return ""done."";               }).subscribe(), String.class)); } ```  on invalid http method call (correct one is: delete)  ```bash $ http del :8080/tasks HTTP/1.1 500 Internal Server Error ```  will fails with logs No enum constant HttpMethod.xxx:  > 2017-05-14 22:03:14.985 ERROR 25071 --- [ctor-http-nio-2] o.s.w.s.adapter.HttpWebHandlerAdapter    : Failed to handle request >  > java.lang.IllegalArgumentException: No enum constant org.springframework.http.HttpMethod.DEL > at java.lang.Enum.valueOf(Enum.java:238) ~[na:1.8.0_102] > at org.springframework.http.HttpMethod.valueOf(HttpMethod.java:31) ~[spring-web-5.0.0.RC1.jar:5.0.0.RC1] > at org.springframework.http.server.reactive.ReactorServerHttpRequest.getMethod(ReactorServerHttpRequest.java:90) ~[spring-web-5.0.0.RC1.jar:5.0.0.RC1] > at org.springframework.web.reactive.function.server.DefaultServerRequest.method(DefaultServerRequest.java:80) ~[spring-webflux-5.0.0.RC1.jar:5.0.0.RC1] > at org.springframework.web.reactive.function.server.RequestPredicates$HttpMethodPredicate.test(RequestPredicates.java:319) ~[spring-webflux-5.0.0.RC1.jar:5.0.0.RC1] > at org.springframework.web.reactive.function.server.RequestPredicates$AndRequestPredicate.test(RequestPredicates.java:417) ~[spring-webflux-5.0.0.RC1.jar:5.0.0.RC1] > at org.springframework.web.reactive.function.server.RouterFunctions.lambda$route$1(RouterFunctions.java:98) ~[spring-webflux-5.0.0.RC1.jar:5.0.0.RC1] > at org.springframework.web.reactive.function.server.RouterFunction.lambda$and$1(RouterFunction.java:50) ~[spring-webflux-5.0.0.RC1.jar:5.0.0.RC1] > at org.springframework.web.reactive.function.server.RouterFunction.lambda$and$1(RouterFunction.java:50) ~[spring-webflux-5.0.0.RC1.jar:5.0.0.RC1] > at org.springframework.web.reactive.function.server.RouterFunction.lambda$and$1(RouterFunction.java:50) ~[spring-webflux-5.0.0.RC1.jar:5.0.0.RC1] > at org.springframework.web.reactive.function.server.RouterFunctions.lambda$toHttpHandler$10(RouterFunctions.java:229) ~[spring-webflux-5.0.0.RC1.jar:5.0.0.RC1] > at org.springframework.web.server.handler.WebHandlerDecorator.handle(WebHandlerDecorator.java:49) ~[spring-web-5.0.0.RC1.jar:5.0.0.RC1] > at org.springframework.web.server.handler.WebHandlerDecorator.handle(WebHandlerDecorator.java:49) ~[spring-web-5.0.0.RC1.jar:5.0.0.RC1] > at org.springframework.web.server.handler.FilteringWebHandler.handle(FilteringWebHandler.java:65) ~[spring-web-5.0.0.RC1.jar:5.0.0.RC1] > at org.springframework.web.server.handler.WebHandlerDecorator.handle(WebHandlerDecorator.java:49) ~[spring-web-5.0.0.RC1.jar:5.0.0.RC1] > at org.springframework.web.server.handler.ExceptionHandlingWebHandler.handle(ExceptionHandlingWebHandler.java:60) ~[spring-web-5.0.0.RC1.jar:5.0.0.RC1] > at org.springframework.web.server.adapter.HttpWebHandlerAdapter.handle(HttpWebHandlerAdapter.java:133) ~[spring-web-5.0.0.RC1.jar:5.0.0.RC1] > at org.springframework.http.server.reactive.ReactorHttpHandlerAdapter.apply(ReactorHttpHandlerAdapter.java:59) ~[spring-web-5.0.0.RC1.jar:5.0.0.RC1] > at org.springframework.http.server.reactive.ReactorHttpHandlerAdapter.apply(ReactorHttpHandlerAdapter.java:37) ~[spring-web-5.0.0.RC1.jar:5.0.0.RC1] > at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:381) ~[reactor-netty-0.6.3.RELEASE.jar:0.6.3.RELEASE] > at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:354) ~[reactor-netty-0.6.3.RELEASE.jar:0.6.3.RELEASE] > at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) ~[netty-common-4.1.11.Final.jar:4.1.11.Final] > at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:403) ~[netty-common-4.1.11.Final.jar:4.1.11.Final] > at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:462) ~[netty-transport-4.1.11.Final.jar:4.1.11.Final] > at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858) ~[netty-common-4.1.11.Final.jar:4.1.11.Final] > at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_102] > Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: > Assembly trace from producer [reactor.core.publisher.MonoError] : > reactor.core.publisher.Mono.error(Mono.java:263) > org.springframework.web.server.handler.ExceptionHandlingWebHandler.handle(ExceptionHandlingWebHandler.java:63) > org.springframework.web.server.adapter.HttpWebHandlerAdapter.handle(HttpWebHandlerAdapter.java:133) > org.springframework.http.server.reactive.ReactorHttpHandlerAdapter.apply(ReactorHttpHandlerAdapter.java:59) > org.springframework.http.server.reactive.ReactorHttpHandlerAdapter.apply(ReactorHttpHandlerAdapter.java:37) > reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:381) > reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:354) > io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) > io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:403) > io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:462) > io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858) > Error has been observed by the following operator(s): > |_	Mono.error(ExceptionHandlingWebHandler.java:63)  ---  **Affects:** 5.0 RC1  **Issue Links:** - #21359 Improve handling of unknown status codes by WebClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a5b94f3a776c16ce3eb09ac92a9a7907910f5ff5, https://github.com/spring-projects/spring-framework/commit/630fc194f0ae4ae261fb67269302610a655187ad","closed","type: bug,","spring-projects-issues","2017-05-14T19:08:15Z","2019-01-11T17:08:12Z"
"","20088","Replace many following slashes of client URI with single slash. [SPR-15529]","**[Maksim Kostromin](https://jira.spring.io/secure/ViewProfile.jspa?name=daggerok)** opened **[SPR-15529](https://jira.spring.io/browse/SPR-15529?redirect=false)** and commented  (Updated title and description)  Right now when request `curl http://localhost:3000//` (or http :3000//) is sending (which is ends at least with one additional '/' symbol):  1. URI.create will fail with message:  > 2017-05-08 23:30:21.770  WARN 24578 --- [ctor-http-nio-7] i.n.u.concurrent.AbstractEventExecutor   : A task raised an exception. Task: reactor.ipc.netty.channel.ContextHandler$$Lambda$159/430674510@75bc1117 >  > java.lang.IllegalArgumentException: Expected authority at index 2: //  2. Terminal is hangs:  > $ http :3000// >  > http: error: Request timed out (30s). > I didn't investigate what's going on with connection itself, probably it will not be closed some time. but anyway, As an attacker, I can easily DDOS spring 5 apps, I need only generate 65k these request for 30 sec and your service will be unavailable  issue can be reproduced [using this example (reactive-service)](https://github.com/daggerok/functional-spring/blob/master/reactive-service/src/main/java/daggerok/ReactiveServiceApplication.java)  possible fix for that case is replace in uri-string few slashes with only one before it URI will be resolved. for example we can use:  > uri.replaceAll(""/{2,}"", ""/"");  I've created PR with such fix: https://github.com/spring-projects/spring-framework/pull/1423  ---  **Affects:** 5.0 RC1  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/9133  **Issue Links:** - #20119 DDoS Spring 5 RouterFunction apps (_**""is superseded by""**_)","closed","status: declined,","spring-projects-issues","2017-05-09T16:19:06Z","2019-01-14T04:35:27Z"
"","20132","AopUtils.getTargetClass returns a proxy class for @Configuration beans [SPR-15573]","**[M. Justin](https://jira.spring.io/secure/ViewProfile.jspa?name=mjustin)** opened **[SPR-15573](https://jira.spring.io/browse/SPR-15573?redirect=false)** and commented  I just discovered that AopUtils.getTargetClass will return the proxy class (not the target class) when requesting the bean for an `@Configuration` class.  Looking at the code for getTargetClass, it expects the object to be an instance of SpringProxy, but it is instead just an instance of ConfigurationClassEnhancer.EnhancedConfiguration — which does not implement SpringProxy.  The following simple Spring Boot application demonstrates this issue:  ``` package example;  import org.springframework.aop.support.AopUtils; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.builder.SpringApplicationBuilder;  import javax.annotation.PostConstruct; import java.util.Arrays;  @SpringBootApplication public class ExampleApplication {   @Autowired   private ExampleConfiguration exampleConfiguration;    public static void main(String[] args) {     new SpringApplicationBuilder().sources(ExampleApplication.class).build().run();   }    @PostConstruct   public void demonstrateIssue() {     // class example.ExampleConfiguration$$EnhancerBySpringCGLIB$$2a89a1c2     System.out.println(AopUtils.getTargetClass(exampleConfiguration));      // class example.ExampleConfiguration     System.out.println(AopUtils.getTargetClass(exampleConfiguration).getSuperclass());      // [interface org.springframework.context.annotation.ConfigurationClassEnhancer$EnhancedConfiguration]     System.out.println(Arrays.toString(AopUtils.getTargetClass(exampleConfiguration).getInterfaces()));   } } ```  ``` package example;  import org.springframework.context.annotation.Configuration;  @Configuration public class ExampleConfiguration { } ```    ---  **Affects:** 4.3.8","closed","status: declined,","spring-projects-issues","2017-05-21T23:01:37Z","2019-01-12T16:33:19Z"
"","19759","Spring does not clean up db connection registered in afterCompletion callback [SPR-15194]","**[M J](https://jira.spring.io/secure/ViewProfile.jspa?name=damanja)** opened **[SPR-15194](https://jira.spring.io/browse/SPR-15194?redirect=false)** and commented  During rollback, when additional database operations are performed using jdbcTemplate, Spring does not clean up the database connection it stores in threadLocal.  When the same thread is later reused on another request, Spring uses this stale and potential  invalid ( terminated by server) connection, instead of getting one from the thread pool. This causes ""broken pipe"" or ""communication link failure"" exception  See this link for detailed example  http://stackoverflow.com/questions/41860231/springframework-jdbctemplate-database-connection-not-cleanedup-from-threadloca  ---  **Affects:** 4.2.6  **Reference URL:** http://stackoverflow.com/questions/41860231/springframework-jdbctemplate-database-connection-not-cleanedup-from-threadloca  **Issue Links:** - #16214 TransactionSynchronizationManager - throw an Exception or log a warning if a Synchronization wants to add a Synchronization and afterCompletion is already called  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2017-01-26T21:11:15Z","2019-01-11T14:25:40Z"
"","20019","ResolvableType.isInstance(Object) does not support dynamic proxies [SPR-15458]","**[Lukas Jusko](https://jira.spring.io/secure/ViewProfile.jspa?name=ljusko)** opened **[SPR-15458](https://jira.spring.io/browse/SPR-15458?redirect=false)** and commented  Method isInstance(object) returns false even if object is instance of given type. When incoming object is JDK proxy, object.getClass() returns com.sun.Proxy class instead of proxied class. Then this method evaluates to false, even if I'd expect to be true. Works only for CGLib proxies.   --- No further details from [SPR-15458](https://jira.spring.io/browse/SPR-15458?redirect=false)","open","in: core,","spring-projects-issues","2017-04-18T12:16:13Z","2019-01-11T16:40:48Z"
"","20395","Single page documentation [SPR-15840]","**[Lovro Pandžić](https://jira.spring.io/secure/ViewProfile.jspa?name=lpandzic)** opened **[SPR-15840](https://jira.spring.io/browse/SPR-15840?redirect=false)** and commented  Version 4 supported single page documentation - http://docs.spring.io/spring/docs/4.3.9.RELEASE/spring-framework-reference/htmlsingle/.  Can version 5 also support single page documentation? It is a lot easier to navigate and search through documentation if it's in single page format.   ---  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2017-08-01T07:03:08Z","2018-11-30T21:27:49Z"
"","20376","Document HTTP/2 support in Spring 5 [SPR-15821]","**[Lovro Pandžić](https://jira.spring.io/secure/ViewProfile.jspa?name=lpandzic)** opened **[SPR-15821](https://jira.spring.io/browse/SPR-15821?redirect=false)** and commented  I'm unable to find any information about HTTP/2 support in Spring 5 be it the new web-flux module, WebClient, old Servlet APIs or testing infrastructure. Can documentation for HTTP/2 support be improved?   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bf6025303b35a0e59b8dacb7b057292bdfc624e2  1 votes, 4 watchers","closed","type: documentation,","spring-projects-issues","2017-07-26T14:25:39Z","2017-10-25T10:10:56Z"
"","19683","MockHttpServletRequestBuilder should support multiple locales [SPR-15116]","**[Louis-Rémi](https://jira.spring.io/secure/ViewProfile.jspa?name=l-r)** opened **[SPR-15116](https://jira.spring.io/browse/SPR-15116?redirect=false)** and commented  It's possible to set multiple locales to `MockHttpServletRequest` with `setPreferredLocales` or `addPreferredLocale`.  However, `MockHttpServletRequestBuilder` lacks the method(s) to set it.  I thought of extending `MockHttpServletRequestBuilder` to work around this but `MockMvc` is final, so it's not possible to return anything else than a `MockHttpServletRequestBuilder`  I suggest that the `MockHttpServletRequestBuilder` should allow to set locales like it's possible in the underlying `MockHttpServletRequest`.   ---  **Affects:** 4.3.1  **Referenced from:** commits https://github.com/spring-projects/spring-integration/commit/c886b3bf68b9f4056c77e42ebf6b0db5147acd2a  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2017-01-09T15:58:08Z","2017-01-25T14:18:15Z"
"","19988","Add ""use"" in Spring API documentation (Javadoc) [SPR-15427]","**[Logan Mauzaize](https://jira.spring.io/secure/ViewProfile.jspa?name=loganmzz)** opened **[SPR-15427](https://jira.spring.io/browse/SPR-15427?redirect=false)** and commented  With Javadoc, you can generate usage pages (class, package, ...) which help to discover the API.  Example : https://docs.oracle.com/javase/8/docs/api/index.html?java/util/function/class-use/Predicate.html  ---  **Affects:** 5.0 M5  **Issue Links:** - #21709 Generate ""Use"" pages in aggregated Spring API documentation (Javadoc)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/42420a2df7e15c0b76e39bad9e0526aaf07ae984","closed","type: enhancement,","spring-projects-issues","2017-04-10T14:12:38Z","2019-01-11T16:43:38Z"
"","19982","Add Consumer response body asssertions to WebTestClient [SPR-15421]","**[Logan Mauzaize](https://jira.spring.io/secure/ViewProfile.jspa?name=loganmzz)** opened **[SPR-15421](https://jira.spring.io/browse/SPR-15421?redirect=false)** and commented  [ExchangeResult](http://docs.spring.io/spring-framework/docs/5.0.0.M5/javadoc-api/index.html?org/springframework/test/web/reactive/server/ExchangeResult.html) can be improved by adding an `assertBodyWithDiagnostics(Consumer bodyAssertions)` method which can consume body whatever it is flux or entity-based.  It also requires ExchangeResult to be generic such as sub-classes.  As an alternative, sub-classes can have corresponding method regarding specific requirements for reactive tests.   ---  **Affects:** 5.0 M5","closed","type: enhancement,","spring-projects-issues","2017-04-07T14:44:52Z","2017-05-08T08:41:47Z"
"","19981","Add JSON content and JsonPath options to WebTestClient [SPR-15420]","**[Logan Mauzaize](https://jira.spring.io/secure/ViewProfile.jspa?name=loganmzz)** opened **[SPR-15420](https://jira.spring.io/browse/SPR-15420?redirect=false)** and commented  When using WebFlux, Spring Boot doesn't support natively MockMvc autoconfiguration with SpringBootTest.  Thus, you need to test against WebTestClient but it doesn't provide all features of MockMvc API. As example, JSON support : * [MockMvcResultMatchers.jsonPath](http://docs.spring.io/spring-framework/docs/5.0.0.M5/javadoc-api/org/springframework/test/web/servlet/result/MockMvcResultMatchers.html#jsonPath-java.lang.String-java.lang.Object...-) * [ContentResultMatchers.json](http://docs.spring.io/spring-framework/docs/5.0.0.M5/javadoc-api/org/springframework/test/web/servlet/result/ContentResultMatchers.html#json-java.lang.String-boolean-)    ---  **Affects:** 5.0 M5","closed","type: enhancement,","spring-projects-issues","2017-04-07T12:38:22Z","2017-05-08T08:41:44Z"
"","20308","MockMvc duplicates PUT Parameter value [SPR-15753]","**[Liqueur Librazy](https://jira.spring.io/secure/ViewProfile.jspa?name=librazy)** opened **[SPR-15753](https://jira.spring.io/browse/SPR-15753?redirect=false)** and commented  When I run test against a Controller with `@PutMapping` and a parameter with custom type, say  ```java public class Data {     private String d1;     private String d2; }  @PutMapping() public String test(Data d) ```  and  ```java MockMvc.perform(put(""/"")                             .content(""d1=a&d2=s"")                             .contentType(MediaType.APPLICATION_FORM_URLENCODED)) ```  I'll get unexpected result that I got d1=""a,a"", d2=""s,s"". But a normal PUT request works fine.  With some digging, I noticed that [the first line of HttpPutFormContentFilter#getParameterValues(String)](https://github.com/spring-projects/spring-framework/blob/f813712f5b413b354560cd7cc006352e9defa9a3/spring-web/src/main/java/org/springframework/web/filter/HttpPutFormContentFilter.java#L164) returns null when requested normally but return the values in form data under test environment(when the request is of type MockHttpServletRequest).  I wrote a little spring boot project to demonstrate it. And there is some screenshot shows the difference between a real request and a mocked request.  ---  **Affects:** 5.0 RC2  **Attachments:** - [1.png](https://jira.spring.io/secure/attachment/25034/1.png) (_67.37 kB_) - [2.png](https://jira.spring.io/secure/attachment/25033/2.png) (_81.85 kB_) - [3.png](https://jira.spring.io/secure/attachment/25032/3.png) (_67.92 kB_) - [4.png](https://jira.spring.io/secure/attachment/25031/4.png) (_68.28 kB_) - [SpringBootTest.zip](https://jira.spring.io/secure/attachment/25035/SpringBootTest.zip) (_142.15 kB_)  **Issue Links:** - #20390 Access to request parameters via `@RequestParam` within form PUT request handlers is broken (HttpPutFormContentFilter) - #20383 Parameter values are null when making a PUT request  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eb8454789429f30bbbe0a32d36406603f7d5ee25, https://github.com/spring-projects/spring-framework/commit/8d743181daf6120c34d1c7778ea5231a78d72d7b","closed","type: bug,","spring-projects-issues","2017-07-10T13:28:19Z","2019-01-13T05:15:33Z"
"","20288","InstantiationAwareBeanPostProcessor method postProcessAfterInstantiation doc issue [SPR-15732]","**[lichao](https://jira.spring.io/secure/ViewProfile.jspa?name=lichao)** opened **[SPR-15732](https://jira.spring.io/browse/SPR-15732?redirect=false)** and commented  The documentation of InstantiationAwareBeanPostProcessor method postProcessAfterInstantiation specifies:  ""This is the ideal callback for performing field injection on the given bean instance.See Spring's own {`@link` org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor} for a typical example.""  However, field injection of AutowiredAnnotationBeanPostProcessor actully works in method postProcessPropertyValues, and the implementation of method postProcessAfterInstantiation in parent abstract class InstantiationAwareBeanPostProcessorAdapter just returns null.  so i think this doc maybe outdated.   --- No further details from [SPR-15732](https://jira.spring.io/browse/SPR-15732?redirect=false)","closed","in: core,","spring-projects-issues","2017-07-04T03:56:39Z","2017-07-20T12:33:00Z"
"","20279","Repeated meta-annotations not locatable on repeated annotation. [SPR-15723]","**[Liam Bryan](https://jira.spring.io/secure/ViewProfile.jspa?name=.com)** opened **[SPR-15723](https://jira.spring.io/browse/SPR-15723?redirect=false)** and commented  Meta annotations are not detected when present on `Repeatable` annotations.  Provided zip contains a quick example highlighting this, but for a contained example here (`@Retention` and `@Target` annotations omitted):  ```java @Repeatable(A.List.class) @interface A {      int value() default 1;          @interface List {         A[] value();     }  } ```  ```java @Repeatable(B.List.class) @A @interface B {      @AliasFor(annotation = A.class, attribute = ""value"")     int value();          @interface List {         B[] value();     }  } ```  None of the provided methods in `AnnotationUtils` or `AnnotatedElementUtils` can locate the meta-`@A` annotations for an element with repeated `@B` annotations.  ---  **Affects:** 4.3.8  **Attachments:** - [example.zip](https://jira.spring.io/secure/attachment/25022/example.zip) (_10.87 kB_)","open","in: core,","spring-projects-issues","2017-07-01T03:19:01Z","2021-01-18T17:46:21Z"
"","20078","Spring stomp sometimes send not the user in the connect-ack [SPR-15519]","**[Lexanius](https://jira.spring.io/secure/ViewProfile.jspa?name=lexanius)** opened **[SPR-15519](https://jira.spring.io/browse/SPR-15519?redirect=false)** and commented  Hi,  Problem: I have a very strange case in my spring boots application. In ~50% of all connection with Stomp the CONNECT_ACK not send the user-name after correct login. So the client cannot subscribe to user defined paths and it cannot use this.  _The example user is admin:_ If it works the answer to the client is:  ```java ""CONNECTED\nversion:1.2\nheart-beat:0,0\nuser-name:admin\n\n\u0000"" ```  if not:  ```java ""CONNECTED\nversion:1.2\nheart-beat:0,0\n\n\u0000"" ```  All other operations like normal subscriptions on a SimpleBroker or heartbeats works fine.  To login i use token and check this via ChannelInterceptorAdapter:  ```java     private final ChannelInterceptorAdapter channelInterceptorAdapter = new ChannelInterceptorAdapter() {          @Override         public Message preSend(final Message message, final MessageChannel channel) {             final StompHeaderAccessor headerAccessor = MessageHeaderAccessor.getAccessor(message,                     StompHeaderAccessor.class);             if (StompCommand.CONNECT.equals(headerAccessor.getCommand())) {                 final StompHeaderAccessor sw = StompHeaderAccessor.wrap(message);                 final Authentication authentication = auth(headerAccessor);                 if (authentication == null) {                     return null;                 }                 logger.warn(authentication.getName());                 headerAccessor.setUser(authentication);                 sw.setUser(authentication); // I dont know which is better,                                             // because wrap has a other behavior             }             return message;         }     }; ```  Thats work and Spring always knows the correct User before it send the connect-ack. I check this with the preSend of the of a ChannelInterceptorAdapter in the OutboundChannel. But it will not write to the websocket message.  So now my question, how can i prevent this behavior or add the user-name field self to the websocket message.  ### Pattern: I don't find one. Its work, or it works not, no error-log-message (on logpath org.*) and no exception.  ### System:  ```xml org.springframework.boot spring-boot-starter-parent 1.5.2.RELEASE ```  with spring-boot-starter-websocket and spring-boot-starter-security (and lot others, see jhipster...)  In the attachment are 2 logs: good.txt and bad.txt and my spring-stomp-configuration  Thanks for help, a little workaround is ok too.   ---  **Affects:** 4.3.7  **Attachments:** - [bad.txt](https://jira.spring.io/secure/attachment/24912/bad.txt) (_5.52 kB_) - [good.txt](https://jira.spring.io/secure/attachment/24913/good.txt) (_5.53 kB_) - [SecurityStompConfigurationExample.java](https://jira.spring.io/secure/attachment/24914/SecurityStompConfigurationExample.java) (_5.64 kB_)","closed","status: invalid,","spring-projects-issues","2017-05-05T13:55:18Z","2019-01-12T05:20:53Z"
"","19963","responseReason is null [SPR-15400]","**[Lena Lindstrot](https://jira.spring.io/secure/ViewProfile.jspa?name=lena)** opened **[SPR-15400](https://jira.spring.io/browse/SPR-15400?redirect=false)** and commented  I have a Spring- Boot-Project (1.5.2.RELEASE) with spring-web-mvc 4.3.7-RELEASE. When I do a REST request, I get only ""HTTP/1.1 200"", so it missing "" OK"". In the calling microservie (older version) I get a nullpointer exception because responseReason  is null:  java.lang.RuntimeException: com.netflix.client.ClientException at feign.ribbon.RibbonClient.execute(RibbonClient.java:75) at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:92) at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:71) at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:94) ... Caused by: com.netflix.client.ClientException: null at com.netflix.client.AbstractLoadBalancerAwareClient.executeWithLoadBalancer(AbstractLoadBalancerAwareClient.java:123) at feign.ribbon.RibbonClient.execute(RibbonClient.java:69) ... 106 common frames omitted   ---  **Affects:** 4.3.7","closed","status: invalid,","spring-projects-issues","2017-03-29T14:38:42Z","2019-01-12T05:21:03Z"
"","20004","Fix writing serialized JSON with WebClient and WebTestClient [SPR-15443]","**[Ledoyen Loïc](https://jira.spring.io/secure/ViewProfile.jspa?name=ledoyen)** opened **[SPR-15443](https://jira.spring.io/browse/SPR-15443?redirect=false)** and commented  When using plain text JSON as body, **WebTestClient** uses **Jackson2JsonEncoder** which escape given JSON String instead of leaving it untouched.  ```java WebTestClient client = WebTestClient.bindToController(new MyController()).build();  client                 .post()                 .uri(""/api/myservice/v1"")                 .contentType(MediaType.APPLICATION_JSON_UTF8)                 .body(""{\""field1\"": \""value1\""}"") // does not work //                .body(""{\""field1\"": \""value1\""}"".getBytes()) // works                 .exchange()                 .expectStatus().isOk(); ```  For some reason, the method **Jackson2JsonEncoder#encodeValue** is called when content is a String, but not called with a byte[].  However for the two types, the Flux is mapped by the **Jackson2JsonEncoder#encode** (l.120) method.   ---  **Affects:** 5.0 M5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3efb76c85285bd9899552dd2cb57ec3ae1920174","closed","type: bug,","spring-projects-issues","2017-04-12T13:44:08Z","2017-05-08T08:41:45Z"
"","20153","HandlerMethodReturnValueHandlerComposite doesn't cache resolved return types although the javadoc claims it does [SPR-15594]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-15594](https://jira.spring.io/browse/SPR-15594?redirect=false)** and commented  The javadoc of HandlerMethodReturnValueHandlerComposite contains this sentence: [""Previously resolved return types are cached for faster lookups.""](https://github.com/spring-projects/spring-framework/blob/76b28a0cece1049fe5317cd76dfc774437f0d6b6/spring-web/src/main/java/org/springframework/web/method/support/HandlerMethodReturnValueHandlerComposite.java#L32) However, the implementation of `HandlerMethodReturnValueHandlerComposite` doesn't contain a cache.  There is a cache in [HandlerMethodArgumentResolverComposite](https://github.com/spring-projects/spring-framework/blob/76b28a0cece1049fe5317cd76dfc774437f0d6b6/spring-web/src/main/java/org/springframework/web/method/support/HandlerMethodArgumentResolverComposite.java#L47) and perhaps something similar if missing from `HandlerMethodReturnValueHandlerComposite` .  The reason I'm filing this issue is that I'm optimizing performance of a legacy Spring MVC 3.2.x application. While load testing this application, I can see a large number of `java.lang.NoSuchMethodException` s being created. This is the stack trace of such exceptions:  ``` java.lang.NoSuchMethodException.(String)     java.lang.Class.getDeclaredMethod(String, Class[])     org.springframework.core.annotation.AnnotationUtils.findAnnotation(Method, Class)     org.springframework.web.method.HandlerMethod.getMethodAnnotation(Class)     org.springframework.web.method.HandlerMethod$HandlerMethodParameter.getMethodAnnotation(Class)     org.springframework.web.method.annotation.ModelAttributeMethodProcessor.supportsReturnType(MethodParameter)     org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.getReturnValueHandler(MethodParameter)     org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(Object, MethodParameter, ModelAndViewContainer, NativeWebRequest)     org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletWebRequest, ModelAndViewContainer, Object[])     org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(HttpServletRequest, HttpServletResponse, HandlerMethod)     org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(HttpServletRequest, HttpServletResponse, HandlerMethod)     org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(HttpServletRequest, HttpServletResponse, Object)     org.springframework.web.servlet.DispatcherServlet.doDispatch(HttpServletRequest, HttpServletResponse) ```  It seems that `AnnotationUtils.findAnnotation` has been optimized in more recent Spring versions and that's why I'm seeing this performance bottleneck in a Spring 3.2.x application.   ---  **Affects:** 3.2.18, 4.2.9, 4.3.8","closed","status: invalid,","spring-projects-issues","2017-05-29T07:26:50Z","2019-07-31T10:57:25Z"
"","20036","Duplicate content-length header using Netty4ClientHttpRequestFactory [SPR-15476]","**[Labusquiere](https://jira.spring.io/secure/ViewProfile.jspa?name=mlab)** opened **[SPR-15476](https://jira.spring.io/browse/SPR-15476?redirect=false)** and commented  The following code does not have the same behaviour using `Netty4ClientHttpRequestFactory` or `SimpleClientHttpRequestFactory`  ``` final ClientHttpRequest request = clientHttpRequestFactory.createRequest(new URI(""http://127.0.0.1:8080""), HttpMethod.PUT);       request.getBody().write(""toto"".getBytes());       request.getHeaders().put(""Content-Length"", Collections.singletonList(""4""));       final ClientHttpResponse response = request.execute();       System.out.println(response.getStatusText()); ```  The netty implementation duplicate the content-length header :  ``` $ sudo tcpdump -s 0 -A port 8080 -i lo  // with Netty4ClientHttpRequestFactory [...] .*...*.vPUT / HTTP/1.1 Host: 127.0.0.1 Content-Length: 4 Connection: close Content-Length: 4 [...]  // with SimpleClientHttpRequestFactory [...] User-Agent: Java/1.8.0_121 Host: 127.0.0.1:8080 Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 Connection: keep-alive Content-Length: 4 [...] ```  I do think this is a bug because two implementations does not have the same behavior and spring use to defend developpers against this kind of error, which should send back a 400 with double content-length header as status text. Even if it is not a bug the RFC expect something like :  ``` ""Content-Length: 4, 4""  ```  To be precise : they use the word may here, https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2 . But most of http server does not support several headers with the same key (they prefer Map)  The netty implementation can be quite annoying using spring integration http outbound and mapped header from the spring integration message (this is how I find out this behavior).  for the reference https://tools.ietf.org/html/rfc7230#page-30 is the content length header HTTP RFC.  In the aim to reproduce : - take the code from my fork - $ ```   python -m SimpleHTTPServer  ```in the aim to start a stupid http server - Start tcpdump using for example : ""sudo tcpdump -s 0 -A port 8080 -i lo""  Be aware that the pom contains spring boot dependencies but does not really use them, sorry i do not have the time to do a proper project. ```  ---  **Affects:** 4.3.8  **Reference URL:** https://github.com/MLabusquiere/spring-framework-issues  **Issue Links:** - #19806 RestTemplate with Netty produces two Content-Length headers (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-boot/commit/c84204bc819fb8cd39c82d1d964263a4414bceef","closed","in: web,","spring-projects-issues","2017-04-24T12:48:27Z","2019-01-12T16:45:09Z"
"","20213","Cleanup of duplicate semicolons in AbstractXlsView.java etc [SPR-15654]","**[KwangYeolPark](https://jira.spring.io/secure/ViewProfile.jspa?name=ktenpark)** opened **[SPR-15654](https://jira.spring.io/browse/SPR-15654?redirect=false)** and commented  Duplicate semicolons(\;) at line 74 in AbstractXlsView.java (org.springframework.web.servlet.view.document)   ---  **Affects:** 4.3.9, 5.0 RC1","closed","type: task,","spring-projects-issues","2017-06-13T05:55:14Z","2017-06-14T10:12:17Z"
"","19793","should be (conveniently) enable/disable tasks based on external property in xml namespace of task [SPR-15228]","**[Kunal Patel](https://jira.spring.io/secure/ViewProfile.jspa?name=patelkunal)** opened **[SPR-15228](https://jira.spring.io/browse/SPR-15228?redirect=false)** and commented  As a developer, I would wish to enable/disable scheduled tasks based on some business condition (technically - its external properties or decide behavior programmatically).  **Scenarios** * this is very common behavior in of many business application where you don't want to enable scheduler to schedule a task by default but you wish to have a way to toggle based on external property or programmatically decide to enable or disable. * Another common case would be your test case setup - mostly we don't schedule a task instead we mock instead of scheduled-task to populate the state.  Currently we schedule any task like below but AFAIK its not possible to toggle behavior of task (enable/disable).  ```xml               ```  **Suggestion** We should be conveniently toggle behavior of task:scheduled using property/value tag in xml (so value can be injected from property placeholders or invoke method to decide behavior programmatically.  Again this is improvement I am suggesting - it can be be taken up based on bandwidth.  Thanks, /kp   --- No further details from [SPR-15228](https://jira.spring.io/browse/SPR-15228?redirect=false)","closed","in: core,","spring-projects-issues","2017-02-07T06:41:26Z","2019-11-15T14:18:11Z"
"","19846","Add support for instant in @DateTimeFormat","**[Krzysztof Krason](https://jira.spring.io/secure/ViewProfile.jspa?name=krzyk)** opened **[SPR-15280](https://jira.spring.io/browse/SPR-15280?redirect=false)** and commented  `@DateTimeFormat` annotation is supported by all Java 8 time classes except Instant, which always assumes the date is in the format ""2017-02-21T13:00:00Z"".  Right now when making a request with **start** set to **2017-02-21T13:00**, following code works (uses LocalDateTime):  ``` @RestController public final class ReportController {      @RequestMapping(path = ""/test"", method = RequestMethod.GET)     public String report(         @RequestParam @DateTimeFormat(pattern = ""yyyy-MM-dd'T'HH:mm"") LocalDateTime start) {     return start.toString(); } ```  But following doesn't (fails with parsing exception):  ``` @RestController public final class ReportController {      @RequestMapping(path = ""/test"", method = RequestMethod.GET)     public String report(         @RequestParam @DateTimeFormat(pattern = ""yyyy-MM-dd'T'HH:mm"") Instant start) {     return start.toString(); } ```    ---  **Affects:** 4.3.6  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2017-02-22T21:11:38Z","2021-12-03T15:48:11Z"
"","20142","https://repo.spring.io/jcenter-cache repository contains broken Batik 1.9 artifacts [SPR-15583]","**[Krzysztof Debski](https://jira.spring.io/secure/ViewProfile.jspa?name=krzysiek85)** opened **[SPR-15583](https://jira.spring.io/browse/SPR-15583?redirect=false)** and commented  https://repo.spring.io/jcenter-cache repository contains broken Batik 1.9 artifacts.  The problem with artifacts has been fixed upstream: https://issues.apache.org/jira/browse/BATIK-1185  The fixed artifacts has been released again to Maven Central with the same version. https://repo.spring.io/jcenter-cache contains the old broken version of the artifacts.  Examples of broken artifacts: https://repo.spring.io/jcenter-cache/org/apache/xmlgraphics/batik-i18n/1.9/batik-i18n-1.9.pom https://repo.spring.io/jcenter-cache/org/apache/xmlgraphics/batik-svg-dom/1.9/batik-svg-dom-1.9.pom https://repo.spring.io/jcenter-cache/org/apache/xmlgraphics/batik-bridge/1.9/batik-bridge-1.9.pom   ---  **Reference URL:** https://issues.apache.org/jira/browse/BATIK-1185","closed","status: invalid,","spring-projects-issues","2017-05-24T09:51:06Z","2019-01-12T05:20:48Z"
"","20026","Doc: Typo in ResponseBodyAdvice class description [SPR-15466]","**[krasaev](https://jira.spring.io/secure/ViewProfile.jspa?name=krasaev)** opened **[SPR-15466](https://jira.spring.io/browse/SPR-15466?redirect=false)** and commented  Implementations **may be** may be registered directly with RequestMappingHandlerAdapter and ExceptionHandlerExceptionResolver or more likely annotated with `@ControllerAdvice` in which case they will be auto-detected by both.   ---  **Affects:** 4.3.8  **Reference URL:** https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyAdvice.html  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/799589ec1ce1830b205ab38f5e704cdda203e785","closed","in: core,","spring-projects-issues","2017-04-20T11:21:53Z","2017-06-07T20:04:28Z"
"","20164","Spring context divided into parts loaded by different ClassLoaders [SPR-15605]","**[Kotlyarov Pavel](https://jira.spring.io/secure/ViewProfile.jspa?name=tr1cks)** opened **[SPR-15605](https://jira.spring.io/browse/SPR-15605?redirect=false)** and commented  I currently implementing plugin architecture for my application. It will consist of such modules: core (contain API and part of domain, available for modules), platform (contain implementations for interfaces from core and main part of application) and plugins (contains additional functionality for extension points). Core will be loaded by parent classloader and all other modules will be loaded by different children classloaders to avoid dependency hell problem. And all of this i planned to union in single context at application initialization time by this way:  > new AnnotationConfigApplicationContext(CoreContextPart.class, PlatformContextPart.class, > PluginAContextPart.class, PluginBContextPart.class);  But i encounter a problem. Looks like Spring suggest that in such scenarios developer will use children Spring contexts for plugins. But it makes lifecycle of application much more complicated and i can't autowire main application services in plugins (they live in sibling classloaders and thats why in sibling spring contexts). Some time ago i already succesfully implement such solution with Guice. But when i tried it with Spring i understood that it has strange limitation - all beans from context loads by only one classloader. And thats why if this is the root classloader of my application it doesn't see classes from my plugins and platform.   ---  **Affects:** 5.0 RC1","open","type: enhancement,","spring-projects-issues","2017-06-01T10:01:29Z","2020-08-24T18:16:41Z"
"","19975","Add support for Kotlin coroutines [SPR-15413]","**[Konrad Kamiński](https://jira.spring.io/secure/ViewProfile.jspa?name=konrad-kaminski)** opened **[SPR-15413](https://jira.spring.io/browse/SPR-15413?redirect=false)** and commented  Since `1.1` Kotlin supports [coroutines](https://kotlinlang.org/docs/reference/coroutines.html). Its [library support](https://github.com/Kotlin/kotlinx.coroutines) includes [utility functions](https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-jdk8) for converting _suspending functions/lambdas_ to/from [CompletableFuture](http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html) / [Deferred](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.experimental/-deferred/index.html). It would be nice to have such support [ListenableFuture](http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/concurrent/ListenableFuture.html) as well.  The API could look as follows:  ```kotlin // a function for creating ListenableFuture from suspending lambda fun  listenableFuture(context: CoroutineContext = CommonPool, block: suspend () -> T): ListenableFuture  // a function for creating ListenableFuture from Deferred fun  Deferred.asListenableFuture(): ListenableFuture  // an extension suspending function which awaits for ListenableFuture completion suspend fun  ListenableFuture.await(): T ```  ---  **Affects:** 5.0 M5  **Issue Links:** - #21058 Incorrect return type of Kotlin suspending functions  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1375  18 votes, 26 watchers","closed","has: votes-jira,","spring-projects-issues","2017-04-04T22:43:00Z","2019-04-04T17:13:37Z"
"","19612","Allow controller parameter annotations (@RequestBody, @PathVariable...) to be defined on interfaces or parent classes [SPR-15046]","**[Kiril Karaatanassov](https://jira.spring.io/secure/ViewProfile.jspa?name=karaatanasov)** opened **[SPR-15046](https://jira.spring.io/browse/SPR-15046?redirect=false)** and commented  We are trying to use external REST API definition that would generate interfaces one implements in Java. For the time being we try to use Swagger.  Unfortunately Spring does not allow us to separate the API definition from implementation as the parameter annotations on controllers are not read from interfaces. Instead of that Spring always looks into the concrete implementation whose purpose is to implement a contract not define it. Weirdly enough the `@RequestMapping` annotation can be declared on the interface and is picked up by the implementing controller. It would be great if similar functionality is provided for `@RequestBody`, `@PathVariable`, `@RequestHeader` etc. that are defined on the individual parameters.  It seems that a potential fix has to update/extend the implementation of  `Annotation[] org.springframework.core.MethodParameter.getParameterAnnotations()`  this is called by  `MethodParameter[] org.springframework.web.method.HandlerMethod.initMethodParameters()`  called by `org.springframework.web.method.HandlerMethod` constructor which in turn is called by  `org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.createHandlerMethod(Object, Method)`.  There is a sample but hacky workaround found on StackOverflow. See  http://stackoverflow.com/questions/8002514/spring-mvc-annotated-controller-interface/8005644#8005644  It does require some creativity to put in practical use with Spring Boot i.e. `WebMvcRegistrations`  So the basic ask is to pick up parameter annotations for controller from implemented interfaces e.g.  ``` public interface MyControllerInterface {      @RequestMapping(path=""/test"", method=RequestMethod.POST)     public ResponseEntity echo(@RequestBody String input);  }  @RestController public class MyControllerImpl implements MyControllerInterface {     @Override     public ResponseEntity echo(String input) {         return new ResponseEntity(input, HttpStatus.OK);     } } ```  It may make sense to to use `@RestController` or alike annotation on the interfaces whose methods will be checked.  PS I filed this to Spring Boot and was redirected here https://github.com/spring-projects/spring-boot/issues/7730  ---  **Affects:** 4.3 GA  **Issue Links:** - #15682 Enable REST controller method parameter annotations on an interface (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2016-12-22T23:30:20Z","2019-01-11T15:16:39Z"
"","20267","Interceptors ignored in JAVA configuration but not XML configuration [SPR-15710]","**[Kim van der Linde](https://jira.spring.io/secure/ViewProfile.jspa?name=kimvdlinde)** opened **[SPR-15710](https://jira.spring.io/browse/SPR-15710?redirect=false)** and commented  interceptors using the JAVA configuration (subclass of WebMvcConfigurerAdapter) are ignored while XML configuration (dispatcher-servlet,xml) are properly accessed. This is on the Netbeans with version 4 Spring Framework.   --- No further details from [SPR-15710](https://jira.spring.io/browse/SPR-15710?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-06-27T14:56:30Z","2019-01-12T05:20:40Z"
"","20359","batchUpdate with multiple sql statements is failing [SPR-15804]","**[Kesav Kolla](https://jira.spring.io/secure/ViewProfile.jspa?name=kesavkolla)** opened **[SPR-15804](https://jira.spring.io/browse/SPR-15804?redirect=false)** and commented  I'm using a following snipped of code:  ```java jdbcTemplate.batchUpdate( 				""insert into property (_key, name, url) values ('key_01', 'testproperty0', 'testurl0')"", 				""insert into property (_key, name, url) values ('key_02', 'testproperty1', 'testurl1')"" 		); ```  The above code throws exception **Invalid batch SQL statement** even though those individual SQL statements are valid.  Looking into the code of JdbcTemplate.java lines 545:553  ```java for (int i = 0; i < sql.length; i++) { 	this.currSql = sql[i]; 	if (!stmt.execute(sql[i])) { 		rowsAffected[i] = stmt.getUpdateCount(); 	} 	else { 		throw new InvalidDataAccessApiUsageException(""Invalid batch SQL statement: "" + sql[i]); 	} } ```  The condition `if (!stmt.execute(sql[i]))` is not valid.  The condition should check for success not for failure.   --- No further details from [SPR-15804](https://jira.spring.io/browse/SPR-15804?redirect=false)","closed","status: declined,","spring-projects-issues","2017-07-21T04:08:45Z","2019-01-12T16:33:08Z"
"","19998","Eclispe Neon does not display spring project after Install spring IDE from market place [SPR-15437]","**[kenny dao](https://jira.spring.io/secure/ViewProfile.jspa?name=kdao01)** opened **[SPR-15437](https://jira.spring.io/browse/SPR-15437?redirect=false)** and commented  I am using Eclipse Neon.3 version, after install spring IDE from market place, but when I try to create new project , the spring project is not showing up the the project drop down list  Eclipse Java EE IDE for Web Developers.  Version: Neon.3 Release (4.6.3) Build id: 20170314-1500   ---  **Attachments:** - [eclipse-ide.PNG](https://jira.spring.io/secure/attachment/24903/eclipse-ide.PNG) (_17.94 kB_)","closed","status: invalid,","spring-projects-issues","2017-04-11T21:21:12Z","2019-01-12T05:21:00Z"
"","20316","NoSuchMethodError when webflux renders Thymeleaf template [SPR-15761]","**[Kengo TODA](https://jira.spring.io/secure/ViewProfile.jspa?name=toda_k)** opened **[SPR-15761](https://jira.spring.io/browse/SPR-15761?redirect=false)** and commented  Here is exception, I'll make a project to reproduce.  > java.lang.NoSuchMethodError: org.thymeleaf.spring5.view.reactive.ThymeleafReactiveViewResolver.getApplicationContext()Lorg/springframework/context/ApplicationContext; > at org.thymeleaf.spring5.view.reactive.ThymeleafReactiveViewResolver.loadView(ThymeleafReactiveViewResolver.java:581) ~[thymeleaf-spring5-3.0.6.M4.jar:3.0.6.M4] > at org.thymeleaf.spring5.view.reactive.ThymeleafReactiveViewResolver.resolveViewName(ThymeleafReactiveViewResolver.java:569) ~[thymeleaf-spring5-3.0.6.M4.jar:3.0.6.M4] > at org.springframework.web.reactive.function.server.DefaultRenderingResponseBuilder$DefaultRenderingResponse.lambda$writeTo$0(DefaultRenderingResponseBuilder.java:162) ~[spring-webflux-5.0.0.RC2.jar:5.0.0.RC2] > at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:350) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:205) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:89) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.FluxStream.subscribe(FluxStream.java:55) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:117) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:59) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoFlatMap$ThenMapMain.onNext(MonoFlatMap.java:146) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:919) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoFlatMap$ThenMapInner.onNext(MonoFlatMap.java:229) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:919) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoFlatMap$ThenMapInner.onNext(MonoFlatMap.java:229) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1472) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:156) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoFlatMap$ThenMapInner.onSubscribe(MonoFlatMap.java:218) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoFlatMap$ThenMapMain.onNext(MonoFlatMap.java:146) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:919) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoFlatMap$ThenMapInner.onNext(MonoFlatMap.java:229) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:103) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:919) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoReduceSeed$ReduceSeedSubscriber.onComplete(MonoReduceSeed.java:147) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoFlatMapMany$FlatMapInner.onComplete(MonoFlatMapMany.java:239) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.FluxIterable$IterableSubscription.fastPath(FluxIterable.java:260) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:141) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoFlatMapMany$FlatMapMain.onSubscribeInner(MonoFlatMapMany.java:139) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoFlatMapMany$FlatMapInner.onSubscribe(MonoFlatMapMany.java:224) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:89) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:54) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoFlatMapMany$FlatMapMain.onNext(MonoFlatMapMany.java:181) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:919) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.MonoReduce$ReduceSubscriber.onComplete(MonoReduce.java:125) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130) ~[reactor-core-3.1.0.M2.jar:3.1.0.M2] > at reactor.ipc.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:375) ~[reactor-netty-0.6.4.RELEASE.jar:0.6.4.RELEASE] > at reactor.ipc.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:198) ~[reactor-netty-0.6.4.RELEASE.jar:0.6.4.RELEASE] > at reactor.ipc.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:338) ~[reactor-netty-0.6.4.RELEASE.jar:0.6.4.RELEASE] > at reactor.ipc.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:343) ~[reactor-netty-0.6.4.RELEASE.jar:0.6.4.RELEASE] > at reactor.ipc.netty.channel.ChannelOperations.onHandlerTerminate(ChannelOperations.java:419) ~[reactor-netty-0.6.4.RELEASE.jar:0.6.4.RELEASE] > at reactor.ipc.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:566) ~[reactor-netty-0.6.4.RELEASE.jar:0.6.4.RELEASE] > at reactor.ipc.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:125) ~[reactor-netty-0.6.4.RELEASE.jar:0.6.4.RELEASE] > at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) [netty-transport-4.1.12.Final.jar:4.1.12.Final] > at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) [netty-transport-4.1.12.Final.jar:4.1.12.Final] > at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) [netty-transport-4.1.12.Final.jar:4.1.12.Final] > at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:310) [netty-codec-4.1.12.Final.jar:4.1.12.Final] > at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:284) [netty-codec-4.1.12.Final.jar:4.1.12.Final] > at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) [netty-transport-4.1.12.Final.jar:4.1.12.Final] > at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) [netty-transport-4.1.12.Final.jar:4.1.12.Final] > at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) [netty-transport-4.1.12.Final.jar:4.1.12.Final] > at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1334) [netty-transport-4.1.12.Final.jar:4.1.12.Final] > at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) [netty-transport-4.1.12.Final.jar:4.1.12.Final] > at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) [netty-transport-4.1.12.Final.jar:4.1.12.Final] > at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:926) [netty-transport-4.1.12.Final.jar:4.1.12.Final] > at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:134) [netty-transport-4.1.12.Final.jar:4.1.12.Final] > at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:644) [netty-transport-4.1.12.Final.jar:4.1.12.Final] > at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:579) [netty-transport-4.1.12.Final.jar:4.1.12.Final] > at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:496) [netty-transport-4.1.12.Final.jar:4.1.12.Final] > at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:458) [netty-transport-4.1.12.Final.jar:4.1.12.Final] > at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858) [netty-common-4.1.12.Final.jar:4.1.12.Final] > at java.lang.Thread.run(Thread.java:745) [na:1.8.0_92]    ---  **Affects:** 5.0 RC2","closed","status: invalid,","spring-projects-issues","2017-07-11T20:27:19Z","2019-01-12T05:20:36Z"
"","20264","XmlEventDecoder triggers IllegalReferenceCountException at AbstractByteBuf [SPR-15707]","**[Kengo TODA](https://jira.spring.io/secure/ViewProfile.jspa?name=toda_k)** opened **[SPR-15707](https://jira.spring.io/browse/SPR-15707?redirect=false)** and commented  When I use XmlEventDecoder with WebClient & Reactor, this class triggered IllegalReferenceCountException(refCnt = 0) in AbstractByteBuf. To solve this problem, we need to add **-Dio.netty.buffer.bytebuf.checkAccessible=false** as JVM argument.  Code to reproduce depends on both of Core 5.0.0.RC2 and Web 5.0.0.RC2, not sure which caused this problem. I'll push test to reproduce later.  #### Environment  > Apache Maven 3.5.0 (ff8f5e7444045639af65f6095c62210b5713f426; 2017-04-04T03:39:06+08:00) > Maven home: /usr/local/Cellar/maven/3.5.0/libexec > Java version: 1.8.0_92, vendor: Oracle Corporation > Java home: /Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/jre > Default locale: en_US, platform encoding: UTF-8 > OS name: ""mac os x"", version: ""10.12.5"", arch: ""x86_64"", family: ""mac""  #### Stacktrace  > io.netty.util.IllegalReferenceCountException: refCnt: 0 > at io.netty.buffer.AbstractByteBuf.ensureAccessible(AbstractByteBuf.java:1408) > at io.netty.buffer.AbstractByteBuf.checkReadableBytes0(AbstractByteBuf.java:1394) > at io.netty.buffer.AbstractByteBuf.checkReadableBytes(AbstractByteBuf.java:1383) > at io.netty.buffer.AbstractByteBuf.readBytes(AbstractByteBuf.java:850) > at io.netty.buffer.ByteBufInputStream.read(ByteBufInputStream.java:179) > at com.sun.org.apache.xerces.internal.impl.XMLEntityManager$RewindableInputStream.read(XMLEntityManager.java:2928) > at com.sun.org.apache.xerces.internal.impl.io.UTF8Reader.read(UTF8Reader.java:302) > at com.sun.org.apache.xerces.internal.impl.XMLEntityScanner.load(XMLEntityScanner.java:1793) > at com.sun.org.apache.xerces.internal.impl.XMLEntityScanner.skipSpaces(XMLEntityScanner.java:1538) > at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(XMLDocumentScannerImpl.java:838) > at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:606) > at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:118) > at com.sun.org.apache.xerces.internal.impl.XMLStreamReaderImpl.next(XMLStreamReaderImpl.java:553) > at com.sun.xml.internal.stream.XMLEventReaderImpl.nextEvent(XMLEventReaderImpl.java:83) > at com.sun.xml.internal.stream.XMLEventReaderImpl.next(XMLEventReaderImpl.java:248) > at reactor.core.publisher.FluxIterable$IterableSubscription.fastPath(FluxIterable.java:227) > at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:141) > at reactor.core.publisher.MonoFlatMapMany$FlatMapMain.onSubscribeInner(MonoFlatMapMany.java:139) > at reactor.core.publisher.MonoFlatMapMany$FlatMapInner.onSubscribe(MonoFlatMapMany.java:224) > at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:89) > at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:54) > at reactor.core.publisher.MonoFlatMapMany$FlatMapMain.onNext(MonoFlatMapMany.java:181) > at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:919) > at reactor.core.publisher.MonoReduce$ReduceSubscriber.onComplete(MonoReduce.java:125) > at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130) > at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130) > at reactor.ipc.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:375) > at reactor.ipc.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:198) > at reactor.ipc.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:338) > at reactor.ipc.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:343) > at reactor.ipc.netty.channel.ChannelOperations.onHandlerTerminate(ChannelOperations.java:419) > at reactor.ipc.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:566) > at reactor.ipc.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:125) > at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) > at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) > at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) > at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293) > at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267) > at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) > at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) > at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) > at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:233) > at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) > at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) > at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) > at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1334) > at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) > at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) > at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:926) > at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:134) > at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:624) > at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:559) > at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:476) > at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:438) > at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858) > at java.lang.Thread.run(Thread.java:745)    ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/0681c379f8af3e1aee751bac18918acfe05d22a9, https://github.com/spring-projects/spring-framework-issues/commit/5b236d3f2c44d64a08e61ddc8465eaca17ab79ca","closed","in: core,","spring-projects-issues","2017-06-27T00:44:30Z","2017-07-24T07:51:14Z"
"","20147","Pass input message to HttpMessageNotReadableException for better logging [SPR-15588]","**[Ken Wang](https://jira.spring.io/secure/ViewProfile.jspa?name=khkwang)** opened **[SPR-15588](https://jira.spring.io/browse/SPR-15588?redirect=false)** and commented  It would be useful for us to have access to the input message that threw the HttpMessageNotReadableException so that we could have more detailed logging and return a more specific message to the client.  ---  **Issue Links:** - #21533 Consistent throwing of HttpMessageNotReadableException in HttpMessageConverter implementations - #16425 MVC: which parameter cannot be parsed?  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/83faee67d5b9e4c247d8cec3f151f030a7d00d3d","closed","type: enhancement,","spring-projects-issues","2017-05-25T17:10:58Z","2019-01-11T17:05:07Z"
"","20363","Compatibility with Hibernate Validator 6.0 GA [SPR-15808]","**[Kedar Joshi](https://jira.spring.io/secure/ViewProfile.jspa?name=kedarjoshi)** opened **[SPR-15808](https://jira.spring.io/browse/SPR-15808?redirect=false)** and commented  Hibernate Validator 6.0 CR3 was released few days back and it should go GA very soon, considering only 4 issues are yet to be fixed.  Now should be a good time to assess its compatibility with the upcoming spring version.  ---  **Reference URL:** https://hibernate.atlassian.net/browse/HV-1420?filter=-4&jql=fixVersion%20%3D%206.0.0.Final%20order%20by%20created%20DESC  **Issue Links:** - #20394 SpringValidatorAdapter fails to retrieve value for Bean Validation 2.0's """" literal (_**""depends on""**_) - #20545 Build against EE 8 API level wherever possible (_**""is depended on by""**_) - #18061 Compatibility with Bean Validation 2.0 and JPA 2.2 - #20425 Compatibility with EclipseLink 2.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de09f8ca1f6cc5727e4507c4c5ad65caae649dc0, https://github.com/spring-projects/spring-framework/commit/b122bc6dcc510c22e411df8b57c7be6632ba24d3","closed","type: task,","spring-projects-issues","2017-07-23T09:14:58Z","2019-01-11T17:41:59Z"
"","20131","NoSuchElementException occurs on TCF + JUnit 5 + maven-surefire-plugin [SPR-15572]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-15572](https://jira.spring.io/browse/SPR-15572?redirect=false)** and commented  I've performed test using `@ExtendWith(SpringExtension.class)` on maven-surefire-plugin as follow:  ```java package com.example.spring5testdemo;  import org.junit.jupiter.api.Assertions; import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.ApplicationContext; import org.springframework.context.MessageSource; import org.springframework.context.annotation.Configuration; import org.springframework.test.context.junit.jupiter.SpringExtension;  @ExtendWith(SpringExtension.class) class SpringWithJunit5Test {  	@Autowired private ApplicationContext applicationContext;  	@Test 	void defaultContextTest() { 		Assertions.assertEquals(1, applicationContext.getBeansOfType(MessageSource.class).size()); 	}  	@Configuration 	static class LocalTestContext {}  } ```  ```xml     4.0.0    com.example.spring5testdemo   spring5-test-demo   1.0-SNAPSHOT         1.8     1.8     5.0.0-M4     1.0.0-M4                            org.springframework         spring-framework-bom         5.0.0.RC1         import         pom                               org.springframework       spring-context                 org.springframework       spring-test       test                 org.junit.jupiter       junit-jupiter-api       ${junit-jupiter.version}       test                                 maven-surefire-plugin         2.19.1                                 org.junit.platform             junit-platform-surefire-provider             ${junit-platform.version}                                   org.junit.jupiter             junit-jupiter-engine             ${junit-jupiter.version}                                                   spring-snapshots       Spring Snapshots       https://repo.spring.io/libs-snapshot                true                        spring-milestones       Spring Milestones       https://repo.spring.io/libs-milestone                true                  ```  It is failing by `NoSuchElementException` as follow:  ``` $ mvn test ... -------------------------------------------------------  T E S T S ------------------------------------------------------- Running com.example.spring5testdemo.SimpleJunit5Test Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.063 sec - in com.example.spring5testdemo.SimpleJunit5Test Running com.example.spring5testdemo.SpringWithJunit5Test  Results :  Tests run: 1, Failures: 0, Errors: 0, Skipped: 0  [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.669 s [INFO] Finished at: 2017-05-20T23:35:33+09:00 [INFO] Final Memory: 14M/364M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test (default-test) on project spring5-test-demo: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test failed: java.lang.RuntimeException:  2017 11:35:32 午後 org.springframework.test.context.support.AbstractTestContextBootstrapper buildDefaultMergedntextConfiguration: NoSuchElementException -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException ```  I've tried use a logging library(such as Logback) in my class path. It work fine.  ```xml    ch.qos.logback   logback-classic   1.2.3  ```  I don't understand a root cause for this error. Is required logging library for performing tests on Spring TestContext Framework + maven-surefire-plugin ?  Note: This error does not occurred on IDE(IntelliJ).   ---  **Affects:** 5.0 RC1","closed","in: test,","spring-projects-issues","2017-05-20T14:56:10Z","2019-01-11T17:05:27Z"
"","20117","{*...} pattern does not work on handler method [SPR-15558]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-15558](https://jira.spring.io/browse/SPR-15558?redirect=false)** and commented  I've tried the {*...} pattern on reactive handler method as follow:  Controller  ```java @RestController public class MyController { 	@GetMapping(""/{*paths}"") 	Mono hello(@PathVariable String paths) { 		return Mono.defer(() -> Mono.just(""Hello World !! on "" + paths)); 	} } ```  cURL Command  ``` $ curl -D - http://localhost:8080/a HTTP/1.1 500 Internal Server Error content-length: 0  ```  StackTrace  ``` ... 05:15:08.073 [reactor-http-nio-4] ERROR org.springframework.web.server.adapter.HttpWebHandlerAdapter - Failed to handle request org.springframework.web.util.patterns.PatternParseException: No more pattern data allowed after {*...} pattern element 	at org.springframework.web.util.patterns.InternalPathPatternParser.parse(InternalPathPatternParser.java:157) 	at org.springframework.web.util.patterns.PathPatternParser.parse(PathPatternParser.java:85) 	at org.springframework.web.util.ParsingPathMatcher.getPathPattern(ParsingPathMatcher.java:115) 	at org.springframework.web.util.ParsingPathMatcher.match(ParsingPathMatcher.java:50) 	at org.springframework.web.reactive.result.condition.PatternsRequestCondition.getMatchingPattern(PatternsRequestCondition.java:237) 	at org.springframework.web.reactive.result.condition.PatternsRequestCondition.getMatchingPatterns(PatternsRequestCondition.java:214) 	at org.springframework.web.reactive.result.condition.PatternsRequestCondition.getMatchingCondition(PatternsRequestCondition.java:195) 	at org.springframework.web.reactive.result.method.RequestMappingInfo.getMatchingCondition(RequestMappingInfo.java:219) 	at org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:88) 	at org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:57) 	at org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping.addMatchingMappings(AbstractHandlerMethodMapping.java:339) 	at org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:306) 	at org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:264) 	at org.springframework.web.reactive.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:159) 	at org.springframework.web.reactive.DispatcherHandler.lambda$handle$0(DispatcherHandler.java:126) ... ```  ---  **Affects:** 5.0 RC1  **Issue Links:** - #19868 When using ParsingPathMatcher in MVC user should not have to also explicitly set suffix matching  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2017-05-16T20:23:09Z","2019-01-11T17:07:48Z"
"","20101","BindingResult support for constructor argument mismatch on immutable data object [SPR-15542]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-15542](https://jira.spring.io/browse/SPR-15542?redirect=false)** and commented  I've tried the the request data binding feature for immutable object. It's work fine. However binding error(such as type conversion error) can not handle using the `BindingResult` as follow:  ```java package com.example;  import org.springframework.format.annotation.DateTimeFormat; import org.springframework.validation.BindingResult; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController;  import javax.validation.constraints.NotNull; import java.time.LocalDate;  @RestController public class ImmutableObjectRestController {  	@GetMapping(""/immutable"") 	Query search(@Validated Query query, BindingResult bindingResult) { 		System.out.println(bindingResult); 		return query; 	}  	public static class Query {  		@NotNull private final String name; 		private final String mail; 		private final String tel; 		private final LocalDate baseDate;  		public Query(String name, String mail, String tel, 				@DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate baseDate) { 			this.name = name; 			this.mail = mail; 			this.tel = tel; 			this.baseDate = baseDate; 		}  		public String getName() { 			return name; 		}  		public String getMail() { 			return mail; 		}  		public String getTel() { 			return tel; 		}  		public LocalDate getBaseDate() { 			return baseDate; 		}  	}  } ```  A validation error(e.g. `name` parameter is `null`) can handle above implementation.  ``` $ curl -D - http://localhost:8080/immutable?mail=kazuki43zoo@gmail.com\&tel=09012345678\&baseDate=2017-08-01 ```  print on console as follow:  ``` org.springframework.validation.BeanPropertyBindingResult: 1 errors Field error in object 'query' on field 'name': rejected value [null]; codes [NotNull.query.name,NotNull.name,NotNull.java.lang.String,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [query.name,name]; arguments ```  However a binding error(e.g. `baseDate` parameter is nonexistence date) can not handle above implementation.  ``` $ curl -D - http://localhost:8080/immutable?mail=kazuki43zoo@gmail.com\&tel=09012345678\&baseDate=2017-08-32 HTTP/1.1 400  Content-Type: application/json;charset=UTF-8 Transfer-Encoding: chunked Date: Sun, 14 May 2017 11:20:29 GMT Connection: close  {""timestamp"":""2017-05-14T11:20:29.495+0000"",""status"":400,""error"":""Bad Request"",""message"":""Failed to convert value of type 'java.lang.String[]' to required type 'java.time.LocalDate'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@org.springframework.format.annotation.DateTimeFormat java.time.LocalDate] for value '2017-08-32'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [2017-08-32]"",""path"":""/immutable""} ```  Is specification this behavior ?  ---  **Affects:** 5.0 RC1  **Reference URL:** #19763  **Issue Links:** - #19763 Data binding with immutable objects (Kotlin / Lombok / `@ConstructorProperties`) - #20232 Kotlin class instantiation with optional parameters and default values - #20994 Cannot create BindStatus for valid field on immutable form object in case of bind errors - #20432 Revisit handling of missing fields (without default values) for immutable data classes - #20426 Immutable object constructor arguments not considering WebDataBinder's FIELD_MARKER_PREFIX  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/61cdc842e08f468c8aec9d10a900f3ba087f348e","closed","type: enhancement,","spring-projects-issues","2017-05-14T11:24:37Z","2019-01-14T04:35:22Z"
"","20080","Implements the Ordered interface at ServerResponseResultHandler [SPR-15521]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-15521](https://jira.spring.io/browse/SPR-15521?redirect=false)** and commented  Currently, `ServerResponseResultHandler` not implements the `Ordered` interface. Therefore it cannot control order. I think better that it implements the `Ordered` interface just like any other `HandlerResultHandler` class.  What do you think ?   ---  **Affects:** 5.0 M5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/64c0ec3d5e0fe8a39fee7def55587a19ec5293ed","closed","in: web,","spring-projects-issues","2017-05-05T19:41:31Z","2019-01-11T17:09:43Z"
"","19818","Add convenience setup methods in AbstractRoutingDataSource [SPR-15253]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-15253](https://jira.spring.io/browse/SPR-15253?redirect=false)** and commented  I will add two convenience setup methods in `AbstractRoutingDataSource` as follow:  ```java public void addTargetDataSource(Object lookupKey, DataSource dataSource) { 	if (this.targetDataSources == null) { 		this.targetDataSources = new HashMap(); 	} 	this.targetDataSources.put(lookupKey, dataSource); }  public void addTargetDataSourceName(Object lookupKey, String dataSourceName) { 	if (this.targetDataSources == null) { 		this.targetDataSources = new HashMap(); 	} 	this.targetDataSources.put(lookupKey, dataSourceName); } ```  I will submit a pull request at later.   ---  **Affects:** 4.3.6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1325","closed","type: enhancement,","spring-projects-issues","2017-02-13T23:57:46Z","2017-02-14T07:52:31Z"
"","19677","Add new media types for RFC 7807: Problem Details for HTTP APIs [SPR-15110]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-15110](https://jira.spring.io/browse/SPR-15110?redirect=false)** and commented  I propose to support two media types defined by ""RFC 7807: Problem Details for HTTP APIs"" in `MediaType` class.  * application/problem+json * application/problem+xml  What do you think ? I will submit a pull request at later.   ---  **Reference URL:** https://tools.ietf.org/html/rfc7807#section-6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1288","closed","type: enhancement,","spring-projects-issues","2017-01-08T03:18:17Z","2017-02-23T09:29:11Z"
"","19969","Unable to set Content-Type in error page handler on WebSphere 9 [SPR-15406]","**[Katsuya Hoshi](https://jira.spring.io/secure/ViewProfile.jspa?name=katsuya%20hoshi)** opened **[SPR-15406](https://jira.spring.io/browse/SPR-15406?redirect=false)** and commented  It is set Content-Type to ""application/json"" with produces. But Content-Type was returned as ""text/html"". Built with spring 4.3.5.  Error Page refers [here](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-ann-customer-servlet-container-error-page).  For example, the following controller to execute response.sendError:  ```java @RestController public class ExampleController {    @RequestMapping(value = ""serviceUnavailable"", method = RequestMethod.GET)   public void responseServiceUnavailable(HttpServletResponse response) throws IOException {     response.sendError(503);   } } ```  the following define error-page in web.xml:  ```xml    503   /api/v1/error  ```  the following define the error handler:  ```java @Controller public class ExampleErrorController {    @RequestMapping(path = ""/error"", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)   @ResponseBody   public Map handle(HttpServletRequest request) {      Map map = new HashMap();     map.put(""status"", request.getAttribute(""javax.servlet.error.status_code""));     map.put(""reason"", request.getAttribute(""javax.servlet.error.message""));      return map;   } } ```  Websphere sets ""text/html"" to Context-Type when sendError, It seems HttpEntityMethodProcessor does not allow overwriting.  Below is a part of org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor:  ```java public void handleReturnValue(Object returnValue, MethodParameter returnType,     ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {      if (!entityHeaders.isEmpty()) {        for (Map.Entry entry : entityHeaders.entrySet()) {          if (!outputHeaders.containsKey(entry.getKey())) {            outputHeaders.put(entry.getKey(), entry.getValue());          }     }  ```    ---  **Affects:** 4.3.5  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/153  **Attachments:** - [result.png](https://jira.spring.io/secure/attachment/23829/result.png) (_124.21 kB_)  0 votes, 5 watchers","closed","","spring-projects-issues","2017-04-03T05:32:57Z","2019-01-11T16:44:39Z"
"","20271","Cookie Support for Webflux Functional API [SPR-15715]","**[Jussi Hallila](https://jira.spring.io/secure/ViewProfile.jspa?name=xantier)** opened **[SPR-15715](https://jira.spring.io/browse/SPR-15715?redirect=false)** and commented  Easy way to access cookies seems to be currently supported on annotation based server but still missing from functional API. Could it be possible to add a functionality to easily retrieve cookies from `org.springframework.web.reactive.function.server.ServerRequest`?   ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/930f0f1760ea9169f4f706aa0ba937052260a771","closed","type: enhancement,","spring-projects-issues","2017-06-28T14:24:04Z","2017-07-24T07:51:16Z"
"","20018","Csv HttpMessageConverter [SPR-15457]","**[Julien Bouyoud](https://jira.spring.io/secure/ViewProfile.jspa?name=jbouyoud)** opened **[SPR-15457](https://jira.spring.io/browse/SPR-15457?redirect=false)** and commented  Hi,  I'd like to submit a new HttpMessageConverter in spring-web module wich handle csv format.  Since csv is a schema like format, we needs to define it for each web-ressource. Indeed, you may have multiple endpoints with same input data.  This purpose of this feature is to give to spring needed beans to defines those structured outputs. I also suggest an implementation based on supra-csv library. For now, this implementation support only serialization. As exentention, i think it should be possible to move those schema definition by annotations (but needs more plumber to do this).  If you thinks this feature could be a part of spring-web, i can push a PR with those things.  Regards, Julien   ---  **Reference URL:** https://github.com/jBouyoud/spring-framework/tree/SPR-15457","open","type: enhancement,","spring-projects-issues","2017-04-18T08:43:05Z","2020-02-24T20:45:44Z"
"","19628","Deprecate RxJava 1 in favor of RxJava 2+3  [SPR-15062]","**[Juergen Zimmermann](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.zimmermann)** opened **[SPR-15062](https://jira.spring.io/browse/SPR-15062?redirect=false)** and commented  Dávid Karnok classifies reactive libraries into 0..4 generations at http://akarnokd.blogspot.de/2016/03/operator-fusion-part-1.html. IMHO Project Reactor and RxJava 2 belong to the 4th (and latest) generation while RxJava 1.x belongs to the 2nd generation. https://github.com/ReactiveX/RxJava/tree/2.x shows the development activites for RxJava 2.  ---  **Affects:** 5.0 M3  **Reference URL:** http://akarnokd.blogspot.de/2016/03/operator-fusion-part-1.html  **Issue Links:** - #20056 Upgrade to RxJava 1.3 & 2.1 - #20934 Upgrade to RxJava 2.2","closed","type: task,","spring-projects-issues","2016-12-28T12:50:01Z","2021-09-27T10:39:43Z"
"","19616","IllegalStateException after upgrading aspectjweaver to 1.8.10 [SPR-15050]","**[Juergen Zimmermann](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.zimmermann)** opened **[SPR-15050](https://jira.spring.io/browse/SPR-15050?redirect=false)** and commented  I tried to upgrade aspectjweaver from 1.8.9 to 1.8.10. The compilation was fine. However, when I start my app (based on Spring Boot 1.4.3), I'm getting the following stacktrace:  ``` 16:38:22.000 WARN  [o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext] [main] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'documentationPluginsBootstrapper' defined in URL [jar:file:/C:/ZG/caches/modules-2/files-2.1/io.springfox/springfox-spring-web/2.6.1/6478ed7e49755b652aac907d42a735349056a6a/springfox-spring-web-2.6.1.jar!/springfox/documentation/spring/web/plugins/DocumentationPluginsBootstrapper.class]: Unsatisfied dependency expressed through constructor parameter 1; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'webMvcRequestHandlerProvider' defined in URL [jar:file:/C:/ZG/caches/modules-2/files-2.1/io.springfox/springfox-spring-web/2.6.1/6478ed7e49755b652aac907d42a735349056a6a/springfox-spring-web-2.6.1.jar!/springfox/documentation/spring/web/plugins/WebMvcRequestHandlerProvider.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'requestMappingHandlerMapping' defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Expected raw type form of org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$Match 16:38:22.025 INFO  [o.s.b.a.l.AutoConfigurationReportLoggingInitializer] [main]  Error starting ApplicationContext. To display the auto-configuration report re-run your application with 'debug' enabled. 16:38:22.035 ERROR [o.s.b.SpringApplication] [main] Application startup failed org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'documentationPluginsBootstrapper' defined in URL [jar:file:/C:/ZG/caches/modules-2/files-2.1/io.springfox/springfox-spring-web/2.6.1/6478ed7e49755b652aac907d42a735349056a6a/springfox-spring-web-2.6.1.jar!/springfox/documentation/spring/web/plugins/DocumentationPluginsBootstrapper.class]: Unsatisfied dependency expressed through constructor parameter 1; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'webMvcRequestHandlerProvider' defined in URL [jar:file:/C:/ZG/caches/modules-2/files-2.1/io.springfox/springfox-spring-web/2.6.1/6478ed7e49755b652aac907d42a735349056a6a/springfox-spring-web-2.6.1.jar!/springfox/documentation/spring/web/plugins/WebMvcRequestHandlerProvider.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'requestMappingHandlerMapping' defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Expected raw type form of org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$Match at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:748) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:189) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1160) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1062) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:525) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:744) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:866) ~[spring-context-5.0.0.M3.jar:5.0.0.M3] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:542) ~[spring-context-5.0.0.M3.jar:5.0.0.M3] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761) ~[spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:371) ~[spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ~[spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:111) ~[spring-boot-test-1.4.3.RELEASE.jar:1.4.3.RELEASE] at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) ~[spring-test-5.0.0.M3.jar:5.0.0.M3] at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) ~[spring-test-5.0.0.M3.jar:5.0.0.M3] at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:102) ~[spring-test-5.0.0.M3.jar:5.0.0.M3] at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117) ~[spring-test-5.0.0.M3.jar:5.0.0.M3] at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83) ~[spring-test-5.0.0.M3.jar:5.0.0.M3] at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:44) ~[spring-boot-test-autoconfigure-1.4.3.RELEASE.jar:1.4.3.RELEASE] at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:243) ~[spring-test-5.0.0.M3.jar:5.0.0.M3] at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:96) ~[spring-test-5.0.0.M3.jar:5.0.0.M3] at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$null$1(ClassTestDescriptor.java:196) ~[junit-jupiter-engine-5.0.0-M3.jar:5.0.0-M3] at org.junit.jupiter.engine.descriptor.JupiterTestDescriptor.executeAndMaskThrowable(JupiterTestDescriptor.java:102) ~[junit-jupiter-engine-5.0.0-M3.jar:5.0.0-M3] at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeTestInstancePostProcessors$2(ClassTestDescriptor.java:196) ~[junit-jupiter-engine-5.0.0-M3.jar:5.0.0-M3] at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_112] at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_112] at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374) ~[?:1.8.0_112] at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_112] at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_112] at java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312) ~[?:1.8.0_112] at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:743) ~[?:1.8.0_112] at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580) ~[?:1.8.0_112] at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.invokeTestInstancePostProcessors(ClassTestDescriptor.java:195) ~[junit-jupiter-engine-5.0.0-M3.jar:5.0.0-M3] at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$0(ClassTestDescriptor.java:187) ~[junit-jupiter-engine-5.0.0-M3.jar:5.0.0-M3] at org.junit.jupiter.engine.descriptor.NestedClassTestDescriptor.lambda$testInstanceProvider$1(NestedClassTestDescriptor.java:64) ~[junit-jupiter-engine-5.0.0-M3.jar:5.0.0-M3] at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.prepare(MethodTestDescriptor.java:120) ~[junit-jupiter-engine-5.0.0-M3.jar:5.0.0-M3] at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.prepare(MethodTestDescriptor.java:63) ~[junit-jupiter-engine-5.0.0-M3.jar:5.0.0-M3] at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:59) ~[junit-platform-engine-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$0(HierarchicalTestExecutor.java:87) ~[junit-platform-engine-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:76) ~[junit-platform-engine-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$0(HierarchicalTestExecutor.java:87) ~[junit-platform-engine-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:76) ~[junit-platform-engine-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$0(HierarchicalTestExecutor.java:87) ~[junit-platform-engine-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:76) ~[junit-platform-engine-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) ~[junit-platform-engine-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) ~[junit-platform-engine-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:129) ~[junit-platform-launcher-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85) ~[junit-platform-launcher-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.console.tasks.ExecuteTestsTask.executeTests(ExecuteTestsTask.java:62) ~[junit-platform-console-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.console.tasks.ExecuteTestsTask.lambda$execute$0(ExecuteTestsTask.java:54) ~[junit-platform-console-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.console.tasks.CustomContextClassLoaderExecutor.invoke(CustomContextClassLoaderExecutor.java:33) [junit-platform-console-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.console.tasks.ExecuteTestsTask.execute(ExecuteTestsTask.java:54) [junit-platform-console-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.console.tasks.ConsoleTaskExecutor.executeTask(ConsoleTaskExecutor.java:38) [junit-platform-console-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.console.ConsoleLauncher.execute(ConsoleLauncher.java:54) [junit-platform-console-1.0.0-M3.jar:1.0.0-M3] at org.junit.platform.console.ConsoleLauncher.main(ConsoleLauncher.java:39) [junit-platform-console-1.0.0-M3.jar:1.0.0-M3] Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'webMvcRequestHandlerProvider' defined in URL [jar:file:/C:/ZG/caches/modules-2/files-2.1/io.springfox/springfox-spring-web/2.6.1/6478ed7e49755b652aac907d42a735349056a6a/springfox-spring-web-2.6.1.jar!/springfox/documentation/spring/web/plugins/WebMvcRequestHandlerProvider.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'requestMappingHandlerMapping' defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Expected raw type form of org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$Match at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:748) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:189) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1160) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1062) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:525) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:207) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1279) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1248) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1154) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1079) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1049) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:833) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:740) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] ... 62 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'requestMappingHandlerMapping' defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Expected raw type form of org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$Match at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:575) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:207) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1279) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1248) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1154) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1079) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1049) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:833) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:740) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:189) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1160) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1062) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:525) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:207) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1279) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1248) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1154) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1079) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1049) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:833) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:740) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] ... 62 more Caused by: java.lang.IllegalStateException: Expected raw type form of org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$Match at org.aspectj.weaver.reflect.JavaLangTypeToResolvedTypeConverter.fromType(JavaLangTypeToResolvedTypeConverter.java:71) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.reflect.JavaLangTypeToResolvedTypeConverter.fromTypes(JavaLangTypeToResolvedTypeConverter.java:119) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.reflect.JavaLangTypeToResolvedTypeConverter.fromType(JavaLangTypeToResolvedTypeConverter.java:73) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.reflect.JavaLangTypeToResolvedTypeConverter.fromTypes(JavaLangTypeToResolvedTypeConverter.java:119) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.reflect.Java15GenericSignatureInformationProvider.getGenericParameterTypes(Java15GenericSignatureInformationProvider.java:48) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.getGenericParameterTypes(ReflectionBasedResolvedMemberImpl.java:112) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:791) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:742) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:859) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.ResolvedType$MethodGetterIncludingItds.get(ResolvedType.java:252) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.ResolvedType$MethodGetterIncludingItds.get(ResolvedType.java:250) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.Iterators$4$1.hasNext(Iterators.java:213) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.Iterators$6.hasNext(Iterators.java:288) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.Iterators$4.hasNext(Iterators.java:230) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.ResolvedType.lookupResolvedMember(ResolvedType.java:619) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(JoinPointSignatureIterator.java:192) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(JoinPointSignatureIterator.java:229) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.JoinPointSignatureIterator.hasNext(JoinPointSignatureIterator.java:68) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:317) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:197) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:137) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.patterns.OrPointcut.matchInternal(OrPointcut.java:56) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:137) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.getShadowMatch(PointcutExpressionImpl.java:319) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesExecution(PointcutExpressionImpl.java:129) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesMethodExecution(PointcutExpressionImpl.java:110) ~[aspectjweaver-1.8.10.jar:1.8.10] at org.springframework.aop.aspectj.AspectJExpressionPointcut.getShadowMatch(AspectJExpressionPointcut.java:417) ~[spring-aop-5.0.0.M3.jar:5.0.0.M3] at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:272) ~[spring-aop-5.0.0.M3.jar:5.0.0.M3] at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:241) ~[spring-aop-5.0.0.M3.jar:5.0.0.M3] at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:279) ~[spring-aop-5.0.0.M3.jar:5.0.0.M3] at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:311) ~[spring-aop-5.0.0.M3.jar:5.0.0.M3] at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:118) ~[spring-aop-5.0.0.M3.jar:5.0.0.M3] at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:88) ~[spring-aop-5.0.0.M3.jar:5.0.0.M3] at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:69) ~[spring-aop-5.0.0.M3.jar:5.0.0.M3] at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:347) ~[spring-aop-5.0.0.M3.jar:5.0.0.M3] at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:299) ~[spring-aop-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:421) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1600) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:566) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:207) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1279) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1248) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1154) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1079) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1049) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:833) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:740) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:189) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1160) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1062) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:525) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:207) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1279) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1248) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1154) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1079) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1049) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:833) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:740) ~[spring-beans-5.0.0.M3.jar:5.0.0.M3] ... 62 more}} ```  ---  **Affects:** 5.0 M3  **Issue Links:** - #19586 Pointcut evaluation fails against AbstractHandlerMethodMapping$MappingRegistry with AspectJ 1.8.10 (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2016-12-23T15:54:18Z","2019-01-12T20:20:46Z"
"","20380","Consistent logging in Environment and PropertySource implementations [SPR-15825]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15825](https://jira.spring.io/browse/SPR-15825?redirect=false)** and commented  Classes like `AbstractEnvironment` and `MutablePropertySources` historically accumulated quite a bit of logging (implemented in log messages as well as `toString()` implementations) which turns out to be slightly inconsistent in its formatting of property source names. This is easy enough to overhaul, so let's do this not only for 5.0 but also for 4.3.11.  ---  **Affects:** 4.3.10, 5.0 RC3  **Issue Links:** - #17805 ConcurrentModificationException when doing a merge on AbstractEnvironment - #18943 Revise PropertySourcesPropertyResolver's default logging and customizability - #17034 Concurrent registration/iteration in PropertySourcesPropertyResolver  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/57fbdc0ad5991e206e6fffb076069a7fa4cbf406, https://github.com/spring-projects/spring-framework/commit/fac83b2e7c01c25869f069f9f90e4ca2327de4a4","closed","type: enhancement,","spring-projects-issues","2017-07-27T13:56:17Z","2019-01-11T17:41:45Z"
"","20342","Upgrade to Reactor Bismuth M3 [SPR-15787]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15787](https://jira.spring.io/browse/SPR-15787?redirect=false)** and commented  After being on Reactor snapshots for a while and having adapted to several API changes in the meantime, we need to upgrade to Reactor Bismuth M3 for our 5.0 RC3 release this week.  ---  **Issue Links:** - #20205 Upgrade to Reactor Bismuth M2 - #20108 Upgrade to Reactor 3.1 RC1 (including Reactive Streams 1.0.1)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/704d4c34be07f53d16f9f57854a77a39a98f0182","closed","type: task,","spring-projects-issues","2017-07-18T10:35:56Z","2019-01-11T16:24:43Z"
"","20312","ReflectionTestUtils accidentally requires spring-aop on the classpath [SPR-15757]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15757](https://jira.spring.io/browse/SPR-15757?redirect=false)** and commented  This was uncovered due to our recent move away from required dependencies in `spring-web` in 5.0 but is equally applicable to 4.3.x (where `spring-test` on its own doesn't require `spring-aop` either): https://github.com/spring-projects/spring-restdocs/issues/411  That AOP check should be guarded by a runtime presence check for `spring-aop` and otherwise simply skipped.   ---  **Affects:** 4.3.9, 5.0 RC2  **Reference URL:** https://github.com/spring-projects/spring-restdocs/issues/411","closed","type: bug,","spring-projects-issues","2017-07-10T18:04:48Z","2017-07-20T12:32:59Z"
"","20302","JSP tags doesn't pick up JSTL-defined time zone at page level [SPR-15746]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15746](https://jira.spring.io/browse/SPR-15746?redirect=false)** and commented  A recent pass of our nullability work (#20276) uncovered that `JspAwareRequestContext`, as used by our JSP tag library, detects a JSTL-defined locale at page level but does not pick up a JSTL-defined time zone the same way (just at request or context level). Since this is arguably a bug, we should sort that out for 5.0 as well as 4.3.10.  ---  **Affects:** 4.3.9, 5.0 RC2  **Issue Links:** - #6227 Spring i18n needs TimeZone resolution as well as Locale resolution. - #20276 Extend null-safety to field level  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e138d7d29ff7bf0ae0b42bc287560dc427cff5a7, https://github.com/spring-projects/spring-framework/commit/00f4c36d7a08710f489d1bd901ce0cd9e9ab274d","closed","type: bug,","spring-projects-issues","2017-07-07T16:24:49Z","2019-01-11T16:28:47Z"
"","20293","Upgrade to JUnit 5.0 GA [SPR-15737]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15737](https://jira.spring.io/browse/SPR-15737?redirect=false)** and commented  Following up on #20284, it'd be great to pick up JUnit 5.0 GA for Spring Framework 5.0 GA. According to https://github.com/junit-team/junit5/milestones, the timing should work out towards a September target of ours. No particular changes expected, just an alignment of GA dates.  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20284 Upgrade to JUnit Jupiter 5.0 M5 - #20392 Upgrade to JUnit Jupiter 5.0 RC2 - #20346 Upgrade to JUnit Jupiter 5.0 M6 - #20403 Upgrade to JUnit Jupiter 5.0 RC3 - #20954 Upgrade to JUnit Jupiter 5.2 - #20930 Upgrade to JUnit Jupiter 5.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0867045fc1ec9d73af7a34edb69e18ca771036be, https://github.com/spring-projects/spring-framework/commit/ce0bce28da0254ee86f5a586a35b3e8cf85f5cee","closed","type: task,","spring-projects-issues","2017-07-05T16:44:25Z","2019-01-11T16:11:27Z"
"","20289","Declare spring-context as optional in web, webflux, messaging, jms [SPR-15733]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15733](https://jira.spring.io/browse/SPR-15733?redirect=false)** and commented  `spring-context` is actually not required for web or messaging clients, and not for minimal functional server applications with WebFlux either. Let's consistently declare that dependency as optional so that it doesn't transitively appear in minimal scenarios.  Some existing consumers of `spring-web` and `spring-jms` may have to declare `spring-context` explicitly if needed, which shouldn't be too big a deal.   ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1306bb99826fb8b8473798257a1ce4b42b87871c","closed","type: task,","spring-projects-issues","2017-07-05T08:38:48Z","2017-07-24T07:51:14Z"
"","20276","Extend null-safety to field level [SPR-15720]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15720](https://jira.spring.io/browse/SPR-15720?redirect=false)** and commented  After the measures in #20099, we have consistent `@Nullable` declarations at the method parameter and return type level already. It turns out that `@Nullable` at the field level is an essential companion, avoiding mismatches between methods and the fields that they access.  Also, Eclipse only supports ""full"" nullability through annotations: that is, it doesn't differentiate between parameter level and field level. Extending our `@NonNullApi` / `@Nullable` semantics to the field level makes it easier to set those up for Eclipse as well.  ---  **Affects:** 5.0 RC2  **Issue Links:** - #20099 Introduce null-safety of Spring Framework API - #20461 ExceptionHandlerMethodResolver loses all handler methods - #22124 Exporting a lazily initialized bean (which implements SelfNaming and is annotated with ManagedResource annotation) gives IllegalStateException - #20277 org.apache.tomcat.websocket.WsSession.requestUri can be null - #20302 JSP tags doesn't pick up JSTL-defined time zone at page level - #21087 SpEL : Indexed access within an expression with null variables is no longer a SpelEvaluationException - #20311 Revisit nullability annotations towards GA - #20215 Backport selected refinements from the nullability efforts in 5.0 - #20347 Make getters and setters null-safety consistent  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/46eba3dbfad310bbafbf0a1002a386246288df1c, https://github.com/spring-projects/spring-framework/commit/9fc4fb10b0da0d625dd7dff0bf2bd3e6b42b5684, https://github.com/spring-projects/spring-framework/commit/00f4c36d7a08710f489d1bd901ce0cd9e9ab274d, https://github.com/spring-projects/spring-framework/commit/c292a89b24fbf955fd0eecf00b837212909f0e7e, https://github.com/spring-projects/spring-framework/commit/301e2ea493e218b4d40125ccc0b9ff32797e50ff, https://github.com/spring-projects/spring-framework/commit/cc74a2891a4d2a4c7bcec059f20c35aa80bcf668, https://github.com/spring-projects/spring-framework/commit/57f961e36beaf69951d7e92af5db1f4edae11d93","closed","type: task,","spring-projects-issues","2017-06-29T20:28:38Z","2019-01-11T16:11:46Z"
"","20245","Compatibility with JDK 9 release candidate [SPR-15686]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15686](https://jira.spring.io/browse/SPR-15686?redirect=false)** and commented  A JDK 9 release candidate is supposed to be released on June 22nd: http://openjdk.java.net/projects/jdk9/  ---  **Affects:** 5.0 RC2  **Issue Links:** - #19713 Upgrade to CGLIB 3.2.5 (_**""depends on""**_) - #18941 Compatibility with JDK 9 GA (_**""is depended on by""**_) - #19211 Out-of-the-box build compatibility with JDK 9 build 136 - #20226 Upgrade to Gradle 4.1 for clean JDK 9 build compatibility","closed","type: task,","spring-projects-issues","2017-06-20T19:54:07Z","2019-01-11T16:03:41Z"
"","20243","Fine-tune HTTP/RMI Invoker exception handling [SPR-15684]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15684](https://jira.spring.io/browse/SPR-15684?redirect=false)** and commented  `RemoteInvocationSerializingExporter` has a few flaws in its exception handling: `getProxy()` should throw an `IllegalStateException` instead of `IllegalArgumentException` and avoid building its normally unused exception message upfront. Furthermore, `doReadRemoteInvocation` should include descriptive type information for a non-matching invocation object (and analogously in `AbstractHttpInvokerRequestExecutor.doReadRemoteInvocationResult` for the result object).   --- No further details from [SPR-15684](https://jira.spring.io/browse/SPR-15684?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-06-20T11:31:58Z","2017-07-20T12:32:59Z"
"","20226","Upgrade to Gradle 4.1 for clean JDK 9 build compatibility [SPR-15667]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15667](https://jira.spring.io/browse/SPR-15667?redirect=false)** and commented  Gradle 4.1 (currently at M1) is the first Gradle generation to provide official JDK 9 support. Even if Gradle 3.5 and 4.0 work on JDK 9 build 175+ as well, we do want a warning-free experience there eventually.  ---  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/9516  **Issue Links:** - #18289 Stable module names for Spring Framework jars on JDK 9 module path - #19083 Upgrade to ASM 6.0 - #20245 Compatibility with JDK 9 release candidate - #19946 Upgrade to Gradle 3.5 - #20417 Fix Eclipse support in Gradle build - #20535 Upgrade to Gradle 4.2(.1)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/48f95e9b969c3bfa40b90f6eb1a70fcc07be906f","closed","type: task,","spring-projects-issues","2017-06-14T19:44:55Z","2019-01-11T16:06:56Z"
"","20215","Backport selected refinements from the nullability efforts in 5.0 [SPR-15656]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15656](https://jira.spring.io/browse/SPR-15656?redirect=false)** and commented  The efforts around #20099 and #20276 have uncovered minor issues like missing `null` handling and/or missing assertions in quite a few places. Let's selectively backport some of those refinements to 4.3.x along with 5.0 GA.  ---  **Affects:** 4.3.9  **Issue Links:** - #20099 Introduce null-safety of Spring Framework API - #20276 Extend null-safety to field level - #20671 SpelExpression throws NullPointerException instead of EvaluationException for primitives - #20624 setArguments(null) on MethodInvoker no longer coerces null to Object[0]  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/75bd5162514a3e3f21d53f16a5835e61779b7bb7, https://github.com/spring-projects/spring-framework/commit/cc70fdcbebfeeb4eaa14979b59eee8cddf9336b8, https://github.com/spring-projects/spring-framework/commit/9fdc4404a5338c687776dc2d3066dc6b0281d1ed","closed","type: task,","spring-projects-issues","2017-06-13T14:39:32Z","2019-01-11T16:07:53Z"
"","20149","Use Apache Johnzon 1.1 for JSON-B integration tests [SPR-15590]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15590](https://jira.spring.io/browse/SPR-15590?redirect=false)** and commented  Apache Johnzon 1.1 is GA now. Let's include it in our build for `JsonbHttpMessageConverterTests`.  ---  **Affects:** 5.0 RC1  **Issue Links:** - #19490 Support for JSON Binding API (JSON-B) (_**""depends on""**_) - #20545 Build against EE 8 API level wherever possible (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f0198f375601a1ca670654f8dba181ac7f05f1b9, https://github.com/spring-projects/spring-framework/commit/e7b41bc30a4db84bdaad719dd12b0a162231e5bf, https://github.com/spring-projects/spring-framework/commit/f43ea96dd99e5528bd6f76cfed91ee1295e07ca6","closed","type: task,","spring-projects-issues","2017-05-25T21:24:53Z","2019-01-11T17:03:26Z"
"","20135","Revisit java.util.Optional declarations in reactive API signatures [SPR-15576]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15576](https://jira.spring.io/browse/SPR-15576?redirect=false)** and commented  Our reactive web utilities and in particular core WebFlux APIs tend to use `java.util.Optional` in their API declarations, in particular for optional return values. `Optional` usage is highly debatable in general but, as we learned now, in particular not really idiomatic in Kotlin.  Let's revisit this for 5.0 RC2, reducing `Optional` usage to actual stream-like API purposes.  ---  **Affects:** 5.0 RC1  **Issue Links:** - #20099 Introduce null-safety of Spring Framework API  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3f32f72bfcd0540eb82f0ff9ed0a07a16cb53696, https://github.com/spring-projects/spring-framework/commit/db69a082d9449ecb13f615316a382c100cab1f23","closed","type: task,","spring-projects-issues","2017-05-23T09:35:01Z","2019-01-11T17:05:47Z"
"","20120","LocalValidatorFactoryBean does not support unwrap for native ValidatorFactory [SPR-15561]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15561](https://jira.spring.io/browse/SPR-15561?redirect=false)** and commented  While `SpringValidatorAdapter` properly supports `unwrap` calls for the native JSR-303 `Validator`, its subclass `LocalValidatorFactoryBean` does not support `unwrap` for the native JSR-303 `ValidatorFactory` but rather just inherits the `Validator`-level support.  This needs to be revised towards proper `ValidatorFactory` unwrapping, in particular for `getClockProvider()` access on BV 2.0 and also `getParameterNameProvider()` access on BV 1.1.  ---  **Issue Links:** - #18061 Compatibility with Bean Validation 2.0 and JPA 2.2 (_**""is depended on by""**_) - #20188 AbstractMethodError when calling validated method of MethodValidationPostProcessor is using a `@Lazy` validator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cb3d1befcd3f057c215ce206740ce616c20e041e, https://github.com/spring-projects/spring-framework/commit/ac25db6d2bdf32130ae7aee857d2d965dc4f40c9","closed","in: core,","spring-projects-issues","2017-05-18T18:18:33Z","2019-01-13T05:16:08Z"
"","20108","Upgrade to Reactor 3.1 RC1 (including Reactive Streams 1.0.1) [SPR-15549]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15549](https://jira.spring.io/browse/SPR-15549?redirect=false)** and commented  https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.1-RC1/RELEASE-NOTES.md  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20239 RequestContextHolder for Reactive Web - #19881 Upgrade to Reactor Core 3.1 Milestone - #20205 Upgrade to Reactor Bismuth M2 - #20342 Upgrade to Reactor Bismuth M3 - #20556 Upgrade to Reactor Bismuth-RELEASE - #20931 Upgrade to Reactor Core 3.1.3 (including Reactive Streams 1.0.2)","closed","type: task,","spring-projects-issues","2017-05-15T15:25:25Z","2019-01-11T17:08:32Z"
"","20107","Upgrade to Jackson 2.9 GA [SPR-15548]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15548](https://jira.spring.io/browse/SPR-15548?redirect=false)** and commented  ---  **Affects:** 5.0 RC3  **Issue Links:** - #19492 Support for Jackson 2.9 - #19097 Leverage Jackson non-blocking JSON parsing (and remove netty-buffer dependency)  0 votes, 6 watchers","closed","type: task,","spring-projects-issues","2017-05-15T15:24:05Z","2019-01-11T17:08:45Z"
"","20075","Revisit CodecException vs ResponseStatusException in DecoderHttpMessageReader [SPR-15516]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15516](https://jira.spring.io/browse/SPR-15516?redirect=false)** and commented  `DecoderHttpMessageWriter` as well as `EncoderHttpMessageReader` in `http.codec` use  `ResponseStatusException` which lives in `web.server`, creating a cyclic package dependency.  We should be throwing a different exception to indicate ""bad request"" there, e.g. a `DecodingException` subclass of `CodecException`, to be eventually translated to HTTP status 400 in `AbstractMessageReaderArgumentResolver`.  ---  **Affects:** 5.0 RC1  **Issue Links:** - #18170 HttpMessageConverterExtractor should wrap HttpMessageNotReadableException in RestClientExceptions - #19918 Return 5xx/4xx status code and print the reason in logs for CodecException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4fdd85324d8f10c7dc851c0ad21ac50f48ae18ef, https://github.com/spring-projects/spring-framework/commit/4d962a1793c3bf0c47b526e02b58d72e2817ad93, https://github.com/spring-projects/spring-framework/commit/83e0e1604a98b20a5fec3754a52101ac3cd3de60","closed","type: task,","spring-projects-issues","2017-05-04T21:40:50Z","2019-01-11T17:10:23Z"
"","20072","Revisit storage of null attributes in AbstractFallbackTransaction/CacheAttributeSource [SPR-15513]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15513](https://jira.spring.io/browse/SPR-15513?redirect=false)** and commented  `AbstractFallbackTransactionAttributeSource` and `AbstractFallbackCacheOperationSource` add a 'null' entry to their attribute cache for every non-annotated method... even for every method of a totally non-annotated class. This is worth improving towards a class-level ""not annotated"" marker.  ---  **Affects:** 5.0 RC1  **Issue Links:** - #18894 CGLIB proxies should still consider `@Transactional` annotations on interface methods","open","type: enhancement,","spring-projects-issues","2017-05-04T07:42:36Z","2019-01-13T05:16:21Z"
"","20069","Common root cause introspection algorithm in NestedExceptionUtils [SPR-15510]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15510](https://jira.spring.io/browse/SPR-15510?redirect=false)** and commented  `AbstractSockJsSession` currently uses a dummy `NestedCheckedException` just for access to root cause introspection. Let's extract that algorithm to `NestedExceptionUtils` and make it applicable to any `Throwable` directly.  We have the same need in `HttpWebHandlerAdapter`, so it's particularly important in 5.0 but also worth backporting the `AbstractSockJsSession` part to 4.3.9.  ---  **Affects:** 4.3.8  **Issue Links:** - #20065 Improve 500 error handling and reporting in WebFlux  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9d8e9cf24372bfe1aae8b93f23c41e19ee7a3483, https://github.com/spring-projects/spring-framework/commit/2d1b55124827f7984627df22827b64ca249cdf64","closed","in: core,","spring-projects-issues","2017-05-03T09:09:36Z","2019-01-11T17:10:17Z"
"","20056","Upgrade to RxJava 1.3 & 2.1 [SPR-15497]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15497](https://jira.spring.io/browse/SPR-15497?redirect=false)** and commented  RxJava 2.1 went GA a few days ago, and now there's RxJava 1.3 GA out just in time. Let's upgrade to those for our 5.0 RC1 right away, along with Reactor 3.1.  ---  **Issue Links:** - #19195 Support for RxJava 2 - #19628 Deprecate RxJava 1 in favor of RxJava 2 - #19881 Upgrade to Reactor Core 3.1 Milestone - #20934 Upgrade to RxJava 2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6dcf2e3c5b340acbda7cd69f800974039ce64bc0, https://github.com/spring-projects/spring-framework/commit/12a95d8c689e35f180fff59efa6d08d3e7a9f7c8, https://github.com/spring-projects/spring-framework/commit/1083fe6f3fd30a8cacead6a958c727bae8ee2d16","closed","type: task,","spring-projects-issues","2017-04-30T10:45:40Z","2019-01-11T16:36:10Z"
"","19997","Revisit CGLIB AOP proxy warnings for final methods [SPR-15436]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15436](https://jira.spring.io/browse/SPR-15436?redirect=false)** and commented  The change triggered by #16241 led to a downgrade of the log category for non-interceptible `final` methods from WARN to INFO, aligned with the then-new log messages for non-interceptible package-visible methods. However, `public final` methods which happen to implement methods in a service interface remain a serious problem for CGLIB proxy generation: We should either log those specific messages on WARN again or reject such target classes upfront.  ---  **Issue Links:** - #19917 Clarification: Spring AOP pointcuts match protected methods when CGLIB is used - #16241 CglibAopProxy needs to detect package-visible methods when defined in a different ClassLoader  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/665e6cf6ca883e4871f11fe44f2ac4a0152285d6, https://github.com/spring-projects/spring-framework/commit/43e806c7333e09419c6db3ada28aeb0960299e70, https://github.com/spring-projects/spring-framework/commit/9b2f9e655e2f2e086ae4319195acdde8c1c63fa4, https://github.com/spring-projects/spring-framework/commit/0d0b879a2313b73bf85abfe45ff0a59897aa6a3e","closed","in: core,","spring-projects-issues","2017-04-11T14:17:13Z","2019-01-11T16:42:13Z"
"","19994","UnknownHostException not accepted as ""resource not found"" anymore [SPR-15433]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15433](https://jira.spring.io/browse/SPR-15433?redirect=false)** and commented  The changes behind #19783 led to a narrowing of a `catch` scope in `PropertiesLoaderSupport`. This needs to be revisited since just treating `FileNotFoundException` here is unfortunately not sufficient. In particular, `UnknownHostException` bubbles through now:  ``` Caused by: java.net.UnknownHostException: ${SOME_PROPERTIES} at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:184) at java.net.Socket.connect(Socket.java:589) at java.net.Socket.connect(Socket.java:538) at sun.net.ftp.impl.FtpClient.doConnect(FtpClient.java:957) at sun.net.ftp.impl.FtpClient.tryConnect(FtpClient.java:917) at sun.net.ftp.impl.FtpClient.connect(FtpClient.java:1012) at sun.net.ftp.impl.FtpClient.connect(FtpClient.java:998) at sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:294) at sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:393) at org.springframework.core.io.UrlResource.getInputStream(UrlResource.java:169) at org.springframework.core.io.support.EncodedResource.getInputStream(EncodedResource.java:154) at org.springframework.core.io.support.PropertiesLoaderUtils.fillProperties(PropertiesLoaderUtils.java:98) at org.springframework.core.io.support.PropertiesLoaderSupport.loadProperties(PropertiesLoaderSupport.java:176) at org.springframework.core.io.support.PropertiesLoaderSupport.mergeProperties(PropertiesLoaderSupport.java:157) at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:80) ... 28 more ```  ---  **Affects:** 4.3.7  **Issue Links:** - #19974 UrlResource getFilename should not contain query parameters - #19783 Log failures to load PropertySources when ignoreResourceNotFound = true","closed","in: core,","spring-projects-issues","2017-04-11T08:31:09Z","2019-01-11T16:42:19Z"
"","19987","Revise AcceptHeaderLocaleResolver default locale handling [SPR-15426]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15426](https://jira.spring.io/browse/SPR-15426?redirect=false)** and commented  As pointed out against #18884, `AcceptHeaderLocaleResolver`'s default locale currently only kicks in if no `Accept-Language` header has been specified. It should also kick in if no supported locale is found in a given header, aligning with #17915.  ---  **Affects:** 4.3.7  **Issue Links:** - #17915 Flexible locale resolution based on supported languages - #18884 AcceptHeaderLocaleResolver should allow to define a default Locale - #21043 Invalid/missing locale strings in header prevents resolving the locale - #21002 AcceptHeaderLocaleResolver should match country locales against supported language locales - #20011 Make SessionLocaleResolver's attribute name configurable  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3d199f4ddd61ea5df5a8c226fa22624bc554455, https://github.com/spring-projects/spring-framework/commit/ea98ee820a34ffcf4cad744ed00a0b921b026363","closed","type: enhancement,","spring-projects-issues","2017-04-10T10:23:15Z","2019-01-11T16:43:31Z"
"","19970","Compatibility with Groovy 2.5 [SPR-15407]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15407](https://jira.spring.io/browse/SPR-15407?redirect=false)** and commented  Groovy 2.5 alpha 1 is out now... might enter the beta stage in time for our 5.0 GA.  ---  **Issue Links:** - #17177 Compatibility with Groovy 2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0092653d42f61107b81ca41a1b8470f2fe433927, https://github.com/spring-projects/spring-framework/commit/ce002b450ab077eaaac701bc85a00e6a40d4fac9, https://github.com/spring-projects/spring-framework/commit/b3b233b43afb12154ce38007a6a24ff55e1a6b52, https://github.com/spring-projects/spring-framework/commit/018cc454832ae52275b7b8b98f9a6a8730310974","closed","in: core,","spring-projects-issues","2017-04-03T12:27:57Z","2019-01-11T16:44:41Z"
"","19950","Minimize reflective interaction with annotation instances during retrieval [SPR-15387]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15387](https://jira.spring.io/browse/SPR-15387?redirect=false)** and commented  Method invocations on `Annotation` instances can be rather costly since they are implemented through dynamic proxies at runtime. Let's optimize our processing code accordingly.  ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1318  **Issue Links:** - #19792 Avoid re-retrieval of `@ResponseStatus` annotation for each request  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3037277d0ed225895fe28e90e1ca3e7436c4c306, https://github.com/spring-projects/spring-framework/commit/8b054840fcdf2fb46a4ce8909db42242190961d2","closed","type: enhancement,","spring-projects-issues","2017-03-27T14:33:59Z","2019-01-13T05:16:44Z"
"","19946","Upgrade to Gradle 3.5 [SPR-15383]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15383](https://jira.spring.io/browse/SPR-15383?redirect=false)** and commented  Gradle 3.5 RC1 is available already; GA likely in time for our 5.0 RC1 in late April.  ---  **Issue Links:** - #19771 Upgrade to Gradle 3.4 - #20226 Upgrade to Gradle 4.1 for clean JDK 9 build compatibility  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f5fe3f0f97f0e578101ba1484539824dc123b661","closed","type: task,","spring-projects-issues","2017-03-27T10:01:00Z","2019-01-11T14:41:58Z"
"","19944","Revise generic type handling in GsonHttpMessageConverter [SPR-15381]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15381](https://jira.spring.io/browse/SPR-15381?redirect=false)** and commented  In the course of #19490, it turns out that `GsonHttpMessageConverter` should be sharing `AbstractJackson2HttpMessageConverter`'s recently revised generic type handling, also shared by the new `JsonbHttpMessageConverter`.  The full extent of this is only really feasible in 5.0, but in particular deprecations of `getTypeToken` and co should be backported to 4.3.8 as well.  ---  **Issue Links:** - #21416 Subclass-resolved generic return type declarations for handler methods (_**""is duplicated by""**_) - #19490 Support for JSON Binding API (JSON-B) - #18301 Revise AbstractJackson2HttpMessageConverter's generic type adaptation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3c8fc46568d0f5186c9cfb8a34d31f0de0231d0f, https://github.com/spring-projects/spring-framework/commit/e5fdd4cd1de76303842e47646213054d25242f4f","closed","type: task,","spring-projects-issues","2017-03-26T10:47:56Z","2019-01-11T14:42:06Z"
"","19942","Compatibility with Servlet 4.0 final draft [SPR-15379]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15379](https://jira.spring.io/browse/SPR-15379?redirect=false)** and commented  Following up on #17273, aside from a few new `MockServletContext` accessors which we're supporting already, there's also a planned renaming from `HttpServletRequest.getPushBuilder` to `newPushBuilder`. For our 5.0 RC1, we need to make sure to comply with the latest API draft there, hopefully the final draft by then.  ---  **Affects:** 5.0 M5  **Issue Links:** - #17273 Support for Servlet 4.0 API - #19883 Make use of Servlet 4.0 mapping introspection when available - #20434 Upgrade to Servlet API 4.0 for MVC (PushBuilder and Servlet mocks)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f29ffb37f71e09bc1ec98633a87b49875b611f8b","closed","type: task,","spring-projects-issues","2017-03-24T16:54:04Z","2019-01-11T15:01:15Z"
"","19924","Upgrade to JUnit 5.0 M4 [SPR-15361]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15361](https://jira.spring.io/browse/SPR-15361?redirect=false)** and commented  https://github.com/junit-team/junit5/milestone/7  ---  **Issue Links:** - #18151 Introduce support for JUnit 5 in the TestContext framework - #19491 Upgrade to JUnit 5.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ce21fa41524ce5a8914d9cfc142a48b98ab15cc8","closed","type: task,","spring-projects-issues","2017-03-20T13:15:59Z","2019-01-11T15:01:49Z"
"","19885","JRubyScriptFactory compatibility with JRuby 9.1.7+ [SPR-15322]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15322](https://jira.spring.io/browse/SPR-15322?redirect=false)** and commented  As raised in https://github.com/spring-projects/spring-framework/pull/1344, `JRubyScriptFactory` tries to access the `RubyException` message field directly. It should defensively use `getMessage()` for compatibility with JRuby 9.1.7+, even if our native JRuby support is deprecated already (#17873) and even if JRuby 9000 is officially only supported via JSR-223.  ---  **Affects:** 4.3.7  **Issue Links:** - #17873 Deprecate native JRuby support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e58b17a3a1c3d815645af0421221368afcbd6757","closed","type: enhancement,","spring-projects-issues","2017-03-07T08:26:15Z","2019-01-11T15:07:30Z"
"","19883","Make use of Servlet 4.0 mapping introspection when available [SPR-15320]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15320](https://jira.spring.io/browse/SPR-15320?redirect=false)** and commented  Servlet 4.0 b03 is available now, introducing support for `HttpServletRequest.getServletMapping()`. As discussed, let's research what we can transparently infer from this when available at runtime, as an alternative to ""guessing"" about Servlet-level URL mappings in `UrlPathHelper`. If there isn't any distinct advantage, we can also keep our path-based code as it is, but we should make up our mind in time for 5.0 RC1 here.  ---  **Issue Links:** - #17273 Support for Servlet 4.0 API - #19942 Compatibility with Servlet 4.0 final draft - #20434 Upgrade to Servlet API 4.0 for MVC (PushBuilder and Servlet mocks)","closed","status: superseded,","spring-projects-issues","2017-03-06T20:49:29Z","2020-06-26T07:40:03Z"
"","19882","Support for HtmlUnit 2.25+ [SPR-15319]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15319](https://jira.spring.io/browse/SPR-15319?redirect=false)** and commented  HtmlUnit 2.25 changed its `WebRequest.getCharset()` method to return a `Charset` instead of a `String`, breaking binary compatibility with our `HtmlUnitRequestBuilder`.  As of 5.0 RC1, we can simply require HtmlUnit 2.25+ and use the new signature accordingly. In 4.3.8, we can reflectively tolerate both signatures.  ---  **Issue Links:** - #19604 Revisit dependency baseline: Jetty 9.4+, OkHttp 3+  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9de97614a0ae24c95abc86ebeacec23a53de37c9, https://github.com/spring-projects/spring-framework/commit/e61e8d5062de28dee0c57707a1f478f2ce96aa53","closed","type: enhancement,","spring-projects-issues","2017-03-06T16:14:34Z","2019-01-11T15:09:22Z"
"","19880","Up-to-date guidelines for serialization-based endpoints [SPR-15317]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15317](https://jira.spring.io/browse/SPR-15317?redirect=false)** and commented  Over the past few years, several incidents were related to exposing serialization-based endpoints to untrusted clients. We need to update our guidelines accordingly, in particular for the HTTP Invoker mechanism. While we generally recommend against Java serialization for external remoting purposes, there are some recent efforts that allow for controlled exposure there, in particular the serialization filter that recently got introduced at JDK level (https://blogs.oracle.com/java-platform-group/entry/incoming_filter_serialization_data_a).   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2236262fc67996b3cde59703e70a76d0e5a6cf2e, https://github.com/spring-projects/spring-framework/commit/c4fda0e811e3f6472c64175c0b1e53b1fbff9a38","closed","type: task,","spring-projects-issues","2017-03-06T10:30:46Z","2017-04-18T15:43:20Z"
"","19861","Skip transaction/caching metadata retrieval for java.lang.Object methods [SPR-15296]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15296](https://jira.spring.io/browse/SPR-15296?redirect=false)** and commented  Our `AbstractFallbackTransactionAttributeSource` / `AbstractFallbackCacheOperationSource` always goes through the entire metadata retrieval phase for any method it encounters, building a cache key, checking the cache etc, and caching `null` placeholders for no annotation found. This is a waste for methods on `java.lang.Object`, both efficiency-wise and in terms of holding cache entries for those. Let's back out immediately for those methods, not even creating a cache key.   ---  **Affects:** 4.3.6, 5.0 M5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d4a1b59b4c02852432814f467bce857bd9f799e6, https://github.com/spring-projects/spring-framework/commit/d69fb06852a8594db1338dc92799e857e0cc7bc8","closed","type: enhancement,","spring-projects-issues","2017-02-28T10:34:29Z","2017-03-01T09:55:13Z"
"","19835","Spring MVC support for JSON parsing/streaming APIs (JSON Processing API, Gson, Jackson) [SPR-15270]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15270](https://jira.spring.io/browse/SPR-15270?redirect=false)** and commented  Along with support for the JSON Binding API (#19490) in the form of a Jackson-style conversion for payload objects, let's also consider direct support for the underlying JSON Processing API (https://json-processing-spec.java.net/).  We could accept a `JsonObject`/`JsonArray` method argument as request payload and convert a corresponding return value to a response payload, using `JsonReader`/`JsonWriter` underneath the covers. This would allow handler method implementations to programmatically introspect an incoming JSON payload structure and use a `JsonObjectBuilder`/`JsonArrayBuilder` to programmatically build a response payload.  Beyond that, we could also allow for retrieving `JsonParser`/`JsonGenerator` handles for the JSON-P streaming API: both as handler method arguments, but referring to the request payload (not fully parsed yet) and the upcoming response payload (to be built in a streaming fashion), respectively. This would be equivalent to our current support for declaring a `Reader`/`Writer` for direct request/response payload access.  ---  **Issue Links:** - #19490 Support for JSON Binding API (JSON-B)","open","type: enhancement,","spring-projects-issues","2017-02-20T09:52:54Z","2019-01-30T15:26:53Z"
"","19823","Consistently support CompletionStage next to CompletableFuture [SPR-15258]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15258](https://jira.spring.io/browse/SPR-15258?redirect=false)** and commented  As of 4.2, we're supporting `CompletableFuture` for MVC handler methods and message handler methods, but its sibling `CompletionStage` only for MVC handler methods. Let's fix this gap for 4.3.7, supporting `CompletionStage` return types there as well, and document that support for both kinds of handler methods.  ---  **Affects:** 4.3.6  **Issue Links:** - #16821 Support CompletableFuture as return value in `@MessageMapping` handlers - #17198 Support CompletableFuture as alternative to DeferredResult in MVC - #19964 Async annotation should allow for non-blocking execution with CompletableFuture","closed","type: enhancement,","spring-projects-issues","2017-02-15T21:01:16Z","2019-01-13T05:17:14Z"
"","19780","MockHttpServletRequest.getReader() returns null in case of no content [SPR-15215]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15215](https://jira.spring.io/browse/SPR-15215?redirect=false)** and commented  After the `MockHttpServletRequest` revision in #16386, `getInputStream()` returns an empty stream in case of no content... but `getReader()` still returns `null` in such a case. Let's fix this for 4.3.7, along with #19779.  ---  **Affects:** 4.3.6  **Issue Links:** - #19779 Principal check in ServletRequestMethodArgumentResolver can result in type mismatches - #16386 MockHttpServletRequest should not require setContent for non-null getInputStream() result - #19797 MockHttpServletRequest.protocol default should be ""HTTP/1.1"", not ""http""","closed","type: bug,","spring-projects-issues","2017-02-01T22:24:10Z","2019-01-11T14:34:24Z"
"","19771","Upgrade to Gradle 3.4 [SPR-15207]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15207](https://jira.spring.io/browse/SPR-15207?redirect=false)** and commented  Gradle 3.4 RC1 is out. Unfortunately, it seems to be unable to resolve the Reactor BOM:  ``` Could not resolve all dependencies for configuration ':testCompileClasspath'. > Could not find io.projectreactor:reactor-core:.   Searched in the following locations:       http://dl.bintray.com/kotlin/kotlin-eap-1.1/io/projectreactor/reactor-core//reactor-core-.pom       http://dl.bintray.com/kotlin/kotlin-eap-1.1/io/projectreactor/reactor-core//reactor-core-.jar       https://repo.spring.io/libs-release/io/projectreactor/reactor-core//reactor-core-.pom       https://repo.spring.io/libs-release/io/projectreactor/reactor-core//reactor-core-.jar       https://repo.spring.io/milestone/io/projectreactor/reactor-core//reactor-core-.pom       https://repo.spring.io/milestone/io/projectreactor/reactor-core//reactor-core-.jar       https://repo.spring.io/libs-snapshot/io/projectreactor/reactor-core//reactor-core-.pom       https://repo.spring.io/libs-snapshot/io/projectreactor/reactor-core//reactor-core-.jar       https://jcenter.bintray.com/io/projectreactor/reactor-core//reactor-core-.pom       https://jcenter.bintray.com/io/projectreactor/reactor-core//reactor-core-.jar   Required by:       project : > project :spring-core       project : > project :spring-test       project : > project :spring-web       project : > project :spring-test > project :spring-websocket > project :spring-messaging > Could not find io.projectreactor.ipc:reactor-netty:.   Searched in the following locations:       http://dl.bintray.com/kotlin/kotlin-eap-1.1/io/projectreactor/ipc/reactor-netty//reactor-netty-.pom       http://dl.bintray.com/kotlin/kotlin-eap-1.1/io/projectreactor/ipc/reactor-netty//reactor-netty-.jar       https://repo.spring.io/libs-release/io/projectreactor/ipc/reactor-netty//reactor-netty-.pom       https://repo.spring.io/libs-release/io/projectreactor/ipc/reactor-netty//reactor-netty-.jar       https://repo.spring.io/milestone/io/projectreactor/ipc/reactor-netty//reactor-netty-.pom       https://repo.spring.io/milestone/io/projectreactor/ipc/reactor-netty//reactor-netty-.jar       https://repo.spring.io/libs-snapshot/io/projectreactor/ipc/reactor-netty//reactor-netty-.pom       https://repo.spring.io/libs-snapshot/io/projectreactor/ipc/reactor-netty//reactor-netty-.jar       https://jcenter.bintray.com/io/projectreactor/ipc/reactor-netty//reactor-netty-.pom       https://jcenter.bintray.com/io/projectreactor/ipc/reactor-netty//reactor-netty-.jar   Required by:       project : > project :spring-web       project : > project :spring-test > project :spring-websocket > project :spring-messaging ```  ---  **Issue Links:** - #19704 Upgrade to Gradle 3.3 - #19946 Upgrade to Gradle 3.5","closed","type: task,","spring-projects-issues","2017-01-30T16:11:05Z","2019-01-11T14:35:59Z"
"","19767","Avoid deprecated Reactor Operators call in AbstractListenerReadPublisher [SPR-15203]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15203](https://jira.spring.io/browse/SPR-15203?redirect=false)** and commented  In the latest Reactor 3.0.5 snapshot, `addAndGet(AtomicLong, long)` is deprecated in favor of `addAndGet(AtomicLongFieldUpdater updater, T instance, long n)`. We need to revise our `AbstractListenerReadPublisher` accordingly.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cd476832cc23e9b52b7d3d7d194ff9e33b734224","closed","type: task,","spring-projects-issues","2017-01-29T17:46:19Z","2017-02-23T09:29:13Z"
"","19725","Remove outdated abstractions/delegates from org.springframework.core/util [SPR-15159]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15159](https://jira.spring.io/browse/SPR-15159?redirect=false)** and commented  `ControlFlowFactory`, `ErrorCoded`, `WeakReferenceMonitor`...  ---  **Issue Links:** - #19720 Drop outdated BeanFactoryLocator / beanRefContext.xml mechanism","closed","in: core,","spring-projects-issues","2017-01-18T09:45:42Z","2019-01-11T15:30:52Z"
"","19720","Drop outdated BeanFactoryLocator / beanRefContext.xml mechanism [SPR-15154]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15154](https://jira.spring.io/browse/SPR-15154?redirect=false)** and commented  The `BeanFactoryLocator`  facility and its `beanRefContext.xml`-based default variant are outdated mechanisms for locating a statically shared `ApplicationContext`, only really useful for old-school EAR deployment layouts prior to EJB 3.1. While it still makes sense for this to be available in the 4.3.x line with its EJB 3.0 support, let's get rid of the entire mechanism for Spring 5 with its EE 7 baseline.  This means that existing users of `SpringBeanAutowiringInterceptor` on custom EJB classes need to migrate either away from EJB altogether, or to an EJB 3.1 + CDI layer with a CDI-Spring bridge, or to a custom interceptor variant which locates the Spring `ApplicationContext` from an application-specific holder, e.g. an EJB 3.1 Singleton Bean or a simple static variable in an application class.  ---  **Issue Links:** - #19234 Drop NativeJdbcExtractor mechanism in favor of java.sql.Connection.unwrap() - #19725 Remove outdated abstractions/delegates from org.springframework.core/util","closed","in: core,","spring-projects-issues","2017-01-17T12:28:23Z","2022-03-07T08:19:24Z"
"","19719","Reference documentation for Groovy bean definition DSL [SPR-15153]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15153](https://jira.spring.io/browse/SPR-15153?redirect=false)** and commented  We're explicitly covering the Groovy Bean Definition DSL in the testing chapter but not in the core beans chapter yet.  ---  **Issue Links:** - #19615 Document functional configuration style","closed","in: core,","spring-projects-issues","2017-01-17T11:43:45Z","2019-01-11T15:30:26Z"
"","19713","Upgrade to CGLIB 3.2.5 [SPR-15147]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15147](https://jira.spring.io/browse/SPR-15147?redirect=false)** and commented  The CGLIB master branch includes a few patches beyond 3.2.4 in the meantime, including an `sun.misc.Unsafe.defineClass` fallback for Jigsaw's strict visibility enforcement on `java.lang.ClassLoader.defineClass`.  ---  **Issue Links:** - #20245 Compatibility with JDK 9 release candidate (_**""is depended on by""**_) - #18506 Upgrade to CGLIB 3.2.2 - #18958 Upgrade to CGLIB 3.2.4 - #19637 Upgrade to ASM 5.2 - #19712 Upgrade to Objenesis 2.5 - #20733 End of first-class JDK 6 support - #20414 MethodHandles.Lookup.defineClass for CGLIB class definition purposes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0d7b25f324e3df7c51a9b9cde6247bab2c4255b5, https://github.com/spring-projects/spring-framework/commit/015e00b5dd1fe33abecbbfb9a718f66d45fdee2f","closed","in: core,","spring-projects-issues","2017-01-16T14:43:40Z","2019-01-11T15:31:46Z"
"","19712","Upgrade to Objenesis 2.5 [SPR-15146]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15146](https://jira.spring.io/browse/SPR-15146?redirect=false)** and commented  Objenesis 2.5 is out, including support for JDK 9 build 151+.  ---  **Issue Links:** - #17819 Upgrade to Objenesis 2.2 - #18609 Upgrade to ASM 5.1 - #18864 Upgrade to Objenesis 2.4 - #19637 Upgrade to ASM 5.2 - #19713 Upgrade to CGLIB 3.2.5 - #20227 Jdep issue on org.springframework.objenesis.instantiator.sun.UnsafeFactoryInstantiator - #20159 Upgrade to Objenesis 2.6 for Google App Engine Standard on Java 8 and for better JDK 9 support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4af6d58d8de6377d446d6e637192e56eb8f506e0, https://github.com/spring-projects/spring-framework/commit/74596a6f1ed3bed2853d79ce1c1c228ca3400db5, https://github.com/spring-projects/spring-framework/commit/55554143d70d3ef5a8fa8df039e4f67b46dc6a21, https://github.com/spring-projects/spring-framework/commit/53e2d7d160046f90487ead3d309f4b6b471c9787","closed","in: core,","spring-projects-issues","2017-01-16T14:31:37Z","2019-01-11T15:31:32Z"
"","19704","Upgrade to Gradle 3.3 [SPR-15138]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15138](https://jira.spring.io/browse/SPR-15138?redirect=false)** and commented  Gradle 3.3 is out now...  ---  **Issue Links:** - #19472 Upgrade build to Gradle 3.2.1 - #19771 Upgrade to Gradle 3.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4d6c1d0d3fc44edce52b27b8007c9deae634bc79","closed","type: task,","spring-projects-issues","2017-01-13T10:24:37Z","2019-01-11T15:32:57Z"
"","19703","Deprecate unused web-specific MimeTypeUtils constants [SPR-15137]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15137](https://jira.spring.io/browse/SPR-15137?redirect=false)** and commented  `MimeTypeUtils` has a subset of `MediaType`'s constants but hardly any are actually used. Let's deprecate unused ones and remove them in 5.0 altogether.  ---  **Issue Links:** - #19676 Add MimeType and MediaType constants for RSS - #19474 MediaTypeFactory should come with its own complete mime.types file  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1521094c5b7ef9547aad6f673097eebb5700fa99, https://github.com/spring-projects/spring-framework/commit/7c05b427a7e2aebbfc70af2a2de49847986f2146","closed","in: core,","spring-projects-issues","2017-01-12T20:53:11Z","2019-01-11T15:33:04Z"
"","19637","Upgrade to ASM 5.2 [SPR-15071]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15071](https://jira.spring.io/browse/SPR-15071?redirect=false)** and commented  Let's upgrade to ASM 5.2, as released on Dec 23.  ---  **Issue Links:** - #18609 Upgrade to ASM 5.1 - #19428 Use String.intern() for Annotation and Class scanning - #19452 Use String.intern() for Class reading - #19083 Upgrade to ASM 6.0 - #19712 Upgrade to Objenesis 2.5 - #19713 Upgrade to CGLIB 3.2.5","closed","type: task,","spring-projects-issues","2016-12-30T00:37:44Z","2019-01-11T15:27:43Z"
"","19635","Track bean dependencies for calls between @Bean methods within @Configuration classes [SPR-15069]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15069](https://jira.spring.io/browse/SPR-15069?redirect=false)** and commented  Following up on #19633 which turned out to be a lack of bean dependency tracking for the `TaskScheduler` lookup in `SchedulerAnnotationBeanPostProcessor`, it turns out that we're not tracking bean dependencies for calls to other `@Bean` methods within a `@Configuration` class at all. Since such calls are symbolic bean references, they should have a dependent-bean relationship tracked like any other form of injection does already, allowing to shut them down in proper order. This is also nicely in line with the changes behind #12206 which introduced the `resolveNamedBean` method in 4.3.3, as well as with the deterministic `@Bean` registration goal in #19074 (also for 4.3.6).  ---  **Issue Links:** - #12206 findDefaultEntityManagerFactory should consider EMF bean's primary flag - #19074 Deterministic and JVM-independent `@Bean` registration order within Class-reflected configuration classes - #19633 SchedulingConfigurer's ScheduledTaskRegistrar should reliably shut down before TaskScheduler - #19979 Functional bean dependencies tracking","closed","type: enhancement,","spring-projects-issues","2016-12-29T20:17:12Z","2019-01-13T05:17:42Z"
"","19627","Backport streamlined ClassPathBeanDefinitionScanner setup [SPR-15061]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15061](https://jira.spring.io/browse/SPR-15061?redirect=false)** and commented  The revision for #19219 includes streamlined `ClassPathBeanDefinitionScanner` setup, avoiding unnecessary default creation of `Environment` and `ResourceLoader` instances. Let's backport this to 4.3.6.  ---  **Issue Links:** - #19219 Cache ASM metadata at the context level  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/243e21a3eac95626a14a98bf63e0ae870bd6924f","closed","type: enhancement,","spring-projects-issues","2016-12-27T17:18:44Z","2019-01-11T15:28:04Z"
"","19615","Document functional configuration style [SPR-15049]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15049](https://jira.spring.io/browse/SPR-15049?redirect=false)** and commented  We need to properly document our functional configuration style and other functional-style facilities in Spring 5.  ---  **Issue Links:** - #19398 Add a functional way to register a bean - #19614 Kotlin extension for GenericApplicationContext with registerBean(KClass) variants - #19763 Data binding with immutable objects (Kotlin / Lombok / `@ConstructorProperties`) - #19719 Reference documentation for Groovy bean definition DSL - #22171 Refactor core documentation to make it relevant for modern Spring applications","closed","status: duplicate,","spring-projects-issues","2016-12-23T11:43:34Z","2020-10-25T16:24:26Z"
"","19614","Kotlin extension for GenericApplicationContext with registerBean(KClass) variants [SPR-15048]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15048](https://jira.spring.io/browse/SPR-15048?redirect=false)** and commented  Following up on the `GenericApplicationContext` revision in #19398, let's consider creating a dedicated `GenericKotlinApplicationContext` subclass with `registerBean(KClass)` variants or Kotlin extensions to `GenericApplicationContext` itself with the same method variations.  ---  **Issue Links:** - #19398 Add a functional way to register a bean - #19620 Kotlin extension for Web function API - #19615 Document functional configuration style  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff675f52269ef60c694f647ccaddefb58c174097","closed","type: enhancement,","spring-projects-issues","2016-12-23T11:36:47Z","2019-01-11T15:16:54Z"
"","19804","Spring Formatters are not being registered when some class extends WebSecurityConfigurerAdapter [SPR-15239]","**[Juan Carlos García del Canto](https://jira.spring.io/secure/ViewProfile.jspa?name=jcgarcia)** opened **[SPR-15239](https://jira.spring.io/browse/SPR-15239?redirect=false)** and commented  The desired steps to a valid `Formatters` registration are:  1. First of all, the method [addWebMvcConfigurers](https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java#L42) located in [WebMvcConfigurationComposite](https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java) should registrate all the web configurers. That includes the `formatters`. 2. After that, when some component needs to `@Autowired` a `ConversionService` instance, the method [mvcConversionService](http://%20https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java#L602) located in [WebMvcConfigurationSupport](https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java) obtains a `ConversionService` instance and register all the existing `formatters` on it before return the instance.  However, if a `@Configuration` class extends the `WebSecurityConfigurerAdapter` abstract class, some component is trying to `@Autowired` a `ConversionService` instance before the `formatters` have been registered in the Spring context, so the `addFormatters` method doesn't include any `formatters` on it.  I've just created the following proof of concept that uses Spring Boot to reproduce this issue:  https://github.com/jcagarcia/proofs/tree/master/spring-security-and-formatters  If you execute [this proof of concept](https://github.com/jcagarcia/proofs/tree/master/spring-security-and-formatters) using the `mvn compile spring-boot:run` command, you could check that the `Create Pets` view shows an enum value without apply the conversion to String.  !https://i.stack.imgur.com/qugji.png!  Seems like the component that requires the `ConversionService` instance is the `ContentNegotiationStrategy` that is beeing `@Autowired` in the [WebSecurityConfigurerAdapter](https://github.com/spring-projects/spring-security/blob/master/config/src/main/java/org/springframework/security/config/annotation/web/configuration/WebSecurityConfigurerAdapter.java#L376).  A simple work-around is to `@Override` the [setContentNegotiationStrategy](https://github.com/jcagarcia/proofs/blob/master/spring-security-and-formatters/src/main/java/org/springframework/roo/petclinic/config/security/SecurityConfiguration.java#L54) method in our [SecurityConfiguration](https://github.com/jcagarcia/proofs/blob/master/spring-security-and-formatters/src/main/java/org/springframework/roo/petclinic/config/security/SecurityConfiguration.java) class without include the `@Autowired` annotation. _(The proof of concept includes this work-around commented)_  After that, execute this proof of concept again using the `mvn compile spring-boot:run` command and you could check that the `Create Pets` view shows an enum value with a valid format applied.  !https://i.stack.imgur.com/Dm5zE.png!  I think this is not the best solution because the `ContentNegotiationStrategy` is not beeing `@Autowired` anymore.  I've just created a question in StackOverflow to obtain some answer:  http://stackoverflow.com/questions/42086046/spring-formatters-have-been-not-registered-when-some-class-extends-websecurityco  Also, I've created an issue in spring-security project.  https://github.com/spring-projects/spring-security/issues/4202  Best Regards,   ---  **Affects:** 4.3.6  **Reference URL:** http://stackoverflow.com/questions/42086046/spring-formatters-have-been-not-registered-when-some-class-extends-websecurityco  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2017-02-09T09:03:18Z","2019-01-14T04:36:19Z"
"","20263","Netty4ClientHttpRequest does not include port along with host [SPR-15706]","**[João Cabrita](https://jira.spring.io/secure/ViewProfile.jspa?name=kewne)** opened **[SPR-15706](https://jira.spring.io/browse/SPR-15706?redirect=false)** and commented  Created from https://github.com/spring-projects/spring-boot/issues/9605  As described in the link, the port isn't included in the `Host` header of the request, which Spring uses to build the link in `MvcUriComponentsBuilder`.   ---  **Affects:** 4.3.9  **Reference URL:** https://github.com/kewne/spring-repro  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/baaa84e90fc0cb2279804442f4c58971036f6911, https://github.com/spring-projects/spring-framework/commit/d4d609318dc90def2363daeb169c911e3487bb2b","closed","type: bug,","spring-projects-issues","2017-06-26T16:15:41Z","2017-07-20T12:32:59Z"
"","20275","MockRestServiceServer does not honor expectation order with expectations that mandate more than 1 execution. [SPR-15719]","**[Josh Street](https://jira.spring.io/secure/ViewProfile.jspa?name=jjstreet)** opened **[SPR-15719](https://jira.spring.io/browse/SPR-15719?redirect=false)** and commented  According to the Javadocs `MockRestServiceServer.expect()`  > When request expectations have an expected count greater than one, only the first execution is expected to match the order of declaration. Subsequent request executions may be inserted anywhere thereafter.  The above causes heartburn when setting up tests where a particular URL might have different responses. In one such situation I want to have a mock server issue a particular response _x_ times for a given URL. Then, I want to have a different response returned from the same URL. I cannot achieve this in what I was hoping to be 2 lines of code, because it is not expected that the first response is guaranteed to be returned _x_ times before returning the second one. I have to explicitly have _x_ lines of `expect(ExpectedCount.once())` calls instead of `expect(ExpectedCount.times()`.  What is interesting is that the current implementation seems to cycle by return each potential response to a given match request exactly once in the order specified in code. Afterwards a potential response is returned the remaining times as specified by the expectation before cycling to the next epectation:  ```Java server.expect(times(3), requestTo(""url"")).andRespond(withSuccess(""response 1"", MediaType.TEXT_PLAIN)); server.expect(times(3), requestTo(""url"")).andRespond(withSuccess(""response 2"", MediaType.TEXT_PLAIN)); server.expect(times(3), requestTo(""url"")).andRespond(withSuccess(""response 3"", MediaType.TEXT_PLAIN)); ```  results in the follow returned by a restTemplate:  ```Java response 1 response 2 response 3 response 1 response 1 response 2 response 2 response 3 response 3 ```  Instead of what I expected:  ```Java response 1 response 1 response 1 response 2 response 2 response 2 response 3 response 3 response 3 ```  ---  **Affects:** 5.0 RC2  **Issue Links:** - #20231 SimpleRequestExpectationManager fails with sequential calls with different count (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2017-06-29T17:54:48Z","2019-01-11T16:11:36Z"
"","19634","xml websockets configuration does not mirror annotation configuration [SPR-15068]","**[Jordan Glassman](https://jira.spring.io/secure/ViewProfile.jspa?name=jordanglassman@gmail.com)** opened **[SPR-15068](https://jira.spring.io/browse/SPR-15068?redirect=false)** and commented  The [websockets docs](https://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html#websocket-stomp-handle-send) refer to a bean named ""brokerMessagingTemplate"", that I am unable to instantiate using the XML-based configuration.  ``` 2016-12-29 14:16:35.364  WARN 41570 --- [           main] ationConfigEmbeddedWebApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'restResource' defined in file [/Users/me/Downloads/demo/build/classes/main/com/example/RestResource.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.messaging.simp.SimpMessagingTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Qualifier(value=brokerMessagingTemplate)} ```  Injecting this type without the qualifier or creating a bean of type `SimpMessagingTemplate` succeeds but does not share configuration with whatever other classes are created for the websockets message broker, eg. it cannot find see open websockets.  A call to `#convertAndSend` results in:  ``` 2016-12-29 13:44:40,580 DEBUG :clientInboundChannel-5 [][org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler] Processing SUBSCRIBE /topic/test id=0 session=0cd15c1fd7e249e18f19dafce77b815b .... 2016-12-29 13:44:40,622 DEBUG :http-nio-8080-exec-1 [][org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler] Processing MESSAGE destination=/topic/test session=null payload=body ```  Sample project with both configurations (one commented out) attached.   ---  **Affects:** 4.3 GA  **Reference URL:** http://stackoverflow.com/questions/37294525/spring-websockets-xml-configuration-not-providing-brokermessagingtemplate  **Attachments:** - [websockets-config-demo.zip](https://jira.spring.io/secure/attachment/23672/websockets-config-demo.zip) (_116.92 kB_) - [websockets-config-demo-end-to-end.zip](https://jira.spring.io/secure/attachment/23676/websockets-config-demo-end-to-end.zip) (_155.82 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/75daf781c2c9f7de0506979396173d560ae054a6, https://github.com/spring-projects/spring-framework/commit/2e414ab25a359012ffa513521cc0476b39c5b11d","closed","type: enhancement,","spring-projects-issues","2016-12-29T19:28:03Z","2017-01-25T14:18:15Z"
"","19738","Allow custom PropertySource objects to be easily injected. [SPR-15172]","**[Jonathan Kupcho](https://jira.spring.io/secure/ViewProfile.jspa?name=jkupcho)** opened **[SPR-15172](https://jira.spring.io/browse/SPR-15172?redirect=false)** and commented  I was tasked with allowing properties to be programmatically injected rather than from existing properties.  Diving into the code, I noticed there was a PropertySource object which seems to have fit the bill perfectly, but wiring up the object properly became a challenge.  I wanted the ability to reference existing properties from property files while programmatically wiring other properties.  This lead to late binding issues, the ApplicationContext was being wired before the property had a chance to populate, etc.  The use case:  ```java some.property=${prop.source.property} ```  The prop.source.property would determined by the PropertySource class written by the developer.  This wouldn't be based on a file, or command line argument, it would be calculated by the developer.  The problem areas implementing this was within the following class: PropertySourcesPlaceholderConfigurer  There is no (easy) way, as far as I can tell, to wire in custom PropertySource objects without subclassing this class, and overriding a bunch of code manually.  Namely, the postProcessBeanFactory method.  Thanks!   --- No further details from [SPR-15172](https://jira.spring.io/browse/SPR-15172?redirect=false)","open","in: core,","spring-projects-issues","2017-01-20T16:41:35Z","2019-01-11T15:29:07Z"
"","20044","Use Java 8 forEach method from Map class [SPR-15484]","**[Jonathan Borenstein](https://jira.spring.io/secure/ViewProfile.jspa?name=jonborenstein)** opened **[SPR-15484](https://jira.spring.io/browse/SPR-15484?redirect=false)** and commented  You can use Java 8's forEach method for the Map Class instead of having to use a for loop for the Entry set.   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1404","closed","type: task,","spring-projects-issues","2017-04-25T22:16:02Z","2017-05-08T08:41:45Z"
"","19968","Can't use RouterFunction and RestController together [SPR-15405]","**[Jonathan Borenstein](https://jira.spring.io/secure/ViewProfile.jspa?name=jonborenstein)** opened **[SPR-15405](https://jira.spring.io/browse/SPR-15405?redirect=false)** and commented  If you have a routerfunction, no matter where you map it to, you can't have a RestController in your application.  You either choose one or the other. Why not both? Or is this by design?  ---  **Affects:** 5.0 M5  **Issue Links:** - #20095 Revisit DispatcherHandler integration for RouterFunctions  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2017-04-02T19:14:41Z","2019-01-13T20:30:13Z"
"","19923","Improve webclient and webflux documentation [SPR-15360]","**[Jonathan Borenstein](https://jira.spring.io/secure/ViewProfile.jspa?name=jonborenstein)** opened **[SPR-15360](https://jira.spring.io/browse/SPR-15360?redirect=false)** and commented  Perhaps more documentation and examples could be added to explain when one should use a webclient, routerfunction, distinctions between ClientReponse/ServerResponse, etc.  Also, make WebClient could have methods such as:  Person person = client.get(""/"", Person.class);  client.post(""/"", new Person());  Also, simple update and delete methods.  Just some suggestions, but I do think more documentation and more examples are needed for users to understand all parts of the WebFlux module.  ---  **Affects:** 5.0 M5  **Issue Links:** - #19860 Simplify access to request/response object in WebClient - #19715 Restructure Web Section of the documentation to include reactive support - #19925 Documentation for WebFlux fn","closed","type: enhancement,","spring-projects-issues","2017-03-19T17:57:03Z","2019-01-11T15:01:59Z"
"","19854","Clean up findAnnotation method [SPR-15288]","**[Jonathan Borenstein](https://jira.spring.io/secure/ViewProfile.jspa?name=jonborenstein)** opened **[SPR-15288](https://jira.spring.io/browse/SPR-15288?redirect=false)** and commented  Fix findAnnotation methods by removing for loop.  ---  **Issue Links:** - #19853 Use Java 8 getDeclaredAnnotation method in AnnotationUtils  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1338","closed","type: enhancement,","spring-projects-issues","2017-02-24T20:40:54Z","2019-01-11T14:27:34Z"
"","19853","Use Java 8 getDeclaredAnnotation method in AnnotationUtils [SPR-15287]","**[Jonathan Borenstein](https://jira.spring.io/secure/ViewProfile.jspa?name=jonborenstein)** opened **[SPR-15287](https://jira.spring.io/browse/SPR-15287?redirect=false)** and commented  Use getDeclaredAnnotationsByType method for Java 8.  ---  **Issue Links:** - #19854 Clean up findAnnotation method  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1337, and commits https://github.com/spring-projects/spring-framework/commit/8992f5924f37b69e3ecf976ddd97c5714a91e6f8","closed","type: enhancement,","spring-projects-issues","2017-02-24T20:01:23Z","2019-01-11T14:27:39Z"
"","19803","Use Map.getOrDefault in AbstractSqlParameterSource.getSqlType [SPR-15238]","**[Jonathan Borenstein](https://jira.spring.io/secure/ViewProfile.jspa?name=jonborenstein)** opened **[SPR-15238](https://jira.spring.io/browse/SPR-15238?redirect=false)** and commented  The getOrDefault method for Maps in Java 8 can be used throughout the Spring Framework if applicable.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1321, and commits https://github.com/spring-projects/spring-framework/commit/c0f4d78ef9b9e03836baa31ac3ada0b4c48197e7","closed","type: enhancement,","spring-projects-issues","2017-02-09T07:52:23Z","2017-02-23T09:29:12Z"
"","20318","CustomizableTraceInterceptor should allow INVOCATION_TIME placeholder in setExceptionMessage and make stack trace logging configurable [SPR-15763]","**[Jonathan Baker](https://jira.spring.io/secure/ViewProfile.jspa?name=solidjb@hotmail.com)** opened **[SPR-15763](https://jira.spring.io/browse/SPR-15763?redirect=false)** and commented  At one time, the CustomizableTraceInterceptor did not correctly calculate method invocation time when an exception was thrown.  That issue was fixed with #6468.  However, the setExceptionMessage() method still throws an exception if the INVOCATION_TIME placeholder is used.  This extra check simply needs removed.  ---  **Affects:** 4.3.9  **Issue Links:** - #6468 Make invocationTime meaningful in exceptionMessage in CustomizableTraceInterceptor  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1475, and commits https://github.com/spring-projects/spring-framework/commit/6d7612e052bfb2ac5d6f7c6721d82d9187c8b8c5, https://github.com/spring-projects/spring-framework/commit/aa0d7a61b6bf142cca4d13a1f28574b8d16faae8, https://github.com/spring-projects/spring-framework/commit/50f8b6b3abe5b0fcd50cf31b8056b6cfa60e7c92, https://github.com/spring-projects/spring-framework/commit/19a8efc717ddc9ced322cb4bc41b29c3c88ad54d","closed","type: enhancement,","spring-projects-issues","2017-07-12T12:14:12Z","2019-01-11T16:26:36Z"
"","20390","Access to request parameters via @RequestParam within form PUT request handlers is broken (HttpPutFormContentFilter) [SPR-15835]","**[Jonas Havers](https://jira.spring.io/secure/ViewProfile.jspa?name=jonashavers)** opened **[SPR-15835](https://jira.spring.io/browse/SPR-15835?redirect=false)** and commented  Until spring-web 4.3.9, I used the hidden HTML form parameter `_method=""put""` to submit data for entity changes. After passing the `HiddenHttpMethodFilter`, the request method is set to PUT. The [fix](https://github.com/spring-projects/spring-framework/commit/eb8454789429f30bbbe0a32d36406603f7d5ee25) in the `HttpPutFormContentFilter` for the issue #20308 (spring-web 4.3.10) breaks the possibility to access HTML form field values via `@RequestParam` in Spring controllers. If this break is intended, how can I make reasonable use of `HiddenHttpMethodFilter` now?  An example HTML form to showcase the issue:  ```             Post form  ```  The given enctype ""application/x-www-form-urlencoded"" is the default and can therefore be left out.  A corresponding controller:  ``` @Controller @RequestMapping(""/demo-issue"") class DemoIssueController {   @PutMapping   public ResponseEntity demoIssue(HttpServletRequest request, @RequestParam String hiddenField, @RequestParam String publicField) {     return ResponseEntity.ok(String.format(""hidden=%s;public=%s"", hiddenField, publicField));   } } ```  The result after submitting the form is:  ``` There was an unexpected error (type=Bad Request, status=400). Required String parameter 'hiddenField' is not present ```  The expected result in the response body is:  ``` hidden=testHidden;public=testPublic ```  There is a workaround by using `enctype=""multipart/form-data` in the form because it does not match the condition in the `HttpPutFormContentFilter#isFormContentType` method (which might be another issue).  ---  **Affects:** 4.3.10  **Issue Links:** - #20383 Parameter values are null when making a PUT request (_**""duplicates""**_) - #20308 MockMvc duplicates PUT Parameter value","closed","in: web,","spring-projects-issues","2017-07-31T11:40:24Z","2019-01-12T16:45:04Z"
"","20123","Expose mapped handler as an exchange attribute [SPR-15564]","**[Jon Schneider](https://jira.spring.io/secure/ViewProfile.jspa?name=jschneider)** opened **[SPR-15564](https://jira.spring.io/browse/SPR-15564?redirect=false)** and commented  For Spring Metrics, Spring Cloud Sleuth, and possible security, there is a need for a corollary to the `HandlerMethod` concept from webmvc.  If we can somehow retrieve the `HandlerMethod` from a `WebFilter`, it should be sufficient.  As long as there is a way to register a `WebFilter` globally for all annotation-based Webflux request mappings, there will be no need for a `HandlerInterceptor` corollary.   ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/67330dfc23564ac830e6b33143cf48bd824dfa67  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2017-05-18T18:43:07Z","2018-01-05T16:14:48Z"
"","20122","Ability to retrieve templated URI from ClientHttpRequestInterceptor [SPR-15563]","**[Jon Schneider](https://jira.spring.io/secure/ViewProfile.jspa?name=jschneider)** opened **[SPR-15563](https://jira.spring.io/browse/SPR-15563?redirect=false)** and commented  For metrics instrumentation of `RestTemplate` requests, we currently have to use AOP to extract the parameterized URI.  It would be nice to have a corollary to the server-side attribute in `RestTemplate`:  `request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE)`   ---  **Affects:** 5.0 RC2","closed","type: enhancement,","spring-projects-issues","2017-05-18T18:38:47Z","2017-05-25T21:26:06Z"
"","20121","Method to Intercept @Scheduled and @Async without AOP [SPR-15562]","**[Jon Schneider](https://jira.spring.io/secure/ViewProfile.jspa?name=jschneider)** opened **[SPR-15562](https://jira.spring.io/browse/SPR-15562?redirect=false)** and commented  Both Spring Cloud Sleuth and Spring Metrics (and less likely, security?) could benefit from a method to intercept and instrument `@Scheduled` and `@Async` methods that doesn't require AOP.  Perhaps interceptors could be folded into the registration process in `ScheduledAnnotationBeanPostProcessor`?   ---  **Affects:** 5.0 RC2","open","type: enhancement,","spring-projects-issues","2017-05-18T18:35:05Z","2017-05-19T20:54:45Z"
"","20089","Copy of `MockServerRequest` in spring-test  [SPR-15530]","**[Jon Schneider](https://jira.spring.io/secure/ViewProfile.jspa?name=jschneider)** opened **[SPR-15530](https://jira.spring.io/browse/SPR-15530?redirect=false)** and commented  `MockServerRequest` is an implementation of a non-trivial interface that would be useful for any third party writing tests related to Webflux.fn.  Creating a copy of this in spring-test would be helpful.   ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/42d1ba080da0fa41fc1635c6ba827d9cd0014121","closed","type: task,","spring-projects-issues","2017-05-09T22:14:25Z","2019-07-12T19:16:36Z"
"","19697","Support UNSUBSCRIBE for a durable STOMP subscription [SPR-15131]","**[Jon Kranes](https://jira.spring.io/secure/ViewProfile.jspa?name=jkranes)** opened **[SPR-15131](https://jira.spring.io/browse/SPR-15131?redirect=false)** and commented  For Artemis ActiveMQ, durable subscriptions in STOMP are implemented by adding the header ""durable-subscription-name"" in the SUBSCRIBE and UNSUBSCRIBE frames.  Using current Spring it is possible to add the header when subscribing, but once the subscription is created there does not seem to be any way to unsubscribe from the durable subscription (other than manually constructing the necessary STOMP frame).  To add this feature, the org.springframework.messaging.simp.stomp.DefaultStompSession.DefaultSubscription class would need to be extended to track the durable subscription name so that it could be passed back in the UNSUBSCRIBE frame when unsubscribe() is called.  Since the header name string (for example ""durable-subscription-name"" used by ActiveMQ-Artemis) is not a standard value this would need to be specified when the original subscription is made.   ---  **Affects:** 4.3.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/60517b23e2de6baea356fe546d35bd5b650fa876","closed","type: enhancement,","spring-projects-issues","2017-01-11T14:40:55Z","2017-02-23T09:29:11Z"
"","19902","Spring - JdbcTemplate - query with CTE and enumerated rows [SPR-15339]","**[John Teese](https://jira.spring.io/secure/ViewProfile.jspa?name=johnteese)** opened **[SPR-15339](https://jira.spring.io/browse/SPR-15339?redirect=false)** and commented  See http://stackoverflow.com/questions/42703571/spring-jdbctemplate-query-with-cte-and-enumerated-rows for more information.   ---  **Affects:** 4.2.6","closed","in: core,","spring-projects-issues","2017-03-09T20:54:17Z","2019-01-12T16:33:27Z"
"","20253","ConcurrentModificationException in DelegatingApplicationListener [SPR-15694]","**[John Merm](https://jira.spring.io/secure/ViewProfile.jspa?name=johnmerm)** opened **[SPR-15694](https://jira.spring.io/browse/SPR-15694?redirect=false)** and commented  Setup: Spring version :4.3.6 Spring security: 4.2.1 Spring Session: 1.3.1 Spring data redis : 1.7.2  I have a clustered MVC Webapp with external Redis for Session Management  I get this Exception all the time:  ``` java.util.ConcurrentModificationException at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901) at java.util.ArrayList$Itr.next(ArrayList.java:851) at org.springframework.security.context.DelegatingApplicationListener.onApplicationEvent(DelegatingApplicationListener.java:41) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:166) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:138) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:382) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:336) at org.springframework.security.web.session.HttpSessionEventPublisher.sessionDestroyed(HttpSessionEventPublisher.java:91) at org.springframework.session.web.http.SessionEventHttpSessionListenerAdapter.onApplicationEvent(SessionEventHttpSessionListenerAdapter.java:67) at org.springframework.session.web.http.SessionEventHttpSessionListenerAdapter.onApplicationEvent(SessionEventHttpSessionListenerAdapter.java:41) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:166) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:138) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:382) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:336) at org.springframework.session.data.redis.RedisOperationsSessionRepository.publishEvent(RedisOperationsSessionRepository.java:576) at org.springframework.session.data.redis.RedisOperationsSessionRepository.handleExpired(RedisOperationsSessionRepository.java:570) at org.springframework.session.data.redis.RedisOperationsSessionRepository.onMessage(RedisOperationsSessionRepository.java:531) at org.springframework.data.redis.listener.RedisMessageListenerContainer.executeListener(RedisMessageListenerContainer.java:249) at org.springframework.data.redis.listener.RedisMessageListenerContainer.processMessage(RedisMessageListenerContainer.java:239) at org.springframework.data.redis.listener.RedisMessageListenerContainer$1.run(RedisMessageListenerContainer.java:967) at java.lang.Thread.run(Thread.java:745)  ```  Seems like Redis is trying to send events During the webapp restart and this happens during the time My own SmartListener is registering itself against DelegatingApplicationListener  My Listener is registering agains tthe DelegatingApplicationListener using constructor autowiring  ```java     public xxxx(ObjectMapper mapper,SessionRepository","closed","status: invalid,","spring-projects-issues","2017-06-23T10:09:40Z","2019-01-12T05:20:41Z"
"","19666","Docs for Spring MVC Test should cover async requests [SPR-15099]","**[John Mark](https://jira.spring.io/secure/ViewProfile.jspa?name=springiscool)** opened **[SPR-15099](https://jira.spring.io/browse/SPR-15099?redirect=false)** and commented  MockMvc does not support async dispatches (as documented [here](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#spring-mvc-test-vs-end-to-end-integration-tests)). What actually happens is that the test can act in a non-deterministic fashion - failing intermittently, but passing sometimes - depending on how quick the async dispatch happens. It would be nice if MockMvc would fail-fast if async dispatch is used. This would reduce time spent investigating intermittently failing unit tests.   --- No further details from [SPR-15099](https://jira.spring.io/browse/SPR-15099?redirect=false)","closed","type: documentation,","spring-projects-issues","2017-01-05T18:40:38Z","2019-07-05T09:57:34Z"
"","19856","Allow classes to be returned with @Bean annotation (or new annotation) [SPR-15290]","**[John Hendrikx](https://jira.spring.io/secure/ViewProfile.jspa?name=john16384)** opened **[SPR-15290](https://jira.spring.io/browse/SPR-15290?redirect=false)** and commented  Assume I have two classes that will conflict if they were annotated as `@Component` and you want a project to select one or the other (making a conscious decision and not providing a default option), ie:  ```java      // Option 1:      public class DatabaseBasedLocationProvider implements LocationProvider;       // Option 2:      public class RestBasedLocationProvider implements LocationProvider; ```  Now, in the client project's configuration (that depends on the project that needs LocationProvider) I want to say:  ```java @BeanClass Class getLocationProviderClass() {      return RestBasedLocationProvider.class;  // Please construct and inject! } ```  I donot want to construct it myself (and being forced to deal with its dependencies).  The closest I managed to get was doing this in the `@Configuration` class:  ```java @Component public static class MyRestBasedLocationProvider extends RestBasedLocationProvider {     // leave empty, this is just to trick Spring into constructing this bean! } ```  A new kind of annotation or option would be so much nicer to achieve this kind of dependency, and enforcing proper configuration of dependent projects.   --- No further details from [SPR-15290](https://jira.spring.io/browse/SPR-15290?redirect=false)","open","in: core,","spring-projects-issues","2017-02-27T13:54:13Z","2019-01-11T14:26:39Z"
"","19876","@ExceptionHandler is not invoked for GET requests [SPR-15313]","**[John Doe](https://jira.spring.io/secure/ViewProfile.jspa?name=ah_paris)** opened **[SPR-15313](https://jira.spring.io/browse/SPR-15313?redirect=false)** and commented  If an  object is used to receive all the request params in a method annotated by `@RequestMapping`, this parameter can be annotated by `@Valid` but if the validation fails the `@ExceptonHandler`(MethodArgumentNotValidException.class) is not called and the client receives a 400 http response with a spring generated body in the response.  ```java @RequestMapping(path=""items"", method=RequestMethod.GET) public List items(@Valid ItemFilter filter) {    // return a list of item } ```  If the requests is made by a POST and if the ItemFilter is received as a request body, the `@ExceptionHandler` is properly called.  In both case, the point is to control the 400 response sent to the client, so the response body can contain informations about violation constraints. For POST and PUT it is obvious but for simple searches made by a GET it also make sense.   --- No further details from [SPR-15313](https://jira.spring.io/browse/SPR-15313?redirect=false)","closed","in: web,","spring-projects-issues","2017-03-04T14:20:32Z","2019-01-11T15:09:17Z"
"","19768","CorsFilter does implement required standard request handler [SPR-15204]","**[Johannes Hiemer](https://jira.spring.io/secure/ViewProfile.jspa?name=jhiemer)** opened **[SPR-15204](https://jira.spring.io/browse/SPR-15204?redirect=false)** and commented  The current CorsFilter implementation is missing a relevant requirement in my opinion. If you take a look at the Mozilla Documentation here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#The_HTTP_response_headers and also the Jetty Implementation containts a handling https://github.com/eclipse/jetty.project/blob/master/jetty-servlets/src/main/java/org/eclipse/jetty/servlets/CrossOriginFilter.java.  While the DefaultCorsProcessor contains the correct implementation, the CorsFilter only chains through the Cors Preflight Request. Is there any explanation why this is implemented like this?  If I understood the definition corretly, the CorsFilter should look like this:  ```java @Override 	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, 			FilterChain filterChain) throws ServletException, IOException {  		CorsConfiguration corsConfiguration = this.configSource.getCorsConfiguration(request); 		if (CorsUtils.isCorsRequest(request)) { 			if (corsConfiguration != null) { 				boolean isValid = this.processor.processRequest(corsConfiguration, request, response); 				if (!isValid || CorsUtils.isPreFlightRequest(request)) { 					return; 				} 			} 		} else { 			if (corsConfiguration != null) { 				this.processor.processRequest(corsConfiguration, request, response); 			} 		}  		filterChain.doFilter(request, response); 	} ```    --- No further details from [SPR-15204](https://jira.spring.io/browse/SPR-15204?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-01-30T08:27:44Z","2019-01-12T05:21:21Z"
"","20238","WebClient's handling of empty bodies seems broken [SPR-15679]","**[Johannes Edmeier](https://jira.spring.io/secure/ViewProfile.jspa?name=joshi)** opened **[SPR-15679](https://jira.spring.io/browse/SPR-15679?redirect=false)** and commented  When the WebClient retrieves an response without content (header `content-length: 0` and without `content-type` header ) I would expect following things:  1. when calling exchange() and doing ClientResponse#bodyToMono(Void.class) I expect that an empty Mono (that just completes) for the body is returned 2. when calling retrieve().toEntity(Void.class) I expect a Mono with a ResponseEntity instance whose hasBody() returns false.  Both is currently not possible and throws an UnsupportedMediaTypeException  Tests:  ```java   @Test     public void nocontent_entity() {         Mono responseEntity = WebClient.create(""http://localhost:8080"")                                                              .post()                                                              .uri(""/nocontent"")                                                              .retrieve()                                                              .toEntity(Void.class);          StepVerifier.create(responseEntity).assertNext(r -> {             assertThat(r.hasBody()).isFalse();             assertThat(r.getStatusCode().is2xxSuccessful()).isTrue();         }).verifyComplete();     }      @Test     public void nocontent_response() {         Mono response = WebClient.create(""http://localhost:8080"").post().uri(""/nocontent"").exchange();          StepVerifier.create(response).assertNext(r -> {             assertThat(r.statusCode().is2xxSuccessful()).isTrue();             StepVerifier.create(r.bodyToMono(Void.class)).verifyComplete();         }).verifyComplete();     } ```  Application  ```java @SpringBootApplication @RestController public class WebfluxApplication {  	public static void main(String[] args) { 		SpringApplication.run(WebfluxApplication.class, args); 	}  	@PostMapping(path=""/nocontent"") 	public Mono nocontent() { 		return Mono.empty(); 	} } ```  ``` java.lang.AssertionError: expectation ""expectComplete"" failed (expected: onComplete(); actual: onError(org.springframework.web.reactive.function.UnsupportedMediaTypeException: Content type 'application/octet-stream' not supported))  	at reactor.test.DefaultStepVerifierBuilder.failPrefix(DefaultStepVerifierBuilder.java:2114) 	at reactor.test.DefaultStepVerifierBuilder.fail(DefaultStepVerifierBuilder.java:2110) 	at reactor.test.DefaultStepVerifierBuilder.lambda$expectComplete$3(DefaultStepVerifierBuilder.java:199) 	at reactor.test.DefaultStepVerifierBuilder$SignalEvent.test(DefaultStepVerifierBuilder.java:1855) 	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onSignal(DefaultStepVerifierBuilder.java:1241) 	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onExpectation(DefaultStepVerifierBuilder.java:1186) 	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onError(DefaultStepVerifierBuilder.java:858) 	at reactor.core.publisher.Operators.error(Operators.java:195) 	at reactor.core.publisher.MonoError.subscribe(MonoError.java:51) 	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:665) 	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:639) 	at reactor.test.DefaultStepVerifierBuilder.verifyComplete(DefaultStepVerifierBuilder.java:508) 	at com.example.webflux.WebfluxApplicationTests.lambda$nocontent_response$1(WebfluxApplicationTests.java:46) 	at reactor.test.DefaultStepVerifierBuilder.lambda$consumeNextWith$1(DefaultStepVerifierBuilder.java:157) 	at reactor.test.DefaultStepVerifierBuilder$SignalEvent.test(DefaultStepVerifierBuilder.java:1855) 	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onSignal(DefaultStepVerifierBuilder.java:1241) 	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onExpectation(DefaultStepVerifierBuilder.java:1186) 	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onNext(DefaultStepVerifierBuilder.java:875) 	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) 	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:170) 	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) 	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) 	at reactor.core.publisher.FluxRetryPredicate$RetryPredicateSubscriber.onNext(FluxRetryPredicate.java:79) 	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:122) 	at reactor.ipc.netty.channel.PooledClientContextHandler.fireContextActive(PooledClientContextHandler.java:84) 	at reactor.ipc.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:542) 	at reactor.ipc.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:125) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) 	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) 	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:310) 	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:284) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) 	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) 	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1334) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) 	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:926) 	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:134) 	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:644) 	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:579) 	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:496) 	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:458) 	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858) 	at java.lang.Thread.run(Thread.java:745) 	Suppressed: org.springframework.web.reactive.function.UnsupportedMediaTypeException: Content type 'application/octet-stream' not supported 		at org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$16(BodyExtractors.java:237) 		at java.util.Optional.orElseGet(Optional.java:267) 		at org.springframework.web.reactive.function.BodyExtractors.readWithMessageReaders(BodyExtractors.java:233) 		at org.springframework.web.reactive.function.BodyExtractors.lambda$toMono$1(BodyExtractors.java:92) 		at org.springframework.web.reactive.function.client.DefaultClientResponse.body(DefaultClientResponse.java:78) 		at org.springframework.web.reactive.function.client.DefaultClientResponse.bodyToMono(DefaultClientResponse.java:98) 		... 34 more ```  ---  **Affects:** 5.0 RC2  **Issue Links:** - #20260 WebClient fails to transform empty json array to emtpy flux (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2017-06-18T13:46:33Z","2019-01-11T16:05:39Z"
"","19655","Wrong path to RequestUpgradeStrategies in HandshakeWebSocketService [SPR-15089]","**[Johannes Dato](https://jira.spring.io/secure/ViewProfile.jspa?name=jdato)** opened **[SPR-15089](https://jira.spring.io/browse/SPR-15089?redirect=false)** and commented  I'm Using Boot 2.0.0.BUILD-SNAPSHOT and spring-boot-dependencies-web-reactive 0.1.0.BUILD-SNAPSHOT  I tried to implement a WebSocket (see reference url) and got the Following Exception:  ```java Caused by: java.lang.ClassNotFoundException: org.springframework.web.reactive.socket.server.support.TomcatRequestUpgradeStrategy ```  The TomcatRequestUpgradeStrategy is located in a different package. It should reference to: org.springframework.web.reactive.socket.server.**upgrade**.TomcatRequestUpgradeStrategy instead of org.springframework.web.reactive.socket.server.**support**.TomcatRequestUpgradeStrategy  The bug is located in the HandshakeWebSocketService line 126:  ```java className = HandshakeWebSocketService.class.getPackage().getName() + ""."" + className; Class clazz = ClassUtils.forName(className, HandshakeWebSocketService.class.getClassLoader()); ```  ---  **Affects:** 5.0 M4  **Reference URL:** http://docs.spring.io/spring-framework/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/html/web-reactive.html#web-reactive-websocket-support  **Issue Links:** - #19673 Discovery of websocket RequestUpgradeStrategy fails (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2017-01-04T09:30:31Z","2019-01-11T15:27:41Z"
"","20216","Ordering of WebClient.filter(s) [SPR-15657]","**[Joe Grandja](https://jira.spring.io/secure/ViewProfile.jspa?name=jgrandja)** opened **[SPR-15657](https://jira.spring.io/browse/SPR-15657?redirect=false)** and commented  Given this filter configuration for `WebClient`:  ```java this.webClient    .filter(filter1())    .filter(filter2())    .filter(filter3())    .filter(filter4()) ```  The expectation is that the filters would be applied in the following order: `filter1, filter2, filter3, filter4`. However, that is not the case, as they are applied in reverse order.  It seems a bit confusing compared to the way a Reactive stream is defined and executed in a top-down approach (the way the code reads).  Does it make sense to have the filters applied in the order they are defined - top-down approach?  ---  **Affects:** 5.0 RC1  **Issue Links:** - #20250 Simplify applying a strategy to requests from WebTestClient and WebTestClient  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2017-06-13T15:34:25Z","2019-01-11T16:08:24Z"
"","19832","Introduce @FromModel as substitute to @ModelAttribute(binding=false) [SPR-15267]","**[Jochen Pier](https://jira.spring.io/secure/ViewProfile.jspa?name=jochenpier)** opened **[SPR-15267](https://jira.spring.io/browse/SPR-15267?redirect=false)** and commented  Dear Spring-Team,  we often use `@ModelAttribute` to fetch Model-Attributes from the model in controller actions.  Example:  ```java @RequestMapping(""/testAtrribute"") public @ResponseBody String action(@ModelAttribute(name = ""attr"", binding=false) String attr) {      return ""Received from Model:"" + attr; } ```  The problem: If we forget the ""binding=false"" attribute, we get a really heavy security risk. Additionally, I think that getting something from the existing Model (which was constructed from former processing) or binding data to request are very different things, that should get different names.  So I suggest to introduce a new name and deprecate the ""binding=false"" attribute. Name-suggestion: `@FromModel`(name=""xyz"")  Example:  ```java @RequestMapping(""/testAtrribute"") public @ResponseBody String action(@FromModel(name = ""attr"") String attr) {      return ""Received from Model:"" + attr; } ```  And maybe another suggestion: Rename the parameter-binding annotation too. So  ```java @RequestMapping(""/testAtrribute"") public @ResponseBody String action(@FromRequest(""Book"") Book book) {      return ""Received from Request:"" + book.getTitle(); } ```  Thank you for spring!  ---  **Issue Links:** - #17982 Prevent binding for `@ModelAttribute`","closed","type: enhancement,","spring-projects-issues","2017-02-18T20:52:13Z","2019-01-13T05:17:10Z"
"","19762","Performance Issue with @ModelAttribute [SPR-15198]","**[Jochen Pier](https://jira.spring.io/secure/ViewProfile.jspa?name=jochenpier)** opened **[SPR-15198](https://jira.spring.io/browse/SPR-15198?redirect=false)** and commented  There is a possible performance problem:  If you use:  ```java @ModelAttribute public void before(@ModelAttribute(name=""test"") TestClass test) { 	test.setPayload(""myPayload""); } ```  it is MUCH (10x)  slower than the same  ```java @ModelAttribute public void before(Model model) { 	TestClass t = new TestClass(); 	t.setPayload(""myPayload""); 	model.addAttribute(""test"", t); } ```  This is true especially in high traffic situations and is constantly getting worse (slower) over the time.  I think, maybe a hint in the documentation will be a good idea. (Or maybe you can find the problem)  Do you need a test-project?  ---  **Affects:** 4.3.5  **Issue Links:** - #19626 Annotated method argument matching performance issue (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2017-01-27T21:53:25Z","2019-01-11T14:25:45Z"
"","19843","Issue with example for idref in Spring framework reference [SPR-15277]","**[Jira User](https://jira.spring.io/secure/ViewProfile.jspa?name=rajkaran)** opened **[SPR-15277](https://jira.spring.io/browse/SPR-15277?redirect=false)** and commented  In the idref element in the Spring framework reference https://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/ Where it says ""The above bean definition snippet is exactly equivalent (at runtime) to the following snippet""  I think \ \ \ should actually be \ \ \   ---  **Affects:** 4.3.6  **Reference URL:** https://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/","closed","status: invalid,","spring-projects-issues","2017-02-21T21:56:55Z","2019-01-12T05:21:12Z"
"","19617","Spring MVC 4.3.5's Jackson auto-configuration breaks against Jackson 2.3.3 on the classpath [SPR-15051]","**[Jim Richards](https://jira.spring.io/secure/ViewProfile.jspa?name=jim.richards@tetsuwan-tech.com)** opened **[SPR-15051](https://jira.spring.io/browse/SPR-15051?redirect=false)** and commented  When I run my servlet with Spring 4.3.4.RELEASE there are no issues. When I update to 4.3.5.RELEASE I get this error on startup  ``` Dec 24, 2016 7:50:04 PM org.apache.catalina.core.StandardContext listenerStart SEVERE: Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter': Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: com/fasterxml/jackson/core/util/DefaultIndenter 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1116) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1060) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:759) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:866) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:542) 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107) 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4842) 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5303) 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1407) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1397) 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:745) Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: com/fasterxml/jackson/core/util/DefaultIndenter 	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:154) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:89) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1108) 	... 22 more Caused by: java.lang.NoClassDefFoundError: com/fasterxml/jackson/core/util/DefaultIndenter 	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.init(AbstractJackson2HttpMessageConverter.java:97) 	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.(AbstractJackson2HttpMessageConverter.java:90) 	at org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.(MappingJackson2HttpMessageConverter.java:66) 	at org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.(MappingJackson2HttpMessageConverter.java:57) 	at org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter.(AllEncompassingFormHttpMessageConverter.java:61) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.(RequestMappingHandlerAdapter.java:182) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) 	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:142) 	... 24 more Caused by: java.lang.ClassNotFoundException: com.fasterxml.jackson.core.util.DefaultIndenter 	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1332) 	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1166) 	... 35 more ```  which is resolved by adding  ```xml      com.fasterxml.jackson.core     jackson-core     2.8.5  ```  to pom.xml.  I note that in * https://spring.io/blog/2016/06/10/spring-framework-4-3-goes-ga  it mentions that  > Spring 4.3’s Jackson support requires Jackson 2.6+ now.  Is this related?  ---  **Issue Links:** - #19465 sse breaks with indenting serializer - #17654 Require Jackson 2.6+, FreeMarker 2.3.21+, XStream 1.4.5+","closed","status: declined,","spring-projects-issues","2016-12-24T08:50:47Z","2019-01-12T16:58:47Z"
"","19967","Exception hierarchy under HttpClientException and HttpServerException for the RestTemplate [SPR-15404]","**[Jerzy Krolak](https://jira.spring.io/secure/ViewProfile.jspa?name=jerzykrlk)** opened **[SPR-15404](https://jira.spring.io/browse/SPR-15404?redirect=false)** and commented  The default `RestTemplate` error handler throws `HttpClientErrorException` or `HttpServerErrorException`, which are quite general, compared to the variety of HTTP error codes and their REST semantics.  In a heavily rest-based application, introducing subclasses of `HttpClientErrorException` and `HttpServerErrorException` could simplify quite a lot of my code.  Sample code, actual:  ``` try {     Book book = restTemplate.getForObject(""http://example.com/books/1"", Book.class);     return book; } catch (HttpClientErrorException e) {     if (e.getStatusCode() == HttpStatus.NOT_FOUND) {         // handle the 404 error     }     throw e; // can't do anything about other http errors, anyway } ```  Sample code, possible:  ``` try {     Book book = restTemplate.getForObject(""http://example.com/books/1"", Book.class);     return book; } catch (HttpNotFoundErrorException e) {         // handle the 404 error } ```  This change should be pretty easy to introduce, and by subclassing `HttpClientErrorException` and `HttpServerErrorException` should be backward compatible.  I could prepare an appropriate pull request, if you like the general idea.  ---  **Affects:** 5.0.8  **Issue Links:** - #22162 HTTP error 404 from spring web causes ""404 null"" message in RestTemplate - #19384 Specific exceptions for missing request headers, cookies, etc - #21667 More error details in RestTemplate client and server exception  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7f0e3481a562a8bf63efced9ef2b06712ac573bf, https://github.com/spring-projects/spring-framework/commit/2216964b54dee4a64d634ecb6dc9922f4f07b4bf","closed","type: enhancement,","spring-projects-issues","2017-03-30T19:24:45Z","2019-01-11T16:44:46Z"
"","20189","Property placeholder in factory bean is not resolved [SPR-15630]","**[Jeronimo Spuri Murguia](https://jira.spring.io/secure/ViewProfile.jspa?name=jspurim@gmail.com)** opened **[SPR-15630](https://jira.spring.io/browse/SPR-15630?redirect=false)** and commented  When using a property placeholder to select a factory bean the property placeholder is not resolved.  This configuration:  ```properties 1. app.properties factory=helloFactory ```  ```xml    ```  Results in:  ``` WARNING: Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named '${factory}' available Exception in thread ""main"" org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named '${factory}' available ```    ---  **Affects:** 4.3.8  **Reference URL:** https://github.com/jspurim/spring-framework-issues/tree/master/SPR-15630  1 votes, 2 watchers","open","type: enhancement,","spring-projects-issues","2017-06-06T18:57:55Z","2017-06-06T20:05:27Z"
"","19974","UrlResource getFilename should not contain query parameters [SPR-15411]","**[Jerome Hordies](https://jira.spring.io/secure/ViewProfile.jspa?name=jhordies)** opened **[SPR-15411](https://jira.spring.io/browse/SPR-15411?redirect=false)** and commented  UrlResource.getFilename uses URL.getFile() instead of URL.getPath()  The URL.getFile() javadocs say : Gets the file name of this URL. The returned file portion will be the same as getPath(), plus the concatenation of the value of getQuery(), if any. If there is no query portion, this method and getPath() will return identical results.  This causes a bug in Spring boot when specifying --spring.config.location=http://host/group/repo/raw/branch/config.yml?private_token=NyAq4wDit3hmJ7UZPyMU because "".yml?private_token=NyAq4wDit3hmJ7UZPyMU"" is not a supported extension.  My workaround until this gets fixed is to use --spring.config.location=http://host/group/repo/raw/branch/config.yml?private_token=NyAq4wDit3hmJ7UZPyMU&fake_param=whatever.yml  ---  **Affects:** 3.2.18, 4.2.9, 4.3.7, 5.0 M5  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1372  **Issue Links:** - #19994 UnknownHostException not accepted as ""resource not found"" anymore - #21732 Be more defensive in UrlResource about cleaning the path","closed","in: core,","spring-projects-issues","2017-04-04T15:21:08Z","2019-01-11T16:43:58Z"
"","20236","WebFlux and ServerResponse possible issue [SPR-15677]","**[Jeoffrey Haeyaert ](https://jira.spring.io/secure/ViewProfile.jspa?name=jhaeyaert)** opened **[SPR-15677](https://jira.spring.io/browse/SPR-15677?redirect=false)** and commented  # Reproductible problem with Spring 5 RC2 WebFlux and ServerResponse  ## Problem description  Using WebFlux in reactive way, I was expecting this king of thing will work but I always get a 406 status ('Not Acceptable').  ```java @GetMapping(path = ""/bug"", produces = ""text/html; charset=utf-8"") 	@ResponseBody 	public Mono getTest() {  		return ServerResponse.ok().body(Mono.just(""This should work""), String.class); 	} ```  The use of ServerResponse is a way to have a better control on http status and content response in case of error or empty  observable (ex : 404 if `Mono.empty()` is returned)  After a deep search I found that the AbstractMessageWriterResultHandler (~ line 112) never find appropriate HttpMessageWriter able to write element of `ServerResponse` type.  Is it a bug or do I miss something ?  ## How to reproduce  1. Clone the projet  ```bash git clone https://github.com/jhaeyaert/spring-framework-issues.git cd ./spring-framework-issues/SPR-15677 ```  2. Compile the project using maven  ```bash mvn clean package ```  3. Run the project  ```bash java -jar target/SPR-SPR-15677-0.0.1-SNAPSHOT.jar ```  4. Test the reproductible case  ```bash curl -D- http://localhost:8181/bug ```  You will get a 406 status code 'Not Acceptable'  ```bash HTTP/1.1 406 Not Acceptable content-length: 0 ```  ---  **Affects:** 5.0 RC1, 5.0 RC2  **Reference URL:** https://github.com/jhaeyaert/spring-framework-issues  **Issue Links:** - #22011 WebFluxController doesn't respect status code from ServerResponse (_**""is duplicated by""**_)","closed","status: declined,","spring-projects-issues","2017-06-16T19:07:11Z","2019-01-12T16:33:15Z"
"","20377","Setting user header on CONNECT message stopped working [SPR-15822]","**[Jeff](https://jira.spring.io/secure/ViewProfile.jspa?name=domain)** opened **[SPR-15822](https://jira.spring.io/browse/SPR-15822?redirect=false)** and commented  We followed instructions in Token-Based Authentication in Spring doc at http://docs.spring.io/spring/docs/5.0.0.M5/spring-framework-reference/html/websocket.html#websocket-stomp-authentication-token-based, in order to set the user header on the CONNECT Message. In Spring framework 4.3.9, it works well. After migrating to 5.0.0 RC2, we found it stopped working. After some investigation, we tend to believe it is a bug in 5.0.0 RC2 as well as RC3.  [5.0.0 RC2 behavior]   - bad In method handleMessageFromClient() in StompSubProtocolHandler class, Principal is retrieved from session. Of course, at this point, the Principal is null. And then, Spring attempts to put Principal to stompAuthentications. Since it is null, nothing would be put into stompAuthentications.      			Principal user = getUser(session);     			if (user != null) {     				headerAccessor.setUser(user);     			}     			...     			try {     				SimpAttributesContextHolder.setAttributesFromMessage(message);     				boolean sent = outputChannel.send(message);          				if (sent) {     					if (isConnect) {     						if (user != null && user != session.getPrincipal()) {     							this.stompAuthentications.put(session.getId(), user);     						}     					}  [4.3.9 behavior]   - good Spring tries to retrieve Principal from STOMP header, and then put it into stompAuthentications.      if (sent) {              if (isConnect) {                       Principal user = headerAccessor.getUser();                       if (user != null && user != session.getPrincipal()) {                                this.stompAuthentications.put(session.getId(), user);                       }              }  This commit (https://github.com/spring-projects/spring-framework/commit/f813712f5b413b354560cd7cc006352e9defa9a3#diff-7bc1370febf168db39f9b3a608f68fe8) caused this regression. FYI.  ---  **Affects:** 5.0 RC2, 5.0 RC3  **Issue Links:** - #20099 Introduce null-safety of Spring Framework API  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/25e6a2da646c9a465fabf1c73796a1ae01886857","closed","type: regression,","spring-projects-issues","2017-07-27T03:14:28Z","2019-01-11T17:41:47Z"
"","19692","Modification in AbstractAutowireCapableBeanFactory to prevent stackoverflow errors causes context not to load. [SPR-15125]","**[Jeff Maxwell](https://jira.spring.io/secure/ViewProfile.jspa?name=jeff.maxwell@gmail.com)** opened **[SPR-15125](https://jira.spring.io/browse/SPR-15125?redirect=false)** and commented  Modification in `AbstractAutowireCapableBeanFactory` to prevent `StackOverflowErrors` causes context not to load with `org.springframework.beans.factory.NoSuchBeanDefinitionException`.  This [commit](https://github.com/spring-projects/spring-framework/commit/e23ac031ffc49fbdef6e1acb70b220d9093aae97#diff-cc936e219ae3ea6fcf88f74629262bbd) causes our code to throw the exception below.  Earlier versions of `AbstractAutowireCapableBeanFactory` work fine.  Note that the `reference.service.instrumentEhcache` bean is created via a subclass of `org.springframework.cache.ehcache.EhCacheFactoryBean`  The context being loaded is rather complex, I have not yet been able to create a minimal test example.  ``` 2017-01-10 11:24:38.991 17201 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@59d016c9] to prepare test instance [*.*.*.*.*.*.PositionAccountManagerTest@16ca4532] java.lang.IllegalStateException: Failed to load ApplicationContext 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124) 	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:230) 	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:63) 	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) 	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87) 	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:101) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) 	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:101) 	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:242) 	at org.junit.rules.RunRules.evaluate(RunRules.java:20) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'reference.referenceCache' defined in URL [jar:file:/*/*/*/*/*/*/*/*/*/*.jar!/*/*/*/reference/cache/ReferenceCache.class]: Unsatisfied dependency expressed through constructor parameter 14: Error creating bean with name 'reference.service.instrumentCache' defined in URL [jar:file:/*/*/*/*/*/*/*/*/*/*.jar!/*/*/*/reference/cache/InstrumentCache.class]: Unsatisfied dependency expressed through constructor parameter 0: No qualifying bean of type [net.sf.ehcache.Ehcache] found for dependency [net.sf.ehcache.Ehcache]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Qualifier(value=reference.service.instrumentEhcache)}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [net.sf.ehcache.Ehcache] found for dependency [net.sf.ehcache.Ehcache]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Qualifier(value=reference.service.instrumentEhcache)}; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'reference.service.instrumentCache' defined in URL [jar:file:/*/*/*/*/*/*/*/*/*/*.jar!/com/theice/cds/reference/cache/InstrumentCache.class]: Unsatisfied dependency expressed through constructor parameter 0: No qualifying bean of type [net.sf.ehcache.Ehcache] found for dependency [net.sf.ehcache.Ehcache]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Qualifier(value=reference.service.instrumentEhcache)}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [net.sf.ehcache.Ehcache] found for dependency [net.sf.ehcache.Ehcache]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Qualifier(value=reference.service.instrumentEhcache)} 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:189) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1147) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1050) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:751) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:128) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:108) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:251) 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) 	... 29 common frames omitted Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'reference.service.instrumentCache' defined in URL [jar:file:/*/*/*/*/*/*/*/*/*/*.jar!/*/*/*/reference/cache/InstrumentCache.class]: Unsatisfied dependency expressed through constructor parameter 0: No qualifying bean of type [net.sf.ehcache.Ehcache] found for dependency [net.sf.ehcache.Ehcache]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Qualifier(value=reference.service.instrumentEhcache)}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [net.sf.ehcache.Ehcache] found for dependency [net.sf.ehcache.Ehcache]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Qualifier(value=reference.service.instrumentEhcache)} 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:189) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1147) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1050) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) 	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:207) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1239) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1079) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1044) 	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835) 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) 	... 47 common frames omitted Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [net.sf.ehcache.Ehcache] found for dependency [net.sf.ehcache.Ehcache]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Qualifier(value=reference.service.instrumentEhcache)} 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1431) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1082) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1044) 	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835) 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) 	... 62 common frames omitted ```  ---  **Affects:** 4.3.3  **Issue Links:** - #19119 StackOverflowError for advisor search against factory-bean reference to FactoryBean - #19563 Behaviour of field injection for List dependencies that are produced and consumed by the same configuration class has changed in 4.3.5 snapshots  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/32fc855dd1ae2485ef7a23abc7711ef620fad052, https://github.com/spring-projects/spring-framework/commit/24ebd15f9c77aec4043748e15b3fe82a12484166","closed","in: core,","spring-projects-issues","2017-01-10T18:42:13Z","2019-01-11T15:34:20Z"
"","20386","MockMvc doesn't honor params in RequestMapping when no equal sign [SPR-15831]","**[Jean-Baptiste Nizet](https://jira.spring.io/secure/ViewProfile.jspa?name=jnizet)** opened **[SPR-15831](https://jira.spring.io/browse/SPR-15831?redirect=false)** and commented  When two resource methods are defined as following:  ```java     @GetMapping     public String noParam() {         return ""noParam"";     }      @GetMapping(params = ""foo"")     public String paramFoo() {         return ""paramFoo"";     } ```  and a MockMvc test tries executing the second method using  ```java mvc.perform(get(""/api/bug?foo"")) ```  then the first method is invoked instead. Adding an equal sign at the end fixes the issue, but the equl sign shouldn't be necessary. BTW, in production, sending a request to /api/bug?foo does invoke the second method as expected.  Here's a repro project: https://github.com/jnizet/param-bug-demo  Note that the original bug has been detected in a Spring Boot 2.0.0.M2 project, so the bug is still there in the latest version of Spring.   ---  **Affects:** 4.3.10, 5.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4fc0ce120628490922ae1392c2ab96a69d02d2d7","closed","type: enhancement,","spring-projects-issues","2017-07-29T15:49:16Z","2017-09-11T12:09:49Z"
"","19805","CronSequenceGenerator examples in documentation are incorrect [SPR-15240]","**[Jean-Baptiste Nizet](https://jira.spring.io/secure/ViewProfile.jspa?name=jnizet)** opened **[SPR-15240](https://jira.spring.io/browse/SPR-15240?redirect=false)** and commented  The javadoc of CronSequenceGenerator provides the following examples, which are incorrect:  * `""0 * 6,19 * * *""` = 6:00 AM and 7:00 PM every day: this actually is every minute between 6:00 and 7:00, and between 19:00 and 20:00. To match the description, the cron expression should be `""0 0 6,19 * * *""`. * `""0 0/30 8-10 * * *""` = 8:00, 8:30, 9:00, 9:30 and 10 o'clock every day. 10:30 is missing. The description should be ""8:00, 8:30, 9:00, 9:30, 10:00 and 10:30 every day"".    ---  **Affects:** 4.3.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e1bb697cf9d7dcc5eae95d3f2ae00326ca1546c6, https://github.com/spring-projects/spring-framework/commit/6e93834e279db7a87524fd11ebbec70e0b84d9e4","closed","type: documentation,","spring-projects-issues","2017-02-09T11:31:44Z","2017-02-23T09:29:12Z"
"","20144","What's new section in 4.3.x reference should have introductory paragraphs [SPR-15585]","**[Jay Bryant](https://jira.spring.io/secure/ViewProfile.jspa?name=jbryant)** opened **[SPR-15585](https://jira.spring.io/browse/SPR-15585?redirect=false)** and commented  That section heading has no content beneath it. The standard in technical documentation is for it to have an paragraph that describes the content to follow.   ---  **Affects:** 4.3.8  **Reference URL:** https://docs.spring.io/spring/docs/current/spring-framework-reference/html/spring-whats-new.html  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2677584658e582e40370747468d1e8d63466ae12","closed","type: documentation,","spring-projects-issues","2017-05-24T16:18:00Z","2017-06-07T20:04:28Z"
"","20256","Support XML Marshalling with jackson-dataformat-xml in WebFlux [SPR-15697]","**[Jarno Walgemoed](https://jira.spring.io/secure/ViewProfile.jspa?name=jwalgemoed)** opened **[SPR-15697](https://jira.spring.io/browse/SPR-15697?redirect=false)** and commented  Hi,  Jackson-xml marshalling seems to be broken in the 2.0.0 M2 milestone release for Spring boot which contains Spring 5.0 RC2 (with web-flux). I tried both with functional web routers and a 'classic' (simple) annotation based controller (in Kotlin):  ``` data class Hello(val one: String, val two: String)  @Bean fun apiRouter() = router {     GET(""/hello"") { req ->         ok().contentType(MediaType.APPLICATION_XML)                 .body(BodyInserters.fromObject(Hello(""Hello"", ""World"")))     } } ```  And  ``` data class Hello(val one: String, val two: String)  @RestController class HelloController {     @GetMapping(""/hello"") fun sayHello() = Hello(""Hello"", ""World"") } ```  The jackson XML marshaller doesn't seem to be registered automatically anymore.  **Steps to reproduce**  - Create a Spring Boot project (start.spring.io) -> 2.0.0 M2 with the reactive web dependency; - Add a restcontroller that returns a simple entity (see above); - Add `jackson-dataformat-xml` dependency.  Call the endpoint with the `application/xml` accept header. The sever will respond with a `406 - not acceptable` response. In the logging this shows up:  ``` 2017-06-23 12:39:42.629 ERROR 26064 --- [ctor-http-nio-2] o.s.w.s.h.ResponseStatusExceptionHandler : Response status 406 with reason ""Could not find acceptable representation"" ```  *Verification*  I've tried a similar approach with the latest stable Spring version and there it works as expected, depending on the provided accept header (`application/xml` or `application/json`) the application responds with the response in the requested format.    ---  **Affects:** 5.0 RC2  3 votes, 6 watchers","open","status: blocked,","spring-projects-issues","2017-06-23T18:02:59Z","2022-06-28T13:35:23Z"
"","19624","Avoid javadoc warnings for Kotlin classes [SPR-15058]","**[Janne Valkealahti](https://jira.spring.io/secure/ViewProfile.jspa?name=jvalkeal)** opened **[SPR-15058](https://jira.spring.io/browse/SPR-15058?redirect=false)** and commented  In my gradle build(5.0.0.BUILD-SNAPSHOTS, I don't use kotlin) I'm getting a lot of javadoc warnings which is a bit annoying.  ``` javadoc/home/jvalkealahti/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/5.0.0.BUILD-SNAPSHOT/a63d010dba9471353da8224792a8b9880418560d/spring-beans-5.0.0.BUILD-SNAPSHOT.jar(org/springframework/beans/factory/ListableBeanFactoryExtension.class): warning: Cannot find annotation method 'mv()' in type 'Metadata': class file for kotlin.Metadata not found /home/jvalkealahti/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/5.0.0.BUILD-SNAPSHOT/a63d010dba9471353da8224792a8b9880418560d/spring-beans-5.0.0.BUILD-SNAPSHOT.jar(org/springframework/beans/factory/ListableBeanFactoryExtension.class): warning: Cannot find annotation method 'bv()' in type 'Metadata' /home/jvalkealahti/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/5.0.0.BUILD-SNAPSHOT/a63d010dba9471353da8224792a8b9880418560d/spring-beans-5.0.0.BUILD-SNAPSHOT.jar(org/springframework/beans/factory/ListableBeanFactoryExtension.class): warning: Cannot find annotation method 'k()' in type 'Metadata' /home/jvalkealahti/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/5.0.0.BUILD-SNAPSHOT/a63d010dba9471353da8224792a8b9880418560d/spring-beans-5.0.0.BUILD-SNAPSHOT.jar(org/springframework/beans/factory/ListableBeanFactoryExtension.class): warning: Cannot find annotation method 'd1()' in type 'Metadata' /home/jvalkealahti/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/5.0.0.BUILD-SNAPSHOT/a63d010dba9471353da8224792a8b9880418560d/spring-beans-5.0.0.BUILD-SNAPSHOT.jar(org/springframework/beans/factory/ListableBeanFactoryExtension.class): warning: Cannot find annotation method 'd2()' in type 'Metadata' /home/jvalkealahti/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/5.0.0.BUILD-SNAPSHOT/a63d010dba9471353da8224792a8b9880418560d/spring-beans-5.0.0.BUILD-SNAPSHOT.jar(org/springframework/beans/factory/BeanFactoryExtension.class): warning: Cannot find annotation method 'mv()' in type 'Metadata' /home/jvalkealahti/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/5.0.0.BUILD-SNAPSHOT/a63d010dba9471353da8224792a8b9880418560d/spring-beans-5.0.0.BUILD-SNAPSHOT.jar(org/springframework/beans/factory/BeanFactoryExtension.class): warning: Cannot find annotation method 'bv()' in type 'Metadata' /home/jvalkealahti/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/5.0.0.BUILD-SNAPSHOT/a63d010dba9471353da8224792a8b9880418560d/spring-beans-5.0.0.BUILD-SNAPSHOT.jar(org/springframework/beans/factory/BeanFactoryExtension.class): warning: Cannot find annotation method 'k()' in type 'Metadata' /home/jvalkealahti/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/5.0.0.BUILD-SNAPSHOT/a63d010dba9471353da8224792a8b9880418560d/spring-beans-5.0.0.BUILD-SNAPSHOT.jar(org/springframework/beans/factory/BeanFactoryExtension.class): warning: Cannot find annotation method 'd1()' in type 'Metadata' /home/jvalkealahti/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/5.0.0.BUILD-SNAPSHOT/a63d010dba9471353da8224792a8b9880418560d/spring-beans-5.0.0.BUILD-SNAPSHOT.jar(org/springframework/beans/factory/BeanFactoryExtension.class): warning: Cannot find annotation method 'd2()' in type 'Metadata' ```  It'd be great if you could craft these kotlin classes so that if project depends on spring 5, java builds would be less quiet. Difficult to say where these are coming from as I don't know anything about kotlin.   ---  **Affects:** 5.0 M4","closed","","spring-projects-issues","2016-12-27T10:13:09Z","2019-01-11T15:15:43Z"
"","19788","ClassNotFoundException occurs when run my SpringCore program [SPR-15223]","**[janmejaya](https://jira.spring.io/secure/ViewProfile.jspa?name=janmejaya)** opened **[SPR-15223](https://jira.spring.io/browse/SPR-15223?redirect=false)** and commented  1.Create a simple ioc project. 2.Add all necessary jar file 3.Execute the program  Expected Output: Program Run Successfully. Actual: Caused by: java.lang.ClassNotFoundException: org.springframework.expression.ParserContext   ---  **Affects:** 4.2.7  **Attachments:** - [Untitled.png](https://jira.spring.io/secure/attachment/23700/Untitled.png) (_192.79 kB_)","closed","in: core,","spring-projects-issues","2017-02-05T18:05:38Z","2019-01-12T05:21:18Z"
"","19819","RestTemplate with MockMvcClientHttpRequestFactory double encodes URIs [SPR-15254]","**[Jan-Espen Oversand](https://jira.spring.io/secure/ViewProfile.jspa?name=janeover)** opened **[SPR-15254](https://jira.spring.io/browse/SPR-15254?redirect=false)** and commented  Using an URI with an email address as a request parameter with a RestTemplate method causes the @ to be double encoded. It should be encoded as %40, but will eventually end up as %2540.  The reason is that the MockMvcClientHttpRequestFactory will run .toString() on the URI before passing it over to the MockMvc request builder. The MockMvc request builder assumes that Strings are unencoded, and will (re-) encode the URI. Passing it as an URI to the MockMvc builder will skip that encoding step.   ---  **Affects:** 4.3.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c3cc42d4d32df5e2515a0a52615382d24c2cfe49, https://github.com/spring-projects/spring-framework/commit/a3561168b091cd03b104f7af6d85d063fe2a9d58","closed","type: bug,","spring-projects-issues","2017-02-14T08:51:47Z","2017-02-23T09:29:12Z"
"","19636","Session attributes not saved when ModelAndView returned for redirect [SPR-15070]","**[Jan Gurda](https://jira.spring.io/secure/ViewProfile.jspa?name=jgurda)** opened **[SPR-15070](https://jira.spring.io/browse/SPR-15070?redirect=false)** and commented  In my application I try to put an attribute to session (in post/redirect/get request pattern). When I return ModelAndView as a result of POST, requested attribute is not saved to session what ends up with following error on GET:  ``` org.springframework.web.HttpSessionRequiredException: Expected session attribute 'registeredUser' 	at org.springframework.web.method.annotation.ModelFactory.initModel(ModelFactory.java:115) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:805) ~[spring-webmvc-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) ~[spring-webmvc-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) ~[spring-webmvc-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.6.jar:8.5.6] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55) ~[spring-boot-1.4.2.RELEASE.jar:1.4.2.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:105) ~[spring-boot-actuator-1.4.2.RELEASE.jar:1.4.2.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:169) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:121) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:100) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.1.3.RELEASE.jar:4.1.3.RELEASE] 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:89) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:107) ~[spring-boot-actuator-1.4.2.RELEASE.jar:1.4.2.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) ~[tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108) [tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) [tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:784) [tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802) [tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1410) [tomcat-embed-core-8.5.6.jar:8.5.6] 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.6.jar:8.5.6] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_92] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_92] 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.6.jar:8.5.6] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_92] ```  Here is code which handles a POST and GET requests:  ```java @Controller @SessionAttributes(""registeredUser"") public class RegisterController { ...  @RequestMapping(value = ""/register"", method = RequestMethod.POST)     public ModelAndView registerWithForm(@ModelAttribute(""formData"") @Valid RegisterFormDto form, BindingResult bindingResult) {         if (bindingResult.hasErrors()) {             return new ModelAndView(""register"");         }         UserDto registeredUser = registerUserService.registerWithForm(form);         ModelAndView modelAndView = new ModelAndView();         modelAndView.setViewName(""redirect:/registered"");         modelAndView.addObject(""registeredUser"", registeredUser);         return modelAndView;     }      @RequestMapping(value = ""/registered"", method = RequestMethod.GET)     public ModelAndView displayRegistrationConfirmation(@ModelAttribute(""registeredUser"") UserDto registeredUser) {         return new ModelAndView(""registered"", ""registeredUser"", registeredUser);     }  ... } ```  I suspect problem lies in ModelFactory::updateModel method:  ```java public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception { 	ModelMap defaultModel = container.getDefaultModel(); 	if (container.getSessionStatus().isComplete()){ 		this.sessionAttributesHandler.cleanupAttributes(request); 	} 	else { 		this.sessionAttributesHandler.storeAttributes(request, defaultModel); 	} 	if (!container.isRequestHandled() && container.getModel() == defaultModel) { 		updateBindingResult(request, defaultModel); 	} } ```  Method ""ModelAndViewContainer::getDefaultModel"" returns model map which holds model for POST request and not POST response (new Model created as ModelAndView modelAndView = new ModelAndView(); ). I believe instead of ""ModelAndViewContainer::getDefaultModel"" there should be called ""ModelAndViewContainer::getModel"" to make session attributes aware of redirect. Even better solution would be to update session with attributes from ""ModelAndViewContainer::getDefaultModel"" and ""ModelAndViewContainer::getModel"" but then redirect model attributes could potentially override default model attributes.  I can workaround this problem by injecting Model to POST handler and put attribute to that model but would like to know your opinion if solution proposed by me makes sense.   ---  **Affects:** 4.3.4","closed","status: bulk-closed,","spring-projects-issues","2016-12-29T23:23:21Z","2019-01-12T00:11:40Z"
"","19845","ConfigurationProperties fails to bind a map with a value of an empty map [SPR-15279]","**[James Kleeh](https://jira.spring.io/secure/ViewProfile.jspa?name=schlogen)** opened **[SPR-15279](https://jira.spring.io/browse/SPR-15279?redirect=false)** and commented  I have a Groovy class  ``` @ConfigurationProperties(prefix = 'foo') class GrailsCorsConfiguration {     Map mappings = [:] } ```  In my configuration I have specified  ``` foo:     mappings:         bar: {} ```  When I inspect the class the mappings map is empty even though a key exists with an empty map as the value.  If I add something to the empty map, it is picked up correctly   ---  **Affects:** 4.3.6","closed","in: core,","spring-projects-issues","2017-02-22T17:26:02Z","2019-01-12T05:21:11Z"
"","19971","JmsListener should allow delivery mode on response [SPR-15408]","**[James Kirrage](https://jira.spring.io/secure/ViewProfile.jspa?name=jarmex)** opened **[SPR-15408](https://jira.spring.io/browse/SPR-15408?redirect=false)** and commented  When setting up a JmsListener that can send a response, it appears that it is not possible to set the delivery mode of the response that is sent back. Instead, DeliveryMode.PERSISTENT (the default) is enforced.  It looks like the this is happening because AbstractAdaptableMessageListener.sendResponse does not have any provision for using the following API of javax.jmx.MessageProducer:  ``` public void send(Message message, int deliveryMode, int priority, long timeToLive) ```  The logic in JmsTemplate.doSend calls producer.send in the following way:  ``` if (isExplicitQosEnabled()) { 	producer.send(message, getDeliveryMode(), getPriority(), getTimeToLive()); } else { 	producer.send(message); } ```  Perhaps similar options could be set somewhere in the hierarchy of the containerFactory passed to a JmsListener?   ---  **Affects:** 4.3.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1c0b3be6e60af5704a0d0ac6e119d620fe84b0f4, https://github.com/spring-projects/spring-framework/commit/4ffdb50681a9e4c81ccb1d1eb46ace804a3af0ad","closed","type: enhancement,","spring-projects-issues","2017-04-03T17:27:11Z","2017-05-08T08:41:44Z"
"","19665","Unable to specify factory bean in BeanDefinitionBuilder [SPR-15098]","**[James Howe](https://jira.spring.io/secure/ViewProfile.jspa?name=jamesmhowe)** opened **[SPR-15098](https://jira.spring.io/browse/SPR-15098?redirect=false)** and commented  For some reason, even though it has `setFactoryMethod`, it doesn't have `setFactoryBeanName`. You have to construct the `BeanDefinition` first, then add it.  ``` BeanDefinition definition = BeanDefinitionBuilder     .genericBeanDefinition(Foo.class)     .setScope(BeanDefinition.SCOPE_SINGLETON)     .setFactoryMethod(""createFoo"")     .addConstructorArgValue(argValue)     .getBeanDefinition(); definition.setFactoryBeanName(""fooFactory""); ```    ---  **Affects:** 4.3.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2f2ef00d1fcbd11a8b03bf67158c656a4621ad5c, https://github.com/spring-projects/spring-framework/commit/9e6aa0ff59b972f7b79be8e2b964d3c0354d116a","closed","type: enhancement,","spring-projects-issues","2017-01-05T16:33:05Z","2017-01-25T14:18:14Z"
"","19696","Using the Spring stomp broker relay forces reactor 2 and prevents using reactor 3 [SPR-15129]","**[James Burton](https://jira.spring.io/secure/ViewProfile.jspa?name=jimsey)** opened **[SPR-15129](https://jira.spring.io/browse/SPR-15129?redirect=false)** and commented  This is really more of a note than a request or issue. However, it might be worth adding a bit of text in the reference docs to ensure users know about this consequence if they opt to use the stomp broker relay.  I have been using the stomp broker relay (`StompBrokerRelayMessageHandler`) successfully in a spring boot project for about a year. However, I now want to start using reactor 3 in my project. Unfortunately, the spring stomp broker relay requires reactor 2 and will not work if reactor 3 is present instead.  I understand that spring boot v2 will have reactor 3 so I guess it will be upgraded in spring 5. My use of this broker is non-critical, so I will switch to the built-in spring stomp simple broker until the stomp broker relay is upgraded to reactor 3.   ---  **Affects:** 4.3.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/70a1ecba7f6838d45e56e0e298cfc80532dd5bf0","closed","type: task,","spring-projects-issues","2017-01-11T09:31:30Z","2017-01-25T14:18:14Z"
"","19659","Spring Security SAML has a logout based race condition [SPR-15093]","**[James Baker](https://jira.spring.io/secure/ViewProfile.jspa?name=jbaker)** opened **[SPR-15093](https://jira.spring.io/browse/SPR-15093?redirect=false)** and commented  I work on a project which uses Spring Security's SAML extension.  What we've found is that there's a race condition in the persistence of the logout request.  The desired flow is.  1. User is redirected to the IdP server for SingleLogout. 2. SAML server signs the logout request and returns them. 3. Spring validates that the response from the IdP was generated by Spring.  However, the order it does this is  1. Redirect the user. 2. Persist the request.  so if the SAML IdP is fast enough, and persistence is slow enough (as our replication mechanism is (50ms-ish)), step 3 occurs before the request is stored, so Spring thinks that the response was not generated by Spring and fails logout.  The fix is to click refresh, but you get a nice blank page in the meantime.  This causes us a fair bit of pain.  I made a PR to reorder these two operations (so persistence happens before we redirect the user), but it's not seen any activity for a few months. Any chance someone could take a look/release a new version after it merges?   --- No further details from [SPR-15093](https://jira.spring.io/browse/SPR-15093?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-01-04T15:51:27Z","2019-01-12T05:21:29Z"
"","20143","High percent of failures (timeout) under load from server-side WebClient requests [SPR-15584]","**[Jakub Rutkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=jrutkowski)** opened **[SPR-15584](https://jira.spring.io/browse/SPR-15584?redirect=false)** and commented  I just test by sample PoC project some blocking / non blocking solutions in simple common scenario.  Scenario: - There are rest blocking endpoint which is quite slow - each request tooks 200 ms. - There are other - client application, which call this slow endpoint.   I have tested current (blocking) Spring boot client (tomcat), Spring Boot 2.0 (netty) with WebFlux - WebClient, Ratpack and Lagom. In each cases I have stressed client application by gatling test simple scenario (100-1000 users / second).  I have tested ratpack and lagom as reference non blocking io servers to compare results to spring boot (blocking and non blocking).  In all cases i have results as expected, except spring boot 2.0 test. Its working only for small load levels but even then with high latency. If load level rises up - all requests are time outed. **(see attachments)**  WebClient usage :  ```java @RestController public class NonBlockingClientController {     private WebClient client = WebClient.create(""http://localhost:9000"");      @GetMapping(""/client"")     public Mono getData() {         return client.get()                 .uri(""/routing"")                 .accept(TEXT_PLAIN)                 .exchange().timeout(Duration.ofSeconds(30))                 .flatMap(clientResponse -> clientResponse.bodyToMono(String.class));     } } ```  I have no idea what goes wrong or current M1 version just working that.  All sources published at https://github.com/rutkowskij/blocking-non-blocking-poc  blocking-service - slow blocking endpoint non-blocking-client - Spring Boot 2.0M1 and WebClient based client  I have asked for this problem on - StackOverflow - https://stackoverflow.com/questions/43128467/spring-webflux-webclient-resilience-and-performance - SpringBoot Gitter   but nobody answer to this.  ---  **Affects:** 5.0 RC1, 5.0 RC2, 5.0 RC3  **Attachments:** - [springBoot2.png](https://jira.spring.io/secure/attachment/25093/springBoot2.png) (_63.85 kB_) - [springBoot2M2-Netty.png](https://jira.spring.io/secure/attachment/25010/springBoot2M2-Netty.png) (_67.49 kB_) - [SpringBoot2-Netty.png](https://jira.spring.io/secure/attachment/24995/SpringBoot2-Netty.png) (_65.16 kB_) - [spring-boot2-nonblocking-poc-resources.png](https://jira.spring.io/secure/attachment/25057/spring-boot2-nonblocking-poc-resources.png) (_58.22 kB_) - [SpringBootRatpack.png](https://jira.spring.io/secure/attachment/24996/SpringBootRatpack.png) (_61.87 kB_) - [SpringBoot-Tomcat-1000threads.png](https://jira.spring.io/secure/attachment/24997/SpringBoot-Tomcat-1000threads.png) (_60.87 kB_)  **Issue Links:** - #20338 Spring webflux app consumes more resources than non-reactive equivalent app implementation  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2017-05-24T12:12:53Z","2019-01-11T17:04:57Z"
"","20175","DefaultLifecycleProcessor fails to register beans implementing (Smart)Lifecycle interface created via FactoryBean [SPR-15616]","**[Jakub Danek](https://jira.spring.io/secure/ViewProfile.jspa?name=danekja)** opened **[SPR-15616](https://jira.spring.io/browse/SPR-15616?redirect=false)** and commented  While writing [XML configuration parser for spring session](https://github.com/spring-projects/spring-session/issues/104) I ran into the following problem: beans implementing SmartLifecycle interface are not picked up by DefaultLifecycleProcessor when created via FactoryBean.  To my understanding, this is not correct behaviour and the issue lies in the two following methods:  **DefaultLifecycleProcessor.getLifecycleBeans()**  ```java protected Map getLifecycleBeans() {      Map beans = new LinkedHashMap();      String[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false);      for (String beanName : beanNames) {           String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName);           boolean isFactoryBean = this.beanFactory.isFactoryBean(beanNameToRegister);           String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName);           if ((this.beanFactory.containsSingleton(beanNameToRegister) &&                         (!isFactoryBean || Lifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck)))) ||                         SmartLifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck))) {                Lifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class);                if (bean != this) {                         beans.put(beanNameToRegister, bean);                }           }      }      return beans; } ```  **AbstractBeanFactory.getType(String name)**  ```java @Override public Class getType(String name) throws NoSuchBeanDefinitionException { 	String beanName = transformedBeanName(name);  	// Check manually registered singletons. 	Object beanInstance = getSingleton(beanName, false); 	if (beanInstance != null) { 	    if (beanInstance instanceof FactoryBean && !BeanFactoryUtils.isFactoryDereference(name)) { 	        return getTypeForFactoryBean((FactoryBean) beanInstance); 	    } 	    else { 	        return beanInstance.getClass(); 	    } 	} 	else if (containsSingleton(beanName) && !containsBeanDefinition(beanName)) { 	    // null instance registered 	    return null; 	} ... } ```  Given how the code adds and removes the factorybean name prefix, the condition `beanInstance instanceof FactoryBean && !BeanFactoryUtils.isFactoryDereference(name)` is false and therefore the method AbstractBeanFactory.getType returns the class of the factory instead of the class of the bean which the factory creates.  The spring-session master branch works with Spring Framework 5.0, the attached showcase project where the issue is reproduced uses Spring 4.3.5.  In case I haven't missed anything, and this really is a bug, I'm happy to fix the issue. Yet I'm not sure which of the two methods actually misbehaves :).   ---  **Affects:** 4.3.5, 5.0 RC1  **Attachments:** - [spring-issue.tar.gz](https://jira.spring.io/secure/attachment/25005/spring-issue.tar.gz) (_1.67 kB_)","open","in: core,","spring-projects-issues","2017-06-02T15:27:36Z","2019-02-19T21:25:19Z"
"","19735","Spring MVC @RequestMapping should allow routing based on request body contents [SPR-15169]","**[Jacques Chester](https://jira.spring.io/secure/ViewProfile.jspa?name=jacques_chester)** opened **[SPR-15169](https://jira.spring.io/browse/SPR-15169?redirect=false)** and commented  Commonly, routing is based on a combination of HTTP method (POST, GET) and URI components (path, query params).  We have a product in which there are ""generate"" and ""regenerate"" operations, which can be applied to various ""types"" (vagueness for effect).  In a URI-based scheme, we might have done something like:  ``` @PostMapping(path = ""/a_type"")   public ResponseEntity generateAType( ... )  {   generateAType();  }  @PostMapping(path = ""/a_type"", params={""regenerate=true""})   public ResponseEntity generateAType( ... )  {   regenerateAType();  } ```  Then `POST /a_type` would create a new record, and `POST /a_type?regenerate=true` would regenerate a record. (We're handwaving away some other details).  However, for customer reasons, we cannot encode either of type or operation into the URI. Instead we have to embed these into a JSON payload. Currently in Spring it seems we could route based on matrix variables, query params or request attributes.  What we'd like is something similar for JSON payloads. For example, something like:  ``` @PostMapping(path = ""/a_type"", payloadParams={""regenerate=true""})   public ResponseEntity generateAType( ... )  {   regenerateAType();  } ```    ---  **Affects:** 4.3.5","closed","status: declined,","spring-projects-issues","2017-01-19T20:18:03Z","2020-03-31T20:25:23Z"
"","20211","Unable to turn-off Url Decoding in 'UrlPathHelper.setUrlDecode' [SPR-15652]","**[Izek Greenfield](https://jira.spring.io/secure/ViewProfile.jspa?name=igreenfi1)** opened **[SPR-15652](https://jira.spring.io/browse/SPR-15652?redirect=false)** and commented  Using spring-boot with Async MVC (defferdResult):  I have request mapping:  ``` ""/foo/{id}/add/{value}"" ```  The URI I send is:  ``` PUT /foo/vv%2F1234/add/2 (encoded URI of 'foo/vv/1234/add/2' ) ```  I try to set 'UrlPathHelper.setUrlDecode' to false:  ```java @SpringBootApplication public class Startup extends WebMvcConfigurerAdapter  {    @Override     public void configurePathMatch(PathMatchConfigurer configurer) {     UrlPathHelper urlPathHelper = new UrlPathHelper();     urlPathHelper.setUrlDecode(false);     configurer.setUrlPathHelper(urlPathHelper);   } } ```  But this only partially succeedes:  The controller gets the right values for the PathVariables (i.e. the `'{id}'` get the value: `'vv/1234'`), And all the logic is ok. BUT the response I finally get is ""405 Request Method 'PUT' not supported""  I found that the resource that is being used in the response path is not encoded and I also found that in many places in the code the Object 'UrlPathHelper' is newly created and doesn't use an injected reference to the object create and configure as per above. so, the new objects are not configured to turn off decoding. I also noticed this behaviour (creating new instaces internall by spring) happens in many places (which seems to break one of springs most basic features - IOC).  for example: org.springframework.web.context.request.async.WebAsyncManager org.springframework.boot.actuate.autoconfigure.MetricsFilter  ---  **Affects:** 4.2.8","closed","type: enhancement,","spring-projects-issues","2017-06-11T09:48:20Z","2019-01-13T20:29:32Z"
"","19972","SettableListenableFuture setException is inconsistent with callbacks under race [SPR-15409]","**[Ivan Sopov](https://jira.spring.io/secure/ViewProfile.jspa?name=isopov)** opened **[SPR-15409](https://jira.spring.io/browse/SPR-15409?redirect=false)** and commented  In continuation of #19781 and #19766 I decided to test setException method of SettableListenableFuture and received another portion of strange results.  With methods set(value) and setException(new Exception()) executed under race following cases are possible: - Both methods return false but SuccessCallback is executed - Both methods return false but FailureCallback is executed  I consider these cases as two flavors of the same problem - actually I expect that one of two methods will always return true.  Jcstress-based tests may be found here: https://github.com/isopov/isopov-jcstress/blob/master/src/main/java/com/sopovs/moradanen/jcstress/spring/SettableListenableFuture3Test.java  Also I tried to reproduce the problem without jcstress to better understand it and make sure that it lies not in my poor understanding of jcstress: https://github.com/isopov/isopov-jcstress/blob/master/src/main/java/com/sopovs/moradanen/jcstress/spring/SettableListenableFutureMain3Test.java This test does not reproduce the problem as reliably as jcstress-based one, but sometimes it still reproduces both flavors of the problem in the single run.  ---  **Affects:** 4.3.7  **Issue Links:** - #19766 SettableListenableFuture may be both set and canceled successfully - #19781 SettableListenableFuture may be successfully set with failureCallback executed and success callback ignored  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8321f01bf808dab90186b5009caa9698565d015e, https://github.com/spring-projects/spring-framework/commit/8cb24e0d93c9a073fc9a8b50692c90c2e19a5b43","closed","in: core,","spring-projects-issues","2017-04-03T22:51:33Z","2019-01-11T16:43:40Z"
"","19781","SettableListenableFuture may be successfully set with failureCallback executed and success callback ignored [SPR-15216]","**[Ivan Sopov](https://jira.spring.io/secure/ViewProfile.jspa?name=isopov)** opened **[SPR-15216](https://jira.spring.io/browse/SPR-15216?redirect=false)** and commented  Version that I tested is 4.3.7.BUILD-SNAPSHOT with the fix for #19766  I've checked fix for #19766 and it works. But I have wrote another test:  https://github.com/isopov/isopov-jcstress/blob/master/src/main/java/com/sopovs/moradanen/jcstress/spring/SettableListenableFuture2Test.java  It reveals that it is possible to successfully set value for this future, but success callback will not be executed and failure callback instead will be called. As in previous case it is the case of concurrently setting and cancelling future under race.  ---  **Affects:** 4.3.6  **Issue Links:** - #19766 SettableListenableFuture may be both set and canceled successfully - #20731 SettableListenableFuture set has a race on Java6 (and old versions of Java7) - #19972 SettableListenableFuture setException is inconsistent with callbacks under race","closed","in: core,","spring-projects-issues","2017-02-02T09:30:34Z","2019-01-11T14:34:28Z"
"","19766","SettableListenableFuture may be both set and canceled successfully [SPR-15202]","**[Ivan Sopov](https://jira.spring.io/secure/ViewProfile.jspa?name=isopov)** opened **[SPR-15202](https://jira.spring.io/browse/SPR-15202?redirect=false)** and commented  Please see this jcstress-based test:  https://github.com/isopov/isopov-jcstress/blob/master/src/main/java/com/sopovs/moradanen/jcstress/spring/SettableListenableFutureTest.java  There is no such bug in guava:  https://github.com/isopov/isopov-jcstress/blob/master/src/main/java/com/sopovs/moradanen/jcstress/guava/SettableFutureTest.java  Or in CompletableFuture from JUC:  https://github.com/isopov/isopov-jcstress/blob/master/src/main/java/com/sopovs/moradanen/jcstress/CompletableFutureTest.java  ---  **Affects:** 4.3.6  **Issue Links:** - #20731 SettableListenableFuture set has a race on Java6 (and old versions of Java7) - #19781 SettableListenableFuture may be successfully set with failureCallback executed and success callback ignored - #19972 SettableListenableFuture setException is inconsistent with callbacks under race  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9666fcc41dca4c8014c40736527d9eacf91893ed, https://github.com/spring-projects/spring-framework/commit/dec1c93b247ee28483f7f5a5bd1896b20cc40d11","closed","in: core,","spring-projects-issues","2017-01-29T16:04:04Z","2019-01-11T14:35:47Z"
"","19941","NullPointerException can happen in HttpRequestMethodNotSupportedException.getSupportedHttpMethods() [SPR-15377]","**[Istvan Ratkai](https://jira.spring.io/secure/ViewProfile.jspa?name=selindek)** opened **[SPR-15377](https://jira.spring.io/browse/SPR-15377?redirect=false)** and commented  You can create an object without supportedMethod array. public HttpRequestMethodNotSupportedException(String method) { this(method, (String[]) null); }  However when getSupportedHttpMethods() is called there is no null-check for this.supportedMethods in it:      public Set getSupportedHttpMethods() {     	List supportedMethods = new LinkedList();     	for (String value : this.supportedMethods) {     		HttpMethod resolved = HttpMethod.resolve(value);     		if (resolved != null) {     			supportedMethods.add(resolved);     		}     	}     	return EnumSet.copyOf(supportedMethods);     }    ---  **Affects:** 4.3.7","closed","type: bug,","spring-projects-issues","2017-03-23T13:43:27Z","2017-04-18T15:43:20Z"
"","20013","ApplicationListener potentially invoked twice in circular reference with proxy [SPR-15452]","**[Ilya Serkov](https://jira.spring.io/secure/ViewProfile.jspa?name=bivo)** opened **[SPR-15452](https://jira.spring.io/browse/SPR-15452?redirect=false)** and commented  ApplicationEvent can be received by ApplicationListener two times.  Can be reproduced when these conditions coincide: 1. Have at least two listener beans 2. Listeners implement ApplicationListener 3. One listener has dependency on another listener (`@Autowired`) 4. Listeners must have cyclic dependency with another bean 5. Listener which invoked twice must have at least one `@Transactional` method    ---  **Affects:** 4.2.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a2b356162e8062752a2d912cee05b1d6d5c45d5f, https://github.com/spring-projects/spring-framework/commit/9abf249cee58f1a23ff6f2f99ab56082a65aa617","closed","in: core,","spring-projects-issues","2017-04-13T15:57:40Z","2017-04-18T15:43:20Z"
"","20334","Ignore (Auto)Closeable for interface-based proxy decision [SPR-15779]","**[Illia Krokhmalov](https://jira.spring.io/secure/ViewProfile.jspa?name=jad7)** opened **[SPR-15779](https://jira.spring.io/browse/SPR-15779?redirect=false)** and commented  I want to create bean org.elasticsearch.action.bulk.BulkProcessor for Batch Job with scope ""job"" Like: `@Bean` `@JobScope` //`@Scope`(value = ""job"", proxyMode = ScopedProxyMode.TARGET_CLASS) public BulkProcessor bulkProcessor() { return BulkProcessor.builder(client(), esBulkListener()).build(); } Looks like this bean will be wrapped in 2 proxies: CGLIB for bean main and for the scope needs to JDK Proxy. As result: java.lang.ClassCastException: com.sun.proxy.$Proxy57 cannot be cast to org.elasticsearch.action.bulk.BulkProcessor at org.elasticsearch.action.bulk.BulkProcessor$$FastClassBySpringCGLIB$$f71ea361.invoke(\) ~[elasticsearch-2.4.5.jar:2.4.5] at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]...  BulkProcessor - is abstract class with interface java.io.Closeable and it can not be proxied by interface.   Full example attached.   ---  **Affects:** 4.3.9  **Attachments:** - [spring.proxy.bug.zip](https://jira.spring.io/secure/attachment/25045/spring.proxy.bug.zip) (_18.78 kB_)","closed","type: enhancement,","spring-projects-issues","2017-07-16T23:48:42Z","2017-07-20T20:07:24Z"
"","20290","UriComponents expand() and encode() are inconsistent and confusing [SPR-15734]","**[Ibrahim Ghazal](https://jira.spring.io/secure/ViewProfile.jspa?name=ibrahim.mg)** opened **[SPR-15734](https://jira.spring.io/browse/SPR-15734?redirect=false)** and commented  When using UriComponents expand() and encode() with path variables, slashes in the path variables are not escaped if the path variable was added using path(), but they are escaped if the path variable was added using pathSegment(). Furthermore, if normalize() is called, slashes are not escaped in either case.  Example code:  ```java String expanded = UriComponentsBuilder.fromUriString(""https://example.com/"") // 	.path(""/{var1}"") // encode() will *NOT* encode slashes in this variable 	.pathSegment(""{var2}"") // encode() *WILL* encode slashes in this variable 	.build() 	// .normalize() // If uncommented, encode() will *NOT* encode slashes in any path variable 	.expand(""var/1"", ""var/2"") 	.encode() 	.toUriString();  System.out.println(expanded); ```  output:  ``` https://example.com/var/1/var%2F2 ```  The underlying issue here is that expand() and encode() are two different calls, and once expand() is called, the information that this part of the path came from a path variable is lost and so encode() can't distinguish slashes inside the path variable from genuine path slashes. Internally, pathSegment() keeps each segment in a separate String so it doesn't suffer from this, but calling normalize() merges them into a single path and so the issue happens again.   ---  **Affects:** 5.0 RC2","closed","status: declined,","spring-projects-issues","2017-07-05T09:17:49Z","2019-01-13T20:29:19Z"
"","20180","Use ehcache.xml configuration defined name for CacheManager lookup. [SPR-15621]","**[Hurelhuyag](https://jira.spring.io/secure/ViewProfile.jspa?name=hurelhuyag)** opened **[SPR-15621](https://jira.spring.io/browse/SPR-15621?redirect=false)** and commented  ehcache.xml can have name property for cacheManager instance name. EhCacheManagerFactoryBean is not using this property.  ---  **Issue Links:** - #20178 EhCache: Ability to use CacheManager.newInstance for CacheManager creation","open","in: core,","spring-projects-issues","2017-06-04T11:59:57Z","2019-01-11T16:10:54Z"
"","20178","EhCache: Ability to use CacheManager.newInstance for CacheManager creation [SPR-15619]","**[Hurelhuyag](https://jira.spring.io/secure/ViewProfile.jspa?name=hurelhuyag)** opened **[SPR-15619](https://jira.spring.io/browse/SPR-15619?redirect=false)** and commented  If I use **CacheManager.newInstance** instead of **new CacheManager** I can share same cacheManager for spring method cache and hibernate cache.  Something like this.  ```java if (this.acceptExisting) { 			// EhCache 2.5+: Reusing an existing CacheManager of the same name. 			// Basically the same code as in CacheManager.getInstance(String), 			// just storing whether we're dealing with an existing instance. 			synchronized (CacheManager.class) { 				this.cacheManager = CacheManager.getCacheManager(this.cacheManagerName); 				if (this.cacheManager == null) { 					this.cacheManager = CacheManager.newInstance(configuration); 				} 				else { 					this.locallyManaged = false; 				} 			} 		} ```  ---  **Affects:** 4.3.7  **Issue Links:** - #20180 Use ehcache.xml configuration defined name for CacheManager lookup.","open","in: core,","spring-projects-issues","2017-06-03T11:28:17Z","2019-01-11T16:10:25Z"
"","20172","UriUtils.encode* methods needs to use Charset instance. [SPR-15613]","**[Hurelhuyag](https://jira.spring.io/secure/ViewProfile.jspa?name=hurelhuyag)** opened **[SPR-15613](https://jira.spring.io/browse/SPR-15613?redirect=false)** and commented  Since java 1.7 there is **StandardCharsets** helper class exist. We can use pre instantiated Charset instances. if we have **UriUtils.encodeFragment(String fragment, Charset charset)**. And we can omit **throws UnsupportedEncodingException** from method signature.   ---  **Affects:** 4.3.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3ae84d6dd8af742f1fcf90e4bd3972a4dc66aa68","closed","type: enhancement,","spring-projects-issues","2017-06-02T09:57:17Z","2017-06-14T10:12:18Z"
"","19680","Needed wildcard support for ReloadableResourceBundleMessageSource [SPR-15113]","**[Hurelhuyag](https://jira.spring.io/secure/ViewProfile.jspa?name=hurelhuyag)** opened **[SPR-15113](https://jira.spring.io/browse/SPR-15113?redirect=false)** and commented  I'm developing modular web application. I need to automatically register each module's messages.properties file to MessageSource. Currently I'm using below code. If MessageSource support wildcard it can be simple.  ```java     @Bean     public MessageSource messageSource() throws IOException {         PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(getClass().getClassLoader());         Resource[] resources = resolver.getResources(""classpath*:com/mycompany/*/messages*.properties"");         Set baseNames = new HashSet();         baseNames.add(""classpath:messages"");         for (Resource resource : resources){             String path = resource.getURI().toString();             int i = path.indexOf(""/WEB-INF/classes/"") + 17;             int j = path.lastIndexOf('_');             if (j == -1){                 j = path.lastIndexOf('.');             }             path = path.substring(i, j);             baseNames.add(""classpath:""+path);         }          ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();         messageSource.setBasenames(baseNames.toArray(new String[baseNames.size()]));         messageSource.setCacheSeconds(5);         messageSource.setUseCodeAsDefaultMessage(true);         messageSource.setDefaultEncoding(""UTF-8"");         return messageSource;     } ```    --- No further details from [SPR-15113](https://jira.spring.io/browse/SPR-15113?redirect=false)","open","in: core,","spring-projects-issues","2017-01-09T11:55:37Z","2021-11-10T12:09:15Z"
"","19663","Clarify WebContentInterceptor path mappings and efficiently match them [SPR-15096]","**[Hurelhuyag](https://jira.spring.io/secure/ViewProfile.jspa?name=hurelhuyag)** opened **[SPR-15096](https://jira.spring.io/browse/SPR-15096?redirect=false)** and commented  I expected this method return on first ant match. But this method always checking all matcher and returns last one. I think this is wrong.  ```java protected Integer lookupCacheSeconds(String urlPath) { 		// Direct match? 		Integer cacheSeconds = this.cacheMappings.get(urlPath); 		if (cacheSeconds == null) { 			// Pattern match? 			for (String registeredPath : this.cacheMappings.keySet()) { 				if (this.pathMatcher.match(registeredPath, urlPath)) { 					cacheSeconds = this.cacheMappings.get(registeredPath); 				} 			} 		} 		return cacheSeconds; 	} ```    ---  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/WebContentInterceptor.java#L241  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/801b93a07894522dcfe9b800a840d8687108ac7d, https://github.com/spring-projects/spring-framework/commit/af7289d6e9879f7494c1c18b8e2112afa5890dd4","closed","type: enhancement,","spring-projects-issues","2017-01-05T11:22:01Z","2017-01-25T14:18:15Z"
"","19821","Different handling in PathEditor in Servlet Context for existing and non-existing paths [SPR-15256]","**[Holger Stenzhorn](https://jira.spring.io/secure/ViewProfile.jspa?name=holger)** opened **[SPR-15256](https://jira.spring.io/browse/SPR-15256?redirect=false)** and commented  Following the advice from from [Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) in #19117, I have the code below ""living"" in a class of a webapp:  ``` @Value(""x"") Path a; @Value(""y"") Path b; @Value(""#{servletContext.getRealPath('x')}"") Path c; @Value(""#{servletContext.getRealPath('y')}"") Path d; ```  It is important to note that the directory `x` actually exists but `y` does not exist.  Now I have the following test method:  ``` private void test() {   Stream.of(a, b, c, d).forEach(p -> System.out.format(""%s\n%s\n\n"", p, p.toAbsolutePath())); } ```  This method returns:  ``` /Users/holger/Developer/test/out/artifacts/test_Web_exploded/x /Users/holger/Developer/test/out/artifacts/test_Web_exploded/x  y /usr/local/Cellar/tomcat/8.5.11/libexec/bin/y  /Users/holger/Developer/test/out/artifacts/test_Web_exploded/x /Users/holger/Developer/test/out/artifacts/test_Web_exploded/x  /Users/holger/Developer/test/out/artifacts/test_Web_exploded/y /Users/holger/Developer/test/out/artifacts/test_Web_exploded/y ```  So for existing paths there is no difference as can be seen from the output for `a` and `c`. But for non-existing paths there is a difference as the output for `b` and `d` shows.  I can see that the documentation for `PathEditor` says this:  > As a fallback, a path will be resolved in the file system via Paths#get(String) if no existing context-relative resource could be found.  So it seems to me that the above difference might be intentional...  (Note: My specific use case is that I want to specify with the above ""method"" a path where Lucene creates its index and that directory does not necessarily have to exist beforehand.)  ---  **Affects:** 4.3.6  **Issue Links:** - #19117 PathEditor returns wrong result for absolute path in servletContext.getRealPath(...)","open","in: web,","spring-projects-issues","2017-02-14T13:07:05Z","2021-11-11T09:38:58Z"
"","20053","Local @Sql annotation is favored over @Sql in composed annotation [SPR-15493]","**[Heiko Kolter](https://jira.spring.io/secure/ViewProfile.jspa?name=okieh)** opened **[SPR-15493](https://jira.spring.io/browse/SPR-15493?redirect=false)** and commented  After switching from Version 4.2.5.RELEASE to   4.3.8 RELEASE  execution of Unit-Test fails   ---  **Affects:** 4.3.8","closed","status: declined,","spring-projects-issues","2017-04-28T14:55:18Z","2019-03-02T12:11:05Z"
"","20368","Wrong message in MissingCsrfTokenException [SPR-15813]","**[Harmen Renkema](https://jira.spring.io/secure/ViewProfile.jspa?name=harmen.renkema)** opened **[SPR-15813](https://jira.spring.io/browse/SPR-15813?redirect=false)** and commented   --- No further details from [SPR-15813](https://jira.spring.io/browse/SPR-15813?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-07-24T13:23:10Z","2019-01-12T05:20:30Z"
"","20307","LinkedCaseInsensitiveMap cannot access locale from subclass [SPR-15752]","**[Harmen Renkema](https://jira.spring.io/secure/ViewProfile.jspa?name=harmen.renkema)** opened **[SPR-15752](https://jira.spring.io/browse/SPR-15752?redirect=false)** and commented  The `LinkedCaseInsensitiveMap` doesn't provide access to the locale from subclasses. Meaning you cannot easily override the `convertKey` method.  ---  **Affects:** 4.3.7  **Issue Links:** - #21126 Inconsistent handling of null values through Java 8 accessors in ConcurrentReferenceHashMap  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9b5132ce5386ecf1fade727bd52cc9b4fb99814e, https://github.com/spring-projects/spring-framework/commit/3802aca474d8defb05252e68ee6f81c513d3c3ad","closed","type: enhancement,","spring-projects-issues","2017-07-10T08:27:59Z","2019-01-11T16:27:26Z"
"","20301","give messages from  same order as corrsponding fields [SPR-15745]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-15745](https://jira.spring.io/browse/SPR-15745?redirect=false)** and commented  The tag  shows the error messages in random order. This order may even change from request to request. It would be ideal (for the end user) if the order of the error messages would be the same as the order of the corrsponding fields in the form.   ---  **Affects:** 4.3.9  **Reference URL:** https://github.com/desmethans/errorstag.git","open","in: web,","spring-projects-issues","2017-07-07T08:13:37Z","2019-01-11T16:28:43Z"
"","20214","Add get(key, timeout) function to org.springframework.cache.Cache [SPR-15655]","**[Gökhan Öner](https://jira.spring.io/secure/ViewProfile.jspa?name=gokhanoner)** opened **[SPR-15655](https://jira.spring.io/browse/SPR-15655?redirect=false)** and commented  This can give users reliable response times. Distributed caches like Hazelcast have this function already. Also `@Cachable` annotation can be enriched by adding timeout param there to user can decide it method based.  Other cache implementations can use Java 8 CompletableFuture to emulate this behaviour, if not already present.  Note: TimeUnit could be millisecond by default so removed from method signature to simplify   --- No further details from [SPR-15655](https://jira.spring.io/browse/SPR-15655?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-06-13T13:44:01Z","2017-06-13T14:31:02Z"
"","20183","Update Stomp Client Recommendation in Docs [SPR-15624]","**[Gunnar Hillert](https://jira.spring.io/secure/ViewProfile.jspa?name=hillert)** opened **[SPR-15624](https://jira.spring.io/browse/SPR-15624?redirect=false)** and commented  In the reference guide we are referring multiple time to an outdated and unmaintained version of the Stomp JavaScript client **stomp.js**:  https://github.com/jmesnil/stomp-websocket  Which library would we recommend going forward?  It looks like there are a few competing forks (no clear winner) around:  https://github.com/JSteunou/webstomp-client https://github.com/stomp-js/stomp-websocket  There is also an open question on this on Stackoverflow:  https://stackoverflow.com/questions/41119274/stomp-js-is-out-of-date-and-no-longer-maintained-which-stomp-client-to-use-wit  This may also raise a general question on the State of Stomp as a preferred means for doing websocket-based messaging.  Also, how does it relate to our [Reactive WebSocket Support](http://docs.spring.io/spring-framework/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/html/web-reactive.html#web-reactive-websocket-support) in WebFlux?  How does it relate to #19101  ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/86704112b0f2f5ba8c99c9b97e57a4bfefc01e27, https://github.com/spring-projects/spring-framework/commit/513461d4f1d324b69697c88054a6cb3979f6431f, https://github.com/spring-projects/spring-framework/commit/357fb48d1373ade92814cc46a95db89c7902ce91  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: task,","spring-projects-issues","2017-06-06T00:32:37Z","2019-01-11T16:11:02Z"
"","19796","DispatcherServlet's multipart request parsing fails during Jetty error dispatch [SPR-15231]","**[Gunnar Hillert](https://jira.spring.io/secure/ViewProfile.jspa?name=hillert)** opened **[SPR-15231](https://jira.spring.io/browse/SPR-15231?redirect=false)** and commented  I have a simple example where I upload files using Jetty. If a user uploads a file larger than permitted, an **`@ExceptionHandler`(MultipartException.class)** will perform a redirect to a page  informing the user of the issue.  This works as expected using Jetty **9.2.11.v20150529** but fails with **9.4.1.v20170120**.  In fact the ExceptionHandler is being triggered, but the redirect is ignored and the user gets a **ERR_CONNECTION_RESET** page (Chrome).  Not sure how far this is related to #19507  ---  **Affects:** 4.3.5  **Issue Links:** - #19744 DispatcherServet.checkMultipart() does not consider javax.servlet.error.exception that has a MultipartException cause  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d44325ec91e7245f55c7c637fe9d473fdf194ddf, https://github.com/spring-projects/spring-framework/commit/4d2360e5b51e0ca0dcfa39377e0a184518d7d6dd","closed","type: bug,","spring-projects-issues","2017-02-08T00:24:22Z","2019-01-14T04:36:21Z"
"","20261","CORS Options request forbidden with Webflux [SPR-15704]","**[Guillaume DROUET](https://jira.spring.io/secure/ViewProfile.jspa?name=gdrouet)** opened **[SPR-15704](https://jira.spring.io/browse/SPR-15704?redirect=false)** and commented  This issue has been reproduced with a spring boot application 2.0.0.M2 This is not reproduced with M1. Please find an example in attachment. A RouterFunction handles an options request to allow CORS. In the unit test, you can see that when a request is sent, a 403 is returned. It seems that the response is inspected by cors processor before the handler has been invoked.  ---  **Affects:** 5.0 RC2  **Attachments:** - [cors.zip](https://jira.spring.io/secure/attachment/25014/cors.zip) (_49.75 kB_)  **Issue Links:** - #20126 Add CORS support for functional style routes for WebFlux - #20095 Revisit DispatcherHandler integration for RouterFunctions","closed","status: declined,","spring-projects-issues","2017-06-26T09:13:57Z","2019-01-12T16:33:13Z"
"","20152","PushBuilder passed as parameter to request handler method is null [SPR-15593]","**[Guillaume DROUET](https://jira.spring.io/secure/ViewProfile.jspa?name=gdrouet)** opened **[SPR-15593](https://jira.spring.io/browse/SPR-15593?redirect=false)** and commented  I'm experimenting new Spring 5 features. My application is using the **spring-boot-starter-webmvc** version **2.0.0.M1**. By getting inspiration from https://github.com/bclozel/http2-experiments, I've enabled HTTP/2. Jetty version is **9.4.5.v20170502**. If I write a method handler that takes a **PushBuilder** as parameter, I get a null reference.  ```java @GetMapping(""/"") public Resource index(final PushBuilder builder) {     // builder is null  return new ClassPathResource(""static/drawing.html""); } ```  I tried to directly use the **HttpServletRequest**, but **newPushBuilder** returns null.  ```java @GetMapping(""/"") public Resource index(final HttpServletRequest httpServletRequest) {     // httpServletRequest.newPushBuilder() is null     return new ClassPathResource(""static/drawing.html""); } ```  If I fallback to the jetty native API, I successfully get a **PushBuilder**. I noticed in my browser that the resource is resolved from a server-push.  ```java @GetMapping(""/"") public Resource index(final HttpServletRequest httpServletRequest) {     ((Request) httpServletRequest).getPushBuilder().path(""/images/crayon-outline.png"").push();     return new ClassPathResource(""static/drawing.html""); } ```    ---  **Affects:** 5.0 RC1","closed","in: web,","spring-projects-issues","2017-05-26T15:51:03Z","2019-01-11T17:03:24Z"
"","19787","Bean dependencies resolved with custom ObjectFactory are null in autowired constructors [SPR-15222]","**[Guillaume DROUET](https://jira.spring.io/secure/ViewProfile.jspa?name=gdrouet)** opened **[SPR-15222](https://jira.spring.io/browse/SPR-15222?redirect=false)** and commented  If I register a custom `ObjectFactory`, I can resolve a bean produced by this factory when it's declared as an autowired field. However, when the dependency is declared as an argument in an autowired constructor, my reference is null.   ---  **Affects:** 5.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/65d8d698cded8e8222170907e55eee8d2582ff36, https://github.com/spring-projects/spring-framework/commit/da7d79b3a1a4352081ad657873a36ec7eb52e341","closed","in: core,","spring-projects-issues","2017-02-04T20:28:01Z","2019-01-11T14:32:59Z"
"","19727","Reactive web client Exception, with reactor-netty [SPR-15161]","**[Grigoriev Nick](https://jira.spring.io/secure/ViewProfile.jspa?name=grigor60)** opened **[SPR-15161](https://jira.spring.io/browse/SPR-15161?redirect=false)** and commented  when use Exception in thread ""main"" reactor.ipc.netty.channel.ContextHandler$1: Connection has been aborted by the remote peer org.springframework.web.reactive.function.client.WebClient cleint.exchange(ClientRequest.GET) First example can be find on my git hub.(Class Server, and Cleint. just run it) I will commit to spring-project-issues as soon as possible   ---  **Affects:** 5.0 M4  **Reference URL:** https://github.com/GrigorievNick/Spring5ReactiveNetty","closed","in: core,","spring-projects-issues","2017-01-18T13:35:34Z","2019-01-12T05:21:23Z"
"","20063","UriComponentsBuilder's fromHttpRequest uses server port as host port when handling the Forwarded header [SPR-15504]","**[Gregory Vandenbroucke](https://jira.spring.io/secure/ViewProfile.jspa?name=gvdenbro)** opened **[SPR-15504](https://jira.spring.io/browse/SPR-15504?redirect=false)** and commented  The UriComponentsBuilder's adaptFromForwardedHeaders method doesn't handle the host port of the Forwarded header correctly, which means that the URI generated through the fromHttpRequest method will append the server port to the host (of the Forwarded header), instead of just using the port (if any) defined in the host part of the Forwarded header. According to the RFC https://tools.ietf.org/html/rfc7239#section-5.3 and https://tools.ietf.org/html/rfc7230#section-5.4 the host part of the Forwarded header ""provides the host and port information from the target URI"", and as such should be handled in the adaptFromForwardedHeaders method.  The pull request 1413 will try to parse the port of the host of the Forwarded header, and configure the builder accordingly.  related pull request: https://github.com/spring-projects/spring-framework/pull/1413  ---  **Issue Links:** - #20809 spring-web CORS requires X-Forwarded-Port  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1413","closed","type: enhancement,","spring-projects-issues","2017-05-02T08:47:44Z","2019-01-11T17:10:52Z"
"","19857","Spring WebFlux doesn't handle redirect: directives when media type is requested [SPR-15291]","**[Greg Turnquist](https://jira.spring.io/secure/ViewProfile.jspa?name=gregturn)** opened **[SPR-15291](https://jira.spring.io/browse/SPR-15291?redirect=false)** and commented  The following code...  ``` @Controller public class WelcomeController {      @GetMapping(""/"")     @ResponseBody     public String welcome() {         return ""Hello World"";     }      @GetMapping(""/redir"")     public Mono redir() {         return Mono.just(""redirect:/"");     } } ```  generates the following stacktrace...  ``` java.lang.IllegalStateException: Could not resolve view with name 'redirect:/'.     at org.springframework.web.reactive.result.view.ViewResolutionResultHandler.lambda$resolveViews$5(ViewResolutionResultHandler.java:274) ```  ---  **Affects:** 5.0 M5  **Issue Links:** - #19103 Reactive HTTP response based RedirectView  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/226c9f9a73d9468b5c0b1c7dfc35700619e06386, https://github.com/spring-projects/spring-framework/commit/718162b8c428220f4cb9c86092c9c651dec6e71c","closed","in: core,","spring-projects-issues","2017-02-27T16:37:02Z","2019-01-11T14:26:32Z"
"","19770","Create reactive HiddenHttpMethodFilter to support alternate mappings [SPR-15206]","**[Greg Turnquist](https://jira.spring.io/secure/ViewProfile.jspa?name=gregturn)** opened **[SPR-15206](https://jira.spring.io/browse/SPR-15206?redirect=false)** and commented  Thymeleaf allows  ```         ```  in order to embed a hidden ""DELETE"" verb, which turns an HTML POST into an HTTP DELETE (same for PUT and other HTTP verbs).  We need support for this in Spring WebFlux.   ---  **Affects:** 5.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5488906d0c01ca280cbc44b2fb373cfed10ab76f, https://github.com/spring-projects/spring-framework/commit/e4be7131ca74c23275837684ce63d839469a0dda","closed","type: enhancement,","spring-projects-issues","2017-01-30T15:59:34Z","2017-02-23T09:29:11Z"
"","20331","Support Protobuf serialization in WebFlux [SPR-15776]","**[Greg Laubenstein](https://jira.spring.io/secure/ViewProfile.jspa?name=gjlaubenstein)** opened **[SPR-15776](https://jira.spring.io/browse/SPR-15776?redirect=false)** and commented  Currently there is no built in means to serialize and deserialize data objects with RPC/protobuf with reactive-web/webflux.  ---  **Affects:** 5.0.4  **Issue Links:** - #20513 Add CBOR support to WebFlux - #20905 Provide gRPC support - #10477 Spring REST `@MVC`: Add support for google Protocol Buffers resource representation format - #19985 Add Jackson Smile support to WebFlux - #21962 ProtobufDecoder assumes number of bytes in delimited format will not be split into chunks - #21283 Invalid mime type application/stream+json - #21618 Deprecate ExtensionRegistryInitializer in protobuf support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3899b7a909b15f521f99b2d267cb74264ac9682e, https://github.com/spring-projects/spring-framework/commit/36bbbab02da4d5c4500523f23a5ce28fa6a87dfb, https://github.com/spring-projects/spring-framework/commit/36a07aa89747bb5942bd4a1bf7f5192a2c48c5ef, https://github.com/spring-projects/spring-framework/commit/6b6384a09ed643252e46551d2cf58dbf5b485c88  4 votes, 13 watchers","closed","type: enhancement,","spring-projects-issues","2017-07-15T00:40:30Z","2019-01-14T04:34:46Z"
"","19848","Cannot receive message sometimes with SimpleBrokerMessageHandler [SPR-15282]","**[glodon](https://jira.spring.io/secure/ViewProfile.jspa?name=zhoub)** opened **[SPR-15282](https://jira.spring.io/browse/SPR-15282?redirect=false)** and commented  when large number of clients reconnected, some client cannot receive data  this problem seems to be caused by class DefaultSubscriptionRegistry，  if connections is more than CacheLimit, when all of them disconnected, updatecache will be cleared, but some destination will be remain in accessCache,  when clients reconnect , if the destination exist in accessCache，destination Info will not be update  so the message will not send sucessfully  // code for this problem  ```java // add destination to cache 	public LinkedMultiValueMap getSubscriptions(String destination, Message message) { 		LinkedMultiValueMap result = this.accessCache.get(destination); 		// only put when destination not exist in accessCache 		if (result == null) { 			synchronized (this.updateCache) { 				... 				if (!result.isEmpty()) { 					this.updateCache.put(destination, result.deepCopy()); 					this.accessCache.put(destination, result); 				} 			} 		} 		return result; 	} ```  ```java // clients disconnect 	public void updateAfterRemovedSession(SessionSubscriptionInfo info) { 		synchronized (this.updateCache) { 			Set destinationsToRemove = new HashSet(); 			for (Map.Entry entry : this.updateCache.entrySet()) { 				// set value for destinationsToRemove 			} 			for (String destination : destinationsToRemove) { 				this.updateCache.remove(destination); 				this.accessCache.remove(destination); 			} 		} 	} ```  ---  **Affects:** 4.2.9, 4.3.6, 5.0 M5  **Issue Links:** - #20102 DefaultSubscriptionRegistry should prevent duplicate subscription id in accessCache - #19976 SimpleBrokerMessageHandler SubscriptionRegistry DestinationCache doesn't honour unique subscriptionId","closed","in: messaging,","spring-projects-issues","2017-02-24T10:15:19Z","2019-01-11T14:27:29Z"
"","20040","MockHttpServletRequestBuilder param ignored with SpringSecurity [SPR-15480]","**[Gilles Robert](https://jira.spring.io/secure/ViewProfile.jspa?name=ask4gilles@gmail.com)** opened **[SPR-15480](https://jira.spring.io/browse/SPR-15480?redirect=false)** and commented  I'm trying to perform integration tests on secured REST endpoints.  Here is my spring security config:  ```java protected void configure(HttpSecurity http) throws Exception { // NOPMD      http.csrf().disable();     http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);      http.authorizeRequests()         .regexMatchers(HttpMethod.GET, ""/secured"" + ""\\?.*view=view-secured.*"").authenticated();   } ```  Here is my controller:  ```java @RestController public class DemoController {    @GetMapping(value = ""/secured"", params = ""view=view-secured"")   public String helloSecuredWorld(){     return ""Hello secured world!"";   } } ```  When using mockMvc, with springSecurity enabled:  ```java mockMvc = MockMvcBuilders       .webAppContextSetup(webApplicationContext)       .apply(springSecurity())       .build(); ```  The params added to the URI are ignored:  ```java // when  ResultActions result = mockMvc.perform(get(""/secured"")         .param(""view"", ""view-secured""));  // then     result         .andExpect(status().isForbidden()); ```  I get a 200 reply instead of 403.  While using query string directly:  ```java // when  ResultActions result = mockMvc.perform(get(""/secured?view=view-secured""));   // then     result         .andExpect(status().isForbidden()); ```  The reply is as expected a 403.    ---  **Affects:** 4.3.6  **Attachments:** - [uri-spring-demo.tar](https://jira.spring.io/secure/attachment/24909/uri-spring-demo.tar) (_400.00 kB_)","closed","status: declined,","spring-projects-issues","2017-04-25T14:19:14Z","2019-01-12T16:33:22Z"
"","20244","ClientResponse bodyToFlux fails when encoding empty JSON array [SPR-15685]","**[Gilberto J Requena](https://jira.spring.io/secure/ViewProfile.jspa?name=gilbertojrequena)** opened **[SPR-15685](https://jira.spring.io/browse/SPR-15685?redirect=false)** and commented  When the web client receives an empty array JSON as response a MismatchedInputException occurs.  In the following project https://github.com/gilbertojrequena/web-reactive-test you can find the example code.  Here the falling test https://github.com/gilbertojrequena/web-reactive-test/blob/master/src/test/java/com/gilbertojrequena/reactive/service/FooServiceTest.java#L37  ```java org.springframework.core.codec.DecodingException: JSON decoding error: No content to map due to end-of-input; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: No content to map due to end-of-input  at [Source: (io.netty.buffer.ByteBufInputStream); line: 1, column: 0]))  	at reactor.test.DefaultStepVerifierBuilder.failPrefix(DefaultStepVerifierBuilder.java:2114) 	at reactor.test.DefaultStepVerifierBuilder.fail(DefaultStepVerifierBuilder.java:2110) 	at reactor.test.DefaultStepVerifierBuilder.lambda$expectComplete$3(DefaultStepVerifierBuilder.java:199) 	at reactor.test.DefaultStepVerifierBuilder$SignalEvent.test(DefaultStepVerifierBuilder.java:1855) 	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onSignal(DefaultStepVerifierBuilder.java:1241) 	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onExpectation(DefaultStepVerifierBuilder.java:1186) 	at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.onError(DefaultStepVerifierBuilder.java:858) 	at reactor.core.publisher.MonoFlatMapMany$FlatMapInner.onError(MonoFlatMapMany.java:234) 	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:120) 	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:104) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:487) 	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onSubscribe(FluxFlatMap.java:896) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:89) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:54) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:380) 	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) 	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) 	at reactor.ipc.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:207) 	at reactor.ipc.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:322) 	at reactor.ipc.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:316) 	at reactor.ipc.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:581) 	at reactor.ipc.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:125) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) 	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) 	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:310) 	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:297) 	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:413) 	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:265) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) 	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) 	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) 	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) 	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1334) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) 	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:926) 	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:134) 	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:644) 	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:579) 	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:496) 	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:458) 	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858) 	at java.lang.Thread.run(Thread.java:748) 	Suppressed: org.springframework.core.codec.DecodingException: JSON decoding error: No content to map due to end-of-input; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: No content to map due to end-of-input  at [Source: (io.netty.buffer.ByteBufInputStream); line: 1, column: 0] 		at org.springframework.http.codec.json.Jackson2JsonDecoder.lambda$decodeInternal$0(Jackson2JsonDecoder.java:124) 		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100) 		... 38 more 	Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: No content to map due to end-of-input  at [Source: (io.netty.buffer.ByteBufInputStream); line: 1, column: 0] 		at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:58) 		at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1320) 		at com.fasterxml.jackson.databind.ObjectReader._initForReading(ObjectReader.java:356) 		at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:1598) 		at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1183) 		at org.springframework.http.codec.json.Jackson2JsonDecoder.lambda$decodeInternal$0(Jackson2JsonDecoder.java:116) 		... 39 more ```    ---  **Affects:** 5.0 RC2  **Reference URL:** https://github.com/gilbertojrequena/web-reactive-test  **Attachments:** - [20.06.png](https://jira.spring.io/secure/attachment/25011/20.06.png) (_120.16 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0a4d3c14dbdf3b0ddb03ab1362753e34158858d9","closed","type: bug,","spring-projects-issues","2017-06-20T15:00:27Z","2017-07-24T07:51:16Z"
"","20338","Spring webflux app consumes more resources than non-reactive equivalent app implementation [SPR-15783]","**[Ghislain Manib Mbogos](https://jira.spring.io/secure/ViewProfile.jspa?name=ghislain)** opened **[SPR-15783](https://jira.spring.io/browse/SPR-15783?redirect=false)** and commented  **Scenario** For the sake of ascertaining the benefits of the reactive programming we have implemented a spring boot service which fetches data from a MongoDB and returns it via a REST API to the service consumers. The Spring Boot service exists in two variants; 1. A non-reactive implementation with spring boot , MongoRepository . This service returns the data as List\ 2. A reactive   implementation with spring boot, ReactiveMongoRepository, spring-boot-starter-webflux (Version 2.0.0.M1). This service returns the data as Flux\.  In both implementations the rest controller directly fetches the data from the repository and returns it as List resp. as Flux. No further application logic is executed.  **Observed Results** When executing a load/performance test with 100 users it appeared that the non-reactive implementation had a better HTTP throughput and it consumed less CPU and less Threads that the reactive implementation!  **Expected Results** we anticipated the reactive version to scale with a small number of thread as mentioned in https://spring.io/blog/2016/07/28/reactive-programming-with-spring-5-0-m1  **Example application** https://github.com/gma31/Showcase/tree/ECM-182/services Information how to start the different  service implementation and feed them with test data is provided in corresponding the README files  ---  **Attachments:** - [JConsole_VMSummary_non-reactive_Run_100_users.txt](https://jira.spring.io/secure/attachment/25047/JConsole_VMSummary_non-reactive_Run_100_users.txt) (_9.79 kB_) - [JConsole_VMSummary_reactive_Run_100_users.txt](https://jira.spring.io/secure/attachment/25046/JConsole_VMSummary_reactive_Run_100_users.txt) (_10.87 kB_)  **Issue Links:** - #20143 High percent of failures (timeout) under load from server-side WebClient requests  0 votes, 6 watchers","closed","status: declined,","spring-projects-issues","2017-07-17T12:41:14Z","2019-01-12T16:33:11Z"
"","20197","Quartz - Implicit JobDetails registration and missing Trigger from the Datasource issue [SPR-15638]","**[George Sfiris](https://jira.spring.io/secure/ViewProfile.jspa?name=george.sfiris)** opened **[SPR-15638](https://jira.spring.io/browse/SPR-15638?redirect=false)** and commented  ## Description  There is a bug about [Quartz](http://www.quartz-scheduler.org/) Job Sheduler and Spring related Factory Beans. I noticed that there is a problem when _overwriteExistingJobs=true_ and there is a Trigger which doesn't exist in the database but implicitly registers a JobDetails which exist in the database, as SchedulerFactoryBean fails to save or update both Trigger and JobDetails.  ## Steps to reproduce  1. Create a Scheduler Bean using SchedulerFactoryBean 2. set _overwriteExistingJobs=true_ 3. set datasource appropriately in order to store data in Database 4. Register a SimpleTrigger with _repeatInterval=1000_ and _repeatCount=5_ (generally keep repeatCount and repeatInterval values low) 5. In this trigger register implicitly a JobDetails with _Durability=true_ (in order to retain this JobDetails in the Database) 6. Register this trigger in SchedulerFactoryBean but not the JobDetails. (JobDetails will be implicitly registered through Trigger) 7. Start the application 8. You will notice that when SimpleTrigger reach the reapeatCount will be deleted from the database. But JobDetails will not as is marked with _Durability=true_ 9. Stop the appication and start it again 10. You will notice that SimpleTrigger is not executed anymore. 11. After this Register Explicitly the jobDetails in the SchedulerFactoryBean 12. Run the application 13. You will notice that SimpleTrigger is executed  In order to make it easier to reproduce this issue I created an example project [spring-scheduling-implicit-job-registration-example](https://github.com/george-sfiris/spring-scheduling-implicit-job-registration-example) in GitHub.  ## Sample Code  ```xml                                                                                                                                                                                                                                                                                                                                        ```  ```xml                                                                                                                                                                                                                                         ```    ---  **Affects:** 4.3.5, 4.3.6, 4.3.7, 4.3.8  **Reference URL:** https://github.com/george-sfiris/spring-scheduling-implicit-job-registration-example","open","in: core,","spring-projects-issues","2017-06-07T18:48:55Z","2021-11-10T12:03:12Z"
"","19779","Principal check in ServletRequestMethodArgumentResolver can result in type mismatches [SPR-15214]","**[George Hawkins](https://jira.spring.io/secure/ViewProfile.jspa?name=ghawkins)** opened **[SPR-15214](https://jira.spring.io/browse/SPR-15214?redirect=false)** and commented  The [`Principal` check](https://github.com/spring-projects/spring-framework/blob/85b0ce1ef78ea0aa795e80821e206cc851c9894b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java#L103) in `ServletRequestMethodArgumentResolver` can result in the method returning a value that is clearly of a type that's unassignable to something of `paramType`.  This [gist](https://gist.github.com/george-hawkins/3b030c04a55d03b85a99bc69228648b5) is a JUnit test that cuts things down to a minimum and demonstrates that the `Principal` check will happily return something that is a `Principal` subclass in the apparent belief it will be assignable to any other subclass of `Principal` - i.e. the same as thinking that a `Double` value will be assignable to an `Integer` on the basis that both are subclasses of `Number`.  Note: just to be clear this test is expected to fail - it's demonstrating our problem case.  ---  **Affects:** 4.3.6  **Reference URL:** https://gist.github.com/george-hawkins/3b030c04a55d03b85a99bc69228648b5  **Issue Links:** - #19780 MockHttpServletRequest.getReader() returns null in case of no content  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e44533f4c21a7dba303ac075363f26e054b0c5bf, https://github.com/spring-projects/spring-framework/commit/fc113210104082f96ec6516a66d2397f9d23554a, https://github.com/spring-projects/spring-framework/commit/f117b804a8a9ec1b037aac66d8c9b710b6e7d299, https://github.com/spring-projects/spring-framework/commit/6014ca91402a7b0224d2adb6425ac5046cca99f5","closed","type: bug,","spring-projects-issues","2017-02-01T16:09:59Z","2019-01-11T14:34:40Z"
"","19831","Doc: Consistent @Profile declarations on overloaded @Bean methods [SPR-15266]","**[Georg Herdt](https://jira.spring.io/secure/ViewProfile.jspa?name=geoherdt)** opened **[SPR-15266](https://jira.spring.io/browse/SPR-15266?redirect=false)** and commented  When having bean factory methods with the same name but different arguments used for creating instance for different profiles the bean is not recognized for some profiles. See example below:  ```java @Configuration public class SomeConfiguration {      @Bean(name = ""something"")     @Profile(""A"")     public String valueForTest() {         return ""aaa"";     }      @Bean     public String secondValue() {         return ""bbb"";     }      @Bean(name = ""something"")     @Profile(""B"")     @Autowired     public String valueForTest(final String secondValue) {         return secondValue;     } } ```  Corresponding test will fail:  ```java @RunWith(SpringJUnit4ClassRunner.class) @ActiveProfiles(""A"") @ContextConfiguration(classes = { SomeConfiguration.class }) public class SomeConfigurationTest_ProfileA {      @Autowired     @Qualifier(""something"")     private String valueForTest;      @Autowired     private String secondValue;      @Test     public void test() {         Assert.assertEquals(""aaa"", valueForTest);     }  } ```  When using profile ""B"" dependencies for bean named  ""something"" will be created successfully. Providing string value ""bbb"". For profile ""A"" it is not working properly. Behaviour depends on used Spring version. For releases 4.0.0. up to 4.1.4 outcome will be ""bbb"". I would expect ""aaa"".  From release 4.1.5 on (including 5.x.x releases) a NoSuchBeanDefinitionException is thrown.  See the attached gradle project to evaluate the behaviour.  ---  **Affects:** 4.3.6, 5.0 M4  **Attachments:** - [spring-config-issue.zip](https://jira.spring.io/secure/attachment/23717/spring-config-issue.zip) (_60.00 kB_)  **Issue Links:** - #17341 Regression in 4.1.5: Alternative `@Bean` declarations with same primary bean name do not work anymore - #17292 Conditions on an overriding bean method effectively get ignored - #19074 Deterministic and JVM-independent `@Bean` registration order within Class-reflected configuration classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5d3249f6925f841f5b3e1395d81a78b239df0f1a, https://github.com/spring-projects/spring-framework/commit/6c370ed28d93519698fbb4b1f68742acff42d628, https://github.com/spring-projects/spring-framework/commit/022aefdfe8656f0aa315dbbd8c84a2e3a816e762","closed","in: core,","spring-projects-issues","2017-02-18T02:27:13Z","2019-01-13T05:17:12Z"
"","20050","Class-level annotations, in a @Configuration class, are ignoring the @Profile check [SPR-15490]","**[Gaspar Rajoy](https://jira.spring.io/secure/ViewProfile.jspa?name=gaspo53@gmail.com)** opened **[SPR-15490](https://jira.spring.io/browse/SPR-15490?redirect=false)** and commented  Having this code:  ``` @Profile(Profiles.PRODUCTION) @Configuration @EnableMongoHttpSession(collectionName=""building_sessions"") public class HttpSessionConfig {          @Bean         public JdkMongoSessionConverter jdkMongoSessionConverter() {                 return new JdkMongoSessionConverter();          } } ```  Despite current profile is DEVELOP, and not PRODUCTION, `@EnableMongoHttpSession` is taking efect anyway.   --- No further details from [SPR-15490](https://jira.spring.io/browse/SPR-15490?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-04-27T15:21:01Z","2019-01-12T05:20:55Z"
"","20229","Inconsistent @Nullable on AbstractDestinationResolvingMessagingTemplate [SPR-15670]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-15670](https://jira.spring.io/browse/SPR-15670?redirect=false)** and commented  In `AbstractDestinationResolvingMessagingTemplate`, some methods are missing `@Nullable` on `MessagePostProcessor`.  For example,  ```java public  void convertAndSend(String destinationName, T payload, MessagePostProcessor postProcessor) ```  delegates to  ```java public  void convertAndSend(String destinationName, T payload, @Nullable Map headers, @Nullable MessagePostProcessor postProcessor) ```  Also  ```java public  T convertSendAndReceive(String destinationName, Object request, Class targetClass, 			MessagePostProcessor postProcessor)  public  T convertSendAndReceive(String destinationName, Object request, Map headers, 			Class targetClass, MessagePostProcessor postProcessor) ```  delegate to methods in the superclass that have `@Nullable MessagePostProcessor postProcessor`.  ---  **Affects:** 5.0 RC2  **Issue Links:** - #20099 Introduce null-safety of Spring Framework API  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7e251274ee574589d53e98a2042e731de4b8ac9c","closed","type: bug,","spring-projects-issues","2017-06-15T19:52:46Z","2019-01-11T16:04:33Z"
"","20150","GenericMessagingTemplate - add overloaded doReceive() for dynamic receiveTimeout [SPR-15591]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-15591](https://jira.spring.io/browse/SPR-15591?redirect=false)** and commented  Currently, `doReceive()` uses the provisioned `receiveTimeout` field - we have a requirement to provide a runtime timeout in some `sendAndReceive` use cases.  I would like to get this into 5.0 (RC2 or 3) if possible (I will submit a PR if there is agreement).  There are currently many `convertSendAndReceive` overloaded public methods. I am not sure it's necessary to double all of those to include the new parameter; I think it would be sufficient for subclasses to provide any specialized methods as needed (that would solve our use case, since we need to calculate the timeout using a SpEL expression anyway and it's likely we will need a custom evaluation context for each request anyway).  However, I can add a full set of overloads if you would prefer that.  [Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) [rstoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoyanchev) please let me know your thoughts; thanks..   ---  **Affects:** 5.0 RC1  **Issue Links:** - [INT-4033](https://jira.spring.io/browse/INT-4033) Consider Adding Expressions for Gateway Properties (_**""is depended on by""**_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1435, and commits https://github.com/spring-projects/spring-framework/commit/e06c4d5116e35e21a4cfb3f202de5a290ae468c4","closed","type: enhancement,","spring-projects-issues","2017-05-25T23:56:41Z","2017-06-14T10:12:18Z"
"","22193","Consider adding originalMessage to ErrorMessage [SPR-15459]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-15459](https://jira.spring.io/browse/SPR-15459?redirect=false)** and commented  In Spring Integration (and derivative projects such as Spring Cloud Stream), we have a need to add property `inputMessage` or `originalMessage` or similar to the `ErrorMessage`.  Typically, the payload of an `ErrorMessage` is a `MessagingException` with a `failedMessage` property containing the message at the point of failure.  The original message at the place in the stack where the exception is caught (and the `ErrorMessage` created) may be different to the message at the point of failure - it may have gone through several transformations before the exception occurs.  In certain use cases, it would be useful to have access to both messages for error handling purposes. Hence the desire to add this property.  We can (and have) create a subclass for this, but are having a hard time coming up with a good name `EnhancedErrorMessage` , `ExtendedErrorMessage` etc.  So we wish to float the idea to add it to the core `ErrorMessage` since it might be useful elsewhere.  If you concur, we'd be happy to issue a PR. It would be nice to have it in a 4.3.x release too, but we can live with our badly named subclass until 5.0 (or indefinitely if you don't want this in core messaging).  [Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) [rstoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoyanchev)  [EnhancedErrorMessage](https://github.com/garyrussell/spring-integration/commit/63cb9b84945a04bca0c1eba004aa01452ea792b1#diff-b0e3ff215d546c62cfa26dd166452733R26).   ---  **Issue Links:** - [INT-2116](https://jira.spring.io/browse/INT-2116) Support Capture of Original Inbound Message in ErrorMessage  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1395, and commits https://github.com/spring-projects/spring-framework/commit/c16c8f26f55ed68f1446b04e165281d883948ecb, https://github.com/spring-projects/spring-framework/commit/e93e49f268ce93ba67d33e71a79f05dc3a195ba9, https://github.com/spring-projects/spring-framework/commit/e677342628847104265420a2cb5d3e35b7891caa","closed","type: enhancement,","spring-projects-issues","2017-04-18T20:44:44Z","2019-01-14T04:13:44Z"
"","19795","InvocableHandlerMethod calls makeAccessible(getBridgedMethod()) on every call [SPR-15230]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-15230](https://jira.spring.io/browse/SPR-15230?redirect=false)** and commented  This could be done once in the `HandlerMethod` ctor where the field is set up, although perhaps `getBridgedMethod()` should be `final` ?   ---  **Affects:** 4.3.6","closed","type: enhancement,","spring-projects-issues","2017-02-07T18:39:25Z","2021-09-14T13:58:27Z"
"","19758","SpelCompiler VerifyError - Incompatible argument to function [SPR-15192]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-15192](https://jira.spring.io/browse/SPR-15192?redirect=false)** and commented  Method execution with an Elvis operator on a `Map` in the method argument expression.  ``` java.lang.IllegalStateException: Failed to instantiate CompiledExpression 	at org.springframework.expression.spel.standard.SpelCompiler.compile(SpelCompiler.java:111) 	at org.springframework.expression.spel.standard.SpelExpression.compileExpression(SpelExpression.java:467) 	at org.springframework.expression.spel.standard.SpelExpression.checkCompile(SpelExpression.java:437) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:331) 	at com.example.CompilerTests.test(CompilerTests.java:67) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) Caused by: java.lang.VerifyError: (class: spel/Ex5, method: getValue signature: (Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;) Incompatible argument to function 	at java.lang.Class.getDeclaredConstructors0(Native Method) 	at java.lang.Class.privateGetDeclaredConstructors(Class.java:2671) 	at java.lang.Class.getConstructor0(Class.java:3075) 	at java.lang.Class.newInstance(Class.java:412) 	at org.springframework.expression.spel.standard.SpelCompiler.compile(SpelCompiler.java:108) 	... 27 more  ```  ```java public class CompilerTests {  	@Test 	public void test() { 		SpelParserConfiguration configuration = new SpelParserConfiguration(SpelCompilerMode.IMMEDIATE, null);  		Expression exp = new SpelExpressionParser(configuration).parseExpression(""bar()""); // OK 		assertEquals(""BAR"", exp.getValue(new Foo(), String.class)); 		assertEquals(""BAR"", exp.getValue(new Foo(), String.class)); 		assertEquals(""BAR"", exp.getValue(new Foo(), String.class)); 		assertNotNull(new DirectFieldAccessor(exp).getPropertyValue(""compiledAst""));  		exp = new SpelExpressionParser(configuration).parseExpression(""bar('baz')""); // OK 		assertEquals(""BAZ"", exp.getValue(new Foo(), String.class)); 		assertEquals(""BAZ"", exp.getValue(new Foo(), String.class)); 		assertEquals(""BAZ"", exp.getValue(new Foo(), String.class)); 		assertNotNull(new DirectFieldAccessor(exp).getPropertyValue(""compiledAst""));  		StandardEvaluationContext context = new StandardEvaluationContext(); 		context.setVariable(""map"", Collections.singletonMap(""foo"", ""qux""));  		exp = new SpelExpressionParser(configuration).parseExpression(""bar(#map['foo'])""); // OK 		assertEquals(""QUX"", exp.getValue(context, new Foo(), String.class)); 		assertEquals(""QUX"", exp.getValue(context, new Foo(), String.class)); 		assertEquals(""QUX"", exp.getValue(context, new Foo(), String.class)); 		assertNotNull(new DirectFieldAccessor(exp).getPropertyValue(""compiledAst""));  		exp = new SpelExpressionParser(configuration).parseExpression(""bar(#map['foo'] ?: 'qux')""); // VerifyError 		assertEquals(""QUX"", exp.getValue(context, new Foo(), String.class)); // OK 		assertEquals(""QUX"", exp.getValue(context, new Foo(), String.class)); // BOOM 		assertEquals(""QUX"", exp.getValue(context, new Foo(), String.class)); 		assertNotNull(new DirectFieldAccessor(exp).getPropertyValue(""compiledAst"")); 	}  	public static class Foo {  		public String bar() { 			return ""BAR""; 		}  		public String bar(String arg) { 			return arg.toUpperCase(); 		}  	}  } ```  Also occurs with the Elvis expanded  ```java ""bar(#map['foo'] != null ? #map['foo'] : 'qux')"" ```    ---  **Affects:** 4.3.6, 5.0 M4  **Issue Links:** - [INT-4217](https://jira.spring.io/browse/INT-4217) Compiled SpEL Improvement for MMIH","closed","in: core,","spring-projects-issues","2017-01-26T19:51:08Z","2017-05-24T19:00:03Z"
"","19741","Scheduled/JmsListenerAnnotationBeanPostProcessor free heap space [SPR-15175]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-15175](https://jira.spring.io/browse/SPR-15175?redirect=false)** and commented  After fixing a similar problem to #16803 in Spring AMQP ([AMQP-701](https://jira.spring.io/browse/AMQP-701)), I took a look to see if the same problem exists in the JMS BPP and noticed there is already a fix there by caching `nonAnnotatedClasses`.  I believe this Set could be cleared in `afterSingletonsInstantiated()`, freeing up the heap space for these references. It would be at the cost of 1 extra parse for scoped beans that have already been referenced during context initialization.  I took a slightly difference approach in Spring AMQP, by caching the annotated methods and their annotations (with non-annotated classes getting an empty `MultiValueMap` method list), so I had rather more data after context initialization than just a reference to most bean classes; hence I clear the cache when complete.  ---  **Issue Links:** - #16803 Scheduled/JmsListenerAnnotationBeanPostProcessor needlessly scans every scoped instance - [AMQP-701](https://jira.spring.io/browse/AMQP-701) Bean creation slow","closed","type: enhancement,","spring-projects-issues","2017-01-22T21:11:33Z","2019-01-11T15:29:06Z"
"","19657","Implement MessagingException.toString() [SPR-15091]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-15091](https://jira.spring.io/browse/SPR-15091?redirect=false)** and commented  `MessagingException` is often the payload of `ErrorMessage`.  It would aid debugging if the `failedMessage` field is included in debug logs.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1284","closed","type: enhancement,","spring-projects-issues","2017-01-04T13:54:35Z","2017-01-25T14:18:14Z"
"","19626","Annotated method argument matching performance issue [SPR-15060]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-15060](https://jira.spring.io/browse/SPR-15060?redirect=false)** and commented  Possibly related to #19496  ``` @SpringBootApplication public class So41346616Application {  	public static void main(String[] args) { 		ConfigurableApplicationContext context = SpringApplication.run(So41346616Application.class, args); 		MessageChannel annotated = context.getBean(""annotated"", MessageChannel.class); 		MessageChannel notAnnotated = context.getBean(""notAnnotated"", MessageChannel.class); 		Message foo = new GenericMessage(""foo""); 		StopWatch watch = new StopWatch(); 		watch.start(); 		for (int i = 0; i < 10000; i++) { 			annotated.send(foo); 		} 		watch.stop(); 		watch.start(); 		for (int i = 0; i < 10000; i++) { 			notAnnotated.send(foo); 		} 		watch.stop(); 		watch.start(); 		for (int i = 0; i < 10000; i++) { 			annotated.send(foo); 		} 		watch.stop(); 		System.out.println(""Annotated: "" + watch.getTaskInfo()[0].getTimeMillis() + 				"" not: "" + watch.getTaskInfo()[1].getTimeMillis() + 				"" second annotated: "" + watch.getTaskInfo()[2].getTimeMillis()); 		context.close(); 	}  	@ServiceActivator(inputChannel = ""annotated"") 	public void with(@Payload String payload) { 	}  	@ServiceActivator(inputChannel = ""notAnnotated"") 	public void without(String payload) { 	}  } ```  `Annotated: 3521 not: 36 second annotated: 11202`  Yourkit pointed me to `ConcurrentReferenceHashMap` and we're getting cache misses and adding new entries for each invocation.  ---  **Affects:** 4.3.5  **Reference URL:** http://stackoverflow.com/questions/41346616/spring-boot-starter-integration-1-4-3-performance-degradation  **Attachments:** - [Screen Shot 2016-12-27 at 10.36.03 AM.png](https://jira.spring.io/secure/attachment/23669/Screen+Shot+2016-12-27+at+10.36.03+AM.png) (_247.62 kB_) - [Screen Shot 2016-12-27 at 12.13.01 PM.png](https://jira.spring.io/secure/attachment/23670/Screen+Shot+2016-12-27+at+12.13.01+PM.png) (_187.09 kB_)  **Issue Links:** - #19762 Performance Issue with `@ModelAttribute` (_**""is duplicated by""**_) - #19496 ConversionService performance regression - #19410 AnnotationFormatterFactory should support `@AliasFor` - #19493 Improve performance for conversions using a method parameter based type descriptor with annotations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e38c020535dc5d6b326d5e22f8a59dc35ba7361a, https://github.com/spring-projects/spring-framework/commit/794580ffcdcce68bba114bd639cba60658a9da63  3 votes, 9 watchers","closed","in: core,","spring-projects-issues","2016-12-27T15:38:11Z","2019-01-13T05:18:13Z"
"","19611","Remove unused Log object from MessageHeaderAccessor [SPR-15045]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-15045](https://jira.spring.io/browse/SPR-15045?redirect=false)** and commented  While investigating a Spring Integration performance issue, I found an O(n^2) search which is accessing a message header using `new MessageHeaderAccessor(message)`.  We will fix the search, but profiling indicates the `Log` field initialization is very expensive (see attachment).  This test illustrates the issue:  ```java @Test public void test() { 	Message m = MessageBuilder.withPayload(""foo"").setHeader(""foo"", ""bar"").build(); 	Object header = null; 	StopWatch watch = new StopWatch(); 	watch.start(); 	for (int i = 0; i < 10000000; i++) { 		header = new MessageHeaderAccessor(m).getHeader(""foo""); 	} 	watch.stop(); 	watch.start(); 	for (int i = 0; i < 10000000; i++) { 		header = m.getHeaders().get(""foo""); 	} 	watch.stop(); 	TaskInfo[] taskInfo = watch.getTaskInfo(); 	System.out.println(""accessor: "" + taskInfo[0].getTimeMillis() + "" raw: "" + taskInfo[1].getTimeMillis()); 	System.out.println(header); } ```  `accessor: 5019 raw: 28`  Perhaps consider a `static final Log` field (with the loss of customization by subclasses).  With the N^2 code, 10k records were processed in 31 seconds; changing the code to access the header directly (instead of via the accessor) reduced the 31 seconds to 4 seconds.    ---  **Affects:** 4.3.4, 5.0 M3  **Attachments:** - [Screen Shot 2016-12-22 at 4.27.26 PM.png](https://jira.spring.io/secure/attachment/23661/Screen+Shot+2016-12-22+at+4.27.26+PM.png) (_147.74 kB_)  **Issue Links:** - [INT-4195](https://jira.spring.io/browse/INT-4195) O(n) Search in SequenceAwareMessageGroup Prohibitive  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fa2bfdd326f1e9adb17fe41842a98d25c55b62ab, https://github.com/spring-projects/spring-framework/commit/5c48daa8ebf16f5ef2f6dac28ab0ffd1aaac5878","closed","type: enhancement,","spring-projects-issues","2016-12-22T21:40:47Z","2016-12-30T13:33:16Z"
"","19689","Annotation-based event listener does not receive event published in @PostConstruct [SPR-15122]","**[František Hartman](https://jira.spring.io/secure/ViewProfile.jspa?name=frant.hartm)** opened **[SPR-15122](https://jira.spring.io/browse/SPR-15122?redirect=false)** and commented  Annotation-based event listener does not receive event published in `@PostConstruct`, while old style interface based listener does.  See example project at https://github.com/frant-hartm/spring-application-events  One event is published in `@PostConstruct` method of another bean. Another event is published from main method after context is initialised. Interface based listener sees both events, annotation based sees only the second one:  Interface based sees event: MyEvent{value='from postConstruct'} Annotation based sees event: MyEvent{value='from main'} Interface based sees event: MyEvent{value='from main'}  ---  **Affects:** 4.3.5  **Reference URL:** https://github.com/frant-hartm/spring-application-events  **Issue Links:** - #16245 ApplicationListener-like annotation for consuming application events - #17501 Revisit ""ApplicationEventMulticaster not initialized"" behavior for early event publication scenarios - #20002 Introduce API to select application listeners","open","type: enhancement,","spring-projects-issues","2017-01-10T10:36:37Z","2021-07-26T11:26:23Z"
"","20185","Mail properties doesn't applied [SPR-15626]","**[Florian](https://jira.spring.io/secure/ViewProfile.jspa?name=flounn)** opened **[SPR-15626](https://jira.spring.io/browse/SPR-15626?redirect=false)** and commented  The Mail properties doesn't work Auto because the classe javax.mail.internet.MimeMultipart look the values in the System.properties  See the documentation of the Class javax.mail.internet.MimeMultipart => http://docs.oracle.com/javaee/6/api/javax/mail/internet/MimeMultipart.html  And the method source : /** * Initialize flags that control parsing behavior,  * based on System properties described above in  * the class documentation.  *   * `@since`	JavaMail 1.5   */   protected void initializeProperties() {   // read properties that control parsing    // default to true   ignoreMissingEndBoundary = PropUtil.getBooleanSystemProperty(   ""mail.mime.multipart.ignoremissingendboundary"", true);   // default to true   ignoreMissingBoundaryParameter = PropUtil.getBooleanSystemProperty(   ""mail.mime.multipart.ignoremissingboundaryparameter"", true);   // default to false   ignoreExistingBoundaryParameter = PropUtil.getBooleanSystemProperty(   ""mail.mime.multipart.ignoreexistingboundaryparameter"", false);   // default to false   allowEmpty = PropUtil.getBooleanSystemProperty(   ""mail.mime.multipart.allowempty"", false);   }    ---  **Affects:** 4.3.8  **Reference URL:** https://github.com/spring-projects/spring-boot/pull/9418","closed","in: core,","spring-projects-issues","2017-06-06T14:10:14Z","2019-01-12T05:20:44Z"
"","20106","Support for the last day in month cron expression [SPR-15547]","**[Florian](https://jira.spring.io/secure/ViewProfile.jspa?name=flounn)** opened **[SPR-15547](https://jira.spring.io/browse/SPR-15547?redirect=false)** and commented  Add the support of the code ""L"" for the field day of month in the cron expression.   ---  **Affects:** 4.3.8  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1402","closed","type: enhancement,","spring-projects-issues","2017-05-15T09:27:59Z","2020-08-04T06:47:21Z"
"","19755","Print session attributes in PrintingResultHandler in Spring MVC Test [SPR-15189]","**[Florian Lopes](https://jira.spring.io/secure/ViewProfile.jspa?name=flopes)** opened **[SPR-15189](https://jira.spring.io/browse/SPR-15189?redirect=false)** and commented  Print session attributes in PrintingResultHandler in Spring MVC Test when print result handler is enabled:  ```java standaloneSetup(new SimpleController()) 			.build() 			.perform(get(""/"") 					.content(""Hello Request"".getBytes()) 					.sessionAttr(""jsessionId"", ""1A530690283A13B04199A42E5D530454"") 					.sessionAttr(""userId"", ""jdoe"")) 			.andDo(print()) 		; ```  ---  **Affects:** 4.3 GA  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1306  **Issue Links:** - #20712 Printing of session with null attributes results in NullPointerException","closed","type: enhancement,","spring-projects-issues","2017-01-25T21:10:59Z","2019-01-11T14:25:59Z"
"","20357","Logs fill with broken pipe when using SockJS  [SPR-15802]","**[Florian GOURMELEN](https://jira.spring.io/secure/ViewProfile.jspa?name=floriang)** opened **[SPR-15802](https://jira.spring.io/browse/SPR-15802?redirect=false)** and commented  following this jira that has been closed #16064  I still have a similar issue, lots of log while sockjs is trying to perform a heartbeat task, Im using spring-boot-starter-websocket with spring boot 1.5.3.RELEASE Here is my config  ```java @Configuration  @EnableWebSocketMessageBroker  public class WebSocketConfig extends AbstractWebSocketMessageBrokerConfigurer {               @Bean             WebSocketHandler getWsHandler() {                 return new WebSocketHandler();             }               @Override             public void configureMessageBroker(MessageBrokerRegistry config) {                 config.enableSimpleBroker(""/topic"");             }               @Override             public void registerStompEndpoints(StompEndpointRegistry registry) {                 registry.addEndpoint(""/ws"").setAllowedOrigins(""*"").withSockJS();             }  } ```  And my log  ``` 2017-07-11 15:10:23.753 INFO 7574 --- [MessageBroker-4] o.apache.coyote.http11.Http11Processor : An error occurred in processing while on a non-container thread. The connection will be closed immediately  java.io.IOException: Broken pipe at sun.nio.ch.FileDispatcherImpl.write0(Native Method)  ~[na:1.8.0] at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47)  ~[na:1.8.0] at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)  ~[na:1.8.0] at sun.nio.ch.IOUtil.write(IOUtil.java:65)  ~[na:1.8.0] at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:466)  ~[na:1.8.0] at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:134)  ~[tomcat-embed-core-8.5.14.jar:8.5.14] at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)  ~[tomcat-embed-core-8.5.14.jar:8.5.14] at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:157)  ~[tomcat-embed-core-8.5.14.jar:8.5.14] at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:1259)  ~[tomcat-embed-core-8.5.14.jar:8.5.14] at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:670)  ~[tomcat-embed-core-8.5.14.jar:8.5.14] at org.apache.tomcat.util.net.SocketWrapperBase.flushBlocking(SocketWrapperBase.java:607)  ~[tomcat-embed-core-8.5.14.jar:8.5.14] at org.apache.tomcat.util.net.SocketWrapperBase.flush(SocketWrapperBase.java:597)  ~[tomcat-embed-core-8.5.14.jar:8.5.14] at org.apache.coyote.http11.Http11OutputBuffer.flushBuffer(Http11OutputBuffer.java:581)  ~[tomcat-embed-core-8.5.14.jar:8.5.14] at org.apache.coyote.http11.Http11OutputBuffer.flush(Http11OutputBuffer.java:272)  ~[tomcat-embed-core-8.5.14.jar:8.5.14] at org.apache.coyote.http11.Http11Processor.flush(Http11Processor.java:1506)  ~[tomcat-embed-core-8.5.14.jar:8.5.14] at org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:279)  ~[tomcat-embed-core-8.5.14.jar:8.5.14] at org.apache.coyote.Response.action(Response.java:172)   [tomcat-embed-core-8.5.14.jar:8.5.14] at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:317)   [tomcat-embed-core-8.5.14.jar:8.5.14] at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:284)   [tomcat-embed-core-8.5.14.jar:8.5.14] at org.apache.catalina.connector.Response.flushBuffer(Response.java:541)   [tomcat-embed-core-8.5.14.jar:8.5.14] at org.apache.catalina.connector.ResponseFacade.flushBuffer(ResponseFacade.java:312)   [tomcat-embed-core-8.5.14.jar:8.5.14] at javax.servlet.ServletResponseWrapper.flushBuffer(ServletResponseWrapper.java:176)   [tomcat-embed-core-8.5.14.jar:8.5.14] at javax.servlet.ServletResponseWrapper.flushBuffer(ServletResponseWrapper.java:176)   [tomcat-embed-core-8.5.14.jar:8.5.14] at org.springframework.security.web.util.OnCommittedResponseWrapper.flushBuffer(OnCommittedResponseWrapper.java:159)   [spring-security-web-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.http.server.ServletServerHttpResponse.flush(ServletServerHttpResponse.java:96)   [spring-web-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.writeFrameInternal(AbstractHttpSockJsSession.java:350)   [spring-websocket-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.writeFrame(AbstractSockJsSession.java:322)   [spring-websocket-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.sendHeartbeat(AbstractSockJsSession.java:255)   [spring-websocket-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession$HeartbeatTask.run(AbstractSockJsSession.java:456)   [spring-websocket-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)   [spring-context-4.3.8.RELEASE.jar:4.3.8.RELEASE] at java. ```  ---  **Affects:** 4.3.8  **Issue Links:** - #16064 Logs fill with unnecessary stack traces when using SockJS streaming transports  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7e232f989ba5d947dc286104b44d0e9ce580a2af, https://github.com/spring-projects/spring-framework/commit/5f074343607bd156646c30b5226152d60ec506dd","closed","type: bug,","spring-projects-issues","2017-07-20T21:12:48Z","2019-01-14T04:34:37Z"
"","20049","Add more default HandlerMethodArgumentResolver's to ExceptionHandlerExceptionResolver [SPR-15489]","**[Feliks Khantsis](https://jira.spring.io/secure/ViewProfile.jspa?name=doom7777)** opened **[SPR-15489](https://jira.spring.io/browse/SPR-15489?redirect=false)** and commented  The documentation at [22.11.2](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-ann-exceptionhandler) says that  > Much like standard controller methods annotated with a `@RequestMapping` annotation, the method arguments and return values of `@ExceptionHandler` methods can be flexible.  However in reality, ExceptionHandlerExceptionResolver#getDefaultArgumentResolvers is much skimmer than RequestMappingHandlerAdapter#getDefaultArgumentResolvers. There is no documentation which resolvers are or are not part of ExceptionHandlerExceptionResolver's defaults.  Specifically, I need RequestHeaderMethodArgumentResolver. My use case is that server requirements changed, and now under certain conditions, the server must not accept a request, and return 400-BadRequest. However since some clients are not yet updated, this will cause them to crash. Therefore, new clients send a custom header to say that they are ready to receive 400-BadRequest. Thus, in the `@ExceptionHandler` method, if the new header is set, then we can return 400, otherwise, keep returning 200. Unfortunately, I can't get the header via `@RequestHeader`, since RequestHeaderMethodArgumentResolver is not in ExceptionHandlerExceptionResolver.  At best, you should equate all default handlers for ExceptionHandlerExceptionResolver and RequestMappingHandlerAdapter. If that's impossible, then at least go through all argument resolvers that are not in ExceptionHandlerExceptionResolver, re-evaluate if it's impossible to move it to Ex.HandlerEx.Resolver, and have clear documentation in 22.11.2 as for which argument and return value handlers are supported, and which are not.   --- No further details from [SPR-15489](https://jira.spring.io/browse/SPR-15489?redirect=false)","closed","in: web,","spring-projects-issues","2017-04-26T23:17:41Z","2021-10-08T13:39:17Z"
"","20093","Inferred type does not conform to upper bound in AbstractClientHttpRequest/AbstractServerHttpResponse [SPR-15534]","**[fainted](https://jira.spring.io/secure/ViewProfile.jspa?name=fainted)** opened **[SPR-15534](https://jira.spring.io/browse/SPR-15534?redirect=false)** and commented  When building the latest spring-framework from GitHub, the code is not building and failing at module spring-web.  Just a brief for the issue  The code compiles for all previous modules, it only fails at spring-web with below error  E:\spring-framework-master\spring-web\src\main\java\org\springframework\http\client\reactive\AbstractClientHttpRequest.java:132: error: incompatible types: inferred type does not conform to upper bound(s) .map(Supplier::get).collect(Collectors.toList()); ^ inferred: ? extends Mono\ upper bound(s): Object E:\spring-framework-master\spring-web\src\main\java\org\springframework\http\server\reactive\AbstractServerHttpResponse.java:197: error: incompatible types: inferred type does not conform to upper bound(s) .map(Supplier::get).collect(Collectors.toList()); ^ inferred: ? extends Mono\ upper bound(s): Object 2 errors  ---  ### +Environment Details+  **Java:** java version ""1.8.0_05"" Java(TM) SE Runtime Environment (build 1.8.0_05-b13) Java HotSpot(TM) Client VM (build 25.5-b02, mixed mode)  **Gradle:**  ---  Gradle 2.14.1  ---  Build time:   2016-07-18 06:38:37 UTC Revision:     d9e2113d9fb05a5caabba61798bdb8dfdca83719  Groovy:       2.4.4 Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015 JVM:          1.8.0_05 (Oracle Corporation 25.5-b02) OS:           Windows 7 6.1 x86  **I have also attached log file with stack trace and other debug info.**  ---  **Affects:** 5.0 RC1  **Attachments:** - [log.txt](https://jira.spring.io/secure/attachment/24918/log.txt) (_106.30 kB_)","open","in: web,","spring-projects-issues","2017-05-10T12:42:21Z","2021-11-12T12:18:03Z"
"","19889","java.lang.IllegalArgumentException: No enum constant org.springframework.messaging.simp.stomp.StompCommand.SUBSCRIBE [SPR-15326]","**[Etienne Le Sueur](https://jira.spring.io/secure/ViewProfile.jspa?name=elesueur)** opened **[SPR-15326](https://jira.spring.io/browse/SPR-15326?redirect=false)** and commented  Somewhat infrequently, I am seeing strange STOMP parsing errors when subscribing or unsubscribing from channels via websocket, for example:  o.s.w.s.m.StompSubProtocolHandler : Failed to parse TextMessage payload=[SUBSCRIBE ..], byteCount=114, last=true] in session 6d1e7a6a. Sending STOMP ERROR to client.  java.lang.IllegalArgumentException: No enum constant org.springframework.messaging.simp.stomp.StompCommand.SUBSCRIBE at java.lang.Enum.valueOf(Enum.java:238) at org.springframework.messaging.simp.stomp.StompCommand.valueOf(StompCommand.java:28) at org.springframework.messaging.simp.stomp.StompDecoder.decodeMessage(StompDecoder.java:134) at org.springframework.messaging.simp.stomp.StompDecoder.decode(StompDecoder.java:110) ...  from the attached screen shot, you can see the SUBSCRIBE command the browser is sending up the socket, and the bytes sent match what spring is reporting in the log, i.e. 114 bytes.  I originally saw this with spring 4.3.2, upgrading to 4.3.7 doesn't seem to have helped.  I can see that the first line in the log output, showing the payload, prints a newline immediately following the SUBSCRIBE. I wonder if spring is reading the command incorrectly? That doesn't really explain why this happens infrequently.  For the most part, it all works as expected, but sometimes I see these errors with both SUBSCRIBE and UNSUBSCRIBE commands.   ---  **Affects:** 4.3.7  **Attachments:** - [Screen Shot 2017-03-07 at 1.27.57 PM.png](https://jira.spring.io/secure/attachment/23799/Screen+Shot+2017-03-07+at+1.27.57+PM.png) (_43.94 kB_) - [Screen Shot 2017-03-09 at 3.02.53 PM.png](https://jira.spring.io/secure/attachment/23804/Screen+Shot+2017-03-09+at+3.02.53+PM.png) (_13.01 kB_) - [Screen Shot 2017-03-09 at 3.07.07 PM.png](https://jira.spring.io/secure/attachment/23805/Screen+Shot+2017-03-09+at+3.07.07+PM.png) (_13.68 kB_)","closed","status: invalid,","spring-projects-issues","2017-03-07T18:31:16Z","2019-01-12T05:21:06Z"
"","19847","http://repo.spring.io hangs [SPR-15281]","**[Erik Martino Hansen](https://jira.spring.io/secure/ViewProfile.jspa?name=xylifyx)** opened **[SPR-15281](https://jira.spring.io/browse/SPR-15281?redirect=false)** and commented  The com.github.jinnovations:attribution-maven-plugin:0.9.5 maven plugin collects licences from dependencies. But it is extremely slow. I traced it down to a HEAD request to repo.spring.io, you can emulate the request by the following command line.  `curl -X HEAD http://repo.spring.io/milestone/org/springframework/boot/spring-boot-starter-security/1.5.1.RELEASE/spring-boot-starter-security-1.5.1.RELEASE.jar`  It never finishes but hangs until a timeout occurs.   --- No further details from [SPR-15281](https://jira.spring.io/browse/SPR-15281?redirect=false)","closed","status: declined,","spring-projects-issues","2017-02-23T08:10:05Z","2019-01-12T16:33:32Z"
"","20273","ForwardedHeaderFilter should expose option for not converting relative redirects to absolute ones [SPR-15717]","**[Eric Sirianni](https://jira.spring.io/secure/ViewProfile.jspa?name=sirianni)** opened **[SPR-15717](https://jira.spring.io/browse/SPR-15717?redirect=false)** and commented  Upon upgrade to Spring 4.3.5, all of our application redirects changed from relative to absolute.  The cause is this code added for #19587 converts a relative redirect to an absolute one:  ``` 			// Relative to Servlet container root or to current request 			String path = (location.startsWith(FOLDER_SEPARATOR) ? location : 					StringUtils.applyRelativePath(this.request.getRequestURI(), location));  			String result = UriComponentsBuilder 					.fromHttpRequest(new ServletServerHttpRequest(this.request)) 					.replacePath(path) 					.build().normalize().toUriString(); ```  I don't understand why this is necessary or appropriate.  Won't a relative redirect already be interpreted relative to the client-facing view of the scheme/host/part?  Why the need to transform it into an absolute one?  Can this be parameterized so that this functionality can be disabled if not desired?  ---  **Affects:** 4.3.5  **Issue Links:** - #19587 ForwardedHeaderFilter should support sendRedirect  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/68e6b148cbdb14bbed6d4c960db9f5a58245fb5e, https://github.com/spring-projects/spring-framework/commit/4160ced64c8c60370a20b047538d78189bf5e6b0, https://github.com/spring-projects/spring-framework/commit/5f868b493a7ba63c2dc2622475ecc29f34e4346b","closed","type: enhancement,","spring-projects-issues","2017-06-29T15:12:58Z","2019-01-11T16:11:42Z"
"","20043","SmartValidator which supports JSR-303 validation groups [SPR-15483]","**[Eric Deandrea](https://jira.spring.io/secure/ViewProfile.jspa?name=edeandrea)** opened **[SPR-15483](https://jira.spring.io/browse/SPR-15483?redirect=false)** and commented  I've had this feature in my own codebase for quite some time & I'm looking to potentially contribute it back to Spring. I wanted to start this discussion first before I go through all the ""hoops"" of submitting a pull request to see if it would be wanted. This is the javadoc from the code:  ```java /**  * Extend this to create a Spring MVC {@link org.springframework.validation.Validator Validator} class which is capable of doing partial validations,  * using the JSR 303 specification for groups.  *   * Custom validation methods must be declared as public void and can be given any name (other than validate or supports.  * They must take in two parameters: first a target instance of type <T>, followed by an {@link Errors} object. They can then optionally be assigned to a specific {@link ValidationGroup}.  *   * Find below a variation of the {@link org.springframework.validation.Validator Validator} class's javadoc example where the userName and password properties can be validated in different actions of your Controller.  *  *   public class UserLoginValidator extends GroupedValidator<UserLogin> {  	private static final int MINIMUM_PASSWORD_LENGTH = 6;   	public interface Identity {  	}   	public interface Secret {  	}  	@ValidationGroup(Identity.class) 	public void validateUserName(UserLogin login, Errors errors) { 		ValidationUtils.rejectIfEmptyOrWhitespace(errors, ""userName"", ""field.required""); 	}  	@ValidationGroup(Secret.class) 	public void validatePassword(UserLogin login, Errors errors) { 		ValidationUtils.rejectIfEmptyOrWhitespace(errors, ""password"", ""field.required"");  		if (login.getPassword() != null && login.getPassword().trim().length() < MINIMUM_PASSWORD_LENGTH) { 			errors.rejectValue(""password"", ""field.min.length"", new Object[] { Integer.valueOf(MINIMUM_PASSWORD_LENGTH) }, 				""The password must be at least ["" + MINIMUM_PASSWORD_LENGTH + ""] characters in length.""); 		} 	} } You would then ""run"" a group by using Spring's {@link org.springframework.validation.annotation.Validated Validated} annotation in your controller action method, similar to this (in a standard {@link org.springframework.stereotype.Controller Controller}):  	@PostMapping(""/identity"") 	public void postIdentity(@Validated(Identity.class) @ModelAttribute UserLogin login)  or this (in a {@link org.springframework.web.bind.annotation.RestController RestController}):  	@PostMapping(""/identity"") 	public void postIdentity(@Validated(Identity.class) @RequestBody UserLogin login)   */ ```    --- No further details from [SPR-15483](https://jira.spring.io/browse/SPR-15483?redirect=false)","open","in: core,","spring-projects-issues","2017-04-25T21:46:53Z","2019-04-18T22:58:12Z"
"","20042","Spring MVC @Validated validator being called twice [SPR-15482]","**[Eric Deandrea](https://jira.spring.io/secure/ViewProfile.jspa?name=edeandrea)** opened **[SPR-15482](https://jira.spring.io/browse/SPR-15482?redirect=false)** and commented  Moving from Spring MVC 4.3.7 to 4.3.8 (spring-boot 1.5.2 to 1.5.3) I notice that in my RestControllers we implement Spring's Validator interface, wire it into a controller using an `@InitBinder` method. Then in our controller action method we use the `@Validated` annotation on the request body attribute. With the move to 4.3.8 I see that our validator is being called twice instead of once.   ---  **Affects:** 4.3.8","closed","status: invalid,","spring-projects-issues","2017-04-25T14:30:30Z","2019-01-12T05:20:56Z"
"","20033","RootBeanDefinition does not return $-separated classname on inner classes anymore [SPR-15473]","**[Elis Edlund](https://jira.spring.io/secure/ViewProfile.jspa?name=elisedlund)** opened **[SPR-15473](https://jira.spring.io/browse/SPR-15473?redirect=false)** and commented  In previous version I got a correct classname in my custom DefaultListableBeanFactory by fetching it from the RootBeanDefinition, Example doing something like this: private Class figureOutClass(final RootBeanDefinition mbd) { String className = mbd.getBeanClassName(); return Class.forName(className); } This still works fine for regular classes but not internal ones like the following:  ```java public class BeanTest {     @Test     public void someTest() {       MyClass c = new MyClass() {             public String getEscString() {                 return ""\""'>","open","in: core,","spring-projects-issues","2017-04-21T07:28:22Z","2019-01-11T16:38:29Z"
"","20248","BeanUtils.copyProperties() to not set collection fields of wrong generic type [SPR-15689]","**[Elad Tabak](https://jira.spring.io/secure/ViewProfile.jspa?name=tzvatot)** opened **[SPR-15689](https://jira.spring.io/browse/SPR-15689?redirect=false)** and commented  org.springframework.beans.BeanUtils.copyProperties() copy fields of generic collections even if the generic types do not match. This result in a strange behavior when a bean that have a collection of \ will get values of \. See example class: There are two bean classes - X and Y. Both have a field ""list"" of different types - X have a list of \ and Y have a list of \. The result after a BeanUtils.copyProperties(x,y) is that y have a list of \ even though it's a type mismatch.  Generic data is problematic to establish in case the collection is empty, but if it's not, it's possible to not set the field. Of course this is a best-effort for a specific use case of 2 beans of different types.   ---  **Affects:** 4.3.9  **Attachments:** - [TestBeanUtils.java](https://jira.spring.io/secure/attachment/25013/TestBeanUtils.java) (_1.10 kB_)","open","in: core,","spring-projects-issues","2017-06-21T12:11:50Z","2019-01-11T16:03:33Z"
"","20179","Ordering support in InterceptorRegistration [SPR-15620]","**[Eko Kurniawan Khannedy](https://jira.spring.io/secure/ViewProfile.jspa?name=khannedy)** opened **[SPR-15620](https://jira.spring.io/browse/SPR-15620?redirect=false)** and commented  This is JIRA for https://github.com/spring-projects/spring-framework/pull/1448  Currently there is no guarantee for ordering of HandlerInterceptor to be invoked. So if we want to create HandlerInterceptor that invoked before or after third party library Handler Interceptor, we can not guarantee that.  The idea of this feature is add order attribute in InterceptorRegistration, and when InterceptorRegistry.getInterceptors() being invoked, it will sorted first, so we can customize  ``` registry.addInterceptor(interceptor1).order(Ordered.LOWEST_PRECEDENCE); registry.addInterceptor(interceptor2).order(Ordered.HIGHEST_PRECEDENCE); ```    ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ac68cc35c2cf776d66c41e8544663f0db1f17166","closed","type: enhancement,","spring-projects-issues","2017-06-04T07:31:20Z","2017-07-24T07:51:15Z"
"","20140","Value predicate support in BeanUtils.copyProperties() [SPR-15581]","**[Eko Kurniawan Khannedy](https://jira.spring.io/secure/ViewProfile.jspa?name=khannedy)** opened **[SPR-15581](https://jira.spring.io/browse/SPR-15581?redirect=false)** and commented  This is jira for pull request : https://github.com/spring-projects/spring-framework/pull/1431  In my project, I have some ugly code to merge 2 properties object like this  ``` Configuration global = appContext.getBean(""globalConfig"", Configuration.class); Configuration config = appContext.getBean(""configName"", Configuration.class);  Configuration mergeConfig = new Configuration() BeanUtils.copyProperties(mergeConfig, global);  if(config.getFoo() != null){    mergeConfig.setFoo(config.getFoo()); }  if(config.getBar() != null){    mergeConfig.setBar(config.getBar()); }  if(config.getXxx() != null){    mergeConfig.setXxx(config.getXxx()); } ```  My code only make sure that I only override non null values. This is very ugly because I need to check null in all of attributes.  This pull request is to add Predicate support for BeanUtils.copyProperties, so I can merge properties easily.  ``` Configuration global = appContext.getBean(""globalConfig"", Configuration.class); Configuration config = appContext.getBean(""configName"", Configuration.class);  Configuration mergeConfig = new Configuration(); BeanProperties.copyProperties(mergeConfig, global); BeanProperties.copyProperties(mergeConfig, config, Objects::nonNull) ```    ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1431","closed","status: superseded,","spring-projects-issues","2017-05-24T01:10:27Z","2021-11-24T14:35:12Z"
"","19632","Error in RestTemplate when setting the same HTTP header through ClientHttpRequestInterceptor and HttpEntity [SPR-15066]","**[Einar Pehrson [Atlassian]](https://jira.spring.io/secure/ViewProfile.jspa?name=epehrson-atlassian)** opened **[SPR-15066](https://jira.spring.io/browse/SPR-15066?redirect=false)** and commented  When using `HttpEntity` to make a request with `RestTemplate`, the `HttpHeaders` passed to `ClientHttpRequestInterceptor`s is mutable but with immutable values.  **Steps to Reproduce**  1. Create a `RestTemplate` with a `ClientHttpRequestInterceptor` that adds a value for a particular header 2. Create an `HttpEntity` with an `HttpHeaders` containing a different value for that same header 3. Make a request using any of the `RestTemplate` methods that accepts an `HttpEntity`  **Actual Results**  An `UnsupportedOperationException` is thrown.  ``` java.lang.UnsupportedOperationException 	at java.util.Collections$UnmodifiableCollection.add(Collections.java:1055) 	at org.springframework.http.HttpHeaders.add(HttpHeaders.java:1343) 	at ...intercept(...) 	at org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(InterceptingClientHttpRequest.java:85) 	at org.springframework.http.client.InterceptingClientHttpRequest.executeInternal(InterceptingClientHttpRequest.java:69) 	at org.springframework.http.client.AbstractBufferingClientHttpRequest.executeInternal(AbstractBufferingClientHttpRequest.java:48) 	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:53) 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:666) 	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:627) 	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:545) ```  **Expected Results**  The request is sent with both values for the header.   ---  **Affects:** 4.3.5  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1277  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: bug,","spring-projects-issues","2016-12-29T13:48:10Z","2018-01-23T09:33:23Z"
"","19706","@RequestParam injects a raw undecoded string for reactive HTTP requests [SPR-15140]","**[Eiichi Sato](https://jira.spring.io/secure/ViewProfile.jspa?name=sato_eiichi)** opened **[SPR-15140](https://jira.spring.io/browse/SPR-15140?redirect=false)** and commented  Query strings should be URL-decoded before injected into `@RequestParam` variables.  ###### Current behaviour (Spring Web Reactive)  ```java @ResponseBody @GetMapping(""/search"") public String search(@RequestParam(""q"") String q) {     LOG.info(""search: q = {}"", q);     return q; } ```  ``` $ curl -s 'http://localhost:8080/search?q=%20%2B+%C3%A0' %20%2B+%C3%A0 ```  ###### Expected behaviour (= Spring WebMVC behaviour)  ``` $ curl -s 'http://localhost:8080/search?q=%20%2B+%C3%A0'  + à ```  ---  **Affects:** 5.0 M4  **Issue Links:** - #19360 Fix HttpRequest#getURI() with Netty based engines  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2017-01-14T18:33:46Z","2019-01-11T15:31:26Z"
"","19742","RedirectAttributes Flash scoped variables absent when redirecting using ResponseEntity [SPR-15176]","**[Edward Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=etsmith)** opened **[SPR-15176](https://jira.spring.io/browse/SPR-15176?redirect=false)** and commented  In short, when Flash scoped attributes are added in a `@Controller` method and then a redirect is executed by returning a type of `ResponseEntity` with an HTTP status of 302 Found, the Flash scoped attributes are lost.  See https://github.com/tednology/SPR-15176 for a working project demonstrating the bug.  ```java @Controller public class DemoController {          @GetMapping(""/bad"")     ResponseEntity bad(RedirectAttributes redirectAttributes) {         redirectAttributes.addFlashAttribute(""message"", ""Bad!"");         return ResponseEntity.status(HttpStatus.FOUND)             .location(URI.create(""/""))             .build();     }      @GetMapping(""/good"")     String good(RedirectAttributes redirectAttributes) {         redirectAttributes.addFlashAttribute(""message"", ""Good!"");         return ""redirect:/"";     }      @GetMapping(""/"")     String home(Model model) {         // Will print flash scoped message ""Good!"", but not ""Bad!""         model.asMap().entrySet().forEach(System.err::println);         return ""home"";     } } ```    ---  **Affects:** 4.3.4  **Reference URL:** https://github.com/tednology/SPR-15176  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ea5f81c00d022ef0668aec07f5af4b399650b8e","closed","type: enhancement,","spring-projects-issues","2017-01-23T02:30:16Z","2019-01-11T15:29:16Z"
"","20314","Propagate read-only status as FlushMode.MANUAL to Query instances [SPR-15759]","**[Eduardo Simioni](https://jira.spring.io/secure/ViewProfile.jspa?name=esimioni)** opened **[SPR-15759](https://jira.spring.io/browse/SPR-15759?redirect=false)** and commented  **Our setup uses**  `org.springframework.orm.hibernate5.HibernateTransactionManager` and `org.springframework.orm.hibernate5.LocalSessionFactoryBean` Hibernate 5.2.10.Final  We also use compile time aspects for the transactions, although I don't think this would be a determinant factor for this bug.  **The problem**  I've put the following code inside a `@Transactional(readOnly = true)` method (the only transactional method in the chain):  ```java LOG.info(""Hibernate flush: "" + sessionFactory.getCurrentSession().getHibernateFlushMode()); LOG.info(""JPA flush: "" + sessionFactory.getCurrentSession().getFlushMode()); ```  This yielded the following result:  ``` Hibernate flush: MANUAL JPA flush: COMMIT ```  Plus the following Hibernate log line:  ``` [org.hibernate.jpa.internal.util.FlushModeTypeHelper] Interpreting Hibernate FlushMode#MANUAL to JPA FlushModeType#COMMIT; may cause problems if relying on FlushMode#MANUAL-specific behavior ```  I've noticed this by chance. After setting one of our main queries (single method request) to `FlushMode.MANUAL`, the total request time dropped from 550ms to 110ms on average. Most of the time was being spent on Hibernate checking dirty entities, which led me to conclude that Spring was not setting the `FlushMode` correctly.  I'm not sure if this bug is present on 5.0 branch, but since I didn't find any similar issue, I'd guess it is.  ---  **Affects:** 4.3.9, 5.0 RC2  **Issue Links:** - #21494 Propagate read-only status to Hibernate Session through setDefaultReadOnly","closed","type: enhancement,","spring-projects-issues","2017-07-11T00:09:02Z","2019-01-11T16:27:41Z"
"","20203","add EditorConfig file, help to unified code style [SPR-15644]","**[D瓜哥](https://jira.spring.io/secure/ViewProfile.jspa?name=diguage)** opened **[SPR-15644](https://jira.spring.io/browse/SPR-15644?redirect=false)** and commented  Many editor support the EditorConfig file. The config file help to unified code style between the various editors.  The indent of the files is as following:  * `gradle/jdiff/jdiff.html` indent_style is space 2, * `org/springframework/web/servlet/view/script/jruby/render.rb` indent_style is space 2, * `org/springframework/web/servlet/view/script/nashorn/render.js` indent_style is space 4 * `META-INF/web-resources/WEB-INF/layouts/standardLayout.jsp` indent_style is space 4    ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1455","closed","type: enhancement,","spring-projects-issues","2017-06-09T03:13:51Z","2017-06-14T10:12:17Z"
"","20196","Use lambda to refact the code [SPR-15637]","**[D瓜哥](https://jira.spring.io/secure/ViewProfile.jspa?name=diguage)** opened **[SPR-15637](https://jira.spring.io/browse/SPR-15637?redirect=false)** and commented  I find many interface class are added the **`@FunctionalInterface`** annotation.  So, I use lambda to refact the code.  I only refact the interfaces which are added the **`@FunctionalInterface`** annotation. I do not refact the test classes.  I submit all the refactor.   ---  **Affects:** 5.0 RC1  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1454","closed","type: enhancement,","spring-projects-issues","2017-06-07T16:33:51Z","2017-06-14T10:12:17Z"
"","20191","Discuss a code style problem [SPR-15632]","**[D瓜哥](https://jira.spring.io/secure/ViewProfile.jspa?name=diguage)** opened **[SPR-15632](https://jira.spring.io/browse/SPR-15632?redirect=false)** and commented  I have a problem about code style.  If a lambda statement is very long. What should I keep the code style?  ---  **Style 1**  ```java original.forEach( 	(attrName, attrValue) 		-> this.propertyValueList.add(new PropertyValue(attrName.toString(), attrValue)) ); ```  ---  **Style 2**  ```java original.forEach( 	(attrName, attrValue) 		-> this.propertyValueList.add(new PropertyValue(attrName.toString(), attrValue))); ```  ---  **Style 3**  ```java original.forEach((attrName, attrValue) 		-> this.propertyValueList.add(new PropertyValue(attrName.toString(), attrValue)) ); ```  ---  **Style 4**  ```java original.forEach((attrName, attrValue) 		-> this.propertyValueList.add(new PropertyValue(attrName.toString(), attrValue))); ```  ---  No further details from [SPR-15632](https://jira.spring.io/browse/SPR-15632?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-06-07T08:47:38Z","2019-01-13T15:41:56Z"
"","20190","Refact iterator of Map with Java8's Map.forEach [SPR-15631]","**[D瓜哥](https://jira.spring.io/secure/ViewProfile.jspa?name=diguage)** opened **[SPR-15631](https://jira.spring.io/browse/SPR-15631?redirect=false)** and commented  I find some codes use **for (Map.Entry entry : original.entrySet())** to iterate the data.  I think **Map.forEach** is a cool way. So, I refact iterator of Map with Java8's Map.forEach.  ---  **Affects:** 5.0 RC1  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1451  **Issue Links:** - #20186 Use Map.forEach instead of Map.entrySet().forEach","closed","type: enhancement,","spring-projects-issues","2017-06-07T07:49:47Z","2019-01-11T16:09:53Z"
"","20187","Use the diamond syntax, remove the type declarations [SPR-15628]","**[D瓜哥](https://jira.spring.io/secure/ViewProfile.jspa?name=diguage)** opened **[SPR-15628](https://jira.spring.io/browse/SPR-15628?redirect=false)** and commented  I find that some codes do not use the diamond syntax.  I think the project should keep the code style uniform. So, I refact the code to remove the type declarations, then the code could use the diamond syntax.  _I find some test code have the same problem. If necessary, I submit the refactor the test code._  ---  **Affects:** 5.0 RC1  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1450  **Issue Links:** - #20186 Use Map.forEach instead of Map.entrySet().forEach","closed","type: enhancement,","spring-projects-issues","2017-06-06T15:08:40Z","2019-01-11T16:09:33Z"
"","20186","Use Map.forEach instead of Map.entrySet().forEach [SPR-15627]","**[D瓜哥](https://jira.spring.io/secure/ViewProfile.jspa?name=diguage)** opened **[SPR-15627](https://jira.spring.io/browse/SPR-15627?redirect=false)** and commented  I grep the code. And I find that some codes use the **Map.entrySet().forEach** to iterate the data.  I think using **Map.forEach** to iterate the data is a better way.  So i PR my change. I also use the lambda to simplify the code.  ---  **Affects:** 5.0 RC1  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1449  **Issue Links:** - #20187 Use the diamond syntax, remove the type declarations - #20190 Refact iterator of Map with Java8's Map.forEach","closed","type: enhancement,","spring-projects-issues","2017-06-06T14:20:40Z","2019-01-11T16:10:56Z"
"","20151","can not build the project. [SPR-15592]","**[D瓜哥](https://jira.spring.io/secure/ViewProfile.jspa?name=diguage)** opened **[SPR-15592](https://jira.spring.io/browse/SPR-15592?redirect=false)** and commented  I want to import the project to IDEA.  I follow the document  **import-into-idea.md**  to  run the command **./gradlew cleanIdea :spring-oxm:compileTestJava**.  Then, it throws errors.  **How do I import the v5.x project to IDEA?**  I try many times at different ways:  First, I checkout the code to **v4.3.8.RELEASE**, I run the command **./gradlew cleanIdea :spring-oxm:compileTestJava**. It is OK.  Second, I checkout the code to **v5.0.0.RC1**, I run the same command. It is OK. But, when I import the code to IDEA as a gradle project, the IDEA  cound find many class, such as **BeanFactory**.  Third, I run **./gradlew clean :spring-oxm:compileTestJava** (the code is **v5.0.0.RC1**), it throws many errors.  My develop environment:  ```java macOS 10.12.4  java -version java version ""1.8.0_131"" Java(TM) SE Runtime Environment (build 1.8.0_131-b11) Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode) ```  The log is as followings:  ```java :spring-oxm:compileTestJava spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:27: error: package org.springframework.oxm.jaxb.test does not exist import org.springframework.oxm.jaxb.test.FlightType;                                         ^ spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:28: error: package org.springframework.oxm.jaxb.test does not exist import org.springframework.oxm.jaxb.test.Flights;                                         ^ spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:29: error: package org.springframework.oxm.jaxb.test does not exist import org.springframework.oxm.jaxb.test.ObjectFactory;                                         ^ spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:85: error: cannot find symbol         private Flights flights;                 ^   symbol:   class Flights   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java:36: error: package org.springframework.oxm.jaxb.test does not exist import org.springframework.oxm.jaxb.test.FlightType;                                         ^ spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java:37: error: package org.springframework.oxm.jaxb.test does not exist import org.springframework.oxm.jaxb.test.Flights;                                         ^ spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:98: error: cannot find symbol                 FlightType flight = new FlightType();                 ^   symbol:   class FlightType   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:98: error: cannot find symbol                 FlightType flight = new FlightType();                                         ^   symbol:   class FlightType   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:100: error: cannot find symbol                 flights = new Flights();                               ^   symbol:   class Flights   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:166: error: cannot find symbol                 marshaller.setClassesToBeBound(FlightType.class);                                                ^   symbol:   class FlightType   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:169: error: cannot find symbol                 Flights flights = new Flights();                 ^   symbol:   class Flights   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:169: error: cannot find symbol                 Flights flights = new Flights();                                       ^   symbol:   class Flights   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:181: error: cannot find symbol                 marshaller.setClassesToBeBound(Flights.class, FlightType.class);                                                ^   symbol:   class Flights   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:181: error: cannot find symbol                 marshaller.setClassesToBeBound(Flights.class, FlightType.class);                                                               ^   symbol:   class FlightType   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:195: error: cannot find symbol                 assertTrue(""Jaxb2Marshaller does not support Flights class"", marshaller.supports(Flights.class));                                                                                                  ^   symbol:   class Flights   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:196: error: cannot find symbol                 assertTrue(""Jaxb2Marshaller does not support Flights generic type"", marshaller.supports((Type)Flights.class));                                                                                                               ^   symbol:   class Flights   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:196: warning: [cast] redundant cast to class                 assertTrue(""Jaxb2Marshaller does not support Flights generic type"", marshaller.supports((Type)Flights.class));                                                                                                         ^ spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:198: error: cannot find symbol                 assertFalse(""Jaxb2Marshaller supports FlightType class"", marshaller.supports(FlightType.class));                                                                                              ^   symbol:   class FlightType   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:199: error: cannot find symbol                 assertFalse(""Jaxb2Marshaller supports FlightType type"", marshaller.supports((Type)FlightType.class));                                                                                                   ^   symbol:   class FlightType   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:199: warning: [cast] redundant cast to class                 assertFalse(""Jaxb2Marshaller supports FlightType type"", marshaller.supports((Type)FlightType.class));                                                                                             ^ spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:201: error: cannot find symbol                 Method method = ObjectFactory.class.getDeclaredMethod(""createFlight"", FlightType.class);                                                                                       ^   symbol:   class FlightType   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:201: error: cannot find symbol                 Method method = ObjectFactory.class.getDeclaredMethod(""createFlight"", FlightType.class);                                 ^   symbol:   class ObjectFactory   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:206: error: cannot find symbol                 JAXBElement flightTypeJAXBElement = new JAXBElement(new QName(""http://springframework.org"", ""flight""), FlightType.class,                             ^   symbol:   class FlightType   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:206: error: cannot find symbol                 JAXBElement flightTypeJAXBElement = new JAXBElement(new QName(""http://springframework.org"", ""flight""), FlightType.class,                                                                                                                                      ^   symbol:   class FlightType   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java:207: error: cannot find symbol                                 new FlightType());                                     ^   symbol:   class FlightType   location: class Jaxb2MarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java:65: error: cannot find symbol                 Flights flights = (Flights) o;                 ^   symbol:   class Flights   location: class Jaxb2UnmarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java:65: error: cannot find symbol                 Flights flights = (Flights) o;                                    ^   symbol:   class Flights   location: class Jaxb2UnmarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java:73: error: cannot find symbol                 FlightType flight = (FlightType) o;                 ^   symbol:   class FlightType   location: class Jaxb2UnmarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java:73: error: cannot find symbol                 FlightType flight = (FlightType) o;                                      ^   symbol:   class FlightType   location: class Jaxb2UnmarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java:119: error: cannot find symbol                 JAXBElement element = (JAXBElement) unmarshaller.unmarshal(source);                             ^   symbol:   class FlightType   location: class Jaxb2UnmarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java:119: error: cannot find symbol                 JAXBElement element = (JAXBElement) unmarshaller.unmarshal(source);                                                                ^   symbol:   class FlightType   location: class Jaxb2UnmarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java:120: error: cannot find symbol                 FlightType flight = element.getValue();                 ^   symbol:   class FlightType   location: class Jaxb2UnmarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java:143: error: cannot find symbol                 Flights f = (Flights) unmarshaller.unmarshal(new StreamSource(file));                 ^   symbol:   class Flights   location: class Jaxb2UnmarshallerTests spring-framework/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java:143: error: cannot find symbol                 Flights f = (Flights) unmarshaller.unmarshal(new StreamSource(file));                              ^   symbol:   class Flights   location: class Jaxb2UnmarshallerTests 32 errors 2 warnings :spring-oxm:compileTestJava FAILED :spring-oxm:copyTestKotlinClasses SKIPPED  FAILURE: Build failed with an exception.  * What went wrong: Execution failed for task ':spring-oxm:compileTestJava'. > Compilation failed; see the compiler error output for details.  * Try: Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.  BUILD FAILED  Total time: 1.718 secs ```    ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/beb7ed97155b9164797aec7024254e12b9050cd4","closed","in: data,","spring-projects-issues","2017-05-26T04:04:58Z","2019-01-11T17:03:21Z"
"","20374","URI variables with MockRestRequestMatchers's requestTo [SPR-15819]","**[Drummond Dawson](https://jira.spring.io/secure/ViewProfile.jspa?name=drumonii)** opened **[SPR-15819](https://jira.spring.io/browse/SPR-15819?redirect=false)** and commented  MockRestRequestMatchers's requestTo can be improved to use URI variables in the request URI  ---  **Affects:** 5.0 RC4  **Issue Links:** - #20389 Regression after URI template support added to MockMvcResultMatchers  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1486, and commits https://github.com/spring-projects/spring-framework/commit/809189be1a251bd84c2bd390d33b45564998a6b2","closed","type: enhancement,","spring-projects-issues","2017-07-25T16:49:05Z","2019-01-11T17:41:41Z"
"","20138","DefaultMessageListenerContainer shutdown hangs when using AMQ client with prefetch 0 [SPR-15579]","**[Doug Harmon](https://jira.spring.io/secure/ViewProfile.jspa?name=dsharmo)** opened **[SPR-15579](https://jira.spring.io/browse/SPR-15579?redirect=false)** and commented  JDK 1.8.0_112 spring-jms-4.3.8.RELEASE.jar activemq-client-5.14.5.jar  When using spring's 4.3.8 DefaultMessageListenerContainer (DMLC) to consume messages from AMQ 5.14.5 server, and using prefetch of 0, spring container hangs when shutting down DMLC (e.g. on tomcat server shutdown).  Applicable 2 threads from spring client app thread dump (logs on separate network so I cannot copy/paste):  ""dmlc-1"" ... at org.apache.activemq.FifoMessageDispatchChannel.dequeue(FifoMessageDispatchChannel.java:72) - locked  (a java.lang.Object)   at org.apache.activemq.ActiveMQMessageConsumer.dequeue(ActiveMQMessageConsumer.java:486)   at org.apache.activemq.ActiveMQMessageConsumer.receive(ActiveMQMessageConsumer.java:648)  ""http-bio-exec-11"" at org.springframework.jms.listener.DefaultMessageListenerContainer.doShutdown(DefaultMessageListenerContainer.java:571) ...  Applicable spring configuration file:  \ \ \tcp://localhost:61616?jms.prefetchPolicy.queuePrefetch=0\ \ \ \ \ \ \ \ \ \ \ \   ---  **Affects:** 4.3.8  **Reference URL:** https://issues.apache.org/jira/browse/AMQ-6682  **Attachments:** - [spring-jms-shutdown-hangs.zip](https://jira.spring.io/secure/attachment/25101/spring-jms-shutdown-hangs.zip) (_2.45 kB_)","open","in: messaging,","spring-projects-issues","2017-05-23T17:44:57Z","2019-01-13T15:42:48Z"
"","20295","ResponseSpec#toEntity(...) fails when response status code is 5xx [SPR-15739]","**[Doron Gold](https://jira.spring.io/secure/ViewProfile.jspa?name=dorongold)** opened **[SPR-15739](https://jira.spring.io/browse/SPR-15739?redirect=false)** and commented  The documentation of WebClient.ResponseSpec#toEntity() states the following:  > this method does not check for a 4xx or 5xx status code before extracting the body  However, when a WebClient receives a 5xx response, it fails in the underlying Netty HTTP client layer. An error Mono is emitted **before** `toEntity(...)` finishes. So there is no way to inspect the returned `ResponseEntity` in case we are interested in the body, headers or any other details of the response.  Example:  ```java WebClient.create()                 .get()                 .uri(""http://localhost:8080/error"")                 .retrieve()                 .toEntity(String.class)                 .map(responseEntity -> {                     //never reaches here because the underlying reactor.ipc.netty.http.client.HttpClient                     // emits an error Mono from reactor.ipc.netty.http.client.HttpClientOperations#checkResponseCode()                     if (responseEntity.getStatusCode()                             .is5xxServerError()) {                         throw new RuntimeException(""Custom Server Error Exception"");                     }                     return responseEntity.getBody();                 }) ```  A relevant question on StackOverflow: https://stackoverflow.com/questions/44593066/spring-webflux-webclient-get-body-on-error  ---  **Affects:** 5.0 RC2  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/162  **Issue Links:** - #20046 Revisit handling of 4xx and 5xx status codes in WebClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b0ab84657b712aac59951420f4e9d696c3d84ba2","closed","type: bug,","spring-projects-issues","2017-07-05T18:40:12Z","2019-01-11T16:28:05Z"
"","20282","Add write methods to DataBufferUtils [SPR-15726]","**[Doron Gold](https://jira.spring.io/secure/ViewProfile.jspa?name=dorongold)** opened **[SPR-15726](https://jira.spring.io/browse/SPR-15726?redirect=false)** and commented  Although it's usually less frequent than HTTP communication and database access, web applications and micro-services sometimes need to read/write from the filesystem.  When building a web application or a RESTful service with Spring WebFlux, it's best to stay reactive ""all the way"". This means that filesystem operations, like any other I/O operation, should be non-blocking. It is especially important when accessing a mounted filesystem, in such a case operations can be just as slow (and potentially block for a long time) as HTTP operations, since they go over the network.  It would be very helpful to have a high-level utility that facilitates reactive filesystem operations (such as read and write) and abstracts away low-level details such as Netty API. This would be similar to the high-level way WebClient facilitates HTTP operations.  In a similar fashion to WebClient, such a utility should have an API that uses Mono and Flux, for easily chaining to other operations and for consistency with the rest of the Spring reactive framework.  ---  **Issue Links:** - #20329 Provide control over thread resources used for file I/O in WebFlux","closed","type: enhancement,","spring-projects-issues","2017-07-01T15:47:39Z","2019-01-11T16:11:49Z"
"","20281","Add BodyToMono and BodyToFlux overrides that receive ParameterizedTypeReference [SPR-15725]","**[Doron Gold](https://jira.spring.io/secure/ViewProfile.jspa?name=dorongold)** opened **[SPR-15725](https://jira.spring.io/browse/SPR-15725?redirect=false)** and commented  Sometimes the body of responses from WebClient should map to a type with generics. Currently the `bodyToMono`, `BodyToFlux` and `toEntity` methods on `ClientResponse` and on `ResponseSpec` only receive `Class bodyType`. This does not allow for extracting bodies of a type that has generics.  Since the class `BodyExtractors` already has a static method: `public static  BodyExtractor toMono(ParameterizedTypeReference typeReference)` It seems like all there is left to do is to add `bodyToMono`, `BodyToFlux` and `toEntity` overrides that utilize that factory method (and the similar `toFlux` factory method)  Code that uses the suggested functionality would look like the following:  ```java Mono singlePageOfExamples = webClient.get()                 .uri(""http://spring.io/example?page=0"")                 .retrieve()                 .bodyToMono(new ParameterizedTypeReference() {});  singlePageOfExamples = webClient.get()                 .uri(""http://spring.io/example?page=1"")                 .retrieve()                 .toEntity(new ParameterizedTypeReference() {})                 .map(responseEntity -> responseEntity.getBody())  singlePageOfExamples = webClient.get()                 .uri(""http://spring.io/example?page=2"")                 .exchange()                 .flatMap(clientResponse -> clientResponse.bodyToMono(new ParameterizedTypeReference() {})); ```    ---  **Affects:** 5.0 RC2  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2017-07-01T08:41:09Z","2017-07-24T07:51:16Z"
"","20280","Convenience API for custom error handling on WebClient [SPR-15724]","**[Doron Gold](https://jira.spring.io/secure/ViewProfile.jspa?name=dorongold)** opened **[SPR-15724](https://jira.spring.io/browse/SPR-15724?redirect=false)** and commented  It would be very helpful to have a way to set custom error handling for WebClient responses. This could be done by providing methods that allow developers to map each desired response code to an error handling Function.  Code that uses such functionality could look similar to the following:  ```java Mono exampleResponse = webClient.get()                 .uri(""http://spring.io/example"")                 .exchange()                 .onStatusCode(HttpStatus.FORBIDDEN, (ClientResponse clientResponse) -> {                     return new CustomException(""Access Forbidden"");                 })                 .on4xx((ClientResponse clientResponse) -> {                     return new CustomException(""Client Error"");                 })                 .on5xx((ClientResponse clientResponse) -> {                     return new CustomException(""Server Error"");                 })                 .flatMap(clientResponse -> clientResponse.bodyToMono(ExampleResponse.class));  Mono exampleResponse2 = webClient.get()                 .uri(""http://spring.io/example2"")                 .exchange()                 .onStatusCode(HttpStatus.FORBIDDEN, (ClientResponse clientResponse) -> {                     return new CustomException(""Access Forbidden"");                 })                 .onStatusCode(HttpStatus.INTERNAL_SERVER_ERROR, (ClientResponse clientResponse) -> {                     return new CustomException(""Internal Error"");                 })                 .on4xx5xx((ClientResponse clientResponse) -> {                     return new CustomException(""General Error"");                 })                 .flatMap(clientResponse -> clientResponse.bodyToMono(ExampleResponse2.class)); ```  In the example above the `onStatusCode` method receives a status code and a Function. The specified status code maps to the specified Function. The Function is of the following type: `Function` In case the returned response code matches, the appropriate Function is applied and an error Mono that wraps the Throwable returned by the Function is emitted.  The variants `on4xx`, `on5xx`, and `on4xx5xx` provide a ""catch all"" ability. They map a range of status codes to a Function.  ---  **Affects:** 5.0 RC2  **Issue Links:** - #20379 WebClientException should allow access to status code of the response  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2017-07-01T08:14:55Z","2020-09-10T11:48:59Z"
"","20258","Exception Handler methods do not receive the original exception as argument [SPR-15701]","**[Doron Gold](https://jira.spring.io/secure/ViewProfile.jspa?name=dorongold)** opened **[SPR-15701](https://jira.spring.io/browse/SPR-15701?redirect=false)** and commented  In WebFlux, methods annotated with `@ExceptionHandler` (either in Controllers or in a class annotated with `@ControllerAdvice`) should be able to receive the thrown exception as an argument. However, if the exception has a cause, only the cause exception is passed to `InvocableHandlerMethod#invoke`. In case the exception handler method declares as parameter a specific exception type, when that exception is thrown (assuming it has a non-null cause) the exception handler fails to invoke with the following error:  `java.lang.IllegalStateException: No suitable resolver for argument 0 of type 'org.springframework.issues.errorhandling.CustomException' on public java.lang.String org.springframework.issues.errorhandling.HelloController.handleCustomException(org.springframework.issues.errorhandling.CustomException)`  ### How to Reproduce  **See the attached link to a reproduction project**  Controller code from that project:  ```java @RestController public class HelloController {      public static final String ERROR_MSG = ""An error occurred!"";      @RequestMapping(""/hello"")     public String hello() {         final NestedException nested = new NestedException(""nested"");         throw new CustomException(""outer"", nested);     }      @ExceptionHandler()     public String handleCustomException(final CustomException e) {         return ERROR_MSG;     } } ```  Invoke the error handler by sending the following HTTP request: `http://localhost:8080/hello`  Notice that in web-mvc the exact same code works fine. This can be confirmed by changing the following gradle dependency: `compile(""org.springframework.boot:spring-boot-starter-webflux"")` to: `compile(""org.springframework.boot:spring-boot-starter-web"")`   ---  **Affects:** 5.0 RC2  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/158  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a6d616d8444fb29626df15a1e4943203ad030fe1  3 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2017-06-24T14:29:00Z","2017-07-24T07:51:13Z"
"","20239","RequestContextHolder for Reactive Web [SPR-15680]","**[Doron Gold](https://jira.spring.io/secure/ViewProfile.jspa?name=dorongold)** opened **[SPR-15680](https://jira.spring.io/browse/SPR-15680?redirect=false)** and commented  It is necessary to have a way to associate attributes with the current request and be able to fetch these attributes during the request lifetime.  The ability to set and get such attributes is essential for use-cases such as: * Having a unique trace-id per request, which can be included in all log messages. * Identifying the currently logged in user (the user associated with the request). * In a micro-service architecture: receiving contextual data via request headers, then when calling other micro-services, pass the same contextual data that came with the original request.  In webmvc this is possible by calling a static methods on `org.springframework.web.context.request.RequestContextHolder`. A developer could implement HandlerInterceptor which intercepts all incoming requests and sets contextual attributes on RequestContextHolder. These attributes are then accessible from anywhere in the code (via a static method) during the request lifetime.  Since in Reactive Web a request is not bound to a single processing thread, a simple use of ThreadLocal (what RequestContextHolder does) is not enough. The Spring framework should offer a more sophisticated solution.  A simple but extremely intrusive workaround would be to pass in ServerWebExchange to all methods in all components - starting from controller endpoints down to all services. But even if this is done, there is no good way to have a logger take attributes form the request (for the purpose of including trace/correlation ID) without implementing a wrapper around the logger class that receives an extra parameter.  ---  **Reference URL:** https://stackoverflow.com/questions/43975761/how-to-get-the-context-of-the-current-request-in-spring-webflux  **Issue Links:** - #21746 Create a WebFilter for ServerWebExchange Reactor Context - #20108 Upgrade to Reactor 3.1 RC1 (including Reactive Streams 1.0.1)  19 votes, 34 watchers","closed","status: superseded,","spring-projects-issues","2017-06-18T15:28:22Z","2021-04-13T12:19:55Z"
"","19730","Support @JsonFilter on @ResponseBody and ResponseEntity Controller methods [SPR-15164]","**[doom777](https://jira.spring.io/secure/ViewProfile.jspa?name=doom777)** opened **[SPR-15164](https://jira.spring.io/browse/SPR-15164?redirect=false)** and commented  Just like `@JsonView` can be used to properly serialize response entities, so should `@JsonFilter`.  Unfortunately, sometimes `@JsonView` is not flexible enough. In my app, for example, a response body contains two arrays: objects to add to display, and objects to remove from display. Both Arrays are of the same Type, however objects to add are full objects with all of entities, while objects to remove are just light shells, not fully retrieved from the database for performance issues. They are of same type, but need different serialization. I'd like to register a custom serialization filter with my app-wide object mapper, and use it on the return value from my controller method.  ---  **Issue Links:** - #17187 Support Jackson `@JsonFilter` (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2017-01-18T22:30:57Z","2019-01-13T05:17:28Z"
"","18561","springCache has a serious effect on system performance  [SPR-15378]","**[dongxingong](https://jira.spring.io/secure/ViewProfile.jspa?name=dongxingong)** opened **[SPR-15378](https://jira.spring.io/browse/SPR-15378?redirect=false)** and commented  I used `@Cacheable` annotion cache to implement my mysql application. But when cache expires, to much requests come into system instantly and do not hit the cache.  Spring invokes too much sql operations meanwhile. It makes my server load very high every expireTime. I think it should be a protection to limit the concurrency amount and can be configured.Maybe we can make a fix in the method execute of CacheInterceptor class.   ---  **Affects:** 4.3.6, 4.3.7","closed","in: core,","spring-projects-issues","2017-03-24T04:42:13Z","2019-01-12T05:23:03Z"
"","20070","Make it possible to pass method and URL to ResponseErrorHandler [SPR-15511]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-15511](https://jira.spring.io/browse/SPR-15511?redirect=false)** and commented  There is a need to create a custom exception that contains method (GET, PUT, ...) and URL information in custom `ResponseErrorHandler`. Currently the only way to add this information to the exception is to catch and re-wrap it into another exception:  ``` RestTemplate restTemplate = new RestTemplate(); restTemplate.setErrorHandler(new MyRestErrorHandler());  String url = ""...""; try {     String response = restTemplate.getForEntity(url, String.class); } catch (MyRestException e) {     throw new MyRestUrlException(HttpMethod.GET, url, e); } ```  Consider extending `ResponseErrorHandler` interface so that the signature is:  ``` void handleError(HttpMethod method, URI url, ClientHttpResponse response) throws IOException; ```    ---  **Affects:** 4.3.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/805fcc6a059759c22055a747282b23e8a9586490","closed","type: enhancement,","spring-projects-issues","2017-05-03T13:58:45Z","2017-06-14T10:12:19Z"
"","19892","DefaultResponseErrorHandler should have its methods protected [SPR-15329]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-15329](https://jira.spring.io/browse/SPR-15329?redirect=false)** and commented  Apparently I would like to extend `org.springframework.web.client.DefaultResponseErrorHandler` and override its `handleError()` method. However I need access to `getHttpStatusCode()`, `getResponseBody()` and `getCharset()` methods. Please change the signature from `private` to `protected`.  ---  **Affects:** 4.2.6  **Issue Links:** - #21145 DefaultResponseErrorHandler wastes the body of a response with an unknown status  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ab7db413c69f81e8bdf68c90e560208e366fb9ea, https://github.com/spring-projects/spring-framework/commit/e9ff3bb4e3a53f834bbd832ee0b75531fee4ea70","closed","type: enhancement,","spring-projects-issues","2017-03-08T14:53:19Z","2019-01-11T15:07:52Z"
"","20030","Boundary not found in header [SPR-15470]","**[Dmitriy Artanov](https://jira.spring.io/secure/ViewProfile.jspa?name=dmitriyartanov)** opened **[SPR-15470](https://jira.spring.io/browse/SPR-15470?redirect=false)** and commented  I use spring-boot with undertow for mikro service. When other service (on spring-boot too) upload file on my service, then header multipart created without space between multipart and boundary. Thereby my service lost boundary from header.  ```java         final HttpHeaders headers = new HttpHeaders();         headers.setContentType(MediaType.MULTIPART_FORM_DATA);          final MultiValueMap parts = new LinkedMultiValueMap();         parts.add(                 ""file"",                 new ByteArrayResource(file.getBytes()) {                     @Override                     public String getFilename() {                         return file.getName();                     }                 }         );         final ResponseEntity response = restClient.getRestTemplate().exchange(                 restClient.uriFromString(""/1.0/file/upload""),                 HttpMethod.POST,                 new HttpEntity(parts, headers),                 new ParameterizedTypeReference() {                 }         ); ```    ---  **Affects:** 4.3.8  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1393","closed","in: core,","spring-projects-issues","2017-04-20T16:51:06Z","2019-01-12T16:33:23Z"
"","19652","SseEmitter - Response already closed [SPR-15086]","**[Diego Baldani](https://jira.spring.io/secure/ViewProfile.jspa?name=diegobmd)** opened **[SPR-15086](https://jira.spring.io/browse/SPR-15086?redirect=false)** and commented  i'm using a SseEmitter to produces a infinite stream, like ping, when the client was disconnected the server couldn't identify and try write to response occurred the error below  ``` 2017-01-03 12:04:18.368 ERROR 3824 --- [  XNIO-2 task-2] io.undertow.request : UT005071:  Undertow request failed HttpServerExchange{  GET /xpto.stream request {Accept=[*/*], User-Agent=[curl/7.50.3], Host=[localhost:8989]} response  {Connection=[keep-alive], Transfer-Encoding=[chunked], Content-Type=[text/event-stream;charset=UTF-8],  X-Application-Context=[xxxx:8080], Date=[Tue, 03 Jan 2017 14:03:58 GMT]}}  java.lang.IllegalStateException: UT000002: The response has already been started ```  Controller example:  ```java @ResponseStatus(value = HttpStatus.PARTIAL_CONTENT) @GetMapping(""/xpto.stream"") public SseEmitter getEvents() throws Exception {       Observable ping = Observable.interval(10, TimeUnit.SECONDS)             .map(count -> Collections.singletonMap(""type"", (Object) ""Ping""))             .publish().refCount();          return RxResponse.sse(Long.MAX_VALUE, MediaType.APPLICATION_JSON, ping); } ```    ---  **Affects:** 4.3.5","closed","status: declined,","spring-projects-issues","2017-01-03T14:11:39Z","2019-01-12T16:33:40Z"
"","20165","Using multiple configLocations with SqlMapClientFactoryBean shouldn't wire up caches to be flushed multiple times [SPR-15606]","**[Dennis Waldherr](https://jira.spring.io/secure/ViewProfile.jspa?name=dennisw)** opened **[SPR-15606](https://jira.spring.io/browse/SPR-15606?redirect=false)** and commented  `SqlMapClientFactoryBean#buildSqlMapClient` reuses `SqlMapConfigParser` to parse each config location. `SqlMapConfigParser#addSqlMapConfigNodelets` registers a call to `SqlMapConfiguration#finalizeSqlMapConfig` which in turn calls `wireUpCacheModels` each time the end of a document is reached (once per configLocation). So for each `configLocation` a call to `wireUpCacheModels` is made. It registers all `CacheModel`s again and again for the same statements...   ---  **Affects:** 4.3.5","closed","status: invalid,","spring-projects-issues","2017-06-01T10:08:07Z","2019-01-12T05:20:47Z"
"","20012","Binding Environment variable to Map yields unexpected results [SPR-15451]","**[David Turanski](https://jira.spring.io/secure/ViewProfile.jspa?name=dturanski)** opened **[SPR-15451](https://jira.spring.io/browse/SPR-15451?redirect=false)** and commented  See above referenced example. This is derived from an issue encountered in Spring Cloud Data Flow. A `@ConfigurationProperties` class contains a Map.  Foo has a single arg constructor Foo(String bar){}.  `PROPS_FOOS_FOO1_BAR=bar` results in a key `FOO1_BAR`  and the value is bound to the constructor arg.  This functionally works for the simplest case in SCDF, but is misleading because it doesn't work as intended. The intended key is `FOO1` and `BAR` maps to a property in the corresponding value object if it exists.  Note without the single constructor arg, the example results in an error (Unable to convert String to a Foo) which is probably acceptable too.    ---  **Reference URL:** https://github.com/dturanski/property-binding-to-map","closed","in: core,","spring-projects-issues","2017-04-13T13:49:09Z","2019-01-12T05:20:58Z"
"","20360","Beans defined by XML are skipped in @Configuration override [SPR-15805]","**[David Lopez](https://jira.spring.io/secure/ViewProfile.jspa?name=antdavidl)** opened **[SPR-15805](https://jira.spring.io/browse/SPR-15805?redirect=false)** and commented  When you define a bean in a XML, you cannot redefine it in a `@Component` or `@TestComponent` class using a `@Bean` declaration). It can, however, be redefined using another XML.  I have defined this as a Improvement since I do not think it explicitly violates anything .. simply it is a grey zone in the DI part fo Spring, but anyway, I consider this behaviour inconsistent and weird.  This issue is similar to #14201, but to the case when  ---  **Affects:** 4.3.9, 5.0 RC2  **Attachments:** - [XmlOverrideBug.zip](https://jira.spring.io/secure/attachment/25055/XmlOverrideBug.zip) (_5.35 kB_)  **Issue Links:** - #14201 Beans defined by `@ComponentScan` are skipped in `@Configuration` override  1 votes, 1 watchers","open","in: core,","spring-projects-issues","2017-07-21T10:30:33Z","2019-01-13T05:15:21Z"
"","20262","Default Locale not set on Spring Webflux [SPR-15705]","**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** opened **[SPR-15705](https://jira.spring.io/browse/SPR-15705?redirect=false)** and commented  Hi,  https://github.com/spring-projects/spring-boot/issues/9588  Asked to create the ticket here for exploration. The details of the problem are outlined in the github issue (now closed on Spring Boot), but generally, if using spring-boot-starter-webflux with Thymeleaf 3.0 (and Thymleaf-Spring5 (3.0.7-SNAPSHOT)), the default locale is not being set and thus causes Thymeleaf to bomb out with error (as detailed in the github issue).  I was asked to also provide the thymeleaf template used for testing this. Here it is:  ```java    Hello Foo!   ```  As you can see, pretty simple :-)  The code in ThymeleafReactiveView, has this snippet:  ```java if (getLocale() == null) {     return Mono.error(new IllegalArgumentException(""Property 'locale' is required"")); } ```  Please let me know if I can be of further assistance.  -=david=-  ---  **Affects:** 5.0 RC2  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/9588  **Issue Links:** - #19602 Introduce a LocaleContextResolver abstraction in WebFlux","closed","type: bug,","spring-projects-issues","2017-06-26T15:27:17Z","2019-01-11T16:11:57Z"
"","19900","HEAD response has ""Content-Length: 0"" for @RestController @GetMapping methods [SPR-15337]","**[David Goblirsch](https://jira.spring.io/secure/ViewProfile.jspa?name=dmgob)** opened **[SPR-15337](https://jira.spring.io/browse/SPR-15337?redirect=false)** and commented  When including ShallowEtagHeaderFilter in a REST application, HEAD responses no longer include an ETag header as of 4.3.7, but they still have zero for the Content-Length header. If I do not activate a ShallowEtagHeaderFilter, the response to HEAD has the Content-Length header value set to the size of the response body that GET would have returned, which is the desired behavior.   ---  **Affects:** 4.3.7  **Reference URL:** #19826  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/6a1802f8c0836fd12db7e7ccfc74ae0d2aac6b90","closed","","spring-projects-issues","2017-03-09T15:12:19Z","2019-01-14T04:35:58Z"
"","19826","HEAD response has ""Content-Length: 0"" for @RestController @GetMapping methods [SPR-15261]","**[David Goblirsch](https://jira.spring.io/secure/ViewProfile.jspa?name=dmgob)** opened **[SPR-15261](https://jira.spring.io/browse/SPR-15261?redirect=false)** and commented  In response to HEAD, now handled by Spring for `@GetMapping` methods as of 4.3+, the HTTP spec says that it ""should"" include the same headers that GET would include, except that four header parameters are considered ""optional"". Content-Length is one of these optional headers for HEAD requests. BUT when it is included, it is supposed to have the same value as it would have been for GET, i.e., the length of the response body.  My `@RestController` `@GetMapping` methods return the correct non-zero value for GET requests but are setting Content-Length: 0 for HEAD requests.  This is using Spring 4.3.6 on both JBoss 6.1 (yes, very old) and WildFly 10.1.  ---  **Affects:** 4.3.6  **Reference URL:** http://stackoverflow.com/questions/27868314/avoiding-content-length-in-head-response  **Issue Links:** - #19776 HTTP Response should not contain both Transfer-Encoding and Content-Length headers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b732251b093552812d7457608d422e899241ca04, https://github.com/spring-projects/spring-framework/commit/45b27a85f4b749d821452f18490d24a023fc5b2a","closed","type: bug,","spring-projects-issues","2017-02-16T15:48:20Z","2019-01-11T14:28:28Z"
"","19794","DefaultSubscriptionRegistry should prevent duplicate Subscriptions per subscription id [SPR-15229]","**[David Fuelling](https://jira.spring.io/secure/ViewProfile.jspa?name=sappenin)** opened **[SPR-15229](https://jira.spring.io/browse/SPR-15229?redirect=false)** and commented  It appears that the equals() and hashcode() methods have not been implemented in the private class `DefaultSubscriptionRegistry.Subscription`. This has the effect of allowing duplicate subscriptions with the same identifier into the `Set` held by each key in `SessionSubscriptionInfo.destinationLookup`. This seems like a bug, although it's possible that STOMP allows for duplicate subscriptions using the same subscription-Id?   ---  **Affects:** 4.3.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f219680d42e4ccb80fefd3e72ef848bfc9ab5488, https://github.com/spring-projects/spring-framework/commit/ba0484fcacd690a36929b0f3836d41d6c9a6823d","closed","type: enhancement,","spring-projects-issues","2017-02-07T15:56:26Z","2019-01-11T14:33:34Z"
"","20321","ClassCastException during deserialization of ScopedObject [SPR-15766]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-15766](https://jira.spring.io/browse/SPR-15766?redirect=false)** and commented  A `ScopedObject` (as is created by a `@Bean` in `@SessionScope` for example) has a reference to the `BeanFactory` that created it, and when it is serialized and deserialized the `BeanFactory` is re-hydrated by looking it up in a global map.  The fix for #18689 made this process more robust, but it has now exposed another corner case because the `StaticListableBeanFactory` that it creates as a fallback is not a `ConfigurableBeanFactory`, and a `DefaultScopedObject` has a field of that type, so when it is deserialized there is a class cast exception.  ---  **Affects:** 4.3.9  **Reference URL:** https://github.com/spring-projects/spring-session/issues/799  **Issue Links:** - #18689 Scoped proxies are fragile with respect to serialization - #22040 Reserializing a lenient fallback DefaultListableBeanFactory causes an error  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c9ffa64140697b85046e43a984657064a64ed6b4, https://github.com/spring-projects/spring-framework/commit/fd2b4f242788c53351bfa1d4dfddc5a6d4bd3651","closed","in: core,","spring-projects-issues","2017-07-13T09:47:40Z","2019-01-11T16:26:30Z"
"","20038","ResponseEntity","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-15478](https://jira.spring.io/browse/SPR-15478?redirect=false)** and commented  ``` @RequestMapping(""/words"") public ResponseEntity words() {      return ResponseEntity.ok()                .body(Flux.fromArray(new Bar[] { new Bar(""foo""), new Bar(""bar"") })); } ```  Test:  ``` @Test public void words() {      assertThat(new TestRestTemplate()                .getForObject(""http://localhost:"" + port + ""/words"", String.class))                                  .isEqualTo(""[{\""value\"":\""foo\""},{\""value\"":\""bar\""}]""); } ```  Exception:  ``` org.junit.ComparisonFailure: expected: but was: ```  Note that the exception shows up in the response body, not in logs, which is odd.  If you change the `@RequestMapping` to just return `Flux` it works fine.   ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c67b0d650759bc27786bef06480a417bb611ace7","closed","type: bug,","spring-projects-issues","2017-04-25T10:10:37Z","2017-05-08T08:41:48Z"
"","20022","spring-core source jar contains two copies of source code [SPR-15462]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-15462](https://jira.spring.io/browse/SPR-15462?redirect=false)** and commented  The commons-logging classes in spring-core (see #19081) seem to contain 2 copies of the source code (in the same file for each class). I think that makes them unreadable by Eclipse because I can't read the code in the IDE.  ---  **Affects:** 5.0 RC1  **Issue Links:** - #19081 Revisit Commons Logging vs java.util.logging vs SLF4J vs Log4j 2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cf6031f98e8aedb8ba99762cdf069fda985bc816  0 votes, 6 watchers","closed","type: task,","spring-projects-issues","2017-04-19T13:54:46Z","2019-01-11T16:39:34Z"
"","20017","Spring MVC @ResponseBody handling of Flux inconsistent when type of result is unknown [SPR-15456]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-15456](https://jira.spring.io/browse/SPR-15456?redirect=false)** and commented  I would expect this:  ``` @GetMapping(""/empty"") public Flux empty() {      return Flux.fromIterable(Collections.emptyList()); } ```  to produce an identical result to this:  ``` @GetMapping(""/empty"") public Flux empty() {      return Flux.fromIterable(Collections.emptyList()); } ```  But it doesn't (the former is ""null"" and the latter is ""[]""). I guess maybe the ""null"" is a bug?  If the `Flux` is not empty, then both signatures should also probably produce the same result, but doesn't (the strings get concatented and the objects get converted)? Or maybe I'm missing something.  ---  **Affects:** 5.0 RC1  **Issue Links:** - #20024 WebFlux should support Flux and Flux rendering  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/abe3cfd8debea18cbfb32e923cf73d0a86ae98e4, https://github.com/spring-projects/spring-framework/commit/d3b178a812b6c3b55f8060ba75679b3ad7b84f3b, https://github.com/spring-projects/spring-framework/commit/a93698487e8c5b87685af58dd41eb6dd79c02158","closed","type: bug,","spring-projects-issues","2017-04-18T08:26:46Z","2019-01-11T16:41:00Z"
"","19973","Awkward binary incompatibility in ResponseBodyEmitterReturnValueHandler [SPR-15410]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-15410](https://jira.spring.io/browse/SPR-15410?redirect=false)** and commented  The constructor signature changed here:  https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.java#L65  so there's no way to compile an implementation withSpring 4.3 and run with Spring 5. Probably we could keep the old constructor and add a new one?   ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de6f34893a8fd329822aec3a7875440b2eb86624","closed","type: bug,","spring-projects-issues","2017-04-04T13:42:49Z","2017-05-08T08:41:47Z"
"","19936","VersionResourceResolver does not delegate path resolution to the chain [SPR-15372]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-15372](https://jira.spring.io/browse/SPR-15372?redirect=false)** and commented  It's easy to reproduce. Take the petclinic. Observe that webjars paths have versions in them in the UI  Then set  ``` spring.resources.chain.strategy.content.enabled=true spring.resources.chain.strategy.content.paths=/resources/** ```  and observe that the local resources get versions, but the webjars lose theirs.  It seems like a logic error in the `ResourceResolverChain`. There **is** a webjar resource resolver there, but it never gets a chance to vote on the path.   --- No further details from [SPR-15372](https://jira.spring.io/browse/SPR-15372?redirect=false)","closed","type: bug,","spring-projects-issues","2017-03-22T10:20:19Z","2017-04-18T15:43:21Z"
"","19894","Cannot test finite SSE because converters are registered in a funny order [SPR-15331]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-15331](https://jira.spring.io/browse/SPR-15331?redirect=false)** and commented  I was trying to write an integration test for a webflux server that emits an SSE and seeing this:  ``` java.lang.UnsupportedOperationException: ServerSentEventHttpMessageReader only supports reading stream of events as a Flux ```  It turns out that the SSE converter was trying to convert the body because it was registered ahead of the String converter (a String would have been fine for my test).   ---  **Affects:** 5.0 M5","closed","type: enhancement,","spring-projects-issues","2017-03-08T17:05:29Z","2017-05-08T08:41:46Z"
"","19868","When using ParsingPathMatcher in MVC user should not have to also explicitly set suffix matching [SPR-15303]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-15303](https://jira.spring.io/browse/SPR-15303?redirect=false)** and commented  With this request mapping:  ``` @GetMapping(""/something/{*path}"") ```  This doesn't work:  ``` @Override public void configurePathMatch(PathMatchConfigurer configurer) {     configurer.setPathMatcher(new ParsingPathMatcher()); } ```  ``` 2017-03-01 17:43:51.763 ERROR 3503 --- [nio-8080-exec-8] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.web.util.patterns.PatternParseException: No more pattern data allowed after {*...} pattern element] with root cause  org.springframework.web.util.patterns.PatternParseException: No more pattern data allowed after {*...} pattern element 	at org.springframework.web.util.patterns.InternalPathPatternParser.parse(InternalPathPatternParser.java:157) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.util.patterns.PathPatternParser.parse(PathPatternParser.java:68) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.util.ParsingPathMatcher.getPathPattern(ParsingPathMatcher.java:115) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.util.ParsingPathMatcher.match(ParsingPathMatcher.java:50) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.getMatchingPattern(PatternsRequestCondition.java:253) ~[spring-webmvc-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.getMatchingPatterns(PatternsRequestCondition.java:230) ~[spring-webmvc-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.getMatchingCondition(PatternsRequestCondition.java:211) ~[spring-webmvc-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.mvc.method.RequestMappingInfo.getMatchingCondition(RequestMappingInfo.java:220) ~[spring-webmvc-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:94) ~[spring-webmvc-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] ... ```  The problem is that the request matcher tries to match ""/something/{**path}.**"" (suffix matching) or ""/something/{*path}/"" (trailing slash).  This does work:  ``` @Override public void configurePathMatch(PathMatchConfigurer configurer) {     configurer.setPathMatcher(new ParsingPathMatcher());     configurer.setUseSuffixPatternMatch(false);     configurer.setUseTrailingSlashMatch(false); } ```  but why should the user have to know about how to do that? If the user **does** have to know this, then the error message is completely cryptic, and maybe we can come up with a better one.  ---  **Affects:** 5.0 M5  **Issue Links:** - #20117 {*...} pattern does not work on handler method - #19960 Parse request path only once during routing  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0557404715f205e13001aec19c3d0d3d1ca3a0ed","closed","type: bug,","spring-projects-issues","2017-03-01T17:46:39Z","2019-01-11T15:10:31Z"
"","19840","@Configuration processing fails to handle AbstractFactoryBean.getObject() calls [SPR-15275]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-15275](https://jira.spring.io/browse/SPR-15275?redirect=false)** and commented  ``` ... Caused by: java.lang.IllegalArgumentException: interface com.example.InjectApplication$Bar is not visible from class loader 	at java.lang.reflect.Proxy$ProxyClassFactory.apply(Proxy.java:581) ~[na:1.8.0_60] 	at java.lang.reflect.Proxy$ProxyClassFactory.apply(Proxy.java:557) ~[na:1.8.0_60] 	at java.lang.reflect.WeakCache$Factory.get(WeakCache.java:230) ~[na:1.8.0_60] 	at java.lang.reflect.WeakCache.get(WeakCache.java:127) ~[na:1.8.0_60] 	at java.lang.reflect.Proxy.getProxyClass0(Proxy.java:419) ~[na:1.8.0_60] 	at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:719) ~[na:1.8.0_60] 	at org.springframework.beans.factory.config.AbstractFactoryBean.getEarlySingletonInstance(AbstractFactoryBean.java:167) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.beans.factory.config.AbstractFactoryBean.getObject(AbstractFactoryBean.java:148) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at com.example.InjectApplication.another(InjectApplication.java:16) [classes/:na] 	at com.example.InjectApplication$$EnhancerBySpringCGLIB$$60c0613f.CGLIB$another$1() ~[classes/:na] 	at com.example.InjectApplication$$EnhancerBySpringCGLIB$$60c0613f$$FastClassBySpringCGLIB$$b0b49c40.invoke() ~[classes/:na] 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:356) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at com.example.InjectApplication$$EnhancerBySpringCGLIB$$60c0613f.another() ~[classes/:na] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_60] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_60] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_60] 	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_60] 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	... 18 common frames omitted ```    ---  **Affects:** 4.3.6  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/150  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a48a956c0c7e72d99a9657de53b79f9dfc95189d, https://github.com/spring-projects/spring-framework/commit/7fb0ad37da156ae9a2c9c236eaa0f0e2a512c462","closed","in: core,","spring-projects-issues","2017-02-21T15:45:35Z","2017-02-23T09:29:12Z"
"","19786","Support for Map as a model in WebFlux controllers [SPR-15221]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-15221](https://jira.spring.io/browse/SPR-15221?redirect=false)** and commented  `Model` appears to be supported but not `Map`.   --- No further details from [SPR-15221](https://jira.spring.io/browse/SPR-15221?redirect=false)","closed","","spring-projects-issues","2017-02-03T13:52:43Z","2019-01-11T14:33:14Z"
"","19673","Discovery of websocket RequestUpgradeStrategy fails [SPR-15106]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-15106](https://jira.spring.io/browse/SPR-15106?redirect=false)** and commented  In HandshakeWebSocketService we try to locate a RequestUpgradeStrategy, but only look in the same package as the HandshakeWebSocketService (whereas in fact the strategies are all there in the ""upgrade"" sibling package). I'm not sure of the intent here but it seems to be bound to fail.  ---  **Affects:** 5.0 M4  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/server/support/HandshakeWebSocketService.java#L126  **Issue Links:** - #19655 Wrong path to RequestUpgradeStrategies in HandshakeWebSocketService (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2017-01-06T16:15:43Z","2019-01-12T16:45:15Z"
"","20375","[Kotlin] Warning message about private final methods. [SPR-15820]","**[Dariusz Bacinski](https://jira.spring.io/secure/ViewProfile.jspa?name=dbacinski)** opened **[SPR-15820](https://jira.spring.io/browse/SPR-15820?redirect=false)** and commented  Recently in Kotlin version 1.1.2 there was a change regarding opening (making not final) Koltin classes . Now private methods are not being opened. This is actual change:  https://github.com/JetBrains/kotlin/commit/5d4cefcc30615284b1b28d0fe0653f738371c167  Unfortunately Spring is very verbose regarding printing warning into logs about final methods. Which leads to a warning about private final methods like this:  ""INFO  org.springframework.aop.framework.CglibAopProxy  - Final method [private final ...] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.""  https://github.com/spring-projects/spring-framework/blob/0d0b879a2313b73bf85abfe45ff0a59897aa6a3e/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java#L262  As discussed with Sebastien Deleuze `@koltinlang` Slack this should be checked only for public and protected methods.    ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1e07468d20c49baeb441425c7d0df053cb5d3cd1","closed","in: core,","spring-projects-issues","2017-07-26T12:43:07Z","2017-09-11T12:09:48Z"
"","20027","ServerResponse.BodyBuilder.body(Object) shadows body(Publisher) in Kotlin ServerResponseExtensions [SPR-15467]","**[Dariusz Bacinski](https://jira.spring.io/secure/ViewProfile.jspa?name=dbacinski)** opened **[SPR-15467](https://jira.spring.io/browse/SPR-15467?redirect=false)** and commented  #20021  After linked change I am unable to pass Mono to body method.  The problem is that can't pass generic type of List\::class.java to body method.  Doesn't work:  ``` val monoList: Mono = Mono.just(listOf(""1"", ""2"")) ok().contentType(APPLICATION_JSON_UTF8).body(monoList, List::class.java) ```  Works:  ``` val flux: Flux = Mono.just(listOf(""1"", ""2"")).flatMapIterable { it } ok().contentType(APPLICATION_JSON_UTF8).body(flux,  String::class.java) ```  Code is written in Kotlin -, but I think it also applies to Java due to how generics works.- It is very inconvenient that after linked change we have to provide exact type when we pass Publisher, before that it was not required.  ---  **Affects:** 5.0 RC1  **Issue Links:** - #20021 Add body(Object) method to ServerResponse.BodyBuilder  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b9dbac7b2cc09f086ce6256744a8a31e5d0fd90e","closed","type: bug,","spring-projects-issues","2017-04-20T14:20:07Z","2019-01-14T04:35:37Z"
"","20047","Deceptive error message in Spring Test ModelResultMatchers [SPR-15487]","**[Danny Trunk](https://jira.spring.io/secure/ViewProfile.jspa?name=dtrunk90)** opened **[SPR-15487](https://jira.spring.io/browse/SPR-15487?redirect=false)** and commented  The error message ""No errors for attribute [...]"" in attributeHasNoErrors is deceptive. The error message is displayed if the attribute actually has errors. It should be ""Errors for attribute [...]"" and maybe a list of the errors would be helpful.  ---  **Affects:** 4.3.8  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-test/src/main/java/org/springframework/test/web/servlet/result/ModelResultMatchers.java#L147  **Issue Links:** - #20048 Allow for HttpOnly cookie result matcher","closed","type: bug,","spring-projects-issues","2017-04-26T16:12:09Z","2019-01-11T16:37:01Z"
"","20335","Precondition failed for PUT methods on ResponseEntity return types [SPR-15780]","**[Danny Hamrick](https://jira.spring.io/secure/ViewProfile.jspa?name=dahamr)** opened **[SPR-15780](https://jira.spring.io/browse/SPR-15780?redirect=false)** and commented  We have an app that has recently been converted from Spring Boot 1.3.8 to 1.5.2. We are managing the ETag and LastModified headers. Our code worked fine with 1.3.8 but now causes a 412 Precondition Failed return code. We traced the return code to ServletWebRequest.validateIfUnmodifiedSince(). It is checking the flag after we set the new value. The functional change is from #18168. I'm not sure how we are suppoed to manage these headers now.  We put together an [example](https://github.com/dahamr/LastModifiedProblem) of what we are doing. Hopefully you can advise us on the proper way to proceed.   ---  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2017-07-17T02:38:24Z","2019-01-14T04:34:44Z"
"","19870","BeanCurrentlyInCreationException with no circular reference [SPR-15305]","**[Daniil Molchanov](https://jira.spring.io/secure/ViewProfile.jspa?name=radionoise)** opened **[SPR-15305](https://jira.spring.io/browse/SPR-15305?redirect=false)** and commented  I have a simple Spring application configured as follows:  ```java @Configuration public class SpringConfig {      @Bean     public ConnectionFactory connectionFactory() {         return new CachingConnectionFactory(""localhost"", 5672);     }      @Bean     public RabbitTemplate template(ConnectionFactory connectionFactory) {         RabbitTemplate template = new RabbitTemplate(connectionFactory);         template.setExchange(""rpc"");          return template;     }      @Bean     public AmqpProxyFactoryBean proxy(RabbitTemplate template) {         AmqpProxyFactoryBean proxy = new AmqpProxyFactoryBean();         proxy.setAmqpTemplate(template);         proxy.setServiceInterface(SimpleInterface.class);         proxy.setRoutingKey(SimpleInterface.class.getSimpleName());          return proxy;     } } ```  Spring context is initialized this way:  ```java public static void main(String[] args) {         AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(SpringConfig.class); } ```  When I start the application, UnsatisfiedDependencyException caused by BeanCurrentlyInCreationException occurs (however, I don't have circular reference in my config):  ``` Exception in thread ""main"" org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'template' defined in me.molchanoff.amqp.client.SpringConfig: Unsatisfied dependency expressed through method 'template' parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'proxy' defined in me.molchanoff.amqp.client.SpringConfig: Unsatisfied dependency expressed through method 'proxy' parameter 0; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'template': Requested bean is currently in creation: Is there an unresolvable circular reference? 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:866) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:542) 	at org.springframework.context.annotation.AnnotationConfigApplicationContext.(AnnotationConfigApplicationContext.java:84) 	at me.molchanoff.amqp.client.ClientMain.main(ClientMain.java:20) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147) Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'proxy' defined in me.molchanoff.amqp.client.SpringConfig: Unsatisfied dependency expressed through method 'proxy' parameter 0; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'template': Requested bean is currently in creation: Is there an unresolvable circular reference? 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck(AbstractAutowireCapableBeanFactory.java:923) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:804) 	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:558) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:432) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:403) 	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1260) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1101) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) 	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835) 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) 	... 19 more Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'template': Requested bean is currently in creation: Is there an unresolvable circular reference? 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.beforeSingletonCreation(DefaultSingletonBeanRegistry.java:347) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) 	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:208) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) 	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835) 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) 	... 33 more ```    ---  **Affects:** 4.3.5, 4.3.6, 4.3.7","closed","in: core,","spring-projects-issues","2017-03-02T10:55:26Z","2022-02-18T19:49:26Z"
"","18770","org.springframework.context.ApplicationContextException while setting explicitly spring.main.web-environment=true in property file [SPR-15713]","**[Daniil Chukhin](https://jira.spring.io/secure/ViewProfile.jspa?name=daniil.chukhin@yandex.ru)** opened **[SPR-15713](https://jira.spring.io/browse/SPR-15713?redirect=false)** and commented  Reproduced on Spring boot version 1.4.2.RELEASE. Explicit setting **spring.main.web-environment=true** in **bootstrap.properties** of spring boot application breaks initialization of spring context with autoconfigured web environment: _Caused by: org.springframework.context.ApplicationContextException: Unable to start EmbeddedWebApplicationContext due to missing EmbeddedServletContainerFactory bean. (see full stacktrace.txt in attachments)._  I did some debugging into SpringApplication.run and discovered next:  This happens because **BootstrapApplicationListener** creates inner SpringApplication instance and it is expected that webEnvironment is set to ""false"" for this inner SpringApplication object on refresh context call. (see **BootstrapApplicationListener.java:129**). But when running this inner SpringApplication, a list of listeners handle **ApplicationEnvironmentPreparedEvent** (see **SimpleApplicationEventMulticaster.java:127**). There is **ConfigFileApplicationListener** in the listeners list, which goes to property file and applies* spring.main.web-environment=true* to the SpringApplication, but spring expects this inner SpringApplication object to have this value set to false.  I solved it in my project by removing **spring.main.web-environment=true** line from bootstrap.properties. So it uses true value by default and it works fine then.  Is this a bug or my understanding is wrong somewhere?   ---  **Attachments:** - [AppServer.java](https://jira.spring.io/secure/attachment/25016/AppServer.java) (_1.04 kB_) - [stacktrace.txt](https://jira.spring.io/secure/attachment/25018/stacktrace.txt) (_6.90 kB_)","closed","status: invalid,","spring-projects-issues","2017-06-27T16:04:16Z","2019-01-12T05:22:55Z"
"","20034","Expose Jackson2CodecSupport mime types for custom override [SPR-15474]","**[Daniel Lavoie](https://jira.spring.io/secure/ViewProfile.jspa?name=daniellavoie)** opened **[SPR-15474](https://jira.spring.io/browse/SPR-15474?redirect=false)** and commented  Some web services offers JSON content without properly typing the content type. For example, a bad api serving json content but setting the content-type to **text/plain**. The brand new shiny **WebClient** relies on the Jackson2CodecSupport to decode the stream. Saldy, there is now way to manually define the supported mime types.  The class **Jackson2CodecSupport** does not offers any means to override the supported mime types.  I can provide a PR to expose an extension mechanism.  **Jackson2JsonDecoder**  ```java @Override public boolean canDecode(ResolvableType elementType, MimeType mimeType) {   JavaType javaType = this.objectMapper.getTypeFactory().constructType(elementType.getType());   // Skip String: CharSequenceDecoder + ""*/*"" comes after   return (!CharSequence.class.isAssignableFrom(elementType.resolve(Object.class)) &&     this.objectMapper.canDeserialize(javaType) && supportsMimeType(mimeType)); } ```  **Jackson2CodecSupport**  ```java   protected static final List JSON_MIME_TYPES = Arrays.asList(     new MimeType(""application"", ""json"", StandardCharsets.UTF_8),     new MimeType(""application"", ""*+json"", StandardCharsets.UTF_8));     protected boolean supportsMimeType(MimeType mimeType) {     return (mimeType == null ||       JSON_MIME_TYPES.stream().anyMatch(m -> m.isCompatibleWith(mimeType)));   } ```    ---  **Affects:** 5.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8231812a3c6dcaae6a783176967ed3b8523207d7","closed","type: enhancement,","spring-projects-issues","2017-04-22T14:44:29Z","2017-05-08T08:41:45Z"
"","19877","Increase reusability of Validator [SPR-15314]","**[Daniel Gulyas](https://jira.spring.io/secure/ViewProfile.jspa?name=danigu)** opened **[SPR-15314](https://jira.spring.io/browse/SPR-15314?redirect=false)** and commented  ### Quick summary  Hi!  It would be really cool if the Validator implementations could be reused at the Service level hassle-free.  It would be cool because: * It's a common scenario that there's a second request source using the same dto (think webmvc / rest and mq), adding the second source involves extra work if it doesn't provide the binding in an other way, without using implementations of the Errors interface * Increases code reuse, since we use the same Validator on both Service-level and Controller-level * Would promote validation at the service-level a bit  Example scenario when that happens: 1. There's a web-mvc project, `controller  service`, at the controller-side the dto is validated with the Validator 2. There's a business need to implement a secondary source of requests (let's say an mq)  Now there's a possibility to reuse the Validator created for the controller at the service level, but for me it seems to involves quite a hassle, it would be nice to make that convenient.  ### Proposal  * Create an interface which implements the simplified Errors interface   * Can be instantiated with the target object only   * Doesn't necessary have to store all the rejected properties, tracking if there was any errors might be enough * Create an abstract class which implements Validator   * Boolean validate(Object target) is implemented here  The namings for me seem to be a bit weak, they could handle suggestions I'm pretty sure.  For existing Validator implementations there's only need to extend this abstract class and it'll turn into a validator which is convenient to use at the service level, please see the attached java files, this might be a bit invasive although.  ### Follow-up  This is just an idea and i'm kinda new to Spring and to Java in general so the proposal will probably include foolish design mistakes, i looked it up and so far i haven't seen anything which would make reusing of these easy, please point it out if there's already some.  If that's cool to do and there's a consensus i could make a pr for this in the coming days.  Let me know what you think!   ---  **Attachments:** - [ExampleValidator.java](https://jira.spring.io/secure/attachment/23795/ExampleValidator.java) (_553 bytes_) - [ServiceLevelValidator.java](https://jira.spring.io/secure/attachment/23794/ServiceLevelValidator.java) (_350 bytes_) - [SimplifiedErrors.java](https://jira.spring.io/secure/attachment/23793/SimplifiedErrors.java) (_488 bytes_)","open","type: enhancement,","spring-projects-issues","2017-03-05T15:16:25Z","2020-08-24T18:17:49Z"
"","20110","Current definition of the Formatter interface might force blocking in WebFlux [SPR-15551]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-15551](https://jira.spring.io/browse/SPR-15551?redirect=false)** and commented  In one of the Thymeleaf sample applications using WebFlux, I have a `Formatter` like this:  ```java public class VarietyFormatter implements Formatter {     ...     public Variety parse(final String text, final Locale locale) throws ParseException {         final Integer varietyId = Integer.valueOf(text);         // There is no Formatter API yet that allows us to return a Publisher, so we need to block         return this.varietyService.findById(varietyId).block();     }  } ```  This is what I think could be a quite common pattern: a `Formatter` being used for transforming a PK (perhaps coming from a form field) into a complete entity object, coming from the database.  The problem is, the service method that this needs to call is reactive:  ```java public Mono findById(final Integer id) {     ... } ```  So either the `Formatter#parse()` method calls `.block()`, or it returns `Mono`. But in the latter case, that would mean changing the formatter class's specification to:  ```java public class VarietyFormatter implements Formatter {     ... } ```  And this would force us to block at the `Formatter#print()` method:  ```java public String print(final Mono object, final Locale locale) {     final Variety variety = object.block();     return (variety != null ? variety.getId().toString() : """"); } ```  Why not return `Mono` there? because the `Formatter` interface extends from `Printer`, and the `Printer#print(...)` method is defined as:  ```java String print(T object, Locale locale); ```  So it seems to me that there is no way to support this scenario in a non-blocking manner right now…   ---  **Affects:** 5.0 RC1","closed","status: declined,","spring-projects-issues","2017-05-15T21:28:05Z","2022-02-18T19:53:52Z"
"","19702","Reactive RedirectView throws exception if no RequestDataValueProcessor is present [SPR-15136]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-15136](https://jira.spring.io/browse/SPR-15136?redirect=false)** and commented  The current _reactive_ implementation of `RedirectView` makes the assumption that the application context will always contain an implementation of `RequestDataValueProcessor`, which does not seem to be true. Actually it is not `RedirectView` to be blamed but its parent `AbstractView`. But using `RedirectView` seems to be the most common way of being hit by this issue.  The `RedirectView#createUrl(...)` method does this just after building the URL and before returning it:  ```java RequestDataValueProcessor processor = getRequestDataValueProcessor(); return (processor != null ? processor.processUrl(exchange, result) : result); ```  See it here [on Github](https://github.com/spring-projects/spring-framework/blob/d724644588b77e807ce16b13ae3cd36208807055/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java#L213-L214)  Given `RedirectView` extends from `AbstractView`, this calls the `AbsctractView#getRequestDataValueProcessor()` method, which looks like this:  ```java protected RequestDataValueProcessor getRequestDataValueProcessor() { 	if (getApplicationContext() != null) { 		String beanName = REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME; 		return getApplicationContext().getBean(beanName, RequestDataValueProcessor.class); 	} 	return null; } ```  See it here [on GitHub](https://github.com/spring-projects/spring-framework/blob/d724644588b77e807ce16b13ae3cd36208807055/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java#L195-L201)  Note that the code above unconditionally calls `ApplicationContext#getBean(String,Class)`, which will throw `NoSuchBeanDefinitionException` if there is no `RequestDataValueProcessor` registered.  In contrast, see how this is done at the _MVC_ side, at the non-reactive `RedirectView#updateTargetUrl(...)` method, which calls the `RequestDataValueProcessor` only if it exists in the application context.  ```java if (wac != null && wac.containsBean(RequestContextUtils.REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) { 	RequestDataValueProcessor processor = wac.getBean( 			RequestContextUtils.REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class); 	return processor.processUrl(request, targetUrl); } ```  See it here [on GitHub](https://github.com/spring-projects/spring-framework/blob/d724644588b77e807ce16b13ae3cd36208807055/spring-webmvc/src/main/java/org/springframework/web/servlet/view/RedirectView.java#L582-L597).   ---  **Affects:** 5.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8b7f3a65ed50f176b739d9723d8deff1d4362171","closed","type: bug,","spring-projects-issues","2017-01-12T14:10:16Z","2017-02-23T09:29:09Z"
"","19675","Spring Web Reactive + Netty hangs on Windows when sending JSON [SPR-15108]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-15108](https://jira.spring.io/browse/SPR-15108?redirect=false)** and commented  ### Scenario  A web application developed using Spring Boot 2.0 (snapshot) and Spring 5 Web Reactive using Netty as a server, outputs an amount of data in JSON format.  ### Implementation  The [test-boot-netty-windows](https://github.com/danielfernandez/test-boot-netty-windows/tree/spr15108) repository (tag `spr15108`) contains a test application initialised using http://start.spring.io.  It uses Spring Boot 2.0 and Spring 5 Web Reactive. The dependencies have been modified in order to use Netty as a server instead of Apache Tomcat.  The application contains a `@RestController` which has a controller method returning a `Flux`.  The sample application can be started with `mvn -U clean compile spring-boot:run`, and it can be called like `curl http://localhost:8080/list/SIZE`, being `SIZE` the size of the list of elements to be returned.  ### Observed results  When running this application on Windows 10, if we request 41 elements everything goes alright, because the output size is 1969 bytes (less than 2 KBytes):  ``` $ curl http://localhost:8080/list/41 > out   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100  1969    0  1969    0     0  63516      0 --:--:-- --:--:-- --:--:--  128k ```  ...but if we request 50 elements:  ``` $ curl http://localhost:8080/list/50 > out1   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100  2017    0  2017    0     0     13      0 --:--:--  0:02:28 --:--:--     0 ^C (Interrupted) ```  Apparently, the server hangs when it needs to flush output data that exceeds 2048 bytes.  I've tested this on two different Windows 10 machines with the same result. Also, I've tested that this works OK on both MacOS 10.10 and Linux Ubuntu 16.  Note that, given this seems to involve the Netty output buffers, it might be related to #19662  ---  **Affects:** 5.0 M4  **Reference URL:** https://github.com/danielfernandez/test-boot-netty-windows/tree/spr15108","closed","in: web,","spring-projects-issues","2017-01-07T10:15:57Z","2019-01-11T15:36:30Z"
"","19662","Possible performance issue in the generation of JSON in Spring Web Reactive [SPR-15095]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-15095](https://jira.spring.io/browse/SPR-15095?redirect=false)** and commented  During my tests with the sandbox applications I developed for testing the integration between Thymeleaf and Spring 5 Web Reactive, I found some strange results that might be the symptom of some kind of performance issue in the Spring Web Reactive side, specifically when returning large amounts of JSON.  ### Scenario  A web application can return a large amount of entities stored on a JDBC database, both as JSON or as an HTML ``. These _entities_ are quite simple objects (5 properties: 4 strings and 1 integer).  ### Implementation  The [thymeleafsandbox-biglist-mvc](https://github.com/thymeleaf/thymeleafsandbox-biglist-mvc/tree/spr15095) and [thymeleafsandbox-biglist-reactive](https://github.com/thymeleaf/thymeleafsandbox-biglist-reactive/tree/spr15095) (both containing a tag named `spr15095`) implement this scenario:  * Database is an in-memory SQLite, accessed through JDBC. The executed query returns 8,715 entries, which are repeated 300 times. Total: 2.6 million entries. * `thymeleafsandbox-biglist-mvc` implements this scenario using Spring Boot 1.4.3, Spring 4 MVC and Thymeleaf 3.0. * `thymeleafsandbox-biglist-reactive` implements this scenario using Spring Boot 2.0.0, Spring 5 Reactive and Thymeleaf 3.0.  The MVC application uses Apache Tomcat, the Reactive application uses Netty.  The MVC application returns its data as an `Iterator`, whereas the Reactive application returns a `Flux`.  Thymeleaf is configured in the Reactive application to use a maximum _output chunk size_ (i.e. size of the returned `DataBuffer` objects) of 8 KBytes. No explicit configuration of any kind is performed for the output chunk size of the JSON requests.  None of the applications have the Spring Boot _devtools_ enabled. Or should not have (it is not included as a dependency).  Both applications can be easily started with `mvn -U clean compile spring-boot:run`  ### Observed JSON results  When the JSON data is requested using `curl`, this is the result obtained for **MVC**:  ``` $ curl http://localhost:8080/biglist.json > /dev/null   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100  343M    0  343M    0     0   224M      0 --:--:--  0:00:01 --:--:--  224M ```  So 343 Mbytes of JSON in little more than a second, which looks pretty good. But when sending the same request to the **Reactive** application:  ``` $ curl http://localhost:8080/biglist.json > /dev/null   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100  343M    0  343M    0     0  21.5M      0 --:--:--  0:00:15 --:--:-- 21.3M ```  Same 343 Mbytes of JSON, but the _average download rate_ goes down from 224MB/sec to **less than one tenth** of this, 21.5MB/sec!  Both JSON outputs have been checked to be exactly the same.  ### Observed HTML results  These applications allow us to check the same figures for HTML output using Thymeleaf. This should give us an idea of whether the difference observed at the JSON side is entirely to be blamed on the _reactiveness_ of the Netty setup.  In this case Thymeleaf is used to generate HTML output for the same 2.6 Million database entries, using a complete HTML template with a `` containing the data.  For the MVC application:  ``` $ curl http://localhost:8080/biglist.thymeleaf > /dev/null   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100  460M    0  460M    0     0  33.7M      0 --:--:--  0:00:13 --:--:-- 33.7M ```  Whereas for the Reactive application, using the Thymeleaf _data-driven_ operation mode (Thymeleaf subscribes to the `Flux` itself):  ``` $ curl http://localhost:8080/biglist-datadriven.thymeleaf > /dev/null   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100  460M    0  460M    0     0  24.4M      0 --:--:--  0:00:18 --:--:-- 24.5M ```  So note how this time 460 MBytes of HTML are being returned (exactly the same output in both cases), but the difference between MVC and Reactive is much less in the case of Thymeleaf generating HTML: from 33.7 MBytes/sec to 24.4 Mbytes/sec.  So the difference observed in MVC vs Reactive at the _HTML side_ is much, much smaller than what could be observed at JSON.  ### Conclusions  If I'm not missing anything important, there **might** be some performance issues affecting the production of JSON in Spring Web Reactive.  These issues might be specific to Netty, but Tomcat has also been tested and, though the results improve, they don't improve _a lot_... so there might be something else.  ---  **Affects:** 5.0 M4  **Reference URL:** https://github.com/thymeleaf/thymeleafsandbox-biglist-reactive/tree/spr15095  **Issue Links:** - #19671 Add support for JSON Streaming - #19670 Provide a way to enable streaming mode via annotations (and eventually app config)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6b9b0230c4de394348c42b6f5964fc66eb659dd3","closed","type: enhancement,","spring-projects-issues","2017-01-04T23:44:47Z","2019-01-11T15:27:26Z"
"","19837","@Retryable won't work as expected with exclude [SPR-15272]","**[Daniel Dacar](https://jira.spring.io/secure/ViewProfile.jspa?name=daniphp@gmail.com)** opened **[SPR-15272](https://jira.spring.io/browse/SPR-15272?redirect=false)** and commented  expected: print 3 times ""Execute"" actual: prints single time  My interpretation is that only when both exclude and include are missing it retries all exceptions. But this is not clearly document and a bit unexpected.  ```java public class RetryTestIT extends IntegrationTest {     @Autowired     private MyService service;      @Test     public void test() {         service.execute();     }  }  @Service class MyService {      @Retryable(exclude = RestClientException.class)     public void execute() {         System.out.println(""Execute"");         throw new IllegalArgumentException();     } } ```    ---  **Affects:** 4.3.5","closed","status: invalid,","spring-projects-issues","2017-02-20T14:06:03Z","2019-01-12T05:21:15Z"
"","20114","Support missing properties from Content-Disposition spec [SPR-15555]","**[Damiano Albani](https://jira.spring.io/secure/ViewProfile.jspa?name=dalbani)** opened **[SPR-15555](https://jira.spring.io/browse/SPR-15555?redirect=false)** and commented  The [`ContentDisposition` implementation](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/ContentDisposition.java) currently misses 3 properties which are described in the [RFC2183 specification](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/ContentDisposition.java): 1. `creation-date` 2. `modification-date` 3. `read-date`  As in:  ``` disposition-parm := filename-parm                   / creation-date-parm                   / modification-date-parm                   / read-date-parm                   / size-parm                   / parameter ```  It would nice to have support for those parameters in Spring Web.  ---  **Affects:** 5.0 RC1  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1443  **Issue Links:** - #20220 Consider using ZonedDateTime in HttpHeaders  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/97909f225819b2297c1036a8a9108c0582edcf90","closed","type: enhancement,","spring-projects-issues","2017-05-16T13:38:32Z","2019-01-11T17:07:38Z"
"","19808","RestTemplate POST 302 Found [SPR-15243]","**[Célio Vasconcelos Lima](https://jira.spring.io/secure/ViewProfile.jspa?name=celiovasconcelos)** opened **[SPR-15243](https://jira.spring.io/browse/SPR-15243?redirect=false)** and commented  RestTamplate should throw a HttpStatusCodeException when the server returns 302 Found of a POST method. Since POST request body does not survive redirecting.  Otherwise, the developer needs to hande both ResponseEntity and Exceptions every time.  Or something like YouMightLostInformationException instead of HttpStatusCodeException.   --- No further details from [SPR-15243](https://jira.spring.io/browse/SPR-15243?redirect=false)","closed","status: declined,","spring-projects-issues","2017-02-10T11:42:55Z","2019-01-24T09:41:31Z"
"","20327","CORS combine - override specific host defined in global conf with * in controller/method [SPR-15772]","**[Cyprian Gracz](https://jira.spring.io/secure/ViewProfile.jspa?name=micro-jumbo)** opened **[SPR-15772](https://jira.spring.io/browse/SPR-15772?redirect=false)** and commented  In my Spring Boot I have global CORS config:  ```java @Configuration @EnableWebMvc public class CorsConfig extends WebMvcConfigurerAdapter {  	@Override 	public void addCorsMappings(CorsRegistry registry) { 		CorsRegistration config = registry.addMapping(""/**""); 		config.allowedOrigins(""http://domain.com""); 	} } ```  Then I try to allow any origin to one of controllers:  ```java @RestController @CrossOrigin(""*"") public class OpenController { } ```  Because of this line:  ```java 	private List combine(@Nullable List source, @Nullable List other) { 		if (other == null || other.contains(ALL)) { 			return (source != null ? source : Collections.emptyList()); } ```  in https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java#L373  CorsConfiguration gets ""http://domain.com"" as allowed domain because controller specifies ALL ( * ) as allowed origin, so it's ""ignored"".  Is this desired behaviour? Shouldn't controllers/methods **always** override global config?  ---  **Issue Links:** - [DATAREST-1184](https://jira.spring.io/browse/DATAREST-1184) Adapt to CORS changes in Spring Framework 5.0.3 - #20959 Add Vary: Access-Control-Request-Method/Headers CORS headers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0075f13126a8837716ee47ccdfad2ed7482c8a0f","closed","type: enhancement,","spring-projects-issues","2017-07-14T10:43:09Z","2019-01-11T16:25:24Z"
"","20322","Environment injection should fail with clearer exception after context close [SPR-15767]","**[Crystal Paladin](https://jira.spring.io/secure/ViewProfile.jspa?name=crystalpaladin)** opened **[SPR-15767](https://jira.spring.io/browse/SPR-15767?redirect=false)** and commented  Whenever a Prototype scoped Bean is marked with an `@Autowired` Environment(Spring framework provided bean), and that prototype scoped Bean is instantiated by JSR330 Provider, and the Class which has the Provider implements a Runnable interface and a thread is created from the program execution point main method, we run into an issue where the Environment bean is not injected at all and results in **NoSuchBeanDefinitionException: No bean named 'environment' available**  Spring Creates the Environment Object as well as the Environment Bean Defined in the Java Config Classes... But When Using a thread inside a try with resources block, Spring Destroys the Environment Object that it created but not the One It created from the Java Config Classes when the try with resource block reaches the end...  ```java @Configuration @ComponentScan public class ClassConfig { 	@Bean 	public Environment environment(ApplicationContext context) { 		return context.getEnvironment(); 	} } ```  but if we Autowire the Environment in ClassC (which is the threaded bean), the injection works fine...  but if we try to Autowire the Environment in ClassB (which is at the third level injected at a prototype class ClassA), We get the injection error 'environment' bean not found  i'm not sure if this is a Spring Issue or a JSR 330 issue since the Provider\ is used for the prototype class...  Note: Please Refer the Attached Sample Java Source files for complete analysis   ---  **Affects:** 4.3.9  **Reference URL:** https://stackoverflow.com/questions/45076679/threaded-beans-doesnt-get-environment-autowired-to-them-in-spring-when-using-j  **Attachments:** - [ClassA.java](https://jira.spring.io/secure/attachment/25043/ClassA.java) (_622 bytes_) - [ClassB.java](https://jira.spring.io/secure/attachment/25042/ClassB.java) (_570 bytes_) - [ClassC.java](https://jira.spring.io/secure/attachment/25041/ClassC.java) (_841 bytes_) - [ClassConfig.java](https://jira.spring.io/secure/attachment/25044/ClassConfig.java) (_207 bytes_) - [DummyParent.java](https://jira.spring.io/secure/attachment/25039/DummyParent.java) (_186 bytes_) - [InterA.java](https://jira.spring.io/secure/attachment/25038/InterA.java) (_73 bytes_) - [InterB.java](https://jira.spring.io/secure/attachment/25037/InterB.java) (_75 bytes_) - [SpringIssueReplicator.java](https://jira.spring.io/secure/attachment/25036/SpringIssueReplicator.java) (_489 bytes_)","open","type: enhancement,","spring-projects-issues","2017-07-13T11:25:26Z","2017-08-02T13:39:38Z"
"","19864","server sent events flush [SPR-15299]","**[Cristi Vulpe](https://jira.spring.io/secure/ViewProfile.jspa?name=cristian.vulpe)** opened **[SPR-15299](https://jira.spring.io/browse/SPR-15299?redirect=false)** and commented  I have a spring boot web application (it depends on Spring Boot 1.5.1 which creates a dependency on Spring Framework 4.3.6, all running on Oracle Java 1.8). Also note that the application runs as a Java application with Tomcat being embedded (as far as it looks it uses Tomcat 8.5.11)  The problem that I have is that the SseEmitter send method doesn't sent the message to the client immediately after calling the send method. In other words there is no way to ""flush"" the messages. Others reported similar behavior on stackoverflow (please see the reference URL).  For now, one trick that I use is to add a 1MB comment to the event which seems to ""push the message down the pipe"" and using this I am able to get the messages on the client side (please see the attached sample).  Do you think that it would be possible to add a flush method to the emitter? Or is it any other way to enforce this?   ---  **Affects:** 4.3.6  **Reference URL:** http://stackoverflow.com/questions/34168903/spring-sseemitter-events-arent-sent-right-after-method-send-was-called  **Attachments:** - [SSEFlush.java](https://jira.spring.io/secure/attachment/23791/SSEFlush.java) (_2.05 kB_)","closed","status: invalid,","spring-projects-issues","2017-02-28T20:12:59Z","2019-01-12T05:21:10Z"
"","19940","TransactionAwareDataSourceProxy.unwrap returns the proxy itself [SPR-15376]","**[Constantino Cronemberger](https://jira.spring.io/secure/ViewProfile.jspa?name=ccronemberger)** opened **[SPR-15376](https://jira.spring.io/browse/SPR-15376?redirect=false)** and commented  This is the code:  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { ... else if (method.getName().equals(""unwrap"")) { if (((Class) args[0]).isInstance(proxy)) { return proxy; } }  It should return the wrapped object and not the proxy itself.   ---  **Affects:** 5.0 M5","closed","status: declined,","spring-projects-issues","2017-03-23T12:36:15Z","2019-01-12T16:33:25Z"
"","19867","DateTimeFormat does not recognise ISO8601 formatted strings [SPR-15302]","**[Colin Breame](https://jira.spring.io/secure/ViewProfile.jspa?name=colinbreame)** opened **[SPR-15302](https://jira.spring.io/browse/SPR-15302?redirect=false)** and commented  There is a Date parameter that has `@DateTimeFormat(iso= DateTimeFormat.ISO.DATE_TIME)` as per below:  ``` @GetMapping(""/test/{time}"")     public String test(@DateTimeFormat(iso= DateTimeFormat.ISO.DATE_TIME) Date time) {         return time.toString();     } ```  **Expected Behaviour** It should recognise all ISO8601 formatted date strings.  **Actual Behaviour:** It does not recognise any of the following strings, all of which are valid ISO 8601 strings.  Infact I cannot find a single string that is correctly parsed.  **2017-03-01T14:40:02Z** Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@org.springframework.web.bind.annotation.PathVariable @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '2017-03-01T14:40:02Z'; nested exception is java.lang.IllegalArgumentException: Invalid format: \""2017-03-01T14:40:02Z\"" is malformed at \""Z\""  **2017-03-01T14:40:02.000Z** Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@org.springframework.web.bind.annotation.PathVariable @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '2017-03-01T14:40:02'; nested exception is java.lang.IllegalArgumentException: Invalid format: \""2017-03-01T14:40:02\"" is too short""  **2017-03-01T14:40:02+0000** Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@org.springframework.web.bind.annotation.PathVariable @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '2017-03-01T14:40:02+0000'; nested exception is java.lang.IllegalArgumentException: Invalid format: \""2017-03-01T14:40:02+0000\"" is malformed at \""+0000\""  **2017-03-01T14:40:02.000+0000** Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@org.springframework.web.bind.annotation.PathVariable @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '2017-03-01T14:40:02'; nested exception is java.lang.IllegalArgumentException: Invalid format: \""2017-03-01T14:40:02\"" is too short   ---  **Affects:** 4.3.6  2 votes, 5 watchers","closed","status: invalid,","spring-projects-issues","2017-03-01T15:33:16Z","2019-01-12T05:21:09Z"
"","20204","@ExceptionHandler should preserve @ResponseStatus [SPR-15645]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-15645](https://jira.spring.io/browse/SPR-15645?redirect=false)** and commented  I can annotate an exception type with `@ResponseStatus` to indicate ""in-band"" what sort of error should be returned to the client, and this works seamlessly with `ResponseEntity`-type responses. However, when I want to display an HTML error page, I use an `@ExceptionHandler` method that handles that particular exception type. Unfortunately, `@ExceptionHandler` methods can **themselves** take `@ResponseStatus` annotations, and if they don't, the default behavior (generally a 200) is applied, so that duplicating the status values is necessary.  In the case where an `@ExceptionHandler`'s argument is annotated with an `@ResponseStatus` **and** the handler itself has no status type, I suggest that the response status code should be set from the exception's value instead of using the default strategy.   ---  **Affects:** 4.3.9","open","in: web,","spring-projects-issues","2017-06-09T07:41:14Z","2019-01-11T16:09:00Z"
"","19943","Spring classes and application proxies not collected after closing context [SPR-15380]","**[Christophe Bismuth](https://jira.spring.io/secure/ViewProfile.jspa?name=cbismuth)** opened **[SPR-15380](https://jira.spring.io/browse/SPR-15380?redirect=false)** and commented  Hi,  I have a memory leak issue, I may have misused Spring Java configuration capabilities.  * I start a Tomcat application server 8.5 instance with default management application and my Spring 4 application (the only Spring application in Tomcat) * I stop only my application from the Tomcat manager UI * I click on the ""Find leaks"" button from the Tomcat Manager UI to trigger a full Java GC * Tomcat says my application causes memory leaks * I open JProfiler and take a full Java Heap snapshot  As shown in attachments:  * Some Spring classes aren't collected * My Spring components are all collected * My Spring configuration CGLIB proxies are not collected * It seems to exist to cyclic dependency between these proxies  Should everything related to Spring be collected after application being stopped?   ---  **Affects:** 4.2.9, 4.3.7  **Attachments:** - [Heap_Walker_Classes_Application.csv](https://jira.spring.io/secure/attachment/23820/Heap_Walker_Classes_Application.csv) (_1.26 kB_) - [Heap_Walker_Classes_Spring.csv](https://jira.spring.io/secure/attachment/23819/Heap_Walker_Classes_Spring.csv) (_7.93 kB_) - [javaconfig.png](https://jira.spring.io/secure/attachment/23824/javaconfig.png) (_198.87 kB_) - [screencapture-file-home-cbismuth-Desktop-Heap_Walker_Classes_2-html-1490518670213.png](https://jira.spring.io/secure/attachment/23822/screencapture-file-home-cbismuth-Desktop-Heap_Walker_Classes_2-html-1490518670213.png) (_177.86 kB_) - [screencapture-file-home-cbismuth-Desktop-Heap_Walker_Classes-html-1490518604963.png](https://jira.spring.io/secure/attachment/23821/screencapture-file-home-cbismuth-Desktop-Heap_Walker_Classes-html-1490518604963.png) (_859.39 kB_) - [screencapture-file-home-cbismuth-Desktop-Heap_walker_Incoming_References-html-1490518709454.png](https://jira.spring.io/secure/attachment/23823/screencapture-file-home-cbismuth-Desktop-Heap_walker_Incoming_References-html-1490518709454.png) (_162.86 kB_)","open","in: core,","spring-projects-issues","2017-03-25T19:50:04Z","2019-01-11T14:41:56Z"
"","20100","Leveraging kotlin-reflect to determine interface method parameters [SPR-15541]","**[Christoph Leiter](https://jira.spring.io/secure/ViewProfile.jspa?name=cleiter)** opened **[SPR-15541](https://jira.spring.io/browse/SPR-15541?redirect=false)** and commented  Following up from https://jira.spring.io/browse/DATAJPA-1118 :  In web-mvc I can declare a method where the parameter name is automatically picked up:  ```kotlin @GetMapping fun foo(@RequestParam bar: String): Any { ... } ```  When I try to create a custom method with arguments in a spring-data-jpa repository interface it doesn't work with the following message:  > IllegalArgumentException: Name for parameter binding must not be null or empty! For named parameters you need to use `@Param` for query method parameters on Java versions < 8.  It would be convenient If this also worked without having to specify `@Param(""name"")`.  I'm using Kotlin 1.1 on JDK8 with no special compilation options.    ---  **Issue Links:** - [DATAJPA-1118](https://jira.spring.io/browse/DATAJPA-1118) Automatically determine Kotlin parameter names in repository methods (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ae35f606c6779ab42f02967ee26c92d9f87620d","closed","type: enhancement,","spring-projects-issues","2017-05-14T11:06:00Z","2017-09-11T12:09:50Z"
"","20161","Optimize DefaultUserDestinationResolver.resolveDestination() [SPR-15602]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-15602](https://jira.spring.io/browse/SPR-15602?redirect=false)** and commented  Hey,  I noticed in some of my stresstests that `DefaultUserDestinationResolver.resolveDestination()` was popping up quite often as a hot method and found some possible improvements.  The attached PR restructures the code of `DefaultUserDestinationResolver.resolveDestination()` or more correctly `DefaultUserDestinationResolver.parse()` in the following ways: * Allow `parse()` to be inlined by extracting the logic of parsing subscription messages and normal messages to dedicated private methods.   * (Previous) `DefaultUserDestinationResolver::parse (458 bytes)   hot method too big`   * (After) `DefaultUserDestinationResolver::parse (95 bytes)   inline (hot)` * Make the `sourceDestination` of a message part of the `ParseResult` in order to avoid getting it twice in the chain * Move the call to fetch the `Principal` of a `Message` only to the parts where it is needed * ...  Please find the results of the JMH benchmarks attached. In a nutshell, we can see no regression (on the contrary) for messages of type `SUBSCRIBE/UNSUBSCRIBE/MESSAGE` and almost doubled performance for `HEARTBEAT` messages.  Let me know what you think.  Cheers, Christoph   ---  **Affects:** 4.3.8  **Attachments:** - [benchmark_results.txt](https://jira.spring.io/secure/attachment/25003/benchmark_results.txt) (_5.58 kB_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1439, and commits https://github.com/spring-projects/spring-framework/commit/d3e336599026398bd53977bb3f14188cabbc4b48, https://github.com/spring-projects/spring-framework/commit/0ef1623643fef11e0d28c242fe2598c840daf8bc, https://github.com/spring-projects/spring-framework/commit/6aeb8ef56d3da60293d80076b3c8afeae4493477","closed","type: enhancement,","spring-projects-issues","2017-05-31T14:54:24Z","2017-06-07T20:04:28Z"
"","20037","Optimize AntPathMatcher when checking for potential matches [SPR-15477]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-15477](https://jira.spring.io/browse/SPR-15477?redirect=false)** and commented  Hey,  just noticed a possible improvement when checking for potential matches in AntPathMatcher. The problem here is that `toCharArray()` is called in `isPotentialMatch()` and `skipSegment()` which clones the array under the hood and causes allocations that we could avoid.  The attached patch shows a possible solution with simply using `charAt()` that leads to the following benchmark results. Would be happy if this is accepted.  #### New  ``` Benchmark                                      Mode  Cnt         Score         Error   Units Benchmark.testNew                      thrpt   20  43196627,181 ± 1235654,920   ops/s Benchmark.testNew:·gc.alloc.rate       thrpt   20         0,001 ±       0,002  MB/sec Benchmark.testNew:·gc.alloc.rate.norm  thrpt   20        ? 10??                  B/op Benchmark.testNew:·gc.count            thrpt   20           ? 0                counts ```  #### Old  ``` Benchmark                                                   Mode  Cnt         Score        Error   Units Benchmark.testOld                                   thrpt   20  29555122,576 ± 507145,389   ops/s Benchmark.testOld:·gc.alloc.rate                    thrpt   20      1052,083 ±     18,027  MB/sec Benchmark.testOld:·gc.alloc.rate.norm               thrpt   20        56,000 ±      0,001    B/op Benchmark.testOld:·gc.churn.PS_Eden_Space           thrpt   20      1050,787 ±     28,954  MB/sec Benchmark.testOld:·gc.churn.PS_Eden_Space.norm      thrpt   20        55,927 ±      1,048    B/op Benchmark.testOld:·gc.churn.PS_Survivor_Space       thrpt   20         0,190 ±      0,046  MB/sec Benchmark.testOld:·gc.churn.PS_Survivor_Space.norm  thrpt   20         0,010 ±      0,002    B/op Benchmark.testOld:·gc.count                         thrpt   20       354,000               counts Benchmark.testOld:·gc.time                          thrpt   20       182,000                   ms ```  Cheers, Christoph   ---  **Affects:** 4.3.8  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1399, and commits https://github.com/spring-projects/spring-framework/commit/baa7b1c6c84f64465cecdf6ad2e2bf90371cbd7b, https://github.com/spring-projects/spring-framework/commit/13b39521d80ca5b736c36572de2159144b2f7b26, https://github.com/spring-projects/spring-framework/commit/cd95f346662148b6bb9d2c9a2b11eee334b3d441, https://github.com/spring-projects/spring-framework/commit/84d2e5a3c8a2b559c339996cbc191dddea681748","closed","type: enhancement,","spring-projects-issues","2017-04-24T16:53:13Z","2017-05-08T08:41:47Z"
"","19991","Improve performance of StringUtils.replace() if pattern is not found [SPR-15430]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-15430](https://jira.spring.io/browse/SPR-15430?redirect=false)** and commented  Hey,  just noticed a small improvement for `StringUtils.replace()` in case the pattern that should be replaced is not found in the given String. I noticed this in our loadtests where lots of messages are send to user destinations, which are sanitized like this: `StringUtils.replace(user, ""/"", ""%2F"")`  Most of the time, users don't contain a slash, so there is no replacement needed. Please find the PR attached, that yields the following microbenchmark results:  ``` MyBenchmark.testNew                                   thrpt   20  56148767,184 ± 571831,993   ops/s MyBenchmark.testNew:·gc.alloc.rate                    thrpt   20         0,002 ±      0,003  MB/sec MyBenchmark.testNew:·gc.alloc.rate.norm               thrpt   20        ? 10??                 B/op MyBenchmark.testNew:·gc.count                         thrpt   20           ? 0               counts MyBenchmark.testOld                                   thrpt   20  15643379,634 ± 404629,728   ops/s MyBenchmark.testOld:·gc.alloc.rate                    thrpt   20      3698,512 ±     95,454  MB/sec MyBenchmark.testOld:·gc.alloc.rate.norm               thrpt   20       248,000 ±      0,001    B/op MyBenchmark.testOld:·gc.count                         thrpt   20       312,000               counts MyBenchmark.testOld:·gc.time                          thrpt   20       183,000                   ms ```    ---  **Affects:** 4.3.7  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1384","closed","type: enhancement,","spring-projects-issues","2017-04-10T20:08:11Z","2017-04-18T15:43:21Z"
"","19958","Deprecate ObjectUtils.hashCode for primitives in favor of JDK 8's hashCode methods [SPR-15395]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-15395](https://jira.spring.io/browse/SPR-15395?redirect=false)** and commented  Hey,  just noticed that the hashCode() variants for primitive types in ObjectUtils could be using the JDK 8 calls now that we're on it.  Please find the corresponding PR attached.  Cheers, Christoph   ---  **Affects:** 5.0 M5  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1368, and commits https://github.com/spring-projects/spring-framework/commit/e9627a10c7fdbc263601fdd9f0f783b41389ff5d","closed","in: core,","spring-projects-issues","2017-03-28T17:10:59Z","2017-05-08T08:41:45Z"
"","19802","Use Class.getTypeName() where appropriate  [SPR-15237]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-15237](https://jira.spring.io/browse/SPR-15237?redirect=false)** and commented  Hey,  I just noticed that we could use Class.getTypeName() in ClassUtils.getQualifiedName() and  FormatHelper.formatClassNameForMessage() now that we're on JDK 8.  Find my proposal attached. Happy to read your feedback.  Cheers, Christoph   ---  **Affects:** 5.0 M4  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1320, and commits https://github.com/spring-projects/spring-framework/commit/ab50f7b0d583565f9428a1d917524c6bbe1e4237, https://github.com/spring-projects/spring-framework/commit/81aca78579df061e08aa0e6a6488b3e4d3ebb3dc, https://github.com/spring-projects/spring-framework/commit/5cfa7e71bb878cde25b03b79cd5b9c58f12a12df, https://github.com/spring-projects/spring-framework/commit/5f90a7eee9df803bb866c74b47682f076b3e4561","closed","type: enhancement,","spring-projects-issues","2017-02-08T19:35:16Z","2017-02-23T09:29:10Z"
"","19661","Improve performance of StringUtils.capitalize() [SPR-15094]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-15094](https://jira.spring.io/browse/SPR-15094?redirect=false)** and commented  Hey,  just noticed a small possible improvement for (un-)capitalizing Strings. Using substring is rather expensive and we could avoid that. Please find my proposal attached.  |Benchmark|Mode|Cnt|Score|Error|Units| |:---| |MyBenchmark.testNew|thrpt|20|24027358,674|± 519677,096|ops/s| |MyBenchmark.testOld|thrpt|20|16391178,671|± 378698,464|ops/s|  If no work has to be done I saw possible improvements of factor 20.  Cheers, Christoph   ---  **Affects:** 4.3.5  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1285, and commits https://github.com/spring-projects/spring-framework/commit/31f7860a40493f56ba71af2043d3e39a257fd830, https://github.com/spring-projects/spring-framework/commit/83929b2b98e7a1f3d4ed5d6e3f5bcd499989110b, https://github.com/spring-projects/spring-framework/commit/5982f732b42a2650bef51d5ff828af57de84e056","closed","type: enhancement,","spring-projects-issues","2017-01-04T18:12:05Z","2017-01-25T14:18:14Z"
"","19773","Mock MVC / RequestBuilder should handle Accept-Language header appropriately [SPR-15209]","**[Chris DaMour](https://jira.spring.io/secure/ViewProfile.jspa?name=drdamour)** opened **[SPR-15209](https://jira.spring.io/browse/SPR-15209?redirect=false)** and commented  we index all our data by locale, and we have an edge service normalize the accept-language request header for the given request.  I was trying to test this with mock mvc using the default boot locale resolver that just uses accept-language request header, but it did not work as expected.  This appears to be because MockHttpServletRequestBuilder and MockHttpServletRequest do not interpret the Accept-Language header at any point when implementing getLocale().  Since getLocale() is kind of fundamental to java servlet & AcceptHeaderLocaleResolver depends on this fundamentalness since it doesn't actually check the Accept-Language header directly, i think the mockers should be a little more knowledgeable about such a header.  however, I'm not sure if these are intentionally dumb. at some point the special handling of the Content-Type request header was removed from MockHttpServletRequest and that is a very similar case.  I'm not super comfortable with relying on locale() in my mock builder as it's not really verifying the incoming accept-language header is what's being respected.  If there's some direction i should follow i'd submit a PR  ---  **Affects:** 4.3.6  **Issue Links:** - #18884 AcceptHeaderLocaleResolver should allow to define a default Locale - #20858 MockHttpServletResponse.setLocale(Locale) should set HttpHeaders.CONTENT_LANGUAGE header - #21817 MockHttpServletResponse doesn't propagate Content-Language response header - #22098 MockHttpServletRequest changes Accept-Language header values - #19790 Update Cookie headers in MockHttpServletRequest and Response","closed","type: enhancement,","spring-projects-issues","2017-01-31T05:22:57Z","2019-01-11T14:35:54Z"
"","20306","When Spring boot is used along with the DEVTOOLS dependency, CASTOR xml marshalling fails [SPR-15750]","**[Chandra Angirekula](https://jira.spring.io/secure/ViewProfile.jspa?name=mailacs)** opened **[SPR-15750](https://jira.spring.io/browse/SPR-15750?redirect=false)** and commented  I am trying to marshall/unmarshall the pojo-xml using the Castor in spring boot application. After doing debugging what I noticed is, when ""spring-boot-devtools"" is used in dependency, the castor marshaling fails with the following error. If the devtools is removed, pojo-xml marshall/unmarshaling is working as expected.  ---  Caused by: java.lang.IllegalArgumentException: object is not an instance of declaring class  ---  POM entries:                    	org.springframework.boot     	spring-boot-starter-parent     	1.5.2.RELEASE     	                          		org.springframework.boot     		spring-boot-devtools     		true     	          	     		org.springframework.boot     		spring-boot-starter     	     	     	     	     		org.springframework     		spring-oxm     		4.1.5.RELEASE     	     	     	     	     		org.codehaus.castor     		castor     		1.2     	          	     	     		xerces     		xercesImpl     		2.8.1     	     	     	     		org.springframework.boot     		spring-boot-starter-test     		test     	       ---  No further details from [SPR-15750](https://jira.spring.io/browse/SPR-15750?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-07-09T16:49:52Z","2019-01-13T15:40:16Z"
"","20272","add a Profile setting to @PropertySource [SPR-15716]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-15716](https://jira.spring.io/browse/SPR-15716?redirect=false)** and commented  So I wrote this (in a nested class)  ```java 	@Configuration 	@Profile( ""!"" + Profiles.TEST ) 	@PropertySource( value = ""classpath:dex-default.conf"", ignoreResourceNotFound = true ) 	@PropertySource( value = ""classpath:dex.conf"", ignoreResourceNotFound = true ) 	@PropertySource( value = ""file:/var/dex/dex-default.conf"", ignoreResourceNotFound = true ) 	@PropertySource( value = ""file:/var/dex/dex.conf"", ignoreResourceNotFound = true ) 	public static class PropertySourceConfig 	{ 	}  	@Configuration 	@Profile( Profiles.TEST ) 	@PropertySource( ""classpath:dex-default.conf"" ) 	@PropertySource( ""classpath:dex.conf"" ) 	@PropertySource( ""classpath:testOverride.properties"") 	@PropertySource( ""file:../configuration/build/default/build.properties"" ) 	@PropertySource( ""classpath:build.properties"" ) 	public static class TestPropertySourceConfig 	{ 	} ```  but it seems like I could have left it on the outer class, and written them as such.  ```java @Configuration @PropertySource( value = ""classpath:dex-default.conf"", ignoreResourceNotFound = true ) @PropertySource( value = ""classpath:dex.conf"", ignoreResourceNotFound = true ) @PropertySource( value = ""file:/var/dex/dex-default.conf"", ignoreResourceNotFound = true, profile = ""!test"" ) @PropertySource( value = ""file:/var/dex/dex.conf"", ignoreResourceNotFound = true, profile = ""!test"" ) @PropertySource( value =  ""classpath:testOverride.properties"", profile = ""test"") @PropertySource( value = ""file:../configuration/build/default/build.properties"", profile = ""test"" ) @PropertySource( value = ""classpath:build.properties"", profile = ""test"" ) ```  this is just an idea, maybe it's not a good one   --- No further details from [SPR-15716](https://jira.spring.io/browse/SPR-15716?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-06-28T19:53:32Z","2017-06-29T06:55:31Z"
"","18761","ordering components does not work when autowiring as a Collection [SPR-15699]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-15699](https://jira.spring.io/browse/SPR-15699?redirect=false)** and commented  > Beans can now be ordered when they are autowired into lists and arrays. Both the `@Order` annotation and Ordered interface are supported.  note: Spring Boot is not required, the application I discovered this on doesn't use boot.  ```java @SpringBootApplication public class DemoApplication {  	public static void main(String[] args) { 		SpringApplication.run(DemoApplication.class, args); 	}   	interface ITest { 	}  	static final int A = 3; 	static final int B = 1; 	static final int C = 2;   	@Component 	@Order( A ) 	static class A implements ITest { 	}  	@Component 	@Order( B ) 	static class B implements ITest {  	}  	@Component 	@Order( C ) 	static class C implements ITest {  	}  } ```  test  ```java @RunWith(SpringRunner.class) @SpringBootTest public class DemoApplicationTests {  	@Autowired 	Collection tests; 	@Test 	public void contextLoads() {  		assertThat( tests, contains( instanceOf( B.class), instanceOf( C.class ), instanceOf( A.class ) )); 	}  } ```  you will note that the order actually injected is A, B, C it appears to be doing an alphabetic sort  It appears if I change the `@Autowired Collection` to a `List` that it does work, I guess I expect the collection to also be sorted.   ---  **Affects:** 4.3.9","closed","","spring-projects-issues","2017-06-23T20:07:08Z","2019-01-11T16:02:27Z"
"","20029","Lazily initialize Environment in GenericFilterBean (aligned with HttpServletBean) [SPR-15469]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-15469](https://jira.spring.io/browse/SPR-15469?redirect=false)** and commented  We noticed there were a lot of these logs  ``` [DEBUG] [10:07:54] [localhost-startStop-1] env.MutablePropertySources:109 - Adding [servletConfigInitParams] PropertySource with lowest search precedence [DEBUG] [10:07:54] [localhost-startStop-1] env.MutablePropertySources:109 - Adding [servletContextInitParams] PropertySource with lowest search precedence [DEBUG] [10:07:54] [localhost-startStop-1] env.MutablePropertySources:109 - Adding [jndiProperties] PropertySource with lowest search precedence [DEBUG] [10:07:54] [localhost-startStop-1] env.MutablePropertySources:109 - Adding [systemProperties] PropertySource with lowest search precedence [DEBUG] [10:07:54] [localhost-startStop-1] env.MutablePropertySources:109 - Adding [systemEnvironment] PropertySource with lowest search precedence [DEBUG] [10:15:23] [localhost-startStop-1] env.AbstractEnvironment:124 - Initialized StandardServletEnvironment with PropertySources [servletConfigInitParams,servletContextInitParams,jndiProperties,systemProperties,systemEnvironment] [DEBUG] [10:15:23] [localhost-startStop-1] env.MutablePropertySources:109 - Adding [servletConfigInitParams] PropertySource with lowest search precedence [DEBUG] [10:15:23] [localhost-startStop-1] env.MutablePropertySources:109 - Adding [servletContextInitParams] PropertySource with lowest search precedence [DEBUG] [10:15:23] [localhost-startStop-1] env.MutablePropertySources:109 - Adding [jndiProperties] PropertySource with lowest search precedence [DEBUG] [10:15:23] [localhost-startStop-1] env.MutablePropertySources:109 - Adding [systemProperties] PropertySource with lowest search precedence [DEBUG] [10:15:23] [localhost-startStop-1] env.MutablePropertySources:109 - Adding [systemEnvironment] PropertySource with lowest search precedence [DEBUG] [10:16:10] [localhost-startStop-1] env.AbstractEnvironment:124 - Initialized StandardServletEnvironment with PropertySources [servletConfigInitParams,servletContextInitParams,jndiProperties,systemProperties,systemEnvironment] [DEBUG] [10:16:10] [localhost-startStop-1] env.MutablePropertySources:109 - Adding [servletConfigInitParams] PropertySource with lowest search precedence [DEBUG] [10:16:10] [localhost-startStop-1] env.MutablePropertySources:109 - Adding [servletContextInitParams] PropertySource with lowest search precedence [DEBUG] [10:16:10] [localhost-startStop-1] env.MutablePropertySources:109 - Adding [jndiProperties] PropertySource with lowest search precedence [DEBUG] [10:16:10] [localhost-startStop-1] env.MutablePropertySources:109 - Adding [systemProperties] PropertySource with lowest search precedence [DEBUG] [10:16:10] [localhost-startStop-1] env.MutablePropertySources:109 - Adding [systemEnvironment] PropertySource with lowest search precedence ... truncated for brevity ```  Stephane Nichol told me in a gitter conversation that this shouldn't happen.  I've finally had time to dig into this, to see why it's happening in our system. Turns out it's because of line 94 in `GenericFilterBean` every time we create a new filter we create a new `StandardServletEnvironment`.  So this leave's me with 2 questions on improvements. 1. is there a way to provide what the environment is created for in the log? 2. maybe lazily instantiate the environment in `GenericFilterBean` (normally I'd be against this, but not sure if most of the time, whether the global environment is auto passed or not)  not sure fixing this is a major win for me, but it was confusing, and required using the debugger to navigate the stack to figure out why this was happening.   ---  **Affects:** 4.3.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dab56dbb05ee437f038b17542bd453e1056b7fdb, https://github.com/spring-projects/spring-framework/commit/1ea54eb2c6dd058501a1806becd7f5acf57197af","closed","type: enhancement,","spring-projects-issues","2017-04-20T15:43:46Z","2017-05-08T08:41:48Z"
"","19901","Accept empty Collection injection for single constructor scenarios [SPR-15338]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-15338](https://jira.spring.io/browse/SPR-15338?redirect=false)** and commented  So I was going to do this  ``` 	private Collection jChannels;  	public HealthCheckService( Collection jChannels ) 	{ 	     this.jChannels = jChannels;	 	} ```  with the production profile this should have a bean, but in development it does not have any. I was expecting Spring to hand me an empty collection, but instead it handed me an exception.  ``` 	private Collection jChannels = Collections.emptySet();  	public HealthCheckService( 		final ServletContext context, 		final OrganizationDao organizationDao ) 	{ 		this.context = Objects.requireNonNull( context ); 		this.organizationDao = Objects.requireNonNull( organizationDao ); 	}          @Autowired( required = false ) 	void setjChannels( final Collection jChannels ) { 		this.jChannels = jChannels; 	} ```  I'm processing it as such, or maybe a stream later, we'll see.  ``` private Optional jgroupsAreOnline() {      for ( JChannel jChannel : jChannels )      {           String state = jChannel.getState();      }      return Optional.empty(); } ```  Maybe this behavior could change in Spring 5, I could see if you annotated the collection with `@Required` to still require a bean, but to me in general, a collection should not be null, and generally should not be required to have elements. Your opinion may differ.  ---  **Affects:** 4.3.7  **Issue Links:** - #16046 ObjectProvider iterable/stream access for ""beans of type"" resolution in `@Bean` methods - #19833 Honor `@Autowired`(required=false) at parameter level, as an alternative to java.util.Optional - #21731 Autowiring inconsistency: `@Qualifier` works with HashMap but not with Map  **Referenced from:** commits https://github.com/spring-projects/spring-boot/commit/c98bb40136ab392c8c6d0ee08c8bba9462d3a49e","closed","type: enhancement,","spring-projects-issues","2017-03-09T20:06:55Z","2019-01-13T05:16:56Z"
"","19753","Property Source Preprocessor [SPR-15187]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-15187](https://jira.spring.io/browse/SPR-15187?redirect=false)** and commented  Maybe this is already possible somehow... due to security issues like https://github.com/flyway/flyway/issues/1500  it might be nice to be able to define a property preprocessor, where the property goes through a `String bifunction (String key, String value)` before further processing. Of course alternative APIs with specific types may be better.This would allow one to quote the value before it was handed to is destination (basically before you can get it from `Environment`)   --- No further details from [SPR-15187](https://jira.spring.io/browse/SPR-15187?redirect=false)","open","in: core,","spring-projects-issues","2017-01-25T14:39:38Z","2021-11-11T10:11:19Z"
"","19610","Validator Configuration Mismatch between JavaConfig and XML [SPR-15044]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-15044](https://jira.spring.io/browse/SPR-15044?redirect=false)** and commented  jprefix: I'm not sure how important you'll rank this, and it may not be a bug at all, I've already found workarounds.  While upgrading to Platform Athens-SR1 we are removing more of our XML Configuration. We had the following defined in our XML  ```  ```  with this we were able to do this (note: this is `javax.validation.Validator`, not the spring one  ``` @Resource protected Validator validator; ```  when I rewrote this code in javaconfig, the above injection (which I changed to use Autowired (maybe that has an effect in this case? but I wouldn't think so) ceased to work. I've also encountered issues with it finding messages, since it wasn't setting the `ApplicationContext`  My first attempt was  ``` @Bean(""validator"") LocalValidatorFactoryBean validatorFactory() { 		return new LocalValidatorFactoryBean();  	} ```  which would seem to be the exact same thing as the XML.  In order to get our service a `Validator` (javax) I changed our code to this.  ``` @Autowired private ValidatorFactory validator; ```  and then simply called `validator.getValidator().validate(...)`  In order to get the correct messages I've had to change the Bean definition to this (I don't think Optional is required but seems like the better usage).  ``` @Bean LocalValidatorFactoryBean validatorFactory( final ApplicationContext context ) {      LocalValidatorFactoryBean factoryBean = new OptionalValidatorFactoryBean();      factoryBean.setApplicationContext( context );      return factoryBean; } ```  A final point of confusion, it seems that even when you define a `Validator` (spring interface), Spring MVC is generating it's own and thus you then end up having to qualify if you inject `Validator`, like if you're trying to use the same `Validator` for `WebMvcConfigurerAdapter`, e.g. (using java 8 parameter name qualification, but if I rename the parameter to validator, I'd get a no unique bean exception)  ``` public class MvcConfig extends WebMvcConfigurerAdapter { 	private final Validator validatorFactory;  	public MvcConfig( final Validator validatorFactory ) 	{ 		this.validatorFactory = validatorFactory; 	} ```  If it's possible to fix these, I would think you could do so by annotating `LocalValidatorFactoryBean.setApplicationContext` as `@Autowired`, and using the `@ConditionalIf` on bean missing, or whatever, for the `mvcValidator` bean. I'm not sure how I'd resolve the missing bean `javax.validator.Validator` issue.  Further issues with messaging appear to be caused by `BeanValidator` (a vaadin class) which does `factory = Validation.buildDefaultValidatorFactory();` but this doesn't work on the remote, but does work locally. This currently appears like it may be caused by `ValidationMessages_en.properties` taking precedence over our `ValidationMessages.properties`, maybe it's only reading the one in the hibernate-validator.jar and not the other, but our version of hibernate-validator.jar didn't change from 2.0.8, to SR1 so it's not making much sense.   ---  **Affects:** 4.3.4","closed","status: bulk-closed,","spring-projects-issues","2016-12-22T19:13:37Z","2019-01-12T00:11:41Z"
"","19984","ForwardedHeaderRequestWrapper should return a new StringBuffer instance on each invocation of the getRequestURL method [SPR-15423]","**[Bryan Kelly](https://jira.spring.io/secure/ViewProfile.jspa?name=bryank)** opened **[SPR-15423](https://jira.spring.io/browse/SPR-15423?redirect=false)** and commented  `ForwardedHeaderFilter` returns the same `StringBuffer` for every invocation. This means that if the resulting `StringBuffer` is modified it changes the state of the `HttpServletRequest`.  Instead a new `StringBuffer` should be returned for every invocation.   ---  **Affects:** 4.3.7, 5.0 M5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9a9166622eb08e5445ae64daea7ada56fd735d41, https://github.com/spring-projects/spring-framework/commit/d0d7a88233de2cd05b47fc2cf93bc8331af55cff","closed","type: bug,","spring-projects-issues","2017-04-07T18:56:42Z","2017-04-18T15:43:20Z"
"","19983","ForwardedHeaderFilter.ForwardedHeaderRequestWrapper does not preserve encoding of requestURI [SPR-15422]","**[Bryan Kelly](https://jira.spring.io/secure/ViewProfile.jspa?name=bryank)** opened **[SPR-15422](https://jira.spring.io/browse/SPR-15422?redirect=false)** and commented  After adding the ForwardedHeaderFilter to our application we noticed that requests that are wrapped by the ForwardedHeaderRequestWrapper will no longer preserve encoding of the request.getRequestUri() and request.getRequestURL().  This is problematic when injecting a UriComponentsBuilder instance into a controller method because it will throw an _Illegal character in path at index_ if the path contains characters that are expected to be encoded.  ---  **Affects:** 4.3.7, 5.0 M5  **Issue Links:** - #19989 ForwardedHeaderFilter.ForwardedHeaderRequestWrapper does not preserve ;","closed","type: bug,","spring-projects-issues","2017-04-07T18:54:27Z","2019-01-11T16:43:18Z"
"","20032","Support RequestMappingHandlerMapping registrations in the StandaloneMockMvcBuilder setup [SPR-15472]","**[Brian Johnson](https://jira.spring.io/secure/ViewProfile.jspa?name=john3300)** opened **[SPR-15472](https://jira.spring.io/browse/SPR-15472?redirect=false)** and commented  I have a custom `RequestMappingHandlerMapping` class that interprets a special annotation as part of its controller method mapping criteria.  This annotation is the only differentiation between multiple controller methods, and without it I get ""ambiguous mapping"" errors.  But when creating a `MockMvcBuilder` with `standaloneSetup` there is no way to register this mapper with the builder.  I see lots of existing setup methods on `StandaloneMockMvcBuilder` that do similar things but none that allows for setting `RequestMappingHandlerMapping`.  Can an equivalent method be added to the builder to allow this?  Thanks!   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/191bbc20dcb6769edc550a433e65fca25cdab85f","closed","type: enhancement,","spring-projects-issues","2017-04-21T04:02:25Z","2017-05-08T08:41:47Z"
"","20367","Improve WebExceptionHandler mechanism [SPR-15812]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15812](https://jira.spring.io/browse/SPR-15812?redirect=false)** and commented  With MVC, Spring Boot provides the following features with error pages: * map ""/error"" to an ErrorController handler and support various content types for rendering errors (HTML, JSON) * is able to map /error/4xx.html pages as static files or render them as views  This is all possible because: * in embedded mode, Boot is registering error pages in the servlet container in embedded mode * in war mode, Boot is registering an error page filter that dispatches back errors on error pages  To achieve the same thing with WebFlux, a custom `WebExceptionHandler` is probably the best choice here, but it is too low level for what we're trying to achieve. We could add the ability to dispatch back to the original `WebHandler` by providing as a method argument.  But such a feature would create new issues: * it is rather involved, as we're re-dispatching the request into the main handler * this is supposed to be a ""last resort mechanism"" for error handling, but this would offer more features than a `@ExceptionHandler` method  Instead, we can refine the existing contract to provide a way to do simple content negotiation, response entity and view rendering - all using the existing result handlers.  ---  **Affects:** 5.0 RC3  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/8625  **Issue Links:** - #19106 Reactive HTTP request forwarding","closed","type: enhancement,","spring-projects-issues","2017-07-24T13:16:46Z","2019-01-11T17:42:13Z"
"","20354","Support IPv6 Host addresses in HttpHeaders [SPR-15799]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15799](https://jira.spring.io/browse/SPR-15799?redirect=false)** and commented  Parsing the ""Host"" HTTP request header with an IPv6 address `[::1]` returns invalid information (it contains ':' chars, but no port information).   ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f1abcba4eb6f1b5a96279a4df43bff39ececdbfa","closed","type: bug,","spring-projects-issues","2017-07-20T13:21:39Z","2017-07-24T07:51:16Z"
"","20287","WebFlux can't serialize ""Object"" return types as response body [SPR-15731]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15731](https://jira.spring.io/browse/SPR-15731?redirect=false)** and commented  Given this WebFlux endpoint:  ```java @RestController public class TestController {  	@GetMapping(""/test"") 	public Object myTest() { 		return Mono.just(new User(""spring"")); 	} } ```  Calling that endpoint will result in the following:  ``` java.lang.IllegalArgumentException: Unrecognized Type: org.springframework.core.ResolvableType$EmptyType@6b003199 	at com.fasterxml.jackson.databind.type.TypeFactory._fromAny(TypeFactory.java:1222) ~[jackson-databind-2.9.0.pr4.jar:2.9.0.pr4] 	at com.fasterxml.jackson.databind.type.TypeFactory.constructType(TypeFactory.java:616) ~[jackson-databind-2.9.0.pr4.jar:2.9.0.pr4] 	at org.springframework.http.codec.json.Jackson2CodecSupport.getJavaType(Jackson2CodecSupport.java:89) ~[spring-web-5.0.0.BUILD-20170703.083012-345.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.http.codec.json.Jackson2JsonEncoder.encodeValue(Jackson2JsonEncoder.java:144) ~[spring-web-5.0.0.BUILD-20170703.083012-345.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.http.codec.json.Jackson2JsonEncoder.lambda$encode$0(Jackson2JsonEncoder.java:125) ~[spring-web-5.0.0.BUILD-20170703.083012-345.jar:5.0.0.BUILD-SNAPSHOT] ```  It seems that the `ResponseBodyResultHandler` looks at the method return type to get the type information and because this endpoint exposes `Object`, this leads to an instance of `ResolvableType.EmptyType()`, which Jackson doesn't know how to deal with.  In those cases, should we derive the type at runtime? If this is intended behavior, should we forbid `Object` return types in handlers and perform a hard check at startup?  ---  **Affects:** 5.0 RC2  **Issue Links:** - #20340 Returning ResponseEntity from WebFlux controller method declared to return Object serialises entire response entity to response body","closed","type: bug,","spring-projects-issues","2017-07-03T15:47:37Z","2019-01-11T16:11:20Z"
"","20249","Allow WebClientBuilder.Builder to be cloned [SPR-15690]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15690](https://jira.spring.io/browse/SPR-15690?redirect=false)** and commented  Spring Boot needs to expose a `WebClient` helper class to easily create instances of that client that are auto-configured by Boot and can be further locally customized by developers.  For that, we would need a clone-like method on the `WebClient.Builder` in order to completely clone its state; we would then use that builder instance in the Boot support.   ---  **Affects:** 5.0 RC2  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/9522  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8ac29c8ce7055e1421ba5995ebb44f0aecc92223","closed","type: enhancement,","spring-projects-issues","2017-06-22T15:21:05Z","2017-07-24T07:51:16Z"
"","20241","Align codec configuration in ExchangeStrategies.Builder and WebFluxConfigurer [SPR-15682]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15682](https://jira.spring.io/browse/SPR-15682?redirect=false)** and commented  While working on a [Spring Boot issue regarding codecs configuration](https://github.com/spring-projects/spring-boot/issues/9166), I've noticed that the reactive server and client codec configurations don't provide the same API.  On the server side, we're dealing with a `ServerCodecConfigurer`:  ```java WebFluxConfigurer.configureHttpMessageCodecs(ServerCodecConfigurer configurer) ```  The client configuration is dealt with `ExchangeStrategies`, which declares:  ```java ExchangeStrategies.defaultCodecs(Consumer consumer);  ExchangeStrategies.customCodecs(Consumer consumer); ```  Those methods provide extension points that aren't aligned with the server side.  To better align those configurations and allow code reuse in the infrastructure setup, I'd like to add the following (and remove the existing ones?):  ```java // both ClientCodecConfigurer and ServerCodecConfigurer extend CodecConfigurer ExchangeStrategies.codecs(Consumer consumer) ```    ---  **Affects:** 5.0 RC2  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/9166  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/52148a10b766ed85e08aac7212a77786caab6a79","closed","type: enhancement,","spring-projects-issues","2017-06-19T12:56:06Z","2017-07-24T07:51:14Z"
"","20212","Fix ignored test in RequestMappingInfoHandlerMappingTests [SPR-15653]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15653](https://jira.spring.io/browse/SPR-15653?redirect=false)** and commented  In #20167 we've ignored a test in `RequestMappingInfoHandlerMappingTests. getHandlerEmptyPathMatch` related to matching annotated handlers: matching `""""` and `""/""` request paths and patterns.  This issue is about revisiting that behavior or fixing the current implementation to reinstate that.  ---  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/25118/patch.txt) (_3.17 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/07b961caa66ec181126e6f2b108637edaf8c19ae, https://github.com/spring-projects/spring-framework/commit/3d37c889faf314a22d8563824fc4003b569c4c61","closed","type: task,","spring-projects-issues","2017-06-12T16:59:49Z","2019-01-11T16:08:04Z"
"","20167","Replace ParsingPathMatcher with PathPattern registry [SPR-15608]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15608](https://jira.spring.io/browse/SPR-15608?redirect=false)** and commented  Now that `PathPattern` has been introduced, further changes can be applied to spring-webflux to simplify the routing algorithm.  Instead of relying on the `ParsingPathMatcher` and managing String instances, we could: * `AbstractHandlerMapping` and subclasses should use `PathPattern` instances and a private registry instead of `String` and `PathMatcher` * The `PatternsRequestCondition` should also keep an ordered collection of `PathPattern` and use a `PathPatternParser`, in order to replace `String` and `PathMatcher`  Other possible improvements: * consider simplifying the various layer of caches (direct URLs, for example) and * consider performance optimizations on the registry itself * check defaults, see #19559  ---  **Issue Links:** - #19559 Review path matching options and defaults in the new path matching algorithms  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/233c15b80e3b0d3ff221685838d2a7229b6f059b","closed","type: enhancement,","spring-projects-issues","2017-06-01T12:49:11Z","2019-01-11T15:40:42Z"
"","20156","PathPattern ""/{foo}.*"" should be more specific than ""/{foo}"" [SPR-15597]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15597](https://jira.spring.io/browse/SPR-15597?redirect=false)** and commented  Hi [Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement),  While working on further changes in the framework leveraging `PathPattern`, I've found the following behavior:  ```java PathPatternParser parser = new PathPatternParser(); PathPattern p1 = parser.parse(""/{foo}""); PathPattern p2 = parser.parse(""/{foo}.*""); Map r1 = p1.matchAndExtract(""/file.txt""); Map r2 = p2.matchAndExtract(""/file.txt"");  // works fine assertEquals(r1.get(""foo""), ""file.txt""); assertEquals(r2.get(""foo""), ""file"");  // returns -1, thus considering that ""/{foo}"" is more specific than ""/{foo}.*"" assertThat(p1.compareTo(p2), Matchers.greaterThan(0)); ```  Judging [from our previous discussion](https://jira.spring.io/browse/SPR-14544?focusedCommentId=134119&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-134119), I'm wondering if this is now the expected behavior or if this is inconsistent with what's described in that comment.  By the way, when comparing `""/{foo}""` and `""/{foo}.txt""`, `""/{foo}.txt""` is considered the most specific one.  Thanks,  ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/77576ed6fe5e543397d57598b2f027c64fccfeba","closed","type: bug,","spring-projects-issues","2017-05-30T10:24:37Z","2019-01-14T04:35:10Z"
"","20098","Consider reordering of RequestUpgradeStrategy detection in HandshakeWebSocketService [SPR-15539]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15539](https://jira.spring.io/browse/SPR-15539?redirect=false)** and commented  Currently `HandshakeWebSocketService` detects the `RequestUpgradeStrategy` to use by looking at the classpath. The order of detection is the following:  1. Tomcat 2. Jetty 3. Reactor Netty 4. Undertow  Since the `reactor-netty` dependency should be quite common for WebFlux projects (because it brings an HTTP client implementation, whereas Undertow and Tomcat don't), having both undertow and reactor netty on the classpath will always favor the latter for websocket configuration.  Would it make sense to reorder reactor netty at the end? Are there use cases where undertow is transitively brought by other dependencies?   ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9b53b86d24330c2974cde3b4fb141e8362dac369","closed","type: enhancement,","spring-projects-issues","2017-05-12T11:55:40Z","2017-06-14T10:12:19Z"
"","20014","Fix compilation warning on JDK 9: use deprecated method LogRecord.setMillis [SPR-15453]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15453](https://jira.spring.io/browse/SPR-15453?redirect=false)** and commented  It seems we're using a deprecated method in the spring-core module. This fails the JDK9 build for now (see [SPR-JDK9-180](https://build.spring.io/browse/SPR-JDK9-180/log)):  ``` error	14-Apr-2017 00:03:04	/opt/bamboo-home/xml-data/build-dir/SPR-JDK9-JOB1/spring-core/src/main/java/org/apache/commons/logging/LogFactory.java:635: warning: [deprecation] setMillis(long) in LogRecord has been deprecated error	14-Apr-2017 00:03:04				serialized.setMillis(getMillis()); error	14-Apr-2017 00:03:04				          ^ error	14-Apr-2017 00:03:04	error: warnings found and -Werror specified ```  The `setInstant` variant (introduced in JDK9) is the preferred one. In the meantime, can we ignore that warning so that the build is green with JDK9 again?  ---  **Affects:** 5.0 RC1  **Reference URL:** http://download.java.net/java/jdk9/docs/api/java/util/logging/LogRecord.html#setMillis-long-  **Issue Links:** - #19081 Revisit Commons Logging vs java.util.logging vs SLF4J vs Log4j 2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d50dab6ea975a1af1c343bd68f32d0af8e87f006","closed","in: core,","spring-projects-issues","2017-04-14T08:26:08Z","2019-01-11T16:40:30Z"
"","20005","Move RxNetty support in test scope [SPR-15444]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15444](https://jira.spring.io/browse/SPR-15444?redirect=false)** and commented  The current RxNetty server support is only used in our tests, so we should move the actual classes to the test scope and not export those anymore.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a8d785b87fb2e662c0ad931a11dbf37489565f39","closed","type: enhancement,","spring-projects-issues","2017-04-12T14:59:14Z","2017-05-08T08:41:44Z"
"","19960","Parse request path only once during routing [SPR-15397]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15397](https://jira.spring.io/browse/SPR-15397?redirect=false)** and commented  Since the introduction of `PathPatternParser` in #19112, the WebFlux framework is using it within the `ParsingPatchMatcher` to match incoming requests against route patterns.  Attempts to integrate the `PathPatternParser` directly and leverage its full potential were made in the previous milestone but were reverted in fa4202f1, after we fully understood that this strategy could be improved in several ways:  * incoming requests should be parsed once at the beginning of the request pipeline, at the `HandlerMapping` level; their path should be parsed to extract the path, path parameters and file extension informations, and more if necessary * this ""parsed request"" information should be made available to the rest of the request pipeline, by using an exchange attribute * the `HttpRequestPathHelper` does not need to leak in multiple places anymore  ---  **Issue Links:** - #19868 When using ParsingPathMatcher in MVC user should not have to also explicitly set suffix matching","closed","type: enhancement,","spring-projects-issues","2017-03-29T13:44:19Z","2019-01-11T14:41:53Z"
"","19825","Add option for trailing separator matching in PathPatternParser [SPR-15260]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15260](https://jira.spring.io/browse/SPR-15260?redirect=false)** and commented  `PathPatternParser` currently supports an option for enabling/disabling case sensitive matching.  We would like to add such an option for enabling/disabling matching with trailing separator(s).  ```java PathPattern p = pathPatternParser.parse(""/resource"");  // option enabled (by default?) assertTrue(p.matches(""/resource"")); assertTrue(p.matches(""/resource/"")); assertTrue(p.matches(""/resource//""));  // option disabled assertTrue(p.matches(""/resource"")); assertFalse(p.matches(""/resource/"")); ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cd8655881101290ea98db64b1b087fa36806f1ea","closed","type: enhancement,","spring-projects-issues","2017-02-15T22:27:36Z","2019-01-11T14:28:24Z"
"","19824","StringIndexOutOfBoundsException in PathPattern.extractPathWithinPattern [SPR-15259]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15259](https://jira.spring.io/browse/SPR-15259?redirect=false)** and commented  The following code demonstrates the issue:  ```java PathPatternParser ppp = new PathPatternParser(); PathPattern pp = ppp.parse(""/**""); assertTrue(pp.matches(""/"")); String s = pp.extractPathWithinPattern(""/""); assertEquals("""", s); ```    ---  **Affects:** 5.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f98ea11e5e3fa8b16d5c98b544377058ee30a205","closed","type: bug,","spring-projects-issues","2017-02-15T22:10:38Z","2017-02-23T09:29:13Z"
"","19728","Use reactor BOM in Framework build [SPR-15162]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15162](https://jira.spring.io/browse/SPR-15162?redirect=false)** and commented  This change will use the [gradle dependency management plugin](https://github.com/spring-gradle-plugins/dependency-management-plugin) to import the Reactor maven BOM into the Framework build.   ---  **Affects:** 5.0 M4  **Reference URL:** https://github.com/reactor/reactor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/17525ef969f69074a5c406caf5ee98c47bee8a0d, https://github.com/spring-projects/spring-framework/commit/63106e7ffb5bc103ef18d1674bcba3a7cf1d3f40","closed","type: task,","spring-projects-issues","2017-01-18T18:06:17Z","2017-02-23T09:29:12Z"
"","19658","Jetty HTTP client integration with WebClient  [SPR-15092]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15092](https://jira.spring.io/browse/SPR-15092?redirect=false)** and commented  Both implementations could take `WebSocketClient` implementations as examples of how to deal with backpressure with each library. The configuration model should also copy the current arrangement in `WebSocketClient` implementations, since each library deals with client instances and configuration objects in a different way.  ---  **Issue Links:** - #21014 JDK 11 HttpClient integration with WebClient - #21661  Upgrade to Jetty reactive HTTP client 1.0.1 - #20888 Add ClientHttpConnector for Apache Http-async-client - #21596 Leverage Jetty BOM - #21715 Add JettyResourceFactory  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1783, and commits https://github.com/spring-projects/spring-boot/commit/f74dd7d58cdc4201898b25c8266e9c3a91ef52b7  0 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2017-01-04T15:33:15Z","2019-01-11T15:27:20Z"
"","20006","When setting spring.freemarker.template-loader-path to an s3 bucket, the SpringTemplateLoader is not selected [SPR-15445]","**[Brad Giaccio](https://jira.spring.io/secure/ViewProfile.jspa?name=bgiaccio)** opened **[SPR-15445](https://jira.spring.io/browse/SPR-15445?redirect=false)** and commented  The default config uses classpath:/templates/  which eventually gets processed by FreeMarkerConfigurationFactory.getTemplateLoaderForPath  I've set  ``` spring.freemarker.template-loader-path=s3://my-bucket/templates, classpath:/templates/ ```  However, the code relies on an IOException but in the case of S3 the returned SimpleStorageResource.getFile() throws UnsupportedOperationException  ```java try { 	Resource path = getResourceLoader().getResource(templateLoaderPath); 	File file = path.getFile();  // will fail if not resolvable in the file system 	... } catch (IOException ex) { 	return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath); } ```  So I believe the catch just need to be converted to a multicatch to handle both.  I see that if I set ``` spring.freemarker.prefer-file-system-access=false  ```then it by passes the logic and create a SpringTemplateLoader but this wouldn't help someone that needs s3 and a file path. ```    ---  **Affects:** 4.3.7","closed","type: bug,","spring-projects-issues","2017-04-12T15:38:23Z","2017-04-18T15:43:21Z"
"","20028","Option to call Lifecycle.stop() on failed refresh [SPR-15468]","**[Bill Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=billc.cn)** opened **[SPR-15468](https://jira.spring.io/browse/SPR-15468?redirect=false)** and commented  Currently, `Lifecycle.stop()` is documented not to be called if refresh failed. However, this makes lifecycle process really asymmetrical (especially when refresh failed due to an exception thrown from Lifecycle.start()).  Can an option be added to call `Lifecycle.stop()` on already started beans?   --- No further details from [SPR-15468](https://jira.spring.io/browse/SPR-15468?redirect=false)","open","in: core,","spring-projects-issues","2017-04-20T14:24:42Z","2019-01-11T16:39:46Z"
"","20170","Mixing @Controller and RouterFunctions [SPR-15611]","**[Biju Kunjummen](https://jira.spring.io/secure/ViewProfile.jspa?name=biju.kunjummen)** opened **[SPR-15611](https://jira.spring.io/browse/SPR-15611?redirect=false)** and commented  Hi, This is likely a gap in my understanding - I tried this with Spring Boot 2.0.0.M1. If I define a RouterFunction, any `@Controller` annotated method no longer works and if I explicitly have an `@EnableWebFlux` then RouterFunction breaks. Is there anyway for both styles to work at the same time.   ---  **Affects:** 5.0 RC1","closed","status: invalid,","spring-projects-issues","2017-06-01T19:40:35Z","2019-01-12T05:20:46Z"
"","19798","Avoid creating thread pool in WebSocket Java config when SockJS not used [SPR-15233]","**[Benoit](https://jira.spring.io/secure/ViewProfile.jspa?name=benbenw)** opened **[SPR-15233](https://jira.spring.io/browse/SPR-15233?redirect=false)** and commented  When using spring websocket without sockjs (with spring boot) a default thread pool is created (defaultSockJsTaskScheduler). It should be instantiated only if sockjs is going to be used   ---  **Affects:** 4.3.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/779779de7befc9ddda57d0edef55d3164b1cde5f","closed","type: enhancement,","spring-projects-issues","2017-02-08T15:17:32Z","2017-05-08T08:41:46Z"
"","19763","Data binding with immutable objects (Kotlin / Lombok / @ConstructorProperties) [SPR-15199]","**[Benjamin M](https://jira.spring.io/secure/ViewProfile.jspa?name=benneq)** opened **[SPR-15199](https://jira.spring.io/browse/SPR-15199?redirect=false)** and commented  I'm trying to integrate Lombok with my Spring Project. Now I came across the first issue:  ```java @lombok.Value public class MyGetParamContainer {     String foo;     int bar; } ```  ```java @RequestMapping(...) public void foo(MyGetParamContainer params) {     // ... } ```  This will result in an Exception:  ``` org.springframework.beans.BeanInstantiationException: Failed to instantiate [MyGetParamContainer]: No default constructor found ```  This happens because it's an immutable object, which sets all its values though its constructor.  Though it would be really nice if Spring could take care of `@ConstructorProperties` if there's no default constructor.  ---  **Affects:** 4.3.6, 5.0 M4  **Issue Links:** - #12403 Provide support for configuring the bindable properties of a form-backing object using field-level annotations - #20232 Kotlin class instantiation with optional parameters and default values - #19615 Document functional configuration style - #18477 Doc: First class support for java 8 parameter names API - #20101 BindingResult support for constructor argument mismatch on immutable data object - #20432 Revisit handling of missing fields (without default values) for immutable data classes - #20426 Immutable object constructor arguments not considering WebDataBinder's FIELD_MARKER_PREFIX  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fa4d13968451bfe96eab122634c0a1eab6083aaa, https://github.com/spring-projects/spring-framework/commit/65ba865d7058a7beb54d9d9dfd519678c93641ec","closed","type: enhancement,","spring-projects-issues","2017-01-27T23:39:22Z","2019-01-11T14:25:47Z"
"","20181","Provide support for Kotlin KClasses in WebTestClient API [SPR-15622]","**[Benedikt Stemmildt](https://jira.spring.io/secure/ViewProfile.jspa?name=benestem)** opened **[SPR-15622](https://jira.spring.io/browse/SPR-15622?redirect=false)** and commented  Would be very nice NOT to have to call:  ```kotlin val result = client.get().uri(""/products/?sort=id,desc"")       .accept(TEXT_EVENT_STREAM)       .exchange()       .returnResult(Product::class.java) ```  but instead use more Kotlin like syntax:  ```kotlin val result = client.get().uri(""/products/?sort=id,desc"")       .accept(TEXT_EVENT_STREAM)       .exchange()       .returnResult() ```  For all the Web(Test)Client API methods :-)   ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3373a3f7ef879f9c53085fc2cc1b61ec7cef910e","closed","type: enhancement,","spring-projects-issues","2017-06-03T22:05:03Z","2017-06-14T10:12:18Z"
"","20350","Media type fails to match types with multiple '+' characters [SPR-15795]","**[Ben Draut](https://jira.spring.io/secure/ViewProfile.jspa?name=drautb)** opened **[SPR-15795](https://jira.spring.io/browse/SPR-15795?redirect=false)** and commented  The logic in `MimeType.includes` and `MimeType.isCompatibleWith` appears to have a bug, in that they assume there will only be one `+` character in the media type string.  For example, `application/*+json` does _not_ `include` a media type of the form `application/x.y+z+json`.  My understanding from the [RFC](https://trac.tools.ietf.org/html/draft-ietf-appsawg-media-type-regs-14#section-4.2) is that multiple + characters are allowed, and everything following the last + defines the syntax suffix.  The code in `MimeType` is using ``` indexOf('+')  ```to locate the syntax suffix. My belief is that it should be using ```lastIndexOf('+') ``` instead.  Steps to reproduce:  Use `RestTemplate` to make an HTTP request with a custom `Content-Type` header of `application/x.y+z+json`. An error is thrown: ```  org.springframework.web.client.RestClientException: Could not write request: no suitable HttpMessageConverter found for request type...  ```  Proposed change: https://github.com/spring-projects/spring-framework/pull/1481 ```    ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1481, and commits https://github.com/spring-projects/spring-framework/commit/d7a7b08b0845da9a0ee6ebae2db2f853e77c5214","closed","type: enhancement,","spring-projects-issues","2017-07-19T14:35:50Z","2017-09-11T12:09:50Z"
"","19887","Improve Javadoc on configuring exception resolvers via WebMvcConfigurer [SPR-15324]","**[Belozorov Volodymyr](https://jira.spring.io/secure/ViewProfile.jspa?name=vavilen)** opened **[SPR-15324](https://jira.spring.io/browse/SPR-15324?redirect=false)** and commented  Good time of the day, dear Spring team,  After extending `WebMvcConfigurerAdapter` and configuring `HttpMessageConverters` as well as `HandlerExceptionResolvers`, I have the following (relevant) configuration for a servlet context  ```java @Configuration @EnableWebMvc @ComponentScan({""ua.belozorov.xxx""}) public class WebConfig extends WebMvcConfigurerAdapter { ...     @Override     public void configureMessageConverters(List","closed","type: task,","spring-projects-issues","2017-03-07T14:33:46Z","2017-04-18T15:43:21Z"
"","19992","Show number of active profiles in the logs [SPR-15431]","**[Behrang Saeedzadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=behrangsa)** opened **[SPR-15431](https://jira.spring.io/browse/SPR-15431?redirect=false)** and commented  At the moment when Spring boots up it emits a log record like this:  ``` The following profiles are active: prof1,prof2,prof3 ```  It is not immediately obvious if the log just prints out the value of the `spring.profiles.active` CLI argument or the 3 above profiles are really active. If an app does not work as expected, it won't be immediately obvious if the problem is due to a non-active profile or something else.  Changing the log record to one of the following formats conveys the message with less ambiguity:  ``` The following 3 profiles are active: [prof1, prof2, prof3] ```  Or  ``` The following 3 profiles are active: prof1, prof2, prof3 ```    --- No further details from [SPR-15431](https://jira.spring.io/browse/SPR-15431?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-04-11T01:57:41Z","2019-01-12T05:21:02Z"
"","19623","Stylesheets are not being served for JavaDocs pages [SPR-15057]","**[Behrang Saeedzadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=behrangsa)** opened **[SPR-15057](https://jira.spring.io/browse/SPR-15057?redirect=false)** and commented  Steps to reproduce:  * Go to https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html (with Chrome or Firefox) * Open the inspector * CSS files are not being served as they are using the HTTP protocol rather than HTTPS  !javadoc-css-http.png!   ---  **Attachments:** - [javadoc-css-http.png](https://jira.spring.io/secure/attachment/23667/javadoc-css-http.png) (_38.00 kB_)","closed","type: task,","spring-projects-issues","2016-12-27T08:42:41Z","2017-02-23T09:29:11Z"
"","19619","Refactor AbstractNestablePropertyAccessor#setPropertyValue(PropertyTokenHolder, PropertyValue) [SPR-15053]","**[Behrang Saeedzadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=behrangsa)** opened **[SPR-15053](https://jira.spring.io/browse/SPR-15053?redirect=false)** and commented  The `org.springframework.beans.AbstractNestablePropertyAccessor#setPropertyValue(org.springframework.beans.AbstractNestablePropertyAccessor.PropertyTokenHolder, org.springframework.beans.PropertyValue)` method is very long (193 lines) and has statements that are 5-6 levels deep. For example:  !refactoring.png!  I suggest breaking down this method into smaller methods and reduce the depth of nesting in its code.   ---  **Affects:** 4.3.5  **Attachments:** - [refactoring.png](https://jira.spring.io/secure/attachment/23666/refactoring.png) (_135.88 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/64d6561cbbda4d5a74cd0f3ce5983e29c9d42b89, https://github.com/spring-projects/spring-framework/commit/d77ab67c5680db1ecc5c7fbe009df24e8bd5bed4","closed","in: core,","spring-projects-issues","2016-12-26T00:54:32Z","2016-12-30T13:33:15Z"
"","19618","Doc: Can't issue PATCH request using RestTemplate with SimpleClientHttpRequestFactory [SPR-15052]","**[Behrang Saeedzadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=behrangsa)** opened **[SPR-15052](https://jira.spring.io/browse/SPR-15052?redirect=false)** and commented  This test case fails with at least OpenJDK 1.8.0_101 under Ubuntu (4.8.0-30-generic):  ```java     @Test     @DirtiesContext     public void testPatchMethod() {         final HttpEntity request = new HttpEntity(""Hello"");          restTemplate.exchange(""/patchy/echo"", PATCH, request, String.class);     } ```  with the following exception:  ``` org.springframework.web.client.ResourceAccessException: I/O error on PATCH request for ""http://localhost:44661/persons/1"": Invalid HTTP method: PATCH; nested exception is java.net.ProtocolException: Invalid HTTP method: PATCH ```  This is due to `HttpURLConnection` only allowing the following HTTP methods:  ```java /* valid HTTP methods */ private static final String[] methods = {     ""GET"", ""POST"", ""HEAD"", ""OPTIONS"", ""PUT"", ""DELETE"", ""TRACE"" }; ```  PayPal guys have implemented a workaround for their own API [here](https://github.com/paypal/sdk-core-java/blob/v1.6.4/src/main/java/com/paypal/core/DefaultHttpConnection.java#L94):  ```java 	 /**      * Workaround for a bug in {@code HttpURLConnection.setRequestMethod(String)}      * The implementation of Sun/Oracle is throwing a {@code ProtocolException}      * when the method is other than the HTTP/1.1 default methods. So to use {@code PATCH}      * and others, we must apply this workaround.      *      * See issue http://java.net/jira/browse/JERSEY-639      */     private static void setRequestMethodViaJreBugWorkaround(final HttpURLConnection httpURLConnection, final String method) {         try {             httpURLConnection.setRequestMethod(method); // Check whether we are running on a buggy JRE         } catch (final ProtocolException pe) {             try {                 final Class httpURLConnectionClass = httpURLConnection.getClass(); 				AccessController 						.doPrivileged(new PrivilegedExceptionAction() { 							public Object run() throws NoSuchFieldException, 									IllegalAccessException { 								try { 									httpURLConnection.setRequestMethod(method); 									// Check whether we are running on a buggy 									// JRE 								} catch (final ProtocolException pe) { 									Class connectionClass = httpURLConnection 											.getClass(); 									Field delegateField = null; 									try { 										delegateField = connectionClass 												.getDeclaredField(""delegate""); 										delegateField.setAccessible(true); 										HttpURLConnection delegateConnection = (HttpURLConnection) delegateField 												.get(httpURLConnection); 										setRequestMethodViaJreBugWorkaround( 												delegateConnection, method); 									} catch (NoSuchFieldException e) { 										// Ignore for now, keep going 									} catch (IllegalArgumentException e) { 										throw new RuntimeException(e); 									} catch (IllegalAccessException e) { 										throw new RuntimeException(e); 									} 									try { 										Field methodField; 										while (connectionClass != null) { 											try { 												methodField = connectionClass 														.getDeclaredField(""method""); 											} catch (NoSuchFieldException e) { 												connectionClass = connectionClass 														.getSuperclass(); 												continue; 											} 											methodField.setAccessible(true); 											methodField.set(httpURLConnection, 													method); 											break; 										} 									} catch (final Exception e) { 										throw new RuntimeException(e); 									} 								} 								return null; 							} 						});             } catch (final PrivilegedActionException e) {                 final Throwable cause = e.getCause();                 if (cause instanceof RuntimeException) {                     throw (RuntimeException) cause;                 } else {                     throw new RuntimeException(cause);                 }             }         } } ```  Another alternative is to use Apache Http-Components Client 4.2+ instead.  I have attached a test case reproducing the issue (see `org.behrang.howto.bugreport.PatchyControllerTest#testPatchMethod`).  ---  **Affects:** 4.3.5  **Attachments:** - [bug-report.zip](https://jira.spring.io/secure/attachment/23665/bug-report.zip) (_57.62 kB_)  **Issue Links:** - #19910 Enhance RestTemplate to support PATCH out of the box  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/048098119efedbea0461539623188ed2af785bb7, https://github.com/spring-projects/spring-framework/commit/20aaa8841c56ed0ddd55e6f7e8f807acf6699f57  0 votes, 5 watchers","closed","type: task,","spring-projects-issues","2016-12-25T09:49:41Z","2019-01-11T15:15:36Z"
"","20351","Spring Boot properties: ServletContext root not mentioned as default location of static resources [SPR-15796]","**[Bastiaan Proot](https://jira.spring.io/secure/ViewProfile.jspa?name=bastiaanproot)** opened **[SPR-15796](https://jira.spring.io/browse/SPR-15796?redirect=false)** and commented  Spring Boot properties Documentation: https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html  **ServletContext root ""/""** is not mentioned as a default location for static resources:  ``` spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources. ```  This should be:  ``` spring.resources.static-locations=/,classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources. ```  Then this will match the default RESOURCE_LOCATIONS in [ResourceProperties.java](https://github.com/spring-projects/spring-boot/blob/v1.5.4.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java)  As described in the Static Content section of the [Spring Boot Reference Guide](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-spring-mvc-static-content)   --- No further details from [SPR-15796](https://jira.spring.io/browse/SPR-15796?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-07-20T08:45:05Z","2019-01-12T05:20:33Z"
"","20102","DefaultSubscriptionRegistry should prevent duplicate subscription id in accessCache [SPR-15543]","**[Bao Tran](https://jira.spring.io/secure/ViewProfile.jspa?name=tran.bao51093)** opened **[SPR-15543](https://jira.spring.io/browse/SPR-15543?redirect=false)** and commented  In DefaultSubscriptionRegistry, multiple subscriptions on the same session should have unique subscription id's. In DefaultSubscriptionRegistry.addSubscriptionInternal method, there are calls to:  ```java this.subscriptionRegistry.addSubscription(sessionId, subsId, destination, expression); this.destinationCache.updateAfterNewSubscription(destination, sessionId, subsId); ```  * Assume that registerSubscription is called with a message argument. * If findSubscriptions method is called with destination argument after addSubscription and before updateAfterNewSubscription, accessCache will contain duplicate subscriptionId for destination - sessionId key. * This will lead to a subscriber receives a message twice due to loop in SimpleBrokerMessageHandler.sendMessageToSubscribers  ---  **Affects:** 4.3.8  **Issue Links:** - #19848 Cannot receive message sometimes with SimpleBrokerMessageHandler  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1427, and commits https://github.com/spring-projects/spring-framework/commit/4fc41eeeb90f9c5cd01f96ec46a1438ce2fbdc0e, https://github.com/spring-projects/spring-framework/commit/b6e252495a70d716179db1e91397190ac2a0aee9, https://github.com/spring-projects/spring-framework/commit/44c31a6aad26ce2a4e7225e93e6fb26612f07b2c, https://github.com/spring-projects/spring-framework/commit/8deec9569c2741c2fc5a78e375765dfb93586f49","closed","type: bug,","spring-projects-issues","2017-05-14T12:23:35Z","2019-01-11T17:08:21Z"
"","20371","AbstractCodecConfigurer creates Jackson Encoders/Decoders each time when getters are called [SPR-15816]","**[Babur Duisenov](https://jira.spring.io/secure/ViewProfile.jspa?name=bduisenov)** opened **[SPR-15816](https://jira.spring.io/browse/SPR-15816?redirect=false)** and commented  AbstractCodecConfigurer #getReaders #getWriters methods create new instances of  Jackson2JsonDecoder and Jackson2JsonEncoder each time when getters are called, by default. This happens because of this code:  ```java protected Jackson2JsonEncoder jackson2Encoder() {      return this.jackson2Encoder != null ? this.jackson2Encoder : new Jackson2JsonEncoder(); } protected Jackson2JsonDecoder jackson2Decoder() {      return this.jackson2Decoder != null ? this.jackson2Decoder : new Jackson2JsonDecoder(); } ```  The Jackson2JsonDecoder and Jackson2JsonEncoder internally are using  org.springframework.util.ClassUtils.forName blocking method, which leads to blocking reactor-http-nio threads.  ---  **Affects:** 5.0 RC2  **Attachments:** - [thread.dump.txt](https://jira.spring.io/secure/attachment/25058/thread.dump.txt) (_6.60 kB_)  **Issue Links:** - #20429 BLOCKED ""reactor-http-nio-*"" threads under load (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f3975776d4b55f5b49fc504fea3f6e3c09a3238a","closed","type: bug,","spring-projects-issues","2017-07-25T13:41:48Z","2019-01-11T17:41:39Z"
"","20096","Increase log level in ExceptionWebSocketHandlerDecorator [SPR-15537]","**[Ayushya Devmurari](https://jira.spring.io/secure/ViewProfile.jspa?name=pathfinder2104)** opened **[SPR-15537](https://jira.spring.io/browse/SPR-15537?redirect=false)** and commented  While working on an app which includes a module of spring-websocket. I did some changes in the code and I was having some hibernate exception in the back, but the exception is not getting printed/logged. I found out this while debugging the code. In this class ""ExceptionWebSocketHandlerDecorator"" in this public static method ""tryCloseWithError"", exception handling is there but logging is missing.  I have created a PR for this, please do the needful. Below is the link for PR. https://github.com/spring-projects/spring-framework/pull/1424   ---  **Affects:** 4.3.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/99236759ec0f8863914de596566d27d9f36293af, https://github.com/spring-projects/spring-framework/commit/df8412bded77faadd60d62dc5c78ca8b2b44a481","closed","type: enhancement,","spring-projects-issues","2017-05-12T07:31:39Z","2017-06-07T20:04:28Z"
"","20235","Request params Optional","**[Ayush Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=ayush-veem)** opened **[SPR-15676](https://jira.spring.io/browse/SPR-15676?redirect=false)** and commented  When using List\ as the request parameter, both key=val1,val2 and key=val1&key=val2 end up mapping to key = [val1, val2]  When using Optional as the request parameter key=val1,val2 maps to key = Optional([val1,val2]) but key=val1&key=val2 maps to Optional([val1])  This makes RequestParam(..., required = false) List\ behave differently from RequestParam(...) Optional, which seems unfortunate.  ---  **Affects:** 4.3.4  **Issue Links:** - #20412 `@RequestParam` Optional","closed","type: bug,","spring-projects-issues","2017-06-16T18:37:07Z","2019-01-13T05:15:46Z"
"","19812","Customizable Jackson ObjectMapper in WebFluxConfigurationSupport [SPR-15247]","**[Attila Király](https://jira.spring.io/secure/ViewProfile.jspa?name=akiraly)** opened **[SPR-15247](https://jira.spring.io/browse/SPR-15247?redirect=false)** and commented  Currently `WebFluxConfigurationSupport` (in its `addDefaultHttpMessageReaders` and `addDefaultHttpMessageWriters` methods) creates ObjectMapper-s indirectly through the `new Jackson2JsonDecoder()` and `new Jackson2JsonEncoder()` calls.  These ObjectMapper-s are not passed through any hooks which would make it possible to customize them (for example to disable `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS`).  The only way I could customize it (and still keep the default writers added) was to create a custom `WebFluxConfigurer`:  ```java @Component public class Jackson2WebFluxReConfigurer implements WebFluxConfigurer {    @Override   public void extendMessageWriters(List","closed","type: enhancement,","spring-projects-issues","2017-02-12T20:42:41Z","2019-01-11T14:31:25Z"
"","20087","Support strict sequencing with thread pool size >1 [SPR-15528]","**[Askar Ibragimov](https://jira.spring.io/secure/ViewProfile.jspa?name=askaribragimov)** opened **[SPR-15528](https://jira.spring.io/browse/SPR-15528?redirect=false)** and commented  **Problem**  When core pool size of ClientOutboundChannel is >1, race condition happen and message order gets mixed. See http://stackoverflow.com/questions/29689838/sockjs-receive-stomp-messages-from-spring-websocket-out-of-order  Many applications would however desire the orderly propagations of the messages so client is guaranteed to get these in order.  However, for high load servers it is not worthwhile using just one thread. Additionally, Jetty has a problem: its timeout for websocket blocking write operation is set to infinity so if a client never respons with TCP acknowledgement, the tread gets blocked (https://github.com/eclipse/jetty.project/issues/272). So if you are sending messages in order, using one thread, and it gets blocked, your whole server just stops working. This clearly limits the capabilities of Spring's websocket applications.  **Solution**  Implement an improved version of Executor channel that only allows next message for a session to be propagated when the previous message has been sent. This also allows to detect slow clients and cut these off based on some policy.   ---  1 votes, 2 watchers","open","in: web,","spring-projects-issues","2017-05-08T11:07:45Z","2019-01-11T17:09:53Z"
"","20086","Support nonblocking writing to Jetty Websocket with possibility to assign callback [SPR-15527]","**[Askar Ibragimov](https://jira.spring.io/secure/ViewProfile.jspa?name=askaribragimov)** opened **[SPR-15527](https://jira.spring.io/browse/SPR-15527?redirect=false)** and commented  Jetty websocket server has two ways to send messages:  * blocking Write http://download.eclipse.org/jetty/stable-9/apidocs/org/eclipse/jetty/websocket/api/RemoteEndpoint.html#sendBytes-java.nio.ByteBuffer- * non-blocking Write http://download.eclipse.org/jetty/stable-9/apidocs/org/eclipse/jetty/websocket/api/RemoteEndpoint.html#sendBytes-java.nio.ByteBuffer-org.eclipse.jetty.websocket.api.WriteCallback- and http://download.eclipse.org/jetty/stable-9/apidocs/org/eclipse/jetty/websocket/api/RemoteEndpoint.html#sendBytesByFuture-java.nio.ByteBuffer-  Presently Spring Websocket uses blocking write in Jetty adapter. Which means that the message engine of Spring (ExecutorSubscribableChannel) has to have many threads and a thread remains parked till client acknowledges the reception of message.  **There are few issues with this approach** * If client never acknowledges the reception on TCP level, the thread (from TaskExecutorChannel's threadpool) remains blocked. Actually due to a very funny decision of Jetty engineers to not set a timeout on these connections, so the block is never lifted (https://github.com/eclipse/jetty.project/issues/272). In plain language, any Spring+Jetty app is exposed to a DDOS attack. * This is a bad utilization of threads. I might want to write a logic that re-uses the thread for something else and just get notified via callback when web socket processed the message. This would allow me to have smaller thread pools and truly high-load-ready nonblocking architecture.  **Suggested improvement** Permit in Spring usage of non-blockig websocket write with possibility to expose respective callback or future on upper level. Then custom or new ExecutorChannel implementation may use these callbacks to smartly utilize smaller number of threads and do not have blocked threads.  Useful contribution from Jetty people (caveats of using non blocking API of Jetty) http://stackoverflow.com/questions/43257736/make-websocket-sending-non-blocking  ---  **Issue Links:** - #18180 Jetty - use Async Send like Atmosphere does - #18671 Expose asynchronous message sending in WebSocketSession  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1b0e95d7d82435d7c532b597eab7cf86265fdbe1  1 votes, 3 watchers","closed","status: superseded,","spring-projects-issues","2017-05-08T10:47:03Z","2019-11-15T12:58:51Z"
"","19731","Spring loaded runtime exception [SPR-15165]","**[Ashish Singh Dev](https://jira.spring.io/secure/ViewProfile.jspa?name=ashishsinghdev)** opened **[SPR-15165](https://jira.spring.io/browse/SPR-15165?redirect=false)** and commented  Unable to deploy application in pivotal server using STS. Here is the stacktrace for the same.  java.lang.RuntimeException: Reloading agent exited via exception, please raise a jira at org.springsource.loaded.agent.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:110) at sun.instrument.TransformerManager.transform(TransformerManager.java:188) at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:428) at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:763) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) at org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:2541) at org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:858) at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1301) at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1166) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:114) at sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:125) at sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:49) at sun.reflect.annotation.AnnotationParser.parseSig(AnnotationParser.java:439) at sun.reflect.annotation.AnnotationParser.parseClassValue(AnnotationParser.java:420) at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:724) at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:531) at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:355) at sun.reflect.annotation.AnnotationParser.parseAnnotation2(AnnotationParser.java:286) at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:120) at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:72) at java.lang.Class.createAnnotationData(Class.java:3521) at java.lang.Class.annotationData(Class.java:3510) at java.lang.Class.getAnnotations(Class.java:3446) at org.springsource.loaded.ri.ReflectiveInterceptor.jlClassGetAnnotations(ReflectiveInterceptor.java:275) at org.springframework.core.type.StandardAnnotationMetadata.\(StandardAnnotationMetadata.java:68) at org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition.\(AnnotatedGenericBeanDefinition.java:56) at org.springframework.context.annotation.AnnotatedBeanDefinitionReader.registerBean(AnnotatedBeanDefinitionReader.java:137) at org.springframework.context.annotation.AnnotatedBeanDefinitionReader.registerBean(AnnotatedBeanDefinitionReader.java:127) at org.springframework.context.annotation.AnnotatedBeanDefinitionReader.register(AnnotatedBeanDefinitionReader.java:122) at org.springframework.web.context.support.AnnotationConfigWebApplicationContext.loadBeanDefinitions(AnnotationConfigWebApplicationContext.java:210) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129) at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:612) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:513) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4840) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5303) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:587) at org.apache.catalina.startup.HostConfig$DeployDescriptor.run(HostConfig.java:1798) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) Caused by: org.springsource.loaded.UnableToLoadClassException: Unable to find data for class 'com/turningcloud/cc/commons/config/CloudConnectAbstractMongoConfig' at org.springsource.loaded.Utils.loadSlashedClassAsBytes(Utils.java:804) at org.springsource.loaded.TypeRegistry.getDescriptorFor(TypeRegistry.java:329) at org.springsource.loaded.TypeDescriptorExtractor$ExtractionVisitor.getTypeDescriptorFor(TypeDescriptorExtractor.java:139) at org.springsource.loaded.TypeDescriptorExtractor$ExtractionVisitor.findTypeDescriptor(TypeDescriptorExtractor.java:155) at org.springsource.loaded.TypeDescriptorExtractor$ExtractionVisitor.walkHierarchyForCatchersAndSuperDispatchers(TypeDescriptorExtractor.java:168) at org.springsource.loaded.TypeDescriptorExtractor$ExtractionVisitor.computeCatchersAndSuperdispatchers(TypeDescriptorExtractor.java:237) at org.springsource.loaded.TypeDescriptorExtractor$ExtractionVisitor.getTypeDescriptor(TypeDescriptorExtractor.java:94) at org.springsource.loaded.TypeDescriptorExtractor.extract(TypeDescriptorExtractor.java:52) at org.springsource.loaded.TypeRegistry.addType(TypeRegistry.java:1090) at org.springsource.loaded.agent.SpringLoadedPreProcessor.preProcess(SpringLoadedPreProcessor.java:335) at org.springsource.loaded.agent.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:107) ... 51 more 13:22:30.948 [localhost-startStop-1] ERROR o.s.web.context.ContextLoader - Context initialization failed java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:724) at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:531) at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:355) at sun.reflect.annotation.AnnotationParser.parseAnnotation2(AnnotationParser.java:286) at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:120) at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:72) at java.lang.Class.createAnnotationData(Class.java:3521) at java.lang.Class.annotationData(Class.java:3510) at java.lang.Class.getAnnotations(Class.java:3446) at org.springsource.loaded.ri.ReflectiveInterceptor.jlClassGetAnnotations(ReflectiveInterceptor.java:275) at org.springframework.core.type.StandardAnnotationMetadata.\(StandardAnnotationMetadata.java:68) at org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition.\(AnnotatedGenericBeanDefinition.java:56) at org.springframework.context.annotation.AnnotatedBeanDefinitionReader.registerBean(AnnotatedBeanDefinitionReader.java:137) at org.springframework.context.annotation.AnnotatedBeanDefinitionReader.registerBean(AnnotatedBeanDefinitionReader.java:127) at org.springframework.context.annotation.AnnotatedBeanDefinitionReader.register(AnnotatedBeanDefinitionReader.java:122) at org.springframework.web.context.support.AnnotationConfigWebApplicationContext.loadBeanDefinitions(AnnotationConfigWebApplicationContext.java:210) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129) at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:612) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:513) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4840) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5303) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:587) at org.apache.catalina.startup.HostConfig$DeployDescriptor.run(HostConfig.java:1798) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) 13:22:30.977 [localhost-startStop-1] INFO  o.s.w.c.s.AnnotationConfigWebApplicationContext - Closing Root WebApplicationContext: startup date [Thu Jan 19 13:22:29 IST 2017]; root of context hierarchy 13:22:31.011 [localhost-startStop-1] WARN  o.s.w.c.s.AnnotationConfigWebApplicationContext - Exception thrown from LifecycleProcessor on context close java.lang.IllegalStateException: LifecycleProcessor not initialized - call 'refresh' before invoking lifecycle methods via the context: Root WebApplicationContext: startup date [Thu Jan 19 13:22:29 IST 2017]; root of context hierarchy at org.springframework.context.support.AbstractApplicationContext.getLifecycleProcessor(AbstractApplicationContext.java:416) at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:997) at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:956) at org.springframework.web.context.ContextLoader.closeWebApplicationContext(ContextLoader.java:581) at org.springframework.web.context.ContextLoaderListener.contextDestroyed(ContextLoaderListener.java:116) at org.apache.catalina.core.StandardContext.listenerStop(StandardContext.java:4887) at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java:5526) at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:224) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:159) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:587) at org.apache.catalina.startup.HostConfig$DeployDescriptor.run(HostConfig.java:1798) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) Jan 19, 2017 1:22:31 PM org.apache.catalina.startup.Catalina start INFO: Server startup in 25304 ms   ---  **Affects:** 4.3.3","closed","status: invalid,","spring-projects-issues","2017-01-19T08:00:45Z","2019-01-12T05:21:22Z"
"","19945","Spring JDBC not correctly processing Postgresql ?| and ?& operator [SPR-15382]","**[Artur Geraschenko](https://jira.spring.io/secure/ViewProfile.jspa?name=arturgspb)** opened **[SPR-15382](https://jira.spring.io/browse/SPR-15382?redirect=false)** and commented  Postgresql has many functional operators such as ?| and ?& (for example https://www.postgresql.org/docs/9.5/static/functions-json.html).  Spring JDBC processing for this case is not correct. When running the following SQL:  ``` select '[""3"", ""11""]'::jsonb ?| '{1,3,11,12,17}'::text[] ```  ... I see exceptions like this:  ``` class org.springframework.dao.InvalidDataAccessApiUsageException SQL [select '[""3"", ""11""]'::jsonb ?| '{1,3,11,12,17}'::text[]]: given 1 parameters but expected 0 ```  If I use placeholders I see:  ``` class org.springframework.dao.InvalidDataAccessApiUsageException Not allowed to mix named and traditional ? placeholders. You have 1 named parameter(s) and 1 traditional placeholder(s) in statement:  ... ```  ---  **Affects:** 4.3.7  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1366  **Issue Links:** - #18159 Spring JDBC not correctly processing Postgresql ?-contained operator - #19896 GenericCallMetaDataProvider should not treat 'NULLABLE' column as boolean (for compatibility with latest Postgres driver) - #21054 Spring JDBC not correctly processing Postgresql ? operator","closed","type: enhancement,","spring-projects-issues","2017-03-27T08:28:05Z","2019-01-14T04:35:50Z"
"","20277","org.apache.tomcat.websocket.WsSession.requestUri can be null [SPR-15721]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-15721](https://jira.spring.io/browse/SPR-15721?redirect=false)** and commented  The recent change to the `StandardWebSocketSession` via #20276, particularly the code:  ```java @Override public URI getUri() { 	Assert.state(this.uri != null, ""WebSocket session is not yet initialized""); 	return this.uri; } ```  Produces the problem on the client side when we have, according `org.apache.tomcat.websocket.WsSession` JavaDocs:  ```java * @param requestUri           The URI used to connect to this endpoint or *                             null is this is a client session ```  Therefore that `Assert` has to be removed.  At the same time I'm not pretty sure how we may have it like:  ```java @Nullable private URI uri; ```  and say that it can't be `null` in the `getUri()`.  Thanks  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20276 Extend null-safety to field level  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9afce23845e043c57cf6fef425963fb26bc4f586","closed","type: bug,","spring-projects-issues","2017-06-30T16:23:24Z","2019-01-11T16:11:44Z"
"","19827","MessageHeaderAccessor's MutableMessageHeaders should be serializable [SPR-15262]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-15262](https://jira.spring.io/browse/SPR-15262?redirect=false)** and commented  The test-case to play:  ```java @Test public void serializeMutableHeaders() throws Exception { 	Map headers = new HashMap(); 	headers.put(""foo"", ""bar"");  	Message message = new GenericMessage(""test"", headers);  	MessageHeaderAccessor mutableAccessor = MessageHeaderAccessor.getMutableAccessor(message); 	mutableAccessor.setContentType(MimeType.valueOf(""text/plain""));  	message = new GenericMessage(message.getPayload(), mutableAccessor.getMessageHeaders());  	Message output = (Message) serializeAndDeserialize(message); 	assertEquals(""test"", output.getPayload()); 	assertEquals(""bar"", output.getHeaders().get(""foo"")); 	assertNotNull(output.getHeaders().get(MessageHeaders.CONTENT_TYPE)); }  private static Object serializeAndDeserialize(Object object) throws Exception { 	ByteArrayOutputStream baos = new ByteArrayOutputStream(); 	ObjectOutputStream out = new ObjectOutputStream(baos); 	out.writeObject(object); 	out.close(); 	ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray()); 	ObjectInputStream in = new ObjectInputStream(bais); 	Object result = in.readObject(); 	in.close(); 	return result; } ```  Which ends up with the error:  ``` java.io.NotSerializableException: org.springframework.messaging.support.MessageHeaderAccessor  	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1184) 	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548) 	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509) 	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) 	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) 	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548) 	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509) 	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) 	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) 	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348) 	at org.springframework.integration.message.MessageHeadersTests.serializeAndDeserialize(MessageHeadersTests.java:169) 	at org.springframework.integration.message.MessageHeadersTests.serializeMutableHeaders(MessageHeadersTests.java:160) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ```  The real use-case is here: https://github.com/spring-cloud/spring-cloud-sleuth/blob/master/spring-cloud-sleuth-core/src/main/java/org/springframework/cloud/sleuth/instrument/messaging/TraceChannelInterceptor.java#L85  The root cause is with an implicit property for outer class instance reference, which isn't `Serializable`.  I propose solution as make this `MutableMessageHeaders` `static` and provide an outer instance as an explicit property but with the `transient` modifier.  Although it might be much better do not expose this inner class to the user altogether...  ---  **Affects:** 4.2.9, 4.3.6, 5.0 M4  **Reference URL:** http://stackoverflow.com/questions/42277170/messagedeliveryexception-thrown-when-using-amqp-backed-channel-with-brixton-sr7  **Issue Links:** - #16094 Support Mutable Messages with optional ID and timestamp headers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/74bdcd8ed4553a8b36f7ae44000bd887089118d6, https://github.com/spring-projects/spring-framework/commit/9834c42b5ceb9c0cf2e2f3045e7ddf4096935ea1","closed","type: enhancement,","spring-projects-issues","2017-02-16T19:26:01Z","2019-01-11T14:28:20Z"
"","19752","InvocableHandlerMethod should call GenericTypeResolver with getBeanType() and only once [SPR-15186]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-15186](https://jira.spring.io/browse/SPR-15186?redirect=false)** and commented  The code to review:  ``` public Object invoke(Message message, Object... providedArgs) throws Exception { 	Object[] args = getMethodArgumentValues(message, providedArgs);        .... }  private Object[] getMethodArgumentValues(Message message, Object... providedArgs) throws Exception { 		MethodParameter[] parameters = getMethodParameters(); 		Object[] args = new Object[parameters.length]; 		for (int i = 0; i < parameters.length; i++) { 			MethodParameter parameter = parameters[i]; 			parameter.initParameterNameDiscovery(this.parameterNameDiscoverer); 			GenericTypeResolver.resolveParameterType(parameter, getBean().getClass());             ... } ```  Looks like we always call that `GenericTypeResolver.resolveParameterType()` for the same reason and for the same arguments.  That could be done directly in the `initMethodParameters()`, which is called from the constructor.  Plus we should keep in mind that `getBean()` not always returns target object. There is `beanName`-based constructor. Consider to switch to the `getBeanType()`.  We have an interesting observation in Spring Integration when this `InvocableHandlerMethod` approach is [slower than Compiled SpEL](https://github.com/spring-projects/spring-integration/pull/2037/files#r97658134), but that is different story...  Plus it would be great to reconsider properties and accessors visibility in the `InvocableHandlerMethod` and `DefaultMessageHandlerMethodFactory`. Right now they are not good for [extension](https://gist.github.com/artembilan/25901ae57219002ceb39aee68126d61c)...  Thanks  ---  **Affects:** 4.3.5  **Issue Links:** - #19705 org.springframework.messaging.handler.invocation.InvocableHandlerMethod should not mention ""controller""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8038fb9c8b211278e0ce1c8e20f43743dff869ce, https://github.com/spring-projects/spring-framework/commit/a98a61852f361ba4b27f7609428df91432f06e72","closed","type: bug,","spring-projects-issues","2017-01-24T23:57:48Z","2019-01-11T14:25:53Z"
"","19747","MockMvcClientHttpRequestFactory should implement AsyncClientHttpRequestFactory as well [SPR-15181]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-15181](https://jira.spring.io/browse/SPR-15181?redirect=false)** and commented  The use-case is like:  ```java AsyncRestTemplate asyncRestTemplate = new AsyncRestTemplate(new MockMvcClientHttpRequestFactory(this.mockMvc));  new DirectFieldAccessor(this.serviceAsyncGatewayHandler) 		.setPropertyValue(""asyncRestTemplate"", asyncRestTemplate);  		this.mockMvc.perform(...); ```  To check the component based on the `AsyncRestTemplate` against some MVC environment.  But `MockMvcClientHttpRequestFactory` doesn't implement `AsyncClientHttpRequestFactory` and looks like there is no any other alternative unless home-cooked solution, for example:  ```java private final class MockMvcAsyncClientHttpRequestFactory extends MockMvcClientHttpRequestFactory 		implements AsyncClientHttpRequestFactory {  	MockMvcAsyncClientHttpRequestFactory(MockMvc mockMvc) { 		super(mockMvc); 	}  	@Override 	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException { 		final ClientHttpRequest syncDelegate = createRequest(uri, httpMethod); 		return new MockAsyncClientHttpRequest(httpMethod, uri) {  			@Override 			public HttpHeaders getHeaders() { 				return syncDelegate.getHeaders(); 			}  			@Override 			public OutputStream getBody() throws IOException { 				return syncDelegate.getBody(); 			}  			@Override 			protected ClientHttpResponse executeInternal() throws IOException { 				return syncDelegate.execute(); 			}  		}; 	}  } ```  Not sure that it will work for all use-case, but at least it meets my requirements even with the Basic Authentication header.  For out-of-the-box solution I suggest this modification to the `MockMvcClientHttpRequestFactory`:  ```java public class MockMvcClientHttpRequestFactory implements ClientHttpRequestFactory, AsyncClientHttpRequestFactory {  		private final MockMvc mockMvc;   		public MockMvcClientHttpRequestFactory(MockMvc mockMvc) { 			Assert.notNull(mockMvc, ""MockMvc must not be null""); 			this.mockMvc = mockMvc; 		}   		@Override 		public ClientHttpRequest createRequest(final URI uri, final HttpMethod httpMethod) throws IOException { 			return new MockClientHttpRequest(httpMethod, uri) {  				@Override 				public ClientHttpResponse executeInternal() throws IOException { 					return doExecute(httpMethod, uri.toString(), getHeaders(), getBodyAsBytes()); 				}  			}; 		}  		@Override 		public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException { 			return new MockAsyncClientHttpRequest(httpMethod, uri) {  				@Override 				protected ClientHttpResponse executeInternal() throws IOException { 					return doExecute(httpMethod, uri.toString(), getHeaders(), getBodyAsBytes()); 				}  			};  		}  		private ClientHttpResponse doExecute(HttpMethod httpMethod, String uri, HttpHeaders httpHeaders, byte[] body) { 			try { 				MockHttpServletRequestBuilder requestBuilder = request(httpMethod, uri); 				requestBuilder.content(body); 				requestBuilder.headers(httpHeaders); 				MvcResult mvcResult = MockMvcClientHttpRequestFactory.this.mockMvc.perform(requestBuilder).andReturn(); 				MockHttpServletResponse servletResponse = mvcResult.getResponse(); 				HttpStatus status = HttpStatus.valueOf(servletResponse.getStatus()); 				byte[] reply = servletResponse.getContentAsByteArray(); 				HttpHeaders headers = getResponseHeaders(servletResponse); 				MockClientHttpResponse clientResponse = new MockClientHttpResponse(reply, status); 				clientResponse.getHeaders().putAll(headers); 				return clientResponse; 			} 			catch (Exception ex) { 				byte[] reply = ex.toString().getBytes(StandardCharsets.UTF_8); 				return new MockClientHttpResponse(reply, HttpStatus.INTERNAL_SERVER_ERROR); 			} 		}  		private HttpHeaders getResponseHeaders(MockHttpServletResponse response) { 			HttpHeaders headers = new HttpHeaders(); 			for (String name : response.getHeaderNames()) { 				List values = response.getHeaders(name); 				for (String value : values) { 					headers.add(name, value); 				} 			} 			return headers; 		}  	} ```  Would be glad to see the fix in the `5.0`, we have a PR in Spring Integration which now doesn't use `MockMvc` because of this limitation.  Thanks   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4da4f2be315e92a10da76a90ef434b0bb3c41d60","closed","type: enhancement,","spring-projects-issues","2017-01-24T03:20:48Z","2017-05-08T08:41:48Z"
"","19717","HeaderMethodArgumentResolver doesn't resolve Optional.empty() for non-existing header [SPR-15151]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-15151](https://jira.spring.io/browse/SPR-15151?redirect=false)** and commented  The test-case to reproduce:  ```java @Test public void resolveNullHeaderToOptional() throws Exception { 	class Foo {  		public void optionalHeader(@Header(""foo"") Optional foo) {  		}  	}  	GenericApplicationContext cxt = new GenericApplicationContext(); 	cxt.refresh();  	HeaderMethodArgumentResolver resolver = new HeaderMethodArgumentResolver(new DefaultConversionService(), 			cxt.getBeanFactory());   	Method method = ReflectionUtils.findMethod(Foo.class, ""optionalHeader"", (Class[]) null); 	MethodParameter optionalParameter = new SynthesizingMethodParameter(method, 0);  	Message message = MessageBuilder.withPayload(""foo"") //				.setHeader(""foo"", ""bar"") 			.build(); 	Object result = resolver.resolveArgument(optionalParameter, message); 	assertEquals(Optional.empty(), result); } ```  The ""guilty"" code is here in the `AbstractNamedValueMethodArgumentResolver`:  ```java if (!ClassUtils.isAssignableValue(parameter.getParameterType(), arg)) { 	arg = this.conversionService.convert(arg, TypeDescriptor.forObject(arg), new TypeDescriptor(parameter)); } ```  Meanwhile `org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver` delegates to the `ConversionService` independently of the types compatibility:  ```java try { 	arg = binder.convertIfNecessary(arg, parameter.getParameterType(), parameter); } catch (ConversionNotSupportedException ex) { ```  The here is like currently Spring Integration relies on the SpEL method invocation and we can't properly move to the `InvocableHandlerMethod` foundation, because of missing conversions.  I guess I can come up as a workaround with something like `OptionalHeaderMethodArgumentResolver` implementation, but would be great to have a fix in the Core as well.  Thanks.   ---  **Affects:** 4.3.5","closed","type: bug,","spring-projects-issues","2017-01-17T02:39:08Z","2017-01-25T14:18:14Z"
"","19705","org.springframework.messaging.handler.invocation.InvocableHandlerMethod should not mention ""controller"" [SPR-15139]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-15139](https://jira.spring.io/browse/SPR-15139?redirect=false)** and commented  I understand that `org.springframework.messaging.handler.invocation.InvocableHandlerMethod` has been evolved from the `org.springframework.web.method.suppor.InvocableHandlerMethod`, but it really does nothing about `@Controller`.  Consider to revise all the top level logging messages do not mention `controller` word. Let's say just `target` (or `service`) is enough!  Otherwise it is confusing a bit when an exception happens.  In addition it would be great to throw something like `MethodArgumentResolutionException` in the case:  ```java if (args[i] == null) { 	String msg = getArgumentResolutionErrorMessage(""No suitable resolver for argument"", i); 	throw new IllegalStateException(msg); } ```  Instead of that `IllegalStateException`.  In Spring Integration we have a use-case when we would like to fallback to SpEL method invocation if `InvocableHandlerMethod` fails with arguments resolution.  Right, there is no that generic `MethodArgumentResolutionException`, only `AbstractMethodArgumentResolutionException` hierarchy, but what does stop us to improve that part?  Thanks  ---  **Affects:** 4.3.5, 5.0 M4  **Issue Links:** - #19752 InvocableHandlerMethod should call GenericTypeResolver with getBeanType() and only once","closed","type: enhancement,","spring-projects-issues","2017-01-13T19:28:33Z","2019-01-11T15:32:58Z"
"","20349","WebClient fails on empty JSON array response [SPR-15794]","**[Arnaud Cogoluègnes](https://jira.spring.io/secure/ViewProfile.jspa?name=acogoluegnes@gmail.com)** opened **[SPR-15794](https://jira.spring.io/browse/SPR-15794?redirect=false)** and commented  Failure is `org.springframework.core.codec.DecodingException: JSON decoding error: No content to map due to end-of-input`.  ---  **Affects:** 5.0 RC2  **Issue Links:** - #19097 Leverage Jackson non-blocking JSON parsing (and remove netty-buffer dependency)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/c55a3c7e0eeae92bed0413c41c8f57ed292964a9, https://github.com/spring-projects/spring-framework-issues/commit/bd1edbc63cef87da6c9254c9750c0c725d9c9adc","closed","type: bug,","spring-projects-issues","2017-07-19T09:48:23Z","2019-01-11T16:23:11Z"
"","20381","Remove BodyInserters.fromServerSentEvent variants [SPR-15826]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-15826](https://jira.spring.io/browse/SPR-15826?redirect=false)** and commented  Removed superfluous `fromServerSentEvent` variants from `BodyInserters`, as their functionality can also be obtained by passing a stream of strings or POJOs (to be encoded as JSON) to `fromPublisher(Publisher, Class)`, and specifying a `text/event-stream` Content-Type.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0b3ea405ab8a93610286c1de1a393c3fa9cbe071","closed","type: task,","spring-projects-issues","2017-07-27T15:03:34Z","2017-09-11T12:09:49Z"
"","20137","HandlerStrategies should use Lists instead of Streams [SPR-15578]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-15578](https://jira.spring.io/browse/SPR-15578?redirect=false)** and commented  As the strategies exposed through HandlerStrategies (and related Contexts) have an ordering, we should express that through a `List`, rather than a `Supplier`.  ---  **Issue Links:** - #20824 Let netty webclient optionally follow redirects  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/31d1e26c95ebaf179a20ffe9b1328a21857954c3","closed","type: enhancement,","spring-projects-issues","2017-05-23T13:25:23Z","2019-01-11T17:05:34Z"
"","20095","Revisit DispatcherHandler integration for RouterFunctions [SPR-15536]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-15536](https://jira.spring.io/browse/SPR-15536?redirect=false)** and commented  Currently, a `RouterFunctions.toHandlerMapping` creates a `HandlerMapping` aimed at integrating with the `DispatcherHandler`, perhaps even in combination with `@Controllers`. The downside of this approach is that it requires the user to explicitly specify the router functions that need to be exposed, and manually integrate it in the `DispatcherHandler`.  The aim of this issue is to improve that experience, possibly to enable `RouterFunction` support automatically through `@EnableWebFlux`.  ---  **Issue Links:** - #20261 CORS Options request forbidden with Webflux - #19968 Can't use RouterFunction and RestController together  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/01e3561db91a06979d9fede8bfaa02519360d6a7","closed","type: enhancement,","spring-projects-issues","2017-05-11T12:28:42Z","2019-01-11T17:09:27Z"
"","20090","Polish PathPattern parser [SPR-15531]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-15531](https://jira.spring.io/browse/SPR-15531?redirect=false)** and commented  We should polish `PathPattern` and related classes so that they conform to Spring's code style, and also perform some other refactorings:  * Move `PathRemainingMatchInfo` into `PathPattern` * Reduce the amount of public classes in `org.springframework.web.util.patterns`. * Rename the plural `patterns` in the package name to `pattern`?  ---  **Issue Links:** - #19112 HTTP request pattern matching refinements  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/67881a57262c98fee38eec47452afd8f1e4347fa","closed","type: task,","spring-projects-issues","2017-05-10T07:48:35Z","2019-01-11T17:08:51Z"
"","20077","Support WebFilter in RouterFunctions.toHttpHandler [SPR-15518]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-15518](https://jira.spring.io/browse/SPR-15518?redirect=false)** and commented  We should support `WebFilters` in the HttpWebHandlerAdapter returned from `RouterFunctions.toHttpHandler`. WebFilters should probably be configured through the HandlerStrategies.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f4cf55cb2b189d0071eff6834a3f7080ce0b000a","closed","type: enhancement,","spring-projects-issues","2017-05-05T12:55:06Z","2017-06-14T10:12:18Z"
"","20046","Revisit handling of 4xx and 5xx status codes in WebClient [SPR-15486]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-15486](https://jira.spring.io/browse/SPR-15486?redirect=false)** and commented  Currently, we throw a `WebClientException` for 4xx and 5xx status codes in `ClientResponse.bodyToMono(Class)` and `ClientResponse.bodyToFlux(Class)` (but not `ClientResponse.body(BodyExtractor)`.  The underlying thought here was that the response format of a 4xx or 5xx error typically does not take the same form as a ""regular"" 2xx response. Now that we have the `ResponseSpec` in `WebClient`, let's revisit this handling of 4xx and 5xx status codes on the client side.  I think the rule to throwing an exception should be simple: **if there is no way for the user to get the response status code, then a `WebClientException` should be returned. If there is a way to get to the status code, then we should not return an exception**.  In our current WebClient, this rule would bring the following changes:  1. `WebClient.ResponseSpec.bodyToMono` and `bodyToFlux` should return `WebClientException` when the response status code is 4xx or 5xx. 2. `WebClient.ResponseSpec.bodyToEntity` and `bodyToEntityList` should not return an exception in these cases, because you can get access to the status code through `ResponseEntity.getStatusCode()`. 3. `ClientResponse.bodyToMono` and `bodyToFlux` should not return an exception, as the `ClientResponse` exposes the response status code through `statusCode()`.  All other `WebClient/ClientResponse` methods should keep their current behaviour.  ---  **Issue Links:** - #20295 ResponseSpec#toEntity(...) fails when response status code is 5xx - #19860 Simplify access to request/response object in WebClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a8c99c9ce6773a1b192d4b60969241b2370ac4f, https://github.com/spring-projects/spring-framework/commit/0e7d6fc4d14145e80b61ca9d214da3ebe7a54310  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2017-04-26T13:13:50Z","2019-01-11T16:36:57Z"
"","20021","Add body(Object) method to ServerResponse.BodyBuilder [SPR-15461]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-15461](https://jira.spring.io/browse/SPR-15461?redirect=false)** and commented  We should add a `ServerResponse.BodyBuilder.body(Object)` method, to make it easier for users to set the response body to a non-Publisher type. Currently, this task can be accomplished via `body(BodyInserters.fromObject(Object))`, but because this method requires a static import of `BodyInserters`, the discoverability of it is not as high as `body(Publisher, Class))`. As such, users will go this route:  ``` return ServerResponse.ok().body(Mono.just(""Hello World""), String.class); ```  instead of the more elegant:  ``` return ServerResponse.ok().body(fromObject(""Hello World"")); ```  However, adding the method has a serious consequence: there is the potential for accidental method overloading between a the new `Object` method and the existing `Publisher` `body` method. As a result, users will accidentally write a response with the publisher **itself**, rather than  its contents:  ``` Flux flux = ... return ServerResponse.ok().body(flux); // Whoops, should have been body(flux, String.class); ```  Of course, we cannot automatically call the correct method, because of the lacking `Class` argument. There are, however, a couple of other ways we can resolve this.  1. Give the method a different name, such as `bodyFromObject`. If we go this route, we should be consistent and also rename the existing `Publisher`-based `body` method to `bodyFromPublisher`. As such, it has serious consequences for the brevity and UX of the API. 2. Perform a runtime-check to see whether the `Object` passed to body is a `Publisher`, and throw an exception if so, warning the user of the error of their ways. 3. Do not add the method. Since this a Reactive web framework, the case can be made that returning non-reactive types as a response is not a main design goal. Returning a String makes for a great demo, but might not be as necessary for real-life reactive scenarios.  ---  **Issue Links:** - #20027 ServerResponse.BodyBuilder.body(Object) shadows body(Publisher) in Kotlin ServerResponseExtensions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/30f61e0c0709c66c9171b0be0210555447a8f55e","closed","type: enhancement,","spring-projects-issues","2017-04-19T12:16:43Z","2019-01-14T04:35:39Z"
"","19996","Use ClientCodecConfigurer in ExchangeStrategies [SPR-15435]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-15435](https://jira.spring.io/browse/SPR-15435?redirect=false)** and commented  Similar to #19977, but then for the client-side.  ---  **Issue Links:** - #19977 Use ServerCodecConfigurer in HandlerStrategies  **Referenced from:** commits https://github.com/spring-projects/spring-boot/commit/23360d11a26e833f47bf5db52892e8ecd9ce8b1a","closed","type: enhancement,","spring-projects-issues","2017-04-11T13:58:48Z","2019-01-11T16:42:08Z"
"","19980","Allow for single-pass matching in PathPattern [SPR-15419]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-15419](https://jira.spring.io/browse/SPR-15419?redirect=false)** and commented  Currently, both `PathPattern.matches(String)` and `PathPattern.getPathRemaining(String)` require an additional parsing pass to extract URI template variables (with `matchAndExtract(String))`. Moreover, dealing with a partial ""prefix"" match, like the ones matched by `getPathRemaining`, results in an [IllegalStateException](https://github.com/spring-projects/spring-framework/blob/584b290dff472d93abed673e17f4f8cc1b04be37/spring-web/src/main/java/org/springframework/web/util/patterns/PathPattern.java#L216-L216)  This should be fixed by making these methods return an ""info"" object, containing a boolean flag indicating whether the given path matched, and the template variables, as well as the remaining path (in case of `getPathRemaining`  ---  **Issue Links:** - #19873 Spring WebFlux using Kotlin with RouterDsl nested mappings not matching (_**""is depended on by""**_) - #19899 Add PathPattern method that gives remaining path given a match","closed","type: enhancement,","spring-projects-issues","2017-04-07T09:06:46Z","2019-01-11T16:42:47Z"
"","19977","Use ServerCodecConfigurer in HandlerStrategies [SPR-15415]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-15415](https://jira.spring.io/browse/SPR-15415?redirect=false)** and commented  Whether to expose ServerCodecConfigurer directly, or wrap it and expose its methods is to be decided.  ---  **Issue Links:** - #19812 Customizable Jackson ObjectMapper in WebFluxConfigurationSupport - #19996 Use ClientCodecConfigurer in ExchangeStrategies  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dc279d839bab457561caf2b5c677e53f10d06c99, https://github.com/spring-projects/spring-framework/commit/ac27dbea4bc71c233514e37a9c3a3083fb3d0433","closed","type: bug,","spring-projects-issues","2017-04-05T13:14:10Z","2019-01-11T16:44:09Z"
"","19962","Deprecate AsyncRestTemplate in favour of WebClient [SPR-15399]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-15399](https://jira.spring.io/browse/SPR-15399?redirect=false)** and commented  With the new `WebClient` introduced in Spring 5, we should deprecate `AsyncRestTemplate`, as it offers HTTP access through `Futures`, whereas the `WebClient` exposes `Mono` and `Flux`, giving a much higher-level abstraction and being less error prone.  ---  **Issue Links:** - #19860 Simplify access to request/response object in WebClient - [INT-4208](https://jira.spring.io/browse/INT-4208) Support for Reactive WebClient","closed","type: enhancement,","spring-projects-issues","2017-03-29T14:09:07Z","2019-01-11T14:41:41Z"
"","19957","Refactor WebClient to not allow request body for GET/HEAD/etc [SPR-15394]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-15394](https://jira.spring.io/browse/SPR-15394?redirect=false)** and commented  I noticed that it's currently possible in the `WebClient` to set a body for requests that should not contain one (i.e. GET, HEAD, DELETE, and OPTIONS). Similarly, it is currently possible to set a Content-Type and Content-Length for requests that should contain a body. This is a step back in terms of user experience compared to `RequestEntity`, and the old version of[`ClientRequest`](https://github.com/poutsma/spring-framework/blob/97558ab4de28b1579eafcda56c32ae832a59c1a7/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java), where this is prohibited through the API (though overridable through a general `method(HttpMethod)` method).  We should fix this, so that requests for these HTTP methods can no longer contain a body, and also not have settable Content-Type and Content-Length headers.  ---  **Affects:** 5.0 M5  **Issue Links:** - #19860 Simplify access to request/response object in WebClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/118f33aedad84e9f8a01e4db983545d18fdd1fc3","closed","type: enhancement,","spring-projects-issues","2017-03-28T12:57:15Z","2019-01-11T14:41:30Z"
"","19925","Documentation for WebFlux fn [SPR-15362]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-15362](https://jira.spring.io/browse/SPR-15362?redirect=false)** and commented  We should add reference documentation for the `RouterFunction` API.  ---  **Issue Links:** - #19715 Restructure Web Section of the documentation to include reactive support - #19923 Improve webclient and webflux documentation","closed","type: enhancement,","spring-projects-issues","2017-03-20T13:38:21Z","2019-01-11T15:01:51Z"
"","19899","Add PathPattern method that gives remaining path given a match [SPR-15336]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-15336](https://jira.spring.io/browse/SPR-15336?redirect=false)** and commented  As discussed via email, I am looking for a PathPattern method gives the remaining path after a match. Let me give a couple of examples of what I think the behaviour should be:  With the pattern ""/foo"", and the path ""/foo/bar"", the method should return ""/bar"". With pattern ""/foo*"" and path ""/foo/bar"", the result is ""/bar"". With pattern ""/*"" and path ""/foo/bar"", the result is ""/bar"". With pattern ""/{foo}"" and path ""/foo/bar"", the result is ""/bar"". With pattern ""/foo"" and path ""/bar/baz"", the result is null, or perhaps Optional.empty (i.e. no match). With pattern ""/**"" and path ""/foo/bar"", the result is """" (i.e. no remainder)  ---  **Affects:** 5.0 M5  **Issue Links:** - #19873 Spring WebFlux using Kotlin with RouterDsl nested mappings not matching (_**""is depended on by""**_) - #19980 Allow for single-pass matching in PathPattern  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e556aacceedd90947c746e0bcd03cbf6f6993b35, https://github.com/spring-projects/spring-framework/commit/584b290dff472d93abed673e17f4f8cc1b04be37","closed","type: enhancement,","spring-projects-issues","2017-03-09T11:03:43Z","2019-01-14T04:35:59Z"
"","19829","PathPatternParser matches root path against path variable [SPR-15264]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-15264](https://jira.spring.io/browse/SPR-15264?redirect=false)** and commented  The `PathPatternParser` will match the pattern ""/{foo}"" against the path ""/"". This is a regression: the `AntPathMatcher` will not match with the same parameters.  The rationale: path/URI template variables (i.e. patterns with curly braces) should be considered required, and not optional. In that sense, they cannot be considered the same as wildcard matches (i.e. ""/*"" should match the path ""/"", but ""/{foo}"" should not). If they would be optional, we could not resolve the `@PathVariable` parameters in a `@RequestMapping` method.  ---  **Affects:** 5.0 M5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d9245382112ee7923ba615222b7e6e1f7cfeda21, https://github.com/spring-projects/spring-framework/commit/f1653cc21c09ebab136f84ee723bdf3c23965dde  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2017-02-17T09:11:49Z","2019-01-13T20:30:37Z"
"","19834","Document default property converters [SPR-15269]","**[Arend v. Reinersdorff](https://jira.spring.io/secure/ViewProfile.jspa?name=arend.von.reinersdorff)** opened **[SPR-15269](https://jira.spring.io/browse/SPR-15269?redirect=false)** and commented  Spring includes by default a number of useful property converters. Ie values for the `targetType` parameter in [PropertyResolver.getProperty(String key, Class targetType)](http://docs.spring.io/spring/docs/4.3.6.RELEASE/javadoc-api/org/springframework/core/env/PropertyResolver.html#getProperty-java.lang.String-java.lang.Class-).  Unfortunately these default converters are not documented. The [best answer on Stackoverflow](http://stackoverflow.com/questions/42041331/what-property-type-converters-come-built-in-with-spring/42041652#42041652) suggests executing `ConversionService.toString()` to get a list of converters.  I was looking for documentation because I was surprised that `java.io.File` works as targetType while `java.nio.file.Path` does not. (Turns out File probably works because of the `ObjectToObjectConverter` that finds the File(String) constructor via reflection)   ---  **Affects:** 4.3.6  **Reference URL:** http://docs.spring.io/spring/docs/4.3.6.RELEASE/spring-framework-reference/html/validation.html","open","in: core,","spring-projects-issues","2017-02-19T21:04:44Z","2021-11-24T20:05:39Z"
"","20124","Plug-in org.springsource.ide.eclipse.commons.gettingstarted was unable to load class  [SPR-15565]","**[ARAVINDH RS](https://jira.spring.io/secure/ViewProfile.jspa?name=aravindhrs)** opened **[SPR-15565](https://jira.spring.io/browse/SPR-15565?redirect=false)** and commented  STS version 3.8.4 JDK 8  Getting below error in Spring Boot dashboard: Plug-in org.springsource.ide.eclipse.commons.gettingstarted was unable to load class    ---  **Affects:** 4.3.5  **Reference URL:** http://stackoverflow.com/questions/44062166/unable-to-load-springboot-dashboard  **Attachments:** - [STS.jpg](https://jira.spring.io/secure/attachment/24992/STS.jpg) (_193.62 kB_)","closed","status: invalid,","spring-projects-issues","2017-05-19T05:58:58Z","2019-01-12T05:20:52Z"
"","20294","JMS Integration with Tibco causes deadlock while using DefaultMessageListenerContainer [SPR-15738]","**[Anup Tagalpallewar](https://jira.spring.io/secure/ViewProfile.jspa?name=tanup02)** opened **[SPR-15738](https://jira.spring.io/browse/SPR-15738?redirect=false)** and commented  I am facing this issue while using Spring-jms version 4.1.6 tibjms version 6.3 (Tibco jar)  When using a DefaultMessageListenerContainer, if there is an exception on established connection we intermittently get this deadlock issue.  Please find following stack trace for more information.      ""clientResponseListener-16"" - Thread t@242  java.lang.Thread.State: BLOCKED at org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.localStop(SingleConnectionFactory.java:640) - waiting to lock  (a java.lang.Object) owned by ""TIBCO EMS TCPLink Reader (Server-999487)"" t@241   at org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.invoke(SingleConnectionFactory.java:573)   at com.sun.proxy.$Proxy54.stop(Unknown Source)   at org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.localStop(SingleConnectionFactory.java:644) - locked  (a java.lang.Object)   at org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.invoke(SingleConnectionFactory.java:577)   at com.sun.proxy.$Proxy54.close(Unknown Source)   at org.springframework.jms.connection.ConnectionFactoryUtils.releaseConnection(ConnectionFactoryUtils.java:80)   at org.springframework.jms.listener.AbstractJmsListeningContainer.refreshSharedConnection(AbstractJmsListeningContainer.java:395) - locked  (a java.lang.Object)   at org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful(DefaultMessageListenerContainer.java:909)   at org.springframework.jms.listener.DefaultMessageListenerContainer.recoverAfterListenerSetupFailure(DefaultMessageListenerContainer.java:884)   at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1055) - locked  (a java.lang.Object)   at java.lang.Thread.run(Thread.java:745)  Locked ownable synchronizers: - None    ""TIBCO EMS TCPLink Reader (Server-999487)"" - Thread t@241  java.lang.Thread.State: BLOCKED at org.springframework.jms.connection.SingleConnectionFactory$AggregatedExceptionListener.onException(SingleConnectionFactory.java:670) - waiting to lock  (a java.lang.Object) owned by ""clientResponseListener-16"" t@242   at org.springframework.jms.connection.SingleConnectionFactory$AggregatedExceptionListener.onException(SingleConnectionFactory.java:671) - locked  (a java.lang.Object)   at com.tibco.tibjms.TibjmsConnection._invokeOnExceptionCallback(TibjmsConnection.java:2054)   at com.tibco.tibjms.TibjmsConnection._onDisconnected(TibjmsConnection.java:2394)   at com.tibco.tibjms.TibjmsConnection$ServerLinkEventHandler.onEventDisconnected(TibjmsConnection.java:349)   at com.tibco.tibjms.TibjmsxLinkTcp$LinkReader.work(TibjmsxLinkTcp.java:330)   at com.tibco.tibjms.TibjmsxLinkTcp$LinkReader.run(TibjmsxLinkTcp.java:259)  Locked ownable synchronizers: - None  ---  **Affects:** 4.2.7  **Issue Links:** - #15030 Memory leak with SimpleMessageListenerContainer and ChainedExceptionListener on Single/CachingConnectionFactory - #18000 ConcurrentModificationException in SingleConnectionFactory$AggregatedExceptionListener  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6d55b3a592547fc335c73e7d071e511fea8f89b9, https://github.com/spring-projects/spring-framework/commit/a9a4d7cf78c980d143c04f55551c04dca1ae545a","closed","type: bug,","spring-projects-issues","2017-07-05T17:24:38Z","2019-01-11T16:28:00Z"
"","20085","WebJarsResourceResolver: multiple matches in case of multiple files with the same name in the same webjar [SPR-15526]","**[Antonio Nozzi](https://jira.spring.io/secure/ViewProfile.jspa?name=skarafaz@gmail.com)** opened **[SPR-15526](https://jira.spring.io/browse/SPR-15526?redirect=false)** and commented  Using WebJarAssetLocator.getFullPathExact instead of WebJarAssetLocator.getFullPath avoid multiple matches in case of multiple files with the same name in the same webjar.  This method is available since v0.29, refer to this github issue for details https://github.com/webjars/webjars-locator/issues/90   ---  **Affects:** 4.3.7  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1420, and commits https://github.com/spring-projects/spring-framework/commit/e2aa117ff9b4ec8707d40d6e1742708f49fa1473, https://github.com/spring-projects/spring-framework/commit/3d290165fb6b37544d23755f5182fac3478210f4","closed","type: bug,","spring-projects-issues","2017-05-08T09:59:09Z","2017-06-07T20:04:28Z"
"","20242","NullPointerException if cron expression is null [SPR-15683]","**[Antoine M](https://jira.spring.io/secure/ViewProfile.jspa?name=tonymanou)** opened **[SPR-15683](https://jira.spring.io/browse/SPR-15683?redirect=false)** and commented  While playing around with scheduled tasks and cron triggers, I realized that when you feed a `null` cron expression to a `CronTrigger` then a wild `NullPointerException` is thrown instead of an `IllegalArgumentException` with a message.  > When you pass a null cron expression to the constructor of `CronTrigger`, it creates a `CronSequenceGenerator` instance which calls the `parse()` method from its constructor. > Inside this method the cron expression is first tokenized by `StringUtils.tokenizeToStringArray()` (which will return null if the cron expression is null) and put into the `fields` variable. Then, if the content of `fields` is considered invalid (null or not having the right number of elements), an `IllegalArgumentException` is thrown. > But as we are using `fields.count`'s value to create the message of the exception, we get a `NullPointerException` (with no message) instead when `fields` is null.  The changes proposed in the pull request https://github.com/spring-projects/spring-framework/pull/1345 let the `parse()` method throw an `IllegalArgumentException` with a message when `fields` is null.  ---  **Affects:** 3.2.18, 4.3.9, 5.0 RC2  **Issue Links:** - #20163 Cron expression validation method in CronSequenceGenerator improved (_**""duplicates""**_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1345","closed","in: core,","spring-projects-issues","2017-06-20T08:30:12Z","2019-01-12T16:45:08Z"
"","19863","connection timeout is not working with rest template -- InterceptingClientHttpRequestFactory [SPR-15298]","**[Anil](https://jira.spring.io/secure/ViewProfile.jspa?name=ganil.89@gmail.com)** opened **[SPR-15298](https://jira.spring.io/browse/SPR-15298?redirect=false)** and commented  Hi,  My code is like this  ```java RestTemplate restClient = createRestTemplate(1);   protected RestTemplate createRestTemplate(Integer connectionTimeoutSeconds) {         RestTemplate restTemplate = createRestTemplate();         setConnectionTimeout(restTemplate, connectionTimeoutSeconds);         return restTemplate;     }      private void setConnectionTimeout(RestTemplate restClient, Integer connectionTimeoutSeconds) {         if (connectionTimeoutSeconds != null) {             int timeoutMilliseconds = connectionTimeoutSeconds * 1000;             ClientHttpRequestFactory requestFactory = restClient.getRequestFactory();             if (requestFactory instanceof HttpComponentsClientHttpRequestFactory) {                 HttpComponentsClientHttpRequestFactory httpRequestFactory = (HttpComponentsClientHttpRequestFactory) requestFactory;                 httpRequestFactory.setConnectionRequestTimeout(timeoutMilliseconds);                 httpRequestFactory.setConnectTimeout(timeoutMilliseconds);                 httpRequestFactory.setReadTimeout(timeoutMilliseconds);             } else {                 System.out.println(""Failed to set connection timeout "");             }         }     } ```  So here the Factory from RestTemplate is of type **InterceptingClientHttpRequestFactory**, due to this else part is executing and connection timeout was not set to factory   --- No further details from [SPR-15298](https://jira.spring.io/browse/SPR-15298?redirect=false)","closed","status: declined,","spring-projects-issues","2017-02-28T11:07:14Z","2019-01-12T16:33:31Z"
"","19807","URLEncoding error in combination with DeferredResult and ""%25"" character in PathVariable [SPR-15242]","**[ango](https://jira.spring.io/secure/ViewProfile.jspa?name=ango)** opened **[SPR-15242](https://jira.spring.io/browse/SPR-15242?redirect=false)** and commented  springbootVersion=1.5.1.RELEASE  There is a bug in combination with Percentage Encoding for the ""%"" character. In combination with the DeferredResult and using `@PathVariable`.  For any other legal Percentage Encoding it works fine, except for the ""%25"", i.e. ""%"" character.  Here is the code snippet:  ```java     @RequestMapping(value = ""/test/{path_variable}"", method = RequestMethod.GET)     public DeferredResult test(@PathVariable String path_variable) {         DeferredResult response = new DeferredResult();          LOG.info(""Request for {}"", path_variable);                  try {             response.setResult(""Hello World"");         }         catch (Error e) {             LOG.debug(""Error"", e);         }         catch (Exception e) {             LOG.debug(""Exception"", e);         }          return response;     } ```  The result is that it takes up to 30000ms to finish the request with an Error 500 code when using ""%25"" in the PathVariable  ``` 2017-02-09 18:21:35.881 DEBUG [Napi,cc75cc1517bcff4b,cc75cc1517bcff4b,false] 77735 --- [nio-8052-exec-2] o.s.w.c.request.async.DeferredResult     : Failed to handle existing result  java.lang.IllegalArgumentException: URLDecoder: Incomplete trailing escape (%) pattern 	at java.net.URLDecoder.decode(URLDecoder.java:187) ~[na:1.8.0_45] 	at org.apache.catalina.core.ApplicationContext.getRequestDispatcher(ApplicationContext.java:420) ~[tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.ApplicationContextFacade.getRequestDispatcher(ApplicationContextFacade.java:221) ~[tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:191) ~[tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:170) ~[tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:164) ~[tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.springframework.web.context.request.async.StandardServletAsyncWebRequest.dispatch(StandardServletAsyncWebRequest.java:123) ~[spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.context.request.async.WebAsyncManager.setConcurrentResultAndDispatch(WebAsyncManager.java:353) [spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.context.request.async.WebAsyncManager.access$200(WebAsyncManager.java:58) [spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.context.request.async.WebAsyncManager$7.handleResult(WebAsyncManager.java:416) ~[spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.context.request.async.DeferredResult.setResultHandler(DeferredResult.java:189) ~[spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.context.request.async.WebAsyncManager.startDeferredResultProcessing(WebAsyncManager.java:412) [spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.DeferredResultMethodReturnValueHandler.handleReturnValue(DeferredResultMethodReturnValueHandler.java:101) [spring-webmvc-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:81) [spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:132) [spring-webmvc-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) [spring-webmvc-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) [spring-webmvc-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) [spring-webmvc-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) [spring-webmvc-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) [spring-webmvc-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) [spring-webmvc-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:108) [spring-boot-actuator-1.5.1.RELEASE.jar:1.5.1.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) [spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) [spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.springframework.cloud.sleuth.instrument.web.TraceFilter.doFilter(TraceFilter.java:145) [spring-cloud-sleuth-core-1.1.2.RELEASE.jar:1.1.2.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) [spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:106) [spring-boot-actuator-1.5.1.RELEASE.jar:1.5.1.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:115) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE] 	at org.springframework.boot.web.support.ErrorPageFilter.access$000(ErrorPageFilter.java:59) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE] 	at org.springframework.boot.web.support.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:90) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.6.RELEASE.jar:4.3.6.RELEASE] 	at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:108) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:474) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:783) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:798) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1434) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45] 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.11.jar:8.5.11] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45] ```    --- No further details from [SPR-15242](https://jira.spring.io/browse/SPR-15242?redirect=false)","closed","status: declined,","spring-projects-issues","2017-02-09T17:17:41Z","2019-01-12T16:33:34Z"
"","20362","Follow-up: AbstractMethodError when calling validated method of MethodValidationPostProcessor is using a @Lazy validator [SPR-15807]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15807](https://jira.spring.io/browse/SPR-15807?redirect=false)** and commented  This problem was originally reported in #20188 and marked as fixed in 4.3.9. However, the problem still occurs with both 4.3.9 and 4.3.10. It can be reproduced using the sample from #20188. The failure is, I believe, unchanged from when the problem was originally reported against 4.3.8.  For reference here's the failure with 4.3.9:  ``` Exception in thread ""main"" java.lang.AbstractMethodError: org.springframework.validation.beanvalidation.CustomValidatorBean.forExecutables()Ljavax/validation/executable/ExecutableValidator; 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333) 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207) 	at com.sun.proxy.$Proxy9.forExecutables(Unknown Source) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:216) 	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:201) 	at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:119) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) 	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:673) 	at com.example.LazyValidatorProblem$SampleService$$EnhancerBySpringCGLIB$$bcae8912.doSomething() 	at com.example.LazyValidatorProblem.main(LazyValidatorProblem.java:62) ```  And with 4.3.10:  ``` Exception in thread ""main"" java.lang.AbstractMethodError: org.springframework.validation.beanvalidation.CustomValidatorBean.forExecutables()Ljavax/validation/executable/ExecutableValidator; 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333) 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207) 	at com.sun.proxy.$Proxy9.forExecutables(Unknown Source) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:216) 	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:201) 	at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:119) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) 	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:673) 	at com.example.LazyValidatorProblem$SampleService$$EnhancerBySpringCGLIB$$bcae8912.doSomething() 	at com.example.LazyValidatorProblem.main(LazyValidatorProblem.java:61) ```  ---  **Affects:** 4.3.9, 4.3.10  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/9416  **Issue Links:** - #20188 AbstractMethodError when calling validated method of MethodValidationPostProcessor is using a `@Lazy` validator - #20411 Unable to use Hibernate Validator 4.3.2 if Bean Validation API 1.1 is on the classpath  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/30d67f7c4232a99d7c0317f8386761e0468cb7dc, https://github.com/spring-projects/spring-framework/commit/d1f42ac729e9a2cacf087c65847a5c8aff6eceb2","closed","in: core,","spring-projects-issues","2017-07-21T13:49:14Z","2019-01-13T05:15:19Z"
"","20344","Support range requests for Spring MVC request mapped methods that return a Resource [SPR-15789]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15789](https://jira.spring.io/browse/SPR-15789?redirect=false)** and commented  I've just been pleased to learn that WebFlux automatically supports range requests to a request mapping method that returns a `Resource`:  ```java @RequestMapping(path = ""/"") public Resource test() { 	return new ByteArrayResource(new byte[] {'a', 'b', 'c', 'd', 'e', 'f'}); } ```  ``` $ curl localhost:8080 -H ""Range: bytes=2-4"" -i HTTP/1.1 206 Partial Content Accept-Ranges: bytes Content-Type: application/octet-stream Content-Range: bytes 2-4/6 Content-Length: 3  cde ```  Unfortunately, if the same controller is implemented using Spring MVC, the full resource content is returned:  ``` $ curl localhost:8080 -H ""Range: bytes=2-4"" -i HTTP/1.1 200 Content-Type: application/json Content-Length: 6 Date: Tue, 18 Jul 2017 13:03:31 GMT  abcdef ```  It would be beneficial to Boot 2.0's new actuator endpoint infrastructure if Spring MVC offered the same capabilities as WebFlux here.  ---  **Affects:** 5.0 RC2  **Issue Links:** - #18407 Add support for http byte-range requests for non-static resources (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/582014e944002609b562f6e4998935c06bbe6922  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2017-07-18T13:06:15Z","2020-04-04T19:05:01Z"
"","20340","Returning ResponseEntity from WebFlux controller method declared to return Object serialises entire response entity to response body [SPR-15785]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15785](https://jira.spring.io/browse/SPR-15785?redirect=false)** and commented  Consider this method on a `RestController`  ```java @RequestMapping(""/"") public Object test() { 	return new ResponseEntity(""testing"", HttpStatus.OK); } ```java   With Spring MVC the response is:  ```  testing  ```  With WebFlux the response is:  ```  {""headers"":{},""body"":""testing"",""statusCode"":""OK"",""statusCodeValue"":200}  ```  I'd expect to get the Spring MVC response in both cases. ```  ---  **Affects:** 5.0 RC2  **Issue Links:** - #20287 WebFlux can't serialize ""Object"" return types as response body  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/56903581d9e88894b2103208b4028df48e414b47","closed","type: bug,","spring-projects-issues","2017-07-17T19:42:36Z","2019-01-11T16:24:55Z"
"","20313","Improve handling of requests with an empty body and no content type to match Spring MVC [SPR-15758]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15758](https://jira.spring.io/browse/SPR-15758?redirect=false)** and commented  Using Spring MVC, the request body for a request with an empty body and no content type can be handled by a controller method that uses `@RequestBody(required = false)`. As discussed with Rossen, this is thanks to the `noContentType` flag in `AbstractMessageConverterMethodArgumentResolver`. No such flag exists in WebFlux and, as a result, a request with an empty body and no content type is rejected with a 415 response. Ideally, an empty body and no content type would work with both the annotation and functional programming models supported by WebFlux.  For the annotation model, it would look like this:  ```java @PostMapping(""/testing"") public String testing(@RequestBody(required = false) Map body) { 	return ""It worked: "" + body; } ```  For the functional web framework, it might look something like this:  ```java private static final ParameterizedTypeReference BODY_TYPE = new ParameterizedTypeReference() {};  // …  request.body(BodyExtractors.toMono(BODY_TYPE))     .switchIfEmpty(Mono.just(Collections.emptyMap())) ```    ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9d04c0424dff50d02dfcd3bf3786ebe9194680c8, https://github.com/spring-projects/spring-framework/commit/ed5cc27f7bf09b395af2471f62cc068afe27383f","closed","type: enhancement,","spring-projects-issues","2017-07-10T20:09:09Z","2017-07-24T07:51:14Z"
"","20257","Consider marking ConditionContext.getBeanFactory() @Nullable rather than asserting a non-null bean factory [SPR-15698]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15698](https://jira.spring.io/browse/SPR-15698?redirect=false)** and commented  It seems rather odd to allow the condition context to be created with a null registry, or one from which a bean factory cannot be obtained, and yet throw an exception from getBeanFactory() when it's null. I think `@Nullable` on getBeanFactory() might be better there.   ---  **Affects:** 5.0 RC2  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/9584  1 votes, 3 watchers","open","in: core,","spring-projects-issues","2017-06-23T20:04:42Z","2021-11-11T10:11:19Z"
"","20188","AbstractMethodError when calling validated method of MethodValidationPostProcessor is using a @Lazy validator [SPR-15629]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15629](https://jira.spring.io/browse/SPR-15629?redirect=false)** and commented  In exploring a possible fix for [this Spring Boot issue](https://github.com/spring-projects/spring-boot/issues/9416) I've hit a problem when `MethodValidationPostProcessor` is configured with a `CustomValidatorBean` that's `@Lazy`. This small sample reproduces the problem with Spring Framework 4.3.8.RELEASE and Hibernate Validator 5.3:  ```java package com.example;  import javax.validation.Validator; import javax.validation.constraints.Size;  import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Lazy; import org.springframework.validation.annotation.Validated; import org.springframework.validation.beanvalidation.CustomValidatorBean; import org.springframework.validation.beanvalidation.MethodValidationPostProcessor;  public class LazyValidatorProblem {  	@Configuration 	static class ValidatorConfiguration {  		@Bean 		public Validator customValidator() { 			return new CustomValidatorBean(); 		}  	}  	@Configuration 	static class BeanPostProcessorConfiguration {  		@Bean 		public static MethodValidationPostProcessor methodValidationPostProcessor( 				@Lazy Validator validator) { 			MethodValidationPostProcessor postProcessor = new MethodValidationPostProcessor(); 			postProcessor.setValidator(validator); 			return postProcessor; 		}  	}  	@Configuration 	static class ServiceConfiguration {  		@Bean 		public SampleService sampleService() { 			return new SampleService(); 		}  	}  	@Validated 	static class SampleService {  		public void doSomething(@Size(min = 3, max = 10) String name) {  		}  	}  	public static void main(String[] args) { 		new AnnotationConfigApplicationContext(ValidatorConfiguration.class, 				BeanPostProcessorConfiguration.class, ServiceConfiguration.class) 						.getBean(SampleService.class).doSomething(""testing""); 	}  } ```  The failure that you should see is:  ``` Exception in thread ""main"" java.lang.AbstractMethodError: org.springframework.validation.beanvalidation.CustomValidatorBean.forExecutables()Ljavax/validation/executable/ExecutableValidator; 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333) 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207) 	at com.sun.proxy.$Proxy9.forExecutables(Unknown Source) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:216) 	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:201) 	at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:119) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) 	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:673) 	at com.example.LazyValidatorProblem$SampleService$$EnhancerBySpringCGLIB$$d8a8543a.doSomething() 	at com.example.LazyValidatorProblem.main(LazyValidatorProblem.java:58) ```  This happens because `SpringValidatorAdapter` does not implement the `forExecutables` method that was added to `Validator` in Bean Validation 1.1. The problem does not occur with Spring Framework 5.0 as a result of [this commit](https://github.com/spring-projects/spring-framework/commit/54004e0d78dd92c62429999b77befbc9d9fcdb68).  ---  **Affects:** 4.3.8  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/9416  **Issue Links:** - #20120 LocalValidatorFactoryBean does not support unwrap for native ValidatorFactory - #20362 Follow-up: AbstractMethodError when calling validated method of MethodValidationPostProcessor is using a `@Lazy` validator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b7337b304eaf4d9871d44e1654f837baaaccd49f, https://github.com/spring-projects/spring-framework/commit/8330134757e90a5febdc1dbc126c51b06f72b91b, https://github.com/spring-projects/spring-framework/commit/55b0fe10271b197af65ff2a05fdc973a0432a4f9","closed","in: core,","spring-projects-issues","2017-06-06T16:27:18Z","2019-01-13T05:15:56Z"
"","20148","Provide access to the unexpanded URI template when using WebTestClient [SPR-15589]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15589](https://jira.spring.io/browse/SPR-15589?redirect=false)** and commented  Spring REST Docs allows you to document the [parameters in a template used to create a URI](http://docs.spring.io/spring-restdocs/docs/current/reference/html5/#documenting-your-api-path-parameters). For example, if the unexpanded URI was `{foo}/{bar}`, then documentation for the `foo` and `bar` parameters could be generated.  With `MockMvc`, unexpanded URI is captured using a [drop-in replacement for `MockMvcRequestBuilder`](https://github.com/spring-projects/spring-restdocs/blob/5af574a48a64a843b96bd8ad296da31ff6def7be/spring-restdocs-mockmvc/src/main/java/org/springframework/restdocs/mockmvc/RestDocumentationRequestBuilders.java) that stores the template in a request attribute. I don't think this approach isn't applicable to `WebTestClient` due to the fluent nature of its API.  FWIW, REST Assured offers [a getter on the request spec](http://www.javadoc.io/doc/io.rest-assured/rest-assured/3.0.3). That's not directly applicable to `WebTestClient` either, but I thought it may be useful background information.  ---  **Affects:** 5.0 RC1  **Issue Links:** - #21080 Need ability to access URI template in WebClient metrics/tracing instrumentation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0287a74d69032ed2762ef27e8bc4af5781bc2542","closed","type: enhancement,","spring-projects-issues","2017-05-25T18:42:01Z","2019-01-13T20:29:42Z"
"","20146","Add support to WebTestClient for consuming the ExchangeResult [SPR-15587]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15587](https://jira.spring.io/browse/SPR-15587?redirect=false)** and commented  `WebTestClient`, via `BodyContentSpec`, currently allows the body to be consumed with a `Consumer` or the result to be returned. I'd like to be able to consume the result too. Perhaps something like the following on `BodyContentSpec`:  ```java BodyContentSpec consumeAsResultWith(EntityExchangeResult consumer); ```  I do wonder if this is, perhaps, pulling `BodyContentSpec` as bit too far away from dealing with the body's content. As an alternative, could the method be added to `ResponseSpec`? It would decode the `UndecodedExchangeResult` and then pass the resulting `EntityExchangeResult` to the `Consumer`? If it did so, I'm not sure what the method would return to allow the chaining of further method calls.    ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/346d5d2fabc161e88d03d336c293d340032209d6","closed","type: enhancement,","spring-projects-issues","2017-05-24T20:29:13Z","2017-06-14T10:12:17Z"
"","20141","Poor diagnostics when Jackson cannot deserialise an application/json payload due to a missing deserialiser [SPR-15582]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15582](https://jira.spring.io/browse/SPR-15582?redirect=false)** and commented  Consider this application that uses Guava's `ImmutableList`:  ``` package com.example;  import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.http.MediaType; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;  import com.google.common.collect.ImmutableList;  @SpringBootApplication @RestController public class Unhelpful415Application {  	public static void main(String[] args) { 		SpringApplication.run(Unhelpful415Application.class, args); 	}  	@RequestMapping(path=""create"", method=RequestMethod.POST,  consumes=MediaType.APPLICATION_JSON_UTF8_VALUE) 	public String create(@RequestBody MyPojo pojo) { 		return ""Created""; 	}  	public static class MyPojo {  		private ImmutableList things;  		public ImmutableList getThings() { 			return things; 		}  		public void setThings(ImmutableList things) { 			this.things = things; 		}  	}  } ```  A `POST` to `/create` results in a 415 response (`application/json` is not supported). This is arguably wrong as JSON is supported and there's nothing that the client can do to fix the problem. It's actually the server that is at fault due to using `ImmutableList` and not configuring Jackson's Guava module. In my opinion, a 5xx response would be more appropriate.  The problem is exacerbated by the fact that Spring Framework 4.3 provides no further diagnostics for the failure. Arguably this is a regression as, with 4.2, a helpful warning message was logged:  ``` 2017-05-24 09:53:10.135  WARN 74298 --- [nio-8080-exec-5] .c.j.MappingJackson2HttpMessageConverter : Failed to evaluate Jackson deserialization for type [simple type, class com.example.Unhelpful415Application$MyPojo]: com.fasterxml.jackson.databind.JsonMappingException: Can not find a deserializer for non-concrete Collection type [collection type; class com.google.common.collect.ImmutableList, contains [simple type, class java.lang.String]] ```  This was removed by the changes for #18735. Enabling debug logging for `org.springframework.http.converter.json` doesn't provide any more information (and I don't think it should be necessary anyway).  ---  **Affects:** 4.3.8  **Reference URL:** #18735  **Issue Links:** - #18735 MappingJackson2HttpMessageConverter should not always log a warning  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/be93ee77e4fdc3f61d14eebaa6564cfaf3f38700, https://github.com/spring-projects/spring-framework/commit/7eaedf29161b08c9fbb30d7cb410b79f7b5e12d2","closed","type: regression,","spring-projects-issues","2017-05-24T09:09:12Z","2019-01-14T04:35:14Z"
"","20134","Expose the WebTestClient assigned request id header as a public constant  [SPR-15575]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15575](https://jira.spring.io/browse/SPR-15575?redirect=false)** and commented  Assuming my understanding of the API is correct, I would expect this test to pass:  ``` @Test public void requestHeadersFromWebFilterAreAvailableFromExchangeResult() {     RouterFunction route = RouterFunctions             .route(RequestPredicates.GET(""/""), (request) -> {                 Assert.notEmpty(request.headers().header(""FOO""), ""FOO is required"");                 return ServerResponse.status(HttpStatus.OK).build();             });     WebTestClient client = WebTestClient.bindToRouterFunction(route)             .webFilter((exchange, chain) -> {                 return chain.filter(exchange.mutate().request((builder) -> {                     builder.header(""FOO"", ""bar"");                 }).build());             }).build();      client.get().uri(""/"").exchange().expectStatus().isOk();     assertThat(client.get().uri(""/"").exchange().expectBody().returnResult()             .getRequestHeaders().getFirst(""FOO""), is(notNullValue())); } ```  It fails (with both RC1 and the latest snapshot) on the assertion at the end which checks that the `FOO` header is present in the `ExchangeResult`'s request headers.   ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/204a9cf056977f5adc6e7d8cfc8a1f3b69b77b61","closed","type: task,","spring-projects-issues","2017-05-22T17:47:31Z","2019-01-11T17:05:22Z"
"","20133","Use a more descriptive name for WiretapConnector's request ID header [SPR-15574]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15574](https://jira.spring.io/browse/SPR-15574?redirect=false)** and commented  I've started looking at supporting `WebTestClient` with Spring REST Docs and have noticed the `request-id` header appearing in the generated documentation. I can add some code to REST Docs to filter it out (as I know that the user is using `WebTestClient`), but it got me wondering if it should have a more descriptive name that makes it less likely to clash with a user's own header. Something like `WEB_TEST_CLIENT_REQUEST_ID`, perhaps?  ---  **Affects:** 5.0 RC1  **Issue Links:** - #20060 Consider Renaming request-id (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2017-05-22T15:48:32Z","2019-01-11T17:05:20Z"
"","20045","Last modified check of Resource created from Tomcat war:file: URL fails with FileNotFoundException [SPR-15485]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15485](https://jira.spring.io/browse/SPR-15485?redirect=false)** and commented  This is, I believe, a regression due to the changes made in [this commit](https://github.com/spring-projects/spring-framework/commit/899f2359984c4fbf396bfc74a824541b6332eb2f). A side-effect of those changes is that `AbstractFileResolvingResource` now proceeds with file system resolution where as, previously, it would have use the last modified header on the URL connection.  The file system resolution fails with an exception like this:  ``` java.io.FileNotFoundException: Jar URL cannot be resolved to absolute file path because it does not reside in the file system: war:file:/home/vbao/service/vbao-web.war*/js/bootstrap.min.js 	at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:215) 	at org.springframework.core.io.AbstractFileResolvingResource.getFileForLastModifiedCheck(AbstractFileResolvingResource.java:67) 	at org.springframework.core.io.AbstractResource.lastModified(AbstractResource.java:153) 	at org.springframework.core.io.AbstractFileResolvingResource.lastModified(AbstractFileResolvingResource.java:169) 	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:345) 	… ```  ---  **Affects:** 4.3.8  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/8986  **Issue Links:** - #19895 PathMatchingResourcePatternResolver fails to work under Tomcat 8.0.41 with unpackWARs=false - #21853 HTTP 404 for static resources with last modified = 0L (breaks Docker images build with Jib)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d43dfc7bae5aa5e81bc51dfb26c1ae1ff1ecc52e, https://github.com/spring-projects/spring-framework/commit/d2985613d1a0a59e275ae09ddd9076bd3a46e03b, https://github.com/spring-projects/spring-framework/commit/3daf626842713178f4f396524865da18850467b0","closed","in: core,","spring-projects-issues","2017-04-26T09:47:51Z","2019-01-11T16:37:11Z"
"","19939","Make it easier to see the HTTP headers when debugging MockMvc-based tests [SPR-15375]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15375](https://jira.spring.io/browse/SPR-15375?redirect=false)** and commented  It would make debugging of MockMvc-based tests easier if `HeaderValueHolder` implemented `toString()`. As things stand, when looking at the headers of a `MockHttpServletRequest` I can see this:  ``` {Accept=org.springframework.mock.web.HeaderValueHolder@3bc20984} ```  To get the actual value(s) of the header I have to drill down into the specific entry of the underlying `LinkedHashMap`.   --- No further details from [SPR-15375](https://jira.spring.io/browse/SPR-15375?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-03-23T10:41:00Z","2017-04-18T15:43:21Z"
"","19790","Update Cookie headers in MockHttpServletRequest and Response [SPR-15225]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15225](https://jira.spring.io/browse/SPR-15225?redirect=false)** and commented  When `setContentType` is called on `MockHttpServletRequest` or `MockHttpServletResponse` the `Content-Type` header is automatically updated. However, when `setCookies` is called on `MockHttpServletRequest` or `addCookie` is called on `MockHttpServletResponse` the respective `Cookie` and `Set-Cookie` headers are unaffected.  In the interests of consistency, I'd like `setCookies` and `addCookie` to automatically update the `Cookie` and `Set-Cookie` headers respectively. Setting the `Cookie` header would also provide an opportunity to apply the [recommended ordering](https://tools.ietf.org/html/rfc6265):  ``` 2.  The user agent SHOULD sort the cookie-list in the following     order:      *  Cookies with longer paths are listed before cookies with        shorter paths.      *  Among cookies that have equal-length path fields, cookies with        earlier creation-times are listed before cookies with later        creation-times. ```  ---  **Affects:** 4.3.6  **Issue Links:** - #19773 Mock MVC / RequestBuilder should handle Accept-Language header appropriately - #20081 Update Cookie headers in MockServerHttpRequest and Response  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6e71828a351ae31dec6bb0621266e4cef6e4a42f, https://github.com/spring-projects/spring-framework/commit/e33f603f68fc5ad2abfc4301e5d646a8a80ae0b7, https://github.com/spring-projects/spring-framework/commit/e5fc40a9de80597324e59801d9bfa17ff5cb67a5","closed","type: enhancement,","spring-projects-issues","2017-02-06T10:47:39Z","2019-01-11T14:33:31Z"
"","19765","RestTemplate drops trailing / from request URI [SPR-15201]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15201](https://jira.spring.io/browse/SPR-15201?redirect=false)** and commented  In the latest 5.0.0 snapshots, `RestTemplate` has started dropping a trailing `/` when the URI is passed in as a `String`. For example, a request to `http://localhost:8080/spring/` will become a request to `http://localhost:8080/spring`.  The loss of the `/` happens during variable expansion so I think that [this commit](https://github.com/spring-projects/spring-framework/commit/7b67b5bc2a3443026e92af28275d176648353110) may have introduced the problem. A workaround is to pass a `URI` into `RestTemplate` rather than a `String` so that expansion does not occur.  ---  **Affects:** 5.0 M5  **Issue Links:** - #19691 Provide convenient ways to specify query parameters to WebClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b487ed6748a0cdf68dc0e20ee5733d56a1f711f2","closed","type: bug,","spring-projects-issues","2017-01-28T12:38:05Z","2019-01-11T14:35:33Z"
"","19748","CookieLocaleResolver may disturb error rendering when locale cookie has a malformed value [SPR-15182]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15182](https://jira.spring.io/browse/SPR-15182?redirect=false)** and commented  This issue is on a similar theme to #19744 and #19745.  `DispatcherServlet` calls its `LocaleResolver` as part of an error dispatch. If a `CookieLocaleResolver` is configured and the locale cookie is malformed, this leads to an exception being thrown during error processing which disturbs error rendering.  A workaround is to override `resolveLocaleContext(HttpServletRequest)` and skip parsing the cookie's value when it's an error dispatch:  ``` @Override public LocaleContext resolveLocaleContext(HttpServletRequest request) {     if (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) != null) {         return new TimeZoneAwareLocaleContext() {             @Override             public Locale getLocale() {                 return (Locale) request.getAttribute(LOCALE_REQUEST_ATTRIBUTE_NAME);             }             @Override             public TimeZone getTimeZone() {                 return (TimeZone) request.getAttribute(TIME_ZONE_REQUEST_ATTRIBUTE_NAME);             }         };     }     return super.resolveLocaleContext(request); } ```  ---  **Affects:** 4.3.5  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/8075  **Issue Links:** - #19745 HiddenHttpMethodFilter may disturb error rendering when handling malformed multipart request - #19744 DispatcherServet.checkMultipart() does not consider javax.servlet.error.exception that has a MultipartException cause - #20011 Make SessionLocaleResolver's attribute name configurable  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e8776f80dab416517a2ffeb2e55517eeee32e80b, https://github.com/spring-projects/spring-framework/commit/b97e7d53bc1a8e6e4be640d5959435baada89aae","closed","type: enhancement,","spring-projects-issues","2017-01-24T10:29:00Z","2019-01-11T14:25:49Z"
"","19746","Tolerate null return from getNegotiatedExtensions (for Jetty 9.4.1 compatibility) [SPR-15180]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15180](https://jira.spring.io/browse/SPR-15180?redirect=false)** and commented  Jetty 9.4.1 may return `null` from `javax.websocket.Session.getNegotiatedExtensions()` rather than an empty list. This causes a `NullPointerException` in `StandardWebSocketSession`:  ``` java.io.IOException: Connect failure 	at org.eclipse.jetty.websocket.jsr356.ClientContainer.connect(ClientContainer.java:165) ~[javax-websocket-client-impl-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.websocket.jsr356.ClientContainer.connectToServer(ClientContainer.java:188) ~[javax-websocket-client-impl-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.springframework.web.socket.client.standard.StandardWebSocketClient$1.call(StandardWebSocketClient.java:150) ~[spring-websocket-4.3.5.RELEASE.jar:4.3.5.RELEASE] 	at org.springframework.web.socket.client.standard.StandardWebSocketClient$1.call(StandardWebSocketClient.java:147) ~[spring-websocket-4.3.5.RELEASE.jar:4.3.5.RELEASE] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_102] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_102] Caused by: java.lang.NullPointerException: null 	at org.springframework.web.socket.adapter.standard.StandardWebSocketSession.initializeNativeSession(StandardWebSocketSession.java:185) ~[spring-websocket-4.3.5.RELEASE.jar:4.3.5.RELEASE] 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.onOpen(StandardWebSocketHandlerAdapter.java:61) ~[spring-websocket-4.3.5.RELEASE.jar:4.3.5.RELEASE] 	at org.eclipse.jetty.websocket.jsr356.endpoints.JsrEndpointEventDriver.onConnect(JsrEndpointEventDriver.java:140) ~[javax-websocket-client-impl-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.websocket.common.events.AbstractEventDriver.openSession(AbstractEventDriver.java:233) ~[websocket-common-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.websocket.jsr356.endpoints.AbstractJsrEventDriver.openSession(AbstractJsrEventDriver.java:104) ~[javax-websocket-client-impl-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.websocket.common.WebSocketSession.open(WebSocketSession.java:504) ~[websocket-common-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.websocket.common.WebSocketSession.onOpened(WebSocketSession.java:433) ~[websocket-common-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.io.AbstractConnection.onOpen(AbstractConnection.java:200) ~[jetty-io-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onOpen(AbstractWebSocketConnection.java:566) ~[websocket-common-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.io.AbstractEndPoint.upgrade(AbstractEndPoint.java:432) ~[jetty-io-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.websocket.client.WebSocketUpgradeRequest.upgrade(WebSocketUpgradeRequest.java:622) ~[websocket-client-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.client.http.HttpChannelOverHTTP.exchangeTerminating(HttpChannelOverHTTP.java:116) ~[jetty-client-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:451) ~[jetty-client-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.client.HttpReceiver.responseSuccess(HttpReceiver.java:405) ~[jetty-client-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.messageComplete(HttpReceiverOverHTTP.java:281) ~[jetty-client-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.http.HttpParser.parseHeaders(HttpParser.java:1076) ~[jetty-http-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1326) ~[jetty-http-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.parse(HttpReceiverOverHTTP.java:170) ~[jetty-client-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.process(HttpReceiverOverHTTP.java:131) ~[jetty-client-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.receive(HttpReceiverOverHTTP.java:70) ~[jetty-client-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.client.http.HttpChannelOverHTTP.receive(HttpChannelOverHTTP.java:130) ~[jetty-client-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onFillable(HttpConnectionOverHTTP.java:116) ~[jetty-client-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:279) ~[jetty-io-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:112) ~[jetty-io-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:124) ~[jetty-io-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:672) ~[jetty-util-9.4.1.v20170120.jar:9.4.1.v20170120] 	at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:590) ~[jetty-util-9.4.1.v20170120.jar:9.4.1.v20170120] 	... 1 common frames omitted ```  It's not clear if this is spec compliant (both the spec and the javadoc are silent on it), but could `StandardWebSocketSession` be made more robust and treat `null` as an empty list?   ---  **Affects:** 4.3.5  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/7750","closed","type: enhancement,","spring-projects-issues","2017-01-23T17:31:18Z","2017-01-25T14:18:15Z"
"","19745","HiddenHttpMethodFilter may disturb error rendering when handling malformed multipart request [SPR-15179]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15179](https://jira.spring.io/browse/SPR-15179?redirect=false)** and commented  When `HiddenHttpMethodFilter` is involved in an error dispatch it may disturb error rendering if the error was caused by a failure when calling `request.getParameter(String)`. In the case of the referenced Spring Boot issue, the failure is caused by a malformed multipart request.  The problem can be worked around by provided a custom filter that doesn't do anything when the `javax.servlet.error.exception` attribute is set:  ``` @Bean public OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {     return new OrderedHiddenHttpMethodFilter() {          @Override         protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,                 FilterChain filterChain) throws ServletException, IOException {             if (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) != null) {                 filterChain.doFilter(request, response);             }             else {                 super.doFilterInternal(request, response, filterChain);             }         }      }; } ```  This may be a bit too extreme, but I think it would be helpful if the filter did something similar by default.  ---  **Affects:** 4.3.5  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/7936  **Issue Links:** - #19744 DispatcherServet.checkMultipart() does not consider javax.servlet.error.exception that has a MultipartException cause - #19748 CookieLocaleResolver may disturb error rendering when locale cookie has a malformed value","closed","type: bug,","spring-projects-issues","2017-01-23T13:53:06Z","2019-01-11T15:29:13Z"
"","19744","DispatcherServet.checkMultipart() does not consider javax.servlet.error.exception that has a MultipartException cause [SPR-15178]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15178](https://jira.spring.io/browse/SPR-15178?redirect=false)** and commented  `DispatcherServlet.checkMultipart(HttpServletRequest)` attempts to avoid disturbing error rendering. It does so by checking the `java.servlet.error.exception` request attribute and, if its value is a `MultipartException`, it skips multipart resolution. As described in the referenced Spring Boot issue, error rendering is still distributed when the error exception was caused by a `MultipartException` but is not, itself, a `MultipartException`.  I've tried providing a custom `DispatcherServlet` that overrides `checkMultipart(HttpServletRequest)` and searches through all of the causes:  ``` protected HttpServletRequest checkMultipart(HttpServletRequest request) throws MultipartException {     if (getMultipartResolver() != null && getMultipartResolver().isMultipart(request)) {         if (WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class) != null) {             logger.debug(""Request is already a MultipartHttpServletRequest - if not in a forward, "" +                     ""this typically results from an additional MultipartFilter in web.xml"");         } else {             Throwable error = (Throwable)request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE);             while (error != null) {                 if (error instanceof MultipartException) {                     logger.debug(""Multipart resolution failed for current request before - "" +                             ""skipping re-resolution for undisturbed error rendering"");                     return request;                 }                 error = error.getCause();             }             return getMultipartResolver().resolveMultipart(request);         }     }     // If not returned before: return original request.     return request; } ```  It resolves the problem described above and doesn't appear to have any adverse side-effects.  ---  **Affects:** 4.3.5  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/7936  **Issue Links:** - #19796 DispatcherServlet's multipart request parsing fails during Jetty error dispatch - #19745 HiddenHttpMethodFilter may disturb error rendering when handling malformed multipart request - #19748 CookieLocaleResolver may disturb error rendering when locale cookie has a malformed value  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2017-01-23T13:43:45Z","2019-01-11T15:29:11Z"
"","19733","Optional dependencies are missing from the poms of the latest 5.0 snapshots [SPR-15167]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15167](https://jira.spring.io/browse/SPR-15167?redirect=false)** and commented  It appears to be related to starting to use the dependency management plugin to import Reactor's bom. I'm guessing there's a clash between it and whatever was adding the optional dependencies to the pom (the propdeps plugin?).  I'll investigate and hopefully open a PR once I've figured out what the root cause is and how to fix it.   ---  **Affects:** 5.0 M5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b1fed6f7c8314f070833e8dfda86f8d0f112a6c0, https://github.com/spring-projects/spring-framework/commit/6fe7b176c4ae1ceb26aa81f4d465abde8e8f6dd9","closed","type: task,","spring-projects-issues","2017-01-19T17:21:49Z","2017-02-23T09:29:11Z"
"","19701","Provide a method that exposes whether or not a reactive HTTP response has been committed [SPR-15135]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15135](https://jira.spring.io/browse/SPR-15135?redirect=false)** and commented  As discussed with Rossen, a method that exposes whether or not a response has been committed will be useful for Boot's error page support   ---  **Affects:** 5.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9142427c4d898db174aa895494269ff6d2372556","closed","type: enhancement,","spring-projects-issues","2017-01-11T20:42:18Z","2017-02-23T09:29:10Z"
"","19700","Assign a default order to ResponseStatusExceptionHandler bean created by WebReactiveConfigurationSupport [SPR-15134]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15134](https://jira.spring.io/browse/SPR-15134?redirect=false)** and commented  `WebExceptionHandler` beans that are retrieved from an application context are ordered. However, the `ResponseStatusExceptionHandler` bean that is exposed by `WebReactiveConfigurationSupport` has no order. As a result it will implicitly have lowest precedence preventing other `WebExceptionHandler` beans from being ordered to run after it.  I think that the `ResponseStatusExceptionHandler` bean that's exposed by `WebReactiveConfigurationSupport` should be ordered. My gut feel is that an order of zero would be appropriate.  ---  **Affects:** 5.0 M4  **Issue Links:** - #19640 WebFilter ordering in WebHttpHandlerBuilder only works on instances (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8703cdd9cbb3b71b7c0caf35eeab246cc036ffd8","closed","type: enhancement,","spring-projects-issues","2017-01-11T20:18:56Z","2019-01-11T15:32:46Z"
"","19653","HttpHeaders.keySet() is no longer case-insensitive [SPR-15087]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15087](https://jira.spring.io/browse/SPR-15087?redirect=false)** and commented  This is a regression due to #19593. Consider the following:  ```java HttpHeaders headers = new HttpHeaders(); headers.add(""X-Foo"", ""bar""); System.out.println(headers.keySet().contains(""x-foo"")); ```  With M3 it outputs `true`. With M4 it outputs `false`.  ---  **Affects:** 5.0 M4  **Issue Links:** - #19593 LinkedCaseInsensitiveMap does not properly support Java 8's merge() and compute() methods","closed","type: regression,","spring-projects-issues","2017-01-03T14:26:01Z","2019-01-11T15:27:37Z"
"","20177","Consider improvements to handling suffixed URL patterns [SPR-15618]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-15618](https://jira.spring.io/browse/SPR-15618?redirect=false)** and commented  See the discussion in #19112 and #20156. It feels like suffixes are a common thing (patterns ending '.*', '.txt', '.html') and it could be worth special handling for them. Possibly a new PathElement subtype specifically for suffixed PathElements (because currently `""{foo}.*""`) type patterns are captured as RegexPathElement instances (the least optimal of the PathElement subtypes).  Under #20156 a temporary fix was made to avoid treating '.*' as usage of a wildcard in the PathPattern comparator which feels wrong to some degree (because there is a wildcard there!) but it is what the AntPathMatcher comparator does (See PatternInfo#initCounters()) so it was done to make them consistent.  ---  No further details from [SPR-15618](https://jira.spring.io/browse/SPR-15618?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-06-02T22:53:24Z","2020-04-02T19:59:36Z"
"","20145","Need to adjust code in Spring Framework to allow compilation by Eclipse 4.7 compiler [SPR-15586]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-15586](https://jira.spring.io/browse/SPR-15586?redirect=false)** and commented  Eclipse JDT has a current problem with inferencing. This bug has previously been found to prevent compilation of reactor-core in eclipse but now is also affecting spring framework. The general problem is described here:  https://bugs.eclipse.org/bugs/show_bug.cgi?id=515600  The fix date is way out in the future. Under this jira I will slightly adjust the source for ConfigurationClassProcessingTests in spring to work around the bug so it will compile cleanly in Eclipse.   ---  **Affects:** 5.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/109746a03bcb83b87793ea62fbd393afb9279391","closed","type: enhancement,","spring-projects-issues","2017-05-24T19:38:37Z","2017-06-14T10:12:17Z"
"","19993","[doc] Update @ControllerAdvice Javadoc to discuss ordering [SPR-15432]","**[Andrzej Martynowicz](https://jira.spring.io/secure/ViewProfile.jspa?name=walkeros)** opened **[SPR-15432](https://jira.spring.io/browse/SPR-15432?redirect=false)** and commented  When there are multiple `@ControllerAdvice` annotated classes it seems that they are selected basing on alphabetical order rather than trying to do ""best match"".  Consider following two controllers. First is ordinary spring webmvc controller (annotated with `@Controller`) , the other is rest controlller (annotated with `@RestController`):  ```java // this one is annotated with @Controller @Controller public class TestController {      @ResponseBody   @RequestMapping(method = GET, value = ""/test"")   public String testMethod() {     if (true) {       throw new RuntimeException(""asdasdsadsad"");     }     return ""asdsadsad"";   } }  @RestController @RequestMapping(value = ""/soume-url"", produces = APPLICATION_JSON_UTF8_VALUE, consumes = APPLICATION_JSON_UTF8_VALUE) public class SomeController {      @RequestMapping(method = GET)   public ResponseEntity","closed","in: web,","spring-projects-issues","2017-04-11T08:23:04Z","2017-04-18T15:43:21Z"
"","19850","@MessageMapping does not work with Spring Security and MVC [SPR-15284]","**[Andrii](https://jira.spring.io/secure/ViewProfile.jspa?name=andrii)** opened **[SPR-15284](https://jira.spring.io/browse/SPR-15284?redirect=false)** and commented  An application that uses Spring MVC and Security does not reach `@MessageMapping` while client send to backend message. Client have successful connection but, when it try to send message to backend - nothing happends. In debug mode method annotated with `@MessageMapping` does not reach at all!   All configurations are next  ```java @Configuration @EnableWebSocketMessageBroker public class WebSocketConfig extends AbstractWebSocketMessageBrokerConfigurer {      public WebSocketConfig() {     }      @Override     public void configureMessageBroker(MessageBrokerRegistry config) {         config.enableSimpleBroker(""/topic"");         config.setApplicationDestinationPrefixes(""/app"");     }      @Override     public void registerStompEndpoints(StompEndpointRegistry registry) {         registry.addEndpoint(""/hello1"").withSockJS();     } } ```  Also I have added security config for websockets  ```java @Configuration public class SecuritySocketConfig extends AbstractSecurityWebSocketMessageBrokerConfigurer {      protected boolean sameOriginDisabled() {         return true;     }      protected void configureInbound(MessageSecurityMetadataSourceRegistry messages) {         messages.simpDestMatchers(""/hello1"").authenticated().simpDestMatchers(""/app/hello1"").authenticated();//permitAll();      } }  ```  Controller class  ```java @Controller public class WebsocketController {      @MessageMapping(""/hello1"")     public void send(Message message) {         String name = message.getName();      } } ```  socket.js, that is importing to JSP file  ```javascript ;(function () {      //init     $(function () {         $(""#control_mode"").change(app.page.controlCheck);         connect();     });     var stompClient = null;       function connect() {         var socket = new SockJS(""http://localhost:8080/hello1"");         stompClient = Stomp.over(socket);         console.log('attempt to connect: ' +stompClient!=null);         console.log('session id: '+ ""${pageContext.session.id}"");          stompClient.connect('', '', function(frame) {             console.log('Connected: ' + frame);             stompClient.subscribe('/topic/greetings/', function(result) {                 getResult(result);             });          });     }      function getResult(result) {        var isControlable= JSON.parse(greeting.body).isControlable;         if (isControlable) {             alert('Control was already gained')         } else {             $(""#control_mode"").prop(""checked"", true);         }     }      app.page.controlCheck = function () {         stompClient.send('/app/hello1', {}, JSON.stringify({'name' : ""alastor"" }));         if (this.checked) {             $(""#control_mode"").prop(""checked"", !this.checked);         } else {             alert('was click for release control');         }     };      function disconnect() {         stompClient.disconnect();         console.log(""Disconnected"");     } })(); ```  spring-security.xml (further is importing to main spring.xml)  ```xml                                                                                                                                                                 ```  browser log:  ``` Opening Web Socket... stomp.js:134:99 Web Socket Opened... stomp.js:134:99 >>> CONNECT login: passcode: accept-version:1.1,1.0 heart-beat:10000,10000   stomp.js:134:99 > SUBSCRIBE id:sub-0 destination:/topic/greetings/   stomp.js:134:99 >>> SEND destination:/app/hello1 content-length:18  {""name"":""alastor""} ```    --- No further details from [SPR-15284](https://jira.spring.io/browse/SPR-15284?redirect=false)","closed","","spring-projects-issues","2017-02-24T15:27:52Z","2019-01-11T14:27:26Z"
"","20237","@EventListener's 'condition' doesn't work as expected with proxied beans [SPR-15678]","**[Andrey Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=blaketsk)** opened **[SPR-15678](https://jira.spring.io/browse/SPR-15678?redirect=false)** and commented  I've tried to add `@EventListener` with 'condition' to my service, but condition doesn't work. One of service's methods is annotated with `@Transactional`. So it will proxied. If I delete `@Transacional` - it works perfect. I found a workaround - move `@EventListener` to interface.   ---  **Affects:** 4.3.8  **Reference URL:** https://github.com/blaketsk/event-listener-bug-example  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8ad3c958e19be948511456deb47e978e782b3e3a, https://github.com/spring-projects/spring-framework/commit/eb928ce456a77cb0cb932aa76aeb67e2ae2b5379","closed","type: bug,","spring-projects-issues","2017-06-17T08:00:59Z","2018-05-20T22:32:31Z"
"","19678","Internal spring boot bug if wildfly libs is used [SPR-15111]","**[Andrew](https://jira.spring.io/secure/ViewProfile.jspa?name=tbw)** opened **[SPR-15111](https://jira.spring.io/browse/SPR-15111?redirect=false)** and commented  Then spring boot used (without any spring annotations) as dependency for wildfly (10.1) client package project i get this message:  WARN: AMQ212052: Packet PACKET(SessionBindingQueryResponseMessage_V2)[type=-8, channelID=13, packetObject=SessionBindingQueryResponseMessage_V2, exists=true, queueNames=[jms.queue.testQueue], autoCreateJmsQueues=false] was answered out of sequence due to a previous server timeout and it's being ignored java.lang.Exception: trace  To reproduce this bug: 0. Use attached archive 1. copy wildfly standalone-full.xml to wildfly (10.1) config dir (plus server.keystore in this directory too)  2. copy Server.ejb to wildfly deploy dir  3. start wildfly (standalone.bat -c standalone-full.xml)  4. run: maven clean compile packege exec:exec    result: no exceptrions, jms is work (spam on console)  5. Then uncomment pom.xml at for lines 15-19 (for enable spring boot dependency), rebuild project and you can see errors at work     \    \org.springframework.boot\    \spring-boot-starter-parent\    \1.4.2.RELEASE\    \  With 1.4.3 problem is actual too.   ---  **Affects:** 4.3.5  **Reference URL:** https://developer.jboss.org/thread/273543?start=15&tstart=0  **Attachments:** - [test2.7z](https://jira.spring.io/secure/attachment/23680/test2.7z) (_19.10 kB_)","closed","status: invalid,","spring-projects-issues","2017-01-08T08:32:07Z","2019-01-12T05:21:27Z"
"","20020","Spel Expressions leaks classes [SPR-15460]","**[Andrew Rowbottom](https://jira.spring.io/secure/ViewProfile.jspa?name=andrew.rowbottom)** opened **[SPR-15460](https://jira.spring.io/browse/SPR-15460?redirect=false)** and commented  SpelCompiler / SpelExpression can leak classes when a compiled expression reverts back to interpreted mode and then once again compiles. Happens in varied scenarios with compiler mode MIXED, e.g. Single expression instance, used frequently, with different ""root"" object classes etc.  Example attached, prints out the number of loaded classes when the same expression is repeatedly evaluated for just 2 types of root object (simplest case).  One possible solution might be to have the SpelCompiler ""store"" classes for specific bytecode and check for identical bytecode generated (excepting compiled expression classname), returning  the class that matches the bytecode instead of ""defining"" it again. I have been unable to implement anything like this by extending as the structure of the code doesn't seem to provide the relevant hook points (in 4.1.6).   ---  **Affects:** 4.3.8  **Attachments:** - [ClassLeakDemo.java](https://jira.spring.io/secure/attachment/24907/ClassLeakDemo.java) (_1.53 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c1edb3b5bd90a5548cf6db19f9bcf7383e4898fb","closed","in: core,","spring-projects-issues","2017-04-19T10:43:25Z","2017-05-08T08:41:46Z"
"","19783","Log failures to load PropertySources when ignoreResourceNotFound = true [SPR-15218]","**[Andrew Medworth](https://jira.spring.io/secure/ViewProfile.jspa?name=amedworth)** opened **[SPR-15218](https://jira.spring.io/browse/SPR-15218?redirect=false)** and commented  In `ConfigurationClassParser.processPropertySource()`, if `ignoreResourceNotFound` is set to `true` for a given property source and that property source is not loadable (e.g. because the file does not exist), no message is currently logged by Spring at any level.  This can make it extremely difficult to debug unexpected behaviour in property source resolution. For example, see the `Repro` main class in the referenced project on GitHub, which has a PropertySource referring to a non-existent property file.  The ultimate output of this program is `myProp = ${mykey}`, because the config file is not found and therefore the ""mykey"" variable substitution does not occur.  However, if the developer was expecting the config file to exist, and hence was surprised at the lack of variable substitution, the cause would be very difficult to diagnose from the application logs, because even at the highest level of logging, there is no message to indicate that Spring tried and failed to open `does-not-exist.properties`. Of course, real-world scenarios would probably be much more complex.  I propose that Spring's ConfigurationClassParser should be changed to log a message at debug level when a PropertySource with ignoreResourceNotFound = true cannot be loaded for any reason.  ---  **Affects:** 4.3.6, 5.0 M4  **Reference URL:** https://github.com/amdw/spring-logging-repro  **Issue Links:** - #19994 UnknownHostException not accepted as ""resource not found"" anymore  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1313, and commits https://github.com/spring-projects/spring-framework/commit/448ea4cdfe30c732f4c5dee0ce020ddb5d64dceb, https://github.com/spring-projects/spring-framework/commit/d6216fb74a1310ef55ac7fd35a6dc0666639b6a3","closed","type: enhancement,","spring-projects-issues","2017-02-03T02:40:45Z","2019-01-13T20:30:44Z"
"","20031","AsciiDoctor task does not support Rouge on MS Windows [SPR-15471]","**[Andrei Precup](https://jira.spring.io/secure/ViewProfile.jspa?name=andrei94)** opened **[SPR-15471](https://jira.spring.io/browse/SPR-15471?redirect=false)** and commented  When running the asciidoctor task on Windows, Gradle gives the following error:  ``` (RuntimeError) asciidoctor: FAILED: required gem 'rouge' is not installed. Processing aborted. :asciidoctor FAILED ```  The ruby, jruby and ruby-devkit are installed. This problem doesn't appear on Linux and Mac systems.  ---  **Affects:** 5.0 M5  **Issue Links:** - #19564 Move to pure Asciidoctor for documentation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/55833dc3d1f7bd05881484e488066d07390b2df8","closed","type: task,","spring-projects-issues","2017-04-20T20:46:34Z","2019-01-11T16:38:15Z"
"","19669","Add support for SpringBeanAutowiringSupport in Spring MVC Test [SPR-15102]","**[Andreas Andersen Kjaer](https://jira.spring.io/secure/ViewProfile.jspa?name=akjaer.dk)** opened **[SPR-15102](https://jira.spring.io/browse/SPR-15102?redirect=false)** and commented  I am using Spring MVC for REST communication and Hibernate for handling  JPA annotations.  I run local system tests with an in memory database and `MockMvc`.  I have created a class similar to this:  ```java public class BaseEntityListener {  	@Autowired 	private MyService myService;  	private boolean springBeansLoaded = false;  	@PrePersist 	@PreUpdate 	public void updateRowWithTransactionalFields(BaseEntity baseEntity) { 		ensureSpringBeansLoaded(); 		.. more code 	}   	private void ensureSpringBeansLoaded() { 		if (!springBeansLoaded) { 			SpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(this); 			springBeansLoaded = true; 		} 	} } ```  And I have added the class above as an entity listener:  ```java @MappedSuperclass @EntityListeners(BaseEntityListener.class) public abstract class BaseEntity { ... } ```  My Entities extend `BaseEntity`.  `SpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(this)` works fine when I deploy to an application server. However, when using `MockMvc`, it does not work. `myService` will never be assigned as `SpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext` is not capable of finding the application context.  Is this a bug?  ---  **Affects:** 4.3 GA  **Issue Links:** - #18264 javax.persistence.EntityListeners annotation generates 2 beans, one without autowired fields","open","in: test,","spring-projects-issues","2017-01-06T12:14:11Z","2019-01-14T04:36:39Z"
"","20109","ProtobufHttpMessageConverter: Make JSON format configurable [SPR-15550]","**[Andreas Ahlenstorf](https://jira.spring.io/secure/ViewProfile.jspa?name=aahlenstorf)** opened **[SPR-15550](https://jira.spring.io/browse/SPR-15550?redirect=false)** and commented  I would like to be able to configure/customize the `JsonFormat.Printer` used by `ProtobufJavaUtilSupport` in the `ProtobufHttpMessageConverter` in order to influence the format of the generated JSON. This is currently not possible and requires the reimplementation of the entire `MessageConverter`.  One possible solution would be to offer another constructor of `ProtobufHttpMessageConverter` that takes a `ProtobufFormatSupport` instance as single argument. `ProtobufJavaUtilSupport` and `ProtobufJavaFormatSupport` would have to be made public and `ProtobufJavaUtilSupport` would get an additional constructor with `JsonFormat.Parser` and `JsonFormat.Printer` as arguments. The default behaviour could remain the same.  ---  **Affects:** 5.0 RC1  **Issue Links:** - #18166 ProtobufHttpMessageConverter support for protobuf 3.0.0-beta4 - #20538 ProtobufHttpMessageConverter: JSON not written to response  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ce5e2b94c4403b176051e8b3b8be50b5fd5ddd03","closed","type: enhancement,","spring-projects-issues","2017-05-15T17:40:24Z","2019-01-11T17:07:15Z"
"","19959","Possibility to configure encoding other than ascii in FormHttpMessageConverter.MultipartHttpOutputMessage [SPR-15396]","**[Anders Båtstrand](https://jira.spring.io/secure/ViewProfile.jspa?name=anderius)** opened **[SPR-15396](https://jira.spring.io/browse/SPR-15396?redirect=false)** and commented  For some cases, it is useful to allow non-ascii characters in the mime headers in multipart requests. For example when using Zuul to proxy file uploads with non-ascii filenames.  The encoding used is hard-coded in `FormHttpMessageConverter.MultipartHttpOutputMessage#getAsciiBytes(String)`.  Although that seems correct, I guess most browsers does not respect this. It would be really useful if that encoding was possible to disable/configure in some way.  I would be happy to provide a pull request if this is something you would consider.  The only work-around for me now, is to duplicate `FormHttpMessageConverter` in my code, with a slightly modified inner class MultipartHttpOutputMessage.  ---  **Issue Links:** - #19769 StandardMultipartHttpServletRequest cannot decode multipart Content-Disposition header encoded by FormHttpMessageConverter (_**""duplicates""**_) - #16724 FormHttpMessageConverter writes ASCII encoded so that a multipart form data can not contain filenames with German Umlaute - #18910 FormHttpMessageConverter should use configured charset (by default UTF-8) for ""text-plain"" MIME part conversion as well","closed","type: enhancement,","spring-projects-issues","2017-03-29T10:00:08Z","2019-01-11T14:41:50Z"
"","19737","ProxyTransactionManagementConfiguration enableTx NPE [SPR-15171]","**[Alvise Vitturi](https://jira.spring.io/secure/ViewProfile.jspa?name=vittualv)** opened **[SPR-15171](https://jira.spring.io/browse/SPR-15171?redirect=false)** and commented  setImportMetadata is not called when ProxyTransactionManagementConfiguration is instantieted (from the second onwards)  ---  **Affects:** 4.3.5  **Reference URL:** #19538  **Issue Links:** - #19538 ImportAware.setImportMetadata not invoked if import inherited from superclass with negative condition","closed","in: core,","spring-projects-issues","2017-01-20T13:01:05Z","2019-01-14T04:36:30Z"
"","20365","TemplateAwareExpressionParser.parseExpression does not accept null ParserContext anymore [SPR-15810]","**[Alpheratz](https://jira.spring.io/secure/ViewProfile.jspa?name=alpheratz)** opened **[SPR-15810](https://jira.spring.io/browse/SPR-15810?redirect=false)** and commented  I initailly raised this as https://jira.spring.io/browse/SWF-1706 but I think this is really a spring expression issue.  With 5.0.0.RC3, I am seeing:  ```java 24-Jul-2017 20:39:30.654 SEVERE [http-nio-8080-exec-2] org.apache.catalina.core.StandardWrapperValve.invoke Servlet.service() for servlet [dispatcher] in context with path [/TCE] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause  java.lang.NullPointerException 	at org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression(TemplateAwareExpressionParser.java:66) 	at org.springframework.binding.expression.spel.SpringELExpressionParser.parseSpelExpression(SpringELExpressionParser.java:96) 	at org.springframework.binding.expression.spel.SpringELExpressionParser.parseExpression(SpringELExpressionParser.java:77) 	at org.springframework.webflow.engine.builder.model.FlowModelFlowBuilder.parseEvaluateAction(FlowModelFlowBuilder.java:870) 	at org.springframework.webflow.engine.builder.model.FlowModelFlowBuilder.parseActions(FlowModelFlowBuilder.java:845) 	at org.springframework.webflow.engine.builder.model.FlowModelFlowBuilder.parseAndAddActionState(FlowModelFlowBuilder.java:565) 	at org.springframework.webflow.engine.builder.model.FlowModelFlowBuilder.buildStates(FlowModelFlowBuilder.java:212) 	at org.springframework.webflow.engine.builder.FlowAssembler.directAssembly(FlowAssembler.java:106) 	at org.springframework.webflow.engine.builder.FlowAssembler.assembleFlow(FlowAssembler.java:91) 	at org.springframework.webflow.engine.builder.DefaultFlowHolder.assembleFlow(DefaultFlowHolder.java:109) 	at org.springframework.webflow.engine.builder.DefaultFlowHolder.getFlowDefinition(DefaultFlowHolder.java:84) 	at org.springframework.webflow.definition.registry.FlowDefinitionRegistryImpl.getFlowDefinition(FlowDefinitionRegistryImpl.java:60) 	at org.springframework.webflow.executor.FlowExecutorImpl.launchExecution(FlowExecutorImpl.java:138) 	at org.springframework.webflow.mvc.servlet.FlowHandlerAdapter.handle(FlowHandlerAdapter.java:263) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:981) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:915) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:978) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:870) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:855) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) 	at tce.MDCFilter.doFilter(MDCFilter.java:44) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80) 	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:624) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799) 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455) 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Thread.java:748) ```  This does not happen with 4.3.x and earlier.  I THINK this traces to a change in org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression.  In 5.0.0, it looks like:  ```java 	@Override 	public Expression parseExpression(String expressionString) throws ParseException { 		return parseExpression(expressionString, NON_TEMPLATE_PARSER_CONTEXT); 	}  	@Override 	public Expression parseExpression(String expressionString, ParserContext context) throws ParseException { 		if (context.isTemplate()) { 			return parseTemplate(expressionString, context); 		} 		else { 			return doParseExpression(expressionString, context); 		} 	} ```  In earlier versions, a null context is explicitly protected against:  ```java 	@Override 	public Expression parseExpression(String expressionString) throws ParseException { 		return parseExpression(expressionString, NON_TEMPLATE_PARSER_CONTEXT); 	}  	@Override 	public Expression parseExpression(String expressionString, ParserContext context) 			throws ParseException { 		if (context == null) { 			context = NON_TEMPLATE_PARSER_CONTEXT; 		}  		if (context.isTemplate()) { 			return parseTemplate(expressionString, context); 		} 		else { 			return doParseExpression(expressionString, context); 		} 	} ```  I am coming across this when upgrading a Spring Webflow application to SWF 2.4.5.RELEASE.  I have found that I can use the bulk of 5.0.0.RC3 IFF I force expression to an earlier version:  ```     final SPRING_VERSION = '5.0.0.RC3'     compile ""org.springframework:spring-aop:${SPRING_VERSION}""     compile ""org.springframework:spring-aspects:${SPRING_VERSION}""     compile ""org.springframework:spring-beans:${SPRING_VERSION}""     compile ""org.springframework:spring-context-support:${SPRING_VERSION}""     compile ""org.springframework:spring-context:${SPRING_VERSION}""     compile ""org.springframework:spring-core:${SPRING_VERSION}"" //    NO compile ""org.springframework:spring-expression:${SPRING_VERSION}"" //    YES compile ""org.springframework:spring-expression:4.2.9.RELEASE"", { force = true }     // YES:     compile ""org.springframework:spring-expression:4.3.10.RELEASE"", { force = true }     compile ""org.springframework:spring-web:${SPRING_VERSION}""     compile ""org.springframework:spring-webmvc:${SPRING_VERSION}"" ```  So: this is not quite a blocker for me, but may be worth looking at before 5 goes live?   ---  **Affects:** 5.0 RC2, 5.0 RC3  **Reference URL:** https://jira.spring.io/browse/SWF-1706  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/af93503a090a4c592c9dba98f64ef67dc99903b8","closed","in: core,","spring-projects-issues","2017-07-24T10:51:37Z","2017-09-11T12:09:51Z"
"","19897","Hibernate Envers listeners fail because EntityManager is closed too early when using JPA/JTA/Hibernate 5.2.8/Envers [SPR-15334]","**[Allan Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=allanjones)** opened **[SPR-15334](https://jira.spring.io/browse/SPR-15334?redirect=false)** and commented  My environment:  Using spring with JPA + JTA and Hibernate 5.2.8.Final + Envers  The problem is that Springframework ORM (JPA subpackage) closes the entity manager too early (During ```java triggerBeforeCompletion(status)  ```step).  When the Hibernate envers listeners are triggered (during ```java doCommit(status) ``` step), the entity manager is already closed.   ```  Exception in thread ""main"" org.springframework.transaction.UnexpectedRollbackException: JTA transaction unexpectedly rolled back (maybe due to a timeout); nested exception is javax.transaction.RollbackException: The transaction was set to rollback only at org.springframework.transaction.jta.JtaTransactionManager.doCommit(JtaTransactionManager.java:1026) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:761) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:730) at com.myapp.services.MyService.reproduceIssue(MyService.java:40) at com.myapp.App.main(App.java:12) Caused by: javax.transaction.RollbackException: The transaction was set to rollback only at com.atomikos.icatch.jta.TransactionImp.rethrowAsJtaRollbackException(TransactionImp.java:66) at com.atomikos.icatch.jta.TransactionImp.commit(TransactionImp.java:207) at com.atomikos.icatch.jta.TransactionManagerImp.commit(TransactionManagerImp.java:433) at com.atomikos.icatch.jta.J2eeUserTransaction.commit(J2eeUserTransaction.java:94) at org.springframework.transaction.jta.JtaTransactionManager.doCommit(JtaTransactionManager.java:1023) ... 4 more Caused by: java.lang.IllegalStateException: Session/EntityManager is closed at org.hibernate.internal.AbstractSharedSessionContract.checkOpen(AbstractSharedSessionContract.java:332) at org.hibernate.engine.spi.SharedSessionContractImplementor.checkOpen(SharedSessionContractImplementor.java:126) at org.hibernate.internal.SessionImpl.guessEntityName(SessionImpl.java:2228) at org.hibernate.envers.event.spi.BaseEnversEventListener.addCollectionChangeWorkUnit(BaseEnversEventListener.java:107) at org.hibernate.envers.event.spi.BaseEnversEventListener.generateBidirectionalCollectionChangeWorkUnits(BaseEnversEventListener.java:76) at org.hibernate.envers.event.spi.EnversPostInsertEventListenerImpl.onPostInsert(EnversPostInsertEventListenerImpl.java:49) at org.hibernate.action.internal.EntityInsertAction.postInsert(EntityInsertAction.java:164) at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:131) at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:586) at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:460) at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:337) at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39) at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1428) at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:484) at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3190) at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2404) at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:467) at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:320) at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:47) at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:37) at com.atomikos.icatch.jta.Sync2Sync.beforeCompletion(Sync2Sync.java:50) at com.atomikos.icatch.imp.TransactionStateHandler.notifyBeforeCompletion(TransactionStateHandler.java:261) at com.atomikos.icatch.imp.TransactionStateHandler.commit(TransactionStateHandler.java:236) at com.atomikos.icatch.imp.CompositeTransactionImp.doCommit(CompositeTransactionImp.java:288) at com.atomikos.icatch.imp.CompositeTransactionImp.commit(CompositeTransactionImp.java:337) at com.atomikos.icatch.jta.TransactionImp.commit(TransactionImp.java:191) ... 7 more  ```   WIth some analysis I found that TransactionalEntityManagerSynchronization (org.springframework.orm.jpa.EntityManagerFactoryUtils) closes the entityManager too early and there's no way to configure or change the following:  ```java  org.springframework.transaction.support.ResourceHolderSynchronization  	protected boolean shouldReleaseBeforeCompletion() { 		return true; 	} ```  In hibernate 4.x there's no problem because the EntityManager and hibernate Session are two different instances and closing the entity manager won't always close the hibernate session. In hibernate 5.2.x they are the same instance.  I created a small setup where I can reproduce the issue. Please find it attached. Main class: ```java com.myapp.App  ``` ```  ---  **Affects:** 4.3.7  **Attachments:** - [MyApp.zip](https://jira.spring.io/secure/attachment/23802/MyApp.zip) (_11.71 kB_)  **Issue Links:** - #18899 Support for Hibernate ORM 5.2","closed","status: invalid,","spring-projects-issues","2017-03-09T07:49:23Z","2019-01-12T05:21:05Z"
"","19740","util:properties  write spring-el for ignore-resource-not-found to make it dynamic [SPR-15174]","**[Alireza Fattahi](https://jira.spring.io/secure/ViewProfile.jspa?name=afattahi)** opened **[SPR-15174](https://jira.spring.io/browse/SPR-15174?redirect=false)** and commented  It will be good idea if we can write spring-el for  ```java ignore-resource-not-found ```  of ```java util:properties  ```  and other tags.  Thanks! ```    --- No further details from [SPR-15174](https://jira.spring.io/browse/SPR-15174?redirect=false)","open","type: enhancement,","spring-projects-issues","2017-01-21T07:03:53Z","2017-01-21T09:33:05Z"
"","19811","PathPatternParser#parse method failed with java.lang.IndexOutOfBoundsException [SPR-15246]","**[Aliaksei Zhynhiarouski](https://jira.spring.io/secure/ViewProfile.jspa?name=aliaksei-lithium)** opened **[SPR-15246](https://jira.spring.io/browse/SPR-15246?redirect=false)** and commented  It looks like new PathPatternParser, that introduced for path matching in recent updates works in not thread safe manner. If there are a lot of clients try to achieve URL, they all will fail due java.lang.IndexOutOfBoundsException caused by PathPatternParser:127  Steps to reproduce: 1. Checkout project    https://github.com/aliaksei-lithium/microservices-framework-benchmark/tree/feature/reactor-improve/spring-boot-reactor    (**feature/reactor-improve** branch and **spring-boot-reactor** folder) 2. Start server and run `wrk -t4 -c128 -d2s http://localhost:8080` to simulate the highload to the endpoint 3. Observe the error (java.lang.IndexOutOfBoundsException) in logs. 4. Other requests will fail also.  Connected with #19112  ---  **Issue Links:** - #19112 HTTP request pattern matching refinements  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/babd5517aa892750bf6aca34e9572d67e84aa410, https://github.com/spring-projects/spring-framework/commit/2ac08afab5085238947fc94c1590e22a2998004d","closed","type: bug,","spring-projects-issues","2017-02-10T21:59:36Z","2019-01-11T14:31:19Z"
"","19822","StandardMultipartFile.transferTo should fall back to manual copy if Part.write doesn't support absolute locations (e.g. on Jetty) [SPR-15257]","**[Aleš Laňar](https://jira.spring.io/secure/ViewProfile.jspa?name=hrabosch)** opened **[SPR-15257](https://jira.spring.io/browse/SPR-15257?redirect=false)** and commented  I found problem with `StandardMultipartHttpServletRequest.transferTo(File dest)`. This method calls write method with destination path of given file:  ``` @Override 		public void transferTo(File dest) throws IOException, IllegalStateException { 			this.part.write(dest.getPath()); 		} ```  But if I'll check write method of jetty-util, it wants only String fileName and problem is in this part:  ``` //part data is only in the ByteArrayOutputStream and never been written to disk                 _file = new File (_tmpDir, fileName); ```  Result is that there is _tmpDir (path of file) concated with filename where is actually complete path, so path is duplicated.  ---  **Affects:** 4.2.6  **Issue Links:** - #17251 Document how MultiPartFile.transferTo works with Servlet 3 - #19180 CommonsMultipartFile.getOriginalFilename() should be able to preserve header-specified filename as-is - #20304 Revise FileSystemResource / FileSystemUtils / FileCopyUtils towards NIO.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2233ec04ff4f9dd7c4cfeabeb4586685701421bf, https://github.com/spring-projects/spring-framework/commit/b73153cd7c88acf89efcc48500af8f971d6cac83","closed","type: enhancement,","spring-projects-issues","2017-02-15T13:02:02Z","2019-01-11T14:30:10Z"
"","20115","ResourceUtils.extractArchiveURL fails to work under Tomcat 8.0.41 with unpackWARs=false [SPR-15556]","**[Alexey Veklov](https://jira.spring.io/secure/ViewProfile.jspa?name=veklov)** opened **[SPR-15556](https://jira.spring.io/browse/SPR-15556?redirect=false)** and commented  Hi  It looks like ResourceUtils.extractArchiveURL also has an issue (Spring 4.3.8.RELEASE).  See comments in below snippet (marked with AV):  ``` public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {            // AV jarUrl = war:file:/C:/.war*//.css      String urlFile = jarUrl.getFile();            // AV urlFile = file:/C:/.war*//.css      int endIndex = urlFile.indexOf(WAR_URL_SEPARATOR);      if (endIndex != -1) {           // Tomcat's ""jar:war:file:...mywar.war*/WEB-INF/lib/myjar.jar!/myentry.txt""           String warFile = urlFile.substring(0, endIndex);           int startIndex = warFile.indexOf(WAR_URL_PREFIX); // AV","closed","type: bug,","spring-projects-issues","2017-05-16T15:04:52Z","2019-01-11T17:07:23Z"
"","20112","Inefficient use of keySet operators in messaging classes [SPR-15553]","**[Alexander Riss](https://jira.spring.io/secure/ViewProfile.jspa?name=ariss@adobe.com)** opened **[SPR-15553](https://jira.spring.io/browse/SPR-15553?redirect=false)** and commented  the messenging classes use the keySet for iterating the entrySet and cause more map lookups than needed (e.g. for headers)   ---  **Affects:** 4.3.8, 5.0 RC1  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1394, and commits https://github.com/spring-projects/spring-framework/commit/fa09cd3737680fa1a1a35548baf7b5228b984720, https://github.com/spring-projects/spring-framework/commit/9e3f4ccce95b76e5c43a07a226871e0c5f7612d4, https://github.com/spring-projects/spring-framework/commit/e49a5d8424a0bbf059fe7fa23b13c50d39b36a7b","closed","type: enhancement,","spring-projects-issues","2017-05-16T08:40:08Z","2017-06-07T20:04:28Z"
"","19917","Clarification: Spring AOP pointcuts match protected methods when CGLIB is used [SPR-15354]","**[Alexander Kriegisch](https://jira.spring.io/secure/ViewProfile.jspa?name=kriegaex)** opened **[SPR-15354](https://jira.spring.io/browse/SPR-15354?redirect=false)** and commented  _Disclaimer: I am not a Spring user, just an AspectJ expert trying to answer a [StackOverflow question](http://stackoverflow.com/a/42855681/1082681) related to Spring AOP._  The Spring documentation in chapter 11.2.3 says:  > Due to the proxy-based nature of Spring’s AOP framework, **protected methods are by definition not intercepted,** neither for JDK proxies (where this isn’t applicable) nor for CGLIB proxies (where this is technically possible but not recommendable for AOP purposes). As a consequence, any given pointcut will be matched against public methods only! > If your interception needs include protected/private methods or even constructors, consider the use of Spring-driven native AspectJ weaving instead of Spring’s proxy-based AOP framework. This constitutes a different mode of AOP usage with different characteristics, so be sure to make yourself familiar with weaving first before making a decision.  Anyway, after I set up a little Spring Boot project and tried to use Spring AOP on a class, I saw that at least for CGLIB proxies pointcuts match protected methods. I was really surprised because the documentation says otherwise. So either the documentation is not up to date with this new ""feature"" or this is a regression - since which version I cannot say.  When debugging into the advice with `@EnableAspectJAutoProxy(proxyTargetClass = true, exposeProxy = true)` and inspecting `AopContext.currentProxy()` I also see that a CGLIB proxy is created for a class which only has one protected method and for which the pointcut should not even match, thus not create a proxy.  Just try something like this:  ``` package spring.aop;  import java.lang.annotation.*; import java.util.concurrent.TimeUnit;  @Documented @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface RetryOnFailure {     int attempts() default 2;     long delay() default 1;     TimeUnit unit() default TimeUnit.SECONDS; } ```  ``` package spring.aop;  import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController;  import java.util.concurrent.TimeUnit;  @RestController(""/"") public class HomeController {      static int counter = 0;      @RequestMapping     @RetryOnFailure(attempts = 3, delay = 2, unit = TimeUnit.SECONDS)     protected String index() {         throw new RuntimeException(""Exception in try "" + ++counter);     } } ```  ``` package spring.aop;  import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.springframework.stereotype.Component;  @Aspect @Component public final class MethodRepeater {      @Around(""execution(* spring.aop..*(..)) && @annotation(retryOnFailure)"")     public Object wrap(final ProceedingJoinPoint joinPoint, RetryOnFailure retryOnFailure) throws Throwable {         System.out.println(joinPoint);         return proceed(joinPoint, retryOnFailure);     }      private Object proceed(ProceedingJoinPoint joinPoint, RetryOnFailure retryOnFailure) throws Throwable {         int attempt = 1;         while (true) {             try {                 return joinPoint.proceed();             } catch (final Throwable ex) {                 System.out.println(""Try #"" + attempt + "" failed: "" + ex);                 if (++attempt >= retryOnFailure.attempts())                     return ""OK"";                 if (retryOnFailure.delay() > 0L)                     retryOnFailure.unit().sleep(retryOnFailure.delay());             }         }     } } ```  ``` package spring.aop;  import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication;  @SpringBootApplication public class DemoApplication {     public static void main(String[] args) {         SpringApplication.run(DemoApplication.class, args);     } } ```  ---  **Affects:** 4.3.7  **Reference URL:** https://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html#aop-pointcuts-designators  **Issue Links:** - #6308 Cannot intercept calls to protected methods of CGLIB proxied class - #15733 ""CglibAopProxy: Unable to proxy method"" WARN when bean class contains static final method - #16241 CglibAopProxy needs to detect package-visible methods when defined in a different ClassLoader - #19997 Revisit CGLIB AOP proxy warnings for final methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b90d3d0e88eabe4e0bfd42c793cf193c5e1088f0, https://github.com/spring-projects/spring-framework/commit/66670cfd56983668729f70291e4be5076e7d8de0","closed","in: core,","spring-projects-issues","2017-03-17T10:48:20Z","2019-01-11T15:03:42Z"
"","19915","Autowired for collection work incorrect [SPR-15352]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=kruglikav)** opened **[SPR-15352](https://jira.spring.io/browse/SPR-15352?redirect=false)** and commented  When I autowire beans as collection, this beans created by default constructor, but their annotations PostConstract and Autowired don't work.  ```java @Configuration public class Config {     @Bean     @Autowired     public SomeBean someBean(Collection","closed","in: core,","spring-projects-issues","2017-03-16T15:08:24Z","2022-02-18T19:11:10Z"
"","20385","Using @JsonTypeInfo property impose in sub class [SPR-15830]","**[Alex Rader](https://jira.spring.io/secure/ViewProfile.jspa?name=rrader)** opened **[SPR-15830](https://jira.spring.io/browse/SPR-15830?redirect=false)** and commented  ```java @JsonTypeInfo( use = JsonTypeInfo.Id.NAME,  include = JsonTypeInfo.As.PROPERTY, property = ""type"") @JsonSubTypes({@JsonSubTypes.Type(Dog.class), @JsonSubTypes.Type(Elephant.class)}) public abstract class Animal {     private String sound;      public String getSound() {         return sound;     }      public void setSound(String sound) {         this.sound = sound;     } }  @JsonTypeName(""dog"") public class Dog extends Animal { }  @JsonTypeName(""elephant"") public class Elephant extends Animal { }  @Controller public class MyController {      @RequestMapping(value = ""animal"")     public  @ResponseBody String save(@RequestBody  Animal animal) {         System.out.println(animal.getClass());         return success;     }      @RequestMapping(value = ""dog"")     public  @ResponseBody String save(@RequestBody  Dog dog) {         System.out.println(dog.getClass());         return success;     } } ```  When I send request to /dog  ``` {     ""sound"": ""woof"" } ```  I get exception  ``` com.fasterxml.jackson.databind.JsonMappingException: Unexpected token (END_OBJECT), expected FIELD_NAME: missing property 'type' that is to contain type id  (for class Dog) ```  When I send ""type"" filed to /animal, this is ok, but for /dog this is not desired.   --- No further details from [SPR-15830](https://jira.spring.io/browse/SPR-15830?redirect=false)","open","in: web,","spring-projects-issues","2017-07-28T13:05:24Z","2021-11-08T11:46:07Z"
"","20266","WebAsyncManager is not compatible with the crosscontext mode [SPR-15709]","**[Alberto Mozzone](https://jira.spring.io/secure/ViewProfile.jspa?name=albert2springjira)** opened **[SPR-15709](https://jira.spring.io/browse/SPR-15709?redirect=false)** and commented  I stumbled on this very exact problem, not using _cross-jsp-inclusion_, but working in a Tomcat where the _Contexts_ are configured as `crossContext=""true""`. Please see:  https://stackoverflow.com/questions/22128150/spring-and-cross-context-webasyncmanager-cannot-be-cast-to-webasyncmanager  It would be really useful if `WebAsyncUtils.getAsyncManager` could trap the `ClassCastException` and create a new `WebAsyncManager` instead of bombing out.   ---  **Affects:** 3.2.18, 4.2.7","closed","type: bug,","spring-projects-issues","2017-06-27T14:12:26Z","2017-07-20T12:32:59Z"
"","20355","Incorrect work of AntPathMatcher's extractPathWithinPattern method [SPR-15800]","**[Aidar Gubaidulin](https://jira.spring.io/secure/ViewProfile.jspa?name=windgan)** opened **[SPR-15800](https://jira.spring.io/browse/SPR-15800?redirect=false)** and commented  This piece of code returns different results in Spring 3 and in Spring 4+  ```java String pattern = ""/om/v1/serviceInstance/*/healthcheck""; String string = ""/om/v1/serviceInstance/branch-Yellow/healthcheck"";  AntPathMatcher antPathMatcher = new AntPathMatcher(); String[] params = antPathMatcher.extractPathWithinPattern(pattern,string).split(""/"");  System.out.println(Arrays.toString(params)); ```  Output:  |Spring 3.2.4|Spring 4.2.4 and above| |:---|:---| |branch-Yellow|branch-Yellow, healthcheck|    ---  **Affects:** 4.2.9","closed","in: core,","spring-projects-issues","2017-07-20T14:00:21Z","2019-01-12T16:33:10Z"
"","19810","ConfigurationClassParser does not work with scanner-provided ClassLoader [SPR-15245]","**[Adrian J George III](https://jira.spring.io/secure/ViewProfile.jspa?name=georgeofjungle3)** opened **[SPR-15245](https://jira.spring.io/browse/SPR-15245?redirect=false)** and commented  When using a ClassPathBeanDefinitionScanner with a different class loader than the attached context, ConfigurationClassParser.asSourcreClass abandons the provided classloader and uses the context's loader instead. This leads to the class not being found and a failure of the context to initialize.  This line https://github.com/spring-projects/spring-framework/blob/5b98a54c9b9f8c2f4332734ee23cd483b7df0d22/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java#L627 calls through to https://github.com/spring-projects/spring-framework/blob/5b98a54c9b9f8c2f4332734ee23cd483b7df0d22/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java#L659 which uses the local class loader.  The problem can be reproduced here https://github.com/adrianjgeorge/classloading-poc  ---  **Affects:** 4.3.6  **Issue Links:** - #14977 ConfigurationClassParser needs to load annotations through source class loader","open","in: core,","spring-projects-issues","2017-02-10T20:04:11Z","2019-01-11T14:31:05Z"
"","19797","MockHttpServletRequest.protocol default should be ""HTTP/1.1"", not ""http"" [SPR-15232]","**[Adam Michalik](https://jira.spring.io/secure/ViewProfile.jspa?name=hattifnat)** opened **[SPR-15232](https://jira.spring.io/browse/SPR-15232?redirect=false)** and commented  `ServletRequest.getProtocol()` JavaDoc says  > Returns the name and version of the protocol the request uses in the form _protocol/majorVersion.minorVersion_, for example, HTTP/1.1.  However, `MockHttpServletRequest.protocol` defaults to `""http""` which violates the contract of the JavaDoc.  There is no way to override this default when using `MockMvc`  and `MockHttpServletRequestBuilder`, so the default `MockHttpServletRequest.protocol` should rather be `""HTTP/1.1""` so that it better resembles a real-life HTTP request.  ---  **Affects:** 4.3.6  **Issue Links:** - #19780 MockHttpServletRequest.getReader() returns null in case of no content","closed","type: bug,","spring-projects-issues","2017-02-08T13:27:05Z","2019-01-11T14:32:24Z"
"","20230","Spring Aspects 4.3.x framework Aync error [SPR-15671]","**[Abhik Setia](https://jira.spring.io/secure/ViewProfile.jspa?name=abhiksetia)** opened **[SPR-15671](https://jira.spring.io/browse/SPR-15671?redirect=false)** and commented  ava.lang.NoSuchMethodError: org.springframework.scheduling.aspectj.AbstractAsyncExecutionAspect.ajc$around$org_springframework_scheduling_aspectj_AbstractAsyncExecutionAspect$1$6c004c3e(Lorg/aspectj/runtime/internal/AroundClosure;Lorg/aspectj/lang/JoinPoint$StaticPart;Lorg/aspectj/lang/JoinPoint;)Ljava/lang/Object;  I was running version 4.0.x and it was running fine ,after updating it to 4.3.x it caused this error.   ---  **Affects:** 4.3.9","open","in: core,","spring-projects-issues","2017-06-16T04:51:33Z","2019-01-11T16:04:50Z"
"","20339","WebClient completes abruptly emitting null [SPR-15784]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-15784](https://jira.spring.io/browse/SPR-15784?redirect=false)** and commented  It appears that in some situations, the `WebClient` completes abruptly emitting a null. Consider the following code in Kotlin that verifies whether a link is active or not:  ``` Mono.justOrEmpty(cache.getIfPresent(path))     .map { it as Boolean }     .switchIfEmpty(webClient             .head()             .uri(link)             .exchange()             .retry(2L, {                 when (it) {                     is UnknownHostException -> false                     is IOException -> true                     else -> false                 }             })             .map { it.statusCode().value() }             .doOnNext { log.debug(""Received status code: {} from: {}."", it, link) }             .map { it < 400 }             .doOnSuccess { if (Objects.nonNull(it)) cache.put(path, it) }             .onErrorResume { t -> log.error(""Failed to verify link: {}."", link, t); Mono.just(false) } ```  For URL `http://www.opensource.org/licenses/cddl1.php`, above code **sometimes** calls `doOnSuccess` with `null`; it is unacceptable to put a `null` in the stream.  Related SO threads:  [Reactive WebClient not emitting a response](https://stackoverflow.com/questions/44930448/reactive-webclient-not-emitting-a-response)  [WebClient not emitting a response](https://stackoverflow.com/questions/44348697/webclient-not-emitting-a-response)   ---  **Affects:** 5.0 RC2","closed","type: bug,","spring-projects-issues","2017-07-17T19:06:43Z","2017-07-24T07:51:14Z"
"","20337","Avoid silent default to http://localhost:80 in ReactorHttpClientConnector [SPR-15782]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-15782](https://jira.spring.io/browse/SPR-15782?redirect=false)** and commented  In the following code, `baseUrl` is not replaced and defaults to `http://localhost:80`.  ``` WebClient.builder()     .build()     .get()     .uri(""{baseUrl}/api/v4/groups/{groupName}"", baseUrl, groupName) ```    ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/147368eccca6d8d8696952c2669efd252b729fb6","closed","type: enhancement,","spring-projects-issues","2017-07-17T12:18:16Z","2017-07-24T07:51:14Z"
"","20333","Document non trivial WebClient configurations [SPR-15778]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-15778](https://jira.spring.io/browse/SPR-15778?redirect=false)** and commented  I'm looking to migrate to `WebClient` from Apache `HttpClient` that currently has the following configurations. I could not find any of these using the `WebClient`.  1. Custom `javax.net.ssl.SSLContext`: I'm accepting all certificates but logging when a certificate fails validation; details in this [SO thread](https://stackoverflow.com/questions/45070473/how-to-ignore-ssl-certificate-error-using-apache-httpclient-but-log-it). 2. Socket and connection timeouts 3. Retrieving the redirect URLs, if any: `HttpClient` remembers all the redirect URLs. 4. Caching (Apache has a `CachingHttpClients`): I'm not very concerned if this feature is not built in the `WebClient` because I can use Spring cache abstraction. I'd just like to know whether the client has first-class support for caching or not.  In general, when using `RestTemplate`, there's a whole bunch of `ClientHttpRequestFactory` implementations to choose from, or customize upon. How do I achieve such flexibility with `WebClient` so that if I want to switch out the underlying HTTP client, I can?   ---  **Affects:** 5.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f9e1913e0d6fdbfb092ff14d17e84275d8926bd3","closed","type: task,","spring-projects-issues","2017-07-16T06:22:13Z","2019-01-11T16:26:03Z"
"","19650","ServerHttpRequest getURI doesn't return the port the application is running on [SPR-15084]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-15084](https://jira.spring.io/browse/SPR-15084?redirect=false)** and commented  Brain dead simple application:  ``` @SpringBootApplication public class DemoApplication {     public static void main(String[] args) {         SpringApplication.run(DemoApplication.class, args);     }      @RestController     public static class DemoController {         @GetMapping(""/"")         public String getUri(ServerHttpRequest request) {             return request.getURI().toString();         }     } } ```  **Test**:  ``` @RunWith(SpringRunner.class) @SpringBootTest(         webEnvironment = RANDOM_PORT ) public class DemoApplicationTest {     @LocalServerPort     private int port;      private WebClient webClient = WebClient.create(new ReactorClientHttpConnector());      @Test     public void testGetUri() {         ClientRequest request = ClientRequest.GET(""http://localhost:"" + port)                 .build();          URI uri = webClient.exchange(request)                 .then(response -> response.bodyToMono(String.class))                 .log()                 .map(URI::create)                 .block(Duration.ofSeconds(3l));          assertThat(uri.getPort())                 .as(""Application port: %d, returned port: %d."", port, uri.getPort())                 .isEqualTo(port);     } } ```  **Failure**:  ``` org.junit.ComparisonFailure: [Application port: 14645, returned port: 55802.]  Expected :14645 Actual   :55802 ```  I've attached the Gradle project.   ---  **Affects:** 5.0 M4  **Attachments:** - [demo.zip](https://jira.spring.io/secure/attachment/23673/demo.zip) (_61.67 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5cac619e237f8f71208142ad78c06a7d15b34c72","closed","type: bug,","spring-projects-issues","2017-01-03T09:56:35Z","2017-07-24T07:51:14Z"
"","19646","WebClient mixes up state from separate requests  [SPR-15080]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-15080](https://jira.spring.io/browse/SPR-15080?redirect=false)** and commented  ``` @Controller public class IgController {     @Autowired     private IgService igService;      @ResponseBody     @GetMapping(value = ""/callback"", produces = APPLICATION_JSON_UTF8_VALUE)     public Mono callback(@RequestParam(""code"") String code) {         return igService.callback(code);     } } ```  ``` public class IgService {     private final ExchangeFunction igClient = WebClient.create(new ReactorClientHttpConnector());      @Value(""${server.port:8080}"")     private int port;     @Value(""${HOST:}"")     private String host;     @Value(""${CLIENT_ID}"")     private String clientId;     @Value(""${CLIENT_SECRET}"")     private String clientSecret;      @Autowired     private IgProperties igProperties;      private String authorizationUrl;     private String redirectUri;      @PostConstruct     public void postConstruct() throws UnknownHostException {         host = StringUtils.isEmpty(host) ? host() : host;         redirectUri = String.format(""%s/callback"", host);         authorizationUrl = UriComponentsBuilder.fromUriString(igProperties.getAuthorizeUrl())                 .queryParam(""client_id"", clientId)                 .queryParam(""redirect_uri"", redirectUri)                 .queryParam(""response_type"", ""code"")                 .build()                 .toUriString();     }      private String host() throws UnknownHostException {         return String.format(""http://%s:%d"", InetAddress.getLocalHost().getHostAddress(), port);     }      public final Mono authorizationUrl() {         return Mono.just(authorizationUrl);     }      public final Mono callback(String code) {         return accessToken(code)                 .then(token -> top(recentPostsUrl(token)));     }      private Mono accessToken(String code) {         MultiValueMap queryParams = new LinkedMultiValueMap();         queryParams.add(""client_id"", clientId);         queryParams.add(""client_secret"", clientSecret);         queryParams.add(""grant_type"", ""authorization_code"");         queryParams.add(""redirect_uri"", redirectUri);         queryParams.add(""code"", code);          return accessToken(igProperties.getAccessTokenUrl(), queryParams);     }      private String recentPostsUrl(AccessToken accessToken) {         return String.format(""%s?access_token=%s"", igProperties.getRecentPostsUrl(), accessToken.getToken());     }      protected Mono accessToken(String accessTokenUrl, MultiValueMap queryParams) {         ClientRequest request = ClientRequest.POST(accessTokenUrl)                 .contentType(APPLICATION_FORM_URLENCODED)                 .body(BodyInserters.fromObject(queryParams));          return igClient.exchange(request)                 .then(response -> response.bodyToMono(AccessToken.class));     }      protected Mono top(String recentPostsUrl) {         ClientRequest request = ClientRequest.GET(recentPostsUrl)                 .build();          return igClient.exchange(request)                 .then(response -> response.bodyToMono(Media.class));     } } ```  ``` org.springframework.http.codec.UnsupportedMediaTypeException: Content type 'application/x-www-form-urlencoded' not supported         at org.springframework.web.reactive.function.BodyInserters.lambda$null$12(BodyInserters.java:234) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]         at java.util.Optional.orElseGet(Optional.java:267) ~[na:1.8.0_112]         at org.springframework.web.reactive.function.BodyInserters.lambda$bodyInserterFor$13(BodyInserters.java:230) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]         at org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.writeTo(DefaultClientRequestBuilder.java:220) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] ```  Configuring a `FormHttpMessageWriter` should've been sufficient to fix this but isn't. The reason is the `canWrite` method:  ``` @Override public boolean canWrite(ResolvableType elementType, MediaType mediaType) { 	return MULTIVALUE_TYPE.isAssignableFrom(elementType) && 			(mediaType == null || MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(mediaType)); } ```  `WebClient` is mixing up the content type from `accessToken` (`APPLICATION_FORM_URLENCODED`) with the return type of  `top` (`Media`). Thus, `canWrite` returns `false` causing the exception shown.  Using `RestTemplate` works fine. I've tests using `WebClient` and `RestTemplate` to prove the difference. To reproduce the issue, do the following: 1. Get from the project from [here](https://github.com/asarkar/java-ee/tree/master/ig-client). 2. Navigate to directory `ig-client` and run `./gradlew clean test`. Test `IgServiceTest.testCallback()` shall fail. 3. The console shall show the stacktrace given above.    ---  **Affects:** 5.0 M4","closed","status: invalid,","spring-projects-issues","2017-01-01T09:40:52Z","2019-01-12T05:21:30Z"
"","19645","No way to convert ClientResponse to a Mono [SPR-15079]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-15079](https://jira.spring.io/browse/SPR-15079?redirect=false)** and commented  `WebClient.exchange` returns a `ClientResponse` that can be converted to a publisher as follows:  ``` igClient.exchange(request)     .then(response -> response.bodyToMono(Collection.class)); ```  This forces the method return type to be `Mono`, thus putting us back before Java 5. There should be a way to specify a parameterized type like we can do with `RestTemplate`.  ``` restTemplate.exchange(""http://whatever"",     GET, null, new ParameterizedTypeReference() {} );  ```  Note that this is not the same as `response.bodyToFlux` (or is it?)   ---  **Affects:** 5.0 M4","closed","status: declined,","spring-projects-issues","2017-01-01T04:19:26Z","2019-01-12T16:33:41Z"
"","19644","Redirect from controller can't resolve view [SPR-15078]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-15078](https://jira.spring.io/browse/SPR-15078?redirect=false)** and commented  Using Boot 2.0.0.BUILD-SNAPSHOT and spring-boot-dependencies-web-reactive:0.1.0.BUILD-SNAPSHOT.  ``` @GetMapping(""/"") Mono redirect() {         return ServerResponse.status(TEMPORARY_REDIRECT)                 .location(URI.create(authorizationUrl))                 .build(); } ```  **Stacktrace**:  ``` java.lang.IllegalStateException: Could not resolve view with name ''. 	at org.springframework.web.reactive.result.view.ViewResolutionResultHandler.lambda$resolveViews$5(ViewResolutionResultHandler.java:276) ~[spring-web-reactive-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:111) [reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:990) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] 	at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:113) ~[reactor-core-3.0.4.RELEASE.jar:3.0.4.RELEASE] ```  Also commented on the related issue : #19103  ---  **Affects:** 5.0 M4","closed","status: declined,","spring-projects-issues","2017-01-01T04:06:04Z","2019-01-12T16:33:43Z"
"","20118","Multipart range requests leave file handles open [SPR-15559]","**[Aaron Sharp](https://jira.spring.io/secure/ViewProfile.jspa?name=asharp)** opened **[SPR-15559](https://jira.spring.io/browse/SPR-15559?redirect=false)** and commented  If a browser sends a multipart range request (with the header Range: bytes=1-2,3-4), the ResourceRegionHttpMessageConverter executes its method writeResourceRegionCollection(Collection, HttpOutputMessage). This method opens input streams to each ResourceRegion that the request specifies, but never closes them. These file handles are left open, and if too many accumulate, the web server can crash.  So far, I have only seen multipart range requests when Internet Explorer (version 11) is interrupted during a long download, and the user clicks refresh to complete the download.   ---  **Affects:** 4.3.7, 4.3.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eaac348c05d2ac2a6e9ea5627e7d46b8a821c87a, https://github.com/spring-projects/spring-framework/commit/22bf9febcce6c13844a662a2da5433c12f218422","closed","type: bug,","spring-projects-issues","2017-05-16T21:17:49Z","2017-06-07T20:04:28Z"
"","19707","Add a feature that enables registering Spring beans as Jackson field serializers [SPR-15141]","**[ André Benjamin](https://jira.spring.io/secure/ViewProfile.jspa?name=outkast)** opened **[SPR-15141](https://jira.spring.io/browse/SPR-15141?redirect=false)** and commented  For example adding a feature that when someone defines the following class with a field annotated with `JsonSerialize`:  ```java import com.fasterxml.jackson.databind.annotation.JsonSerialize;  public class Software {     @JsonSerialize(using = LicenseSerializer.class)     private String license; } ```  Spring first tries to resolve `LicenseSerializer` from the beans context, and only when there was not such a bean declared, to let Jackson use its default mechanism of resolving and instantiating the bean.  So if I have:  ```java @Component public class LicenseSerializer implements JsonSerializer {  } ```  Spring resolves the serializer from the beans context.   --- No further details from [SPR-15141](https://jira.spring.io/browse/SPR-15141?redirect=false)","closed","status: declined,","spring-projects-issues","2017-01-15T04:30:45Z","2022-02-18T19:24:27Z"
"","1417","SPR-15525-update HandlerExecutionChain toString()","#SPR-15525","closed","","QBNemo","2017-05-07T14:44:12Z","2017-05-17T12:07:30Z"
"","1373","HttpOnly Cookie Result Matcher","# Added a httpOnly cookie ResultMatcher in spring test web [SPR-15488](https://jira.spring.io/browse/SPR-15488)  Also, FIxed a small typo in a String var (""unknowCookie"" to ""unknownCookie"")  Basically it allows us to do the following:  ``` @Test  public void someTest(){     ....     Cookie cookie = result.getResponse().getCookie(name);     assertEquals(""Response cookie httpOnly"", httpOnly, cookie.isHttpOnly()); }  ```","closed","","lc-nyovchev","2017-04-04T17:53:13Z","2017-04-27T13:20:07Z"
"","1485","meaningful constant Ordered.LOWEST_PRECEDENCE","","closed","","QBNemo","2017-07-22T09:05:59Z","2018-03-30T18:09:49Z"
"","1479","spring4.3.x","","closed","","tasnemhou","2017-07-18T14:35:22Z","2017-07-18T15:01:17Z"
"","1476","Allow empty body with no content type in BodyExtractors","","closed","","rstoyanchev","2017-07-14T12:40:14Z","2017-07-14T12:45:32Z"
"","1467","Polish - the flag continueProcessing is not needed","","closed","","violetagg","2017-06-30T07:01:12Z","2017-07-04T10:06:30Z"
"","1464","Enable suspend/resume on reactive TomcatWebSocketSession","","closed","","violetagg","2017-06-26T13:29:12Z","2017-06-30T07:15:17Z"
"","1460","(refactoring) Use of lambda expressions instead of foreach (exist pattern)","","closed","","rbonifacio","2017-06-16T11:17:42Z","2017-06-16T12:21:16Z"
"","1459","Refact iterator of Map with Java8's Map.forEach","","closed","","diguage","2017-06-13T09:54:20Z","2017-06-14T03:30:07Z"
"","1457","add @FunctionalInterface annotation","","closed","","diguage","2017-06-10T05:01:01Z","2017-06-12T11:53:33Z"
"","1455","add EditorConfig file, help to unified code style","","closed","","diguage","2017-06-09T03:08:05Z","2017-06-12T15:11:54Z"
"","1454","use lambda to refact the code","","closed","","diguage","2017-06-07T16:40:15Z","2017-08-12T10:44:43Z"
"","1453","use lambda to refact the code","","closed","","diguage","2017-06-07T16:09:39Z","2017-06-07T16:36:37Z"
"","1451","Refact iterator of Map with Java 8 forEach","","closed","","diguage","2017-06-05T17:04:44Z","2017-06-12T15:12:40Z"
"","1450","Use the diamond syntax","","closed","","diguage","2017-06-05T11:22:33Z","2017-06-12T15:12:53Z"
"","1449","Use Map.forEach instead of Map.entrySet().forEach","","closed","","diguage","2017-06-05T08:40:44Z","2017-06-12T15:13:16Z"
"","1447","Refact iterator of Map with Java 8 forEach","","closed","","diguage","2017-06-04T01:23:14Z","2017-06-05T17:05:42Z"
"","1446","Refact with Java8 Stream API","","closed","","diguage","2017-06-03T16:00:46Z","2017-06-12T15:13:54Z"
"","1445","Refactoring duplicate code","","closed","","diguage","2017-06-03T15:12:33Z","2017-06-04T13:32:47Z"
"","1438","[javadoc]: fixed duplicate words from javadoc comments","","closed","","ameyjadiye","2017-05-29T18:35:41Z","2017-05-30T06:56:28Z"
"","1437","4.3.x","","closed","","danlihome","2017-05-27T06:48:48Z","2017-05-27T07:47:49Z"
"","1436","Correct the javadoc for ExchangeResult.getUrl()","","closed","","wilkinsona","2017-05-26T19:59:24Z","2017-05-27T07:01:54Z"
"","1429","Override requiredContextClass() in WebApplicationObjectSupport","","closed","in: web,","QBNemo","2017-05-17T12:04:31Z","2021-11-15T12:28:01Z"
"","1412","Replace lambdas with method references","","closed","","eddumelendez","2017-05-01T20:34:32Z","2018-03-30T14:39:53Z"
"","1410","4.3.x","","closed","","yaozheDx","2017-05-01T10:32:44Z","2017-05-01T11:08:47Z"
"","1409","Simplify Netty dependency management by importing its bom","","closed","","eddumelendez","2017-04-30T17:47:18Z","2017-05-04T08:52:16Z"
"","1405","SPR-15469 Lazily initialize Environment in GenericFilterBean","","closed","","xenoterracide","2017-04-26T01:14:28Z","2017-04-27T19:15:25Z"
"","1398","Do not use hard coded strings","","closed","","QBNemo","2017-04-24T15:50:48Z","2017-04-25T08:08:48Z"
"","1397","(painfully minor typo) remove extraneous asterisk","","closed","","jtigger","2017-04-21T03:50:32Z","2017-04-21T07:49:44Z"
"","1396","adding","","closed","","RaviRajamani","2017-04-20T18:44:10Z","2017-04-22T09:48:11Z"
"","1394","fix inefficient use of keySet operators in messaging classes","","closed","","alexander-riss","2017-04-19T14:58:00Z","2017-05-16T09:22:23Z"
"","1391","4.3.x","","closed","","prashiln79","2017-04-16T06:10:30Z","2017-04-16T06:37:18Z"
"","1389","remove unnecessary indent","","closed","","alex-on-java","2017-04-13T13:32:39Z","2017-04-16T06:47:14Z"
"","1388","pakeiciau repo","","closed","","backend-developer","2017-04-13T08:03:54Z","2017-04-13T08:04:12Z"
"","1383","Typo fix","","closed","","gavvvr","2017-04-09T16:28:36Z","2017-04-10T07:55:29Z"
"","1382","Fix typo in AfterReturningAdviceInterceptor JavaDoc","","closed","","pivotaljohn","2017-04-08T22:20:57Z","2017-06-29T17:12:17Z"
"","1371","3.2.x","","closed","","jerrylye","2017-04-02T08:03:29Z","2017-04-02T08:13:46Z"
"","1365","typo fix in docs","","closed","","gavvvr","2017-03-24T09:19:50Z","2017-03-24T09:24:27Z"
"","1364","Doc: Possessive its has no apostrophe","","closed","","nertzy","2017-03-23T17:06:14Z","2017-07-12T20:11:04Z"
"","1359","4.2.x","","closed","","huabao310","2017-03-20T06:39:22Z","2017-03-20T07:16:25Z"
"","1350","test","","closed","","chengshuanghub","2017-03-06T09:25:57Z","2017-03-06T14:15:04Z"
"","1341","3.2.x","","closed","","kineck","2017-02-26T12:55:21Z","2017-02-26T12:56:36Z"
"","1340","Polishing","","closed","","pistriak","2017-02-25T15:26:05Z","2017-02-25T15:51:06Z"
"","1339","Polishing","","closed","","pistriak","2017-02-25T14:58:01Z","2017-02-25T15:22:37Z"
"","1336","SPR-6384 - Allows exclusion of columns in the insert statement.","","closed","in: data,","sjardine","2017-02-22T23:19:03Z","2022-02-18T19:11:07Z"
"","1328","update","","closed","","LuoYuWuSheng","2017-02-15T01:23:30Z","2017-02-15T06:44:51Z"
"","1327","fix java doc.","","closed","","hengyunabc","2017-02-14T09:24:12Z","2017-02-14T09:41:13Z"
"","1318","Cache the invocation of Annotation.annotationType()","","closed","","violetagg","2017-02-06T19:05:34Z","2017-04-12T06:24:32Z"
"","1317","Simplify the calculation of UndertowServerHttpRequest.uri","","closed","","violetagg","2017-02-06T18:19:40Z","2017-02-08T21:59:11Z"
"","1312","remove the word the","","closed","","grimreaper","2017-02-02T23:06:40Z","2017-02-03T06:36:23Z"
"","1311","Update WebFluxConfigurer.java","","closed","","grimreaper","2017-02-02T23:06:33Z","2017-02-03T06:38:28Z"
"","1299","4.3.x","","closed","","rwadazhao","2017-01-17T13:15:28Z","2017-01-17T13:56:17Z"
"","1293","SPR-14544 Introduce PathPatternParser for optimized path matching","","closed","","bclozel","2017-01-11T22:03:10Z","2017-02-09T15:27:19Z"