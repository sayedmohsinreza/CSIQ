"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","399","Update overview.html","合并原作者的更新","closed","","mezhou887","2013-11-03T15:26:21Z","2013-11-03T15:29:01Z"
"","508","Update Java EE spec dependencies","Where officially published to Maven Central, Java EE spec artifacts are moving to using coordinates of the form `:-api`, for example `javax.servlet.jsp:javax.servlet.jsp-api`. The build was already using some APIs with coordinates in this form, for example `javax.servlet.jsp:javax.servlet.jsp-api:2.2.1`. This PR updates the build to consistently use these new coordinates.","closed","","wilkinsona","2014-04-01T10:35:24Z","2014-06-14T13:09:03Z"
"","425","Sort the scanned Hibernate entities by name","When using AnnotationSessionFactoryBean.packagesToScan, the scan does not find annotated classes in a specific or stable order. The order used to add the classes to the configuration of the SessionFactory has a direct impact on the SQL queries generated by Hibernate, so different JVMs will generate queries that are equivalent but not equal: - It's impossible to get aggregated statistics across instances - It causes additional load for the database which has to parse   different queries  This is fixed by sorting the classes by fully qualified name, which provides a stable order across runs. It only adds stability and predictability, without changing the functionality.  Issue: [SPR-7742](https://jira.springsource.org/browse/SPR-7742)  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","fpavageau","2013-12-09T21:58:42Z","2013-12-10T21:26:41Z"
"","491","SPR-11581 Filter empty MIME types in BufferedImageHttpMessageConverter","When Oracle JAI is installed, `ImageIO.getReaderMIMETypes()` and `ImageIO.getWriterMIMETypes()` both return arrays with a leading empty string. It is unclear whether this is a valid behavior from `ImageIO` (the Javadocs are not specific), but it is not handled by `BufferedImageHttpMessageConverter`. That causes SpringMVC to fail to initialize when JAI is installed. - When looping over `ImageIO getReaderMIMETypes()` and `getWriterMIMETypes()` strip out any empty strings in `BufferedImageHttpMessageConverter`  The static nature of `ImageIO` makes writing a test for this difficult. If anyone has a suggestion for how one might be written to make this patch acceptable, I'd be happy to write it.","closed","","bturner","2014-03-20T05:09:48Z","2014-06-30T04:39:27Z"
"","391","Change validate() overloaded methods check (SPR-11025)","When checking for overloaded methods, ConfigurationClass.validate() don't take in account overloaded methods from superclasses.  The check was updated with the following steps - Add getParamerTypes to MethodMetadata interface - Split beanMethods Set into Lists by method name - For each bean method list, test that all have the same parameters - add Spr11025Test  Issue: SPR-11025","closed","","chelu","2013-10-23T22:47:25Z","2014-06-24T17:19:45Z"
"","390","Java config bean definitions are overridden by superclass (SPR-10992)","When adding bean methods from a Configuration class, overridden methods from superclass are added too and it's bean definition overrides those declared in the subclass.  The fix add a new method, getBeanMethodsToDefine to  ConfigurationClass that filter overriden methods,  for use in ConfigurationClassBeanDefinitionReader  Issue: SPR-10992  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","chelu","2013-10-19T03:04:24Z","2014-06-18T10:56:36Z"
"","398","Fix configuration class overriden/overloaded methods issues (SPR-10992, SPR-10988)","When adding bean methods from a configuration class, overridden methods from superclass are added too and it's bean definition overrides those declared in the subclass.  The fix add a new method, getBeanMethodsToDefine that filter overriden methods for use in ConfigurationClassBeanDefinitionReader  When overloading methods from a configuration class, the most specific subclass bean method is invoked only if - Argument types has the best match - Overloaded method in subclass has the same number of arguments.  The fix sets the factory method to use from beanMethod metadata to RootBeanDefinition.resolvedConstructorOrFactoryMethod in ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForBeanMethod() to avoid looking for appropiate factory method in ConstructorResolver  later.  This pull request already includes changes from https://github.com/spring-projects/spring-framework/pull/390  Issues: SPR-10992, SPR-10988","closed","","chelu","2013-10-30T09:46:22Z","2013-11-04T23:33:13Z"
"","515","With relation to [SPR-11126] problem converting empty parameter to List,","We want to get a request parameter with the type of List in the Spring-mvc Controller class like below  ``` java SampleController.java @RequestMapping(value = ""/urlpath"") public void create(@RequestParam(value = ""param"") List paramList) {  ... } ```  When invoking "".../urlpath?param="", We expect `List` has size 1 with empty String value, but actually the size of `List` is 0.  Actually `StringUtils.commaDelimitedListToStringArray(String)` method is a real worker, but the purpose of that method is to return the empty array in case of empty input(by java doc). So, I slightly chnaged `convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)` method in the `StringToCollectionConverter` class.  reated Issue:","closed","","MoonJongMin","2014-04-18T01:52:54Z","2014-06-25T01:11:26Z"
"","514","Minor doc fix to sample for @ConstructorProperties","Very minor doc fix for a sample on `@ConstructorProperties` - http://stackoverflow.com/questions/23073226/constructorproperties-annotation-does-not-work/23073551","closed","","bijukunjummen","2014-04-15T02:34:12Z","2014-07-08T04:31:45Z"
"","479","SPR-11505: Use deepHashCode for keys","Using deepHashCode allows for cache keys that work with methods that have arguments that are array types.","closed","","candrews","2014-03-04T15:54:40Z","2014-06-25T11:07:23Z"
"","478","SPR-11505: Use deepHashCode for keys","Using deepHashCode allows for cache keys that work with methods that have arguments that are array types.","closed","","candrews","2014-03-04T15:54:39Z","2014-06-18T21:16:23Z"
"","477","SPR-11505: Use deepEquals/deepHashCode for keys","Using deepEquals and deepHashCode allows for cache keys that work with methods that have arguments that are array types.","closed","","candrews","2014-03-03T22:53:28Z","2014-06-25T11:07:19Z"
"","363","Fixed URLs in import-into-eclipse scripts","URLs in the import scripts were to 404s.  Updated them to current locations.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","mikesir87","2013-09-25T20:58:00Z","2014-06-26T01:55:38Z"
"","510","Make Spring 3.2.x compatible with Java 8 bytecode","Upgraded ASM from 4.0 to 5.0 and cglib from 3.0 to 3.1  ---  Simple example project that uses this build: https://github.com/mbknor/spring-3.2.x-java-8-test  ---  At work, I am not able to start using Java 8 because we're using Camel which needs Spring 3.2.x. With this fix, we can start using Java 8 while still use Camel and Spring 3.2.x","closed","","mbknor","2014-04-03T20:03:03Z","2014-06-18T11:40:05Z"
"","362","Upgrade to Reactor 1.0.0.M3","Upgrade Reactor dependency to 1.0.0.M3","closed","","wilkinsona","2013-09-25T15:47:18Z","2014-07-25T05:17:31Z"
"","505","Make WebSocket fields available after it is closed","Update some native WebSocket session getters to return basic information after it is closed. It is required for example in SubProtocolWebSocketHandler#afterConnectionEstablished() or StompSubProtocolHandler#afterSessionStarted().  Issue: SPR-11621","closed","","sdeleuze","2014-04-01T07:27:37Z","2021-04-28T09:55:36Z"
"","454","SPR-11103: Thread count doesn't need locking, instead should use an AtomicInteger","Thread count doesn't need locking, instead should use an AtomicInteger.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","guidomedina","2014-01-31T18:45:03Z","2014-06-25T11:04:24Z"
"","386","Upgrade json-path to 0.9.0 version","This version fixed bugs and improved performance. New features: ""select multiple attributes"" and ""Array operations and slicing improved"" (a new example has been added in tests to reflect that).  See https://github.com/jayway/JsonPath/blob/master/README  Issue: SPR-10990","closed","","bclozel","2013-10-17T12:29:33Z","2013-10-18T19:31:54Z"
"","378","Scripted docbook -> asciidoctor migration","This uses docbookrx script to migrate from docbook to asciidoctor. The index page did not do anything so that was scripted using a Groovy script.  **NOTE** The results are far from perfect but could be a good starting point for us.  See https://jira.springsource.org/browse/SPR-10960","closed","","rwinch","2013-10-04T20:56:51Z","2013-10-28T15:17:15Z"
"","456","Add tip clarifying that @Transactional is not applicable to @BeforeClass methods","This tip is needed because when using `@BeforeClass` with TestNG tests  unlike JUnit by the time `@BeforeClass` is called the whole application context is setup and and dependency injection is working therefore as a user it easy to assume that @Transactional should be working but it dose not work and then you waste lots of time trying to figure out why, until you make a call to `TransactionSynchronizationManager.isActualTransactionActive()` and discover that `@Transactional` is not supposed to be used with `@BeforeClass` when working with TestNG  For example   ``` java  @ContextConfiguration(locations = { ""classpath:test.xml"" })   @Transactional @TransactionConfiguration(defaultRollback = true) @ActiveProfiles({ ""development"", ""standalone"", ""test-db"" }) public class TransactionalTest extends AbstractTransactionalTestNGSpringContextTests {     @BeforeClass     @Transactional      public void setupDB()      {           // the following assert fails before there is no TX           assertThat(TransactionSynchronizationManager.isActualTransactionActive()).isTrue();            // do some stuff that needs a tx      } } ```","closed","type: documentation,","asaikali","2014-02-05T19:19:42Z","2019-02-22T18:21:35Z"
"","439","Fixed use of Java6 API","This removes the use of `newSetFromMap` for a simpler concurrent set. This will be less performant probably. I haven't found another way but maybe some utility in Spring itself can build  that.  Issue: SPR-11313","closed","","snicoll","2014-01-15T10:36:29Z","2014-07-09T23:35:43Z"
"","370","Add javax.servlet.http.Part support for databinding","This PR covers both ""scenario 7"" listed in [SPR-10591](https://jira.springsource.org/browse/SPR-10591). All other scenarii have been implemented by @rstoyanchev  Prior to this commit, Multipart databinding would only support MultiPartFile databinding using commons-multipart.  Now the WebRequestDataBinder supports Part and List databinding for Servlet 3.0 compliant containers.  Issue: SPR-10591","closed","","bclozel","2013-10-02T09:31:13Z","2014-07-10T18:15:33Z"
"","499","Remove duplicate transitive dependencies","This PR adds a number of transitive dependency exclusions so that, where possible, each project only has a single source for each class on its classpath. Please see the commit message for further details.","closed","","wilkinsona","2014-03-26T15:44:55Z","2014-06-13T22:57:28Z"
"","511","Compact ignore of all build directories","This patch replaces multiple ignore patterns for build directories with one which matches all.","closed","","sslavic","2014-04-07T15:07:17Z","2014-06-25T11:05:48Z"
"","437","SPR-11299: Add PATCH support to MockMvcRequestBuilders","This is shortcut to avoid having to use MockMvcRequestBuilders.request() and instead have a simple patch(url, params...)","closed","","gregturn","2014-01-10T21:33:07Z","2014-06-14T08:30:25Z"
"","377","Scripted Docbook -> Asciidoctor migration","This is one of two pull requests that have two different scripted ways of migrating to asciidcotor. This should provide a good basis to get us started.  **NOTE** It is still necessary to go through and clean things up, but this gets us pretty far.","closed","","rwinch","2013-10-04T20:54:28Z","2014-06-17T16:19:18Z"
"","382","Fix for SPR-9732 - Support for multiple resource entry for location attribute of util:properties","This is  a fiix for SPR-9732 - to support for multiple resource entry for location attribute of util:properties, along the lines of context:property-placeholder  https://jira.springsource.org/browse/SPR-9732","closed","","bijukunjummen","2013-10-11T01:58:41Z","2013-10-22T18:07:06Z"
"","418","Fix typos throughout project","This fixes a variety of typos throughout the project, primarily in comments (javadoc or otherwise) but also in a handful of log messages and a couple exception messages. I noticed a few typos and then  searched for more to fix.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","ericdahl","2013-11-24T02:51:34Z","2013-11-28T01:38:36Z"
"","436","SPR-11256: Added explanation regarding the special 'default' profile.","This explains what the 'default' profile means as described in the original description of SPR-11256","closed","","snicoll","2014-01-08T15:33:14Z","2014-06-18T14:11:35Z"
"","392","Add support for WebSocket Protocol Extensions","This commits adds simple, overridable WebSocket Extension filtering during the handshake phase and adds that information in the WebSocket session.  The actual WebSocket Extension negotiation happens within the server implementation (Glassfish, Jetty, Tomcat...), so one can only remove requested extensions from the list provided by the WebSocket client.  See RFC6455 Section 9.  Issue: SPR-10843","closed","","bclozel","2013-10-24T09:31:13Z","2013-10-29T02:42:17Z"
"","492","Improve MessageMethodArgumentResolver","This commit validates that the payload type of the message is assignable to the one declared in the method signature. If that is not the case, a meaningful exception message is thrown with the types mismatch.  Prior to this commit, only the `Message` interface could be defined in the method signature: it is now possible to define a sub-class of `Message` if necessary which will match as long as the Message parameter is assignable to that type.  Issue: SPR-11584","closed","","snicoll","2014-03-20T14:49:10Z","2014-03-25T16:09:06Z"
"","396","upgrade to Jetty 9.1.0 .RC0","This commit upgrades Jetty to its latest version, which is JSP-356 compliant and allows WebSocket extensions negotiation by the application.","closed","","bclozel","2013-10-29T18:27:46Z","2013-10-29T19:08:27Z"
"","489","Fix ""Configuring the WebSocket Engine"" documentation","This commit updates reference documentation in order to specify that ServletServerContainerFactoryBean is for server side use and WebSocketContainerFactoryBean for client side use.  Issue: SPR-11565","closed","","sdeleuze","2014-03-17T21:10:22Z","2021-04-28T09:55:16Z"
"","467","Fix PathVariable encoding if request charset is not set","This commit simply adds a `@PathVariable` decoding test to reproduce a scenario exposed in `SPR-11474`  Issue: SPR-11474","closed","in: web,","snicoll","2014-02-24T09:06:05Z","2021-11-19T11:01:13Z"
"","483","CollectionToCollectionConverter perf Improvement","This commit prevents a full useless copy of the source collection if the outcome is to return the original collection.  Also made the return paths a bit more explicit.","closed","","snicoll","2014-03-05T13:08:21Z","2014-06-14T13:17:38Z"
"","443","SPR-11129: Handling of HttpHeaders as controller return type","This commit permits to produce a response with only custom headers by returning a `HttpHeaders` instance. Previously, one has to wrap that `HttpHeaders` instance in a `ResponseEntity`  Simply returning the `HttpHeaders` instance directly as the same effect now.","closed","","snicoll","2014-01-17T15:45:31Z","2014-08-02T10:51:49Z"
"","395","Migrate documentation to asciidoctor","This commit migrates to asciidoctor to ease writing documentation.  Issues: SPR-10960","closed","","rwinch","2013-10-28T17:06:59Z","2013-11-04T19:24:08Z"
"","449","Introduce EJB-based transactional tests in the TCF","This commit introduces transactional integration tests executing against both JUnit and TestNG in the TestContext framework (TCF) using @TransactionAttribute in EJBs instead of Spring’s @Transactional annotation.  These tests disprove the claims raised in SPR-6132 by demonstrating that transaction support in the TCF works as expected when a transactional EJB method that is configured with TransactionAttribute.REQUIRES_NEW is invoked. Specifically: - The transaction managed by the TCF is suspended while such an EJB   method is invoked. - Any work performed within the new transaction for the EJB method is   committed after the method invocation completes. - The transaction managed by the TCF is resumed and subsequently   either rolled back or committed as necessary based on the   configuration of @Rollback and @TransactionConfiguration.  The configuration for the JUnit-based tests is straightforward and self explanatory; however, the configuration for the TestNG tests is less intuitive.  In order for the TCF to function properly, the developer must ensure that test methods within a given TestNG test (whether defined locally, in a superclass, or somewhere else in the suite) are executed in the proper order. In a stand-alone test class this is straightforward; however, in a test class hierarchy (or test suite) with dependent methods, it is necessary to configure TestNG so that all methods within an individual test are executed in isolation from test methods in other tests. This can be achieved by configuring a test class to run in its own uniquely identified suite (e.g., by annotating each concrete TestNG-based test class with @Test(suiteName = ""< Some Unique Suite Name >"")).  For example, without specifying a unique suite name for the TestNG tests introduced in this commit, test methods will be executed in the following (incorrect) order: - CommitForRequiredEjbTxDaoTestNGTests.test1InitialState() - CommitForRequiresNewEjbTxDaoTestNGTests.test1InitialState() - RollbackForRequiresNewEjbTxDaoTestNGTests.test1InitialState() - RollbackForRequiredEjbTxDaoTestNGTests.test1InitialState() - CommitForRequiredEjbTxDaoTestNGTests.test2IncrementCount1()  The reason for this ordering is that test2IncrementCount1() depends on test1InitialState(); however, the intention of the developer is that the tests for an individual test class are independent of those in other test classes. So by specifying unique suite names for each test class, the following (correct) ordering is achieved: - RollbackForRequiresNewEjbTxDaoTestNGTests.test1InitialState() - RollbackForRequiresNewEjbTxDaoTestNGTests.test2IncrementCount1() - RollbackForRequiresNewEjbTxDaoTestNGTests.test3IncrementCount2() - CommitForRequiredEjbTxDaoTestNGTests.test1InitialState() - CommitForRequiredEjbTxDaoTestNGTests.test2IncrementCount1() - CommitForRequiredEjbTxDaoTestNGTests.test3IncrementCount2() - RollbackForRequiredEjbTxDaoTestNGTests.test1InitialState() - RollbackForRequiredEjbTxDaoTestNGTests.test2IncrementCount1() - RollbackForRequiredEjbTxDaoTestNGTests.test3IncrementCount2() - CommitForRequiresNewEjbTxDaoTestNGTests.test1InitialState() - CommitForRequiresNewEjbTxDaoTestNGTests.test2IncrementCount1() - CommitForRequiresNewEjbTxDaoTestNGTests.test3IncrementCount2()  See the JIRA issue for more detailed log output.  Furthermore, @DirtiesContext(classMode = ClassMode.AFTER_CLASS) has been used in both the JUnit and TestNG tests introduced in this commit in order to ensure that the in-memory database is reinitialized between each test class.  Issue: SPR-6132","closed","","sbrannen","2014-01-22T12:01:54Z","2014-01-22T12:02:37Z"
"","462","Add tests for TransactionAwareCacheDecorator","This commit adds tests for `TransactionAwareCacheDecorator`. In particular, the put/evict behaviour when the operation is invoked in the course of Spring-managed transaction.","closed","","snicoll","2014-02-11T13:03:19Z","2014-06-27T09:56:59Z"
"","493","SPR-9488 Add GsonHttpMessageConverter","This commit adds support to read and write JSON using the Google Gson library. GsonHttpMessageConverter offers default Gson configuration, but can be customized by using GsonFactoryBean. GsonFactoryBean includes several convenience properties for configuring the internal GsonBuilder and the resulting Gson object.  By default Gson converts byte arrays to JSON arrays instead of a Base64 encoded string. GsonBase64ByteArrayJsonTypeAdapter provides support to read and write Base64 encoded byte arrays, and can be enabled in GsonFactoryBean.  RestTemplate will enable GsonHttpMessageConverter only if Jackson 2 is not found on the class path, because by default GsonHttpMessageConverter supports the same media types as Jackson.  Issue: SPR-9488","closed","","royclarkson","2014-03-21T20:05:30Z","2014-06-17T16:06:39Z"
"","495","Add URI based MockHttpServletRequestBuilder constructors","This commit adds new MockHttpServletRequestBuilder constructors with an URI parameter in addition to the URL template + URL variables existing ones.  It gives more control on how the URL is built, allowing for example to use URL variables containing '/' character with proper encoding.  Issue: SPR-11441","closed","","sdeleuze","2014-03-24T09:25:33Z","2021-04-28T09:55:18Z"
"","354","Added HTML close policy tag to control tag close style","This commit adds a new `` tag that can be used to specify how generated HTML tags are closed—XML style (`/>`) or HTML style (`>`). This is necessary to properly generate W3C validator-compliant HTML code.  Issue: SPR-10916","closed","in: web,","beamerblvd","2013-09-14T20:01:53Z","2021-11-15T12:07:23Z"
"","482","Update documentation for converting collections","This clarifies the documentation with regards to converting collection compared to single element and how this can be used programmatically.","closed","","snicoll","2014-03-05T12:39:56Z","2014-06-16T13:09:58Z"
"","441","SPR-8696, SPR-11316: custom key generator and cache manager","This change brings more features to the `Cacheable`, `CacheEvict` and `CachePut` annotations.  A custom `CacheManager` and/or `KeyGenerator` can be set _per cache operation_. If the parameter is set, we default as we did before to the global `CacheManager` and `KeyGenerator` respectively.","closed","","snicoll","2014-01-17T12:42:35Z","2014-06-18T13:14:23Z"
"","442","SPR-10548","This adds support for `javax.annotation.Priority` to filter multiple candidates for autowiring. When multiple candidates are available for a given bean, the bean annotated with `@Primary` is used. If none exists, the one with the higher  value for the `@Priority` annotation is used. If two beans have the same priority a `NoUniqueBeanDefinitionException` is thrown, just as if two beans are annotated with `@Primary`.  The underlying code for `getBean` and `resolveDependency` has been merged as this feature is available for both dependency injection and bean lookup by type.  This PR also improves the test coverage of `determinePrimaryCandidate`  There is still a problem to be discussed concerning some fallback code that was initially present in `determinePrimaryCandidate` and that has been moved to `determineAutowireCandidate` as it is not obvious which use case it covers.","closed","","snicoll","2014-01-17T13:39:56Z","2014-06-14T18:53:05Z"
"","513","Update ConcurrentReferenceHashMap.java","The value that between the specified maximum and minimum values used to calculate a shift value , not only less than the specified minimum value.","closed","","HejiaHo","2014-04-14T15:19:13Z","2014-06-13T06:04:45Z"
"","406","Change SpEL equality operators to use .equals","The SpEL operators == and != were using the java == comparison operator as part of their equality checking. It is more flexible to use the equals() method on Object. Under this commit the change to .equals() has been made and the equality checking code has been pushed into a common method in the Operator superclass. This commit also makes some tweaks to the other operator classes - the Float case was missing from OpGT.  Issue: SPR-9194","closed","","aclement","2013-11-07T21:52:00Z","2013-11-21T20:08:54Z"
"","430","Reference manual polishing (part 2)","The signed license agreement confirmation number is 69820131210061413. Thanks.","closed","","VasylTretiakov","2013-12-16T07:11:35Z","2015-04-28T20:47:12Z"
"","429","Reference manual polishing","The signed license agreement confirmation number is 69820131210061413. Thanks.","closed","","VasylTretiakov","2013-12-13T20:04:05Z","2014-06-26T12:10:50Z"
"","428","Fixed various typos and introduced some enhancements to facilitate better rendering of the html page","The signed license agreement confirmation number is 69820131210061413. Thanks.","closed","","VasylTretiakov","2013-12-13T14:42:22Z","2013-12-13T20:03:29Z"
"","427","Fixed a typo","The signed license agreement confirmation number is 69820131210061413. Thanks.","closed","","VasylTretiakov","2013-12-13T11:57:39Z","2013-12-13T14:37:26Z"
"","459","Should not close response output stream","The method renderMergedOutputModel should not close the HttpServletResponse output stream.  The called utility method  FileCopyUtils.copy(bos.toByteArray(), response.getOutputStream()); closes the stream avoiding other output filters adding more informations.  For example, if the view is invoked by a url under security, the session id cookie isn't sent back to the clinent.","closed","","robfrank","2014-02-10T08:25:45Z","2014-12-31T10:22:42Z"
"","432","Removed extraneous character from the online documentation","The curly brace after the XML snippet in section 27.4.1 -> http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-enable-annotation-support   ---  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kryger","2014-01-04T17:51:45Z","2014-06-27T09:56:30Z"
"","466","Changed documentation to favor constructor injection over setter injection.","The breakout box named ""Constructor-based or setter-based DI?"" now recommends to use constructor injection. See the changed section for why.  Issue: SPR-11459.","closed","","odrotbohm","2014-02-21T07:59:50Z","2014-06-14T13:19:22Z"
"","413","3.2.5 jmx exception when create MBeans","spring3.2.5 seems more strict with in createAndConfigMBean during MBeanExporter does(when invoke the registerBeans), here comes my stack trace:  org.springframework.jmx.export.MBeanExportException: Could not create ModelMBean for managed resource [ConsoleMsgMBeanInfo={fssModProductState_MsgMBean}] with key 'bean:name=fssModProductState_MsgMBean'; nested exception is javax.management.IntrospectionException: type mismatch between getter and setter     at org.springframework.jmx.export.MBeanExporter.createAndConfigureMBean(MBeanExporter.java:797)     at org.springframework.jmx.export.MBeanExporter.registerBeanInstance(MBeanExporter.java:654)     at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:598)     at org.springframework.jmx.export.MBeanExporter.registerBeans(MBeanExporter.java:527)     at org.springframework.jmx.export.MBeanExporter.afterPropertiesSet(MBeanExporter.java:413)     at com.xyt.channel.server.service.listener.AbstractMBeanLoadEventListener.processAppEvent(Unknown Source)     at com.xyt.channel.server.service.listener.AbstractMBeanLoadEventListener.processAppEvent(Unknown Source)     at com.xyt.channel.component.event.AbstractChannelEventObserver.observeChannelEvent(Unknown Source)     at com.xyt.channel.wko.service.main.ChannelEnvConfiguration$1.startChannelService(Unknown Source)     at com.xyt.channel.wko.service.main.ChannelWkoServiceMain.startChannelService(Unknown Source)     at com.xyt.channel.server.service.main.AbstractChannelServiceMain.startChannelService(Unknown Source)     at com.xyt.channel.wko.service.main.ChannelWkoServiceMain.main(Unknown Source) Caused by: javax.management.IntrospectionException: type mismatch between getter and setter     at javax.management.MBeanAttributeInfo.attributeType(MBeanAttributeInfo.java:340)     at javax.management.MBeanAttributeInfo.(MBeanAttributeInfo.java:183)     at javax.management.modelmbean.ModelMBeanAttributeInfo.(ModelMBeanAttributeInfo.java:202)     at org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler.getAttributeInfo(AbstractReflectiveMBeanInfoAssembler.java:315)     at org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler.getMBeanInfo(AbstractMBeanInfoAssembler.java:64)     at org.springframework.jmx.export.MBeanExporter.getMBeanInfo(MBeanExporter.java:819)     at org.springframework.jmx.export.MBeanExporter.createAndConfigureMBean(MBeanExporter.java:792)  As shown above, when I went back to spring3.2.4 or lower edition, the error stacktrace would not appear. I hope some could point out my mistake whether I had set wrong MBean Name.","closed","","bwzhang2011","2013-11-16T05:19:47Z","2014-06-19T17:47:44Z"
"","521","Clean up spring-websocket imports","spring-websocket is full of unused imports. This commit removes all unused imports from spring-websocket.  I did sing the CLA","closed","","marschall","2014-04-20T17:49:01Z","2014-06-25T11:05:52Z"
"","520","Clean up spring-messaging imports","spring-messaging is full of unused imports. This commit removes all unused imports from spring-messaging.  I did sing the CLA","closed","","marschall","2014-04-20T17:48:47Z","2014-06-14T13:07:37Z"
"","422","Spring Framework","Spring External JAR Files","closed","","purnimanagpal23","2013-11-28T20:18:14Z","2014-06-27T12:43:37Z"
"","393","Provide meta-annotation support in the TCF","Spring 3.0 already allows component stereotypes to be used in a meta-annotation fashion, for example by creating a custom @TransactionalService stereotype annotation which combines @Transactional and @Service in a single, reusable, application-specific annotation. However, the Spring TestContext Framework (TCF) currently does not provide any support for test-related annotations to be used as meta-annotations.  This commit overhauls the TCF with regard to how annotations are retrieved and adds explicit support for the following annotations to be used as meta-annotations in conjunction with the TCF. - @ContextConfiguration - @ContextHierarchy - @ActiveProfiles - @DirtiesContext - @IfProfileValue - @ProfileValueSourceConfiguration - @BeforeTransaction - @AfterTransaction - @TransactionConfiguration - @Rollback - @TestExecutionListeners - @Repeat - @Timed - @WebAppConfiguration  Note that meta-annotation support for @Transactional was already available prior to this commit.  Issue: SPR-7827","closed","","sbrannen","2013-10-28T00:16:07Z","2014-06-13T11:28:54Z"
"","404","Fixed the broken Javadoc links from http://*/spring/docs/current/api/org to http/*/spring/docs/current/javadoc-api/org","Some of the links to Javadocs are broken - their paths needed to be changed from /api/\* to /javadoc-api/*","closed","","bijukunjummen","2013-11-05T10:53:06Z","2013-11-08T01:37:12Z"
"","516","Added a Git .mailmap file","Some of Spring's most prolific contributors have changed email addresses one or more times over the course of the project. This .mailmap file joins the multiple identities of those contributors, making it easier to track their contribution over time.","closed","","GrahamLea","2014-04-18T03:47:54Z","2014-07-24T15:41:05Z"
"","502","Javadoc: removed support for JBoss AS 5's VFS","Since Spring 4.0, the VfsUtils class does not support any more the VFS 2 of JBoss AS 5 and JBoss 5.x EAP. See commit https://github.com/spring-projects/spring-framework/commit/ca194261a42a0a4f0c8bdc36f447e1029a7d2e3e","closed","","arey","2014-03-28T20:21:06Z","2014-03-29T08:51:34Z"
"","463","SPR-11415 Call free() on Blob and Clob","Since Java 1.6/JDBC 4 `ava.sql.Blob` and `java.sql.Clob` have a `#free()` method to release the resources that they hold. They should be called as early as possible because otherwise the objects remain valid for at least the duration of the transaction in which they are created. `DefaultLobHandler` currently creates `Blob`s and `Clob`s and throws them away without calling `#free()`. - change `#getBlobAsBytes()` and `#getClobAsString()` in   `DefaultLobHandler` to call `#free()`  There are more methods in `DefaultLobHandler` where `Blob`s and `Clob`s are used without calling free. However they return a stream so we probably shouldn’t call `#free()` before being done reading. This is a bit of an issues because the `Blob` and `Clob` are out of scope for calling code. `OracleLobHandler` also uses `Blobs` and `Clob`s are used without calling `#free()` but since the class is deprecated I did not update it.  I did sign the Contributor License Agreement.  Issue: SPR-11415 https://jira.springsource.org/browse/SPR-11415","closed","","marschall","2014-02-11T17:02:23Z","2014-02-12T08:22:46Z"
"","480","Fix custom config with older HttpClient","Since HttpClient 4.3, custom configuration such as the connection timeout and the socket timeout are set in a `RequestConfig` object stored in the `HttpContext`.  Unfortunately, older HttpClients are not supporting this infrastructure and new clients throw an exception when the deprecated API is used.  This commit detects if the client is an ""old"" implementation and set the configuration through the deprecated means to restore full backward compatibility with these features.  _Note that because of the -WError flag, no import on deprecated classes are allowed which is the reason why I used FQNs_","closed","","snicoll","2014-03-04T16:26:18Z","2014-06-19T10:15:04Z"
"","512","Enhance MessageHeaderAccessor support and optimize message creation","See individual commit descriptions.","closed","","rstoyanchev","2014-04-13T22:51:37Z","2014-06-19T09:08:09Z"
"","409","Allow InstrumentationSavingAgent to be used with the Attach API","See https://jira.springsource.org/browse/SPR-11083","closed","","cdupuis","2013-11-11T15:25:32Z","2014-07-08T04:31:46Z"
"","446","SPR-11337 Consistent serializable remoting classes","RemoteInvocation is a mutable JavaBean with default constructor while RemoteInvocationResult is immutable with no default constructor.  This makes the RemoteInvocationResult consistent with RemoteInvocation.","closed","","ArloL","2014-01-21T08:12:23Z","2014-06-26T06:44:52Z"
"","452","Fix method signature mismatch in Quartz","Quartz 2.2 provides methods to register `JobListener` and `TriggerListener` that the previous 2.0.x generations do not define. However, a method taking an extra list of `KeyMatcher` instances exists since 2.0.0  This commit uses this method instead of the one that was introduced as from 2.2.0 to ensure compatibility with previous 2.0.x releases.  It is hard to test such a change in the current infrastructure so a separate project was used to validate that the scheduler is properly created when those listeners are present. This has been tested against `1.8.6`, `2.0.0`, `2.1.0` and `2.2.0`.  Issue: SPR-11362","closed","","snicoll","2014-01-28T09:22:59Z","2014-07-02T18:55:21Z"
"","389","SPR-10953-3.2.x fix LiteralExpression.getValue","Propagate `EvaluationContext` to the the conversion function in the `LiteralExpression.getValue(EvaluationContext, Object , Class)` method  JIRA: https://jira.springsource.org/browse/SPR-10953","closed","","artembilan","2013-10-17T18:13:55Z","2014-08-17T18:54:13Z"
"","388","SPR-10953 fix LiteralExpression.getValue with ctx","Propagate `EvaluationContext` to the the conversion function in the `LiteralExpression.getValue(EvaluationContext, Object , Class)` method  JIRA: https://jira.springsource.org/browse/SPR-10953","closed","","artembilan","2013-10-17T18:11:52Z","2014-07-16T01:49:00Z"
"","501","Update DefaultKeyGenerator.java","problem: If I have a method with a single parameter and this equal a 53L.  Consequently, I can recuper this object in passing a null.","closed","","sakli1","2014-03-28T09:06:05Z","2014-03-28T18:35:39Z"
"","506","Fix return zero size String array with empty String array in delimiitedListToStringArray of StringUtils","Prior to this commit, zero size String array returns if StringUtils.delimitedListToStringArray is called with parameter empty String ("""")  I think, after call StringUtils.delimitedListToStringArray("""", "","", null);  it should return one size String array -> [""""]  but it returns zero size String array.  StringUtils.delimitedListToStringArray(null, "","", null) & StringUtils.delimitedListToStringArray("""", "","", null)  should returns differently. However there are same results.  There's no logic for empty String(""""), but just is for null parameter.  I added if statement for """" parameter. The result will be one size String array.  And also in SPR-11126, the issue will be solved.  Issue: SPR-11126","closed","","youngjee","2014-04-01T08:31:43Z","2014-06-14T13:09:02Z"
"","507","Fix return zero size array with empty String parameter in StringUtils.delimiitedListToStringArray","Prior to this commit, zero size String array returns if StringUtils.delimitedListToStringArray is called with parameter empty String ("""")  I think, after call StringUtils.delimitedListToStringArray("""", "","", null);  it should return one size String array -> [""""]  but it returns zero size String array.  StringUtils.delimitedListToStringArray(null, "","", null) & StringUtils.delimitedListToStringArray("""", "","", null)  should returns differently. However there are same results.  There's no logic for empty String(""""), but just is for null parameter.  I added if statement for """" parameter. The result will be one size String array.  And also in SPR-11126, the issue will be fine.  Issue: SPR-11126","closed","","youngjee","2014-04-01T09:04:18Z","2022-02-18T19:11:01Z"
"","381","Allow greater flexibility for template method createDataBinderFactory","Prior to this commit, the template method createDataBinderFactory would only allow ServletRequestDataBinderFactory as a return type.  This commit updates the method signature and allows InitBinderDataBinderFactory, a superclass of the previous one. Then other implementations can override this method and return other InitBinderDataBinderFactory types.  Issue: SPR-10920","closed","","bclozel","2013-10-09T12:48:50Z","2014-08-10T01:04:49Z"
"","421","Support meta-annotation attr overrides in the TCF","Prior to this commit, the Spring TestContext Framework (TCF) supported the use of test-related annotations as meta-annotations for composing custom test stereotype annotations; however, attributes in custom stereotypes could not be used to override meta-annotation attributes.  This commit addresses this by allowing attributes from the following annotations (when used as meta-annotations) to be overridden in custom stereotypes. - @ContextConfiguration - @ActiveProfiles - @DirtiesContext - @TransactionConfiguration - @Timed - @TestExecutionListeners  This support depends on functionality provided by AnnotatedElementUtils. See the 'Notes' below for further details and ramifications.  Notes: - AnnotatedElementUtils does not support overrides for the 'value'   attribute of an annotation. It is therefore not possible or not   feasible to support meta-annotation attribute overrides for some   test-related annotations. - @ContextHierarchy, @WebAppConfiguration, @Rollback, @Repeat, and   @ProfileValueSourceConfiguration define single 'value' attributes   which cannot be overridden via Spring's meta-annotation attribute   support. - Although @IfProfileValue has 'values' and 'name' attributes, the   typical usage scenario involves the 'value' attribute which is not   supported for meta-annotation attribute overrides. Furthermore,   'name' and 'values' are so generic that it is deemed unfeasible to   provide meta-annotation attribute override support for these. - @BeforeTransaction and @AfterTransaction do not define any attributes   that can be overridden. - Support for meta-annotation attribute overrides for @Transactional is   provided indirectly via SpringTransactionAnnotationParser.  Implementation Details: - MetaAnnotationUtils.AnnotationDescriptor now provides access to the   AnnotationAttributes for the described annotation. - MetaAnnotationUtils.AnnotationDescriptor now provides access to the   root declaring class as well as the declaring class. - ContextLoaderUtils now retrieves AnnotationAttributes from   AnnotationDescriptor to look up annotation attributes for   @ContextConfiguration and @ActiveProfiles. - ContextConfigurationAttributes now provides a constructor to have its   attributes sourced from an instance of AnnotationAttributes. - ContextLoaderUtils.resolveContextHierarchyAttributes() now throws an   IllegalStateException if no class in the class hierarchy declares   @ContextHierarchy. - TransactionalTestExecutionListener now uses AnnotatedElementUtils to   look up annotation attributes for @TransactionConfiguration. - Implemented missing unit tests for @Rollback resolution in   TransactionalTestExecutionListener. - SpringJUnit4ClassRunner now uses AnnotatedElementUtils to look up   annotation attributes for @Timed. - TestContextManager now retrieves AnnotationAttributes from   AnnotationDescriptor to look up annotation attributes for   @TestExecutionListeners. - DirtiesContextTestExecutionListener now uses AnnotatedElementUtils to   look up annotation attributes for @DirtiesContext.  Issue: SPR-11038","closed","","sbrannen","2013-11-26T20:39:04Z","2013-11-26T21:11:10Z"
"","359","Optionally throw a NoHandlerFoundException from DispatcherServlet","Prior to this commit, the DispatcherServlet would send an error response using the HttpServlet API when no Handler was found to handle this request.  Now the DispatcherServlet can be configured to throw a NoHandlerFoundException, when the throwExceptionIfNoHandlerFound property is set to ""true"". Those exceptions can be later on caught by default or custom HandlerExceptionResolvers/ExceptionHandlers.  Issue: SPR-10481","closed","","bclozel","2013-09-23T13:18:10Z","2014-07-20T17:07:04Z"
"","448","Harmonize log configuration","Prior to this commit, the codebase was using a mix of `log4j.xml` and `log4j.properties` for test-related logging configuration. This can be an issue as log4j takes the xml variant first when looking for a default bootstrap configuration.  In practice, some modules declaring the properties variant were taking the xml variant configuration from another module.  The general structure of the configuration has also been harmonized to provide a standard console output as well as an easy way to enable trace logs for the current module.","closed","","snicoll","2014-01-21T10:23:11Z","2014-06-27T20:59:29Z"
"","358","Add IPv6 support in RestTemplate","Prior to this commit, RestTemplate would not would not accept IPv6 raw addresses in URLs because UriComponentsBuilder would not parse/encode the Host part correctly.  The UriComponentsBuilder now parses and encode raw IPv6 addresses in the ""[1abc:2abc:3abc::5ABC:6abc]"" format and also supports the use of IPv6 scope_ids (see JDK8 java.net.Inet6Address), like ""[1abc:2abc:3abc::5ABC:6abc%eth0]"".  Issue: SPR-10539","closed","","bclozel","2013-09-20T12:48:54Z","2014-06-25T10:53:19Z"
"","371","Add Jackson's Modules registration in Jackson2OMFactoryBean","Prior to this commit, one couldn't configure Jackson's ObjectMapper with (De)SerializerModifiers or advanced configuration features using XML configuration.  This commit updates the FactoryBean and adds a setModule method that will register Modules with the ObjectMapper.  Note that this commit is only about XML configuration, since this feature was already available with JavaConfig.  Issue: SPR-10429","closed","","bclozel","2013-10-02T13:45:48Z","2014-08-15T17:23:40Z"
"","374","Support AntPathMatch URLs in URL ResultMatchers","Prior to this commit, one could only match exact URLs in redirectedUrl and forwardedUrl ResultMatchers. When creating a resource with a REST service, URLs often contain the id the new resource, like ""/resource/12"".  This commit updates those ResultMatchers to support both exact matches and AntPath matches, using new methods. The former URL then can be tested against ""/resource/*"" in MVC tests.  Issue: SPR-10789","closed","","bclozel","2013-10-04T12:34:40Z","2013-10-08T20:02:25Z"
"","376","Add doesNotExist match to HeaderResultMatchers","Prior to this commit, one could not test for the absence of a specific HTTP header in a response. Using header(""X-Custom-Header"", Matchers.nullValue()) would not work because it tests for an empty value of an existing header.  This commit adds a doesNotExist method on the HeaderResultMatcher.  Issue: SPR-10771","closed","","bclozel","2013-10-04T15:22:14Z","2014-07-09T16:33:37Z"
"","375","Fix MockHttpServletResponse HTTP status update","Prior to this commit, one could call the setStatus method on this Mock object and update the response's status, even though the sendError method had already been called.  According to the HttpServletResponse Javadoc, sendError() methods commit the response; so the response can't be written after that.  This commit fixes MockHttpServletResponse's behavior; setStatus methods do not update the status once the response has been committed.  Issue: SPR-10414","closed","","bclozel","2013-10-04T13:27:39Z","2014-07-09T16:34:08Z"
"","447","Improve documentation of matrix variables.","Prior to this commit, it was not clear how to enable the support of matrix variables in the mvc namespace. As the feature is disabled by default, added something to highlight the part that explains how to configure it.  Issue: SPR-11331","closed","","snicoll","2014-01-21T09:43:06Z","2014-06-15T09:10:34Z"
"","461","Fix cache decoration","Prior to this commit, a cache that is added on-the-fly is not properly decorated by the provided CacheManager implementation that supports it (EhCache and JCache).  This commits adds an extra getMissingCache method to the AbstractCacheManager that can be extended to provide a cache that may exist in the native cache manager but is not yet known by the spring abstraction.  Issue: SPR-11407, SPR-11518","closed","","snicoll","2014-02-11T10:51:25Z","2014-06-26T06:45:01Z"
"","380","Add new features on @ControllerAdvice","Prior to this commit, @ControllerAdvice annotated beans would assist all known Controllers, by applying @ExceptionHandler, @InitBinder, and @ModelAttribute.  This commit updates the @ControllerAdvice annotation, which accepts now base package names, assignableTypes, annotations and basePackageClasses.  If attributes are set, only Controllers that match those selectors will be assisted by the annotated class. This commit does not change the default behavior when no value is set, i.e. @ControllerAdvice().  Issue: SPR-10222","closed","","bclozel","2013-10-08T16:48:28Z","2013-10-18T16:28:47Z"
"","485","Add multi line SQL comment support","Prior to this commit neither org.springframework.jdbc.datasource.init.ResourceDatabasePopulator nor org.springframework.test.jdbc.JdbcTestUtils properly supported C-style block comments ""/*...*/"". Secondarily there had developed a significant amount of duplicate code in the two classes that could lead to future maintenance issues.  This commit consolidates the duplicate code from the two classes into org.springframework.jdbc.datasource.init.ScriptUtils. Relevant test cases have also been migrated. It also contains a modification to the splitSqlScript() method so that the C-style block comments are now removed from the script during processing. A new test case was added for the new multi line comment support.  Issue: SPR-9531  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","cbaldwin74","2014-03-11T06:20:48Z","2014-06-14T14:05:35Z"
"","481","Add merge support to nested collection properties","Prior to this change, the merge attribute on nested collections was not handled properly which would result in the typical replacement behaviour. This is because during the merging of the parent and child beans the parent bean would have nested BeanDefinition objects while the child would have a property with the nested name (beanA.beanB.propertyName). When it came time to look for matching the property names it would be looking for the nested name which would not exist in the parent.  The implementation of MutablePropertyValues.addProperty(PropertyValue) will now try to find a chain of nested BeanDefinition objects that match the nested property name and walk down the chain of beans and find the property and then merge if applicable.  A JUnit test has been added to check for the new behaviour.  Issue: SPR-9552  I have signed and agree to the terms of the SpringSource Individual  Contributor License Agreement.","closed","in: core,","cbaldwin74","2014-03-05T05:24:55Z","2021-11-19T11:33:28Z"
"","445","Improve description of switching off commons-logging","Prior this commit, it was not clear that all Spring modules on which the project relies upon explicitly must exclude the commons-logging dependency. Besides, another alternative exists which is nicely explained in the SLF4J FAQ. This commit adds a reference to that.","closed","","snicoll","2014-01-20T09:58:45Z","2014-06-27T12:43:48Z"
"","365","Send heartbeats to the broker from the system relay session using forward","Previously, heartbeats being sent to the broker by the system relay session were being sent by directly performing a connection.send. This bypassed useful logic for failure handling etc in the code path of forward. This commit changes the system relay session to send heartbeats to the broker using forward instead.  This change unearthed a problem with forwarding: it was blocking the thread until the send had completed, so if the thread that was triggering the send was also the thread that TcpClient needed to use to actually perform the send, it wouldn't complete.  The blocking was only necessary to allow forwardInternal to return a boolean indicating whether or not the forwarding was successful. However, this return value was not used by any of the method's callers. The blocking has been removed.","closed","","wilkinsona","2013-09-27T10:40:25Z","2013-09-27T15:50:56Z"
"","496","Avoid double invocation of Cache#get","Previous to this commit, every `@Cacheable` operation with a cache hit resulted to two invocations of `Cache#get(key)`. This commit introduces a `findCachedItem` method whose sole purpose is to retrieve a cached item, if any. This value is reused instead of being recomputed again.  Issue: SPR-11592","closed","","snicoll","2014-03-25T10:32:09Z","2014-03-26T08:58:19Z"
"","475","unwrap transaction bound connection proxy pointing to same TransactionAwareDataSourceProxy","Possibly related to https://jira.springsource.org/browse/SPR-6949  I've noticed in debugging of Grails apps (which uses TransactionAwareDataSourceProxy + LazyConnectionDataSourceProxy) that the connection gets wrapped twice in a proxy that uses TransactionAwareInvocationHandler as it's handler.  The reason for this is the logic in TransactionAwareInvocationHandler that checks for the transaction bound connection.   This is the code in https://github.com/lhotari/spring-framework/blob/6a043e3/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java#L219  ```             if (this.target == null) {                 if (this.closed) {                     throw new SQLException(""Connection handle already closed"");                 }                 if (shouldObtainFixedConnection(this.targetDataSource)) {                     this.target = DataSourceUtils.doGetConnection(this.targetDataSource);                 }             }             Connection actualTarget = this.target;             if (actualTarget == null) {                 actualTarget = DataSourceUtils.doGetConnection(this.targetDataSource);             }              if (method.getName().equals(""getTargetConnection"")) {                 // Handle getTargetConnection method: return underlying Connection.                 return actualTarget;             } ```  It looks like this doesn't take into account that target might already be a proxy for the same TransactionAwareDataSourceProxy instance and it should unwrap it to prevent an extra level of calls. This doesn't cause real problems in applications, but there will always be an extra proxy call for each call to a connection method.  This PR contains logic to unwrap the extra proxy.","closed","","lhotari","2014-03-01T12:38:01Z","2022-02-18T19:11:01Z"
"","426","Added http://repo.spring.io/libs-release repository to make the quicksta...","Not sure it this is the correct approach, however this allows the person wanting to quickstart the ability to grab artefacts with a simple copy/paste.","closed","","dannyarcher","2013-12-10T21:16:40Z","2013-12-10T22:26:19Z"
"","397","remove allocation from NamedParameterUtils","NamedParameterUtils first creates a substring before appending to a Appendable. This is unnecessary and creates a new `char[]` in later HotSpot versions. - use `Appendable#append` directly instead of creating substring first  I did sign the Contributor License Agreement.  Issue: SPR-11042","closed","","marschall","2013-10-29T21:32:31Z","2013-11-03T11:11:59Z"
"","458","Fixed example in JavaDoc.","mimeType is not a valid method on ContentResultMatche.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","abobov","2014-02-10T08:25:09Z","2014-06-25T11:05:16Z"
"","431","Update MvcUriComponentsBuilder.java","Method with following signature ""public static UriComponentsBuilder fromMethodName(Class controllerType,String methodName, Object... argumentValues)"" makes use of the getParameterCount() method found in the java.lang.reflect.Method class. This is specific to Java 8 and will cause projects using prior versions of Java to throw an exception (java.lang.NoSuchMethodError: java.lang.reflect.Method.getParameterCount()). My proposed modification is to change it to getParameterTypes().length to get the total number of parameters.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","floresj","2013-12-18T14:43:38Z","2014-06-17T04:26:14Z"
"","435","SPR-11280","Looking at the documentation, there is indeed one reference to cactus that can be replaced by Selenium as the user suggests.","closed","","snicoll","2014-01-08T11:05:12Z","2014-06-27T20:59:28Z"
"","412","Issue: SPR-10906 and Issue: SPR-5839","Juergen Hoeller  Issue: SPR-10906 …   46131aa  samuelteixeiras Merge branch 'master' of github.com:samuelteixeiras/spring-framework    3590f26  samuelteixeiras  Issue: SPR-10906 …   db4efc3  samuelteixeiras Merge branch 'master' of github.com:samuelteixeiras/spring-framework    2a9d863  samuelteixeiras  Issue: SPR-10906 …   e3db449  samuelteixeiras Merge branch 'master' of github.com:samuelteixeiras/spring-framework    bd76bd5  samuelteixeiras  Issue: SPR-5839 …    f9d66af  samuelteixeiras Merge branch 'master' of github.com:samuelteixeiras/spring-framework    2ef4ae0","closed","","samuelteixeiras","2013-11-14T03:55:15Z","2013-11-20T17:57:05Z"
"","450","SPR-11345 Restore MessageHandlingException Ctors","JIRA: https://jira.springsource.org/browse/SPR-11345","closed","","garyrussell","2014-01-22T19:20:42Z","2014-07-01T15:02:03Z"
"","509","SPR-11468 Allow MessageHeaders Subclasses","JIRA: https://jira.spring.io/browse/SPR-11468  Allow a subclass to override the strategy for (or even omit) the `ID` and `TIMESTAMP` headers.","closed","","garyrussell","2014-04-02T17:06:45Z","2014-06-14T13:09:04Z"
"","416","Upgrade Jetty to 9.1.0 GA","Issue: SPR-11099","closed","","bclozel","2013-11-19T20:27:59Z","2014-07-01T13:58:22Z"
"","423","Document websocket XML namespace","Issue: SPR-11063","closed","","bclozel","2013-12-03T17:09:48Z","2013-12-03T17:18:48Z"
"","498","ISSUE","issue","closed","","antihate80","2014-03-26T08:09:21Z","2014-03-26T08:11:14Z"
"","367","Connect ack","Introduce new CONNECT_ACK message type for generic handling of STOMP's CONNECTED frame and the like","closed","","wilkinsona","2013-09-30T10:15:59Z","2013-10-01T09:10:43Z"
"","488","Document Tiles locale handling in definition filenames","In Tiles v3 integration, underscores in filenames are intended to identify the definition locale. This behavior is now documented in order to avoid unexpected results with filenames like tiles_definitions.xml.  This commit also updates Tiles v2 references to Tiles v3 in the Spring reference documentation.  Issue: SPR-11491","closed","","sdeleuze","2014-03-17T12:05:21Z","2021-04-28T09:55:16Z"
"","472","Add AbstractMessageConverter#contentTypeResolutionRequired","In order to facilitate more restrictive matching strategies, AbstractMessageConverter has now a contentTypeResolutionRequired boolean property.  When set to true, supportsMimeType(MessageHeaders) will return false if the contentTypeResolver is not defined or if no content-type header is present.  Issue: SPR-11463","closed","","sdeleuze","2014-02-27T15:19:35Z","2021-04-28T09:55:11Z"
"","517","[SPR-11126] problem converting empty parameter to List","In connection with ""[SPR-11126] problem converting empty parameter to List"", the resolveName(String, MethodParameter, NativeWebRequest) method in the RequestParamMethodArgumentResolver.java has been slightly chagned. In case that MethodParameter is related to List type, String[](with legnth 1) value will be returned itself without being changed to String.  Thank you.  Issue: SPR-11126","closed","","MoonJongMin","2014-04-18T19:21:48Z","2014-06-24T13:17:53Z"
"","484","Decode target parameter names prior to saving a FlashMap","In addition to the target parameter values (SPR-9657), the target parameter names must also be decoded to be able to match them to the parameter names of incoming requests.  Issue: SPR-11504","closed","","sdeleuze","2014-03-06T02:37:11Z","2021-04-28T09:55:13Z"
"","486","Improved StAXSAX bridge","Improved the SAX to StAX (and vice-versa) bridge exposed via StaxUtils. The old integration had some issues with namespace declaration attributes, brought to light in a XMLUnit upgrade.  Issue: SPR-11549","closed","","poutsma","2014-03-13T15:47:12Z","2014-07-01T07:33:41Z"
"","366","Improve handling of send failures","Improve StompBrokerRelayMessageHandler's handling of send failures, for both heartbeats and 'normal' messages","closed","","wilkinsona","2013-09-30T10:04:01Z","2014-06-23T03:23:59Z"
"","419","Catch No RequestUpgradeStrategy exc during new DefaultHandshakeHandler()","If the exception is not caught, the app cannot be deployed into environments that do not have a RequestUpgradeStrategy defined (for example, Wildfly). Catching this exception allows for the other SockJS fallbacks to be used without the use of the WebSocket.  Resolves SPR-11111  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","mikesir87","2013-11-25T16:28:34Z","2014-06-23T10:37:26Z"
"","500","commit test","I want to test git.","closed","","roseyoung","2014-03-28T01:06:21Z","2014-06-14T13:17:24Z"
"","473","SPR-11493 Added getNamedServletFilters() to allow ability to specify the...","I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.  https://jira.springsource.org/browse/SPR-11493  Added the ability to provide named filters.  This is useful when using the same filter class multiple times, for example the DelegatingFilterProxy, as the default naming convention will cause conflicts.","closed","","aweigold","2014-02-28T01:26:30Z","2014-06-25T09:22:32Z"
"","402","Converting Number to Models in Spring MVC","I had a Converter class I wanted to use to build a model off a @RequestMapping.  The conversion mechanism only worked with Converter instances.  I expected the request parameter my situtation to be an Integer, so I wanted to use the framework to validate parameters as opposed to adapting my existing class into a Converter.  The documentation has not been updated to reflect this feature.  I am waiting for approval of this enhancement before doing so.  Issue: SPR-11060  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","status: superseded,","mouyang","2013-11-04T03:37:51Z","2021-11-19T10:56:39Z"
"","355","Beanbuilder spring4","I am working with Juergen to get the bean builder code to a state such that it can be included in Spring 4.  The code represented in this pull request has been tested with Grails 2.4 snapshots and so far everything works well (more testing is pending). If we can get something into the Spring code base so that a build snapshot can be published that will greatly simplify work that we need to do to verify and finalize this code.  As it is all of the testing is being done in my local development environment where I have built this latest snapshot code and installed it into my local maven repo for consumption by Grails snapshots and related plugins.  Having this snapshot published to a public repo will allow us to do more thorough testing in our CI environment.  Please let me know whatever I can do to help move forward with this.","closed","in: core,","jeffbrown","2013-09-17T20:35:34Z","2021-11-19T09:32:50Z"
"","464","SPR-11429 - Proposed change in behavior of Databinder.addValidators to not throw an exception on unsupported validators","https://jira.springsource.org/browse/SPR-11429  When custom validators are added to Databinder, databinder tends to throw an exception if the validator is not relevant to the class being bound.  The changes in this commit proposes to change this behavior by instead registering the validator if it is relevant to the class being bound, otherwise not registering it and this way not propagating up an exception.  The behavior change will help with use of custom validators in @InitBinder methods of Controllers much more intuitive(sample controller test included in commit)","closed","","bijukunjummen","2014-02-15T04:17:13Z","2014-07-06T11:51:01Z"
"","415","Fix standard multipart binding + Polish","Fixing standard multipart binding when multiple parts share the same name. Uncomment previously @Ignored tests now that Jetty supports Servlet 3.0 spec.  Follow up for Issue: SPR-10591","closed","","bclozel","2013-11-19T19:53:08Z","2013-12-03T08:38:13Z"
"","424","typo in pointcut expression","fixed typo in pointcut expression. I have submitted the CLA, did not create a separate Jira Issue because contribution guidelines say it is ok for trivial changes to not create one.","closed","","md42","2013-12-06T20:18:15Z","2014-06-18T01:52:33Z"
"","379","Fix Cache documentation","Fixed malformed code snippets, formatted whitespace and changed invalid external link.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","Xaerxess","2013-10-07T12:23:59Z","2013-10-11T17:16:20Z"
"","407","Fixed the broken Javadoc links in Reference document","Fixed broken javadoc links - from  http://static.springsource.org/spring/docs/current/api/.. to   http://docs.spring.io/spring/docs/current/javadoc-api/..","closed","","bijukunjummen","2013-11-08T01:38:28Z","2014-06-18T14:39:19Z"
"","411","Fixed a typo in RequestMappingHandlerMapping.java","Fixed an obvious typo.","closed","","evpaassen","2013-11-13T13:53:30Z","2014-06-27T12:45:23Z"
"","384","fix for SPR-10991","fix unsupported method for 'put' when spring form tag's method is 'put' and enctype is multipart/form-data. SPR: https://jira.springsource.org/browse/SPR-10991","closed","","wayshall","2013-10-16T04:52:45Z","2014-07-09T23:55:04Z"
"","455","Fix EvalTagTests with locales other than english","Fix testPrintFormattedScopedAttributeResult test in org.springframework.web.servlet.tags.EvalTagTests class by making an assertion which is not locale dependent.  Issue: SPR-11392","closed","","sdeleuze","2014-02-05T17:12:27Z","2021-04-28T09:55:07Z"
"","444","Fix same destination added to the different sessions of the same user causing duplicate messages","Fix same destination added to the different sessions of the same user  Prior to this commit, DefaultUserDestinationResolver uses the user to  get all the sessionIds and then adds all the target destinations of all  the sessions of the same user. In case of SUBSCRIBE message type, it  is already associated to a particular sessionId so there is no need to  get all the sessionIds for the same user. Problem due to this was  found in websocket where duplicate messages were coming. Use case: 1. Open web page connect to the websocket connection. 2. Open the same page in another tab.  Spring messaging creates 2 different sessions for different tabs which  are linked to the same user. Bug was while sending a websocket message to the user, the first tab  gets the message one time but the second tab gets the same message 2  times. And if we open more tabs, it keeps on increasing, the 3rd tabs  gets the same message 3 times, 4th tab 4 times and so on.  The current changes now directly uses the sessionId if the message type  is SUBSCRIBE or UNSUBSCRIBE.  Issue: SPR-11325","closed","","devashishmamgain","2014-01-18T07:54:26Z","2014-07-20T19:10:05Z"
"","434","Documentation contribution page improvements","Fix a few glitches and add a troubleshooting section.","closed","","snicoll","2014-01-08T10:41:20Z","2014-06-26T06:44:52Z"
"","470","Add a getMatchingCondition(String) variant","Extract method on getMatchingCondition(HttpServletRequest) to add a getMatchingCondition(String) variant in PatternsRequestCondition.  Issue: SPR-11484","closed","","sdeleuze","2014-02-27T09:03:40Z","2021-04-28T09:55:12Z"
"","451","Fixed code example in JavaDoc","equalTo is not a valid method on JsonPathResultMatchers  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","hupfis","2014-01-24T08:26:40Z","2014-01-24T12:41:32Z"
"","468","Make version of JasperReports consistent","Ensure that context-support and webmvc depend upon the same version of JasperReports","closed","","wilkinsona","2014-02-24T09:14:54Z","2014-06-27T20:59:30Z"
"","352","[SPR-10870] DefaultKeyGenerator needs to consider varargs parameter","DefaultKeyGenerator generates cache key through below method.  ``` public Object generate(Object target, Method m, Object... params) { ... some other code ... int hashCode = 17; for (Object object : params) {     hashCode = 31 * hashCode +               (object == null ? NULL_PARAM_KEY : object.hashCode()); } ```  The last parameter 'params' has different form according to signature  of @Cacheable method. That is, if the signature is like below and  clinicService.findVets(""arg1"", ""arg2""); method is invoked.  ``` @Cacheable(value=""vets"") public Collection findVets(String args1, String args2) { } ```  then actual data structure of 'params' is like  new Object[]{""arg1"", ""arg2""}.  But if the signature is like below  ``` @Cacheable(value=""vets"") public Collection findVets(String... args) { } ```  then actual data structure of 'params' is like  new Object[]{new String[]{""arg1"", ""arg2""}}.  Becuase of difference between this two data structure, final hashCode get also different. This pull request contains logic that converting  data structure like below, and in both case cache key has same value.  ``` new Object[]{new String[]{""arg1"", ""arg2""}}   => new Object[]{""arg1"", ""arg2""} ```  Issue: SPR-10870","closed","","vvictorlee","2013-09-06T11:09:40Z","2014-06-14T14:48:57Z"
"","471","DefaultContentTypeResolver String-based contentType","DefaultContentTypeResolver now also supports String-based ""contentType"" header values.  SPR-11461","closed","","sdeleuze","2014-02-27T09:52:28Z","2021-04-28T09:55:09Z"
"","405","Customizable thread creator should use an AtomicInteger","Customizable thread creator should use an `AtomicInteger` for a single and incrementing counter, for elastic thread pools locking for a single thread creation is at least twice expensive than using any AQS implementation.  I have to open an issue for this, sorry for starting on a wrong foot. Will do that soon.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","guidomedina","2013-11-06T16:13:50Z","2014-06-27T09:56:18Z"
"","361","Add ""ignoreResourceNotFound"" attribute to the @PropertySource","Currently, a file is required to exist if it is added to the @PropertySource annotation. If the application already  has the properties it needs, it should be possible to launch it without the associated file being present:  ``` @PropertySource(value = ""classpath:/notexists.properties"", ignoreResourceNotFound = true) ```  Adding new attribute 'ignoreResourceNotFound' to @PropertySource, user can decide to ignore the not-existing resource. - default is false - The ignoreResourceNotFound is supported for XML-based application   context by context:property-placeholder  ConfigurationClassParser is changed to load properties regarding option 'ignoreResourceNotFound',  and PropertySource is changed to have new member 'boolean ignoreResourceNotFound'.  Thank you.  issue: SPR-10932","closed","status: superseded,","vvictorlee","2013-09-25T07:31:03Z","2021-12-03T09:51:28Z"
"","360","Order of values in @PropertySource annotation depends on name attribute","ConfigurationClassPostProcessor parses @PropertySource annotation, then adds each PropertySource into 'envPropertySources'.  ``` Stack","closed","","vvictorlee","2013-09-25T01:02:48Z","2014-06-24T12:14:35Z"
"","364","Added websocket upgrade support for GlassFish 4.0","Commit 2397b21096ad1c184d9f22629f74a6c44a9ba923 changed websocket support to use GlassFish 4.0.1 nightlies, but broke support for 4.0. In GlassFish 4.0.1, the package that TyrusEndpoint is located in changed. This commit provides an abstract handler that does all required GlassFish setup, but delegates to version specific upgrade handlers to create the final TyrusEndpoint.  GlassFish 4.0 handler uses reflection to create its endpoint to prevent dependency issues of depending on different versions of tyrus-websocket-core and tyrus-container-servlet ##   I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","mikesir87","2013-09-26T14:10:29Z","2013-11-04T19:45:05Z"
"","522","Clean up spring-webmvc-portlet tests warnings","Clean up compiler warnings in the tests of spring-webmvc-portlet. This commit adds type parameters to all the types (mostly `List` and `Map`).  After this commit the only warnings in spring-web left are the subclasses of `MyCommandProvidingFormController`.  I did sing the CLA","closed","","marschall","2014-04-20T17:49:42Z","2014-06-24T20:10:16Z"
"","524","Clean up spring-web tests warnings","Clean up compiler warnings in the tests of spring-web. This commit adds type parameters to all the types (mostly `List` and `Map`).  After this commit the only warnings in spring-web left are in - `MockExpressionEvaluator` this can't be fixed until JSP-EL is fixed - `Jackson2ObjectMapperFactoryBeanTests#testSetModules` that code   would never compile with generics.  I did sing the CLA","closed","","marschall","2014-04-20T17:50:52Z","2014-06-17T13:13:36Z"
"","525","Clean up spring-tx tests warnings","Clean up compiler warnings in the tests of spring-tx. This commit adds type parameters to all the types (mostly `List` and `Map`). In addition it uses Java 5 autoboxing to get rid of several `new Integer` (except in cases where it's needed).  After this commit the only warnings in spring-tx left are in `TransactionAttributeSourceTests` that code would never compile with generics.  I did sing the CLA","closed","","marschall","2014-04-20T17:51:32Z","2014-06-27T10:16:56Z"
"","526","Clean up spring-jms tests warnings","Clean up compiler warnings in the tests of spring-jms. This commit adds type parameters to all the types (mostly `List` and `Map`).  I am not too sure about the `Map` type parameters in `MessageContentsDelegate` and `ResponsiveMessageDelegate` however the respective methods seem unused.  I did sing the CLA","closed","","marschall","2014-04-20T17:52:24Z","2014-06-14T13:07:35Z"
"","518","Clean up spring-jdbc tests warnings","Clean up compiler warnings in the tests of spring-jdbc. This commit adds type parameters to all the types (mostly `List` and `Map`). In addition it uses Java 5 autoboxing to get rid of all of the following - new Integer - new Long - new Float - new Double - new Boolean - new String  This should be unnoticeably faster since interning can be uses for Integer and such.  After this commit the only warnings in spring-jdbc left are: - raw type warning in `MapDataSourceLookupTests`, that code would never   compile with generics - deprecation warning for `#queryForInt` and `#queryForLong`  I did sign the CLA","closed","","marschall","2014-04-19T12:06:30Z","2014-06-26T06:51:10Z"
"","523","Clean up spring-expression tests warnings","Clean up compiler warnings in the tests of spring-expression. This commit adds type parameters to some of the types (mostly `List` and `Map`). Some of them can't be cleaned up, some tests are even specifically for raw types.  I did sing the CLA","closed","","marschall","2014-04-20T17:50:21Z","2014-06-26T06:51:09Z"
"","527","Clean up spring-context-support tests warnings","Clean up compiler warnings in the tests of spring-context-support.  This commit: - adds type parameters to all the types except `Cache` (mostly `List`   and `Map`) - removes unused imports  I did sing the CLA","closed","","marschall","2014-04-20T17:52:48Z","2014-06-26T06:51:21Z"
"","519","Clean up spring-aop tests warnings","Clean up compiler warnings in the tests of spring-aop. This commit adds type parameters to all the types.  I did sing the CLA","closed","","marschall","2014-04-20T17:48:03Z","2014-06-27T20:59:29Z"
"","433","Update TransactionSynchronizationUtils.java","Change proposal for issue [#SPR-7907] at:https://jira.springsource.org/browse/SPR-7907","closed","in: data,","pacciu","2014-01-07T15:55:56Z","2021-11-19T10:58:33Z"
"","385","Add overloads in HtmlUtils to allow for encoding aware behavior.","Based on the encoding, in many cases, many characters do not need to be transformed into entities. For instance, when the encoding is UTF-8, there are only 5 characters that needs to become entities and shouldn't appear in their literal forms.  See SPR-9293","closed","","candrews","2013-10-16T18:24:32Z","2014-12-31T10:21:34Z"
"","357","Fixed error message","An error message is incorrect. ""Problem locating method {0} cannot on type {1}"" should be replaced ""Problem locating method {0} on type {1}"".","closed","","clemp6r","2013-09-20T07:39:44Z","2014-06-27T12:40:19Z"
"","474","Add marshalling hooks in Jaxb2RootElementHttpMessageConverter","Allow Jaxb2RootElementHttpMessageConverter subclasses to customize the {@link Marshaller} and the {@link Unmarshaller} created by the message converter.  Issue: SPR-11488","closed","","sdeleuze","2014-02-28T16:22:10Z","2021-04-28T09:55:12Z"
"","503","Fix  default configuration","Adding a ChannelInterceptor does not suppress default executor settings anymore in the XML namespace.  Issue: SPR-11623","closed","","sdeleuze","2014-03-31T07:34:57Z","2021-04-28T09:55:35Z"
"","487","Add reply mode singleSession to @SendToUser","Added the ability to target a particular user session when a message passes through the broker. Given a user has two tabs open and the client sends a message to the server from tab 1, it is now possible to reply only to tab 1 instead of the default reply to all semantics.  Issue: SPR-11506","closed","","cloudmark","2014-03-14T21:41:39Z","2014-06-25T02:06:31Z"
"","438","Added ability to set the description property on CronTrigger through CronTriggerFactoryBean","Added the ability to set the description on the CronTriggerFactoryBean and have that value passed through and set on the CronTrigger it creates.","closed","","kkroner","2014-01-13T14:48:55Z","2014-06-26T10:04:46Z"
"","368","Issue: SPR-10919","Added support to ConfigurationClassParser to deal with @Bean annotated Java 8 default Methods. Introduced getInterfaces() Method to SourceClass to be able to consider @Bean annotated Bean factory methods on interfaces. Added additional processing step to doProcessConfigurationClass(…) to process information in interfaces. Introduced getRawCandidateMethods(…) to ConstructorResolver that is able to consider default Methods in addition to the previous raw candidates if executed on Java 8 or later. Added test case for feature.  All existing and new tests pass.","closed","status: superseded,","thomasdarimont","2013-09-30T10:32:45Z","2021-11-19T10:46:35Z"
"","417","Update AbstractMessageSource.java","Add method to pass in arguments along with a MessageSourceResolvable","closed","","jameskleeh","2013-11-21T14:32:14Z","2022-02-18T19:11:03Z"
"","504","Created SettableListenableFuture with tests","A SettableListenableFuture implementation of Spring's ListenableFuture The class is inspired by Google Guava’s com.google.common.util.concurrent.SettableFuture, but this implementation uses ReentrantReadWriteLock and CountDownLatch internally to handle thread synchronization.  Issue: SPR-11614","closed","","matsev","2014-03-31T17:46:26Z","2014-06-16T19:44:19Z"
"","490","Fix handling of required payload.","A payload that is required will now throw an appropriate exception regardless of if a conversion is required or not.  `isEmptyPayload` now takes the payload instead of the `Message` so that both the original payload and the converted payload, if necessary, share the same logic.  JSR-303 validation is now consistently applied.","closed","","snicoll","2014-03-20T00:10:35Z","2014-04-07T13:57:40Z"
"","476","Outdated code example correction in section 10.3.6","`withSuccess(""Hello world"", ""text/plain"")` replaced with `withSuccess(""Hello world"", MediaType.TEXT_PLAIN)`","closed","","platan","2014-03-03T21:25:29Z","2014-06-13T08:15:04Z"
"","440","[SPR-11317] ServletWebRequest.checkNotModified() methods should treat HEAD identically to GET","[SPR-11317](https://jira.springsource.org/browse/SPR-11317) `ServletWebRequest.checkNotModified()` methods don't treat a `HEAD` request identically to a `GET` request (in fact they don't consider `HEAD` at all).  [HTTP says](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.4):  > The HEAD method is identical to GET except that the server MUST NOT > return a message-body in the response. The metainformation contained > in the HTTP headers in response to a HEAD request SHOULD be identical > to the information sent in response to a GET request.  [Spring's reference documentation suggests](http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/mvc.html#mvc-ann-lastmodified) to call `WebRequest.checkNotModified()` to set the status code to 304:  > calling request.checkNotModified(lastModified) and returning null. The > former sets the response status to 304  As a consequence of the current implementation, applications which follow that recommendation violate against HTTP. In simple words: I had some fun debugging my application for a missing 304 status code while firing HEAD requests with `wget --server-response --spider` on it.  I suggest to respect `HEAD` in the mentioned methods identically to `GET`. ## Test cases  ``` @Test public void checkNotModifiedTimeStampForHEAD() {     long currentTime = new Date().getTime();     servletRequest.setMethod(""HEAD"");     servletRequest.addHeader(""If-Modified-Since"", currentTime);      request.checkNotModified(currentTime);      assertEquals(304, servletResponse.getStatus()); }  @Test public void checkNotModifiedETagForHEAD() {     String eTag = ""\""Foo\"""";     servletRequest.setMethod(""HEAD"");     servletRequest.addHeader(""If-None-Match"", eTag );      request.checkNotModified(eTag);      assertEquals(304, servletResponse.getStatus()); } ```  > I have signed and agree to the terms of the SpringSource Individual > Contributor License Agreement.","closed","","malkusch","2014-01-15T21:06:08Z","2014-07-02T06:13:19Z"
"","403","Handle UnsupportedOperationException from getInstalledExtensions in Glas...","...sfish 4.0  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","mikesir87","2013-11-04T19:48:43Z","2013-11-06T13:38:27Z"
"","387","Enhanced with ability to add advice to ProxyFactory - http://forum.sprin...","...g.io/forum/spring-projects/web-services/723874-ability-to-seamlessly-execute-custom-java-code-around-the-invocation-of-a-webservice  Please refer to the following post for details:  http://forum.spring.io/forum/spring-projects/web-services/723874-ability-to-seamlessly-execute-custom-java-code-around-the-invocation-of-a-webservice","closed","status: declined,","paturuv","2013-10-17T12:54:47Z","2021-05-19T09:48:38Z"
"","453","Minor corrections/typos to ""27. Cache Abstraction"" docs section","- `Cacheable(value=""books"", **key=""#isbn""` had closing parenthesis in the wrong place - removed extraneous commas  - ""`requires one to specify one (or multiple)...`"" sounded confusing, rephrased - ""exception will be `through`"" -> ""`thrown`""  ---  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kryger","2014-01-28T12:34:30Z","2014-01-28T14:19:42Z"
"","15559","@Resource is always marked as shareable [SPR-10931]","**[Łukasz Rekucki](https://jira.spring.io/secure/ViewProfile.jspa?name=lrekucki)** opened **[SPR-10931](https://jira.spring.io/browse/SPR-10931?redirect=false)** and commented  The following code in `CommonAnnotationBeanPostProcessor.java` effectively ignores ""shareable"" flag on `@Resource` annotation:  ``` private class ResourceElement extends LookupElement {     protected boolean shareable = true;      public ResourceElement(Member member, PropertyDescriptor pd) {         super(member, pd);     }          @Override     protected void initAnnotation(AnnotatedElement ae) {         // ...         this.shareable = resource.shareable();     } } ```  The problem is that `initAnnotation()` is called from super, thus the field default is assigned **later**.   ---  **Affects:** 3.1.2, 4.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7bc3e3b3f843fb50bb0f08a4dc5a0b432be24c8d, https://github.com/spring-projects/spring-framework/commit/0a318924752af63d83f29e86cda0d4a9e17f7b3a","closed","in: core,","spring-projects-issues","2013-09-24T06:45:55Z","2013-10-31T12:28:03Z"
"","15889","InvocableHandlerMethod should respect proxy instances/beans [SPR-11264]","**[zyro](https://jira.spring.io/secure/ViewProfile.jspa?name=zyro)** opened **[SPR-11264](https://jira.spring.io/browse/SPR-11264?redirect=false)** and commented  it looks like the reflection-based handler method invocation in InvocableHandlerMethod does not respect proxies.  i had no luck trying to annotate a handler method with anything else than the messaging-specific annotations... im thinking of transactional behavior, method-based security, aop, etc.   ---  **Affects:** 4.0 GA","closed","status: invalid,","spring-projects-issues","2013-12-30T00:53:01Z","2019-01-12T05:26:20Z"
"","15888","hardcoded "".../queue/...""-part in DefaultUserDestinationResolver conflicts with rabbitmq exchange naming [SPR-11263]","**[zyro](https://jira.spring.io/secure/ViewProfile.jspa?name=zyro)** opened **[SPR-11263](https://jira.spring.io/browse/SPR-11263?redirect=false)** and commented  the hardcoded ""queue"" suffix for the subscription prefix makes it impossible to use a pattern like ""/user/exchange/amq.direct/..."" instead of ""/user/queue/..."". e.g. with rabbitmq this means to be restricted to durable, no-auto-delete queues atm?   ---  **Affects:** 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/abb8a93e2fa3e91286d72518dbb5f88c219834ef","closed","type: bug,","spring-projects-issues","2013-12-30T00:44:24Z","2014-01-28T13:07:16Z"
"","15781","client-side stomp authentication headers are passed to the message broker [SPR-11154]","**[zyro](https://jira.spring.io/secure/ViewProfile.jspa?name=zyro)** opened **[SPR-11154](https://jira.spring.io/browse/SPR-11154?redirect=false)** and commented  environment: using rabbitmq with its stomp plugin and default configuration as message broker impl.  if i understand correctly how the stomp client registration currently works, it should never be necessary that a (web-) user sends stomp authentication headers (""login""/""passcode"") in a websocket message?  the behavior that i am currently seeing is: 1. wrong/dummy credentials: [BAD CONNECT] reply from rabbitmq 2. empty strings as login/passcode: some header format error from StompDecoder 3. no credentials (i.e. empty js-object as stompClient connect headers): works  --> even if #3 works, that does mean a client is able to ""knock"" at the message brokers stomp authentication (#1). --> also, i guess #3 does just work because the rabbitmq default configuration defines a ""default_user"" (guest/guest) that is used if login/passcode are omitted. --> shouldnt the configured StompBrokerRelayRegistration.applicationLogin and StompBrokerRelayRegistration.applicationPasscode be used for a users CONNECT-frame as well?  ---  **Affects:** 4.0 RC2  **Issue Links:** - #17319 Don't forceably override client login and passcode on STOMP CONNECT  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4e5e700213149615c75bc3398549fc5472836908","closed","type: enhancement,","spring-projects-issues","2013-12-04T12:46:28Z","2019-01-11T19:36:41Z"
"","15780","avoid dependency on reactor-tcp when using a stomp broker relay [SPR-11153]","**[zyro](https://jira.spring.io/secure/ViewProfile.jspa?name=zyro)** opened **[SPR-11153](https://jira.spring.io/browse/SPR-11153?redirect=false)** and commented  currently, StompBrokerRelayMessageHandler uses ReactorNettyTcpClient as its the only implementation available. however, this implies a dependency on reactor-tcp (and reactor-core), which was tried to avoid in other places.   ---  **Affects:** 4.0 RC2  **Reference URL:** https://github.com/spring-projects/spring-framework/commit/29934d7c0249e54897cb06c1d779dcaec4d6f4ee#commitcomment-4772250  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0a12f28b58c834fac8a873d2862d0cc94f7a5163","closed","type: enhancement,","spring-projects-issues","2013-12-04T12:27:46Z","2014-01-28T13:07:15Z"
"","15930","Bad type comparison in ReflectionHelper.getTypeDifferenceWeight(List paramTypes, List argTypes) [SPR-11306]","**[Zoltan Farkas](https://jira.spring.io/secure/ViewProfile.jspa?name=zolyfarkas)** opened **[SPR-11306](https://jira.spring.io/browse/SPR-11306?redirect=false)** and commented  Bad type comparison in  ``` ReflectionHelper.getTypeDifferenceWeight(List paramTypes, List argTypes) ```  At line 132  ``` if (paramType.equals(superClass)) { ```  This comparison will never be true since paramType class is not the same sa superClass class:  ``` TypeDescriptor paramType = paramTypes.get(i); ```  and  ``` Class superClass = argType.getClass().getSuperclass(); ```  This issue was highlighted by findbugs.   ---  **Affects:** 3.2.6, 4.0 GA  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","in: core,","spring-projects-issues","2014-01-13T14:58:57Z","2014-01-28T13:07:16Z"
"","15896","enable cache can use both @Cacheable and @CachePut  [SPR-11271]","**[zhangkaitao](https://jira.spring.io/secure/ViewProfile.jspa?name=zhangkaitao)** opened **[SPR-11271](https://jira.spring.io/browse/SPR-11271?redirect=false)** and commented  such as user module，exists： id username email  when invoke findById method，I want add id --> user 、 username --> user 、 email --> user  can modify Cache  ``` // We only attempt to get a cached result if there are no put requests if (cachePutRequests.isEmpty() && contexts.get(CachePutOperation.class).isEmpty()) {      result = findCachedResult(contexts.get(CacheableOperation.class)); } ```  to  ```          Collection cacheOperationContexts = contexts.get(CacheableOperation.class);         // We only attempt to get a cached result if there are has @Cachable         if (!cacheOperationContexts.isEmpty()) {             result = findCachedResult(cacheOperationContexts);         } ```  enable。  now,i can use follow code support:  ```     @Caching(             cacheable = {                     @Cacheable(value = ""user"", key = ""#id"")             },             put = {                     @CachePut(value = ""user"", key = ""#result.username"", condition = ""#result != null""),                     @CachePut(value = ""user"", key = ""#result.email"", condition = ""#result != null"")             }     )     public User findById(final Long id) {         System.out.println(""cache miss, invoke find by id, id:"" + id);         for (User user : users) {             if (user.getId().equals(id)) {                 return user;             }         }         return null;     }  ```  https://github.com/zhangkaitao/spring4-showcase/blob/master/spring-cache/src/main/java/com/sishuok/spring/service/UserService.java https://github.com/zhangkaitao/spring4-showcase/blob/master/spring-cache/src/test/java/org/springframework/cache/interceptor/CacheAspectSupport.java  but，best cache way is： id --> user、 username --> id、email --> id  `@CachePut`(value=""cacheName"", key=""#user.username"", cacheValue=""#user.username"") public void save(User user) {}  `@Cacheable`(value=""cacheName"", ley=""#user.username"", cacheValue=""#caches[0].get(#caches[0].get(#username).get())"") public User findByUsername(String username);    ---  **Affects:** 4.0 GA","closed","type: enhancement,","spring-projects-issues","2014-01-01T05:08:49Z","2019-01-14T05:17:56Z"
"","15894","Make spring support like CDI @Produces (for Array/Map/Collection inject) [SPR-11269]","**[zhangkaitao](https://jira.spring.io/secure/ViewProfile.jspa?name=zhangkaitao)** opened **[SPR-11269](https://jira.spring.io/browse/SPR-11269?redirect=false)** and commented  cdi support like  ```   @Produces List availableConfs; ```  see http://my.oschina.net/hantsy/blog/186939  because spring implement array/collection/map inject use find Component bean then add to array/collection/map。Can simple modify DefaultListableBeanFactory to support。please see  864 line： https://github.com/zhangkaitao/spring4-showcase/blob/master/spring4-others/src/test/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java  1、find like List\ bean; 2、find BeanInterface bean，add to List； 3、others;  example： https://github.com/zhangkaitao/spring4-showcase/blob/master/spring4-others/src/test/java/com/sishuok/spring4/genericinject/GenericInjectTest.java  only support java config way，if want support xml,need modify bean definition(add ResolvableType else collection class)  ---  **Affects:** 4.0 GA  **Issue Links:** - #12570 Allow for normal bean wiring semantics for types assignable to Map (_**""duplicates""**_) - #16794 `@Autowired` does not work for target bean of type Collection (_**""duplicates""**_) - #18162 Cannot inject List even using `@Named` (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2013-12-31T04:09:20Z","2019-01-13T06:56:45Z"
"","15569","DefaultMessageListenerContainer logs connectivity failures in Server Log [SPR-10941]","**[Zayeem](https://jira.spring.io/secure/ViewProfile.jspa?name=xbbjk5d)** opened **[SPR-10941](https://jira.spring.io/browse/SPR-10941?redirect=false)** and commented  When there is a connectivity issue , DefaultMessageListenerContainer logs connectivity failures in Server Log repeatedly until the connection is successful. Is there a way to log these failures in application specific logs instead of Server Logs. Because , this is filling up System.out logs in Server.  INFO [jmsContainer-1] org.springframework.jms.listener.DefaultMessageListenerContainer - Could not refresh JMS Connection - retrying in 5000 ms: javax.jms.JMSException: MQJMS2005: failed to create MQQueueManager for 'hostName:queueManager'   ---  **Affects:** 3.0.1","closed","type: enhancement,","spring-projects-issues","2013-09-26T11:35:13Z","2013-10-18T13:25:13Z"
"","15827","No stack trace on SockJS HTTP transport failure to write to the response [SPR-11201]","**[Yohan Liyanage](https://jira.spring.io/secure/ViewProfile.jspa?name=yohanliyanage)** opened **[SPR-11201](https://jira.spring.io/browse/SPR-11201?redirect=false)** and commented  In the latest snapshot build of 4.0, SockJS based Web Socket implementation fails to dispatch messages to subscribers randomly, when connected over Internet.  When I looked into the log file, I do not see any stack traces, but I see the following log output.  ``` :38:51.577 [clientOutboundChannel-4] DEBUG o.s.m.simp.stomp.StompEncoder - Encoded STOMP command=MESSAGE headers={content-type=[application/json;charset=UTF-8], subscription=[sub-0], message-id=[fklmkqzi-0], destination=[/queue/synchronize]} 08:38:51.578 [clientOutboundChannel-4] TRACE o.s.w.s.s.t.s.WebSocketServerSockJsSession - Cancelling heartbeat 08:38:51.578 [clientOutboundChannel-4] TRACE o.s.w.s.s.t.s.WebSocketServerSockJsSession - Preparing to write SockJsFrame content='a[""MESSAGE\ncontent-type:application/json;charset=UTF-8\nsubscription:sub-0\nmes...(truncated)' 08:38:51.581 [clientOutboundChannel-4] TRACE o.s.w.s.s.t.s.WebSocketServerSockJsSession - Write SockJsFrame content='a[""MESSAGE\ncontent-type:application/json;charset=UTF-8\nsubscription:sub-0\nmes...(truncated)' 08:38:51.581 [clientOutboundChannel-4] TRACE o.s.w.s.a.j.JettyWebSocketSession - Sending TextMessage payload= a[""MESSAGE.., length=439, last=true], WebSocket session id=f70433f 08:38:51.582 [clientOutboundChannel-4] WARN  o.s.w.s.s.t.s.WebSocketServerSockJsSession - Terminating connection after failure to send message: null 08:38:51.582 [clientOutboundChannel-4] DEBUG o.s.w.s.a.j.JettyWebSocketSession - Closing WebSocket session id=f70433f 08:38:51.586 [clientOutboundChannel-4] DEBUG o.s.w.s.s.t.s.WebSocketServerSockJsSession - SockJS session id=fklmkqzi was closed, CloseStatus [code=1011, reason=null] 08:38:51.586 [clientOutboundChannel-4] DEBUG o.s.w.s.h.LoggingWebSocketHandlerDecorator - Connection closed for SockJS session id=fklmkqzi, CloseStatus [code=1011, reason=null] 08:38:51.586 [clientOutboundChannel-4] TRACE o.s.m.s.ExecutorSubscribableChannel - [clientInboundChannel] sending message id=c3363e80-892a-d836-4ae2-23c2fbc91ef8 08:38:51.586 [clientInboundChannel-1] TRACE o.s.m.s.a.s.SimpAnnotationMethodMessageHandler - Ignoring message, no destination 08:38:51.586 [clientInboundChannel-1] DEBUG o.s.m.s.b.DefaultSubscriptionRegistry - Unregistering subscriptions for sessionId=fklmkqzi 08:38:51.587 [clientInboundChannel-1] TRACE o.s.m.s.u.DefaultUserDestinationResolver - Ignoring DISCONNECT message 08:38:51.587 [clientOutboundChannel-4] TRACE o.s.m.s.ChannelInterceptorChain - postSend (sent=true) message id c3363e80-892a-d836-4ae2-23c2fbc91ef8 08:38:51.587 [clientOutboundChannel-4] DEBUG o.s.m.simp.stomp.StompEncoder - Encoded STOMP command=ERROR headers={message=[Failed to write SockJsFrame content='a[""MESSAGE\ncontent-type:application/json;charset=UTF-8\nsubscription:sub-0\nmes...(truncated)'; nested exception is java.nio.BufferOverflowException]} ```  From this, it appears that there seems to be a java.nio.BufferOverflowException. However, the stack trace is not being logged and it seems to be lost.  On the client side (Chrome), I see ""WebSocket connection to 'ws://209.../' failed: Received unexpected compressed frame"".  Environment Details: Spring 4.0.0 Snapshot Jetty 9.1.0 CentOS 6   ---  **Affects:** 4.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d0556e61f981210dc96a9b99f0cb6f8b32738b32","closed","type: enhancement,","spring-projects-issues","2013-12-10T01:26:29Z","2014-01-28T13:07:08Z"
"","16129","Unable to retrieve FlashMap when target parameters are encoded [SPR-11504]","**[Yannick Lazzari](https://jira.spring.io/secure/ViewProfile.jspa?name=ylazzari)** opened **[SPR-11504](https://jira.spring.io/browse/SPR-11504?redirect=false)** and commented  When the AbstractFlashMapManager decodes the target request parameters of a FlashMap before saving it, it only decodes the parameter values, not the parameter names.  Parameter names are also part of the URL, just like values, so they might potentially also contain characters that were encoded, which is not that uncommon considering the binding path naming convention for array/map parameters that use the square brackets, e.g. '/some/url?params[0]=value1¶ms[1]=value2' which gets encoded to '/some/url?params%5B0%5D=value1¶ms%5B1%5D=value2'.  A similar issue had been raised in the past (#14291) but the fix then was to only decode the parameter values (see following commit: https://github.com/spring-projects/spring-framework/commit/364bb696e0d45644919f418a9d7bad1522147820).  ---  **Affects:** 3.2.4  **Issue Links:** - #14291 Flashmap matching logic fails when target params are encoded. - #16441 Unable to retrieve FlashMap when contains ""+""(half-space) in the request parameters - #17170 Flash attributes not working with spaces in query parameters  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/fed05a9c411e702f38d1e54baf4d3a5eb6b475ed  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)  0 votes, 7 watchers","closed","type: bug,","spring-projects-issues","2014-03-03T07:09:13Z","2019-01-11T21:38:48Z"
"","15847","improve ApplicationListener to support generic types [SPR-11222]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-11222](https://jira.spring.io/browse/SPR-11222?redirect=false)** and commented  inspire by new feature ""generic types as a form of qualifier"" in spring 4.0  ```java public class MyEvent extends ApplicationEvent { ... } ```  ```java @Component public class ListenerA implements 		ApplicationListener { // only listen MyEvent } ```  ```java @Component public class ListenerB implements 		ApplicationListener { // only listen MyEvent } ```  ```java @Component public class ListenerAll implements 		ApplicationListener { // listen all MyEvent } ```  ---  **Affects:** 4.0 GA  **Reference URL:** http://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/htmlsingle/#beans-generics-as-qualifiers  **Issue Links:** - #12850 ApplicationEvent should take generics into account when dispatching events (_**""is duplicated by""**_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2013-12-12T19:01:02Z","2019-01-11T18:27:03Z"
"","15872","when set value to a Object , has a problem if the value contains blank [SPR-11247]","**[wuzhihui](https://jira.spring.io/secure/ViewProfile.jspa?name=wuzhihui001)** opened **[SPR-11247](https://jira.spring.io/browse/SPR-11247?redirect=false)** and commented  if my config is : ...... \ \ hibernate.cache.use_second_level_cache=true     \ \ ....  is not work.  because there have blank after value of ""true"",  like:""hibernate.cache.use_second_level_cache=true   "". I think the program must auto remove the blank value . what do you think ???   ---  **Affects:** 3.2.2","closed","status: bulk-closed,","spring-projects-issues","2013-12-18T21:55:24Z","2019-01-12T02:46:26Z"
"","15599","Throw exception when @ContextConfiguration#classes are not annotated with @Configuration [SPR-10971]","**[Wojciech Krak](https://jira.spring.io/secure/ViewProfile.jspa?name=wojciech.krak)** opened **[SPR-10971](https://jira.spring.io/browse/SPR-10971?redirect=false)** and commented  I think that would be nicer if the TestContext framework would throw an exception if a class declared via `@ContextConfiguration#classes` is not annotated with `@Configuration`.  If a configuration class has many annotations it is easy to forget to annotate it with `@Configuration`. With the status quo, it is possible that an empty application context is created, which can be a bit surprising.  ---  **Affects:** 3.2.4  **Issue Links:** - #13690 spring-test allows you to reference configuration classes that aren't annotated with `@Configuration`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ffd05a8e37ba9154fc37611505a725812d80d09","closed","type: enhancement,","spring-projects-issues","2013-10-09T03:32:08Z","2019-01-13T06:57:54Z"
"","15589","Make it easier for RestTemplate to deal with error object responses [SPR-10961]","**[Willie Wheeler](https://jira.spring.io/secure/ViewProfile.jspa?name=ww4)** opened **[SPR-10961](https://jira.spring.io/browse/SPR-10961?redirect=false)** and commented  One challenge with RestTemplate is that it expects a single response type when making calls. Of course we get to choose it, but there's only one per call. The problem is that some APIs (e.g. Github API as one example) return either the expected type or else an error object, depending on whether there was an error.  It would be great if we could tell RestTemplate to deserialize into such-and-such class if there's no error, and into some other class if there is an error.  Right now the workaround I'm using is to deserialize into a String, and then parse it into the correct type depending on the status code. This is OK, but it's kind of a pain (see the blog post above), and worse, it requires buffering the entire response payload as a string, which may not be great if the payloads are large.  ---  **Affects:** 4.0 M3  **Reference URL:** http://springinpractice.com/2013/10/07/handling-json-error-object-responses-with-springs-resttemplate/  **Issue Links:** - #20103 RestTemplate is missing ""Typed"" error handler. (_**""is superseded by""**_)  30 votes, 25 watchers","closed","has: votes-jira,","spring-projects-issues","2013-10-07T03:06:35Z","2019-01-11T22:09:59Z"
"","16261","Issue with MethodValidationInterceptor, Spring MVC Test Framework, and Mockito [SPR-11638]","**[William Gorder](https://jira.spring.io/secure/ViewProfile.jspa?name=wgorder)** opened **[SPR-11638](https://jira.spring.io/browse/SPR-11638?redirect=false)** and commented  I think what is happening is that Mockito creates a CGLIB proxy for the `@Validated` service interface and then Spring wraps it again for method validation. The problem is I use `Mockito.reset(..)` to reset the mocks between tests, and when this happens Mockito cannot tell that the verify has been called. I tried unwrapping the proxy and passing that to reset with no success either.  The only work around I can find is to simply remove `@Validated` or create an entirely new test context that does not create a `MethodValidationInterceptor` bean via `MethodValidationPostProcessor`.  Is there a workaround I can use for this?  You can reference a sample test case (which will fail) here: https://github.com/wgorder/spring-issues  If you comment out `@Validated` on the `ServiceImpl2` interface the tests will pass.   ---  **Affects:** 4.0.3  **Reference URL:** https://github.com/wgorder/spring-issues","closed","status: declined,","spring-projects-issues","2014-03-31T10:53:06Z","2019-01-12T16:35:05Z"
"","16298","当Context-Type为text/plain并且内容为中文时，响应内容与响应头信息不一致。 [SPR-11675]","**[weitao](https://jira.spring.io/secure/ViewProfile.jspa?name=undancer)** opened **[SPR-11675](https://jira.spring.io/browse/SPR-11675?redirect=false)** and commented  ``` @RequestMapping(method = RequestMethod.GET, produces = 'text/plain')     def get() { return '中文' } ```  ``` curl -i http://localhost:3400/ HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/plain;charset=UTF-8 Content-Length: 20 Date: Sun, 06 Apr 2014 16:49:20 GMT  ???? ```  Content-Type: text/plain;charset=UTF-8 ????","closed","status: declined,","spring-projects-issues","2014-04-07T22:58:39Z","2019-01-12T16:35:00Z"
"","15619","unsupported method for 'put' when spring form tag's method is 'put' and enctype is multipart/form-data. [SPR-10991]","**[wayshall zeng](https://jira.spring.io/secure/ViewProfile.jspa?name=wayshall)** opened **[SPR-10991](https://jira.spring.io/browse/SPR-10991?redirect=false)** and commented  unsupported method for 'put' when spring form tag's method is 'put' and enctype is multipart/form-data.   ---  **Affects:** 3.2.2","closed","status: bulk-closed,","spring-projects-issues","2013-10-15T22:06:42Z","2019-01-12T00:21:57Z"
"","16344","BindingResult errors from @ModelAttribute are not carried over to @RequestMapping annotated method [SPR-11722]","**[Vladimir Semenov](https://jira.spring.io/secure/ViewProfile.jspa?name=vsemenov)** opened **[SPR-11722](https://jira.spring.io/browse/SPR-11722?redirect=false)** and commented  BindingResult errors generated in `@ModelAttribute` annotated method are not carried over into the BindingResult passed to `@RequestMapping` annotated method in the same controller.  This appears to be a bug since `@ModelAttribute` annotated method accepts BindingResult, and errors in Model from `@ModelAttribute` annotated method are carried over to `@RequestMapping` annotated method, but errors from BindingResult are not.   ---  **Affects:** 3.1 GA","closed","status: declined,","spring-projects-issues","2014-04-22T22:18:25Z","2019-01-12T16:34:58Z"
"","16314","@CachePut evaluates incorrectly expressions for the different implementation of the same interface  [SPR-11692]","**[Vladimir Dolzhenko](https://jira.spring.io/secure/ViewProfile.jspa?name=vdolzhenko)** opened **[SPR-11692](https://jira.spring.io/browse/SPR-11692?redirect=false)** and commented  There is some dao interface e.g.  ``` public interface BaseDao {     T persist(T t); } ```  and two subinterfaces  ``` public interface UserDao extends BaseDao { }  public interface OrderDao extends BaseDao { } ```  The implementation uses **`@CachPut`** :  ``` public class UserDaoImpl implements UserDao {     @CachePut(value = ""users"", key = ""#user.id"")     public User persist(User user){         /// it doesn't matter     } }  public class OrderDaoImpl implements OrderDao {     @CachePut(value = ""orders"", key = ""#order.id"")     public Order persist(Order order){         /// it doesn't matter     } } ```  After **userDao.persist** is used, **orderDao.persist** is **NOT** able to evaluate expression **#order.id** because in the evaluation context the instance of order is assigned to **user** variable.  It happens because `@CachePut` expression is cached for **BaseDao.persist** method neither for the declared class.   ---  **Affects:** 4.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2d8e0c8f87071cc9ef648e63f09a73e7c4a6206f, https://github.com/spring-projects/spring-framework/commit/397aa8298492d74ab64bff900229c11d2f5c5112  1 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2014-04-14T07:41:18Z","2014-05-01T01:36:41Z"
"","15758","EhCacheFactoryBean.afterPropertiesSet should be synchronized [SPR-11132]","**[Vincent PERICART](https://jira.spring.io/secure/ViewProfile.jspa?name=mauhiz)** opened **[SPR-11132](https://jira.spring.io/browse/SPR-11132?redirect=false)** and commented  When initializing 2 contexts at the same time, which both use a EhCacheFactoryBean, there is a potential race condition when : - the same CacheManager instance is used - both contexts have a cache with the same name  The error stack's root cause is :  Caused by: net.sf.ehcache.CacheException: Cannot replace XXX It does not equal the incumbent cache. at net.sf.ehcache.CacheManager.replaceCacheWithDecoratedCache(CacheManager.java:1653) at org.springframework.cache.ehcache.EhCacheFactoryBean.afterPropertiesSet(EhCacheFactoryBean.java:354)  The expected behaviour (which occurs most of the time) is that one of the contexts creates the cache, and the other one simply gets a reference to it.   ---  **Affects:** 3.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1dc79f7f9cdf916dbd4c88a9fdedc77d1aebe6c9, https://github.com/spring-projects/spring-framework/commit/de890fd10021aa69850280e2469f1081e2500d61","closed","in: core,","spring-projects-issues","2013-12-01T05:11:26Z","2013-12-03T15:15:30Z"
"","15706","EhCacheFactoryBean fails when statistics are enabled [SPR-11080]","**[Vincent PERICART](https://jira.spring.io/secure/ViewProfile.jspa?name=mauhiz)** opened **[SPR-11080](https://jira.spring.io/browse/SPR-11080?redirect=false)** and commented  A blocking cache defined like this:  \ \ \ \ \ \ \ \ \ \ \  Used to work in 3.2.4.RELEASE but fails in 3.2.5.RELEASE with the message : The jspCacheFactory Cache is not alive (STATUS_UNINITIALISED)  ehcache version is 2.6.6 The error is thrown in ehCacheFactoryBean:342 because setStatisticsEnabled requires the cache to be alive. The solution would be to enable statistics after initialization (after doing this.cacheManager.addCache(rawCache); )  ---  **Affects:** 3.2.5  **Issue Links:** - #15718 Set statistics enabled for EhCache (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6c1f62b19d8165a873b8ee410006fa14f589a1c0, https://github.com/spring-projects/spring-framework/commit/6ce2eb96229d64055450861b8cebddb264a59e1c","closed","in: core,","spring-projects-issues","2013-11-10T23:30:48Z","2019-01-11T19:23:17Z"
"","16005","Potential ClassCastException in RequestContextListener when destroying the request object [SPR-11378]","**[Vikram Hullukunte](https://jira.spring.io/secure/ViewProfile.jspa?name=hvvikram)** opened **[SPR-11378](https://jira.spring.io/browse/SPR-11378?redirect=false)** and commented  In jersey-spring3, The org.glassfish.jersey.server.spring.scope.RequestContextFilter class creates JaxrsRequestAttributes datastructure and sets in the Threadlocal.  If an exception occurs in the calling chain of the jersey resource and the exception is not handled by jersey, then Spring's RequestContextListner bombs while destroying the threadlocal set as part of the request.  The exception:  SEVERE: Exception sending request initialized lifecycle event to listener instance of class org.springframework.web.context.request.RequestContextListener java.lang.ClassCastException: org.glassfish.jersey.server.spring.scope.JaxrsRequestAttributes cannot be cast to org.springframework.web.context.request.ServletRequestAttributes at org.springframework.web.context.request.RequestContextListener.requestDestroyed(RequestContextListener.java:70) at org.apache.catalina.core.StandardContext.fireRequestDestroyEvent(StandardContext.java:6080) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:207) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:947) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1009) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1686) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:724)   ---  **Affects:** 3.2.7, 4.0.1  **Reference URL:** https://gist.github.com/hvvikram/8746498  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","type: bug,","spring-projects-issues","2014-01-31T17:08:39Z","2014-02-18T22:36:01Z"
"","15965","NoClassDefFoundError with Spring 3.2.7.BUILD-SNAPSHOT on WebSphere 6.1 [SPR-11341]","**[Vijendra Kulhade](https://jira.spring.io/secure/ViewProfile.jspa?name=vkulhade)** opened **[SPR-11341](https://jira.spring.io/browse/SPR-11341?redirect=false)** and commented  Hi Team,  I was getting getEnv.* Exception from my was server.  https://jira.springsource.org/browse/SPR-11297  Below this above exception I was is unable to initialize dispature servlet also. In the below stacktrace adminView is the DispatureServlet. Please suggest.  [Servlet.LOG]: Initializing Spring FrameworkServlet 'adminView' [1/21/14 9:06:20:587 EST] 00000013 ServletWrappe E   SRVE0100E: Did not realize  init() exception thrown by servlet adminView: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0': Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: javax.xml.stream.XMLStreamException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1037) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:983) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:487) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:628) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:410) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:112) at com.ibm.ws.wswebcontainer.webapp.WebApp.notifyServletContextCreated(WebApp.java:653) at com.ibm.ws.webcontainer.webapp.WebApp.commonInitializationFinish(WebApp.java:378) at com.ibm.ws.wswebcontainer.webapp.WebApp.initialize(WebApp.java:293) at com.ibm.ws.wswebcontainer.webapp.WebGroup.addWebApplication(WebGroup.java:93) at com.ibm.ws.wswebcontainer.VirtualHost.addWebApplication(VirtualHost.java:162) at com.ibm.ws.wswebcontainer.WebContainer.addWebApp(WebContainer.java:673) at com.ibm.ws.wswebcontainer.WebContainer.addWebApplication(WebContainer.java:626) at com.ibm.ws.webcontainer.component.WebContainerImpl.install(WebContainerImpl.java:335) at com.ibm.ws.webcontainer.component.WebContainerImpl.start(WebContainerImpl.java:551) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1274) at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1137) at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:572) at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:816) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:945) at com.ibm.ws.runtime.component.ApplicationMgrImpl$AppInitializer.run(ApplicationMgrImpl.java:2120) at com.ibm.wsspi.runtime.component.WsComponentImpl$_AsynchInitializer.run(WsComponentImpl.java:342) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1551) Caused by: org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: javax.xml.stream.XMLStreamException at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:163) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:87) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$4.run(AbstractAutowireCapableBeanFactory.java:1025) at java.security.AccessController.doPrivileged(AccessController.java:214) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1023) ... 30 more Caused by: java.lang.NoClassDefFoundError: javax.xml.stream.XMLStreamException at java.lang.J9VMInternals.verifyImpl(Native Method) at java.lang.J9VMInternals.verify(J9VMInternals.java:69) at java.lang.J9VMInternals.initialize(J9VMInternals.java:131) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.\(RequestMappingHandlerAdapter.java:183) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:67) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:522) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:148) ... 34 more Caused by: java.lang.ClassNotFoundException: javax.xml.stream.XMLStreamException at java.net.URLClassLoader.findClass(URLClassLoader.java:497) at com.ibm.ws.bootstrap.ExtClassLoader.findClass(ExtClassLoader.java:132) at java.lang.ClassLoader.loadClass(ClassLoader.java:640) at com.ibm.ws.bootstrap.ExtClassLoader.loadClass(ExtClassLoader.java:87) at java.lang.ClassLoader.loadClass(ClassLoader.java:606) at com.ibm.ws.classloader.ProtectionClassLoader.loadClass(ProtectionClassLoader.java:58) at com.ibm.ws.classloader.ProtectionClassLoader.loadClass(ProtectionClassLoader.java:54) at com.ibm.ws.classloader.CompoundClassLoader.loadClass(CompoundClassLoader.java:418) at java.lang.ClassLoader.loadClass(ClassLoader.java:606) at com.ibm.ws.classloader.CompoundClassLoader.loadClass(CompoundClassLoader.java:418) at java.lang.ClassLoader.loadClass(ClassLoader.java:606) ... 43 more  ---  **Affects:** 3.2.5, 3.2.6, 3.2.7  **Issue Links:** - #15945 Downgrade accidental use of Java 1.6 APIs","closed","type: bug,","spring-projects-issues","2014-01-21T06:23:32Z","2019-01-11T19:00:08Z"
"","16319","Exception translators through annotations [SPR-11697]","**[Venkat](https://jira.spring.io/secure/ViewProfile.jspa?name=itsvenkis)** opened **[SPR-11697](https://jira.spring.io/browse/SPR-11697?redirect=false)** and commented  It would be great to have exception translators by annotations. Maintenance of code will be simplified through this approach. In general during exception handling/translation, one will 1: catch the exception 2: log it 3: convert it to some custom exception and throw it back Instead of doing the above steps where ever it is appropriate, one can have an annotation defined at method level taking expected type and the type of exception it should be translated to. By default annotation behavior can follow the above mentioned steps. For example:  ``` public class Foo{ @ExceptionTranslator(expected=IOException.class,to=CustomException.class) public void getFoo(){ //do something } }  ```    --- No further details from [SPR-11697](https://jira.spring.io/browse/SPR-11697?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2014-04-15T09:06:46Z","2019-01-12T00:20:16Z"
"","16077","EntityManager should explicitly get closed for non-executed Query objects [SPR-11451]","**[Vaidhyanathan](https://jira.spring.io/secure/ViewProfile.jspa?name=vaidya.uk1983@gmail.com)** opened **[SPR-11451](https://jira.spring.io/browse/SPR-11451?redirect=false)** and commented  Hi,  In our application,We have dao interfaces extending JPARepository and the methods annotated with `@query` notation.  During the start of the server , we found that all the classes with `@query` notation are being invoked and to our surprise in the logs we found that before execution of the methods with `@query` annotation this log is getting generated :-  Creating new EntityManager for shared EntityManager invocation  but we didnt see any debug logs with 'Closing JPA Entity Manager'.  When we ran the hibernate statistics ,the session open count was equivalent to the number of `@query` methods and the session close count was 0.  We could infer that entity manager instances were not closed . We are facing connection leak issues in our application.We are suspecting this could be the issue.  We also checked the SharedEntityManagerCreator$SharedEntityManagerInvocationHandler Class the below code was present :-  if ((result instanceof Query)) { Query query = (Query)result; if (isNewEm) { Class[] ifcs = ClassUtils.getAllInterfacesForClass(query.getClass(), this.proxyClassLoader); result = Proxy.newProxyInstance(this.proxyClassLoader, ifcs, new SharedEntityManagerCreator.DeferredQueryInvocationHandler(query, target)); isNewEm = false;//This could happen in our case } else { EntityManagerFactoryUtils.applyTransactionTimeout(query, this.targetFactory); } } Object localObject2 = result; return localObject2; } catch (InvocationTargetException ex) { throw ex.getTargetException(); } finally { if (isNewEm) EntityManagerFactoryUtils.closeEntityManager(target); }  With this code snippet the entity manager will never be closed in our case. Moreover , we even saw the SharedEntityManagerCreator$DeferredQueryInvocationHandler class it was closing the connection only if ((method.getName().equals(""getResultList"")) || (method.getName().equals(""getSingleResult"")) || (method.getName().equals(""executeUpdate""))) EntityManagerFactoryUtils.closeEntityManager(this.em); }  Does this mean our method names where `@query` is annotated should getResultlist or getSingleList ?  Please confirm if there's any issue with the jar file. I have updated a sample code of our application and the logs that was getting generated.  Please help us in getting this issue resolved.  Thanks, Vaidhyanathan.  ---  **Affects:** 3.0.6  **Attachments:** - [Spring_jpa_app_repository_files.txt](https://jira.spring.io/secure/attachment/21687/Spring_jpa_app_repository_files.txt) (_1.03 kB_)  **Issue Links:** - [DATAJPA-350](https://jira.spring.io/browse/DATAJPA-350) Improve query validation by creating explicit EntityManager instance - #19927 Drop DeferredQueryInvocationHandler.finalize()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a8577da30cec91272ef7f367ab5f393d232a1ee1","closed","type: enhancement,","spring-projects-issues","2014-02-19T12:14:54Z","2019-01-11T21:24:17Z"
"","15530","Wrong translation of MS SQL Server RAISERROR [SPR-10902]","**[Vadim S](https://jira.spring.io/secure/ViewProfile.jspa?name=mrvadims)** opened **[SPR-10902](https://jira.spring.io/browse/SPR-10902?redirect=false)** and commented  The issue described in the following Jira Issue has reappeared in version 3.2.4.RELEASE.  Please fix as soon as possible.  https://jira.springsource.org/browse/SPR-2031   ---  **Affects:** 3.2.4  **Reference URL:** https://jira.springsource.org/browse/SPR-2031  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d9b620381ec19cb7ffaf411bb7574e9754bc54f4, https://github.com/spring-projects/spring-framework/commit/beaf6992b232023886e2fd54a0122bf3ad220a41, https://github.com/spring-projects/spring-framework/commit/ef66708aa6fcd1a8e9d195ffb77213ec1e4e9e13, https://github.com/spring-projects/spring-framework/commit/30b3e24a32475ca748e23896e50efd3a8b2e854d","closed","type: bug,","spring-projects-issues","2013-09-09T14:10:41Z","2013-10-31T12:27:52Z"
"","15543","SpEL can't evaluate value if properties contain self quotes [SPR-10915]","**[Tuz Pavel](https://jira.spring.io/secure/ViewProfile.jspa?name=lostoverflow)** opened **[SPR-10915](https://jira.spring.io/browse/SPR-10915?redirect=false)** and commented  I'm using **org.springframework.beans.factory.config.PropertyPlaceholderConfigurer** class to work with my properties. I'm trying to evaluate the value by concatenation of several props in such way:  ```xml  ```  It works fine if props does not contain single quote: ' If it has one - I am having an exception: org.springframework.expression.ParseException: Found closing ')' at position 109 without an opening '(' Want to notice: if I try a similar expression in SINGLE line:  ```xml  ```  it works fine TOO even if it contaqns quoters!  Step to reproduce: try to evaluate SpEL expression:  ```xml  ```  with props values:  ```   prop1=abc  prop2=cd'e ```  If you can't reproduce the bug, try my original xml config and props files. problem property is  ``` reader.regexp.header.pokerType=(Hold'em|Omaha)\\s+ ```    ---  **Attachments:** - [cfg_props.zip](https://jira.spring.io/secure/attachment/21386/cfg_props.zip) (_1.47 kB_)","closed","in: core,","spring-projects-issues","2013-09-13T15:54:23Z","2019-01-13T21:02:32Z"
"","15802","Spring MVC doesn't support portlet namespaces [SPR-11176]","**[Turcsányi László](https://jira.spring.io/secure/ViewProfile.jspa?name=laci009)** opened **[SPR-11176](https://jira.spring.io/browse/SPR-11176?redirect=false)** and commented  In Liferay 6.2, the portlet namespace for form parameters are mandatory. Therefore you can't use `@ModelAttribute`, the parameter values after submitting the form are null.   ---  **Affects:** 3.2.5  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2013-12-05T04:32:04Z","2019-01-11T19:35:55Z"
"","16300","Introduce annotation to skip test based on active Spring profile [SPR-11677]","**[Torsten Krah](https://jira.spring.io/secure/ViewProfile.jspa?name=tkrah)** opened **[SPR-11677](https://jira.spring.io/browse/SPR-11677?redirect=false)** and commented  I've looked at the `@IfProfileValue`  and `@ActiveProfiles` annotations, but neither does what I am searching for.  We are using the `""spring.profiles.active""` system property to activate different profiles, even at the test level -- e.g. `""h2, default""` or something else.  We have tests which are only for Oracle and should therefore only be run if the `""oracle""` profile is active, but I've found no way to express this on the test class itself.  A dedicated annotation would be nice to support this.  ---  **Affects:** 4.0.3  **Issue Links:** - #12410 Decide what to do with `@IfProfileValue` - #9538 Introduce strategy for determining if a profile value is enabled for a particular test environment - #13622 Allow overriding `@ActiveProfiles` in test classes with system property - #13625 SystemProfileValueSource is not very compatible with the new 3.1 default system property profiles  8 votes, 8 watchers","open","type: enhancement,","spring-projects-issues","2014-04-09T02:25:28Z","2021-05-26T08:42:35Z"
"","16214","TransactionSynchronizationManager - throw an Exception or log a warning if a Synchronization wants to add a Synchronization and afterCompletion is already called [SPR-11590]","**[Torsten Krah](https://jira.spring.io/secure/ViewProfile.jspa?name=tkrah)** opened **[SPR-11590](https://jira.spring.io/browse/SPR-11590?redirect=false)** and commented  Hi,  i've got a service A which registered a TransactionSynchronization to do stuff in the afterCommit() case. It calls a service B to index things to lucene. I've forgot that i did already leveraged the transaction handling to the lucene service B, so i did wonder why nothing happened and no error was thrown.  After debugging i've found that A did register a Synchronization (doAfterCommit) to call B, and B did also register one (doAfterCompletion).  The one which B registered was never called because doAfterCommit is the last trigger to be called and triggerAfterCompletion was already run.  Maybe a check can be added for addSynchronization(), that it throws an Exception, if the afterCompletion trigger is already reached - or at least a log warning would be nice.  ---  **Affects:** 4.0.2  **Issue Links:** - #16383 Prevent corrupted ThreadLocals when mis-using triggerAfterCommit (_**""is duplicated by""**_) - #20817 Topic messages are not sent when using transacted JmsTemplate in 'TransactionSynchronization.afterCommit' phase - #19759 Spring does not clean up db connection registered in afterCompletion callback - #18297 Transaction synchronization hook - beforeCreatePhase - #11234 Rollback of transaction participating in nested transaction should not enforce rollback of global transaction","closed","type: enhancement,","spring-projects-issues","2014-03-24T06:37:04Z","2019-10-18T10:07:20Z"
"","16211","TilesConfigurer not safe to use in multiple DispatcherServlet definitions [SPR-11587]","**[Torsten Krah](https://jira.spring.io/secure/ViewProfile.jspa?name=tkrah)** opened **[SPR-11587](https://jira.spring.io/browse/SPR-11587?redirect=false)** and commented  Hi,  got some mysterious problem.  Just do a ""gradle jettyRunWar"" on the attached project and go to `http://localhost:8080/web/view/` and `http://localhost:8080/admin/view/` - it will render Apples and Tomatoes. Stop the stuff and go to the web.xml and remove the comments from load-on-startup of the tomatoes servlet.  If you now go to `http://localhost:8080/web/view/` you get  ``` javax.servlet.ServletException: Could not resolve view with name 'admin-index' in servlet with name 'apples' ```  I don't know exactly what the error is - but in another project we got 3 DispatcherServlets in one web.xml which are all mapped to different URLs and each got its own Tiles definitions. Only one Servlet can found its mappings, the other Servlets fails to find their views.  It maybe related to `SpringWildcardServletTilesApplicationContext` which uses the ServletContext to store things (or the app key which is null) - but that only a guess, still searching the exact cause.   ---  **Affects:** 4.0.2, 4.0.3, 4.0.4, 4.0.5, 4.0.6  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1355  **Attachments:** - [playground.tar.bz2](https://jira.spring.io/secure/attachment/21832/playground.tar.bz2) (_7.13 kB_)","closed","type: enhancement,","spring-projects-issues","2014-03-21T08:02:54Z","2021-11-08T10:50:20Z"
"","16197","H2EmbeddedDatabaseConfigurer should set DB_CLOSE_ON_EXIT=false [SPR-11573]","**[Torsten Krah](https://jira.spring.io/secure/ViewProfile.jspa?name=tkrah)** opened **[SPR-11573](https://jira.spring.io/browse/SPR-11573?redirect=false)** and commented  I've traced down a race condition after a few hours and found the fix. So I wonder if this can be included in the default configuration of the `ConnectionProperties` for `H2EmbeddedDatabaseConfigurer`.  Per default `DB_CLOSE_ON_EXIT` is `true`. Thus, if the test VM exits, the Spring `ApplicationContext` gets closed, but H2 also registers a shutdown hook: the DatabaseCloser thread shuts down the database in parallel. As a consequence, all scripts configured via `` (_that should be run at closing time_) fail because the database was already shutdown.  It would be good if the following line in `H2EmbeddedDatabaseConfigurer.configureConnectionProperties()` ...  ``` properties.setUrl(String.format(""jdbc:h2:mem:%s;DB_CLOSE_DELAY=-1"", databaseName)); ```  ... could be modified as follows:  ``` properties.setUrl(String.format(""jdbc:h2:mem:%s;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false"", databaseName)); ```  This would result in ...  ```  ```  not emitting errors about missing tables.   ---  **Affects:** 4.0.2","closed","type: enhancement,","spring-projects-issues","2014-03-18T06:41:56Z","2014-03-26T22:34:10Z"
"","15536","Support patterns for baseName property of ReloadableResourceBundleMessageSource [SPR-10908]","**[Torsten Krah](https://jira.spring.io/secure/ViewProfile.jspa?name=tkrah)** opened **[SPR-10908](https://jira.spring.io/browse/SPR-10908?redirect=false)** and commented  Hi,  its possible to add multiple basename to the message source.  But if you got a module A which is used in other modules and provides messages to the other ones, it would be a nifty feature, if they can extend the messages by just placing their ""messages"" in a well known filename and are automatically merged.  e.g. test/$modulename/resources/Exception.properties  Inspired from:  http://stackoverflow.com/a/17977941  it would be nice if you can add such functionality so that you are able to use a basename like:  classpath*:test/*/resources/Exception  Just in case its not possible to merge those code in the ReloadableResourceBundleMessageSource (because of ResourceLoader interface), may it be possible to add an ReloadablePatternResourceBundleMessageSource or something like that which does extend the base class and override refreshProperties?   ---  **Affects:** 3.2.4","closed","status: bulk-closed,","spring-projects-issues","2013-09-11T02:23:15Z","2019-01-12T02:31:06Z"
"","16084","Autowiring fails when bean with the same name yet different type exists in parent BeanFactory [SPR-11458]","**[Tommy Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=tbecker)** opened **[SPR-11458](https://jira.spring.io/browse/SPR-11458?redirect=false)** and commented  We hit an unusual autowiring bug today.  Essentially, our application uses a context hierarchy that looks something like this:  * Root context   * Middle context   *** Leaf context  We have a bean in the leaf context that `@Injects` a bean that is defined in the root context.  Unbeknownst to us at the time, a bean with the same name **but a different type** than the bean we wanted to inject existed in the middle context.  This shouldn't matter since the injection was being done by type anyway.  But in practice, the injection fails with no autowire candidiates found.  The reason is that DefaultListableBeanFactory.findAutowireCandidates() relies on BeanFactoryUtils.beanNamesForTypeIncludingAncestors().  That method is bugged in that it will not return matches from parent bean factories if the local bean factory contains a bean with the same name - even if the local bean with that name does not match the intended type.  Even though this is a bit of an unusual scenario, it's nasty because one of the reasons to have separate contexts in a hierarchy is to have separate namespaces.  But here we have a situation where a naming collisions still cause Bad Things to happen.  I'm thinking this simple change to both variants of BeanFactoryUtils.beanNamesForTypeIncludingAncestors() would fix this:  153c153 < 					if (!resultList.contains(beanName) && !hbf.containsLocalBean(beanName)) { —  > if (!resultList.contains(beanName) && (!hbf.containsLocalBean(beanName) && type.isAssignableFrom(hbf.getType(beanName)))) {  196c196 < 					if (!resultList.contains(beanName) && !hbf.containsLocalBean(beanName)) { —  > if (!resultList.contains(beanName) && (!hbf.containsLocalBean(beanName) && type.isAssignableFrom(hbf.getType(beanName)))) {    ---  **Affects:** 3.0.6, 3.1.4, 3.2.8, 4.0.1","closed","status: bulk-closed,","spring-projects-issues","2014-02-20T10:51:36Z","2019-01-12T02:45:38Z"
"","15774","XStreamMarshaller doesn't set the converterRegistry field with XStream 1.4.5 [SPR-11147]","**[Tomas Repel](https://jira.spring.io/secure/ViewProfile.jspa?name=trepel)** opened **[SPR-11147](https://jira.spring.io/browse/SPR-11147?redirect=false)** and commented  When using XStreamMarshaller, I get following error  ``` XStream marshalling ended with exception org.springframework.oxm.MarshallingFailureException: XStream marshalling exception; nested exception is com.thoughtworks.xstream.converters.ConversionException: No converter specified for class springtest.xmlmarshalling.Data ```  After some debugging, I think the problem is that XStreamMarshaller's converterRegistry field is not initialized (it remains NULL, unlike the converterLookup field just a line above) and when the XStream object is being created in constructXStream() method, the NULL value causes that no converter is registered.  Let me know if you need more details or example war to reproduce this.   ---  **Affects:** 4.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/26d143868f912bcd8fe4b8cc66135928807526f8","closed","type: regression,","spring-projects-issues","2013-12-04T06:46:03Z","2013-12-11T23:57:20Z"
"","16123","Spring-websocket SockJS prevents Spring Boot applications from refreshing  [SPR-11498]","**[tomas lin](https://jira.spring.io/secure/ViewProfile.jspa?name=tomaslin@gmail.com)** opened **[SPR-11498](https://jira.spring.io/browse/SPR-11498?redirect=false)** and commented  We are trying to incorporate spring websockets into a Spring Boot application with a custom implementation that refreshes the SpringApplication.  It seems that the implementation of SockJS instantiates two Task Schedulers: [defaultSockJsTaskScheduler, messageBrokerSockJsTaskScheduler]  If spring-websocket is disabled, everything seems to work fine. However, we run into a one TaskScheduler limitation of ScheduledAnnotationBeanPostProcessor whenever we try to refresh once we include the websocket functionality.  It would be nice if spring-websockets played nice with SpringApplication.refresh.  The error log is attached.  2014-02-28 15:12:37,956 ERROR com.netflix.server.base.BaseServer$UncaughtExceptionHandlerImpl:684 [main] [uncaughtException] from main java.lang.IllegalStateException: More than one TaskScheduler and/or ScheduledExecutorService  exist within the context. Remove all but one of the beans; or implement the SchedulingConfigurer interface and call ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback. Found the following beans: [defaultSockJsTaskScheduler, messageBrokerSockJsTaskScheduler] at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.onApplicationEvent(ScheduledAnnotationBeanPostProcessor.java:289) at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.onApplicationEvent(ScheduledAnnotationBeanPostProcessor.java:72) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:98) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:333) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:776) at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:142) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:485) at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:616)   ---  **Affects:** 4.0.2","closed","status: declined,","spring-projects-issues","2014-02-28T15:38:33Z","2020-08-27T03:25:46Z"
"","16060","NumberUtils.convertNumberToTargetClass does not report overflow when converting BigInteger to Long [SPR-11434]","**[Tom Leccese](https://jira.spring.io/secure/ViewProfile.jspa?name=tleccese)** opened **[SPR-11434](https://jira.spring.io/browse/SPR-11434?redirect=false)** and commented  I was expecting that the NumberUtils.convertNumberToTargetClass method might throw an exception when converting a BigInteger to a Long if the BigInteger value is less than Long.MIN_VALUE or greater than Long.MAX_VALUE.  In other words I would not expect this test to pass: assertEquals(Long.valueOf(Long.MIN_VALUE),NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE), Long.class));  ... yet it passes due to the two's complement rollover from max to min value.  Attached are a modified version of NumberUtils and NumberUtilsTests which have a fix that will cause an exception to be thrown when the targetClass is Long, the number is an instance of BigInteger or BigDecimal, and the value of the number is outside the range of the long domain.  Feel free to use the ""fix"" if you think this issue is a bug in the NumberUtils class.  ---  **Affects:** 3.2.7  **Attachments:** - [NumberUtils.java](https://jira.spring.io/secure/attachment/21678/NumberUtils.java) (_9.97 kB_) - [NumberUtilsTests.java](https://jira.spring.io/secure/attachment/21679/NumberUtilsTests.java) (_24.43 kB_)  **Issue Links:** - #18613 BigDecimal to Integer/Short/Byte should overflow like BigDecimal to Long does  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4744180d3d896d0af218febefc2aba5b01a21abb","closed","type: enhancement,","spring-projects-issues","2014-02-16T08:40:44Z","2019-01-11T21:26:38Z"
"","16110","How can I override Scan method of ClassPathBeanDefinitionScanner [SPR-11485]","**[tokala](https://jira.spring.io/secure/ViewProfile.jspa?name=tokala)** opened **[SPR-11485](https://jira.spring.io/browse/SPR-11485?redirect=false)** and commented  I want to add a fuctionality to Spring WHEN A BEAN CONFLICT ECXEPTION OCCURS I WANT AN OPTION TO CONFIGURE WHICH BEAN TO SELECT BASED ON CONFIGURATION OR PROPERTIES FILES    ---  **Affects:** 4.0.2","closed","status: invalid,","spring-projects-issues","2014-02-26T01:31:40Z","2019-01-12T05:26:11Z"
"","15598","Regression with detecting nested components [SPR-10970]","**[Tobias Mattsson](https://jira.spring.io/secure/ViewProfile.jspa?name=tmattsson)** opened **[SPR-10970](https://jira.spring.io/browse/SPR-10970?redirect=false)** and commented  When testing with M3 and BUILD-SNAPSHOT I've found a regression from previous versions.  In one of my test cases I'm using annotated controllers that I define explicitly rather than classpath scanning for them. In previous versions of Spring nested classes annotated with `@Controller`, `@Service`, `@Respository` would be found but in 4.0 they're not.  The controller class:  ``` import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping;  @Controller public class FooController {      @RequestMapping(""/foo"")     public void foo() {}      @Controller     public static class BarController {          @RequestMapping(""/bar"")         public void bar() {}     } } ```  The test case:  ``` import org.junit.Test; import org.springframework.web.context.support.XmlWebApplicationContext;  public class NestedControllerTest {      @Test     public void testFindsNestedController() {          XmlWebApplicationContext wac = new XmlWebApplicationContext();         wac.setConfigLocation(""classpath:NestedControllerTest-test.xml"");         wac.refresh();          wac.getBean(FooController.class);          // Fails in 4.0.0, works in 3.2.4         wac.getBean(FooController.BarController.class);     } } ```  The beans XML file:  ```xml             ```  The test fails with:  ``` org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [FooController$BarController] is defined 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:318) 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:985) 	at NestedControllerTest.testFindsNestedController(NestedControllerTest.java:16) ```  Its easily fixable of course by adding \ but I still wanted to let you know.  ---  **Affects:** 4.0 M3  **Attachments:** - [FooController.java](https://jira.spring.io/secure/attachment/21429/FooController.java) (_430 bytes_) - [NestedControllerTest.java](https://jira.spring.io/secure/attachment/21430/NestedControllerTest.java) (_509 bytes_) - [NestedControllerTest-test.xml](https://jira.spring.io/secure/attachment/21431/NestedControllerTest-test.xml) (_596 bytes_)  **Issue Links:** - #15492 `@Component` within `@Configuration` class cannot `@Autowire` Regression  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9bfbe36b1c000f5ffa6c5c2941259e43ec38af01  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2013-10-09T02:15:37Z","2019-01-13T06:57:56Z"
"","15554","FormTag generates hidden fields from RequestDataValueProcessor.getExtraHiddenFields(...) without container, resulting in invalid xhtml [SPR-10926]","**[Thorsten Vogel](https://jira.spring.io/secure/ViewProfile.jspa?name=tvcom)** opened **[SPR-10926](https://jira.spring.io/browse/SPR-10926?redirect=false)** and commented  When specifying extra hidden fields in a RequestDataValueProcessor, the resulting markup is invalid according to the W3C validator. We are using XHTML 1.0 Strict.  It would be great if the FormTag.writeHiddenFields(...) method could optionally generate a container around the fields (e.g. div or a configurable container).  Resulting markup:  ``` ...       ```  Expected for compliancy:  ``` ...                     ```  ---  **Affects:** 3.2.4  **Issue Links:** - #17304 When using CsrfRequestDataValueProcessor, the hidden field with the CSRF token is put into an unnecessarily created div element  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b5bd4d8a8a27b014950bb106e2cdfcff7887676f","closed","type: bug,","spring-projects-issues","2013-09-18T07:16:38Z","2019-01-11T22:10:36Z"
"","16195","Add close() method to LazyConnectionDataSourceProxy [SPR-11571]","**[Thomas Zimmermann](https://jira.spring.io/secure/ViewProfile.jspa?name=zimmi)** opened **[SPR-11571](https://jira.spring.io/browse/SPR-11571?redirect=false)** and commented  It would be a convenient feature if the LazyConnectionDataSourceProxy would provide a public close() method that delegates to a (possibly configurable) destroy-method on the wrapped DataSource if one is present. This would avoid having to declare two datasource beans: one for the LazyConnectionDataSourceProxy and one for the underlying DataSource itself, so that the proper destroy-method can be called on it.  I'm initializing my DataSource as follows:  ```java     @Bean     public DataSource dataSource() {         PGSimpleDataSource dataSource = new PGSimpleDataSource();         // set properties ...          // set up connection pool, HikariCP in my case         HikariDataSource connectionPool = new HikariDataSource(config);          LazyConnectionDataSourceProxy lazyDataSource = new LazyConnectionDataSourceProxy();         lazyDataSource.setTargetDataSource(connectionPool);         // set properties ...          return lazyDataSource;     } ```  A suggestion how this could work would be:  ```java     @Bean(destroyMethod=""close"") // as per default     public DataSource dataSource() {         PGSimpleDataSource dataSource = new PGSimpleDataSource();         // set properties ...          // set up connection pool, HikariCP in my case         HikariDataSource connectionPool = new HikariDataSource(config);          LazyConnectionDataSourceProxy lazyDataSource = new LazyConnectionDataSourceProxy();         lazyDataSource.setTargetDataSource(connectionPool);         // set properties ...          lazyDataSource.setDestroyMethod(""shutdown""); // or call ""close"" by default          return lazyDataSource;     } ```  ---  **Affects:** 4.0.2  **Issue Links:** - #21811 Notification for db connection acquired when LazyConnectionDataSourceProxy is used  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3c58be05a52ddb1a18f300e1bb1d7eed2d68e9dd, https://github.com/spring-projects/spring-framework/commit/6551aa61fa65995d3472af3ea40dcd4b380f2186","closed","status: bulk-closed,","spring-projects-issues","2014-03-18T02:51:53Z","2019-01-12T02:45:09Z"
"","15892","better method identification in AnnotationTransactionAttributeSource logging [SPR-11267]","**[Thomas Whitmore](https://jira.spring.io/secure/ViewProfile.jspa?name=twhitmore.nz@gmail.com)** opened **[SPR-11267](https://jira.spring.io/browse/SPR-11267?redirect=false)** and commented  We am using `@Transactional` annotations in our projects, but logging does not identify the methods found very well.  In our project there are many separate DAOs & services, which frequently use similar method-names. We see 400+ of these, a good proportion of which have repetitive names & without classes cannot be identified:  Adding transactional method 'findById' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly; '' Adding transactional method 'remove' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; '' Adding transactional method 'create' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; '' Adding transactional method 'update' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; '' Adding transactional method 'findById' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly; '' Adding transactional method 'create' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; '' Adding transactional method 'update' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''  We want to be able to identify whether a particular class/method is getting scanned (or not) for transactionality, to allow us to engineer/ diagnose/ debug in this area.  Logging Class.Method would be much more useful (simple name only, no FQN) to enable engineering & diagnostis of transaction definitions.  (Keywords:  AbstractFallbackTransactionAttributeSource, AnnotationTransactionAttributeSource, transaction attribute source logging, method name.)  ---  **Affects:** 3.2.6  **Issue Links:** - #17141 Performance - hashCode method of AbstractFallbackTransactionAttributeSource.DefaultCacheKey doesn't take targetClass into account  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/57eedf33d6a3861aa61003a567352b9fa94402d7, https://github.com/spring-projects/spring-framework/commit/82ea9ece5c56309f98984778cd03970fbe479872  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: enhancement,","spring-projects-issues","2013-12-30T13:49:57Z","2019-01-11T18:38:43Z"
"","16346","Problem with the injection of generic services [SPR-11724]","**[Thomas Vöcking](https://jira.spring.io/secure/ViewProfile.jspa?name=tvoecking)** opened **[SPR-11724](https://jira.spring.io/browse/SPR-11724?redirect=false)** and commented  Hello!  We have encountered a problem when a generic service needs to be injected into another generic service. Please have a look into the attached testcase.  We have this ""CombinedService"" where we want to inject an instance of the ""IContainerFactory"". When we use generics like we do it at ""field1"", everything works fine, but I would expect ""field2"" to be handled the same way, but in this case spring cannot find an autowire candidate.  I debugged the spring framework and it seems that the ""ResolvableType"" class handles these two fields different as you can see in the testcase.  Do you confirm this is a bug or are we doing something wrong...?  Best regards, Thomas Vöcking   ---  **Affects:** 4.0.1, 4.0.4  **Attachments:** - [ResolverTypeTest.java](https://jira.spring.io/secure/attachment/21962/ResolverTypeTest.java) (_1.65 kB_)","closed","in: core,","spring-projects-issues","2014-04-23T01:57:33Z","2019-01-12T05:25:58Z"
"","16213","@RequestMapping detection breaks when introducing interface [SPR-11589]","**[Thomas Scheinecker](https://jira.spring.io/secure/ViewProfile.jspa?name=tscheinecker)** opened **[SPR-11589](https://jira.spring.io/browse/SPR-11589?redirect=false)** and commented  In my current application I facilitate the `@RequestMapping` and `@RestController` annotations for creating RESTful controllers.  To maintain a clean structure I decided to create a interface so all CRUDL methods have the same name.  But the problem is that as soon as my controller implements an interface the request mapping isn't applied anymore. It doesn't even matter which interface, and even marker interfaces like the one in the referenced gist break the mapping.  I tracked the problem down to the following steps:  During the mapping process in  ``` ...  protected void initHandlerMethods() { 	if (logger.isDebugEnabled()) { 		logger.debug(""Looking for request mappings in application context: "" + getApplicationContext()); 	}  	String[] beanNames = (this.detectHandlerMethodsInAncestorContexts ? 				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(getApplicationContext(), Object.class) : 				getApplicationContext().getBeanNamesForType(Object.class));  	for (String beanName : beanNames) { 		if (isHandler(getApplicationContext().getType(beanName))){ 			detectHandlerMethods(beanName); 		} 	} 	handlerMethodsInitialized(getHandlerMethods()); } ... ```  the type is retreived in  ``` ... @Override public Class getType(String name) throws NoSuchBeanDefinitionException { 	String beanName = transformedBeanName(name);  	// Check manually registered singletons. 	Object beanInstance = getSingleton(beanName, false); 	if (beanInstance != null) { 		if (beanInstance instanceof FactoryBean && !BeanFactoryUtils.isFactoryDereference(name)) { 			return getTypeForFactoryBean((FactoryBean) beanInstance); 		} 		else { 			return beanInstance.getClass(); 		} 	} ... }  ... ```  in this particular code block `code`return beanInstance.getClass();`code` (line 574) is executed, which resolves to com.sun.proxy.$Proxy82@XXXX which in turn leads to the problem that  ``` ... 	 @Override protected boolean isHandler(Class beanType) { 	return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) || (AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null)); }  ... ```  evaluates to false as the proxy class of course doesn't define any annotations. Therefore the request mapping isn't registered.  Everything works fine if I use an abstract class instead, but breaks as soon as I add an interface to that particular abstract class.  As additional info: i use spring-boot to start the application, and run java 1.7.0_51   ---  **Affects:** 4.0.1, 4.0.2  **Reference URL:** https://gist.github.com/tscheinecker/27cb4e683892b078cd9c  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2014-03-24T01:33:14Z","2019-01-11T21:33:08Z"
"","16348","SpringVersion should provide more robust version information. [SPR-11726]","**[Thomas Darimont](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasd)** opened **[SPR-11726](https://jira.spring.io/browse/SPR-11726?redirect=false)** and commented  Some spring-projects like for instance Spring Data MongoDB or Spring LDAP  use `org.springframework.core.SpringVersion.getVersion()` to detect the version of the Spring Framework that is currently used, in order to enable or disable certain features or emulate behaviour.  Internally `getVersion()` currently only checks the implementationVersion property of the package containing the SpringVersion class which works fine in most cases. However if an application is packaged in an ""uberjar"" e.g. via the maven-shade plugin this information is not available and thus returns null. Even though it is documented in the javadoc of getVersion() it would be worthwhile to try a little bit more harder here to determine the spring framework version since the single-jar application model is pretty common these days.  This would also help to avoid problems like [DATAMONGO-917](https://jira.spring.io/browse/DATAMONGO-917) and [LDAP-295](https://jira.spring.io/browse/LDAP-295)   ---  **Affects:** 3.2.8, 4.0.3  **Issue Links:** - [LDAP-295](https://jira.spring.io/browse/LDAP-295) DefaultObjectDirectoryMapper#isAtLeast30() produces NullPointerException when bundled into an uberjar - [DATAMONGO-917](https://jira.spring.io/browse/DATAMONGO-917) DefaultDbRefResolver throws NPE when bundled into an uberjar","closed","status: bulk-closed,","spring-projects-issues","2014-04-23T06:11:18Z","2019-01-12T00:20:08Z"
"","16126","Skip eager bean creation of ApplicationListener's if they are not type-compatible with the given event [SPR-11501]","**[Thomas Darimont](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasd)** opened **[SPR-11501](https://jira.spring.io/browse/SPR-11501?redirect=false)** and commented  Currently all beans that implement `ApplicationListener` are created eagerly when `AbstractApplicationEventMulticaster#getApplicationListeners(ApplicationEvent)` is called in order to check whether they can actually consume the given `ApplicationEvent`.  ```java for (String listenerBeanName : listenerBeans) { 	try { 		ApplicationListener listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class); 		if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) { 			retriever.applicationListenerBeans.add(listenerBeanName); 			allListeners.add(listener); 		} 	} 	catch (NoSuchBeanDefinitionException ex) { 		// Singleton listener instance (without backing bean definition) disappeared - 		// probably in the middle of the destruction phase 	} } ```  https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java#L165  This triggers the early creation of `ApplicationListener` beans, even if they actually can't handle the given event. Instead triggering creating of all the listener beans in every case we could add an additional check whether the current `ApplicationListener` type can actually handle the given event type. If not we could skip the bean creation for this `ApplicationListener` bean - which could lead to a faster context startup.   ---  **Affects:** 3.2.8, 4.0.2","closed","type: enhancement,","spring-projects-issues","2014-03-03T00:54:36Z","2014-03-26T22:34:08Z"
"","15547","@Bean on Java 8 default methods in interfaces [SPR-10919]","**[Thomas Darimont](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasd)** opened **[SPR-10919](https://jira.spring.io/browse/SPR-10919?redirect=false)** and commented  It would be great if the JavaConfig configuration style would support the definition of `@Bean` Bean-Definitions via Java 8's default methods.  To get this working it is necessary, that default methods are also considered while scanning a type for `@Bean` Bean-Definitions.  Here is a small example on how this would look like:  ```java  import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;  import static org.junit.Assert.assertNotNull; import static org.mockito.Mockito.mock;  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration public class InterfaceBasedJavaConfigExample {      interface Service0 {}      interface Service1 {}      interface DataStore {}      interface PersistenceConfig {         @Bean         default DataStore dataStore() {             return mock(DataStore.class);         }     }      interface ServiceConfig {         @Bean         default Service1 service1() {             return mock(Service1.class);         }     }      static class Application {          final Service0 service0;         final Service1 service1;         final DataStore dataStore;          @Autowired         public Application(Service0 service0, Service1 service1, DataStore dataStore) {             this.service0 = service0;             this.service1 = service1;             this.dataStore = dataStore;         }     }      @Configuration     static class ApplicationConfig implements ServiceConfig, PersistenceConfig {          @Bean         public Service0 service0() {             return mock(Service0.class);         }          @Bean         public Application application() {             return new Application(service0(), service1(), dataStore());         }     }      @Autowired     Application application;      @Test     public void bootstrap() {         assertNotNull(""app should not be null"", application);         assertNotNull(""app.dataStore should not be null"", application.dataStore);         assertNotNull(""app.service1 should not be null"", application.service1);     } } ```  ---  **Affects:** 4.0 M3  **Issue Links:** - #18794 `@Configuration` interface with Java 8 default methods (as a standalone artifact) - #16362 Java based config should support class-only component declarations through `@Import` - #17419 Make ReflectionUtils.doWithMethods work on Java 8 default interface methods - #18772 Java 8 default methods not detected as bean properties - #17615 Provide access to the return type in MethodMetadata  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/192462902ef3d97c0b6684d467c7d2023ecd5be1  4 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2013-09-16T00:58:05Z","2019-01-13T06:58:06Z"
"","16083","Packaged JARs have size zero [SPR-11457]","**[Thomas Beauvais](https://jira.spring.io/secure/ViewProfile.jspa?name=tbeauvais)** opened **[SPR-11457](https://jira.spring.io/browse/SPR-11457?redirect=false)** and commented  This is a rather strange and barely tangible request but let us see if I can as much information needed to reach a conclusion.  I am using Oracle WebCenter Content and wanting to introduce Spring libraries (starting with Core Framework).  There is a custom ClassLoader which manually loads the Spring JARs and is complaining about the size of the directory in the compressed JAR.  For whatever reason, the WCC team thinks that it needs to check the size of the entry if it is a directory, and if it is more than zero then throw an error!  We are using many third party libraries and the Spring JARs are the only JARs that have this inconsistency.  I don't agree that this is an error, but they seem to think that it goes against a ""convention""  I would report this to you if I didn't think you had some good insight or if there were other project libraries with this inconsistency.  The Oracle solution (or workaround) was to extract a file (such as the MANIFEST.MF) from each of the Spring JARs then merely update it back into the JAR.  For instance,  Runtime.getRuntime().exec(""jar -xvf "" + file + "" META-INF/MANIFEST.MF"", null, target).waitFor();  Runtime.getRuntime().exec(""jar -uvf "" + file + "" META-INF/MANIFEST.MF"", null, target).waitFor();  This rubs me the wrong way because I am having to repackage JARs that aren't mine and I don't know what damage I could do here.  The workaround does work.. but seems a little unsavory.  What do you think?   ---  **Affects:** 3.2.5, 4.0.2  **Reference URL:** https://community.oracle.com/thread/3512454","closed","status: bulk-closed,","spring-projects-issues","2014-02-20T07:45:18Z","2019-01-12T02:45:40Z"
"","16308","Regression: AbstractHttpMessageConverter does not set ContentType [SPR-11685]","**[Thierry Messer](https://jira.spring.io/secure/ViewProfile.jspa?name=javaguru-ch)** opened **[SPR-11685](https://jira.spring.io/browse/SPR-11685?redirect=false)** and commented  AbstractHttpMessageConverter does no longer set the content type of the generated message. It's now always text/html. This is due to the fact that in a servlet3 environment the class ServletServerHttpResponse uses the new inner class ServletResponseHttpHeaders rather than HttpHeaders. ServletServerHttpResponse returns the header values of the wrapped HttpServletResponse unlike HttpHeaders which returns null. This causes the AbstractHttpMessageConverter to not set the ContentType header.  ---  **Affects:** 4.0.3  **Issue Links:** - #13509 Truncated HTTP responses - #16069 CORS for websocket breaks existing CORS Filter - #16334 Improve Servlet 3 presence check in ServletServerHttpResponse  1 votes, 4 watchers","closed","","spring-projects-issues","2014-04-11T03:06:33Z","2019-01-11T21:01:51Z"
"","15914","@ConfigurationProperties should have an option to have properties read each time from Evironment [SPR-11290]","**[Taylor S. Wicksell](https://jira.spring.io/secure/ViewProfile.jspa?name=taylor.wicksell)** opened **[SPR-11290](https://jira.spring.io/browse/SPR-11290?redirect=false)** and commented  `@ConfigurationProperties` objects should have some mechanism for allowing some or all properties to be read from a propertySource on each get invocation. It seems like instead of injected a concrete implementation into the AppContext we should inject a proxy for the Config object which can reference the Environment abstraction.  The usecase for this would be when we have implemented a custom PropertySource which is aware of property changes.  ---  **Affects:** 4.0 GA  **Issue Links:** - #15913 `@ConfigurationProperties` should have an option to have properties read each time from Evironment (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2014-01-06T12:58:56Z","2019-01-13T06:56:35Z"
"","15913","@ConfigurationProperties should have an option to have properties read each time from Evironment [SPR-11289]","**[Taylor S. Wicksell](https://jira.spring.io/secure/ViewProfile.jspa?name=taylor.wicksell)** opened **[SPR-11289](https://jira.spring.io/browse/SPR-11289?redirect=false)** and commented  `@ConfigurationProperties` objects should have some mechanism for allowing some or all properties to be read from a propertySource on each get invocation. It seems like instead of injected a concrete implementation into the AppContext we should inject a proxy for the Config object which can reference the Environment abstraction.  The usecase for this would be when we have implemented a custom PropertySource which is aware of property changes.  ---  **Affects:** 4.0 GA  **Issue Links:** - #15914 `@ConfigurationProperties` should have an option to have properties read each time from Evironment (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2014-01-06T13:01:07Z","2019-01-13T06:56:36Z"
"","16256","Locale - Issue on separate symbol between between Language and Country [SPR-11633]","**[Tam Hung Phan](https://jira.spring.io/secure/ViewProfile.jspa?name=tphan31)** opened **[SPR-11633](https://jira.spring.io/browse/SPR-11633?redirect=false)** and commented  IETF RFC 5646 states that the sub-parts of the language/country tag should be separated by hyphens (not underscores) but ReloadableResourceBundleMessageSource.calculateFilenamesForLocale() method is using underscores to separate between language and country. Could you please help me check if it is issue of spring framework?  Reference: http://tools.ietf.org/html/rfc5646 http://en.wikipedia.org/wiki/IETF_language_tag   ---  **Affects:** 3.1.2  **Reference URL:** http://tools.ietf.org/html/rfc5646","closed","status: declined,","spring-projects-issues","2014-03-31T02:28:43Z","2019-01-12T16:35:06Z"
"","16186","RmiServiceExporter class-loader and allocation issue [SPR-11562]","**[Tahseen Mohammad](https://jira.spring.io/secure/ViewProfile.jspa?name=thmd)** opened **[SPR-11562](https://jira.spring.io/browse/SPR-11562?redirect=false)** and commented  Calling services exposed through spring RmiServiceExporter seem to be causing some weired class-loader issue. It seems RMIClassLoader ends up repeatedly trying to load the class, accessing the jar files also causing major allocation pressure.  I found out about this as I ran 'Java Flight Recorder' on a production server that is heavy on RMI. Using JFR's allocation profiling I found the issue. As I tried to narrow it down I found surprisingly that running a native java RMI code performing the same operation do not cause such allocation or classloader access the jar.  The attached archives contains a project that exposes identical services through both version. Two client is also provided to access each type of exported service. There is also an attachment containing the JFR recording from a run involving 1M call to each version of the service. You can open the recording with 'Java Mission Control' that comes with Jdk7.  Native RMI - < 400ms, ~50M allocation RmiServiceExporter - 235070.18, ~20G allocation  While the performance comparison cannot be made directly since the RmiServiceExporter uses reflection, the allocation is frightening since most of it is around classloading and not directly in reflection/spring code. My assumption is that Spring's use of proxy & reflection is somehow confusing the RMIClassloader.   ---  **Affects:** 3.2.8, 4.0.2  **Attachments:** - [spring-remoting-jfr.tar.gz](https://jira.spring.io/secure/attachment/21822/spring-remoting-jfr.tar.gz) (_182.08 kB_) - [spring-remoting-test.tar.gz](https://jira.spring.io/secure/attachment/21823/spring-remoting-test.tar.gz) (_4.51 kB_)","closed","status: bulk-closed,","spring-projects-issues","2014-03-16T03:55:07Z","2019-01-12T02:45:12Z"
"","16181","Support Class meta-annotation attributes with ASM-based annotation processing [SPR-11557]","**[Sérgio Silva](https://jira.spring.io/secure/ViewProfile.jspa?name=sergiofbsilva)** opened **[SPR-11557](https://jira.spring.io/browse/SPR-11557?redirect=false)** and commented  I'm trying to create a _composed annotation_ which uses `@Configuration` and `@ComponentScan` as meta-annotations.  ``` @Configuration @ComponentScan @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) public @interface BennuSpringModule {     String[] basePackages() default {};      String[] bundles() default {}; } ```  The problem appears in `ConfigurationClassPostProcessor`:  ``` java.lang.IllegalArgumentException: Attribute 'nameGenerator' is of type [String], but [Class] was expected. Cause:  	at org.springframework.core.annotation.AnnotationAttributes.doGet(AnnotationAttributes.java:117) 	at org.springframework.core.annotation.AnnotationAttributes.getClass(AnnotationAttributes.java:89) 	at org.springframework.context.annotation.ComponentScanAnnotationParser.parse(ComponentScanAnnotationParser.java:82) 	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:236) 	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:205) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:173) 	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:241) 	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:205) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:182) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:152) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:299) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:243) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:609) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) 	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658) 	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:530) 	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484) 	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136) 	at javax.servlet.GenericServlet.init(GenericServlet.java:160) 	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1280) 	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1091) 	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:5033) 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5317) 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549) 	at java.util.concurrent.FutureTask.run(FutureTask.java:262) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) 	at java.lang.Thread.run(Thread.java:744) ```  The meta-annotation is being processed with `classValuesAsString` set to `true` which breaks the look-up for Class Type. See [AnnotationAttributesReadingVisitor](https://github.com/spring-projects/spring-framework/blob/161819f1417579c915751a6ef1fa7699963574fb/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationAttributesReadingVisitor.java#L282) for details.  ---  **Affects:** 4.0.2  **Issue Links:** - #16198 Support meta-annotation attribute overrides in ASM-based annotation processing (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9ce0df89ffedf5a75981f3699f32d10a6de6f9df, https://github.com/spring-projects/spring-framework/commit/e7b8a657b477ddf88e737ee8b7806f0338464365, https://github.com/spring-projects/spring-framework/commit/f1fbe85ff1943e2bd5a2c6916fd94fca8f92e265","closed","in: core,","spring-projects-issues","2014-03-14T13:13:38Z","2019-01-11T21:36:17Z"
"","16189","Fix ""Configuring the WebSocket Engine"" documentation [SPR-11565]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-11565](https://jira.spring.io/browse/SPR-11565?redirect=false)** and commented  Current [Spring websocket reference documentation](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#websocket-server-runtime-configuration) suggests to use WebSocketContainerFactoryBean to configure server side websocket engine, but this one is for client-side use only.  This section should be updated in order to specify that ServletServerContainerFactoryBean is for server side use and WebSocketContainerFactoryBean for client side use.   ---  **Affects:** 4.0.2  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#websocket-server-runtime-configuration","closed","type: documentation,","spring-projects-issues","2014-03-17T07:16:31Z","2014-03-26T22:34:05Z"
"","16152","Support receiving fragmented STOMP frames [SPR-11527]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-11527](https://jira.spring.io/browse/SPR-11527?redirect=false)** and commented  Current [Stomp.js](http://jmesnil.net/stomp-websocket/doc/) and [Dart STOMP library](https://pub.dartlang.org/packages/stomp) behavior is to split data bigger than 16 KBytes ([see related Stomp.js source code](https://github.com/jmesnil/stomp-websocket/blob/master/src/stomp.coffee#L123)) into multiple Websocket messages. This [STOMP frame fragmentation mechanism](https://github.com/jmesnil/stomp-websocket/pull/36) has been implemented in order to support transmitting bigger messages than the maximum Websocket message size configured on servers.  Since [Stomp over Websocket](https://github.com/stomp/stomp-spec/issues/13) has not been specified yet, and since both Stomp.js (the most widely used implementation on client side) and Dart STOMP library have this behavior, it is something the Spring Framework should be able to handle.  Spring 4.0.2 implementation currently assume that 1 Websocket message = 1 STOMP frame, so when a STOMP frame bigger than 16 KBytes (not that unusual) is sent by the client over multiple WebSocket messages, Spring throw the following exception : ""IllegalStateException: Not a valid STOMP frame: SEND"". In order to fix that, we should support STOMP frame split into multiple Websocket messages, by accumulating data received threw a WebSocketSession until the end of the STOMP frame has been reached.  A configuration option with a reasonable default may allow to configure maximum STOMP frame size.  As discussed with [Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop), since this issue can occur often as soon as you use Spring STOMP support, I tentatively target 4.0.3 release for the moment, but we could postpone it to 4.1 if needed depend on the fix.  I will put feedbacks as soon as the fix will be implemented.  ---  **Affects:** 4.0.2  **Issue Links:** - #15952 Multi-message frames over STOMP. - #16199 Support configuring WebSocket message buffer size","closed","type: enhancement,","spring-projects-issues","2014-03-07T09:59:08Z","2019-01-11T21:37:45Z"
"","16023","Upgrade Hessian from 4.0.7 to 4.0.38 [SPR-11396]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-11396](https://jira.spring.io/browse/SPR-11396?redirect=false)** and commented  Hessian versions are quite difficult to follow because until recently, the only release published on http://hessian.caucho.com was 4.0.7 (the one used by Spring optional dependency).  Hessian 4.0.7 is old and has some blocking issues. Even if Hessian homepage and Maven Central were not updated for a long time, Hessian has continued to evolve a lot.  Last year, after discussing with Emmanuel Bourg (Apache commiter in contact with Scott Ferguson, one of the Hessian developer), we were able to get Hessian 4.0.33 published to Maven Central.  A few month ago, Hessian website has been updated and now show Hessian 4.0.37 as the latest official stable release. I have reach Emmanuel Bourg again in order to ask him if he could publish Hessian 4.0.37 on Maven Central, like he did for 4.0.33.  When it has been done, my proposal would be to upgrade Spring 4.1 (not 4.0.x) Hessian optional dependency from 4.0.7 to 4.0.37. In addition to check that there is no regression to Spring Hessian Remoting and JMX support, we should also check that it breaks nothing on the recently implemented [Spring AMQP Hessian Remoting](https://github.com/spring-projects/spring-amqp/pull/94).  I don't remember exactly what issues 4.0.7 have, but it was serious ones like NullPointerException when serializing an Array with 2 elements with the same value or very common Enum serialization issues.  Thanks in advance for your feedback.  ---  **Affects:** 4.0.1  **Reference URL:** http://hessian.caucho.com/  **Issue Links:** - #20537 Upgrade to Hessian 4.0.51","closed","in: core,","spring-projects-issues","2014-02-05T14:57:44Z","2019-01-11T19:11:16Z"
"","16019","Unit test in EvalTagTests fails with French as default locale [SPR-11392]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-11392](https://jira.spring.io/browse/SPR-11392?redirect=false)** and commented  The `testPrintFormattedScopedAttributeResult()` test method from `org.springframework.web.servlet.tags.EvalTagTests` is locale dependent.  When I built Spring from sources with French locale, this test failed. When I switched to English locale, it passed.  The current assertion is hard coded (""25%""). I think it should take into account the default locale in order to have the test pass regardless of the default locale of the computer running the tests. In my case it is ""25%"" with English locale and ""25 %"" with French locale.   ---  **Affects:** 3.2.7, 4.0.1  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","type: task,","spring-projects-issues","2014-02-05T07:21:26Z","2014-02-18T22:36:00Z"
"","15919","RequestAttributes in FrameworkPortlet [SPR-11295]","**[Szczepan Kuzniarz](https://jira.spring.io/secure/ViewProfile.jspa?name=szczepan.kuzniarz)** opened **[SPR-11295](https://jira.spring.io/browse/SPR-11295?redirect=false)** and commented  In Spring 2.5.x the type of **RequestAttributes** stored in **RequestContextHolder** while handling portlet request was always **PortletRequestAttributes**. It was guaranteed by the code in **DispatcherPortlet.doRenderService**/**doActionService** methods:  ``` ... // Expose current RequestAttributes to current thread. RequestAttributes previousRequestAttributes = RequestContextHolder.getRequestAttributes(); PortletRequestAttributes requestAttributes = new PortletRequestAttributes(request); RequestContextHolder.setRequestAttributes(requestAttributes, this.threadContextInheritable); ... ```  Since Spring 3.2.x the type is indeterminate - sometimes it is **PortletRequestAttributes** and sometimes **ServletRequestAttributes** (if there is **RequestContextListener** present). This is caused by the following code in **FrameworkPortlet.processRequest** method:  ``` ... // Expose current RequestAttributes to current thread. RequestAttributes previousRequestAttributes = RequestContextHolder.getRequestAttributes(); PortletRequestAttributes requestAttributes = null; if (previousRequestAttributes == null || previousRequestAttributes.getClass().equals(PortletRequestAttributes.class)) { 	requestAttributes = new PortletRequestAttributes(request); 	RequestContextHolder.setRequestAttributes(requestAttributes, this.threadContextInheritable); } ... ```  Is the condition in if statement correct? It seems to me it should be:  ``` if (previousRequestAttributes == null || !previousRequestAttributes.getClass().equals(PortletRequestAttributes.class)) { ```    ---  **Affects:** 3.2.6, 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1be3a6cce2d3a03b379b93ede2216ec9f669f891, https://github.com/spring-projects/spring-framework/commit/7d94b5e8536fc9084b5749b02af708296417cce5, https://github.com/spring-projects/spring-framework/commit/2d892da641f7f923856195fa636f73d4ce43f72b  **Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)","closed","type: bug,","spring-projects-issues","2014-01-08T04:18:23Z","2014-07-08T00:21:28Z"
"","16128","Document how to use custom @Cacheable annotation with AspectJ [SPR-11503]","**[Sylvain LAURENT](https://jira.spring.io/secure/ViewProfile.jspa?name=sylvain.laurent)** opened **[SPR-11503](https://jira.spring.io/browse/SPR-11503?redirect=false)** and commented  The documentation about using custom annotations for `@Cacheable` should warn that such annotations are not picked up when using AspectJ because the pointcuts of org.springframework.cache.aspectj.AnnotationCacheAspect only care about base annotations and not custom annotations.  If one wants to use custom annotations with aspectj weaving, one has to declare a custom aspectj advice...   ---  **Affects:** 4.0.2  **Reference URL:** http://docs.spring.io/spring/docs/4.0.2.RELEASE/spring-framework-reference/html/cache.html#cache-annotation-stereotype","closed","type: documentation,","spring-projects-issues","2014-03-03T06:36:35Z","2014-08-15T01:52:42Z"
"","15649","SpEl can not parse Long [SPR-11021]","**[Sven Smets](https://jira.spring.io/secure/ViewProfile.jspa?name=sven)** opened **[SPR-11021](https://jira.spring.io/browse/SPR-11021?redirect=false)** and commented  When I use this tag  ```   Map myMap;```   and entry.key is bigger then an int (ex. 5,000,000,000), I get following error ```  org.springframework.expression.spel.SpelParseException: EL1035E:(pos 14): The value '5000000000' cannot be parsed as an int at org.springframework.expression.spel.ast.Literal.getIntLiteral(Literal.java:79) at org.springframework.expression.spel.standard.InternalSpelExpressionParser.maybeEatLiteral(InternalSpelExpressionParser.java:688)...```  In the maybeEatLiteral method it seems that Long should be supported, but int is chosen.  ```   private boolean maybeEatLiteral()   {     Token t = peekToken();     if (t == null) {       return false;     }     if (t.kind == TokenKind.LITERAL_INT)       push(Literal.getIntLiteral(t.data, toPos(t), 10));     else if (t.kind == TokenKind.LITERAL_LONG)       push(Literal.getLongLiteral(t.data, toPos(t), 10));     else if (t.kind == TokenKind.LITERAL_HEXINT)       push(Literal.getIntLiteral(t.data, toPos(t), 16));     else if (t.kind == TokenKind.LITERAL_HEXLONG)       push(Literal.getLongLiteral(t.data, toPos(t), 16));     else if (t.kind == TokenKind.LITERAL_REAL)       push(Literal.getRealLiteral(t.data, toPos(t), false));     else if (t.kind == TokenKind.LITERAL_REAL_FLOAT)       push(Literal.getRealLiteral(t.data, toPos(t), true));     else if (peekIdentifierToken(""true""))       push(new BooleanLiteral(t.data, toPos(t), true));     else if (peekIdentifierToken(""false""))       push(new BooleanLiteral(t.data, toPos(t), false));     else if (t.kind == TokenKind.LITERAL_STRING)       push(new StringLiteral(t.data, toPos(t), t.data));     else {       return false;     }     nextToken();     return true;   } ```  When I add an L to make it a java Long -> 5000000000L  ```  ```  I got an other error:  ```  java.lang.IllegalArgumentException: The field type is required at org.springframework.util.Assert.notNull(Assert.java:112) at org.springframework.webflow.mvc.view.ConvertingPropertyEditorAdapter.(ConvertingPropertyEditorAdapter.java:48) at org.springframework.webflow.mvc.view.BindingModel.findSpringConvertingPropertyEditor(BindingModel.java:277) at org.springframework.webflow.mvc.view.BindingModel.findEditor(BindingModel.java:183) at org.springframework.web.servlet.support.BindStatus.(BindStatus.java:125) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:179) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getPropertyPath(AbstractDataBoundFormElementTag.java:199)... ```   ```    ---  **Affects:** 3.2.2, 3.2.4  **Reference URL:** http://stackoverflow.com/questions/19540206/hashmap-in-spring-form","closed","status: bulk-closed,","spring-projects-issues","2013-10-23T06:27:02Z","2019-01-12T00:21:36Z"
"","15993","java.security.AccessControlException: Access denied (java.lang.RuntimePermission createClassLoader) [SPR-11367]","**[sureshm](https://jira.spring.io/secure/ViewProfile.jspa?name=sureshm)** opened **[SPR-11367](https://jira.spring.io/browse/SPR-11367?redirect=false)** and commented  Trying to upgrade hibernate3 to hibernate 4 with spring 3.2.5. Not able to proceed deployment on WAS 7 (websphere7) due to java.security.AccessControlException: Access denied (java.lang.RuntimePermission createClassLoader) issue.  Versions - Spring 3.2.5 and hibernate 4.2.7  we don't have access to update policy file with createClassLoader runtime permissions. Please help on it. Thanks in advance..  ---  **Affects:** 3.2.5  **Issue Links:** - #14479 Hibernate 4 class loading issue on JBoss 7 when hibernate & spring classes loaded by different classloaders","closed","in: core,","spring-projects-issues","2014-01-28T23:19:16Z","2019-01-12T05:26:16Z"
"","16035","InvocableHandlerMethod improvement intercept facility between getMethodArgumentValues and invoke [SPR-11408]","**[Sung Joon, Park](https://jira.spring.io/secure/ViewProfile.jspa?name=hoyeol)** opened **[SPR-11408](https://jira.spring.io/browse/SPR-11408?redirect=false)** and commented  hi. wrong description was my fault. my intent was verify the no mechanism at there and want to hear whats opinion.  i saw the spring codes and it seems there is no intercept mechanism / facility on org.springframework.web.method.support.InvocableHandlerMethod between getMethodArgumentValues and invoke.  for example, when i implementing RESTful API with Spring MVC (+OAuth2), there i have to need intercepting(fliter) logic after resolving Argument value for verify specific resource modifiy/delete permissions.  scenarios likes this. User A is Resource Owner. he has Resource ""RA"". User B has not grant access to Resource ""RA"". when User B try to modify Resource ""RA"", but there User B has not grant authrization, so will be will be throw error likes ""require authorization""  at that scenario, i am using HandlerMethodArgumentResolver for argument resolving. but there is similar code (authorization checking) at there, i was thinking it can be support by framework. (there can be i am wrong.. umm)  situation likes following code below..  thx for reading.  ```java @Target(ElementType.PARAMETER) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface OAuth { 	boolean required() default true; }  public class OAuthHandlerMethodArgumentResolver implements HandlerMethodArgumentResolver { 	@Override 	public boolean supportsParameter(MethodParameter parameter) { 		OAuth annotation = paramter.getParameterAnnotation(OAuth.class); 		return (annotation != null); 	}  	@Override 	public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {                 //resolve argument works 		return result; 	} }  @Controller @RequestMapping(value = ""/resource"") public class SampleRestController { 	 	@RequestMapping(method = RequestMethod.GET) 	public DTO get(@OAuth String value) { 		// get operation 	}  	@RequestMapping(method = RequestMethod.POST) 	public DTO post(@OAuth String value) { 		// cross cutting concern called (e.g permission check) 		// post logic here 	}  	@RequestMapping(value = ""/{id:[0-9]*}"", method = RequestMethod.PUT) 	public DTO put(@PathVariable(value = ""id"") long id,, @OAuth String value) { 		// cross cutting concern called (e.g permission check) likes ""Authorization check for this resource."" 		// put logic here 	}  	@RequestMapping(value = ""/{id:[0-9]*}"", method = RequestMethod.DELETE) 	public DTO delete(@OAuth String value) { 		// cross cutting concern called (e.g permission check) likes ""Authorization check for this resource."" 		// delete logic here 	}  } ```    --- No further details from [SPR-11408](https://jira.spring.io/browse/SPR-11408?redirect=false)","closed","type: enhancement,","spring-projects-issues","2014-02-10T01:26:45Z","2014-03-13T08:25:00Z"
"","16329","Add support of @SendTo for JMS listeners [SPR-11707]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11707](https://jira.spring.io/browse/SPR-11707?redirect=false)** and commented  `MessageListenerAdapter` has a reply feature for quite some time: if the method to invoke has a non-`void` return type, the result is wrapped in a JMS `Message` and sent to the destination defined by the `JMSReplyTO` header. There is also a way to specify a _default_ reply destination to use if that header is not set  ```xml       ```  The new `JmsListener` has a `responseDestination` attribute with the same semantic.  This issue is about considering using `@ReplyTo` instead (and therefore removing the `responseDestination` attribute.  Several things to consider, following a brainstorming with [Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)  * Existing users trying to migrate from XML might get confused and look for that attribute. Improving the `@JmsListener` javadoc might help * The Javadoc of `@SendTo` should be revisited to be less imperative. Something to describe that if the incoming message defines where to send the reply, this takes precedence over the value defined by the annotation * Right now, `getReplyChannel` returns the `JMSReplyTO` header value for the JMS specific implementation. This shouldn't be as the use of that attribute is reserved for `MessageChannel` and are not applicable to simple listeners    ---  **Affects:** 4.1 RC1","closed","type: enhancement,","spring-projects-issues","2014-04-18T07:13:59Z","2014-07-18T10:16:44Z"
"","16328","Detect default JmsListenerContainerFactory automatically [SPR-11706]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11706](https://jira.spring.io/browse/SPR-11706?redirect=false)** and commented  `@JmsListener` has a `containerFactory` attribute used to refer to the `JmsListenerContainerFactory` to use. The default can be set explicitly either using the XML namespace  ```xml  ```  or using java config  ```java @Configuration @EnableJms public class AppConfig implements JmsListenerConfigurer {      @Override     public void configureJmsListeners(JmsListenerEndpointRegistrar registrar) {         registrar.setDefaultContainerFactory(myFactory());     } } ```  If that's specified, the `containerFactory` attribute can be omitted and the default will be assumed in that case.  A large majority of applications are using a single JMS broker and most are just using the sample template to create the container (different concurrency level may be what they would really need to change and topic/queue switch). We could decide to **auto-detect** the default container factory to use (and still give the ability to specify it explicitly of course!).  Proposal: lookup by name with ""jmsListenerContainerFactory""  Also, look at `` for reference    ---  **Affects:** 4.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4b0aba63df821edf6903b0c4d5d04b0eadc05cf4","closed","type: enhancement,","spring-projects-issues","2014-04-18T07:05:04Z","2014-07-18T10:16:33Z"
"","16291","@CacheConfig not taking cglib proxy into account properly [SPR-11668]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11668](https://jira.spring.io/browse/SPR-11668?redirect=false)** and commented  When a `@CachingConfig` is specified on an implementation and we expose and manage the bean as its interface, the annotation is not found as we're trying to find it on the cglib proxy.  Besides, there's a need to be able to specify that annotation in a parent component, such as the interface itself even if it's not recommended.   --- No further details from [SPR-11668](https://jira.spring.io/browse/SPR-11668?redirect=false)","closed","in: core,","spring-projects-issues","2014-04-07T08:22:24Z","2019-01-12T16:35:01Z"
"","16262","Use javax.annotation.Priority as an alternative for @Order [SPR-11639]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11639](https://jira.spring.io/browse/SPR-11639?redirect=false)** and commented  This is a follow-up issue of #15179 to consider `@Priority` as an alternative for `@Order`.  Update the features that `@Order` handles so that `@Priority` can be used with the same semantic.  ---  **Issue Links:** - #15179 Add support for `@javax`.annotation.Priority as alternative to `@Primary` - #16962 Improve diagnostics when OrderUtils.getPriority encounters an ArrayStoreException during annotation introspection","closed","type: enhancement,","spring-projects-issues","2014-03-31T12:43:00Z","2019-01-13T06:54:45Z"
"","16227","Integrate animal sniffer [SPR-11604]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11604](https://jira.spring.io/browse/SPR-11604?redirect=false)** and commented  Animal sniffer allows to check that the code base is compatible with a particular version of a given API. In particular, it allows to check that the code is compatible with a certain Java API generation.  Spring is compatible with Java6 and onwards but has a few places that use Java7 or Java8 constructs, either to take advantage of an optimization or to be compatible with a newer API.  Integrating animal sniffer allows us to ensure that we don't use a Java7/8 constructs by accident. In the latest release of animal sniffer, it is possible to use custom annotations _in lieu_ of the standard `@IgnoreJRERequirement`.  It is unclear how we could name those annotations so that it's straightforward but [d0e1bfb9919cd911cf6698ca06590c822c6c6540](https://github.com/snicoll/spring-framework/commit/d0e1bfb9919cd911cf6698ca06590c822c6c6540) is one attempt.  These are the names we could use for _ignoring_ known Java7 constructs:  * `@UsesJava7` * `@UsesJava7Api` * `@DependsOnJava7` * `@RequiresJava7` * `@Java7Required` * `@Java7` * `@DependsOnJdk7`  A similar annotation can be used to identify Java8 constructs.  Finally, in some very specific classes we rely on the HTTP server bundled with the Sun/Oracle VM. This should probably deserve a dedicated annotation as well.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f7b465390cf99a14bdbfe3c4dbfb17938f3332e2, https://github.com/spring-projects/spring-framework/commit/bd85c916eb98a8278ad55a393be4590a20eca4fd","closed","type: task,","spring-projects-issues","2014-03-26T03:24:25Z","2014-07-18T10:16:30Z"
"","16208","MessageMethodArgumentResolver does not handle payload type and sub classes [SPR-11584]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11584](https://jira.spring.io/browse/SPR-11584?redirect=false)** and commented  `MessageMethodArgumentResolver` does not check the effective payload type. So if a method declares `Method` and the current message is `Message` it will be injected with a nasty `ClassCastException` at runtime.  Besides the resolver is strict, it cannot handle the declaration of a sub-type of `Message`.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2aee0d82507b8a7ca63df8cdd6d6502526886dd3, https://github.com/spring-projects/spring-framework/commit/2c1d5efbb021d7eed196bad550bcd675d43035b9","closed","type: enhancement,","spring-projects-issues","2014-03-20T07:33:19Z","2014-03-26T22:34:00Z"
"","16201","PayloadArgumentResolver does not honour Payload#required() [SPR-11577]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11577](https://jira.spring.io/browse/SPR-11577?redirect=false)** and commented  `PayloadArgumentResolver` does not throw any exception when the payload is `null` and it is required as defined by the `Payload#required()` parameter  While the payload must not be `null` by design, it may become `null` after a conversion attempt.   ---  **Affects:** 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/929e9ca401e6d619cfbfc6aff38bf05a3f40848d, https://github.com/spring-projects/spring-framework/commit/52c3f713bf0f467a43fa55c9be425447d371531b","closed","type: bug,","spring-projects-issues","2014-03-18T15:21:19Z","2014-03-26T22:34:10Z"
"","16193","Switch source encoding to UTF-8 and enforce it in the build [SPR-11569]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11569](https://jira.spring.io/browse/SPR-11569?redirect=false)** and commented  We have been referring to `ISO-8859-1` for the encoding of our source files but nothing in our build enforces it and most of the new code base is probably encoded with `UTF-8`.  Unless there's a valid reason to use latin instead of `UTF-8` we should fix at least master and configure gradle to make sure that resources are compiled/copied with that encoding instead of relying on the default.  ---  **Issue Links:** - #19115 HttpHeaders.setContentDispositionFormData() doesn't encode non-acsii characters correctly  5 votes, 6 watchers","closed","type: task,","spring-projects-issues","2014-03-17T16:26:08Z","2019-01-11T21:33:11Z"
"","16143","Properly wrap runtime-registered caches with TransactionAwareCacheDecorator [SPR-11518]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11518](https://jira.spring.io/browse/SPR-11518?redirect=false)** and commented  #16034 introduced a simple fix for this problem that we can revisit with a protected API change in 4.1  PR available https://github.com/spring-projects/spring-framework/pull/461  ---  **Issue Links:** - #16034 EhCacheCacheManager does not wrap runtime-registered caches with TransactionAwareCacheDecorator - #18070 Potential double invocation of getMissingCache in AbstractCacheManager","closed","type: enhancement,","spring-projects-issues","2014-03-05T08:12:42Z","2019-01-11T21:38:23Z"
"","16115","Apply CacheResolver to Spring's caching abstraction [SPR-11490]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11490](https://jira.spring.io/browse/SPR-11490?redirect=false)** and commented  The JSR-107 support (#14250) introduced the concept of `CacheResolver` that allows to resolve the cache(s) to use at runtime.  Right now, the only reason why the `CacheManager` is specified is to resolve the cache(s) based on the name(s) provided through the annotation or the cache advice.  The CacheResolver should also be supported  by Spring's caching abstraction which would allow to offer a finer level of control of cache resolution.  ---  **Issue Links:** - #13338 Introduce qualifier in `@Cacheable` for cache manager name - #14250 Support for JSR-107 caching annotations - #15940 Provide a `@CacheConfig` annotation to share class-level customizations","closed","type: enhancement,","spring-projects-issues","2014-02-27T05:20:00Z","2019-01-13T06:55:31Z"
"","15945","Downgrade accidental use of Java 1.6 APIs [SPR-11321]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11321](https://jira.spring.io/browse/SPR-11321?redirect=false)** and commented  Similar to #15943 but for 1.6 APIs on the 3.2.x branch  ---  **Issue Links:** - #15937 spring-jdbc-3.2.6.RELEASE doesn't support JDK 5. - #15965 NoClassDefFoundError with Spring 3.2.7.BUILD-SNAPSHOT on WebSphere 6.1 - #15943 Downgrade accidental use of Java 1.7 APIs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fd13c994c90fd4abb5dc0ec95e562985a539a40b","closed","type: bug,","spring-projects-issues","2014-01-16T07:34:53Z","2019-01-11T19:02:38Z"
"","15943","Downgrade accidental use of Java 1.7 APIs [SPR-11319]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11319](https://jira.spring.io/browse/SPR-11319?redirect=false)** and commented  To prevent issue similar to #15937 we have integrated animal sniffer in our build to check the use of the JDK APIs.  This issue is about collecting the classes that are using 1.7+ APIs, knowing that some are for perfectly valid reasons (support of 1.8 features)  ---  **Issue Links:** - #15937 spring-jdbc-3.2.6.RELEASE doesn't support JDK 5. - #15870 UriComponentsBuilder - NoSuchMethodError: java.lang.reflect.Method.getParameterCount - #13802 Support BigDecimals with SpEL - #15945 Downgrade accidental use of Java 1.6 APIs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/838855b1aae45669e40d8d9a9e332aaac98fb543","closed","type: bug,","spring-projects-issues","2014-01-16T05:52:52Z","2019-01-11T19:02:17Z"
"","15940","Provide a @CacheConfig annotation to share class-level customizations [SPR-11316]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11316](https://jira.spring.io/browse/SPR-11316?redirect=false)** and commented  #13338 and #15257 have introduced two customisations related to the cache operation: cache manager and key generator.  The feature is tedious and error-prone as these customisations have to be set for each and every operation. The idea here is to introduce a new annotation `@CacheConfig` that could be set at class-level only and that would gather those customisations as well as the default cache name. Something like:  ```java @CacheConfig(cacheManager = ""myCacheManager"") public class FooRepository {    @Cacheable(""test)   public void getFoo(String id) { ... }  } ```  If a caching operation specifies its own cache manager, key generator or cache names, that one is used instead of the default.  In other words, this is about giving 3 levels of customisation:  1. General level (the global ""cacheManager"", ""keyGenerator""; not available for cache names) 2. Class level (through the `@CacheConfig` annotation) 3. Operation level (through the explicit caching operation such as `@Cacheable`)  ---  **Issue Links:** - #13338 Introduce qualifier in `@Cacheable` for cache manager name - #15257 Be able to specify custom key generators on a per-cache basis - #16115 Apply CacheResolver to Spring's caching abstraction  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b89c1a87e2469110f9a0d4282eeb348b76262ff, https://github.com/spring-projects/spring-framework/commit/3c28301ded03b7163c8450cb3cc4787cb79a8595  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2014-01-15T08:37:38Z","2019-01-13T06:56:24Z"
"","16194","@ControllerAdvice not detected from parent contexts (even though @Controller is) [SPR-11570]","**[stripybadger](https://jira.spring.io/secure/ViewProfile.jspa?name=stripybadger)** opened **[SPR-11570](https://jira.spring.io/browse/SPR-11570?redirect=false)** and commented  I use `ContextLoaderListener` to load most of my spring stuff (lets call this context P), then have a `DispatcherServlet`. Each `DispatcherServlet` creates its own application context (lets call this D) which gets parented by P.  If I have beans in P which are controllers (annotated with `@Controller`), they still get exposed by the `DispatcherServlet`. However any `ControllerAdvice` beans in P do not get picked up.  I think this inconsistency is a bug. Particularly as many users will want to be able to share controller advice beans between `DispatcherServlet` (e.g. it may be useful to share exception handling across all servlets).  See [AbstractDetectingUrlHandlerMapping:74](https://github.com/spring-projects/spring-framework/blob/1204d2aef4afdefb4ba73c86565aab3f5b2a6931/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractDetectingUrlHandlerMapping.java#L74) - calls BeanFactoryUtils.beanNamesForTypeIncludingAncestor [ControllerAdviceBean:92](https://github.com/spring-projects/spring-framework/blob/043a41e3825773affc4af1fde5b08c147697260f/spring-web/src/main/java/org/springframework/web/method/ControllerAdviceBean.java#L153) - calls applicationContext.getBeanDefinitionNames() (which only appears to get beans from the current context, not parents)   ---  **Affects:** 3.2.3","closed","type: enhancement,","spring-projects-issues","2014-03-18T01:14:26Z","2014-03-26T22:34:05Z"
"","16338","Skip multipart checking so that multipart errors can be handled in an @Controller method using Servlet 3  [SPR-11716]","**[steve bread](https://jira.spring.io/secure/ViewProfile.jspa?name=solze)** opened **[SPR-11716](https://jira.spring.io/browse/SPR-11716?redirect=false)** and commented  I have a multipartpart config in the web.xml to limit the max upload size  ```xml             org.springframework.web.servlet.DispatcherServlet                 2097152           2097152           0        ```  and a mapping to an error controller  ```xml       /error  ```  I'm using Tomcat. A file upload greater than the max size results in an exception which the container attempts to forward to the error controller. Following the normal dispatch behavior for the error URL, Spring attempts to create a `StandardMultipartHttpServletRequest` again which once again results in a Tomcat exception for max size violation. So the error controller is not reached and instead a Tomcat error page is returned. It would be nice if there were a way to tell Spring to ignore the mutipart content for the error controller and create a regular request.  In Eclipse, I had Spring skip the multipart block in `DispatcherServlet.checkMultipart` and got the desired result.  The error controller for reference  ```java @Controller @RequestMapping(""/error"") public class ErrorController {  	@RequestMapping(headers = ""X-Requested-With=XMLHttpRequest"") 	public ResponseEntity error(HttpServletRequest request, HttpServletResponse response) { 		return new ResponseEntity(""An error occurred"", HttpStatus.BAD_REQUEST); 	} } ```  ---  **Affects:** 3.2.8  **Issue Links:** - #16352 StandardServletMultipartResolver should support lazy resolution along the lines of CommonsMultipartResolver  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5b47816183e4e9a0dc2ad5d2175065ac17539719, https://github.com/spring-projects/spring-framework/commit/d3c9a31e9a10a1128c2ad8b55e4cc0519d8af32c","closed","type: enhancement,","spring-projects-issues","2014-04-21T21:21:54Z","2019-01-11T21:19:29Z"
"","15906","ThreadPoolTaskExecutor Should Implement AsyncListenableTaskExecutor [SPR-11282]","**[Stephen Duncan Jr](https://jira.spring.io/secure/ViewProfile.jspa?name=jrduncans)** opened **[SPR-11282](https://jira.spring.io/browse/SPR-11282?redirect=false)** and commented  The documentation for SimpleAsyncTaskExecutor says to consider using a thread-pooling TaskExecutor, but there's no other task executor that implements AsyncListenableTaskExecutor.  ThreadPoolTaskExecutor should implement AsyncListentableTaskExecutor so that it's easy to configure an AsyncRestTemplate to use a thread-pool.   ---  **Affects:** 4.0 GA","closed","type: enhancement,","spring-projects-issues","2014-01-03T10:09:51Z","2014-01-28T13:07:18Z"
"","15832","spring-boot sample project fails to start if source jar is in classpath [SPR-11207]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-11207](https://jira.spring.io/browse/SPR-11207?redirect=false)** and commented  If spring-boot-autoconfigure source jar is added to classpath along with spring-boot-autoconfigure binary jar, spring-boot sample project fails to start with hard to understand error message:  ``` Exception in thread ""main"" java.lang.IllegalStateException: Could not register object [org.springframework.boot.autoconfigure.AutoConfigurationReportLoggingInitializer$AutoConfigurationReportLogger@2fd6b6c7] under bean name 'autoConfigurationReportLogger': there is already object [org.springframework.boot.autoconfigure.AutoConfigurationReportLoggingInitializer$AutoConfigurationReportLogger@5bfa9431] bound 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.registerSingleton(DefaultSingletonBeanRegistry.java:129) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.registerSingleton(DefaultListableBeanFactory.java:778) 	at org.springframework.boot.autoconfigure.AutoConfigurationReportLoggingInitializer.initialize(AutoConfigurationReportLoggingInitializer.java:60) 	at org.springframework.boot.SpringApplication.applyInitializers(SpringApplication.java:403) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:287) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:749) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:738) 	at ru.yandex.salmon.SalmonMain.main(SalmonMain.java:22) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:491) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120) ```  It fails due to the fact that spring.factories of spring-boot-configuration is added twice to the classpath.  This problem is easy to detect: if two objects of the same type added to SpringApplication.initializers, then spring-boot should either:  * print nice diagnostics message * or just quietly ignore second initializer    --- No further details from [SPR-11207](https://jira.spring.io/browse/SPR-11207?redirect=false)","closed","status: invalid,","spring-projects-issues","2013-12-11T04:38:18Z","2019-01-12T05:26:23Z"
"","15574","Spring's Freemarker macros do not evaluate defaultHtmlEscaping [SPR-10946]","**[Stefan Haberl](https://jira.spring.io/secure/ViewProfile.jspa?name=birnbuazn)** opened **[SPR-10946](https://jira.spring.io/browse/SPR-10946?redirect=false)** and commented  Spring's Freemarker formInput and formTextarea use springMacroRequestContext, which evaluates the defaultHtmlEscape context parameter to false if not explicitly configured (and therefore do not escape HTML input by default)   ---  **Affects:** 3.2.4  **Reference URL:** https://jira.springsource.org/browse/SPR-3205","closed","status: bulk-closed,","spring-projects-issues","2013-09-30T05:54:35Z","2019-01-12T00:22:18Z"
"","15927","Make conversion framework extensible [SPR-11303]","**[Stefan Gheorghiu](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan.gheorghiu)** opened **[SPR-11303](https://jira.spring.io/browse/SPR-11303?redirect=false)** and commented  Changes implemented in #15515 still don't allow extending the conversion subsystem.  When I tried to port my earlier approach for 3.2.4, it turned out that method/class access is too severe. So, please make the following constructor protected rather than private:  `TypeDescriptor(ResolvableType resolvableType, Class type, Annotation[] annotations)`  It would be good to make also fields `type`, `resolvableType`, `annotations` protected.  Class `ResolvableType` should not be final as well as its constructor should be protected.  Interfaces `TypeProvider` and `VariableResolver` should have protected or public access.  ---  **Affects:** 4.0 GA","closed","type: enhancement,","spring-projects-issues","2014-01-13T06:14:17Z","2019-01-11T19:04:28Z"
"","16015","Performance degradation in evaluation of SpelExpression with access to Map [SPR-11388]","**[Spenson Shih](https://jira.spring.io/secure/ViewProfile.jspa?name=spenson)** opened **[SPR-11388](https://jira.spring.io/browse/SPR-11388?redirect=false)** and commented  Starting in spring 4.0, evaluating SpEL expressions with map access has suffered severe performance degradation.  The code snippet below is used to demonstrate:  ```java Map map = new HashMap(); map.put(""key"", ""value""); EvaluationContext context = new StandardEvaluationContext(map);  ExpressionParser spelExpressionParser = new SpelExpressionParser(); Expression expr = spelExpressionParser.parseExpression(""#root['key']"");  StopWatch s = new StopWatch(); s.start(); for (int i = 0; i < 10000; i++) { 	expr.getValue(context); } s.stop(); System.out.println(s.getTotalTimeMillis()); ```  Using Spring 3.x, average time is 50ms.  Upon upgrade to Spring 4.0, average time is 1000ms.  Spring 4.0.1 is slightly better at 700ms.   ---  **Affects:** 4.0 GA, 4.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7efd54e243ab0451eea3f1cded7cfd7b512aa563","closed","type: enhancement,","spring-projects-issues","2014-02-04T23:11:12Z","2014-02-18T22:36:51Z"
"","16003","Jaxb2RootElementHttpMessageConverter is susceptible to XXE vulnerability [SPR-11376]","**[Spase Markovski](https://jira.spring.io/secure/ViewProfile.jspa?name=berzerker)** opened **[SPR-11376](https://jira.spring.io/browse/SPR-11376?redirect=false)** and commented  For background information, see [XXE vulnerability](https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing).  This seems to not have been fixed in `Jaxb2RootElementHttpMessageConverter` when it was fixed in `Jaxb2CollectionHttpMessageConverter`. The way it is solved in `Jaxb2CollectionHttpMessageConverter` is by hard coding the property for resolving external entities to `false`. See #15432 and the attached patch.  By default the XML parser will parse and replace external entities. Also there is no way to configure how `Jaxb2RootElementHttpMessageConverter` handles external entities.  ---  **Affects:** 3.2.5  **Attachments:** - [jaxb2-converter-patch.txt](https://jira.spring.io/secure/attachment/21658/jaxb2-converter-patch.txt) (_6.66 kB_)  **Issue Links:** - #15432 Fix potential security risk when using Spring OXM - #15704 Disable the processing of external entities in SourceHttpMessageConverter by default - #16359 AbstractMarshaller should avoid SAXSource workaround when processExternalEntities=true  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","type: bug,","spring-projects-issues","2014-01-31T06:25:09Z","2019-01-11T18:39:15Z"
"","15937","spring-jdbc-3.2.6.RELEASE doesn't support JDK 5. [SPR-11313]","**[Soungmin Joo](https://jira.spring.io/secure/ViewProfile.jspa?name=letters4u)** opened **[SPR-11313](https://jira.spring.io/browse/SPR-11313?redirect=false)** and commented  I'm not sure this is really a bug. I thought that spring-jdbc-3.2.6.RELEASE would  support JDK 5 because spring-jdbc-3.2.5.RELEASE did so. \\ But because StatementCreatorUtils has changed to use Collections.newSetFromMap() method (which is supported from JDK 6) \\ when 3.2.5.RELEASE has transfered to 3.2.6.RELEASE, it seems that JdbcTemplate cannot be used with JDK 6 together on spring-jdbc-3.2.6.RELEASE. \\Is this really what was supposed to be? \\ \\  ``` // spring-jdbc-3.2.5.RELEASE.jar public abstract class StatementCreatorUtils {     private static final Log logger = LogFactory.getLog(StatementCreatorUtils.class);     private static Map javaTypeToSqlTypeMap = new HashMap(32);  // spring-jdbc-3.2.5.RELEASE.jar public abstract class StatementCreatorUtils {     private static final Log logger = LogFactory.getLog(StatementCreatorUtils.class);     static final Set driversWithNoSupportForGetParameterType = 	Collections.newSetFromMap(new ConcurrentHashMap(1)); ```  ---  **Affects:** 3.2.6  **Issue Links:** - #15974 StatementCreatorUtils introduces java 1.6 dependency (_**""is duplicated by""**_) - #15726 performancedrop due to repeated JDBC 3.0 getParameterType calls in setNull in StatementCreatorUtils - #15943 Downgrade accidental use of Java 1.7 APIs - #15945 Downgrade accidental use of Java 1.6 APIs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/62fd12c527f528c9ddc124ece57ff4336f5d2977","closed","type: bug,","spring-projects-issues","2014-01-14T21:38:31Z","2019-01-11T19:03:46Z"
"","15535","Using context hierarchies in the TestContext Framework does not resolve placeholders in @Value [SPR-10907]","**[Sorin Jucovschi](https://jira.spring.io/secure/ViewProfile.jspa?name=jucosorin)** opened **[SPR-10907](https://jira.spring.io/browse/SPR-10907?redirect=false)** and commented  I am using WebApplicationContext hierarchy for my integration tests in order to be as close as possible to the production environment. I have the following test class:  ``` @RunWith(SpringJUnit4ClassRunner.class) @WebAppConfiguration @ContextHierarchy({         @ContextConfiguration(""classpath:spring/application-context.xml""),         @ContextConfiguration(""classpath:spring/servlet-context.xml"") }) public class IntegrationTest {      @Value(""${name}"")     private String name; } ```  In the parent context (application-context.xml) I use:  ```      ```  In the **app.properties** file I have declared the property **name** (name=Sorin).  Running the above test case will not inject ""Sorin"" as the value to the **name** field. Running the test without the WebApplicationContext hierarchy works just fine (example below)  ``` @RunWith(SpringJUnit4ClassRunner.class) @WebAppConfiguration @ContextConfiguration({""classpath:spring/application-context.xml"", ""classpath:spring/servlet-context.xml""}) public class IntegrationTest {      @Value(""${name}"")     private String name; } ```    ---  **Affects:** 3.2.4","closed","status: declined,","spring-projects-issues","2013-09-11T02:20:23Z","2019-01-13T21:02:34Z"
"","16279","Basic Java 8 bytecode compatibility for Spring 3.2.x through ASM 5.0.2 [SPR-11656]","**[Sondre Eikanger Kvalø](https://jira.spring.io/secure/ViewProfile.jspa?name=zapodot)** opened **[SPR-11656](https://jira.spring.io/browse/SPR-11656?redirect=false)** and commented  The current version of ASM (v 4) makes Spring `@ComponentScan` and other ASM reliant features unusable when running on Java 8.  [Pull request 510](https://github.com/spring-projects/spring-framework/pull/510) upgrades ASM to 5.0.0 (should be 5.0.1). According to the [ASM release notes](http://asm.ow2.org/history.html) this version should still be backwards compatible with Java 5, 6, 7 and 8.  This is a major obstacle at least for those using Camel as it is not Spring 4 compatible.  ---  **Affects:** 3.2.8  **Issue Links:** - #15837 Upgrade AspectJ dependency to 1.8 final and apply latest ASM 5.0.2 patches - #15864 Upgrade embedded ASM version to 5.0.1 - #16595 Java 8: ASM5 visitors required for parsing INVOKESPECIAL/STATIC on interfaces - #16508 Upgrade to ASM 5.0.3 - #16341 Metadata reading should never use ASM for java.* and javax.* types (in particular on JDK 8)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/510  4 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2014-04-03T23:18:37Z","2019-01-11T21:04:23Z"
"","16274","Spark and Spring MVC integration [SPR-11651]","**[sivaramanjaneyulu](https://jira.spring.io/secure/ViewProfile.jspa?name=sivaram)** opened **[SPR-11651](https://jira.spring.io/browse/SPR-11651?redirect=false)** and commented  We have trying to  build an application   using Spring MVC and Spark with mongodb that can be used by word count  among multiple collection and result will be stored in mongodb by using Spring MVC's . This means that it is possible to apply Spark to a web application developed in Spring MVC in a declarative way  This problem arises because there isn't a clear extension point of the Spring MVC´s .  when run the attached application we got the following exception  HTTP Status 500 - Request processing failed; nested exception is org.apache.spark.SparkException: Job aborted: Task 1.0:0 failed 1 times (most recent failure: Exception failure: java.lang.ClassNotFoundException: com.techgene.spring.mvc.service.MongoHadoop$1)  This problem arise in the MongoHadoop.java file    ---  **Affects:** 3.2.1  **Attachments:** - [Springsparkmongo.rar](https://jira.spring.io/secure/attachment/21911/Springsparkmongo.rar) (_10.68 kB_)","closed","in: web,","spring-projects-issues","2014-04-03T00:18:16Z","2019-01-11T21:04:04Z"
"","16235","""org.springframework.beans.factory.support.DefaultListableBeanFactory"", loaded by ""org.apache.catalina.loader.StandardClassLoader"" occupy 1,493,680,816 bytes [SPR-11612]","**[Siva](https://jira.spring.io/secure/ViewProfile.jspa?name=kbsivacse)** opened **[SPR-11612](https://jira.spring.io/browse/SPR-11612?redirect=false)** and commented  We are noticing a memory leak and Spring objects loaded by system classloader are occupying 1.4 GB of memory.  ""org.springframework.beans.factory.support.DefaultListableBeanFactory"", loaded by ""org.apache.catalina.loader.StandardClassLoader"" occupy 1,493,680,816 (65.82%) bytes   ---  **Affects:** 3.2.2  **Attachments:** - [Dominator Tree.png](https://jira.spring.io/secure/attachment/21892/Dominator+Tree.png) (_62.17 kB_) - [Dominator Tree 2.png](https://jira.spring.io/secure/attachment/21893/Dominator+Tree+2.png) (_30.81 kB_) - [Histogram.png](https://jira.spring.io/secure/attachment/21891/Histogram.png) (_10.09 kB_)  3 votes, 9 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-03-26T23:03:16Z","2019-01-12T00:20:44Z"
"","15699","In location attribute of  SpEL expressions are not evaulated [SPR-11072]","**[sibidiba](https://jira.spring.io/secure/ViewProfile.jspa?name=sibidiba)** opened **[SPR-11072](https://jira.spring.io/browse/SPR-11072?redirect=false)** and commented  Given you include an SpEL expression in the location attribute of , when the context is loaded, then you will get an exception implying the SpEL expression was not evaluated but taken literally. E.g.:  ```xml  ```  ``` Exception in thread ""main"" org.springframework.beans.factory.BeanInitializationException: Could not load properties; nested exception is java.io.FileNotFoundException: class path resource [config-#{environment['config.environment'] ? environment['config.environment'] : 'config'}.properties] cannot be opened because it does not exist 	at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:87) ... ```  See for workaround: http://stackoverflow.com/questions/6900259/using-contextproperty-placeholder-location-with-spring-el   ---  **Affects:** 3.2.4  2 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-11-06T04:19:59Z","2019-01-12T00:21:13Z"
"","15754","theme resolution fails with ""IllegalArgumentException: Basename must not be empty"" when an empty theme value is provided via request url [SPR-11128]","**[Shiro](https://jira.spring.io/secure/ViewProfile.jspa?name=shiro_spring)** opened **[SPR-11128](https://jira.spring.io/browse/SPR-11128?redirect=false)** and commented  A call like http://localhost/?theme= will cause an IllegalArgumentException, but instead it should fall back to the default theme if any is provided or simply ignore the request.  EDIT: What's escpecially bad about this, is that it comes close to denial of service, as in combination with the CookieThemeResolver, even normal requests to themed resources aren't possible anymore and will show the IllegalArgumentException instead.  For reference I have the following standard setup in a WebMvcConfigurerAdapter derived `@Configuration`:  ```     @Override     public void addInterceptors(InterceptorRegistry registry) {         super.addInterceptors(registry);         final ThemeChangeInterceptor themeChangeInterceptor = new ThemeChangeInterceptor();         themeChangeInterceptor.setParamName(""theme"");         registry.addInterceptor(themeChangeInterceptor);     }      @Bean     public ThemeSource themeSource() {         final ResourceBundleThemeSource source = new ResourceBundleThemeSource();         source.setBasenamePrefix(""theme."");         return source;     }      @Bean     public ThemeResolver themeResolver() {         final CookieThemeResolver resolver = new CookieThemeResolver();         resolver.setCookieName(""my.theme"");         resolver.setCookieMaxAge(100000);         resolver.setDefaultThemeName(""default"");         return resolver;     }  ```  relevant stack trace  ``` java.lang.IllegalArgumentException: Basename must not be empty 	at org.springframework.util.Assert.hasText(Assert.java:162) 	at org.springframework.context.support.ResourceBundleMessageSource.setBasenames(ResourceBundleMessageSource.java:143) 	at org.springframework.context.support.ResourceBundleMessageSource.setBasename(ResourceBundleMessageSource.java:119) 	at org.springframework.ui.context.support.ResourceBundleThemeSource.createMessageSource(ResourceBundleThemeSource.java:129) 	at org.springframework.ui.context.support.ResourceBundleThemeSource.getTheme(ResourceBundleThemeSource.java:104) 	at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.getTheme(AbstractRefreshableWebApplicationContext.java:213) 	at org.springframework.ui.context.support.ResourceBundleThemeSource.initParent(ResourceBundleThemeSource.java:142) 	at org.springframework.ui.context.support.ResourceBundleThemeSource.getTheme(ResourceBundleThemeSource.java:106) 	at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.getTheme(AbstractRefreshableWebApplicationContext.java:213) 	at org.springframework.web.servlet.support.RequestContextUtils.getTheme(RequestContextUtils.java:152) 	at org.springframework.web.servlet.support.RequestContext.getTheme(RequestContext.java:322) ```    ---  **Affects:** 3.2.5, 3.2.6, 4.0 RC2, 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e0f9a85955e6e7be94ebcd3a35b84ec160a7f2e3, https://github.com/spring-projects/spring-framework/commit/5e5add48625e19bf7080957b69f4a6554fad106d, https://github.com/spring-projects/spring-framework/commit/b229d54172902fff0247e8fe73512c9b3564cdc0, https://github.com/spring-projects/spring-framework/commit/cc81aae8c1c0bb07de1829a09798d5693383bfcd  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: bug,","spring-projects-issues","2013-11-27T02:53:24Z","2014-01-28T13:07:18Z"
"","16004","Support declarative PropertySource annotations in the TestContext framework [SPR-11377]","**[Shevek](https://jira.spring.io/secure/ViewProfile.jspa?name=shevek)** opened **[SPR-11377](https://jira.spring.io/browse/SPR-11377?redirect=false)** and commented  I wrote this ages ago, but:  There should be an equivalent of `@ActiveProfiles` for `PropertySources`. I wrote this code, and hope it helps.  ```java public class CustomTestContextLoader extends DelegatingSmartContextLoader {      private final SmartContextLoader annotationConfigLoader = new AnnotationConfigContextLoader() {         @Override         protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {             super.prepareContext(context, mergedConfig);             Class testClass = mergedConfig.getTestClass();              Map properties = new HashMap();              TestPropertyValues values = AnnotationUtils.getAnnotation(testClass, TestPropertyValues.class);             if (values != null)                 for (TestPropertyValue value : values.value())                     properties.put(value.name(), value.value());              TestPropertyValue value = AnnotationUtils.getAnnotation(testClass, TestPropertyValue.class);             if (value != null)                 properties.put(value.name(), value.value());              if (!properties.isEmpty()) {                 MapPropertySource source = new MapPropertySource(TestPropertyValues.class.getSimpleName(), properties);                 context.getEnvironment().getPropertySources().addFirst(source);             }         }     };      @Override     protected SmartContextLoader getAnnotationConfigLoader() {         return annotationConfigLoader;     } }  @Documented @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) public @interface TestPropertyValues {      TestPropertyValue[] value(); }  @Documented @Retention(RetentionPolicy.RUNTIME) public @interface TestPropertyValue {      String name();      String value(); } ```  Then it's used like this:  ```java @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(         loader = CustomTestContextLoader.class,         classes = {...}) @TestPropertyValues({     @TestPropertyValue(name = ""key"", value = ""value""),     @TestPropertyValue(name = ""foo"", value = ""bar"") }) public class MyTest { ... } ```  Can we have a better integrated equivalent of this in the default `DelegatingSmartContextLoader`, or wherever you feel appropriate, please? It would help us IMMENSELY.  Thank you.  ---  **Affects:** 3.2.7  **Issue Links:** - #14865 Allow `@PropertySource` to be specified on a test class - #13603 Allow the use of custom PropertySource annotations in `@Configuration` classes - #16667 Introduce `@TestPropertySource` support in the TestContext framework (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2014-01-31T16:17:10Z","2019-01-13T06:56:10Z"
"","15921","StandardEnvironment's system environment access produces warning with stacktrace on WebSphere [SPR-11297]","**[Sharath](https://jira.spring.io/secure/ViewProfile.jspa?name=sharath)** opened **[SPR-11297](https://jira.spring.io/browse/SPR-11297?redirect=false)** and commented  We are using Spring 3.2.5 on WAS7.0  We have the following beans but still we are getting error, can you suggest any alternate.                 Current Java 2 Security policy reported a potential violation of Java 2 Security Permission. Refer to the InfoCenter for further information.  Permission:      getenv.* : Access denied (java.lang.RuntimePermission getenv.*)  Code:      org.springframework.core.env.AbstractEnvironment  in  {file:/opt/httpd/root/apps/gdr3/ibm7/ccix-dev-ear/gdr3.war/WEB-INF/lib/spring-core-3.2.5.RELEASE.jar}  Stack Trace:  java.security.AccessControlException: Access denied (java.lang.RuntimePermission getenv.*) at java.security.AccessController.throwACE(AccessController.java:100) at java.security.AccessController.checkPermission(AccessController.java:174) at java.lang.SecurityManager.checkPermission(SecurityManager.java:544) at com.ibm.ws.security.core.SecurityManager.checkPermission(SecurityManager.java:206) at java.lang.System.getenv(System.java:688) at org.springframework.core.env.AbstractEnvironment.getSystemEnvironment(AbstractEnvironment.java:348) at org.springframework.core.env.StandardEnvironment.customizePropertySources(StandardEnvironment.java:79) at org.springframework.web.context.support.StandardServletEnvironment.customizePropertySources(StandardServletEnvironment.java:90) at org.springframework.core.env.AbstractEnvironment.\(AbstractEnvironment.java:114) at org.springframework.web.context.support.StandardServletEnvironment.\(StandardServletEnvironment.java:44) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.createEnvironment(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.context.support.AbstractApplicationContext.getEnvironment(AbstractApplicationContext.java:288) at org.springframework.context.support.AbstractRefreshableConfigApplicationContext.resolvePath(AbstractRefreshableConfigApplicationContext.java:122) at org.springframework.context.support.AbstractRefreshableConfigApplicationContext.setConfigLocations(AbstractRefreshableConfigApplicationContext.java:80) at org.springframework.context.support.AbstractRefreshableConfigApplicationContext.setConfigLocation(AbstractRefreshableConfigApplicationContext.java:68) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:386) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:294) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:112) at com.ibm.ws.webcontainer.webapp.WebApp.notifyServletContextCreated(WebApp.java:1718) at com.ibm.ws.webcontainer.webapp.WebApp.commonInitializationFinish(WebApp.java:385) at com.ibm.ws.webcontainer.webapp.WebAppImpl.initialize(WebAppImpl.java:299) at com.ibm.ws.webcontainer.webapp.WebGroupImpl.addWebApplication(WebGroupImpl.java:100) at com.ibm.ws.webcontainer.VirtualHostImpl.addWebApplication(VirtualHostImpl.java:166) at com.ibm.ws.webcontainer.WSWebContainer.addWebApp(WSWebContainer.java:732) at com.ibm.ws.webcontainer.WSWebContainer.addWebApplication(WSWebContainer.java:617) at com.ibm.ws.webcontainer.component.WebContainerImpl.install(WebContainerImpl.java:376) at com.ibm.ws.webcontainer.component.WebContainerImpl.start(WebContainerImpl.java:668) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1128) at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1319) at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:611) at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:944) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:741) at com.ibm.ws.runtime.component.ApplicationMgrImpl$3.run(ApplicationMgrImpl.java:2056) at com.ibm.ws.security.auth.ContextManagerImpl.runAs(ContextManagerImpl.java:5395) at com.ibm.ws.security.auth.ContextManagerImpl.runAsSystem(ContextManagerImpl.java:5483) at com.ibm.ws.security.core.SecurityContext.runAsSystem(SecurityContext.java:255) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:2061) at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:389) at com.ibm.ws.runtime.component.CompositionUnitImpl.start(CompositionUnitImpl.java:123) at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:332) at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.access$300(CompositionUnitMgrImpl.java:117) at com.ibm.ws.runtime.component.CompositionUnitMgrImpl$CUInitializer.run(CompositionUnitMgrImpl.java:899) at com.ibm.wsspi.runtime.component.WsComponentImpl$_AsynchInitializer.run(WsComponentImpl.java:496) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1656)  ---  **Affects:** 3.2.5  **Issue Links:** - #10974 Spring Expression Language creates systemProperties bean calling System.getProperties() which in enterprise shared containers is locked down - #13653 Improve the performance of BeanInfo lookups in CachedIntrospectionResults - #16013 PreparedStatement#getParameterMetaData() calls may trigger unwanted side effects - #16343 SpringProperties: the ClassLoader might be null, if class is loaded by the bootstrap class loader  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)  0 votes, 7 watchers","closed","in: core,","spring-projects-issues","2014-01-08T16:52:39Z","2019-01-11T18:37:43Z"
"","15934","Support for @Order at the @Bean method level [SPR-11310]","**[Shaozhen Ding](https://jira.spring.io/secure/ViewProfile.jspa?name=dsz0111@gmail.com)** opened **[SPR-11310](https://jira.spring.io/browse/SPR-11310?redirect=false)** and commented  This won't order the wired list. Since AnnotationAwareOrderComparator only scan the Type annotations instead of Method annotations.      @Bean     @Order(2)     public Store getStore2(){     	return new Store();     }          @Bean     @Order(1)     public Store getStore1(){     	return new Store();     }          @Bean         @Order(3)     public Store getStore3(){     	return new Store();     }  }      @Autowired     List stores;  ---  **Affects:** 4.0 GA  **Issue Links:** - #20761 Document common use cases for `@Order` vs `@Priority` vs `@DependsOn`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/001d0e734c3641b37de9cc38c526a41f9af8ed48, https://github.com/spring-projects/spring-framework/commit/c6d29f1a314c600c6b2d1cdfc3a21ba66523b037","closed","type: enhancement,","spring-projects-issues","2014-01-14T08:39:28Z","2019-01-13T06:56:28Z"
"","16106","BeanFactoryPostProcessor can have property injection through XML while would not work through autowired [SPR-11481]","**[Shaozhen Ding](https://jira.spring.io/secure/ViewProfile.jspa?name=datianshi)** opened **[SPR-11481](https://jira.spring.io/browse/SPR-11481?redirect=false)** and commented  I think my client abusing their BeanFactoryPostProcessor, while they are using some dependencies in their BeanFactoryPostProcessor. Here is the issue:  class B{ }  class A implements BeanDefinitionRegistryPostProcessor { B b;  ..Getter..  ..Setter..  public void postProcessBeanDefinitionRegistry(      AssertNotNull(b);  }  }  Through XML the assertion works \ \ \ \  But if through autowired on A, the assertion won't work.  `@Autowired` B b;  The reason I believe, autowired is using beanPostProcessor, so during initialization of this BeanFactoryPostProcessor all the beanPostProcessors have not been initialized. But in the xml implementation, the initialization of B was forced through BeanDefinitionValueResolver.  My point here is: Should we allow the users to have dependencies beans for beanFactoryPostProcessor, since it was trying to pre populate the bean definitions (While I think it is not appropriate). If yes, should we make this being consistency with Autowired?  -Shaozhen   --- No further details from [SPR-11481](https://jira.spring.io/browse/SPR-11481?redirect=false)","closed","type: enhancement,","spring-projects-issues","2014-02-25T04:31:44Z","2014-03-04T06:03:58Z"
"","16280","DefaultSubscriptionRegistry does not handle subscriptions in Ant-style  [SPR-11657]","**[Serhii Marchuk](https://jira.spring.io/secure/ViewProfile.jspa?name=mars.msv)** opened **[SPR-11657](https://jira.spring.io/browse/SPR-11657?redirect=false)** and commented  The DefaultSubscriptionRegistry does not handle subscriptions in ant-style, if it finds at least one point-to-point subscription.  Example: 1. First client subscribes to receive definite messages.    Example: destination:/topic/price  2 Second client subscribes to receive any messages. Example: destination:/topic/* Client will receive all messages except messages sent to /topic/price.  The root of the problem is in findSubscriptionsInternal method of DefaultSubscriptionRegistry.   ---  **Affects:** 4.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/63a868dafba7b91c9234ffbb3ea68666d27cd6af, https://github.com/spring-projects/spring-framework/commit/79de45b8055e543d86e948fef507d35082a29eb3, https://github.com/spring-projects/spring-framework/commit/563476f57c9602ad42508f6951555a0f57401aa0, https://github.com/spring-projects/spring-framework/commit/1054080b24d26ceb7d079a2a8089b062198d4223, https://github.com/spring-projects/spring-framework/commit/6a9b229249b9aeebc389d4cf1771e7411d5851fa, https://github.com/spring-projects/spring-framework/commit/c879796e0092a188fa54117639067cfb29a2e858  1 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2014-04-04T03:58:18Z","2014-05-01T01:36:43Z"
"","16228","@SubscribeMapping for broker destinations [SPR-11605]","**[Sergi Almar](https://jira.spring.io/secure/ViewProfile.jspa?name=salmar)** opened **[SPR-11605](https://jira.spring.io/browse/SPR-11605?redirect=false)** and commented  The `@SubscribeMapping` annotation allows application destinations subscriptions to be mapped to `@Controller` methods. There's no such thing for broker destinations.  Another alternative (even if it's not the same thing) would be creating an `ApplicationEvent` (like the new `SessionConnectEvent` and co) for broker destination subscriptions.    ---  **Affects:** 4.0.2","closed","status: declined,","spring-projects-issues","2014-03-26T05:04:14Z","2019-01-12T16:35:12Z"
"","16222","Support RECEIPT frame on disconnect [SPR-11599]","**[Sergi Almar](https://jira.spring.io/secure/ViewProfile.jspa?name=salmar)** opened **[SPR-11599](https://jira.spring.io/browse/SPR-11599?redirect=false)** and commented  The STOMP specification mentions that in order to do a [graceful shutdown](http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT), the client should send a `DISCONNECT` frame, wait for a `RECEIPT` frame and close the socket.  Currently, after sending a `DISCONNECT` no `RECEIPT` frame is received. RabbitMQ does send the `RECEIPT` frame on disconnect but it's not recevied on the client side.  Take also into account [connection lingering](http://stomp.github.io/stomp-specification-1.2.html#Connection_Lingering)  Additionally, the `DISCONNECT` frame should come with a `receipt` header, but stomp.js doesn't support passing headers on the disconnect method. Open issue [here](https://github.com/jmesnil/stomp-websocket/issues/57).   ---  **Affects:** 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7da3fb4ce6dc90048b2a3f661fa80f38bede8ed9","closed","type: enhancement,","spring-projects-issues","2014-03-25T12:06:48Z","2019-03-29T09:40:47Z"
"","16202","Add ApplicationEvents for WebSocket connection and disconnection [SPR-11578]","**[Sergi Almar](https://jira.spring.io/secure/ViewProfile.jspa?name=salmar)** opened **[SPR-11578](https://jira.spring.io/browse/SPR-11578?redirect=false)** and commented  Even if detecting WebSocket connections and disconnections is currently doable with `ChannelInterceptor` / `HandlerDecorator`, these require some extra logic and configuration. It would be useful to have a more event driven and decoupled solution with `ApplicationEvent` s like `WebSocketConnectEvent` and `WebSocketDisconnectEvent`   ---  **Affects:** 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/13da7057e6bed74ce9383c19c1c811a01d612c4e, https://github.com/spring-projects/spring-framework/commit/a247d5f2e8812250677c4f32a576b8676a3b2968","closed","type: enhancement,","spring-projects-issues","2014-03-18T16:42:31Z","2014-03-26T22:34:07Z"
"","16190","Pass WebSocket session attributes in HandshakeInterceptor and expose them to MessageMapping methods [SPR-11566]","**[Sergi Almar](https://jira.spring.io/secure/ViewProfile.jspa?name=salmar)** opened **[SPR-11566](https://jira.spring.io/browse/SPR-11566?redirect=false)** and commented  The HandshakeInterceptor allows passing attributes to the WebSocket session, these seem to be handshake specific attributes, it would be useful if those were WebSocket session attributes instead.  Additionally, it would be also useful to make these attributes available in the MessageMapping methods in the same fashion as request parameters in Spring MVC.  ---  **Affects:** 4.0.2  **Issue Links:** - #15929 Provide a websocket scope","closed","type: enhancement,","spring-projects-issues","2014-03-17T09:53:29Z","2019-01-11T21:35:01Z"
"","16178","Connection to STOMP broker is retried in a tight loop if an AMQP port is specified [SPR-11554]","**[Sergi Almar](https://jira.spring.io/secure/ViewProfile.jspa?name=salmar)** opened **[SPR-11554](https://jira.spring.io/browse/SPR-11554?redirect=false)** and commented  When specifying a wrong port as the relay port, connection is retried heavily and endlessly. This only happens when the port is open, for instance if you define the AMQP port instead of the STOMP port by mistake (or any other open port). This leads to the following logs:  ``` 13:57:23 [ringBuffer-ringbuffer-2] StompBrokerRelayMessageHandler - Established TCP connection to broker in session=stompRelaySystemSessionId 13:57:23 [reactor-tcp-io-6] StompEncoder - Encoded STOMP command=CONNECT headers={heart-beat=[10000,10000], host=[host], passcode=[pass], login=[user], accept-version=[1.1,1.2]} 13:57:23 [ringBuffer-ringbuffer-2] StompBrokerRelayMessageHandler - Established TCP connection to broker in session=stompRelaySystemSessionId 13:57:23 [reactor-tcp-io-3] StompEncoder - Encoded STOMP command=CONNECT headers={heart-beat=[10000,10000], host=[host], passcode=[pass], login=[user], accept-version=[1.1,1.2]} 13:57:23 [ringBuffer-ringbuffer-2] StompBrokerRelayMessageHandler - Established TCP connection to broker in session=stompRelaySystemSessionId 13:57:23 [reactor-tcp-io-4] StompEncoder - Encoded STOMP command=CONNECT headers={heart-beat=[10000,10000], host=[host], passcode=[pass], login=[user], accept-version=[1.1,1.2]} 13:57:23 [ringBuffer-ringbuffer-2] StompBrokerRelayMessageHandler - Established TCP connection to broker in session=stompRelaySystemSessionId 13:57:23 [reactor-tcp-io-5] StompEncoder - Encoded STOMP command=CONNECT headers={heart-beat=[10000,10000], host=[host], passcode=[pass], login=[user], accept-version=[1.1,1.2]} 13:57:23 [ringBuffer-ringbuffer-2] StompBrokerRelayMessageHandler - Established TCP connection to broker in session=stompRelaySystemSessionId 13:57:23 [reactor-tcp-io-6] StompEncoder - Encoded STOMP command=CONNECT headers={heart-beat=[10000,10000], host=[host], passcode=[pass], login=[user], accept-version=[1.1,1.2]} 13:57:23 [ringBuffer-ringbuffer-2] StompBrokerRelayMessageHandler - Established TCP connection to broker in session=stompRelaySystemSessionId 13:57:23 [reactor-tcp-io-3] StompEncoder - Encoded STOMP command=CONNECT headers={heart-beat=[10000,10000], host=[host], passcode=[pass], login=[user], accept-version=[1.1,1.2]} 13:57:23 [ringBuffer-ringbuffer-2] StompBrokerRelayMessageHandler - Established TCP connection to broker in session=stompRelaySystemSessionId 13:57:23 [reactor-tcp-io-4] StompEncoder - Encoded STOMP command=CONNECT headers={heart-beat=[10000,10000], host=[host], passcode=[pass], login=[user], accept-version=[1.1,1.2]} 13:57:23 [ringBuffer-ringbuffer-2] StompBrokerRelayMessageHandler - Established TCP connection to broker in session=stompRelaySystemSessionId 13:57:23 [reactor-tcp-io-5] StompEncoder - Encoded STOMP command=CONNECT headers={heart-beat=[10000,10000], host=[host], passcode=[pass], login=[user], accept-version=[1.1,1.2]} 13:57:23 [ringBuffer-ringbuffer-2] StompBrokerRelayMessageHandler - Established TCP connection to broker in session=stompRelaySystemSessionId 13:57:23 [reactor-tcp-io-6] StompEncoder - Encoded STOMP command=CONNECT headers={heart-beat=[10000,10000], host=[host], passcode=[pass], login=[user], accept-version=[1.1,1.2]} 13:57:23 [ringBuffer-ringbuffer-2] StompBrokerRelayMessageHandler - Established TCP connection to broker in session=stompRelaySystemSessionId 13:57:23 [reactor-tcp-io-3] StompEncoder - Encoded STOMP command=CONNECT headers={heart-beat=[10000,10000], host=[host], passcode=[pass], login=[user], accept-version=[1.1,1.2]} ```    ---  **Affects:** 4.0.2","closed","type: bug,","spring-projects-issues","2014-03-14T06:31:52Z","2014-03-26T22:34:05Z"
"","15728","Corrupted WebSocket messages by multi-threaded publishing to external clients [SPR-11102]","**[Sergey Shcherbakov](https://jira.spring.io/secure/ViewProfile.jspa?name=sshcherbakov)** opened **[SPR-11102](https://jira.spring.io/browse/SPR-11102?redirect=false)** and commented  I have an application which is running embedded Tomcat 8.0.0.RC3. There is one 'request' and one 'reply' messaging channel in my app. The 'reply' channel is piping messages in direction of external WebSocket clients and is backed by a single thread ThreadPoolExecutor. Afaics, this single thread is the one that performs actual writing to the socket and is the only one serving all external application WebSocket clients. If I expect many clients and many messages and I want to utilize the processor fully, a good idea would be to increase the number of threads that serve the 'reply' messaging channel. But that doesn't really work. A single connected WebSocket client which accepts messages that are being published by 4 threads I receive corrupted messages on the client side:  ``` 2013-11-19 17:37:04,242 14603  WARN [WebSocketClient@811955882-15] org.eclipse.jetty.websocket.common.Parser -                                                    org.eclipse.jetty.websocket.api.ProtocolException: CONTINUATION frame without prior !FIN at org.eclipse.jetty.websocket.common.Parser.parseFrame(Parser.java:366) ~[websocket-common-9.1.0.RC1.jar:9.1.0.RC1] at org.eclipse.jetty.websocket.common.Parser.parse(Parser.java:240) ~[websocket-common-9.1.0.RC1.jar:9.1.0.RC1] at org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.read(AbstractWebSocketConnection.java:597) [websocket-common-9.1.0.RC1.jar:9.1.0.RC1] at org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:504) [websocket-common-9.1.0.RC1.jar:9.1.0.RC1] ```  I'm using the Jetty 9.1.0.RC1 client for the tests (I also saw the same issue using its last GA version).  It looks like a synchronization issue at writing to the socket. One thread per client works fine but I don't find the way to arrange a one thread per WS client when there are several of them connected. I am using SubProtocolWebSocketHandler with StompProtocolHandler as default sub-protocol handler.  The simple synchronization around the WebSocketSession (I wrap StompProtocolHandler):  ```java ... 	@Override 	public void handleMessageToClient(WebSocketSession session, 			Message message) throws Exception { 		synchronized (session) { 			subProtocolHandler.handleMessageToClient(session, message); 		} 	} ```  fixes the issue and I don't see any corrupted messages on the client side even when the 'reply' messaging channel is backed by multiple threads.   ---  **Affects:** 4.0 RC1","closed","type: bug,","spring-projects-issues","2013-11-20T09:16:35Z","2013-12-03T15:15:35Z"
"","16124","CompoundClassLoader.loadClass is trying to load some framework class and comsuming all web container threads. [SPR-11499]","**[Saurabh Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=saurabhknigam)** opened **[SPR-11499](https://jira.spring.io/browse/SPR-11499?redirect=false)** and commented  deployed new version of application on 2/24 . Since then application performance degraded tremendously. Tivoli showing a very high active thread count causing no free thread for any incoming request. Thread dump showing most of the thread are consumed by com.ibm.ws.classloader.CompoundClassLoader.loadClass.  Restart of application clearing the threads and reinitiate thread pool but within 15- 20 minutes all thre thread reused again . Current resource allocation on JVM Thread Pool : 300 Heap size : 1.2GB DB connection : 300  Still the application is not able to recover from the high active thread counts.  Attached are the sample thread dump ( due to size limit) extracted during the high thread counts.over from the high active thread counts.  ---  **Affects:** 3.0.5  **Attachments:** - [threaddump1_02272014_1](https://jira.spring.io/secure/attachment/21794/threaddump1_02272014_1) (_1.94 MB_) - [threaddump1_02272014_3](https://jira.spring.io/secure/attachment/21795/threaddump1_02272014_3) (_2.34 MB_)  **Issue Links:** - #15968 Unnecessary class loading in AspectJ RuntimeTestWalker  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","in: core,","spring-projects-issues","2014-03-01T07:08:53Z","2019-01-11T21:21:51Z"
"","16082","Form input taglib property ""readonly"" in Spring 4.0.2 is not backward compatible with Spring 3.x [SPR-11456]","**[Sasa Skevin](https://jira.spring.io/secure/ViewProfile.jspa?name=ssasa)** opened **[SPR-11456](https://jira.spring.io/browse/SPR-11456?redirect=false)** and commented  After upgrading from Spring framework 3.x to 4.0.2 form input taglib property ""readonly"" does not work any more.  This is the code:  \[#macro formInput path id label path required=false help='' class='input-xxlarge' style='' placeholder='' readonly='false' autocomplete='off'] [@form.input path=path class=class id=id placeholder=placeholder readonly=readonly style=style autocomplete=autocomplete /]  And this is the error:  Caused by: java.lang.IllegalArgumentException at sun.reflect.GeneratedMethodAccessor87.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at freemarker.ext.jsp.JspTagModelBase.setupTag(JspTagModelBase.java:87) at freemarker.ext.jsp.TagTransformModel.getWriter(TagTransformModel.java:102) at freemarker.core.Environment.visitAndTransform(Environment.java:364) at freemarker.core.UnifiedCall.accept(UnifiedCall.java:140) at freemarker.core.Environment.visit(Environment.java:265) at freemarker.core.MixedContent.accept(MixedContent.java:93)  After exchanging readonly='false' for readonly=false (just removing the quotes) it works.   ---  **Affects:** 4.0.2","closed","status: declined,","spring-projects-issues","2014-02-20T06:26:46Z","2019-01-12T16:35:21Z"
"","16116","Doc: Tiles 3 and underscores in definition names [SPR-11491]","**[Sandeep Reddy T](https://jira.spring.io/secure/ViewProfile.jspa?name=reddy)** opened **[SPR-11491](https://jira.spring.io/browse/SPR-11491?redirect=false)** and commented  ```xml                    org.springframework.web.servlet.view.tiles3.TilesView                              /WEB-INF/tiles/common/tiles.xml           /WEB-INF/tiles/common/base_tiles.xml           /WEB-INF/tiles/common/person_tiles.xml           ```  In person_tiles.xml  ```xml                            ```  It throws below error javax.servlet.ServletException: Could not resolve view with name 'new_person' in servlet with name 'project'  But I tried with tiles 2.2 & spring 3.2.5 it works correctly. Even though we give as person_tiles or base_tiles.xml.  By changing the tilesConfigurer to the below it works:  ```xml                      /WEB-INF/tiles/common/tiles.xml         /WEB-INF/tiles/common/baseTiles.xml         /WEB-INF/tiles/common/personTiles.xml             ```    ---  **Affects:** 3.2.5, 4.0.2  **Reference URL:** http://stackoverflow.com/questions/22045560/spring-3-2-5-tiles-3-not-rendering-the-view  0 votes, 6 watchers","closed","type: task,","spring-projects-issues","2014-02-27T05:26:27Z","2019-01-11T21:21:31Z"
"","15550","Inject dependencies into @Configurable objects before readResolve() [SPR-10922]","**[Sam Couter](https://jira.spring.io/secure/ViewProfile.jspa?name=samc)** opened **[SPR-10922](https://jira.spring.io/browse/SPR-10922?redirect=false)** and commented  Using `AnnotationBeanConfigurerAspect`, dependencies are injected into `@Configurable` annotated objects after `readResolve` has been executed. In my use case, I serialise only the key value for my object and wish to use `readResolve` to replace the deserialised value with the equivalent bean from the Spring bean factory in the deserialising context.  To do this, I require injection of dependencies before `readResolve`.  My solution has been to create another aspect using `before` to advise `readResolve` instead of after. A more robust solution might add another attribute to `@Configurable` to control when injection occurs, similarly to the existing `preConstruction`.   --- No further details from [SPR-10922](https://jira.spring.io/browse/SPR-10922?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-09-16T15:15:15Z","2019-01-12T02:30:12Z"
"","16313","Cannot add script after setting scripts in ResourceDatabasePopulator [SPR-11691]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11691](https://jira.spring.io/browse/SPR-11691?redirect=false)** and commented  #### Status Quo  The `setScripts()` method in `ResourceDatabasePopulator` replaces the internal `scripts` array with a value returned from `Arrays.asList()` which is an unmodifiable List. Consequently, it is impossible to _add_ additional scripts to a `ResourceDatabasePopulator` after `setScripts()` has been invoked.  For example, the following test fails with an `UnsupportedOperationException`.  ``` public class ResourceDatabasePopulatorTests {  	private Resource script1 = resource(""script1""); 	private Resource script2 = resource(""script2""); 	private Resource script3 = resource(""script3"");  	@Test 	public void setScriptsAndThenAddScript() { 		ResourceDatabasePopulator databasePopulator = new ResourceDatabasePopulator(); 		databasePopulator.setScripts(script1, script2);  		// Throws UnsupportedOperationException 		databasePopulator.addScript(script3); 	}  	private Resource resource(String path) { 		return new ClassPathResource(path); 	}  } ```  ---  #### Deliverables  1. [x] Ensure that scripts can be added to a `ResourceDatabasePopulator` after the `setScripts()` method has been invoked.  ---  **Affects:** 3.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b4995f7e4f707da33434ecdafa6889a252ef7930","closed","type: enhancement,","spring-projects-issues","2014-04-13T05:59:18Z","2019-01-13T06:54:31Z"
"","16312","Assert preconditions in ResourceDatabasePopulator [SPR-11690]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11690](https://jira.spring.io/browse/SPR-11690?redirect=false)** and commented  #### Status Quo  `ResourceDatabasePopulator` currently does not assert any preconditions for constructor and method arguments. Consequently,  errors will not be encountered until the populator is executed.  ---  #### Deliverables  1. [x] Ensure that preconditions for constructor and method arguments are asserted immediately.  ---  **Affects:** 4.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/84f678a06bb787641f492633552fa0de5e506d17","closed","type: enhancement,","spring-projects-issues","2014-04-13T05:42:48Z","2019-01-13T21:00:16Z"
"","16310","Support EOF as statement separator in SQL scripts [SPR-11687]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11687](https://jira.spring.io/browse/SPR-11687?redirect=false)** and commented  #### Status Quo  Prior to Spring Framework 4.0.3, it was possible to supply a _bogus_ statement `separator` (i.e., a separator string that does not exist in the configured SQL scripts) to `ResourceDatabasePopulator` with the effect that the entire contents of each script file would be interpreted as a single SQL statement. This undocumented _feature_ was never intentional; however, some developers came to rely on it.  Changes made in conjunction with #14165 and #16184 cause such scenarios to no longer work. Thus, it would be beneficial to provide first-class support for treating the end of file (EOF) as a valid statement separator in SQL scripts that contain a single SQL statement spread across multiple lines without a trailing statement separator.  ---  #### Deliverables  1. [x] Introduce explicit support for the EOF marker as a statement separator when executing SQL scripts.  ---  **Affects:** 4.0.3  **Issue Links:** - #16184 SQL Scripts with newline separators no longer work (_**""depends on""**_) - #14165 Support multi-line SQL comments in ResourceDatabasePopulator and JdbcTestUtils (_**""depends on""**_) - #20450 H2 aliases are not supported in SQL ScriptUtils - #13459 Support per-script statement separator configuration for SQL scripts - #17970 Support triggers & stored procedures alongside standard statements in SQL scripts  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9230b38aea41316d78dc2f1bb206ce7a92b9ca56, https://github.com/spring-projects/spring-framework/commit/1753f5d1cab1b6b7226f3b655482dd43c111e94f, https://github.com/spring-projects/spring-framework/commit/03ae8eeb95210c8bbed3a05bfb06b644cbec0df2, https://github.com/spring-projects/spring-framework/commit/cc0ae3a881dde5910ecc340fa20c2365dd7474fa","closed","type: enhancement,","spring-projects-issues","2014-04-11T07:22:42Z","2019-01-13T21:00:18Z"
"","16306","Document TestContext bootstrap strategy in the reference manual [SPR-11683]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11683](https://jira.spring.io/browse/SPR-11683?redirect=false)** and commented  #### Background  #14588 introduced a new bootstrap strategy in the TestContext framework.  #### Deliverables  Update the reference manual regarding changes introduced in #14588:  1. [x] Document `@BootstrapWith` in the general annotations section. 2. [x] Document `TestContextBootstrapper` and related concepts in the TCF section.  ---  **Affects:** 4.1 RC1  **Issue Links:** - #14588 Introduce bootstrap strategy in the TestContext framework (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/57ca8f534792fdd0c5e0591c41f0806d0924b650","closed","type: documentation,","spring-projects-issues","2014-04-10T09:04:36Z","2019-01-11T21:01:47Z"
"","16305","Deprecate support for custom, default ContextLoader class name in the TestContext framework [SPR-11682]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11682](https://jira.spring.io/browse/SPR-11682?redirect=false)** and commented  #### Overview  #14588 introduces a new bootstrap strategy for the TestContext framework. Thus as of Spring Framework 4.1,  a `TestContextBootstrapper` will assume the responsibility for determining what `ContextLoader` to use as the default. Consequently, previous support for supplying the class name for a _custom, default_ `ContextLoader` will no longer be applicable.  #### Deliverables  Officially deprecate support for custom, default ContextLoader class names in the 4.0.x line for the following: 1. [x] The `TestContextManager(Class, String)` constructor 2. [x] The `getDefaultContextLoaderClassName(Class)` method in `SpringJUnit4ClassRunner`  ---  **Affects:** 4.0 GA  **Issue Links:** - #14588 Introduce bootstrap strategy in the TestContext framework (_**""is depended on by""**_) - #16302 Deprecate TestContextManager.getDefaultTestExecutionListenerClasses()","closed","type: task,","spring-projects-issues","2014-04-10T06:47:17Z","2019-01-11T21:01:43Z"
"","16302","Deprecate TestContextManager.getDefaultTestExecutionListenerClasses() [SPR-11679]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11679](https://jira.spring.io/browse/SPR-11679?redirect=false)** and commented  #### Overview  #14588 will introduce a new bootstrap strategy for the TestContext framework in Spring Framework 4.1 effectively making `TestContextManager.getDefaultTestExecutionListenerClasses()` no longer applicable.  #### Deliverables  1. [x] Officially deprecate `TestContextManager.getDefaultTestExecutionListenerClasses()` in the 4.0.x line  ---  **Affects:** 4.0 GA  **Issue Links:** - #14588 Introduce bootstrap strategy in the TestContext framework (_**""is depended on by""**_) - #16305 Deprecate support for custom, default ContextLoader class name in the TestContext framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/428aee5b727e9f0fb2a7e4dd48290e64d7c70460","closed","type: task,","spring-projects-issues","2014-04-09T13:12:13Z","2019-01-11T21:01:13Z"
"","16273","Use unconstrained quotes instead of backticks in the reference manual [SPR-11650]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11650](https://jira.spring.io/browse/SPR-11650?redirect=false)** and commented  #### Status Quo  There are numerous places in the reference manual, where we see output similar to the following.  > `BeanDefinition`s with the `ApplicationContext`  This is caused by the fact that AsciiDoc does not support letters directly adjacent to text formatted using backticks (e.g., an ""s"" immediately following `BeanDefintion`).  ---  #### Deliverables  1. [x] Replace all occurrences of ``xyz`s` with `\+\+xyz\+\+s` in the reference manual. 2. [x] Correct natural English pluralization of Java code elements in the reference manual where appropriate.    - For example `@Controllers` and `@Components` should be replaced with `@Controller` and `@Component`, each  with a trailing ""s"".  ---  #### Further Resources  - [Formatted Text](http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/#formatted-text) (AsciiDoc Quick Reference) - [Mild punctuation, strong impact](http://asciidoctor.org/docs/asciidoc-writers-guide/#mild-punctuation-strong-impact) (AsciiDoc Writer's Guide) - Explanation from Dan Allen on [Google Groups](https://groups.google.com/d/msg/asciidoc/c3p1sWSzXGA/h3CgZiHYGIAJ):  ``` In this case, what you are looking for is called ""unconstrained"" quoted text (in AsciiDoc, ""quoted text"" is just a way of  saying ""formatted text"").  Unconstrained quotes may appear anywhere in the text, such as around a segment of a word. They typically consist  of two characters.  Here's how you would use unconstrained quotes  to get the monospace formatting you need:  ++Int++s  That will output:  Ints  You'll notice that I used pluses instead of backticks here. Unless the formatted content needs to be escaped  from AsciiDoc substitutions, it's best to use pluses for monospaced text. Backticks work by taking the content  out of the flow of the text while the text is processed, then reinserting the text back in at the placeholder  positions. The pluses merely wrap monospace tags (e.g., ) around the text (in the same way the * wraps  the text in  and _ wraps the text in ).  If you do need to escape the text (for instance if it contains something that looks like an attribute reference),  using double backticks won't work. Instead, you need to use the double dollar (escaped text without applying  special formatting to the result) combined with the unconstrained monospace quotes:  ++$${Int}$$++s  Which would output:  {Int}s  But, those situations are pretty rare :)  -Dan ```  ---  **Affects:** 4.0.3  **Issue Links:** - #18927 Migrate to Asciidoctor 1.5 syntax","closed","type: documentation,","spring-projects-issues","2014-04-02T11:02:57Z","2019-01-13T06:54:42Z"
"","16253","Fix broken tests in QuartzSupportTests [SPR-11630]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11630](https://jira.spring.io/browse/SPR-11630?redirect=false)** and commented  #### Status Quo  Changes made in #15887 broke several tests in `QuartzSupportTests`.  Specifically, all Quartz tests failing during [Performance Builds](https://build.spring.io/browse/SPR-PERF-259#changesSummary) are not compatible with Quartz 2.  #### Deliverables  1. [x] Refactor tests and related configuration for `QuartzSupportTests` to ensure that all tests pass against Quartz 2.1.7.  ---  **Affects:** 4.1 RC1  **Issue Links:** - #15887 Require Jackson 2.1+, Quartz 2.1.4+, EhCache 2.5+ (_**""depends on""**_) - #17219 Fix broken schedulerWithHsqlDataSource() test in QuartzSupportTests  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/906321dcdd0939824cfc9b31fb769defc150756e","closed","in: core,","spring-projects-issues","2014-03-30T08:33:48Z","2019-01-11T21:06:32Z"
"","16252","Introduce execute(DataSource) in ResourceDatabasePopulator [SPR-11629]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11629](https://jira.spring.io/browse/SPR-11629?redirect=false)** and commented  #### Status Quo  `ResourceDatabasePopulator` implements the `populate(Connection)` method defined by the `DatabasePopulator` API; however, this method requires that the caller manage the `Connection` which can cause undo burden on developers in typical usage scenarios.  `DatabasePopulatorUtils` provides an `execute(DatabasePopulator, DataSource)` method to address the aforementioned burden, but this requires use of an additional utility class.  #### Deliverables  1. [ ] Introduce an `execute(DataSource)` method in `ResourceDatabasePopulator` to complement the existing `populate(Connection)` method and simplify common use cases.    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5d049e0de898a12386282fa4f8df7ca1454923e9","closed","type: enhancement,","spring-projects-issues","2014-03-30T07:58:57Z","2014-07-18T10:16:39Z"
"","16249","Servlet mocks are not reinjected into test instance between TestNG test methods [SPR-11626]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11626](https://jira.spring.io/browse/SPR-11626?redirect=false)** and commented  #### Status Quo  When executing TestNG-based integration tests that subclass `AbstractTestNGSpringContextTests` and are annotated with `@WebAppConfiguration`, if the `ServletTestExecutionListener` resets the request attributes stored in the `RequestContextHolder` after a test method, then any injected Servlet API mocks that are managed by the listener (e.g., `MockHttpServletRequest`, `MockHttpServletResponse`, and `ServletWebRequest`) will continue to hold values from the first such test method.  The net effect is that subsequent web tests will not have access to the current mocks.  See the referenced discussion on Stack Overflow for an example of a failing test case.  ---  #### Analysis  The reason for this behavior is that `ServletTestExecutionListener` resets the request attributes after _each_ test method, but `DependencyInjectionTestExecutionListener` does not re-inject dependencies before each test method (at least not _by default_). When a second test method is executed, an injected `ServletRequest` field will still reference the `MockHttpServletRequest` that was created for the previous test method; whereas, `ServletTestExecutionListener` creates a new instance of `MockHttpServletRequest` for each test method and sets it in the request attributes. Thus, the injected request and the one stored in the `RequestContextHolder` are only the same for the first test method that executes in TestNG.  **Note**: this bug _only_ applies to TestNG tests; JUnit-based tests are not affected by this.  ---  #### Temporary Work-Arounds  If you need a work-around before this fix is available, you have two options.  You can annotate the affected test methods with `@DirtiesContext` (or annotate your test class with `@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD))`. This will allow your tests to pass as you expect. The use of `@DirtiesContext` will make Spring close your test `ApplicationContext` after each test method, and this will likely have a negative impact on the speed of your tests; however, as of Spring 3.2.8 and 4.0.3, this is the only non-custom solution.  The second option is a more efficient work-around. Just define this custom `TestExecutionListener` in your project:  ``` public class AlwaysReinjectDependenciesTestExecutionListener extends AbstractTestExecutionListener {    public void afterTestMethod(TestContext testContext) throws Exception {     testContext.setAttribute(       DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE,       Boolean.TRUE);     } } ```  And then annotate your test class like this:  ``` @TestExecutionListeners(AlwaysReinjectDependenciesTestExecutionListener.class) ```  That should clear up any issues _and_ keep your test suite running quickly.  ---  #### Deliverables  1. [x] Ensure that Servlet mocks managed by the `ServletTestExecutionListener` are re-injected into test instances between TestNG methods, if the `RequestContextHolder` is reset.  ---  **Affects:** 3.2 GA  **Reference URL:** http://stackoverflow.com/questions/22712325/multiple-tests-with-autowired-mockhttpservletrequest-not-working  **Issue Links:** - #15771 ServletTestExecutionListener breaks old code  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: bug,","spring-projects-issues","2014-03-29T12:47:39Z","2019-01-13T06:54:50Z"
"","16221","Favor more locally declared composed annotations over inherited annotations [SPR-11598]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11598](https://jira.spring.io/browse/SPR-11598?redirect=false)** and commented  #### Background  This issue picks up where #16100 left off.  ---  #### Status Quo  The implementations of `AnnotatedElementUtils` and (_potentially_) Spring's ASM-based annotation processing currently favor _inherited_ annotations and _inherited_ composed annotations over composed annotations that are declared closer to the starting class passed to `getAnnotationAttributes()`, `getAllAnnotationAttributes()`, `isAnnotated()`, etc.  See the examples and related discussion in #16100 for details.  ---  #### Deliverables  1. [x] Determine which use cases require special treatment with regard to annotation inheritance.    - Known cases: `@Profile` and `@Conditional` 2. [ ] Reinstate the changes originally introduced in `AnnotatedElementUtils` for #16100 (i.e., set the `searchClassHierarchy` to `true` for all invocations of the internal `process()` method).    - Search for #16221 in source code for TODOs. 3. [ ] Introduce special handling for the known special cases determined in deliverable #1, in order to ensure proper backwards compatibility.  ---  **Affects:** 4.0 GA  **Issue Links:** - #16100 Favor more locally declared composed annotations over inherited annotations in AnnotationUtils (_**""depends on""**_) - #17261 `@TestExecutionListeners` is not fully supported as a meta-annotation (_**""is duplicated by""**_) - #15466 `@Conditional` on superclass is ignored - #16136 Introduce a comprehensive programming model for meta-annotation support - #18321 ActiveProfiles not included when using a custom annotation. - #16219 Annotations on superclasses are detected by StandardAnnotationMetadata - #17335 AnnotatedElementUtils fails to find annotations on abstract, bridge, or interface methods - #17346 Favor more locally declared composed annotations over inherited annotations in the TestContext framework","closed","type: enhancement,","spring-projects-issues","2014-03-25T11:32:24Z","2019-01-13T06:54:58Z"
"","16198","Support meta-annotation attribute overrides in ASM-based annotation processing [SPR-11574]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11574](https://jira.spring.io/browse/SPR-11574?redirect=false)** and commented  #### Status Quo  Recent releases of the Spring Framework have introduced support for meta-annotation attribute overrides in custom _composed annotations_. This support works as expected with reflection-based annotation processing; however, Spring's ASM-based support for annotation processing completely ignores meta-annotation attribute overrides.  ---  #### Analysis  By comparing the implementations of `getAnnotationAttributes(String, boolean)` in `StandardAnnotationMetadata` (reflection) and `AnnotationMetadataReadingVisitor` (ASM), we see that `StandardAnnotationMetadata` delegates to `AnnotatedElementUtils` which properly supports meta-annotation attribute overrides. Whereas, `AnnotationMetadataReadingVisitor` performs a simple look-up in a local (linked) hash map with complete disregard for attribute overrides.  ---  #### Deliverables  1. [x] Refactor `AnnotationMetadataReadingVisitor` so that Spring's ASM-based annotation processing supports meta-annotation attribute overrides on par with the support already provided for reflection-based processing in `AnnotatedElementUtils`.    - See _TODO_ comments in `ConfigurationClassPostProcessorTests`.  ---  **Affects:** 4.0 GA  **Issue Links:** - #16181 Support Class meta-annotation attributes with ASM-based annotation processing (_**""depends on""**_) - #17234 AnnotationTypeFilter not finding java.lang annotations as meta annotations - #16272 AnnotationReadingVisitorUtils.getMergedAnnotationAttributes() overrides values it should not - #16332 AnnotationReadingVisitorUtils.getMergedAnnotationAttributes() mutates the map argument - #16331 Consider not overriding meta-annotation attributes if empty","closed","in: core,","spring-projects-issues","2014-03-18T10:27:19Z","2019-01-13T21:00:44Z"
"","16188","Introduce SQL script exception hierarchy [SPR-11564]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11564](https://jira.spring.io/browse/SPR-11564?redirect=false)** and commented  #### Status Quo  The `org.springframework.jdbc.datasource.init` package contains several exceptions related to reading, parsing, and executing SQL scripts; however, each of these exceptions extends `RuntimeException`. Thus there is no clean way to catch and handle all types of script-related exceptions.  As a side effect of refactoring, #14165 already unified the exception hierarchy within `org.springframework.jdbc.datasource.init` package by introducing  a common `ScriptException` base class that extends `RuntimeException`, but this doesn't go far enough. `ScriptException` should actually extend `DataAccessException` to allow callers to handle all data access related exceptions in a single `catch` block.  #### Deliverables  1. [x] Refactor `ScriptException` so that it extends `DataAccessException`. 2. [x] Favor unchecked `ScriptExceptions` over checked `SQLExceptions` whenever feasible.  ---  **Affects:** 4.0.2  **Issue Links:** - #14165 Support multi-line SQL comments in ResourceDatabasePopulator and JdbcTestUtils  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fbd25467c47fcda1e4d500e1cc3ede3d8ca7f61e, https://github.com/spring-projects/spring-framework/commit/92eb99a5abaaf43f4fddeaf00020dad2f3dd73eb","closed","type: enhancement,","spring-projects-issues","2014-03-17T03:55:17Z","2019-01-11T21:34:55Z"
"","16144","Support custom comment prefix in JdbcTestUtils.executeSqlScript() [SPR-11519]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11519](https://jira.spring.io/browse/SPR-11519?redirect=false)** and commented  #### Status Quo  `JdbcTestUtils.readScript(LineNumberReader, String)` already allows one to supply a custom `commentPrefix`. However, there is currently no variant of `executeSqlScript()` that allows you to provide the `commentPrefix`. Consequently, there is no way to execute a script and specify a custom comment prefix (e.g., ""//"" instead of ""--"").  #### Deliverables  1. Introduce overloaded versions of `executeSqlScript()` in `JdbcTestUtils` that allow one to supply a custom comment prefix.  ---  **Affects:** 4.0 GA  **Issue Links:** - #14165 Support multi-line SQL comments in ResourceDatabasePopulator and JdbcTestUtils","closed","type: enhancement,","spring-projects-issues","2014-03-05T15:45:05Z","2019-01-11T21:38:28Z"
"","16140","Document Spring Annotation Programming Model in the Wiki [SPR-11515]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11515](https://jira.spring.io/browse/SPR-11515?redirect=false)** and commented  #### Status Quo  Over the past several releases, the Spring Framework has continually enhanced its support for meta-annotations and custom composed annotations, potentially with meta-annotation attribute overrides. However, the programming model is not clearly documented in the reference manual. Furthermore, new features for annotation attribute aliases and meta-annotation support have been introduced in 4.2, and these will need to be clearly documented as well.  ---  #### Deliverables  In the Spring Framework Wiki, introduce a new page covering all features of Spring's support for meta-annotations, including but not limited to the following.  1. [ ] Document the general search algorithm(s) for annotations and meta-annotations on classes, interfaces, methods, and annotations.    - What happens if an annotation is _present_ on an element both locally and as a meta-annotation?    - How does the presence of `@Inherited` on an annotation (including custom composed annotations) affect the search algorithm?      - See #16100. 2. [ ] Document support for annotation attribute aliases configured via `@AliasFor`.    - How does one declare that an attribute is an alias for another attribute within the same annotation?    - What happens if an attribute _and_ its alias are declared in an annotation instance (with the same value or with different values)?      - The presumed behavior is that an `AnnotationConfigurationException` will be thrown.      - See #16137.    - See #16020. 3. [ ] Document support for _composed annotations_. 4. [ ] Document support for meta-annotation attribute overrides in composed annotations.    - Document the algorithm used when looking up attributes, specifically explaining:      - implicit mapping based on naming convention (i.e., composed annotation declares an attribute with the exact same name and type as declared in the _overridden_ meta-annotation)      - explicit mapping using the annotation-based mechanism introduced in #16138    - What happens if an attribute _and_ one of its aliases are declared somewhere within the annotation _hierarchy_? Which one takes precedence?    - In general, how are conflicts involving annotation attributes resolved? 5. [ ] Document the special handling of the `value` attribute for `@Component` and `@Qualifier`, or cross reference existing documentation as appropriate.  ---  #### Annotations Using `@AliasFor` as of Spring Framework 4.2  - `org.springframework.cache.annotation.Cacheable` - `org.springframework.cache.annotation.CacheEvict` - `org.springframework.cache.annotation.CachePut` - `org.springframework.context.annotation.ComponentScan.Filter` - `org.springframework.context.annotation.ComponentScan` - `org.springframework.context.annotation.ImportResource` - `org.springframework.context.annotation.Scope` - `org.springframework.context.event.EventListener` - `org.springframework.jmx.export.annotation.ManagedResource` - `org.springframework.messaging.handler.annotation.Header` - `org.springframework.messaging.handler.annotation.Payload` - `org.springframework.messaging.simp.annotation.SendToUser` - `org.springframework.test.context.ActiveProfiles` - `org.springframework.test.context.ContextConfiguration` - `org.springframework.test.context.jdbc.Sql` - `org.springframework.test.context.TestExecutionListeners` - `org.springframework.test.context.TestPropertySource` - `org.springframework.transaction.annotation.Transactional` - `org.springframework.transaction.event.TransactionalEventListener` - `org.springframework.web.bind.annotation.ControllerAdvice` - `org.springframework.web.bind.annotation.CookieValue` - `org.springframework.web.bind.annotation.CrossOrigin` - `org.springframework.web.bind.annotation.MatrixVariable` - `org.springframework.web.bind.annotation.RequestHeader` - `org.springframework.web.bind.annotation.RequestMapping` - `org.springframework.web.bind.annotation.RequestParam` - `org.springframework.web.bind.annotation.RequestPart` - `org.springframework.web.bind.annotation.ResponseStatus` - `org.springframework.web.bind.annotation.SessionAttributes` - `org.springframework.web.portlet.bind.annotation.ActionMapping` - `org.springframework.web.portlet.bind.annotation.RenderMapping`  ---  **Affects:** 4.0 GA  **Issue Links:** - #16137 Introduce unified support for declaring and looking up annotation attribute aliases (_**""depends on""**_) - #16138 Introduce support for explicit annotation attribute overrides (_**""depends on""**_) - #16020 Introduce aliases for 'value' annotation attributes (_**""depends on""**_) - #18022 Introduce predefined composed annotations in core Spring - #16136 Introduce a comprehensive programming model for meta-annotation support - #18020 Use AnnotatedElementUtils instead of AnnotationUtils wherever feasible - #21117 Update Spring Annotation Programming Model to reflect status quo  0 votes, 6 watchers","open","type: documentation,","spring-projects-issues","2014-03-04T09:08:57Z","2019-01-15T11:28:00Z"
"","16139","Document and test status quo for AnnotatedElementUtils [SPR-11514]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11514](https://jira.spring.io/browse/SPR-11514?redirect=false)** and commented  #### Status Quo  The public methods and internal algorithms in `AnnotatedElementUtils` are currently poorly documented or not documented at all. Furthermore, there are practically no regression tests in place to verify the current behavior.  #### Deliverables  1. [x] Document ""get vs. find"" semantics in the class-level Javadoc as well as for each public method. 2. [x] Document all public methods in `AnnotatedElementUtils`. 3. [x] Document internal search algorithms within `AnnotatedElementUtils` and rename methods, variables, etc. as necessary to make the intent clear. 4. [x] Test all public methods in `AnnotatedElementUtils`.  ---  **Affects:** 4.0 GA  **Issue Links:** - #17533 Document meta-annotation support in AnnotationUtils - #16136 Introduce a comprehensive programming model for meta-annotation support","closed","type: enhancement,","spring-projects-issues","2014-03-04T09:03:49Z","2019-01-11T21:38:14Z"
"","16138","Introduce support for explicit annotation attribute overrides [SPR-11513]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11513](https://jira.spring.io/browse/SPR-11513?redirect=false)** and commented  #### Status Quo  The Spring Framework provides support for meta-annotation attribute overrides in custom _composed annotations_. However, as of Spring 4.0, such overrides are only supported for attributes with names other than `value`, and the _overriding_ attribute must have the exact same name and type as the attribute it overrides.  If multiple meta-annotations are used to compose the custom annotation, and if these meta-annotations declare attributes of the same name and type (e.g., `String name() default """";`), then there is a conflict. In such scenarios:  1. It is impossible to know which attribute is being overridden.    - The attribute in the composed annotation effectively overrides **all** attributes of the same name and type within the annotation _hierarchy_. 2. It is impossible to specify different overriding values for attributes with the same name.  Furthermore, it is currently impossible to override a `value` attribute from a meta-annotation.  ---  #### Deliverables  1. [ ] Introduce a new annotation that indicates the name of the attribute being overridden as well as the annotation type.    - See proposals below.    - [x] An alternative would be to reuse the `@AliasFor` annotation introduced in #16137.    - See also the [@OverridesAttribute](http://docs.jboss.org/hibernate/beanvalidation/spec/1.0/api/javax/validation/OverridesAttribute.html) annotation from the Java Bean Validation spec. 2. [x] Revise the search algorithms in `AnnotationUtils` and `AnnotatedElementUtils` so that they honor this new annotation.  ---  #### Proposals for Annotation Name  - `@OverridesMeta` - `@MetaAnnotationAttribute` - `@AnnotationAttributeMapping`  ---  #### Example: Overriding Multiple `value` Attributes  The following example demonstrates how to:  1. Override a `value` attribute 2. Override attributes from multiple meta-annotations with the same attribute name (in this case `value`)  ```java @Async @Transactional public @interface AsyncTransactional {      /**      * Qualifier for the name of the TaskExecutor.      */     @OverridesMeta(annotation = Async.class, attribute = ""value"")      String taskExecutor();      /**      * Qualifier for the name of the PlatformTransactionManager.      */     @OverridesMeta(annotation = Transactional.class, attribute = ""value"")      String transactionManager();  } ```  ```java @AsyncTransactional(taskExecutor = ""userTaskExecutor"", transactionManager = ""txMgr"") @Service public class UserService {     // ... } ```  ---  #### Example: Overriding Attribute With Custom Name  ```java @Scope(""request"") @Component public @interface RequestScopedWebComponent {      /**      * Proxy mode.      */     @OverridesMeta(annotation = Scope.class, attribute = ""proxyMode"")      ScopedProxyMode mode() default ScopedProxyMode.TARGET_CLASS;  } ```  ```java @RequestScopedWebComponent(mode = ScopedProxyMode.INTERFACES) public class ProductionWebComponent implements WebComponent {     // ... } ```  ---  **Affects:** 4.0 GA  **Issue Links:** - #16140 Document Spring Annotation Programming Model in the Wiki (_**""is depended on by""**_) - #16137 Introduce unified support for declaring and looking up annotation attribute aliases - #16136 Introduce a comprehensive programming model for meta-annotation support - #17649 SynthesizedAnnotation must be public - #17659 Introduce support for synthesizing AnnotationAttributes into an annotation - #16020 Introduce aliases for 'value' annotation attributes","closed","type: enhancement,","spring-projects-issues","2014-03-04T08:44:05Z","2019-01-13T06:55:20Z"
"","16137","Introduce unified support for declaring and looking up annotation attribute aliases [SPR-11512]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11512](https://jira.spring.io/browse/SPR-11512?redirect=false)** and commented  #### Status Quo  Limited support for annotation attribute aliases already exists in the Spring Framework but is scattered across various modules. Currently, the following annotations are known to support aliases:  - `@ManagedResource` - `@ActiveProfiles` - `@ContextConfiguration` - `@Sql` - `@TestExecutionListeners` - `@TestPropertySource` - `@ControllerAdvice`  ---  #### Goal  The goal of this issue is to introduce unified support for declaring and looking up annotation attribute aliases (within a given annotation).  ---  #### Deliverables  All annotations introduced in conjunction with this issue must reside in the `org.springframework.core.annotation` package.  1. [x] Introduce an annotation that can be declared on annotation attributes to indicate that the given attribute is an _alias_ for another attribute of the same type within the same annotation class.    - Proposed name: `@AliasFor` 2. [ ] Consider introducing another annotation to be used on the _aliased_ attribute itself in order to provide a two-way link between all such aliases.    - Proposed name: `@AliasedBy` 3. [x] Extract code from the TestContext framework that is responsible for handling the look-up of annotation aliases and incorporate this code in a generic fashion in `AnnotationUtils` and `AnnotatedElementUtils` as appropriate.    - This new look-up mechanism must be based on the annotation introduced in deliverable #1.    - If multiple values for an _aliased_ attribute are present in a declared annotation, an `AnnotationConfigurationException` must be thrown indicating that only one attribute for an aliased attribute may be specified in a concrete instance of the given annotation.    - See also the current implementations for attribute aliases related to `@ControllerAdvice` and `@ManagedResource`. 4. [x] Migrate all existing code that supports attribute aliases to use this new mechanism.  ---  #### Example: Modified `@ContextConfiguration` Declaration  The following demonstrates how `@ContextConfiguration` could be rewritten to take advantage of the functionality proposed by this issue.  ```java public @interface ContextConfiguration {      @AliasedBy(""locations"")     String[] value() default {};      @AliasFor(""value"")     String[] locations() default {};      // ... } ```  ---  **Affects:** 4.0 GA  **Issue Links:** - #16901 Custom `@RequestMapping` annotations (_**""is depended on by""**_) - #16140 Document Spring Annotation Programming Model in the Wiki (_**""is depended on by""**_) - #16020 Introduce aliases for 'value' annotation attributes (_**""is depended on by""**_) - #17656 Implement toString() for synthesized annotations (_**""is depended on by""**_) - #17657 Implement equals() for synthesized annotations (_**""is depended on by""**_) - #17658 Implement hashCode() for synthesized annotations (_**""is depended on by""**_) - #17879 Introduce 'value' alias for 'attribute' in `@AliasFor` (_**""is depended on by""**_) - #17649 SynthesizedAnnotation must be public - #16138 Introduce support for explicit annotation attribute overrides - #17659 Introduce support for synthesizing AnnotationAttributes into an annotation - #16020 Introduce aliases for 'value' annotation attributes","closed","type: enhancement,","spring-projects-issues","2014-03-04T08:43:01Z","2019-01-13T06:55:22Z"
"","16136","Introduce a comprehensive programming model for meta-annotation support [SPR-11511]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11511](https://jira.spring.io/browse/SPR-11511?redirect=false)** and commented  Support for meta-annotations in the framework has been greatly improved over the last several major releases of Spring; however, there is still room for improvement with regard to aliases for `value` attributes as well as overriding of meta-annotation attributes in custom composed annotations.  This issue serves as an umbrella issue for all work related to delivering a comprehensive programming model for meta-annotations in the Spring Framework.  See sub-tasks and linked issues for details on individual deliverables.  ---  **Affects:** 4.0 GA  **Issue Links:** - #16138 Introduce support for explicit annotation attribute overrides - #17659 Introduce support for synthesizing AnnotationAttributes into an annotation - #16901 Custom `@RequestMapping` annotations - #16140 Document Spring Annotation Programming Model in the Wiki - #16020 Introduce aliases for 'value' annotation attributes - #16139 Document and test status quo for AnnotatedElementUtils - #16221 Favor more locally declared composed annotations over inherited annotations  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2014-03-04T08:39:42Z","2019-01-13T06:55:24Z"
"","16134","Aggregate test reports for JUnit and TestNG in spring-test [SPR-11509]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11509](https://jira.spring.io/browse/SPR-11509?redirect=false)** and commented  #### Status Quo  The current Gradle build configuration for the `spring-test` module declares two separate test tasks: `test` for JUnit and `testNG` for TestNG. Since the `test` task depends on the `testNG` task, the test report generation for JUnit tests currently overwrites the test report for TestNG tests. As a consequence, the results of TestNG tests never show up in the generated HTML test report.  #### Deliverables  1. [x] Configure the Gradle build so that JUnit and TestNG reports are aggregated.    ---  **Affects:** 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fa442244302188695f11b45589aa69c6785a7c57","closed","type: task,","spring-projects-issues","2014-03-04T04:06:47Z","2014-03-26T22:34:02Z"
"","16108","Avoid unnecessary inspection of meta-annotations on Java annotations [SPR-11483]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11483](https://jira.spring.io/browse/SPR-11483?redirect=false)** and commented  #### Status Quo  Several annotation-based search algorithms within the Spring Framework inspect meta-annotations on Java annotations as part of their recursive search processes. However, such inspection is unnecessary simply because any annotation on a Java annotation (e.g., `@Retention`, `@Target`, `@Documented`, etc.) will be irrelevant to the current search. In other words, a Spring annotation or a custom user annotation will never be _present_ on a Java annotation. So it makes no sense to look for it there.  #### Deliverables  For each of the affected search algorithms in the following classes, do not inspect meta-annotations on annotations from the `java.lang.annotation` package.  1. [x] `AnnotationUtils` 2. [x] `AnnotatedElementUtils` 3. [x] `MetaAnnotationUtils`  ---  **Affects:** 4.0 GA  **Issue Links:** - #17580 Eliminate inspection of meta-annotations on Java annotations (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2014-02-25T07:38:45Z","2019-01-11T21:22:09Z"
"","16107","Upgrade to TestNG 6.8.8 [SPR-11482]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11482](https://jira.spring.io/browse/SPR-11482?redirect=false)** and commented   ---  **Affects:** 4.0 GA","closed","type: task,","spring-projects-issues","2014-02-25T06:24:26Z","2014-03-26T22:34:04Z"
"","16100","Favor more locally declared composed annotations over inherited annotations in AnnotationUtils [SPR-11475]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11475](https://jira.spring.io/browse/SPR-11475?redirect=false)** and commented  #### Status Quo  The implementations of both `AnnotationUtils` and `AnnotatedElementUtils` (and possibly `AbstractRecursiveAnnotationVisitor` as well) currently favor _inherited_ annotations and _inherited_ composed annotations over composed annotations that are declared closer to the starting class passed to the `findAnnotation()` and `getAnnotationAttributes()` methods.  Given a class hierarchy with a depth of at least three, if the lowest level (e.g., `Level3`) is not directly annotated but `Level2` (a direct superclass of `Level3`) is directly annotated with `@ComposedAnno` (which is meta-annotated with `@Anno`) and `Level1` (a direct superclass of `@Level2`) is directly annotated with either `@Anno` or a composed annotation that is meta-annotated with `@Anno`, if the `@ComposedAnno` annotation is not declared as `@Inherited`, then any attributes declared via `@Anno` on `@ComposedAnno` (present on class `Level2`) will be _shadowed_ by those declared via `@Anno` on class `Level1`.  This behavior is very non-intuitive and would likely be considered a _bug_ by any developers who encounter it.  ---  #### Concrete Example  Given...  ```java @Component(value = ""composed1"") @Retention(RetentionPolicy.RUNTIME) @Inherited @interface Composed1 {}  @Component(value = ""composed2"") @Retention(RetentionPolicy.RUNTIME) @interface Composed2 {}  @Composed1 class Level1 {}  @Composed2 class Level2 extends Level1 {}  class Level3 extends Level2 {} ```  If we execute the following unit test, one would likely expect that ""composed2"" should be found, since the immediate superclass is annotated with `@Composed2`; however, with the current implementation ""composed1"" will be found since `@Composed1` is declared as `@Inherited` and therefore _shadows_ `@Composed2`. As such, the test fails on the last line.  ```java @Test public void findAnnotationFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations() {     Component component = AnnotationUtils.findAnnotation(Level3.class, Component.class);     assertNotNull(component);     assertEquals(""composed2"", component.value()); } ```  ---  #### Proposal  Refactor the affected implementations of `AnnotationUtils` and `AnnotatedElementUtils` so that _more locally declared_ composed annotations are favored over inherited annotations and inherited composed annotations.  This can likely be achieved by using the `getDeclaredAnnotation()` and `getDeclaredAnnotations()` methods in `java.lang.Class` instead of the `getAnnotation()` and `getAnnotations()` which are currently being used in these utility classes.  Note that `MetaAnnotationUtils` already uses `getDeclaredAnnotations()`.  ---  #### Deliverables  1. [x] Refactor `AnnotationUtils` to use `getDeclaredAnnotation()` and `getDeclaredAnnotations()` where appropriate. 2. [ ] Refactor `AnnotatedElementUtils` to use `getDeclaredAnnotation()` and `getDeclaredAnnotations()` where appropriate.  ---  **Affects:** 4.0 GA  **Issue Links:** - #16221 Favor more locally declared composed annotations over inherited annotations (_**""is depended on by""**_) - #16219 Annotations on superclasses are detected by StandardAnnotationMetadata - #16960 Favor more locally declared composed annotations over interface annotations in AnnotationUtils  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a2f1169e820c76df7f06f2b2b921b184b8775b45, https://github.com/spring-projects/spring-framework/commit/0f5a27c3545275bbd7c196124c51f6e66da6d164, https://github.com/spring-projects/spring-framework/commit/1d30bf83a0d6f303ce38526286b90172c3c596c6, https://github.com/spring-projects/spring-framework/commit/0637864b3909ab13727cb228258b778a265da8d9, https://github.com/spring-projects/spring-framework/commit/90b938aa8faf68d433dea19b4688eeac9d8a1416","closed","type: enhancement,","spring-projects-issues","2014-02-23T15:03:46Z","2019-01-13T06:55:38Z"
"","16095","MetaAnnotationUtils should support arbitrary levels of meta-annotations [SPR-11470]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11470](https://jira.spring.io/browse/SPR-11470?redirect=false)** and commented  #### Overview  The `findAnnotationDescriptor()` and `findAnnotationDescriptorForTypes()` methods in `MetaAnnotationUtils` currently only support a single level of meta-annotations.  In other words, meta-annotations on meta-annotations will never be found, and this does not align with Spring's standard support for meta-annotations with arbitrary levels.  #### Deliverables  1. [x] Alter the search algorithms used in `MetaAnnotationUtils` so that arbitrary levels of meta-annotations (e.g., meta-annotations on meta-annotations) are supported for test-related annotations.  ---  **Affects:** 4.0 GA  **Issue Links:** - #16074 AnnotationUtils.findAnnotation() should support arbitrary levels of meta-annotations - #17390 TypeDescriptor should support arbitrary levels of meta-annotations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f8950960f2a610f65c485831c437ffa4eaff622d","closed","type: enhancement,","spring-projects-issues","2014-02-22T09:18:44Z","2019-01-11T21:22:38Z"
"","16093","ActiveProfilesResolver is supplied composed annotation class instead of test class [SPR-11467]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11467](https://jira.spring.io/browse/SPR-11467?redirect=false)** and commented  #### Status Quo  The Javadoc for `ActiveProfilesResolver.resolve(Class)` states the following:  > Resolve the bean definition profiles to use when loading an `ApplicationContext` for the given test class. >  > **Parameters**: `testClass` the test class for which the profiles should be resolved; never null  This contract was honored for the initial support of `ActiveProfilesResolver`; however, with the added support for using test-related annotations as meta-annotations, if `@ActiveProfiles` is used as a meta-annotation on a custom _composed annotation_, then the _composed annotation_ is passed to the `resolve()` method instead of the test class.  ---  #### Deliverables  1. [x] Ensure that the actual test class is always passed to `ActiveProfilesResolver.resolve(Class)`.  ---  **Affects:** 4.0 GA  **Issue Links:** - #16081 ContextLoader is supplied composed annotation class instead of test class for default resource detection  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5f7d1758f8eaaa9fbfb36945ae21a2160422e079","closed","type: bug,","spring-projects-issues","2014-02-22T08:05:48Z","2019-01-13T06:55:41Z"
"","16074","AnnotationUtils.findAnnotation() should support arbitrary levels of meta-annotations [SPR-11448]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11448](https://jira.spring.io/browse/SPR-11448?redirect=false)** and commented  #### Status Quo  `AnnotationUtils.findAnnotation(Class, Class)` claims to _recursively_ search through all declared annotations; however, only one level of annotations is supported by the algorithm.  In other words, meta-annotations on meta-annotations will never be found.  #### Deliverables  1. [x] Alter the search algorithm in `AnnotationUtils.findAnnotation(Class, Class)` so that arbitrary levels of meta-annotations (e.g., meta-annotations on meta-annotations) are supported.  ---  **Affects:** 3.0 GA  **Issue Links:** - #14588 Introduce bootstrap strategy in the TestContext framework (_**""is depended on by""**_) - #16020 Introduce aliases for 'value' annotation attributes - #16095 MetaAnnotationUtils should support arbitrary levels of meta-annotations - #17390 TypeDescriptor should support arbitrary levels of meta-annotations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/42a36349e9aaa89699ab049e2ca305dce1f884cb","closed","type: enhancement,","spring-projects-issues","2014-02-19T09:19:25Z","2019-01-11T21:24:01Z"
"","16047","Inclusion of 'overloaded' in equals() and hashCode() for MethodOverride breaks equals() in AbstractBeanDefinition [SPR-11420]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11420](https://jira.spring.io/browse/SPR-11420?redirect=false)** and commented  #### Status Quo  The `overloaded` flag in `MethodOverride` is a _mutable_ property that is only intended to be used ""_to optimize runtime performance_"" (from the Javadoc), specifically limited to the implementation of `ReplaceOverride.matches()`.  The `overloaded` flag is, however, currently used to determine equality of and calculate hash codes for `MethodOverride` instances.  Its value is potentially changed from `true` (the default) to `false` in `AbstractBeanDefinition.validate()`. As a consequence, given two bean definitions `A` and `B` that represent the exact same bean definition metadata for a bean that relies on method injection (perhaps loaded via separate application contexts in the same VM), if `A` has been validated and `B` has not, then `A.equals(B)` will potentially return `false`, which is not acceptable behavior.  _Note that `AbstractBeanDefinition.equals()` includes an equality check for `MethodOverrides`._  #### Deliverables  1. [x] Stop including the `overloaded` flag in `equals()` and `hashCode()` for `MethodOverride`.  ---  **Affects:** 3.0 GA  **Issue Links:** - #15411 Method injection causes memory leak (_**""is depended on by""**_) - #15411 Method injection causes memory leak  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","in: core,","spring-projects-issues","2014-02-12T07:08:07Z","2019-01-11T21:27:38Z"
"","16027","Introduce putIfAbsent() in Spring's Cache API [SPR-11400]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11400](https://jira.spring.io/browse/SPR-11400?redirect=false)** and commented  #### Status Quo  Spring's `Cache` API currently has a `put(Object key, Object value)` method, but there is no form of thread-safe `putIfAbsent(Object key, Object value)` method (i.e., to avoid subsequent thread-unsafe `if get() == null then put()` calls).  #### Deliverables  1. [ ] Introduce a `putIfAbsent(Object key, Object value)` method in `org.springframework.cache.Cache` and corresponding implementations.  #### Temporary Work-around  If one needs `putIfAbsent()` behavior now, consider accessing the underlying cache implementation via `Cache.getNativeCache()` and then invoking `putIfAbsent()` (or similar) on the native cache using the native API if available.   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2014-02-06T12:57:27Z","2014-07-18T10:16:29Z"
"","16026","Improve documentation of transactional support in the TestContext framework [SPR-11399]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11399](https://jira.spring.io/browse/SPR-11399?redirect=false)** and commented  #### Status Quo  The documentation in the reference manual for transactional support in the Spring TestContext Framework (TCF) is currently very lacking. Currently there are only two examples:  - `FictitiousTransactionalTest`: a JUnit-based _POJO_ test class that demonstrates the usage of **all** annotations related to transactions in the TCF, but in a less than exemplary fashion. - `AbstractClinicTests`: an extension of `AbstractTransactionalJUnit4SpringContextTests` that demonstrates the use of `countRowsInTable()` but not much else.  So, although there are two examples in the reference manual, neither of these demonstrates best practices or typical usage scenarios. Furthermore, there are zero examples using TestNG.  ---  #### Deliverables  1. [ ] Delete the `AbstractClinicTests` example and create a similar JUnit-based example in the ""_Transaction management_"" or ""_JUnit support classes_"" section. 2. [ ] Repurpose content from the ""_PetClinic Example_"" section as a new ""_Best Practices_"" section. 3. [ ] Create a TestNG-based example that is directly analogous to the new JUnit-based example, for comparison purposes. 4. [ ] Add TestNG content related to the discussion in #16024.    - See [pull request #456](https://github.com/spring-projects/spring-framework/pull/456/commits). 5. [ ] Add TestNG content related to the discussion in #10800.  ---  **Affects:** 3.0 GA  **Issue Links:** - #16558 Document programmatic test transaction management support (_**""depends on""**_) - #10800 AbstractTransactionalTestNGSpringContextTests not working as expected when an EJB with TransactionAttribute.REQUIRES_NEW is encountered - #16024 Support `@Transactional` on TestNG `@BeforeClass` methods in the TestContext framework","open","type: documentation,","spring-projects-issues","2014-02-06T12:40:34Z","2021-11-11T10:36:00Z"
"","16022","Introduce verify() and reset() methods in AnnotationDrivenStaticEntityMockingControl [SPR-11395]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11395](https://jira.spring.io/browse/SPR-11395?redirect=false)** and commented  #### Status Quo  The `AnnotationDrivenStaticEntityMockingControl` aspect ensures that all expectations on the mock have been fulfilled automatically when the invocation of the advised method (typically an `@Test` method) completes successfully (i.e., does not throw an exception). This behavior is normally sufficient; however, there are times when it would be convenient to be able to manually (_programmatically_) _verify_ the recorded expectations and/or _reset_ the state of the mock.  #### Deliverables  1. [x] Introduce a `verify()` method in `AnnotationDrivenStaticEntityMockingControl`. 2. [x] Introduce a `reset()` method in `AnnotationDrivenStaticEntityMockingControl`.    ---  **Affects:** 4.0 GA","closed","type: enhancement,","spring-projects-issues","2014-02-05T14:07:14Z","2014-02-18T22:36:51Z"
"","16020","Introduce aliases for 'value' annotation attributes [SPR-11393]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11393](https://jira.spring.io/browse/SPR-11393?redirect=false)** and commented  #### Background  Java supports a special annotation attribute named `value` that can be used without being named if an annotation is declared with a single attribute. Due to the convenience it provides, the `value` attribute is used frequently in annotations across the Spring Framework. However, there are some downsides to making an attribute available _only_ via the `value` attribute name:  1. **Readability**: when the `value` attribute is used without being named (i.e., as a single attribute), the readability is enhanced due to the reduction of clutter, but if multiple attributes are declared, the readability and usability of the code base suffers. Seeing ""value=..."" repeated across annotations makes the intent of the code unclear, especially to newcomers to the framework. 2. **Composability**: Spring Framework 4.0 (and previous versions of the framework to a lesser extent) provides extensive support for _composed annotations_ (i.e., annotations composed by multiple meta-annotations) and meta-annotation attribute overriding in such composed annotations; however, the `value` attribute is (for good reasons) not supported as a candidate for overriding.  ###### Example: Multiple Attribute Declarations  Consider the following annotated handler method from a Spring MVC controller for JUG events.  ```java @RequestMapping(""/events"") public String list(Model model) { 	model.addAttribute(""events"", this.eventService.findAllEvents()); 	return ""events/list""; } ```  In the above example, only the _path_ for the request mapping is declared as an annotation attribute. In such use cases, the use of the unnamed `value` attribute is ideal. But how does the code look if multiple attributes must be declared?  ```java @RequestMapping(value = ""/events"", method = GET) public String list(Model model) { 	/* body */ } ```  In the above example, supplying the path on its own is insufficient for the use case at hand. Thus, both the _path_ and _method_ must be supplied. Since the path can only be specified via the `value` attribute, the code becomes unclear. What does ""value"" mean in this context?  Wouldn't it be better to be able to be very explicit?  ```java @RequestMapping(path = ""/events"", method = GET) public String list(Model model) { 	/* body */ } ```  The above example introduces an _alias_ for the `value` attribute. By specifying the _path_ via a `path` attribute, the meaning of the code becomes clear, even to readers who are not familiar with Spring MVC. Although this annotation is supported in both Servlet and Portlet environments, it has been decided to name the alias `path` since the Servlet use case is more common.  ###### Example: Meta-annotation Attribute Overrides  Consider the `@ContextConfiguration` from the Spring TestContext Framework (TCF). When it was introduced in Spring 2.5, it only supported a `locations` attribute for specifying the resource locations to use for loading an `ApplicationContext`. After observing common use cases for this annotation in the developer community it became apparent that developers typically only need to declare the locations and none of the other available attributes. So in Spring 3.0, the `value` attribute was introduced in `@ContextConfiguration` as an _alias_ for the existing `locations` attribute.  The fact that both the `value` and `locations` attributes are supported in `@ContextConfiguration` not only overcomes the aforementioned _readability_ issue, but it also allows for `@ContextConfiguration` to be used as a meta-annotation on a _composed annotation_ with attribute overrides for the locations.  ```java @Transactional @ContextConfiguration @Retention(RetentionPolicy.RUNTIME) public @interface TransactionalTestConfig {  	String[] locations() default {}; }  @TransactionalTestConfig(locations = ""/test-config.xml"") public class RepositoryTests { 	/* test body */ } ```  The above example demonstrates how to override the `locations` attribute of `@ContextConfiguration` in a custom composed annotation (`@TransactionalTestConfig`).  Without the `locations` alias, this overriding would not be possible.  ---  #### Deliverables  1. [ ] Introduce a set of common test fixtures that assist in ensuring that annotation attribute look-up is tested consistently across modules. 2. [ ] Special consideration should be taken with regard to component names.    - The framework provides support for determining the name of an annotated component via special handling of the `value` attribute in `@Component` classes or any class meta-annotated with `@Component`; however, it may prove useful to declare an alias for component names (e.g., `componentName`) in order to allow the name of a component to be specified via a custom _composed annotation_ without the ambiguity of the `value` attribute.    - Component annotations:      - `@Component`      - `@Service`      - `@Repository`      - `@Controller`      - `@ControllerAdvice`      - `@RestController`      - `@Configuration` 3. [x] For each annotation in the _Candidate Annotations_ section below (which has not been rejected):    - Ensure that the annotation has an alias for the `value` attribute with a meaningful name.    - Ensure that the alias name is unique enough that it will not likely lead to naming collisions when multiple annotations are used to construct _composed annotations_.      - For example, something as generic as _name_ should likely be avoided if possible.    - Review the Javadoc for the `value` attribute and its alias and revise as necessary in order to ensure clarity of purpose.    - Ensure that all code in the framework that currently looks up the `value` of said annotation now uses the newly introduced functionality for looking up annotation attributes with aliases (see #16137).  ---  #### Candidate Annotations  The tables below contain annotations in the Spring Framework that fall into one of two categories:  1. The annotation has a `value` attribute in addition to other attributes. 2. The annotation only has a `value` attribute (i.e., no additional attributes), but it might still benefit from having an alias so that it can be overridden in custom _composed annotations_ (e.g., using the simple name-based convention).  ---  ##### Annotations with a `value` attribute and other attributes  |module|Annotation|Alias Exists?|Alias Name| |:---|:---|:---|:---| | `spring-context`        | `@Cacheable`              | (/)            | `cacheNames` | | `spring-context`        | `@CacheEvict`             | (/)            | `cacheNames` | | `spring-context`        | `@CachePut`               | (/)            | `cacheNames` | | `spring-context`        | `@ComponentScan`          | (/)            | `basePackages` | | `spring-context`        | `@ComponentScan.Filter`   | (/)            | `classes` | | `spring-context`        | `@ImportResource`         | (/)            | `locations` | | `spring-context`        | `@ManagedResource`        | (/)            | `objectName` | | `spring-context`        | `@Scope`                  | (/)            | `name` | | `spring-messaging`      | `@Header`                 | (/)            | `name` | | `spring-messaging`      | `@Payload`                | (/)            | `expression` | | `spring-messaging`      | `@SendToUser`                | (/)            | `destinations` | | `spring-test`           | `@ActiveProfiles`         | (/)            | `profiles` | | `spring-test`           | `@ContextConfiguration`   | (/)            | `locations` | | `spring-test`           | `@Sql` | (/)            | `scripts` | | `spring-test`           | `@TestExecutionListeners` | (/)            | `listeners` | | `spring-test`           | `@TestPropertySource` | (/)            | `locations` | | `spring-tx`             | `@Transactional`          | (/)            | `transactionManager` | | `spring-web`            | `@ControllerAdvice`       | (/)            | `basePackages` | | `spring-web`            | `@CookieValue`            | (/)            | `name` | | `spring-web`            | `@CrossOrigin`            | (/)            | `origins` | | `spring-web`            | `@MatrixVariable`         | (/)            | `name` | | `spring-web`            | `@RequestHeader`          | (/)            | `name` | | `spring-web`            | `@RequestMapping`         | (/)            | `path` | | `spring-web`            | `@RequestParam`           | (/)            | `name` | | `spring-web`            | `@RequestPart`            | (/)            | `name` | | `spring-web`            | `@ResponseStatus`         | (/)            | `code` | | `spring-web`            | `@SessionAttributes`      | (/)            | `names` | | `spring-webmvc-portlet` | `@ActionMapping`          | (/)            | `name` | | `spring-webmvc-portlet` | `@RenderMapping`          | (/)            | `windowState` |  ---  ##### Rejected Candidates  The following table contains annotations that in fact have a `value` attribute (and typically no other attributes) but have been rejected as candidates for receiving aliases.  Note, however, that just because an annotation has been rejected as a candidate for receiving a value-alias, this does not mean that the `value` attribute will not be able to be used in composed annotations. On the contrary, once the work for #16138 is complete, there will be an annotation-based mechanism for overriding `value` annotation attributes in meta-annotations.  |module|Annotation| |:---|:---| | `spring-beans`          | `@Qualifier`           | | `spring-context`        | `@Async`               | | `spring-context`        | `@DependsOn`           | | `spring-context`        | `@Lazy`                | | `spring-context`        | `@Profile`             | | `spring-context`        | `@Validated`           | | `spring-core`           | `@Order`               | | `spring-messaging` | `@DestinationVariable` | | `spring-messaging` | `@MessageExceptionHandler` | | `spring-messaging` | `@MessageMapping` | | `spring-messaging` | `@SendTo` | | `spring-messaging` | `@SubscribeMapping` | | `spring-test`           | `@BootstrapWith`              | | `spring-test`           | `@Repeat`              | | `spring-test`           | `@Rollback`            | | `spring-test`           | `@WebAppConfiguration` | | `spring-webmvc-portlet` | `@ResourceMapping`     |  ---  **Affects:** 4.0 GA  **Issue Links:** - #16137 Introduce unified support for declaring and looking up annotation attribute aliases (_**""depends on""**_) - #16140 Document Spring Annotation Programming Model in the Wiki (_**""is depended on by""**_) - #14814 Allow meta-annotations to override attributes from their parent - #16137 Introduce unified support for declaring and looking up annotation attribute aliases - #16138 Introduce support for explicit annotation attribute overrides - #15666 Support meta-annotation attribute overrides in the TestContext framework - #16136 Introduce a comprehensive programming model for meta-annotation support - #17830 Regression: AnnotationScopeMetadataResolver fails to resolve VaadinView - #17744 Package tangle in org.springframework.core - #16074 AnnotationUtils.findAnnotation() should support arbitrary levels of meta-annotations  1 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2014-02-05T09:31:24Z","2019-01-13T06:56:03Z"
"","16012","Fix off-by-one regression in AbstractMethodMockingControl [SPR-11385]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11385](https://jira.spring.io/browse/SPR-11385?redirect=false)** and commented  #### Status Quo  `AnnotationDrivenStaticEntityMockingControlTests` has been omitted from the build for quite some time (perhaps forever) since it was previously named `AnnotationDrivenStaticEntityMockingControlTest` which did not comply with Spring Framework's naming convention for test classes. Consequently, the tests within this class have not been included in the test suite.  Due to changes to the build configuration in #16011, it is now apparent that some of the tests in `AnnotationDrivenStaticEntityMockingControlTests` are broken.  ---  #### Analysis  Initial analysis of the failing tests has made it apparent that there is an off-by-one bug in the implementation of `AbstractMethodMockingControl.Expectations.nextCall()`. Specifically, the `verified` count is one-based; whereas, the `calls` list is zero-based. Therefore, returning `calls.get(verified)` leads to inappropriate behavior (i.e., either accessing the wrong call or out-of-bounds exceptions).  Further analysis reveals that this off-by-one bug is in fact a regression that was accidentally introduced in the fix for #15513.  ---  #### Deliverables  1. [x] Fix the off-by-one bug in `AbstractMethodMockingControl.Expectations.nextCall()`. 2. [x] Ensure that all _broken_ tests (currently annotated with `@Ignore`) in `AnnotationDrivenStaticEntityMockingControlTests` pass once again.  ---  **Affects:** 3.2.5  **Issue Links:** - #15513 Abstract method mocking prints wrong call count in exception - #16011 Ensure all tests are executed in the Gradle build  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3a89bc4b266c9ab351a33727eaa8d0236b6f737b, https://github.com/spring-projects/spring-framework/commit/03e243a4ab279cc374c454e7e021e62d6d952c8d, https://github.com/spring-projects/spring-framework/commit/69a89b1bb0c37c2bf0871c0e40d442e7db4197c2  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","in: core,","spring-projects-issues","2014-02-03T14:24:22Z","2019-01-13T06:56:06Z"
"","16011","Ensure all tests are executed in the Gradle build [SPR-11384]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11384](https://jira.spring.io/browse/SPR-11384?redirect=false)** and commented  #### Status Quo  Although the naming convention for test classes within the test suite for the Spring Framework has always been ""*Tests"" (as opposed to the Maven convention of ""*Test""), time and time again a test class slips into version control with a ""Test"" suffix. This causes the tests in question to be ignored by the build.  ---  #### Analysis  In Eclipse, type `Ctrl + Shift + T` and then enter ""org.springframework.*.*Test "" (without the quotes but _with_ the trailing space). This will display a dialog containing all classes currently named ""*Test"" as opposed to ""*Tests"". As of the time of this writing, this results in the following:  - org.springframework.context.groovy.ScopeTest - org.springframework.context.support.SimpleThreadScopeTest - org.springframework.core.GenericTypeResolverTests.ITest - org.springframework.core.type.CachingMetadataReaderLeakTest - org.springframework.http.client.support.ProxyFactoryBeanTest - org.springframework.jdbc.datasource.DelegatingDataSourceTest - org.springframework.mock.staticmock.AnnotationDrivenStaticEntityMockingControlTest - org.springframework.test.context.junit4.aci.annotation.InitializerWithoutConfigFilesOrClassesTest - org.springframework.test.context.junit4.profile.resolver.ClassNameActiveProfilesResolverTest - org.springframework.test.context.ContextLoaderUtilsActiveProfilesTests.*:   - NullActiveProfilesResolverTest   - NoDefaultConstructorActiveProfilesResolverTest   - FooActiveProfilesResolverTest   - InheritedFooActiveProfilesResolverTest   - MergedInheritedFooActiveProfilesResolverTest   - OverridenInheritedFooActiveProfilesResolverTest   - ConflictingResolverAndProfilesTest   - ConflictingResolverAndValueTest   - ConflictingProfilesAndValueTest - org.springframework.test.context.OverriddenMetaAnnotationAttributesTests.MetaLocationsConfigTest - org.springframework.test.context.OverriddenMetaAnnotationAttributesTests.MetaValueConfigTest - org.springframework.test.context.OverriddenMetaAnnotationAttributesTests.OverriddenMetaLocationsConfigTest - org.springframework.test.context.OverriddenMetaAnnotationAttributesTests.OverriddenMetaValueConfigTest - org.springframework.test.context.web.WebTest - org.springframework.util.xml.DomContentHandlerTest - org.springframework.web.filter.HiddenHttpMethodFilterTest  Furthermore, `AnnotationDrivenStaticEntityMockingControlTest` contains broken tests.  ---  #### Deliverables  1. [x] Rename all *Test classes:    - [x] Real test classes named ""*Test"" must be renamed to ""*Tests"".    - [x] Internal _test_ classes that are not actually executed by the build should be renamed to ""*TestCase"".    - [x] The `@WebTest` test annotation should be renamed to something ending in neither ""Test"" nor ""Tests"". 2. [x] Broken tests in `AnnotationDrivenStaticEntityMockingControlTest` should be disabled and fixed in conjunction with a separate, dedicated issue.    - See #16011. 3. [x] Modify Gradle build to include ""*Test"" in addition to ""*Tests"" for test classes.  ---  **Affects:** 4.0.1  **Issue Links:** - #16012 Fix off-by-one regression in AbstractMethodMockingControl  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b8ed2f49670dd80b83e6c7daa53843afce247459","closed","type: task,","spring-projects-issues","2014-02-03T11:47:46Z","2019-01-13T06:56:08Z"
"","15964","ServletTestExecutionListener is not enabled by default in abstract base test classes [SPR-11340]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11340](https://jira.spring.io/browse/SPR-11340?redirect=false)** and commented  #### Status Quo  The `ServletTestExecutionListener` was introduced in Spring Framework 3.2 and is enabled by default when using the TestContext framework without specifying custom listeners via `@TestExecutionListeners`. However, the `ServletTestExecutionListener` has not been added to the default set of listeners for Spring's abstract base test classes.  #### Deliverables  1. [x] Prepend `ServletTestExecutionListener` to the set of default listeners in `AbstractJUnit4SpringContextTests`. 2. [x] Prepend `ServletTestExecutionListener` to the set of default listeners in `AbstractTestNGSpringContextTests`.  ---  **Affects:** 3.2 GA  **Issue Links:** - #15971 Handle NoClassDefFoundError for TestExecutionListeners consistently in the TestContext framework  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: bug,","spring-projects-issues","2014-01-21T05:57:16Z","2019-01-11T19:00:01Z"
"","15962","Ensure all tests are executed in the Gradle build for the spring-test module [SPR-11338]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11338](https://jira.spring.io/browse/SPR-11338?redirect=false)** and commented  TestNG tests are currently only executed by the Gradle build if they are located directly in the `testng` package. Tests in subpackages are therefore omitted from the build. As of the creation of this JIRA issue there are no such tests in subpackages; however, this is soon to change.  Furthermore, the JUnit-based `FailingBeforeAndAfterMethodsTests` test class is currently not executed because it resides under the `testng` package which is excluded from the `test` build target.   ---  **Affects:** 3.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/098d7c746532135e0edc241d91dfc1f27389949d, https://github.com/spring-projects/spring-framework/commit/fdac4a7d188c0c99f2005fde6f2116d2ddea8038  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: task,","spring-projects-issues","2014-01-21T05:39:17Z","2014-01-28T13:07:14Z"
"","15947","Include TestContext in log message when starting a new transaction in TransactionalTestExecutionListener [SPR-11323]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11323](https://jira.spring.io/browse/SPR-11323?redirect=false)** and commented  #### Status Quo  `TransactionalTestExecutionListener.endTransaction()` includes the `TestContext` in trace logging output; however, `TransactionalTestExecutionListener.startNewTransaction()` currently does not include it in its info logging output, thus making it more difficult to debug.  #### Deliverables  1. [x] Ensure that `startNewTransaction()` also includes the current `TestContext` in logging output.  ---  **Affects:** 3.0 GA  **Issue Links:** - #10800 AbstractTransactionalTestNGSpringContextTests not working as expected when an EJB with TransactionAttribute.REQUIRES_NEW is encountered  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6e30851328662ad81a65a83bcac72722d76fbb44","closed","type: enhancement,","spring-projects-issues","2014-01-17T05:52:21Z","2019-01-11T19:02:47Z"
"","15735","Document meta-annotation support in the TestContext framework [SPR-11109]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11109](https://jira.spring.io/browse/SPR-11109?redirect=false)** and commented  #### Overview  Support for meta-annotations for test-related annotations was introduced in #12483 and #15666, but this support has not yet been documented.  #### Deliverables  1. [x] Document meta-annotation support for test-related annotations in the _Testing_ chapter of the reference manual. 2. [x] Write and/or update Javadoc for related changes    - [x] `MetaAnnotationUtils`    - [x] `@ContextConfiguration`    - [x] `@WebAppConfiguration`    - [x] `@ContextHierarchy`    - [x] `@ActiveProfiles`    - [x] `@DirtiesContext`    - [x] `@TestExecutionListeners`    - [x] `@IfProfileValue`    - [x] `@ProfileValueSourceConfiguration`    - [x] `@Transactional`    - [x] `@BeforeTransaction`    - [x] `@AfterTransaction`    - [x] `@TransactionConfiguration`    - [x] `@Rollback`    - [x] `@Repeat`    - [x] `@Timed`  ---  **Affects:** 4.0 M3  **Issue Links:** - #12483 Provide meta-annotation support for test-related annotations (_**""depends on""**_) - #15666 Support meta-annotation attribute overrides in the TestContext framework (_**""depends on""**_)","closed","type: documentation,","spring-projects-issues","2013-11-22T10:23:41Z","2019-01-11T19:28:15Z"
"","15734","Support composed annotations declared on interfaces [SPR-11108]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11108](https://jira.spring.io/browse/SPR-11108?redirect=false)** and commented  #### Status Quo  The `findAnnotation()` methods in `AnnotationUtils` currently support searching for meta-annotations declared on composed annotations that are declared on interfaces; however, various parts of the framework -- for example, code that relies on `AnnotationAttributes`   - only support composed annotations on classes or methods (not on interfaces or interface methods).  For example, given the following:  ```java @Target({ElementType.TYPE, ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) @Transactional(rollbackFor=Exception.class, noRollbackFor={IOException.class}) public @interface TxWithAttribute {  	boolean readOnly(); }  @TxWithAttribute(readOnly = true) public static interface TestInterface9 {  	public int getAge(); }  public static class TestBean9 implements TestInterface9 {  	@Override 	public int getAge() { 		return 10; 	} }  public static interface TestInterface10 {  	@TxWithAttribute(readOnly=true) 	public int getAge(); }  public static class TestBean10 implements TestInterface10 {  	@Override 	public int getAge() { 		return 10; 	} } ```  Spring's support for resolving transaction attributes (e.g., the `AbstractFallbackTransactionAttributeSource.computeTransactionAttribute()` to `SpringTransactionAnnotationParser.parseTransactionAnnotation()` call stack) fails to find `@Transactional` which is declared via `@TxWithAttribute` on interfaces.  #### Proposal  Introduce support for composable stereotype annotations declared on interfaces.  ---  **Affects:** 4.0 RC1  **Issue Links:** - #14814 Allow meta-annotations to override attributes from their parent - #12483 Provide meta-annotation support for test-related annotations - #15666 Support meta-annotation attribute overrides in the TestContext framework - #17300 AnnotatedElementUtils does not find annotations on methods in dynamic proxies - #17335 AnnotatedElementUtils fails to find annotations on abstract, bridge, or interface methods  1 votes, 3 watchers","open","type: enhancement,","spring-projects-issues","2013-11-22T07:33:39Z","2019-01-11T19:28:12Z"
"","15730","AnnotationUtils fails to retrieve attribute values from non-public annotations [SPR-11104]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11104](https://jira.spring.io/browse/SPR-11104?redirect=false)** and commented  #### Status Quo  The `getValue()` methods in `AnnotationUtils` currently fail to retrieve the value of the desired annotation attribute if the annotation itself is not public (i.e., _package private_). In contrast, the `getDefaultValue()` methods work fine since they invoke `Method#getDefaultValue()`. Thus the problem lies with the fact that `AnnotationUtils.getValue(Annotation, String)` attempts to invoke the method, swallowing the exception on failure and silently returning `null`.  #### Deliverables  1. [x] Update `AnnotationUtils.getValue(Annotation, String)` so that it uses reflection to make the desired annotation attribute _method_ accessible before invoking it to retrieve the value.  ---  **Affects:** 3.0 GA  **Issue Links:** - #15666 Support meta-annotation attribute overrides in the TestContext framework (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b830d7362df24ed0953009b8172a7d67f7b73fe9","closed","in: core,","spring-projects-issues","2013-11-20T12:42:22Z","2019-01-11T19:29:26Z"
"","15639","Backport ""Cannot override initializer of @ContextConfiguration when using @ContextHierarchy"" [SPR-11011]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11011](https://jira.spring.io/browse/SPR-11011?redirect=false)** and commented  ---  **Affects:** 3.2.2  This issue is a backport sub-task of #15625  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/63de2fab4c8e2b7804facc45258ac698149461ad","closed","in: test,","spring-projects-issues","2013-10-21T11:21:13Z","2019-01-11T19:12:27Z"
"","16230","TestNG tests fail after upgrade to spring-orm 4.0.2 [SPR-11607]","**[sagar bhandare](https://jira.spring.io/secure/ViewProfile.jspa?name=sagar_bhandare)** opened **[SPR-11607](https://jira.spring.io/browse/SPR-11607?redirect=false)** and commented  We have upgraded from Spring Framework 3.2.5 to 4.0.2, and suddenly test cases extending `AbstractTestNGSpringContextTests` are now failing.  I tried to debug and found out that upgrading `spring-orm` is somehow causing problem. The error is:  ``` myTestClass.springTestContextPrepareTestInstance FAILED     java.lang.NoSuchMethodError ```  The test case looks like this:  ``` @Test(groups = ""functional"") @ContextConfiguration(""/test-root-context.xml"") public class CreateSecurityConfigTest extends AbstractTestNGSpringContextTests {  	@Autowired 	ApplicationContext app;  	@Test 	public void testCreateAllBeans() { 		// ... 	} } ```  Surprisingly the test case passes in Eclipse but fails on a Linux box with Gradle.  Its a blocker for our release. Any help would be very helpful.   ---  **Affects:** 4.0.2  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2014-03-26T06:52:49Z","2019-01-12T05:26:04Z"
"","15647","Bean definitions using indexed constructor arguments are not usable for @Autowired resolution [SPR-11019]","**[Ryan Gardner](https://jira.spring.io/secure/ViewProfile.jspa?name=ryangardner)** opened **[SPR-11019](https://jira.spring.io/browse/SPR-11019?redirect=false)** and commented  I created some bean definitions in my BeanRegistry and was using indexed constructor arguments.  When using `@Resource`, the beans were resolved properly by type.  When using `@Autowired`, they were not found.  We traced it down to:  line 635 of the AbstractAutowireCapableBeanFactory in the getTypeForFactoryMethod method  ``` List argumentValues = mbd.getConstructorArgumentValues().getGenericArgumentValues(); ```  This code only looks for methods based on argument values set as GenericArgumentValues - any set via indexedArgumentValues are not found.  switching our code to create bean definitions using GenericArgumentValues instead of IndexedArgumentValues fixed the issue for us, but this seems like an oversight.  Changing it slightly to something like this should at least address this one case:  ``` List argumentValues = mbd.getConstructorArgumentValues().getGenericArgumentValues(); if (argumentValues.size() == 0) {      argumentValues = mbd.getConstructorArgumentValues().getIndexedArgumentValues(); }  ```  (feel free to use the above code - I've signed the spring contributor agreement... if you want I can do this on a branch and submit a pull request for it)   ---  **Affects:** 3.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/42568afb37029f3880fbeb5a54f8e68aaa508886, https://github.com/spring-projects/spring-framework/commit/109faaced8f4a17635b3c465ddeeeb2409add155","closed","in: core,","spring-projects-issues","2013-10-22T09:04:40Z","2013-10-31T12:27:54Z"
"","16260","@PropertySource locations are being dropped in ConfigurationClassParser processPropertySource [SPR-11637]","**[Russ Tennant](https://jira.spring.io/secure/ViewProfile.jspa?name=russ)** opened **[SPR-11637](https://jira.spring.io/browse/SPR-11637?redirect=false)** and commented  After updating from Spring 3.2.8, property lookup via Environment broke for our projects.  Our projects defined a single property source on our main `@Configuration` class as follows.  ``` @PropertySource(name=""props"",   value={   ""classpath:/path/to/library/defaults.properties"",   ""classpath:/path/to/project/defaults.properties"",   ""${spring.properties}"" }) ```  Previously, this would result in all three locations being searched in order (reverse) specified.  In Spring 4, only 2 locations are in the CompositePropertySource instead of the expected 3 locations.  It appears the lost location is discarded in ConfigurationClassParser.processPropertySource.  ``` if (!StringUtils.hasText(name) || this.propertySources.containsKey(name)) { 	// We need to ensure unique names when the property source will 	// ultimately end up in a composite 	ResourcePropertySource ps = new ResourcePropertySource(resource); 	this.propertySources.add((StringUtils.hasText(name) ? name : ps.getName()), ps); } else { 	this.propertySources.add(name, new ResourcePropertySource(name, resource)); } ```  It looks like the condition of the ternary operator should match the IF statement.  We have worked around the issue by using multiple `@PropertySource` annotations.  ---  **Affects:** 4.0.3  **Issue Links:** - #13766 `@PropertySource` annotation with multiple values and a name fails to register all property sources - #16731 PropertySource named cannot be added relative to itself (`@PropertySource` processing fails)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ab24dda4ff32974173297c944732339909b016d7, https://github.com/spring-projects/spring-framework/commit/21874627d2e0c3c31b4877bca5af4e57128bec5b, https://github.com/spring-projects/spring-framework/commit/bd5b3749c5f72ae244c92bc97cdb3316bcc534c0, https://github.com/spring-projects/spring-framework/commit/0041e245a1f80affba828c79fd8db13b0319fb85","closed","type: bug,","spring-projects-issues","2014-03-31T09:04:31Z","2019-01-13T06:54:47Z"
"","15844","Infinite Recursion in org.springframework.core.ResolvableType.hashCode(ResolvableType.java:692) [SPR-11219]","**[Russ Tennant](https://jira.spring.io/secure/ViewProfile.jspa?name=russ)** opened **[SPR-11219](https://jira.spring.io/browse/SPR-11219?redirect=false)** and commented  We're getting a StackOverflowError during dependency injection.  ```   Caused by: java.lang.StackOverflowError 	at java.lang.reflect.InvocationTargetException.(InvocationTargetException.java:72) 	at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:606) 	at org.springframework.core.SerializableTypeWrapper$TypeProxyInvocationHandler.invoke(SerializableTypeWrapper.java:220) 	at com.sun.proxy.$Proxy4.hashCode(Unknown Source) 	at org.springframework.util.ObjectUtils.nullSafeHashCode(ObjectUtils.java:336) 	at org.springframework.core.ResolvableType.hashCode(ResolvableType.java:692) 	at org.springframework.util.ObjectUtils.nullSafeHashCode(ObjectUtils.java:336) 	at org.springframework.core.ResolvableType.hashCode(ResolvableType.java:693) ```  The class that is triggering the issue is ITableColumnScriptableType which has this hierarchy.  ``` public class ITableColumnScriptableType extends JSR223LibraryType  public abstract class JSR223LibraryType extends AbstractLibraryType  public abstract class AbstractLibraryType implements ILibraryType  public interface ILibraryType ```  This did not occur in version 3.2.5.  Attached is the error log from the StackOverflowError and a thread dump taken before the stack overflow.    ---  **Affects:** 4.0 GA  **Attachments:** - [error-log.txt](https://jira.spring.io/secure/attachment/21532/error-log.txt) (_174.96 kB_) - [spr11219-test-case.zip](https://jira.spring.io/secure/attachment/21550/spr11219-test-case.zip) (_5.16 kB_) - [spr11219-test-case-2.zip](https://jira.spring.io/secure/attachment/21551/spr11219-test-case-2.zip) (_5.17 kB_) - [threads_report.txt](https://jira.spring.io/secure/attachment/21533/threads_report.txt) (_58.15 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/994efe45fd66a0ce48c705fd16632aa27eecc1b7, https://github.com/spring-projects/spring-framework/commit/aa2fadd8da0bcb87db5bad42c0774b868fce70cd","closed","in: core,","spring-projects-issues","2013-12-12T12:58:39Z","2014-01-28T13:07:17Z"
"","15912","JMS CachingConnectionFactory monitoring [SPR-11288]","**[Ruslan](https://jira.spring.io/secure/ViewProfile.jspa?name=batter)** opened **[SPR-11288](https://jira.spring.io/browse/SPR-11288?redirect=false)** and commented  Hi, we're using CachingConnectionFactory for JMS vendor specific Connection Factory. The problem with CachingConnectionFactory is that it does a good thing, but no visibility over it. Let's say i have 25 threads listening to MQ Queue, transforming messages and resending to 3 endpoints. Currently all of them (4 endpoints) using same CachingConnectionFactory. Session cache size is 100. How do i know how many sessions are cached and free at the moment? * change logging to see TRACE logs (which is not good for Prod investigations) * have public method returning LinkedList\ size.   Now it's private (Map which holding LinkedLists) so i can't extend to expose it via JMX.    --- No further details from [SPR-11288](https://jira.spring.io/browse/SPR-11288?redirect=false)","open","type: enhancement,","spring-projects-issues","2014-01-06T08:16:47Z","2016-06-02T08:46:53Z"
"","15716","Spring annotation/JavaConfig throws NullPointerException when cyclic dependency, should inform the cyclic condition [SPR-11090]","**[Rudi Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=rudi)** opened **[SPR-11090](https://jira.spring.io/browse/SPR-11090?redirect=false)** and commented  Sample error:  ``` Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'perpetualInventoryUpdater' defined in file [/home/rudi/git/bippo-commerce5/inventory/target/classes/id/co/bippo/inventory/perpetual/PerpetualInventoryUpdater.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [id.co.bippo.inventory.perpetual.PerpetualInventoryManager]: : Error creating bean with name 'perpetualInventoryManagerImpl' defined in file [/home/rudi/git/bippo-commerce5/inventory/target/classes/id/co/bippo/inventory/perpetual/PerpetualInventoryManagerImpl.class]: Unsatisfied dependency expressed through constructor argument with index 1 of type [id.co.bippo.inventory.perpetual.PerpetualInventoryRepository]: : Error creating bean with name 'perpInvRepo' defined in class path resource [id/co/bippo/springapp/AppConfig$InventoryConfig.class]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public id.co.bippo.inventory.perpetual.PerpetualInventoryRepository id.co.bippo.springapp.AppConfig$InventoryConfig.perpInvRepo()] threw exception; nested exception is java.lang.NullPointerException: Data Source must be provided.; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'perpInvRepo' defined in class path resource [id/co/bippo/springapp/AppConfig$InventoryConfig.class]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public id.co.bippo.inventory.perpetual.PerpetualInventoryRepository id.co.bippo.springapp.AppConfig$InventoryConfig.perpInvRepo()] threw exception; nested exception is java.lang.NullPointerException: Data Source must be provided.; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'perpetualInventoryManagerImpl' defined in file [/home/rudi/git/bippo-commerce5/inventory/target/classes/id/co/bippo/inventory/perpetual/PerpetualInventoryManagerImpl.class]: Unsatisfied dependency expressed through constructor argument with index 1 of type [id.co.bippo.inventory.perpetual.PerpetualInventoryRepository]: : Error creating bean with name 'perpInvRepo' defined in class path resource [id/co/bippo/springapp/AppConfig$InventoryConfig.class]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public id.co.bippo.inventory.perpetual.PerpetualInventoryRepository id.co.bippo.springapp.AppConfig$InventoryConfig.perpInvRepo()] threw exception; nested exception is java.lang.NullPointerException: Data Source must be provided.; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'perpInvRepo' defined in class path resource [id/co/bippo/springapp/AppConfig$InventoryConfig.class]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public id.co.bippo.inventory.perpetual.PerpetualInventoryRepository id.co.bippo.springapp.AppConfig$InventoryConfig.perpInvRepo()] threw exception; nested exception is java.lang.NullPointerException: Data Source must be provided. 	org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:730) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:196) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1045) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:949) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:487) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:912) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:855) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:770) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:486) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	... 25 more Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'perpetualInventoryManagerImpl' defined in file [/home/rudi/git/bippo-commerce5/inventory/target/classes/id/co/bippo/inventory/perpetual/PerpetualInventoryManagerImpl.class]: Unsatisfied dependency expressed through constructor argument with index 1 of type [id.co.bippo.inventory.perpetual.PerpetualInventoryRepository]: : Error creating bean with name 'perpInvRepo' defined in class path resource [id/co/bippo/springapp/AppConfig$InventoryConfig.class]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public id.co.bippo.inventory.perpetual.PerpetualInventoryRepository id.co.bippo.springapp.AppConfig$InventoryConfig.perpInvRepo()] threw exception; nested exception is java.lang.NullPointerException: Data Source must be provided.; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'perpInvRepo' defined in class path resource [id/co/bippo/springapp/AppConfig$InventoryConfig.class]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public id.co.bippo.inventory.perpetual.PerpetualInventoryRepository id.co.bippo.springapp.AppConfig$InventoryConfig.perpInvRepo()] threw exception; nested exception is java.lang.NullPointerException: Data Source must be provided. 	org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:730) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:196) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1045) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:949) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:487) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:912) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:855) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:770) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:795) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:723) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	... 38 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'perpInvRepo' defined in class path resource [id/co/bippo/springapp/AppConfig$InventoryConfig.class]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public id.co.bippo.inventory.perpetual.PerpetualInventoryRepository id.co.bippo.springapp.AppConfig$InventoryConfig.perpInvRepo()] threw exception; nested exception is java.lang.NullPointerException: Data Source must be provided. 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:581) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1025) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:921) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:487) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:912) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:855) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:770) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:795) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:723) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	... 52 more Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public id.co.bippo.inventory.perpetual.PerpetualInventoryRepository id.co.bippo.springapp.AppConfig$InventoryConfig.perpInvRepo()] threw exception; nested exception is java.lang.NullPointerException: Data Source must be provided. 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:181) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:570) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	... 65 more Caused by: java.lang.NullPointerException: Data Source must be provided. 	org.parboiled.common.Preconditions.checkNotNull(Preconditions.java:192) ~[parboiled-core-1.1.4.jar:1.1.4] 	id.co.bippo.springapp.AppConfig$InventoryConfig.perpInvRepo(AppConfig.java:1543) ~[classes/:na] 	id.co.bippo.springapp.AppConfig$InventoryConfig$$EnhancerByCGLIB$$3263d982.CGLIB$perpInvRepo$1() ~[AppConfig$InventoryConfig$$EnhancerByCGLIB$$3263d982.class:na] 	id.co.bippo.springapp.AppConfig$InventoryConfig$$EnhancerByCGLIB$$3263d982$$FastClassByCGLIB$$6d37a883.invoke() ~[AppConfig$InventoryConfig$$EnhancerByCGLIB$$3263d982$$FastClassByCGLIB$$6d37a883.class:na] 	org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:286) ~[spring-context-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	id.co.bippo.springapp.AppConfig$InventoryConfig$$EnhancerByCGLIB$$3263d982.perpInvRepo() ~[AppConfig$InventoryConfig$$EnhancerByCGLIB$$3263d982.class:na] 	sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)(NativeMethodAccessorImpl.java) ~[na:1.7.0_25] 	sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_25] 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_25] 	java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_25] 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:160) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE] 	... 66 more ```  Annotation config snippet:  ``` @Configuration @Lazy(false) public static class SqlConfig { 	 	public static final String POSTGRESQL_DRIVER = ""org.postgresql.Driver""; 	private static final Logger log = LoggerFactory 			.getLogger(AppConfig.SqlConfig.class);  	@Value(""#{soluvasProps.sqlUrl}"") 	private String jdbcUrl; 	@Value(""#{soluvasProps.sqlUser}"") 	private String jdbcUser; 	@Value(""#{soluvasProps.sqlPassword}"") 	private String jdbcPassword; 	 	@Bean(destroyMethod=""close"") 	public DataSource dataSource() { 		log.info(""Connecting to {} as {}"", jdbcUrl, jdbcUser); 		final ComboPooledDataSource cpds = new ComboPooledDataSource(); 		try { 			cpds.setDriverClass(POSTGRESQL_DRIVER); 		} catch (PropertyVetoException e) { 			throw new InventoryException(""Cannot load PostgreSQL driver "" + POSTGRESQL_DRIVER + "": "" + e, e); 		} 		 		cpds.setConnectionCustomizerClassName(SoluvasConnectionCustomizer.class.getName()); 		cpds.setAutoCommitOnClose(false); 		cpds.setJdbcUrl(jdbcUrl); 		cpds.setUser(jdbcUser); 		cpds.setPassword(jdbcPassword); 		cpds.setTestConnectionOnCheckin(true); 		return cpds; 	}  }  @Configuration @Lazy(false) @ComponentScan(""id.co.bippo.inventory"") public static class InventoryConfig { 	private static final Logger log = LoggerFactory 			.getLogger(AppConfig.InventoryConfig.class); 	@Inject 	private EventBus eventBus; 	@Value(""#{soluvasProps.sqlUrl}"") @Deprecated 	private String jdbcUrl; 	@Value(""#{soluvasProps.sqlUser}"") @Deprecated 	private String jdbcUser; 	@Value(""#{soluvasProps.sqlPassword}"") @Deprecated 	private String jdbcPassword; 	@Value(""#{soluvasProps.perpetualMode}"") 	private String perpetualModeStr; 	@Inject 	private QtyInProductUpdater qtyInProductUpdater; 	@Inject 	private PerpetualInventoryUpdater perpInvUpdater; 	@Inject 	private DataSource dataSource; 	 	@PostConstruct 	public void subscribe() { 		eventBus.register(perpInvUpdater); 		eventBus.register(qtyInProductUpdater); 	} 	 //		@PreDestroy //		public void unsubscribe() { //			if (eventBus != null) { //				eventBus.unregister(qtyInProductUpdater); //				eventBus.unregister(perpInvUpdater); //			} //		} 	 	@Bean @Lazy 	public PerpetualInventoryRepository perpInvRepo() { 		Preconditions.checkNotNull(dataSource, ""Data Source must be provided.""); 		 		final PerpetualMode perpetualMode = PerpetualMode.valueOf(perpetualModeStr); //			final PerpetualMode perpetualMode = PerpetualMode.valueOf(soluvasProps.getProperty(""perpetualMode"", PerpetualMode.LEGACY.name())); 		log.info(""Perpetual mode: {} from {}. Data Source: {}"",  				perpetualMode, perpetualModeStr, dataSource); 		// TODO: do not hardcode principals 		switch (perpetualMode) { 		case DAILY: 			return new DailyPerpetualInventoryRepository(ImmutableSet.of(""base_color"", ""base_size""),  					jdbcUrl, jdbcUser, jdbcPassword); 		case JOURNAL: 			return new JournalPerpetualInventoryRepository(ImmutableSet.of(""base_color"", ""base_size""),  					dataSource); 		default: 			throw new IllegalArgumentException(""Unknown perpetualMode: "" + perpetualMode); 		} 	} 	 } ```  Cause:  This is caused by cyclic dependency. In this case:  1. InventoryConfig `@Configuration` depends on QtyInProductUpdater, PerpetualInventoryUpdater, and DataSource (this exact order triggers the bug, reordering the dependency may mask the problem). 2. PerpetualInventoryUpdater depends on PerpetualInventoryManager 3. PerpetualInventoryManager depends on PerpetualInventoryRepository 4. PerpetualInventoryRepository is inside InventoryConfig `@Configuration`, which 5. when Spring tries to create perpInvRepo(), since `@Inject` dataSource has not been injected, then throws NPE  The workaround is to split InventoryConfig into two separate `@Configuration`, so the dependency is acylic.  However, finding this workaround took a long time for me, because of the lack of information in exception trace. And the NPE is confusing, because the 'dataSource' dependency is `@Inject-ed`, how could it be null?  Spring should detect this condition, and throw the appropriate exception instead. In this case, the error would be e.g. ""Cannot initialize InventoryConfig `@Configuration`, because dependency `@Inject` perpInvUpdater depends on PerpetualInventoryManager which depends on PerpetualInventoryRepository in not-yet-initialized InventoryConfig `@Configuration` (cyclic dependency).""  The exact wording is flexible, but this information would be very helpful to diagnose when this condition occurs and to resolve.   ---  **Affects:** 3.2.4  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2013-11-13T01:37:01Z","2019-01-12T05:26:28Z"
"","15689","Shared @Configuration exception with multi-threaded Tomcat deployment [SPR-11062]","**[Rostislav Hristov](https://jira.spring.io/secure/ViewProfile.jspa?name=rostislav.hristov)** opened **[SPR-11062](https://jira.spring.io/browse/SPR-11062?redirect=false)** and commented  Two web applications that use a shared `@Configuration` deploy just fine on a standard Tomcat 7.x distribution. Enabling the multi-threaded deployment leads to the following exception:  SEVERE: Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'viewResolver' defined in class path resource [com/foo/common/CommonConfiguration.class]: Initialization of bean failed; nested exception is org.springframework.context.ApplicationContextException: Cannot reinitialize with different application context: current one is [WebApplicationContext for namespace 'spring-servlet': startup date [Mon Nov 04 15:40:36 EET 2013]; root of context hierarchy], passed-in one is [WebApplicationContext for namespace 'spring-servlet': startup date [Mon Nov 04 15:40:36 EET 2013]; root of context hierarchy]  The issue can be reproduced with the provided test case. It has to be built using Maven and executed using the startup script in assembly/target/base-instance. The exception is only thrown when the Tomcat's server.xml configuration is customized like this:  \   ---  **Affects:** 3.2.4  **Attachments:** - [bug.zip](https://jira.spring.io/secure/attachment/21470/bug.zip) (_21.50 kB_)  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-11-04T06:08:16Z","2019-01-12T00:21:19Z"
"","16297","Fix documentation link [SPR-11674]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11674](https://jira.spring.io/browse/SPR-11674?redirect=false)** and commented  http://screencast.com/t/5TFiHtOOPQe   ---  **Affects:** 4.0.3","closed","status: duplicate,","spring-projects-issues","2014-04-07T21:22:06Z","2019-01-11T21:02:31Z"
"","16283","Allow use of ""."" as path separator in @MessageMapping methods and in simple broker [SPR-11660]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11660](https://jira.spring.io/browse/SPR-11660?redirect=false)** and commented  At present STOMP destinations are mapped to `@MessageMapping` methods with Ant-style patterns. Likewise the simple message broker supports Ant-style patterns style destinations.  This is okay since in STOMP destination are opaque and brokers are free to define the exact semantics. Ant style patterns are an attractive choice for web development due to their similarity to URL paths.  In messaging however ""."" is more commonly used as a separator and may be a more fitting choice. This ticket is to explore the possibility of using ""."" instead of ""/"" as separator. The `AntPathMatcher` does support using another separator char, so it might even be trivial to switch the style for message mapping purposes.  As for wildcard support it can differ across brokers. A wildcard is commonly used for matching one segment. Recursive matching however varies, e.g. `#` (hash) in AMQP, `**` in Apollo, `>` in ActiveMQ. It may be relatively easy to make AntPatcher configurable with regards to what it uses for recursive matching. That would make it possible for the simple broker to support all of those and therefore make it easier to switch from the simple broker to a full featured broker.  The configuration could expose this centrally, e.g. default separator, single match and recursive match characters.  ---  **Affects:** 4.0.3  **Sub-tasks:** - #16623 Improve documentation for using ""."" vs ""/"" as separators with STOMP/WebSocket messaging  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/3297657f16c2cee8633f8770ab75b294aa819e53, https://github.com/spring-projects/spring-framework-issues/commit/aeed12526b67658bd0b9d3cac2b5c041ab8a3a2e  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2014-04-04T09:24:53Z","2019-01-11T21:03:10Z"
"","16278","Improve handling of disconnect events in STOMP broker relay [SPR-11655]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11655](https://jira.spring.io/browse/SPR-11655?redirect=false)** and commented  It is possible for messages to be forwarded around the same time when the connection to the broker is lost (e.g. broker is shut down) or after a DISCONNECT is sent to the broker and the connection is in the process of being closed.  Such messages may fail in a couple of ways, either the forward fails or the connection becomes null leading to a NPE. The exceptions and messages are expected and harmless but cause alarm.  The logic can be refined to better handle this situation and avoid error messages for cases where we know it's not really an error.   ---  **Affects:** 4.0.3","closed","type: enhancement,","spring-projects-issues","2014-04-03T19:31:20Z","2014-05-01T01:36:44Z"
"","16266","Optimize performance of escaping in StompEncoder and StompDecoder [SPR-11643]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11643](https://jira.spring.io/browse/SPR-11643?redirect=false)** and commented   ---  **Affects:** 4.0.3","closed","type: enhancement,","spring-projects-issues","2014-04-01T10:59:55Z","2014-05-01T01:36:44Z"
"","16259","Upgrade reactor-tcp 1.0.1 to reactor-net 1.1 [SPR-11636]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11636](https://jira.spring.io/browse/SPR-11636?redirect=false)** and commented   ---  **Affects:** 4.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/08f0395033e81e09e21bb85cea7b66194e9deabb, https://github.com/spring-projects/spring-framework/commit/59703981c4aa5f8c7f57c958256964370fa3257c, https://github.com/spring-projects/spring-framework/commit/1b59b4eb2694ba5c1db4dfe1dc786ccfe0e8218a","closed","type: task,","spring-projects-issues","2014-03-31T08:13:44Z","2014-05-01T01:36:42Z"
"","16246","Adding a ChannelInterceptor suppresses default executor settings in the XML namespace [SPR-11623]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11623](https://jira.spring.io/browse/SPR-11623?redirect=false)** and commented  Adding the following turns off the default executor settings:  ```xml                      ```  However the default should be turned off only when there is an executor sub-element:  ```xml                           ```    ---  **Affects:** 4.0.3","closed","type: bug,","spring-projects-issues","2014-03-28T08:44:21Z","2014-05-01T01:36:42Z"
"","16244","Update NativeWebSocketSession getters to return basic information required after close [SPR-11621]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11621](https://jira.spring.io/browse/SPR-11621?redirect=false)** and commented  Currently NativeWebSocketSession implementations delegate for data available from the native session and contain fields for data that may not be available that way.  This is okay however the underlying session can raise exceptions if any of its methods are called after it is closed, e.g.:  ```java java.lang.IllegalStateException: The WebSocket session has been closed and no method (apart from close()) may be called on a closed session         at org.apache.tomcat.websocket.WsSession.checkState(WsSession.java:652)         at org.apache.tomcat.websocket.WsSession.getUserPrincipal(WsSession.java:581)         at org.springframework.web.socket.adapter.standard.StandardWebSocketSession.getPrincipal(StandardWebSocketSession.java:123)         at org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.getPrincipal(WebSocketServerSockJsSession.java:73)         at org.springframework.web.socket.messaging.StompSubProtocolHandler.afterSessionEnded(StompSubProtocolHandler.java:364)         at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.clearSession(SubProtocolWebSocketHandler.java:352)         at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.afterConnectionClosed(SubProtocolWebSocketHandler.java:347) ```  This is an issue for fields such as the accepted sub-protocol and the Principal that get invoked from SubProtocolWebSocketHandler and StompSubProtocolHandler after the session is closed. We can ensure that those methods never delegate by storing the information internally as fields.   ---  **Affects:** 4.0.3","closed","type: enhancement,","spring-projects-issues","2014-03-28T07:51:42Z","2014-05-01T01:36:42Z"
"","16210","Provide defensive mechanism to prevent slow WebSocket clients from consuming server resources [SPR-11586]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11586](https://jira.spring.io/browse/SPR-11586?redirect=false)** and commented  When sending messages to slow WebSocket clients through a WebSocketSession, which could be an actual WebSocket or an HTTP based (fallback) transport, the thread(s) performing the send can be held up. As more messages are broadcast the problem compounds.  There needs to be a defensive mechanism to guard against this situation and prevent a slow client from consuming more than a single thread.  Some degree of buffering along with a timeout value are required to ensure that the slow client is eventually removed completely.  ---  **Affects:** 4.0.2  This issue is a sub-task of #16076  1 votes, 5 watchers","closed","type: task,","spring-projects-issues","2014-03-20T22:28:29Z","2019-01-11T21:32:56Z"
"","16204","Remove default use of SimpleAsyncTaskExecutor in WebSocketClient implementations [SPR-11580]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11580](https://jira.spring.io/browse/SPR-11580?redirect=false)** and commented  Currently WebSocketClient implementations use a SimpleAsyncTaskExecutor by default to avoid blocking when connecting.  Not using any executor is arguably a better default for the case where a large number of connections are made. If connections are opened quickly, the difference probably won't be noticed, or if they're slow it leads to a realization that a task executor can be configured.  By contrast a SimpleAsyncTaskExecutor leads to thread creation, a more subtle effect that is harder to realize.   ---  **Affects:** 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9552c82e2d81bcb6c781793e1fe14708bd4db25b","closed","type: enhancement,","spring-projects-issues","2014-03-19T07:31:15Z","2014-03-26T22:34:07Z"
"","16199","Support configuring WebSocket message buffer size [SPR-11575]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11575](https://jira.spring.io/browse/SPR-11575?redirect=false)** and commented  As explained in #16152, stomp.js and the Dart STOMP client split messages larger than 16K. #16152 will ensure support for re-assembling such messages on the server side with a configurable buffer size.  However, Tomcat's default WebSocket message buffer size is 8K (Jetty is 64K), which means the support for large messages still won't work unless Tomcat is configured for 16K. Therefore when using the Spring Framework STOMP over WebSocket support, 16K would be a better default to be auto-configured in the Java config and XML namespace.  ---  **Affects:** 4.0.2  **Issue Links:** - #16152 Support receiving fragmented STOMP frames","closed","type: enhancement,","spring-projects-issues","2014-03-18T10:51:44Z","2019-01-11T21:33:53Z"
"","16187","Refine BrokerAvailabilityEvent behavior in spring-messaging [SPR-11563]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11563](https://jira.spring.io/browse/SPR-11563?redirect=false)** and commented  Turn off broker availability immediately when `StompBrokerRelayMessageHandler` is stopped rather than simply shutting down the TcpClient and waiting until the system connection is closed. Also reject messages when the broker becomes unavailable.  Add accessor for `brokerAvailable` to `AbstractBrokerMessageHandler` and ensure the flag is always set regardless of the presence of an eventPublisher.    ---  **Affects:** 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6bcbb94abac229b70a8b0a89b12ce461d4321a8b","closed","type: enhancement,","spring-projects-issues","2014-03-16T11:31:42Z","2014-03-26T22:34:10Z"
"","16180","Increase default pool size for clientInboundChannel and clientOutboundChannel in WebSocket config [SPR-11556]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11556](https://jira.spring.io/browse/SPR-11556?redirect=false)** and commented  ---  **Affects:** 4.0.2  This issue is a sub-task of #16076  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2c6d6b524dc60e27511a242801563b7878d21f04","closed","type: task,","spring-projects-issues","2014-03-14T12:37:41Z","2019-01-11T21:36:12Z"
"","16163","Optimize locking mechanism around storing flash attributes [SPR-11538]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11538](https://jira.spring.io/browse/SPR-11538?redirect=false)** and commented  Currently `AbstractFlashMapManager` automatically locks on a static write lock when adding to or updating the underlying `List` storage. The locking occurs at the start of a request, if there are expired FlashMap's (shouldn't be frequent, e.g. redirect that did not succeeded)  or just before a redirect if the controller added flash attributes to be saved. Therefore locking is far from being used with every request.  Nevertheless locking could be improved in a couple of ways. First, it shouldn't be automatic in AbstractFlashMapManager. Some implementations like the cookie-based one coming in 4.1 (#13637) don't need it. Second, the lock can be more focused. The `SessionFlashMapManager` could use `WebUtils.getSessionMutex(HttpSession)` for locking on the HTTP session or a session attribuite (with `HttpSessionMutexListener`).  ---  **Affects:** 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7399723165a3599018eec12edebf49e880f1816a","closed","type: enhancement,","spring-projects-issues","2014-03-11T11:24:17Z","2019-01-11T21:36:32Z"
"","16141","Spring MVC Test can fail to obtain async result due to timing issue [SPR-11516]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11516](https://jira.spring.io/browse/SPR-11516?redirect=false)** and commented  The simplest way to reproduce the issue is to return a DeferredResult with a set value.  ---  **Affects:** 3.2.8, 4.0.2  **Issue Links:** - #16161 Unstable MVC test for controllers that returns DeferredResult (_**""is duplicated by""**_) - #15464 MockMvc can't be test under multiple threads. - #21189 Concurrent result may be missed due to a race condition in MockMvc  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: bug,","spring-projects-issues","2014-03-04T18:34:30Z","2019-01-11T21:38:18Z"
"","16121","Provide guidance on using X-Frame-Options with SockJS iframe transports [SPR-11496]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11496](https://jira.spring.io/browse/SPR-11496?redirect=false)** and commented  SockJS has a couple of iframe-based transports. Those transports fail when using the Spring Security Java config, which automatically adds the `X-Frame-Options: DENY` response header (see [documentation](http://docs.spring.io/spring-security/site/docs/3.2.0.RELEASE/reference/htmlsingle/#headers-frame-options)). Adding the following for example seems to work:  ```java @EnableWebSecurity public class WebSecurityConfig extends WebSecurityConfigurerAdapter {    @Override   protected void configure(HttpSecurity http) throws Exception {     http       .headers().addHeaderWriter(         new XFrameOptionsHeaderWriter(             XFrameOptionsHeaderWriter.XFrameOptionsMode.SAMEORIGIN))         .and()      ...    } } ```  ---  **Affects:** 4.0.2  **Issue Links:** - #16150 Doc: SockJS not working in IE9 when Spring Security is enabled (_**""is duplicated by""**_) - [SEC-2501](https://jira.spring.io/browse/SEC-2501) Provide a simpler way to customize X-Frame-Options mode used by default in the Java config  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15188a8eee31c0d42468bc11dd8d4e84901ff988","closed","in: web,","spring-projects-issues","2014-02-28T11:44:45Z","2019-01-11T21:21:43Z"
"","16111","Expose path-related request mapping settings in the MVC Java config [SPR-11486]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11486](https://jira.spring.io/browse/SPR-11486?redirect=false)** and commented  The MVC XML namespace recently exposed path-related request mapping settings (see #14796). Although such settings can be configured through MVC Java config by extending directly from `WebMvcConfigurationSupport` and overriding the RequestMappingHandlerMapping `@Bean` method, it would be nice to expose the same options through the WebMvcConfigurer interface.  Path related settings are very commonly customized so it's worth making it easier and obvious. It would also help Spring Boot users who otherwise currently have to take over the entire web auto configuration (see https://github.com/spring-projects/spring-boot/issues/401). Last but not least this provides consistency with the XML namespace.  ---  **Affects:** 4.0.2  **Issue Links:** - #14796 Expose path-related request mapping settings in the MVC XML namespace - #18757 Backport MVC config path config options to 3.2.x  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-02-26T07:44:26Z","2019-01-11T21:22:14Z"
"","16078","Add guidance on scaling when using @EnableWebSocketMessageBroker [SPR-11452]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11452](https://jira.spring.io/browse/SPR-11452?redirect=false)** and commented  ---  **Affects:** 4.0.2  This issue is a sub-task of #16076","closed","in: web,","spring-projects-issues","2014-02-19T12:40:00Z","2019-01-11T21:24:22Z"
"","15982","AbstractAnnotationConfigDispatcherServletInitializer does not allow consolidating all configuration into the ""root"" context [SPR-11357]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11357](https://jira.spring.io/browse/SPR-11357?redirect=false)** and commented  For single servlet deployments, Spring configuration does not have to be split into ""root"" context configuration and ""DispatcherServlet"" configuration. When consolidating all configuration, it should be possible to do so in the ""root"" context (e.g. for application that use Spring Security).  In web.xml it's possible to leave the contextConfigLocation attribute of the DispatcherServlet empty and load all Spring configuration in the root context.  The `AbstractAnnotationConfigDispatcherServletInitializer` however prevents `createServletApplicationContext` from returning null.  ---  **Affects:** 3.2.6, 4.0 GA  **Issue Links:** - #20590 [doc] AbstractDispatcherServletInitializer support DispatcherServlet from Root Context  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ab5f1256bfc499dfcbca1f5468aaafb188d9f5dd, https://github.com/spring-projects/spring-framework/commit/341d645d09ee728c9ae2b0c60def8803c49ca75f, https://github.com/spring-projects/spring-framework/commit/5307a87d1ad7c28e1f1a2887ab86ea3b09b5a326, https://github.com/spring-projects/spring-framework/commit/21eb8db5bc52d3e1b69c53362ad07151a65aa2fb, https://github.com/spring-projects/spring-framework/commit/9845d9eb21808d8ed5a7a33323003e2629c70dc3  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: bug,","spring-projects-issues","2014-01-24T07:27:30Z","2019-01-11T18:41:00Z"
"","15956","AbstractWebSocket client doesn't allow setting Cookie header  [SPR-11332]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11332](https://jira.spring.io/browse/SPR-11332?redirect=false)** and commented   ---  **Affects:** 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c376ee92cd8eeeb6bb19b5d529fd2abdb0ebd8a0","closed","type: bug,","spring-projects-issues","2014-01-20T10:24:44Z","2014-01-28T13:07:17Z"
"","15902","UnsupportedOperationException with use of AlternativeJdkIdGenerator on z/OS WAS 8.5 [SPR-11278]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11278](https://jira.spring.io/browse/SPR-11278?redirect=false)** and commented  This issue was reported against Spring Integration 3. Since Spring Integration uses the same same id generation code as the spring-messaging module, we need to fix the issue in the Spring Framework's spring-messaging module as well.  Here is an example stack trace:  ``` java.lang.UnsupportedOperationException: Hardware error, function engineGenerateSeed has no meaning in hardware at com.ibm.crypto.hdwrCCA.provider.SecureRandom.engineGenerateSeed(SecureRandom.java:66) at java.security.SecureRandom.generateSeed(SecureRandom.java:343) at org.springframework.integration.MessageHeaders$AlternativeJdkIdGenerator.(MessageHeaders.java:297) ```  See [INT-3252](https://jira.spring.io/browse/INT-3252) for the complete detail of the original report.   ---  **Affects:** 4.0 GA  **Issue Links:** - [INT-3255](https://jira.spring.io/browse/INT-3255) Upgrade to Spring Framework 4.0.1 (_**""is depended on by""**_) - [INT-3252](https://jira.spring.io/browse/INT-3252) ""function engineGenerateSeed has no meaning in hardware"" on z/OS WAS 8.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1f49f994e69bcfcccbdd42d9823986d849afd8b0","closed","type: bug,","spring-projects-issues","2014-01-02T06:56:54Z","2014-01-28T13:07:19Z"
"","15817","Split out tests specific to AbstractMethodMessageHandler from tests for SimpAnnotationMethodMessageHandler [SPR-11191]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11191](https://jira.spring.io/browse/SPR-11191?redirect=false)** and commented   ---  **Affects:** 4.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/db9b6fa28e47fa94c0cb7aac1dd2eb6b26a3b91d","closed","type: task,","spring-projects-issues","2013-12-06T12:37:20Z","2014-01-28T13:07:17Z"
"","15810","Allow easier customization of MessageConverters with @EnableWebSocketMessageBroker and XML namespace [SPR-11184]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11184](https://jira.spring.io/browse/SPR-11184?redirect=false)** and commented  `WebSocketMessageBrokerConfigurer` should provide a method for customizing the MessageConverter's use, for example to customize JSON message conversion.  We should also consider specifically simplifying how JSON customizations are made as that is a very likely use case.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4342497305d54091ea327fc4368b96daade556a0  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2013-12-06T09:36:32Z","2014-01-28T13:07:17Z"
"","15809","Consider improvements to SockJS message cache [SPR-11183]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11183](https://jira.spring.io/browse/SPR-11183?redirect=false)** and commented  The cache is intended to buffer messages in the period when one HTTP streaming/polling connection ends and before the client open another one (a very brief period of time usually).  Currently if the buffer is full an IllegalStateException results. Instead we could block the message sending thread pushing the overload back to the consumer.   ---  **Affects:** 4.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c1f3da082c3b0fb470cee991d7ae96264d52f5bb","closed","type: enhancement,","spring-projects-issues","2013-12-06T08:23:34Z","2014-01-28T13:07:15Z"
"","15762","Fix casing in spring mvc namespace attributes ""enableMatrixVariables"" and ""ignoreDefaultModelOnRedirect"" [SPR-11136]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11136](https://jira.spring.io/browse/SPR-11136?redirect=false)** and commented  They should be ""enable-matrix-variables"" and ""ignore-default-model-on-redirect"".   ---  **Affects:** 4.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5e02a6dda37ba6ff3b2025a1b2a6200c49cdcdaf","closed","type: bug,","spring-projects-issues","2013-12-02T07:25:37Z","2013-12-03T15:15:35Z"
"","15747","Switch to Jackson 2 in Spring MVC Test's own unit tests [SPR-11121]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11121](https://jira.spring.io/browse/SPR-11121?redirect=false)** and commented   ---  **Affects:** 4.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1c83e8653a8079381fd2579919b8fd16a90fdd44","closed","type: task,","spring-projects-issues","2013-11-25T08:17:35Z","2014-01-28T13:07:06Z"
"","15745","Add mention of @RestController to reference docs [SPR-11119]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11119](https://jira.spring.io/browse/SPR-11119?redirect=false)** and commented  ---  **Affects:** 4.0 RC2  **Issue Links:** - #15440 Add `@RestController` to stereotype a controller that is going to be used for `@ResponseBody` rendering  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f7d0d5159d9c183a117b31ecade158a397b2b230","closed","type: task,","spring-projects-issues","2013-11-25T07:48:31Z","2019-01-13T06:57:21Z"
"","15744","Document ability to create links to Spring MVC controller methods [SPR-11118]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11118](https://jira.spring.io/browse/SPR-11118?redirect=false)** and commented  ---  **Affects:** 4.0 RC2  **Issue Links:** - #13468 Provide mechanism for creating links to controllers and controller methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/964da0badb7db8241eff506cacc1bbd1cf784aff","closed","type: task,","spring-projects-issues","2013-11-25T07:45:43Z","2019-01-11T19:27:23Z"
"","15741","Add documentation for the WebSocket and STOMP/WebSocket support [SPR-11115]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11115](https://jira.spring.io/browse/SPR-11115?redirect=false)** and commented  ---  **Affects:** 4.0 RC2  **Issue Links:** - #13994 Support for WebSocket messaging","closed","type: task,","spring-projects-issues","2013-11-25T07:41:31Z","2019-01-11T19:28:45Z"
"","15714","Connection to STOMP broker closed after a few successful messages are read [SPR-11088]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11088](https://jira.spring.io/browse/SPR-11088?redirect=false)** and commented  StompDecoder is throwing a variety of exceptions after having successfully read a few messages from an external message broker. All cases seem to point to not having any more data read from the input ByteBuffer while the message hasn't yet been fully received.  For example it may fail to read a STOMP header like this:  org.springframework.messaging.simp.stomp.StompConversionException: Illegal header: 'content-leng'. A header must be of the form \:\\n  Or it may succeed to read the headers but fail to read the STOMP message payload with a BufferUnderflowException (if there is a content-length header) or ""Frame must be terminated with a null octet"" if there is no content-length header and it was expecting a '0' byte.   ---  **Affects:** 4.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e84885c65508a6182dd8ed204afebe45503898cf, https://github.com/spring-projects/spring-framework/commit/6802f813dea1759283e8bc4f0ea81961c342c929","closed","type: bug,","spring-projects-issues","2013-11-12T17:32:48Z","2013-12-03T15:15:34Z"
"","15711","Add support for default prefix in @SendTo and @SendToUser annotations [SPR-11085]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11085](https://jira.spring.io/browse/SPR-11085?redirect=false)** and commented  A common expected pattern when using `@SendTo` and `@SendToUser` is to broadcast to the same destination as the input message but a different prefix.  For example the client may send a message to ""/app/foo"" where the prefix ""/app"" is removed for mapping purposes. The return value from the method may then be broadcast to ""/topic/foo"" where ""/topic"" is a default prefix configurable on `SendToMethodReturnValueHandler`. The message handling method would then simply be:  ```java @MessageMapping(""/foo"") public String handleFoo() {   return ""foo""; } ```    ---  **Affects:** 4.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/72dec7d0fed80cf74139157690641096de23f41a","closed","type: enhancement,","spring-projects-issues","2013-11-11T13:34:44Z","2013-12-03T15:15:36Z"
"","15704","Disable the processing of external entities in SourceHttpMessageConverter by default [SPR-11078]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11078](https://jira.spring.io/browse/SPR-11078?redirect=false)** and commented  This is a follow-up fix related to the issue reported in #15432.  ---  **Affects:** 3.2.4, 4.0 RC1  **Issue Links:** - #15432 Fix potential security risk when using Spring OXM - #16003 Jaxb2RootElementHttpMessageConverter is susceptible to XXE vulnerability","closed","type: enhancement,","spring-projects-issues","2013-11-07T09:24:19Z","2019-01-11T19:23:33Z"
"","15703","Improve process of subscribing to a user/session-specific STOMP destination [SPR-11077]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11077](https://jira.spring.io/browse/SPR-11077?redirect=false)** and commented  Remove the need for clients to extract a 'queue-suffix' header from the STOMP CONNECTED frame and append it manually to destinations.    ---  **Affects:** 4.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0340cc5f03c2d2ece2352d8f04bdc87344d27acc","closed","type: enhancement,","spring-projects-issues","2013-11-07T06:58:14Z","2013-12-03T15:15:35Z"
"","15692","Replace SubscribableChannel with AbstractSubscribableChannel in WebSocketMessageBrokerConfigurationSupport [SPR-11065]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11065](https://jira.spring.io/browse/SPR-11065?redirect=false)** and commented   ---  **Affects:** 4.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6a18daea332b8695aa7939b6f9851af84afe5a52","closed","type: enhancement,","spring-projects-issues","2013-11-04T11:23:12Z","2013-12-03T15:15:30Z"
"","15652","Support class-level mappings via @MessageMapping or @SubscribeEvent [SPR-11024]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11024](https://jira.spring.io/browse/SPR-11024?redirect=false)** and commented   ---  **Affects:** 4.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b8809daf5fb6d0608334c2fcbfd3091d5122263a","closed","type: enhancement,","spring-projects-issues","2013-10-23T09:16:35Z","2013-10-31T12:27:58Z"
"","15613","Add support for resolving message header based arguments [SPR-10985]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10985](https://jira.spring.io/browse/SPR-10985?redirect=false)** and commented  Add `@Header` and `@Headers` annotations. Also MessageHeaders and MessageHeaderAccessor should be resolvable by type without annotations.   ---  **Affects:** 4.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8ae88c20d1e8808d852e37908da2a5fc6b5e077a","closed","type: enhancement,","spring-projects-issues","2013-10-13T08:07:49Z","2013-10-31T12:28:02Z"
"","15579","Add support for configuring ResourceResolver's through the MVC config [SPR-10951]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10951](https://jira.spring.io/browse/SPR-10951?redirect=false)** and commented  ---  **Affects:** 4.0 M3  **Issue Links:** - #15561 Enhance ResourceHttpRequestHandler with ResourceResolver strategy (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ea4a5d4722797d061558da2195c0285c174a0623","closed","type: enhancement,","spring-projects-issues","2013-10-01T12:06:30Z","2019-01-11T22:10:12Z"
"","15567","Keep ""cookie_needed"" property in SockJS service enabled by default [SPR-10939]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10939](https://jira.spring.io/browse/SPR-10939?redirect=false)** and commented  The **""Info test: /info""** section of the [SockJS protocol](http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html) requires a SockJS server to return a ""cookie_needed"" boolean property. The value indicates whether the use of the JSESSIONID cookie is required for the application to work (e.g. for load balancing). The protocol also specifies that when this property is set to true, a SockJS server should echo the JSESSIONID cookie back.  IE 8,9 support [XDomainRequest](http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx), which is a modified AJAX/XHR that can do requests across domains. But unfortunately it doesn't send any cookies. So when ""cookie_needed"" is set to true, the SockJS client chooses the iframe-htmlfile transport for streaming instead of XHR.  In Java Servlet containers, the use of JSESSIONID cookie is most often required for the application to function. For example it enables the use of  an HTTP session that in turn can be used to store user authentication details (e.g. Spring Security).  Therefore the ""cookie_needed"" property should be set to ""true"" by default allowing IE 8, 9 clients to work correctly in combination with Spring Security.   ---  **Affects:** 4.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/77fa8698b3687d20c2750562778f3a35b0048320","closed","type: bug,","spring-projects-issues","2013-09-26T09:22:31Z","2013-10-31T12:27:59Z"
"","15561","Enhance ResourceHttpRequestHandler with ResourceResolver strategy [SPR-10933]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10933](https://jira.spring.io/browse/SPR-10933?redirect=false)** and commented  Currently ResourceHttpRequestHandler uses a simple algorithm that takes the request path and tries to find a matching resource under one or more pre-configured locations, either under the web application root or on the classpath (e.g. under /META-INF/public-web-resources""). In order to implement more sophisticated resource serving, it should be possible to configure additional strategies for resolving the request path to a Resource, possibly even transforming the resource along the way.  A common use case is fingreprinting URLs to allow aggressive cache headers while still detecting changes when they occur (#14944). For this scenario to work a request path of ""foo-e36d2e05253c6c7085a91522ce43a0b4.css"" should resolve to resource ""foo.css"". The reverse should also be possible, i.e. a view should be able to look up the actual URL to use for ""foo.css"", e.g. ""foo-e36d2e05253c6c7085a91522ce43a0b4.css"".  Additional use cases include detecting gzipped files (extension "".gz"") and serving them instead if the client accepts ""gzip"" content encoding, locating ""css.less"" files where "".css"" is requested, etc.  In addition to locating resources, it should also be possible to transform resources. For example less-to-css transformation, gzipping, js/css minifying, etc.  ---  **Affects:** 3.2.4  **Issue Links:** - #14944 Support Content-based Hash Fingerprinted URLs in ResourceHttpRequestHandler (_**""is depended on by""**_) - #15579 Add support for configuring ResourceResolver's through the MVC config (_**""is depended on by""**_) - #10802 use RestUrlRewriteFilter to rewrite url  from ""/foo.gif"" to ""/static/foo.gif"" for visit static resource (_**""is duplicated by""**_) - #12058 Improve handling of static resources  (_**""is duplicated by""**_)  3 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2013-09-24T18:16:17Z","2019-01-11T22:10:20Z"
"","15629","mvc:resources should support serlvet mapping by prefix and by extension [SPR-11001]","**[Ronnin Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=ronnin)** opened **[SPR-11001](https://jira.spring.io/browse/SPR-11001?redirect=false)** and commented  as to the scenario below: 1. DispatcherServlet doesn't mapping the root /, but some specified urls:  ```xml    spring-web   org.springframework.web.servlet.DispatcherServlet     spring-web   /resources/*     spring-web   *.do  ```  2. mapping for static resources needs turn alwaysUseFullPath on:  ```xml  ```  Also, the feature is required at **mvc:annotation-driven**.   ---  **Affects:** 3.2.4","closed","type: enhancement,","spring-projects-issues","2013-10-18T03:41:49Z","2013-10-22T11:25:40Z"
"","15627","mvc:resources should support multiple locations by placeholder [SPR-10999]","**[Ronnin Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=ronnin)** opened **[SPR-10999](https://jira.spring.io/browse/SPR-10999?redirect=false)** and commented  As to the code below:  ```xml  ```  ``` staticsPaths=/,classpaths:statics/,file:/home/ronnin/webResources/ ```  The concrete bean created behind, **org.springframework.web.servlet.resource.ResourceHttpRequestHandler**, set **ONLY ONE** value of Resource to property **List locations**, while the expectation is **THREE** Resources   ---  **Affects:** 3.2.4","closed","status: bulk-closed,","spring-projects-issues","2013-10-18T02:25:29Z","2019-01-12T00:21:54Z"
"","15622","util:map does not recognize the attribute of value-type [SPR-10994]","**[Ronnin Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=ronnin)** opened **[SPR-10994](https://jira.spring.io/browse/SPR-10994?redirect=false)** and commented  the **util:map** bean defined as follows will fail to initialize, an error ""Type must not be null"" occurs.  ```xml   ```  as to **org.springframework.beans.factory.config.MapFactoryBean**, I find the fact:  > when the attribute of map-class is set, MapFactoryBean will try to resolve the keyType and valueType of the map from **ParameterizedType of map-class**. >  > but the attribute of **value-type** is never used.  ---  **Affects:** 3.2.4  **Issue Links:** - #14369 StackOverflowError when expression calls method which is a Collection of itself","closed","in: core,","spring-projects-issues","2013-10-16T18:37:26Z","2019-01-11T12:55:33Z"
"","15727","URLs containing %2F (forward slash) are not mapped correctly to @RequestMapping methods [SPR-11101]","**[Rodion](https://jira.spring.io/secure/ViewProfile.jspa?name=rodion)** opened **[SPR-11101](https://jira.spring.io/browse/SPR-11101?redirect=false)** and commented  Controller method:  ```java @RequestMapping(value = ""/test_url_decoding/{param1}"") public String[] testUrlDecoding(@PathVariable(""param1"") String p1) ```  Call: /test_url_decoding/a%2Fb  Expecting result: parameter p1 is set to ""a/b"". Current result: 404 Not found.  Simular problem: http://stackoverflow.com/questions/13482020/encoded-slash-2f-with-spring-requestmapping-path-param-gives-http-400  The problem was already discussed in https://jira.springsource.org/browse/SPR-7919  Suggested solution (setting decodeUrl of the HandlerMapping to false) does not work. The UrlPathHelper uses HttpServletRequest.getServletPath() method internally, which decodes the path.  Suggested implementation for non-decoding helper:  ```java public class UrlPathHelperNonDecoding extends UrlPathHelper {  	public UrlPathHelperFixed() { 		super.setUrlDecode(false); 	} 	 	@Override 	public void setUrlDecode(boolean urlDecode) { 		if (urlDecode) { 			throw new IllegalArgumentException(""Handler does not support URL decoding.""); 		} 	}  	@Override 	public String getServletPath(HttpServletRequest request) { 		String servletPath = getOriginatingServletPath(request); 		return servletPath; 	} 	  	@Override 	public String getOriginatingServletPath(HttpServletRequest request) { 		String servletPath = request.getRequestURI().substring(request.getContextPath().length()); 		return servletPath; 	} } ```  context.xml  ```xml                 ```  ---  **Affects:** 3.2.5  **Issue Links:** - #12574 Request mapping using `@PathVariable` doesn't work with URL-encoded values - #20202 [doc] Document urlDecode=false implies alwaysUseFullPath=true  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/12598f85811c61dbe2a205826274ec4dd6a85961, https://github.com/spring-projects/spring-framework/commit/d55a173e2e829baaa727daffc839fa93c1663ab5  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)  3 votes, 10 watchers","closed","type: bug,","spring-projects-issues","2013-11-20T03:00:25Z","2019-01-13T06:57:26Z"
"","15738","Type resolution fails for uninitialized factory-method declaration [SPR-11112]","**[Rod Widdowson](https://jira.spring.io/secure/ViewProfile.jspa?name=rdw@steadingsoftware.com)** opened **[SPR-11112](https://jira.spring.io/browse/SPR-11112?redirect=false)** and commented  Attached are a simple program and xml file to demonstrate.  1) two beans are defined 2) They are searched for by Class and then by Name and then by Class again. 3) Only one of the two initial searches by class succeeds. 4) Both the search by name succeed. 5) Both the second search by Class succeed.  I'm no expert so pilot error could be implicated.  This worked in 3.2.2.RELEASE but does not in 3.2.5.RELEASE  Thanks   ---  **Affects:** 3.2.5  **Attachments:** - [ccc.xml](https://jira.spring.io/secure/attachment/21506/ccc.xml) (_873 bytes_) - [SpringBug.java](https://jira.spring.io/secure/attachment/21507/SpringBug.java) (_2.10 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8e52e650f4b6c3d14203c6dd7deca01e08b8105d, https://github.com/spring-projects/spring-framework/commit/5dcd28761c515d666855ca14ddf21dffef286e10  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2013-11-24T04:29:04Z","2013-12-11T23:57:24Z"
"","15855","AutowireCapableBeanFactory no longer autowiring since version 3.2.5 [SPR-11230]","**[Roberto Ruiz](https://jira.spring.io/secure/ViewProfile.jspa?name=rober2d2)** opened **[SPR-11230](https://jira.spring.io/browse/SPR-11230?redirect=false)** and commented  I am trying to create some beans using AutowireCapableBeanFactory to configure preexisting objects, and DefaultListableBeanFactory to register beans as singletons  I create 2 simple beans: bean1 and bean2. Bean2 has an autowired reference to bean1  Till version 3.2.4, bean1 is autowired correctlly into bean2, but it stopped working after version 3.2.5  I attach an small test. Beans are created in spring.factory.configuration.MyConfig.  To execute test, just write ""mvn clean test"" in command line. Use Maven 3 and Java 7.  You may swap spring version editing pom.xml and changing ""spring.version"" property. Test will be passed with version 3.2.4.RELEASE, but not with 3.2.5.RELEASE, 3.2.6.RELEASE or 4.0.0.RELEASE  ---  **Affects:** 3.2.5, 3.2.6, 4.0 GA  **Attachments:** - [TestSpring.zip](https://jira.spring.io/secure/attachment/21546/TestSpring.zip) (_3.79 kB_)  **Issue Links:** - #15871 Regression: InjectionMetadata cache needs to handle different bean classes per bean name","closed","in: core,","spring-projects-issues","2013-12-15T18:15:50Z","2019-01-12T05:26:21Z"
"","16038","MarshallingView should not close response output stream  [SPR-11411]","**[Roberto Franchini](https://jira.spring.io/secure/ViewProfile.jspa?name=robfrank)** opened **[SPR-11411](https://jira.spring.io/browse/SPR-11411?redirect=false)** and commented  The method renderMergedOutputModel should not close the HttpServletResponse output stream. The called utility method FileCopyUtils.copy(bos.toByteArray(), response.getOutputStream()); closes the stream avoiding other output filters adding more informations.  Use streamUtils instead  For example, if the view is invoked by a url under security, the session id cookie isn't sent back to the client.  ---  **Affects:** 3.1.2, 4.0.1  **Issue Links:** - #16040 Consistently avoid close() call on Servlet OutputStream - #16269 MarshallingView should avoid temporary byte array when copying to response  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/648245b2002f1ba2a51da2ed9817730e1224fac2, https://github.com/spring-projects/spring-framework/commit/b223e6efecf0c2e4ca1b3f1631ef82e08d1a8710  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","type: bug,","spring-projects-issues","2014-02-10T05:50:25Z","2019-01-11T21:28:09Z"
"","16270","Regression: @ComponentScan fails for AnnotationConfigWebApplicationContext [SPR-11647]","**[Robert Thaler](https://jira.spring.io/secure/ViewProfile.jspa?name=rthaler)** opened **[SPR-11647](https://jira.spring.io/browse/SPR-11647?redirect=false)** and commented  After upgrading to Spring Framework 4.0.3 we are receiving a `NoSuchBeanDefinitionException` on start up of our web application.  This did not occur using Spring Framework 4.0.2.  We have the following spring java configuration for the web application:  ``` @Configuration @Import( value = { ServiceConfig.class, ... } ) public class MainConfig {   // .... }  @ComponentScan( packages = { ""some.service.package"" } ) public class ServiceConfig { } ```  The web.xml configuration looks as follows:  ```xml  	contextClass 	org.springframework.web.context.support.AnnotationConfigWebApplicationContext  	  	contextConfigLocation 	my.webapp.config    	org.springframework.web.context.ContextLoaderListener  ```  After some investigation I have found out that it works if I specify a distinct configuration class instead of a package.  So using `my.webapp.config.MainConfig` for the context param `contextConfigLocation` works, but if I have understood the documentation correctly, it should work with a package path too.   ---  **Affects:** 4.0.3  **Attachments:** - [error-debug.log](https://jira.spring.io/secure/attachment/21971/error-debug.log) (_723.72 kB_) - [error-info.log](https://jira.spring.io/secure/attachment/21972/error-info.log) (_12.18 kB_) - [success-debug.log](https://jira.spring.io/secure/attachment/21973/success-debug.log) (_1.08 MB_) - [success-info.log](https://jira.spring.io/secure/attachment/21974/success-info.log) (_8.21 kB_)  1 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2014-04-02T04:06:23Z","2014-07-18T10:16:40Z"
"","15646","Spring cannot find bean aliased with placeholder [SPR-11018]","**[Robert Kristofic](https://jira.spring.io/secure/ViewProfile.jspa?name=donroberto)** opened **[SPR-11018](https://jira.spring.io/browse/SPR-11018?redirect=false)** and commented  I have following configuration snippet:  ```  	    ```  Up to version 3.0.6 everything is OK, from version 3.0.7 (tested also on 3.2.4) I have following exception (no bean found):  ``` [testng] Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private plaut.jfos.module.core.services.DatabaseConfigService plaut.jfos.framework.shared.CurrencyHelper.databaseConfigService; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'databaseConfigService': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private plaut.jfos.framework.services.TimeService plaut.jfos.module.core.client.DatabaseConfigProvider.timeService; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [plaut.jfos.framework.services.TimeService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier(value=timeService)} [testng] 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:514) [testng] 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) [testng] 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:285) [testng] 	... 43 more ```    ---  **Affects:** 3.0.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/df7b661702a91e352e61d39a2ec5d56f7ad76d66, https://github.com/spring-projects/spring-framework/commit/e9a24da2253ea23a90f65d52f8dcf2ed3b15afc3","closed","status: bulk-closed,","spring-projects-issues","2013-10-22T08:08:04Z","2019-01-12T00:21:42Z"
"","15883","AntPathMatcher creates many temporary objects [SPR-11258]","**[Robert Gay](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.gay)** opened **[SPR-11258](https://jira.spring.io/browse/SPR-11258?redirect=false)** and commented  AntPathMatcher.doMatch appears to get called many times on each request, and it makes two calls to StringUtils.tokenizeToStringArray on each call. It looks like (but I'm admittedly not 100% sure) that at least some of the tokenizing work is being duplicated on every request, and could be precomputed at startup, or cached as it is used.  The two screenshots show the number of objects collected by the garbage collector during the loading of a single url and all associated AJAX requests (some of which result in multiple callbacks to the server). Both loads were primed once without the profiler running so that the difference between the caching version and the non-caching version would be clearer.  single-page-load-unmodified-spring.png shows the results running an unmodified version of Spring 3.1.4.RELEASE, the modified version incorporates the included patch file AntPathMatcher.java.patch.  The patch is pretty naive, and just throws everything into the same cache - I expect there's a better way to achieve a similar result.  I haven't directly tested this against 3.2.x or 4.0.x, but I did visually examine the AntPathMatcher.doMatch code and this part of it seems to have not changed since 3.1.4.   ---  **Affects:** 3.1.4, 3.2.6, 4.0 GA  **Attachments:** - [AntPathMatcher.java.patch](https://jira.spring.io/secure/attachment/21562/AntPathMatcher.java.patch) (_2.25 kB_) - [single-page-load-unmodified-spring.png](https://jira.spring.io/secure/attachment/21560/single-page-load-unmodified-spring.png) (_108.85 kB_) - [single-page-modified-spring-core.png](https://jira.spring.io/secure/attachment/21561/single-page-modified-spring-core.png) (_100.78 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff26dfdd286a47e4dfac7ab0b9fa4690653da4af","closed","type: enhancement,","spring-projects-issues","2013-12-27T13:19:40Z","2014-01-28T13:07:15Z"
"","16145","Memory leak when using annotation based auto-wiring in child context [SPR-11520]","**[Robert Cohen](https://jira.spring.io/secure/ViewProfile.jspa?name=rcon16)** opened **[SPR-11520](https://jira.spring.io/browse/SPR-11520?redirect=false)** and commented  I have a Spring Context hierarchy that is two levels where each node has it's own classloader. I load the child context using an XML bean definition and as an option, there may be a  defined within the child context's XML to enable annotation style auto-wiring. When we have this component-scan, the child classloader is not garbage collected if the child context is closed. If we use XML for all of our bean definitions, then the classloader is collected properly.  The attached test project reproduces the leak consistently after creating/closing a child context about 318 times.  Using a profiler, I can see that the child classloader is being held due to child context Classes being left in the Parent's DefaultListableBeanFactory ""allBeanNamesByType"" variable:  ``` /** Map of singleton and non-singleton bean names keyed by dependency type */ private final Map, String[]>(64); ```  They are added to the Parent DefaultListableBeanFactory allBeanNamesByType map by method DefaultListableBeanFactory. getBeanNamesForType(), however they are not removed when I close the context.  As the server is used an child contexts get redeployed, we eventually encounter OOM errors.  ---  **Affects:** 3.2.8  **Attachments:** - [parent child leak.zip](https://jira.spring.io/secure/attachment/21801/parent+child+leak.zip) (_2.23 MB_)  **Issue Links:** - #16229 AbstractApplicationEventMulticaster can leak classes - #16494 Performance regression for custom autowireBean calls with many properties - #21255 Revise cache safety check to avoid performance regression in EAR packaged applications on WildFly  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)  0 votes, 6 watchers","closed","in: core,","spring-projects-issues","2014-03-05T16:51:33Z","2019-12-18T10:15:04Z"
"","16323","Support Accept-Language header in MockHttpServletRequest's getLocale() and getLocales() methods [SPR-11701]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-11701](https://jira.spring.io/browse/SPR-11701?redirect=false)** and commented  #### Overview  Currently the MockHttpServletRequest defaults to [Locale.ENGLISH](https://github.com/spring-projects/spring-framework/blob/master/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java#L255). However, the [ServletRequest javadoc](http://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html#getLocale()) states:  > If the client request doesn't provide an Accept-Language header, this method returns the default locale for the server.  We should probably also have some sort of way to ensure that if the Accept-Language header is specified that it is synched with the Locale (similar to Content-Type).  ---  #### Deliverables  1. [x] Update class-level Javadoc for `MockHttpServletRequest` with information regarding the default locale for the mocked server. 2. (?) Ensure that `MockHttpServletRequest.getLocale()` complies with the Javadoc from the Servlet specification with regard to the `Accept-Language` header. 3. (?) Ensure that `MockHttpServletRequest.getLocales()` complies with the Javadoc from the Servlet specification with regard to the `Accept-Language` header.  ---  **Affects:** 4.0.3  **Reference URL:** https://github.com/spring-projects/spring-test-mvc-htmlunit/issues/21  **Issue Links:** - #16659 Document that MockHttpServletRequest does not comply with Servlet spec regarding Accept-Language header  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9bf73f3ab846b2b76a239f789427bc7deb3fe8fa","closed","type: enhancement,","spring-projects-issues","2014-04-16T11:53:40Z","2019-01-13T21:00:13Z"
"","16122","Make it easy to extend MockMvc builders with additional syntax [SPR-11497]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-11497](https://jira.spring.io/browse/SPR-11497?redirect=false)** and commented  Currently it is verbose to support extensions to MockMvc builders. For example, with Spring Security's new Spring MVC Test support, users would have to do something like:  ``` @WithUser(roles=""ADMIN"") public class WithUserClassLevelAuthenticationTests {      @Before     public void setup() {         mvc = MockMvcBuilders                 .webAppContextSetup(context)                 .addFilters(springSecurityFilterChain)                 .defaultRequest(get(""/"").with(securityContext()))                 .build();     } ```  Instead something like the following would be ideal:  ``` @WithUser(roles=""ADMIN"") public class WithUserClassLevelAuthenticationTests {      @Before     public void setup() {         mvc = MockMvcBuilders                 .webAppContextSetup(context)                 .with(springSecurity(springSecurityFilterChain))                 .build();     } ```  ---  **Issue Links:** - [SEC-2587](https://jira.spring.io/browse/SEC-2587) Improvements in Spring Test (_**""is depended on by""**_) - [SEC-2686](https://jira.spring.io/browse/SEC-2686) Add SecurityMockMvcConfigurer - #16625 Further updates to MockMvcConfigurer SPI","closed","type: enhancement,","spring-projects-issues","2014-02-28T13:17:24Z","2019-01-11T21:21:47Z"
"","16092","Introduce mechanism for automatic discovery of default TestExecutionListeners [SPR-11466]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-11466](https://jira.spring.io/browse/SPR-11466?redirect=false)** and commented  #### Overview  It would be nice if there were a way for a custom `TestExecutionListener` to register itself as a default `TestExecutionListener`.  This will be very valuable for the Spring Security test module that is currently in development.  ---  #### Proposal  One idea might be to allow using an SPI discovery of the `TestExecutionListener` default implementations. Each default `TestExecutionListener` could declare an `@Order` annotation to ensure that they are run in the correct order.  ---  **Affects:** 3.0 GA  **Issue Links:** - [SEC-2587](https://jira.spring.io/browse/SEC-2587) Improvements in Spring Test (_**""is depended on by""**_) - [SEC-2700](https://jira.spring.io/browse/SEC-2700) Register WithSecurityContextTestExecutionListener by default (_**""is depended on by""**_) - #16698 Document automatic discovery of default TestExecutionListeners in the reference manual (_**""is depended on by""**_) - [SEC-2015](https://jira.spring.io/browse/SEC-2015) Create spring-security-test module - #13496 Introduce mechanism for registering default TELs if a custom TEL is registered via `@TestExecutionListeners`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/66250b1f8ec044b813e5ea8b96fbdf0af250f55c, https://github.com/spring-projects/spring-framework/commit/e753f2311066b27bade362c815765086bd78c2a5, https://github.com/spring-projects/spring-framework/commit/e6d16148e576fafe094c2bc1ef975c25576eeb7b","closed","type: enhancement,","spring-projects-issues","2014-02-21T20:32:24Z","2019-01-13T06:55:42Z"
"","16039","Update javadoc to conform to JDK8's styling [SPR-11412]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-11412](https://jira.spring.io/browse/SPR-11412?redirect=false)** and commented  JDK8's javadoc was updated and no longer has the resources folder. This caused issues with the customizations made for #14788 Specifically the customizations in commit 1c724069 relied on background images existing to ensure that the white banner was visible. JDK removed this image and thus the javadoc's banner was white rather than displaying the background image.  We should update the styling to conform to JDK8's defaults with only the customizations we need.  ---  **Affects:** 4.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/14616a445a6e54a6ff18d037634bb1450db71719","closed","type: bug,","spring-projects-issues","2014-02-10T13:06:01Z","2019-01-11T21:28:13Z"
"","16000","MultipartFilter documentation [SPR-11373]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-11373](https://jira.spring.io/browse/SPR-11373?redirect=false)** and commented  We should update the documentation to have better `MultipartFilter` documentation. Some of the things that come to mind are the fact that the StandardServletMultipartResolver does not seem to work in Jetty even when the \ configuration is included on the Servlet.  If there is no Servlet, there are workarounds like Tomcat's allowCasualMultipartParsing attribute here http://tomcat.apache.org/tomcat-7.0-doc/config/context.html#Attributes   ---  **Issue Links:** - [SEC-2476](https://jira.spring.io/browse/SEC-2476) Update Spring CSRF multipart documentation to point to new MutlipartFilter docs (_**""is depended on by""**_)  0 votes, 5 watchers","closed","type: documentation,","spring-projects-issues","2014-01-30T11:32:21Z","2016-06-10T09:19:11Z"
"","15512","Add Maven 'bill-of-materials' project for 3.2.x [SPR-11204]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-11204](https://jira.spring.io/browse/SPR-11204?redirect=false)** and commented  Consider backporting the bom from #15764 to the 3.2.x branch  ---  No further details from [SPR-11204](https://jira.spring.io/browse/SPR-11204?redirect=false)","closed","type: enhancement,","spring-projects-issues","2013-12-10T18:43:19Z","2019-01-11T18:29:28Z"
"","15764","Add Maven 'bill-of-materials' project [SPR-11138]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-11138](https://jira.spring.io/browse/SPR-11138?redirect=false)** and commented  A bill-of-materials POM would be a useful addition to Spring.  See http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Importing_Dependencies (search for BOM)  ---  **Issue Links:** - #15113 Publish Spring BOM with Spring releases (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/22ece06b39d8b22c4e4b7723583beb30b3476afb, https://github.com/spring-projects/spring-framework/commit/92e144a8a8471b024d32459f23f4151023d2f9b1","closed","type: task,","spring-projects-issues","2013-12-02T11:30:52Z","2019-01-11T19:27:19Z"
"","15588","Migrate from docbook to asciidoctor [SPR-10960]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10960](https://jira.spring.io/browse/SPR-10960?redirect=false)** and commented  ---  **Sub-tasks:** - #15722 Polish asciidoctor  **Issue Links:** - [INT-3197](https://jira.spring.io/browse/INT-3197) Migrate from Docbook to Asciidoctor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dcc6ef262d153f3efdf5c6f27ee68dfcd791a228, https://github.com/spring-projects/spring-framework/commit/3476d11fb89588353106a8e9cafa5909093a0113, https://github.com/spring-projects/spring-framework/commit/fd0b6caf9e55dd6eb75986fbd9b2efbd492e9baa, https://github.com/spring-projects/spring-framework/commit/7bf4324f0fbfd11b483ea7836b5081baf76712bf","closed","type: enhancement,","spring-projects-issues","2013-10-04T13:55:28Z","2019-01-11T22:09:55Z"
"","15575","Update HSQLDB version [SPR-10947]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10947](https://jira.spring.io/browse/SPR-10947?redirect=false)** and commented  We are still using hsqldb:hsqldb:1.8.0.10, but there is a new version with new group id is available org.hsqldb:hsqldb:2.3.0  Currently when using embedded database support, a NoSuchMethodException is thrown.  We should consider dropping support for 1.8 (which was last updated in 2009) and update to allow supporting the latest version.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d9c447046182ce6a107f9d44f79090b11d42a68a","closed","type: task,","spring-projects-issues","2013-09-30T07:59:52Z","2013-12-03T15:15:33Z"
"","16203","Document that @Conditional on @Configuration affects component scanning [SPR-11579]","**[Rob P](https://jira.spring.io/secure/ViewProfile.jspa?name=rpdai)** opened **[SPR-11579](https://jira.spring.io/browse/SPR-11579?redirect=false)** and commented  Documentation for `@Conditional` says:  ""If a `@Configuration` class is marked with `@Conditional`, all of the `@Bean` methods and `@Import` annotations associated with that class will be subject to the conditions.""  My own experiments suggest that `@ComponentScan` is also subject to the conditions on the configuration bean. It would be helpful to document this as the only way I could be sure was to try it.   ---  **Affects:** 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3aff973d13f9b82d3de511faae667424c637fa38","closed","type: documentation,","spring-projects-issues","2014-03-19T03:59:34Z","2014-03-26T22:34:09Z"
"","16339","ShallowEtagHeaderFilter setContentLength on include [SPR-11717]","**[Rik Coomans](https://jira.spring.io/secure/ViewProfile.jspa?name=ricom)** opened **[SPR-11717](https://jira.spring.io/browse/SPR-11717?redirect=false)** and commented  ShallowEtagHeaderFilter.setContentLength causes an error when rendering a jsp which performs an include:  ``` Caused by: java.io.IOException: JSPException including path '/alg/include/e_footer.jsp'.         at org.apache.tiles.request.servlet.ServletUtil.wrapServletException(ServletUtil.java:61)         at org.apache.tiles.request.jsp.JspRequest.doInclude(JspRequest.java:125)         at org.apache.tiles.request.AbstractViewRequest.dispatch(AbstractViewRequest.java:47)         at org.apache.tiles.request.render.DispatchRenderer.render(DispatchRenderer.java:45)         at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:259)         at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:397)         ... 65 more Caused by: java.lang.IllegalArgumentException: New capacity must not be smaller than current size         at org.springframework.util.Assert.isTrue(Assert.java:65)         at org.springframework.util.ResizableByteArrayOutputStream.resize(ResizableByteArrayOutputStream.java:65)         at org.springframework.web.filter.ShallowEtagHeaderFilter$ShallowEtagResponseWrapper.setContentLength(ShallowEtagHeaderFilter.java:217)         at javax.servlet.ServletResponseWrapper.setContentLength(ServletResponseWrapper.java:159)         at javax.servlet.ServletResponseWrapper.setContentLength(ServletResponseWrapper.java:159)         at org.apache.catalina.servlets.DefaultServlet.serveResource(DefaultServlet.java:777)         at org.apache.catalina.servlets.DefaultServlet.doGet(DefaultServlet.java:338)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:734)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:847)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:295)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:214)         at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:832)         at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:718)         at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:655)         at org.apache.jasper.runtime.JspRuntimeLibrary.include(JspRuntimeLibrary.java:940)         at org.apache.jsp.alg.include.e_005ffooter_jsp._jspService(e_005ffooter_jsp.java:78) ```  ---  **Affects:** 4.0.3  **Issue Links:** - #12919 ShallowEtagHeaderFilter should make use of specified content length - #16327 ShallowEtagHeaderFilter should write body early when HttpServletResponse.sendError() is called - #18246 ShallowEtagHeaderFilter.setContentLength causes an error when rendering a jsp which performs an include:  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3f392e32f56993e4cf92e5c61ed227b80fa10b82, https://github.com/spring-projects/spring-framework/commit/2f15f72fccf8098db576efe7da449ff607ccfe89","closed","type: bug,","spring-projects-issues","2014-04-22T02:24:27Z","2019-01-11T21:19:33Z"
"","15576","Provide an immutable SimpleJdbcInsert class [SPR-10948]","**[Richard Leavelle](https://jira.spring.io/secure/ViewProfile.jspa?name=rleavelle)** opened **[SPR-10948](https://jira.spring.io/browse/SPR-10948?redirect=false)** and commented  SimpleJdbcInsert is not entirely immutable; calls to methods like ""withTableName"" and ""usingColumns"" change the internal state of the object rather than returning a completely new object as the return type would suggest.  I would like to request an immutable implementation that mirrors SimpleJdbcInsert.   ---  **Affects:** 3.2.4","closed","type: enhancement,","spring-projects-issues","2013-09-30T10:47:51Z","2016-09-19T06:31:18Z"
"","16002","When ""reason"" is set on @ResponseStatus on a @ExceptionHandler method, spring don't use the ModelAndView returned. [SPR-11375]","**[Renan Leandro Ferreira](https://jira.spring.io/secure/ViewProfile.jspa?name=renanleandrof)** opened **[SPR-11375](https://jira.spring.io/browse/SPR-11375?redirect=false)** and commented  If i have something like:  ```java @ExceptionHandler(Throwable.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) public ModelAndView erro(HttpServletRequest request, Throwable exception) {     return new ModelAndView(""myerrorview"", ""model"", new MyModel()); } ```  it will answer correctly with myview.  But if i set a reason on ResponseStatus like this:  ```java @ResponseStatus(value=HttpStatus.INTERNAL_SERVER_ERROR, reason=""my reason"") ```  It will render tomcat default error page.   ---  **Affects:** 4.0 GA","closed","in: core,","spring-projects-issues","2014-01-31T06:01:23Z","2019-01-12T16:35:27Z"
"","15839","Handle get or post parameter array with empty square brackets (?myarray[]=aa) [SPR-11214]","**[remy mellet](https://jira.spring.io/secure/ViewProfile.jspa?name=remmel)** opened **[SPR-11214](https://jira.spring.io/browse/SPR-11214?redirect=false)** and commented  Currently Spring properly convert following query string - ?myarray=aa&myarray=bb - ?myarray[0]=aa&myarray[1]=bb   to Collection   But it doesn't handle when query string is - ?myarray[]=aa&myarray[]=bb   In that case, spring is throwing a NumberFormat exception because it is trying the convert the empty string (string between the [ and ]) to a number (please see attached stacktrace)  This last option is quite commun since jQuery (>=1.4) is using it to serialize array and make ajax call (http://api.jquery.com/jQuery.param/).  To be able to handle it, I might suggest to  1) Handle ""myarray[]"" the same way that we are handling ""myarray"" by returning null key instead of empty string key.  - link: https://github.com/spring-projects/spring-framework/blob/master/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java#L684 - Method: ""private PropertyTokenHolder getPropertyNameTokens(String propertyName)"" - line: ""String key = propertyName.substring(keyStart + PROPERTY_KEY_PREFIX.length(), keyEnd);""  or  2) Handle myarray[] the same way that we are handling myarray by changing checking !=null (like before) AND != empty string    => thus replacing    ""if (tokens.keys != null) {"" by ""if (StringUtils.isNotEmpty(tokens.key)) {"" or ""if (tokens.key != null && !tokens.key.equals("""") ) {""  - link: https://github.com/spring-projects/spring-framework/blob/master/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java#L930 - method: ""private void setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv)"" - line: ""if (tokens.keys != null) {""  Thank you,  Remy  —  java.lang.NumberFormatException: For input string: """" java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:504) java.lang.Integer.parseInt(Integer.java:527) org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:971) org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:904) org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:75) org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:699) org.springframework.validation.DataBinder.doBind(DataBinder.java:595) org.springframework.web.bind.WebDataBinder.doBind(WebDataBinder.java:191) org.springframework.web.bind.ServletRequestDataBinder.bind(ServletRequestDataBinder.java:112) org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.bindRequestParameters(ServletModelAttributeMethodProcessor.java:153) org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:106) org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77) org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162) org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:123) org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745) org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686) org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:827) javax.servlet.http.HttpServlet.service(HttpServlet.java:621) org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812) javax.servlet.http.HttpServlet.service(HttpServlet.java:728) com.intera.util.web.servlet.filter.JsonpCallbackFilter.doFilter(JsonpCallbackFilter.java:58) org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:343) org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:260)  ---  **Attachments:** - [stacktrace.txt](https://jira.spring.io/secure/attachment/21530/stacktrace.txt) (_3.67 kB_)  **Issue Links:** - #15351 Binding of parameter arrays named like name[] from POST request  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2013-12-12T05:53:10Z","2019-01-11T18:28:26Z"
"","15804","EhCacheManagerFactoryBean should share per cacheManagerName and only call shutdown if it originally created its CacheManager [SPR-11178]","**[Raul Kripalani](https://jira.spring.io/secure/ViewProfile.jspa?name=raulk)** opened **[SPR-11178](https://jira.spring.io/browse/SPR-11178?redirect=false)** and commented  The shared=true option instructs the EhCacheManagerFactoryBean that the CacheManager is shared across several contexts.  Unfortunately, the destroy() method is oblivious to this fact and shuts down the CacheManager unconditionally.  EhCacheManagerFactoryBean should keep track of the contexts that are using the CacheManager through a static counter, and only shut down the CacheManager if no more contexts are using it.   ---  **Affects:** 3.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a9605a11e98d2b1f225aca1b5989c41a6b231cf8","closed","type: enhancement,","spring-projects-issues","2013-12-05T11:52:17Z","2013-12-11T23:57:20Z"
"","15667","Spring doesn't parse jndi variables default values to match the expected-type [SPR-11039]","**[Raman H](https://jira.spring.io/secure/ViewProfile.jspa?name=rha_)** opened **[SPR-11039](https://jira.spring.io/browse/SPR-11039?redirect=false)** and commented  Please see forum post for description. I assume it is a Spring bug as no response there.   ---  **Affects:** 3.2.2  **Reference URL:** http://forum.spring.io/forum/spring-projects/container/724764-default-object-false-of-type-string-is-not-of-expected-type-boolean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fe46a01a5748f586a6ea88bbabc11f290c63bedc, https://github.com/spring-projects/spring-framework/commit/0aedd81ccc3c278931b97faf731afbbdcdec7083","closed","type: enhancement,","spring-projects-issues","2013-10-28T07:52:06Z","2013-11-06T22:51:36Z"
"","15880","Websocket Client with StandardWebSocketClient and Jetty trows IllegalStateException [SPR-11255]","**[Ralph Schaer](https://jira.spring.io/secure/ViewProfile.jspa?name=ralsa)** opened **[SPR-11255](https://jira.spring.io/browse/SPR-11255?redirect=false)** and commented  I created a simple websocket client application that uses this configuration.  ```java   @Configuration public class Client {  	@Bean 	public WebSocketClient webSocketClient() { 		return new StandardWebSocketClient(); 	} 	 	@Bean 	public ClientWebSocketHandler clientWebSocketHandler() { 		return new ClientWebSocketHandler(); 	} 	 	@Bean 	public WebSocketConnectionManager webSocketConnectionManager(WebSocketClient webSocketClient, WebSocketHandler webSocketHandler) { 		WebSocketConnectionManager manager = new WebSocketConnectionManager(webSocketClient, webSocketHandler, ""ws://localhost:8080/dispatcher/quotes""); 		manager.setAutoStartup(true); 		return manager; 	} 	 	public static void main(String[] args) throws InterruptedException { 		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Client.class); 		TimeUnit.MINUTES.sleep(1); 	}  } ```  The ClientWebSocketHandler is a subclass of BinaryWebSocketHandler and listens for incoming data. The server is also a spring application running on Tomcat 7.0.47 and is periodically sending data.  I tested this with different JSR 356 implementations.  Tyrus: org.glassfish.tyrus.bundles:tyrus-standalone-client:1.3.3  Tomcat 7 org.apache.tomcat:tomcat7-websocket:7.0.47  Tomcat 8 org.apache.tomcat:tomcat-websocket:8.0.0-RC5 org.apache.tomcat:tomcat-coyote:8.0.0-RC5  The Jetty 9.1 native WebSocket implementation works fine too. Had to replace StandardWebSocketClient with JettyWebSocketClient. org.eclipse.jetty.websocket:websocket-client:9.1.0.v20131115  The only problem I have is with Jetty 9.1 and their JSR 356 implementation org.eclipse.jetty.websocket:javax-websocket-client-impl:9.1.0.v20131115  When I start the application it throws this exception  ``` 08:37:27.520 [WebSocketClient@347453747-18] WARN  o.e.j.w.j.e.JsrEndpointEventDriver - Uncaught exception java.lang.IllegalStateException: Unable to find decoder for type  used in  	at org.eclipse.jetty.websocket.jsr356.JsrSession.addMessageHandler(JsrSession.java:113) ~[javax-websocket-client-impl-9.1.0.v20131115.jar:9.1.0.v20131115] 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.onOpen(StandardWebSocketHandlerAdapter.java:93) ~[spring-websocket-4.0.0.RELEASE.jar:4.0.0.RELEASE] ```  But after that exception the application works without any further problems.  Complete source code of the example is hosted on GitHub Server: https://github.com/ralscha/playground/tree/master/springwebsocket Client: https://github.com/ralscha/playground/tree/master/springwebsocketclient    ---  **Affects:** 4.0 GA","closed","status: declined,","spring-projects-issues","2013-12-24T00:51:01Z","2019-01-12T16:35:31Z"
"","15558","Server sends SEND stomp frames back to the client instead of MESSAGE frames [SPR-10930]","**[Ralph Schaer](https://jira.spring.io/secure/ViewProfile.jspa?name=ralsa)** opened **[SPR-10930](https://jira.spring.io/browse/SPR-10930?redirect=false)** and commented  Tested with: `spring-websocket-4.0.0.BUILD-20130914.053543-227` `spring-messaging-4.0.0.BUILD-20130920.184120-127.jar`  In the following scenario the server sends stomp SEND messages back to the client. But SEND is a client frame according to the specification (http://stomp.github.io/stomp-specification-1.1.html#SEND) Instead the server should send MESSAGE frames back to the client.  The following example does not contain any application code. Just two configuration classes.  ```java public class DispatcherServletInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {    @Override   protected Class[] getRootConfigClasses() {     return null;   }    @Override   protected Class[] getServletConfigClasses() {     return new Class[] { WebConfig.class };   }    @Override   protected String[] getServletMappings() {     return new String[] { ""/chatdemo/*"" };   } } ```  ```java @Configuration @EnableWebMvc @EnableWebSocketMessageBroker public class WebConfig extends WebMvcConfigurerAdapter implements WebSocketMessageBrokerConfigurer {    @Override   public void addViewControllers(ViewControllerRegistry registry) {     registry.addViewController(""/"").setViewName(""index.html"");   }    @Override   public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {     configurer.enable(); }    @Override   public void registerStompEndpoints(StompEndpointRegistry registry) {     registry.addEndpoint(""/chathandler"").withSockJS();   }    @Override   public void configureMessageBroker(MessageBrokerConfigurer configurer) {     configurer.enableSimpleBroker(""/queue/"");   }  } ```  On the client side we have this code:  ```javascript var sock = new SockJS('/chatdemo/chathandler'); var stompClient = Stomp.over(sock);  stompClient.connect('', '', function(frame) {	 	stompClient.subscribe(""/queue/chatmessage"", function(msg) { 		.... 	}); }); ```  and a few lines later the application sends something to the server  ```javascript stompClient.send(""/queue/chatmessage"", {}, JSON.stringify(....)); ```  Message flow:  ``` Client sends CONNECT   --> OK Server sends CONNECTED  --> OK Client sends SUBSCRIBE and SEND  --> OK Server sends SEND   --> Not OK. This has to be a MESSAGE frame. ```  It looks like the problem is in the method `sendMessageToSubscribers(..)` in the class `org.springframework.messaging.simp.handler.SimpleBrokerMessageHandler`    ---  **Affects:** 4.0 M3  **Attachments:** - [23-09-2013 14-56-59.png](https://jira.spring.io/secure/attachment/21396/23-09-2013+14-56-59.png) (_11.75 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6ddacdc01d87c4bb3f641005ff740cca2068c2bc","closed","type: bug,","spring-projects-issues","2013-09-23T06:11:34Z","2013-10-31T12:28:06Z"
"","15551","getSockJsPath() method in org.springframework.web.socket.sockjs.support.AbstractSockJsService returns wrong path [SPR-10923]","**[Ralph Schaer](https://jira.spring.io/secure/ViewProfile.jspa?name=ralsa)** opened **[SPR-10923](https://jira.spring.io/browse/SPR-10923?redirect=false)** and commented  Tested with version: `spring-websocket-4.0.0.BUILD-20130914.053543-227`  The method `getSockJsPath()` in the class `org.springframework.web.socket.sockjs.support.AbstractSockJsService` creates a wrong result in the following scenario:  ```java DispatcherServlet mapped to /snakedemo/*  public class DispatcherServletInitializer extends AbstractAnnotationConfigDispatcherServletInitializer { ...  	@Override 	protected String[] getServletMappings() { 		return new String[] { ""/snakedemo/*"" }; 	} ... } ```  Websocket/SockJS Handler mapped to /snake  ```java @Configuration @EnableWebMvc @EnableWebSocket public class WebConfig extends WebMvcConfigurerAdapter implements WebSocketConfigurer {  	@Override 	public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) { 		registry.addHandler(snakeWebSocketHandler(), ""/snake"").withSockJS(); 	} ... } ```  The client then tries to send a GET request to info and the server returns a 404. The problem is the code in getSockJsPath line 362-371 that results in a wrong sockjs path  ``` request.getURI().getPath() ==> /snakedemo/snake/info Return value of getSockJsPath() ==> demo/snake/info ```    ---  **Affects:** 4.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e60e8dc582b96f166bc2e81b8319674227b724cf","closed","type: bug,","spring-projects-issues","2013-09-17T02:09:14Z","2013-10-31T12:27:58Z"
"","16102","XmlValidationModeDetector: length of a string is always greater than index of any of its characters [SPR-11477]","**[Rajeev Bahuguna](https://jira.spring.io/secure/ViewProfile.jspa?name=rbahuguna)** opened **[SPR-11477](https://jira.spring.io/browse/SPR-11477?redirect=false)** and commented  The method org.springframework.util.xml.XmlValidationModeDetector::hasOpeningTag should have this: return (openTagIndex > -1 && content.length() > (openTagIndex+1) && Character.isLetter(content.charAt(openTagIndex + 1)));  in place of the current: return (openTagIndex > -1 && content.length() > openTagIndex && Character.isLetter(content.charAt(openTagIndex + 1)));   ---  **Affects:** 3.2.8, 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1763bfbad04704f4a38290f371119a3544f7546b, https://github.com/spring-projects/spring-framework/commit/69c54a053cc2e2141e94b58923aec0f16151a842  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","in: core,","spring-projects-issues","2014-02-23T21:54:19Z","2014-03-26T22:34:08Z"
"","16296","no msg when cannot authorize against external queue [SPR-11673]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11673](https://jira.spring.io/browse/SPR-11673?redirect=false)** and commented  So i tried putting in the following lines in my code to pass a fake password:  ```  StompBrokerRelayRegistration registration = config.enableStompBrokerRelay(""/topic"");         registration.setRelayHost(""xxxx.com"");         registration.setSystemPasscode(""hello"");         registration.setClientPasscode(""hello"");  ```  the funny thing is the logs still just show this:  ``` 16:24:47,103  INFO reactor-tcp-io-2 netty.NettyTcpClient:304 - CONNECT: [id: 0x0db8042b, /192.168.1.15:49980 => xxxx.com/162.242.220.165:61613] ```  of course there is no data transfer cause the msg queue itself wont allow authentication with a non-existent password, but nothing in the logs by spring shows we had a bad authentication   ---  **Affects:** 4.0.3","closed","type: enhancement,","spring-projects-issues","2014-04-07T16:30:55Z","2014-05-01T01:36:43Z"
"","16295","[doc] Document message broker related events published  [SPR-11672]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11672](https://jira.spring.io/browse/SPR-11672?redirect=false)** and commented  if you use `.enableStompBrokerRelay()` and you don't have a msg queue running, the logs get bombard by this exception every few mileseconds.  ``` org.springframework.messaging.MessageDeliveryException: Message broker is not active. INFO [LineHandler-1] [stderr] at org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.handleMessageInternal(StompBrokerRelayMessageHandler.java:378) INFO [LineHandler-1] [stderr] at org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.handleMessage(AbstractBrokerMessageHandler.java:171) INFO [LineHandler-1] [stderr] at org.springframework.messaging.support.ExecutorSubscribableChannel.sendInternal(ExecutorSubscribableChannel.java:64) INFO [LineHandler-1] [stderr] at org.springframework.messaging.support.AbstractMessageChannel.send(AbstractMessageChannel.java:116) INFO [LineHandler-1] [stderr] at org.springframework.messaging.support.AbstractMessageChannel.send(AbstractMessageChannel.java:98) INFO [LineHandler-1] [stderr] at org.springframework.messaging.simp.SimpMessagingTemplate.doSend(SimpMessagingTemplate.java:129) INFO [LineHandler-1] [stderr] at org.springframework.messaging.simp.SimpMessagingTemplate.doSend(SimpMessagingTemplate.java:48) INFO [LineHandler-1] [stderr] at org.springframework.messaging.core.AbstractMessageSendingTemplate.send(AbstractMessageSendingTemplate.java:93) INFO [LineHandler-1] [stderr] at org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(AbstractMessageSendingTemplate.java:146) INFO [LineHandler-1] [stderr] at org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(AbstractMessageSendingTemplate.java:112) INFO [LineHandler-1] [stderr] at org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(AbstractMessageSendingTemplate.java:106) INFO [LineHandler-1] [stderr] at com.dripstat.dripcast.GlobalScoreFirebase$1.onDataChange(GlobalScoreFirebase.java:49)  ```    ---  **Affects:** 4.0.3","closed","in: web,","spring-projects-issues","2014-04-07T16:28:07Z","2014-05-01T01:36:44Z"
"","16209","Programmatic session timeout setting (applied through HttpSessionListener) [SPR-11585]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11585](https://jira.spring.io/browse/SPR-11585?redirect=false)** and commented  for all the talk about not needing a web.xml, there is no way to set the session-timeout value currently in the javaconfig...   ---  **Affects:** 4.0.2  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-03-20T10:57:50Z","2015-09-22T20:22:34Z"
"","16159","No real documentation on using the spring mvc artifact [SPR-11534]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11534](https://jira.spring.io/browse/SPR-11534?redirect=false)** and commented  Try using spring-mvc in your project. Here is what one runs into:  1. No project on 'spring.io/projects' listed as 'Spring MVC' 2. Look into the 'spring framework' project and it lists 'spring-context' as the artifact to use. 3. using 'spring-context' does NOT include the spring-mvc classes. 4. The spring mvc documentation (http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html) does NOT mention spring-mvc jar file  How is one supposed to discover about the spring-mvc artifact?  ---  **Affects:** 4.0.2  **Issue Links:** - #16403 Spring Web MVC should have its own page on spring.io. (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f1849b0182791f116d96f44d7b03905bed10aebe, https://github.com/spring-projects/spring-framework/commit/549016803762d812f34247b1f396ab359ed54bc2  0 votes, 7 watchers","closed","type: documentation,","spring-projects-issues","2014-03-11T00:19:33Z","2019-01-11T21:38:11Z"
"","16091","dispatchOptionsRequest does the opposite of what it should do [SPR-11465]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11465](https://jira.spring.io/browse/SPR-11465?redirect=false)** and commented  Here is my config class:  ```java package org.chronon.apm.frontend;  import com.google.common.collect.ImmutableList; import org.chronon.apm.frontend.filters.CorsFilter; import org.springframework.web.filter.CompositeFilter; import org.springframework.web.filter.DelegatingFilterProxy; import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;  import javax.servlet.Filter; import javax.servlet.ServletRegistration;  /**  * @author Prashant Deva  */ public class AppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {     @Override     protected Class[] getRootConfigClasses()     {         return new Class[]{AppConfig.class};     }      @Override     protected Class[] getServletConfigClasses()     {         return new Class[]{WebappConfig.class};     }     @Override     protected void customizeRegistration(ServletRegistration.Dynamic registration) { //        registration.setInitParameter(""dispatchOptionsRequest"", ""true"");         registration.setAsyncSupported(true);     }      @Override     protected String[] getServletMappings()     {         return new String[]{""/""};     }      @Override     protected Filter[] getServletFilters()     {         DelegatingFilterProxy shiroFilter = new DelegatingFilterProxy(""shiroFilter"");         shiroFilter.setTargetFilterLifecycle(true);          CompositeFilter compositeFilter = new CompositeFilter();         compositeFilter.setFilters(ImmutableList.of(new CorsFilter(),shiroFilter));          return new Filter[]{compositeFilter};     }  } ```  I have a custom CORS filter to add the required headers for 'OPTIONS' request.  However, when i uncomment this line:  ``` registration.setInitParameter(""dispatchOptionsRequest"", ""true""); ```  any http call with method type OPTIONS doesnt even reach the filter and i get back a 405 method not allowed.  I believe this is the exact opposite of what `dispatchOptionsRequest` option should do.   ---  **Affects:** 4.0.2  1 votes, 3 watchers","closed","in: web,","spring-projects-issues","2014-02-21T19:18:32Z","2019-01-11T21:23:35Z"
"","16090","Clarify use of @MessageMapping methods on @RestController [SPR-11464]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11464](https://jira.spring.io/browse/SPR-11464?redirect=false)** and commented  While the docs do say that REST methods in a `@Controller` classes can remain alonside websocket methods which use `@MessageMapping` or `@SubscribeMapping`, however it is not clear if the same applies for classes marked with `@RestController`.  The `@RestController` class adds a `@ResponseBody` annotation by default to methods.  It is unclear thus if websocket specific methods can be put in class that is marked as `@RestController`.   ---  **Affects:** 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/651e0a44fba387b2c86f7d59a19c2ce567323c10","closed","type: task,","spring-projects-issues","2014-02-21T14:51:29Z","2014-03-26T22:34:03Z"
"","16076","Clarify how to create scalable WebSocket setup [SPR-11450]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11450](https://jira.spring.io/browse/SPR-11450?redirect=false)** and commented  our app sends around 300 million msgs a day. we tried using spring 4's websockets for this using the simple in memory broker.  Even though our heap size was well below 500mb and cpu usage was < 10%, we see that new relic shows an insane amount of time spent in the dispatcher servlet. all our other transactions are slowed too.  it seems the spring websocket architecture simply doesnt scale and if it does, there is again zero documentation on how to do that.  we can use an external messgaing queue, but it seems that will only impact the memory used for keeping the queue and not much else since the all the messages from the queue are passed back to the client through the app anyway.  It is also unclear if clustering the jvms with an external message queue would help. will the msgs sent back to client subscription be split into multiple jvms?  again no guidance/documentation on any of this. please clarify.  ---  **Affects:** 4.0.2  **Sub-tasks:** - #16078 Add guidance on scaling when using `@EnableWebSocketMessageBroker` - #16180 Increase default pool size for clientInboundChannel and clientOutboundChannel in WebSocket config - #16210 Provide defensive mechanism to prevent slow WebSocket clients from consuming server resources  0 votes, 8 watchers","closed","type: task,","spring-projects-issues","2014-02-19T11:27:31Z","2019-10-12T05:35:21Z"
"","16075","Document use of the reactor-tcp dependency [SPR-11449]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11449](https://jira.spring.io/browse/SPR-11449?redirect=false)** and commented  just changing `config.enableSimpleBroker(""/topic"");` to `config.enableStompBrokerRelay(""/topic"");` seems to trigger a use of spring reactor. unless the reactor lib is explicitly specified as a depenendency in gradle, i get a classnotfoundexception. its only because i knew of the reactor project that i was able to resolve this dependency at all... This is not documented anywhere.  Also there is no documentation around the fact as to how the reactor is used. is all of spring http traffic now using the reactor lib or just the websocket part.    ---  **Affects:** 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/651e0a44fba387b2c86f7d59a19c2ce567323c10","closed","in: web,","spring-projects-issues","2014-02-19T11:20:37Z","2014-03-26T22:34:01Z"
"","16064","Logs fill with unnecessary stack traces when using SockJS streaming transports [SPR-11438]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11438](https://jira.spring.io/browse/SPR-11438?redirect=false)** and commented  We are using websockets on tomcat 7.0.50 with an in memory simple spring broker. Our logs are littered with this exception  ``` 3 ERROR MessageBrokerSockJS-1 handler.XhrStreamingTransportHandler$XhrStreamingSockJsSession:276 - Terminating connection after failure to send message to client. This may be because the client has gone away (see https://java.net/jira/browse/SERVLET_SPEC-44)  Feb 15 12:05:16 apmgui i-04e9bc6a:  ClientAbortException:  java.net.SocketException: Broken pipe  Feb 15 12:05:16 apmgui i-04e9bc6a:      at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:371)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:333)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at org.apache.catalina.connector.Response.flushBuffer(Response.java:570)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at org.apache.catalina.connector.ResponseFacade.flushBuffer(ResponseFacade.java:307)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at org.springframework.http.server.ServletServerHttpResponse.flush(ServletServerHttpResponse.java:81)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession.writeFrameInternal(StreamingSockJsSession.java:99)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.writeFrame(AbstractSockJsSession.java:273)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.sendHeartbeat(AbstractSockJsSession.java:294)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession$1.run(AbstractSockJsSession.java:309)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at java.util.concurrent.FutureTask.run(Unknown Source)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at java.lang.Thread.run(Unknown Source)  Feb 15 12:05:16 apmgui i-04e9bc6a:  Caused by: java.net.SocketException: Broken pipe  Feb 15 12:05:16 apmgui i-04e9bc6a:      at java.net.SocketOutputStream.socketWrite0(Native Method)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at java.net.SocketOutputStream.socketWrite(Unknown Source)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at java.net.SocketOutputStream.write(Unknown Source)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at org.apache.coyote.http11.InternalOutputBuffer.realWriteBytes(InternalOutputBuffer.java:215)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:480)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at org.apache.coyote.http11.InternalOutputBuffer.flush(InternalOutputBuffer.java:119)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:805)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at org.apache.coyote.Response.action(Response.java:174)  Feb 15 12:05:16 apmgui i-04e9bc6a:      at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:366)  Feb 15 12:05:16 apmgui i-04e9bc6a:      ... 17 more  ```  Either:  1. This is a bug in spring, in which case fix it 2. This is expected behavior, in which case provide a workaround/documentation for it so our logs are not littered by it.  Either way, this behavior is not documented and presence of this issue makes logs very, very heavy. Not to mention we don't know if this is an actual error in our app or one we can ignore.  Either fix this issue or provide an explanation/documentation for it.  ---  **Affects:** 4.0.1  **Reference URL:** http://stackoverflow.com/questions/21802969/spring-4-websockets-causing-tons-of-exceptions  **Issue Links:** - #20357 Logs fill with broken pipe when using SockJS - #16489 Too many exception stack traces related to disconnected SockJS clients - #16769 Use DEBUG log level for broken WebSocket client connections or write failures  0 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2014-02-18T03:15:12Z","2019-01-11T21:25:01Z"
"","16063","Undocumented auto CORS for websocket endpoint breaking existing CORS code [SPR-11437]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11437](https://jira.spring.io/browse/SPR-11437?redirect=false)*** and commented  We have code like this:  ```java @Configuration @EnableWebSocketMessageBroker public class WSConfig  extends AbstractWebSocketMessageBrokerConfigurer {      public static final String WS_ENDPOINT = ""/wsgame"";      @Override     public void configureMessageBroker(MessageBrokerRegistry config) {         config.enableSimpleBroker(""/topic"");          config.setApplicationDestinationPrefixes(""/app"");     }      @Override     public void registerStompEndpoints(StompEndpointRegistry registry) {         registry.addEndpoint(WS_ENDPOINT).withSockJS();     } } ```  We also have a custom CORSFilter in our code that applies the cors related header to all requests.  After we got a bunch of errors in our browser, we noticed that when a request is made to `WS_ENDPOINT`, spring is itself applying a cors filter of itself and putting in the `""Access-Control-Allow-Origin` header. It also seems that this filter does not support the `OPTIONS` http method.  Please add more documentation for how spring 4 handles stompendpoint urls especially with request to CORS.  ---  **Affects:** 4.0.1  **Issue Links:** - #16069 CORS for websocket breaks existing CORS Filter - #13916 CORS support  0 votes, 5 watchers","closed","in: web,","spring-projects-issues","2014-02-17T21:47:47Z","2019-01-11T21:24:53Z"
"","16062","Improve documentation on the use of login/passcode headers for STOMP clients  [SPR-11436]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11436](https://jira.spring.io/browse/SPR-11436?redirect=false)** and commented  All the documentation for spring websockets, including the guide here (http://spring.io/guides/gs/messaging-stomp-websocket/) , show client side code example as:  ``` function connect() {             var socket = new SockJS('/hello');             stompClient = Stomp.over(socket);             stompClient.connect('', '', function(frame) {                    });         } ```  This is incorrect. `stompClient.connect` needs a username and password in the first 2 arguments.  Running the `stompClient` passing in `''` to the `connect()` method as shown in the examples, results in an error:  ```  Web Socket Opened... stomp.min.js:8 >>> CONNECT login: passcode: accept-version:1.1,1.0 heart-beat:10000,10000   stomp.min.js:8","closed","in: web,","spring-projects-issues","2014-02-17T17:03:03Z","2019-01-11T21:26:43Z"
"","16061","Websocket backing message queue password exposed on client [SPR-11435]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11435](https://jira.spring.io/browse/SPR-11435?redirect=false)** and commented  Assume I have code like this:  ``` @Configuration @EnableWebSocketMessageBroker public class WSConfig  extends AbstractWebSocketMessageBrokerConfigurer {       @Override     public void configureMessageBroker(MessageBrokerRegistry config) {         StompBrokerRelayRegistration relayRegistration = config.enableStompBrokerRelay(""/topic"");         relayRegistration.setClientLogin(""u1"");         relayRegistration.setSystemLogin(""u1"");         relayRegistration.setClientPasscode(""pass"");         relayRegistration.setSystemPasscode(""pass"");         relayRegistration.setRelayHost(""lemur.cloudamqp.com"");         config.setApplicationDestinationPrefixes(""/app"");     }  ```  Now on the client, I **need** to put code like this:  ```   var socket = new SockJS('http://endpoint');   var stompClient = Stomp.over(socket); //username and password exposed   stompClient.connect('u1', 'pass', function (frame) {               }); ```  As you can see the queue's username and password are fully exposed. Unless I provide that, the client side code doesn't function.  This can be reproduced by : 1. doing a simple local installation of RabbitMQ which has `guest` as both the username and password. 2. unless `guest` is passed as the user/password in `stompClient.connect`, the client side code doesnt function.  This is a huge security hole since it allows users to get full access to the queue. In the case of hosted services like CloudAMQP, the host can be fully guessed from the username/password allowing anyone 100% admin access to the queue.   ---  **Affects:** 4.0.1","closed","in: web,","spring-projects-issues","2014-02-17T14:30:10Z","2019-01-11T21:26:40Z"
"","16059","No way to set virtual host in StompBrokerRelayMessageHandler [SPR-11433]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11433](https://jira.spring.io/browse/SPR-11433?redirect=false)** and commented  while [SP-109555] puts a `setVirtualHost()` method in `StompBrokerRelayMessageHandler`,  `StompBrokerRelayRegistration` does not provide any method to expose it. This means there is no real way to set the virtual host on `StompBrokerRelayMessageHandler` making it impossible to use services like CloudAMQP which require one  ---  **Affects:** 4.0.1  **Issue Links:** - #15583 Provide option to configure ""host"" header in CONNECT frames to STOMP message brokers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1dedb67fbcb284b798ed9e1a691815283109c0bb","closed","type: bug,","spring-projects-issues","2014-02-16T01:09:14Z","2019-01-11T21:26:33Z"
"","16025","aop:scoped-proxy may fail with LinkageError: loader attempted duplicate class definition for name [SPR-11398]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-11398](https://jira.spring.io/browse/SPR-11398?redirect=false)** and commented  When using: * cglib 2.2 directly * spring 3.2.5 (which wraps cglib 3.0) and spring's `` feature  it possible to run into  ``` java.lang.LinkageError: loader (instance of  sun/misc/Launcher$AppClassLoader):    attempted  duplicate class definition for name: ""$java/lang/Object$$FastClassByCGLIB$$3f697993"" ```  Full stacktrace:  ``` org.springframework.cglib.core.CodeGenerationException: java.lang.reflect.InvocationTargetException-->null 	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:237) 	at org.springframework.cglib.reflect.FastClass$Generator.create(FastClass.java:64) 	at org.springframework.cglib.proxy.MethodProxy.helper(MethodProxy.java:121) 	at org.springframework.cglib.proxy.MethodProxy.init(MethodProxy.java:74) 	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:202) 	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:698) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150) 	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:132) 	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:120) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) 	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:631) 	at com.MyBean$$EnhancerByCGLIB$$f1fad224.toString() 	at com.MyTest.testBeanWithAopScopedProxy(SpringAndCglibTest.java:122) .... Caused by: java.lang.reflect.InvocationTargetException 	at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:601) 	at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:384) 	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:219) 	... 36 more Caused by: java.lang.LinkageError: loader (instance of  sun/misc/Launcher$AppClassLoader): attempted  duplicate class definition for name: ""$java/lang/Object$$FastClassByCGLIB$$3f697993"" 	at java.lang.ClassLoader.defineClass1(Native Method) 	at java.lang.ClassLoader.defineClass(ClassLoader.java:791) 	... 41 more ```  ##### Attempt at analysis  As far as I can understand, this seems to be caused by class naming conflict between CGLIB 2.2 and Spring-repackaged CGLIB.  CGLIB's `DefaultNamingPolicy` solves name collisions using sort of ""already used set"", but obviously there are two such sets -- one CGLIB's and another Spring-CGLIB's -- so name collisions cannot be avoided and class generation fails.  ##### Notes  This is not only about probabilistic name clash. There seems to be nothing preventing Spring-CGLIB unconsciously re-using classes generated by non-Spring-CGLIB, which may be ""programmed"" with different behavior than desired.  ##### Proposed solution  Spring is already using non-default `prefix` (`""org.springframework.cglib.empty.Object""`, see `DefaultNamingPolicy.getClassName`), but this is not enough, since prefix is not used if provided explicitly.  * Spring-repackaged CGLIB could have `DefaultNamingPolicy.getTag()` function changed to return something else than `""ByCGLIB""` * OR `DefaultNamingPolicy` could be called with different '`source`' -- see initialization of `org.springframework.cglib.reflect.FastClass.SOURCE`  ---  **Affects:** 3.2.5, 4.0 GA  **Issue Links:** - #14875 Calling to Proxy upon abstract class ends with java.lang.LinkageError: duplicate class definition - #15337 Spring 3.2.2 AOP has increased memory usage - #16404 MemorySafeUndeclaredThrowableStrategy class not found  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2014-02-06T07:14:33Z","2019-01-11T19:11:30Z"
"","15733","""CglibAopProxy: Unable to proxy method"" WARN when bean class contains static final method [SPR-11107]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-11107](https://jira.spring.io/browse/SPR-11107?redirect=false)** and commented  When using `` and a bean class has * `@Transactional` method * `public static final` method `someMethod`  a warning is generated:  ``` WARN [org.springframework.aop.framework.CglibAopProxy] -  ```  This makes no sense -- static methods should not be proxied anyway (what would that mean?).  This is a regression compared to Spring 3.1.2, where the warning was not printed for static methods.  ---  **Affects:** 3.2.5  **Issue Links:** - #19917 Clarification: Spring AOP pointcuts match protected methods when CGLIB is used - #16241 CglibAopProxy needs to detect package-visible methods when defined in a different ClassLoader  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)","closed","in: core,","spring-projects-issues","2013-11-22T03:18:47Z","2019-01-11T19:28:08Z"
"","15655","@Autowired setter randomly called twice or not called at all when two beans of the same class [SPR-11027]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-11027](https://jira.spring.io/browse/SPR-11027?redirect=false)** and commented  According to docs, `@Autowired` setter should not be called when an explicit value is set in XML context configuration.  Unfortunately, the `AutowiredAnnotationBeanPostProcessor.injectionMetadataCache` cache is per Class, but it's contents, especially `AutowiredMethodElement.skip` attribute (inherited by `AutowiredMethodElement` from superclass) is specific bean definition dependent.  As a result, if I have two unrelated beans of the same class, they 'share' their autowiring behavior. * an unlucky bean using `@Autowired` may have its setter not called at all * an unlucky bean providing explicit value for `@Autowired` setter may have its setter called twice  - depending on the order in which beans are initialized.   ---  **Affects:** 3.1.2, 3.1.4, 3.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ce001c23f728b2cc0e9db29c9e59a24958461a6a, https://github.com/spring-projects/spring-framework/commit/4675bc4e0ca0176b9f1a774e6b030ffe6d861c2c, https://github.com/spring-projects/spring-framework/commit/393cfcff40b499e35eece43682b8ec596d45b780","closed","in: core,","spring-projects-issues","2013-10-24T04:27:10Z","2019-01-11T19:26:35Z"
"","15650","Race condition in AutowiredAnnotationBeanPostProcessor [SPR-11022]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-11022](https://jira.spring.io/browse/SPR-11022?redirect=false)** and commented  The -`AutowiredAnnotationBeanPostProcessor.AutowiredFieldElement` and- `AutowiredAnnotationBeanPostProcessor.AutowiredMethodElement` have double-check pattern and this results in a serious race condition resulting in `@Autowired` -field-/methods not being autowired.  ##### Explanation  In both -`AutowiredFieldElement`,- `AutowiredMethodElement` the `volatile boolean cached` guards `volatile Object[] cachedMethodArguments` but when the `cachedMethodArguments` is populated the order is as follows: 1. synchronize on this 2. set `cachedMethodArguments` to new array (all fields null)    * this gets flushed immediatelly, the `cachedMethodArguments` is volatile 3. populate `cachedMethodArguments`    * **this is not flushed**, as **array elements are not volatile** 4. set `cached = true`    *  this gets flushed immediatelly, the `cached` is volatile    * **and bang!** now if some other thread enters the method, it will find `cached=true`, `cachedMethodArguments` not null, but its contents may be pretty anything 5. leave synchronization block  ##### solution  * set `cachedMethodArguments` only after this array is fully created and populated * or do not use double check pattern    ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/57002b64c6be2f4e9ac6dabded52005be9d16c39, https://github.com/spring-projects/spring-framework-issues/commit/da21a32fab67d5f58949be2f9e6df240077ac492, https://github.com/spring-projects/spring-framework-issues/commit/a6f2f61cb8667a41cda1d3f6e5fcb3354b348f60","closed","in: core,","spring-projects-issues","2013-10-23T07:18:39Z","2019-01-12T16:46:48Z"
"","15630","MBeanExporter/MBeanRegistrationSupport lack synchronization [SPR-11002]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-11002](https://jira.spring.io/browse/SPR-11002?redirect=false)** and commented  `MBeanExporter`, `MBeanRegistrationSupport` lack any for of synchronization and there are many things that can happen if they are used from 2+ threads.  ``` ##### steps 1. `REGISTRATION_REPLACE_EXISTING` is `true` 1. thread 1: register called with name `nameA` 1. thread 1: registration completes 1. thread 2: register called with name `nameA` 1. thread 2: gets `InstanceAlreadyExistsException` 1. thread 1: unregisters `nameA` 1. thread 2: handles `InstanceAlreadyExistsException` by calling `this.server.unregisterMBean(objectName);`  ##### expected  * `registrationBehavior == REGISTRATION_REPLACE_EXISTING` should prevent any `InstanceAlreadyExistsException` from being propagated to the callers  ##### observed  * indeed, `InstanceAlreadyExistsException` is not propagated  * but `InstanceNotFoundException` is raised instead ```  ``` ##### steps 1. thread 1: calls register `nameA` 1. thread 1: registration completes 1. thread 1: calls unregister `nameA` 1. thread 1: `nameA` is removed from the server but not yet from `registeredBeans` 1. thread 2: calls register `nameA` 1. thread 2: registration completes; `nameA` is not added to `registeredBeans` because it is already there 1. thread 1: unregistration completes, `nameA` is removed from `registeredBeans`  ##### expected  * `registeredBeans` should be a `Set` of all registered MBeans  ##### observed  * `nameA` is registered but is not present in `registeredBeans`  * later call to `MBeanExporter.destroy()` (like application redeployment) will leave `nameA` registered in the server ```    ---  **Affects:** 3.1.2, 3.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1ea218cee2d9b53045e8e00929ba03a1d89a5049, https://github.com/spring-projects/spring-framework/commit/8d6d6be39a9ae40c5d0b737bf820b102936c256a  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)","closed","in: core,","spring-projects-issues","2013-10-18T05:16:23Z","2019-01-11T19:13:55Z"
"","15628","Spring cannot be build without Java 8 because of 'MaxMetaspaceSize' VM option [SPR-11000]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-11000](https://jira.spring.io/browse/SPR-11000?redirect=false)** and commented  ##### steps  * checkout the code from github * `$ ./gradlew build`  ##### observed  ``` $ ./gradlew build Unrecognized VM option 'MaxMetaspaceSize=1024m'                                                                                                                                                                                  Could not create the Java virtual machine.   ```  See http://stackoverflow.com/questions/17291566/import-springsource-into-idea-but-had-a-error-unrecognized-vm-option-maxmetasp for explanation.  I suppose this is caused by #15200  ---  **Affects:** 4.0 M2","closed","in: core,","spring-projects-issues","2013-10-18T03:04:53Z","2019-01-12T05:26:35Z"
"","15623","Spring cannot find setter if subclass overrides getter narrowing return type [SPR-10995]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-10995](https://jira.spring.io/browse/SPR-10995?redirect=false)** and commented  #### Steps to Reproduce  1. Create a class with a property (getter/setter) of type `Bar`. 2. Create a subclass that overrides the getter narrowing the return type to `MoreBar extends Bar`. 3. Try to set the property in XML config.  #### Expectation  It worked in 3.1.2, so it should work now.  #### Failing Exception  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean ... ... Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'bar' of bean class [...]: Bean property 'bar' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter? ```    ---  **Affects:** 3.1.4  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2013-10-16T20:50:30Z","2013-10-31T12:27:59Z"
"","15585","MBeanExporter/MBeanRegistrationSupport leaks ObjectNames in registeredBeans [SPR-10957]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-10957](https://jira.spring.io/browse/SPR-10957?redirect=false)** and commented  `MBeanRegistrationSupport` adds `ObjectName`-s to `registeredBeans` set, but never removes them until application is undeployed.  ---  **Affects:** 3.1.2  **Issue Links:** - #14086 MBeanExporter#destroy logs warnings about explicitly unregistered mbeans  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","in: core,","spring-projects-issues","2013-10-04T04:08:47Z","2019-01-11T22:09:50Z"
"","15750","Spring caching: combining multiple @Cacheable within @Caching annotation doesn't work [SPR-11124]","**[Pieter Van der Meeren](https://jira.spring.io/secure/ViewProfile.jspa?name=vdmeerenp)** opened **[SPR-11124](https://jira.spring.io/browse/SPR-11124?redirect=false)** and commented  When combining multiple `@Cacheable` annotations within a `@Caching` annotation, the caching does not work due to bug in CacheAspectSupport class.  Consider the following service method, annotated with the Spring caching annotationa:  ```java public class DummyServiceImpl implements DummyService { 	private static final List BIG_LIST = asList(""four"", ""five"", ""six"", ""seven"", ""eight"", ""nine""); 	private static final List SMALL_LIST = asList(""one"", ""two"", ""three"");  	private static final Logger LOGGER = Logger.getLogger(DummyServiceImpl.class);  	public static final Long SMALL_CACHE_KEY = 1L; 	public static final Long BIG_CACHE_KEY = 2L;   	@Override 	@Caching(cacheable = { @Cacheable(value = ""bigCache"", unless = ""#result.size() < 4""),  							@Cacheable(value = ""smallCache"", unless = ""#result.size() > 3"") }) 	public List getTheList(Long id) { 		LOGGER.info(""Cache NOT hit, executing service logic...""); 		if (SMALL_CACHE_KEY.equals(id)) { 			return SMALL_LIST; 		} else if (BIG_CACHE_KEY.equals(id)) { 			return BIG_LIST; 		} else { 			return emptyList(); 		} 	} } ```  You can see we are combining two `@Cacheable` annotations, we define a cache ""smallCache"" which will hold the result if the size of the result is < 4 elements (we do this using the ""unless"" parameter).Then we define another cache ""bigCache"" which will hold the result if the size of the result is > 3.  If we call the cached service method with a key which should returen the small list, we see that the smallCache size is incremented (cache size is now = 1).But if we call the cached service method again with the same key we still see the service logic is executed instead of returning the cached value.  After some investigation, I think the problem resides in the **CacheAspectSupport** class, in the method inspectCacheables, the local variable **updateRequired** is overwritten if there is more then 1 cache defined, which makes that the cached value is never reused if you have more then 1 `@Cacheable` annotation within a `@Caching` enclosing annotation.  Small maven project attached to reproduce the issue (testclass: DummyServiceImplTest).  ---  **Affects:** 3.2.4, 3.2.5  **Attachments:** - [springcachingbug.zip](https://jira.spring.io/secure/attachment/21514/springcachingbug.zip) (_6.72 kB_)  **Issue Links:** - #16216 Target Cache gets checked twice for every cache hit  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/73a8a1b9667fe4554bfe6500fb48931caa45278c, https://github.com/spring-projects/spring-framework/commit/b0b40dade132577533bfbab34dbe8e03d9c613b6","closed","in: core,","spring-projects-issues","2013-11-26T03:39:45Z","2019-01-11T19:27:50Z"
"","15926","Encode user name in user-specific message destinations. [SPR-11302]","**[Pierre Fouché](https://jira.spring.io/secure/ViewProfile.jspa?name=pfouche)** opened **[SPR-11302](https://jira.spring.io/browse/SPR-11302?redirect=false)** and commented  The `DefaultUserDestinationResolver` in `org.springframework.messaging.simp.user` uses the user name obtained from the current `Principal` to build user-specific destinations.  However the user name can itself be a URI in some cases (eg when using OpenId authentication). Having slashes in the user name breaks the resolution of the `targetDestination`.  It seems to me that encoding (using SHA-1 for instance) the user name would make the algorithm more robust.   ---  **Affects:** 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d03fb8954b9ab487df9df6727058f6733ed9d5db","closed","type: enhancement,","spring-projects-issues","2014-01-13T03:49:51Z","2014-01-28T13:07:13Z"
"","15901","NPE in StompSubProtocolHandler.handleMessageFromClient [SPR-11277]","**[Pierre Fouché](https://jira.spring.io/secure/ViewProfile.jspa?name=pfouche)** opened **[SPR-11277](https://jira.spring.io/browse/SPR-11277?redirect=false)** and commented  See the stack trace below. This happen when sending an incorrect STOMP command (eg ""FOO"") with no payload. In that case, the StompDecoder returns a null decoded message, causing the NPE.  ``` java.lang.NullPointerException: null 	at org.springframework.web.socket.messaging.StompSubProtocolHandler.handleMessageFromClient(StompSubProtocolHandler.java:127) ~[spring-websocket-4.0.0.RELEASE.jar:4.0.0.RELEASE] 	at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.handleMessage(SubProtocolWebSocketHandler.java:233) [spring-websocket-4.0.0.RELEASE.jar:4.0.0.RELEASE] 	at org.springframework.web.socket.handler.WebSocketHandlerDecorator.handleMessage(WebSocketHandlerDecorator.java:59) [spring-websocket-4.0.0.RELEASE.jar:4.0.0.RELEASE] 	at org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.handleMessage(LoggingWebSocketHandlerDecorator.java:55) [spring-websocket-4.0.0.RELEASE.jar:4.0.0.RELEASE] 	at org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.handleMessage(ExceptionWebSocketHandlerDecorator.java:69) [spring-websocket-4.0.0.RELEASE.jar:4.0.0.RELEASE] 	at org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter.onWebSocketText(JettyWebSocketHandlerAdapter.java:77) [spring-websocket-4.0.0.RELEASE.jar:4.0.0.RELEASE] 	at sun.reflect.GeneratedMethodAccessor52.invoke(Unknown Source) ~[na:na] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_45] 	at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_45] 	at org.eclipse.jetty.websocket.common.events.annotated.CallableMethod.call(CallableMethod.java:71) [websocket-common-9.1.0.v20131115.jar:9.1.0.v20131115] 	at org.eclipse.jetty.websocket.common.events.annotated.OptionalSessionCallableMethod.call(OptionalSessionCallableMethod.java:72) [websocket-common-9.1.0.v20131115.jar:9.1.0.v20131115]  ```    ---  **Affects:** 4.0 GA","closed","type: bug,","spring-projects-issues","2014-01-02T05:46:42Z","2014-01-28T13:07:06Z"
"","15833","Rename @PathVariable to @DestinationVariable in spring-messaging [SPR-11208]","**[Pierre Fouché](https://jira.spring.io/secure/ViewProfile.jspa?name=pfouche)** opened **[SPR-11208](https://jira.spring.io/browse/SPR-11208?redirect=false)** and commented  I've noticed there are two distinct annotations `@PathVariable`: The well known org.springframework.web.bind.annotation.PathVariable and the new org.springframework.messaging.handler.annotation.PathVariable.  This seems misleading to me, especially if one wants to mix standard `@RequestMapping` with `@MessageMapping` methods in the same controller.  Do we really need two annotations? They seem to have the same semantics.   ---  **Affects:** 4.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/92dad1849fe42c7bf3ecce2ae4d89428bc3272eb","closed","type: enhancement,","spring-projects-issues","2013-12-11T08:08:17Z","2013-12-11T23:57:22Z"
"","16223","JdbcTemplate should support JDBC 4.1 getObject(columnIndex, type) [SPR-11600]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-11600](https://jira.spring.io/browse/SPR-11600?redirect=false)** and commented  JDBC 4.2 defines the following type mappings |ANSI SQL|Java SE 8| |:---|:---| |DATE|LocalDate| |TIME|LocalTime| |TIMESTAMP|LocalDateTime| |TIME WITH TIMEZONE|OffsetTime| |TIMESTAMP WITH TIMEZONE|OffsetDateTime|  with can be used through `ResultSet#getObject(int, Class)`, `ResultSet#getObject(String, Class)`,`PreparedStatement#setObject(int, Object)`  So I would expect the following to work  ``` jdbcTemplate.queryForObject(""SELECT DATE_COLUMN FROM JAVA_TIME"", LocalDate.class); ```  but it doesn't, it fails with:  > org.springframework.dao.TypeMismatchDataAccessException: Type mismatch affecting row number 0 and column type 'DATE': Value [1988-12-25] is of type [java.sql.Date] and cannot be converted to required type [java.time.LocalDate]  Instead I have to do  ``` jdbcTemplate.queryForObject(""SELECT DATE_COLUMN FROM JAVA_TIME"",         (rs, rowNum) -> rs.getObject(1, LocalDate.class)); ```  The issue seems to be that `JdbcUtils.getResultSetValue(ResultSet, int, Class)` calls `JdbcUtils.getResultSetValue(ResultSet, int)` without the required type. I don't know if this an oversight or intentional.  ---  **Affects:** 4.0.2  **Issue Links:** - #19150 'Invalid column type' exception generated when writing a Boolean data member to Oracle database - #18688 Java boolean is not handled correctly when used with Oracle JDBC driver - #13215 Can't insert into nvarchar2 using SimpleJdbcInsert whereas it works with SimpleJdbcTemplate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3fef35879dbc16ea1820a4239e8520eb15b88db0, https://github.com/spring-projects/spring-framework/commit/37679384e82554250c87918ad042e7cfb3825813, https://github.com/spring-projects/spring-framework/commit/c9432ce49980cdda4a34e287605fa132abe90068","closed","type: enhancement,","spring-projects-issues","2014-03-25T13:44:51Z","2019-01-11T21:08:59Z"
"","16042","Call #free() on Blob and Clob [SPR-11415]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-11415](https://jira.spring.io/browse/SPR-11415?redirect=false)** and commented  Since Java 1.6/JDBC 4 `java.sql.Blob` and `java.sql.Clob` have a `#free` method to release the resources that they hold. This should be called as early as possible because otherwise the objects remain valid for at least the duration of the transaction in which they are created. `DefaultLobHandler` currently creates `Blob`s and `Clob`s and throws them away without calling `#free`.  For more information see: http://blog.jooq.org/2014/02/04/jdbc-4-0s-lesser-known-clob-free-and-blob-free-methods/   ---  **Affects:** 4.0.1  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/463","closed","type: enhancement,","spring-projects-issues","2014-02-11T08:53:05Z","2014-02-12T02:31:16Z"
"","16013","PreparedStatement#getParameterMetaData() calls may trigger unwanted side effects [SPR-11386]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-11386](https://jira.spring.io/browse/SPR-11386?redirect=false)** and commented  When upgrading from Spring 3.2.0 to Spring 4.0.0 we suddenly get the following exception.  ``` Caused by: java.sql.SQLException: Connection is not associated with a managed connection.org.jboss.jca.adapters.jdbc.jdk6.WrappedConnectionJDK6@47538759 	at org.jboss.jca.adapters.jdbc.WrappedConnection.lock(WrappedConnection.java:154) 	at org.jboss.jca.adapters.jdbc.WrappedStatement.lock(WrappedStatement.java:114) 	at org.jboss.jca.adapters.jdbc.WrappedPreparedStatement.setNull(WrappedPreparedStatement.java:539) 	at org.springframework.jdbc.core.StatementCreatorUtils.setNull(StatementCreatorUtils.java:285) 	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:214) 	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:148) 	at org.springframework.jdbc.core.ArgumentPreparedStatementSetter.doSetValue(ArgumentPreparedStatementSetter.java:66) 	at org.springframework.jdbc.core.ArgumentPreparedStatementSetter.setValues(ArgumentPreparedStatementSetter.java:47) 	at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:699) 	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:642)  ```  The tracked the issue down to: 1. `StatementCreatorUtils` now calls `PreparedStatement#getParameterMetaData()` for `null` bind parameters 2. `PreparedStatement#getParameterMetaData()` throws an `java.lang.ArrayIndexOutOfBoundsException` if the SQL query contains a comment 3. the JBoss connection pool (IronJacamar) disassociates the `PreparedStatement` with the connection 4. `StatementCreatorUtils` swallows the exception and goes on to call `PreparedStatement#setNull()` 5. the JBoss connection pool throws an exception because the `PreparedStatement` is no longer valid  The issue can be reproduced with the following code.  ``` jdbcTemplate.queryForList(""SELECT /* t */ 1 FROM dual where dummy = ?"", Integer.class, new Object[] {null}); ```  The quick fix we currently use is add `""Oracle JDBC driver""` to `StatementCreatorUtils#driversWithNoSupportForGetParameterTypes`  through reflection but this is a hack at best.  Not using comments is not an option for us as we tag most of our queries with comments for monitoring in Enterprise Manager Cloud Control.  Not using `null` is not always easy as sometimes we have dynamic SQL where it's just easier to use `NVL` or `IS NULL` instead of several different queries.  We're aware that this is actually an Oracle bug and not a Spring bug but we need a better work around until we get a fix from Oracle. We're aware that JBoss actually certified the 12c driver.  Environment: * Java 7u45 * ojdbc7 12.1.0.1 * JBoss EAP 6.1.0  ---  **Affects:** 3.2.6, 4.0 GA  **Issue Links:** - #15726 performancedrop due to repeated JDBC 3.0 getParameterType calls in setNull in StatementCreatorUtils - #15921 StandardEnvironment's system environment access produces warning with stacktrace on WebSphere - #16343 SpringProperties: the ClassLoader might be null, if class is loaded by the bootstrap class loader - #18398 Oracle 12c JDBC driver throws inconsistent exception from getParameterType (affecting setNull calls)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8a6b09520492d33dab1004090a3c25a3e1a57185, https://github.com/spring-projects/spring-framework/commit/036bd791f0b6f56209e8c61354817231f4e8393b, https://github.com/spring-projects/spring-framework/commit/60b24cffdba6a2d758bf92289321559d39ba2c74, https://github.com/spring-projects/spring-framework/commit/6634c19e6a89648ed8e5c304902a0483910e0eab, https://github.com/spring-projects/spring-framework/commit/60c1905cdd2a197814f0cdb74dc8c70ef2db79cd  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","type: bug,","spring-projects-issues","2014-02-04T02:12:21Z","2019-01-11T19:11:54Z"
"","15670","Avoid unnecessary char[] allocation in NamedParameterUtils [SPR-11042]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-11042](https://jira.spring.io/browse/SPR-11042?redirect=false)** and commented  #### Overview  `NamedParameterUtils.substituteNamedParameters()` uses the following pattern:  ``` stringBuilder.append(str.substring(start, end)); ```  This wasn’t such an issue in HotSpot up to Java 7 Update 6, because even though it would allocate an unnecessary `String`, it would not allocate a new `char[]`. This all changed with [7u6](http://www.javaadvent.com/2012/12/changes-to-stringsubstring-in-java-7.html) when `String#substring` started allocating a new `char[]` (it always did on J9).  #### Proposed Solution  Luckily this can easily be solved with the following pattern:  ``` stringBuilder.append(str, start, end); ```    ---  **Affects:** 3.2.4","closed","type: enhancement,","spring-projects-issues","2013-10-29T14:23:00Z","2013-11-06T22:51:35Z"
"","16342","ConcurrentReferenceHashMap doesn't limit upper concurrency level [SPR-11720]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11720](https://jira.spring.io/browse/SPR-11720?redirect=false)** and commented  The `calculateShift` method contains a bug which means that the maximum concurrency level is not respected.  ---  **Affects:** 4.0.3  **Issue Links:** - #21532 ConcurrentReferenceHashMap does not enforce visibility of cached EntrySet  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","in: core,","spring-projects-issues","2014-04-22T06:55:26Z","2019-01-11T21:19:46Z"
"","16225","PatternsRequestCondition strips off extensions [SPR-11602]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11602](https://jira.spring.io/browse/SPR-11602?redirect=false)** and commented  The `getImage` test from Sagan's `TutorialIntegrationTests` fails with the latest 4.0.3 SNAPSHOT.  The test is checking that the following method is called correctly:  ```java @RequestMapping(""/{tutorial}/images/{image:[a-zA-Z0-9._-]+}"") public ResponseEntity loadImage(@PathVariable String tutorial, @PathVariable String image) {     return new ResponseEntity(tutorials.find(tutorial).getImage(image), HttpStatus.OK); } ```  A stub is used to check that the URL `/repos/spring-guides/tut-my-tutorial/contents/images/image.png` is accessed, however the test now fails because `.png` is missing.  The `image` path variable has had the file extension removed. With Spring 4.0.2 this was not the case.  ---  **Affects:** 4.0.3  **Issue Links:** - #16157 File extension not removed when URI variable contains a dot  0 votes, 7 watchers","closed","status: invalid,","spring-projects-issues","2014-03-26T01:18:15Z","2019-01-13T21:00:38Z"
"","16219","Annotations on superclasses are detected by StandardAnnotationMetadata [SPR-11595]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11595](https://jira.spring.io/browse/SPR-11595?redirect=false)** and commented  #### Background  The `StandardAnnotationMetadata` class in Spring Framework 4.0.2 returns `false` for `isAnnotated` when a class is not _directly_ annotated with an annotation (even if the annotation is _present_ on a superclass). Furthermore, `getAnnotationAttributes` and `getAllAnnotationAttributes` return `null` when querying for the same annotation.  ---  #### Analysis  The fix for #16100 changed this logic and is causing problems with Spring Boot conditions. Specifically, `@Conditional` annotations were never previously considered on super classes (see #15466).  ---  **Affects:** 4.0.3  **Issue Links:** - #15466 `@Conditional` on superclass is ignored - #16100 Favor more locally declared composed annotations over inherited annotations in AnnotationUtils - #16221 Favor more locally declared composed annotations over inherited annotations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a2f1169e820c76df7f06f2b2b921b184b8775b45","closed","in: core,","spring-projects-issues","2014-03-24T15:12:19Z","2019-01-13T06:55:00Z"
"","16182","Duplicate entries in POMs [SPR-11558]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11558](https://jira.spring.io/browse/SPR-11558?redirect=false)** and commented  Some of our merged POMs currently contain duplicate entries.   --- No further details from [SPR-11558](https://jira.spring.io/browse/SPR-11558?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2014-03-14T13:49:14Z","2019-01-12T02:45:20Z"
"","16105","getBeanNamesForType should consider FactoryBean generics for early introspection of config classes as well [SPR-11480]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11480](https://jira.spring.io/browse/SPR-11480?redirect=false)** and commented  Spring Boot was recently updated to consider FactoryBean generics. This could be ported into `BeanFactoryUtils` if useful.  See https://github.com/spring-projects/spring-boot/pull/355 & https://github.com/spring-projects/spring-boot/commit/5d591edbf81b271fe2b5152f883bc14cb7c4f99c  ---  **Affects:** 4.0.2  **Issue Links:** - #16146 Introspect factory method return type for type variable resolution at injection points - #18558 Improve target bean type detection for FactoryBeans - #16461 HttpInvokerProxyFactoryBean and co do not reliably expose correct type when declared via `@Bean`  0 votes, 5 watchers","open","type: enhancement,","spring-projects-issues","2014-02-24T21:14:58Z","2019-01-13T06:55:36Z"
"","16066","Memory leak in ConcurrentReferenceHashMap [SPR-11440]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11440](https://jira.spring.io/browse/SPR-11440?redirect=false)** and commented  The `restructureIfNecessary` method in `ConcurrentReferenceHashMap` can add new entries `Reference` objects that have been cleaned.  It appears that relying on `ReferenceQueue` alone is not enough to ensure that entries get removed. An entry that has been cleaned but somehow doesn't appear as a `pollForPurge` entry will be continually re-added with a `null` reference.  ---  **Affects:** 3.2.7, 4.0.1  **Issue Links:** - #16021 memory leak in class org.springframework.core.ResolvableType - #21532 ConcurrentReferenceHashMap does not enforce visibility of cached EntrySet  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b4c81e64240527c34d9896a13746596eab6e846, https://github.com/spring-projects/spring-framework/commit/09c57203bb29c652e73d5d08130a3004ff7f8bdb  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","in: core,","spring-projects-issues","2014-02-18T14:49:02Z","2019-01-11T21:25:17Z"
"","15999","Embedded database connection closed by shutdown() method [SPR-11372]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11372](https://jira.spring.io/browse/SPR-11372?redirect=false)** and commented  Spring Batch recently hit a very hard to track-down problem when upgrading from Spring 3.2.0 to 3.2.7.  When running the entire test suite some tests fail with the following exception:  ``` java.sql.SQLNonTransientConnectionException: connection exception: closed ```  Running tests in isolation causes no problems.  The minimum suite that replicates the issue is:  ```java @RunWith(Suite.class) @SuiteClasses({ SimpleJobRepositoryIntegrationTests.class, JobBuilderConfigurationTests.class, ChunkOrientedStepIntegrationTests.class }) public class ReproTests { } ```  After a lot of digging it appears that the root cause of the failure is #14347 [1].  Here is what happens:  `SimpleJobRepositoryIntegrationTests` uses `spring-test` and includes a `commons-dbcp` data-source. The data-source is part of a config that is cached.  `JobBuilderConfigurationTests` creates a direct `EmbeddedDataSource`. Tests here do not use `spring-test`. When the context is closed the `shutdown` method is called on the `EmbeddedDataSource`. This in turn issues some SQL that actually closes the HSQLDB session.  `ChunkOrientedStepIntegrationTests` runs, and reuses the previously created `commons-dbcp` pool. The pool appears to be open but because the entire session has been shutdown interaction cause exceptions.  [1] https://github.com/spring-projects/spring-framework/commit/4c823a3f9bf9413eea6b61a8c217eb1efff3e853  ---  **Affects:** 3.2 GA, 4.0 GA  **Issue Links:** - #12633 De-register JDBC drivers on EmbeddedDatabase shutdown - #13491 Introduce support for generating unique names for embedded databases  1 votes, 7 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-01-30T10:10:10Z","2019-01-12T02:46:05Z"
"","15959","Performance issues with SerializableTypeWrapper on Java 1.7.0_51 [SPR-11335]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11335](https://jira.spring.io/browse/SPR-11335?redirect=false)** and commented  The Spring XD build time jumped from 7mins to over 20mins following a Java upgrade to 1.7.0_51.  The root cause of the performance problems appears to be `SerializableTypeWrapper`.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d96b91a57bfab0ecb7543f687d297dc5db9414ee  2 votes, 6 watchers","closed","in: core,","spring-projects-issues","2014-01-20T14:07:51Z","2019-01-11T19:01:45Z"
"","15958","Upgrade to jexcelapi 2.6.12 in order to get rid of embedded log4j.xml [SPR-11334]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11334](https://jira.spring.io/browse/SPR-11334?redirect=false)** and commented  The upgrade to jexcelapi 2.6.12 needed to be rolled back due to build errors. We should investigate why.   --- No further details from [SPR-11334](https://jira.spring.io/browse/SPR-11334?redirect=false)","closed","type: task,","spring-projects-issues","2014-01-20T14:04:18Z","2014-01-28T13:07:07Z"
"","15837","Upgrade AspectJ dependency to 1.8 final and apply latest ASM 5.0.2 patches [SPR-11212]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11212](https://jira.spring.io/browse/SPR-11212?redirect=false)** and commented  We're using AspectJ 1.8.0 RC2 for building as of Spring Framework 4.0.3. Once it went final, let's update our externally declared dependency from AspectJ 1.7.4 to 1.8.0 as well.  ---  **Affects:** 4.0 GA  **Issue Links:** - #16279 Basic Java 8 bytecode compatibility for Spring 3.2.x through ASM 5.0.2 - #16263 Upgrade JCache dependency to 1.0 final - #15873 Revisit spring-aspects 4.0.0 dependency on AspectJ 1.8.0.M1 - #16321 Default use of target 1.8 for Spring test compilation - #16573 Upgrade to AspectJ 1.8.1 and Tomcat 8.0.9  0 votes, 6 watchers","closed","type: task,","spring-projects-issues","2013-12-11T23:44:48Z","2019-01-11T18:28:18Z"
"","15835","Deprecate DefaultKeyGenerator [SPR-11210]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11210](https://jira.spring.io/browse/SPR-11210?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/21f680c861adf13a4c5f58626d458fec82ad009e","closed","type: task,","spring-projects-issues","2013-12-11T16:33:33Z","2013-12-11T23:57:19Z"
"","15831","Potential race conditional with GenericMessagingTemplate [SPR-11206]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11206](https://jira.spring.io/browse/SPR-11206?redirect=false)** and commented  A potential concurrency issue has been fixed in SI and should be ported:  https://github.com/spring-projects/spring-integration/pull/991/files?w=1   ---  **Affects:** 4.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a1529d498e004b3e3b1aa123b57a07435e6d644d","closed","type: task,","spring-projects-issues","2013-12-11T00:02:49Z","2013-12-11T23:57:24Z"
"","15830","Extend LocaleChangeInterceptor to support time zone [SPR-11205]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11205](https://jira.spring.io/browse/SPR-11205?redirect=false)** and commented  Should `LocaleChangeInterceptor` be updated to also support `LocaleContextResolver` and  `TimeZoneAwareLocaleContext`?   --- No further details from [SPR-11205](https://jira.spring.io/browse/SPR-11205?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-12-10T22:18:12Z","2019-01-12T02:46:32Z"
"","15829","Document MVC timezone support [SPR-11203]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11203](https://jira.spring.io/browse/SPR-11203?redirect=false)** and commented   --- No further details from [SPR-11203](https://jira.spring.io/browse/SPR-11203?redirect=false)","closed","type: documentation,","spring-projects-issues","2013-12-10T17:28:15Z","2013-12-11T23:57:24Z"
"","15826","Document scripting updates (JRuby 1.5, Groovy 1.8) [SPR-11200]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11200](https://jira.spring.io/browse/SPR-11200?redirect=false)** and commented   --- No further details from [SPR-11200](https://jira.spring.io/browse/SPR-11200?redirect=false)","closed","type: documentation,","spring-projects-issues","2013-12-09T17:36:48Z","2013-12-11T23:57:24Z"
"","15824","Add pointers to getting started on spring.io [SPR-11198]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11198](https://jira.spring.io/browse/SPR-11198?redirect=false)** and commented   --- No further details from [SPR-11198](https://jira.spring.io/browse/SPR-11198?redirect=false)","closed","type: task,","spring-projects-issues","2013-12-09T07:55:42Z","2013-12-11T23:57:23Z"
"","15820","Document @Description [SPR-11194]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11194](https://jira.spring.io/browse/SPR-11194?redirect=false)** and commented   --- No further details from [SPR-11194](https://jira.spring.io/browse/SPR-11194?redirect=false)","closed","type: documentation,","spring-projects-issues","2013-12-07T19:50:03Z","2013-12-11T23:57:22Z"
"","15816","Document Servlet 3.0 in ""Initial web configuration"" [SPR-11190]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11190](https://jira.spring.io/browse/SPR-11190?redirect=false)** and commented   --- No further details from [SPR-11190](https://jira.spring.io/browse/SPR-11190?redirect=false)","closed","type: documentation,","spring-projects-issues","2013-12-06T11:35:21Z","2013-12-11T23:57:17Z"
"","15815","Remove EBR details from docs [SPR-11189]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11189](https://jira.spring.io/browse/SPR-11189?redirect=false)** and commented   --- No further details from [SPR-11189](https://jira.spring.io/browse/SPR-11189?redirect=false)","closed","type: documentation,","spring-projects-issues","2013-12-06T11:33:56Z","2013-12-11T23:57:24Z"
"","15814","Document @Conditional [SPR-11188]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11188](https://jira.spring.io/browse/SPR-11188?redirect=false)** and commented   --- No further details from [SPR-11188](https://jira.spring.io/browse/SPR-11188?redirect=false)","closed","type: documentation,","spring-projects-issues","2013-12-06T10:04:59Z","2013-12-11T23:57:21Z"
"","15813","Document SimpleKeyGenerator default in migration guide [SPR-11187]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11187](https://jira.spring.io/browse/SPR-11187?redirect=false)** and commented   --- No further details from [SPR-11187](https://jira.spring.io/browse/SPR-11187?redirect=false)","closed","type: documentation,","spring-projects-issues","2013-12-06T09:59:34Z","2013-12-11T23:57:20Z"
"","15812","Document SPR-11136 in migration guide [SPR-11186]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11186](https://jira.spring.io/browse/SPR-11186?redirect=false)** and commented   --- No further details from [SPR-11186](https://jira.spring.io/browse/SPR-11186?redirect=false)","closed","type: task,","spring-projects-issues","2013-12-06T09:57:17Z","2013-12-11T23:57:19Z"
"","15806","Check docs for references to Tiles v1 [SPR-11180]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11180](https://jira.spring.io/browse/SPR-11180?redirect=false)** and commented   --- No further details from [SPR-11180](https://jira.spring.io/browse/SPR-11180?redirect=false)","closed","type: documentation,","spring-projects-issues","2013-12-05T17:06:27Z","2013-12-11T23:57:22Z"
"","15792","Remove references to DTD from docs [SPR-11166]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11166](https://jira.spring.io/browse/SPR-11166?redirect=false)** and commented   --- No further details from [SPR-11166](https://jira.spring.io/browse/SPR-11166?redirect=false)","closed","type: documentation,","spring-projects-issues","2013-12-04T17:03:59Z","2013-12-11T23:57:23Z"
"","15791","Revise documentation towards more Java based config examples [SPR-11165]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11165](https://jira.spring.io/browse/SPR-11165?redirect=false)** and commented  It might be nice to replace the XML example with Java-config   --- No further details from [SPR-11165](https://jira.spring.io/browse/SPR-11165?redirect=false)","open","type: documentation,","spring-projects-issues","2013-12-04T17:00:50Z","2016-07-21T12:21:47Z"
"","15790","Replace Log4J sample with Logback [SPR-11164]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11164](https://jira.spring.io/browse/SPR-11164?redirect=false)** and commented   --- No further details from [SPR-11164](https://jira.spring.io/browse/SPR-11164?redirect=false)","closed","status: declined,","spring-projects-issues","2013-12-04T16:45:38Z","2013-12-07T16:41:42Z"
"","15789","Document the -bom [SPR-11163]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11163](https://jira.spring.io/browse/SPR-11163?redirect=false)** and commented   --- No further details from [SPR-11163](https://jira.spring.io/browse/SPR-11163?redirect=false)","closed","type: documentation,","spring-projects-issues","2013-12-04T16:43:09Z","2013-12-11T23:57:23Z"
"","15788","Remove all references to Amazon S3 repo [SPR-11162]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11162](https://jira.spring.io/browse/SPR-11162?redirect=false)** and commented   --- No further details from [SPR-11162](https://jira.spring.io/browse/SPR-11162?redirect=false)","closed","type: documentation,","spring-projects-issues","2013-12-04T16:41:45Z","2013-12-11T23:57:21Z"
"","15787","Mention Gradle in the docs [SPR-11161]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11161](https://jira.spring.io/browse/SPR-11161?redirect=false)** and commented  Maven Ivy are mentioned but not Gradle   --- No further details from [SPR-11161](https://jira.spring.io/browse/SPR-11161?redirect=false)","closed","type: documentation,","spring-projects-issues","2013-12-04T16:41:13Z","2013-12-11T23:57:20Z"
"","15786","Remove EBR section from docs [SPR-11160]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11160](https://jira.spring.io/browse/SPR-11160?redirect=false)** and commented  Assuming we are no longer publishing to ERB?   --- No further details from [SPR-11160](https://jira.spring.io/browse/SPR-11160?redirect=false)","closed","status: duplicate,","spring-projects-issues","2013-12-04T16:40:12Z","2019-01-11T19:36:04Z"
"","15785","Remove community download section from docs [SPR-11159]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11159](https://jira.spring.io/browse/SPR-11159?redirect=false)** and commented  In general, Spring publishes its artifacts to four different places ...   --- No further details from [SPR-11159](https://jira.spring.io/browse/SPR-11159?redirect=false)","closed","type: documentation,","spring-projects-issues","2013-12-04T16:39:31Z","2013-12-11T23:57:24Z"
"","15784","Document test MVC [SPR-11158]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11158](https://jira.spring.io/browse/SPR-11158?redirect=false)** and commented   --- No further details from [SPR-11158](https://jira.spring.io/browse/SPR-11158?redirect=false)","closed","status: invalid,","spring-projects-issues","2013-12-04T16:36:38Z","2019-01-12T05:26:24Z"
"","15783","Check references to struts [SPR-11157]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11157](https://jira.spring.io/browse/SPR-11157?redirect=false)** and commented  Since the package has now been removed   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3b6b353890580eac6ffedcf965e2066806b8ecea","closed","type: documentation,","spring-projects-issues","2013-12-04T16:35:07Z","2013-12-11T23:57:25Z"
"","15469","Remove all references to ibatis [SPR-11156]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11156](https://jira.spring.io/browse/SPR-11156?redirect=false)** and commented   --- No further details from [SPR-11156](https://jira.spring.io/browse/SPR-11156?redirect=false)","closed","type: documentation,","spring-projects-issues","2013-12-04T16:32:53Z","2013-12-11T23:57:20Z"
"","15782","Update figure 1 to include messaging module [SPR-11155]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11155](https://jira.spring.io/browse/SPR-11155?redirect=false)** and commented   ---  **Attachments:** - [spring-framework-overview.png](https://jira.spring.io/secure/attachment/21527/spring-framework-overview.png) (_57.05 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/46055d5783cfe88ef8ebe93274c2caaecef4ac48","closed","type: documentation,","spring-projects-issues","2013-12-04T16:27:26Z","2013-12-11T23:57:24Z"
"","15777","Rename -bom to -dependencies [SPR-11150]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11150](https://jira.spring.io/browse/SPR-11150?redirect=false)** and commented   --- No further details from [SPR-11150](https://jira.spring.io/browse/SPR-11150?redirect=false)","closed","status: declined,","spring-projects-issues","2013-12-04T08:54:01Z","2019-01-12T16:35:36Z"
"","15769","Images in docbook generated PDF are too large [SPR-11143]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11143](https://jira.spring.io/browse/SPR-11143?redirect=false)** and commented   ---  **Affects:** 4.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0972df7e95ab611582d48c011395272562dcb3f7","closed","type: bug,","spring-projects-issues","2013-12-03T15:05:03Z","2013-12-11T23:57:18Z"
"","15768","ReflectivePropertyAccessor should not consider ""is"" methods with non boolean returns [SPR-11142]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11142](https://jira.spring.io/browse/SPR-11142?redirect=false)** and commented  See https://github.com/spring-projects/spring-framework/commit/b25e91a550beaf428a6e696959b717341a04f27d#commitcomment-4760691  ---  **Affects:** 3.2.5  **Issue Links:** - #15344 Relax JavaBean rules for SpEL property access","closed","type: bug,","spring-projects-issues","2013-12-03T11:35:34Z","2019-01-11T19:37:00Z"
"","15749","Fix various Javadoc, log and exception message typos [SPR-11123]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11123](https://jira.spring.io/browse/SPR-11123?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e9f78f6043d8391121ba93d496b66beaa13a1dca","closed","type: task,","spring-projects-issues","2013-11-25T15:40:28Z","2013-12-03T15:15:33Z"
"","15748","Auto-wrap asciidoctor [SPR-11122]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11122](https://jira.spring.io/browse/SPR-11122?redirect=false)** and commented   --- No further details from [SPR-11122](https://jira.spring.io/browse/SPR-11122?redirect=false)","closed","status: declined,","spring-projects-issues","2013-11-25T08:29:47Z","2014-08-11T11:06:36Z"
"","15739","Upgrade HttpComponentsHttpInvokerRequestExecutor to require Apache HttpComponents 4.3 [SPR-11113]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11113](https://jira.spring.io/browse/SPR-11113?redirect=false)** and commented  We didn't want to bump the minimum version up to the recently released HttpComponents 4.3 for Spring 4.0 quite yet, at least not for HttpComponentsHttpInvokerRequestExecutor - rather just for async support in other places.  However, due to plenty of deprecations, we should raise the bar in Spring 4.1 then, once HttpComponents 4.3 has been out for half a year at least. (Note: We raised to HttpComponents 4.2 in Spring 3.2 after about the same time of availability.)  ---  **Affects:** 4.0 GA  **Issue Links:** - #17135 org.apache.http.impl.client.InternalHttpClient.getParams() throws UnsupportedOperationException (_**""duplicates""**_) - #16597 Inconsistent support for RequestCallback in HttpComponentsClientHttpRequestFactory - #15887 Require Jackson 2.1+, Quartz 2.1.4+, EhCache 2.5+ - #16010 Apache HttpComponents 4.3 required at runtime but not listed in migration guide - #16940 When using HttpComponentsClientHttpRequestFactory, setting a proxy through RequestConfig should not be ignored - #17144 Configured RequestConfig in HttpClient gets overwritten by default  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-11-24T13:14:55Z","2019-01-11T19:28:34Z"
"","15729","CustomizableThreadCreator could use AtomicInteger [SPR-11103]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11103](https://jira.spring.io/browse/SPR-11103?redirect=false)** and commented  Customizable thread creator should use an AtomicInteger for a single and incrementing counter, for elastic thread pools locking for a single thread creation is at least twice expensive than using any AQS implementation.  I have to open an issue for this, sorry for starting on a wrong foot. Will do that soon.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.   ---  **Affects:** 3.2.5  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/454  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1cd5071e6ac328cf7920b42b6f7eec6afa2c8035","closed","type: enhancement,","spring-projects-issues","2013-11-20T09:55:14Z","2014-02-18T22:36:50Z"
"","15722","Polish asciidoctor [SPR-11096]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11096](https://jira.spring.io/browse/SPR-11096?redirect=false)** and commented  General bug for any polish/refinements that we need to make following the acciidoctor migration.  ---  This issue is a sub-task of #15588","closed","type: documentation,","spring-projects-issues","2013-11-18T09:55:45Z","2019-01-11T19:23:13Z"
"","15713","Fix broken javadoc links [SPR-11087]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11087](https://jira.spring.io/browse/SPR-11087?redirect=false)** and commented  https://github.com/spring-projects/spring-framework/pull/407   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dfa7483812df219440e3e7c8a58e0421e55924e6","closed","type: task,","spring-projects-issues","2013-11-11T17:52:55Z","2013-12-03T15:15:31Z"
"","15712","@PropertySources fails on JDK 7 due to @Repeatable [SPR-11086]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11086](https://jira.spring.io/browse/SPR-11086?redirect=false)** and commented  https://github.com/spring-projects/spring-framework/commit/e95bd9e25086bf1dad37f8d08293c948621faf6b#commitcomment-4547605  > `@philwebb` How is this supposed to work when using JDK < 8? java.lang.annotation.repetable seems to have `@Retention`(RetentionPolicy.RUNTIME)... We just tried to run an example which uses `@PropertySource` using JDK 1.7 and it fails with a ClassNotFoundException!  ---  **Attachments:** - [springtest.zip](https://jira.spring.io/secure/attachment/21491/springtest.zip) (_42.10 kB_)  **Issue Links:** - #21106 Reading annotations in ConfigurationClassParser does not fall back to ASM on Google App Engine  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ddebda1121c37caf1bcebd76671754802ed2c331  0 votes, 7 watchers","closed","type: bug,","spring-projects-issues","2013-11-11T17:49:36Z","2019-01-11T19:23:22Z"
"","15691","Fix remaining compiler warnings and fail build if they return [SPR-11064]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11064](https://jira.spring.io/browse/SPR-11064?redirect=false)** and commented  ---  **Issue Links:** - #17142 CollectionFactory API is not type-safe (_**""is depended on by""**_) - #16029 HibernateTemplate's generic signatures break backwards compatibility at source level - #12517 ModelAndViewResolver still refers to raw Class type  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/59002f245623d758765b72d598cd78c326c6f5fa","closed","type: task,","spring-projects-issues","2013-11-04T08:14:55Z","2019-01-11T19:23:51Z"
"","15641","Backport: Order of values in @PropertySource annotation depends on name attribute [SPR-11013]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11013](https://jira.spring.io/browse/SPR-11013?redirect=false)** and commented  ---  This issue is a backport sub-task of #15446","closed","in: core,","spring-projects-issues","2013-10-21T13:12:33Z","2019-01-11T19:12:32Z"
"","15640","Backport: AbstractApplicationEventMulticaster throws NPE when ApplicationEvent's source is null  [SPR-11012]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11012](https://jira.spring.io/browse/SPR-11012?redirect=false)** and commented  ---  This issue is a backport sub-task of #15573","closed","in: core,","spring-projects-issues","2013-10-21T12:01:12Z","2019-01-11T19:12:30Z"
"","15638","Backport: SpEL fails if class.name and name is evaluated in the same context [SPR-11010]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11010](https://jira.spring.io/browse/SPR-11010?redirect=false)** and commented  ---  This issue is a backport sub-task of #15119","closed","in: core,","spring-projects-issues","2013-10-21T11:03:26Z","2019-01-11T19:12:22Z"
"","15637","Backport:      Spring Framework     SPR-10996  TypeConverterDelegate standard conversion changes single element array to a class instance when trying to convert to Object  [SPR-11009]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11009](https://jira.spring.io/browse/SPR-11009?redirect=false)** and commented  ---  This issue is a backport sub-task of #15624","closed","","spring-projects-issues","2013-10-18T17:25:08Z","2019-01-11T19:12:07Z"
"","15636","Backport: Relax JavaBean rules for SpEL property access [SPR-11008]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11008](https://jira.spring.io/browse/SPR-11008?redirect=false)** and commented  ---  This issue is a backport sub-task of #15344","closed","in: core,","spring-projects-issues","2013-10-18T16:30:14Z","2019-01-11T19:12:05Z"
"","15633","Allow AOP advice to be added to JaxWsPortProxyFactoryBean [SPR-11005]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11005](https://jira.spring.io/browse/SPR-11005?redirect=false)** and commented  Added here to track https://github.com/spring-projects/spring-framework/pull/387  Original forum post:  > Hi – > We have a problem and we came up with a possible solution. We are looking for a buy-in from spring forum for the solution or would love to know, if you see any issues: >  > Following post has seven parts detailing the issue and resolution: > I.Problem Statement > II.Possible solution > III.How we have achieved > IV.Reason to override `JaxWsPortProxyFactoryBean` > V.Adding the custom advice/s to the service, as part of configurations > VI.How it Works > VII.Buy-In from the Spring Forum >  > I. Problem Statement: >      >     Ability to seamlessly execute custom java code around the invocation of a webservice call made through `JaxWsPortProxyFactoryBean` >  > II. Possible solution: >      >     We can address the issue by opening `JaxWsPortProxyFactoryBean` to accept custom advice and adding it to the `ProxyFactory` which is created as part of the `afterPropertiesSet()` method on `JaxWsPortProxyFactoryBean`. >  > III. How we have achieved: >      >     Developed custom advices (by implementing `MethodInterceptor`) which contains the custom java code to be executed around the webservice call >      >     Overrode `JaxWsPortProxyFactoryBean` to have the following: >      >         added capability to accept list of advises >             `private List adviceList;` >      >         re-implemented the `afterPropertiesSet()` method >             Created the `ProxyFactory` object by passing ‘this’ in order to set the target source and >             added the advices to `ProxyFactory` object >  > ```java > @Override > public void afterPropertiesSet() { > super.afterPropertiesSet(); >  > // Build a proxy that also exposes the JAX-WS BindingProvider interface. > ProxyFactory pf = new ProxyFactory(this); > pf.addInterface(getServiceInterface()); > pf.addInterface(BindingProvider.class); >  > if (adviceList != null) { > for (Advice advice : adviceList) { > pf.addAdvice(advice); > } > } > pf.addAdvice(this); >  > this.serviceProxy = pf.getProxy(getBeanClassLoader()); > } > ``` >  >  > IV. Reason to override `JaxWsPortProxyFactoryBean`: >      >     As the `ProxyFactory` is not exposed to outside world for any additions in terms of advices, hence the Override >     JAXWS intercepts don’t meet the needs because they don’t support context sharing around the invocation of the service call. Only before or after. >  > V. Adding the custom advice/s to the service, as part of configurations: >      >     On the webservice configuration >         Inject the custom advice >         Add the injected custom advice to the Overridden `JaxWsPortProxyFactoryBean` >  > ```java > @Configuration > public class TestWebServiceConfig { >  > @Inject > private HandlerResolver handlerResolver; >  > @Inject > private SSLSocketFactory sslSocketFactory; >  > /** > * The custom advice that was developed to > * achieve a custom functionality when a webservice > * is called > */ > @Inject > private CustomAdvice customAdvice; >  >  > /** > * Webservice configurations, which returns the > * OverriddenJaxWsPortProxyFactoryBean object with > * added customAdvice > */ > @Bean > public OverriddenJaxWsPortProxyFactoryBean testWebService() { >  > OverriddenJaxWsPortProxyFactoryBean bean = new OverriddenJaxWsPortProxyFactoryBean(); > bean.addAdvice(customAdvice); > bean.setServiceInterface(TestWebServiceSoap.class); > bean.setWsdlDocumentUrl(getClass().getClassLoader( ).getResource(""testWebService.wsdl"")); > bean.setNamespaceUri(""http:///testWebService""); > bean.setServiceName(""TestWebService""); > bean.setPortName(""TestWebServiceSoap""); > bean.setHandlerResolver(handlerResolver); > bean.setSslSocketFactory(sslSocketFactory); > return bean; > } > } > ``` >  >  > VI. How it Works: >      >     Since the custom advices got added to the service, whenever a call is made to the service, the advices would get executed therby the functionality included within the advice would get executed seamlessly >  > VII. Buy-In from the Spring Forum: >      >     I would like to understand issues, if you see any, with this approach >     Else, we need to see how we can work with you to get this added to spring >  >  > Thanks, > Venkat    ---  **Reference URL:** http://forum.spring.io/forum/spring-projects/web-services/723874-ability-to-seamlessly-execute-custom-java-code-around-the-invocation-of-a-webservice","closed","status: bulk-closed,","spring-projects-issues","2013-10-18T09:47:00Z","2019-01-12T00:21:51Z"
"","15608","Refactor from deprecated GenericTypeResolver calls [SPR-10980]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10980](https://jira.spring.io/browse/SPR-10980?redirect=false)** and commented  ---  This issue is a sub-task of #15601","closed","in: core,","spring-projects-issues","2013-10-09T17:07:03Z","2019-01-11T12:55:46Z"
"","15607","Refactor MethodParameter and DependencyDescriptor [SPR-10979]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10979](https://jira.spring.io/browse/SPR-10979?redirect=false)** and commented  Remove state and reconsider nesting code  ---  This issue is a sub-task of #15601","closed","in: core,","spring-projects-issues","2013-10-09T17:06:33Z","2019-01-11T12:55:44Z"
"","15606","Use ResolvableType in GenericTypeResolver  [SPR-10978]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10978](https://jira.spring.io/browse/SPR-10978?redirect=false)** and commented  ---  This issue is a sub-task of #15601","closed","in: core,","spring-projects-issues","2013-10-09T17:03:49Z","2019-01-11T12:55:42Z"
"","15605","Use ResolvableType in GenericCollectionTypeResolver  [SPR-10977]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10977](https://jira.spring.io/browse/SPR-10977?redirect=false)** and commented  ---  This issue is a sub-task of #15601","closed","in: core,","spring-projects-issues","2013-10-09T16:41:29Z","2019-01-11T12:55:40Z"
"","15604","Migrate GenericTypeResolver.resolveReturnTypeForGenericMethod to ResolvableType [SPR-10976]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10976](https://jira.spring.io/browse/SPR-10976?redirect=false)** and commented  ---  This issue is a sub-task of #15601  **Issue Links:** - #15044 Return type prediction for generic factory method fails if type conversion of method arguments is necessary","closed","in: core,","spring-projects-issues","2013-10-09T16:40:22Z","2019-01-11T12:55:38Z"
"","15602","ClassPathBeanDefinitionScanner INFO logging on JSR 330 [SPR-10974]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10974](https://jira.spring.io/browse/SPR-10974?redirect=false)** and commented  ``` 2013-10-09 21:55:26.596  INFO 92068 [main] --- o.s.c.a.ClassPathBeanDefinitionScanner   : JSR-330 'javax.inject.Named' annotation found and supported for component scanning 2013-10-09 21:55:26.629  INFO 92068 [main] --- ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@4b63e085: startup date [Wed Oct 09 21:55:26 CEST 2013]; root of context hierarchy 2013-10-09 21:55:26.671  INFO 92068 [main] --- o.s.c.a.ClassPathBeanDefinitionScanner   : JSR-330 'javax.inject.Named' annotation found and supported for component scanning 2013-10-09 21:55:26.862  INFO 92068 [main] --- o.s.c.a.ClassPathBeanDefinitionScanner   : JSR-330 'javax.inject.Named' annotation found and supported for component scanning ```  Could be DEBUG.   ---  **Affects:** 3.2.4","closed","type: enhancement,","spring-projects-issues","2013-10-09T13:04:09Z","2013-10-31T12:28:03Z"
"","15601","Introduce ResolvableType Class [SPR-10973]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10973](https://jira.spring.io/browse/SPR-10973?redirect=false)** and commented  Several bugs would benefit from a first class ResolvableType class. Something that allows you to work with Types more like Classes (get super/interfaces/generics etc) whilst also providing the ability to resolve them back to Classes.  ---  **Affects:** 3.2.4  **Sub-tasks:** - #15604 Migrate GenericTypeResolver.resolveReturnTypeForGenericMethod to ResolvableType - #15605 Use ResolvableType in GenericCollectionTypeResolver - #15606 Use ResolvableType in GenericTypeResolver - #15607 Refactor MethodParameter and DependencyDescriptor - #15608 Refactor from deprecated GenericTypeResolver calls  **Issue Links:** - #14133 MapToMapConverter cannot distinguish MultiValueMap in target (_**""is depended on by""**_) - #14599 Autowiring of generic types (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ee8f1aa61a4c9aad2ea09ce24aa4f247b3c17dfc, https://github.com/spring-projects/spring-framework/commit/f29092db23422d34fba067cf3cf9c72412b96b04, https://github.com/spring-projects/spring-framework/commit/6a18b0048ddbe9e65f6270946c1c17c6fdc66539, https://github.com/spring-projects/spring-framework/commit/5358cc0f5f412b541bdb7e8b89374d924eb12fa4, https://github.com/spring-projects/spring-framework/commit/3337fd32cba66aee549e4dddae61b86fe80832e3","closed","type: enhancement,","spring-projects-issues","2013-10-09T09:29:19Z","2019-01-11T12:56:06Z"
"","15556","Fix 'problem locating method' SpEL error message [SPR-10928]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10928](https://jira.spring.io/browse/SPR-10928?redirect=false)** and commented   ---  **Affects:** 3.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/824ac535d24f9c2dc057e9c7655ff8f0978dcb75, https://github.com/spring-projects/spring-framework/commit/d66cf0c32f7659787b5f6f76d34396f08d6061be","closed","in: core,","spring-projects-issues","2013-09-20T11:37:45Z","2019-01-13T21:02:28Z"
"","16224","TransactionSynchronizationManager possible race condition [SPR-11601]","**[Peter Vahlstrup](https://jira.spring.io/secure/ViewProfile.jspa?name=slum_x)** opened **[SPR-11601](https://jira.spring.io/browse/SPR-11601?redirect=false)** and commented  I'm experiencing a problem where afterCommit() in TransactionSynchronizationManager is actually called before the data is visible in DB. In afterCommit() I start a new thread which gets the id from the just committed entity however I get an exception from hibernate stating that the id is not present. I'm using standard propagation, READ_COMMITED isolation level, mysql 5.6, hibernate 4.2.  Looking at the log it seems that everything comes in the right order spring commits the transaction and then the afterCommit is called (added a log-call in my listener)  Before this I was creating the thread in afterCompletion in an HandlerInterceptor which worked fine   ---  **Affects:** 3.2.8","closed","status: invalid,","spring-projects-issues","2014-03-25T14:45:35Z","2019-01-12T05:26:07Z"
"","15615","Spring Web MVC FlashAttribute bug [SPR-10987]","**[Peter Ungvari](https://jira.spring.io/secure/ViewProfile.jspa?name=peter-ungvari)** opened **[SPR-10987](https://jira.spring.io/browse/SPR-10987?redirect=false)** and commented  Flash attributes cannot be used with request (redirect URL) parameters if the URL contains non-alphabetic characters. In this case the flash attributes simply disappear.  Simple reproduction steps: * add a simple flash attribute (eg. requestAttributes.addFlashAttribute(""message"", ""message""); ) * add a model attribute with value ""/"" or ""%2F"" (eg. modelAndView.addObject(""something"", ""/""); ) * redirect to some URL and try to read the ""message"" and ""something"" attributes from the view.  Expected result: ${message} and ${param.something} has the previously set values. Actual result: ${message} does not have any value.  See the source code of the Reference URL.  ---  **Affects:** 3.1.2  **Reference URL:** https://github.com/peter-ungvari/spring-flash-attribute.git  **Attachments:** - [desktop.png](https://jira.spring.io/secure/attachment/21435/desktop.png) (_12.89 kB_) - [spring-flash-attribute-1.0.0-SNAPSHOT.war](https://jira.spring.io/secure/attachment/21434/spring-flash-attribute-1.0.0-SNAPSHOT.war) (_4.78 MB_)","closed","in: web,","spring-projects-issues","2013-10-14T05:42:17Z","2019-01-13T21:02:16Z"
"","15591","Add method to FactoryBeanRegistrySupport to query if a FactoryBean has created singleton object [SPR-10963]","**[Peter Plosz](https://jira.spring.io/secure/ViewProfile.jspa?name=ploszpe)** opened **[SPR-10963](https://jira.spring.io/browse/SPR-10963?redirect=false)** and commented  We are using FactoryBeans to implement startup time configuration checks (in afterPropertiesSet()) and lazy initialization. We need to implement some monitoring functionality that should not trigger initialization of these beans if they are not initialized yet. For implementing this functionality, we need to be able query if bean has been created by the factory bean or not.  At the moment we have a flag in FactoryBean that indicates if the singleton object has been created by this FactoryBean. By doing this we are duplicating the information already available in FactoryBeanRegistrySupport (factoryBeanObjectCache.containsKey(beanName)) but there is no public interface to access it.   --- No further details from [SPR-10963](https://jira.spring.io/browse/SPR-10963?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-10-07T06:52:02Z","2019-01-12T00:22:06Z"
"","15537","Built-in customCollectionEditor partially overrides registered property editor [SPR-10909]","**[Peter Ludikar](https://jira.spring.io/secure/ViewProfile.jspa?name=pelu)** opened **[SPR-10909](https://jira.spring.io/browse/SPR-10909?redirect=false)** and commented  I gave this Major priority because this kind of bug will put people off from using the Framework if they happen to want to use the framework for anything but the simplest of projects.  I was aiming to manipulate a Set collection in a JSP, and therefore I needed to convert an Object reference to a String and back again.  I tried using CustomCollectionEditor by overriding the SetAsText and GetAsText methods, but the conversion would only happen one way (GetAsText would invoke but SetAsText would not).  I then tried to extend PropertyEditorSupport to achieve the same conversion, but exactly the same issue happened again.  After using Trace logging I discovered that CustomCollectionEditor was being invoked on the String -> Object conversion, even though I had correctly registered the PropertyEditor.  Initially it gave me an error because it could not find TypeEditor class in the same package as the class I was trying to convert.  When I placed the TypeEditor in the right package, the error went away, but the conversion was also not invoked.  The work around is to make a global registration of your own custom CollectionsEditor in the xxx-portal.xml config file.   ---  **Affects:** 3.2.4  **Reference URL:** http://stackoverflow.com/questions/18730007/propertyeditor-issue-with-set-type/18742327#18742327","closed","status: bulk-closed,","spring-projects-issues","2013-09-11T06:45:08Z","2019-01-12T02:30:22Z"
"","15751","Incorrect ContextClassLoader for CommonJ WorkManager worker threads when Quartz Scheduler is used [SPR-11125]","**[Peter H](https://jira.spring.io/secure/ViewProfile.jspa?name=mag01)** opened **[SPR-11125](https://jira.spring.io/browse/SPR-11125?redirect=false)** and commented  When Quartz Scheduler is configured to utilize the CommonJ WorkManager, worker (WorkManager) threads have a different ContextClassLoader (CCL) than their caller. This happens at WebSphere AS at least, not sure about WebLogic.  The reason is that Spring creates the main Quartz thread during scheduler startup (startScheduler method in SchedulerFactoryBean) on its own and that means that this thread is unmanaged. This unmanaged thread is then used to control the all the Quartz activity and also to send jobs to the WorkManager. While CCL is propagated properly from the any managed thread to an unmanaged thread, it is not propagated from any unmanaged thread to a managed thread.  This means that while the unmanaged Quartz main thread will have correct CCL, managed WorkManager threads will not. They will get SystemClassLoader instead.  This should be corrected so that jobs can execute with correct CCL and thus especially (hardly modifiable) 3rd party code that may utilizes this class loader won't fail.  Most likely, the run method in the DelegatingWork class should be modified to explicitly propagate the CCL. Also a cleanup action that resets the CCL back at the end of the run would be essential.   ---  **Affects:** 3.0.7, 3.2.5  **Reference URL:** https://www.ibm.com/developerworks/community/forums/html/topic?id=7fe9a868-128c-41c2-9cf6-bcc87d9889ab  2 votes, 4 watchers","open","status: bulk-closed,","spring-projects-issues","2013-11-26T03:59:10Z","2019-06-28T10:33:45Z"
"","15698","spring boot tests & logging overriding managed version [SPR-11071]","**[Pete](https://jira.spring.io/secure/ViewProfile.jspa?name=springy%20tux)** opened **[SPR-11071](https://jira.spring.io/browse/SPR-11071?redirect=false)** and commented  Not sure I specified the correct spring version. I am using spring-boot version 0.5.0.M5 which loads up spring 4.0.0.M3, but there is no 0.5.0.M5 in the version drop list. Sorry if I got this wrong.  In my spring-boot pom.xml, I have the following 2 entries I lifted from the spring-boot examples.  If I remove the version from logging, then the pom complains there is no version specified for logging.  ```xml  	org.springframework.boot 	spring-boot-starter-logging 	0.5.0.M5  ```  If I leave the version number in for tests, then the pom complains I am overriding the managed version and if I remove the version, then pom complains I have not set a version for tests.  ```xml  	org.springframework.boot 	spring-boot 	0.5.0.M5 	tests  ```  This is the parent pom I am using, also lifted from the examples  ```xml  	org.springframework.boot 	spring-boot-starter-parent 	0.5.0.M5  ```    ---  **Affects:** 4.0 M3","closed","status: declined,","spring-projects-issues","2013-11-06T03:08:31Z","2019-01-12T16:35:39Z"
"","15626","Add prettyPrint option to @ResponseBody Annotation [SPR-10998]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-10998](https://jira.spring.io/browse/SPR-10998?redirect=false)** and commented  Hi guys,  I would really love to see a boolean attribute on the `@ResponseBody` annotation, like the following:  ``` @ResponseBody(formatOutput = true) public List getCodes() {    .... } ```  The idea of the format (or prettyPrint, or whatever) would be to format the outputted JSON, XML or whichever format you decide serialize in.   ---  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2013-10-17T13:51:10Z","2013-10-18T06:53:58Z"
"","15823","Allow configuring a PathMatcher for use in MappedInterceptor [SPR-11197]","**[Pedro Vilaça](https://jira.spring.io/secure/ViewProfile.jspa?name=pvilaca)** opened **[SPR-11197](https://jira.spring.io/browse/SPR-11197?redirect=false)** and commented  Assumptions: - The PathMatcher that Interceptor uses is defined by the HandlerMapping implementation. - We can have multiple HandlerMappings, each with its own PathMatcher. - The interceptors are vertical to all handler mappings.  We want to have path matching enabled at the interceptor level (path include/excludes), however the interceptor is forced to use the HandlerMapping' PathMatcher. This means that the interceptor might end up using different PathMatcher implementations, which is an obvious problem.  Example: If we are using both RegexPathMatcher and AntPathMatcher, and if we set:  ```                  ```  ... it will fail when the matching handler uses the RegexPathMatcher.  We can solve this problem if the framework allows the definition of the pathMatcher for a certain interceptor (and a global default one - Ant-style - for all of them).   ---  **Affects:** 3.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de280b01fe752fc7a5c6eeb22a5028f91b73f50a","closed","type: enhancement,","spring-projects-issues","2013-12-09T07:54:44Z","2014-01-28T13:07:09Z"
"","15682","Enable REST controller method parameter annotations on an interface [SPR-11055]","**[Paweł Mendelski](https://jira.spring.io/secure/ViewProfile.jspa?name=mendlik)** opened **[SPR-11055](https://jira.spring.io/browse/SPR-11055?redirect=false)** and commented  Please, enable inheritance of controller related annotations from implemented interfaces.  I would like to share rest service interface between client and server. This way I could provide a really convenient mechanism - **client-proxy**, like the one [RestEasy](http://docs.jboss.org/resteasy/docs/1.0.1.GA/userguide/html/RESTEasy_Client_Framework.html#Sharing_interfaces) provides.  Shared interface:  ```java @RequestMapping(""/random"") public interface RandomDataController {  	@RequestMapping(value = ""/{type}"", method = RequestMethod.GET) 	@ResponseBody 	RandomData getRandomData( 			@PathVariable(value = ""type"") RandomDataType type, @RequestParam(value = ""size"", required = false, defaultValue = ""10"") int size); } ```  Server implementation:  ```java @Controller public class RandomDataImpl implements RandomDataController {  	@Autowired 	private RandomGenerator randomGenerator;  	@Override 	public RandomData getPathParamRandomData(RandomDataType type, int size) { 		return randomGenerator.generateRandomData(type, size); 	} } ```  Client code:  ```java // ... RandomDataController randomDataController = SpringMvcProxyFactory.create(RandomDataController.class, ""http://localhost:8080""); RandomData rd = randomDataController.getRandomData(RandomDataType.ALPHA, 100); // ... ```  At the moment I cannot write `SpringMvcProxyFactory` because parameter annotations from interface `RandomDataController` are not inherited by `RandomDataControllerImpl`.  ---  **Affects:** 4.3.3  **Issue Links:** - #20270 `@RequestBody` annotation in interface is ignored (_**""is duplicated by""**_) - #18593 Inconsistent interpretation of parameter annotations in interface-based handler methods (_**""is duplicated by""**_) - #19095 mvc Parameter annotations are not inherited (_**""is duplicated by""**_) - #19371 Spring Mvc Annotations in argument of a method (like `@Path`) annotated with `@RequestMapping` are not supported when you create a `@RestController` via an Interface (_**""is duplicated by""**_) - #19590 RequestHeader annotation does not work if it's put on an interface (_**""is duplicated by""**_) - #16827 Consider reusing `@RequestMapping` annotations as an interface for HTTP clients (_**""is duplicated by""**_) - #19612 Allow controller parameter annotations (`@RequestBody`, `@PathVariable`...) to be defined on interfaces or parent classes (_**""is duplicated by""**_) - #20658 Supports annotating parameter annotations like `@PathVariable` on interface method (_**""is duplicated by""**_) - #21992 Aliases in parameter annotations on a controller interface are not evaluated - #22160 MethodParameter.isOptional() fails with ArrayIndexOutOfBoundsException - #16747 Introduce proxy-based REST client similar to HttpInvokerProxyFactoryBean - #21756 getMappingForMethod failed when implement a interface method(with `@RequestMapping`) in super class - #20609 Annotations on generic interface methods not found by AnnotationUtils - #21416 Subclass-resolved generic return type declarations for handler methods - #21380 `@DateTimeFormat` annotations are necessary both on field and constructor parameter in the immutable form class  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/790d515f8c49d9f80f41a2f0ca00535fa930ccc2, https://github.com/spring-projects/spring-framework/commit/1f5d0faf1f3a1ee1b8e26b76cd72a5fab3c2839b  30 votes, 37 watchers","closed","has: votes-jira,","spring-projects-issues","2013-10-31T23:41:04Z","2019-03-26T07:21:35Z"
"","15860","BeanFactory lacks method for getting bean by type with specified constructor arguments [SPR-11235]","**[Pavel Petrov](https://jira.spring.io/secure/ViewProfile.jspa?name=petrof)** opened **[SPR-11235](https://jira.spring.io/browse/SPR-11235?redirect=false)** and commented  In BeanFactory interface we have only one option to create a prototype bean which has a constructor with arguments: **Object getBean(String name, Object... args)**, which requires a type cast (it returns Object) and requires providing explicit name for a bean (even if there's a single implementation).  Could you please consider adding ** getBean(Class requiredType, Object... args)** as well?  ---  **Issue Links:** - #9865 `@LookupMethod` annotation for use with component scanning - #17383 Regression in 4.1: UnsatisfiedDependencyException because a prototype-scoped FactoryBean is unexpectedly instantiated by getTypeForFactoryBean() - #21613 Programmatic ObjectProvider retrieval through BeanFactory API - #12089 Passing lookup-method arguments to created bean constructor - #18529 ObjectFactory lacks method for getting bean with specified constructor arguments  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fd5dbddac4c41551446b3393780e078885cc484b  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-12-16T08:00:12Z","2019-01-13T06:56:54Z"
"","15563","SpEL function T() breaks if package begins with 'lt' [SPR-10935]","**[Pavel Jakovlev](https://jira.spring.io/secure/ViewProfile.jspa?name=nezhull)** opened **[SPR-10935](https://jira.spring.io/browse/SPR-10935?redirect=false)** and commented  SpEL function T() breaks if package begins with 'lt', because parser interprets 'lt' not as part of the package, but as 'less then'. I live in Lithuania and all our packages begins with 'lt.', thus we can not use T() function to access constants and static functions.  ---  **Reference URL:** http://stackoverflow.com/questions/19001303/spring-spel-escape-package-name-in-t-function  **Issue Links:** - #14495 Allow SpEL reserved words in type package names","closed","in: core,","spring-projects-issues","2013-09-25T03:02:11Z","2019-01-11T22:10:23Z"
"","16239","RequestMapping path priority problem [SPR-11616]","**[Onur Kağan Özcan](https://jira.spring.io/secure/ViewProfile.jspa?name=okohub)** opened **[SPR-11616](https://jira.spring.io/browse/SPR-11616?redirect=false)** and commented  Assume that we have following RequestMappings :  ``` @Controller @RequestMapping(""/xxx"") public class MyController {  @RequestMapping(""/**"") public ModelAndView getPage() {    //some code }  @RequestMapping(""/**/yyy/"") public ModelAndView getPageSecond() {    //some code }  @RequestMapping(""/**/yyy/{pathVariable}"") public ModelAndView getPageThird(@PathVariable(""pathVariable"") Integer num) {    //some code }  } ```  If i send a request like that, spring is catching it with second mapping --> ""/xxx/aaa/bbb/yyy/""  It is ok, but when im sending a request like that, game is changing and it is caught via first mapping --> ""/xxx/aaa/bbb/yyy/23""  I think third mapping is more special and has to be higher priority than first one, Is it expectable behaviour, then why ? Or is it a bug ?  ---  **Affects:** 4.0.3  **Issue Links:** - #11407 RequestMapping with 3 PathVariable doesn't work  2 votes, 4 watchers","closed","status: declined,","spring-projects-issues","2014-03-27T09:02:50Z","2019-01-13T21:00:35Z"
"","16101","Spring MVC form handling sample project in STS and eclipse kepler [SPR-11476]","**[Olu Ore](https://jira.spring.io/secure/ViewProfile.jspa?name=oluore)** opened **[SPR-11476](https://jira.spring.io/browse/SPR-11476?redirect=false)** and commented   --- No further details from [SPR-11476](https://jira.spring.io/browse/SPR-11476?redirect=false)","closed","status: invalid,","spring-projects-issues","2014-02-23T17:01:56Z","2019-01-12T05:26:12Z"
"","15946","An IllegalStateException is thrown from Tomcat intermittently when returning a DeferredResult from an async Controller.   [SPR-11322]","**[Oliver Johansson](https://jira.spring.io/secure/ViewProfile.jspa?name=enigma1510)** opened **[SPR-11322](https://jira.spring.io/browse/SPR-11322?redirect=false)** and commented  Appears to be a race condition that I can reproduce 100% after startup and see rarely thereafter.  The error produced from Tomcat is:  SEVERE: Error processing request java.lang.IllegalStateException: Calling [asyncComplete()] is not valid for a request with Async state [MUST_DISPATCH]  I am using using: Tomcat 7.0.50 Spring 3.2.6 Spring Security 3.1.4 Java 7  The code looks like this:  ```java     @RequestMapping(value = ""/ack"", method = RequestMethod.POST, produces=""application/json"")     @ResponseBody     public DeferredResult ackPage()      {           DeferredResult deferredResponse = new DeferredResult( ackPageTimeout);          doStuffInSeparateThread( deferredResponse);                  log.debug( ""returning deferredResult"");         return deferredResponse;     } ```  //doStuffinSeparateThread()  ```java ...          System.out.println( ""NO SLEEP"");         log.debug( ""setting result on deferred result."");         result.setResult( response); ... ```  On startup, I see in the logs:  2014-01-16 11:37:05,290 [http-bio-18080-exec-1] DEBUG com.acme.controller.AsyncPageController - returning deferredResult NO SLEEP 2014-01-16 11:37:05,291 [ringBuffer-ringbuffer-2] DEBUG com.acme.handler.HttpHandlerContext - setting result on deferred result. 2014-01-16 11:37:05,295 [http-bio-18080-exec-1] DEBUG org.springframework.web.context.request.async.WebAsyncManager - Concurrent handling starting for POST [/page/ack] 2014-01-16 11:37:05,296 [http-bio-18080-exec-1] DEBUG org.springframework.web.context.request.async.WebAsyncManager - Concurrent result value [com.acme.controller.response.AckPageHttpResponse@57898e4d] 2014-01-16 11:37:05,296 [http-bio-18080-exec-1] DEBUG org.springframework.web.context.request.async.WebAsyncManager - Dispatching request to resume processing Jan 16, 2014 6:37:05 PM org.apache.coyote.http11.AbstractHttp11Processor process SEVERE: Error processing request java.lang.IllegalStateException: Calling [asyncComplete()] is not valid for a request with Async state [MUST_DISPATCH] at org.apache.coyote.AsyncStateMachine.asyncComplete(AsyncStateMachine.java:227) at org.apache.coyote.http11.Http11Processor.actionInternal(Http11Processor.java:358) at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:871) at org.apache.coyote.Request.action(Request.java:344) at org.apache.catalina.core.AsyncContextImpl.complete(AsyncContextImpl.java:92) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:140) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:409) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1044) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:607) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:313) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:722)  Thereafter, most invocations return successfully and I see:  2014-01-16 11:38:14,034 [http-bio-18080-exec-2] DEBUG com.acme.controller.AsyncPageController - returning deferredResult 2014-01-16 11:38:14,035 [http-bio-18080-exec-2] DEBUG org.springframework.web.context.request.async.WebAsyncManager - Concurrent handling starting for POST [/page/ack] NO SLEEP 2014-01-16 11:38:14,035 [ringBuffer-ringbuffer-2] DEBUG com.acme.handler.HttpHandlerContext - setting result on deferred result. 2014-01-16 11:38:14,035 [ringBuffer-ringbuffer-2] DEBUG org.springframework.web.context.request.async.WebAsyncManager - Concurrent result value [com.acme.controller.response.AckPageHttpResponse@5be50167] 2014-01-16 11:38:14,035 [ringBuffer-ringbuffer-2] DEBUG org.springframework.web.context.request.async.WebAsyncManager - Dispatching request to resume processing  I believe the key to the issue is when the ""Concurrent handling starting for POST"" message appears in the logs.  On a fresh restart, there seems to be a few millisecond duration between returning the DeferredResult from the Controller, and this log appearing.  If I add a sleep before returning this condition is not seen.  ```java ...         System.out.println( ""SLEEPING 50ms..."");         try { Thread.sleep( 50); } catch( Exception e) {}         System.out.println( ""WAKING...."");          log.debug( ""setting result on deferred result."");         result.setResult( response);  ... ```  2014-01-16 11:44:53,904 [http-bio-18080-exec-1] DEBUG com.acme.controller.AsyncPageController - returning deferredResult SLEEPING 50ms... 2014-01-16 11:44:53,909 [http-bio-18080-exec-1] DEBUG org.springframework.web.context.request.async.WebAsyncManager - Concurrent handling starting for POST [/page/ack] WAKING.... 2014-01-16 11:44:53,957 [ringBuffer-ringbuffer-2] DEBUG com.acme.handler.HttpHandlerContext - setting result on deferred result. 2014-01-16 11:44:53,957 [ringBuffer-ringbuffer-2] DEBUG org.springframework.web.context.request.async.WebAsyncManager - Concurrent result value [com.acme.controller.response.AckPageHttpResponse@65751f91] 2014-01-16 11:44:53,957 [ringBuffer-ringbuffer-2] DEBUG org.springframework.web.context.request.async.WebAsyncManager - Dispatching request to resume processing    ---  **Affects:** 3.2.4, 3.2.6  **Attachments:** - [project.tgz](https://jira.spring.io/secure/attachment/21643/project.tgz) (_5.26 kB_) - [project-responseentity.tgz](https://jira.spring.io/secure/attachment/21645/project-responseentity.tgz) (_5.21 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/7e0c57eb8ca892c116e22ede49def4d385ed9e54","closed","status: declined,","spring-projects-issues","2014-01-16T11:07:21Z","2019-01-12T16:35:30Z"
"","16347","AbstractAdvisingBeanPostProcessor.isEligible(…) does not consider proxy interfaces [SPR-11725]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11725](https://jira.spring.io/browse/SPR-11725?redirect=false)** and commented  If `AbstractAdvisingBeanPostProcessor.isEligible(…)` encounters a proxy instance it only checks the proxy target class and its methods for eligibility for proxying.  If the target class doesn't implement **all** methods the proxy exposes (because some generic interceptor on the proxy executes the methods exposed on a proxy interface), the processor might consider a bean ineligible although it actually is (due to methods only exposed on the interface and not the target classs).  I think `….isEligible(…)` should also check for `Advised` and check the exposed interfaces as well.   ---  **Affects:** 3.2.8, 4.0.3  **Issue Links:** - [DATACMNS-498](https://jira.spring.io/browse/DATACMNS-498) Remove assumption guard in RepositoryFactorySupportUnitTests (_**""is depended on by""**_) - [DATACMNS-489](https://jira.spring.io/browse/DATACMNS-489) Add support for Future as return type for repository methods (_**""is depended on by""**_)  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-04-23T06:03:55Z","2014-05-19T00:04:30Z"
"","16341","Metadata reading should never use ASM for java.* and javax.* types (in particular on JDK 8) [SPR-11719]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11719](https://jira.spring.io/browse/SPR-11719?redirect=false)** and commented  If running JDK 8 and the `ClassPathScanningCandidateComponentProvider` encounters an annotation type during scanning (e.g. in Spring Data JPA where we explicitly scan for interfaces) it tries to read meta-data from `java.lang.annotation.Annotation`. This type of course was compiled with -target 1.8 for JDK 8 and thus the ASM reader will choke on it. Even if ASM didn't, we shouldn't actually process JDK classes with the ASM reader as it can cause issues with the Security Manager.  ---  **Affects:** 3.2.8, 4.0.3  **Issue Links:** - #16279 Basic Java 8 bytecode compatibility for Spring 3.2.x through ASM 5.0.2 - #12984 Allow AnnotationTypeFilter to consider interfaces as well - #16340 Fix/optimize handling of `@Bean` method override regression with return type narrowing on JDK 8 - #21208 Reduce ClassUtils.forName overhead (in particular for annotation introspection purposes)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ab7076118d761c7d8769b82ac401efa0abbfc01, https://github.com/spring-projects/spring-framework/commit/945335d14bb98b7427d92a8440a86e05ce23252c, https://github.com/spring-projects/spring-framework/commit/e379e77b9686d3c323ceb4c3021e0e7619f66d5e, https://github.com/spring-projects/spring-framework/commit/9c45755890e83f337267c5716d11fd0175fc6093, https://github.com/spring-projects/spring-framework/commit/2c1203dc9f46d7252517159dc8c0e3a0ddb1dd51  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-04-22T04:18:49Z","2019-01-13T06:54:26Z"
"","16340","Fix/optimize handling of @Bean method override regression with return type narrowing on JDK 8 [SPR-11718]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11718](https://jira.spring.io/browse/SPR-11718?redirect=false)** and commented  Overriding an `@Bean` method with a narrowed return type is working fine with Spring 3.2.8 on legacy JDKs (6 and 7). However, it's breaking with Spring 3.2.8 on JDK 8. Spring 4.0 on JDK 8 fixes this already, as part of general `@Bean` overload support. For Spring 3.2.9, we should do a minimal fix for the regression on JDK 8, even if we're not allowing overloaded `@Bean` methods in the same class yet.  ---  **Affects:** 3.2.8  **Issue Links:** - #15653 ConfigurationClass.validate() should allow for overloading in general or not at all - #16341 Metadata reading should never use ASM for java.* and javax.* types (in particular on JDK 8)  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-04-22T04:13:50Z","2019-01-11T21:19:35Z"
"","16315","ConversionService cannot convert from Object to String anymore by default [SPR-11693]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11693](https://jira.spring.io/browse/SPR-11693?redirect=false)** and commented  On Spring 3.2.8 a default `ConversionService` instance (e.g. `DefaultFormattingConversionService` will answer the following call with `true`:  ```java conversionService.canConvert(Object.class, String.class); ```  As of Spring 4.0.1 the same call returns `false` which is due to [that change](https://github.com/spring-projects/spring-framework/commit/48909886a214265e3f2b3765bf2bf4a1c26bc791#diff-c8669649a63c74b5bb250b1ad09180fbL57) (introduced for #15884). From the commit however, it's not quite clear why the implementation of `ObjectToObjectConverter` now explicitly excludes `String.valueOf(…)`.  ---  **Affects:** 4.0.1, 4.0.2, 4.0.3  **Issue Links:** - #15884 Add Converter implementations that convert legacy Date instances into JDK 8 date/time types","closed","in: core,","spring-projects-issues","2014-04-14T10:37:55Z","2019-01-11T21:00:50Z"
"","16160","Improve exception message for failed property access in SpEL [SPR-11535]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11535](https://jira.spring.io/browse/SPR-11535?redirect=false)** and commented  In case property access for a bean property fails, SpEL's `PropertyOrFieldReference` currently throws an exception with the following message:  ``` EL1008E:(pos 7): Field or property '…' cannot be found on object of type '…' ```  As `PropertyOrFieldReference` is only looking for public fields, it would be nice if that was reflected in the error message as one might be puzzled if the field actually exists but is not a public one.   ---  **Affects:** 3.2.8, 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/27cacf067255101cb1c4243c6d9b8bec74fe5db6, https://github.com/spring-projects/spring-framework/commit/eeb82c409ab41cc1b6481671bc66996b25017663  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-03-11T02:36:27Z","2014-03-26T22:34:01Z"
"","16085","Update reference manual to favor constructor injection [SPR-11459]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11459](https://jira.spring.io/browse/SPR-11459?redirect=false)** and commented  Constructor injection is the preferred way of doing dependency injection as it allows you to create immutable classes with null-checked dependencies. This is less error prone, also when the class is used in a non-Spring context (e.g. a unit test).  The prominent [Constructor-based or setter-based DI?](http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/beans.html#beans-dependency-resolution) breakout box in the reference manual totally subverts this message.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/74969a47945aadf171d78b29c04046544c5c0e69, https://github.com/spring-projects/spring-framework/commit/1d47034736af06998e871f53ab7ce3fb082df991","closed","type: documentation,","spring-projects-issues","2014-02-20T23:45:01Z","2014-03-26T22:34:01Z"
"","16052","Allow access to HttpMethod in controller methods [SPR-11425]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11425](https://jira.spring.io/browse/SPR-11425?redirect=false)** and commented  Currently, there's no easy way to access the `HttpMethod` in a controller method. This is specifically useful in case you map a controller method to multiple HTTP methods and need to disambiguate within the implementation.  Being able to inject the `HttpMethod` instance into the controller method directly would be helpful. Also, exposing the method on `ServletWebRequest` would be helpful as well.   ---  **Affects:** 3.2.7, 4.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0cb27f4bc50e4ce78c64176a0aec1291754cabfd","closed","type: enhancement,","spring-projects-issues","2014-02-13T05:36:05Z","2014-02-18T22:36:49Z"
"","16051","Add status ResultMatcher to express status code ranges [SPR-11424]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11424](https://jira.spring.io/browse/SPR-11424?redirect=false)** and commented  The `status()` method of `MockMvcResultMatchers` exposes a method per status code. This works fine if I want to express a particular code expected.  However, if I want to express a certain type of code (e.g. 1xx, 2xx etc.) I have to fall back to something like this:  ```java ….andExpect(status().is(both(greaterThanOrEqualTo(200)).and(lessThan(300)))); ```  A short  ```java –.andExpect(status().inRangeSuccess()); // expecting 2xx ```  would be easier to write and read. The method could also be named `isSuccess()` but I think it might make sense to clearly separate the range check methods from the ones checking for an individual status code.   ---  **Affects:** 4.0.1","closed","type: enhancement,","spring-projects-issues","2014-02-13T02:01:14Z","2014-03-12T14:07:10Z"
"","16046","ObjectProvider iterable/stream access for ""beans of type"" resolution in @Bean methods [SPR-11419]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11419](https://jira.spring.io/browse/SPR-11419?redirect=false)** and commented  In JavaConfig you can currently use an `@Autowired(required = false) List myComponents` field to access all beans of a given type to potentially hand them into a component manually instantiated in an `@Bean` method.  That said, it would be nice if this pattern could be used at the `@Bean` method level directly such as:  ```java @Bean public MyOtherComponent foo(List myComponents) {   … } ```  This currently throws an exception if not bean of type `MyComponent` can be found but could just fall back to an empty list, which is what you get with the field based approach currently.  ---  **Affects:** 4.0.1  **Issue Links:** - #15616 JavaConfig Bean overriding with addition - #21613 Programmatic ObjectProvider retrieval through BeanFactory API - #19901 Accept empty Collection injection for single constructor scenarios - #21572 Consistent non-exposure of null beans in the BeanFactory API - #21805 Ordered list access for BeanFactory.getBeanProvider(), superseding ObjectProvider - #21433 Introduce Stream support in PropertySources and PropertyValues  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-02-12T05:58:52Z","2019-01-11T21:27:07Z"
"","16030","Log caught exception in MappingJackson2HttpMessageConverter [SPR-11403]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11403](https://jira.spring.io/browse/SPR-11403?redirect=false)** and commented  #15886 introduced more detailed log output for `MappingJackson2HttpMessageConverter` in case of an invalid mapping configuration. However, the log output only states ""Failed to evaluate deserialization for type: Foo"" which is not too helpful, as you don't find out about the details of the invalid mapping of said class.  It would be helpful to also log the cause as it contains detailed information about what actually is misconfigured.  ---  **Affects:** 4.0.1  **Issue Links:** - #16226 Poor jackson parsing error message in MappingJackson2HttpMessageConverter - #15886 MappingJackson2(Http)MessageConverter should be more verbose in canRead/canWrite checks (on Jackson 2.3) - #18735 MappingJackson2HttpMessageConverter should not always log a warning  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2014-02-07T01:49:22Z","2019-01-11T21:28:48Z"
"","15983","HibernateJpaVendorAdapter should use new interface when on Hibernate 4.3 [SPR-11358]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11358](https://jira.spring.io/browse/SPR-11358?redirect=false)** and commented  Not sure this easily solvable but currently, the interfaces returned by `HibernateJpaVendorAdapter` cause Hibernate 4.3 to log a legacy warning and recommend to use the newer interfaces.  Can we mitigate these changes or will that require a dedicated Hibernate43JpaVendorAdapter?  ---  **Affects:** 3.2.6, 4.0 GA  **Issue Links:** - #15865 HibernateJpaVendorAdapter causes Hibernate 4.3 to produce deprecation warnings (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2014-01-24T09:32:31Z","2019-01-11T18:41:08Z"
"","15957","Bootstrapping the EntityManagerFactory should log the name of the persistence unit being used [SPR-11333]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11333](https://jira.spring.io/browse/SPR-11333?redirect=false)** and commented  Assume you configure an `EntityManagerFactoryBean` with a `packagesToScan`. If the classpath contains a `persistence.xml` with a persistence unit name of `default` this one will be used instead of the one implicitly created by the package scan. This is probably a bit surprising.  While one could argue, that as soon as you configure a `packagesToScan`, that particular `EMFB` shouldn't actually look for other PUs anymore, I thing the least we should do is logging the name of the PU used eventually.   ---  **Affects:** 3.2.6, 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/88730bdaa547298a33c8d742b63456530403171a, https://github.com/spring-projects/spring-framework/commit/c77832ba6d38096f57064f1d7f7b6dfcbd717832  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-01-20T10:45:45Z","2014-01-28T13:07:08Z"
"","15920","Include @ConditionalOnMissingBean and @ConditionalOnClass from Spring Boot [SPR-11296]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11296](https://jira.spring.io/browse/SPR-11296?redirect=false)** and commented  `@ConditionalOnMissingBean` and `@ConditionalOnClass` allow to selectively register bean definitions in case a different bean definition is already registered or a type being present on the classpath.  This is really useful to ecosystem projects to be able to pick up user configuration or fall back to defaults otherwise without necessarily creating a dependency on Spring Boot (which might cause a cyclic dependency if boot provides additional defaulting).  ---  **Issue Links:** - #15592 Port `@ConditionalOn`... from Spring Boot into Spring Core  5 votes, 7 watchers","open","type: enhancement,","spring-projects-issues","2014-01-08T13:40:43Z","2022-01-19T10:34:31Z"
"","15886","MappingJackson2(Http)MessageConverter should be more verbose in canRead/canWrite checks (on Jackson 2.3) [SPR-11261]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11261](https://jira.spring.io/browse/SPR-11261?redirect=false)** and commented  The `MappingJackson2HttpMessageConverter` currently calls `objectMapper.can(De)Serialize(…)` to check whether the mapper supports a given type. The mapper returns `false` if it encounters an exception in the marshaling metadata setup. So if you have an error in your mapping setup, the `HMC` is not selected and you never find out why.  `ObjectMapper` has overloads for the `can(De)Serialize(…)` methods taking an `AtomicReference` to capture the issue that prevented the serializer from being able to (de)serialize the type. So it would be cool if we used those and log the reason in the debug level.  ---  **Affects:** 3.2.6, 4.0 GA  **Issue Links:** - #16030 Log caught exception in MappingJackson2HttpMessageConverter - #16226 Poor jackson parsing error message in MappingJackson2HttpMessageConverter - #18735 MappingJackson2HttpMessageConverter should not always log a warning","closed","type: enhancement,","spring-projects-issues","2013-12-28T09:47:25Z","2019-01-11T18:38:29Z"
"","15885","Add potentially existing orm.xml file to default persistence unit when packages to scan is used [SPR-11260]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11260](https://jira.spring.io/browse/SPR-11260?redirect=false)** and commented  When the packages-to-scan feature of our `LocalContainerEntityManagerFactoryBean` is used, the default persistence unit created will cause the persistence providers to not scan for additional mapping files anymore.  This is unfortunate as global entity listeners can only be defined in XML currently. The Spring Data JPA auditing feature relies on this way of configuration. So if you're trying to use this feature you effectively have to opt out of all the nice defaulting provided by Spring and Spring Boot as you need to run with a custom `persistence.xml` and `orm.xml` again.  As `META-INF/orm.xml` is a reserved file it would be great if we could scan for it and expose it in the default `PersistenceUnitInfo` created.  ---  **Affects:** 4.0 GA  **Issue Links:** - #15538 Propagate LCEMFB.packagesToScan to native PersistenceProvider to pick up annotated packages - #15859 orm.xml should be recognized by default if using JPA  **Referenced from:** commits https://github.com/spring-projects/spring-boot/commit/d39a8360b77a26086613eb067f7043a04ea5025a","closed","type: enhancement,","spring-projects-issues","2013-12-28T04:33:51Z","2019-01-11T18:38:23Z"
"","15884","Add Converter implementations that convert legacy Date instances into JDK 8 date/time types [SPR-11259]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11259](https://jira.spring.io/browse/SPR-11259?redirect=false)** and commented  It would be useful if the `DefaultConversionService` registered converters to automatically convert legacy `Date` instances into the appropriate JDK 8 types.  ---  **Issue Links:** - [DATACMNS-411](https://jira.spring.io/browse/DATACMNS-411) Auditing should support Java 8 Date & Time types (_**""is depended on by""**_) - #14275 Support Date and Time API (JSR-310) - #16315 ConversionService cannot convert from Object to String anymore by default","closed","type: enhancement,","spring-projects-issues","2013-12-28T03:11:32Z","2019-01-11T18:24:37Z"
"","15876","@Enable registrars invoked with subclass for annotation placed on superclass (3.2.x) [SPR-11251]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11251](https://jira.spring.io/browse/SPR-11251?redirect=false)** and commented  If you have an `@Enable…` annotation, itself not being annotated with `@Inherited`, the related `ImportBeanDefinitionRegistrar` is still invoked multiple times when used in inheritance scenarios for configuration classes.  ```java @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) @Import(SomeImporBeanDefinitionRegistrar.class) public @interface MyAnnotation {  }  @Configuration @MyAnnotation public class Config {}  @Configuration public class SubConfig {}  new AnnotationConfigApplicationContext(SubConfig.class); ```  Here are the erroneous effects:  1. The `ImportBeanDefinitionRegistrar` gets invoked for the leaf class (`SubConfig` of the inheritance hierarchy (not the one the annotation is on) 2. The `AnnotationMetadata` does then return `null` if you're trying to access the annotation attributes of the triggering annotation.  I've prepared more code samples and the log output for the invocations in this [Gist](https://gist.github.com/olivergierke/0603aac59588c704c69a). Spring 4 seems to handle this correct already.  ---  **Affects:** 3.2.6  **Issue Links:** - [DATAREST-210](https://jira.spring.io/browse/DATAREST-210) ApplicationContext fails to load with HAL enabled snapshot - #15491 `@EnableTransactionManagement` and co should also get detected on superclasses - #14558 Prevent duplicate `@Import` processing and ImportBeanDefinitionRegistrar invocation - [SEC-2425](https://jira.spring.io/browse/SEC-2425) Support EnableGlobalMethodSecurity on superclass - #14572 Backport fix for multiple invocations of ImportBeanDefinitionRegistrars","closed","type: bug,","spring-projects-issues","2013-12-20T08:37:52Z","2019-01-13T06:56:51Z"
"","15701","Unable to override non-JavaConfig beans in JavaConfig [SPR-11075]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11075](https://jira.spring.io/browse/SPR-11075?redirect=false)** and commented  As already documented in the comments of [DATAJPA-423](https://jira.spring.io/browse/DATAJPA-423), the `ConfigurationClassBeanDefinitionReader` prevents overriding a `BeanDefinition` through JavaConfig, unless the already present bean is a `ConfigurationClassBeanDefinition` itself. The logging message is a bit misleading as it states that the original bean definition is probably one coming from XML.  We should probably allow `ScannedGenericBeanDefinition` to be overridden as well or even introduce a dedicated type for all the bean definitions registered through `ImportBeanDefinitionRegistrars`.   ---  **Affects:** 3.2.4, 4.0 RC1  **Issue Links:** - [DATAJPA-423](https://jira.spring.io/browse/DATAJPA-423) Unable to override JpaRepositoryFactory-created beans by name (_**""is depended on by""**_)","closed","status: bulk-closed,","spring-projects-issues","2013-11-06T13:20:53Z","2019-01-12T00:21:10Z"
"","15679","GenericTypeResolver.resolveTypeArguments(…) returns Object for raw types [SPR-11052]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11052](https://jira.spring.io/browse/SPR-11052?redirect=false)** and commented  If you call `GenericTypeResolver.resolveTypeArguments(Map.class, Map.class)` on a Spring 3.x you get `null` returned as the first `Map` parameter is a raw type effectively. With Spring 4 snapshots we get back `[Object.class, Object.class]` which effectively disables the detection of a raw type against a type explicitly typed to `Object`.  ---  **Affects:** 4.0 RC1  **Issue Links:** - [DATACMNS-391](https://jira.spring.io/browse/DATACMNS-391) Ensure compatibility with Spring Framework 4.0 (_**""is depended on by""**_) - #15658 Potential NPE on result of GenericTypeResolver.resolveTypeArguments - #16385 Regression: GenericTypeResolver returns null for partially resolvable type arguments  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9f3b8a2430a94c3c4672c06f910e334bec58c935, https://github.com/spring-projects/spring-framework/commit/3bfddc501def1b090828312fe3b3f2b5de8d8b3c","closed","in: core,","spring-projects-issues","2013-10-31T06:13:10Z","2019-01-11T19:24:05Z"
"","15668","Auto-registration of modules (in particular JSR-310 and Joda-Time support) in Jackson's ObjectMapper [SPR-11040]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11040](https://jira.spring.io/browse/SPR-11040?redirect=false)** and commented  As of version 2.2 the Jackson `ObjectMapper` supports auto registration of modules in the classpath via the Java service API (see [this](https://github.com/FasterXML/jackson-datatype-jsr310/tree/jackson-datatype-jsr310-2.3.0-rc1#registering-module) for details). It would be cool if we called the necessary method on the `ObjectMapper` instance created if no modules are registered manually for the `Jackson2HttpMessageConverter` as this allows very easy customization of the mapper which is quite tedious otherwise as the mapper is not even a Spring bean.  ---  **Affects:** 4.0 M3  **Issue Links:** - #15062 enhance Jackson2ObjectMapperFactoryBean to allow setting of (De)SerializerModifiers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/065713660521bb080ede3aa51bb2f632afce24de, https://github.com/spring-projects/spring-framework/commit/11b3fe22893eb2a5e1540d17a005996629e681aa  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2013-10-28T08:04:48Z","2019-01-11T19:24:25Z"
"","15660","Methods in AnnotationConfigUtils.processCommonDefinitionAnnotations(…) should be public [SPR-11032]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11032](https://jira.spring.io/browse/SPR-11032?redirect=false)** and commented  In scenarios where you'd like to manually lookup bean definitions by classpath scanning, consider the annotations found on the component type found and forward it to a different bean definition (i.e. using `ClassPathBeanDefinitionParser` is not an option) it would be helpful to be able to use `AnnotationConfigUtils.processCommonDefinitionAnnotations(…)` to not have to re-implement the annotation lookup and value parsing.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/93405fb289c2049ed3e093a5e532fa38bd047cc6, https://github.com/spring-projects/spring-framework/commit/8bd480441e25ad7cda5b424a7382746017c18543","closed","type: enhancement,","spring-projects-issues","2013-10-25T14:23:34Z","2013-10-31T12:27:58Z"
"","15659","PropertyOrFieldReference suffers from potential NullPointerException [SPR-11031]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11031](https://jira.spring.io/browse/SPR-11031?redirect=false)** and commented  `PropertyOrFieldReference.getValue(…)` accesses `ExpressionState.getConfiguration()` without a check for `null`. If you've set up the `ExpressionState` with an `EvaluationContext` only, the configuration will be `null`.  Generally, `ExpressionState` could have a final configuration, default it to the default config used in `SpelExpressionParser` and let the constructors delegate to each other to avoid missing an assignment.  ---  **Affects:** 3.2.4  **Issue Links:** - #14385 Support for increment (++) operator in SpEL - [DATAMONGO-787](https://jira.spring.io/browse/DATAMONGO-787) Guard against SpEL issue in Spring 3.2.4","closed","type: enhancement,","spring-projects-issues","2013-10-25T11:39:02Z","2019-01-11T19:24:54Z"
"","15621","Generic autowiring should support wiring of components with unresolved type variables [SPR-10993]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10993](https://jira.spring.io/browse/SPR-10993?redirect=false)** and commented  If an `ApplicationContext` contains `BeanDefinition` instances for a type `MyComponent` and you try to wire it to an injection point that explictly refers to a type parameter (e.g. `MyComponent`) you currently get a `NoSuchBeanDefinitionException`.  ---  **Affects:** 4.0 RC1  **Issue Links:** - #15632 Autowiring of types narrows with generics does not work - #14599 Autowiring of generic types  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/085176673876afc9282af0a8f4f94ee6a36e9e4e","closed","in: core,","spring-projects-issues","2013-10-16T05:08:26Z","2019-01-11T12:55:31Z"
"","16330","ClassCastException when evaluating the eq/ne operator in the EL [SPR-11708]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-11708](https://jira.spring.io/browse/SPR-11708?redirect=false)** and commented  I suppose evaluating '=' or '!=' should never ever throw a `ClassCastException`. However, this happens with comparable operands of different types.  Example: `10 != 'ten'` should evaluate to true IMO. But it doesn't. To check for yourself, add the following line to the corresponding test `OperatorTests.testNotEqual()`  ``` evaluate(""10 ne '10'"", true, Boolean.class); ```  The cause is the call to `compare(..)` if the first operand is comparable. See class `org.springframework.expression.spel.ast.Operator`, method `equalityCheck`. Below the number handling, in line 99 the code contains the following three lines  ``` if (left != null && (left instanceof Comparable)) { 	return (state.getTypeComparator().compare(left, right) == 0); } ```  Simply removing these lines would fix the bug. Moreover, there is no failing test case after doing so, I'm not sure what kind of use case has been in mind when adding these lines to the evaluation of equals.  Alternatively catching the exception would solve the problem, too. But if you do so then please add a test that shows the necessity for using the compare logic.  My vote is for removing the cited code snippet.  ---  **Affects:** 4.0.3  **Issue Links:** - #13832 SpEL: OpEQ should use equals()","closed","in: core,","spring-projects-issues","2014-04-18T08:49:10Z","2019-01-14T05:16:42Z"
"","16325","Update documentation with example of single ApplicationContext per webapp [SPR-11703]","**[Oleksandr Gavenko](https://jira.spring.io/secure/ViewProfile.jspa?name=gavenkoa)** opened **[SPR-11703](https://jira.spring.io/browse/SPR-11703?redirect=false)** and commented  If read docs there are no info about where allowed to put **mvc:annotation-driven** annotation (in application context config vs servlet context).  There are some question on StackOverflow and Spring Forum about this.  http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd  http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd  have text: **Configures the annotation-driven Spring MVC Controller programming model. Note that, with Spring 3.0, this tag works in Servlet MVC only!**  And for String 3.2.5 - `@RequestHandler` is not mapped if **mvc:annotation-driven** put to servlet context config . But I look to latest petclinic:  https://github.com/spring-projects/spring-petclinic/blob/master/src/main/resources/spring/mvc-core-config.xml  https://github.com/spring-projects/spring-petclinic/blob/master/src/main/webapp/WEB-INF/web.xml  and seems that **mvc:annotation-driven** now allowed in servlet context!  So as minimum comment in http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd should be fixed.  And as maximum this behavior should be documented  in http://docs.spring.io/spring/docs/4.0.3.RELEASE/spring-framework-reference/htmlsingle/#mvc-config-enable  ---  **Affects:** 4.0.3  **Issue Links:** - #11483 Portlet MVC   -  doesn't inject conversion service and validator in WebDataBinder  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/59a050f3b91c9d7d93beb73acedfebbdaa963a8a, https://github.com/spring-projects/spring-framework/commit/80cb0c4e5b22af249a8c89154af87c4e902ba7ca  0 votes, 7 watchers","closed","type: documentation,","spring-projects-issues","2014-04-17T05:37:15Z","2019-01-11T21:19:56Z"
"","16103","Doc: JdbcTemplate + NamedParameterJdbcTemplate + SimpleJdbcTemplate are thread-safe [SPR-11478]","**[Oleksandr Gavenko](https://jira.spring.io/secure/ViewProfile.jspa?name=gavenkoa)** opened **[SPR-11478](https://jira.spring.io/browse/SPR-11478?redirect=false)** and commented  Official docs:  http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/jdbc.html#jdbc-JdbcTemplate-idioms  state that:  > Instances of the JdbcTemplate class are threadsafe once configured. This is important because it means that you can configure a single instance of a JdbcTemplate and then safely inject this shared reference into multiple DAOs (or repositories). The JdbcTemplate is stateful, in that it maintains a reference to a DataSource, but this state is not conversational state.  It is awesome!  Recently I look to JdbcDaoSupport in order to simplify code and investigate that there are simpler approach:  http://stackoverflow.com/a/21992433/173149  ```xml ...        ```  with simply:  ```java @Autowire private NamedParameterJdbcTemplate jdbcTemplate; ```  But javadoc doesn't say anything about thread safety for  * http://docs.spring.io/spring/docs/3.2.7.RELEASE/javadoc-api/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.html * http://docs.spring.io/spring/docs/3.2.7.RELEASE/javadoc-api/org/springframework/jdbc/core/simple/SimpleJdbcTemplate.html * http://docs.spring.io/spring/docs/3.2.7.RELEASE/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html  I investigate sources and didn't found any state in this classes.  Is that classes thread safe?  Is them can be configured in context and reused across DAO code by injecting?  My goal to avoid such code:  ```java private NamedParameterJdbcTemplate namedTemplate; @Autowired(required = true) public void setDataSource(final DataSource dataSource) {     namedTemplate = new NamedParameterJdbcTemplate(dataSource); } ```  and have only `@Autowired NamedParameterJdbcTemplate namedTemplate;`.  Please update javadoc for this classes if them are thread safe so any developer doesn't afraid to use them in convenient way...   --- No further details from [SPR-11478](https://jira.spring.io/browse/SPR-11478?redirect=false)","closed","type: task,","spring-projects-issues","2014-02-24T09:26:38Z","2014-03-26T22:34:06Z"
"","15708","@RequestMapping with URI Template can't match URL encoded non-ASCII characters. [SPR-11082]","**[Oleksandr Gavenko](https://jira.spring.io/secure/ViewProfile.jspa?name=gavenkoa)** opened **[SPR-11082](https://jira.spring.io/browse/SPR-11082?redirect=false)** and commented  For URI template:  ```java @RequestMapping(value=""/ajax/business-line-by-business/{id}.htm"", method = RequestMethod.GET, produces = ""text/html;charset=UTF-8"") ```  requests like  ``` http://localhost:8080/opereta/ajax/business-line-by-business/S.htm http://localhost:8080/opereta/ajax/business-line-by-business/Щ.htm ```  work as expected. But when I pass **CYRILLIC SMALL LETTER HA** as **id**:  ``` http://localhost:8080/opereta/ajax/business-line-by-business/х.htm ```  (which is percent encoded as %D1%85) I get 404 because URL doesn't matches any pattern (full trace for this request, I replaced hex 0x85 with octal \205 to represent non-printable character):  ``` DEBUG org.springframework.security.web.util.AntPathRequestMatcher   Caller+0	 at org.springframework.security.web.util.AntPathRequestMatcher.matches(AntPathRequestMatcher.java:116)   => Checking match of request : '/ajax/business-line-by-business/ñ\205.htm'; against '/js/**' DEBUG org.springframework.security.web.util.AntPathRequestMatcher   Caller+0	 at org.springframework.security.web.util.AntPathRequestMatcher.matches(AntPathRequestMatcher.java:116)   => Checking match of request : '/ajax/business-line-by-business/ñ\205.htm'; against '/css/**' DEBUG org.springframework.security.web.FilterChainProxy   Caller+0	 at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:180)   => /ajax/business-line-by-business/Ñ\205.htm has an empty filter list TRACE org.springframework.web.servlet.DispatcherServlet   Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initContextHolders(FrameworkServlet.java:1018)   => Bound request context to thread: FirewalledRequest[ org.apache.catalina.connector.RequestFacade@1402715] DEBUG org.springframework.web.servlet.DispatcherServlet   Caller+0	 at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:823)   => DispatcherServlet with name 'dispatcher' processing GET request for [/opereta/ajax/business-line-by-business/х.htm] TRACE org.springframework.web.servlet.DispatcherServlet   Caller+0	 at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1088)   => Testing handler map [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping@101d5e5] in DispatcherServlet with name 'dispatcher' DEBUG org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping   Caller+0	 at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:220)   => Looking up handler method for path /ajax/business-line-by-business/Ñ\205.htm DEBUG org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping   Caller+0	 at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:230)   => Did not find handler method for [/ajax/business-line-by-business/Ñ\205.htm] TRACE org.springframework.web.servlet.DispatcherServlet   Caller+0	 at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1088)   => Testing handler map [org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping@1c897c7] in DispatcherServlet with name 'dispatcher' TRACE org.springframework.web.servlet.DispatcherServlet   Caller+0	 at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1088)   => Testing handler map [org.springframework.web.servlet.handler.SimpleUrlHandlerMapping@648bc1] in DispatcherServlet with name 'dispatcher' TRACE org.springframework.web.servlet.handler.SimpleUrlHandlerMapping   Caller+0	 at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.getHandlerInternal(AbstractUrlHandlerMapping.java:127)   => No handler mapping found for [/ajax/business-line-by-business/Ñ\205.htm] TRACE org.springframework.web.servlet.DispatcherServlet   Caller+0	 at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1088)   => Testing handler map [org.springframework.web.servlet.handler.SimpleUrlHandlerMapping@1ba1919] in DispatcherServlet with name 'dispatcher' TRACE org.springframework.web.servlet.handler.SimpleUrlHandlerMapping   Caller+0	 at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.getHandlerInternal(AbstractUrlHandlerMapping.java:127)   => No handler mapping found for [/ajax/business-line-by-business/Ñ\205.htm] TRACE org.springframework.web.servlet.DispatcherServlet   Caller+0	 at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1088)   => Testing handler map [org.springframework.web.servlet.handler.SimpleUrlHandlerMapping@c5bb3e] in DispatcherServlet with name 'dispatcher' TRACE org.springframework.web.servlet.handler.SimpleUrlHandlerMapping   Caller+0	 at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.getHandlerInternal(AbstractUrlHandlerMapping.java:127)   => No handler mapping found for [/ajax/business-line-by-business/Ñ\205.htm] WARN org.springframework.web.servlet.PageNotFound   Caller+0	 at org.springframework.web.servlet.DispatcherServlet.noHandlerFound(DispatcherServlet.java:1108)   => No mapping found for HTTP request with URI [/opereta/ajax/business-line-by-business/х.htm] in DispatcherServlet with name 'dispatcher' TRACE org.springframework.web.servlet.DispatcherServlet   Caller+0	 at org.springframework.web.servlet.FrameworkServlet.resetContextHolders(FrameworkServlet.java:1028)   => Cleared thread-bound request context: FirewalledRequest[ org.apache.catalina.connector.RequestFacade@1402715] DEBUG org.springframework.web.servlet.DispatcherServlet   Caller+0	 at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966)   => Successfully completed request TRACE org.springframework.web.context.support.XmlWebApplicationContext   Caller+0	 at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:332)   => Publishing event in WebApplicationContext for namespace 'dispatcher-servlet': ServletRequestHandledEvent: url=[/opereta/ajax/business-line-by-business/%D1%85.htm]; client=[127.0.0.1]; method=[GET]; servlet=[dispatcher]; session=[F4CA1E110AF8524B0C983279D5EEB197]; user=[null]; time=[8ms]; status=[OK] TRACE org.springframework.web.context.support.XmlWebApplicationContext   Caller+0	 at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:332)   => Publishing event in Root WebApplicationContext: ServletRequestHandledEvent: url=[/opereta/ajax/business-line-by-business/%D1%85.htm]; client=[127.0.0.1]; method=[GET]; servlet=[dispatcher]; session=[F4CA1E110AF8524B0C983279D5EEB197]; user=[null]; time=[8ms]; status=[OK] DEBUG org.springframework.security.web.session.HttpSessionEventPublisher   Caller+0	 at org.springframework.security.web.session.HttpSessionEventPublisher.sessionDestroyed(HttpSessionEventPublisher.java:83)   => Publishing event: org.springframework.security.web.session.HttpSessionDestroyedEvent[source=org.apache.catalina.session.StandardSessionFacade@63d56b] TRACE org.springframework.web.context.support.XmlWebApplicationContext   Caller+0	 at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:332)   => Publishing event in Root WebApplicationContext: org.springframework.security.web.session.HttpSessionDestroyedEvent[source=org.apache.catalina.session.StandardSessionFacade@63d56b] ```    ---  **Affects:** 3.2.4","closed","status: invalid,","spring-projects-issues","2013-11-11T05:37:40Z","2019-01-12T05:26:31Z"
"","15645","Unecessary logging about setNull with Oracle driver [SPR-11017]","**[Oleksandr Gavenko](https://jira.spring.io/secure/ViewProfile.jspa?name=gavenkoa)** opened **[SPR-11017](https://jira.spring.io/browse/SPR-11017?redirect=false)** and commented  This logging output shown more than any words:  ``` 14:40:48.525 DEBUG org.hibernate.SQL   Caller+0	 at org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104)   =>      update         DATA_24      set         ...     where         ROWID = ? ..... 14:40:48.545 TRACE org.springframework.jdbc.core.StatementCreatorUtils   Caller+0	 at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:206)   => Setting SQL statement parameter value: column index 7, parameter value [null], value class [null], SQL type unknown 14:40:48.606 DEBUG org.springframework.jdbc.core.StatementCreatorUtils   Caller+0	 at org.springframework.jdbc.core.StatementCreatorUtils.setNull(StatementCreatorUtils.java:234)   => JDBC 3.0 getParameterType call not supportedjava.sql.SQLException: Unsupported feature 	at oracle.jdbc.driver.OracleParameterMetaData.getParameterType(OracleParameterMetaData.java:166) ~[ojdbc6-11.2.0.3.0.jar:11.2.0.3.0] 	at org.springframework.jdbc.core.StatementCreatorUtils.setNull(StatementCreatorUtils.java:231) [spring-jdbc-3.2.4.RELEASE.jar:3.2.4.RELEASE] .... ```  Related bugs:  #14818 #15018 #10668  fixed but dumping a long trace from `OracleParameterMetaData.getParameterType` is unnecessary because of stupid logging logic of `StatementCreatorUtils.setNull`  My logback logging settings:  ```    ```  ---  **Affects:** 3.2.4","closed","type: bug,","spring-projects-issues","2013-10-22T07:18:48Z","2019-01-11T19:12:54Z"
"","15657","ExtendedEntityManagerCreator and custom EntityManagerPlusOperations [SPR-11029]","**[Oleg Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=advanced)** opened **[SPR-11029](https://jira.spring.io/browse/SPR-11029?redirect=false)** and commented  Line 362 in org.springframework.orm.jpa.ExtendedEntityManagerCreator  ``` if (method.getDeclaringClass().equals(EntityManagerPlusOperations.class) ```  should look like  ``` if (EntityManagerPlusOperations.class.isAssignableFrom(method.getDeclaringClass()) ```  to support custom EntityManagerPlusOperations implementations.   ---  **Affects:** 3.2.4","closed","status: declined,","spring-projects-issues","2013-10-25T07:16:29Z","2019-01-12T16:35:47Z"
"","16175","Cannot handle more than two @PathVariable with the route ends with "".png"" [SPR-11550]","**[oaktree](https://jira.spring.io/secure/ViewProfile.jspa?name=oak)** opened **[SPR-11550](https://jira.spring.io/browse/SPR-11550?redirect=false)** and commented  seems like there is a problem with requestMapping and PathVariable. added a gist to show the code (compare between working and not working code */  ---  **Affects:** 4.0.1, 4.0.2  **Reference URL:** https://gist.github.com/oak-tree/9530666  **Issue Links:** - #11407 RequestMapping with 3 PathVariable doesn't work (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2014-03-13T08:34:12Z","2019-01-13T21:00:48Z"
"","16021","memory leak in class org.springframework.core.ResolvableType  [SPR-11394]","**[oaktree](https://jira.spring.io/secure/ViewProfile.jspa?name=oak)** opened **[SPR-11394](https://jira.spring.io/browse/SPR-11394?redirect=false)** and commented  Anayzling heap dump shows:  ``` 6,454 instances of ""java.lang.Class"", loaded by """" occupy 6,081,912 (11.44%) bytes.   Biggest instances: •class org.springframework.core.ResolvableType @ 0x7833d2c50 - 720,944 (1.36%) bytes.  *********************************************************************************  Class Name                                                          | Shallow Heap | Retained Heap | Percentage ---------------------------------------------------------------------------------------------------------------- class org.springframework.core.ResolvableType @ 0x7833d2c50         |           16 |       720,944 |      1.36% |- org.springframework.util.ConcurrentReferenceHashMap @ 0x7833d2d00|           40 |       720,880 |      1.36% |- org.springframework.core.ResolvableType @ 0x7833d2ce0            |           32 |            32 |      0.00% |- org.springframework.core.ResolvableType[0] @ 0x7833d2cd0         |           16 |            16 |      0.00% ---------------------------------------------------------------------------------------------------------------- ```  ---  **Affects:** 4.0.1  **Issue Links:** - #16066 Memory leak in ConcurrentReferenceHashMap - #16880 Duplicate entries in ResolvableType cache - #16738 Performance issue on ResolvableType cache - #21240 memory leak in class ConcurrentReferenceHashMap  2 votes, 12 watchers","closed","in: core,","spring-projects-issues","2014-02-05T10:05:17Z","2019-01-11T19:11:10Z"
"","15849","context:include-filter can't find ControllerAdvice annotation [SPR-11224]","**[not-three](https://jira.spring.io/secure/ViewProfile.jspa?name=not-three)** opened **[SPR-11224](https://jira.spring.io/browse/SPR-11224?redirect=false)** and commented  ```xml     ```  configuration like above but the log say AnotationHandlerMappingAdaptor do not find any ControllerAdvice, When I migrate 3.2.5 to 4.0.0   ---  **Affects:** 4.0 GA","closed","in: core,","spring-projects-issues","2013-12-13T03:17:43Z","2019-01-12T05:26:22Z"
"","15846","context:component-scan element says error in the mvc-cofig.xml [SPR-11221]","**[not-three](https://jira.spring.io/secure/ViewProfile.jspa?name=not-three)** opened **[SPR-11221](https://jira.spring.io/browse/SPR-11221?redirect=false)** and commented  When I migrate 3.2.5.Release to 4.0.0.Realse, the following config tells errors  ```xml   ```  The error message is, ""Error occured processing XML '[Ljava.lang.String; cannot be cast to java.lang.String'. See Error Log for more details""  !https://jira.springsource.org/secure/attachment/21541/component-scan.jpg!   ---  **Affects:** 4.0 GA  **Attachments:** - [component-scan.jpg](https://jira.spring.io/secure/attachment/21541/component-scan.jpg) (_17.11 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ad6df8c750445c8b608d3b1ae525d0a3a5072ec, https://github.com/spring-projects/spring-framework/commit/2a3ca619f979476aee8e0a0d298fb8ab847a4aa8, https://github.com/spring-projects/spring-framework/commit/23546b12347775c01d5195a778419134cab00140  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)  0 votes, 7 watchers","closed","in: core,","spring-projects-issues","2013-12-12T18:00:10Z","2015-11-19T18:53:24Z"
"","16069","CORS for websocket breaks existing CORS Filter  [SPR-11443]","**[Nils Rudolph](https://jira.spring.io/secure/ViewProfile.jspa?name=nirud)** opened **[SPR-11443](https://jira.spring.io/browse/SPR-11443?redirect=false)** and commented  We have our own CORS Filter that applies CORS Headers to all responses.  Spring-websocket also sets the CORS Headers but for the Header ""Access-Control-Allow-Origin"" it adds the origin to the existing header again (e.g. ""Access-Control-Allow-Origin"" = ""localhost:8080, localhost:8080"").  The Browser does not accept these responses. See http://www.w3.org/TR/cors/#access-control-allow-origin-response-header: ""In practice the origin-list-or-null production is more constrained. Rather than allowing a space-separated list of origins, it is either a single origin or the string ""null"".""  As Workaround we changed our CORSFilter and dont set the ""Access-Control-Allow-Origin"" for Websocket request and it works. But i think spring-websocket should either not set the ""Access-Control-Allow-Origin"" if it is already set or replace the existing value.  ---  **Affects:** 4.0.1, 4.0.2  **Issue Links:** - #16063 Undocumented auto CORS for websocket endpoint breaking existing CORS code - #16308 Regression: AbstractHttpMessageConverter does not set ContentType - #16334 Improve Servlet 3 presence check in ServletServerHttpResponse  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/49d7bda72248b5a08fda3d42ed10d9e127396e6a","closed","type: bug,","spring-projects-issues","2014-02-19T00:16:36Z","2019-01-11T21:25:35Z"
"","16324","XStreamMarshaller: Can't parse XML with '_' in the attribute names [SPR-11702]","**[Nil](https://jira.spring.io/secure/ViewProfile.jspa?name=nileshbhatt)** opened **[SPR-11702](https://jira.spring.io/browse/SPR-11702?redirect=false)** and commented  There is no way from XStreamMarshaller to inject the custom NameCoder in the call to create StaxReader.  Details: XStream uses '_' as the escape character. For the XML files with "" _ "" as names it's unable to parse fields as XStream converts the ""x_x"" names into ""x_ _x"".  The work around for XStream is use custom NameCoder.  XStreamMarshaller wraps the call to create a StaxReader as follows:      @Override     protected Object unmarshalXmlStreamReader(XMLStreamReader streamReader) throws XmlMappingException {         return doUnmarshal(new StaxReader(new QNameMap(), streamReader), null);     }  This causes the default StaxReader to get created with XMLFriendlyNameCoder.      public StaxReader(QNameMap qnameMap, XMLStreamReader in) {         this(qnameMap, in, new XmlFriendlyNameCoder());     }    ---  **Affects:** 4.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/090ab4bb6d2588283df3ff95a181c74e72306048, https://github.com/spring-projects/spring-framework/commit/f5cce14fe7749183a766e6335ee511d8918a81d4","closed","type: enhancement,","spring-projects-issues","2014-04-16T12:55:49Z","2014-05-01T01:36:43Z"
"","15683","Impossible to customise Hibernate RegionFactory [SPR-11056]","**[nigel magnay](https://jira.spring.io/secure/ViewProfile.jspa?name=magnayn)** opened **[SPR-11056](https://jira.spring.io/browse/SPR-11056?redirect=false)** and commented  This is really painful.  If you want to create Hibernate Session Factories with a cache **object** (and not through a brain-damaged class-name property string - you know, because it might be a bean with `@Inject` dependencies), it's impossible to do so.  What you'd like to be able to do some sort of customisation of the Configuration through LocalSessionFactoryBuilder. E.g:  class MyLocalSessionFactoryBuilder extends LocalSessionFactoryBuilder {  `@Override` public Settings buildSettings(ServiceRegistry serviceRegistry) {  Settings settings = super.buildSettings(serviceRegistry); settings.setRegionFactory ( /* whatever I like */ // possibly other settings  return settings; }  Sounds good. But LocalSessionFactoryBean itself is manufactured, in one class only, in line LocalSessionFactoryBean:277.  Overriding 372 looks promising : protected SessionFactory buildSessionFactory(LocalSessionFactoryBuilder sfb) { return sfb.buildSessionFactory(); }  But by this point it's too late. I can't even override afterPropertiesSet, as every member varible is private rather than protected.  All I can do is clone the **entire** class, simply to create a different subclass in Line 278.  If this were configurable (I.E: the localsessionfactorybuilder was a property that could be passed in) this would be way more usable.  ---  **Affects:** 3.2.4  **Issue Links:** - #21581 Hibernate 5: restore ability to inject ""cacheRegionFactory"" of LocalSessionFactoryBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/00474ceecdd78fedfae3cafe32a5da2e4853074b","closed","type: enhancement,","spring-projects-issues","2013-11-01T08:19:50Z","2019-01-11T19:24:17Z"
"","16080","Option to have PathMatchingResourcePatternResolver not throw a FileNotFoundException when not a single file was matched [SPR-11454]","**[Niels Doucet](https://jira.spring.io/secure/ViewProfile.jspa?name=ndoucet)** opened **[SPR-11454](https://jira.spring.io/browse/SPR-11454?redirect=false)** and commented  When using a `PathMatchingResourcePatternResolver` to resolve resources from a classpathLocation pattern (e.g. `classpath:foo/bar/properties/*.properties`). If not a single file matches the pattern, a `FileNotFoundException` is thrown.  As we have a usecase where multiple folders are scanned, but there is no guarantee that any properties file will be present, we had to write a wrapper method to catch these exceptions.  Would it be possible to add a flag to this class to simply have it return an empty list when nothing was matched?  If not, could the documentation be expanded to reflect the `FileNotFoundException`? Right now the javadoc states  > `@throws` IOExceptions in case of I/O errorsbut that does not really cover the case where no files were matched.  ---  **Affects:** 3.1.4, 4.0.1, 4.1.4  **Reference URL:** http://docs.spring.io/spring/docs/4.0.1.RELEASE/javadoc-api/org/springframework/core/io/support/PathMatchingResourcePatternResolver.html#getResources-java.lang.String-  **Attachments:** - [snippet.txt](https://jira.spring.io/secure/attachment/21688/snippet.txt) (_521 bytes_)  **Issue Links:** - #18767 PathMatchingResourcePatternResolver throws IOException inappropriately","closed","status: bulk-closed,","spring-projects-issues","2014-02-20T01:14:41Z","2019-01-12T02:45:43Z"
"","16114","Spring converter - Single String value to List - Trim [SPR-11489]","**[Nicolas FABRE](https://jira.spring.io/secure/ViewProfile.jspa?name=nico.fabre)** opened **[SPR-11489](https://jira.spring.io/browse/SPR-11489?redirect=false)** and commented  In the class `org.springframework.core.convert.support.StringToCollectionConverter` which converts String to List\, if a single String element is given in input, it trims (remove blanks) the element. Why ?  It is not a desired behavior in our case.  Line 68 : target.add(field.trim());  Could this trim() be removed ?  Thanks   ---  **Affects:** 4.0.2  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/21789/test.zip) (_4.84 MB_)","closed","in: core,","spring-projects-issues","2014-02-27T04:38:34Z","2020-02-12T16:36:43Z"
"","15544","Spring Form tags cannot pass the validator for HTML 4.x; need new tag to specify how tags should be closed [SPR-10916]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10916](https://jira.spring.io/browse/SPR-10916?redirect=false)** and commented  The Spring Form tags are always rendered one of the following two ways:  ```xml  ```  or  ```xml  ```  First, this is already incorrect because ""self-closing"" tags should have a space before the `/>` (this is not an XML requirement, but it is an HTML requirement to avoid confusion with the shorthand tag syntax, e.g. `","closed","in: web,","spring-projects-issues","2013-09-14T09:34:28Z","2019-01-30T14:40:37Z"
"","15540","Security vulnerabilities in Spring v2.5.6 and v3.2.4 [SPR-10912]","**[Nick Bletzer](https://jira.spring.io/secure/ViewProfile.jspa?name=bletzer)** opened **[SPR-10912](https://jira.spring.io/browse/SPR-10912?redirect=false)** and commented  I am part of IBM's security team. As an industry service, we have an ongoing project to security scan the Open Source Software components that are regularly used by IBM teams and pass details of any security vulnerabilities found back to the OSS community in question.  I have recently scanned Spring v.2.5.6 and v3.2.4 and have produced some reports.  Can someone get in touch with me so I can securely pass these reports to the Spring community.  Thanks, Nick Bletzer IBM Security Specialist   ---  **Affects:** 3.2.4  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)","closed","type: bug,","spring-projects-issues","2013-09-13T01:55:08Z","2014-01-30T02:30:46Z"
"","15767","Unable to set Content-Type in controller returning DeferredResult response [SPR-11141]","**[Nick Berard](https://jira.spring.io/secure/ViewProfile.jspa?name=nicobn)** opened **[SPR-11141](https://jira.spring.io/browse/SPR-11141?redirect=false)** and commented  I am currently experimenting with Servlet 3 async features. I added my controller method definition in the gist in the reference url. When the response gets to the browser, the Content-Type header is not set.  I also tried to set the Content-Type header using a DeferredResult, to no avail.   ---  **Affects:** 3.2.5  **Reference URL:** https://gist.github.com/nicobn/7763410","closed","in: web,","spring-projects-issues","2013-12-02T19:27:44Z","2019-01-11T19:36:56Z"
"","15938","Provide a mechanism for adding ApplicationContextInitializers to DispatcherServlet's ApplicationContext [SPR-11314]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-11314](https://jira.spring.io/browse/SPR-11314?redirect=false)** and commented  Currently, there is no way to add an `ApplicationContextInitializer` to the `DispatcherServlet`'s `ApplicationContext` at runtime (i.e. without explicit configuration on the application's part).  This is [possible to do on the root](https://github.com/nebhale/spring-servlet3-autoreconfig-poc/blob/7c06ec7aa39d15c7805c5de8f19cba0dc769cf6f/auto-reconfiguration/src/main/java/org/cloudfoundry/autoreconfiguration/AutoReconfigurationServletContainerInitializer.java#L20-L21) `ApplicationContext` using the `contextInitializerClasses` Servlet init-param.  Some mechanism (accessible from a `ServletContainerInitializer`) should be exposed in order to influence the `DispatcherServlet`'s `ApplicationContext` and allow an `ApplicationContextInitializer` to be added.   ---  **Affects:** 3.2.6, 4.0 GA  **Reference URL:** https://github.com/nebhale/spring-servlet3-autoreconfig-poc  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/444b3720bce8edd74092a15bd11140a26660e180, https://github.com/spring-projects/spring-framework/commit/5fb2665d1c93bcfd76b7f0a7e3262cca584ba8ac, https://github.com/spring-projects/spring-framework/commit/91881ff036aec38bf97d2a6159269bf2db4d0ac3  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-01-15T00:01:30Z","2014-01-28T13:07:14Z"
"","15632","Autowiring of types narrows with generics does not work [SPR-11004]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-11004](https://jira.spring.io/browse/SPR-11004?redirect=false)** and commented  Note that this applies to the current 4.0 snapshots, not the actual RC1 release.  Currently autowiring a bean of a type that _could_ have a generic declaration but doesn't (e.g. `List` instead of `List`) does not work when that bean should be autowired to a type that has the generic declaration (e.g. `List`).  And example is that the following wiring would not work:  ``` @Bean List list() {   return new ArrayList(); }  @Bean Object listConsumer(List list) {   return list; } ```  This is useful in cases where a framework (saw spring-data-jpa) automatically creates a type (say PagedResourcesAssembler) that could be generified, but isn't.  Then a consumer attempts to autowire that type, but with the generics (to quiet the compiler) and cannot get a wiring.  I've attached a test case that replicates the issue.  Simply run `mvm clean package && java -jar target/test.jar`.  ---  **Affects:** 4.0 RC1  **Reference URL:** https://github.com/spring-projects/spring-framework/commit/f29092db23422d34fba067cf3cf9c72412b96b04#commitcomment-4368780  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/21439/test.zip) (_1.63 kB_) - [test-2.zip](https://jira.spring.io/secure/attachment/21458/test-2.zip) (_1.99 kB_)  **Issue Links:** - #15621 Generic autowiring should support wiring of components with unresolved type variables - #15662 NPE in ResolvableType.hasUnresolvableGenerics - [DATACMNS-388](https://jira.spring.io/browse/DATACMNS-388) Improve generics declaration in HateoasAwareSpringDataWebConfiguration","closed","in: core,","spring-projects-issues","2013-10-18T07:51:45Z","2019-01-11T19:14:12Z"
"","15583","Provide option to configure ""host"" header in CONNECT frames to STOMP message brokers [SPR-10955]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-10955](https://jira.spring.io/browse/SPR-10955?redirect=false)** and commented  Currently, when attempting to connect a `StompRelay` you can set the relay host, username, and passcode, but you cannot host that can be set in the STOMP connect frame.  This means that connection strings typically returned by Cloud Foundry (http://run.pivotal.io) aren't usable.  An example of this string is `amqp://","closed","type: enhancement,","spring-projects-issues","2013-10-02T04:22:21Z","2019-01-11T22:09:45Z"
"","15582","Heartbeat in Messaging SimpleBroker [SPR-10954]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-10954](https://jira.spring.io/browse/SPR-10954?redirect=false)** and commented  Currently, when using a `SimpleBroker` heart-beating is not supported.  This is problematic in the Cloud Foundry (http://run.pivotal.io) environment as it seems to close WebSocket connections after 60 seconds.  The work around for this is to deploy and bind an MQ server (like RabbitMQ) to the application and use the `StompBrokerRelay`.  This is overkill for my use-case (a small scale build-monitor application) and it'd be nice to have to do this/pay for an MQ.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de9675bf5a8f4b2e24497b05ce851e48942883ff, https://github.com/spring-projects/spring-framework/commit/4b07bc39dae73175ef36f85fe2b9e433d8ad3346  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-10-02T03:56:01Z","2015-05-26T01:14:44Z"
"","15577","Support @PathVariable in annotated message handling methods [SPR-10949]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-10949](https://jira.spring.io/browse/SPR-10949?redirect=false)** and commented  Currently if a method is annotated with `@SubscribeEvent` and then uses an `@PathVariable` the value is not mapped into the method invocation.  So an example such as the following does not work.  ``` @SubscribeEvent(""/projects/{projectId}/builds"") List onSubscribe(@PathVariable String projectId) {   ... } ```  What should happen is the value that is extracted from the placeholder should be injected in the same way it would be if this were an `@RequestMapping` annotated method.  Note that this means that the argument should be coerced beyond a mere `String` and should get the full benefit of the Spring's type coercion support (e.g, Spring Data's [domain class binding](http://docs.spring.io/spring-data/jpa/docs/1.4.1.RELEASE/reference/html/repositories.html#web-domain-class-binding)).  Also note that this may be more generally applicable to methods annotated with other types (e.g. `@MessageMapping`).   ---  **Affects:** 4.0 M3","closed","type: enhancement,","spring-projects-issues","2013-10-01T08:39:15Z","2013-10-31T12:27:54Z"
"","15549","MappedInterceptors get Placed Into AbstractHandlerMapping Interceptor List Twice [SPR-10921]","**[Nathan Hook](https://jira.spring.io/secure/ViewProfile.jspa?name=hooknc)** opened **[SPR-10921](https://jira.spring.io/browse/SPR-10921?redirect=false)** and commented  Not sure if this is a bug or not, but for our case the mapping of MappedInterceptors twice into the AbstractHandlerMapping interceptor list will cause headaches.  We are attempting to upload files via PUT and we want to use an Interceptor much like the CommonsMultipartResolver but for non-multipart POST requests.  Here is the code that seems to cause the problem.  The code is from org.springframework.web.servlet.handler.AbstractHandlerMapping (3.2.3):  ``` protected void initApplicationContext() throws BeansException { 		extendInterceptors(this.interceptors); 		detectMappedInterceptors(this.mappedInterceptors); 		initInterceptors(); 	}  protected void detectMappedInterceptors(List mappedInterceptors) { 		mappedInterceptors.addAll( 				BeanFactoryUtils.beansOfTypeIncludingAncestors( 						getApplicationContext(),MappedInterceptor.class, true, false).values()); 	}  protected void initInterceptors() { 		if (!this.interceptors.isEmpty()) { 			for (int i = 0; i < this.interceptors.size(); i++) { 				Object interceptor = this.interceptors.get(i); 				if (interceptor == null) { 					throw new IllegalArgumentException(""Entry number "" + i + "" in interceptors array is null""); 				} 				if (interceptor instanceof MappedInterceptor) { 					mappedInterceptors.add((MappedInterceptor) interceptor); 				} 				else { 					adaptedInterceptors.add(adaptInterceptor(interceptor)); 				} 			} 		} 	} ```  In the detectMappedInterceptors method and in the initInterceptors (that are both called by initApplicationContext) the added MappedInterceptors are added to the mappedInterceptors attribute twice.  In our case this causes a headache because we're going to be reading from the InputStream of the request and saving that stream off as a File on disk, Much like Apache's FileUpload library.  We will be adding logic as need to make sure we don't write the file twice, but this does seem like a bug and other developers in the future will have to know that MappedInterceptors will be called twice.  I can write a unit test as needed, but the logic is pretty easy to see via code.  Thank you for your time.   ---  **Affects:** 3.2.3","closed","status: declined,","spring-projects-issues","2013-09-16T10:24:46Z","2019-01-12T16:35:52Z"
"","15736","ShallowEtagHeaderFilter should not set ETags to non-cached resources [SPR-11110]","**[Mickaël Tricot](https://jira.spring.io/secure/ViewProfile.jspa?name=mickaeltr)** opened **[SPR-11110](https://jira.spring.io/browse/SPR-11110?redirect=false)** and commented  ETags are used for checking if a resource cached in the browser has been modified or not. So ETags headers should be set only for resources with:  * header Cache-Control with max-age > 0   OR * header Expires with a date in the future  ---  **Affects:** 4.0 RC1, 4.0.1  **Issue Links:** - #17022 ShallowEtagHeaderFilter is not Servlet 2.5 compatible - #12919 ShallowEtagHeaderFilter should make use of specified content length  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6fba8292f5fa28cb99ee567f039ab21fa340cedf  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-11-23T07:58:55Z","2019-01-11T19:28:21Z"
"","16236","Allow @ExceptionHandler selection by annotations on the exception class [SPR-11613]","**[Michał Politowski](https://jira.spring.io/secure/ViewProfile.jspa?name=mpol)** opened **[SPR-11613](https://jira.spring.io/browse/SPR-11613?redirect=false)** and commented  Currently the class of an exception is considered when checking `@ExceptionHandler` method applicability.  Ablility to limit applicability also by annotations on the exception class (something like `@ExceptionHandler(annotatedBy=ResponseStatus.class)`) would for example allow people using `@ExceptionHandler` methods to more easily implement their own counterpart to `ResponseStatusExceptionResolver` within the default `HandlerExceptionResolver` setup.   --- No further details from [SPR-11613](https://jira.spring.io/browse/SPR-11613?redirect=false)","closed","type: enhancement,","spring-projects-issues","2014-03-27T02:58:18Z","2018-12-17T23:01:08Z"
"","15990","Incorrect javadoc in SpringServletContainerInitializer [SPR-11364]","**[Michał Politowski](https://jira.spring.io/secure/ViewProfile.jspa?name=mpol)** opened **[SPR-11364](https://jira.spring.io/browse/SPR-11364?redirect=false)** and commented  The javadoc says  > If a web application includes a WEB-INF/web.xml file, it is important to understand that neither this nor any other ServletContextInitializer will be processed unless the \ element's version attribute is >= ""3.0"" and the xsi:schemaLocation for ""http://java.sun.com/xml/ns/javaee"" is set to ""http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"".  but the thread around https://java.net/projects/servlet-spec/lists/users/archive/2012-05/message/1 explicitly states that the version in descriptor doesn't matter, and at least in Tomcat 7.0.50 (and probably since 7.0.29, which has the following in the changelog:  > As per section 1.6.2 of the Servlet 3.0 specification and clarification from the Servlet Expert Group, the servlet specification version declared in web.xml no longer controls if Tomcat scans for annotations. Annotation scanning is now always performed - regardless of the version declared in web.xml - unless metadata complete is set to true.  ) the initializer is used even with version=""2.5"" in web.xml.   ---  **Affects:** 3.2.6, 4.0 GA  **Reference URL:** https://java.net/projects/servlet-spec/lists/users/archive/2012-05/message/1  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: task,","spring-projects-issues","2014-01-28T07:58:35Z","2014-01-28T13:07:10Z"
"","15609","@ContextConfiguration location treated as a classpath resource with @WebAppConfiguration [SPR-10981]","**[Michał Politowski](https://jira.spring.io/secure/ViewProfile.jspa?name=mpol)** opened **[SPR-10981](https://jira.spring.io/browse/SPR-10981?redirect=false)** and commented  ``` @RunWith(SpringJUnit4ClassRunner.class) @WebAppConfiguration @ContextConfiguration(""WEB-INF/spring/root-context.xml"") public class SomeTests {  // some tests } ```  fails to load the context configuration with  ``` java.io.FileNotFoundException: class path resource [org/springframework/issues/WEB-INF/spring/root-context.xml] cannot be opened because it does not exist ```  It is possible to work around this using a file resource with something like  ``` @ContextConfiguration(""file:src/main/webapp/WEB-INF/spring/root-context.xml"") ```  but shouldn't it be a servlet context resource, like it is when the location is given in _web.xml_? `@WebAppConfiguration` seems to even have a way to configure the ""src/main/webapp"" location, but it is apparently not used to locate the context config resource.   ---  **Affects:** 3.2.4","closed","status: declined,","spring-projects-issues","2013-10-10T02:05:20Z","2019-01-12T16:35:50Z"
"","15600","Session serialization and deserialization fails under Tomcat with an advised and session-scoped bean [SPR-10972]","**[Michał Politowski](https://jira.spring.io/secure/ViewProfile.jspa?name=mpol)** opened **[SPR-10972](https://jira.spring.io/browse/SPR-10972?redirect=false)** and commented  In a webapp run under Tomcat there is a session-scoped bean which is also the target of advice. When Tomcat is being shut down it logs a warning (logged from a reproduction project, with -Dsun.io.serialization.extendedDebugInfo=true):  ``` 09-Oct-2013 12:33:01 org.apache.catalina.session.StandardSession writeObject WARNING: Cannot serialize session attribute scopedTarget.component for session 2FC40E979D1454DB9B01A288CF06C56F java.io.NotSerializableException: org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl 	- element of array (index: 1) 	- array (class ""[Lorg.springframework.aop.Advisor;"", size: 2) 	- field (class ""org.springframework.aop.framework.AdvisedSupport"", name: ""advisorArray"", type: ""class [Lorg.springframework.aop.Advisor;"") 	- object (class ""org.springframework.aop.framework.ProxyFactory"", org.springframework.aop.framework.ProxyFactory: 0 interfaces []; 2 advisors [org.springframework.aop.interceptor.ExposeInvocationInterceptor.ADVISOR, InstantiationModelAwarePointcutAdvisor: expression [@annotation(org.springframework.issues.AdivseMe) && this(c)]; advice method [public void org.springframework.issues.ComponentAspect.doSomething(org.springframework.issues.ScopedComponent)]; perClauseKind=SINGLETON]; targetSource [SingletonTargetSource for target object [org.springframework.issues.ScopedComponent@101d01]]; proxyTargetClass=false; optimize=false; opaque=false; exposeProxy=false; frozen=false) 	- field (class ""org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor"", name: ""advised"", type: ""class org.springframework.aop.framework.AdvisedSupport"") 	- object (class ""org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor"", org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor@178feba) 	- field (class ""org.springframework.issues.ScopedComponent$$EnhancerByCGLIB$$b0bb4729"", name: ""CGLIB$CALLBACK_0"", type: ""interface org.springframework.cglib.proxy.MethodInterceptor"") 	- root object (class ""org.springframework.issues.ScopedComponent$$EnhancerByCGLIB$$b0bb4729"", org.springframework.issues.ScopedComponent@101d01) ```  and, what's worse, when starting again sesion deserialization fails for the same reason:  ``` SEVERE: Exception loading sessions from persistent storage java.io.WriteAbortedException: writing aborted; java.io.NotSerializableException: org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl 	- element of array (index: 1) 	- array (class ""[Lorg.springframework.aop.Advisor;"", size: 2) 	- field (class ""org.springframework.aop.framework.AdvisedSupport"", name: ""advisorArray"", type: ""class [Lorg.springframework.aop.Advisor;"") 	- object (class ""org.springframework.aop.framework.ProxyFactory"", org.springframework.aop.framework.ProxyFactory: 0 interfaces []; 2 advisors [org.springframework.aop.interceptor.ExposeInvocationInterceptor.ADVISOR, InstantiationModelAwarePointcutAdvisor: expression [@annotation(org.springframework.issues.AdivseMe) && this(c)]; advice method [public void org.springframework.issues.ComponentAspect.doSomething(org.springframework.issues.ScopedComponent)]; perClauseKind=SINGLETON]; targetSource [SingletonTargetSource for target object [org.springframework.issues.ScopedComponent@101d01]]; proxyTargetClass=false; optimize=false; opaque=false; exposeProxy=false; frozen=false) 	- field (class ""org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor"", name: ""advised"", type: ""class org.springframework.aop.framework.AdvisedSupport"") 	- object (class ""org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor"", org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor@178feba) 	- field (class ""org.springframework.issues.ScopedComponent$$EnhancerByCGLIB$$b0bb4729"", name: ""CGLIB$CALLBACK_0"", type: ""interface org.springframework.cglib.proxy.MethodInterceptor"") 	- root object (class ""org.springframework.issues.ScopedComponent$$EnhancerByCGLIB$$b0bb4729"", org.springframework.issues.ScopedComponent@101d01) 	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1351) ```    ---  **Affects:** 3.2.4","closed","status: bulk-closed,","spring-projects-issues","2013-10-09T03:42:04Z","2019-01-12T00:22:03Z"
"","15531","Content negotiation ignores media type parameters [SPR-10903]","**[Michał Politowski](https://jira.spring.io/secure/ViewProfile.jspa?name=mpol)** opened **[SPR-10903](https://jira.spring.io/browse/SPR-10903?redirect=false)** and commented  When a `@RequestMapping` specifies `produces=""foo/bar;param=quux""` and a request comes in with `Accept: foo/bar;param=xuuq` the mapping is still selected. But the description of the `Accept` header in RFC 2616 shows that parameters should influence content negotiation.  Unfortunately the handler compatibility check done from `RequestMappingHandlerMapping` is ultimately performed via `isCompatibleWith` in `MediaType`, and this method completely ignores media type parameters.  ---  **Affects:** 3.2.2  **Issue Links:** - #17949 HTTP content negotiation does not respect media type parameters (_**""is duplicated by""**_)  2 votes, 8 watchers","closed","status: declined,","spring-projects-issues","2013-09-10T02:03:33Z","2019-01-12T16:35:55Z"
"","15631","Changes in JBoss AS 7 shutdown process causing problems during Spring's application context destruction [SPR-11003]","**[Michal Jemala](https://jira.spring.io/secure/ViewProfile.jspa?name=mjemala)** opened **[SPR-11003](https://jira.spring.io/browse/SPR-11003?redirect=false)** and commented  The problematic situation occurs when a Spring-based application is running within JBoss AS v7, where JBoss has changed the shutdown sequence which renders certain cleanup procedures (bound to the destruction phase of Spring's application context) invalid.  More specifically, the ability to access JMS resources after shutdown has been initiated (same applies to the JDBC resources) has been compromised. By checking the logs you can spot that both JDBC datasources as well as JMS destinations, are both being unbound from JNDI before the web application context destruction is initiated.  A simple way to replicate this issue is to deploy an application with DataSourceInitializer and its databaseCleaner property configured. Then, when the AS is being shutdown the ""ResourceException: IJ000451: The connection manager is shutdown"" is raised and DB cleanup will not be executed.  Obviously **this is not a Spring Framework issue** and all the blame goes to the JBoss AS. However, I would like to verify this and check there is no known workaround on Spring side, which can be deployed to avoid this?   ---  **Reference URL:** https://issues.jboss.org/browse/WFLY-944  **Attachments:** - [jbossas7-sample.tar.gz](https://jira.spring.io/secure/attachment/21438/jbossas7-sample.tar.gz) (_2.60 kB_)  1 votes, 6 watchers","closed","in: core,","spring-projects-issues","2013-10-18T07:07:24Z","2019-01-12T05:26:34Z"
"","16001","StringIndexOutOfBoundsException in AbstractErrors for class-level JSR-303 validator [SPR-11374]","**[Michael Simons](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.simons)** opened **[SPR-11374](https://jira.spring.io/browse/SPR-11374?redirect=false)** and commented  The performance improvement of #15928 is nice, but has one flaw. If a field name is """" (which is the case of a class level validator like the following (http://stackoverflow.com/a/2155576)  ``` import javax.validation.ConstraintValidator; import javax.validation.ConstraintValidatorContext;  import org.apache.commons.beanutils.PropertyUtils;  public class FieldsMatchValidator implements ConstraintValidator { 	private String firstFieldName; 	private String secondFieldName;  	@Override 	public void initialize(final FieldsMatch constraintAnnotation) { 		firstFieldName = constraintAnnotation.first(); 		secondFieldName = constraintAnnotation.second(); 	}  	@Override 	public boolean isValid(final Object value, final ConstraintValidatorContext context) { 		boolean rv = false; 		try { 			final Object firstObj = PropertyUtils.getProperty(value, firstFieldName); 			final Object secondObj = PropertyUtils.getProperty(value, secondFieldName);  			rv = firstObj == null && secondObj == null || firstObj != null && firstObj.equals(secondObj); 		} 		catch (final Exception ignore) { 		} 		return rv; 	} } ```  added to a class like so  ``` @FieldsMatch(first = ""newPassword"", second = ""newPasswordConfirmation"") public class UpdateUserPasswordCmd { 	@NotBlank 	private String oldPassword; 	 	@NotBlank	 	@Length(min=6, max=40)	 	private String newPassword; 	 	@NotBlank 	@Length(min=6, max=40) 	private String newPasswordConfirmation; ... ```  it breaks with:  ``` java.lang.StringIndexOutOfBoundsException: String index out of range: -1 	at java.lang.String.charAt(String.java:658) 	at org.springframework.validation.AbstractErrors.isMatchingFieldError(AbstractErrors.java:214) 	at org.springframework.validation.AbstractBindingResult.getFieldError(AbstractBindingResult.java:207) 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.processConstraintViolations(SpringValidatorAdapter.java:115) 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(SpringValidatorAdapter.java:102) 	at org.springframework.validation.DataBinder.validate(DataBinder.java:772) 	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.validateIfApplicable(ModelAttributeMethodProcessor.java:159) 	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:107) 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77) 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:123) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:953) 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:855) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:647) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:829) ```  I have the impression it happens only in combination with other validations and with the default violations in place.  I'm adding now  ```                      context			 .buildConstraintViolationWithTemplate(context.getDefaultConstraintMessageTemplate())                                                                                                                                     .addNode(secondFieldName)				                                                                                                                                     .addConstraintViolation()				                                                                                                                                                                                                                                                                                                                                                                                         .disableDefaultConstraintViolation();								 ; ```  to my validator which is better on it's one, but i think the slightly different semantics should be fixed.  Take care and thank you.  ---  **Affects:** 3.2.7, 4.0.1  **Issue Links:** - #15928 Optimize lookup of field errors in AbstractBindingResult  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","type: bug,","spring-projects-issues","2014-01-30T12:00:16Z","2019-01-11T18:39:07Z"
"","16303","EhCacheCacheManager does not close underlying CacheManager [SPR-11680]","**[Michael Russo](https://jira.spring.io/secure/ViewProfile.jspa?name=merusso)** opened **[SPR-11680](https://jira.spring.io/browse/SPR-11680?redirect=false)** and commented  EhCacheCacheManager should implement and register a destroy method that calls cacheManager.shutdown(), which should be called when EhCacheCacheManager bean is destroyed by Spring container.  When using XML config, the common practice is to use the EhCacheManagerFactoryBean, which happens to implement DisposableBean and calls cacheManager.shutdown() as expected.  ---  **Affects:** 4.0.3  **Issue Links:** - #14347 Infer ""shutdown()"" as destroy method for convenient EHCache setup using `@Bean`","closed","type: enhancement,","spring-projects-issues","2014-04-09T15:43:47Z","2019-01-13T06:54:34Z"
"","16167","Add an InvertedConverterFactory [SPR-11542]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-11542](https://jira.spring.io/browse/SPR-11542?redirect=false)** and commented  I have a usecase where I need an inverted version of the `ConverterFactory` which would have following signature:  ``` import org.springframework.core.convert.converter.Converter;  public interface InvertedConverterFactory {  	 Converter getConverter(Class sourceType);  } ```  The idea behind is that I have a source object hierarchy which can be converted to a single target object.  A usecase is:  ``` String, long, etc => Date ```  Here, you could converter a ISO 8601 timestamp to a date, or a long unix timestamp to a date, and so forth.  Though my usecase is a bit more complex.   ---  **Affects:** 4.0.2","closed","status: bulk-closed,","spring-projects-issues","2014-03-12T04:31:24Z","2019-01-12T02:45:28Z"
"","16148","spring-beans-4.0.xsd refers to version 3.2 [SPR-11523]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-11523](https://jira.spring.io/browse/SPR-11523?redirect=false)** and commented  First documentation element says: ""Spring XML Beans Schema, version 3.2 Authors: Juergen ...""  This is not correct and causes confusion. Update the XSD and check other XSDs as well.   ---  **Affects:** 4.0.2","closed","in: core,","spring-projects-issues","2014-03-07T01:50:56Z","2014-03-07T04:18:52Z"
"","15819","ResponseStatusExceptionResolver should use .setStatus with @ResponseStatus(code=XXX) [SPR-11193]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-11193](https://jira.spring.io/browse/SPR-11193?redirect=false)** and commented  The name of the annotation of `ReponseStatus` implies that a reponse status is actually sent. This is not the case, a response error is always issued. Now, the container must respond with generated HTML error page.  This makes it unusable for REST operations. A client does not expect such a response and this is useless payload.  This annotation must be split up into two annoations:  1. `@ResponseError` which truly does a `setError` with an optional reason. 2. `@ResponseStatus` with a status code only.  If you are concerned about backwards compat you could deprecate `@ResponseStatus` and introduce a `@RestResponseStatus` or add a flag `error`. Alternatively, you could examine whether this controller is annotated with `@Controller` or `@RestController` and proceed accordingly. Regardless of the chosen option a `@ResponseError` annotation is necessary and there must be a clear separation of use cases.  #12899 is related to this.  ---  **Affects:** 3.2.5  **Issue Links:** - #15818 `@ResponseStatus` documentation is incorrect (_**""is duplicated by""**_) - #17817 Regression in ResponseStatusExceptionResolver: setStatus versus sendError  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/80767ff6e9963761aa7e5516090fcda2c5a3bf74, https://github.com/spring-projects/spring-framework/commit/0ef8af4798222eccfa69d3e3a0c339b170e6d072, https://github.com/spring-projects/spring-framework/commit/042519043f774385b30591bf2e6476b7cbee9dfc","closed","type: enhancement,","spring-projects-issues","2013-12-07T03:50:17Z","2019-01-13T06:57:05Z"
"","15818","@ResponseStatus documentation is incorrect [SPR-11192]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-11192](https://jira.spring.io/browse/SPR-11192?redirect=false)** and commented  `@ResponseStatus` documentation of the status value refers to See Also `HttpServletResponse.setStatus(int)` but the implementing resolver (`ResponseStatusExceptionResolver`) always uses `setError` regardless a reason is given or not.  Documentation must be corrected.  ---  **Affects:** 3.2.5  **Issue Links:** - #17817 Regression in ResponseStatusExceptionResolver: setStatus versus sendError (_**""duplicates""**_) - #15819 ResponseStatusExceptionResolver should use .setStatus with `@ResponseStatus`(code=XXX) (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2013-12-07T03:29:34Z","2019-01-13T06:57:07Z"
"","15673","Unable to autowire concrete classes when java config methods return interface [SPR-11046]","**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[SPR-11046](https://jira.spring.io/browse/SPR-11046?redirect=false)** and commented  When using JavaConfig, if the user writes the config method as shown below:  ```java @Bean protected ItemWriter writer() { 	return new RetrySampleItemWriter(); } ```  and attempts to use that bean in a class configured as such:  ```java @Autowire private RetrySampleItemWriter itemWriter; ```  it doesn't work with Spring 4.  Instead, you get a NoSuchBeanDefinitionException stating that there are no beans qualifying for type RetrySampleItemWriter (RetrySampleItemWriter implements ItemWriter).  This worked in Spring 3.2.  ---  **Affects:** 4.0 RC1  **Issue Links:** - #19527 Consistent autowiring behavior for specifically typed injection points against loosely typed `@Bean` methods","closed","in: core,","spring-projects-issues","2013-10-30T08:49:17Z","2019-01-13T06:57:36Z"
"","15402","Unable to Autowire FactoryBean reference [SPR-11045]","**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[SPR-11045](https://jira.spring.io/browse/SPR-11045?redirect=false)** and commented  In previous version of Spring, you could `@Autowire` a reference to a FactoryBean.  However, in the latest release that does not seem to be working (see Spring Batch's org.springframework.batch.core.configuration.xml.StepWithBasicProcessTaskJobParserTests).  Instead you get the following exception:  ``` 09:54:25,530 ERROR main context.TestContextManager:329 - Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@442f1e75] to prepare test instance [org.springframework.batch.core.configuration.xml.StepWithBasicProcessTaskJobParserTests@7178b64b] org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.batch.core.configuration.xml.StepWithBasicProcessTaskJobParserTests': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.batch.core.configuration.xml.StepParserStepFactoryBean org.springframework.batch.core.configuration.xml.StepWithBasicProcessTaskJobParserTests.factory; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.batch.core.configuration.xml.StepParserStepFactoryBean] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1180) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:384) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:110) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:326) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:210) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:287) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:289) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:230) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:87) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:300) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:173) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.batch.core.configuration.xml.StepParserStepFactoryBean org.springframework.batch.core.configuration.xml.StepWithBasicProcessTaskJobParserTests.factory; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.batch.core.configuration.xml.StepParserStepFactoryBean] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289) 	... 26 more Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.batch.core.configuration.xml.StepParserStepFactoryBean] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:1065) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:925) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:820) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480) 	... 28 more  ```    ---  **Affects:** 4.0 RC1","closed","in: core,","spring-projects-issues","2013-10-30T07:59:27Z","2013-10-31T12:28:01Z"
"","15672","ResolvableType can throw NPE when resolving Generic Arrays [SPR-11044]","**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[SPR-11044](https://jira.spring.io/browse/SPR-11044?redirect=false)** and commented  When running Spring Batch against 4.0.0-BUILD-SNAPSHOT (as of 10/30), the org.springframework.batch.core.step.item.FaultTolerantExceptionClassesTests tests fail with the inability to load the related application context (FaultTolerantExceptionClassesTests-context.xml).  The exception we're seeing is below:  ``` java.lang.IllegalStateException: Failed to load ApplicationContext 	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:99) 	at org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:101) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:326) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:210) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:287) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:289) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:230) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:87) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:300) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:173) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'nonSkippableStep': Cannot resolve reference to bean 'reader' while setting bean property 'itemReader'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'reader' defined in class path resource [org/springframework/batch/core/step/item/FaultTolerantExceptionClassesTests-context.xml]: Initialization of bean failed; nested exception is java.lang.NullPointerException 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:331) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:107) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1451) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1192) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:300) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:296) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:646) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:121) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:100) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:250) 	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:64) 	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:91) 	... 25 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'reader' defined in class path resource [org/springframework/batch/core/step/item/FaultTolerantExceptionClassesTests-context.xml]: Initialization of bean failed; nested exception is java.lang.NullPointerException 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:547) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:300) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:296) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:323) 	... 43 more Caused by: java.lang.NullPointerException 	at java.lang.reflect.Array.newArray(Native Method) 	at java.lang.reflect.Array.newInstance(Array.java:52) 	at org.springframework.core.ResolvableType.resolveClass(ResolvableType.java:578) 	at org.springframework.core.ResolvableType.resolve(ResolvableType.java:567) 	at org.springframework.core.ResolvableType.resolve(ResolvableType.java:551) 	at org.springframework.core.GenericTypeResolver.resolveParameterType(GenericTypeResolver.java:73) 	at org.springframework.beans.GenericTypeAwarePropertyDescriptor.getWriteMethodParameter(GenericTypeAwarePropertyDescriptor.java:153) 	at org.springframework.beans.GenericTypeAwarePropertyDescriptor.getPropertyType(GenericTypeAwarePropertyDescriptor.java:135) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.isExcludedFromDependencyCheck(AbstractAutowireCapableBeanFactory.java:1360) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck(AbstractAutowireCapableBeanFactory.java:1341) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck(AbstractAutowireCapableBeanFactory.java:1317) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1175) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537) 	... 49 more ```    ---  **Affects:** 4.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e5aef5ee9d10736344be2fd4fa6b07af074eb949","closed","in: core,","spring-projects-issues","2013-10-30T07:46:18Z","2013-10-31T12:27:50Z"
"","15737","IllegalStateException prevents STOMP/WebSocket app from starting on Wildfly [SPR-11111]","**[Michael Irwin](https://jira.spring.io/secure/ViewProfile.jspa?name=mikesir87)** opened **[SPR-11111](https://jira.spring.io/browse/SPR-11111?redirect=false)** and commented  When deploying the spring-websocket-portfolio demo app, the following exception is thrown when opening the page:  ``` java.lang.IllegalArgumentException: Async support must be enabled on a servlet and for all filters involved in async request processing. This is done in Java code using the Servlet API or by adding ""true"" to servlet and filter declarations in web.xml. Also you must use a Servlet 3.0+ container ```  I know that there isn't a RequestUpgradeStrategy for Wildfly yet (which is another issue), but shouldn't a fallback for WebSockets still be supported, such as XHR streaming, etc.?   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4e82416ba97abc804bd805dc4e9e10f5b3c685e7","closed","type: bug,","spring-projects-issues","2013-11-23T17:53:02Z","2013-12-03T15:15:33Z"
"","15720","Compatibility with GlassFish 4.1 and Tyrus 1.8 (WebSocket 1.1) [SPR-11094]","**[Michael Irwin](https://jira.spring.io/secure/ViewProfile.jspa?name=mikesir87)** opened **[SPR-11094](https://jira.spring.io/browse/SPR-11094?redirect=false)** and commented  During deploy of webapp using 4.0.0.BUILD-SNAPSHOT into Glassfish nightly (Nov 14, 2013), the following exception is thrown.  Websocket connections then return a 404, as they are not able to upgrade.  ``` Caused by: java.lang.NoClassDefFoundError: org/glassfish/tyrus/websockets/WebSocketEngine$WebSocketHolderListener         at java.lang.Class.getDeclaredConstructors0(Native Method) ~[na:1.7.0_45]         at java.lang.Class.privateGetDeclaredConstructors(Class.java:2493) ~[na:1.7.0_45]         at java.lang.Class.getConstructor0(Class.java:2803) ~[na:1.7.0_45]         at java.lang.Class.getConstructor(Class.java:1718) ~[na:1.7.0_45]         at org.springframework.web.socket.server.DefaultHandshakeHandler.initRequestUpgradeStrategy(DefaultHandshakeHandler.java:109) ~[spring-websocket-4.0.0.BUILD-20131113.185211-366.jar:4.0.0.BUILD-SNAPSHOT]         ... 117 common frames omitted Caused by: java.lang.ClassNotFoundException: org.glassfish.tyrus.websockets.WebSocketEngine$WebSocketHolderListener         at org.glassfish.web.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1783) ~[war-util.jar:na]         at org.glassfish.web.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1633) ~[war-util.jar:na]         ... 122 common frames omitted]] ```  ---  **Affects:** 4.0 RC1, 4.0.3  **Issue Links:** - #15917 Support for JSR-356 on WebLogic 12.1.3  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-11-15T09:12:46Z","2019-01-11T19:23:10Z"
"","16135","ResponseEntity and BigDecimal for ID attributes [SPR-11510]","**[Michael Hegner](https://jira.spring.io/secure/ViewProfile.jspa?name=wolfmoonheart)** opened **[SPR-11510](https://jira.spring.io/browse/SPR-11510?redirect=false)** and commented  Hey there, I have following bug found, I hope it is one:  The project was build up from Spring Roo, but it shoud not be a Spring Roo issue, I am using Spring Roo 1.2.5 with FlexJson.  Please attend following code snipet from controller:  final String jsonArray = AnRatioDescription.toJsonArray(result); System.out.println(jsonArray); return new ResponseEntity\(jsonArray, headers, HttpStatus.OK);  System.out prints (ONLY RELEVANT) : [{ ... ""checkoutUserFk"":{""id"":201307224149000001},""createdByFk"":{""id"":201307224149000001},""id"":2013121819899000007,""lastModifiedByFk"":{""id"":201307224149000001}}  I use FireFox RESTClient, and somehow the last number of all ids are suddenly 0, for example 201307224149000001 => 201307224149000000  All IDs are BigDecimal.  RESTClient output is:      {         ...        ""checkoutUserFk"":        {            ...            ""id"": 201307224149000000,           ...        },        ""createdByFk"":        {            ...            ""id"": 201307224149000000,            ...        },        ""id"": 2013121819899000000,        {            ...            ""id"": 201307224149000000,            ...        },     }    ---  **Affects:** 3.2.8","closed","status: invalid,","spring-projects-issues","2014-03-04T07:34:29Z","2019-01-12T05:26:10Z"
"","15841","A GuavaCache implementation of org.springframework.cache.Cache [SPR-11216]","**[Michael Bazos](https://jira.spring.io/secure/ViewProfile.jspa?name=mbazos)** opened **[SPR-11216](https://jira.spring.io/browse/SPR-11216?redirect=false)** and commented  Guava caches seem to be pretty popular as in-memory caches, as it allows for some nice features that other in-memory caches don't necessarily provide.  Attached is a simple implementation of GuavaCache for spring.  You need to have the Guava libraries on your classpath:  \ 	\com.google.guava\ 	\guava\ 	\15.0\ \ Here is some more information about the in-memory Guava cache: https://code.google.com/p/guava-libraries/wiki/CachesExplained   ---  **Affects:** 4.0 GA  **Attachments:** - [GuavaCache.java](https://jira.spring.io/secure/attachment/21531/GuavaCache.java) (_1.64 kB_)","closed","type: enhancement,","spring-projects-issues","2013-12-12T11:07:07Z","2013-12-16T03:04:00Z"
"","16133","spring-framework-bom doesn't declare spring-test with scope=test [SPR-11508]","**[mck](https://jira.spring.io/secure/ViewProfile.jspa?name=mck)** opened **[SPR-11508](https://jira.spring.io/browse/SPR-11508?redirect=false)** and commented  The spring-framework-bom currently declares the spring-test dependency with scope ""compile"".  This risks clients putting spring-test into the transitive dependency trees they pass onto others.  It would be better, and a more norm default imho, that spring-test is declared with scope ""test"".    ---  **Affects:** 4.0.1, 4.0.2  **Reference URL:** https://oss.sonatype.org/content/repositories/releases/org/springframework/spring-framework-bom/4.0.2.RELEASE/spring-framework-bom-4.0.2.RELEASE.pom  1 votes, 5 watchers","closed","","spring-projects-issues","2014-03-04T01:46:49Z","2019-01-11T07:39:16Z"
"","16161","Unstable MVC test for controllers that returns DeferredResult [SPR-11536]","**[Maxim Valyanskiy](https://jira.spring.io/secure/ViewProfile.jspa?name=maxcom)** opened **[SPR-11536](https://jira.spring.io/browse/SPR-11536?redirect=false)** and commented  Sometimes our tests fails with following exceptions:  ``` java.lang.IllegalStateException: Gave up waiting on async result from handler [public org.springframework.web.context.request.async.DeferredResult SimpleController.handle()] to complete 	at org.springframework.test.web.servlet.DefaultMvcResult.getAsyncResult(DefaultMvcResult.java:133) 	at org.springframework.test.web.servlet.DefaultMvcResult.getAsyncResult(DefaultMvcResult.java:121) 	at org.springframework.test.web.servlet.result.RequestResultMatchers$3.match(RequestResultMatchers.java:94) 	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:149) 	at SimpleControllerTest.testSimple(SimpleControllerTest.java:35) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) ```  I reproduced this problem in sample application. Complete application is available at https://github.com/maxcom/spring-test-bug.  ---  **Affects:** 4.0.2  **Issue Links:** - #16141 Spring MVC Test can fail to obtain async result due to timing issue (_**""duplicates""**_)  1 votes, 3 watchers","closed","in: web,","spring-projects-issues","2014-03-11T05:24:53Z","2019-01-12T16:46:36Z"
"","16243","Support user destinations with multiple WebSocket servers [SPR-11620]","**[Max Posner](https://jira.spring.io/secure/ViewProfile.jspa?name=max_posner)** opened **[SPR-11620](https://jira.spring.io/browse/SPR-11620?redirect=false)** and commented  I have an app, that uses many tomcats. Also it uses websockets. Each tomcat saves in userSessionRegistry some information about connected users. But if user come to tomcat A, other tomcats B, C, D .. don't know about connected users to tomcat A and their unique queue names. And when i trying do something like this:  messageTemplate.converAndSendToUser(userNameConnectedToTomcatA, ...) from tomacats B,C,D it will not send.  ---  **Affects:** 4.0.2  **Reference URL:** http://stackoverflow.com/questions/22371560/spring-websocket-multiple-tomcat-servers/22663838?noredirect=1#22663838  **Issue Links:** - #17529 Investigate possibility of SockJS without sticky sessions  0 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2014-03-28T06:21:00Z","2019-01-11T21:07:38Z"
"","16237","Create a synchronous SettableListenableFuture implementation [SPR-11614]","**[Mattias Severson](https://jira.spring.io/secure/ViewProfile.jspa?name=matsev)** opened **[SPR-11614](https://jira.spring.io/browse/SPR-11614?redirect=false)** and commented  Create a class `SettableListenableFuture` that implements `ListenableFuture`.  When working with `Future` you sometimes need to implement an alternative that gets your result immediately, for example when integrating with legacy, synchronous APIs. If for no other reason, a synchronous implementation makes it much easier to implement tests.  Compare with Guava's [SettableFuture](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/util/concurrent/SettableFuture.html)  ---  **Affects:** 4.0.2  **Issue Links:** - #16440 Make ListenableFuture lambda compliant  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cf9d519e979f98a7fcd92f38d994b2cbfc36ae94, https://github.com/spring-projects/spring-framework/commit/0640a32863c9a86511e4a3e0c7fe75e98e0f3f1e, https://github.com/spring-projects/spring-framework/commit/38b525aa9e1fec1fbd611070c5abea24e378bf7d","closed","type: enhancement,","spring-projects-issues","2014-03-27T07:09:41Z","2019-01-11T21:06:52Z"
"","16149","@PropertySource ignoreResourceNotFound throws exception for unresolved placeholder values [SPR-11524]","**[Mattias Severson](https://jira.spring.io/secure/ViewProfile.jspa?name=matsev)** opened **[SPR-11524](https://jira.spring.io/browse/SPR-11524?redirect=false)** and commented  Proposal: Spring should silently ignore any unresolved placeholders used in `@PropertySource` if the `ignoreResourceNotFound` attribute has been set to `true`.  Consider the following Java config:  ```java @Configuration @PropertySources({         @PropertySource(""classpath:default.properties""),         @PropertySource(value = ""file:${UNKNOWN_PATH}/optional.properties"", ignoreResourceNotFound = true), }) public class TestConfig { } ```  The application fetches default properties from `default.properties`, but it is also possible to override properties by specifying the `UNKNOWN_PATH` environmental variable to point to a folder that contains `optional.properties`.  Since the `ignoreResourceNotFound` attribute has been set to `true`, the optional properties file does not need to be present for the application to start (and this works). However, if the `UNKNOWN_PATH` is not specified (neither as a system property, nor as an environmental variable), an exception is currently thrown:  ``` java.lang.IllegalStateException: Failed to load ApplicationContext [...] Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'UNKNOWN_PATH' in string value ""file:${UNKNOWN_PATH}/optional.properties"" [...] ```  Preferably, Spring should silently ignore that the placeholder cannot be resolved in this case.   ---  **Affects:** 4.0.2","closed","type: enhancement,","spring-projects-issues","2014-03-07T02:14:12Z","2014-03-26T22:34:08Z"
"","15560","Add ""ignoreResourceNotFound"" attribute to the @PropertySource [SPR-10932]","**[Mattias Severson](https://jira.spring.io/secure/ViewProfile.jspa?name=matsev)** opened **[SPR-10932](https://jira.spring.io/browse/SPR-10932?redirect=false)** and commented  Currently, a file is required to exist if it is added to the `@PropertySource` annotation. If the application already has the properties it needs, it should be possible to launch it without the associated file being present:  ```java @PropertySource(value = {""classpath:/com/example/optional.properties""}, ignoreResourceNotFound = true) ```  or  ```java @PropertySource(value = {""classpath:/com/example/mandatory.properties"", ""classpath:/com/example/optional.properties""}, ignoreResourceNotFound = true) ```  With [repeating annotations](http://openjdk.java.net/jeps/120) in Java 8, it should be possible to add the same annotation multiple times:  ```java @PropertySource(value = {""classpath:/com/example/mandatory.properties""}) @PropertySource(value = {""classpath:/com/example/optional.properties""}, ignoreResourceNotFound = true) ```  Related information: * The `ignoreResourceNotFound` is supported by the `` for XML-based application contexts. * See comments in issue [https://jira.springsource.org/browse/SPR-8371](https://jira.springsource.org/browse/SPR-8371)  ---  **Affects:** 3.2.4  **Issue Links:** - #13018 Add `@PropertySources` annotation and support ignoreResourceNotFound  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2013-09-24T07:51:59Z","2019-01-13T06:58:03Z"
"","15687","Converting non-String objects into models [SPR-11060]","**[Matthew Ouyang](https://jira.spring.io/secure/ViewProfile.jspa?name=mouyang)** opened **[SPR-11060](https://jira.spring.io/browse/SPR-11060?redirect=false)** and commented  Reference Manual Section 17.3.3 - Using `@ModelAttribute` on a method argument:  ``` ""If you register Converter that can turn the String account value into an Account instance, then the above example will work without the need for an @ModelAttribute method."" ```  It would be nice if this functionality would be available for Converter, Converter as well.  Such converters could be ported to conform to Converter, but allowing for these types of converters will allow Java's type system to provide some built-in validation.  Edit:  If you have an existing converter that is not of type Converter then it cannot be used in a request mapping.  Such converters need to be specified in the controller (see CurrentController).  With this functionality, Objects can be used in a request mapping directly (see DesiredController) provided the converters are registered in the conversion service.  ``` @Controller public CurrentController { 	@Autowired @Required 	public void setSiteConverter(Converter siteConverter) { 		this.siteConverter = siteConverter; 	}  	@Autowired @Required 	public void setOrderTypeConverter(Converter","closed","status: bulk-closed,","spring-projects-issues","2013-11-02T21:37:19Z","2019-01-12T00:21:21Z"
"","16226","Poor jackson parsing error message in MappingJackson2HttpMessageConverter [SPR-11603]","**[Matteo Sumberaz](https://jira.spring.io/secure/ViewProfile.jspa?name=gnappuraz)** opened **[SPR-11603](https://jira.spring.io/browse/SPR-11603?redirect=false)** and commented  Hi all, while struggling with serialization bugs I've noticed that the debugging for SerializationContext.hasValueDeserializerFor  ``` public boolean hasValueDeserializerFor(JavaType type, AtomicReference cause) {         try {             return _cache.hasValueDeserializerFor(this, _factory, type);         } catch (JsonMappingException e) {             if (cause != null) {                 cause.set(e);             }         } catch (RuntimeException e) {             if (cause == null) { // earlier behavior                 throw e;             }             cause.set(e);         }         return false;     } ```  is pretty bad if called by the ObjectMapper.canDeserialize method, that just pass null on the cause parameter  ``` public boolean canDeserialize(JavaType type)    {        return createDeserializationContext(null,                getDeserializationConfig()).hasValueDeserializerFor(type, null);    } ```  and MappingJackson2HttpMessageConverter does exactly that  ``` public boolean canRead(Type type, Class contextClass, MediaType mediaType) { 		JavaType javaType = getJavaType(type, contextClass); 		return (this.objectMapper.canDeserialize(javaType) && canRead(mediaType)); 	} ```  It is possible to improve this bubbling in some way the exceptions from the canDeserialize method?  ---  **Affects:** 4.0 GA  **Issue Links:** - #16030 Log caught exception in MappingJackson2HttpMessageConverter - #15886 MappingJackson2(Http)MessageConverter should be more verbose in canRead/canWrite checks (on Jackson 2.3)","closed","type: enhancement,","spring-projects-issues","2014-03-26T03:00:42Z","2019-01-11T21:08:02Z"
"","15904","Spring Integration Testing documentation refers to Cactus, a dead project [SPR-11280]","**[Matt Young](https://jira.spring.io/secure/ViewProfile.jspa?name=attack7)** opened **[SPR-11280](https://jira.spring.io/browse/SPR-11280?redirect=false)** and commented  Section 10.3.1 of http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#testing mentions the use of Cactus for longer running integration tests (for me implying that it's still a best practice).  Perhaps change this reference to Selenium or another equivalent, end-to-end testing mechanism?   ---  **Affects:** 4.0 GA","closed","type: documentation,","spring-projects-issues","2014-01-02T08:32:15Z","2014-01-28T13:07:08Z"
"","15596","WebServiceException From JaxWsPortProxyFactoryBean After Every App Publish [SPR-10968]","**[Matt B](https://jira.spring.io/secure/ViewProfile.jspa?name=butallmj)** opened **[SPR-10968](https://jira.spring.io/browse/SPR-10968?redirect=false)** and commented  I have very perplexing issue that I'm encountering at the moment with Websphere 7.0.0.27 and a particular web service call using the org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean class. I'm not sure that this is entirely a Spring issue, but I figured I'd report it just in case.  I have a service call that is functioning perfectly fine when I start my server from scratch. I can call the service, get data back, and my app functions just fine. However, when I re-publish my application, subsequent calls result in the following:  ``` javax.xml.ws.WebServiceException: ServiceDescription.updateEndpointDescription: Cant do a getPort() specifiying a different SEI than the previous getPort(). PortQN: \{0}; current SEI: \{1}; previous SEI: \{2} at  org.apache.axis2.jaxws.ExceptionFactory.createWebServiceException(ExceptionFactory.java:173) at  org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:70) at  org.apache.axis2.jaxws.ExceptionFactory.makeWebServiceException(ExceptionFactory.java:118) at  org.apache.axis2.jaxws.description.impl.ServiceDescriptionImpl.updateEndpointDescription(ServiceDescriptionImpl.java:557) at  org.apache.axis2.jaxws.description.impl.DescriptionFactoryImpl.updateEndpoint(DescriptionFactoryImpl.java:372) at  org.apache.axis2.jaxws.description.DescriptionFactory.updateEndpoint(DescriptionFactory.java:178) at  org.apache.axis2.jaxws.spi.ServiceDelegate.getPort(ServiceDelegate.java:584) at org.apache.axis2.jaxws.spi.ServiceDelegate.getPort(ServiceDelegate.java:507)  at javax.xml.ws.Service.getPort(Service.java:103) at  org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.getPortStub(JaxWsPortClientInterceptor.java:419) at  org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.prepare(JaxWsPortClientInterceptor.java:337) at  org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.invoke(JaxWsPortClientInterceptor.java:484) at  org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at  org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy109.search(Unknown Source) at ... ```  It happens to the service call only after an app publish. I can call the service over and over without issue, then publish, and then I start getting this issue. After I restart Websphere, the problem is gone until I publish again. Also important is that this seems to only occur when I run the sever setting ""Run server with resources within the workspace"". The option ""Run server with resources on Server"" doesn't have this happen, but I don't want to use that setting because I need to do an entire publish (as opposed to simply a file save) to get my JSP changes to show up, and that's a bigger waste of time. Also, I'm using Eclipse (4.2) and this also happens in RAD (7.5).   ---  **Affects:** 3.1.1, 3.2.3  **Reference URL:** http://stackoverflow.com/questions/19256369/webserviceexception-from-jaxwsportproxyfactorybean-after-every-app-publish","closed","status: invalid,","spring-projects-issues","2013-10-08T14:17:33Z","2019-01-12T05:26:38Z"
"","16099","PathVariable encoding fails if request charset is not set [SPR-11474]","**[Mats Svensson](https://jira.spring.io/secure/ViewProfile.jspa?name=matsemann)** opened **[SPR-11474](https://jira.spring.io/browse/SPR-11474?redirect=false)** and commented  Code below  ``` // this works, tagId is properly decoded @RequestMapping(value = ""/tag/{tagId}"", method = RequestMethod.PUT) public @ResponseBody SourceTag updateTag(@RequestBody SourceTag newTag, @PathVariable(""tagId"") String tagId) {     return sourceService.updateTag(new SourceTag(tagId), newTag); } // but here it fails! @RequestMapping(value = ""/tag/{tagId}"", method = RequestMethod.DELETE) public @ResponseBody SourceTag updateTag(@PathVariable(""tagId"") String tagId) {     // something } ```  When trying to access /tag/mmm%C3%A6%C3%A6%C3%B8%C3%A5 as PUT with an object, the pathvariable tagId contains the value ""mmmææøå""  But when accessing /tag/mmm%C3%A6%C3%A6%C3%B8%C3%A5 as DELETE the pathvariable tagId contains the value ""mmmÃ¦Ã¦Ã¸Ã¥""  After testing, the problem seems not to be using DELETE instead of PUT, but having a `@RequestBody` and not having one.  ---  **Affects:** 3.2.8, 4.0.2  **Issue Links:** - #16543 Better handling of URI encoding configuration - #16401 Form parameters should be in UTF-8 encoding  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/d2cb7618394eb17f6a1262052f97e58d03b256f3, https://github.com/spring-projects/spring-framework-issues/commit/1e4ef2beef684dcc330f5dec933f07392768032c","closed","in: web,","spring-projects-issues","2014-02-23T07:44:09Z","2019-01-12T16:46:37Z"
"","16017","Import of an XML file from the root of a JAR file with wildcard classpath and wildcard path does not work [SPR-11390]","**[Martin Wegner](https://jira.spring.io/secure/ViewProfile.jspa?name=martin.wegner@ebp.de)** opened **[SPR-11390](https://jira.spring.io/browse/SPR-11390?redirect=false)** and commented  If you want to load an XML file from a JAR file (which is located in the classpath), then the wildcard classpath expression with a wildcard path only works when the XML file is inside a JAR directory. If the XML file is located in the JAR root, then it will not be found. The classpath wildcard expression with a 'normal path' works in both cases.  Example:  `@ImportResource`(""classpath*:de/applicationContext.xml"") -> works `@ImportResource`(""classpath*:de/applicationContext*.xml"") -> works \ -> works \ -> works  `@ImportResource`(""classpath*:applicationContext.xml"") -> works `@ImportResource`(""classpath*:applicationContext*.xml"") -> does not work \ -> works \ -> does not work   ---  **Affects:** 4.0.1","closed","in: core,","spring-projects-issues","2014-02-05T04:02:48Z","2019-01-12T16:35:25Z"
"","15624","TypeConverterDelegate standard conversion changes single element array to a class instance when trying to convert to Object [SPR-10996]","**[Martin Scheffelaar](https://jira.spring.io/secure/ViewProfile.jspa?name=mgscheffe)** opened **[SPR-10996](https://jira.spring.io/browse/SPR-10996?redirect=false)** and commented  TypeConverterDelegate.convertIfNecessary exhibits weird behavior for a Foo[] newValue and requiredType == Object. If newValue.length != 1, the method will return newValue as expected, as Foo[] is an instance of Object. However, if newValue length == 1, the method will return newValue[0], which is an unnecessary conversion.  I ran into this issue when trying to set a bean Object-typed property to a String[] using user input in a webapp; the actual type of the property would be String[] for a {""foo"", ""bar""...} input and String for a {""foo""} input, which broke some logic down the line.  The culprit appears to be this bit of code; it's only reached if requiredType is not an array, which is fine for any value aside from Object. I'd propose adding a check here to see if convertedValue instanceof requiredType, or explicitly checking if requiredType == Object, or something similar.  ``` if (convertedValue.getClass().isArray() && Array.getLength(convertedValue) == 1) {     convertedValue = Array.get(convertedValue, 0);     standardConversion = true; } ```  ---  **Affects:** 4.0 M3  **Sub-tasks:** - #15637 Backport:      Spring Framework     SPR-10996  TypeConverterDelegate standard conversion changes single element array to a class instance when trying to convert to Object","closed","type: bug,","spring-projects-issues","2013-10-16T23:22:18Z","2019-01-13T21:02:14Z"
"","15763","Allow easier setting of the application name for live beans view MBean [SPR-11137]","**[Martin Lippert](https://jira.spring.io/secure/ViewProfile.jspa?name=mlippert)** opened **[SPR-11137](https://jira.spring.io/browse/SPR-11137?redirect=false)** and commented  At the moment the live beans view mbean gets its name from the application context. This works nicely for web apps but doesn't work for non web apps since the default implementation that is being used for getting the name of the application (which is used for the mbean registration) is returning an empty string.  More details here: http://forum.spring.io/forum/spring-projects/springsource-tool-suite/726582-live-beans-graph-and-a-spring-integration-app-running-in-the-debugger?p=735061#post735061  A possible solution could be to set the name of the app from outside via a system property or something like that (if there is no way to set the application context name from inside).   --- No further details from [SPR-11137](https://jira.spring.io/browse/SPR-11137?redirect=false)","closed","type: enhancement,","spring-projects-issues","2013-12-02T07:50:43Z","2018-12-07T17:55:54Z"
"","16245","ApplicationListener-like annotation for consuming application events [SPR-11622]","**[Martin Krüger](https://jira.spring.io/secure/ViewProfile.jspa?name=martin@krueger-it.info)** opened **[SPR-11622](https://jira.spring.io/browse/SPR-11622?redirect=false)** and commented  It would be nice to have annotations instead of having to implement `ApplicationListener`, for example:  ``` public class MyListener {      @Listen     public void onDelete(DeleteEvent event) {}      @Listen     public void onAdd(AddEvent event) {}  } ```  The semantics are the same as for `ApplicationListener`, but multiple event types can be supported in a single class.  ---  **Issue Links:** - #16696 Add support for transaction bound application events - #19689 Annotation-based event listener does not receive event published in `@PostConstruct` - #17263 Add support for ordered application event listener - #19208 Optimize ordered event listener performance - #17018 Support `@Order` on ApplicationListeners - #17223 Provide reusable parts of Cache implementation for others  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f0fca890bbc5029ed1a322778134f229da23b2b7  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2014-03-28T07:57:46Z","2019-01-13T06:54:54Z"
"","15695","ClasspathXmlApplicationContext does not inherit/merge parent context environment [SPR-11068]","**[Martin Gerlach](https://jira.spring.io/secure/ViewProfile.jspa?name=martingerlach)** opened **[SPR-11068](https://jira.spring.io/browse/SPR-11068?redirect=false)** and commented  I have a root ApplicationContext with environment as follows:  ``` StandardServletEnvironment {activeProfiles=[], defaultProfiles=[default], propertySources=[servletConfigInitParams,servletContextInitParams,jndiProperties,systemProperties,systemEnvironment,/data/myproject/conf/config.properties]} ```  Then, when I create a new child context as follows:  ``` final ApplicationContext childContext = new ClassPathXmlApplicationContext(new String[] {""classpath:com/example/childcontext.xml""}, parentContext); ```  its environment shows as follows:  ``` StandardEnvironment {activeProfiles=[], defaultProfiles=[default], propertySources=[systemProperties,systemEnvironment]} ```  So, no servlet stuff, no custom properties file in the propertySources.  However, creating the child context as follows behaves different:  ``` final GenericApplicationContext childContext = new GenericApplicationContext(parentContext); final XmlBeanDefinitionReader xmlReader = new XmlBeanDefinitionReader(childContext); xmlReader.loadBeanDefinitions(""classpath:com/example/childcontext.xml""); childContext.refresh(); ```  Now, the childContext's environment shows as  ``` StandardEnvironment {activeProfiles=[], defaultProfiles=[default], propertySources=[systemProperties,systemEnvironment,servletConfigInitParams,servletContextInitParams,jndiProperties,/data/myproject/conf/config.properties]} ```  From looking at the code, it becomes quite clear why this is: Using the given constructor of ClasspathXmlApplicationContext does not result in a call to AbstractApplicationContext.setParent(ApplicationContext parent) which would merge the environment of the parent into the own environment.    ---  **Affects:** 3.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/863570abb78e08ba9df78c83a7bff4cb75cdb32e, https://github.com/spring-projects/spring-framework/commit/c5fcf19535968ed059c404ee7d23c36fd1acd8d7","closed","type: bug,","spring-projects-issues","2013-11-05T03:22:43Z","2013-11-07T04:50:38Z"
"","16037","Improve configurability of EmbeddedDatabaseBuilder [SPR-11410]","**[Martin Ahrer](https://jira.spring.io/secure/ViewProfile.jspa?name=martinahrer)** opened **[SPR-11410](https://jira.spring.io/browse/SPR-11410?redirect=false)** and commented  Internally EmbeddedDatabaseBuilder delegates creation of the database instance to a factory. It would be helpful if that could be an injection target (setter or constructor).  ---  **Affects:** 4.0.1  **Issue Links:** - #12860 Configure script execution behaviour of embedded database (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dc6d67510d65393eabf420cc6648e8f31acb6586  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-02-10T04:38:54Z","2019-01-11T21:28:04Z"
"","15759","Contribution documentation [SPR-11133]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-11133](https://jira.spring.io/browse/SPR-11133?redirect=false)** and commented  Currently most/all of the Spring Projects have their own documentation regarding contribution. In some of those valuable information is included (single commit, rebasing etc.) in others it is very short.  It would be an improvement if there would be some general contribution documentation for all the Spring Projects (maybe to reference or include).   --- No further details from [SPR-11133](https://jira.spring.io/browse/SPR-11133?redirect=false)","open","type: documentation,","spring-projects-issues","2013-12-02T04:28:26Z","2016-06-02T11:47:20Z"
"","15756","While registering an excludePathPattern an includePathPattern is also required. [SPR-11130]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-11130](https://jira.spring.io/browse/SPR-11130?redirect=false)** and commented  When using java configuration to register interceptors and one wants to exclude some paths it is also mandatory to add an includePathPattern  ``` @Configuration public class MyMVCConfigurerAdapter extends WebMvcConfigurerAdapter {   @Override  public void addInterceptors(final InterceptorRegistry registry) {      registry.addInterceptor(getMyHandlerInterceptor())                  .excludePathPatterns(""/**/*.foo"");      )  } ```  The snippet above leads to no exclusion unless an `includePathPattern` is added  ``` @Configuration public class MyMVCConfigurerAdapter extends WebMvcConfigurerAdapter {   @Override  public void addInterceptors(final InterceptorRegistry registry) {      registry.addInterceptor(getMyHandlerInterceptor())                  .includePathPatterns(""/**"")                  .excludePathPatterns(""/**/*.foo"");      )  } ```  This is due the the fact that in the [InterceptorRegistration](https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java) there is only [a check](https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java#L72) for an empty `includePathPattern` when checking if a `MappedInterceptor` needs to be created.  Only returning the interceptor after checking both the include and exclude patterns would solve this issue (and allows for easier configuration). The MappedInterceptor should already be able to handle this (judging by the code).    ---  **Affects:** 3.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/84c11a5cc742c024733a9279007f735e329e2665","closed","type: enhancement,","spring-projects-issues","2013-11-27T05:59:24Z","2014-07-18T10:16:34Z"
"","15541","@ModelAttribute allowed on attribute in @ModelAttribute annoted method [SPR-10913]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-10913](https://jira.spring.io/browse/SPR-10913?redirect=false)** and commented  Currently it is possible to add the `@ModelAttribute` annotation on an argument in a method annotation with `@ModelAttribute`. This can lead to suprising results especially when there are multiple `@ModelAttribute` annotated methods.  ``` @ModelAttribute public Foo foo() { } ```  ``` @ModelAttribute public Bar bar(@ModelAttribute foo) { } ```  Method bar depends on foo but the execution of these methods differs from time to time.  There are 2 possible solutions I see  1. The order of execution needs to be fixed and determined at startup/runtime, check for dependencies between methods. 2. Don't allow this (`@ModelAttribute` on an attribute of a `@ModelAttribute` annotated method)  I would suggest option 2.  ---  **Affects:** 3.2.4  **Reference URL:** http://stackoverflow.com/questions/18783842/annotation-modelattribute-order-of-invocation-methods/18784052  **Issue Links:** - #10965 Support for `@ModelAttribute` interdependency (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2013-09-13T03:57:31Z","2019-01-13T06:58:11Z"
"","15948","ServletWebRequest can't validate Etag and Last-Modified together. [SPR-11324]","**[Markus Malkusch](https://jira.spring.io/secure/ViewProfile.jspa?name=malkusch)** opened **[SPR-11324](https://jira.spring.io/browse/SPR-11324?redirect=false)** and commented  HTTP 1.1. recommends to send both ETag and Last-Modified header:  > the preferred behavior for an HTTP/1.1 origin server is to send both a strong entity tag and a Last-Modified value. [..] If both an entity tag and a Last-Modified value have been provided by the origin server, [clients] SHOULD use both validators in cache-conditional requests. [..] upon receiving a conditional request that includes both [..] [server] MUST NOT return a response status of 304 (Not Modified) unless doing so is consistent with all of the conditional header fields in the request.  Spring's ServletWebRequest seems to be designed for an isolated use of one of them, but not both. If an application wants to implement validation for both the first checkNotModified() call has more significance. This is in particular relevant if the first sets the state to notModified. The next call has no more effect:  Here is a further test case for ServletWebRequestTests which demonstrates the issue:  ```     @Test     public void checkNotModifiedETagAndTimeStamp() {             String currentETag = ""\""Foo\""""; 	    String oldEtag = ""Bar"";             servletRequest.setMethod(""GET""); // Also for HEAD             servletRequest.addHeader(""If-None-Match"", oldEtag );              long currentTime = new Date().getTime();             servletRequest.setMethod(""GET""); // Also for HEAD             servletRequest.addHeader(""If-Modified-Since"", currentTime);              request.checkNotModified(currentTime);             request.checkNotModified(currentETag);              assertEquals(200, servletResponse.getStatus());             assertEquals(currentETag, servletResponse.getHeader(""ETag""));     } ```  ---  **Affects:** 4.0 GA  **Reference URL:** http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.3.4  This issue is a sub-task of #16413  **Issue Links:** - #11789 Add support for public/private Cache-Control HTTP header  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0175068cab7d294b6cce4369cbd7745dd03198ab, https://github.com/spring-projects/spring-framework/commit/953608ec49dea6dfdf1e0a2626839e84df909b69  0 votes, 7 watchers","closed","type: task,","spring-projects-issues","2014-01-17T23:34:22Z","2019-01-11T19:02:52Z"
"","15941","ServletWebRequest.checkNotModified() methods should treat HEAD identically to GET [SPR-11317]","**[Markus Malkusch](https://jira.spring.io/secure/ViewProfile.jspa?name=malkusch)** opened **[SPR-11317](https://jira.spring.io/browse/SPR-11317?redirect=false)** and commented  ServletWebRequest.checkNotModified() methods don't treat a HEAD request identically to a GET request (in fact they don't consider HEAD at all).  [HTTP](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.4) says:  > The HEAD method is identical to GET except that the server MUST NOT > return a message-body in the response. The metainformation contained > in the HTTP headers in response to a HEAD request SHOULD be identical > to the information sent in response to a GET request.  [Spring's reference documentation suggests](http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/mvc.html#mvc-ann-lastmodified) to call WebRequest.checkNotModified() to set the status code to 304:  > calling request.checkNotModified(lastModified) and returning null. The > former sets the response status to 304  As a consequence of the current implementation, applications which follow that recommendation violate against HTTP. In simple words: I had some fun debugging my application for a missing 304 status code while firing HEAD requests with wget --server-response --spider on it.  I suggest to respect HEAD in the mentioned methods identically to GET.  For test case and fix see https://github.com/spring-projects/spring-framework/pull/440   ---  **Affects:** 3.2.6, 4.0 GA  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/440  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: bug,","spring-projects-issues","2014-01-15T13:16:30Z","2014-01-28T13:07:19Z"
"","15916","Document that Servlet mocks are now incompatible with the Servlet 2.5 spec [SPR-11292]","**[Markus Malkusch](https://jira.spring.io/secure/ViewProfile.jspa?name=malkusch)** opened **[SPR-11292](https://jira.spring.io/browse/SPR-11292?redirect=false)** and commented  The documentation states in [3.9 Testing Improvements](http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/new-in-4.0.html#_testing_improvements):  > As of Spring 4.0, the set of mocks in the org.springframework.mock.web package is now compatible with Servlet 3.0.  Reading this I don't understand it became incompatible to servlet-2.5. As a matter of fact MockHttpServletRequest became incompatible to servlet-2.5. This is fine, but IMO should be worth mention it somewhere in the reference documentation (e.g. at ""3.9 Testing Improvements"").  ---  **Affects:** 4.0 GA  **Reference URL:** http://stackoverflow.com/q/20978235/1346207  **Issue Links:** - #15676 Cannot create MockHttpSession with servlet 2.x  1 votes, 4 watchers","closed","type: documentation,","spring-projects-issues","2014-01-07T10:32:46Z","2019-01-11T18:37:34Z"
"","16248","Add support for custom messages when using Apache BVAL as JSR303 validation provider [SPR-11625]","**[Markus Mahlberg](https://jira.spring.io/secure/ViewProfile.jspa?name=mwm)** opened **[SPR-11625](https://jira.spring.io/browse/SPR-11625?redirect=false)** and commented  When using Apache BVAL as validation provider, it is not possible to create custom localized error messages as in `MessageSourceResourceBundleLocator`'s `setValidationMessageSource` the messageInterpolator is set to `HibernateValidatorDelegate.buildMessageInterpolator(messageSource);`  ---  **Affects:** 4.0.2  **Issue Links:** - #14342 WebMvcConfigurationSupport should support Spring MessageSource as JSR 303 message interpolator by default","closed","type: enhancement,","spring-projects-issues","2014-03-29T12:35:19Z","2019-01-11T21:05:54Z"
"","15834","Recently changes of GenericTypeAwarePropertyDescriptor breaks BeanUtils.copyProperties() [SPR-11209]","**[Marko Umek](https://jira.spring.io/secure/ViewProfile.jspa?name=maumek)** opened **[SPR-11209](https://jira.spring.io/browse/SPR-11209?redirect=false)** and commented  In release 3.2.4 BeanUtils.copyProperties() ignores invalid property definirions like these:  ```java public class InvalidBean {     public String getValue() {...}     public void setValue(int intValue) {...} } ```  The culprit lies in class GenericTypeAwarePropertyDescriptor line 72, 73:  ``` Method candidate = ClassUtils.getMethodIfAvailable( 	this.beanClass, ""set"" + StringUtils.capitalize(getName()), (Class[]) null); // < Missing return type (!) if (candidate != null && candidate.getParameterTypes().length == 1) { 	writeMethodToUse = candidate; } ```  versus  ``` writeMethodToUse = ClassUtils.getMethodIfAvailable(this.beanClass, 	""set"" + StringUtils.capitalize(getName(), readMethodToUse.getReturnType());  ```    ---  **Affects:** 3.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bc5affa79a67b28c858730dd69156ebf6161164a, https://github.com/spring-projects/spring-framework/commit/bfcfbe41a1f44a9b242015485136a70e3199a3fc  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)","closed","in: core,","spring-projects-issues","2013-12-11T10:08:53Z","2019-01-11T18:27:41Z"
"","15803","RequestBody(required = false) on a DELETE method is not optional [SPR-11177]","**[Mark Robinson](https://jira.spring.io/secure/ViewProfile.jspa?name=markrobinson)** opened **[SPR-11177](https://jira.spring.io/browse/SPR-11177?redirect=false)** and commented  Having a method defined as such  ```java @RequestMapping(value = ""/config/components/{id}"", method = RequestMethod.DELETE, consumes = ""application/json"") public ModelMap deleteComponent(@PathVariable(""id"") Long componentId, @RequestBody(required = false) List componentIds)  ```  Will cause spring to return a 400 Bad Request if sent with a null request body.  If sent with a valid body, it works as expected.   ---  **Affects:** 3.2.4","closed","status: bulk-closed,","spring-projects-issues","2013-12-05T09:34:39Z","2019-01-12T00:20:55Z"
"","15882","NavigableSet and NavigableMap lookup missing in CollectionFactory class in spring-core [SPR-11257]","**[Mark Rekveld](https://jira.spring.io/secure/ViewProfile.jspa?name=markrekveld)** opened **[SPR-11257](https://jira.spring.io/browse/SPR-11257?redirect=false)** and commented  I ran into this issue  ``` Caused by: java.lang.IllegalArgumentException: Unsupported Collection interface: java.util.NavigableSet 	at org.springframework.core.CollectionFactory.createCollection(CollectionFactory.java:147) ~[spring-core-4.0.0.RELEASE.jar:4.0.0.RELEASE] 	at org.springframework.core.convert.support.CollectionToCollectionConverter.convert(CollectionToCollectionConverter.java:68) ~[spring-core-4.0.0.RELEASE.jar:4.0.0.RELEASE] 	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35) ~[spring-core-4.0.0.RELEASE.jar:4.0.0.RELEASE] 	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:178) ~[spring-core-4.0.0.RELEASE.jar:4.0.0.RELEASE] 	at org.springframework.integration.util.BeanFactoryTypeConverter.convertValue(BeanFactoryTypeConverter.java:123) ~[spring-integration-core-3.0.0.RELEASE.jar:?] 	at org.springframework.expression.spel.support.ReflectionHelper.convertArguments(ReflectionHelper.java:284) ~[spring-expression-4.0.0.RELEASE.jar:4.0.0.RELEASE] 	at org.springframework.expression.spel.support.ReflectiveMethodExecutor.execute(ReflectiveMethodExecutor.java:62) ~[spring-expression-4.0.0.RELEASE.jar:4.0.0.RELEASE] 	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:122) ~[spring-expression-4.0.0.RELEASE.jar:4.0.0.RELEASE] 	... 97 more ```  When looking into this, I found that in 4.0.0.RELEASE is missing some code that is present in 3.2.6.RELEASE  ``` ClassLoader cl = CollectionFactory.class.getClassLoader(); try {   navigableSetClass = cl.loadClass(""java.util.NavigableSet"");   navigableMapClass = cl.loadClass(""java.util.NavigableMap"");   approximableCollectionTypes.add(navigableSetClass);   approximableMapTypes.add(navigableMapClass); } catch (ClassNotFoundException ex) { } ```  Is missing in `CollectionFactory` class in version 4.0.0.RELEASE   ---  **Affects:** 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7f5d6ea3f9ac682b4c73d93bb148f2b906e1acb4","closed","in: core,","spring-projects-issues","2013-12-27T12:26:03Z","2014-01-28T13:07:09Z"
"","15635","ScriptExecutor for JSR-223 [SPR-11007]","**[Mark Pollack](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.pollack)** opened **[SPR-11007](https://jira.spring.io/browse/SPR-11007?redirect=false)** and commented  Several projects, SI, Security and Spring Hadoop have code that evaluates a groovy script.   The Spring Hadoop project has  https://github.com/spring-projects/spring-hadoop/blob/master/spring-hadoop-core/src/main/java/org/springframework/data/hadoop/scripting/Jsr223ScriptEvaluator.java  and SI has  https://github.com/spring-projects/spring-integration/blob/master/spring-integration-groovy/src/main/java/org/springframework/integration/groovy/GroovyScriptExecutingMessageProcessor.java  In the SI case it doesn't use JSR233 infrastructure to invoke the script, but Groovy support classes.  Artem mentioned that using the groovy support classes might result is a faster overall script execution time, so that should be investigated.  The running suggestion is to incorporate the JSR223ScrfiptEvaluator functionality as it provides support for a wider range of scripting languages out of the box.  ---  **Issue Links:** - [XD-1027](https://jira.spring.io/browse/XD-1027) Create script-based batch ItemProcessor  (_**""is depended on by""**_) - #9888 ScriptFactory for JSR-223 - #19154 Allow specifying CompilationCustomizer for Groovy based beans  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dfb29f4296cb77e6b09511547ced382f62c0c78f","closed","type: enhancement,","spring-projects-issues","2013-10-18T14:32:24Z","2019-01-11T19:14:34Z"
"","15873","Revisit spring-aspects 4.0.0 dependency on AspectJ 1.8.0.M1 [SPR-11248]","**[Mark Janssen](https://jira.spring.io/secure/ViewProfile.jspa?name=praseodym)** opened **[SPR-11248](https://jira.spring.io/browse/SPR-11248?redirect=false)** and commented  spring-aspects 4.0.0 uses AspectJ 1.8.0.M1 which is compatible only with Java 8, which is unreleased at this time (http://eclipse.org/aspectj/doc/released/README-180.html).  A workaround is to locally exclude `org.aspectj` dependencies from the spring-aspects dependency.  ---  **Affects:** 4.0 GA  **Reference URL:** https://github.com/spring-projects/spring-framework/commit/5ccbc80522eba5a2f0b38a44aac16e7e9c7e7770  **Issue Links:** - #15837 Upgrade AspectJ dependency to 1.8 final and apply latest ASM 5.0.2 patches - #15898 Spring 4.0.0.RELEASE depends on aspectjweaver 1.8.0.M1 not found in Maven Central","closed","type: task,","spring-projects-issues","2013-12-19T04:58:24Z","2019-01-11T18:25:14Z"
"","16247","Relax websocket-enabled attribute on websocket:sockjs [SPR-11624]","**[Mark Galea](https://jira.spring.io/secure/ViewProfile.jspa?name=mmgalea)** opened **[SPR-11624](https://jira.spring.io/browse/SPR-11624?redirect=false)** and commented  The `websocket-enabled` attribute on the `websocket:sockjs` element in the spring-websocket-4.x.xsd should be relaxed (xsd:string instead of xsd:boolean). This would allow properties configured through a PropertyPlaceholderConfigurer to configure whether websockets should be enable under different production environments.   ---  **Affects:** 4.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ae30a60d0306b621cd6f2caab08a2efbb86ed25d","closed","type: enhancement,","spring-projects-issues","2014-03-29T09:47:49Z","2014-07-18T10:16:38Z"
"","16162","relay-port type in xsd should be string [SPR-11537]","**[Mark Galea](https://jira.spring.io/secure/ViewProfile.jspa?name=mmgalea)** opened **[SPR-11537](https://jira.spring.io/browse/SPR-11537?redirect=false)** and commented  The `relay-port` type in the `spring-websocket-4.x.xsd` should be `xsd:string` instead of `xsd:int`.  This would allow us to use properties configured through a `PropertyPlaceholderConfigurer` to configure the `stomp-broker-relay` `port` under different production environments.  ---  **Affects:** 4.0.1, 4.0.2  **Issue Links:** - #14187 Relax jms:listener-container xsd:int attributes to xsd:string in order to allow for SpEL expressions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8b2b165777e9653db260628320d70c7f21160df1","closed","type: enhancement,","spring-projects-issues","2014-03-11T07:36:46Z","2019-01-11T21:36:27Z"
"","16158","Allow easier wrapping of WebSocketHandlerDecorator around WebSocketHandler's [SPR-11533]","**[Mark Galea](https://jira.spring.io/secure/ViewProfile.jspa?name=mmgalea)** opened **[SPR-11533](https://jira.spring.io/browse/SPR-11533?redirect=false)** and commented  The `SockJsHttpRequestHandler` constructor wraps an `ExceptionWebSocketHandlerDecorator` and a `LoggingWebSocketHandlerDecorator` around the `webSocketHandler` (`SubProtocolWebSocketHandler`).  Ideally, this wrapping of `WebSocketHandlerDecorator` s should be exposed.  One scenario where this would be useful is a `WebSocketHandlerDecorator` which keeps track of the relationship between the native httpSession and the webSocket session by listening to `connection established` and `connection closed` events.  This would provide the necessary information to close off webSocket sessions which outlive their corresponding httpSession.    ---  **Affects:** 4.0.1","closed","type: enhancement,","spring-projects-issues","2014-03-10T17:03:34Z","2014-03-19T10:40:06Z"
"","16131","@SendToUser should provide a single session reply mode [SPR-11506]","**[Mark Galea](https://jira.spring.io/secure/ViewProfile.jspa?name=mmgalea)** opened **[SPR-11506](https://jira.spring.io/browse/SPR-11506?redirect=false)** and commented  Given a user has two tabs open and the client sends a message to the server from tab 1, it is impossible to send a message to a specific client connection (tab 1). Using the `@SendToUser`(""/queue/position-updates"") annotation will push the message to both user sessions.  ---  **Affects:** 4.0.3  **Reference URL:** https://github.com/rstoyanchev/spring-websocket-portfolio/issues/28  **Issue Links:** - #17049 Not able to send message specific to user using STOMP over WebSocket  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c50887c8775a47610fe8a4f1e0179f8ddec4cd35, https://github.com/spring-projects/spring-framework/commit/75c70fac3d77b4a9b81fb95b46309636ffdd3d76, https://github.com/spring-projects/spring-framework/commit/9598a1e2ef3467187eec928248df536ed8410c2a, https://github.com/spring-projects/spring-framework/commit/088b80f4c5673e13ab6f59840e45725f491a4960  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-03-03T14:56:59Z","2019-01-11T21:38:53Z"
"","15793","Create an epub version of the Spring framework reference [SPR-11167]","**[Mario Jauvin](https://jira.spring.io/secure/ViewProfile.jspa?name=marioja)** opened **[SPR-11167](https://jira.spring.io/browse/SPR-11167?redirect=false)** and commented   ---  **Affects:** 3.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/887815f4fa15adf2ffea61c321783b54e100b924  0 votes, 5 watchers","closed","type: documentation,","spring-projects-issues","2013-12-04T17:31:41Z","2014-08-15T01:52:41Z"
"","16207","rollbackOn/noRollbackOn params should propagate with transaction [SPR-11583]","**[Marek Guzowski](https://jira.spring.io/secure/ViewProfile.jspa?name=gonzo125)** opened **[SPR-11583](https://jira.spring.io/browse/SPR-11583?redirect=false)** and commented  I have following situation: - service with transactional method, propagation is required, always throwing exception (which extends RuntimeException) - another service with transactional method, propagation required, and has noRollBackFor equal to exception mentioned above. this method only calls first service's method - result is that after nested service's excetion is thrown, transation is rolled back.  I believe that noRollbackFor should propagate with transaction. Am I doing sth wrong ? Unfortunately I didnt find any workaround of this.  Attached sources, pls use Runner Class, it would result in error: Transaction rolled back because it has been marked as rollback-only.    ---  **Affects:** 3.1.2, 3.2.8  **Attachments:** - [spring-bug2.zip](https://jira.spring.io/secure/attachment/21830/spring-bug2.zip) (_20.37 kB_)","closed","status: bulk-closed,","spring-projects-issues","2014-03-20T04:36:13Z","2019-01-12T02:45:03Z"
"","16036","@WebAppConfiguration value attribute seems to be never used [SPR-11409]","**[Marcin Kwaczyński](https://jira.spring.io/secure/ViewProfile.jspa?name=kwaq)** opened **[SPR-11409](https://jira.spring.io/browse/SPR-11409?redirect=false)** and commented  I have controller test class configured as follows:  ``` @RunWith(SpringJUnit4ClassRunner.class) @WebAppConfiguration(""my/app/custom/dir"") @ContextHierarchy({     @ContextConfiguration(locations = { ""/spring-config.xml"", ""/WEB-INF/web-app-context.xml"", ""/spring-test-config.xml"" }),     @ContextConfiguration(locations = ""/WEB-INF/app-servlet.xml"") }) public class ContactControllerTest {} ```  The path set as value of `@WebAppConfiguration` seems to be not used, and as a result, I'm getting errors during web app launch (my tiles layouts are not found). In a fact, I could put any non existent path as `@WebAppConfiguration` value, and nothing happens.  I've searched for use of WebAppConfiguration.value, but nothing was found in the Spring code.    ---  **Affects:** 4.0.1","closed","status: declined,","spring-projects-issues","2014-02-10T04:34:42Z","2019-01-12T16:35:24Z"
"","15811","Support for @Valid in @MessageMapping annotated methods [SPR-11185]","**[Marcin Kwaczyński](https://jira.spring.io/secure/ViewProfile.jspa?name=kwaq)** opened **[SPR-11185](https://jira.spring.io/browse/SPR-11185?redirect=false)** and commented  It would be nice if `@MessageMapping` annotated methods would support `@Valid` annotated message parameter, in a similar way as the method annotated with `@RequestMapping`.  ---  **Affects:** 4.0 RC2  **Issue Links:** - #15897 mvc:annotation-driven incorrectly detects validation provider on classpath - #15519 Provide mechanism for tracking failed messages in STOMP protocol support - #18569 Validator is not set after initializing web socket MessageBroker from xml configuration  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15d7d6d7abd4c7ba8e96e7c56ea9ec7d72d9aec8, https://github.com/spring-projects/spring-framework/commit/2c8f670d5fd129de470e1ddf415ad76305087996","closed","type: enhancement,","spring-projects-issues","2013-12-06T09:39:58Z","2019-01-11T19:35:40Z"
"","15773","Message sent through MessageSendingOperations are not reaching correct destinations [SPR-11146]","**[Marcin Kwaczyński](https://jira.spring.io/secure/ViewProfile.jspa?name=kwaq)** opened **[SPR-11146](https://jira.spring.io/browse/SPR-11146?redirect=false)** and commented  This may be caused by the fact, that SimpleBrokerRegistration is created twice in MessageBrokerConfigurer. First in `getSimpleBroker()` method, called from `org.springframework.messaging.simp.config.WebSocketMessageBrokerConfigurationSupport#simpleBrokerMessageHandler` and then in `enableSimpleBroker()`.  When I debug, I saw that subscriptions messages from Websocket go to first SimpleBrokerMessageHandler, but messages sent through MessageSendingOperations are handled by second instance of SimpleBrokerMessageHandler (the one customized with my destinations), and as a result they are not reaching correct destination.  Snippets from my configuration:  ```java @Configuration @EnableWebSocketMessageBroker public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {      @Override     public void configureMessageBroker(final MessageBrokerConfigurer configurer) {          configurer.enableSimpleBroker(""/queue"", ""/topic"");         configurer.setAnnotationMethodDestinationPrefixes(""/app"");     }      @Override     public void registerStompEndpoints(final StompEndpointRegistry registry) {         registry.addEndpoint(""/builds"").withSockJS();         registry.addEndpoint(""/slots"").withSockJS();     }  }    @Service public class MessagingServiceImpl {     @Autowired     private MessageSendingOperations messagingTemplate;       @Override     public void sendBuildStateChange(final Integer buildId) {        messagingTemplate.convertAndSend(""/topic/build.state"", buildId);      } ```  On the client side I use Stomp  ```JavaScript  stompClient.connect('guest', 'guest', function (frame) {              stompClient.subscribe(""/topic/build.state"", function (message) {                 self.builds().updateBuild(JSON.parse(message.body));             });           }, function (error) {             console.log(""STOMP protocol error "" + error);         }); ```    ---  **Affects:** 4.0 RC1","closed","in: messaging,","spring-projects-issues","2013-12-04T03:53:52Z","2019-01-11T19:37:19Z"
"","15718","Set statistics enabled for EhCache [SPR-11092]","**[Marcin Kamionowski](https://jira.spring.io/secure/ViewProfile.jspa?name=soldierkam)** opened **[SPR-11092](https://jira.spring.io/browse/SPR-11092?redirect=false)** and commented  EhCacheFactoryBean create new cache but does not add to CacheManager. It cause error when statisticsEnabled is true because Cache.setStatisticEnabled(boolean) checks if it is alive.  ``` Caused by: java.lang.IllegalStateException: The Cache is not alive (STATUS_UNINITIALISED)                                                                                                                         at net.sf.ehcache.Cache$CacheStatus.checkAlive(Cache.java:4267)                                                                                                                                                                               at net.sf.ehcache.Cache.checkStatus(Cache.java:2701)                                                                                                                                                                                          at net.sf.ehcache.Cache.getLiveCacheStatistics(Cache.java:3637)                                                                                                                                                                               at net.sf.ehcache.Cache.isStatisticsEnabled(Cache.java:3667)                                                                                                                                                                                  at net.sf.ehcache.Cache.setStatisticsEnabled(Cache.java:3674)                                                                                                                                                                                 at org.springframework.cache.ehcache.EhCacheFactoryBean.afterPropertiesSet(EhCacheFactoryBean.java:342)                                                                                                                                       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1571)                                                                                               at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1509) ```  ---  **Affects:** 3.2.5  **Issue Links:** - #15706 EhCacheFactoryBean fails when statistics are enabled (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6ce2eb96229d64055450861b8cebddb264a59e1c, https://github.com/spring-projects/spring-framework/commit/6c1f62b19d8165a873b8ee410006fa14f589a1c0","closed","in: core,","spring-projects-issues","2013-11-14T02:28:23Z","2019-01-12T16:46:47Z"
"","16058","Document how to convert Collections with ConversionService [SPR-11432]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-11432](https://jira.spring.io/browse/SPR-11432?redirect=false)** and commented  The current documentation explain how to convert objects using the ConversionService by implementing a org.springframework.core.convert.converter.Converter.  E.g.  ``` public class CustomerToCustomerResponseConverter implements Converter {   .. }  CustomerResponse r = conversionService.convert(customer, CustomerResponse.class); ```  But the documentation does not explain how to deal with collections at all.  E.g.  ``` public class CustomerToCustomerResponseConverter implements Converter {   .. }  List r = conversionService.convert(customers, ?); ```  Or is the Conversion capable to convert Collections automatically when we have registered the ""object"" converter?   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/264d7b9c98018aee517b2c14bbfd0ff05e000706  0 votes, 5 watchers","closed","type: documentation,","spring-projects-issues","2014-02-15T06:11:28Z","2014-03-26T22:34:08Z"
"","16057","Add support for setting PropertyNamingStrategy in Jackson2ObjectMapperFactoryBean [SPR-11431]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-11431](https://jira.spring.io/browse/SPR-11431?redirect=false)** and commented  The current org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean has no direct support for setting the PropertyNamingStrategy. This would be very useful to e.g. change output to snake_case instead of CamelCase.  Currently I use a MethodInvokingFactoryBean to do this like:  ```                                                                  ```  Please add setPropertyNamingStrategy method to Jackson2ObjectMapperFactoryBean.   ---  **Affects:** 4.0.1","closed","type: enhancement,","spring-projects-issues","2014-02-15T06:03:39Z","2014-02-18T22:36:52Z"
"","15688","Add org.springframework.cache.Cache.get(key, type) [SPR-11061]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-11061](https://jira.spring.io/browse/SPR-11061?redirect=false)** and commented  We are using Spring's cache abstraction but quite often use the CacheManager directly, without using annotations.  In our code we repeating to retrieve the objcet from cache and casting it to the actual type.  It would be very handy to add the below method to org.springframework.cache.Cache: T get(Object key, Class\ type)  ---  **Affects:** 3.2.4  **Issue Links:** - #16191 Cache.get(key, type) doesn't work in case of null value found in cache  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/50d3f719232d5c75f5d645cfa5aeb6bf09bdf1a0","closed","type: enhancement,","spring-projects-issues","2013-11-04T04:10:52Z","2019-01-11T19:23:45Z"
"","15681","Controller beans defined outside of dispatcher-servlet.xml don't get picked up [SPR-11054]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-11054](https://jira.spring.io/browse/SPR-11054?redirect=false)** and commented  It seems that Controller beans that get defined outside the dispatcher-servlet don't get picked up by the dispatcherServlet.  In my case, I have a Spring Social project where I define ConnectController through a `@Bean`/`@Configuration` but still have the dispatcherServlet configured through xml.  I use component-scanning to pick up the regular `@Controller` beans. In this case, the dispatcherServlet doesn't pick up the Controller beans already available in the parent context.   ---  **Affects:** 3.1.4","closed","status: declined,","spring-projects-issues","2013-10-31T11:23:30Z","2019-01-12T16:35:41Z"
"","16079","Request-Feature:Define declarative/demarcation transaction-annotations-external class [SPR-11453]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-11453](https://jira.spring.io/browse/SPR-11453?redirect=false)** and commented  Define declarative/demarcation transaction through annotations but in an  external class   ---  **Affects:** 4.0.2  **Reference URL:** http://forum.spring.io/forum/spring-projects/container/745274-request-feature-define-declarative-demarcation-transaction-annotations-external-class","closed","type: enhancement,","spring-projects-issues","2014-02-19T20:54:00Z","2014-02-26T00:17:46Z"
"","15821","Why @Autowired do not work with Generic Collections... [SPR-11195]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-11195](https://jira.spring.io/browse/SPR-11195?redirect=false)** and commented  This problem exists on Spring 3.2.x  **I am not sure if Spring 4 resolve the problem** perhaps not…thats why I am sharing my situation..  If not..I suggest add this feature support.   ---  **Affects:** 3.2.3, 4.0 RC2  **Reference URL:** http://forum.spring.io/forum/spring-projects/container/737510-why-autowired-do-not-work-with-generic-collections","closed","status: bulk-closed,","spring-projects-issues","2013-12-08T10:06:30Z","2019-01-12T00:20:50Z"
"","15915","Re-consider including HibernateTemplate and related classes for Hibernate 4 [SPR-11291]","**[Manuel Dominguez Sarmiento](https://jira.spring.io/secure/ViewProfile.jspa?name=mads1980)** opened **[SPR-11291](https://jira.spring.io/browse/SPR-11291?redirect=false)** and commented  We are well aware that the recommended approach nowadays is NOT using HibernateTemplate. However, projects exist that need to be upgraded to newer library versions, and the change needs to be as smooth as possible.  Recently, we needed to upgrade a very large project (about 100 DAOs) to Hibernate 4, for several reasons (mainly fixes that were not available in the 3.6.x branch). The project used HibernateTemplate for all DAO access (which was the recommended approach back when the project was started in 2005/2006). We found out the hard way that Spring did not provide a HibernateTemplate in the hibernate4 subpackage.  Before anyone cries out ""refactor your code to use sessionFactory.getCurrentSession()"" let me remind you that HibernateTemplate offers several extra features:  - Automatical exception translation to the Spring hierarchy - Obtaining a new session automatically when a transaction is not active - Filter configuration - Query cache region configuration - fetch size tuning - max. results - HibernateOperations API (which IMO is cleaner than direct Hibernate Session usage, and uses generics whenever possible while Hibernate Session does not) - etc.  All of this can be refactored to use Hibernate directly. However, such refactoring is a big risk for a large project, and a huge opportunity to introduce regression bugs all over the place in the data access layer.  I'm sure that I'm not alone in the sentiment that Spring should provide a smooth migration path from Hibernate 3 to Hibernate 4. Currently it does not. If HibernateTemplate were an obscure, seldom used class, I would not have a problem. But HibernateTemplate use is widespread, given that it was the recommended approach for such a long time (even if a long time has passed since then)  ---  **Affects:** 3.2 GA, 4.0 GA  **Attachments:** - [HibernateAccessor.java](https://jira.spring.io/secure/attachment/21582/HibernateAccessor.java) (_13.64 kB_) - [HibernateCallback.java](https://jira.spring.io/secure/attachment/21583/HibernateCallback.java) (_2.58 kB_) - [HibernateDaoSupport.java](https://jira.spring.io/secure/attachment/21584/HibernateDaoSupport.java) (_5.90 kB_) - [HibernateOperations.java](https://jira.spring.io/secure/attachment/21585/HibernateOperations.java) (_46.88 kB_) - [HibernateTemplate.java](https://jira.spring.io/secure/attachment/21586/HibernateTemplate.java) (_43.79 kB_)  **Issue Links:** - #14002 Doc: Spring 3.x and Hibernate 4 are not compatible. Unable to use HibernateTemplate. - #13667 HibernateInterceptor variant for Hibernate 4  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2014-01-07T09:02:25Z","2019-01-11T18:37:30Z"
"","16086","Include GsonHttpMessageConverter in Spring MVC [SPR-11460]","**[Manish](https://jira.spring.io/secure/ViewProfile.jspa?name=manish.in.java)** opened **[SPR-11460](https://jira.spring.io/browse/SPR-11460?redirect=false)** and commented  I am working on a number of projects that use GSON for JSON serialization.  However, in the web layer we are using Jackson 2 for similar purposes.  It will be good if the class `GsonHttpMessageConverter` from the Spring Android REST project were to be made available with Spring MVC core as then we would be able to avoid two different libraries in the same project.  Other desirable features of GSON are:  1. Single JAR compared to at least 3 Jackson-2 JARs (annotations, core, databind); 2. Smaller JAR footprint (186K v/s 35K + 194K + 893K); 3. GSON does not serialize fields with null values, Jackson does (```    { }  ```v/s ```{ ""middleName"" : null } ```). ```  ---  **Affects:** 4.0 GA, 4.0.1, 4.0.2  **Issue Links:** - #14123 Add Gson HttpMessageConverter","closed","type: enhancement,","spring-projects-issues","2014-02-21T00:21:27Z","2019-01-11T21:23:20Z"
"","16265","JMS integration with Tibco causes deadlock due to commitIfNecessary in AbstractPollingMessageListenerContainer [SPR-11642]","**[Manikandan Saravanan](https://jira.spring.io/secure/ViewProfile.jspa?name=manikandan.svk@gmail.com)** opened **[SPR-11642](https://jira.spring.io/browse/SPR-11642?redirect=false)** and commented  even though we have per fetch value = 1.  ""jmsContainer-32755"" prio=10 tid=0x0000000014c4a800 nid=0x5878 in Object.wait() [0x0000000044e91000] java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) at java.lang.Object.wait(Object.java:503) at com.tibco.tibjms.TibjmsxLink.sendRequest(TibjmsxLink.java:359) - locked  (a com.tibco.tibjms.TibjmsxResponse)   at com.tibco.tibjms.TibjmsxLink.sendRequestMsg(TibjmsxLink.java:282)   at com.tibco.tibjms.TibjmsConnection._createSession(TibjmsConnection.java:2657)   at com.tibco.tibjms.TibjmsConnection._createSession(TibjmsConnection.java:2601)   at com.tibco.tibjms.TibjmsConnection.createSession(TibjmsConnection.java:4334)   at sun.reflect.GeneratedMethodAccessor93.invoke(Unknown Source)  ---  **Affects:** 3.0.2  **Issue Links:** - #12215 JMS integration with Tibco causes deadlock due to commitIfNecessary in AbstractPollingMessageListenerContainer","closed","status: invalid,","spring-projects-issues","2014-04-01T06:16:57Z","2019-01-14T05:16:53Z"
"","16120","Doc: Lazy context is not validated on creation [SPR-11495]","**[Maarten Winkels](https://jira.spring.io/secure/ViewProfile.jspa?name=mwinkels)** opened **[SPR-11495](https://jira.spring.io/browse/SPR-11495?redirect=false)** and commented  The spring documentation states:  > The Spring container validates the configuration of each bean as the container is created, including the validation of whether bean reference properties refer to valid beans. However, the bean properties themselves are not set until the bean is actually created. Beans that are singleton-scoped and set to be pre-instantiated (the default) are created when the container is created.  But a simple tests shows that a missing bean is not detected in a lazy context until it is created.  ---  **Affects:** 3.2.6, 3.2.8, 4.0.2  **Issue Links:** - #15092 `@ComponentScan` does not allow for registering beans with lazy initialization","closed","in: core,","spring-projects-issues","2014-02-28T07:54:50Z","2019-01-13T06:55:29Z"
"","15726","performancedrop due to repeated JDBC 3.0 getParameterType calls in setNull in StatementCreatorUtils [SPR-11100]","**[M Claus](https://jira.spring.io/secure/ViewProfile.jspa?name=mclaus)** opened **[SPR-11100](https://jira.spring.io/browse/SPR-11100?redirect=false)** and commented  We notice a performance drop after we updated to a (much newer) library (3.2.5). We used to work on 3.0.5.  We connect to Oracle11g with ojdbc 11.2.0.4 drivers.  After some testing we noticed that the performance drop was introduced by a changed implementation in setNull. Our queries have lots of columns ~40 with many optional values. For every NULL value, the driver is now asked ps.getParameterMetaData().getParameterType(paramIndex). The drivers don't support this yet but will throw an exception.  We notice that calling this method 30ish times costs us extra time (around 100ms), which is quite noticable. Requests which require 2 inserts went from ~200ms to 400+ms. We omitted the getparametertype call by editing the source of 3.2.5 to check our hypothesis and the performance was restored to its old state.  Is it possible to cache the 'unsupported state' in case the databasedrivers do not support it, so it's only executed once per request.  Below is the oracle implementation of getParameterType  SQLException localSQLException = DatabaseError.createUnsupportedFeatureSqlException(); localSQLException.fillInStackTrace(); throw localSQLException;  PS: entered this issue as a bug because it impairs the function of the product  Somewhat related issue, different bug introduced due to the added functionality (#14818)  ---  **Affects:** 3.2.5  **Issue Links:** - #14717 NamedParameterJdbcTemplate for ""insert / select"" clause, set NULL value causes JConnect 7 (Sybase) problem - java.io.IOException: JZ0SL: Unsupported SQL type 0. - Affects 3.1.3.RELEASE, works in 3.1.1.RELEASE - #15018 JdbcTemplate cannot set null parameter with Oracle driver - #15937 spring-jdbc-3.2.6.RELEASE doesn't support JDK 5. - #16013 PreparedStatement#getParameterMetaData() calls may trigger unwanted side effects - #18398 Oracle 12c JDBC driver throws inconsistent exception from getParameterType (affecting setNull calls) - #19143 Avoid repeated getParameterType calls for setNull with Oracle 12c driver - #19196 Protect against getParameterType cursor leak with Oracle 12c JDBC driver  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2e15f94cf28070be05884c26957b75eab450ea18, https://github.com/spring-projects/spring-framework/commit/4c8a7899f25a6773a6e70cf8cffad85e6147308a  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)  2 votes, 7 watchers","closed","type: bug,","spring-projects-issues","2013-11-19T06:32:27Z","2019-01-11T19:29:14Z"
"","15893","GenericMessage unnecessarily copies message headers before passing to MessageHeaders [SPR-11268]","**[Luke Jackson](https://jira.spring.io/secure/ViewProfile.jspa?name=lukejackson)** opened **[SPR-11268](https://jira.spring.io/browse/SPR-11268?redirect=false)** and commented  In the following GenericMessage constructor:  ``` public GenericMessage(T payload, Map headers) {      Assert.notNull(payload, ""payload must not be null"");      if (headers == null) {           headers = new HashMap();      }      else {           headers = new HashMap(headers);      }      this.headers = new MessageHeaders(headers);      this.payload = payload; } ```  The headers are being copied (presumably to ensure immutability).  However MessageHeaders itself copies the header map provided to it, which results in an unnecessary double copying of the headers map:  ``` 	public MessageHeaders(Map headers) { 		this.headers = (headers != null) ? new HashMap(headers) : new HashMap(); 		IdGenerator generatorToUse = (idGenerator != null) ? idGenerator : defaultIdGenerator; 		this.headers.put(ID, generatorToUse.generateId());  		this.headers.put(TIMESTAMP, new Long(System.currentTimeMillis())); 	} ```    ---  **Affects:** 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3b14e974f84b453fd9456ea5d372906fa04dc5e2","closed","type: enhancement,","spring-projects-issues","2013-12-30T17:41:06Z","2014-01-28T13:07:14Z"
"","15900","@Async with cglib based proxy causes memory leak in permgen [SPR-11276]","**[Lukasz Rozek](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas_)** opened **[SPR-11276](https://jira.spring.io/browse/SPR-11276?redirect=false)** and commented  running mvn clean package && mvn exec:exec -PpermLeak against repro project that can be found here https://github.com/lrozek/spring-leak or https://github.com/lrozek/spring-leak/archive/master.zip or git clone https://github.com/lrozek/spring-leak.git  causes java.lang.OutOfMemoryError: PermGen space in 1693 iteration The stacktrace isn't logged, I guess the reason for that is insufficient memory to load classes that are needed to log it  ``` --iteration 1693  2014-01-02 13:10:36,718 [main] INFO  pl.lrozek.spring.leak.main.LeakMain - 1693 calleeThreadName is SimpleAsyncTaskExecutor-1, callerThreadName is main, areThreadsTheSame: false [Loaded sun.reflect.GeneratedConstructorAccessor18 from __JVM_DefineClass__] [Loaded sun.reflect.GeneratedMethodAccessor32 from __JVM_DefineClass__] [Loaded sun.reflect.GeneratedMethodAccessor33 from __JVM_DefineClass__] [GC [PSYoungGen: 10086K->352K(340992K)] 164828K->155093K(1037824K), 0.0015840 secs] [Times: user=0.01 sys=0.00, real=0.00 secs]  [Full GC[Unloading class sun.reflect.GeneratedSerializationConstructorAccessor1694] [Unloading class sun.reflect.GeneratedMethodAccessor31]  [PSYoungGen: 352K->0K(340992K)] [ParOldGen: 154741K->154947K(697856K)] 155093K->154947K(1038848K) [PSPermGen: 65535K->65531K(65536K)], 0.5844170 secs] [Times: user=3.66 sys=0.03, real=0.58 secs]  [GC [PSYoungGen: 0K->0K(340992K)] 154947K->154947K(1038848K), 0.0015100 secs] [Times: user=0.01 sys=0.00, real=0.00 secs]  [Full GC [PSYoungGen: 0K->0K(340992K)] [ParOldGen: 154947K->154947K(698368K)] 154947K->154947K(1039360K) [PSPermGen: 65535K->65535K(65536K)], 0.2045020 secs] [Times: user=1.15 sys=0.00, real=0.21 secs]  [GC [PSYoungGen: 0K->0K(340992K)] 154947K->154947K(1039360K), 0.0024050 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]  [Full GC[Unloading class sun.reflect.GeneratedMethodAccessor32] [Unloading class sun.reflect.GeneratedMethodAccessor33] [Unloading class sun.reflect.GeneratedConstructorAccessor18]  [PSYoungGen: 0K->0K(340992K)] [ParOldGen: 154947K->154850K(698368K)] 154947K->154850K(1039360K) [PSPermGen: 65535K->65529K(65536K)], 0.2422960 secs] [Times: user=1.40 sys=0.00, real=0.24 secs]  [Loaded pl.lrozek.spring.leak.service.AsyncService$$EnhancerByCGLIB$$3e49d941_1695 from file:/home/lucas/.m2/repository/org/springframework/spring-core/4.0.0.RELEASE/spring-core-4.0.0.RELEASE.jar] [Loaded sun.reflect.GeneratedSerializationConstructorAccessor1695 from __JVM_DefineClass__] [GC [PSYoungGen: 1720K->64K(339968K)] 156570K->154914K(1038336K), 0.0042700 secs] [Times: user=0.01 sys=0.00, real=0.00 secs]  [Full GC [PSYoungGen: 64K->0K(339968K)] [ParOldGen: 154850K->154835K(698880K)] 154914K->154835K(1038848K) [PSPermGen: 65535K->65535K(65536K)], 0.1905130 secs] [Times: user=1.06 sys=0.00, real=0.19 secs]  [GC [PSYoungGen: 0K->0K(340480K)] 154835K->154835K(1039360K), 0.0012260 secs] [Times: user=0.01 sys=0.00, real=0.00 secs]  [Full GC [PSYoungGen: 0K->0K(340480K)] [ParOldGen: 154835K->154829K(698880K)] 154835K->154829K(1039360K) [PSPermGen: 65535K->65535K(65536K)], 0.5169370 secs] [Times: user=3.18 sys=0.01, real=0.52 secs]  --OOME thrown  java.lang.OutOfMemoryError: PermGen space Dumping heap to java_pid32668.hprof ... Heap dump file created [263618451 bytes in 2.532 secs] ```  Following logs are before OOME is thrown  ``` --iteration 1688 2014-01-02 13:10:35,049 [main] INFO  pl.lrozek.spring.leak.main.LeakMain - 1688 calleeThreadName is SimpleAsyncTaskExecutor-1, callerThreadName is main, areThreadsTheSame: false [Loaded pl.lrozek.spring.leak.service.AsyncService$$EnhancerByCGLIB$$3e49d941_1690 from file:/home/lucas/.m2/repository/org/springframework/spring-core/4.0.0.RELEASE/spring-core-4.0.0.RELEASE.jar] [Loaded sun.reflect.GeneratedSerializationConstructorAccessor1690 from __JVM_DefineClass__] [Loaded pl.lrozek.spring.leak.service.AsyncService$$EnhancerByCGLIB$$3e49d941_1690$$FastClassByCGLIB$$c5b82ced from file:/home/lucas/.m2/repository/org/springframework/spring-core/4.0.0.RELEASE/spring-core-4.0.0.RELEASE.jar]  --iteration 1689 2014-01-02 13:10:35,060 [main] INFO  pl.lrozek.spring.leak.main.LeakMain - 1689 calleeThreadName is SimpleAsyncTaskExecutor-1, callerThreadName is main, areThreadsTheSame: false [Loaded pl.lrozek.spring.leak.service.AsyncService$$EnhancerByCGLIB$$3e49d941_1691 from file:/home/lucas/.m2/repository/org/springframework/spring-core/4.0.0.RELEASE/spring-core-4.0.0.RELEASE.jar] [Loaded sun.reflect.GeneratedSerializationConstructorAccessor1691 from __JVM_DefineClass__] [Loaded pl.lrozek.spring.leak.service.AsyncService$$EnhancerByCGLIB$$3e49d941_1691$$FastClassByCGLIB$$c5b82cee from file:/home/lucas/.m2/repository/org/springframework/spring-core/4.0.0.RELEASE/spring-core-4.0.0.RELEASE.jar]   --iteration 1690 2014-01-02 13:10:35,071 [main] INFO  pl.lrozek.spring.leak.main.LeakMain - 1690 calleeThreadName is SimpleAsyncTaskExecutor-1, callerThreadName is main, areThreadsTheSame: false [Loaded sun.reflect.GeneratedSerializationConstructorAccessor1692pl.lrozek.spring.leak.service.AsyncService$$EnhancerByCGLIB$$3e49d941_1692 from file:/home/lucas/.m2/repository/org/springframework/spring-core/4.0.0.RELEASE/spring-core-4.0.0.RELEASE.jar] [Loaded sun.reflect.GeneratedSerializationConstructorAccessor1692 from __JVM_DefineClass__] [Loaded pl.lrozek.spring.leak.service.AsyncService$$EnhancerByCGLIB$$3e49d941_1692$$FastClassByCGLIB$$c5b82cef from file:/home/lucas/.m2/repository/org/springframework/spring-core/4.0.0.RELEASE/spring-core-4.0.0.RELEASE.jar]   --iteration 1691 2014-01-02 13:10:35,082 [main] INFO  pl.lrozek.spring.leak.main.LeakMain - 1691 calleeThreadName is SimpleAsyncTaskExecutor-1, callerThreadName is main, areThreadsTheSame: false [Loaded pl.lrozek.spring.leak.service.AsyncService$$EnhancerByCGLIB$$3e49d941_1693 from file:/home/lucas/.m2/repository/org/springframework/spring-core/4.0.0.RELEASE/spring-core-4.0.0.RELEASE.jar] [GC [PSYoungGen: 96317K->1376K(335872K)] 259595K->164653K(704000K), 0.0020840 secs] [Times: user=0.01 sys=0.00, real=0.00 secs]  [Full GC  [Unloading class sun.reflect.GeneratedSerializationConstructorAccessor1684] [Unloading class sun.reflect.GeneratedSerializationConstructorAccessor1692] [Unloading class sun.reflect.GeneratedSerializationConstructorAccessor1687] [Unloading class sun.reflect.GeneratedSerializationConstructorAccessor1691] [Unloading class sun.reflect.GeneratedSerializationConstructorAccessor1688] [Unloading class sun.reflect.GeneratedSerializationConstructorAccessor1685] [Unloading class sun.reflect.GeneratedSerializationConstructorAccessor1690] [Unloading class sun.reflect.GeneratedSerializationConstructorAccessor1686] [Unloading class sun.reflect.GeneratedSerializationConstructorAccessor1689] [Unloading class sun.reflect.GeneratedSerializationConstructorAccessor1683]   [PSYoungGen: 1376K->0K(335872K)] [ParOldGen: 163277K->164203K(484352K)] 164653K->164203K(820224K) [PSPermGen: 65534K->65501K(65536K)], 0.7856260 secs] [Times: user=4.81 sys=0.01, real=0.78 secs]  [Loaded sun.reflect.GeneratedSerializationConstructorAccessor1693 from __JVM_DefineClass__] [Loaded pl.lrozek.spring.leak.service.AsyncService$$EnhancerByCGLIB$$3e49d941_1693$$FastClassByCGLIB$$c5b82cf0 from file:/home/lucas/.m2/repository/org/springframework/spring-core/4.0.0.RELEASE/spring-core-4.0.0.RELEASE.jar]   2014-01-02 13:10:35,882 [main] INFO  pl.lrozek.spring.leak.main.LeakMain - 1692 calleeThreadName is SimpleAsyncTaskExecutor-1, callerThreadName is main, areThreadsTheSame: false ```  As you can notice, every iteration (when application context is created from scratch) loads following classes: - pl.lrozek.spring.leak.service.AsyncService$$EnhancerByCGLIB$$3e49d941_1692 - pl.lrozek.spring.leak.service.AsyncService$$EnhancerByCGLIB$$3e49d941_1692$$FastClassByCGLIB$$c5b82cef - sun.reflect.GeneratedSerializationConstructorAccessor1692  where the two first classes aren't unloaded and cause memory leak in perm gen  This can be seen in iteration 1691 when Full GC occurs and following classes are unloaded: - Unloading class sun.reflect.GeneratedSerializationConstructorAccessor1684 - Unloading class sun.reflect.GeneratedSerializationConstructorAccessor1692 - Unloading class sun.reflect.GeneratedSerializationConstructorAccessor1687 - Unloading class sun.reflect.GeneratedSerializationConstructorAccessor1691   ...  In attached screenshot you can notice how memory leaks in perm while application contexts are created / closed !perm leak.png!  ---  **Affects:** 3.2.6, 4.0 GA  **Reference URL:** https://github.com/lrozek/spring-leak  **Attachments:** - [perm leak.png](https://jira.spring.io/secure/attachment/21578/perm+leak.png) (_18.43 kB_)  **Issue Links:** - #12663 MemoryLeak in Cglib2AopProxy.ProxyCallbackFilter - #15899 `@Async` with cglib based proxy causes memory leak in heap  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/be2d915cc2f9129db030a12cf193c5caa19e65c3, https://github.com/spring-projects/spring-framework/commit/0de307bb65dd5e8d693ada99fbaf4cacc1a49ffe  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","in: core,","spring-projects-issues","2014-01-02T04:34:49Z","2019-01-13T06:56:39Z"
"","15899","@Async with cglib based proxy causes memory leak in heap [SPR-11275]","**[Lukasz Rozek](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas_)** opened **[SPR-11275](https://jira.spring.io/browse/SPR-11275?redirect=false)** and commented  running mvn clean package && mvn exec:exec against repro project that can be found here https://github.com/lrozek/spring-leak or https://github.com/lrozek/spring-leak/archive/master.zip or git clone https://github.com/lrozek/spring-leak.git causes java.lang.OutOfMemoryError: GC overhead limit exceeded  Here is sample of stack trace:  ``` 2014-01-02 11:02:49,886 [main] INFO  pl.lrozek.spring.leak.main.LeakMain - 1350 calleeThreadName is SimpleAsyncTaskExecutor-1, callerThreadName is main, areThreadsTheSame: false [Full GC [PSYoungGen: 39936K->39413K(41984K)] [ParOldGen: 86640K->86551K(87040K)] 126576K->125965K(129024K) [PSPermGen: 57938K->57855K(58368K)], 0.4292090 secs] [Times: user=2.89 sys=0.01, real=0.43 secs]  java.lang.OutOfMemoryError: GC overhead limit exceeded Dumping heap to java_pid23319.hprof ... Heap dump file created [215260624 bytes in 1.822 secs] Exception in thread ""main"" java.lang.OutOfMemoryError: GC overhead limit exceeded 	at java.lang.ClassLoader.getBootstrapResources(ClassLoader.java:1317) 	at java.lang.ClassLoader.getResources(ClassLoader.java:1183) 	at java.lang.ClassLoader.getResources(ClassLoader.java:1181) 	at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findAllClassPathResources(PathMatchingResourcePatternResolver.java:304) 	at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:273) 	at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:339) 	at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:269) 	at org.springframework.context.support.AbstractApplicationContext.getResources(AbstractApplicationContext.java:1170) 	at org.springframework.context.support.GenericApplicationContext.getResources(GenericApplicationContext.java:223) 	at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:268) 	at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:242) 	at org.springframework.context.annotation.ComponentScanAnnotationParser.parse(ComponentScanAnnotationParser.java:134) 	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:236) 	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:205) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:182) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:152) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:299) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:243) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:609) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) 	at org.springframework.context.annotation.AnnotationConfigApplicationContext.(AnnotationConfigApplicationContext.java:84) 	at pl.lrozek.spring.leak.main.LeakMain.main(LeakMain.java:18) ```  Here is another stacktrace:  ``` 2014-01-02 11:27:58,748 [main] INFO  pl.lrozek.spring.leak.main.LeakMain - 1376 calleeThreadName is SimpleAsyncTaskExecutor-1, callerThreadName is main, areThreadsTheSame: false [Full GC [PSYoungGen: 39936K->39337K(41984K)] [ParOldGen: 86819K->86819K(87040K)] 126755K->126157K(129024K) [PSPermGen: 55355K->55355K(55808K)], 0.1434080 secs] [Times: user=0.86 sys=0.01, real=0.14 secs]  [Full GC [PSYoungGen: 39936K->39391K(41984K)] [ParOldGen: 86819K->86819K(87040K)] 126755K->126210K(129024K) [PSPermGen: 55355K->55355K(55808K)], 0.1388310 secs] [Times: user=0.88 sys=0.01, real=0.13 secs]  [Full GC [PSYoungGen: 39936K->39369K(41984K)] [ParOldGen: 86819K->86763K(87040K)] 126755K->126132K(129024K) [PSPermGen: 55355K->55323K(55808K)], 0.4117840 secs] [Times: user=2.87 sys=0.01, real=0.41 secs]  java.lang.OutOfMemoryError: GC overhead limit exceeded Dumping heap to java_pid26941.hprof ... Heap dump file created [215055088 bytes in 1.795 secs] Exception in thread ""main"" java.lang.OutOfMemoryError: GC overhead limit exceeded 	at java.lang.reflect.Method.copy(Method.java:151) 	at java.lang.reflect.ReflectAccess.copyMethod(ReflectAccess.java:136) 	at sun.reflect.ReflectionFactory.copyMethod(ReflectionFactory.java:300) 	at java.lang.Class.copyMethods(Class.java:2852) 	at java.lang.Class.getDeclaredMethods(Class.java:1855) 	at org.springframework.util.ReflectionUtils.findMethod(ReflectionUtils.java:154) 	at org.springframework.util.ClassUtils.getMostSpecificMethod(ClassUtils.java:758) 	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.findResourceMetadata(CommonAnnotationBeanPostProcessor.java:351) 	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(CommonAnnotationBeanPostProcessor.java:283) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyMergedBeanDefinitionPostProcessors(AbstractAutowireCapableBeanFactory.java:908) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:512) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:354) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1094) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:989) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:220) 	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:618) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:467) 	at org.springframework.context.annotation.AnnotationConfigApplicationContext.(AnnotationConfigApplicationContext.java:84) 	at pl.lrozek.spring.leak.main.LeakMain.main(LeakMain.java:18) ```  Stack traces differ from run to run depending where OOME was thrown. Sometimes exception isn't thrown but than in the console there are only logs of garbage collector activity  java:  ``` java version ""1.7.0_45"" Java(TM) SE Runtime Environment (build 1.7.0_45-b18) Java HotSpot(TM) 64-Bit Server VM (build 24.45-b08, mixed mode) ```  maven:  ``` Apache Maven 3.1.1 (0728685237757ffbf44136acec0402957f723d9a; 2013-09-17 17:22:22+0200) Maven home: /opt/mvn/maven Java version: 1.7.0_45, vendor: Oracle Corporation Java home: /opt/jvm/jdk1.7.0_45/jre Default locale: en_US, platform encoding: UTF-8 OS name: ""linux"", version: ""3.0.0-32-generic"", arch: ""amd64"", family: ""unix"" ```  Here is the screenshot of the heap when OOME is about to be thrown !heap leak.png!  ---  **Affects:** 3.2.6, 4.0 GA  **Reference URL:** https://github.com/lrozek/spring-leak  **Attachments:** - [heap leak.png](https://jira.spring.io/secure/attachment/21576/heap+leak.png) (_25.26 kB_) - [heap leak-mat.png](https://jira.spring.io/secure/attachment/21577/heap+leak-mat.png) (_269.07 kB_)  **Issue Links:** - #17158 Inconsistent hashCode/equals implementation in AbstractPointcutAdvisor results in CGLIB-related memory leak (_**""is duplicated by""**_) - #16398 ClassLoader leak with `@Async`, CGLIB and DefaultListableBeanFactory - #15411 Method injection causes memory leak - #15900 `@Async` with cglib based proxy causes memory leak in permgen  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","in: core,","spring-projects-issues","2014-01-02T02:36:50Z","2019-01-13T06:56:41Z"
"","15850","Regression: Incorrect generic type resolved by AbstractMessageConverterMethodArgumentResolver [SPR-11225]","**[Lukas Krecan](https://jira.spring.io/secure/ViewProfile.jspa?name=dart0)** opened **[SPR-11225](https://jira.spring.io/browse/SPR-11225?redirect=false)** and commented  We are using Spring MVC for implementing REST API. We have resource hierarchy similar to the following one  ```     public static class Parent {         @RequestMapping(method=RequestMethod.PUT)         public void put(@RequestBody T param) {          }     }       public static class Child extends Parent {      } ```  The Child class is used as a resource. In Spring 4.0.0 request body mapping stopped working, the parameter type is resolved incorrectly. In this simplified example, the parameter type is resolved to be Number and not Integer as in Spring 3.2.5.  I think that it was introduced by changes in AbstractMessageConverterMethodArgumentResolver:130    ---  **Affects:** 4.0 GA","closed","type: bug,","spring-projects-issues","2013-12-13T07:55:11Z","2014-01-28T13:07:21Z"
"","15871","Regression: InjectionMetadata cache needs to handle different bean classes per bean name [SPR-11246]","**[Ludovic Ronsin](https://jira.spring.io/secure/ViewProfile.jspa?name=zeludo)** opened **[SPR-11246](https://jira.spring.io/browse/SPR-11246?redirect=false)** and commented  In my project I use a request-scoped factory bean in order to inject the expected implementation between several beans (singletons) depending on request context. So given a bean name, several candidates can be injected.  The InjectionMetadata cache in AutowiredAnnotationBeanPostProcessor use the bean name as a key. (See AutowiredAnnotationBeanPostProcessor.findAutowiringMetadata(String beanName, Class clazz)) In my case it doesn't work because it doesn't always return the metadata of the corresponding class, instead it will always return the metadata of the first used class.  I attached a test project to reproduce this bug, just run the included junit test. Seems to be reproducible since 3.2.5.RELEASE and still present on 4.0.0.RELEASE  ---  **Affects:** 3.2.5, 4.0 GA  **Issue Links:** - #15855 AutowireCapableBeanFactory no longer autowiring since version 3.2.5 - #16170 Providing unique names to prototype inner beans causes excessive memory and CPU use  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5c3f6a1571ab3cec65b570186c80133f3263cc25, https://github.com/spring-projects/spring-framework/commit/5308b3e358e3667eac3a8bb263d356d1b57efc5a, https://github.com/spring-projects/spring-framework/commit/08aa22ff1fa3a8ebcad63adf5816cbe2e632d3c1, https://github.com/spring-projects/spring-framework/commit/b1460742c37f0de3c606d3710798c9ff8af2fb80  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: bug,","spring-projects-issues","2013-12-18T09:01:58Z","2019-01-11T18:25:07Z"
"","15979","Regression from 3.2.x for FormattingConversionService.addFormatterForFieldType [SPR-11354]","**[Ludovic Praud](https://jira.spring.io/secure/ViewProfile.jspa?name=ludovic.praud)** opened **[SPR-11354](https://jira.spring.io/browse/SPR-11354?redirect=false)** and commented  I've tried to migrate my project from spring 3.2.x to 4.0 following #15865 comment https://jira.springsource.org/browse/SPR-11240#comment-97549. But it turns out that I have a compatibility problem using ``` FormattingConversionService.addFormatterForFieldType which throws a java.lang.IllegalArgumentException: Type must not be null  ```  I've created a reproduction project, see the given reference URL. ```  ---  **Affects:** 4.0 GA  **Reference URL:** https://github.com/lpraud/spring-4.0-type-resolver-bug  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eeae5fba957f46ecf0f83db526a30b0480a070db","closed","in: core,","spring-projects-issues","2014-01-24T01:38:00Z","2019-01-11T18:40:45Z"
"","16317","Add support for @RequestMapping method return values of type ListenableFuture [SPR-11695]","**[Luciano Leggieri](https://jira.spring.io/secure/ViewProfile.jspa?name=lukiano)** opened **[SPR-11695](https://jira.spring.io/browse/SPR-11695?redirect=false)** and commented  I created a custom HandlerMethodReturnValueHandler that handles controller methods that return a ListenableFuture (by creating a deferredresult that is filled when the future completes). Then I add it to the AppContext via a WebMvcConfigurer.  I would also like to annotate such method with `@ResponseBody`, so I can return, for instance, a ListenableFuture\. It would handle the asynchronous part first, and then convert the Long to a nice response that contains the number. It works fine with DeferredResult because in org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#getDefaultReturnValueHandlers(), handlers like CallableMethodReturnValueHandler, DeferredResultMethodReturnValueHandler or AsyncTaskMethodReturnValueHandler comes before than RequestResponseBodyMethodProcessor. But any custom handler comes later so the annotation is found first, and the ListenableFuture is converted to json.   ---  **Affects:** 4.0.3","closed","type: enhancement,","spring-projects-issues","2014-04-14T22:10:00Z","2014-07-18T10:16:30Z"
"","16031","Broken link into documentation section 21.5.3  [SPR-11404]","**[Luca Preziati](https://jira.spring.io/secure/ViewProfile.jspa?name=luca.preziati)** opened **[SPR-11404](https://jira.spring.io/browse/SPR-11404?redirect=false)** and commented  In documentation, http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/, there is a link in section 21.5.3 to this web site: https://jax-ws-commons.dev.java.net/spring/.  The link is broken and the site moved to https://jax-ws-commons.java.net/spring/   ---  **Affects:** 3.2.7, 4.0.1  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","type: documentation,","spring-projects-issues","2014-02-07T07:13:13Z","2014-02-18T22:35:59Z"
"","16318","JavaConfig and LTW does not work [SPR-11696]","**[liam knox](https://jira.spring.io/secure/ViewProfile.jspa?name=liamjknox)** opened **[SPR-11696](https://jira.spring.io/browse/SPR-11696?redirect=false)** and commented  Attached is a very simple project using both xml and javaConfig to provide some custom LTW weaving. However running the JavaConfigMain there appears no weaving taking place. Also the general documentation and examples in the area of AOP, LTW and JavaConfiguration are very lacking.  Can you please advise if this code is demonstrating a bug or provide equivalents of JavaConfig and Xml config LTW examples?  Thanks  Liam   ---  **Affects:** 4.0.3  **Attachments:** - [ltw.zip](https://jira.spring.io/secure/attachment/21944/ltw.zip) (_18.28 kB_)","closed","status: bulk-closed,","spring-projects-issues","2014-04-15T08:13:47Z","2019-01-12T00:20:19Z"
"","16185","Support externalized configuration like Spring Boot has (application-{profile}.properties) [SPR-11561]","**[Leif Hanack](https://jira.spring.io/secure/ViewProfile.jspa?name=strug)** opened **[SPR-11561](https://jira.spring.io/browse/SPR-11561?redirect=false)** and commented  What do you think about adding the Spring Boot feature that will load properties from application.properties in the root of your classpath and add them to the Spring Environment?  The actual search path should be the same:  - classpath root - current directory - classpath /config package - /config subdir of the current directory.  In addition, profile specific properties should also be defined using the naming convention application-{profile}.properties (properties from these files override the default ones).  In addition, what do you think about loading profile specific properties for property sources defined with `@PropertySource`? E.g. `@PropertySource`(""classpath:my.properties"") should look for my-{profile}.properties before it loads my.properties.   ---  **Affects:** 4.0.2  1 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-03-15T14:16:12Z","2019-01-12T02:45:17Z"
"","16304","SessionAttributes updated when form submit [SPR-11681]","**[leebm](https://jira.spring.io/secure/ViewProfile.jspa?name=leebm)** opened **[SPR-11681](https://jira.spring.io/browse/SPR-11681?redirect=false)** and commented  User is stored when login success.  ```java bean: public class Business {     String id;      ... }  public class User {     String id;     ... } ```  controller:  ```java @RequestMapping(""/save"") public String save(@ModelAttribute Business o, @ModelAttribute(""user"") User user) {       //when form submit, User id value updated by Business id value.       //but,in most cases.SessionAttributes want't be updated. } ```  ```html form:             ```    ---  **Affects:** 3.2.6","closed","status: declined,","spring-projects-issues","2014-04-09T19:58:06Z","2019-01-12T16:34:59Z"
"","16164","spring3.2.6 matrix variable url match bug? [SPR-11539]","**[leebm](https://jira.spring.io/secure/ViewProfile.jspa?name=leebm)** opened **[SPR-11539](https://jira.spring.io/browse/SPR-11539?redirect=false)** and commented  it's similar like #15031  my url : http://localhost/s3/test;orgId=1 or http://localhost/s3/test/orgId=1  mapping:  ```java @RequestMapping(""/test"") public void test(@MatrixVariable String orgId) { 	System.out.println(orgId); } ```  it's not matched! i try below test: url: http://localhost/s3/test/hi;orgId=1  mapping:  ```java @RequestMapping(""/test/{hi}"") public void test(@PathVariable String hi, @MatrixVariable String orgId) { 	System.out.println(orgId); } ```  it's worked. it's anything wrong with my use?   ---  **Affects:** 3.2.6","closed","status: declined,","spring-projects-issues","2014-03-11T21:03:39Z","2019-01-14T05:17:14Z"
"","15955","Improve documentation explaining how to enable MatrixVariable in Spring MVC [SPR-11331]","**[leebm](https://jira.spring.io/secure/ViewProfile.jspa?name=leebm)** opened **[SPR-11331](https://jira.spring.io/browse/SPR-11331?redirect=false)** and commented  example:  ```java @RequestMapping(value = ""/hello/{mes}"", method = RequestMethod.GET) 	public String hello( 			@PathVariable String mes, Model model,  			@MatrixVariable int age) { 		model.addAttribute(""mes"", mes); 		model.addAttribute(""age"", age); 		return ""hello""; 	} ```  url: `http://localhost/s3/hello/hi;age=21` this url can't be matched.  ---  **Affects:** 3.2.6  **Issue Links:** - #15664 MatrixVariables do not work  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cfa78a9b25e532d8658cab3dd5623a3e0e505440, https://github.com/spring-projects/spring-framework/commit/175aa86d79621fec5a49d4b18a9919d19e8c6def, https://github.com/spring-projects/spring-framework/commit/98174e101f97bbf59b85420601a0130bb168a341  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: task,","spring-projects-issues","2014-01-19T21:39:51Z","2019-01-11T19:01:17Z"
"","16284","java.nio.channels.WritePendingException on WebSocket [SPR-11661]","**[Lee Standen](https://jira.spring.io/secure/ViewProfile.jspa?name=lstanden)** opened **[SPR-11661](https://jira.spring.io/browse/SPR-11661?redirect=false)** and commented  I've got an application which sends a stack of data to the client after they connect via websockets (basically initializing the state of the application).  I'm getting a WritePendingException intermittently and I can't seem to find anywhere to catch and recover from it.  Here's the stacktrace.  ``` 00:26:28.705 [qtp1378084334-31] ERROR o.s.w.s.h.ExceptionWebSocketHandlerDecorator - Closing due to exception for SockJS session id=819zm43n org.springframework.web.socket.sockjs.SockJsTransportFailureException: Failed to write SockJsFrame content='a[""{\""messages\"":[{\""message\"":\""testo\"",\""fromAccount\"":{\""name\"":\""Innominata\...(truncated)'; nested exception is java.io.IOException: java.nio.channels.WritePendingException 	at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.writeFrame(AbstractSockJsSession.java:343) ~[spring-websocket-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession.flushCache(StreamingSockJsSession.java:70) ~[spring-websocket-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.tryFlushCache(AbstractHttpSockJsSession.java:310) ~[spring-websocket-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.sendMessageInternal(AbstractHttpSockJsSession.java:297) ~[spring-websocket-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.sendMessage(AbstractSockJsSession.java:247) ~[spring-websocket-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.me.chat.adapter.WebSocketAdapter.reply(WebSocketAdapter.java:336) ~[classes/:na] 	at org.me.chat.adapter.WebSocketAdapter.lambda$afterConnectionEstablished$0(WebSocketAdapter.java:85) ~[classes/:na] 	at org.me.chat.adapter.WebSocketAdapter$$Lambda$9/1679234307.accept(Unknown Source) ~[na:na] 	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[na:1.8.0] 	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1359) ~[na:1.8.0] 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512) ~[na:1.8.0] 	at java.util.stream.ForEachOps$ForEachTask.compute(ForEachOps.java:290) ~[na:1.8.0] 	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731) ~[na:1.8.0] 	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289) ~[na:1.8.0] 	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:902) ~[na:1.8.0] 	at java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1689) ~[na:1.8.0] 	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1644) ~[na:1.8.0] 	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157) ~[na:1.8.0] Caused by: java.io.IOException: java.nio.channels.WritePendingException 	at org.eclipse.jetty.util.BlockingCallback.block(BlockingCallback.java:101) ~[na:na] 	at org.eclipse.jetty.server.HttpOutput.write(HttpOutput.java:125) ~[na:na] 	at org.eclipse.jetty.server.HttpOutput.flush(HttpOutput.java:221) ~[na:na] 	at org.eclipse.jetty.server.Response.flushBuffer(Response.java:1217) ~[na:na] 	at javax.servlet.ServletResponseWrapper.flushBuffer(ServletResponseWrapper.java:215) ~[servlet-api-3.1.jar:3.1.0] 	at javax.servlet.ServletResponseWrapper.flushBuffer(ServletResponseWrapper.java:215) ~[servlet-api-3.1.jar:3.1.0] 	at org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper.flushBuffer(SaveContextOnUpdateOrErrorResponseWrapper.java:135) ~[spring-security-web-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.http.server.ServletServerHttpResponse.flush(ServletServerHttpResponse.java:90) ~[spring-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession.writeFrameInternal(StreamingSockJsSession.java:99) ~[spring-websocket-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.writeFrame(AbstractSockJsSession.java:332) ~[spring-websocket-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	... 17 common frames omitted Caused by: java.nio.channels.WritePendingException: null 	at org.eclipse.jetty.io.WriteFlusher.write(WriteFlusher.java:331) ~[na:na] 	at org.eclipse.jetty.io.AbstractEndPoint.write(AbstractEndPoint.java:125) ~[na:na] 	at org.eclipse.jetty.server.HttpConnection$ContentCallback.process(HttpConnection.java:680) ~[na:na] 	at org.eclipse.jetty.util.IteratingCallback.processIterations(IteratingCallback.java:166) ~[na:na] 	at org.eclipse.jetty.util.IteratingCallback.iterate(IteratingCallback.java:126) ~[na:na] 	at org.eclipse.jetty.server.HttpConnection.send(HttpConnection.java:303) ~[na:na] 	at org.eclipse.jetty.server.HttpChannel.sendResponse(HttpChannel.java:720) ~[na:na] 	at org.eclipse.jetty.server.HttpChannel.write(HttpChannel.java:751) ~[na:na] 	at org.eclipse.jetty.server.HttpOutput.write(HttpOutput.java:130) ~[na:na] 	at org.eclipse.jetty.server.HttpOutput.write(HttpOutput.java:124) ~[na:na] 	... 25 common frames omitted ```    ---  **Affects:** 4.0.3","closed","in: web,","spring-projects-issues","2014-04-04T09:28:16Z","2019-01-11T21:03:12Z"
"","15944","Add control of what HTTP Request method AbstractFileResolvingResource methods exists, lastModified and lastModified uses on http url resources [SPR-11320]","**[Lars Bo Spring](https://jira.spring.io/secure/ViewProfile.jspa?name=lbm@atira.dk)** opened **[SPR-11320](https://jira.spring.io/browse/SPR-11320?redirect=false)** and commented  We recently upgraded to spring 3.2.4 from 3.0.0 and experienced a change in how UrlResource/AbstractFileResolvingResource work.  When the AbstractFileResolvingResource methods exists(), lastModified() and lastModified() are invoked on HTTP url resources, the http lookups are now performed as HTTP HEAD requests instead of in earlier releases that fetched the entire data.  In most situations this approach is very appropriate and reduces required network traffic.  However some less intelligently behaving remote services return 405 on HEAD requests, requiring that we subclass the resource type or implement it from scratch to avoid calls to the above methods (especially exists()) return an invalid response.  It would be great if it was possible to define what method to use on such requests as a property on AbstractFileResolvingResource alternatively on UrlResource, or to enable the URLResource to use the old way of handling those methods.  Hope this makes sense to you :-)    ---  **Affects:** 3.2.6, 4.0 GA  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-01-16T07:11:39Z","2014-01-28T13:07:11Z"
"","16008","Enable configuration of ApplicationContextInitializers in the context file itself [SPR-11381]","**[Krzysztof Trojan](https://jira.spring.io/secure/ViewProfile.jspa?name=trojanbug)** opened **[SPR-11381](https://jira.spring.io/browse/SPR-11381?redirect=false)** and commented  ApplicationContextInitializers introduce some flexibility to configure the application context, namely selecting beans profiles enabled or changing the application context environmant. However, selecting them need to coded in Java or in web.xml (if for a web app)  This is cumbersome to maintain, and makes it very difficult to create parameterized ApplicationContextInitializers.  **This request is to introduce a mechanism of configuration of ApplicationContextInitializer in the context file itself**. Ideally if the application context initializer could be a been itself, we could use the power of Spring for configuring its properties. Somethign along the lines of BeanDefinitionRegistryPostProcessor ...   --- No further details from [SPR-11381](https://jira.spring.io/browse/SPR-11381?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2014-02-02T03:25:07Z","2019-01-12T02:45:55Z"
"","16007","Provide ability to enable bean profiles based on a condition, and not only arbitrary list on a property [SPR-11380]","**[Krzysztof Trojan](https://jira.spring.io/secure/ViewProfile.jspa?name=trojanbug)** opened **[SPR-11380](https://jira.spring.io/browse/SPR-11380?redirect=false)** and commented  The beans profiles introduces a possibility of creating a set of beans under a name, potentially multiple alternating sets, and activate a given set based on a value of some arbitrary property. Application context configurers add a bit of flexibility to this, and allow for setting the controlling property dynamically, but as they are code contructs, they lack desired flexibility. They also need to be pre-configured outside Spring config files themselves (in the code or web.xml ...)  Spring 4.0 introduces a notion of ""conditional"" beans.  **This request is to introduce conditional bean profiles, based on a condition.** A typical condition could be an SpEL expression checking for example for environment property (such as a property typical for a particular application servlet to enable all ""WebSphere apecific"" beans).  It would be also very useful that the condition for the profile was made configurable in XML (see similar: #15597)  ---  No further details from [SPR-11380](https://jira.spring.io/browse/SPR-11380?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2014-02-02T03:08:47Z","2019-01-12T02:45:59Z"
"","16006","Introduce an expression based FactoryBean to ease configuration of beans from a builder pattern [SPR-11379]","**[Krzysztof Trojan](https://jira.spring.io/secure/ViewProfile.jspa?name=trojanbug)** opened **[SPR-11379](https://jira.spring.io/browse/SPR-11379?redirect=false)** and commented  Configuration of some classes, that do not follow Java Beans conventions, or have a constructor with enough parameters to configure themselves, is hard using XML Spring config.  This is especially true when forced to use fluent APIs, such as builder pattern. While utilizing a `@Configuration` annotated class is an option, it is for many not a clean solution as it couples runtime config and code.  Consider the below snippet for configuring HttpClient with pre-configured SSL config, and if it would be possible in standard XML config:  ```xml                                                                                                                           ```  Example complete implementation below:  ```java package eu.trojanbug.spring.builder;  import org.springframework.beans.BeansException; import org.springframework.beans.factory.BeanFactory; import org.springframework.beans.factory.BeanFactoryAware; import org.springframework.beans.factory.FactoryBean; import org.springframework.context.expression.BeanFactoryResolver; import org.springframework.expression.BeanResolver; import org.springframework.expression.Expression; import org.springframework.expression.ExpressionParser; import org.springframework.expression.spel.standard.SpelExpressionParser; import org.springframework.expression.spel.support.StandardEvaluationContext;  /**  * Implementation of the {@link FactoryBean} over a configurable SpEL expression.  *  * @author Krzysztof Trojan (trojanbug)  */ public class ExpressionBasedFactory implements FactoryBean, BeanFactoryAware {      private boolean singleton = false;     private Class objectType = null;     private Object singletonInstance = null;     private boolean lazilyInitialized = true;     private static ExpressionParser parser = new SpelExpressionParser();     private Expression expression = null;     private BeanResolver beanResolver = null;     private BeanFactory beanFactory = null;      public void setFactoryExpressionString(String expression) {          this.expression = parser.parseExpression(expression);     }      public String getFactoryExpressionString() {          return this.expression.getExpressionString();     }      public Object getObject() throws Exception {         StandardEvaluationContext context = new StandardEvaluationContext();         context.setBeanResolver(beanResolver);          if (objectType != null)             return expression.getValue(context, objectType);         else             return expression.getValue(context);     }      public Class getObjectType() {         if (objectType != null) {             return objectType;         } else if (isSingleton() && !isLazilyInitialized()) {             if (singletonInstance == null) {                 try {                     singletonInstance = getObject();                     if (singletonInstance != null) {                         setObjectType(singletonInstance.getClass());                     }                     return objectType;                 } catch (Exception e) {                     return null;                 }             }         }         return null;     }      public void setObjectType(Class objectType) {         this.objectType = objectType;     }      public boolean isSingleton() {         return singleton;     }      public void setSingleton(boolean singleton) {         this.singleton = singleton;     }      public boolean isLazilyInitialized() {         return lazilyInitialized;     }      public void setLazilyInitialized(boolean lazilyInitialized) {         this.lazilyInitialized = lazilyInitialized;     }      public void setBeanFactory(BeanFactory beanFactory) throws BeansException {         this.beanFactory = beanFactory;         beanResolver = new BeanFactoryResolver(beanFactory);     } } ```    ---  **Reference URL:** https://github.com/trojanbug/spring-power-utils","closed","status: bulk-closed,","spring-projects-issues","2014-02-02T00:33:22Z","2019-01-12T02:46:02Z"
"","15539","Setting up BeanFactoryPostProcessors does not not use ConversionService, even if configured for a given BeanFactory [SPR-10911]","**[Krzysztof Trojan](https://jira.spring.io/secure/ViewProfile.jspa?name=trojanbug)** opened **[SPR-10911](https://jira.spring.io/browse/SPR-10911?redirect=false)** and commented  Setting up BeanFactoryPostProcessors does not not use ConversionService, even if configured for a given BeanFactory.  For example, configuring a BeanFactoryPostProcessor setting the ConversionService, such as attached example, do not allow using the configred converters when setting up next BeanFactoryPostProcessors, even if used afterwards.  This creates assymetry, where the context refresh() process early stages use one mechanism, while normal bean initialisation the other.  Context should use conversionService if configured.   ---  **Affects:** 3.0 GA, 3.1 GA, 3.2 GA  **Attachments:** - [ConversionServiceSettingBeanDefinitionRegistryPostProcessor.java](https://jira.spring.io/secure/attachment/21381/ConversionServiceSettingBeanDefinitionRegistryPostProcessor.java) (_1.14 kB_) - [example-context.xml](https://jira.spring.io/secure/attachment/21382/example-context.xml) (_1.99 kB_)","closed","status: bulk-closed,","spring-projects-issues","2013-09-12T04:00:29Z","2019-01-12T02:30:19Z"
"","16335","","**[Krzysztof Kot](https://jira.spring.io/secure/ViewProfile.jspa?name=krzykot)** opened **[SPR-11713](https://jira.spring.io/browse/SPR-11713?redirect=false)** and commented  My form looked like below. Errors wasn't displayed because I passed in model attribute ""orderItem"" with capital ""I"". I think if modelAttribute is case insensitive then  also should be case insensitive.","closed","status: bulk-closed,","spring-projects-issues","2014-04-21T02:15:15Z","2019-01-12T00:20:10Z"
"","16156","Memory leak related to TCP connection management with use of STOMP broker relay [SPR-11531]","**[Kevin Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=kjordan2001)** opened **[SPR-11531](https://jira.spring.io/browse/SPR-11531?redirect=false)** and commented  This may be more of a bug with reactor which Spring websockets uses, but it seems it builds up a lot of connections.  I get almost 800MB in just a few short days.  I don't have 65k connections active at any given time so this shouldn't be this way.  In my configuration I'm using stomp with rabbitmq.  Configuration:  ```java @Configuration @EnableWebSocketMessageBroker @EnableScheduling @ComponentScan(basePackages = ""com.practiware.desktop.server"") public class WebSocketConfig implements WebSocketMessageBrokerConfigurer, SchedulingConfigurer {  	Logger logger = LoggerFactory.getLogger(this.getClass());  	private ThreadPoolTaskScheduler scheduler;  	@Override 	public void configureClientInboundChannel(ChannelRegistration registration) { 		registration.setInterceptors(new ChannelInterceptor() {  			@Override 			public Message postReceive(Message message, 										  MessageChannel channel) { 				WebSocketConfig.this.logger.info(""Post-receive on channel of type: "" + channel.getClass().getName()); 				WebSocketConfig.this.logger.info(""Headers: "" + message.getHeaders().toString()); 				WebSocketConfig.this.logger.info(""Payload: "" + String.valueOf(message.getPayload())); 				return message; 			}  			@Override 			public void postSend(Message message, 								 MessageChannel channel, 								 boolean sent) { 				WebSocketConfig.this.logger.info(""Post-send on channel of type: "" + channel.getClass().getName()); 				WebSocketConfig.this.logger.info(""Headers: "" + message.getHeaders().toString()); 				WebSocketConfig.this.logger.info(""Payload: "" + String.valueOf(message.getPayload())); 			}  			@Override 			public boolean preReceive(MessageChannel channel) { 				WebSocketConfig.this.logger.info(""Pre-receive on channel of type: "" + channel.getClass().getName()); 				return true; 			}  			@SuppressWarnings(""unchecked"") 			@Override 			public Message preSend(Message message, 									  MessageChannel channel) { 				try { 					WebSocketConfig.this.logger.info(""Pre-send on channel of type: "" + channel.getClass().getName()); 					WebSocketConfig.this.logger.info(""Headers: "" + message.getHeaders().toString()); 					WebSocketConfig.this.logger.info(""Payload: "" + String.valueOf(message.getPayload())); 					/*Security checks for current user remove*/ 				} catch (Exception e) { 					WebSocketConfig.this.logger.error(""Error checking permissions"", 													  e); 				} 				return message; 			} 		}); 	}  	@Override 	public void configureClientOutboundChannel(ChannelRegistration registration) { 		registration.setInterceptors(new ChannelInterceptor() {  			@Override 			public Message postReceive(Message message, 										  MessageChannel channel) { 				WebSocketConfig.this.logger.info(""Post-receive on channel of type: "" + channel.getClass().getName()); 				WebSocketConfig.this.logger.info(""Headers: "" + message.getHeaders().toString()); 				WebSocketConfig.this.logger.info(""Payload: "" + String.valueOf(message.getPayload())); 				return message; 			}  			@Override 			public void postSend(Message message, 								 MessageChannel channel, 								 boolean sent) { 				WebSocketConfig.this.logger.info(""Post-send on channel of type: "" + channel.getClass().getName()); 				WebSocketConfig.this.logger.info(""Headers: "" + message.getHeaders().toString()); 				WebSocketConfig.this.logger.info(""Payload: "" + String.valueOf(message.getPayload())); 			}  			@Override 			public boolean preReceive(MessageChannel channel) { 				WebSocketConfig.this.logger.info(""Pre-receive on channel of type: "" + channel.getClass().getName()); 				return true; 			}  			@Override 			public Message preSend(Message message, 									  MessageChannel channel) { 				WebSocketConfig.this.logger.info(""Pre-send on channel of type: "" + channel.getClass().getName()); 				WebSocketConfig.this.logger.info(""Headers: "" + message.getHeaders().toString()); 				WebSocketConfig.this.logger.info(""Payload: "" + String.valueOf(message.getPayload())); 				return message; 			} 		}); 	}  	@Override 	public void configureMessageBroker(MessageBrokerRegistry registry) { 		registry.enableStompBrokerRelay(""/topic/"", 										""/queue/""); 		registry.setApplicationDestinationPrefixes(""/app""); 	}  	@Override 	public void configureTasks(ScheduledTaskRegistrar taskRegistrar) { 		taskRegistrar.setScheduler(this.scheduler); 	}  	@Override 	public void registerStompEndpoints(StompEndpointRegistry registry) { 		registry.addEndpoint(""/subscriptions"").withSockJS(); 	}  	@PersistenceContext 	public void setEntityManager(EntityManager em) { 		this.em = em; 	}  	@Autowired 	@Qualifier(""messageBrokerSockJsTaskScheduler"") 	public void setScheduler(ThreadPoolTaskScheduler scheduler) { 		this.scheduler = scheduler; 	} } ```  ```java @Configuration @EnableWebMvc public class WebConfig extends WebMvcConfigurerAdapter {  	@Override 	public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) { 		configurer.enable(); 	} } ```  Could it somehow be opening connections for non-websocket connections?  Do I have a mis-configuration?  It works fine except for the memory leak.  I've attached a screenshot from MAT from a memory dump of my webapp.   ---  **Affects:** 4.0 GA, 4.0.2  **Attachments:** - [memoryleak.png](https://jira.spring.io/secure/attachment/21810/memoryleak.png) (_31.48 kB_) - [memoryleak2.png](https://jira.spring.io/secure/attachment/21814/memoryleak2.png) (_31.35 kB_)","closed","type: bug,","spring-projects-issues","2014-03-08T20:10:46Z","2019-01-11T21:38:02Z"
"","15863","Spring4 MVC Unit test does not compile [SPR-11238]","**[Kent Yeh](https://jira.spring.io/secure/ViewProfile.jspa?name=kent.yeh)** opened **[SPR-11238](https://jira.spring.io/browse/SPR-11238?redirect=false)** and commented  I have same problem when I running under jdk 1.6.0_33 with error  ``` [INFO] ------------------------------------------------------------- [WARNING] COMPILATION WARNING :  [INFO] ------------------------------------------------------------- [WARNING] /mavenrepository/org/springframework/spring-context/4.0.0.RELEASE/spring-context-4.0.0.RELEASE.jar!org/springframework/scheduling/annotation/Scheduled.class: org/springframework/scheduling/annotation/Scheduled.class(org/springframework/scheduling/annotation:Scheduled.class): warning: Cannot find annotation method 'value()' in type 'java.lang.annotation.Repeatable': class file for java.lang.annotation.Repeatable not found [ERROR] COMPILATION ERROR :  [INFO] ------------------------------------------------------------- [ERROR] /ttsrc/git/kmlgen/src/test/java/kml/controller/TestDefaultController.java:[81,42] incompatible types; inferred type argument(s) java.lang.Object do not conform to bounds of type variable(s) B found   : org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder required: java.lang.Object ```  ---  **Affects:** 4.0 GA  **Reference URL:** http://stackoverflow.com/questions/20574894/spring4-mvc-unit-test-does-not-compile  **Attachments:** - [test4spring4.zip](https://jira.spring.io/secure/attachment/21552/test4spring4.zip) (_46.87 kB_)  **Issue Links:** - #15907 MVC Test: compile issue when using MockMvcBuilders.webAppContextSetup(...).build() (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2e4f38f6af49637f2ff5f651944aef35a049c60a  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2013-12-16T23:35:02Z","2019-01-11T18:26:22Z"
"","16183","Boot / JPA not mixin' [SPR-11559]","**[Ken Kruger](https://jira.spring.io/secure/ViewProfile.jspa?name=kkrueger)** opened **[SPR-11559](https://jira.spring.io/browse/SPR-11559?redirect=false)** and commented  Using STS 3.4, New Spring Starter Project, selecting JPA only.  running mvn clean package results in:   contextLoads(demo.ApplicationTests)  Time elapsed: 1.177 sec","closed","status: invalid,","spring-projects-issues","2014-03-14T15:52:19Z","2019-01-12T05:26:09Z"
"","15907","MVC Test: compile issue when using MockMvcBuilders.webAppContextSetup(...).build() [SPR-11283]","**[Ken Kruger](https://jira.spring.io/secure/ViewProfile.jspa?name=kkrueger)** opened **[SPR-11283](https://jira.spring.io/browse/SPR-11283?redirect=false)** and commented  I ran into the same issue as described in the referenced Stack Overflow discussion.  When converting from Spring 3.2.x to 4.0.0, the following code results in a javac compile error:      mockMvc = MockMvcBuilders.webAppContextSetup(context).build();  Interestingly, the Eclipse compiler has no problem with this code, it only fails during a Maven build (which uses javac).  The error encountered was:  [ERROR] /Users/kkrueger/git/Delta-Spring/target/springsource/parentDeltaCoreSpring/rewards/src/main/java/rewardsonline/accounts/test/AbstractAccountControllerIntegrationTests.java:[64,52] incompatible types; inferred type argument(s) java.lang.Object do not conform to bounds of type variable(s) B found   : \org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder\ required: java.lang.Object  I found a (somewhat) interesting thread about compiler differences here:  http://stackoverflow.com/questions/3000177/compilers-behave-differently-with-a-null-parameter-of-a-generic-method  The following code resolved the issue:      mockMvc = MockMvcBuilders. webAppContextSetup(context).build();  However, this does not match what is described in the reference guide at:  http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#spring-mvc-test-framework.  So we should either address the generic issue or revise the documentation.  ---  **Affects:** 4.0 GA  **Reference URL:** http://stackoverflow.com/questions/20574894/spring4-mvc-unit-test-does-not-compile  **Issue Links:** - #15863 Spring4 MVC Unit test does not compile (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2014-01-03T13:07:39Z","2019-01-12T16:46:42Z"
"","15881","Add explanation of @Profile(""default"") to reference documentation  [SPR-11256]","**[Ken Kruger](https://jira.spring.io/secure/ViewProfile.jspa?name=kkrueger)** opened **[SPR-11256](https://jira.spring.io/browse/SPR-11256?redirect=false)** and commented  Some time back a really useful feature was added: default profiles.  However, this information was never added to the reference documentation.  Recommend we add a paragraph to http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#testcontext-ctx-management-env-profiles to describe this.  Suggested wording:  ""It is sometimes useful to assign beans to a 'default' profile.  Beans within the default profile are only included when no other profile is specifically activated.  This can be used to define 'fallback' beans to be used in the application's default state.  For example, you may explicitly provide a dataSource for 'QA' and 'production' profiles, but define an in-memory datastore as a default when neither of these are specified.""  ---  **Affects:** 4.0 GA  **Issue Links:** - #13919 Add ability to specify whether a bean profile is active by default (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ee89a3021c103d9c5d1b81460fe5d72fedf6f1c, https://github.com/spring-projects/spring-framework/commit/c9044151f5eb63f4d2bcc5a552c66ebb286a603c","closed","type: documentation,","spring-projects-issues","2013-12-27T12:19:27Z","2019-01-11T18:24:32Z"
"","15717","ClassPathScanningCandidateComponentProvider.findCandidateComponents fails on private meta-attributes [SPR-11091]","**[Keli Hlodversson](https://jira.spring.io/secure/ViewProfile.jspa?name=kelihlodversson)** opened **[SPR-11091](https://jira.spring.io/browse/SPR-11091?redirect=false)** and commented  If a member of a component candidate is annotated with an attribute, that again is annotated with a privately scoped meta-attribute containing values, the scanning will fail with an Illegal state exception caused by an IllegalAccessException caught in  org.springframework.core.annotation.AnnotationUtils.getAnnotationAttributes.  An example where this happens if one uses the rest.li framework in connection with spring:  ``` public class RestMethod {   /**    *  This annotation defines mapping of RestMethod annotations to {@link com.linkedin.restli.common.ResourceMethod}    */   @Retention(RetentionPolicy.RUNTIME)   @Target(ElementType.ANNOTATION_TYPE)   private static @interface ToResourceMethod {     ResourceMethod value();   }    ...    @Retention(RetentionPolicy.RUNTIME)   @Target(ElementType.METHOD)   @ToResourceMethod(ResourceMethod.GET)   public @interface Get  { }    ... } ```  ``` @Component .... public class MyComponent extends SomeRestliBaseClass {     @RestMethods.Get // Adding this attribute causes the stack trace below    public ARecord get (String id) {        ....    } }  ```  ``` org.springframework.beans.factory.BeanDefinitionStoreException: Failed to read candidate component class: file […]; nested exception is java.lang.IllegalStateException: Could not obtain annotation attribute values 	at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:290) 	at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:242) 	at org.springframework.context.annotation.ComponentScanBeanDefinitionParser.parse(ComponentScanBeanDefinitionParser.java:84) 	at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:73) 	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1438) 	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1428) 	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:185) 	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:139) 	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:108) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180) 	at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:125) 	at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:94) 	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:130) 	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:537) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:451) 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:389) 	… Caused by:  java.lang.IllegalStateException: Could not obtain annotation attribute values 	at org.springframework.core.annotation.AnnotationUtils.getAnnotationAttributes(AnnotationUtils.java:432) 	at org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor.registerMetaAnnotations(AnnotationAttributesReadingVisitor.java:250) 	at org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor.doVisitEnd(AnnotationAttributesReadingVisitor.java:241) 	at org.springframework.core.type.classreading.RecursiveAnnotationAttributesVisitor.visitEnd(AnnotationAttributesReadingVisitor.java:167) 	at org.springframework.asm.ClassReader.a(Unknown Source) 	at org.springframework.asm.ClassReader.accept(Unknown Source) 	at org.springframework.asm.ClassReader.accept(Unknown Source) 	at org.springframework.core.type.classreading.SimpleMetadataReader.(SimpleMetadataReader.java:64) 	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:80) 	at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:102) 	at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:266) 	at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:242) 	at org.springframework.context.annotation.ComponentScanBeanDefinitionParser.parse(ComponentScanBeanDefinitionParser.java:84) 	… Caused by:  java.lang.IllegalAccessException: Class org.springframework.core.annotation.AnnotationUtils can not access a member of class com.linkedin.restli.server.annotations.RestMethod$ToResourceMethod with modifiers ""public abstract"" 	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:105) 	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:261) 	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:253) 	at java.lang.reflect.Method.invoke(Method.java:599) 	at org.springframework.core.annotation.AnnotationUtils.getAnnotationAttributes(AnnotationUtils.java:400) 	… ```  ---  **Affects:** 3.2.5  **Issue Links:** - #18829 Meta-`@Conditional` lookup does not work consistently with ASM  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)","closed","in: core,","spring-projects-issues","2013-11-13T16:23:17Z","2019-01-13T06:57:28Z"
"","15976","Provide alternative RestTemplate constructor to avoid default MessageConverter creation [SPR-11351]","**[Kek](https://jira.spring.io/secure/ViewProfile.jspa?name=kek)** opened **[SPR-11351](https://jira.spring.io/browse/SPR-11351?redirect=false)** and commented  The default MessageConverters are initialized in constructor of RestTemplate. This solution has some problems: 1) When I want different set of MessageConverters, the default MessageConverters are initialized first and than replaced by setMessageConverters(..) method.  This slows down the application startup.  2) When I have some classes as JAXB, Jackson on classpath, than some other default converters are initialized too (but I don't use these technologies (JAXB, Jackson) with RestTempate) - this slows down the startup, so I want to specify my ""limited"" set of Converters - but is the same problem as 1).  3) When I have 2 WAR applications in Tomcat, and one application sets the System property ""javax.xml.transform.TransformerFactory"" for Xalan XSLTC, and the second application does not have Xalan on classpath and does not use the XSLT,but instantiates RestTemplate for JSON based communication, than Exception is thrown:  ```java Caused by: javax.xml.transform.TransformerFactoryConfigurationError: Provider org.apache.xalan.xsltc.trax.TransformerFactoryImpl not found 	at javax.xml.transform.TransformerFactory.newInstance(TransformerFactory.java:107) 	at org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter.(AbstractXmlHttpMessageConverter.java:47) 	at org.springframework.http.converter.xml.SourceHttpMessageConverter.(SourceHttpMessageConverter.java:47) 	at org.springframework.web.client.RestTemplate.(RestTemplate.java:154) ```  I don´t want to initialize any default XML message Converter for RestTemplate, because I use only JSON for communication  -> I want to configure my own set of MessageConverters, but the constructor is called first and destroyed by the exception.  So please, move the initialization of default MessageConvertors for RestTemplate from constructor to some `@PostConstruct` method, and initialize these default converters only in situations, when the Array of converters was not set (preinitialized) by setMessageConventers(...) operation from configuration.  ---  **Affects:** 3.2.4, 4.0 GA  **Issue Links:** - #16578 Backward compatibility issue in RestTemplate's messageConverters after SPR-11351  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1cb9b9cf526f5e02202f37ce4d43aee626659c0f, https://github.com/spring-projects/spring-framework/commit/425e5a066e3769cc304ce6cd34971a6c38b9a4bb  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)  0 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2014-01-23T00:36:15Z","2019-01-11T18:40:25Z"
"","15865","HibernateJpaVendorAdapter causes Hibernate 4.3 to produce deprecation warnings [SPR-11240]","**[Keir Lawson](https://jira.spring.io/secure/ViewProfile.jspa?name=keirlawson)** opened **[SPR-11240](https://jira.spring.io/browse/SPR-11240?redirect=false)** and commented  When running my application using Hibernate 4.3 to provide JPA 2.1 I get the following error owing to HibernateJpaVendorAdapter using deprecated Hibernate classes:  [10:50:44 WARN ]HHH015016: Encountered a deprecated javax.persistence.spi.PersistenceProvider [org.hibernate.ejb.HibernatePersistence]; use [org.hibernate.jpa.HibernatePersistenceProvider] instead. (org.hibernate.ejb.HibernatePersistence)  ---  **Affects:** 4.0 GA  **Issue Links:** - #15983 HibernateJpaVendorAdapter should use new interface when on Hibernate 4.3 (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/479d073f1b5203deed7a218fa5046eca50debcd7  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-12-17T03:02:05Z","2019-01-11T18:24:44Z"
"","15700","Servlet 3 multipart parameter binding does not work on Weblogic12c (12.1.2.0) [SPR-11074]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazukishimizu)** opened **[SPR-11074](https://jira.spring.io/browse/SPR-11074?redirect=false)** and commented  #### [Execution Conditions]  * Weblogic Server 12c(12.1.2.0) * Using Upload functionality of Servlet 3 specification * Form data(upload file & other item) is bound to form object(form backing bean).  #### [Execution Result]  Upload file(MultipartFile) is bound to Form object, but other item is not bound to Form object.  h4.[Example code(overview)]  ###### [jsp]  ```                  Confirm    ```  ###### [web.xml]  ```      appServlet     org.springframework.web.servlet.DispatcherServlet              contextConfigLocation         classpath*:META-INF/spring/spring-mvc.xml          1            ```  ###### [weblogic.xml]  ```      true  ```  ###### [spring-mvc.xml]  ```  ```  ###### [Form object]  ``` public class FileUploadForm implements Serializable {     private MultipartFile file;     private String description;     // omitted } ```  ###### [Controller]  ``` @RequestMapping(method = RequestMethod.POST, params = ""confirmAndUpload"") public String confirmAndUpload(FileUploadForm form) {     // omitted } ```  h4.[Detail example code] Please see following page.  [jsp] * https://github.com/kazuki43zoo/terasoluna-gfw-web-examples/blob/master/src/main/webapp/WEB-INF/views/upload/uploadForm.jsp  [controller] * https://github.com/kazuki43zoo/terasoluna-gfw-web-examples/blob/master/src/main/java/org/terasoluna/gfw/examples/upload/app/FileUploadScreenFlowController.java  h4.Other information  * Tomcat7 & Resin4.0 is succeed by the same source code.  ---  **Affects:** 3.2.4  **Issue Links:** - #16352 StandardServletMultipartResolver should support lazy resolution along the lines of CommonsMultipartResolver  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2013-11-06T09:57:21Z","2019-01-11T19:23:29Z"
"","16293","Lock error is not translated to PessimisticLockingFailureException or subclass when using JPA (Hibernate) [SPR-11670]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-11670](https://jira.spring.io/browse/SPR-11670?redirect=false)** and commented  **Environment**  - JAP( Hibernate 4.2.3.Final ) - Spring Data JPA 1.4.3.RELEASE - H2 Database 1.3.172 (In memory mode) - Java 1.7.0_51 - Tomcat 7.0.47  org.springframework.orm.hibernate3.HibernateJdbcException is occurred when lock error. I think that should be thrown PessimisticLockingFailureException or sub class.  How do  think?  **Source Code**  ```java  public interface MemberRepository extends JpaRepository {     @Lock(LockModeType.PESSIMISTIC_WRITE)     Member findOne(String id); } ```  **Stack Trace**  ``` date:2014-04-08 04:38:48	thread:tomcat-http--6	X-Track:c72a86f9f77d42e38f56d3d241a032d8	level:ERROR	logger:o.t.gfw.common.exception.ExceptionLogger        	message:[e.ex.fw.9001] JDBC exception on Hibernate data access: SQLException for SQL [n/a]; SQL state [HYT00]; error code [50200]; could not extract ResultSet; nested exception is org.hibernate.PessimisticLockException: could not extract ResultSet org.springframework.orm.hibernate3.HibernateJdbcException: JDBC exception on Hibernate data access: SQLException for SQL [n/a]; SQL state [HYT00]; error code [50200]; could not extract ResultSet; nested exception is org.hibernate.PessimisticLockException: could not extract ResultSet 	at org.springframework.orm.hibernate3.SessionFactoryUtils.convertHibernateAccessException(SessionFactoryUtils.java:651) ~[spring-orm-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:106) ~[spring-orm-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:403) ~[spring-orm-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:58) ~[spring-tx-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213) ~[spring-tx-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:163) ~[spring-tx-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) ~[spring-aop-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.data.jpa.repository.support.LockModeRepositoryPostProcessor$LockModePopulatingMethodIntercceptor.invoke(LockModeRepositoryPostProcessor.java:92) ~[spring-data-jpa-1.4.3.RELEASE.jar:na] 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) ~[spring-aop-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:91) ~[spring-aop-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) ~[spring-aop-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) ~[spring-aop-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at com.sun.proxy.$Proxy86.findOne(Unknown Source) ~[na:na] 	at org.terasoluna.gfw.examples.rest.domain.service.MemberServiceImpl.getMember(MemberServiceImpl.java:32) ~[MemberServiceImpl.class:na] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_51] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_51] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_51] 	at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_51] 	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317) ~[spring-aop-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183) ~[spring-aop-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150) ~[spring-aop-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.terasoluna.gfw.common.exception.ResultMessagesLoggingInterceptor.invoke(ResultMessagesLoggingInterceptor.java:100) ~[terasoluna-gfw-common-1.1.0-SNAPSHOT.jar:na] 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:161) ~[spring-aop-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:96) ~[spring-tx-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:260) ~[spring-tx-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:94) ~[spring-tx-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) ~[spring-aop-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:91) ~[spring-aop-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) ~[spring-aop-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) ~[spring-aop-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at com.sun.proxy.$Proxy91.getMember(Unknown Source) ~[na:na] 	at org.terasoluna.gfw.examples.rest.api.members.MembersRestController.getMember(MembersRestController.java:110) ~[MembersRestController.class:na] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_51] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_51] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_51] 	at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_51] 	at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:215) ~[spring-web-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132) ~[spring-web-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) ~[spring-webmvc-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745) ~[spring-webmvc-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686) ~[spring-webmvc-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80) ~[spring-webmvc-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925) [spring-webmvc-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) [spring-webmvc-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:953) [spring-webmvc-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:844) [spring-webmvc-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) [servlet-api.jar:na] 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:829) [spring-webmvc-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) [servlet-api.jar:na] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) [catalina.jar:7.0.47.A] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [catalina.jar:7.0.47.A] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.terasoluna.gfw.web.logging.mdc.AbstractMDCPutFilter.doFilterInternal(AbstractMDCPutFilter.java:115) [terasoluna-gfw-web-1.1.0-SNAPSHOT.jar:na] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:150) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:91) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:183) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) [spring-security-web-3.1.4.RELEASE.jar:3.1.4.RELEASE] 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:343) [spring-web-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:260) [spring-web-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) [catalina.jar:7.0.47.A] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [catalina.jar:7.0.47.A] 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) [spring-web-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) [catalina.jar:7.0.47.A] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [catalina.jar:7.0.47.A] 	at org.terasoluna.gfw.web.logging.mdc.AbstractMDCPutFilter.doFilterInternal(AbstractMDCPutFilter.java:115) [terasoluna-gfw-web-1.1.0-SNAPSHOT.jar:na] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) [catalina.jar:7.0.47.A] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [catalina.jar:7.0.47.A] 	at org.terasoluna.gfw.web.exception.ExceptionLoggingFilter.doFilter(ExceptionLoggingFilter.java:105) [terasoluna-gfw-web-1.1.0-SNAPSHOT.jar:na] 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:343) [spring-web-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:260) [spring-web-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) [catalina.jar:7.0.47.A] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [catalina.jar:7.0.47.A] 	at org.terasoluna.gfw.web.logging.mdc.MDCClearFilter.doFilterInternal(MDCClearFilter.java:50) [terasoluna-gfw-web-1.1.0-SNAPSHOT.jar:na] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) [catalina.jar:7.0.47.A] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [catalina.jar:7.0.47.A] 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222) [catalina.jar:7.0.47.A] 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123) [catalina.jar:7.0.47.A] 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) [catalina.jar:7.0.47.A] 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171) [catalina.jar:7.0.47.A] 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100) [catalina.jar:7.0.47.A] 	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953) [catalina.jar:7.0.47.A] 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) [catalina.jar:7.0.47.A] 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408) [catalina.jar:7.0.47.A] 	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041) [tomcat-coyote.jar:7.0.47.A] 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:603) [tomcat-coyote.jar:7.0.47.A] 	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310) [tomcat-coyote.jar:7.0.47.A] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_51] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_51] 	at java.lang.Thread.run(Thread.java:744) [na:1.7.0_51] Caused by: org.hibernate.PessimisticLockException: could not extract ResultSet 	at org.hibernate.dialect.H2Dialect$2.convert(H2Dialect.java:314) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:49) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:125) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:110) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:61) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.loader.Loader.getResultSet(Loader.java:2040) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1837) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1816) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.loader.Loader.doQuery(Loader.java:900) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:342) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:312) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.loader.Loader.loadEntity(Loader.java:2121) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:82) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:72) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:3927) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.event.internal.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:460) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:429) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:206) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.event.internal.DefaultLoadEventListener.lockAndLoad(DefaultLoadEventListener.java:372) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:153) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.internal.SessionImpl.fireLoad(SessionImpl.java:1092) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.internal.SessionImpl.access$2000(SessionImpl.java:175) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.load(SessionImpl.java:2469) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.internal.SessionImpl.get(SessionImpl.java:1047) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.ejb.AbstractEntityManagerImpl.find(AbstractEntityManagerImpl.java:801) ~[hibernate-entitymanager-4.2.3.Final.jar:4.2.3.Final] 	at org.hibernate.ejb.AbstractEntityManagerImpl.find(AbstractEntityManagerImpl.java:790) ~[hibernate-entitymanager-4.2.3.Final.jar:4.2.3.Final] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_51] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_51] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_51] 	at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_51] 	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:366) ~[spring-orm-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at com.sun.proxy.$Proxy79.find(Unknown Source) ~[na:na] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_51] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_51] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_51] 	at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_51] 	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:241) ~[spring-orm-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at com.sun.proxy.$Proxy79.find(Unknown Source) ~[na:na] 	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findOne(SimpleJpaRepository.java:212) ~[spring-data-jpa-1.4.3.RELEASE.jar:na] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_51] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_51] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_51] 	at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_51] 	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:358) ~[spring-data-commons-1.6.4.RELEASE.jar:na] 	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:343) ~[spring-data-commons-1.6.4.RELEASE.jar:na] 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) ~[spring-aop-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:96) ~[spring-tx-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:260) ~[spring-tx-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:94) ~[spring-tx-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) ~[spring-aop-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:155) ~[spring-tx-3.2.8.RELEASE.jar:3.2.8.RELEASE] 	... 105 common frames omitted Caused by: org.h2.jdbc.JdbcSQLException: Timeout trying to lock table ""T_MEMBER""; SQL statement: /* load org.terasoluna.gfw.examples.common.domain.model.Member */ select member0_.member_id as member1_1_0_, member0_.address as address2_1_0_, member0_.email_address as email3_1_0_, member0_.first_name as first4_1_0_, member0_.gender as gender5_1_0_, member0_.last_name as last6_1_0_, member0_.phone_number as phone7_1_0_ from t_member member0_ where member0_.member_id=? for update [50200-172] 	at org.h2.message.DbException.getJdbcSQLException(DbException.java:329) ~[h2-1.3.172.jar:1.3.172] 	at org.h2.message.DbException.get(DbException.java:169) ~[h2-1.3.172.jar:1.3.172] 	at org.h2.message.DbException.get(DbException.java:146) ~[h2-1.3.172.jar:1.3.172] 	at org.h2.table.RegularTable.doLock(RegularTable.java:516) ~[h2-1.3.172.jar:1.3.172] 	at org.h2.table.RegularTable.lock(RegularTable.java:450) ~[h2-1.3.172.jar:1.3.172] 	at org.h2.table.TableFilter.lock(TableFilter.java:145) ~[h2-1.3.172.jar:1.3.172] 	at org.h2.command.dml.Select.queryWithoutCache(Select.java:611) ~[h2-1.3.172.jar:1.3.172] 	at org.h2.command.dml.Query.query(Query.java:314) ~[h2-1.3.172.jar:1.3.172] 	at org.h2.command.dml.Query.query(Query.java:284) ~[h2-1.3.172.jar:1.3.172] 	at org.h2.command.dml.Query.query(Query.java:36) ~[h2-1.3.172.jar:1.3.172] 	at org.h2.command.CommandContainer.query(CommandContainer.java:91) ~[h2-1.3.172.jar:1.3.172] 	at org.h2.command.Command.executeQuery(Command.java:195) ~[h2-1.3.172.jar:1.3.172] 	at org.h2.jdbc.JdbcPreparedStatement.executeQuery(JdbcPreparedStatement.java:106) ~[h2-1.3.172.jar:1.3.172] 	at org.apache.commons.dbcp.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:93) ~[commons-dbcp-1.2.2.patch_DBCP264_DBCP372.jar:1.2.2.patch_DBCP264_DBCP372] 	at net.sf.log4jdbc.PreparedStatementSpy.executeQuery(PreparedStatementSpy.java:735) ~[log4jdbc-remix-0.2.7.jar:na] 	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:56) ~[hibernate-core-4.2.3.Final.jar:4.2.3.Final] 	... 151 common frames omitted ```  ---  **Affects:** 3.2.8  **Issue Links:** - #15441 Untranslated Hibernate exception - #16292 Duplicate key violation gets translated to DataIntegrityViolationException instead of DuplicateKeyException when using JPA (Hibernate)","closed","type: enhancement,","spring-projects-issues","2014-04-07T12:53:50Z","2019-01-11T21:02:23Z"
"","16292","Duplicate key violation gets translated to DataIntegrityViolationException instead of DuplicateKeyException when using JPA (Hibernate) [SPR-11669]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-11669](https://jira.spring.io/browse/SPR-11669?redirect=false)** and commented  **Environment**  - JAP( Hibernate 4.2.3.Final ) - Spring Data JPA 1.4.3.RELEASE - H2 Database 1.3.172 (In memory mode) - Java 1.7.0_51 - Tomcat 7.0.47  DataIntegrityViolationException is occurred when violate a primary key or unique key constraint. This behavior is specification ? I think that should be thrown DuplicateKeyException.  When using JDBC(Mybatis3), occurred a DuplicateKeyException.  How do  think?  ---  **Affects:** 3.2.8  **Issue Links:** - #16293 Lock error is not translated to PessimisticLockingFailureException or subclass when using JPA (Hibernate)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/9a6d4549bee40884df6d8622d327d160c0902dc0, https://github.com/spring-projects/spring-framework-issues/commit/d50e4b884c5ab4cedb497c13fd3b2d518a89df7d  2 votes, 9 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-04-07T12:04:25Z","2019-01-12T00:20:26Z"
"","15825","Error while using HttpComponentsStreamingClientHttpRequest [SPR-11199]","**[Kaustubh Keshav](https://jira.spring.io/secure/ViewProfile.jspa?name=theksquare)** opened **[SPR-11199](https://jira.spring.io/browse/SPR-11199?redirect=false)** and commented  I was testing and trying to use the streaming http request via the http components. But I get the below error.  Sample code I used for initialization -  ```java RestTemplate restTemplate = new RestTemplate(); HttpComponentsClientHttpRequestFactory aConnFactory = new HttpComponentsClientHttpRequestFactory();         aConnFactory.setHttpClient(HttpClientBuilder.create().disableAutomaticRetries().setMaxConnTotal(10).setMaxConnPerRoute(3).build());         aConnFactory.setBufferRequestBody(false);          restTemplate.setRequestFactory(aConnFactory);         List>();          MappingJackson2HttpMessageConverter aConverter = new MappingJackson2HttpMessageConverter(); FormHttpMessageConverter aHttpMessageConverter = new FormHttpMessageConverter(); messageConverters.add(aConverter);         messageConverters.add(aHttpMessageConverter); restTemplate.setMessageConverters(messageConverters); ```  Error -  ``` 'getBody not supported when bufferRequestBody is false' 	at org.springframework.http.client.HttpComponentsStreamingClientHttpRequest.getBodyInternal(HttpComponentsStreamingClientHttpRequest.java:85) 	at org.springframework.http.client.AbstractClientHttpRequest.getBody(AbstractClientHttpRequest.java:46) 	at org.springframework.http.converter.FormHttpMessageConverter.writeMultipart(FormHttpMessageConverter.java:264) 	at org.springframework.http.converter.FormHttpMessageConverter.write(FormHttpMessageConverter.java:204) 	at org.springframework.http.converter.FormHttpMessageConverter.write(FormHttpMessageConverter.java:72) 	at org.springframework.web.client.RestTemplate$HttpEntityRequestCallback.doWithRequest(RestTemplate.java:739) 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:525) 	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:504) 	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:360) ```  ---  **Affects:** 4.0 RC2  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/312  **Issue Links:** - #17312 All HttpMessageConverters should support StreamingHttpOutputMessage (_**""duplicates""**_)  2 votes, 4 watchers","closed","in: web,","spring-projects-issues","2013-12-09T17:13:44Z","2019-01-12T16:46:44Z"
"","15671","MockHttpServletRequestBuilder not handling parameter without value [SPR-11043]","**[Karel Kremer](https://jira.spring.io/secure/ViewProfile.jspa?name=karel.kremer)** opened **[SPR-11043](https://jira.spring.io/browse/SPR-11043?redirect=false)** and commented  I am using Spring MVC and I have created a unit test for it. However, I ran into a bug in the testing framework.  When running:  ```java [...] private WebApplicationContext wac; private MockMvc mockMvc;  @Before public void setup() {      this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build(); } [...] @Test [...] this.mockMvc.perform(get(""/register?search"")                     .accept(MediaType.APPLICATION_JSON))                     .andExpect(status().isOk())                     .andExpect(jsonPath(""$.value"").value(""foobar"")); ```  I get the following Exception and the test fails:  java.lang.IllegalArgumentException: 'source' must not be null at org.springframework.util.Assert.notNull(Assert.java:112) at org.springframework.web.util.UriUtils.decode(UriUtils.java:351) at **org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.buildRequest(MockHttpServletRequestBuilder.java:584)** at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:127) at controller.TestSearch.simpleSearchNoValue(TestSearch.java:72) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74) at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83) at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174) at org.junit.runner.JUnitCore.run(JUnitCore.java:157) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63)  When I change the contents of the test to:  ```java this.mockMvc.perform(get(""/register?search="")                     .accept(MediaType.APPLICATION_JSON))                     .andExpect(status().isOk())                     .andExpect(jsonPath(""$.value"").value(""foobar"")); ```  The problem goes away.  I have marked the line where things go wrong in the stack trace above. Here is the line again: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.buildRequest(MockHttpServletRequestBuilder.java:584)   ---  **Affects:** 3.2.4, 3.2.5","closed","type: bug,","spring-projects-issues","2013-10-30T01:29:19Z","2013-11-06T22:51:34Z"
"","16299","UrlResource.exists() does not properly detect JBoss vfszip resources [SPR-11676]","**[Kamil Podlešák](https://jira.spring.io/secure/ViewProfile.jspa?name=podlesh)** opened **[SPR-11676](https://jira.spring.io/browse/SPR-11676?redirect=false)** and commented  Method org.springframework.core.io.AbstractFileResolvingResource#exists treats jboss vfs URLs (protocol starting with ""vfs"") as files: it calls getFile().exists(). There is no fallback.  Unfortunately, vfszip:// resources (files inside JAR files) do not support getFile() and throw exception (see org.springframework.core.io.VfsUtils#getFile the ""is nested"" if command).  One obvious fix would be to provide fallback (that is, if getFile() throws an exception, it continues by handling the URL). At this moment, the only solution is to not use exists(), but this workaround code instead:  ``` Resource res = ldr.getResource(locator); boolean exists = false; try {     //!!HACK!!     // Jboss vfzip:// does not support  exists() method     // so we'll just try opening it and handle exception     res.getInputStream().close();     exists = true; } catch (IOException e) {     log.info(this, ""cannot open meta.xml"", e); } if (!exists) { ```  Apparently, this is probably also root cause of [SEC-1700](https://jira.spring.io/browse/SEC-1700)  ---  **Affects:** 3.2.8, 4.0.3  **Issue Links:** - #16506 Spring 3.2.9 breaks JBoss EAP 5.1.1 VFS compatibility  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","in: core,","spring-projects-issues","2014-04-08T06:07:36Z","2019-01-11T21:02:38Z"
"","16352","StandardServletMultipartResolver should support lazy resolution along the lines of CommonsMultipartResolver [SPR-11730]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11730](https://jira.spring.io/browse/SPR-11730?redirect=false)** and commented  Lazy multipart resolution in particular allows for multipart exception handling within a handler method.  ---  **Issue Links:** - #15700 Servlet 3 multipart parameter binding does not work on Weblogic12c (12.1.2.0) - #16338 Skip multipart checking so that multipart errors can be handled in an `@Controller` method using Servlet 3  - #16431 StandardServletMultipartResolver#resolveLazily does not consistently convert parsing exceptions to MultipartException  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-04-23T13:50:38Z","2019-01-13T06:54:20Z"
"","16326","Automated tests against Hibernate ORM 4.3 and Hibernate Validator 5 [SPR-11704]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11704](https://jira.spring.io/browse/SPR-11704?redirect=false)** and commented  As of Spring Framework 4.0, we're explicitly supporting the JPA 2.1 based Hibernate ORM 4.3 and BV 1.1 based Hibernate Validator 5.0 next to our JPA 2.0 / BV 1.0 baseline versions. We can't test those as part of our regular spring-context / spring-orm tests as long as we're on a JPA 2.0 / BV 1.0 baseline; however, we can test them in a separate build module, and our existing spring-orm-hibernate4 seems to be well-suited for that.  So let's upgrade spring-orm-hibernate4 to Hibernate 4.3.5 and add a copy of our validation.beanvalidation test classes to a validation.hibernatevalidator5 package there, to be run against Hibernate Validator 5.1.0 in that module.   ---  **Affects:** 4.0 GA","closed","type: task,","spring-projects-issues","2014-04-17T07:13:24Z","2014-07-18T10:16:45Z"
"","16321","Default use of target 1.8 for Spring test compilation [SPR-11699]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11699](https://jira.spring.io/browse/SPR-11699?redirect=false)** and commented  As of Spring Framework 4.1, we should compile our tests with 1.8 source and target level by default, with spring-oxm as the only exception (because of JiBX). This goes along nicely with the AspectJ 1.8 upgrade (#15837), and even requires it to some degree (target 1.8 for the spring-aspects module only works with AspectJ 1.8.0.RC3 or later).  ---  **Issue Links:** - #15837 Upgrade AspectJ dependency to 1.8 final and apply latest ASM 5.0.2 patches  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/95b1cb71730cbc8bafd3d2a0bff1df4a4a06f278, https://github.com/spring-projects/spring-framework/commit/7bc2168aa746215fa5c43ccaaaad68ce9d66c73c","closed","type: task,","spring-projects-issues","2014-04-16T03:28:37Z","2019-01-11T21:01:07Z"
"","16316","Support for Hibernate ORM 5.0 [SPR-11694]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11694](https://jira.spring.io/browse/SPR-11694?redirect=false)** and commented  Hibernate 5.0 is in beta as of April 2015. Let's track Hibernate 5.0 for support in Spring Framework 4.2 - in a separate ""orm.hibernate5"" package, as usual.  ---  **Issue Links:** - #14888 Ensure compatibility with Hibernate 4.2 - #15465 Compatibility problems with Hibernate 4.3.0.Beta1 and newer - #15538 Propagate LCEMFB.packagesToScan to native PersistenceProvider to pick up annotated packages - #17594 Compatibility with Hibernate ORM 5.0 GA - #17679 Upgrade to Hibernate ORM 5.0 RC1 and Hibernate Validator 5.2 RC1 - #17821 Deprecate Hibernate 3 support - #18060 Upgrade to JPA 2.1+ and Bean Validation 1.1+  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/94f9a0b03a2335d7ccc021c7c33b8b32e01d83ed, https://github.com/spring-projects/spring-framework/commit/f9c391034161a2fc795033958d68820ca2e1ed93, https://github.com/spring-projects/spring-framework/commit/cf0a91679336bdc195aec5aa1688e82beaaa9a86  0 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2014-04-14T16:05:52Z","2019-01-11T21:00:54Z"
"","16269","MarshallingView should avoid temporary byte array when copying to response [SPR-11646]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11646](https://jira.spring.io/browse/SPR-11646?redirect=false)** and commented  MarshallingView's current code:  ``` StreamUtils.copy(baos.toByteArray(), response.getOutputStream()); ```  can be optimized to:  ``` baos.writeTo(response.getOutputStream()); ```  in order to avoid the temporary copy in a byte array.  ---  **Affects:** 3.2.8, 4.0.3  **Issue Links:** - #16038 MarshallingView should not close response output stream - #16267 ResourceHttpRequestHandler not closing Resource's input stream  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-04-01T12:53:45Z","2019-01-11T21:03:42Z"
"","16263","Upgrade JCache dependency to 1.0 final [SPR-11640]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11640](https://jira.spring.io/browse/SPR-11640?redirect=false)** and commented  After a grand total of 13 years, JCache (JSR-107) is now final... Since we're building against the JCache 1.0 RC1 API still, we need to update to the 1.0 final version for 4.1 and also for 4.0.4.  ---  **Affects:** 4.0 GA  **Issue Links:** - #15837 Upgrade AspectJ dependency to 1.8 final and apply latest ASM 5.0.2 patches - #18150 Compatibility with JCache 1.1","closed","type: task,","spring-projects-issues","2014-03-31T13:40:54Z","2019-01-11T21:05:22Z"
"","16218","ResizableByteArrayOutputStream and ByteArrayOutputStream capacities [SPR-11594]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11594](https://jira.spring.io/browse/SPR-11594?redirect=false)** and commented  As part of the resolution of #12919, we introduced a ResizableByteArrayOutputStream class. For general use, this class should be designed as an actual subclass of ByteArrayOutputStream, just with a higher initial capacity and with its public grow and resize operations.  At the same time, we should revisit all our use of ByteArrayOutputStream and consistenly specify appropriate initial capacities there, analogous to our use of ResizableByteArrayOutputStream. ByteArrayOutputStream's default of 32 bytes would just lead to pointless copying when growing the internal byte array... In almost all cases, 256 or even 1024 is appropriate.  ---  **Affects:** 3.2.8, 4.0.2  **Issue Links:** - #12919 ShallowEtagHeaderFilter should make use of specified content length  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dbd5f67498741f92dbfe2b8dd2b5d5d697a185eb, https://github.com/spring-projects/spring-framework/commit/dd7f54c3c06ba4da673634d9dc3c456fb343cb67  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-03-24T12:27:10Z","2019-01-11T21:32:02Z"
"","16146","Introspect factory method return type for type variable resolution at injection points [SPR-11521]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11521](https://jira.spring.io/browse/SPR-11521?redirect=false)** and commented  In Spring Framework 4.0, we take the factory method return type into account for injection targets (i.e. the right-hand side of an assignment) but not for injection points themselves (i.e. the left-hand side). As a consequence, type variables in `@Autowired` fields or method parameters are not getting resolved if the only place where they are being substituted is the return declaration of the factory method that creates the containing object. See the provided test scenario for #16096 for an example.  We should revisit this for 4.1, introspecting the factory method return type if the containing class itself doesn't substitute the type variable anywhere in its hierarchy.  ---  **Affects:** 4.0.2  **Issue Links:** - #16096 Autowiring unable to find generic dependency in case of nested unresolved type variable - #15303 Inferring an ApplicationListener's event type from a lambda or method reference - #16105 getBeanNamesForType should consider FactoryBean generics for early introspection of config classes as well - #19726 Collection autowiring does not resolve field-level type variable against containing class","open","type: enhancement,","spring-projects-issues","2014-03-06T05:12:57Z","2021-07-26T11:26:22Z"
"","16054","Objects with multi-threaded access should not lazily populate a hash field [SPR-11428]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11428](https://jira.spring.io/browse/SPR-11428?redirect=false)** and commented  MethodParameter, RequestMappingInfo and SimpMessageMappingInfo currently cache a lazily calculated hash value in a regular int field. This should be avoided since instances of those classes can be used as keys in caches with multi-threaded access, exposing an incomplete visibility risk for non-volatile fields.  Instead of going with volatile or synchronized, let's rather not cache those hash values to begin with but rather design simple, cheap enough hashCode() implementations that always calculate on the fly.   ---  **Affects:** 3.2.7, 4.0.1  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","type: bug,","spring-projects-issues","2014-02-14T11:35:18Z","2014-02-18T22:35:57Z"
"","16053","Minor CompositeCacheManager revision [SPR-11427]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11427](https://jira.spring.io/browse/SPR-11427?redirect=false)** and commented  * Clarify CompositeCacheManager's applicability * Add convenience constructor with given delegates * Fix getCacheNames implementation to never return duplicates    ---  **Affects:** 3.2.7, 4.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d7591c6bd7d73e67f1c55fab83d2775b982f404a, https://github.com/spring-projects/spring-framework/commit/d550ffb37f27ae0e9b8abaf6d2b76ddc94c728fc  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-02-13T16:37:44Z","2014-02-18T22:36:00Z"
"","16049","resolveFactoryMethodIfPossible should consider nonPublicAccessAllowed flag and SecurityManager scenario [SPR-11422]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11422](https://jira.spring.io/browse/SPR-11422?redirect=false)** and commented  In contrast to ConstructorResolver's actual factory method invocation algorithm, resolveFactoryMethodIfPossible - as used for annotation and return type introspection on an `@Bean` Method - doesn't consider the nonPublicAccessAllowed flag, and doesn't go the PrivilegedAction route in case of an active SecurityManager either. This should be made consistent.   ---  **Affects:** 3.2.7, 4.0.1  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","type: bug,","spring-projects-issues","2014-02-12T14:39:42Z","2018-07-23T19:41:45Z"
"","16044","MarshallingView should explicitly skip BindingResult when searching for a model object [SPR-11417]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11417](https://jira.spring.io/browse/SPR-11417?redirect=false)** and commented  A couple of custom MarshallingView extensions do the very same thing: They explicitly skip BindingResult when searching for a model object.  http://syspeak.googlecode.com/svn/trunk/SysPeak/apps/MakerEAP/workflow/src/main/java/com/syspeak/modules/spring/web/servlet/view/xml/FilterMarshallingView.java http://my-channel-web.googlecode.com/svn/trunk/my-channel-web/src/com/winxuan/channel/support/view/xml/IgnoreBindingMarshalingView.java http://www.cnblogs.com/hoojo/archive/2011/04/29/2032609.html  There seems to be nothing wrong with doing that out of the box, since it's unlikely that somebody intends to render a BindingResult as XML...   ---  **Affects:** 3.2.7, 4.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6f58491b9c5f7cda19dfbfb24dea9531b8f44eb6, https://github.com/spring-projects/spring-framework/commit/b223e6efecf0c2e4ca1b3f1631ef82e08d1a8710  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-02-11T16:09:29Z","2014-02-18T22:36:01Z"
"","16043","Ignore container callback and marker interfaces for auto-proxy decisions [SPR-11416]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11416](https://jira.spring.io/browse/SPR-11416?redirect=false)** and commented  Spring's auto-proxy creation infrastructure currently switches to a target-class proxy only if it has been explicitly requested or if no interfaces are being implemented at all. We should be smarter here and ignore container callback and marker interfaces for that decision, falling back to a target-class proxy even when BeanFactoryAware, InitializingBean etc are the only interfaces being implemented.  ---  **Affects:** 4.0.1  **Issue Links:** - #14113 Test instances should not be proxied in the TestContext framework - #15905 Improve error reporting for issues related to `@Controller` types requiring AOP proxing  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/949338009bd38ccc3a42baa1b40adde70e3b96e8","closed","type: enhancement,","spring-projects-issues","2014-02-11T09:03:38Z","2019-01-13T06:55:55Z"
"","16040","Consistently avoid close() call on Servlet OutputStream [SPR-11413]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11413](https://jira.spring.io/browse/SPR-11413?redirect=false)** and commented  Next to MarshallingView (#16038), ResourceHttpRequestHandler and ShallowEtagHeaderFilter should not delegate to FileCopyUtils (which calls close() on the OutputStream) but rather to StreamUtils, leaving a chance for outer filters to add to the response still.  ---  **Affects:** 3.2.7, 4.0.1  **Issue Links:** - #16038 MarshallingView should not close response output stream  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/85e336e6dac773f7feba4d5903e423c302e41e9b, https://github.com/spring-projects/spring-framework/commit/5f1592a61a80f584c03196cfcd8d86ded2065696  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-02-10T13:47:39Z","2019-01-11T21:28:16Z"
"","15985","Compatibility with JOpt 4.6 [SPR-11359]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11359](https://jira.spring.io/browse/SPR-11359?redirect=false)** and commented  JOpt 4.6 redeclared its nonOptionArguments() method from List\ to List, requiring us to select String arguments only as we do for regular option values already.   ---  **Affects:** 3.2.6, 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/67e76e9a8d0cb9d1ab6e911be817eeff0a74a0f3, https://github.com/spring-projects/spring-framework/commit/1a2033eb4185deefcf9cd9b719e33384031cb017  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-01-25T14:48:27Z","2014-01-28T13:07:13Z"
"","15981","Revisit need for Introspector.flushFromCaches call in CachedIntrospectionResults [SPR-11356]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11356](https://jira.spring.io/browse/SPR-11356?redirect=false)** and commented  As of JDK 7 and apparently also recent JDK 6 versions, java.beans.Introspector has a proper weak cache for BeanInfo objects. As a consequence, we can probably drop our immediate Introspector.flushFromCaches call in the CachedIntrospectionResults constructor - at least on recent JDKs -, not least of it all to avoid the locking implied by that call.  ---  **Affects:** 4.0 GA  **Issue Links:** - #13653 Improve the performance of BeanInfo lookups in CachedIntrospectionResults - #16438 CachedIntrospectionResults caching jar entries and creating big pressure on GC  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/87179b075be80a454f89d8bb78c962c118efd310, https://github.com/spring-projects/spring-framework/commit/defc1d31574ea6b3faa5ed84c4aa23c808b0c7cf","closed","type: enhancement,","spring-projects-issues","2014-01-24T06:54:05Z","2019-01-11T18:40:54Z"
"","15968","Unnecessary class loading in AspectJ RuntimeTestWalker [SPR-11344]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11344](https://jira.spring.io/browse/SPR-11344?redirect=false)** and commented  Within our AspectJ RuntimeTestWalker, the InstanceOfResidueTestVisitor resolves types via ClassUtils.forName(type.getName()). This can be become quite excessive and is fundamentally unnecessary, since the underlying AspectJ ReferenceType does hold the Class... It's just a bit buried.  The main problem is that a ClassLoader doesn't efficiently resolve classes that it loaded already. As a consequence, it cannot be treated as an efficient cache for class name -> Class. There is quite some lock contention going on there, at least on WebSphere's ClassLoader.  ---  **Affects:** 3.2.6, 4.0 GA  **Issue Links:** - #16124 CompoundClassLoader.loadClass is trying to load some framework class and comsuming all web container threads.  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-01-22T08:25:02Z","2019-01-11T19:00:20Z"
"","15966","ResolvableType tests failing against OpenJDK 8 build 124 [SPR-11342]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11342](https://jira.spring.io/browse/SPR-11342?redirect=false)** and commented  ``` :spring-core:test  org.springframework.core.ResolvableTypeTests > resolveTypeVariableFromMethodParameterTypeWithImplementsType FAILED     java.lang.AssertionError at ResolvableTypeTests.java:754  org.springframework.core.ResolvableTypeTests > classWithGenericsAs FAILED     java.lang.AssertionError at ResolvableTypeTests.java:1125  org.springframework.core.ResolvableTypeTests > forClassWithGenerics FAILED     java.lang.AssertionError at ResolvableTypeTests.java:1119  org.springframework.core.ResolvableTypeTests > resolveFromClassWithGenerics FAILED     java.lang.AssertionError at ResolvableTypeTests.java:872  org.springframework.core.ResolvableTypeTests > resolveTypeVariableFromFieldTypeWithImplementsType FAILED     java.lang.AssertionError at ResolvableTypeTests.java:669  org.springframework.core.convert.TypeDescriptorTests > collectionNested FAILED     org.junit.ComparisonFailure at TypeDescriptorTests.java:652  org.springframework.core.convert.TypeDescriptorTests > collection FAILED     org.junit.ComparisonFailure at TypeDescriptorTests.java:636  org.springframework.core.convert.TypeDescriptorTests > map FAILED     org.junit.ComparisonFailure at TypeDescriptorTests.java:668  org.springframework.core.convert.TypeDescriptorTests > mapNested FAILED     org.junit.ComparisonFailure at TypeDescriptorTests.java:685  org.springframework.core.convert.support.DefaultConversionTests > collection FAILED     java.lang.AssertionError at DefaultConversionTests.java:641  org.springframework.core.convert.support.DefaultConversionTests > map FAILED     java.lang.AssertionError at DefaultConversionTests.java:664 ```    ---  **Affects:** 4.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/59604b1cd5a392501aa9c43fdb63b7bcfae617ce","closed","type: bug,","spring-projects-issues","2014-01-21T14:38:29Z","2014-01-28T13:07:20Z"
"","15917","Support for JSR-356 on WebLogic 12.1.3 [SPR-11293]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11293](https://jira.spring.io/browse/SPR-11293?redirect=false)** and commented  http://biemond.blogspot.co.at/2013/10/the-road-ahead-for-weblogic-12c.html  ---  **Issue Links:** - #15720 Compatibility with GlassFish 4.1 and Tyrus 1.8 (WebSocket 1.1) - #16973 Support for JSR-356 WebSockets on WebSphere Liberty Profile - #17825 Compatibility with WebLogic 12.2.1 / Tyrus 1.11  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2014-01-07T13:00:41Z","2019-01-11T18:37:35Z"
"","15909","Upgrade Tiles2 TilesConfigurer class to Tiles 2.2.2 [SPR-11285]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11285](https://jira.spring.io/browse/SPR-11285?redirect=false)** and commented  A leftover from the Spring 4.0 mission: We need to get rid of the crazy amount of reflection that bridges between Tiles 2.1 and Tiles 2.2 in our TilesConfigurer class...   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0606c98277fc06d4c61642318f62958a8850b6c2, https://github.com/spring-projects/spring-framework/commit/5d3484c74a252fa714e67cbf74790ea592293c33","closed","type: enhancement,","spring-projects-issues","2014-01-05T14:11:39Z","2014-01-28T13:07:09Z"
"","15908","Full Quartz 2.2 compatibility, including LocalDataSourceJobStore [SPR-11284]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11284](https://jira.spring.io/browse/SPR-11284?redirect=false)** and commented  While we've had basic Quartz 2.2 support before, a few details were missing:  * LocalDataSourceJobStore's ConnectionProvider adapters need to provide an empty implementation of Quartz 2.2's new initialize method.  * SchedulerFactoryBean's ""schedulerContextMap"" needs to be explicitly declared with String keys, otherwise it can't be compiled against Quartz 2.2 (forward compatibility once we're dropping Quartz 1.x support). This doesn't hurt against older Quartz versions either, since the keys need to be Strings anyway.  ---  **Affects:** 3.2.6, 4.0 GA  **Issue Links:** - #15401 Spring + Quartz 2.2.0 Integration is Inconsistent - #15988 SchedulerAccessor 'globalJobListeners' and 'globalTriggerListeners' not working with 2.0.x and 2.1.x  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/38a8ace5bb32112706ec82cbd65e81307cc414c9, https://github.com/spring-projects/spring-framework/commit/c2459b4a616b3816aa67e6d34827aa5544d8c66a  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: bug,","spring-projects-issues","2014-01-05T08:11:56Z","2019-01-11T18:37:54Z"
"","15890","EhCacheFactoryBean should not call set(Sampled)StatisticsEnabled on EhCache 2.7/2.8 [SPR-11265]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11265](https://jira.spring.io/browse/SPR-11265?redirect=false)** and commented  Statistics seem to be enabled by default as of EhCache 2.7, with the corresponding setter methods having been removed without notice.  Let's suppress the corresponding calls in EhCacheFactoryBean, assuming that statistics are on by default anyway, for a seamless upgrade path.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f477a024ad1418b4db08e561497b9a59a56f3edd, https://github.com/spring-projects/spring-framework/commit/73d8f069fe660baac35b7ec437296998b5dcbfe8  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: bug,","spring-projects-issues","2013-12-30T03:48:16Z","2014-01-28T13:07:11Z"
"","15887","Require Jackson 2.1+, Quartz 2.1.4+, EhCache 2.5+ [SPR-11262]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11262](https://jira.spring.io/browse/SPR-11262?redirect=false)** and commented  Jackson 2.1+ * removing deprecated Jackson 1.x support classes and deprecated code in MappingJackson2JsonView * Jackson 2.1 dates back to October 2012 (~2 years before Spring 4.1)  Quartz 2.1.4+ * removing reflective Quartz 1.x compatibility (deprecated already) * Quartz 2.1.4 dates back to April 2012 (~2.5 years before Spring 4.1)  EhCache 2.5+ * getting rid of deprecation warnings * EhCache 2.5 dates back to November 2011 (almost 3 years before Spring 4.1)  ---  **Issue Links:** - #16253 Fix broken tests in QuartzSupportTests (_**""is depended on by""**_) - #15739 Upgrade HttpComponentsHttpInvokerRequestExecutor to require Apache HttpComponents 4.3 - #15988 SchedulerAccessor 'globalJobListeners' and 'globalTriggerListeners' not working with 2.0.x and 2.1.x - #15394 Spring dependency injection for Jackson serializers - #17654 Require Jackson 2.6+, FreeMarker 2.3.21+, XStream 1.4.5+ - #18367 Require EhCache 2.10+ / 3.0 GA - #18182 SimpleTriggerFactoryBean and CronTriggerFactoryBean fail without jobDetail  0 votes, 5 watchers","closed","type: task,","spring-projects-issues","2013-12-29T14:58:43Z","2019-01-11T18:38:32Z"
"","15864","Upgrade embedded ASM version to 5.0.1 [SPR-11239]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11239](https://jira.spring.io/browse/SPR-11239?redirect=false)** and commented  Spring Framework 4.0 ships with a patched version of ASM 4.2, accepting the 1.8 bytecode level and allowing use with CGLIB 3. This needs to be upgraded to ASM 5.0 once available, for official Java 8 support by ASM itself.  ---  **Affects:** 4.0 GA  **Issue Links:** - #15851 Upgrade to CGLIB 3.1 and Objenesis 2.1 - #16279 Basic Java 8 bytecode compatibility for Spring 3.2.x through ASM 5.0.2","closed","type: enhancement,","spring-projects-issues","2013-12-17T01:31:56Z","2019-01-11T18:24:38Z"
"","15862","Support for JSR-356 on WildFly 8 / Undertow [SPR-11237]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11237](https://jira.spring.io/browse/SPR-11237?redirect=false)** and commented  According to recent tests, deploying onto WildFly 8.0 RC1 works fine in terms of classpath scanning and load-time weaving since the underlying JBoss VFS and ClassLoader APIs are compatible with JBoss AS 7.  However, we still need to research JSR-356 on WildFly and its underlying web server Undertow. Since we're talking about Servlet 3.1 within a Java EE 7 server here, this should be rather straightforward.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5f2106046ccded1df2dc92821a6d12a06e26f949  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-12-16T10:10:48Z","2014-01-28T13:07:20Z"
"","15861","Official JDK 8 GA support (following OpenJDK 8's GA on March 18th) [SPR-11236]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11236](https://jira.spring.io/browse/SPR-11236?redirect=false)** and commented  Compatibility with the actual OpenJDK 8 GA release. Also building the framework itself against OpenJDK 8 GA, and ideally upgrading to JDK 8 compatible versions of third-party libaries as likely to appear at that time.   --- No further details from [SPR-11236](https://jira.spring.io/browse/SPR-11236?redirect=false)","closed","type: task,","spring-projects-issues","2013-12-16T09:38:50Z","2014-03-26T22:34:08Z"
"","15851","Upgrade to CGLIB 3.1 and Objenesis 2.1 [SPR-11226]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11226](https://jira.spring.io/browse/SPR-11226?redirect=false)** and commented  CGLIB 3.1 got released last week. It only contains an ASM 4.2 upgrade (which we did ourselves in our repackaging) and error reporting improvements, so it's not essential. That said, we should nevertheless aim for tracking the latest there.  Objenesis 2.1 got released in October already, remaining largerly unnoticed. It contains a few TCK enhancements (which we don't really care about) and an OpenJDK-specific check (which we might care about). Again, let's aim for tracking the latest there, even if there is no strong need to upgrade yet.  ---  **Affects:** 4.0 GA  **Issue Links:** - #15864 Upgrade embedded ASM version to 5.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/26f1e05ffc47e26586f232a990d1eb938012af4a","closed","type: enhancement,","spring-projects-issues","2013-12-13T13:12:53Z","2019-01-11T18:27:22Z"
"","15746","What's New in 4.0 section in reference documentation [SPR-11120]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11120](https://jira.spring.io/browse/SPR-11120?redirect=false)** and commented  ---  **Sub-tasks:** - #15800 document new deprecations in the migration guide","closed","type: documentation,","spring-projects-issues","2013-11-25T07:50:17Z","2019-01-11T19:27:31Z"
"","15743","Reflect 4.0 core container refinements in reference documentation [SPR-11117]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11117](https://jira.spring.io/browse/SPR-11117?redirect=false)** and commented  * Generics-based autowiring * Ordered list/array injection with `@Autowired` (`@Order` on each element bean) * Lazy resolution proxies driven by `@Lazy` on injection point * Generalized condition model for bean definitions (`@Conditional` and co) * Attribute overriding with composable annotations    --- No further details from [SPR-11117](https://jira.spring.io/browse/SPR-11117?redirect=false)","closed","type: task,","spring-projects-issues","2013-11-25T07:44:26Z","2013-12-11T23:57:18Z"
"","15694","Support JCA 1.7 [SPR-11067]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11067](https://jira.spring.io/browse/SPR-11067?redirect=false)** and commented  Adding support for the JCA 1.7 getActivationName() method to Spring's MessageEndpointFactory implementations.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e146e53d9b0ef70e6b75b0a1a7818c2392a2d5d1","closed","type: enhancement,","spring-projects-issues","2013-11-04T14:12:42Z","2013-12-03T15:15:36Z"
"","15903","Allow ObjectMapper to be modified within MappingJackson2MessageConverter [SPR-11279]","**[Josh Brackett](https://jira.spring.io/secure/ViewProfile.jspa?name=jbrackett)** opened **[SPR-11279](https://jira.spring.io/browse/SPR-11279?redirect=false)** and commented  MappingJackson2MessageConverter doesn't allow access to its internal ObjectMapper.  It would be easier to customize json serialization/deserialization if one could do so.   ---  **Affects:** 4.0 GA","closed","type: enhancement,","spring-projects-issues","2014-01-02T07:59:30Z","2014-01-28T13:07:20Z"
"","16010","Apache HttpComponents 4.3 required at runtime but not listed in migration guide [SPR-11383]","**[jose luis sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=muallin)** opened **[SPR-11383](https://jira.spring.io/browse/SPR-11383?redirect=false)** and commented  There's a missing dependency been upgraded, or at least, changed since spring 3.x.  Spring 4.x now uses commons-httpclient 4.3.x, as previous releases did not include CloseableHttpClient class :  Caused by: java.lang.NoClassDefFoundError: org/apache/http/impl/client/CloseableHttpClient at org.springframework.http.client.HttpComponentsClientHttpRequestFactory.\(HttpComponentsClientHttpRequestFactory.java:85) ~[spring-web-4.0.1.RELEASE.jar:4.0.1.RELEASE  ---  **Affects:** 4.0 GA, 4.0.1  **Reference URL:** https://github.com/spring-projects/spring-framework/wiki/Migrating-from-earlier-versions-of-the-spring-framework  **Issue Links:** - #15739 Upgrade HttpComponentsHttpInvokerRequestExecutor to require Apache HttpComponents 4.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d55c22ec8555dc029ca2093781e79d933e457ed9, https://github.com/spring-projects/spring-framework/commit/f053f60630b3251500bb7ad321853d8679947e29","closed","type: documentation,","spring-projects-issues","2014-02-03T03:16:04Z","2019-01-11T19:11:46Z"
"","16041","ResolvableType.isAssignableFrom() failure for raw types [SPR-11414]","**[Jose Luis Martin](https://jira.spring.io/secure/ViewProfile.jspa?name=jlm)** opened **[SPR-11414](https://jira.spring.io/browse/SPR-11414?redirect=false)** and commented  Hi all,  When upgrading to Spring 4.0.0 I noticed failures when autowiring raw types.  I think that should be expected that if some Service service become autowired then a raw type declaration (Service service) should become autowired too.  I guess that it could be fixed checking for raw types in ResolvableType.getGenerics() and returning wildcards for all parameter types.  A proposal fix is in https://github.com/chelu/spring-framework/tree/resolvable-raw-types  Best regards,  Jose  ---  **Affects:** 4.0 GA  **Issue Links:** - #15875 Problem with autowiring of ""generic Beans"" (defined via RootBeanDefinition(s))","closed","in: core,","spring-projects-issues","2014-02-11T02:43:23Z","2019-01-12T16:35:22Z"
"","15975","Add support for @DeclareMixin Aspectj annotation in Spring AOP [SPR-11350]","**[Jose Luis Martin](https://jira.spring.io/secure/ViewProfile.jspa?name=jlm)** opened **[SPR-11350](https://jira.spring.io/browse/SPR-11350?redirect=false)** and commented  Hi all,  The last week I made a post about this topic in spring-contrib group but it didn't get any attention, so I'm trying now directly here. (Sorry if it's inconvenient).  I have tried to add support for  `@DeclaringMixin` aspectj annotation with the following changes in framework classes:  - Add a new DeclareMixinAdvisor - Modify DelegatePerTargetObjectIntroductionInterceptor to use a Factory for creating delegates. This allow to reuse it  in DeclareMixinAdvisor. - Modify ReflectiveAspecjAdvisorFactory.getAdvices() to check for `@DeclareMixin` annotation. - Add a test case to AbstractAspectJAdvisorFactoryTests  Seem that is working and all test passes.  The branch is in https://github.com/chelu/spring-framework/tree/declare-mixin  The main drawback for this mixin is that it can only try to add all the interfaces of the delegate  because there isn't  guarantees to successful execute the factory method without knowing the target object in ctor.  Please, could someone check if this approach is acceptable?  I also created a micro library to add this feature without touching framework classes https://github.com/chelu/jdal/tree/master/aop  Best regards,  Jose   ---  **Affects:** 3.2.6, 4.0 GA  **Reference URL:** https://groups.google.com/forum/#!topic/spring-framework-contrib/6BMzbu_tetQ","closed","status: bulk-closed,","spring-projects-issues","2014-01-22T15:53:40Z","2019-01-12T02:46:14Z"
"","15954","Wrong assert in  AspectJAwareAdvisorAutoProxyCreator.setAspectJAdvisorFactory() [SPR-11330]","**[Jose Luis Martin](https://jira.spring.io/secure/ViewProfile.jspa?name=jlm)** opened **[SPR-11330](https://jira.spring.io/browse/SPR-11330?redirect=false)** and commented  Hi all  Now is asserting on member instead argument. Actually is  ``` public void setAspectJAdvisorFactory(AspectJAdvisorFactory aspectJAdvisorFactory) { 		Assert.notNull(this.aspectJAdvisorFactory, ""AspectJAdvisorFactory must not be null""); 		this.aspectJAdvisorFactory = aspectJAdvisorFactory; 	} ```  I supose that should be:  ``` public void setAspectJAdvisorFactory(AspectJAdvisorFactory aspectJAdvisorFactory) { 		Assert.notNull(aspectJAdvisorFactory, ""AspectJAdvisorFactory must not be null""); 		this.aspectJAdvisorFactory = aspectJAdvisorFactory; 	} ```  Best regards  Jose   ---  **Affects:** 3.2.6, 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f15a5fef8e424abaab41400cfadcc498f2363834, https://github.com/spring-projects/spring-framework/commit/59893d1f13290bd657b4a061ae9c67f4b6dc3427  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","in: core,","spring-projects-issues","2014-01-19T02:59:00Z","2014-01-30T15:46:08Z"
"","15942","Incorrect example in section 9.9.2 [SPR-11318]","**[Jose Luis Martin](https://jira.spring.io/secure/ViewProfile.jspa?name=jlm)** opened **[SPR-11318](https://jira.spring.io/browse/SPR-11318?redirect=false)** and commented  Hi all,  At bottom of section **9.9.2 Using metadata-driven auto-proxying** there is the following example:  ```xml","closed","type: documentation,","spring-projects-issues","2014-01-15T18:39:51Z","2014-01-28T13:07:08Z"
"","15653","ConfigurationClass.validate() should allow for overloading in general or not at all [SPR-11025]","**[Jose Luis Martin](https://jira.spring.io/secure/ViewProfile.jspa?name=jlm)** opened **[SPR-11025](https://jira.spring.io/browse/SPR-11025?redirect=false)** and commented  When checking for overloaded methods, ConfigurationClass.validate() don't take in account overloaded methods from superclasses, so a invalid configuration class with overloaded methods obtained by inheritance bypass the check.  ---  **Affects:** 4.0 M3  **Issue Links:** - #15616 JavaConfig Bean overriding with addition - #15620 `@Bean` overriding does not pick up metadata from most specific method - #16340 Fix/optimize handling of `@Bean` method override regression with return type narrowing on JDK 8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/935bd25b09143f4987b7d9fb78cefc1df0e61f4b","closed","type: enhancement,","spring-projects-issues","2013-10-23T12:33:57Z","2019-01-13T06:57:40Z"
"","15538","Propagate LCEMFB.packagesToScan to native PersistenceProvider to pick up annotated packages [SPR-10910]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-10910](https://jira.spring.io/browse/SPR-10910?redirect=false)** and commented  I'm using `LocalContainerEntityManagerFactoryBean#setPackagesToScan` without a `persistence.xml` in combination with Hibernate. This works great for annotated entities, but fails to pick up annotated packages. Case in point: I'm using an `@FilterDef` that I don't want to have to repeat on multiple entities, so I've placed it on a package. This works with a `persistence.xml` as Hibernate does some additional work when building the `PersistenceUnitInfo` then, but I would like to remain `persistence.xml`-less if possible.  From what I can see, the JPA `PersistenceUnitInfo` (which Spring creates for me in this case) simply doesn't provide support to pass in annotated packages. However, there is (at least for Hibernate) a workaround: from inside the `HibernatePersistenceProvider` you can call `Ejb3Configuration#addPackage` to have Hibernate pick up the annotated packages. So, for now I'm subclassing the `HibernatePersistenceProvider` and override `createContainerEntityManagerFactory(PersistenceUnitInfo, Map)` like this:  ``` public class SmartHibernatePersistence extends HibernatePersistence { 	 	private String[] annotatedPackages = new String[0]; 	 	/** 	 * Overridden to allow specifying annotated packages. Without this, when you use Spring's 	 * {@link LocalContainerEntityManagerFactoryBean#setPackagesToScan(String...)} package-level 	 * annotations are not picked up.  	 */ 	public EntityManagerFactory createContainerEntityManagerFactory(PersistenceUnitInfo info, Map properties) { 		Ejb3Configuration cfg = new Ejb3Configuration(); 		for (String annotatedPackage: annotatedPackages) { 			cfg.addPackage(annotatedPackage); 		} 		Ejb3Configuration configured = cfg.configure( info, properties ); 		return configured != null ? configured.buildEntityManagerFactory() : null; 	} 	 	public void setAnnotatedPackages(String... annotatedPackages) { 		this.annotatedPackages = annotatedPackages; 	}  } ```  and then call `LCEMFB#setPersistenceProvider` with a configured instance of this class.  That does however require me to specify all my annotated packages (there is no recursive scanning here). It would be way cooler if Spring would recursively scan for annotated packages when using `LCEMFB#setPackagesToScan` and would then pass them on to a Spring-provided extension of the native JPA provider's `PersistenceProvider` implementation that knows how to register these annotated packages: for example, by having it's own subtype of the `PersistenceProvider` interface that is 'package aware' that is supported in addition to the regular `PersistenceProvider`, with implementations for the common JPA providers.  So, basically, that's my feature request ;)  I haven't checked how this works for other JPA providers, but I assume they should provide similar ways to deal with annotated packages when building up their own `EntityManagerFactoryBean` from their configuration.  ---  **Issue Links:** - #14922 In AnnotationSessionFactoryBean, be able to specify annotatedPackages and packagesToScan in one property - #13233 Hibernate Annotation scanner missing package-info.java - #16316 Support for Hibernate ORM 5.0 - #15885 Add potentially existing orm.xml file to default persistence unit when packages to scan is used  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/591f79514d47ab21ed754818463ba1e4c668b5a9, https://github.com/spring-projects/spring-framework/commit/0232739293f637103a85f7b922d9f7006afc4b72  4 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2013-09-12T01:33:12Z","2019-01-11T22:10:39Z"
"","16068","RestTemplate's connection/read timeout settings not applied when using Apache HttpClient [SPR-11442]","**[Jongwook Choi](https://jira.spring.io/secure/ViewProfile.jspa?name=wookayin)** opened **[SPR-11442](https://jira.spring.io/browse/SPR-11442?redirect=false)** and commented  To use Apache HttpClient as a backend of RestTemplate, one should use HttpComponentsClientHttpRequestFactory. However,  The methods  - HttpComponentsClientHttpRequestFactory#setConnectTimeout(int timeout) - HttpComponentsClientHttpRequestFactory#setReadTimeout(int timeout)  are not working since Spring 4.0.0. (affected versions are: 4.0 GA, 4.0.1, 4.0.2 and current master) The version of Apache HttpClient used is 4.3.2 (the latest as of now - Spring 4 requires HttpClient 4.3+)  Actually, the timeout is overwritten to zero on execution, and therefore it might cause an unexpected hang. In the old version of spring (e.g. 3.2.x) everything works fine. (see the test in the reference URL)  More details I've figured out:  - HttpComponentsClientHttpRequest is created well with the timeout settings configured.   (The configuration is hold in an instance of RequestConfig, contained in a HttpContext) - But when the request it is executed, RequestConfig is overwritten completely.   (see the line 806 of AbstractHttpClient.java of HttpClient 4.3) - I suspect the cause is commit [296e2189](https://github.com/spring-projects/spring-framework/commit/296e2189a2376745414a065e9239b066c31e2bed) (#13446).  ---  **Affects:** 4.0.2  **Reference URL:** https://gist.github.com/wookayin/9087154  **Issue Links:** - #18993 Defensively access deprecated AbstractHttpClient class from Apache HttpComponents  0 votes, 6 watchers","closed","type: regression,","spring-projects-issues","2014-02-18T22:43:12Z","2019-01-11T21:25:29Z"
"","16157","File extension not removed when URI variable contains a dot [SPR-11532]","**[Jonathan Peffer](https://jira.spring.io/secure/ViewProfile.jspa?name=jpeffer)** opened **[SPR-11532](https://jira.spring.io/browse/SPR-11532?redirect=false)** and commented  While mapping a URI fragment into a nested object's attribute and using the ContentNegotiatingViewResolver, the content-type appended at the end of the URL is not stripped from the bound value.  Using the following URL:  ``` http://localhost/rest/establishments/employees/976685.json ```  I receive the following JSON payload response (I've isolated the return to just the bound ModelAttribute to be more concise):  ``` request-payload"":{""areaOfResponsibility"":{""owner"":{""id"":""976685.json""}}} ```  Here is the annotated method signature in the associated Controller:  ``` @RequestMapping(value = ""/establishments/employees/{areaOfResponsibility.owner.id}"",                     method = RequestMethod.GET) public String getEstablishmentsByEmployeeId(@Valid @ModelAttribute(""request-payload"") EstablishmentDto establishment,                                                 ModelMap model) ```  If I however do not map to an attribute of a nested object and rather use a base object like String, Integer, etc. within the top level object, the content-type is removed properly from the mapped value.  Using the following URL:  ``` http://localhost/rest/assets/establishments/123456789.json ```  I receive the following JSON payload response (I've isolated the return to just the bound ModelAttribute to be more concise):  ``` request-payload"":{""establishmentId"":""123456789""} ```  Here is the annotated method signature in the associated Controller:  ``` @RequestMapping(value = ""/assets/establishments/{establishmentId}"",                     method = RequestMethod.GET) public String getAssetByEstablishmentId(@Valid @ModelAttribute(""request-payload"") EstablishmentDto establishment,                                             ModelMap model) ```  As you can see, this properly strips the content-type from the value of the mapped path variable.  I have only tested and confirmed this behavior is present within Spring 4.0.1-RELEASE, 4.0.2-RELEASE, and 4.0.3-BUILD-SNAPSHOT.  ---  **Affects:** 4.0.1, 4.0.2  **Issue Links:** - #16225 PatternsRequestCondition strips off extensions  0 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2014-03-09T18:03:18Z","2019-01-12T16:35:18Z"
"","15866","Private constant HttpHeaders.UPGARDE misspelled [SPR-11241]","**[Jon Ekdahl](https://jira.spring.io/secure/ViewProfile.jspa?name=damaan)** opened **[SPR-11241](https://jira.spring.io/browse/SPR-11241?redirect=false)** and commented  org.springframework.http.HttpHeaders.UPGARDE should be ""UPGRADE"". I was browsing the sources for predefined header names when I stumbled onto the misspellt constant. The constant is not part of the public API, but I guess you would want to correct it anyway.   ---  **Affects:** 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff92f5af57f36436635352164cf8b96207fa463d","closed","type: enhancement,","spring-projects-issues","2013-12-17T05:00:45Z","2014-01-28T13:07:10Z"
"","15724","Minor issue with fix for CVE 2010-1622 [SPR-11098]","**[John Melton](https://jira.spring.io/secure/ViewProfile.jspa?name=jtmelton)** opened **[SPR-11098](https://jira.spring.io/browse/SPR-11098?redirect=false)** and commented  There is a minor issue with the fix for CVE 2010-1622 (http://docs.spring.io/spring/docs/2.5.6.SEC03/changelog.txt). I don't have an exploitable vulnerability, but the issue could lead to a security issue. I couldn't find on the site how to specify this was a security issue and didn't want to post it in the open. Please let me know how to post with the visibility restricted.   ---  **Affects:** 4.0 RC1  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/62ea627965eb10eb3f3c2b2388ff6d1ac7ddb3a6, https://github.com/spring-projects/spring-framework/commit/7f895222e17b0970d4f9ab038b2f03c26aaf6f03  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-11-18T19:30:13Z","2013-12-11T23:57:18Z"
"","15991","MockRestServiceServer should allow for an expectation to occur multiple times. [SPR-11365]","**[John Mark](https://jira.spring.io/secure/ViewProfile.jspa?name=springiscool)** opened **[SPR-11365](https://jira.spring.io/browse/SPR-11365?redirect=false)** and commented  Currently, the MockRestServiceServer requires that each expectation only be executed once.  It would be nice to be able to say expect this and respond like this any number of times.  Similar to the way the Mockito works.  When setting up expectations using when().thenReturn() it can be executed any number of times.  ---  **Affects:** 4.0 GA  **Issue Links:** - #17016 MockRestServiceServer should allow more verification options - #19734 MockRestServiceServer should allow for an expectation to never occur.  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-01-28T11:26:09Z","2020-05-28T12:43:27Z"
"","15897","mvc:annotation-driven incorrectly detects validation provider on classpath [SPR-11272]","**[John Mark](https://jira.spring.io/secure/ViewProfile.jspa?name=springiscool)** opened **[SPR-11272](https://jira.spring.io/browse/SPR-11272?redirect=false)** and commented  I currently have javax.validation:validation-api:1.1.0.Final on my classpath since I include an artifact that uses that jar.  Spring seems to detect this and try to create a validator using org.springframework.validation.beanvalidation.LocalValidatorFactoryBean which then fails since I don't have a validation provider like Hibernate Validator on my classpath.  This then causes my entire webapp to fail to start.  This behavior does not make sense to me.  If I don't have a validation provider on my classpath, then why does Spring think I want to use validation?  I would think that mvc:annotation-driven should use the same type of detection mechanism that LocalValidatorFactoryBean uses to determine if a validation provider is on the classpath.  That way it wouldn't try to create a validator just because I have the validation **API** on my classpath.  It should only try to create a validator if a **provider** implementation exists.  According to the documentation at http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/mvc.html (Section 16.1.1)  should only enable validation if a JSR-303 **Provider** is present on the classpath.  ---  **Affects:** 4.0 GA  **Issue Links:** - #15811 Support for `@Valid` in `@MessageMapping` annotated methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b9c8f47b01b0bb2833539643d429b79ef0adabf5, https://github.com/spring-projects/spring-framework/commit/6a5a3c97edae048c2b54d549a6764713923c0bfa, https://github.com/spring-projects/spring-framework/commit/e3344898cd7dc64577c60174372d7d2fd33e8d45, https://github.com/spring-projects/spring-framework/commit/6aabb5f17e93e20746f06d1005c8a6968b20103c, https://github.com/spring-projects/spring-framework/commit/c48da0d9a4db3f4084db7ccc8c0a730c3ff5045a, https://github.com/spring-projects/spring-framework/commit/8d1e55d1018d11b1d693a731ecfd0164a82784d1","closed","type: bug,","spring-projects-issues","2014-01-01T13:04:16Z","2019-01-13T06:56:43Z"
"","16301","Form select tag ""multiple"" attribute not recognized [SPR-11678]","**[John Andrew Barnes](https://jira.spring.io/secure/ViewProfile.jspa?name=jabarnes01)** opened **[SPR-11678](https://jira.spring.io/browse/SPR-11678?redirect=false)** and commented  After upgrading to 4.0.3-RELEASE, ""ctrl + click"" on select list items no longer resulted in multiple items being selected.  I was only able to select a single list item.  After reverting back to 3.2.7-RELEASE all worked as expected.  Here's a snippet of the JSP code:","closed","type: bug,","spring-projects-issues","2014-04-09T04:30:23Z","2019-01-11T21:02:49Z"
"","15573","AbstractApplicationEventMulticaster throws NPE when ApplicationEvent's source is null [SPR-10945]","**[Johannes Scharf](https://jira.spring.io/secure/ViewProfile.jspa?name=scharfj)** opened **[SPR-10945](https://jira.spring.io/browse/SPR-10945?redirect=false)** and commented  `AbstractApplicationEventMulticaster` throws a `NullPointerException`  at line 131 if the `ApplicationEvent's` source is `null`:  ```java protected Collection getApplicationListeners(ApplicationEvent event) { 	Class","closed","in: core,","spring-projects-issues","2013-09-28T05:41:14Z","2019-01-11T22:10:07Z"
"","15618","Update json-path dependency to 0.9.0 [SPR-10990]","**[Johannes Mockenhaupt](https://jira.spring.io/secure/ViewProfile.jspa?name=jotomo)** opened **[SPR-10990](https://jira.spring.io/browse/SPR-10990?redirect=false)** and commented  Json-Path version 0.9.0 has been released and is a maintenance release as far as I can tell, please consider upgrading.  From http://code.google.com/p/json-path/ :  ??2013-09-27 Released 0.9.0 bug fixes, general improvements??  Thanks!   ---  **Affects:** 3.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/efa86e80d8be934519de189cecaaba9f05c6ebbc","closed","type: enhancement,","spring-projects-issues","2013-10-15T08:11:58Z","2013-10-31T12:28:00Z"
"","16142","ConstructorResolver will generate NPE in case of no factory method found when there are explicit args [SPR-11517]","**[Joe Gamache](https://jira.spring.io/secure/ViewProfile.jspa?name=blackduck.joe)** opened **[SPR-11517](https://jira.spring.io/browse/SPR-11517?redirect=false)** and commented  You can find this bug by inspection if you simply look at the code.  So please do not turn around and ask me for a test case.  In fact, there should be a Unit Test case added internally for this usage as I do not believe that there can be one given the code.  Look at org.springframwork.beans.factory.support.ConstructorResolver in the 'instantiateusingFactoryMethod'.   If there are 'explicitArgs' all is fine until the if statement at line: 440: if (explicitArgs != null) In this usage, ""resolvedValues"" IS NEVER INITIALIZED!!!  This guarantees a NullPointerException on line 533:      boolean hasArgs = (resolvedValues.getArgumentCount() > 0)  The problem can also be stated in English: If explicitArgs are used they are never loaded into the resolvedValues data structure from which the code extracts them, thus this can not work.   ---  **Affects:** 3.2.8, 4.0.2  **Attachments:** - [source.zip](https://jira.spring.io/secure/attachment/21800/source.zip) (_7.56 kB_)  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","in: core,","spring-projects-issues","2014-03-05T04:47:07Z","2014-03-26T22:34:05Z"
"","15614","Remove integer conversion in JmsListenerContainerParser [SPR-10986]","**[Joakim Recht](https://jira.spring.io/secure/ViewProfile.jspa?name=recht)** opened **[SPR-10986](https://jira.spring.io/browse/SPR-10986?redirect=false)** and commented  #14187 fixed the jms schema to allow non-integer values in xml. However, the namespace parser still converts the input to Integer for pre-fetch and receive-timeout. This means that you cannot use EL or property placeholders to configure the value:  ``` Caused by: java.lang.NumberFormatException: For input string: ""#{1*1000}"" 	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) 	at java.lang.Integer.parseInt(Integer.java:481) 	at java.lang.Integer.(Integer.java:677) 	at org.springframework.jms.config.JmsListenerContainerParser.parseContainer(JmsListenerContainerParser.java:157) 	at org.springframework.jms.config.AbstractListenerContainerParser.parseListener(AbstractListenerContainerParser.java:146) ```  ---  **Affects:** 3.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ccafccbec86fcd9c2b6522fd4a5007aec59008bc, https://github.com/spring-projects/spring-framework/commit/d48b9b1ef7a1bfbe4dd7bf55700baef85522d364  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)","closed","type: bug,","spring-projects-issues","2013-10-14T03:01:44Z","2019-01-11T12:55:08Z"
"","15732","@ExceptionHandler cannot handler java.lang.Error despite the annotation accept ? extends Throwable [SPR-11106]","**[Jiri Mikulasek](https://jira.spring.io/secure/ViewProfile.jspa?name=pirkojm)** opened **[SPR-11106](https://jira.spring.io/browse/SPR-11106?redirect=false)** and commented  according to http://docs.spring.io/spring/docs/3.0.x/api/org/springframework/web/bind/annotation/ExceptionHandler.html `@Exceptionhandler` should allow to handle also Errors, however it can't, cause DispatcherServlet doesn't catch and deliver that to ExceptionHandler  ---  **Affects:** 3.2.4, 4.2.5  **Reference URL:** http://stackoverflow.com/questions/8184593/why-error-is-not-getting-caught-even-when-explicitly-thrown/8212177#8212177  **Issue Links:** - #18901 After-completion callback not triggered for custom Throwable subclass - #21451 AbstractMethodMessageHandler does not rethrow Errors - #18863 `@ExceptionHandler` should match cause as well (e.g. for exception thrown from argument formatter)  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2013-11-21T04:47:46Z","2019-01-14T05:18:17Z"
"","15970","PlaceholderConfigurerSupport.doProcessProperties() loses stack trace on exception [SPR-11346]","**[Jim Yingst](https://jira.spring.io/secure/ViewProfile.jspa?name=jryingst)** opened **[SPR-11346](https://jira.spring.io/browse/SPR-11346?redirect=false)** and commented  In org.springframework.beans.factory.config.PlaceholderConfigurerSupport, the doProcessProperties() method contains the following code:  ```java try {          visitor.visitBeanDefinition(bd); } catch (Exception ex) {          throw new BeanDefinitionStoreException(bd.getResourceDescription(), curName, ex.getMessage()); } ```  This effectively loses all stack trace information for the original exception, ex.  Other than the getMessage(), which may or may not be useful.  It would be easy to change this to properly set the nested cause so as to preserve this information:  ```java throw new BeanDefinitionStoreException(bd.getResourceDescription(), curName, ex.getMessage(), ex); ```    ---  **Affects:** 3.2.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8d304efad1abe99d3c1dedfff3a6b9d96ac65c01, https://github.com/spring-projects/spring-framework/commit/fdd31c0e6626b56f4fe50fcb9ee85a7024ee81d4  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","in: core,","spring-projects-issues","2014-01-22T12:12:18Z","2014-01-28T13:07:19Z"
"","15852","close() not exposed on ApplicationContext leading to ""resource leak"" warnings in newer compilers [SPR-11227]","**[Jim Garrison](https://jira.spring.io/secure/ViewProfile.jspa?name=jhgnwea)** opened **[SPR-11227](https://jira.spring.io/browse/SPR-11227?redirect=false)** and commented  In Eclipse, given      import org.springframework.context.ApplicationContext;     import org.springframework.context.support.GenericXmlApplicationContext;     ...     ApplicationContext ctx = new GenericXmlApplicationContext(""SpringConfig.xml"");  The last statement is flagged with ""Resource leak: 'ctx' is never closed""  ApplicationContext does not implement Closeable and has no close() method. However, GenericXmlApplicationContext **does** implement Closeable. It seems that if underlying implementations are closeable it should be possible to invoke close() via ApplicationContext.   ---  **Affects:** 3.2.4  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2013-12-13T13:38:42Z","2019-01-12T16:35:32Z"
"","15721","spring 3.2.5 jmx exception when create MBeans [SPR-11095]","**[jerryscott2014](https://jira.spring.io/secure/ViewProfile.jspa?name=jerry2014)** opened **[SPR-11095](https://jira.spring.io/browse/SPR-11095?redirect=false)** and commented  spring3.2.5 seems more strict with in createAndConfigMBean during MBeanExporter does(when invoke the registerBeans), here comes my stack trace:  org.springframework.jmx.export.MBeanExportException: Could not create ModelMBean for managed resource [ConsoleMsgMBeanInfo={fssModProductState_MsgMBean}] with key 'bean:name=fssModProductState_MsgMBean'; nested exception is javax.management.IntrospectionException: type mismatch between getter and setter at org.springframework.jmx.export.MBeanExporter.createAndConfigureMBean(MBeanExporter.java:797) at org.springframework.jmx.export.MBeanExporter.registerBeanInstance(MBeanExporter.java:654) at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:598) at org.springframework.jmx.export.MBeanExporter.registerBeans(MBeanExporter.java:527) at org.springframework.jmx.export.MBeanExporter.afterPropertiesSet(MBeanExporter.java:413) at com.xyt.channel.server.service.listener.AbstractMBeanLoadEventListener.processAppEvent(Unknown Source) at com.xyt.channel.server.service.listener.AbstractMBeanLoadEventListener.processAppEvent(Unknown Source) at com.xyt.channel.component.event.AbstractChannelEventObserver.observeChannelEvent(Unknown Source) at com.xyt.channel.wko.service.main.ChannelEnvConfiguration$1.startChannelService(Unknown Source) at com.xyt.channel.wko.service.main.ChannelWkoServiceMain.startChannelService(Unknown Source) at com.xyt.channel.server.service.main.AbstractChannelServiceMain.startChannelService(Unknown Source) at com.xyt.channel.wko.service.main.ChannelWkoServiceMain.main(Unknown Source) Caused by: javax.management.IntrospectionException: type mismatch between getter and setter at javax.management.MBeanAttributeInfo.attributeType(MBeanAttributeInfo.java:340) at javax.management.MBeanAttributeInfo.(MBeanAttributeInfo.java:183) at javax.management.modelmbean.ModelMBeanAttributeInfo.(ModelMBeanAttributeInfo.java:202) at org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler.getAttributeInfo(AbstractReflectiveMBeanInfoAssembler.java:315) at org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler.getMBeanInfo(AbstractMBeanInfoAssembler.java:64) at org.springframework.jmx.export.MBeanExporter.getMBeanInfo(MBeanExporter.java:819) at org.springframework.jmx.export.MBeanExporter.createAndConfigureMBean(MBeanExporter.java:792)  As shown above, when I went back to spring3.2.4 or lower edition, the error stacktrace would not appear. I hope some could point out my mistake whether I had set wrong MBean Name.   ---  **Affects:** 3.2.5  **Attachments:** - [wkoservice.log](https://jira.spring.io/secure/attachment/21496/wkoservice.log) (_28.49 kB_)","closed","status: bulk-closed,","spring-projects-issues","2013-11-17T07:27:07Z","2019-01-12T00:21:07Z"
"","15761","spring.profiles.active is not honored when building the context cache key in the TestContext framework [SPR-11135]","**[Jeroen Benckhuijsen](https://jira.spring.io/secure/ViewProfile.jspa?name=jeroen.benckhuijsen)** opened **[SPR-11135](https://jira.spring.io/browse/SPR-11135?redirect=false)** and commented  #### Status Quo  The Spring TestContext Framework has a mechanism for caching loaded application contexts. This cache mechanism works by inspecting a number of attributes of the `@ContextConfiguration`, `@WebAppConfiguration`, and `@ActiveProfiles` annotations.  #### Claim  The aforementioned caching mechanism does not honor the `spring.profiles.active` system property in case it is set, although the started application context does.  In case two or more tests are run with different `@ActiveProfiles` configurations, the application contexts loaded for those tests are viewed as distinct application contexts, although the resulting contexts are equal, making the caching mechanism ineffective.  ---  **Affects:** 3.2.5  **Attachments:** - [pom.xml](https://jira.spring.io/secure/attachment/21655/pom.xml) (_2.99 kB_) - [spr11135.zip](https://jira.spring.io/secure/attachment/21525/spr11135.zip) (_7.20 kB_)  **Issue Links:** - #13622 Allow overriding `@ActiveProfiles` in test classes with system property","closed","type: enhancement,","spring-projects-issues","2013-12-02T07:21:14Z","2019-01-13T06:57:16Z"
"","15986","@RestController should accept a bean name value [SPR-11360]","**[Jens Alm](https://jira.spring.io/secure/ViewProfile.jspa?name=ulmus)** opened **[SPR-11360](https://jira.spring.io/browse/SPR-11360?redirect=false)** and commented  The `@RestController` does not take a value to be used as bean name. I currently have two controllers exporting different versions of the same service. The different controllers reside in different packages but are named the same thing. When the context starts up I get an exception for having two conflicting beans of the same name. When using the RestController annotation it defaults to the class name which in my case is the same so the conflict is legitimate. I would like to be able to specify a name for each one like you can with `@Controller`. As it is I had to rename a the classes to get it to work.   ---  **Affects:** 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/78542777d6d85d641ed4b8de9756e4cb21a69004","closed","type: enhancement,","spring-projects-issues","2014-01-26T09:38:51Z","2014-01-28T13:07:21Z"
"","15845","RequestMapping maps double-slashes to single slashes [SPR-11220]","**[Jeff Conrad](https://jira.spring.io/secure/ViewProfile.jspa?name=ledlogic)** opened **[SPR-11220](https://jira.spring.io/browse/SPR-11220?redirect=false)** and commented  I was attempting to resolve a URL coming in from googlebot which had double-slashes, ""//"".  It doesn't seem like `@RequestMapping` annotation is handling these explicitly as one would expect.  Attached is a test case `@Controller`, a running shell script, and the output.  The output indicates that double-slash requests are also accepting single-slash inputs, force-removing the difference between double and single slash on the controller side.  ---  **Affects:** 3.0.5  **Attachments:** - [slash.out](https://jira.spring.io/secure/attachment/21536/slash.out) (_163 bytes_) - [slash.sh](https://jira.spring.io/secure/attachment/21535/slash.sh) (_163 bytes_) - [SlashTestController.java](https://jira.spring.io/secure/attachment/21534/SlashTestController.java) (_1.83 kB_)  **Issue Links:** - #16979 Two trailing slashes and the default servlet cannot resolve to a controller  1 votes, 4 watchers","closed","status: declined,","spring-projects-issues","2013-12-12T16:27:07Z","2019-01-12T16:35:33Z"
"","15587","UriComponents should parse the path of a String URI into path segments [SPR-10959]","**[Jean-Louis Jouannic](https://jira.spring.io/secure/ViewProfile.jspa?name=jljouannic)** opened **[SPR-10959](https://jira.spring.io/browse/SPR-10959?redirect=false)** and commented  Expanding an instance of UriComponents with variable on the path gives different results, depending if it was built from a full String template, or if path segments were appended later.  Here is an example taken from the last comments of issue [SPR-8662](https://jira.springsource.org/browse/SPR-8662?focusedCommentId=86675&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-86675):  ``` String uri = ""http://foo/{bar}""; UriComponents uriComponents = UriComponentsBuilder.fromUriString(uri).build(); System.out.println(uriComponents.expand(""user/name"").encode().toUriString()); ```  produces  ``` http://foo/user/name ```  whereas  ``` String uri = ""http://foo""; UriComponents uriComponents = UriComponentsBuilder.fromUriString(uri).pathSegment(""{bar}"").build(); System.out.println(uriComponents.expand(""user/name"").encode().toUriString()); ```  produces  ``` http://foo/user%2Fname ```  ---  **Affects:** 3.2.4  **Issue Links:** - #17347 Provide option in RestTemplate to encode slash in URI variables","closed","type: enhancement,","spring-projects-issues","2013-10-04T08:07:21Z","2019-01-11T22:09:54Z"
"","15929","Provide a websocket scope [SPR-11305]","**[Jean-Baptiste Nizet](https://jira.spring.io/secure/ViewProfile.jspa?name=jnizet)** opened **[SPR-11305](https://jira.spring.io/browse/SPR-11305?redirect=false)** and commented  Provide a websocket scope, which would work as the HTTP request and session scopes, but would last only for the duration of the web socket session. The callback could then initialize some beans in this scope, and the various `@MessageMapping` method could read and modify beans from this scope, maintaining some sort of conversation state linked to the websocket session. An alternative would be to maintain the request scope alive until the websocket session is closed, to be able to use the same request-scoped currentUser bean both in `@RequestMapping` and `@MessageMapping` methods.  The WebSocket session should be handled in a similar way as the standard HTTP session: be able to put, get and remove arbitrary attributes indexed by name in the WebSocketSession. When a MessageMapping-annotated method would be invoked, the associated WebSocket session would be stored in a ThreadLocal variable, just like it's done for the HTTP request scope with RequestContextHolder. Any method invoked from the same thread would thus be able to access the WebSocket session attributes thanks to the ""WebSocketContextHolder"" ThreadLocal, and a custom scope could be implemented in a similar way as the RequestScope.  This would provide a programming model which would be almost identical to the classical Spring-MVC model. An extension point for the initialization would still be necessary to transfer attributes from the request scope (like the principal, or any other value), to the WebSocket session scope.  ---  **Affects:** 4.0 GA  **Issue Links:** - #16190 Pass WebSocket session attributes in HandshakeInterceptor and expose them to MessageMapping methods - #15853 Allow setting principal on connect  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2c4cbb617e96c7f400abe6bf136df120320ea8a0  6 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2014-01-13T09:17:29Z","2019-01-11T19:03:06Z"
"","15853","Allow setting principal on connect [SPR-11228]","**[Jean-Baptiste Nizet](https://jira.spring.io/secure/ViewProfile.jspa?name=jnizet)** opened **[SPR-11228](https://jira.spring.io/browse/SPR-11228?redirect=false)** and commented  I have a Spring MVC restful app that doesn't use Spring security, but uses a HandlerInterceptor to extract a token from a security cookie and gets the current user information thanks to this token.  The current user is then stored inside a request-scoped Spring bean (currentUser) and injected in every controller or service which needs access to the current user.  This works beautifully, until we add websockets to the mix. Indeed, the request-scoped bean is not usable from inside a method annotated with `@MessageMapping`, and the only way (that I know of) to have the current user accessible from this method is, AFAIK, to use a filter instead of an interceptor and to wrap the HTTP request so that getUserPrincipal() returns the current user.  It would be really helpful to  - be able to provide a callback method when the connect message is received by the server, and be able to associate a Principal (other than the one returned by ServletRequest.getUserPrincipal()) to the socket session from this callback method - be able, from this callback method, to use the login and passcode sent with the connect message, or a cookie, in case HTTP authentication is not used - \[**UPDATE:** this bullet is now superceded by #15929\] provide a websocket scope, which would work as the HTTP request and session scopes, but would last only for the duration of the web socket session. The callback could then initialize some beans in this scope, and the various `@MessageMapping` method could read and modify beans from this scope, maintaining some sort of conversation state linked to the websocket session. An alternative would be to maintain the request scope alive until the websocket session is closed, to be able to use the same request-scoped currentUser bean both in `@RequestMapping` and `@MessageMapping` methods.  Sorry if I missed something from the documentation or even from the way this all works: I've only been playing with this for a few days.  ---  **Affects:** 4.0 GA  **Issue Links:** - #15929 Provide a websocket scope  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a5c3143512d630911f55c4cff2822d54b4617dbc  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2013-12-14T07:38:09Z","2019-01-11T18:25:20Z"
"","15840","Spring formatting with Formatting from String to String and spring:eval does not work [SPR-11215]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-11215](https://jira.spring.io/browse/SPR-11215?redirect=false)** and commented  Image I have an IBAN saved as a String and a `@IBANFormat` to trigger formatting. When I render the IBAN with spring:eval it does not work.  ExpressionUtils does not call ConversionService if both types are the same and lacking formatting the value.  Line 66 in ExpressionUtils: {{ public static \ T convertTypedValue(EvaluationContext context, TypedValue typedValue, Class\ targetType) { Object value = typedValue.getValue(); if ((targetType == null) || (value != null && ClassUtils.isAssignableValue(targetType, value))) { return (T) value; } if (context != null) { return (T) context.getTypeConverter().convertValue(value, typedValue.getTypeDescriptor(), TypeDescriptor.valueOf(targetType)); } throw new EvaluationException(""Cannot convert value '"" + value + ""' to type '"" + targetType.getName() + ""'""); }  }}  The first ""if"" statement is triggered because both values are Strings. No conversion and no formatting takes place.  More details at the link from StackOverflow   ---  **Affects:** 4.0 GA  **Reference URL:** http://stackoverflow.com/questions/20542259/  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/234272eb8f6b37493643687c91b1f2ae75e65eef, https://github.com/spring-projects/spring-framework/commit/67abeb47223e00882a4e1f10331ca723da2a6b92","closed","type: enhancement,","spring-projects-issues","2013-12-12T05:57:05Z","2014-01-28T13:07:11Z"
"","16264","@Configuration class is not detected as default in composed annotation in the TestContext framework [SPR-11641]","**[Janne Valkealahti](https://jira.spring.io/secure/ViewProfile.jspa?name=jvalkeal)** opened **[SPR-11641](https://jira.spring.io/browse/SPR-11641?redirect=false)** and commented  I have below classes in my tests. This used to work with 4.0.2 but now fails with 4.0.3. I don't know if this is somehow related to work for #16081 and other jira's linked to it.  [ComposedAnnotationTests.java](https://github.com/spring-projects/spring-hadoop/blob/master/spring-yarn/spring-yarn-test/src/test/java/org/springframework/yarn/test/context/ComposedAnnotationTests.java)  ``` @RunWith(SpringJUnit4ClassRunner.class) @CustomMiniYarnClusterTest public class ComposedAnnotationTests {  	@Autowired 	private ApplicationContext ctx;  	@Resource(name = ""yarnConfiguration"") 	Configuration configuration;  	@Test 	public void testLoaderAndConfig() { 		assertNotNull(ctx); 		assertTrue(ctx.containsBean(""yarnCluster"")); 		assertTrue(ctx.containsBean(""yarnConfiguration"")); 		assertTrue(ctx.containsBean(""myCustomBean"")); 		Configuration config = (Configuration) ctx.getBean(""yarnConfiguration""); 		assertNotNull(config); 	}  } ```  [CustomMiniYarnClusterTest](https://github.com/spring-projects/spring-hadoop/blob/master/spring-yarn/spring-yarn-test/src/test/java/org/springframework/yarn/test/context/CustomMiniYarnClusterTest.java)  ``` @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) @ContextConfiguration(loader=YarnDelegatingSmartContextLoader.class) @MiniYarnCluster public @interface CustomMiniYarnClusterTest {  	@Configuration 	public static class Config { 		@Bean 		public String myCustomBean() { 			return ""myCustomBean""; 		} 	}  } ```  This fails with message:  ``` java.lang.IllegalStateException: Neither YarnClusterInjectingXmlContextLoader nor YarnClusterInjectingAnnotationConfigContextLoader was able to detect defaults, and no ApplicationContextInitializers were declared for context configuration [ContextConfigurationAttributes@2eedd06a declaringClass = 'org.springframework.yarn.test.context.YarnClusterInjectingMiniYarnClusterTestContextLoaderTests', locations = '{}', classes = '{}', inheritLocations = true, initializers = '{}', inheritInitializers = true, name = [null], contextLoaderClass = 'org.springframework.yarn.test.context.YarnDelegatingSmartContextLoader'] 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.processContextConfiguration(AbstractDelegatingSmartContextLoader.java:200) 	at org.springframework.test.context.ContextLoaderUtils.buildMergedContextConfiguration(ContextLoaderUtils.java:703) 	at org.springframework.test.context.ContextLoaderUtils.buildMergedContextConfiguration(ContextLoaderUtils.java:656) 	at org.springframework.test.context.DefaultTestContext.(DefaultTestContext.java:93) 	at org.springframework.test.context.TestContextManager.(TestContextManager.java:119) ```  ---  **Affects:** 4.0.3  **Issue Links:** - #16081 ContextLoader is supplied composed annotation class instead of test class for default resource detection  **Referenced from:** commits https://github.com/spring-projects/spring-hadoop/commit/0ef5c923618f69a61dfdb0b6d500f91d9ff941eb","closed","status: declined,","spring-projects-issues","2014-04-01T01:36:18Z","2019-01-12T16:35:03Z"
"","15898","Spring 4.0.0.RELEASE depends on aspectjweaver 1.8.0.M1 not found in Maven Central [SPR-11273]","**[Janne Sinivirta](https://jira.spring.io/secure/ViewProfile.jspa?name=vertti)** opened **[SPR-11273](https://jira.spring.io/browse/SPR-11273?redirect=false)** and commented  Spring 4.0.0.RELEASE depends on aspectjweaver 1.8.0.M1 which is not found in Maven Central.  ---  **Affects:** 4.0 GA  **Issue Links:** - #20525 Upgrade to AspectJ 1.9 beta 7 - #15873 Revisit spring-aspects 4.0.0 dependency on AspectJ 1.8.0.M1  1 votes, 5 watchers","closed","type: task,","spring-projects-issues","2014-01-01T21:52:25Z","2019-01-11T18:38:09Z"
"","16191","Cache.get(key, type) doesn't work in case of null value found in cache [SPR-11567]","**[Jan Novotný](https://jira.spring.io/secure/ViewProfile.jspa?name=novoj)** opened **[SPR-11567](https://jira.spring.io/browse/SPR-11567?redirect=false)** and commented  There is probably unwanted behaviour coded in class org.springframework.cache.ehcache.EhCacheCache in method org.springframework.cache.ehcache.EhCacheCache#get(java.lang.Object, java.lang.Class\). When there is no value cached (ie. value == null) there is no way this check could pass:  if (type != null && !type.isInstance(value)) { throw new IllegalStateException(""Cached value is not of required type ["" + type.getName() + ""]: "" + value); }  And this leads to unexpected Illegal state exceptions in expected situations when caches are empty.  ---  **Affects:** 4.0.2  **Issue Links:** - #15688 Add org.springframework.cache.Cache.get(key, type)","closed","in: core,","spring-projects-issues","2014-03-17T12:12:07Z","2019-01-11T21:35:07Z"
"","16349","If-Modified-Since header is parsed as HTTP-date; but IE 10 sends length [SPR-11727]","**[Jan Grek](https://jira.spring.io/secure/ViewProfile.jspa?name=jgrek)** opened **[SPR-11727](https://jira.spring.io/browse/SPR-11727?redirect=false)** and commented  If-Modified-Since header is parsed as HTTP-date; but IE 10 sends additional  length attribute in the header, e.g.: If-Modified-Since	Wed, 09 Apr 2014 09:57:42 GMT; length=13774  This hapens when pressed F5 The same can be happening in Firefox.  Could not complete request: java.lang.IllegalArgumentException: UT010008: Header Wed, 09 Apr 2014 09:57:44 GMT; length=5571 cannot be converted to a date at io.undertow.servlet.spec.HttpServletRequestImpl.getDateHeader(HttpServletRequestImpl.java:173) [undertow-servlet-1.0.0.Final.jar:1.0.0.Final] at javax.servlet.http.HttpServletRequestWrapper.getDateHeader(HttpServletRequestWrapper.java:117) [jboss-servlet-api_3.1_spec-1.0.0.Final.jar:1.0.0.Final] at javax.servlet.http.HttpServletRequestWrapper.getDateHeader(HttpServletRequestWrapper.java:117) [jboss-servlet-api_3.1_spec-1.0.0.Final.jar:1.0.0.Final] at javax.servlet.http.HttpServletRequestWrapper.getDateHeader(HttpServletRequestWrapper.java:117) [jboss-servlet-api_3.1_spec-1.0.0.Final.jar:1.0.0.Final] at org.springframework.web.context.request.ServletWebRequest.checkNotModified(ServletWebRequest.java:173) [spring-web-4.0.0.RELEASE.jar:4.0.0.RELEASE] at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:144) [spring-webmvc-4.0.0.RELEASE.jar:4.0.0.RELEASE] at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:51) [spring-webmvc-4.0.0.RELEASE.jar:4.0.0.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:945) [spring-webmvc-4.0.0.RELEASE.jar:4.0.0.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:876) [spring-webmvc-4.0.0.RELEASE.jar:4.0.0.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:931) [spring-webmvc-4.0.0.RELEASE.jar:4.0.0.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:822) [spring-webmvc-4.0.0.RELEASE.jar:4.0.0.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:687) [jboss-servlet-api_3.1_spec-1.0.0.Final.jar:1.0.0.Final] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:807) [spring-webmvc-4.0.0.RELEASE.jar:4.0.0.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) [jboss-servlet-api_3.1_spec-1.0.0.Final.jar:1.0.0.Final]   ---  **Affects:** 3.2.8, 4.0 GA  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: bug,","spring-projects-issues","2014-04-23T06:23:48Z","2014-06-11T05:18:52Z"
"","15610","Mallforme Content-Type is not translated to 415 status code [SPR-10982]","**[Jan Dudek](https://jira.spring.io/secure/ViewProfile.jspa?name=lfty)** opened **[SPR-10982](https://jira.spring.io/browse/SPR-10982?redirect=false)** and commented  I believe there's a glitch in `org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver#readWithMessageConverters(...)`. At the beginning of this method the Content-Type header must be obtained:  ``` MediaType contentType = inputMessage.getHeaders().getContentType(); if (contentType == null) {     contentType = MediaType.APPLICATION_OCTET_STREAM; } ```  If the `getContentType()` call fails (for example for `Content-Type: Hello`), a `InvalidMediaTypeException` is thrown.  I believe this exception should be caught here and re-thrown as `HttpMediaTypeNotSupportedException` which would be eventually translated to a 415 http status code (since in my opinion this is a 415 situation).   ---  **Affects:** 3.2.4","closed","type: bug,","spring-projects-issues","2013-10-11T09:23:54Z","2013-11-06T22:51:36Z"
"","15529","FactoryBean acts in a prototype way [SPR-10901]","**[Jan Dudek](https://jira.spring.io/secure/ViewProfile.jspa?name=lfty)** opened **[SPR-10901](https://jira.spring.io/browse/SPR-10901?redirect=false)** and commented  Let's have an implementation of `FactoryBean`:  ``` public class DemoFactoryBean implements FactoryBean {      public DemoInterface getObject() throws Exception {         return new DemoInterface() {};     }      public Class getObjectType() {         return DemoInterface.class;     }      public boolean isSingleton() {         return false;     } } ```  Everytime `getObject()` is called a new instance is created, therefore `isSingleton()` returns `false`.  Let's have the following context:  ```          ```  ... and this test:  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(""classpath:demoApplicationContext.xml"") public class DemoTest {      @Autowired     private DemoInterface o1;          @Autowired     private DemoInterface o2;          @Test     public void demo() {         assertTrue(o1 == o2);     }  } ```  This test fails on the referential equation. I would expect the `o1` and `o2` fields point to the same instance since the singleton autowiring is used implicitely.  Even more interestingly, the test passes when the `isSingleton()` is redefined (contrary to the javadoc) to return `true`.   ---  **Affects:** 3.2.2  1 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-09-09T07:26:57Z","2019-01-12T02:32:19Z"
"","15891","Missing documentation for testing Spring Messaging with WebSockets [SPR-11266]","**[James Steele](https://jira.spring.io/secure/ViewProfile.jspa?name=james.steele)** opened **[SPR-11266](https://jira.spring.io/browse/SPR-11266?redirect=false)** and commented  I understand that there is nothing like Spring MVC Test yet for Spring Websocket Messaging.  That said, it would be nice to have documentation and examples to get started testing ws controllers via test channels (per https://twitter.com/springframework/status/417670772413321217).  Preferably, these docs/examples would cover the basics and advanced topics as well (w/ sockjs, w/ stomp, w/ external broker mock, etc...).  Thank you.   ---  **Affects:** 4.0 GA  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-websocket/src/test/java/org/springframework/web/socket/config/annotation/WebSocketMessageBrokerConfigurationSupportTests.java#L149-149  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/19859fdb35009008da95d57ecacff259faca732f  2 votes, 5 watchers","closed","in: web,","spring-projects-issues","2013-12-30T12:44:10Z","2014-01-28T13:07:15Z"
"","16154","Autowiring unable to find generic dependency [SPR-11529]","**[Jair da Silva Ferreira Júnior](https://jira.spring.io/secure/ViewProfile.jspa?name=jair_jr)** opened **[SPR-11529](https://jira.spring.io/browse/SPR-11529?redirect=false)** and commented  Hi, I believe I found an issue with autowiring and generics. I can't really tell if this issue is a duplicate of #16096, so I decided to report it anyway. The main diference with this issue is that I use the `@Service` annotation instead of a factory method to create the GenericInterface1Impl spring bean. I attached a simple eclipse example project to show you the issue.  Here is my ""application-context.xml"" file:  ```xml    	 	  ```  I have 2 classes: ""GenericInterface1Impl"" and ""GenericInterface2Impl"". ""GenericInterface1Impl"" depends on an implementation of ""GenericInterface2"".  ``` @Service public class GenericInterface1Impl implements GenericInterface1{  	@Autowired 	private GenericInterface2 gi2;  	@Override 	public String doSomethingGeneric(T o) { 		return gi2.doSomethingMoreGeneric(o) + ""_somethingGeneric_"" + o; 	} 	 } ```  ``` @Service public class GenericInterface2Impl implements GenericInterface2{  	@Override 	public String doSomethingMoreGeneric(String o) { 		return ""somethingMoreGeneric_"" + o; 	} } ```  The issue is: spring can't find a qualifying bean for the attribute ""GenericInterface1Impl.gi2"" even though there's a suitable ""GenericInterface2"" implementation (GenericInterface2Impl) in the application context.  The exact same code works perfectly with spring version 3.2.8 but fails with spring version 4.0.2. You can easily change the spring version to 3.2.8 in ""pom.xml"" to verify that.  Here's the exception stack trace:  ``` Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'genericInterface1Impl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private spring.test.generics2.GenericInterface2 spring.test.generics2.GenericInterface1Impl.gi2; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [spring.test.generics2.GenericInterface2] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:700) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:139) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:83) 	at spring.test.generics2.App.main(App.java:13) Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private spring.test.generics2.GenericInterface2 spring.test.generics2.GenericInterface1Impl.gi2; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [spring.test.generics2.GenericInterface2] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289) 	... 13 more Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [spring.test.generics2.GenericInterface2] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:1100) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:855) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480) 	... 15 more  ```  ---  **Affects:** 4.0.2  **Attachments:** - [spring-generics2-test.zip](https://jira.spring.io/secure/attachment/21809/spring-generics2-test.zip) (_9.17 kB_)  **Issue Links:** - #16096 Autowiring unable to find generic dependency in case of nested unresolved type variable","closed","in: core,","spring-projects-issues","2014-03-07T16:25:09Z","2019-01-11T21:37:50Z"
"","16096","Autowiring unable to find generic dependency in case of nested unresolved type variable [SPR-11471]","**[Jair da Silva Ferreira Júnior](https://jira.spring.io/secure/ViewProfile.jspa?name=jair_jr)** opened **[SPR-11471](https://jira.spring.io/browse/SPR-11471?redirect=false)** and commented  Hi, I believe I found an issue with autowiring and generics. I attached a simple eclipse example project to show you the issue.  Here is my ""application-context.xml"" file:  ```xml    	 	 	 	  ```  I have 2 classes: ""GenericInterface1Impl"" and ""GenericInterface2Impl"". ""GenericInterface1Impl"" depends on an implementation of ""GenericInterface2"".  ``` public class GenericInterface1Impl implements GenericInterface1{  	@Autowired 	private GenericInterface2 gi2;  	@Override 	public String doSomethingGeneric(T o) { 		return gi2.doSomethingMoreGeneric(o) + ""_somethingGeneric_"" + o; 	} 	 	/** 	 * Factory Method 	 * @return an instance of GenericInterface1 	 */ 	public static GenericInterface1 create(){ 		return new GenericInterface1Impl(); 	}  }  ```  ```  public class GenericInterface2Impl implements GenericInterface2{  	@Override 	public String doSomethingMoreGeneric(String o) { 		return ""somethingMoreGeneric_"" + o; 	} }  ```  ""GenericInterface1Impl"" has a factory method that creates an instance of ""GenericInterface1\"".  The issue is: spring can't find a qualifying bean for the attribute ""GenericInterface1.gi2"" even though there's a suitable ""GenericInterface2\"" implementation (GenericInterface2Impl) in the application context.  The exact same code works perfectly with spring version 3.2.8 but fails with spring version 4.0.2. You can easily change the spring version to 3.2.8 in ""pom.xml"" to verify that.  Here's the exception stack trace:  ``` Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'spring.test.generics.GenericInterface1Impl#0': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private spring.test.generics.GenericInterface2 spring.test.generics.GenericInterface1Impl.gi2; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [spring.test.generics.GenericInterface2] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:700) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:139) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:83) 	at spring.test.generics.App.main(App.java:13) Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private spring.test.generics.GenericInterface2 spring.test.generics.GenericInterface1Impl.gi2; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [spring.test.generics.GenericInterface2] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289) 	... 13 more Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [spring.test.generics.GenericInterface2] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:1100) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:855) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480) 	... 15 more ```  Thanks, Jair Jr  ---  **Affects:** 4.0.2  **Attachments:** - [spring-generics-test.zip](https://jira.spring.io/secure/attachment/21692/spring-generics-test.zip) (_9.00 kB_)  **Issue Links:** - #16154 Autowiring unable to find generic dependency - #16146 Introspect factory method return type for type variable resolution at injection points  **Referenced from:** commits https://github.com/spring-projects/spring-session/commit/0abbba03094dae76934d9c6f5e9cf5521f3a75aa  0 votes, 6 watchers","closed","in: core,","spring-projects-issues","2014-02-22T13:11:36Z","2019-01-11T21:22:39Z"
"","16014","Custom headers are not sent in the stomp message [SPR-11387]","**[Jaimie Whiteside](https://jira.spring.io/secure/ViewProfile.jspa?name=jaimiewhiteside)** opened **[SPR-11387](https://jira.spring.io/browse/SPR-11387?redirect=false)** and commented  When calling the convertAndSend(destination, object, headers) method of a SimpMessagingTemplate instance, the headers are not added to the stomp message which is sent to the subscribers.  The StompHeaderAccessor.toStompHeaderMap calls toNativeHeaderMap which adds the native header map to the stomp message.   However, the headers map parameter of the convertAndSend method are not included.  See the stackoverflow reference url for further discussion.   ---  **Affects:** 4.0.1  **Reference URL:** http://stackoverflow.com/questions/21480352/custom-stomp-headers-using-spring-websockets  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/46c0e45130d804a81b8e78385e3386657f8f529c","closed","type: enhancement,","spring-projects-issues","2014-02-04T07:57:34Z","2014-02-18T22:36:50Z"
"","16216","Target Cache gets checked twice for every cache hit [SPR-11592]","**[Jacques Stadler](https://jira.spring.io/secure/ViewProfile.jspa?name=jasta)** opened **[SPR-11592](https://jira.spring.io/browse/SPR-11592?redirect=false)** and commented  #### Problem  Whenever you execute a cached method that has already been executed once, and therefore its result can be fetched from the cache, there will be 2 cache hits that happen for one execution of this method. See e.g. this snippet from the referenced GitHub project:  ```java       ServiceToCache obj = (ServiceToCache) context.getBean(""serviceToCache"");       Cache cache = (Cache) context.getBean(""cache"");        String key = ""1"";       String result1 = obj.returnSomeString(key);       // Before it calls the method the cache is checked       verify(cache, times(1)).get(key);        String result2 = obj.returnSomeString(key);       // Here we would expect that the cache was only called twice, but it is being called 3 times.       verify(cache, times(3)).get(key); ```  I would expect that if I execute a cached method once, there should only be one cache hit, not two.  #### Solution  As I see it the problem lies in `org.springframework.cache.interceptor.CacheAspectSupport.execute(Invoker, CacheOperationContexts)`:  ```java                 // Collect puts from any @Cachable miss 		List cachePutRequests = new ArrayList();                 // NOTE: This produces the first cache hit 		collectPutRequests(contexts.get(CacheableOperation.class), ExpressionEvaluator.NO_RESULT, cachePutRequests, true);  		ValueWrapper result = null;  		// We only attempt to get a cached result if there are no put requests 		if (cachePutRequests.isEmpty() && contexts.get(CachePutOperation.class).isEmpty()) {                 // NOTE: This produces the second cache hit 			result = findCachedResult(contexts.get(CacheableOperation.class)); 		} ```  I suppose the cached value should be fetched once, before calling the two methods (collectPutRequests, findCachedResult)  above.  ---  **Affects:** 4.0.2  **Reference URL:** https://github.com/stadler/poc-spring-cache  **Issue Links:** - #15750 Spring caching: combining multiple `@Cacheable` within `@Caching` annotation doesn't work  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-03-24T09:41:18Z","2019-01-14T05:17:01Z"
"","16032","Spring web sites down [SPR-11405]","**[Jacob Weber](https://jira.spring.io/secure/ViewProfile.jspa?name=jweber)** opened **[SPR-11405](https://jira.spring.io/browse/SPR-11405?redirect=false)** and commented  I'm using projects that reference XSDs at www.springframework.org; for example, http://www.springframework.org/schema/tx/spring-tx-3.1.xsd.  These URLs aren't loading; I'm getting a 522 ""Connection Timed Out"" message from CloudFlare. As a result, I can't deploy these projects.  It looks like http://forum.spring.io/ isn't working either; I'm getting a 503 error.   --- No further details from [SPR-11405](https://jira.spring.io/browse/SPR-11405?redirect=false)","closed","status: invalid,","spring-projects-issues","2014-02-08T13:23:51Z","2019-01-12T05:26:15Z"
"","16258","XStreamMarshaller forces XPP dependency [SPR-11635]","**[Jacob Daly](https://jira.spring.io/secure/ViewProfile.jspa?name=jakedaly)** opened **[SPR-11635](https://jira.spring.io/browse/SPR-11635?redirect=false)** and commented  In org.springframework.oxm.xstream.XStreamMarshaller the XStream object is declared at class level:  private final XStream xstream = new XStream();  As the no-argument constructor is used, XStream is constructed using the XppDriver class.  This therefore creates a runtime dependency on XPP.  It is therefore not possible to use other driver implementations such as DomDriver or StaxDriver.  Would it not be better to assign the xstream variable in a constructor of XStreamMarshaller?  This would allow extension of the class in order to provide another driver implementation.  ---  **Affects:** 3.1.4  **Issue Links:** - #15054 XStreamMarshaller - no way to set a MapperWrapper on XStream","closed","type: enhancement,","spring-projects-issues","2014-03-31T07:48:55Z","2019-01-11T21:04:32Z"
"","16119","array varargs conversion error in SpEL expression [SPR-11494]","**[Jacek Obarymski](https://jira.spring.io/secure/ViewProfile.jspa?name=panjacek)** opened **[SPR-11494](https://jira.spring.io/browse/SPR-11494?redirect=false)** and commented  The following test case (see ):  ```java ExpressionParser parser = new SpelExpressionParser(); Expression exp = parser.parseExpression(""T(java.util.Arrays).asList('a','b')""); List list = (List) exp.getValue(); assertThat(list.size(), is(2)); ```  throws an exception:  ``` java.lang.IllegalArgumentException: Final expected argument should be array type (the varargs parameter) 	at org.springframework.util.Assert.isTrue(Assert.java:65) 	at org.springframework.expression.spel.support.ReflectionHelper.compareArgumentsVarargs(ReflectionHelper.java:144) 	at org.springframework.expression.spel.support.ReflectiveMethodResolver.resolve(ReflectiveMethodResolver.java:154) 	at org.springframework.expression.spel.ast.MethodReference.findAccessorForMethod(MethodReference.java:189) 	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:118) 	at org.springframework.expression.spel.ast.MethodReference.access$100(MethodReference.java:44) 	at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:258) 	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:84) 	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:103) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:68) ```    ---  **Affects:** 4.0.2","closed","in: core,","spring-projects-issues","2014-02-28T04:27:41Z","2014-03-26T22:34:11Z"
"","15794","web-application crashing when setting a non-serializable object into session [SPR-11168]","**[J John](https://jira.spring.io/secure/ViewProfile.jspa?name=jjohn)** opened **[SPR-11168](https://jira.spring.io/browse/SPR-11168?redirect=false)** and commented  I upgraded spring versions of a spring-portlet-mvc application from 3.1.4.RELEASE to 3.25.RELEASE. And i am getting following exception, when ever trying to set a non-serializable object into portlet-session or servlet-session  ``` [#|2013-12-04T17:19:05.122+0200|INFO|oracle-glassfish3.1.2|javax.enterprise.system.std.com.sun.enterprise.server.logging|_ThreadID=157;_ThreadName=http-thread-pool-4270(3);|17:19:05,113 ERROR [CustomSimpleMappingExceptionResolver:109] An unexpected error occured. Redirecting to the error page. java.lang.IllegalArgumentException: PWC2788: setAttribute: Non-serializable attribute with name FOO_BAR         at org.apache.catalina.session.ManagerBase.checkSessionAttribute(ManagerBase.java:832)         at org.apache.catalina.session.StandardSession.setAttribute(StandardSession.java:1713)         at org.apache.catalina.session.StandardSessionFacade.setAttribute(StandardSessionFacade.java:178)         at com.liferay.portal.servlet.SharedSessionWrapper.setAttribute(SharedSessionWrapper.java:161)         at com.liferay.portlet.PortletSessionImpl.setAttribute(PortletSessionImpl.java:279)         at example.ExampleController.helloWorld(ExampleController.java:48) ```  My Application is running on a LiferayPortal-6.1 running on a Glassfish-3.1 server  The fix for https://jira.springsource.org/browse/SPR-10219 is causing this issue. The fix added \ tag in spring-web/src/main/resources/META-INF/web-fragment.xml, which may be making the whole application distributable and thus mandating all session-objs to be serializable.  ---  **Affects:** 3.2.5  **Reference URL:** http://forum.spring.io/forum/spring-projects/web/737218-web-application-crashing-when-setting-a-non-serializable-object-into-session?_=1386223570874&_=1386224884459  **Issue Links:** - #14852 Tomcat Session Replication not working with Spring 3.2 - #16016 Spring 3.2.2+ on GlassFish 3.1 leads to IllegalArgumentException: PWC2788: setAttribute: Non-serializable attribute  2 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2013-12-04T23:12:20Z","2019-01-12T16:35:34Z"
"","16268","Spring Messaging Multi Tenancy [SPR-11645]","**[Iyad Elian](https://jira.spring.io/secure/ViewProfile.jspa?name=ielian)** opened **[SPR-11645](https://jira.spring.io/browse/SPR-11645?redirect=false)** and commented  I am trying to provide my service which uses spring-messaging as a backend to applications. It seems there is no notion of application multi-tenancy in spring-messaging. There is a user space but no application space. it would be great if it can be enhanced to provide an application space similar to and preceding the user space so messages can be divided by app_id and authorized by access tokens. Let me know your thought and if the request is clear. Many Thanks.   ---  **Affects:** 4.0.3","closed","in: messaging,","spring-projects-issues","2014-04-01T12:36:35Z","2019-01-13T21:00:28Z"
"","16240","Cannot deploy spring-messaging 4.0.3 to tomcat 8.0.3 [SPR-11617]","**[Iyad Elian](https://jira.spring.io/secure/ViewProfile.jspa?name=ielian)** opened **[SPR-11617](https://jira.spring.io/browse/SPR-11617?redirect=false)** and commented  Tomcat 8.0.3 adds support for websockets 1.0 and Servlet 3.1 with non-blocking http connectors. I get this error trying to reach the SockJS endpoint. The war uses spring-messaging:4.0.3 and deploys okay but errors at first use  ```java @EnableWebSocketMessageBroker public class WebSocketConfig extends AbstractWebSocketMessageBrokerConfigurer {     @Override     public void registerStompEndpoints (StompEndpointRegistry registry)     {          registry.addEndpoint(DestinationMappings.STOMP_ENDPOINT).withSockJS();     } } ```  The Stack trace looks like this:  ```java 14:28:25,099 ERROR LoggingWebSocketHandlerDecorator:61 - Transport error for SockJS session id=j_hg8ehr java.lang.ClassCastException: org.apache.tomcat.websocket.server.WsServerContainer cannot be cast to javax.websocket.server.ServerContainer 	at org.springframework.web.socket.server.standard.AbstractStandardUpgradeStrategy.getContainer(AbstractStandardUpgradeStrategy.java:67) 	at org.springframework.web.socket.server.standard.TomcatRequestUpgradeStrategy.getContainer(TomcatRequestUpgradeStrategy.java:85) 	at org.springframework.web.socket.server.standard.TomcatRequestUpgradeStrategy.getContainer(TomcatRequestUpgradeStrategy.java:47) 	at org.springframework.web.socket.server.standard.AbstractStandardUpgradeStrategy.getSupportedExtensions(AbstractStandardUpgradeStrategy.java:88) 	at org.springframework.web.socket.server.support.DefaultHandshakeHandler.doHandshake(DefaultHandshakeHandler.java:206) 	at org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler.handleRequest(WebSocketTransportHandler.java:83) 	at org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.handleTransportRequest(TransportHandlingSockJsService.java:254) 	at org.springframework.web.socket.sockjs.support.AbstractSockJsService.handleRequest(AbstractSockJsService.java:317) 	at org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler.handleRequest(SockJsHttpRequestHandler.java:88) 	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:51) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:938) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:870) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:852) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:618) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:725) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:301) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ```  you can probably reproduce by deploying your stock sample to tomcat. I can run using jetty-maven-plugin:9.1.1.v20140108 fine. Let me know? Thanks.   ---  **Affects:** 4.0.3","closed","status: invalid,","spring-projects-issues","2014-03-27T14:43:14Z","2019-01-12T05:26:03Z"
"","16233","Spring message broker relay to Apache Apollo [SPR-11610]","**[Iyad Elian](https://jira.spring.io/secure/ViewProfile.jspa?name=ielian)** opened **[SPR-11610](https://jira.spring.io/browse/SPR-11610?redirect=false)** and commented  When I try to use Spring message broker with StompBrokerRelay instead of the SimpleBroker I get a weird exception on the apollo side. I tested stomp/ws on apache apollo from a simple client and it works fine. Here is the code on the spring side: StompBrokerRelayRegistration broker =  registry.enableStompBrokerRelay(""/queue/"", ""/topic/""); broker.setRelayHost(""localhost""); broker.setRelayPort(61614);  Here is the exception on the Apache Apollo side: 11:11:22,364 DEBUG AsyncHttpConnection:98 - HttpException(400,null,null) at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:377) at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:230) at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:77) at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:622) at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:46) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:724)  Can you help?   ---  **Affects:** 4.0.3","closed","status: declined,","spring-projects-issues","2014-03-26T11:23:44Z","2019-01-12T16:35:11Z"
"","16212","STOMP client support [SPR-11588]","**[Iyad Elian](https://jira.spring.io/secure/ViewProfile.jspa?name=ielian)** opened **[SPR-11588](https://jira.spring.io/browse/SPR-11588?redirect=false)** and commented  so I am trying to send a STOMP message over WebSockets using Spring and I am having problems with the code. I followed the samples and it suggests a StompMessageHandler which has a StompSession. What is that? I understand a WebSocketSession and over that I encode a StompMessage. So I do something like this instead: WebSocketSession session = stompClient.connect(handler); session.sendMessage(new StompMessage(StompCommand.SEND, ""topic/test"", ""Hi""));  My StompMessage extends WebSocketMessage\ but I can't just use that because AbstractWebSocketSessions.sendMessage checks on the types of the WebSocketMessage and it does not support a StompMessage. I can't extend TextMessage because it is final so I wrap a StompMessage with a TextMessage session.sendMessage(new TextMessage( new StompMessage(StompCommand.SEND, ""topic/test"", ""Hi"").getBytes()));  But I get session closed because AbstractWebSocketSession says public final void sendMessage(WebSocketMessage message) throws IOException { Assert.isTrue(isOpen(), ""Cannot send message after connection closed."");  STOMP is a text protocol the js guys have couple of lines stomp.js that encodes your message and send it over websocket. Why the java mess.  ---  **Affects:** 4.0.3  **Sub-tasks:** - #17411 [doc] Update reference for STOMP client  **Issue Links:** - [INT-3685](https://jira.spring.io/browse/INT-3685) Add Stomp Client Support (_**""is depended on by""**_) - #15423 Add SockJS client support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d30b3eaf55463d05338b9d2492ed0ae0bce94623  6 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2014-03-22T22:20:28Z","2019-01-13T21:00:41Z"
"","15933","Support responding/sending messages to a session even without an authenticated user [SPR-11309]","**[Ilyes, Ben Hassen](https://jira.spring.io/secure/ViewProfile.jspa?name=ilyes.bh)** opened **[SPR-11309](https://jira.spring.io/browse/SPR-11309?redirect=false)** and commented  The feature of message handling for a specific user with `/user` prefix was great. It allowed to simulate Request/Reply model without forcing the client to set extra ""reply-to"" headers and by using a generic destination name. This feature could, however, be extended to make Request/Reply for a specific Session without any Authentication requirement.  As with the `/user` prefix a client could subscribe to destination with a `/session`, e.g. `/session/queue/a` which will be handled by an extra SessionDestinationMessageHandler which will transform it into a destination unique to the session `/session/queue/a-{sessionId}`. On the Server side we could use it for example with the `@SentToSession` annotation to send the reply to `/session/{sessionId}/queue/a` which will be transformed by SessionDestinationMessageHandler to `/queue/a-{sessionId}` and than forwarded to the the Message Broker Handler who will notify the subscribed client.  In the attachment I have done a quick and dirty solution.  ---  **Affects:** 4.0 GA  **Attachments:** - [websocket_session.rar](https://jira.spring.io/secure/attachment/21599/websocket_session.rar) (_5.31 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/97fb308b6bbedd8cd79b9de04ee0fa2c0c431bb4  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-01-14T08:04:29Z","2019-01-13T21:01:36Z"
"","15931","SimpleBrokerMessageHandler destinationPrefixes are not trimmed [SPR-11307]","**[Ilyes, Ben Hassen](https://jira.spring.io/secure/ViewProfile.jspa?name=ilyes.bh)** opened **[SPR-11307](https://jira.spring.io/browse/SPR-11307?redirect=false)** and commented  In the SimpleBroker XML configuration , the prefix attribute is not trimmed, causing the checkDestinationPrefix() method in AbstractBrokerMessageHandler to return false and therefore the message will not be handled by the SimpleBrokerMessageHandler. Exp. following prefix  will cause all message with destination /queue/** to be ignored.   ---  **Affects:** 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ea0825c0a672b22a46794f87f7d7dc69e82422d9","closed","type: bug,","spring-projects-issues","2014-01-14T07:15:31Z","2014-01-28T13:07:05Z"
"","16272","AnnotationReadingVisitorUtils.getMergedAnnotationAttributes() overrides values it should not [SPR-11649]","**[Ilian Iliev](https://jira.spring.io/secure/ViewProfile.jspa?name=ilian)** opened **[SPR-11649](https://jira.spring.io/browse/SPR-11649?redirect=false)** and commented  #### Status Quo  I have the following class with 2 annotations:  ``` @VsoFinder(name=""some_name"", ...) @VsoObject(name=""another_name"", ...) public class SomeClass { /* ... */ } ```  In my app, there is the following call:  ``` Map attributes = annotMetadata.getAnnotationAttributes(VsoObject.class.getName()); ```  I'd expect this call to return the attributes/values defined in the `@VsoObject` annotation, and it worked fine in Spring versions up to 4.0.2. However, due to the changes introduced in conjunction with #16198 in Spring 4.0.3 the returned values are those coming from the `@VsoFinder` annotation.  A quick look at `AnnotationReadingVisitorUtils.getMergedAnnotationAttributes()` confirms that indeed the values of attributes with the same name are overridden with the values from annotations of _any_ type, not only from the _requested_ annotation type.  #### Deliverables  1. [x] Ensure that `AnnotationReadingVisitorUtils.getMergedAnnotationAttributes()` only overrides attributes in the target annotation with attributes from annotations that are annotated with the target annotation.  ---  **Affects:** 4.0.3  **Issue Links:** - #16198 Support meta-annotation attribute overrides in ASM-based annotation processing - #16332 AnnotationReadingVisitorUtils.getMergedAnnotationAttributes() mutates the map argument - #16331 Consider not overriding meta-annotation attributes if empty","closed","in: core,","spring-projects-issues","2014-04-02T08:46:26Z","2019-01-11T21:03:51Z"
"","15992","LiveBeansView generates invalid JSON on specific case [SPR-11366]","**[Ilayaperumal Gopinathan](https://jira.spring.io/secure/ViewProfile.jspa?name=iperumal)** opened **[SPR-11366](https://jira.spring.io/browse/SPR-11366?redirect=false)** and commented  In org.springframework.context.support.LiveBeansView, the JSON snapshot of beans has a comma "","" at the end of the last bean definition on a specific case when one of these met:  1) If any of the bean definitions in the context's bean factory is of infrastructure bean 2) If the bean is lazily initialized 3) If the bean is not singleton  It looks like the logic to generate the JSON in ""generateJson(Set\ contexts)"" method adds comma "","" to the bean definitions based on the beanNames length. But if any of the above conditions met this adds the comma to the last bean definition as well. This causes the JSON to be invalid.   ---  **Affects:** 3.2 GA, 4.0 GA  **Issue Links:** - [XD-1271](https://jira.spring.io/browse/XD-1271) Investigate missing boot's actuator endpoints in XD  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","type: bug,","spring-projects-issues","2014-01-28T13:40:44Z","2014-02-18T22:35:57Z"
"","16320","Provide an easy possibility to override the resolution of the cookie holding request in CookieLocaleResolver [SPR-11698]","**[Igor Mukhin](https://jira.spring.io/secure/ViewProfile.jspa?name=iimuhin)** opened **[SPR-11698](https://jira.spring.io/browse/SPR-11698?redirect=false)** and commented  If using Spring MVC with Spring Security the locale cookie on the login page is hidden unter `SecurityContextHolderAwareRequestWrapper`. So if you want to get the locale cookie from this request, you have to override the `CookieHoldingRequest` and do the following:  ``` // If this is the first request after the login if (request instanceof SecurityContextHolderAwareRequestWrapper) {     // Then we don't want the cookie from the original request before the login.     // We want the most actual cookie, because the user could have changed the lang on the login form                  // retrieve org.springframework.security.web.savedrequest.SavedRequestAwareWrapper     request = (HttpServletRequest) ((ServletRequestWrapper) request).getRequest();                   // retrieve the current HttpServletRequest     request = (HttpServletRequest) ((ServletRequestWrapper) request).getRequest(); } ```  In my patch I suggest a new method `resolveCookieHoldingRequest` in the class `CookieLocaleResolver`. This will facilitate the creation of a `CustomCookieLocaleResolver`.   ---  **Affects:** 4.0 GA, 4.0.3  **Attachments:** - [resolveCookieHoldingRequest.patch](https://jira.spring.io/secure/attachment/21948/resolveCookieHoldingRequest.patch) (_1.93 kB_)  **Issue Links:** - [SEC-2569](https://jira.spring.io/browse/SEC-2569) SavedRequestAwareWrapper should not override cookies (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2014-04-16T02:48:15Z","2014-04-21T07:11:35Z"
"","15603","MVC redirect with variables doesn't work [SPR-10975]","**[Igo](https://jira.spring.io/secure/ViewProfile.jspa?name=igo)** opened **[SPR-10975](https://jira.spring.io/browse/SPR-10975?redirect=false)** and commented  I have following Spring MVC 3.2.4 method:  ```java @RequestMapping(value = ""/products/{product}"", method = RequestMethod.POST) public String update(Product product, @Valid @ModelAttribute(""productForm"") ProductForm productForm, BindingResult bindingResult, Model model) {     if (bindingResult.hasErrors()) {         return ""products/view"";     }     mapper.map(productForm, product);     productService.saveProduct(product);     return ""redirect:/products/{product}""; } ```  After success it should redirect back user to detail of product. Problem is that instead of redirecting to page ""/products/1"" I am redirected to page ""/products/Product [code=1234567890, name=Nejaky]"". It looks like placeholder {product} is replaced by product.toString() instead of original ID from URL. I am using built-in Spring Data 1.6.1 converter:  ```xml                                ```  ---  **Affects:** 3.2.4","closed","status: invalid,","spring-projects-issues","2013-10-09T13:05:27Z","2019-01-13T21:02:19Z"
"","16073","Hibernate session cannot be found after upgrading Tomcat from 7.0.50 to 8.0.3 [SPR-11447]","**[Holger Stenzhorn](https://jira.spring.io/secure/ViewProfile.jspa?name=holger)** opened **[SPR-11447](https://jira.spring.io/browse/SPR-11447?redirect=false)** and commented  My web application uses a combination of Spring with Hibernate (currently at 4.2.8). In the application context, I define the following:  ```      ```  This is working as expected until Tomcat 7.0.50. But when I deploy on 8.0.3 the first attempt to access the database, i.e. when I am trying to login to the application, fails:  ``` 19-Feb-2014 16:27:24.083 SEVERE [http-nio-8084-exec-12] org.apache.catalina.core.StandardWrapperValve.invoke Servlet.service() for servlet [default] in context with path [/test] threw exception  org.hibernate.HibernateException: No Session found for current thread 	at org.springframework.orm.hibernate4.SpringSessionContext.currentSession(SpringSessionContext.java:97) 	at org.hibernate.internal.SessionFactoryImpl.getCurrentSession(SessionFactoryImpl.java:992) ```  After removing `mode=""aspectj""` from `` the above mentioned login works and so the session was obviously found then (but code marked with `@Transactional` fails now).  ---  **Affects:** 3.2.8  **Issue Links:** - #16072 Load Time Weaving not working after upgrading Tomcat from 7.0.50 to 7.0.52 - #15414 Use Tomcat 8's new instrumentable WebappClassLoader  2 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-02-19T09:18:02Z","2019-01-13T21:01:10Z"
"","16072","Load Time Weaving not working after upgrading Tomcat from 7.0.50 to 7.0.52 [SPR-11446]","**[Holger Stenzhorn](https://jira.spring.io/secure/ViewProfile.jspa?name=holger)** opened **[SPR-11446](https://jira.spring.io/browse/SPR-11446?redirect=false)** and commented  I have a Spring-based web application that employs load time weaving. For this I specify the javaagent on the command line when starting up Tomcat.  Now this has always worked perfectly until version 7.0.50 (included) of Tomcat. But after upgrading to 7.0.52 the load time weaving does not work anymore.  Needless to say that I still do specify the javaagent as I had done before. Also going back again to 7.0.50 (reusing the configuration of 7.0.52) the issue disappears again.  ``` 2014-02-19 16:41:31,338 ERROR [org.springframework.web.context.ContextLoader] - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.context.weaving.AspectJWeavingEnabler#0': Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'loadTimeWeaver': Initialization of bean failed; nested exception is java.lang.IllegalStateException: ClassLoader [org.apache.catalina.loader.WebappClassLoader] does NOT provide an 'addTransformer(ClassFileTransformer)' method. Specify a custom LoadTimeWeaver or start your Java virtual machine with Spring's agent: -javaagent:org.springframework.instrument.jar 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:529) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1121) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:674) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:461) 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:410) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:112) 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4973) 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5467) 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) 	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901) 	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877) 	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:632) 	at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:670) 	at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:547) 	at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1648) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:483) 	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301) 	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) 	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) 	at org.apache.catalina.manager.ManagerServlet.check(ManagerServlet.java:1445) 	at org.apache.catalina.manager.ManagerServlet.deploy(ManagerServlet.java:860) 	at org.apache.catalina.manager.ManagerServlet.doGet(ManagerServlet.java:356) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:620) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) 	at org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:108) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:610) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98) 	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:950) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408) 	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1040) 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:607) 	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:315) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:744) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'loadTimeWeaver': Initialization of bean failed; nested exception is java.lang.IllegalStateException: ClassLoader [org.apache.catalina.loader.WebappClassLoader] does NOT provide an 'addTransformer(ClassFileTransformer)' method. Specify a custom LoadTimeWeaver or start your Java virtual machine with Spring's agent: -javaagent:org.springframework.instrument.jar 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:529) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) 	at org.springframework.context.weaving.LoadTimeWeaverAwareProcessor.postProcessBeforeInitialization(LoadTimeWeaverAwareProcessor.java:95) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:396) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1505) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521) 	... 54 more Caused by: java.lang.IllegalStateException: ClassLoader [org.apache.catalina.loader.WebappClassLoader] does NOT provide an 'addTransformer(ClassFileTransformer)' method. Specify a custom LoadTimeWeaver or start your Java virtual machine with Spring's agent: -javaagent:org.springframework.instrument.jar 	at org.springframework.context.weaving.DefaultContextLoadTimeWeaver.setBeanClassLoader(DefaultContextLoadTimeWeaver.java:94) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeAwareMethods(AbstractAutowireCapableBeanFactory.java:1529) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1500) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521) 	... 63 more ```  ---  **Affects:** 3.2.8  **Issue Links:** - #15414 Use Tomcat 8's new instrumentable WebappClassLoader - #16073 Hibernate session cannot be found after upgrading Tomcat from 7.0.50 to 8.0.3  4 votes, 8 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-02-19T07:53:27Z","2019-01-12T02:45:49Z"
"","16351","Subscribtion restriction [SPR-11729]","**[Heinrich Kuhlmann](https://jira.spring.io/secure/ViewProfile.jspa?name=heinrich%20kuhlmann)** opened **[SPR-11729](https://jira.spring.io/browse/SPR-11729?redirect=false)** and commented  when trying to implement Subscribtion restrictions http://forum.spring.io/forum/spring-projects/web-services/725244-restricting-subscription-to-stomp-topic-based-on-role  I get the following error: {""JBAS014671: Failed services"" => {""jboss.undertow.deployment.default-server.default-host./wewago2"" => ""org.jboss.msc.service.StartException in service jboss.undertow.deployment.default-server.default-host./wewago2: Failed to start service Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'webSocketConfig': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.messaging.SubscribableChannel com.wewago.wewago.WebSocketConfig.webSocketRequestChannel; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [org.springframework.messaging.SubscribableChannel] is defined: expected single matching bean but found 4: org.springframework.messaging.support.ExecutorSubscribableChannel#0,clientInboundChannel,clientOutboundChannel,brokerChannel Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.messaging.SubscribableChannel com.wewago.wewago.WebSocketConfig.webSocketRequestChannel; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [org.springframework.messaging.SubscribableChannel] is defined: expected single matching bean but found 4: org.springframework.messaging.support.ExecutorSubscribableChannel#0,clientInboundChannel,clientOutboundChannel,brokerChannel Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [org.springframework.messaging.SubscribableChannel] is defined: expected single matching bean but found 4: org.springframework.messaging.support.ExecutorSubscribableChannel#0,clientInboundChannel,clientOutboundChannel,brokerChannel""}}  When I instanciate the ExecutorSubscribableChannel class instead of the SubscribableChannel interface `@autowired` then it will deploy but it will not intercept.  I am using Wildfly 8.0 and Spring 4.0.3   ---  **Affects:** 4.0.3","closed","status: declined,","spring-projects-issues","2014-04-12T06:59:16Z","2019-01-12T16:34:56Z"
"","15988","SchedulerAccessor 'globalJobListeners' and 'globalTriggerListeners' not working with 2.0.x and 2.1.x [SPR-11362]","**[Hatanaka, Akihiro](https://jira.spring.io/secure/ViewProfile.jspa?name=hatanaka)** opened **[SPR-11362](https://jira.spring.io/browse/SPR-11362?redirect=false)** and commented  With Quartz 2.0, SchedulerFactoryBean throws NoSuchMethodException.  My scheduler config in appliction.xml is below.  \ \ \ \ \ \ ... \  There is a bug in SchedulerAccessor#registerListeners().  Quartz 2.1, 2.2 has org.quartz.core.ListenerManagerImpl.addJobListener(JobListener). However, Quartz 2.0 does not have.  So this line throws NoSuchMethodException.  Method addJobListener = target.getClass().getMethod((quartz2 ? ""addJobListener"" : ""addGlobalJobListener""), JobListener.class);  ---  **Affects:** 3.2 GA, 3.2.6  **Issue Links:** - #15908 Full Quartz 2.2 compatibility, including LocalDataSourceJobStore - #15887 Require Jackson 2.1+, Quartz 2.1.4+, EhCache 2.5+  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fe4b57c199695cd91d985a17e1f2113f5a083675, https://github.com/spring-projects/spring-framework/commit/c719c70ea972552d45031cf3d281cc4d5dc1237d  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: bug,","spring-projects-issues","2014-01-27T18:37:57Z","2019-01-11T18:39:44Z"
"","15910","Binders are not called after spring web mvc upgrade from version 3.0 to 3.2.2 [SPR-11286]","**[hari krishna galla](https://jira.spring.io/secure/ViewProfile.jspa?name=galha02)** opened **[SPR-11286](https://jira.spring.io/browse/SPR-11286?redirect=false)** and commented  Our product uses spring web mvc 3.0 before and we recently upgraded to 3.2.2 version. After upgradation the binders (custom editors) stopped working. All our controller either extends SimpleFormController or AbstractFormController and we register our binders in the initbinder method like the following  protected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder) throws Exception { binder.registerCustomEditor(AppDef.class, new  AppDefPropertyEditor (configManager)); }  Problem: if user request has app def id then spring is calling binders to convert to AppDef object and this object is properly set to the command object. But while sending the response back to the browser then getAsText() of the registered custom editor is not being called by the framework. Hence the selected app def id is not going back and user loosing the selection.  This code was working with the old version of spirng before. Is there anything we are missing here in the new version?   ---  **Affects:** 3.2.2","closed","status: bulk-closed,","spring-projects-issues","2014-01-06T00:49:41Z","2019-01-12T02:46:20Z"
"","15859","orm.xml should be recognized by default if using JPA [SPR-11234]","**[Hantsy Bai](https://jira.spring.io/secure/ViewProfile.jspa?name=hantsy)** opened **[SPR-11234](https://jira.spring.io/browse/SPR-11234?redirect=false)** and commented  I used Hibernate as JPA provider and registered a LocalContainerEntityManagerFactoryBean without a persistence.xml.  But when I tried to resgiter a global audit entity listener in orm.xml file, it did not work.  I have to create a empty persistence.xml to make it work.  I think Spring should load the orm.xml by default if JPA is enabled, both with persistence.xml and without persistence.xml.  The related codes is hosted on my github.com  https://github.com/hantsy/spring-sandbox/tree/master/data-audit  ---  **Affects:** 3.2.6  **Issue Links:** - #13086 Add 'mappingLocations' to LocalContainerEntityManagerFactoryBean to scan any JPA mapping files (ORM.xml) in the classpath. - #19869 Unable to resolve persistence unit root URL with LocalContainerEntityManagerFactoryBean - #15885 Add potentially existing orm.xml file to default persistence unit when packages to scan is used - #18819 DefaultPersistenceUnitManager.determineDefaultPersistenceUnitRootUrl fails when run from a shaded jar  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4ae893e1106333d3ed33dfd571264d54bbe4486e  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-12-16T04:28:42Z","2019-01-11T18:26:09Z"
"","15858","Support Groovy scripts for bean definitions in the TestContext framework [SPR-11233]","**[Hantsy Bai](https://jira.spring.io/secure/ViewProfile.jspa?name=hantsy)** opened **[SPR-11233](https://jira.spring.io/browse/SPR-11233?redirect=false)** and commented  #### Status Quo  I tried to load a Groovy DSL based bean configuration in test classes; however, neither the `locations` nor `value` attributes of `@ContextConfiguration` supports Groovy resource scripts.  To solve this problem, I had to create a custom `ContextLoader` to load bean definitions from a Groovy script.  ---  #### Proposal  ```java @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(   locations=""/com/hantsylabs/example/spring/config/JpaConfigGroovy.groovy"",   loader = GenericGroovyContextLoader.class ) public class GroovyConferenceServiceTest {  	public static class GenericGroovyContextLoader extends 			AbstractGenericContextLoader {  		@Override 		protected BeanDefinitionReader createBeanDefinitionReader( 				GenericApplicationContext context) { 			return new GroovyBeanDefinitionReader(context); 		}  		@Override 		protected String getResourceSuffix() { 			return "".groovy""; 		}  	} } ```  This `SmartContextLoader` should be provided in `spring-test` and registered by default.  The complete code is hosted in [my GitHub account](https://github.com/hantsy/spring4-sandbox/tree/master/groovy-dsl).  ---  #### Deliverables  1. [x] Provide a first-class mechanism for declaring that a test's `ApplicationContext` should be loaded from Groovy scripts instead of resource locations, annotated classes, or an `ApplicationContextInitializer`   - for example, via a dedicated attribute in `@ContextConfiguration`.    - Supported via the standard `value` and `locations` attributes of `@ContextConfiguration` 2. [x] Implement a `SmartContextLoader` that loads a generic `ApplicationContext` from Groovy scripts.    - Introduced `GenericGroovyXmlContextLoader`. 3. [x] Implement a `SmartContextLoader` that loads a `WebApplicationContext` from Groovy scripts.    - Introduced `GenericGroovyXmlWebContextLoader`. 4. [x] Include the aforementioned Groovy-based context loaders in `DelegatingSmartContextLoader`.    - `GenericGroovyXmlContextLoader` is enabled if Groovy in on the classpath. 5. [x] Include the aforementioned Groovy-based context loaders in `WebDelegatingSmartContextLoader`.    - `GenericGroovyXmlWebContextLoader` is enabled if Groovy in on the classpath. 6. [ ] Ensure context caching works for contexts loaded from Groovy scripts.    - No special needs here since Groovy scripts will affect caching the same as any other path-based resource locations, analogous to XML configuration files.  ---  #### Further Resources  - [Groovy Bean Definition DSL](http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/new-in-4.0.html#_groovy_bean_definition_dsl) in the reference manual - [Groovy Bean Configuration in Spring Framework 4](http://spring.io/blog/2014/03/03/groovy-bean-configuration-in-spring-framework-4) blog by David Turanski - [Groovy Beans](https://github.com/dturanski/groovy-beans) examples on GitHub by David Turanski  ---  **Affects:** 4.0 GA  **Issue Links:** - #16643 Document Groovy script support in the TestContext framework in the reference manual (_**""is depended on by""**_) - #16254 Provide first class support for Groovy context loading in tests (_**""is duplicated by""**_) - #16250 GroovyDynamicElementReader tries to read a Groovy script as XML and fails - #15998 Create GroovyWebApplicationContext  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/105a6023b3a0541333f92bcac2c1c66e000a9daf, https://github.com/spring-projects/spring-framework/commit/f862a009a73c8603d6745c5bf9577e3705afe926, https://github.com/spring-projects/spring-framework/commit/35c372f200258f74721a82441a03313ee21fb315  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2013-12-16T04:21:21Z","2019-01-13T06:56:56Z"
"","15690","Provide XML Namespace for Configuring WebSocket and STOMP [SPR-11063]","**[Gunnar Hillert](https://jira.spring.io/secure/ViewProfile.jspa?name=hillert)** opened **[SPR-11063](https://jira.spring.io/browse/SPR-11063?redirect=false)** and commented  We should probably have equivalent namespace support for annotations such as:  * `@EnableWebSocketMessageBroker` * `@EnableWebSocket`  The workaround is fairly straight-forward, e.g. create a Java configuration class such as:  ``` @Configuration @EnableWebSocketMessageBroker @EnableScheduling public class WebSocketConfig implements WebSocketMessageBrokerConfigurer { ... ```  And then import the configuration in the XML application context file:  ```  ```  However, it would be nice to ultimately have feature-parity between the Java configuration and the XML namespace support.   ---  **Affects:** 4.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3ac14e7cd85cbb7793f91d38058a904f1abd609e, https://github.com/spring-projects/spring-framework/commit/10f5d96a783f85fcdba2ce9b846c751a40bd7fe0, https://github.com/spring-projects/spring-framework/commit/47ef45d15248d26331ed669b32136fec8bfd0cdb  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2013-11-04T07:42:48Z","2013-12-03T15:15:36Z"
"","15685","Websocket connection fails with /websocket Stomp Endpoint [SPR-11058]","**[Gunnar Hillert](https://jira.spring.io/secure/ViewProfile.jspa?name=hillert)** opened **[SPR-11058](https://jira.spring.io/browse/SPR-11058?redirect=false)** and commented  With the recommendation typically being to only have one websocket endpoint for an application, it may not make sense to give the websocket endpoint an application-specific moniker. People may just choose to name it **/websocket**.  That particular name, though, causes issues. The problem is that with an endpoint **/websocket** the websocket connection fails.  The problem, can be easily recreated with the Portfolio sample application: https://github.com/rstoyanchev/spring-websocket-portfolio  In class **WebSocketConfig**  ``` @Configuration @EnableWebSocketMessageBroker @EnableScheduling @ComponentScan(basePackages=""org.springframework.samples"") public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {  	@Override 	public void registerStompEndpoints(StompEndpointRegistry registry) { 		registry.addEndpoint(""/websocket"").withSockJS(); 	} ```  change  ``` registry.addEndpoint(""/portfolio"").withSockJS(); ```  to  ``` registry.addEndpoint(""/websocket"").withSockJS(); ```  (And change the respective html page to point to the new endpoint.)  With that change the browser console prints the following error:  ``` WebSocket connection to 'ws://localhost:8080/spring-websocket-portfolio/websocket/845/dh8fva7z/websocket' failed: Unexpected response code: 200 ```  The Portfolio application than falls back to long-polling. Interestingly when doing a non-Stomp endpoint (just plain websocket), an endpoint named **websocket** seems doable.   ---  **Affects:** 4.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2a6c1f75e7f9601d736dfebe5823e7070edf1db5","closed","type: bug,","spring-projects-issues","2013-11-02T19:44:16Z","2013-12-03T15:15:34Z"
"","15597","Add Conditional support to XML Configuration [SPR-10969]","**[Gunnar Hillert](https://jira.spring.io/secure/ViewProfile.jspa?name=hillert)** opened **[SPR-10969](https://jira.spring.io/browse/SPR-10969?redirect=false)** and commented  Spring 4.0 introduces the **Conditional** annotation for the Java-based configuration of Beans. It would be useful to provide similar capabilities to the XML Configuration.  ```      ...  ```    ---  **Affects:** 4.0 M3  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2013-10-08T14:40:11Z","2015-03-25T11:40:38Z"
"","15578","Make createRequestMappingInfo in RequestMappingHandlerMapping protected [SPR-10950]","**[Gunnar Hillert](https://jira.spring.io/secure/ViewProfile.jspa?name=hillert)** opened **[SPR-10950](https://jira.spring.io/browse/SPR-10950?redirect=false)** and commented  For Spring Integration Jira [INT-2312](https://jira.spring.io/browse/INT-2312), we needed to invoke RequestMappingHandlerMapping#createRequestMappingInfo using reflection.  * PR: https://github.com/spring-projects/spring-integration/pull/723 * Jira: https://jira.springsource.org/browse/INT-2312  As Spring Integration 4.0 will use Spring 4.0 as basis, it would be helpful if RequestMappingHandlerMapping#createRequestMappingInfo could possibly be made at least protected.   ---  **Affects:** 4.0 M3  **Issue Links:** - [INT-3160](https://jira.spring.io/browse/INT-3160) Avoid Reflection when accessing createRequestMappingInfo in RequestMappingHandlerMapping (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2013-10-01T11:33:47Z","2013-10-31T12:28:02Z"
"","15557","Add IssueManagement declaration to POMs [SPR-10929]","**[Guillaume Rosauro](https://jira.spring.io/secure/ViewProfile.jspa?name=willome)** opened **[SPR-10929](https://jira.spring.io/browse/SPR-10929?redirect=false)** and commented  It would be nice to get the IssueManagement declared in pom.xml like this :  ```   Jira  https://jira.springsource.org/browse/SPR   ```    ---  **Affects:** 3.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4abe4e9999386484803f7e9ff176f260fe39badb","closed","type: enhancement,","spring-projects-issues","2013-09-23T03:44:40Z","2013-10-31T12:27:50Z"
"","15960","orm.xml named queries transaction throw RollbackException [SPR-11336]","**[grf110](https://jira.spring.io/secure/ViewProfile.jspa?name=grf110)** opened **[SPR-11336](https://jira.spring.io/browse/SPR-11336?redirect=false)** and commented  1. Spring data jpa(1.4.3) entityManagerFactory config mappingResources value=""META-INF/orm.xml"" 2. Repository add query method and add jpql to orm.xml 3. Call repository query method in service(`@Transactional`) 4. Throw RollbackException(org.springframework.orm.jpa.JpaTransactionManager#doCommit #526)  * Use `@Query`(' .. jpql ..') is ok!    ---  **Affects:** 3.2.6","closed","in: data,","spring-projects-issues","2014-01-20T18:11:38Z","2019-01-11T19:01:50Z"
"","15923","Add patch() to MockMvcRequestBuilders [SPR-11299]","**[Greg Turnquist](https://jira.spring.io/secure/ViewProfile.jspa?name=gregturn)** opened **[SPR-11299](https://jira.spring.io/browse/SPR-11299?redirect=false)** and commented  While working on a pull request for Spring Data REST for PATCH support, I started writing a test case, only to discover we don't have a patch() method to simulate an HTTP PATCH. It would be very useful and probably not a lot of effort to add that on.   ---  **Affects:** 3.2.6, 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3db6a7f715b29f273e5de94abbc45f8c2cb3a867, https://github.com/spring-projects/spring-framework/commit/6b0d88721cbf87ee71c85d9609479bfd6b869cb6  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-01-10T12:53:12Z","2014-01-28T13:07:08Z"
"","15553","Lookup of beans of type doesn't return beans from parentBeanFactory [SPR-10925]","**[Gilles Zimmermann](https://jira.spring.io/secure/ViewProfile.jspa?name=q-bus)** opened **[SPR-10925](https://jira.spring.io/browse/SPR-10925?redirect=false)** and commented  In our project, we switched from having a single application context to two different app-ctx (web and ejb). the two ctx have a child-parent-relation, while the web works as child and the ejb as parent.  Since this change we do have any troubles getting the beans while calling the method: ApplicationContext#getBeansOfType(Class).  Having a closer look into the implementation of DefaultListableBeanFactory#doGetBeanNamesForType(Class, boolean, boolean) and DefaultListableBeanFactory#getBeanDefinitionNames(), is there a recursive call for any possible parent context missing?  I'm asking this question, since the DefaultListableBeanFactory#getBean(Class) does have a call for the parentBeanFactory and is returning the required bean coming from the parent-context while getBeansOfType does not or do I miss anything here?   ---  **Affects:** 3.2.4","closed","in: core,","spring-projects-issues","2013-09-18T05:55:51Z","2019-01-12T05:26:39Z"
"","15611","build problem with jopt-simple 4.5 [SPR-10983]","**[gil](https://jira.spring.io/secure/ViewProfile.jspa?name=gil)** opened **[SPR-10983](https://jira.spring.io/browse/SPR-10983?redirect=false)** and commented  hi spring-core build fine with jopt-simple  [Help 1] ```  any ideas?  thanks   --- No further details from [SPR-10983](https://jira.spring.io/browse/SPR-10983?redirect=false)","closed","in: core,","spring-projects-issues","2013-10-12T13:52:32Z","2019-01-12T16:35:48Z"
"","15642","""Illegal instant due to time zone offset transition"" when binding with LocalDate (joda) in Controller handler [SPR-11014]","**[Gerson](https://jira.spring.io/secure/ViewProfile.jspa?name=gersonk)** opened **[SPR-11014](https://jira.spring.io/browse/SPR-11014?redirect=false)** and commented  LocalDate should never throw an 'time zone offset transition' exception as it doesn't reference a timezone.    ---  **Affects:** 3.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/48b9e9a2034d9bcaa3b5c2bd62c827f1fae6be7b","closed","in: core,","spring-projects-issues","2013-10-21T13:56:02Z","2013-10-31T12:27:55Z"
"","15590","Provide getters to MailMessage properties [SPR-10962]","**[Gerrit Hübbers](https://jira.spring.io/secure/ViewProfile.jspa?name=abdull)** opened **[SPR-10962](https://jira.spring.io/browse/SPR-10962?redirect=false)** and commented  Currently, `org.springframework.mail.MailMessage` provides setters to its properties such as `to`, `from`, and `subject`. It does not provide **getters** to any of its properties.  This limits `MailMessage` usefulness. For example, Spring Batch's `org.springframework.batch.item.mail.MailErrorHandler` has a method `handle(MailMessage message, Exception exception)`. This method can actually only then investigate and handle the failed message when it has downcasted the `MailMessage` to a subclass which provides getters.   ---  **Affects:** 3.2.4  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-10-07T05:53:37Z","2019-01-12T00:22:09Z"
"","15568","Provide access to SimpleTriggerFactoryBean property startTime [SPR-10940]","**[Gerrit Hübbers](https://jira.spring.io/secure/ViewProfile.jspa?name=abdull)** opened **[SPR-10940](https://jira.spring.io/browse/SPR-10940?redirect=false)** and commented  Currently, `org.springframework.scheduling.quartz.SimpleTriggerFactoryBean` doesn't support access to the `startTime` property. (see https://github.com/spring-projects/spring-framework/blob/master/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SimpleTriggerFactoryBean.java).  `startTime` is a useful property, as it allows specifying a precise instance in time when the `SimpleTrigger` shall fire for the first time.  As a workaround to emulate this property, a user can awkwardly calculate an offset from the current system time and then set the `startDelay` property. This workaround is also causing unneccessary scheduling imprecision.  Therefore, it is beneficial to provide direct access to the `startTime` property.  ---  **Affects:** 3.2.4, 4.0 GA  **Issue Links:** - #14405 CronTriggerFactoryBean doesn't allow calendar name and description to be specified  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dbfe68a6dc2b424f9174327363cea24c43a726ed, https://github.com/spring-projects/spring-framework/commit/ab6c6b104d1ad35f99a09537474b3f31258efda8, https://github.com/spring-projects/spring-framework/commit/b228a06e07725f77b8b17249aaed4bf47926fc55  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: enhancement,","spring-projects-issues","2013-09-26T10:04:29Z","2019-01-11T22:10:31Z"
"","15534","ClassPathResource's constructors should allow ""classpath:""-style path strings [SPR-10906]","**[Gerrit Hübbers](https://jira.spring.io/secure/ViewProfile.jspa?name=abdull)** opened **[SPR-10906](https://jira.spring.io/browse/SPR-10906?redirect=false)** and commented  When instantiating a ClassPathResource using any of its constructors, the provided path string isn't allowed to be prefixed with ""classpath:""  ``` Resource batchSchemaScript = new ClassPathResource(""classpath:/org/springframework/batch/core/schema-hsqldb.sql""); //this doesn't work ```  ``` Resource batchSchemaScript = new ClassPathResource(""org/springframework/batch/core/schema-hsqldb.sql""); //this works ```  Throughout the Spring Framework, `classpath:/some/package/some/file.abc` is a often-used means to express references to a file within the classpath. It is rather confusing that ClassPathResource doesn't follow this style.  Therefore, it will be less confusing for a Spring user if ClassPathResource allows paths prefixed with `classpath:`.   ---  **Affects:** 3.2 GA  **Reference URL:** http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/resources.html#resources-implementations-classpathresource","closed","status: bulk-closed,","spring-projects-issues","2013-09-10T11:44:40Z","2019-01-12T02:32:16Z"
"","16217","lookup-method fails for java 8 if invoked in constructor [SPR-11593]","**[George Baxter](https://jira.spring.io/secure/ViewProfile.jspa?name=gjbaxter)** opened **[SPR-11593](https://jira.spring.io/browse/SPR-11593?redirect=false)** and commented  We are attempting to upgrade to java 8 and hit one issue with Spring's lookup-method.  If the abstract cgi-enhanced method is invoked in the constructor, it fails with an AbstractMethodError.  If we move the code out of the constructor to an init-method, it works fine.  Constructor invocation worked fine in Java7, Spring 3.2.5.    ---  **Affects:** 4.0.2","closed","in: core,","spring-projects-issues","2014-03-24T10:15:06Z","2019-01-12T16:35:13Z"
"","16332","AnnotationReadingVisitorUtils.getMergedAnnotationAttributes() mutates the map argument [SPR-11710]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-11710](https://jira.spring.io/browse/SPR-11710?redirect=false)** and commented  [Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)  ``` List attributesList = attributesMap.get(annotationType); ... AnnotationAttributes results = attributesList.get(0);  ...     results.put(overridableAttributeName, value); ```  gets a hard reference to the map element and removes the value from that entry's list.  Consider:  ``` @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @MessagingGateway(defaultRequestChannel = ""gatewayChannel"", defaultReplyChannel = ""gatewayChannel"", 		defaultHeaders = @GatewayHeader(name = ""foo"", value = ""FOO"")) public static @interface TestMessagingGateway {  	String defaultRequestChannel() default """";  } ```  and  ``` MultiValueMap metaAttributesMap = importingClassMetadata.getAllAnnotationAttributes(MessagingGateway.class.getName()); Map annotationAttributes = importingClassMetadata.getAnnotationAttributes(MessagingGateway.class.getName()); metaAttributesMap = importingClassMetadata.getAllAnnotationAttributes(MessagingGateway.class.getName()); ```  first call to `getAllAnnotationAttributes()`:  ``` {asyncExecutor=[], mapper=[], errorChannel=[], defaultRequestChannel=[gatewayChannel], ... ```  second call:  ``` {name=[], asyncExecutor=[], mapper=[], errorChannel=[], defaultRequestChannel=[], ... ```  ---  **Affects:** 4.0.3  **Issue Links:** - #16198 Support meta-annotation attribute overrides in ASM-based annotation processing - #16272 AnnotationReadingVisitorUtils.getMergedAnnotationAttributes() overrides values it should not  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/82c32db5a1c581ee97d6ec669ddde5b87c86faed, https://github.com/spring-projects/spring-framework/commit/e1720d89fcf65fca6b244df1696c1df67fc0c808","closed","type: bug,","spring-projects-issues","2014-04-18T11:43:27Z","2019-01-11T21:20:21Z"
"","16331","Consider not overriding meta-annotation attributes if empty [SPR-11709]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-11709](https://jira.spring.io/browse/SPR-11709?redirect=false)** and commented  In `AnnotationReadingVisitorUtils.getMergedAnnotationAttributes()`, the attributes closer to the annotated element override those in the hierarchy.  It would be useful if this only occurred if the closer attribute was not-empty.  For example:  ```java @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @MessagingGateway(defaultRequestChannel = ""gatewayChannel"", 		defaultHeaders = @GatewayHeader(name = ""foo"", value = ""FOO"")) public static @interface TestMessagingGateway {  	String defaultRequestChannel() default """"; } ```  This allows the user to override the ""default"" setting in the meta-annotation, but the current logic replaces the default with """" if the user does not specify a value when using the annotation.  The same applies to attributes with array values; consider preventing the override of a higher-up array with an empty array closer to the declaration.  ---  **Affects:** 4.0.3  **Issue Links:** - #16198 Support meta-annotation attribute overrides in ASM-based annotation processing - #16272 AnnotationReadingVisitorUtils.getMergedAnnotationAttributes() overrides values it should not - #17335 AnnotatedElementUtils fails to find annotations on abstract, bridge, or interface methods - [INT-3376](https://jira.spring.io/browse/INT-3376) Merge Messaging Meta-Annotation Attributes  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-04-18T09:49:35Z","2019-01-11T21:20:14Z"
"","16200","Introduce system property to disable context caching in the TestContext framework [SPR-11576]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-11576](https://jira.spring.io/browse/SPR-11576?redirect=false)** and commented  Currently, when using `@ContextConfiguration` and `SpringJunit4ClassRunner`, the context is only `close()` d (AFTER CLASS) if the class is annotated with `@DirtiesContext`.  I don't know if this is a change in behavior or has always been this way, but it seems non-intuitive to me, given that the context is no longer available for use.  With ""active"" contexts (such as Spring Integration) this can cause issues when many tests are run, for example in a gradle build. Aside from the memory/cpu, it can cause unfortunate side effects (such as MBean name collisions, test cross-talk when using the same JMS queue name, etc).  We have started to mark our tests with class-level `DirtiesContext` but I wonder if this behavior is intentional.  If this would be considered too big a change, perhaps we could consider a system property, e.g. `spring.always.close.test.context.after.class` ?  ---  **Affects:** 3.0 GA  **Issue Links:** - #12343 Use soft or weak references for context caching in the TestContext framework - #12710 Limit size of context cache in the TestContext framework","closed","type: enhancement,","spring-projects-issues","2014-03-18T13:04:07Z","2019-01-11T21:33:59Z"
"","16184","SQL Scripts with newline separators no longer work [SPR-11560]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-11560](https://jira.spring.io/browse/SPR-11560?redirect=false)** and commented  Attempting to execute the following SQL script using a `ResourceDatabasePopulator`...  ```sql CREATE ALIAS IF NOT EXISTS GET_PRIME_NUMBERS FOR ""org.springframework.integration.jdbc.storedproc.h2.H2StoredProcedures.getPrimes"" CREATE ALIAS IF NOT EXISTS GET_RANDOM_NUMBER FOR ""org.springframework.integration.jdbc.storedproc.h2.H2StoredProcedures.random"" ```  ... now results in the following exception:  ``` Caused by: org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement ""CREATE ALIAS IF NOT EXISTS GET_PRIME_NUMBERS FOR """"org.springframework.integration.jdbc.storedproc.h2.H2StoredProcedures.getPrimes"""" CREATE[*] ALIAS IF NOT EXISTS GET_RANDOM_NUMBER FOR """"org.springframework.integration.jdbc.storedproc.h2.H2StoredProcedures.random""""""; SQL statement: CREATE ALIAS IF NOT EXISTS GET_PRIME_NUMBERS FOR ""org.springframework.integration.jdbc.storedproc.h2.H2StoredProcedures.getPrimes"" CREATE ALIAS IF NOT EXISTS GET_RANDOM_NUMBER FOR ""org.springframework.integration.jdbc.storedproc.h2.H2StoredProcedures.random"" [42000-175] ```  Using `;` as the statement separator in the script file resolves this particular case.  This appears to have been caused by the fix to #14165  ---  **Affects:** 4.0.3  **Issue Links:** - #16310 Support EOF as statement separator in SQL scripts (_**""is depended on by""**_) - #20450 H2 aliases are not supported in SQL ScriptUtils - #14165 Support multi-line SQL comments in ResourceDatabasePopulator and JdbcTestUtils  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cc0ae3a881dde5910ecc340fa20c2365dd7474fa, https://github.com/spring-projects/spring-framework/commit/bb67cd4657ee288d9a0a80c8e81f24308a6b1c0a, https://github.com/spring-projects/spring-framework/commit/9230b38aea41316d78dc2f1bb206ce7a92b9ca56","closed","type: bug,","spring-projects-issues","2014-03-15T09:38:46Z","2019-01-11T21:34:37Z"
"","16104","CollectionToCollectionConverter.convert() improvement for untyped collections [SPR-11479]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-11479](https://jira.spring.io/browse/SPR-11479?redirect=false)** and commented  Consider - source : ArrayList - sourceType : java.util.ArrayList - targetType : java.util.Collection  Line #63...  https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionConverter.java#L63  ...determines that `copyRequired == false` .  However, line 70 then proceeds to copy the elements from the source to the target, which is eventually discarded, when line #84 simply returns the source.  It looks to me like it should have  ``` if (copyRequired) {}  ``` around the for loop. The else clause needs to run, in case `copyRequired` gets changed to true. ```    ---  **Affects:** 3.2.8, 4.0.2  **Issue Links:** - [INT-3306](https://jira.spring.io/browse/INT-3306) Aggregator memory usage raises serious performance issue  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bea94d5302e16f72a64377c052595a1976629dde, https://github.com/spring-projects/spring-framework/commit/d317b637e075805c1514b42f7b33c68b7ad3ddfb  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-02-24T13:25:05Z","2014-03-26T22:34:11Z"
"","16094","Support Mutable Messages with optional ID and timestamp headers [SPR-11468]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-11468](https://jira.spring.io/browse/SPR-11468?redirect=false)** and commented  High volume data ingestion in Spring Integration requires a mutable message (so messages can be reused, avoiding garbage collection).  Also, it will be beneficial if the creation of `ID` and `timestamp` headers can be made optional.  To support the Spring Integration `MutableMessage` we require some loosening of constraints on the `MessageHeaders` object; specifically:  - Remove final modifier on class - Add a protected no-arg constructor - Add a protected getter for the `headers` field (e.g. `getRawHeaders()`  ---  **Affects:** 4.0.2  **Issue Links:** - [INT-3309](https://jira.spring.io/browse/INT-3309) Add MessageBuilderFactory Strategy - #16276 NPE in AbstractMessageSendingTemplate when headers are null and converter returns null - #19827 MessageHeaderAccessor's MutableMessageHeaders should be serializable  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/509","closed","type: enhancement,","spring-projects-issues","2014-02-22T09:11:56Z","2019-01-11T21:23:54Z"
"","16065","MessageBuilder.fromMessage() Uses the Original Message ID and Timestamp [SPR-11439]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-11439](https://jira.spring.io/browse/SPR-11439?redirect=false)** and commented  Usually (previously in SI) when a message is mutated - e.g. `MessageBuilder.fromMessage(message).setHeader(...).build()` a new message id and timestamp is generated.  Now, the message builder simply wraps the existing headers in a new accessor.   ---  **Issue Links:** - [INT-3302](https://jira.spring.io/browse/INT-3302) MessageBuilder.fromMessage() No Longer Updates ID and Timestamp Headers","closed","status: invalid,","spring-projects-issues","2014-02-18T13:53:52Z","2019-01-12T05:26:14Z"
"","15972","SpEL Projection Regression [SPR-11348]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-11348](https://jira.spring.io/browse/SPR-11348?redirect=false)** and commented  Projection Expression:  `new java.util.ArrayList(#root).![payload].toString()`  where the root object is an `UnmodifiableCollection` of messages whose payloads are Integers....  ``` [[Payload Integer content=0][Headers={correlationId=1, sequenceSize=5, sequenceNumber=0, id=f701482f-9d91-7c4e-9f69-c07baa37938e, timestamp=1390425289802}], [Payload Integer content=1][Headers={correlationId=1, sequenceSize=5, sequenceNumber=1, id=13ffdd8f-5d02-d336-e213-3d4aa89c84c8, timestamp=1390425289806}], [Payload Integer content=2][Headers={correlationId=1, sequenceSize=5, sequenceNumber=2, id=2b278fe4-0155-8758-5f84-2a5df91146cc, timestamp=1390425289806}], [Payload Integer content=3][Headers={correlationId=1, sequenceSize=5, sequenceNumber=3, id=56fba1c0-5fd4-8955-9924-0c1a9a239251, timestamp=1390425289807}], [Payload Integer content=4][Headers={correlationId=1, sequenceSize=5, sequenceNumber=4, id=13632546-5842-e1f8-845c-ef95d28c78ef, timestamp=1390425289807}]] ```  In 4.0.0 SpEL correctly resolves to the `public java.util.ArrayList(java.util.Collection)` ctor.  With the 4.0.1 snapshot, it resolves to the `ArrayList(int)` ctor.  resulting in  `No converter found capable of converting from type java.util.Collections$UnmodifiableCollection to type int`    ---  **Affects:** 4.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/86fc2dd5563d4e9ee4fda2fbd5e513eec19c3a70","closed","in: core,","spring-projects-issues","2014-01-22T13:33:20Z","2014-01-28T13:07:16Z"
"","15971","Handle NoClassDefFoundError for TestExecutionListeners consistently in the TestContext framework [SPR-11347]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-11347](https://jira.spring.io/browse/SPR-11347?redirect=false)** and commented  #### Background  Changes introduced in #15964 cause subclasses of abstract base test classes (i.e. `AbstractJUnit4SpringContextTests` and `AbstractTestNGSpringContextTests`) in a non-web environment to fail with `java.lang.NoClassDefFoundError: javax/servlet/ServletContext`.  There are a number of such test classes in Spring Integration that now break due to #15964.  ---  #### Analysis  The fact that abstract base test classes pull in `ServletTestExecutionListener` is not problematic on its own (at least not with regard to the intended behavior of the TestContext framework's support for default listeners). Rather, the issue here is that a `NoClassDefFoundError` is handled differently for implicit default listeners (i.e., listeners not declared via `@TestExecutionListeners`) and listeners explicitly declared via `@TestExecutionListeners`.  The following code snippet from `TestContextManager.retrieveTestExecutionListeners()` represents the status quo.  ``` try { 	listeners.add(BeanUtils.instantiateClass(listenerClass)); } catch (NoClassDefFoundError err) { 	if (defaultListeners) { 		if (logger.isDebugEnabled()) { 			logger.debug(""Could not instantiate default TestExecutionListener class ["" 					+ listenerClass.getName() 					+ ""]. Specify custom listener classes or make the default listener classes available.""); 		} 	} 	else { 		throw err; 	} } ```  In the case of `AbstractJUnit4SpringContextTests` and `AbstractTestNGSpringContextTests`, the `ServletTestExecutionListener` is explicitly declared via `@TestExecutionListeners` as a convenience for the developer; however, `ServletTestExecutionListener` is still considered a _default_ from the perspective of the end user. The try-catch block in `retrieveTestExecutionListeners()` should therefore be amended to work as intended for both implicit and explicit defaults.  ---  #### Deliverables  1. [x] Refactor the try-catch block in `TestContextManager.retrieveTestExecutionListeners()` as follows:    1. Always swallow the `NoClassDefFoundError`.    2. Change log level from `DEBUG` to `INFO`.    3. Do not include the stack trace with log output.  ---  **Affects:** 4.0.1  **Issue Links:** - #15964 ServletTestExecutionListener is not enabled by default in abstract base test classes - #16424 getTestExecutionListeners() doesn't detect NoClassDefFoundError within BeanInstantiationException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fb12e234fcee416c4ea6359a2242ce7e3977b0b6, https://github.com/spring-projects/spring-framework/commit/c1569d7ecd19a445b6e0030ec52eac0b6b9c8d14  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)  0 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2014-01-22T12:49:14Z","2019-01-13T06:56:17Z"
"","15969","Add Missing Constructors Back to MessageHandlingException [SPR-11345]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-11345](https://jira.spring.io/browse/SPR-11345?redirect=false)** and commented  Constructor variants that do not include a description parameter were dropped from this class when moved from Spring Integration to spring-messaging. The parent class `MessagingException` has them.  We can work around this by using another constructor and replicating the code in `Throwable(Throwable cause)`:  `throw new MessageHandlingException(message, e.toString(), e);`  or, by simply adding back the missing constructors.  I will submit a PR for your consideration.   ---  **Affects:** 4.0 GA  **Issue Links:** - [INT-3271](https://jira.spring.io/browse/INT-3271) Restore MessageHandlingException Behavior  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0e7b94f9e906b6944ef17c33eb4e4f0e04d403e6","closed","type: enhancement,","spring-projects-issues","2014-01-22T11:17:34Z","2014-01-28T13:07:21Z"
"","15684","SpEL Documentation Incorrectly Says +/- is Supported on Date [SPR-11057]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-11057](https://jira.spring.io/browse/SPR-11057?redirect=false)** and commented  ""The addition operator can be used on numbers, strings and dates. Subtraction can be used on numbers and dates.""  But there is no `OperatorOverloader` for `java.util.Date`.  ``` Expression foo = new SpelExpressionParser().parseExpression(""#a + 1""); StandardEvaluationContext ctx = new StandardEvaluationContext(); ctx.setVariable(""a"", new Date()); System.out.println(foo.getValue(ctx)); ```  EL1030E:(pos 0): The operator 'ADD' is not supported between objects of type 'java.util.Date' and 'java.lang.Integer'   ---  **Reference URL:** http://stackoverflow.com/questions/19742627/operators-for-dates-in-spel  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5c7eaaa9699ed4cc2ec5c1296ee5bb7d04a637ee","closed","in: core,","spring-projects-issues","2013-11-02T07:53:26Z","2013-12-03T15:15:30Z"
"","15675","NPE in MatchAlwaysTransactionAttributeSource [SPR-11048]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-11048](https://jira.spring.io/browse/SPR-11048?redirect=false)** and commented  `MatchAlwaysTransactionAttributeSource.getTransactionAttribute` used to accept a `null` method, since Spring 4.0 this fails.   ---  **Affects:** 4.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d371886988a12331128ff645537e542f00dd7467","closed","type: regression,","spring-projects-issues","2013-10-30T22:14:29Z","2013-10-31T12:27:51Z"
"","15634","TypeDescriptor can no longer be programatically created with null generics [SPR-11006]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-11006](https://jira.spring.io/browse/SPR-11006?redirect=false)** and commented  ---  **Affects:** 4.0 RC1  **Issue Links:** - #14133 MapToMapConverter cannot distinguish MultiValueMap in target  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/79048e18be0570c2744bed2a0c31626b7cb267f0","closed","in: core,","spring-projects-issues","2013-10-18T10:45:14Z","2019-01-11T19:14:27Z"
"","15594","@Qualifier Change of Behavior 4.0 Vs 3.x with Qualified Bean in Parent Context [SPR-10966]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-10966](https://jira.spring.io/browse/SPR-10966?redirect=false)** and commented  I don't know if this is a bug in 4.0 or 3.x; I suspect the latter but there is probably an argument for the former...  This was discovered when moving XD to Spring 4.0.0.M3.  In 4.0, an `@Qualifier` in a child context is not resolved to a `` bean in a parent context, unless the parent context has ``.  Consider the following  ``` child-context.xml  	 ```  and  ``` parent-context.xml  	 		 		 	  	 		 	 ```  and  ``` package foo;  public class BrokenQualifier {  	public static void main(String[] args) { 		ApplicationContext parent = new ClassPathXmlApplicationContext(""parent-context.xml"", BrokenQualifier.class); 		ClassPathXmlApplicationContext child = new ClassPathXmlApplicationContext(parent); 		child.setConfigLocation(""foo/child-context.xml""); 		child.refresh();  		System.out.println(child.getBean(Baz.class).getFoo());  		child.close(); 	}  	@Component 	public static class Baz {  		private final String foo;  		@Autowired 		public Baz(@Qualifier(""baz"") Bar aBar) { 			this.foo = aBar.getBar(); 		}  		public String getFoo() { 			return foo; 		}  	}  	public interface Bar {  		public String getBar(); 	}  	public static class BarImpl implements Bar {  		private final String bar;  		public BarImpl(String bar) { 			this.bar = bar; 		}  		@Override 		public String getBar() { 			return bar; 		}  	} } ```  Notice that the `Baz` constructor has an `Qualifier` matching the `` in the parent context. All works fine with 3.x; with 4.0, we get  ``` No qualifying bean of type [foo.BrokenQualifier$Bar] is defined: expected single matching bean but found 2: foo,bar ```  Adding `` to the parent context makes it work (as does changing the constructor parameter name from 'aBar' to 'foo').   ---  **Affects:** 4.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eb1b3c5a685aaa7204dd9078754df617db1fd324","closed","in: core,","spring-projects-issues","2013-10-08T10:10:31Z","2013-12-11T23:57:19Z"
"","15702","Use StoredProcedure to call sp, if not set the rowmapper for out parameter which type is cursor, will throw null pointer exception [SPR-11076]","**[Gang](https://jira.spring.io/secure/ViewProfile.jspa?name=feiyu)** opened **[SPR-11076](https://jira.spring.io/browse/SPR-11076?redirect=false)** and commented  Class:org.springframework.jdbc.core.JdbcTemplate method:extractOutputParameters  this code: Object out = cs.getObject(sqlColIndex); if (out instanceof ResultSet) { if (outParam.isResultSetSupported()) { returnedResults.putAll(processResultSet((ResultSet) out, outParam)); } else { String rsName = outParam.getName(); SqlReturnResultSet rsParam = new SqlReturnResultSet(rsName, new ColumnMapRowMapper()); returnedResults.putAll(processResultSet(cs.getResultSet(), rsParam)); logger.info(""Added default SqlReturnResultSet parameter named "" + rsName); }  when i use it like this in java code: declareParameter(new SqlOutParameter(""active_rs"", OracleTypes.CURSOR)); not define the mapper for a out cursor param, it will call this code returnedResults.putAll(processResultSet(cs.getResultSet(), rsParam)); but cs.getResultSet() return null object, so when process the result, will throw null pointer exeception.  in this situation it use this code to process the result, it's fine. returnedResults.putAll(processResultSet((ResultSet) out, outParam));  so we need change the ""cs.getResultSet()"" to ""(ResultSet) out"" to process the result.  thanks!   ---  **Affects:** 3.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3ff3805ed608cff870dd0699d996c45cb9c2a682, https://github.com/spring-projects/spring-framework/commit/6fb10981b07214c9d1b6bce967389bd2fad6dfe6  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)","closed","type: bug,","spring-projects-issues","2013-11-07T01:56:43Z","2013-12-11T23:57:17Z"
"","15617","Can't use place-holder on task:executor rejection-policy value [SPR-10989]","**[Gal](https://jira.spring.io/secure/ViewProfile.jspa?name=galusben@gmail.com)** opened **[SPR-10989](https://jira.spring.io/browse/SPR-10989?redirect=false)** and commented  Validation of application context xml fails on loading when doing something like:  ```  ```  This is due to schema using rejection-policy parameter as an enumeration, meaning a value other than the legal final attributes is illegal.   ---  **Affects:** 3.1.2","closed","status: bulk-closed,","spring-projects-issues","2013-10-15T05:37:25Z","2019-01-12T00:22:00Z"
"","15848","Using @Scheduled annotation fails in 4.0.0 but worked with 3.2.5 [SPR-11223]","**[Franz van Betteraey](https://jira.spring.io/secure/ViewProfile.jspa?name=frvabe)** opened **[SPR-11223](https://jira.spring.io/browse/SPR-11223?redirect=false)** and commented  After upgrading an application form 3.2.5.RELEASE to 4.0.0 the initialization of a bean that uses the `@Scheduled` annotation failed.  I use the annotation as follows:  ``` @Scheduled(cron = ""${cron.setting}"") ```  I see that the property is resolved  ``` DEBUG 09:36:25,516 PropertySourcesPropertyResolver (81) - Searching for key 'cron.setting' in [environmentProperties] DEBUG 09:36:25,516 PropertySourcesPropertyResolver (81) - Searching for key 'cron.setting' in [systemProperties] DEBUG 09:36:25,516 PropertySourcesPropertyResolver (81) - Searching for key 'cron.setting' in [systemEnvironment] DEBUG 09:36:25,516 PropertySourcesPropertyResolver (81) - Searching for key 'cron.setting' in [class path resource [mmt-mdm-container.properties]] DEBUG 09:36:25,516 PropertySourcesPropertyResolver (90) - Found key 'cron.setting' in [class path resource [mmt-mdm-container.properties]] with type [String] and value '0 0 12 1 7 *' DEBUG 09:36:25,516 PropertySourcesPropertyResolver (90) - Found key 'cron.setting' in [environmentProperties] with type [String] and value '0 0 12 1 7 *' ```  The causing Exception is  ``` Caused by: java.lang.NullPointerException 	at sun.util.calendar.ZoneInfoFile.getFileName(ZoneInfoFile.java:501) 	at sun.util.calendar.ZoneInfoFile.createZoneInfo(ZoneInfoFile.java:596) 	at sun.util.calendar.ZoneInfoFile.getZoneInfo(ZoneInfoFile.java:566) 	at sun.util.calendar.ZoneInfo.getTimeZone(ZoneInfo.java:663) 	at java.util.TimeZone.getTimeZone(TimeZone.java:566) 	at java.util.TimeZone.getTimeZone(TimeZone.java:562) 	at org.springframework.util.StringUtils.parseTimeZoneString(StringUtils.java:732) 	at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.processScheduled(ScheduledAnnotationBeanPostProcessor.java:187) 	at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor$1.doWith(ScheduledAnnotationBeanPostProcessor.java:121) 	at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:473) 	at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:451) 	at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.postProcessAfterInitialization(ScheduledAnnotationBeanPostProcessor.java:117) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:421) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1558) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) 	... 40 more ```  I use JDK 1.7.0_45 and thought this should work.   ---  **Affects:** 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e2f85fc1d07b64e816596acb3f12d105feea71a8","closed","in: core,","spring-projects-issues","2013-12-13T00:52:16Z","2014-01-28T13:07:15Z"
"","16334","Improve Servlet 3 presence check in ServletServerHttpResponse [SPR-11712]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-11712](https://jira.spring.io/browse/SPR-11712?redirect=false)** and commented  ``` Caused by: java.lang.NoSuchMethodError: javax.servlet.http.HttpServletResponse.getHeader(Ljava/lang/String;)Ljava/lang/String; 	at org.springframework.http.server.ServletServerHttpResponse$ServletResponseHttpHeaders.getFirst(ServletServerHttpResponse.java:136) ~[spring-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.http.HttpHeaders.getContentType(HttpHeaders.java:330) ~[spring-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:171) ~[spring-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:148) ~[spring-webmvc-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:125) ~[spring-webmvc-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:71) ~[spring-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:122) ~[spring-webmvc-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:749) ~[spring-webmvc-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:689) ~[spring-webmvc-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83) ~[spring-webmvc-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:938) ~[spring-webmvc-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	... 33 common frames omitted ```  Offending code is:  ``` 	/** 	 * Extends HttpHeaders with the ability to look up headers already present in 	 * the underlying HttpServletResponse. 	 * 	 * The intent is merely to expose what is available through the HttpServletResponse 	 * i.e. the ability to look up specific header values by name. All other 	 * map-related operations (e.g. iteration, removal, etc) apply only to values 	 * added directly through HttpHeaders methods. 	 * 	 * @since 4.0.3 	 */ 	private class ServletResponseHttpHeaders extends HttpHeaders {  		private static final long serialVersionUID = 3410708522401046302L;  		@Override 		public String getFirst(String headerName) { 			String value = servletResponse.getHeader(headerName); 			if (value != null) { 				return value; 			} 			else { 				return super.getFirst(headerName); 			} 		} ```  In theory Spring 4.0 webapps should work in 2.5, as mentioned in http://docs.spring.io/spring/docs/current/spring-framework-reference/html/new-in-4.0.html  > Java EE version 6 or above is now considered the baseline for Spring Framework 4, with the JPA 2.0 and Servlet 3.0 specifications being of particular relevance. In order to remain compatible with Google App Engine and older application servers, it is possible to deploy a Spring 4 application into a Servlet 2.5 environment. However, Servlet 3.0+ is strongly recommended and a prerequisite in Spring’s test and mock packages for test setups in development environments.  ---  **Affects:** 4.0.3  **Issue Links:** - #16308 Regression: AbstractHttpMessageConverter does not set ContentType - #16069 CORS for websocket breaks existing CORS Filter","closed","type: enhancement,","spring-projects-issues","2014-04-21T00:25:13Z","2019-01-11T21:19:16Z"
"","15877","@Transactional annotation does not apply to inherited methods from abstract class during tests [SPR-11252]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-11252](https://jira.spring.io/browse/SPR-11252?redirect=false)** and commented  **Scenario:** I have different implementations for the same DAO interface. Some of these DAOs are transactional (JDBC-based ones) and some others are not (memory, NoSQL).  In the transactional DAOs, I add: {QUOTE} `@Transactional`(propagation=Propagation.MANDATORY) {QUOTE} to ensure the transactional DAO code is always ran within the scope of a transaction.  I have some generic DAO integration tests, defined (common for all the DAO implementations) in an abstract parent class. Then, for each DAO implementation, I have an inherited class that returns the proper DAO instance to the tests.  The  DAO instance to be tested comes either from direct instantiation (no Spring involved) or from a bean injected by Spring test framework.  As my transactional DAOs expect to be ran within the context of a transaction, I expect Spring test framework to handle transactions also in the tests defined in the abstract parent class, not only in the DAO-specific sub-class. I configure it to do so:  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = { AppConfiguration.class }) @Transactional public class SpringJDBCPetDAOImplTest extends PetDAOTest {  ```  **Problem:**  Spring test framework only honors `@Transactional` annotation for the tests defined directly in the concrete sub-class, and not in the abstract parent class. I have to override the test in the sub-class in order to make Spring test framework handle the transaction:  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = { AppConfiguration.class }) @Transactional public class WorkaroundSpringJDBCPetDAOImplTest extends PetDAOTest {  	@Autowired 	@Qualifier(""jdbc"") 	PetDAO petDAO;  	@Override 	protected PetDAO getPetDAO() { 		return petDAO; 	} 	 	@Override 	public void simpleTest() { 		super.simpleTest(); 	}  ```  **More info:** I've created an example project (https://github.com/flozano/spring-test-framework-transactions-problem), which shows how SpringJDBCPetDAOImplTest#simpleTest() fails because of the missing transaction, despite having the proper `@Transactional` and spring test fwk annotations in the test class.  PS: If you think it's hard to keep the same interface with different transactional semantics involved, I agree with you :) but it's the way it is.  ---  **Affects:** 4.0 GA  **Reference URL:** https://github.com/flozano/spring-test-framework-transactions-problem  **Issue Links:** - #12480 `@Transactional` on test class ignored for test methods declared in superclass (_**""duplicates""**_)  1 votes, 2 watchers","closed","status: duplicate,","spring-projects-issues","2013-12-21T08:06:26Z","2019-01-13T06:56:49Z"
"","15854","Regression in 4.0.0 - A scoped-proxy bean cannot override another bean [SPR-11229]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-11229](https://jira.spring.io/browse/SPR-11229?redirect=false)** and commented  It seems the behavior between 4.0.0.RELEASE and 3.2.5.RELEASE has changed with regard to bean overrides.  In the sample project (https://github.com/flozano/spring-override-behavior-changed) there is a singleton bean with a ""sayHello"" method, which returns ""Hello ""+name.  The original bean is configured thru Java Config in the AppConfiguration class.  The overriding bean is configured thru overridingApplicationContext.xml.  There is a test that checks that the correct string is returned for each bean (""Hello Lisa"" for the original not-overriden app-ctx, ""Hello Maria"" for the overriden one).  - If Spring 3.2.5.RELEASE is used in the pom.xml, the test always passes. - If Spring 4.0.0.RELEASE is used in the pom.xml and the overriding bean is a scoped-proxy, the test fails. - If Spring 4.0.0.RELEASE is used in the pom.xml and the overriding bean is NOT a scoped-proxy, the test passes. - Changing the scope of the overriding bean or the original bean has no effect in the results - Making the original bean also a scoped-proxy has no effect either - **Configuring the original bean with XML instead of Java Config makes it work** (???): removing the component-scan and adding this to originalApplicationContext.xml instead makes it work:  ```   ```  ---  **Affects:** 4.0 GA  **Reference URL:** https://github.com/flozano/spring-override-behavior-changed  **Issue Links:** - #15236 Allow `@Bean` to override a dynamically registered bean definition - #15370 Cannot override singleton with scoped proxy  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/61a3d04e9146c94db28d9b974d7d07c6b645894f  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2013-12-15T16:50:18Z","2019-01-13T06:56:58Z"
"","15842","Allow to specify bean qualifier in an AOP @Around / @Before / ...  [SPR-11217]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-11217](https://jira.spring.io/browse/SPR-11217?redirect=false)** and commented  Right now it's possible to specify bean(beanName), but it'd be great if you could say qualifier(whatever) so that you can wire aspects not only by bean name or by usual AspectJ pointcuts, but also by bean qualifier, so that any bean configured with  > `@Bean` > `@Qualifier`(""audited"") > public MyBean myBean() {}  The same cannot be achieved simply with annotations, as annotation is at class-level and not at bean-level (and I can re-use same class in several beans).  ---  **Affects:** 3.2.5  **Issue Links:** - #13532 Convenient programmatic bean retrieval with qualifiers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/214c919742aff3a75b8f2ef4adfbdd57e2ee7f6f  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2013-12-12T11:19:27Z","2019-01-11T18:26:27Z"
"","15593","HttpInvokerClientInterceptor.convertHttpInvokerAccessException implementation throws the RemoteAccessException instead of return it [SPR-10965]","**[Felix Martin](https://jira.spring.io/secure/ViewProfile.jspa?name=fmarmar)** opened **[SPR-10965](https://jira.spring.io/browse/SPR-10965?redirect=false)** and commented  According to the javadoc the protected method `HttpInvokerClientInterceptor.convertHttpInvokerAccessException(Throwable ex)` converts the given HTTP invoker access exception to an appropriate Spring `RemoteAccessException`, but instead this method is throwing the `RemoteAccessException`.  ---  **Affects:** 4.0 M3  **Issue Links:** - #19551 HttpInvokerClientInterceptor should not wrap client-side Error as RemoteAccessException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ca9df4d2ef47691953d128d556b978e1cbb334db","closed","type: bug,","spring-projects-issues","2013-10-08T02:57:09Z","2019-01-11T12:55:54Z"
"","15752","Controller parameter mapping: problem converting empty parameter to List [SPR-11126]","**[Federico Schroder](https://jira.spring.io/secure/ViewProfile.jspa?name=fschroder)** opened **[SPR-11126](https://jira.spring.io/browse/SPR-11126?redirect=false)** and commented  List of size 0 is generated instead of expected size of 1.  Example  ```  @Controller @RequestMapping(value = ""/controller"") ...  @RequestMapping(value = """") public void create(@RequestParam(value = ""param"") List paramList)   ```  When invoking "".../controller?param=¶m="" paramList has 2 empty strings. When invoking "".../controller?param="" paramList has no elements.  The first case uses ArrayToCollectionConverter. The second case uses StringToCollectionConverter. It seems a distinction should be made between not receiving param at all (empty list) and receiving it empty (size 1).    ---  **Affects:** 3.2.4  2 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-11-26T16:23:54Z","2019-01-12T00:21:02Z"
"","16287","AbstractEnterpriseBean.BeanFactoryReferenceReleaseListener causes memory leak [SPR-11664]","**[Faleh Omar](https://jira.spring.io/secure/ViewProfile.jspa?name=fomar)** opened **[SPR-11664](https://jira.spring.io/browse/SPR-11664?redirect=false)** and commented  org.springframework.ejb.support.AbstractEnterpriseBean.BeanFactoryReferenceReleaseListener keeps a strong reference beanFactoryReference which prevents the factory to be come weakly reachable. solution: org.springframework.util.WeakReferenceMonitor.trackedEntries should be a weakhashmap.   ---  **Affects:** 3.2.8  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-04-04T13:51:04Z","2019-01-12T00:20:29Z"
"","15532","Ehcache with RMI replication bug [SPR-10904]","**[Facundo Mateo](https://jira.spring.io/secure/ViewProfile.jspa?name=fmateo)** opened **[SPR-10904](https://jira.spring.io/browse/SPR-10904?redirect=false)** and commented  The fix for bug https://jira.springsource.org/browse/SPR-8081 has introduced a new one. It's related to ehcache and RMI replication. If you try to use RMICacheManagerPeerListener , spring instantiated cache manager created with EhCacheManagerFactoryBean, and spring instantiated caches created with  EhCacheFactoryBean, it won't replicate caches anymore. This issue affected us  when we tried to migrate from spring 3.1.1 to spring 3.1.2 to solve the statistics enable problem. After surfing  on  spring sources, I found that RMICacheManagerPeerListener tries to create the RMI port to communicate with other cache instances in two points: 1- Ehcache manager initialization At this point, caches has not been created... so RMICacheManagerPeerListener won't create any rmi listener port. 2- After a new cache has been added to cacheManager  In EhCacheFactoryBean.afterPropertiesSet:  ``` .....      rawCache = createCache();      this.cacheManager.addCache(rawCache);      }     if (this.cacheEventListeners != null) {        for (CacheEventListener listener : this.cacheEventListeners) {             rawCache.getCacheEventNotificationService().registerListener(listener);         }     }  ```  The problem is that RMICacheManagerPeerListener creates  RMI ports based on the existence of net.sf.ehcache.distribution.CacheReplicator event listeners for caches. This initialization will be executed after ""this.cacheManager.addCache(rawCache)"" sentences, but It won't find any CacheReplicator because the listeners has not been added to the notifications service yet. In the previous spring version, the event listeners were added after cache creation time and before addCache call.   ---  **Affects:** 3.1.2, 3.2.4  **Reference URL:** https://jira.springsource.org/browse/SPR-8081  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3df311bb5f7ad7e18212f57192a70b9de8c158c, https://github.com/spring-projects/spring-framework/commit/562c3239899839ab98d6ea4781dad6eb488cef4f","closed","in: core,","spring-projects-issues","2013-09-10T07:45:07Z","2013-10-31T12:28:04Z"
"","15924","Allow a configurable default body for ResponseEntityExceptionHandler [SPR-11300]","**[Eugen Paraschiv](https://jira.spring.io/secure/ViewProfile.jspa?name=eugenparaschiv)** opened **[SPR-11300](https://jira.spring.io/browse/SPR-11300?redirect=false)** and commented  Currently, all handlers defined by _ResponseEntityExceptionHandler_ call _handleExceptionInternal_ with a **null body** - for example:  ```java return handleExceptionInternal(ex, null, headers, status, request); ```  For a REST API - this makes controlling the error message returned to the client difficult (without re-implementing all of these methods).  A quick and simple improvement would be to provide a method for this:  ```java protected Object defaultBody(final HttpStatus status, final Exception ex) {     return null; } ```  And simply use that as the body:  ```java return handleExceptionInternal(ex, defaultBody(status, ex), headers, status, request); ```  This way, a client overriding this class could simply swap in their own custom body.   ---  **Affects:** 4.0 GA  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2014-01-12T07:27:18Z","2014-01-20T17:32:20Z"
"","16294","Doc: Lifecycle beans aren't stopped before destruction in some scenarios such as context refresh [SPR-11671]","**[Eron Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=eronwright)** opened **[SPR-11671](https://jira.spring.io/browse/SPR-11671?redirect=false)** and commented  It may be regarded as a sort of resource leak.  When the application context is refreshed, old bean instances that implement Lifecycle are not automatically stopped.  The leakage may occur silently if the application developer is not aware that some beans implement Lifecycle, and simply calls refresh.  If refresh is deliberately not integrated with Lifecycle, then consider it an error condition to call refresh on a context before stopping it.  At minimum, please improve the documentation around behavior of Lifecycle beans and context refresh.    --- No further details from [SPR-11671](https://jira.spring.io/browse/SPR-11671?redirect=false)","closed","in: core,","spring-projects-issues","2014-04-07T14:23:46Z","2015-07-15T09:05:07Z"
"","15564","Use of same @Configuration class across multiple ApplicationContexts is not threadsafe [SPR-10936]","**[Eric Sirianni](https://jira.spring.io/secure/ViewProfile.jspa?name=sirianni)** opened **[SPR-10936](https://jira.spring.io/browse/SPR-10936?redirect=false)** and commented  In our application, we instantiate multiple Spring `ApplicationContext` scoped to a particular tenant, each using the same `@Configuration` class.  The expectation is that singleton `@Beans` produced by the `@Configuration` will be scoped to each individual (per-tenant) `ApplicationContext` instance.  However, we are observing situations where singletons instantiated from the `@Configuration` are incorrectly shared across `ApplicationContext` instances.  I've narrowed it down to situations where the `ApplicationContext`s are instantiated concurrently.  This JUnit test exhibits the issue (testSequential passes, testConcurrent fails):  ``` public class ConcurrentConfigurationInitializationTest {      private static AtomicInteger COUNTER = new AtomicInteger(0);      @Configuration     public static class TestConfig {         @Bean         public Integer foo() {             return Integer.valueOf(COUNTER.incrementAndGet());         }     }      @Test     public void testSequential() throws InterruptedException {         test(10, 1);     }      @Test     public void testConcurrent() throws InterruptedException {         test(10, 10);     }      private void test(int numContexts, int numThreads) throws InterruptedException {         final Set uniqueBeans = new HashSet();         ExecutorService executor = Executors.newFixedThreadPool(numThreads);          for (int i = 0; i < numContexts; i++) {             executor.submit(new Runnable() {                 @Override                 public void run() {                     ApplicationContext context = new AnnotationConfigApplicationContext(TestConfig.class);                     Integer bean = (Integer) context.getBean(""foo"");                     uniqueBeans.add(bean);                 }             });         }         executor.shutdown();         executor.awaitTermination(60, TimeUnit.SECONDS);          assertThat(uniqueBeans).hasSize(numContexts);     }  } ```  I would guess that Spring is properly creating a CGLIB-enhanced `@Configuration` class _per `ApplicationContext`_ and that the issue is that CGLIB itself is not behaving properly in a multithreaded scenario.  Perhaps CGLIB callbacks are getting intermingled between proxies.  #14439 seems somewhat relevant in this regard.  ---  **Affects:** 3.2.4  **Attachments:** - [ConcurrentConfigurationInitializationTest.java](https://jira.spring.io/secure/attachment/21403/ConcurrentConfigurationInitializationTest.java) (_1.81 kB_)  **Issue Links:** - #14941 Concurrent creation of the same Configuration class in different contexts is not thread-safe (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2013-09-25T10:47:58Z","2019-01-11T22:10:27Z"
"","16113","Jaxb2RootElementHttpMessageConverter doesn't allow for customizing Marshaller/Unmarshaller [SPR-11488]","**[Eric Miles](https://jira.spring.io/secure/ViewProfile.jspa?name=emilesvt)** opened **[SPR-11488](https://jira.spring.io/browse/SPR-11488?redirect=false)** and commented  We have a need to use Spring managed beans for JAXB XmlAdapters.  The only way I've found to do this is to call setAdapter(bean) on Unmarshaller and Marshaller.  Due to the base class AbstractJaxb2HttpMessageConverter making createMarshaller() and createUnmarshaller() final combined with the structure of Jaxb2RootElementHttpMessageConverter, we have no way of reaching those objects.  It appears the only way I can do this and still get all the functionality of Jaxb2RootElementHttpMessageConverter is to extend it and override writeToResult and readFromSource while doing a lot of copying and pasting for most of those methods.   ---  **Affects:** 4.0.1","closed","type: enhancement,","spring-projects-issues","2014-02-26T09:10:30Z","2014-03-26T22:34:04Z"
"","15643","Allow declaration of initializers at the @ContextHierarchy level [SPR-11015]","**[Eric E](https://jira.spring.io/secure/ViewProfile.jspa?name=analogkid76)** opened **[SPR-11015](https://jira.spring.io/browse/SPR-11015?redirect=false)** and commented  Currently I am unable to do something like the following:  ```java @RunWith(SpringJUnit4ClassRunner.class) @ActiveProfiles(""testing"") @WebAppConfiguration @ContextHierarchy(     initializers = WebSecurityIntegrationTest.PropertyMockingApplicationContextInitializer.class,     contextConfigurations = {         @ContextConfiguration(name = ""rootContext"", locations = { ""classpath:app-config.xml"", ""classpath:database-config.xml"", ""classpath:security-config.xml"" }),         @ContextConfiguration(name = ""webContext"", locations = { ""classpath:mvc-config.xml"" }) }) public class WebSecurityIntegrationTest { /* ... */ } ```  Instead, I have to repeat the initializer for each `@ContextConfiguration` declaration:  ```java @RunWith(SpringJUnit4ClassRunner.class) @ActiveProfiles(""testing"") @WebAppConfiguration @ContextHierarchy({     @ContextConfiguration(name = ""rootContext"", locations = { ""classpath:app-config.xml"", ""classpath:database-config.xml"", ""classpath:security-config.xml"" }, initializers = WebSecurityIntegrationTest.PropertyMockingApplicationContextInitializer.class),     @ContextConfiguration(name = ""webContext"", locations = { ""classpath:mvc-config.xml"" }, initializers = WebSecurityIntegrationTest.PropertyMockingApplicationContextInitializer.class) }) public class WebSecurityIntegrationTest { } ```  I think it would be great if you could specify some of the configuration, such as initializers, at the `@ContextHierarchy` level.   ---  **Affects:** 3.2.2","open","type: enhancement,","spring-projects-issues","2013-10-21T14:17:40Z","2019-01-15T11:28:57Z"
"","15625","Cannot override initializer of @ContextConfiguration when using @ContextHierarchy [SPR-10997]","**[Eric E](https://jira.spring.io/secure/ViewProfile.jspa?name=analogkid76)** opened **[SPR-10997](https://jira.spring.io/browse/SPR-10997?redirect=false)** and commented  #### Overview  In the `@ContextHierarchy` uniqueness check, it should take into account the inherited parts; however, it currently ignores the inherited ""locations"" (i.e., the _merged configuration_). So the configuration declared in a subclass (see code examples below) _appears_ to be non-unique.  Note that when I forgo inheritance of `@ContextHierarchy` entirely (comment it out of AbstractWebTests and put the complete annotation including initializers into the concrete class), then all of the tests pass.  ---  #### Steps to Reproduce  I have these two classes, declared like so:  ``` @ActiveProfiles(profiles={""testing""}) @ContextHierarchy({   @ContextConfiguration(name=""rootContext"", locations={""classpath:app-config.xml"", ""classpath:database-config.xml"", ""classpath:security-config.xml""}),   @ContextConfiguration(name=""webContext"", locations={""classpath:mvc-config.xml""}) }) @WebAppConfiguration public abstract class AbstractWebTests extends AbstractTransactionalJUnit4SpringContextTests { } ```  ``` public class PropertyMockingApplicationContextInitializer implements ApplicationContextInitializer {      @Override     public void initialize(ConfigurableApplicationContext applicationContext) {         // details omitted     }      // details omitted } ```  ``` @ContextHierarchy({   @ContextConfiguration(name=""rootContext"", inheritInitializers=false, initializers=PropertyMockingApplicationContextInitializer.class),   @ContextConfiguration(name=""webContext"", inheritInitializers=false, initializers=PropertyMockingApplicationContextInitializer.class) }) public class UserManagementIntegrationTest extends AbstractWebTests {     // details omitted } ```  What I am trying to do here is have some generic configuration in my `AbstractWebTests` class, and then provide some specific initialization in the concrete test classes. I thought that I would be able to just override the initializer part of the `@ContextHierarchy`, but have no luck so far.  Unfortunately when I do the above, I get this:  ``` 2013-10-16 12:26:20,046 ERROR [org.springframework.test.context.ContextLoaderUtils] - The @ContextConfiguration elements configured via @ContextHierarchy in test class [ca.gc.health.istop.um.UserManagementIntegrationTest] must define unique contexts to load. ```  ---  **Affects:** 3.2.4  **Reference URL:** http://forum.spring.io/forum/spring-projects/container/724288-trouble-overriding-initializer-in-contexthierarchy-in-subclass  **Sub-tasks:** - #15639 Backport ""Cannot override initializer of `@ContextConfiguration` when using `@ContextHierarchy`""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7658d856cac027ae367f04833bee6c43c62b5534","closed","type: bug,","spring-projects-issues","2013-10-17T08:05:24Z","2019-01-13T06:57:46Z"
"","16229","AbstractApplicationEventMulticaster can leak classes [SPR-11606]","**[Eric Bottard](https://jira.spring.io/secure/ViewProfile.jspa?name=eric.bottard)** opened **[SPR-11606](https://jira.spring.io/browse/SPR-11606?redirect=false)** and commented  This was discovered as part of the PR mentioned above, in the context of XD.  Basically, we create app contexts which have their own classloaders and can come and go. Those contexts (modules in XD terms) have a parent context that lives longer. If event listeners are installed in the child context, listening for an event type that is loaded by the custom classloader, the parent context will still retain the types and hence the CL long after the child context has been torn down, preventing proper GC.  This gist https://gist.github.com/ericbottard/ad6da5559257fbcb0325 shows the problem (albeit not using a dedicated classloader). Run it using like yourkit and see retention of the custom event type  ---  **Affects:** 3.2.8, 4.0.2  **Reference URL:** https://github.com/spring-projects/spring-xd/pull/669  **Issue Links:** - #16145 Memory leak when using annotation based auto-wiring in child context - #16618 Changes to AbstractApplicationEventMulticaster in 3.2.9 break HttpSessionEventPublisher in Google AppEngine Runtime  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","in: core,","spring-projects-issues","2014-03-26T05:24:35Z","2019-01-11T21:08:13Z"
"","15592","Port @ConditionalOn... from Spring Boot into Spring Core [SPR-10964]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-10964](https://jira.spring.io/browse/SPR-10964?redirect=false)** and commented  Spring Boot provides many useful Conditional such as `@ConditionalOnMissingBean`, `@ConditionalOnClass` etc This should really be in the core framework. It would allow to detect the runtime environment (Java EE server? Which Java EE server?) and tweak the configuration accordingly.  ---  **Affects:** 4.0 M3  **Issue Links:** - #20614 Adopt a spring boot Condition  (_**""is duplicated by""**_) - #15920 Include `@ConditionalOnMissingBean` and `@ConditionalOnClass` from Spring Boot  7 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2013-10-07T10:07:14Z","2020-07-27T11:44:10Z"
"","15562","@annotation won't work if the Aspect is scoped with perthis [SPR-10934]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-10934](https://jira.spring.io/browse/SPR-10934?redirect=false)** and commented  `@annotation` won't work if the aspect is scoped with perthis. See the class AroundAdvice in the attached project. mvn test fails:  ``` SEVERE: Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@fc61093] to prepare test instance [atannotationbug.AtAnnotatioBugTest@146a2afc] java.lang.IllegalStateException: Failed to load ApplicationContext ... Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'atAnnotationBugConfiguration': BeanPostProcessor before instantiation of bean failed; nested exception is java.lang.IllegalArgumentException: error Type referred to is not an annotation type: a .... Caused by: java.lang.IllegalArgumentException: error Type referred to is not an annotation type: a 	at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:301) 	at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression(AspectJExpressionPointcut.java:208) ```  If you use `@Aspect`() without a scoping the test works.   ---  **Affects:** 3.2.4  **Attachments:** - [atannotationbug.zip](https://jira.spring.io/secure/attachment/21401/atannotationbug.zip) (_7.75 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/d63a88ed697dce1891446c186338f46b4aaaf2df","closed","status: bulk-closed,","spring-projects-issues","2013-09-24T22:58:58Z","2019-01-12T02:30:09Z"
"","16311","SchedulerFactoryBean should support non-durable jobs as well [SPR-11689]","**[Dzmitry Lazerka](https://jira.spring.io/secure/ViewProfile.jspa?name=dlazerka)** opened **[SPR-11689](https://jira.spring.io/browse/SPR-11689?redirect=false)** and commented  Reproducible with both Quartz 2.1.7 and the most recent 2.2.1.  Examples of configs are: 1. http://forum.spring.io/forum/spring-projects/container/7915-problem-with-quartz-and-spring-durable-jobs 2. Our config:  ```java                                                                                        ```  Quick debugging showed that org.springframework.scheduling.quartz.SchedulerAccessor adds jobDetail without its trigger, although it has the trigger.   ---  **Affects:** 4.0.3  **Reference URL:** http://forum.spring.io/forum/spring-projects/container/7915-problem-with-quartz-and-spring-durable-jobs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9a59292603880de739e8fb98febe490892bccc87","closed","type: enhancement,","spring-projects-issues","2014-04-11T14:25:58Z","2014-07-18T10:16:28Z"
"","16147","Autowiring of Generic Types - StackOverflowError ResolvableType.isAssignableFrom(ResolvableType.java:259) [SPR-11522]","**[Dumitru Boldureanu](https://jira.spring.io/secure/ViewProfile.jspa?name=dboldureanu)** opened **[SPR-11522](https://jira.spring.io/browse/SPR-11522?redirect=false)** and commented  I'm experiencing what seems to be a spring 4.0 bug related to the new feature ""Autowiring of Generic Types"".  Getting a java.lang.StackOverflowError when trying to inject a generic dao:  ``` public interface StockMovementDao ```  the important is in the following two lines:  ``` public interface StockMovement public interface StockMovementInstruction ```  Please note that one uses the other as generic parameter - StockMovement uses StockMovementInstruction and StockMovementInstruction the StockMovement.  Because of that org.springframework.core.ResolvableType.isAssignableFrom(ResolvableType.java:259) is called for one then for the other infinitely till a StackOverflowError.  I guess that to fix this bug, A.isAssignableFrom(B) -> B.isAssignableFrom(A) cases should be detected. I might be wrong, but in these cases it should probably return true.   ---  **Affects:** 4.0 GA, 4.0.1, 4.0.2  **Attachments:** - [SPR-issue.zip](https://jira.spring.io/secure/attachment/21805/SPR-issue.zip) (_6.99 kB_) - [SPR-issue-2.zip](https://jira.spring.io/secure/attachment/21815/SPR-issue-2.zip) (_25.52 kB_)","closed","in: core,","spring-projects-issues","2014-03-06T06:03:10Z","2014-03-26T22:34:02Z"
"","15548","RequestMappingHandlerAdapter.createDataBinderFactory has a return type of ServletRequestDataBinderFactory [SPR-10920]","**[Donnchadh O Donnabhain](https://jira.spring.io/secure/ViewProfile.jspa?name=donnchadh)** opened **[SPR-10920](https://jira.spring.io/browse/SPR-10920?redirect=false)** and commented  Having a return type of `InitBinderDataBinderFactory` would make allow greater flexibility when overriding `createDataBinderFactory`.   ---  **Affects:** 3.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5de51980053445a29f84e78897ceb454a56c9931","closed","type: bug,","spring-projects-issues","2013-09-16T09:09:27Z","2013-10-31T12:27:55Z"
"","16097","autoGrowCollectionLimit versus general collection size limit [SPR-11472]","**[Dominik S.](https://jira.spring.io/secure/ViewProfile.jspa?name=dominik_s)** opened **[SPR-11472](https://jira.spring.io/browse/SPR-11472?redirect=false)** and commented  ##### Problem  Spring's data binder allows you to set maximum size() of automatically created List e.g. to 3 items. It's quite easy to bypass this limitation and cause Spring to create a List of 3000+ items simply by modifying HTTP content sent to the server.  In other words: while testing my webapp I was able by creating malicious HTTP request to force Spring's data binder to create a List consisting of 4000 items although I had set the limit to 3 items. This may easily lead to Out of Memory exceptions on any app server.  ##### Version used  spring-tool-suite-3.3.0.RELEASE, D:\m2\repo\org\springframework\spring-web\3.2.4.RELEASE\spring-web-3.2.4.RELEASE.jar  ##### Description  I needed to bind multiple html \ elements to a single List\ object, something like:  ```html    ...  ```  Spring performs such conversion by default using [org.springframework.beans.propertyeditors.CustomCollectionEditor](http://docs.spring.io/spring/docs/3.2.4.RELEASE/javadoc-api/org/springframework/beans/propertyeditors/CustomCollectionEditor.html). Below is a simple code snippet presenting the issue described above.  ##### Code  ``` public class ContactDataEntity {     private List phoneNumber;     // getters and setters } ```  ``` @RequestMapping(value = VIEW_PAGE_1, method = RequestMethod.POST) public String xxx(HttpServletRequest request, Model model) {  	// set and bind 	ContactDataEntity contactData = new ContactDataEntity(); 	ServletRequestDataBinder binder = new ServletRequestDataBinder(contactData); 	binder.setAutoGrowCollectionLimit(3); // set limit to 3 items 	binder.bind(request);  	// test binding results 	List numbers = contactData.getPhoneNumber(); 	if (numbers != null) { 		System.out.print(""numbers SIZE: "" + numbers.size() + "", DATA: ""); 		for (String s : numbers) System.out.print(s + "", ""); 		System.out.print(""\n""); 	}  	// validate and return view name...  } ```  ##### Results  ###### Results for correct data ( 3 items, everything works ok, 500 Internal Server Error occurred):  !http://i.stack.imgur.com/MfWYy.jpg!  ###### Simple trick (> 3 items, no errors reported, sorry for my typo in 'overwritten'):  !http://i.stack.imgur.com/FNlXE.jpg!  ###### Let's exploit the above:  !http://i.stack.imgur.com/XPIhc.jpg!    ---  **Affects:** 3.2.4  **Reference URL:** http://stackoverflow.com/questions/21962228/springs-data-binder-autogrowcollectionlimit-doesnt-work-correctly","closed","status: bulk-closed,","spring-projects-issues","2014-02-22T16:23:12Z","2019-01-12T02:45:35Z"
"","15939","@ModelAttribute parameter dependency issue. [SPR-11315]","**[Dominic Clifton](https://jira.spring.io/secure/ViewProfile.jspa?name=dominicclifton)** opened **[SPR-11315](https://jira.spring.io/browse/SPR-11315?redirect=false)** and commented  Changing the order of multiple `@ModelAttribute` annotated methods on a class annotated with `@Controller` or `@ControllerAdvice`, OR changing the bean names of multiple classes annotated with `@Controller` or `@ControllerAdvice` each with a single `@ModelAttribute` annotated method can result in incorrect behaviour WHEN one of the `@ModelAttribute` methods arguments is annotated with a `@ModelAttribute` annotation that the other method can provide.  The bean names seem to have an impact on the order of items in the modelAttributeAdviceCache.  example:  ```groovy // Model classes  class ObjectA { 	String value 	 	ObjectA() { 	} 	 	ObjectA(String value) { 		this.value = value 	} }  class ObjectB { 	String value  	ObjectB() { 	} 	 	ObjectB(String value) { 		this.value = value 	} } ```  ```groovy // Advice classes  @ControllerAdvice class AdviceA { 	@ModelAttribute 	public ObjectA addObjectA(HttpServletRequest request) { 		return new ObjectA('valueA') 	} }  @ControllerAdvice class AdviceB { 	@ModelAttribute 	public ObjectB addObjectB(HttpServletRequest request, @ModelAttribute ObjectA objectA) { 		return new ObjectB(objectA.value + 'valueB') 	} } ```  OR  ```groovy @ControllerAdvice class Advice { 	@ModelAttribute 	public ObjectA addObjectA(HttpServletRequest request) { 		return new ObjectA('valueA') 	}  	@ModelAttribute 	public ObjectB addObjectB(HttpServletRequest request, @ModelAttribute ObjectA objectA) { 		return new ObjectB(objectA.value + 'valueB') 	} } ```  The above scenarios work, addObjectB requires an instance of objectA.  However changing the class name of AdviceA to ZAdviceA OR moving addObjectB in Advice so it is above addObjectA changes the behavior.  When called in the correct order the addObjectB method will be passed an instance of objectA created by addObjectA() using the non-default constructor. When called in the incorrect order the addObjectB method will be passed an instance of objectA created by Spring using the default constructor which will have a null 'value' property.  After digging around though the code it appears the problem stems from 'getModelFactory' in org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter. The list of attrMethods is built with no regard to dependency of the method arguments and their annotations and the attrMethods is used in the order created later on.  The code in Spring 4.0.0.RELEASE looks like this:  ```java private ModelFactory getModelFactory(HandlerMethod handlerMethod, WebDataBinderFactory binderFactory) {      SessionAttributesHandler sessionAttrHandler = getSessionAttributesHandler(handlerMethod);      Class handlerType = handlerMethod.getBeanType();      Set methods = this.modelAttributeCache.get(handlerType);      if (methods == null) {           methods = HandlerMethodSelector.selectMethods(handlerType, MODEL_ATTRIBUTE_METHODS);           this.modelAttributeCache.put(handlerType, methods);      }      List attrMethods = new ArrayList();      // Global methods first      for (Entry entry : this.modelAttributeAdviceCache.entrySet()) {           if(entry.getKey().isApplicableToBeanType(handlerType)) {                Object bean = entry.getKey().resolveBean();                for (Method method : entry.getValue()) {                         attrMethods.add(createModelAttributeMethod(binderFactory, bean, method));                }           }      }                     for (Method method : methods) {           Object bean = handlerMethod.getBean();           attrMethods.add(createModelAttributeMethod(binderFactory, bean, method));      }      return new ModelFactory(attrMethods, binderFactory, sessionAttrHandler); } ```  Perhaps it is possible to fix this problem by ordering the attrMethods, based on the annotations, before the attrMethods are given to the ModelFactory, or perhaps before they are used in the ModelFactory?  A possible comparator algorithm for sorting them:  look at the method being sorted, determine if it has ModelAttribute parameter annotations using something like this: attrMethods.get(...).parameters[...].getParameterAnnotations() if it has a ModelAttribute parameter annotation that has the same 'name' then look at the entire list of attrMethods and make sure that the method that returns a ModelAttribute with the same name is before the method being sorted.  ---  **Affects:** 4.0 GA  **Issue Links:** - #10965 Support for `@ModelAttribute` interdependency (_**""duplicates""**_)  4 votes, 5 watchers","closed","in: web,","spring-projects-issues","2014-01-15T03:13:15Z","2019-01-13T06:56:25Z"
"","15697","ExceptionHandlerExceptionResolver should loop over all @ControllerAdvice beans to find The @ExceptionHandler [SPR-11070]","**[Domenique Tilleuil](https://jira.spring.io/secure/ViewProfile.jspa?name=domenique)** opened **[SPR-11070](https://jira.spring.io/browse/SPR-11070?redirect=false)** and commented  When you configure 2 `@ControllerAdvice` beans containing `@ExceptionHandler` methods, the ExceptionHandlerExceptionResolver bean should iterate both beans to find the best matching exception method. Currently, it stops after scanning the first bean and finding a potential match. The following code snippet shows where it goes wrong:  ``` protected ServletInvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) { 		if (handlerMethod != null) { 			Class handlerType = handlerMethod.getBeanType(); 			ExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(handlerType); 			if (resolver == null) { 				resolver = new ExceptionHandlerMethodResolver(handlerType); 				this.exceptionHandlerCache.put(handlerType, resolver); 			} 			Method method = resolver.resolveMethod(exception); 			if (method != null) { 				return new ServletInvocableHandlerMethod(handlerMethod.getBean(), method); 			} 		} 		for (Entry entry : this.exceptionHandlerAdviceCache.entrySet()) { 			Method method = entry.getValue().resolveMethod(exception); 			if (method != null) { 				return new ServletInvocableHandlerMethod(entry.getKey().resolveBean(), method); 			} 		} 		return null; 	} ```  The code returns the first match it finds in the first bean without checking the second bean if there is a better match, which in my opinion is wrong.   --- No further details from [SPR-11070](https://jira.spring.io/browse/SPR-11070?redirect=false)","closed","status: declined,","spring-projects-issues","2013-11-06T00:30:30Z","2019-01-12T16:35:40Z"
"","16132","Treat empty log config refresh interval as infinite interval in Log4jWebConfigurer [SPR-11507]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-11507](https://jira.spring.io/browse/SPR-11507?redirect=false)** and commented  Currently if `log4jRefreshInterval` is empty, `Log4jWebConfigurer` throws an exception because the value is not a number. Consider the following scenario when value is substituted by Maven (resource filtering = true):  ```  	log4jRefreshInterval 	${log4j.refresh.interval}  ```  If `log4j.refresh.interval` is empty, application does not start. The solution is either to set `log4j.refresh.interval` to big value like 9999999, or do some fuzzy things in Maven POM to juggle two different `web.xml` files.  Suggestion:  `Log4jWebConfigurer` should treat empty refresh interval as not-defined.    ---  **Affects:** 3.2.8, 4.0.1  **Attachments:** - [Log4jWebConfigurer.java.diff](https://jira.spring.io/secure/attachment/21796/Log4jWebConfigurer.java.diff) (_772 bytes_)  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-03-04T01:01:14Z","2014-03-26T22:34:07Z"
"","16327","ShallowEtagHeaderFilter should write body early when HttpServletResponse.sendError() is called [SPR-11705]","**[Dmitry Goncharov ](https://jira.spring.io/secure/ViewProfile.jspa?name=dgoncharov)** opened **[SPR-11705](https://jira.spring.io/browse/SPR-11705?redirect=false)** and commented  Third party Servlet (in my case it's Jersey 2) is wrapped by org.springframework.web.filter.ShallowEtagHeaderFilter  In some cases Servlet need to write custom error response. Servlet do it in following way: add headers, write error response body and send error response code by calling response.sendError() method.  ShallowEtagHeaderFilter postpone response body writing, so actual body writing is performed in ShallowEtagHeaderFilter#copyBodyToResponse after sendError method invocation. response.sendError commits wrapped response, therefore ShallowEtagHeaderFilter#copyBodyToResponse is performed on committed response. This leads to wrong response content.  Proposed solution: Force content writing in org.springframework.web.filter.ShallowEtagHeaderFilter.ShallowEtagResponseWrapper when sendError or sendRedirect is called.  ---  **Affects:** 3.0.5  **Issue Links:** - #16339 ShallowEtagHeaderFilter setContentLength on include - #17596 ContentCachingResponseWrapper should NOT sendError() before write body","closed","type: enhancement,","spring-projects-issues","2014-04-18T05:43:37Z","2019-01-11T21:20:01Z"
"","15998","Create GroovyWebApplicationContext [SPR-11371]","**[Dmitriy Kopylenko](https://jira.spring.io/secure/ViewProfile.jspa?name=dmitriy)** opened **[SPR-11371](https://jira.spring.io/browse/SPR-11371?redirect=false)** and commented  Similar to https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/context/support/XmlWebApplicationContext.java  so beans defined in Groovy DSL scripts could be easily loaded by ContextLoader in servlet based web applications.  ---  **Affects:** 4.0.1  **Issue Links:** - #15858 Support Groovy scripts for bean definitions in the TestContext framework","closed","type: enhancement,","spring-projects-issues","2014-01-29T15:01:35Z","2019-01-11T18:38:52Z"
"","16112","Autowiring does not seem to work inside class that implements HandlerMethodArgumentResolver if the implementor is not instantiated with autorwiring itself [SPR-11487]","**[Dimitrios Gazgas](https://jira.spring.io/secure/ViewProfile.jspa?name=gazgas)** opened **[SPR-11487](https://jira.spring.io/browse/SPR-11487?redirect=false)** and commented  Autowiring does not seem to work inside class that implements `HandlerMethodArgumentResolver`.  Code:  ---  ( i have try here to use `@Component` or `@Service` nothing changes)  ```java public class SearchCommandArgumentResolver implements HandlerMethodArgumentResolver {      @Autowired     ValidationService validationService; //is null } ```  ======================Spring Config Class=================  ```java @Configuration @EnableWebMvc @ComponentScan(""com.kic.search"") @ImportResource(""classpath:log4j.xml"") public class SpringWebConfig extends WebMvcConfigurerAdapter {           @Override     public void addArgumentResolvers(             List argumentResolvers) {                   argumentResolvers.add(new SearchCommandArgumentResolver());     }  //i do not have other configuration } ```  Notes: 1. SearchCommandArgumentResolver is sucesfully executed before my Controller 2. When i try to use `@Aytowire` the same ValidationService in another bean, in my controller for example, it works. 3. I try to autowire other bean in SearchCommandArgumentResolver, failed too. 4. Deploy in Tomcat 7.0.40 5. Using jdk1.7.0_51  ---  **Affects:** 3.2.7, 4.0.1","closed","type: enhancement,","spring-projects-issues","2014-02-26T08:19:07Z","2019-01-13T06:55:34Z"
"","15648","Random retry(?) behavior with  [SPR-11020]","**[Diego Plentz](https://jira.spring.io/secure/ViewProfile.jspa?name=plentz)** opened **[SPR-11020](https://jira.spring.io/browse/SPR-11020?redirect=false)** and commented  I'm seeing a weird(random?) behavior when using  with cron. Following my log file, the job class and the application.xml config part.  The app.xml part.  ```  	   ```  It looks like the first run goes well, but then around 8AM it go nuts.  ``` [WARN] 22-10-2013 04:00:18 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 08:21:11 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 08:21:13 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 08:31:31 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 08:31:32 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 08:41:10 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 08:41:12 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 08:50:41 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 08:50:43 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 09:02:49 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 09:02:49 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 09:34:18 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 09:34:19 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 09:45:55 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 09:45:57 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 09:50:02 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 09:50:03 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 10:11:23 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 10:11:24 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 10:42:34 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 10:42:36 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 11:05:21 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 11:05:24 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 11:07:37 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 11:07:40 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 11:30:59 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 11:31:01 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 11:34:02 [com.test.jobs.TestJob] nothing new [WARN] 22-10-2013 11:34:04 [com.test.jobs.TestJob] nothing new ```  The job class  ``` package com.test.jobs;  import org.apache.log4j.Logger;  @Component public class TestJob {  	private static final Logger logger = Logger.getLogger(TestJob.class);  	public void gogogo() { 		logger.warn(""nothing new""); 		return; 	}  } ```  Maybe related to #11526  ---  **Affects:** 3.2.1","closed","status: bulk-closed,","spring-projects-issues","2013-10-22T09:43:35Z","2019-01-12T00:21:39Z"
"","15949","Additional browser tabs receive duplicate messages sent to user destination [SPR-11325]","**[Devashish Datt Mamgain](https://jira.spring.io/secure/ViewProfile.jspa?name=devashish.mamgain)** opened **[SPR-11325](https://jira.spring.io/browse/SPR-11325?redirect=false)** and commented  While working on websockets, I found a bug where duplicate messages were coming. Use case:  1. Open web page connect to the websocket connection. 2. Open the same page in another tab.  Spring messaging creates 2 different sessions for different tabs which are linked to the same user. Bug is while sending a websocket message to the user, the first tab gets the message one time but the second tab gets the same message 2 times. And if we open more tabs, it keeps on increasing, the 3rd tabs gets the same message 3 times, 4th tab 4 times and so on.  Problem seems to be in DefaultUserDestinationResolver.java in the below code:  ```java for (String sessionId : this.userSessionRegistry.getSessionIds(info.getUser())) {     set.add(getTargetDestination(headers.getDestination(), info.getDestination(), sessionId, info.getUser())); } ```  Here for the same user, all the sessionIds are fetched and then all destinations to the given user are added as the target destination for the message which is causing the problem as mentioned above.    ---  **Affects:** 4.0 GA  **Reference URL:** https://groups.google.com/forum/#!topic/spring-framework-contrib/vtTWovqzKW8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b4e48d6749346d3272dcb4cee84317baae49dcd5","closed","type: bug,","spring-projects-issues","2014-01-17T23:50:42Z","2014-01-28T13:07:19Z"
"","15669","meet infinite loop when using async controller [SPR-11041]","**[deng hui](https://jira.spring.io/secure/ViewProfile.jspa?name=truetime)** opened **[SPR-11041](https://jira.spring.io/browse/SPR-11041?redirect=false)** and commented  I am followoing article/showcase of spring-mvc-chat,  ``` @Controller @RequestMapping(""/message"") @SessionAttributes(types = User.class) public class MessageController { 	@Autowired MessageDocument messageColl; 	@Autowired MessageService messageServ;  	@RequestMapping(method = RequestMethod.GET) 	public String newMessageBox(Model model, @ModelAttribute User user) { 		List messages = messageColl.findRACIMessage(user.getId(), new PageRequest(0, 100, Direction.DESC, ""_id"")); 		model.addAttribute(""messages"", messages); 		return ""MessageMgmt/message""; 	}  	/** 	 *  	 * @param messageIndex 	 * @param direction 	 *    forward - get message after messageIndex,  	 *    backward - get message before messageIndex 	 * @param user 	 * @return 	 */ 	@RequestMapping(method = RequestMethod.GET, value = ""/{direction}/{messageIndex}"") 	@ResponseBody 	public DeferredResult getMessages(@PathVariable String direction, @PathVariable String messageIndex, @ModelAttribute User user) { 		ObjectId index = messageIndex.equals(""undefined"") ? new ObjectId(0,0,0) : new ObjectId(messageIndex); 		final DeferredResult deferredResult = new DeferredResult(null, Collections.emptyList());  		messageServ.addRequest(user.getId(),deferredResult, index); 		deferredResult.onCompletion(new Runnable() { 			@Override 			public void run() { 				messageServ.removeRequest(deferredResult); 			} 		}); 		return deferredResult; 	}  	@RequestMapping(method = RequestMethod.POST) 	@ResponseBody 	public void postMessage(@RequestBody Message message, @ModelAttribute User user) { 		messageServ.postMessage(user, message); 	}  	/** 	 * DeferredResult from former expired session will cause 'user required' exception when new session is created by re-login,  	 * in this case we just discard getMessage for last session 	 * @param ex 	 */ 	@ExceptionHandler(HttpSessionRequiredException.class) 	@ResponseBody 	public List handleExceptions(HttpSessionRequiredException ex) {         return new ArrayList();     } }  ```  during testing I got such dead-lock scenario:  ``` 2013-10-29 22:37:39,506 DEBUG: Invoking @ExceptionHandler method: public java.util.List com.azelea.MessageMgmt.controllers.MessageController.handleExceptions(org.springframework.web.HttpSessionRequiredException) >>> org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:319) 2013-10-29 22:37:39,507 DEBUG: Written [[]] as ""application/json;charset=UTF-8"" using [org.springframework.http.converter.json.MappingJackson2HttpMessageConverter@1c081af] >>> org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:150) 2013-10-29 22:37:39,508 DEBUG: Null ModelAndView returned to DispatcherServlet with name 'azelea': assuming HandlerAdapter completed request handling >>> org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:999) 2013-10-29 22:37:39,508 DEBUG: Successfully completed request >>> org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:951) 2013-10-29 22:37:39,522 DEBUG: Using MultipartResolver 'filterMultipartResolver' for MultipartFilter >>> org.springframework.web.multipart.support.MultipartFilter.lookupMultipartResolver(MultipartFilter.java:153) 2013-10-29 22:37:39,522 DEBUG: Request [/Azelea/message/forward/526fc66d223788a717d4e1b4] is not a multipart request >>> org.springframework.web.multipart.support.MultipartFilter.doFilterInternal(MultipartFilter.java:114) 2013-10-29 22:37:39,522 DEBUG: DispatcherServlet with name 'azelea' processing GET request for [/Azelea/message/forward/526fc66d223788a717d4e1b4] >>> org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:823) 2013-10-29 22:37:39,522 DEBUG: Looking up handler method for path /message/forward/526fc66d223788a717d4e1b4 >>> org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:219) 2013-10-29 22:37:39,523 DEBUG: Returning handler method [public org.springframework.web.context.request.async.DeferredResult com.azelea.MessageMgmt.controllers.MessageController.getMessages(java.lang.String,java.lang.String,com.azelea.UserMgmt.entities.User)] >>> org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:226) 2013-10-29 22:37:39,523 DEBUG: Last-Modified value for [/Azelea/message/forward/526fc66d223788a717d4e1b4] is: -1 >>> org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:912) 2013-10-29 22:37:39,524 DEBUG: Resolving exception from handler [public org.springframework.web.context.request.async.DeferredResult com.azelea.MessageMgmt.controllers.MessageController.getMessages(java.lang.String,java.lang.String,com.azelea.UserMgmt.entities.User)]: org.springframework.web.HttpSessionRequiredException: Expected session attribute 'user' >>> org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:132) 2013-10-29 22:37:39,524 DEBUG: Invoking @ExceptionHandler method: public java.util.List com.azelea.MessageMgmt.controllers.MessageController.handleExceptions(org.springframework.web.HttpSessionRequiredException) >>> org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:319) ...back again above process ```  I wonder if why message responsed by exception handler is successfully handled at 2013-10-29 22:37:39,508 come back to DispatcherServlet and find session attribute user timeout that fall back excption handler again   ---  **Affects:** 3.2.1  **Attachments:** - [debug.log](https://jira.spring.io/secure/attachment/21466/debug.log) (_78.23 kB_) - [debug2.log](https://jira.spring.io/secure/attachment/21467/debug2.log) (_79.05 kB_) - [debug3.log](https://jira.spring.io/secure/attachment/21468/debug3.log) (_78.47 kB_)","closed","status: declined,","spring-projects-issues","2013-10-29T08:10:04Z","2019-01-12T16:35:44Z"
"","15644","Have ExceptionHandlerMethodResolver use most-specific ExceptionHandler method [SPR-11016]","**[Deejay](https://jira.spring.io/secure/ViewProfile.jspa?name=deejay)** opened **[SPR-11016](https://jira.spring.io/browse/SPR-11016?redirect=false)** and commented  It'd be good to have exceptions handled by the `@ExceptionHandler` with the _most specific_ exception type defined. At the moment, it appears to be handled by whichever handler it finds first that can deal with any type in the exception's ancestry.  Jersey's similar `ExceptionMapper` mechanism iterates over each handler, then iterates up the type ancestry of the exception, counting as it goes. The handler with the shortest distance between the exception's actual type and the handled type wins and is returned. This could be cached for efficiency.   ---  **Reference URL:** http://stackoverflow.com/questions/19498378/setting-precedence-of-multiple-controlleradvice-exceptionhandlers/19500823","closed","status: bulk-closed,","spring-projects-issues","2013-10-22T00:28:34Z","2019-01-12T00:21:45Z"
"","16089","AbstractMessageConverter.supportsMimeType() should facilitate more restrictive matching strategies [SPR-11463]","**[David Turanski](https://jira.spring.io/secure/ViewProfile.jspa?name=dturanski)** opened **[SPR-11463](https://jira.spring.io/browse/SPR-11463?redirect=false)** and commented  Currently boolean supportsMimeType(MessageHeaders headers) delegates to the contentTypeResolver. A null return value from contentTypeResolver.resolve()(i.e., no content-type header present) or no ContentTypeResolver set, will immediately return true for supportsMimeType(...). In some cases we want this converter to match only if the content-type header exists, or at least check that the converter should only match if it explicitly supports a default MIME type.  A work-around for these cases may be implemented via ContentTypeResolver.setDefaultValue(). If set to the expected content-type value, the converter will only match if it explicitly supports the default MIME type. Alternately if the defaultValue is set to something unexpected, e.g. \*/\*, then the converter will only be applied if the content-type header exists and matches one of the supported types. This is a bit of a hack and requires familiarity with the internals of AbstractMessageConverter. We had discussed simply adding a constructor DefaultContentTypeResolver(MimeType defaultMimeType) which supports the first case. Requiring the content-type header to be present seems like something that should be in AbstractMessageConverter since a null return value from DefaultContentTypeResolver indicates the content-type header is not present. Maybe a boolean property like contentTypeResolutionRequired.  ``` MimeType mimeType = getMimeType(headers); if (mimeType == null) {    return !contentTypeResolutionRequired; } ```    ---  **Affects:** 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/56476cdd5f806831b1619de91d00354458de3857","closed","type: enhancement,","spring-projects-issues","2014-02-21T07:26:29Z","2014-03-26T22:34:05Z"
"","16088","CompositeMessageConverter should allow MessageConverters to use different ContentTypeResolvers [SPR-11462]","**[David Turanski](https://jira.spring.io/secure/ViewProfile.jspa?name=dturanski)** opened **[SPR-11462](https://jira.spring.io/browse/SPR-11462?redirect=false)** and commented  Currenly CompositeMessageConverter.setDefaultContentTypeResolver() propagates to component AbstractMessageConverters which overrides existing ContentTypeResolvers. This method could be removed altogether and simply delegate to the converter's resolver.   ---  **Affects:** 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/60165360550f49f15d2e436370731ae278f52836, https://github.com/spring-projects/spring-framework/commit/0da1eefd74d868cf8728ab318641161595534002","closed","type: enhancement,","spring-projects-issues","2014-02-21T06:37:00Z","2014-03-26T22:34:09Z"
"","16087","DefaultContentTypeResolver should support String-based ""contentType"" header values [SPR-11461]","**[David Turanski](https://jira.spring.io/secure/ViewProfile.jspa?name=dturanski)** opened **[SPR-11461](https://jira.spring.io/browse/SPR-11461?redirect=false)** and commented  Currently DefaultContentTypeResolver does not accept content-type header String values MimeType is required. String types should be resolved with MimeType.valueOf(str)   ---  **Affects:** 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b69c1f15b2e596c03b226abf50282209d77c46d","closed","type: enhancement,","spring-projects-issues","2014-02-21T06:14:44Z","2014-03-26T22:34:09Z"
"","15533","@RestController causing errors [SPR-10905]","**[David Turanski](https://jira.spring.io/secure/ViewProfile.jspa?name=dturanski)** opened **[SPR-10905](https://jira.spring.io/browse/SPR-10905?redirect=false)** and commented  I have a small Boot app with controller: https://github.com/dturanski/SpringOne2013/blob/master/gemfire-demo/hashtag-rest/src/main/java/org/springframework/xd/demo/gemfire/HashTagController.java  When I switch to `@RestController` and remove `@ResponseBody` tags I get some nasty errors such as alternating 404/500 status on /watchhashtags/..   ---  **Affects:** 4.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cf7889e226519bec62345affa7c401b0abbebecc","closed","type: bug,","spring-projects-issues","2013-09-10T11:40:34Z","2013-10-31T12:27:52Z"
"","15911","NoSuchMethodError: org/springframework/web/servlet/tags/MessageTag.setMessage [SPR-11287]","**[David Melia](https://jira.spring.io/secure/ViewProfile.jspa?name=mzz6wh)** opened **[SPR-11287](https://jira.spring.io/browse/SPR-11287?redirect=false)** and commented  Hi,  I have been testing upgrading from Spring 3.2 to Spring 4.0.  We are running in Websphere 7 (I believe you still support this but not recommended).  Everything is fine with a few library upgrades apart from our use of message tag:  ```    	 		 	  ```  which results in the error  ``` java.lang.NoSuchMethodError: org/springframework/web/servlet/tags/MessageTag.setMessage(Ljava/lang/Object;) ```  I believe this is because setMessage has change from Object to MessageSourceResolvable.  Any help would be appreciated.  Thanks    ---  **Affects:** 4.0 GA","closed","in: core,","spring-projects-issues","2014-01-06T04:07:29Z","2019-01-12T05:26:18Z"
"","15922","MBeanExporter should use annotations if @ManagedResource present, otherwise use defaults [SPR-11298]","**[David M. Karr](https://jira.spring.io/secure/ViewProfile.jspa?name=dkarr)** opened **[SPR-11298](https://jira.spring.io/browse/SPR-11298?redirect=false)** and commented  I needed to write an MBeanExporter subclass that works with the ATG framework, but for the scope of this issue, ATG isn't important.  The exporter gets access to a collection of objects that have an implicit ""name"", and the exporter needs to have JMX MBeans created for all of them.  I wanted to allow for the option of using the Spring `@ManagedResource` annotation, along with its associated sub-annotations, but if an associated class doesn't have that annotation, it should just use the defaults.  In other words, I want it to behave like both ""MBeanExporter"" and ""AnnotationMBeanExporter"".  If a bean it's processing has the annotation, it should act like the latter, otherwise the former.  Out of the box, if I process my bean collection with ""AnnotationMBeanExporter"", then it will require that all of the associated classes have the ""`@ManagedResource`"" annotation.  If a single class in the list doesn't have it, the process fails.  If I instead use the plain ""MBeanExporter"", I only get default processing for all beans.  If an associated class has the annotation with additional metadata, it will be ignored.  I was able to work around this by simply instantiating both a ""MBeanExporter"" and a ""AnnotationMBeanExporter"", and controlling the list of beans provided to each of them, making sure that only beans with classes with the annotation were provided to the latter, and all others to the former.  That's not very convenient.  It would be much better if I could define a single MBeanExporter that would use the annotations if present, and use the default strategy if not.  I asked about this on StackOverflow (http://stackoverflow.com/questions/20672671/how-to-make-custom-spring-mbeanexporter-use-the-managed-annotations-on-a-can?noredirect=1#comment30990785_20672671), and with the help of Martin Deinum, I was able to build a component that does exactly this.  I had to do a couple of sub-optimal things in this implementation, because I needed to be able to call methods in existing Spring classes, without having to do copy/paste reuse.  In most cases, I was able to achieve that, with at least one exception.  If this code was integrated into Spring, someone would have the ability to refactor this better to avoid copying code.  I'm attaching the three classes I wrote for this implementation (exporter, strategy, and assembler).  I'm also attaching the ATG-specific subclass that I wrote, NucleusMBeanExporter.  I'm only attaching this for an illustration of how I'm extending my implementation.  I don't intend for this class to be integrated into Spring.  ---  **Affects:** 4.0 GA  **Reference URL:** http://stackoverflow.com/questions/20672671/how-to-make-custom-spring-mbeanexporter-use-the-managed-annotations-on-a-can?noredirect=1#comment30990785_20672671  **Attachments:** - [AnnotationOrDefaultMBeanExporter.java](https://jira.spring.io/secure/attachment/21592/AnnotationOrDefaultMBeanExporter.java) (_1.82 kB_) - [MetadataOrKeyNamingStrategy.java](https://jira.spring.io/secure/attachment/21593/MetadataOrKeyNamingStrategy.java) (_1.48 kB_) - [MetadataOrSimpleReflectiveMBeanInfoAssembler.java](https://jira.spring.io/secure/attachment/21594/MetadataOrSimpleReflectiveMBeanInfoAssembler.java) (_4.35 kB_) - [NucleusMBeanExporter.java](https://jira.spring.io/secure/attachment/21595/NucleusMBeanExporter.java) (_3.67 kB_)  **Issue Links:** - #14541 Allow `@ManagedResource` to be used with `@Bean` methods - #18614 Reject `@ManagedResource` a on class which is not public  1 votes, 3 watchers","open","type: enhancement,","spring-projects-issues","2014-01-10T11:30:28Z","2019-01-13T06:56:31Z"
"","15857","Error in documentation regarding exclusion of commons-logging [SPR-11232]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[SPR-11232](https://jira.spring.io/browse/SPR-11232?redirect=false)** and commented  http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-not-using-commons-logging states commons-logging should be excluded from the spring-context dependency, but it is in fact spring-core which depends on commons-logging, so it should be excluded from this artifact.   ---  **Reference URL:** http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#overview-not-using-commons-logging  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/618368304176719006ac4053b5fe5e4884ac7c3e","closed","type: documentation,","spring-projects-issues","2013-12-15T23:53:12Z","2014-01-28T13:07:06Z"
"","15595","Can @Profile be @Documented [SPR-10967]","**[David Goblirsch](https://jira.spring.io/secure/ViewProfile.jspa?name=dmgob)** opened **[SPR-10967](https://jira.spring.io/browse/SPR-10967?redirect=false)** and commented  `@Configuration`, `@Import`, `@ImportResource`, etc. are all `@Documented` so they appear in JavaDocs, but `@Profile` doe not.   ---  **Affects:** 3.2.4","closed","type: enhancement,","spring-projects-issues","2013-10-08T14:01:03Z","2013-10-11T10:14:41Z"
"","16345","@Configuration imported via @ImportResource is not processed [SPR-11723]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11723](https://jira.spring.io/browse/SPR-11723?redirect=false)** and commented  Similar but different to #16056 (and more surprising  and irritating to users). Originally raised via Spring Boot at https://github.com/spring-projects/spring-boot/issues/710.  ---  **Affects:** 4.0.3  **Issue Links:** - #15612 AnnotationConfigApplicationContext doesn't process `@Configuration` classes scanned by component scan. (_**""is duplicated by""**_) - #14201 Beans defined by `@ComponentScan` are skipped in `@Configuration` override - #16056 `@Configuration` imported via ImportBeanDefinitionRegistrar is not processed as configuration - #16848 Regression in `@Condition` exclusion - #19171 Doc: `@Bean` methods on `@Configuration` class returned from another `@Bean` method do not work  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2014-04-23T01:53:25Z","2019-01-13T06:54:24Z"
"","16309","Expose Spring MVC handled exception as request attribute when no view rendering is required [SPR-11686]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11686](https://jira.spring.io/browse/SPR-11686?redirect=false)** and commented  Is there any reason `DefaultHandlerExceptionResolver` couldn't set ""javax.servlet.error.exception"" for all the exceptions it handles? Anyone writing an error view is left without some vital information (especially rich when it is a `BindException`, for instance). Surely we could add it without breaking any existing applications?   ---  **Affects:** 4.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/476864f3e91411b1f75c8777154c7d118341a6e3","closed","type: enhancement,","spring-projects-issues","2014-04-11T03:29:20Z","2014-07-18T10:16:32Z"
"","16307","Infinite loop with @Lazy @Scope @Bean [SPR-11684]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11684](https://jira.spring.io/browse/SPR-11684?redirect=false)** and commented  It's quite easy to create a nasty runtime infinite loop (and `StackOverflowException`). Example:  ``` 	@Test 	public void contextLoads() { 		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(TestConfig.class); 		Runnable foo = context.getBean(Runnable.class); 		foo.run(); 	}  	@Configuration 	protected static class TestConfig {  		@Autowired 		private Runnable foo;  		@Bean 		@Lazy 		@Scope(proxyMode = ScopedProxyMode.INTERFACES) 		public Runnable foo() { 			return foo; 		} 	} ```  This is a contrived example to make it obvious how stupid it is, but you can easily get the same thing appearing much more subtly (I came across it with Spring Security builders that accepted a strategy reference and then exposed it as a `@Lazy @Scoped @Bean`).  Is there anything we can do to detect this at bean creation time?   --- No further details from [SPR-11684](https://jira.spring.io/browse/SPR-11684?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2014-04-11T01:10:47Z","2019-01-12T00:20:24Z"
"","16257","Support simultaneous use of classes and locations in @ContextConfiguration [SPR-11634]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11634](https://jira.spring.io/browse/SPR-11634?redirect=false)** and commented  #### Background  It should be up to a `SmartContextLoader` to decide if it supports both `classes` and `locations`. Historically there was no `ApplicationContext` that supported both XML resources and annotated classes (so you had to choose one as an entry point). That isn't the case any longer since Spring Boot doesn't care much what it eats.  #### Deliverables  1. [x] Stop throwing an `IllegalArgumentException` in the constructor in `ContextConfigurationAttributes` if both `locations` and `classes` are supplied. 2. [x] Update the Javadoc for all related classes to ensure that it doesn't state that `locations` and `classes` cannot be used simultaneously.    - for example: `ContextConfigurationAttributes`, `@ContextConfiguration`, etc. 3. [x] Update the _Testing_ chapter of the reference manual to ensure that it doesn't state that `locations` and `classes` cannot be used simultaneously.    ---  **Affects:** 4.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8e89aff48f0b83cdee779f83edddd8572fe4a3b7, https://github.com/spring-projects/spring-framework/commit/989f6194b65c617ce4f97b275996130bc18389e2, https://github.com/spring-projects/spring-framework/commit/1f017c4acb3a4b4acdf088bda966e8593349ba5b","closed","type: enhancement,","spring-projects-issues","2014-03-31T03:25:20Z","2014-05-01T01:36:42Z"
"","16173","MVC handler method detection should ignore scopedTarget.x in favor of corresponding proxy bean [SPR-11548]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11548](https://jira.spring.io/browse/SPR-11548?redirect=false)** and commented  According to #11780 I would expect that scoped targets are **not** autowire candidates and therefore would not cause problems with autowiring using `@Autowired`. But if I define a `@Bean @Lazy @Scope(proxyMode=INTERFACES)` all the `@Autowired` sites for beans of that type blow up (2 beans of the same type are found: x and  scopedTarget.x).  ---  **Affects:** 4.0.2  **Issue Links:** - #18298 Consistent bean type checking for endpoint handlers  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2014-03-13T04:42:10Z","2019-01-11T21:35:25Z"
"","16081","ContextLoader is supplied composed annotation class instead of test class for default resource detection [SPR-11455]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11455](https://jira.spring.io/browse/SPR-11455?redirect=false)** and commented  #### Overview  I guess it all works when the annotation is `@ContextConfiguration` but when it is a _composed annotation_ (i.e., an annotation meta-annotated with `@ContextConfiguration`) then the test framework all goes a bit haywire. I think if this bug were fixed then custom annotations composed with `@ContextConfiguration` would pick up the default context locations or configuration classes automatically. As things stand they don't, and there's no workaround as far as I can tell.  #### Analysis  `ContextConfigurationAttributes` has a `declaringClass` attribute that looks as if it is supposed to contain the test class. `ContextLoaderUtils.resolveContextConfigurationAttributes(Class)` loses that information somehow, maybe by using the `declaringClass` instead of the `rootDeclaringClass` of the `AnnotationDescriptor` it is working with, or maybe because the `ContextConfigurationAttributes` needs a new property for the `rootDeclaringClass` (my guess is the former because who would need the meta-annotation class)?  #### Further Analysis  The same problem applies to the `@ContextHierarchy` processing code, and a similar problem exists for the invocation of `ActiveProfilesResolver` instances (see #16093).  #### Consequences  One consequence is that there is no way for a `ContextLoader` (or `SmartContextLoader`) to access the _declaring_ test class to discover default resource locations or configuration classes when `@ContextConfiguration` is used as a meta-annotation.  ---  **Affects:** 4.0 GA  **Attachments:** - [spring-test-4.0.3.BUILD-SNAPSHOT.jar](https://jira.spring.io/secure/attachment/21691/spring-test-4.0.3.BUILD-SNAPSHOT.jar) (_437.47 kB_)  **Issue Links:** - #12483 Provide meta-annotation support for test-related annotations - #15666 Support meta-annotation attribute overrides in the TestContext framework - #16264 `@Configuration` class is not detected as default in composed annotation in the TestContext framework - #16093 ActiveProfilesResolver is supplied composed annotation class instead of test class","closed","type: bug,","spring-projects-issues","2014-02-20T03:26:03Z","2019-01-13T06:55:45Z"
"","16056","@Configuration imported via ImportBeanDefinitionRegistrar is not processed as configuration [SPR-11430]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11430](https://jira.spring.io/browse/SPR-11430?redirect=false)** and commented  `@Configuration` imported via `ImportBeanDefinitionRegistrar` is not processed as configuration. Actually it seems to get proxied OK, but the `@Beans` inside it are not instantiated or registered with the bean factory.  ---  **Affects:** 4.0.1  **Issue Links:** - #19171 Doc: `@Bean` methods on `@Configuration` class returned from another `@Bean` method do not work - #16345 `@Configuration` imported via `@ImportResource` is not processed  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/71c6eb2bb594f29803b6ec4a50de875def98be86","closed","type: enhancement,","spring-projects-issues","2014-02-15T04:11:39Z","2019-01-13T06:55:51Z"
"","15977","AbstractApplicationEventMulticaster can fail to retrieve listeners in a nasty way [SPR-11352]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11352](https://jira.spring.io/browse/SPR-11352?redirect=false)** and commented  `AbstractApplicationEventMulticaster` makes an attempt to recover from a failed bean lookup:  ``` 				BeanFactory beanFactory = getBeanFactory(); 				for (String listenerBeanName : listenerBeans) { 					try { 						ApplicationListener listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class); 						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) { 							retriever.applicationListenerBeans.add(listenerBeanName); 							allListeners.add(listener); 						} 					} 					catch (NoSuchBeanDefinitionException ex) { 						// Singleton listener instance (without backing bean definition) disappeared - 						// probably in the middle of the destruction phase 					} 				}  ```  but `NoSuchBeanDefinitionException` is too narrow to be really useful in all situations (e.g. you can fail with `BeanCreationException` as well). This means the legitimately registered listener instances don't get a callback that they expect which might cause unexpected results.  (Spring Boot is prone to this kind of error because it intentionally tries to handle exceptions from a failed context refresh.)   ---  **Affects:** 4.0 GA","closed","status: bulk-closed,","spring-projects-issues","2014-01-23T02:37:00Z","2019-01-12T02:46:11Z"
"","15828","FactoryBean bean type detection can causes fatal early instantiation [SPR-11202]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11202](https://jira.spring.io/browse/SPR-11202?redirect=false)** and commented  The BeanFactory.getBeanNamesForAnnotation() method has been causing issues. Here's a test case:  ``` public class BeansWithAnnotationTests {  	private AnnotationConfigApplicationContext context;  	@After 	public void close() { 		if (context != null) { 			context.close(); 		} 	}  	@Test // Fails 	public void testWithImporter() { 		context = new AnnotationConfigApplicationContext(Wrapper.class); 		assertEquals(""foo"", context.getBean(""value"")); 	} 	 	@Test // Passes 	public void testWithoutImporter() { 		context = new AnnotationConfigApplicationContext(Config.class); 		assertEquals(""foo"", context.getBean(""value"")); 	} 	 	@Configuration 	@Import(Selector.class) 	protected static class Wrapper { 		 	} 	 	protected static class Selector implements ImportSelector {  		@Override 		public String[] selectImports(AnnotationMetadata importingClassMetadata) { 			return new String[] {Config.class.getName() }; 		} 		 	}  	@Configuration 	protected static class Config {  		public Config() { 			// Just so I can put a breakpoint here 			System.getProperty(""foo""); 		}  		@Bean 		public FooFactoryBean foo() { 			return new FooFactoryBean(); 		}  		@Bean 		public String value() throws Exception { 			String name = foo().getObject().getName(); 			Assert.state(name != null, ""Name cannot be null""); 			return name; 		}  		@Bean 		@Conditional(NoBarCondition.class) 		public String bar() throws Exception { 			return ""bar""; 		}  	}  	protected static class NoBarCondition implements Condition {  		@Override 		public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) { 			if (context.getBeanFactory().getBeanNamesForAnnotation(Bar.class).length > 0) { 				return false; 			} 			return true; 		}  	}  	@Retention(RetentionPolicy.RUNTIME) 	@Documented 	@Target(ElementType.TYPE) 	protected static @interface Bar { 	}  	protected static class FooFactoryBean implements FactoryBean, InitializingBean {  		private Foo foo = new Foo();  		@Override 		public Foo getObject() throws Exception { 			return foo; 		}  		@Override 		public Class getObjectType() { 			return Foo.class; 		}  		@Override 		public boolean isSingleton() { 			return true; 		}  		@Override 		public void afterPropertiesSet() throws Exception { 			this.foo.name = ""foo""; 		}  	}  	protected static class Foo {  		private String name;  		public String getName() { 			return name; 		}  	}  } ```  You need a perfect storm of a FactoryBean as a `@Bean` inside a `@Configuration` that was ImportSelected for this to break (I tried quite a few other scenarios). The passing test works because Spring doesn't try to instantiate the Config object.  ---  **Affects:** 4.0 RC2  **Issue Links:** - #19119 StackOverflowError for advisor search against factory-bean reference to FactoryBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/106a973a4d3e62884655db7eebc2b7cb03aa9ea2","closed","in: core,","spring-projects-issues","2013-12-10T11:52:09Z","2019-01-11T18:29:17Z"
"","15719","If the !profile selector is used the other profiles can be ignored in  [SPR-11093]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11093](https://jira.spring.io/browse/SPR-11093?redirect=false)** and commented  The !profile selector in AbstractEnvironment causes premature termination of loop.  Here's the code:  ``` 	@Override 	public boolean acceptsProfiles(String... profiles) { 		Assert.notEmpty(profiles, ""Must specify at least one profile""); 		for (String profile : profiles) { 			if (profile != null && profile.length() > 0 && profile.charAt(0) == '!') { 				return !isProfileActive(profile.substring(1)); 			} 			if (isProfileActive(profile)) { 				return true; 			} 		} 		return false; 	}  ```  So with `` even if the ""bar"" profile is active the method returns false when ""foo"" is also active. Maybe that was intentional, but it doesn't match what I read in the Javadocs (and XSD docs).   ---  **Affects:** 4.0 RC1  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)","closed","in: core,","spring-projects-issues","2013-11-14T02:41:26Z","2013-12-11T23:57:19Z"
"","15696","Add BeanFactory.getBeanNamesWithAnnotation(Class, boolean, boolean) for parity with getBeansOfType(...) [SPR-11069]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11069](https://jira.spring.io/browse/SPR-11069?redirect=false)** and commented  Add `BeanFactory.getBeanNamesWithAnnotation(Class, boolean, boolean)` for parity with `getBeansOfType(...)`. The existing `BeanFactory.getBeansWithAnnotation(Class)` is useful, but causes eager initialization of beans and factory beans. It would be good to avoid that where necessary, especially in `Condition` implementations.   --- No further details from [SPR-11069](https://jira.spring.io/browse/SPR-11069?redirect=false)","closed","type: enhancement,","spring-projects-issues","2013-11-05T04:16:15Z","2013-12-03T15:15:32Z"
"","15680","HttpComponentsClientHttpRequestFactory method signature changes prevent user code from supporting Spring 3 and Spring 4 simultaneously [SPR-11053]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11053](https://jira.spring.io/browse/SPR-11053?redirect=false)** and commented  The methods whose signatures changed are the ones involving HttpClient (including the constructor). I think all we need to do is downcast to CloseableHttpClient in Spring 4.0 (and possibly assert beforehand to enhance the error message).   ---  **Affects:** 4.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bfa6c2d5a27e4f8095f1047853ff3db5d07656af","closed","type: bug,","spring-projects-issues","2013-10-31T07:43:48Z","2013-10-31T12:28:06Z"
"","15678","FactoryBean with constructor-arg placeholder in XML cannot be resolved if ApplicationContext is required for creating placeholder configuration [SPR-11051]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11051](https://jira.spring.io/browse/SPR-11051?redirect=false)** and commented  This fails (but not if you move the factory bean definition to Java):  ```         ```  ``` 	@Configuration 	@Import({ Config.class }) 	// comment this out and context loads fine 	@ImportResource(""classpath:context.xml"") 	protected static class Application {  		@Bean 		public FooFactoryBean foo(@Value(""${value:bar}"") String value) { 			return new FooFactoryBean(value); 		} 	}  	@Configuration 	protected static class Config { 		@Bean 		public PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer( 				ApplicationContext context) { 			return new PropertySourcesPlaceholderConfigurer(); 		} 	}  	public static class FooFactoryBean implements FactoryBean {  		public FooFactoryBean(String value) { 			Assert.doesNotContain(value, ""$""); 		}  		@Override 		public Foo getObject() throws Exception { 			return new Foo(); 		}  		@Override 		public Class getObjectType() { 			return Foo.class; 		}  		@Override 		public boolean isSingleton() { 			return true; 		}  	}  	public static class Foo {  	} ```    ---  **Affects:** 4.0 M3","closed","status: bulk-closed,","spring-projects-issues","2013-10-31T05:28:31Z","2019-01-12T00:21:27Z"
"","15677","Spring web depends on a beta release of Apache HTTP Client [SPR-11050]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11050](https://jira.spring.io/browse/SPR-11050?redirect=false)** and commented  4.3.1 is available, so probably we should build and ship with that (not 4.3-beta2).   ---  **Affects:** 4.0 RC1","closed","type: bug,","spring-projects-issues","2013-10-31T02:55:57Z","2013-10-31T12:28:02Z"
"","15676","Cannot create MockHttpSession with servlet 2.x [SPR-11049]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11049](https://jira.spring.io/browse/SPR-11049?redirect=false)** and commented  This shows up in the Spring OAuth build with Spring 4.0:  ``` java.lang.NoClassDefFoundError: javax/servlet/SessionCookieConfig 	at org.springframework.mock.web.MockHttpSession.(MockHttpSession.java:99) 	at org.springframework.mock.web.MockHttpSession.(MockHttpSession.java:89) 	at org.springframework.mock.web.MockHttpSession.(MockHttpSession.java:80) ```  ---  **Affects:** 4.0 RC1  **Issue Links:** - #15916 Document that Servlet mocks are now incompatible with the Servlet 2.5 spec  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2e6c998168e5537df3451fd3df0c09ae0e82a429","closed","status: declined,","spring-projects-issues","2013-10-31T01:54:57Z","2019-01-12T16:35:43Z"
"","15666","Support meta-annotation attribute overrides in the TestContext framework [SPR-11038]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11038](https://jira.spring.io/browse/SPR-11038?redirect=false)** and commented  #### Overview  #12483 is a nice start, but it didn't go far enough for me (I think).  Spring now supports overrides of ""parent"" annotation attributes (through its meta data representation utilities introduced in conjunction with #14814). The Spring TestContext Framework, however, is not yet taking advantage of this feature. So for instance you can annotate a custom annotation with `@ContextConfiguration`, but there's no way for the user of that annotation to provide their own context configuration locations (e.g. `classes=...`).  #### Deliverables  Support meta-annotation attribute overrides for the following annotations within the context of the TestContext framework.  1. [x] `@ContextConfiguration` 2. [ ] `@WebAppConfiguration` 3. [ ] `@ContextHierarchy` 4. [x] `@ActiveProfiles` 5. [x] `@DirtiesContext` 6. [x] `@TestExecutionListeners` 7. [ ] `@IfProfileValue` 8. [ ] `@ProfileValueSourceConfiguration` 9. [x] `@Transactional` 10. [ ] `@BeforeTransaction` 11. [ ] `@AfterTransaction` 12. [x] `@TransactionConfiguration` 13. [ ] `@Rollback` 14. [ ] `@Repeat` 15. [x] `@Timed`  ###### Notes  - AnnotatedElementUtils does not support overrides for the 'value' attribute of an annotation. It is therefore not possible or not feasible to support meta-annotation attribute overrides for some test-related annotations. - Support for meta-annotation attribute overrides for `@Transactional` was already supported via SpringTransactionAnnotationParser. - `@BeforeTransaction` and `@AfterTransaction` do not have attributes. - `@ContextHierarchy`, `@WebAppConfiguration`, `@Rollback`, `@Repeat`, and `@ProfileValueSourceConfiguration` only have single 'value' attributes which cannot be overridden via Spring's meta-annotation attribute support. - Although `@IfProfileValue` has 'values' and 'name' attributes, the typical usage scenario involves the 'value' attribute which is not supported for meta-annotation attribute overrides. Furthermore, 'name' and 'values' are so generic that it is deemed unfeasible to provide meta-annotation attribute override support for these.  ---  **Affects:** 4.0 RC1  **Issue Links:** - #15730 AnnotationUtils fails to retrieve attribute values from non-public annotations (_**""depends on""**_) - #14814 Allow meta-annotations to override attributes from their parent (_**""depends on""**_) - #15735 Document meta-annotation support in the TestContext framework (_**""is depended on by""**_) - #12483 Provide meta-annotation support for test-related annotations - #16081 ContextLoader is supplied composed annotation class instead of test class for default resource detection - #15734 Support composed annotations declared on interfaces - #16020 Introduce aliases for 'value' annotation attributes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/64f593db8f0209d4971722314ff159a5e7266b76, https://github.com/spring-projects/spring-framework/commit/c7c395d0d0754acccd5d60707fa862064aae02b9","closed","type: enhancement,","spring-projects-issues","2013-10-28T06:13:04Z","2019-01-11T19:25:38Z"
"","15656","groovy-all should not be a mandatory dependency [SPR-11028]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11028](https://jira.spring.io/browse/SPR-11028?redirect=false)** and commented  This section in build.gradle:  ``` project('spring-beans-groovy') { 	description 'Groovy Bean Definitions' 	merge.into = project("":spring-beans"")  	dependencies { 		compile(project("":spring-core"")) 		compile ""org.codehaus.groovy:groovy-all:${groovyVersion}"" 	} ```  creates a mandatory dependency on groovy-all (1.8.9!) for anyone using spring-beans. Probably this is unintentional (it's certainly inconvenient)?   ---  **Affects:** 4.0 M3","closed","in: core,","spring-projects-issues","2013-10-25T06:47:28Z","2013-10-31T12:28:03Z"
"","16267","ResourceHttpRequestHandler not closing Resource's input stream [SPR-11644]","**[Dave Hallam](https://jira.spring.io/secure/ViewProfile.jspa?name=dhallam)** opened **[SPR-11644](https://jira.spring.io/browse/SPR-11644?redirect=false)** and commented  #16040 introduced a change with the intention of preventing the output stream being closed when copying a resource.  Unfortunately, the change from FileCopyUtils to StreamUtils has resulted in the resource's input stream not being closed.  see the writeContent() method at https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java#L254  The result of this is that static resources, e.g. html files that are served up by the application remain locked for a period of time as the inputstream has not been programmatically closed.  This prevents the ability to be able to edit static resources (html, css, jsp, etc.), save, and hot deploy as the new versions aren't able to overwrite the locked files.  The other class that was updated by #16040 was ShallowEtagHeaderFilter which is unaffected by this issue as it doesn't involve an input stream.  ---  **Affects:** 3.2.8, 4.0.2, 4.0.3  **Issue Links:** - #16269 MarshallingView should avoid temporary byte array when copying to response  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)  1 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2014-04-01T11:46:15Z","2019-01-11T21:05:44Z"
"","16215","Log Forging in DispatcherServlet via requestURI [SPR-11591]","**[Darius Bohni](https://jira.spring.io/secure/ViewProfile.jspa?name=dariusb)** opened **[SPR-11591](https://jira.spring.io/browse/SPR-11591?redirect=false)** and commented  There is an security issue on line 843/844. An attacker can manipulate the log via malicious request.  The method doService extracts the URI from the request and uses  it unvalidated.  Source:  ```java logger.debug(""DispatcherServlet with name '"" + getServletName() + ""'"" + resumed + 		"" processing "" + request.getMethod() + "" request for ["" + requestUri + ""]""); ```  An attacker can forge the log by sending a request containing %0D%0A  Like: /app/home%0D%0AFAKE  The log will looks like:  ``` 08:34:50.145 [http-bio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - DispatcherServlet with name 'dispatcher' processing GET request for [/app/home FAKE] ```    ---  **Affects:** 3.2.8, 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a2bdc284f9d36d99539c8b051d7f3cbe5d8f7e3a, https://github.com/spring-projects/spring-framework/commit/465ca24ab244a4ea437ea96d9f10a226679a6b05  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: bug,","spring-projects-issues","2014-03-24T07:50:39Z","2014-03-26T22:34:01Z"
"","15928","Optimize lookup of field errors in AbstractBindingResult [SPR-11304]","**[Daniel Mikusa](https://jira.spring.io/secure/ViewProfile.jspa?name=dmikusa)** opened **[SPR-11304](https://jira.spring.io/browse/SPR-11304?redirect=false)** and commented  There is a performance issue when Spring MVC validates a large object graph using JSR 303 Bean Validation API & Hibernated Validator.  Here is the object structure for the [sample project](https://github.com/spring-projects/spring-framework-issues/tree/master/SPR-11304) in spring-framework-issues...  ``` - Address   - propA (string)   - propB (string)   - propC (List) // has around 100 elements        - Object1            - propA (string)            - propB (List)  // has around 30 elements                - Object 2                     - propA                     - propB                     - propC ```  Worst case it takes about 2.5 seconds to process a request that fails validation.  Without validation, processing is very fast.  ---  **Affects:** 3.2.6, 4.0 GA  **Issue Links:** - #16001 StringIndexOutOfBoundsException in AbstractErrors for class-level JSR-303 validator  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-01-13T08:56:25Z","2019-01-11T19:04:33Z"
"","15686","Bad input type when calling processFieldValue for hiddens generated for checkboxes [SPR-11059]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-11059](https://jira.spring.io/browse/SPR-11059?redirect=false)** and commented  When calling ""processFieldValue"" for the values of the hidden inputs created as a companion for checkboxes in CheckboxTag and CheckboxesTag, the input type being passed to the RequestDataValueProcessor is ""checkbox"", but it seems it should be ""hidden"".  See: https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/CheckboxTag.java#L61 and https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/CheckboxesTag.java#L47  This is inconsistent with the hidden created at FormTag in order to keep a browser-incompatible method value:  https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java#L366   ---  **Affects:** 3.2.4","closed","status: bulk-closed,","spring-projects-issues","2013-11-02T20:18:31Z","2019-01-12T00:21:24Z"
"","16172","relative redirect: view name does not work with encoded URLs [SPR-11547]","**[daniel carter](https://jira.spring.io/secure/ViewProfile.jspa?name=dantheperson)** opened **[SPR-11547](https://jira.spring.io/browse/SPR-11547?redirect=false)** and commented  I have some URL paths used in my control request mappings  /circuit/{id}/view /circuit/{id}/extend  the extend operation modifies some data, and then redirects to the ""view"" view in order to display the modified data.  For example * post to /circuit/abc/extend * the controller ends with return ""redirect:view""; * this sends a browser redirect to /circuit/abc/view  This works well, until the id contains characters that are reserved characters in URLs and so have been URL encoded.   what happens in this case is: * post to /circuit/a%2Fc/extend * the controller ends with return ""redirect:view""; * this sends a browser redirect to /circuit/a/c/view  What should happen is a browser redirect to /circuit/a%2F/view  As a workaround, i rebuild the URL myself in the controller.  This is non-ideal as it introduces unnecessary coupling between the java code and what is specified in the RequestMapping annotations  ``` return ""redirect:/circuit/"" + URLEncoder.encodePathSegment(id) + ""/view"" ```  There are a couple related defects where encoded path variables are not handled correctly. #16028 #16067 #15727. Wouldn't be surprised if they are all related to the way UriComponents does the URL encoding of whole fields after variable substitution.  Whereas i believe it should be encoding the variables and then substituting into the fields.  ---  **Affects:** 3.2.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/6da40e72ea5b78287a62bb2b9c0b35d5e1d8241a","closed","status: declined,","spring-projects-issues","2014-03-12T17:17:42Z","2019-01-13T21:00:50Z"
"","16067","MockMvc needs to accept prepared URI with encoded URI path variables [SPR-11441]","**[daniel carter](https://jira.spring.io/secure/ViewProfile.jspa?name=dantheperson)** opened **[SPR-11441](https://jira.spring.io/browse/SPR-11441?redirect=false)** and commented  Good Afternoon,  I have a controller with the following mapping  ``` @RequestMapping(value = ""/circuit/{id}/view"", method = RequestMethod.GET) public String getCircuit(@PathVariable String id,             @ModelAttribute(""search"") CircuitSearchController.SearchParams search, Model model, Principal principal) {...} ```  The id value can contain reserved characters so I URL encode when rendering the view.  For an id of ""ja-ran-17 gigabitethernet 10/0.5790740:579-747"" the browser request thus looks like  ``` http://localhost/myapp/circuit/ja-ran-17%20gigabitethernet%2010%2F0.5790740:579-747/view ```  This is working ok.  When i try to write a test for it however, the URL is getting double encoded  ```         ResultActions result = mockMvc.perform(get(""/circuit/{id}/view"", ""ja-ran-17%20gigabitethernet%2010%2F0.5790740:579-747"").principal(p));          // THEN - circuit should be in the model                      result.andExpect(status().isOk()).andExpect(model().attribute(""circuit"", hasProperty(""circuitId"", is(id))));  ```  log from real request in tomcat  ``` DEBUG o.s.web.servlet.DispatcherServlet - DispatcherServlet with name 'dispatcherServlet' processing GET request for [/circuit-id-manager/circuit/ja-ran-17 gigabitethernet 10/0.5790740:579-747/view]  DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Looking up handler method for path /circuit/ja-ran-17%20gigabitethernet%2010%2F0.5790740:579-747/view  DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Returning handler method [public java.lang.String [...] ```  log from mockmvc request  ``` DEBUG o.s.t.w.s.TestDispatcherServlet - DispatcherServlet with name '' processing GET request for [/circuit/ja-ran-47%20gigabitethernet%2010%2F0.5790740:579-747/view]  DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Looking up handler method for path /circuit/ja-ran-47%2520gigabitethernet%252010%252F0.5790740:579-747/view  ```  With a real request my controller gets passed id=""ja-ran-17 gigabitethernet 10/0.5790740:579-747"" With a mock request my controller is passed id=""ja-ran-47%20gigabitethernet%2010%2F0.5790740:579-747""  Perhaps it is a feature of MockMvc that it automatically does URI encoding of path variables?  If so it is inconsistent with other parts of the Web-Mvc framework see #16028  So i remove the encoding of my path variable and let MockMvc encode it. Now it doesn't find the handler  ``` DEBUG o.s.t.w.s.TestDispatcherServlet - DispatcherServlet with name '' processing GET request for [/circuit/ja-ran-47 gigabitethernet 10/0.5790740:579-747/view]  DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Looking up handler method for path /circuit/ja-ran-47%20gigabitethernet%2010/0.5790740:579-747/view  DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Did not find handler method for [/circuit/ja-ran-47%20gigabitethernet%2010/0.5790740:579-747/view]  ```  I had a similar problem where the framework was treating %2F as / in contravention of RFC3986[1].  That is solved by a BeanPostProcessor calling  ```             // URL decode after request mapping, not before.             requestMappingHandlerMapping.setUrlDecode(false);              // Workaround to make the previous fix work. See https://jira.springsource.org/browse/SPR-11101.             requestMappingHandlerMapping.setAlwaysUseFullPath(true); ```  My guess is that the MockMvc Framework is not using the normal request mapping handler mapping, and so calling setUrlDecode on the normal one has no effect?  [1]""When a URI is dereferenced, the components and subcomponents significant to the scheme-specific dereferencing process (if any) must be parsed and separated before the percent-encoded octets within those components can be safely decoded, as otherwise the data may be mistaken for component delimiters.""  and again in 7.3 ""Percent-encoded octets must be decoded at some point during the dereference process.  Applications must split the URI into its components and subcomponents prior to decoding the octets, as otherwise the decoded octets might be mistaken for delimiters.""  That is clearly what is happening here, %2F is being mistaken for a path delimiter.  Path delimitation must take place before decoding.  ---  **Affects:** 3.2.5  **Attachments:** - [uri-encode-test.tar.bz2](https://jira.spring.io/secure/attachment/21813/uri-encode-test.tar.bz2) (_4.96 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0b69a0ba4be77b63a0f7b12d25dd0c611b3911fb  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-02-18T16:39:06Z","2019-01-13T21:01:13Z"
"","16028","spring:url tag does not correctly encode forward slash / in path variable. Should be calling encodePathSegment [SPR-11401]","**[daniel carter](https://jira.spring.io/secure/ViewProfile.jspa?name=dantheperson)** opened **[SPR-11401](https://jira.spring.io/browse/SPR-11401?redirect=false)** and commented  The UrlTag advises that it will URL encode template URI variables  I have a path URL in my controller  ```java @RequestMapping(value = ""/circuit/{id}/view"", method = RequestMethod.GET) ```  And the following in my jsp to call it:  ```html          ```  If for example id=my/Id then the tag writes out /circuit/my/Id/view  This obviously does not work as it fails to match the request mapping.  It should be URL encoding the path variable to write out /circuit/my%2FId/view  The problem is that / has a special meaning in paths, and thus needs to be escaped in path variables, but UrlTag.replaceUriTemplateParams calls UriUtils.encodePath(...) and ultimately at line 480 of HierarchicalUriComponents it decides that '/' does not need encoding      PATH {     		@Override     		public boolean isAllowed(int c) {     			return isPchar(c) || '/' == c;     		}     	},  Looks like UrlTag should be calling UriUtils.encodePathSegment(...) instead.  ---  **Affects:** 3.2.5  **Issue Links:** - #14937 Spring tag library does not encode a URI correctly (_**""is duplicated by""**_) - #15137 Support advanced URI Template Syntax - #14940 Spring request mapping annotation does not map an encoded URI correctly","closed","type: enhancement,","spring-projects-issues","2014-02-06T15:30:35Z","2019-01-11T21:28:44Z"
"","15974","StatementCreatorUtils introduces java 1.6 dependency [SPR-11349]","**[daniel carter](https://jira.spring.io/secure/ViewProfile.jspa?name=dantheperson)** opened **[SPR-11349](https://jira.spring.io/browse/SPR-11349?redirect=false)** and commented  The 3.2 series minimum requirement is java 1.5 but StatementCreatorUtils makes a call to Collections.newSetFromMap() which is since 1.6.  This is preventing us from upgrading from 3.2.5 to get the #15726 fix.  This issue manifests as java.lang.NoClassDefFoundError at org.springframework.jdbc.core.ArgumentPreparedStatementSetter.cleanupParameters(ArgumentPreparedStatementSetter.java:70) at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:656)  P.S. we use animal sniffer to catch accidental usage of newer API methods in our builds, very handy.  ---  **Affects:** 3.2.6  **Issue Links:** - #15937 spring-jdbc-3.2.6.RELEASE doesn't support JDK 5. (_**""duplicates""**_)","closed","type: bug,","spring-projects-issues","2014-01-22T13:43:43Z","2019-01-11T18:40:13Z"
"","15936","Spring download blocked by two different virus scanners [SPR-11312]","**[Daan Biesterbos](https://jira.spring.io/secure/ViewProfile.jspa?name=daanbiesterbos)** opened **[SPR-11312](https://jira.spring.io/browse/SPR-11312?redirect=false)** and commented  Hi,  Although this may not really be a bug it seemed like this is the best place to report the following problem. I tried to download spring, and spring tools. Both are blocked by kaspersky. So I asked the fellow programmer who is already using spring for help. He tried to download spring and was also not able to download spring without his virusscanner go berserk.  Is this a known issue? I tried to download the newest versions.  Kind Regards, Daan   ---  **Reference URL:** http://spring.io/tools/sts  1 votes, 4 watchers","closed","","spring-projects-issues","2014-01-14T14:24:43Z","2019-01-11T19:03:39Z"
"","16130","Default KeyGenerator doesn't work for methods with arguments of array types [SPR-11505]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-11505](https://jira.spring.io/browse/SPR-11505?redirect=false)** and commented  The way that Spring calculates cache keys doesn't work for methods that take parameters of array types. For example, define this method:  ``` @Cacheable public String test(String[] one) { return ""something""; } ```  Then run:  ``` String[] alpha = {""a"",""b"",""c""}; String[] beta = {""a"",""b"",""c""}; test(alpha); test(beta); ```  The result is 2 executions of the method body (where in my opinion, only 1 is expected) and 2 cache entries (again, only 1 is expected).  The result of this problem is that methods with array type parameters will always result in a cache miss (the body is always executed) and a cache put is always done after the method is executed (filling the cache with garbage that's never used again). This second part is particularly troublesome, as useful stuff ends up getting evicted as the cache fills with garbage.  The problem is that DefaultKeyGenerator (Spring < 4) and SimpleKeyGenerator (Spring 4 and later) use hashCode(), and the hashCode of an array isn't specifically defined, and bubbled up to Object.hashCode() which uses the memory address of the array. Since each array, even if it has the same items in it, has a different address, the hashCode is always different.  Changing the implementation to use deepEquals/deepHashCode fixes this problem.   ---  **Affects:** 3.1.4, 3.2.8, 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e50cff47c1a9a955f7814e12e64dce93eb43aed0, https://github.com/spring-projects/spring-framework/commit/6d8f3a0a20fe3f0f75dc98eccd7080248238f567, https://github.com/spring-projects/spring-framework/commit/70155e9ff91a712e5df2b95de2d05fdf1022b54a  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","in: core,","spring-projects-issues","2014-03-03T14:43:22Z","2014-03-26T22:34:06Z"
"","16220","Simple creation of HttpHeaders for single header [SPR-11597]","**[Craig Walls](https://jira.spring.io/secure/ViewProfile.jspa?name=habuma)** opened **[SPR-11597](https://jira.spring.io/browse/SPR-11597?redirect=false)** and commented  In its current form, if I want to set a single header on a response, I must...  HttpHeaders headers = new HttpHeaders(); headers.setETag(etagValue);  It would be nice if there were a simpler way, such as...  HttpHeaders headers = new HttpHeaders(""ETag"", etagValue);  ...or...  HttpHeader headers = HttpHeaders.singleHeader(""ETag"", etagValue);  ---  **Issue Links:** - #16374 Provide builders for HttpEntity and ResponseEntity - #16371 Make constants in HttpHeaders public  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2014-03-25T09:02:17Z","2019-01-11T21:32:23Z"
"","15760","Autowiring is inconsistent depending on whether target @Bean singleton exists [SPR-11134]","**[craig pardey](https://jira.spring.io/secure/ViewProfile.jspa?name=craigpardey)** opened **[SPR-11134](https://jira.spring.io/browse/SPR-11134?redirect=false)** and commented  The contents of an `@Autowired List` can change depending on which other lists are declared in the same context.  See the attached test case.  When the three lists are declared in the same context, all lists have 3 elements. However, when separated into different contexts the lists have numbers of elements.  For example, the `List` has 3 elements when declared in a context with `List` and `List`, but only 2 elements when declared in a context by itself.  |Type Of List|Expected Elements|Actual Elements| |:---|:---|:---| | IDatabaseObject | 3 | 3 | | IPostgresDatabaseObject | 3 | 2 | | PostgresObject | 3 | 1 |    ---  **Affects:** 3.2.5  **Attachments:** - [AutowireListTest.java](https://jira.spring.io/secure/attachment/21523/AutowireListTest.java) (_3.96 kB_)","closed","type: enhancement,","spring-projects-issues","2013-12-02T06:13:35Z","2015-03-25T08:25:33Z"
"","15546","Duplicate scan of @Import annotations when inherited from another annotation [SPR-10918]","**[Clancy Kornie](https://jira.spring.io/secure/ViewProfile.jspa?name=ckornie)** opened **[SPR-10918](https://jira.spring.io/browse/SPR-10918?redirect=false)** and commented  I ran into a situation where classes can be scanned twice. It's quite easy to reproduce.  Given an annotation class:  ``` @Import(TestImport.class) public @interface AnotherImport { } ```  And a configuration class which is annotated with the above:  ``` @Configuration @AnotherImport public class TestConfiguration { } ```  And the imported class:  ``` public class TestImport implements ImportBeanDefinitionRegistrar {     @Override     public void registerBeanDefinitions(@NotNull AnnotationMetadata anImport, @NotNull BeanDefinitionRegistry aRegistry) {         System.out.println(""I am scanned twice!"");     } } ```  You can see that the log message is printed twice. I don't believe this is correct behaviour. After debugging I believe the issue occurs in ConfigurationClassParser.collectImports where the annotation is resolved on AnotherImport as a class and on TestConfiguration as a string. Hence it is placed into the imports HashSet twice.  Perhaps we could do the conversion from a String to a class at this stage?  ---  **Affects:** 3.2.4  **Issue Links:** - #15161 Filter source `@Configuration` with `@ComponentScan` - #16939 `@Import` in another annotation still results in double scan  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2013-09-15T23:38:58Z","2019-01-13T06:58:08Z"
"","16336","gzip compression in DispatcherServlet [SPR-11714]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-11714](https://jira.spring.io/browse/SPR-11714?redirect=false)** and commented  A very old issue to add gzip compression to the Web MVC framework was closed in favor of configuring compression at the server level, but I'd like to revisit the issue.  I've been working on adding compression as a configuration option to Spring Boot, and configuring it for either Tomcat or Jetty requires an explicit list of every content type that is eligible for compression, a list that conspicuously does not by default include `application/json` in either case, and can't take wildcards to compress `application/*+json/xml`. I've dug more into Tomcat, but configuring it requires protocol-specific casts to get to the config methods, and configuring the eligible content types is not thread safe (and in a Spring context can't reliably be done before publication). Additionally, the newer NIO connectors on Jetty and Tomcat can both have some collisions with compression.  I suggest inserting a compressing wrapper around the `HttpServletResponse` in the `view.render` call in the `DispatcherServlet`. Would this feature be considered ""on-topic"" at this point?  ---  **Affects:** 4.0.3  **Reference URL:** #5514  This issue is a sub-task of #16413  **Issue Links:** - #11799 Add support for compressing resources - #5514 GZIP compression filter  1 votes, 11 watchers","closed","status: declined,","spring-projects-issues","2014-04-21T10:46:16Z","2019-01-14T05:16:40Z"
"","16285","Spring cannot solve class-level generics [SPR-11662]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-11662](https://jira.spring.io/browse/SPR-11662?redirect=false)** and commented  If a component class (a controller in my case) is declared with a generic type parameter `` and an autowired dependency `DomainService`, Spring cannot solve the injection dependency and autowire an `InMemoryDomainService` even when the implementing service bean is properly component-scanned and otherwise injected into the context. Manually subclassing the component and specifying the runtime type for `D` allows Spring to solve the context and inject the appropriate service, but this requires an explicit configuration of the runtime type model.  Instead, it would be helpful for the container to identify the generic type `D` applied to the component being solved and determine whether it can find an appropriate solution that satisfies the generic type bound.   ---  **Affects:** 4.0.2  **Reference URL:** https://github.com/chrylis/spring-generic-injection-failure  2 votes, 7 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-04-04T09:37:19Z","2019-01-12T00:20:32Z"
"","16109","String method for PatternsRequestCondition#getMatchingCondition [SPR-11484]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-11484](https://jira.spring.io/browse/SPR-11484?redirect=false)** and commented  Spring HATEOAS provides a number of convenient reflective methods that will construct a resource URI by inspecting the controller handling a given resource type. I am trying to work on the reverse issue (finding the controller method that matches a particular URI), and the information I need appears to be in `RequestMappingHandlerMapping`, particularly in the composite `PatternsRequestCondition`.  However, `PatternsRequestCondition` only implements the interface `getMatchingCondition`, which requires an `HttpServletRequest`. Internally, it immediately extracts the path information from the request and inspects patterns for matches based on that string. It would be helpful for reflection tools to be able to call this method with just a `String` object, and it would be trivial to Extract Method on `getMatchingCondition` to add a `getMatchingCondition(String)` variant.   ---  **Affects:** 4.0.2","closed","type: enhancement,","spring-projects-issues","2014-02-25T23:06:15Z","2014-03-26T22:34:11Z"
"","16048","Inherit value for @RequestMapping if not overridden [SPR-11421]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-11421](https://jira.spring.io/browse/SPR-11421?redirect=false)** and commented  If a `@RequestMapping` path is defined on a superclass, the path is inherited by subclasses (e.g., the `@RequestMapping`s on their methods are relative to the superclass's base path).  I'm using the Spring content negotiation feature to serve both HTML views and a JSON API from the same URLs, based on the client's `Accept` header. In order to overload the URL, I have to differentiate the implementation methods by having different `produces` attributes; I specify ""`application/json`"" in the `@RequestMapping` for the JSON subclass.  The `value` attribute on `@RequestMapping` is not required, but if a subclass is annotated, Spring overrides the path from the parent with an empty string and attaches the subclass's controllers to the root path.  In order to avoid having to duplicate `@RequestMapping` data on each class, I suggest changing the resolver to treat a missing `value` attribute in a `@RequestMapping` as if the annotation were not there, rather than implicitly treating it as an empty string. The behavior of a `@RequestMapping` on a subclass without a `value` attribute is not specified by the docs, so this wouldn't break the existing contract. In the alternative, I suggest making `value` a required attribute to eliminate this pitfall.   ---  **Affects:** 4.0.1  **Attachments:** - [AbstractController.java](https://jira.spring.io/secure/attachment/21668/AbstractController.java) (_367 bytes_) - [HtmlController.java](https://jira.spring.io/secure/attachment/21669/HtmlController.java) (_713 bytes_) - [JsonController.java](https://jira.spring.io/secure/attachment/21670/JsonController.java) (_490 bytes_)","closed","type: enhancement,","spring-projects-issues","2014-02-12T13:30:21Z","2014-02-14T05:26:35Z"
"","15661","JSR-250 annotations (@PostConstruct) not observed on @Configuration classes [SPR-11033]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-11033](https://jira.spring.io/browse/SPR-11033?redirect=false)** and commented  Classes marked `@Configuration` are transitively `@Component` s and thus should have their lifecycle methods called, but component-scanned `@Configuration` s don't, even if they are later injected as beans into another object. `@Configuration` classes loaded specifically, such as by a Spring Boot entry point, are correctly managed.  This issue was raised before in [SJC-88](https://jira.spring.io/browse/SJC-88), which was marked superseded but not actually fixed.   ---  **Affects:** 4.0 M3","closed","status: bulk-closed,","spring-projects-issues","2013-10-26T02:51:29Z","2019-01-12T00:21:33Z"
"","16153","Negative content-length causes NegativeArraySizeException when using SockJS on IE8 [SPR-11528]","**[Christopher Savory](https://jira.spring.io/secure/ViewProfile.jspa?name=csavory)** opened **[SPR-11528](https://jira.spring.io/browse/SPR-11528?redirect=false)** and commented  Stack Trace when trying to initiate a SockJS connection in IE8.  2014-03-07 11:37:54.696 ERROR 82606 --- [nio-8080-exec-1] o.s.w.s.m.StompSubProtocolHandler        : Failed to parse WebSocket message as STOMP frame  java.lang.NegativeArraySizeException: null at org.springframework.messaging.simp.stomp.StompDecoder.readPayload(StompDecoder.java:158) at org.springframework.messaging.simp.stomp.StompDecoder.decode(StompDecoder.java:70) at org.springframework.web.socket.messaging.StompSubProtocolHandler.handleMessageFromClient(StompSubProtocolHandler.java:108) at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.handleMessage(SubProtocolWebSocketHandler.java:233) at org.springframework.web.socket.handler.WebSocketHandlerDecorator.handleMessage(WebSocketHandlerDecorator.java:59) at org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.handleMessage(LoggingWebSocketHandlerDecorator.java:55) at org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.handleMessage(ExceptionWebSocketHandlerDecorator.java:69) at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.delegateMessages(AbstractSockJsSession.java:153) at org.springframework.web.socket.sockjs.transport.handler.AbstractHttpReceivingTransportHandler.handleRequestInternal(AbstractHttpReceivingTransportHandler.java:87) at org.springframework.web.socket.sockjs.transport.handler.AbstractHttpReceivingTransportHandler.handleRequest(AbstractHttpReceivingTransportHandler.java:49) at org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.handleTransportRequest(TransportHandlingSockJsService.java:254) at org.springframework.web.socket.sockjs.support.AbstractSockJsService.handleRequest(AbstractSockJsService.java:311) at org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler.handleRequest(SockJsHttpRequestHandler.java:88) at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:51) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:945) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:876) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:863) at javax.servlet.http.HttpServlet.service(HttpServlet.java:647) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837) at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilter(WebRequestTraceFilter.java:114) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextFilterConfiguration$1.doFilterInternal(EndpointWebMvcAutoConfiguration.java:128) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:199) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:57) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration$MetricsFilter.doFilterInternal(MetricFilterAutoConfiguration.java:84) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:680) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:603) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1721) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1679) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:744)    ---  **Affects:** 4.0.1","closed","type: bug,","spring-projects-issues","2014-03-07T10:42:46Z","2014-03-26T22:34:05Z"
"","16150","Doc: SockJS not working in IE9 when Spring Security is enabled [SPR-11525]","**[Christopher Savory](https://jira.spring.io/secure/ViewProfile.jspa?name=csavory)** opened **[SPR-11525](https://jira.spring.io/browse/SPR-11525?redirect=false)** and commented  I'm using Spring Boot 1.0.0.RC4, which brings in SF 4.0.2.RELEASE and Spring Messaging 4.0.2.RELEASE.  I am also using Spring Security.  If I test my WebSocket Application using IE9 it does not work.  I get an error on the websocket connect.  I can see that I get two iFrame files, but then that is followed by an error.  I also tested the Portfolio Example, which uses Spring Security using IE9 and it doesn't work. https://github.com/rstoyanchev/spring-websocket-portfolio.  Lastly I brought the simple gs-messaging-stomp-websocket-complete content into my project to see if it would work in IE9.  It works if I remove Spring Security from the class path, but does not work if I enable spring security.  ---  **Affects:** 4.0.2  **Reference URL:** https://github.com/rstoyanchev/spring-websocket-portfolio/issues/29#issuecomment-37038183  **Attachments:** - [Logs.txt](https://jira.spring.io/secure/attachment/21808/Logs.txt) (_35.97 kB_)  **Issue Links:** - #16121 Provide guidance on using X-Frame-Options with SockJS iframe transports (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15188a8eee31c0d42468bc11dd8d4e84901ff988","closed","type: task,","spring-projects-issues","2014-03-07T07:26:06Z","2019-01-11T21:37:39Z"
"","16231","ConversionService should remain capable of converting multidimensional array. [SPR-11608]","**[Christoph Strobl](https://jira.spring.io/secure/ViewProfile.jspa?name=cstrobl)** opened **[SPR-11608](https://jira.spring.io/browse/SPR-11608?redirect=false)** and commented  The following conversion works in `4.0.2` but fails in `4.0.3`.  ```java   @Test   public void multidimensionalArrayToListConversionShouldConvertEntriesCorrectly() {     String[][] grid = new String[][] { new String[] { ""1"", ""2"", ""3"", ""4"" }, new String[] { ""5"", ""6"", ""7"", ""8"" },         new String[] { ""9"", ""10"", ""11"", ""12"" } };      ConversionService conversionService = ConversionServiceFactory.createDefaultConversionService();     List converted = conversionService.convert(grid, List.class);     String[][] convertedBack = conversionService.convert(converted, String[][].class);      Assert.assertArrayEquals(grid, convertedBack);   } ```    ---  **Affects:** 4.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5c9fc0985204338d4a979c76a3ca7d3fd843e8b0, https://github.com/spring-projects/spring-framework/commit/b9bac1d3b6cba90997b4c2564bcff3d8d51ab19b","closed","in: core,","spring-projects-issues","2014-03-26T08:02:49Z","2014-03-26T22:34:10Z"
"","16034","EhCacheCacheManager does not wrap runtime-registered caches with TransactionAwareCacheDecorator [SPR-11407]","**[Christoph Strobl](https://jira.spring.io/secure/ViewProfile.jspa?name=cstrobl)** opened **[SPR-11407](https://jira.spring.io/browse/SPR-11407?redirect=false)** and commented  `EhCacheManager` fails to return a decorated `Cache` when requesting a `Cache` that has been added at runtime, for the first time, from the backing `CacheManager`. This causes values to be added to the cache in case the transaction is rolled back. Any subsequent operations will work fine off the second request `EhCacheManager` returns the properly decorated instance.  The test listed below reproduces the scenario.  * `testValuesShouldNotBeAddedToCacheWhenCacheRequestedForFirstTimeAndTransactionIsRolledBack` fails as the values are added to the cache though they should not have been. * `testValuesShouldNotBeAddedToCacheWhenCacheRequestedSeveralTimesAndTransactionIsRolledBack` succeeds as the cache was requested one time before using it within the transaction.  ```java @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration @Transactional @TransactionConfiguration(transactionManager = ""transactionManager"") public class TransactionalEhCacheManagerUnitTests {    // some transactional service where caching is used somewhere   private @Autowired FooService transactionalService;    // spring cacheManager   private @Autowired CacheManager cacheManager;    // backing EhCacheManager used to add Cache at runtime and get cache statistics   private @Autowired net.sf.ehcache.CacheManager ehCacheManager;    @Configuration   @EnableCaching   public static class Config {      @Bean     public PlatformTransactionManager transactionManager() throws SQLException {        DataSourceTransactionManager txmgr = new DataSourceTransactionManager();       txmgr.setDataSource(dataSource());       txmgr.afterPropertiesSet();        return txmgr;     }      @Bean     public DataSource dataSource() throws SQLException {        DataSource dataSourceMock = mock(DataSource.class);       when(dataSourceMock.getConnection()).thenReturn(mock(Connection.class));        return dataSourceMock;     }      @Bean     public CacheManager cacheManager() {        EhCacheCacheManager cacheManager = new EhCacheCacheManager();       cacheManager.setCacheManager(ehCacheManager());       cacheManager.setTransactionAware(true);        return cacheManager;     }      @Bean     public net.sf.ehcache.CacheManager ehCacheManager() {       return net.sf.ehcache.CacheManager.newInstance();     }      @Bean     public FooService fooService() {       return new FooService();     }      @Bean     public BarRepository barRepository() {       return new BarRepository();     }   }    @AfterTransaction   public void after() {     assertThat(ehCacheManager.getCache(""bar"").getStatistics().getSize(), equalTo(0L));   }    /**    * If the {@link Cache} is added at runtime the cache manager should use {@link TransactionAwareCacheDecorator} to    * decorate cache and use the transaction aware one for caching operations.    */   @Rollback(true)   @Test   public void testValuesShouldNotBeAddedToCacheWhenCacheRequestedForFirstTimeAndTransactionIsRolledBack() {      ehCacheManager.addCache(""bar"");     transactionalService.foo();   }    @Rollback(true)   @Test   public void testValuesShouldNotBeAddedToCacheWhenCacheRequestedSeveralTimesAndTransactionIsRolledBack() {      ehCacheManager.addCache(""bar"");     // get the cache explicitly one time so that the next call will get the decorated cache instance     cacheManager.getCache(""bar"");      transactionalService.foo();   }    static class FooService {      private @Autowired BarRepository repo;      @Transactional     public String foo() {       return ""foo"" + repo.bar();     }   }    static class BarRepository {      @Cacheable(""bar"")     public String bar() {       return ""bar"";     }    } } ```  The same issue should exist with `JCacheManager`.  ---  **Affects:** 3.2.7, 4.0.1  **Issue Links:** - #16143 Properly wrap runtime-registered caches with TransactionAwareCacheDecorator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ef1748f69444053a9bece0df76859ee10cc1550c, https://github.com/spring-projects/spring-framework/commit/42dec022037b1a942cd546fd6f4b9e3e3991849e  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","in: core,","spring-projects-issues","2014-02-09T21:31:51Z","2019-01-11T21:27:54Z"
"","15874","Regression: ClassCastException using @CacheEvict with primitive varargs [SPR-11249]","**[Christian Simonelli](https://jira.spring.io/secure/ViewProfile.jspa?name=chrysimo)** opened **[SPR-11249](https://jira.spring.io/browse/SPR-11249?redirect=false)** and commented  Hi, annotating a method with the `@CacheEvict` (prob also with other `@Cache`* annotation) and using varargs with primitive parameters I get the following exception.  I'm able to reproduce the exception at glance...  ``` @CacheEvict(value = { ""..."" }, allEntries = true) public void someMethod( String arg0,long... varArgs) {      .... } ```  ``` java.lang.ClassCastException: [J cannot be cast to [Ljava.lang.Object; 	at org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext.extractArgs(CacheAspectSupport.java:376) ~[spring-context-4.0.0.RELEASE.jar:4.0.0.RELEASE] 	at org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext.(CacheAspectSupport.java:366) ~[spring-context-4.0.0.RELEASE.jar:4.0.0.RELEASE] 	at org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContexts.(CacheAspectSupport.java:337) ~[spring-context-4.0.0.RELEASE.jar:4.0.0.RELEASE] ```  Christian  ---  **Affects:** 4.0 GA  **Issue Links:** - #15497 Cache KeyGenerators treat var-args as a single array","closed","in: core,","spring-projects-issues","2013-12-19T08:10:28Z","2019-01-11T18:25:16Z"
"","15731","Support placeholder in EnableMBeanExport [SPR-11105]","**[Christian Dupuis](https://jira.spring.io/secure/ViewProfile.jspa?name=cdupuis)** opened **[SPR-11105](https://jira.spring.io/browse/SPR-11105?redirect=false)** and commented  It would be really handy if Spring could support placeholders and expressions in annotations. Specifically in Enable* annotations. See the following as an example:  `@EnableMBeanExport`(defaultDomain = ""${spring.jmx.default_domain:my-domain}"")   ---  **Affects:** 4.0 RC1","closed","type: enhancement,","spring-projects-issues","2013-11-21T04:22:03Z","2013-12-03T15:15:35Z"
"","15709","Allow InstrumentationSavingAgent for usage with Attach API [SPR-11083]","**[Christian Dupuis](https://jira.spring.io/secure/ViewProfile.jspa?name=cdupuis)** opened **[SPR-11083](https://jira.spring.io/browse/SPR-11083?redirect=false)** and commented  The JVM Attach API requires an Agent to implement a agentmain method and specify the agent in the MANIFEST.MF using the Agent-Class header.  For reference see http://docs.oracle.com/javase/6/docs/jdk/api/attach/spec/index.html and https://blogs.oracle.com/CoreJavaTechTips/entry/the_attach_api.  Currently InstrumentationSavingAgent can only be used with -javaagent.   ---  **Affects:** 4.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/63c143be619c9008b0f600d216dd04777d7629d8, https://github.com/spring-projects/spring-framework/commit/f6f0adf63bc9c4e738482dc05053dbb239b686d6","closed","type: enhancement,","spring-projects-issues","2013-11-11T06:56:29Z","2013-12-03T15:15:36Z"
"","15766","Support multiple comma-separated values in X-Forwarded-Host header [SPR-11140]","**[Chris Pimlott](https://jira.spring.io/secure/ViewProfile.jspa?name=pimlottc)** opened **[SPR-11140](https://jira.spring.io/browse/SPR-11140?redirect=false)** and commented  The support for the `X-Forwarded-Host` header added in #14743 does not account for having multiple comma-separated hosts in the header, e.g.:  > X-Forwarded-Host: foo.com, bar.com, baz.com  Test case:  ```   @Test   public void testMultiValuedXForwardedHostHeader() {     MockHttpServletRequest request = new MockHttpServletRequest();     request.addHeader(""X-Forwarded-Host"", ""a.example.org, b.example.org, c.example.org"");      assertEquals(""a.example.org"", ServletUriComponentsBuilder.fromRequest(request).build().getHost());   } ```  ---  **Affects:** 3.2.5","closed","type: bug,","spring-projects-issues","2013-12-02T13:07:50Z","2019-01-11T19:36:54Z"
"","15895","ConversionService mapping to existing Object [SPR-11270]","**[Chris Mercer](https://jira.spring.io/secure/ViewProfile.jspa?name=cmercer)** opened **[SPR-11270](https://jira.spring.io/browse/SPR-11270?redirect=false)** and commented  The ConversionService does not have a way to convert from a source to an existing object.  The scenario I am dealing with is having multiple object types mapped to one object type, multiple data objects mapped to a single DTO object.  What I would like to do is something like this.  Dest dest = conversionService.convert(source_1, Dest.class); conversionService.convert(source_2, dest); conversionService.convert(source_3, dest);  This allows the data for source_2, source_3 to be added to the dest object after it is initially created.   ---  **Affects:** 4.0 GA","closed","status: bulk-closed,","spring-projects-issues","2013-12-31T08:30:47Z","2019-01-12T02:46:23Z"
"","16050","Ensure server messages contain a destination matching that of the original subscription for user destinations [SPR-11423]","**[Chris Mathias](https://jira.spring.io/secure/ViewProfile.jspa?name=chris@revelfire.com)** opened **[SPR-11423](https://jira.spring.io/browse/SPR-11423?redirect=false)** and commented  Scenario: Register a user-specific queue/topic. Send a message. Review the response.  The portfolio example works because the destination resolution is performed via subscription id.  Some implementations require queue destination string matching. There is an accommodation called 'glob' matching for situations like how Spring is handling the user uniqueness, however the fact that the response frames truncate the /user/ causes an implementation like Dart-Stomp to not actually resolve.  I'm not sure if this is a bug or improvement request. I'm also not sure if you would consider it a bug in dart-stomp or a bug in Spring.  Uncertain if other implementations of Stomp use only subscription-id or also rely on path matching.  By way of example:  Register for subscription to: /user/queue/socket/responses  ``` [""SUBSCRIBE\nid:1\ndestination:/user/queue/socket/responses\n\n\u0000""...ommitted ```  Understandably, Spring uniquifies this value so a response comes down:  ``` a[""MESSAGE\ncontent-type:application/json;charset=UTF-8\nsubscription:1\nmessage-id:h9vfizvw-0\ndestination:/queue/socket/responses-userh9vfizvw\ncontent-length:2289...ommitted ```  If Spring returned '/user/queue/socket/responses-userh9vfizvw' instead of '/queue/socket/responses-userh9vfizvw' and the match used Glob matching then this would all work just fine.  The Glob matching is akin to /user/queue/socket/responses*  However the /user is taken off and thus fails. I have worked around this by forking the dart-stomp implementation and changing the match to use subscription-id but this seems like a less flexible long term approach.  ---  **Affects:** 4.0.1  **Reference URL:** https://github.com/revelfire/stomp/commit/3dcfbefc2ec218fc79e77445c1acabd2eed5315a  **Issue Links:** - #16271 SUBSCRIBE response message should match the original message destination  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1200755125f97c2f1035586081645bb244b06304, https://github.com/spring-projects/spring-framework/commit/443fb8e4eed3c0db4185633959266fdf0ff2cbe7, https://github.com/spring-projects/spring-framework/commit/32e5f57e647022d9ea82c03670936bf31f8467de","closed","type: bug,","spring-projects-issues","2014-02-12T18:57:59Z","2019-01-11T21:27:42Z"
"","15953","DefaultUserDestinationResolver not recognizing user destinations [SPR-11329]","**[Chris Mathias](https://jira.spring.io/secure/ViewProfile.jspa?name=chris@revelfire.com)** opened **[SPR-11329](https://jira.spring.io/browse/SPR-11329?redirect=false)** and commented  private String destinationPrefix = ""/user/""; private String subscriptionDestinationPrefix = ""/user/queue/"";  But based on the docs one would readily think that one can set up any destination (or customize it using sendToUser() methods/annotations.  However if the client registers anything that doesn't match /user/queue they will never get the message.  So it's a bit of hardcoded info that becomes ""magic"", requiring code reading to understand what to set and why other approaches (read: paths) don't work.   ---  1 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2014-01-18T14:41:50Z","2019-01-13T21:01:31Z"
"","15952","Multi-message frames over STOMP. [SPR-11328]","**[Chris Mathias](https://jira.spring.io/secure/ViewProfile.jspa?name=chris@revelfire.com)** opened **[SPR-11328](https://jira.spring.io/browse/SPR-11328?redirect=false)** and commented  Multi-message frames over STOMP.  If I am connecting over websocket and in a single frame pass two messages (e.g. a page is setting up a list of subscribers on bootstrap of a SPA) the spring/stomp bit only recognizes the first message, the rest just disappear as if they weren't sent.  With the control character it should be possible to recognize a list of messages.  Will this be supported?  I am using the STOMP library for Dart and it may be an artifact of that library not sending two frames when it should.  ---  **Issue Links:** - #16152 Support receiving fragmented STOMP frames","closed","type: enhancement,","spring-projects-issues","2014-01-18T14:40:48Z","2019-01-11T19:00:46Z"
"","15951","spring-messaging automatically assumes Principal.getName() is unique for sending messages to users [SPR-11327]","**[Chris Mathias](https://jira.spring.io/secure/ViewProfile.jspa?name=chris@revelfire.com)** opened **[SPR-11327](https://jira.spring.io/browse/SPR-11327?redirect=false)** and commented  Security automatically assumes user.username for per-use channel sends.  In systems which are multi-tenant and usernames can be non-unique this is an issue.  I believe I have solved it by providing a custom UserDetails where getName() returns user.getGuid() but I am wondering if this is going to be solved by the framework.  My solution feels a bit like a hack.  Much like userDestinationPrefix can be specified, User property to manage outbound message endpoint secondary prefix could also be specifiable.   ---  **Affects:** 4.0 GA  **Reference URL:** https://gist.github.com/revelfire/8497728#file-customuserdetails-java  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ae06c3a6ab36785aa3fc69aa1672e3a7d621e4a0, https://github.com/spring-projects/spring-framework/commit/e4ad2b352e35a0cdbc5d4834f9689a13162c8d19","closed","type: bug,","spring-projects-issues","2014-01-18T14:39:06Z","2014-01-28T13:07:13Z"
"","15950","@Header does not take any arbitrary headers in. [SPR-11326]","**[Chris Mathias](https://jira.spring.io/secure/ViewProfile.jspa?name=chris@revelfire.com)** opened **[SPR-11326](https://jira.spring.io/browse/SPR-11326?redirect=false)** and commented  Arbitrary headers passed to the STOMP message show up in ""nativeHeaders"" and must be manually parsed from there. Also the documentation is ambiguous about this (doesn't mention it that I noticed).  Seems like it would make sense to call this ""customHeaders"", or better yet have the lookup able to dig in there as well. Otherwise my code has to inject nativeHeaders, then look through that map manually, which is extra lines of code in every relevant message/method.   ---  **Reference URL:** https://gist.github.com/revelfire/8497728#file-modelcontroller-java  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5053fdc8c9114a44df95fbfc38ca0d2e9be99776","closed","type: bug,","spring-projects-issues","2014-01-18T14:37:10Z","2014-01-28T13:07:14Z"
"","15757","Dependency Injection issue when using ManagedMap or ManagedList in BeanDefinitionParser [SPR-11131]","**[Chris Mathews](https://jira.spring.io/secure/ViewProfile.jspa?name=chrismathews)** opened **[SPR-11131](https://jira.spring.io/browse/SPR-11131?redirect=false)** and commented  I just hit an issue when upgrading one of my projects from Spring 3.2.4 to 3.2.5.  Here is the basic scenario simplified down to the core details: * Implemented a custom Spring namespace * Programatically wiring up a bean class, let's call it WidgetRegistry that maintains a Map * The WidgetStack instances are also programatically wired in the namespace and they maintain a List\. * The Widget is a simple class that has one member variable injected on it using `@Inject`.  I have tested this scenario from 3.0.0 all the way up to 3.2.4 and everything works as expected (4.0.0.M1 - M3 also work). When I upgrade to 3.2.5, 4.0.0.RC1 or 4.0.0-SNAPSHOT however things explode. The problem is that the Widget instances (inside the List) are no longer being injected upon.  To be more exact only the first element (index 0) is not being injected upon... the rest of the Widget instances are being fully populated. This also only occurs when implemented as part of a custom namespace using ManagedMap and ManagedList to wire the appropriate Collections. If I wire the beans explicitly in Spring xml then everything works as expected.  Attached is a small sample project I threw together to demonstrate the problem.  ---  **Affects:** 3.2.5, 4.0 RC1  **Attachments:** - [spring-test.zip](https://jira.spring.io/secure/attachment/21517/spring-test.zip) (_10.52 kB_)  **Issue Links:** - #16170 Providing unique names to prototype inner beans causes excessive memory and CPU use  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/242ecdc448ee705220d4e8befa00f274a1c7ff53, https://github.com/spring-projects/spring-framework/commit/d0fc38ec76da3c3b7949c5fa6a4d2783dc8df12c  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)","closed","in: core,","spring-projects-issues","2013-11-27T11:52:58Z","2019-01-11T19:26:50Z"
"","16045","Threading issues causing apparent deadlock [SPR-11418]","**[chip stettler](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.stettler@capitalone.com)** opened **[SPR-11418](https://jira.spring.io/browse/SPR-11418?redirect=false)** and commented  I have two beans that implement `@Async` methods.  I have an async method in bean #1 calling an async method in bean #2.  I create A ThreadPoolExecutor with 5 core threads, 10 max threads and 25 queue length.  I created a test that creates 5 parallel calls to bean#1 async method.  The threads appear to deadlock and a timeout occurs on the Future.get().  If I increase the core threads to 6 the test executes with no problem.  If I remove an `@Async` from either bean so that there is no nesting of async calls then everything works fine.  Seems like a bug as it sort of works if there are enough threads but the queuing aspect of the thread pool seems to break when nested.    ---  **Affects:** 3.2.4  **Attachments:** - [thread-test.zip](https://jira.spring.io/secure/attachment/21667/thread-test.zip) (_16.20 kB_)","closed","status: bulk-closed,","spring-projects-issues","2014-02-11T20:13:11Z","2019-01-12T02:45:52Z"
"","15545","direct field access cannot bind data to List object [SPR-10917]","**[Chen Zhao](https://jira.spring.io/secure/ViewProfile.jspa?name=chenzhao)** opened **[SPR-10917](https://jira.spring.io/browse/SPR-10917?redirect=false)** and commented  when i use direct field access feature，i found it's not support bind data to `java.util.List`.  ```java implements WebBindingInitializer  @Override public void initBinder(WebDataBinder binder, WebRequest req) {       binder.initDirectFieldAccess(); } ```  in controller :  ```java @RequestMapping(""/add"") public @ResponseBody String testList(User user){     return ""ok""; }   public class User{   List addressList; }  public class Address{   String province;   String city; } ```  test url:  ``` http://localhost:8080/add?addressList[0].province=hubei&addressList[0].city=wuhan ```    ---  **Affects:** 3.2.4","closed","status: bulk-closed,","spring-projects-issues","2013-09-15T23:23:40Z","2019-01-12T02:30:15Z"
"","16170","Providing unique names to prototype inner beans causes excessive memory and CPU use [SPR-11545]","**[Charles Yates](https://jira.spring.io/secure/ViewProfile.jspa?name=ceyates)** opened **[SPR-11545](https://jira.spring.io/browse/SPR-11545?redirect=false)** and commented  We have a web application that averages around 30 hits per minute.  After upgrading Spring from 3.2.5 to 3.2.7 we observed some problems.  Over a period of one week there was a slow increase in heap usage resulting in OutOfMemoryErrors, and a gradual increase in CPU per request by a factor of ten.  CPU profiling shows the bulk of the time increase is in the method adaptInnerBeanName of BeanDefinitionValueResolver.  Heap analysis shows the increase in memory use is in the ConcurrentHashMaps dependentBeanMap and dependenciesForBeanMap of DefaultSingletonBeanRegistry.  This problem appears to be a result of commit d0fc38ec76da3c3b7949c5fa6a4d2783dc8df12c, the fix for issue #15757.  This application uses something on the order of 100 or so prototype beans per request.  Over time providing these beans with unique names is an unmanageable proposition.  ---  **Affects:** 3.2.6, 3.2.7, 3.2.8  **Issue Links:** - #15757 Dependency Injection issue when using ManagedMap or ManagedList in BeanDefinitionParser - #15871 Regression: InjectionMetadata cache needs to handle different bean classes per bean name  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: bug,","spring-projects-issues","2014-03-12T09:11:08Z","2019-01-11T21:37:29Z"
"","15925","Typo in documentation about @MatrixVariable [SPR-11301]","**[Chanoch Wiggers](https://jira.spring.io/secure/ViewProfile.jspa?name=chanoch)** opened **[SPR-11301](https://jira.spring.io/browse/SPR-11301?redirect=false)** and commented  In this section, the following excerpt should say required=false to allow optionality for matrix variables with default value. required=true means that an exception is thrown if the matrix variable is omitted  A matrix variable may be defined as optional and a default value specified:  // GET /pets/42  `@RequestMapping`(value = ""/pets/{petId}"", method = RequestMethod.GET) public void findPet(`@MatrixVariable`(required=true, defaultValue=""1"") int q) {      // q == 1  }   ---  **Affects:** 4.0 GA  **Reference URL:** http://docs.spring.io/spring/docs/4.0.0.RC1/spring-framework-reference/html/mvc.html#mvc-ann-matrix-variables  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bac9f43b66626a3821d9ea34f2fac03444e21f09","closed","type: task,","spring-projects-issues","2014-01-12T12:34:03Z","2014-01-28T13:07:13Z"
"","15856","Backward compatibility of BeanUtils.copyProperties broken for copying wrapped types to primitive types (and vice versa) on 3.2.6 and 4.0.0 [SPR-11231]","**[Chad Wilson](https://jira.spring.io/secure/ViewProfile.jspa?name=voiceinsideyou)** opened **[SPR-11231](https://jira.spring.io/browse/SPR-11231?redirect=false)** and commented  The change made for #15834 in https://github.com/spring-projects/spring-framework/commit/bc5affa79a67b28c858730dd69156ebf6161164a appears to have broken backward compatibility for primitive types where boxing/autoboxing was required between read and write methods.  Boolean.class is not ""assignable"" from boolean.class (and similar for other types) however this previously worked fine using BeanUtils.copyProperties, relying on auto boxing/unboxing.  Was this change intentional?  Could you consider using org.springframework.util.ClassUtils@isAssignable(lhsType, rhsType) to handle this without breaking backwards compatibility?  ---  **Affects:** 3.2.6, 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8a3b4c69c89d0bf56ef210f5166c79ee77be3935, https://github.com/spring-projects/spring-framework/commit/0a4d28d5d54aa179f5a9cde21db3ad8b9a671199  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","in: core,","spring-projects-issues","2013-12-15T20:29:02Z","2019-01-11T18:25:45Z"
"","16322","Prefix aware BeanPropertySqlParameterSource  [SPR-11700]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-11700](https://jira.spring.io/browse/SPR-11700?redirect=false)** and commented  Please add support for prefix for BeanPropertySqlParameterSource. It would be nice to bind values with prefix as well. For example:  ``` class Sample{     private userId; } ```  In my sql a prefix such as 'entity':  ``` ""select * from sample where user_id = :entity.userId"" ```    ---  **Affects:** 4.0.3","closed","status: bulk-closed,","spring-projects-issues","2014-04-16T06:56:57Z","2019-01-12T00:20:13Z"
"","16286","Introduce a mechanism for abstract types at component scanning [SPR-11663]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-11663](https://jira.spring.io/browse/SPR-11663?redirect=false)** and commented  I would like to create some proxy beans based on interfaces. I will provide some basic examples to make clear.  Use case 1: Creating a proxy restful client based on interface  ``` @Target({ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented @Component public @interface Restful {    String value() default """"; }  @Restful  public interface MyRestClient {    @Get(""/events/{year}/{location}"")   EventList getEventsByYearAndLocation(int year, String location);   } ```  Use case 2: Creating a proxy repository instance based on interfaces  ``` @MyRepository // new annotation public interface PersonRepository {    List findByLastnameOrderByFirstnameAsc(String lastname);   List findByLastnameOrderByFirstnameDesc(String lastname); } ```  In order to provide this functionality I had to dig many codes from Spring Data project and became little frustrated with result. I had to create 6-7 class and most of them are duplicated. As a result of my implementation basically I had to create a custom InstantiationAwareBeanPostProcessorAdapter to create beans with custom logic after registering them.  I would like to see a configuration mechanism for registering beans for abstract types dynamically. I was considering an API for component scanning such as ComponentScanProcessor. Each registered ComponentScanProcessor can decide about candidates.  This will help to reduce a fair amount codes in many projects even Spring Data which is creating repository beans from Interfaces.  ---  **Affects:** 4.0.3  **Issue Links:** - #17399 ClassPathScanningCandidateComponentProvider doesn't respect AnnotationTypeFilter - #18794 `@Configuration` interface with Java 8 default methods (as a standalone artifact) - #16509 Spring-specific index file for component candidate classes - #19118 Classes with abstract `@Lookup` methods not registered in case of classpath scanning  3 votes, 6 watchers","open","type: enhancement,","spring-projects-issues","2014-04-04T12:42:56Z","2020-08-24T17:39:27Z"
"","16282","add AnnotationParameterNameDiscoverer from Spring Security [SPR-11659]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-11659](https://jira.spring.io/browse/SPR-11659?redirect=false)** and commented  Spring Security has AnnotationParameterNameDiscoverer which is quite useful. It would be nice have in Spring Core instead of Security.  Here is the implementation:  https://github.com/spring-projects/spring-security/blob/master/core/src/main/java/org/springframework/security/core/parameters/AnnotationParameterNameDiscoverer.java   ---  **Affects:** 4.0.3","closed","status: bulk-closed,","spring-projects-issues","2014-04-04T05:37:57Z","2019-01-12T00:20:35Z"
"","16281","add overload methods of PrioritizedParameterNameDiscoverer#addDiscoverer [SPR-11658]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-11658](https://jira.spring.io/browse/SPR-11658?redirect=false)** and commented  org.springframework.core.PrioritizedParameterNameDiscoverer has addDiscoverer method which is accepting another parameter name discoverer. Please add another method for adding discoverers by index.  Use case: I am trying to implement a simple application which is trying to discover parameter names in this order:  1. Annotation approach as Spring MVC 2. JDK 8 approach 3. LocalVariableTableParameterNameDiscoverer  DefaultParameterNameDiscoverer seems nice but it is not possible adding another discoverer to top of the discoverer list. I would like to use it with changing order of parameter discoverers.    ---  **Affects:** 4.0.3","closed","status: bulk-closed,","spring-projects-issues","2014-04-04T05:35:12Z","2019-01-12T00:20:38Z"
"","16238","Provide a mechanism for adding ApplicationContextInitializer instances [SPR-11615]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-11615](https://jira.spring.io/browse/SPR-11615?redirect=false)** and commented  Registering ApplicationContextInitializer has improved since #15938. I need to register my context ApplicationContextInitializer's instances instead of ApplicationContextInitializer's Class. Is it possible to improve the ContextLoader to pass instance of ApplicationContextInitializer.  ---  **Affects:** 4.0.3  **Issue Links:** - #17036 Support org.springframework.context.ApplicationContextInitializer usage programmatically (in Servlet 3.0+ environments) (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2014-03-27T07:19:35Z","2019-01-11T21:06:57Z"
"","16179","Ant style basename for ReloadableResourceBundleMessageSource [SPR-11555]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-11555](https://jira.spring.io/browse/SPR-11555?redirect=false)** and commented  Current implementation of ReloadableResourceBundleMessageSource accepts exact name of the basename. I am suggesting to have ant path style declaration. What do you think?   ---  **Affects:** 3.2.8  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-03-14T11:49:05Z","2019-01-12T02:45:22Z"
"","16177","Common exceptions for resource not found, redirection, noContent etc... [SPR-11552]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-11552](https://jira.spring.io/browse/SPR-11552?redirect=false)** and commented  In our codebase we are using some convenient exceptions for resource not found, redirection (302/301) and noContent...  It would be nice to have such kind of exceptions in spring. :)  Edit: I forgot to say that we are providing necessary mapping as well. For example a ResourceNotFoundException returns a 404 to client.   ---  **Affects:** 3.2.8, 4.0.2","closed","type: enhancement,","spring-projects-issues","2014-03-14T01:08:12Z","2019-01-14T05:17:08Z"
"","16176","Exception handling with SimpleApplicationEventMulticaster  [SPR-11551]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-11551](https://jira.spring.io/browse/SPR-11551?redirect=false)** and commented  org.springframework.context.event.SimpleApplicationEventMulticaster is responsible to multicast event to appropriate listeners.  An exception which is not handled by user is causing to stop other listeners. This behaviour can be annoying if you have 3rd party event listeners which are not handling exceptions. I think that an event listener should not prevent other listeners in case an error. For example, after a login event we are doing some sort of things one by one. Updating some tables, some numbers, calling a restful web service etc... An exception which is not caught is causing to stop other listeners.  I am considering two alternative approach:  **Try-Catch and Log Only**  In this approach all exceptions must be caught and logged.  **Try-Catch and Throw Again at the end**  The second approach I am considering is that an exception must be caught and after all can be thrown again.  What do you think?   ---  **Affects:** 3.2.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/49916bb7eb67d9cb8f20d524b4d09e093aab6fa2","closed","type: enhancement,","spring-projects-issues","2014-03-13T14:30:56Z","2014-07-18T10:16:30Z"
"","16168","Add support for 404, 204, and 3xx responses to the MVC config [SPR-11543]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-11543](https://jira.spring.io/browse/SPR-11543?redirect=false)** and commented  #16166 encouraged me to open this issue :)  Currently one can easily register views to Controllers by WebMvcConfigurer as this:  ``` /**  * Add view controllers to create a direct mapping between a URL path and  * view name without the need for a controller in between.  */ void addViewControllers(ViewControllerRegistry registry); ```  What I would like to see is easy ways to provide mapping between common http status's such as 404, 301, 302 and 204. It would be great to have redirections, not founds and no contents controllers without the need for a controller by new registry types.  ``` void addRedirectControllers(RedirectControllerRegistry registry); void addNoContentControllers(NoContentControllerRegistry registry); void addNotFoundControllers(NotFoundControllerRegistry registry); ```  This will greatly reduce unnecessary repeated codes.  ---  **Affects:** 3.2.8, 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1ad22b922f9e42a382c7d27a2843b9745d263a35, https://github.com/spring-projects/spring-framework/commit/0bbb7704b517f0721ee1ac810b854fbc3f30697f, https://github.com/spring-projects/spring-framework/commit/0e2c5ee96c8f538cf5661102a715e9051d75ade0  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-03-12T05:15:44Z","2019-01-11T21:37:23Z"
"","16166","Provide public methods to register and un-register handler method mappings [SPR-11541]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-11541](https://jira.spring.io/browse/SPR-11541?redirect=false)** and commented  We are heavily using Spring MVC and currently we had to duplicated a fair amount codes to provide necessary functionalities. We are providing redirection mappings by database. At runtime we periodically checking for any kind of operation such deletion or insertion and want to register them by RequestMappingHandlerMapping.  Spring's RequestMapping is nice but does not provide easy way to provide addition or deletion of RequestMapping's. In order to add a new mapping, RequestMappingHandlerMapping has to be extended as this:  ``` public class RequestMappingInfoAppendableHandlerMapping extends RequestMappingHandlerMapping {     @Override    @Override    public void registerHandlerMethod(Object handler, Method method, RequestMappingInfo mapping) {       super.registerHandlerMethod(handler, method, mapping);    } } ```  I still did not find a beautiful way to unregistering mappings. What I am suggesting:  Please provide necessary util classes and public methods to registering and **unregistering** request mappings.  By the way I have already tried other HandlerMapping implementations but I do not want to change priority because of the performance cost. Also a custom HandlerMapping after RequestMappingHandlerMapping is not capable of handling because of our mappings at RequestMappingHandlerMapping.  Edit:  I had also implemented a very basic utility function for creating new MappingInfo's. I believe that such convenient methods will be very useful. A Builder can be great as well.  ``` public final class RequestMappingInfoUtils {     public static RequestMappingInfo newInstance(String[] urls){       return newInstance(urls, RequestMethod.GET);    }     public static RequestMappingInfo newInstance(String[] urls, RequestMethod requestMethod){       return new RequestMappingInfo(new PatternsRequestCondition(urls),                                     new RequestMethodsRequestCondition(requestMethod),                                     null,                                     null,                                     null,                                     null,                                     null);    } } ```  ---  **Affects:** 3.2.8, 4.0.2  **Issue Links:** - [INT-3713](https://jira.spring.io/browse/INT-3713) Fix RequestMapping logic according latest Spring MVC changes (_**""is depended on by""**_) - #19586 Pointcut evaluation fails against AbstractHandlerMethodMapping$MappingRegistry with AspectJ 1.8.10 - #22052 Add protected method to StandaloneMockMvcBuilder to register additional MVC infrastructure components  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2014-03-12T02:30:54Z","2019-01-11T21:37:09Z"
"","15836","Why there is not a holder class for Response like RequestContextHolder [SPR-11211]","**[Cemo Koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemkoc)** opened **[SPR-11211](https://jira.spring.io/browse/SPR-11211?redirect=false)** and commented  I always think that Request and Response have similarities and considered HttpServletRequest as input, HttpServletResponse as output. Currently I need Response object for setting some cookie values to Response inside ApplicationListener classes handling events.  Here is my question: Why there is not a holder class for Response like RequestContextHolder?   ---  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2013-12-11T23:41:00Z","2018-12-05T14:40:55Z"
"","15875","Problem with autowiring of ""generic Beans"" (defined via RootBeanDefinition(s)) [SPR-11250]","**[Burkhard Graves](https://jira.spring.io/secure/ViewProfile.jspa?name=dhukas)** opened **[SPR-11250](https://jira.spring.io/browse/SPR-11250?redirect=false)** and commented  Hello everybody,  I would like to point out a problem which i already described [here](http://forum.spring.io/forum/spring-projects/container/738270-spring-framework-4-0-java-generics-autowiring-and-rootbeandefinition) and [here](http://stackoverflow.com/questions/20692052/spring-framework-4-0-java-generics-autowired-and-rootbeandefinition).  I've attached a simple maven project containing a test which succeeds in Spring-3 but fails in Spring-4. In short: Beans defined ex. via RootBeanDefinition(s) can't be autowired if  ```  ```  is used. If using a `AutowiredAnnotationBeanPostProcessor` only, the problem disappears.  I guess it's due to the changes in `AnnotationConfigUtils#registerAnnotationConfigProcessors()`.  Any ideas, hints?  Regards, Burkhard  ---  **Affects:** 4.0 GA  **Attachments:** - [spring4.zip](https://jira.spring.io/secure/attachment/21557/spring4.zip) (_3.83 kB_)  **Issue Links:** - #16009 Upgrading spring from 3.2 to 4 - Issue with generics (extends) - #16041 ResolvableType.isAssignableFrom() failure for raw types - [DATACMNS-424](https://jira.spring.io/browse/DATACMNS-424) Injection of PagedResourcesAssembler fails on Spring 4.0.1 snapshots  0 votes, 7 watchers","closed","in: core,","spring-projects-issues","2013-12-20T00:53:48Z","2019-01-11T18:24:04Z"
"","16205","BufferedImageHttpMessageConverter fails if JAI is installed [SPR-11581]","**[Bryan Turner](https://jira.spring.io/secure/ViewProfile.jspa?name=bturner)** opened **[SPR-11581](https://jira.spring.io/browse/SPR-11581?redirect=false)** and commented  When [Oracle JAI](http://www.oracle.com/technetwork/java/javase/tech/jai-142803.html) is installed, `ImageIO.getReaderMIMETypes()` and `ImageIO.getWriterMIMETypes()` both return a leading empty string in their arrays. This causes `BufferedImageHttpMessageConverter`'s constructor to fail.  I doubt this is actually a Spring bug; it seems far more likely this is a JAI bug (That said, the documentation for the `ImageIO` methods doesn't really establish any expectations for the returned array, which is unfortunate). However, working around it in Spring may be beneficial.   ---  **Affects:** 3.2.8, 4.0.2  **Reference URL:** http://stackoverflow.com/questions/12667311/imageio-getreadermimetypes-returning-null-on-linux-running-tomcat-works-fine  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: bug,","spring-projects-issues","2014-03-19T21:53:44Z","2014-03-26T22:34:07Z"
"","16029","HibernateTemplate's generic signatures break backwards compatibility at source level [SPR-11402]","**[Bruce Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=bruce_jones)** opened **[SPR-11402](https://jira.spring.io/browse/SPR-11402?redirect=false)** and commented  HibernateTemplate method signatures were changed in 4.0.0.Release to better support generics, however the developer involved changed them from List to List\. They should have been changed to List as was done for the methods that return Collection and Iterator.  Example method: org.springframework.orm.hibernate4.HibernateTemplate.findByNamedParam(). Spring 3.2.8 WAS: public List findByNamedParam(String queryString, String paramName, Object value) throws DataAccessException {  Spring 4.0.1 IS: public List\ findByNamedParam(String queryString, String paramName, Object value) throws DataAccessException {  This change will require all client code to be altered which is ironic considering HibernateTemplate itself is basically deprecated and really only exists to give people who use it access to all the bug fixes in 4.X (as per the javadoc). I see absolutely no reason for the new signature and if this change was intended it should have been mentioned in a migration guide?  Is it possible this can be changed before everybody switches their code to the new method signatures as most organisations normally wait 1-2 (n-1) releases until upgrading to a new version.  ---  **Affects:** 4.0.1  **Issue Links:** - #15691 Fix remaining compiler warnings and fail build if they return  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2014-02-06T15:33:34Z","2019-01-11T21:28:46Z"
"","15843","Provide 'with implementationType' overloads on ResolvableType [SPR-11218]","**[Bruce Brouwer](https://jira.spring.io/secure/ViewProfile.jspa?name=bruce.brouwer)** opened **[SPR-11218](https://jira.spring.io/browse/SPR-11218?redirect=false)** and commented  Add another method to ResolvableType with a signature something like this:  ``` public static ResolvableType forField(Field field,      ResolvableType implementationType) ```  In this way I can use it to resolve a field where the field is a generic field and the implementingClass is generic.  ``` public class MyType {   public T field; } ```  This is roughly the code I would want to use:  ``` ResolvableType type = ResolvableType.forClassWithGenerics(MyType.class,      ResolvableType.forClass(String.class)); Field f = MyType.class.getField(""field""); ResolvableType field = ResolvableType.forField(f, type); System.out.println(field); // I want it to print java.lang.String ```  If there is another, easier way to do this, I would love to hear what it is. I would possibly like to use this to replace a utility class that I wrote that does basically the same thing as ResolvableType.   ---  **Affects:** 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9076c70d47fb86f0c4bcbf759269a1a571300c84","closed","type: enhancement,","spring-projects-issues","2013-12-12T11:52:41Z","2014-01-28T13:07:21Z"
"","16271","SUBSCRIBE response message should match the original message destination [SPR-11648]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11648](https://jira.spring.io/browse/SPR-11648?redirect=false)** and commented  When subscribing to a particular destination, such as `""/app/test`, a Controller can send a response message directly to the WebSocket session (i.e. not through the broker):  ```java @SubscribeMapping(""/test"") public String test() {   return ""testPayload""; } ```  The destination of the response message is the lookup path of the destination `""/test""` - it should be the complete, original destination `""/app/test""`.  ---  **Affects:** 4.0.3  **Issue Links:** - #16050 Ensure server messages contain a destination matching that of the original subscription for user destinations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ec0b672baa952e15cca442bfffc563bd7ec6ad7b, https://github.com/spring-projects/spring-framework/commit/1c45d7573cf9e42fe4fcdd340dc8c42d09efee45","closed","type: bug,","spring-projects-issues","2014-04-02T06:40:30Z","2019-01-11T21:03:46Z"
"","16192","Custom HandshakeHandler not set when using particular xml configuration [SPR-11568]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11568](https://jira.spring.io/browse/SPR-11568?redirect=false)** and commented  When configuring a sockjs stomp-endpoint using XML, the custom HandshakeHandler is not set.  This custom HandshakeHandler should be set in a WebsocketTransportHandler (itself added to the list of transport overrides when creating the instance of the socksJsService).   ---  **Affects:** 4.0.2  **Reference URL:** https://stackoverflow.com/questions/22447794/spring-websocket-set-handshake-handler-interceptor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/26309838ba3727a7358c331325df4f3b325c4674","closed","type: bug,","spring-projects-issues","2014-03-17T13:17:04Z","2014-03-26T22:34:02Z"
"","15994","Choose HTTP status for handshake failures [SPR-11368]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11368](https://jira.spring.io/browse/SPR-11368?redirect=false)** and commented  As stated in this [wicket issue](https://issues.apache.org/jira/browse/WICKET-5453), regarding handshake errors.  RFC6455 states that the websocket server can send a [HTTP 400 ""Bad Request""](http://tools.ietf.org/html/rfc6455#section-4.4) or a [HTTP 426 ""Upgrade Required""](http://tools.ietf.org/html/rfc6455#section-4.2.2).  Problem is, some clients won't support HTTP 426 since it's not listed in [RFC2616](http://tools.ietf.org/html/rfc2616#section-10.4).  So we should decide to: * keep the current implementation and stick with HTTP 426 * or use HTTP 400 for compatibility reasons (do we have real examples of client incompatibility with that HTTP status?)    ---  **Affects:** 4.0.1  **Reference URL:** https://issues.apache.org/jira/browse/WICKET-5453","closed","type: task,","spring-projects-issues","2014-01-29T07:11:51Z","2014-02-18T22:36:52Z"
"","15963","Check spring-messaging exceptions against serialVersionUID / @SuppressWarnings(""serial"") [SPR-11339]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11339](https://jira.spring.io/browse/SPR-11339?redirect=false)** and commented  Some exceptions in the Spring messaging module have serialVersionUID defined, which may not be intended in the first place.  So this issue aims to: * check that those exceptions aren't expected to leave the system via Java serialization * remove those SerialVersionUIDs    ---  **Affects:** 4.0 GA","closed","type: task,","spring-projects-issues","2014-01-21T05:56:52Z","2014-01-28T13:07:14Z"
"","15870","UriComponentsBuilder - NoSuchMethodError: java.lang.reflect.Method.getParameterCount [SPR-11245]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11245](https://jira.spring.io/browse/SPR-11245?redirect=false)** and commented  Method with following signature ""public static UriComponentsBuilder fromMethodName(Class controllerType,String methodName, Object... argumentValues)"" makes use of the getParameterCount() method found in the java.lang.reflect.Method class. This is specific to Java 8 and will cause projects using prior versions of Java to throw an exception.  ``` (java.lang.NoSuchMethodError: java.lang.reflect.Method.getParameterCount()) ```  Changing it to getParameterTypes().length to get the total number of parameters fixes this.  ---  **Affects:** 4.0 GA  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/431  **Issue Links:** - #15943 Downgrade accidental use of Java 1.7 APIs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/260bbe319dfbe362ade0180f9c50a35109d992c8","closed","type: bug,","spring-projects-issues","2013-12-18T08:20:42Z","2019-01-11T18:24:57Z"
"","15838","update publish-maven info [SPR-11213]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11213](https://jira.spring.io/browse/SPR-11213?redirect=false)** and commented  Github URLs should reflect the org name change. Organization info should be updated as well.   ---  **Affects:** 4.0 GA  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/gradle/publish-maven.gradle  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f0449c6caadc44f45f6ca6ff28a039d2be0574f8","closed","type: task,","spring-projects-issues","2013-12-12T02:27:42Z","2014-01-28T13:07:13Z"
"","15808","Document AsyncRestTemplate [SPR-11182]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11182](https://jira.spring.io/browse/SPR-11182?redirect=false)** and commented   ---  **Affects:** 4.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fab4cad236a6353516fcbbdc8874ba4ac017e505","closed","type: documentation,","spring-projects-issues","2013-12-06T07:11:15Z","2013-12-11T23:57:22Z"
"","15807","update/remove parts of ""Integrating with other web frameworks"" section [SPR-11181]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11181](https://jira.spring.io/browse/SPR-11181?redirect=false)** and commented  This sections contains references to: - Struts 1 (EOL) - Tapestry 3 and 4; Tapestry 5 has been around since 2009 (so previous versions may be de facto EOL) - webwork itself seems to be over    ---  **Affects:** 4.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/33dc8677af67425e1c05d5ad37e52ea6eee1fe5e","closed","type: documentation,","spring-projects-issues","2013-12-06T05:53:46Z","2013-12-11T23:57:23Z"
"","15801","update interceptors documentation [SPR-11175]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11175](https://jira.spring.io/browse/SPR-11175?redirect=false)** and commented  Mention #new-in-3.2-webmvc-mapped-interceptor-exclude-patterns in #mvc-handlermapping-interce  ---  **Affects:** 4.0 RC2  This issue is a sub-task of #15775  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/84ba9f45cb6b7ef18d88bc386fb404c0ae673342","closed","type: documentation,","spring-projects-issues","2013-12-05T03:03:23Z","2019-01-11T19:35:53Z"
"","15800","document new deprecations in the migration guide [SPR-11174]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11174](https://jira.spring.io/browse/SPR-11174?redirect=false)** and commented  - older versions of jackson  ---  **Affects:** 4.0 RC2  This issue is a sub-task of #15746","closed","type: documentation,","spring-projects-issues","2013-12-05T02:54:37Z","2019-01-11T19:35:51Z"
"","15799","mention updates in resttemplate documentation [SPR-11173]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11173](https://jira.spring.io/browse/SPR-11173?redirect=false)** and commented  Mention both #new-in-3.2-webmvc-http-patch and #new-in-3.2-webmvc-generic-types-rest-template in #rest-client-access  ---  **Affects:** 4.0 RC2  This issue is a sub-task of #15775  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ad1a68143d9d778861e45f8892193ba16bd86e8a","closed","type: documentation,","spring-projects-issues","2013-12-05T02:51:25Z","2019-01-11T19:35:49Z"
"","15798","Mention suffix pattern match in contentnegotiationmanager doc [SPR-11172]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11172](https://jira.spring.io/browse/SPR-11172?redirect=false)** and commented  See #new-in-3.2-webmvc-content-negotiation  Mention this in #mvc-config-content-negotiation  ---  **Affects:** 4.0 RC2  This issue is a sub-task of #15775  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b259f0d2d03e4c219ecce8a9968556da515c9cc3","closed","type: documentation,","spring-projects-issues","2013-12-05T02:38:31Z","2019-01-11T19:35:47Z"
"","15797","Delete ""migrating to spring 3.x"" sections [SPR-11171]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11171](https://jira.spring.io/browse/SPR-11171?redirect=false)** and commented  ---  **Affects:** 4.0 RC2  This issue is a sub-task of #15775  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e53edbc0fc3136fac0953f0d682785a564e4c6a0","closed","type: documentation,","spring-projects-issues","2013-12-05T02:32:28Z","2019-01-11T19:35:45Z"
"","15796","document Environment and PropertySource abstractions [SPR-11170]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11170](https://jira.spring.io/browse/SPR-11170?redirect=false)** and commented  See: #new-in-3.1-environment-abstraction and #new-in-3.1-property-source-abstraction  Links to blog posts  ---  This issue is a sub-task of #15775  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/06f834c1922d38c3e64014e545e3af40f92984ca","closed","type: documentation,","spring-projects-issues","2013-12-05T01:49:49Z","2019-01-11T19:35:43Z"
"","15795","Document Bean definition profiles [SPR-11169]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11169](https://jira.spring.io/browse/SPR-11169?redirect=false)** and commented  See #new-in-3.1-bean-definition-profiles  Currently two links to old blog posts.  ---  This issue is a sub-task of #15775  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/06f834c1922d38c3e64014e545e3af40f92984ca, https://github.com/spring-projects/spring-framework/commit/187180ec297fc66bac0d4daf622c25a87a6d8d53","closed","type: documentation,","spring-projects-issues","2013-12-05T01:48:06Z","2019-01-11T19:36:23Z"
"","15779","Include Google Analytics tracking code in asciidoc documentation [SPR-11152]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11152](https://jira.spring.io/browse/SPR-11152?redirect=false)** and commented   ---  **Affects:** 4.0 RC2","closed","status: declined,","spring-projects-issues","2013-12-04T09:49:03Z","2015-05-06T09:45:46Z"
"","15778","Add a section with all Java SE and Java EE support info [SPR-11151]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11151](https://jira.spring.io/browse/SPR-11151?redirect=false)** and commented  See sections: - #new-in-3.0 - #new-in-3.0-intro - #new-feature-jee-6    ---  **Affects:** 4.0 RC2","closed","type: documentation,","spring-projects-issues","2013-12-04T09:21:19Z","2013-12-11T23:57:17Z"
"","15776","Document @ControllerAdvice [SPR-11149]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11149](https://jira.spring.io/browse/SPR-11149?redirect=false)** and commented  Document new ControllerAdvice annotation features. Move old documentation from ""what's new in spring 3"" inside the ref doc.  ---  **Affects:** 4.0 RC2  This issue is a sub-task of #15775  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/efc5074395b9de24741b5e4bb3c983155d68540c","closed","type: documentation,","spring-projects-issues","2013-12-04T08:13:25Z","2019-01-11T19:37:24Z"
"","15775","Update and/or migrate ""what's new in spring 3"" ""migrating to..."" sections  [SPR-11148]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11148](https://jira.spring.io/browse/SPR-11148?redirect=false)** and commented  The ""What's new in Spring 3"" section should definitely be removed in the documentation. But before that, we have to make sure all the bits of documentation in it are somewhere else in the reference doc.  Sub-issues should be created to reflect parts of ""What's new in Spring 3"" that need work.  ---  **Affects:** 4.0 RC2  **Sub-tasks:** - #15776 Document `@ControllerAdvice` - #15795 Document Bean definition profiles - #15796 document Environment and PropertySource abstractions - #15797 Delete ""migrating to spring 3.x"" sections - #15798 Mention suffix pattern match in contentnegotiationmanager doc - #15799 mention updates in resttemplate documentation - #15801 update interceptors documentation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/06f834c1922d38c3e64014e545e3af40f92984ca","closed","type: documentation,","spring-projects-issues","2013-12-04T07:48:40Z","2019-01-13T06:57:12Z"
"","15765","Fix tests related to java.beans.BeanInfo changes in JDK8-b117 [SPR-11139]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11139](https://jira.spring.io/browse/SPR-11139?redirect=false)** and commented  Starting JDK8-b117, several tests fail in spring-beans.  ``` org.springframework.beans.ExtendedBeanInfoTests > indexedReadMethodReturnsSupertypeOfIndexedWriteMethodParameter FAILED     java.beans.IntrospectionException at ExtendedBeanInfoTests.java:340  org.springframework.beans.ExtendedBeanInfoTests > readMethodReturnsSupertypeOfWriteMethodParameter FAILED     java.beans.IntrospectionException at ExtendedBeanInfoTests.java:323 ```  Because of [changes/fixes in the java.beans introspection codebase](http://hg.openjdk.java.net/jdk8/jdk8/jdk/rev/29f979efbabf), some edge cases of java.beans.BeanInfo are now fixed.    ---  **Affects:** 4.0 RC2  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2013-12-02T13:03:55Z","2013-12-11T23:57:19Z"
"","15725","Upgrade Jetty to version 9.1.0 GA [SPR-11099]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11099](https://jira.spring.io/browse/SPR-11099?redirect=false)** and commented   ---  **Affects:** 4.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2ea5360b822c2618586370577cbd4a548c88efac","closed","type: enhancement,","spring-projects-issues","2013-11-19T01:33:24Z","2013-12-03T15:15:32Z"
"","15651","Document how websocket server implementations should be configured by users to limit message size [SPR-11023]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11023](https://jira.spring.io/browse/SPR-11023?redirect=false)** and commented  ---  **Affects:** 4.0 RC1  **Issue Links:** - #15520 Validate message size limits in StompProtocolHandler","closed","type: documentation,","spring-projects-issues","2013-10-23T08:59:38Z","2019-01-11T19:26:09Z"
"","15584","Overload JdbcTemplate.queryForObject to accept a boolean parameter to allow a null value [SPR-10956]","**[Brett Ryan](https://jira.spring.io/secure/ViewProfile.jspa?name=brett.ryan)** opened **[SPR-10956](https://jira.spring.io/browse/SPR-10956?redirect=false)** and commented  `JdbcTemplate` is designed to simplify performing JDBC queries however there is not very good support for returning a value where a row may not exist when using any of the `queryForObject` overloads, this means for simple types the author must be more verbose by either catching an `IncorrectResultSizeDataAccessException` or using a `query` overload and manually extract the value with a `ResultSetExtractor` or extracting the first entry from a `RowMapper`, this results in more verbose code as can be seen here:  ```java // Using a ResultSetExtractor String name1 = jt.query(""select name from customers where id = ?"", new ResultSetExtractor() {     @Override     public String extractData(ResultSet rs) throws SQLException, DataAccessException {         return rs.next() ? rs.getString(""name"") : null;     } }, 123); // Using a RowMapper List names = jt.query(""select name from customers where id = ?"", new RowMapper() {     @Override     public String mapRow(ResultSet rs, int i) throws SQLException {         return rs.next() ? rs.getString(""name"") : null;     } }, 123); String name2 = names.isEmpty() ? null : names.get(0); ```  I propose to instead add an overload to the queryForObject method that allows the author to expect zero or one values.  ```java String name3 = jt.queryForObject(         ""select name from customers where id = ?"",         true, String.class, 123); ```  Alternatively new methods could be created with the same functionality called queryForObjectOrNull.   ---  4 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-10-03T20:51:46Z","2019-01-12T00:22:12Z"
"","16255","Broken link in rest service tutorial [SPR-11632]","**[Brendan Miller](https://jira.spring.io/secure/ViewProfile.jspa?name=catphive)** opened **[SPR-11632](https://jira.spring.io/browse/SPR-11632?redirect=false)** and commented  On the spring web service tutorial, the link the the maven build file is broken.  Tutorial: https://spring.io/guides/gs/rest-service/  Broken link: In section ""Create a Gradle build file"" with lable ""right here.""  https://github.com/spring-guides/%7Bproject_id%7D/blob/master/initial/pom.xml  Result: This github link causes a 404. It looks like $7Bproject_id%7D is supposed to be substituted for some other value, but whatever backend the tutorial uses is failing to do it.  Expected Behavior: This link should let me download the maven pom.xml to use for the tutorial.   ---  **Affects:** 4.0.3  **Reference URL:** https://spring.io/guides/gs/rest-service/","closed","status: invalid,","spring-projects-issues","2014-03-30T17:23:20Z","2019-01-12T05:26:02Z"
"","16277","Within Cache abstraction, log when a value was found for a key, and when not. [SPR-11654]","**[Brandon Zeeb](https://jira.spring.io/secure/ViewProfile.jspa?name=phasebash)** opened **[SPR-11654](https://jira.spring.io/browse/SPR-11654?redirect=false)** and commented  We rely heavily on the Spring Cache et al family of abstractions.  While the JMX statistics available for some caches are useful, in day to day development and production debugging it's often been essential to know of a particular object was provided by an implementation of Cache or if a backing store (ie: the `@Cacheable` annotation) was consulted instead.  In short, can we please have some cursory logging at debug level when a value is fetched from a Cache (as in, the key produced a value) **and** when no value was available?  Ideally, the key would be logged in both cases.  Optionally, a 3rd log message can be given for the value (with key) at trace level.  I leave it to you to decide where this will go, so long as this is the default behavior.   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2014-04-03T19:04:16Z","2020-06-11T22:45:21Z"
"","15995","Multiple Converters from same source type to different Collection types not properly supported [SPR-11369]","**[Brandon Zeeb](https://jira.spring.io/secure/ViewProfile.jspa?name=phasebash)** opened **[SPR-11369](https://jira.spring.io/browse/SPR-11369?redirect=false)** and commented  The GenericConversionService has a private static class _ConverterCacheKey_ which is used to map source and target TypeDescriptors to a GenericConverter.  This class is used to aggregate the hashCodes of two TypeDescriptors (source and target).  The current TypeDescriptor hashCode only looks at the bare Java Class, which is fine for primitives and none collection types.  In the case of Collections types with generics, only using the bare Java type of the Collection makes it impossible to register two Converters with the same target collection type. ie: 1. Converter 2. Converter  The field resolvableType contains information on both the Collection type and it's generic types.  Perhaps this field should be used instead?  I have rated this priority initially as ""Critical"" given it is not possible to register Converters with the same Collection type that differ on generic types, which is a blocker in our applications.  We need this to work, and would prefer not to only accept Collection\.   --- No further details from [SPR-11369](https://jira.spring.io/browse/SPR-11369?redirect=false)","closed","type: enhancement,","spring-projects-issues","2014-01-29T10:31:31Z","2014-02-18T22:36:49Z"
"","15987","BeanWrapper fails in case of read/write method mismatch (e.g. EhCacheFactoryBean.setMemoryStoreEvictionPolicy) [SPR-11361]","**[Brandon Mintern](https://jira.spring.io/secure/ViewProfile.jspa?name=mintern)** opened **[SPR-11361](https://jira.spring.io/browse/SPR-11361?redirect=false)** and commented  We have an applicationContext-common-authorization.xml file with the following component:                                                                                                                    This fails on memoryStoreEvictionPolicy. I can trace down all the way to ehCache's CacheConfiguration, and all is well. After it returns, though, BeanWrapperImpl:1152 calls:      writeMethod.invoke(this.object, value);  The writeMethod accepts a String, but the value passed in is a MemoryStoreEvictionPolicy enum.  Is this a bug? Or do I simply need to change my configuration  (perhaps using memoryStoreEvictionPolicyFromObject instead)?  This worked fine before our upgrade to Spring 4.  When I remove the memoryStoreEvictionPolicy line (LRU is the default, anyway), the server starts up normally.   ---  **Affects:** 3.2.6, 4.0 GA  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","in: core,","spring-projects-issues","2014-01-27T13:56:02Z","2014-01-28T13:07:15Z"
"","15663","Change default charset for StringHttpMessageConverter to UTF-8 [SPR-11035]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-11035](https://jira.spring.io/browse/SPR-11035?redirect=false)** and commented  org.springframework.http.converter.StringHttpMessageConverter has:  public static final Charset DEFAULT_CHARSET = Charset.forName(""ISO-8859-1"");  It should be UTF-8. It is configurable, but in case it is auto-registered by mvc:annotation-driven, this becomes hard (you need a PostProcessor)  For comparison, org.springframework.http.converter.json.MappingJackson2HttpMessageConverter has the same constant, which is UTF-8.   ---  **Affects:** 3.2.3","closed","status: declined,","spring-projects-issues","2013-10-28T03:22:04Z","2019-01-12T16:35:46Z"
"","15715","Download docs for offline access [SPR-11089]","**[Bogdan Popescu](https://jira.spring.io/secure/ViewProfile.jspa?name=bogdansrc)** opened **[SPR-11089](https://jira.spring.io/browse/SPR-11089?redirect=false)** and commented  Is there any way to download the API docs for offline use? I'm the developer behind Dash (http://kapeli.com/dash) and I'd like to create a Spring Framework docset, but I need the docs.  Basically, I need what's at http://docs.spring.io/spring/docs/current/javadoc-api/ in a zip archive or similar.   ---  **Reference URL:** http://docs.spring.io/spring/docs/current/javadoc-api/","closed","status: invalid,","spring-projects-issues","2013-11-12T17:46:00Z","2019-01-12T05:26:30Z"
"","16071","double evaluation of method arguments in SpEL [SPR-11445]","**[Björn Voß](https://jira.spring.io/secure/ViewProfile.jspa?name=bjoern.voss)** opened **[SPR-11445](https://jira.spring.io/browse/SPR-11445?redirect=false)** and commented  Since version 3.2.5 in expressions like  ""dummyAction.isSero(dummyBean.getCalls())""  the argument part ""dummyBean.getCalls()"" is evaluated twice  see attached a little project for testing. if you change the propertie 'spring.version' to 3.2.4.RELEASE the test is green. On all later versions the test fails.   ---  **Affects:** 3.2.5, 3.2.6, 3.2.7, 3.2.8, 4.0.1, 4.0.2  **Attachments:** - [spel.tar.gz](https://jira.spring.io/secure/attachment/21686/spel.tar.gz) (_40.00 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/519799e1cf414615ef0a7a26d5dde0478a47b96d, https://github.com/spring-projects/spring-framework/commit/b1bcc5d6eb57299e6643575c686a118a05a14faf  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","in: core,","spring-projects-issues","2014-02-19T05:52:34Z","2014-03-26T22:34:02Z"
"","16070","bring back the changelog.txt [SPR-11444]","**[Björn Voß](https://jira.spring.io/secure/ViewProfile.jspa?name=bjoern.voss)** opened **[SPR-11444](https://jira.spring.io/browse/SPR-11444?redirect=false)** and commented  it would be nice to have the changelog not only in jira but also under http://docs.spring.io/spring/docs/\/changelog.txt as it was until 4.x  see http://docs.spring.io/spring/docs/3.2.8.RELEASE/changelog.txt   --- No further details from [SPR-11444](https://jira.spring.io/browse/SPR-11444?redirect=false)","closed","type: enhancement,","spring-projects-issues","2014-02-19T05:33:24Z","2018-12-05T14:38:25Z"
"","15753","Issue with Spring 3.2.4RELEASE with Quartz 1.8.3 integration [SPR-11127]","**[Bindu Nagesh](https://jira.spring.io/secure/ViewProfile.jspa?name=bindunagesh)** opened **[SPR-11127](https://jira.spring.io/browse/SPR-11127?redirect=false)** and commented  Hi, We need to upgrade Spring to 3.2.4RELEASE in our project where we use Quartz 1.8.3 version on Websphere AS 8 version. We use org.springframework.scheduling.commonj.WorkManagerTaskExecutor for Thread Management for scheduling jobs. But on Spring Upgrade we get the below exception when starting the Scheduler application:  org.springframework.beans.factory.access.BootstrapException: Unable to initialize group definition. Group resource name [classpath*:beanRefContext.xml], factory key [SchedulerContext]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SchedulerContext' defined in URL [beanRefContext.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.context.support.ClassPathXmlApplicationContext]: Constructor threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jobManagerDelegate' defined in class path resource [SchedulerContext.xml]: Cannot resolve reference to bean 'schedulerFactoryBean' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'schedulerFactoryBean' defined in class path resource [SchedulerContext.xml]: Initialization of bean failed; nested exception is java.lang.reflect.MalformedParameterizedTypeException  and below exception when scheduling jobs  Cannot convert value of type [org.springframework.scheduling.commonj.WorkManagerTaskExecutor] to required type [java.util.concurrent.Executor] for property 'taskExecutor': no matching editors or conversion strategy found at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:254) org.springframework.beans.factory.access.BootstrapException: Unable to initialize group definition. Group resource name [classpath*:beanRefContext.xml], factory key [SchedulerContext]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SchedulerContext' defined in URL  My bean definition xml containing the WorkManagerTaskExecutor definition looks as below: \           	     	       Appreciate a response.  Thanks, Bindu   ---  **Affects:** 3.2.4","closed","status: bulk-closed,","spring-projects-issues","2013-11-26T22:33:12Z","2019-01-12T00:20:58Z"
"","15665","Invalid JSF FacesContext and ExternalContext injected into non request scoped bean [SPR-11037]","**[Billy Lau](https://jira.spring.io/secure/ViewProfile.jspa?name=hkblau)** opened **[SPR-11037](https://jira.spring.io/browse/SPR-11037?redirect=false)** and commented  FacesContext and ExternalContext injected into non request scoped bean are only valid when it is in the same http request. It is because FacesContext and ExternalContext are not interfaces, no proxy objects are created for the injection. The ObjectFactory registered by WebApplicationContextUtils should wrap them by FacesContextWrapper and ExternalContextWrapper to solve this issue.   ---  **Affects:** 3.2.4","closed","status: bulk-closed,","spring-projects-issues","2013-10-28T05:37:13Z","2019-01-12T00:21:30Z"
"","16055","InitBinder adding validators on types not present on @RequestMapping methods [SPR-11429]","**[Biju Kunjummen](https://jira.spring.io/secure/ViewProfile.jspa?name=biju.kunjummen)** opened **[SPR-11429](https://jira.spring.io/browse/SPR-11429?redirect=false)** and commented  #14892 is an issue along the same lines:  I feel that the following controller should work without throwing an exception:  ```java   @Controller class SampleController { 	 	@RequestMapping(""/sampleRequest"") 	public String sampleRequest(Request request, BindingResult bindingResult1, 			GeneralHolder genHolder, BindingResult bindingResult2, Model model) { 		model.addAttribute(""moreinmodel"", new GeneralHolder()); 		return ""view""; 	} 	 	@InitBinder 	public void initBinder(WebDataBinder dataBinder) { 		dataBinder.addValidators(new Validator() { 			 			@Override 			public void validate(Object target, Errors errors) { 				// 			} 			 			@Override 			public boolean supports(Class clazz) { 				return Request.class.equals(clazz); 			} 		}); 	} }  class Request { 	private int id; 	private String message; 	public int getId() { 		return id; 	} 	public void setId(int id) { 		this.id = id; 	} 	public String getMessage() { 		return message; 	} 	public void setMessage(String message) { 		this.message = message; 	} }  class GeneralHolder { 	private int message;  	public int getMessage() { 		return message; 	}  	public void setMessage(int message) { 		this.message = message; 	} } ```  The above code fails with the following exception:  ```java Caused by: java.lang.IllegalStateException: Invalid target for Validator [testmvcbinder.SampleController$1@63f5d66f]: testmvcbinder.GeneralHolder@20d144ae 	at org.springframework.validation.DataBinder.assertValidators(DataBinder.java:495) 	at org.springframework.validation.DataBinder.addValidators(DataBinder.java:506) 	at testmvcbinder.SampleController.initBinder(WithUnSupportedValidatorTests.java:73) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:601) 	at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:214) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132) 	at org.springframework.web.method.annotation.InitBinderDataBinderFactory.initBinder(InitBinderDataBinderFactory.java:62) 	at org.springframework.web.bind.support.DefaultDataBinderFactory.createBinder(DefaultDataBinderFactory.java:53) 	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:106) 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:79) 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:157) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:124) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:749) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:690) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:945) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:876) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961) ```  I realize that this is as designed, but I feel that this error is not intuitive at all, the databinder could have chosen to ignore applying the validator on method arguments where it is not relevant.  I will send a pull request with a proposed code change also which puts in this change of behavior of DataBinder(will add location in comments). Can you please review and see if this is a acceptable change.  This is the pull request: https://github.com/spring-projects/spring-framework/pull/464  ---  **Affects:** 4.0.1  **Reference URL:** https://jira.springsource.org/browse/SPR-10259  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/464","closed","type: enhancement,","spring-projects-issues","2014-02-14T20:14:34Z","2019-01-11T21:26:05Z"
"","15822","MethodInvokingFactoryBean not well-suited for non-factory methods [SPR-11196]","**[Benoit Lacelle](https://jira.spring.io/secure/ViewProfile.jspa?name=blasd)** opened **[SPR-11196](https://jira.spring.io/browse/SPR-11196?redirect=false)** and commented  If a bean holds an `@Autowire` field, the whole application context seems to be initialized early to check for the type of all beans.  I would expect this eager initialisation phase not to actually instantiate the beans, in order to rely on the default bean ordering.  This seems not to be the case when considering some FactoryBean, at least MethodInvokingFactoryBean.  In my case, the MethodInvokingFactoryBean has been loaded right before the `@Autowire` field initialisation (when it is suppose to happen much later).  it ssems to be done so as, since this been is not configured yet: MethodInvokingFactoryBean  ``` /** 	 * Return the type of object that this FactoryBean creates, 	 * or null if not known in advance. 	 */ 	public Class getObjectType() { 		if (!isPrepared()) { 			// Not fully initialized yet -> return null to indicate ""not known yet"". 			return null; 		} 		return getPreparedMethod().getReturnType(); 	} ```  Then, it instanciates the underlying singleton bean (i.e. it executes the method):  ``` DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory) line: 225 DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class, Object[], boolean) line: 291 DefaultListableBeanFactory(AbstractBeanFactory).getTypeForFactoryBean(String, RootBeanDefinition) line: 710 ```  I would expect AbstractBeanFactory.doGetBean to check for typeCheckOnly when calling  ``` sharedInstance = getSingleton(beanName, new ObjectFactory() { 					public Object getObject() throws BeansException { 						try { 							return createBean(beanName, mbd, args); 						} 						catch (BeansException ex) { 							// Explicitly remove instance from singleton cache: It might have been put there 							// eagerly by the creation process, to allow for circular reference resolution. 							// Also remove any beans that received a temporary reference to the bean. 							destroySingleton(beanName); 							throw ex; 						} 					} 				}); ```  like in:  ``` if (!typeCheckOnly) { 	markBeanAsCreated(beanName); } ```  and in this case, it would not execute the method.  In my case, it lead to a hard to spot issue: as the method execution failed, the autowiring logic simply rejected this bean as a candidate. Later, the methodInvokingFactoryBean is executed again, but it failed for an obscure reason as the first (failed) call has changed some internal state.  Here is a stack leasing to the first method call:  ``` MyProjectClass(MyProjectClass).myProjectMethod(String) line: myProjectLine                 NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]                     NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39                   DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25                          Method.invoke(Object, Object...) line: 597                         MethodInvokingFactoryBean(MethodInvoker).invoke() line: 273                            MethodInvokingFactoryBean.doInvoke() line: 162                          MethodInvokingFactoryBean.afterPropertiesSet() line: 152                       DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).invokeInitMethods(String, Object, RootBeanDefinition) line: 1514                 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).initializeBean(String, Object, RootBeanDefinition) line: 1452                 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 519                           DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 456                           AbstractBeanFactory$1.getObject() line: 294                      DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory) line: 225                          DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class, Object[], boolean) line: 291                     DefaultListableBeanFactory(AbstractBeanFactory).getTypeForFactoryBean(String, RootBeanDefinition) line: 1356                                DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).getTypeForFactoryBean(String, RootBeanDefinition) line: 710                   DefaultListableBeanFactory(AbstractBeanFactory).isTypeMatch(String, Class) line: 519                         DefaultListableBeanFactory.doGetBeanNamesForType(Class, boolean, boolean) line: 339                  DefaultListableBeanFactory.getBeanNamesForType(Class, boolean, boolean) line: 316                        BeanFactoryUtils.beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean) line: 187                                DefaultListableBeanFactory.findAutowireCandidates(String, Class, DependencyDescriptor) line: 857                            DefaultListableBeanFactory.doResolveDependency(DependencyDescriptor, Class, String, Set, TypeConverter) line: 814                             DefaultListableBeanFactory.resolveDependency(DependencyDescriptor, String, Set, TypeConverter) line: 731                         AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(Object, String, PropertyValues) line: 485                         InjectionMetadata.inject(Object, String, PropertyValues) line: 92                           AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(PropertyValues, PropertyDescriptor[], Object, String) line: 284                                DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).populateBean(String, AbstractBeanDefinition, BeanWrapper) line: 1106                           DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 517                           DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 456                           AbstractBeanFactory$1.getObject() line: 294                      DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory) line: 225                          DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class, Object[], boolean) line: 291                     DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 193                      BeanDefinitionValueResolver.resolveReference(Object, RuntimeBeanReference) line: 323                      BeanDefinitionValueResolver.resolveValueIfNecessary(Object, Object) line: 107                           DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).applyPropertyValues(String, BeanDefinition, BeanWrapper, PropertyValues) line: 1360                           DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).populateBean(String, AbstractBeanDefinition, BeanWrapper) line: 1118                           DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 517                           DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 456                           AbstractBeanFactory$1.getObject() line: 294                      DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory) line: 225                          DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class, Object[], boolean) line: 291                     DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 193                      DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class, Object[], boolean) line: 284                     DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 193                      DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class, Object[], boolean) line: 284                     DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 193                      DefaultListableBeanFactory.preInstantiateSingletons() line: 587                             XmlWebApplicationContext(AbstractApplicationContext).finishBeanFactoryInitialization(ConfigurableListableBeanFactory) line: 925                               XmlWebApplicationContext(AbstractApplicationContext).refresh() line: 472                    ContextLoaderListener(ContextLoader).configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext, ServletContext) line: 383                             ContextLoaderListener(ContextLoader).initWebApplicationContext(ServletContext) line: 283                 ContextLoaderListener.contextInitialized(ServletContextEvent) line: 111                           WebAppContext(ContextHandler).callContextInitialized(ServletContextListener, ServletContextEvent) line: 771                                WebAppContext(ServletContextHandler).callContextInitialized(ServletContextListener, ServletContextEvent) line: 424                               WebAppContext(ContextHandler).startContext() line: 763                         WebAppContext(ServletContextHandler).startContext() line: 249                          WebAppContext.startContext() line: 1250                           WebAppContext(ContextHandler).doStart() line: 706                    WebAppContext.doStart() line: 492                        WebAppContext(AbstractLifeCycle).start() line: 64                         Server(HandlerWrapper).doStart() line: 95                         Server.doStart() line: 277                             Server(AbstractLifeCycle).start() line: 64                              MreJettyServer.start(int) line: 85                             MreJettyServer.main(String[]) line: 59  ```    ---  **Affects:** 3.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cf290ab42a22e412eb55db34c5b43aadcb356d3f  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2013-12-09T03:07:39Z","2014-03-26T22:34:07Z"
"","15705","JavaConfig Bean overriding succeed unexpectedly with @Configuration overriding [SPR-11079]","**[Benoit Lacelle](https://jira.spring.io/secure/ViewProfile.jspa?name=blasd)** opened **[SPR-11079](https://jira.spring.io/browse/SPR-11079?redirect=false)** and commented  I consider 2 `@Configuration` classes, the second extends the first and overloads a bean from the first config. The second configuration is invalid as some dependency cannot be resolved. Then, I expect the application context loading to fail. However, it succeds by not overloading the correct bean with the invalid bean:  ``` import java.util.Date;  import org.junit.Assert; import org.junit.Test; import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration;  public class SpringTest {  	@Test 	public void testOverload() { 		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(AConfig.class, BConfig.class); 		Assert.assertEquals(""overriden"", ctx.getBean(""beanToOverride"")); 	}  	@Configuration 	public static class AConfig { 		@Bean 		public Date dateBean() { 			return new Date(); 		}  		@Bean 		public Object beanToOverride(Date date) { 			return ""not overriden""; 		}  	}  	@Configuration 	public static class BConfig extends AConfig {  		@Bean 		public Object beanToOverride(Date someDate, Integer integer) { 			return ""overriden""; 		}  	}  } ```  I don't know if the configuration should fail or not given (still, I expect it to fail), but it should at the very least drop a warning.  Thanks  Benoit Lacelle   ---  **Affects:** 3.2.5","closed","in: core,","spring-projects-issues","2013-11-08T07:29:37Z","2019-01-12T16:35:38Z"
"","15620","@Bean overriding does not pick up metadata from most specific method [SPR-10992]","**[Benoit Lacelle](https://jira.spring.io/secure/ViewProfile.jspa?name=blasd)** opened **[SPR-10992](https://jira.spring.io/browse/SPR-10992?redirect=false)** and commented  While overrding a Javaconfig Bean by extending the original `@Configuration` class, I would like to add a `@DependsOn` for the new Bean definition.  However, this depends-on seems not to be taken in account. here is a TestCase reproducing my issues:  ``` public class SpringTest {  	@Test 	public void testDependsOnTakenInAccount() { 		AnnotationConfigApplicationContext ctx2 = new AnnotationConfigApplicationContext(AConfig.class, CConfig.class); 		Assert.assertEquals(""overriden"", ctx2.getBean(""bean"")); 	}  	@Configuration 	public static class AConfig {  		@Bean 		public Object bean() { 			return ""not overriden""; 		}  	}  	@Configuration 	public static class CConfig extends AConfig {  		protected boolean isInitialized = false;  		@Bean 		public Void doInit() { 			isInitialized = true;  			return null; 		}  		@Bean 		@DependsOn(""doInit"") 		public Object bean() { 			if (!isInitialized) { 				throw new RuntimeException(""Not initialized""); 			}  			return ""overriden""; 		}  	}  } ```  Is this an expected behavior? If yes, how can I add dependency while overriding a bean?  ---  **Affects:** 3.2.3  **Issue Links:** - #15370 Cannot override singleton with scoped proxy - #15653 ConfigurationClass.validate() should allow for overloading in general or not at all  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2013-10-16T01:29:55Z","2019-01-14T05:18:31Z"
"","15616","JavaConfig Bean overriding with addition [SPR-10988]","**[Benoit Lacelle](https://jira.spring.io/secure/ViewProfile.jspa?name=blasd)** opened **[SPR-10988](https://jira.spring.io/browse/SPR-10988?redirect=false)** and commented  I consider injection of beans as a List of automatically detected beans: I introduce several beans implementing the same interface and inject all of them as a List in a later bean.  I've not been able to find official documentation related to this feature. My single source is http://www.coderanch.com/t/605509/Spring/Java-config-autowired-List  Consider this feature, I have an issue with Bean overring: I would like to override a bean defined throught a no-arg method with a bean defined with the List of detected beans. However, spring behave like the second bean definition does not exist.  It can be reproduced with the following test:  ``` import java.util.Date; import java.util.List;  import org.junit.Assert; import org.junit.Test; import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration;  public class SpringTest {  	@Test 	public void shouldtestSpringDifferentMethodNames() { 		AnnotationConfigApplicationContext ctx2 = new AnnotationConfigApplicationContext(AConfig.class, CConfig.class); 		Assert.assertEquals(""overriden"", ctx2.getBean(""bean"")); 	}  	@Configuration 	public static class AConfig {  		@Bean 		public Object bean() { 			return ""not overriden""; 		}  	}  	@Configuration 	public static class CConfig extends AConfig {  		@Bean 		public Date anotherBean() { 			return new Date(); 		}  		@Bean 		public Object bean(List","closed","in: core,","spring-projects-issues","2013-10-15T02:35:42Z","2019-01-13T06:57:49Z"
"","16125","Clarify the use of exception in the conversion API [SPR-11500]","**[Benjamin M](https://jira.spring.io/secure/ViewProfile.jspa?name=benneq)** opened **[SPR-11500](https://jira.spring.io/browse/SPR-11500?redirect=false)** and commented  The Converters documentation ( http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html ) says:  ""Your Converter may throw any Exception if conversion fails. An IllegalArgumentException should be thrown to report an invalid source value.""  BUT: I cannot use ANY Exception, the Exception to use must be a RuntimeException.  This doesn't work:  public class MyConverter implements Converter { `@Override` public B convert(A a) { throw new Exception(); } }  Eclipse says: ""Unhandled exception type Exception""  But this works:  public class MyConverter implements Converter { `@Override` public B convert(A a) { throw new RuntimeException(); } }  ---  **Affects:** 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/035d9d5af091b9472d82cd831f6a8bfc917dd5ec","closed","type: enhancement,","spring-projects-issues","2014-03-02T10:25:35Z","2019-01-13T21:01:01Z"
"","15978","@RequestPart(...) MultipartFile[] does not work (List","**[Benjamin M](https://jira.spring.io/secure/ViewProfile.jspa?name=benneq)** opened **[SPR-11353](https://jira.spring.io/browse/SPR-11353?redirect=false)** and commented  I just discovered a minor issue, that was really nasty to discover.  `@RequestMapping`(...) void upload1(`@RequestPart`(""files[]"") **MultipartFile[]** files) { ... }  This throws some **HttpMediaTypeNotSupportedException**, because it takes all data that comes within **files[]** and tries to convert it via **HttpMessageConverters**.  When using **List** instead of **MultipartFile[]** it works as expected.  My Request looks like that:  Accept:\*/\* Content-Length:4103 Content-Type:multipart/form-data; boundary=----WebKitFormBoundarynSUtw4ABfNjtPL29  ------WebKitFormBoundarynSUtw4ABfNjtPL29 Content-Disposition: form-data; name=""files[]""; filename=""id_rsa.pub"" Content-Type: application/octet-stream  ------WebKitFormBoundarynSUtw4ABfNjtPL29 Content-Disposition: form-data; name=""files[]""; filename=""test.csv"" Content-Type: text/csv  ------WebKitFormBoundarynSUtw4ABfNjtPL29\-\-  And afterwards I get an HTTP 415 which says: **Sent Content-Type ""application/octet-stream"" is not supported. Supported Content-Types are: ""application/json;charset=UTF-8"", ""application/\*+json;charset=UTF-8"", ""text/vcard"", ""application/octet-stream"", ""text/plain;charset=ISO-8859-1"", ""application/xml"", ""text/xml"", ""application/x-www-form-urlencoded"", ""application/\*+xml"", ""multipart/form-data"", ""\*/\*""**  ---  **Affects:** 4.0 GA  **Issue Links:** - #15220 Spring's support for javax.servlet.http.Part vs. MultipartFile incomplete, inconsistent - #18467 Part list/array gets resolved to all parts in current request  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cc0a845653779dd8c623354fd655ed5b12daf412  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-01-23T22:58:48Z","2019-01-13T21:01:27Z"
"","15572","Make URL parameters work with field access [SPR-10944]","**[Benjamin M](https://jira.spring.io/secure/ViewProfile.jspa?name=benneq)** opened **[SPR-10944](https://jira.spring.io/browse/SPR-10944?redirect=false)** and commented  I've written a controller method which can accept lot's of URL parameters. Here's a small example:  `@RequestMapping(value=""search"", method=RequestMethod.GET)` `public void search(SearchDTO dto) {` `...` `}`  Now it's possible to do some query like `.../search?createdBefore=2012-12-21`  This works fine as long as `SearchDTO` has setters for every field. If I just use `public` fields without getter/setter, every field is `null`.  It should be possible to just use `public` fields. Especially for DTOs it's not necessary to have setter/getter, too much code (if someone really needs them, he can still use them).   ---  **Affects:** 4.0 M3","closed","type: enhancement,","spring-projects-issues","2013-09-27T18:25:25Z","2019-01-13T21:02:23Z"
"","16275","UriTemplate does not escape semicolons in path segments [SPR-11652]","**[Benjamin Gehrels](https://jira.spring.io/secure/ViewProfile.jspa?name=bgehrels)** opened **[SPR-11652](https://jira.spring.io/browse/SPR-11652?redirect=false)** and commented  In URIs (and URLs), path components may have parameters delimited by a semicolon (called path parameters or matrix parameters). Therefore semicolons contained in the variable values should be escaped when expanding variables in path components of UriTemplates. Otherwise, parts of the variables value will be interpreted as a path parameter (matrix variables) when parsing the URL later on.  I attached a unit test showing this problem:  ``` new UriTemplate(""http://www.example.com/user/{userId}/dashboard"").expand(""john;doe""); ```  should return http://www.example.com/user/john%3Bdoe/dashboard but instead returns http://www.example.com/user/john;doe/dashboard. So, instead of john;doe's dashboard, john's dashboard is delivered with a parameter doe.  ---  **Affects:** 4.0.2  **Attachments:** - [SpringUriTemplateSemicolonTest.java](https://jira.spring.io/secure/attachment/21913/SpringUriTemplateSemicolonTest.java) (_523 bytes_)  **Issue Links:** - #15137 Support advanced URI Template Syntax - #18673 url param containing ? is not getting encoded by Rest Template  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6f2c968925c28d7269e1dada1d97b7dff2d6cf07  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2014-04-03T04:28:38Z","2019-01-13T21:00:26Z"
"","15565","Invoking RedirectView.render from within a filter throws null pointer exception [SPR-10937]","**[Ben Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=jordanb)** opened **[SPR-10937](https://jira.spring.io/browse/SPR-10937?redirect=false)** and commented  Before I get into this, I'm willing to accept that what I'm doing is wrong (very old code). If so feel free to close this.  I have a OncePerRequestFilter that is invoked in the Spring Security chain after the FORM_LOGIN_FILTER filter. Inside this filter, the code decides whether some conditions are true and if so it redirects the user to a new page:  ``` public void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {     if (someEvent) {         new RedirectView(someUrl, true).render(model, request, response);         return; // Stop the filter chain     }     chain.doFilter(request, response); // Keep going } ```  In RedirectView's renderMergedOutputModel method, a null pointer exception (silently for some reason) occurs because the following line returns null:  ``` FlashMapManager flashMapManager = RequestContextUtils.getFlashMapManager(request); flashMapManager.saveOutputFlashMap(flashMap, request, response); // Null Pointer ```  Having thrown some breakpoints around it seems to be because the DispatcherServlet hasn't added the FlashMapManager into the request as the filter was invoked before the DispatcherServlet.  I can get around this by overriding renderMergedOutputModel and taking out the stuff about flash attributes as I do not need them.  Again, happy to be told I'm ""doing it wrong"".   ---  **Affects:** 3.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4ac680103bf42956763ac79a8b881ba6044aa3f9, https://github.com/spring-projects/spring-framework/commit/70907fd3263c2fdb66ac25a8eb86982a47cd722b  1 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2013-09-25T18:01:39Z","2013-11-06T22:51:37Z"
"","15674","URLs not decoded properly [SPR-11047]","**[Ben Hess](https://jira.spring.io/secure/ViewProfile.jspa?name=hessben)** opened **[SPR-11047](https://jira.spring.io/browse/SPR-11047?redirect=false)** and commented  The bug listed in #10957 has not been fixed.  Plus signs passed in a URL to Spring MVC are still being converted to spaces.  Example URL: http://localhost:8989/sample/properties/search?q=red+blue  Example MVC Code:  ```java @RequestMapping(value=""/properties/search"", method=RequestMethod.GET, params=""q"", produces {""application/json""}) @ResponseBody public List searchForProperties(@RequestParam(""q"") String propertyKeys) {     //The propertyKeys parameter has no plus signs, plus signs have been converted to spaces     List queryStrings = Arrays.asList(propertyKeys.split(""\\+""));     List properties = searchService.crossApplicationSearchForKeys(queryStrings);     return properties; } ```  ---  **Affects:** 3.2.4  **Reference URL:** https://jira.springsource.org/browse/SPR-6291  2 votes, 8 watchers","closed","status: invalid,","spring-projects-issues","2013-10-30T09:20:17Z","2019-01-12T05:26:33Z"
"","15878","Allow configuring RequestMappingHandlerMapping in mvc:annotation-driven [SPR-11253]","**[Baptiste Meurant](https://jira.spring.io/secure/ViewProfile.jspa?name=bmeurant)** opened **[SPR-11253](https://jira.spring.io/browse/SPR-11253?redirect=false)** and commented  Since 3.2M2 and content negotiation improvements (cf. #13057), Spring allows to configure a ContentNegotiationManager on mvc:annotation-driven declaration :  ```xml  ```  This is really useful to define a custom list of media types that Spring will recognize. Thank you for that.  But if we want to exclude from suffix pattern recognition any other media type extension, we have also to set to true the useRegisteredSuffixPatternMatch property of the RequestMappingHandlerMapping (see [this comment](https://jira.springsource.org/browse/SPR-7632?focusedCommentId=94157&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-94157)).  Unfortunately, as far I know, there is no way to configure the RequestMappingHandlerMapping from mvc-annotation-driven and we have to override the entire mvc-annotation-driven configuration which is boring, verbose and unuseful.  Why do not provide a comparable way to configure RequestMappingHandlerMapping ? Is there a strong technical or conceptual reason ?  Could we write something like :  ```xml  ```  ---  **Affects:** 3.2.6  **Issue Links:** - #14796 Expose path-related request mapping settings in the MVC XML namespace (_**""duplicates""**_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2013-12-22T13:40:53Z","2019-01-11T18:24:23Z"
"","16234","Synchronize on multiple ListenableFuture [SPR-11611]","**[Balakrishnan](https://jira.spring.io/secure/ViewProfile.jspa?name=balatbn)** opened **[SPR-11611](https://jira.spring.io/browse/SPR-11611?redirect=false)** and commented  New AysncRestTemplate returns ListenableFuture to which we can add an callback.  Suppose we have a scenario in which we make multiple calls to server(or call multiple services), is there anyway we can a ""final"" callback that is fired after all these individual server calls finish?  More like using Guava's Futures.addCallback with Futures.allasList. It would great to have this functionality natively instead of relying on other frameworks(Guava) just for this purpose.   ---  **Affects:** 4.0.2  2 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-03-26T22:24:57Z","2019-01-12T00:20:47Z"
"","16350","[doc] @PathVariable in last path segment truncated if ""."" is present  [SPR-11728]","**[Axel Fontaine](https://jira.spring.io/secure/ViewProfile.jspa?name=axel.fontaine)** opened **[SPR-11728](https://jira.spring.io/browse/SPR-11728?redirect=false)** and commented  For this http request: PUT /service/abc/xyz.manifest.xml  I have this controller method:  ```java @RequestMapping(value = ""/service/{part1}/{part2}"", method = RequestMethod.PUT) public void put(@PathVariable(""part1"") String part1, @PathVariable(""part2"") String part2) { } ```  part1 is correctly passed in as abc part2 is truncated to xyz.manifest  ---  **Affects:** 4.0.3  **Issue Links:** - #15527 Issue when using dot(.) in RequestMapping path combined with ContentNegotiationManager favorPathExtension (_**""is duplicated by""**_)","closed","in: web,","spring-projects-issues","2014-04-23T07:54:31Z","2019-01-11T21:18:55Z"
"","16289","TestContext @ContextConfiguration ignores Environment changes in initializers [SPR-11666]","**[Axel Fontaine](https://jira.spring.io/secure/ViewProfile.jspa?name=axel.fontaine)** opened **[SPR-11666](https://jira.spring.io/browse/SPR-11666?redirect=false)** and commented  I have a test class annotated with  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(initializers = EnvironmentInitializer.class, classes = DatabaseConfiguration.class) ```  In `EnvironmentInitializer` I register additional `PropertySources`.  This works great with Spring Boot using:  ``` SpringApplication application = new SpringApplication(Main.class); application.addInitializers(new EnvironmentInitializer()); application.run(args); ```  The test, however fails with ...  ``` java.lang.IllegalArgumentException: Invalid boolean value [${db.testdata}] 	at org.springframework.beans.propertyeditors.CustomBooleanEditor.setAsText(CustomBooleanEditor.java:122) 	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:430) 	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:403) 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:181) 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:110) 	at org.springframework.beans.TypeConverterSupport.doConvert(TypeConverterSupport.java:61) 	... 58 common frames omitted ```  ... since the additional property sources were ignored.   ---  **Affects:** 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4cd075bb963d87bb03b6542403d6d0688e1a250d","closed","status: declined,","spring-projects-issues","2014-04-06T09:40:47Z","2019-01-13T21:00:22Z"
"","15932","MockMvc does not provide contentType for MockHttpServletRequest [SPR-11308]","**[Avseiytsev Dmitriy](https://jira.spring.io/secure/ViewProfile.jspa?name=dimka-747)** opened **[SPR-11308](https://jira.spring.io/browse/SPR-11308?redirect=false)** and commented  I am use RestTemplate with MockMvc for testing MVC REST controllers. My Configuration:  ```java @Configuration public class RestTestConfig {      @Bean     public MockMvc mockMvc(SomeRestController someRestController,                            OtherRestController otherRestController) {         return MockMvcBuilders.standaloneSetup(someRestController, otherRestController).build();     }      @Bean     public ClientHttpRequestFactory clientHttpRequestFactory(MockMvc mockMvc) {         return new MockMvcClientHttpRequestFactory(mockMvc);     }      @Bean     public RestTemplate restTemplate(ObjectMapper objectMapper, ClientHttpRequestFactory requestFactory) {         RestTemplate restTemplate = new RestTemplate(requestFactory);         for(HttpMessageConverter converter : restTemplate.getMessageConverters()) {             if (converter instanceof MappingJackson2HttpMessageConverter) {                 ((MappingJackson2HttpMessageConverter) converter).setObjectMapper(objectMapper);             }         }         return restTemplate;     } } ```  I have some controller:  ```java @Controller @RequestMapping(value = ""/api/some-path"",         produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},         consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE} ) public class SomeRestController {      @ResponseBody     @ResponseStatus(HttpStatus.CREATED)     @RequestMapping(method = RequestMethod.POST)     public SomeDto create(@RequestBody SomeDto someDto) {         return service.save(someDto);     }  } ```  And I try to do POST request with code:  ```java HttpHeaders headers = new HttpHeaders(); headers.setAccept(Collections.singletonList(acceptType)); headers.setContentType(contentType); HttpEntity httpEntity = new HttpEntity(body, headers);  return restTemplate.exchange(uri, method, httpEntity, responseType, params); ```  When I do it I see MethodNotSupportedException with message ""Content type 'null' not supported"".  I found point in code where bug is happends. It is ConsumesRequestCondition.matchMediaType(..).  ```java MediaType contentType = StringUtils.hasLength(request.getContentType()) ?      MediaType.parseMediaType(request.getContentType()) :      MediaType.APPLICATION_OCTET_STREAM; return getMediaType().includes(contentType); ```  There method request.getContentType() always return null. It happends because MockHttpServletRequest.getContentType() returns value of private field contentType. But MockMvcClientHttpRequestFactory does not set this field. Real Content-Type is contained in headers.  I see two solutions: 1 - MockMvcClientHttpRequestFactory must set value of contentType from headers to field. 2 - MockHttpServletRequest.getContentType() must returns value from headers but not from private field contentType.  Some additional information can be found by stackoverflow link. If my description is unclear I can provide example project.   ---  **Affects:** 3.2.5  **Reference URL:** http://stackoverflow.com/questions/19792160/why-is-my-controller-sending-the-content-type-application-octet-stream/21115627#21115627  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8b35c3ff74347f32194149ec91773c4eb2eb21ea","closed","type: bug,","spring-projects-issues","2014-01-14T07:23:52Z","2014-01-28T13:07:11Z"
"","15586","@CacheEvict should allow multiple key values [SPR-10958]","**[Ashot Golovenko](https://jira.spring.io/secure/ViewProfile.jspa?name=ashotik@gmail.com)** opened **[SPR-10958](https://jira.spring.io/browse/SPR-10958?redirect=false)** and commented  Currently you can evict only one or all elements in a single cache region. Allowing something like  ```java @CacheEvict(value = ""userCache"", key = {""key1"", ""key2""}) ```  would be really handful.   ---  **Affects:** 3.2.4  12 votes, 14 watchers","closed","has: votes-jira,","spring-projects-issues","2013-10-04T05:03:10Z","2016-09-02T12:13:53Z"
"","16343","SpringProperties: the ClassLoader might be null, if class is loaded by the bootstrap class loader [SPR-11721]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-11721](https://jira.spring.io/browse/SPR-11721?redirect=false)** and commented  The `NPE` is here:  ```java ClassLoader cl = SpringProperties.class.getClassLoader(); 			URL url = cl.getResource(PROPERTIES_RESOURCE_LOCATION); ```  The similar issue is here: http://stackoverflow.com/questions/1921238/getclass-getclassloader-is-null-why  ---  **Affects:** 3.2.8, 4.0.3  **Reference URL:** http://stackoverflow.com/questions/23228968  **Issue Links:** - #16013 PreparedStatement#getParameterMetaData() calls may trigger unwanted side effects - #15921 StandardEnvironment's system environment access produces warning with stacktrace on WebSphere - #13653 Improve the performance of BeanInfo lookups in CachedIntrospectionResults - #16402 PropertyEditorRegistrySupport throws ExceptionInInitializerError when on endorsed classpath  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","in: core,","spring-projects-issues","2014-04-22T14:14:07Z","2019-01-11T21:19:48Z"
"","16333","Introduce isAnnotation() in ClassMetadata API [SPR-11711]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-11711](https://jira.spring.io/browse/SPR-11711?redirect=false)** and commented  Currently there is no simple way to check if a scanned class is an `Annotation`: `ClassMetadata` doesn't provide the option to check it. However `StandardClassMetadata` can simply provide it via `Class.isAnnotation()`, and `ClassMetadataReadingVisitor` can populate the value using `Opcodes.ACC_ANNOTATION`.   ---  **Issue Links:** - [INT-3929](https://jira.spring.io/browse/INT-3929) Change IntegrationComponentScanRegistrar to use ClassMetadata.isAnnotation() (_**""is depended on by""**_) - [INT-3376](https://jira.spring.io/browse/INT-3376) Merge Messaging Meta-Annotation Attributes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b4954780aaa7d36e00826b86b269fa60173e901f  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-04-19T08:50:39Z","2016-01-07T18:40:00Z"
"","15867","Typo in Reference Manual about enabling Matrix Variables [SPR-11242]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-11242](https://jira.spring.io/browse/SPR-11242?redirect=false)** and commented  Referemce Manual says  > Note that to enable the use of matrix variables, you must set the removeSemicolonContent property of RequestMappingHandlerMapping to false. By default it is set to false.  But it is really `true` by default: `UrlPathHelper.removeSemicolonContent`   ---  **Affects:** 4.0 GA  **Reference URL:** http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-matrix-variables  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/63d300ac868de3bada09fbd2278cd76cfde182e5, https://github.com/spring-projects/spring-framework/commit/1d47fc6e2da59a56107607c927e35b0dc26cfa1f, https://github.com/spring-projects/spring-framework/commit/618368304176719006ac4053b5fe5e4884ac7c3e","closed","type: task,","spring-projects-issues","2013-12-17T08:04:19Z","2014-01-28T13:07:12Z"
"","15662","NPE in ResolvableType.hasUnresolvableGenerics [SPR-11034]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-11034](https://jira.spring.io/browse/SPR-11034?redirect=false)** and commented  Now Spring Data tests works, but we got another issue:  ``` Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.integration.file.remote.session.SessionFactory org.springframework.integration.sftp.outbound.SftpServerOutboundTests.sessionFactory; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:505) at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:288) ... 45 more Caused by: java.lang.NullPointerException at org.springframework.core.ResolvableType.hasUnresolvableGenerics(ResolvableType.java:368) at org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver.checkGenericTypeMatch(GenericTypeAwareAutowireCandidateResolver.java:103) ```  In this case we ingect to the test class a mock of our generic interface. The `GenericTypeAwareAutowireCandidateResolver#checkGenericTypeMatch` gets `targetType` for this bean from `ResolvableType.forMethodReturnType(rbd.getResolvedFactoryMethod())` as a value:  ``` targetType = {org.springframework.core.ResolvableType@2680}""?"" type = {com.sun.proxy.$Proxy11@2690}""T"" typeProvider = {org.springframework.core.SerializableTypeWrapper$MethodParameterTypeProvider@2691} variableResolver = {org.springframework.core.ResolvableType$DefaultVariableResolver@2692} isResolved = true resolved = null componentType = null ```  and further `#checkGenericTypeMatch` calls `targetType.hasUnresolvableGenerics()`, who ends up with NPE after `resolve()`, which, in turn, does fallback to `null`, because it is resolved and doesn't have a value for `resolved` property. Unfortunately, I can't say which solution should right: do null check, or change something in the `ResolvableType`...  So, I reopen an issue, because the solution doesn't cover all cases  ---  **Affects:** 4.0 RC1  **Issue Links:** - #15632 Autowiring of types narrows with generics does not work  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2013-10-26T08:50:07Z","2019-01-11T19:25:13Z"
"","15658","Potential NPE on result of GenericTypeResolver.resolveTypeArguments [SPR-11030]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-11030](https://jira.spring.io/browse/SPR-11030?redirect=false)** and commented  Spring Data `TypeDiscoverer` invokes:  ```java GenericTypeResolver.resolveTypeArguments(List.class, Iterable.class) ```  and gets the result `Class[]` with one `null` element. Previously `GenericTypeResolver` returned:  ``` [class java.lang.Object] ```  an array with one not null element.  Looks like latests changes to Generic Type resolution breaks something.  ---  **Affects:** 4.0 RC1  **Issue Links:** - #15679 GenericTypeResolver.resolveTypeArguments(…) returns Object for raw types  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1a3ba79071a4e0898ec8d8807ea584ef00bdc3d7","closed","in: core,","spring-projects-issues","2013-10-25T08:19:11Z","2019-01-11T19:24:48Z"
"","15581","LiteralExpression.getValue doesn't propagate 'EvaluationContext' to 'ExpressionUtils' for conversion [SPR-10953]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-10953](https://jira.spring.io/browse/SPR-10953?redirect=false)** and commented  ```java getValue(EvaluationContext context, Class expectedResultType) ```  Does it, but:  ```java getValue(EvaluationContext context, Object rootObject, Class desiredResultType) ```  Doesn't   ---  **Affects:** 3.1.4, 3.2.4, 4.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5d8aa635c63e8bd1c4fd40dc8962ea13c49ed432, https://github.com/spring-projects/spring-framework/commit/686cd79bdd9f18a7c88ad09719f120315456f01f","closed","in: core,","spring-projects-issues","2013-10-02T02:58:52Z","2013-10-31T12:27:56Z"
"","15566","SpEL: Make EvaluationException more informative with Expression [SPR-10938]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-10938](https://jira.spring.io/browse/SPR-10938?redirect=false)** and commented  As far as SpEL is some **runtime** tool, which evaluation result fully depends of provided context (rootObject, variables etc..), it's not enough to see in theStackTrace just a problem, e.g.  > Caused by: java.lang.IllegalArgumentException: Cannot convert value of type [java.util.Date] to required type [int]:  It would be better to see which `Expression` (at least) causes the problem.  In addition, SpEL is some central tool in the Spring Integration, where one `Handler` may evaluate not one expression for one call, but different `Messages` may cause different `EvaluationException`, but with the same expression.  Something similar there is already in the Spring Integration: https://github.com/spring-projects/spring-integration/blob/master/spring-integration-core/src/main/java/org/springframework/integration/util/AbstractExpressionEvaluator.java#L118 But, it would be better, if core `EvaluationException` will provide the same.  ---  **Issue Links:** - #19509 Include expression string in SpelParseException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/014d156f5b7e732ff393b7a21bc98d5ae33d322c","closed","type: enhancement,","spring-projects-issues","2013-09-26T08:05:04Z","2019-01-11T22:10:29Z"
"","15740","Fallback to defaultContentType if nothing more specific and producible has been specified in request [SPR-11114]","**[Armel Bourgon](https://jira.spring.io/secure/ViewProfile.jspa?name=bourgona@gmail.com)** opened **[SPR-11114](https://jira.spring.io/browse/SPR-11114?redirect=false)** and commented  I am developing a web service that supports 2 types of response: json and jsonp. For convenience I want that it responds in json by default.  Here is how I configured my contentNegotiationManager:  ```xml                                                          json=application/json                 jsonp=application/x-javascript                                 ```  and my message converters:  ```xml                                                             application/x-javascript                                         ```  What is interesting is what happen when no ""format"" parameter is defined in the request URL in addition to an Accept Header like this (generated by Firefox):  ``` ""text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"" ```  In this case **ContentNegotiationManager.resolveMediaTypes()** returns:  ``` [text/html, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8] ```  Note that the specified default content type ""application/json"" is not in the list. This is because **ContentNegotiationManagerFactoryBean.afterPropertiesSet()** puts the **ContentNegotiationStrategy** corresponding to the default content type at the end of the strategies list. Then **resolveMediaTypes()** returns the media types returned by the first successful strategy (in this example **HeaderContentNegotiationStrategy**)  Because ""application/json"" is missing on the list returned by **resolveMediaTypes()** when **AbstractMessageConverterMethodProcessor.writeWithMessageConverters()** is called it tries to match the requested media types to the producible ones. In my example:  ``` [application/x-javascript, application/json;charset=UTF-8, application/*+json;charset=UTF-8] ```  ""\*/\*;q=0.8"" and ""application/x-javascript"" are found compatible, as a consequence my **JsonpMessageConvertor** is called and the response is returned in jsonp despite the fact that I set defaultContentType to json.  I don't think it's a bug, defaultContentType is applied only if nothing but \*/\* is defined in the request. Here there are specific content types (html and xml) in the request but none of them is supported, so the first declared producible type is returned.  It would be nice to have a mechanism to fallback to the defaultContentType if nothing more specific (and producible) has been set in the request.  For now I work around the issue by explicitly declaring the json converter before the jsonp one so that json is returned first in the list of producible types:  ```xml                                                                         application/json                                                                                                           application/json                                         ```  One solution I can think of is to modify **ContentNegotiationManager.resolveMediaTypes()** to returned all content types matched by all strategies (sorted with **MediaType.sortBySpecificityAndQuality()**) but I understand that it could slow down **AbstractMessageConverterMethodProcessor.writeWithMessageConverters()**... what do you guys think? I can put together a pull request with this solution if you want.  ---  **Issue Links:** - #20208 Update Spring MVC to allow use of query param as replacement of path extension for content negotiation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/134ceac58e80c8f345e2a2946be8ce5291b60672","closed","type: enhancement,","spring-projects-issues","2013-11-25T00:51:05Z","2019-01-11T19:28:41Z"
"","15980","InvocationTargetException cannot be deserialized by Jackson [SPR-11355]","**[Arlo O'Keeffe](https://jira.spring.io/secure/ViewProfile.jspa?name=arlo)** opened **[SPR-11355](https://jira.spring.io/browse/SPR-11355?redirect=false)** and commented  RemoteInvocationBasedExporter.invoke throws InvocationTargetException (ITE).  Jackson 2.3.0 cannot deserialize ITE since it cannot call initCause(). This is demonstrated in the attached code snippet.  A workaround is to override invokeAndCreateResult to catch ITE explicitly and use the cause for the RemoteInvocationResult.  Is ITE explicitly needed?  If not, one could also make RemoteInvocationResult.recreate easier.  ``` import java.io.IOException; import java.lang.reflect.InvocationTargetException;  import com.fasterxml.jackson.databind.DeserializationFeature; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;  public abstract class Demo {  	public static void main(String[] args) throws IOException { 		ObjectMapper objectMapper = new ObjectMapper(); 		objectMapper.enableDefaultTyping(DefaultTyping.NON_FINAL); 		objectMapper.configure( 		        DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false); 		try { 			throw new InvocationTargetException(new IllegalArgumentException( 			        ""..."")); 		} catch (InvocationTargetException e) { 			Throwable throwable = 			        objectMapper.readValue(objectMapper.writeValueAsString(e), 			                Throwable.class); 			System.out.println(objectMapper.writeValueAsString(throwable)); 		} 	}  }  ```    ---  **Affects:** 4.0 GA  2 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-01-24T04:11:10Z","2019-01-12T02:46:08Z"
"","15961","Inconsistent serializable RemoteInvocation(Result) classes [SPR-11337]","**[Arlo O'Keeffe](https://jira.spring.io/secure/ViewProfile.jspa?name=arlo)** opened **[SPR-11337](https://jira.spring.io/browse/SPR-11337?redirect=false)** and commented  When comparing RemoteInvocation and RemoteInvocationResult the class interface is inconsistent.  RemoteInvocation is a mutable JavaBean with default constructor. RemoteInvocationResult is an immutable JavaBean without default constructor.  This prohibits using the Jackson library to deserialize RemoteInvocationResult. It would be great if RemoteInvocationResult were a mutable JavaBean with default constructor.   ---  **Affects:** 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/84310c8a11d010abb5671692028891e4b61ef7b3  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-01-20T23:48:57Z","2014-01-28T13:07:15Z"
"","16174","Improve StAXSAX bridge [SPR-11549]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-11549](https://jira.spring.io/browse/SPR-11549?redirect=false)** and commented  Upgrading to XMLUnit 1.5 has shown some issues with the Stax SAX bridge found in util.xml. These issues should be fixed.   ---  **Affects:** 4.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f2f355e76c577285fa240f3382c55341e8d635e6","closed","type: enhancement,","spring-projects-issues","2014-03-13T08:03:00Z","2014-03-26T22:34:04Z"
"","15879","XMLEventStreamWriter fails to handle writeEmptyElement() followed by writeAttribute() [SPR-11254]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-11254](https://jira.spring.io/browse/SPR-11254?redirect=false)** and commented  `XMLEventStreamWriter` converts an `XMLStreamWriter` into an `XMLEventWriter`.  However, it fails to handle the following sequence of API calls:  ``` XMLStreamWriter.writeEmptyElement() XMLStreamWriter.writeAttribute() ```  What happens is you get this exception:  ``` Caused by: javax.xml.stream.XMLStreamException: Attribute not associated with any element         at com.sun.xml.internal.stream.writers.XMLStreamWriterImpl.writeAttribute(XMLStreamWriterImpl.java:610)         at com.sun.xml.internal.stream.writers.XMLEventWriterImpl.add(XMLEventWriterImpl.java:164)         at org.springframework.util.xml.XMLEventStreamWriter.writeAttribute(XMLEventStreamWriter.java:126) ```  The problem is that the `XMLEventStreamWriter` implementation seems to think that ""writeEmptyElement"" means ""write element with no attributes"", whereas what it really means is ""write element with no nested content"" (i.e., an element that can be self-closing).  The usage above is explicitly supported by the `XMLStreamWriter` API and in the JDK implementation results in a self-closing tag being emitted -- with or without attributes.  The fix is to keep track of whether the most recent element is self-closing or not.   ---  **Affects:** 3.2.6, 4.0 GA  **Attachments:** - [SPR-11254.txt](https://jira.spring.io/secure/attachment/21558/SPR-11254.txt) (_4.60 kB_)  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","in: core,","spring-projects-issues","2013-12-22T14:49:15Z","2014-01-28T13:07:06Z"
"","15542","ArrayStoreException scanning subclassed enum annotation array with multiple values  [SPR-10914]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-10914](https://jira.spring.io/browse/SPR-10914?redirect=false)** and commented  Spring's class reading code has a bug as follows: when an annotation is encountered where the annotation value has type array of some enum, Spring creates an array having type ""array of X"" where ""X"" is the type of the first encountered enum value. But in cases where the enum values are extensions (subclasses) of the enum type, and there are multiple values in the array, this causes an `ArrayStoreException`, because the array element type is too narrow, being that of the first enum value rather than the overall enum type.  The attached test case demonstrates the problem, for example:  ``` Exception in thread ""main"" java.lang.ArrayStoreException: Bug$BugEnum$2 	at org.springframework.util.ObjectUtils.addObjectToArray(ObjectUtils.java:194) 	at org.springframework.core.type.classreading.RecursiveAnnotationArrayVisitor.visit(AnnotationAttributesReadingVisitor.java:122) 	at org.springframework.core.type.classreading.AbstractRecursiveAnnotationVisitor.visitEnum(AnnotationAttributesReadingVisitor.java:77) 	at org.springframework.asm.ClassReader.a(Unknown Source) 	at org.springframework.asm.ClassReader.a(Unknown Source) 	at org.springframework.asm.ClassReader.a(Unknown Source) 	at org.springframework.asm.ClassReader.a(Unknown Source) 	at org.springframework.asm.ClassReader.accept(Unknown Source) 	at org.springframework.asm.ClassReader.accept(Unknown Source) 	at org.springframework.core.type.classreading.SimpleMetadataReader.(SimpleMetadataReader.java:64) 	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:80) 	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:76) 	at Bug.main(Bug.java:7) ```    ---  **Affects:** 3.2.4  **Attachments:** - [spring10914.tgz](https://jira.spring.io/secure/attachment/21385/spring10914.tgz) (_812.67 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8abe949734414e91e204d14e381be7f922f2dfc3, https://github.com/spring-projects/spring-framework/commit/7500caea523e4232beb8edf3fc3e07e2452dbf03","closed","in: core,","spring-projects-issues","2013-09-13T13:40:48Z","2013-10-31T12:27:56Z"
"","16151","Request Mapping in the Controller with an empty string resolves to a different end point invocation [SPR-11526]","**[Anuj Kathuria](https://jira.spring.io/secure/ViewProfile.jspa?name=adkathuria)** opened **[SPR-11526](https://jira.spring.io/browse/SPR-11526?redirect=false)** and commented  In Spring 3.0, we had a controller class example  'ABCController' (/customer) that has methods has a) `@RequestMapping(value="""")`  --> Creates a customer b) `@RequestMapping(value=""delete/{id}"")`  --> Deletes a customer  When we call the /customer/delete/1234, the URL resolution results in """" getting matched, and the wrong end point (for create) gets invoked.  Spring 3.0 works fine.  ---  **Affects:** 3.1.4","closed","in: web,","spring-projects-issues","2014-03-07T08:15:52Z","2019-01-13T21:00:56Z"
"","15528","AnnotationConfigWebApplicationContext.loadBeanDefinitions ClassNotFoundException ignored [SPR-10900]","**[Anton Oparin](https://jira.spring.io/secure/ViewProfile.jspa?name=mavarazy)** opened **[SPR-10900](https://jira.spring.io/browse/SPR-10900?redirect=false)** and commented  AnnotationConfigWebApplicationContext.loadBeanDefinitions ClassNotFoundException ignored on startup.  It should throw exception, and prevent further context loading, otherwise it's difficult to spot an error, in configuration, and it takes time to figure this out.   --- No further details from [SPR-10900](https://jira.spring.io/browse/SPR-10900?redirect=false)","closed","status: invalid,","spring-projects-issues","2013-09-09T01:39:45Z","2019-01-12T05:26:40Z"
"","15996","NPE if no registered MessageConverter supporting ""application/json"" MIME type [SPR-11370]","**[Anton Moiseev](https://jira.spring.io/secure/ViewProfile.jspa?name=amoiseev)** opened **[SPR-11370](https://jira.spring.io/browse/SPR-11370?redirect=false)** and commented  If I do not register any default MessageConverter by returning false from WebSocketMessageBrokerConfigurer's configureMessageConverters() and do not provide any custom MessageConverter that supports ""application/json"", I get following exception:  ``` java.lang.NullPointerException: null 	at org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler$SessionHeaderPostProcessor.postProcessMessage(SendToMethodReturnValueHandler.java:177) 	at org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(AbstractMessageSendingTemplate.java:134) 	at org.springframework.messaging.simp.SimpMessagingTemplate.convertAndSendToUser(SimpMessagingTemplate.java:160) 	at org.springframework.messaging.simp.SimpMessagingTemplate.convertAndSendToUser(SimpMessagingTemplate.java:151) 	at org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.handleReturnValue(SendToMethodReturnValueHandler.java:139) 	at org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:97) 	at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMatch(AbstractMethodMessageHandler.java:457) 	at org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.handleMatch(SimpAnnotationMethodMessageHandler.java:357) 	at org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.handleMatch(SimpAnnotationMethodMessageHandler.java:71) 	at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMessageInternal(AbstractMethodMessageHandler.java:409) 	at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMessage(AbstractMethodMessageHandler.java:345) 	at org.springframework.messaging.support.ExecutorSubscribableChannel$1.run(ExecutorSubscribableChannel.java:70) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) 	at java.lang.Thread.run(Thread.java:744) ```  Please, find detailed explanation by the provided Reference URL.   ---  **Affects:** 4.0.1  **Reference URL:** http://stackoverflow.com/questions/21390763/how-to-specify-content-type-produced-by-a-handler-in-spring-messaging#comment32342807_21414446","closed","type: bug,","spring-projects-issues","2014-01-29T12:49:27Z","2014-02-18T22:36:52Z"
"","16117","Improve MockHttpServletRequest's compatibility with Servlet 3.1 [SPR-11492]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-11492](https://jira.spring.io/browse/SPR-11492?redirect=false)** and commented  Servlet 3.1 added methods that can be supported by MockHttpServletRequest without having a compile dependency on the 3.1 API:  * `long getContentLengthLong()` on javax.servlet.ServletRequest * `String changeSessionId()` on javax.servlet.HttpServletRequest    ---  **Affects:** 4.0 GA","closed","type: enhancement,","spring-projects-issues","2014-02-27T07:48:16Z","2014-03-26T22:34:08Z"
"","15755","Allow @Controller methods to produce a response with no body and custom headers by returning an HttpHeaders instance [SPR-11129]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-11129](https://jira.spring.io/browse/SPR-11129?redirect=false)** and commented  Currently, a RESTful create method may be implemented something like this:  ``` @RequestMapping(method = RequestMethod.POST, value = """") ResponseEntity create() {     …      HttpHeaders headers = new HttpHeaders();     headers.setLocation(…);      return new ResponseEntity(headers, HttpStatus.CREATED); } ```  I'd like to be able to implement it without having to use `ResponseEntity`:  ``` @RequestMapping(method = RequestMethod.POST, value = """") @ResponseStatus(HttpStatus.CREATED) HttpHeaders create() {     …      HttpHeaders headers = new HttpHeaders();     headers.setLocation(…);              return headers; } ```  It tried this and was a little surprised to learn that it rendered the headers as the body of a x-www-form-urlencoded response:  ``` MockHttpServletResponse:               Status = 201        Error message = null              Headers = {Content-Type=[application/x-www-form-urlencoded], Content-Length=[43]}         Content type = application/x-www-form-urlencoded                 Body = Location=http%3A%2F%2Flocalhost%2Fgames%2F1        Forwarded URL = null       Redirected URL = null              Cookies = [] ```  It's often the case that a create method will be the only place where `ResponseEntity` is needed (see [Ben Hale's RESTful API design example](https://github.com/nebhale/devoxx-2013) for example) so it would be nice for that need to be removed. Secondly, it allows the response status to be declarative making it possible to auto-generate accurate API documentation.  A workaround that enables API documentation generation is to continue using `ResponseEntity` but to duplicate the response status:  ``` @RequestMapping(method = RequestMethod.POST, value = """") @ResponseStatus(HttpStatus.CREATED) ResponseEntity create() {     …      HttpHeaders headers = new HttpHeaders();     headers.setLocation(…);      return new ResponseEntity(headers, HttpStatus.CREATED); } ```    ---  **Affects:** 3.2.5  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-11-27T02:54:11Z","2014-01-28T13:07:07Z"
"","15571","A compiler for SpEL [SPR-10943]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-10943](https://jira.spring.io/browse/SPR-10943?redirect=false)** and commented  SpEL expressions are interpreted, the performance of this is not usually an issue as they are used infrequently. However, more recently use of expressions in Spring XD and Spring Integration has raised the question of improving the performance. The biggest problem being the reflective invocation of methods and reflective access to fields.  Under this issue I want to explore a compiler for SpEL expressions that produces a java class file that implements the expression. If an expression is getting evaluated many many times, it would automatically compile itself and the bytecode version be used from then on. Or if you know you are going to hammer it, you can request it be compiled up front.  There are many dynamic things that happen in SpEL including automatic type conversions.  The first version of the compiler would not attempt to cover all the situations and instead focus on a few simple scenarios that can really benefit from the speedup. So basic property access, method invocation and basic operators.  The basic framework to support these would be extensible to support the other situations over time.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bad74dc836c038b26276d21af8b4147fa66fcbc2, https://github.com/spring-projects/spring-framework/commit/6937eea48a359cb56873d292199ae09d43c65eec, https://github.com/spring-projects/spring-framework/commit/2eeb2e92359381328789585233e54c9bbd41e6dc  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2013-09-26T15:07:04Z","2019-01-13T21:02:25Z"
"","15570","package name starting 'lt' confuses T() reference [SPR-10942]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-10942](https://jira.spring.io/browse/SPR-10942?redirect=false)** and commented  Reported on stack overflow: http://stackoverflow.com/questions/19001303/spring-spel-escape-package-name-in-t-function  The special treatment of lt/eq/ne/etc as alternatives to  T(lt.aaa.bbb.ccc).someMethod()  I think that syntax should be allowed and the lt can be interpreted as either a shorthand for the operator **or** as a id where an id is being expected.  Should investigate other language components impacted by this and try to address them all.   --- No further details from [SPR-10942](https://jira.spring.io/browse/SPR-10942?redirect=false)","closed","in: core,","spring-projects-issues","2013-09-26T14:57:19Z","2019-01-12T16:46:50Z"
"","15612","AnnotationConfigApplicationContext doesn't process @Configuration classes scanned by component scan. [SPR-10984]","**[Andruschuk Borislav](https://jira.spring.io/secure/ViewProfile.jspa?name=borislav.andruschuk)** opened **[SPR-10984](https://jira.spring.io/browse/SPR-10984?redirect=false)** and commented  Let's consider the following case:  ```java @Configuration @ImportResource(""some.xml"") public class SomeClass { ... } ```  in some.xml:  ```  ```  in com.somepackage there's class:  ```java @Configuration public class OtherClass {     @Bean(name=""SomeNewBean"")    public Object getSomeBean(){ ... } } ```  If `AnnotationConfigApplicationContext` is used against first configuration class only (`SomeClass`) I assume last configuration class (`OtherClass`) should be processed as well. However the bean defined inside last configuration class doesn't exist in application context after initialization (refresh).  Some investigation showed that `ConfigurationClassPostProcessor` is not invoked for `OtherClass` therefore any annotations inside class never get processed.  ---  **Affects:** 3.0 GA  **Issue Links:** - [INT-3207](https://jira.spring.io/browse/INT-3207) Ensure Annotation Configuration support for Infrastructure components (_**""is depended on by""**_) - #16345 `@Configuration` imported via `@ImportResource` is not processed (_**""duplicates""**_)  3 votes, 6 watchers","closed","status: duplicate,","spring-projects-issues","2013-10-12T18:28:05Z","2019-01-13T06:57:51Z"
"","15723","Map ""Foreign key constraint violation occurred"" Sybase error code to DataIntegrityViolationException [SPR-11097]","**[Andrew Clemons](https://jira.spring.io/secure/ViewProfile.jspa?name=aclemons)** opened **[SPR-11097](https://jira.spring.io/browse/SPR-11097?redirect=false)** and commented  As described in the ASE documentation (http://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.infocenter.dc00729.1500/html/errMessageAdvRes/BABCCECF.htm), a foreign key violation can result in error code 546 or 547. Currently only 547 is mapped.  This results in the exception being incorrectly translated by the fallback translator.   ---  **Affects:** 3.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c3907cdae5a63b6822aaa3a177ad0d991f57fafa, https://github.com/spring-projects/spring-framework/commit/2d2226baf60f44ff730e09de5b25cd0da91074fc  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)","closed","type: enhancement,","spring-projects-issues","2013-11-18T17:32:49Z","2013-12-11T23:57:20Z"
"","16353","Declaring the same aspect with the same ID twice using aop:aspect results in double proxying [SPR-11731]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-11731](https://jira.spring.io/browse/SPR-11731?redirect=false)** and commented  If I consider the scenario where two xml configuration files are used to create a ClassPathXmlApplicationContext or one of the xml files imports the other and used to create a ClassPathXmlApplicationContext and these two config files contain the exact same aop:aspect definition, the result of the proxying mechanisms is that the advice is applied twice.  As an example, consider the following configuration being present in the two configuration files:  ```xml                                       ```  or the same aspect defined twice in the same aop:config tag:  ```xml         		 			 			 		                   			 			 		 	 ```  even if the aspect has the same id, Spring ignores the id and creates two instances of AspectJPointcutAdvisor, giving them names as it would give names to internal beans: org.springframework.aop.aspectj.AspectJPointcutAdvisor#0 and org.springframework.aop.aspectj.AspectJPointcutAdvisor#1.  I would have expected Spring to create only one aspect with id ""abc"" and any subsequent definitions of the same aspect to override previous ones, just like it happens with the regular \s.   ---  **Affects:** 3.2.8, 4.0.3","closed","status: bulk-closed,","spring-projects-issues","2014-04-23T23:19:56Z","2019-01-14T05:16:35Z"
"","15742","Cannot autowire qualified scoped-proxy @Bean definitions [SPR-11116]","**[Andreas Höhmann](https://jira.spring.io/secure/ViewProfile.jspa?name=ahoehma)** opened **[SPR-11116](https://jira.spring.io/browse/SPR-11116?redirect=false)** and commented  The old bug spr-5911 was fixed but since spring added support for java based configuration (`@Configuration`, `@Bean`) the same problem still exists (I guess).  I can't autowire qualified `@Bean`'s.   ---  **Affects:** 3.2.3, 3.2.5  **Reference URL:** https://jira.springsource.org/browse/SPR-5911  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2a6c6424082cce9f243e3985b27db6dedf963987, https://github.com/spring-projects/spring-framework/commit/c5d797736ba5fc098472d5cfeb24321a75316cc7, https://github.com/spring-projects/spring-framework/commit/6bed18004e631f2bf268ae12b08c31a1b3494db7, https://github.com/spring-projects/spring-framework/commit/8580d2d19edcd10d0e0f4f45e482cc366cef4517  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)","closed","type: bug,","spring-projects-issues","2013-11-25T07:42:00Z","2019-01-11T19:28:53Z"
"","15989","SpringContexts not properly closed after test-class is finished [SPR-11363]","**[Andreas Eternach](https://jira.spring.io/secure/ViewProfile.jspa?name=andreas.eternach)** opened **[SPR-11363](https://jira.spring.io/browse/SPR-11363?redirect=false)** and commented  Hello,  i have two test classes:  First testclass: derived from class AbstractTestNGSpringContextTests, uses annotation `@EnableSpringConfigured`  Second testclass: plain TestNG-Test without spring context, tries to instantiate a `@Configurable-annotated-class`  Maven runs the testcases in the order given above. When the second testclass is run and the `@Configurable-annotated-class` is constructed, a NoSuchBeanDefinitionEception is thrown.  I assume that the spring-context of the first testclass is not automatically destroyed.  Further investigation showed: 1. adding `@DiritiesContext` to the first testclass resolves the problem. 2. running AnnotationBeanConfigurerAspect.aspectOf().destroy() before the second test-class is executed resolves the problem.  Best Regards, Andreas  ---  **Affects:** 3.2.6  **Issue Links:** - #10789 Dependency injection of `@Configurable` objects should work across test suites (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2014-01-28T02:37:58Z","2019-01-13T06:56:13Z"
"","15555","Typo on spring mvc reference docs : 'ContentNeogitatingViewResolver' [SPR-10927]","**[Andi Rustandi Djunaedi](https://jira.spring.io/secure/ViewProfile.jspa?name=andird)** opened **[SPR-10927](https://jira.spring.io/browse/SPR-10927?redirect=false)** and commented  * go to http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html * search for the typo : ContentNeogitatingViewResolver    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/371d25558172311f3f8e8c46271917c9a5b96331, https://github.com/spring-projects/spring-framework/commit/c82d701a4ebcb06e1575d185f264fd2740f12796","closed","type: bug,","spring-projects-issues","2013-09-19T02:25:57Z","2013-10-31T12:27:53Z"
"","15654","ConcurrentModificationException in AbstractAutowireCapableBeanFactory.determineConstructorsFromBeanPostProcessors [SPR-11026]","**[Anders Wallgren](https://jira.spring.io/secure/ViewProfile.jspa?name=anders)** opened **[SPR-11026](https://jira.spring.io/browse/SPR-11026?redirect=false)** and commented  This exception is thrown intermittently, usually during application startup when more than one thread is loading beans.  ``` Caused by: java.util.ConcurrentModificationException         at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:819)         at java.util.ArrayList$Itr.next(ArrayList.java:791)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineConstructorsFromBeanPostProcessors(AbstractAutowireCapableBeanFactory.java:997)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:973)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:487)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)         at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:353)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1053)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:949)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:487)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198)         at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1121) ```    ---  **Affects:** 3.2.4","closed","in: core,","spring-projects-issues","2013-10-23T14:22:52Z","2019-01-11T19:26:27Z"
"","15805","Annotation Formatters not supported in Model Attributes [SPR-11179]","**[Anders Steiner](https://jira.spring.io/secure/ViewProfile.jspa?name=andidev)** opened **[SPR-11179](https://jira.spring.io/browse/SPR-11179?redirect=false)** and commented  Annotation formatters, e.g. `@NumberFormat` and `@DateTimeFormat`, is not applied when used on `@Model` attributes.  For example the following model attribute in a controller does not get formatted as an iso date:  ```java @ModelAttribute(""currentDate"") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) public DateTime getCurrentDate() {     return new DateTime(); } ```    ---  **Affects:** 3.2.5","closed","status: bulk-closed,","spring-projects-issues","2013-12-05T12:18:32Z","2019-01-12T00:20:53Z"
"","16276","NPE in AbstractMessageSendingTemplate when headers are null and converter returns null [SPR-11653]","**[Anders Schuller](https://jira.spring.io/secure/ViewProfile.jspa?name=andersschuller)** opened **[SPR-11653](https://jira.spring.io/browse/SPR-11653?redirect=false)** and commented  When `AbstractMessageSendingTemplate.convertAndSend` is called with null headers and a payload that the converter cannot convert (i.e. `converter.toMessage` also returns null), the code attempts to throw a `MessageConversionException` but a `NullPointerException` occurs instead as the exception message attempts to get the content type from the null headers.  The relevant bit of code from [AbstractMessageSendingTemplate](https://github.com/spring-projects/spring-framework/blob/master/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessageSendingTemplate.java#L139):  ``` MessageHeaders messageHeaders = (headers != null) ? new MessageHeaders(headers) : null; Message message = this.converter.toMessage(payload, messageHeaders);  if (message == null) { 	String payloadType = (payload != null) ? payload.getClass().getName() : null; 	throw new MessageConversionException(""Unable to convert payload type '"" 			+ payloadType + ""', Content-Type="" + messageHeaders.get(MessageHeaders.CONTENT_TYPE) 			+ "", converter="" + this.converter, null); } ```  This bit of code was added with [this commit](https://github.com/spring-projects/spring-framework/commit/da369aa8266c96d2fea635e39d5b5145b9e3d2ec), which I believe means `AbstractMessagingTemplate.convertSendAndReceive` is also affected. The fix is probably as easy as making the content type a separate variable where the headers can be null-checked, similar to how `payloadType` is declared.  ---  **Affects:** 4.0.2, 4.0.3  **Issue Links:** - #16094 Support Mutable Messages with optional ID and timestamp headers","closed","type: bug,","spring-projects-issues","2014-04-03T07:24:45Z","2019-01-11T21:04:16Z"
"","16018","MvcUriComponentsBuilder does not expand path variables in controller-level @RequestMapping [SPR-11391]","**[Amr Mostafa](https://jira.spring.io/secure/ViewProfile.jspa?name=amr.mostafa)** opened **[SPR-11391](https://jira.spring.io/browse/SPR-11391?redirect=false)** and commented  ``` @RequestMapping(""/user/{userId}/contacts"") class UserContactController {     @RequestMapping(""/create"")     @ResponseBody     public String showCreate(@PathVariable Integer userId) {         return MvcUriComponentsBuilder.fromMethodName(UserContactController.class, ""showCreate"", userId).build().getPath();     } } ```  Assuming this is running in a servlet mapped at ""/"", then requesting: http://localhost/user/123/contacts/create is expected to output:  `/user/123/contacts/create`  But the actual output is:  `/user/{userId}/contacts/create`  If we change the code to the following:  ``` class UserContactController {     @RequestMapping(""/user/{userId}/contacts/create"")     @ResponseBody     public String showCreate(@PathVariable Integer userId) {         return MvcUriComponentsBuilder.fromMethodName(UserContactController.class, ""showCreate"", userId).build().getPath();     } } ```  Then the expected result is displayed.  ---  **Affects:** 4.0 GA, 4.0.1","closed","type: bug,","spring-projects-issues","2014-02-05T07:14:07Z","2019-01-13T21:01:22Z"
"","16127","SpringBeanELResolver - setValue throws PropertyNotWritableException [SPR-11502]","**[Amit](https://jira.spring.io/secure/ViewProfile.jspa?name=table1)** opened **[SPR-11502](https://jira.spring.io/browse/SPR-11502?redirect=false)** and commented  I am trying to upgrade spring from 3.2.1 to 4.0.2 which requires us to use \ instead of \ (it was deprecated from quite sometime). The upgrade throws an PropertyNotWritableException after using SpringBeanFacesELResolver. The exception is thrown by the setValue() method which checks if the requested bean is present in the BeanFactory. If found, a PropertyNotWritableException is thrown. I would like to understand the root cause of the exception which is not clear from its implementation.  ``` public void setValue(ELContext elContext, Object base, Object property, Object value) throws ELException { 		if (base == null) { 			String beanName = property.toString(); 			BeanFactory bf = getBeanFactory(elContext); 			if (bf.containsBean(beanName)) { 				throw new PropertyNotWritableException( 						""Variable '"" + beanName + ""' refers to a Spring bean which by definition is not writable""); 			} 		} 	} ```  The setValue() implementation doesn't set the value but just do a check. On debugging I found the value of beanName, value and property refer to the same backing bean. Does that cause the issue? If so why?   ---  **Affects:** 3.2.2  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: bug,","spring-projects-issues","2014-03-03T04:58:56Z","2014-03-26T22:34:04Z"
"","16016","Spring 3.2.2+ on GlassFish 3.1 leads to IllegalArgumentException: PWC2788: setAttribute: Non-serializable attribute [SPR-11389]","**[Amit](https://jira.spring.io/secure/ViewProfile.jspa?name=table1)** opened **[SPR-11389](https://jira.spring.io/browse/SPR-11389?redirect=false)** and commented  While upgrading spring from 3.2.1 to 4.0.1, we replaced SpringBeanVariableResolver to SpringBeanFacesELResolver since it was removed  ```                    org.springframework.web.jsf.el.SpringBeanFacesELResolver  ```  The application works as expected with spring 3.2.1 jars but setting an attribute in the session fails with the below error if we upgrade spring to 4.0.1  ``` java.lang.IllegalArgumentException: PWC2788: setAttribute: Non-serializable attribute with name ```  I am using glassfish 3.1.2.2 (build 5) Any inputs?  ---  **Affects:** 3.2.2, 4.0.1  **Reference URL:** https://www.java.net/node/689993  **Issue Links:** - #14829 SpringServletContainerInitializer do annotation scan even if metadata-complete=""true"" in web.xml - #15794 web-application crashing when setting a non-serializable object into session - #14852 Tomcat Session Replication not working with Spring 3.2","closed","in: core,","spring-projects-issues","2014-02-05T03:47:34Z","2019-01-12T16:35:26Z"
"","16009","Upgrading spring from 3.2 to 4 - Issue with generics (extends) [SPR-11382]","**[Amit](https://jira.spring.io/secure/ViewProfile.jspa?name=table1)** opened **[SPR-11382](https://jira.spring.io/browse/SPR-11382?redirect=false)** and commented  I have the below code that worked with spring 3.2 and fails with a ""NoSuchBeanDefinitionException"" on spring 4.0.0.RELEASE  ```     public interface Cacheable {     }      public class TimeUnit implements Cacheable {     }      @Component     public class UserDao {           public void performDBOperation() {             System.out.println(""Executing db operation"");         }     }      @Component     public class UserService {          @Autowired          private UserDao timeUnitUserDao;           public void someService() {              timeUnitUserDao.performDBOperation();          }     } ```  It fails due to generics when I include ``` public class UserDao\  ```in the UserDao class declaration. The complete exception is  ""NoSuchBeanDefinitionException: No qualifying bean of type [spring.generics.UserDao] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier(value=userdao)}""  If the declaration is just ``` public class UserDao ```, it all works.  Any comments/inputs on what should be the fix? ```  ---  **Affects:** 4.0 GA  **Reference URL:** http://stackoverflow.com/questions/21473926/upgrading-spring-from-3-2-to-4-issue-with-generics-extends  **Issue Links:** - #15875 Problem with autowiring of ""generic Beans"" (defined via RootBeanDefinition(s))","closed","in: core,","spring-projects-issues","2014-02-03T02:35:35Z","2019-01-11T19:11:44Z"
"","15707","HandlerInterceptor.postHandle() not called when handler throws exception [SPR-11081]","**[Allard Buijze](https://jira.spring.io/secure/ViewProfile.jspa?name=abuijze)** opened **[SPR-11081](https://jira.spring.io/browse/SPR-11081?redirect=false)** and commented  In our application, we have multiple HandlerInterceptors. One of these interceptors will throw an exception if an illegal ""state of things"" is detected. The result is that on another interceptor, the postHandle is never invoked. Since there is an `@ExceptionResolver`, the exception leads to a view being rendered. The afterCompleted() method on the interceptors therefore has no access to the exception (it is null).  Whether this (the postHandle() not being invoked) is expected behavior or not, is unclear. The (java)documentation doesn't specify it.   ---  1 votes, 2 watchers","closed","status: declined,","spring-projects-issues","2013-11-11T03:06:13Z","2019-01-12T16:35:37Z"
"","16241","CglibAopProxy needs to detect package-visible methods when defined in a different ClassLoader [SPR-11618]","**[Alina Mylka](https://jira.spring.io/secure/ViewProfile.jspa?name=ally)** opened **[SPR-11618](https://jira.spring.io/browse/SPR-11618?redirect=false)** and commented  The `CglibAopProxy.getProxy(ClassLoader classLoader)` method should ignore the `ClassLoader` passed as the parameter and instead use the classloader of the parent class.  Instead of this block of code that starts at line 178 in `CglibAopProxy.java`:  ``` Enhancer enhancer = createEnhancer(); if (classLoader != null) { 	enhancer.setClassLoader(classLoader);	 ```  I think we should have:  ``` Enhancer enhancer = createEnhancer(); enhancer.setClassLoader(proxySuperClass.getClassLoader()); ```  I have an .ear app. I deploy it on Websphere using the Module classloader policy. This means that classes from JARs that live directly in the lib folder of the .ear are loaded by the ""application classloader"". Additionally, each .war has its own classloader. Classes that live in the .war files are loaded by the .war classloaders. When requests are processed, the .war classloader is set as the context classloader of the thread that processes the request.  I'm attaching a maven project that generates such an .ear. When you build it and deploy it on Websphere with the Module Classloader Policy, and then go to http://localhost:9080/multiclassloader/index.xhtml - you'll get a null pointer exception coming from the PhaseListener. The session-scoped bean, gets processed, the CGLIB proxy of the bean class is generated, but the proxy doesn't work. In the debugger, it looks especially weird:  ``` @Component @Scope(value = ""session"", proxyMode = ScopedProxyMode.TARGET_CLASS) public class SynchronizerTokenState implements Serializable {     private Map visitedTokenMap; 	public SynchronizerTokenState(){visitedTokenMap = new HashMap();}     Map getVisitedTokenMap() {         return visitedTokenMap;     } } ```  ... but the `visitedTokenMap` is NULL.  I debugged it a little and it seems that the problem is very similar to the one described on stack overflow. The hack suggested over there as the workaround doesn't seem to work for me though. The description of the behavior fits: the proxy is generated using the context classloader of the thread that processes the request, which is the .war classloader.  http://stackoverflow.com/questions/11574049/cglib-with-spring-throws-illegalaccesserror  AFAIU cglib proxies will simply not work if they are generated in a different classloader than the one used by the proxied class.  When I made the suggested fix, and installed a modified version of Spring to my local maven repo: both the trivial app I'm attaching and the real app I'm working on started functioning properly, with both classloader policies. The unit tests of the Spring build seem to pass.  ---  **Affects:** 4.0.2, 4.0.3  **Attachments:** - [2014-03-28 10_18_07-Proxy-NPE.png](https://jira.spring.io/secure/attachment/21899/2014-03-28+10_18_07-Proxy-NPE.png) (_21.77 kB_) - [multiclassloader.zip](https://jira.spring.io/secure/attachment/21897/multiclassloader.zip) (_16.35 kB_)  **Issue Links:** - #15733 ""CglibAopProxy: Unable to proxy method"" WARN when bean class contains static final method - #22032 Illegal reflective access operation warning for toString() on CGLIB proxies - #19997 Revisit CGLIB AOP proxy warnings for final methods - #19917 Clarification: Spring AOP pointcuts match protected methods when CGLIB is used  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/90309ab0b5c5cc3b406825fd3f9db730db03ad36, https://github.com/spring-projects/spring-framework/commit/d9cb44527c1f06d6055b805446a38c8817981aaf","closed","type: enhancement,","spring-projects-issues","2014-03-28T01:49:58Z","2019-01-11T21:07:14Z"
"","16242","different kinds of illegal Accept header are treated differently [SPR-11619]","**[Alexey Semenov](https://jira.spring.io/secure/ViewProfile.jspa?name=alsem)** opened **[SPR-11619](https://jira.spring.io/browse/SPR-11619?redirect=false)** and commented  The background is as follows. We use API versioning in Accept header, so content negotiation process is important for our application.  We have an exception handler which extends ResponseEntityExceptionHandler and returns custom-made GenericError objects for the errors. All the API responses should be JSON.  Given a controller with only method constraints (no 'produces' or 'consumes' conditions), currently Spring MVC behaves as follows.  - For a request with incorrect method, and invalid, but parsable Accept (e.g. ""application/invalid"") it returns the correct JSON response with 405 Method Not Allowed.  - For a request with incorrect method AND unparsable by MediaType Accept header (e.g. ""INVALID"") it returns 405 Method Not Allowed but in HTML format.  Expected behaviour: the response should be the same, regardless of how invalid the Accept value is, and formatted as JSON. I'll give more details about the discovered reasons for the current behaviour and my workarounds below in a comment.   ---  **Affects:** 4.0.3","closed","status: bulk-closed,","spring-projects-issues","2014-03-28T05:07:20Z","2019-01-12T00:20:41Z"
"","15869","Remove 'throws' declaration from the UrlResource.getURL() method. [SPR-11244]","**[Alexey Pomelov](https://jira.spring.io/secure/ViewProfile.jspa?name=apomelov)** opened **[SPR-11244](https://jira.spring.io/browse/SPR-11244?redirect=false)** and commented  UrlResource.getURL declares throwing a checked exception (IOException), but does not throw it actually. Removing this declaration will simplify client code (removing redundant try-catch block, exception propagation and comment ""should not happen"").   --- No further details from [SPR-11244](https://jira.spring.io/browse/SPR-11244?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-12-18T03:16:27Z","2019-01-12T02:46:29Z"
"","16232","Referencing static field of class that extends Map in expression language causes class cast exception [SPR-11609]","**[Alexei Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=alexei_osipov)** opened **[SPR-11609](https://jira.spring.io/browse/SPR-11609?redirect=false)** and commented  Referencing static field of class that extends Map in expression language causes class cast exception.  Example:  ```java public class A {     public static final int X = 1; }  public class B extends HashMap {     public static final int X = 1; } ```  Expression ``` #{T(com.example.A).X}  ```resolves into value *1* (as expected).  Expression ``` #{T(com.example.B).X} ``` throws class cast exception:  ```  Caused by: org.springframework.beans.factory.BeanExpressionException: Expression parsing failed; nested exception is java.lang.ClassCastException: java.lang.Class cannot be cast to java.util.Map at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:146) at org.springframework.beans.factory.support.AbstractBeanFactory.evaluateBeanDefinitionString(AbstractBeanFactory.java:1364) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.evaluate(BeanDefinitionValueResolver.java:211) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:183) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedMap(BeanDefinitionValueResolver.java:375) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:162) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1456) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1197) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537) ... 20 more Caused by: java.lang.ClassCastException: java.lang.Class cannot be cast to java.util.Map at org.springframework.context.expression.MapAccessor.canRead(MapAccessor.java:38) at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:198) at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:85) at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:43) at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:346) at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:85) at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:102) at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:94) at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:143) ... 28 more  ``` ```  ---  **Affects:** 3.2.8, 4.0.2  **Issue Links:** - #14494 SpEL: static access via the type function fails if the class implements Map (_**""is duplicated by""**_)  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","in: core,","spring-projects-issues","2014-03-26T11:22:13Z","2019-01-11T21:08:19Z"
"","15918","StandardPortletEnvironment does not implement ConfigurableWebEnvironment [SPR-11294]","**[Alexandre FILLATRE](https://jira.spring.io/secure/ViewProfile.jspa?name=afillatre)** opened **[SPR-11294](https://jira.spring.io/browse/SPR-11294?redirect=false)** and commented  The StandardPortletEnvironment class does not implements the ConfigurableWebEnvironment interface. It seems legit because Portlets are web-based.  Because of that, latest Spring versions cannot be used with Grails to develop Portlets.   ---  **Affects:** 3.1.2, 3.2.6  **Reference URL:** http://forum.spring.io/forum/other-spring-related/grails/742924-standardportletenvironment-and-configurablewebenvironment","closed","type: enhancement,","spring-projects-issues","2014-01-08T02:15:53Z","2018-11-30T20:46:56Z"
"","16165","Support of ehcache's BlockingCache [SPR-11540]","**[Alexander Zagumennikov](https://jira.spring.io/secure/ViewProfile.jspa?name=zgmnkv)** opened **[SPR-11540](https://jira.spring.io/browse/SPR-11540?redirect=false)** and commented  Hi I tried to use spring cache api in a web project, but unfortunately I faced with concurrency issues.  The task was to make 'blocking' cache. It means when multiple threads simultaneously try to access cache, only one thread loads data from storage, other threads wait for this thread, and once data is loaded, all threads return it. I think it's a common task for most web projects.  I haven't found anything about cache behavior in multithread environment in spring documentation, so spring has no cache synchronizations and when multiple threads access cache, they will be passed to cache back-end, and load data from storage multiple times (if back-end has no synchronization).  In spring context xml:  ```xml ...                                                    ... ```  ehcache.xml:  ```xml        ```  SomeCache.java:  ```java public class SomeCache {      @Cacheable(""someCache"")     public String findResult(String id) {         System.out.println(""start find result"");          try {             Thread.sleep(10000);         } catch (InterruptedException e) {             throw new RuntimeException(e);         }          System.out.println(""end find result"");         return ""result"";     } } ```  In mvc controller:  ```java ...         for (int i = 0; i < 10; ++i) {             new Thread(new Runnable() {                 public void run() {                     System.out.println(""before find result"");                     someCache.findResult(""id"");                     System.out.println(""after find result"");                 }             }).start();         } ... ```  Result:  ``` before find result before find result before find result before find result before find result before find result before find result before find result before find result before find result start find result start find result start find result start find result start find result start find result start find result start find result start find result start find result end find result end find result end find result end find result end find result end find result end find result end find result end find result end find result after find result after find result after find result after find result after find result after find result after find result after find result after find result after find result ```  As we can see - no synchronization, cachable methods enters multiple times.  Second approach was to configure cache back-end - EhCache in my case - to synchronize access to storage. I configured EhCache to use BlockingCache decorator, and it seemed to work fine, except of one fatal issue: if exception is thrown during data loading, BlockingCache will never release the lock (it is meant that caller should put null to cache on exception).  So, spring cache facade does not support that case. EhCache also provides SelfPopulatingCache decorator that does exception handling stuff, but again spring does not support it because it requires CacheEntryFactory to be passed in constructor.  ehcache.xml:  ```xml                      ```  BlockingCacheDecoratorFactory.java:  ```java package test;  import net.sf.ehcache.Ehcache; import net.sf.ehcache.constructs.CacheDecoratorFactory; import net.sf.ehcache.constructs.blocking.BlockingCache;  import java.util.Properties;  public class BlockingCacheDecoratorFactory extends CacheDecoratorFactory {      @Override     public Ehcache createDecoratedEhcache(Ehcache cache, Properties properties) {         return new BlockingCache(cache);     }      @Override     public Ehcache createDefaultDecoratedEhcache(Ehcache cache, Properties properties) {         return new BlockingCache(cache);     } } ```  Result:  ``` before find result before find result before find result before find result before find result before find result before find result before find result before find result before find result start find result end find result after find result after find result after find result after find result after find result after find result after find result after find result after find result after find result ```  Seems fine, but what if we have an exception?  SomeCache.java:  ```java package test;  import org.springframework.cache.annotation.Cacheable;  public class SomeCache {      @Cacheable(""someCache"")     public String findResult(String id) {         System.out.println(""start find result"");          throw new IllegalStateException();     } }  ```  Result:  ``` before find result before find result before find result before find result before find result before find result before find result before find result before find result before find result start find result Exception in thread ""Thread-36"" java.lang.IllegalStateException         at test.SomeCache.findResult(SomeCache.java:11)         at test.SomeCache$$FastClassByCGLIB$$96e26c72.invoke()         at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)         at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:701)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)         at org.springframework.cache.interceptor.CacheInterceptor$1.invoke(CacheInterceptor.java:58)         at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:211)         at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:66)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)         at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:634)         at test.SomeCache$$EnhancerByCGLIB$$dc1816.findResult()         ...         at java.lang.Thread.run(Thread.java:722) ```  And if we try to call it second time:  ``` before find result before find result before find result before find result before find result before find result before find result before find result before find result before find result ```  Only one thread exited with exception, others are deadlocked.  Details about ehcache behavior here: http://ehcache.org/apidocs/net/sf/ehcache/constructs/blocking/BlockingCache.html#get(java.lang.Object) http://grepcode.com/file/repo1.maven.org/maven2/net.sf.ehcache.internal/ehcache-core/2.7.4/net/sf/ehcache/constructs/blocking/SelfPopulatingCache.java#SelfPopulatingCache.get%28java.lang.Object%29  As a result - I can't use spring caching facade with annotations to make a blocking cache.  I see two ways to resolve the situation: 1. Support EhCache BlockingCache decorator - put null on exception, don't know if this could be achieved in general way, not affecting other cache back-ends. 2. Implement blocking cache in spring - it is better approach in my opinion. In this case we will have blocking cache with any back-end.  Related issues: #14222 #13892 #13942  ---  **Affects:** 4.0.2  **Issue Links:** - #13942 Provide some synchronization between `@Cacheable` and `@CacheEvict` annotated methods - #13892 Provide means to configure multithreaded access for cache abstraction - #14222 Documentation does not explain how `@Cacheable` and `@CacheEvict` behave in a multi-threaded environment - #13913 Cache Abstraction Exception Handling  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aaae10ce3bc096711e16154880f0565a15912bd2  1 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2014-03-12T01:38:35Z","2019-01-14T05:17:10Z"
"","15868","Doc: JDK 1.7.0_45: Component scan not working in jar files with manifest attributes [SPR-11243]","**[Alexander Vitkovskiy](https://jira.spring.io/secure/ViewProfile.jspa?name=avitkovs)** opened **[SPR-11243](https://jira.spring.io/browse/SPR-11243?redirect=false)** and commented  Component scan not working at all.  This problem can be seen with any Spring version with Java 1.7.0_45+. Now it requiring entries in manifest for the security reasons (see. http://www.oracle.com/technetwork/java/javase/7u45-relnotes-2016950.html)  Most likely it is because the following changes in Java (Spring just can scan classes for annotations in classpath):  ""Code in a JAR file that is to be marked with the Trusted-Library manifest attribute may need to be modified slightly if it uses calls that are class loader dependent, such as the single parameter version of Class.forName(), Class.getResource(), and Class.getResourceAsStream(), some variants of java.util.ResourceBundle.getBundle(), and any other methods that operate relative to their immediate caller's defining loader. Changes only need to be made if the requested class or resource might be found in a JAR file that is not a Trusted-Library (and is therefore loaded by the normal Web Start or applet class loader).""  from http://docs.oracle.com/javase/7/docs/technotes/guides/jweb/manifest.html#trusted_library  My workaround for now is just put all `@Components` classes as beans in the applicationcontext.xml    ---  **Affects:** 4.0 GA  **Attachments:** - [bug_demo.zip](https://jira.spring.io/secure/attachment/21555/bug_demo.zip) (_14.96 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/50dfa037d005639a871b804da2488b74b466db25  1 votes, 4 watchers","closed","type: task,","spring-projects-issues","2013-12-17T23:29:43Z","2014-01-28T13:07:19Z"
"","15770","Error in Spring Boot reference manual section 11.1.2: Using your own parent POM [SPR-11596]","**[Alexander McLachlan](https://jira.spring.io/secure/ViewProfile.jspa?name=alex%20mc.)** opened **[SPR-11596](https://jira.spring.io/browse/SPR-11596?redirect=false)** and commented  In the spring boot reference manual in section 11.1.2 (Using your own parent pom) the configuration of the \ element needs to have \pom\ added for it to work correctly:  \ 	\ 		\ 			\org.springframework.boot\ 			\spring-boot-starter-parent\ 			\1.0.0.RC5\ 			\import\ 			\pom\ 		\ 	\ \   --- No further details from [SPR-11596](https://jira.spring.io/browse/SPR-11596?redirect=false)","closed","status: invalid,","spring-projects-issues","2014-03-25T08:57:21Z","2019-01-12T05:26:27Z"
"","15664","MatrixVariables do not work [SPR-11036]","**[Alexander Czar](https://jira.spring.io/secure/ViewProfile.jspa?name=alexczar)** opened **[SPR-11036](https://jira.spring.io/browse/SPR-11036?redirect=false)** and commented  Matrix Variables do not work in versions beyond 3.2.2 (e.g. 3.2.3, 3.2.4, 3.2.5 snapshot). I created a project on GitHub which illustrates the issue. The project is attached as URL reference to this report.  ---  **Affects:** 3.2.4  **Reference URL:** https://github.com/AlexCzar/MatrixVarsFail  **Issue Links:** - #15955 Improve documentation explaining how to enable MatrixVariable in Spring MVC","closed","status: declined,","spring-projects-issues","2013-10-28T04:11:43Z","2019-01-12T16:35:45Z"
"","16290","Incorrect link in documentation [SPR-11667]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-11667](https://jira.spring.io/browse/SPR-11667?redirect=false)** and commented  The documentation refers to a wrong section (see '???'):  ``` [...] demonstrates how to configure STOMP support in Spring. ??? explains how to use [...] ```    ---  **Affects:** 4.0.3  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html","closed","type: task,","spring-projects-issues","2014-04-07T08:22:18Z","2014-05-01T01:36:44Z"
"","16288","Support WAMP messaging protocol [SPR-11665]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-11665](https://jira.spring.io/browse/SPR-11665?redirect=false)** and commented  WAMP is a popular messaging protocol that implements both RPC and the Publish/Subscribe pattern.  It would be very useful to have native Spring support for it, so to make easier to migrate from python code and/or for integration.  ---  **Affects:** 4.0.3  **Reference URL:** http://wamp.ws/spec/  **Issue Links:** - #17182 Add MQTT over WebSocket support  4 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2014-04-05T06:31:36Z","2019-01-14T05:16:48Z"
"","16033","Regression in transaction rollback handling [SPR-11406]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-11406](https://jira.spring.io/browse/SPR-11406?redirect=false)** and commented  In spring 4, the handling of transaction boundaries between function call has changed considerably and code that worked fine in 3.x now stopped working.  Here is an example where a user function in a service throws an exception when a certain condition is met (in this case when the object is not found in the database).  The caller catches the exception and goes on but the transaction has already been rollback and the subsequent write on the database fails.  A proof of concept follows, where a rest service is called and this method use a service that raises an exception when the requested object is not found.  The repository is just a plain default spring-jpa repository.  ``` @RestController @RequestMapping(""/test"") @Transactional public class TestController {   @Autowired   private userRepository userRepository;   @Autowired   private TestService testService;    @RequestMapping(""/newUser/{name}"")   public User testNewUser(@PathVariable String name) {     try {       testService.findUser(name);       logger.debug(""user already exists: "" + name);       return null;     } catch (UserNotFoundException ex) {     }     User user = new User();     user.setName(name);     userRepository.save(user);     return user;   } } ```  ``` @Service @Transactional public class TestService {    @Autowired   private userRepository userRepository;    public User findUser(String name) {     User user = userRepository.findByName(name);     if (user == null)       throw new UserNotFoundException(name);     return user;   }  } ```    ---  **Affects:** 4.0 GA, 4.0.1","closed","status: declined,","spring-projects-issues","2014-02-09T02:09:01Z","2019-01-13T06:55:58Z"
"","15935","Wrong example in documentation [SPR-11311]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-11311](https://jira.spring.io/browse/SPR-11311?redirect=false)** and commented  I'm trying to understand how spring STOMP implementation works, and following the example in section 20.4.2 (enable STOMP over websocket), I put this fragment in my XML config file:  ```                      ```  The example is syntactically incorrect because of the closed websocket:stomp-endpoint tag:  ```  ```  that should be instead:  ```  ```  The problem is that even correcting that error my app does not start and I get this error:  ``` Offending resource: ServletContext resource [/WEB-INF/root-context.xml]; nested exception is org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 28 in XML document from ServletContext resource [/WEB-INF/mvc.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 28; columnNumber: 30; cvc-complex-type.2.4.b: The content of element 'websocket:message-broker' is not complete. One of '{""http://www.springframework.org/schema/websocket"":stomp-endpoint, ""http://www.springframework.org/schema/websocket"":simple-broker, ""http://www.springframework.org/schema/websocket"":stomp-broker-relay}' is expected. ```    ---  **Affects:** 4.0 GA  **Reference URL:** http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/htmlsingle/  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/809a5f59b3531f4dc774e0f5620d274412e51b08","closed","type: task,","spring-projects-issues","2014-01-14T09:04:42Z","2014-01-28T13:07:07Z"
"","15905","Improve error reporting for issues related to @Controller types requiring AOP proxing [SPR-11281]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-11281](https://jira.spring.io/browse/SPR-11281?redirect=false)** and commented  I've a class marked with `@RestController` annotation that works fine.  But if this class implements the ApplicationEventPublisherAware interface his methods can't be called any more with the following error:  ``` javax.servlet.ServletException: No adapter for handler [xxx.AdmController@66b714dd]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler 	org.springframework.web.servlet.DispatcherServlet.getHandlerAdapter(DispatcherServlet.java:1144) 	org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:923) 	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:876) 	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:931) 	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:822) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:621) 	org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:807) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:728) 	org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ```  ---  **Affects:** 4.0 GA  **Issue Links:** - #16043 Ignore container callback and marker interfaces for auto-proxy decisions  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-01-02T14:40:30Z","2019-01-11T18:37:49Z"
"","16169","Permission denied when using queryForRowSet from a view [SPR-11544]","**[Alex Panayotopoulos](https://jira.spring.io/secure/ViewProfile.jspa?name=alexpanayotopoulos)** opened **[SPR-11544](https://jira.spring.io/browse/SPR-11544?redirect=false)** and commented  This seems to happen only in very specific circumstances -- when there is a table foo in database db1, and a view bar in database db2, which selects data from db1.foo. Additionally, the DB user has permissions on db2.bar, but not db1.foo.  Attempting to use JdbcTemplate#queryForRowSet to query from db2.bar leads to an error as follows:  com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: SELECT command denied to user 'theuser'@'localhost' for table 'bar'  Digging into the code a little, this seems to be caused by the use of Sun's somewhat buggy CachedRowSetImpl, at least on Java 6. No idea if Java 7 exhibits the same problem.  Workarounds include replacing the view with a table, giving the user SELECT permissions on db1.foo, or moving both objects into the same database.  Environment: Linux Debian Wheezy Java 1.6.0_27; OpenJDK IcedTea6 1.12.6 MySQL Ver 14.14 Distrib 5.1.51   ---  **Affects:** 3.0.6","closed","status: declined,","spring-projects-issues","2014-03-12T01:59:04Z","2019-01-12T16:35:15Z"
"","16206","getTypeForFactoryBean triggers unwanted bean instantiation with Spring Boot and Mybatis [SPR-11582]","**[Alex Miller](https://jira.spring.io/secure/ViewProfile.jspa?name=alex.miller@alfresco.com)** opened **[SPR-11582](https://jira.spring.io/browse/SPR-11582?redirect=false)** and commented  While using spring-boot with mybatis-spring, my application was failing to start due to spring boots datasource not be configured prior to instantiation.  Stepping through the code, when spring boots ConfigurationPropertiesBindingPostProcessor tries to find property sources, the mybatis mappers are being instantiated, rather than their factories. This appears to be because AbstractBeanFactory.getTypeForFactoryBean(String, RootBeanDefinition) is calling doGetBean, which strips the factory bean prefix.   ---  **Affects:** 4.0.2  **Attachments:** - [SPR-11582.zip](https://jira.spring.io/secure/attachment/21831/SPR-11582.zip) (_5.20 kB_)  8 votes, 14 watchers","closed","status: invalid,","spring-projects-issues","2014-03-20T04:05:08Z","2019-01-12T05:26:08Z"
"","15710","Can't build project using gradlew on Windows 7 x64 [SPR-11084]","**[Alex Freeman](https://jira.spring.io/secure/ViewProfile.jspa?name=gao)** opened **[SPR-11084](https://jira.spring.io/browse/SPR-11084?redirect=false)** and commented  Windows 7 x64 JDK 7.0.25 x64 (or JDK 7.0.45 x64)  JDK installation: C:\Java\jdk725 or default c:\Program Files\Java\jdk1.7.0_25\  UAC enabled or disabled  ---  gradlew build (after gradlew) ... :referenceHtmlMulti FAILED  FAILURE: Build failed with an exception.  * What went wrong:   Execution failed for task ':referenceHtmlMulti'.  > Failed to compile stylesheet. 59 errors detected.  * Try:   Run with --info or --debug option to get more log output.   ...  ... * Exception is:   org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':referen   ceHtmlMulti'.   at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.ex   ecuteActions(ExecuteActionsTaskExecuter.java:69)   at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.ex   ecute(ExecuteActionsTaskExecuter.java:46)   ..   at org.gradle.wrapper.WrapperExecutor.execute(WrapperExecutor.java:130)   at org.gradle.wrapper.GradleWrapperMain.main(GradleWrapperMain.java:48)   Caused by: javax.xml.transform.TransformerConfigurationException: Failed to comp   ile stylesheet. 59 errors detected.   at com.icl.saxon.PreparedStyleSheet.prepare(PreparedStyleSheet.java:136)   at com.icl.saxon.TransformerFactoryImpl.newTemplates(TransformerFactoryI   mpl.java:127)   at com.icl.saxon.TransformerFactoryImpl.newTransformer(TransformerFactor   yImpl.java:79)   ..   at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.ex   ecuteAction(ExecuteActionsTaskExecuter.java:80)   at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.ex   ecuteActions(ExecuteActionsTaskExecuter.java:61)   ... 70 more  BUILD FAILED  ---  **Affects:** 3.2.4, 3.2.5","closed","","spring-projects-issues","2013-11-11T10:37:30Z","2019-01-13T21:02:01Z"
"","15772","ServletContextAware beans are not processed if tests are executed programmatically [SPR-11145]","**[Aleksandr Dubinsky](https://jira.spring.io/secure/ViewProfile.jspa?name=almson)** opened **[SPR-11145](https://jira.spring.io/browse/SPR-11145?redirect=false)** and commented  If I launch my integration tests manually using JUnit 4.11:  ``` TextListener listener = new TextListener(System.out); JUnitCore junit = new JUnitCore(); junit.addListener(listener);                  junit.run( /* ... test classes annotated with @WebAppConfiguration ... */ ); ```  Then `ServletContextAware` beans declared in the `@ContextConfiguration` of those test classes do not have their `setServletContext()` methods called.  However, the correct behavior is observed when running the same tests in a Maven build.  ---  #### Secondary Proposal  I think I'll mention it here instead of opening an _Enhancement_ issue, but I require being able to set the baseResourcePath programmatically (which I've been doing in 3.1 by configuring my own ServletContextAwareProcessor bean with a MockServletContext), and it does not seem that the new `@WebAppConfiguration` infrastructure offers this functionality.  ---  **Affects:** 3.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a521ef5ceeef5f4eae76b2667fede1aa4464a392","closed","in: test,","spring-projects-issues","2013-12-04T01:40:37Z","2019-01-13T06:57:14Z"
"","15771","ServletTestExecutionListener breaks old code [SPR-11144]","**[Aleksandr Dubinsky](https://jira.spring.io/secure/ViewProfile.jspa?name=almson)** opened **[SPR-11144](https://jira.spring.io/browse/SPR-11144?redirect=false)** and commented  The Javadoc for `ServletTestExecutionListener` says:  > Note that `ServletTestExecutionListener` is enabled by default but takes no action if the `ApplicationContext` loaded for the current test is not a `WebApplicationContext`.  However, this is not true. The `afterTestMethod()` method calls `RequestContextHolder.resetRequestAttributes()` _without_ checking for the presence of a `WebApplicationContext`. This breaks old test code simply by upgrading to Spring 3.2, and it is difficult for a user to ascertain why.  ---  **Issue Links:** - #16249 Servlet mocks are not reinjected into test instance between TestNG test methods  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)","closed","type: bug,","spring-projects-issues","2013-12-04T01:29:14Z","2019-01-11T19:37:10Z"
"","15967","Reduce footprint due to RootBeanDefinition [SPR-11343]","**[AdiB](https://jira.spring.io/secure/ViewProfile.jspa?name=adib)** opened **[SPR-11343](https://jira.spring.io/browse/SPR-11343?redirect=false)** and commented  Related to #12149 RootBeanDefinition members (externallyManagedConfigMember, externallyManagedInitMethods,externallyManagedDestroyMethods) are initialized even if not in use. Setting ConcurrentHashMap initial size as 0 is not good enough it still allocates a map with ~ 10 empty elements.  Should delay the initialization.  For example -      public void registerExternallyManagedConfigMember(Member configMember) {         if (externallyManagedConfigMembers == null){             externallyManagedConfigMembers = new ConcurrentHashMap(0);         }     	this.externallyManagedConfigMembers.put(configMember, Boolean.TRUE);     }          public boolean isExternallyManagedConfigMember(Member configMember) {         if (externallyManagedConfigMembers == null){             return false;         }     	return this.externallyManagedConfigMembers.containsKey(configMember);     }  ---  **Affects:** 3.2.6, 4.0 GA  **Issue Links:** - #12149 Reduce footprint due to BeanDefinitions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d9ab6aaf6c8e6eeb67c623e193a0d64b2aecb0fc, https://github.com/spring-projects/spring-framework/commit/a599b57a74d84d0959aac6019af5fe99de25b69b  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-01-21T22:48:59Z","2019-01-11T19:00:16Z"
"","16024","Support @Transactional on TestNG @BeforeClass methods in the TestContext framework [SPR-11397]","**[Adib Saikali](https://jira.spring.io/secure/ViewProfile.jspa?name=asaikali)** opened **[SPR-11397](https://jira.spring.io/browse/SPR-11397?redirect=false)** and commented  When using the Spring TestContext Framework with TestNG it is not possible to annotate a TestNG `@BeforeClass` method with `@Transactional` and have it executed with a Spring-managed transaction, as depicted in the example below.  ``` @ContextConfiguration(""/test.xml"") public class TransactionalTest extends AbstractTransactionalTestNGSpringContextTests {      @BeforeClass     @Transactional     public void setupDB() {         // the following assert fails because there is no active transaction.         assertThat(TransactionSynchronizationManager.isActualTransactionActive()).isTrue();          // do some stuff that needs a tx     } } ```  With the current implementation of `AbstractTransactionalTestNGSpringContextTests` it is possible to refer to any autowired variable within an `@BeforeClass` method. It seems that by the the time `@BeforeClass` method is invoked Spring is fully initialized and therefore _any_ `@Transactional` method should be working. It feels counter-intuitive that `@Transactional` and `@BeforeClass` in TestNG don't work with each other. As an aside, I understand why JUnit's `@BeforeClass` does not work with `@Transactional`.  One of the primary reasons for using TestNG over JUnit is that TestNG makes writing integration tests easier because of the way `@BeforeClass` works in TestNG. So in many integration testing scenarios it is possible that an `@BeforeMethod` method needs to read data from JPA or do some other prep work for the test that is `@Transactional`.  Can you please make `@BeforeClass` and `@Transactional` work together for TestNG?  In the meantime I have sent a [pull request](https://github.com/spring-projects/spring-framework/pull/456) on GitHub to update the docs so that they at least warn users that `@BeforeClass` and `@Transactional` don't work with each other.  ---  **Affects:** 3.0 GA  **Issue Links:** - #10191 Execute all test methods in a class within the same transaction - #16026 Improve documentation of transactional support in the TestContext framework","closed","type: enhancement,","spring-projects-issues","2014-02-05T17:09:54Z","2019-01-11T19:11:21Z"
"","15580","MimeMessageHelper Should have setTo(String email, String personal) method for consistency [SPR-10952]","**[Adib Saikali](https://jira.spring.io/secure/ViewProfile.jspa?name=asaikali)** opened **[SPR-10952](https://jira.spring.io/browse/SPR-10952?redirect=false)** and commented  MimeMessageHelper contains variations of setFrom and SetReply that take a string email address and a string presonal that is the name associtaed with the email address. However, there is no setTo method that takes a personal parameter.  ``` public void setReplyTo(InternetAddress replyTo) throws MessagingException { 	Assert.notNull(replyTo, ""Reply-to address must not be null""); 	validateAddress(replyTo); 	this.mimeMessage.setReplyTo(new InternetAddress[] {replyTo}); }  public void setReplyTo(String replyTo) throws MessagingException { 	Assert.notNull(replyTo, ""Reply-to address must not be null""); 	setReplyTo(parseAddress(replyTo)); }  public void setReplyTo(String replyTo, String personal) throws MessagingException, UnsupportedEncodingException {         Assert.notNull(replyTo, ""Reply-to address must not be null"");         InternetAddress replyToAddress = (getEncoding() != null) ? 				new InternetAddress(replyTo, personal, getEncoding()) : new InternetAddress(replyTo, personal); 	setReplyTo(replyToAddress); 	}  ```  code below can just be cut and pasted into MimeMessageHelper  ``` public void setTo(String to, String personal) throws MessagingException, UnsupportedEncodingException {         Assert.notNull(to, ""to address must not be null"");         InternetAddress toAddress = (getEncoding() != null) ? 				new InternetAddress(to, personal, getEncoding()) : new InternetAddress(to, personal); 	setTo(toAddress); ```    ---  **Affects:** 3.1 GA, 3.2 GA","closed","status: bulk-closed,","spring-projects-issues","2013-10-01T12:16:45Z","2019-01-12T00:22:14Z"
"","16155","Clojure dynamic language support  [SPR-11530]","**[Adan Scotney](https://jira.spring.io/secure/ViewProfile.jspa?name=adan)** opened **[SPR-11530](https://jira.spring.io/browse/SPR-11530?redirect=false)** and commented  Adding Clojure support to the set of dynamic languages supported by Spring for defining beans would be very useful. I have been trying to inject business logic written in Clojure into existing code, but at present this is quite messy since I've had to define something roughly equivalent to the MethodInvokingFactoryBean to actually get objects from Clojure.   ---  2 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-03-08T02:53:51Z","2019-01-12T02:45:31Z"
"","16118","NPE in AbstractDispatcherServletInitializer when two Filter's are of the same type [SPR-11493]","**[Adam J. Weigold](https://jira.spring.io/secure/ViewProfile.jspa?name=aweigold)** opened **[SPR-11493](https://jira.spring.io/browse/SPR-11493?redirect=false)** and commented  Children of the AbstractDispatcherServletInitializer class provide Filter[] via the getServletFilters() method.  The initializer passes that list in registerDispatcherServlet() to registerServletFilter().  registerServletFilter then derives a filter name with the Conventions class.  This can cause failures when using the same Filter class, as the same filter name will be derived, for example the following implementation will fail:  ``` @Override protected Filter[] getServletFilters(){   return new Filter[] {     new DelegatingFilterProxy(""springSecurityFilterChain""),     new DelegatingFilterProxy(""someOtherCustomFilter"")   }; } ```  With Tomcat (I have not tried other containers), the servlet context will return a null Dynamic on the repeated addFilter, causing an NPE in the Spring AbstractDispatcherServletInitializer.  I have a pull request that will allow a user to specify a map of filter name to filter.  This should allow workarounds that will provide end users cleaner override options.   ---  **Affects:** 3.2 GA, 4.0.2","closed","type: bug,","spring-projects-issues","2014-02-27T16:19:56Z","2014-03-26T22:34:07Z"
"","15693","SpEL: Union operator [SPR-11066]","**[Adam Augusta](https://jira.spring.io/secure/ViewProfile.jspa?name=roxton)** opened **[SPR-11066](https://jira.spring.io/browse/SPR-11066?redirect=false)** and commented  Model: Set\ Order: Set\  As far as I can tell, there is no expression that will return a collection of all LineItem objects under the root object.  orders.![lineItems] returns a collection of collections.  I propose a .* operator, that would return a union of the evaluated collections/elements. orders.*[lineItems]  My current workaround is to register a union operator with the evaluation context: #union(orders.![lineItems])  This approach gets a little messy with additional levels.   --- No further details from [SPR-11066](https://jira.spring.io/browse/SPR-11066?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-11-04T12:26:09Z","2019-01-12T00:21:16Z"
"","15552","ExceptionHandler and converter [SPR-10924]","**[Acacio Macedo Cintra](https://jira.spring.io/secure/ViewProfile.jspa?name=acacio.cintra@gmail.com)** opened **[SPR-10924](https://jira.spring.io/browse/SPR-10924?redirect=false)** and commented  When the controller capture a exception and return a `ModelAndView` with a attr Date annotated with `@DateTimeFormat(pattern = ""dd/MM/yyyy"")` the application not formatter the value to rendered.  Steps: 1. Send to form with input date 2. In controller send exception with bean received.  Form used:  ```  	 	 	  ```    ---  **Affects:** 3.2.2, 3.2.4  **Attachments:** - [Captura de Tela 2013-09-17 às 20.18.59.png](https://jira.spring.io/secure/attachment/21391/Captura+de+Tela+2013-09-17+a%CC%80s+20.18.59.png) (_36.02 kB_) - [TestController.java](https://jira.spring.io/secure/attachment/21390/TestController.java) (_1.86 kB_)","closed","status: declined,","spring-projects-issues","2013-09-17T16:21:21Z","2019-01-12T16:35:51Z"
"","16171","Provide @ModelAttribute(required=""false"") for session attributes [SPR-11546]","**[Abhishek](https://jira.spring.io/secure/ViewProfile.jspa?name=abhisheksharma)** opened **[SPR-11546](https://jira.spring.io/browse/SPR-11546?redirect=false)** and commented  I think there is a need to implement  required=""false"" in ModelAttribute interface. There may be situation where you are using it to get session attributes which may or may not be present. Presently ModelAttribute impose that all attributes asked for must be present else it throws an exception  ""org.springframework.web.HttpSessionRequiredException: Expected session attribute 'zzzzz' ""  In the absence of this developer is left to use HttpServletRequest to find a workaround to this problem  ---  **Affects:** 4.0.2  **Issue Links:** - #10050 `@SessionParam` or `@SessionAttribute` Annotation for passing a Session Attribute to a Controller - #11801 Improve the way we access to Session attributes - #19212 Allow `@PathVariable` to be optional - #18468 Convenient access to session and request attributes in controller methods (_**""is superseded by""**_)  2 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-03-12T09:33:07Z","2019-01-13T06:55:10Z"
"","16337","Auto-proxy creation should not consider GroovyObject as a user-specified interface [SPR-11715]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-11715](https://jira.spring.io/browse/SPR-11715?redirect=false)** and commented  Groovy application with JSR-303 bean validation. Configured `MethodValidationPostProcessor` and `LocalValidatorFactoryBean` in groovy `beans` along with other beans. Application fails to start due to DI failure for beans using JSR-303 validation. Relevant classes below. Actually using `4.0.4.BUILD-SNAPSHOT` but JIRA won't let me choose that.  ``` Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private name.abhijitsarkar.moviedatabase.service.rip.MovieRipService name.abhijitsarkar.moviedatabase.service.facade.MovieFacade.movieRipService; nested exception is java.lang.IllegalArgumentException: Can not set name.abhijitsarkar.moviedatabase.service.rip.MovieRipService field name.abhijitsarkar.moviedatabase.service.facade.MovieFacade.movieRipService to com.sun.proxy.$Proxy50 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289) 	... 31 more ```  [service-config.groovy](https://github.com/abhijitsarkar/groovy/blob/master/movie-database/movie-database-service/src/main/config/service-config.groovy)  ``` beans {     ...     validator(LocalValidatorFactoryBean)      methodValidationPostProcessor(MethodValidationPostProcessor) {         validator = ref('validator')     } } ```  [MovieRipService.groovy](https://github.com/abhijitsarkar/groovy/blob/master/movie-database/movie-database-service/src/main/groovy/name/abhijitsarkar/moviedatabase/service/rip/MovieRipService.groovy)  ``` @Service @Validated class MovieRipService {     ...     Collection getMovieRips(             @ValidDirectory(message = 'Movie directory is not valid.') String movieDirectory) {     ...     } ```  [MovieFacade.groovy](https://github.com/abhijitsarkar/groovy/blob/master/movie-database/movie-database-service/src/main/groovy/name/abhijitsarkar/moviedatabase/service/facade/MovieFacade.groovy)  ``` @Service class MovieFacade {     @Autowired     MovieRipService movieRipService ```  ---  **Affects:** 3.2.8, 4.0.3  **Issue Links:** - #19047 Mis-proxying of Mockito mock and poor diagnostics for type mismatch on proxy injection","closed","type: enhancement,","spring-projects-issues","2014-04-21T21:20:52Z","2019-01-11T21:19:24Z"
"","16254","Provide first class support for Groovy context loading in tests [SPR-11631]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-11631](https://jira.spring.io/browse/SPR-11631?redirect=false)** and commented  There is no support for reading Groovy config files in tests without writing a custom ContextLoader. The default `@ContextConfiguration` tries to interpret Groovy files as XMLs. I have created a bare bone ContextLoader for supporting Groovy config. I'm interested in submitting a pull request but see that the [CONTRIBUTING.md](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING.md) asks that I create a JIRA first.  **GroovyContextConfiguration.java**  ``` /**  * Class-level annotation that is used to determine how to load and configure an  * ApplicationContext for integration tests. Similar to the standard  * {@link org.springframework.test.context.ContextConfiguration} but uses  * {@link GenericGroovyContextLoader}.  *  * @author Abhijit Sarkar  * @see GenericGroovyContextLoader  */ @ContextConfiguration(loader = GenericGroovyContextLoader.class) @Documented @Inherited @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) public @interface GroovyContextConfiguration {      /**      * @see ContextConfiguration#locations()      */     String[] locations() default {};      /**      * @see ContextConfiguration#classes()      */     Class[] classes() default {};      /**      * @see ContextConfiguration#initializers()      */     Class","closed","type: enhancement,","spring-projects-issues","2014-03-30T11:36:33Z","2019-01-11T21:06:38Z"
"","16251","SpringApplicationContextLoader ignores Application class [SPR-11628]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-11628](https://jira.spring.io/browse/SPR-11628?redirect=false)** and commented  The SpringApplicationContextLoader assumes that the application is either using 100% XML or 100% Java config. This is because `@ContextConfiguration` allows either a list of classes or locations/value, not both. If any is specified, SpringApplicationContextLoader ignores the Application class that creates and starts the SpringApplication.  Trying to make Boot work with a 100% Groovy/no-XML pet project, I ran across the above issue. My Application class has `@EnableAutoConfiguration` and `@ComponentScan` annotations on it, the former required by Boot to set up a Web server. The later I had to keep because of #16250. On the other hand, if I omitted the locations/value on `@ContextConfiguration`, dependencies weren't set up (duh!).  I give the code below along with a patch that I locally made to SpringApplicationContextLoader.  **MovieDatabaseRESTClientIntegrationTest.groovy**  ``` RunWith(SpringJUnit4ClassRunner) @ContextConfiguration(value = ['classpath:client-config.groovy', 'classpath:integ-test-config.groovy'],         loader = PatchedSpringApplicationContextLoader) @SpringApplicationConfiguration(classes = MovieDatabaseApplication) @WebAppConfiguration @IntegrationTest class MovieDatabaseRESTClientIntegrationTest { ```  **MovieDatabaseApplication.groovy**  ``` @EnableAutoConfiguration @ComponentScan class MovieDatabaseApplication { ```  **SpringApplicationContextLoader.java fix**  ``` private Set getSources(MergedContextConfiguration mergedConfig) {         Set sources = new LinkedHashSet();         sources.addAll(Arrays.asList(mergedConfig.getClasses()));         sources.addAll(Arrays.asList(mergedConfig.getLocations()));          /* The Spring application class may have annotations on it too. If such a class is declared on the test class,         * add it as a source too. */         SpringApplicationConfiguration springAppConfig = AnnotationUtils.findAnnotation(mergedConfig.getTestClass(),                 SpringApplicationConfiguration.class);          if (springAppConfig != null) {             sources.addAll(Arrays.asList(springAppConfig.classes()));         }          if (sources.isEmpty()) {             throw new IllegalStateException(                     ""No configuration classes or locations found in @SpringApplicationConfiguration. ""                             + ""For default configuration detection to work you need Spring 4.0.3 or better (found ""                             + SpringVersion.getVersion() + "")."");         }         return sources;     } ```  ---  **Affects:** 4.0.3  **Reference URL:** http://forum.spring.io/forum/spring-projects/boot/746963-springapplicationcontextloader-ignores-application-class","closed","in: core,","spring-projects-issues","2014-03-30T01:44:13Z","2019-01-12T16:35:07Z"
"","16250","GroovyDynamicElementReader tries to read a Groovy script as XML and fails [SPR-11627]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-11627](https://jira.spring.io/browse/SPR-11627?redirect=false)** and commented  GroovyDynamicElementReader  tries to read a Groovy script as XML and fails.  ```java beans {     xmlns([ctx:'http://www.springframework.org/schema/context'])     ctx.'component-scan'('base-package':'name.abhijitsarkar.moviedatabase') } ```  ``` Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Failed to read XML document; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Unable to determine validation mode for [Groovy]: cannot open InputStream. Did you attempt to load directly from a SAX InputSource without specifying the validationMode on your XmlBeanDefinitionReader instance?; nested exception is java.io.FileNotFoundException: Groovy cannot be opened because it does not point to a readable resource     at org.springframework.beans.factory.xml.XmlReaderContext.readDocumentFromString(XmlReaderContext.java:98)     at org.springframework.beans.factory.xml.XmlReaderContext$readDocumentFromString.call(Unknown Source)     at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)     at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)     at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)     at org.springframework.beans.factory.groovy.GroovyDynamicElementReader.invokeMethod(GroovyDynamicElementReader.groovy:96) ```  ---  **Affects:** 4.0.3  **Reference URL:** http://forum.spring.io/forum/spring-projects/boot/746962-groovydynamicelementreader-tries-to-read-a-groovy-script-as-xml-and-fails  **Issue Links:** - #15858 Support Groovy scripts for bean definitions in the TestContext framework","closed","in: core,","spring-projects-issues","2014-03-30T01:24:12Z","2019-01-12T16:35:08Z"
"","16098","Missing documentation on how to set up JSR-303 method validation [SPR-11473]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-11473](https://jira.spring.io/browse/SPR-11473?redirect=false)** and commented  The part of the reference manual that talks about integration with JSR-303 conveniently omits two things, without which BV does not kick in. 1. A MethodValidationPostProcessor needs to be configured in addition to the LocalValidatorFactoryBean. 2. The class to be validated must have a `@Validated` annotation on it else methods are NOT searched for inline constraint annotations.  This just caused me 6 hours of debugging and hair tearing where I did everything the doc said but BV would simply not kick in. I finally had to debug through the Spring source code to understand this. There got to be an easier way and I can't be the only one who had this problem.   ---  **Affects:** 4.0.2  **Reference URL:** http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/validation.html  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9af7d2646bd44a51c45f63ce649b1990da48e7bb","closed","type: documentation,","spring-projects-issues","2014-02-22T22:35:33Z","2014-03-26T22:34:00Z"
"","497","Update WebSocket engines support documentation","","closed","","sdeleuze","2014-03-25T12:56:31Z","2014-03-25T15:08:28Z"
"","494","Expand SockJS documentation","","closed","","rstoyanchev","2014-03-24T03:14:29Z","2014-06-25T10:54:00Z"
"","469","removed repeated 'multiple' word in comment","","closed","","petrukhnov","2014-02-24T13:17:35Z","2014-02-24T18:49:46Z"
"","465","3.2.x","","closed","","wjkiss000","2014-02-17T15:39:30Z","2014-02-18T05:42:02Z"
"","460","Create Test.java","","closed","","zhangclong","2014-02-10T09:25:15Z","2014-06-25T11:04:38Z"
"","457","fix log spelling typo","","closed","","mebigfatguy","2014-02-07T00:59:31Z","2014-07-28T19:38:00Z"
"","420","3.2.1","","closed","","lehoon","2013-11-26T06:41:19Z","2013-12-04T19:28:53Z"
"","414","UPDATE","","closed","","xuechong87","2013-11-19T02:31:46Z","2014-06-25T11:02:48Z"
"","410","Update STOMP decoder to handle incomplete frames","","closed","","wilkinsona","2013-11-13T10:52:54Z","2014-06-20T12:13:15Z"
"","401","add to test","","closed","","mezhou887","2013-11-03T15:44:17Z","2013-11-03T15:44:39Z"
"","400","Update overview.html","","closed","","mezhou887","2013-11-03T15:32:14Z","2014-06-15T20:40:40Z"
"","394","3.2.x","","closed","","sxkolanupaka","2013-10-28T06:21:06Z","2013-10-28T06:50:21Z"
"","383","3.2.x","","closed","","freexiao","2013-10-14T00:49:00Z","2013-10-18T17:13:02Z"
"","373","Make the broker relay heartbeat intervals configurable","","closed","","wilkinsona","2013-10-02T14:19:23Z","2013-10-02T21:26:00Z"
"","372","Introduce new HEARTBEAT message type","","closed","","wilkinsona","2013-10-02T14:18:08Z","2013-10-02T21:25:13Z"
"","369","3.2.x","","closed","","xiaofengchen","2013-10-02T09:28:46Z","2013-10-11T00:19:13Z"
"","356","3.1.x","","closed","","nitinsha","2013-09-19T15:39:29Z","2014-06-24T21:49:46Z"
"","353","Fix typo.","","closed","","tan9","2013-09-12T14:08:19Z","2013-09-12T14:31:07Z"