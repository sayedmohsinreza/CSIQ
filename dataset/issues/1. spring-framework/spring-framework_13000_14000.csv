"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","664","Merge pull request #1 from spring-projects/master","更新最新代码","closed","","ghost","2014-10-20T02:46:23Z","2014-10-20T02:46:31Z"
"","663","Merge pull request #1 from spring-projects/master","更新最新代码","closed","","ghost","2014-10-20T02:40:00Z","2014-10-20T02:41:31Z"
"","554","Add a compiler for SpEL","With these changes an optional compiler is added for SpEL expressions. The compiler is off by default but can be enabled via the SpEL parser configuration object or system property (when SpEL is embedded and parser configuration is not possible). Not all expressions are currently handled but the common cases are and it is an extensible compilation framework.  Issue: SPR-10943","closed","","aclement","2014-06-04T19:33:47Z","2014-07-14T08:38:36Z"
"","671","Fix First invocation of org.springframework.core.task.AsyncListenableTaskExecutor executes in same thread as caller","With relation to SPR-12358, as Juergen Hoeller and Sébastien Deleuze commented in the Spring JIRA, adding a special delay time in the executor looks enough. We can think that the thread in the AsyncTaskExecutor will call callback method. But if a developer puts pretty much time spending code block between AsyncTaskExecutor's submitListenable and ListenableFuture's addCallback, that will not be enough. It might be the same problem. So I slightly changed ListenableFutureCallbackRegistry.java in order to run a callback in a new thread when AsyncTask is already finished. At least this will prevent being blocked.  Issue: SPR-12358  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","in: core,","MoonJongMin","2014-10-23T00:12:47Z","2021-11-19T11:51:30Z"
"","708","Fixed default HandlerMappings in javadoc.","Why the default HandlerMappings are BeanNameUrlHandlerMapping and SimpleUrlHandlerMapping in javadoc? I find BeanNameUrlHandlerMapping and DefaultAnnotationHandlerMapping in DispatcherServlet.properties.","closed","","xiaolongzuo","2014-12-13T19:42:32Z","2014-12-31T13:21:04Z"
"","563","Expose exception as request attribute when calling sendError","When sending an error response, expose the encountered exception as a ""org.springframework.web.util.WebUtils.EXCEPTION"" request attribute.  This request attribute is similar to the standard servlet ""javax.servlet.error.exception"" request attribute, but is more flexible since the response won't be automatically handled by the servlet container as an INTERNAL_SERVER_ERROR error page.  Issue: SPR-11686","closed","","sdeleuze","2014-06-22T01:46:05Z","2021-04-28T09:55:43Z"
"","582","Modified the way to decode request parameter of flush map","When save the FlushMap to the flush scope, modified to decode a request parameters using the java.net.URLDecoder#decode method.  Issue: SPR-SPR-11821  Please review this PR and if OK, merge to master branch. I hope backport to 3.2.x branch.","closed","","kazuki43zoo","2014-07-06T00:42:45Z","2014-07-06T00:44:30Z"
"","584","Modified the way to decode request parameter of flush map","When save the FlushMap to the flush scope, modified to decode a request parameters using the java.net.URLDecoder#decode method.  Issue: SPR-11821  Please review this PR and if OK, merge to master branch. I hope backport to 3.2.x branch.","closed","","kazuki43zoo","2014-07-06T07:45:55Z","2014-07-07T20:39:52Z"
"","583","Modified the way to decode request parameter of flush map","When save the FlushMap to the flush scope, modified to decode a request parameters using the java.net.URLDecoder#decode method.  Issue: SPR-11821  Please review this PR and if OK, merge to master branch. I hope backport to 3.2.x branch.","closed","","kazuki43zoo","2014-07-06T00:47:58Z","2014-07-06T07:34:17Z"
"","586","Modified the way to encode the request parameter to redirect","When create the redirect target url in RedirectView, modified to encode the request parameters using the UriUtils#encodeQueryParam method.  Issue: SPR-11821  Please review this PR and if OK, merge to master branch. I hope backport to 3.2.x branch.","closed","","kazuki43zoo","2014-07-07T21:48:16Z","2015-10-12T19:03:13Z"
"","533","Skip Java immutable objects in session when processing the accessed attributes","We can skip immutable value objects in #updateAccessedSessionAttributes() when populating potential changes for session management. This is good optimization when the session is full of values. Do less serialization and I/O (sometimes none).  Issue: SPR-11738","closed","","sorra","2014-04-26T08:10:13Z","2014-07-05T05:17:48Z"
"","682","In, AutowireUtils.sortConstructors(), Using valueOf is faster than using constructor","Using valueOf is approximately 3.5 times faster than using constructor  Because Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM.  So, I changed source like(70line) this return (new Integer(c1pl)).compareTo(c2pl) \* -1; ==> return (Integer.valueOf(c1pl)).compareTo(c2pl) \* -1;","closed","","overmindx","2014-10-28T10:58:27Z","2014-10-28T11:39:26Z"
"","585","Add support to reference external HandlerMethodArgumentResolver beans","Users can now mix and match between ""inner bean"" argument resolver and ""external bean"" argument resolvers. This commit only focuses only on argument-resolver, while the support could be extended to return value handlers as well.   Issue: SPR-11927","closed","","aemruli","2014-07-06T20:31:05Z","2014-07-09T19:13:48Z"
"","629","Use putIfAbsent in CachedIntrospectionResults","Use putIfAbsent in CachedIntrospectionResults to avoid writing to the map. This change results in less volatile field updates increasing get performance (which is far more common).  See SPR-12102","closed","","candrews","2014-08-19T20:54:19Z","2014-08-19T21:10:27Z"
"","643","Fix enum detection in GenericConversionService","Use Enum.class.isAssignableFrom(type) in preference to type.isEnum(), since the latter returns false for enum subclasses. This was causing EnumToStringConverter not to be matched and resulted in the enum's toString() being used instead of name().  Issue: SPR-12181  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","nigelzor","2014-09-11T19:07:54Z","2014-09-12T15:24:08Z"
"","697","Add undertow 1.1.0.Final support","Upgrade undertow dependency to 1.1.0.Final. Add support for undertow 1.1.0.Final in the UndertowRequestUpgradeStrategy, after a breaking change in the `io.undertow.websockets.jsr.ConfiguredServerEndpoint` constructor.  Issue: SPR-12302","closed","","bclozel","2014-11-19T10:34:16Z","2015-01-27T13:25:06Z"
"","656","Add hasBeanOfType and hasBeanWithAnnotation methods","Update ListableBeanFactory with additional hasBeanOfType and hasBeanWithAnnotation methods.","closed","","philwebb","2014-10-06T23:21:29Z","2014-12-27T17:39:02Z"
"","665","[SPR-12352,12353] deleted unused import import CollectionUtils class","Unused import import CollectionUtils class is deleted.  For removing raw type warning, I add Object type to Comparable in StandardTypeComparator class.  ISSUE : SPR-12352, SPR-12353","closed","","vincentKim1218","2014-10-20T13:51:01Z","2014-10-20T16:31:12Z"
"","621","Upgrade to Gson 2.3","This release contains the following new features: - The new @JsonAdapter annotation to specify a Json TypeAdapter for a   class field - JsonPath support: JsonParser.getPath() method returns the JsonPath   expression - New public methods in JsonArray (similar to the java.util.List):   contains(JsonElement), remove(JsonElement), remove(int index),   set(int index, JsonElement element) - Many other smaller bug fixes  See: https://groups.google.com/forum/#!topic/google-gson/MOqf5RGtIzk","closed","","royclarkson","2014-08-12T08:46:49Z","2014-08-12T08:53:08Z"
"","675","Update README.md","This is just a test infomation.","closed","","zhaodaping","2014-10-23T14:40:02Z","2014-10-23T14:41:29Z"
"","531","Failing test for SPR-11736 Method signature isn't used for computing the cache key","This is a failing test for https://jira.spring.io/browse/SPR-11736 Method signature isn't used for computing the cache key in SimpleKeyGenerator","closed","","lhotari","2014-04-25T13:26:21Z","2014-04-25T13:59:45Z"
"","641","Modularize Asciidoc","This commit re-modularizes the reference documentation into separate files, just like it was in the DocBook days.","closed","","poutsma","2014-09-04T10:26:14Z","2015-03-06T09:55:08Z"
"","610","Move RequestReplyHeaderMapper to core","This commit moves the RequestReplyHeaderMapper and related base implementation from Spring Integration to the core messaging module.  To prepare the migration of AMQP mappers to the spring-amqp module itself, the priority header value is also now part of the standard headers.","closed","","snicoll","2014-08-01T08:28:32Z","2014-08-08T14:41:47Z"
"","627","Modify isSecure() to reference scheme.","This commit modifies isSecure() in MockHttpServletRequest to reference scheme. Whether secure is true or scheme is ""https"" return true.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","eujungkim","2014-08-19T08:31:00Z","2014-08-28T13:09:46Z"
"","626","Modify getServerName() and getServerPort() to reference ""Host"" header.","This commit modifies getServerName() and getServerPort() in MockHttpServletRequest class to reference ""Host"" header if header is set.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","eujungkim","2014-08-18T11:14:50Z","2014-08-18T22:11:54Z"
"","637","Support port URI template variables","This commit makes it possible to specify port with an URI template variable.  For example : RestTemplate restTemplate = new RestTemplate(); restTemplate.getForObject(""http://localhost:{port}/resource"", String.class, 8080);  Issue: SPR-12123","closed","","sdeleuze","2014-08-28T14:39:21Z","2021-04-28T09:56:06Z"
"","574","Introduce RequestEntity and builder","This commit introduces the RequestEntity, a class similar to ResponseEntity, but meant for HTTP requests rather than responses. The RequestEntity can be used both in RestTemplate as well as @MVC scenarios.  The class also comes with a builder, similar to the one found in ResponseEntity, which allows for building of a RequestEntity through a fluent API.  Issue: SPR-11752","closed","","poutsma","2014-06-30T12:59:54Z","2014-07-01T20:11:16Z"
"","669","Netty support for (Async)RestTemplate","This commit introduces an AsyncClientHttpRequestFactory based on Netty 4, for use with the (Async)RestTemplate.","closed","","poutsma","2014-10-21T12:47:00Z","2014-10-27T18:02:18Z"
"","539","Provide builder for ResponseEntity","This commit introduces a ResponseEntityBuilder, which allows for building of a ResponseEntity through a fluent API.  Issue: SPR-11752","closed","","poutsma","2014-05-14T10:19:44Z","2014-06-14T13:03:01Z"
"","670","Add an option to set an Origin whitelist for Websocket and SockJS","This commit introduces a new AllowedOriginInterceptor WebSocket HandshakeInterceptor. It filters Origin header value against a list of allowed origins.  AbstractSockJsService as been modified to: - Reject CORS requests with forbidden origins - Disable transport types that does not support CORS when an origin check is   required - Use the Origin request header value instead of ""*"" for   Access-Control-Allow-Origin response header value   (mandatory when  Access-Control-Allow-Credentials=true) - Return CORS header only if the request contains an Origin header  It is possible to configure easily this behavior thanks to StompWebSocketEndpointRegistration#setAllowedOrigins(String...).  Please notice that this commit does not change the default behavior: cross origin requests are enabled by default.  XML namespace configuration is not included yet, I plan to add it when this PR will be reviewed.  Issues: [SPR-12226](https://jira.spring.io/browse/SPR-12226)","closed","","sdeleuze","2014-10-21T16:22:38Z","2021-04-28T09:56:20Z"
"","696","Fix user destination parsing in simp messaging","This commit fixes the parsing of message destinations such as ""/user/anna/queue/foo"", reverting a regression introduced by SPR-11506, which worked well with @SendToUser use cases but caused issues for messages sent to other users.  Issue: SPR-12444","closed","","bclozel","2014-11-18T16:29:37Z","2015-01-27T13:25:06Z"
"","620","Support Jackson based XML serialization/deserialization","This commit adds support for XML serialization/deserialization based on the jackson-dataformat-xml extension. When using @EnableWebMvc or mvc:annotation-driven/, Jackson will be used  by default instead of JAXB2 if jackson-dataformat-xml classes are found in the classpath.  This commit introduces MappingJackson2XmlHttpMessageConverter and MappingJackson2XmlView classes, and common functionalities between JSON and XML processing have been moved to AbstractJackson2HttpMessageConverter and AbstractJackson2View classes.  MappingJackson2XmlView supports serialization of a single object. If the model contains multiple entries, MappingJackson2XmlView.setModelKey() should be used to specify the entry to serialize.  Pretty print works in XML, but tests are not included since a Woodstox dependency is needed, and it is better to continue testing spring-web and spring-webmvc against JAXB2.  Issue: SPR-11785","closed","","sdeleuze","2014-08-07T12:47:51Z","2021-04-28T09:56:04Z"
"","614","MockHttpServletRequest does not handle rfc formatted dates.","This change within MockHttpServletRequest implementation allows to use a formatted date headers. This opens the possibility to prepare the tests that are as close as possible to the behaviour of real client/server communication.  Issue: SPR-12056  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","jmnarloch","2014-08-01T20:49:02Z","2015-07-23T11:43:26Z"
"","646","Fix of unexpected override order for @Configuration based property sources","This change fixes the override order for @Configuration based property source registration via the @PropertySource and @PropertySources annotations.  Issue: SPR-12198","closed","","mgbckr","2014-09-16T10:45:51Z","2014-10-09T15:25:36Z"
"","581","Adding cacheSharedConsumers configuration for CachingConnectionFactory","There could be use cases to allow more fine grained control in the CachingConnectionFactory so the user can specify what is and isn't cached. Consumers, shared consumes, durables, no durables, etc could potentially be configured separately so that some types are cached and some not cached.  Therefore I split up the configuration of caching of consumers and shared consumers so either type can be configured separately.  Durable/non-durables could also be split up too in another commit.  Issue: SPR-11958  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","status: declined,","cshannon","2014-07-05T20:11:32Z","2021-12-02T14:54:27Z"
"","593","StaxStreamXMLReader ignores significant whitespace","The StaxStreamXMLReader no longer handles all whitespace as ignorable whitespace.  Issue: SPR-12000","closed","","poutsma","2014-07-16T11:20:39Z","2014-07-16T11:37:45Z"
"","661","Fix for SPR-12327","The problem is in < which locks the whole table and doesn't allow even simple select against it and another delete/insert.","closed","","mobichel","2014-10-13T14:39:07Z","2014-10-24T09:01:53Z"
"","658","Changed the validation error message","The old message is ""class may not be final"", however this error occurs when the annotated class is final.  Signed-off-by: Laszlo Hornyak laszlo.hornyak@gmail.com","closed","","K0zka","2014-10-07T16:28:19Z","2014-10-07T17:28:52Z"
"","683","CharacterEditor.setAsText() and setAsUnicode(), Using valueOf is faster than using constructor","The java.lang.Character.valueOf(char c) returns a Character instance representing the specified char value. If a new Character instance is not required, this method should generally be used in preference to the constructor Character(char), as this method is likely to yield significantly better space and time performance by caching frequently requested values.  This method will always cache values in the range '\u0000' to '\u007F', inclusive, and may cache other values outside of this range.  So I changed source like this  setValue(new Character(text.charAt(0))); -> setValue(Character.valueOf(text.charAt(0)));  setValue(new Character((char)code)); -> setValue(Character.valueOf((char) code));","closed","","overmindx","2014-10-28T14:59:18Z","2014-10-30T05:31:00Z"
"","565","Fix request parameter comparison bug in isFlashMapForRequest() method of AbstractFlashMapManager.java.","The isFlashMapForRequest() method of AbstractFlashMapManager.java returns true when targetRequestParams of FlashMap and parameters in HttpServletRequest are same.  The value of targetRequestParams in FlashMap is encoded by RedirectView class using URLEncoder.encode(String, String)  and the value of parameters in HttpServletRequest is not encoded (or decoded already).  This is not a problem in normal case, but can make problem if special character as like white space is included in parameter.  example)  Controller's logic is follows :  redirectAttributes.addAttribute(""ab"", ""a  b"");  redirectAttributes.addFlashAttribute(""flashKey"", ""flashValue"");  See the comparison logic of isFlashMapForRequest() method in AbstractFlashMapManager.java :   flashMap.getTargetRequestParams().get(""ab"") is ""a+b"" request.getParameterValues(""ab"") is ""a b"".  So isFlashMapForRequest() method returns false. And getMatchingFlashMap() method in in AbstractFlashMapManager.java returns null. And retrieveAndUpdate()  method in in AbstractFlashMapManager.java returns null, too. And redirected Controller cannot get FlashMap.  So I change isFlashMapForRequest() method to decode the value of targetRequestParams in FlashMap  and add private decoding method.","closed","","eujungkim","2014-06-24T09:58:53Z","2014-09-03T01:33:24Z"
"","603","add asserBufferedRequestBodyFalseConfig in HttpComponentsClientHttpRequestFactoryTests","The HttpComponentsClientHttpRequestFactory throw UnsupportedOperationException when bufferRequestBody is set false. So I added testcase HttpComponentsClientHttpRequestFactoryTests to recommend about use SimpleClientHttpRequestFactory if bufferRequestBody is set false. Because no buffer can not use OutputStream result. Testcase is useful of knowing the fact. And I added comment at that testcase.  Issue: SPR-11981","closed","status: invalid,","hangsublim","2014-07-29T00:32:15Z","2021-11-15T12:11:07Z"
"","647","Removing problematic creation of unnecessary RequestConfig","The explicit (possibly again) creation of RequestConfig for HttpContext is wrong, since if someone passes default RequestConfig to the HttpClient object (via setDefaultRequestConfig, as seen here: http://hc.apache.org/httpcomponents-client-4.3.x/httpclient/apidocs/org/apache/http/impl/client/HttpClientBuilder.html#setDefaultRequestConfig(org.apache.http.client.config.RequestConfig)) it will override it and making the developers to override for nothing the createHttpContext each time, instead of just using the already provided feature of setting default RequestConfig.  Instead of this condition, and making people overriding this class for just re-configuring RequestConfig for each HttpComponentsClientHttpRequestFactory, maybe it should be replaced with other conditions that checks if there's ANY RequestConfig, and if not then to create a new one.  Anyway, currently this condition is wrong and as my point of view it is kind of a bug.","closed","status: superseded,","marenzo","2014-09-16T15:01:28Z","2021-11-22T16:23:35Z"
"","699","Improved DataBinder Javadoc for xxx*yyy pattern matching.","The default documentation does not mention xxx_yyy pattern matching, which is, however, supported by PatternMatchUtils. Such a pattern can be useful for matching nested properties in all elements of a collection (e.g. property[_].nestedProperty).  The documentation is also inconsistent in other places in the  framework where PatternMatchUtils is used, but I do not know if this  is on purpose.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","in: core,","marcokrikke","2014-11-21T16:54:03Z","2022-02-07T10:46:33Z"
"","608","changed ContextLoaderTests","testing","closed","","youngjee","2014-07-31T08:59:36Z","2014-07-31T09:04:28Z"
"","613","Method for building HEAD requests with MockMvcRequestBuilders","Surprisingly until now the MockMvcRequestBuilders did not head a handy change adds such method to the  API making it consistent with other HTTP method types.  Issue: SPR-12055  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","jmnarloch","2014-08-01T18:39:48Z","2014-08-02T14:54:31Z"
"","572","Support Java and MVC namespace view resolution config","Support Java and MVC namespace view resolution config This PR also makes Tiles 3 the default implementation in spring-webmvc.","closed","","sdeleuze","2014-06-30T08:20:01Z","2021-04-28T09:55:46Z"
"","573","Add support for asserting JSON","Support asserting JSON regardless of order and formatting. Based on the JSONassert library.  Issue: SPR-10113","closed","","sdeleuze","2014-06-30T10:52:37Z","2021-04-28T09:55:44Z"
"","562","StringUtils.trimAllWhitespace(String str) is slow.","StringUtils.trimAllWhitespace(String str) is slow. Using sb.deleteCharAt(index) is not a good idea, it will call  System.arraycopy(value, index+1, value, index, count-index-1);  Test: https://gist.github.com/hengyunabc/a4651e90db24cc5ed29a  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","hengyunabc","2014-06-13T11:09:32Z","2014-06-15T17:27:04Z"
"","590","Add status controllers","Status controllers allow easily to define some URL that should send a response with a specified status code.  For non redirect status controllers, it is possible to specify a reason or a view to display. For redirect status controllers, a redirect path is specified and a flag allows to control if the query string of the original request should be added to the redirect one.  For configuration, both XML MVC namespace and JavaConfig are provided.  Issue: SPR-11543","closed","","sdeleuze","2014-07-12T08:13:41Z","2021-04-28T09:55:55Z"
"","559","4.0.x","sss","closed","","ghzsw","2014-06-12T02:14:15Z","2014-06-12T05:33:31Z"
"","685","Check for PersistenceContext.synchronization() in PersistenceAnnotationBeanPostProcessor","SPR-12396","closed","","panchenko","2014-10-30T06:08:55Z","2014-10-30T12:45:46Z"
"","695","Fix location checks for servlet 3 resources","SPR-12354 applied new checks to make sure that served static resources are under authorized locations.  Prior to this change, serving static resources from Servlet 3 locations such as ""/webjars/"" would not work since those locations can be within one of the JARs on path. In that case, the checkLocation method would return false and disallow serving that static resource.  This change fixes this issue by making sure to call the `ServletContextResource.getPath()` method for servlet context resources.  Note that there's a known workaround for this issue, which is using a classpath scheme as location, such as: ""classpath:/META-INF/resources/webjars/"" instead of ""/webjars"".  Issue: SPR-12432","closed","","bclozel","2014-11-18T11:50:34Z","2015-01-27T13:25:06Z"
"","684","Adapter ScrollableResults -> Spliterator","Spliterator is the source of data for the Java 8 Stream. This commit contributes a Spliterator that wraps Hibernate's ScrollableResults.  The commit also contributes an abstract base class which captures the concern of splitting into batches of configurable size, thus supporting automatic parallelization of the stream.  Issues: SPR-12349, SPR-12388  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","status: declined,","mtopolnik","2014-10-28T21:30:39Z","2021-11-22T09:41:39Z"
"","598","[SPR-12159] Add filtered properties","Sometimes I need to load only subset of properties from files.  https://jira.spring.io/browse/SPR-12159","closed","","alien11689","2014-07-20T09:23:48Z","2022-02-18T19:11:04Z"
"","630","SPR-12106: Eliminate unnecessary lock around filteredPropertyDescriptorsCache","Since filteredPropertyDescriptorsCache is a ConcurrentHashMap, it's already thread safe - there's no need to also lock it when doing updates.  See https://jira.spring.io/browse/SPR-12106","closed","","candrews","2014-08-21T02:25:09Z","2014-08-21T14:04:55Z"
"","532","SPR-11736: Method signature isn't used for computing the cache key in SimpleKeyGenerator","See https://jira.spring.io/browse/SPR-11736","closed","","candrews","2014-04-25T19:38:59Z","2014-06-23T12:12:56Z"
"","546","fix javadoc link for RestController and PropertySource","RestController and PropertySource links are broken (missing / ) ##   I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","gcuisinier","2014-05-24T17:01:00Z","2014-06-14T12:46:34Z"
"","617","Update references to RFC 2616","Replace references to the old RFC 2616 (HTTP 1.1) with references to the new RFCs 7230 to 7235.  This commit also deprecates: - HttpStatus.USE_PROXY - HttpStatus.REQUEST_ENTITY_TOO_LARGE in favor of HttpStatus.PAYLOAD_TOO_LARGE - HttpStatus.REQUEST_URI_TOO_LONG in favor of HttpStatus.URI_TOO_LONG  Issue: SPR-12067","closed","","sdeleuze","2014-08-05T14:53:10Z","2021-04-28T09:56:01Z"
"","659","afterCompletion method parameter maybe miss.","Repair HandlerMaping method execution if an exception occurs cannot be obtained in the interceptor.","closed","status: declined,","ghost","2014-10-08T06:30:42Z","2021-01-08T17:09:54Z"
"","688","Merge pull request #1 from spring-projects/master","pullRequest","closed","","lxr0827","2014-11-04T02:43:39Z","2014-11-04T05:23:33Z"
"","635","Improve ResolvableType.hashCode() for better performances","Prior to this commit, when there was a lot of entries in the ResolvableType.cache HashMap, getting a simple value could take a lot of time due to a lot of calls to ResolvableType.equals(). ResolvableType.equals() used this.type, getSource(), this.variableResolver.getSource() and this.componentType, but ResolvableType.hashCode() used only this.type.  With this commit, ResolvableType.hashCode() now uses the same fields than ResolvableType.equals().  Performances on the spring-resolvabletype-benchmark project: - 8000 us before this commit - 120 us with this commit  Issue: SPR-12122","closed","","sdeleuze","2014-08-26T10:16:03Z","2021-04-28T09:56:05Z"
"","568","Workaround for WFLY-3474 NullPointerException","Prior to this commit, the ServletResponseHttpHeaders.get method would throw an NPE when used under Wildfly 8.0.0.Final and 8.1.0.Final. This can be traced to WFLY-3474, which throws an NPE when calling HttpServletResponse.getHeaders(""foo"") and that header has not been defined prior to that.  This commit adds a check for this exception and returns null in that case.  Issue: SPR-11919","closed","","bclozel","2014-06-25T20:46:52Z","2014-06-26T21:50:18Z"
"","645","Added support for ResponseMessage response type in @Controller message handling methods","Prior to this commit, the only way to override the destination to send the response of message handling methods was by using _@SendTo_ or _@SendToUser_, which doesn't allow building dynamic destinations.   The added _ResponseMessage_ return type brings more flexibility when specifying the response message, which can be created using a builder, e.g  ``` java @MessageMapping(""/dest"") public ResponseMessage handle() {         return ResponseMessage.destination(""/queue/dest1"").toUser(""sergi"").body(""hi""); } ```  Other examples:  ``` java new ResponseMessage(""hi there"", ""/topic/dest1""); ResponseMessage.destination(""/topic/dest1"").body(PAYLOAD); ResponseMessage.destinations(""/queue/dest1"", ""/queue/dest2"").toUser(USERNAME).body(PAYLOAD); ResponseMessage.destination(""/queue/dest1"").toCurrentUser().body(PAYLOAD); ResponseMessage.destination(""/queue/dest1"").toCurrentUserNoBroadcast().body(PAYLOAD); ```  Issue: SPR-12170","closed","in: web,","salmar","2014-09-15T08:57:35Z","2021-11-15T12:16:46Z"
"","616","Move exposeContextBeans to UrlBasedViewResolver","Prior to this commit, the ability to expose all (or a named subset) of context beans lived on InternalResourceView and InternalResourceViewResolver.  This changes moves this functionality up the hierarchy to AbstractView/UrlBasedViewResolver.  Issue: SPR-8064  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","dharaburda","2014-08-04T18:18:06Z","2014-08-19T15:52:29Z"
"","687","Fix path mapping issue in default servlet mode","Prior to this commit, some requests would be wrongly mapped to ""/"" when: - requests ends with ""//"" such as ""/foo/bar//"" - the DispatcherServlet is mapped as the default (""/"") - the app container sanitizes the servletPath  In those cases, the path extraction algorithm was wrongly guessing the path of the current request.  This commit detects if the app container sanitized the servletPath for the current request. If so, it uses a sanitized version of the requestUri to extract the path information.  Issue: SPR-12372","closed","","bclozel","2014-10-31T15:12:17Z","2015-01-27T13:25:06Z"
"","693","Allow non-String args in JOptCommandLinePropertySource","Prior to this commit, JOptCommandLinePropertySource prevented the possibility of non-String option arguments. This effectively prevents the use of JOpt's #ofType support (which allows specifying custom argument types).  Now, non-String arguments are detected and converted to strings as necessary. JOpt's #ofType now works as expected. A test has been added to cover this case.","closed","","cbeams","2014-11-13T10:25:57Z","2014-11-20T21:07:39Z"
"","557","Introduce annotation to execute SQL scripts in the TCF","Prior to this commit, it was possible to execute SQL scripts programmatically via ResourceDatabasePopulator, JdbcTestUtils, and ScriptUtils. Furthermore, it was also possible to execute SQL scripts declaratively via the  XML namespace. However, it was not possible to execute SQL scripts declaratively on a per test class or per test method basis.  This commit makes it possible to declaratively configure SQL scripts for execution in integration tests via annotations that can be declared at the class or method level. Details follow. - Introduced a repeatable @DatabaseInitializer annotation that can be   used to configure SQL scripts at the class or method level with   method-level overrides. @DatabaseInitializers serves as a container   for @DatabaseInitializer. - Introduced a new DatabaseInitializerTestExecutionListener that is   responsible for parsing @DatabaseInitializer and   @DatabaseInitializers and executing SQL scripts. - DatabaseInitializerTestExecutionListener is registered by default in   abstract base test classes as well as in TestContextBootstrapper   implementations. - @DatabaseInitializer and @DatabaseInitializers may be used as   meta-annotations; however, attribute overrides are not currently   supported for repeatable annotations used as meta-annotations. This   is a known limitation of Spring's AnnotationUtils. - The semantics for locating SQL script resources is consistent with   @ContextConfiguration's semantics for locating XML configuration   files. In addition, a default SQL script can be detected based   either on the name of the annotated class or on the name of the   annotated test method. - @DatabaseInitializer allows for specifying which DataSource and   PlatformTransactionManager to use from the test's   ApplicationContext, including default conventions consistent with   TransactionalTestExecutionListener and @TransactionConfiguration. - @DatabaseInitializer supports all of the script configuration options   currently supported by ResourceDatabasePopulator. - @DatabaseInitializer and DatabaseInitializerTestExecutionListener   support execution phases for scripts that dictate when SQL scripts   are executed (i.e., before or after a test method). - SQL scripts can be executed within the current test's transaction if   present, outside of the current test's transaction if present, or   always in a new transaction, depending on the value of the boolean   requireNewTransaction flag in @DatabaseInitializer. - DatabaseInitializerTestExecutionListener delegates to   ResourceDatabasePopulator#execute to actually execute the scripts.  Issue: SPR-7655","closed","","sbrannen","2014-06-05T18:11:06Z","2014-06-12T17:45:45Z"
"","607","Change GenericConversionService to match interfaces before enums","Prior to this commit, given an enum which implements some interface, GenericConversionService would select the String -> Enum converter even if a converter for String -> SomeInterface was registered.  This also affected converters that were registered for String -> SomeBaseInterface, when SomeInterface extended SomeBaseInterface.  This change modifies the behavior of the private method getClassHierarchy() by placing interfaces first in the class hierarchy that is returned.  To ensure that any implementing interfaces also had their super-interfaces explored and added to the hierarchy before the superclass, the logic for traversing the class hierarchy was changed to use a stack of candidate types to add the hierarchy.  Previously the hiearchy was built up in an ArrayList, with an auxillary set used to make sure duplicates were not added (presumably for performance?). I have changed the hierarchy to be built up in a LinkedHashSet, which preserves these semantics, although the method now returns Iterable instead of List.  Issue: SPR-12050  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","dharaburda","2014-07-30T22:21:50Z","2014-08-06T08:45:51Z"
"","660","Update AnnotationUtils to always call getDeclaredAnnotations defensively","Previously, any exception thrown by getDeclaredAnnotations was not handled. Due to the JDKs pure diagnostics, this made problem diagnosis difficult as the details of the class that was being introspected were lost.  This commit updates AnnotationUtils to always call getDeclaredAnnotations within a try-catch block. Any exception that is thrown is logged along with details of the class that was being introspected. Processing then continues as if no annotations were present.  Issue: SPR-12325","closed","","wilkinsona","2014-10-13T09:39:58Z","2014-10-24T09:01:17Z"
"","558","Reference manual polishing","Please see suggested changes to the reference manual.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","VasylTretiakov","2014-06-05T20:59:36Z","2014-06-12T15:08:47Z"
"","570","SPR-11875: Performance regression for custom autowireBean calls with many properties","Please see SPR-11875.  This commit reverts e1d11ec99d40051ecdb60191c49bc587373a031d and uses ConcurrentReferenceHashMap to fix SPR-8956 memory leak instead.  Autowire benchmark https://github.com/trask/spring-autowire-benchmark is back in line with Spring 3.1.4 after this.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","status: superseded,","trask","2014-06-27T19:36:08Z","2021-11-19T11:34:51Z"
"","569","Fixed [SPR-11897]","Please refer to [SPR-11897](https://jira.spring.io/browse/SPR-11897).  The gist of the bug is that in the case of posting ""a=a;b=c"" as a path variable when shouldRemoveSemicolonContent is false, the matrix parameters are evaluated as [a->a, b->c] and the path variable remains ""a=a;b=c"" whilst in the case of ""aa;b=c"" the matrix parameters are evaluated as [b->c] and the path variable is passed as ""aa"" thus leading to inconsistent and undocumented behavior when a '=' sign is present in the pre-matrix (before the first semicolon) part of the path. This fix assumes that parsing the pre-matrix part of the path was a desired feature (due to lack of official comment on SPR-11897) but that the returned path variable should omit what spring parsed as matrix variables.  I've added several tests to validate this and fix other tests that expected it (for example: in case of having a path variable that it's first character is a semicolon, the test expected the entire value and not an empty string - I changed it to an empty string as all these values were parsed as matrix variables)  Commit message: Fixed SPR-11897 in a way that does not harm the feature (?) of parsing key=value in the pre-matrix part of the path as though it was a matrix variable - added test to validate that scenario","closed","","boazj","2014-06-27T10:06:58Z","2018-07-20T20:23:12Z"
"","636","Add Authentication to Security Context Holder","Passes the current security context to the security context handler.  This way we can get the current user in the subsequent methods using the standard spring security methods.","closed","","AddoSolutions","2014-08-26T14:52:39Z","2014-08-26T18:15:40Z"
"","673","Some methods in the org.springframework.core.task.AsyncListenableTaskExecutor class need to be added.","org.springframework.core.task.AsyncListenableTaskExecutor has submitListenable(Callable) method. This return ListenableFuture object after ListenableFutureTask.execute(ListenableFutureTask future). As Juergen Hoeller mentioned in the SPR-12358(https://jira.spring.io/i#browse/SPR-12358), if the async task has already been fully executed at the time of the addCallback call, Spring's ListenableFutureCallbackRegistry is executing the callback in the caller's thread since the async thread can't be used for it anymore. I think AsyncListenableTaskExecutor is needed to be improved in order to add callback before ListenableFutureTask.execute(ListenableFutureTask future) method is called.  ISSUE : SPR-12364  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","in: core,","MoonJongMin","2014-10-23T05:30:10Z","2021-11-19T11:54:41Z"
"","676","The filed PropertyDescriptor in the org.springframework.beans.PropertyValue needs to be transient to avoid serialization and deserialization failure in case of resolvedDescriptor in the PropertyValue is not null.","org.springframework.beans.PropertyValue is Serializable and has a member PropertyDescriptor. Even though threre is little possible to have a Exception when serialization and deSerialization because the access modifier of PropertyDescriptor is defualt, PropertyDescriptor needs to be transient.  1) Case 1 create a PropertyValue Object. then set resolvedDescriptor in the org.springframework.beans package then try to serialize value object.  PropertyValue value = new PropertyValue(""a"", ""b""); value.resolvedDescriptor = new PropertyDescriptor(""serializable"", PropertyValueTests.class);  in this case PropertyDescriptor is not a Serializable class, when writeObject(value) is called, Exception occurs like below as you know.  java.io.NotSerializableException: java.beans.PropertyDescriptor     at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1184)     at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548)     at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509)     at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)   ...  2) Case 2 For avoiding serialization failure, make SubPropertyDescriptor which is serializable.  PropertyValue value = new PropertyValue(""a"", ""b""); value.resolvedDescriptor = new SubPropertyDescriptor(""serializable"", PropertyValueTests.class);  ``` public class SubPropertyDescriptor extends PropertyDescriptor implements Serializable {      public SubPropertyDescriptor(String propertyName, Class beanClass)             throws IntrospectionException {         super(propertyName, beanClass);     }      public SubPropertyDescriptor() throws IntrospectionException {         // There is no-args constructor in the PropertyDescriptor.         super(""serializable"", PropertyValueTests.class);     }  } ```  in this case SubPropertyDescriptor is a Serializable class, so serialization is successful. But when ObjectInputStream.readObject is called for deSerialization, Exception occurs like below as you know because the parent class PropertyDescriptor does not have no-args default constructor.  java.io.InvalidClassException: org.springframework.beans.PropertyValueTests$SubPropertyDescriptor; no valid constructor     at java.io.ObjectStreamClass$ExceptionInfo.newInvalidClassException(ObjectStreamClass.java:150)     at java.io.ObjectStreamClass.checkDeserialize(ObjectStreamClass.java:768)     at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1775)     ...  So, I think the filed PropertyDescriptor in the org.springframework.beans.PropertyValue needs to be transient.  ISSUE : SPR-12377  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","MoonJongMin","2014-10-25T22:52:22Z","2014-10-27T15:34:26Z"
"","678","Comparison of String objects using == or != in","org.springframework.asm.ClassReader.readMethod(ClassVisitor, Context, int) if (mw.cw.cr == this && signature==mw.signature) { ... } Actually Type of signature and mw.signature are String.  It is better to use .equals()","closed","","iamjs77","2014-10-28T02:28:12Z","2014-10-28T12:21:47Z"
"","619","SPR-12068 Added exception tracking to JamonPerformanceMonitorInterceptor","Ok, I made the changes, and added tests for the following: https://jira.spring.io/browse/SPR-12068  Let me know if anything else needs to be done.  A couple notes.   - I was unable to compile spring, so I made the changes in my own project and copied the files over when done.   - I was able to run my unit tests successfully and also tested it in Spring by adding it to my applicationContext.xml and it worked.   - However, because I couldn't get Spring to compile/test the code I didn't run the Spring test suite. - One thing I wasn't sure of is if the jamon jar is available as a jar in your test suite.  It would need to be.   - Although not required jamon 2.78 is the latest version so if it has to be added to your build file that should be used (it is in maven).  Here is what the applicationContext entry would look like.  Note I disabled exception tracking by default so as not to change the current users behaviour (although I think having it enabled is a better default).  The property below 'trackExceptions' controls this behaviour.  ```             ```","closed","","stevensouza","2014-08-07T10:49:34Z","2014-10-08T12:12:16Z"
"","707","[SPR-12530] HttpClient - Replaced Deprecated methods with Non Deprecated methods","Now works without throwing:  ``` Caused by: java.lang.UnsupportedOperationException         at org.apache.http.impl.client.InternalHttpClient.getParams(InternalHttpClient.java:204)         at org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor.setReadTimeout(HttpComponentsHttpInvokerRequestExecutor.java:130)         at org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor.(HttpComponentsHttpInvokerRequestExecutor.java:85) ```","closed","","mores","2014-12-11T21:09:04Z","2014-12-18T10:26:44Z"
"","541","Move ResponseEntityBuilder into ResponseEntity","Moved the ResponseEntityBuilder into the ResponseEntity itself.  Issue: SPR-11752","closed","","poutsma","2014-05-15T14:15:07Z","2014-06-14T13:02:59Z"
"","537","Fixed DestinationCache to avoid ConcurrentModificationException","Moved the cached destination removal outside the for loop.  Since updateCache is a LinkedHashMap with accessOrder=true, a simple access with updateCache.get() modify the map. By iterating over updateCache.entrySet(), we avoid this update.  Issue: SPR-11755","closed","","sdeleuze","2014-05-05T08:35:20Z","2021-04-28T09:55:38Z"
"","642","4.0.x","Method processDispatchResult(HttpServletRequest request, HttpServletResponse response,             HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) throws Exception of DispatchServlet maybe has a bug.   code block :  ``` java if (mappedHandler != null) {             mappedHandler.triggerAfterCompletion(request, response, null);         } ```  The exception parameter is null? then interceptor is can not get the exception of handler.","closed","","ghost","2014-09-06T04:34:10Z","2014-10-08T05:51:28Z"
"","544","Fix method comment for getRequiredProperty(key)","Method comment apparently copy-pasted from `getRequiredProperty(key, targetType)`, affected online docs: [link](http://docs.spring.io/spring/docs/4.0.x/javadoc-api/org/springframework/core/env/PropertyResolver.html#getRequiredProperty-java.lang.String-)  ---  I've signed the CLA","closed","","kryger","2014-05-21T22:17:13Z","2014-06-12T05:43:24Z"
"","632","Merge pull request #1 from spring-projects/master","merge commits on Aug 20, 2014","closed","","tsingheng","2014-08-21T06:00:07Z","2014-08-21T06:02:17Z"
"","571","Make ListenableFuture compliant with Java 8 lambda","Make it possible to use a ListenableFuture with Java 8 lambda expressions, using a syntax like listenableFuture.onSuccess(() -> ...).onFailure(() -> ...);  Issue: SPR-11820","closed","","sdeleuze","2014-06-30T07:48:40Z","2021-04-28T09:55:47Z"
"","543","Added support for nested path traversing in DirectFieldAccessor","Major change in `DirectFieldAccessor` - added support for nested path traversing.  As an example, piece of code:  ``` Person person = new Person(); person.name = ""John""; person.address = new Address(); person.address.city = ""London"";  assertThat(new DirectFieldAccessor(person).getPropertyValue(""address.city""), is(""London"")); ```  works after improvements made in this pull request.  As a small explanation - mapping creating algorithm has slightly changed: instead of creating `fieldMap` in `DirectFieldAccessor`'s constructor, field is added to map when it is being read or written for the first time. Thanks to that there is no chance to fall into infinite loop or poor performance for complex objects - we map only what has to be mapped.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.  Issue: SPR-9705, SPR-10623, SPR-8692","closed","","maciejwalkowiak","2014-05-21T00:38:58Z","2014-06-26T17:28:54Z"
"","592","Update support for using ""."" as path separator","Leading slash is now managed in a generic way, regardless of the AntPathMatcher path separator.  Issue: SPR-11660","closed","","sdeleuze","2014-07-16T11:05:33Z","2021-04-28T09:55:47Z"
"","579","4.0.x","Just a test of pull request. Please ignore.","closed","","MykolaBova","2014-07-02T13:06:54Z","2014-07-02T13:31:15Z"
"","587","Adding support for shared consumers in message listener containers","JMS 2.0 adds the ability to support shared consumers (durable and no durable)  This commit adds in the ability to create shared consumers in different message listener containers just like in CachingConnectionFactory.  Note that there are no unit tests for this because spring-jms is currently building against JMS 1.1.  Once there is a JMS 2.0 test project this can be tested.  Issue: SPR-11969  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","cshannon","2014-07-08T01:34:13Z","2014-07-18T20:39:14Z"
"","692","SPR-12425 Add Id to JmsListenerEndpoint Docs","JIRA: https://jira.spring.io/browse/SPR-12425","closed","","garyrussell","2014-11-12T20:12:30Z","2014-11-13T14:51:55Z"
"","548","SPR-11825 SubPWSocketH: eventPublisher population","JIRA: https://jira.spring.io/browse/SPR-11825  As long as `StompSubProtocolHandler` has been created directly in case of `@EnableWebSocketMessageBroker`, there was no application context infrastructure population.  Make `WebMvcStompEndpointRegistry` as `ApplicationContextAware` and populate it to the `StompSubProtocolHandler.setApplicationEventPublisher`  **Cherry-pick to 4.0.x**","closed","","artembilan","2014-05-28T10:03:46Z","2014-06-13T15:44:49Z"
"","650","Let base-package of  component-scan placeholder supports multiple basePackages","java -Dapp.basePackage=com.test1,com.test2,com.test3","closed","","quaff","2014-09-24T03:20:24Z","2014-09-24T22:50:26Z"
"","654","Fix condition vs. conditional typo in @Cacheable reference documenation","It seems this was a typo, since the parameter is named `condition`, not `conditional`.  Issue: [SPR-12273](https://jira.spring.io/browse/SPR-12273)  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement ([ICLA 090414](http://service.springsource.com/download/committer_agreement/agreement.pdf)).","closed","","AndersDJohnson","2014-09-30T02:16:58Z","2014-09-30T07:54:14Z"
"","672","[SPR 12363] org.springframework.ui.ModelMap.mergeAttributes(Map) makes inefficient use of keySet iterator instead of entrySet iterator","It is more efficient to use an iterator on the entrySet of the map, to avoid the Map.get(key) lookup. Test is ModelMapTests.java @Test public void testMergeMapWithOverriding() throws Exception { Map beans = new HashMap(); beans.put(""one"", new TestBean(""one"")); beans.put(""two"", new TestBean(""two"")); beans.put(""three"", new TestBean(""three"")); ModelMap model = new ModelMap(); model.put(""one"", new TestBean(""oneOld"")); model.mergeAttributes(beans); assertEquals(3, model.size()); assertEquals(""oneOld"", ((TestBean) model.get(""one"")).getName()); }","closed","","RyuSangGi","2014-10-23T05:18:58Z","2014-10-24T08:56:11Z"
"","667","Use entrySet instead of Keyset to improve performance (SPR-12356)","It is more efficient to use an iterator on the entrySet of the map, to avoid the Map.get(key) lookup.  Issue: SPR-12356","closed","","luckybomb","2014-10-21T03:26:28Z","2014-10-21T15:24:36Z"
"","679","org.springframework.oxm.xmlbeans.XmlOptionsFactoryBean.setOptions(Map)","It is more efficient to use an iterator on the entrySet of the map, to avoid the Map.get(key) lookup.  Issue : SPR-12383  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","hangsublim","2014-10-28T03:21:03Z","2014-10-28T12:31:01Z"
"","596","Add ""-configurer"" suffix to view configurer element names","Issue: SPR-7093","closed","","sdeleuze","2014-07-17T15:42:02Z","2021-04-28T09:55:56Z"
"","602","Add CSRF protection documentation","Issue: SPR-6125","closed","","sdeleuze","2014-07-27T22:25:11Z","2021-04-28T09:55:58Z"
"","657","Fix StringIndexOutOfBoundsException in TextMessage.toStringPayload","Issue: SPR-12307  I have signed and agree to the terms of the SpringSource Individual  Contributor License Agreement.","closed","","emalock3","2014-10-07T08:36:11Z","2014-10-07T13:29:55Z"
"","638","Include HTTP status code in ServletRequestHandledEvent","Issue: SPR-12119","closed","","sdeleuze","2014-08-29T15:29:26Z","2021-04-28T09:56:06Z"
"","600","Avoid adding an InternalResourceViewResolver when ViewResolverRegistry is empty","Issue: SPR-12013","closed","","sdeleuze","2014-07-22T10:25:11Z","2021-04-28T09:55:57Z"
"","601","Improve documentation for using ""."" as destination separator","Issue: SPR-12007","closed","","sdeleuze","2014-07-25T09:23:23Z","2021-04-28T09:55:58Z"
"","611","Add documentation for Java SockJS client","Issue: SPR-12006","closed","","sdeleuze","2014-08-01T15:53:56Z","2021-04-28T09:56:00Z"
"","594","Add Groovy markup templating support to the MVC config","Issue: SPR-11998","closed","","sdeleuze","2014-07-16T15:53:51Z","2021-04-28T09:55:47Z"
"","609","Enrich documentation with details on how to filter messages","Issue: SPR-11952","closed","","sdeleuze","2014-07-31T14:58:27Z","2021-04-28T09:55:59Z"
"","560","Add Converter for java.util.Optional","Issue: SPR-11829","closed","","rstoyanchev","2014-06-13T03:53:20Z","2014-11-21T22:39:57Z"
"","535","Made string constants in HttpHeaders public","Issue: SPR-11749  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","matsev","2014-05-01T16:04:31Z","2014-07-21T20:36:09Z"
"","595","Fix default target destination when using ""."" as path separator","Issue: SPR-11660","closed","","sdeleuze","2014-07-17T05:54:32Z","2021-04-28T09:55:55Z"
"","604","add testNullSafeToStringWithXSSValue testcase to objectUtilsTests","In the absence of a message string for the error code, this is the message that gets written as the error. So ObjectUtils class, nullSafeToString method parameter can contains XSS attack script value. So I added convertXSSValue method and testCase.  When the vaule contains script then the method converting the value safe.","closed","in: core,","hangsublim","2014-07-29T02:38:58Z","2021-11-19T11:39:18Z"
"","605","Class comment is wrong.","In RuntimeTestWalker Class comments,   tag is open but not closed. So I am  tag to add given.","closed","","overmindx","2014-07-30T01:15:33Z","2014-07-30T06:47:58Z"
"","674","[Spr 12365] use valueOf() method instead of inefficient new Constructor.","In readAnnotationValue() of ClassReader(org.springframework.asm.ClassReader) ,  there are some inefficient new Byte, Character, Integer constructor.  new Byte((byte) readInt(items[readUnsignedShort(v)]))); -> Byte.valueOf((byte) readInt(items[readUnsignedShort(v)])) );  This will be better for performance.  ISSUE: spr-12365","closed","","vincentKim1218","2014-10-23T07:56:48Z","2014-10-23T18:21:13Z"
"","589","Allow to customize separator for messaging destinations","In order to be able to use separators like ""."" (used by default by most broker relays) instead of ""/"" for destination patterns handling, the PathMatcher used in spring-messaging can now be customized easily thanks to XML websocket namespace or JavaConfig.  AntPathMatcher has been updated in order to use the configured path separator instead of an hardcoded ""/"" for path concatenation. Extension handling is now disabled when the ""."" separator is configured.  Issue: SPR-11660","closed","","sdeleuze","2014-07-10T13:32:48Z","2021-04-28T09:55:46Z"
"","639","Add support for jackson mix-in","In Jackson2ObjectMapperFactoryBean, jackson mix-in classes can be registered via jackson module, but not directly to the factory bean.  This commit adds support for direct jackson mix-in registration in Jackson2ObjectMapperFactoryBean.  Issue: [SPR-12144](https://jira.spring.io/browse/SPR-12144) CLA submitted","closed","","ttddyy","2014-09-03T06:25:20Z","2014-10-07T16:16:30Z"
"","567","In connection with ""[SPR-11126] problem converting empty parameter to","In connection with ""[SPR-11126] problem converting empty parameter to List"",  the resolveName(String, MethodParameter, NativeWebRequest) method in the RequestParamMethodArgumentResolver.java has been slightly chagned. In case that MethodParameter is related to List type, String[](with legnth 1) value will be returned itself without being changed to String.  Issue : SPR-11126","closed","","MoonJongMin","2014-06-24T22:43:06Z","2021-11-12T13:58:14Z"
"","566","In case that reqeust url includes ""="" char in front of first semicolon,","In case that reqeust url includes ""="" char in front of first semicolon, PathVariable do not work properly. Problem is that @PathVariable value includes matrixVariable String.  For example, if Spring MVC Controller method has @RequestMapping(value = /bar/{foo}"", method = RequestMethod.GET) and request url is http://localhost:8080/context/bar/abc;key=xyz, we expect @PathVariable foo == ""abc"" and @MatrixVariable key == ""xyz"". Actually this works well. But when request url is http://localhost:8080/context/bar/name=abc;key=xyz, despite expectations that @PathVariable foo == ""name=abc"" and @MatrixVariable key == ""xyz"", @PathVariable foo == ""name=abc;key=xyz"".  I modified so that @PathVariable foo may have ""name=abc"".  Issue : SPR-11897","closed","","MoonJongMin","2014-06-24T16:07:21Z","2018-07-19T02:16:48Z"
"","681","AutowireUtils$ObjectFactoryDelegatingInvocationHandler.invoke() Parameter value must be null check.","In AutowireUtils$ObjectFactoryDelegatingInvocationHandler.invoke(Object proxy, Method method, Object[] args)  Parameter value must be null check.  Otherwise, NPE will occur. So, I added this  Assert.notNull(proxy, ""proxy must not be null""); Assert.notNull(method, ""method must not be null""); Assert.notNull(args, ""Argument array must not be null"");","closed","","overmindx","2014-10-28T08:39:53Z","2016-02-12T08:03:44Z"
"","677","[SPR-12378] Improvement of BeanWrapperImpl.getPropertyValue(PropertyTokenHolder tokens), setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv)","Improvement of BeanWrapperImpl.getPropertyValue(PropertyTokenHolder tokens), setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv)   -> In the Method, the correct usage of TypeDescriptor.valueOf(...)","closed","","ksseo0701","2014-10-26T15:13:11Z","2014-10-27T08:34:04Z"
"","536","Created a builder to create HttpHeaders","Implemented a simple builder that creates a HttpHeaders instance by wrapping calls to an internal HttpHeaders object. The builder pattern allows both creation of simple objects as well as chaining calls to more complex constructs.  The major disadvantage with this implementation compared to the proposed solution in the issue is that it is more verbose when only a single header is desired. On the other hand, the fluent API will make the creation of a HttpHeaders object concise if more parameters are added. Additionally, the builder pattern enables methods like setContentType(MediaType mediaType) to be implemented in a type-safe way.  Example usages:  HttpHeaders etagHeader = new HttpHeadersBuilder.setETag(etagValue).build();  HttpHeaders httpHeader = new HttpHeadersBuilder     .setETag(etagValue)     .setContentType(MediaType.APPLICATION_JSON)     .setContentLength(42L)     // more setters     .build();  Issue: SPR-11597","closed","","matsev","2014-05-01T21:35:59Z","2014-08-18T06:12:58Z"
"","578","CachingDestinationResolver implementation","Implementation and Tests for CachingDestinationResolver. See SPR-11939  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","aemruli","2014-07-01T22:04:03Z","2014-07-04T08:07:01Z"
"","528","Documentation updates related to SPR-11703","If it is fine, please merge it with master and 4.0.x branch.","closed","","sdeleuze","2014-04-24T09:19:14Z","2021-04-28T09:55:38Z"
"","575","edit exception list type as Exception instead of Throwable","I've changed the exception list type from Throwable to Exception. It's more clear when @ExceptionHandler annotation use.  Issue: https://jira.spring.io/browse/SPR-11933","closed","status: declined,","milgarubanjuk","2014-07-01T09:22:15Z","2021-01-08T17:15:01Z"
"","666","Inefficient use of keySet iterator instead of entrySet iterator Resolve","I use entrySet instead of Keyset to improve performance.  It is more efficient to use an iterator on the entrySet of the map, to avoid the Map.get(key) lookup.","closed","","luckybomb","2014-10-21T01:11:06Z","2014-10-21T01:41:31Z"
"","591","Add date formatting to MockHttpServletRequest and MockHttpServletResponse .","I improved MockHttpServletRequest.java and MockHttpServletResponse.java by adding date formatting.  The FastHttpDateFormat.java class added in org.springframework.mock.web package is a utility class to generate Http dates, and this class is based on code in Apache Tomcat.  Well, I found this class is already included in spring-security-web project as org.springframework.security.web.savedrequest.FastHttpDateFormat.java.  But because of project dependency problem, I can't use FastHttpDateFormat.java in spring-security-web and add same class in different package.  So spring team may have to think about how to solve FastHttpDateFormat class duplication.  Thanks.","closed","","eujungkim","2014-07-14T11:48:00Z","2014-09-03T01:33:45Z"
"","606","SPR-10500-ReloadableResourceBundleMessageSource properties hashmap locks and fails under load","I have used the following approach to avoid/mitigate locking. I have also changed the access level of members mentioned in jira ticket from private to protected.  I have introduced a new flag “preferStaleOverLock”. If this flag is true. Only one thread will update the cache remaining thread will use the stale data. If this flag is false, all thread will be locked until first thread updates the cache.  Locking strategy is also changed. Two new objects are introduced to acquire the lock for cachedFilenames and cachedMergedProperties. This allows reader threads to read the hashmap while update threads are busy in creating the new hashmap to replace the existing one's for cachedFilenames and cachedMergedProperties. Please refer https://jira.spring.io/browse/SPR-10500 for more details.","closed","","bsangwan","2014-07-30T18:14:04Z","2014-09-30T21:22:58Z"
"","597","Update documentation with MVC config view resolution examples","I have also added a commit to rename mvc:content-negotiation to mvc:content-negotiating, in order to be consistent with JavaConfig.","closed","","sdeleuze","2014-07-18T08:20:46Z","2021-04-28T09:55:56Z"
"","644","Added 406 Not Acceptable response support for @ExceptionHandler methods","I found this while writing a file server when testing not found errors. When I attempted to handle my not found exception for the file `Text.txt` I got a 500 instead of a 404. This is because I don't have a message converter for `text/plain` so when the my hander method returns, the error cannot be marshelled and an `HttpMediaTypeNotAcceptableException` is thrown by the resolver. This I would expect to produce a 406 not a 500. The 500 happens because the `HttpMediaTypeNotAcceptableException` is just logged and null returned, this indicates to the framework that my not found exception wasn't actually resolved so it is then thrown up out into the web server.  I have updated the `ExceptionHandlerExceptionResolver` to propagate exceptions thrown from `@ExceptionHandler` methods up to the `HandlerExceptionResolverComposite`. The `HandlerExceptionResolverComposite` now catches the propagated exception and passes that through the exception resolvers to see if it too can be handled. This prevents the current behaviour of `HttpMediaTypeNotAcceptableException`s produced by `@ExceptionHandler` methods causing HTTP 500s. They now produce HTTP 406 responses as expected. It also allows the use of the defaul Spring MVC exceptions from within exception `@ExceptionHandler` methods.  Issue: SPR-12188","closed","","karlbennett","2014-09-13T06:37:05Z","2014-10-06T15:42:59Z"
"","680","[Spr 12365] ValueOf method is replaced to autoboxing.","I changed Integer, Byte, Character new construct to ValueOf method.  but as Juergen said, autoboxing is more attractive. So, ValueOf method is replaced to autoboxing.  ISSUE : SPR 12365","closed","","vincentKim1218","2014-10-28T05:40:20Z","2014-10-28T11:41:29Z"
"","648","Fix reference code sample","I believe it is a logic typo in reference.","closed","","olomix","2014-09-20T09:48:08Z","2014-10-07T07:42:54Z"
"","705","added unprocessableEntity() to ResponseEntity","https://jira.spring.io/browse/SPR-12515  Lately I'm using http 422 Unprocessable Entity for returning validation errors. instead of a 400. It seems many public api's are changing to this (like github api). So please add a static unprocessableEntity() builder method to ResponseEntity to have a shortcut for returning this http code. This just like earlier request like SPR-12070 and SPR-12112.","closed","","marceloverdijk","2014-12-06T07:06:03Z","2014-12-07T14:34:13Z"
"","694","Fix for SPR-12447","https://jira.spring.io/browse/SPR-12447","closed","","kicktipp","2014-11-17T15:28:13Z","2014-12-03T09:57:38Z"
"","662","SPR-12341: Support for customizing individual GuavaCache used underlying...","https://jira.spring.io/browse/SPR-12341  The issue with the current GuavaCacheManager is that only 1 level of customization is possible through a CacheBuilder at the level of GuavaCacheManager and all further caches are created lazily from this one CacheBuilder. Google Guava provides much more customization where it is possible to customize each underlying cache differently  For eg. say cache for list of employees having an expiry of 10 mins vs cache for list of states having an expiry of 30 days.  This is just a prelim submission, please review and see if this feels appropriate, if so I can make more comprehensive updates to the code based on your feedback and also update the reference documentation.","closed","","bijukunjummen","2014-10-16T14:50:57Z","2014-10-16T15:12:03Z"
"","653","SPR-12081: Use a more efficient buffer implementation in ShallowEtagHeaderFilter","https://jira.spring.io/browse/SPR-12081  This PR is composed of 2 commits.  The first commit doesn't change the API of ShallowEtagHeaderFilter so it's safe to use in 4.1.x. It offers an improvement over the current state by eliminating most of the copying and all of the array reallocations.  The second commit changes the API of ShallowEtagHeaderFilter so it probably has to wait for 4.2. It eliminates the creation of the whole response byte[].  I'm sure this PR isn't perfect; I look forward to the comment and discussion. For example, I'm not too thrilled about the ""instanceof"" check I had to do in DigestUtils in order to do the optimized digest, but I couldn't think of a better way.  Thanks in advance!","closed","","candrews","2014-09-26T19:48:06Z","2015-01-08T16:21:07Z"
"","549","SPR-11832 - fixed NPE when unsubscribing from an endpoint that doesn't e...","https://jira.spring.io/browse/SPR-11832","closed","","jkschneider","2014-05-29T15:55:03Z","2014-06-24T07:03:19Z"
"","622","make TransactionalTestExecutionListener to support TestNG with invocationCount","https://github.com/cp149/SpringTransactionTestFix, please feel free to add the fix to your version","closed","","cp149","2014-08-16T07:55:29Z","2014-08-17T12:55:17Z"
"","701","Fix issue where FormHttpMessageConverter fails to write multipart data","FormHttpMessageConverter incorrectly determines that the media type ""multipart/form-data; charset=utf-8"" is not multipart. This commit allows the media type to contain a charset parameter.","closed","","royclarkson","2014-12-02T06:28:34Z","2014-12-02T21:08:29Z"
"","698","Fix WebAsyncTask exectorName constructor","Fixes [SPR-12457](https://jira.spring.io/browse/SPR-12457)","closed","","chrisirhc","2014-11-21T00:21:20Z","2015-07-11T06:59:04Z"
"","704","Fixed the output stream incomplete data by explicitly flushing the OutputStreamWriter","Fixed the output stream incomplete data by explicitly flushing the OutputStreamWriter  Don't readily have a unit test for this issue, as it only happens when there is a very large dataset, like in the tens of megs.  This fix has been tested in an enterprise production environment and is fully working.","closed","","aantono","2014-12-04T22:56:54Z","2014-12-05T08:52:45Z"
"","576","DefaultSubscriptionRegistry cache cleanup improvements","Fix SPR-11930 and SPR-11931","closed","","sdeleuze","2014-07-01T10:07:05Z","2021-04-28T09:55:45Z"
"","702","Fix for NPE when creating ProtobufHttpMessageConverter without ExtensionRegistryInitializer","Fix for NPE when creating ProtobufHttpMessageConverter without ExtensionRegistryInitializer","closed","","aantono","2014-12-03T18:28:57Z","2014-12-03T20:01:41Z"
"","612","Enable the possibility to automatically copy selected headers from input message","Extension to @SendToUser annotation to allow the possibility to automatically copy selected headers from input message to output message. Useful to implement RPC pattern and track the association between request and reply.  This is a proposal to solve https://jira.spring.io/browse/SPR-12048","closed","status: declined,","Polve","2014-08-01T15:59:10Z","2021-11-22T09:33:45Z"
"","547","Add JSONP support to MappingJackson2JsonView","Enable JSONP support by wrapping the JSON output into a callback when a JSONP query parameter specifying the function name to use as callback is detected.  Default query parameter names recognized as JSONP ones are ""jsonp"" and ""callback"". This list can be customized if needed.  This commit also fixes JSONView support by removing the view name specified in the model from the output.  Issue: SPR-8346","closed","","sdeleuze","2014-05-27T10:07:33Z","2021-04-28T09:55:42Z"
"","564","Use constructor injection","Edit quick start to use constructor injection","closed","","gregturn","2014-06-23T16:08:20Z","2014-06-24T10:01:54Z"
"","634","Clean Up Deprecated AssertThrows Class","Delete deprecated AssertThrows class,and change the usages to @Test(expected = IllegalArgumentException.class) in ReflectionTestUtilsTests.","closed","","leizhiyuan","2014-08-22T00:02:37Z","2014-08-29T14:08:35Z"
"","633","Clean Up Deprecated AssertThrows Class","Delete deprecated  AssertThrows class,and change the usages to @Test(expected = IllegalArgumentException.class) in ReflectionTestUtilsTests.","closed","","leizhiyuan","2014-08-21T15:23:37Z","2014-08-21T16:02:26Z"
"","640","Merge pull request #1 from SpringSource/master","dd","closed","","yuyonglucky","2014-09-04T07:01:24Z","2014-09-04T07:04:44Z"
"","691","4.1.1","code: package com.freesun.weijia.generate.service;  import com.freesun.weijia.generate.base.BaseTest; import com.freesun.weijia.generate.dataobject.GenerateUserIdDO; import com.freesun.weijia.generate.service.generateuserid.GenerateUserIdService; import org.junit.Assert; import org.junit.Test; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests; import org.springframework.test.context.transaction.TransactionConfiguration; import org.springframework.transaction.annotation.Transactional;  /** - User: yangfei - Date: 2014/11/12 - Time: 13:53 - Desc:请描述该类实现功能   */   @ContextConfiguration(locations={""classpath:springbeans-weijia-generate-dao.xml"", ""classpath:springbeans-weijia-generate-datasource.xml"",""classpath:springbeans-weijia-generate-service.xml"",""classpath:springbeans-weijia-generate-remote.xml""})   @Transactional   @TransactionConfiguration(transactionManager = ""transactionManager"", defaultRollback = true)   public class GenerateUserIdServiceTest extends AbstractTransactionalJUnit4SpringContextTests {      private Logger log = LoggerFactory.getLogger(this.getClass().getName());      @Autowired   private GenerateUserIdService generateUserIdService;      public void setGenerateUserIdService(GenerateUserIdService generateUserIdService) {       this.generateUserIdService = generateUserIdService;   }      @Test   public void insertGetUserGenerateIdTest(){       GenerateUserIdDO generateUserIdDO = new GenerateUserIdDO();       generateUserIdDO.setContent(""u"");       int uid =generateUserIdService.insertGetUserGenerateId(generateUserIdDO);       log.debug(""insertGetUserGenerateIdTest"",uid);       Assert.assertNotNull(uid);   }   }  error: 2014-11-12 15:01:08.408 [main] DEBUG o.s.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [com.freesun.weijia.generate.service.GenerateUserIdServiceTest]  java.lang.UnsupportedClassVersionError: javax/servlet/ServletContext : Unsupported major.minor version 51.0     at java.lang.ClassLoader.defineClass1(Native Method)     at java.lang.ClassLoader.defineClassCond(ClassLoader.java:631)     at java.lang.ClassLoader.defineClass(ClassLoader.java:615)     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)     at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)     at java.net.URLClassLoader.access$000(URLClassLoader.java:58)     at java.net.URLClassLoader$1.run(URLClassLoader.java:197)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:190)     at java.lang.ClassLoader.loadClass(ClassLoader.java:306)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)     at java.lang.ClassLoader.loadClass(ClassLoader.java:247)     at java.lang.Class.getDeclaredConstructors0(Native Method)     at java.lang.Class.privateGetDeclaredConstructors(Class.java:2398)     at java.lang.Class.getConstructor0(Class.java:2708)     at java.lang.Class.getDeclaredConstructor(Class.java:1987)     at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:104)     at org.springframework.test.context.support.AbstractTestContextBootstrapper.instantiateListeners(AbstractTestContextBootstrapper.java:191)     at org.springframework.test.context.support.AbstractTestContextBootstrapper.getTestExecutionListeners(AbstractTestContextBootstrapper.java:173)     at org.springframework.test.context.TestContextManager.(TestContextManager.java:104)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTestContextManager(SpringJUnit4ClassRunner.java:123)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.(SpringJUnit4ClassRunner.java:114)     at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)     at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)     at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)     at java.lang.reflect.Constructor.newInstance(Constructor.java:513)     at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:31)     at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:24)     at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:57)     at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:29)     at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:57)     at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:24)     at org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:33)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:41)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134)","closed","","fyname","2014-11-12T07:30:25Z","2014-11-12T08:30:53Z"
"","625","Clean up spring-core warnings","Clean up compiler warnings in the spring-core. This commit removes unnecessary @SupressWarnings.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","eujungkim","2014-08-18T08:05:43Z","2014-08-18T08:16:57Z"
"","623","Clean Up Deprecated Method Call","change queryForInt to queryForObject","closed","","leizhiyuan","2014-08-16T23:40:35Z","2014-08-17T12:38:39Z"
"","624","Clean Up Deprecated Method Call","change all testcases in spring-jdbc those use queryForInt and queryForLong methods to queryForObject","closed","","leizhiyuan","2014-08-17T00:20:31Z","2014-08-20T23:24:44Z"
"","700","SimpleJdbcInsert now supports using Map","before, all the methods that accepted Map, which prohibited passing in, say, Map even though it's perfectly fine","closed","","The-Alchemist","2014-11-23T01:39:12Z","2014-12-02T22:05:00Z"
"","628","added database-specific data type condition check","Before this commit, when using SimpleJdbcInsert for insert into nvarchar2 it throws java.sql.SQLException(Invalid column type), because nvarchar2 is oracle-specific data type.  So I added Types.OTHER condition check On setValue and setNull methods.  Issue: SPR-8571","closed","","milgarubanjuk","2014-08-19T11:37:25Z","2014-08-19T18:53:13Z"
"","599","Generate bracketless tag id in Velocity forms","Before this change if Velocity Spring form macro was bound to a path which contains square brackets, those brackets would also appear in id of generated tag, making the id invalid.  As of this fix all Velocity Spring form macros generate tag with id that does not contain square brackets.  Issue: SPR-5172","closed","","rwinch","2014-07-21T18:11:56Z","2014-07-22T19:41:15Z"
"","530","Add space separator in JsonPathExpectationsHelper","At the moment `.andExpect(jsonPath(""products[*].id"").value(...))` results in the failures like so:     java.lang.AssertionError: JSON pathproducts[*].id      Expected :[1]     Actual   :[]  Having some separator after ""JSON path"" would make it more readable.","closed","","panchenko","2014-04-25T11:05:41Z","2014-06-14T13:06:58Z"
"","652","adding check if logger is in debug mode to avoid string concatenation of...","adding check if logger is in debug mode to avoid string concatenation of the whole response object which might get quite large.  At the moment object concatenation is done always although it's only required in debug mode.  I've been tracking CPU usage of my application and multiple times have I seen in thread dump that concatenation taking a lot of CPU where I actually don't need it (as I'm not running in debug mode)","closed","","usultis","2014-09-26T09:36:10Z","2014-09-29T13:38:31Z"
"","556","Fixing issue SPR-11846 - https://jira.spring.io/browse/SPR-11846","Adding annotation `@ComponentScan` to the documentation. The annotation does not exist in the official documentation.","closed","","paulojribp","2014-06-05T15:19:04Z","2014-06-12T05:33:53Z"
"","686","Adding a try/catch to print errors when JMX published proxies cannot get their target beans","Adding a try/catch to print errors when JMX published proxies cannot get their target beans  We use the @ManagedResource and @ManagedOperation all the time.  Since most of our singletons are lazy when it publishes the managed JMX bean it creates a cglib proxy to register with the mbean server in order to preserve the laziness.  This is good.  The first time this JMX method is invoked, the bean is retrieved from the container and the managed operation method is invoked.  If anything fails in between the mbean server calling the proxy and the proxy calling our application code inside the operation -- the exception will go back through RMI and if the client is JConsole or JVisualVm then it will fail as the exception classes aren't on those classpaths.  It would be nice if spring would provide a way to enable logging in these scenarios.    This PR adds a try/catch to log an error when the getTarget fails as would be the case here.  This would only affect generated proxies, which I think is a narrow change that doesn't seem to have any negative consequences.  When would you not want to log an error here?  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.  Issue: SPR-12399","closed","","steveash","2014-10-30T16:10:19Z","2014-11-10T20:41:09Z"
"","703","Clarified the reference doc that about Async methods returning value","Added little more documentation around how methods annotated with `@Async` and return results can wrap a response with `org.springframework.scheduling.annotation.AsyncResult`.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","bijukunjummen","2014-12-04T13:08:05Z","2015-07-16T02:32:47Z"
"","588","Added matcher to check for specific error on a field","Added a method within the ModelResultMatcher that will allow a user to assert whether the returned Model has an attribute with a field that has a specific error text/ key associated with it.  In the last project I worked on we used mockMvc extensively.  In a particuar, we used mockMvc for JSR-303 validations and wanted to assert that a specific key was set as the error on a specific field.  Unfortunately we could not find any matcher to help us with this, so we extended the current ModelResultMatcher, with the method present within this request.  Issue: SPR-11971  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","lfarmer","2014-07-08T08:27:30Z","2014-07-11T15:03:16Z"
"","552","While registering an excludePathPattern an includePathPattern is also required","Added a check for emtpyness of `excludePatterns` next to the `includePatterns`  Issue: SPR-11130  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","mdeinum","2014-06-04T12:51:33Z","2014-07-18T03:50:14Z"
"","561","Added a cache to transaction manager lookup to alleiviate locking issue...","Added a cache to tranbsaction manager lookup to alleiviate locking issues when we have more than one transaction manager present in application.","closed","","serioussam","2014-06-13T04:38:07Z","2018-07-14T09:29:06Z"
"","668","Add throwing BeanDefinitionStoreException in loadBeanDefinitions method","Add throwing BeanDefinitionStoreException in loadBeanDefinitions method if ClassNotFoundException is occurred and number of beans registered by scanner is 0. Issue: SPR-10900","closed","","antonigaudi","2014-10-21T07:47:39Z","2014-10-22T00:38:07Z"
"","649","Expose @Bean method metadata in BeanDefinitions","Add BeanMethodBeanDefinition which extends AnnotatedBeanDefinition and additionally exposes @Bean MethodMetadata. The existing @Condiguration class reader has been updated to expose the new BeanDefinition type.  Issue:","closed","","philwebb","2014-09-21T18:02:51Z","2014-09-26T12:36:46Z"
"","631","Add Travis CI configuration","Add basic Travis CI configuration.  Travis will test pull request and branches to ensure they compile and pass tests.  Go to https://travis-ci.org/profile/ and flip the switch to ""ON"" for ""spring-projects/spring-framework"" then merge this pull request.","closed","status: declined,","candrews","2014-08-21T04:50:00Z","2019-11-14T13:26:57Z"
"","538","Poi excel view","Add abstract view for xlsx document using apache-poi","closed","","f0rth3","2014-05-11T19:57:29Z","2021-11-12T12:40:20Z"
"","529","Fix DefaultSubscriptionRegistry when using pattern destinations","Add a pattern destination subscription status in order to use the destination cache only when there is no subscription on a pattern destination.  Issue: SPR-11657","closed","","sdeleuze","2014-04-24T16:40:16Z","2021-04-28T09:55:38Z"
"","551","SPR-8045: MBeanExporter should register MBeans later than the initializa...","...tion phase  Implemented `SmartLifecycle` together with the ability to configure to `phase` and `autoStartup` property.   I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","mdeinum","2014-06-04T11:11:21Z","2014-06-12T23:11:46Z"
"","580","Added a cache to tranbsaction manager lookup to alleiviate locking issue...","...s when we have more than one transaction manager present in application.  I am very interested in this patch and therefore rebasing https://github.com/serioussam/spring-framework/commit/24a3899cc119417f088b32a61acec96d5724d5ea from @serioussam on top of master.  Please let me know if I can help in any way.  Thanks,","closed","","bmahe-tango","2014-07-03T22:00:38Z","2014-07-04T14:48:09Z"
"","615","Registering custom argument resolvers within the ExceptionHandlerExcepti...","...onResolver.  By default the ExceptionHandlerExceptionResolver completely ignores the custom arguments resolvers that were registered within the web application. This patch registers within ExceptionHandlerExceptionResolver the same arguments resolvers that are used by the controllers, allowing to inject parameters into @ExceptionHandler annotated methods.  Issue: SPR-12058  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","jmnarloch","2014-08-02T18:54:39Z","2016-01-29T20:00:52Z"
"","655","Fixing SPR-12239 adding @AjSuppressWarnings on some advices to avoid war...","...nings when a developer only uses some aspects of spring-aspects.   I submitted the CLA  https://jira.spring.io/browse/SPR-12239","closed","","kicktipp","2014-09-30T19:11:35Z","2014-10-01T14:30:48Z"
"","16798","Spring MVC 4.1.0.RC2 fails content negotiation on 'text/plain' and Accept '*/*' [SPR-12184]","**[강동윤](https://jira.spring.io/secure/ViewProfile.jspa?name=ceram1)** opened **[SPR-12184](https://jira.spring.io/browse/SPR-12184?redirect=false)** and commented  It returns normal if Accept header is `'\*/\*;q=1'` (even q=0), but returns 406 on `Accept:'\*/\*'`.  I can return appication/json with `Accept: '\*/\*'`, but cannot return text/plain with `Accept: '\*/\*'`.  ----- Test Result -----  ``` Accept: '*/*' Content-Type: application/json (Jackson2) -> 200 OK   Accept: '*/*' Content-Type: text/plain (String + StringHttpMessageConverter) -> 406 Not Acceptible   Accept: '*/*;q=1' Content-Type: application/json (Jackson2) -> 200 OK   Accept: '*/*;q=1' Content-Type: text/plain (String + StringHttpMessageConverter) -> 200 OK ```    ---  **Affects:** 4.1 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/e593b088ca18171f0505a2c0dbb7132e4c58f2e5, https://github.com/spring-projects/spring-framework-issues/commit/36ec5e280d6216e245898c69c3666b80256c38e9  2 votes, 4 watchers","closed","status: invalid,","spring-projects-issues","2014-09-11T21:05:30Z","2019-01-14T05:15:13Z"
"","16523","Conflict spring 4.1.0 (and spring 4.0.5 and low) with Hibernate 4.3.5 [SPR-11904]","**[Дмитрий](https://jira.spring.io/secure/ViewProfile.jspa?name=rabbit.93)** opened **[SPR-11904](https://jira.spring.io/browse/SPR-11904?redirect=false)** and commented  Spring Framework 4.0.5 good work with hibernate 4.2.13, but because of necessary work with postgresql 9 were installed hibernate 4.3.5, and appeared next error. ""Invocation of init method failed; nested exception is java.lang.NoSuchMethodError: org.hibernate.engine.spi.SessionFactoryImplementor.getConnectionProvider()Lorg/hibehttps://jira.spring.io/secure/WikiRendererHelpAction.jspa?section=texteffectsrnate/service/jdbc/connections/spi/ConnectionProvider;""  If use hibernate 4.2.13 then print other error: ""Invocation of init method failed; nested exception is org.hibernate.exception.SQLGrammarException: could not insert: [ru.openbs.redbutton.domain.Customer]"" because necessary hibernate 4.3.5.  I try insert in postgresql 9 data base   ---  **Affects:** 4.0.5, 4.1 GA","closed","status: invalid,","spring-projects-issues","2014-06-24T03:23:53Z","2019-01-12T05:25:48Z"
"","17058","NPE in org.springframework.core.MethodParameter.getParameterName (possible race condition) [SPR-12453]","**[Ömer Yildiz](https://jira.spring.io/secure/ViewProfile.jspa?name=mcescher)** opened **[SPR-12453](https://jira.spring.io/browse/SPR-12453?redirect=false)** and commented  I have a spring application running on google app engine and today i've encountered the following exception. Judging from the source code that NPE should never happen unless two threads access the method at the same time.  This is the place where it happens:  ``` public String getParameterName() {      if (this.parameterNameDiscoverer != null) {           String[] parameterNames = (this.method != null ?                         this.parameterNameDiscoverer.getParameterNames(this.method) :                         this.parameterNameDiscoverer.getParameterNames(this.constructor));           if (parameterNames != null) {                this.parameterName = parameterNames[this.parameterIndex];           }           this.parameterNameDiscoverer = null;      }      return this.parameterName; } ```  The NPE occurs on line 4, i.e. parameterNameDiscoverer==null. But as there's a prior null-check I suspect, that another thread B wins the race by setting parameterNameDiscoverer to null before thread A gets to line 4.  ``` java.lang.NullPointerException 	at org.springframework.core.MethodParameter.getParameterName(MethodParameter.java:367) 	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.updateNamedValueInfo(AbstractNamedValueMethodArgumentResolver.java:140) 	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.getNamedValueInfo(AbstractNamedValueMethodArgumentResolver.java:120) 	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:87) 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77) 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:157) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:124) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:749) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:689) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:938) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:870) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961) 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:863) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:637) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at myfilter.doFilter(AppEngineAuthFilter.java:63) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:150) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:199) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344) 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at com.google.apphosting.utils.servlet.ParseBlobUploadFilter.doFilter(ParseBlobUploadFilter.java:125) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at com.google.apphosting.runtime.jetty.SaveSessionFilter.doFilter(SaveSessionFilter.java:35) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at com.google.apphosting.utils.servlet.JdbcMySqlConnectionCleanupFilter.doFilter(JdbcMySqlConnectionCleanupFilter.java:60) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at com.google.apphosting.utils.servlet.TransactionCleanupFilter.doFilter(TransactionCleanupFilter.java:43) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388) 	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) 	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182) 	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) 	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418) 	at com.google.apphosting.runtime.jetty.AppVersionHandlerMap.handle(AppVersionHandlerMap.java:254) 	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) 	at org.mortbay.jetty.Server.handle(Server.java:326) 	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542) 	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:923) 	at com.google.apphosting.runtime.jetty.RpcRequestParser.parseAvailable(RpcRequestParser.java:76) 	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) 	at com.google.apphosting.runtime.jetty.JettyServletEngineAdapter.serviceRequest(JettyServletEngineAdapter.java:146) 	at com.google.apphosting.runtime.JavaRuntime$RequestRunnable.run(JavaRuntime.java:480) 	at com.google.tracing.TraceContext$TraceContextRunnable.runInContext(TraceContext.java:438) 	at com.google.tracing.TraceContext$TraceContextRunnable$1.run(TraceContext.java:445) 	at com.google.tracing.CurrentContext.runInContext(CurrentContext.java:220) 	at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContextNoUnref(TraceContext.java:309) 	at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContext(TraceContext.java:301) 	at com.google.tracing.TraceContext$TraceContextRunnable.run(TraceContext.java:442) 	at com.google.apphosting.runtime.ThreadGroupPool$PoolEntry.run(ThreadGroupPool.java:251) 	at java.lang.Thread.run(Thread.java:724) ```  Edit: The controller method which caused that exception:  ``` @RequestMapping(value = ""channel"", method = RequestMethod.POST, consumes = ""application/x-www-form-urlencoded"") @ResponseStatus(value = HttpStatus.NO_CONTENT) public void handle(@RequestParam String arg1, @RequestParam String arg2, @RequestParam String arg3) {         .... the body obviously doesn't get called, the request fails while processing the @RequestParams } ```  ---  **Affects:** 3.2.12, 4.0.8  **Issue Links:** - #14382 Share MethodParameter cache between HandlerMethods  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1), [3.2.13](https://github.com/spring-projects/spring-framework/milestone/101?closed=1)  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2014-11-20T01:52:33Z","2019-01-11T19:27:34Z"
"","17095","be more defensive looking up javax.annotation.Priority (jdk6 compatibility) [SPR-12489]","**[zyro](https://jira.spring.io/secure/ViewProfile.jspa?name=zyro)** opened **[SPR-12489](https://jira.spring.io/browse/SPR-12489?redirect=false)** and commented  ref. comments: #16962  when javax.annotation.Priority is accidentially present on a jdk6 apps classpath, the lookup in OrderUtils (https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/annotation/OrderUtils.java#L41) causes a java.lang.UnsupportedClassVersionError.  should likely be handled a bit more defensively. thanks, zyro  ---  **Affects:** 4.1.2  **Reference URL:** #16962  **Issue Links:** - #16962 Improve diagnostics when OrderUtils.getPriority encounters an ArrayStoreException during annotation introspection","closed","in: core,","spring-projects-issues","2014-12-01T09:04:45Z","2019-01-14T05:14:07Z"
"","16852","WebSocketMessageBrokerConfigurationSupport requiring JDK 7+ due to setRemoveOnCancelPolicy [SPR-12238]","**[zyro](https://jira.spring.io/secure/ViewProfile.jspa?name=zyro)** opened **[SPR-12238](https://jira.spring.io/browse/SPR-12238?redirect=false)** and commented  https://github.com/spring-projects/spring-framework/blob/master/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketMessageBrokerConfigurationSupport.java#L104  calls http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/concurrent/ThreadPoolTaskScheduler.html#setRemoveOnCancelPolicy-boolean-  which requires JDK 1.7+  example JDK 1.6 stacktrace-snippet:  ``` Caused by BeanDefinitionStoreException: Factory method [public org.springframework.web.servlet.HandlerMapping org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupport.stompWebSocketHandlerMapping()] threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'messageBrokerSockJsTaskScheduler' defined in class org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration: Invocation of init method failed; nested exception is  java.lang.NoSuchMethodError: java.util.concurrent.ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy(Z)V ```  thanks, zyro  ---  **Affects:** 4.0.6, 4.0.7, 4.1 GA  **Issue Links:** - #16537 Prevent accumulation of cancelled SockJS heartbeat tasks - #17071 Fix for issue SPR-12238 not working on IBM java_1.7_64 - #16863 Message broker thread pools should be set up in allowCoreThreadTimeOut mode  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0c680d6d0399639be24047e5a68ef096993d00c3, https://github.com/spring-projects/spring-framework/commit/e003d217261695270a5a5d486ed2e634c0969d93  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","type: bug,","spring-projects-issues","2014-09-23T00:38:51Z","2019-01-14T05:14:56Z"
"","16750","allow value expressions for messaging listener annotation destinations [SPR-12134]","**[zyro](https://jira.spring.io/secure/ViewProfile.jspa?name=zyro)** opened **[SPR-12134](https://jira.spring.io/browse/SPR-12134?redirect=false)** and commented  using jms messaging as example here. but probably other messaging impls (websocket, amqp, etc.) show the same behavior.  currently, only ""plain"" String destinations are supported for the destination argument of `@JmsListener`. we faced a use case where it made sense to pull those values out of properties. i think this can be generalized to a request for support of injection/resolution of value expressions for destination arguments (e.g. just like it works with `@Value`).  the following example code shows our current workaround, which could likely be implemented in a better way but it shows the desired behavior:  ```java @Configuration @EnableJms public class JmsConfiguration {  	@Autowired 	private CustomDynamicDestinationResolver destinationResolver; 	 	@Bean 	public DefaultJmsListenerContainerFactory jmsListenerContainerFactory(final ConnectionFactory connectionFactory) { 		final DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory(); 		factory.setConnectionFactory(connectionFactory); 		factory.setDestinationResolver(destinationResolver); 		return factory; 	}  }  @Component public class ExampleReceiver {  	@JmsListener(containerFactory = ""jmsListenerContainerFactory"", destination = ""${my.destination.value.expression.property.key}"") 	public void handleMessage(String example) { 		System.out.println(example); 	}  }  @Component public class CustomDynamicDestinationResolver extends DynamicDestinationResolver {  	@Autowired 	private AbstractBeanFactory beanFactory; 	 	@Override 	public Destination resolveDestinationName(Session session, String destinationName, boolean pubSubDomain) throws JMSException { 		String parsedDestinationName = beanFactory.resolveEmbeddedValue(destinationName); 		return super.resolveDestinationName(session, parsedDestinationName, pubSubDomain); 	} 	 } ```  thanks, zyro   ---  **Affects:** 4.1 RC2  **Issue Links:** - [AMQP-424](https://jira.spring.io/browse/AMQP-424) Allow value expressions for messaging listener annotation destinations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8c4388dd6e7f44ff230644c4fb3bc204d0b6ff60","closed","type: enhancement,","spring-projects-issues","2014-08-29T04:27:04Z","2014-09-04T05:31:19Z"
"","16608","user destinations docs are missing the brokerPrefix [SPR-11992]","**[zyro](https://jira.spring.io/secure/ViewProfile.jspa?name=zyro)** opened **[SPR-11992](https://jira.spring.io/browse/SPR-11992?redirect=false)** and commented  in order to send messages to user destinations you need to supply the userDestinationPrefix and the brokerPrefix or else UserDestinationMessageHandler will resolve the destination but then SimpleBrokerMessageHandler will ignore it because it lacks a brokerPrefix.  at least thats the behavior i am currently seeing. taking a quick look at the portfolio sample app, it is done there just like that (userDestinationPrefix + brokerPrefix) - https://github.com/rstoyanchev/spring-websocket-portfolio/blob/master/src/main/webapp/traditional/portfolio.js.  it looks like the docs are missing that part: http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html#websocket-stomp-user-destination only mentions the userDestinationPrefix  the linked github issue above is primarily for reference showing an example of the resulting confusion ;)  thanks, zyro   ---  **Affects:** 4.0.5, 4.0.6  **Reference URL:** https://github.com/zyro23/grails-spring-websocket/issues/6#issuecomment-48935879  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/96efafef974b8222d3172cf60c9930de2f7929dd, https://github.com/spring-projects/spring-framework/commit/70ccbbfab13e4546462fcbfcd7cb83db2fce746b","closed","in: web,","spring-projects-issues","2014-07-14T12:44:40Z","2014-08-15T01:52:45Z"
"","16393","Allow configuration of path mapping options for websocket handler mapping (e.g. alwaysUseFullPath) [SPR-11771]","**[zyro](https://jira.spring.io/secure/ViewProfile.jspa?name=zyro)** opened **[SPR-11771](https://jira.spring.io/browse/SPR-11771?redirect=false)** and commented  when we got a scenario like this:  * `DispatcherServlet` `servlet-mapping` like `\*.do` and `/stomp/\*` * stomp endpoint registration on `/stomp`  the requests will not match because `AbstractHandlerMapping.alwaysUseFullPath` is `false` by default and so e.g. a request to `/stomp/info` will lead to a lookup-path of `/info` which does not match the sockJS handler-mapping, that gets a pattern of `/stomp/**`  dirty workaround for me was `applicationContext.getBean(""stompWebSocketHandlerMapping"").setAlwaysUseFullPath(true)` when the context is fully loaded.  would be cool to get a chance to configure the handlerMapping itself, or at least the `alwaysUseFullPath` flag using `AbstractWebSocketMessageBrokerConfigurer`, without needing to fall back to `WebSocketMessageBrokerConfigurationSupport` overrding the whole handlerMapping bean.  maybe relevant for `webSocketHandlerMapping` as well?  ---  **Affects:** 4.0.4  **Issue Links:** - #17222 Configuration of path mapping options for websockets via XML  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2014-05-09T01:44:54Z","2019-01-11T21:15:15Z"
"","16789","Default conversion from and to java.util.stream.Stream [SPR-12175]","**[Yujun Liang](https://jira.spring.io/secure/ViewProfile.jspa?name=yujunliang)** opened **[SPR-12175](https://jira.spring.io/browse/SPR-12175?redirect=false)** and commented  Similar to these, but it is for Stream from Java 8,  ```xml      foo     bar  ```  ```xml                                                                         ```    ---  **Reference URL:** http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/91b3caf238de067edaac5c4228605ca0d797516f, https://github.com/spring-projects/spring-framework/commit/018adb04f26ba51e680449eb60b357de0b9c960f  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-09-10T18:33:24Z","2015-05-26T01:15:31Z"
"","16913","Private @Scheduled methods end up on 'empty' proxy instance in case of CGLIB auto-proxying [SPR-12308]","**[Yonatan Graber](https://jira.spring.io/secure/ViewProfile.jspa?name=yonatan)** opened **[SPR-12308](https://jira.spring.io/browse/SPR-12308?redirect=false)** and commented  When having a bean with a `@Scheduled` private method, the scheduled invocation when a pointcut exists for that method will succeed, but nothing will get injected into `@Autowired` fields. Setting other visibility for the method would solve it.  For example:  ```java @Service @EnableScheduling public class MyService {     @Autowired     private MyInjectedBean bean;      @Scheduled(fixedDelay = 5000)     private void ping(){         System.out.println(""Pinging bean ""+bean);         bean.doWork();     } } ```  The above code will work if no AOP is defined. If an `@Around` aspect is defined, ping will throw a `NullPointException`. Changing ping to be package protected will cause it to work again.  If there's a technical implementation problem with scheduling a private method under those conditions, I expect it to fail the deployment, rather than providing a sterile, non-injected bean.   ---  **Affects:** 3.2.11, 4.0.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/473d97350ebec5038e2f88fbf5cf6cfaf4bdbcf4, https://github.com/spring-projects/spring-framework/commit/01724d3b6dbe1678e3a192de7369b2dde46579a6, https://github.com/spring-projects/spring-framework/commit/47ed4d634b1fda70400fd987f311ffaa268f38e1  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)","closed","in: core,","spring-projects-issues","2014-10-07T00:50:17Z","2014-11-10T23:12:28Z"
"","16637","MarshallingView should avoid creating a temporary ByteArrayOutputStream [SPR-12021]","**[Yaowen Tu](https://jira.spring.io/secure/ViewProfile.jspa?name=ytu)** opened **[SPR-12021](https://jira.spring.io/browse/SPR-12021?redirect=false)** and commented  While reading the code, I found that the ByteArrayOutputStream is not really necessary, can we do something like this instead?  ``` CountingOutputStream cos = new CountingOutputStream(response.getOutputStream()); 		this.marshaller.marshal(toBeMarshalled, new StreamResult(cos));  		setResponseContentType(request, response); 		response.setContentLength(cos.getCount()); ```  In this way we avoid a temporary ByteArrayOutputStream which could be huge in some cases.  I am not an expert in Spring, so if there is a good reason, please let me know.   --- No further details from [SPR-12021](https://jira.spring.io/browse/SPR-12021?redirect=false)","closed","type: enhancement,","spring-projects-issues","2014-07-22T12:26:34Z","2018-12-12T16:27:30Z"
"","16934","Regression: Commons Logging setup in AnnotationUtils causes early initialization of logging system [SPR-12329]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-12329](https://jira.spring.io/browse/SPR-12329?redirect=false)** and commented  I am using log4j, and using a custom system property ""app.home"" placeholder in log4j configuration.  ```xml  ```  set system property with a ServletContextListener.contextInitialized(), It works fine util I have more than one WebApplicationInitializers, after my investigation, I found it caused by SpringServletContainerInitializer  ```java AnnotationAwareOrderComparator.sort(initializers); ```  AnnotationAwareOrderComparator depends on org.springframework.core.annotation.AnnotationUtils, AnnotationUtils used commons-logging, It will make my log4j premature, ""app.home"" will eval as empty since SpringServletContainerInitializer is executed before any ServletContextListener.contextInitialized().  please remove logging from AnnotationUtils, it's not useful. or use java.util.logging instead.  ---  **Affects:** 4.0.7, 4.1.1  **Issue Links:** - #16493 AnnotationUtils.findAnnotation fails with poor diagnostics if it encounters an Annotation that references an unloadable class - #16930 AnnotationUtils provides poor diagnostics if getDeclaredAnnotations throws an exception  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","in: core,","spring-projects-issues","2014-10-13T19:34:26Z","2019-01-11T19:13:04Z"
"","16665","Missing custom entity type filter in LocalSessionFactoryBean [SPR-12049]","**[Yang Ou](https://jira.spring.io/secure/ViewProfile.jspa?name=you)** opened **[SPR-12049](https://jira.spring.io/browse/SPR-12049?redirect=false)** and commented  In  org.springframework.orm.hibernate3 we use to use the AnnotationSessionFactoryBean which allows us to set custom EntityTypeFilter. However, when we decide to move to hibernate4, we are recommended to use this LocalSessionFactoryBean which doesn't seem to support custom EntityTypeFilter.   ---  **Affects:** 4.0.5  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3227569a38a677aeebee6cb13d945c3fea6c10cb","closed","type: enhancement,","spring-projects-issues","2014-07-30T10:53:26Z","2014-08-15T01:52:46Z"
"","16435","spring bean can't reference a parent bean using ${} notation [SPR-11815]","**[Yair Ogen](https://jira.spring.io/secure/ViewProfile.jspa?name=yairogen)** opened **[SPR-11815](https://jira.spring.io/browse/SPR-11815?redirect=false)** and commented  Consider a case where a bean needs to inherit another bean bot the parent bean name is configurable.  For example, this won't work:  ```xml  ```    ---  **Affects:** 3.2.1  3 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-05-25T03:20:15Z","2019-01-12T00:19:29Z"
"","16816","Create an HttpMessageConverter for Groovy/Boon JSON support [SPR-12202]","**[William Gorder](https://jira.spring.io/secure/ViewProfile.jspa?name=wgorder)** opened **[SPR-12202](https://jira.spring.io/browse/SPR-12202?redirect=false)** and commented  I had brought this up at a talk during s2gx and Rossen suggested a feature request.  The basic premise is the performance benefit of a Groovy parser if the user is already using Groovy.  http://rick-hightower.blogspot.com/2014/04/groovy-and-boon-provide-fastest-json.html  Boon is one such framework which is already getting support in Spring Integration. https://jira.spring.io/browse/INT-3370  However even without Boon Groovy offers nice support.  Of course the second part would bleed over into Spring Boot...  I would say smarter detection of this in Spring Boot would be nice, so that  we do not have to jump through hoops to avoid including jackson libs on the classpath.   ---  **Issue Links:** - [INT-3370](https://jira.spring.io/browse/INT-3370) Investigate Implementating a Boon JsonObjectMapper  0 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-09-16T09:21:02Z","2019-01-14T05:15:07Z"
"","16917","Add support for validating a collection of objects [SPR-12312]","**[Will May](https://jira.spring.io/secure/ViewProfile.jspa?name=wjam)** opened **[SPR-12312](https://jira.spring.io/browse/SPR-12312?redirect=false)** and commented  Add support for being able to validate a list of objects similar to the example below, where Foo is a class which has various JSR 303 annotations on its fields:  ```java @RequestMapping(value = ""/foo"", method = RequestMethod.POST) public void insertFoos(@Valid @RequestBody List foos) {   ... } ```  I've managed to partially implement the functionality by extending the `LocalValidatorFactoryBean` and setting the nested path to the current list path (`[i]`) while calling `super.validate` in a loop. This almost works apart from the fact that the `BeanWrapper` cannot retrieve an invalid value if one fails validation and so throws an exception while trying to throw an exception.  So, in summary, the BeanWrapper needs to be able to work directly on lists rather than only being able to work on objects containing lists.  ---  **Affects:** 4.0.7  **Issue Links:** - #18007 `@Validated` support on Iterables (and implementors) - #19182 Validate values in top-level Map parameters  1 votes, 4 watchers","open","type: enhancement,","spring-projects-issues","2014-10-07T08:10:20Z","2020-08-24T17:39:28Z"
"","16481","Wrong class name in multiple transaction managers section, spring documentation. [SPR-11862]","**[Wiesław Młynarski](https://jira.spring.io/secure/ViewProfile.jspa?name=wmlynarski)** opened **[SPR-11862](https://jira.spring.io/browse/SPR-11862?redirect=false)** and commented  Hi, I am first time posting an issue to Jira. I hope I created the ticket correctly.  http://docs.spring.io/spring/docs/4.1.0.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/  In the documentation, in section Multiple Transaction Managers with the class name is wrong: is :org.springframework.jdbc.DataSourceTransactionManager should be: org.springframework.jdbc.datasource.DataSourceTransactionManager  ```          ...                             ...               ```    ---  **Affects:** 4.1 GA  **Reference URL:** http://docs.spring.io/spring/docs/4.1.0.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6b6b008c1fa4bc40e676803a966917d90ced78fc","closed","type: bug,","spring-projects-issues","2014-06-10T05:12:33Z","2014-07-18T10:16:38Z"
"","16694","setting spring.profiles.default=""${spring.profiles.default}"" causes a infinite recursion [SPR-12078]","**[Wenhao Ji](https://jira.spring.io/secure/ViewProfile.jspa?name=zetaplusae)** opened **[SPR-12078](https://jira.spring.io/browse/SPR-12078?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8dbfa80b132d583fe7a26555f9a2842ced6a50cf","closed","in: core,","spring-projects-issues","2014-08-12T06:52:12Z","2019-01-12T05:25:29Z"
"","17059","AnnotationJmxAttributeSource is unable to handle aspectj proxified class  [SPR-12454]","**[Vladimir Dolzhenko](https://jira.spring.io/secure/ViewProfile.jspa?name=vdolzhenko)** opened **[SPR-12454](https://jira.spring.io/browse/SPR-12454?redirect=false)** and commented  In case of bean is wrapped with AspectJ proxy or CGLIB the bean loss its annotation metadata because getManagedResource(Class beanClass) operates with bean class directly while it could be proxified via AspectJ or CGLIB.    ---  **Affects:** 4.0.8  **Attachments:** - [pom.xml](https://jira.spring.io/secure/attachment/22373/pom.xml) (_1.13 kB_)","closed","status: bulk-closed,","spring-projects-issues","2014-11-20T03:26:26Z","2019-01-12T00:17:59Z"
"","16641","Issue with JPA Transaction Manager - Transaction roll back only exception [SPR-12025]","**[Vivek Lingesan](https://jira.spring.io/secure/ViewProfile.jspa?name=vivek_kivi)** opened **[SPR-12025](https://jira.spring.io/browse/SPR-12025?redirect=false)** and commented  Hi,  I have a method which does two DB insert operation. Both are under single transaction. I am using ""org.springframework.orm.jpa.JpaTransactionManager"", spring-orm-3.2.3.RELEASE.jar.  ```java @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, readOnly = false) methodA() {  	objectOneRepository.saveAndFlush(objectOne);  	try { 		objectLogRepository.saveAndFlush(objectLog); 	} catch (Exception excep){ 		// LOG EXCEPTION AND CONTINUE; 	}  } ```  If the first save is successful, I need to log the status to logger table. If the logger table save fails I should catch and continue the flow. Under this scenario once the flow comes out of the method transaction manager calls commit method, but some how spring transaction manager internally sets roll back flag when the methodA() throws exception. Bacause of this trasaction manager throws ""transaction marked rollback only"" exception. I am not able to insert data in ""objectOne"". I tried by moving the entire try catch to new method and gave new transaction as Propagation.REQUIREDNEW. This is also not working.  Is there any way I can over come this transaction management issue ? Please help me.  Thanks, Vivek Lingesan   ---  **Affects:** 3.2.3","closed","status: invalid,","spring-projects-issues","2014-07-23T14:31:56Z","2019-01-12T05:25:36Z"
"","16433","Add events for subscribe/unsubscribe stomp commands [SPR-11813]","**[Vinicius Carvalho](https://jira.spring.io/secure/ViewProfile.jspa?name=viniciuscarvalho)** opened **[SPR-11813](https://jira.spring.io/browse/SPR-11813?redirect=false)** and commented  We are missing subscribe/unsubscribe events on this module.  One good case for it would be the ability to perform some house cleaning on those events.  When using the StompBrokerRelay with RabbitMQ for example, once a client disconnects, we could remove the queue (for some reason rabbit 3.3.4 creates durable queues)  And because StompBrokerRelayMessageHandler is not a spring bean, not even using spring AOP was a choice for me when using the framework.   ---  **Affects:** 4.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1c91a52639ee61aa901b608c9115087de617536d","closed","type: enhancement,","spring-projects-issues","2014-05-22T15:56:24Z","2014-07-18T10:16:31Z"
"","16970","Inefficient new Byte, Integer, Character constructor calls in ASM ClassReader [SPR-12365]","**[vincent Kim](https://jira.spring.io/secure/ViewProfile.jspa?name=vincent)** opened **[SPR-12365](https://jira.spring.io/browse/SPR-12365?redirect=false)** and commented  There are some inefficient new Byte, Character, Integer constructor in ClassReader class.  -> ex) av.visit(name, new Byte((byte) readInt(items[readUnsignedShort(v)])));  It would be better for performance to use  static method, valueOf(),.  Such as Byte.valueOf(), Character.valueOf(), Integer.valueOf().  In valueOf method, cached values will be returned.  For giving better performance, use valueOf static method instead of new Constructor.  ---  **Affects:** 4.1.1  **Issue Links:** - #16990 String comparison using .equals() in ASM ClassReader  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b16048b061ee18d5928f208dd6a9a64624fdf587","closed","type: enhancement,","spring-projects-issues","2014-10-23T00:41:31Z","2019-01-11T19:25:02Z"
"","16958","Add Object type to Comparable for removing raw type warning in StandardTypeComparator [SPR-12353]","**[vincent Kim](https://jira.spring.io/secure/ViewProfile.jspa?name=vincent)** opened **[SPR-12353](https://jira.spring.io/browse/SPR-12353?redirect=false)** and commented  There is raw type warning in StandardTypeComparator, spring-expression project.  Comparable raw type should be Comparable \.    ---  **Affects:** 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/92ad02ae8fd461cda2e61ecae8933e7a8d3cff2d","closed","type: enhancement,","spring-projects-issues","2014-10-20T07:07:59Z","2019-01-11T19:26:06Z"
"","16957","Delete unused import in HttpSessionHandshakeInterceptor class [SPR-12352]","**[vincent Kim](https://jira.spring.io/secure/ViewProfile.jspa?name=vincent)** opened **[SPR-12352](https://jira.spring.io/browse/SPR-12352?redirect=false)** and commented  There is unused import  -> import org.springframework.util.CollectionUtils;  in HttpSessionHandshakeInterceptor class.  It should be deleted.   ---  **Affects:** 4.1.1  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/665, and commits https://github.com/spring-projects/spring-framework/commit/b6fdcffc94a17ec30e5a9d24d7e62e2a54b928ca","closed","type: enhancement,","spring-projects-issues","2014-10-20T06:49:57Z","2014-11-17T06:42:21Z"
"","17169","Strange Behaviour when using Before and Around Advice together  [SPR-12568]","**[vijay jumbad](https://jira.spring.io/secure/ViewProfile.jspa?name=vijayvj)** opened **[SPR-12568](https://jira.spring.io/browse/SPR-12568?redirect=false)** and commented  I created Configuration based AnnotationConfigApplicationContext . AnnotationConfigApplicationContext appContext = new AnnotationConfigApplicationContext( DemoConfiguration.class);  Using Aspectj annotation I tried to use Before ,After and Around advice for a particular Spring bean.  `@Before`(value = ""execution (* com.vijay.AOPExample.codingArtifacts.**Service.**(..))"") public void authenticate() throws Throwable {      	System.out.println(""Calling Authentication Mechanism..."");     	System.out.println(""Authentication Successful..."");     }          @After(value = ""execution (* com.vijay.AOPExample.codingArtifacts.*Service.*(..))"")     public void audit() {     	System.out.println(""Doing Audit..."");     	System.out.println(""Audit Completed...."");     }          @Around(value = ""execution (* com.vijay.AOPExample.codingArtifacts.*Service.*(..))"")     public void performTest() {     	System.out.println("" System time is "" + System.nanoTime());     }  The above annotations were expected to be applied to spring CalculationService bean. But instead of executing the bean method and applying the advices it only applied After advice and part of Around advice  and no service method functionality was executed.  Source code is attached for the reference.   ---  **Affects:** 4.1.3  **Attachments:** - [TutorialSpring.zip](https://jira.spring.io/secure/attachment/22444/TutorialSpring.zip) (_5.91 kB_)","closed","in: core,","spring-projects-issues","2014-12-24T07:45:31Z","2019-01-12T05:24:52Z"
"","16379","Multiple bean instances are created when no id is specified [SPR-11757]","**[Victor Perepelitsky](https://jira.spring.io/secure/ViewProfile.jspa?name=spring-fan)** opened **[SPR-11757](https://jira.spring.io/browse/SPR-11757?redirect=false)** and commented  When importing the same context more then once and there is a bean defined without id it will be created (and defined) multiple times.  In big application it is common case since there are a lot of configuration files that depends on each other and it should be acceptable that the same config is imported more than once.  Attached full test that reproduces the BUG.  ---  **Affects:** 3.2.6, 3.2.7, 3.2.8, 4.0 GA, 4.0.1, 4.0.2, 4.0.3, 4.0.5  **Attachments:** - [spring-bug.zip](https://jira.spring.io/secure/attachment/21988/spring-bug.zip) (_7.91 kB_)  **Issue Links:** - #14160 Ignore duplicated import files or property-placeholder files (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2014-05-05T06:14:48Z","2019-01-12T16:46:32Z"
"","17158","Inconsistent hashCode/equals implementation in AbstractPointcutAdvisor results in CGLIB-related memory leak [SPR-12556]","**[Victor Bronstein](https://jira.spring.io/secure/ViewProfile.jspa?name=victorbr)** opened **[SPR-12556](https://jira.spring.io/browse/SPR-12556?redirect=false)** and commented  I suspect this is the reason for a CGLIB-related memory leak I see (resembling very close #12663), but the issue is so complicated I'm not sure. We are creating and destroying a Spring context having a JPA entity. What we see in the dump is an instance of `AdvisedSupport` per context ever created, referenced by `CglibAopProxy$ProxyCallbackFilter` referenced by CGLIB `EnhancerKey` (having the matching number of instances). The EnhancerKeys are all different because the Filters are different and these are different because they have a `PersistenceExceptionTranslationAdvisor` whose instances are compared by advice and pointcut. The advice is `PersistenceExceptionTranslationInterceptor` which doesn't override equals so all instances are different. Now judging by the hashmap structure, the hashkey of them all seem to be the same which further strengthens my hypothesis. I couldn't tell whether the approach of `hashCode` or the approach of `equals` is correct but they are not consistent. If we take the approach of hashCode, all instances of AbstractPointcutAdvisor would be the same. However if `equals` implementation is the correct one, the result is a memory leak because of the advisors being referenced by `CglibAopProxy$ProxyCallbackFilter` instances which are strongly referenced by the CGLIB cache.  ---  **Affects:** 3.2.12, 4.1.3  **Issue Links:** - #15899 `@Async` with cglib based proxy causes memory leak in heap (_**""duplicates""**_) - #12663 MemoryLeak in Cglib2AopProxy.ProxyCallbackFilter","closed","in: core,","spring-projects-issues","2014-12-18T08:35:13Z","2019-01-14T05:13:55Z"
"","17141","Performance - hashCode method of AbstractFallbackTransactionAttributeSource.DefaultCacheKey doesn't take targetClass into account [SPR-12536]","**[Victor Bronstein](https://jira.spring.io/secure/ViewProfile.jspa?name=victorbr)** opened **[SPR-12536](https://jira.spring.io/browse/SPR-12536?redirect=false)** and commented  In commit [57eedf3](https://github.com/spring-projects/spring-framework/commit/57eedf33d6a3861aa61003a567352b9fa94402d7) Juergen Hoeller has simplified the `hashCode` function of this class to use the method only and ignore the `targetClass` field. This causes a performance degradation because all methods inherited from `java.lang.Object` map to the same hash (thus falling into the same bucket) but return false when compared (`targetClass` differs). Therefore the price of getting a value from the `attributeCache` rises considerably which given the enormous amount of calls to `getTransactionAttribute` creates a performance degradation.  ---  **Affects:** 3.2.7, 4.1.3  **Issue Links:** - #15892 better method identification in AnnotationTransactionAttributeSource logging  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1), [3.2.13](https://github.com/spring-projects/spring-framework/milestone/101?closed=1)","closed","type: bug,","spring-projects-issues","2014-12-11T01:10:53Z","2019-01-11T18:29:26Z"
"","16376","Missing dependency between spring-test and json-path [SPR-11754]","**[victor benarbia](https://jira.spring.io/secure/ViewProfile.jspa?name=jvmvik)** opened **[SPR-11754](https://jira.spring.io/browse/SPR-11754?redirect=false)** and commented  If you try to test  ``` this.mockMvc.perform(get(""/url"").accept(MediaType.parseMediaType(""application/json;charset=UTF-8"")))         andExpect(jsonPath(""$.data[0].name"", is(""mike"")));  ```  The following exception is created:  ``` java.lang.NoClassDefFoundError: com/jayway/jsonpath/InvalidPathException 	at org.springframework.test.web.servlet.result.JsonPathResultMatchers.(JsonPathResultMatchers.java:43) 	at org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath(MockMvcResultMatchers.java:196) 	at com.arm.pdeg.ipc.simple.controller.CellControllerTest.list(CellControllerTest.java:44) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) 	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74) 	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83) 	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:232) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:89) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:175) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:160) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134) ```  I'm using  the latest Gradle, to fix this issue I add the dependency manually.  ``` // Add test dependency for spring batch   testCompile(""org.springframework:spring-test:4.0.4.RELEASE"") //    // Fixes for missing dependency   //testCompile('com.jayway.jsonpath:json-path:0.9.1') ```  Please, can you fix the dependency in spring-test?   ---  **Affects:** 4.0.4","closed","status: declined,","spring-projects-issues","2014-05-02T09:41:31Z","2019-01-12T16:34:55Z"
"","16511","Message Property File Content Doesn't Show Up [SPR-11892]","**[Vernon](https://jira.spring.io/secure/ViewProfile.jspa?name=vernon)** opened **[SPR-11892](https://jira.spring.io/browse/SPR-11892?redirect=false)** and commented  A message in my message property file shows up as two question marks prefix and suffix of a key, for example two question marks + home.note_en + two question marks, on a web page while I can retrieve a message from Java code with  `@Autowired` private MessageSource messageSource; ..... System.out.println(messageSource.getMessage(""cat.outdoor"", new Object [] {}, Locale.getDefault()));  My web application is Spring + Tymeleaf + Tiles. The following is the configuration:      @Bean     public ServletContextTemplateResolver templateResolver() {     	ServletContextTemplateResolver resolver = new ServletContextTemplateResolver();     	resolver.setTemplateMode(""HTML5"");     	resolver.setCharacterEncoding(""utf-8"");     	resolver.setCacheable(false);     	resolver.setOrder(2);     	return resolver;     }          public SpringTemplateEngine templateEngine() {     	SpringTemplateEngine engine = new SpringTemplateEngine();     	engine.setTemplateResolver(templateResolver());     	engine.addDialect(new TilesDialect()); // Tiles     	engine.addDialect(new SpringSecurityDialect()); // Tiles     	engine.addDialect(new ConditionalCommentsDialect()); // Tiles                 //engine.setMessageSource(messageSource());     	return engine;     }             @Bean     public ViewResolver viewResolver() {          	ThymeleafViewResolver delegate = new ThymeleafViewResolver();     	delegate.setViewClass(ThymeleafTilesView.class); // Tiles     	delegate.setTemplateEngine(templateEngine());     	delegate.setCharacterEncoding(""UTF-8"");     	delegate.setOrder(1);     	delegate.setViewNames(new String[] { ""*"" });     	delegate.setCache(false);                  return delegate;     }          @Bean     public ThymeleafTilesConfigurer thymeleafTilesConfigurer() {     	ThymeleafTilesConfigurer ttc = new ThymeleafTilesConfigurer();     	ttc.setDefinitions(new String[] { ""/WEB-INF/defs/views.xml"" });     	return ttc;     }             @Bean     public MessageSource messageSource() {     	     	ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();     	messageSource.setBasenames(""/WEB-INF/messages/messages"");     	messageSource.setUseCodeAsDefaultMessage(true);     	messageSource.setDefaultEncoding(""UTF-8"");		     	messageSource.setCacheSeconds(0);     	return messageSource;     }  One Thymeleaf developer thinks that it is a Spring configuration issue.   ---  **Affects:** 4.0.5","closed","status: bulk-closed,","spring-projects-issues","2014-06-20T09:35:32Z","2019-01-12T02:29:42Z"
"","17005","Mybatis config error leads to endless loop, and no std error output [SPR-12397]","**[veggie](https://jira.spring.io/secure/ViewProfile.jspa?name=veggie)** opened **[SPR-12397](https://jira.spring.io/browse/SPR-12397?redirect=false)** and commented  I have found an issue which kept spring looping during its initialization wihout any error messge printed on console.  The version of mybatis-spring I used is 1.2.2 along with spring 4.1.0.RELEASE.  I guess all typo errors in mybatis mapper xml files including mybatis-config.xml may cause this problem.  The error logs can be displayed only by setting log level to debug in AbstractBeanFactory class, but this is really an undesirable action because the log would be deluged with unwanted debuging logs from startup phase or web requests.  I wonder if there is a better way to solve this problem, or it's just designed this way.  In the attachment, the breakpoint will be repeatedly hitted as long as the loop exists, but all the exceptions were suppressed.  My team members and me have encountered this issue many times. Considering this is the time consuming mistake that anyone could easily make, I really want to know how to fix it. many thx  ---  **Affects:** 4.1 GA  **Attachments:** - [AbstraceBeanFactory.png](https://jira.spring.io/secure/attachment/22351/AbstraceBeanFactory.png) (_46.12 kB_)  **Issue Links:** - #18406 Lot of undesired WARN logs after migration from Spring 3 to Spring 4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/db2601d6e25a427368500ffcb8d274319222ec92","closed","type: enhancement,","spring-projects-issues","2014-10-29T23:13:20Z","2019-01-11T19:23:55Z"
"","16469","No formatting standards are defined and followed in documentation [SPR-11850]","**[Vasyl Tretiakov](https://jira.spring.io/secure/ViewProfile.jspa?name=vasyl.tretiakov)** opened **[SPR-11850](https://jira.spring.io/browse/SPR-11850?redirect=false)** and commented  Currently there seem to be no standards for formatting class names, methods, field, bean names, primitive object values, XML elements and attributes, etc.  Without such standards the reader has troubles following the author's thought, while the author has troubles finding proper formatting for the sentence contents often changing styles in the middle of the paragraph.  I suggest establishing such formatting standards and putting them in the beginning of the reference(s) like they do in books.   ---  **Affects:** 4.0.5  **Attachments:** - [afterPropertiesSet_1.png](https://jira.spring.io/secure/attachment/22057/afterPropertiesSet_1.png) (_12.48 kB_) - [afterPropertiesSet_2.png](https://jira.spring.io/secure/attachment/22058/afterPropertiesSet_2.png) (_9.27 kB_) - [afterPropertiesSet_3.png](https://jira.spring.io/secure/attachment/22059/afterPropertiesSet_3.png) (_21.75 kB_) - [formatting_java_code.png](https://jira.spring.io/secure/attachment/22060/formatting_java_code.png) (_12.83 kB_) - [formatting_xml_code.png](https://jira.spring.io/secure/attachment/22061/formatting_xml_code.png) (_12.29 kB_)","closed","status: bulk-closed,","spring-projects-issues","2014-06-05T13:34:56Z","2019-01-12T00:19:19Z"
"","16466","No messaging module overview in the 2.2. Modules section [SPR-11847]","**[Vasyl Tretiakov](https://jira.spring.io/secure/ViewProfile.jspa?name=vasyl.tretiakov)** opened **[SPR-11847](https://jira.spring.io/browse/SPR-11847?redirect=false)** and commented  Section 2.2 gives an overview of key modules. However nothing is said about the Messaging module.  2.2. Modules 2.2.1. Core Container 2.2.2. Data Access/Integration 2.2.3. Web 2.2.4. AOP and Instrumentation 2.2.5. Test  It is worth adding a short overview of the messaging module. Something like  ""Spring Framework 4 includes a new spring-messaging module with key abstractions from the Spring Integration project such as Message, MessageChannel, MessageHandler and others that can serve as a foundation for such a messaging architecture. The module also includes a set of annotations for mapping messages to methods, similar to the Spring MVC annotation based programming model.""   ---  **Affects:** 4.0.5  **Reference URL:** http://docs.spring.io/spring/docs/4.0.5.RELEASE/spring-framework-reference/htmlsingle/#overview-modules  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/59c5d7d1caaac23ceeb78f1c21388028c8134b9d","closed","type: documentation,","spring-projects-issues","2014-06-04T10:16:55Z","2014-08-15T01:52:48Z"
"","17014","Allow custom @Validated annotations for handler method parameters [SPR-12406]","**[Vadim](https://jira.spring.io/secure/ViewProfile.jspa?name=vadimo)** opened **[SPR-12406](https://jira.spring.io/browse/SPR-12406?redirect=false)** and commented  Extend `@Validated` with Target.Annotation allowing the creation of custom `@Validated` annotations.  The result will be: public boolean registerNewUser(`@RegisterValid` `@RequestBody` User newUser) {  instead of  public boolean registerNewUser(`@Validated`({Default.class, RegisterGroup.class,VIP.class....}) `@RequestBody` User newUser) {  ---  **Affects:** 4.0.7, 4.1.1  **Issue Links:** - #13812 `@Validated` should allow ElementType.METHOD target  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/929cda67902316eb335b2b6d62548709f6742ca8","closed","type: enhancement,","spring-projects-issues","2014-11-01T07:56:57Z","2019-01-13T05:44:02Z"
"","16987","ResponseStatusExceptionResolver does not get a MessageSource injected in the MVC Java config [SPR-12380]","**[Vadim](https://jira.spring.io/secure/ViewProfile.jspa?name=vadimo)** opened **[SPR-12380](https://jira.spring.io/browse/SPR-12380?redirect=false)** and commented  ResponseStatusExceptionResolver does not get a MessageSource injected as  it is created via new ...   ---  **Affects:** 3.2.11, 4.0.7  **Reference URL:** http://stackoverflow.com/questions/26585328/spring-boot-rest-service-is-not-displaying-the-responsestatus-exception-reason  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aa82da850740363726ba3a1b76e0fc40038f4fb2, https://github.com/spring-projects/spring-framework/commit/f812998826df96cafb62e4403afa3b097ac7cdfa, https://github.com/spring-projects/spring-framework/commit/17b9bde336f3f57c9d7ab9f295e2732c552813ac  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)","closed","type: bug,","spring-projects-issues","2014-10-27T05:34:20Z","2014-11-10T23:12:27Z"
"","16485","Custom Media Type not working [SPR-11866]","**[Trilok Rajan](https://jira.spring.io/secure/ViewProfile.jspa?name=vtrilokc)** opened **[SPR-11866](https://jira.spring.io/browse/SPR-11866?redirect=false)** and commented  We are using Spring Rest MVC. As per Rest standards we would like to specify the version of the service in the Accept and Content type fields in the request.  Accept: vnd.domain.com/json+v1.0 Content-Type: vnd.domain.com/json+v1.0  We made appropriate `@consume` and `@produces` in the request mapping of the rest controller so that it accepts the media type as vnd.domain.com/json+v1.0.  We are getting error saying unsupported media type. Thanks Trilok   ---  **Affects:** 3.1.3","closed","in: core,","spring-projects-issues","2014-06-10T14:25:15Z","2019-01-11T22:16:04Z"
"","17140","Multi resource XA transactions sometimes act incorrectly [SPR-12535]","**[Trevor Stevens](https://jira.spring.io/secure/ViewProfile.jspa?name=tstevens)** opened **[SPR-12535](https://jira.spring.io/browse/SPR-12535?redirect=false)** and commented  When using XA Transactions sometimes messages are delivered to the queue before they are committed to the database.  We have attempted the following within both TomEE and Wildfly and have been able to reproduce this issue in both. I'm attaching a sample project which should allow others to reproduce this as well.  Expected operation, each step represents a seperate XA transaction. 1. `@Service` send JMSMessage using JMSTemplate 2. Listener1 within a DefaultMessageListenerContainer uses JPA to persists entity and sends a JMSMessage containing ID of entity using JMSTemplate 3. Listener2 within a DefaultMessageListenerContainer attempts to retrieve entity by ID from JPA  My thought was that within an XA transaction both the JPA persist and the JMS send must complete before the transaction can commit successfully. We have been trying to tackle a strange case where after the listener for #2 completes the message from #2 is then delivered to #3 but the ID is not present in the database yet and the entity cannot be retreived.  I'm attaching a snippent from a log showing both a passing and failing case of the above steps. Since we have been unable to find any fault with our configuration and due the intermittent nature of this we can only assume that a bug exists somewhere within Springs handling of XA transactions.   ---  **Affects:** 3.2.12  **Reference URL:** https://github.com/jej2003/simple-spring  **Attachments:** - [XA-failure.txt](https://jira.spring.io/secure/attachment/22417/XA-failure.txt) (_6.26 kB_)","closed","in: core,","spring-projects-issues","2014-12-10T21:03:48Z","2019-01-12T05:24:56Z"
"","16494","Performance regression for custom autowireBean calls with many properties [SPR-11875]","**[Trask Stalnaker](https://jira.spring.io/secure/ViewProfile.jspa?name=trask)** opened **[SPR-11875](https://jira.spring.io/browse/SPR-11875?redirect=false)** and commented  Autowiring in our application became a large bottleneck after updating to Spring 3.2.  Please see benchmark of autowiring an object with 100 setters at https://github.com/trask/spring-autowire-benchmark  This used to take 2 microseconds in spring 3.1.4, but now takes 400 microseconds in spring 3.2.0+.  The regression appears to be caused by the fix for #13596, which disables caching of property descriptors in order to fix a memory leak.  What do you think of using org.springframework.util.ConcurrentReferenceHashMap for the property descriptor cache in order to keep the benefit of caching, while still addressing the memory leak reported in #13596?  ---  **Affects:** 3.2 GA, 4.0.5  **Issue Links:** - #13596 org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBean() causes ClassLoader leak - #16145 Memory leak when using annotation based auto-wiring in child context - #16483 Optimize performance of autowiring for Groovy/Grails - #16501 ReflectionUtils slow down application startup on WebSphere - #16722 Remove synchronization around filteredPropertyDescriptorsCache in case of non-existing entry  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f4062bc758b26145d9cd473276b834d0a5a1e94d, https://github.com/spring-projects/spring-framework/commit/c32d5592c79413a91796a15f3fdca785f88bf310, https://github.com/spring-projects/spring-framework/commit/974bd43f284c07e9c9d721978225be05f662a0b4  **Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)  0 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2014-06-12T18:00:31Z","2019-01-11T22:17:01Z"
"","16844","Protobuf support for Spring MVC 4.1 doesn't work with default settings [SPR-12229]","**[Toshiaki Maki](https://jira.spring.io/secure/ViewProfile.jspa?name=making)** opened **[SPR-12229](https://jira.spring.io/browse/SPR-12229?redirect=false)** and commented  Writing Protobuf as response body  doesn't work with default settings  because `ProtobufHttpMessageConverter` attempt to write HTTP header of read-only `ServletServerHttpResponse`.  As the result, the following exeception is thrown after HTTP request:  ``` java.lang.UnsupportedOperationException: null 	at java.util.Collections$UnmodifiableMap.put(Collections.java:1517) 	at org.springframework.http.HttpHeaders.set(HttpHeaders.java:869) 	at org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter.setProtoHeader(ProtobufHttpMessageConverter.java:196) 	at org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter.writeInternal(ProtobufHttpMessageConverter.java:182) 	at org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter.writeInternal(ProtobufHttpMessageConverter.java:60) 	at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:208) 	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:153) 	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:97) 	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:202) 	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:71) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:122) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:781) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:721) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:943) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:852) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:620) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501) 	at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:683) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408) 	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1070) 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:611) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1736) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1695) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Thread.java:745) ```  Current  `ProtobufHttpMessageConverter` implementation is like:  ```java 	@Override 	protected void writeInternal(Message message, HttpOutputMessage outputMessage) 			throws IOException, HttpMessageNotWritableException {  		// ... ommited 		OutputStreamWriter writer = new OutputStreamWriter(outputMessage.getBody(), charset); //","closed","type: bug,","spring-projects-issues","2014-09-21T00:55:04Z","2014-10-01T03:11:42Z"
"","17060","Introduce support for custom properties and custom URLs for embedded databases [SPR-12455]","**[Torsten Krah](https://jira.spring.io/secure/ViewProfile.jspa?name=tkrah)** opened **[SPR-12455](https://jira.spring.io/browse/SPR-12455?redirect=false)** and commented  #### Status Quo  At the moment, `` sets up an embedded database with a minimal set of needed database properties for each supported system, e.g. h2 `dbName` attribute. But if you want to configure some special database properties for the embedded database, e.g. H2 MVCC support or compatibility mode like Oracle, you would need to add this to the database URL string:  ``` jdbc:h2:~/test;MVCC=TRUE&MODE=Oracle ```  #### Proposal  It would be nice if there were some new namespace element like `` to add these options like in the following configuration example or some other solution where you can specify custom build options for the embedded database, which are applied during construction.  ```xml                                   ```  ---  **Affects:** 3.1 GA  **Issue Links:** - #12030 Introduce support for persistent mode for embedded databases (_**""supersedes""**_)  1 votes, 3 watchers","open","type: enhancement,","spring-projects-issues","2014-11-20T04:12:02Z","2019-02-22T14:44:27Z"
"","17035","Introduce BEFORE_METHOD and BEFORE_CLASS modes for @DirtiesContext [SPR-12429]","**[Torsten Krah](https://jira.spring.io/secure/ViewProfile.jspa?name=tkrah)** opened **[SPR-12429](https://jira.spring.io/browse/SPR-12429?redirect=false)** and commented  #### Status Quo  `@DirtiesContext` currently only supports closing a test `ApplicationContext` after an entire test class or after a test method.  #### Proposal  It would be useful to have _before class_ and _before method_ modes, too.  Currently this is achievable with a custom `TestExecutionListener` which marks the context as dirty at the requested phase (before class or before method), but this could be easily achieved via new _modes_ within the `@DirtiesContext` annotation.  ---  **Affects:** 3.0 GA  **Reference URL:** http://stackoverflow.com/questions/26931236/is-it-possble-to-reset-spring-tests-context-cache-before-a-test-suite-runs-not  **Issue Links:** - #17772 BEFORE_* modes in `@DirtiesContext` cause context to be closed before test","closed","type: enhancement,","spring-projects-issues","2014-11-13T04:46:48Z","2019-01-13T05:43:56Z"
"","16799","Regression: Slow TypeDescriptor lookups in CachedIntrospectionResults on IBM JVM 6 [SPR-12185]","**[Torsten Hartwig](https://jira.spring.io/secure/ViewProfile.jspa?name=hartwig)** opened **[SPR-12185](https://jira.spring.io/browse/SPR-12185?redirect=false)** and commented  We upgraded our portal web application from Spring 2.5.6 to 4.0.6 and got into trouble with a very high load, when many users access the frontend.  Every request performs slower with a factor 2 and more with the new Spring version. We tried to reproduce it with Spring 3.2.9, but the load was the same like 2.5.6.  Our application is configured with a parent ear-context to share singletons and every war in that ear has its own web-context. Furthermore every portlet has its own small portlet-app-context. The number of all defined beans is about 1500, 300 are request-scoped.  We investigated that method BeanWrapperImpl.convertForProperty works slow and figured out that behavior of this method has changed from 2.5.6/3.2.9 to 4.X. In 2.5.6/3.2.9 every time BeanWrapperImpl.convertForProperty is called, a new instance of TypeDescriptor is created. In 4.X every time BeanWrapperImpl.convertForProperty is called, first cachedIntrospectionResults.getTypeDescriptor(pd) is called and if it is null, cachedIntrospectionResults.addTypeDescriptor is called. And in our case both cache-lookups are much slower than creating a new instance. With a local interim-fix which disabled the cache-lookups in 4.0.6 we could establish the same performance like 2.5.6/3.2.9 .  Even introducing an optimized cach-lookup  TypeDescriptor addTypeDescriptor(PropertyDescriptor pd, TypeDescriptor td) {   TypeDescriptor existing = this.typeDescriptorCache.putIfAbsent(pd, td);   return (existing != null ? existing : td); }  in CachedIntrospectionResults in Spring 4.1 does not improve the performance.  I don't know the reason for new cache-lookup behavior in CachedIntrospectionResults and the dimension of number of beans that must be declared to become slower with cache-lookups than with creating new instances of TypeDescriptor.  But can you introduce a new spring property that disables the cache lookups and restore ""old"" behavior? You did something similar with property spring.beaninfo.ignore to skip lookup of BeanInfo classes.  Update (20140912): Further investgations led to the result that the ConcurrentHashMap-Implementation in our JVM (IBM/WAS 7.0.0.21) may be broken as the get method always returned null, even if the element was inserted just before. Experimentally replacing ConcurrentHashMap by Collections.synchronizedMap(new HashMap()) seems to resolve this issue. Due to the fact that synchronizedMap uses locking (and can block) we would not use this in our productive environment.   ---  **Affects:** 4.0.7, 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b39e66b897501c2856622840bb36cef20e601d45, https://github.com/spring-projects/spring-framework/commit/5cd59d044e9f17771e28363e298866b360a5fbd7, https://github.com/spring-projects/spring-framework/commit/d1c720c07bcd60ff1bf06d6abeb451cdfc4b4372, https://github.com/spring-projects/spring-framework/commit/c52484ed682d57c6d49f7fa62ba2b41715d2e826  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)  1 votes, 6 watchers","closed","in: core,","spring-projects-issues","2014-09-11T23:53:55Z","2014-11-20T09:45:30Z"
"","16978","Handshake failed due to invalid Upgrade header: null [SPR-12371]","**[Tommy Ludwig](https://jira.spring.io/secure/ViewProfile.jspa?name=shakuzen)** opened **[SPR-12371](https://jira.spring.io/browse/SPR-12371?redirect=false)** and commented  I am running into the issue of secured WebSocket upgrade requests (over STOMP using SockJS) failing when I run my Spring application on OpenShift or CloudFoundry, though it works perfectly fine when I run it locally. I have made a simplified sample and put it on GitHub that recreates this issue. That can be found here: https://github.com/shakuzen/spring-stomp-websocket-test  I made a StackOverflow question regarding this but have not been able to get any help so far. That is here: http://stackoverflow.com/questions/26452632/secured-websocket-upgrade-over-stomp-via-sockjs-fails-with-invalid-upgrade-heade  I have attached the relevant portion of the local and remote (OpenShift server) logs and corresponding request headers that were sent (captured using Chrome's developer tools) when trying to connect via WebSocket. In the case of running on OpenShift, you can see just before the ERROR message, it logs the headers, which differ from the headers Chrome states are being sent. Particularly, the logged headers do not contain an upgrade attribute and the connection attribute's value is 'Keep-Alive' instead of 'Upgrade'. Additionally, it has some extra x-forwarded-* attributes.  You can see that the request headers gathered from Chrome's developer tools for local and remote are identical except for expected differences in security key and URLs and session ID.  I have gone so far as to try debugging the framework code to figure out why the headers it is failing with are not the headers I see from the browser, but I was not able to figure out why. I apologize if this is some silly mistake on my part, but I feel the sample I made is simple enough of a case that it warranted creating this issue.  Please do not hesitate to let me know if I can provide any additional information to help figure out the cause of this issue. I really appreciate any help with this even though I am sure you are busy with the upcoming release.   ---  **Affects:** 4.0.7, 4.1.1  **Reference URL:** https://github.com/shakuzen/spring-stomp-websocket-test  **Attachments:** - [local_request_headers.txt](https://jira.spring.io/secure/attachment/22337/local_request_headers.txt) (_1.06 kB_) - [local.log](https://jira.spring.io/secure/attachment/22336/local.log) (_8.06 kB_) - [local dev tools.PNG](https://jira.spring.io/secure/attachment/22340/local+dev+tools.PNG) (_18.55 kB_) - [remote dev tools.PNG](https://jira.spring.io/secure/attachment/22341/remote+dev+tools.PNG) (_17.35 kB_) - [server_request_headers.txt](https://jira.spring.io/secure/attachment/22339/server_request_headers.txt) (_1.12 kB_) - [server.log](https://jira.spring.io/secure/attachment/22338/server.log) (_8.33 kB_)","closed","status: declined,","spring-projects-issues","2014-10-23T06:52:04Z","2019-01-12T16:34:37Z"
"","16462","mvc:message-converters doesn't overwrite default message converter of that class [SPR-11843]","**[Tom Payne](https://jira.spring.io/secure/ViewProfile.jspa?name=tompayne)** opened **[SPR-11843](https://jira.spring.io/browse/SPR-11843?redirect=false)** and commented  This may not be a bug, so apologies if that's the case - it definitely seems like strange behaviour..  If I define mvc:message-converters of the same class as a default message converter, I would expect this not to create a second message converter of this type when adding the defaults.  For example:  ```xml                                                                      ```  Here I have defined the StringHttpMessageConverter with properties that overwrite the defaults [in this case supportedMediaTypes]. However, the AnnotationDrivenBeanDefinitionParser still adds the default StringHttpMessageConverter, which in this case effectively overrides the property set here.  For background, I was trying to stop the StringHttpMessageConverter converting application/json requests - if the ResponseBody was a simple string, it was being converted here, rather than in the MappingJacksonHttpMessageConverter.  The workaround in my case is to add the MappingJacksonHttpMessageConverter to the list of message-converters, so that it is at the front of the messageConverters array, but this feels a bit clunky.  As I say, this may be expected behaviour - in which case, sorry! - but I think it can be confusing, particularly when combined with the register-defaults attribute defaulting to true.  If it is a defect, I'd be happy to submit a patch.    ---  **Affects:** 3.2.9","closed","status: declined,","spring-projects-issues","2014-06-02T08:15:15Z","2019-01-12T16:34:51Z"
"","16670","Allow configuring custom redirect prefix in HandlerMethodReturnValueHandler's [SPR-12054]","**[Tobias Mattsson](https://jira.spring.io/secure/ViewProfile.jspa?name=tmattsson)** opened **[SPR-12054](https://jira.spring.io/browse/SPR-12054?redirect=false)** and commented  In multiple projects I've implemented custom ViewResolvers that issue redirects based on view names. Similar to how redirect: and forward: works. They've interpreted these view names and built the redirects based on context and various factors such as locale of the logged in user. For instance ""my-project:checkout-page"" or ""project:2156"".  However flash attributes don't work for the redirects these ViewResolvers issue.  The reason is that the ModelAndViewContainer needs to have redirectModelScenario set in order for them to work. The only place I've found where I can set it is in a HandlerMethodReturnValueHandler. Unfortunately the ViewNameMethodReturnValueHandler eats all returned Strings so I have to extend it and replace the default one with my own. The same goes for ModelAndViewMethodReturnValueHandler. Replacing any of them means explicitly configuring all of the default ones since the custom ones that I could add to RequestMappingHandlerAdapter are executed after the default ones and so can't operate on String or ModelAndViewContainer.  I've come up with a solution but it's not very elegant so I'm wondering if you know of a better solution. Ideally ViewResolvers should be able to output redirects with flash attributes.  My solution extends RequestMappingHandlerAdapter and detects whether the returned view name is in a format that will be processed by a custom ViewResolver later. I'm not happy with how the logic for this gets duplicated.  Attached is maven projects with two DispatcherServlets that illustrate the problem, one where it works and one where it doesn't. It's runnable from command line with mvn jetty:run.  Here's my custom RequestMappingHandlerAdapter:  ``` public class CustomRequestMappingHandlerAdapter extends RequestMappingHandlerAdapter {      @Override     public void afterPropertiesSet() {         super.afterPropertiesSet();          ArrayList handlers = new ArrayList(super.getReturnValueHandlers());         for (int i = 0; i < handlers.size(); i++) {             HandlerMethodReturnValueHandler handler = handlers.get(i);             if (handler instanceof ViewNameMethodReturnValueHandler) {                 handlers.set(i, new ViewNameMethodReturnValueHandler() {                      @Override                     protected boolean isRedirectViewName(String viewName) {                         return super.isRedirectViewName(viewName) || CustomRequestMappingHandlerAdapter.this.isRedirectViewName(viewName);                     }                 });             }             if (handler instanceof ModelAndViewMethodReturnValueHandler) {                 handlers.set(i, new ModelAndViewMethodReturnValueHandler() {                      @Override                     public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {                         if (returnValue != null) {                             ModelAndView mav = (ModelAndView) returnValue;                             if (mav.isReference()) {                                 String viewName = mav.getViewName();                                 if (viewName != null && CustomRequestMappingHandlerAdapter.this.isRedirectViewName(viewName)) {                                     mavContainer.setRedirectModelScenario(true);                                 }                             }                         }                         super.handleReturnValue(returnValue, returnType, mavContainer, webRequest);                     }                 });             }         }         super.setReturnValueHandlers(handlers);     }      protected boolean isRedirectViewName(String viewName) {         return viewName.startsWith(CustomRedirectViewResolver.CUSTOM_REDIRECT_PREFIX);     } } ```    ---  **Affects:** 4.0.6  **Attachments:** - [flash-redirect-problem.zip](https://jira.spring.io/secure/attachment/22156/flash-redirect-problem.zip) (_8.05 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8f715a8547e7233a67fab15f56efe117911542b4","closed","type: enhancement,","spring-projects-issues","2014-08-01T06:36:04Z","2014-09-04T05:31:17Z"
"","17038","webjar stops working [SPR-12432]","**[Titi Wangsa](https://jira.spring.io/secure/ViewProfile.jspa?name=blacksnow666)** opened **[SPR-12432](https://jira.spring.io/browse/SPR-12432?redirect=false)** and commented  The application manages to get the resources for webjar when using spring 4.1.0. 4.1.1 also works. when i use 4.1.2, I get 404 errors that is the only thing I changed.  example url: http://localhost:8080/app1/webjars/jquery/2.1.1/jquery.min.js works with spring 4.1.0 works with spring 4.1.1 does not work with 4.1.2 - giving 404 error  when i traced it, it lead to org.springframework.web.servlet.resource.PathResourceResolver the method ""isResourceUnderLocation"" constantly returns false this method is called by ""checkResource"", and this is new since 4.1.2.    ---  **Affects:** 3.2.12, 4.0.8, 4.1.2  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1), [3.2.13](https://github.com/spring-projects/spring-framework/milestone/101?closed=1)","closed","type: bug,","spring-projects-issues","2014-11-13T06:50:22Z","2014-12-09T02:49:23Z"
"","16928","Ability to use webjar with spring without specifying version info in HTML/jsp file [SPR-12323]","**[Titi Wangsa](https://jira.spring.io/secure/ViewProfile.jspa?name=blacksnow666)** opened **[SPR-12323](https://jira.spring.io/browse/SPR-12323?redirect=false)** and commented  In Play Framework, we could use this  ```xml  ```  we already specified the version information in the sbt file.  In Spring We need the version information in;  ```xml  ```  and also in the pom.xml file  Expected behaviour: we only specify  ```xml  ```  Perhaps we can specify the ResourceLoader here:  ```xml  ```    ---  **Reference URL:** http://www.webjars.org/documentation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/57e0c789a81bb68410bd2ef9e824d81b76b05909, https://github.com/spring-projects/spring-framework/commit/9e5a33c1b36cae7a7541251509bf032455838fdf, https://github.com/spring-projects/spring-framework/commit/e72b821a73b23be8bc2b33c323dcd3b0bdc11b85  1 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2014-10-11T16:51:39Z","2015-05-26T01:15:26Z"
"","16638","Allow for Unknown HttpStatus values [SPR-12022]","**[Tim](https://jira.spring.io/secure/ViewProfile.jspa?name=hoserdude)** opened **[SPR-12022](https://jira.spring.io/browse/SPR-12022?redirect=false)** and commented  There have been many instances where the web project has tried to keep up with RFC changes and the needs of various REST clients as it pertains to HttpStatus (ie, values not being in the enumeration).  For this and unforseen future use cases, it would be extremely useful to allow undefined status codes and messages rather than throwing runtime exceptions, which we have to work around.  My use case is I am using the Spring RestTemplate to consume a service that returns a non-RFC code in some instances and throughout the RestTemplate infrastructure there are calls to HttpStatus.valueOf() which I cannot circumvent.  In this case a generic UNKNOWN_STATUS enum value with the code and message in it would suffice - the Series logic would still work fine as well.   ---  **Affects:** 4.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/135a3ff3d856b44572eb63c58198ce40164f9107  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-07-22T15:41:02Z","2019-01-11T18:20:31Z"
"","16495","isGlobalRollbackOnly always returns 'false' with WebSphereUOWTransactionManager [SPR-11876]","**[Thomas Vahrst](https://jira.spring.io/secure/ViewProfile.jspa?name=t.vahrst)** opened **[SPR-11876](https://jira.spring.io/browse/SPR-11876?redirect=false)** and commented  DefaultTransactionStatus delegates the method invocation 'isGlobalRollbackOnly' to the internal referenced transaction object. Typically, this object has the type SmartTransactionObject. 'isGlobalRollbackOnly' asserts this with a instanceof check:  ``` public boolean isGlobalRollbackOnly() { 		return ((this.transaction instanceof SmartTransactionObject) && 				((SmartTransactionObject) this.transaction).isRollbackOnly()); 	} ```  With WebSphereUowTransactionManager, this transaction object is a inner class of WebSphereUowTransactionManager called UOWActionAdapter, which does not implement SmartTransactionObject.  This leads to DefaultTransactionStatus always returning false for 'isGlobalRollbackOnly'.  In our case, we got a problem with two nested Spring TransactionTemplates (Propagation TX_REQUIRED): when the inner TransactionTemplate causes a rollback and the outer transaction template checks this with txStatus.isRollbackOnly(), it will get 'false'.  From AbstractTransactionStatus:  ``` public boolean isRollbackOnly() { 		return (isLocalRollbackOnly() || isGlobalRollbackOnly()); 	} ```  For the outer TransactionTemplate, localRollbackOnly is false (this is correct) but globalRollbackOnly should be true (but is also false because of WebSphereUowTransactionManager)  Our workaround: We solved this with a copy of WebsphereUowTranasctionManager and changing the inner class UOWActionAdapter to implement SmartTransactionObject  ``` ... 	/** 	 * Adapter that executes the given Spring transaction within the WebSphere UOWAction shape. 	 */ 	private class UOWActionAdapter implements UOWAction, SmartTransactionObject { ... 		@Override 		public boolean isRollbackOnly() { 			return uowManager.getRollbackOnly(); 		}  		@Override 		public void flush() { 			// don't know what to do here... 		} ```    ---  **Affects:** 3.2.9, 4.0.5  **Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2014-06-12T23:44:37Z","2014-07-08T00:21:27Z"
"","17050","Early initialization of @Configuration class may lead to unwanted call to setBeanFactory [SPR-12445]","**[Thomas Demande](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.demande)** opened **[SPR-12445](https://jira.spring.io/browse/SPR-12445?redirect=false)** and commented  Cf [GitHub sample project referenced in the Reference URL](https://github.com/tdemande/spring-config-server).  The scenario I face is that I have some configuration stored in a specific Git repository, which is used by the application. For performances reasons (JGit usage seems rather slow) , the idea is to perform a first find at startup then use a cache/refresh technique later on.  When using an InitializingBean, the application startup fails with a  ``` Caused by: java.lang.NoSuchMethodError: org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration .setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V ```  It can easily be reproduced by launching `mvn spring-boot:run` in the GitHub sample.   ---  **Affects:** 4.1.2  **Reference URL:** https://github.com/tdemande/spring-config-server  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c1f1cac35956f74302199714db11b36968c1ddcd","closed","in: core,","spring-projects-issues","2014-11-17T05:20:07Z","2014-12-09T02:49:20Z"
"","16935","Speed up dynamic instantiation of objects with compiled SpEL expressions [SPR-12330]","**[Thomas Darimont](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasd)** opened **[SPR-12330](https://jira.spring.io/browse/SPR-12330?redirect=false)** and commented  In a lot of places within the Spring framework, objects are dynamically instantiated via reflection. This way of creating object instances can be quite slow (since the JVM doesn't speed this up, yet). With the advent of compiled SpEL expressions we have a way to create instances much faster. Once #16931 is fixed we could just create SpEL `Expression`'s that contains appropriate constructor invocations, parse and compile them at bootstrap time and store them in a shared map read-only map.  Once a new instance of a type T is requested, we could simply lookup the compiled SpEL `Expression` with the appropriate constructor invocation for T and just call it's getValue(...) method to obtain the actual instances.  We currently do something similar in Spring Data Commons: (https://github.com/spring-projects/spring-data-commons/pull/98) In our case we generate ASM code by hand since we cannot rely on Spring 4.1+ being available.  Of course not all reflective object instantiations can be replaced with this approach (e.g. classes with non-public ctors), but since the relevant types are often public(*1) and have public ctors it should be possible in the majority of cases.  The dynamic expression compilation/generation could introduce a performance penalty (at startup) which should payoff (IMHO) quite quickly in the long run.  (*1) if one could adjust the package name of the classes generated for compiled SpEL expression one could even instantiate package scoped classes with public ctors.  ---  **Affects:** 4.1.1  0 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-10-14T04:54:00Z","2019-01-12T00:18:44Z"
"","16931","VerifyError when trying to compile constructor invocation with SpEL [SPR-12326]","**[Thomas Darimont](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasd)** opened **[SPR-12326](https://jira.spring.io/browse/SPR-12326?redirect=false)** and commented  I tried to speed up dynamic instance creation by compiling constructor invocations with SpEL. Unfortunately I get a VerifyError when I try to evaluate the expression via `getValue();`. I added a test case that demonstrates the issue. The test case passes when `SpelCompilerMode.OFF` is used.  Tested this with (java version ""1.8.0_20"") and compile target java6.  ```java package test;  import org.junit.Assert; import org.junit.Test; import org.springframework.expression.Expression; import org.springframework.expression.spel.SpelCompilerMode; import org.springframework.expression.spel.SpelParserConfiguration; import org.springframework.expression.spel.standard.SpelExpressionParser;  /**  * @author Thomas Darimont  */ public class CompiledSpelBug {  	@Test 	public void compiledConstructorInvocations(){  		SpelExpressionParser parser = new SpelExpressionParser(new SpelParserConfiguration(SpelCompilerMode.IMMEDIATE, Thread.currentThread().getContextClassLoader())); 		Expression expr = parser.parseExpression(""new test.CompiledSpelBug.Obj([0])"");  		Obj o = (Obj)expr.getValue(new Object[]{""test""}); 		Assert.assertEquals(""test"",o.param1);  		//the next line fails with: 		//java.lang.VerifyError: (class: spel/Ex2, method: getValue signature: (Ljava/lang/Object;Lorg/springframework/expression/ EvaluationContext;)Ljava/lang/Object;) Incompatible argument to function 		o = (Obj)expr.getValue(new Object[]{""test""});  		Assert.assertEquals(""test"",o.param1); 	}  	public static class Obj{  		private final String param1;  		public Obj(String param1){ 			this.param1 = param1; 		} 	} } ```  StackTrace with Spring Framework 4.1:  ``` java.lang.VerifyError: (class: spel/Ex2, method: getValue signature: (Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;) Incompatible argument to function 	at java.lang.Class.getDeclaredConstructors0(Native Method) 	at java.lang.Class.privateGetDeclaredConstructors(Class.java:2658) 	at java.lang.Class.getConstructor0(Class.java:2964) 	at java.lang.Class.newInstance(Class.java:403) 	at org.springframework.expression.spel.standard.SpelCompiler.compile(SpelCompiler.java:106) 	at org.springframework.expression.spel.standard.SpelExpression.compileExpression(SpelExpression.java:464) 	at org.springframework.expression.spel.standard.SpelExpression.checkCompile(SpelExpression.java:434) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:153) 	at bob.spel.CompiledSpelBug.foo(CompiledSpelBug.java:24) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:160) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134) ```  StackTrace with Spring Framework 4.1.1:  ``` java.lang.IllegalStateException: Failed to instantiate CompiledExpression 	at org.springframework.expression.spel.standard.SpelCompiler.compile(SpelCompiler.java:111) 	at org.springframework.expression.spel.standard.SpelExpression.compileExpression(SpelExpression.java:464) 	at org.springframework.expression.spel.standard.SpelExpression.checkCompile(SpelExpression.java:434) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:153) 	at bob.spel.CompiledSpelBug.compiledConstructorInvocations(CompiledSpelBug.java:26) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:160) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134) Caused by: java.lang.VerifyError: (class: spel/Ex2, method: getValue signature: (Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;) Incompatible argument to function 	at java.lang.Class.getDeclaredConstructors0(Native Method) 	at java.lang.Class.privateGetDeclaredConstructors(Class.java:2658) 	at java.lang.Class.getConstructor0(Class.java:2964) 	at java.lang.Class.newInstance(Class.java:403) 	at org.springframework.expression.spel.standard.SpelCompiler.compile(SpelCompiler.java:108) 	... 30 more ```  ---  **Affects:** 4.1 GA, 4.1.1  **Issue Links:** - #16876 VerifyErrors when using SpEL compilation with Thymeleaf - #17400 SpEL chooses wrong method to invoke when varargs method is present  0 votes, 6 watchers","closed","in: core,","spring-projects-issues","2014-10-13T04:22:26Z","2019-01-11T19:15:24Z"
"","16416","Expose current HttpServletResponse for autowiring [SPR-11795]","**[Thomas Darimont](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasd)** opened **[SPR-11795](https://jira.spring.io/browse/SPR-11795?redirect=false)** and commented  At present only the current HttpServletRequest is exposed for auto-wiring via a Thread-local wrapper.  We should also expose HttpServletResponse for auto-wiring in order to provide a more consistent programming model.  If we had this, we could allow Spring Web MVC Controllers that look like this:  ```java package demo.web;  import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController;  import demo.api.HelloFacade;  /**  * @author Thomas Darimont  */ @RestController public class SimpleHelloController implements HelloFacade {  	private final HttpServletRequest request; // Thread-local current request  	private final HttpServletResponse response; // Thread-local current response  	@Autowired 	public SimpleHelloController(HttpServletRequest request, HttpServletResponse response) {  		this.request = request; 		this.response = response; 	}  	@RequestMapping(""/bla/{0}"") 	public String great(@PathVariable(""0"") String name) {  		System.out.printf(""Request Path: %s%n"", request.getRequestURL());  		if (""tom"".equals(name)) { 			response.setStatus(HttpStatus.NOT_FOUND.value()); 			return null; 		}  		return String.format(""Hello %s"", name); 	} } ```  Note that we don't have to add the HttpServletResponse as an Method argument here, since it is provided via a Thread-local wrapper in the same way we provide the HttpServletRequest.  Another side effect that we get from this approach is that we now can define ""clean"" interfaces (HelloFacade) that aren't tied to any Servlet API classes - since this is now only an implementation detail of the controller implementation.  ```java package demo.api;  /**  * @author Thomas Darimont  */ public interface HelloFacade {  	String great(String name); } ```  This programming model would also enable us to provide some generic invoker factory component that could take an interface (that the controller implements) and an URL to that points to the actual controller. With this information (and some metadata facility that could tell a client of a particular method should be invoked e.g. via RestTemplate with information about e.g. the URL part, HTTP Method, etc. corresponding to the method invoked on a proxy.  This could also be used for some kind of ""contract first"" REST interface design approach where the ""contract"" is specified in the form of a plain java interface perhaps with some metadata attached.  ---  **Affects:** 3.2.9, 4.0.5  **Issue Links:** - #11393 Could not autowire field of type org.springframework.web.context.request.WebRequest  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ea88bc2c816cddd21df90119361b75ad8c566b46","closed","type: enhancement,","spring-projects-issues","2014-05-16T05:41:56Z","2019-01-11T21:13:31Z"
"","16737","Configuration naming conflicts [SPR-12121]","**[Thibault Kruse](https://jira.spring.io/secure/ViewProfile.jspa?name=tkruse)** opened **[SPR-12121](https://jira.spring.io/browse/SPR-12121?redirect=false)** and commented  Hi, I have a horrible bug situation. I will try to create a dummy project to reproduce, but if there is a hint in the meantime, that might help.  We create a jar file with a Spring `@Services` and an `@Configuration`. We use this jar from our application.  In our application, we have another Spring Config: `@Configuration` `@ComponentScan`{...} `@Import`{...} public class ProfileSearchConfig{...}  Running this, we get Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private java.lang.String ... nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'rest.user' in string value ""${rest.user}""      Caused by:     java.lang.IllegalArgumentException: Could not resolve placeholder 'rest.user' in string value ""${rest.user}""  However we get this only on Linux, not on Windows. When renaming the config class ProfileSearchConfig->ProfileSearchConfig2, our tests run through without problems. When renaming ProfileSearchConfig->ProfileSearchAdapterConfig we get the same errors as before.  So what could be the issue here, and how can we debug this?   --- No further details from [SPR-12121](https://jira.spring.io/browse/SPR-12121?redirect=false)","closed","status: invalid,","spring-projects-issues","2014-08-26T02:24:13Z","2019-01-12T05:25:26Z"
"","16421","Hibernate4 version of SpringSessionContext.currentSession() does not create a session if TransactionSynchronizationManager does not contain one [SPR-11801]","**[thiago andrade](https://jira.spring.io/secure/ViewProfile.jspa?name=thiagoh)** opened **[SPR-11801](https://jira.spring.io/browse/SPR-11801?redirect=false)** and commented  _*Please, read this before delete the JIRA issue for being duplicated!!*_  There is as other JIRA issue that relates this problem BUT it relates it as an ""improvement"" and its clear that this cannot be considered as an ordinary improvement, I consider it as a serious bug. By the way there is A LOT of resources around the web of people searching for the solution of this (like this http://stackoverflow.com/questions/20500346/error-no-session-bound-to-current-thread-with-hibernate-4-and-spring-3). They are using this workaround (https://gist.github.com/nexdrew/6992329). The problem is that, as `@Fabricio` Carvalho said, ??The side effect caused by this approach is the overhead of creating and using a HibernateTransactionManager on simple queries. Not in resource consumption of the database, but in processing of the application server.??.  **Here is the description of the issue**  > The Hibernate4 support of Spring 3.1 does not open and register a session in case of the method called is annotated with `@Transactional`(propagation = Propagation.SUPPORTS). > In this case HibernateTransactionManager.doBegin() is never called which is the only place where hibernate session is opened. The result is, that all read operations which do not require a transaction will fail because the call to SessionFactory.currentSession() will result in an exception. > The Hibernate3 implementation contains a fallback for this case in SessionFactoryUtils.doGetSession(...) which is missing in the corresponding Hibernate4 implementation of SpringSessionContext.currentSession(). > If the transaction propagation is changed to REQUIRES_NEW everything is working fine.  The related JIRA issue is #13659  ---  **Affects:** 3.1 GA, 3.2.1, 3.2.2, 3.2.5  **Reference URL:** http://stackoverflow.com/questions/20500346/error-no-session-bound-to-current-thread-with-hibernate-4-and-spring-3  **Issue Links:** - #13659 Hibernate4 version of SpringSessionContext.currentSession() does not create a session if TransactionSynchronizationManager does not contain one (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2014-05-16T15:55:22Z","2019-01-14T05:16:24Z"
"","17067","SimpleJdbcInsert should take Map as arg instead of Map [SPR-12462]","**[The Alchemist](https://jira.spring.io/secure/ViewProfile.jspa?name=the_alchemist)** opened **[SPR-12462](https://jira.spring.io/browse/SPR-12462?redirect=false)** and commented  ### Description  I would like to do something like:  ```java SimpleJdbcInsert insert = new SimpleJdbcInsert(dataSource).withTableName(""x""); Map args = new HashMap(); args.put(""one"", 1); args.put(""two"", 2); insert.setColumnNames(Arrays.asList(""one"", ""two"")); insert.execute(args ); ```  However, this doesn't work because `SimpleJdbcInsertOperations` takes `Map","closed","type: enhancement,","spring-projects-issues","2014-11-22T17:39:33Z","2014-12-09T02:49:17Z"
"","16408","JDBC findColumn gives wrong result in case of duplicate column labels [SPR-11786]","**[Teun Hoogendoorn](https://jira.spring.io/secure/ViewProfile.jspa?name=th76)** opened **[SPR-11786](https://jira.spring.io/browse/SPR-11786?redirect=false)** and commented  Consider the following query:  Table foo1 contains 1 column named fooname. Table foo2 ALSO contains 1 column named fooname.  SELECT * FROM foo1, foo2  (result: fooname, fooname)  findColumn(""fooname"") should return the FIRST and not the SECOND (LAST) index of fooname.  This bug is introduced in Spring JDBC since the implementation ResultSetWrappingSqlRowSet uses a HashMap.  The code should check for existence of the key in the map and not override the value if the key exists.  See: http://docs.oracle.com/javase/8/docs/api/java/sql/ResultSet.html QUOTE: When a getter method is called with a column name and several columns have the same name, the value of the first matching column will be returned.    ---  **Affects:** 3.2.8, 4.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8a28645dd66ca080cf9294db0aa328b88d737c55, https://github.com/spring-projects/spring-framework/commit/0728e32e7f3b93e49dfc8c7af20b489b12b3e663, https://github.com/spring-projects/spring-framework/commit/3ae6c0f4011efee7c42473bd1807fab05afde089  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: bug,","spring-projects-issues","2014-05-15T02:32:29Z","2014-05-20T08:05:03Z"
"","17109","StringToCollectionConverter - pass "" "" (empty space), get Collection of size 1, with a null element. [SPR-12504]","**[Ted Bergeron](https://jira.spring.io/secure/ViewProfile.jspa?name=tedberg)** opened **[SPR-12504](https://jira.spring.io/browse/SPR-12504?redirect=false)** and commented  If you pass a space to StringToCollectionConverter.convert, you get a Collection of size 1, with a null element.  Call StringToCollectionConverter.convert, pass: * source = "" "" * sourceType = java.lang.String * targetType = java.util.Set (in my case)  String[] fields is set to {"" ""}.  In the else block:  ``` Object targetElement = this.conversionService.convert(field.trim(), sourceType, targetType.getElementTypeDescriptor()); target.add(targetElement); ```  has targetElement returned as null and added to target on the next line.  Desired behaviour:  ``` String string = (String) source; ```  is changed to  ``` String string = (String) source; if (string.trim().length == 0) {     return null; } ```    ---  **Affects:** 4.1.1","closed","status: bulk-closed,","spring-projects-issues","2014-12-03T16:02:38Z","2019-01-12T03:31:07Z"
"","16758","Support jackson mix-in classes in Jackson2ObjectMapperFactoryBean [SPR-12144]","**[Tadaya Tsuyukubo](https://jira.spring.io/secure/ViewProfile.jspa?name=tadaya)** opened **[SPR-12144](https://jira.spring.io/browse/SPR-12144?redirect=false)** and commented  In Jackson2ObjectMapperFactoryBean class, jackson mix-in classes can be registered via jackson module. It is more convenient if this factory bean supports direct mix-in class registrations.  ---  **Affects:** 4.1 RC2  **Issue Links:** - #11397 MappingJacksonHttpMessageConverter's ObjectMapper does not use ConversionService when binding JSON to JavaBean properties - #11715 Allow usage of ConversionService for Jackson HttpMessageConverter - #16918 Add serializerByType() deserializerByType() and mixIn() to Jackson2ObjectMapperBuilder  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/25bb58a1e82bcb8f0304573eefb3c89e4134e426","closed","type: enhancement,","spring-projects-issues","2014-09-02T23:16:43Z","2019-01-11T17:21:56Z"
"","16901","Custom @RequestMapping annotations [SPR-12296]","**[Sérgio Vale e Pace](https://jira.spring.io/secure/ViewProfile.jspa?name=svpace)** opened **[SPR-12296](https://jira.spring.io/browse/SPR-12296?redirect=false)** and commented  Support creating annotations with `@RequestMapping` meta-annotation like it is possible to do with the `@Component` annotation.  For instance, I would like to create an annotation `@PostJson` that would replace a `@RequestMapping` with parameters:  ```java @RequestMapping(     method = RequestMethod.POST,      produces = MediaType.APPLICATION_JSON_VALUE     consumes = MediaType.APPLICATION_JSON_VALUE) public @interface PostJson {     String value() default """"; } ```  So I could write:  ```java @PostJson(""/input"") public Output myMethod(Input input) { ```  instead of:  ```java @RequestMapping(value = ""/input"",     method = RequestMethod.POST,     produces = MediaType.APPLICATION_JSON_VALUE,      consumes = MediaType.APPLICATION_JSON_VALUE) public Output myMethod(Input input) { ```  ---  **Affects:** 4.1.1  **Reference URL:** http://stackoverflow.com/questions/26049810/create-annotation-setting-requestmapping-parameters-using-spring-mvc/26050717#26050717  **Issue Links:** - #17335 AnnotatedElementUtils fails to find annotations on abstract, bridge, or interface methods (_**""depends on""**_) - #16137 Introduce unified support for declaring and looking up annotation attribute aliases (_**""depends on""**_) - #16136 Introduce a comprehensive programming model for meta-annotation support - #18022 Introduce predefined composed annotations in core Spring - #18565 Introduce common composed annotations for `@RequestMapping`  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2014-10-03T13:55:01Z","2019-01-13T05:44:31Z"
"","17029","Update SockJS client references from 0.3.4 to 1.0.0 [SPR-12422]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12422](https://jira.spring.io/browse/SPR-12422?redirect=false)** and commented  [SockJS client](https://github.com/sockjs/sockjs-client) 1.0 is likely to be released soon. There is theoretically not much impact on server-side, but we should at least: * Test out server-side implementation against this new client release * Update the CDN SockJS client URL in [AbstractSockJSService](https://github.com/spring-projects/spring-framework/blob/master/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java#L74) * Since SSE now supports CORS (see the [latest RFC](http://www.w3.org/TR/eventsource/)), SockJS client now [supports it without IFrames](https://github.com/sockjs/sockjs-client/issues/201). We should test and eventually update our implementation to support this transport. For example, the [EVENT_SOURCE transport](https://github.com/spring-projects/spring-framework/blob/master/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportType.java#L48 ) should be marked as CORS ready. * Update our reference documentation to specify that our implementation has been tested with the 1.0 protocol and clients (in order to avoid potential incompatibilities when SockJS 1.1 or 2.0 will be released)    ---  **Reference URL:** https://github.com/sockjs/sockjs-client/  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/79c7e30832d261069e00ad2ed21de7f8ae42394f, https://github.com/spring-projects/spring-framework/commit/a770b151d9ddb6953415f671e1ff63d77e09db0a, https://github.com/spring-projects/spring-framework/commit/6c58258d116d5f5c5be1b0d9676a98c417ea69c8","closed","type: task,","spring-projects-issues","2014-11-12T06:30:58Z","2015-07-15T09:05:07Z"
"","16972","MappingJackson2XmlHttpMessageConverter should support text/xml and application/*-xml [SPR-12366]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12366](https://jira.spring.io/browse/SPR-12366?redirect=false)** and commented  `MappingJackson2XmlHttpMessageConverter` should support `text/xml` and `application/*-xml` in addition to `application/xml`, like `Jaxb2RootElementHttpMessageConverter`.   ---  **Affects:** 4.1.1  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/1749#issuecomment-60208238  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1c217aae404d44d2edac5d00773d58093d119f3e","closed","type: enhancement,","spring-projects-issues","2014-10-23T02:21:25Z","2014-11-17T06:42:23Z"
"","16918","Add serializerByType() deserializerByType() and mixIn() to Jackson2ObjectMapperBuilder [SPR-12313]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12313](https://jira.spring.io/browse/SPR-12313?redirect=false)** and commented  ---  **Issue Links:** - #11397 MappingJacksonHttpMessageConverter's ObjectMapper does not use ConversionService when binding JSON to JavaBean properties - #11715 Allow usage of ConversionService for Jackson HttpMessageConverter - #16758  Support jackson mix-in classes in Jackson2ObjectMapperFactoryBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f518ad9009a38dd4ba43f7aa7434bb918d085cc9","closed","type: enhancement,","spring-projects-issues","2014-10-07T08:44:49Z","2019-01-11T19:16:02Z"
"","16914","Modularize Asciidoc [SPR-12309]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12309](https://jira.spring.io/browse/SPR-12309?redirect=false)** and commented  As contributed by [Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma) in his pull request [#641](https://github.com/spring-projects/spring-framework/pull/641), the reference documentation should be re-modularized into separate files, just like it was in the DocBook days.   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/641  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/74072237ee5d3f25057f648ba178a42c745004ae, https://github.com/spring-projects/spring-framework/commit/0baf228db5358b843c1fbb555550542d5cb908c7","closed","type: documentation,","spring-projects-issues","2014-10-07T00:50:30Z","2015-05-26T01:14:40Z"
"","16898","Use Jackson ObjectMapper improved default properties outside spring-web [SPR-12293]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12293](https://jira.spring.io/browse/SPR-12293?redirect=false)** and commented  It could be interesting to have an `ObjectMapper` builder outside `spring-web` and `spring-webmvc` modules (for example in messaging) in order to have the same Jackson default settings everywhere in Spring Framework. It is currently not directly possible since `Jackson2ObjectMapperBuilder` is in `spring-web` module.  Perhaps something to consider if we support in the future `@JsonView` in `@MessageMapping` annotated handler methods.  Another solution (even if less clean) could be to configure the same properties (`DEFAULT_VIEW_INCLUSION` and `FAIL_ON_UNKNOWN_PROPERTIES` to false) directly with the `ObjectMapper` instances in `org.springframework.messaging.converter.MappingJackson2MessageConverter` and `org.springframework.jms.support.converter.MappingJackson2MessageConverter` constructors.   ---  **Affects:** 4.1.1","closed","type: enhancement,","spring-projects-issues","2014-10-03T05:16:59Z","2014-12-09T02:49:26Z"
"","16840","Support Jackson based XML serialization in RestTemplate [SPR-12225]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12225](https://jira.spring.io/browse/SPR-12225?redirect=false)** and commented  Since Spring 4.1.x now supports Jackson based XML serialization, `RestTemplate` should create a `MappingJackson2XmlHttpMessageConverter` instead of a `Jaxb2RootElementHttpMessageConverter` when Jackson XML extension is detected on the classpath, like `WebMvcConfigurationSupport` do.  ---  **Issue Links:** - #16407 Support Jackson2 based XML serialization/deserialization - #17831 AllEncompassingFormHttpMessageConverter does not prefer Jackson2 over JAXB for XML marshalling  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2989fe4203563e7b2335dcf1e8b14befb69c9512","closed","type: enhancement,","spring-projects-issues","2014-09-19T06:02:37Z","2019-01-11T17:25:37Z"
"","16821","Support CompletableFuture as return value in @MessageMapping handlers [SPR-12207]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12207](https://jira.spring.io/browse/SPR-12207?redirect=false)** and commented  ---  **Issue Links:** - #17719 Support CompletableFuture as return type of `@Async` methods - #19964 Async annotation should allow for non-blocking execution with CompletableFuture - #16782 Support ListenableFuture as return value in `@MessageMapping` handlers - #17198 Support CompletableFuture as alternative to DeferredResult in MVC - #19823 Consistently support CompletionStage next to CompletableFuture  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5255e7ae21e6cd6fa25b5f2f7f8379d72f803885  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-09-17T06:02:25Z","2019-01-13T05:44:57Z"
"","16793","Set Jackson DEFAULT_VIEW_INCLUSION property to false by default [SPR-12179]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12179](https://jira.spring.io/browse/SPR-12179?redirect=false)** and commented  As stated in Jackson [JsonView documentation](http://wiki.fasterxml.com/JacksonJsonViews) documentation, by default all properties without explicit view definition are included in serialization.  Spring Framework 4.1 GA currently uses this default behavior, but this could be misleading since most users expect to have only the properties annotated with the JsonView specified on the handler method included in the serialized output.  It should be a better default to set SerializationConfig.Feature.DEFAULT_VIEW_INCLUSION to false. It will be still possible to change this behavior with Jackson2ObjectMapperFactoryBean#setDefaultViewInclusion().  ---  **Affects:** 4.1 GA  **Reference URL:** http://wiki.fasterxml.com/JacksonJsonViews  **Issue Links:** - #16857 Create builder for Jackson ObjectMapper (_**""depends on""**_) - #16510 Set Jackson FAIL_ON_UNKNOWN_PROPERTIES property to false by default","closed","type: enhancement,","spring-projects-issues","2014-09-11T07:47:42Z","2019-01-11T17:20:03Z"
"","16782","Support ListenableFuture as return value in @MessageMapping handlers [SPR-12168]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12168](https://jira.spring.io/browse/SPR-12168?redirect=false)** and commented  ---  **Affects:** 4.1 GA  **Issue Links:** - #16821 Support CompletableFuture as return value in `@MessageMapping` handlers","closed","type: enhancement,","spring-projects-issues","2014-09-09T07:09:33Z","2019-01-13T05:45:12Z"
"","16763","Jackson @JSONView not taken in account when using XML serialization [SPR-12149]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12149](https://jira.spring.io/browse/SPR-12149?redirect=false)** and commented  `AbstractMappingJacksonResponseBodyAdvice.supports()` should also return true when the converter is a `MappingJackson2XmlHttpMessageConverter` in addition to `MappingJackson2HttpMessageConverter`.   ---  **Affects:** 4.1 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1c2857d15e4308b6e15db85bca97207ca8616eeb, https://github.com/spring-projects/spring-framework/commit/a29e41b9fa93162b7731ed2d45a2ac368384decd","closed","type: bug,","spring-projects-issues","2014-09-04T02:35:31Z","2014-09-04T05:31:19Z"
"","16738","Performance issue on ResolvableType cache [SPR-12122]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12122](https://jira.spring.io/browse/SPR-12122?redirect=false)** and commented  While working on Spring Flex issue [FLEX-234](https://jira.spring.io/browse/FLEX-234), I have found that the ResolvableType cache can be really slow.  When there is a lot of entries in this HashMap, getting a simple value could take a lot of time, and the bottleneck seems to come from a lot of calls to ResolvableType.equals().  ResolvableType.equals() uses this.type, getSource(), this.variableResolver.getSource() and this.componentType but ResolvableType.hashCode() uses only this.type. This seems to be the root cause of these huge amount of slow equals() calls when ResolvableType.forType() try to get a value from the HashMap.  By using the same fields in ResolvableType.hashCode() than in ResolvableType.equals(), we should be able to improve performances.  I have created a [benchmark project](https://github.com/sdeleuze/spring-resolvabletype-benchmark) that reproduce this issue.  ---  **Affects:** 4.0.6, 4.1 RC2  **Reference URL:** https://github.com/sdeleuze/spring-resolvabletype-benchmark  **Issue Links:** - [FLEX-234](https://jira.spring.io/browse/FLEX-234) Poor performance stemming from ObjectUtils.nullSafeEquals() calls (_**""is depended on by""**_) - #16021 memory leak in class org.springframework.core.ResolvableType  **Backported to:** [4.0.7](https://github.com/spring-projects/spring-framework/milestone/119?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-08-26T02:38:17Z","2019-01-11T17:23:22Z"
"","16683","Update references to RFC 2616 [SPR-12067]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12067](https://jira.spring.io/browse/SPR-12067?redirect=false)** and commented  Update references to the old RFC 2616 (HTTP 1.1) with references to the new RFC 7230, 7231, 7232, 7233, 7234 and 7235.  ---  **Reference URL:** https://www.mnot.net/blog/2014/06/07/rfc2616_is_dead  **Issue Links:** - #16505 Improve HTTP support and update with new HTTP RFCs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3922f6fc533a98f9c734d465382e91581c1dc7a2","closed","type: documentation,","spring-projects-issues","2014-08-05T03:13:18Z","2019-01-11T18:18:26Z"
"","16623","Improve documentation for using ""."" vs ""/"" as separators with STOMP/WebSocket messaging [SPR-12007]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12007](https://jira.spring.io/browse/SPR-12007?redirect=false)** and commented  ---  **Affects:** 4.1 RC1  This issue is a sub-task of #16283  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/20c9a8bad48f03e4e3f89953054fce8c585f6b2c","closed","type: documentation,","spring-projects-issues","2014-07-18T05:31:50Z","2019-01-11T18:22:58Z"
"","16622","Add documentation for Java SockJS client  [SPR-12006]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-12006](https://jira.spring.io/browse/SPR-12006?redirect=false)** and commented  ---  **Affects:** 4.1 RC1  This issue is a sub-task of #15423  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fe88b6e0543546803771d85628667d5d56297131, https://github.com/spring-projects/spring-framework/commit/28c70baf6110d40609ebcfa6cc8ba4e3ecb09432","closed","type: documentation,","spring-projects-issues","2014-07-18T05:29:42Z","2019-01-11T18:22:45Z"
"","16440","Make ListenableFuture lambda compliant [SPR-11820]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-11820](https://jira.spring.io/browse/SPR-11820?redirect=false)** and commented  When building a Spring 4 / Java 8 application, we can't use lambda with ListenableFuture since ListenableFutureCallback is not a functional interface (2 methods to implement).  5 proposals to improve this: 1. Modify ListenableFutureCallback: it will break API so it is not an option (even if it would be the cleaner solution) 2. Add another method to ListenableFuture with a callback parameter with just one method like mongoDB [MongoFuture](https://github.com/mongodb/mongo-java-driver/blob/3.0.x/driver/src/main/org/mongodb/MongoFuture.java) and [SingleResultCallback](https://github.com/mongodb/mongo-java-driver/blob/3.0.x/driver/src/main/org/mongodb/connection/SingleResultCallback.java). 3. Add new fluent methods to ListenableFuture with single method callbacks allowing to write code like listenableFuture.onSuccess(...).onFailure(...) 4. Add default implementation to ListenableFutureCallback#onFailure() interface : not possible since it would require Java 8 for main code 5. Change nothing and wait for a future version of Spring that will require Java 8 and use native CompletableFuture  My prefered solution is the 3rd.  Any feedback or advice ?  ---  **Affects:** 4.0.5  **Issue Links:** - #16237 Create a synchronous SettableListenableFuture implementation - #17465 Make ListenableFuture chainable  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4e25a14f6c24aa600bcbc60159ed3187bd5e26dd, https://github.com/spring-projects/spring-framework/commit/86e8bdab6bbed12ff8d6f0c76aa19e990a716c85  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-05-26T14:18:54Z","2019-01-11T22:19:37Z"
"","16407","Support Jackson2 based XML serialization/deserialization [SPR-11785]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-11785](https://jira.spring.io/browse/SPR-11785?redirect=false)** and commented  It is basically a MappingJackson2HttpMessageConverter where we register a JacksonXmlModule. It could allow users to setup easily a XML + JSON webservice supporting filtering thanks to JsonView.  It is also a nice alternative to Jaxb2 since it allows to get XML support without `@XmlRootElement` annotations.  It would not impact existing Jaxb2 support since it can be activated only if JacksonXmlModule class from jackson-dataformat-xml JAR module is detected on the classpath.  ---  **Issue Links:** - #16840 Support Jackson based XML serialization in RestTemplate - #11815 Integrate Jackson `@JsonView` - #16857 Create builder for Jackson ObjectMapper - #17831 AllEncompassingFormHttpMessageConverter does not prefer Jackson2 over JAXB for XML marshalling  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ebc726a9154a72d49e34f345ec3461bb59f87681, https://github.com/spring-projects/spring-framework/commit/6665634675da1230339e9e5749f0693fd09a68ff","closed","type: enhancement,","spring-projects-issues","2014-05-15T02:14:11Z","2019-01-13T06:54:00Z"
"","16377","ConcurrentModificationException in DefaultSubscriptionRegistry cache [SPR-11755]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-11755](https://jira.spring.io/browse/SPR-11755?redirect=false)** and commented  When a subscription in unregistered with remaining subscriptions in the cache, a ConcurrentModificationException is thrown by the DestinationCache class.  ``` Exception in thread ""clientInboundChannel-1"" Exception in thread ""clientInboundChannel-2"" java.util.ConcurrentModificationException 	at java.util.LinkedHashMap$LinkedHashIterator.nextNode(LinkedHashMap.java:711) 	at java.util.LinkedHashMap$LinkedKeyIterator.next(LinkedHashMap.java:734) 	at org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$DestinationCache.updateAfterRemovedSubscription(DefaultSubscriptionRegistry.java:191) 	at org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.removeSubscriptionInternal(DefaultSubscriptionRegistry.java:100) 	at org.springframework.messaging.simp.broker.AbstractSubscriptionRegistry.unregisterSubscription(AbstractSubscriptionRegistry.java:91) 	at org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.handleMessageInternal(SimpleBrokerMessageHandler.java:129) 	at org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.handleMessage(AbstractBrokerMessageHandler.java:171) 	at org.springframework.messaging.support.ExecutorSubscribableChannel$1.run(ExecutorSubscribableChannel.java:70) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:744) java.util.ConcurrentModificationException 	at java.util.LinkedHashMap$LinkedHashIterator.nextNode(LinkedHashMap.java:711) 	at java.util.LinkedHashMap$LinkedKeyIterator.next(LinkedHashMap.java:734) 	at org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$DestinationCache.updateAfterRemovedSubscription(DefaultSubscriptionRegistry.java:191) 	at org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.removeSubscriptionInternal(DefaultSubscriptionRegistry.java:100) 	at org.springframework.messaging.simp.broker.AbstractSubscriptionRegistry.unregisterSubscription(AbstractSubscriptionRegistry.java:91) 	at org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.handleMessageInternal(SimpleBrokerMessageHandler.java:129) 	at org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.handleMessage(AbstractBrokerMessageHandler.java:171) 	at org.springframework.messaging.support.ExecutorSubscribableChannel$1.run(ExecutorSubscribableChannel.java:70) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:744) }} ```  The cause seems to be updateCache modification during iterating over its elements rather that concurrent access by 2 threads (updateCache modification are already synchronized).  It can be fixed in DestinationCache by  : - Moving the cached destinations removal outside the for loop. - Using updateCache.entrySet() instead of updateCache.keySet() + updateCache.get() in order to avoid updateCache modification during iteration. The tricky point here is we are using a LinkedHashMap with accessOrder=true. A simple updateCache.get() modify the map. By using updateCache.entrySet() we avoid this update.    ---  **Affects:** 4.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/96da77ef759e8f9623b20d7f28adbb72dc13a946, https://github.com/spring-projects/spring-framework/commit/98738c0bbb9a19cef2ea06aa35efa3713147908c","closed","type: bug,","spring-projects-issues","2014-05-02T11:27:03Z","2014-05-20T08:05:02Z"
"","16593","HttpComponentsClientHttpRequestFactory.setBufferRequestBody(false) does not stop OutOfMemoryError [SPR-11977]","**[Syam Sarangadharan](https://jira.spring.io/secure/ViewProfile.jspa?name=reachsyam)** opened **[SPR-11977](https://jira.spring.io/browse/SPR-11977?redirect=false)** and commented  I am using HttpComponentsClientHttpRequestFactory to establish HttpConnection pooling. I am getting OutOfMemoryError. To avoid this as suggested I used HttpComponentsClientHttpRequestFactory.setBufferRequestBody(false) to prevent the payload getting buffered. But still I get the same OutOfMemoryError.  Here is the code snippet.  ``` public String send(String url, String request) throws RestClientException {  	// Create the HttpComponentsClientHttpRequestFactory 	HttpComponentsClientHttpRequestFactory preconfiguredHTTPInstance = new HttpComponentsClientHttpRequestFactory();  	// Set BufferRequestBody as false, default is true. 	preconfiguredHTTPInstance.setBufferRequestBody(false); 	preconfiguredHTTPInstance.setHttpClient(httpClient);  	RestTemplate restTemplate = new RestTemplate(); 	restTemplate.setRequestFactory(preconfiguredHTTPInstance); 	restTemplate.getMessageConverters().add(new StringHttpMessageConverter());  	String responseString = restTemplate.postForObject(url, request, String.class);  	return responseString; } ```  ---  **Affects:** 4.0.6  **Issue Links:** - #16597 Inconsistent support for RequestCallback in HttpComponentsClientHttpRequestFactory","closed","in: core,","spring-projects-issues","2014-07-09T11:29:50Z","2019-01-12T05:25:41Z"
"","16592","LocalSessionFactoryBuilder instance not getting hibernate properties from config file when the buildSessionFactory method is overridden when using hibernate 4 [SPR-11976]","**[Suyash Gandhi](https://jira.spring.io/secure/ViewProfile.jspa?name=suyashgandhi)** opened **[SPR-11976](https://jira.spring.io/browse/SPR-11976?redirect=false)** and commented  When overriding the buildSessionFactory(LocalSessionFactoryBuilder sfb) method from org.springframework.orm.hibernate4.LocalSessionFactoryBean class, the LocalSessionFactoryBuilder argument does not get populated with the hibernate settings specified in the config file. I have the hibernate settings specified in the application-context.xml file and I have my own class extending from the LocalSessionFactoryBean class. I am overriding the  buildSessionFactory(LocalSessionFactoryBuilder sfb) method in this class. When the buildSessionFactory() method gets invoked, the LocalSessionFactoryBuilder instance passed into the method does not contain any of the settings from the application-context.xml file. The instance gets populated only after the call to buildSessionFactory() has completed. As such, we're not able to apply custom settings when trying to build the session factory.  I am using the following versions for Spring and Hibernate: Spring: 3.2.9.RELEASE Hibernate: 4.2.14.FINAL   ---  **Affects:** 3.2.9  **Attachments:** - [Code snippet for SPR-11976.txt](https://jira.spring.io/secure/attachment/22102/Code+snippet+for+SPR-11976.txt) (_2.87 kB_)","closed","status: bulk-closed,","spring-projects-issues","2014-07-08T14:07:19Z","2019-01-12T02:29:18Z"
"","17118","@SendTo annotation not found on Jms listener with JDK proxy [SPR-12513]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12513](https://jira.spring.io/browse/SPR-12513?redirect=false)** and commented  If the bean that is being introspected for `@JmsListener` annotated method is a JDK proxy, the method used as the source of the Endpoint is the method of the proxy which does not reveal the `@SendTo` annotation on the underlying class.  We should find a way to retrieve that information properly. Adding `@Transactional` on your `@JmsListener` annotated method _might_ be enough to trigger this problem.   ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/adc7ad7fb20660c81cc36038e6e057a0b55c5a20  2 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2014-12-05T07:43:31Z","2014-12-09T02:49:30Z"
"","16986","Package tangle in sockjs [SPR-12379]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12379](https://jira.spring.io/browse/SPR-12379?redirect=false)** and commented  There is a package tangle between `AbstractSockJsService` and `TransportHandlingSockJsService`. Looks like the former should not be in a support package   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6592784ef408ade36cb62b62356ca019ded8e344","closed","type: bug,","spring-projects-issues","2014-10-27T00:41:50Z","2014-11-17T06:42:37Z"
"","16942","JCache operations metadata are not cached properly [SPR-12337]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12337](https://jira.spring.io/browse/SPR-12337?redirect=false)** and commented  `AbstractFallbackJCacheOperationSource` does not cache the fact that no cache operation exists on a given method. This means that every time said method is invoked, we look for those metadata again.  ---  **Affects:** 4.1 GA  **Issue Links:** - #19965 Caching of cache meta data causes classes to not be unloadable as when factory is closed this data is not removed  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6f987a9cf8c5fa8c20d6f6d15f32f6bcd159ca7b","closed","in: core,","spring-projects-issues","2014-10-15T07:35:21Z","2019-01-11T19:14:30Z"
"","16941","@EnableCaching provokes early initialization of any config class declaring a CacheManager [SPR-12336]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12336](https://jira.spring.io/browse/SPR-12336?redirect=false)** and commented  See https://github.com/spring-projects/spring-boot/issues/1711  Interesting analysis: https://gist.github.com/dsyer/ebeb25d5afbdd9242cd5.  ---  **Affects:** 4.1.1  **Issue Links:** - #20842 Programmatic creation of caching proxies using CacheProxyFactoryBean does not work  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0e36402bd29d602f5f253ae2adddfca60f3f37b8, https://github.com/spring-projects/spring-framework/commit/5aefcc802ef05abc51bbfbeb4a78b3032ff9eee3, https://github.com/spring-projects/spring-framework/commit/e2518e0b7c40e4974d6d642bae7ff1e9ec6c800f","closed","in: core,","spring-projects-issues","2014-10-15T04:22:54Z","2019-01-11T19:14:01Z"
"","16894","Runtime resolution of destinations [SPR-12289]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12289](https://jira.spring.io/browse/SPR-12289?redirect=false)** and commented  Annotated endpoints such as `@JmsListener` requires the destination to be set in the code. It is possible to externalize that value to a property using a placeholder but that information is mandatory.  It would be nice to be able to resolve the destination to use at runtime.   ---  **Affects:** 4.1 GA  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-10-02T02:10:03Z","2019-01-13T20:58:31Z"
"","16880","Duplicate entries in ResolvableType cache [SPR-12275]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12275](https://jira.spring.io/browse/SPR-12275?redirect=false)** and commented  While doing some investigations on #16021 we discovered that the `ResolvableType` internal cache was holding a **lot** of duplicates for simple types (i.e. `String`, `Integer`, etc).  It turns out that we are using too much metadata to compute the key when the class has no generic information. so `setFoo(String foo)` and `setBar(String bar)` would result in two entries in the cache because the `TypeProvider` is different.  ---  **Affects:** 4.0.7, 4.1 GA  **Issue Links:** - #16021 memory leak in class org.springframework.core.ResolvableType  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","in: core,","spring-projects-issues","2014-09-30T08:42:14Z","2019-01-11T17:36:54Z"
"","16797","Message listener container does not apply proper recovery anymore [SPR-12183]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12183](https://jira.spring.io/browse/SPR-12183?redirect=false)** and commented  There is [this question](http://stackoverflow.com/questions/25778127/spring-jms-listener-container-listener-setup-timeout) on SO and also some other tests that confirm that 4.1 introduced a regression in the way the message listener container handles recovery.  It seems that certain exceptions are not being recognized the same way, not leading to an invalidation of the connection and therefore not applying the recovery at all.  It looks like #16400 may be the reason of the regression even though it's not obviously clear why it would be.  ---  **Affects:** 4.1 GA  **Issue Links:** - [AMQP-427](https://jira.spring.io/browse/AMQP-427) BackOff support in SimpleMessageListenercontainer (_**""is depended on by""**_) - #16400 MessageListenerAdapter might throw JMSException on message deserialization  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb45fb4538d723ecdc136ceaaba032bcf8cdb42c","closed","type: bug,","spring-projects-issues","2014-09-11T15:47:40Z","2019-01-11T17:19:35Z"
"","16764","Automate Structure101 checks [SPR-12150]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12150](https://jira.spring.io/browse/SPR-12150?redirect=false)** and commented  It would be nice if we could automate the Structure101 cyclical check on CI to get a daily report.   --- No further details from [SPR-12150](https://jira.spring.io/browse/SPR-12150?redirect=false)","open","type: task,","spring-projects-issues","2014-09-04T07:27:34Z","2016-01-02T12:26:18Z"
"","16721","Wrong string equality in Indexer [SPR-12105]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12105](https://jira.spring.io/browse/SPR-12105?redirect=false)** and commented  `Indexer` has invalid string equality constructs. Something like  ```java if (exitTypeDescriptor == ""I"")  ```    ---  **Affects:** 4.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5b1341f4b572277c33a8ebf7ade1bfdb5de03437","closed","in: core,","spring-projects-issues","2014-08-20T07:22:41Z","2014-09-04T05:31:20Z"
"","16708","@Async Supporting ListenableFuture not applied with AspectJ [SPR-12092]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12092](https://jira.spring.io/browse/SPR-12092?redirect=false)** and commented  #16528 has not been ported to AspectJ  ---  **Affects:** 4.1 RC1  **Issue Links:** - #16528 `@Async` Supporting ListenableFuture  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2553fb8ba1cef72d594032149befd02a56300f8a","closed","in: core,","spring-projects-issues","2014-08-18T01:53:09Z","2019-01-13T05:46:04Z"
"","16706","UncaughtExceptionHandler is not configured with AspectJ [SPR-12090]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12090](https://jira.spring.io/browse/SPR-12090?redirect=false)** and commented  #13636 has introduced an `UncaughtExceptionHandler` but it is not configured properly in AspectJ mode  ---  **Affects:** 4.1 RC1  **Issue Links:** - #17394 Exception not thrown by OnFailure() when using ListenableFutureCallback - #13635 Spring `@Async` should have some way of specifying UncaughtExceptionHandler  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8fc191c95e2d87e4b9a096edd73dea761d4cff3a","closed","in: core,","spring-projects-issues","2014-08-18T00:29:41Z","2019-01-13T05:46:06Z"
"","16693","Update CI server to use JDK 8u20 [SPR-12077]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12077](https://jira.spring.io/browse/SPR-12077?redirect=false)** and commented  Make sure the 4.1.GA compiles against the latest JDK   --- No further details from [SPR-12077](https://jira.spring.io/browse/SPR-12077?redirect=false)","closed","type: task,","spring-projects-issues","2014-08-12T00:49:49Z","2014-09-04T05:31:18Z"
"","16688","Move RequestReplyHeaderMapper to spring-messaging [SPR-12072]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12072](https://jira.spring.io/browse/SPR-12072?redirect=false)** and commented  `RequestReplyHeaderMapper` and its base implementation is required in a common place because of [AMQP-414](https://jira.spring.io/browse/AMQP-414)   ---  **Issue Links:** - [AMQP-414](https://jira.spring.io/browse/AMQP-414) RabbitMQ Annotation-Driven Endpoints (_**""is depended on by""**_)","closed","status: declined,","spring-projects-issues","2014-08-07T01:29:41Z","2014-08-08T08:05:43Z"
"","16680","JmsMessagingExceptionTranslator package tangle [SPR-12064]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12064](https://jira.spring.io/browse/SPR-12064?redirect=false)** and commented  The addition of `JmsMessagingExceptionTranslator` created a package tangle.  That class uses `MessageConversionException` (from the `.convert` sub-package and `DestinationResolutionException` (from the `.destination` sub-package).  In the `.convert` sub-package, `MessagingMessageConverter` uses the header mapping facility from the support package  In the `.destination` sub-package, `JmsDestinationAccessor` uses the `JmsAccessor` base class  Since `JmsDestinationAccessor` isn't new, `JmsMessagingExceptionTranslator` can't really sit in the `.support` package and have dependencies to some of the sub-packages. It looks like it should go back to the root package.  ---  **Affects:** 4.1 RC2  **Issue Links:** - #16654 JmsMessagingTemplate should not throw JmsException directly  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c06ac06bdd03729065937fb86954befcec14eb2e","closed","type: enhancement,","spring-projects-issues","2014-08-04T09:32:13Z","2019-01-11T18:18:09Z"
"","16669","Move JmsHandlerMethodFactory to messaging [SPR-12053]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12053](https://jira.spring.io/browse/SPR-12053?redirect=false)** and commented  `JmsHandlerMethodFactory` is actually not JMS specific at all. Working on Spring AMQP support revealed that a method invocation abstraction belongs in the messaging module instead.  Let's do this before the final release.   ---  **Affects:** 4.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7d1e33d88dac2806fc01096491abbca37cf5c87a","closed","type: task,","spring-projects-issues","2014-08-01T06:22:22Z","2014-08-15T01:52:43Z"
"","16654","JmsMessagingTemplate should not throw JmsException directly [SPR-12038]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12038](https://jira.spring.io/browse/SPR-12038?redirect=false)** and commented  Consider a review of `JmsMessagingTemplate` to translate any `JmsException` to a standard `MessagingException` that encapsulates the lower level exception.  Right now, plain `JmsException` instances are thrown.  ---  **Affects:** 4.1 RC1  **Issue Links:** - #18027 MessagingException should not provide empty description String to NestedRuntimeException - #16680 JmsMessagingExceptionTranslator package tangle  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1fe742addf9550ae389ebf554c337da604779144, https://github.com/spring-projects/spring-framework/commit/89d63eb79b61764672e9ef9b3926e3635bbb188a, https://github.com/spring-projects/spring-framework/commit/c06ac06bdd03729065937fb86954befcec14eb2e","closed","type: enhancement,","spring-projects-issues","2014-07-28T06:27:11Z","2019-01-11T18:20:15Z"
"","16653","Update JmsMessagingTemplate to support MessageRequestReplyOperations [SPR-12037]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12037](https://jira.spring.io/browse/SPR-12037?redirect=false)** and commented  MessageRequestReplyOperations is an optional interface that a messaging template can implement to support synchronous request-reply operations.  Let's review `JmsMessagingTemplate` and implement that interface as well to provide a full support of the messaging abstraction.  ---  **Affects:** 4.1 RC1  **Issue Links:** - #8017 Implement synchronous request / response logic in JmsTemplate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b6389a6c660e46fd09aa3768fa6ea3e761b555f8","closed","type: enhancement,","spring-projects-issues","2014-07-28T06:22:15Z","2019-01-11T18:20:00Z"
"","16640","NPE in DefaultListableBeanFactory#getPriority [SPR-12024]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12024](https://jira.spring.io/browse/SPR-12024?redirect=false)** and commented  A candidate bean instance can be actually `null`. The resolution of #15179 introduced a potential null deference in such a case  ---  **Affects:** 4.1 RC1  **Issue Links:** - #15179 Add support for `@javax`.annotation.Priority as alternative to `@Primary`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e849bc3e9029b6e572dc3b501c5779ea1da3b726","closed","in: core,","spring-projects-issues","2014-07-23T09:43:31Z","2019-01-13T05:47:42Z"
"","16606","Create missing 4.1 XSDs [SPR-11990]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11990](https://jira.spring.io/browse/SPR-11990?redirect=false)** and commented  Not all XSDs have been migrated to their 4.1 version. We should simply copy the 4.0 version for those who haven't changed since 4.0  ---  **Issue Links:** - #16627 Spring 4.1 schema issues","closed","type: task,","spring-projects-issues","2014-07-14T08:10:56Z","2019-01-11T22:23:53Z"
"","16604","Customize concurrency per JMS listener [SPR-11988]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11988](https://jira.spring.io/browse/SPR-11988?redirect=false)** and commented  Customizing the concurrency per listener sounds an obvious feature but the namespace only allows to do this per `jms:listener-container` (that is, every listeners in the same containers get the same concurrency). The only way to get around this is to have on listener per container or fallback on an abstract bean definition (i.e. not use the namespace)  As `@JmsListener` is aligned on the namespace, it suffers the same limitation.  The purpose of this issue is to add a concurrency attribute at the listener level (and on the annotation).  See also http://stackoverflow.com/questions/21860195/jmstemplate-define-concurrency-per-queue/21865846#21865846   ---  **Affects:** 4.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/29bdbceaa27c895795a8912ac4bfdc6b1bad3b75","closed","type: enhancement,","spring-projects-issues","2014-07-14T04:54:37Z","2014-07-18T10:16:29Z"
"","16597","Inconsistent support for RequestCallback in HttpComponentsClientHttpRequestFactory [SPR-11981]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11981](https://jira.spring.io/browse/SPR-11981?redirect=false)** and commented  `HttpComponentsClientHttpRequestFactory` is supposed to handle features in a similar manner as `SimpleClientHttpRequestFactory` but it does not support `RequestCallback` when the `bufferRequestBody` is disabled.  Consider the following code  ```java // Create the HttpComponentsClientHttpRequestFactory SimpleClientHttpRequestFactory preconfiguredHTTPInstance = new SimpleClientHttpRequestFactory();   // Set BufferRequestBody as false, default is true. preconfiguredHTTPInstance.setBufferRequestBody(false);   RestTemplate restTemplate = new RestTemplate(); restTemplate.setRequestFactory(preconfiguredHTTPInstance); restTemplate.getMessageConverters().add(new StringHttpMessageConverter());  RequestCallback requestCallback = new RequestCallback() {     @Override     public void doWithRequest(ClientHttpRequest request) throws IOException {         IOUtils.copy(content.getInputStream(), request.getBody());     } };  HttpMessageConverterExtractor responseExtractor =         new HttpMessageConverterExtractor(String.class, restTemplate.getMessageConverters()); return restTemplate.execute(url, HttpMethod.POST, requestCallback, responseExtractor) ```  Switching to `HttpComponentsClientHttpRequestFactory` leads to `UnsupportedOperationException(""getBody not supported"")`  ---  **Affects:** 4.0.6  **Issue Links:** - #15739 Upgrade HttpComponentsHttpInvokerRequestExecutor to require Apache HttpComponents 4.3 - #16593 HttpComponentsClientHttpRequestFactory.setBufferRequestBody(false) does not stop OutOfMemoryError  2 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-07-10T05:16:16Z","2019-01-12T02:29:07Z"
"","16570","Reduce PlatformTransactionManager lookups in TransactionAspectSupport [SPR-11954]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11954](https://jira.spring.io/browse/SPR-11954?redirect=false)** and commented  `TransactionAspectSupport#determinePlatformTransactionManager` does not cache the result of the lookup and perform that same lookup for every cache operation.  ---  **Affects:** 4.0.5  **Issue Links:** - #17123 AnnotationTransactionAspect retains reference to JpaTransactionManager from closed context (_**""is depended on by""**_) - #17145 `@Transactional` qualifier is ignored by TransactionAspectSupport if default transaction manager is set (_**""is depended on by""**_) - #19080 Transaction manager bean in TransactionInterceptor retained after JUnit test class completes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cec26e9ac4af524575d6c5a2e2cd15dca900b8ca, https://github.com/spring-projects/spring-framework/commit/4e257243f2dd2fdd5625286d01976b346a74f5d7","closed","type: enhancement,","spring-projects-issues","2014-07-04T07:16:51Z","2019-01-13T05:47:55Z"
"","16543","Better handling of URI encoding configuration [SPR-11925]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11925](https://jira.spring.io/browse/SPR-11925?redirect=false)** and commented  Decoding an URI can happen at two stages:  1. The container may decode some part of the URI (some methods of `HttpServletRequest` do) 2. Spring MVC decodes the URI in various places. Most usage is centralized in `UrlPathHelper` though.  `UrlPathHelper` defaults to `ISO-8859-1` which is the default encoding defined in the spec. However if an encoding is set in the request, `UrlPathHelper` uses such encoding to decode the URI.  Mixing different encodings for those stages lead to problems that can be very hard to track. In the end, forcing the encoding to be the same at all levels is the solution that is widely used.  It seems that most people configure the container to use `UTF-8` (if necessary) alongside  `CharacterEncodingFilter`. This filter sets the encoding of the request to a configurable value (here `UTF-8`) which will ensure that all decoding steps use the same encoding  The purpose of this issue is to investigate how we could bring such support as a core feature of Spring MVC rather than a user-defined filter. Another investigation would be to see how we could support a different encoding for the URI and the body (i.e. the URI uses `UTF-8` but the body is decoded by some other encoding because of the way the client encoded it)  ---  **Issue Links:** - #16720 URL which contain ""%85"" can't request (_**""duplicates""**_) - #16441 Unable to retrieve FlashMap when contains ""+""(half-space) in the request parameters - #16099 PathVariable encoding fails if request charset is not set  2 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-06-27T11:11:58Z","2019-01-12T02:29:36Z"
"","16459","callout formatting issue in documentation [SPR-11840]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11840](https://jira.spring.io/browse/SPR-11840?redirect=false)** and commented  Some part of the documentation use callout and these are not rendered properly, probably since the move to AsciiDoctor  `` does not render the proper sign and the callout link is gone  Example at http://docs.spring.io/spring/docs/current/spring-framework-reference/html/jdbc.html (check for ""blob"")   --- No further details from [SPR-11840](https://jira.spring.io/browse/SPR-11840?redirect=false)","closed","type: documentation,","spring-projects-issues","2014-06-02T05:02:55Z","2014-07-18T10:16:35Z"
"","16437","MessageReceivingOperations returns 'null' if the payload cannot be converted [SPR-11817]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11817](https://jira.spring.io/browse/SPR-11817?redirect=false)** and commented  MessageReceivingOperations.receiveAndConvert Javadoc states that the return value may be `null`  > if the message could not be received, for example due to a timeout  However, both `SimpleMessageConverter` and `GenericMessageConverter` returns `null` if an existing payload cannot be converted. This looks like we're ignoring any conversion issue and I see two things we should review:  1. The converter implementation simply returns `null` if the conversion is not supported or if the requested target type is not assignable to the payload 2. In the receiver, it is impossible to make a difference between ""no message"" or ""an existing message with a non convertible type""  Unless I am missing something, an exception should be thrown right the way if we can't convert it instead of returning null.   ---  **Affects:** 3.2.9, 4.0.5","closed","type: enhancement,","spring-projects-issues","2014-05-25T23:42:32Z","2014-07-18T10:16:29Z"
"","16400","MessageListenerAdapter might throw JMSException on message deserialization [SPR-11778]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11778](https://jira.spring.io/browse/SPR-11778?redirect=false)** and commented  This is related to #16384. If a message is obviously wrong, we throw a `JMSException`. This isn't supposed to be possible in practice as `MessageListener` is not able to throw a `JMSException`.  Throwing a `JMSException` invalidates the connection and start a recovery which is invalid in such a case.  ---  **Issue Links:** - #16797 Message listener container does not apply proper recovery anymore - #16384 Cache level CACHE_NONE does not recover properly on JMSException","closed","type: bug,","spring-projects-issues","2014-05-13T03:02:06Z","2019-01-11T21:13:49Z"
"","16394","Support org.springframework.messaging.Message as an alternative to MessageCreator in the JMS support [SPR-11772]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-11772](https://jira.spring.io/browse/SPR-11772?redirect=false)** and commented  It would be nice if a JMS-based component was able to take a `Message` in the send operation. That way we would just build the message in a protocol independent manner and let the template transform that to a JMS message  for us.  ---  **Reference URL:** http://stackoverflow.com/questions/23548665/why-does-spring-jms-framework-use-messagecreator  **Issue Links:** - #15045 Better support for generics and lambdas in JmsTemplate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7469159bf1ddbb0eac292388883fa1904f98d4f0, https://github.com/spring-projects/spring-framework/commit/9fabcad3dd40296620e0c2832f9f045076600966","closed","type: enhancement,","spring-projects-issues","2014-05-09T06:42:19Z","2019-01-11T21:15:18Z"
"","16684","Add Exception tracking to JamonPerformanceMonitorInterceptor [SPR-12068]","**[Steve Souza](https://jira.spring.io/secure/ViewProfile.jspa?name=stevesouza)** opened **[SPR-12068](https://jira.spring.io/browse/SPR-12068?redirect=false)** and commented  JamonPerformanceMonitorInterceptor currently grabs the method name and tracks performance of methods.  It would nice to add exception tracking to this.  The idea is that if any of the methods monitored by JamonPerformanceMonitorInterceptor throw an exception jamon can count them.  This would entail counting 2 things.  1) The number of overall exceptions using a jamon lable like:  com.jamonapi.Exceptions 2) The number of specific exceptions using the exception class name as the lable.  Examples are: java.io.EOFException, and javax.sql.rowset.serial.SerialException.  But they could be anything.  This is very useful for tracking problems that are occurring in a system.  In addition if the user tracks the N most recent exceptions (via a JAMon buffer listener) the full stack traces would be viewable via the jamon war.  The stack traces are also visible via the monitor associated with the method which is already available in JamonPerformanceMonitorInterceptor.  Note these capabilities only entail adding a few lines of code.  Other jamon monitoring modules already use this approach.  Note I am the author of jamon and could add this as a pull request if you would like to include it.  Here is an example of what the data would look like in the jamon war.  The screens include both the exception count as well as viewing full stack traces (however i am not proposing the arguments capability that is discussed in the link)  http://jamonapi.sourceforge.net/spring_aop_monitoring.html#whatdoesitlooklike  Cheers, Steve   ---  **Affects:** 4.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/51e4b07856c8b5efca40f86fd1c654be1f2645a1","closed","type: enhancement,","spring-projects-issues","2014-08-05T07:12:41Z","2014-09-04T05:31:15Z"
"","17007","Auto exported lazy @ManagedResources should at least log errors if they can't be initialized [SPR-12399]","**[Steve Ash](https://jira.spring.io/secure/ViewProfile.jspa?name=steve.ash)** opened **[SPR-12399](https://jira.spring.io/browse/SPR-12399?redirect=false)** and commented  We use the `@ManagedResource` and `@ManagedOperation` all the time.  Since most of our singletons are lazy when it publishes the managed JMX bean it creates a cglib proxy to register with the mbean server in order to preserve the laziness.  This is good.  The first time this JMX method is invoked, the bean is retrieved from the container and the managed operation method is invoked.  If anything fails in between the mbean server calling the proxy and the proxy calling our application code inside the operation -- the exception will go back through RMI and if the client is JConsole or JVisualVm then it will fail as the exception classes aren't on those classpaths.  It would be nice if spring would provide a way to enable logging in these scenarios.  Or at least log any exceptions encountered during that lazy initialization in between the cglib proxy and calling our application code.  The current workaround is to eagerly init the jmx managed beans to get any failures to happen at startup, which is a fair workaround.   ---  **Affects:** 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5f160c17cda699572d6a57c723cb87c26598b378","closed","type: enhancement,","spring-projects-issues","2014-10-30T08:20:17Z","2014-11-17T06:42:36Z"
"","17135","org.apache.http.impl.client.InternalHttpClient.getParams() throws UnsupportedOperationException [SPR-12530]","**[Stephen More](https://jira.spring.io/secure/ViewProfile.jspa?name=mores)** opened **[SPR-12530](https://jira.spring.io/browse/SPR-12530?redirect=false)** and commented  Method getParams() in org.apache.http.impl.client.InternalHttpClient is no longer supported.  org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor.setConnectTimeout( int timeout )  and  org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor.setReadTimeout( int timeout )  are trying to call getParams() from httpclient.  ---  **Affects:** 4.1.3  **Issue Links:** - #15739 Upgrade HttpComponentsHttpInvokerRequestExecutor to require Apache HttpComponents 4.3 (_**""is duplicated by""**_)","closed","in: web,","spring-projects-issues","2014-12-10T07:42:32Z","2019-01-12T16:46:15Z"
"","16446","MarshallingView does not support JAXBElement value by default [SPR-11827]","**[Stephen Medders](https://jira.spring.io/secure/ViewProfile.jspa?name=medderssc)** opened **[SPR-11827](https://jira.spring.io/browse/SPR-11827?redirect=false)** and commented  The method `locateToBeMarshalled` in `org.springframework.web.servlet.view.xml.MarshallingView` checks to see if the object from the model is supported by the marshaller, and throws an exception if it is not:  ``` if (!this.marshaller.supports(obj.getClass())) {     throw new IllegalStateException(""Model object ["" + obj + ""] retrieved via key ["" + this.modelKey + ""] is not supported by the Marshaller""); } ```  In some circumstances, a service may need to marshal an object that requires wrapping in a `JAXBElement` before marshalling.  In this case, the `obj` variable will be of class `JAXBElement`.  Calls to `marshaller.supports(obj)` when obj is a JAXBElement always returns false, at least for the Spring `Jaxb2Marshaller`.  An additional check should be added so that if obj is a JAXBElement, then check if the marshaller supports the class of that elements value:  ``` this.marshaller.supports(jaxbElement.getDeclaredType()); ```    ---  **Affects:** 4.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e4aabd5288c981a0ec0d9a21d94e4eca58206c9b","closed","type: enhancement,","spring-projects-issues","2014-05-28T10:52:48Z","2014-07-18T10:16:34Z"
"","16491","Incorrect URI built when processing reverse-proxied request with default port for scheme [SPR-11872]","**[Stephen Masters](https://jira.spring.io/secure/ViewProfile.jspa?name=stephen_masters)** opened **[SPR-11872](https://jira.spring.io/browse/SPR-11872?redirect=false)** and commented  Found in org.springframework.hateoas.mvc.ControllerLinkBuilder whilst working with Spring Boot 1.0.2, although the bug lies in org.springframework.web.servlet.support.ServletUriComponentsBuilder, from which the code was copied verbatim.  Assume following configuration:  Access REST service at: http://my.url/myapi/foo With reverse proxy to the Spring Boot app running on: http://1.1.1.1:20080/foo Links created by ControllerLinkBuilder will look like: http://my.url:20080/foo  This is because when a default port is used for a scheme (http/80, https/443) the ServletUriComponentsBuilder makes the invalid assumption that the ""X-Forwarded-Host"" header will be ""my.url:80"". At least when using Apache HTTPD as the proxy, the port is not appended if it is default for the scheme. Therefore the builder incorrectly sets the port to the port on which the application is listening.   ---  **Affects:** 4.0.3  **Reference URL:** http://stackoverflow.com/questions/24179807/is-there-a-means-to-set-the-host-port-for-the-spring-hateoas-controllerlinkbu/24184685#24184685  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2c77de10dd820c94e0ae48836991f6943d62a600  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2014-06-12T06:40:58Z","2019-01-11T22:16:41Z"
"","16776","Controller mapping params variable name having side effect on neighboring handler [SPR-12162]","**[Stephane](https://jira.spring.io/secure/ViewProfile.jspa?name=stephaneeybert)** opened **[SPR-12162](https://jira.spring.io/browse/SPR-12162?redirect=false)** and commented  There seems to be some side effects with the names used in the params attribute of the `@RequestMapping` annotation.  Trying to resolve a handler from two alternatives differentiated only by their params attribute can give a `java.lang.NoSuchMethodError`: `org.springframework.http.MediaType.compareTo(Lorg/springframework/http/MediaType;)` exception.  This occurs when one name in the params attribute list is shared between the handlers.  Kind Regards,  Stephane Eybert   ---  **Affects:** 4.0.6, 4.0.7  **Reference URL:** http://stackoverflow.com/questions/25700041/puzzling-rest-controller-mapping  **Attachments:** - [TeamTechnicianController.java](https://jira.spring.io/secure/attachment/22204/TeamTechnicianController.java) (_8.09 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/c4d7741bb1763731786ade10954c8fb789baa0c5","closed","status: invalid,","spring-projects-issues","2014-09-08T01:18:29Z","2019-01-12T05:25:24Z"
"","16676","Improve exception message: Default SmartContextLoaders do not support locations and @Configuration classes simultaneously [SPR-12060]","**[Stephane Mikaty](https://jira.spring.io/secure/ViewProfile.jspa?name=stephane)** opened **[SPR-12060](https://jira.spring.io/browse/SPR-12060?redirect=false)** and commented  #### Overview  I'm still getting the error mentioned in the reference URL, and I have not found any other mention of this edge case. Is this by design or simply not implemented yet?  I attached the files I used as reproduction.  1. `demo.notworking` exhibits the issue 2. `demo.working` works as expected and so I think #1 could well be supported with a simple code fix.  When running `demo.notworking.ConcreteSubTest` as JUnit Test, I get the following:  ``` java.lang.IllegalStateException: Neither GenericXmlContextLoader nor AnnotationConfigContextLoader was able to load an ApplicationContext from [MergedContextConfiguration@7e02286 testClass = ConcreteSubTest, locations = '{classpath:/test-config.xml}', classes = '{class demo.notworking.ConcreteSubTest$Config}', contextInitializerClasses = '[]', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]. ```  When running demo.working.ConcreteSubTest as JUnit Test, I get the following:  ``` org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [demo.StringLabelBean] is defined: expected single matching bean but found 2: demo.StringLabelBean#0,bean ```  ---  #### Deliverables  1. [x] Improve exception message in `AbstractDelegatingSmartContextLoader.loadContext()` to provide better clarity in scenarios like the one described above.  ---  **Affects:** 3.2.6, 3.2.10, 4.0.6  **Reference URL:** http://forum.spring.io/forum/spring-projects/container/125452-contextconfiguration-inheritance-mixing-xml-and-bean-configuration-in-spring-tests  **Attachments:** - [testfiles.tgz](https://jira.spring.io/secure/attachment/22158/testfiles.tgz) (_1.17 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/181299cc6c13d5096e21dc01fea763ab745b958a","closed","type: enhancement,","spring-projects-issues","2014-08-02T13:45:37Z","2019-01-13T20:59:04Z"
"","17078","SelectedValueComparator triggering a lot of database lookups with DomainClassConverter [SPR-12472]","**[Stephan Sundermann](https://jira.spring.io/secure/ViewProfile.jspa?name=ssundermann)** opened **[SPR-12472](https://jira.spring.io/browse/SPR-12472?redirect=false)** and commented  When using select tags with spring form binding, prefilling these selects in the form object will trigger a lot of database lookups when a DomainClassConvert is used leading to massive performance issues. The issue seems to happen in SelectedValueComperator which has a lot of comparisons and continues to go down through the comparisons until one comparison returns true. Eventually it will hit exhaustiveCompare() which will then trigger the conversion to a domain object. When there are for example 100 options in the select tag it will trigger in the worst case 100 database lookups.  In my form object I have:  ```java public class NewCourseForm { ...     @NotEmpty(message = NOT_BLANK_MESSAGE)     private List lecturers; ... } ```  The domain class:  ```java @Entity @Table(name=""Lecturer"") @Data public class Lecturer implements Serializable { ...     @Override     public boolean equals(Object lecturer) {         if(lecturer instanceof Integer) {             return this.id == lecturer;         } else if(lecturer instanceof String) { 	     return Integer.toString(this.id).equals(lecturer); 	} else if(lecturer instanceof Lecturer) {             return this.id == (((Lecturer) lecturer).getId());         } else return false;     } ... ```  My fix for now was to disable the exhaustiveCompare, but this seems to be a bad way and can probably not get merged. Is there something I am missing here? Is there an annotation or interface which I can implement to tell spring to just use my equals method I implemented in my domain object without doing a exhaustiveCompare?  ---  **Affects:** 4.1.2, 4.1.3  **Attachments:** - [fix.patch](https://jira.spring.io/secure/attachment/22375/fix.patch) (_1.55 kB_)  **Issue Links:** - #14089 Slow JSP render for OptionTag (_**""is duplicated by""**_) - [DATACMNS-672](https://jira.spring.io/browse/DATACMNS-672) Entity is converted to its ID unexpectedly in a Spring EL expression  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/8788e6c10121f1aefd7378fa105e17e309f03ea2, https://github.com/spring-projects/spring-framework-issues/commit/49670a60562938dada414a6cf838a783f9c5540e","closed","type: enhancement,","spring-projects-issues","2014-11-26T02:33:26Z","2019-01-13T20:58:02Z"
"","16425","MVC: which parameter cannot be parsed? [SPR-11805]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-11805](https://jira.spring.io/browse/SPR-11805?redirect=false)** and commented  When Spring MVC cannot parse request parameter, exception message does not contain information about which parameter cannot be parsed. So it is hard to find what's wrong looking in logs.  Test case:  ``` @EnableAutoConfiguration @Controller public class Bug1 {      @RequestMapping(""/"")     public String index(@RequestParam(""aa"") int aa, @RequestParam(""bb"") int bb) {         return ""hello world"";     }      @ExceptionHandler     public String foo(Throwable throwable) {         throwable.printStackTrace();         return ""exception handled"";     }      public static void main(String[] args) {         SpringApplication.run(Bug1.class, args);     } } ```  Exception is:  ``` org.springframework.beans.TypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: ""1.1"" 	at org.springframework.beans.TypeConverterSupport.doConvert(TypeConverterSupport.java:77) 	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:47) 	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:582) 	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:105) 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:79) 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:157) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:124) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:749) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:690) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:945) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:876) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:852) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:620) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501) 	at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:683) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408) 	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1040) 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:607) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1721) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1679) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:744) Caused by: java.lang.NumberFormatException: For input string: ""1.1"" 	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) 	at java.lang.Integer.parseInt(Integer.java:580) 	at java.lang.Integer.valueOf(Integer.java:766) 	at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:155) 	at org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(CustomNumberEditor.java:113) 	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:430) 	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:403) 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:181) 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:93) 	at org.springframework.beans.TypeConverterSupport.doConvert(TypeConverterSupport.java:64) 	... 41 more ```  open http://localhost:8080/?aa=1.1&bb=2  Parameter `aa` cannot be parsed, but I cannot tell it from exception stack trace.  ---  **Affects:** 4.0.2  **Issue Links:** - #14786 TypeMismatchException for `@RequestParam` does not contain parameter name (_**""duplicates""**_) - #19384 Specific exceptions for missing request headers, cookies, etc - #20147 Pass input message to HttpMessageNotReadableException for better logging  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2014-05-19T05:44:05Z","2019-01-13T06:53:55Z"
"","17039","Introspection with BeanUtils started failing against java.awt.Window [SPR-12434]","**[Sriram Moorthy](https://jira.spring.io/secure/ViewProfile.jspa?name=sriram.moorthy)** opened **[SPR-12434](https://jira.spring.io/browse/SPR-12434?redirect=false)*** and commented  Hi,  We have an application with Swing app as client and a web app running on tomcat server providing the application related services. We are in the process of upgrading from spring 2.5 to 4.1.0 version. The application changes are complete and it works fine with in eclipse environment. When we deploy the app on Tomcat server and access the app from the Swing client (downloaded via Java Web Start / JNLP) we were able to login to the application browse few application screens. But on few screens we get the following exception. As soon as the exception appears the window closes on the client side. On the server log there are no issues. This is blocking us from upgrading the application. I read few Jira Issue logs which suggest to upgrade to 3.1.1 but i am moving to more advanced version. Please provide your suggestions.  Server : Linux Code compiled on java version ""1.7.0_03"" Java(TM) SE Runtime Environment (build 1.7.0_03-b04) Java HotSpot(TM) 64-Bit Server  Client JRE : 1.7.0_51 on Windows 7 platform  Exception Details: Caused by: java.beans.IntrospectionException: Type mismatch between indexed and non-indexed methods: null - public void java.awt.Window.setLocation(int,int) at org.springframework.beans.PropertyDescriptorUtils.findIndexedPropertyType(ExtendedBeanInfo.java:596) at org.springframework.beans.SimpleIndexedPropertyDescriptor.\(ExtendedBeanInfo.java:364) at org.springframework.beans.SimpleIndexedPropertyDescriptor.\(ExtendedBeanInfo.java:350) at org.springframework.beans.ExtendedBeanInfo.\(ExtendedBeanInfo.java:99) at org.springframework.beans.ExtendedBeanInfoFactory.getBeanInfo(ExtendedBeanInfoFactory.java:46) at org.springframework.beans.CachedIntrospectionResults.\(CachedIntrospectionResults.java:270) ... 56 more 11 Nov 22:27:22,951 OpenWindow - OpenWindow::ForceShutdownWindow 11 Nov 22:27:22,952 OpenWindow - Primary Task   ---  **Affects:** 3.2.12, 4.0.8, 4.1 GA  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1), [3.2.13](https://github.com/spring-projects/spring-framework/milestone/101?closed=1)","closed","in: core,","spring-projects-issues","2014-11-13T13:18:31Z","2014-12-09T02:49:23Z"
"","17160","Html Response getting downloaded instead of displaying with content-type : application/octet-stream in wildfly server [SPR-12558]","**[sreekanth](https://jira.spring.io/secure/ViewProfile.jspa?name=sreekanth.nair@egovernments.org)** opened **[SPR-12558](https://jira.spring.io/browse/SPR-12558?redirect=false)** and commented  I was waiting for a reply since 2 working days for the below stackoverflow post, didn get any solution yet. Since i'm suspecting it as a bug and in an urgency to bring spring-mvc.  http://stackoverflow.com/questions/27547448/spring-mvc-latest-html-response-is-getting-downloaded-instead-of-displaying  My request url is http://localhost:port/sample/common/hello and i'm expecting a html output but its turns out application/octet-stream and downloading my html content of jsp.  I suspect it as a bug, if not Is there anything i'm missing in my spring config ?  Attaching war as well as source code   ---  **Affects:** 4.1.3  **Attachments:** - [sample.tar.gz](https://jira.spring.io/secure/attachment/22439/sample.tar.gz) (_8.76 MB_) - [sample-new.tar.gz](https://jira.spring.io/secure/attachment/22441/sample-new.tar.gz) (_6.53 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/b8f3df930c4cf0391f3c6804609da5d5e88a150a, https://github.com/spring-projects/spring-framework-issues/commit/a0f67fc58f3f0e3e4c7e455753202291da635be9","closed","status: invalid,","spring-projects-issues","2014-12-18T23:21:09Z","2019-01-12T05:24:53Z"
"","17157","WebApplicationInitializer not working in EAR deployment wildfly server [SPR-12555]","**[sreekanth](https://jira.spring.io/secure/ViewProfile.jspa?name=sreekanth.nair@egovernments.org)** opened **[SPR-12555](https://jira.spring.io/browse/SPR-12555?redirect=false)** and commented  HI, Don't know why, WebApplicationInitializer is not getting detected if we have ear deployment to wildfly 8.2.0 server, where spring jars are packaged inside xyz.ear/lib/ folder.  At the same time if we package spring libraries inside war and deploy it as a war to wildfly then its getting detected.  my project structure is like.  ``` xyz.ear--|               |-abc.war               |-def.war               |-lib---|                        | all spring jars and other jars  ```    ---  **Affects:** 4.1.3","closed","status: declined,","spring-projects-issues","2014-12-18T05:30:36Z","2019-01-12T16:34:28Z"
"","16610","Annotation based view resolver [SPR-11994]","**[sreekanth](https://jira.spring.io/secure/ViewProfile.jspa?name=sreekanth.nair@egovernments.org)** opened **[SPR-11994](https://jira.spring.io/browse/SPR-11994?redirect=false)** and commented  Now if we see in our controller there are many methods which is only returning the view name like below.  `@RequestMapping`(value=""search"",method=GET) public String showSearch() { return ""search""; }  now we can use   But the above approach is not correct if we have a dedicated controller to handle the request.  It would be better to have a Controller class level annotation which will do request path to view resolving.  Something like  `@SimpleRequestViews`({ `@RequestView`(path=""search"", view=""something/search""), `@RequestView`(path=""formview"", view=""something/view"") })  By this we can avoid lots of no body methods   ---  **Affects:** 4.0.6","closed","type: enhancement,","spring-projects-issues","2014-07-15T03:03:49Z","2016-09-02T13:09:35Z"
"","16546","Duplicate Form Submission Handling [SPR-11928]","**[sreekanth](https://jira.spring.io/secure/ViewProfile.jspa?name=sreekanth.nair@egovernments.org)** opened **[SPR-11928](https://jira.spring.io/browse/SPR-11928?redirect=false)** and commented  Its very much required spring mvc should have a way to handle duplicate form submission by introducing new Interceptor or some way. Even a couple of workarounds are there, as a matured mvc its best to have it as a part of spring mvc itself.   ---  **Affects:** 4.0.5  **Attachments:** - [tokeninterceptor.zip](https://jira.spring.io/secure/attachment/22096/tokeninterceptor.zip) (_3.75 kB_)","closed","status: invalid,","spring-projects-issues","2014-06-30T04:47:48Z","2019-01-12T05:25:45Z"
"","16356","Eclipse plugin to create java configuration [SPR-11734]","**[sreekanth](https://jira.spring.io/secure/ViewProfile.jspa?name=sreekanth.nair@egovernments.org)** opened **[SPR-11734](https://jira.spring.io/browse/SPR-11734?redirect=false)** and commented  Its would be wonderful, if spring can develop some eclipse (STS) plugin to generate Java configuration from existing bean configuration xml as well as converting existing web.xml to java based configuration.  Nowadays xml configuration is adding too much confusion on what tags to be used and not to be used, what replaces what and so on. It would be better the plugin can handle this kind of miss configuration as well   --- No further details from [SPR-11734](https://jira.spring.io/browse/SPR-11734?redirect=false)","closed","type: enhancement,","spring-projects-issues","2014-04-24T12:04:55Z","2016-09-01T20:50:25Z"
"","17034","Concurrent registration/iteration in PropertySourcesPropertyResolver [SPR-12428]","**[Spencer Gibb](https://jira.spring.io/secure/ViewProfile.jspa?name=spencergibb)** opened **[SPR-12428](https://jira.spring.io/browse/SPR-12428?redirect=false)** and commented  While trying to call `PropertySourcesPropertyResolver.containsProperty` from one thread, another thread has added a new `PropertySource` and then the `ConcurrentModificationException` is thrown.  This code in Spring Boot adds the property source in a `ContextRefreshedEvent` handler. https://github.com/spring-projects/spring-boot/blob/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java#L228  ``` [2014-11-12 15:30:35.201] boot - 93750 ERROR [Thread-3] --- ConcurrentMapConfiguration: Error firing configuration event java.util.ConcurrentModificationException     at java.util.LinkedList$ListItr.checkForComodification(LinkedList.java:953)     at java.util.LinkedList$ListItr.next(LinkedList.java:886)     at org.springframework.core.env.PropertySourcesPropertyResolver.containsProperty(PropertySourcesPropertyResolver.java:49)     at org.springframework.core.env.AbstractEnvironment.containsProperty(AbstractEnvironment.java:460)     at org.springframework.cloud.netflix.archaius.ConfigurableEnvironmentConfiguration.containsKey(ConfigurableEnvironmentConfiguration.java:43)     at com.netflix.config.ConcurrentCompositeConfiguration.getSource(ConcurrentCompositeConfiguration.java:864)     at com.netflix.config.ConcurrentCompositeConfiguration$1.configurationChanged(ConcurrentCompositeConfiguration.java:151)     at com.netflix.config.ConcurrentMapConfiguration.fireEvent(ConcurrentMapConfiguration.java:312)     at com.netflix.config.ConcurrentMapConfiguration.setProperty(ConcurrentMapConfiguration.java:216)     at com.netflix.config.ConcurrentCompositeConfiguration.setProperty(ConcurrentCompositeConfiguration.java:486)     at com.netflix.eureka.cluster.PeerEurekaNode.getBatcher(PeerEurekaNode.java:806)     at com.netflix.eureka.cluster.PeerEurekaNode.(PeerEurekaNode.java:94)     at com.netflix.eureka.PeerAwareInstanceRegistry.updatePeerEurekaNodes(PeerAwareInstanceRegistry.java:219)     at com.netflix.eureka.PeerAwareInstanceRegistry.setupPeerEurekaNodes(PeerAwareInstanceRegistry.java:187)     at com.netflix.eureka.PeerAwareInstanceRegistry.init(PeerAwareInstanceRegistry.java:156)     at com.netflix.eureka.PeerAwareInstanceRegistry.(PeerAwareInstanceRegistry.java:144)     at com.netflix.eureka.PeerAwareInstanceRegistry.(PeerAwareInstanceRegistry.java:130)     at org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration$RegistryInstanceProxyInitializer.onApplicationEvent(EurekaServerInitializerConfiguration.java:174)     at org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration$RegistryInstanceProxyInitializer.onApplicationEvent(EurekaServerInitializerConfiguration.java:156)     at org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration$RegistryInstanceProxyInitializer$$EnhancerBySpringCGLIB$$e403e8f8.onApplicationEvent()     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:98)     at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:333)     at org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration$1$1.initEurekaEnvironment(EurekaServerInitializerConfiguration.java:109)     at com.netflix.eureka.EurekaBootStrap.contextInitialized(EurekaBootStrap.java:88)     at org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration$1.run(EurekaServerInitializerConfiguration.java:100)     at java.lang.Thread.run(Thread.java:744) ```  ---  **Affects:** 4.0.7  **Reference URL:** https://github.com/spring-cloud/spring-cloud-netflix/issues/25  **Issue Links:** - #17805 ConcurrentModificationException when doing a merge on AbstractEnvironment - #21819 Concurrency Exception during bean configuration related to not thread safe getBeanPostProcessor access - #20380 Consistent logging in Environment and PropertySource implementations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2490d1b38d7962d0f4be8abe308614f544219225, https://github.com/spring-projects/spring-framework/commit/1ef06cc743436b2aa500854bdb6a24d42357b10d  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-11-12T15:23:54Z","2019-01-11T19:28:59Z"
"","16796","Access to propertySources in CompositePropertySource [SPR-12182]","**[Spencer Gibb](https://jira.spring.io/secure/ViewProfile.jspa?name=sgibb)** opened **[SPR-12182](https://jira.spring.io/browse/SPR-12182?redirect=false)** and commented  It would be really useful to have either a public getter for propertySources or have CompositePropertySource implement EnumerablePropertySource.  Spring Cloud uses a reflection hack to get propertySources so we can enumerate the properties.   ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/553930a9f027299b3e51824175b80da0f4a32c3f","closed","type: enhancement,","spring-projects-issues","2014-09-11T14:17:48Z","2014-10-01T03:11:47Z"
"","16594","DispatcherServlet#onRefresh() should be defensive against incoming requests [SPR-11978]","**[Sotirios Delimanolis](https://jira.spring.io/secure/ViewProfile.jspa?name=sotirios)** opened **[SPR-11978](https://jira.spring.io/browse/SPR-11978?redirect=false)** and commented  Consider a DispatcherServlet which has gone through its initial setup and has started handling requests.  If some component refreshes the WebApplicationContext backing the DispatcherServlet, its onRefresh() method will be invoked and it will attempt to re-initialize its strategies. If the DispatcherServlet receives a request during this time, it could find any of the strategies as being null.  For example, while initializing its handler mappings, the DispatcherServlet sets its handlerMappings field to null. If a new request comes in before it is reassigned, the doDispatch() will try to invoke getHandler() which will iterate on a null handlerMappings, causing a NullPointerException.   ---  **Affects:** 4.0.5","closed","status: bulk-closed,","spring-projects-issues","2014-07-09T21:19:31Z","2019-01-12T02:29:13Z"
"","16439","This is a test jira issue for my jira api [SPR-11819]","**[Siva Tharun](https://jira.spring.io/secure/ViewProfile.jspa?name=tharun)** opened **[SPR-11819](https://jira.spring.io/browse/SPR-11819?redirect=false)** and commented  Test Jira Issue   ---  **Affects:** 4.0.2","closed","status: invalid,","spring-projects-issues","2014-05-26T10:48:39Z","2019-01-12T05:25:52Z"
"","16682","Infinite loop with custom error controller when ""406 Not Acceptable"" [SPR-12066]","**[Sin-young ""Divinespear"" Kang](https://jira.spring.io/secure/ViewProfile.jspa?name=divinespear)** opened **[SPR-12066](https://jira.spring.io/browse/SPR-12066?redirect=false)** and commented  (excuse my broken english :P)  before start: some web crawlers try invalid `Accept` header to avoid blocking.  I've build my webapp using spring-boot, and it worked well. some hours after release, server reported servlet container (I use Jetty) consume all system resources.  and log pointed there is infinite loop on error handling filter.  **To Reproduce** 1. build webapp using spring-boot (autoconfigured `BasicErrorController`) or configure custom error controller (may with `@ResponseBody` for return JSON to reproduce.). 2. run servlet container 3. open terminal and type `curl -H ""Accept: application/octet-stream"" http://localhost:8080//error`  **Possible Solution** when previous status code detected and it's 406, wrap `ServletRequest` and avoid return `Accept` header.   ---  **Affects:** 4.0.6","closed","in: web,","spring-projects-issues","2014-08-05T01:28:35Z","2019-01-14T05:15:36Z"
"","17042","Embedded derby database uses derby.log [SPR-12437]","**[Simon Spielmann](https://jira.spring.io/secure/ViewProfile.jspa?name=maihacke)** opened **[SPR-12437](https://jira.spring.io/browse/SPR-12437?redirect=false)** and commented  Derby created derby.log per default. Spring tries to disable derby.log in org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer by setting a system property. Setting the system property has no effect since derby is initialized at that point already. Initialization is triggered by following statement in DerbyEmbeddedDatabaseConfigurer: private static final boolean IS_AT_LEAST_DOT_SIX = new EmbeddedDriver().getMinorVersion() >= 6;  As result derby still creates annoying derby.log   ---  **Affects:** 3.2.7","closed","in: core,","spring-projects-issues","2014-11-14T09:46:54Z","2014-12-30T09:53:11Z"
"","16834","spring-boot: tomcat: if management port is different from the app port, the app's access.log goes to /tmp/tomcat.xxxxx.port [SPR-12220]","**[Simon So](https://jira.spring.io/secure/ViewProfile.jspa?name=simonso)** opened **[SPR-12220](https://jira.spring.io/browse/SPR-12220?redirect=false)** and commented  spring-boot 1.1.6  http://stackoverflow.com/questions/23596157/spring-boot-tomcat-access-logs  The issue exists since 1.1  Steps to reproduce 1. in application.properties, define management port = 7081 2. in application.properties, define the app port to be anything but 7081 3. in application.properties, set the server.tomcat.base=/home/mydir 4. Start the spring-boot project with tomcat as the web server  expected: access log goes to /home/mydir actual: after a few days, the access.log will suddenly appears in /tmp/tomcat.xxxx.port_number  I have cloud deployment that needs to do log rotation.  Prefer to centralize everything to one single directory.    ---  **Affects:** 4.0.6","closed","status: invalid,","spring-projects-issues","2014-09-18T01:10:41Z","2019-01-12T05:25:18Z"
"","16885","DataSourceTransactionManager closes JDBC connection on doBegin failure but leaves it attached to transaction object [SPR-12280]","**[Simon Kitching](https://jira.spring.io/secure/ViewProfile.jspa?name=skitching)** opened **[SPR-12280](https://jira.spring.io/browse/SPR-12280?redirect=false)** and commented  DataSourceTransactionManager.doBegin first allocates a connection from the datasource and stores it in the DataSourceTransactionObject. It then does some other work; if any of this other work throws an exception then that connection is released but is not removed from the DataSourceTransactionObject. The result is a misleading ""java.sql.SQLException: Connection is closed"" exception later.  This problem is present in current trunk code, and at least as far back as 3.0.7 (the version I'm using): * https://github.com/spring-projects/spring-framework/blob/master/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceTransactionManager.java  In my particular case, this line in DataSourceTransactionManager.doBegin is throwing an exception: Integer previousIsolationLevel = DataSourceUtils.prepareConnectionForTransaction(con, definition); which causes the catch clause in the same method to run.  Of course if I resolve the initial problem that causes prepareConnectionForTransaction to fail (""SET TRANSACTION must be first statement of transaction"" on oracle), then this issue will no longer occur. However the presence of misleading ""connection closed"" errors makes diagnosis of the real problem more difficult..  This problem seems similar to/related to the following existing issues: * #15381 * #6783 * [LDAP-179](https://jira.spring.io/browse/LDAP-179)  ---  **Affects:** 3.2.11, 4.0.7, 4.1 GA  **Issue Links:** - #15381 JDBC Connection is not released due to incorrectly defined catch  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)","closed","type: bug,","spring-projects-issues","2014-10-01T02:32:22Z","2019-01-11T17:36:15Z"
"","16650","getting NoSuchMethodError [SPR-12034]","**[Shoeb Siddiqui](https://jira.spring.io/secure/ViewProfile.jspa?name=shoeb0986)** opened **[SPR-12034](https://jira.spring.io/browse/SPR-12034?redirect=false)** and commented  Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [net/ibs/config/database.xml]: Invocation of init method failed; nested exception is java.lang.NoSuchMethodError: javax.persistence.spi.PersistenceUnitInfo.getSharedCacheMode()Ljavax/persistence/SharedCacheMode;  pom.xml \ \org.hibernate.javax.persistence\ \hibernate-jpa-2.0-api\ \1.0.0.Final\ \ xml \ \ \ \   ---  **Affects:** 4.0.6","closed","in: core,","spring-projects-issues","2014-07-26T02:27:37Z","2019-01-12T05:25:35Z"
"","16912","TextMessage.toString() throws StringIndexOutOfBoundsException if payload contains multibyte characters [SPR-12307]","**[Shinobu Aoki](https://jira.spring.io/secure/ViewProfile.jspa?name=emalock3)** opened **[SPR-12307](https://jira.spring.io/browse/SPR-12307?redirect=false)** and commented  TextMessage.toStringPayload throws StringIndexOutOfBoundsException if a payload-bytes is greater than 10 and a payload-length less than 10. This method throws an exception in the following code.  ```java new TextMessage(""\u3042\u3044\u3046\u3048\u304a"").toString(); ```  Stacktrace: Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException: String index out of range: 10 at java.lang.String.substring(String.java:1950) at org.springframework.web.socket.TextMessage.toStringPayload(TextMessage.java:79) at org.springframework.web.socket.AbstractWebSocketMessage.toString(AbstractWebSocketMessage.java:91) at samples.websocket.config.SampleWebSocketsApplication.main(SampleWebSocketsApplication.java:58)  Pull request: https://github.com/spring-projects/spring-framework/pull/657   ---  **Affects:** 4.0.7, 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/da14aeea7adf85485d5586d0d5bc08196a31231a, https://github.com/spring-projects/spring-framework/commit/da2c30cd0c96d64e997e07719109318d84324b7d  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","type: bug,","spring-projects-issues","2014-10-07T00:21:17Z","2014-11-10T23:12:28Z"
"","16521","Improve documentation for @IfProfileValue precedence [SPR-11902]","**[Shalom Deitch](https://jira.spring.io/secure/ViewProfile.jspa?name=shalom)** opened **[SPR-11902](https://jira.spring.io/browse/SPR-11902?redirect=false)** and commented  #### Status Quo  If you search for `@IfProfileValue` in the [reference manual](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/testing.html#integration-testing-annotations-junit), you will find the following paragraph:  > Indicates that the annotated test is enabled for a specific testing environment. If the configured ProfileValueSource returns a matching value for the provided name, the test is enabled. This annotation can be applied to an entire class or to individual methods. Class-level usage overrides method-level usage.  #### Proposal  If the class-level usage overrides the method-level, then there is no point in having both. I assume that it should be: _method-level usage overrides class-level usage_.  ---  **Affects:** 4.0.5  **Issue Links:** - #10571 Class-level `@IfProfileValue` overrides method-level `@IfProfileValue` settings - #10583 ProfileValueUtils should enforce class-level usage of `@IfProfileValue` to override method-level usage","closed","type: documentation,","spring-projects-issues","2014-06-24T00:24:22Z","2019-01-13T05:48:25Z"
"","17049","Not able to send message specific to user using STOMP over WebSocket [SPR-12444]","**[Shailesh Vaishampayan](https://jira.spring.io/secure/ViewProfile.jspa?name=shaileshv)** opened **[SPR-12444](https://jira.spring.io/browse/SPR-12444?redirect=false)** and commented  Hi,  I am trying to create  a chat app using spring websocket and stomp. In this user can send message  to each of his/her friends, who are also logged in,  by logging into the app. For sending message to particular user I take following steps: 1) User logs in 2) User subscribes to ""/user/queue/messaging"" destination. This will be used to send private messages of users to each other. 3) when user wants to send a message he sends it to destination :    /user/{user_id}/queue/messaging where user_id is recipient's user id.    I am trying to send this from client using STOMP.js send method. 4) Expected behaviour : now if recipient is logged in and his session id, for example, is DFT0GH then the message in step 3 should be delivered to Queue detination with name messaging-userDFT0GH. Intead of this it is delivered to the same user's queue destination who sent it.  Please find my example scenario : 1) User John logs in .    He subscribes to /user/queue/messaging    His user id is john    His session id is ABCD01    Queue is created with  name on activemq broker as    messaging- userABCD01  2) User Alice logs in .    She subscribes to /user/queue/messaging    His user id is alice    Her session id is XYZ01    Queue is created with  name on activemq broker as    messaging- userXYZ01  3) user John sends a message through STOMP.js send method to Alice    using destination as ""/user/alice/queue/messaging""  4) now instead of delivering the message to queue    messaging- UserXYZ01 it gets delivered to John's queue destination i.e    messaging- userABCD01. Why is it so?  When i debugged this , I found following line in method private DestinationInfo parseUserDestination(Message message) of DefaultUserDestinationResolver class : if (SimpMessageType.MESSAGE.equals(messageType)) { ........ sessionIds = (sessionId != null ? Collections.singleton(sessionId) :    this.userSessionRegistry.getSessionIds(user)); } in this sessionId is logged in user's (Principal) sessoin id which is not null as user is logged in and so his sessionIds is returned. and message is delivered to his queue even if intended recipient user is different. when I check usersessionregistry's sessionIds collection i find an entry [alice]:XYZ01. Shouldn't above line return session id of the recipient user instead of logged in user's session id to identify destination queue.?  Sorry I am trying this for the first time. So Please let me know if I miss anything here and of there is 1) any way to satisfy my use case 2) or my use case itself is invalid.  Thanks in advance.  ---  **Affects:** 4.1.1  **Reference URL:** http://stackoverflow.com/questions/26967034/not-able-to-send-message-specific-to-user-using-spring-websocket-stomp  **Issue Links:** - #16131 `@SendToUser` should provide a single session reply mode  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/75c70fac3d77b4a9b81fb95b46309636ffdd3d76  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2014-11-16T22:48:27Z","2019-01-13T05:43:50Z"
"","16720","URL which contain ""%85"" can't request [SPR-12104]","**[seveniu](https://jira.spring.io/secure/ViewProfile.jspa?name=dongyueliu)** opened **[SPR-12104](https://jira.spring.io/browse/SPR-12104?redirect=false)** and commented  if url-pattern is ""/any/"" , i can’t request “http://localhost:8080/any/test/装”. server response http error 404 Problem accessing /any/test/%E8%A3%85. Reason: not found . i tested,found url which contain ‘%85’ can’t request ,when url-pattern is ""/any/""  ---  **Affects:** 4.0.4, 4.0.5, 4.0.6, 4.1 RC2  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/83  **Issue Links:** - #16543 Better handling of URI encoding configuration (_**""is duplicated by""**_)","closed","in: web,","spring-projects-issues","2014-08-20T00:30:03Z","2019-01-12T16:46:25Z"
"","16457","The NullPointerException occur when stomp client unsubscribing [SPR-11838]","**[Serhii Marchuk](https://jira.spring.io/secure/ViewProfile.jspa?name=mars.msv)** opened **[SPR-11838](https://jira.spring.io/browse/SPR-11838?redirect=false)** and commented  When stomp client sends unsubscribe command the NullPointerException occurs in DefaultSubscriptionRegistry.  Stack trace and log example: aa DEBUG org.springframework.messaging.simp.stomp.StompDecoder: Decoded [Payload byte[0]][Headers={stompCommand=UNSUBSCRIBE, nativeHeaders={id=[/topic/name.100]}, simpMessageType=UNSUBSCRIBE, simpSubscriptionId=/topic/name.100, id=7ead5193-cfdc-94f7-8571-6a0721ee2226, timestamp=1401467621119}] aa DEBUG org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry: Unubscribe request: [Payload byte[0]][Headers={stompCommand=UNSUBSCRIBE, nativeHeaders={id=[/topic/name.100]}, simpMessageType=UNSUBSCRIBE, simpSessionAttributes={}, simpSubscriptionId=/topic/name.100, simpSessionId=s2i37nxt, id=2f7bd8d9-1cfb-b635-ea67-661f078f69f7, timestamp=1401467621119}] aa DEBUG org.springframework.messaging.simp.stomp.StompDecoder: Decoded [Payload byte[0]][Headers={stompCommand=UNSUBSCRIBE, nativeHeaders={id=[/topic/name.*]}, simpMessageType=UNSUBSCRIBE, simpSubscriptionId=/topic/name.\*, id=00039d49-3fc4-fd23-f006-6a2e4cd01dc9, timestamp=1401467621119}] aa DEBUG org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry: Unubscribe request: [Payload byte[0]][Headers={stompCommand=UNSUBSCRIBE, nativeHeaders={id=[/topic/name.*]}, simpMessageType=UNSUBSCRIBE, simpSessionAttributes={}, simpSubscriptionId=/topic/name.*, simpSessionId=s2i37nxt, id=9ed66ecc-4c0d-d59c-8458-4285dd630831, timestamp=1401467621119}] Exception in thread ""clientInboundChannel-5"" java.lang.NullPointerException at java.util.concurrent.ConcurrentHashMap.hash(ConcurrentHashMap.java:333) at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:988) at org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionSubscriptionInfo.getSubscriptions(DefaultSubscriptionRegistry.java:315) at org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.removeSubscriptionInternal(DefaultSubscriptionRegistry.java:98) at org.springframework.messaging.simp.broker.AbstractSubscriptionRegistry.unregisterSubscription(AbstractSubscriptionRegistry.java:91) at org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.handleMessageInternal(SimpleBrokerMessageHandler.java:129) at org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.handleMessage(AbstractBrokerMessageHandler.java:177) at org.springframework.messaging.support.ExecutorSubscribableChannel$1.run(ExecutorSubscribableChannel.java:70) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:745) Exception in thread ""clientInboundChannel-2"" java.lang.NullPointerException at java.util.concurrent.ConcurrentHashMap.hash(ConcurrentHashMap.java:333) at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:988) at org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionSubscriptionInfo.getSubscriptions(DefaultSubscriptionRegistry.java:315) at org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.removeSubscriptionInternal(DefaultSubscriptionRegistry.java:98) at org.springframework.messaging.simp.broker.AbstractSubscriptionRegistry.unregisterSubscription(AbstractSubscriptionRegistry.java:91) at org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.handleMessageInternal(SimpleBrokerMessageHandler.java:129) at org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.handleMessage(AbstractBrokerMessageHandler.java:177) at org.springframework.messaging.support.ExecutorSubscribableChannel$1.run(ExecutorSubscribableChannel.java:70) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:745)  ---  **Affects:** 4.0.5  **Issue Links:** - #16451 Unsubscribing from an endpoint that no longer exists throws NPE (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2014-05-30T09:51:02Z","2019-01-12T16:46:26Z"
"","16784","Support destination variable placeholders in @SendTo and @SendToUser for STOMP endpoints [SPR-12170]","**[Sergi Almar](https://jira.spring.io/secure/ViewProfile.jspa?name=salmar)** opened **[SPR-12170](https://jira.spring.io/browse/SPR-12170?redirect=false)** and commented  Default destination to send return values of message handler methods can be overridden using either `@SendTo` or `@SendToUser`, but destination needs to be statically specified. It would be useful to pass variables or at least expose `@MessageMapping` destination placeholders. Here's an example:  ``` @MessageMapping(""/chat.message.{roomName}"") @SendTo(""/topic/chat.message.filtered.{roomName}"") public ChatMessage filterMessage(@Payload ChatMessage message) { ...		 } ```  ---  **Affects:** 4.1 GA  **Issue Links:** - #17498 Support expression in `@SendTo` for JMS endpoints  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/645, and commits https://github.com/spring-projects/spring-framework/commit/16ee69203cc6a556f1b8efb1ccebfe312826e30f  1 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2014-09-09T14:56:38Z","2019-01-13T05:45:10Z"
"","16770","SessionDisconnectEvent should extend AbstractSubProtocolEvent [SPR-12156]","**[Sergi Almar](https://jira.spring.io/secure/ViewProfile.jspa?name=salmar)** opened **[SPR-12156](https://jira.spring.io/browse/SPR-12156?redirect=false)** and commented  All subprotocol events extends from `AbstractSubProtocolEvent` except `SessionDisconnectEvent` which extends from the general `ApplicationEvent`. It should extend `AbstractSubProtocolEvent` to be consistent with the other ones.   ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dc57cb2c9fa366ba5e6ac3f9723dc83af173c3f4  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2014-09-05T08:18:32Z","2014-10-01T03:11:49Z"
"","16361","Expose STOMP/WebSocket monitoring info and internal stats [SPR-11739]","**[Sergi Almar](https://jira.spring.io/secure/ViewProfile.jspa?name=salmar)** opened **[SPR-11739](https://jira.spring.io/browse/SPR-11739?redirect=false)** and commented  It would be handy to have some attributes exposed to JMX for monitoring like:  * Number of active / total connections * Number of total / per second incoming messages * Number of total / per second outgoing messages * Inbound channel task executor * Outbound channel task executor * ...  ---  **Affects:** 4.0.3  **Reference URL:** http://www.sergialmar.com/2014/03/monitor-your-websockets-and-threadpools-for-performance-tuning-via-jmx/  **Issue Links:** - #16547 JMX Bean to allow monitoring Spring Websocket (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ab4864da2a136fbdcdb9af9b4e043ae769652b06","closed","type: enhancement,","spring-projects-issues","2014-04-26T05:16:19Z","2019-01-11T21:17:59Z"
"","16616","StaxStreamXMLReader ignores significant whitespace [SPR-12000]","**[Sergei Lilichenko](https://jira.spring.io/secure/ViewProfile.jspa?name=lilichenko)** opened **[SPR-12000](https://jira.spring.io/browse/SPR-12000?redirect=false)** and commented  It appears that org.springframework.util.xml.StaxStreamXMLReader ignores important whitespace in XML. It manifests in the latest version of Spring Web Services, but I report it hear because it looks like it's a generic problem with this core class. When replaced with JDK's SAXParser the tests run green.  The following test fails on the first assert statement:  ```java import org.apache.axiom.om.OMElement; import org.apache.axiom.om.OMXMLBuilderFactory; import org.junit.Test; import org.springframework.util.xml.StaxUtils; import org.xml.sax.InputSource;  import javax.xml.parsers.SAXParser; import javax.xml.parsers.SAXParserFactory; import javax.xml.stream.XMLStreamReader; import javax.xml.transform.Source; import javax.xml.transform.Transformer; import javax.xml.transform.TransformerConfigurationException; import javax.xml.transform.TransformerException; import javax.xml.transform.TransformerFactory; import javax.xml.transform.dom.DOMResult; import javax.xml.transform.sax.SAXSource; import java.io.StringReader;  import static org.junit.Assert.*;  /**  *  */ public class TransformationTest {     @Test     public void testTransformation() throws TransformerException {         String xml = """" +                 "" "" +                 "" Some text "" +                 """";          Transformer transformer = TransformerFactory.newInstance().newTransformer();          DOMResult result = new DOMResult();          OMElement root = OMXMLBuilderFactory.createOMBuilder(new StringReader(xml)).getDocumentElement(); // code from org.springframework.ws.soap.axiom.AbstractPayload:         XMLStreamReader streamReader = root.getXMLStreamReader();         Source source = StaxUtils.createCustomStaxSource(streamReader);         transformer.transform(source, result);          assertEquals("" "", result.getNode().getFirstChild().getFirstChild().getTextContent());         assertEquals("" Some text "", result.getNode().getFirstChild().getFirstChild().getNextSibling().getTextContent());     } } ```    ---  **Affects:** 3.2.10, 4.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b6f13b857cdc0c37a4c2faafc781058fd78e139f, https://github.com/spring-projects/spring-framework/commit/fca72f6b65c27d44bccaa116156a7e0a816a1d15, https://github.com/spring-projects/spring-framework/commit/8fb592712c1538411989f5b218dc06184617073b, https://github.com/spring-projects/spring-framework/commit/d6950d8adddf0862d419894173e427b8b8bd4bee  **Backported to:** [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)","closed","in: core,","spring-projects-issues","2014-07-15T15:12:58Z","2014-07-18T10:16:35Z"
"","16985","Improvement of BeanWrapperImpl.getPropertyValue(PropertyTokenHolder tokens) [SPR-12378]","**[Seo Kyung-Seok](https://jira.spring.io/secure/ViewProfile.jspa?name=ksseo0701)** opened **[SPR-12378](https://jira.spring.io/browse/SPR-12378?redirect=false)** and commented  In BeanWrapperImpl.getPropertyValue(PropertyTokenHolder tokens), TypeDescriptor.valueOf(...) method is used like this. => TypeDescriptor typeDescriptor = (mapKeyType != null ? TypeDescriptor.valueOf(mapKeyType) : TypeDescriptor.valueOf(Object.class));  I think, It is not necessary because null is checked in TypeDescriptor.valueOf(...) method.   ---  **Affects:** 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1708a8a10d17b9c3dc203b90f181c1d55ad5facb, https://github.com/spring-projects/spring-framework/commit/a3213f26a5ae0bc741b1d166545f39597acbbd12","closed","type: enhancement,","spring-projects-issues","2014-10-26T08:05:54Z","2014-11-17T06:42:32Z"
"","16924","EclipseLinkJpaDialect does not support declarative transaction isolation [SPR-12319]","**[Senén de Diego](https://jira.spring.io/secure/ViewProfile.jspa?name=senendds)** opened **[SPR-12319](https://jira.spring.io/browse/SPR-12319?redirect=false)** and commented  EclipseLinkJpaDialect throws an exception in beginTransaction when specifying a transaction isolation level other than default in the `@Transactional` annotation.  The same problem [has been solved](#16559) (under certain circumstances) in the last RC for HibernateJpaDialect.  Would it be possible to fix this also?  ---  **Affects:** 4.1.1  **Issue Links:** - #16559 Isolation support for JPA with Hibernate EntityManager 4 - #12409 Spring's JDBC connection access disables shared cache in EclipseLink - #16938 OpenJpaDialect does not support declarative transaction isolation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de11cd879192278db2c5f1a3ab2351775802f59d, https://github.com/spring-projects/spring-framework/commit/33d85d2a134c93deb4452e112fb2f86ff751467b, https://github.com/spring-projects/spring-framework/commit/bd5383e4f937549107c2dc9098298ca9e874a419","closed","type: enhancement,","spring-projects-issues","2014-10-10T05:15:54Z","2019-01-14T05:14:40Z"
"","17056","@Validated and @Configurable don't work together [SPR-12451]","**[Sebastian Dietrich](https://jira.spring.io/secure/ViewProfile.jspa?name=sebastian.dietrich)** opened **[SPR-12451](https://jira.spring.io/browse/SPR-12451?redirect=false)** and commented  I have domain objects that need to be annotated both as `@Configurable` and `@Validated`. If I do so, I get an IllegalStateException when instantiating them in tests:  ``` java.lang.IllegalStateException: Post-processor tried to replace bean instance of type [com.kratos.domain.profiles.Profile] with (proxy) object of type [com.sun.proxy.$Proxy81] - not supported for aspect-configured classes! 	at org.springframework.beans.factory.wiring.BeanConfigurerSupport.checkExposedObject(BeanConfigurerSupport.java:173) 	at org.springframework.beans.factory.wiring.BeanConfigurerSupport.configureBean(BeanConfigurerSupport.java:143) 	at org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect.configureBean(AnnotationBeanConfigurerAspect.aj:63) 	at org.springframework.beans.factory.aspectj.AbstractDependencyInjectionAspect.ajc$afterReturning$org_springframework_beans_factory_aspectj_AbstractDependencyInjectionAspect$2$1ea6722c(AbstractDependencyInjectionAspect.aj:88) ```  IMHO this is a typical need for DDD entities (they often have `@Autowired` references to e.g. repositories --> thus `@Configurable` - and they often need method-level validation for their business-functionality --> thus `@Validated`) .   ---  **Affects:** 4.0.7  1 votes, 4 watchers","open","type: enhancement,","spring-projects-issues","2014-11-19T03:06:40Z","2016-06-02T08:46:54Z"
"","16617","NPE in SelectedValueComparator with null bound value [SPR-12001]","**[Sebastian Anzani](https://jira.spring.io/secure/ViewProfile.jspa?name=sebastiananzani)** opened **[SPR-12001](https://jira.spring.io/browse/SPR-12001?redirect=false)** and commented  In case the collection, used to preselect checkboxes values, contains some null values  the following exception is thrown:  ``` java.lang.NullPointerException 	org.springframework.web.servlet.tags.form.SelectedValueComparator.exhaustiveCompare(SelectedValueComparator.java:151) 	org.springframework.web.servlet.tags.form.SelectedValueComparator.exhaustiveCollectionCompare(SelectedValueComparator.java:140) 	org.springframework.web.servlet.tags.form.SelectedValueComparator.collectionCompare(SelectedValueComparator.java:112) 	org.springframework.web.servlet.tags.form.SelectedValueComparator.isSelected(SelectedValueComparator.java:89) 	org.springframework.web.servlet.tags.form.AbstractCheckedElementTag.isOptionSelected(AbstractCheckedElementTag.java:61) 	org.springframework.web.servlet.tags.form.AbstractCheckedElementTag.renderFromValue(AbstractCheckedElementTag.java:51) 	org.springframework.web.servlet.tags.form.AbstractCheckedElementTag.renderFromValue(AbstractCheckedElementTag.java:40) 	org.springframework.web.servlet.tags.form.CheckboxTag.writeTagDetails(CheckboxTag.java:90) 	org.springframework.web.servlet.tags.form.AbstractSingleCheckedElementTag.writeTagContent(AbstractSingleCheckedElementTag.java:87) 	org.springframework.web.servlet.tags.form.CheckboxTag.writeTagContent(CheckboxTag.java:53) 	org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:84) 	org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:80) 	org.apache.jsp.page1_jsp._jspx_meth_form_005fcheckbox_005f0(page1_jsp.java:1505) ```    ---  **Affects:** 3.2.10, 4.0.5, 4.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3ebf135798bc9c27c3fb757d962666db4618862, https://github.com/spring-projects/spring-framework/commit/5f77dce1eeb28e9e1965c0d07046f0c4038617da, https://github.com/spring-projects/spring-framework/commit/980f971236eb496008a6f8f9c657180c0974d47b  **Backported to:** [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)","closed","type: bug,","spring-projects-issues","2014-07-16T03:30:23Z","2014-07-18T10:16:26Z"
"","16355","broken links (Spring logo, newsletter subscription) in search bar on documentation sites [SPR-11733]","**[Sascha Szott](https://jira.spring.io/secure/ViewProfile.jspa?name=szott)** opened **[SPR-11733](https://jira.spring.io/browse/SPR-11733?redirect=false)** and commented  Both the logo link and the newsletter subscription link in the search bar (on the lower end of all Spring documentation sites) is broken, e.g. on the Spring Boot single-page documentation site (http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle).  The newsletter subscription links points to http://www.springsource.org/newsletter-subscription?cid=undefined which gives a 404.    --- No further details from [SPR-11733](https://jira.spring.io/browse/SPR-11733?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2014-04-24T04:21:40Z","2019-01-12T00:20:02Z"
"","16438","CachedIntrospectionResults caching jar entries and creating big pressure on GC [SPR-11818]","**[Sargis Harutyunyan](https://jira.spring.io/secure/ViewProfile.jspa?name=armsargis)** opened **[SPR-11818](https://jira.spring.io/browse/SPR-11818?redirect=false)** and commented  Hi, seems CachedIntrospectionResults caching jar entries and creating big pressure on GC and here is my code:  ```java      public static ExaminerWorkloadUpdateWU createExaminerWorkloadUpdateWU(WorkloadCommand workloadCommand) {         ExaminerWorkloadUpdateWU examinerWorkloadUpdateWU = new ExaminerWorkloadUpdateWU(workloadCommand);         DEFAULT_CONTEXT_FACTORY.wire(examinerWorkloadUpdateWU);          return examinerWorkloadUpdateWU;     }  // and      public final void wire(Object bean) {         context.getSpringContext().getAutowireCapableBeanFactory().autowireBean(bean);     }  // and class itself  public class ExaminerWorkloadUpdateWU extends CriterionUpdateWorkUnit {     // impl. ommited      @Autowired     public void setWorkloadCommandExecutor(WorkloadCommandExecutor workloadCommandExecutor) {         this.workloadCommandExecutor = workloadCommandExecutor;     } }  ```  Note that actual `@Cache` annotation even not applied to target bean I have it in my application but not for target bean.  Also I attached Mission Control recording file and screenshot pointing to CachedIntrospectionResults.  ---  **Affects:** 3.2.6  **Attachments:** - [flight_recording_2014-05-25_16_35_42.jfr](https://jira.spring.io/secure/attachment/22029/flight_recording_2014-05-25_16_35_42.jfr) (_538.39 kB_) - [spring-3.2.9_flight_recording_2014-05-27_09_33_26.jfr](https://jira.spring.io/secure/attachment/22039/spring-3.2.9_flight_recording_2014-05-27_09_33_26.jfr) (_406.46 kB_) - [spring-4.0.5_flight_recording_2014-05-27_09_46_51.jfr](https://jira.spring.io/secure/attachment/22040/spring-4.0.5_flight_recording_2014-05-27_09_46_51.jfr) (_293.19 kB_) - [SpringWireAndCacheProblem.png](https://jira.spring.io/secure/attachment/22028/SpringWireAndCacheProblem.png) (_219.95 kB_)  **Issue Links:** - #13653 Improve the performance of BeanInfo lookups in CachedIntrospectionResults - #15981 Revisit need for Introspector.flushFromCaches call in CachedIntrospectionResults","closed","in: core,","spring-projects-issues","2014-05-25T23:56:04Z","2019-01-11T22:19:36Z"
"","16615","Memory leak in Spring 4.0.0.RELEASE [SPR-11999]","**[Sanjib](https://jira.spring.io/secure/ViewProfile.jspa?name=sanjib)** opened **[SPR-11999](https://jira.spring.io/browse/SPR-11999?redirect=false)** and commented  We are having issues in shutting down our servers after few days of operation. Further analysis showed that there is a memory leak in the application. We are running on WAS 8 ND. A ticket was opened for IBM and they said that the spring framework is creating lots of objects which are not marked for deletion. We have Struts2 interacting with Spring and Hibernate for database calls. All beans used in the application are created using the app context configuration file. We do not have an explicit look up from the application context in our java code. All beans are injected. We have ensured that most of the objects are singleton. Here is the stats of objects in our heap - 1,021,368,472 (66.7%) [56] 1 java/util/Hashtable 0xa00000008dafa50 1,021,368,416 (66.7%) [64] 1 array of java/util/Hashtable$Entry 0xa00000008dafab0 1,021,368,352 (66.7%) [40] 2 java/util/Hashtable$Entry 0xa00000008dafb98 1,021,368,256 (66.7%) [64] 4 com/ibm/ws/util/ClauseNode 0xa00000008dafbf8 1,021,367,808 (66.7%) [96] 6 com/ibm/ws/webcontainer/webapp/WebGroupImpl 0xa00000006854f60 1,021,367,272 (66.7%) [552] 50 com/ibm/ws/webcontainer/webapp/WebAppImpl 0xa000000068d7d88 1,015,507,600 (66.32%) [40] 1 java/util/ArrayList 0xa00000006855a98 1,015,507,560 (66.32%) [56] 4 array of java/lang/Object 0xa00000006856fb8 1,015,507,440 (66.32%) [32] 1 org/springframework/web/context/ContextLoaderListener 0xa00000006854f28 1,015,507,408 (66.32%) [232] 17 org/springframework/web/context/support/XmlWebApplicationContext 0xa00000006854e40 1,015,426,176 (66.32%) [408] 38 org/springframework/beans/factory/support/DefaultListableBeanFactory 0xa00000006c4a280 772,024,840 (50.42%) [40] 1 java/util/ArrayList 0xa00000006c4abc0 772,024,800 (50.42%) [104] 11 array of java/lang/Object 0xa00000007ce0018 136,869,624 (8.94%) [80] 2 java/util/concurrent/ConcurrentHashMap 0xa00000006c4aa50 33,919,360 (2.22%) [80] 1 java/util/concurrent/ConcurrentHashMap 0xa00000006c4aaa0 33,799,408 (2.21%) [80] 1 java/util/concurrent/ConcurrentHashMap 0xa00000006c4aa00 31,627,272 (2.07%) [80] 1 java/util/concurrent/ConcurrentHashMap 0xa00000006c4ae00 2,256,560 (0.15%) [80] 1 java/util/concurrent/ConcurrentHashMap 0xa00000006c4aaf0 2,235,008 (0.15%) [80] 1 java/util/concurrent/ConcurrentHashMap 0xa00000006c4ac30 1,219,688 (0.08%) [80] 1 java/util/concurrent/ConcurrentHashMap 0xa00000006c4ad68 533,032 (0.03%) [96] 3 java/util/LinkedHashMap 0xa00000006c4a9a0 510,912 (0.03%) [80] 1 java/util/concurrent/ConcurrentHashMap 0xa00000006c4a868 264,808 (0.02%) [24] 1 org/springframework/core/DefaultParameterNameDiscoverer 0xa00000006c4acd0 42,528 (0%) [32] 1 java/util/LinkedList 0xa00000006c4aba0 42,208 (0%) [64] 6 org/springframework/context/expression/StandardBeanExpressionResolver 0xa00000004ebe1a0 24,144 (0%) [992] 244 array of java/lang/String 0xa00000007cdf7d8 18,184 (0%) [32] 2 java/util/Collections$SetFromMap 0xa00000006c4ac80 12,592 (0%) [24] 1 java/util/LinkedHashSet 0xa00000006c4a948 8,072 (0%) [80] 1 java/util/concurrent/ConcurrentHashMap 0xa00000006c4ae50 2,336 (0%) [80] 1 java/util/concurrent/ConcurrentHashMap 0xa00000006c4aea0 2,280 (0%) [80] 2 java/util/concurrent/ConcurrentHashMap 0xa00000006c4a800 2,264 (0%) [32] 2 java/util/Collections$SetFromMap 0xa00000006c4a960  Any help would be highly appreciated. I am attaching the app context files used in the application.   ---  **Affects:** 4.0 GA  **Attachments:** - [applicationContext.xml](https://jira.spring.io/secure/attachment/22116/applicationContext.xml) (_5.39 kB_) - [applicationContext-dropdowns.xml](https://jira.spring.io/secure/attachment/22117/applicationContext-dropdowns.xml) (_2.28 kB_) - [applicationContext-hibernate.xml](https://jira.spring.io/secure/attachment/22118/applicationContext-hibernate.xml) (_3.32 kB_) - [applicationContext-jaxbbindings.xml](https://jira.spring.io/secure/attachment/22119/applicationContext-jaxbbindings.xml) (_1.83 kB_) - [applicationContext-jibxbindings.xml](https://jira.spring.io/secure/attachment/22120/applicationContext-jibxbindings.xml) (_8.85 kB_) - [applicationContext-menu.xml](https://jira.spring.io/secure/attachment/22121/applicationContext-menu.xml) (_1.52 kB_) - [applicationContext-selectiveRetrieve.xml](https://jira.spring.io/secure/attachment/22122/applicationContext-selectiveRetrieve.xml) (_1.25 kB_) - [applicationContext-services.xml](https://jira.spring.io/secure/attachment/22123/applicationContext-services.xml) (_13.07 kB_) - [applicationContext-struts.xml](https://jira.spring.io/secure/attachment/22124/applicationContext-struts.xml) (_23.70 kB_) - [web.xml](https://jira.spring.io/secure/attachment/22125/web.xml) (_1.49 kB_)","closed","status: bulk-closed,","spring-projects-issues","2014-07-15T12:35:28Z","2019-09-26T06:49:41Z"
"","17164","MethodValidationPostProcessor using multiple (custom) validators [SPR-12563]","**[Sanjaya Kumar Patel](https://jira.spring.io/secure/ViewProfile.jspa?name=skpatel20)** opened **[SPR-12563](https://jira.spring.io/browse/SPR-12563?redirect=false)** and commented  Currently MethodValidationPostProcessor validates using only one pre-injected validatior. Instead, it could be nice to let it use multiple validators. For example, say developers could annotate service classes with `@Validated`(""aCustomValidatorBeanId""), and then the MethodValidationBeanPostProcessor can use the designated validator. See reference url for more.  ---  **Affects:** 4.1.3  **Reference URL:** http://stackoverflow.com/questions/27222939/how-to-use-methodvalidationpostprocessor-when-having-multiple-custom-validato  **Issue Links:** - #17185 Core interceptors overhaul","closed","status: bulk-closed,","spring-projects-issues","2014-12-21T21:13:04Z","2019-01-12T03:30:46Z"
"","16415","Spring 4 not backward compatible with DWR 2 / 3 [SPR-11794]","**[Sanjay Patil](https://jira.spring.io/secure/ViewProfile.jspa?name=sanjay.patil)** opened **[SPR-11794](https://jira.spring.io/browse/SPR-11794?redirect=false)** and commented  Hi,  I am trying to upgrade an application using Spring 3.06 and DWR 2.0.3 to Spring 4 latest version on tomcat 7.  But when I start my app, I get below error on the console. The app works fine with Spring 3.2.8. I even tried moving to DWR 3 but get the same error. Is Spring 4 backward compatible with DWR 2 ?  May 16, 2014 10:57:15 AM org.apache.catalina.core.ApplicationContext log SEVERE: StandardWrapper.Throwable org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'urlMapping' defined in ServletContext resource [/WEB-INF/admin-servlet.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dwrController': Invocation of init method failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:547) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:700) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482) at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:643) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:606) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:657) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:525) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:466) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136) at javax.servlet.GenericServlet.init(GenericServlet.java:158) at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1284) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1197) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1087) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:5210) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5493) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) at java.util.concurrent.FutureTask.run(FutureTask.java:166) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:722) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dwrController': Invocation of init method failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1553) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:973) at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:287) at org.springframework.web.servlet.handler.SimpleUrlHandlerMapping.registerHandlers(SimpleUrlHandlerMapping.java:129) at org.springframework.web.servlet.handler.SimpleUrlHandlerMapping.initApplicationContext(SimpleUrlHandlerMapping.java:104) at org.springframework.context.support.ApplicationObjectSupport.initApplicationContext(ApplicationObjectSupport.java:120) at org.springframework.web.context.support.WebApplicationObjectSupport.initApplicationContext(WebApplicationObjectSupport.java:73) at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74) at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119) at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:407) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1545) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) ... 28 more Caused by: java.lang.NullPointerException at org.directwebremoting.spring.DwrController.afterPropertiesSet(DwrController.java:213) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1612) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1549) ... 46 more  May 16, 2014 10:57:15 AM org.apache.catalina.core.StandardContext loadOnStartup SEVERE: Servlet /cashback-admin threw load() exception java.lang.NullPointerException at org.directwebremoting.spring.DwrController.afterPropertiesSet(DwrController.java:213) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1612) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1549) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:973) at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:287) at org.springframework.web.servlet.handler.SimpleUrlHandlerMapping.registerHandlers(SimpleUrlHandlerMapping.java:129) at org.springframework.web.servlet.handler.SimpleUrlHandlerMapping.initApplicationContext(SimpleUrlHandlerMapping.java:104) at org.springframework.context.support.ApplicationObjectSupport.initApplicationContext(ApplicationObjectSupport.java:120) at org.springframework.web.context.support.WebApplicationObjectSupport.initApplicationContext(WebApplicationObjectSupport.java:73) at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74) at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119) at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:407) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1545) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:700) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482) at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:643) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:606) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:657) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:525) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:466) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136) at javax.servlet.GenericServlet.init(GenericServlet.java:158) at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1284) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1197) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1087) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:5210) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5493) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) at java.util.concurrent.FutureTask.run(FutureTask.java:166) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:722)    ---  **Affects:** 4.0.1, 4.0.2, 4.0.4  **Reference URL:** http://stackoverflow.com/questions/23446015/error-occur-when-i-start-project-that-using-dwr3-0-rc2-with-spring","closed","status: invalid,","spring-projects-issues","2014-05-16T03:09:36Z","2019-01-12T05:25:57Z"
"","16903","Provider declaration for @Value method argument fails with TypeMismatchException [SPR-12297]","**[Sanjay Acharya](https://jira.spring.io/secure/ViewProfile.jspa?name=saacharya)** opened **[SPR-12297](https://jira.spring.io/browse/SPR-12297?redirect=false)** and commented  Would be very useful if Spring allowed for the injection of javax.inject.Provider along with `@Value` annotation for properties that could change at Runtime.  ``` public class Foo {   private final Provider changeableIntegerProperty;     public Foo(Provider changeableIntegerProperty) {     this.changeableIntegerProperty = changeableIntegerProperty;  }   public void someOperation() {      changeableIntegerProperty.get(); // Gets current value of the property  } }  @Configuration public class FooConfig {   @Bean    public Foo foo(@Value(""${fooProp}"") Provider fooProp) {         return new Foo(fooProp);    } } ```  If the same code shown above were attempted now, a TypeMismatchException gets thrown in TypeConverterSupport due to the nesting level of the parameter not set to 1.  My request for improvement is to allow the injection of java.inject.Provider along with `@Value`. Thanks.  ---  **Affects:** 3.2.11, 4.0.7, 4.1.1  **Issue Links:** - #14133 MapToMapConverter cannot distinguish MultiValueMap in target - #10747 Provide support for javax.inject.Provider  style injection for `@Value` and `@Autowired`  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2014-10-05T05:39:55Z","2019-01-13T05:44:29Z"
"","17025","StompDecoder StringIndexOutOfBoundsException with Apache ActiveMQ [SPR-12418]","**[Sang-hyun Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=zany)** opened **[SPR-12418](https://jira.spring.io/browse/SPR-12418?redirect=false)** and commented  I'm using the Spring Framework libraries.  ---  1. Spring Boot 1.1.8.RELEASE    1-1. org.springframework.boot:spring-boot-starter-amqp:jar:1.1.8.RELEASE    1-2. org.springframework.boot:spring-boot-starter-websocket:jar:1.1.8.RELEASE 2. org.springframework:spring-messaging:jar:4.0.7.RELEASE 3. org.projectreactor:reactor-net:jar:1.1.4.RELEASE (for StompBrokerRelay)  ---  I referneced http://assets.spring.io/wp/WebSocketBlogPost.html but I'm using the ""Apache ActiveMQ 5.10.0"" and configured Stomp Broker Relay.  My Application publishing stomp messages to client 5 ~ 30 messages per second. each message has 300 ~ 700 bytes length of payload.  I meet ""StringIndexOutOfBoundsException"" irregularly. and after connection is closed.  stacktrace is below.  ---  java.lang.StringIndexOutOfBoundsException: String index out of range: 3 at java.lang.String.charAt(String.java:658) at org.springframework.messaging.simp.stomp.StompDecoder.unescape(StompDecoder.java:221) at org.springframework.messaging.simp.stomp.StompDecoder.readHeaders(StompDecoder.java:197) at org.springframework.messaging.simp.stomp.StompDecoder.decodeMessage(StompDecoder.java:123) at org.springframework.messaging.simp.stomp.StompDecoder.decode(StompDecoder.java:99) at org.springframework.messaging.simp.stomp.StompDecoder.decode(StompDecoder.java:68) at org.springframework.messaging.simp.stomp.Reactor11StompCodec$DecodingFunction.apply(Reactor11StompCodec.java:96) at org.springframework.messaging.simp.stomp.Reactor11StompCodec$DecodingFunction.apply(Reactor11StompCodec.java:83) at reactor.net.AbstractNetChannel.read(AbstractNetChannel.java:214) at reactor.net.netty.NettyNetChannelInboundHandler.passToConnection(NettyNetChannelInboundHandler.java:105) at reactor.net.netty.NettyNetChannelInboundHandler.channelRead(NettyNetChannelInboundHandler.java:69) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:332) at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:318) at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:787) at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:125) at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:507) at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:464) at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:378) at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:350) at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:116) at java.lang.Thread.run(Thread.java:745)  ---  so, I debug the StompDecoder.java (4.0.7.RELEASE source)  and I found out the StompDecoder.unescape() method throws the StringIndexOutOfBoundsException when message header value end with ""\"". (in my case ""message-id"" value exactly)  Messages that caused the exception are like below.  CASE #1)  ---  content-type:application/json;charset=UTF-8 message-id:ID\ 095041.588 ERROR 20569 --- [eactor-tcp-io-4] reactor.core.Reactor                     : String index out of range: 3 java.lang.StringIndexOutOfBoundsException: String index out of range: 3 at java.lang.String.charAt(String.java:658) at org.springframework.messaging.simp.stomp.StompDecoder.unescape(StompDecoder.java:221) at org.springframework.messaging.simp.stomp.StompDecoder.readHeaders(StompDecoder.java:197) at org.springframework.messaging.simp.stomp.StompDecoder.decodeMessage(StompDecoder.java:123)  ... same stack trace...  CASE #2)  ---  content-type:application/json;charset=UTF-8 message-id:ID\cktpdevGW-39005-1415095980735-2\c882\c-1\c1\ 095056.596 ERROR 20569 --- [eactor-tcp-io-3] reactor.core.Reactor                     : String index out of range: 47 java.lang.StringIndexOutOfBoundsException: String index out of range: 47 at java.lang.String.charAt(String.java:658) at org.springframework.messaging.simp.stomp.StompDecoder.unescape(StompDecoder.java:221) at org.springframework.messaging.simp.stomp.StompDecoder.readHeaders(StompDecoder.java:197) at org.springframework.messaging.simp.stomp.StompDecoder.decodeMessage(StompDecoder.java:123)  ... same stack trace...  CASE #3)  ---  content-type:application/json;charset=UTF-8 message-id:ID\cktpdevGW-39005-1415095980735-2\c882\ 101513.253 ERROR 20569 --- [eactor-tcp-io-4] reactor.core.Reactor                     : String index out of range: 40 java.lang.StringIndexOutOfBoundsException: String index out of range: 40 at java.lang.String.charAt(String.java:658) at org.springframework.messaging.simp.stomp.StompDecoder.unescape(StompDecoder.java:221) at org.springframework.messaging.simp.stomp.StompDecoder.readHeaders(StompDecoder.java:197) at org.springframework.messaging.simp.stomp.StompDecoder.decodeMessage(StompDecoder.java:123)  ... same stack trace...  every case of messages are ended with ""\"" character. that messages are looks like incomplete message from the network.  this exception happens on localhost (127.0.0.1 loopback)  ---  **Affects:** 4.0.7  **Issue Links:** - #17995 StompDecoder fails for partial headers containing escape sequence  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/18033486aec5de46833a2437026a0494c6485460, https://github.com/spring-projects/spring-framework/commit/b331d6501948b9fb4b27027cabba15a662fe031a  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","type: bug,","spring-projects-issues","2014-11-09T18:24:28Z","2019-01-13T15:20:19Z"
"","16968","org.springframework.ui.ModelMap.mergeAttributes(Map) makes inefficient use of keySet iterator [SPR-12363]","**[Sang Gi Ryu](https://jira.spring.io/secure/ViewProfile.jspa?name=jaydon-ryu)** opened **[SPR-12363](https://jira.spring.io/browse/SPR-12363?redirect=false)** and commented  org.springframework.ui.ModelMap.mergeAttributes(Map) makes inefficient use of keySet iterator instead of entrySet iterator.  ---  **Affects:** 4.1.1  **Issue Links:** - #16961 BeanFactoryAnnotationUtils,qualifiedBeanOfType, Inefficient use of keySet iterator. - #17037 MessageHeaderAccessor copyHeaders... tuning  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/672, and commits https://github.com/spring-projects/spring-framework/commit/d62522982f39f2610f0d9d26d9908ccb1ea24222, https://github.com/spring-projects/spring-framework/commit/73e398a1654f570edc7d5e146d5d9fd4adc1592e  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2014-10-22T21:17:17Z","2019-01-11T19:24:52Z"
"","16531","MockHttpServletResponse.setDateHeader does not perform date formatting [SPR-11912]","**[Samuel Halliday](https://jira.spring.io/secure/ViewProfile.jspa?name=fommil)** opened **[SPR-11912](https://jira.spring.io/browse/SPR-11912?redirect=false)** and commented  #### Status Quo  `HttpServletResponse.setDateHeader` takes a `long` parameter and is supposed to set the HTTP header as a string in [RFC 2616](http://tools.ietf.org/html/rfc2616) format.  However, the `setDateHeader` and `addDateHeader` methods in `MockHttpServletResponse` simply save the supplied `long` value as-is. For example, `MockHttpServletResponse.getHeader(""Last-Modified"")` will return `0L` and **not** the RFC formatted string.  This makes it impossible to use this mock to test behavior in date header fields.  #### Proposals  1. One possible fix would be to provide a `getDateHeader` accessor. 2. Another option would be to immediately convert date headers to formatted strings when they are added or set and store the formatted strings instead of longs.  The same goes for the request side: please provide a `setDateHeader` method in `MockHttpServletRequest`.  ---  **Affects:** 3.1.4  **Issue Links:** - #16672 MockHttpServletRequest does not handle rfc formatted dates. (_**""is duplicated by""**_) - #20859 MockHttpServletRequest and MockHttpServletResponse should re-use date patterns / parsers / formatters from HttpHeaders - #17854 Add a new ResultMatcher for date formats in HTTP headers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/43e36e2dee8e2c7be54ba3715cc355c8a35f9efc  0 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2014-06-25T04:24:43Z","2019-01-11T22:20:09Z"
"","16849","LocalSessionFactoryBean doesn't support JPA 2.1 auto-apply @Converter on Hibernate 4.3 [SPR-12234]","**[Samuel Fung](https://jira.spring.io/secure/ViewProfile.jspa?name=psfung)** opened **[SPR-12234](https://jira.spring.io/browse/SPR-12234?redirect=false)** and commented  I use JPA `@Converter` with auto-apply. It works with Hibernate Configuration, but fails with Spring LocalSessionFactoryBean. See ConvertTest and SpringConvertTest respectively in attached testcase.  org.hibernate.MappingException: Could not determine type for: test.convert.MyType, at table: Parent, for columns: [org.hibernate.mapping.Column(myType)] at org.hibernate.mapping.SimpleValue.getType(SimpleValue.java:336) at org.hibernate.mapping.SimpleValue.isValid(SimpleValue.java:310) at org.hibernate.mapping.Property.isValid(Property.java:241) at org.hibernate.mapping.PersistentClass.validate(PersistentClass.java:496) at org.hibernate.mapping.RootClass.validate(RootClass.java:270) at org.hibernate.cfg.Configuration.validate(Configuration.java:1358) at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1849) at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1928) at org.springframework.orm.hibernate4.LocalSessionFactoryBuilder.buildSessionFactory(LocalSessionFactoryBuilder.java:363) at org.springframework.orm.hibernate4.LocalSessionFactoryBean.buildSessionFactory(LocalSessionFactoryBean.java:453) at org.springframework.orm.hibernate4.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:438) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1627) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1564) ... 40 more  LocalSessionFactoryBean only works when `@Convert`(converter=MyConverter.class) is explicitly declared at property Parent.myType.  Walking through the source, LocalSessionFactoryBuilder.defaultTypeFilters includes scanning of `@Converter` and eventually calls addAnnotatedClass(); addAttributeConverter() should be called instead.  ---  **Affects:** 4.1 GA  **Attachments:** - [convert-test.zip](https://jira.spring.io/secure/attachment/22213/convert-test.zip) (_3.23 kB_)  **Issue Links:** - #15425 Add support for discovering JPA 2.1 `@Converter` during scanning  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f9452ae9e955f0e0a1c6046dd30a6eb2ed6ed1d5","closed","type: enhancement,","spring-projects-issues","2014-09-22T02:20:53Z","2019-01-13T05:44:46Z"
"","16581","Support MultiPartFile as part of form backing object in Spring MVC Test [SPR-11965]","**[Sameer Pawar](https://jira.spring.io/secure/ViewProfile.jspa?name=sameer_pawar)** opened **[SPR-11965](https://jira.spring.io/browse/SPR-11965?redirect=false)** and commented  My controller is like below:  ```java @RequestMapping(method = POST) protected String processSubmit(HttpServletRequest request,         @Valid @ModelAttribute(""binaryUploadForm"") BinaryUploadForm form, BindingResult result, ModelMap model) throws Exception { ```  then I loop through files...  ```java final int numberOfFiles = form.getFiles().size(); for (int i = 0; i < numberOfFiles; i++) {     final MultipartFile multipartFile = form.getFiles().get(i); ```  In JSP I have a field like below  ```html  ```  and form implementation is as below  ```java public List getFiles() {     return files; }  public void setFiles(List files) {     this.files = files; } ```  The HTML form is submitted using JavaScript which is quite complex and using EXT JS.  I want to write a test case for this using `MockMvc`.  ```java mockMvc.perform(fileUpload(""/binary-management/add-binary.html"").file(file) ```  But the above is not helpful as `MultipartFile` is not coming as part of parameter but as a field in form.  Can you please provide this feature?   ---  **Affects:** 4.0.5","closed","status: bulk-closed,","spring-projects-issues","2014-07-07T07:33:44Z","2019-01-12T02:29:24Z"
"","17142","CollectionFactory API is not type-safe [SPR-12537]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12537](https://jira.spring.io/browse/SPR-12537?redirect=false)** and commented  #### Status Quo  The changes made to `CollectionFactory` in conjunction with #15691 resulted in method signatures that are not type-safe, and the changes made in conjunction with #17089 further exacerbated the issue.  For example, the parameterized type `E` is not bound to the type of elements contained in the `collection` argument passed to `createApproximateCollection()`. Thus casting the value returned by `EnumSet#copyOf(EnumSet)` to `(Collection)` can never guarantee that the returned collection actually contains elements of type `E`.  ---  #### Example Tests  Each of the following tests (adapted from `CollectionFactoryTests`) compiles but throws a `ClassCastException` due to the lacking type safety of the method signatures.  ```java @Test public void createApproximateCollectionIsNotTypeSafeForEnumSet() { 	Collection ints = createApproximateCollection(EnumSet.of(Color.BLUE), 3); 	ints.add(42); }  @Test public void createCollectionIsNotTypeSafeForEnumSet() { 	Collection ints = createCollection(EnumSet.class, Color.class, 3); 	ints.add(42); }  @Test public void createApproximateMapIsNotTypeSafeForEnumMap() { 	EnumMap enumMap = new EnumMap(Color.class); 	enumMap.put(Color.RED, 1); 	enumMap.put(Color.BLUE, 2); 	Map map = createApproximateMap(enumMap, 3); 	map.put(""foo"", 1); }  @Test public void createMapIsNotTypeSafeForEnumMap() { 	Map map = createMap(EnumMap.class, Color.class, 3); 	map.put(""foo"", 1); }  @Test public void createMapIsNotTypeSafeForLinkedMultiValueMap() { 	Map map = createMap(MultiValueMap.class, null, 3); 	map.put(""foo"", 1); } ```  ---  #### Deliverables  1. [ ] Ensure that all methods in `CollectionFactory` are type-safe.    - Consider reverting to raw types, or alternatively to `Collection` and `Map` as was done by the [Spring Data Team](https://github.com/spring-projects/spring-data-commons/commit/af6fc2c66e5c0331ba4f2529afc02d9d48b7d242). 2. [ ] Refactor `CollectionFactoryTests` accordingly.  ---  **Affects:** 4.0 GA  **Issue Links:** - #15691 Fix remaining compiler warnings and fail build if they return (_**""depends on""**_) - #17089 Default conversion support for EnumSet / EnumMap (_**""depends on""**_) - #17138 CollectionFactory should create empty EnumSets and EnumMaps - #17197 Document type safety limitations of the CollectionFactory API (_**""is superseded by""**_)","closed","in: core,","spring-projects-issues","2014-12-11T07:20:01Z","2019-01-13T05:43:18Z"
"","17138","CollectionFactory should create empty EnumSets and EnumMaps [SPR-12533]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12533](https://jira.spring.io/browse/SPR-12533?redirect=false)** and commented  #### Status Quo  #17089 introduced conversion support for `EnumSet` and `EnumMap` in `CollectionFactory`; however, the newly introduced support contradicts the existing contract for the related methods by creating a copy of the supplied set or map, thereby potentially including elements in the returned collection when the returned collection should in fact be empty.  #### Deliverables  1. [x] Refactor `createApproximateCollection()` so that it returns an _empty_ `EnumSet`. 2. [x] Refactor `createApproximateMap()` so that it returns an _empty_ `EnumMap`.  ---  **Affects:** 4.1.3  **Issue Links:** - #17089 Default conversion support for EnumSet / EnumMap - #17142 CollectionFactory API is not type-safe  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aec284a4ca4db3adf6f7d8ae9da6ddc30ce367f1","closed","in: core,","spring-projects-issues","2014-12-10T13:50:09Z","2019-01-11T18:29:23Z"
"","17018","Support @Order on ApplicationListeners [SPR-12410]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12410](https://jira.spring.io/browse/SPR-12410?redirect=false)** and commented  #### Status Quo  `AbstractApplicationEventMulticaster` currently sorts `ApplicationListener` instances based on the `Ordered` interface, but the sorting algorithm does not honor annotations.  At the time of this writing, there are two invocations of `OrderComparator.sort()` within `AbstractApplicationEventMulticaster`.  #### Proposal  Refactor `AbstractApplicationEventMulticaster` to use `AnnotationAwareOrderComparator.sort()` instead of `OrderComparator.sort()`.  ---  **Affects:** 3.0 GA  **Issue Links:** - #14690 AbstractApplicationEventMulticaster does not sort listeners using `@Order` (_**""is duplicated by""**_) - #16245 ApplicationListener-like annotation for consuming application events - #17403 `@Order` annotations not consistently honored within DispatcherServlet and other parts of the framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8eb7beebc8d7d202e736ca6a5f1be2d3ffc227c2","closed","type: enhancement,","spring-projects-issues","2014-11-03T08:56:31Z","2019-01-13T05:44:01Z"
"","17017","Log context cache statistics in the TestContext framework [SPR-12409]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12409](https://jira.spring.io/browse/SPR-12409?redirect=false)** and commented  #### Status Quo  The Spring TestContext Framework (TCF) has always cached `ApplicationContexts` loaded for tests; however, it's always been a bit of a black art knowing (or finding out) exactly how many contexts are loaded within a given test suite.  The information, however, has always been tracked internally within the `ContextCache` class, and some developers have used reflection to acquire this information. It would therefore be beneficial to many development teams if the context cache statistics were made publicly available, at least as log output.  #### Deliverables  1. [x] Log context cache statistics whenever an `ApplicationContext` is loaded by the TCF.    ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/983ebaf658611735476b5d6939b07927bfe2a985, https://github.com/spring-projects/spring-framework/commit/da04362a5e52fae46ff817f8167a2f55a25eac78, https://github.com/spring-projects/spring-framework/commit/a09bc9b1c154048873fcf7ca88306679593c1032, https://github.com/spring-projects/spring-framework/commit/74500ec8da5244716908ba1a6c5fc4d5baa7603b  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-11-03T06:10:18Z","2014-11-10T23:12:27Z"
"","16860","Escape single quotes nested in double quotes in the reference manual [SPR-12246]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12246](https://jira.spring.io/browse/SPR-12246?redirect=false)** and commented  #### Status Quo  Single quotes nested within double quotes in code examples in the reference manual currently cause formatting issues in the generated documentation.  Using the regular expression `"".*?'.*?'.*""` helps to find such issues.  #### Deliverables  1. Ensure proper formatting of single quotes within the reference manual  ---  **Affects:** 4.1 GA  **Issue Links:** - #16800 Documentation typo in mvcUrl example  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/38777955d20f354be6a4c88ea8b702b1051dc147","closed","type: documentation,","spring-projects-issues","2014-09-24T09:56:46Z","2019-01-11T17:38:30Z"
"","16783","SocketUtils should not be an abstract class [SPR-12169]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12169](https://jira.spring.io/browse/SPR-12169?redirect=false)** and commented  #### Status Quo  Per the Javadoc for the `SocketUtils()` constructor, `SocketUtils` can be instantiated as a Spring Bean in XML configuration files; however, `SocketUtils` is currently `abstract` which prevents such usage.  #### Deliverables  1. [x] Make `SocketUtils` a concrete class 2. [x] Backport to Spring Framework 4.0.8    ---  **Affects:** 4.0 GA  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","in: core,","spring-projects-issues","2014-09-09T14:06:11Z","2014-10-01T03:11:46Z"
"","16742","Document how to register custom MIME type in MockServletContext [SPR-12126]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12126](https://jira.spring.io/browse/SPR-12126?redirect=false)** and commented  #### Status Quo  As can be seen in the discussion on StackOverflow (see _Reference URL_), developers may not be aware that it is possible to configure a custom MIME type when using Spring's `MockServletContext`.  #### Deliverables  1. [x] Document how to register a custom MIME type using the Java Activation Framework in conjunction with `MockServletContext`.    ---  **Affects:** 3.0 GA  **Reference URL:** http://stackoverflow.com/questions/22986109/testing-spring-managed-servlet  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d5c6bcb901f74b53b3098f28ce2f594feccef5fa","closed","type: documentation,","spring-projects-issues","2014-08-26T15:15:00Z","2014-09-04T05:31:17Z"
"","16703","Exclude spring-framework-bom artifacts from release distributions [SPR-12087]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12087](https://jira.spring.io/browse/SPR-12087?redirect=false)** and commented  #### Status Quo  Currently the following are included in release distributions (e.g., `spring-framework-4.1.0.RC1-dist.zip`) in the `lib` folder:  - `spring-framework-bom-4.1.0.RC2-javadoc.jar` - `spring-framework-bom-4.1.0.RC2-sources.jar` - `spring-framework-bom-4.1.0.RC2.jar`  #### Deliverables  1. Exclude all `spring-framework-bom` artifact jars from zipped release distributions.    ---  **Affects:** 3.2.10, 4.0.6, 4.1 RC2  **Backported to:** [4.0.7](https://github.com/spring-projects/spring-framework/milestone/119?closed=1), [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)","closed","type: task,","spring-projects-issues","2014-08-15T07:49:56Z","2014-09-04T01:31:45Z"
"","16702","Include Groovy source code in published sources jars [SPR-12086]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12086](https://jira.spring.io/browse/SPR-12086?redirect=false)** and commented  #### Status Quo  #16701 updated the Gradle build to ensure that all source artifacts are included in published 'sources' jars; however, the work fell short of incorporating Groovy source code (i.e., `'**/*.groovy'`) into the 'sources' jars.  #### Deliverables  1. [x] Ensure that Groovy source code (e.g., `GroovyDynamicElementReader.groovy` from the `spring-beans` module) is included in the published 'sources' jars  ---  **Affects:** 4.0.6, 4.1 RC2  **Issue Links:** - #16701 Include all source artifacts in published sources jars (_**""depends on""**_) - #16701 Include all source artifacts in published sources jars (_**""is superseded by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/042cfeed5cb86bc568816d90e752ba01850e6885","closed","status: declined,","spring-projects-issues","2014-08-15T05:45:07Z","2019-01-11T18:17:28Z"
"","16701","Include all source artifacts in published sources jars [SPR-12085]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12085](https://jira.spring.io/browse/SPR-12085?redirect=false)** and commented  #### Status Quo  For example, in 4.1 RC2, the `META-INF/spring.factories` file is present in `spring-test-4.1.0.RC2.jar`, but it is not present in `spring-test-4.1.0.RC2-sources.jar`. The same is true for the `spring-beans` module.  Further analysis reveals that only Java and AspectJ source code are included in the current 'sources' jars.  #### Deliverables  1. [x] Ensure that `META-INF/spring.factories` is included in published 'sources' archives across the framework.    - This currently is known to affect `spring-beans` and `spring-test`. 2. [x] Ensure that the following file types are also included in published 'sources' archives:    - [x] Groovy source code    - [x] Properties files    - [x] XML files    - [x] `META-INF/services/*`    - [x] `mime.types`  ---  **Affects:** 3.2.10, 4.0.6, 4.1 RC2  **Issue Links:** - #16702 Include Groovy source code in published sources jars (_**""is depended on by""**_) - #16702 Include Groovy source code in published sources jars (_**""supersedes""**_)  **Backported to:** [4.0.7](https://github.com/spring-projects/spring-framework/milestone/119?closed=1), [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)","closed","type: task,","spring-projects-issues","2014-08-15T04:43:15Z","2019-01-11T18:17:31Z"
"","16699","Document support for merging custom TELs with default TELs in the reference manual [SPR-12083]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12083](https://jira.spring.io/browse/SPR-12083?redirect=false)** and commented  #### Status Quo  #13496 introduced a mechanism for registering default TELs if a custom TEL is registered via `@TestExecutionListeners`, but this feature has not yet been documented in the reference manual.  ---  #### Deliverables  1. [x] Document the new `MergeMode` feature in `@TestExecutionListeners` in the reference manual, including various examples demonstrating the `REPLACE_DEFAULTS` and `MERGE_WITH_DEFAULTS` modes.  ---  **Affects:** 4.1 RC2  **Issue Links:** - #13496 Introduce mechanism for registering default TELs if a custom TEL is registered via `@TestExecutionListeners` (_**""depends on""**_) - #16698 Document automatic discovery of default TestExecutionListeners in the reference manual  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4c2aa6adc60207e8a8fe83c0af31fcd17c8593b7","closed","type: documentation,","spring-projects-issues","2014-08-14T17:38:43Z","2019-01-13T05:46:54Z"
"","16698","Document automatic discovery of default TestExecutionListeners in the reference manual [SPR-12082]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12082](https://jira.spring.io/browse/SPR-12082?redirect=false)** and commented  #### Status Quo  #16092 introduced a mechanism for automatic discovery of default `TestExecutionListeners`, but this new feature has not yet been documented in the reference manual.  ---  #### Deliverables  1. [x] Document the new mechanism for automatic discovery of default `TestExecutionListeners` in the reference manual. 2. [x] Document the implications of `TestExecutionListeners` _ordered_ via `Ordered` or `@Order`.  ---  **Affects:** 4.1 RC2  **Issue Links:** - #16092 Introduce mechanism for automatic discovery of default TestExecutionListeners (_**""depends on""**_) - #16699 Document support for merging custom TELs with default TELs in the reference manual  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7cd615c4f9da6ec0e4df17629a358bd5f2001b3d","closed","type: documentation,","spring-projects-issues","2014-08-14T17:33:31Z","2019-01-13T05:47:12Z"
"","16692","Document @TestPropertySource support in the reference manual [SPR-12076]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12076](https://jira.spring.io/browse/SPR-12076?redirect=false)** and commented  #### Status Quo  #16667 introduced `@TestPropertySource` support in the TestContext framework, but this new feature has not yet been documented in the reference manual.  #### Deliverables  1. [x] Document `@TestPropertySource` support in the reference manual, including examples for:    - resource `locations`    - inlined `properties`    - precedence rules for inlined test properties, test resource locations, and _production_ properties    - inheritance and overriding of locations and properties within a test class hierarchy  ---  **Affects:** 4.1 RC2  **Issue Links:** - #16667 Introduce `@TestPropertySource` support in the TestContext framework (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9926badb33294c1d1eb931a08a96b92908ddd15e","closed","type: documentation,","spring-projects-issues","2014-08-11T13:16:00Z","2019-01-13T05:47:15Z"
"","16667","Introduce @TestPropertySource support in the TestContext framework [SPR-12051]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12051](https://jira.spring.io/browse/SPR-12051?redirect=false)** and commented  #### Status Quo  #14865 and #16004 proposed support for using `@PropertySource` on test classes and introducing `@TestPropertyValue` for declarative `PropertySource` value declarations, respectively. This issue supersedes those two issues by combining the two proposals into a dedicated `@TestPropertySource` annotation.  ---  #### Deliverables  1. [x] Introduce a new `@TestPropertySource` annotation for configuring a test-specific `PropertySource`. 2. [x] `@TestPropertySource` must support attributes analogous to those found in `@PropertySource` (i.e., for declaring resource locations). 3. [x] `@TestPropertySource` must support an additional attribute that allows for key/value pairs to be declared _inline_.    - See the proposal in #16004 as well as the `value` attribute in `@IntegrationTest` from Spring Boot for implementation ideas. 4. [x] As with `@ActiveProfiles`, `@TestPropertySource` declarations on test classes should be inherited by default but overridable via a boolean flag (i.e., attribute in the annotation). 5. [x] The context cache key (i.e., `MergedContextConfiguration`) must take _test_ property sources into account.  ---  #### Further Resources  - See the proposals, analysis, and discussions in #14865 and #16004 for further insight. - `ConfigurationClassParser.processPropertySource(AnnotationAttributes)`  ---  **Issue Links:** - #16692 Document `@TestPropertySource` support in the reference manual (_**""is depended on by""**_) - #14865 Allow `@PropertySource` to be specified on a test class (_**""supersedes""**_) - #16004 Support declarative PropertySource annotations in the TestContext framework (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f2ac02566cdcbaa69aa344cf39e043581952a839, https://github.com/spring-projects/spring-framework/commit/2cf4147ba81503a45922dc38444b6874f7ba6221  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2014-07-31T04:20:38Z","2019-01-13T05:47:34Z"
"","16659","Document that MockHttpServletRequest does not comply with Servlet spec regarding Accept-Language header [SPR-12043]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12043](https://jira.spring.io/browse/SPR-12043?redirect=false)** and commented  #### Status Quo  #16323 raised the issue that `MockHttpServletRequest` does not comply with the Servlet spec with regard to locales and the `Accept-Language` header.  ---  #### Deliverables  1. [x] Document that `MockHttpServletRequest.getLocale()` does not comply with the the Servlet specification with regard to the `Accept-Language` header. 2. [x] Document that `MockHttpServletRequest.getLocales()` does not comply with the the Servlet specification with regard to the `Accept-Language` header.  ---  **Issue Links:** - #16323 Support Accept-Language header in MockHttpServletRequest's getLocale() and getLocales() methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7971f6b63804b32aaf29c37ffef94722ddf49cab","closed","type: enhancement,","spring-projects-issues","2014-07-28T08:58:53Z","2019-01-13T20:59:07Z"
"","16643","Document Groovy script support in the TestContext framework in the reference manual [SPR-12027]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-12027](https://jira.spring.io/browse/SPR-12027?redirect=false)** and commented  #### Status Quo  #15858 introduced first-class support for using Groovy scripts to load an `ApplcationContext` for integration tests in the TestContext framework, but this new feature has not yet been documented in the reference manual.  #### Deliverables  1. [x] Document support for Groovy scripts in the TCF in the _Testing_ chapter of the reference manual.    - [x] Include examples for named Groovy scripts.    - [x] Include examples for default Groovy script detection.    - [x] Include examples for mixed XML + Groovy config.  ---  **Affects:** 4.1 RC2  **Issue Links:** - #15858 Support Groovy scripts for bean definitions in the TestContext framework (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d4f5901f1fed6768acc051d796d4da5a5e94b892","closed","type: documentation,","spring-projects-issues","2014-07-24T08:22:22Z","2019-01-11T18:20:59Z"
"","16558","Document programmatic test transaction management support [SPR-11941]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11941](https://jira.spring.io/browse/SPR-11941?redirect=false)** and commented  #### Status Quo  #9753 introduced support for programmatically interacting with test-managed transactions in the _Spring TestContext Framework_ (TCF); however, this new feature has not yet been sufficiently documented.  #### Deliverables  1. [x] Document programmatic support for stopping and starting test-managed transactions in the reference manual, including examples of how to use the new `TestTransaction` API. 2. [ ] Introduce examples in the class-level Javadoc for `TestTransaction`. 3. [x] Document `TestTransaction` support in the class-level Javadoc for `TransactionalTestExecutionListener`.  ---  **Affects:** 4.1 RC1  **Issue Links:** - #9753 Support programmatic starting and stopping of transactions in the TestContext framework (_**""depends on""**_) - #16026 Improve documentation of transactional support in the TestContext framework (_**""is depended on by""**_)","closed","type: documentation,","spring-projects-issues","2014-07-02T14:23:46Z","2019-01-11T22:27:45Z"
"","16551","Upgrade build to Gradle 2.2.1 [SPR-11934]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11934](https://jira.spring.io/browse/SPR-11934?redirect=false)** and commented  #### Deliverables  1. [x] `MergePlugin` is incompatible with Gradle 2.0.    - Fixed in `master`; see comments section. 2. [x] `propdeps-plugin` version `0.0.6` (the version currently used in `build.gradle`) is incompatible with Gradle 2.0.    - Version `0.0.7` fixes the issue.    - See the [discussion regarding propdeps-plugin version 0.0.7](https://github.com/spring-projects/gradle-plugins/issues/43) on GitHub. 3. [x] `spring-aspects` fails to compile against Gradle 2.0.    - See _Aspect Compilation Errors_ below.  ---  #### Aspect Compilation Errors  The `spring-aspects` module fails to compile against Gradle 2.0. See below for details.  ``` :spring-aspects:compileJava /Users/sbrannen/source/spring-framework/spring-aspects/src/main/java/org/springframework/cache/aspectj/AspectJCachingConfiguration.java:40: error: cannot find symbol 	public AnnotationCacheAspect cacheAspect() { 	       ^   symbol:   class AnnotationCacheAspect   location: class AspectJCachingConfiguration /Users/sbrannen/source/spring-framework/spring-aspects/src/main/java/org/springframework/cache/aspectj/AspectJJCacheConfiguration.java:42: error: cannot find symbol 	public JCacheCacheAspect cacheAspect() { 	       ^   symbol:   class JCacheCacheAspect   location: class AspectJJCacheConfiguration /Users/sbrannen/source/spring-framework/spring-aspects/src/main/java/org/springframework/context/annotation/aspectj/SpringConfiguredConfiguration.java:19: error: cannot find symbol import org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect;                                                 ^   symbol:   class AnnotationBeanConfigurerAspect   location: package org.springframework.beans.factory.aspectj /Users/sbrannen/source/spring-framework/spring-aspects/src/main/java/org/springframework/context/annotation/aspectj/SpringConfiguredConfiguration.java:47: error: cannot find symbol 	public AnnotationBeanConfigurerAspect beanConfigurerAspect() { 	       ^   symbol:   class AnnotationBeanConfigurerAspect   location: class SpringConfiguredConfiguration /Users/sbrannen/source/spring-framework/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AspectJAsyncConfiguration.java:42: error: cannot find symbol 	public AnnotationAsyncExecutionAspect asyncAdvisor() { 	       ^   symbol:   class AnnotationAsyncExecutionAspect   location: class AspectJAsyncConfiguration /Users/sbrannen/source/spring-framework/spring-aspects/src/main/java/org/springframework/transaction/aspectj/AspectJTransactionManagementConfiguration.java:42: error: cannot find symbol 	public AnnotationTransactionAspect transactionAspect() { 	       ^   symbol:   class AnnotationTransactionAspect   location: class AspectJTransactionManagementConfiguration /Users/sbrannen/source/spring-framework/spring-aspects/src/main/java/org/springframework/cache/aspectj/AspectJCachingConfiguration.java:36: warning: [rawtypes] found raw type: AbstractCachingConfiguration public class AspectJCachingConfiguration extends AbstractCachingConfiguration {                                                  ^   missing type arguments for generic class AbstractCachingConfiguration   where C is a type-variable:     C extends CachingConfigurer declared in class AbstractCachingConfiguration /Users/sbrannen/source/spring-framework/spring-aspects/src/main/java/org/springframework/cache/aspectj/AspectJCachingConfiguration.java:41: error: cannot find symbol 		AnnotationCacheAspect cacheAspect = AnnotationCacheAspect.aspectOf(); 		^   symbol:   class AnnotationCacheAspect   location: class AspectJCachingConfiguration /Users/sbrannen/source/spring-framework/spring-aspects/src/main/java/org/springframework/cache/aspectj/AspectJCachingConfiguration.java:41: error: cannot find symbol 		AnnotationCacheAspect cacheAspect = AnnotationCacheAspect.aspectOf(); 		                                    ^   symbol:   variable AnnotationCacheAspect   location: class AspectJCachingConfiguration /Users/sbrannen/source/spring-framework/spring-aspects/src/main/java/org/springframework/cache/aspectj/AspectJJCacheConfiguration.java:43: error: cannot find symbol 		JCacheCacheAspect cacheAspect = JCacheCacheAspect.aspectOf(); 		^   symbol:   class JCacheCacheAspect   location: class AspectJJCacheConfiguration /Users/sbrannen/source/spring-framework/spring-aspects/src/main/java/org/springframework/cache/aspectj/AspectJJCacheConfiguration.java:43: error: cannot find symbol 		JCacheCacheAspect cacheAspect = JCacheCacheAspect.aspectOf(); 		                                ^   symbol:   variable JCacheCacheAspect   location: class AspectJJCacheConfiguration /Users/sbrannen/source/spring-framework/spring-aspects/src/main/java/org/springframework/context/annotation/aspectj/SpringConfiguredConfiguration.java:48: error: cannot find symbol 		return AnnotationBeanConfigurerAspect.aspectOf(); 		       ^   symbol:   variable AnnotationBeanConfigurerAspect   location: class SpringConfiguredConfiguration /Users/sbrannen/source/spring-framework/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AspectJAsyncConfiguration.java:43: error: cannot find symbol 		AnnotationAsyncExecutionAspect asyncAspect = AnnotationAsyncExecutionAspect.aspectOf(); 		^   symbol:   class AnnotationAsyncExecutionAspect   location: class AspectJAsyncConfiguration /Users/sbrannen/source/spring-framework/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AspectJAsyncConfiguration.java:43: error: cannot find symbol 		AnnotationAsyncExecutionAspect asyncAspect = AnnotationAsyncExecutionAspect.aspectOf(); 		                                             ^   symbol:   variable AnnotationAsyncExecutionAspect   location: class AspectJAsyncConfiguration /Users/sbrannen/source/spring-framework/spring-aspects/src/main/java/org/springframework/transaction/aspectj/AspectJTransactionManagementConfiguration.java:43: error: cannot find symbol 		AnnotationTransactionAspect txAspect = AnnotationTransactionAspect.aspectOf(); 		^   symbol:   class AnnotationTransactionAspect   location: class AspectJTransactionManagementConfiguration /Users/sbrannen/source/spring-framework/spring-aspects/src/main/java/org/springframework/transaction/aspectj/AspectJTransactionManagementConfiguration.java:43: error: cannot find symbol 		AnnotationTransactionAspect txAspect = AnnotationTransactionAspect.aspectOf(); 		                                       ^   symbol:   variable AnnotationTransactionAspect   location: class AspectJTransactionManagementConfiguration 15 errors 1 warning :spring-aspects:compileJava FAILED  FAILURE: Build failed with an exception.  * What went wrong: Execution failed for task ':spring-aspects:compileJava'. > Compilation failed; see the compiler error output for details. ```  ---  **Attachments:** - [SPR-11934.patch](https://jira.spring.io/secure/attachment/22089/SPR-11934.patch) (_996 bytes_)  **Issue Links:** - #17369 Upgrade build to Gradle 2.4 (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7497391497a8d1c5d322343a5887a09851721054, https://github.com/spring-projects/spring-framework/commit/3662ad4f942536e74f19739fdcebcb2186e4a4e3, https://github.com/spring-projects/spring-framework/commit/48236be4a261377ec95806933414e66a6ec5fc96, https://github.com/spring-projects/spring-framework/commit/f40d67cfecc1182469c848bc48715d661a5d7eed  1 votes, 9 watchers","closed","type: task,","spring-projects-issues","2014-07-01T05:42:55Z","2019-01-13T20:59:24Z"
"","16540","Decide the fate of HibernateEntityManagerFactoryIntegrationTests [SPR-11922]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11922](https://jira.spring.io/browse/SPR-11922?redirect=false)** and commented  #### Status Quo  `HibernateEntityManagerFactoryIntegrationTests` in the `spring-orm` module is currently disabled and has been for quite some time.  The reason these tests are disabled is that the `AnnotationBeanConfigurerAspect` cannot be found because it resides in the `spring-aspects` module which depends on the `spring-orm` module.  #### Proposal  In order to avoid a cyclical dependency between `spring-aspects` and `spring-orm`, `HibernateEntityManagerFactoryIntegrationTests` could be moved to the root `spring`' module as a framework-level integration test, but the challenge with doing so is that this class depends on classes which are defined in `src/test/java` for the `spring-orm` module.  #### Deliverables  Decide the fate of `HibernateEntityManagerFactoryIntegrationTests`:  1. refactor it so that it works without `@Configurable`? 2. delete it? 3. move it to the root `spring` module?    ---  **Affects:** 4.0 GA","closed","type: task,","spring-projects-issues","2014-06-26T05:38:25Z","2014-07-18T10:16:27Z"
"","16530","Improve transaction management for @Sql [SPR-11911]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11911](https://jira.spring.io/browse/SPR-11911?redirect=false)** and commented  #### Status Quo  #12311 introduced support for executing SQL scripts declaratively in the TestContext framework via `@Sql`. This support provides an algorithm for looking up a _required_ `PlatformTransactionManager` to use to drive transactions. However, a transaction manager is not actually required for all testing scenarios. We therefore need to revise the transaction management support for `@Sql` so that SQL scripts will be executed without a transaction if a transaction manger is not present in the `ApplicationContext`.  ---  #### Deliverables  Revise transaction management in `SqlScriptsTestExecutionListener` using the following algorithm.  1. [x] if a transaction manager and data source are both specified via `@SqlConfig`, retain the current behavior. 2. [x] if a transaction manager is not specified, execute the SQL scripts directly without a transaction, requiring the presence of a data source. 3. [x] if a data source is not explicitly specified, infer it via the `getResourceFactory()` method provided by the `ResourceTransactionManager` interface, which the transaction manager may potentially implement.    - otherwise, throw an IllegalStateException. 4. [x] if `@SqlConfig.transactionMode` is set to `ISOLATED`, throw an exception if a transaction manager is not specified or not present in the `ApplicationContext`.  ---  **Affects:** 4.1 RC1  **Issue Links:** - #12311 Support declarative SQL script execution in the TestContext framework (_**""depends on""**_) - #16468 Document `@Sql` script support in the reference manual (_**""is depended on by""**_) - #16515 Introduce `@SqlConfig` for common SQL script configuration  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2e75adb04c02b8904c59bd5820336104594ce3fb","closed","type: task,","spring-projects-issues","2014-06-25T03:42:09Z","2019-01-13T05:48:20Z"
"","16527","Require JUnit 4.9 or higher in the TestContext framework [SPR-11908]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11908](https://jira.spring.io/browse/SPR-11908?redirect=false)** and commented  ---  **Affects:** 4.0 GA  **Issue Links:** - #17214 Handle exceptions properly in SpringJUnit4ClassRunner - #17866 Require JUnit 4.12 or higher in the TestContext framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7d171e6722341419c5024647cbdcfe33f5eab6a8, https://github.com/spring-projects/spring-framework/commit/b81c522ee1624f3d5f170fc3468f4600956950bd, https://github.com/spring-projects/spring-framework/commit/b4e16eacc5663f72be073cd4fdc83e0bdc0b5630","closed","type: task,","spring-projects-issues","2014-06-24T12:53:53Z","2019-01-11T22:20:34Z"
"","16515","Introduce @SqlConfig for common SQL script configuration [SPR-11896]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11896](https://jira.spring.io/browse/SPR-11896?redirect=false)** and commented  #### Status Quo  #12311 introduced support for declarative SQL script execution via the `@Sql` annotation in the _Spring TestContext Framework_ (TCF). `@Sql` provides attributes for configuring the syntax of the referenced SQL scripts as well as exception handling and transaction behavior.  Early feedback from developers has shown that although this level of configuration (i.e., at the `@Sql` annotation level) is useful, it is often times a burden on the developer to declare the exact same configuration for each test method within a test class or test class hierarchy. It would therefore be very beneficial to be able to declare _common_, shared SQL configuration across a test class hierarchy.  #### Deliverables  1. [x] Introduce a class-level annotation for declaring common SQL script configuration -- for example, `@SqlConfig` 2. [x] Common configuration must be able to be overridden via method-level `@Sql` configuration. 3. [x] Avoid unnecessary duplication of code and documentation by replacing existing configuration attributes in `@Sql` with a single `config` attribute of type `@SqlConfig`. 4. [x] Furthermore, all attributes of `@SqlConfig` must be either of type `String` or custom enums in order to support overriding. _Empty_ values would therefore imply use of a _default_ or _inherited_ value.  ---  **Affects:** 4.1 RC1  **Issue Links:** - #12311 Support declarative SQL script execution in the TestContext framework (_**""depends on""**_) - #16468 Document `@Sql` script support in the reference manual (_**""is depended on by""**_) - #16530 Improve transaction management for `@Sql`","closed","type: enhancement,","spring-projects-issues","2014-06-22T05:40:26Z","2019-01-13T05:48:29Z"
"","16514","Delete deprecated SimpleJdbc* classes [SPR-11895]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11895](https://jira.spring.io/browse/SPR-11895?redirect=false)** and commented  #### Status Quo  `SimpleJdbcOperations`, `SimpleJdbcTemplate`, and `SimpleJdbcDaoSupport` have been deprecated since Spring Framework 3.1; however, they were not deleted with the _pruning_ performed for Spring Framework 4.0.  #### Deliverables  Assess the need for the following and completely delete them from the code base if appropriate.  1. `SimpleJdbcOperations` 2. `SimpleJdbcTemplate` 3. `SimpleJdbcDaoSupport`  ---  **Affects:** 4.0.5  **Issue Links:** - #11587 Deprecate SimpleJdbcTemplate in favor of JdbcTemplate","closed","type: task,","spring-projects-issues","2014-06-22T05:22:21Z","2019-01-11T22:14:48Z"
"","16468","Document @Sql script support in the reference manual [SPR-11849]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11849](https://jira.spring.io/browse/SPR-11849?redirect=false)** and commented  #### Status Quo  #12311 introduced support for declarative SQL script execution in the TestContext framework, but this has not yet been documented in the reference manual.  ---  #### Deliverables  1. [x] Document the new support for `@Sql`, `@SqlGroup`, and `@SqlConfig` in the _Testing_ chapter of the reference manual, including examples with all three annotations.  ---  **Affects:** 4.1 RC1  **Issue Links:** - #12311 Support declarative SQL script execution in the TestContext framework (_**""depends on""**_) - #16515 Introduce `@SqlConfig` for common SQL script configuration (_**""depends on""**_) - #16530 Improve transaction management for `@Sql` (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3220d467764dc61f14e0ddb122b5dd46517ebe2c","closed","type: documentation,","spring-projects-issues","2014-06-05T11:20:22Z","2019-01-13T06:53:40Z"
"","16455","Eclipse project dependencies override locally declared Gradle dependencies [SPR-11836]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11836](https://jira.spring.io/browse/SPR-11836?redirect=false)** and commented  #### Status Quo  When importing Spring Framework projects into Eclipse via the `import-into-eclipse.sh` script, the ordering of classpath entries in the generated `.classpath` files does not align with the intended dependency management configured in the Gradle build. Specifically, project dependencies often come before dependencies on third-party libraries required for the given project, and this can cause the project not to compile in Eclipse.  #### Concrete Example  The generated `.classpath` file for the `spring-orm-hibernate4` project currently looks like this:  ```xml   	 	 	 	 	 	 	 	 	 	  ```  With this ordering of classpath entries, Hibernate 3 is visible from the `spring-orm` project dependency thereby _shadowing_ the Hibernate 4 dependencies required by the `spring-orm-hibernate4`, and the `spring-orm-hibernate4` project fails to compile as a result.  ---  #### Deliverables  1. [x] Ensure that Eclipse project dependencies come after dependencies on third-party libraries in the generated `.classpath` files.  ---  **Affects:** 4.1 RC1  **Issue Links:** - #17540 Branch 3.2.x has compiler errors when imported into Eclipse on Windows (_**""is depended on by""**_) - #20484 Ensure spring-jcl is used in the generated Eclipse classpath instead of commons-logging  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f2e5e5aa86d827f14754f77666a76da89cfbf8d0, https://github.com/spring-projects/spring-framework/commit/8ee94a439260d727b70c03026e491f231747f00b, https://github.com/spring-projects/spring-framework/commit/e748cf17d9761ff79c435931b620ca4bd7444ea7","closed","type: bug,","spring-projects-issues","2014-05-30T04:12:34Z","2019-01-13T20:59:49Z"
"","16453","Upgrade spring-test integration tests to Hibernate 4 [SPR-11834]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11834](https://jira.spring.io/browse/SPR-11834?redirect=false)** and commented   ---  **Affects:** 4.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4b291c665c202e73f701d6bd978186635122467a","closed","type: task,","spring-projects-issues","2014-05-29T09:07:21Z","2014-07-18T10:16:33Z"
"","16450","Upgrade Eclipse project settings for Java 8 [SPR-11831]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11831](https://jira.spring.io/browse/SPR-11831?redirect=false)** and commented  #### Deliverables  1. [x] Set the `eclipse.jdt` source and target compatibility to 1.8 in `ide.gradle` 2. [x] Update instructions in `import-into-eclipse.sh` to reflect minimum requirements for building against Java 8 with Eclipse/STS    ---  **Affects:** 4.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d46b29e71f783bc21553ed11921cbb0bca51b49c","closed","type: task,","spring-projects-issues","2014-05-29T07:56:22Z","2014-07-18T10:16:43Z"
"","16557","sqlRowSetMetaData ColumnType returns 93 for Types.DATE  [SPR-11940]","**[Saku Ramamoorthy](https://jira.spring.io/secure/ViewProfile.jspa?name=saku7540)** opened **[SPR-11940](https://jira.spring.io/browse/SPR-11940?redirect=false)** and commented  sqlRowSet's getMetaData().getColumnType (columnIndex) returns 93 for DATE Types which is supposed to be 91 according to below javadoc,  http://docs.oracle.com/javase/7/docs/api/constant-values.html#java.sql.Types.DATE   --- No further details from [SPR-11940](https://jira.spring.io/browse/SPR-11940?redirect=false)","closed","status: invalid,","spring-projects-issues","2014-07-02T12:46:19Z","2019-01-12T05:25:43Z"
"","16460","DefaultMessageListenerContainer#doShutdown hangs [SPR-11841]","**[Rüdiger Gründel](https://jira.spring.io/secure/ViewProfile.jspa?name=ruegrue)** opened **[SPR-11841](https://jira.spring.io/browse/SPR-11841?redirect=false)** and commented  We have the situation that the method DefaultMessageListenerContainer#doShutdown hangs which is caused by the call “this.lifecycleMonitor.wait()”. I know that the problem is similar to other once in Jira but my question is the following.  It seems there can be a situation where the “lifecycleMonitor.notifyAll()” is called before “this.lifecycleMonitor.wait()” in DefaultMessageListenerContainer#doShutdown is invoked. In that case, the wait will never return. This is what I think I have observed. Wouldn’t it be better to secure the lifecycleMonitor.wait()by a flag which signalizes if the “wait” has to be called or not. The flag can be set together with the call of notifyAll. So is it guaranteed that in all circumstances the “lifecycleMonitor.notifyAll()” is noticed during the shutdown.  We are using 3.1.1.RELEASE but I the saw the same implementation of DefaultMessageListenerContainer#doShutdown in  4.0.2.RELEASE.  ---  **Affects:** 3.1.1  **Attachments:** - [2015-03-27.08-07-16.threads-dump.txt](https://jira.spring.io/secure/attachment/22732/2015-03-27.08-07-16.threads-dump.txt) (_68.77 kB_) - [ThreadDump.log](https://jira.spring.io/secure/attachment/22052/ThreadDump.log) (_82.41 kB_)  **Issue Links:** - #16409 DefaultMessageListenerContainer hangs on shutdown - #18774 DefaultMessageListenerContainer doesn't shutdown gracefully if long recovery interval is set  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d398bb7c5166f5a4a79d2e2ced5fa1c88b695a5d  2 votes, 6 watchers","closed","in: core,","spring-projects-issues","2014-06-02T05:53:31Z","2019-01-11T22:19:03Z"
"","16867","Web Async responses force concurrentResult.toString() call [SPR-12253]","**[Ryszard Perkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=usultis)** opened **[SPR-12253](https://jira.spring.io/browse/SPR-12253?redirect=false)** and commented  I've been tracking CPU usage of my application and multiple times have I seen in thread dump whole response object string concatenation  (toString() method called) taking a lot of CPU. That string concatenation is forced by using WebAsyncManager:348 logger.debug(""Concurrent result value ["" + concurrentResult + ""]"");  Since it's only for debug it should not be executed for other logging levels.  Pull request provided: https://github.com/spring-projects/spring-framework/pull/652   ---  **Affects:** 3.2.11, 4.0.7, 4.1 GA  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)","closed","type: bug,","spring-projects-issues","2014-09-26T02:55:57Z","2014-10-01T03:11:43Z"
"","16790","java.lang.VerifyError: Bad type on operand stack: Type 'org/springframework/beans/factory/config/ConfigurableBeanFactory' is not assignable to 'java/lang/String' [SPR-12176]","**[Rudi Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=rudi)** opened **[SPR-12176](https://jira.spring.io/browse/SPR-12176?redirect=false)** and commented  Following error happens using Spring 4.1.0.RELEASE when starting webapp in Tomcat 7.0.37. Using Oracle JDK 8u5 in Ubuntu 14.04 64-bit.  -Did not happen when using 4.0.6.RELEASE.- Still happened when using 4.0.7.RELEASE if Tomcat Server configuration in Eclipse WTP is ""unclean"".  ``` 13:25:11.866 ERROR |            |                                                                                                    | host-startStop-1 | o.s.w.c.ContextLoader            | Context initialization failed java.lang.VerifyError: Bad type on operand stack Exception Details:   Location:     org/springframework/context/annotation/ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;Lorg/springframework/cglib/proxy/MethodProxy;)Ljava/lang/Object; @298: invokestatic   Reason:     Type 'org/springframework/beans/factory/config/ConfigurableBeanFactory' (current frame, stack[1]) is not assignable to 'java/lang/String'   Current Frame:     bci: @298     flags: { }     locals: { 'org/springframework/context/annotation/ConfigurationClassEnhancer$BeanMethodInterceptor', 'java/lang/Object', 'java/lang/reflect/Method', '[Ljava/lang/Object;', 'org/springframework/cglib/proxy/MethodProxy', 'org/springframework/beans/factory/config/ConfigurableBeanFactory', 'java/lang/String', 'org/springframework/context/annotation/Scope', top, top, top, 'org/springframework/beans/factory/config/ConfigurableBeanFactory', 'org/springframework/cglib/proxy/MethodProxy', 'java/lang/Object', '[Ljava/lang/Object;', null }     stack: { 'org/springframework/beans/factory/config/ConfigurableBeanFactory', 'org/springframework/beans/factory/config/ConfigurableBeanFactory' }   Bytecode:     0000000: 2a2b b700 043a 052c b800 053a 062c 1206     0000010: b800 07c0 0006 3a07 1907 c600 2719 07b9     0000020: 0008 0100 b200 09a5 001a 1906 b800 0a3a     0000030: 0819 0519 08b9 000b 0200 9900 0719 083a     0000040: 062a 1905 bb00 0c59 b700 0d12 0fb6 0010     0000050: 1906 b600 10b6 0011 3a0e 3a0d 3a0c 0336     0000060: 0f19 0c19 0d19 0eb7 0127 360f 190d 3a0b     0000070: 150f 9900 712a 1905 1906 3a0e 3a0d 3a0c     0000080: 0336 0f19 0c19 0d19 0eb7 0127 360f 190d     0000090: 3a0b 150f 9900 4f19 05bb 000c 59b7 000d     00000a0: 120f b600 1019 06b6 0010 b600 113a 0d3a     00000b0: 0c01 3a0e 1905 190d b801 2d19 0c19 0db9     00000c0: 012e 0200 3a0e 190e 3a08 1908 c100 1499     00000d0: 0006 a700 112a 1908 b600 1519 0519 06b7     00000e0: 0016 b02a 2cb7 0017 9900 7412 182c b600     00000f0: 19b6 001a 9900 25b8 001b 121c 05bd 001d     0000100: 5903 2cb6 001e b600 1f53 5904 2cb6 0020     0000110: 53b8 0021 b900 2202 0019 042b 2d3a 0e3a     0000120: 0d3a 0c01 3a0f 1905 190b b801 2d19 0519     0000130: 0bb8 0132 3a10 190c 190d 190e b600 233a     0000140: 0fa7 0010 3a11 1905 1910 b801 3257 1911     0000150: bf19 0519 10b8 0132 5719 0fb0 1905 1906     0000160: b900 0b02 0036 0815 0899 000d 1905 1906     0000170: 03b9 0024 0300 1905 1906 3a0d 3a0c 013a     0000180: 0e19 0519 0db8 012d 190c 190d b901 2e02     0000190: 003a 0e19 0e3a 0915 0899 000d 1905 1906     00001a0: 04b9 0024 0300 1909 b03a 0a15 0899 000d     00001b0: 1905 1906 04b9 0024 0300 190a bf          Exception Handler Table:     bci [310, 324] => handler: 324     bci [359, 407] => handler: 425     bci [425, 427] => handler: 425   Stackmap Table:     append_frame(@65,Object[#94],Object[#172],Object[#96])     full_frame(@213,{Object[#98],Object[#97],Object[#162],Object[#100],Object[#176],Object[#94],Object[#172],Object[#96],Object[#97],Top,Top,Object[#94],Object[#94],Object[#172],Object[#97],Integer},{})     full_frame(@227,{Object[#98],Object[#97],Object[#162],Object[#100],Object[#176],Object[#94],Object[#172],Object[#96],Top,Top,Top,Object[#94],Object[#97],Object[#97],Object[#97],Integer},{})     same_frame(@281)     full_frame(@324,{Object[#98],Object[#97],Object[#162],Object[#100],Object[#176],Object[#94],Object[#172],Object[#96],Top,Top,Top,Object[#94],Object[#176],Object[#97],Object[#100],Object[#97],Object[#172]},{Object[#104]})     same_frame(@337)     full_frame(@348,{Object[#98],Object[#97],Object[#162],Object[#100],Object[#176],Object[#94],Object[#172],Object[#96],Top,Top,Top,Object[#94],Object[#97],Object[#97],Object[#97],Integer},{})     full_frame(@374,{Object[#98],Object[#97],Object[#162],Object[#100],Object[#176],Object[#94],Object[#172],Object[#96],Integer,Top,Top,Object[#94],Object[#97],Object[#97],Object[#97],Integer},{})     full_frame(@422,{Object[#98],Object[#97],Object[#162],Object[#100],Object[#176],Object[#94],Object[#172],Object[#96],Integer,Object[#97],Top,Object[#94],Object[#94],Object[#172],Object[#97],Integer},{})     full_frame(@425,{Object[#98],Object[#97],Object[#162],Object[#100],Object[#176],Object[#94],Object[#172],Object[#96],Integer,Top,Top,Object[#94],Object[#97],Object[#97],Object[#97],Integer},{Object[#104]})     full_frame(@442,{Object[#98],Object[#97],Object[#162],Object[#100],Object[#176],Object[#94],Object[#172],Object[#96],Integer,Top,Object[#104],Object[#94],Object[#97],Object[#97],Object[#97],Integer},{})  	at org.springframework.context.annotation.ConfigurationClassEnhancer.(ConfigurationClassEnhancer.java:67) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:372) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:259) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:265) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:126) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:462) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:403) ~[spring-web-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306) ~[spring-web-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:106) [spring-web-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4797) [catalina.jar:7.0.37] 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5291) [catalina.jar:7.0.37] 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) [catalina.jar:7.0.37] 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559) [catalina.jar:7.0.37] 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549) [catalina.jar:7.0.37] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_05] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_05] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_05] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_05] 13:25:11.876 ERROR |            |                                                                                                    | host-startStop-1 | o.a.c.c.C.[.[.[/]                | Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener java.lang.VerifyError: Bad type on operand stack Exception Details:   Location:     org/springframework/context/annotation/ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;Lorg/springframework/cglib/proxy/MethodProxy;)Ljava/lang/Object; @298: invokestatic   Reason:     Type 'org/springframework/beans/factory/config/ConfigurableBeanFactory' (current frame, stack[1]) is not assignable to 'java/lang/String'   Current Frame:     bci: @298     flags: { }     locals: { 'org/springframework/context/annotation/ConfigurationClassEnhancer$BeanMethodInterceptor', 'java/lang/Object', 'java/lang/reflect/Method', '[Ljava/lang/Object;', 'org/springframework/cglib/proxy/MethodProxy', 'org/springframework/beans/factory/config/ConfigurableBeanFactory', 'java/lang/String', 'org/springframework/context/annotation/Scope', top, top, top, 'org/springframework/beans/factory/config/ConfigurableBeanFactory', 'org/springframework/cglib/proxy/MethodProxy', 'java/lang/Object', '[Ljava/lang/Object;', null }     stack: { 'org/springframework/beans/factory/config/ConfigurableBeanFactory', 'org/springframework/beans/factory/config/ConfigurableBeanFactory' }   Bytecode:     0000000: 2a2b b700 043a 052c b800 053a 062c 1206     0000010: b800 07c0 0006 3a07 1907 c600 2719 07b9     0000020: 0008 0100 b200 09a5 001a 1906 b800 0a3a     0000030: 0819 0519 08b9 000b 0200 9900 0719 083a     0000040: 062a 1905 bb00 0c59 b700 0d12 0fb6 0010     0000050: 1906 b600 10b6 0011 3a0e 3a0d 3a0c 0336     0000060: 0f19 0c19 0d19 0eb7 0127 360f 190d 3a0b     0000070: 150f 9900 712a 1905 1906 3a0e 3a0d 3a0c     0000080: 0336 0f19 0c19 0d19 0eb7 0127 360f 190d     0000090: 3a0b 150f 9900 4f19 05bb 000c 59b7 000d     00000a0: 120f b600 1019 06b6 0010 b600 113a 0d3a     00000b0: 0c01 3a0e 1905 190d b801 2d19 0c19 0db9     00000c0: 012e 0200 3a0e 190e 3a08 1908 c100 1499     00000d0: 0006 a700 112a 1908 b600 1519 0519 06b7     00000e0: 0016 b02a 2cb7 0017 9900 7412 182c b600     00000f0: 19b6 001a 9900 25b8 001b 121c 05bd 001d     0000100: 5903 2cb6 001e b600 1f53 5904 2cb6 0020     0000110: 53b8 0021 b900 2202 0019 042b 2d3a 0e3a     0000120: 0d3a 0c01 3a0f 1905 190b b801 2d19 0519     0000130: 0bb8 0132 3a10 190c 190d 190e b600 233a     0000140: 0fa7 0010 3a11 1905 1910 b801 3257 1911     0000150: bf19 0519 10b8 0132 5719 0fb0 1905 1906     0000160: b900 0b02 0036 0815 0899 000d 1905 1906     0000170: 03b9 0024 0300 1905 1906 3a0d 3a0c 013a     0000180: 0e19 0519 0db8 012d 190c 190d b901 2e02     0000190: 003a 0e19 0e3a 0915 0899 000d 1905 1906     00001a0: 04b9 0024 0300 1909 b03a 0a15 0899 000d     00001b0: 1905 1906 04b9 0024 0300 190a bf          Exception Handler Table:     bci [310, 324] => handler: 324     bci [359, 407] => handler: 425     bci [425, 427] => handler: 425   Stackmap Table:     append_frame(@65,Object[#94],Object[#172],Object[#96])     full_frame(@213,{Object[#98],Object[#97],Object[#162],Object[#100],Object[#176],Object[#94],Object[#172],Object[#96],Object[#97],Top,Top,Object[#94],Object[#94],Object[#172],Object[#97],Integer},{})     full_frame(@227,{Object[#98],Object[#97],Object[#162],Object[#100],Object[#176],Object[#94],Object[#172],Object[#96],Top,Top,Top,Object[#94],Object[#97],Object[#97],Object[#97],Integer},{})     same_frame(@281)     full_frame(@324,{Object[#98],Object[#97],Object[#162],Object[#100],Object[#176],Object[#94],Object[#172],Object[#96],Top,Top,Top,Object[#94],Object[#176],Object[#97],Object[#100],Object[#97],Object[#172]},{Object[#104]})     same_frame(@337)     full_frame(@348,{Object[#98],Object[#97],Object[#162],Object[#100],Object[#176],Object[#94],Object[#172],Object[#96],Top,Top,Top,Object[#94],Object[#97],Object[#97],Object[#97],Integer},{})     full_frame(@374,{Object[#98],Object[#97],Object[#162],Object[#100],Object[#176],Object[#94],Object[#172],Object[#96],Integer,Top,Top,Object[#94],Object[#97],Object[#97],Object[#97],Integer},{})     full_frame(@422,{Object[#98],Object[#97],Object[#162],Object[#100],Object[#176],Object[#94],Object[#172],Object[#96],Integer,Object[#97],Top,Object[#94],Object[#94],Object[#172],Object[#97],Integer},{})     full_frame(@425,{Object[#98],Object[#97],Object[#162],Object[#100],Object[#176],Object[#94],Object[#172],Object[#96],Integer,Top,Top,Object[#94],Object[#97],Object[#97],Object[#97],Integer},{Object[#104]})     full_frame(@442,{Object[#98],Object[#97],Object[#162],Object[#100],Object[#176],Object[#94],Object[#172],Object[#96],Integer,Top,Object[#104],Object[#94],Object[#97],Object[#97],Object[#97],Integer},{})  	at org.springframework.context.annotation.ConfigurationClassEnhancer.(ConfigurationClassEnhancer.java:67) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:372) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:259) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:265) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:126) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:462) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:403) ~[spring-web-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306) ~[spring-web-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:106) ~[spring-web-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4797) [catalina.jar:7.0.37] 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5291) [catalina.jar:7.0.37] 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) [catalina.jar:7.0.37] 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559) [catalina.jar:7.0.37] 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549) [catalina.jar:7.0.37] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_05] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_05] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_05] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_05] 13:25:11.877 ERROR |            |                                                                                                    | host-startStop-1 | o.a.c.c.StandardContext          | Error listenerStart 13:25:11.889 ERROR |            |                                                                                                    | host-startStop-1 | o.a.c.c.StandardContext          | Context [] startup failed due to previous errors 13:25:11.923 WARN  |            |                                                                                                    | host-startStop-1 | ationConfigWebApplicationContext | Exception thrown from ApplicationListener handling ContextClosedEvent java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: Root WebApplicationContext: startup date [Thu Sep 11 13:25:05 WIB 2014]; root of context hierarchy 	at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:344) [spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331) [spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:869) [spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:836) [spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.context.ContextLoader.closeWebApplicationContext(ContextLoader.java:579) [spring-web-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.context.ContextLoaderListener.contextDestroyed(ContextLoaderListener.java:115) [spring-web-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.apache.catalina.core.StandardContext.listenerStop(StandardContext.java:4837) [catalina.jar:7.0.37] 	at org.apache.catalina.core.StandardContext.__stop(StandardContext.java:5483) [catalina.jar:7.0.37] 	at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java) [catalina.jar:7.0.37] 	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) [catalina.jar:7.0.37] 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:160) [catalina.jar:7.0.37] 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559) [catalina.jar:7.0.37] 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549) [catalina.jar:7.0.37] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_05] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_05] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_05] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_05] 13:25:11.925 WARN  |            |                                                                                                    | host-startStop-1 | ationConfigWebApplicationContext | Exception thrown from LifecycleProcessor on context close java.lang.IllegalStateException: LifecycleProcessor not initialized - call 'refresh' before invoking lifecycle methods via the context: Root WebApplicationContext: startup date [Thu Sep 11 13:25:05 WIB 2014]; root of context hierarchy 	at org.springframework.context.support.AbstractApplicationContext.getLifecycleProcessor(AbstractApplicationContext.java:357) [spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:877) [spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:836) [spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.context.ContextLoader.closeWebApplicationContext(ContextLoader.java:579) [spring-web-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.context.ContextLoaderListener.contextDestroyed(ContextLoaderListener.java:115) [spring-web-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.apache.catalina.core.StandardContext.listenerStop(StandardContext.java:4837) [catalina.jar:7.0.37] 	at org.apache.catalina.core.StandardContext.__stop(StandardContext.java:5483) [catalina.jar:7.0.37] 	at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java) [catalina.jar:7.0.37] 	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) [catalina.jar:7.0.37] 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:160) [catalina.jar:7.0.37] 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559) [catalina.jar:7.0.37] 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549) [catalina.jar:7.0.37] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_05] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_05] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_05] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_05] ```  Log: (note that it crashes when loading the `command-scanner-context.xml`, but not before that)  ``` Loading XML bean definitions from ServletContext resource [/WEB-INF/shell-context.xml] Loading XML bean definitions from class path resource [META-INF/shell/command-context.xml] Loading XML bean definitions from class path resource [META-INF/shell/ssh-command-context.xml] Loading XML bean definitions from class path resource [META-INF/shell/wrapper-context.xml] Loading XML bean definitions from class path resource [META-INF/shell/command-scanner-context.xml] >> then error ```  On proper startup after the above log should be:  ``` org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor: JSR-330 'javax.inject.Inject' annotation found and supported for autowiring ```    ---  **Affects:** 4.1 GA  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2014-09-10T23:40:07Z","2019-01-12T05:25:22Z"
"","17121","Synchronize message sending in HTTP SockJS sessions with request initialization [SPR-12516]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12516](https://jira.spring.io/browse/SPR-12516?redirect=false)** and commented  AbstractHttpSockJsSession adds messages to be sent to an internal cache. This should be synchronized with request initialization (either initial or subsequent, long polling request). Not doing so means that under some circumstances a message may not get flushed until another message is written.   ---  **Affects:** 4.0.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9cb1569e67a739a207e0e6d5cb34c23aa03801ad, https://github.com/spring-projects/spring-framework/commit/b796c1e87eea10bb6ddd7dc5c3b6b1befa3806a7  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)","closed","type: bug,","spring-projects-issues","2014-12-07T11:46:03Z","2014-12-09T02:49:30Z"
"","17103","Check the user for a SockJS request [SPR-12497]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12497](https://jira.spring.io/browse/SPR-12497?redirect=false)** and commented  Add a simple check to ensure the user associated with the target SockJS session for a request is the same as the user associated with the request.   ---  **Affects:** 4.0.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ac5c361688fb5ae01ddd763ecc750ded474163c5, https://github.com/spring-projects/spring-framework/commit/dc5b5ca8ee09c890352f89b2dae58bc0132d6545  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-12-02T09:10:25Z","2014-12-09T02:49:20Z"
"","17033","Enable use of Servlet 3.1 Async I/O in SockJS server [SPR-12427]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12427](https://jira.spring.io/browse/SPR-12427?redirect=false)** and commented   ---  **Affects:** 4.1.2  **Issue Links:** - [SEC-2786](https://jira.spring.io/browse/SEC-2786) Allow use of Spring Security filters in applications that make use of Servlet 3.1 Async I/O  (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ab629a0e26d892404e8d29e74c13f97b8d0b4d34, https://github.com/spring-projects/spring-framework/commit/43d93712f1a827cf00a9b097dd546320ce841692  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-11-12T13:58:20Z","2020-04-02T22:45:13Z"
"","17006","UriComponentsBuilder only normalizes paths with two consecuitive '/' but not more than two [SPR-12398]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12398](https://jira.spring.io/browse/SPR-12398?redirect=false)** and commented  For example a path such as ""/foo//bar"" becomes ""/foo/bar"" in the resulting URL while ""/foo///bar"" becomes ""/foo//bar"".   ---  **Affects:** 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d8941ca098b14e53b7786a66fd268d3459791336","closed","type: bug,","spring-projects-issues","2014-10-30T06:03:37Z","2014-11-17T06:42:35Z"
"","17003","[doc] Add section on SockJsClient [SPR-12395]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12395](https://jira.spring.io/browse/SPR-12395?redirect=false)** and commented   ---  **Affects:** 4.1.1","closed","status: invalid,","spring-projects-issues","2014-10-29T15:33:20Z","2019-01-12T05:25:09Z"
"","16989","Support Netty as the underlying HTTP client for the RestTemplate [SPR-12381]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12381](https://jira.spring.io/browse/SPR-12381?redirect=false)** and commented   ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e1207571fc7ccd26e2dbafa4a4f0d5b78cb12104","closed","type: enhancement,","spring-projects-issues","2014-10-27T09:31:47Z","2014-11-17T06:42:33Z"
"","16959","Directory traversal with static resource handling (CVE-2014-3625) [SPR-12354]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12354](https://jira.spring.io/browse/SPR-12354?redirect=false)** and commented  This is related to the ""directory traversal"" report [CVE-2014-3625](http://www.pivotal.io/security/cve-2014-3625).   ---  **Affects:** 3.2.11, 4.0.7, 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1214624265207fcdf5ccee39c0db88a110fb9b6f, https://github.com/spring-projects/spring-framework/commit/379d2e6da0cf4e1d8009111920b7df8e40496e1f, https://github.com/spring-projects/spring-framework/commit/3f68cd633f03370d33c2603a6496e81273782601, https://github.com/spring-projects/spring-framework/commit/161d3e3049f129e211f68a4e94b544e0f0d8384d, https://github.com/spring-projects/spring-framework/commit/9beae9ae4226c45cd428035dae81214439324676, https://github.com/spring-projects/spring-framework/commit/9cef8e3001ddd61c734281a7556efd84b6cc2755  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)","closed","type: bug,","spring-projects-issues","2014-10-20T08:46:25Z","2014-11-17T06:42:36Z"
"","16926","Allow clientInboundChannel interceptors to take advantage of message mutability [SPR-12321]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12321](https://jira.spring.io/browse/SPR-12321?redirect=false)** and commented  Currently the StompSubProtocolHandler takes advantage of message mutability. When it parses a WebSocket message, it leaves the resulting Spring Message mutable and then further updates its headers (e.g. adding a user header, attaching a session id and attributes, etc) and then makes the message immutable prior to sending it on the clientInboundChannel.  This means that registered channel interceptors cannot take advantage of message mutability and must re-create the message, even though technically until the message is sent it is not exposed to concurrent access and can be modified safely.   ---  **Affects:** 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/687955a70412530a465f180f4b36c3a4e9b274bb","closed","type: enhancement,","spring-projects-issues","2014-10-10T10:13:31Z","2014-11-17T06:42:34Z"
"","16868","Update default SockJS CDN [SPR-12254]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12254](https://jira.spring.io/browse/SPR-12254?redirect=false)** and commented  The SockJS CDN is getting retired. We need to update the default SockJS URL in AbstractSockJsService.  https://github.com/sockjs/sockjs-client/issues/198   ---  **Affects:** 4.0.7, 4.1 GA  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-09-26T05:21:46Z","2014-11-12T06:37:51Z"
"","16857","Create builder for Jackson ObjectMapper [SPR-12243]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12243](https://jira.spring.io/browse/SPR-12243?redirect=false)** and commented  This would be the equivalent of the Jackson2ObjectMapperFactoryBean for use in Java configuration providing convenience setters for specific features (as the factory bean does) and also a place for providing default values.  ---  **Affects:** 4.1 GA  **Issue Links:** - #16510 Set Jackson FAIL_ON_UNKNOWN_PROPERTIES property to false by default (_**""is depended on by""**_) - #16793 Set Jackson DEFAULT_VIEW_INCLUSION property to false by default (_**""is depended on by""**_) - #11815 Integrate Jackson `@JsonView` - #16407 Support Jackson2 based XML serialization/deserialization  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d778037f40651e1cd5b65e3fbbe50ff96444cd2f, https://github.com/spring-projects/spring-framework/commit/20a8416c2e94efba3e6fa72de1b3d3618d063529, https://github.com/spring-projects/spring-framework/commit/4e24d66ff70b8dc6e2184b2f723a57e387da523d","closed","type: enhancement,","spring-projects-issues","2014-09-24T05:05:08Z","2019-01-13T05:44:42Z"
"","16826","HTTP Streaming and Server-Sent Events (SSE) [SPR-12212]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12212](https://jira.spring.io/browse/SPR-12212?redirect=false)** and commented  Spring 4 SockJS support already provides an SEE transport that can be used even in browsers that don't support websocket.  The purpose of this ticket is to provide explicit support for [Server-Sent Events](http://www.w3.org/TR/2009/WD-eventsource-20090423/) in `@RequestMapping` methods in addition to the Callable and DeferredResult return types.  At present Callable and DeferredResult provide a simple way for a controller to produce a return value asynchronously once and then resume processing. This works for any annotated controller method and supports the full range of options, i.e. `@ResponseBody` or view resolution, handler interception, exception resolution, etc.  For SSE we'll need to support returning multiple values at different times. This will likely result very specifically in an HttpMessageConverter writing each value to the response.  ---  **Affects:** 4.1 GA  **Sub-tasks:** - #17271 Add documentation for Server-Sent Events support - #17532 Add onTimeout() and onCompletion() callbacks to ResponseBodyEmitter  **Issue Links:** - #16822 Support SSE / event-stream (_**""is duplicated by""**_) - #18994 Return type implementing DeferredResult is rejected with exception - #18618 RxJava Observable/Single and Reactor Flux/Mono as Spring MVC handler method return types - #17428 HTTP Streaming Directly to the OutputStream - [INT-3625](https://jira.spring.io/browse/INT-3625) Support for Server-Sent Events (SSE) - #17209 Document how HandlerInterceptor should differentiate an ASYNC dispatch - #17695 Add request timeout to ResponseBodyEmitter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/935ffc5827554d593e6fa8c148b4f3630dc2d918, https://github.com/spring-projects/spring-framework/commit/a32b5e61d0b5dff9c09cc3c7d7b8e5e68ac69ae5  5 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2014-09-17T06:24:04Z","2019-01-11T17:26:25Z"
"","16745","Update MVC namespace to match improvements made to the Java config in RC2 [SPR-12129]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12129](https://jira.spring.io/browse/SPR-12129?redirect=false)** and commented  Some useful improvements were made to the Java config for RC2 as part of #16598. For example the registration of CachingResourceResolver/Transformer, PathResourceResolver is automatically filled in if not done by the application. Also the registration of a VersionResourceResolver is aided through the addXxxVersionStrategy methods.  ---  **Affects:** 4.1 RC2  **Issue Links:** - #16598 Enhance ResourceHandlerRegistration API for resource transformers/resolvers","closed","type: enhancement,","spring-projects-issues","2014-08-27T12:05:20Z","2019-01-11T17:23:42Z"
"","16733","Update documentation to describe the resource handling additions in 4.1 [SPR-12117]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12117](https://jira.spring.io/browse/SPR-12117?redirect=false)** and commented  We have 16.17.7 ""Serving of Resources"" as part of configuring Spring MVC. That should be updated to begin with and possible another section added somewhere else to describe the approach with resource handling, versioning of resources, etc.  The Javadoc of ResourceHttpRequestHandler needs to be updated. It contains advice on adding a version string to the resource URL.   ---  **Affects:** 4.1 RC2","closed","in: web,","spring-projects-issues","2014-08-25T06:44:01Z","2014-09-04T05:31:20Z"
"","16729","Update reference for JSONP support [SPR-12113]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12113](https://jira.spring.io/browse/SPR-12113?redirect=false)** and commented   ---  **Affects:** 4.1 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/06f1f495c26bf2e6100c29fdf0c3cd6d19fa8240","closed","in: web,","spring-projects-issues","2014-08-21T14:20:36Z","2014-09-04T05:31:16Z"
"","16632","Restore method signature for ViewControllerRegistration.setViewName [SPR-12016]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12016](https://jira.spring.io/browse/SPR-12016?redirect=false)** and commented  The return type for ViewControllerRegistration was changed from void to ViewControllerRegistration which prevents Boot from working with both 4.0.x and 4.1 .   ---  **Affects:** 4.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e41b14449e443f0810267679267c5618d7c546d8","closed","type: bug,","spring-projects-issues","2014-07-21T12:09:08Z","2014-08-15T01:52:46Z"
"","16625","Further updates to MockMvcConfigurer SPI [SPR-12009]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-12009](https://jira.spring.io/browse/SPR-12009?redirect=false)** and commented  A reminder to take care of the remaining comments under #16122.  ---  **Affects:** 4.1 RC1  **Issue Links:** - #16122 Make it easy to extend MockMvc builders with additional syntax","closed","type: task,","spring-projects-issues","2014-07-18T09:31:10Z","2019-01-11T18:21:07Z"
"","16614","Add Groovy markup templating support to the MVC config [SPR-11998]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11998](https://jira.spring.io/browse/SPR-11998?redirect=false)** and commented  Since we now have support for view resolution in the MVC config, we should add support for Groovy Markup templates alongside the other built-in templating technologies.  ---  **Affects:** 4.0.6  This issue is a sub-task of #16411  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/80f4ea13c753507c8a201a9c72a634dd5c195286","closed","type: task,","spring-projects-issues","2014-07-15T11:51:52Z","2019-01-11T22:22:54Z"
"","16605","Update documentation with MVC config view resolution examples [SPR-11989]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11989](https://jira.spring.io/browse/SPR-11989?redirect=false)** and commented  ---  **Affects:** 4.1 RC1  This issue is a sub-task of #11753  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7412d43acd74505d07796b9bf991f3945ba35eda","closed","type: task,","spring-projects-issues","2014-07-14T05:46:48Z","2019-01-11T22:23:38Z"
"","16600","StompEncoder should never produce more than one 'content-length' header [SPR-11984]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11984](https://jira.spring.io/browse/SPR-11984?redirect=false)** and commented  The `StompEncoder` writes a ""content-length"" header for STOMP frames that have a body. If however the message already contains such a header the result is two such headers in the serialized output.  In most cases an application sends messages through SimpMessagingTemplate or by returning from an `@MessageMapping` method. In both cases the content-length header is not set so this is unlikely to affect applications.   ---  **Affects:** 4.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b31888066148be78e1e60a4615dc5c09c4524076","closed","type: bug,","spring-projects-issues","2014-07-11T07:09:16Z","2014-07-18T10:16:38Z"
"","16548","Improve logic for removing subscriptions from DefaultSubscriptionRegistry [SPR-11930]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11930](https://jira.spring.io/browse/SPR-11930?redirect=false)** and commented  When removing a session, rather than a destination pattern based search, we should search for occurrences of the session id in the destination cache. It is arguably a more fail-safe way to guarantee the session is completely removed from the cache and would probably be more efficient.  A similar improvement could be made for individual subscriptions. When removing a subscription, search for occurrences of the session id in the destination cache, and then check if the subscription id is present.  In other words complete ignore destinations and focus on removing session and subscription ids.  ---  **Affects:** 4.0.5  **Issue Links:** - #16549 DefaultSubscriptionRegistry does not update destination cache when subscribed twice to same destination  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5092414842f8ee5e1ea240b576795502d44ba5fb, https://github.com/spring-projects/spring-framework/commit/ce20abde51ac52dde2f318e28004af80cca886fe  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2014-06-30T10:07:09Z","2019-01-11T22:20:01Z"
"","16537","Prevent accumulation of cancelled SockJS heartbeat tasks [SPR-11918]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11918](https://jira.spring.io/browse/SPR-11918?redirect=false)** and commented  From the Javadoc of `java.util.concurrent.ScheduledThreadPoolExecutor`:  ""... a cancelled task is not automatically removed from the work queue until its delay elapses. While this enables further inspection and monitoring, it may also cause unbounded retention of cancelled tasks. To avoid this, set setRemoveOnCancelPolicy to true, which causes tasks to be immediately removed from the work queue at time of cancellation.""  Under sustained high load, a large number of tasks can accumulate leading to the ""unbounded retention of cancelled tasks"" mentioned in the Javadoc.  Note that when using STOMP messaging, after STOMP-level heartbeats are successfully negotiated, the SockJS heartbeats are suppressed. Hence this is only an issue if using the simple broker, or not using STOMP, or using a STOMP client that doesn't support heartbeats (e.g. simple test client) or has them explicitly disabled through the STOMP CONNECT frame header.  ---  **Affects:** 4.0.5  **Issue Links:** - #16852 WebSocketMessageBrokerConfigurationSupport requiring JDK 7+ due to setRemoveOnCancelPolicy","closed","type: bug,","spring-projects-issues","2014-06-25T10:51:17Z","2019-01-11T22:20:17Z"
"","16535","Fix session initialization concurrency issue in SockJS session implementations [SPR-11916]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11916](https://jira.spring.io/browse/SPR-11916?redirect=false)** and commented  There is a general assumption in WebSocket servers that applications must synchronize sending messages through the session (and the STOMP messaging support takes care of that).  The same assumption also applies when using SockJS, which is just another `WebSocketSession` implementation. However, load testing with a high number of concurrent users using the new SockJS client #15423 has revealed a few cases specific to SockJS.  For example when the SockJS session relies on an actual WebSocket it must ensure the application WebSocketHandler is notified of the open session before sending the open frame. Otherwise it is technically possible for the WebSocketHandler to receive messages before the `afterConnectionEstablished` callback.  The same applies when the SockJS session relies on HTTP long polling except in this case there is further contention not just among application threads sending messages but also between those and periodic long polling requests from the client to resume receiving messages.  ---  **Affects:** 4.0.5","closed","type: bug,","spring-projects-issues","2014-06-25T10:35:01Z","2019-01-11T22:20:15Z"
"","16519","Bean Validation invocation API for use with individual values and constraints [SPR-11900]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11900](https://jira.spring.io/browse/SPR-11900?redirect=false)** and commented  The logic in MethodValidationInterceptor is pretty useful. However it is currently not easy to use if not in the context of AOP method interception. I'd like to be able to use it for invoking an `@MVC` HandlerMethod with the ability to validate method arguments first and then the method return value as a separate step.  ---  **Affects:** 4.0.5  **Issue Links:** - #15017 Random results for JSR-303 method constraint validation on generically typed methods - #18007 `@Validated` support on Iterables (and implementors) - #19182 Validate values in top-level Map parameters  10 votes, 12 watchers","open","has: votes-jira,","spring-projects-issues","2014-06-23T10:58:09Z","2020-08-24T17:39:27Z"
"","16479","Improve CssLinkResourceTransformer to only update links to relative resources [SPR-11860]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11860](https://jira.spring.io/browse/SPR-11860?redirect=false)** and commented  We should only update links that point to resources we serve. The CssLinkResourceTransformer should have a check that excludes links that are not relative -- i.e. either links that don't start with ""/"" or links that start with a scheme. The scheme could be as simple as looking for the first "":"" and then ensuring the resulting substring does not contain any ""/"". This is very similar to  a check added recently to StringUtils.cleanPath.  ---  **Affects:** 4.1 RC1  This issue is a sub-task of #16420  **Issue Links:** - #16420 Enhance ResourceHttpRequestHandler with ResourceTransformer strategy  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/72baa9bf2741b599ed1d848521e167e644ab7fb5","closed","type: task,","spring-projects-issues","2014-06-09T14:09:29Z","2019-01-11T22:17:37Z"
"","16414","Improve prefix detection in StringUtils.cleanPath [SPR-11793]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11793](https://jira.spring.io/browse/SPR-11793?redirect=false)** and commented  Currently cleanPath stops at the first semicolon assuming a protocol prefixed path (e.g. `""file:core/../core/io/Resource.class""`). This is a bit too simple since technically a semicolon is also allowed in a directory name, even if unusual.   ---  **Affects:** 3.2.8, 4.0.4  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-05-15T14:24:40Z","2014-05-20T08:05:02Z"
"","16411","Support Groovy markup templating in Spring MVC [SPR-11789]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11789](https://jira.spring.io/browse/SPR-11789?redirect=false)** and commented  Groovy 2.3 includes a new html markup templating choice. See [GROOVY-6596](http://jira.codehaus.org/browse/GROOVY-6596) and linked blog posts.  Unlike velocity/freeamaker this is groovy DSL, which means the markup is more compact and readable. Hence it represents a unique alternative.  ---  **Affects:** 4.0.4  **Sub-tasks:** - #16614 Add Groovy markup templating support to the MVC config  **Issue Links:** - #17000 Support Groovy Markup Template in spring-context-support  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2014-05-15T11:11:06Z","2019-01-11T21:12:47Z"
"","16390","Protect against security exploits via system identifier in DTD declaration [SPR-11768]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11768](https://jira.spring.io/browse/SPR-11768?redirect=false)** and commented  A DTD declaration contains a system identifier, which can be exploited for example to scan for valid URLs gauged by the response time (quick response=valid, slower response=not valid) or can potentially be further combined with other vulnerabilities where simply accessing a URL can have side effects.  Example DTD declaration:  ```xml  ```    ---  **Affects:** 3.2.8, 4.0.4  **Attachments:** - [SPR-11768.patch](https://jira.spring.io/secure/attachment/22006/SPR-11768.patch) (_13.66 kB_)  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: bug,","spring-projects-issues","2014-05-08T08:16:33Z","2019-01-14T05:16:29Z"
"","16375","Path matching options in MVC Java/XML config should apply to all handler mappings [SPR-11753]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11753](https://jira.spring.io/browse/SPR-11753?redirect=false)** and commented  The MVC Java config and namespace now provide patch matching options as [described in the reference](http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/mvc.html#mvc-config-path-matching).  Currently the UrlPathHelper and PathMatcher are only applied to the RequestMappingHandlerMapping. However the ViewController registry and the resource handler mappings, as well as any other future ""controller"" registries (for example see #16168) arguably should share the same centrally configured patch matching options out of the box.  ---  **Affects:** 4.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/80a16c6d10a5ede0c32a3fdfb842e316715e52f7","closed","type: enhancement,","spring-projects-issues","2014-05-02T06:56:32Z","2019-01-11T21:17:35Z"
"","16374","Provide builders for HttpEntity and ResponseEntity [SPR-11752]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-11752](https://jira.spring.io/browse/SPR-11752?redirect=false)** and commented  This ticket is to explore the idea of making it even more convenient to prepare an `HttpEntity` for use with the `RestTemplate` or a `ResponseEntity` to be returned from a controller method than it currently is.  To start such builders can help by narrowing the choices of headers for client vs server-side and also provide factory methods for specific common request and response types.  For example:  ```java ResponseEntityBuilder.created204(entity)    .setLocation(uriComponentsBuilder).setEtag(""c180de84f991g8"")    .build() ```  ```java HttpEntityBuilder.forContent(body, contentType, acceptType)     .setIfMatch(""737060cd8c284d8af7ad3082f209582d"")     .build() ```  In both the factory methods determine the request/response body and status (for server) with all subsequent setters focused on setting headers.  Note the discussion for this ticket started under #16220.  ---  **Affects:** 4.0.4  **Issue Links:** - #18779 ResponseEntity should allow the usage of unassigned HTTP status codes - #16220 Simple creation of HttpHeaders for single header - #19423 Add PATCH HTTP operation to RestTemplate - #16686 Consider adding static notFound() builder method to ResponseEntity - #16728 Consider adding static badRequest() builder method to ResponseEntity  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f6fbdafb6a5b364bc2538b4f05a85fcc9be9fc51, https://github.com/spring-projects/spring-framework/commit/81ba3b33f67316e1a887676d6602a167548ba23d, https://github.com/spring-projects/spring-framework/commit/0499fcbeb29c5f1ffd70d3adad2ec2edfc194a3f, https://github.com/spring-projects/spring-framework/commit/eb65a37f4b690ba26b04cc8ba2be0a74ea402bca  1 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2014-05-02T06:17:31Z","2019-01-11T21:17:31Z"
"","16528","@Async Supporting ListenableFuture [SPR-11909]","**[Ronald R. DiFrango](https://jira.spring.io/secure/ViewProfile.jspa?name=difranr)** opened **[SPR-11909](https://jira.spring.io/browse/SPR-11909?redirect=false)** and commented  It would be nice if via the `@Async`/`@EnableAsync` annotations or via start-up configuration that instead of AsyncExecutionInterceptor calling executor.submit(), it would executor.submitListenable() provided the TaskExecutor supports it.  ---  **Affects:** 4.0.5  **Issue Links:** - #16708 `@Async` Supporting ListenableFuture not applied with AspectJ  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/46dc07a005472cca8fb34468ad29cb043f7f2769","closed","type: enhancement,","spring-projects-issues","2014-06-24T19:11:35Z","2019-01-13T05:48:23Z"
"","16843","Explicitly release rolled-back database savepoints during (long-running) transaction [SPR-12228]","**[Roman Konoval](https://jira.spring.io/secure/ViewProfile.jspa?name=rkonoval)** opened **[SPR-12228](https://jira.spring.io/browse/SPR-12228?redirect=false)** and commented  When rollback of nested transaction happens savepoint is cleared in `AbstractTransactionStatus` and `ROLLBACK TO SAVEPOINT` is executed against database but savepoint in not released in database. This leads to leak of savepoint. If very few nested transactions fail in one outer transaction this may be unnoticed as savepoints are release on outer transaction end. But when large number of nested transactions are rolled back this is visible. On idle postgres 9.1.13 with default settings about 10k rollbacks on nested transaction exhaust memory dedicated for storing locks.   ---  **Affects:** 3.2.11, 4.0.7, 4.1 GA","closed","type: enhancement,","spring-projects-issues","2014-09-20T03:27:47Z","2014-10-01T03:11:51Z"
"","16471","@Autowired Collection beans; behaves differently in beans and tests [SPR-11852]","**[Rodrigo Witzel](https://jira.spring.io/secure/ViewProfile.jspa?name=rwitzel)** opened **[SPR-11852](https://jira.spring.io/browse/SPR-11852?redirect=false)** and commented  When using Java-based configuration the injection of something like ``` `@Autowired` Collection\ bees;  ``` behaves differently in beans and tests. A test case is attached.  Details of the test scenario: The interface B extends interface A. There are two beans that implement B. The behaviour depends on the return value of the bean producing methods - somewhat unexpected for me.  Just in case the observed behaviour is not a bug: Could you give me the section in the reference documentation where the behaviour is explained? I am interested especially in the relationship between the return value of the bean producing methods and the search for candidates to autowire by type.  Thanks in advance Rod ```    ---  **Affects:** 4.0.5  **Attachments:** - [test-autowiring-bean-collector.zip](https://jira.spring.io/secure/attachment/22063/test-autowiring-bean-collector.zip) (_6.10 kB_)","closed","status: bulk-closed,","spring-projects-issues","2014-06-06T06:55:50Z","2019-01-12T02:29:53Z"
"","16943","JdbcTemplate does not apply values of zero for setMaxRows, setFetchSize and setQueryTimeout [SPR-12338]","**[Robert Wruck](https://jira.spring.io/secure/ViewProfile.jspa?name=rwruck)** opened **[SPR-12338](https://jira.spring.io/browse/SPR-12338?redirect=false)** and commented  JdbcTemplate.applyStatementSettings does not apply values of 0 for setMaxRows, setFetchSize and setQueryTimeout. I assume this is because zero is the default value for these Statement properties. On the other hand, zero is a legal value for all three properties and should not be silently ignored. Furthermore, connection pools such as C3P0 may cache Statement objects that had a nonzero value applied by a different JdbcTemplate. For such statements, not applying a zero value leads to unexpexted results (e.g. limited number of result rows vs. unlimited as requested by a value of 0 for maxRows). I agree that if one of these properties was never set on the JdbcTemplate, the corresponding property should not be set on the Statement. But a (legal) value of 0 is not a good way of detecting that.   ---  **Affects:** 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/57d63a1903c15a7d0d86204b952b7d860282ed9c","closed","type: enhancement,","spring-projects-issues","2014-10-15T15:42:12Z","2014-11-17T06:42:26Z"
"","16919","Allow access to underlying WebSocketSession with WebSocketMessageBroker config [SPR-12314]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12314](https://jira.spring.io/browse/SPR-12314?redirect=false)** and commented  It would be nice to provide a hook that allows intercepting the HttpSession id, HttpServletRequest#getUserPrincipal(), and a reference to be able to close the WebSocket Session at the time of the handshake.  This is necessary for things like [Spring Session](https://github.com/spring-projects/spring-session/issues/44) which want to provide a mechanism to override the HttpSession since [JSR-356](http://download.oracle.com/otndocs/jcp/websocket-1_1-mrel-spec/index.html) states:  > In the case where a WebSocket endpoint is a protected resource in the web application (see Chapter 8), that is to say, requires an authorized user to access it, then the websocket implementation must ensure that the websocket endpoint does not remain connected to its peer after the underlying implementation has decided the authenticated identity is no longer valid. [WSC-7.2-3] This may happen, for example, if the user logs out > of the containing web application, or if the authentication times out or is invalidated for some other reason. >  > In this situation, the websocket implementation must immediately close the > close status code 1008. [WSC-7.2-3]  The closest mechanism I could find to do this would be to create a HandshakeHandler. However, there doesn't appear to be a reliable way to refer to an object that can close the WebSocket Session.  ---  **Issue Links:** - #16893 Allow server-side code to send DISCONNECT messages to the broker  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/97596fb9f6b6052f60c316202dde8646271b008c, https://github.com/spring-projects/spring-framework/commit/f0323be7865978920929faf1598999f90cfd562b","closed","type: enhancement,","spring-projects-issues","2014-10-08T14:00:57Z","2019-01-11T19:15:53Z"
"","16900","NullPointerException in UnsentDisconnectChannelInterceptor [SPR-12295]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12295](https://jira.spring.io/browse/SPR-12295?redirect=false)** and commented  If a null message is passed into `UnsentDisconnectChannelInterceptor.afterSendCompletion` a `NullPointerException` is thrown. This situation happens if `ChannelInterceptor#preSend` on the inbound channel returns null to avoid sending the message. Note that it seems reasonable to return null from `ChannelInterceptor#preSend` since the javadoc states:  > ... > If this method returns null then the actual send invocation will not occur.  The full stacktrace can be found below:  ``` 2014-10-03 13:30:07.317 ERROR 10250 --- [nio-8080-exec-5] o.s.m.s.ExecutorSubscribableChannel      : Exception from afterSendCompletion in org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler$UnsentDisconnectChannelInterceptor@3d489997  java.lang.NullPointerException: null 	at org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler$UnsentDisconnectChannelInterceptor.afterSendCompletion(AbstractBrokerMessageHandler.java:289) 	at org.springframework.messaging.support.AbstractMessageChannel$ChannelInterceptorChain.triggerAfterSendCompletion(AbstractMessageChannel.java:183) 	at org.springframework.messaging.support.AbstractMessageChannel$ChannelInterceptorChain.applyPreSend(AbstractMessageChannel.java:165) 	at org.springframework.messaging.support.AbstractMessageChannel.send(AbstractMessageChannel.java:115) 	at org.springframework.messaging.support.AbstractMessageChannel.send(AbstractMessageChannel.java:106) 	at org.springframework.web.socket.messaging.StompSubProtocolHandler.handleMessageFromClient(StompSubProtocolHandler.java:251) 	at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.handleMessage(SubProtocolWebSocketHandler.java:307) 	at org.springframework.web.socket.handler.WebSocketHandlerDecorator.handleMessage(WebSocketHandlerDecorator.java:75) 	at org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.handleMessage(LoggingWebSocketHandlerDecorator.java:55) 	at org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.handleMessage(ExceptionWebSocketHandlerDecorator.java:71) 	at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.delegateMessages(AbstractSockJsSession.java:218) 	at org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.handleMessage(WebSocketServerSockJsSession.java:194) 	at org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler.handleTextMessage(SockJsWebSocketHandler.java:92) 	at org.springframework.web.socket.handler.AbstractWebSocketHandler.handleMessage(AbstractWebSocketHandler.java:43) 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.handleTextMessage(StandardWebSocketHandlerAdapter.java:112) 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.access$000(StandardWebSocketHandlerAdapter.java:42) 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$3.onMessage(StandardWebSocketHandlerAdapter.java:82) 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$3.onMessage(StandardWebSocketHandlerAdapter.java:79) 	at org.apache.tomcat.websocket.WsFrameBase.sendMessageText(WsFrameBase.java:393) 	at org.apache.tomcat.websocket.WsFrameBase.processDataText(WsFrameBase.java:494) 	at org.apache.tomcat.websocket.WsFrameBase.processData(WsFrameBase.java:289) 	at org.apache.tomcat.websocket.WsFrameBase.processInputBuffer(WsFrameBase.java:130) 	at org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:57) 	at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:197) 	at org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:194) 	at org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:95) 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:653) 	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1566) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1523) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Thread.java:744) ```    ---  **Affects:** 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b6a3808a97c8e75ac754ccc75aebd956a4db783f","closed","type: bug,","spring-projects-issues","2014-10-03T11:43:17Z","2014-11-17T06:42:37Z"
"","16893","Allow server-side code to send DISCONNECT messages to the broker [SPR-12288]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12288](https://jira.spring.io/browse/SPR-12288?redirect=false)** and commented  Spring Session needs the ability to disconnect a client from code on the server side (i.e. from a ChannelInterceptorAdapter) when a session expires. Ideally the solution will not require using STOMP specific APIs.  ---  **Affects:** 4.1.1  **Issue Links:** - #16919 Allow access to underlying WebSocketSession with WebSocketMessageBroker config - #19137 StompSubProtocolHandler responds with ERROR (Session closed.) on DISCONNECT when using SimpleBrokerMessageHandler  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/01aa64c534177f65d45c2cfc8170e83c3f3f87a6  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2014-10-01T13:27:08Z","2019-01-11T17:36:29Z"
"","16861","Sending message in ApplicationListener results in ERROR level logging  [SPR-12247]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12247](https://jira.spring.io/browse/SPR-12247?redirect=false)** and commented  When sending a message in an `ApplicationListener` I get an error similar to the following:  ``` ERROR 3993 --- [tboundChannel-3] o.s.w.s.m.SubProtocolWebSocketHandler    : No session for GenericMessage [payload=byte[19], headers={simpMessageType=MESSAGE, simpSubscriptionId=sub-3, contentType=application/json;charset=UTF-8, simpSessionId=1q1pejao, simpDestination=/topic/friends/signout}] ```  This should not result in error level logging.  The reason I want to send a message from an `ApplicationListener` is that I am writing a chat application that is sending a message to all connected clients to indicate the user has signed out.   ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b0e6091cadeaf29a95ab7d85eebd3c46671b6ac6","closed","type: bug,","spring-projects-issues","2014-09-24T10:10:02Z","2014-10-01T03:11:50Z"
"","16841","Add Simple way of whitelisting origin [SPR-12226]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12226](https://jira.spring.io/browse/SPR-12226?redirect=false)** and commented  It is best practice to verify the origin of a WebSocket connection. It would be nice if Spring WebSocket support provided a convenient way to whitelist a set of origins.  NOTE: If interested, I am willing to provide a PR for this.  ---  **Affects:** 4.1 GA  **Reference URL:** http://docs.oracle.com/middleware/1213/wls/WLPRG/websockets.htm#BABEDBBB  This issue is a sub-task of #16921  **Issue Links:** - [SEC-2667](https://jira.spring.io/browse/SEC-2667) Consider Oracle Guidelines (_**""is depended on by""**_) - #17260 AbstractSockJsService.checkAndAddCorsHeaders fails for same origin requests when setAllowedOrigins is set  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/743356fa217dc093d6ade8a1867e0bb6ccb22a80  0 votes, 6 watchers","closed","type: task,","spring-projects-issues","2014-09-19T14:06:58Z","2019-01-11T17:25:31Z"
"","16832","Exception in ""inboundClientChannel"" interceptor for DISCONNECT prevents broker from learning about it [SPR-12218]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12218](https://jira.spring.io/browse/SPR-12218?redirect=false)** and commented  If an exception is thrown in ChannelInterceptor.preSend on DISCONNECT, then the following error is reported when sending to destinations a user has subscribed:  ``` SubProtocolWebSocketHandler[ERROR] - No session for ... ```  Even if an Exception is thrown in ChannelInterceptor.preSend on DISCONNECT the user mapping should be cleaned up. One option to clean this up would be to use a `ApplicationListener`   ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ceb79c9bee2b734cb6b3eb2e02494e69671cb20e, https://github.com/spring-projects/spring-framework/commit/371d93b3463c5157f3c4b2b809084ddb00ae2b9e  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2014-09-17T14:07:32Z","2014-10-01T03:11:46Z"
"","16831","Allow configuring custom HandlerMethodArgumentResolver and HandlerMethodReturnValueHandler [SPR-12217]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12217](https://jira.spring.io/browse/SPR-12217?redirect=false)** and commented  This would be nice so that Spring Security can provide a similar implementation to allow resolving the current user (i.e. the Authentication's Principal) within messaging.   ---  **Affects:** 4.1 GA  **Issue Links:** - [SEC-2714](https://jira.spring.io/browse/SEC-2714) AuthenticationPrincipal Argument Resolver for messaging Support (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/237b50a9c87c3cf754781ea1ac5ec0c8027fe314","closed","type: enhancement,","spring-projects-issues","2014-09-17T14:02:53Z","2014-10-01T03:11:46Z"
"","16829","DISCONNECT messages created in StompSubProtocolHandler do not contain user information [SPR-12215]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12215](https://jira.spring.io/browse/SPR-12215?redirect=false)** and commented  This seems to be related to the fact that [StompSubProtocolHandler.createDisconnectMessage](https://github.com/spring-projects/spring-framework/blob/d3ea2420852dc06d9ff9c21711749126163d8b57/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java#L465) does not set the user as [handleMessageFromClient](https://github.com/spring-projects/spring-framework/blob/d3ea2420852dc06d9ff9c21711749126163d8b57/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java#L228) does.  Disconnect Message Headers  ``` simpMessageType=DISCONNECT,  stompCommand=DISCONNECT,  simpSessionAttributes={httpSession.id=873A1B90ECB3370ECBC1F51E01DAB6E2}, simpSessionId=6 ```  Connection Message Headers  ``` simpMessageType=CONNECT,  stompCommand=CONNECT,  nativeHeaders={accept-version=[1.1,1.0], heart-beat=[10000,10000]}, simpSessionAttributes={httpSession.id=873A1B90ECB3370ECBC1F51E01DAB6E2},  simpUser= ..., simpSessionId=6 ```    ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4af98515853ad7e20eb90cacfaef8aecb1a81862","closed","type: enhancement,","spring-projects-issues","2014-09-17T11:54:49Z","2014-10-01T03:11:43Z"
"","16769","Use DEBUG log level for broken WebSocket client connections or write failures [SPR-12155]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12155](https://jira.spring.io/browse/SPR-12155?redirect=false)** and commented  At times LoggingWebSocketHandlerDecorator logs ""IOException: Broken pipe at ERROR"" inappropriately.  This can happen in the following scenario:  * A webpage creates a WebSocket connection * The user refreshes the page which immediately terminates the WebSocket connection  Note that this is an intermitted issue and does not happen all of the time. Since this is a normal workflow, Spring should not log this at ERROR level.  A full stacktrace can be found below:  ``` 2014-09-04 10:55:14.809 ERROR 55031 --- [nio-8080-exec-1] s.w.s.h.LoggingWebSocketHandlerDecorator : Transport error in WebSocketServerSockJsSession[id=jhf9zdei]    java.io.IOException: java.util.concurrent.ExecutionException: java.io.IOException: Broken pipe  at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:243)  at org.apache.tomcat.websocket.WsSession.sendCloseMessage(WsSession.java:487)  at org.apache.tomcat.websocket.WsSession.onClose(WsSession.java:441)  at org.apache.tomcat.websocket.WsFrameBase.processDataControl(WsFrameBase.java:324)  at org.apache.tomcat.websocket.WsFrameBase.processData(WsFrameBase.java:270)  at org.apache.tomcat.websocket.WsFrameBase.processInputBuffer(WsFrameBase.java:116)  at org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:54)  at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:194)  at org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:189)  at org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:92)  at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:605)  at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1720)  at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1679)  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)  at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)  at java.lang.Thread.run(Thread.java:744)  Caused by: java.util.concurrent.ExecutionException: java.io.IOException: Broken pipe  at org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:102)  at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:238)  ... 16 common frames omitted  Caused by: java.io.IOException: Broken pipe  at sun.nio.ch.FileDispatcherImpl.write0(Native Method)  at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47)  at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)  at sun.nio.ch.IOUtil.write(IOUtil.java:65)  at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:466)  at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:123)  at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:185)  at org.apache.coyote.http11.upgrade.NioServletOutputStream.doWriteInternal(NioServletOutputStream.java:93)  at org.apache.coyote.http11.upgrade.NioServletOutputStream.doWrite(NioServletOutputStream.java:60)  at org.apache.coyote.http11.upgrade.AbstractServletOutputStream.writeInternal(AbstractServletOutputStream.java:125)  at org.apache.coyote.http11.upgrade.AbstractServletOutputStream.write(AbstractServletOutputStream.java:92)  at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.onWritePossible(WsRemoteEndpointImplServer.java:94)  at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doWrite(WsRemoteEndpointImplServer.java:81)  at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:393)  at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:287)  at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:233)  ... 16 common frames omitted ```  ---  **Affects:** 4.1 GA  **Issue Links:** - #16064 Logs fill with unnecessary stack traces when using SockJS streaming transports  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5b1cbf030695f91929ab361ba96c5d12b95ddd3c  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2014-09-05T08:08:48Z","2019-01-11T17:21:24Z"
"","16647","Support @ContextConfiguration at method level [SPR-12031]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12031](https://jira.spring.io/browse/SPR-12031?redirect=false)** and commented  #### Status Quo  The Spring TestContext Framework (TCF) makes it very easy to run tests that share the same configuration within a test class hierarchy or even across a test suite. However, it does not support annotating a method with `@ContextConfiguration`.  #### Proposals  1. It would be nice if the TCF would allow `@ContextConfiguration` on a test method. This would allow for easily testing various permutations of configuration. 2. Support _throw-away_ contexts (i.e., contexts that are loaded for a single test method but not stored in the context cache), perhaps via a separate issue that serves as a building block for this issue.    - See #18295.  ---  **Issue Links:** - #19600 Support Verifying Errors with `@ContextConfiguration` at method level (_**""is depended on by""**_) - #13977 Support `@ActiveProfiles` at method level - #18951 Support `@TestPropertySource` at method level - #18295 Support 'throw-away' context for a test class  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/73db0e2ca5fc017caa8914e393d36d039a43b480  7 votes, 14 watchers","open","type: enhancement,","spring-projects-issues","2014-07-24T12:52:34Z","2020-08-24T17:39:28Z"
"","16584","Provide callbacks to intercept the sending of messages through an Executor [SPR-11968]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-11968](https://jira.spring.io/browse/SPR-11968?redirect=false)** and commented  A `ChannelInterceptor` provides callbacks before and after a message is sent. In `MessageChannel` implementations where the message is sent asynchronously (through an `Executor`) it can be useful to receive additional callbacks in the async message-handling thread, for example to set up resources for the new thread from context provided in the message.  ---  This issue is a sub-task of #16582  **Issue Links:** - [SEC-2673](https://jira.spring.io/browse/SEC-2673) WebSocket / Ease configuration of Client(Inbound|Outbound)Channel Executor (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2f371e5aeb8ece6c6b3939f1ad8faba5539b38fd","closed","in: messaging,","spring-projects-issues","2014-07-07T08:17:28Z","2019-01-11T22:25:31Z"
"","16583","Add completion callbacks (regardless of failure) to ChannelInterceptor [SPR-11967]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-11967](https://jira.spring.io/browse/SPR-11967?redirect=false)** and commented  A ChannelInterceptor may need to be invoked in all cases, even failure, after the message is sent for example to clear thread local context.  The specific use case is for Spring Security to be able to set up the SecurityContextHolder in preSend and then clear it regardless of whether the send succeeded or failed.  ---  **Affects:** 4.0.5  This issue is a sub-task of #16582  **Issue Links:** - [SEC-2672](https://jira.spring.io/browse/SEC-2672) ChannelInterceptorAdapter not reliable to clear SecurityContextHolder (_**""is depended on by""**_) - [INT-2166](https://jira.spring.io/browse/INT-2166) Adding support for SecurityContext Propagation","closed","type: task,","spring-projects-issues","2014-07-07T08:16:03Z","2019-01-11T22:25:27Z"
"","16582","Add hooks in spring-messaging for Spring Security [SPR-11966]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-11966](https://jira.spring.io/browse/SPR-11966?redirect=false)** and commented  This is the Spring Framework JIRA to reflect [SEC-2669](https://jira.spring.io/browse/SEC-2669)  ---  **Sub-tasks:** - #16583 Add completion callbacks (regardless of failure) to ChannelInterceptor - #16584 Provide callbacks to intercept the sending of messages through an Executor  **Issue Links:** - [SEC-2669](https://jira.spring.io/browse/SEC-2669) Improvements on Spring Framework integration  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eaad0a0f5276652946c41cfc1749479ac820e042  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-07-07T08:15:17Z","2019-01-11T22:25:21Z"
"","17080","Doc: Inheritance of @Transactional and lookup behaviour of AbstractFallbackTransactionAttributeSource [SPR-12474]","**[Ravi Sanwal](https://jira.spring.io/secure/ViewProfile.jspa?name=rsanwal)** opened **[SPR-12474](https://jira.spring.io/browse/SPR-12474?redirect=false)** and commented  Lets start with a question to the expert. Consider a service(or repo) bean  ``` import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional;  /**  * A service class with transactional method  */ @Service public class ServiceBean implements ServiceInterface {     @Transactional     public void serviceMethodA() {}     public void serviceMethodB() {} } ```  And a subclass of it  ``` import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional;   /**  * Extended {@link ServiceBean}  */ @Service @Transactional public class MagicalServiceBean extends ServiceBean { } ```  Notice that only one method of ServiceBean is marked `@Transactional` while MagicalServiceBean has a class level `@Transactional` declaration.  What should be the transactional nature of method serviceMethodB when it is called on an injected (and proxied et al.) instance of MagicalServiceBean?  Apparently as per the apidocs of org.springframework.transaction.interceptor.AnnotationTransactionAttributeSource (org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource) we expect to get a transactional serviceMethodB.  > Abstract implementation of TransactionAttributeSource that caches attributes for methods and implements a fallback policy: 1. specific target method; 2.**target class;** 3. declaring method; 4. declaring class/interface.  A specific distinction is mentioned between **target class** and **declaring class/interface**  Codewise if we look at org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.getTransactionAttribute(Method, Class), the targetClass parameter points to MagicalServiceBean.class.  You may consider it as a documentation defect. There could be arguments for both ""should apply transactional on extended method""(because this seems more intuitive and correct) and ""should not apply on extended method""(to keep it the way base class has defined and because we can always create a delegate method on the extended class if we need to make it transactional)  Regardless this seems to be an odd behavior to me.   ---  **Affects:** 4.1.2","closed","status: bulk-closed,","spring-projects-issues","2014-11-26T16:28:32Z","2019-01-12T00:17:51Z"
"","16412","SPR-10829: Spring JMS problem with Oracle AQ still exists if underlying DataSource is decorated [SPR-11791]","**[Ravi Sanwal](https://jira.spring.io/secure/ViewProfile.jspa?name=rsanwal)** opened **[SPR-11791](https://jira.spring.io/browse/SPR-11791?redirect=false)** and commented  This is a re-open of #15455. Some work was done around this. We initially thought that the fix works. But seems like it doesn't. Here is a summary of the fix:  ``` catch (javax.jms.IllegalStateException ex) { 				if (this.connectionFactory != null) { 					try { 						Method getDataSourceMethod = this.connectionFactory.getClass().getMethod(""getDataSource""); 						Object ds = ReflectionUtils.invokeMethod(getDataSourceMethod, this.connectionFactory); 						if (ds != null && TransactionSynchronizationManager.hasResource(ds)) { 							// IllegalStateException from sharing the underlying JDBC Connection 							// which typically gets committed first, e.g. with Oracle AQ --> ignore 							return; 						} 					} 					catch (Throwable ex2) { 						if (logger.isDebugEnabled()) { 							logger.debug(""No working getDataSource method found on ConnectionFactory: "" + ex2); 						} 						// No working getDataSource method - cannot perform DataSource transaction check 					} 				} 				throw ex; 			} 		} ```  This is for ignoring the IllegalArgumentException The problem with this fix is that the datasource object returned by the reflective invocation of getDataSource on the connection factory (which is oracle.jms.AQjmsQueueConnectionFactory) returns org.springframework.data.jdbc.config.oracle.AqJmsFactoryBeanFactory$TransactionAwareDataSource, which is a transactionally wrapped proxy (to use transactional datasource resource and also to suppress ""close"" etc on the connection returned) around the actual datasource. So TransactionSynchronizationManager.hasResource(ds) returns false.  I don't know what is an easy and clean fix to this. But there is one way to deal with the problem. org.springframework.data.jdbc.config.oracle.AqJmsFactoryBeanFactory$TransactionAwareDataSource is a org.springframework.jdbc.datasource.DelegatingDataSource which gives access to the actual target datasource. So an instance check can be done and if matches, the target datasource can be retrieved. By adding the following before checking the transaction synchronization manager for the datasource resource:  ``` if(DelegatingDataSource.class.isInstance(ds)) {     ds = ((DelegatingDataSource)ds).getTargetDataSource(); } ```  The catch block would then look like:  ``` catch (javax.jms.IllegalStateException ex) {                 if (this.connectionFactory != null) {                     try {                         Method getDataSourceMethod = this.connectionFactory.getClass().getMethod(""getDataSource"");                         Object ds = ReflectionUtils.invokeMethod(getDataSourceMethod, this.connectionFactory);                         if(DelegatingDataSource.class.isInstance(ds)) {                             ds = ((DelegatingDataSource)ds).getTargetDataSource();                         }                         if (ds != null && TransactionSynchronizationManager.hasResource(ds)) {                             // IllegalStateException from sharing the underlying JDBC Connection                             // which typically gets committed first, e.g. with Oracle AQ --> ignore                             return;                         }                     }                     catch (Throwable ex2) {                         if (logger.isDebugEnabled()) {                             logger.debug(""No working getDataSource method found on ConnectionFactory: "" + ex2);                         }                         // No working getDataSource method - cannot perform DataSource transaction check                     }                 }                 throw ex;             } 	} ```  Basically make the transaction synchronization check on the target if needed.  ---  **Affects:** 3.2.5, 3.2.8, 4.0.1, 4.0.4  **Issue Links:** - #15455 spring-jms 3.0.4 introduces a change that breaks using JMSTemplate (and for that matter any JMS resource) with Oracle AQ when JMS Session are used in SESSION_TRANSACTED mode.  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: bug,","spring-projects-issues","2014-05-15T12:03:18Z","2019-01-11T21:13:20Z"
"","17045","WebApplicationContext initializes beans with StandardEnvironment instead of StandardServletEnvironment [SPR-12440]","**[Ralph Goers](https://jira.spring.io/secure/ViewProfile.jspa?name=rgoers)** opened **[SPR-12440](https://jira.spring.io/browse/SPR-12440?redirect=false)** and commented  When initializing a web app the log entries in the attached file occur. They show that the WebApplicationContext is being created and initialized with a StandardServletEnvironment. However, it then proceeds to create a bean factory with a StandardEnvironment to process the applicationContext.xml, so the init parameters in the web.xml are not available.  ContextLoader's configureAndRefreshWebApplicationContext is called which initializes the WebApplicationContext. The last line in the method calls the WebApplicationContext's refresh method, which is inherited from AbstractApplicationContext. The refresh method calls prepareRefresh, which leaves the environment as it was (correct). obtainFreshBeanFactory is then called, which calls refreshBeanFactory, which in turn calls loadBeanDefinitions in XmlWebApplicationContext.   ---  **Affects:** 4.1.1  **Attachments:** - [log4j.txt](https://jira.spring.io/secure/attachment/22367/log4j.txt) (_2.36 kB_)","closed","in: core,","spring-projects-issues","2014-11-14T12:10:58Z","2019-01-12T05:25:06Z"
"","16813","Spring version [SPR-12199]","**[rajareddy](https://jira.spring.io/secure/ViewProfile.jspa?name=rajareddy)** opened **[SPR-12199](https://jira.spring.io/browse/SPR-12199?redirect=false)** and commented  Hi,  I am using spring 3.1.4 and tiles 2.2.2 .  getting the below error when I try to run the application . here is my configuration  web.xml  ---  \ \contextConfigLocation\ \WEB-INF/mvc-servlet.xml\ \  mvc-servlet.xml  ---  \ \ \ \/WEB-INF/tiles/tiles-config.xml\ \ \  \ \ \ \org.apache.tiles.evaluator.el.ELAttributeEvaluator \ \ \ \           	     	       error message  ---  INFO   | jvm 1    | main    | 2014/09/16 09:48:08.864 | Sep 16, 2014 9:48:08 AM org.apache.catalina.core.StandardWrapperValve invoke INFO   | jvm 1    | main    | 2014/09/16 09:48:08.867 | SEVERE: Servlet.service() for servlet DispatcherServlet threw exception INFO   | jvm 1    | main    | 2014/09/16 09:48:08.868 | javax.servlet.ServletException: Tiles container is not initialized. Have you added a TilesConfigurer to your web application context? INFO   | jvm 1    | main    | 2014/09/16 09:48:08.873 | 	at org.springframework.web.servlet.view.tiles2.TilesView.renderMergedOutputModel(TilesView.java:102) INFO   | jvm 1    | main    | 2014/09/16 09:48:08.876 | 	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262) INFO   | jvm 1    | main    | 2014/09/16 09:48:08.878 | 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1180) INFO   | jvm 1    | main    | 2014/09/16 09:48:08.881 | 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:950) INFO   | jvm 1    | main    | 2014/09/16 09:48:08.884 | 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:852) INFO   | jvm 1    | main    | 2014/09/16 09:48:08.887 | 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882) INFO   | jvm 1    | main    | 2014/09/16 09:48:08.890 | 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778) INFO   | jvm 1    | main    | 2014/09/16 09:48:08.892 | 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) INFO   | jvm 1    | main    | 2014/09/16 09:48:08.894 | 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:723)  ---  No further details from [SPR-12199](https://jira.spring.io/browse/SPR-12199?redirect=false)","closed","status: invalid,","spring-projects-issues","2014-09-16T03:22:55Z","2019-01-13T20:58:41Z"
"","16644","Incorrect documentation for AbstractAnnotationConfigDispatcherServletInitializer.getServletConfigClasses() [SPR-12028]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-12028](https://jira.spring.io/browse/SPR-12028?redirect=false)** and commented  The documentation says the return value of this method cannot be null or empty. However that is not true. The caller already checks if the return value is null/empty and indeed returning null from an implementation works fine.  Please correct the documentation.   ---  **Affects:** 4.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fbf24a927de70a853a6086d6e550446287e20551, https://github.com/spring-projects/spring-framework/commit/16273473cbb7cc8e74a625c7cda2b50ff9919d14","closed","type: documentation,","spring-projects-issues","2014-07-24T08:39:35Z","2014-08-15T01:52:45Z"
"","16635","Allow way to specify order of filters [SPR-12019]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-12019](https://jira.spring.io/browse/SPR-12019?redirect=false)** and commented  Currently there is no real way to specify order of execution of filters without resorting to web.xml, as discussed in this thread: http://stackoverflow.com/questions/20645957/how-to-specify-filter-execution-order-using-springs-java-configuration  There needs to be a java config way to specify execution order of filters    ---  **Affects:** 4.0.6","closed","type: enhancement,","spring-projects-issues","2014-07-22T11:30:57Z","2014-07-24T08:11:06Z"
"","16560","Optimize logging at different levels with WebSocket/Messaging [SPR-11943]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11943](https://jira.spring.io/browse/SPR-11943?redirect=false)** and commented  the info level logging seems to log every single 'connect' event and results in a very verbose log. i know websocket connections are longer lived than http, but on a mostly websocket site this is akin to logging every http request. This kind of info is only needed during a debugging session and the logging level should reflect that.  please move these messages to a lower logging level (eg 'fine'/'debug') so as not to clutter logs   ---  **Affects:** 4.1 RC1  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-07-02T21:06:59Z","2019-01-11T22:26:26Z"
"","16547","JMX Bean to allow monitoring Spring Websocket [SPR-11929]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11929](https://jira.spring.io/browse/SPR-11929?redirect=false)** and commented  There needs to be some JMX bean to allow applications to monitor the state of Websocket connections.  This is already implemented mostly in the samples: https://github.com/rstoyanchev/spring-websocket-portfolio/blob/master/src/main/java/org/springframework/samples/portfolio/config/JmxConfig.java  It should be factored out and exposed as an MBean by Spring so applications can use it without needing to know the internals of Websockets implementation.  ---  **Affects:** 4.0.5  **Issue Links:** - #16361 Expose STOMP/WebSocket monitoring info and internal stats (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2014-06-30T09:04:49Z","2019-01-11T22:20:00Z"
"","16520","Spring instantiating same beans in root context as well as servlet-specific context [SPR-11901]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11901](https://jira.spring.io/browse/SPR-11901?redirect=false)** and commented  My springs beans are being instantiated twice. I have recorded a full video with a debugging session to show the source and the actual instantiation. (sorry for the background noise in the office.)  http://screencast.com/t/Rt2dcVSBh88  Marking this as blocker since this is core functionality that all of spring depends upon.  **Update** : added source code attachment which shows the bug is fully reproducible.   ---  **Affects:** 4.0.5  **Attachments:** - [springbug 2.zip](https://jira.spring.io/secure/attachment/22076/springbug+2.zip) (_104.73 kB_)","closed","in: core,","spring-projects-issues","2014-06-23T14:03:54Z","2019-01-12T05:25:49Z"
"","16503","Check inactive WebSocket/SockJS sessions before they're connected on the STOMP level [SPR-11884]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11884](https://jira.spring.io/browse/SPR-11884?redirect=false)** and commented  This is referencing the issue I wsa discussing with Rossen over email during the begining of the week.  Its reproducible on both Tomcat 7.0.53 and 8.0.8.  The number of files created by Spring keeps on increasing if there are a high number of connections (100s or 1000s). Increasing limit using ulimit is of no use since the number of files created will keep growing till the limit is hit, no matter what limit is set.  The issue is not visible when there are only a small number of connections.  I dont know of a good way to simulate hundreds or thousands of users so I have given Rossen full access to our production servers (over email) to reproduce the issue, including the source code of our app.  This is a blocker since our app crashes within minutes of starting and there is nothing we can do to keep it up   ---  **Affects:** 4.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b1ff4c5db781a3d0b5b83fab44e47cd7e64dbd6, https://github.com/spring-projects/spring-framework/commit/40c203ca71653bf811da3debee1e54d6a80f28cb, https://github.com/spring-projects/spring-framework/commit/d18fc531483840fda8598f464b5293c624903068, https://github.com/spring-projects/spring-framework/commit/113fd1180a14656a89d6d6639d259c577d70fbc5, https://github.com/spring-projects/spring-framework/commit/7dc2b2927e0168080619839ba63db5c4e820a6da, https://github.com/spring-projects/spring-framework/commit/86de4169088235ccbfcd4264963ca49178c9ff14, https://github.com/spring-projects/spring-framework/commit/618771d59d050c2f36d9e203501abd833fa39b93, https://github.com/spring-projects/spring-framework/commit/3af488a701834f61b89cd84040605a6252962e9c, https://github.com/spring-projects/spring-framework/commit/a3fa9c979777e554efad0df429041767f05dfdb8","closed","type: enhancement,","spring-projects-issues","2014-06-18T08:20:18Z","2014-07-08T00:21:28Z"
"","16489","Too many exception stack traces related to disconnected SockJS clients [SPR-11870]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11870](https://jira.spring.io/browse/SPR-11870?redirect=false)** and commented  Using spring websockets, our log seem full of exceptions like these:  ```  [stdout] 16:05:18,957 ERROR clientOutboundChannel-13 handler.ExceptionWebSocketHandlerDecorator:92 - Unhandled error for ExceptionWebSocketHandlerDecorator [delegate=LoggingWebSocketHandlerDecorator [delegate=org.springframework.web.socket.messaging.SubProtocolWebSocketHandler@315934c3]] [stdout] java.lang.IllegalStateException: The WebSocket session has been closed and no method (apart from close()) may be called on a closed session [stdout] 	at org.apache.tomcat.websocket.WsSession.checkState(WsSession.java:653) [stdout] 	at org.apache.tomcat.websocket.WsSession.getUserPrincipal(WsSession.java:582) [stdout] 	at org.springframework.web.socket.adapter.standard.StandardWebSocketSession.getPrincipal(StandardWebSocketSession.java:123) [stdout] 	at org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.getPrincipal(WebSocketServerSockJsSession.java:73) [stdout] 	at org.springframework.web.socket.messaging.StompSubProtocolHandler.afterSessionEnded(StompSubProtocolHandler.java:364) [stdout] 	at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.clearSession(SubProtocolWebSocketHandler.java:352) [stdout] 	at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.afterConnectionClosed(SubProtocolWebSocketHandler.java:347) [stdout] 	at org.springframework.web.socket.handler.WebSocketHandlerDecorator.afterConnectionClosed(WebSocketHandlerDecorator.java:85) [stdout] 	at org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.afterConnectionClosed(LoggingWebSocketHandlerDecorator.java:71) [stdout] 	at org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.afterConnectionClosed(ExceptionWebSocketHandlerDecorator.java:89) [stdout] 	at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.close(AbstractSockJsSession.java:289) [stdout] 	at org.springframework.web.socket.handler.WebSocketSessionDecorator.close(WebSocketSessionDecorator.java:158) [stdout] 	at org.springframework.web.socket.messaging.StompSubProtocolHandler.handleMessageToClient(StompSubProtocolHandler.java:287) [stdout] 	at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.handleMessage(SubProtocolWebSocketHandler.java:306) [stdout] 	at org.springframework.messaging.support.ExecutorSubscribableChannel$1.run(ExecutorSubscribableChannel.java:70) [stdout] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [stdout] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [stdout] 	at java.lang.Thread.run(Thread.java:744) ```  We are using tomcat.  ---  **Affects:** 4.0.5  **Issue Links:** - #16064 Logs fill with unnecessary stack traces when using SockJS streaming transports  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/49b872e387cf698de653dffa1b268c0950c0c23f","closed","type: enhancement,","spring-projects-issues","2014-06-11T09:36:05Z","2019-01-11T22:16:34Z"
"","16476","Allow automatic decoding of RequestParam [SPR-11857]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11857](https://jira.spring.io/browse/SPR-11857?redirect=false)** and commented  Currently a request parameter has to be decode manually, eg:  ```  public void info( @RequestParam String txnName)  {         txnName = URLDecoder.decode(txnName,""UTF-8""); }  ```  Ideally, Spring should take care of automatically decoding this.  So as not to break backward compatibility, I propose adding an attribute `decode` on the `RequestParam` annotation. Eg:  ``` public void info( @RequestParam(decode=true) String txnName)  {         //txnName is decoded by spring }  ```    ---  **Affects:** 4.0.5","closed","in: web,","spring-projects-issues","2014-06-07T12:50:41Z","2019-01-11T22:17:13Z"
"","16354","websocket guide should show how to reconnect [SPR-11732]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11732](https://jira.spring.io/browse/SPR-11732?redirect=false)** and commented  the current websocket guide don't show how to reconnect if the connection is lost. this is a critical functionality of any websocket application and should be shown in the guide.   ---  **Affects:** 4.0.3","closed","type: task,","spring-projects-issues","2014-04-24T02:17:20Z","2014-04-24T05:35:09Z"
"","16422","opposite to depends-on [SPR-11802]","**[Piotr Turski](https://jira.spring.io/secure/ViewProfile.jspa?name=piotr.turski)** opened **[SPR-11802](https://jira.spring.io/browse/SPR-11802?redirect=false)** and commented  before spring-boot most beans were created by user so 'one way ordering' (depends-on) was enough. with spring-boot most beans are not declared by user so user needs a way to declare the order more precisely with 'two way ordering': 'depends-on' and 'before'.  let's say i created my own flyway and i must be initialized after datasource and before hibernate. but datasource and hibernate are created by spring-boot. so 'depends-on' is not enough because there is no way to tell that hibernate should wait with its initialization. so i have to prevent spring-boot from declaring hibernate(session factory or jpa) and declare it myself just to add 'depends-on'. so spring-boot is not that useful anymore  it would be good to be able to write sth like:  ``` @Service @Before(name= ""entityManagerFactory"") //requested feature: type or bean name public class MyFlyway {      @Autowired Datasource datasource; // depends-on  } ```    ---  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-05-17T04:00:02Z","2019-01-12T00:19:35Z"
"","16467","New @Transactional Propagation: CLEAN_NEW [SPR-11848]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-11848](https://jira.spring.io/browse/SPR-11848?redirect=false)** and commented  ##### use case  Sometimes I want to have a `@Transacitonal` method but so that it cannot be called when a transaction already exists. Something like using together:  ``` @Transactional(propagation = NEVER) @Transactional(propagation = REQUIRED) ```  (but of course this is not valid Java)  I could use `@Transactional(propagation = REQUIRES_NEW)`, but this actually masks the problem (by suspending the existing transaction if any) rather than report it with an exception.  Another solution is to mark a method `@Transactional(propagation = NEVER)` and use `TransactionTemplate` inside the method, but this is -- compared to annotation-based transaction management -- code obfuscation.  ##### proposed solution  Add a new option in the `Propagation` enum, let's call it `CLEAN_NEW` for the time being (surely you can find a better name). It's javadoc should state:  > Create a new transaction, throw an exception if a transaction already exists.    ---  **Affects:** 3.2.8","closed","status: bulk-closed,","spring-projects-issues","2014-06-05T04:12:33Z","2019-01-12T00:19:23Z"
"","16461","HttpInvokerProxyFactoryBean and co do not reliably expose correct type when declared via @Bean [SPR-11842]","**[Pierre Maréchal](https://jira.spring.io/secure/ViewProfile.jspa?name=smokeshield)** opened **[SPR-11842](https://jira.spring.io/browse/SPR-11842?redirect=false)** and commented  Using `@Bean` to declare my HttpInvokerProxyFactoryBean and `@Autowire` to inject it, Spring does not seem to resolve that my bean depends on the factory bean. I've attached a sample project displaying the behaviour. Simply run ""mvn test""  un-commenting the `@DependsOn` in MyBean works around the issue though.  ---  **Affects:** 4.0.5  **Attachments:** - [demo.zip](https://jira.spring.io/secure/attachment/22053/demo.zip) (_4.75 kB_)  **Issue Links:** - #16105 getBeanNamesForType should consider FactoryBean generics for early introspection of config classes as well - #19119 StackOverflowError for advisor search against factory-bean reference to FactoryBean - #16755 Plain FactoryBean declaration on `@Bean` method leads to early call (pre injection) - #17383 Regression in 4.1: UnsatisfiedDependencyException because a prototype-scoped FactoryBean is unexpectedly instantiated by getTypeForFactoryBean()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ae66e45887480ff6ffffdc6dadba39ec60a74a33, https://github.com/spring-projects/spring-framework/commit/85b2c7d116b79070411709fe522db6af23096dfb","closed","type: enhancement,","spring-projects-issues","2014-06-02T08:08:36Z","2019-01-13T06:53:42Z"
"","16621","Typos in documentation [SPR-12005]","**[Phillip Markert](https://jira.spring.io/secure/ViewProfile.jspa?name=pmarkert)** opened **[SPR-12005](https://jira.spring.io/browse/SPR-12005?redirect=false)** and commented  Fixing small typos, mis-spellings, grammar, and/or clarity in the documentation.   ---  **Affects:** 4.0.6","closed","","spring-projects-issues","2014-07-17T11:57:49Z","2019-01-11T18:22:48Z"
"","16777","JCache dependency in spring-aspects [SPR-12163]","**[Philipp Nanz](https://jira.spring.io/secure/ViewProfile.jspa?name=philippn)** opened **[SPR-12163](https://jira.spring.io/browse/SPR-12163?redirect=false)** and commented  After upgrading a simple project using aspectJ compile time weaving to Spring 4.1, I get errors during build:  [ERROR] error can't determine superclass of missing type org.springframework.cache.jcache.interceptor.JCacheAspectSupport [ERROR] when batch building BuildConfig[null] #Files=115 AopXmls=#0  The project in question is compiled with spring-aspects for ApsectJ.  The aforementioned problem can be resolved by adding spring-context-support as dependency to my POM.  The problems don't end there, though. After that, I get an exception that classes cannot be examined for JCache (javax.cache) annotations.  And indeed, JCache is not included in my dependencies.  It would be great if Spring could fallback more gracefully, if spring-context-support and/or JCache are not available on the classpath.  ---  **Affects:** 4.1 GA  **Issue Links:** - #11485 AnnotationDrivenStaticEntityMockingControl in spring-aspects module require javax.persistence.Entity on compiler classpath  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/222d2b163999b7d16055185bdf77e7ea98d4ef97  11 votes, 13 watchers","closed","has: votes-jira,","spring-projects-issues","2014-09-08T02:06:59Z","2019-01-11T17:20:16Z"
"","17104","Allow YamlProcessor subclasses to build the flattened map [SPR-12499]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12499](https://jira.spring.io/browse/SPR-12499?redirect=false)** and commented  Spring Boot needs to create a PropertySource from a yaml file and retain the order of the loaded keys. We need something similar to `YamlPropertiesFactoryBean` but that doesn't return a `Properties` object.  One option is the `YamlMapFactoryBean`, however, the resulting `Map` doesn't flatten out keys in the same way as the `YamlPropertiesFactoryBean` so instead Boot should directly extend `YamlProcessor` and that should expose a method that can flatten the map.  See #17077 and [BOOT-2022](https://github.com/spring-projects/spring-boot/issues/2022) for more background.  ---  **Affects:** 4.1.2  **Issue Links:** - #19303 YAML + PropertyPlaceholderConfigurer needs to process non-String values as well  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/87f1512e8867a884615d79ab52bf1283f7c573e1","closed","type: enhancement,","spring-projects-issues","2014-12-02T17:12:03Z","2019-01-11T19:36:17Z"
"","16882","Add BeanFactory.hasBeanOfType and hasBeanWithAnnotation methods [SPR-12277]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12277](https://jira.spring.io/browse/SPR-12277?redirect=false)** and commented  Spring Boot could do with methods to determine if there are beans of a specific type without needing to get the complete list of names.   ---  **Affects:** 4.1 GA","closed","type: enhancement,","spring-projects-issues","2014-09-30T15:40:51Z","2019-01-11T17:36:56Z"
"","16851","Reduce BeanDefinition cloning in AbstractBeanFactory.getMergedBeanDefinition [SPR-12236]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12236](https://jira.spring.io/browse/SPR-12236?redirect=false)** and commented  Profiling the Spring Boot Petclinic sample shows that the `getMergedBeanDefinition` method in `AbstractBeanFactory` is called 80,000+ times (and before configuration is frozen). The main callers are `getType` and `getTypeMatch`.  We could improve performance by not always cloning the `BeanDefinition` in this method.  ---  **Affects:** 4.1 GA  **Issue Links:** - #18841 markBeanAsCreated does not clear merged bean definition in a thread-safe fashion - #17735 Use already loaded metadata when possible for AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod - #17684 Reduce memory consumption for caches  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/09eb49207939c530735eacb6ce003735b9391267","closed","type: enhancement,","spring-projects-issues","2014-09-22T08:44:20Z","2019-01-11T17:39:26Z"
"","16847","Expose @Bean method metadata in the BeanDefinition [SPR-12232]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12232](https://jira.spring.io/browse/SPR-12232?redirect=false)** and commented  It would be very useful if `@Bean` method metadata were exposed as part of the `BeanDefinition`. This would allow a `BeanFactoryPostProcessor` to make decisions based on annotations placed on the `@Bean` method.   ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f46c706e443860e9ada7768a16cfa01526c10645","closed","type: enhancement,","spring-projects-issues","2014-09-21T10:59:01Z","2014-10-01T03:11:49Z"
"","16846","Provide subclassing hooks in PathMatchingResourcePatternResolver [SPR-12231]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12231](https://jira.spring.io/browse/SPR-12231?redirect=false)** and commented  Spring Boot uses `PathMatchingResourcePatternResolver` for a few `@Conditions` (for example to search for `message.properties`. Often optimizations could be applied, for example there is often no need to search JDK provided JARs and well known library JARs can also often be skipped.  With a couple of additional protected methods in `PathMatchingResourcePatternResolver` Boot would have a chance to make such optimizations.  ---  **Affects:** 4.1 GA  **Issue Links:** - #18260 PathMatchingResourcePatternResolver does not consider manifest based classpaths","closed","type: enhancement,","spring-projects-issues","2014-09-21T10:53:48Z","2019-01-11T17:38:51Z"
"","16842","Further optimize ReflectionUtils.isCglibRenamedMethod [SPR-12227]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12227](https://jira.spring.io/browse/SPR-12227?redirect=false)** and commented  The `ReflectionUtils.isCglibRenamedMethod` is typically called many times when a Spring Boot application starts. Although it has been optimized one, removing the regex will increase performance even more.   ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c41ea9617717bbada45a4431fe0b7079b538ffba","closed","type: enhancement,","spring-projects-issues","2014-09-20T00:23:14Z","2014-10-01T03:11:47Z"
"","16839","Improve performance of MapPropertySource.containsProperty [SPR-12224]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12224](https://jira.spring.io/browse/SPR-12224?redirect=false)** and commented  The `MapPropertySource.containsProperty()` method is not currently implemented directly, instead the `EnumerablePropertySource` implementation is used. This means for each `containsProperty()` call map keys are converted to an array then iterated.  We can improve performance by looking in the map directly.   ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/587a81617c79e5647f9d41cad2f5d43b6a0068f3, https://github.com/spring-projects/spring-framework/commit/e71fbb9f46cd3bd49b68ef30a156bc0715bd979e, https://github.com/spring-projects/spring-framework/commit/752574de1d529eb9eff413b0bffc2c51b5180012, https://github.com/spring-projects/spring-framework/commit/65cc57dabbbba7a1c9c558ce3bfb9beb9d63f736","closed","type: enhancement,","spring-projects-issues","2014-09-18T23:16:12Z","2014-10-01T03:11:50Z"
"","16838","JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable() should apply stronger checks [SPR-12223]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12223](https://jira.spring.io/browse/SPR-12223?redirect=false)** and commented  Calling `JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()` always seems to return true.   ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2667956a30960e6683e794d8bcf9860319af3ad8, https://github.com/spring-projects/spring-framework/commit/7f8d6115980c9325ff4b5227843f1972b4d15e44, https://github.com/spring-projects/spring-framework/commit/2077388f383c9c57fcf9473b3def51dacea3cdf3","closed","type: enhancement,","spring-projects-issues","2014-09-18T23:07:21Z","2014-10-01T03:11:42Z"
"","16833","Support ordering of conditions [SPR-12219]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12219](https://jira.spring.io/browse/SPR-12219?redirect=false)** and commented  Some `Condition` implementations are inherently more expensive to run than others. For example, Spring Boot's `OnClassCondition` is very cheap, where as `OnBeanCondition` takes much longer to evaluate.  By ordering conditions and sorting them before evaluation we should be able to improve performance.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/70b5f319a956d2d6a89ac316c51e566a93856468","closed","type: enhancement,","spring-projects-issues","2014-09-17T21:12:30Z","2014-10-01T03:11:43Z"
"","16815","Consider backporting SPR-12128 (ImportAware with conditions) [SPR-12201]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12201](https://jira.spring.io/browse/SPR-12201?redirect=false)** and commented  We originally decided against backporting #16744 (see https://jira.spring.io/browse/SPR-12128?focusedCommentId=107465&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-107465) but we have since had a real Spring Boot issue raised with the same cause (https://github.com/spring-projects/spring-boot/issues/1530).  Can we reconsider if a backport might be worth it after all?  ---  **Affects:** 4.0.7  **Issue Links:** - #16744 Metadata provided by ImportAware ignores conditions and is dependent on the order of the configuration classes","closed","status: declined,","spring-projects-issues","2014-09-16T09:19:21Z","2019-01-11T17:27:09Z"
"","16741","Update reference docs table 29.1. (Cache SpEL available metadata) with @CachePut details [SPR-12125]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12125](https://jira.spring.io/browse/SPR-12125?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eee8184b29bd7c0989fe673e0bb3aee5f10b9423","closed","type: documentation,","spring-projects-issues","2014-08-26T14:15:19Z","2014-09-04T05:31:19Z"
"","16734","OpenEntityManagerInViewInterceptor doesn't always close connections with WildFly 8 [SPR-12118]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12118](https://jira.spring.io/browse/SPR-12118?redirect=false)** and commented  This particular issue came up when testing a Spring Boot application but I eventually tracked it down to the use of `OpenEntityManagerInViewInterceptor`. It's very hard to replicate and I'm not totally sure if the issue is with Spring, WildFly or a combination of both.  I'll attach an issue project which will explain more.  ---  **Affects:** 4.1 RC2  **Issue Links:** - #13599 readOnly transaction doesn't work with JPA and Hibernate 4  **Referenced from:** commits https://github.com/spring-projects/spring-boot/commit/6ee18fbabd2770a8fcbc3dcdb4427baffa0e120b","closed","type: regression,","spring-projects-issues","2014-08-25T09:12:51Z","2019-01-11T17:24:52Z"
"","16731","PropertySource named cannot be added relative to itself (@PropertySource processing fails) [SPR-12115]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12115](https://jira.spring.io/browse/SPR-12115?redirect=false)** and commented  Commit 7c6088861f9e59f4e29c7f9d47a2cf467c4e8cd6 causes issues when the same property is declared on a `@Configuration` class and a `@Import`ed class. Spring Boot's `PropertySourcesBindingTests` highlights the issue.  ``` java.lang.IllegalStateException: Failed to load ApplicationContext 	at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:91) 	at org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:74) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:116) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:82) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:212) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:199) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:251) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:253) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:216) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:82) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:60) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:67) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:162) 	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264) 	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) 	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124) 	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200) 	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153) 	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Failed to process import candidates for configuration class [org.springframework.boot.bind.PropertySourcesBindingTests$TestConfig]; nested exception is java.lang.IllegalArgumentException: PropertySource named [class path resource [override.properties]] cannot be added relative to itself 	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:485) 	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:269) 	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:223) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:190) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:157) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:307) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:240) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:462) 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:707) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:324) 	at org.springframework.boot.test.SpringApplicationContextLoader.loadContext(SpringApplicationContextLoader.java:107) 	at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:63) 	at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:83) 	at org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:74) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:116) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:82) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:212) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:199) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:251) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:253) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:216) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:82) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:60) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:67) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:162) 	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264) 	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) 	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124) 	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200) 	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153) 	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) Caused by: java.lang.IllegalArgumentException: PropertySource named [class path resource [override.properties]] cannot be added relative to itself 	at org.springframework.util.Assert.isTrue(Assert.java:65) 	at org.springframework.core.env.MutablePropertySources.assertLegalRelativeAddition(MutablePropertySources.java:204) 	at org.springframework.core.env.MutablePropertySources.addBefore(MutablePropertySources.java:127) 	at org.springframework.context.annotation.ConfigurationClassParser.registerPropertySources(ConfigurationClassParser.java:376) 	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:249) 	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:223) 	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:476) 	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:269) 	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:223) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:190) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:157) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:307) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:240) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:462) 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:707) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:324) 	at org.springframework.boot.test.SpringApplicationContextLoader.loadContext(SpringApplicationContextLoader.java:107) 	at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:63) 	at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:83) 	at org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:74) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:116) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:82) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:212) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:199) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:251) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:253) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:216) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:82) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:60) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:67) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:162) 	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264) 	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) 	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124) 	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200) 	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153) 	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) ```  ---  **Affects:** 4.1 GA  **Issue Links:** - #16260 `@PropertySource` locations are being dropped in ConfigurationClassParser processPropertySource - #16727 PropertySources added via `@PropertySource` aren't available in the environment during component scanning - #16726 Placeholder resolution within `@PropertySource` resource locations can not resolve properties from prior sources  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9dfbc5326b17ab48a0335efa4d82e15e6df0dfae, https://github.com/spring-projects/spring-framework/commit/84564a0c7b6c34cec4beede6ee75078a6073abb9","closed","in: core,","spring-projects-issues","2014-08-21T21:19:59Z","2019-01-13T05:45:56Z"
"","16711","PathMatchingResourcePatternResolver cannot search for ""classpath*"" patterns in a jar file roots [SPR-12095]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12095](https://jira.spring.io/browse/SPR-12095?redirect=false)** and commented  When using the `PathMatchingResourcePatternResolver` against a standard `URLClassLoader` patterns of the form `classpath*:somefile*.properties` will not pick up resources from JAR files.  This is due to `findAllClassPathResources` calling `ClassLoader.getResources("""")` which unfortunately doesn't seem to include JAR URLs in the result.  Spring Boot encountered this issue and created a workaround in [commit eb721b1e](https://github.com/spring-projects/spring-boot/commit/eb721b1e9f4dd9fe6dc682e3966c7ea53fceef06) which might be generally applicable.  ---  **Affects:** 4.0.6  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/1378  **Issue Links:** - #17521 Regression: DLL handled as classpath resource - #10961 PathMatchingResourcePatternResolver should close jar file from JarURLConnection if not cached - #18260 PathMatchingResourcePatternResolver does not consider manifest based classpaths  **Referenced from:** commits https://github.com/spring-projects/spring-boot/commit/650e326ae7f0047b42ad837f04d3a11cae754658","closed","type: enhancement,","spring-projects-issues","2014-08-18T13:09:28Z","2019-01-11T18:16:51Z"
"","16627","Spring 4.1 schema issues [SPR-12011]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12011](https://jira.spring.io/browse/SPR-12011?redirect=false)** and commented  4.1 Schema files are missing for the jdbc and oxm modules. The generated schema zip also appears to contain duplicate entries for some files.  ---  **Affects:** 4.1 RC1  **Issue Links:** - #16606 Create missing 4.1 XSDs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/32975be2a2a5e260b020b3dc1b75d9d7576939da, https://github.com/spring-projects/spring-framework/commit/dd2bf28a4f2c20cc6510266f245c619755e851ba","closed","type: bug,","spring-projects-issues","2014-07-18T10:28:11Z","2019-01-11T18:21:09Z"
"","16619","StringUtils.commaDelimitedListToSet and removeDuplicateStrings should preserve original order [SPR-12003]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-12003](https://jira.spring.io/browse/SPR-12003?redirect=false)** and commented  As noticed by Gary Russell, StringUtils.commaDelimitedListToSet uses a TreeSet which will sort results. A LinkedHashSet might be a better option,  https://github.com/spring-projects/spring-boot/commit/aa38d33404829b426699e4723eee62bf97d6ca2f#commitcomment-7017880   ---  **Affects:** 4.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/783cb2c438716304769fb3861078e6e6fabf1a95","closed","type: enhancement,","spring-projects-issues","2014-07-16T23:13:19Z","2015-05-26T01:15:27Z"
"","16590","Revert SPR-11973 when bugfix verified in JDK 1.8.0_20 [SPR-11974]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11974](https://jira.spring.io/browse/SPR-11974?redirect=false)** and commented  ---  **Issue Links:** - #16589 JDK Bug causes build failure with JDK 1.8.0_20 build b05","closed","type: task,","spring-projects-issues","2014-07-07T19:06:50Z","2019-01-11T22:25:48Z"
"","16589","JDK Bug causes build failure with JDK 1.8.0_20 build b05 [SPR-11973]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11973](https://jira.spring.io/browse/SPR-11973?redirect=false)** and commented  This bug: https://bugs.openjdk.java.net/browse/JDK-8039469 causes annotation warning which fail the build when using JDK 1.8.0_20 build b05.  ---  **Affects:** 4.0.5  **Issue Links:** - #16590 Revert SPR-11973 when bugfix verified in JDK 1.8.0_20  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7dcc01e69b5ed8dfc61e152185b2081dd73318fe, https://github.com/spring-projects/spring-framework/commit/c0815407bb03e91c9621f9b1f0864c384c9a9ef7, https://github.com/spring-projects/spring-framework/commit/df3b1f25655032d5e987e11f7061c60cb56c0740, https://github.com/spring-projects/spring-framework/commit/ea16ce0aa0c1474dc0c9fc0b997182299c41bcf9","closed","type: task,","spring-projects-issues","2014-07-07T19:04:53Z","2019-01-11T22:25:44Z"
"","16513","Improve performance of ReflectionUtils.isCglibRenamedMethod [SPR-11894]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11894](https://jira.spring.io/browse/SPR-11894?redirect=false)** and commented  Whilst looking at some performance issues with Spring Boot I noticed that `ReflectionUtils.isCglibRenamedMethod` gets called a lot (mainly from `getUniqueDeclaredMethods`).  Using the pattern matcher is quite slow so we could probably improve performance by only running the matcher when the method name starts with `CGLIB`.   ---  **Affects:** 3.2.9, 4.0.5  **Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-06-20T11:48:27Z","2014-07-08T00:21:29Z"
"","16496","MBeanExportConfiguration.SpecificPlatform never calls afterPropertiesSet() [SPR-11877]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11877](https://jira.spring.io/browse/SPR-11877?redirect=false)** and commented  Looking at `MBeanExportConfiguration.SpecificPlatform` it appears that the WEBLOGIC and WEBSPHERE versions never call `afterPropertiesSet`   ---  **Affects:** 3.2.9, 4.0.5  **Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)","closed","type: bug,","spring-projects-issues","2014-06-13T13:08:53Z","2014-07-08T00:21:25Z"
"","17027","Add a getEncryptedProperty method in the PropertyResolver interface [SPR-12420]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-12420](https://jira.spring.io/browse/SPR-12420?redirect=false)** and commented  So I opened this issue on Apache Commons Configuration:  https://issues.apache.org/jira/browse/CONFIGURATION-565  several months ago, and I thought It would be nice if Spring had the same feature. Basically I want to store my passwords in a property file, but I don't want to store them unencrypted. So what I would like to propose a new method in the `PropertyResolver` interface called `getEncryptedProperty`.  So basically we need a way to inject some encryptor (like `StandardPBEStringEncryptor`) at some point and then the `Environment` could use it to decrypt the property.   ---  6 votes, 10 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-11-11T13:08:31Z","2019-01-12T00:18:14Z"
"","16378","@ComponentScan to support regex basePackages [SPR-11756]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-11756](https://jira.spring.io/browse/SPR-11756?redirect=false)** and commented  Hi guys,  I have a `@Configuration` for which I have defined a `@ComponentScan` like this:  ``` @Configuration @ComponentScan(basePackages = {""com.test.core.config""}) ```  because I want only the classes which are in a package whose name contains `core` to be scanned. So fae it all works fine - I have my beans registered, and the application server starts fine.  Unfortunately I'm building a platform, so I don't really know what the prefix of the package will be (`com.test` in this case) so I decided to change the annotation to this:  ``` @Configuration @ComponentScan(basePackages = {""*.core.*""}) ```  and I start getting exceptions like this:  ``` Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'myTestService' is defined ```  I read the documentation and saw that you can add regex to the name of the classes to be scanned, but there's no way to provide a regex to the name of the package. So my proposal is to add a regex to the names of the packages to be scanned.   ---  7 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-05-03T11:50:36Z","2019-01-12T00:19:50Z"
"","16596","TransactionSynchronizationManager uses static ThreadLocals for synchronizations - bad design [SPR-11980]","**[Pavel Kostelnik](https://jira.spring.io/secure/ViewProfile.jspa?name=koszta5)** opened **[SPR-11980](https://jira.spring.io/browse/SPR-11980?redirect=false)** and commented  There is a design flaw in Transaction handling of spring-jdbc. We have the following setup: 1. scheduled java programs running in sandbox using spring-jdbc and transporting data 2. the flow of the program is    #1 wrapping utility thread do some utility logging and other logic    #2 call processing method of java program    #3 this method uses spring-jdbc with transactions (we need to control them directly from code using DataSourceTransactionManager).    #4 The transactionManager instance is bound to datasource to a different DS      #5 process data    #6 return to original utilityThread.  Now if transactions were enabled in phase #3, #4, #5 then they still remain active even when using JDBC template with a COMPLETELY different datasource.  It is a really bad design to have static ThreadLoacal variable hold synchronizations... (see below code from TransactionSynchronizationManager): private static final ThreadLocal synchronizations = new NamedThreadLocal(""Transaction synchronizations"");  What is even weirder is that when creating a transaction manager you create it like this: transactionManager = new DataSourceTransactionManager(); transactionManager.setDataSource(myInProcessDS);  Now any reasonable person would assume that this binds that manager only to that one DS. But since the variable is static and threadLocal it affects the whole thread.  This is very silly and I suggest that Transaction manager keeps the variable bound to DataSource + Thread and not to Thread only. Plus I am not sure if it really has to remain static.    ---  **Affects:** 3.1.1  1 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-07-10T04:25:43Z","2019-01-12T02:29:10Z"
"","17102","SpringValidatorAdapter does not export payload attribute with JSR 303 validation [SPR-12496]","**[Paul Wheeler](https://jira.spring.io/secure/ViewProfile.jspa?name=p_wheel)** opened **[SPR-12496](https://jira.spring.io/browse/SPR-12496?redirect=false)** and commented  SpringValidatorAdapter does not export payload attribute with JSR 303 validation  The payload attribute is designed to carry metadata information that can be consumed by a validation client, so it doesn't make sense not to export this information.  See: * https://docs.oracle.com/javaee/6/api/javax/validation/Payload.html * For example usage -  https://docs.jboss.org/hibernate/validator/4.1/reference/en-US/html/validator-customconstraints.html  internalAnnotationAttributes should not include ""payload"".  Current code:  ``` static {      internalAnnotationAttributes.add(""message"");      internalAnnotationAttributes.add(""groups"");      internalAnnotationAttributes.add(""payload""); } ```  Should be:  ``` static {      internalAnnotationAttributes.add(""message"");      internalAnnotationAttributes.add(""groups""); } ```    ---  **Affects:** 3.1.4, 4.1.2","closed","status: bulk-closed,","spring-projects-issues","2014-12-02T08:49:33Z","2019-01-12T03:31:10Z"
"","16506","Spring 3.2.9 breaks JBoss EAP 5.1.1 VFS compatibility [SPR-11887]","**[Patrick Decat](https://jira.spring.io/secure/ViewProfile.jspa?name=pdecat)** opened **[SPR-11887](https://jira.spring.io/browse/SPR-11887?redirect=false)** and commented  Hi,  we just upgraded from Spring 3.2.8 to 3.2.9, and it breaks all of our webapps with JBoss EAP 5.1.1.  It seems to be related to treating VFS URLs as JARs.  ``` 14:38:14,214 ERROR [[/webapp]] Exception lors de l'envoi de l'évènement contexte initialisé (context initialized) à l'instance de classe d'écoute (listener) org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.BeanDefinitionStoreException: I/O failure during classpath scanning; nested exception is java.util.zip.ZipException: error in opening zip file 	at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:302) 	at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:242) 	at org.springframework.context.annotation.ComponentScanBeanDefinitionParser.parse(ComponentScanBeanDefinitionParser.java:84) 	at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:73) 	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1438) 	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1428) 	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:195) 	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:139) 	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:108) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180) 	at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:125) 	at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:94) 	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:130) 	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:537) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:451) 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:410) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:112) 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3910) 	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4389) 	at org.jboss.web.tomcat.service.deployers.TomcatDeployment.performDeployInternal(TomcatDeployment.java:321) 	at org.jboss.web.tomcat.service.deployers.TomcatDeployment.performDeploy(TomcatDeployment.java:145) 	at org.jboss.web.deployers.AbstractWarDeployment.start(AbstractWarDeployment.java:461) 	at org.jboss.web.deployers.WebModule.startModule(WebModule.java:122) 	at org.jboss.web.deployers.WebModule.start(WebModule.java:97) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:157) 	at org.jboss.mx.server.Invocation.dispatch(Invocation.java:96) 	at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) 	at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) 	at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:668) 	at org.jboss.system.microcontainer.ServiceProxy.invoke(ServiceProxy.java:206) 	at com.sun.proxy.$Proxy38.start(Unknown Source) 	at org.jboss.system.microcontainer.StartStopLifecycleAction.installAction(StartStopLifecycleAction.java:42) 	at org.jboss.system.microcontainer.StartStopLifecycleAction.installAction(StartStopLifecycleAction.java:37) 	at org.jboss.dependency.plugins.action.SimpleControllerContextAction.simpleInstallAction(SimpleControllerContextAction.java:62) 	at org.jboss.dependency.plugins.action.AccessControllerContextAction.install(AccessControllerContextAction.java:71) 	at org.jboss.dependency.plugins.AbstractControllerContextActions.install(AbstractControllerContextActions.java:51) 	at org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348) 	at org.jboss.system.microcontainer.ServiceControllerContext.install(ServiceControllerContext.java:297) 	at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1652) 	at org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:938) 	at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1082) 	at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:988) 	at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:826) 	at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:556) 	at org.jboss.system.ServiceController.doChange(ServiceController.java:688) 	at org.jboss.system.ServiceController.start(ServiceController.java:460) 	at org.jboss.system.deployers.ServiceDeployer.start(ServiceDeployer.java:163) 	at org.jboss.system.deployers.ServiceDeployer.deploy(ServiceDeployer.java:99) 	at org.jboss.system.deployers.ServiceDeployer.deploy(ServiceDeployer.java:46) 	at org.jboss.deployers.spi.deployer.helpers.AbstractSimpleRealDeployer.internalDeploy(AbstractSimpleRealDeployer.java:62) 	at org.jboss.deployers.spi.deployer.helpers.AbstractRealDeployer.deploy(AbstractRealDeployer.java:55) 	at org.jboss.deployers.plugins.deployers.DeployerWrapper.deploy(DeployerWrapper.java:179) 	at org.jboss.deployers.plugins.deployers.DeployersImpl.doDeploy(DeployersImpl.java:1454) 	at org.jboss.deployers.plugins.deployers.DeployersImpl.doInstallParentFirst(DeployersImpl.java:1172) 	at org.jboss.deployers.plugins.deployers.DeployersImpl.doInstallParentFirst(DeployersImpl.java:1193) 	at org.jboss.deployers.plugins.deployers.DeployersImpl.install(DeployersImpl.java:1113) 	at org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348) 	at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1652) 	at org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:938) 	at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1082) 	at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:988) 	at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:826) 	at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:556) 	at org.jboss.deployers.plugins.deployers.DeployersImpl.process(DeployersImpl.java:789) 	at org.jboss.deployers.plugins.main.MainDeployerImpl.process(MainDeployerImpl.java:699) 	at org.jboss.system.server.profileservice.repository.MainDeployerAdapter.process(MainDeployerAdapter.java:117) 	at org.jboss.system.server.profileservice.repository.ProfileDeployAction.install(ProfileDeployAction.java:70) 	at org.jboss.system.server.profileservice.repository.AbstractProfileAction.install(AbstractProfileAction.java:53) 	at org.jboss.system.server.profileservice.repository.AbstractProfileService.install(AbstractProfileService.java:403) 	at org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348) 	at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1652) 	at org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:938) 	at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1082) 	at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:988) 	at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:778) 	at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:543) 	at org.jboss.system.server.profileservice.repository.AbstractProfileService.registerProfile(AbstractProfileService.java:308) 	at org.jboss.system.server.profileservice.ProfileServiceBootstrap.start(ProfileServiceBootstrap.java:256) 	at org.jboss.bootstrap.AbstractServerImpl.start(AbstractServerImpl.java:461) 	at org.jboss.Main.boot(Main.java:221) 	at org.jboss.Main$1.run(Main.java:556) 	at java.lang.Thread.run(Thread.java:662) Caused by: java.util.zip.ZipException: error in opening zip file 	at java.util.zip.ZipFile.open(Native Method) 	at java.util.zip.ZipFile.(ZipFile.java:127) 	at java.util.jar.JarFile.(JarFile.java:136) 	at java.util.jar.JarFile.(JarFile.java:73) 	at org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingJarResources(PathMatchingResourcePatternResolver.java:458) 	at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:344) 	at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:268) 	at org.springframework.context.support.AbstractApplicationContext.getResources(AbstractApplicationContext.java:1269) 	at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:257) 	... 92 more ```  The culprit seems to be this change:  ``` @@ -255,23 +255,22 @@ public abstract class ResourceUtils {                                                                                                                                                                                                                */         public static boolean isFileURL(URL url) {                 String protocol = url.getProtocol(); -               return (URL_PROTOCOL_FILE.equals(protocol) || protocol.startsWith(URL_PROTOCOL_VFS));                                                                                                                                                             +               return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFS.equals(protocol));                                                                                                                                                                         }          /**          * Determine whether the given URL points to a resource in a jar file,          * that is, has protocol ""jar"", ""zip"", ""wsjar"" or ""code-source"". -        * ""zip"" and ""wsjar"" are used by BEA WebLogic Server and IBM WebSphere, respectively,                                                                                                                                                                  -        * but can be treated like jar files. The same applies to ""code-source"" URLs on Oracle                                                                                                                                                                    +        * ""zip"" and ""wsjar"" are used by WebLogic Server and WebSphere, respectively,                                                                                                                                                                          +        * but can be treated like jar files. The same applies to ""code-source"" URLs on                                                                                                                                                                                    * OC4J, provided that the path contains a jar separator.          * @param url the URL to check          * @return whether the URL has been identified as a JAR URL          */         public static boolean isJarURL(URL url) {                 String protocol = url.getProtocol(); -               return (URL_PROTOCOL_JAR.equals(protocol) ||                                                                                                                                                                                                      -                               URL_PROTOCOL_ZIP.equals(protocol) ||                                                                                                                                                                                              -                               URL_PROTOCOL_WSJAR.equals(protocol) ||                                                                                                                                                                                            +               return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) ||                                                                                                                                                                 +                               URL_PROTOCOL_WSJAR.equals(protocol) || URL_PROTOCOL_VFSZIP.equals(protocol) ||                                                                                                                                                                                    (URL_PROTOCOL_CODE_SOURCE.equals(protocol) && url.getPath().contains(JAR_URL_SEPARATOR)));         } ```  ---  **Affects:** 3.2.9  **Reference URL:** https://github.com/spring-projects/spring-framework/commit/be6b54fe8ba27b80f8d3b32a4d9957a808279c22  **Issue Links:** - #16299 UrlResource.exists() does not properly detect JBoss vfszip resources  **Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)","closed","in: core,","spring-projects-issues","2014-06-19T05:40:57Z","2019-01-11T22:15:56Z"
"","16897","CompositePropertySource should extend EnumerablePropertySource [SPR-12292]","**[pascal gehl](https://jira.spring.io/secure/ViewProfile.jspa?name=paskos)** opened **[SPR-12292](https://jira.spring.io/browse/SPR-12292?redirect=false)** and commented  This affects more spring-boot but the root of the problem is in CompositePropertySource.  Spring-boot PropertySourceUtils.getSubProperties is used in RelaxedPropertyResolver.getSubProperties to extract a subset of properties starting with a prefix.  PropertySourceUtils.getSubProperties only works on EnumerablePropertySource as  ``` public static Map getSubProperties(PropertySources propertySources, String rootPrefix, String keyPrefix) { 	RelaxedNames keyPrefixes = new RelaxedNames(keyPrefix); 	Map subProperties = new LinkedHashMap(); 	for (PropertySource source : propertySources) { 		if (source instanceof EnumerablePropertySource) { 			for (String name : ((EnumerablePropertySource) source).getPropertyNames()) { 				String key = PropertySourceUtils.getSubKey(name, rootPrefix, keyPrefixes); 				if (key != null) { 					subProperties.put(key, source.getProperty(name)); 				} 			} 		} 	} 	return Collections.unmodifiableMap(subProperties); } ```  Unfortunately that code ignores all `@PropertySource` annotated classes because the resulting instances are CompositePropertySource.  This makes it impossible to declare `@PropertySource` annotated classes containing prefixed configurations and later on extract all those configuration properties using RelaxedPropertyResolver.getSubProperties.  This issue could be fixed by having CompositePropertySource implement EnumerablePropertySource.  ---  **Affects:** 4.0.7, 4.1.1  **Issue Links:** - #17385 CompositePropertySource doesn't fulfil EnumerablePropertySource  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9d969587ab6f60c6f24b2c49e94b5858e588cb9a","closed","type: enhancement,","spring-projects-issues","2014-10-02T07:14:24Z","2019-01-11T17:35:41Z"
"","16940","When using HttpComponentsClientHttpRequestFactory, setting a proxy through RequestConfig should not be ignored [SPR-12335]","**[Olivier Orand](https://jira.spring.io/secure/ViewProfile.jspa?name=olivier.o)** opened **[SPR-12335](https://jira.spring.io/browse/SPR-12335?redirect=false)** and commented  Hi, When using httpComponentsClientHttpRequestFactory, setting a proxy through RequestConfig is ignored. But when this requestConfig is used by HttpClient, it isn't ignored. It seems to be a ""wiring"" issue between Spring and HttpClient. As workaround, setting a custom route planner can be use. Maybe there is a better workaround.  The maven project demonstrates a working case with HttpClient and failure with RestTemplate and with httpComponentsClientHttpRequestFactory. Test project start an in memory proxy, and try to access a url resolvable only using proxy.  Regards, Olivier  ---  **Affects:** 4.0.5, 4.1.1  **Reference URL:** https://github.com/Orange-OpenSource/spring-http-proxy-testcase  **Issue Links:** - #17144 Configured RequestConfig in HttpClient gets overwritten by default (_**""is duplicated by""**_) - #15739 Upgrade HttpComponentsHttpInvokerRequestExecutor to require Apache HttpComponents 4.3  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-10-15T01:16:26Z","2019-01-11T19:14:18Z"
"","16787","HttpHeaders should accept empty Content-Type header [SPR-12173]","**[Oliver Otzen](https://jira.spring.io/secure/ViewProfile.jspa?name=oliver.otzen)** opened **[SPR-12173](https://jira.spring.io/browse/SPR-12173?redirect=false)** and commented  If a client is sending a POST message with an empty header 'Content-Type' the request fails with a IllegalArgumentException. In HttpHeaders Line 305 only null values will be checked, but not empty values. In the RFC 7231 it is not explicitly forbidden to send an empty 'Content-Type'-header field. http://tools.ietf.org/html/rfc7231#section-3.1.1.5  ``` Caused by: java.lang.IllegalArgumentException: 'mediaType' must not be empty 	at org.springframework.util.Assert.hasLength(Assert.java:136) 	at org.springframework.http.MediaType.parseMediaType(MediaType.java:688) 	at org.springframework.http.HttpHeaders.getContentType(HttpHeaders.java:305) 	at org.springframework.http.server.ServletServerHttpRequest.getHeaders(ServletServerHttpRequest.java:106) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.writeWithMessageConverters(AnnotationMethodHandlerAdapter.java:1026) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.handleHttpEntityResponse(AnnotationMethodHandlerAdapter.java:1014) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.getModelAndView(AnnotationMethodHandlerAdapter.java:940) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:441) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:428) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936) ```  Example POST from chrome browser:  > POST /fileUpload HTTP/1.1 > Host: www.example.org > Connection: keep-alive > Content-Length: 393 > Origin: http://www.example.org > User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36 > filename: YXBpLWRvY3M= > **Content-Type:** > Accept: \*/\* > Accept-Encoding: gzip,deflate,sdch > Accept-Language: de-DE,de;q=0.8,en-US;q=0.6,en;q=0.4  ---  **Affects:** 3.2.4  **Issue Links:** - #16810 Spring HTTP clients do not enforce RFC 6265 (cookies in a single header) - #18881 Spring Web should process requests with empty/invalid mime type  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d501137f4ee9325693d286045531d58bad1c709c, https://github.com/spring-projects/spring-framework/commit/a1c0905a7cd5a6e3f3a9cd74b13b39830cf14a14, https://github.com/spring-projects/spring-framework/commit/4ab27d83a1e1c89dbd39d0fedd09b64dff603cd3, https://github.com/spring-projects/spring-framework/commit/44c52a9096fae5557cb06ba8a00e4c0b49d5ab00, https://github.com/spring-projects/spring-framework/commit/70412a9d0a3fe69f0f8f05f6f668782868c72e3f, https://github.com/spring-projects/spring-framework/commit/afb034292423840ae041d69a4c659e3cf4d0b86e  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2014-09-10T01:28:24Z","2019-01-11T17:19:55Z"
"","17155","MockMvcBuilders should populate ServletContextAttribute WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE to enable view technologies use WebApplicationContextUtils.getRequiredWebApplicationContext(…) [SPR-12553]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12553](https://jira.spring.io/browse/SPR-12553?redirect=false)** and commented  Wehen setting up a `MockMvc` instance from a `WebApplicationContext` the `ServletContext` attribute `WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE` does not get populated. View technologies used for rendering views often lookup the `ApplicationContext` using `WebApplicationContextUtils.getRequiredWebApplicationContext(…)`. That method expects the `ApplicationContext` to be registered under said attribute.  I currently work around the issue by manually setting the attribute:  ```java context.getServletContext().setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, context); ```    ---  **Affects:** 4.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f6d2fe471a26fb6ff5894480f50dd55365e62f06, https://github.com/spring-projects/spring-framework/commit/32aafb21ffb10c8067f966ecbddbcad427e1e8e1, https://github.com/spring-projects/spring-framework/commit/33b9bd72cc4d3cb795fa547be7acff4e33435789","closed","type: enhancement,","spring-projects-issues","2014-12-18T04:03:09Z","2019-01-11T18:27:07Z"
"","17146","@SessionAttributes not populated when going directly to POST and redirecting while ignoreDefaultModelOnRedirect=true [SPR-12542]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12542](https://jira.spring.io/browse/SPR-12542?redirect=false)** and commented  I have a controller annotated with `@SessionAttributes(""cart"")` and q request handling method like this:  ```java @RequestMapping(value = ""/cart"", method = RequestMethod.POST) public String addToCart(@RequestParam(""product"") Long productId,  @ModelAttribute Cart cart) {     …    return ""redirect:…""; } ```  If the call to that controller method is the very first one made to that controller in the session, the `Cart` object is created by an `@ModelAttribute` annotated method and handed to the method execution. The `cart` is then not added to the session attributes if `ignoreDefaultModelOnRedirect=true` as `ModelFactory.updateModel(…)` looks up the `Model` from the `ModelAndViewContainer` which returns the redirect model for a redirect view.  Once you issue a request to a controller method not returning a redirect view, the `cart` is added to the session and looked up from it for the invocation of the method above. Thus subsequent modifications of the object transparently end up in the session.  We should make sure the default model is used to populate the session attributes independently from the view type that is returned.  ---  **Affects:** 4.0.8, 4.1.3  **Issue Links:** - #18617 ModelAndView is replaced when a RedirectView is used  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ea05e0b1add86317c13997678aa01bfb73476487","closed","type: bug,","spring-projects-issues","2014-12-12T07:10:48Z","2019-01-11T18:28:16Z"
"","17074","AbstractFactoryBean.afterPropertiesSet() shouldn't declare throws Exception [SPR-12468]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12468](https://jira.spring.io/browse/SPR-12468?redirect=false)** and commented  `AbstractFactoryBean.afterPropertiesSet()` is never going to throw an `Exception` but still declares `throws Exception` which forces subclasses into also declaring that clause which will be usually complained about by code quality tools like FindBugs.  Might be worth skimming through implementations of `InitializingBean` and check whether they really can thrown an `Exception` and remove the declaration otherwise.   ---  **Affects:** 4.0.8, 4.1.2","closed","type: enhancement,","spring-projects-issues","2014-11-25T23:51:36Z","2014-11-26T01:02:11Z"
"","17073","NotReadablePropertyException should take causing exception as constructor argument [SPR-12467]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12467](https://jira.spring.io/browse/SPR-12467?redirect=false)** and commented  `NotWritablePropertyException` takes a causing exception as constructor argument whereas `NotReadablePropertyException` does not. In case you extend `BeanWrapper` and want to customize `setPropertyValue(…)`/`getPropertyValue(…)` you can propagate potentially thrown exceptions in the setting case but not in the reading one.   ---  **Affects:** 4.0.8, 4.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/58bea23f1d78e5e20a2fb49d8352adeac4f608b6, https://github.com/spring-projects/spring-framework/commit/feb91e8366a5b95223ae32a8114a6c626a60cf6d  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-11-25T23:45:08Z","2014-12-09T02:49:29Z"
"","16998","ConfigurationClassUtils fails to introspect inner classes with dot name syntax (and silently ignores it) [SPR-12390]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12390](https://jira.spring.io/browse/SPR-12390?redirect=false)** and commented  `ConfigurationClassUtils.checkConfigurationClassCandidate(…)` tries to create a `MetadataReader` for the class name of the `BeanDefinition` to be checked. If that lookup fails (e.g. because one misspelled the classname in an XML configuration file), the resulting `IOException` will only appear in the debug logs.  As we're inspecting a `BeanDefinition` about to be used, not being able to create a `MetadataReader` indicates a more fundamental problem with the configuration and should probably be at least logged at a more severe log level.  Another option would be to fix the inconsistency in `ClassUtils` (ultimately used by the `MetadataReader` implementations) which currently has some methods (e.g. `forName(…)`) that mitigate different styles of demarcating an inner class (`.`-separated VS. `$`-separated) while some other methods (e.g. (`convertClassNameToResourcePath(…)`) don't seem to apply this mitigation.  ---  **Affects:** 3.2.11, 4.1.1  **Issue Links:** - #17002 Configuration class parsing should reuse metadata from AnnotatedBeanDefinition as far as possible  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/725ad0df50aec9f193f35f8a08244575214c8577, https://github.com/spring-projects/spring-framework/commit/bb6349f8ccc34350bd2daeeb66dcfd659ecbd8c3, https://github.com/spring-projects/spring-framework/commit/2d874d724b5418b35e5e396522fd7e087ee81817  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)","closed","in: core,","spring-projects-issues","2014-10-29T04:44:19Z","2019-01-11T19:23:35Z"
"","16977","Reference docs on Spring MVC method argument and return value types should mention Optional [SPR-12370]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12370](https://jira.spring.io/browse/SPR-12370?redirect=false)** and commented  The announcing blog post of 4.1 prominently mentions support for JDK 8's `Optional` in Spring MVC controller methods. However the documentation doesn't contain any hints to that.  [This section](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-return-types) might be a good place to add a few words.   ---  **Affects:** 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d5eb6694163dbe3202114a0a86f63435ccedf176","closed","type: task,","spring-projects-issues","2014-10-23T06:51:19Z","2015-02-26T12:46:42Z"
"","16891","Allow to define the sort order of media types to produce [SPR-12286]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12286](https://jira.spring.io/browse/SPR-12286?redirect=false)** and commented  Assuming you use the `produces` attribute in `@RequestMapping` with custom media types that include version numbers (to version representations).  `RequestMappingHandlerMapping` (actually `ProducesRequestCondition` in particular) sorts the `produces` expressions using a standard `Collections.sort(…)` which might create invalid orders (e.g. `v11` being considered ""older"" than `v2`) so that wrong media type is selected if the client doesn't send any `Accept` header.  ``` application/vnd.foo.v1+json application/vnd.foo.v2+json … application/vnd.foo.v11+json ```  Given these media types used in `produces` attributes, the one containing `v2` would be selected. It would be cool if there was a way to specify a custom `Comparator` on the `RequestMappingHandlerMapping` to tweak the sort order.   ---  **Affects:** 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/86d97baf65ef1547986ddb31eec0a7d684a7b6f3, https://github.com/spring-projects/spring-framework/commit/a011b360d1f4735de45c9cbd4a063e1c4196c244","closed","type: enhancement,","spring-projects-issues","2014-10-01T10:57:10Z","2014-11-17T06:42:30Z"
"","16759","Cache.get(Object key, Class type) should be more explicit about what to do in case of a type mismatch [SPR-12145]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12145](https://jira.spring.io/browse/SPR-12145?redirect=false)** and commented  The indicated method is pretty clear about the expected behavior for a variety of cases except a value being found with a non matching type. Implementations consistently throw `IllegalStateException` so it might be worthwhile to make this the official exception to be thrown in that case.   ---  **Affects:** 4.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/72d62a711364c5759ebd73dd6120f77153fe991c, https://github.com/spring-projects/spring-framework/commit/2f93759d1b1e7b83bb96e378a82e108a366911ce  **Backported to:** [4.0.7](https://github.com/spring-projects/spring-framework/milestone/119?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-09-03T03:29:00Z","2014-09-04T01:31:48Z"
"","16753","DefaultListableBeanFactory throws java.lang.SecurityException: Prohibited package name: java.util [SPR-12139]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12139](https://jira.spring.io/browse/SPR-12139?redirect=false)** and commented  The spring-data-commons project does not build with Java7  ``` java.lang.ExceptionInInitializerError 	at org.springframework.data.repository.support.RepositoriesUnitTests.setUp(RepositoriesUnitTests.java:67) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:601) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24) 	at org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:168) 	at org.junit.rules.RunRules.evaluate(RunRules.java:20) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.mockito.internal.runners.JUnit45AndHigherRunnerImpl.run(JUnit45AndHigherRunnerImpl.java:37) 	at org.mockito.runners.MockitoJUnitRunner.run(MockitoJUnitRunner.java:62) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) Caused by: java.lang.SecurityException: Prohibited package name: java.util 	at java.lang.ClassLoader.preDefineClass(ClassLoader.java:649) 	at java.lang.ClassLoader.defineClass(ClassLoader.java:785) 	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) 	at java.net.URLClassLoader.defineClass(URLClassLoader.java:449) 	at java.net.URLClassLoader.access$100(URLClassLoader.java:71) 	at java.net.URLClassLoader$1.run(URLClassLoader.java:361) 	at java.net.URLClassLoader$1.run(URLClassLoader.java:355) 	at java.security.AccessController.doPrivileged(Native Method) 	at java.net.URLClassLoader.findClass(URLClassLoader.java:354) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:423) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:356) 	at org.springframework.util.ClassUtils.forName(ClassUtils.java:246) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.(DefaultListableBeanFactory.java:119) ```  but it does with Java8 ...  This was added in master  ```java try { 			javaUtilOptionalClass = 					ClassUtils.forName(""java.util.Optional"", DefaultListableBeanFactory.class.getClassLoader()); 		} 		catch (ClassNotFoundException ex) { 			// Java 8 not available - Optional references simply not supported then. 		} ```    ---  **Issue Links:** - [DATACMNS-571](https://jira.spring.io/browse/DATACMNS-571) Move to JDK 8 for build","closed","in: core,","spring-projects-issues","2014-09-01T02:52:47Z","2019-01-12T16:34:43Z"
"","16696","Add support for transaction bound application events [SPR-12080]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12080](https://jira.spring.io/browse/SPR-12080?redirect=false)** and commented  Spring provides an `ApplicationEventPublisher` API that can be used to publish events to other application components. By default, the events are published synchronously using a `SimpleApplicationEventMulticaster` when invoking `ApplicationEventPublisher.publishEvent(…)` directly.  In user applications the events publish very often signal the outcome of a business action (e.g. ""user created""). Thus it's crucial that these events are only published **if** the transaction succeeds and thus also **after** the transactions has concluded.  In [this repository](https://github.com/olivergierke/spring-tx-events) I built a proof of concept implementation of an `ApplicationEventMulticaster` that registers a `TransactionSynchronization` for `ApplicationEvents` of a certain type (`TransactionBoundApplicationEvent` in my case). This way, the immediate multicasting is delayed to after the transaction commit.  This basically works and can be seen in action in the Spring RESTBucks example ([necessary configuration](https://github.com/olivergierke/spring-restbucks/blob/master/src/main/java/org/springsource/restbucks/Restbucks.java#L73), the [transaction-bound event](https://github.com/olivergierke/spring-restbucks/blob/master/src/main/java/org/springsource/restbucks/payment/OrderPaidEvent.java#L34) and [event throwing code](https://github.com/olivergierke/spring-restbucks/blob/master/src/main/java/org/springsource/restbucks/payment/PaymentServiceImpl.java#L72)). There are a few things that could be changed, added on top or improved:  - Instead of the type-based detection of transaction-bound events could be augmented by inspecting the event object for a dedicated annotation. - Currently the special `TransactionAwareApplicationEventMulticaster` has to be configured manually currently. However, it could probably registered automatically if the Spring transaction module is on the classpath. (I can also imagine Boot doing that kind of auto-configuration for now).  ---  **Issue Links:** - #15261 CDI-like transaction-aware events for (_**""is duplicated by""**_) - #16245 ApplicationListener-like annotation for consuming application events  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4741a12fdc43782cc14692f58f3213edc18add7f  0 votes, 13 watchers","closed","type: enhancement,","spring-projects-issues","2014-08-14T08:21:15Z","2019-01-11T18:17:18Z"
"","16695","BeanNameViewResolver should not try to use non-View beans [SPR-12079]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12079](https://jira.spring.io/browse/SPR-12079?redirect=false)** and commented  To resolve a view, `BeanNameViewResolver` checks for the presence of a bean with the view name and then looks it up using `context.getBean(name, View.class)`.  This throws an exception if the view name is the name of an arbitrary Spring bean by accident, which is not a `View`. I suggest to look up the bean instance without the type constraint and only return it if it really implements `View`. Alternatively, the `BeanNotOfRequiredTypeException` could be caught and handled by returning `null`.   ---  **Affects:** 3.2.10, 4.0.6, 4.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/42c090efa40f5f63122e1e4fce59882153b13c19, https://github.com/spring-projects/spring-framework/commit/626a5fe4eb329dc86cd57c4454bcb9141bd2fba0, https://github.com/spring-projects/spring-framework/commit/035a9b91d250e95b6ed8193fd25ccd0f1efb6d1f, https://github.com/spring-projects/spring-framework/commit/92bd240474fccfa7fd32e9a7707f628a846ac3cc","closed","type: enhancement,","spring-projects-issues","2014-08-12T23:57:11Z","2014-08-15T01:52:43Z"
"","16658","AbstractTypeHierarchyTraversingFilter should be more lenient when loading types [SPR-12042]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12042](https://jira.spring.io/browse/SPR-12042?redirect=false)** and commented  When traversing type hierarchies `AbstractTypeHierarchyTraversingFilter` creates new `MetadataReader` instances on the way through them. If a supertype of a type inspected is not even on the classpath, this will cause a `FileNotFoundException` when `SimpleMetadataReader` wants to access the `InputStream` of the `ClassPathResource`.  I suggest to consider these cases equivalent to the core inspected type not being loadable and thus a simple non-match.   ---  **Affects:** 4.0.6","closed","type: enhancement,","spring-projects-issues","2014-07-28T08:55:37Z","2014-08-15T01:52:41Z"
"","16642","ConcurrentMapCacheManager has interdependent setters [SPR-12026]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-12026](https://jira.spring.io/browse/SPR-12026?redirect=false)** and commented  `ConcurrentMapCacheManager`'s `setCacheNames(…)` transitively calls `isAllowNullValues()` which can be influenced by `setAllowNullValues(…)`. This means the order of the setter calls becomes important and is not guaranteed when the type is used in XML configuration.  We've got a similar issue reported for Spring Data Redis (see [DATAREDIS-328](https://jira.spring.io/browse/DATAREDIS-328)) and decided to provide a dedicated `FactoryBean` for usage in XML.  ---  **Affects:** 3.2.10, 4.0.6, 4.1 RC1  **Issue Links:** - #16736 GuavaCacheManager ignores cache specification due to eager initialization of internal cache map with static cache names - [DATAREDIS-328](https://jira.spring.io/browse/DATAREDIS-328) RedisCacheManager should not instantiate caches in setCacheNames()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/acbd61b87a2357f53e77c22b37fbffcae74693c7, https://github.com/spring-projects/spring-framework/commit/78484129f5e7ec4d384fbd34a55fc4f28ba497a8","closed","type: enhancement,","spring-projects-issues","2014-07-24T05:21:00Z","2019-01-11T18:20:49Z"
"","16576","TypedValue should have proper equals(…) / hashCode() methods [SPR-11960]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11960](https://jira.spring.io/browse/SPR-11960?redirect=false)** and commented  When implementing unit tests against custom `PropertyAccessor` and `MathodResolver` instances it would be helpful if `TypedValue` would adhere to value object semantics and be equal if the set value and type is equal.  ```java assertThat(new TypedValue(""value""), is(new TypedValued(""value""))); ```    ---  **Affects:** 3.2.9, 4.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6dbb46558547f72fe86781764ae7a086396c6322, https://github.com/spring-projects/spring-framework/commit/a8848cb6709fdbf4453b82aa9dea751fcc4516ff","closed","type: enhancement,","spring-projects-issues","2014-07-05T12:07:39Z","2014-07-08T00:21:29Z"
"","16541","Shared EntityManager should immediately throw TransactionRequiredException if no transaction in progress [SPR-11923]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11923](https://jira.spring.io/browse/SPR-11923?redirect=false)** and commented  Section 7.9.1 of the JPA spec states that in a container managed persistence context (that's what you get with `LocalContainerEntityManagerFactoryBean`), calls to `persist(…)`, `merge(…)`, etc. need to throw a `TransactionRequiredException` if there's no transaction in progress. However, we currently don't consider this at all which leads to the effect that code like this will not create an exception but also don't persist the entity:  ```java @Repository public class UserDao {      @PersistenceContext     private EntityManager em;      public void save(User user) {         em.persist(user);     } } ```  Additionally calling `em.flush()` will trigger the exception being thrown by the persistence provider but you might run into this scenario as the code relies on a transaction being started on a layer above. If that's forgotten, you get running (invalid) code, that's not barking at you in any way.  Of course this can be worked around by e.g. using Spring Data JPA (which has defaulting of transactions on the repository level) but I think we should adhere to the spec here.  ---  **Affects:** 3.2.9, 4.0.5  **Issue Links:** - #18944 Shared EntityManager's target lookup doesn't work with Spring Data's ChainedTransactionManager - #18411 Regression: Shared EntityManager proxy insists on actualTransactiveActive flag even with SYNCHRONIZATION_NEVER - #17834 Inconsistent JPA behavior using no transaction, propagation SUPPORTS and OpenEntityManager pattern","closed","type: enhancement,","spring-projects-issues","2014-06-27T06:39:20Z","2019-01-11T22:19:53Z"
"","16536","HttpHeaders fails to return getAllow() if it was previously set to an empty collection [SPR-11917]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11917](https://jira.spring.io/browse/SPR-11917?redirect=false)** and commented  ```java HttpHeaders headers = new HttpHeaders(); headers.setAllow(Collections. emptySet()); headers.getAllow(); ```  This throws an exception during the accessor call, as it can't create an `HttpMethod` instance from the empty `String`. It should rather return an empty `Set` instead.  ``` java.lang.IllegalArgumentException: No enum constant org.springframework.http.HttpMethod.   at java.lang.Enum.valueOf(Enum.java:236)   at org.springframework.http.HttpMethod.valueOf(HttpMethod.java:27)   at org.springframework.http.HttpHeaders.getAllow(HttpHeaders.java:229)   … ```    ---  **Affects:** 3.2.9, 4.0.5  **Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)","closed","type: bug,","spring-projects-issues","2014-06-25T10:46:28Z","2014-07-08T00:21:25Z"
"","16510","Set Jackson FAIL_ON_UNKNOWN_PROPERTIES property to false by default [SPR-11891]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11891](https://jira.spring.io/browse/SPR-11891?redirect=false)** and commented  Jackson's `ObjectMapper` has a weird default setting to completely fail the deserialization if a single unknown property is encountered. This violates [Postel's law](http://en.wikipedia.org/wiki/Robustness_principle) as the server could still successfully create an instance of the expected type. Actually this kind of resilient behavior is why people might choose JSON over the rather schema dominated XML world.  I've filed a ticket for that issue in [Jackson itself](https://github.com/FasterXML/jackson-databind/issues/493) but I thought it might be worth taking the lead here. I know changing defaults is kind of a risky thing to do but as [Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel) indicated in the comments of said ticket, it would actually increase resilience of already existing code.  ---  **Affects:** 4.0.5  **Issue Links:** - #16857 Create builder for Jackson ObjectMapper (_**""depends on""**_) - #19575 `@JsonIgnoreProperties`(ignoreUnknown=false) is not working in Spring 4.2.8 and upper version - #16793 Set Jackson DEFAULT_VIEW_INCLUSION property to false by default  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/42aef5f5dcc977334a1800243ea1d8dc64f0c8a2  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2014-06-20T05:52:22Z","2021-08-11T14:32:35Z"
"","16475","UriComponentsBuilder#fromHttpRequest should consider RFC-7239 Forwarded headers [SPR-11856]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11856](https://jira.spring.io/browse/SPR-11856?redirect=false)** and commented  See [the spec](http://tools.ietf.org/html/rfc7239#section-4) for details. tl;dr - a standardized version of what previously has been `X-Forwarded-…`.  ---  **Issue Links:** - #20809 spring-web CORS requires X-Forwarded-Port  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4611d058c8e702a2bddc5ecfab7241860b3b2e38","closed","type: enhancement,","spring-projects-issues","2014-06-07T04:37:02Z","2019-01-11T22:17:10Z"
"","16474","ServletUriComponentsBuilder should consider X-Forwarded-Host [SPR-11855]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11855](https://jira.spring.io/browse/SPR-11855?redirect=false)** and commented  See [this change](https://github.com/spring-projects/spring-hateoas/commit/2c6fa4d1b331295d891c327c0aa12e74208465a7) in Spring HATEOAS. An `X-Forwarded-Port` has to trump a potentially available attached port in `X-Forwarded-Host`. IIRC, the latter is really only allowed to contain the host name.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9f4d4d18297581ad770a6281097f733c4f6342d3","closed","type: enhancement,","spring-projects-issues","2014-06-07T04:35:23Z","2014-07-18T10:16:27Z"
"","16473","Add HTTP status code 308 Permanent Redirect [SPR-11854]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11854](https://jira.spring.io/browse/SPR-11854?redirect=false)** and commented  See [RFC7238](http://tools.ietf.org/html/rfc7238).   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b214db3fc8bfac8a179fe439e7e3b8485bf512c2","closed","type: enhancement,","spring-projects-issues","2014-06-07T04:25:36Z","2014-07-18T10:16:38Z"
"","16465","Reference documentation doesn't mention @ComponentScan at all [SPR-11846]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11846](https://jira.spring.io/browse/SPR-11846?redirect=false)** and commented  Searching for `@ComponentScan` on [the reference docs](http://docs.spring.io/spring/docs/4.0.5.RELEASE/spring-framework-reference/htmlsingle/) doesn't reveal any results at all.   ---  **Affects:** 4.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9ba9f562f2a75cea06db81eb8e947e6d4153ca43","closed","type: documentation,","spring-projects-issues","2014-06-03T11:22:04Z","2014-07-18T10:16:33Z"
"","16385","Regression: GenericTypeResolver returns null for partially resolvable type arguments [SPR-11763]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11763](https://jira.spring.io/browse/SPR-11763?redirect=false)** and commented  Assume the following types:  ```java interface Repository {}  interface IdFixingRepository extends Repository {} ```  Trying to resolve the type arguments of `IdFixingRepository` using `GenericTypeResolver` returns `null` on Spring 4, works fine with latest 3.2.8. The test below fails starting with version 4.0.  ``` asserNotNull(GenericTypeResolver.resolveTypeArguments(IdFixingRepository.class, Repository.class)); ```  ---  **Affects:** 4.0.4  **Issue Links:** - [DATACMNS-501](https://jira.spring.io/browse/DATACMNS-501) ID type not detected for intermediate repository interface - #15679 GenericTypeResolver.resolveTypeArguments(…) returns Object for raw types  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bea34ea41c6dde5aac598372268cdb6abc6e9807, https://github.com/spring-projects/spring-framework/commit/fccec210b4fecbbc3ab758d127a95fb741b21175","closed","in: core,","spring-projects-issues","2014-05-06T00:24:13Z","2019-01-11T21:16:37Z"
"","16366","ConfigurationClassParser.invokeAwareMethods(…) does not consider EnvironmentAware [SPR-11744]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11744](https://jira.spring.io/browse/SPR-11744?redirect=false)** and commented  In Spring 3.2.x `ConfigurationClassParser.invokeAwareMethods(…)` does not check for the registrar implementing `EnvironmentAware`. Thus registrars implementing that interface and relying on the `Environment` being non-`null` on the call to `registerBeanDefinitions(…)` will fail.  This works on 4.0.x, as the method has the additional check and will invoke `setEnvironment(…)`.   ---  **Affects:** 3.2.8  **Issue Links:** - [DATACMNS-494](https://jira.spring.io/browse/DATACMNS-494) Remove defaulting of Environment from RepositoryBeanDefinitionRegistrarSupport (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2014-04-28T22:37:08Z","2014-04-29T13:02:28Z"
"","16591","DefaultBeanDefinitionDocumentReader should ignore the 'profile' attribute for custom namespaces [SPR-11975]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-11975](https://jira.spring.io/browse/SPR-11975?redirect=false)** and commented  The JavaDoc of the class `org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader` says  > `` doesn't need to be the root element of the XML document: This class will parse all bean definition elements in the XML file, not regarding the actual root element.  Indeed `parseBeanDefinitions()` will call `parseCustomElement()` if the element is not a Spring element.  However, `doRegisterBeanDefinitions` **always** evaluates the `profile` attribute of the root element against the `environment`, thus ignoring the element completely if the evaluated profile is not active. The problem is: if the root element is not a `` element, the `profile` attribute must be ignored (because the attribute might have an entirely different meaning).  We are using custom elements in our framework based on Spring and the `profile` evaluation breaks some of our XML files.  Proposed solution: add `delegate.isDefaultNamespace(root)` in `doRegisterBeanDefinitions` before the profile evaluation.   ---  **Affects:** 4.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a6a86b80257e17ddc84996a5d336a95c6af1a8d3","closed","type: enhancement,","spring-projects-issues","2014-07-08T08:13:25Z","2014-07-18T10:16:32Z"
"","16555","Support for Types.NCLOB in SqlLobValue to simplify use with NamedParameterJdbcTemplate. [SPR-11938]","**[Oleksandr Gavenko](https://jira.spring.io/secure/ViewProfile.jspa?name=gavenkoa)** opened **[SPR-11938](https://jira.spring.io/browse/SPR-11938?redirect=false)** and commented  The only way to avoid LobHandler in DAO code for insert/update:  ```java MapSqlParameterSource paramSource = new MapSqlParameterSource(); paramSource.addValue(""clob"", ""a long long text"", Types.CLOB); namedTemplate.update(INSERT_STMT, paramSource); ```  See:  * http://stackoverflow.com/questions/5791662/inserting-clob-with-namedparameterjdbctemplate * http://codeblow.com/questions/placing-clob-with-namedparameterjdbctemplate/  another way (only for JdbcTemplate, not for NamedParameterJdbcTemplate):  * http://docs.spring.io/spring/docs/3.0.x/reference/jdbc.html#jdbc-lob * http://www.java2s.com/Code/Java/Spring/InsertClobData.htm  java.sql.Types has NCLOB constans for Java 6/7/8:  * http://docs.oracle.com/javase/6/docs/api/java/sql/Types.html#NCLOB * http://docs.oracle.com/javase/7/docs/api/java/sql/Types.html#NCLOB  If I do:  `paramSource.addValue(""clob"", ""a long long text"", Types.CLOB);`  all work fine, but with:  `paramSource.addValue(""clob"", ""a long long text"", Types.NCLOB);`  I get:  ```java => Fail to add incidentjava.lang.ClassCastException: java.lang.String cannot be cast to oracle.sql.CLOB    at oracle.jdbc.driver.OraclePreparedStatement.setObjectCritical(OraclePreparedStatement.java:8762) ~[ojdbc6.jar:11.2.0.3.0]    at oracle.jdbc.driver.OraclePreparedStatement.setObjectInternal(OraclePreparedStatement.java:8286) ~[ojdbc6.jar:11.2.0.3.0]    at oracle.jdbc.driver.OraclePreparedStatement.setObject(OraclePreparedStatement.java:8868) ~[ojdbc6.jar:11.2.0.3.0]    at oracle.jdbc.driver.OraclePreparedStatementWrapper.setObject(OraclePreparedStatementWrapper.java:240) ~[ojdbc6.jar:11.2.0.3.0]    at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:406) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE]    at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:234) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE]    at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:149) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE]    at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:298) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE]    at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.createPreparedStatement(PreparedStatementCreatorFactory.java:251) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE]    at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:583) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE]    at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:818) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE]    at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:840) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE]    at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:281) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE] ```  Actual type of table column is NCLOB, and with Type.CLOB code work fine.  My suggestion just add NCLOB to `src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java` with same role as CLOB!  ---  **Affects:** 3.2.9, 4.0.5  **Issue Links:** - #20702 When using NamedParameterJdbcTemplate, NVARCHAR or NCLOB(4000 characters or less) columns are not properly populated since StatementCreatorUtils does setString for these types instead of setNString. - #13215 Can't insert into nvarchar2 using SimpleJdbcInsert whereas it works with SimpleJdbcTemplate - #16854 INSERT SELECT of large CLOB causes ORA-01461 on setString","closed","type: enhancement,","spring-projects-issues","2014-07-01T10:56:47Z","2019-01-11T22:27:23Z"
"","16552","Dead link to ""MVC application step-by-step"" guide [SPR-11935]","**[Oleksandr Gavenko](https://jira.spring.io/secure/ViewProfile.jspa?name=gavenkoa)** opened **[SPR-11935](https://jira.spring.io/browse/SPR-11935?redirect=false)** and commented  1. ack-grep step-by-step  spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/package-info.java 24: *     MVC-Step-by-Step  If you visit http://docs.spring.io/spring/docs/3.2.8.RELEASE/javadoc-api/org/springframework/web/servlet/mvc/package-summary.html you find dead above link.  This guide available at http://docs.spring.io/docs/Spring-MVC-step-by-step/ for Spring 2.5...  I suggest to remove link...   ---  **Affects:** 3.2.9, 4.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/983cce22d896846ac10b2356672e8af1bfaacb44, https://github.com/spring-projects/spring-framework/commit/7396210d40187664c9e8b7baad5cc542b05cbf0b, https://github.com/spring-projects/spring-framework/commit/ba522e5e552f80290cb00a127accc84b064eaf2d  **Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)","closed","type: documentation,","spring-projects-issues","2014-07-01T06:51:53Z","2014-07-10T08:35:29Z"
"","16896","Add support for DELETE with body to AsyncRestTemplate [SPR-12291]","**[Oana Goanta](https://jira.spring.io/secure/ViewProfile.jspa?name=oanag)** opened **[SPR-12291](https://jira.spring.io/browse/SPR-12291?redirect=false)** and commented  When making a DELETE request with a non empty request body using an AsyncRestClient with the default options (created with a AsyncClientHttpRequestFactory parameter, obtained using default configurations of  for HttpAsyncClientBuilder) , the body is not actually attached to the request.  public \ ListenableFuture exchange(String url, HttpMethod.DELETE, HttpEntity\ requestEntity, Class\ responseType, Map\ uriVariables) , where requestEntity.body is not null or empty.  The only workaround for this limitation that I found is described here: http://knowledgebrowse.blogspot.ro/2013/08/spring-resttemplate-calling-delete.html  ---  **Affects:** 4.0 GA  **Issue Links:** - #16966 Add support for DELETE with body to RestTemplate through exchange method","closed","type: enhancement,","spring-projects-issues","2014-10-02T06:19:21Z","2019-01-11T17:35:39Z"
"","17044","Enhance DelegatingFilterProxy to conditionally include delegate Filter on Profile activation [SPR-12439]","**[Nicholas Blair](https://jira.spring.io/secure/ViewProfile.jspa?name=nblair)** opened **[SPR-12439](https://jira.spring.io/browse/SPR-12439?redirect=false)** and commented  I recently ran into a circumstance where I wanted a particular servlet Filter (wrapped in DelegatingFilterProxy) to only be added if a certain Spring Profile was active.  I ended up creating the following:  https://github.com/nblair/developer-tools/blob/master/spring-profile-conditional-filter/src/main/java/com/github/nblair/web/ProfileConditionalDelegatingFilterProxy.java  Is this something that could be added directly in DelegatingFilterProxy, or a subclass?  I'd be happy to submit a pull request if so.   --- No further details from [SPR-12439](https://jira.spring.io/browse/SPR-12439?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2014-11-14T11:59:32Z","2019-01-12T00:18:11Z"
"","17111","Base packages referenced from @ControllerAdvice must contain at least one Controller [SPR-12506]","**[Nestor Tarin Burriel](https://jira.spring.io/secure/ViewProfile.jspa?name=nestabur)** opened **[SPR-12506](https://jira.spring.io/browse/SPR-12506?redirect=false)** and commented  When having a controller package structure like: - my.controller   - server   - user   - group - my.other.controller   - role   - permission  and no controller exists in package **my.controller** but in sub-packages **server, user and group** the `@ControllerAdvice` is applied to all controllers instead of only the ones in package **my.controller**.  So, for example, following the above package structure if I would like to have two different `@ControllerAdvice`, one for all controller contained in the package **my.controller** and another one for the ones contained in **my.other.controller** I need to add a dummy controller on each package in order to apply the correct advice.  The controller advice documentation points out that you should consider to have such a dummy controller in order to reference it from the advice  > Class[ ] basePackageClasses() > Type-safe alternative to value() for specifying the packages to select Controllers to be assisted by the `@ControllerAdvice` annotated class. > Consider creating a special no-op marker class or interface in each package that serves no purpose other than being referenced by this attribute.  As other usages of the same kind of annotation property (e.g. `@ComponentScan`.basePackages) I expected not to have such a dummy controller but let the framework find them in the sub packages  ---  **Affects:** 4.0.6  **Issue Links:** - #17115 When specified the Non-existent package using `@ControllerAdvice`(basePackages), has been applied to all controllers. (_**""is duplicated by""**_) - #17114 `@ControllerAdvice`(basePackageClasses) do the prefix search by package name.  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4013fe03a579dbdd19d47fd240a493f034da284a, https://github.com/spring-projects/spring-framework/commit/1d6978afd5415b21f503eb993cd3f0d78cdfd69b  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)","closed","type: bug,","spring-projects-issues","2014-12-04T07:05:31Z","2019-01-13T05:43:31Z"
"","16795","Enum to String conversion broken for subclasses [SPR-12181]","**[Neil Gentleman](https://jira.spring.io/secure/ViewProfile.jspa?name=ngentleman)** opened **[SPR-12181](https://jira.spring.io/browse/SPR-12181?redirect=false)** and commented  The fix for #16666 changed GenericConversionService#getClassHierarchy to use type.isEnum() instead of looking for Enum.class in the type hierarchy.  For anonymous enum subclasses, this causes EnumToStringConverter to not be matched and results in the enum's toString() being used instead of name().  ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9b2da37f7928b356b881df5b02777008a5d0caba","closed","in: core,","spring-projects-issues","2014-09-11T11:43:24Z","2019-01-11T17:19:29Z"
"","16649","WebMvcConfigurationSupport.mvcUriComponentsContributor() doesn't support override of requestMappingHandlerAdapter() [SPR-12033]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-12033](https://jira.spring.io/browse/SPR-12033?redirect=false)** and commented  The following configuration is breaking but worked in Spring 3.2.x  ```java @Configuration @EnableTransactionManagement public abstract class WebApiConfigBase extends WebMvcConfigurationSupport {     @Override     @Bean     public RequestMappingHandlerAdapter requestMappingHandlerAdapter() {         RequestMappingHandlerAdapter requestMappingHandlerAdapter                  = super.requestMappingHandlerAdapter();         requestMappingHandlerAdapter.setIgnoreDefaultModelOnRedirect(true);         return requestMappingHandlerAdapter;     } ```  Stepping through in the debugger I finally found that the reason seems to be that the breaking `WebMvcConfigurationSupport` code:  ```java @Bean public CompositeUriComponentsContributor mvcUriComponentsContributor() {      return new CompositeUriComponentsContributor(          requestMappingHandlerAdapter().getArgumentResolvers(), mvcConversionService()); } ```  is calling the overridden `@Bean` method directly, resulting in afterPropertiesSet(), setBeanFactory(), and others not having been called on the result.   ---  **Affects:** 4.0.6  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/4.1.0.RC1/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java#L688  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/481c8b67425eef4a1e7aa28c0b52acf80dc5cd74, https://github.com/spring-projects/spring-framework-issues/commit/69d3856469750ef596cb22e690f9661390100c4b  1 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2014-07-25T08:48:18Z","2019-01-12T16:34:46Z"
"","17097","Internet Explorer file downloads over SSL do not work with controller containing @SessionAttribute annotation [SPR-12491]","**[Naveen](https://jira.spring.io/secure/ViewProfile.jspa?name=mynavinice)** opened **[SPR-12491](https://jira.spring.io/browse/SPR-12491?redirect=false)** and commented  Internet Explorer file downloads over SSL do not work with controller containing `@SessionAttribute` annotation   ---  **Affects:** 3.2.2  **Attachments:** - [errorPronefile.txt](https://jira.spring.io/secure/attachment/22410/errorPronefile.txt) (_5.02 kB_) - [explorerVersion.png](https://jira.spring.io/secure/attachment/22411/explorerVersion.png) (_26.25 kB_)","closed","in: web,","spring-projects-issues","2014-12-01T21:42:43Z","2019-01-11T19:36:00Z"
"","16359","AbstractMarshaller should avoid SAXSource workaround when processExternalEntities=true [SPR-11737]","**[Muminur Choudhury](https://jira.spring.io/secure/ViewProfile.jspa?name=muminc)** opened **[SPR-11737](https://jira.spring.io/browse/SPR-11737?redirect=false)** and commented  We are currently using spring 4.0.1.  Updated to 4.0.2 (also tried latest  4.0.3) , got unexpected unmarshalling issues with XMLBeansMarshaller for any XSD that uses the ""extension"" element.  Work-round we had to apply :  ``` XmlBeansMarshaller xmlBeansMarshaller = new XmlBeansMarshaller() {                         // work-round for spring 4.0.2              protected Object unmarshalStreamSourceNoExternalEntitities(StreamSource streamSource) throws XmlMappingException, IOException {                 return unmarshalStreamSource(streamSource);             }         };  ```  ---  **Affects:** 3.2.8, 4.0.2  **Issue Links:** - #16003 Jaxb2RootElementHttpMessageConverter is susceptible to XXE vulnerability  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-04-25T11:11:36Z","2019-01-11T21:17:52Z"
"","16902","Support @Profile + @PostConstruct/@PreDestroy [SPR-12433]","**[Mordechai Tamam](https://jira.spring.io/secure/ViewProfile.jspa?name=mordechai.tamam@gmail.com)** opened **[SPR-12433](https://jira.spring.io/browse/SPR-12433?redirect=false)** and commented  I have a use case that I need a custom bean initialization for each profile, there fore I would like to have the ability to control the `@PostConstruct` initialization methods.   --- No further details from [SPR-12433](https://jira.spring.io/browse/SPR-12433?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2014-11-13T09:30:07Z","2019-01-12T00:18:58Z"
"","16818","Deferred not working with tomcat 8 [SPR-12204]","**[Moosh Ben](https://jira.spring.io/secure/ViewProfile.jspa?name=mooshben)** opened **[SPR-12204](https://jira.spring.io/browse/SPR-12204?redirect=false)** and commented  I have a fully working program in tomcat 7 (spring 4.0.6) that uses DeferredResult . I am using long polling to get a message from the server, and when a message is dispatched it immediately reaches the client.  After upgrading to tomcat 8 (tried pivotal TC server 3.0.0 as well as Tomcat 8.0.11), this stops working and client waits forever for a response. After a while the messages do appear on the client's end.  I tried upgrading to spring 4.1 and this did not help.  The only resolution I've found is going back to tomcat 7 or making my function that runs deferredResult.setResult(...) `@Async` (not sure why this resolves the issue... maybe because it leaves tomcat http threads and moves to my thread pool?).  May this be related to tomcat 8 using NIO connector as default?   ---  **Affects:** 4.0.6, 4.1 GA  **Attachments:** - [test_tomcat8_deferred.zip](https://jira.spring.io/secure/attachment/22211/test_tomcat8_deferred.zip) (_4.25 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/caedc191038147f17f1874bf1694524ff3d5994e  1 votes, 6 watchers","closed","in: web,","spring-projects-issues","2014-09-16T14:21:53Z","2019-01-11T17:27:16Z"
"","16936","Getting exception while displaying property using @Value annotation in Spring EL for the version 3.2.11.RELEASE [SPR-12331]","**[mohan](https://jira.spring.io/secure/ViewProfile.jspa?name=mohanbhimineni)** opened **[SPR-12331](https://jira.spring.io/browse/SPR-12331?redirect=false)** and commented  Experiencing with exception while displaying value from property file using @ Value annotation.  Exception : Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1008E:(pos 48): Property or field 'url' cannot be found on object of type 'org.springframework.beans.factory.config.BeanExpressionContext' - maybe not public? at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:226) at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:93) at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:81) at org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:126) at org.springframework.expression.spel.ast.ConstructorReference.createArray(ConstructorReference.java:260) at org.springframework.expression.spel.ast.ConstructorReference.getValueInternal(ConstructorReference.java:96) at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:115) at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:240) at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:161) ... 31 more  Please find the files as attachment. SpringTestClient.java is the main program.    ---  **Affects:** 3.2.11, 4.1.1  **Attachments:** - [AppConfig.java](https://jira.spring.io/secure/attachment/22320/AppConfig.java) (_685 bytes_) - [DefaultSampleDao.java](https://jira.spring.io/secure/attachment/22321/DefaultSampleDao.java) (_855 bytes_) - [DefaultSampleService.java](https://jira.spring.io/secure/attachment/22322/DefaultSampleService.java) (_436 bytes_) - [jdbc.properties](https://jira.spring.io/secure/attachment/22323/jdbc.properties) (_71 bytes_) - [SampleDao.java](https://jira.spring.io/secure/attachment/22324/SampleDao.java) (_111 bytes_) - [SampleService.java](https://jira.spring.io/secure/attachment/22325/SampleService.java) (_116 bytes_) - [SpringTestClient.java](https://jira.spring.io/secure/attachment/22326/SpringTestClient.java) (_739 bytes_)","closed","in: core,","spring-projects-issues","2014-10-14T06:18:15Z","2019-01-12T05:25:14Z"
"","17162","Exception thrown by TransactionSynchronization#afterCompletion is eaten and there is no way to catch and perform any operation [SPR-12560]","**[Mohammad](https://jira.spring.io/secure/ViewProfile.jspa?name=adnan)** opened **[SPR-12560](https://jira.spring.io/browse/SPR-12560?redirect=false)** and commented  Exception thrown in TransactionSynchronization's afterComplete method doesn't be propagated back to calling method. Reason is org.springframework.transaction.support.TransactionSynchronizationUtils class invokeAfterCompletion has below implementation -  > public static void invokeAfterCompletion(List\ synchronizations, int completionStatus) { > if (synchronizations != null) { > for (TransactionSynchronization synchronization : synchronizations) { > try { > synchronization.afterCompletion(completionStatus); > } > catch (Throwable tsex) { > logger.error(""TransactionSynchronization.afterCompletion threw exception"", tsex); > } > } > } > }  Since it is calling multiple synchronizer in a row hence they are eating exception and just logging it(which is clearly written as java doc). I think there should be a way to throw exception so that if required client code can perform some operation.  One solution would be to run afterComplete method in different threads and propagate exceptions with that thread. For programmatic transaction management, we would get know exception (Considering declarative transaction interceptors would not help as control won't come to client code)  Reference question in stackoverflow is - http://stackoverflow.com/questions/27563561/transactionsynchronization-sallow-runtimeexception-that-is-thrown-while-aftercom?noredirect=1#comment43558721_27563561   ---  **Affects:** 4.0.3","closed","status: bulk-closed,","spring-projects-issues","2014-12-19T06:08:38Z","2022-06-01T19:17:50Z"
"","16961","BeanFactoryAnnotationUtils,qualifiedBeanOfType, Inefficient use of keySet iterator. [SPR-12356]","**[Min Ho Pak](https://jira.spring.io/secure/ViewProfile.jspa?name=luckybomb)** opened **[SPR-12356](https://jira.spring.io/browse/SPR-12356?redirect=false)** and commented  BeanFactoryAnnotationUtils,qualifiedBeanOfType method use KeySet Iterator.  It is more efficient to use an iterator on the entrySet of the map, to avoid the Map.get(key) lookup.  pull request: https://github.com/spring-projects/spring-framework/pull/667  ---  **Affects:** 4.1.1  **Issue Links:** - #17037 MessageHeaderAccessor copyHeaders... tuning - #16968 org.springframework.ui.ModelMap.mergeAttributes(Map) makes inefficient use of keySet iterator  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/667, and commits https://github.com/spring-projects/spring-framework/commit/2e5d752e15164b331ad48bcdcb61c174f880498c","closed","type: enhancement,","spring-projects-issues","2014-10-20T18:29:14Z","2019-01-11T19:26:12Z"
"","16563","Section ""Combining lifecycle mechanisms"" does not include BeanPostProcessor methods [SPR-11946]","**[Milind Paradkar](https://jira.spring.io/secure/ViewProfile.jspa?name=mmparadkar)** opened **[SPR-11946](https://jira.spring.io/browse/SPR-11946?redirect=false)** and commented  Section ""Combining lifecycle mechanisms"" does not include `BeanPostProcessor` callback methods like `postProcessBeforeInitialization()` and `postProcessAfterInitialization()`. It could also mention constructor in this sequence if default constructor is available.   ---  **Affects:** 4.0.5  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-factory-lifecycle-combined-effects","closed","status: invalid,","spring-projects-issues","2014-07-03T01:57:32Z","2019-01-12T05:25:42Z"
"","16562","Code snippet for many JDBC methods are showing wrong arguments. [SPR-11945]","**[Milind Paradkar](https://jira.spring.io/secure/ViewProfile.jspa?name=mmparadkar)** opened **[SPR-11945](https://jira.spring.io/browse/SPR-11945?redirect=false)** and commented  Many JdbcTemplate methods which has type as argument are shown in wrong sequence of parameters. Example is :  namedParameterJdbcTemplate.queryForObject(sql, Integer.class, namedParameters);  which is not applicable for Spring 4.x and should be : namedParameterJdbcTemplate.queryForObject(sql, namedParameters, Integer.class);   ---  **Affects:** 4.0.5  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/jdbc.html  **Attachments:** - [QueryForObject-wrong-syntax.PNG](https://jira.spring.io/secure/attachment/22097/QueryForObject-wrong-syntax.PNG) (_34.48 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/62351e0f6e80959c8ff030556643797909c237c9, https://github.com/spring-projects/spring-framework/commit/f8ab4f69808d302558216a95160fa9f65a769448","closed","type: documentation,","spring-projects-issues","2014-07-03T01:49:48Z","2014-07-08T00:21:26Z"
"","16561","Latest documentation does not state ""application"" as scope for beans [SPR-11944]","**[Milind Paradkar](https://jira.spring.io/secure/ViewProfile.jspa?name=mmparadkar)** opened **[SPR-11944](https://jira.spring.io/browse/SPR-11944?redirect=false)** and commented  Latest documentation does not show ""application"" as a scope for beans defined in web based ApplicationContext.   ---  **Affects:** 4.0.5  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-factory-scopes","closed","type: documentation,","spring-projects-issues","2014-07-03T01:32:32Z","2014-07-08T00:21:27Z"
"","16428","Custom @Profile annotations not working on @Configuration classes [SPR-11808]","**[Miguel A. Baldi Hörlle](https://jira.spring.io/secure/ViewProfile.jspa?name=miguel.horlle)** opened **[SPR-11808](https://jira.spring.io/browse/SPR-11808?redirect=false)** and commented  Starting at version v3.2.2, custom `@Profile` annotations no longer work on `@Configuration` classes.  ``` @Profile(""main"") public @interface Main { } ```  ``` @Configuration @ComponentScan(basePackageClasses = MainConfiguration.class) @Main public class MainConfiguration { } ```  Before version 3.2.3, the above configuration works as expected, `MainConfiguration` only gets executed when profile ""main"" is activated.  Unfortunately, when I upgraded to version 3.2.8, whenever I have a custom profile annotation on a `@Configuration` class, the active profiles are not honored.  I've searched the documentation looking for some light on this, but with no luck. Is this the expected behavior or a bug? I've attached a sample application to demonstrate this behavior.  ``` mvn install ```  Will use version 3.2.2, and all tests must pass.  ``` mvn -Pbug install ```  will use version 3.2.8, and tests shall fail.  I think I found the commits that changed this behavior, they are related to issue #15176. When I revert the commits related to that issue, everything works for me.  I have a large enterprise application that relies on that feature (custom `@Profiles`) and we need to upgrade Spring because of issues #15018 and #15726. Thanks!  ---  **Affects:** 3.2.3, 3.2.8  **Attachments:** - [spring-sample.zip](https://jira.spring.io/secure/attachment/22024/spring-sample.zip) (_150.45 kB_)  **Issue Links:** - #15176 Loading `@Import`(ChildConfig) or EnclosingConfig.ChildConfig and then ChildConfig does not load beans on ParentConfig - #13603 Allow the use of custom PropertySource annotations in `@Configuration` classes - #15438 Stereotype `@Profiles` not merged  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5eecb138f63894ffc5b385d0330484fd41ad77d0  4 votes, 8 watchers","closed","in: core,","spring-projects-issues","2014-05-20T06:03:13Z","2019-01-13T06:53:53Z"
"","16819","Allow multiple request parameters to be grouped into one POJO [SPR-12205]","**[Michał Matłoka](https://jira.spring.io/secure/ViewProfile.jspa?name=mich)** opened **[SPR-12205](https://jira.spring.io/browse/SPR-12205?redirect=false)** and commented  Currently it is possible to create converters (Spring MVC REST) which parses request parameters to custom objects. However it's not possible to e.g. group two of them into one custom object.  I would like to be able to create method, which instead of:  ``` @RequestMapping(value = ""/sth"", method = RequestMethod.STH)    public SomeResult method(@RequestParam String param1, @RequestParam String param2) {...} ```  could work as:  ``` @RequestMapping(value = ""/sth"", method = RequestMethod.STH)    public SomeResult method(@RequestParam MyCustomObject myCustomObject) {...} ```  where  ``` public class MyCustomObject {      private String param1,      private String param2  // getters, setters etc } ```  I take under account that such feature might require some additional annotation for method parameter so that appropriate converter would be executed.   ---  **Affects:** 4.1 GA","closed","type: enhancement,","spring-projects-issues","2014-09-16T23:39:54Z","2014-09-25T06:04:50Z"
"","16755","Plain FactoryBean declaration on @Bean method leads to early call (pre injection) [SPR-12141]","**[Michał Jaśtak](https://jira.spring.io/secure/ViewProfile.jspa?name=vardlokkur)** opened **[SPR-12141](https://jira.spring.io/browse/SPR-12141?redirect=false)** and commented  Suppose that I have class annotated with `@Configuration`, in which I want to use Environment, injected by Spring Framework, something like this:  ``` @Configuration public class MyConfig {  @Inject private Environment env; ... } ```  When I declare bean using HttpInvokerProxyFactoryBean, and try to access injected environment to use one or the properties as for ex. service URL  ``` @Bean     public FactoryBean someService() {         final HttpInvokerProxyFactoryBean factory = new HttpInvokerProxyFactoryBean();         factory.setServiceInterface(SomeService.class);         factory.setServiceUrl(env.getRequiredProperty(""service.uri""));         return factory;     } ```  I get NPEx because Spring Framework is trying to instantiate the factory before Environment is injected.  The problem doesn't exist, if I declare returned type as FactoryBean\, but because of current signature of HttpInvokerProxyFactoryBean, I'm unable to use it directly (it implements FactoryBean\).  ---  **Affects:** 3.2.10, 4.0.6, 4.1 RC2  **Issue Links:** - #16461 HttpInvokerProxyFactoryBean and co do not reliably expose correct type when declared via `@Bean` - #19119 StackOverflowError for advisor search against factory-bean reference to FactoryBean - #16922 Better error reporting for circular dependencies between JavaConfig classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4432c41dbdc21b1fd422aa5c405a0f47713e6797, https://github.com/spring-projects/spring-framework/commit/f4f7f40f18739bfbda2052015e1ec3cc24494635, https://github.com/spring-projects/spring-framework/commit/5da8a16284a43feb7c036e6b81ff31c28e567985, https://github.com/spring-projects/spring-framework/commit/bff2bf2cdb6f6fce6e1f54477e5bf88cb05bb3f6  **Backported to:** [4.0.7](https://github.com/spring-projects/spring-framework/milestone/119?closed=1), [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)","closed","in: core,","spring-projects-issues","2014-09-01T14:32:29Z","2019-01-13T05:45:16Z"
"","16879","RequestMappingHandlerMapping matches uri with percent encoded characters [SPR-12274]","**[Michal](https://jira.spring.io/secure/ViewProfile.jspa?name=mkorecki)** opened **[SPR-12274](https://jira.spring.io/browse/SPR-12274?redirect=false)** and commented  As described in provided question on stackoverflow. In spring mvc application i found out that org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping matches some requests to controllers instead of returning no match. Mentioned requests contain percent encoded characters in front of path part of uri. Example requests: http://www.example.pl/%06api/1.0/client/abc - is decoded to /^Fapi/1.0/client/abc but matches /api/1.0/client/abc http://www.example.pl/%0bapi/1.0/client/abc - is decoded to /^Kapi/1.0/client/abc but matches /api/1.0/client/abc  Example logs for first request : DEBUG RequestMappingHandlerMapping - Looking up handler method for path /^Fapi/1.0/client/abc TRACE RequestMappingHandlerMapping - Found 1 matching mapping(s) for [/^Fapi/1.0/client/abc] : [{[/api/1.0/client/{clientId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}]  Not every percent encoded character applies here, for some of them behavior is correct and application returns http 404: http://www.example.pl/%83api/1.0/client/abc - returns 404, is decoded to /�api/1.0/client/abc and does not match /api/1.0/client/abc  I am not having issues with encoding neither in application nor in tomcat container. In web.xml file in application i have CharacterEncodingFilter filter with UTF-8 encoding. Application runs on Tomcat 7 with http and ajp connectors configured with URIEncoding=""UTF-8"". I guess that all percent encoded characters are decoded correctly and problem is somewhere in RequestMappingHandlerMapping matching mechanism.   ---  **Affects:** 3.2.8  **Reference URL:** http://stackoverflow.com/questions/26110136/spring-mvc-uri-mapping-with-percent-encoded-characters","closed","in: core,","spring-projects-issues","2014-09-30T06:19:44Z","2019-01-12T16:34:40Z"
"","16406","Errors.rejectValue doesn't accept specific fields on subclass when List entry is declared as base class [SPR-11784]","**[Michael Z](https://jira.spring.io/secure/ViewProfile.jspa?name=zpetrovich)** opened **[SPR-11784](https://jira.spring.io/browse/SPR-11784?redirect=false)** and commented  I get Exception  > org.springframework.beans.NotReadablePropertyException: Invalid property 'entries\[0\].reason' of bean class \[my.company.data.SDROrder\]: Bean property 'entries\[0\].reason' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter?  from the following code snippet:  ```java Errors errors = new BeanPropertyBindingResult(new SDROrder(), ""sdr""); orderValidator.validate(order, errors); ```  for validator:  ```java     public class OrderValidator implements Validator     {          @Override         public boolean supports(Class clazz)         {             return Order.class.isAssignableFrom(clazz);         }          @Override         public void validate(final Object target, final Errors errors)         {             errors.rejectValue(""entries[0].reason"", ""Wrong Reason"");         }      } ```  where we have such data hierarchy  ```java     public class Order     {         private List entries;          public List getEntries()         {             return entries;         }          public void setEntries(List entries)         {             this.entries = entries;         }     }      public class SDROrder extends Order     {      }      public class AbstractOrderEntry     {      }      public class SDROrderEntry extends AbstractOrderEntry     {         private String reason;          public String getReason()         {             return reason;         }          public void setReason(String reason)         {             this.reason = reason;         }     } ```  Please see working example here: https://github.com/ZPetrovich/SpringValidationInheritance  Just to clarify. The problem is I try to **rejectValue** on object that has Collection of objects where each element has specific attribute at Runtime but has not it at Compile time. Spring uses Bean's properties to resolve these fields and can't find inherited attribute. The question is: can I explain Spring to resolve inherited fields somehow?   ---  **Affects:** 3.1.4  **Reference URL:** https://github.com/ZPetrovich/SpringValidationInheritance","closed","status: bulk-closed,","spring-projects-issues","2014-05-14T03:37:15Z","2019-01-12T00:19:37Z"
"","16723","Documentation misses chapters 4.13 and 4.14 [SPR-12107]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-12107](https://jira.spring.io/browse/SPR-12107?redirect=false)** and commented  Both chapters refer to the blog for details. That is not how a documentation should be structured. Moreover, if the documenation is read offline or on paper, that information is simply not available.  Documenation should be selfcontained.   ---  **Affects:** 4.1 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15f496bc2a2b51916907eec34d7eabe72bd60b69","closed","type: documentation,","spring-projects-issues","2014-08-21T05:25:21Z","2014-09-04T05:31:17Z"
"","16373","Chapter 34.4 title is chopped off [SPR-11751]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-11751](https://jira.spring.io/browse/SPR-11751?redirect=false)** and commented  If you open up [this](http://docs.spring.io/spring-framework/docs/4.1.0.BUILD-SNAPSHOT/spring-framework-reference/html/extensible-xml.html#extensible-xml-parser), it reads `34.4 nDefinitionParser` but it should read `34.4 BeanDefinitionParser`.   ---  **Affects:** 4.0.4","closed","type: documentation,","spring-projects-issues","2014-05-01T09:45:46Z","2014-05-20T08:05:02Z"
"","16357","Jaxb2Marshaller support unmarshalling by type [SPR-11735]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-11735](https://jira.spring.io/browse/SPR-11735?redirect=false)** and commented  The currect `unmarshal` methods assume that one wants to unmarshal root elements only. My usecase has to unmarshal fragments too. `Unmarshaller` support [unmarshalling by type](http://docs.oracle.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html#unmarshalByDeclaredType). This API should reflect this.  ---  **Affects:** 4.0.3  **Issue Links:** - #18037 Support selection of specific marshaller based on bound class","closed","status: bulk-closed,","spring-projects-issues","2014-04-25T04:33:58Z","2019-01-12T00:19:59Z"
"","16771","getObject(index, requiredType) fails for BigInteger on Derby [SPR-12157]","**[Michael McCarthy](https://jira.spring.io/secure/ViewProfile.jspa?name=mikeycmccarthy)** opened **[SPR-12157](https://jira.spring.io/browse/SPR-12157?redirect=false)** and commented  I have a test which excercises what SQL can and can't be performed using an embedded Derby database (probably irrelevant to this issue though). I'll do a pull requets in a second but basically I have a setup:  jdbcTemplate().execute(""CREATE TABLE emp(name VARCHAR(100), salary INTEGER)""); jdbcTemplate().execute(""INSERT INTO emp VALUES('Joe',20000),  and a test:  assertThat(jdbcTemplate().queryForObject(""SELECT CAST (max(salary) AS BIGINT) FROM emp"", BigInteger.class)).isEqualTo(BigInteger.valueOf(31000l));  This test will pass on the 3.x and 4.0.x codelines but fail on 4.1 with a DataIntegrityViolation:  org.springframework.dao.DataIntegrityViolationException: StatementCallback; SQL [SELECT CAST (max(salary) AS BIGINT) FROM emp]; An attempt was made to get a data value of type 'java.math.BigInteger' from a data value of type 'BIGINT'.; nested exception is java.sql.SQLDataException: An attempt was made to get a data value of type 'java.math.BigInteger' from a data value of type 'BIGINT'.  ---  **Affects:** 4.1 GA  **Issue Links:** - #16788 JDBC conversion exception for enum types on MySQL - #13452 JdbcUtils getResultSetValue does not handle Apache Derby BLOBs correctly  **Referenced from:** pull request https://github.com/spring-projects/spring-framework-issues/pull/84, and commits https://github.com/spring-projects/spring-framework/commit/8922da3af60ba17084383eace6b80bc9ac7eccd0, https://github.com/spring-projects/spring-framework/commit/dedb04bd5c611d098053d94233b848db5e9f40b2","closed","type: bug,","spring-projects-issues","2014-09-05T10:09:15Z","2019-01-11T17:21:32Z"
"","16534","Manually registered transaction manager are not recognized by qualifiedBeanOfType [SPR-11915]","**[Michael McCarthy](https://jira.spring.io/secure/ViewProfile.jspa?name=mikeycmccarthy)** opened **[SPR-11915](https://jira.spring.io/browse/SPR-11915?redirect=false)** and commented  As per the StackOverflow question above, I've been trying to use an `@Transactional` annotation with a qualifier, and was hoping that my manually registered singleton bean would get picked up but sadly it doesn't.  If I debug the method public static \ T qualifiedBeanOfType(BeanFactory beanFactory, Class\ beanType, String qualifier) and evaluate beanFactory.containsBean(qualifier) in my IDE before the method executes, the result of that evaluation is 'true'.  Unfortunately, qualifiedBeanOfType throws a NoSuchBeanDefinitionException before that fallback method gets a chance to run.  Is it just me or will the fallback never get invoked?   ---  **Affects:** 3.2.9, 4.0.5  **Reference URL:** http://stackoverflow.com/questions/24385151/can-i-programatically-add-a-qualifier-to-a-bean?noredirect=1#comment37747172_24385151  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/67ebef6b3241723a9a1a653d23811838cafd1afa, https://github.com/spring-projects/spring-framework/commit/b9935e9fe31888cecc06ec04174e87edee3da7f0, https://github.com/spring-projects/spring-framework/commit/5ed20d21b1e301280b525cdc0c602f09e4ccff83, https://github.com/spring-projects/spring-framework/commit/f8b611444072bea0a2755ba73b4dd15fe33098e5  **Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-06-25T08:21:53Z","2014-07-08T00:21:29Z"
"","16628","Spring-Boot Multi Module Spring Data [SPR-12012]","**[Michael Hegner](https://jira.spring.io/secure/ViewProfile.jspa?name=wolfmoonheart)** opened **[SPR-12012](https://jira.spring.io/browse/SPR-12012?redirect=false)** and commented  Hey Guys,  I am facing an issue with multi module project with spring boot 1.1.4.RELEASE.  I have following structure:  > parent > - backend > - business  Backend has package ~.domain with entity classes, using spring-data repositories, everything works fine in that module. With business module I am using autowiring the backend-service, and that use data-repositories.  business module defines following Application.class:  ``` package at.compax.bbsng.business; @Configuration @ComponentScan(excludeFilters = @ComponentScan.Filter({ Controller.class })) @Import(ApplicationBackend.class) @EnableAutoConfiguration // when disable, it works!!! public class ApplicationBusiness {   public static void main(final String[] args) {     SpringApplication.run(ApplicationBusiness.class, args);   } } ```  When I disable `@EnableAutoConfiguration` and start class, everything works fine, when I enable `@EnableAutoConfiguration` then it doesnt find the repository, i get No qualifying bean of type ...  Is that BUG? Or is there a best practice to configure multi-module projects with spring-boot.  I would have modules backend (for connection to db, mostly generated with spring roo), business (for business logic), rest (rest application)  Thank you in advanced   ---  **Affects:** 4.0.6","closed","status: invalid,","spring-projects-issues","2014-07-20T07:51:17Z","2019-01-12T05:25:37Z"
"","16805","@Qualifier resolution fails with Spring Batch parent/child context arrangement [SPR-12191]","**[Max Hartmann](https://jira.spring.io/secure/ViewProfile.jspa?name=mahartma)** opened **[SPR-12191](https://jira.spring.io/browse/SPR-12191?redirect=false)** and commented  When I use a GenericContextFactory with a parent context and in the childContext there is a quite simple `@Qualifier` constellation the startup of the context fails. If I use `@Autowired` without a qualifier all is fine.  Sample: AnnotationConfigApplicationContext parentContext = new AnnotationConfigApplicationContext(); parentContext.register(String.class); parentContext.refresh(); GenericApplicationContextFactory factory = new GenericApplicationContextFactory(ExampleService.class, SubExampleService.class); factory.setApplicationContext(parentContext); factory.createApplicationContext();  public class ExampleService {      @Autowired     @Qualifier(""subExampleService"")     SubExampleService subExampleService;          public String echo(String echo) {     	return subExampleService.echo(echo);     }  }  exception: Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'exampleService': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: de.codecentric.batch.item.SubExampleService de.codecentric.batch.item.ExampleService.subExampleService; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'subExampleService' is defined at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1147) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:191) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:633) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479) at org.springframework.batch.core.configuration.support.GenericApplicationContextFactory$ResourceAnnotationApplicationContext.\(GenericApplicationContextFactory.java:209) at org.springframework.batch.core.configuration.support.GenericApplicationContextFactory.createApplicationContext(GenericApplicationContextFactory.java:68) at org.springframework.batch.core.configuration.support.AbstractApplicationContextFactory.createApplicationContext(AbstractApplicationContextFactory.java:170) at de.codecentric.batch.Application.main(Application.java:30) Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: de.codecentric.batch.item.SubExampleService de.codecentric.batch.item.ExampleService.subExampleService; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'subExampleService' is defined at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:517) at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:286) ... 14 more Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'subExampleService' is defined at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:575) at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1111) at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:572) at org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver.checkQualifier(QualifierAnnotationAutowireCandidateResolver.java:249) at org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver.checkQualifiers(QualifierAnnotationAutowireCandidateResolver.java:183) at org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver.isAutowireCandidate(QualifierAnnotationAutowireCandidateResolver.java:157) at org.springframework.beans.factory.support.DefaultListableBeanFactory.isAutowireCandidate(DefaultListableBeanFactory.java:564) at org.springframework.beans.factory.support.DefaultListableBeanFactory.isAutowireCandidate(DefaultListableBeanFactory.java:531) at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:916) at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:860) at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:775) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:489) ... 16 more  thx   ---  **Affects:** 3.2.10, 4.0.6, 4.1 GA  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)","closed","in: core,","spring-projects-issues","2014-09-14T13:07:05Z","2015-08-13T10:14:00Z"
"","17133","Better implementation of showSql for EclipseLinkJpaVendorAdapter [SPR-12528]","**[Mauro Molinari](https://jira.spring.io/secure/ViewProfile.jspa?name=mauromol)** opened **[SPR-12528](https://jira.spring.io/browse/SPR-12528?redirect=false)** and commented  Currently `EclipseLinkJpaVendorAdapter` sets the following JPA property when `showSql` is set to `true`:  ``` jpaProperties.put(PersistenceUnitProperties.LOGGING_LEVEL, Level.FINE.toString()); ```  However, this increases the logging verbosity of the whole EclipseLink. Shouldn't this be more specific?  ``` jpaProperties.put(PersistenceUnitProperties.CATEGORY_LOGGING_LEVEL_ + org.eclipse.persistence.logging.SessionLog.SQL, Level.FINE.toString()); ```  See: https://wiki.eclipse.org/EclipseLink/Examples/JPA/Logging and the Javadoc of `org.eclipse.persistence.config.PersistenceUnitProperties.CATEGORY_LOGGING_LEVEL_`.   ---  **Affects:** 4.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/d6b699cc7e07a4a1ede01ddeaccd8f8b3887697f","closed","type: enhancement,","spring-projects-issues","2014-12-10T01:26:11Z","2014-12-30T05:21:45Z"
"","16739","RestTemplate does not render correct url for server ports [SPR-12123]","**[Mattias Severson](https://jira.spring.io/secure/ViewProfile.jspa?name=matsev)** opened **[SPR-12123](https://jira.spring.io/browse/SPR-12123?redirect=false)** and commented  When using a uri template such as  > http://localhost:{port}/resource together with RestTemplate, the "":"" separating the host from the port gets rendered as a ""/"".  ---  Example:  ```java public class RestTemplateTest {      RestTemplate restTemplate;     MockRestServiceServer mockServer;      @Before     public void setUp() {         restTemplate = new RestTemplate();         mockServer = MockRestServiceServer.createServer(restTemplate);     }      @Test     public void testRestTemplate() {         mockServer.expect(                 requestTo(""http://localhost:8080/resource"")).                 andExpect(method(HttpMethod.GET)).                 andRespond(withSuccess(""Success"", MediaType.TEXT_PLAIN));          String response = restTemplate.getForObject(             ""http://localhost:{port}/resource"",              String.class,              8080);         assertThat(response, equalTo(""Success""));     } } ```  Expected result: the test should pass  Actual result:  ``` java.lang.AssertionError: Request URI  Expected :http://localhost:8080/resource Actual   :http://localhost/8080/resource ```  ---  This causes problems when implementing integration tests using Spring Boot's [local.server.port](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-discover-the-http-port-at-runtime), e.g.  ```java @RunWith(SpringJUnit4ClassRunner.class) @SpringApplicationConfiguration(classes = Application.class) @WebAppConfiguration @IntegrationTest(""server.port:0"") public class SomeIntegrationTest {     @Value(""${local.server.port}"")     int serverPort;      @Test     public void getsSomeResource() throws Exception {         String response = restTemplate.getForObject(             ""http://localhost:{port}/resource"",              String.class,              serverPort);     } } ```  Yet again, the "":"" between the host and port is replaced by ""/"" and the test fails accordingly:  ``` ResourceAccessException: I/O error on GET request for ""http://localhost/57293/resource"":Connection refused; ```  ---  Related: [this question](http://stackoverflow.com/questions/23665581/resttemplate-uritemplate-cannot-find-the-port-with-his-regex) at Stack Overflow.  ---  **Affects:** 4.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8fbd310b07698d18517cbe3481a4fca7f09ccc9a, https://github.com/spring-projects/spring-framework/commit/a0b231d36d7baf295a91e052cd2eb02a37a16a80","closed","type: enhancement,","spring-projects-issues","2014-08-26T07:36:04Z","2019-01-13T20:58:55Z"
"","16442","Extend MockRestServiceServer to support AsyncRestTemplate [SPR-11822]","**[Mattias Severson](https://jira.spring.io/secure/ViewProfile.jspa?name=matsev)** opened **[SPR-11822](https://jira.spring.io/browse/SPR-11822?redirect=false)** and commented  It would be useful if the `MockRestServiceServer` could be extended to support clients that uses `AsyncRestTemplate`, e.g.  ```java AsyncRestTemplate asyncRestTemplate = new AsyncRestTemplate(); MockRestServiceServer mockServer = MockRestServiceServer.createServer(asyncRestTemplate);  mockServer.expect(requestTo(""/hotels/42"")).andExpect(method(HttpMethod.GET))      .andRespond(withSuccess(""{ \""id\"" : \""42\"", \""name\"" : \""Holiday Inn\""}"", MediaType.APPLICATION_JSON));  ListenableFuture entity = asyncRestTemplate.getForEntity(""/hotels/{id}"", Hotel.class, 42); Hotel hotel = entity.get().getBody();  // Use the hotel instance...  mockServer.verify(); ```  The above example was inspired by the example in the JavaDoc of [MockRestServiceServer](http://docs.spring.io/spring/docs/4.0.x/javadoc-api/org/springframework/test/web/client/MockRestServiceServer.html). Another approach would be to create a separate `MockAsyncRestServiceServer`.   ---  **Affects:** 4.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/49e960c151ca2d940a48bd869dfa4e85d2c771ad","closed","type: enhancement,","spring-projects-issues","2014-05-27T05:06:00Z","2014-07-18T10:16:27Z"
"","16371","Make constants in HttpHeaders public [SPR-11749]","**[Mattias Severson](https://jira.spring.io/secure/ViewProfile.jspa?name=matsev)** opened **[SPR-11749](https://jira.spring.io/browse/SPR-11749?redirect=false)** and commented  It would be useful if the HTTP header constants in `HttpHeaders` would be `public` rather that `private` so that they can be statically imported to other parts of the code:  ``` public static final String ACCEPT = ""Accept"";  public static final String ACCEPT_CHARSET = ""Accept-Charset"";  public static final String ALLOW = ""Allow"";  // more headers... ```  ---  **Affects:** 4.0.3  **Issue Links:** - #16456 Create utility class HttpHeader with HTTP header names constants (_**""is duplicated by""**_) - #16220 Simple creation of HttpHeaders for single header - [INT-3488](https://jira.spring.io/browse/INT-3488) HTTP Inbound Gateway headers not mapping Content-Disposition - #16679 Add more HttpHeaders constants for standard HTTP headers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f2991da6d651bdcb16519ea4ffdc64242744b4b3, https://github.com/spring-projects/spring-framework/commit/8e1a5b9999fd8b69f62d09fad837a13035fba1aa","closed","type: enhancement,","spring-projects-issues","2014-05-01T05:53:18Z","2019-01-11T21:16:59Z"
"","16470","Spring 4 JMS Listener doesn't work with CommonJ WorkManager [SPR-11851]","**[Matthias Niehoff](https://jira.spring.io/secure/ViewProfile.jspa?name=matthias%20n)** opened **[SPR-11851](https://jira.spring.io/browse/SPR-11851?redirect=false)** and commented  Hi,  we have a Spring DefaultMessageListenerContainer configured with a task-executor. The Task executor is a WorkManager obtained from the JNDI. In our environment (Tomcat) the WorkManager is a CommonJ Implentation (http://commonj.myfoo.de/).  With Spring 3.2.x this works without any Problem. With Spring 4.0.5 the Listener does not consume message and does not even log any error or warning. When we leave out the Task Executor, the listener works fine. Replacing the WorkManagerTaskExecutor with a ThreadPoolTaskExecutor does also help.  Our Config:            the jmsQCFGlobal ist a QCF obtained from the JNDI. jmsDestinationResolver is a JndiDestinationResolver   ---  **Affects:** 4.0.5","closed","status: bulk-closed,","spring-projects-issues","2014-06-06T06:00:29Z","2019-01-12T02:29:56Z"
"","16364","JdbcTemplate.execute(*Statement) request for ResultSet auto-close support [SPR-11742]","**[Matthew Pope](https://jira.spring.io/secure/ViewProfile.jspa?name=matthew.public1)** opened **[SPR-11742](https://jira.spring.io/browse/SPR-11742?redirect=false)** and commented  === PLEASE IGNORE ORIGINAL SUBMISSION (above) ====== The many JdbcTemplate.execute(..) methods that take a **Statement**Callback parameter affords the opportunity to auto-close a statement's ResultSet in the finally block of the calling execute(..) methods right after closeStatement(..). This would remove an easy trap for programmer to fall in by failing to close the ResultSet in their callback.  At first glance, it looks like the PreparedStatement already auto-closes the ResultSet at the start query(..) methods.  However Javadoc, and other Spring documentation suggest one should never rely on this  mechanism because PreparedStatement's may be pooled by the ConnectionPool in which case their close() methods will not close the ResultSet, only return the Statement to the pool. Once picked from the Pool, they close() the ResultSet at the top of the Statement.query(..) methods.  Okay, but this suggests the need for a fail-safe close() done in the finally block of JdbcTemplate.execute(..) methods in case the programmer did not do so.  Since this auto-close behavior is not in the execute() methods, not even as optional behavior, all users of JdbcTemplate must close the statement at the bottom of their **Statement**Callback methods.  Perhaps it was preferred this way, to encourage folks to close their resources as soon as possible, rather than wait for an auto-close of the ResultSet in the JdbcTemplate.execute(..) methods. Its true that the DB resources are precious and for maximum concurrency and throughput, one does not want to wait for the auto-close a hundred or so VM instructions later in JdbcTemplate.execute(..). That must save a fraction of a second of time of holding those resources by forcing the programmers to do it earlier in their callbacks. This makes a difference for some OLTP applications particularly real-time applications like trading systems.  I understand the concern for maximum DB performance, I really do. However in this case, I believe the trade-off in terms of API-safety, and lines of code to maintain is steep.  I have worked on real-time financial market trading systems in Java and I know that the Java programmers building and maintaining such systems would certainly prefer to close() the ResultSet as early as possibly in their methods.  And they could continue to do so.  However, the 'most frequent use case actor' is not building real-time systems. And if they were, they would certainly not object to an auto-close done later in JdbcTemplate.execute(..) methods.  For the vast majority of Java developers, an auto-close of the ResultSet would reduce defects, and programmer burden.  The *Statement objects are already being closed in the finally block of the execute(..) methods, so I'm wondering why the ResultSet could not also be auto-closed, perhaps optionally?  I am proposing an optional auto-close of ResultSet driven by a -Dproperty in the finally block of the JdbcTemplate.execute(..) methods that take a Callback type object.  The property name might be something like: jdbctemplate_auto_close_resultset=True|False.  Thank you for your consideration.  ---  **Issue Links:** - #16363 JdbcTemplate.execute(PreparedStatement) request for ResultSet auto-close support","closed","status: bulk-closed,","spring-projects-issues","2014-04-25T18:32:59Z","2019-01-12T00:19:56Z"
"","16363","JdbcTemplate.execute(PreparedStatement) request for ResultSet auto-close support [SPR-11741]","**[Matthew Pope](https://jira.spring.io/secure/ViewProfile.jspa?name=matthew.public1)** opened **[SPR-11741](https://jira.spring.io/browse/SPR-11741?redirect=false)** and commented  Many of the JdbcTemplate.execute(..) methods take Statement*Callback parameters, which is awesome, and this architecture affords the opportunity to auto-close a statement's ResultObject in the finally block of the execute(..)  methods right after closeStatement(..) and so remove an easy trap for programmer to fall in by failing to close the ResultSet in their callback.  Since this auto-close behavior is not in the execute() methods, not even as optional behavior, all users of JdbcTemplate must close the statement at the bottom of their **Statement**Callback methods.  Perhaps it was preferred this way, to encourage folks to close their resources as soon as possible, rather than wait for an auto-close of the ResultSet in the JdbcTemplate.execute(..) methods.  Its true that the DB resources are precious and for maximum concurrency and throughput, one does not want to wait for the auto-close a hundred or so VM instructions later in JdbcTemplate.execute(..).   That easily must save a fraction of a second of time of holding those resources, but forcing the programmers to do it in their callbacks.  I understand the concern for maximum DB performance, I really do.  However in this case, I believe the trade-off in terms of API-safety, and lines of code to maintain is steep.  I am proposing an optional auto-close of ResultSet driven by a -Dproperty. //------------------------------------------------------------------------- // Methods dealing with prepared statements //-------------------------------------------------------------------------      public  T execute(PreparedStatementCreator psc, PreparedStatementCallback action)     		throws DataAccessException {          	Assert.notNull(psc, ""PreparedStatementCreator must not be null"");     	Assert.notNull(action, ""Callback object must not be null"");     	if (logger.isDebugEnabled()) {     		String sql = getSql(psc);     		logger.debug(""Executing prepared SQL statement"" + (sql != null ? "" ["" + sql + ""]"" : """"));     	}          	Connection con = DataSourceUtils.getConnection(getDataSource());     	PreparedStatement ps = null;     	try {     		Connection conToUse = con;     		if (this.nativeJdbcExtractor != null &&     				this.nativeJdbcExtractor.isNativeConnectionNecessaryForNativePreparedStatements()) {     			conToUse = this.nativeJdbcExtractor.getNativeConnection(con);     		}     		ps = psc.createPreparedStatement(conToUse);     		applyStatementSettings(ps);     		PreparedStatement psToUse = ps;     		if (this.nativeJdbcExtractor != null) {     			psToUse = this.nativeJdbcExtractor.getNativePreparedStatement(ps);     		}     		T result = action.doInPreparedStatement(psToUse); // calls DAO HERE, T=MaxVoipLineInfo     		handleWarnings(ps);     		return result;     	}     	catch (SQLException ex) {     		// Release Connection early, to avoid potential connection pool deadlock     		// in the case when the exception translator hasn't been initialized yet.     		if (psc instanceof ParameterDisposer) {     			((ParameterDisposer) psc).cleanupParameters();     		}     		String sql = getSql(psc);     		psc = null;     		JdbcUtils.closeStatement(ps);     		ps = null;     		DataSourceUtils.releaseConnection(con, getDataSource());     		con = null;     		throw getExceptionTranslator().translate(""PreparedStatementCallback"", sql, ex);     	}     	finally {     		if (psc instanceof ParameterDisposer) {     			((ParameterDisposer) psc).cleanupParameters();     		}     		JdbcUtils.closeStatement(ps);                          // HERE we would test a JVM property 			             ResultSet rs = ps.getResultSet()   // INS LINE 1     		if( rs != null ) {	  // INS LINE 2     			rs.close();   // INS LINE 3     		}            // INS LINE 4     		DataSourceUtils.releaseConnection(con, getDataSource());     	}     }  ---  **Issue Links:** - #16364 JdbcTemplate.execute(*Statement) request for ResultSet auto-close support","closed","type: enhancement,","spring-projects-issues","2014-04-25T18:06:43Z","2019-01-11T21:18:30Z"
"","16765","FrameworkServlet not Servlet 2.5 compatible unless publishEvents=false [SPR-12151]","**[Matt B](https://jira.spring.io/secure/ViewProfile.jspa?name=butallmj)** opened **[SPR-12151](https://jira.spring.io/browse/SPR-12151?redirect=false)** and commented  org.springframework.web.servlet.FrameworkServlet uses an EE 6 only method, which causes problems on WebSphere 7. Which, according to https://spring.io/blog/2014/09/04/spring-framework-4-1-ga-is-here, should be compatible.  ``` java.lang.NoSuchMethodError: javax/servlet/http/HttpServletResponse.getStatus()I 	at org.springframework.web.servlet.FrameworkServlet.publishRequestHandledEvent(FrameworkServlet.java:1066) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:996) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:852) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:718) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:831) 	at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1661) 	at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:944) 	at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:507) 	at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:181) 	at com.ibm.ws.webcontainer.webapp.WebApp.handleRequest(WebApp.java:3954) 	at com.ibm.ws.webcontainer.webapp.WebGroup.handleRequest(WebGroup.java:276) 	at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:945) 	at com.ibm.ws.webcontainer.WSWebContainer.handleRequest(WSWebContainer.java:1592) 	at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:191) 	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:453) 	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewRequest(HttpInboundLink.java:515) 	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.processRequest(HttpInboundLink.java:306) 	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.ready(HttpInboundLink.java:277) 	at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.sendToDiscriminators(NewConnectionInitialReadCallback.java:214) 	at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.complete(NewConnectionInitialReadCallback.java:113) 	at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:175) 	at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217) 	at com.ibm.io.async.AsyncChannelFuture.fireCompletionActions(AsyncChannelFuture.java:161) 	at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:138) 	at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:204) 	at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:775) 	at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:905) 	at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1656) ```  ---  **Affects:** 4.1 GA  **Issue Links:** - #16817 HttpServletResponse#getStatus() gets used in servlet 2.5 environment (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7953c5fd88575c72074f4a27016077ca73c6cfbd","closed","type: bug,","spring-projects-issues","2014-09-04T11:28:32Z","2019-01-11T17:21:05Z"
"","17128","I can use ';' and EOL for delimiter of base-package attribute(component scan) [SPR-12523]","**[Masahiko Kudo](https://jira.spring.io/secure/ViewProfile.jspa?name=kudo)** opened **[SPR-12523](https://jira.spring.io/browse/SPR-12523?redirect=false)** and commented  Document say ""Alternatively, you can specify a comma-separated list that includes the parent package of each class."", but I can use ';' and EOL for delimiter of base-package attribute.  Like    It is not so bad.  But I found ComponentScanBeanDefinitionParser use ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS as delimiters.(at ComponentScanBeanDefinitionParser#parse) CONFIG_LOCATION_DELIMITERS is "",; \t\n"", then I can use ';' and EOL as delimiter.  It looks evil...CONFIG_LOCATION_DELIMITERS says it is ""Any number of these characters are considered delimiters between multiple context config paths in a single String value.""  Please make other const for ComponentScan. And decide extends  or fix specification of delimiter.   ---  **Affects:** 4.0.8, 4.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6f2de283c467cf5bc91a79a4fa3836d1505639f4, https://github.com/spring-projects/spring-framework/commit/39fbfbd3434eba391b929edb65d7896352326b91  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)","closed","in: core,","spring-projects-issues","2014-12-08T21:43:34Z","2014-12-30T05:21:47Z"
"","16792","UriComponents#expand - Omit query parameter if variable is null [SPR-12178]","**[marty schlegel](https://jira.spring.io/secure/ViewProfile.jspa?name=mrtschlegel)** opened **[SPR-12178](https://jira.spring.io/browse/SPR-12178?redirect=false)** and commented  Currently if any value of a uri variable passed to UriComponents#expand is null, the empty string is inserted regardless of where the variable occurs in the uri.  If the variable corresponds to a query parameter (e.g. http://host.com?name=value&var={variable}), and it is null, would it be possible to exclude that query parameter in the result of expand (e.g. http://host.com?name=value)?  ---  **Affects:** 4.1 GA","closed","type: enhancement,","spring-projects-issues","2014-09-11T07:31:29Z","2019-01-13T20:58:47Z"
"","16362","Java based config should support class-only component declarations through @Import [SPR-11740]","**[Marty Pitt](https://jira.spring.io/secure/ViewProfile.jspa?name=martypitt)** opened **[SPR-11740](https://jira.spring.io/browse/SPR-11740?redirect=false)** and commented  Currently, when declaring my beans via Java config, I'm provided with two options:  * Implicitly, without construction responsibility -- Using a `@Component` annotation, and let Spring discover the bean. * Explicitly, with construction responsibility -- Using a `@Bean` annotation within a `@Configuration` class.  There is a valid use case where I would like to explicitly declare a set of beans, but leave Spring responsible for their construction.  This is analogous to the classic `` xml approach.  A possible syntax for this would be:  ```java @Configuration  public class MyAppConfig {      // Explictly provide the class, not the instance to Spring     @Bean     public MyFunkySpringBean funkyBean; // No instance -- it's up to Spring to build } ```  ---  **Reference URL:** http://stackoverflow.com/questions/23313262/spring-java-config-specify-class-only  **Issue Links:** - #15547 `@Bean` on Java 8 default methods in interfaces  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f0ac2784a4e9602a06bc91c3368f7cf423fc52dc, https://github.com/spring-projects/spring-framework/commit/a15dc08bea504964ddf3bd3ce4c1ef03ffcb1d1e  1 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2014-04-26T09:23:56Z","2019-01-13T06:54:18Z"
"","16809","NoUniqueBeanDefinitionException when autowiring static nested class that extends its containing class [SPR-12195]","**[Martin Kühl](https://jira.spring.io/secure/ViewProfile.jspa?name=mkhl)** opened **[SPR-12195](https://jira.spring.io/browse/SPR-12195?redirect=false)** and commented  Trying to autowire the component from code like the following {code:} class NestedBeans { `@Component` static class StaticNested extends NestedBeans {} }  ```  results in a NoUniqueBeanDefinitionException: {code:} NoUniqueBeanDefinitionException: No qualifying bean of type [com.example.NestedBeans$StaticNested] is defined: expected single matching bean but found 2: nestedBeans.StaticNested,com.example.NestedBeans$StaticNested ```  We can work around this by explicitly naming the component (see branch ""named"" in the reproduction repo). It also disappears when the nested class does **not** extend the containing class.   ---  **Affects:** 3.1.4, 4.0.7  **Reference URL:** https://github.com/ewerk/bug-report_spring-static-nested-beans","closed","in: core,","spring-projects-issues","2014-09-15T06:27:17Z","2014-10-01T03:11:47Z"
"","16778","OrderSourceProvider: OrderComparator ignores object in case no factory method could be identified [SPR-12164]","**[Martin Frey](https://jira.spring.io/secure/ViewProfile.jspa?name=mfrey)** opened **[SPR-12164](https://jira.spring.io/browse/SPR-12164?redirect=false)** and commented  With the introduction of the OrderSourceProvider into the OrderComparator it seems that one test case was not taken into account:  In case the ""factory method"" is a simple constructor the returned object is **null**, thus rendering the comparison useless. (Detected during autowiring)  Two possible fixes: - sourceProvider.getOrderSource method (FactoryAwareOrderSourceProvider) should return the original Object in case no specific OrderSource was found. - Order Comparator should be aware that getOrderSource might return null and use the original Object.    ---  **Affects:** 4.1 GA","closed","in: core,","spring-projects-issues","2014-09-08T02:25:35Z","2019-01-12T05:25:23Z"
"","16630","NPE in Elvis Expression (ExitTypeDescriptor null) [SPR-12014]","**[Martin Frey](https://jira.spring.io/secure/ViewProfile.jspa?name=mfrey)** opened **[SPR-12014](https://jira.spring.io/browse/SPR-12014?redirect=false)** and commented  I just did a test run today with RC1 and an expression that was before does throw now an NPE during the evaluation.  I'm using Thymeleaf and the expression is using a ""toplevel"" variable **cols** which is optional and resolves to null in the current case.  ``` ${cols ?: 80} ```  In SPEL this resolves into the structure that i have attached as an image. As you can see the **result** is resolved properly, but the expression finally fails with an NPE in the class **Elvis** on _line 59_ as the **testDescriptor** is null at this point.  Probably it has something to do with the introduction of the class **CompilablePropertyAccessor**? I have found this code in the class **PropertyOrFieldReference**.  ``` // line 366 if (ref.cachedReadAccessor instanceof CompilablePropertyAccessor) {             CompilablePropertyAccessor accessor = (CompilablePropertyAccessor)this.ref.cachedReadAccessor;             this.ref.exitTypeDescriptor = CodeFlow.toDescriptor(accessor.getPropertyType());        } ```  And on the Thymleaf side:  ```  public class VariablesMapPropertyAccessor extends ReflectivePropertyAccessor {...} ```  Let me know if you need more info.   ---  **Affects:** 4.1 RC1  **Attachments:** - [Screen Shot 2014-07-21 at 15.56.18.png](https://jira.spring.io/secure/attachment/22131/Screen+Shot+2014-07-21+at+15.56.18.png) (_194.47 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4b09fcc67c52f85a6c75a561090a8d6a742393f8","closed","in: core,","spring-projects-issues","2014-07-21T07:12:03Z","2014-08-15T01:52:41Z"
"","16812","Unexpected override order for @Configuration based property sources [SPR-12198]","**[Martin Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=mgbckr)** opened **[SPR-12198](https://jira.spring.io/browse/SPR-12198?redirect=false)** and commented  When using any `@Configuration` based way to register property sources, the order of overriding properties should follow certain rules as stated in `@PropertySource` documentation (http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/PropertySource.html).  That is, at least when using  ```java AnnotationConfigApplicationContext ctx =     new AnnotationConfigApplicationContext(); ctx.register(ConfigA.class); ctx.register(ConfigB.class); ctx.register(ConfigC.class); ctx.register(ConfigD.class); ctx.refresh(); ```  Properties defined by `ConfigB` should override properties from `ConfigA` and properties from `ConfigC` should override properties from `ConfigB`, etc.: D > C > B > A  However, there are cases when this does not happen. The properties source registered first will be overridden fine, but the order reverses for all additional property sources. Thus the second one added always takes precedence. B > C > D > A  Please refer to the following test for an example: https://code.google.com/p/fstyle-test/source/browse/bug/spring-property-source-order/src/test/java/de/fstyle/test/spring/property/source/order/test/TestConfguration.java  ---  **Affects:** 4.1 GA  **Reference URL:** https://code.google.com/p/fstyle-test/  **Issue Links:** - #16873 `@PropertySource` orders sources incorrectly when the number of sources is > 2 (_**""is duplicated by""**_) - #16858 PropertySource overrides do not work with more than one classpath file  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/646  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2014-09-16T02:09:36Z","2019-01-13T05:44:59Z"
"","17009","HIbernateJpaSessionFactory only works for hibernate < 4.3 [SPR-12401]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-12401](https://jira.spring.io/browse/SPR-12401?redirect=false)** and commented  The JPA classes for hibernate have been modified to work with Hibernate 4.3 and earlier versions. However the `HibernateJpaSessionFactoryBean` only works on hibernate versions < 4.3. This always uses the `org.hibernate.ejb.HibernateEntityManagerFactory` interface whereas in hibernate 4.3 this is `org.hibernate.jpa.EntityManagerFactory`.   ---  **Affects:** 4.0.7, 4.1.1  **Reference URL:** http://stackoverflow.com/questions/26667910/no-currentsessioncontext-configured  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/47294838044d8bad7e8896c82d4bdceda3394952, https://github.com/spring-projects/spring-framework/commit/bf5739c56b46553d2c376bc4c952880e9bccd987  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","type: bug,","spring-projects-issues","2014-10-31T02:19:01Z","2014-11-10T23:12:26Z"
"","16911","Reference guide points to Quartz 1.x classes [SPR-12306]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-12306](https://jira.spring.io/browse/SPR-12306?redirect=false)** and commented  The reference guide for Spring 4.1 still has a section on using the `JobDetailBean`. That class however doesn't exist anymore due to the dropped quartz 1. support.   ---  **Affects:** 4.1 GA, 4.1.1  **Reference URL:** http://stackoverflow.com/questions/26226611/org-springframework-scheduling-quartz-jobdetailbean-missing-in-spring-4-1-1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aaf69eb1f12e2bcd5c10c7d58ccb3fcdf543fb43, https://github.com/spring-projects/spring-framework/commit/a7eeedaf6a21c8a2d90d7ec0f2d8b54799a01338","closed","type: documentation,","spring-projects-issues","2014-10-06T23:41:52Z","2014-11-17T06:42:33Z"
"","16887","Wrong reference to SingleColumnRowMapper in deprecated-list [SPR-12282]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-12282](https://jira.spring.io/browse/SPR-12282?redirect=false)** and commented  The javadocs at http://docs.spring.io/spring/docs/current/javadoc-api/deprecated-list.html#interface reference `SingleColumnRowMapper` whereas this should be `RowMapper` instead.  For upgrading users this might be confusing.   ---  **Affects:** 4.1.1  **Reference URL:** http://stackoverflow.com/questions/26122275/upgrading-from-parameterizedrowmapper-to-singlecolumnrowmapper-for-multiple-colu  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b2d67914a8c908af1ff4ef2c45d2ce1b21f6fe7e","closed","type: documentation,","spring-projects-issues","2014-10-01T05:15:21Z","2014-11-17T06:42:24Z"
"","16811","Add JavaConfig equivalent of tx:jta-transaction-manager [SPR-12197]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-12197](https://jira.spring.io/browse/SPR-12197?redirect=false)** and commented  When using xml based configured there is the convenience `` which does an effort in detecting and configuring the appropriate `JtaTransactionManager` for the detected platform.  In JavaBased config there is no such option and I feel that for a couple of projects I've written the same code. Would be nice if there would be an option `FactoryBean` maybe? To have this feature in JavaConfig as well.   ---  **Affects:** 4.0.7, 4.1 GA","closed","type: enhancement,","spring-projects-issues","2014-09-16T01:29:26Z","2014-10-01T10:21:49Z"
"","16735","Include http status code in ServletRequestHandledEvent [SPR-12119]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-12119](https://jira.spring.io/browse/SPR-12119?redirect=false)** and commented  At the moment the `ServletRequestHandledEvent` includes the exception that occured during request processing. It would also be nice to have the actual http status code in the event, even if it was only for logging purposes.   ---  **Affects:** 4.0.6, 4.1 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/36542549fa5712b235eb4e7d60e3de537e84416b","closed","type: enhancement,","spring-projects-issues","2014-08-26T00:25:00Z","2014-09-04T05:31:15Z"
"","16732","Improve @PropertySource loading support [SPR-12116]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-12116](https://jira.spring.io/browse/SPR-12116?redirect=false)** and commented  Recently we need to add support to load properties from a database and make those available to the `Environment`. Although not that hard (we used an `ApplicationContextInitializer` and added some `PropertySources`) it still requires some knowledge of the Spring Framework infrastructure.  Would it be possible to introdudce a `loader` attribute on the `@PropertySource` annotation in which you could specify a `PropertySourcesLoader` which in turn contains the strategy for loading that particuliar property source. The code from `ConfigurationClassParser` could load/instantiate this loader and delegate loading to it. A default implementation containing the current loading strategy could be added.  This would also allow for easier  loading of for instance yaml, xml or json files.  ---  **Issue Links:** - #13603 Allow the use of custom PropertySource annotations in `@Configuration` classes (_**""duplicates""**_)  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-08-24T23:08:02Z","2019-01-13T05:45:54Z"
"","15973","Allow for globally disable log4jExposeWebAppRoot [SPR-11921]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-11921](https://jira.spring.io/browse/SPR-11921?redirect=false)** and commented  Currently you need to disable this on a per application basis would be nice if this could be done with a System/environment property and enabled on per application basis.  Maybe even introduce placeholder support (which would already allow for system, environment replacement).   --- No further details from [SPR-11921](https://jira.spring.io/browse/SPR-11921?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2014-06-25T23:25:24Z","2019-01-12T02:46:17Z"
"","16539","Allow placeholders in value for webAppRootKey [SPR-11920]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-11920](https://jira.spring.io/browse/SPR-11920?redirect=false)** and commented  ```      webAppRootKey     app.${env}.root  ```  It would be nice if we could use a placeholder (see above) in the `webAppRootKey` parameter just we can we the `log4jConfigLocation`.  We deploy the same application for different environments on the same server. Now we need to modify the properties for each war if it could use the same mechanism of replacing placeholders this would help.   ---  **Affects:** 3.2.9, 4.0.5","closed","status: bulk-closed,","spring-projects-issues","2014-06-25T23:05:57Z","2019-01-12T02:29:39Z"
"","16512","Replace abandoned java.net ROME 1.0 with com.rometools ROME 1.5 [SPR-11893]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-11893](https://jira.spring.io/browse/SPR-11893?redirect=false)** and commented  The rome library (version 1.0) seem quite unmaintained latest version is from 2010. It appears that development has been picked up again on GitHub (https://github.com/rometools/rome).  Recently they released an updated version of rome 1.5.0 (com.rometools:rome:1.5.0).  Would be nice if support for this was added.   ---  **Affects:** 4.0.5","closed","type: task,","spring-projects-issues","2014-06-20T11:40:40Z","2014-07-18T10:16:33Z"
"","17129","HttpComponentsClientHttpResponse close() method always close the underlying connection [SPR-12524]","**[Marrache Mickael](https://jira.spring.io/secure/ViewProfile.jspa?name=miko95)** opened **[SPR-12524](https://jira.spring.io/browse/SPR-12524?redirect=false)** and commented  I'm trying to use a RestTemplate passing my own HttpComponentsClientHttpRequestFactory and using the default HttpClient (which by default enables persistent connections).  HttpClient httpClient = HttpClients.createDefault(); HttpComponentsClientHttpRequestFactory clientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory(httpClient); RestTemplate restTemplate = new RestTemplate(clientHttpRequestFactory);  Then, I call the postForLocation method to do a POST request. At some point, the doExecute method is executed and the request is sent and an HttpComponentsClientHttpResponse is created. However, the doExecute method has a finally block that always closes the response after execution. The problem is that HttpComponentsClientHttpResponse calls EntityUtils.consume(entity) which closes the underlying stream and therefore closes the TCP connection.  The Apache docs say:  The difference between closing the content stream and closing the response is that the former will attempt to keep the underlying connection alive by consuming the entity content while the latter immediately shuts down and discards the connection. ..... When working with streaming entities, one can use the EntityUtils#consume(HttpEntity) method to ensure that the entity content has been fully consumed and the underlying stream has been closed.  The problem is that I can't use persistent connections feature.   ---  **Affects:** 3.2.12","closed","status: invalid,","spring-projects-issues","2014-12-09T00:25:04Z","2019-01-12T05:24:57Z"
"","16974","Automatic conversion from DataSource to *JdbcTemplate [SPR-12368]","**[Markus Heiden](https://jira.spring.io/secure/ViewProfile.jspa?name=markus_heiden)** opened **[SPR-12368](https://jira.spring.io/browse/SPR-12368?redirect=false)** and commented  To avoid unnecessary injection of DataSources to manually create JdbcTemplates in `@PostConstruct` it would be nice if spring supports the injection of DataSources into *JdbcTemplate fields like:  `@Resource`(name = ""aDataSource"") private NamedParameterJdbcTemplate template;   ---  **Affects:** 4.1 GA  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-10-23T04:50:51Z","2019-01-12T00:18:29Z"
"","16996","Add adapter from Hibernate ScrollableResults to Java 8 Stream [SPR-12388]","**[Marko Topolnik](https://jira.spring.io/secure/ViewProfile.jspa?name=mtopolnik)** opened **[SPR-12388](https://jira.spring.io/browse/SPR-12388?redirect=false)** and commented  I submit a pull request which contributes the following:  1. an abstract base class to create Java 8 spliterators with a fixed-batch-size splitting policy; 2. a concrete Spliterator extending it for the case of Hibernate's ScrollableResults.  This is to support the use case presented in #16954: conforming with the MVC pattern in building REST services while supporting the lazy fetching of the database result set inside the view layer.  ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/684  3 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-10-28T14:11:59Z","2019-01-12T00:18:23Z"
"","16954","HibernateTransactionManager should allow holdability of ResultSet into the View layer [SPR-12349]","**[Marko Topolnik](https://jira.spring.io/secure/ViewProfile.jspa?name=mtopolnik)** opened **[SPR-12349](https://jira.spring.io/browse/SPR-12349?redirect=false)** and commented  I would like an old topic to be reconsidered in the light of new developments. One of the issues dealing with the topic was #6715 and it was resolved such that the Hibernate session releases its JDBC connection upon the completion of a transaction.  In the context of a REST Web Service, I want to use the standard MVC mechanism where a `MessageConverter` is dispatched to handle an object returned from a `@Controller`, but I want that mechanism to support Java 8 Streams and let the `MesageConverter` consume the stream while producing the response. The stream source would be Hibernate's `ScrollableResults`. Note the following advantages:  - O(1) space complexity instead of O(N); - transaction semantics stay intact: the transaction is committed when exiting the service layer; - all the business logic stays within the service layer. The returned Stream wraps the logic needed to transform the SQL results into response DTOs; - the transformation can be automatically parallelized with no thread safety issues on the JDBC level (`Spliterator`'s programming model is single-threaded).  I have set up the following:  1. `MappingJackson2HttpMessageConverter` enriched with a `JsonSerializer` which handles a Java 8 `Stream`; 2. a custom `ScrollableResultSpliterator` needed to wrap `ScrollableResults` into a `Stream`; 3. `OpenSessionInViewInterceptor` needed to keep the Hibernate session open within the `MessageConverter`; 4. set `hibernate.connection.release_mode` to `ON_CLOSE`; 5. ensure that the JDBC connection has the necessary ResultSet holdability: `con.setHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT)`  The final stumbling point I have encountered is the policy used by `HibernateTransactionManager` on transaction commit: unless the underlying session is ""Hibernate-managed"", it will `disconnect()` it, closing my cursor along with everything else. Such a policy is useful in some special scenarios, specifically ""conversation-scoped sessions"", which  are far removed from my requirements.  Since I regard my approach as ""the right way"" to generate `ResultSet`-backed REST responses, and since the Streams API makes this approach very convenient, I would like to have support for it from Spring.  ---  **Affects:** 4.1.1  **Reference URL:** http://stackoverflow.com/questions/26324112/trouble-using-scrollableresults-backed-stream-as-return-type-in-spring-mvc  **Issue Links:** - #13659 Hibernate4 version of SpringSessionContext.currentSession() does not create a session if TransactionSynchronizationManager does not contain one  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/49f3a6beffc744f6457426df1383f90f620eed74","closed","type: enhancement,","spring-projects-issues","2014-10-20T02:29:01Z","2019-01-11T19:12:51Z"
"","16565","Content-length header missing when serializing to XML [SPR-11948]","**[Mariusz Pala](https://jira.spring.io/secure/ViewProfile.jspa?name=mariusz.pala)** opened **[SPR-11948](https://jira.spring.io/browse/SPR-11948?redirect=false)** and commented  Hi,  I have a service returning some data, JSON response has a Content-length header correctly set whether XML result is chunked because that header is not added:  ``` HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: application/xml Transfer-Encoding: chunked Date: Thu, 03 Jul 2014 14:16:17 GMT ```  My method definition is as follows:  ``` @RequestMapping(value = ""/form/{repository}/{objectId}"", method = RequestMethod.GET, 			produces = { ""application/xml"", ""application/json"" }) 	@ResponseBody 	public FormHelper getFormConfig(HttpServletRequest req, HttpServletResponse resp... ```  Configuration XML:  ``` 	  	 		 	 ```  I found some issue reported to be fixed in v3.1 M1, but in v3.2.1 I can see this issue - only when XML is requested.  Thanks in advanced for a fix for this. Mariusz  ---  **Affects:** 3.2.1  **Issue Links:** - #21263 Set a correct 'Content-Length' Header in MappingJackson2HttpMessageConverter or its super class  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/b5b978882c7429b2354d3b8ac478a244b147bf74  1 votes, 4 watchers","closed","in: web,","spring-projects-issues","2014-07-03T07:20:37Z","2019-01-11T22:26:35Z"
"","17163","Support jackson @JsonTypeInfo and @JsonSubTypes in @ModelAttribute [SPR-12561]","**[Marius Hächler](https://jira.spring.io/secure/ViewProfile.jspa?name=marius.haechler)** opened **[SPR-12561](https://jira.spring.io/browse/SPR-12561?redirect=false)** and commented  It would really be handy if the `@ModelAttribute` or Datebinder would support jsonSubType Get Parameters.  This would allow very dynamic Forms where the type parameter could be used as view name and Type for an Implementation.  Java Jackson Annotations  ```java @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = ""type"") @JsonSubTypes({ 	@Type(value = Form1.class, name = ""Type1""), 	@Type(value = Form2.class, name = ""Type2"") }) ```  JSON  ```json {   type: ""Type1"",   name: ""Test"" } ```  HTTP Params  ```http type: ""Type1"", name: ""Test"" ```  The expection would be that a form of the type Form1 gets intantiated and then filled with the other parameters like name.  Of course, for this to be usefull it should also support nested subtypes.   --- No further details from [SPR-12561](https://jira.spring.io/browse/SPR-12561?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2014-12-19T06:53:55Z","2019-01-12T03:30:49Z"
"","17126","Make BeanUtils or DataBinder support Interfaces via default implementation [SPR-12521]","**[Marius Hächler](https://jira.spring.io/secure/ViewProfile.jspa?name=marius.haechler)** opened **[SPR-12521](https://jira.spring.io/browse/SPR-12521?redirect=false)** and commented  It would be really handy if the BeanUtils or DataBinder would support instantiating fields that have an interface type. In fact it would be even handier if it would support this in nested properties.  Use Case: A `@ModelAttribute` Form has nested Objects. Those Objects could contain more nested Objects. The type of this Objects refers to an Interface. Instantiating the Form would make you go all the way down to the lowest object and instantiate each nested by hand. Using default implementations of interfaces would remove this manual step and make a generic solution available.  I am thinking of either an `@Default`(Form.class) annotation on field or Interface level.    ---  **Affects:** 4.1.2","closed","status: bulk-closed,","spring-projects-issues","2014-12-08T07:15:04Z","2019-01-12T03:31:01Z"
"","17125","Make BeanWrapperImpl use BeanUtils [SPR-12520]","**[Marius Hächler](https://jira.spring.io/secure/ViewProfile.jspa?name=marius.haechler)** opened **[SPR-12520](https://jira.spring.io/browse/SPR-12520?redirect=false)** and commented  BeanWrapperImpl#newValue(Class type, String name) does instantiate some classes and doesn't use the BeanUtils.instantiate.  Can't really determine why not. I say this would make sense, since BeanUtils make additional checks.   ---  **Affects:** 4.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c0269770af0f2f51cc7758aa096d8369907d439f","closed","type: enhancement,","spring-projects-issues","2014-12-08T07:08:05Z","2015-05-26T01:15:08Z"
"","17123","AnnotationTransactionAspect retains reference to JpaTransactionManager from closed context [SPR-12518]","**[Marek Wiącek](https://jira.spring.io/secure/ViewProfile.jspa?name=marekw)** opened **[SPR-12518](https://jira.spring.io/browse/SPR-12518?redirect=false)** and commented  #### Original Input From Reporter  _`@DirtiesContext` is broken in 4.1.0_:  `spring-test` fails to recreate a context containing a JPA `EntityManager` if a test class is annotated with `@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)`. Interestingly, this only happens in AspectJ mode for `@Transactional` support.  See the attached program to see how to reproduce the problem.  Downgrading the version number in `build.gradle` to 4.0.8.RELEASE fixes this problem. Apparently this is a regression introduced in `4.1.0.RELEASE`.  ---  #### Analysis  The behavior experienced in the example project is a direct result of the caching introduced in #16570.  Specifically, the `determineTransactionManager()` method in `TransactionAspectSupport` (which is a superclass of `AnnotationTransactionAspect` which in turn provides AspectJ-based support for `@Transactional` in Spring) now retains a reference to the `PlatformTransactionManager`. Since the aspect is a singleton within the class loader, its internal state does not get automatically reset when the application context is closed via `@DirtiesContext` semantics.  In other words, the testing framework does in fact close the application context due to `@DirtiesContext` semantics, but the `AnnotationTransactionAspect` retains a reference to the `JpaTransactionManager` from the closed application context, and that transaction manager in turn retains a reference to the closed `EntityManagerFactory`. This is evident in the resulting stack trace.  ``` org.springframework.transaction.CannotCreateTransactionException: Could not open JPA EntityManager for transaction; nested exception is java.lang.IllegalStateException: EntityManagerFactory is closed 	at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:431) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:373) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:439) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:262) 	at org.springframework.transaction.aspectj.AbstractTransactionAspect.ajc$around$org_springframework_transaction_aspectj_AbstractTransactionAspect$1$2a73e96c(AbstractTransactionAspect.aj:64) 	at EntryDaoImpl.saveEntry(EntryDaoImpl.java:14) 	at EntryDaoTest.testSaveEntry(EntryDaoTest.java:21) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:73) 	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:82) 	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:73) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:217) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:83) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:68) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:163) 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86) 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49) 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69) 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:48) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) 	at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) 	at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) 	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) 	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:105) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) 	at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:360) 	at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.IllegalStateException: EntityManagerFactory is closed 	at org.hibernate.jpa.internal.EntityManagerFactoryImpl.validateNotClosed(EntityManagerFactoryImpl.java:388) 	at org.hibernate.jpa.internal.EntityManagerFactoryImpl.internalCreateEntityManager(EntityManagerFactoryImpl.java:342) 	at org.hibernate.jpa.internal.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:313) 	at org.springframework.orm.jpa.JpaTransactionManager.createEntityManagerForTransaction(JpaTransactionManager.java:449) 	at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:369) 	... 54 more ```  ---  #### Deliverables  1. [ ] _TBD_  ---  **Affects:** 4.1 GA  **Attachments:** - [spring-jpa-tx.tar.bz2](https://jira.spring.io/secure/attachment/22389/spring-jpa-tx.tar.bz2) (_51.51 kB_)  **Issue Links:** - #16570 Reduce PlatformTransactionManager lookups in TransactionAspectSupport (_**""depends on""**_) - #10789 Dependency injection of `@Configurable` objects should work across test suites - #11019 TestContext framework should support one AspectJ instance per ApplicationContext - #12619 AnnotationTransactionAspect retains reference to closed BeanFactory - #17145 `@Transactional` qualifier is ignored by TransactionAspectSupport if default transaction manager is set  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ca91956bdbd54b7f25fd780f0f1292b657a0d3d9, https://github.com/spring-projects/spring-framework/commit/fd7153ffbb151369fd9876b9063864d8e0d7f977  0 votes, 6 watchers","closed","in: core,","spring-projects-issues","2014-12-07T15:19:14Z","2019-01-13T05:43:25Z"
"","16434","Create a common interface for AnnotationConfigApplicationContext and AnnotationConfigWebApplicationContext [SPR-11814]","**[Marek Wiącek](https://jira.spring.io/secure/ViewProfile.jspa?name=marekw)** opened **[SPR-11814](https://jira.spring.io/browse/SPR-11814?redirect=false)** and commented  The AnnotationConfigApplicationContext and AnnotationConfigWebApplicationContext classes implement methods named ""scan"" and ""register"" but lack a common supertype with declarations of these 2 methods. Please create a common interface so that ""scan"" and ""register"" can be invoked without casting a context reference to a concrete implementation.   ---  **Affects:** 4.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3e3c5312f73194121e566e75ade58108925a15c","closed","type: enhancement,","spring-projects-issues","2014-05-24T18:01:36Z","2014-07-18T10:16:36Z"
"","16423","Support standard javax.transaction.Transactional in AspectJ [SPR-11803]","**[Marek Wiącek](https://jira.spring.io/secure/ViewProfile.jspa?name=marekw)** opened **[SPR-11803](https://jira.spring.io/browse/SPR-11803?redirect=false)** and commented  AnnotationTransactionAspect currently only has pointcuts for org.springframework.transaction.annotation.Transactional annotations. Please add support for javax.ejb.TransactionAttribute and javax.transaction.Transactional.  ---  **Affects:** 4.0.4  **Issue Links:** - #13778 Support for JTA 1.2 transaction annotation - #21525 AspectJ aspect for `@javax`.transaction.Transactional is not initialised by default  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fa8d202a455319c6edb5a899b86ccc260f2e78be  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2014-05-17T10:29:06Z","2019-01-13T06:53:57Z"
"","17131","Prototype with changing bean class does not get populated with dependencies after type switch [SPR-12526]","**[Marcin Piela](https://jira.spring.io/secure/ViewProfile.jspa?name=mpiela)** opened **[SPR-12526](https://jira.spring.io/browse/SPR-12526?redirect=false)** and commented  I created an interface (Service) with two implementations (FirstService, SecondService) with one dependency each (DependencyOne, DependencyTwo, respectively). The dependencies are to be injected via a `@Resource` annotated setter method. In a spring java configuration class I created a `@Bean` method with `@Scope`=prototype that based on some custom condition creates FirstService or SecondService using ""new"" operator. The method return type is Service. The problem is that when the method first creates an instance of FirstService and then the custom condition changes and on the second run an instance of SecondService is created it (SecondService instance) does not get populated with dependencies. I've attached a simple maven module with a test case to demonstrate the issue.    ---  **Affects:** 3.2.12, 4.0.8, 4.1.2  **Attachments:** - [spring-bug.zip](https://jira.spring.io/secure/attachment/22412/spring-bug.zip) (_5.05 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e118086bd11f96ba4c36c3ce668867faeea13431, https://github.com/spring-projects/spring-framework/commit/568e963466df0dec39ba481e63a6379f617d9304, https://github.com/spring-projects/spring-framework/commit/809ee0d350b49d2ae5a4f44f8f6643223d2b7656  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1), [3.2.13](https://github.com/spring-projects/spring-framework/milestone/101?closed=1)","closed","in: core,","spring-projects-issues","2014-12-09T06:56:38Z","2014-12-30T05:21:45Z"
"","16751","RestTemplate() and others deprecated with no hint for alternatives  [SPR-12135]","**[Marcel Stör](https://jira.spring.io/secure/ViewProfile.jspa?name=marcelstoer)** opened **[SPR-12135](https://jira.spring.io/browse/SPR-12135?redirect=false)** and commented  `WebMvcConfigurationSupport#addDefaultHttpMessageConverters`, `RestTemplate()`, `HttpRequestHandlingEndpointSupport(boolean)`, and `AllEncompassingFormHttpMessageConverter()` have two things in common: - they all contain similar code i.e. they add ""default"" message converters based on the existence of some classes in the classpath - they are all deprecated but no hint is given in the Javadoc as for which methods to use instead  How are default message converters supposed to be set in the future?  **Context** In order to use [jackson-datatype-joda](https://github.com/FasterXML/jackson-datatype-joda) (mapping JSON to Joda Time) one needs to call `MappingJackson2HttpMessageConverter.getObjectMapper().registerModule(new JodaModule())` at some point. While analyzing how to go about this with Spring Java config we came across `WebMvcConfigurationSupport#addDefaultHttpMessageConverters` and its deprecation warning. Btw, the only way to make this work for us seems to be  ``` @Configuration public class WebMvcConfiguration extends WebMvcConfigurationSupport { ...   @Override   public void configureMessageConverters(List messageConverter : messageConverters) {       if (messageConverter instanceof MappingJackson2HttpMessageConverter) {         ((MappingJackson2HttpMessageConverter) messageConverter).getObjectMapper().registerModule(             new JodaModule());       }     }   } } ```    ---  **Affects:** 4.0.6","closed","status: invalid,","spring-projects-issues","2014-08-29T04:35:44Z","2019-01-12T05:25:25Z"
"","16599","FormattingConversionService$AnnotationConverterKey.hashCode() throws NullPointerException [SPR-11983]","**[Marcel Stör](https://jira.spring.io/secure/ViewProfile.jspa?name=marcelstoer)** opened **[SPR-11983](https://jira.spring.io/browse/SPR-11983?redirect=false)** and commented  We're seeing a weird behavior with `AnnotationPrinterConverter` and its nested `AnnotationConverterKey`. It results in a `RuntimeException` but we cannot consistently reproduce the error.  In our web application it all starts with a form tag in a JSP:  ```html  ```  `MyModel#myField` is defined as follows:  ```java @NotNull(message = ""required"") @Min(value = 0, message = ""outOfRange"") @Max(value = 100, message = ""outOfRange"") private BigDecimal myField; ```  Conversion of this field (value) to a string sometimes fails:  ``` ... Caused by: org.apache.jasper.JasperException: An exception occurred processing JSP page.... ... Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type @javax.validation.constraints.NotNull @javax.validation.constraints.Min @javax.validation.constraints.Max java.math.BigDecimal to type java.lang.String for value '0'; nested exception is java.lang.NullPointerException         at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)         at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:168)         at org.springframework.expression.spel.support.StandardTypeConverter.convertValue(StandardTypeConverter.java:72)         ... 219 more Caused by: java.lang.NullPointerException         at org.springframework.format.support.FormattingConversionService$AnnotationConverterKey.hashCode(FormattingConversionService.java:310)         at java.util.concurrent.ConcurrentHashMap.hash(ConcurrentHashMap.java:332)         at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:987)         at org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter.convert(FormattingConversionService.java:221)         at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35) ```  As the exception nicely reports the `BigDecimal` field is not null but 0: ""...java.math.BigDecimal to type java.lang.String for value '0'...""  I analyzed the code in `FormattingConversionService.AnnotationParserConverter#convert` but I fail to understand how the two values passed to the key's constructor could ever be null. Yet, I suspect `annotation` to be null in some cases which eventually causes the NPE in `hashCode`.  The only other issue in JIRA that seems at least _somewhat_ related is #12532.  **Update 2014-07-14**  While I still cannot consistently reproduce it I happened to be in a remote debugging session when it recently failed. See [^stacktrace.png] and [^variables.png]. Here's how I interpret what I saw: - since the source type has annotations Spring chooses the `AnnotationPrinterConverter` - its `annotationType` has a value of `o.s.f.a.NumberFormat`, I don't understand why - `FormattingConversionService:220` creates a converter key and does `sourceType.getAnnotation(annotationType)` which will of course return null because the source type doesn't have a `o.s.f.a.NumberFormat` annotation - `FormattingConversionService.AnnotationConverterKey` isn't prepared to handle null values for its `annotation` member  ---  **Affects:** 3.2.8  **Attachments:** - [stacktrace.png](https://jira.spring.io/secure/attachment/22108/stacktrace.png) (_51.17 kB_) - [StrategyTableAssetClass.java](https://jira.spring.io/secure/attachment/22106/StrategyTableAssetClass.java) (_8.15 kB_) - [variables.png](https://jira.spring.io/secure/attachment/22109/variables.png) (_61.88 kB_)  1 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-07-11T07:03:30Z","2019-01-12T02:29:04Z"
"","17120","Please add static unprocessableEntity() builder method to ResponseEntity [SPR-12515]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-12515](https://jira.spring.io/browse/SPR-12515?redirect=false)** and commented  Lately I'm using http 422 Unprocessable Entity for returning validation errors. instead of a 400. It seems many public api's are changing to this (like github api).  So please add a static unprocessableEntity() builder method to ResponseEntity to have a shortcut for returning this http code.  This just like earlier request like #16686 and #16728.  ---  **Affects:** 4.1.2  **Issue Links:** - #16686 Consider adding static notFound() builder method to ResponseEntity - #16728 Consider adding static badRequest() builder method to ResponseEntity  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1daa5eb38355a0823e484475669411f9a02b550b, https://github.com/spring-projects/spring-framework/commit/0524a82c09689fab901e4718058f8c68f132d52a","closed","type: enhancement,","spring-projects-issues","2014-12-05T22:36:43Z","2019-01-11T18:29:38Z"
"","17094","SPR-12443 breaks Spring Security's AuthenticationConfiguration [SPR-12488]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-12488](https://jira.spring.io/browse/SPR-12488?redirect=false)** and commented  Don't know if I should create an issue or should use some different channel for this.  I've upgraded a simple project to latest Spring Framework 4.1.3.BUILD-SNAPSHOT which also uses Spring Security 4.0.0.M2.  With Spring 4.1.3.BUILD-SNAPSHOT I'm now experiencing issues with the bean creation of the `springSecurityFilterChain` in `org/springframework/security/config/annotation/web/configuration/WebSecurityConfiguration.class` due to 'Can only specify arguments for the getBean method when referring to a prototype bean definition'.  I honestly don't know if this Spring issue itself or Spring Security (or maybe even Spring Boot). I just want to raise this issue to avoid issues between the projects.  Here is the full stacktrace  ```  Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'securityFilterChainRegistration' defined in class path resource [org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [javax.servlet.Filter]: : Error creating bean with name 'springSecurityFilterChain' defined in class path resource [org/springframework/security/config/annotation/web/configuration/WebSecurityConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.servlet.Filter]: Factory method 'springSecurityFilterChain' threw exception; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'authenticationManagerBuilder' defined in class path resource [org/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration.class]: Can only specify arguments for the getBean method when referring to a prototype bean definition; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'springSecurityFilterChain' defined in class path resource [org/springframework/security/config/annotation/web/configuration/WebSecurityConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.servlet.Filter]: Factory method 'springSecurityFilterChain' threw exception; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'authenticationManagerBuilder' defined in class path resource [org/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration.class]: Can only specify arguments for the getBean method when referring to a prototype bean definition 	at org.springframework.betory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:752) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1113) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1008) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:505) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:229) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) 	at org.springframework.boot.context.embedded.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:176) 	at org.springframework.boot.context.embedded.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:80) 	at org.springframework.boot.context.embedded.ServletContextInitializerBeans.(ServletContextInitializerBeans.java:68) 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getServletContextInitializerBeans(EmbeddedWebApplicationContext.java:216) 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext$1.onStartup(EmbeddedWebApplicationContext.java:202) 	at org.springframework.boot.context.embedded.tomcat.ServletContextInitializerLifecycleListener.lifecycleEvent(ServletCont                                                                                                  extInitializerLifecycleListener.java:64) 	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117) 	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:229) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) 	at org.springframework.boot.context.embedded.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:176) 	at org.springframework.boot.context.embedded.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:80) 	at org.springframework.boot.context.embedded.ServletContextInitializerBeans.(ServletContextInitializerBeans.java:68) 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getServletContextInitializerBeans(EmbeddedWebApplicationContext.java:216) 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext$1.onStartup(EmbeddedWebApplicationContext.java:202) 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5095) 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1409) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1399) 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:745) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'springSecurityFilterChain' defined in class path resource [org/springframework/security/config/annotation/web/configuration/WebSecurityConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.servlet.Filter]: Factory method 'springSecurityFilterChain' threw exception; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'authenticationManagerBuilder' defined in class path resource [org/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration.class]: Can only specify arguments for the getBean method when referring to a prototype bean definition 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:602) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1113) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBery.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1008) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:505) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:229) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1127) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1051) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:949) 	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:816) 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:744) 	... 25 more Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.servlet.Filter]: Factory method 'springSecurityFilterChain' threw exception; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'authenticationManagerBuilder' defined in class path resource [org/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration.class]: Can only specify arguments for the getBean method when referring to a prototype bean definition 	at org.springframework.beans.factory.support.SimantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:591) 	... 38 more Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'authenticationManagerBuilder' defined in class path resource [org/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration.class]: Can only specify arguments for the getBean method when referring to a prototype bean definition 	at org.springframework.beans.factory.support.AbstractBeanFactory.checkMergedBeanDefinition(AbstractBeanFactory.java:1277) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:281) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:203) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:326) 	at org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration$$EnhancerBySpringCGLIB$$43b454b9.authenticationManagerBuilder() 	at org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.getAuthenticationManager(AuthenticationConfiguration.java:73) 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.authenticationManager(WebSecurityConfigurerAdapter.java:236) 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.getHttp(WebSecurityConfigurerAdapter.java:178) 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.init(WebSecurityConfigurerAdapter.java:283) 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.init(WebSecurityConfigurerAdapter.java:68) 	at org.springframework.boot.actuate.autoce.ManagementSecurityAutoConfiguration$ManagementWebSecurityConfigurerAdapter$$EnhancerBySpringCGLIB$$bd94b38c.init() 	at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.init(AbstractConfiguredSecurityBuilder.java:367) 	at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.doBuild(AbstractConfiguredSecurityBuilder.java:320) 	at org.springframework.security.config.annotation.AbstractSecurityBuilder.build(AbstractSecurityBuilder.java:39) 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration.springSecurityFilterChain(WebSecurityConfiguration.java:92) 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$$EnhancerBySpringCGLIB$$62f4cffd.CGLIB$springSecurityFilterChain$3() 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$$EnhancerBySpringCGLIB$$62f4cffd$$FastClassBySpringCGLIB$$be3873d6.invoke() 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:313) 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$$EnhancerBySpringCGLIB$$62f4cffd.springSecurityFilterChain() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:483) 	at org.springsource.loaded.ri.ReflectiveInterceptor.jlrMethodInvoke(ReflectiveInterceptor.java:1270) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) 	... 39 more 	at org.springframework.boot.context.embedded.tomcat.ServletContextInitializerLifecycleListener.lifecycleEvent(ServletContextInitializerLifecycleListener.java:64)     org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117) 	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90) 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5095) 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1409) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1399) 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:745) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'springSecurityFilterChain' defined in class path resource [org/springframework/security/config/annotation/web/configuration/WebSecurityConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.servlet.Filter]: Factory method 'springSecurityFilterChain' threw exception; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'authenticationManagerBuilder' defined in class path resource [org/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration.class]: Can only specify arguments for the getBean method when referring to a prototype bean definition 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:602) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1113) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapabl                                                                                                  eBeanFactory.java:1008) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:505) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:229) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1127) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1051) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:949) 	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:816) 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:744) 	... 25 common frames omitted Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.servlet.Filter]: Factory method 'springSecurityFilterChain' threw exception; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'authenticationManagerBuilder' defined in class path resource [org/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration.class]: Can only specify arguments for the getBean method when referring to a prototype bean definition 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.inte(SimpleInstantiationStrategy.java:189) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:591) 	... 38 common frames omitted Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'authenticationManagerBuilder' defined in class path resource [org/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration.class]: Can only specify arguments for the getBean method when referring to a prototype bean definition 	at org.springframework.beans.factory.support.AbstractBeanFactory.checkMergedBeanDefinition(AbstractBeanFactory.java:1277) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:281) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:203) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:326) 	at org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration$$EnhancerBySpringCGLIB$$43b454b9.authenticationManagerBuilder() 	at org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.getAuthenticationManager(AuthenticationConfiguration.java:73) 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.authenticationManager(WebSecurityConfigurerAdapter.java:236) 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.getHttp(WebSecurityConfigurerAdapter.java:178) 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.init(WebSecurityConfigurerAdapter.java:283) 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.init(WebSecurityConfigurerAdapter.java:68) 	at org.springframework.boot.actuate.autoconfigure.MntSecurityAutoConfiguration$ManagementWebSecurityConfigurerAdapter$$EnhancerBySpringCGLIB$$bd94b38c.init() 	at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.init(AbstractConfiguredSecurityBuilder.java:367) 	at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.doBuild(AbstractConfiguredSecurityBuilder.java:320) 	at org.springframework.security.config.annotation.AbstractSecurityBuilder.build(AbstractSecurityBuilder.java:39) 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration.springSecurityFilterChain(WebSecurityConfiguration.java:92) 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$$EnhancerBySpringCGLIB$$62f4cffd.CGLIB$springSecurityFilterChain$3() 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$$EnhancerBySpringCGLIB$$62f4cffd$$FastClassBySpringCGLIB$$be3873d6.invoke() 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:313) 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$$EnhancerBySpringCGLIB$$62f4cffd.springSecurityFilterChain() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:483) 	at org.springsource.loaded.ri.ReflectiveInterceptor.jlrMethodInvoke(ReflectiveInterceptor.java:1270) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) 	... 39 common frames omitted ```  ---  **Affects:** 4.1.3  **Issue Links:** - #17048 BeanMethodInterceptor doesn't forward user-provided arguments to getBean(name, args) - #18460 Regression: SPR-12443 breaks singleton bean references within a configuration class with null arguments  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/82651a07ab16f2dabf26bd4fdf92c8e1840643ec, https://github.com/spring-projects/spring-framework/commit/fa0ef2d87e80257f5838676313a373661192a90d","closed","type: bug,","spring-projects-issues","2014-11-30T06:57:12Z","2019-01-11T19:36:44Z"
"","17083","Extract ContentCachingRequestWrapper and ContentCachingResponseWrapper for custom use outside of Spring's filters [SPR-12477]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-12477](https://jira.spring.io/browse/SPR-12477?redirect=false)** and commented  Please move `AbstractRequestLoggingFilter.RequestCachingRequestWrapper` to it's own independent (public) class so it can be used outside `AbstractRequestLoggingFilter`.  ---  **Affects:** 4.1.2  **Issue Links:** - #16713 ShallowEtagHeaderFilter doesn't support Servlet 3.1 setContentLengthLong - #12919 ShallowEtagHeaderFilter should make use of specified content length  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/decc5cd1ae61284345d501a7aaaf77fe7e172e92","closed","type: enhancement,","spring-projects-issues","2014-11-27T03:30:36Z","2019-01-11T19:37:12Z"
"","17013","Enhance MockHttpServletRequestBuilder with contentType(String) method [SPR-12405]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-12405](https://jira.spring.io/browse/SPR-12405?redirect=false)** and commented  MockHttpServletRequestBuilder already contains a contentType method accepting a MediaType:  ``` public MockHttpServletRequestBuilder contentType(MediaType mediaType) {      Assert.notNull(mediaType, ""'contentType' must not be null"");      this.contentType = mediaType.toString();      this.headers.set(""Content-Type"", this.contentType);      return this; } ```  Please add a similar method which accepts a plain String.   ---  **Affects:** 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bba38b886221704c82810da7bd2c87ece9c38ef3","closed","type: enhancement,","spring-projects-issues","2014-11-01T05:16:48Z","2014-11-17T06:42:38Z"
"","17001","Provide a way to create a MockHttpServletRequestBuilder without knowing url/method upfront [SPR-12393]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-12393](https://jira.spring.io/browse/SPR-12393?redirect=false)** and commented  I have a use case where I want to create a `MockHttpServletRequestBuilder` without knowing the URI and HTTP method upfront; however, they will be known after I know other parts like headers, content type, body, etc.  Currently the only way to create a `MockHttpServletRequestBuilder` is via the static factory methods in `MockMvcRequestBuilders` (btw, the Javadoc in `MockHttpServletRequestBuilder` states incorrectly `MockMvcBuilders`). However then I always need the URI and HTTP method.  To give a little bit of detail I'm creating a Cucumber test framework where I want to implement something like in BDD style:  - _Given_ the content type is `""application/json""` - _And_ the request body is `""{ .. }""` - _When_ I perform a post on URL ""the url"" - _Then_ the response status code should be 200  Under the hood it uses `MockMvc` and therefore I need to construct the `MockHttpServletRequestBuilder`.  My alternative is to store all _Given_ parts and at the last stage create the `MockHttpServletRequestBuilder`, but doing so would almost create a duplicate of the `MockHttpServletRequestBuilder` itself.  I know this is a little bit of a longshot to request, but you never know :-)  ---  **Affects:** 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fc7e60678cf8e63037f4163c4d77013a2f088104","closed","type: enhancement,","spring-projects-issues","2014-10-29T13:01:18Z","2019-01-13T20:58:15Z"
"","16728","Consider adding static badRequest() builder method to ResponseEntity [SPR-12112]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-12112](https://jira.spring.io/browse/SPR-12112?redirect=false)** and commented  Just like adding notFound() via #16686, a badRequest() static method would be useful for ResponseEntity.  ok(), accepted(), created(), noContent(), notFound(), badRequest() are the most used responses I think.  ---  **Affects:** 4.1 RC2  **Issue Links:** - #16374 Provide builders for HttpEntity and ResponseEntity - #16686 Consider adding static notFound() builder method to ResponseEntity - #17120 Please add static unprocessableEntity() builder method to ResponseEntity  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/439ce4a1a5f89931194a34c9c2b8601df8b55d2c, https://github.com/spring-projects/spring-framework/commit/dbe337f932cedb606d0dea5b33c4ff2df4f8e8db","closed","type: enhancement,","spring-projects-issues","2014-08-21T09:49:26Z","2019-01-11T17:24:14Z"
"","16686","Consider adding static notFound() builder method to ResponseEntity [SPR-12070]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-12070](https://jira.spring.io/browse/SPR-12070?redirect=false)** and commented  Since 4.1 RC1 The RepsonseEntity is extended with convenient static builders for e.g. ok(), created(), accepted() and noContent().  Next to that there is also a status(int status) methid to easily create response for other status codes.  In many projects I see quite a 404 not found codes returned.  So adding a notFound() static method would be desirable to add.  ---  **Affects:** 4.1 RC1  **Issue Links:** - #16374 Provide builders for HttpEntity and ResponseEntity - #16728 Consider adding static badRequest() builder method to ResponseEntity - #17120 Please add static unprocessableEntity() builder method to ResponseEntity  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5862ddc869f76fb0a7050f85d55f66ed3efe3b95","closed","type: enhancement,","spring-projects-issues","2014-08-06T04:12:34Z","2019-01-11T18:17:52Z"
"","16871","Support JavaScript Templating [SPR-12266]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-12266](https://jira.spring.io/browse/SPR-12266?redirect=false)** and commented  These days platforms like react.js, webcomponents, angular.js and Node.js are pushing the boundaries of our conception of what a web client is to new levels.  In recent years, web clients have gotten more and more powerful and consequently pushed more functionality to that frontend.  Json has become the defacto standard for interacting with a backend such as provided by Spring.  With Node.js, javascript moved to the serverside offering some significant advantages in performance and the use of identical content templates for both frontend and serverside processing.  Micro templates have also become relevant. One challenge that we are dealing with is that our freemarker heavy backend is lifting a lot of processing weight that we also want to happen on the javascript frontend, requiring in essence: duplication of logic.  If you have a heavy investment in Spring with template languages such as freemarker and JSP, you will find that Spring is not keeping up with this revolution. It's still fully ""page oriented"". Sure, if we're just talking about json, `@ResponseBody` and all the supporting infrastructure help you process json excellently.  But when it comes to avoiding duplication in the combination of server-side template code and client side rendering, ie Node.js style processing, and basically: how Spring MVC fits into a heavy Javascript client world, you'll be hard put to find any documentation at all. It's either `@ResponseBody` or Freemarker/Velocity/JSP/etc.  Spring is not bridging the gap between the raw json response and serverside rendering of the template as Node.js is doing.  I think Spring should offer a strategy and guidance in this respect. IMHO this doesn't mean offering a prescribed technology stack, although an opinionated approach in this area would be a relevant ""add-on"". But I do think that offering both technology and documentation on server-side processing vs client-side processing, micro template languages (DUST, Handlebars, JSX, etc) would make a lot of sense in order to keep Spring relevant. It could even be documenting how to integrate Node.js with a Spring backoffice.  Spring has always excelled in making complex combinations of technologies easy to use. In this new arena of javascript heavy clients, there's a gap in this aspect. Let's face it, the View technologies part of the Spring documentation is hopelessly outdated and represents a view of the web that is rapidly disappearing.  ---  **Affects:** 4.1.5  **Issue Links:** - #18086 Server-side JavaScript improvements - #17626 ScriptTemplateView configuration option for JavaScript concurrency issues - #12248 Add JavaScript support for Spring dynamic languages  9 votes, 26 watchers","closed","type: enhancement,","spring-projects-issues","2014-09-26T13:42:23Z","2019-01-11T17:37:20Z"
"","16982","Update Documentation about @RequestMapping's defaults [SPR-12375]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-12375](https://jira.spring.io/browse/SPR-12375?redirect=false)** and commented  Through the **Spring Guides**  I can read many times the following  > Note: The above example does not specify GET vs. PUT, POST, and so forth, because `@RequestMapping` maps all HTTP operations by default. Use `@RequestMapping`(method=GET) to narrow this mapping.  That kind of message (_`@RequestMapping` maps all HTTP operations by default_) , **seems** is not available on Spring Reference Documentation. Same consideration about the `@RequestMapping` API/JavaDoc  ---  **Affects:** 4.0.7, 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3778780389e0435ffcf886b9e72c208a713376f","closed","type: enhancement,","spring-projects-issues","2014-10-24T11:37:50Z","2019-01-13T05:44:08Z"
"","16966","Add support for DELETE with body to RestTemplate through exchange method [SPR-12361]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-12361](https://jira.spring.io/browse/SPR-12361?redirect=false)** and commented  If I delete a resource through an **id** and with the **delete** method, it works fine  ```java restTemplate.delete(""http://localhost:8080/spring-utility/person/{id}/one"", id); ```  But **delete** method is void, _therefore_ I can't get reply and status from the server.  Just playing, through the **exchange** method together with HttpMethod.PUT, I can do the following:  ```java ResponseEntity response =  			restTemplate.exchange(""http://localhost:8080/spring-utility/person/{id}"",  							   	   HttpMethod.PUT,  							      new HttpEntity(person),  							         String.class,  							         person.getId()); ```  And works fine, until here two points 1. I can get a a reply and status from the server 2. I can send a request body  Thinking in the same idea, I have tried use the **exchange** method together with HttpMethod.DELETE  ```java ResponseEntity response = 		restTemplate.exchange(""http://localhost:8080/spring-utility/person/{id}/two"",  						HttpMethod.DELETE,  					        new HttpEntity(person),  					        String.class,  					        person.getId());	 ```  It with the intention to 1. get a a reply and status from the server 2. send a request body - better control against send an **id**  **Observe:** I want send an object to be deleted, not an id.  But always I get the following:  ``` DELETE request for ""http://localhost:8080/spring-utility/person/1/two"" resulted in 400 (Bad Request); invoking error handler Exception in thread ""main"" org.springframework.web.client.HttpClientErrorException: 400 Bad Request ```  I did a research:  * [Add support for DELETE with body to RestTemplate](#12524) it for Spring 3, I don't know if Spring 4 has other intentions. * [Spring RestTemplate calling the Delete method with a request body (Delete With Request Body)](http://knowledgebrowse.blogspot.com/2013/08/spring-resttemplate-calling-delete.html) he has created its own solution * [HttpMethod.Delete not working with RestTemplate of Spring-Android](http://stackoverflow.com/questions/18532240/httpmethod-delete-not-working-with-resttemplate-of-spring-android) he has direct access to the API  According with the links: Delete has no support for request body. Wondered why this behaviour Could be improved it the API?  ---  **Affects:** 4.0.7, 4.1.1  **Issue Links:** - #18637 RestTemplate doesnt support DELETE with RequestBody (_**""is duplicated by""**_) - #12524 Add support for DELETE with body to RestTemplate - #16896 Add support for DELETE with body to AsyncRestTemplate - #18665 AsyncRestTemplate should trigger no-output HTTP requests immediately as well  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2014-10-22T07:30:15Z","2019-01-14T05:14:29Z"
"","16952","Improve Reference documentation @PathVariable, @RequestHeader & @RequestParam using Map [SPR-12347]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-12347](https://jira.spring.io/browse/SPR-12347?redirect=false)** and commented  Summary: I have checked the [Spring Framework Reference Documentation](http://docs.spring.io/spring/docs/4.0.7.RELEASE/spring-framework-reference/htmlsingle/) and there is no an example about `@PathVariable` working together with **Map**  Perhaps same situation for `@RequestHeader`, `@RequestParam` too  ---  **Affects:** 4.0.7, 4.1.1  **Issue Links:** - #21475 `@PathVariable`'s javadoc wrongly states it supports MultiValueMaps - #16910 Allow `@PathVariable` to have default value on `@ModelAttribute` methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/df090235bb3b5693065b9e36e18150ee26c9d199","closed","type: enhancement,","spring-projects-issues","2014-10-19T17:08:29Z","2019-01-13T05:44:15Z"
"","16927","Let Spring Formatter be applied in a standalone or testing application [SPR-12322]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-12322](https://jira.spring.io/browse/SPR-12322?redirect=false)** and commented  In the link there is the complete details:  Summary: I am not sure if is possible, I need that when the .toString() method is called, Spring in some way can be able to apply the formatters for the Double BigDecimal and Date properties of the Entity. It for a standalone application and for testing.  Something like  ```java SpringConsole.print(""{}"", myObject.toString()); ```  The point is test the Formatters without web environment.   ---  **Affects:** 4.0.7  **Reference URL:** http://stackoverflow.com/questions/26247728/how-apply-a-spring-formattert-in-a-standalone-or-testing-application","closed","status: bulk-closed,","spring-projects-issues","2014-10-11T13:22:46Z","2019-01-12T00:18:47Z"
"","16910","Allow @PathVariable to have default value on @ModelAttribute methods [SPR-12305]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-12305](https://jira.spring.io/browse/SPR-12305?redirect=false)** and commented  The link shared above is going to be used to ask for many ""improvements""  Here the summary of my request: If `@RequestParam` has the option to set a default value, would be viable add the same feature to `@PathVariable`?  It to work together with `@ModelAttribute` methods, in the same way `@RequestParam` does.  The reason in the link, see ""Addition"" and ""Second Addition"" sections  I want avoid create many `@Controller`'s  ---  **Affects:** 4.0.7  **Reference URL:** http://stackoverflow.com/questions/25900993/spring-mvc-request-scope-trying-to-update-a-command-object-with-binder-setdisa  **Issue Links:** - #16952 Improve Reference documentation `@PathVariable`, `@RequestHeader` & `@RequestParam` using Map","closed","type: enhancement,","spring-projects-issues","2014-10-06T17:20:24Z","2019-01-14T05:14:43Z"
"","16909","Let Spring MVC work (through @SessionAttributes) in many/multiple tabs [SPR-12304]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-12304](https://jira.spring.io/browse/SPR-12304?redirect=false)** and commented  The link shared above is going to be used to ask for many ""improvements""  Here the summary of my request: With Spring 4 and 4.1 already available, could be improved Spring MVC to let `@SessionAttributes` works in peace in case if the ""friendly and wise"" user opens many tab pages in the same browser?  I know there is a serious problem about overriding data of the session.   ---  **Affects:** 4.0.7  **Reference URL:** http://stackoverflow.com/questions/25900993/spring-mvc-request-scope-trying-to-update-a-command-object-with-binder-setdisa","closed","status: bulk-closed,","spring-projects-issues","2014-10-06T17:16:54Z","2019-01-12T00:18:55Z"
"","16908","Let @ModelAttribute work according with one or many specific @RequestMapping [SPR-12303]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-12303](https://jira.spring.io/browse/SPR-12303?redirect=false)** and commented  The link shared above is going to be used to ask for many ""improvements""  Here the summary of my request: I want to know if is possible add a new annotation or perhaps a new attribute for `@ModelAttribute` to only be executed according of a specific `@RequestMapping`.  I could have many `@RequestMapping`'s (creation GET/POST, search GET/POST, edit or update GET/POST, reports GET, JSON GET/POST, etc).  Therefore for each potential call for any of these `@RequestMapping`'s, a possible unneccessary call to a `@ModelAttribute` is going to be happen  A `@Controller` could has 10 `@RequestMapping`'s and few `@ModelAttribute`'s (to create an object model and collections) and they should be executed according to only 1 or 2 `@RequestMapping`'s.  Therefore for the rest, the others 8 `@RequestMapping`, the `@ModelAttribute`'s are going to be executed unneccessarily.  I want avoid create many `@Controller`'s   ---  **Affects:** 4.0.7  **Reference URL:** http://stackoverflow.com/questions/25900993/spring-mvc-request-scope-trying-to-update-a-command-object-with-binder-setdisa","closed","type: enhancement,","spring-projects-issues","2014-10-06T16:57:54Z","2016-01-07T19:37:48Z"
"","16690","DefaultMessageListenerContainer include new methods to add item and set collection of MessageListenerAdapter/MessageListener types [SPR-12074]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-12074](https://jira.spring.io/browse/SPR-12074?redirect=false)** and commented  If in XML the  **jms:listener-container** component can wrap many **jms:listener** how a kind of collection, would be it reflected for the **DefaultMessageListenerContainer** class? It only has the **setMessageListener** method, where I am able to set two kings of objects  1) a class that implements the **MessageListener** interface 2) a **MessageListenerAdapter** class.  For JavaConfig, I want create just once a method that returns a **DefaultMessageListenerContainer** and do there all the configuration.  I think would be useful has a new method named  ``` setMessagesListeners(Set listeners) ```  or  ``` addMessageListener(MessageListener listener) ``` it to be added for a collection  Same consideration if I am working through the *MessageListenerAdapter* ```  setMessagesListeners(Set\ messagesListenersAdapters)  ``` or ```  addMessageListener(MessageListenerAdapter messageListenerAdapter)  ```it to be added for a collection  Thank You ```    ---  **Affects:** 4.0.6, 4.1 RC1  **Reference URL:** http://stackoverflow.com/questions/21881657/how-to-add-multiple-jms-messagelistners-in-a-single-messagelistenercontainer-for","closed","status: invalid,","spring-projects-issues","2014-08-09T07:03:54Z","2019-01-12T05:25:30Z"
"","16689","Improve Reference Documentation about Spring JMS (infrastructure) [SPR-12073]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-12073](https://jira.spring.io/browse/SPR-12073?redirect=false)** and commented  In my link there are other two links.  I am doing a complete migration about JMS configuration, it from XML to JavaConfig.  There is no a match or equivalent for the **destination-type** attribute from **jms:listener-container** for JavaConfig.  The reply and solution is on the URL, I think is wise share it for the community through the Reference documentation.   ---  **Affects:** 4.0.6, 4.1 RC1  **Reference URL:** http://stackoverflow.com/questions/25212488/what-is-the-equivalent-of-destination-type-from-jmslistener-container-in-javaco  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c0ea87010f223219dec9561ab1894fd7a05577ed","closed","type: enhancement,","spring-projects-issues","2014-08-09T06:23:50Z","2014-08-15T01:52:42Z"
"","16678","Add support of Callable for ThreadPoolTaskScheduler#schedule [SPR-12062]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-12062](https://jira.spring.io/browse/SPR-12062?redirect=false)** and commented  Hello, read the reference link for details.  Thank You.   ---  **Affects:** 4.0.6, 4.1 RC1  **Reference URL:** http://stackoverflow.com/questions/25097489/why-threadpooltaskscheduler-does-not-support-schedule-for-callable  2 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-08-04T05:32:49Z","2019-01-12T02:28:39Z"
"","16652","Providing cache access to all elements and individual elements in a given region [SPR-12036]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-12036](https://jira.spring.io/browse/SPR-12036?redirect=false)** and commented  I am asking for this new improvement by performance reason. I know it perhaps would generate conflicts with other ""keys"" about its content in the cache (something like dirty reads or phantom reads), but perhaps with some flag it would be controlled. My main concern is avoid call again the database due a simple insertion/update/delete of one item.  More details in the link provided. Since there is no a reply, I don't know if exists a solution, that's why I am creating this issue.  Let me know your thoughts.  Thank You.   ---  **Affects:** 4.0.5  **Reference URL:** http://stackoverflow.com/questions/24940976/how-update-remove-an-item-already-cached-within-a-collection-of-items","closed","in: core,","spring-projects-issues","2014-07-26T18:15:46Z","2019-01-12T05:25:33Z"
"","16559","Isolation support for JPA with Hibernate EntityManager 4 [SPR-11942]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-11942](https://jira.spring.io/browse/SPR-11942?redirect=false)** and commented  I am doing a research about Spring Framework and explicitly with `@Transactional`, it working together with JdbcTemplate, Hibernate, JPA, and finally with Spring Data - JPA. A project for each one of course.  I have a huge problem, the projects based with JPA and Spring Data JPA,  do not work in a 100% with `@Transanctional` through Isolations: the following error message appears:  ""Standard JPA does not support custom isolation levels - use a special JpaDialect for your JPA implementation""  I know it is a problem by itself of JPA. I did a research in Google and practically all have the same solution, create a customized class to around this problem.  I think Spring Framework should has available an own implementation functional and tested for the community. Isolations are very important.  If I am hired to do a migration from any Spring Project where it works with Jdbc/Hibernate, I am not able to migrate to Spring Data JPA. Because I am totally sure the services for complex use cases are working with Isolations, for example Serializable, for example for Kardex/Warehouse stock control and same consideration about cash, it closely related in the scenario for many users/threads (cashier) in a Mall.  Would be possible see Isolation support for Spring Framework: 4.1.x or 4.6.x?.  Thank You  ---  **Affects:** 4.0.5  **Issue Links:** - #8492 How to implement Pessimistic Locking with JPA - #9687 HibernateJpaDialect does not support setting a specific isolation level per transaction - #13599 readOnly transaction doesn't work with JPA and Hibernate 4 - #12974 Misleading exception message for using JPA with custom IsolationLevels - #17860 HibernateJpaDialect should warn about connection release mode other than ON_CLOSE (when upgrading from 4.0.x) - #16924 EclipseLinkJpaDialect does not support declarative transaction isolation - #16938 OpenJpaDialect does not support declarative transaction isolation  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2014-07-02T17:05:38Z","2019-01-14T05:15:57Z"
"","16497","Use @Scope at class-level to share a custom scope for mulitple @Bean methods [SPR-11878]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-11878](https://jira.spring.io/browse/SPR-11878?redirect=false)** and commented  I have a `@Configuration` class with many `@Bean` methods using the `@Scope`(""prototype""), if I remove all the `@Scope`(""prototype"") from the methods and use one `@Scope`(""prototype"") in the class level together with the `@Configuration`, it does not works. All the `@Beans` remains how singletons.  Even more, `@Scope` is ignored totally in the class level, because if I put an invalid value, i.e: `@Scope`(""proto typess""), in the runtime **none** exception is throw.    ---  **Affects:** 4.0.5","closed","type: enhancement,","spring-projects-issues","2014-06-14T11:24:27Z","2015-05-18T08:14:28Z"
"","16492","Create the own Spring lifecycle annotations [SPR-11873]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-11873](https://jira.spring.io/browse/SPR-11873?redirect=false)** and commented  Taking the idea about to only use the Spring Framework API, why not create the own Spring lifecycle annotations to do not use any more the JSR-250 annotations (`@PostConstruct` and `@PreDestroy`), furthermore offering more flexibility about the methods signature for the methods annotated.   ---  **Affects:** 4.0.5","closed","status: bulk-closed,","spring-projects-issues","2014-06-12T06:58:45Z","2019-01-12T02:29:47Z"
"","16774","spring-context-4.0.xsd application unable to read [SPR-12160]","**[Manish](https://jira.spring.io/secure/ViewProfile.jspa?name=manishdwivedi81)** opened **[SPR-12160](https://jira.spring.io/browse/SPR-12160?redirect=false)** and commented  \  nested exception is org.xml.sax.SAXParseException: cvc-elt.1: Cannot find the declaration of element 'beans'.   ---  **Affects:** 4.0 GA  **Reference URL:** http://www.springframework.org/schema/context/spring-context-4.0.xsd","closed","status: bulk-closed,","spring-projects-issues","2014-09-05T14:45:47Z","2019-01-12T00:19:10Z"
"","16526","override by id in mvc:interceptors does not work [SPR-11907]","**[Maciej Lizewski](https://jira.spring.io/secure/ViewProfile.jspa?name=redguy)** opened **[SPR-11907](https://jira.spring.io/browse/SPR-11907?redirect=false)** and commented  when I include several context files each having:  \ \ \  I would expect that the latter one will override provious (based on same ID attribute) as it is with plain beans. Instead I have multiple interceptors.  I think there should be also ""id"" attribute in  for similar behavior when dealing with url-mapped interceptors.  It would be useful in plugin-architecture to define default interceptor configuration in plugged jar and have possibility to override it on application level (main context)   ---  1 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2014-06-24T10:36:07Z","2019-01-12T16:34:49Z"
"","16681","includeFilters and excludeFilters of @ComponentScan cause failures when used in meta-annotations [SPR-12065]","**[Maciej Drozdzowski](https://jira.spring.io/secure/ViewProfile.jspa?name=the4yeast)** opened **[SPR-12065](https://jira.spring.io/browse/SPR-12065?redirect=false)** and commented  If `@ComponentScan` is used as a meta annotation and filters are attributes that can be overriden via the target annotation, the following happens:  ``` java.lang.IllegalArgumentException: Attribute 'excludeFilters' is of type [Filter[]], but [AnnotationAttributes[]] was expected. Cause:  	at org.springframework.core.annotation.AnnotationAttributes.doGet(AnnotationAttributes.java:117) 	at org.springframework.core.annotation.AnnotationAttributes.getAnnotationArray(AnnotationAttributes.java:101) 	at org.springframework.context.annotation.ComponentScanAnnotationParser.parse(ComponentScanAnnotationParser.java:103) 	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:249) 	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:218) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:185) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:155) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:305) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:243) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:609) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:403) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:106) 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4210) 	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4709) 	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1057) 	at org.apache.catalina.core.StandardHost.start(StandardHost.java:822) 	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1057) 	at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:463) 	at org.apache.catalina.core.StandardService.start(StandardService.java:525) 	at org.apache.catalina.core.StandardServer.start(StandardServer.java:754) 	at org.apache.catalina.startup.Catalina.start(Catalina.java:595) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:606) 	at org.springsource.loaded.ri.ReflectiveInterceptor.jlrMethodInvoke(ReflectiveInterceptor.java:1270) 	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289) 	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414) ```  When the filters are uses like so, in the meta-annotation, it works well:  ```java @ComponentScan(     excludeFilters = {         @ComponentScan.Filter(type = FilterType.ANNOTATION, value = TestConfiguration.class)     } ) @Import(PostProcessors.class) @EnableWebMvc @Configuration @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) public @interface WebContextConfiguration { } ```  This however, breaks:  ```java @ComponentScan @Import(PostProcessors.class) @EnableWebMvc @Configuration @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) public @interface WebContextConfiguration {      Filter[] excludeFilters() default {};  }  @WebContextConfiguration(     excludeFilters = {         @ComponentScan.Filter(type = FilterType.ANNOTATION, value = TestConfiguration.class)     } ) public class Config {} ```    ---  **Affects:** 4.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d61353db513c7b1ea367b3ff4c429042566f1003, https://github.com/spring-projects/spring-framework/commit/ef51d4dbdbc9f0c9ad39cda9d9ea7440cad4f7c9","closed","in: core,","spring-projects-issues","2014-08-04T22:27:40Z","2014-08-15T01:52:41Z"
"","17143","Plus sign '+' is not correctly handled in path element of URLs [SPR-12539]","**[Lukasz Wozniak](https://jira.spring.io/secure/ViewProfile.jspa?name=woznial)** opened **[SPR-12539](https://jira.spring.io/browse/SPR-12539?redirect=false)** and commented  When using '\+' sign which is a valid character in path element of URL's and only in query element '+' should be escaped to %2B. Attached concept boot project. Check main.html for examples which work or not   ---  **Affects:** 4.1.3  **Attachments:** - [demo.zip](https://jira.spring.io/secure/attachment/22420/demo.zip) (_4.58 kB_)","closed","status: declined,","spring-projects-issues","2014-12-11T12:20:38Z","2019-01-12T16:34:30Z"
"","17072","No sound in YouTube video ""Developer Tooling - What’s New and What’s Next"" [SPR-12466]","**[Luciano Deriu](https://jira.spring.io/secure/ViewProfile.jspa?name=luciano.deriu)** opened **[SPR-12466](https://jira.spring.io/browse/SPR-12466?redirect=false)** and commented  This is probably the wrong place to put this issue but i couldn't find anywhere else suitable. So apologies in advance.  This recent YouTube video doesn't have any sound....  Developer Tooling - What’s New and What’s Next: http://youtu.be/jbdK1i1LnKk   ---  **Reference URL:** http://youtu.be/jbdK1i1LnKk","closed","status: invalid,","spring-projects-issues","2014-11-24T13:00:24Z","2019-01-12T05:25:02Z"
"","17061","Star character interpreted as bold expression in generated documentation [SPR-12456]","**[Luciano Deriu](https://jira.spring.io/secure/ViewProfile.jspa?name=luciano.deriu)** opened **[SPR-12456](https://jira.spring.io/browse/SPR-12456?redirect=false)** and commented  There are a few pointcut expressions that aren't valid on the Spring AOP documentation. In the examples section there are these 2 expressions (see ref URL)...  ``` execution(* com.xyz.service..(..)) execution(* com.xyz.service...(..)) ```  I'm just learning Spring AOP so i may be wrong but i think they should be...  ``` execution(* com.xyz.service.*(..)) execution(* com.xyz.service.*.*(..)) ```  Also present in this section... http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/aop.html#aop-advice-before   ---  **Affects:** 4.0.8, 4.1.2  **Reference URL:** http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/aop.html#aop-pointcuts-examples  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0d00b674f4b2b7b6c7abd49b38c484c14d06bc94, https://github.com/spring-projects/spring-framework/commit/a5e2afc980b745343630c83879e222318ca3d479  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)","closed","type: documentation,","spring-projects-issues","2014-11-20T14:11:42Z","2014-12-09T02:49:30Z"
"","17015","task:executor keep-alive not explained in documentation [SPR-12407]","**[Lubos Krnac](https://jira.spring.io/secure/ViewProfile.jspa?name=lkrnac)** opened **[SPR-12407](https://jira.spring.io/browse/SPR-12407?redirect=false)** and commented  In section http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-task-namespace-executor  there is this sentence: ""In a moment, we will review the effects of the keep-alive setting which adds yet another factor to consider when providing a pool size configuration. But first...""  But promised explanation is missing.   ---  **Affects:** 4.0.7, 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/260b451d5fe6c49c806bd246b0fdeba832197c24, https://github.com/spring-projects/spring-framework/commit/6534d0035db3c64eedbc35ee47e8f3aaf522791b  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","type: documentation,","spring-projects-issues","2014-11-02T03:42:25Z","2014-11-10T23:12:26Z"
"","16997","TimerTaskExecutor wasn't removed from documentation [SPR-12389]","**[Lubos Krnac](https://jira.spring.io/secure/ViewProfile.jspa?name=lkrnac)** opened **[SPR-12389](https://jira.spring.io/browse/SPR-12389?redirect=false)** and commented  TimerTaskExecutor was deprecated in Spring 3 (http://docs.spring.io/spring/docs/3.2.11.RELEASE/javadoc-api/org/springframework/scheduling/timer/TimerTaskExecutor.html) and removed from Spring4.  But documentation still contains it: http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#scheduling-task-executor-types   ---  **Affects:** 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/329ba2a913f25f429a904aeab5d2e844e9b41fb5, https://github.com/spring-projects/spring-framework/commit/ffc4e032934334686a52258c376b0a11092320c1  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","type: documentation,","spring-projects-issues","2014-10-29T00:14:11Z","2014-11-10T23:12:26Z"
"","17108","Registering two beans at the same time throws ConcurrentModificationException [SPR-12503]","**[Lovro Mažgon](https://jira.spring.io/secure/ViewProfile.jspa?name=lmazgon)** opened **[SPR-12503](https://jira.spring.io/browse/SPR-12503?redirect=false)** and commented  If two threads call the method DefaultListableBeanFactory#registerBeanDefinition at the same time, chances are that a ConcurrentModificationException will occur (for details see the StackOverflow answer). The problem is the List beanDefinitionNames, which is not thread-safe.  The bug was found in the version 3.2.2 but the same code persists until the latest version 4.1.2.  ---  **Affects:** 3.2.2, 4.1.2  **Reference URL:** http://stackoverflow.com/questions/27280529/spring-registerbeandefinition-throws-java-util-concurrentmodificationexception/27280864#27280864  **Issue Links:** - #18071 ConcurrentModificationException when executing AutowireCapableBeanFactory.createBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/097bcfb997bd215c7b39635770e34812744f0d9e","closed","in: core,","spring-projects-issues","2014-12-03T15:14:33Z","2019-01-11T18:32:18Z"
"","16384","Cache level CACHE_NONE does not recover properly on JMSException [SPR-11762]","**[liangwenbo](https://jira.spring.io/secure/ViewProfile.jspa?name=liangwb2001)** opened **[SPR-11762](https://jira.spring.io/browse/SPR-11762?redirect=false)** and commented  Hi： I use spring-jms consume activemq5.9 queue, and it stop consuming when messages class cannot found in consumer's classloader, and when messages in two queues cannot found class both, which is easier to reproduce. Here's my configure:  \ \ \           	     	                           ---  **Affects:** 3.1.1  **Reference URL:** http://forum.spring.io/forum/other-spring-related/remoting/49984-jms-defaultmessagelistenercontainer-recovery-fails  **Attachments:** - [ClassNotFoundTest.java](https://jira.spring.io/secure/attachment/21994/ClassNotFoundTest.java) (_932 bytes_) - [sprint-jms.xml](https://jira.spring.io/secure/attachment/21995/sprint-jms.xml) (_1.30 kB_)  **Issue Links:** - #16400 MessageListenerAdapter might throw JMSException on message deserialization","open","type: enhancement,","spring-projects-issues","2014-05-05T20:39:27Z","2019-01-11T21:16:30Z"
"","16724","FormHttpMessageConverter writes ASCII encoded so that a multipart form data can not contain filenames with German Umlaute [SPR-12108]","**[Leif Hanack](https://jira.spring.io/secure/ViewProfile.jspa?name=strug)** opened **[SPR-12108](https://jira.spring.io/browse/SPR-12108?redirect=false)** and commented  Hi there,  we encountered a problem using FormHttpMessageConverter when writing a multi part. Our use case is to create a multi part on the server side and send it to another service. The multi part contains a FileSystemResource and has a filename with German Umlaute (e.g. ""Hallöle.png"").  Unfortunately FormHttpMessageConverter.write uses getAsciiBytes. This seems to be W3C compliant.  > Control names originally encoded in non-ASCII character sets may be encoded using the method outlined in [RFC2045]. (http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1)  We tried a couple of things even javax.mail.internet.MimeUtility.decode, but nothing worked for us.  We were only able to get it fixed when changing name.getBytes(""US-ASCII"") to name.getBytes(""UTF-8"")  What would you recommend? How to deal with NON-ASCII characters?  Thanks a lot, Leif  ---  **Affects:** 4.0.6  **Issue Links:** - #19959 Possibility to configure encoding other than ascii in FormHttpMessageConverter.MultipartHttpOutputMessage - #19072 Allow configuring the message converter in HttpPutFormContentFilter - #19769 StandardMultipartHttpServletRequest cannot decode multipart Content-Disposition header encoded by FormHttpMessageConverter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7f43f02a13ff394b09108b2aaebf3fe087e9d6db, https://github.com/spring-projects/spring-framework/commit/9be0cf21e5d3537d2415fea5eaea152e7407d45b","closed","type: enhancement,","spring-projects-issues","2014-08-21T05:47:11Z","2019-01-11T17:23:54Z"
"","16587","Add ability to check specific error on field within Spring MVC test framework [SPR-11971]","**[Lea Farmer](https://jira.spring.io/secure/ViewProfile.jspa?name=lfarmer)** opened **[SPR-11971](https://jira.spring.io/browse/SPR-11971?redirect=false)** and commented  It would be useful to have the ability to check that if a field has an error on it, then what that specific error is.  Currently ModelResultMatchers only has methods to assert whether an attribute has field errors.  I propose adding a new method  attributeHasFieldError(final String name, final String field, final String error)  This would allow users to assert when a specific error text/key is present.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/85cdb9196e0b2e1cbd7454f7cde912e28a69f1e3","closed","type: enhancement,","spring-projects-issues","2014-07-07T12:35:47Z","2018-12-08T13:08:19Z"
"","16549","DefaultSubscriptionRegistry does not update destination cache when subscribed twice to same destination [SPR-11931]","**[le roy arnaud](https://jira.spring.io/secure/ViewProfile.jspa?name=sdnetwork@gmail.com)** opened **[SPR-11931](https://jira.spring.io/browse/SPR-11931?redirect=false)** and commented  If you subscribe to the same destination twice on the same connection/session, and then you unscribe one of them the both remains.  after some search the problem could be into the cache mechanism. probably at this point :  DefaultSubscriptionRegistry::removeSubscriptionInternal .... if (info.getSubscriptions(destination) == null) ...  ---  **Affects:** 4.0.5  **Issue Links:** - #16548 Improve logic for removing subscriptions from DefaultSubscriptionRegistry  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/083d415fc4d54ce19f7939b3d837f1f1eda5732a, https://github.com/spring-projects/spring-framework/commit/5092414842f8ee5e1ea240b576795502d44ba5fb","closed","type: bug,","spring-projects-issues","2014-06-30T13:13:28Z","2019-01-11T22:20:04Z"
"","17008","Re-introduce previous SpringSessionSynchronization(SessionHolder, SessionFactory) constructor signature [SPR-12400]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-12400](https://jira.spring.io/browse/SPR-12400?redirect=false)** and commented  Grails GORM depends on this constructor  ``` public SpringSessionSynchronization(SessionHolder sessionHolder, SessionFactory sessionFactory) ```  this constructor was removed by commit https://github.com/spring-projects/spring-framework/commit/5cbb1fc  more information https://github.com/grails/grails-data-mapping/pull/46   ---  **Affects:** 4.1 GA, 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7aff57548535cd428f17acb583d24ce455f62f2d","closed","type: task,","spring-projects-issues","2014-10-30T08:24:57Z","2014-11-17T06:42:37Z"
"","16761","Add generics / parameterized type support to ListableBeanFactory getBeanNamesForType/getBeansOfType methods [SPR-12147]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-12147](https://jira.spring.io/browse/SPR-12147?redirect=false)** and commented  Spring currently doesn't have a public API for finding beans based on generics type information. Generic types seem to only be supported in autowiring fields or methods ([Spring blog article](http://spring.io/blog/2013/12/03/spring-framework-4-0-and-java-generics)).  There is a discussion about this feature [in the issue comments of SPR-9965](https://jira.spring.io/browse/SPR-9965?focusedCommentId=102789&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-102789) .  I'd like to have generics support in ListableBeanFactory:  ``` String[] getBeanNamesForType(ResolvableType resolvableType);  Map getBeansOfType(Class type, ResolvableType resolvableType) throws BeansException;  Map getBeansOfType(Class type, ResolvableType resolvableType, boolean includeNonSingletons, boolean allowEagerInit) throws BeansException; ```  ---  **Affects:** 4.0.6, 4.1 RC2  **Issue Links:** - #14599 Autowiring of generic types - #17723 Support dynamic bean lookup a la CDI's Instance type - #21613 Programmatic ObjectProvider retrieval through BeanFactory API - #18669 getBeanNamesForType(ResolvableType) does not reliably work for beans with AOP proxies - #19578 getBeanNamesForType(ResolvableType) doesn't match generic factory method return type for yet-to-be-created bean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b2308926bc2135476cdb319b5dbaee169b18ed02, https://github.com/spring-projects/spring-framework/commit/778a01943b14d5b6ecf55adc3aa8ddc92250c3fe  0 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2014-09-03T06:04:17Z","2019-01-11T17:22:08Z"
"","16486","Revisit class cache in CachedIntrospectionResults [SPR-11867]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-11867](https://jira.spring.io/browse/SPR-11867?redirect=false)** and commented  I'm doing performance tuning with Grails 2.4.1.BUILD-SNAPSHOT which uses Spring 4.0.5 .  The main principle for performance tuning in Grails is to minimize all blocking. I rely on the profiler information about what's causing the most blocking.  After eliminating the blocking problem in AbstractApplicationContext.assert (reported as #16482 , [comments in SPR-10307](https://jira.spring.io/browse/SPR-10307?focusedCommentId=104116&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-104116)) by simply overriding assertBeanFactoryActive with a no-op method in a subclass of GenericApplicationContext, the top-most blocker is now [org.springframework.beans.CachedIntrospectionResults.forClass(Class) method](https://github.com/spring-projects/spring-framework/blob/6634c19/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java#L172-L204).  ---  **Affects:** 3.2.9, 4.0.5  **Issue Links:** - #14662 Simplify CachedIntrospectionResults caching arrangements - #13653 Improve the performance of BeanInfo lookups in CachedIntrospectionResults - #16482 Provide lock free access to BeanFactory methods by calling BF methods on the AbstractApplicationContext instance directly - #16718 Use putIfAbsent in CachedIntrospectionResults.addTypeDescriptor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f27b9498be344ab57c169d6bcdf72ec159429aad, https://github.com/spring-projects/spring-framework/commit/8307447235fd39448a290b824b7b9857771804bf, https://github.com/spring-projects/spring-framework/commit/fab67b0595bfaddd6692de830c7b54aea782d7b5  **Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-06-11T00:01:29Z","2019-01-11T22:16:10Z"
"","16483","Optimize performance of autowiring for Groovy/Grails [SPR-11864]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-11864](https://jira.spring.io/browse/SPR-11864?redirect=false)** and commented  In Grails there is a custom solution to optimize autowiring by name. Grails autowires all objects that are retrieved from Hibernate (GORM) . That's why the performance of autowiring is really critical for Grails.  This is the BeanFactory implementation Grails uses: https://github.com/grails/grails-core/blob/master/grails-core/src/main/groovy/org/grails/spring/beans/factory/OptimizedAutowireCapableBeanFactory.java (or [rev 6d3604a](https://github.com/grails/grails-core/blob/6d3604a84a7f0711ebfc1f48432d34d50cddb08c/grails-core/src/main/groovy/org/grails/spring/beans/factory/OptimizedAutowireCapableBeanFactory.java) if that link is broken)  It would be nice to have some caching like this directly in Spring. Some usecases (I was perf. testing with) were 300% faster with this change at the time I added that optimization, so it's quite important for Grails applications. There are some drawbacks in the solution used in Grails. The use of the optimizations can be skipped for a single class by making the class implement the Aware marker interface.  I wouldn't recommend to use a similar implementation directly in Spring, but I'd like to see autowiring by name optimized for performance directly in Spring.  ---  **Affects:** 4.0.5  **Issue Links:** - #17677 Autowiring with `@Autowired`/`@Inject` get much slower than with `@Resource` as the number of classes increases - #16494 Performance regression for custom autowireBean calls with many properties  2 votes, 6 watchers","open","type: enhancement,","spring-projects-issues","2014-06-10T06:19:08Z","2019-01-13T06:53:37Z"
"","16482","Provide lock free access to BeanFactory methods by calling BF methods on the AbstractApplicationContext instance directly [SPR-11863]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-11863](https://jira.spring.io/browse/SPR-11863?redirect=false)** and commented  Profiling Grails 2.4.x applications shows a lot of blocking in [org.springframework.context.support.AbstractApplicationContext.assertBeanFactoryActive](https://github.com/spring-projects/spring-framework/blob/54571bf/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java#L952-L963)  There's a discussion about this in [SPR-10307 comments](https://jira.spring.io/browse/SPR-10307?focusedCommentId=104156&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-104156).  Juergen suggested to call BeanFactory methods on the BeanFactory instance returned from ConfigurableApplicationContext.getBeanFactory instead of calling the BeanFactory methods available on the AbstractApplicationContext instance. Another way to get hold of the ""internal"" BeanFactory instead of the ApplicationContext facade is to use BeanFactoryAware for injecting the BeanFactory instance and calling methods on that instance.  However I'd like to be able to use BeanFactory methods directly on the ApplicationContext instance instead without any performance overhead (synchronization).  ---  **Affects:** 4.0.5  **Issue Links:** - #16486 Revisit class cache in CachedIntrospectionResults  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fac2d80054c1887a7e76af54b553b3c0f98207f9","closed","type: enhancement,","spring-projects-issues","2014-06-10T05:47:01Z","2019-01-11T22:17:46Z"
"","16358","Cacheable javadoc wrongly explains how cache keys are generated [SPR-11736]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-11736](https://jira.spring.io/browse/SPR-11736?redirect=false)** and commented  In [Cacheable](https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/cache/annotation/Cacheable.java#L29-L30)'s [javadoc](http://docs.spring.io/spring/docs/4.0.x/javadoc-api/org/springframework/cache/annotation/Cacheable.html) , it says:  > Annotation indicating that a method (or all the methods on a class) can be cached. > The method arguments and signature are used for computing the key while the returned instance is used as the cache value.  Method signature is ignored in [SimpleKeyGenerator](https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKeyGenerator.java#L41-L52) .  Perhaps the target instance's identityHashCode should be part of the key besides the method signature in SimpleKeyGenerator by default.  I'll send a PR which now contains the broken unit test for this problem.  ---  **Affects:** 4.0.3  **Issue Links:** - #13573 Caching Abstraction ignores method name?  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/90081f787f2f24e6ab73baa81c9b11510d87c799","closed","type: enhancement,","spring-projects-issues","2014-04-25T05:58:06Z","2019-01-11T21:17:45Z"
"","17132","CacheAspectSupport 's generateKey method should not concatenate Strings [SPR-12527]","**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[SPR-12527](https://jira.spring.io/browse/SPR-12527?redirect=false)** and commented  **CacheAspectSupport** class has the following line of code at the beginning of its **generateKey** method:  ``` Assert.notNull(key, ""Null key returned for cache operation (maybe you are using named params "" + 				""on classes without debug info?) "" + context.operation); ```  YourKit shows that this single method call takes about 15% of total time when invoking a ""cached"" method through Spring caching pipeline. It is not surprising because **context.operation** object has a non-trivial implementation of the **toString** method.  We really think that this _Assert.notNull_ call should be refactored into _if(key == null)..._ for performance reasons.   ---  **Affects:** 4.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/67f184293b94c076b0474231f739a74f42d5ffa8  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2014-12-09T09:20:13Z","2014-12-30T05:21:48Z"
"","16873","@PropertySource orders sources incorrectly when the number of sources is > 2 [SPR-12268]","**[kyle leonhard](https://jira.spring.io/secure/ViewProfile.jspa?name=kyle-leonhard)** opened **[SPR-12268](https://jira.spring.io/browse/SPR-12268?redirect=false)** and commented  It looks to me like the `@PropertySource` annotations with multiple values are added in an incorrect order by ConfigurationClassParser.addPropertySource  The docs say: ""A note on property overriding with `@PropertySource` In cases where a given property key exists in more than one .properties file, the last `@PropertySource` annotation processed will 'win' and override. For example, given two properties files a.properties and b.properties, consider the following two configuration classes that reference them with `@PropertySource` annotations ""  ""Each location will be added to the enclosing {`@code` Environment} as its property source, and in the order declared.""  ConfigurationClassParser adds new propertySources with: String firstProcessed = this.propertySourceNames.iterator().next(); propertySources.addBefore(firstProcessed, propertySource);  With 2 property sources that works fine -`@PropertySource`({""A"", ""B""}) - Ends up in the underlying mutableProperties list as [B, A]  When there are greater than 2 values the addBefore call leads to a strange behavior.  The last value will always be last, but other values will be ordered first to last. -`@PropertySource`({""A"", ""B"", ""C""}) - First add - [A] - Second add - [B, A] - Third add - [B, C, A]  This looks fishy to me and leads to non-intuitive resolution order.  I don't see a way to get my desired resolution order [C, B, A].  Any thoughts on the resolution order here?  I was thinking of trying `@PropertySources`, but those are ordered in the same way by the same class/method.  In 4.0 it looks like sources were simply added: this.propertySources.add(name, new ResourcePropertySource(name, resource));  ---  **Affects:** 4.1 GA  **Issue Links:** - #16812 Unexpected override order for `@Configuration` based property sources (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2014-09-27T23:43:12Z","2019-01-13T05:44:37Z"
"","16872","Spring 4.1 with WebMvcConfigurationSupport enabled does not register a default view resolver [SPR-12267]","**[kyle leonhard](https://jira.spring.io/secure/ViewProfile.jspa?name=kyle-leonhard)** opened **[SPR-12267](https://jira.spring.io/browse/SPR-12267?redirect=false)** and commented  After upgrading to 4.1.0 I noticed that jsp views were no longer resolving.   The app wasn't explicitly creating any view resolvers so I assumed some default resolvers had changed.  I went a digging a bit and found the below.  The DispatcherServlet registers, if no viewResolvers have been registered, default view resolvers in initViewResolvers.  This causes leads to an InternalResourceViewResolver being registered.  Before upgrading to 4.1 this is the resolver that was resolving my app's views.  First, the app is using `@EnableWebMvc`.  In 4.1 WebMvcConfigurationSupport added the mvcViewResolver method which registers a composite view resolver.  In my case the viewResolverRegistry contains no viewResolvers so the composite resolver has nothing to delegate to.  The registered composite view resolver causes the initViewResolvers method in DispatcherServlet to skip registration of the default view resolvers.  My app ends up with no useful viewResolvers registered (just the composite with no delegates).  The issue is easy to work around (register a viewResolver), but it seems non-intuitive that enabling WebMvc support would cause this.  Let me know if there are any more details I can provide or if there are suggestions on how to better configure things.  ---  **Affects:** 4.1 GA  **Issue Links:** - #16629 ThymeleafViewResolver not used by Spring 4.1 resulting in ""circular view path"" error  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/803fc2001907636605aa3ed2fcdf1437171761a5, https://github.com/spring-projects/spring-framework/commit/49cf30e964f1dc1e80e5e78833e55ac5f5a33f0e","closed","type: bug,","spring-projects-issues","2014-09-27T14:29:49Z","2019-01-11T17:37:34Z"
"","17031","DIfferent CurrentSessionContext within a Transaction  [SPR-12424]","**[Kshitij Patel](https://jira.spring.io/secure/ViewProfile.jspa?name=kshitij.patel@emc.com)** opened **[SPR-12424](https://jira.spring.io/browse/SPR-12424?redirect=false)** and commented  I have `@Transactional`(readOnly = false, rollbackFor = Exception.class) annotation at the ServiceImpl class level defined. ServiceImpl method calls on several DaoImpl update methods where sessionFactory.getCurrentSession() is used and it's working fine. It works fine but after few days, getCurrentSession() starts returning different sessions within a single Transaction. See attached session detail from two different DaoImpl layer within a transaction. As I said, it does not happen all the time but number of users have seen this issue and it happens after few days of running the server. Restarting the server resolves the issue.  Spring Framework 3.2.2 Hibernate 4.1.4    ---  **Affects:** 3.2.2  **Attachments:** - [SessionContext.docx](https://jira.spring.io/secure/attachment/22364/SessionContext.docx) (_77.53 kB_)","closed","in: core,","spring-projects-issues","2014-11-12T11:23:33Z","2019-01-12T05:25:07Z"
"","17147","Spring configuration file has problems with properties file. [SPR-12544]","**[Krzysiek](https://jira.spring.io/secure/ViewProfile.jspa?name=krzysiek1)** opened **[SPR-12544](https://jira.spring.io/browse/SPR-12544?redirect=false)** and commented  I've got a very weird bug, everything works through referencing db file with ${} except the jdbc.password one. If i type it by hand it goes through but when I do ${jdbc.password} I get ""Cannot create PoolableConnectionFactory (Access denied for user 'root'@'localhost' (using password: YES))"" even though everything seems to be the same. I do not have this problem with 4.0.5 spring version.  db.properties File  jdbc.password=root jdbc.username=root jdbc.driver=com.mysql.jdbc.Driver jdbc.url=jdbc:mysql://localhost:3306/springW  beans.xml file datasource  \      	     	     	     	         ---  **Affects:** 4.1.3  **Attachments:** - [springproblem.tar.gz](https://jira.spring.io/secure/attachment/22429/springproblem.tar.gz) (_15.14 kB_) - [sprproblem.zip](https://jira.spring.io/secure/attachment/22430/sprproblem.zip) (_39.92 kB_)","closed","in: core,","spring-projects-issues","2014-12-14T12:54:17Z","2019-01-12T05:24:55Z"
"","17110","WebAsyncManager : cant configure the default  taskExecutor [SPR-12505]","**[kristof.larcher](https://jira.spring.io/secure/ViewProfile.jspa?name=kristof.larcher)** opened **[SPR-12505](https://jira.spring.io/browse/SPR-12505?redirect=false)** and commented      Hi,  I wanted to  test the possibility of making  the methods of our RESTcontrollers asynchronous using Callable return, the annotation `@Async`... It's working fine...but,  when I return a Callable in methods of my RESTS controllers, the WebAsyncManager use the default SimpleTaskExecutor and not the ThreadPoolTaskExecutor I configured in my Async Configuration : so my question is : how can I make properly my async configuration so that when I return a Callable,  a thread  from my threadPoolExecutor  is used.  PS: when I use the `@Async` annotation : I have not this problem.    ---  **Affects:** 4.1.2","closed","status: invalid,","spring-projects-issues","2014-12-04T01:55:00Z","2019-01-12T05:25:00Z"
"","15984","@ExceptionHandler doesn't work as API document. [SPR-11933]","**[KOOK, JU YEONG](https://jira.spring.io/secure/ViewProfile.jspa?name=milgarubanjuk)** opened **[SPR-11933](https://jira.spring.io/browse/SPR-11933?redirect=false)** and commented  I looked at the issue#15732 and got the same result. People generally use `@ExceptionHandler` for handling specific exception case not Error. What about changing the exception list type on API(of all version)?  ---  **Affects:** 4.1 RC2  **Reference URL:** #15732  **Issue Links:** - #16550 `@ExceptionHandler` doesn't work as API document. (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2014-07-01T02:10:51Z","2019-01-14T05:17:42Z"
"","16550","@ExceptionHandler doesn't work as API document. [SPR-11932]","**[KOOK, JU YEONG](https://jira.spring.io/secure/ViewProfile.jspa?name=milgarubanjuk)** opened **[SPR-11932](https://jira.spring.io/browse/SPR-11932?redirect=false)** and commented  I looked at the issue #15732 and got the same result. People generally use `@ExceptionHandler` for handling specific exception case not Error. What about changing the exception list type on API(of all version)?  ---  **Reference URL:** #15732  **Issue Links:** - #15984 `@ExceptionHandler` doesn't work as API document. (_**""is duplicated by""**_)","closed","status: bulk-closed,","spring-projects-issues","2014-07-01T02:10:37Z","2019-01-14T05:15:59Z"
"","16951","SqlTypes not propagated to database [SPR-12346]","**[Koen Serry](https://jira.spring.io/secure/ViewProfile.jspa?name=koen_serry)** opened **[SPR-12346](https://jira.spring.io/browse/SPR-12346?redirect=false)** and commented  Sql types don't seem to propagate. I used a postgres backend (jdbc driver 9.3-1102-jdbc41) on a 9.3 backend. The table uses the inet type to store ip addresses.  This works in 4.0.6 while it doesn't seem to work in 4.1  ``` MapSqlParameterSource paramSource = new MapSqlParameterSource().addValue(""ip"",e.getIp(),Types.OTHER,""inet""); jdbcTemplate.update(""insert into addresses (ip) values (:ip)"",paramSource); ```  ---  **Affects:** 4.1.1  **Issue Links:** - #17488 Regression in handling of String passed as Types.OTHER to JdbcTemplate (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2014-10-18T06:50:58Z","2019-01-12T16:57:00Z"
"","16837","Possible dead code in AbstractSockJsService [SPR-12222]","**[knockout user](https://jira.spring.io/secure/ViewProfile.jspa?name=knockoutuser)** opened **[SPR-12222](https://jira.spring.io/browse/SPR-12222?redirect=false)** and commented  Is this code needed in AbstractSockJsService?  ``` try {     request.getHeaders(); } catch (InvalidMediaTypeException ex) {     // As per SockJS protocol content-type can be ignored (it's always json) } ```    ---  **Affects:** 4.1 GA  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java","closed","status: declined,","spring-projects-issues","2014-09-18T07:05:05Z","2014-09-18T08:20:19Z"
"","16569","ExecutorSubscribableChannel.sendInternal does not use timeout parameter [SPR-11953]","**[knockout user](https://jira.spring.io/secure/ViewProfile.jspa?name=knockoutuser)** opened **[SPR-11953](https://jira.spring.io/browse/SPR-11953?redirect=false)** and commented  The ExecutorSubscribableChannel.sendInternal does not use the timeout parameter (code from 4.1.0.BUILD-SNAPSHOT):  ``` @Override public boolean sendInternal(final Message message, long timeout) {     for (final MessageHandler handler : getSubscribers()) {         if (this.executor == null) {             handler.handleMessage(message);         }         else {             this.executor.execute(new Runnable() {                 @Override                 public void run() {                     handler.handleMessage(message);                 }             });         }     }     return true; } ```    ---  **Affects:** 4.1 RC1","closed","status: declined,","spring-projects-issues","2014-07-04T03:12:42Z","2014-07-09T06:50:10Z"
"","16568","Enrich Spring reference documentation (Websocket Support section) with details on how to filter messages [SPR-11952]","**[knockout user](https://jira.spring.io/secure/ViewProfile.jspa?name=knockoutuser)** opened **[SPR-11952](https://jira.spring.io/browse/SPR-11952?redirect=false)** and commented  Message filtering based on user preferences/rights is an use case that lots of applications using the new Spring websocket/broker relay support might have.  In the referenced URL (issue on the spring-websocket-portfolio app) the UserSessionRegistry was mentioned as an option for applying some filtering, but this interface is not easily discoverable by reading the documentation.  Would be nice if the UserSessionRegistry (and any other relevant classes) could be mentioned.   ---  **Affects:** 4.1 RC1  **Reference URL:** https://github.com/rstoyanchev/spring-websocket-portfolio/issues/46  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/87273d1b839e23b0b025d6fdc954b32bd768a711","closed","type: documentation,","spring-projects-issues","2014-07-04T02:54:21Z","2014-08-22T06:45:39Z"
"","16645","Expose information about STOMP/WebSocket connections and subscriptions [SPR-12029]","**[Kirk Stork](https://jira.spring.io/secure/ViewProfile.jspa?name=npskirk)** opened **[SPR-12029](https://jira.spring.io/browse/SPR-12029?redirect=false)** and commented  It has been suggested that the reference SO question should be opened up as a discussion here.  OP:  When making something like a chat application using Spring Websockets, it is useful to know who all is subscribed to any given topic. For, e.g. presence data displayed in the clients.  I know that I can implement ApplicationListener and keep my own list of ""connected users"", but it seems like the library must already be doing this work.  What's the recommended way to get active subscription info from the library directly (and without maintaining my own list in memory or db).    ---  **Affects:** 4.1 RC1  **Reference URL:** http://stackoverflow.com/questions/24795340/how-to-find-all-users-subscribed-to-a-topic-in-spring-websockets  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/281588d7bb9b4c15e72d743f5d88cc5ff39ff2de  7 votes, 14 watchers","closed","type: enhancement,","spring-projects-issues","2014-07-24T10:03:17Z","2019-01-11T18:21:05Z"
"","16767","ResponseBodyAdvice to accept null values? [SPR-12153]","**[Ken Wang](https://jira.spring.io/secure/ViewProfile.jspa?name=khkwang)** opened **[SPR-12153](https://jira.spring.io/browse/SPR-12153?redirect=false)** and commented  ResponseBodyAdvice is amazing for my needs except for one thing, it doesn't seem to be triggered when the ResponseBody returns a null value.  Is it possible to handle this case through the ResponseBodyAdvice?  ---  **Affects:** 4.1 GA  **Issue Links:** - #16766 ResponseBodyAdvice to accept null values? (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2014-09-04T21:37:38Z","2019-01-11T17:21:13Z"
"","16766","ResponseBodyAdvice to accept null values? [SPR-12152]","**[Ken Wang](https://jira.spring.io/secure/ViewProfile.jspa?name=khkwang)** opened **[SPR-12152](https://jira.spring.io/browse/SPR-12152?redirect=false)** and commented  ResponseBodyAdvice is amazing for my needs except for one thing, it doesn't seem to be triggered when the ResponseBody returns a null value.  Is it possible to handle this case through the ResponseBodyAdvice?  ---  **Affects:** 4.1 GA  **Issue Links:** - #16767 ResponseBodyAdvice to accept null values? (_**""is duplicated by""**_) - #17376 Re-allow handling empty request body  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-09-04T21:37:18Z","2019-01-11T17:20:58Z"
"","17115","When specified the Non-existent package using @ControllerAdvice(basePackages), has been applied to all controllers. [SPR-12510]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12510](https://jira.spring.io/browse/SPR-12510?redirect=false)** and commented  e.g)  ```java package io.github.kazuki43zoo.app;  import org.springframework.web.bind.annotation.ControllerAdvice; import org.springframework.web.bind.annotation.ModelAttribute;   @ControllerAdvice(basePackages = ""xxxx"") public class AppControllerAdvice {      @ModelAttribute(""appCommonMessage"")     public String commonMessage() {         System.out.println(""AppControllerAdvice#appCommonMessage() called."");         return ""Hello in AppControllerAdvice."";     }  } ```  Above `@ModelAttribute` method has been applied to the all controllers.( e.g: controllers under `io.github.kazuki43zoo.app` package).  I think feel unnatural in this behavior. This behavior is specification ?  As related information .. When specified the Non-existent package using `@ComponentScan(basePackages)`, controller is not scanned.  I think should be changed to the same behavior with `@CompnentScan`.  How do think ?  ---  **Affects:** 4.0.8, 4.1.2  **Issue Links:** - #17111 Base packages referenced from `@ControllerAdvice` must contain at least one Controller (_**""duplicates""**_) - #17114 `@ControllerAdvice`(basePackageClasses) do the prefix search by package name.  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)","closed","in: web,","spring-projects-issues","2014-12-05T01:23:43Z","2019-01-13T05:43:28Z"
"","17114","@ControllerAdvice(basePackageClasses) do the prefix search by package name. [SPR-12509]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12509](https://jira.spring.io/browse/SPR-12509?redirect=false)** and commented  When use the `@ControllerAdvice(basePackageClasses)`, it has been applied to the other base package's `Controller`.  e.g)  ```java package io.github.kazuki43zoo.app;  import org.springframework.web.bind.annotation.ControllerAdvice; import org.springframework.web.bind.annotation.ModelAttribute;   @ControllerAdvice(basePackageClasses = io.github.kazuki43zoo.app.AppControllerAdvice.class) public class AppControllerAdvice {      @ModelAttribute(""appCommonMessage"")     public String commonMessage() {         System.out.println(""AppControllerAdvice#appCommonMessage() called."");         return ""Hello in AppControllerAdvice."";     }  } ```  Above `@ModelAttribute` method has been applied to the `Controller` under `io.github.kazuki43zoo.app` and `io.github.kazuki43zoo.app1` package.  I think that should not be applied to the `Controller` under `io.github.kazuki43zoo.app1` package.  p.s) `basePackages` and `value` attribute is similar behavior.  ---  **Affects:** 4.1.2  **Reference URL:** https://github.com/kazuki43zoo/spring-controller-advice  **Issue Links:** - #17111 Base packages referenced from `@ControllerAdvice` must contain at least one Controller - #17115 When specified the Non-existent package using `@ControllerAdvice`(basePackages), has been applied to all controllers.  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d1f896859521356897f688ab03875117aa75bde7","closed","type: bug,","spring-projects-issues","2014-12-05T00:46:40Z","2019-01-13T05:43:29Z"
"","17047","When use the same configuration annotation of javaconfig, does not work on spring 3.2.12 [SPR-12442]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12442](https://jira.spring.io/browse/SPR-12442?redirect=false)** and commented  In my application, use the `@MapperScan` annotation of mybatis-spring.  My application worked until Spring 3.2.11. But when upgrade to 3.2.12, does not work. Probably, this problem's cause is fixes of #16939.  In my application, use `@MapperScan` in multiple java config class. Detail refer to sample application on Github. Note : `@MapperScan` use in com.springapp.infra package.  [Use spring 3.2.11 -> worked] * https://github.com/kazuki43zoo/spring-javaconfig/tree/on-spring-3.2.11-worked  **[Use spring 3.2.12 -> does not worked]** * https://github.com/kazuki43zoo/spring-javaconfig/tree/on-spring-3.2.12-not-worked  [Use spring 4.0.x -> worked] * https://github.com/kazuki43zoo/spring-javaconfig/tree/on-spring-4.0.8-worked  [Use spring 4.1.x -> worked] * https://github.com/kazuki43zoo/spring-javaconfig/tree/master  ---  **Affects:** 3.2.12  **Reference URL:** #16939  **Issue Links:** - #16939 `@Import` in another annotation still results in double scan  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4b4bc2dae0ba2458ad1547c719700007656aabaa  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2014-11-15T04:14:25Z","2019-01-14T05:14:18Z"
"","16870","PreparedStatement#setBlob(int, InputStream) is not supported in DefaultLobCreator [SPR-12265]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-12265](https://jira.spring.io/browse/SPR-12265?redirect=false)** and commented  I hope that following methods will be supported in the DefaultLobCreator. (methods that the data will be read from the stream as needed until end-of-file is reached.)  1. PreparedStatement#setBlob(int, InputStream) 2. PreparedStatement#setClob(int, Reader) 3. PreparedStatement#setBinaryStream(int, InputStream) 4. PreparedStatement#setAsciiStream(int, InputStream) 5. PreparedStatement#setCharacterStream(int, Reader)  For example... if contentLength is negative(-1), call method of without length.  How do think ?  ---  **Affects:** 3.2.11, 4.0.7, 4.1 GA  **Issue Links:** - #16854 INSERT SELECT of large CLOB causes ORA-01461 on setString","closed","type: enhancement,","spring-projects-issues","2014-09-26T12:49:12Z","2019-01-11T17:37:22Z"
"","16586","UriComponentsBuilder.fromUriString may not parse correctly when there is no path [SPR-11970]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-11970](https://jira.spring.io/browse/SPR-11970?redirect=false)** and commented  e.g.) ""http://example.com?..."" and ""http://example.com/?..."" has different behavior.  For following example... If not specify path in uri, string of up to '@' in the query parameters is recognized as a UserInfo.  **Test code**  ```java 	public static void main(String[] args) throws URISyntaxException, 			UnsupportedEncodingException {  		UriComponentsBuilder builder = UriComponentsBuilder.newInstance(); 		builder.uri(new URI(""http://example.com"")); 		builder.queryParam(""key1 "", ""value1 ""); 		builder.queryParam(""key2+"", ""value2+""); 		builder.queryParam(""key3&"", ""value3&""); 		builder.queryParam(""key4="", ""value4=""); 		// parameters that not require encoding 		builder.queryParam( 				""key5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,;"", 				""value5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,;"");  		UriComponents uriComponents = builder.build().encode(""UTF-8""); 		String uriString = uriComponents.toUriString();  		System.out.println(""----- Before -------""); 		System.out.println(""UriString :"" + uriString); 		System.out.println(""Scheme :"" + uriComponents.getScheme()); 		System.out.println(""UserInfo :"" + uriComponents.getUserInfo()); 		System.out.println(""Host :"" + uriComponents.getHost()); 		System.out.println(""Port :"" + uriComponents.getPort()); 		System.out.println(""Path :"" + uriComponents.getPath()); 		System.out.println(""Query :"" + uriComponents.getQuery()); 		System.out.println(""Fragment :"" + uriComponents.getFragment()); 		System.out.println(""QueryParams :"" + uriComponents.getQueryParams());  		builder = UriComponentsBuilder.fromUriString(uriString); 		uriComponents = builder.build(); 		uriString = uriComponents.toUriString();  		System.out.println(""----- After -------""); 		System.out.println(""UriString :"" + uriString); 		System.out.println(""Scheme :"" + uriComponents.getScheme()); 		System.out.println(""UserInfo :"" + uriComponents.getUserInfo()); 		System.out.println(""Host :"" + uriComponents.getHost()); 		System.out.println(""Port :"" + uriComponents.getPort()); 		System.out.println(""Path :"" + uriComponents.getPath()); 		System.out.println(""Query :"" + uriComponents.getQuery()); 		System.out.println(""Fragment :"" + uriComponents.getFragment()); 		System.out.println(""QueryParams :"" + uriComponents.getQueryParams()); 	} ```  **Console**  ``` ----- Before ------- UriString :http://example.com?key1%20=value1%20&key2%2B=value2%2B&key3%26=value3%26&key4%3D=value4%3D&key5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,;=value5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,; Scheme :http UserInfo :null Host :example.com Port :-1 Path :null Query :key1%20=value1%20&key2%2B=value2%2B&key3%26=value3%26&key4%3D=value4%3D&key5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,;=value5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,; Fragment :null QueryParams :{key1%20=[value1%20], key2%2B=[value2%2B], key3%26=[value3%26], key4%3D=[value4%3D], key5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,;=[value5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,;]} ----- After ------- UriString :http://example.com?key1%20=value1%20&key2%2B=value2%2B&key3%26=value3%26&key4%3D=value4%3D&key5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,;=value5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,; Scheme :http UserInfo :example.com?key1%20=value1%20&key2%2B=value2%2B&key3%26=value3%26&key4%3D=value4%3D&key5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~: Host : Port :-1 Path :/ Query :!$'()*,;=value5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,; Fragment :null QueryParams :{!$'()*,;=[value5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,;]} ```  If specify path in uri, result are following. Before and after is same. (this behavior is correct.)  ``` ----- Before ------- UriString :http://example.com/?key1%20=value1%20&key2%2B=value2%2B&key3%26=value3%26&key4%3D=value4%3D&key5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,;=value5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,; Scheme :http UserInfo :null Host :example.com Port :-1 Path :/ Query :key1%20=value1%20&key2%2B=value2%2B&key3%26=value3%26&key4%3D=value4%3D&key5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,;=value5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,; Fragment :null QueryParams :{key1%20=[value1%20], key2%2B=[value2%2B], key3%26=[value3%26], key4%3D=[value4%3D], key5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,;=[value5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,;]} ----- After ------- UriString :http://example.com/?key1%20=value1%20&key2%2B=value2%2B&key3%26=value3%26&key4%3D=value4%3D&key5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,;=value5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,; Scheme :http UserInfo :null Host :example.com Port :-1 Path :/ Query :key1%20=value1%20&key2%2B=value2%2B&key3%26=value3%26&key4%3D=value4%3D&key5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,;=value5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,; Fragment :null QueryParams :{key1%20=[value1%20], key2%2B=[value2%2B], key3%26=[value3%26], key4%3D=[value4%3D], key5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,;=[value5abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~:@/?!$'()*,;]} ```    ---  **Affects:** 3.2.9, 4.0.5  **Backported to:** [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)","closed","type: bug,","spring-projects-issues","2014-07-07T11:47:04Z","2014-07-18T10:16:40Z"
"","16445","Temporary file of multipart parameters are removed by finalizer(GC) when use the Commons-FileUpload [SPR-11826]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-11826](https://jira.spring.io/browse/SPR-11826?redirect=false)** and commented  I think should be remove explicitly a FileItem of multipart parameters (without relying on the finalizer) when finished the parsing. Or i want the option for remove explicitly.  How think ?   ---  **Affects:** 3.2.9","closed","status: bulk-closed,","spring-projects-issues","2014-05-27T11:53:43Z","2019-01-12T00:19:26Z"
"","16441","Unable to retrieve FlashMap when contains ""+""(half-space) in the request parameters [SPR-11821]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-11821](https://jira.spring.io/browse/SPR-11821?redirect=false)** and commented  Probably, URL decode processing are wrong in AbstractFlushMapManager#decodeParameters.  e.g.) Controller's logic is follows :  ```java redirectAttributes.addAttribute(""ab"", ""a  b""); redirectAttributes.addAttribute(""params[0]"", ""val0""); redirectAttributes.addAttribute(""params[1]"", ""val1""); ```  redirect url is follows:  ``` /xxx?ab=a++b¶ms%5B0%5D=val0¶ms%5B1%5D=val1 ```  FlashMap#getTargetRequestParams() is follows:  ``` {ab=[a++b], params[0]=[val0], params[1]=[val1]} ```  I think value of ""ab"" parameter should be ""a  b"".  ---  **Affects:** 3.2.9  **Reference URL:** #16129  **Issue Links:** - #17170 Flash attributes not working with spaces in query parameters (_**""duplicates""**_) - #16129 Unable to retrieve FlashMap when target parameters are encoded - #10187 RestTemplate should encode the url variables - #17577 flash attributes not mapped from session to request scope when parameter value is url encoded - #16543 Better handling of URI encoding configuration  0 votes, 5 watchers","closed","in: web,","spring-projects-issues","2014-05-27T03:55:04Z","2019-01-14T05:16:18Z"
"","16431","StandardServletMultipartResolver#resolveLazily does not consistently convert parsing exceptions to MultipartException  [SPR-11811]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-11811](https://jira.spring.io/browse/SPR-11811?redirect=false)** and commented  After the resolveLazily set true, i was sent a request that exceeds the max-file-size. But occurred exception is not wrapped to the MultipartException.  Probably, should call the initializeMultipart method via getParameter, getParameterValues in StandardMultipartHttpServletRequest.  **[WebLogic]** (not occurred the MultipartException)  ```log date:2014-05-21 05:09:51	thread:[ACTIVE] ExecuteThread: '11' for queue: 'weblogic.kernel.Default (self-tuning)'	X-Track:cb70d65d1ef546b3aed89f78162fdc6e	level:DEBUG	logger:o.t.gfw.web.exception.SystemExceptionResolver   	message:Exposing Exception as model attribute 'exception' date:2014-05-21 05:09:51	thread:[ACTIVE] ExecuteThread: '11' for queue: 'weblogic.kernel.Default (self-tuning)'	X-Track:cb70d65d1ef546b3aed89f78162fdc6e	level:ERROR	logger:o.t.gfw.common.exception.ExceptionLogger        	message:[e.xx.fw.9001] weblogic.servlet.utils.fileupload.SizeException: The field file exceeds its maximum permitted  size of 10240 characters. java.lang.IllegalStateException: weblogic.servlet.utils.fileupload.SizeException: The field file exceeds its maximum permitted  size of 10240 characters. 	at weblogic.servlet.utils.fileupload.Multipart.initParts(Multipart.java:143) ~[weblogic.server.merged.jar:12.1.2.0.0] 	at weblogic.servlet.utils.fileupload.Multipart.getPart(Multipart.java:168) ~[weblogic.server.merged.jar:12.1.2.0.0] 	at weblogic.servlet.internal.ServletRequestImpl.getPart(ServletRequestImpl.java:3332) [weblogic.server.merged.jar:12.1.2.0.0] 	at weblogic.servlet.internal.ServletRequestImpl$RequestParameters.getPartParam(ServletRequestImpl.java:2235) ~[weblogic.server.merged.jar:12.1.2.0.0] 	at weblogic.servlet.internal.ServletRequestImpl$RequestParameters.getParameter(ServletRequestImpl.java:2228) ~[weblogic.server.merged.jar:12.1.2.0.0] 	at weblogic.servlet.internal.ServletRequestImpl$RequestParameters.access$800(ServletRequestImpl.java:2002) ~[weblogic.server.merged.jar:12.1.2.0.0] 	at weblogic.servlet.internal.ServletRequestImpl.getParameter(ServletRequestImpl.java:881) [weblogic.server.merged.jar:12.1.2.0.0] 	at javax.servlet.ServletRequestWrapper.getParameter(ServletRequestWrapper.java:180) ~[weblogic.server.merged.jar:12.1.2.0.0] 	at org.springframework.web.util.WebUtils.hasSubmitParameter(WebUtils.java:554) ~[spring-web-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.mvc.condition.ParamsRequestCondition$ParamExpression.matchName(ParamsRequestCondition.java:138) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.mvc.condition.AbstractNameValueExpression.match(AbstractNameValueExpression.java:72) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.mvc.condition.ParamsRequestCondition.getMatchingCondition(ParamsRequestCondition.java:99) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.mvc.method.RequestMappingInfo.getMatchingCondition(RequestMappingInfo.java:170) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:73) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:55) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.addMatchingMappings(AbstractHandlerMethodMapping.java:290) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:256) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:231) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:56) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:297) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1085) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1070) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:891) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:851) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:953) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:855) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:751) [weblogic.server.merged.jar:12.1.2.0.0] 	... (omitted) ```  **[Resin]** (not occurred the MultipartException)  ```log date:2014-05-21 05:41:29	thread:resin-port-18080-42	X-Track:6912aa3b9ecb4ccc961495e2a2061713	level:ERROR	logger:o.t.gfw.common.exception.ExceptionLogger        	message:[e.xx.fw.9001] multipart form data part 'file':'17806' is greater then the accepted value of '10240' java.lang.IllegalStateException: multipart form data part 'file':'17806' is greater then the accepted value of '10240' 	at com.caucho.server.http.MultipartFormParser.parsePostData(MultipartFormParser.java:137) ~[resin.jar:4.0.37] 	at com.caucho.server.http.AbstractCauchoRequest.parsePostQueryImpl(AbstractCauchoRequest.java:449) ~[resin.jar:4.0.37] 	at com.caucho.server.http.AbstractCauchoRequest.parseQueryImpl(AbstractCauchoRequest.java:283) ~[resin.jar:4.0.37] 	at com.caucho.server.http.AbstractCauchoRequest.getParameterValuesImpl(AbstractCauchoRequest.java:188) ~[resin.jar:4.0.37] 	at com.caucho.server.http.AbstractCauchoRequest.getParameterValues(AbstractCauchoRequest.java:182) ~[resin.jar:4.0.37] 	at com.caucho.server.http.AbstractCauchoRequest.getParameterImpl(AbstractCauchoRequest.java:204) ~[resin.jar:4.0.37] 	at com.caucho.server.http.AbstractCauchoRequest.getParameter(AbstractCauchoRequest.java:199) ~[resin.jar:4.0.37] 	at javax.servlet.ServletRequestWrapper.getParameter(ServletRequestWrapper.java:174) ~[javaee-16.jar:na] 	at org.springframework.web.util.WebUtils.hasSubmitParameter(WebUtils.java:554) ~[spring-web-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.mvc.condition.ParamsRequestCondition$ParamExpression.matchName(ParamsRequestCondition.java:138) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.mvc.condition.AbstractNameValueExpression.match(AbstractNameValueExpression.java:72) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.mvc.condition.ParamsRequestCondition.getMatchingCondition(ParamsRequestCondition.java:99) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.mvc.method.RequestMappingInfo.getMatchingCondition(RequestMappingInfo.java:170) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:73) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:55) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.addMatchingMappings(AbstractHandlerMethodMapping.java:290) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:256) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:231) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:56) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:297) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1085) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1070) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:891) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:851) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:953) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:855) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:159) [javaee-16.jar:na] 	(omitted) ```  **[Tomcat]** (occurred the MultipartException)  ```log date:2014-05-21 05:21:52	thread:http-bio-9080-exec-8	X-Track:641ff486cbe34bfe92d24410d4ef886a	level:ERROR	logger:o.t.gfw.common.exception.ExceptionLogger        	message:[e.xx.fw.9001] Could not parse multipart servlet request; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$FileSizeLimitExceededException: The field file exceeds its maximum permitted size of 10240 bytes. org.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$FileSizeLimitExceededException: The field file exceeds its maximum permitted size of 10240 bytes. 	at org.springframework.web.multipart.support.StandardMultipartHttpServletRequest.parseRequest(StandardMultipartHttpServletRequest.java:99) ~[spring-web-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.multipart.support.StandardMultipartHttpServletRequest.initializeMultipart(StandardMultipartHttpServletRequest.java:131) ~[spring-web-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.multipart.support.StandardMultipartHttpServletRequest.getParameterNames(StandardMultipartHttpServletRequest.java:137) ~[spring-web-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.util.WebUtils.getParametersStartingWith(WebUtils.java:644) ~[spring-web-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.bind.ServletRequestParameterPropertyValues.(ServletRequestParameterPropertyValues.java:77) ~[spring-web-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.bind.ServletRequestParameterPropertyValues.(ServletRequestParameterPropertyValues.java:52) ~[spring-web-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.bind.ServletRequestDataBinder.bind(ServletRequestDataBinder.java:106) ~[spring-web-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.bindRequestParameters(ServletModelAttributeMethodProcessor.java:153) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:106) ~[spring-web-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77) ~[spring-web-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:157) ~[spring-web-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:124) ~[spring-web-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:685) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80) ~[spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:919) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:851) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:953) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:855) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:646) [servlet-api.jar:na] 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:829) [spring-webmvc-3.2.9.RELEASE.jar:3.2.9.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) [servlet-api.jar:na] 	(omitted) ```  ---  **Affects:** 3.2.9, 4.0.5  **Issue Links:** - #16352 StandardServletMultipartResolver should support lazy resolution along the lines of CommonsMultipartResolver","closed","type: enhancement,","spring-projects-issues","2014-05-20T14:01:57Z","2019-01-11T22:19:27Z"
"","16430","Defensive cleanup of multipart files when parsing error occurred in MultipartFilter [SPR-11810]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-11810](https://jira.spring.io/browse/SPR-11810?redirect=false)** and commented  I was sent a request that exceeds the max-file-size, occurred the MultipartException(size over error). But, multipart file does not clean up from temporary directory.  I think that should call MultipartResolver#resolveMultipart(HttpServletRequest) method by within try-finally phrase.   ---  **Affects:** 3.2.9","closed","status: invalid,","spring-projects-issues","2014-05-20T12:43:41Z","2019-01-12T05:25:53Z"
"","16368","Improve reconnect attemps option in DefaultMessageListenerContainer [SPR-11746]","**[Karthik Prasad](https://jira.spring.io/secure/ViewProfile.jspa?name=kprasad)** opened **[SPR-11746](https://jira.spring.io/browse/SPR-11746?redirect=false)** and commented  DefaultMessageListenerContainer doesn't have number of reconnect attempts( after which listener ceases and shutdown ) and reconnect interval multipler( multiplier to reconnect interval) which both are found in connection factory of HornetQ. Due to this when hornetq server is not started the reconnect attempt goes for infite time, resulting the log file bombarded with error logs for failed connection.   ---  **Affects:** 3.2.3  **Reference URL:** http://stackoverflow.com/questions/23270113/hornetq-reconnect-attempts-not-working-with-defaultmessagelistenercontainer/23271326#23271326","closed","type: enhancement,","spring-projects-issues","2014-04-30T00:38:26Z","2019-01-11T21:16:51Z"
"","17087","Mechanism needed to set default content type for application and/or classes, for content type overloading [SPR-12481]","**[Karl M. Davis](https://jira.spring.io/secure/ViewProfile.jspa?name=karlmdavis)** opened **[SPR-12481](https://jira.spring.io/browse/SPR-12481?redirect=false)** and commented  Given a class like the following:  ``` @Controller @RequestMapping(""/game"") public class GameController { 	@RequestMapping(value = ""/foo"", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE) 	public ModelAndView getFooAsHtml() { 		// ... 	}  	@RequestMapping(value = ""/foo"", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE) 	public ModelAndView getFooAsJson() { 		// ... 	} } ```  The `getFooAsJson()` method will be used for every request to `/game/foo` that specifies ""`Accept: \*/\*`"" in the request (or something equivalent). Note that some older browsers, such as IE8, do this by default.  It would be nice if were possible to set content type priority, or at least a default, at the class or application level.  From my experiments, and poking through the code, calling `org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer.defaultContentType(MediaType)` in `org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter.configureContentNegotiation(ContentNegotiationConfigurer)` does not seem to have any effect. Instead, it appears that `org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(String, HttpServletRequest)` ends up sorting the methods _alphabetically_ by their '`produces`' values.   ---  **Affects:** 4.0 GA  **Attachments:** - [karldavis-trying-to-repro-2014-12-17.patch](https://jira.spring.io/secure/attachment/22433/karldavis-trying-to-repro-2014-12-17.patch) (_4.13 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/34b7b54c7f27b5b377965eaf4fb8c89136429b14","closed","type: enhancement,","spring-projects-issues","2014-11-28T06:34:52Z","2015-03-25T12:40:29Z"
"","16802","Exception handling accept behaviour [SPR-12188]","**[Karl Bennett](https://jira.spring.io/secure/ViewProfile.jspa?name=karlbennett)** opened **[SPR-12188](https://jira.spring.io/browse/SPR-12188?redirect=false)** and commented  Currently, when a controller exception is handled and the resulting response object cannot be marshalled to the requests `Accept` mimetype then an [`HttpMediaTypeNotAcceptableException`](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/HttpMediaTypeNotAcceptableException.html) is thrown as would be expected.  Unfortunately the `HttpMediaTypeNotAcceptableException` is just logged and the handled exception is then  is then rethrown out into the container causing an HTTP 500.  This doesn't seem like desirable behaviour, I would expect the `HttpMediaTypeNotAcceptableException` to be automatically handled as it is with any other type of content negotiation failure and the response to be an HTTP 406.  ---  **Affects:** 4.1 GA  **Reference URL:** https://github.com/karlbennett/spr-12188-example  **Issue Links:** - #14511 Allow Overriding of Content-Type for an Error Response  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/644","closed","type: enhancement,","spring-projects-issues","2014-09-12T18:57:48Z","2019-01-14T05:15:11Z"
"","16994","Improvement of CharacterEditor.setAsText() and setAsUnicode() [SPR-12386]","**[Kang Baek-Kyu](https://jira.spring.io/secure/ViewProfile.jspa?name=overmindx)** opened **[SPR-12386](https://jira.spring.io/browse/SPR-12386?redirect=false)** and commented  The java.lang.Character.valueOf(char c) returns a Character instance representing the specified char value. If a new Character instance is not required, this method should generally be used in preference to the constructor Character(char), as this method is likely to yield significantly better space and time performance by caching frequently requested values.  This method will always cache values in the range '\u0000' to '\u007F', inclusive, and may cache other values outside of this range.  So I changed source like this  setValue(new Character(text.charAt(0))); -> setValue(Character.valueOf(text.charAt(0)));  setValue(new Character((char)code)); -> setValue(Character.valueOf((char) code));   ---  **Affects:** 4.1.1  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/683  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1e9ab53095ed601850d2fd780bffd8bee5919487","closed","type: enhancement,","spring-projects-issues","2014-10-28T08:02:02Z","2014-11-17T06:42:35Z"
"","16993","In, AutowireUtils.sortConstructors(), Using valueOf is faster than using constructor [SPR-12385]","**[Kang Baek-Kyu](https://jira.spring.io/secure/ViewProfile.jspa?name=overmindx)** opened **[SPR-12385](https://jira.spring.io/browse/SPR-12385?redirect=false)** and commented  Using valueOf is approximately 3.5 times faster than using constructor  Because Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM.  So changed source like this  return (new Integer(c1pl)).compareTo(c2pl) * -1; ==>return (Integer.valueOf(c1pl)).compareTo(c2pl) * -1;   ---  **Affects:** 4.1.1  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/682  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4945cf1bd176790f72838de113889015eca144ce","closed","type: enhancement,","spring-projects-issues","2014-10-28T04:02:38Z","2014-11-17T06:42:35Z"
"","16992","In AutowireUtils$ObjectFactoryDelegatingInvocationHandler.invoke() Parameter value must be null check.  [SPR-12384]","**[Kang Baek-Kyu](https://jira.spring.io/secure/ViewProfile.jspa?name=overmindx)** opened **[SPR-12384](https://jira.spring.io/browse/SPR-12384?redirect=false)** and commented  In AutowireUtils, ObjectFactoryDelegatingInvocationHandler.invoke(Object proxy, Method method, Object[] args) Parameter value must be null check. Otherwise, NPE will occur. So, I added this  Assert.notNull(proxy, ""proxy must not be null""); Assert.notNull(method, ""method must not be null""); Assert.notNull(args, ""Argument array must not be null"");   ---  **Affects:** 4.1.1  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/681","closed","type: enhancement,","spring-projects-issues","2014-10-28T01:54:15Z","2014-10-28T08:04:41Z"
"","16660","Improve comment in RuntimeTestWalker [SPR-12044]","**[Kang Baek-Kyu](https://jira.spring.io/secure/ViewProfile.jspa?name=overmindx)** opened **[SPR-12044](https://jira.spring.io/browse/SPR-12044?redirect=false)** and commented  RuntimeTestWalker Class comment is wrong. \ tag is open but not closed. So I am  tag to add given.  \See \. => \See \related data\  https://github.com/spring-projects/spring-framework/pull/605  thanks   ---  **Affects:** 4.0.6","closed","type: enhancement,","spring-projects-issues","2014-07-29T18:44:08Z","2014-08-15T01:52:48Z"
"","16685","redirect prefix gives error as javax.servlet.ServletException [SPR-12069]","**[kamlesh raul](https://jira.spring.io/secure/ViewProfile.jspa?name=kamleshraul)** opened **[SPR-12069](https://jira.spring.io/browse/SPR-12069?redirect=false)** and commented  if we set view resolver as below:  ```java                          ```  please look `` i.e. ant style all the page names which ends with ""jsp"" should be resolved with this jstlview  but when be use for example `redirect:/finalPage` from controller then view resolver come in to picture which search for pages with name end ""jsp"" which in this case is controller mapping /finalPage and not jsp page and it gives errors as 'redirect:finalPage' mapping not found  if we chage `redirect:/finalPage` to `redirect:/finalPagejsp` then view resolver will work perfectly i.e viewresolver will resolve that this request is for mapping controller and not for any view page.  I thought there is class UrlBasedViewResolver's canHandle method needs to update for this issue   ---  **Affects:** 3.2.4","closed","status: bulk-closed,","spring-projects-issues","2014-08-05T23:47:31Z","2019-01-12T02:28:36Z"
"","16611","org.springframework.web.servlet.DispatcherServlet - Context initialization failed [SPR-11995]","**[KALYAN KASYAP GARIMELLA](https://jira.spring.io/secure/ViewProfile.jspa?name=kalyankasyapgarimella)** opened **[SPR-11995](https://jira.spring.io/browse/SPR-11995?redirect=false)** and commented  I am unable to deploy web application which uses Spring MVC + Hibernate using SPRING TOOL SUITE. Getting the following error while deploying.  Jul 15, 2014 6:09:49 PM org.apache.catalina.core.ApplicationContext log SEVERE: StandardWrapper.Throwable org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 11 in XML document from ServletContext resource [/WEB-INF/spring/appServlet/servlet-context.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 11; columnNumber: 28; cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'mvc:annotation-driven'. at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:396)    ---  **Affects:** 3.1.1  **Attachments:** - [servlet-context.xml](https://jira.spring.io/secure/attachment/22115/servlet-context.xml) (_2.71 kB_)","closed","status: invalid,","spring-projects-issues","2014-07-15T05:54:47Z","2019-01-12T05:25:38Z"
"","16905","Upgrade optional JsonPath dependency from 0.9.0 to 1.1.0 [SPR-12299]","**[kalle](https://jira.spring.io/secure/ViewProfile.jspa?name=floda)** opened **[SPR-12299](https://jira.spring.io/browse/SPR-12299?redirect=false)** and commented  JsonPath version 0.9.0 is old and should be updated for better performance and more predictable results.  ---  **Reference URL:** https://github.com/jayway/JsonPath  **Issue Links:** - #18302 Require JsonPath 1.1+  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1e9e6c9f6b894b12718d09e8d24b6a335a3f0894, https://github.com/spring-projects/spring-framework/commit/065104a4853d4e1f45253d1a94e190541ca5a573  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2014-10-05T23:34:33Z","2019-01-11T17:35:59Z"
"","16588","AbstractFileResolvingResource should log reason if exists() returns false [SPR-11972]","**[Jürgen Failenschmid](https://jira.spring.io/secure/ViewProfile.jspa?name=jfai)** opened **[SPR-11972](https://jira.spring.io/browse/SPR-11972?redirect=false)** and commented  `exists` is called for resources in two scenarios: the resource is expected to exist, but is not extant, or the resource is not expected to exist but is extant.  In either case, it would be good for support reasons to be able to log the details of the result of `exists()`.  Concrete example: our application uses a web service client to request services from the backend server. The client attempts to load the WSDL using a `UrlResource`. This happens as part of Spring Web Services' `Wsdl11DestinationProvider`, which checks the WSDL resource using `exists()`. If there is a problem with the WSDL location, the only log entry you'll get is ""\ does not exist"". The Spring core class does not provide any further details in the implementation of `exists()`  - it just returns false. The implementation of `AbstractFileResolvingResource.exists()` is quite complex, and the result can be false for several reasons. For example, the WSDL URL actually does not exist, or the web server is not running, or the PKIX certificate chain is broken, etc.  Work-around: I copied the implementation of `AbstractFileResolvingResource.exists()` in an extension of `UrlResource` and added logging.   ---  **Affects:** 4.0.5","closed","status: bulk-closed,","spring-projects-issues","2014-07-07T16:30:40Z","2019-01-12T02:29:22Z"
"","16522","Regression: Form select tag forces ""multiple"" attribute even when explicitly set to false [SPR-11903]","**[Jörg Richter](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg%20richter)** opened **[SPR-11903](https://jira.spring.io/browse/SPR-11903?redirect=false)** and commented  We recently upgraded from Spring Version 3.2.1 to Spring Version 4.0.5.  It appears that the Spring Form select Tag ignores the attribute setting 'multiple=""false""' and forces 'multiple=""multiple""' on properties of type Collection, Array and Map, even if 'multiple' is not set.  Example: (property ""organisations"" is of type List)  4.0.5 1. attribute ""multiple"" is not set    JSP:        ...        HTML output:  \ ... \ 2. attribute 'multiple=""false""' is set JSP:  ...  HTML output:  \ ... \ Thanks for looking into this.  ---  **Affects:** 4.0.5  **Issue Links:** - #16301 Form select tag ""multiple"" attribute not recognized","closed","type: bug,","spring-projects-issues","2014-06-24T00:55:16Z","2019-01-11T22:20:31Z"
"","17167","Duplicated interceptors in HandlerExecutionChain after intermediate getInterceptors() call [SPR-12566]","**[Juraj Bak](https://jira.spring.io/secure/ViewProfile.jspa?name=jurajbak)** opened **[SPR-12566](https://jira.spring.io/browse/SPR-12566?redirect=false)** and commented  Method HandlerExecutionChain.initInterceptorList() duplicates interceptor records if attribute interceptorList contains previously added items resulting into duplicated interceptor calls.  Simple fix is to add this.interceptorList.clear() or initialize new Instance of list before line 104. this.interceptorList.addAll(Arrays.asList(this.interceptors)); See attached source and test.  Btw. Is there a reason for convertion between collection and array? Class AbstractHandlerMapping works with collections, also a HandlerExecutionChain do so internally. But interface uses arrays and forces everybody to convert collections to arrays and back.   ---  **Affects:** 3.2.12, 4.1.3  **Attachments:** - [HandlerExecutionChain.java](https://jira.spring.io/secure/attachment/22442/HandlerExecutionChain.java) (_6.66 kB_) - [HandlerExecutionChainTest.java](https://jira.spring.io/secure/attachment/22443/HandlerExecutionChainTest.java) (_1.09 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e353af65d29b2e04dc09fa2a02c510749d25031b, https://github.com/spring-projects/spring-framework/commit/37713ae9dd8213ada99e1fb2fe73d58fa2f3f289, https://github.com/spring-projects/spring-framework/commit/6b3023c2aa76386a0d3b437d593bfd65697dc169  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1), [3.2.13](https://github.com/spring-projects/spring-framework/milestone/101?closed=1)","closed","type: bug,","spring-projects-issues","2014-12-23T05:04:27Z","2014-12-30T05:21:46Z"
"","16564","Tx:method : name not checking the class. [SPR-11947]","**[Julien Mengelle](https://jira.spring.io/secure/ViewProfile.jspa?name=julien%20mengelle)** opened **[SPR-11947](https://jira.spring.io/browse/SPR-11947?redirect=false)** and commented  Hi,  First i apologize for my poor english and hope it will be still understandable.  When i declare transaction attributes, including package path like this :  ```     	     ```  This will not work. I can only fill a pattern for the method name (without the package/classe).  I didn't find documentation about this, so i don't know if it is normal or not. So i'm not sure if it is an issue or just some miss lead information.  Still, after a bit of debug, i was in class `NameMatchTransactionAttributeSource` (implements `TransactionAttributeSource`) which determine through it method `getTransactionAttribute` if the called method match or not the rules defined above.  The doc say: Parameters: method - method targetClass - target class. May be null, in which case the declaring class of the method must be used.  So it look like the class is an important information. But after a look at the source code, neither the targetClass nor declaring class of method object are used. It simply compare string between method.getName() and the rule pattern.  Shouldn't it be used or removed (or at least documented) ?   ---  **Affects:** 3.1.1, 4.0.5  **Reference URL:** http://docs.spring.io/spring/docs/3.1.1.RELEASE/javadoc-api/org/springframework/transaction/interceptor/NameMatchTransactionAttributeSource.html","closed","status: declined,","spring-projects-issues","2014-07-03T03:25:21Z","2019-01-12T16:34:48Z"
"","16980","Provide a way to deal with detached JPA entities upon reconnecting to a cache storage backend [SPR-12373]","**[Julien Martin](https://jira.spring.io/secure/ViewProfile.jspa?name=balteo)** opened **[SPR-12373](https://jira.spring.io/browse/SPR-12373?redirect=false)** and commented  I am in reference to Spring declarative cache and its usage in the cloud (Heroku or Cloudfoundry) with the RedisCacheManager.  Consider the following use case of RedisCacheManager + Jpa/Hibernate:  * Say I have two dynos/cloud containers + a Redis data store that I use as cache storage for some of my JPA entities (see code below). * One of the dynos is restarted by Heroku * When it reconnects to the Redis cache the entity manager finds a detached entity and a `LazyInitializationException` is raised.  It would be nice if Spring caching abstraction could provide some way to interact with the entity manager in order to prevent such issues.  Alternatively a best  practice to avoid this issue could be documented in the reference documentation.  Code that stores a Curriculum JPA entity into Redis cache store:  ```java @Override @Cacheable(value = MapCacheConfiguration.DATABASE_CACHE_NAME, key = ""#root.method.name"") public Curriculum findCurriculumByMemberId(Long memberId) {     return curriculumRepository.findCurriculumByMemberId(memberId); } ```    ---  **Affects:** 4.1.1  **Reference URL:** http://stackoverflow.com/questions/26531305/","closed","in: core,","spring-projects-issues","2014-10-24T02:13:13Z","2019-01-12T05:25:10Z"
"","16629","ThymeleafViewResolver not used by Spring 4.1 resulting in ""circular view path"" error [SPR-12013]","**[Julien Martin](https://jira.spring.io/secure/ViewProfile.jspa?name=balteo)** opened **[SPR-12013](https://jira.spring.io/browse/SPR-12013?redirect=false)** and commented  I use the following libraries: - Spring Framework 4.1.0.BUILD-SNAPSHOT - Spring Security 4.0.0.M1 - Thymeleaf 2.1.3.RELEASE - Thymeleaf thymeleaf-extras-tiles2-spring4 2.1.1.RELEASE - Thymeleaf thymeleaf-extras-springsecurity3 2.1.1.RELEASE  And I have configured my view resolver as follows:  ``` @Bean    public ThymeleafViewResolver viewResolver() {        ThymeleafViewResolver viewResolver = new ThymeleafViewResolver();        viewResolver.setViewClass(ThymeleafTilesView.class);        viewResolver.setTemplateEngine(templateEngine());        viewResolver.setCharacterEncoding(""UTF-8"");        return viewResolver;    } ```  and it seems the above view resolver is not found by Spring causing it to use the default ""internal view resolver"" and resulting in a circular view path error.  Please note that I am not sure whether this is a Spring or Thymeleaf issue and I have therefore opened an issue in Thymeleaf too.  ---  **Affects:** 4.1 RC1  **Reference URL:** https://github.com/thymeleaf/thymeleaf-spring/issues/64  **Issue Links:** - #16872 Spring 4.1 with WebMvcConfigurationSupport enabled does not register a default view resolver  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9092102a832173b2ab40f748ea361413c3250b42  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2014-07-21T07:04:37Z","2019-01-11T18:21:20Z"
"","16806","PropertySource uses Java 8 annotation @Repeatable [SPR-12192]","**[Juha Syrjälä](https://jira.spring.io/secure/ViewProfile.jspa?name=jsyrjala)** opened **[SPR-12192](https://jira.spring.io/browse/SPR-12192?redirect=false)** and commented  org.springframework.context.annotation.PropertySource uses java.lang.annotation.Repeatable annotation. `@Repeatable` is present only in Java 8.  For example Generating javadocs in maven with Java7 gives this warning  [WARNING] Javadoc Warnings [WARNING] /some/path/.m2/repository/org/springframework/spring-context/4.0.6.RELEASE/spring-context-4.0.6.RELEASE.jar(org/springframework/context/annotation/PropertySource.class): warning: Cannot find annotation method 'value()' in type 'Repeatable': class file for java.lang.annotation.Repeatable not found    ---  **Affects:** 4.0.6, 4.1 GA","closed","in: core,","spring-projects-issues","2014-09-14T14:47:59Z","2019-01-12T16:34:42Z"
"","17166","Compatibility with Jackson 2.5 [SPR-12565]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12565](https://jira.spring.io/browse/SPR-12565?redirect=false)** and commented  Jackson 2.5.0-rc1 is out. We need to make sure we're compatible with it.  ---  **Affects:** 4.1.3  **Issue Links:** - #17177 Compatibility with Groovy 2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c114c089226990b0c1fe2f703992455799e51312","closed","type: task,","spring-projects-issues","2014-12-22T08:23:25Z","2019-01-11T18:25:57Z"
"","17151","Compatibility with JDK 9 Jigsaw Builds [SPR-12549]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12549](https://jira.spring.io/browse/SPR-12549?redirect=false)** and commented  The Jigsaw branch recently got merged into the JDK 9 mainline snapshots: a good opportunity to do some tests against b42 or higher (https://jdk9.java.net/download/), making sure Spring 4.1.4 builds and runs on it as far as possible.  #### Further Resources  - [GRADLE-3256](https://issues.gradle.org/browse/GRADLE-3256) and  [DaemonParameters](https://github.com/gradle/gradle/blob/master/subprojects/launcher/src/main/java/org/gradle/launcher/daemon/configuration/DaemonParameters.java) - ""[20.1.1. Forked Java processes](http://gradle.org/docs/2.2.1/userguide/build_environment.html)"" section of the Gradle reference manual  ---  **Affects:** 4.1.3  **Issue Links:** - #17186 General compatibility with JDK 8u40 - #17608 General compatibility with JDK 8u60  0 votes, 6 watchers","closed","type: task,","spring-projects-issues","2014-12-17T02:32:58Z","2019-01-11T18:26:25Z"
"","17116","Upgrade to JUnit 4.12 [SPR-12511]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12511](https://jira.spring.io/browse/SPR-12511?redirect=false)** and commented  As of Spring Framework 4.1.3 (and Spring Boot 1.2 GA), Spring's testing support comes with JUnit 4.12 and is primarily tested against that version going forward.  Spring remains compatible with JUnit 4.11 at runtime for the time being.  ---  **Affects:** 4.1.2  **Issue Links:** - #14678 Upgrade to JUnit 4.11 - #17866 Require JUnit 4.12 or higher in the TestContext framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/016b3b758ac82ad19c0b42dd2d42d5fc570acfb7","closed","type: task,","spring-projects-issues","2014-12-05T04:14:30Z","2019-01-11T18:31:10Z"
"","17101","Consistent bridge method handling in annotation post-processors [SPR-12495]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12495](https://jira.spring.io/browse/SPR-12495?redirect=false)** and commented  Historically, `AutowiredAnnotationBeanPostProcessor`,  `CommonAnnotationBeanPostProcessor` and  `PersistenceAnnotationBeanPostProcessor` accumulated custom bridge method handling which turns out to lead to subtle differences in runtime behavior, in particular on Java 8. This should get fixed through consistent and well-tested bridge method treatment, in particular for 4.1.3 but to a limited degree also for 4.0.9 and 3.2.13.  ---  **Affects:** 3.2.12, 4.0.8, 4.1.2  **Issue Links:** - #13302 Bridged method detection leads to false positive detection of autowired annotations - #12555 Annotation based injection into non public base classes does not work - #16801 Java 8 bridge method handling can lead to false positive detection of autowired annotations - #17096 `@Resource` injection broken under spring-framework > 4.1.0  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7317457bb18c6caecfe01145624b535dbb6f9ea6, https://github.com/spring-projects/spring-framework/commit/d97add075abbd3df4d4a59e2272029617af5456b, https://github.com/spring-projects/spring-framework/commit/03d4e1bc22cb469451c3a24a835b699d3947210c, https://github.com/spring-projects/spring-framework/commit/dc15070877e2494370515b5cdb40825f83dcde87, https://github.com/spring-projects/spring-framework/commit/ec3967a6c7e071d17cf1a65e7a9892214e81ed36  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1), [3.2.13](https://github.com/spring-projects/spring-framework/milestone/101?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-12-02T06:38:07Z","2019-01-13T05:43:36Z"
"","17086","Update SqlRowSet interface with JDBC 4.x ResultSet additions [SPR-12480]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12480](https://jira.spring.io/browse/SPR-12480?redirect=false)** and commented  The `java.sql.ResultSet` interface has seen several additions since JDBC 4.0 which we should consider exposing on Spring's `SqlRowSet` interface as well.  ---  **Affects:** 4.1.2  **Issue Links:** - #17082 Misleading documentation for SqlRowSet  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fc92c0010e7d3b89fed511121acf2a4d1f06ac70","closed","type: enhancement,","spring-projects-issues","2014-11-27T08:06:20Z","2019-01-11T19:36:25Z"
"","17076","Tracking ASM 5.0.4 development (continued) [SPR-12470]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12470](https://jira.spring.io/browse/SPR-12470?redirect=false)** and commented  * Fix for ASM issue 317545 (http://forge.ow2.org/tracker/?func=detail&aid=317545&group_id=23&atid=100023)  ---  **Affects:** 4.0.8, 4.1.1  **Issue Links:** - #16869 Tracking ASM 5.0.4 development - #17549 Tracking ASM 5.0.4 development (final)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/98569045cbc3077f301163325843bef439b46e70, https://github.com/spring-projects/spring-framework/commit/ab5856b6a8d0ab2cd5f8fe906c7735eb9ba1a7ab  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)","closed","type: task,","spring-projects-issues","2014-11-26T02:01:56Z","2019-01-11T19:36:52Z"
"","17075","Support for Undertow 1.2 / WildFly 9.0 [SPR-12469]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12469](https://jira.spring.io/browse/SPR-12469?redirect=false)** and commented  WildFly 9.0 will be released with Undertow 1.2, scheduled for (late) Q1 2015. This is interesting for Spring at many levels: deployment on WildFly 9 full profile but also the new WildFly 9 Servlet profile and Undertow standalone.  Undertow 1.2 will ship initial HTTP/2 support, so along with Jetty 9.3, it's also an opportunity for early HTTP/2 support from Spring's side.  ---  **Affects:** 4.1.2  **Issue Links:** - #16836 Support for Undertow 1.1 / WildFly 8.2 - #17593 Compatibility with WildFly 9.0 GA - #17950 Make UndertowXhrTransport compatible with Undertow 1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/10d13892ed7ee50b97970dc6cbdc2ad963762973  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2014-11-26T01:52:07Z","2019-01-11T19:27:21Z"
"","17021","Straight JmsMessagingTemplate setup based on JMS ConnectionFactory [SPR-12413]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12413](https://jira.spring.io/browse/SPR-12413?redirect=false)** and commented  `JmsMessagingTemplate` currently only allows for setup from a given `JmsTemplate`. The more typical case is probably to create it directly from a JMS `ConnectionFactory`, so we should add a corresponding constructor and also a setter method, building the `JmsTemplate` instance implicitly.   ---  **Affects:** 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e02c23eea47ffe2920dfb4439568ea3e55723666","closed","type: enhancement,","spring-projects-issues","2014-11-06T05:19:27Z","2014-11-17T06:42:33Z"
"","17012","DefaultListableBeanFactory should allow efficient access to current bean names [SPR-12404]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12404](https://jira.spring.io/browse/SPR-12404?redirect=false)** and commented  Improvements based on this proposal and a few discussions with Phil: https://github.com/philwebb/spring-framework/commit/8c347e66c2b1ccbaaba93e3f6093f4ca32ddcc00  On a related but quite different note, we should also avoid synchronization for accessing current bean names. Through managing a dedicated set of manually registered singleton names (which remain stable after the registration phase), we can significantly optimize concurrent access as well as shorten the iteration needed for each autowiring attempt.  ---  **Affects:** 4.1.1  **Issue Links:** - #17286 ConcurrentModificationException thrown while iterating over bean definition names in DefaultListableBeanFactory#getBeansWithAnnotation(Class","closed","type: enhancement,","spring-projects-issues","2014-11-01T02:04:59Z","2019-01-13T05:44:04Z"
"","17002","Configuration class parsing should reuse metadata from AnnotatedBeanDefinition as far as possible [SPR-12394]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12394](https://jira.spring.io/browse/SPR-12394?redirect=false)** and commented  Configuration class parsing has been optimized for pre-loaded Class references already, building reflective metadata instead of using ASM. However, in particular for cases without resolved classes such as with scanning results, we may also reuse the metadata from `AnnotatedBeanDefinition` if it matches the target bean class, avoiding a potential re-read via ASM.  ---  **Affects:** 4.1.1  **Issue Links:** - #16998 ConfigurationClassUtils fails to introspect inner classes with dot name syntax (and silently ignores it)","closed","type: enhancement,","spring-projects-issues","2014-10-29T13:55:53Z","2019-01-11T19:23:47Z"
"","16973","Support for JSR-356 WebSockets on WebSphere Liberty Profile [SPR-12367]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12367](https://jira.spring.io/browse/SPR-12367?redirect=false)** and commented  https://developer.ibm.com/wasdev/2014/10/01/use-latest-java-ee-technologies-real-apps-thanks-liberty-features/  ---  **Affects:** 4.1.1  **Issue Links:** - #17824 Compatibility with WebSphere 9 Traditional (_**""is depended on by""**_) - #17395 Spring SOCKJS and Websockets - support for Websphere Liberty  (_**""is duplicated by""**_) - #15917 Support for JSR-356 on WebLogic 12.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6e1567b4b0f6804ec9c7c14ebef64dd610552a9c  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2014-10-23T04:20:35Z","2019-01-11T19:25:19Z"
"","16960","Favor more locally declared composed annotations over interface annotations in AnnotationUtils [SPR-12355]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12355](https://jira.spring.io/browse/SPR-12355?redirect=false)** and commented  Following up on #16100, `AnnotationUtils.findAnnotation` has another quirk that needs to be fixed: Locally declared composed annotations need to be favored over annotations declared on interfaces. The current behavior, fortunately unlikely to be ever hit in practice, is conceptually and intuitively wrong. And if fixed, the lookup can be implemented more efficiently overall.  ---  **Affects:** 4.1 GA  **Issue Links:** - #16100 Favor more locally declared composed annotations over inherited annotations in AnnotationUtils - #16930 AnnotationUtils provides poor diagnostics if getDeclaredAnnotations throws an exception  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/716916b281d25cc843b4b98530f4550f7f6c0ca8","closed","type: enhancement,","spring-projects-issues","2014-10-20T11:53:23Z","2019-01-11T19:26:17Z"
"","16938","OpenJpaDialect does not support declarative transaction isolation [SPR-12333]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12333](https://jira.spring.io/browse/SPR-12333?redirect=false)** and commented  Like with #16924 for EclipseLink and #16559 for Hibernate, we should try to provide a best-effort translation of custom isolation levels onto OpenJPA configuration.  `JDBCFetchPlan.setIsolation` seems to be the only thing we can do - which only controls the structure of select clauses but that seems to be exactly what OpenJPA intends.  ---  **Affects:** 4.1.1  **Issue Links:** - #16559 Isolation support for JPA with Hibernate EntityManager 4 - #16924 EclipseLinkJpaDialect does not support declarative transaction isolation","closed","type: enhancement,","spring-projects-issues","2014-10-14T12:12:54Z","2019-01-11T19:13:57Z"
"","16916","WebSocketSession should extend java.io.Closeable [SPR-12311]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12311](https://jira.spring.io/browse/SPR-12311?redirect=false)** and commented  Aligned with #14596, WebSocketSession should extend the `java.io.Closeable` interface.  ---  **Issue Links:** - #14596 Implement java.io.Closeable where appropriate - #17447 TcpConnection should extend java.io.Closeable  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e56559fd4de4d2c105c70c2f8e03cf92506b2510","closed","type: enhancement,","spring-projects-issues","2014-10-07T04:41:33Z","2019-01-11T19:15:49Z"
"","16869","Tracking ASM 5.0.4 development [SPR-12255]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12255](https://jira.spring.io/browse/SPR-12255?redirect=false)** and commented  * Fix for ASM issue 317539 (http://forge.ow2.org/tracker/?func=detail&aid=317539&group_id=23&atid=100023)  ---  **Issue Links:** - #17076 Tracking ASM 5.0.4 development (continued)  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","type: task,","spring-projects-issues","2014-09-26T07:06:27Z","2019-01-11T17:37:51Z"
"","16864","Further locking optimizations for the retrieval of non-singleton beans [SPR-12250]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12250](https://jira.spring.io/browse/SPR-12250?redirect=false)** and commented  The current `BeanFactory.getBean` algorithm is optimized towards singleton access, always checking the singleton map for a quick check before proceeding with scope handling.  Lock-free access to non-singleton beans is equally important and seems to be easy enough to achieve: through a check on registered singleton names before going into the lock on the singleton map.  ---  **Affects:** 3.2.11, 4.0.7, 4.1 GA  **Issue Links:** - #14414 AbstractBeanFactory#markBeanAsCreated performance issue due to lock contention - #14452 Non-singleton beans performance issue  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ac4103d1b9876067f6eb2a57654de8f9155da639, https://github.com/spring-projects/spring-framework/commit/9d832816a8f7b88eb9ff7993a2b0d69f0fed4c26, https://github.com/spring-projects/spring-framework/commit/a1538a451a61c3734b760d7811c6532bd27501b7  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-09-24T16:37:05Z","2019-01-11T17:37:47Z"
"","16863","Message broker thread pools should be set up in allowCoreThreadTimeOut mode [SPR-12249]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12249](https://jira.spring.io/browse/SPR-12249?redirect=false)** and commented  `ThreadPoolTaskExecutor` setup for message brokers, as in `TaskExecutorRegistration` and `MessageBrokerBeanDefinitionParser`, should use the `allowCoreThreadTimeOut` mode (which we can reliably use on JDK 6+ now). Otherwise, the thread pool won't dynamically shrink below the core pool size (number of processors x2 by default).  ---  **Affects:** 4.1 GA  **Issue Links:** - #16852 WebSocketMessageBrokerConfigurationSupport requiring JDK 7+ due to setRemoveOnCancelPolicy  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3836aa051f03bfc38f63a9d3c2d512b2bd90dd61","closed","type: enhancement,","spring-projects-issues","2014-09-24T16:09:47Z","2019-01-11T17:38:44Z"
"","16862","Consistent Environment access in XML bean definition parsing code [SPR-12248]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12248](https://jira.spring.io/browse/SPR-12248?redirect=false)** and commented  Dating back to the Spring 3.1 days, there is quite a bit of explicit passing around of `Environment` references in Spring's XML bean definition parsing code, e.g. in `BeanDefinitionParserDelegate` and `DefaultBeanDefinitionDocumentReader`. With the introduction of a convenient `XmlReaderContext.getEnvironment()` method, there is really no need for explicit `Environment` fields anymore.  This allows for deprecating `BeanDefinitionDocumentReader.setEnvironment` and `BeanDefinitionParserDelegate(XmlReaderContext, Environment)`, as well as as undeprecating `BeanDefinitionParserDelegate(XmlReaderContext)`. Some preparation measures are also going to be backported to 4.0.8 and 3.2.12, including a fully working version of the latter constructor.  ---  **Affects:** 4.1 GA  **Issue Links:** - #15057 make context:exclude-filter expression supports placeholder like context:component-scan base-package - #15058 please let context:component-scan base-package eval placeholder then split by comma  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de3ea5dad6dbfe16eaac511cb436b8ba843b70d0, https://github.com/spring-projects/spring-framework/commit/5ecdd8ca31f3ebf919cc4f50973eef7b68bc19c5, https://github.com/spring-projects/spring-framework/commit/d46c3fc7bf579a45a83d8363d956e6e5de56e0c0","closed","type: enhancement,","spring-projects-issues","2014-09-24T15:58:44Z","2019-01-11T17:38:37Z"
"","16856","Regression: HttpEntityMethodProcessor does not support HttpEntity subclasses anymore [SPR-12242]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12242](https://jira.spring.io/browse/SPR-12242?redirect=false)** and commented  This is a reappearance of #14840 due to a change in 4.1.  ---  **Affects:** 4.1 GA  **Issue Links:** - #14840 HttpEntityMethodProcessor does not support HttpEntity/ResponseEntity subclasses  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/281b243b88cccb45e55c7d1a168dde59819d6ac4","closed","type: bug,","spring-projects-issues","2014-09-24T02:58:54Z","2019-01-11T17:38:10Z"
"","16830","ScheduledAnnotationBeanPostProcessor should unregister tasks on destruction of individual beans [SPR-12216]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12216](https://jira.spring.io/browse/SPR-12216?redirect=false)** and commented  At this point, `ScheduledAnnotationBeanPostProcessor` cancels all tasks on shutdown of the entire application context. While this is generally fine for the typical singleton bean case, `@Scheduled` may also be placed on non-singleton beans which we should track for individual unregistration on destruction of each such individual bean.  This is a follow-up to #16803.  ---  **Issue Links:** - #16803 Scheduled/JmsListenerAnnotationBeanPostProcessor needlessly scans every scoped instance - #18858 Scheduled tasks aren't cancelled on ScheduledTaskRegistrar destruction anymore - #19230 Performance regression when scheduling is enabled and context contains URL beans - #18739 Improve reference documentation for Task Execution and Scheduling about bean scopes - #17470 `@Scheduled` methods in `@Lazy` beans are not scheduled  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ab478d14fa8125daf1c4165e6d7ca2cccd0838e9","closed","type: enhancement,","spring-projects-issues","2014-09-17T12:50:07Z","2019-01-13T05:44:53Z"
"","16825","Support for JSR-330 (DI for Java) 2.0 [SPR-12211]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12211](https://jira.spring.io/browse/SPR-12211?redirect=false)** and commented  There are ongoing discussions towards a revision of JSR-330, in alignment with CDI 2.1.   ---  0 votes, 6 watchers","open","type: enhancement,","spring-projects-issues","2014-09-17T06:21:01Z","2016-12-04T14:39:13Z"
"","16824","Alignment with Portlet 3.0 (JSR-362) [SPR-12210]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12210](https://jira.spring.io/browse/SPR-12210?redirect=false)** and commented  The Portlet 3.0 discussions seem to be advanced enough for Spring to align with the directions there. This presents us with an opportunity to generally revise Spring's Portlet support, in particular addressing common user requests.  ---  **Reference URL:** https://jcp.org/en/jsr/detail?id=362  **Issue Links:** - #12003 Spring Portlet MVC - Unable to return JSON data from `@ResourceMapping`","closed","type: enhancement,","spring-projects-issues","2014-09-17T06:18:53Z","2019-01-13T05:44:55Z"
"","16823","Support for JSR-354 Money & Currency [SPR-12209]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12209](https://jira.spring.io/browse/SPR-12209?redirect=false)** and commented  The JSR-354 Money & Currency API looks like a good fit for Spring's binding and formatting features, analogous to Spring 4.0's JSR-310 Date & Time support. JSR-354 comes with a JDK 8 based reference implementation that should be easy enough to support in Spring 4.2 already. The RI is currently in the 1.0 RC stages; it is expected that it'll be at 1.0 GA in time for the Spring Framework 4.2 GA release.  ---  **Reference URL:** http://javamoney.github.io/  **Issue Links:** - #21560 Update documentation references to Number/Currency/PercentStyleFormatter - #12417 Currency support (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de893ada2b951437ab8f4aa1d569b90d2bea8bf0, https://github.com/spring-projects/spring-framework/commit/6c169bd644dc47c2a364885a7578cb113a596c59  2 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2014-09-17T06:14:56Z","2019-01-11T17:25:59Z"
"","16785","Consistent support for java.util.Optional for all applicable handler method arguments [SPR-12171]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12171](https://jira.spring.io/browse/SPR-12171?redirect=false)** and commented  In particular, consistent support for `java.util.Optional` implying actual optional characteristics in case of the argument not being resolvable, without having to resort to an explicit `required=false` attribute on the corresponding annotation.   ---  **Affects:** 4.1 GA  **Issue Links:** - [INT-3516](https://jira.spring.io/browse/INT-3516) Support JDK8 Optional When Binding Messages to Service Methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5790fc904af9df90774d6c7b848b82af8b75103a","closed","type: enhancement,","spring-projects-issues","2014-09-09T16:01:40Z","2014-10-01T03:11:46Z"
"","16710","SchedulerAccessorBean should be able to find a default Scheduler [SPR-12094]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12094](https://jira.spring.io/browse/SPR-12094?redirect=false)** and commented  `SchedulerAccessorBean` historically requires either a ""schedulerName"" or a `Scheduler` to be specified. Since `getBean(Class)` fallback retrievals are quite common now, we should also do it here...   ---  **Affects:** 4.1 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a2e6b56dd0d333067a7da3e9a1ce901bcdf5fdab","closed","type: enhancement,","spring-projects-issues","2014-08-18T12:20:09Z","2014-09-04T05:31:16Z"
"","16709","Convenient EhCache CacheManager setup in an @Bean method [SPR-12093]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12093](https://jira.spring.io/browse/SPR-12093?redirect=false)** and commented  Currently, there's a choice between Spring's `EhCacheManagerFactoryBean` (which is not a great fit for `@Bean` methods) and the native EhCache `CacheManager` bootstrapping options (which are a good match for Java-style setup but lack Spring-driven resource setup etc). Some convenience methods to close that gap would be nice.   ---  **Affects:** 4.1 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0d0d7139ee0976e5cacaa4b3d924cfa98e5a2896","closed","type: enhancement,","spring-projects-issues","2014-08-18T06:15:08Z","2014-09-04T05:31:19Z"
"","16691","Tiles 3 TilesViewResolver should allow for custom TilesView subclasses [SPR-12075]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12075](https://jira.spring.io/browse/SPR-12075?redirect=false)** and commented  In contrast to all other `ViewResolver` implementations that Spring comes with out-of-the-box, our `TilesViewResolver` for Tiles 3 overrides `getViewClass()` directly instead of following the `requiredViewClass()` approach. This should be fixed in order to allow for custom `TilesView` subclasses to be specified through the existing `viewClass` property.   ---  **Affects:** 3.2.10, 4.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6639320e8eaea71df880726d0312382ed616e873, https://github.com/spring-projects/spring-framework/commit/1034b0dae2d313c165129ff5c22a5e1bc238b419, https://github.com/spring-projects/spring-framework/commit/7c57424b48b348afb1dc49767f6fafcd05c97b32  **Backported to:** [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)","closed","type: bug,","spring-projects-issues","2014-08-09T16:08:17Z","2014-08-19T02:21:25Z"
"","16655","JmsListener/ScheduledAnnotationBeanPostProcessor should use SmartInitializingSingleton instead of ContextRefreshedEvent [SPR-12039]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12039](https://jira.spring.io/browse/SPR-12039?redirect=false)** and commented  Both `JmsListenerAnnotationBeanPostProcessor` and `ScheduledAnnotationBeanPostProcessor` traditionally implement `ApplicationListener` to perform their registration tasks as late as possible. The new `SmartInitializingSingleton` mechanism in Spring 4.1 is a better fit since it kicks in right after the singleton pre-instantiation phase but before the phased lifecycle startup phase.  In the case of `JmsListenerAnnotationBeanPostProcessor`, this is particularly important since `JmsListenerEndpointRegistry` otherwise misses to propagate its phased `start` signal to the listener containers that it manages. This currently shows in the form that an explicit `context.start()` call is needed for annotated JMS endpoints.  ---  **Affects:** 4.1 RC1  **Issue Links:** - #11322 ScheduledAnnotationBeanPostProcessor registers schedules twice in web application - #14515 Annotation-driven JMS endpoints - #17242 During startup scheduled tasks are driven earlier than before causing problems with Spring Batch  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/92c657e12d9a9e6da7ee22e7147e16ac7a11880b","closed","type: enhancement,","spring-projects-issues","2014-07-28T06:50:31Z","2019-01-11T18:20:11Z"
"","16585","Support JMS 2.0's shared consumers in message listener containers [SPR-11969]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11969](https://jira.spring.io/browse/SPR-11969?redirect=false)** and commented  JMS 2.0 introduces the notion of shared consumers (both durable and non-durable), which we're supporting in our CachingConnectionFactory already. We should also support them in our message listener containers, along the lines of the existing ""durableSubscriptionName"" and ""subscriptionDurable"" properties.  ---  **Affects:** 4.0.5  **Issue Links:** - #14515 Annotation-driven JMS endpoints - #16574 CachingConnectionFactory should allow option to not cache shared consumers  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2014-07-07T11:32:37Z","2019-01-11T22:25:33Z"
"","16573","Upgrade to AspectJ 1.8.1 and Tomcat 8.0.9 [SPR-11957]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11957](https://jira.spring.io/browse/SPR-11957?redirect=false)** and commented  As of Spring Framework 4.0.6, we should upgrade to AspectJ 1.8.1 and declare it as the recommended user version in our Maven POMs, as well as to Tomcat 8.0.9 which is the first version declared as stable by Apache.  This has been done in the 4.1 line before, so let's mark this as fixed there as well.  ---  **Affects:** 4.0.5  **Issue Links:** - #15837 Upgrade AspectJ dependency to 1.8 final and apply latest ASM 5.0.2 patches","closed","type: task,","spring-projects-issues","2014-07-05T02:13:32Z","2019-01-11T22:26:01Z"
"","16524","Consistent declaration of private static final logger variables [SPR-11905]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11905](https://jira.spring.io/browse/SPR-11905?redirect=false)** and commented  Some of our private static logger variables are not declared as final yet.   ---  **Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-06-24T04:53:44Z","2014-07-08T00:21:27Z"
"","16509","Spring-specific index file for component candidate classes [SPR-11890]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11890](https://jira.spring.io/browse/SPR-11890?redirect=false)** and commented  Instead of or in addition to externally provided index arrangements (such as on JBoss), Spring could define its own index file: e.g. a ""META-INF/spring.components"" file listing pre-generated component candidate names (one per line) in order to shortcut the candidate component identification step in the classpath scanner. That file could get generated by a platform-specific deployer or simply by an application build task.  Such a list in an index file wouldn't have to be definitive: Spring would still evaluate each and every one of those classes individually via ASM but wouldn't bother with evaluating any other classes in such a jar file. We could also consider using such a file for Spring-driven JPA entity scanning.  ---  **Issue Links:** - #16286 Introduce a mechanism for abstract types at component scanning - [DATACMNS-977](https://jira.spring.io/browse/DATACMNS-977) Introduce support for component index creation in Spring 5 - #19275 Backport `@Indexed` to the 4.3.x line - #19276 Document candidates index mechanism - #19277 Add the ability to create an optional bean reference by name - #9371 Using component scanning in signed jars is very slow - #19219 Cache ASM metadata at the context level - #14986 Allow Application Server to Supply Annotation Scanning - #18188 Improve performance of #getBeanNamesForType() while the BeanFactory configuration is not yet frozen  2 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2014-06-19T23:18:52Z","2019-01-13T05:48:33Z"
"","16508","Upgrade to ASM 5.0.3 [SPR-11889]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11889](https://jira.spring.io/browse/SPR-11889?redirect=false)** and commented  Spring Framework 3.2.9 includes ASM 5.0.2 since 5.0.3 got a released a few days too late. In contrast to Spring Framework 4.x, 3.2.9 isn't designed to include our custom ASM fork (which was at 5.0.3 level already) but rather a repackaged version of an official ASM release. So for Spring Framework 3.2.10, we can finally upgrade to the official ASM 5.0.3 release.  ---  **Affects:** 3.2.9  **Issue Links:** - #16279 Basic Java 8 bytecode compatibility for Spring 3.2.x through ASM 5.0.2","closed","type: task,","spring-projects-issues","2014-06-19T22:53:57Z","2019-01-11T22:14:19Z"
"","16452","Support for java.util.Optional with @Inject (a la @Autowired's required=false) [SPR-11833]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11833](https://jira.spring.io/browse/SPR-11833?redirect=false)** and commented  Java 8's `java.util.Optional` is a new common type to mark references as non-required. It'd be nice to support this with `@Inject` at the injection point level, as an alternative to `@Autowired`'s `required=false` attribute.  ---  **Issue Links:** - #16448 Support for java.util.Optional as a `@RequestParam` - #19595 Support `@Nullable` annotations as indicators for optional injection points - #13771 Allow autowiring of empty collection in `@Bean` method parameters using java.util.Optional - #16855 Data binding with java.util.Optional: traversal of nested paths, detection of empty holders  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5cb3f8eada1895628e15a4420b6a335f12ecaeca, https://github.com/spring-projects/spring-framework/commit/7d03daf8cbfdb08740af067a18cbdde51a05f7c0","closed","type: enhancement,","spring-projects-issues","2014-05-29T09:01:42Z","2019-01-13T06:53:45Z"
"","16399","WebSocketIntegrationTests failing against Undertow 1.0.15 [SPR-11777]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11777](https://jira.spring.io/browse/SPR-11777?redirect=false)** and commented  Upgrading our build to Undertow 1.0.9 (as used in WildFly 8.1 RC2), we get a failure in WebSocketIntegrationTests.subProtocolNegotiation...  ``` assertEquals(""foo"", session.getAcceptedProtocol()); ```  That test fails since getAcceptedProtocol() returns null.   ---  **Affects:** 4.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c809143cc4100568c642d73d70bd5f7190019895","closed","type: bug,","spring-projects-issues","2014-05-12T14:18:26Z","2014-07-18T10:16:31Z"
"","16369","JRubyScriptUtils fails against JRuby 1.7.12 with NullPointerException in findClassNode [SPR-11747]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11747](https://jira.spring.io/browse/SPR-11747?redirect=false)** and commented  In JRuby 1.7.12, Node.childNodes() apparently contains null values, which we need to handle defensively.   ---  **Affects:** 3.2.8, 4.0.3  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: bug,","spring-projects-issues","2014-04-30T04:38:11Z","2014-05-01T01:36:43Z"
"","16626","Exceptions thrown during AbstractApplicationContext.refresh() not being logged right when they are caught [SPR-12010]","**[Juan Velez](https://jira.spring.io/secure/ViewProfile.jspa?name=juanavelez)** opened **[SPR-12010](https://jira.spring.io/browse/SPR-12010?redirect=false)** and commented  During a refresh() is possible that some beans may throw exceptions which causes the catch(BeanException) block to be executed. In this block the exception is not logged right away which may lead to the exception itself never being reported. Consider the case we encountered where we had (unfortunately) a deadlock situation which only happened once the code in the catch(BeanException) was being executed. The end result was that the system came to a stop and there was no report of any failure because the logging of the exception by spring only happens after the exception is re-thrown  ---  **Affects:** 3.1.3, 4.0.6  **Issue Links:** - #14634 Exception during context refresh swallowed by subsequent LifecycleProcessor exception handling - #18238 Revisit BeansException warn logging after startup failure  **Backported to:** [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-07-18T10:07:09Z","2019-01-11T18:21:16Z"
"","16956","ExposeInvocationInterceptor doesn't make a best effort to be first in execution order [SPR-12351]","**[Juan Martin Sotuyo Dodero](https://jira.spring.io/secure/ViewProfile.jspa?name=jsotuyod)** opened **[SPR-12351](https://jira.spring.io/browse/SPR-12351?redirect=false)** and commented  ExposeInvocationInterceptor, which is automatically added to the chain when using an AspectJ aspect, should run first, but doesn't make enough efforts to do so. If this does not occur, an exception will be thrown at runtime saying not all parameters could be bound (which may be misleading to the developer, since the number of arguments being match does not coincide with those he set in the advice; and no reference to ExposeInvocationInterceptor is ever made; not even on the official documentation http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/html/aop.html#aop-ataspectj-advice-ordering )  First of all, it's implementation of `@Ordered` doesn't set Ordered.HIGHEST_PRECEDENCE, but Ordered.HIGHEST_PRECEDENCE + 1 (which, since a lower value is translated into higher precedence, means ""second"").  Also of note, is that even setting it to Ordered.HIGHEST_PRECEDENCE would not guarantee it to run first when the other aspect has Ordered.HIGHEST_PRECEDENCE. This could be attoned by using PriorityOrdered instead of Ordered in ExposeInvocationInterceptor. Doing so would guarantee the interceptor runs first to every other aspect, except maybe those that also are PriorityOrdered with Ordered.HIGHEST_PRECEDENCE.   ---  **Affects:** 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fb08644e46db1ed93a384326accdac8f4078343f","closed","type: enhancement,","spring-projects-issues","2014-10-20T05:36:39Z","2021-04-22T05:16:50Z"
"","16748","Spring message tag should scape spanish accents properly [SPR-12132]","**[José Ángel Rey Liñares](https://jira.spring.io/secure/ViewProfile.jspa?name=jarey)** opened **[SPR-12132](https://jira.spring.io/browse/SPR-12132?redirect=false)** and commented  The spring message tag is not scaping html properly when spanish accent is present and htmlEscape attribute is set to true. Example: Text code (in property file): label.unsubscribe=Cancelar subscripci\u00f3n JSP javascript asignation: $labelUnsubscribe = ''; Expected output: Cancelar subscripción Obtained output: Cancelar subscripci& oacute;n --> note the &Xcute not scaped. 'EncodingFilter' is set to UTF-8. When the htmlEscape attribute is set to false or the property is not specified, the message is shown correctly, but we think that the output should be scaped correctly when the property is set to true, according with the documentation.  URL of the same issue reported by another user on stackoverflow is provided. In our case the issues occurs when the property is set to htmlEscape=""true"" in a explicit way.  ---  **Affects:** 4.0.6  **Reference URL:** http://stackoverflow.com/questions/17575723/spring-message-in-javascript-cannot-display-spanish-accent-characters-properly  **Attachments:** - [ObtainedOutputhtmlScape=false.png](https://jira.spring.io/secure/attachment/22195/ObtainedOutputhtmlScape%3Dfalse.png) (_2.30 kB_) - [ObtainedOutputhtmlScape=true.png](https://jira.spring.io/secure/attachment/22196/ObtainedOutputhtmlScape%3Dtrue.png) (_3.81 kB_)  **Issue Links:** - #16955 Allow for using the response encoding when escaping HTML characters (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a0c210457bda606eba58f367678bdefc69d5cd15  0 votes, 5 watchers","closed","in: web,","spring-projects-issues","2014-08-28T07:18:37Z","2019-01-12T16:46:24Z"
"","16427","@Aspect aspect not correctly applied to Java 8 lambda-defined @Beans [SPR-11807]","**[Josh Long](https://jira.spring.io/secure/ViewProfile.jspa?name=joshlong)** opened **[SPR-11807](https://jira.spring.io/browse/SPR-11807?redirect=false)** and commented  In the example below, I define an aspect which I expect to be applied to all beans of type `CommandLineRunner`, it isn't if the bean is defined as a lambda on java version ""1.8.0_05"" on OSX.  (java version ""1.8.0_05"" Java(TM) SE Runtime Environment (build 1.8.0_05-b13) Java HotSpot(TM) 64-Bit Server VM (build 25.5-b02, mixed mode))  ```  package demo;  import org.aspectj.lang.JoinPoint; import org.aspectj.lang.annotation.After; import org.aspectj.lang.annotation.Aspect; import org.springframework.boot.CommandLineRunner; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.*; import org.springframework.stereotype.Component;  @Configuration @ComponentScan @EnableAspectJAutoProxy public class Application {       /*   @Bean        CommandLineRunner good() {            return new CommandLineRunner() {                @Override                public void run(String... args) throws Exception {                    System.out.println(String.join("","", args));                }            };        }    */     @Bean     CommandLineRunner bad() {         return (args) -> System.out.println(String.join("","", args));     }      public static void main(String[] args) throws Exception {          ApplicationContext applicationContext = new AnnotationConfigApplicationContext(Application.class);          applicationContext.getBeansOfType(CommandLineRunner.class).forEach((k, v) -> System.out.println(k + '=' + v));          for (int i = 0; i < 4; i++) {             applicationContext.getBeansOfType(CommandLineRunner.class).forEach((k, v) -> {                 try {                     v.run(args);                 } catch (Exception e) {                     e.printStackTrace();                 }             });         }     } }  @Component @Aspect class WrappingAspect {      @After(""execution(* org.springframework.boot.CommandLineRunner.*(..))"")     public void after(JoinPoint joinPoint) {         System.out.println(""invoked after "" + joinPoint.toLongString());     }  }  ```  ```   	4.0.0  	org.demo 	demo 	0.0.1-SNAPSHOT  	demo 	Demo project  	 		org.springframework.boot 		spring-boot-starter-parent 		1.0.2.RELEASE 		  	   	                       org.springframework.boot             spring-boot-starter-aop            		 			org.springframework.boot 			spring-boot-starter-test 			test 		 	  	         4.0.4.RELEASE         UTF-8 		demo.Application 		1.8 	     ```  ---  **Affects:** 4.0.4  **Issue Links:** - #15303 Inferring an ApplicationListener's event type from a lambda or method reference - #17130 GenericTypeResolver should be able to introspect generic arguments from lambdas  1 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2014-05-19T20:14:53Z","2019-01-11T21:21:12Z"
"","16876","VerifyErrors when using SpEL compilation with Thymeleaf [SPR-12271]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-12271](https://jira.spring.io/browse/SPR-12271?redirect=false)** and commented  I tried to enable SpEL compilation support in my project using `-Dspring.expression.compiler.mode=immediate`. This project uses Thymeleaf for views, and thus relies rather heavily on SpEL expressions. When running the application I can see that the compiler kicks in, but I'm seeing VerifyErrors on the generated SpEL classes:  ``` Caused by: java.lang.VerifyError: (class: spel/Ex7, method: getValue signature: (Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;) Expecting to find integer on stack 	at java.lang.Class.getDeclaredConstructors0(Native Method) 	at java.lang.Class.privateGetDeclaredConstructors(Class.java:2532) 	at java.lang.Class.getConstructor0(Class.java:2842) 	at java.lang.Class.newInstance(Class.java:345) 	at org.springframework.expression.spel.standard.SpelCompiler.compile(SpelCompiler.java:106) 	at org.springframework.expression.spel.standard.SpelExpression.compileExpression(SpelExpression.java:464) 	at org.springframework.expression.spel.standard.SpelExpression.checkCompile(SpelExpression.java:434) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:266) 	at org.thymeleaf.spring4.expression.SpelVariableExpressionEvaluator.evaluate(SpelVariableExpressionEvaluator.java:139) 	at org.thymeleaf.standard.expression.VariableExpression.executeVariable(VariableExpression.java:149) 	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:59) 	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:103) 	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:133) 	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:120) 	at org.thymeleaf.standard.processor.attr.AbstractStandardSingleAttributeModifierAttrProcessor.getTargetAttributeValue(AbstractStandardSingleAttributeModifierAttrProcessor.java:67) 	at org.thymeleaf.processor.attr.AbstractSingleAttributeModifierAttrProcessor.getModifiedAttributeValues(AbstractSingleAttributeModifierAttrProcessor.java:59) 	at org.thymeleaf.processor.attr.AbstractAttributeModifierAttrProcessor.processAttribute(AbstractAttributeModifierAttrProcessor.java:61) 	at org.thymeleaf.processor.attr.AbstractAttrProcessor.doProcess(AbstractAttrProcessor.java:87) 	at org.thymeleaf.processor.AbstractProcessor.process(AbstractProcessor.java:212) 	at org.thymeleaf.dom.Node.applyNextProcessor(Node.java:1016) 	at org.thymeleaf.dom.Node.processNode(Node.java:971) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:672) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:655) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:672) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:655) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:672) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:655) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:672) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:655) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:672) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:655) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:672) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:655) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:672) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:655) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:672) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:655) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:672) 	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:655) 	at org.thymeleaf.dom.Node.processNode(Node.java:990) 	at org.thymeleaf.dom.Document.process(Document.java:93) 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1155) 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060) 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011) 	at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335) 	at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190) 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1228) 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1011) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:955) 	... 68 more ```  I haven't tried to dig any deeper into the root cause, as byte code generation isn't really my cup of tea.  Thymeleaf has a lot of runtime overhead compared to JPSs or FreeMarker: if Spring could support compiled SpEL expressions in Thymeleaf views I think it could have a very positive impact on performance, so I'm eager to get this to work.  ---  **Affects:** 4.1 GA  **Attachments:** - [SPR-12271.zip](https://jira.spring.io/secure/attachment/22289/SPR-12271.zip) (_5.03 kB_)  **Issue Links:** - #16931 VerifyError when trying to compile constructor invocation with SpEL  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bd7d56ac546b4ad0c2dad44b2317e7cc84b9aeae","closed","in: core,","spring-projects-issues","2014-09-29T07:47:56Z","2019-01-11T17:36:50Z"
"","17098","Maintain original ordering of active profiles in the TestContext framework [SPR-12492]","**[Jorge Rodríguez Pedrianes](https://jira.spring.io/secure/ViewProfile.jspa?name=jrpedrianes)** opened **[SPR-12492](https://jira.spring.io/browse/SPR-12492?redirect=false)** and commented  #### Status Quo  The Spring TestContext Framework does not maintain the original ordering of active profiles declared via `@ActiveProfiles`. The reason for this is that the active profiles are used as part of the _key_ for the context cache.  The following is an excerpt from the inline documentation for `MergedContextConfiguration.processActiveProfiles()`:  > Active profiles must be unique and sorted in order to support proper cache key generation. Specifically, profile sets {foo,bar} and {bar,foo} must both result in the same array (e.g., [bar,foo]).  However, there are use cases for which the original ordering should be maintained. For example, Spring Boot's `ConfigFileApplicationListener` loads configuration files for active profiles in the order returned by `org.springframework.core.env.Environment.getActiveProfiles()`, with the assumption that the ordering matches the order in which the developer declared the active profiles.  #### Proposal  Maintain the original ordering of the active profiles declared via `@ActiveProfiles` so that profile-specific configuration files in Spring Boot can be overwritten with the expected semantics.  #### Analysis  The `resolveActiveProfiles()` method in `ActiveProfilesUtils` uses a `HashSet` to build up the set of the active profiles. A useful alternative would be to use a `LinkedHashSet` instead of a `HashSet`. Furthermore, `MergedContextConfiguration.processActiveProfiles()` sorts the active profiles alphabetically, therefore losing the original ordering.  ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/68a704373dfcc3438eabb98f0767aed9cec4f95b","closed","type: enhancement,","spring-projects-issues","2014-12-02T03:02:29Z","2019-01-13T20:57:58Z"
"","17048","BeanMethodInterceptor doesn't forward user-provided arguments to getBean(name, args) [SPR-12443]","**[Jorge Mozzino](https://jira.spring.io/secure/ViewProfile.jspa?name=xp500)** opened **[SPR-12443](https://jira.spring.io/browse/SPR-12443?redirect=false)** and commented  Calling a prototype bean factory method with parameters ignores the parameters because they aren't passed to the getBean() call. If beans of the specified parameters' type exist then Spring will inject them into the prototype Bean. However, if they don't then a BeanCreationException will be thrown.  The following test reproduces the issue.  ``` public class ConfigurationClassWithPrototypeFactoryWithArgumentsTest {  	@Test 	public void test() { 		ApplicationContext ctx = new AnnotationConfigApplicationContext(Config.class); 		ctx.getBean(FooFactory.class).createFoo(new Bar()); 	} 	 	@Configuration 	static class Config {  		@Bean 		@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) 		public Foo foo(final Bar bar) { 			return new Foo(bar); 		}  		@Bean 		public FooFactory fooFactory() { 			return new FooFactory() { 				@Override 				public Foo createFoo(final Bar bar) { 					return foo(bar); 				} 			}; 		} 	} 	 	static class Bar {}  	static class Foo { 		Foo(Bar bar) {} 	}  	static abstract class FooFactory { 		abstract Foo createFoo(Bar bar); 	} } ```  I have this issue fixed and can submit a pull request.  ---  **Affects:** 4.1.2  **Issue Links:** - #17094 SPR-12443 breaks Spring Security's AuthenticationConfiguration - #18460 Regression: SPR-12443 breaks singleton bean references within a configuration class with null arguments  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4bd75e4146ace622b9224b661766289148996ed2","closed","type: enhancement,","spring-projects-issues","2014-11-15T12:43:43Z","2019-01-11T19:28:31Z"
"","16984","PropertyDescriptor in PropertyValue needs to be transient to avoid serialization failure [SPR-12377]","**[jongmin moon](https://jira.spring.io/secure/ViewProfile.jspa?name=jmmoon)** opened **[SPR-12377](https://jira.spring.io/browse/SPR-12377?redirect=false)** and commented  org.springframework.beans.PropertyValue is Serializable and has a member PropertyDescriptor. Even though threre is little possible to have a Exception when serialization and deSerialization because the access modifier of PropertyDescriptor is defualt, PropertyDescriptor needs to be transient.  1) Case 1    create a PropertyValue Object. then set resolvedDescriptor in the org.springframework.beans package.    then try to serialize value object.  ```   PropertyValue value = new PropertyValue(""a"", ""b""); value.resolvedDescriptor = new PropertyDescriptor(""serializable"", PropertyValueTests.class); ```  in this case PropertyDescriptor is not a Serializable class, when writeObject(value) is called, Exception occurs like below as you know.  java.io.NotSerializableException: java.beans.PropertyDescriptor at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1184) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) ...  2) Case 2    For avoiding serialization failure, make SubPropertyDescriptor which is serializable.  ```   PropertyValue value = new PropertyValue(""a"", ""b""); value.resolvedDescriptor = new SubPropertyDescriptor(""serializable"", PropertyValueTests.class); ```  ``` SubPropertyDescriptor.java  	public class SubPropertyDescriptor extends PropertyDescriptor implements Serializable {  		public SubPropertyDescriptor(String propertyName, Class beanClass) 				throws IntrospectionException { 			super(propertyName, beanClass); 		}  		public SubPropertyDescriptor() throws IntrospectionException { 			// There is no-args constructor in the PropertyDescriptor. 			super(""serializable"", PropertyValueTests.class); 		}  	} ```  in this case SubPropertyDescriptor is a Serializable class, so serialization is successful. But when ObjectInputStream.readObject is called for deSerialization, Exception occurs like below as you know because the parent class PropertyDescriptor does not have no-args default constructor.  java.io.InvalidClassException: org.springframework.beans.PropertyValueTests$SubPropertyDescriptor; no valid constructor at java.io.ObjectStreamClass$ExceptionInfo.newInvalidClassException(ObjectStreamClass.java:150) at java.io.ObjectStreamClass.checkDeserialize(ObjectStreamClass.java:768) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1775) ...  So, I think the filed PropertyDescriptor in the org.springframework.beans.PropertyValue needs to be transient. I attach a my test code file.   ---  **Affects:** 4.1.1  **Attachments:** - [PropertyValueTests.java](https://jira.spring.io/secure/attachment/22343/PropertyValueTests.java) (_3.64 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a13bb69cbe36e41eaa31c346eed6b1db69200593","closed","type: enhancement,","spring-projects-issues","2014-10-25T16:05:30Z","2014-11-17T06:42:21Z"
"","16969","org.springframework.core.task.AsyncListenableTaskExecutor's submitListenable method need to be overloaded. [SPR-12364]","**[jongmin moon](https://jira.spring.io/secure/ViewProfile.jspa?name=jmmoon)** opened **[SPR-12364](https://jira.spring.io/browse/SPR-12364?redirect=false)** and commented  org.springframework.core.task.AsyncListenableTaskExecutor has  submitListenable(Callable\) method. This return ListenableFuture object after ListenableFutureTask.execute(ListenableFutureTask future). As Juergen Hoeller mentioned in the #16963(https://jira.spring.io/i#browse/SPR-12358), if the async task has already been fully executed at the time of the addCallback call, Spring's ListenableFutureCallbackRegistry is executing the callback in the caller's thread since the async thread can't be used for it anymore. So I think AsyncListenableTaskExecutor is needed to be improved in order to add callback before ListenableFutureTask.execute(ListenableFutureTask future) method is called.  ---  **Affects:** 4.1.1  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/673  2 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-10-22T22:21:31Z","2019-01-12T00:18:32Z"
"","16451","Unsubscribing from an endpoint that no longer exists throws NPE [SPR-11832]","**[Jon Schneider](https://jira.spring.io/secure/ViewProfile.jspa?name=jkschneider)** opened **[SPR-11832](https://jira.spring.io/browse/SPR-11832?redirect=false)** and commented  Exception in thread ""clientInboundChannel-4"" java.lang.NullPointerException at java.util.concurrent.ConcurrentHashMap.hash(ConcurrentHashMap.java:332) at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:987) at org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionSubscriptionInfo.getSubscriptions(DefaultSubscriptionRegistry.java:315) at org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.removeSubscriptionInternal(DefaultSubscriptionRegistry.java:98) at org.springframework.messaging.simp.broker.AbstractSubscriptionRegistry.unregisterSubscription(AbstractSubscriptionRegistry.java:97) at org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.handleMessageInternal(SimpleBrokerMessageHandler.java:154) at org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.handleMessage(AbstractBrokerMessageHandler.java:171) at org.springframework.messaging.support.ExecutorSubscribableChannel$1.run(ExecutorSubscribableChannel.java:70) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:722)  ---  **Affects:** 4.0.5  **Issue Links:** - #16457 The NullPointerException occur when stomp client unsubscribing (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5a8e470ede922249eae77154666829a3fec2bf52, https://github.com/spring-projects/spring-framework/commit/e50507206f8255d622f0434dc16d541856bcb239","closed","type: bug,","spring-projects-issues","2014-05-29T08:51:50Z","2019-01-11T22:19:25Z"
"","16426","StringUtils.parseLocaleString: locale variant cannot contain country code [SPR-11806]","**[John Olmstead](https://jira.spring.io/secure/ViewProfile.jspa?name=olmstead)** opened **[SPR-11806](https://jira.spring.io/browse/SPR-11806?redirect=false)** and commented  The StringUtils.parseLocaleString method fails to correctly parse the variant if the variant contains the same characters as the country code.  This is due to the fact that the lastIndexOf the country code is used as the dividing point instead of the first indexOf.  Here is the test to add to org.springframework.util.StringUtilsTest:  ``` public void testParseLocaleWithVarientContainingCountryCode() throws Exception {     final String variant = ""GBtest"";     final String localeString = ""en_GB_"" + variant;     Locale locale = StringUtils.parseLocaleString(localeString);     assertEquals(""Variant containing country code not extracted correctly."", variant, locale.getVariant()); } ```    ---  **Affects:** 3.2.8, 4.0.4  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","in: core,","spring-projects-issues","2014-05-19T12:34:58Z","2014-05-20T08:05:02Z"
"","16633","RestTemplate with InputStreamResource does not work if Content-Length is not set [SPR-12017]","**[John Mark](https://jira.spring.io/secure/ViewProfile.jspa?name=springiscool)** opened **[SPR-12017](https://jira.spring.io/browse/SPR-12017?redirect=false)** and commented  When using an InputStreamResource to upload a file for example  ``` ... MultiValueMap postData = new LinkedMultiValueMap(); postData.add(""param"", ""something""); postData.add(""file"", new InputStreamResource(in));  restTemplate.postForObject(url, postData, String.class); ```  This causes a strange exception to be thrown: IllegalStateException: InputStream has already been read....  Looking through the code it appears that what is occurring is when AbstractResource.contentLength() is called, it actually reads the entire InputStream.  This makes it impossible to use InputStreamResource without defining the Content-Length header.  It would be nice if this were not the case.  Or if this is required for some reason, at least it should be documented so other people don't have to waste time debugging like I had to.  ---  **Affects:** 3.2.10, 4.0.6  **Issue Links:** - #20990 Consistent treatment of InputStreamResource subclasses - #18023 Read large data using InputStreamResource at ResourceHttpMessageConverter - #18147 resttemplate multipart post with InputStreamResource not working  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e14aad884060f7e3ae12b43d85d6ee2e5e7fe358, https://github.com/spring-projects/spring-framework/commit/5342d92db7cb328cb244d9b905f9ee2538b07c68, https://github.com/spring-projects/spring-framework/commit/f0bcb773f9117195ef39acc3b4077c9f41d8afa0  **Backported to:** [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-07-21T13:29:40Z","2019-01-11T18:21:45Z"
"","16607","Property placeholder does not always fail when resource not found [SPR-11991]","**[John Mark](https://jira.spring.io/secure/ViewProfile.jspa?name=springiscool)** opened **[SPR-11991](https://jira.spring.io/browse/SPR-11991?redirect=false)** and commented  When using a property-placeholder, if the location used uses `classpath*:` then it will not fail if the resource cannot be found.  What ends up happening is that the first bean that has a property will fail with an error about resolving a placeholder.  This is quite confusing since the real issue is that the location could not be resolved.  property-placeholder should honor ignore-resource-not-found in all cases, including when using `classpath*:`   ---  **Affects:** 3.2.9, 4.0.6","closed","status: declined,","spring-projects-issues","2014-07-14T10:19:27Z","2019-01-12T16:34:47Z"
"","17022","ShallowEtagHeaderFilter is not Servlet 2.5 compatible [SPR-12414]","**[Johannes Graham](https://jira.spring.io/secure/ViewProfile.jspa?name=j3graham)** opened **[SPR-12414](https://jira.spring.io/browse/SPR-12414?redirect=false)** and commented  org.springframework.web.filter.ShallowEtagHeaderFilter calls javax.servlet.http.HttpServletResponse.getHeader, which was added in Servlet 3.0  Stack Trace:  ``` java.lang.NoSuchMethodError: javax.servlet.http.HttpServletResponse.getHeader(Ljava/lang/String;)Ljava/lang/String;         at org.springframework.web.filter.ShallowEtagHeaderFilter.isEligibleForEtag(ShallowEtagHeaderFilter.java:153) ~[spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]         at org.springframework.web.filter.ShallowEtagHeaderFilter.updateResponse(ShallowEtagHeaderFilter.java:102) ~[spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]         at org.springframework.web.filter.ShallowEtagHeaderFilter.doFilterInternal(ShallowEtagHeaderFilter.java:84) ~[spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]         at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:112) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE] ```  ---  **Affects:** 4.0.7, 4.1.1  **Issue Links:** - #15736 ShallowEtagHeaderFilter should not set ETags to non-cached resources  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1823ce1fadd726eff5d67540068b0f8713bbc183, https://github.com/spring-projects/spring-framework/commit/bf9295bec38b80b82b9aaca3e6ea8a9496aca5c5  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","type: bug,","spring-projects-issues","2014-11-06T13:17:47Z","2019-01-11T19:30:56Z"
"","16367","Make Environment play together with Groovy [SPR-11745]","**[Johann Burkard](https://jira.spring.io/secure/ViewProfile.jspa?name=johann%20burkard)** opened **[SPR-11745](https://jira.spring.io/browse/SPR-11745?redirect=false)** and commented  Currently  ``` Environment env ... env['foo'] ```  doesn't work in Groovy. Which is a bit odd since Environment implements a `getProperty` method. Now I have to write  ``` env.getProperty('foo') ```  which is not very Groovy.   ---  **Affects:** 4.0.3","open","type: enhancement,","spring-projects-issues","2014-04-29T13:29:02Z","2016-01-20T21:02:05Z"
"","16365","CharacterEditor should parse numbers to Character [SPR-11743]","**[Johann Burkard](https://jira.spring.io/secure/ViewProfile.jspa?name=johann%20burkard)** opened **[SPR-11743](https://jira.spring.io/browse/SPR-11743?redirect=false)** and commented  While working with Spring Boot, I configured socket ports in my configuration like this:  ``` proxy.socks.port=5000 ```  To avoid potential errors, I wanted to use a Character to restrict the port range:  ``` @Value('${proxy.socks.port}') Character proxySOCKSPort ```  But got:  ``` Caused by: java.lang.IllegalArgumentException: String [64] with length 2 cannot be converted to char type 	at org.springframework.beans.propertyeditors.CharacterEditor.setAsText(CharacterEditor.java:86) ```  Instead of  ``` else if (text.length() != 1) {      throw new IllegalArgumentException(""String ["" + text + ""] with length "" +                    text.length() + "" cannot be converted to char type""); } ```  why not something like this  ``` else if (text.length() != 1) {               if (StringUtils.isNumeric(text)) {                   int parsed = Integer.parseInt(text, 10);                   if (parsed >= Character.MIN_VALUE && parsed","closed","status: bulk-closed,","spring-projects-issues","2014-04-27T04:04:27Z","2019-01-12T00:19:53Z"
"","17150","Spring MVC concurrency issue with shared PropertyEditor instances [SPR-12547]","**[Joe Dunne](https://jira.spring.io/secure/ViewProfile.jspa?name=joe.j.dunne@gmail.com)** opened **[SPR-12547](https://jira.spring.io/browse/SPR-12547?redirect=false)** and commented  I seem to have found a threading issue in the Spring MVC code. When a lot of concurrent requests are hitting a web service sometimes the path variable set via the annotation is actually the variable from a different thread.  My controller method is as follows.  `@RequestMapping`(value = ""/testWebService/{index}"", method = RequestMethod.GET, produces = {MediaType.APPLICATION_JSON_VALUE}) `@ResponseBody` public String testWebService(`@PathVariable` Integer index, HttpServletRequest request) { String uri = request.getRequestURI(); if (!uri.endsWith(""/""+index)) { return ""FAIL""; } return ""PASS""; } Hitting this method with 500 requests and 10 threads, each with a different index value will cause the error condition.  Doing a little digging, it seems that the issue is in the org.springframework.beans.TypeConverterDelegate class. The PropertyEditor class used in the doConvertValue method is a singleton that keeps state. When I wrap the method in a synchronized block the failure never occurs.  For now I have fixed the bug by adding two synchronized blocks to the doCovertValue method in the TypeConverterDelegate class as follows.  private Object doConvertValue(Object oldValue, Object newValue, Class requiredType, PropertyEditor editor) { Object convertedValue = newValue;      if (editor != null && !(convertedValue instanceof String)) {         // insert synchronized block to make thread safe         synchronized (editor) {             // Not a String -> use PropertyEditor's setValue.             // With standard PropertyEditors, this will return the very same object;             // we just want to allow special PropertyEditors to override setValue             // for type conversion from non-String values to the required type.             try {                 editor.setValue(convertedValue);                 Object newConvertedValue = editor.getValue();                 if (newConvertedValue != convertedValue) {                     convertedValue = newConvertedValue;                     // Reset PropertyEditor: It already did a proper conversion.                     // Don't use it again for a setAsText call.                     editor = null;                 }             }             catch (Exception ex) {                 if (logger.isDebugEnabled()) {                     logger.debug(""PropertyEditor ["" + editor.getClass().getName() + ""] does not support setValue call"", ex);                 }                 // Swallow and proceed.             }         }     }          Object returnValue = convertedValue;          if (requiredType != null && !requiredType.isArray() && convertedValue instanceof String[]) {         // Convert String array to a comma-separated String.         // Only applies if no PropertyEditor converted the String array before.         // The CSV String will be passed into a PropertyEditor's setAsText method, if any.         if (logger.isTraceEnabled()) {             logger.trace(""Converting String array to comma-delimited String ["" + convertedValue + ""]"");         }         convertedValue = StringUtils.arrayToCommaDelimitedString((String[]) convertedValue);     }          if (convertedValue instanceof String) {         if (editor != null) {             // insert synchronized block to make thread safe             synchronized (editor) {                 // Use PropertyEditor's setAsText in case of a String value.                 if (logger.isTraceEnabled()) {                     logger.trace(""Converting String to ["" + requiredType + ""] using property editor ["" + editor + ""]"");                 }                 String newTextValue = (String) convertedValue;                 return doConvertTextValue(oldValue, newTextValue, editor);             }         }         else if (String.class.equals(requiredType)) {             returnValue = convertedValue;         }     }          return returnValue;  }   ---  **Affects:** 4.1.3  0 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-12-15T14:25:40Z","2019-01-12T03:30:58Z"
"","16518","JDK 8 support for Spring 2.5.x [SPR-11899]","**[Jocelyn N'TAKPE](https://jira.spring.io/secure/ViewProfile.jspa?name=xetyk31)** opened **[SPR-11899](https://jira.spring.io/browse/SPR-11899?redirect=false)** and commented  I know Spring 2.X is no longer supported but is it possible to release a new version supporting JDK 1.8.  ``` static {      javaVersion = System.getProperty(""java.version"");      // version String should look like ""1.4.2_10""      if (javaVersion.indexOf(""1.7."") != -1) {           majorJavaVersion = JAVA_17;      }      else if (javaVersion.indexOf(""1.6."") != -1) {           majorJavaVersion = JAVA_16;      }      else if (javaVersion.indexOf(""1.5."") != -1) {           majorJavaVersion = JAVA_15;      }      else {           // else leave 1.4 as default (it's either 1.4 or unknown)           majorJavaVersion = JAVA_14;      } } ```    --- No further details from [SPR-11899](https://jira.spring.io/browse/SPR-11899?redirect=false)","closed","type: enhancement,","spring-projects-issues","2014-06-23T08:26:40Z","2017-06-08T14:57:20Z"
"","17024","SockJsClient does not stop transports on invocation of stop() [SPR-12417]","**[Joakim Örtbrant](https://jira.spring.io/secure/ViewProfile.jspa?name=joakim.ortbrant)** opened **[SPR-12417](https://jira.spring.io/browse/SPR-12417?redirect=false)** and commented  Implementation of stop() method in SockJsClient will never actually do anything since first condition: if (!isRunning()) is always false. Please remove negation and change to: if (isRunning())   ---  **Affects:** 4.1.1","closed","type: bug,","spring-projects-issues","2014-11-07T04:44:38Z","2014-11-17T06:42:27Z"
"","16716","Update Apache HttpComponents to 4.3.5  - CVE-2014-3577: Apache HttpComponents client: Hostname verification susceptible to MITM attack [SPR-12100]","**[JimK](https://jira.spring.io/secure/ViewProfile.jspa?name=riversidecoder)** opened **[SPR-12100](https://jira.spring.io/browse/SPR-12100?redirect=false)** and commented  Security Advisory - Apache Software Foundation Apache HttpComponents / hc.apache.org             Hostname verification susceptible to MITM attack                             CVE-2014-3577 / CVSS 1.4  Apache HttpComponents (prior to revision 4.3.5/4.0.2) may be susceptible to a 'Man in the Middle Attack' due to a flaw in the default hostname verification during SSL/TLS when a specially crafted server side certificate is used.  Background  - ----------  During an SSL connection (https) the client verifies the hostname in the URL against the hostname as encoded in the servers certificate (CN, subjectAlt fields). This is to ensure that the client connects to the 'real' server, as opposed to something in middle (man in the middle) that may compromise end to end confidentiality and integrity.   ---  **Affects:** 3.2.11, 4.0.6  **Reference URL:** http://mail-archives.apache.org/mod_mbox/www-announce/201408.mbox/CVE-2014-3577  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5cd1e6aff4c39f28dd8c55064bc24c46e8eded1b, https://github.com/spring-projects/spring-framework/commit/fb452fad7cb9ad529290a5e9ef7b78801459b5ae  **Backported to:** [4.0.7](https://github.com/spring-projects/spring-framework/milestone/119?closed=1)","closed","type: task,","spring-projects-issues","2014-08-19T11:21:39Z","2014-09-04T01:31:47Z"
"","16719","spring-aspects compilation Errors [SPR-12103]","**[jiehan](https://jira.spring.io/secure/ViewProfile.jspa?name=java1026)** opened **[SPR-12103](https://jira.spring.io/browse/SPR-12103?redirect=false)** and commented  spring-aspects compilation Errors  hey,it's my first time try to build spring source code from github and it's a little hard for me. when i use gradle jar ,the problems come out. E:\source\spring-framework\spring-aspects\src\main\java\org\springframework\cac e\aspectj\AspectJCachingConfiguration.java:40: 错误: 找不到符号 public AnnotationCacheAspect cacheAspect() { ^ 符号:   类 AnnotationCacheAspect 位置: 类 AspectJCachingConfiguration E:\source\spring-framework\spring-aspects\src\main\java\org\springframework\cac e\aspectj\AspectJJCacheConfiguration.java:41: 错误: 找不到符号 public JCacheCacheAspect cacheAspect() { ^ 符号:   类 JCacheCacheAspect 位置: 类 AspectJJCacheConfiguration E:\source\spring-framework\spring-aspects\src\main\java\org\springframework\con ext\annotation\aspectj\SpringConfiguredConfiguration.java:19: 错误: 找不到符号 import org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect      ^  符号:   类 AnnotationBeanConfigurerAspect 位置: 程序包 org.springframework.beans.factory.aspectj E:\source\spring-framework\spring-aspects\src\main\java\org\springframework\con ext\annotation\aspectj\SpringConfiguredConfiguration.java:47: 错误: 找不到符号 public AnnotationBeanConfigurerAspect beanConfigurerAspect() { ^ 符号:   类 AnnotationBeanConfigurerAspect 位置: 类 SpringConfiguredConfiguration E:\source\spring-framework\spring-aspects\src\main\java\org\springframework\sch duling\aspectj\AspectJAsyncConfiguration.java:42: 错误: 找不到符号 public AnnotationAsyncExecutionAspect asyncAdvisor() { ^ 符号:   类 AnnotationAsyncExecutionAspect 位置: 类 AspectJAsyncConfiguration E:\source\spring-framework\spring-aspects\src\main\java\org\springframework\tra saction\aspectj\AspectJTransactionManagementConfiguration.java:42: 错误: 找不到 符号 public AnnotationTransactionAspect transactionAspect() { ^ 符号:   类 AnnotationTransactionAspect 位置: 类 AspectJTransactionManagementConfiguration E:\source\spring-framework\spring-aspects\src\main\java\org\springframework\cac e\aspectj\AspectJCachingConfiguration.java:36: 警告: [rawtypes] 找到原始类型: A stractCachingConfiguration public class AspectJCachingConfiguration extends AbstractCachingConfiguration { ^ 缺少泛型类AbstractCachingConfiguration\的类型参数 其中, C是类型变量: C扩展已在类 AbstractCachingConfiguration中声明的CachingConfigurer E:\source\spring-framework\spring-aspects\src\main\java\org\springframework\cac e\aspectj\AspectJCachingConfiguration.java:41: 错误: 找不到符号 AnnotationCacheAspect cacheAspect = AnnotationCacheAspect.aspec Of(); ^ 符号:   类 AnnotationCacheAspect 位置: 类 AspectJCachingConfiguration E:\source\spring-framework\spring-aspects\src\main\java\org\springframework\cac e\aspectj\AspectJCachingConfiguration.java:41: 错误: 找不到符号 AnnotationCacheAspect cacheAspect = AnnotationCacheAspect.aspec Of(); ^ 符号:   变量 AnnotationCacheAspect 位置: 类 AspectJCachingConfiguration E:\source\spring-framework\spring-aspects\src\main\java\org\springframework\cac e\aspectj\AspectJJCacheConfiguration.java:42: 错误: 找不到符号 JCacheCacheAspect cacheAspect = JCacheCacheAspect.aspectOf(); ^ 符号:   类 JCacheCacheAspect 位置: 类 AspectJJCacheConfiguration E:\source\spring-framework\spring-aspects\src\main\java\org\springframework\cac e\aspectj\AspectJJCacheConfiguration.java:42: 错误: 找不到符号 JCacheCacheAspect cacheAspect = JCacheCacheAspect.aspectOf(); ^ 符号:   变量 JCacheCacheAspect 位置: 类 AspectJJCacheConfiguration E:\source\spring-framework\spring-aspects\src\main\java\org\springframework\con ext\annotation\aspectj\SpringConfiguredConfiguration.java:48: 错误: 找不到符号 return AnnotationBeanConfigurerAspect.aspectOf(); ^ 符号:   变量 AnnotationBeanConfigurerAspect 位置: 类 SpringConfiguredConfiguration E:\source\spring-framework\spring-aspects\src\main\java\org\springframework\sch duling\aspectj\AspectJAsyncConfiguration.java:43: 错误: 找不到符号 AnnotationAsyncExecutionAspect asyncAspect = AnnotationAsyncExe utionAspect.aspectOf(); ^ 符号:   类 AnnotationAsyncExecutionAspect 位置: 类 AspectJAsyncConfiguration E:\source\spring-framework\spring-aspects\src\main\java\org\springframework\sch duling\aspectj\AspectJAsyncConfiguration.java:43: 错误: 找不到符号 AnnotationAsyncExecutionAspect asyncAspect = AnnotationAsyncExe utionAspect.aspectOf(); ^ 符号:   变量 AnnotationAsyncExecutionAspect 位置: 类 AspectJAsyncConfiguration E:\source\spring-framework\spring-aspects\src\main\java\org\springframework\tra saction\aspectj\AspectJTransactionManagementConfiguration.java:43: 错误: 找不到 符号 AnnotationTransactionAspect txAspect = AnnotationTransactionAsp ct.aspectOf(); ^ 符号:   类 AnnotationTransactionAspect 位置: 类 AspectJTransactionManagementConfiguration E:\source\spring-framework\spring-aspects\src\main\java\org\springframework\tra saction\aspectj\AspectJTransactionManagementConfiguration.java:43: 错误: 找不到 符号 AnnotationTransactionAspect txAspect = AnnotationTransactionAsp ct.aspectOf(); ^ 符号:   变量 AnnotationTransactionAspect 位置: 类 AspectJTransactionManagementConfiguration 15 个错误 1 个警告 :spring-aspects:compileJava FAILED  FAILURE: Build failed with an exception.  * What went wrong:   Execution failed for task ':spring-aspects:compileJava'.  > Compilation failed; see the compiler error output for details.    ---  **Affects:** 4.1 RC2  **Reference URL:** https://github.com/spring-projects/spring-framework/tree/v4.1.0.RC2","closed","status: invalid,","spring-projects-issues","2014-08-19T18:52:25Z","2019-11-10T19:26:08Z"
"","17165","JDBC Connetion will not be managed by Spring(like mybatis or hibernate) [SPR-12564]","**[jerryscott2014](https://jira.spring.io/secure/ViewProfile.jspa?name=jerry2014)** opened **[SPR-12564](https://jira.spring.io/browse/SPR-12564?redirect=false)** and commented  Hi, spring team. 1. when integration with mybatis (with mybatis-spring), it seems that the transaction does not make any sense which I could leave any use message.  2. From the reference URL,it might be the spring transaction should do some improvement.    2.1  My configuration:    2.1  I have some appContext (like parent and sub context), the parent context(suppose it to be ""appContext_channel.xml"")is like this (others omitted  ```xml       ```      2.2  the appContext_dao.xml  like this:  ```xml             		 		 			 				 				 			 		 		 		 	  	 	 		 		 	  	 	 		 	  	 	 		 		 	  	 		 	  	 	 		 		 	  	 	  	  	 	 ```  2.3. then  I use com class as the `@Configuration` defined to start the appContext_channel like this:  ```java @ImportResource({ ""classpath:appContext_channel.xml"" }) @EnableReactor @MapperScan(basePackages = { ""com.zjht.channel.platform.mapper"" }) @ComponentScan(basePackages = { ""com.zjht.channel.platform.service"" }) @Configuration @Import({ ChannelEnvConfiguration.class }) public class ChannelPlatformConfiguration {    //omitted } ```  3. from 2.3. the configuration or main class is located in package ""com.zjht.channel.platform.service"""". and it would call the component-scan    annotation to complete the reference under such package. but to my surprise, the transaction does not bind the spring transaction itself. while tracing the code to `DataSourceUtils.isConnectionTransactional()`  such    method called and returned false. so the mybatis spring transaction bind process is fail like this:  ``` 2014-12-22 11:37:59.810 DEBUG [main] o.m.s.SqlSessionUtils [SqlSessionUtils.java:104] Creating a new SqlSession 2014-12-22 11:37:59.857 DEBUG [main] o.m.s.SqlSessionUtils [SqlSessionUtils.java:140] SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@1e3e097] was not registered for synchronization because synchronization is not active 2014-12-22 11:38:00.185 DEBUG [main] c.z.c.p.m.ChannelAppServiceMapper [LoggingCache.java:62] Cache Hit Ratio [com.zjht.channel.platform.mapper.ChannelAppServiceMapper]: 0.0 2014-12-22 11:38:00.248 DEBUG [main] o.m.s.t.SpringManagedTransaction [SpringManagedTransaction.java:86] JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1aa85ab] will not be managed by Spring ```  4. conclusion:    4.1 I use AnnotationConfigApplicationContext with the configuration class(listed above) to start the appContext (the subContext defined the transaction support)--- with  enabled     4.2  the class with `@Configuration` also use the `@ComponentScan` to scan the annotation under the package to complete the bean initialization     4.3  I use the `@Transactional(""transactionManager"") `  marked in the service for mapper(the mybatis mapper interface) calling like this:    {```java    `@Service`    `@Transactional`(""transactionManager"")    public class ChannelAppServiceCfgCreateImpl extends DefaultChannelAppServiceCfgCreateImpl {    `@Autowired`    private ChannelAppConfigMapper channelAppConfigMapper;     `@Autowired`    private ChannelAppServiceMapper channelAppServiceMapper;     `@Autowired`    private ChannelTerminalServiceMapper channelTerminalServiceMapper;         //omitted  }  ```  after the calling completed, the debug log showed that the transaction of spring was not active.      5. suggestion:     5.1 the way to start appContext listed above is very common with parent appContext (with resources import )and sub-appContext (like mvc or dao configuration)       5.2  could spring provide further support for transaction (with annotation enhancement)  for those bean with `@Service` or `@Controller` under componet-scan enabled.  we found it was hard to locate where the problem just like why the transaction does not effect for the configuration listed like  `` has been marked. but in fact I could not  make the service around transaction.  so would spring team add such for enhancement ,once those marked with @Transactional  as the sub-appContext defined and with component-scan, spring should make sure of the calling around the service should be under transaction. ```    ---  **Reference URL:** http://jinnianshilongnian.iteye.com/blog/1850432  **Attachments:** - [channelserver.log](https://jira.spring.io/secure/attachment/22440/channelserver.log) (_1.56 kB_) - [TestMybatis.7z](https://jira.spring.io/secure/attachment/22446/TestMybatis.7z) (_4.65 MB_)","closed","status: bulk-closed,","spring-projects-issues","2014-12-21T22:12:40Z","2021-02-05T11:19:02Z"
"","16601","FreeMarker bind macro should obtain each field value once only [SPR-11985]","**[Jerry Neal](https://jira.spring.io/secure/ViewProfile.jspa?name=jkneal)** opened **[SPR-11985](https://jira.spring.io/browse/SPR-11985?redirect=false)** and commented  Using the Freemarker bind macro causes a property value to be retrieved twice (in most cases). This is coming from the following lines in BindStatus (119-126):  this.objectErrors = this.errors.getFieldErrors(this.expression); this.value = this.errors.getFieldValue(this.expression); this.valueType = this.errors.getFieldType(this.expression); if (this.errors instanceof BindingResult) { this.bindingResult = (BindingResult) this.errors; this.actualValue = this.bindingResult.getRawFieldValue(this.expression); this.editor = this.bindingResult.findEditor(this.expression, null); }  Calling this.errors.getFieldValue will invoke getPropertyValue on the bean wrapper if there are no errors present. So this gets the value the first time. Then this.bindingResult.getRawFieldValue(this.expression); invokes getPropertyValue on the bean wrapper again.  This is inefficient and impacts performance when there are a large number of properties. In addition, our application has additional logic around property get/set that we do not want to run twice for each field.   ---  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-07-11T07:27:08Z","2019-01-12T02:29:00Z"
"","16444","StompSubProtocolHandler eventPublisher being cleared by SubProtocolWebSocketHandler [SPR-11825]","**[Jeffrey Barrus](https://jira.spring.io/secure/ViewProfile.jspa?name=jeffrey.barrus)** opened **[SPR-11825](https://jira.spring.io/browse/SPR-11825?redirect=false)** and commented  I am trying to subscribe to SessionConnectEvent but found that it is never published.  After stepping through code, I found that the StompSubProtocolHandler ends up with null for eventPublisher after context initialization.  It looks like when SubProtoocolWebSocketHandler is initialized, setProtocolHandlers is called before setApplicationEventPublisher.  This results in the StompSubProtocolHandler getting its eventPublisher set to null.  See line 137 in SubProtocolWebSocketHandler.java  ```java if (handler instanceof ApplicationEventPublisherAware) {      ((ApplicationEventPublisherAware) handler).setApplicationEventPublisher(this.eventPublisher); } ```    ---  **Affects:** 4.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e9ecaf6f4ab6f84cac91e115a3946724e431007f, https://github.com/spring-projects/spring-framework/commit/0dddb6f3e19377cb397f0396e85734df2c19c2b6","closed","type: bug,","spring-projects-issues","2014-05-27T10:00:20Z","2014-07-08T00:21:28Z"
"","16804","Bean's type is changed unexpectedly when Spring AOP is used [SPR-12190]","**[Jeff Fang](https://jira.spring.io/secure/ViewProfile.jspa?name=fangji.jeff)** opened **[SPR-12190](https://jira.spring.io/browse/SPR-12190?redirect=false)** and commented  When a bean whose class type implements an interface is intercepted by a Spring AOP, the bean is not the original bean class type, but is the JDK proxy class which implements the bean's interface.  For example, we define an ICalculatorService interface, and an IntensiveCalculatorService class implementing the ICalculatorService interface. And we define an intensiveCalculatorService bean with the IntensiveCalculatorService class in the spring configuraiton file, and intercept the IntensiveCalculatorService.calculator method with spring AOP.  The unexpected thing occurs. We cannot cast the ""intensiveCalculatorService"" bean to an IntensiveCalculatorService class object, though the bean defined as IntensiveCalculatorService class, because it actually is not an object of IntensiveCalculatorService class, but is JDK proxy object which implements ICalculatorService interface.  Let's imagine the scenario, a developer A only defined the intensiveCalculatorService bean, and cast the bean to a IntensiveCalculatorService type . It's definitely correct because there is no AOP defined. But the developer A's coworker B want to intercept the IntensiveCalculatorService.calcualtor to do something before the caculator. He defined the AOP aspect in the spring configuration file. The original code of using IntensiveCalculatorService type bean throwed ClassCastException.  The severity thing is that developer A and B have no sense of the exception happening.  **Though we could use proxy-target-class=""true"" to force the use of CGLib proxy to solve the problem, I think it needs improvement in spring AOP. Bean's type is changed unexpectedly when Spring AOP is used without proxy-target-class property set. Maybe there are some conerns to try the JDK original proxy mechanism first, and avoid depending the thirdparty lib. At least I think the issue needs enhancement to warn users the unexpected behavior of bean's type being changed.**  The code is below:      package com.performance.service;     public interface ICalculatorService {        public void calculator(int count);     }          package com.performance.service;     public class IntensiveCalculatorService implements ICalculatorService     {        public String type = ""intensive"";               public void testObjectSelfMethod(){             System. out.println(""This is IntensiveCalculatorService Self Method"");        }             public void calculator(int count){             System. out.println(""intensive calculator"");         }     }  The Spring configuration file is below:                                                                                             The following code will throw ClassCastException in the runtime.      IntensiveCalculatorService intensiveCalculatorService = (IntensiveCalculatorService)context.getBean(""intensiveCalculatorService"" );  Exception in thread ""main"" java.lang.ClassCastException: $Proxy0 cannot be cast to com.performance.service.IntensiveCalculatorService at com.performance.main.ApplicationMain.main(ApplicationMain.java:20)  ---  **Issue Links:** - #8346 Add support for mixed, fine-grained JDK- and CGLIB-based proxying","closed","status: bulk-closed,","spring-projects-issues","2014-09-14T08:33:44Z","2019-01-12T00:19:08Z"
"","16603","SPR Task [SPR-11987]","**[Jeewantha Samaraweera](https://jira.spring.io/secure/ViewProfile.jspa?name=jeewantha)** opened **[SPR-11987](https://jira.spring.io/browse/SPR-11987?redirect=false)** and commented   --- No further details from [SPR-11987](https://jira.spring.io/browse/SPR-11987?redirect=false)","closed","status: invalid,","spring-projects-issues","2014-07-14T00:10:48Z","2019-01-12T05:25:39Z"
"","17144","Configured RequestConfig in HttpClient gets overwritten by default [SPR-12540]","**[Jean-Pierre Bergamin](https://jira.spring.io/secure/ViewProfile.jspa?name=ractive)** opened **[SPR-12540](https://jira.spring.io/browse/SPR-12540?redirect=false)** and commented  `HttpComponentsClientHttpRequestFactory.createRequest` always sets the `HttpClientContext.REQUEST_CONFIG` attribute of the `HttpContext` - also with a default config if none can be found.  The `HttpClientBuilder` on the other hand allows to set a default `RequestConfig` with:  ``` RequestConfig requestConfig = RequestConfig.custom()         .setCookieSpec(NO_SPEC_PROVIDER)         .build();   HttpClient httpClient = HttpClientBuilder.create().         ....         setDefaultRequestConfig(requestConfig).         ...		         build(); ```  The returned `InternalHttpClient` by the builder later sets this configured default `requestConfig` if no other request config has been set:  ``` private void setupContext(final HttpClientContext context) {     ....     if (context.getAttribute(HttpClientContext.REQUEST_CONFIG) == null) {         context.setAttribute(HttpClientContext.REQUEST_CONFIG, this.defaultConfig);     } } ```  But since a default `RequestConfig` has been set in `HttpComponentsClientHttpRequestFactory.createRequest`, it is not applied here and the configured RequestConfig in the HttpClientBuilder is not used.  As a workaround you have to create your own `HttpComponentsClientHttpRequestFactory` implementation and overwrite `createHttpContext` to return a configured `HttpContext` like:  ``` public class StatefullHttpComponentsClientHttpRequestFactory extends HttpComponentsClientHttpRequestFactory {     private final HttpContext httpContext;      public StatefullHttpComponentsClientHttpRequestFactory(HttpClient httpClient, HttpContext httpContext)     {         super(httpClient);         this.httpContext = httpContext;     }      @Override     protected HttpContext createHttpContext(HttpMethod httpMethod, URI uri)     {         return this.httpContext;     } }  HttpContext context = new BasicHttpContext(); context.setAttribute(HttpClientContext.REQUEST_CONFIG, requestConfig);  ClientHttpRequestFactory requestFactory = new ContextAwareHttpComponentsClientHttpRequestFactory(httpClient, context));  RestOperations restClient = new RestTemplate(requestFactory); ```  Conclusion: Do not set a default `RequestConfig` in `HttpComponentsClientHttpRequestFactory` if the http client is of instance `InternalHttpClient` and therefore configured by the HttpClientBuilder.  ---  **Issue Links:** - #16940 When using HttpComponentsClientHttpRequestFactory, setting a proxy through RequestConfig should not be ignored (_**""duplicates""**_) - #15739 Upgrade HttpComponentsHttpInvokerRequestExecutor to require Apache HttpComponents 4.3 - #17184 Merge default request config with local customizations - #16780 HttpComponentsClientHttpRequestFactory does not set connection request timeout on request config - #17716 HttpComponentsAsyncClientHttpRequestFactory overrides default request config of httpclient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/71783c5d86205c5e7820eaca02338c55ae33ea13, https://github.com/spring-projects/spring-framework/commit/5236eb6b63f1b76463779faaa5963b61ab5492a4  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2014-12-12T03:15:26Z","2019-01-11T18:28:09Z"
"","16803","Scheduled/JmsListenerAnnotationBeanPostProcessor needlessly scans every scoped instance [SPR-12189]","**[Jean-Baptiste Nizet](https://jira.spring.io/secure/ViewProfile.jspa?name=jnizet)** opened **[SPR-12189](https://jira.spring.io/browse/SPR-12189?redirect=false)** and commented  ScheduledAnnotationBeanPostProcessor scans the methods of all the beans created by Spring for `@Scheduled` annotations. But this also includes, in a web application, all the request- and session-scoped beans, created long after the context has been started and the tasks have been scheduled. It thus has two implications: - if a Scheduled annotation is placed on a request-scoped bean (stupid, I know), a new Runnable is created at each request, referencing the request-scoped bean, and placed in a list of the registrar, which causes a big memory leak - several classes are needlessly scanned at each request for nothing if request-scoped beans are used in the application, consituting a loss of performance, that grows with the number of request-scoped beans used.  A flag could be set to true as soon as afterSingletonsInstantiated() has been called, and the postProcessAfterInitialization() method would do nothing if this flag is set.  ---  **Affects:** 3.2.11, 4.0.7, 4.1 GA  **Issue Links:** - #17306 `@Scheduled` no longer works in case of multiple proxied target classes implementing the same interface - #16830 ScheduledAnnotationBeanPostProcessor should unregister tasks on destruction of individual beans - #19741 Scheduled/JmsListenerAnnotationBeanPostProcessor free heap space  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/58b22ceddc0758d98af272b07888485373f5afa7, https://github.com/spring-projects/spring-framework/commit/37da70629f68b07d83d5c57abb74cecb7ecb358b, https://github.com/spring-projects/spring-framework/commit/d2e8b7e6ee1372703c8e4eab9c2173b3eaaaa5f3  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-09-13T09:25:36Z","2019-01-13T05:45:02Z"
"","16662","can not build 3.2.x [SPR-12046]","**[Jason Tsai](https://jira.spring.io/secure/ViewProfile.jspa?name=caihaibo)** opened **[SPR-12046](https://jira.spring.io/browse/SPR-12046?redirect=false)** and commented  Hey there, it's my first time try to build SpringFrameWork source code from Github and it's a little hard for me. When I use 'gradlew build', the problems come out. The first problem is : What went wrong: Execution failed for task ':spring-aspects:compileJava'. [error] The type java.lang.CharSequence cannot be resolved. It is indirectly referenced from required .class files [error] The import java.util.Arrays cannot be resolved BTW, I use JDK8 and WIN7 64bit. I have found a solution here about this problem. Just use 'gradlew check -x :spring-aspects:check'. But I really like to know what's wrong. After this one, it failed at oxm test.Here is the report: 1)JibxMarshallerTests org.jibx.runtime.JiBXException: Unable to access binding 'binding' Make sure classes generated by the binding compiler are available at runtime Caused by: java.lang.ClassNotFoundException: org.springframework.oxm.jibx.JiBX_bindingFactory 2)JibxUnmarshallerTests org.jibx.runtime.JiBXException: Unable to access binding information for class org.springframework.oxm.jibx.Flights Make sure the binding has been compiled Caused by: java.lang.NoSuchFieldException: JiBX_bindingList I've searched the jira and found this https://github.com/spring-projects/spring-framework/pull/59 But it didn't work. Can anyone give a hand?   ---  **Affects:** 3.2.10  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/59","closed","in: core,","spring-projects-issues","2014-07-30T02:00:35Z","2019-01-12T05:25:32Z"
"","16648","@InitBinder without modelattribute and @InitBinder with modelattribute call order unspecified [SPR-12032]","**[Jarrod Cuzens](https://jira.spring.io/secure/ViewProfile.jspa?name=jcuzens)** opened **[SPR-12032](https://jira.spring.io/browse/SPR-12032?redirect=false)** and commented  When there are multiple `@InitBinder` attributes the order in which they are invoked is not deterministic. This can be a problem when you use setAllowedFields and you have an `@InitBinder` without specifying a modelattribute/command object in addition to an `@InitBinder` that does specify a model attribute command object.  For example:  ```java @InitBinder( ""someAttribute"" ) public void initBinder1( WebDataBinder binder, WebRequest request ) {      binder.setAllowedFIelds( ""field1"", ""field2"" ); }  @InitBinder public void initBinder2( WebDataBinder binder, WebRequest request ) {      binder.setAllowedFIelds( ""field3"", ""field4"" ); } ```  In the above scenario it is possible that initBinder2 will be called either before or after the initBinder1 (this is because the reflection of methods in java has an unspecified order). In the event that initBinder2 is called after initBinder1 the allowed fields would be field3 and field4 whereas if initBinder1 is called first then field1 and field2 would be allowed fields.  The obvious workaround is that if you are going to use setAllowedFields you should specify a modelattribute/command object for each `@InitBinder`. However, it would probably be wise to document this behavior since it can certainly lead to confusion.  Another solution could be to force the order of the `@InitBinder` methods such that the ""default"" binder (in this case initBinder2) is always called before an init binder that must bind directly to a modelattribute/command object. This behavior would seem to make the most logical sense.   ---  **Affects:** 3.1.4","closed","status: bulk-closed,","spring-projects-issues","2014-07-25T08:46:19Z","2019-01-12T02:28:46Z"
"","17148","AbstractApplicationEventMulticaster ""lost"" application listener [SPR-12545]","**[Jaroslav Beran](https://jira.spring.io/secure/ViewProfile.jspa?name=jaroslavberan)** opened **[SPR-12545](https://jira.spring.io/browse/SPR-12545?redirect=false)** and commented  All versions younger then 3.2.8  are affected.  There is synchronization bug.  The cache ""retrieverCache"" is being cleared within synchronized blocks at methods: public void addApplicationListener(ApplicationListener listener) public void addApplicationListenerBean(String listenerBeanName) public void removeApplicationListener(ApplicationListener listener) public void removeApplicationListenerBean(String listenerBeanName) public void removeAllListeners() The application listeners (defaultRetriever.applicationListeners and defaultRetriever.applicationListenerBeans) are modified there as well.  But at the method: protected Collection\ getApplicationListeners(ApplicationEvent event) the access is different. There is only one synchronized block where the copy of listeners is created. After the synchronized block the algorithm works with the copy of list of listeners. If the thread context is switched after the synchronized block and new listener is added than this one is never added to ""retrieverCache"" and of course the new listener is not fired because the new listener is added only to list of listeners of defaultRetriever.  The situation description (in detail): - there is the source component which periodically multicasts the event, - some component has already registered application listener (listenerA) for the event and this one is correctly fired   and the component receives the event (the ""retrieverCache"" contains at least the record for this listenerA, - another component registers its new application listener (listenerB) at runtime, what happened:   - the method addApplicationListener(ApplicationListener listener) is invoked, new listener (listenerB) is added and the ""retrieverCache"" is cleared, - the source component multicasts the event, what happend:   - because the ""retrieverCache"" is clear (this.retrieverCache.get(cacheKey) is null at line148 and the ""else"" branch is processed) and new record is being prepared,     at ""synchronized block"" the copy of current listeners is created (there are at least two listeners for our components - listenerA and listenerB),   - during the ""synchronized block"" another component (another thread) is registering its new listener (listenerC)     and the method addApplicationListener(ApplicationListener listener) is blocked because of ""synchonized"",   - when the ""synchronized block"" (at ""else"" branch) is left, thread context is switched and new listenerC is added and cache is cleared, when the thread context is switched back the algorithm works with old list of listeners and the new one (listenerC) is not included to the copy of listeners (""retrieverCache"" is still empty),     at the end of the algorithm the ""retriever"" contains only two listeners listenerA and listenerB, BUT NOT listenerC.     The ""retriever"" is put to ""retrieverCache"" and if the source component multicasts the event the listenerC IS NOT fired.  Solution (or guick fix): - remaining algorithm must be included to synchronized block (the getApplicationListeners(ApplicationEvent event) method snippet):    if (retriever != null) {   return retriever.getApplicationListeners();   }   else {   retriever = new ListenerRetriever(true);   LinkedList\ allListeners = new LinkedList\();   Set\ listeners;   Set\ listenerBeans;   synchronized (this.defaultRetriever) {   listeners = new LinkedHashSet\(this.defaultRetriever.applicationListeners);   listenerBeans = new LinkedHashSet\(this.defaultRetriever.applicationListenerBeans);          for (ApplicationListener listener : listeners) {           if (supportsEvent(listener, eventType, sourceType)) {             retriever.applicationListeners.add(listener);             allListeners.add(listener);           }         }         if (!listenerBeans.isEmpty()) {           BeanFactory beanFactory = getBeanFactory();           for (String listenerBeanName : listenerBeans) {             ApplicationListener listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class);             if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {               retriever.applicationListenerBeans.add(listenerBeanName);               allListeners.add(listener);             }           }         }         OrderComparator.sort(allListeners);         if (this.beanClassLoader == null ||             (ClassUtils.isCacheSafe(eventType, this.beanClassLoader) &&                 (sourceType == null || ClassUtils.isCacheSafe(sourceType, this.beanClassLoader)))) {           this.retrieverCache.put(cacheKey, retriever);         }       }       return allListeners;    }  ---  **Affects:** 3.2.9, 4.1.3  **Issue Links:** - #17336 Deadlock publishing event while creating listener bean  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1), [3.2.13](https://github.com/spring-projects/spring-framework/milestone/101?closed=1)","closed","in: core,","spring-projects-issues","2014-12-15T01:02:02Z","2019-01-11T18:28:22Z"
"","17052","spring-aspects produces still some aspectj compiler warnings ""adviceDidNotMatch""  [SPR-12447]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-12447](https://jira.spring.io/browse/SPR-12447?redirect=false)** and commented  See #16853  ---  **Affects:** 4.1.2  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/694  **Issue Links:** - #16853 spring-aspects produces aspectj compiler warnings ""adviceDidNotMatch""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e7c577fd0870bf60b14d5efe86147190252b15bc, https://github.com/spring-projects/spring-framework/commit/061b2463070e4a2150012d47e5a650bc5ef851ca","closed","in: core,","spring-projects-issues","2014-11-17T07:26:02Z","2019-01-14T05:14:16Z"
"","16886","Failure to insert version in full path URLs within CSS file [SPR-12281]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-12281](https://jira.spring.io/browse/SPR-12281?redirect=false)** and commented  I have a resourceHandlerMapping with ""/assets/**"" I have CSS Resource like with:  ```css a { background-image: url(../img/transparent.png); } span { background-image: url(/assets/img/transparent.png); } ```  The first Url gets resolved by CssLinkResourceTransformer, the second doesn't get resolved. Result is to have a content hash in the first url but not the second one.  ```css a {background-image: url(../img/dropdown-a672b5...84a221f.png); } span { background-image: url(/assets/img/transparent.png); } ```  This is because the second url starts with ""/"" and a different method is used. ResourceUrlProvider.getForRequestUrl is used for urls starting with a slash.  in getForRequestUrl the lookupPath is determined as ""img/transparent.png"" without a slash at the beginning of the string.  This lookupPath ""img/transparent.png"" is compared to the mapping ""/assets/**"".  Maybe I didn't understand this new feature. But for me it doesn't work with URLs starting with a slash in CSS. If you need more information I am willing to help with a test case. But I hope you do understand the problem so far.  This is not related to issue #16884 as I already had fixed it locally by adding a ResourceUrlProviderExposingInterceptor to my ResourceHandlerMapping.  ---  **Affects:** 4.1 GA  **Issue Links:** - #16937 ResourceUrlEncodingFilter fails to look up full path when Spring Security is enabled  1 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2014-10-01T03:18:21Z","2019-01-11T17:36:19Z"
"","16884","ResourceUrlProviderExposingInterceptor not set on the resourceHandlerMapping [SPR-12279]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-12279](https://jira.spring.io/browse/SPR-12279?redirect=false)** and commented  ResourceTransformerSupport in the method findResourceUrlProvider (line 90) is trying to get the resourceUrlProvider from a request attribute.  This request attribute should be set by ResourceUrlProviderExposingInterceptor. The Interceptor should be ""configured by default in the MVC"". But this is not always the case.  The ""resourceHandlerMapping"" itself is not configured with such an interceptor (line 371 in WebMvcConfigurationSupport)  Adding this line after line 378 would fix it: ((SimpleUrlHandlerMapping) handlerMapping).setInterceptors(getInterceptors());  The access is need to resolve Url Path in transforming Css Ressources.    ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2df03d6316ce982528f5c8258dd2eb2aff47f9ba","closed","type: bug,","spring-projects-issues","2014-10-01T02:09:59Z","2014-11-17T06:42:20Z"
"","16853","spring-aspects produces aspectj compiler warnings ""adviceDidNotMatch"" [SPR-12239]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-12239](https://jira.spring.io/browse/SPR-12239?redirect=false)** and commented  I was adding spring-aspects to use `@Transactional` with compile time weaving. With STS the AJDT eclipse module produces a warning like  org.springframework.mock.staticmock.AbstractMethodMockingControl has not been applied [Xlint:adviceDidNotMatch]  All advices in the spring-aspects lib should have `@SuppressAjWarning` Some already have like AbstractTransactionAspect in line 59  ---  **Affects:** 4.1 GA  **Issue Links:** - #17052 spring-aspects produces still some aspectj compiler warnings ""adviceDidNotMatch""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/439ea9020517303500a7bb2ace52623aab50faaa, https://github.com/spring-projects/spring-framework/commit/6950d5517b71508e421d1bc12573d2f96d40407f","closed","in: core,","spring-projects-issues","2014-09-23T04:02:17Z","2019-01-14T05:14:53Z"
"","16791","Race condition in ReloadableResourceBundleMessageSource since 4.1.0 [SPR-12177]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-12177](https://jira.spring.io/browse/SPR-12177?redirect=false)** and commented  This bug is not in 4.1.0.RC2 but in 4.1.0.RELEASE  I think it is a blocker as this class is at the core of spring, widely used and produces unexpected results which crashes the application completely:  We are using ReloadableResourceBundleMessageSource with cacheMillis = -1 in production. We use this class to have a reloadable instance in development mode.  There is a race condition when getMergedProperties(Locale locale) is called.  It results in an empty but cached propertiesHolder. Imagine two threads calling getMergedProperties(Locale locale). The first thread is running into getProperties(filename) Line 354. it then runs into line 464:  propHolder = new PropertiesHolder(); PropertiesHolder existingHolder = this.cachedProperties.putIfAbsent(filename, propHolder);  so thread 1 is setting an empty PropertiesHolder into the cache. Imagine thread 1 is waiting here for a long time and a second thread is running into this method. It will find the empty propHolder in line 453 and it get returned in line 460. Now thread 2 goes on with this empty propHolder but it does not put it into mergedProperties (line  355).  But in line 360 the second thread is putting his mergedholder into the cache. Now thread 1 continues but will not update the cache as an entry already exists. Subsequent threads  will get the mergedHolder from the cache which is partially empty (depending on how often this race condition occurs).  I was able to reproduce this bug on my development engine with breakpoints. I think you need to fix line 464-465.  This else thread is only running on start up. A fix would be to add this line after line 464:  propHolder = refreshProperties(filename, propHolder);  I hope I explained it good enough.  ---  **Affects:** 4.1 GA  **Issue Links:** - #19152 Method getMergedProperties in ReloadableResourceBundleMessageSource does not set fileTimestamp  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/40cd277b7e26e135de71b80bec757b2022641815  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2014-09-11T03:44:12Z","2019-01-11T17:19:58Z"
"","16743","Autowire bean in @Configuration class itself [SPR-12127]","**[Janne Valkealahti](https://jira.spring.io/secure/ViewProfile.jspa?name=jvalkeal)** opened **[SPR-12127](https://jira.spring.io/browse/SPR-12127?redirect=false)** and commented  While updating SHDP to 4.1.RC2 I noticed some changed behaviour in autowiring. Short story is that I autowired list of beans in `@Configuration` class and had one default bean(""defaultGridProjectionFactory) in a same class. This was done to allow user to replace/add these GridProjectionFactory beans. This worked up to 4.1.RC1/4.0.5 and broke with 4.1.RC2. Below is a diff showing how I fixed it in YarnAppmasterAutoConfiguration.  https://github.com/spring-projects/spring-hadoop/commit/427aaebee8bb7530845ae246eb7676b759f1f049#diff-2  I was a bit amazed that having bean defined in a `@Configuration` class which would be autowired in that same `@Configuration` actually worked. Anyway, it's all good from our side but just wanted to give heads up if this change wasn't intentional in core. You can zap this jira if it works as planned.  ---  **Affects:** 4.1 RC2  **Issue Links:** - #16634 Spring may invoke `@Bean` methods too early in case of a circular reference - #17247 `@Autowired` List into Configuration that defines `@Bean` ToAutoWire fails - #16620 Non-stable BeanCurrentlyInCreationException with wrong Java config","closed","status: declined,","spring-projects-issues","2014-08-27T01:51:17Z","2019-01-13T05:45:24Z"
"","16999","Regression:  location attribute does not resolve parameters in #{param} format [SPR-12391]","**[Jan Šimek](https://jira.spring.io/secure/ViewProfile.jspa?name=jan.simek@etnetera.cz)** opened **[SPR-12391](https://jira.spring.io/browse/SPR-12391?redirect=false)** and commented  In attached context file is used    It works in version 4.0.7, in 4.1.1 it doesn't, location does not resolve.  ---  **Affects:** 4.1.1  **Attachments:** - [context.xml](https://jira.spring.io/secure/attachment/22350/context.xml) (_808 bytes_)  **Issue Links:** - #17088  tag doesn't let Spring EL translate script in location attribute (_**""is duplicated by""**_) - #15242 Support ignoreResourceNotFound as attribute of util:properties  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/01382b8ff0d5efe86d185fb3e8a07a23c6a195ed, https://github.com/spring-projects/spring-framework/commit/8e5c77dc1191432d8a9e0109beb4e9d3f925e8d2","closed","type: bug,","spring-projects-issues","2014-10-29T09:05:35Z","2019-01-11T19:23:42Z"
"","16436","StandardPortletEnvironment is not properly populated [SPR-11816]","**[Jan Bumbala](https://jira.spring.io/secure/ViewProfile.jspa?name=jbumbala)** opened **[SPR-11816](https://jira.spring.io/browse/SPR-11816?redirect=false)** and commented  It seems to me, that `org.springframework.web.portlet.context.StandardPortletEnvironment` is never populated with portlet's init parameters (`init-param` elements in `portlet.xml`). There are two property sources defined in the `StandardPortletEnvironment`: 'portletContextInitParams' and 'portletConfigInitParams'. The javadoc says:  > The property sources are added as stubs for now, and will be fully initialized once the actual PortletConfig, PortletContext, and ServletContext objects are available.  But that never happens. Both property sources are initialized in `PortletApplicationContextUtils#initPortletPropertySources()`, but this method is never called. Or, to be precise, it is called from `StaticPortletApplicationContext` which is not intended for production use.  The missing part is some initialization callback. Having a look in the `org.springframework.web.context.support.StandardServletEnvironment`, there is `initPropertySources()` method (defined in the `ConfigurableWebEnvironment` interface) which does the thing and which is called during application context initialization. I thing something like this is missing in the portlet subsystem.   ---  **Affects:** 3.2.5  **Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)","closed","type: bug,","spring-projects-issues","2014-05-25T11:35:09Z","2014-07-08T00:21:26Z"
"","16631","AbstractMessageListenerContainer#doExecuteListener can cause a dropped message if using CLIENT_ACKNOWLEDGE and the container is stopped and subsequently started again. [SPR-12015]","**[James Reitz](https://jira.spring.io/secure/ViewProfile.jspa?name=jereitz)** opened **[SPR-12015](https://jira.spring.io/browse/SPR-12015?redirect=false)** and commented  This probably affects much later versions of Spring as well, but I haven't confirmed it yet (looks that way from comparing this class with the 4.0.4 release).  1. configure your listener container for CLIENT_ACKNOWLEDGE acknoledgement mode, and CACHE_CONSUMER level caching. 2. use a shared JMS connection (may not be required) 3. call stop() on the DMLC when the listener container is in a javax.jms.MessageConsumer#receive() call.    * If the receive() call returns with a message, the AbstractMessageLIstenerContainer#doExecuteListener() method will not process the message.  It will throw a MessageRejectedWhileStoppingException which is quietly ignored. 4. Now call start() The next message from the JMS destination is received and if processed successfully, is acknowledged.  This acknowledges all previously received messages...including the one that was rejected.  Thus, the rejected message is never redelivered, even though it was never processed.  It seems like, when rejecting the message, recover should be called on the JMS session.  This would cause the message to be redelivered.  A work-around is to call AbstractMessageListenerContainer#setAcceptMessagesWhileStopping(true);  which prevents the message from being initially rejected.  This problem was seen in a production application using Tibco, but I don't believe the problem is provider specific.  ---  **Affects:** 3.1.4  **Issue Links:** - #17644 Remoting over JMS with receiveTimeout blocks service forever - #17869 Doc: Clarify AUTO_ACKNOWLEDGE semantics with SimpleMessageListenerContainer  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/902303b44d1992390beb6a80c8883deb07c5c2ac, https://github.com/spring-projects/spring-framework/commit/7af1e002bd83ccca5d8edbb9ae1f23245844ab05, https://github.com/spring-projects/spring-framework/commit/c082220b34f31ca573ecda5b6f09af5821c45e7a  **Backported to:** [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)  4 votes, 3 watchers","closed","in: core,","spring-projects-issues","2014-07-21T09:17:59Z","2019-01-11T18:21:32Z"
"","16858","PropertySource overrides do not work with more than one classpath file [SPR-12244]","**[James Green](https://jira.spring.io/secure/ViewProfile.jspa?name=jmkgreen)** opened **[SPR-12244](https://jira.spring.io/browse/SPR-12244?redirect=false)** and commented  My colleague has been battling to make his application accept `@Value` values from a -Dserver.properties file.  Take the following gist: https://gist.github.com/jmkgreen/7dd07d28486b5620c741  A key x in myapp.properties with value 1 will be read in as 1.  Then add x in server.properties with value 2. This does not override.  Remove hibernate.properties and the override works.  He's now merging the two shipped property files into one to overcome this issue.  ---  **Affects:** 4.1 GA  **Issue Links:** - #16812 Unexpected override order for `@Configuration` based property sources","closed","in: core,","spring-projects-issues","2014-09-24T06:52:07Z","2019-01-13T05:44:41Z"
"","16388","[doc] Explain how SockJsServiceRegistration can Accept Relative URLs in setClientLibraryUrl Method [SPR-11766]","**[Jamal Washington](https://jira.spring.io/secure/ViewProfile.jspa?name=turick)** opened **[SPR-11766](https://jira.spring.io/browse/SPR-11766?redirect=false)** and commented  Simple request: my code base is shared between multiple developers, all who develop/deploy in different environments to different locations, and the code base gets deployed to production.  Currently when declaring a SockJsServiceRegistration in a JavaConfig class that extends from AbstractWebSocketMessageBrokerConfigurer, in order to support cookies in IE8 and 9, you must specify the path to the SockJS client library for the endpoint:  ```java SockJsServiceRegistration registration =     registry.addEndpoint(""/hello"").withSockJS()         .setClientLibraryUrl(""http://localhost:8084/webapp/js/sockjs-0.3.4.min.js""); ```  This code will need to be modified by every developer (or a properties file would need to be modified) each time they pull their code from svn and build/deploy.  Attempting to use a URL with a relative path results in 404 errors in IE.  It would be nice if you could simply define the location of the library relative to the current deploy path of the web app, so it works across all deployments:  ```java SockJsServiceRegistration registration =     registry.addEndpoint(""/hello"").withSockJS().setClientLibraryUrl(""js/sockjs-0.3.4.min.js""); ```    ---  **Affects:** 4.0.4  **Reference URL:** http://stackoverflow.com/questions/23495871/spring-4-abstractwebsocketmessagebrokerconfigurer-with-sockjs-not-negotiating-tr/","closed","type: task,","spring-projects-issues","2014-05-08T05:30:32Z","2014-07-18T10:16:44Z"
"","16674","MVC config should register custom arguments resolvers with default ExceptionHandlerExceptionResolver [SPR-12058]","**[Jakub Narloch](https://jira.spring.io/secure/ViewProfile.jspa?name=jnarloch)** opened **[SPR-12058](https://jira.spring.io/browse/SPR-12058?redirect=false)** and commented  Apparently the ExceptionHandlerExceptionResolver despite having the proper #setCustomArgumentResolvers does not register the arguments resolver that are being registered within web application through WebMvcConfigurerAdapters.  Whether this has been done for purpose, I think that this could be extended to allow additional argument resolutions in the error handling methods like for instance: https://jira.spring.io/browse/SEC-2696  ---  **Affects:** 4.0.6, 4.2.4  **Issue Links:** - [SEC-2696](https://jira.spring.io/browse/SEC-2696) Can not inject `@AuthenticationPrincipal` into `@ExceptionHandler` method. (_**""is duplicated by""**_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/615, and commits https://github.com/spring-projects/spring-framework/commit/1cf0fb8174972cd44122b905f763c81902300517","closed","type: enhancement,","spring-projects-issues","2014-08-02T08:49:51Z","2019-01-13T05:47:20Z"
"","16672","MockHttpServletRequest does not handle rfc formatted dates. [SPR-12056]","**[Jakub Narloch](https://jira.spring.io/secure/ViewProfile.jspa?name=jnarloch)** opened **[SPR-12056](https://jira.spring.io/browse/SPR-12056?redirect=false)** and commented  We have plug our REST client to work with the Spring MVC Test framework and we have noticied  that sending the ""IF-MODIFIED-SINCE"" header breaks the server side code. The MockHttpServletRequest#getDateHeader should be blamed for that.  Apparently the implementation assumes that the date would be passed in memory as a java.lang.Date or optionally as numeric representation. Unfortnunetlly that is not the case when you try to test the code with production-ready client.  I think that the implementation should be consistent as much possible with the expected behaviour so I propose to add additional support for the valid date format representations as described in: http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1  ---  **Issue Links:** - #16531 MockHttpServletResponse.setDateHeader does not perform date formatting (_**""duplicates""**_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/614","closed","type: enhancement,","spring-projects-issues","2014-08-01T11:58:06Z","2019-01-11T18:18:57Z"
"","16671","Shortcut method for building HEAD requests with MockMvcRequestBuilders [SPR-12055]","**[Jakub Narloch](https://jira.spring.io/secure/ViewProfile.jspa?name=jnarloch)** opened **[SPR-12055](https://jira.spring.io/browse/SPR-12055?redirect=false)** and commented  We  are using quite extensively the HEAD method in our API for verifying whether the resource does exists (similary to DATA REST: http://docs.spring.io/spring-data/rest/docs/2.1.2.RELEASE/reference/html/repository-resources.html#d5e159) and we noticed that the MockMvcRequestBuilders does not have an utility method for creating HEAD request similar tor GET, POST etc. Instead such request could be created using the #request method.  I think that adding additional #head method could be usefull and definetly would make the API concise and consistent.  I'm willing to prepare and submit a patch for this issue.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/613, and commits https://github.com/spring-projects/spring-framework/commit/a11b62540aa58d994dcadcbf3f9023f15b5d32b0","closed","type: enhancement,","spring-projects-issues","2014-08-01T11:20:56Z","2014-08-15T01:52:44Z"
"","16449","Configuration class implementing Provider interface throws StackOverflowError after upgrading to Java 7 [SPR-11830]","**[Jakub Bochenski](https://jira.spring.io/secure/ViewProfile.jspa?name=jbochenski)** opened **[SPR-11830](https://jira.spring.io/browse/SPR-11830?redirect=false)** and commented  Please see reference URL  ---  **Affects:** 3.2.1  **Reference URL:** https://stackoverflow.com/questions/23931742  **Issue Links:** - #14894 Periodic NoClassDefFoundError: FatalBeanException caused by StackOverFlowException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/31f2f2030768d44d632968f3af598153568c41e3","closed","in: core,","spring-projects-issues","2014-05-29T06:42:02Z","2019-01-11T22:19:20Z"
"","16981","Add an option to use include instead of forward mode in Tiles support [SPR-12374]","**[Ivo Leitão](https://jira.spring.io/secure/ViewProfile.jspa?name=ivo.leitao)** opened **[SPR-12374](https://jira.spring.io/browse/SPR-12374?redirect=false)** and commented  I've updated tiles version from 2.2.2 to 3.0.1 in my spring portlet mvc implementation deployed over weblogic. I currently have a workaround to address blank pages appearing on portlet content. The  solution is based in what is described in the reference URL. It involves applying:  ServletUtil.setForceInclude(request, true);  With this the problem was resolved. Is there any kind of similar solution for tiles3? In tiles3 i am facing the same situation and i can't find the ServletUtil class or any alternative to help me solve this problem.   ---  **Affects:** 4.1.1  **Reference URL:** http://forum.springsource.org/showthread.php?98961-Webflow-with-JSP-Tiles-Portlet-has-no-content/page2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cfa3d358d5836bcfaad1f6ce9287ccf78ad7740f","closed","type: enhancement,","spring-projects-issues","2014-10-24T08:02:52Z","2014-11-17T06:42:22Z"
"","16409","DefaultMessageListenerContainer hangs on shutdown [SPR-11787]","**[Ivo Leitão](https://jira.spring.io/secure/ViewProfile.jspa?name=ivo.leitao)** opened **[SPR-11787](https://jira.spring.io/browse/SPR-11787?redirect=false)** and commented  We are having an issue in our application in production when we try to make a deploy. When the weblogic (the application server that we are using) tries to stop the defaultmessagelistener container it hangs the process and we have to shutdown the server and restart it. From my understanding of the thread dump that I've attached it is hanging on the method org.springframework.jms.listener.DefaultMessageListenerContainer.doShutdown(DefaultMessageListenerContainer.java:543) but I don't know if i'm interpreting this right. We have recently updated the spring version and the previous versions (pre 4.0 I think but I'm not sure) didn't have this problem.  ---  **Affects:** 4.0.3, 4.2.4  **Attachments:** - [threadDump.txt](https://jira.spring.io/secure/attachment/22010/threadDump.txt) (_66.25 kB_)  **Issue Links:** - #16460 DefaultMessageListenerContainer#doShutdown hangs - #21128 Application Server Fail to Stop Application and server while stopping transactions with spring - #18774 DefaultMessageListenerContainer doesn't shutdown gracefully if long recovery interval is set","closed","in: core,","spring-projects-issues","2014-05-15T04:17:20Z","2019-01-11T21:14:40Z"
"","17091","Bug/feature in Spring MVC [SPR-12485]","**[Ivan Ursul](https://jira.spring.io/secure/ViewProfile.jspa?name=ivanursul)** opened **[SPR-12485](https://jira.spring.io/browse/SPR-12485?redirect=false)** and commented  I noticed a bug/feature in Spring MVC project. I attached url to github project, it's on spring boot, so it will be easy to import. Bug description: Please see org.ivanursul.spring.controller.UserController This class contains one method - getUsers, the url for this method is ""http://localhost:8080/spring-mvc-bugfeature/roles/1/users""  The bug/feature is that when I add roleId as path variable, it will appear in UserDto resource.  It's fine for me, but I need to be sure, that this feature will exist in future releases.   ---  **Affects:** 4.1.2  **Reference URL:** https://github.com/johnyUA/spring-mvc-bugfeature","closed","status: declined,","spring-projects-issues","2014-12-01T01:19:57Z","2019-01-12T16:34:32Z"
"","17170","Flash attributes not working with spaces in query parameters [SPR-12569]","**[Ivan Stojić](https://jira.spring.io/secure/ViewProfile.jspa?name=ivanzgb)** opened **[SPR-12569](https://jira.spring.io/browse/SPR-12569?redirect=false)** and commented  Flash attributes don't seem to be working when redirecting to a URL with query parameters which contain spaces (which get encoded as a '+' character), e.g. /test?param=hello+there .  I've created a simple Spring Boot (1.2.0) application which can be used to test this issue:  ```java @EnableAutoConfiguration @Controller public class DemoApplication {      @RequestMapping(""/"")     @ResponseBody     String hello(ModelMap model) {         String name = (String)model.getOrDefault(""name"", ""???"");         return ""Hello, "" + name + ""!"";     }      @RequestMapping(""/test1"") // OK     String test1(RedirectAttributes redir) {         redir.addFlashAttribute(""name"", ""World"");         return ""redirect:/"";     }      @RequestMapping(""/test2"") // OK     String test2(RedirectAttributes redir) {         redir.addFlashAttribute(""name"", ""World"");         return ""redirect:/?param=1"";     }      @RequestMapping(""/test3"") // NOT WORKING     String test3(RedirectAttributes redir) {         redir.addFlashAttribute(""name"", ""World"");         return ""redirect:/?param=1+2"";     }      @RequestMapping(""/test4"") // NOT WORKING     String test4(RedirectAttributes redir) {         redir.addFlashAttribute(""name"", ""World"");         redir.addAttribute(""param"", ""1 2"");         return ""redirect:/"";     }      public static void main(String[] args) {         SpringApplication.run(DemoApplication.class, args);     } } ```  ---  **Affects:** 4.1.3  **Issue Links:** - #16441 Unable to retrieve FlashMap when contains ""+""(half-space) in the request parameters (_**""is duplicated by""**_) - #17577 flash attributes not mapped from session to request scope when parameter value is url encoded (_**""is duplicated by""**_) - #14291 Flashmap matching logic fails when target params are encoded. - #16129 Unable to retrieve FlashMap when target parameters are encoded  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/3b66b101e179a3bc9c9c56850a9fa85cdefc0945, https://github.com/spring-projects/spring-framework-issues/commit/7cd70122a9a40a4fa9ab3ebdcd4568f14b268c99","closed","type: enhancement,","spring-projects-issues","2014-12-24T09:31:08Z","2019-01-11T18:26:19Z"
"","16487","SendToUser doesn't work if user destination prefix doesn't end with '/' [SPR-11868]","**[Ivan Chirkov](https://jira.spring.io/secure/ViewProfile.jspa?name=chrkv)** opened **[SPR-11868](https://jira.spring.io/browse/SPR-11868?redirect=false)** and commented  setUserDestinationPrefix in DefaultUserDestinationResolver adds ""/"" to the destinationPrefix if it doesn't end with it, but setUserDestinationPrefix in MessageBrokerRegistry and SimpMessagingTemplate doesn't which leads to checkDestination in DefaultUserDestinationResolver returning always false. I think that it would be right to add ""/"" everywhere.   ---  **Affects:** 4.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7a5b3c1eed58b3d4b3051a8f19509e02a74e2ba9","closed","type: bug,","spring-projects-issues","2014-06-11T03:52:14Z","2014-07-18T10:16:39Z"
"","17069","Not able to download spring-beans-3.0.xsd in one attempt. [SPR-12463]","**[Indraneel Dasgupta](https://jira.spring.io/secure/ViewProfile.jspa?name=indraneel.dasgupta)** opened **[SPR-12463](https://jira.spring.io/browse/SPR-12463?redirect=false)** and commented  It is loading the following xsds: http://www.springframework.org/schema/aop/spring-aop- 2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/security/spring-security-2.0.xsd=org/springframework/security/c onfig/spring-security-2.0.xsd, http://www.springframework.org/schema/security/spring-security-3.0.4.xsd=org/springframework/security/config/spring-security-3.0. 4.xsd, http://www.springframework.org/schema/security/spring-security.xsd=org/springframework/security/config/spring-security-3.0.4.xsd, http://www.springframew ork.org/schema/security/spring-security-3.0.3.xsd=org/springframework/security/config/spring-security-3.0.3.xsd, http://www.springframework.org/schema/security/ spring-security-2.0.4.xsd=org/springframework/security/config/spring-security-2.0.4.xsd, http://www.springframework.org/schema/aop/spring-aop-3.0.xsd=org/spring framework/aop/config/spring-aop-3.0.xsd, http://www.springframework.org/schema/aop/spring-aop-2.5.xsd=org/springframework/aop/config/spring-aop-2.5.xsd, http:// www.springframework.org/schema/security/spring-security-2.0.2.xsd=org/springframework/security/config/spring-security-2.0.2.xsd, http://www.springframework.org/ schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-3.0.xsd, http://www.springframework.org/schema/security/spring-security-2.0.1.xsd=org/spring framework/security/config/spring-security-2.0.1.xsd, http://www.springframework.org/schema/security/spring-security-3.0.xsd=org/springframework/security/config/ spring-security-3.0.xsd  BUT iit not able to load  spring-beans-3.0.xsd in one attempt   ---  **Affects:** 3.0 GA","closed","status: invalid,","spring-projects-issues","2014-11-23T23:18:31Z","2019-01-12T05:25:03Z"
"","16464","Add missing HandshakeInterceptor configuration to WebSocket config [SPR-11845]","**[Ilyes, Ben Hassen](https://jira.spring.io/secure/ViewProfile.jspa?name=ilyes.bh)** opened **[SPR-11845](https://jira.spring.io/browse/SPR-11845?redirect=false)** and commented  There is no way to set HandshakeInterceptors neither from Java configuration on the StompWebSocketEndpointRegistration nor in XML configuration of stomp-endpoint.   ---  **Affects:** 4.0 GA","closed","type: enhancement,","spring-projects-issues","2014-06-03T07:27:58Z","2014-07-18T10:16:29Z"
"","16602","Revise LinkedCaseInsensitiveMap towards standard Map.put() contract [SPR-11986]","**[Holger Krauth](https://jira.spring.io/secure/ViewProfile.jspa?name=hokra)** opened **[SPR-11986](https://jira.spring.io/browse/SPR-11986?redirect=false)** and commented  According to http://docs.oracle.com/javase/6/docs/api/java/util/Map.html#put%28K,%20V%29  > If the map previously contained a mapping for the key, the old value is replaced by the specified value.  and  > Returns: > the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key, if the implementation supports null values.)  After my affection with version v3.1.1. I check the main trunk https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java line 90  ```java public V put(String key, V value) {      String oldKey = this.caseInsensitiveKeys.put(convertKey(key), key);      if (oldKey != null && !oldKey.equals(key)) {           super.remove(oldKey);        }      return super.put(key, value);  } ```  where still key casing is replaced even though converted key is already known and already contained key is removed instead only it's value is updated.  In my opinion you need something like the following. This code is **not tested** and I have not checked other impact like putAll() etc.  ```java public V put(String key, V value) {      String knownKey = this.caseInsensitiveKeys.get(convertKey(key));       if (knownKey == null) {           this.caseInsensitiveKeys.put(convertKey(key), key);           knownKey = key;      }      return super.put(knownKey, value); } ```  **edit:** here is an alternative code suggestion (if you find better readable). And now I won't touch any more.  ```java public V put(String key, V value) {      final String converted = convertKey(key);      if (!this.caseInsensitiveKeys.containsKey(converted)) {           this.caseInsensitiveKeys.put(converted, key);      }      return super.put(this.caseInsensitiveKeys.get(converted), value); } ```    ---  **Affects:** 4.0.6","closed","status: bulk-closed,","spring-projects-issues","2014-07-11T08:00:09Z","2019-01-12T02:28:57Z"
"","17124","Add DEBUG/INFO logging in AbstractBeanFactory.registerScope() [SPR-12519]","**[Hendy Irawan](https://jira.spring.io/secure/ViewProfile.jspa?name=ceefour)** opened **[SPR-12519](https://jira.spring.io/browse/SPR-12519?redirect=false)** and commented  To aid debugging `CustomScopeConfigurer` issues like https://github.com/spring-projects/spring-boot/issues/2082 and similar, it'd be helpful to add logging as follows:  1. `DEBUG` when a non-existing scope is registered, e.g. `Registering scope ""[scopeName]"" using [scope.getClass().getName()] to [beanFactory]` 2. `INFO` when an existing scope is replaced, e.g. `Replacing scope ""[scopeName]"" ([originalScope.getClass().getName()]) with  [scope.getClass().getName()] to [beanFactory]`    ---  **Affects:** 4.1.2  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/2082  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6d6cd56d4a4e59158de6a366933f181cc7bf3de1","closed","type: enhancement,","spring-projects-issues","2014-12-07T22:03:50Z","2014-12-30T05:21:46Z"
"","17100","Add UriComponentsBuilder.clone() [SPR-12494]","**[Hendy Irawan](https://jira.spring.io/secure/ViewProfile.jspa?name=ceefour)** opened **[SPR-12494](https://jira.spring.io/browse/SPR-12494?redirect=false)** and commented  In Spring MVC it's possible to inject `UriComponentsBuilder` into a `@RestController` method, making building links convenient.  However, when crafting a hypermedia response, there needs to be many links, some of them may refer to different places.  Calling `.replacePath()` (or any method) will mutate the `UriComponentsBuilder`, rendering it somewhat useless for next invocations. Also, it's impossible to start ""clean"" (from state of injection).  Please add `clone()` so it's easy for this use case.   ---  **Affects:** 4.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/189ec757890c104a5f332580badbaead314433db","closed","type: enhancement,","spring-projects-issues","2014-12-02T04:17:47Z","2014-12-09T02:49:31Z"
"","17066","PersistenceAnnotationBeanPostProcessor.findPersistenceMetadata(PersistenceAnnotationBeanPostProcessor.java:392) too aggressive, resulting in NoClassDefFoundError [SPR-12461]","**[Hendy Irawan](https://jira.spring.io/secure/ViewProfile.jspa?name=ceefour)** opened **[SPR-12461](https://jira.spring.io/browse/SPR-12461?redirect=false)** and commented  `org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findPersistenceMetadata()` prevented application startup during its scanning phase, because of a missing related class. Which should be ignored.  ``` 2014-11-21 20:39:39,043 20056 [main] WARN  org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext - Exception encountered during context initialization - cancelling refresh attempt org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatEmbeddedServletContainerFactory' defined in class org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat: Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: Lorg/springframework/boot/context/embedded/Ssl; 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:135) [spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:476) [spring-context-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java) [spring-context-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120) [spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691) [spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:320) [spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:142) [spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at com.quikdo.hub.app.HubApplication.main(HubApplication.java:55) [classes/:na] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_20] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_20] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_20] 	at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0_20] 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134) [idea_rt.jar:na] Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatEmbeddedServletContainerFactory' defined in class org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat: Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: Lorg/springframework/boot/context/embedded/Ssl; 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:547) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getEmbeddedServletContainerFactory(EmbeddedWebApplicationContext.java:195) [spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:158) [spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:132) [spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	... 12 common frames omitted Caused by: java.lang.NoClassDefFoundError: Lorg/springframework/boot/context/embedded/Ssl; 	at java.lang.Class.getDeclaredFields0(Native Method) ~[na:1.8.0_20] 	at java.lang.Class.privateGetDeclaredFields(Class.java:2570) ~[na:1.8.0_20] 	at java.lang.Class.getDeclaredFields(Class.java:1903) ~[na:1.8.0_20] 	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findPersistenceMetadata(PersistenceAnnotationBeanPostProcessor.java:392) ~[spring-orm-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(PersistenceAnnotationBeanPostProcessor.java:332) ~[spring-orm-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyMergedBeanDefinitionPostProcessors(AbstractAutowireCapableBeanFactory.java:909) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:512) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:470) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1073) [spring-context-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.getCustomizers(EmbeddedServletContainerCustomizerBeanPostProcessor.java:74) ~[spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.postProcessBeforeInitialization(EmbeddedServletContainerCustomizerBeanPostProcessor.java:66) ~[spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.postProcessBeforeInitialization(EmbeddedServletContainerCustomizerBeanPostProcessor.java:54) ~[spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:407) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1546) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	... 20 common frames omitted Caused by: java.lang.ClassNotFoundException: org.springframework.boot.context.embedded.Ssl 	at java.net.URLClassLoader$1.run(URLClassLoader.java:372) ~[na:1.8.0_20] 	at java.net.URLClassLoader$1.run(URLClassLoader.java:361) ~[na:1.8.0_20] 	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_20] 	at java.net.URLClassLoader.findClass(URLClassLoader.java:360) ~[na:1.8.0_20] 	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_20] 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308) ~[na:1.8.0_20] 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_20] 	... 40 common frames omitted 2014-11-21 20:39:39,122 20135 [main] INFO  org.springframework.boot.logging.ClasspathLoggingApplicationListener - Application failed to start with classpath: [file:/usr/lib/jvm/java-8-oracle/jre/lib/deploy.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/javaws.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/charsets.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/resources.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/jfr.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/management-agent.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/plugin.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/jfxswt.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/jsse.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/ext/zipfs.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/ext/sunec.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/ext/localedata.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/ext/nashorn.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/ext/jfxrt.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/ext/cldrdata.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/ext/dnsns.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/ext/sunpkcs11.jar, file:/usr/lib/jvm/java-8-oracle/jre/lib/ext/sunjce_provider.jar, file:/home/ceefour/git/quikdo-hub/hub.app/target/classes/, file:/home/ceefour/git/quikdo-hub/core/target/classes/, file:/home/ceefour/git/soluvas-framework/email/target/classes/, file:/data/m2_repository/com/github/spullara/mustache/java/compiler/0.8.14/compiler-0.8.14.jar, file:/data/m2_repository/org/apache/commons/commons-email/1.3.2/commons-email-1.3.2.jar, file:/data/m2_repository/javax/mail/mail/1.4.7/mail-1.4.7.jar, file:/data/m2_repository/javax/activation/activation/1.1/activation-1.1.jar, file:/home/ceefour/git/soluvas-framework/couchdb/target/classes/, file:/data/m2_repository/org/jscience/jscience/4.3.1/jscience-4.3.1.jar, file:/data/m2_repository/org/javolution/javolution/5.2.3/javolution-5.2.3.jar, file:/data/m2_repository/org/springframework/boot/spring-boot-starter-web/1.1.9.RELEASE/spring-boot-starter-web-1.1.9.RELEASE.jar, file:/data/m2_repository/org/springframework/boot/spring-boot-starter/1.1.9.RELEASE/spring-boot-starter-1.1.9.RELEASE.jar, file:/data/m2_repository/org/springframework/boot/spring-boot-autoconfigure/1.1.9.RELEASE/spring-boot-autoconfigure-1.1.9.RELEASE.jar, file:/data/m2_repository/org/springframework/boot/spring-boot-starter-logging/1.1.9.RELEASE/spring-boot-starter-logging-1.1.9.RELEASE.jar, file:/data/m2_repository/org/yaml/snakeyaml/1.13/snakeyaml-1.13.jar, file:/data/m2_repository/org/springframework/boot/spring-boot-starter-tomcat/1.1.9.RELEASE/spring-boot-starter-tomcat-1.1.9.RELEASE.jar, file:/data/m2_repository/org/apache/tomcat/embed/tomcat-embed-core/7.0.56/tomcat-embed-core-7.0.56.jar, file:/data/m2_repository/org/apache/tomcat/embed/tomcat-embed-el/7.0.56/tomcat-embed-el-7.0.56.jar, file:/data/m2_repository/org/apache/tomcat/embed/tomcat-embed-logging-juli/7.0.56/tomcat-embed-logging-juli-7.0.56.jar, file:/data/m2_repository/org/apache/tomcat/embed/tomcat-embed-websocket/7.0.56/tomcat-embed-websocket-7.0.56.jar, file:/data/m2_repository/org/hibernate/hibernate-validator/5.1.3.Final/hibernate-validator-5.1.3.Final.jar, file:/data/m2_repository/org/jboss/logging/jboss-logging/3.1.3.GA/jboss-logging-3.1.3.GA.jar, file:/data/m2_repository/org/springframework/spring-webmvc/4.0.8.RELEASE/spring-webmvc-4.0.8.RELEASE.jar, file:/data/m2_repository/com/mangofactory/swagger-springmvc/0.8.5/swagger-springmvc-0.8.5.jar, file:/data/m2_repository/com/wordnik/swagger-core_2.10/1.3.5/swagger-core_2.10-1.3.5.jar, file:/data/m2_repository/commons-lang/commons-lang/2.4/commons-lang-2.4.jar, file:/data/m2_repository/com/fasterxml/jackson/module/jackson-module-jsonSchema/2.1.0/jackson-module-jsonSchema-2.1.0.jar, file:/data/m2_repository/com/fasterxml/jackson/jaxrs/jackson-jaxrs-json-provider/2.4.3/jackson-jaxrs-json-provider-2.4.3.jar, file:/data/m2_repository/com/fasterxml/jackson/jaxrs/jackson-jaxrs-base/2.4.3/jackson-jaxrs-base-2.4.3.jar, file:/data/m2_repository/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.4.3/jackson-module-jaxb-annotations-2.4.3.jar, file:/data/m2_repository/com/wordnik/swagger-annotations/1.3.5/swagger-annotations-1.3.5.jar, file:/data/m2_repository/org/json4s/json4s-ext_2.10/3.2.5/json4s-ext_2.10-3.2.5.jar, file:/data/m2_repository/org/joda/joda-convert/1.2/joda-convert-1.2.jar, file:/data/m2_repository/org/json4s/json4s-native_2.10/3.2.5/json4s-native_2.10-3.2.5.jar, file:/data/m2_repository/org/json4s/json4s-core_2.10/3.2.5/json4s-core_2.10-3.2.5.jar, file:/data/m2_repository/org/json4s/json4s-ast_2.10/3.2.5/json4s-ast_2.10-3.2.5.jar, file:/data/m2_repository/org/scala-lang/scalap/2.10.0/scalap-2.10.0.jar, file:/data/m2_repository/org/scala-lang/scala-compiler/2.10.0/scala-compiler-2.10.0.jar, file:/data/m2_repository/org/json4s/json4s-jackson_2.10/3.2.5/json4s-jackson_2.10-3.2.5.jar, file:/data/m2_repository/com/mangofactory/swagger/swagger-models/0.8.5/swagger-models-0.8.5.jar, file:/data/m2_repository/com/fasterxml/classmate/1.0.0/classmate-1.0.0.jar, file:/data/m2_repository/com/fasterxml/jackson/module/jackson-module-scala_2.10/2.4.1/jackson-module-scala_2.10-2.4.1.jar, file:/data/m2_repository/org/scala-lang/scala-reflect/2.10.4/scala-reflect-2.10.4.jar, file:/data/m2_repository/com/fasterxml/jackson/core/jackson-core/2.4.3/jackson-core-2.4.3.jar, file:/data/m2_repository/com/fasterxml/jackson/core/jackson-annotations/2.4.3/jackson-annotations-2.4.3.jar, file:/data/m2_repository/com/thoughtworks/paranamer/paranamer/2.6/paranamer-2.6.jar, file:/data/m2_repository/org/springframework/hateoas/spring-hateoas/0.15.0.RELEASE/spring-hateoas-0.15.0.RELEASE.jar, file:/data/m2_repository/org/objenesis/objenesis/2.1/objenesis-2.1.jar, file:/data/m2_repository/org/springframework/boot/spring-boot/1.1.5.RELEASE/spring-boot-1.1.5.RELEASE.jar, file:/data/m2_repository/org/ektorp/org.ektorp.spring/1.4.2-SNAPSHOT/org.ektorp.spring-1.4.2-SNAPSHOT.jar, file:/data/m2_repository/org/ektorp/org.ektorp/1.4.2-SNAPSHOT/org.ektorp-1.4.2-SNAPSHOT.jar, file:/data/m2_repository/org/aspectj/aspectjweaver/1.6.9/aspectjweaver-1.6.9.jar, file:/home/ceefour/git/soluvas-framework/jpa/target/classes/, file:/data/m2_repository/org/springframework/spring-jdbc/4.0.8.RELEASE/spring-jdbc-4.0.8.RELEASE.jar, file:/data/m2_repository/com/mchange/c3p0/0.9.5-pre9/c3p0-0.9.5-pre9.jar, file:/data/m2_repository/com/mchange/mchange-commons-java/0.2.8/mchange-commons-java-0.2.8.jar, file:/data/m2_repository/org/liquibase/liquibase-core/3.3.0/liquibase-core-3.3.0.jar, file:/data/m2_repository/org/jadira/usertype/usertype.core/3.1.0.GA/usertype.core-3.1.0.GA.jar, file:/data/m2_repository/org/jadira/usertype/usertype.spi/3.1.0.GA/usertype.spi-3.1.0.GA.jar, file:/data/m2_repository/org/hibernate/hibernate-entitymanager/4.3.7.Final/hibernate-entitymanager-4.3.7.Final.jar, file:/data/m2_repository/org/jboss/logging/jboss-logging-annotations/1.2.0.Beta1/jboss-logging-annotations-1.2.0.Beta1.jar, file:/data/m2_repository/org/hibernate/common/hibernate-commons-annotations/4.0.5.Final/hibernate-commons-annotations-4.0.5.Final.jar, file:/data/m2_repository/org/jboss/spec/javax/transaction/jboss-transaction-api_1.2_spec/1.0.0.Final/jboss-transaction-api_1.2_spec-1.0.0.Final.jar, file:/data/m2_repository/org/eclipse/emf/org.eclipse.emf.texo/0.1.0-v201310021216/org.eclipse.emf.texo-0.1.0-v201310021216.jar, file:/data/m2_repository/org/springframework/spring-orm/4.0.8.RELEASE/spring-orm-4.0.8.RELEASE.jar, file:/data/m2_repository/com/rabbitmq/amqp-client/2.8.2/amqp-client-2.8.2.jar, file:/home/ceefour/git/quikdo-hub/web/target/classes/, file:/home/ceefour/git/soluvas-framework/ldap/target/classes/, file:/data/m2_repository/org/picketlink/idm/picketlink-idm-api/1.5.0.Alpha02/picketlink-idm-api-1.5.0.Alpha02.jar, file:/data/m2_repository/org/picketlink/idm/picketlink-idm-common/1.5.0.Alpha02/picketlink-idm-common-1.5.0.Alpha02.jar, file:/data/m2_repository/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.jar, file:/data/m2_repository/com/google/zxing/core/2.3.0/core-2.3.0.jar, file:/data/m2_repository/com/google/zxing/javase/2.3.0/javase-2.3.0.jar, file:/data/m2_repository/org/wicketstuff/wicketstuff-gmap3/6.18.0/wicketstuff-gmap3-6.18.0.jar, file:/data/m2_repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar, file:/data/m2_repository/org/apache/jena/jena-arq/2.12.1/jena-arq-2.12.1.jar, file:/data/m2_repository/org/apache/jena/jena-core/2.12.1/jena-core-2.12.1.jar, file:/data/m2_repository/org/apache/jena/jena-iri/1.1.1/jena-iri-1.1.1.jar, file:/data/m2_repository/xerces/xercesImpl/2.11.0/xercesImpl-2.11.0.jar, file:/data/m2_repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar, file:/data/m2_repository/com/github/jsonld-java/jsonld-java/0.5.0/jsonld-java-0.5.0.jar, file:/data/m2_repository/org/apache/httpcomponents/httpclient-cache/4.3.6/httpclient-cache-4.3.6.jar, file:/data/m2_repository/org/apache/thrift/libthrift/0.9.1/libthrift-0.9.1.jar, file:/data/m2_repository/org/apache/commons/commons-csv/1.0/commons-csv-1.0.jar, file:/home/ceefour/git/quikdo-hub/freq.web/target/classes/, file:/home/ceefour/git/quikdo-hub/freq.analytics/target/classes/, file:/home/ceefour/git/quikdo-hub/freq.core/target/classes/, file:/data/m2_repository/com/amazonaws/aws-java-sdk-s3/1.9.6/aws-java-sdk-s3-1.9.6.jar, file:/data/m2_repository/com/amazonaws/aws-java-sdk-kms/1.9.6/aws-java-sdk-kms-1.9.6.jar, file:/data/m2_repository/com/amazonaws/aws-java-sdk-core/1.9.6/aws-java-sdk-core-1.9.6.jar, file:/data/m2_repository/org/springframework/spring-expression/4.0.8.RELEASE/spring-expression-4.0.8.RELEASE.jar, file:/data/m2_repository/net/sf/opencsv/opencsv/2.3/opencsv-2.3.jar, file:/home/ceefour/git/soluvas-web/site/target/classes/, file:/data/m2_repository/org/pegdown/pegdown/1.4.2/pegdown-1.4.2.jar, file:/data/m2_repository/org/parboiled/parboiled-java/1.1.6/parboiled-java-1.1.6.jar, file:/data/m2_repository/org/parboiled/parboiled-core/1.1.6/parboiled-core-1.1.6.jar, file:/data/m2_repository/org/ow2/asm/asm-tree/4.2/asm-tree-4.2.jar, file:/data/m2_repository/org/ow2/asm/asm-analysis/4.2/asm-analysis-4.2.jar, file:/data/m2_repository/org/ow2/asm/asm-util/4.2/asm-util-4.2.jar, file:/data/m2_repository/org/wicketstuff/wicketstuff-annotation/6.18.0/wicketstuff-annotation-6.18.0.jar, file:/data/m2_repository/org/apache/wicket/wicket-datetime/6.18.0/wicket-datetime-6.18.0.jar, file:/home/ceefour/git/soluvas-framework/socmed/target/classes/, file:/data/m2_repository/org/twitter4j/twitter4j-core/3.0.3/twitter4j-core-3.0.3.jar, file:/home/ceefour/git/quikdo-hub/guardian.web/target/classes/, file:/home/ceefour/git/quikdo-hub/guardian.core/target/classes/, file:/data/m2_repository/com/mattbertolini/liquibase-slf4j/1.2.1/liquibase-slf4j-1.2.1.jar, file:/home/ceefour/git/soluvas-analytics/core/target/classes/, file:/data/m2_repository/org/webjars/rickshaw/1.4.5/rickshaw-1.4.5.jar, file:/data/m2_repository/org/webjars/d3js/3.1.4/d3js-3.1.4.jar, file:/data/m2_repository/pentaho/mondrian/3.6.6.soluvas1-SNAPSHOT/mondrian-3.6.6.soluvas1-SNAPSHOT.jar, file:/data/m2_repository/org/olap4j/olap4j/1.2.0/olap4j-1.2.0.jar, file:/data/m2_repository/net/java/dev/javacc/javacc/5.0/javacc-5.0.jar, file:/data/m2_repository/eigenbase/eigenbase-resgen/1.3.5/eigenbase-resgen-1.3.5.jar, file:/data/m2_repository/eigenbase/eigenbase-xom/1.3.3/eigenbase-xom-1.3.3.jar, file:/data/m2_repository/eigenbase/eigenbase-properties/1.1.4/eigenbase-properties-1.1.4.jar, file:/data/m2_repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar, file:/data/m2_repository/commons-pool/commons-pool/1.6/commons-pool-1.6.jar, file:/data/m2_repository/commons-dbcp/commons-dbcp/1.4/commons-dbcp-1.4.jar, file:/data/m2_repository/commons-vfs/commons-vfs/20100924-pentaho/commons-vfs-20100924-pentaho.jar, file:/data/m2_repository/commons-math/commons-math/1.1/commons-math-1.1.jar, file:/data/m2_repository/commons-discovery/commons-discovery/0.2/commons-discovery-0.2.jar, file:/home/ceefour/git/soluvas-framework/schedule/target/classes/, file:/data/m2_repository/org/springframework/spring-test/4.0.8.RELEASE/spring-test-4.0.8.RELEASE.jar, file:/data/m2_repository/org/springframework/spring-context-support/4.0.8.RELEASE/spring-context-support-4.0.8.RELEASE.jar, file:/data/m2_repository/org/quartz-scheduler/quartz/2.2.1/quartz-2.2.1.jar, file:/data/m2_repository/org/postgresql/postgresql/9.3-1102-jdbc41/postgresql-9.3-1102-jdbc41.jar, file:/data/m2_repository/org/jdbi/jdbi/2.55/jdbi-2.55.jar, file:/home/ceefour/git/quikdo-hub/relay.web/target/classes/, file:/data/m2_repository/com/plivo/plivo-java/3.0.1/plivo-java-3.0.1.jar, file:/data/m2_repository/net/sf/uadetector/uadetector-core/0.9.13/uadetector-core-0.9.13.jar, file:/data/m2_repository/net/sf/qualitycheck/quality-check/1.3/quality-check-1.3.jar, file:/data/m2_repository/net/sf/uadetector/uadetector-resources/2014.01/uadetector-resources-2014.01.jar, file:/data/m2_repository/org/apache/httpcomponents/httpclient/4.3.6/httpclient-4.3.6.jar, file:/data/m2_repository/com/google/code/gson/gson/2.2.2/gson-2.2.2.jar, file:/home/ceefour/git/quikdo-hub/relay.core/target/classes/, file:/data/m2_repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar, file:/data/m2_repository/org/aspectj/aspectjrt/1.7.3/aspectjrt-1.7.3.jar, file:/data/m2_repository/org/hibernate/hibernate-core/4.3.7.Final/hibernate-core-4.3.7.Final.jar, file:/data/m2_repository/antlr/antlr/2.7.7/antlr-2.7.7.jar, file:/data/m2_repository/org/jboss/jandex/1.1.0.Final/jandex-1.1.0.Final.jar, file:/data/m2_repository/org/hibernate/hibernate-c3p0/4.3.7.Final/hibernate-c3p0-4.3.7.Final.jar, file:/data/m2_repository/net/glxn/qrgen/1.3/qrgen-1.3.jar, file:/data/m2_repository/com/codahale/metrics/metrics-graphite/3.0.2/metrics-graphite-3.0.2.jar, file:/data/m2_repository/com/codahale/metrics/metrics-core/3.0.2/metrics-core-3.0.2.jar, file:/data/m2_repository/com/codahale/metrics/metrics-servlet/3.0.2/metrics-servlet-3.0.2.jar, file:/data/m2_repository/com/codahale/metrics/metrics-servlets/3.0.2/metrics-servlets-3.0.2.jar, file:/data/m2_repository/com/codahale/metrics/metrics-healthchecks/3.0.2/metrics-healthchecks-3.0.2.jar, file:/data/m2_repository/com/codahale/metrics/metrics-json/3.0.2/metrics-json-3.0.2.jar, file:/data/m2_repository/com/fasterxml/jackson/core/jackson-databind/2.4.3/jackson-databind-2.4.3.jar, file:/data/m2_repository/com/codahale/metrics/metrics-jvm/3.0.2/metrics-jvm-3.0.2.jar, file:/data/m2_repository/com/codahale/metrics/metrics-logback/3.0.2/metrics-logback-3.0.2.jar, file:/data/m2_repository/com/codahale/metrics/metrics-httpclient/3.0.2/metrics-httpclient-3.0.2.jar, file:/home/ceefour/git/soluvas-framework/jaxrs/target/classes/, file:/home/ceefour/git/soluvas-framework/commons/target/classes/, file:/data/m2_repository/org/eclipse/jgit/org.eclipse.jgit/3.3.1.201403241930-r/org.eclipse.jgit-3.3.1.201403241930-r.jar, file:/data/m2_repository/com/jcraft/jsch/0.1.50/jsch-0.1.50.jar, file:/data/m2_repository/com/googlecode/javaewah/JavaEWAH/0.7.9/JavaEWAH-0.7.9.jar, file:/data/m2_repository/com/google/code/morphia/morphia/0.99.1.soluvas2/morphia-0.99.1.soluvas2.jar, file:/data/m2_repository/com/google/code/morphia/morphia-logging-slf4j/0.99/morphia-logging-slf4j-0.99.jar, file:/data/m2_repository/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.4.3/jackson-datatype-joda-2.4.3.jar, file:/data/m2_repository/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.4.3/jackson-datatype-guava-2.4.3.jar, file:/data/m2_repository/org/apache/commons/commons-lang3/3.3.2/commons-lang3-3.3.2.jar, file:/data/m2_repository/com/google/guava/guava/18.0/guava-18.0.jar, file:/data/m2_repository/javax/ws/rs/jsr311-api/1.1.1/jsr311-api-1.1.1.jar, file:/home/ceefour/git/soluvas-framework/image/target/classes/, file:/home/ceefour/git/soluvas-framework/mongo/target/classes/, file:/data/m2_repository/org/springframework/spring-beans/4.0.8.RELEASE/spring-beans-4.0.8.RELEASE.jar, file:/data/m2_repository/org/springframework/spring-context/4.0.8.RELEASE/spring-context-4.0.8.RELEASE.jar, file:/data/m2_repository/com/damnhandy/handy-uri-templates/2.0.1/handy-uri-templates-2.0.1.jar, file:/data/m2_repository/org/apache/commons/commons-exec/1.3/commons-exec-1.3.jar, file:/data/m2_repository/org/apache/karaf/shell/org.apache.karaf.shell.console/2.2.9/org.apache.karaf.shell.console-2.2.9.jar, file:/data/m2_repository/jline/jline/2.7/jline-2.7.jar, file:/data/m2_repository/org/fusesource/jansi/jansi/1.9/jansi-1.9.jar, file:/data/m2_repository/org/apache/karaf/jaas/org.apache.karaf.jaas.modules/2.2.9/org.apache.karaf.jaas.modules-2.2.9.jar, file:/data/m2_repository/org/apache/karaf/jaas/org.apache.karaf.jaas.config/2.2.9/org.apache.karaf.jaas.config-2.2.9.jar, file:/data/m2_repository/org/apache/karaf/jaas/org.apache.karaf.jaas.boot/2.2.9/org.apache.karaf.jaas.boot-2.2.9.jar, file:/data/m2_repository/org/apache/aries/blueprint/org.apache.aries.blueprint/0.3.2/org.apache.aries.blueprint-0.3.2.jar, file:/data/m2_repository/org/apache/aries/org.apache.aries.util/0.3/org.apache.aries.util-0.3.jar, file:/data/m2_repository/org/apache/aries/testsupport/org.apache.aries.testsupport.unit/0.3/org.apache.aries.testsupport.unit-0.3.jar, file:/data/m2_repository/org/apache/aries/proxy/org.apache.aries.proxy.api/0.3/org.apache.aries.proxy.api-0.3.jar, file:/data/m2_repository/org/apache/felix/org.apache.felix.gogo.runtime/0.10.0/org.apache.felix.gogo.runtime-0.10.0.jar, file:/data/m2_repository/org/antlr/stringtemplate/4.0.2/stringtemplate-4.0.2.jar, file:/data/m2_repository/org/antlr/antlr-runtime/3.3/antlr-runtime-3.3.jar, file:/data/m2_repository/org/apache/httpcomponents/httpcore/4.3.3/httpcore-4.3.3.jar, file:/home/ceefour/git/soluvas-framework/data/target/classes/, file:/data/m2_repository/org/springframework/spring-tx/4.0.8.RELEASE/spring-tx-4.0.8.RELEASE.jar, file:/data/m2_repository/org/scala-lang/scala-library/2.10.2/scala-library-2.10.2.jar, file:/home/ceefour/git/soluvas-framework/security/target/classes/, file:/data/m2_repository/org/apache/shiro/shiro-web/1.2.3/shiro-web-1.2.3.jar, file:/data/m2_repository/org/eclipse/emf/org.eclipse.emf.ecore.xmi/2.10.1-v20140901-1043/org.eclipse.emf.ecore.xmi-2.10.1-v20140901-1043.jar, file:/data/m2_repository/com/beust/jcommander/1.35/jcommander-1.35.jar, file:/data/m2_repository/blast/blast-shell-karaf-commands/0.13/blast-shell-karaf-commands-0.13.jar, file:/data/m2_repository/blast/blast-shell-core/0.13/blast-shell-core-0.13.jar, file:/data/m2_repository/org/apache/karaf/shell/org.apache.karaf.shell.commands/2.2.9/org.apache.karaf.shell.commands-2.2.9.jar, file:/data/m2_repository/org/apache/karaf/org.apache.karaf.util/2.2.9/org.apache.karaf.util-2.2.9.jar, file:/data/m2_repository/blast/blast-shell-karaf-ssh/0.13/blast-shell-karaf-ssh-0.13.jar, file:/data/m2_repository/blast/blast-shell-karaf-wrapper/0.13/blast-shell-karaf-wrapper-0.13.jar, file:/data/m2_repository/org/springframework/osgi/spring-osgi-mock/1.2.1/spring-osgi-mock-1.2.1.jar, file:/data/m2_repository/org/apache/karaf/shell/org.apache.karaf.shell.ssh/2.2.9/org.apache.karaf.shell.ssh-2.2.9.jar, file:/data/m2_repository/org/apache/sshd/sshd-core/0.8.0/sshd-core-0.8.0.jar, file:/data/m2_repository/org/apache/mina/mina-core/2.0.5/mina-core-2.0.5.jar, file:/data/m2_repository/org/apache/wicket/wicket-spring/6.18.0/wicket-spring-6.18.0.jar, file:/data/m2_repository/org/apache/wicket/wicket-core/6.18.0/wicket-core-6.18.0.jar, file:/data/m2_repository/org/apache/wicket/wicket-util/6.18.0/wicket-util-6.18.0.jar, file:/data/m2_repository/org/apache/wicket/wicket-request/6.18.0/wicket-request-6.18.0.jar, file:/data/m2_repository/org/apache/wicket/wicket-ioc/6.18.0/wicket-ioc-6.18.0.jar, file:/data/m2_repository/org/apache/wicket/experimental/wicket6/wicket-atmosphere/0.21/wicket-atmosphere-0.21.jar, file:/data/m2_repository/org/webjars/jquery-atmosphere/2.2.3/jquery-atmosphere-2.2.3.jar, file:/data/m2_repository/de/agilecoders/wicket/webjars/wicket-webjars/0.4.3/wicket-webjars-0.4.3.jar, file:/data/m2_repository/org/reflections/reflections/0.9.8/reflections-0.9.8.jar, file:/data/m2_repository/org/atmosphere/atmosphere-runtime-native/2.2.3/atmosphere-runtime-native-2.2.3.jar, file:/data/m2_repository/org/atmosphere/atmosphere-compat-jbossweb/2.0.1/atmosphere-compat-jbossweb-2.0.1.jar, file:/data/m2_repository/org/atmosphere/atmosphere-compat-tomcat/2.0.1/atmosphere-compat-tomcat-2.0.1.jar, file:/data/m2_repository/cglib/cglib/3.1/cglib-3.1.jar, file:/data/m2_repository/org/ow2/asm/asm/4.2/asm-4.2.jar, file:/data/m2_repository/org/hibernate/javax/persistence/hibernate-jpa-2.1-api/1.0.0.Final/hibernate-jpa-2.1-api-1.0.0.Final.jar, file:/data/m2_repository/org/apache/shiro/shiro-spring/1.2.3/shiro-spring-1.2.3.jar, file:/data/m2_repository/org/springframework/spring-web/4.0.8.RELEASE/spring-web-4.0.8.RELEASE.jar, file:/data/m2_repository/org/springframework/spring-aop/4.0.8.RELEASE/spring-aop-4.0.8.RELEASE.jar, file:/data/m2_repository/org/springframework/spring-core/4.0.8.RELEASE/spring-core-4.0.8.RELEASE.jar, file:/data/m2_repository/org/slf4j/log4j-over-slf4j/1.7.5/log4j-over-slf4j-1.7.5.jar, file:/home/ceefour/git/soluvas-web/login/target/classes/, file:/data/m2_repository/org/apache/wicket/wicket-extensions/6.18.0/wicket-extensions-6.18.0.jar, file:/data/m2_repository/com/restfb/restfb/1.6.16/restfb-1.6.16.jar, file:/data/m2_repository/org/apache/maven/plugins/maven-failsafe-plugin/2.17/maven-failsafe-plugin-2.17.jar, file:/data/m2_repository/org/apache/maven/maven-plugin-api/2.0.9/maven-plugin-api-2.0.9.jar, file:/data/m2_repository/org/apache/maven/surefire/maven-surefire-common/2.17/maven-surefire-common-2.17.jar, file:/data/m2_repository/org/apache/maven/surefire/surefire-booter/2.17/surefire-booter-2.17.jar, file:/data/m2_repository/org/apache/maven/maven-artifact/2.0.9/maven-artifact-2.0.9.jar, file:/data/m2_repository/org/codehaus/plexus/plexus-utils/1.5.1/plexus-utils-1.5.1.jar, file:/data/m2_repository/org/apache/maven/maven-plugin-descriptor/2.0.9/maven-plugin-descriptor-2.0.9.jar, file:/data/m2_repository/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.jar, file:/data/m2_repository/org/apache/maven/maven-project/2.0.9/maven-project-2.0.9.jar, file:/data/m2_repository/org/apache/maven/maven-settings/2.0.9/maven-settings-2.0.9.jar, file:/data/m2_repository/org/apache/maven/maven-profile/2.0.9/maven-profile-2.0.9.jar, file:/data/m2_repository/org/apache/maven/maven-artifact-manager/2.0.9/maven-artifact-manager-2.0.9.jar, file:/data/m2_repository/org/apache/maven/maven-plugin-registry/2.0.9/maven-plugin-registry-2.0.9.jar, file:/data/m2_repository/org/apache/maven/maven-model/2.0.9/maven-model-2.0.9.jar, file:/data/m2_repository/org/apache/maven/maven-core/2.0.9/maven-core-2.0.9.jar, file:/data/m2_repository/org/apache/maven/maven-plugin-parameter-documenter/2.0.9/maven-plugin-parameter-documenter-2.0.9.jar, file:/data/m2_repository/org/apache/maven/reporting/maven-reporting-api/2.0.9/maven-reporting-api-2.0.9.jar, file:/data/m2_repository/org/apache/maven/wagon/wagon-provider-api/1.0-beta-2/wagon-provider-api-1.0-beta-2.jar, file:/data/m2_repository/org/apache/maven/maven-repository-metadata/2.0.9/maven-repository-metadata-2.0.9.jar, file:/data/m2_repository/org/apache/maven/maven-error-diagnostics/2.0.9/maven-error-diagnostics-2.0.9.jar, file:/data/m2_repository/org/apache/maven/maven-monitor/2.0.9/maven-monitor-2.0.9.jar, file:/data/m2_repository/classworlds/classworlds/1.1/classworlds-1.1.jar, file:/data/m2_repository/org/apache/maven/maven-toolchain/2.0.9/maven-toolchain-2.0.9.jar, file:/data/m2_repository/org/apache/maven/surefire/surefire-api/2.17/surefire-api-2.17.jar, file:/data/m2_repository/org/apache/maven/plugin-tools/maven-plugin-annotations/3.2/maven-plugin-annotations-3.2.jar, file:/data/m2_repository/org/expressme/JOpenId/1.08/JOpenId-1.08.jar, file:/data/m2_repository/com/google/http-client/google-http-client-jackson2/1.13.1-beta/google-http-client-jackson2-1.13.1-beta.jar, file:/data/m2_repository/com/google/http-client/google-http-client/1.13.1-beta/google-http-client-1.13.1-beta.jar, file:/data/m2_repository/xpp3/xpp3/1.1.4c/xpp3-1.1.4c.jar, file:/data/m2_repository/com/google/api-client/google-api-client/1.13.2-beta/google-api-client-1.13.2-beta.jar, file:/data/m2_repository/com/google/oauth-client/google-oauth-client/1.13.1-beta/google-oauth-client-1.13.1-beta.jar, file:/data/m2_repository/com/google/apis/google-api-services-plus/v1-rev49-1.13.2-beta/google-api-services-plus-v1-rev49-1.13.2-beta.jar, file:/home/ceefour/git/soluvas-web/bootstrap/target/classes/, file:/home/ceefour/git/soluvas-web/nav/target/classes/, file:/home/ceefour/git/soluvas-framework/category/target/classes/, file:/home/ceefour/git/soluvas-framework/geo/target/classes/, file:/data/m2_repository/com/googlecode/concurrent-trees/concurrent-trees/2.4.0/concurrent-trees-2.4.0.jar, file:/data/m2_repository/org/geotoolkit/geotk-referencing/3.20-geoapi-3.0/geotk-referencing-3.20-geoapi-3.0.jar, file:/data/m2_repository/java3d/vecmath/1.3.1/vecmath-1.3.1.jar, file:/data/m2_repository/org/opengis/geoapi/3.0.0/geoapi-3.0.0.jar, file:/data/m2_repository/org/geotoolkit/geotk-utility/3.20-geoapi-3.0/geotk-utility-3.20-geoapi-3.0.jar, file:/data/m2_repository/org/geotoolkit/geotk-metadata/3.20-geoapi-3.0/geotk-metadata-3.20-geoapi-3.0.jar, file:/data/m2_repository/org/geotoolkit/geotk-xml-base/3.20-geoapi-3.0/geotk-xml-base-3.20-geoapi-3.0.jar, file:/data/m2_repository/net/jcip/jcip-annotations/1.0/jcip-annotations-1.0.jar, file:/data/m2_repository/org/geotoolkit/geotk-logging-commons/3.20-geoapi-3.0/geotk-logging-commons-3.20-geoapi-3.0.jar, file:/data/m2_repository/com/vaynberg/wicket/select2/wicket-select2/2.2.3/wicket-select2-2.2.3.jar, file:/data/m2_repository/org/json/json/20090211/json-20090211.jar, file:/data/m2_repository/de/agilecoders/wicket/wicket-bootstrap-core/0.9.7/wicket-bootstrap-core-0.9.7.jar, file:/data/m2_repository/de/agilecoders/wicket/jquery-selectors/0.1.3/jquery-selectors-0.1.3.jar, file:/data/m2_repository/org/webjars/bootstrap/3.2.0/bootstrap-3.2.0.jar, file:/data/m2_repository/org/webjars/jquery/1.11.1/jquery-1.11.1.jar, file:/data/m2_repository/org/webjars/modernizr/2.7.1/modernizr-2.7.1.jar, file:/data/m2_repository/de/agilecoders/maven/maven-parent-config/0.3.5/maven-parent-config-0.3.5.jar, file:/data/m2_repository/org/javassist/javassist/3.18.0-GA/javassist-3.18.0-GA.jar, file:/data/m2_repository/de/agilecoders/wicket/wicket-bootstrap-extensions/0.9.7/wicket-bootstrap-extensions-0.9.7.jar, file:/data/m2_repository/com/google/javascript/closure-compiler/v20130603/closure-compiler-v20130603.jar, file:/data/m2_repository/args4j/args4j/2.0.16/args4j-2.0.16.jar, file:/data/m2_repository/org/webjars/jquerypp/1.0.1/jquerypp-1.0.1.jar, file:/data/m2_repository/org/webjars/jquery-ui/1.10.4/jquery-ui-1.10.4.jar, file:/data/m2_repository/org/webjars/typeaheadjs/0.10.4/typeaheadjs-0.10.4.jar, file:/data/m2_repository/org/webjars/x-editable-bootstrap/1.5.1/x-editable-bootstrap-1.5.1.jar, file:/data/m2_repository/org/webjars/spin-js/2.0.0/spin-js-2.0.0.jar, file:/data/m2_repository/de/agilecoders/wicket/wicket-bootstrap-themes/0.9.7/wicket-bootstrap-themes-0.9.7.jar, file:/data/m2_repository/de/agilecoders/wicket/wicket-bootstrap-less/0.9.7/wicket-bootstrap-less-0.9.7.jar, file:/data/m2_repository/com/github/sommeri/less4j/1.8.2/less4j-1.8.2.jar, file:/data/m2_repository/org/jsoup/jsoup/1.8.1/jsoup-1.8.1.jar, file:/data/m2_repository/jaxen/jaxen/1.1.4/jaxen-1.1.4.jar, file:/data/m2_repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar, file:/data/m2_repository/commons-io/commons-io/2.4/commons-io-2.4.jar, file:/data/m2_repository/commons-codec/commons-codec/1.7/commons-codec-1.7.jar, file:/data/m2_repository/org/apache/shiro/shiro-core/1.2.3/shiro-core-1.2.3.jar, file:/data/m2_repository/commons-beanutils/commons-beanutils/1.8.3/commons-beanutils-1.8.3.jar, file:/data/m2_repository/org/osgi/org.osgi.compendium/4.3.1/org.osgi.compendium-4.3.1.jar, file:/data/m2_repository/org/osgi/org.osgi.core/4.3.1/org.osgi.core-4.3.1.jar, file:/data/m2_repository/org/eclipse/emf/org.eclipse.emf.ecore/2.10.1-v20140901-1043/org.eclipse.emf.ecore-2.10.1-v20140901-1043.jar, file:/data/m2_repository/org/eclipse/emf/org.eclipse.emf.common/2.10.1-v20140901-1043/org.eclipse.emf.common-2.10.1-v20140901-1043.jar, file:/data/m2_repository/org/joda/joda-money/0.9.1/joda-money-0.9.1.jar, file:/data/m2_repository/joda-time/joda-time/2.3/joda-time-2.3.jar, file:/data/m2_repository/org/mongodb/mongo-java-driver/2.12.4/mongo-java-driver-2.12.4.jar, file:/data/m2_repository/javax/enterprise/cdi-api/1.0-SP4/cdi-api-1.0-SP4.jar, file:/data/m2_repository/org/jboss/spec/javax/interceptor/jboss-interceptors-api_1.1_spec/1.0.1.Final/jboss-interceptors-api_1.1_spec-1.0.1.Final.jar, file:/data/m2_repository/javax/annotation/jsr250-api/1.0/jsr250-api-1.0.jar, file:/data/m2_repository/javax/inject/javax.inject/1/javax.inject-1.jar, file:/data/m2_repository/com/logentries/logentries-appender/1.1.21/logentries-appender-1.1.21.jar, file:/data/m2_repository/de/huxhorn/lilith/de.huxhorn.lilith.logback.appender.multiplex-classic/0.9.44/de.huxhorn.lilith.logback.appender.multiplex-classic-0.9.44.jar, file:/data/m2_repository/de/huxhorn/sulky/de.huxhorn.sulky.codec/0.9.17/de.huxhorn.sulky.codec-0.9.17.jar, file:/data/m2_repository/de/huxhorn/sulky/de.huxhorn.sulky.io/0.9.17/de.huxhorn.sulky.io-0.9.17.jar, file:/data/m2_repository/de/huxhorn/lilith/de.huxhorn.lilith.logback.converter-classic/0.9.44/de.huxhorn.lilith.logback.converter-classic-0.9.44.jar, file:/data/m2_repository/de/huxhorn/lilith/de.huxhorn.lilith.data.converter/0.9.44/de.huxhorn.lilith.data.converter-0.9.44.jar, file:/data/m2_repository/de/huxhorn/lilith/de.huxhorn.lilith.logback.classic/0.9.44/de.huxhorn.lilith.logback.classic-0.9.44.jar, file:/data/m2_repository/de/huxhorn/lilith/de.huxhorn.lilith.data.logging/0.9.44/de.huxhorn.lilith.data.logging-0.9.44.jar, file:/data/m2_repository/de/huxhorn/sulky/de.huxhorn.sulky.formatting/0.9.17/de.huxhorn.sulky.formatting-0.9.17.jar, file:/data/m2_repository/de/huxhorn/lilith/de.huxhorn.lilith.data.eventsource/0.9.44/de.huxhorn.lilith.data.eventsource-0.9.44.jar, file:/data/m2_repository/de/huxhorn/lilith/de.huxhorn.lilith.logback.appender.multiplex-core/0.9.44/de.huxhorn.lilith.logback.appender.multiplex-core-0.9.44.jar, file:/data/m2_repository/de/huxhorn/lilith/de.huxhorn.lilith.sender/0.9.44/de.huxhorn.lilith.sender-0.9.44.jar, file:/data/m2_repository/de/huxhorn/lilith/de.huxhorn.lilith.data.logging.protobuf/0.9.44/de.huxhorn.lilith.data.logging.protobuf-0.9.44.jar, file:/data/m2_repository/com/google/protobuf/protobuf-java/2.5.0/protobuf-java-2.5.0.jar, file:/data/m2_repository/org/slf4j/jul-to-slf4j/1.7.7/jul-to-slf4j-1.7.7.jar, file:/data/m2_repository/org/slf4j/jcl-over-slf4j/1.7.7/jcl-over-slf4j-1.7.7.jar, file:/data/m2_repository/ch/qos/logback/logback-classic/1.1.2/logback-classic-1.1.2.jar, file:/data/m2_repository/ch/qos/logback/logback-core/1.1.2/logback-core-1.1.2.jar, file:/data/m2_repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar, file:/data/m2_repository/com/google/code/findbugs/jsr305/3.0.0/jsr305-3.0.0.jar, file:/home/ceefour/idea/lib/idea_rt.jar] 2014-11-21 20:39:39,125 20138 [main] ERROR org.springframework.boot.SpringApplication - Application startup failed org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatEmbeddedServletContainerFactory' defined in class org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat: Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: Lorg/springframework/boot/context/embedded/Ssl; 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:135) ~[spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:476) ~[spring-context-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java) ~[spring-context-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120) ~[spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691) ~[spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:320) ~[spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:142) [spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at com.quikdo.hub.app.HubApplication.main(HubApplication.java:55) [classes/:na] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_20] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_20] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_20] 	at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0_20] 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134) [idea_rt.jar:na] Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatEmbeddedServletContainerFactory' defined in class org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat: Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: Lorg/springframework/boot/context/embedded/Ssl; 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:547) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getEmbeddedServletContainerFactory(EmbeddedWebApplicationContext.java:195) ~[spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:158) ~[spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:132) ~[spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	... 12 common frames omitted Caused by: java.lang.NoClassDefFoundError: Lorg/springframework/boot/context/embedded/Ssl; 	at java.lang.Class.getDeclaredFields0(Native Method) ~[na:1.8.0_20] 	at java.lang.Class.privateGetDeclaredFields(Class.java:2570) ~[na:1.8.0_20] 	at java.lang.Class.getDeclaredFields(Class.java:1903) ~[na:1.8.0_20] 	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findPersistenceMetadata(PersistenceAnnotationBeanPostProcessor.java:392) ~[spring-orm-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(PersistenceAnnotationBeanPostProcessor.java:332) ~[spring-orm-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyMergedBeanDefinitionPostProcessors(AbstractAutowireCapableBeanFactory.java:909) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:512) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:470) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1073) ~[spring-context-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.getCustomizers(EmbeddedServletContainerCustomizerBeanPostProcessor.java:74) ~[spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.postProcessBeforeInitialization(EmbeddedServletContainerCustomizerBeanPostProcessor.java:66) ~[spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.postProcessBeforeInitialization(EmbeddedServletContainerCustomizerBeanPostProcessor.java:54) ~[spring-boot-1.1.5.RELEASE.jar:1.1.5.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:407) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1546) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) ~[spring-beans-4.0.8.RELEASE.jar:4.0.8.RELEASE] 	... 20 common frames omitted Caused by: java.lang.ClassNotFoundException: org.springframework.boot.context.embedded.Ssl 	at java.net.URLClassLoader$1.run(URLClassLoader.java:372) ~[na:1.8.0_20] 	at java.net.URLClassLoader$1.run(URLClassLoader.java:361) ~[na:1.8.0_20] 	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_20] 	at java.net.URLClassLoader.findClass(URLClassLoader.java:360) ~[na:1.8.0_20] 	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_20] 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308) ~[na:1.8.0_20] 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_20] 	... 40 common frames omitted Exception in thread ""main"" org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatEmbeddedServletContainerFactory' defined in class org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat: Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: Lorg/springframework/boot/context/embedded/Ssl; 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:135) 	at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:476) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java) 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120) 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:320) 	at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:142) 	at com.quikdo.hub.app.HubApplication.main(HubApplication.java:55) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:483) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatEmbeddedServletContainerFactory' defined in class org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat: Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: Lorg/springframework/boot/context/embedded/Ssl; 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:547) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getEmbeddedServletContainerFactory(EmbeddedWebApplicationContext.java:195) 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:158) 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:132) 	... 12 more Caused by: java.lang.NoClassDefFoundError: Lorg/springframework/boot/context/embedded/Ssl; 	at java.lang.Class.getDeclaredFields0(Native Method) 	at java.lang.Class.privateGetDeclaredFields(Class.java:2570) 	at java.lang.Class.getDeclaredFields(Class.java:1903) 	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findPersistenceMetadata(PersistenceAnnotationBeanPostProcessor.java:392) 	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(PersistenceAnnotationBeanPostProcessor.java:332) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyMergedBeanDefinitionPostProcessors(AbstractAutowireCapableBeanFactory.java:909) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:512) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:470) 	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1073) 	at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.getCustomizers(EmbeddedServletContainerCustomizerBeanPostProcessor.java:74) 	at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.postProcessBeforeInitialization(EmbeddedServletContainerCustomizerBeanPostProcessor.java:66) 	at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.postProcessBeforeInitialization(EmbeddedServletContainerCustomizerBeanPostProcessor.java:54) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:407) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1546) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) 	... 20 more Caused by: java.lang.ClassNotFoundException: org.springframework.boot.context.embedded.Ssl 	at java.net.URLClassLoader$1.run(URLClassLoader.java:372) 	at java.net.URLClassLoader$1.run(URLClassLoader.java:361) 	at java.security.AccessController.doPrivileged(Native Method) 	at java.net.URLClassLoader.findClass(URLClassLoader.java:360) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) 	... 40 more ```  ---  **Affects:** 4.0.8  **Issue Links:** - #19449 Improve exception when failing to create a specific bean due to a NoClassDefFoundError","closed","type: enhancement,","spring-projects-issues","2014-11-21T06:35:46Z","2019-01-11T19:26:48Z"
"","17036","Support org.springframework.context.ApplicationContextInitializer usage programmatically (in Servlet 3.0+ environments) [SPR-12430]","**[Hendy Irawan](https://jira.spring.io/secure/ViewProfile.jspa?name=ceefour)** opened **[SPR-12430](https://jira.spring.io/browse/SPR-12430?redirect=false)** and commented  `org.springframework.context.ApplicationContextInitializer` is only usable from `context-param` or `init-param`.  It should also be usable programmatically, e.g. from `WebApplicationInitializer` implementation:  ``` @Override protected WebApplicationContext createRootApplicationContext() { 	final ConfigurableWebApplicationContext webAppCtx = (ConfigurableWebApplicationContext) super.createRootApplicationContext(); 	// this throws NullPointerException due to ServletContext not yet assigned to webAppCtx 	new AppInitializer().initialize(webAppCtx); 	// Ideally 	webAppCtx.setInitializers(webAppCtx); 	return webAppCtx; } ```  Workaround:  ``` @Override public void onStartup(ServletContext servletContext) 		throws ServletException { 	// Workaround 	servletContext.setInitParameter(""contextInitializerClasses"", AppInitializer.class.getName()); 	super.onStartup(servletContext); 	servletContext.addListener(RequestContextListener.class); } ```  ---  **Affects:** 4.1.2  **Issue Links:** - #16238 Provide a mechanism for adding ApplicationContextInitializer instances (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2014-11-13T04:49:45Z","2019-01-11T19:29:12Z"
"","17019","org.springframework.web.HttpMediaTypeNotSupportedException: Content type 'null' not supported [SPR-12411]","**[Hendy Irawan](https://jira.spring.io/secure/ViewProfile.jspa?name=ceefour)** opened **[SPR-12411](https://jira.spring.io/browse/SPR-12411?redirect=false)** and commented  Given following configuration:  ```java @Configuration @Import(BippoMetaConfig.class) @EnableTransactionManagement @EnableWebMvc @EnableSwagger // TODO: waiting for https://github.com/spring-projects/spring-hateoas/issues/262 //@EnableHypermediaSupport(type=HypermediaType.HAL) // requires org.springframework.plugin:spring-plugin-core public class BippoMvcConfig extends WebMvcConfigurerAdapter { 	 	@Override 	public void configureContentNegotiation( 			ContentNegotiationConfigurer configurer) { 		super.configureContentNegotiation(configurer); 		configurer.defaultContentType(MediaTypes.HAL_JSON); 	} 	 } ```  ```java @RestController @Scope(""request"") @Api(value=""product"", description=""Product management."") @Transactional @RequestMapping(consumes=""application/hal+json"", produces=""application/hal+json"") public class ProductApiController { ```  ```java @RequestMapping(method=RequestMethod.GET, value=""product/{id}"") @ApiOperation(value=""Get one product with inventory quantity"", 	notes=""Get one product by ID, with inventory quantity"") public ProductResource findOneWithInventory(@PathVariable String id) { 	SecurityUtils.getSubject().checkRole(""admin""); 	log.debug(""Find one product by ID {}..."", id); 	final Product product = productRepo.findOne(StatusMask.RAW, id); 	if (product == null) { 		throw new ResourceNotFoundException(String.format(""Cannot find RAW product by ID '%s'"", id)); 	} 	return assembleWithInventory(product); } ```  Spring 4.1.0 in unit test throws exception:  ``` 05:24:53.711 [main] INFO  o.s.mock.web.MockServletContext - Initializing Spring FrameworkServlet '' 05:24:53.711 [main] INFO  o.s.t.w.s.TestDispatcherServlet - FrameworkServlet '': initialization started 05:24:53.734 [main] INFO  o.s.t.w.s.TestDispatcherServlet - FrameworkServlet '': initialization completed in 23 ms 05:24:53.755 [main] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Looking up handler method for path /product/tuneeca_t_0514008 05:24:53.760 [main] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolving exception from handler [null]: org.springframework.web.HttpMediaTypeNotSupportedException: Content type 'null' not supported 05:24:53.764 [main] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Invoking @ExceptionHandler method: public final org.springframework.http.ResponseEntity org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler.handleException(java.lang.Exception,org.springframework.web.context.request.WebRequest) 05:24:53.770 [main] INFO  i.c.b.p.rs.ProductApiControllerTest - Status: 415 null 05:24:53.770 [main] INFO  i.c.b.p.rs.ProductApiControllerTest - Type: null 05:24:53.770 [main] INFO  i.c.b.p.rs.ProductApiControllerTest - Content:  05:24:53.783 [Thread-8] INFO  o.s.w.c.s.GenericWebApplicationContext - Closing org.springframework.web.context.support.GenericWebApplicationContext@318ba8c8: startup date [Tue Nov 04 05:24:43 VET 2014]; root of context hierarchy ```  If the `@RequestMapping(consumes=""application/hal+json"", produces=""application/hal+json"")` annotation is removed from `ProductApiController` class, then the app works normally. However, the expected behavior is the controller class can set default consumes/produces, and individual methods can override `@RequestMapping` also.   ---  **Affects:** 4.1 GA","closed","status: declined,","spring-projects-issues","2014-11-04T02:04:15Z","2019-01-12T16:34:36Z"
"","16704","MockHttpServletRequest should honor ""Host"" header in getServerName() and getServerPort() [SPR-12088]","**[Hendy Irawan](https://jira.spring.io/secure/ViewProfile.jspa?name=ceefour)** opened **[SPR-12088](https://jira.spring.io/browse/SPR-12088?redirect=false)** and commented  #### Background  ###### Javadoc for ServletRequest.getServerName()  > Returns the host name of the server to which the request was sent. >  > It is the value of the part before "":"" in the `Host` header value, if any, or the resolved server name, or the server IP address.  ###### Javadoc for ServletRequest.getServerPort()  > Returns the port number to which the request was sent. >  > It is the value of the part after "":"" in the `Host` header value, if any, or the server port where the client connection was accepted on.  ---  #### Status Quo  Neither `getServerName()` nor `getServletPort()` in Spring's `MockHttpServletRequest` honor the `Host` header as defined in the Servlet spec.  ##### Example Mock MVC Unit test  ```java @Test public void register() throws Exception { 	ResultActions actions = mockMvc.perform(post(""/frequency/portaluser"") 			.header(""Host"", ""acme"") // this should be returned by HttpServletRequest.getServerName() 			.param(""clientHashCode"", ""123"") 			.param(""email"", ""ceefour@hendy.dev"") 			.accept(MediaType.TEXT_PLAIN)); 	MvcResult result = actions.andReturn(); 	log.info(""Status: {}"", result.getResponse().getStatus()); 	log.info(""Type: {}"", result.getResponse().getContentType()); 	log.info(""Content: {}"", result.getResponse().getContentAsString()); 	actions.andExpect(status().isOk()) 		.andExpect(content().string(""18978932619,0\n"")); } ```  When observed from the other end, getting `getServerName()` (implemented by `MockHttpServletRequest`) currently returns `localhost`, not `acme` as expected. The same applies to the `getServletPort()` method in `MockHttpServletRequest`.  ---  **Affects:** 3.0 GA  **Issue Links:** - #20686 MockHttpServletRequest with Host: set builds wrong getRequestURL()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/110be33337387e5f79ccbc773c09c0d45a51f9a8","closed","type: enhancement,","spring-projects-issues","2014-08-17T02:39:20Z","2019-01-13T05:46:30Z"
"","17064","Cache busting does not work when context path is different from / [SPR-12459]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-12459](https://jira.spring.io/browse/SPR-12459?redirect=false)** and commented  When the context path of an application is different from /, the","closed","type: bug,","spring-projects-issues","2014-11-21T01:45:48Z","2014-12-09T02:49:30Z"
"","16883","Make @Autowired optional on a single constructor of a class decorated with @Component [SPR-12278]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-12278](https://jira.spring.io/browse/SPR-12278?redirect=false)** and commented  When a class is decorated with `@Compoment`, or a more specialized annotation (`@Controller`, `@Service`, ...) and this class has only one constructor, the use of `@Autowired` on this constructor can be made optional: Spring has only one way to instantiate a bean of this class: using this constructor and injecting beans and/of values in the parameter of this constructor.  This woudl make the class more simple and 'Pojo'.  You find a lot of these classes in Spring Pet Clinic and Spring Sagan.  ---  **Affects:** 4.1 GA  **Issue Links:** - #11852 Support implicit autowiring for components with single non-default constructor (_**""is duplicated by""**_) - #18067 inject singleton constructor even if not annotated (_**""is duplicated by""**_) - #18381 Container tries to autowire dependencies despite explicit arguments given - #18050 Detect `@Autowired` constructors for configuration classes - #15526 Provide default-autowire like functionality for `@Configuration` - #19572 Spring should tolerate zero-argument constructors with javax.inject.Inject","closed","type: enhancement,","spring-projects-issues","2014-10-01T01:54:00Z","2019-01-13T05:44:35Z"
"","16800","Documentation typo in mvcUrl example [SPR-12186]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-12186](https://jira.spring.io/browse/SPR-12186?redirect=false)** and commented  In the paragraph 17.7.2 Building URIs to Controllers and methods from views  ``` Get Person ```  should be (extra single quotes)  ``` Get Person ```  ---  **Affects:** 4.1 GA  **Issue Links:** - #16860 Escape single quotes nested in double quotes in the reference manual  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b1e9577680114082cd8a7cc27153899522ff9236","closed","type: task,","spring-projects-issues","2014-09-12T04:14:55Z","2019-01-11T17:19:42Z"
"","16991","org.springframework.oxm.xmlbeans.XmlOptionsFactoryBean.setOptions(Map) makes inefficient use of keySet iterator [SPR-12383]","**[hangsub lim](https://jira.spring.io/secure/ViewProfile.jspa?name=hangsub)** opened **[SPR-12383](https://jira.spring.io/browse/SPR-12383?redirect=false)** and commented  org.springframework.oxm.xmlbeans.XmlOptionsFactoryBean.setOptions(Map) makes inefficient use of keySet iterator instead of entrySet iterator   ---  **Affects:** 4.1.1  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/679, and commits https://github.com/spring-projects/spring-framework/commit/ad2d5952c6dc85ffb3ff0b4297def2ccd1d24786","closed","type: enhancement,","spring-projects-issues","2014-10-27T19:21:28Z","2014-11-17T06:42:35Z"
"","16899","JavaMailSenderImpl - Set empty String params to null for setUsername and setPassword [SPR-12294]","**[Gunnar Hillert](https://jira.spring.io/secure/ViewProfile.jspa?name=hillert)** opened **[SPR-12294](https://jira.spring.io/browse/SPR-12294?redirect=false)** and commented  Even though **mail.smtp.auth** is set to **false**, it looks like that setting the **username** and **password** property on **JavaMailSenderImpl** may cause issues. (The JavaDoc for the respective setters indicates otherwise)  This may not be a bug per se but the current handling feels problematic (user-experience). The following configuration for example throws an exception:  ```                                                              ${mail.debugEnabled}                    ${mail.authenticationEnabled}                   ```  Using the following properties:  ``` mail.authenticationEnabled=false mail.user.id= mail.user.password= ```  Resulting in the following error:  ``` DEBUG: JavaMail version 1.4.4 DEBUG: successfully loaded resource: /META-INF/javamail.default.providers DEBUG: Tables of loaded providers DEBUG: Providers Listed By Class Name: {com.sun.mail.smtp.SMTPSSLTransport=javax.mail.Provider[TRANSPORT,smtps,com.sun.mail.smtp.SMTPSSLTransport,Sun Microsystems, Inc], com.sun.mail.smtp.SMTPTransport=javax.mail.Provider[TRANSPORT,smtp,com.sun.mail.smtp.SMTPTransport,Sun Microsystems, Inc], com.sun.mail.imap.IMAPSSLStore=javax.mail.Provider[STORE,imaps,com.sun.mail.imap.IMAPSSLStore,Sun Microsystems, Inc], com.sun.mail.pop3.POP3SSLStore=javax.mail.Provider[STORE,pop3s,com.sun.mail.pop3.POP3SSLStore,Sun Microsystems, Inc], com.sun.mail.imap.IMAPStore=javax.mail.Provider[STORE,imap,com.sun.mail.imap.IMAPStore,Sun Microsystems, Inc], com.sun.mail.pop3.POP3Store=javax.mail.Provider[STORE,pop3,com.sun.mail.pop3.POP3Store,Sun Microsystems, Inc]} DEBUG: Providers Listed By Protocol: {imaps=javax.mail.Provider[STORE,imaps,com.sun.mail.imap.IMAPSSLStore,Sun Microsystems, Inc], imap=javax.mail.Provider[STORE,imap,com.sun.mail.imap.IMAPStore,Sun Microsystems, Inc], smtps=javax.mail.Provider[TRANSPORT,smtps,com.sun.mail.smtp.SMTPSSLTransport,Sun Microsystems, Inc], pop3=javax.mail.Provider[STORE,pop3,com.sun.mail.pop3.POP3Store,Sun Microsystems, Inc], pop3s=javax.mail.Provider[STORE,pop3s,com.sun.mail.pop3.POP3SSLStore,Sun Microsystems, Inc], smtp=javax.mail.Provider[TRANSPORT,smtp,com.sun.mail.smtp.SMTPTransport,Sun Microsystems, Inc]} DEBUG: successfully loaded resource: /META-INF/javamail.default.address.map DEBUG: getProvider() returning javax.mail.Provider[TRANSPORT,smtp,com.sun.mail.smtp.SMTPTransport,Sun Microsystems, Inc] DEBUG SMTP: useEhlo true, useAuth false DEBUG SMTP: trying to connect to host ""localhost"", port 25, isSSL false 220 server1.ajug.org ESMTP Postfix (Ubuntu)^M DEBUG SMTP: connected to host ""localhost"", port: 25  EHLO server1^M 250-server1.ajug.org^M 250-PIPELINING^M 250-SIZE 10240000^M 250-VRFY^M 250-ETRN^M 250-STARTTLS^M 250-AUTH PLAIN LOGIN^M 250-AUTH=PLAIN LOGIN^M 250-ENHANCEDSTATUSCODES^M 250-8BITMIME^M 250 DSN^M DEBUG SMTP: Found extension ""PIPELINING"", arg """" DEBUG SMTP: Found extension ""SIZE"", arg ""10240000"" DEBUG SMTP: Found extension ""VRFY"", arg """" DEBUG SMTP: Found extension ""ETRN"", arg """" DEBUG SMTP: Found extension ""STARTTLS"", arg """" DEBUG SMTP: Found extension ""AUTH"", arg ""PLAIN LOGIN"" DEBUG SMTP: Found extension ""AUTH=PLAIN"", arg ""LOGIN"" DEBUG SMTP: Found extension ""ENHANCEDSTATUSCODES"", arg """" DEBUG SMTP: Found extension ""8BITMIME"", arg """" DEBUG SMTP: Found extension ""DSN"", arg """" DEBUG SMTP: Attempt to authenticate DEBUG SMTP: check mechanisms: LOGIN PLAIN DIGEST-MD5 NTLM AUTH LOGIN^M 334 VXNlcm5hbWU6^M ^M 334 UGFzc3dvcmQ6^M ^M 535 5.7.8 Error: authentication failed: generic failure^M 2014-10-03 00:32:45,976 ERROR | task-scheduler-6 |  |  | org.springframework.integration.handler.LoggingHandler  | [Payload MessageHandlingException content=org.springframework.messaging.MessageHandlingException: error occurred in message handler [org.springframework.integration.mail.MailSendingMessageHandler#0]][Headers={id=7366cd24-8a16-82cb-06bd-644fb7b526b8, timestamp=1412310765976}] | ```  If I remove:  ```   ```  Everything works.  ```                                                                      ${mail.debugEnabled}                         ${mail.authenticationEnabled}                            ```  Therefore, would it be better to set empty String params to null for **setUsername** and **setPasswords**? Or check more explicitly for whether **mail.smtp.auth** is **true** or **false**?  I found an unanswered forum posting from 2008 that describes the same issue.  http://forum.spring.io/forum/spring-projects/container/44657-possible-bug-in-javamailsenderimpl-auth  ---  **Affects:** 4.0.7  **Reference URL:** http://forum.spring.io/forum/spring-projects/container/44657-possible-bug-in-javamailsenderimpl-auth  **Issue Links:** - #16904 JavaMailSender.doSend() should more aggressively catch exceptions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cc02269c9f13f9857cb258743dd1310708d943eb","closed","type: enhancement,","spring-projects-issues","2014-10-03T07:06:25Z","2019-01-11T17:35:45Z"
"","16752","CssLinkResourceTransformer does not use resolveUrlPath properly [SPR-12137]","**[Guillaume DROUET](https://jira.spring.io/secure/ViewProfile.jspa?name=gdrouet)** opened **[SPR-12137](https://jira.spring.io/browse/SPR-12137?redirect=false)** and commented  Hi,  When the CssLinkResourceTransformer use the ResourceResolverChain#resolveUrlPath method to retrieve a resource referenced with url or `@import`, it gives as parameter the complete path. This is not what the ResourceUrlProvider does: before calling the chain, it removes the beginning of the path corresponding to the matching pattern.  Imagine you have the following configuration: registry.addResourceHandler(""/css/**"").addResourceLocations(""classpath:/statics/css/"")  If I resolve '/css/app.css' with ResourceUrlProvider, PathResourceResolver  receives 'app.css' to resolve.  Now imagine in app.css a statement like this: `@import` ""/css/app2.css""; In that case PathResourceResolver receives '/css/app2.css' from CssLinkResourceTransformer instead of 'app2.css'. The chain will return null and URL won't be transformed.  CssLinkResourceTransformer should rely on the same mechanism as ResourceUrlProvider.   ---  **Affects:** 4.1 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/125ae99035653496efbf6d03270bbbdde5828d3a","closed","type: bug,","spring-projects-issues","2014-08-30T12:43:23Z","2014-09-04T05:31:16Z"
"","16749","Call to addResourceLocations should not always be mandatory [SPR-12133]","**[Guillaume DROUET](https://jira.spring.io/secure/ViewProfile.jspa?name=gdrouet)** opened **[SPR-12133](https://jira.spring.io/browse/SPR-12133?redirect=false)** and commented  Since the user can specify its own PathResourceResolver (#16740), its underlying implementation may not always require resource locations to be configured. In that case, an unecessary call to addResourceLocations must be done.   ---  **Affects:** 4.1 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2ef20f63bc97cb4612befdc9d63cab1554694992, https://github.com/spring-projects/spring-framework/commit/4df05d1f98ade553c085ebd811f806c77f090a7d","closed","type: enhancement,","spring-projects-issues","2014-08-28T10:28:51Z","2019-01-14T05:15:24Z"
"","16740","Provide full control over the registration of resolvers and transformers in ResourceHandlerRegistration [SPR-12124]","**[Guillaume DROUET](https://jira.spring.io/secure/ViewProfile.jspa?name=gdrouet)** opened **[SPR-12124](https://jira.spring.io/browse/SPR-12124?redirect=false)** and commented  ResourceHandlerRegistration is designed to be extended, however it is currently not possible to specify any other implementation. In some cases, we may desire to specialize methods like getResourceResolvers and getResourceTransformers (which are already in a protected access level). For instance, we can intercept all created ResourceResolver and ResourceTransformer instances in order to know what elements will be executed later in the chains of responsibility.  So the ResourceHandlerRegistry should expose an API like this:  ObjectFactory\ factory = ...; registry.resourceHandlerRegistrationFactory(factory).addResourceHandler(""/**"");    ---  **Affects:** 4.1 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fbfb7a3c482443c39a74058446e5d1a9a2c73807, https://github.com/spring-projects/spring-framework/commit/0b02551e2f8f8ae7107b2303c10432542a201fbe","closed","type: enhancement,","spring-projects-issues","2014-08-26T13:28:36Z","2014-09-04T05:31:18Z"
"","17040","GenericGroovyApplicationContext propagates BeanDefinitionParsingException only when context file is named 'beans.groovy' [SPR-12435]","**[Grzegorz Ćwiak](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorz.cwiak)** opened **[SPR-12435](https://jira.spring.io/browse/SPR-12435?redirect=false)** and commented  GenericGroovyApplicationContext propagates BeanDefinitionParsingException only when context file is named 'beans.groovy'  Given: incorrect groovy bean config:  beans = {      foo String, 'hello'  }  Here '=' sign in this place is a mistake.  When instantiating the context: GenericGroovyApplicationContext context = new GenericGroovyApplicationContext(""classpath:beans.groovy"");  It behaves differently depending on file name of the corrupted groovy config: - when it is named in any other way than 'beans.groovy', e.g. 'myServiceContext.groovy', than no exception is thrown, the context starts up but without any beans created, context.getBeanDefinitionCount() returns 0.  - when it is named 'beans.groovy' the following error is reported:   org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Error evaluating Groovy script: startup failed:   beans.groovy: 1: you tried to assign a value to the class 'beans'. Do you have a script with this name?   @ line 1, column 1.   beans = {   ^  1 error  Offending resource: class path resource [beans.groovy]; nested exception is org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed: beans.groovy: 1: you tried to assign a value to the class 'beans'. Do you have a script with this name? @ line 1, column 1. beans = { ^  1 error      at org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:309)     at org.codehaus.groovy.control.CompilationUnit.applyToSourceUnits(CompilationUnit.java:927)     at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:575)     at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:524)     at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:279)     at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:258)     at groovy.lang.GroovyShell.parseClass(GroovyShell.java:613)     at groovy.lang.GroovyShell.parse(GroovyShell.java:625)     at groovy.lang.GroovyShell.parse(GroovyShell.java:605)     at groovy.lang.GroovyShell.evaluate(GroovyShell.java:586)     at org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader.loadBeanDefinitions(GroovyBeanDefinitionReader.java:229)     at org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader.loadBeanDefinitions(GroovyBeanDefinitionReader.java:196)     at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180)     at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:216)     at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:187)     at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:251)     at org.springframework.context.support.GenericGroovyApplicationContext.load(GenericGroovyApplicationContext.java:195)    ---  **Affects:** 4.0.2","closed","type: enhancement,","spring-projects-issues","2014-11-14T02:14:20Z","2014-12-09T02:49:27Z"
"","16424","getTestExecutionListeners() doesn't detect NoClassDefFoundError within BeanInstantiationException [SPR-11804]","**[Greg Allen](https://jira.spring.io/secure/ViewProfile.jspa?name=greg.allen@pobox.com)** opened **[SPR-11804](https://jira.spring.io/browse/SPR-11804?redirect=false)** and commented  Related to #15971  run demo.ApplicationTests with an absolutely vanilla spring-boot-starter-parent 1.0.2 project (boot+web+test), when running the test from Eclipse JUnit runner. Java 1.7.  thrown Exception is BeanInstantiationException, but catch block has catch NoClassDefFoundError  Workaround is to add `@TestExecutionListeners`(DependencyInjectionTestExecutionListener.class) to ApplicationTests  in org.springframework.test.context.TestContextManager.retrieveTestExecutionListeners(Class) after 11:38:08.568 [main] DEBUG o.s.test.context.TestContextManager - `@TestExecutionListeners` is not present for class [class demo.ApplicationTests]: using defaults.  org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.test.context.transaction.TransactionalTestExecutionListener]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/transaction/annotation/AnnotationTransactionAttributeSource at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:164) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:105) at org.springframework.test.context.TestContextManager.retrieveTestExecutionListeners(TestContextManager.java:230) at org.springframework.test.context.TestContextManager.\(TestContextManager.java:120) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTestContextManager(SpringJUnit4ClassRunner.java:120) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.\(SpringJUnit4ClassRunner.java:109) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:526) at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:29) at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:21) at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59) at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26) at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59) at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:26) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.\(JUnit4TestReference.java:33) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestClassReference.\(JUnit4TestClassReference.java:25) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createTest(JUnit4TestLoader.java:48) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.loadTests(JUnit4TestLoader.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:452) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: java.lang.NoClassDefFoundError: org/springframework/transaction/annotation/AnnotationTransactionAttributeSource at org.springframework.test.context.transaction.TransactionalTestExecutionListener.\(TransactionalTestExecutionListener.java:108) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:526) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:148) ... 23 more Caused by: java.lang.ClassNotFoundException: org.springframework.transaction.annotation.AnnotationTransactionAttributeSource at java.net.URLClassLoader$1.run(URLClassLoader.java:366) at java.net.URLClassLoader$1.run(URLClassLoader.java:355) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:354) at java.lang.ClassLoader.loadClass(ClassLoader.java:425) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308) at java.lang.ClassLoader.loadClass(ClassLoader.java:358) ... 29 more  ---  **Affects:** 3.2.8, 4.0.3, 4.0.4  **Issue Links:** - #15971 Handle NoClassDefFoundError for TestExecutionListeners consistently in the TestContext framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1285467fe64807ce218ef7fc959b54923d7c5f9b, https://github.com/spring-projects/spring-framework/commit/f053ce52eaad7529e8d6a5a34fa5ce1a7bedcab1, https://github.com/spring-projects/spring-framework/commit/1120680c65a2a0c6a6b89c29141e94d10efeca55, https://github.com/spring-projects/spring-framework/commit/2619955fc30dc401f46a01fdc66a9ae3bedd9956, https://github.com/spring-projects/spring-framework/commit/5e05a84d81730f94205dced536db7fd9d6db9117, https://github.com/spring-projects/spring-framework/commit/41ed228450f82abb544858d3d22743423e281fca, https://github.com/spring-projects/spring-framework/commit/a2ef2c9d3e37ccf38a995935d85c1d9cdb70b44d  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: bug,","spring-projects-issues","2014-05-19T04:05:56Z","2019-01-14T05:16:22Z"
"","16448","Support for java.util.Optional as a @RequestParam [SPR-11829]","**[Graham Cox](https://jira.spring.io/secure/ViewProfile.jspa?name=sazzer)** opened **[SPR-11829](https://jira.spring.io/browse/SPR-11829?redirect=false)** and commented  Java 8 adds the new java.util.Optional type to represent values that might or might not have a value. I've just tried using this as a controller parameter that is annotated with `@RequestParam` and it unfortunately doesn't work.  If the request parameter is missing then the method parameter comes through as null, and if it is present then Spring throws an java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [java.util.Optional]: no matching editors or conversion strategy found.  It would be very useful if these came through as either Optional.EMPTY or Optional.of(param). I am currently doing this right at the top of my controller methods - essentially I'm wrapping the values in Optional.ofNullable() - but if Spring did this automatically that would be fantastic.  ---  **Affects:** 4.0.5  **Issue Links:** - [INT-3516](https://jira.spring.io/browse/INT-3516) Support JDK8 Optional When Binding Messages to Service Methods - #16452 Support for java.util.Optional with `@Inject` (a la `@Autowired`'s required=false) - #17245 Support for java.util.Optional as a `@RequestPart` - #17997 Request parameters cannot bind to Optional - #19574 Support for java.util.Optional as a `@RequestBody`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0dc6082b01606c3c996b728541467ba5104b747f","closed","type: enhancement,","spring-projects-issues","2014-05-29T05:02:48Z","2019-01-13T06:53:47Z"
"","17077","YamlPropertiesFactoryBean doesn't preserve ordering of YAML documents [SPR-12471]","**[Graeme Rocher](https://jira.spring.io/secure/ViewProfile.jspa?name=graemerocher)** opened **[SPR-12471](https://jira.spring.io/browse/SPR-12471?redirect=false)** and commented  Because of this code:  ``` final Properties result = new Properties(); process(new MatchCallback() {      @Override      public void process(Properties properties, Map map) {           result.putAll(properties);      } }); ```  Ordering in YAML documents is broken since a Properties object doesn't retain ordering. This needs to be done with a LInkedHashMap instead and in fact if you look at the map passed into the `process` method it is a LinkedHashMap.   ---  **Affects:** 4.1.2  **Reference URL:** https://github.com/grails/grails-core/commit/d9670e1d524ecfb131f87c3981bef1ac0edd408b","closed","status: invalid,","spring-projects-issues","2014-11-26T02:07:10Z","2019-01-12T05:25:01Z"
"","16762","CachingConnectionFactory should catch exceptions on logical close [SPR-12148]","**[Gordon Daugherty](https://jira.spring.io/secure/ViewProfile.jspa?name=gjd6640)** opened **[SPR-12148](https://jira.spring.io/browse/SPR-12148?redirect=false)** and commented  When an application uses a CachingConnectionFactory it will encounter the issue shown in this stack trace if the underlying connection is killed AND the client tries to use the JMS Session object:  Caused by: javax.jms.IllegalStateException: Session is closed at com.tibco.tibjms.TibjmsxSessionImp.getTransacted(TibjmsxSessionImp.java:4837) at org.springframework.jms.connection.CachingConnectionFactory$CachedSessionInvocationHandler.logicalClose(CachingConnectionFactory.java:398) at org.springframework.jms.connection.CachingConnectionFactory$CachedSessionInvocationHandler.invoke(CachingConnectionFactory.java:298) at $Proxy30.close(Unknown Source) at com.mycorp.client.core.ServiceProxyImpl.handleDisconnect(ServiceProxyImpl.java:226) at com.mycorp.client.core.ServiceProxyImpl.sendRequest(ServiceProxyImpl.java:180) ... 29 more  One of my teammates was able to reproduce this by killing the Connection at the broker (Tibco v8) after exercising the software so that the cache contained some sessions.  We're using ""reconnectOnException=true"" (the default for CachingConnectionFactory).  I don't see any code in the CachingConnectionFactory that would catch exceptions thrown by javax.jms.Session.getTransacted(). It seems that the client should be able to successfully return a bad proxied session to the pool by calling ProxiedSession.close() and the pool should not ever hand that session out again.  Maybe I don't properly understand the responsibilities assigned to the code that's using the CachingConnectionFactory but I don't see a good way to handle this scenario from the client code's perspective. You don't want multiple threads discovering that they're holding a bad session and each one calling resetConnection() since they'd step on each other.  The code that throws the exception shown in the stack trace above appears to exist in all spring-jms versions after v2.5.5.  The code in question was introduced as part of this enhancement: #9706  ---  **Affects:** 3.2.10, 4.1 RC2  **Issue Links:** - #9706 CachingConnectionFactory does not rollback on Session.close() - #20995 CachingConnectionFactory - Invalid session in session cache  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/82f8b4330c99e104819fc37d1901a2c806630f79, https://github.com/spring-projects/spring-framework/commit/42557743e8f41929d967699d0fc10a9a3f20d56d, https://github.com/spring-projects/spring-framework/commit/8543a5548eaa8b130ce079fd9b639222239c6fd9  **Backported to:** [4.0.7](https://github.com/spring-projects/spring-framework/milestone/119?closed=1), [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)","closed","type: bug,","spring-projects-issues","2014-09-03T14:15:50Z","2019-01-14T05:15:20Z"
"","16500","Support Converter in @MessageMapping/@SubscribeMapping methods [SPR-11881]","**[Gerrit Hübbers](https://jira.spring.io/secure/ViewProfile.jspa?name=abdull)** opened **[SPR-11881](https://jira.spring.io/browse/SPR-11881?redirect=false)** and commented  From ""normal"" HTTP-based `@Controller` s, I'm used to methods such as the following:  ``` @ResponseBody @RequestMapping(value = ""/users/{user}"", method = RequestMethod.GET) public User getFbUser(@PathVariable User user) {    // ...   return user } ```  ``` @Component public class UserConverter implements 		Converter {  	@Inject 	private UserRepository repository; 	 	@Override 	public User convert(String source) { 		return repository.findUser(source); 	}  } ```  ... I noticed that currently, `@MessageMapping` - / `@SubscribeMapping` -annotated methods don't support `org.springframework.core.convert.converter.Converter` for automatically converting `@DestinationVariable` -annotated parameters to the correct type.  I'd be nice if this was supported, as then there is no need to write additional messaging-specific converters.   ---  **Affects:** 4.0.5","closed","status: bulk-closed,","spring-projects-issues","2014-06-17T03:12:21Z","2019-01-12T02:29:44Z"
"","17082","Misleading documentation for SqlRowSet [SPR-12476]","**[Germann Arlington](https://jira.spring.io/secure/ViewProfile.jspa?name=garlington)** opened **[SPR-12476](https://jira.spring.io/browse/SPR-12476?redirect=false)** and commented  Source level (self) documentation shoud be corrected for  boolean isBeforeFirst() throws InvalidResultSetAccessException \ Retrieves whether the cursor is after the first row of this RowSet. Returns: true if the cursor is after the first row, false otherwise \  ---  **Affects:** 3.2.12, 4.0.8, 4.1.2  **Reference URL:** http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/rowset/SqlRowSet.html#isBeforeFirst--  **Issue Links:** - #17086 Update SqlRowSet interface with JDBC 4.x ResultSet additions  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1), [3.2.13](https://github.com/spring-projects/spring-framework/milestone/101?closed=1)","closed","type: documentation,","spring-projects-issues","2014-11-27T02:32:03Z","2019-01-11T19:37:17Z"
"","17053","Java 8 introspection causes breakage with FreeMarker Configuration bean [SPR-12448]","**[George Turner Jr](https://jira.spring.io/secure/ViewProfile.jspa?name=gtexcalibur)** opened **[SPR-12448](https://jira.spring.io/browse/SPR-12448?redirect=false)** and commented  When using the following configuration for a Freemarker template in Java 8, Spring throws a java.beans.IntrospectionException. This configuration works fine with Java 7.  ```xml                                                                                                                                                               ```  ---  **Affects:** 4.0.5  **Issue Links:** - #16801 Java 8 bridge method handling can lead to false positive detection of autowired annotations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/282adeda88290d4791b16ebb76e35b12226593a2, https://github.com/spring-projects/spring-framework/commit/1f45dd297d320c1ca5d1a2a215c487d9576d7845  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","in: core,","spring-projects-issues","2014-11-17T07:59:00Z","2019-01-11T19:28:51Z"
"","16504","URIComponentsBuilder shares state across calls of .build() [SPR-11885]","**[George Shan Lyons](https://jira.spring.io/secure/ViewProfile.jspa?name=gprslyons)** opened **[SPR-11885](https://jira.spring.io/browse/SPR-11885?redirect=false)** and commented  In previous versions, the following was possible:  ```java final UriComponentsBuilder commonUri = UriComponentsBuilder.fromHttpUrl(""http://thing.com"").pathSegment(""/somePath""); UriComponents url1 = commonUri.build(); UriComponents url2 = commonUri.pathSegment(""additionalPath"").build(); ```  Unfortunately, the state is now internally shared, I believe through a List of PathComponentBuilders, such that the change to the builder in url2 affects url1.  The expectation is that, once build is called, the UriComponents instance is no longer mutable through the builder.  Workaround is simple, just create 2 builders.  ---  **Affects:** 3.2.8  **Issue Links:** - #14904 UriComponentsBuilder and ServletUriComponentsBuilder generate URLs with empty segments  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/247771ce9110cffb361e16591758ee45980b2df9, https://github.com/spring-projects/spring-framework/commit/d239016a8c831e98fa615a4ef7ea6f664121ffa2, https://github.com/spring-projects/spring-framework/commit/c73ac075c4849917564c84e2d2b1d35046e3c205  **Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)","closed","type: bug,","spring-projects-issues","2014-06-18T16:41:46Z","2019-01-11T22:15:43Z"
"","16747","Introduce proxy-based REST client similar to HttpInvokerProxyFactoryBean [SPR-12131]","**[George Georgovassilis](https://jira.spring.io/secure/ViewProfile.jspa?name=g.georgovassilis)** opened **[SPR-12131](https://jira.spring.io/browse/SPR-12131?redirect=false)** and commented  This ticket proposes a new component that will work similarly to HttpInvokerProxyFactoryBean and allows binding a java interface to a remote REST/JSON service. Annotations on the interface and its methods would define the mapping of method invocations to concrete HTTP requests to the REST service.  The component would be a proxy factory which is given the mapping (possibly via a class name) and returns proxies which pass method invocations to the remote REST service.  For a possible implementation see https://github.com/ggeorgovassilis/spring-rest-invoker  ---  **Affects:** 4.0.6, 4.3.3  **Reference URL:** https://groups.google.com/forum/#!topic/spring-framework-contrib/HTja1bE1TWY  **Issue Links:** - #10929 Spring MVC REST: Provide interface definition model for generating HTTP client interface proxies wrapping RestTemplates (_**""duplicates""**_) - #15682 Enable REST controller method parameter annotations on an interface - #22154 `@RequestMapping` without `@Controller` registered as handler - #16827 Consider reusing `@RequestMapping` annotations as an interface for HTTP clients - #16712 Read RestTemplate Accept header from entity annotation  4 votes, 9 watchers","closed","status: superseded,","spring-projects-issues","2014-08-28T03:44:21Z","2022-05-20T10:41:12Z"
"","16472","Bad reference to HttpClient homepage [SPR-11853]","**[Gena Makhomed](https://jira.spring.io/secure/ViewProfile.jspa?name=csdoc)** opened **[SPR-11853](https://jira.spring.io/browse/SPR-11853?redirect=false)** and commented  In Spring Framework reference 21.4 bad url detected:  > Under the hood, Spring uses either the standard facilities provided by J2SE to perform HTTP calls or `Commons HttpClient`. Use the latter if you need more advanced and easy-to-use functionality. Refer to `jakarta.apache.org/commons/httpclient` for more info.  Valid reference is `https://hc.apache.org/httpcomponents-client-ga/`  Tre url `jakarta.apache.org/commons/httpclient` point to legacy Apache project `Commons HttpClient` which already is EOL:  > End of life > The `Commons HttpClient` project is now end of life, and is no longer being developed. It has been replaced by the Apache HttpComponents project in its `HttpClient` and HttpCore modules, which offer better performance and more flexibility.  P.S. also, `Commons HttpClient` is invalid name, valid name is `HttpClient`.  P.P.S. name `Commons HttpClient` can be observed in two different places in documentation: 21.4 and 21.4.2.   ---  **Affects:** 4.0.5  **Reference URL:** https://hc.apache.org/httpcomponents-client-ga/  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3fb05017a1d22bd49b79a395daedd8101c55d02d, https://github.com/spring-projects/spring-framework/commit/af4621d99608d34076112fc6eab22bea921e16be","closed","type: documentation,","spring-projects-issues","2014-06-06T10:46:12Z","2014-07-08T00:21:27Z"
"","16456","Create utility class HttpHeader with HTTP header names constants [SPR-11837]","**[Gena Makhomed](https://jira.spring.io/secure/ViewProfile.jspa?name=csdoc)** opened **[SPR-11837](https://jira.spring.io/browse/SPR-11837?redirect=false)** and commented  In public class HttpHeaders all standard HTTP header names now declared as private static final. Feature request: make these standard HTTP header names public static final in utility class HttpHeader, for ability to easy reuse these constants in user code, for example:  ```java @RequestMapping(value = ""/register/*"", method = RequestMethod.POST) public void registerUnknownContentType(@RequestHeader(HttpHeader.CONTENT_TYPE) String contentType) {     throw new UnknownContentTypeException(contentType); } ```  or  ```java HttpHeaders requestHeaders = new HttpHeaders(); requestHeaders.setContentType(MediaType.APPLICATION_JSON); requestHeaders.set(HttpHeader.USER_AGENT, userAgent); ... restTemplate.exchange(serviceUrl, HttpMethod.POST, new HttpEntity(request, requestHeaders), RESPONSE_TYPE_REFERENCE); ```  For example, this already done in public class MediaType from Spring Framework and it is very useful for reusing these constants in user code.  Ideally - make constants for all most commonly used HTTP header names, from http://en.wikipedia.org/wiki/List_of_HTTP_header_fields or even almost all most frequently used HTTP header hames from http://www.iana.org/assignments/message-headers/message-headers.xhtml  ---  **Affects:** 4.0.5  **Reference URL:** http://en.wikipedia.org/wiki/List_of_HTTP_header_fields  **Issue Links:** - #16371 Make constants in HttpHeaders public (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2014-05-30T05:09:25Z","2019-01-11T22:18:46Z"
"","16386","MockHttpServletRequest should not require setContent for non-null getInputStream() result [SPR-11764]","**[Gena Makhomed](https://jira.spring.io/secure/ViewProfile.jspa?name=csdoc)** opened **[SPR-11764](https://jira.spring.io/browse/SPR-11764?redirect=false)** and commented  Yet another filter, and unit test failed with exception  ``` java.lang.IllegalArgumentException: No InputStream specified 	at org.springframework.util.Assert.notNull(Assert.java:112) 	at org.springframework.util.StreamUtils.copy(StreamUtils.java:118) 	at org.springframework.util.StreamUtils.copyToByteArray(StreamUtils.java:56) 	at com.pb.ivrcgate.util.filter.HttpRequestWrapper.(HttpRequestWrapper.java:27) 	at com.pb.ivrcgate.util.filter.HttpDumperFilter.doFilterInternal(HttpDumperFilter.java:25) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:137) 	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:141) 	at com.pb.ivrcgate.controller.GateControllerTest.badUri(GateControllerTest.java:40) ```  Filter code fragment:  ``` public class HttpDumperFilter extends OncePerRequestFilter {      @Override     protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain) throws ServletException, IOException {         try {             HttpRequestWrapper request = new HttpRequestWrapper(httpServletRequest);             HttpResponseWrapper response = new HttpResponseWrapper(httpServletResponse);             filterChain.doFilter(request, response);             // ...         } catch (Exception ex) {             logger.error("""", ex);             throw ex;         }     }     // ... } ```  `HttpRequestWrapper` code fragment:  ``` public class HttpRequestWrapper extends HttpServletRequestWrapper {      private final byte[] content;      public HttpRequestWrapper(HttpServletRequest request) throws IOException {         super(request);         this.content = StreamUtils.copyToByteArray(request.getInputStream()); // line #27     }     // ... } ```  In compliance with Servlet API and documentation - `MockMvc` must return object of class ServletInputStream, and can't return null.  For example, tomcat return ServletInputStream object even for GET requests, and never return null from getInputStream() method.  Looks like this is bug in `MockMvc`.  ---  **Affects:** 4.0.4  **Issue Links:** - #16382 MockMvc ignores HTTP status code overridden by filter - #19780 MockHttpServletRequest.getReader() returns null in case of no content","closed","type: enhancement,","spring-projects-issues","2014-05-06T04:15:41Z","2019-01-11T21:16:41Z"
"","16382","MockMvc ignores HTTP status code overridden by filter [SPR-11760]","**[Gena Makhomed](https://jira.spring.io/secure/ViewProfile.jspa?name=csdoc)** opened **[SPR-11760](https://jira.spring.io/browse/SPR-11760?redirect=false)** and commented  The full source code for `HttpStatusOverrideFilter` is available in the attachment.  In production env., all works fine, but when I use JUnit + `MockMvc`, the HTTP Status Code overridden by my filter gets ignored.  Test code fragment:  ``` @Test public void badUri() throws Exception {     mockMvc.perform(post(""/unknown-request-uri"")             .andExpect(status().is(equalTo(230))); } ```  Controller code fragment:  ``` HttpHeaders httpHeaders = new HttpHeaders(); httpHeaders.set(X_HTTP_STATUS_OVERRIDE, ""230""); return new ResponseEntity(""none"", httpHeaders, HttpStatus.INTERNAL_SERVER_ERROR); ```  In the production env., the filter works fine, and the HTTP status code is 230. With JUnit + `MockMvc`, the HTTP status code is 500, and the assertion fails.  Looks like this is bug in `MockMvc`.  Unit-test log fragment:  ``` o.s.test.web.servlet.TestDispatcherServlet | Successfully completed request c.p.i.util.filter.HttpStatusOverrideFilter | Status overridden '500' => '230' .t.c.s.DirtiesContextTestExecutionListener | After test method: context [DefaultTestContext@1895852 testClass = GateControllerTest, testInstance = com.pb.ivrcgate.controller.GateControllerTest@59e71, testMethod = badUri@GateControllerTest, testException = java.lang.AssertionError: Response status Expected:       but: was , mergedContextConfiguration = [WebMergedContextConfiguration@f7e9dd testClass = GateControllerTest, locations = '{classpath:/spring/context.xml}', classes = '{}', contextInitializerClasses = '[]', activeProfiles = '{dev}', resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.test.context.web.WebDelegatingSmartContextLoader', parent = [null]]], class dirties context [false], class mode [null], method dirties context [false]. ```  ---  **Affects:** 4.0.4  **Attachments:** - [HttpStatusOverrideFilter.java](https://jira.spring.io/secure/attachment/22025/HttpStatusOverrideFilter.java) (_3.39 kB_) - [HttpStatusOverrideFilter.java](https://jira.spring.io/secure/attachment/21989/HttpStatusOverrideFilter.java) (_4.12 kB_)  **Issue Links:** - #15486 Provide better intercepting model for controllers returning `@ResponseBody` - #16386 MockHttpServletRequest should not require setContent for non-null getInputStream() result","closed","status: declined,","spring-projects-issues","2014-05-05T12:38:24Z","2019-01-13T06:54:12Z"
"","17089","Default conversion support for EnumSet / EnumMap [SPR-12483]","**[geert](https://jira.spring.io/secure/ViewProfile.jspa?name=gslobbestael)** opened **[SPR-12483](https://jira.spring.io/browse/SPR-12483?redirect=false)** and commented  Default converters cannot handle EnumSets. A form object with a EnumSet property throws an exception.  Failed to convert property value of type java.lang.String[] to required type java.util.EnumSet for property typeProjecten; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type java.lang.String[] to type `@org`.hibernate.validator.constraints.NotEmpty java.util.EnumSet for value {CAT, CONFERENCE}; nested exception is java.lang.IllegalArgumentException: Could not instantiate Collection type: java.util.EnumSet  This issue has been resolved in Spring DATA MongoDB (https://jira.spring.io/browse/DATAMONGO-833). It would be nice if it was solved in Spring Framework itself  ---  **Affects:** 3.2.12  **Issue Links:** - #17142 CollectionFactory API is not type-safe (_**""is depended on by""**_) - [DATACMNS-613](https://jira.spring.io/browse/DATACMNS-613) Remove custom CollectionFactory once we migrate to Spring 4.1.x - #17138 CollectionFactory should create empty EnumSets and EnumMaps  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aec284a4ca4db3adf6f7d8ae9da6ddc30ce367f1, https://github.com/spring-projects/spring-framework/commit/bfbd25a0e94ab789171d331a121812468cbeb154, https://github.com/spring-projects/spring-framework/commit/7635e7b7f2a39d735daea940af331c19aca730a1, https://github.com/spring-projects/spring-framework/commit/fef4cd0ed6ff98c53874bb356e74ce51b1a50b91","closed","type: enhancement,","spring-projects-issues","2014-11-28T07:33:13Z","2019-01-11T19:36:36Z"
"","16979","Two trailing slashes and the default servlet cannot resolve to a controller [SPR-12372]","**[Gaurav Khanna](https://jira.spring.io/secure/ViewProfile.jspa?name=gk2@hotmail.com)** opened **[SPR-12372](https://jira.spring.io/browse/SPR-12372?redirect=false)** and commented  If we map the DispatcherServlet as the default servlet as in: \ \spring\ \/\ \  And the controller has the request mapping as in: `@RequestMapping`(""/controller/**"")  And if we have a GET request with two trailing slashes as in: http://xxx.xxx/app/controller/REQ//  [URI 1]  Then the default servlet (spring) is not able to find a mapping for it and we get a 404. However if we have a single trailing ""/"" then it works. Or if have multiple slashes anywhere in the REQ (together or separated) that works fine too. For instance: http://xxx.xxx/app/controller/REQ//A  [URI 2]  [Here ""A"" could be just one character except the ""/""]  Also, if we make the DispatcherServlet map to ""/*"" then two or more trailing ""/"" slashes work as well.  Should the default servlet (spring) not map URI 1 above without the wildcard in web.xml?  ---  **Affects:** 3.2.1  **Issue Links:** - #15100 404 error with double slash in context path (_**""is duplicated by""**_) - #15845 RequestMapping maps double-slashes to single slashes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e02719e5e3abe088878d842a26919e76a0876da7  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-10-23T13:15:55Z","2019-01-11T19:24:23Z"
"","17168","PayloadArgumentResolver enforces Validator unnecessarily [SPR-12567]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-12567](https://jira.spring.io/browse/SPR-12567?redirect=false)** and commented  The `PayloadArgumentResolver` constructor asserts that the `Validator` is not null, but the `validate()` method treats a null `Validator` as a no-op.  This forces users, such as the `SimpAnnotationMethodMessageHandler` and `DefaultMessageHandlerMethodFactory` to inject a `NoOpValidator` (private static class in each case).  Given the protection in the `validate()` method, it appears that the assertion can be relaxed (and perhaps add a ctor that just takes the converter).   ---  **Affects:** 4.0.8, 4.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ed0e2f4445c1f3e90b8eb522a0a916dcdff00b3f, https://github.com/spring-projects/spring-framework/commit/9362d0d5472e9b2c6d6ee852d17ba191fda2b416  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-12-23T10:39:41Z","2014-12-30T05:21:46Z"
"","16975","Improve Constructor Resolver Diagnostics [SPR-12543]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-12543](https://jira.spring.io/browse/SPR-12543?redirect=false)** and commented  ``` throw new BeanCreationException(mbd.getResourceDescription(), beanName, 		""Could not resolve matching constructor "" + 		""(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)""); ```  It would be helpful if the above exception (in `ConstuctorResolver` ) included the argument types in `argToUse`.  ---  **Affects:** 4.1.3  **Issue Links:** - #18557 Consistent resolution of factory method exceptions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d55af2b445cd3b1c08a7038de4db8e903c36083f","closed","type: enhancement,","spring-projects-issues","2014-12-13T08:02:34Z","2019-01-11T18:28:12Z"
"","22187","Missing Id in Jms Endpoint [SPR-12425]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-12425](https://jira.spring.io/browse/SPR-12425?redirect=false)** and commented  26.4.2 describes how to programmatically set up a JMS endpoint. However, the `JmsListenerEndpointRegistrar` requires an `id` property. See line 158.   ---  **Affects:** 4.1.2  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/692, and commits https://github.com/spring-projects/spring-framework/commit/aa892d97e0fa74fc8b304d0c6afac53b701e04a5, https://github.com/spring-projects/spring-framework/commit/4942c5c1fb792806b3bcc9fa6da2beaf44d30bba","closed","type: documentation,","spring-projects-issues","2014-11-12T12:10:33Z","2014-12-09T02:49:25Z"
"","16835","NPE in PropertyOrFieldReference [SPR-12221]","**[Franz Neumann](https://jira.spring.io/secure/ViewProfile.jspa?name=franz.neumann)** opened **[SPR-12221](https://jira.spring.io/browse/SPR-12221?redirect=false)** and commented  We use Spring Expressions in conjuction with Spring Integration and starting Spring Framwork version 4.1 we've found such Exception in Logs:  ``` org.springframework.messaging.MessageHandlingException: Expression evaluation failed: payload.site           at org.springframework.integration.util.AbstractExpressionEvaluator.evaluateExpression(AbstractExpressionEvaluator.java:133)         at org.springframework.integration.handler.ExpressionEvaluatingMessageProcessor.processMessage(ExpressionEvaluatingMessageProcessor.java:76)         at org.springframework.integration.router.AbstractMessageProcessingRouter.getChannelKeys(AbstractMessageProcessingRouter.java:59)         at org.springframework.integration.router.AbstractMappingMessageRouter.determineTargetChannels(AbstractMappingMessageRouter.java:183)         at org.springframework.integration.router.AbstractMessageRouter.handleMessageInternal(AbstractMessageRouter.java:166)         at org.springframework.integration.handler.AbstractMessageHandler.handleMessage(AbstractMessageHandler.java:78)         at sun.reflect.GeneratedMethodAccessor197.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:606)         at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)         at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)         at org.springframework.integration.monitor.SimpleMessageHandlerMetrics.handleMessage(SimpleMessageHandlerMetrics.java:106)         at org.springframework.integration.monitor.SimpleMessageHandlerMetrics.invoke(SimpleMessageHandlerMetrics.java:86)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)         at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)         at com.sun.proxy.$Proxy30.handleMessage(Unknown Source)         at org.springframework.integration.endpoint.PollingConsumer.handleMessage(PollingConsumer.java:74)         at org.springframework.integration.endpoint.AbstractPollingEndpoint.doPoll(AbstractPollingEndpoint.java:205)         at org.springframework.integration.endpoint.AbstractPollingEndpoint.access$000(AbstractPollingEndpoint.java:55)         at org.springframework.integration.endpoint.AbstractPollingEndpoint$1.call(AbstractPollingEndpoint.java:149)         at org.springframework.integration.endpoint.AbstractPollingEndpoint$1.call(AbstractPollingEndpoint.java:146)         at org.springframework.integration.endpoint.AbstractPollingEndpoint$Poller$1.run(AbstractPollingEndpoint.java:284)         at org.springframework.integration.util.ErrorHandlingTaskExecutor$1.run(ErrorHandlingTaskExecutor.java:52)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)         at java.lang.Thread.run(Thread.java:744) Caused by: java.lang.NullPointerException         at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:365)         at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:87)         at org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:126)         at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:327)         at org.springframework.integration.util.AbstractExpressionEvaluator.evaluateExpression(AbstractExpressionEvaluator.java:159)         at org.springframework.integration.util.AbstractExpressionEvaluator.evaluateExpression(AbstractExpressionEvaluator.java:119)         ... 26 more ```  we are debuging now whether payload.site could be in some cases null. But we are sure that not and in previous versions it worked. So could you take a look, what maybe wrong in SpEL, which was updated since last version?  Details will be added.   ---  **Affects:** 4.1 GA","closed","in: core,","spring-projects-issues","2014-09-18T04:06:27Z","2019-01-12T05:25:17Z"
"","17139","Add note to reference material about difference between XML destroy-method and @Bean destroyMethod behavior [SPR-12534]","**[Frank](https://jira.spring.io/secure/ViewProfile.jspa?name=fgreg)** opened **[SPR-12534](https://jira.spring.io/browse/SPR-12534?redirect=false)** and commented  As shown in the StackOverflow post; there is a slight difference in the default behavior between XML configuration and Java configuration with respect to destroy-methods.  When configuring beans using xml, if the developer does not supply a ""destroy-method"" attribute on the bean (or a ""default-destroy-method"") no destroy method will be inferred for the bean.  However, when using Java configuration, if you do not specify a ""destroyMethod"" attribute on the `@Bean` annotation; Spring will still try to automatically locate a method called ""close()"" on your bean and register it for you as the destroy method.  This behavior is documented in the [JavaDoc](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Bean.html#destroyMethod--) but is not mentioned in the reference material at all.  I would argue this is an important ""gotcha"" note seeing as this behavior is actually different based on your chosen configuration style (XML vs. Java) and as such should be mentioned in the reference material somewhere around the [Destruction callbacks](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#beans-factory-lifecycle-disposablebean) section.  Also, there is a related [issue](#15154) noting that there is no mention about how you specify a destroy method with Java configuration. I think both of these issues could be solved with a small paragraph in the reference material.  ---  **Affects:** 4.1.3  **Reference URL:** http://stackoverflow.com/a/23089536/953327  **Issue Links:** - #15154 How destroy-method=""close"" on JavaConfig? (_**""duplicates""**_) - #13393 Support 'destroy method inference' for `@Bean` methods - #17153 Document how to prevent a JNDI DataSource retrieved using JavaConfig to be removed on shutdown of the context","closed","type: documentation,","spring-projects-issues","2014-12-10T16:54:05Z","2019-01-14T05:14:01Z"
"","16736","GuavaCacheManager ignores cache specification due to eager initialization of internal cache map with static cache names [SPR-12120]","**[Frank Scheffler](https://jira.spring.io/secure/ViewProfile.jspa?name=maverick1601)** opened **[SPR-12120](https://jira.spring.io/browse/SPR-12120?redirect=false)** and commented  We are using GuavaCacheManagers with explicit cache names configured, since we combine them using the CompositeCacheManager and require different cache specifications for each cache. When injection both a cache builder specification and cache names, the order of calling the appropriate setters is important, since setCacheNames() eagerly initializes the internal cache map, while setCacheSpecification() then tries to modify the CacheBuilder. Thus, the specification is effectively ignored without any errors.  I strongly suggest storing the configured cache names as list of strings and initializing them in an afterPropertiesSet() method.  So far, our work-around is to switch the order of the property XML tags in our XML configuration file, but this seems odd, since the order usually shouldn't matter.  ---  **Affects:** 4.0.6  **Issue Links:** - #16642 ConcurrentMapCacheManager has interdependent setters  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d47c5433cb2480df285b7a0901372615852d526e, https://github.com/spring-projects/spring-framework/commit/e1a01d4c3c1f728f6810a3feac31bafc925d12f7  **Backported to:** [4.0.7](https://github.com/spring-projects/spring-framework/milestone/119?closed=1)","closed","in: core,","spring-projects-issues","2014-08-26T02:22:06Z","2019-01-11T17:23:12Z"
"","16971","Support of client interceptors in Spring's AsyncRestTemplate [SPR-12538]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-12538](https://jira.spring.io/browse/SPR-12538?redirect=false)** and commented  It would be really useful if AsyncRestTemplate was capable of handling some async-friendly variant of ClientHttpRequestInterceptor's.  I understand the same interceptors are not possible, because the current interface assumes sync behaviour: {CODE} ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException; {CODE}  But it would be very useful to be able to **hook and alter the requests before they are executed**. Something like: {CODE} HttpRequest intercept(HttpRequest request) {CODE} would probably be enough, in order to be able to easily add some headers in a centralized way. The actual execution would be done outside of the scope of the async interceptor - just being able to modify/replace the request would be very useful by itself.  ---  **Affects:** 4.1.3  **Issue Links:** - #17581 Buffered AsyncClientHttpResponses  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/63958ac0ff19291407ece1c7d2f6e4e0862df526, https://github.com/spring-projects/spring-framework/commit/258cc7b27fe3629422dd173390e335d29ef75e7a, https://github.com/spring-projects/spring-framework/commit/12969f62688b1e8863c57d2ed0960cd27fc625f9  6 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2014-12-11T09:10:50Z","2019-01-11T18:27:29Z"
"","16817","HttpServletResponse#getStatus() gets used in servlet 2.5 environment [SPR-12203]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-12203](https://jira.spring.io/browse/SPR-12203?redirect=false)** and commented  - Java 8 - Tomcat 6.0.41 (servlet 2.5) - Spring 4.1.0.RELEASE  getStatus() only exists in servlet >=3.0, but it gets called in FrameworkServlet.java (line 1066): {CODE:java} private void publishRequestHandledEvent(HttpServletRequest request, HttpServletResponse response, long startTime, Throwable failureCause) { if (this.publishEvents) { // Whether or not we succeeded, publish an event. long processingTime = System.currentTimeMillis() - startTime; this.webApplicationContext.publishEvent( new ServletRequestHandledEvent(this, request.getRequestURI(), request.getRemoteAddr(), request.getMethod(), getServletConfig().getServletName(), WebUtils.getSessionId(request), getUsernameForRequest(request), processingTime, failureCause, response.getStatus())); } } {CODE}  Causing:  {CODE} Sep 16, 2014 4:33:08 PM org.apache.catalina.core.StandardWrapperValve invoke SEVERE: Servlet.service() for servlet SpringMVC threw exception java.lang.NoSuchMethodError: javax.servlet.http.HttpServletResponse.getStatus()I at org.springframework.web.servlet.FrameworkServlet.publishRequestHandledEvent(FrameworkServlet.java:1066) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:996) at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:874) at javax.servlet.http.HttpServlet.service(HttpServlet.java:646) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837) at javax.servlet.http.HttpServlet.service(HttpServlet.java:723) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:615) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) at org.apache.coyote.http11.Http11NioProcessor.process(Http11NioProcessor.java:891) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:750) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:2283) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) {CODE}  I haven't seen any provision on that code that checks if the method is available in the current environment.  I've double-checked the JARs inside the WAR, looking for misleading javax.servlet.* classes, and I don't have any.  This is similar to #16334.  ---  **Affects:** 4.1 GA  **Issue Links:** - #16765 FrameworkServlet not Servlet 2.5 compatible unless publishEvents=false (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2014-09-16T09:41:13Z","2019-01-14T05:15:04Z"
"","16779","Regression on empty request behaviour - HttpMessageNotReadableException on content-length: 0 [SPR-12165]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-12165](https://jira.spring.io/browse/SPR-12165?redirect=false)** and commented  Spring 4.1.0.RELEASE handles empty requests with `@RequestBody` annotation different to what it used to in 4.0.X (latest checked release - 4.0.7.RELEASE).  With 4.1.0.RELEASE, with an empty (content-lenght: 0) request, it will not proceed to invoke the controller method, and will return an HttpMessageNotReadableException instead.  This breaks existing controllers which expect to handle this condition by themselves.   ---  **Affects:** 4.1 GA  **Reference URL:** https://github.com/flozano/SPR-12165  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/273b9568593dc2ead9ea029312649135691a6ca9, https://github.com/spring-projects/spring-framework-issues/commit/45157f3674217d9d6900f89b6706d5f198d88cbc, https://github.com/spring-projects/spring-framework-issues/commit/0e0ca7aeada5a4c8431b1dbd1994882efb6d2ac6","closed","status: declined,","spring-projects-issues","2014-09-08T05:24:32Z","2019-01-12T16:58:53Z"
"","16575","SQLExceptionTranslators do not reliably translate QueryTimeoutException [SPR-11959]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-11959](https://jira.spring.io/browse/SPR-11959?redirect=false)** and commented  With SQLErrorCodeSQLExceptionTranslator, my code can catch both DuplicateKeyException and DataIntegrityViolationException. This helps to distinguish between a FK constraint violation and a duplicate key, directly and without having to dig more onto the database to find out.  I had to change my use of JdbcTemplate to force SQLExceptionSubclassTranslator, in order to gracefully handle query timeouts. Unfortunately, this had the effect of rendering all my catches of DuplicateKeyException unreachable.  So, by default and without coding anything, as a user of Spring JDBC wrappers I'm stuck between a rock and a hard place.  I guess the workaround is to make a custom SQLExceptionTranslator, but this use-case is not so strange and it would be great if Spring could come with a ""smart"" SQL exception translator that uses whatever it needs to provide the most accurate exception possible.  I'm not sure now this should be reported a ""bug"" or as something else... I initially considered SQLErrorCodeSQLExceptionTranslator ""buggy"" because it is not translating exceptions onto  DuplicateKeyException, but I can see in this case it's not straightforward to do it right for everyone.  ---  **Affects:** 4.0.5  **Issue Links:** - #14012 java.sql.SQLTimeoutException not translated to org.springframework.dao.QueryTimeoutException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/40822746306f5d0e5d553504275046ec4906309b","closed","type: enhancement,","spring-projects-issues","2014-07-05T10:12:18Z","2019-01-11T22:26:10Z"
"","16760","Spring doesn't remove the jsessionid when the request url is encoded [SPR-12146]","**[Florin Bob](https://jira.spring.io/secure/ViewProfile.jspa?name=florin30642)** opened **[SPR-12146](https://jira.spring.io/browse/SPR-12146?redirect=false)** and commented  I am using a Python application which encodes the redirect URL before making the request to another application with Spring MVC which works only with cookies off.  After debugging the code I have noticed that in UrlPathHelper#decodeAndCleanUriString(HttpServletRequest request, String uri) method, in a first phase the removeSemicolonContent method is called in order to remove the jsessionid from the requestUri which in my case is not removing it because my url is encoded(e.g. /book/add%3Bjsessionid%3D313B034DA73815635F77C0A9F05430B1).  Once this method is completed the decoding of the requestUri is performed(UrlPathHelper#decodeRequestString(HttpServletRequest request, String source)).  ```java private String decodeAndCleanUriString(HttpServletRequest request, String uri) {                 uri = removeSemicolonContent(uri);                 uri = decodeRequestString(request, uri);                                  return uri; } ```  The ""add"" action from /book/add%3Bjsessionid%3D313B034DA73815635F77C0A9F05430B1 is mapped to a PathVariable which will contain a value with jsessionid appended and decoded. (add;jsessionid=313B034DA73815635F77C0A9F05430B1)  In a valid scenario as far as I know we should have the jsessionid stripped from the PathVariable value.  My question is should we consider this a Spring issue? (shouldn't we decode and after that remove the jsessionid in decodeAndCleanUriString?)  ```java private String decodeAndCleanUriString(HttpServletRequest request, String uri) { 	uri = decodeRequestString(request, uri);		 	uri = removeSemicolonContent(uri); 		 	return uri; } ```  Thanks.   ---  **Affects:** 4.0.1","closed","status: bulk-closed,","spring-projects-issues","2014-09-03T04:55:45Z","2019-01-12T02:28:27Z"
"","16639","FreeMarker formInput macro - Multiple form inputs getting the same id attribute [SPR-12023]","**[Florian Bastien](https://jira.spring.io/secure/ViewProfile.jspa?name=fbastien)** opened **[SPR-12023](https://jira.spring.io/browse/SPR-12023?redirect=false)** and commented  The FreeMarker formInput macro adds to the form input an id attribute in addition to the name attribute (#6018). The value of the id attribute is generated from the bound property.  Problems arise when there are several forms in a same page and some properties share the same name (although binding path is different). Then the generated ids are identical.  For instance, this FTL code :  ```xml  ...  ```  would generate something like this :  ```xml  ...  ```  It is not possible to bypass this problem by adding an id attribute in the ""attributes"" parameters, since this would only add a second HTML id attribute that would be ignored by browsers (and anyway that's invalid).  As a consequence, would it be possible to add an optional parameter to the macro in order to bypass or prefix (whatever is best) the default generated HTML id? The macro would keep the current generated id if that parameter is omitted/empty.  I guess this problem not only affects FreeMarker... I'm using Spring Web MVC 4.0.5.  ---  **Affects:** 4.0.5  1 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-07-23T05:21:13Z","2019-01-12T02:28:48Z"
"","16859","Transactional test with TransactionalTestExecutionListener inheritance breaks backward compatibility [SPR-12245]","**[Federico Donnarumma](https://jira.spring.io/secure/ViewProfile.jspa?name=fededonna)** opened **[SPR-12245](https://jira.spring.io/browse/SPR-12245?redirect=false)** and commented  We have a base class for tests annotated like this:  ```java @TestExecutionListeners(TransactionalTestExecutionListener.class) public class BaseTests {} ```  If we extend that class and annotate the subclass like this...  ```java @Transactional @TestExecutionListeners(TransactionalTestExecutionListener.class) public class ExtendedTests extends BaseTests {} ```  ... then the following exception is thrown:  ``` java.lang.IllegalStateException: Cannot start a new transaction without ending the existing transaction. 	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:174) 	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:249) 	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:71) 	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:81) 	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:216) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:82) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:60) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:67) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:162) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:160) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134) ```  ---  **Affects:** 4.1 GA  **Issue Links:** - #17156 TransactionalTestExecutionListener regression in 4.1 (_**""is duplicated by""**_)","closed","status: declined,","spring-projects-issues","2014-09-24T09:44:28Z","2019-01-12T16:34:41Z"
"","16855","Data binding with java.util.Optional: traversal of nested paths, detection of empty holders [SPR-12241]","**[Federico Donnarumma](https://jira.spring.io/secure/ViewProfile.jspa?name=fededonna)** opened **[SPR-12241](https://jira.spring.io/browse/SPR-12241?redirect=false)** and commented  Hi, I have this case, when validating with JSR-303.  I Have an object which contains an Optional, when SpringValidatorAdapter cycles through properties to show something of the style  ""you entered 0 but field nights should be higher than 0""  BeanWrapper can't access the object inside the Optional and I get this message:  ```java java.lang.IllegalStateException: JSR-303 validated property 'earlyCancellation.deadlines[0].penalty.nights' does not have a corresponding accessor for Spring data binding - check your DataBinder's configuration (bean property versus direct field access) 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.processConstraintViolations(SpringValidatorAdapter.java:158) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(SpringValidatorAdapter.java:107) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.validation.DataBinder.validate(DataBinder.java:760) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.validate(RequestResponseBodyMethodProcessor.java:123) ~[spring-webmvc-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:109) ~[spring-webmvc-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:79) ~[spring-web-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:157) ~[spring-web-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:124) ~[spring-web-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) ~[spring-webmvc-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:781) ~[spring-webmvc-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:721) ~[spring-webmvc-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83) ~[spring-webmvc-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:943) ~[spring-webmvc-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877) ~[spring-webmvc-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961) [spring-webmvc-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:863) [spring-webmvc-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) ~[javax.servlet-api-3.1.0.jar:3.1.0] 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837) [spring-webmvc-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:62) [spring-test-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) ~[javax.servlet-api-3.1.0.jar:3.1.0] 	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:170) [spring-test-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:137) [spring-test-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:145) [spring-test-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at com.despegar.bookedia.cancelpolicy.CustomCancelPolicyControllerTest.post_zeroEarlyCancellationNights_okStatus(CustomCancelPolicyControllerTest.java:357) [test-classes/:na] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_05] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_05] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_05] 	at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0_05] 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) [junit-4.11.jar:na] 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.11.jar:na] 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) [junit-4.11.jar:na] 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) [junit-4.11.jar:na] 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) [junit-4.11.jar:na] 	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:72) [spring-test-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:81) [spring-test-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72) [spring-test-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) [junit-4.11.jar:na] 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:216) [spring-test-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:82) [spring-test-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) [junit-4.11.jar:na] 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) [junit-4.11.jar:na] 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) [junit-4.11.jar:na] 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) [junit-4.11.jar:na] 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) [junit-4.11.jar:na] 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:60) [spring-test-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:67) [spring-test-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) [junit-4.11.jar:na] 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:162) [spring-test-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.junit.runner.JUnitCore.run(JUnitCore.java:160) [junit-4.11.jar:na] 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74) [junit-rt.jar:na] 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211) [junit-rt.jar:na] 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67) [junit-rt.jar:na] Caused by: org.springframework.beans.NotReadablePropertyException: Invalid property 'earlyCancellation.deadlines[0]' of bean class [com.despegar.bookedia.cancelpolicy.CancelPolicyDTO]: Bean property 'earlyCancellation.deadlines[0]' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? 	at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:705) ~[spring-beans-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.beans.BeanWrapperImpl.getNestedBeanWrapper(BeanWrapperImpl.java:551) ~[spring-beans-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:528) ~[spring-beans-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:529) ~[spring-beans-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:694) ~[spring-beans-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:99) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.validation.AbstractBindingResult.getRawFieldValue(AbstractBindingResult.java:283) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.processConstraintViolations(SpringValidatorAdapter.java:143) ~[spring-context-4.1.0.RELEASE.jar:4.1.0.RELEASE] 	... 51 common frames omitted  ```  ---  **Affects:** 4.1 GA  **Issue Links:** - #16452 Support for java.util.Optional with `@Inject` (a la `@Autowired`'s required=false) - #18693 Unable to define empty java.util.Optional bean in spring xml  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cfc821d1799ca7c64b1bbc53811b712fdaa4776c, https://github.com/spring-projects/spring-framework/commit/0934751d7aa625fd098086ce3a5fb489f2edc7e0","closed","type: enhancement,","spring-projects-issues","2014-09-23T12:54:34Z","2019-01-13T05:44:44Z"
"","17090","Allow overriding InvocableHandlerMethod.invoke and/or ServletInvocableHandlerMethod.invokeAndHandle in subclasses [SPR-12484]","**[Fabio Tudone](https://jira.spring.io/secure/ViewProfile.jspa?name=ftudone)** opened **[SPR-12484](https://jira.spring.io/browse/SPR-12484?redirect=false)** and commented  I'm writing a new HandlerMethod dispatching transparently (asynchronously) on lightweight threads and I could reuse most of the existing ServletInvocableHandlerMethod and InvocableHandlerMethod, except invoke is private in the latter and can't be overridden, and invokeAndHandle is final in the first one (and so still can't be overridden).  Would it be possible to ease these restrictions so as to make it easier to reuse existing implementations?  ---  **Affects:** 4.0.8, 4.1.2  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/v4.1.2.RELEASE/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java#L212  **Issue Links:** - #17065 Making it easier to replace ""RequestMappingHandlerAdapter.handleInternal""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2496d68e9fbc38a684a00cfcc6aa4004bbc0d1e6, https://github.com/spring-projects/spring-framework/commit/90ae07385450f2de4cbfd0f3e984a7a27ca5ba7e  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-11-30T12:08:43Z","2019-01-11T19:36:31Z"
"","17065","Making it easier to replace ""RequestMappingHandlerAdapter.handleInternal"" [SPR-12460]","**[Fabio Tudone](https://jira.spring.io/secure/ViewProfile.jspa?name=ftudone)** opened **[SPR-12460](https://jira.spring.io/browse/SPR-12460?redirect=false)** and commented  For a Spring Boot integration with a container not based on threads, in ""RequestMappingHandlerAdapter.handleInternal"" I need to use a different synchronization mechanism rather than ""synchronized"" but the method is ""final"". Actually ""AbstractHandlerMethodAdapter.handle"" is ""final"" too, so I can't redirect the call somewhere else in a ""RequestMappingHandlerAdapter"" subclass: I'd need to mirror the whole hierarchy and reconfigure Spring to use my own (unless I'm missing a more straightforward way, in which case I'd be very grateful if you could point me to it).  Would it be possible to ease this restriction?  ---  **Affects:** 4.0.8, 4.1.2  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java#L698  **Issue Links:** - #17090 Allow overriding InvocableHandlerMethod.invoke and/or ServletInvocableHandlerMethod.invokeAndHandle in subclasses  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f093a5f74977e303da0a992d6c3e667c6fcebeac, https://github.com/spring-projects/spring-framework/commit/ece2c90e91483f1c7aac32fdb00142f0be3fd480  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-11-21T03:24:44Z","2019-01-11T19:26:41Z"
"","16775","Log warning for single optional constructor when no default constructor to fall back to [SPR-12161]","**[Fabio Franco da Silva](https://jira.spring.io/secure/ViewProfile.jspa?name=francofabio)** opened **[SPR-12161](https://jira.spring.io/browse/SPR-12161?redirect=false)** and commented  When using Autowired annotation in constructor and the dependency is not required. Spring throws this exception ""No qualifying bean of type [MyClassName] found for dependency [collection of MyClassName]: expected at least 1 bean which qualifies as autowire candidate for this dependency"". But, when the annotation is changed to the field, the exception not is throwed and the application works normally.  P.S.: Sorry for my english.   ---  **Affects:** 3.2.11, 4.0.7, 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5cf452463eeb3f2a230319c6a40a2c0f67e49be3, https://github.com/spring-projects/spring-framework/commit/80cec011b7b7a486888ee41c9e839885f1b2c519, https://github.com/spring-projects/spring-framework/commit/bf881e4544e095e8ad762d41e0722e0edba33bde  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-09-07T21:17:27Z","2014-10-01T03:11:44Z"
"","16714","MockHttpServletRequest should honor scheme in isSecure() method [SPR-12098]","**[Eujung Kim](https://jira.spring.io/secure/ViewProfile.jspa?name=eujungkim)** opened **[SPR-12098](https://jira.spring.io/browse/SPR-12098?redirect=false)** and commented  javadoc for ServletRequest.isSecure() is as follow.  > Returns a boolean indicating whether this request was made using a secure channel, such as HTTPS.  But isSecure() in MockHttpServletRequest returns only this.secure set by setSecure(boolean) method.  And the method does not refer value of scheme(http or https ...)  I think isSecure() should return ""true"" if scheme is ""https"".   ---  **Affects:** 4.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0b0ddc6ed16072b6ba848c8354f5d17f0b3460a0  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2014-08-19T08:26:52Z","2014-09-04T05:31:20Z"
"","17153","Document how to prevent a JNDI DataSource retrieved using JavaConfig to be removed on shutdown of the context [SPR-12551]","**[Eugene Stepanenkov](https://jira.spring.io/secure/ViewProfile.jspa?name=eugene.stepanenkov)** opened **[SPR-12551](https://jira.spring.io/browse/SPR-12551?redirect=false)** and commented  My application context is configured via Java-based context. The data source is configured in WebLogic side. I lookup DataSource from WebLogic side, all work fine except one thing: After application redeploy the springs removes the JNDI name of DataSource from weblogic JNDI tree.  ---  **Affects:** 4.0.6  **Reference URL:** http://stackoverflow.com/questions/19158837/weblogic-datasource-disappears-from-jndi-tree/19323524#19323524  **Issue Links:** - #17139 Add note to reference material about difference between XML destroy-method and `@Bean` destroyMethod behavior - #13393 Support 'destroy method inference' for `@Bean` methods - #17613 Destroy callback cannot be disabled for AutoCloseable beans  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/facd2401cd9d02f1aa5d7b9e46b8daa4cc0782f9","closed","type: documentation,","spring-projects-issues","2014-12-17T09:44:29Z","2019-01-13T05:43:12Z"
"","17106","Jackson @JsonView deserialization support for request bodies [SPR-12501]","**[Ersin Er](https://jira.spring.io/secure/ViewProfile.jspa?name=ersiner)** opened **[SPR-12501](https://jira.spring.io/browse/SPR-12501?redirect=false)** and commented  #11815 added support for `@JsonView` for response bodies. The same can also be applied to request bodies as Jackson already supports `@JsonView` for deserialization.  ```java @RequestMapping(value = ""/persons"", consumes = APPLICATION_JSON_VALUE, method = RequestMethod.POST) public ResponseEntity savePerson(@JsonView(View.Summary.class) @RequestBody Person p) {     return new ResponseEntity(personRepository.save(p), HttpStatus.OK); } ```  ---  **Affects:** 4.1.2  **Attachments:** - [SPR-12501.patch](https://jira.spring.io/secure/attachment/22707/SPR-12501.patch) (_5.83 kB_)  **Issue Links:** - #11815 Integrate Jackson `@JsonView` - #17828 JsonView support for JMS - #17856 Jackson `@JsonView` deserialization support for `@MessageMapping` payloads - #17859 Allow `@JsonView` to be used on meta-annotations on Rest methods  4 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2014-12-03T06:09:14Z","2019-01-13T05:43:33Z"
"","16904","JavaMailSender.doSend() should more aggressively catch exceptions [SPR-12298]","**[Eric Sirianni](https://jira.spring.io/secure/ViewProfile.jspa?name=sirianni)** opened **[SPR-12298](https://jira.spring.io/browse/SPR-12298?redirect=false)** and commented  My application is hitting an issue whereby the MS Exchange server is closing the SMTP connection after 10 minutes of use.  This manifests itself in an `IllegalStateException` from javamail's `SMTPTransport` object:  ``` java.lang.IllegalStateException: Not connected         at com.sun.mail.smtp.SMTPTransport.checkConnected(SMTPTransport.java:2354)         at com.sun.mail.smtp.SMTPTransport.sendMessage(SMTPTransport.java:1151)         at org.springframework.mail.javamail.JavaMailSenderImpl.doSend(JavaMailSenderImpl.java:424) ```  The error handling from Spring's `JavaMailSender` is not ideal in this case.    My application code is sending messages in batch and was prepared to catch Spring's `MailSendException` to determine which emails in the batch were send successfully vs. which failed to send.  However, the underlying `IllegalStateException` is bubbling up from JavaMail, leaving my application code no way to determine which messages were actually sent successfully.  Two possible enhancements would make `JavaMailSender` batch sending more robust: 1. Catch `Throwable` from JavaMail instead of just `MessagingException`.  Throw a `MailSendException` in all cases so the caller can determine which messages in the batch failed to send. 2. Check `SMTPTransport.isConnected()` in the loop within `doSend()` and reconnect if the connection has been unexpectedly closed out from under us.  ---  **Affects:** 4.1.1  **Issue Links:** - #16899 JavaMailSenderImpl - Set empty String params to null for setUsername and setPassword  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b7faef0103e94e05453a81eca0d6e85fb0764e74","closed","type: enhancement,","spring-projects-issues","2014-10-05T06:27:50Z","2019-01-11T17:36:01Z"
"","16726","Placeholder resolution within @PropertySource resource locations can not resolve properties from prior sources [SPR-12110]","**[Eric Sirianni](https://jira.spring.io/secure/ViewProfile.jspa?name=sirianni)** opened **[SPR-12110](https://jira.spring.io/browse/SPR-12110?redirect=false)** and commented  Consider the following example:  ```java @PropertySources({     @PropertySource(""classpath:/bootstrap.properties""),     @PropertySource(""file:${config.dir}/app.properties"") }) ```  Where `bootstrap.properties` is:  ``` config.dir=/etc ```  And `/etc/app.properties` is:  ``` foo=... bar=... ```  `ConfigurationClassParser` is unable to resolve the `config.dir` placeholder in the second `@PropertySource`.  The issue is that the resolved `PropertySource` s are not added to the `Environment` incrementally, but rather by the parent `ConfigurationClassPostProcessor` after **all** PropertySources are resolved:  From `ConfigurationClassParser`:  ```java for (String location : locations) {      try {           String resolvedLocation = this.environment.resolveRequiredPlaceholders(location);           Resource resource = this.resourceLoader.getResource(resolvedLocation);           ResourcePropertySource ps = new ResourcePropertySource(resource);           this.propertySources.add((StringUtils.hasText(name) ? name : ps.getName()), ps);      } ```  From `ConfigurationClassPostProcessor`:  ```java 		// Parse each @Configuration class 		ConfigurationClassParser parser = new ConfigurationClassParser( 				this.metadataReaderFactory, this.problemReporter, this.environment, 				this.resourceLoader, this.componentScanBeanNameGenerator, registry); 		parser.parse(configCandidates); 		parser.validate();  		// Handle any @PropertySource annotations 		List","closed","type: enhancement,","spring-projects-issues","2014-08-21T08:41:33Z","2019-01-13T05:46:00Z"
"","16498","Matrix variables aren't read when path variable has regex restriction [SPR-11879]","**[Emerson Farrugia](https://jira.spring.io/secure/ViewProfile.jspa?name=mers)** opened **[SPR-11879](https://jira.spring.io/browse/SPR-11879?redirect=false)** and commented  I need to support a URI which looks like  `/user/5/foo;a=1;b=2`  where ""foo"" is a literal string. Since MVC only allows matrix variables on path variables, the corresponding request mapping looks like  `/user/{userId}/{foo}`  Since that would allow the foo variable to be anything, I restricted it using a regular expression, and the mapping became  `/user/{userId}/{foo:foo}`  At which point, my matrix variables stopped working. I've attached a Gist showing how matrix variables don't work when the path variable has a regex restriction. In that Gist, `/withoutRegex/3` works with both matrix variables and without matrix variables. `/withRegex/3` works without matrix variables, but when I specify matrix variables, I get the error  > No mapping found for HTTP request with URI [/withRegex/3;q=10] in DispatcherServlet with name 'dispatcherServlet'  ---  **Affects:** 4.0.5  **Reference URL:** https://gist.github.com/emersonf/d656611d174e32a3d9d3  **Issue Links:** - #16516 `@PathVariable` & `@MatrixVariable` do not work as documented when ""="" is in the path variable value part (pre "";"")","closed","status: declined,","spring-projects-issues","2014-06-16T23:48:08Z","2019-01-13T20:59:44Z"
"","16370","spring-boot-autoconfigure dependency is missing from spring-boot-starter-parent dependency management section [SPR-11748]","**[Emerson Farrugia](https://jira.spring.io/secure/ViewProfile.jspa?name=mers)** opened **[SPR-11748](https://jira.spring.io/browse/SPR-11748?redirect=false)** and commented  I'm not sure if this is the right forum for Spring Boot issues, but I didn't find a JIRA project for Boot.   --- No further details from [SPR-11748](https://jira.spring.io/browse/SPR-11748?redirect=false)","closed","status: duplicate,","spring-projects-issues","2014-04-30T18:30:53Z","2019-01-12T16:46:33Z"
"","17030","ClassPathScanningCandidateComponentProvider customisation [SPR-12423]","**[Elryk](https://jira.spring.io/secure/ViewProfile.jspa?name=elryk)** opened **[SPR-12423](https://jira.spring.io/browse/SPR-12423?redirect=false)** and commented  Hi,  I would like to customize the ResourcePatternResolver implementation used by the class ClassPathScanningCandidateComponentProvider. For the moment, a PathMatchingResourcePatternResolver is instanciated. Developers could not change the instance. This change will simplifiy the code of my vfs2 backport: https://github.com/arey/spring4-vfs2-support  Regards   ---  **Affects:** 4.1.2  **Issue Links:** - [DATACMNS-591](https://jira.spring.io/browse/DATACMNS-591) RepositoryConfigurationDelegate should use ResourceLoader provided by the infrastructure","closed","in: core,","spring-projects-issues","2014-11-12T08:12:09Z","2019-01-12T05:25:08Z"
"","16845","Make MockRestServiceServer error messages more descriptive [SPR-12230]","**[Elnur Abdurrakhimov](https://jira.spring.io/secure/ViewProfile.jspa?name=elnur)** opened **[SPR-12230](https://jira.spring.io/browse/SPR-12230?redirect=false)** and commented  Currently, when making an unexpected request to the mock server, I get an exception `java.lang.AssertionError: No further requests expected`.  It's a real pain to find out which request is at fault, because there is not enough information in that exception's stacktrace.  It would be really helpful to have all the expected requests, that were already done, to be displayed. It should also display which request was expected next and which one came instead and caused the expectations to fail.  ---  **Affects:** 3.2 GA  **Issue Links:** - #17016 MockRestServiceServer should allow more verification options  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-09-21T09:58:26Z","2019-01-11T17:38:58Z"
"","17127","Regression: SpEL expression with Arrays.asList and empty array [SPR-12522]","**[Elias](https://jira.spring.io/secure/ViewProfile.jspa?name=mariguanito80)** opened **[SPR-12522](https://jira.spring.io/browse/SPR-12522?redirect=false)** and commented  Please see the code attached.  When a config variable is empty from a properties file and trying to convert it in a list of strings, spell cannot evaluate the expression. This code works in Spring 3.2.6. The output should be an empty list.  Caused by: org.springframework.beans.factory.BeanExpressionException: Expression parsing failed; nested exception is org.springframework.expression.spel.SpelEvaluationException: EL1029E:(pos 20): A problem occurred when trying to execute method 'asList' on object of type 'java.lang.Class': 'Problem invoking method: public static java.util.List java.util.Arrays.asList(java.lang.Object[])' at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:164) ~[spring-context-4.1.2.RELEASE.jar:4.1.2.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.evaluateBeanDefinitionString(AbstractBeanFactory.java:1362) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:964) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:949) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:816) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:744) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE] ... 62 common frames omitted Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1029E:(pos 20): A problem occurred when trying to execute method 'asList' on object of type 'java.lang.Class': 'Problem invoking method: public static java.util.List java.util.Arrays.asList(java.lang.Object[])' at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:136) ~[spring-expression-4.1.2.RELEASE.jar:4.1.2.RELEASE] at org.springframework.expression.spel.ast.MethodReference.access$000(MethodReference.java:49) ~[spring-expression-4.1.2.RELEASE.jar:4.1.2.RELEASE] at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:342) ~[spring-expression-4.1.2.RELEASE.jar:4.1.2.RELEASE] at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:88) ~[spring-expression-4.1.2.RELEASE.jar:4.1.2.RELEASE] at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:120) ~[spring-expression-4.1.2.RELEASE.jar:4.1.2.RELEASE] at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:242) ~[spring-expression-4.1.2.RELEASE.jar:4.1.2.RELEASE] at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:161) ~[spring-context-4.1.2.RELEASE.jar:4.1.2.RELEASE] ... 67 common frames omitted Caused by: org.springframework.expression.AccessException: Problem invoking method: public static java.util.List java.util.Arrays.asList(java.lang.Object[]) at org.springframework.expression.spel.support.ReflectiveMethodExecutor.execute(ReflectiveMethodExecutor.java:116) ~[spring-expression-4.1.2.RELEASE.jar:4.1.2.RELEASE] at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:129) ~[spring-expression-4.1.2.RELEASE.jar:4.1.2.RELEASE] ... 73 common frames omitted Caused by: java.lang.ArrayIndexOutOfBoundsException: 0 at org.springframework.expression.spel.support.ReflectionHelper.isFirstEntryInArray(ReflectionHelper.java:350) ~[spring-expression-4.1.2.RELEASE.jar:4.1.2.RELEASE] at org.springframework.expression.spel.support.ReflectionHelper.convertArguments(ReflectionHelper.java:285) ~[spring-expression-4.1.2.RELEASE.jar:4.1.2.RELEASE] at org.springframework.expression.spel.support.ReflectiveMethodExecutor.execute(ReflectiveMethodExecutor.java:106) ~[spring-expression-4.1.2.RELEASE.jar:4.1.2.RELEASE] ... 74 common frames omitted  ---  **Affects:** 4.1.2  **Attachments:** - [application.properties](https://jira.spring.io/secure/attachment/22391/application.properties) (_20 bytes_) - [OrchestratorConfig.java](https://jira.spring.io/secure/attachment/22393/OrchestratorConfig.java) (_340 bytes_)  **Issue Links:** - #16964 Compiled SpEL expression fail when used with registered function  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fa138d2c703438582482ab8e63ec33ad35150a58","closed","in: core,","spring-projects-issues","2014-12-08T14:31:24Z","2019-01-11T18:30:18Z"
"","16895","Return sensible defaults in MockServletContext's Servlet and Filter registration get methods [SPR-12290]","**[Eirik Lygre](https://jira.spring.io/secure/ViewProfile.jspa?name=elygre)** opened **[SPR-12290](https://jira.spring.io/browse/SPR-12290?redirect=false)** and commented  #### Status Quo  In `MockServletContext`, the methods `getServletRegistrations()` and `getFilterRegistrations()` both throw an `UnsupportedOperationException`. It would presumably be better if they both just returned `Collections.emptyMap()`.  We have a console that lists all servlet and filter registrations, and tests for this console does not work due to this.  #### Proposal  While `addServlet()` and `addFilter()` cannot work, and thus properly throw `UnsupportedOperaitonException()`, it should still be possible to query which registrations exist. The answer would always be ""none"", though.  This is similar to `emptyMap()` itself: you cannot add stuff, but you can always ask about the content. Even though the map may never contain anything, you can still ask!  #### Deliverables  1. [x] Return `null` for `getServletRegistration()` and `getFilterRegistration()`. 2. [x] Return empty maps for `getServletRegistrations()` and `getFilterRegistrations()`.    ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/25d13ac41ebfa95d0ef39b6949c5f18dc2136222","closed","type: enhancement,","spring-projects-issues","2014-10-02T02:24:24Z","2014-11-17T06:42:38Z"
"","16925","MyBatis scanner fails with a wrong exception due to Spring retrying its load [SPR-12320]","**[Eduardo Macarron](https://jira.spring.io/secure/ViewProfile.jspa?name=emacarron)** opened **[SPR-12320](https://jira.spring.io/browse/SPR-12320?redirect=false)** and commented  MyBatis provides a BeanDefinitionRegistryPostProcessor that is able to search the classpath for MyBatis beans (mappers) and register them to MyBatis.  We have a problem since the very begining of the proyect: Spring retries loading the FactoryBean.  Imagine we have a bug in one of the mybatis xml files, for example a wrong class name. Spring calls the FactoryBean once, it attemps to register the mapper and it fails with a ClassNotFound.  This operation is not atomic. Registering a mapper involves registering several minor elements. This is not a problem given that in the case of a failure MyBatis supposes that the startup will inmediately end.  Instead of stopping the loading Spring will retry loading that object again. The second time it does not fail because of the ClassNotFound but because you are trying to register the mapper twice (I was partially registered the first time).  As you may guess, the user has a look at the log and sees an stacktrace pointing to an error that is not the real cause!  We build that factories in this class: https://github.com/mybatis/spring/blob/master/src/main/java/org/mybatis/spring/mapper/ClassPathMapperScanner.java  See lines 168 and below.  Is there any way we can prevent Spring retrying the loading?  Thanks in advance.   ---  **Affects:** 4.0 GA  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-10-10T08:23:50Z","2019-01-12T00:18:49Z"
"","16517","[TypeDescriptor] Unable to obtain nested generic from ? at level 1 [SPR-11898]","**[Edge Dalmacio](https://jira.spring.io/secure/ViewProfile.jspa?name=edgedalmacio)** opened **[SPR-11898](https://jira.spring.io/browse/SPR-11898?redirect=false)** and commented  I'm trying to set an entry of a Map thru BeanWrapper via the code below. But I'm getting an IllegalStateException. This used to work back in 3.2.x, but doesn't work on 4.0.x.  I've attached a sample project to show the issue. Simply switch to Spring 3.2.x to see that it works.  ```java public interface Context {    D getData(); } ... public class ContextImpl implements Context {    private final D data;    public ContextImpl(D data) {       this.data = data;    }    public D getData() {       return this.data;    } } ... BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(context); bw.setPropertyValue(""data['message']"", ""it works!""); ... ```  ``` java.lang.IllegalStateException: Unable to obtain nested generic from ? at level 1 	at org.springframework.core.convert.TypeDescriptor.nested(TypeDescriptor.java:704) 	at org.springframework.core.convert.TypeDescriptor.nested(TypeDescriptor.java:676) 	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1040) 	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:902) 	at typedescriptor.issue.ContextImplTest.setProperty(ContextImplTest.java:25) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:606) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) ```    ---  **Affects:** 4.0 GA  **Attachments:** - [typedescriptor-issue.zip](https://jira.spring.io/secure/attachment/22075/typedescriptor-issue.zip) (_6.20 kB_)","closed","in: core,","spring-projects-issues","2014-06-22T23:37:53Z","2014-07-08T00:21:26Z"
"","16922","Better error reporting for circular dependencies between JavaConfig classes [SPR-12317]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-12317](https://jira.spring.io/browse/SPR-12317?redirect=false)** and commented  In the attached project we have - Java Configuration class A. It uses a bean of type Z that is `@Autowired`. It provides a bean of type B. - Java Configuration class AStrich provides the bean of type Z and has a bean of type B `@Autowired`.   So the two Java Configuration classes are in a cyclic dependency due to the Beans of type B and Z.   When bean B in A is created Z is not injected - which IMHO is wrong. It should be possible to rely on Spring autowiring all fields before a bean is created. Note that the problem disappears if B is not injected in AStrich any more and no cyclic dependency is present.   This might look like a corner case but at my client it caused some headaches during an XML->JavaConfig migration.   The attached project can be run with mvn test and fails due to the bug.  ---  **Affects:** 4.1.1  **Attachments:** - [JavaConfigBug.zip](https://jira.spring.io/secure/attachment/22316/JavaConfigBug.zip) (_7.50 kB_)  **Issue Links:** - #16755 Plain FactoryBean declaration on `@Bean` method leads to early call (pre injection)  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2014-10-10T03:16:49Z","2019-01-13T05:44:22Z"
"","17096","@Resource injection broken under spring-framework > 4.1.0 [SPR-12490]","**[Doug Davies](https://jira.spring.io/secure/ViewProfile.jspa?name=csddavies)** opened **[SPR-12490](https://jira.spring.io/browse/SPR-12490?redirect=false)** and commented  `@Resource` injection seems to behave differently between spring-framework 4.1.0 and 4.1.1 because it thinks a method in a class extended from an abstract class is a bridge and it never calls the setter.  For example  ``` abstract class AbstractComponent {     @Resource     public void setHttpServletRequest(final HttpServletRequest request) {         System.out.println(""Setting HttpServletRequest"");     } }  @Component public final class RealComponent extends AbstractComponent { } ```  If I change the `@Resource` to `@Autowired` then it works as expected.  I think the change that broke this is  https://github.com/spring-projects/spring-framework/commit/f4219ca06bbd1c324567ab9e74d0d18693359810#diff-2  It was to resolve #16801  I have provided a complete spring-boot project that demonstrates the issue at  https://github.com/funkyvisions/spring-boot-hello-world  ---  **Affects:** 4.1.1, 4.1.2  **Reference URL:** http://stackoverflow.com/questions/27234508/resource-injection-broken-under-spring-framework-4-1-0  **Issue Links:** - #12555 Annotation based injection into non public base classes does not work - #16801 Java 8 bridge method handling can lead to false positive detection of autowired annotations - #17101 Consistent bridge method handling in annotation post-processors","closed","in: core,","spring-projects-issues","2014-12-01T10:35:00Z","2019-01-11T19:36:02Z"
"","17145","@Transactional qualifier is ignored by TransactionAspectSupport if default transaction manager is set [SPR-12541]","**[Donnchadh O Donnabhain](https://jira.spring.io/secure/ViewProfile.jspa?name=donnchadh)** opened **[SPR-12541](https://jira.spring.io/browse/SPR-12541?redirect=false)** and commented  #### Status Quo  #16570 introduced _caching_ of the default `PlatformTransactionManager` in `TransactionAspectSupport`.  Specifically, the `transactionManager` instance field is now set within `determineTransactionManager()`. In subsequent invocations of `determineTransactionManager()`, the following if-logic at the beginning of the method results in the cached default transaction manager being returned instead of the transaction manager with the specified qualifier.  ```java if (this.transactionManager != null || this.beanFactory == null || txAttr == null) {     return this.transactionManager; } ```  Note, however, that the default transaction manager may have been set in Java Config due to the use of `TransactionManagementConfigurer`, or it may have been set in XML config via `TransactionProxyFactoryBean.setTransactionManager()`. Therefore, the behavior reported in this issue is not limited to _caching_ of the default transaction manager in `determineTransactionManager()`. Rather, the behavior can be experienced any time the `transactionManager` field in `TransactionAspectSupport` has been set.  ---  #### Steps to Reproduce  Given  ```java @Transactional public void doFoo() {     // ... }  @Transactional(""transactionManager2"") public void doBar() {     // ... } ```  and  ```java service.doFoo(); service.doBar(); ```  ... the default transaction manager will be used for invocations of `service.doBar()` rather than `transactionManager2`.  ---  #### Further Resources  See [discussion on GitHub](https://github.com/spring-projects/spring-framework/commit/4e257243f2dd2fdd5625286d01976b346a74f5d7#commitcomment-8932743).  ---  **Affects:** 4.1 GA  **Issue Links:** - #11812 Potential null-pointer in TransactionAspectSupport.determineTransactionManager() (_**""depends on""**_) - #8635 support for multiple transaction managers with `@Transactional` /  (_**""depends on""**_) - #16570 Reduce PlatformTransactionManager lookups in TransactionAspectSupport (_**""depends on""**_) - #17123 AnnotationTransactionAspect retains reference to JpaTransactionManager from closed context - #17207 Wrong TransactionManager selected when mixing `@Transactional` with and w/o qualifier - #17178 Regression in TransactionAspectSupport.determineTransactionManager(…) - #19080 Transaction manager bean in TransactionInterceptor retained after JUnit test class completes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/961574bd17b2fe30f171646f54667b5895f0dcbf, https://github.com/spring-projects/spring-framework/commit/4a0ac97550c67c926e014903338f9c0e84fa9eee, https://github.com/spring-projects/spring-framework/commit/cec26e9ac4af524575d6c5a2e2cd15dca900b8ca  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2014-12-12T03:45:14Z","2019-01-13T05:43:16Z"
"","16360","Skip Java immutable objects in session when processing the accessed attributes [SPR-11738]","**[Dongqing Hu](https://jira.spring.io/secure/ViewProfile.jspa?name=dongqinghu)** opened **[SPR-11738](https://jira.spring.io/browse/SPR-11738?redirect=false)** and commented  String, Integer, Long, Boolean... Such typed value objects can be skipped from updating in ServletRequestAttributes#updateAccessedAttributes() , or skipped from being added to #sessionAttributesToUpdate via #getAttribute()  This is good optimization when the session is full of values. Do less serialization and I/O (sometimes none) in session management.  In which of the two methods is it better to place the ""skip"" logic?   --- No further details from [SPR-11738](https://jira.spring.io/browse/SPR-11738?redirect=false)","closed","type: enhancement,","spring-projects-issues","2014-04-25T20:03:08Z","2014-07-18T10:16:34Z"
"","16773","Add filtered properties [SPR-12159]","**[Dominik Przybysz](https://jira.spring.io/secure/ViewProfile.jspa?name=alien11689)** opened **[SPR-12159](https://jira.spring.io/browse/SPR-12159?redirect=false)** and commented  Sometimes I need to load only subset of properties from files, not all.   --- No further details from [SPR-12159](https://jira.spring.io/browse/SPR-12159?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2014-09-05T12:46:29Z","2019-01-12T00:19:13Z"
"","16480","MultipartFile interface should extend InputStreamSource [SPR-11861]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-11861](https://jira.spring.io/browse/SPR-11861?redirect=false)** and commented  Seems logical that `org.springframework.web.multipart.MultipartFile` interface extends `org.springframework.core.io.InputStreamSource`, as it is a provider of a stream:  ``` public interface MultipartFile extends InputStreamSource { ... ```    ---  **Affects:** 4.0.3  **Attachments:** - [MultipartFile.java.patch](https://jira.spring.io/secure/attachment/22928/MultipartFile.java.patch) (_1.28 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f0c6bff82a0c3a29fbcb55051c9e66ccfe373983","closed","type: enhancement,","spring-projects-issues","2014-06-10T04:07:54Z","2015-07-15T09:05:09Z"
"","16953","Reactor11StompCodec NoClassDefFoundError [SPR-12348]","**[Dmitriy Staeglazov](https://jira.spring.io/secure/ViewProfile.jspa?name=demwis)** opened **[SPR-12348](https://jira.spring.io/browse/SPR-12348?redirect=false)** and commented  Today I tried to change version of spring from 4.0.* to 4.1.1. After I build project by maven and deployed it to Tomcat server I got java.lang.NoClassDefFoundError exception, concerning Reactor11StompCodec class. After that I have downgrade version to 4.0.7 and all seems fine now. Tell me if you need me provide the configuration files of project.   ---  **Affects:** 4.1.1  **Attachments:** - [pom.xml](https://jira.spring.io/secure/attachment/22328/pom.xml) (_16.35 kB_) - [tomcat-lib-list.jpg](https://jira.spring.io/secure/attachment/22335/tomcat-lib-list.jpg) (_80.82 kB_) - [trace-reactor-net-2014-10-21.txt](https://jira.spring.io/secure/attachment/22330/trace-reactor-net-2014-10-21.txt) (_13.84 kB_) - [trace-server-2014-10-21.txt](https://jira.spring.io/secure/attachment/22331/trace-server-2014-10-21.txt) (_6.13 kB_)","closed","in: web,","spring-projects-issues","2014-10-19T17:56:08Z","2019-01-11T19:12:56Z"
"","16717","Using @Profile in @Aspect using @DeclareParents [SPR-12101]","**[Diego Fernando Murillo Valencia](https://jira.spring.io/secure/ViewProfile.jspa?name=darkyelox)** opened **[SPR-12101](https://jira.spring.io/browse/SPR-12101?redirect=false)** and commented  If it's possible to use `@Aspect` in conjunction with `@Profile` for decide which interface to implements when using `@DeclareParents`, what i want is the possibility to use several aspect classes for decide the environments of my projects using classes for certain situation.   ---  **Affects:** 4.0.6  **Reference URL:** http://stackoverflow.com/questions/25310408/using-spring-profile-in-aspect","closed","status: bulk-closed,","spring-projects-issues","2014-08-19T12:43:50Z","2019-01-12T02:28:30Z"
"","16429","Provide a way to override annotated controllers (possibly reusing @Primary annotation?) [SPR-11809]","**[Davide Cavestro](https://jira.spring.io/secure/ViewProfile.jspa?name=davide.cavestro)** opened **[SPR-11809](https://jira.spring.io/browse/SPR-11809?redirect=false)** and commented  When defining two beans annotated with `@Controller` and providing the same `@RequestMapping` the container throws an exception complaining  > java.lang.IllegalStateException: Ambiguous mapping found. Cannot map 'myStdController' bean method... There is already 'myCustomController' bean method  It would be really useful having a simple way to provide a customized version for a standard controller by simply adding a new controller annotated as `@Primary` and mapping to the same urls. This kind of customization hack works quite well for beans that don't provide mappings (i.e. services). An additional refinement could support some sort of overlaying: the urls not remapped by the `@Primary`/custom controller could be served by the standard/secondary controller. If using `@Primary` for this purpose is considered unsafe, then an additional annotation could expose this behavior.   ---  **Affects:** 3.2.8  3 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-05-20T08:57:26Z","2021-11-26T17:16:16Z"
"","16542","Seamless support for Groovy bean definitions mixed with XML bean definitions [SPR-11924]","**[David Turanski](https://jira.spring.io/secure/ViewProfile.jspa?name=dturanski)** opened **[SPR-11924](https://jira.spring.io/browse/SPR-11924?redirect=false)** and commented  Currently, Groovy beans are only loaded when creating a GenericGroovyApplicationContext.  An improvement would be GenericResourceApplicationContext, or something similar that looks at the file extension to use GroovyBeanDefinitionReader or XMLBeanDefinitionReader, respectively.  I did something similar for XD here, but I think this should be in core Spring:  https://github.com/spring-projects/spring-xd/blob/master/spring-xd-dirt/src/main/java/org/springframework/xd/dirt/container/initializer/AbstractResourceBeanDefinitionProvider.java  Also, `@ImportResource`(""config.groovy"") should work.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/37ba1b966ee164ada46866e800bde317a238b4d7","closed","type: enhancement,","spring-projects-issues","2014-06-27T08:39:18Z","2014-07-18T10:16:28Z"
"","16532","org.hibernate.validator.constraints.CreditCardNumber does not fail on a non-numbers string [SPR-11913]","**[David Portabella](https://jira.spring.io/secure/ViewProfile.jspa?name=dportabella)** opened **[SPR-11913](https://jira.spring.io/browse/SPR-11913?redirect=false)** and commented  hibernate-validator-4.3.0.Final  the test `invalidTextTest` fails.  ``` import static org.junit.Assert.assertEquals;  import javax.validation.Validation; import javax.validation.Validator; import javax.validation.ValidatorFactory;  import org.hibernate.validator.constraints.CreditCardNumber; import org.junit.BeforeClass; import org.junit.Test;  public class CreditCardNumberValidatorTest {     private static Validator validator;      @BeforeClass     public static void setUp() {         ValidatorFactory factory = Validation.buildDefaultValidatorFactory();         validator = factory.getValidator();     }      // Ok     @Test     public void validCardTest() {         User user = new User();         user.setCardNumber(""4111111111111111"");         assertEquals(0, validator.validate(user).size());     }      public void invalidNumberTest() {         User user = new User();         user.setCardNumber(""400"");         assertEquals(1, validator.validate(user).size());     }      @Test     public void invalidTextTest() {         User user = new User();         user.setCardNumber(""text not numbers"");         assertEquals(1, validator.validate(user).size());     } }  class User {     @CreditCardNumber     public String cardNumber;      public String getCardNumber() {         return cardNumber;     }      public void setCardNumber(String cardNumber) {         this.cardNumber = cardNumber;     } } ```  ps: I created this issue with project=""Spring Framework"", and component=null. I didn't find a ""Sprint hibernate"" project or component. ???   --- No further details from [SPR-11913](https://jira.spring.io/browse/SPR-11913?redirect=false)","closed","status: invalid,","spring-projects-issues","2014-06-25T06:40:44Z","2019-01-12T05:25:47Z"
"","16937","ResourceUrlEncodingFilter fails to look up full path when Spring Security is enabled [SPR-12332]","**[David Kerwick](https://jira.spring.io/secure/ViewProfile.jspa?name=david.kerwick)** opened **[SPR-12332](https://jira.spring.io/browse/SPR-12332?redirect=false)** and commented  Very similar to #16886, when springSecurityFilterChain is on the project ResourceUrlEncodingFilter fails to look up full paths.  Without Spring security the url's are correctly encoded with the version.  With no Spring Security  ``` 2014-10-13 21:24:27,376 - TRACE - ResourceUrlProvider - Getting resource URL for requestURL=/test-app/static/test.js 2014-10-13 21:24:27,376 - TRACE - ResourceUrlProvider - Getting resource URL for lookupPath=/static/test.js 2014-10-13 21:24:27,376 - TRACE - ResourceUrlProvider - Invoking ResourceResolverChain for URL pattern=""/static/**"" 2014-10-13 21:24:27,377 - TRACE - VersionResourceResolver - Resolving public URL for path=""/test.js"" 2014-10-13 21:24:27,377 - TRACE - PathResourceResolver - Resolving public URL for path=""/test.js"" 2014-10-13 21:24:27,378 - TRACE - PathResourceResolver - Checking location=[class path resource [META-INF/resources/static/]] 2014-10-13 21:24:27,378 - TRACE - PathResourceResolver - Found match 2014-10-13 21:24:27,378 - TRACE - VersionResourceResolver - Getting the original resource to determine version 2014-10-13 21:24:27,378 - TRACE - PathResourceResolver - Resolving resource: requestPath=""/test.js"" 2014-10-13 21:24:27,379 - TRACE - PathResourceResolver - Checking location=[class path resource [META-INF/resources/static/]] 2014-10-13 21:24:27,379 - TRACE - PathResourceResolver - Found match 2014-10-13 21:24:27,382 - TRACE - VersionResourceResolver - Version=e524ca0e83caa5e899c99b155588a9e6 2014-10-13 21:24:27,382 - TRACE - ResourceUrlProvider - Resolved public resource URL path=""/test-e524ca0e83caa5e899c99b155588a9e6.js"" 2014-10-13 21:24:27,382 - TRACE - ResourceUrlProvider - Getting resource URL for requestURL=/test-app/static/test.js 2014-10-13 21:24:27,382 - TRACE - ResourceUrlProvider - Getting resource URL for lookupPath=/static/test.js 2014-10-13 21:24:27,382 - TRACE - ResourceUrlProvider - Invoking ResourceResolverChain for URL pattern=""/static/**"" 2014-10-13 21:24:27,383 - TRACE - VersionResourceResolver - Resolving public URL for path=""/test.js"" 2014-10-13 21:24:27,383 - TRACE - PathResourceResolver - Resolving public URL for path=""/test.js"" 2014-10-13 21:24:27,383 - TRACE - PathResourceResolver - Checking location=[class path resource [META-INF/resources/static/]] 2014-10-13 21:24:27,383 - TRACE - PathResourceResolver - Found match 2014-10-13 21:24:27,383 - TRACE - VersionResourceResolver - Getting the original resource to determine version 2014-10-13 21:24:27,383 - TRACE - PathResourceResolver - Resolving resource: requestPath=""/test.js"" 2014-10-13 21:24:27,383 - TRACE - PathResourceResolver - Checking location=[class path resource [META-INF/resources/static/]] 2014-10-13 21:24:27,383 - TRACE - PathResourceResolver - Found match 2014-10-13 21:24:27,384 - TRACE - VersionResourceResolver - Version=e524ca0e83caa5e899c99b155588a9e6 2014-10-13 21:24:27,384 - TRACE - ResourceUrlProvider - Resolved public resource URL path=""/test-e524ca0e83caa5e899c99b155588a9e6.js"" ```  When Spring Security is enabled  ``` 2014-10-13 21:30:10,872 - ResourceUrlProvider - Getting resource URL for requestURL=/test-app/static/test.js Oct 13, 2014 9:30:10 PM org.apache.catalina.core.ApplicationDispatcher invoke SEVERE: Servlet.service() for servlet jsp threw exception java.lang.IllegalStateException: Failed to determine lookup path: /test-app/static/test.js 	at org.springframework.util.Assert.state(Assert.java:385) 	at org.springframework.web.servlet.resource.ResourceUrlProvider.getForRequestUrl(ResourceUrlProvider.java:183) 	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter$ResourceUrlEncodingResponseWrapper.encodeURL(ResourceUrlEncodingFilter.java:71) 	at org.apache.taglibs.standard.tag.common.core.UrlSupport.doEndTag(UrlSupport.java:119) 	at org.apache.jsp.WEB_002dINF.views.home_jsp._jspx_meth_c_005furl_005f0(home_jsp.java:196) 	at org.apache.jsp.WEB_002dINF.views.home_jsp._jspService(home_jsp.java:94)        ... ```  ---  **Affects:** 4.1.1  **Issue Links:** - #16886 Failure to insert version in full path URLs within CSS file","closed","type: bug,","spring-projects-issues","2014-10-14T07:15:03Z","2019-01-11T19:13:33Z"
"","17154","@JsonView not working with Resources [SPR-12552]","**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** opened **[SPR-12552](https://jira.spring.io/browse/SPR-12552?redirect=false)** and commented  Hi,  Spring 4.1.3 Jackson 2.4.4  I have a class that looks something like this:  ```java public class Foo {   public interface Summary{}   @JsonView(Foo.Summary.class)  private String name;   private String password;  } ```  and a controller that looks something like this:  ```java @JsonView(Foo.Summary.class) public ResponseEntity getFoos() {     final Page foos =  serviceLayer.getFoos();     return new ResponseEntity(pagedResourcesAssember.toResource(foos), HttpStatus.OK); } ```  However, when I get the values returned, they include everything:  ``` {  ""links"": {      .....      .....  },  ""content"" : [     {     ""name"": ""billy"",     ""password"": ""sssh""     },     {     ""name"": ""goat"",     ""password"": ""drowssap""     }   ],   ""pages"": {      ....      ....    } } ```  As you can see, the `@JsonView` is not being honoured during the serialization of the Content data as the ""password"" field is being included in the serialization.  Thank you.  -=david=-   ---  **Affects:** 4.1.3","closed","status: declined,","spring-projects-issues","2014-12-18T01:48:04Z","2021-08-27T19:20:11Z"
"","16892","HttpEntity parameter 'null' in method (regression) [SPR-12287]","**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** opened **[SPR-12287](https://jira.spring.io/browse/SPR-12287?redirect=false)** and commented  Hi,  Linux Java 1.8.0_20  Just upgraded to Spring 4.1.1 (was using Spring 4.1.0 prior). I'm now receiving this error on a controller that is working for 4.1.0.  ``` java.lang.IllegalArgumentException: HttpEntity parameter 'null' in method public java.lang.Object org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod$1.call() throws java.lang.Exception is not parameterized or has more than one parameter 	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.getHttpEntityType(HttpEntityMethodProcessor.java:110) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.getReturnValueType(HttpEntityMethodProcessor.java:150) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:119) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:138) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:71) ~[spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:122) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:781) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:721) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:943) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) [spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:868) [spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) [servlet-api-3.1.jar:3.1.0] 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) [spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) [servlet-api-3.1.jar:3.1.0] 	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:769) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1667) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.0.M2.jar:na] 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:108) [spring-security-web-4.0.0.M2.jar:na] 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) [spring-security-web-4.0.0.M2.jar:na] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-4.0.0.M2.jar:na] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-4.0.0.M2.jar:na] 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) [spring-security-web-4.0.0.M2.jar:na] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-4.0.0.M2.jar:na] 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154) [spring-security-web-4.0.0.M2.jar:na] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-4.0.0.M2.jar:na] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-4.0.0.M2.jar:na] 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) [spring-security-web-4.0.0.M2.jar:na] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-4.0.0.M2.jar:na] 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) [spring-security-web-4.0.0.M2.jar:na] 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) [spring-security-web-4.0.0.M2.jar:na] 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal(OpenEntityManagerInViewFilter.java:177) [spring-orm-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.servlets.CrossOriginFilter.handle(CrossOriginFilter.java:248) [jetty-servlets-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.servlets.CrossOriginFilter.doFilter(CrossOriginFilter.java:211) [jetty-servlets-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE] 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:583) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577) [jetty-security-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1125) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1059) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:189) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.server.Server.handleAsync(Server.java:553) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:318) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.server.HttpChannel.run(HttpChannel.java:262) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:610) [jetty-util-9.2.3.v20140905.jar:9.2.3.v20140905] 	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:539) [jetty-util-9.2.3.v20140905.jar:9.2.3.v20140905] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_20] ```  I'm going to have to revert back to 4.1.0.  Thank you  -=david=-  ---  **Affects:** 4.1.1  **Issue Links:** - #19365 IllegalArgumentException: HttpEntity parameter 'null'  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c5e360d886931f761c2be5ff4b31d5df2042d415, https://github.com/spring-projects/spring-framework/commit/8cce40469631327e0afdd5d41393248313819270, https://github.com/spring-projects/spring-framework/commit/956b66bbd466bb7a68e8499a483139a516572b24  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2014-10-01T11:04:24Z","2019-01-11T17:36:34Z"
"","16666","String to Enum Interface conversion not working [SPR-12050]","**[David Haraburda](https://jira.spring.io/secure/ViewProfile.jspa?name=dharaburda)** opened **[SPR-12050](https://jira.spring.io/browse/SPR-12050?redirect=false)** and commented  Given an Enum that implements SomeInterface, GenericConversionService will attempt to use the default StringToEnumConverterFactory, even if a custom converter for String -> SomeInterface is registered.  This problem was reported and described in #14326 but wasn't actually fixed.  Instead, the ""opposite"" case of SomeInterface -> String conversion which also wasn't working was fixed.  The original test case attached to #14326 fails on 4.0.6;  I have also attached to this JIRA an updated test case based on the original that in addition to demonstrating the described failure also shows a failure when a converter is registered for the base interface of some interface that is implemented by an Enum (i.e., SomeInterface extends SomeBaseInterface).  ---  **Affects:** 4.0.6  **Attachments:** - [spring_conversion_service_tests.zip](https://jira.spring.io/secure/attachment/22151/spring_conversion_service_tests.zip) (_15.11 kB_)  **Issue Links:** - #14326 Support conversion from Enum Interface  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d0e6f0f73fc3c6c31513a0a8c9805b41b102e1f6, https://github.com/spring-projects/spring-framework/commit/c29937196f1847d4fee6e54a80634fe343416b0f","closed","type: enhancement,","spring-projects-issues","2014-07-30T15:17:50Z","2019-01-11T18:18:40Z"
"","16618","Changes to AbstractApplicationEventMulticaster in 3.2.9 break HttpSessionEventPublisher in Google AppEngine Runtime [SPR-12002]","**[David Fuelling](https://jira.spring.io/secure/ViewProfile.jspa?name=sappenin)** opened **[SPR-12002](https://jira.spring.io/browse/SPR-12002?redirect=false)** and commented  My Error  ---  I have a Spring webapp running in Google App Engine (GAE).  It has been running fine for more than a year, but once I upgraded to Spring 3.2.9.RELEASE, I started getting java.security.AccessControlException's (see stack trace below) when running the app in the AppEngine runtime (Note: the app works fine locally in the AppEngine devserver, which is basically a Jetty container).  This is typical for appengine - the runtime classloader permissions are more restrictive in the production runtime than in the development server.  Cause  ---  My app has an HttpSessionEventPublisher configured to publish session events.  It appears that #16229 introduced subtle changes to AbstractApplicationEventMulticaster (https://github.com/spring-projects/spring-framework/commit/e1602f7f83ded6438ce1307605d4de2366cfb8f7#diff-2047c68c136729519797ac17b17a5bcc) on line 178 that start accessing the classloader of each event's ""source"" and ""type"".  From my own investigation, it appears that while using SpringSocial (Facebook), the ProviderSignInUtils kicks off a new session, and when the AbstractApplicationEventMulticaster encounters this event, it attempts to get the ClassLoader for the following class, which is not allowed in Appengine: com.google.apphosting.runtime.jetty.SessionManager$AppEngineSession (throws the AccessControlException).  I realize this is somewhat of an AppEngine issue, but am wondering if it makes sense for Spring to try and do something more appropriate here?  As-is, anyone using HttpSessions with HttpSessionEventPublisher in AppEngine will probably break.  Here's the stack trace:  ---  org.springframework.social.connect.web.ProviderSignInController signIn: Exception while building authorization URL: java.security.AccessControlException: access denied (java.lang.RuntimePermission getClassLoader) at com.google.appengine.runtime.Request.process-b35531ed0170125f(Request.java) at java.lang.Class.getClassLoader(Class.java:445) at org.springframework.util.ClassUtils.isCacheSafe(ClassUtils.java:400) at org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(AbstractApplicationEventMulticaster.java:178) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:86) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334) at org.springframework.security.web.session.HttpSessionEventPublisher.sessionCreated(HttpSessionEventPublisher.java:69) at org.mortbay.jetty.servlet.AbstractSessionManager.addSession(AbstractSessionManager.java:577) at org.mortbay.jetty.servlet.AbstractSessionManager.newHttpSession(AbstractSessionManager.java:415) at org.mortbay.jetty.Request.getSession(Request.java:1242) at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:216) at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:216) at org.springframework.web.context.request.ServletRequestAttributes.getSession(ServletRequestAttributes.java:79) at org.springframework.web.context.request.ServletRequestAttributes.setAttribute(ServletRequestAttributes.java:127) at org.springframework.social.connect.web.HttpSessionSessionStrategy.setAttribute(HttpSessionSessionStrategy.java:8) at org.springframework.social.connect.web.ConnectSupport.buildOAuth2Url(ConnectSupport.java:223) at org.springframework.social.connect.web.ConnectSupport.buildOAuthUrl(ConnectSupport.java:128) at org.springframework.social.connect.web.ProviderSignInController.signIn(ProviderSignInController.java:175) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:45) at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:215) at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:685) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:919) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:851) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:953) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:855) at javax.servlet.http.HttpServlet.service(HttpServlet.java:637) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:829) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)  ---  **Affects:** 3.2.9, 4.0.2  **Reference URL:** https://github.com/spring-projects/spring-framework/commit/e1602f7f83ded6438ce1307605d4de2366cfb8f7#diff-2047c68c136729519797ac17b17a5bcc  **Issue Links:** - #16229 AbstractApplicationEventMulticaster can leak classes  **Backported to:** [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)","closed","in: core,","spring-projects-issues","2014-07-16T08:48:22Z","2019-01-13T20:59:15Z"
"","17134","@EnableMBeanExport exposes scoped proxies and their targets [SPR-12529]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-12529](https://jira.spring.io/browse/SPR-12529?redirect=false)** and commented  If you have a `@ManagedResource` on a scoped proxy (e.g. with `@Lazy @Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)`) then `@EnableMBeanExport` will expose 2 MBeans.   ---  **Affects:** 4.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cae217de94b226ab36a1c791f8db062f1d65f1be","closed","in: core,","spring-projects-issues","2014-12-10T02:45:31Z","2014-12-30T05:21:45Z"
"","17105","Support for X-Forwarded-Prefix in ServletUriComponentsBuilder [SPR-12500]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-12500](https://jira.spring.io/browse/SPR-12500?redirect=false)** and commented  If a proxy strips a prefix from the path before forwarding it might add an X-Forwarded-Prefix header. It's not as common as X-Forwarded-Host (but neither is a standard, just a convention). If the backend has to send a Location header back (for instance) it needs to re-add the prefix to the URL path. It's very similar to what ServletUriComponentsBuilder is already doing, but with an extra path element in the URL.  ---  **Affects:** 4.1.2  **Issue Links:** - [DATAREST-620](https://jira.spring.io/browse/DATAREST-620) Hateoas Link generation behind Zuul proxy - #21191 ServletUriComponentsBuilder should replace context path when X-Forwarded-Prefix is present - #18842 ForwardedHeaderFilter could support X-Forwarded-Prefix as well","closed","type: enhancement,","spring-projects-issues","2014-12-03T04:17:31Z","2019-01-11T18:32:14Z"
"","17093","Need a defensive close() in YamlProcessor [SPR-12487]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-12487](https://jira.spring.io/browse/SPR-12487?redirect=false)** and commented  Apparenlty snakeyaml does not close the InputStream you give it, so to prevent problems (especially on Windows), we need to defensively close the stream in YamlProcessor.  This test fails on Windows:  ``` @Test public void test() throws Exception {      Files.copy(Paths.get(""src"", ""test"", ""resources"", ""test.yml""), Paths.get(""target"", ""test.yml""), StandardCopyOption.REPLACE_EXISTING);      new Yaml().loadAll(new FileInputStream(""target/test.yml""));      Files.delete(Paths.get(""target"", ""test.yml"")); } ```  but this one passes:  ``` @Test public void test() throws Exception {      Files.copy(Paths.get(""src"", ""test"", ""resources"", ""test.yml""), Paths.get(""target"", ""test.yml""), StandardCopyOption.REPLACE_EXISTING);      FileInputStream stream = new FileInputStream(""target/test.yml"");      new Yaml().loadAll(stream);      stream.close();      Files.delete(Paths.get(""target"", ""test.yml"")); } ```  Discovered by a Spring Cloud user: https://github.com/spring-cloud/spring-cloud-config/issues/45, but will also affect Spring Boot users if they have config files on the file system and then try to delete them.  ---  **Affects:** 4.1.2  **Issue Links:** - #17765 YAML Processor leaves StreamDecoder open  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9a71a0c6c914b15183b53b94e165aa4b63f8330e","closed","in: core,","spring-projects-issues","2014-12-01T04:18:24Z","2019-01-11T19:36:46Z"
"","17092","@Scope and other common bean annotations on nested @Component classes [SPR-12486]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-12486](https://jira.spring.io/browse/SPR-12486?redirect=false)** and commented  A nested static class inside `@Configuration` is considered for inclusion in the bean factory, and if it is a `@Component` you get a bean definition, but the `@Scope` on the class is ignored. A bean that is created by a component scan does not behave this way (I presume), neither does it when added explicitly to the bean factory (e.g. in the constructor of AnnotationConfigApplicationContext).  I think #16497 refers obliquely to this problem. #13365 also looks relevant.  ---  **Affects:** 4.1.2  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/88  **Issue Links:** - #16502 `@Configuration` should respect `@DependsOn` on imported or nested classes as well  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c5c5473d44f101271e47921fb7d2a125199be517","closed","type: enhancement,","spring-projects-issues","2014-12-01T01:39:26Z","2019-01-13T05:43:41Z"
"","16947","StandardEnvironment should wrap System properties in a non-synchronized Map [SPR-12342]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-12342](https://jira.spring.io/browse/SPR-12342?redirect=false)** and commented  StandardEnvironment should wrap System properties in a non-synchronized Map. Since java.util.Properties is a Hashtable it is hard-coded to be synchronized and this can cause performance issues when there is concurrent access (Grails apparently always wraps Properties if it can). The Environment isn't normally accessed concurrently during startup, but it **is** a public API and users can access it concurrently later in the lifecycle.   ---  0 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-10-17T02:08:38Z","2019-01-12T00:18:41Z"
"","16923","YamlProcessor and YamlMapFactoryBean allow duplicate keys in map nodes [SPR-12318]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-12318](https://jira.spring.io/browse/SPR-12318?redirect=false)** and commented  The YAML spec (http://www.yaml.org/spec/1.2/spec.html#id2765608) says that MappingNodes must have unique keys, but the Java implementation (Snake YAML) doesn't enforce that. The result can be a nasty surprise for users where maps entryies are silently overwritten, e.g.  ``` spring:   datasource:     url: jdbc:mysql://localhost/test spring:   main:     headless: true ```  See https://github.com/spring-projects/spring-boot/issues/1683 for original report.   ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/859e1e800345d528b17f23e74dfaf8bf4185b070  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2014-10-10T04:39:05Z","2014-11-17T06:42:32Z"
"","16677","@RequestMapping(params=""file"") doesn't work for multipart data [SPR-12061]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-12061](https://jira.spring.io/browse/SPR-12061?redirect=false)** and commented  A controller method with `@RequestMapping(params=""file"")` doesn't get selected for handling when there **is** a parameter with that name and it is multipart file data. I can see that `DefaultMultipartHttpServletRequest` would support this but `StandardMultipartHttpServletRequest` (the servlet 3.0 version) doesn't because it doesn't override `getParameter(String)`. Since Spring always seems to give me the latter, then it never works.   ---  **Affects:** 4.0.6","closed","status: bulk-closed,","spring-projects-issues","2014-08-03T10:13:27Z","2019-01-12T02:28:43Z"
"","16675","NPE in import selector [SPR-12059]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-12059](https://jira.spring.io/browse/SPR-12059?redirect=false)** and commented  See https://github.com/spring-projects/spring-boot/issues/1328 for original report. Easy to reproduce with Spring Boot app:  ``` @Configuration @ComponentScan public class Application extends BaseConfiguration {      public static void main(String[] args) {         SpringApplication.run(Application.class, args);     } }  @Configuration @EnableAutoConfiguration(exclude = DataSourceAutoConfiguration.class) abstract class BaseConfiguration { } ```    ---  **Affects:** 4.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e142fd11e08261de16f79e23081e02cab3d9f628  0 votes, 5 watchers","closed","status: invalid,","spring-projects-issues","2014-08-02T10:55:15Z","2019-01-12T05:25:31Z"
"","16502","@Configuration should respect @DependsOn on imported or nested classes as well [SPR-11883]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11883](https://jira.spring.io/browse/SPR-11883?redirect=false)** and commented  The `@DependsOn` annotation is allowed at the type level but it doesn't seem to work on `@Configuration` classes if they are `@Imported` or nested inside another `@Configuration`. To make a `@Configuration` class really depend on something I found I had to create a `@Bean` and annotate the method (not the type). Test case: https://github.com/spring-projects/spring-framework-issues/pull/80  ---  **Issue Links:** - #17092 `@Scope` and other common bean annotations on nested `@Component` classes","closed","type: enhancement,","spring-projects-issues","2014-06-18T02:38:54Z","2019-01-13T05:48:35Z"
"","16463","Unloadable nested classes in @Import should not fail if associated conditions exclude them anyway [SPR-11844]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-11844](https://jira.spring.io/browse/SPR-11844?redirect=false)** and commented  If I add a `@Configuration` via an `ImportSelector` its nested classes are not loaded if they are `@Conditional` and the condition does not match (i.e. as expected). If you `@Import` the same class directly Spring loads the nested classes and there can be runtime errors (e.g. `ClassNotFound`).   ---  **Affects:** 4.0.5","closed","type: enhancement,","spring-projects-issues","2014-06-02T08:35:06Z","2014-07-08T00:21:26Z"
"","17085","Enrich the message for ""connected"" events with Principal [SPR-12479]","**[Daniel Siviter](https://jira.spring.io/secure/ViewProfile.jspa?name=dansiviter)** opened **[SPR-12479](https://jira.spring.io/browse/SPR-12479?redirect=false)** and commented  When receiving all `AbstractSubProtocolEvent` events the content of the `SessionConnectedEvent` differs and appears to be an embedded `SessionConnectEvent` inside of the `SessionConnectedEvent`. A simple example using Spring Boot, Security and the simple broker results in the following logging:  ``` 2014-11-27 13:44:08.289  INFO 4092 --- [nio-8080-exec-8] civvi.streaming.GreetingController       : Event recieved. [type=SessionConnectEvent,user=org.springframework.security.authentication.UsernamePasswordAuthenticationToken@bbd60c2f: Principal: org.springframework.security.core.userdetails.User@36ebcb: Username: user; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: ROLE_USER; Credentials: [PROTECTED]; Authenticated: true; Details: org.springframework.security.web.authentication.WebAuthenticationDetails@fffde5d4: RemoteIpAddress: 0:0:0:0:0:0:0:1; SessionId: 3F80B97FD34A55597672915DFCDA1B57; Granted Authorities: ROLE_USER,session=jnsg2kr_] 2014-11-27 13:45:19.887  INFO 4092 --- [boundChannel-20] civvi.streaming.GreetingController       : Event recieved. [type=SessionConnectedEvent,user=null,session=jnsg2kr_] ```  When attempting to access the user it's not possible without working around the embedded event. The logging code I'm using is as follows:  ``` LOG.info(""Event recieved. [type={},user={},session={}]"", 				e.getClass().getSimpleName(), 				StompHeaderAccessor.getUser(e.getMessage().getHeaders()), 				StompHeaderAccessor.getSessionId(e.getMessage().getHeaders())); ```  Inspection of the data reveals the following structure:  ``` SessionConnectedEvent {   message = GenericMessage {     headers = HashMap {       simpConnectMessage = GenericMessage {         headers = HashMap {           simpUser = UsernamePasswordAuthenticationToken {             ...           },           ...         },         ...       },       simpUser = *null*,       ...     },     ...   } } ```  From stack trace:  ``` Thread [clientOutboundChannel-26] (Suspended (breakpoint at line 61 in GreetingController))	 	GreetingController.onApplicationEvent(AbstractSubProtocolEvent) line: 61	 	GreetingController.onApplicationEvent(ApplicationEvent) line: 1	 	SimpleApplicationEventMulticaster.invokeListener(ApplicationListener, ApplicationEvent) line: 151	 	SimpleApplicationEventMulticaster.multicastEvent(ApplicationEvent) line: 128	 	AnnotationConfigEmbeddedWebApplicationContext(AbstractApplicationContext).publishEvent(ApplicationEvent) line: 331	 	StompSubProtocolHandler.publishEvent(ApplicationEvent) line: 299	 	StompSubProtocolHandler.handleMessageToClient(WebSocketSession, Message) line: 349	 	SubProtocolWebSocketHandler.handleMessage(Message) line: 337	 	ExecutorSubscribableChannel$SendTask.run() line: 135	 	ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker) line: 1142	 	ThreadPoolExecutor$Worker.run() line: 617	 	Thread.run() line: 745	 ```    ---  **Affects:** 4.1.2","closed","type: enhancement,","spring-projects-issues","2014-11-27T06:00:59Z","2014-12-09T02:49:27Z"
"","16814","Additional version of Maven 'bill-of-materials' that excludes commons-logging [SPR-12200]","**[Daniel Cruver](https://jira.spring.io/secure/ViewProfile.jspa?name=ddcruver)** opened **[SPR-12200](https://jira.spring.io/browse/SPR-12200?redirect=false)** and commented  It would be nice to have an additional BOM that would exclude commons-logging for those that use SLF4J.  An example of this is defined at https://github.com/anthavio/anthavio-maven-poms/blob/master/spring-framework-bom.pom  Rather then relying on this version that will not be released in sync with Spring releases it would be nice to have an additional version that people can choose that is released by Spring.  See #15764 for original BOM request.  ---  **Affects:** 4.1 GA","closed","type: enhancement,","spring-projects-issues","2014-09-16T07:09:58Z","2019-01-11T17:26:54Z"
"","17016","MockRestServiceServer should allow more verification options [SPR-12408]","**[daniel carter](https://jira.spring.io/secure/ViewProfile.jspa?name=dantheperson)** opened **[SPR-12408](https://jira.spring.io/browse/SPR-12408?redirect=false)** and commented  It would be good if the verification of interactions was more Mockito-like.  For instance verify() should only verify that the expected interactions occurred. A new method verifyNoMoreInteractions() could be used for more rigid tests where you care that no other interactions have happened.  I tend to agree with Mockito that verifyNoMoreInteractions() (the current MockResetServiceServer.verify() behavior) ""leads to overspecified, less maintainable tests""  and doesn't allow  separate test methods that are focused around behavior.  To give an example, I have a registration service I am testing.  As part of user registration, the service will interact with a number of resources on the back-end data service over a REST API.  I don't want one massive unit-test that tests everything in one method, but prefer to test that each resource is updated correctly in separate tests.  ```java @Test void testRegistrationCreatesProfile() {     // setup expectations on profile URL.     // call service     // call verify  }  @Test void testRegistrationCreatesContactDetails() {     // setup expectations on contact URL.     // call service     // call verify  } ```  But those tests fail as the profile test does not expect the call to the contact URL and vice-versa, so instead i have to do:  ```java testRegistrationCreatesProfile() {     // setup detailed expectations on profile URL.     // setup simple requestTo expectation on contact URL.     // call service     // call verify  }  testRegistrationCreatesContactDetails() {     // setup detailed expectations on contact URL.     // setup simple requestTo expectation on profile URL.     // call service     // call verify  } ```  Now there's actually about 6 resource/urls that get updated; so this gets messy quick. The test on the contact details has to set up expectations on 5 URLs that it doesn't care about, and adding a new one breaks all the existing tests.  ---  **Affects:** 4.1.1  **Reference URL:** http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected/  **Issue Links:** - #15991 MockRestServiceServer should allow for an expectation to occur multiple times. - #16845 Make MockRestServiceServer error messages more descriptive  4 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2014-11-02T19:57:19Z","2019-01-11T19:30:25Z"
"","16889","Hibernate initialization exceptions ignored [SPR-12284]","**[Daan de Wit](https://jira.spring.io/secure/ViewProfile.jspa?name=ddewit)** opened **[SPR-12284](https://jira.spring.io/browse/SPR-12284?redirect=false)** and commented  When an Hibernate xml mapping file contains an error (eg refers to missing class), this exception is ignored by Spring, and it keeps trying to instantiate the session factory. After enabling debug logging for the Spring framework, I see messages like this:  ``` Ignoring bean creation exception on FactoryBean type check: org.springframework.beans.factory.BeanCreationException: Error creating bean with name (.. redacted ..) defined in class path resource [dao-config.xml]: Invocation of init method failed; nested exception is org.hibernate.MappingException: An association from the table Table1 refers to an unmapped class: com.my.package.MyClass ```    ---  **Affects:** 4.0.4","closed","","spring-projects-issues","2014-10-01T08:38:26Z","2019-01-11T17:36:20Z"
"","16810","Spring HTTP clients do not enforce RFC 6265 (cookies in a single header) [SPR-12196]","**[Cédrik LIME](https://jira.spring.io/secure/ViewProfile.jspa?name=cedrik_lime)** opened **[SPR-12196](https://jira.spring.io/browse/SPR-12196?redirect=false)** and commented  [RFC 6265](http://tools.ietf.org/html/rfc6265#section-5.4) mandates that all cookies be placed in a single `Cookie` HTTP header: `When the user agent generates an HTTP request, the user agent MUST NOT attach more than one Cookie header field.`  Spring HTTP Client (using SimpleHttpClient) does not follow this requirement, which can break application using multiple cookies. In my own tests, Apache https tends to be quite lenient, whereas IIS strictly follows RFC 6265.  Affected classes are: * `org.springframework.http.client. SimpleBufferingAsyncClientHttpRequest#executeInternal()` * `org.springframework.http.client.SimpleBufferingClientHttpRequest#executeInternal()` * `org.springframework.http.client. SimpleStreamingAsyncClientHttpRequest#writeHeaders()` * `org.springframework.http.client. SimpleStreamingClientHttpRequest#writeHeaders()`  All those classes should read when copying HTTP headers to the underlying connection:  ```java for (Map.Entry entry : headers.entrySet()) {      String headerName = entry.getKey();      if (""Cookie"".equalsIgnoreCase(headerName)) { // RFC 6265           String headerValue = StringUtils.collectionToDelimitedString(entry.getValue(), ""; "");           this.connection.setRequestProperty(headerName, headerValue);      } else {           for (String headerValue : entry.getValue()) {                    this.connection.addRequestProperty(headerName, headerValue);           }      } } ```  Fixing this bug in client (application) code is quite difficult, since those classes are package-private, final, and their state is private. Hence this should really be taken care of in Spring Framework.  ---  **Affects:** 3.2.11, 4.1 GA  **Issue Links:** - #16787 HttpHeaders should accept empty Content-Type header  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-09-15T07:28:41Z","2019-01-11T17:19:08Z"
"","16722","Remove synchronization around filteredPropertyDescriptorsCache in case of non-existing entry [SPR-12106]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-12106](https://jira.spring.io/browse/SPR-12106?redirect=false)** and commented  AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck synchronizes on filteredPropertyDescriptorsCache.  filteredPropertyDescriptorsCache is a ConcurrentHashMap, so such synchronization is not necessary.  Removing the lock would improve concurrency.  ---  **Affects:** 4.1 RC2  **Issue Links:** - #16494 Performance regression for custom autowireBean calls with many properties - #13456 Unnecessarily conservative locking in registerDependentBean is a bottleneck  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8eac87064dd0d0884b830be68e2a6921f10bfede","closed","type: enhancement,","spring-projects-issues","2014-08-20T19:24:33Z","2019-01-11T17:11:29Z"
"","16718","Use putIfAbsent in CachedIntrospectionResults.addTypeDescriptor [SPR-12102]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-12102](https://jira.spring.io/browse/SPR-12102?redirect=false)** and commented  In #16486, CachedIntrospectionResults was changed to use a ConcurrentHashMap for typeDescriptorCache. This change is definitely positive and had a significant improvement to performance in my testing.  I think that using putIfAbsent (instead of just put) would be a further improvement in the addTypeDescriptor method. Changing:  ``` void addTypeDescriptor(PropertyDescriptor pd, TypeDescriptor td) {      this.typeDescriptorCache.put(pd, td); } ```  to  ``` void addTypeDescriptor(PropertyDescriptor pd, TypeDescriptor td) {      this.typeDescriptorCache.putIfAbsent(pd, td); } ```  should result in less writes to volatile variables improve performance of getTypeDescriptor.  Changing the other ConcurrentHashMap (strongClassCache and softClassCache) put()'s to putIfAbsent()'s would probably also be beneficial.  ---  **Affects:** 4.1 RC2  **Issue Links:** - #16486 Revisit class cache in CachedIntrospectionResults  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/af6ef5f74c03b8b47cc153ffc6b8f945d50d86d4, https://github.com/spring-projects/spring-framework/commit/781a6d289e76b616602c3b14d6de2dd0f8a15af5","closed","type: enhancement,","spring-projects-issues","2014-08-19T13:27:50Z","2019-01-11T17:11:14Z"
"","16713","ShallowEtagHeaderFilter doesn't support Servlet 3.1 setContentLengthLong [SPR-12097]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-12097](https://jira.spring.io/browse/SPR-12097?redirect=false)** and commented  #12842 tracks support for Servlet 3.1 and is marked as completed.  However, ShallowEtagHeaderFilter doesn't include setContentLengthLong() although it does include setContentLength(). This omission may be surprising to users and doesn't seem to meet the intent of #12842.  ---  **Affects:** 4.0.6, 4.1 RC2  **Issue Links:** - #12842 Support Servlet 3.1 (JSR-340) - #12919 ShallowEtagHeaderFilter should make use of specified content length - #17083 Extract ContentCachingRequestWrapper and ContentCachingResponseWrapper for custom use outside of Spring's filters  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0c32d66cbdcab41fd36d80c4bdf2d22aff86d751, https://github.com/spring-projects/spring-framework/commit/2dd2b7175f50984aeec59e68494812f236987980  **Backported to:** [4.0.7](https://github.com/spring-projects/spring-framework/milestone/119?closed=1)","closed","type: bug,","spring-projects-issues","2014-08-18T20:22:43Z","2019-01-11T18:16:53Z"
"","16697","ShallowEtagHeaderFilter should use a more efficiently dynamically resizing buffer than ResizableByteArrayOutputStream [SPR-12081]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-12081](https://jira.spring.io/browse/SPR-12081?redirect=false)** and commented  ShallowEtagHeaderFilter buffers the response in ResizableByteArrayOutputStream. When it needs to grows the response, it uses ResizableByteArrayOutputStream.resize(int): https://github.com/spring-projects/spring-framework/blob/v4.0.6.RELEASE/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java#L245 https://github.com/spring-projects/spring-framework/blob/v4.0.6.RELEASE/spring-core/src/main/java/org/springframework/util/ResizableByteArrayOutputStream.java#L64  ResizableByteArrayOutputStream then creates a new buffer, copies the old buffer into the new buffer, then (implicitly) releases the old buffer.  It would be more efficient to use a linked list of buffers. The resize operation would create a new empty buffer and add it to the linked list of buffers. This approach results in less copying so less overall memory use (reducing the frequently of problems such as #15482 when due to buffer resizing).  For an example of this approach in use today, see Grails' StreamCharBuffer: https://github.com/grails/grails-core/blob/355a031bfacbdc94c60b4a8fe4131a500c8833cb/grails-encoder/src/main/groovy/org/grails/buffer/StreamCharBuffer.java Note that this approach is also in use in MyFaces, see https://issues.apache.org/jira/browse/MYFACES-3450  ---  **Affects:** 4.0.6  **Issue Links:** - #12919 ShallowEtagHeaderFilter should make use of specified content length","closed","type: enhancement,","spring-projects-issues","2014-08-14T08:52:31Z","2019-01-11T18:17:22Z"
"","16768","FormattingConversionService.ParserConverter Does Not Allow Custom Formatting of Blank Query Parameters [SPR-12154]","**[Craig Johnston](https://jira.spring.io/secure/ViewProfile.jspa?name=cjohnsto88)** opened **[SPR-12154](https://jira.spring.io/browse/SPR-12154?redirect=false)** and commented  I have a form on a web page that takes various values for doing a search and makes a GET request to the server on submission. One of these field is an int field which can be empty. If it is empty I wish to set it to Integer.MAX_VALUE which signifies that no particular value is required in the search.  I registered a Formatter implementation with the FormatterRegistry  ``` 		registry.addFormatterForFieldType(Integer.class, new Formatter() {  			@Override 			public Integer parse(String text, Locale locale) throws ParseException { 				if (StringUtils.isBlank(text)) { 					return Integer.MAX_VALUE; 				}  				return Integer.parseInt(text); 			}  			@Override 			public String print(Integer value, Locale locale) { 				if (Integer.MAX_VALUE == value) { 					return """"; 				}  				return value.toString(); 			} 		}); ```  However when a blank query parameter value is included in the request to the server, Spring is unable to call my formatter's parse method due to this section of FormattingConversionService.ParserConverter  ``` @Override public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {      String text = (String) source;      if (!StringUtils.hasText(text)) {           return null;      } ```  null will be returned from this. TypeConverterDelegate does then attempt to fallback to PropertyEditors. My understanding however is that PropertyEditors are now discouraged and don't seem to play well with Web Flow.  My feeling is that it should be possible for custom Formatter implementations to handle the case of an empty parameter.    ---  **Affects:** 4.0.6","closed","status: bulk-closed,","spring-projects-issues","2014-09-05T05:49:05Z","2019-01-12T00:19:16Z"
"","17122","Names of Maven Dependencies [SPR-12517]","**[Corneil du Plessis](https://jira.spring.io/secure/ViewProfile.jspa?name=corneil)** opened **[SPR-12517](https://jira.spring.io/browse/SPR-12517?redirect=false)** and commented  I would like to suggest that the names of the Maven Dependency is added to the Spring documentation. This is very important for people that do not use Spring Boot and don't want to include the kitchen sink. It is very important for the core Spring Framework because the functionality is spread over multiple modules that aren't always obvious.  Alternatively a separate list of packages for each module.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b0a72b311fa715013ca6d8af2e0dbec088b04111, https://github.com/spring-projects/spring-framework/commit/1f6a15e4da1b8719f8a7b89a9868039a97d1ba23","closed","type: documentation,","spring-projects-issues","2014-12-07T12:16:06Z","2014-12-30T05:21:43Z"
"","16398","ClassLoader leak with @Async, CGLIB and DefaultListableBeanFactory [SPR-11776]","**[Colin McQueen](https://jira.spring.io/secure/ViewProfile.jspa?name=colinmc)** opened **[SPR-11776](https://jira.spring.io/browse/SPR-11776?redirect=false)** and commented  When redeploying a Spring application, Perm gen keeps increasing along with the classes loaded. I looked at the heap dump file using Eclipse MAT and it suspected that DefaultListableBeanFactory class was a leak.  ---  **Affects:** 3.2.8  **Attachments:** - [AsyncAnnotationCause.PNG](https://jira.spring.io/secure/attachment/22002/AsyncAnnotationCause.PNG) (_92.36 kB_) - [DefaultListableBeanFactory Leak.PNG](https://jira.spring.io/secure/attachment/22000/DefaultListableBeanFactory+Leak.PNG) (_46.52 kB_) - [ShortestPathToAccumulationPoint.PNG](https://jira.spring.io/secure/attachment/22001/ShortestPathToAccumulationPoint.PNG) (_90.41 kB_)  **Issue Links:** - #15899 `@Async` with cglib based proxy causes memory leak in heap  1 votes, 5 watchers","closed","","spring-projects-issues","2014-05-12T06:18:33Z","2019-01-13T06:54:03Z"
"","16544","Time to support JSON fully in XML Bean definitions [SPR-11926]","**[Colbert Philippe](https://jira.spring.io/secure/ViewProfile.jspa?name=cp10000)** opened **[SPR-11926](https://jira.spring.io/browse/SPR-11926?redirect=false)** and commented  JSON does not and should not replace XML, however JSON is simply more compact and more elegant to read.  Let me suggest to that Spring keeps its traditional XML bean definition syntax, but makes the following addition to support JSON bean attribute declarations.    A new XML element should be introduced.   I call it \.   Here is an example of how to use it in bean definitions  \ \ \John Doe\  \director\ \34\ \ \ { ""name"": ""Jonh Doe"", ""title"": ""director"", ""age"": 34 } \ \ \   ---  **Affects:** 4.1 RC1","closed","status: bulk-closed,","spring-projects-issues","2014-06-27T16:38:30Z","2019-01-12T02:29:33Z"
"","16794","@Autowired does not work for target bean of type Collection [SPR-12180]","**[Claudio D'Angelo](https://jira.spring.io/secure/ViewProfile.jspa?name=ihepda)** opened **[SPR-12180](https://jira.spring.io/browse/SPR-12180?redirect=false)** and commented  I have a controller class with a field `List` autowired:  ```java @Autowired() @Qualifier(""publicViews"") private List publicViews; ```  In my configuration I've wrote:  ```xml  	gestione 	inserimento 	dettaglio   ```  When the application start spring throw an error:  ``` org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [java.lang.String] found for dependency [collection of java.lang.String]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier(value=publicViews)} 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:997) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:825) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:779) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:490) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:287) .... ```  In the `DefaultListableBeanFactory` the search for autowire candidate get the collection type and use this type to search the candidate:  ```java else if (Collection.class.isAssignableFrom(type) && type.isInterface()) { 			Class elementType = descriptor.getCollectionType(); 			if (elementType == null) { 				if (descriptor.isRequired()) { 					throw new FatalBeanException(""No element type declared for collection ["" + type.getName() + ""]""); 				} 				return null; 			} 			Map matchingBeans = findAutowireCandidates(beanName, elementType, descriptor); ```  I think that the system must search candidate for the `type` variable and not for `elementType`. In my issue the `elementType` is `String` not `java.util.List`.  ---  **Affects:** 3.2.11  **Issue Links:** - #17020 Can't inject a bean of a collection type (_**""is duplicated by""**_) - #15894 Make spring support like CDI `@Produces` (for Array/Map/Collection inject) (_**""is duplicated by""**_) - #12570 Allow for normal bean wiring semantics for types assignable to Map - #13096 Support `@Autowired-like` self injection - #19532 Self reference fallback in 4.3 is not meant to apply to collection elements - #19164 NoSuchBeanDefinitionException message shows internal array class names - #18904 Doc: Constructor injection of arrays and collections - #18162 Cannot inject List even using `@Named`  0 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2014-09-11T09:11:39Z","2019-10-04T17:10:05Z"
"","17046","@PathVariable does not respect UrlPathHelper.defaultEncoding [SPR-12441]","**[Christopher Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=cwong15)** opened **[SPR-12441](https://jira.spring.io/browse/SPR-12441?redirect=false)** and commented  I have been struggling to get a UTF-8 path resource decoded correctly using `@PathVariable`. If I use a URL like:  GET foo/18cb2581/records/%C3%9F%C3%9F  with a Spring MVC `@RestController` annotated like:  `@RequestMapping`(""/foo/{x}/records/{y}"") public Result foo(`@PathVariable` String x, `@PathVariable` String y)  The variable y does not get correctly decoded (a pair of betas). Solutions I tried on the net like putting CharacterEncodingFilter in web.xml and setting UrlPathHelper.defaultEncoding to ""UTF-8"" did not work. It turns out Spring MVC relies on UrlPathHelper.getLookupPathForRequest() to retrieve the URL to extract the path variables. This in turn calls getPathWithinServletMapping. Instead of decoding its own path using its defaultEncoding setting, this method relies on HttpServletRequest.getServletPath, which uses the servlet container's decoding (default is ISO8859-1). The method getPathWithinApplication does decode the URL correctly, but its value is only used if UrlPathHelper.alwaysUseFullPath is true (default is false).  If UrlPathHelper.getLookupPathForRequest ensures that its return path is always whatever it decoded itself, this would fix the encoding problem. Then I can enable UTF-8 decoding of path variables with:           	                   ---  **Affects:** 4.0.3","closed","status: bulk-closed,","spring-projects-issues","2014-11-14T12:39:51Z","2019-01-12T00:18:08Z"
"","17149","Permit matching slashes in @RequestMapping @PathVariables [SPR-12546]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-12546](https://jira.spring.io/browse/SPR-12546?redirect=false)** and commented  There's been a longstanding desire for some mechanism to match path variables including slash characters in `@RequestMapping` templates. The existing workarounds all seem to boil down to grabbing the HTTP request object and manually re-parsing the path.  In my own specific case, I have a hierarchy of parameterized static content that essentially dispatches to views based on the path but needs to set up some model attributes first. This seems to be a common use case and currently requires multiple-mapping hacks.  It would be very helpful to have a mechanism to explicitly specify that a path variable should match internal slash characters, perhaps as an extension of the `var:regex` syntax (can't include braces there).   ---  **Affects:** 4.1.3  **Reference URL:** http://stackoverflow.com/questions/3686808/spring-3-requestmapping-get-path-value","closed","type: enhancement,","spring-projects-issues","2014-12-15T11:00:45Z","2018-12-24T17:29:13Z"
"","17055","Registering an HttpMessageConverter while preserving default converters [SPR-12450]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-12450](https://jira.spring.io/browse/SPR-12450?redirect=false)** and commented  I am the maintainer for a component library that adds an embedded postback listener controller to some larger application. This controller needs a custom `HttpMessageConverter` due to quirky JSON supplied by the caller.  There is currently no distributed way to add HTTP converters to the Web configuration. The current best recommendation is to do something like call `addDefaultHttpMessageConverters` (#14257), but this component is not responsible for the overall configuration of the application.  I would like an annotation-based approach for configuring HTTP converters that could collect components from independent modules and apply them all without explicit coordination.  ---  **Affects:** 4.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/24834f6d2fd8f47100b904036249187c1e2444f6","closed","type: enhancement,","spring-projects-issues","2014-11-18T10:07:12Z","2019-01-11T19:27:29Z"
"","17020","Can't inject a bean of a collection type [SPR-12412]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-12412](https://jira.spring.io/browse/SPR-12412?redirect=false)** and commented  I have a bean that takes as an optional autowired argument a `Collection` of ""interesting"" keys to watch for. Spring has a hard assumption that this means that the DI container should collect beans of type `String` and autowire that; there's no way (at least in JavaConfig, and this looks to be a DI algorithm problem) to autowire a bean of type `Collection`.  The specific error is  ``` org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [java.lang.String] found for dependency [collection of java.lang.String] ```  ---  **Affects:** 4.1.1  **Reference URL:** https://github.com/chrylis/SPR-12412  **Issue Links:** - #16794 `@Autowired` does not work for target bean of type Collection (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2014-11-06T02:59:10Z","2019-01-13T05:43:59Z"
"","16848","Regression in @Condition exclusion [SPR-12233]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-12233](https://jira.spring.io/browse/SPR-12233?redirect=false)** and commented  I have [a bean that's doing conditional autoconfiguration](https://github.com/chrylis/blitline-java-client/blob/master/blitline-image-client-spring/src/main/java/com/blitline/image/spring/BlitlineConfiguration.java) based on whether a certain property is available in the environment; the actual condition matcher is  ``` @Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) { 	return context.getEnvironment().containsProperty(POSTBACK_URL_PROPERTY); } ```  The configuration class then creates a bean using an `@Value` injection if that property is present.  Spring 4.0.7->4.1.0 introduced a regression wherein the `@Value` is being evaluated even when the `@Condition` should not match, causing the context startup to crash. I have debugged, and Spring is in fact running the condition's matcher before proceeding to try (and fail) to extract the property from the environment. I attempted to step through it, but I could not tell whether the environment is erroneously returning true from `containsProperty` or the DI container is failing to disable the class when it has a false condition.  A simple Spring Boot application demonstrating the behavior is available at the GitHub link. Change the Spring version in the POM to 4.1.0 to demonstrate the bug; the launcher will crash on startup.  ---  **Affects:** 4.1 GA  **Reference URL:** https://github.com/chrylis/spring-SPR-12233  **Issue Links:** - #16634 Spring may invoke `@Bean` methods too early in case of a circular reference - #16345 `@Configuration` imported via `@ImportResource` is not processed  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4c59d85f690a29c45c644f9c3f13010d5cba84ed","closed","in: core,","spring-projects-issues","2014-09-21T16:45:47Z","2019-01-13T05:44:48Z"
"","16712","Read RestTemplate Accept header from entity annotation [SPR-12096]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-12096](https://jira.spring.io/browse/SPR-12096?redirect=false)** and commented  Current best practice is to version REST APIs by media type (`application/vnd.example.person-v1+json`), but the RestTemplate does not provide a simple mechanism for indicating the `Accept` header for an entity type when using a general-purpose converter (such as Jackson). Instead, the `AcceptHeaderRequestCallback` will add all potentially matching media types to the `Accept` header.  It should be possible to annotate an entity class to specify the media type that RestTemplate will request from the server so that older clients will not send an unversioned request that they can't understand:  ``` @EntityMediaType(""application/vnd.example.person-v1+json"") public class Person {     // stuff } ```  ---  **Affects:** 4.0.6  **Issue Links:** - #16747 Introduce proxy-based REST client similar to HttpInvokerProxyFactoryBean  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-08-18T18:24:08Z","2019-01-11T18:16:57Z"
"","16634","Spring may invoke @Bean methods too early in case of a circular reference [SPR-12018]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-12018](https://jira.spring.io/browse/SPR-12018?redirect=false)** and commented  If an `@Configuration` superclass provides a method annotated `@Bean`, the JavaConfig system can start invoking the superclass's `@Bean` methods before the actual object is fully constructed. If a subclass overrides one of these `@Bean` methods, and the superclass depends on retrieving a valid object from it, the superclass's initialization will fail.  The JavaConfig system should not treat `@Configuration` objects as live service objects until all dependencies have been injected and the `@PostConstruct` methods called.  ---  **Affects:** 4.0.6  **Issue Links:** - #17247 `@Autowired` List into Configuration that defines `@Bean` ToAutoWire fails - #16620 Non-stable BeanCurrentlyInCreationException with wrong Java config - #16743 Autowire bean in `@Configuration` class itself - #16848 Regression in `@Condition` exclusion","closed","in: core,","spring-projects-issues","2014-07-22T03:01:38Z","2019-01-13T05:47:44Z"
"","16525","Doc: Bean post processor not applied with generic @Bean return type [SPR-11906]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-11906](https://jira.spring.io/browse/SPR-11906?redirect=false)** and commented  I recently attempted to configure Bean Validation for a JUnit test case using a Groovy `@Configuration` class, and the advice was not applied to my bean. After some experimentation, I discovered that even when I explicitly noted that my `@Validated` bean `@DependsOn` the `MethodValidationPostProcessor` bean, the Spring container was not applying the processor because I was using the implicit return type of `Object` instead of a specific return type. Declaring a return type of `BeanPostProcessor` caused the advice to be applied correctly.  The container should activate processors that are actually provided at runtime regardless of the declared return type of the `@Bean` method.   ---  **Affects:** 4.0.5  **Reference URL:** http://stackoverflow.com/q/24386100/1189885","closed","in: core,","spring-projects-issues","2014-06-24T05:23:24Z","2014-07-08T00:21:29Z"
"","16574","CachingConnectionFactory should allow option to not cache shared consumers [SPR-11958]","**[Christopher Shannon](https://jira.spring.io/secure/ViewProfile.jspa?name=chris8204)** opened **[SPR-11958](https://jira.spring.io/browse/SPR-11958?redirect=false)** and commented  It might be nice to have a mode/flag on the CachingConnectionFactory to turn off caching of shared consumers (durable or non-durable) if desired.  The original issue doesn't apply (shown below) since the JMS spec allow allows one thread per session concurrently.  This means caching won't be a problem unless someone is trying to share a session across threads and shouldn't be.  However, there could be use cases to allow more fine grained control in the CachingConnectionFactory so the user can specify what is and isn't cached.  Consumers, shared consumes, durables, no durables, etc could potentially be configured separately so that some types are cached and some not cached.  My team will be testing this out extensively and see what kind of use cases we come up with.  -The issue is that the JMS 2.0 spec supports multiple shared consumers on a subscription, unlike JMS 1.1 which only supports one consumer.  I can see two use cases:-  -Caching of shared consumers is a good idea if the intention is to stand up multiple JVMs or multiple connections configured with a shared consumer.  In this case caching of the consumers should act just like the caching of non shared consumers (which is currently the case) since there should only be one shared consumer for the same destination per connection.-  -However, if the intent is to allow multiple consumers in the same JVM and same connection, then caching of shared consumers would not work as intended.  In this use case, it would actually be useful to not cache the shared consumers.  The idea here would be to allow multiple threads to have their own shared consumer to make processing multi-threaded.  The reason to add this behavior to the CachingConnectionFactory itself is to allow the benefits of caching of other producers/consumers to be re-used with the same factory.-  -I'm not sure if this is something that should be implemented but it is a thought I had.  For now, if separate shared consumers are needed a second SingleConnectionFactory can be used that doesn't cache instead.-  ---  **Affects:** 4.0.5  **Issue Links:** - #16572 CachingConnectionFactory doesn't properly cache all consumers with JMS 2.0 - #16585 Support JMS 2.0's shared consumers in message listener containers","closed","status: bulk-closed,","spring-projects-issues","2014-07-05T08:26:54Z","2019-01-12T02:29:27Z"
"","16572","CachingConnectionFactory doesn't properly cache all consumers with JMS 2.0 [SPR-11956]","**[Christopher Shannon](https://jira.spring.io/secure/ViewProfile.jspa?name=chris8204)** opened **[SPR-11956](https://jira.spring.io/browse/SPR-11956?redirect=false)** and commented  Two new methods in the new JMS 2.0 Session interface are not handled properly by CachedSessionInvocationHandler in CachingConnectionFactory.  The method signatures are:  MessageConsumer createSharedConsumer(Topic topic, String sharedSubscriptionName) throws JMSException;  MessageConsumer createSharedConsumer(Topic topic, String sharedSubscriptionName, java.lang.String messageSelector) throws JMSException;  When calling createSharedConsumer (either method), the CachedSessionInvocationHandler invoke method never delegates to getCachedConsumer like it should and instead delegates to the target.  This means that when calling createSharedConsumer, a new consumer will be created each time and will never be cached into the consumers map as they should.  The fix should be straightforward....there just needs to be an else if statement to handle createSharedConsumer method calls and then delegate to getCachedConsumer()  This is related to #16566  ---  **Affects:** 4.0.5  **Issue Links:** - #16566 CachingConnectionFactory doesn't properly cache producers with JMS 2.0 - #16574 CachingConnectionFactory should allow option to not cache shared consumers","closed","type: bug,","spring-projects-issues","2014-07-04T12:37:48Z","2019-01-11T22:25:59Z"
"","16567","CachedMessageProducer does not support all JMS 2.0 MessageProducer methods [SPR-11950]","**[Christopher Shannon](https://jira.spring.io/secure/ViewProfile.jspa?name=chris8204)** opened **[SPR-11950](https://jira.spring.io/browse/SPR-11950?redirect=false)** and commented  #16566 fixes CachedMessageProducer so that Jms2MessageProducerInvocationHandler properly delegates calls to CachedMessageProducer.this.  However, only 2 out of the 4 new methods are supported that exist in the JMS 2.0 MessageProducer interface.  The following 2 methods are not supported by the proxy:  send(Message message, int deliveryMode, int priority, long timeToLive, CompletionListener completionListener)  send(Destination destination, Message message, int deliveryMode, int priority, long timeToLive, CompletionListener completionListener)  For example, when attempting to execute one of these methods the following error occurs:  java.lang.AbstractMethodError: org.springframework.jms.connection.CachedMessageProducer.send(Ljavax/jms/Destination;Ljavax/jms/Message;IIJLjavax/jms/CompletionListener;)V at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.springframework.jms.connection.CachedMessageProducer$Jms2MessageProducerInvocationHandler.invoke(CachedMessageProducer.java:287) .......  ---  **Affects:** 4.0.5  **Issue Links:** - #16566 CachingConnectionFactory doesn't properly cache producers with JMS 2.0","closed","type: bug,","spring-projects-issues","2014-07-03T20:08:02Z","2019-01-11T22:26:56Z"
"","16566","CachingConnectionFactory doesn't properly cache producers with JMS 2.0 [SPR-11949]","**[Christopher Shannon](https://jira.spring.io/secure/ViewProfile.jspa?name=chris8204)** opened **[SPR-11949](https://jira.spring.io/browse/SPR-11949?redirect=false)** and commented  We just upgraded to Spring 4 and JMS 2.0. We are using a CachingConnectionFactory and a JmsTemplate to publish messages and noticed that when publishing to a destination, the first attempt works and then further attempts to publish to the same destination cause the following exception:  Caused by: javax.jms.IllegalStateException: The producer is closed  Everything worked fine with Spring 3.2 and JMS 1.1 so I did some digging to see what the problem was and it seems the issue is in the CachedMessageProducer class. Normally this class re-implements all of the methods in the MessageProducer interface. Specifically there is a close() method that is re-implemented and will only reset properties but keep the producer alive (since it is a caching factory) after a message is sent using the JmsTemplate.  However, there is a new method in Spring 4 called getProxyIfNecessary that determines whether or not JMS 2.0 is being used and when it detects JMS 2.0 it creates a Jms2MessageProducerInvocationHandler proxy. The invoke method of this proxy is delegating all calls to the original MessageProducer object, and seems to be bypassing method calls in the CachedMessageProducer. The end result is that the close method gets called on the original MessageProducer object (which we don't want since it should be cached). This means that future attempts to publish give the exception that the producer has been closed.  ---  **Affects:** 4.0.5  **Reference URL:** http://stackoverflow.com/questions/24501329/spring-4-cachingconnectionfactory-with-jms-2-0-doesnt-properly-cache-producers  **Issue Links:** - #16567 CachedMessageProducer does not support all JMS 2.0 MessageProducer methods - #16572 CachingConnectionFactory doesn't properly cache all consumers with JMS 2.0","closed","type: bug,","spring-projects-issues","2014-07-03T14:42:40Z","2019-01-14T05:15:55Z"
"","17079","JavaDoc of AnnotatedTypeMetadata.getAllAnnotationAttributes is misleading. [SPR-12473]","**[Christoph Strobl](https://jira.spring.io/secure/ViewProfile.jspa?name=cstrobl)** opened **[SPR-12473](https://jira.spring.io/browse/SPR-12473?redirect=false)** and commented  Given the following structure one would assume that `getAllAnnotationAttributes` gets all values for `someType` which would be `Object.class` and `String.class` but only the attributes of the meta annotation get evaluated which is different to what `getAnnotationAttributes` does.  ```java public class StandardAnnotationMetadataUnitTests {  	@Test 	@SuppressWarnings(""rawtypes"") 	public void standardAnnotationMetadataGetAllAnnotationAttributesShouldContainAttributesReturnedByGetAnnotationAttributes() {  		StandardAnnotationMetadata metadata = new StandardAnnotationMetadata(Config.class); 		assertThat((Class) metadata.getAnnotationAttributes(MetaAnnotation.class.getName()).get(""someType""), 				Is. is(String.class)); 		assertThat((List) metadata.getAllAnnotationAttributes(MetaAnnotation.class.getName()) 				.get(""someType""), IsIterableContainingInAnyOrder. containsInAnyOrder(String.class, Object.class)); 	}  	@ConcreteAnnotation 	static class Config {  	}  	@Target({ ElementType.TYPE, ElementType.ANNOTATION_TYPE }) 	@Retention(RetentionPolicy.RUNTIME) 	@Documented 	@Inherited 	public static @interface MetaAnnotation {  		Class someType() default Object.class; 	}  	@Target({ ElementType.TYPE }) 	@Retention(RetentionPolicy.RUNTIME) 	@Documented 	@Inherited 	@MetaAnnotation 	public static @interface ConcreteAnnotation {  		Class someType() default String.class; 	}  } ```    ---  **Affects:** 4.0.8, 4.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ac868036f71a789c401679e14fa6b2977c60cea, https://github.com/spring-projects/spring-framework/commit/f44217a0c2f13e5a1eb52001d7c7ef3bb515d40b  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)","closed","in: core,","spring-projects-issues","2014-11-26T05:45:40Z","2014-12-09T02:49:15Z"
"","16964","Compiled SpEL expression fail when used with registered function [SPR-12359]","**[Christoph Strobl](https://jira.spring.io/secure/ViewProfile.jspa?name=cstrobl)** opened **[SPR-12359](https://jira.spring.io/browse/SPR-12359?redirect=false)** and commented  Calling registered custom functions does not work once compiled SpEL expression is used. (tried with 4.1, 4.1.1 and 4.1.2 snapshot)  ``` org.springframework.expression.spel.SpelEvaluationException: EL1072E:(pos 0): An exception occurred whilst evaluating a compiled expression 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:180) ```  The below tests passes once `doFormat` is registered as `context.registerFunction(""doFormat"", String.class.getDeclaredMethod(""format"", String.class, Object[].class));` but fails when using some custom class.  ```java Test public void compiledExpressionShouldWorkWhenUsingCustomFunctionWithVarargs() throws NoSuchMethodException, SecurityException {    SpelExpressionParser parser = new SpelExpressionParser(new SpelParserConfiguration(SpelCompilerMode.IMMEDIATE, this .getClass().getClassLoader()));    SpelExpression expression = parser.parseRaw(""#doFormat([0], #arg)"");    StandardEvaluationContext context = new StandardEvaluationContext(new Object[] { ""hey %s"" });   context.registerFunction(""doFormat"", DelegatingStringFormat.class.getDeclaredMethod(""format"", String.class,  Object[].class));   context.setVariable(""arg"", ""there"");    expression.setEvaluationContext(context);    assertThat(expression.getValue(String.class), is(""hey there""));   assertThat(expression.getValue(String.class), is(""hey there""));    // have to call it 3 time to fail   assertThat(expression.getValue(String.class), is(""hey there"")); }  static class DelegatingStringFormat {    static String format(String s, Object... args) {     return String.format(s, args);   } } ```  The above will work once we change the method signature of `DelegatingStringFormat.format` to `static String format(String s, Object[] args)`.  Another failing sample not using varargs:  ```java @Test public void compiledExpressionShouldWorkWhenUsingCustomFunction() throws NoSuchMethodException, SecurityException {    SpelExpressionParser parser = new SpelExpressionParser(new SpelParserConfiguration(SpelCompilerMode.IMMEDIATE,  this.getClass().getClassLoader()));    SpelExpression expression = parser.parseRaw(""#doCompare([0], #arg)"");    StandardEvaluationContext context = new StandardEvaluationContext(new  Object[] { ""1"" });   context.registerFunction(""doCompare"", SomeCompareMethod.class.getDeclaredMethod(""compare"", Object.class, Object.class));   context.setVariable(""arg"", ""2"");    expression.setEvaluationContext(context);    assertThat(expression.getValue(Integer.class), is(-1));   assertThat(expression.getValue(Integer.class), is(-1));    // have to call it 3 time to fail   assertThat(expression.getValue(Integer.class), is(-1)); }  static class SomeCompareMethod {    static int compare(Object o1, Object o2) {     return new ComparableComparator().compare(o1, o2);   } } ```  ---  **Affects:** 4.1 GA, 4.1.1  **Issue Links:** - #17127 Regression: SpEL expression with Arrays.asList and empty array  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a40e42479c36859009b4561f98fdfab0eafdd679","closed","in: core,","spring-projects-issues","2014-10-22T01:18:55Z","2019-01-11T19:26:38Z"
"","16948","Enable access to composed annotation via AnnotationUtils [SPR-12343]","**[Christoph Strobl](https://jira.spring.io/secure/ViewProfile.jspa?name=cstrobl)** opened **[SPR-12343](https://jira.spring.io/browse/SPR-12343?redirect=false)** and commented  It would be nice if we could resolve Composed annotations as such (like in `org.springframework.test.util.MetaAnnotationUtils`). The ability to access the composed one would allow us to check for the presence of annotations on eg attributes.  Given a meta annotation `@Persistent` used on eg. `@Document` having an attribute `@Namespace String collection() default """"`, we want to resolve the value of `Document#collection` just by knowing there could be some attribute marked with `@Namespace`.  ```java  @Retention(RetentionPolicy.RUNTIME) @Target(value = { ElementType.ANNOTATION_TYPE }) public @interface Persistent {}  @Documented @Retention(RetentionPolicy.RUNTIME) @Target(value = { METHOD }) public @interface @Namespace {}  @Persistent @Inherited @Retention(RetentionPolicy.RUNTIME) @Target({ ElementType.TYPE }) public @interface Document {    @Namespace String collection() default """"; }  @Document(collection=""collection-1"") class ConcreteClass {    }   //...  @Override public Object resolveNamespace(Class type) {    AnnotationDescriptor descriptor = MetaAnnotationUtils.findAnnotationDescriptor(type,       Persistent.class);    if (descriptor != null && descriptor.getComposedAnnotation() != null) {     Annotation composed = descriptor.getComposedAnnotation();     for (Method method : descriptor.getComposedAnnotationType().getDeclaredMethods()) {       if (AnnotationUtils.findAnnotation(method, Namespace.class) != null) {         return AnnotationUtils.getValue(composed, method.getName());       }     }   }   return null; } ```    --- No further details from [SPR-12343](https://jira.spring.io/browse/SPR-12343?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2014-10-17T04:22:49Z","2019-01-12T00:18:38Z"
"","16402","PropertyEditorRegistrySupport throws ExceptionInInitializerError when on endorsed classpath [SPR-11780]","**[Christoph Leuzinger](https://jira.spring.io/secure/ViewProfile.jspa?name=cleuzinger)** opened **[SPR-11780](https://jira.spring.io/browse/SPR-11780?redirect=false)** and commented  We encounter a `java.lang.ExceptionInInitializerError` when running our application with the Spring libraries on the JVM endorsed classpath:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor': Instantiation of bean failed; nested exception is java.lang.ExceptionInInitializerError 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1076) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1021) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:88) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:609) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) ... ```  This is due to the following piece of code in `PropertyEditorRegistrySupport` (line 92):  ``` zoneIdClass = PropertyEditorRegistrySupport.class.getClassLoader().loadClass(""java.time.ZoneId""); ```  The class loader is `null`, because `PropertyEditorRegistrySupport` has been loaded by the bootstrap class loader. The resolution is to either remove the Spring libraries from the endorsed classpath, or to work around the problem by using the system class loader to obtain the `zoneId`:  ``` ClassLoader classLoader = PropertyEditorRegistrySupport.class.getClassLoader(); if (classLoader == null) {   classLoader = ClassLoader.getSystemClassLoader(); } zoneIdClass = classLoader.loadClass(""java.time.ZoneId""); ```  ---  **Affects:** 4.0.4  **Issue Links:** - #16343 SpringProperties: the ClassLoader might be null, if class is loaded by the bootstrap class loader","closed","in: core,","spring-projects-issues","2014-05-13T07:57:01Z","2019-01-11T21:14:19Z"
"","17084","Compile-time-weaving is using the wrong context to inject dependencies from in environment with servlet- and portlet-context [SPR-12478]","**[Christian Zaefferer](https://jira.spring.io/secure/ViewProfile.jspa?name=christian%20zaefferer)** opened **[SPR-12478](https://jira.spring.io/browse/SPR-12478?redirect=false)** and commented  I have created a web-application containing both servlets and portlets. It is using compile-time-weaving to inject dependencies into beans in the prototype scope, mainly for entities created via Hibernate (as described here: http://www.chrissearle.org/node/285). One service requires different implementations for portlets and servlets, so I created an interface for the service, and two implementations to the interface, one for servlets and one for portlets. Each implementation is configured only in the coresponding servlet/portlet-application-context. The entities using the service only have the interface as an autowired dependency. However, in many cases the implementation from the wrong context is injected. After both the portlet and servlet have been initialized and used, only an implementation from one of the two contexts will be used in both servlet and portlets. Which implementation is used depends on the order the servlets and portlets are initialized, and which one is used first. I have created a test-case outlining the problem here: https://github.com/ChrZae/servlet-portlet-spring-container-issue The testcase is using 3.2.12 since the embedded jetty/pluto server is not compatible with Spring 4, but the problem is the same in 4.1.2.   ---  **Affects:** 3.2.12, 4.1.2  **Reference URL:** https://github.com/ChrZae/servlet-portlet-spring-container-issue","closed","in: core,","spring-projects-issues","2014-11-27T05:27:14Z","2019-01-12T16:34:34Z"
"","16983","@Configurable doesn't work with LTW if configurable class has a method returning another configurable class [SPR-12376]","**[Christian Rudolph](https://jira.spring.io/secure/ViewProfile.jspa?name=cmrudolph)** opened **[SPR-12376](https://jira.spring.io/browse/SPR-12376?redirect=false)** and commented  If a class is annotated `@Configurable`, load time weaving is enabled and one method returns another configurable class, the referenced class doesn't get weaved (if not weaved until the first class is loaded).  I have attached a small example project (using Web-MVC) which demonstrates the issue.  `Foo` is the first configurable class, which references another configurable class, `Foobar`:  ``` @Configurable(autowire = Autowire.BY_TYPE) public class Foo {     private Logger log = LoggerFactory.getLogger(Foo.class);     private Bar bar;      @Autowired     public void setBar(Bar bar) {         log.info(""autowiring Bar"");         this.bar = bar;     }      public String say() {         return new Foobar().say() + bar.say();     }      //public Set dummy1() { return null; } // fails     //public Foobar dummy2() { return null; }      // fails     public void dummy3(Foobar o) {}     public void dummy4(Foobar o) { new Foobar(); } } ```  There are four dummy methods, the first two of them causing `Foobar` not to get weaved anymore if present. The pure existence of them is enough to cause the failure.  I have configured logging to display weaving information and one log line when autowiring happens in `Foo` and `Foobar`.   ---  **Affects:** 4.1.6  **Attachments:** - [configurable-test.zip](https://jira.spring.io/secure/attachment/22342/configurable-test.zip) (_56.48 kB_) - [configurable-test-cli.zip](https://jira.spring.io/secure/attachment/22345/configurable-test-cli.zip) (_55.52 kB_)","closed","status: bulk-closed,","spring-projects-issues","2014-10-25T12:25:38Z","2019-01-12T00:18:26Z"
"","16499","SourceHttpMessageConverter doesn't support svg output [SPR-11880]","**[Christian Rudolph](https://jira.spring.io/secure/ViewProfile.jspa?name=cmrudolph)** opened **[SPR-11880](https://jira.spring.io/browse/SPR-11880?redirect=false)** and commented  The SourceHttpMessageConverter doesn't support svg output until now, because the mediatype doesn't match the converters mediatypes (text/xml, application/xml and application/*+xml). SVGs mediatype is image/svg+xml so SourceHttpMessageConverter#canWrite returns false. The result is a HttpMediaTypeNotAcceptableException.  A quick example controller:  ``` @RequestMapping(value = ""my.svg"", produces = ""image/svg+xml"") public ResponseEntity showMySvg() throws ParserConfigurationException, IOException, SAXException {     DocumentBuilder dBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();     Document doc = dBuilder.parse(""file:///my/file.svg"");     DOMSource domSource = new DOMSource(doc);     return new ResponseEntity(domSource, HttpStatus.OK); } ```  My suggestion is to add image/*+xml to supported mediatypes.   ---  **Affects:** 4.0.5","closed","type: enhancement,","spring-projects-issues","2014-06-17T00:45:35Z","2019-01-11T22:15:19Z"
"","17023","EnableXXX support for GroovyBeanDefinitionReader [SPR-12416]","**[Christian LIPP](https://jira.spring.io/secure/ViewProfile.jspa?name=chrlipp)** opened **[SPR-12416](https://jira.spring.io/browse/SPR-12416?redirect=false)** and commented  Beginning from Spring 4.0, Spring includes a port of the Grails Bean Builder to the core Spring Framework, providing a Groovy DSL for configuring Spring applications.  This is handled via GroovyBeanDefinitionReader. However the `EnableXXX` are not supported. For example there is no construct for `@EnableBatchProcessing` respective  ``  See also Michael Minellas comment on  http://stackoverflow.com/questions/23436477/groovy-bean-syntax-for-spring-batch-job-repository  I don't believe that this is a Spring Batch requirement only. Instead the `GroovyBeanDefinitionReader` should provide equivalents for all existing kinds of `@EnableXXX`.  ---  **Issue Links:** - #17249 Importing Spring configuration in Groovy bean configuration","closed","status: bulk-closed,","spring-projects-issues","2014-11-07T02:43:19Z","2019-01-12T00:18:20Z"
"","16865","Spring Boot: @ConditionalOnMissingBean seems to prevent expected bean instantiation [SPR-12251]","**[Chris Merrill](https://jira.spring.io/secure/ViewProfile.jspa?name=chrismerrill1974)** opened **[SPR-12251](https://jira.spring.io/browse/SPR-12251?redirect=false)** and commented  I'm developing a framework / example application based on Spring Boot, Spring Boot Actuator, and Spring HATEOAS.  I would like to use the `@ConditionalOnMissingBean` annotation to mark a number of component scanned classes as replaceable by classes that framework users develop... I would expect that they would name their overriding beans the same thing as the beans I've declared.  This doesn't seem to work as I expect, and I'm wondering if its a bug or not.  Here are the details and an example of what the problem appears to be.  I've provided an example you can download from github (link below) that illustrates the problem (that is, if it is a problem and not a misunderstanding on my part).  For Spring Boot v1.1.2.RELEASE:  The documentation states:  > `@Conditional` annotations are processed when `@Configuration` classes are parsed. Auto-configure `@Configuration` is always parsed last (after any user defined beans), however, if you are using these annotations on regular `@Configuration` classes, care must be taken not to refer to bean definitions that have not yet been created.  In the context of a java package that will be component scanned on startup, it doesn't appear that the following bean will be loaded, even though I would expect it to be, since the name is unique.  ``` @ConditionalOnMissingBean(""ServiceA"") @Component(""ServiceA"") public class ServiceA { ...} ```  Whereas,  ``` @Component(""ServiceB"") public class ServiceB { ...} ```  will be loaded.  I have forked the gs-spring-actuator example and created demo code.  If you build the following project in gradle, and check out the spring-boot-actuator ""beans"" status page (http://localhost:9001/beans) after starting the app, you'll see that ServiceA doesn't appear in the bean listing, whereas ServiceB does.  https://github.com/chrismerrill1974/spring-boot-issue-example    --- No further details from [SPR-12251](https://jira.spring.io/browse/SPR-12251?redirect=false)","closed","status: invalid,","spring-projects-issues","2014-09-25T13:38:15Z","2019-01-12T05:25:15Z"
"","16553","Spring JIRA is down in Chrome [SPR-11936]","**[chris marx](https://jira.spring.io/secure/ViewProfile.jspa?name=chrismarx)** opened **[SPR-11936](https://jira.spring.io/browse/SPR-11936?redirect=false)** and commented  If you go to Spring JIRA in chrome, you get the following error:  Technical details Log's referral number: 9763ad20-4bb0-4b17-995b-d6d56d3e6037 Cause Referer URL: https://www.google.com/ java.util.NoSuchElementException java.util.NoSuchElementException at java.util.StringTokenizer.nextToken(Unknown Source) at com.atlassian.jira.security.xsrf.SimpleXsrfTokenGenerator.isOurServerId(SimpleXsrfTokenGenerator.java:208) at com.atlassian.jira.security.xsrf.SimpleXsrfTokenGenerator.isValidServerSideToken(SimpleXsrfTokenGenerator.java:121) at com.atlassian.jira.security.xsrf.SimpleXsrfTokenGenerator.generateTokenImpl(SimpleXsrfTokenGenerator.java:103) at com.atlassian.jira.security.xsrf.SimpleXsrfTokenGenerator.generateToken(SimpleXsrfTokenGenerator.java:40) at com.atlassian.jira.security.xsrf.XsrfTokenAdditionRequestFilter.setXsrfToken(XsrfTokenAdditionRequestFilter.java:74) at com.atlassian.jira.security.xsrf.XsrfTokenAdditionRequestFilter.doFilter(XsrfTokenAdditionRequestFilter.java:53) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.opensymphony.sitemesh.webapp.SiteMeshFilter.obtainContent(SiteMeshFilter.java:181) at com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:85) at com.atlassian.jira.web.filters.SitemeshPageFilter.doFilter(SitemeshPageFilter.java:124) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.atlassian.jira.web.filters.steps.ChainedFilterStepRunner.doFilter(ChainedFilterStepRunner.java:87) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.atlassian.plugin.servlet.filter.IteratingFilterChain.doFilter(IteratingFilterChain.java:46) at com.atlassian.plugin.servlet.filter.DelegatingPluginFilter$1.doFilter(DelegatingPluginFilter.java:66) at com.atlassian.jira.mobile.servlet.filter.MobileRedirectFilter.doFilter(MobileRedirectFilter.java:59) at com.atlassian.plugin.servlet.filter.DelegatingPluginFilter.doFilter(DelegatingPluginFilter.java:74) at com.atlassian.plugin.servlet.filter.IteratingFilterChain.doFilter(IteratingFilterChain.java:42) at com.atlassian.plugin.servlet.filter.DelegatingPluginFilter$1.doFilter(DelegatingPluginFilter.java:66) at com.atlassian.jira.mobile.servlet.filter.DesktopSwitchFilter.doFilter(DesktopSwitchFilter.java:46) at com.atlassian.plugin.servlet.filter.DelegatingPluginFilter.doFilter(DelegatingPluginFilter.java:74) at com.atlassian.plugin.servlet.filter.IteratingFilterChain.doFilter(IteratingFilterChain.java:42) at com.atlassian.plugin.servlet.filter.DelegatingPluginFilter$1.doFilter(DelegatingPluginFilter.java:66) at com.atlassian.jira.mobile.servlet.filter.MobileAuthenticationFilter.doFilter(MobileAuthenticationFilter.java:92) at com.atlassian.plugin.servlet.filter.DelegatingPluginFilter.doFilter(DelegatingPluginFilter.java:74) at com.atlassian.plugin.servlet.filter.IteratingFilterChain.doFilter(IteratingFilterChain.java:42) at com.atlassian.plugin.servlet.filter.DelegatingPluginFilter$1.doFilter(DelegatingPluginFilter.java:66) at com.atlassian.prettyurls.filter.PrettyUrlsCombinedMatchDispatcherFilter.doFilter(PrettyUrlsCombinedMatchDispatcherFilter.java:61) at com.atlassian.plugin.servlet.filter.DelegatingPluginFilter.doFilter(DelegatingPluginFilter.java:74) at com.atlassian.plugin.servlet.filter.IteratingFilterChain.doFilter(IteratingFilterChain.java:42) at com.atlassian.plugin.servlet.filter.ServletFilterModuleContainerFilter.doFilter(ServletFilterModuleContainerFilter.java:77) at com.atlassian.plugin.servlet.filter.ServletFilterModuleContainerFilter.doFilter(ServletFilterModuleContainerFilter.java:63) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.atlassian.seraph.filter.SecurityFilter.doFilter(SecurityFilter.java:234) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.atlassian.security.auth.trustedapps.filter.TrustedApplicationsFilter.doFilter(TrustedApplicationsFilter.java:100) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.atlassian.seraph.filter.BaseLoginFilter.doFilter(BaseLoginFilter.java:169) at com.atlassian.jira.web.filters.JiraLoginFilter.doFilter(JiraLoginFilter.java:70) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.atlassian.plugin.servlet.filter.IteratingFilterChain.doFilter(IteratingFilterChain.java:46) at com.atlassian.plugin.servlet.filter.DelegatingPluginFilter$1.doFilter(DelegatingPluginFilter.java:66) at com.atlassian.oauth.serviceprovider.internal.servlet.OAuthFilter.doFilter(OAuthFilter.java:61) at com.atlassian.plugin.servlet.filter.DelegatingPluginFilter.doFilter(DelegatingPluginFilter.java:74) at com.atlassian.plugin.servlet.filter.IteratingFilterChain.doFilter(IteratingFilterChain.java:42) at com.atlassian.plugin.servlet.filter.DelegatingPluginFilter$1.doFilter(DelegatingPluginFilter.java:66) at com.atlassian.prettyurls.filter.PrettyUrlsCombinedMatchDispatcherFilter.doFilter(PrettyUrlsCombinedMatchDispatcherFilter.java:61) at com.atlassian.plugin.servlet.filter.DelegatingPluginFilter.doFilter(DelegatingPluginFilter.java:74) at com.atlassian.plugin.servlet.filter.IteratingFilterChain.doFilter(IteratingFilterChain.java:42) at com.atlassian.plugin.servlet.filter.ServletFilterModuleContainerFilter.doFilter(ServletFilterModuleContainerFilter.java:77) at com.atlassian.plugin.servlet.filter.ServletFilterModuleContainerFilter.doFilter(ServletFilterModuleContainerFilter.java:63) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.atlassian.util.profiling.filters.ProfilingFilter.doFilter(ProfilingFilter.java:99) at com.atlassian.jira.web.filters.JIRAProfilingFilter.doFilter(JIRAProfilingFilter.java:19) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.atlassian.johnson.filters.AbstractJohnsonFilter.doFilter(AbstractJohnsonFilter.java:71) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.tuckey.web.filters.urlrewrite.RuleChain.handleRewrite(RuleChain.java:176) at org.tuckey.web.filters.urlrewrite.RuleChain.doRules(RuleChain.java:145) at org.tuckey.web.filters.urlrewrite.UrlRewriter.processRequest(UrlRewriter.java:92) at org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:394) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.atlassian.gzipfilter.GzipFilter.doFilterInternal(GzipFilter.java:80) at com.atlassian.gzipfilter.GzipFilter.doFilter(GzipFilter.java:51) at com.atlassian.jira.web.filters.gzip.JiraGzipFilter.doFilter(JiraGzipFilter.java:55) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.atlassian.plugin.servlet.filter.IteratingFilterChain.doFilter(IteratingFilterChain.java:46) at com.atlassian.plugin.servlet.filter.DelegatingPluginFilter$1.doFilter(DelegatingPluginFilter.java:66) at com.atlassian.prettyurls.filter.PrettyUrlsCombinedMatchDispatcherFilter.doFilter(PrettyUrlsCombinedMatchDispatcherFilter.java:61) at com.atlassian.plugin.servlet.filter.DelegatingPluginFilter.doFilter(DelegatingPluginFilter.java:74) at com.atlassian.plugin.servlet.filter.IteratingFilterChain.doFilter(IteratingFilterChain.java:42) at com.atlassian.plugin.servlet.filter.ServletFilterModuleContainerFilter.doFilter(ServletFilterModuleContainerFilter.java:77) at com.atlassian.plugin.servlet.filter.ServletFilterModuleContainerFilter.doFilter(ServletFilterModuleContainerFilter.java:63) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.atlassian.jira.web.filters.steps.ChainedFilterStepRunner.doFilter(ChainedFilterStepRunner.java:87) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.atlassian.core.filters.cache.AbstractCachingFilter.doFilter(AbstractCachingFilter.java:33) at com.atlassian.core.filters.AbstractHttpFilter.doFilter(AbstractHttpFilter.java:31) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.atlassian.core.filters.encoding.AbstractEncodingFilter.doFilter(AbstractEncodingFilter.java:41) at com.atlassian.core.filters.AbstractHttpFilter.doFilter(AbstractHttpFilter.java:31) at com.atlassian.jira.web.filters.PathMatchingEncodingFilter.doFilter(PathMatchingEncodingFilter.java:49) at com.atlassian.core.filters.AbstractHttpFilter.doFilter(AbstractHttpFilter.java:31) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.atlassian.jira.startup.JiraStartupChecklistFilter.doFilter(JiraStartupChecklistFilter.java:78) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.atlassian.jira.web.filters.MultipartBoundaryCheckFilter.doFilter(MultipartBoundaryCheckFilter.java:41) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.atlassian.jira.web.filters.steps.ChainedFilterStepRunner.doFilter(ChainedFilterStepRunner.java:87) at com.atlassian.jira.web.filters.JiraFirstFilter.doFilter(JiraFirstFilter.java:57) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298) at org.apache.jk.server.JkCoyoteHandler.invoke(JkCoyoteHandler.java:190) at org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:291) at org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:776) at org.apache.jk.common.ChannelSocket.processConnection(ChannelSocket.java:705) at org.apache.jk.common.ChannelSocket$SocketConnection.runIt(ChannelSocket.java:898) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:690) at java.lang.Thread.run(Unknown Source)  Everything works fine in FF-   --- No further details from [SPR-11936](https://jira.spring.io/browse/SPR-11936?redirect=false)","closed","status: invalid,","spring-projects-issues","2014-07-01T08:51:10Z","2019-01-12T05:25:44Z"
"","17054","CollectionToStringConverter adds DELIMITER for empty targetElement [SPR-12449]","**[Chris Korakidis](https://jira.spring.io/secure/ViewProfile.jspa?name=ckorakidis)** opened **[SPR-12449](https://jira.spring.io/browse/SPR-12449?redirect=false)** and commented  If for example, a given list contains three elements and their string converter returns 'a', 'b', '' the end result will be a,b, The CollectionToStringConverter.convert(...) just appends the targetElement and in case it's empty, there will exist also the previously appended comma. Is that a feature or a bug?   ---  **Affects:** 4.1.2","closed","status: bulk-closed,","spring-projects-issues","2014-11-18T02:58:36Z","2019-01-12T00:18:02Z"
"","17062","Unable to initialize WebAsyncTask with executorName [SPR-12457]","**[Chris Chua](https://jira.spring.io/secure/ViewProfile.jspa?name=sirhc)** opened **[SPR-12457](https://jira.spring.io/browse/SPR-12457?redirect=false)** and commented  Looks like a typo in: https://github.com/spring-projects/spring-framework/blob/2a41de00e355ce1d4e277111b8c93d6fa2dc0020/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncTask.java#L71-L72  The assertion checks `executor` rather than `executorName` and always throws because executor is always null when using this particular constructor.  I've created a pull request on https://github.com/spring-projects/spring-framework/pull/698 . But perhaps this should be checking Assert.notEmpty ? I can make that change in the PR as well.   ---  **Affects:** 3.2.9, 3.2.12  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8854c33bf7f401e37d485921a5aed7349a8b2b8f, https://github.com/spring-projects/spring-framework/commit/aadb93f30c6b481a9244ba3f553389a4a32e2088, https://github.com/spring-projects/spring-framework/commit/f6e18562768365d8952458548edcf05e5a9527b8  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1), [3.2.13](https://github.com/spring-projects/spring-framework/milestone/101?closed=1)","closed","type: bug,","spring-projects-issues","2014-11-20T16:14:26Z","2014-12-09T02:49:25Z"
"","17071","Fix for issue SPR-12238 not working on IBM java_1.7_64 [SPR-12465]","**[Chandan](https://jira.spring.io/secure/ViewProfile.jspa?name=cpandey05)** opened **[SPR-12465](https://jira.spring.io/browse/SPR-12465?redirect=false)** and commented  I updated my Spring to 41.2, but it's throwing error about missing method setRemoveOnCancelPolicy in ThreadPoolTaskSchedulerfailing.  I am using IBM provided Java (version java_1.7_64). and my container is Web Sphere. Asked here as well http://stackoverflow.com/questions/27107825/spring-build-4-1-2-is-throwing-error-about-missing-method-setremoveoncancelpolic. Following is the stack trace  org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler org.springframework.web.socket.config.annotation.WebSocketConfigurationSupport.defaultSockJsTaskScheduler()] threw exception; nested exception is java.lang.NoSuchMethodError: org/springframework/scheduling/concurrent/ThreadPoolTaskScheduler.setRemoveOnCancelPolicy(Z)V at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:581) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1025) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:921) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:487) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.jav  ---  **Affects:** 4.1.2  **Reference URL:** http://stackoverflow.com/questions/27107825/spring-build-4-1-2-is-throwing-error-about-missing-method-setremoveoncancelpolic  **Issue Links:** - #16852 WebSocketMessageBrokerConfigurationSupport requiring JDK 7+ due to setRemoveOnCancelPolicy","closed","status: bulk-closed,","spring-projects-issues","2014-11-24T07:14:42Z","2019-01-12T00:17:54Z"
"","16888","No option to disable automatic addition of CORS header by Spring SockJS module [SPR-12283]","**[Chandan](https://jira.spring.io/secure/ViewProfile.jspa?name=cpandey05)** opened **[SPR-12283](https://jira.spring.io/browse/SPR-12283?redirect=false)** and commented  Spring sockjs library adds CORS header based on ""origin"" in the incoming request -unless it detects the header pre-added by Servlet filter or by any other mechanism. We have a use case where CORS IP white listing is taken care by external system (Say some interceptor). If some how it is bypassed, sockjs will allow connection from any origin (because, incoming ""origin"" value will be mirrored in header) -opening a security loophole. If there is an option to disable automatic addition of header, then even if some one hacks into sockjs url directly, browser will throw a CORS error.  ---  **Affects:** 4.0 GA  **Reference URL:** http://stackoverflow.com/questions/26037250/how-to-disable-automatic-addition-of-cors-header-in-spring-sockjs-module-of-spri/26104535?noredirect=1#comment40967360_26104535  This issue is a sub-task of #16921  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/58f4014b17018e0eeb68d78de3275627f009e46c","closed","type: task,","spring-projects-issues","2014-10-01T05:34:19Z","2019-01-11T17:36:25Z"
"","17161","Eliminating ""not eligible for getting processed by all BeanPostProcessors"" [SPR-12559]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-12559](https://jira.spring.io/browse/SPR-12559?redirect=false)** and commented  I have started to come across ""not eligible for getting processed by all BeanPostProcessors"" more frequently and I wanted to eliminate these errors. When I started to search root cause, BeanPostProcessor's owner `@Configuration` class is usually root cause.  Here is a sample:  ``` class MyBean {}   class ExamplePostProcessor implements BeanPostProcessor {      @Override    public Object postProcessBeforeInitialization(Object bean, String beanName) {       System.out.println(""ok"");       return bean;    }      @Override    public Object postProcessAfterInitialization(Object bean, String beanName) {       return bean;    } }   @Configuration public class ExampleConfiguration {      @Bean    public MyBean myBean() {       return new MyBean();    }           @Bean    public ExamplePostProcessor myBeanPostProcessor() {       return new ExamplePostProcessor();    }      public static void main(String[] args) {       new AnnotationConfigApplicationContext(ExampleConfiguration.class);    }   } ```  In order to eliminate these messages, an **ImportBeanDefinitionRegistrar** can be used. This is preventing creating `@Configuration` before BeanPostProcessor.  Here is an example:  ``` class MyBean {}   class ExamplePostProcessor implements BeanPostProcessor {      @Override    public Object postProcessBeforeInitialization(Object bean, String beanName) {       System.out.println(""ok"");       return bean;    }      @Override    public Object postProcessAfterInitialization(Object bean, String beanName) {       return bean;    } }   @Configuration @Import(Registrar.class) public class ExampleConfiguration {      @Bean    public MyBean myBean() {       return new MyBean();    }    //    //@Bean    //public ExamplePostProcessor myBeanPostProcessor() {    //   return new ExamplePostProcessor();    //}      public static void main(String[] args) {       new AnnotationConfigApplicationContext(ExampleConfiguration.class);    }   }   class Registrar implements ImportBeanDefinitionRegistrar {      private static final String BEAN_NAME = ""cemo"";      @Override    public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,                                        BeanDefinitionRegistry registry) {       if (!registry.containsBeanDefinition(BEAN_NAME)) {          GenericBeanDefinition beanDefinition = new GenericBeanDefinition();          beanDefinition.setBeanClass(ExamplePostProcessor.class);          beanDefinition.setSynthetic(true);          registry.registerBeanDefinition(BEAN_NAME, beanDefinition);       }    }   } ```  Here is an example which is causing these messages: org.springframework.scheduling.annotation.ProxyAsyncConfiguration#asyncAdvisor  Please replace usage of these configurations by ImportBeanDefinitionRegistrar.  I will provide other BeanPostProcessors as well which is causing this message.    ---  1 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-12-19T03:43:45Z","2019-01-12T03:30:55Z"
"","17070","Support Response holder like RequestContextHolder [SPR-12464]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-12464](https://jira.spring.io/browse/SPR-12464?redirect=false)** and commented  I have checked and waited quite a long time before filing an issue but still feeling essential such a class.  Spring has RequestContextHolder but not for Response. Is there any particular reason for this? It would be great to support Response as well like RequestAndResponseContextHolder.   ---  **Affects:** 4.1.2","closed","status: bulk-closed,","spring-projects-issues","2014-11-24T06:56:08Z","2019-01-12T00:17:56Z"
"","16788","JDBC conversion exception for enum types on MySQL [SPR-12174]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-12174](https://jira.spring.io/browse/SPR-12174?redirect=false)** and commented  I have updated our codebase to spring 4.1 and had some problems.  I am working with MySQL 5.6 and latest driver (5.1.32) and JDK8.  The block below from JdbcUtils is throwing an exception at line `return rs.getObject(index, requiredType);`  ``` if (getObjectWithTypeAvailable) {      try {               return rs.getObject(index, requiredType);      }      catch (SQLFeatureNotSupportedException ex) {               logger.debug(""JDBC driver does not support JDBC 4.1 'getObject(int, Class)' method"", ex);      }      catch (AbstractMethodError err) {               logger.debug(""JDBC driver does not implement JDBC 4.1 'getObject(int, Class)' method"", err);      } } // Fall back to getObject without type specification... return getResultSetValue(rs, index); ```  I have also evaluated last statement which is working as expected.  ``` return getResultSetValue(rs, index); ```  Here is the details:  ```  ERROR [2014-09-10 12:44:55,993] com.clovify.lyso.guava.OptionalExtractorFactory: guava extractor expcetion:  ! java.sql.SQLException: Conversion not supported for type xxx.enums.Gender ! at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1094) ~[mysql-connector-java-5.1.31.jar:na] ! at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:997) ~[mysql-connector-java-5.1.31.jar:na] ! at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:983) ~[mysql-connector-java-5.1.31.jar:na] ! at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:928) ~[mysql-connector-java-5.1.31.jar:na] ! at com.mysql.jdbc.ResultSetImpl.getObject(ResultSetImpl.java:5121) ~[mysql-connector-java-5.1.31.jar:na] ! at com.mysql.jdbc.JDBC4ResultSet.getObject(JDBC4ResultSet.java:542) ~[mysql-connector-java-5.1.31.jar:na] ! at org.springframework.jdbc.support.JdbcUtils.getResultSetValue(JdbcUtils.java:197) ~[spring-jdbc-4.1.0.RELEASE.jar:4.1.0.RELEASE] ! at org.springframework.jdbc.core.BeanPropertyRowMapper.getColumnValue(BeanPropertyRowMapper.java:311) ~[spring-jdbc-4.1.0.RELEASE.jar:4.1.0.RELEASE] ! at org.springframework.jdbc.core.BeanPropertyRowMapper.mapRow(BeanPropertyRowMapper.java:249) ~[spring-jdbc-4.1.0.RELEASE.jar:4.1.0.RELEASE] ! at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:93) ~[spring-jdbc-4.1.0.RELEASE.jar:4.1.0.RELEASE] ! at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:60) ~[spring-jdbc-4.1.0.RELEASE.jar:4.1.0.RELEASE] ! at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:705) ~[spring-jdbc-4.1.0.RELEASE.jar:4.1.0.RELEASE] ! at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:641) ~[spring-jdbc-4.1.0.RELEASE.jar:4.1.0.RELEASE] ! ... 69 common frames omitted ! Causing: org.springframework.dao.TransientDataAccessResourceException: PreparedStatementCallback; SQL [SELECT * FROM USER WHERE EMAIL = ?]; Conversion not supported for type xxx.enums.Gender; nested exception is java.sql.SQLException: Conversion not supported for type xxx.enums.Gender ! at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:108) ~[spring-jdbc-4.1.0.RELEASE.jar:4.1.0.RELEASE] ! at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73) ~[spring-jdbc-4.1.0.RELEASE.jar:4.1.0.RELEASE] ! at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81) ~[spring-jdbc-4.1.0.RELEASE.jar:4.1.0.RELEASE] ! at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81) ~[spring-jdbc-4.1.0.RELEASE.jar:4.1.0.RELEASE] ! at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:657) ~[spring-jdbc-4.1.0.RELEASE.jar:4.1.0.RELEASE] ! at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:692) ~[spring-jdbc-4.1.0.RELEASE.jar:4.1.0.RELEASE] ! at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:719) ~[spring-jdbc-4.1.0.RELEASE.jar:4.1.0.RELEASE] ! at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:769) ~[spring-jdbc-4.1.0.RELEASE.jar:4.1.0.RELEASE] ! at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.queryForObject(NamedParameterJdbcTemplate.java:211) ~[spring-jdbc-4.1.0.RELEASE.jar:4.1.0.RELEASE]  ```  Is there any information I can provide?  ---  **Affects:** 4.1 GA  **Issue Links:** - #16771 getObject(index, requiredType) fails for BigInteger on Derby  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8922da3af60ba17084383eace6b80bc9ac7eccd0","closed","in: core,","spring-projects-issues","2014-09-10T06:14:04Z","2019-01-14T05:15:16Z"
"","16874","MethodReference isn't thread-safe [SPR-12269]","**[Bryan Turner](https://jira.spring.io/secure/ViewProfile.jspa?name=bturner)** opened **[SPR-12269](https://jira.spring.io/browse/SPR-12269?redirect=false)** and commented  In `MethodReference`, `cachedExecutor` is declared `volatile`. That implies that this class is expected to be used by multiple threads, but almost none of the methods that access that field do so safely.  We're ending up in this method due to Spring Security using SpEL expressions for permission checks. Under light load, the system works fine. Under heavier load, we're seeing `NullPointerException` stacks that are topped like this:  ``` 2014-09-27 21:01:04,386 ERROR [threadpool:thread-28592]  c.a.s.i.c.StateTransferringExecutor Error while processing asynchronous task java.lang.NullPointerException: null         at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:86) ~[MethodReference.class:4.1.0.RELEASE]         at org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:126) ~[SpelNodeImpl.class:4.1.0.RELEASE]         at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:296) ~[SpelExpression.class:4.1.0.RELEASE] ```  A look at `MethodReference` on line 86 shows:  ``` TypedValue result = getValueInternal(evaluationContext, value, targetType, arguments); if (cachedExecutor.get() instanceof ReflectiveMethodExecutor) {      ReflectiveMethodExecutor executor = (ReflectiveMethodExecutor) cachedExecutor.get(); ```  This has 2 problems: 1. There's no `null` check, but there are multiple other codepaths that can set `cachedExecutor` to `null` 2. Even if there was, a la `CachedMethodExecutor.isCompilable`, they won't actually _protect_ anything; they're just a race condition.  Since `cachedExecutor` is `volatile`, all of the code that uses it, if they need to touch it multiple times, needs to first assign it to a local variable to freeze its state and then access the local variable instead. Otherwise it will always be susceptible to race conditions. This appears to be missing in: * `MethodReference.getValueInternal(ExpressionState)` * `MethodValueRef.getValue()` * `CachedMethodExecutor.isCompilable()` * `CachedMethodExecutor.generateCode()` (This method only touches `cachedExecutor` once, but that's only because it's not `null` checking)  `MethodReference.getCachedExecutor` has exactly the type of code it seems like every method should have:  ``` CachedMethodExecutor executorToCheck = this.cachedExecutor; if (executorToCheck != null && executorToCheck.isSuitable(value, target, argumentTypes)) { ```    ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0cc877ad0fb6dd5775b21b56fc773c577fd2d489, https://github.com/spring-projects/spring-framework/commit/c508a70c153c4809bd68071c0fff8fe596b8d918","closed","in: core,","spring-projects-issues","2014-09-28T15:29:13Z","2014-10-01T03:11:50Z"
"","16372","Add @Bean condition based on a SpEL condition [SPR-11750]","**[Bruce Brouwer](https://jira.spring.io/secure/ViewProfile.jspa?name=bruce.brouwer)** opened **[SPR-11750](https://jira.spring.io/browse/SPR-11750?redirect=false)** and commented  It would be nice to have a generic condition that enables beans based upon the result of a SpEL expression. This is similar to #16007, but rather than activating a whole profile, this would activate individual beans. I would like to be able to do something like this (I'm not particularly keen on the names I picked):  ``` @EnabledWhen(""#{ systemProperties['a'] }"") public MyBean myBean() {   return new MyBean(); } ```  ---  **Issue Links:** - #17835 Adding ConditionalOnProperty to spring-core","open","type: enhancement,","spring-projects-issues","2014-05-01T06:26:19Z","2021-07-26T11:26:22Z"
"","16877","Allow configuring custom executor with WebSocket message broker [SPR-12272]","**[Brian Gadwell](https://jira.spring.io/secure/ViewProfile.jspa?name=brianga)** opened **[SPR-12272](https://jira.spring.io/browse/SPR-12272?redirect=false)** and commented  First a little background: One way to achieve this is to configure the ThreadPoolTaskExecutor to only use 1 thread. This does indeed work, but at the expense of scalability and performance. As suggested in the stackoverflow link, this may be able to be handled by using an interceptor to add some type of ordering data to the message header and then using that data to try an re-order the messages when they arrive at the destination. This seems difficult to do correctly.  Now for my solution: I was able to solve the issue by using an extension of ThreadPoolTaskExecutor that I created that allows for affinity based processing of tasks submitted to the executor. What I mean by this is that handlers can be registered with the executor and the handlers have an opportunity to determine if there is an affinity for the task (runnable) that was submitted. All tasks with the same affinity (just represented as a string) will be guaranteed to be executed in the order they were submitted. In our case, certain destination queues have an affinity and others do not. How long a thread waits for another task to be submitted with a given affinity is configurable, but some short value works well. I feel this is still scalable etc...  Now for the problem and why I am entering this issue: - There is no easy way to specify a ThreadPoolTaskExecutor to use for the client inbound and outbound channels. I was able to work around this by extending the WebSocketMessageBrokerConfigurationSupport class as opposed to using the `@EnableWebsocketMessageBroker` annotation and extending AbstractWebSocketMessageBrokerConfigurer. If a","closed","type: enhancement,","spring-projects-issues","2014-09-29T11:50:40Z","2014-10-01T03:11:47Z"
"","17043","Verify impacts of Servlet 3.1 AsyncI/O on ShallowEtagHeaderFilter [SPR-12438]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12438](https://jira.spring.io/browse/SPR-12438?redirect=false)** and commented  In async mode, filters should not write several times in a row to the outputstream without checking if the stream is ready to accept more data.  Some containers (including jetty) may even throw exceptions if the filter is trying to do so.  We should check that all spring filters support this async mode.   ---  **Affects:** 4.1.2  **Issue Links:** - [SEC-2786](https://jira.spring.io/browse/SEC-2786) Allow use of Spring Security filters in applications that make use of Servlet 3.1 Async I/O   **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/112bbeb4f412835393a363c1cbc9a610c280b4ec","closed","status: declined,","spring-projects-issues","2014-11-14T09:52:07Z","2014-12-10T10:20:34Z"
"","17000","Support Groovy Markup Template in spring-context-support [SPR-12392]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12392](https://jira.spring.io/browse/SPR-12392?redirect=false)** and commented  Placeholder for generic Groovy template helpers in the non-web context support module.  ---  **Issue Links:** - #16411 Support Groovy markup templating in Spring MVC","closed","type: enhancement,","spring-projects-issues","2014-10-29T10:26:14Z","2019-01-11T19:23:37Z"
"","16976","Make use of response encoding when HTML escaping the default [SPR-12369]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12369](https://jira.spring.io/browse/SPR-12369?redirect=false)** and commented  The new ServletContext init-param should be set to use #16955 fix by default.  ---  **Issue Links:** - #16955 Allow for using the response encoding when escaping HTML characters  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3bfe4dcca7ec9e6b2bb2e21a5d5b7c6737f60216","closed","type: enhancement,","spring-projects-issues","2014-10-23T05:44:15Z","2019-01-11T19:25:31Z"
"","16955","Allow for using the response encoding when escaping HTML characters [SPR-12350]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12350](https://jira.spring.io/browse/SPR-12350?redirect=false)** and commented  Once #13931 is fixed, `HtmlUtils.htmlescape` calls should be updated throughout the framework (e.g. JSP tags, etc) to provide the current response encoding to the method in order to handle HTML escaping properly.  ---  **Affects:** 4.0.7, 4.1.1  **Reference URL:** http://stackoverflow.com/questions/17575723/spring-message-in-javascript-cannot-display-spanish-accent-characters-properly  **Issue Links:** - #16748 Spring message tag should scape spanish accents properly (_**""is duplicated by""**_) - #13931 Greek characters and htmlEscape() - #16976 Make use of response encoding when HTML escaping the default  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a0c210457bda606eba58f367678bdefc69d5cd15  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2014-10-20T02:55:30Z","2019-01-11T19:25:44Z"
"","16921","Comprehensive strategy for securing Origins in web transports [SPR-12316]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12316](https://jira.spring.io/browse/SPR-12316?redirect=false)** and commented  Several supported protocols and use cases need a more comprehensive strategy for securing endpoints based on HTTP Origins (i.e. not allow all 3rd party domains as origins for requests).  * default use case with SockJS - should all Origins be allowed, or should we enforce a single origin policy? * supporting a central way to configure CORS in spring-mvc * supporting ways to disable altogether or configure origin security in SockJS * documenting those features and/or security caveats in the reference documentation  ---  **Sub-tasks:** - #16841 Add Simple way of whitelisting origin - #16888 No option to disable automatic addition of CORS header by Spring SockJS module - #16915 Consider adding a ""Vary"":""Origin"" HTTP response header in SockJS implementation  **Issue Links:** - #13916 CORS support","closed","type: task,","spring-projects-issues","2014-10-09T05:47:09Z","2019-01-11T19:16:09Z"
"","16915","Consider adding a ""Vary"":""Origin"" HTTP response header in SockJS implementation [SPR-12310]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12310](https://jira.spring.io/browse/SPR-12310?redirect=false)** and commented  The current SockJS implementation sends CORS HTTP headers in some cases, including a ""Access-Control-Max-Age"" header that specifies how long the client should keep that response in cache (even though [some browsers don't follow that advice](http://stackoverflow.com/questions/23543719/cors-access-control-max-age-is-ignored)).  For the sake of completeness, our implementation could also send a ""Vary"":""Origin"" header in order to tell browsers and proxies that the current response is cachable but varies on the ""Origin"" HTTP request header.  ---  This issue is a sub-task of #16921","closed","type: task,","spring-projects-issues","2014-10-07T01:31:30Z","2019-01-11T19:15:32Z"
"","16836","Support for Undertow 1.1 / WildFly 8.2 [SPR-12302]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12302](https://jira.spring.io/browse/SPR-12302?redirect=false)** and commented  * Upgrade to the latest Undertow version (1.1) when it's available. * Check that #16624 is working with Undertow 1.1 and the upcoming 1.2 version.  ---  **Affects:** 4.1.1  **Issue Links:** - #16533 Provide initial support for Undertow 1.1 - #16624 Create a new UndertowXhrTransport - #17075 Support for Undertow 1.2 / WildFly 9.0 - #18072 Make UndertowRequestUpgradeStrategy compatible with Undertow 1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb150c47cf50ac946197354b199f5081e8a7fb85","closed","type: enhancement,","spring-projects-issues","2014-10-06T08:59:21Z","2019-01-11T19:17:18Z"
"","16890","Enable parallel loading in DecoratingClassLoader and subclasses on JDK 7+ [SPR-12285]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12285](https://jira.spring.io/browse/SPR-12285?redirect=false)** and commented  According to JDK7's documentation, the Classloader class added new methods to add parallel classloading capabilities. This is automatically done when using directly a Classloader instance, but not the case when using a subclass.  Spring is using several helper subclasses in its codebase (see DecoratingClassLoader) - so conditionally calling `registerAsParallelCapable` (when JDK7+ is detected) could improve class loading performance.   ---  **Affects:** 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/05c995cfb33bc42ab536be76d2ecff383ec195fe","closed","type: enhancement,","spring-projects-issues","2014-10-01T10:07:47Z","2014-11-17T06:42:30Z"
"","16850","NPE in DirectFieldAccessorTests with latest jdk8u40 [SPR-12235]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12235](https://jira.spring.io/browse/SPR-12235?redirect=false)** and commented  A ""spring-beans"" module test fails using the latest JDK8 build - ""build 1.8.0_40-ea-b06"": ./gradlew clean :spring-beans:test  This test runs fine in my IDE using the same JDK - so I'm actually wondering if it's actually linked with changes in the swing API. The only change I managed to track in the call stack is in the [repaint method](http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/diff/b20c4785bb81/src/share/classes/javax/swing/JComponent.java).  ``` java.lang.NullPointerException 	at javax.swing.RepaintManager.currentManager(RepaintManager.java:262) 	at javax.swing.JComponent.repaint(JComponent.java:4799) 	at java.awt.Component.repaint(Component.java:3303) 	at javax.swing.JComponent.setFont(JComponent.java:2756) 	at javax.swing.LookAndFeel.installColorsAndFont(LookAndFeel.java:208) 	at javax.swing.plaf.basic.BasicPanelUI.installDefaults(BasicPanelUI.java:66) 	at javax.swing.plaf.basic.BasicPanelUI.installUI(BasicPanelUI.java:56) 	at javax.swing.JComponent.setUI(JComponent.java:664) 	at javax.swing.JPanel.setUI(JPanel.java:153) 	at javax.swing.JPanel.updateUI(JPanel.java:126) 	at javax.swing.JPanel.(JPanel.java:86) 	at javax.swing.JPanel.(JPanel.java:109) 	at javax.swing.JPanel.(JPanel.java:117) 	at org.springframework.beans.DirectFieldAccessorTests$1.(DirectFieldAccessorTests.java:42) 	at org.springframework.beans.DirectFieldAccessorTests.withShadowedField(DirectFieldAccessorTests.java:42) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:168) 	at org.junit.rules.RunRules.evaluate(RunRules.java:20) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86) 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49) 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69) 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:48) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) 	at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) 	at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) 	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) 	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:105) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) 	at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:355) 	at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:745) ```    ---  **Affects:** 4.0.7, 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f21c8c37fb84137ca38a22f10d590be698517218, https://github.com/spring-projects/spring-framework/commit/a80495b47d31e68eecb1ec14af254523111dc797  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","in: core,","spring-projects-issues","2014-09-22T06:27:15Z","2014-10-01T03:11:47Z"
"","16828","Deprecate Tiles 2 support [SPR-12214]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12214](https://jira.spring.io/browse/SPR-12214?redirect=false)** and commented  ---  **Issue Links:** - #17821 Deprecate Hibernate 3 support - #17820 Remove Tiles 2 support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0a36559a43780a232cb0191a8e8c9060799f8ce0","closed","type: task,","spring-projects-issues","2014-09-17T06:42:24Z","2019-01-11T17:26:33Z"
"","16827","Consider reusing @RequestMapping annotations as an interface for HTTP clients [SPR-12213]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12213](https://jira.spring.io/browse/SPR-12213?redirect=false)** and commented  Consider if we should reuse `@RequestMapping` annotations in HTTP clients as client interfaces.  See: #15682 and #16747  ---  **Issue Links:** - #15682 Enable REST controller method parameter annotations on an interface (_**""duplicates""**_) - #16747 Introduce proxy-based REST client similar to HttpInvokerProxyFactoryBean  1 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2014-09-17T06:24:11Z","2019-01-11T17:26:20Z"
"","16822","Support SSE / event-stream [SPR-12208]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12208](https://jira.spring.io/browse/SPR-12208?redirect=false)** and commented  ---  **Issue Links:** - #16826 HTTP Streaming and Server-Sent Events (SSE) (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2014-09-17T06:14:50Z","2019-01-11T17:25:51Z"
"","16807","Add spring macros support for Groovy Markup Templates [SPR-12193]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12193](https://jira.spring.io/browse/SPR-12193?redirect=false)** and commented  spring-boot plans on using spring-framework's support for groovy markup templates (see [github issue](https://github.com/spring-projects/spring-boot/issues/1552)).   ---  **Affects:** 4.1 GA  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/1552  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2014-09-15T02:10:23Z","2014-10-01T03:11:48Z"
"","16772","Fix ResourceUrlProvider path check in getForRequestUrl [SPR-12158]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12158](https://jira.spring.io/browse/SPR-12158?redirect=false)** and commented  [When asserting that the path within mapping is within the request](https://github.com/spring-projects/spring-framework/blob/6966e89578e6c5ce18224bbbb3a3ecf809757661/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java#L183), ResourceUrlProvider should check for an index != 1  This bug only happens when there is no context path (which is the default case for Spring Boot).  Unit tests should test that case, [see there](https://github.com/spring-projects/spring-framework/blob/801658d362cdb7546ad6898e49a1666cf7872a2a/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceTransformerSupportTests.java).   ---  **Affects:** 4.0 GA  **Reference URL:** https://github.com/bclozel/spring-resource-handling/  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6aef1a1d1736d8c3b936cda0409982a6f306f973","closed","type: bug,","spring-projects-issues","2014-09-05T12:31:20Z","2014-10-01T03:11:48Z"
"","16746","Consider enhancing ResourceUrlProvider to be able to change the domain, port, or scheme [SPR-12130]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12130](https://jira.spring.io/browse/SPR-12130?redirect=false)** and commented  Now that the new [resource handling feature](https://spring.io/blog/2014/07/24/spring-framework-4-1-handling-static-web-resources) is in release candidate phase, we received feedback on several aspects.  One of those feedbacks is about changing the HTTP domain that serves resources. Here are some use cases for this: * use of a 3rd party CDN on a separate domain (like Amazon cloudfront) * use of a separate, cookie-less domain for better web performance, since sending cookies with each request can be a performance issue  See this [Twitter conversation](https://twitter.com/its_damo/status/499991519718158336) (in french) for reference.  We considered allowing ResourceResolvers to return complete URLs (and not only the resource path), but the current design for the Resource (Resolver/Transformer) chain is simple and cohesive -- focused mainly on the resource path. The ability to modify the domain, port, and scheme is a separate concern.  This issue is to explore the following solution: * configuring globally an HTTP domain for all resolved resources though `ResourceUrlProvider`, making it a cross-cutting concern for ResourceResolvers * this configuration could be done at the java config level with `WebMvcConfigurerAdapter` or `WebMvcConfigurationSupport`  ---  **Affects:** 4.1 RC2  **Issue Links:** - #16488 Create ResourceResolver for changing URL domain","closed","type: enhancement,","spring-projects-issues","2014-08-28T02:21:51Z","2019-01-11T17:22:26Z"
"","16624","Create a new UndertowXhrTransport [SPR-12008]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-12008](https://jira.spring.io/browse/SPR-12008?redirect=false)** and commented  ---  **Issue Links:** - #16533 Provide initial support for Undertow 1.1 - #16836 Support for Undertow 1.1 / WildFly 8.2","closed","type: enhancement,","spring-projects-issues","2014-07-18T07:22:52Z","2019-01-11T18:22:50Z"
"","16598","Enhance ResourceHandlerRegistration API for resource transformers/resolvers [SPR-11982]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11982](https://jira.spring.io/browse/SPR-11982?redirect=false)** and commented  Provide methods on ResourceHandlerRegistration in order to help configuring ResourceTransformers and ResourceResolvers in common use cases: * javascript webapps in production mode * javascript webapps in dev mode  ---  **Issue Links:** - #16745 Update MVC namespace to match improvements made to the Java config in RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/95e9b380d3bff13a67ce7e9ff666cfdb249afb43","closed","type: enhancement,","spring-projects-issues","2014-07-10T14:28:39Z","2019-01-11T22:25:00Z"
"","16580","Add AppCacheResourceTransformer for HTML5 offline applications [SPR-11964]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11964](https://jira.spring.io/browse/SPR-11964?redirect=false)** and commented  HTML5 offline applications use cache manifests to list all resources that should be stored in the browser appcache.  This transformer should: * modify links to match the public URL paths that should be exposed to clients, using configured ResourceResolver strategies * append a comment in the manifest, containing a Hash (e.g. ""# Hash: 9de0f09ed7caf84e885f1f0f11c7e326""), thus changing the content of the manifest in order to trigger an appcache reload in the browser.  This a candidate transformer and may not be included in the next version.   --- No further details from [SPR-11964](https://jira.spring.io/browse/SPR-11964?redirect=false)","closed","type: enhancement,","spring-projects-issues","2014-07-07T07:12:08Z","2014-07-18T10:16:37Z"
"","16579","remove jackson dependency in AbstractHttpReceivingTransportHandler [SPR-11963]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11963](https://jira.spring.io/browse/SPR-11963?redirect=false)** and commented  There's a direct dependency to Jackson in AbstractHttpReceivingTransportHandler, whereas we try to make this dependency optional with ""jackson2Present"" booleans in our code.  See [related SO question](https://stackoverflow.com/questions/24571705/remove-dependency-on-jackson).   ---  **Affects:** 4.0.5  **Reference URL:** https://stackoverflow.com/questions/24571705/remove-dependency-on-jackson  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/387da221c3a97823810a4cfdea8cf03028231909, https://github.com/spring-projects/spring-framework/commit/ce6adfbe351cf19da3ce8a69ae27b6c4dacc8043, https://github.com/spring-projects/spring-framework/commit/6bcb48f95d537eb3cd1854fe19b1f38d22adcd6d, https://github.com/spring-projects/spring-framework/commit/e549103ca0c0d2b9956772e3889a12f168c954ff","closed","type: bug,","spring-projects-issues","2014-07-07T03:23:48Z","2014-07-08T00:21:28Z"
"","16538","Workaround for Wildfly WFLY-3474 NPE in HttpServletResponse.getHeaders [SPR-11919]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11919](https://jira.spring.io/browse/SPR-11919?redirect=false)** and commented  There's an issue in Wildfly 8.0.0.Final and 8.1.0.Final (actually in undertow < 1.1.0.Beta2).  See [the commit that fixes this in undertow](https://github.com/undertow-io/undertow/commit/9b534ac98175acdd73e27cf6b3a9361ef42b7a05) and [this StackOverflow question for an actual example](https://stackoverflow.com/questions/24346722/spring-mvc-and-websocket-exception-using-sockjs-with-stompjs).   ---  **Affects:** 4.0.5  **Reference URL:** https://issues.jboss.org/browse/WFLY-3474","closed","type: enhancement,","spring-projects-issues","2014-06-25T12:58:22Z","2014-07-08T00:21:27Z"
"","16533","Provide initial support for Undertow 1.1 [SPR-11914]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11914](https://jira.spring.io/browse/SPR-11914?redirect=false)** and commented  Since [UNDERTOW-224](https://issues.jboss.org/browse/UNDERTOW-224), [the constructor of the ServletWebSocketHttpExchange class was updated with an additional argument](https://github.com/undertow-io/undertow/commit/17bf53ec804bd790c771ed4f4cf9b5e0e1444c0c#diff-f4470e61df24a8bbcf33601b9f52d5fbR60).  Developers trying the first beta versions face the following issue:  ``` Caused by: org.springframework.web.socket.sockjs.SockJsException: Uncaught failure in SockJS request, uri=http://localhost:8080/frontend/track/491/xe9k638d/websocket; nested exception is org.springframework.web.socket.sockjs.SockJsTransportFailureException: WebSocket handshake failure; nested exception is java.lang.NoSuchMethodError: io.undertow.servlet.websockets.ServletWebSocketHttpExchange.(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V     at org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler.handleRequest(SockJsHttpRequestHandler.java:91) [spring-websocket-4.0.5.RELEASE.jar:4.0.5.RELEASE]     at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:51) [spring-webmvc-4.0.4.RELEASE.jar:4.0.4.RELEASE] ```  As of this issue, the release date of Undertow 1.1 is not yet scheduled.  ---  **Affects:** 4.0.5  **Issue Links:** - #16836 Support for Undertow 1.1 / WildFly 8.2 - #16624 Create a new UndertowXhrTransport  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/73267d75230dfb90097133017f203ca15ef813db  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2014-06-25T07:10:30Z","2019-01-11T22:20:11Z"
"","16505","Improve HTTP support and update with new HTTP RFCs [SPR-11886]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11886](https://jira.spring.io/browse/SPR-11886?redirect=false)** and commented  This is an umbrella issue. Sub-issues will be created as we find discrepancies in the current implementation vs. new RFCs.  ---  **Reference URL:** https://www.mnot.net/blog/2014/06/07/rfc2616_is_dead  **Issue Links:** - #16683 Update references to RFC 2616","closed","type: enhancement,","spring-projects-issues","2014-06-19T01:59:34Z","2019-01-11T22:15:48Z"
"","16490","Refactor PrefixResourceResolver into VersionResourceResolver [SPR-11871]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11871](https://jira.spring.io/browse/SPR-11871?redirect=false)** and commented  Reconsidering the core goal of this resolver, we found that: * applications are released or delivered and are given versions or revisions to identify those states in their lifecycle * static resources often change between each version and should be reloaded by clients to reflect application changes * application version can be reflected in several part of the resources' URLs  Note that this resolver differs from the FingerprintResourceResolver, which deals with changes at resource level.   ---  **Affects:** 4.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/13c4a0396d0bb20846d3f5e09108a877c6052389","closed","type: task,","spring-projects-issues","2014-06-12T05:42:35Z","2014-07-18T10:16:33Z"
"","16488","Create ResourceResolver for changing URL domain [SPR-11869]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11869](https://jira.spring.io/browse/SPR-11869?redirect=false)** and commented  Web applications sometimes don't use their main web domain to serve static web resources, and thus use a different domain. Here are some example use cases: * use of a cookie-less domain (such as `http://static.example.org`) * use of a CDN  This ResourceResolver (`DomainResourceResolver`, or `CDNResourceResolver`) should address that use case.  ---  **Issue Links:** - #12401 Support for generating links to static resources such as CSS and JS files hosted at a CDN such as Amazon Cloudfront (_**""is duplicated by""**_) - #12401 Support for generating links to static resources such as CSS and JS files hosted at a CDN such as Amazon Cloudfront - #16746 Consider enhancing ResourceUrlProvider to be able to change the domain, port, or scheme  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-06-11T07:26:02Z","2019-01-11T22:16:16Z"
"","16484","Add setJavaScriptModuleLoaderMode (or similar) property to FingerprintResourceResolver [SPR-11865]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11865](https://jira.spring.io/browse/SPR-11865?redirect=false)** and commented  When JavaScript module loaders are in use we can't use content-based hashes so the FingerprintResourceResolver should exclude .js resources. Perhaps by default this should be set to false.  ---  **Affects:** 4.1 RC1  This issue is a sub-task of #14944","closed","status: declined,","spring-projects-issues","2014-06-10T09:57:49Z","2019-01-11T22:17:56Z"
"","16420","Enhance ResourceHttpRequestHandler with ResourceTransformer strategy [SPR-11800]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11800](https://jira.spring.io/browse/SPR-11800?redirect=false)** and commented  In order to complete the ResourceResolver strategy, a ResourceTransformer one is needed. The main use case for this strategy is resources that link to other resources from their content - links to other resources need to be updated to apply Resolver strategies.  For example: a CSS file that link to images (to use them as background) or other CSS files needs to have its inner links updated by resolvers to match the configured strategy.  ---  **Sub-tasks:** - #16479 Improve CssLinkResourceTransformer to only update links to relative resources  **Issue Links:** - #14944 Support Content-based Hash Fingerprinted URLs in ResourceHttpRequestHandler (_**""is depended on by""**_) - #16479 Improve CssLinkResourceTransformer to only update links to relative resources  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6966e89578e6c5ce18224bbbb3a3ecf809757661","closed","type: enhancement,","spring-projects-issues","2014-05-16T08:37:45Z","2019-01-11T21:20:55Z"
"","16413","Server-side HTTP caching improvements [SPR-11792]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11792](https://jira.spring.io/browse/SPR-11792?redirect=false)** and commented  This is an umbrella issue for several improvements on HTTP caching strategies.  Those improvements include: * Refactor WebContentGenerator to decouple HTTP Headers from each other and enable flexible use of `last-modified`, `must-revalidate`, `Cache-Control: public/private`, `no-transform` * Decoupling HTTP caching features from WebContentGenerator and explore alternative solutions * Provide controller method-level alternative to WebContentInterceptor * Enable gzip compression in DispatcherServlet  References: [Mark Nottingham's cache docs](https://www.mnot.net/cache_docs/) and [RFC2616](http://www.ietf.org/rfc/rfc2616.txt)  ---  **Sub-tasks:** - #7466 HTTP caching should be decoupled from WebContentGenerator - #11500 Add support for no-transform cache control header - #11789 Add support for public/private Cache-Control HTTP header - #13194 Provide controller method level alternative to WebContentInterceptor - #14177 Use same pragma settings in WebContentGenerator as in AbstractView - #15097 Allow must-revalidate to be suppressed in ResourceHttpRequestHandler - #15948 ServletWebRequest can't validate Etag and Last-Modified together. - #16336 gzip compression in DispatcherServlet  **Issue Links:** - #17799 WebContentGenerator not backwards compatible - #17843 Reset Pragma header in WebContentGenerator when caching resources - #18625 Reset Expires header in WebContentGenerator when caching resources - #17844 Document changes about HTTP cache header defaults in migration docs - #10491 HTTP cache and conditional requests support in RestTemplate - #16988 ResourceHttpRequestHandler serves all files with must-revalidate cache header, should not do that when using a content versioning strategy  6 votes, 16 watchers","closed","type: enhancement,","spring-projects-issues","2014-05-15T13:10:44Z","2019-01-11T21:13:25Z"
"","16387","Add support for JSON Patch [SPR-11765]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-11765](https://jira.spring.io/browse/SPR-11765?redirect=false)** and commented  Add support for JSON Patch ([RFC 6902](https://www.rfc-editor.org/rfc/rfc6902.txt)) in controllers and REST template.   ---  2 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-05-07T04:07:59Z","2019-01-12T00:19:44Z"
"","16780","HttpComponentsClientHttpRequestFactory does not set connection request timeout on request config [SPR-12166]","**[Brandon Zeeb](https://jira.spring.io/secure/ViewProfile.jspa?name=phasebash)** opened **[SPR-12166](https://jira.spring.io/browse/SPR-12166?redirect=false)** and commented  The class HttpComponentsClientHttpRequestFactory in the _createRequest_ method attempts to create a _custom_ RequestConfig if one is not provided by the _createHttpContext_ (by way of HttpContext).  This _custom_ RequestConfig is created with a connect timeout, a socket timeout, but not a timeout value for the connection pool.  In a production application, this opens up the possibility for the clients of RestTemplate to hang indefinitely waiting for a connection from the connection pool if all connection leases from the pool are currently occupied.  If a value is not provided for the connection request timeout value of RequestConfig, HttpClient will wait infinitely long for a connection from the connection pool.  The code in question is:  ``` if (this.socketTimeout > 0 || this.connectTimeout > 0) {     config = RequestConfig.custom()                      .setConnectTimeout(this.connectTimeout)                      .setSocketTimeout(this.socketTimeout)                      .build(); } ```  When it should perhaps be:  ``` if (this.socketTimeout > 0 || this.connectTimeout > 0) {     config = RequestConfig.custom()                      .setConnectTimeout(this.connectTimeout)                      .setSocketTimeout(this.socketTimeout)                      .setConnectionRequestTimeout(this.connectionRequestTimeout)                      .build(); } ```  Aside: I'm not sure if the if statement is necessary, HttpClient might already sanitize the values, I leave this to you to decide.  I have initially made this a **Major** bug given the behavior that can manifest in an application (particularly under heavy load), also leave this to you do properly prioritize.  I also understand that RequestConfig contains many attributes, and perhaps not all of them should be mirrored in the HttpComponentsClientHttpRequestFactory.  To this end, it's possible that perhaps a client should be forced to always supply one for this class, and thereby this is not a thing Spring Framework needs to solve.  Let me know your thoughts, and thanks in advance.  ---  **Affects:** 4.1 GA  **Issue Links:** - #17144 Configured RequestConfig in HttpClient gets overwritten by default","closed","type: bug,","spring-projects-issues","2014-09-08T13:27:40Z","2019-01-11T17:20:43Z"
"","16458","Not Possible to Vary Content-Type in @ExceptionHandler and Alter requestedMediaTypes as decided by the AbstractMessageConverterMethodProcessor [SPR-11839]","**[Brandon Zeeb](https://jira.spring.io/secure/ViewProfile.jspa?name=phasebash)** opened **[SPR-11839](https://jira.spring.io/browse/SPR-11839?redirect=false)** and commented  I have the case where a Controller and ExceptionHandler vary in paradigm of their return types.  The Controller returns a Jena Model which requires special care for  serialization, the ExceptionHandler returns an internal domain object (POJO) for error messaging and can be serialized with JAXB, Jackson, et al.  Here is simple psuedo code I just typed out.  ``` @Controller public FooController {     @RequestMapping('/search')    Model searchWithQuery(SearchCommand command) {        ... do business logic ...        return model     } } ```  ``` @ControllerAdvice public class CommonControllerAdvice {              @ExceptionHandler({BindException.class})     public ResponseEntity handleBindException(BindException e, WebRequest request) {          ... figure out the message, local, etc ....          return new ResponseEntity(new ErrorDomain(...), headers, BAD_REQUEST);     } } ```  In the case where _headers_ above is the following:  ``` HttpHeaders headers = new HttpHeaders(); headers.setContentType(MediaType.APPLICATION_JSON); ```  This will only effect the response but is not used at all to determine the proper message converter.  In short, there is no way to Vary the response Content-Type as compared to the requested Accept header per the HTTP RFC: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.44  In my example above, this is particularly annoying since the ErrorDomain and Apache Jena Model are fundamentally not compatible with the same (de)serialization strategies.  Am I missing something, or is this a possible improvement?  Thanks in advance.   --- No further details from [SPR-11839](https://jira.spring.io/browse/SPR-11839?redirect=false)","closed","type: enhancement,","spring-projects-issues","2014-05-30T19:21:22Z","2018-12-17T22:57:35Z"
"","16507","WebMVC throws nullpointerexception on java 6 in TypeConverterDelegate [SPR-11888]","**[Boris Bera](https://jira.spring.io/secure/ViewProfile.jspa?name=boris-b)** opened **[SPR-11888](https://jira.spring.io/browse/SPR-11888?redirect=false)** and commented  When running the latest snapshot (4.1.0.BUILD-20140619.135109-207) of spring-webmvc on java 1.6, requests done with a MockMvc will throw a nullpointerexception in the TypeConverterDelegate class.  Stacktrace:  ``` org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.NullPointerException 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:973) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:852) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:668) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837) 	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:62) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:770) 	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:170) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:137) 	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:141) 	at com.vantrix.mp.mpcms.impl.rest.MPRESTServiceImplUT.thatFindConvertsParameters(MPRESTServiceImplUT.java:222) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.mockito.internal.runners.JUnit45AndHigherRunnerImpl.run(JUnit45AndHigherRunnerImpl.java:37) 	at org.mockito.runners.MockitoJUnitRunner.run(MockitoJUnitRunner.java:62) 	at org.junit.runners.Suite.runChild(Suite.java:127) 	at org.junit.runners.Suite.runChild(Suite.java:26) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:160) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134) Caused by: java.lang.NullPointerException 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:260) 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:106) 	at org.springframework.beans.TypeConverterSupport.doConvert(TypeConverterSupport.java:64) 	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:47) 	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:582) 	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:105) 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:79) 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:157) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:124) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:781) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:721) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:938) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:870) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961) 	... 46 more ```  I did some digging and I think the problem comes from this commit: https://github.com/spring-projects/spring-framework/commit/0dc6082b01606c3c996b728541467ba5104b747f  The problem is on line 260 in spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java  In java 1.6, javaUtilOptionalEmpty is null and calling .getClass() on it throws the exception.   ---  **Affects:** 4.1 RC1","closed","type: bug,","spring-projects-issues","2014-06-19T08:19:46Z","2014-07-18T10:16:41Z"
"","16950","Document method visibility rules for @Bean methods  [SPR-12345]","**[Bob Tiernay](https://jira.spring.io/secure/ViewProfile.jspa?name=btiernay)** opened **[SPR-12345](https://jira.spring.io/browse/SPR-12345?redirect=false)** and commented  There used to be documentation in the JavaConfig project that discussed the effect of method visibility on bean scope:  http://docs.spring.io/spring-javaconfig/docs/1.0-m2/reference/html/bean-visibility.html  This documentation does not appear to exist in:  http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/beans.html#beans-factorybeans-annotations  However, there is an example in that section regarding a `privateInstance` but the semantics are still undefined. I am still unclear what effect marking an `@Bean` method `private` has. I was hoping it would make it private to the `@Configuration` as that could be very useful in certain circumstances.  Nevertheless, it would be extremely useful to document these semantics.   ---  **Affects:** 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f58e1db2e69b2bc0bcb4da7d83c01c1c9b56695d","closed","type: documentation,","spring-projects-issues","2014-10-18T06:04:04Z","2015-07-15T09:05:14Z"
"","16578","Backward compatibility issue in RestTemplate's messageConverters after SPR-11351 [SPR-11962]","**[Boaz](https://jira.spring.io/secure/ViewProfile.jspa?name=boaz)** opened **[SPR-11962](https://jira.spring.io/browse/SPR-11962?redirect=false)** and commented  Hi,  We've recently upgraded our Spring version from 3.2.6 to 3.2.9 and we've encountered a backwards compatibility issue. Usually we use `RestTemplate` with it's default set of `messageConverters`, but in some places we add custom message converters to the existing collection of message converters, it looks as follows:  ``` RestTemplate restTemplate = new RestTemplate(); List","closed","type: bug,","spring-projects-issues","2014-07-06T23:14:54Z","2019-01-11T22:26:22Z"
"","16516","@PathVariable & @MatrixVariable do not work as documented when ""="" is in the path variable value part (pre "";"") [SPR-11897]","**[Boaz](https://jira.spring.io/secure/ViewProfile.jspa?name=boaz)** opened **[SPR-11897](https://jira.spring.io/browse/SPR-11897?redirect=false)** and commented      Hi,          I'm attempting to use Matrix variables.     The documentation states the following example:  ``` 	// GET /pets/42;q=11;r=22  	@RequestMapping(value = ""/pets/{petId}"", method = RequestMethod.GET) 	public void findPet(@PathVariable String petId, @MatrixVariable int q) {  	  // petId == 42 	  // q == 11  	} ```      My code is very similar:  ```     @RequestMapping(method = RequestMethod.GET, value = ""/{foo}"")     @ResponseStatus(HttpStatus.OK)     public @ResponseBody Foo getFoo(@PathVariable(""foo"") final String foo,                                     @MatrixVariable(value = ""by"", pathVar = ""foo"", defaultValue = ""id"", required = false) final String fooBy) {      } ```      and I'm activating the enableMatrixVariables in my context like so:  ```  ```      accessing *GET /a=b;by=id* results in  ``` fooBy = ""id"" foo = ""a=b;by=id"" ```      The expected result is foo = ""a=b"", but somehow the presence of the ""="" char confuses everything, I validated that without the ""="" char - this works as expected.  Currently I'm using the following work around:  ```     @RequestMapping(method = RequestMethod.GET, value = ""/{foo:[^;]+}{fooVars}"")     @ResponseStatus(HttpStatus.OK)     public @ResponseBody Foo getFoo(@PathVariable(""foo"") final String foo,                                     @MatrixVariable(value = ""by"", pathVar = ""fooVars"", defaultValue = ""id"", required = false) final String fooBy) {      } ```  ---  **Affects:** 3.2.6, 3.2.9, 4.0 GA, 4.0.5, 5.0.7  **Issue Links:** - #16498 Matrix variables aren't read when path variable has regex restriction  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2014-06-22T08:49:09Z","2019-01-13T20:59:36Z"
"","16944","Leveraging Spring Security with WebSocket and AngularJS [SPR-12339]","**[Bjorn Harvold](https://jira.spring.io/secure/ViewProfile.jspa?name=bjornharvold)** opened **[SPR-12339](https://jira.spring.io/browse/SPR-12339?redirect=false)** and commented  I want to authenticate the web socket connection upon CONNECT the same way we use a ""pre authenticate"" filter for REST controllers.  I have tried adding this on: `@Override` public void configureClientInboundChannel(ChannelRegistration channelRegistration)  I retrieve the auth token from the header and authenticate using my pre authenticate authentication manager successfully. The issue is that the context/thread is not the same as the one that handles the `@MessageMapping` controller so when I finally hit my controller the Authentication object is null again.  The only [ugly] way I have gotten pre authentication to work is to inject the StompHeaderAccessor into the controller method and doing the pre authentication there. I would have to do this on every method call.  Another improvement is to be able to explicitly set the custom jackson / boon objectmapper. Right now I don't see it picking up the object mapper I'm using for my REST controllers when I define it under: `@Override` public void configureMessageConverters(List","closed","type: enhancement,","spring-projects-issues","2014-10-15T22:19:31Z","2019-01-13T20:58:23Z"
"","16380","IdToEntityConverter throws Access Denied exception within Spring MVC application on WebSphere 8.x [SPR-11758]","**[Bisrat Dinka](https://jira.spring.io/secure/ViewProfile.jspa?name=bdinka)** opened **[SPR-11758](https://jira.spring.io/browse/SPR-11758?redirect=false)** and commented  When Spring MVC application that is integrated with Apache Tiles is being utilized in Production environment on Websphere 8.x it throws the the following ""Access Denied"" exception during web page navigation.   The Spring MVC application becomes unresponsive to user requests on the certain pages after this occurs.   Stack Trace is below.  2014-05-05 10:25:45,787 ERROR org.springframework.web.servlet.tags.form.InputTag - access denied (java.lang.RuntimePermission accessDeclaredMembers) java.security.AccessControlException: access denied (java.lang.RuntimePermission accessDeclaredMembers) at java.security.AccessControlContext.checkPermission(AccessControlContext.java:374) at java.security.AccessController.checkPermission(AccessController.java:549) at java.lang.SecurityManager.checkPermission(SecurityManager.java:532) at java.lang.SecurityManager.checkMemberAccess(SecurityManager.java:1662) at java.lang.Class.checkMemberAccess(Class.java:2159) at java.lang.Class.getDeclaredMethods(Class.java:1792) at org.springframework.core.convert.support.IdToEntityConverter.getFinder(IdToEntityConverter.java:68) at org.springframework.core.convert.support.IdToEntityConverter.matches(IdToEntityConverter.java:53) at org.springframework.core.convert.support.GenericConversionService$ConvertersForPair.getConverter(GenericConversionService.java:592) at org.springframework.core.convert.support.GenericConversionService$Converters.getRegisteredConverter(GenericConversionService.java:498) at org.springframework.core.convert.support.GenericConversionService$Converters.find(GenericConversionService.java:483) at org.springframework.core.convert.support.GenericConversionService.getConverter(GenericConversionService.java:230) at org.springframework.core.convert.support.GenericConversionService.canConvert(GenericConversionService.java:128) at org.springframework.validation.AbstractPropertyBindingResult.formatFieldValue(AbstractPropertyBindingResult.java:124) at org.springframework.validation.AbstractBindingResult.getFieldValue(AbstractBindingResult.java:222) at org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:120) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:179) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getPropertyPath(AbstractDataBoundFormElementTag.java:199) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getName(AbstractDataBoundFormElementTag.java:165) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.writeDefaultAttributes(AbstractDataBoundFormElementTag.java:128) at org.springframework.web.servlet.tags.form.AbstractHtmlElementTag.writeDefaultAttributes(AbstractHtmlElementTag.java:421) at org.springframework.web.servlet.tags.form.InputTag.writeTagContent(InputTag.java:142) at org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:103) at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:80) at com.ibm._jsp._newUserRegistration._jspx_meth_form_input_7(_newUserRegistration.java:1167) at com.ibm._jsp._newUserRegistration._jspService(_newUserRegistration.java:402) at com.ibm.ws.jsp.runtime.HttpJspBase.service(HttpJspBase.java:99) at javax.servlet.http.HttpServlet.service(HttpServlet.java:668) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1225) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:775) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:457) at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:178) at com.ibm.wsspi.webcontainer.servlet.GenericServletWrapper.handleRequest(GenericServletWrapper.java:122) at com.ibm.ws.jsp.webcontainerext.AbstractJSPExtensionServletWrapper.handleRequest(AbstractJSPExtensionServletWrapper.java:205) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:136) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:79) at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:928) at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1025) at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.dispatch(WebAppRequestDispatcher.java:1384) at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.include(WebAppRequestDispatcher.java:548) at org.apache.jasper.runtime.JspRuntimeLibrary.include(JspRuntimeLibrary.java:1045) at org.apache.jasper.runtime.PageContextImpl.include(PageContextImpl.java:531) at org.apache.tiles.jsp.context.JspTilesRequestContext.include(JspTilesRequestContext.java:103) at org.apache.tiles.jsp.context.JspTilesRequestContext.dispatch(JspTilesRequestContext.java:96) at org.apache.tiles.renderer.impl.TemplateAttributeRenderer.write(TemplateAttributeRenderer.java:44) at org.apache.tiles.renderer.impl.AbstractBaseAttributeRenderer.render(AbstractBaseAttributeRenderer.java:106) at org.apache.tiles.renderer.impl.ChainedDelegateAttributeRenderer.write(ChainedDelegateAttributeRenderer.java:76) at org.apache.tiles.renderer.impl.AbstractBaseAttributeRenderer.render(AbstractBaseAttributeRenderer.java:106) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:670) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:336) at org.apache.tiles.template.InsertAttributeModel.renderAttribute(InsertAttributeModel.java:210) at org.apache.tiles.template.InsertAttributeModel.end(InsertAttributeModel.java:126) at org.apache.tiles.jsp.taglib.InsertAttributeTag.doTag(InsertAttributeTag.java:311) at com.ibm._jsp._external._jspx_meth_tiles_insertAttribute_3(_external.java:339) at com.ibm._jsp._external._jspService(_external.java:126) at com.ibm.ws.jsp.runtime.HttpJspBase.service(HttpJspBase.java:99) at javax.servlet.http.HttpServlet.service(HttpServlet.java:668) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1225) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:775) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:457) at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:178) at com.ibm.wsspi.webcontainer.servlet.GenericServletWrapper.handleRequest(GenericServletWrapper.java:122) at com.ibm.ws.jsp.webcontainerext.AbstractJSPExtensionServletWrapper.handleRequest(AbstractJSPExtensionServletWrapper.java:205) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:136) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:79) at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:928) at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1025) at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.dispatch(WebAppRequestDispatcher.java:1384) at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:193) at org.apache.tiles.servlet.context.ServletTilesRequestContext.forward(ServletTilesRequestContext.java:241) at org.apache.tiles.servlet.context.ServletTilesRequestContext.dispatch(ServletTilesRequestContext.java:222) at org.apache.tiles.renderer.impl.TemplateAttributeRenderer.write(TemplateAttributeRenderer.java:44) at org.apache.tiles.renderer.impl.AbstractBaseAttributeRenderer.render(AbstractBaseAttributeRenderer.java:106) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:670) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:690) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:644) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:627) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:321) at org.springframework.web.servlet.view.tiles2.TilesView.renderMergedOutputModel(TilesView.java:124) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:263) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1208) at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:992) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:939) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:838) at javax.servlet.http.HttpServlet.service(HttpServlet.java:595) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812) at javax.servlet.http.HttpServlet.service(HttpServlet.java:668) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1225) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:775) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:457) at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:178) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:136) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:97) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:150) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:183) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:343) at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:260) at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:195) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:91) at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:928) at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1025) at com.ibm.ws.webcontainer.webapp.WebApp.handleRequest(WebApp.java:3763) at com.ibm.ws.webcontainer.webapp.WebGroup.handleRequest(WebGroup.java:304) at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:975) at com.ibm.ws.webcontainer.WSWebContainer.handleRequest(WSWebContainer.java:1662) at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:195) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:453) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewRequest(HttpInboundLink.java:515) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.processRequest(HttpInboundLink.java:306) at com.ibm.ws.http.channel.inbound.impl.HttpICLReadCallback.complete(HttpICLReadCallback.java:83) at com.ibm.ws.ssl.channel.impl.SSLReadServiceContext$SSLReadCompletedCallback.complete(SSLReadServiceContext.java:1784) at com.ibm.ws.tcp.channel.impl.WorkQueueManager.requestComplete(WorkQueueManager.java:557) at com.ibm.ws.tcp.channel.impl.WorkQueueManager.attemptIO(WorkQueueManager.java:607) at com.ibm.ws.tcp.channel.impl.WorkQueueManager.workerRun(WorkQueueManager.java:984) at com.ibm.ws.tcp.channel.impl.WorkQueueManager$Worker.run(WorkQueueManager.java:1069) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1691)   ---  **Affects:** 3.2.4  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: bug,","spring-projects-issues","2014-05-05T08:42:36Z","2014-08-04T12:02:04Z"
"","17057","Spring Websockets Broker relay supporting a cluster of STOMP endpoint addresses [SPR-12452]","**[Biju Kunjummen](https://jira.spring.io/secure/ViewProfile.jspa?name=biju.kunjummen)** opened **[SPR-12452](https://jira.spring.io/browse/SPR-12452?redirect=false)** and commented  Spring Websocket supports client STOMP subscriptions through a Message broker relay component which in turn talks to full fledged STOMP brokers like RabbitMQ and ActiveMQ.  RabbitMQ supports a clustered deployment, for native AMQP messaging the client connection factory has a way to specify all the hosts in the cluster(`org.springframework.amqp.rabbit.connection.AbstractConnectionFactory#setAddresses`). To support a similar set-up for a cluster of RabbitMQ servers over STOMP, an option will be to use a loadbalancer, however if support can be natively provided within Spring Websocket relay that will be even better.  Another potential option is to support Stomp from the client but then turn that to native AMQP or JMS  ---  **Affects:** 4.1.2  **Issue Links:** - #21341 Add description for StompBrokerRelayMessageHandler - #22055 ReactorNettyTcpClient constructor with callback to initialize TcpClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/88a17a4b10a110eee9c30585999a275ccffa3c17, https://github.com/spring-projects/spring-framework/commit/d512cca3fde8759490abdc7222f54cb096a8097a  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)  6 votes, 15 watchers","closed","type: enhancement,","spring-projects-issues","2014-11-19T07:15:05Z","2022-02-04T04:40:34Z"
"","16946","GuavaCacheManager customize each underlying GuavaCache  [SPR-12341]","**[Biju Kunjummen](https://jira.spring.io/secure/ViewProfile.jspa?name=biju.kunjummen)** opened **[SPR-12341](https://jira.spring.io/browse/SPR-12341?redirect=false)** and commented  The GuavaCacheManager feels a little limited in the way it can be used today, the cache manager can be created specifying a list of cache names and a CacheBuilder this way:  ```xml                            default             books                ```  However, it is possible to have requirements where one type of cache may need to be expired in say 10 mins(say list of employees), but another kind of cache may need to be expired after say 3 days(say list of states), this kind of customization is currently not possible with GuavaCacheManager. How about something along these lines:  ```xml                                                                                            ```  This essentially allows customized c1, c2, c3, c4 caches, at the same time if there is a new cache required it would be created lazily with a CacheBuilder at the level of GuavaCacheManager.  I have submitted a pull request with the proposed changes - https://github.com/spring-projects/spring-framework/pull/662   ---  **Affects:** 4.0.7","closed","in: core,","spring-projects-issues","2014-10-16T07:48:26Z","2019-01-12T05:25:13Z"
"","17041","Isuue with Storedprocedure  class while calling DB2 Stored procedure in weblogic 10.3.6 [SPR-12436]","**[Bhaskara](https://jira.spring.io/secure/ViewProfile.jspa?name=varadabhaskar)** opened **[SPR-12436](https://jira.spring.io/browse/SPR-12436?redirect=false)** and commented  We were using spring 2.5 version to call our DB2 stored procedures with weblogic 10.3.5 we don't have any issued with this we have migrated our spring version to 4.0.2 we see some issues with execution of Storedprocedures we were getting below exception in our logs      org.springframework.jdbc.UncategorizedSQLException: CallableStatementCallback; uncategorized SQLException for SQL [{call TESTSP(?, ?, ?, ?, ?)}]; SQL state [39004]; error code [-470]; DB2 SQL error: SQLCODE: -470, SQLSTATE: 39004, SQLERRMC: 1; nested exception is com.ibm.db2.jcc.b.SqlException: DB2 SQL error: SQLCODE: -470, SQLSTATE: 39004, SQLERRMC: 1    While debugging we identified the code was broke at JdbcTemplate.java at below place boolean retVal = cs.execute(); I see cs is getting referred to below weblogic wrapper class. weblogic.jdbc.wrapper.CallableStatement_com_ibm_db2_jcc_am_CallableStatement@2f  where as with spring 2.5 with same wrapper class we were able to execute our storedprocedures.   ---  **Reference URL:** http://www.coderanch.com/t/502856/Spring/migrating-Spring-Spring-SEC-version","closed","status: declined,","spring-projects-issues","2014-11-13T22:24:17Z","2019-01-12T16:34:35Z"
"","15997","Unclear error message on BeanPostProcessor returning null [SPR-11951]","**[Benoit Lacelle](https://jira.spring.io/secure/ViewProfile.jspa?name=blasd)** opened **[SPR-11951](https://jira.spring.io/browse/SPR-11951?redirect=false)** and commented  Hello,  If one has a BeanPostProcessor which returns null, then the laoding of the application contact would break with an exception not clear before knowing the actual issue.  Running the following test, :  ``` 	@Configuration 	public static class ConfigA { 		@Bean 		public String string() { 			return ""gogo""; 		} 	}  	@Configuration 	public static class ConfigB { 		@Bean 		public BeanPostProcessor beanPostProcessor() { 			return new BeanPostProcessor() {  				@Override 				public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { 					return null; 				}  				@Override 				public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { 					return null; 				}  			}; 		} 	}  	@Test 	public void testInvalidConfig() { 		try (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConfigA.class, ConfigB.class)) {  		} 	} ```  one would get  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'string' defined in class blasd.apex.server.config.spring.autonomy.TestApexSourceConfigAutonomy$ConfigA: factory-bean 'testApexSourceConfigAutonomy.ConfigA' returned null 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:372) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1094) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:989) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482) 	at org.springframework.context.annotation.AnnotationConfigApplicationContext.(AnnotationConfigApplicationContext.java:84) 	at blasd.apex.server.config.spring.autonomy.TestApexSourceConfigAutonomy.testInvalidConfig(TestApexSourceConfigAutonomy.java:118) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:606) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) ```  This seems trivial, but I got an equivalent issue while using Mockito to mock an interface, which I was unaware to be a BeanPostProcessor: Mockito returned null on postProcessBeforeInitialization, leading to this issue but the error message (and even debugging) took me a few hours to understand what was happening.  Instead of ""Error creating bean with name 'string' defined in class blasd.apex.server.config.spring.autonomy.TestApexSourceConfigAutonomy$ConfigA: factory-bean 'testApexSourceConfigAutonomy.ConfigA' returned null"", I would have expected something like ""BeanPostProcessor named ""beanPostProcessor"" returned null for 'testApexSourceConfigAutonomy.ConfigA'""  Thanks   ---  **Affects:** 3.2.9, 4.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/83a7deb59495ca61b2dc846e36dc78fb155d8bf3, https://github.com/spring-projects/spring-framework/commit/077c624b738ff4f3c88f40337eb514a1da06d8d5, https://github.com/spring-projects/spring-framework/commit/6c41cc354c1e6575ff5f56147c3fcbe5b52c2e9b  **Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-07-04T00:39:51Z","2014-07-08T00:21:29Z"
"","16707","Allow customizing the SockJsMessageCodec in WebSocket Java config and XML namespace [SPR-12091]","**[Ben Barron](https://jira.spring.io/secure/ViewProfile.jspa?name=cheetah)** opened **[SPR-12091](https://jira.spring.io/browse/SPR-12091?redirect=false)** and commented  Spring Messaging (Websockets) is intended to have the ability to work without Jackson on the classpath, however it is still required to deserialize/serialize the SockJs frames because, as far as I can tell, there isn't a way to easily call `TransportHandlingSockJsService.setMessageCodec()` and provide your own implementation based on whatever serializer you wish to use.  I believe the `.setMessageCodec()` method should be present on the `SockJsServiceRegistration` builder which in turn would set it upon creation of the `TransportHandlingSockJsService` in the `SockJsServiceRegistration.createSockJsService()` method.  This will allow you to do the following:  ``` @Override protected void registerStompEndpoints(StompEndpointRegistry registry) {      registry.addEndpoint(""/sockjs"").withSockJS().setMessageCodec(...); } ```    ---  **Affects:** 4.0.6, 4.0.7  **Reference URL:** http://stackoverflow.com/questions/25349589/spring-messaging-websockets-how-to-call-setmessagecodec  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2a0765e76dc83ad09664819fb78fa37f87c2c870","closed","type: enhancement,","spring-projects-issues","2014-08-18T01:27:37Z","2014-09-04T05:31:21Z"
"","16715","Scheduled execution (cron) should never execute ahead of exact scheduled time [SPR-12099]","**[Beau Grantham](https://jira.spring.io/secure/ViewProfile.jspa?name=beau)** opened **[SPR-12099](https://jira.spring.io/browse/SPR-12099?redirect=false)** and commented  Scheduled executions (using cron) occasionally execute ahead of the scheduled execution time. The is particularly a problem when the code depends some aspect of the date/time and the value is incorrect.  See the simplified example below along with log4j output. I would have expected the execution to be no earlier that 2014-08-19 00:00:00.  ``` @Scheduled(cron = ""0 0 0 * * *"") public void dailyReports() {      Date today = new Date();           SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd"");           logger.info(""Executing job for "" + sdf.format(today));           // [...]           return; } ```  ``` 2014-08-18 23:59:59,801 [pool-7-thread-25] INFO [...] Executing job for 2014-08-18 ```    ---  **Affects:** 4.0.5","closed","status: bulk-closed,","spring-projects-issues","2014-08-19T10:08:16Z","2019-01-12T02:28:33Z"
"","16397","Asynchronous method execution is always invoked before bean validation [SPR-11775]","**[baymon](https://jira.spring.io/secure/ViewProfile.jspa?name=baymon)** opened **[SPR-11775](https://jira.spring.io/browse/SPR-11775?redirect=false)** and commented  I want to use `@validated` on a `@Service` bean in combination with `@Async` methods. But the `order` property of my `MethodValidationPostProcessor` has no effect to the execution order of the validation interceptor. So a validation exception is always thrown within the new thread and never given to the caller.  I don't see any (working) way to configure the execution order of the method interceptors.  ---  **Affects:** 4.0.4  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/77  **Issue Links:** - #13635 Spring `@Async` should have some way of specifying UncaughtExceptionHandler - #19878 MethodValidationPostProcessor not respecting aspect order  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cee53e9330b1677921b466e255751dd28d0b4207  0 votes, 5 watchers","open","type: enhancement,","spring-projects-issues","2014-05-09T09:41:45Z","2019-01-13T06:54:05Z"
"","16404","MemorySafeUndeclaredThrowableStrategy class not found [SPR-11782]","**[Batbayar Bazarragchaa](https://jira.spring.io/secure/ViewProfile.jspa?name=digz6666)** opened **[SPR-11782](https://jira.spring.io/browse/SPR-11782?redirect=false)** and commented  I'm having problem org.springframework.cglib.transform.impl.MemorySafeUndeclaredThrowableStrategy class not found exception when I enable following configuration:   or  I found this class in spring 4.0.1, but cannot find in later versions. What happened to this class? How to resolve my error?  ---  **Affects:** 4.0.2, 4.0.3, 4.0.4  **Issue Links:** - #16025 aop:scoped-proxy may fail with LinkageError: loader attempted duplicate class definition for name  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/297e4eec36a8eedebc4eed30ad23aaca4952299b","closed","in: core,","spring-projects-issues","2014-05-13T21:51:04Z","2019-01-11T21:14:26Z"
"","17028","Improve thread safety in Spring JUnit integration [SPR-12421]","**[Bastian Voigt](https://jira.spring.io/secure/ViewProfile.jspa?name=batzee)** opened **[SPR-12421](https://jira.spring.io/browse/SPR-12421?redirect=false)** and commented  #### Status Quo  When using the maven surefire setting `parallel=methods`, JUnit still creates only one runner instance per test class, i.e. one runner instance is used by multiple threads in parallel.  `SpringJUnit4ClassRunner` uses a single `TestContextManager` which stores the current `TestContext` in an instance field.  #### Proposal  `SpringJUnit4ClassRunner` should use a `ThreadLocal` instead of a single `TestContextManager` instance field.  #### Deliverables  1. Improve thread safety for the `SpringRunner` for JUnit 4. 2. Improve thread safety for the `SpringClassRule` and `SpringMethodRule` for JUnit 4. 3. Improve thread safety for the `SpringExtension` for JUnit Jupiter (in JUnit 5).    - Partially addressed in JUnit Jupiter in https://github.com/junit-team/junit5/issues/478  ---  **Affects:** 3.0 GA  **Reference URL:** http://stackoverflow.com/questions/26882936/why-does-springjunit4classrunner-not-work-with-surefire-parallel-methods  **Issue Links:** - #10532 Allow for concurrent test execution in the TestContext framework (_**""duplicates""**_)  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-11-12T01:29:44Z","2019-01-11T19:30:08Z"
"","16949","Provide bean creation time callback support in Groovy configuration script [SPR-12344]","**[Baruch Sadogursky](https://jira.spring.io/secure/ViewProfile.jspa?name=jbaruch)** opened **[SPR-12344](https://jira.spring.io/browse/SPR-12344?redirect=false)** and commented  As bizarre as it sounds, groovy script has no ability to code bean creation, since the code written in groovy script affects beanDefinition creation, not beans creation. Passing creation code in closure and calling this closure during bean creation phase can remove the need in FactoryBeans.   ---  **Affects:** 4.1 GA  2 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-10-18T03:10:53Z","2019-01-12T00:18:35Z"
"","16906","Add support for dynamic languages refreshable beans in @Configuration classes [SPR-12300]","**[Baruch Sadogursky](https://jira.spring.io/secure/ViewProfile.jspa?name=jbaruch)** opened **[SPR-12300](https://jira.spring.io/browse/SPR-12300?redirect=false)** and commented  As suggested by Artem, it makes sense to add `@EnableScripting` and `@ScriptSource`(refreshDelay = 1000) on the Resource `@Bean` method.  ---  **Affects:** 4.1 GA  **Reference URL:** http://stackoverflow.com/questions/26208020/using-spring-dynamic-languages-support-from-java-configuration  **Issue Links:** - #14886 Refreshing annotated Groovy controllers cause ClassCastException - #9888 ScriptFactory for JSR-223 - #12691 Unable to define a scripted bean as an inner bean of another bean - [INTEXT-130](https://jira.spring.io/browse/INTEXT-130) Provide support for dynamic scripts (Groovy, JRuby etc.) within the flow definition  8 votes, 12 watchers","open","type: enhancement,","spring-projects-issues","2014-10-06T04:18:00Z","2019-01-14T05:14:46Z"
"","16700","HierarchicalUriComponents doesn't encode semicolon in query parameters [SPR-12084]","**[Balakrishnan](https://jira.spring.io/secure/ViewProfile.jspa?name=balatbn)** opened **[SPR-12084](https://jira.spring.io/browse/SPR-12084?redirect=false)** and commented  If semi-colon is sent as part of parameter value while making calls using RestTemplate(or AsyncRestTemplate), they are not encoded. However, W3C recommends allowing either ; or & as parameter separator and our server is treating "";"" as parameter separator instead of parameter value. Because of this, query parsing fails on the server side.  http://www.w3.org/TR/html401/appendix/notes.html#h-B.2.2  Can we encode semi-colon also, if it is available in query parameter.   ---  **Affects:** 4.0.6","closed","type: enhancement,","spring-projects-issues","2014-08-14T23:05:17Z","2018-12-13T14:25:29Z"
"","16443","Allow @Rollback at test class level [SPR-11823]","**[Axel Fontaine](https://jira.spring.io/secure/ViewProfile.jspa?name=axel.fontaine)** opened **[SPR-11823](https://jira.spring.io/browse/SPR-11823?redirect=false)** and commented  Like `@Transactional`, it would be nice to be able to use `@Rollback` at the level of the test class, instead of having to annotate all individual test methods within that class.   ---  **Affects:** 4.0.3","closed","type: enhancement,","spring-projects-issues","2014-05-27T05:50:15Z","2014-05-27T06:14:22Z"
"","16932","SqlServerMaxValueIncrementer may cause table lock [SPR-12327]","**[Artyom Solovyov](https://jira.spring.io/secure/ViewProfile.jspa?name=mobichel)** opened **[SPR-12327](https://jira.spring.io/browse/SPR-12327?redirect=false)** and commented  I use SqlServerMaxValueIncrementer.java from Spring for interacting with MSSQL sequences.  Looks like SqlServerMaxValueIncrementer could lead to db lock, when someone else try to insert/delete into the same sequence.  The problem is in < which locks the whole table and doesn't allow even simple select against it and another delete/insert.  To fix this need to update DELETE to use IN instead of <   ---  **Affects:** 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fb92934a7b16024ad2b802f27bde155f388e7821","closed","type: enhancement,","spring-projects-issues","2014-10-13T07:21:07Z","2014-11-17T06:42:38Z"
"","16820","DirectFieldAccessor should support collections [SPR-12206]","**[Artyom Dmitriev](https://jira.spring.io/secure/ViewProfile.jspa?name=tomdmitriev)** opened **[SPR-12206](https://jira.spring.io/browse/SPR-12206?redirect=false)** and commented  I encountered the issue while trying to use DirectFieldAccessor along with JSR-303 Validation. Say, we have class Bar:  ``` public class Bar {     @NotNull     private String value; } ```  This code would work fine:  ``` public class Foo {     @Valid     @NotNull     private Bar bar; } ```  whereas the code below would not work and I would get "" java.lang.IllegalStateException: JSR-303 validated property 'bars\[0\].value' does not have a corresponding accessor for Spring data binding..."":  ``` public class Foo {     @Valid     @NotNull     private List bars; } ```  ---  **Affects:** 4.1 GA  **Issue Links:** - #17402 Make initDirectFieldAccess work with array, List and Map  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3d86f15a847d4567c3b08b21a21500398a394e31","closed","type: enhancement,","spring-projects-issues","2014-09-17T00:03:27Z","2019-01-11T17:27:28Z"
"","17063","Support AND operator in @Profile annotation [SPR-12458]","**[Artem](https://jira.spring.io/secure/ViewProfile.jspa?name=artemgolubev)** opened **[SPR-12458](https://jira.spring.io/browse/SPR-12458?redirect=false)** and commented  As of v4.1.2 [@Profile annotation](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Profile.html) does not support AND operator, being OR by definition.  This significantly limits it's applicability in our project since we have profiles: PROD, TEST, CONFIG1, CONFIG2, etc. And we want to have beans autowired based in PROD && CONFIG1 style to be able to setup config1 in production and TEST && CONFIG1 to setup same profile for test.  The good example would be config being MQENABLED profile. Which in case of production will be set on `@Configuration` class with RabbitTemplate bean configuration, but for test we want to have our own implementation of AmqpTemplate (instead of RabbitTemplate).  ---  **Affects:** 4.1.2  **Issue Links:** - #20193 `@Profile` should be able to define profiles to accomplish the 'and' scenario (_**""is duplicated by""**_) - #21500 Improve testability of new Profiles support - #21010 Profile activation: not operator does not work consistently - #22138 `@Profile` mishandles ""not"" operand mixed with ""&"" - #18511 Support inclusive profiles  18 votes, 30 watchers","closed","has: votes-jira,","spring-projects-issues","2014-11-20T22:19:28Z","2019-01-13T05:43:46Z"
"","17130","GenericTypeResolver should be able to introspect generic arguments from lambdas [SPR-12525]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-12525](https://jira.spring.io/browse/SPR-12525?redirect=false)** and commented  See the external linked discussion. The original issue is here: http://stackoverflow.com/questions/23863716/java-how-to-resolve-generic-type-of-lambda-parameter and its related SO question. I can confirm that using that `typetools` in the Spring Integration Java DSL I can avoid an extra type parameter. From this:  ```java .handle(Integer.class, (p, h) -> p * 2) ```  to this:  ```java .handle((p, h) -> p * 2) ```  This fix allow us to fix other Lambda issues, e.g. #15303  ---  **Reference URL:** https://github.com/jhalterman/typetools/issues/4  **Issue Links:** - #18273 ResolvableType should support resolving lambda types (_**""duplicates""**_) - #15303 Inferring an ApplicationListener's event type from a lambda or method reference - #16427 `@Aspect` aspect not correctly applied to Java 8 lambda-defined `@Beans` - #18681 Wrong detection of event type on ApplicationListener when using lambdas (ClassCast Exception)  0 votes, 8 watchers","open","type: enhancement,","spring-projects-issues","2014-12-09T02:00:01Z","2019-06-12T11:50:24Z"
"","17011","WebMvcStompEndpointRegistry registers the same StompSubProtocolHandler to the SubProtocolWebSocketHandler several times [SPR-12403]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-12403](https://jira.spring.io/browse/SPR-12403?redirect=false)** and commented  The issue happens when we register several `Stomp endpoints`:  ```java @Override public void registerStompEndpoints(final StompEndpointRegistry registry) {     registry.addEndpoint(""/tyresearch"").withSockJS();     registry.addEndpoint(""/tyresearch/changeConfiguration"").withSockJS();     registry.addEndpoint(""/tyresearch/detailView"").withSockJS(); } ```    ---  **Affects:** 4.1.1  **Reference URL:** http://stackoverflow.com/questions/26677949/spring-4-1-1-websocket-stomp-subprotocol-error  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1fff631daa65c228a1e2caeb387d1b8cd6b6e2e8","closed","type: bug,","spring-projects-issues","2014-10-31T11:13:21Z","2014-11-17T06:42:35Z"
"","16687","Make @Payload as ElementType.METHOD too [SPR-12071]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-12071](https://jira.spring.io/browse/SPR-12071?redirect=false)** and commented  Since Spring Integration is based on Spring Messaging there is no reason to have duplications of the same annotations. `@Header` can be supported as is, but `@Payload` in Spring Integration can be configured on method level to be applied for the return value in case of `@Publisher`, or for ``'s interface methods without arguments.  We are going to deprecate those annotations in the SI and just rely on these Messaging annotations, but to have more smooth migration we have to avoid breaking changes.  That's why we need this improvement now.  Thanks in advance  ---  **Issue Links:** - [INT-3492](https://jira.spring.io/browse/INT-3492) Deprecate `@Payload` and `@Header` and rely on similar annotations from the Spring Messaging (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e0103095301c580643d602ab6cd25d37b51d22ca","closed","type: enhancement,","spring-projects-issues","2014-08-07T00:27:41Z","2019-01-13T05:47:17Z"
"","16679","Add more HttpHeaders constants for standard HTTP headers [SPR-12063]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-12063](https://jira.spring.io/browse/SPR-12063?redirect=false)** and commented  See the linked issue ([INT-3488](https://jira.spring.io/browse/INT-3488)) and its PR  ---  **Issue Links:** - [INT-3488](https://jira.spring.io/browse/INT-3488) HTTP Inbound Gateway headers not mapping Content-Disposition (_**""is depended on by""**_) - #16371 Make constants in HttpHeaders public  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ebc5fea77b45efb3bbf9baa4802ec3f6f0211941","closed","type: enhancement,","spring-projects-issues","2014-08-04T05:37:49Z","2019-01-11T18:18:13Z"
"","16661","SpEL Compiler: NPE on Indexer compilation, when is used map accessor [SPR-12045]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-12045](https://jira.spring.io/browse/SPR-12045?redirect=false)** and commented  The expression looks like `headers[command]`, `#root` is the same `org.springframework.messaging.Message` The StackTrace:  ``` Caused by: java.lang.NullPointerException 	at org.springframework.expression.spel.ast.PropertyOrFieldReference.generateCode(PropertyOrFieldReference.java:337) 	at org.springframework.expression.spel.ast.Indexer.generateCode(Indexer.java:264) 	at org.springframework.expression.spel.ast.CompoundExpression.generateCode(CompoundExpression.java:133) 	at org.springframework.expression.spel.standard.SpelCompiler.createExpressionClass(SpelCompiler.java:154) 	at org.springframework.expression.spel.standard.SpelCompiler.compile(SpelCompiler.java:104) 	at org.springframework.expression.spel.standard.SpelExpression.compileExpression(SpelExpression.java:464) 	at org.springframework.expression.spel.standard.SpelExpression.checkCompile(SpelExpression.java:434) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:328) ```  Changing expression to this `headers['command']` fix the issue.  Thanks   ---  **Affects:** 4.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/813cc3b339fb073e578bc99b2d447bf9be9e45ce","closed","in: core,","spring-projects-issues","2014-07-30T01:08:07Z","2014-08-15T01:52:44Z"
"","16657","SpEL Compiler: Make OpModulus compilable  [SPR-12041]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-12041](https://jira.spring.io/browse/SPR-12041?redirect=false)** and commented  The tipical case from Spring Integration perspective:  ```xml  ```  In addition consider to make other `SpelNodeImpl` compilable. E.g. one more tipical case:  ```xml  ```    ---  **Affects:** 4.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d30174897d13b869fd7908b17457164724173738","closed","type: enhancement,","spring-projects-issues","2014-07-28T08:53:43Z","2014-08-15T01:52:47Z"
"","16656","SpEL Compiler produces incompatible code with method generic returns [SPR-12040]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-12040](https://jira.spring.io/browse/SPR-12040?redirect=false)** and commented  The simple test-case to reproduce:  ```java @Test public void testSpelCompiler () {    SpelParserConfiguration configuration =          new SpelParserConfiguration(SpelCompilerMode.IMMEDIATE, this.getClass().getClassLoader());     Expression expression = new SpelExpressionParser(configuration)          .parseExpression(""payload / 2"");     expression.getValue(new GenericMessage(4));    expression.getValue(new GenericMessage(6));  } ```    ---  **Affects:** 4.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/59080ff2b21e0e442238ae7a861351b9df76ba0f","closed","in: core,","spring-projects-issues","2014-07-28T08:42:24Z","2014-08-15T01:52:42Z"
"","16651","SpEL Collection Selection: ""selectionExpression"" with method invocation pushes root object as active context instead of current item [SPR-12035]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-12035](https://jira.spring.io/browse/SPR-12035?redirect=false)** and commented  See reference URL. The root of the issue is here `MethodReference`:  ```java // Make the root object the active context again for evaluating the parameter expressions 			try { 				state.pushActiveContextObject(state.getRootContextObject()); 				arguments[i] = this.children[i].getValueInternal(state).getValue(); 			} ```  Is it intentional? Or can we overcome it somehow?  Thanks, Artem  ---  **Reference URL:** http://stackoverflow.com/questions/24556122/spel-spring-expression-language-collection-selection-calling-methods-functions  **Issue Links:** - #15050 Collection selection and the use of #this - #17647 In SPEL projection expression,  #this as the same value as #root  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/91ed5b6b8c2d045c061f38ba20aec24659009050","closed","in: core,","spring-projects-issues","2014-07-26T11:43:23Z","2019-01-11T18:19:47Z"
"","16646","SockJsClient doesn't propagate ""subProtocols"" and ""extensions"" to the handshake request [SPR-12030]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-12030](https://jira.spring.io/browse/SPR-12030?redirect=false)** and commented  Since `""Sec-WebSocket-Protocol""` and `""Sec-WebSocket-Extensions""` headers are filtered from `handshakeHeaders` in the `AbstractWebSocketClient.doHandshake`, the concrete `AbstractWebSocketClient` should take care about about those headers according to the target implementation.  As a solution `SockJsClient` has to ""repopulate"" those headers to the `handshakeHeaders` for further handshake fallback chain.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/41cdc92fc383934623f14fd144390d16b1ed4a8f","closed","type: bug,","spring-projects-issues","2014-07-24T12:04:47Z","2014-08-15T01:52:40Z"
"","16620","Non-stable BeanCurrentlyInCreationException with wrong Java config [SPR-12004]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-12004](https://jira.spring.io/browse/SPR-12004?redirect=false)** and commented  See the linked issue for more info.  ---  **Issue Links:** - #16743 Autowire bean in `@Configuration` class itself - [AMQP-412](https://jira.spring.io/browse/AMQP-412) Error creating RabbitMQ Connection Factory - #16634 Spring may invoke `@Bean` methods too early in case of a circular reference","closed","type: bug,","spring-projects-issues","2014-07-17T10:28:53Z","2019-01-13T05:47:47Z"
"","16529","@Async isn't applied, if the interface doesn't have concrete implementation [SPR-11910]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-11910](https://jira.spring.io/browse/SPR-11910?redirect=false)** and commented  If we add `@Async` fo the interface method, but don't provide an implementation for the interface, we and end up with issue, when `@Async` can't be applied and `java.lang.IllegalArgumentException: Class must not be null` is thrown.  Can't we use the same `AutoProxyRegistrar` technique for `@Async` as it is for `@Transactional`? I mean build a new Proxy independently of target bean state.  I understand that `AsyncExecutionAspectSupport` should be the first one in the chain, but it looks like we have a limitation on the matter, if we don't provide a real implementation for our annotated interface.  The Spring Integration infrastructure just creates proxy fo the provided interface and that's all.  See linked issue [INT-3448](https://jira.spring.io/browse/INT-3448)  ---  **Affects:** 4.0.5  **Issue Links:** - [INT-3448](https://jira.spring.io/browse/INT-3448) Gateway proxy for `@Async` method throws NullPointerException (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2014-06-25T02:48:36Z","2019-01-13T05:48:22Z"
"","16478","BeanFactory.getBeansOfType(Class type) causes BeanNotOfRequiredTypeException, when we request by class, but bean is a Proxy [SPR-11859]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-11859](https://jira.spring.io/browse/SPR-11859?redirect=false)** and commented  I have a code:  `this.beanFactory.getBeansOfType(AopUtils.getTargetClass(component), false, false)`  With our `@EnableJmx` many of our beans are proxying and looks like we can't get those beans from `BeanFactory` by class type - only by interface.  It looks like (my real case):  ``` Caused by: org.springframework.beans.factory.BeanNotOfRequiredTypeException: Bean named 'errorChannel' must be of type [org.springframework.integration.channel.PublishSubscribeChannel], but was actually of type [com.sun.proxy.$Proxy54]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:376)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:470) ```  That's because the `TypeConverterDelegate#convertIfNecessary` uses `TypeDescriptor.forObject(newValue)`, which, in turn does this:  ```java public static TypeDescriptor forObject(Object source) {         return (source != null ? valueOf(source.getClass()) : null); } ```  And here it just return the `com.sun.proxy.$Proxy*` type.  I'd say that it looks like it won't hurt to do this here:  ```java public static TypeDescriptor forObject(Object source) {         return (source != null ? valueOf(ClassUtils.getUserClass(source)) : null); } ```  Otherwise we lose some useful functionality from `BeanFactory` when our beans are proxy.   ---  **Affects:** 4.0.5  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-06-09T08:54:59Z","2019-01-12T02:29:51Z"
"","16405","SpEL should not restrict 'NEW' identificator as 'new' token for constructor [SPR-11783]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-11783](https://jira.spring.io/browse/SPR-11783?redirect=false)** and commented  See SO post.  It looks OK for other literal tokens as operators for SpEL, but `NEW` should not be interpreted as `new` operator.   ---  **Affects:** 3.2.8, 4.0.4  **Reference URL:** http://stackoverflow.com/questions/23630933/spelparseexception-on-setting-key-of-messageheader-to-new-in-spring-integratio  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c382b6f05940969ac9161ed0368e12e69df3cd58","closed","type: enhancement,","spring-projects-issues","2014-05-13T22:45:57Z","2015-05-26T01:15:21Z"
"","16756","InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation called with wrong beanClass for bean declared on JavaConfig [SPR-12142]","**[Arrault Fabien](https://jira.spring.io/secure/ViewProfile.jspa?name=farrault)** opened **[SPR-12142](https://jira.spring.io/browse/SPR-12142?redirect=false)** and commented  When a bean is created with JavaConfig with a `@Bean` method WITH the static modifier (there is another issue without the static modifier : #16754), the method postProcessBeforeInstantiation of InstantiationAwareBeanPostProcessor beans is called with the wrong beanClass parameter : This parameter is populated with the beanClass of the `@Configuration` class containing the `@Bean` method instead of the target beanClass of the bean being about to be created.  See testcase attached  This method is correctly called when the bean is declared in an XML File.  This sometimes causes troubles in edge cases when using of LazyInitTargetSourceCreator on JavaConfig (see #15140)  ---  **Affects:** 4.0.6  **Attachments:** - [PostProcessCalledWithWrongClass.java](https://jira.spring.io/secure/attachment/22198/PostProcessCalledWithWrongClass.java) (_3.03 kB_)  **Issue Links:** - #15140 LazyInitTargetSourceCreator  does not work in Java-based configuration (_**""is depended on by""**_) - #16754 InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation not called for bean declared on JavaConfig","closed","in: core,","spring-projects-issues","2014-09-01T14:33:10Z","2019-01-11T17:21:50Z"
"","16754","InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation not called for bean declared on JavaConfig [SPR-12140]","**[Arrault Fabien](https://jira.spring.io/secure/ViewProfile.jspa?name=farrault)** opened **[SPR-12140](https://jira.spring.io/browse/SPR-12140?redirect=false)** and commented  When a bean is created with JavaConfig : with a `@Bean` method without the static modifier (there is another issue with the static modifier : #16756), the method postProcessBeforeInstantiation of InstantiationAwareBeanPostProcessor beans is not called.  See testcase attached  This method is correctly called when the bean is declared in an XML File.  This is one the causes of the troubles of the use of LazyInitTargetSourceCreator on JavaConfig (see #15140)  ---  **Affects:** 4.0.6  **Attachments:** - [PostProcessNotCalled.java](https://jira.spring.io/secure/attachment/22197/PostProcessNotCalled.java) (_3.00 kB_)  **Issue Links:** - #15140 LazyInitTargetSourceCreator  does not work in Java-based configuration (_**""is depended on by""**_) - #16756 InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation called with wrong beanClass for bean declared on JavaConfig  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b64f680f199108fc83ca7a80afefe0c95f7ba803","closed","in: core,","spring-projects-issues","2014-09-01T14:28:43Z","2019-01-11T17:21:42Z"
"","16432","a Uri Value is incorrectly trimmed if it contains a space ' ' or ' %20' in the end [SPR-11812]","**[Arpit Malhotra](https://jira.spring.io/secure/ViewProfile.jspa?name=arpit_11)** opened **[SPR-11812](https://jira.spring.io/browse/SPR-11812?redirect=false)** and commented  Suppose we have the controller request mapping as the following  ```java @RequestMapping(value = ""/my/{vari}"", method = RequestMethod.GET) @ResponseBody public String getVari(@PathVariable String vari) {      System.out.println(""vari="" + vari); return vari;  } ```  If a request such as `""http://localhost/myapp/my/abc /""` or even `http://localhost/myapp/my/abc%20/""` is submitted, the actually value of 'vari' obtained by Spring API only returns 'abc' or 'abc'  It trims the space for  no reason . See PathVariableMethodArgumentResolver resolveName method   ---  **Affects:** 3.1.3  1 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2014-05-21T12:00:47Z","2019-01-12T16:34:53Z"
"","16967","Tiles 2.x: TilesConfigurer NPE when no definitions found [SPR-12362]","**[Arnaud Kleinveld](https://jira.spring.io/secure/ViewProfile.jspa?name=arnaudkleinveld)** opened **[SPR-12362](https://jira.spring.io/browse/SPR-12362?redirect=false)** and commented  We had two lines in the webmvc-config.xml for the TilesConfigurer      /WEB-INF/views/**/views.xml     /WEB-INF/flows/**/views.xml  Then when we removed the last views.xml under the /WEB-INF/flows tree the application crashes at startup with an NPE caused by line 423 of the TilesConfigurer. See error-report with stack-trace attached.   ---  **Affects:** 3.2.11  **Attachments:** - [Pivotal tc Runtime 3.0.0.RELEASE 8.0.9.B.RELEASE - Error report.html](https://jira.spring.io/secure/attachment/22334/Pivotal+tc+Runtime+3.0.0.RELEASE+8.0.9.B.RELEASE+-+Error+report.html) (_8.82 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c8b8dc5f97983572adc1387cdea0aa83fe9c1ccd, https://github.com/spring-projects/spring-framework/commit/d53b67f5cb1f4c915bd1b94b4341f29718f45b1b, https://github.com/spring-projects/spring-framework/commit/cb860364dd94c43dd05af4137e609f6e95d5ada2  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)","closed","type: bug,","spring-projects-issues","2014-10-22T10:25:04Z","2014-11-10T23:12:25Z"
"","16501","ReflectionUtils slow down application startup on WebSphere [SPR-11882]","**[Anton Zukovskij](https://jira.spring.io/secure/ViewProfile.jspa?name=jonny23)** opened **[SPR-11882](https://jira.spring.io/browse/SPR-11882?redirect=false)** and commented  On WebSphere application server (multi-node config) spring context initialization is very slow, our application has big classpath that causes classloader to be quite slow(see WAS_startup.png). After adding cache to ReflectionUtils.findMethod and AnnotationUtils.findAnnotation (see patch.patch) spring context seems to initialize a lot faster (see ReflectionUtils.png and AnnotationUtils.png).  ---  **Affects:** 3.1.1, 3.2.4  **Attachments:** - [AnnotationUtils.png](https://jira.spring.io/secure/attachment/22069/AnnotationUtils.png) (_16.97 kB_) - [patch.patch](https://jira.spring.io/secure/attachment/22070/patch.patch) (_4.70 kB_) - [ReflectionUtils.png](https://jira.spring.io/secure/attachment/22068/ReflectionUtils.png) (_22.81 kB_) - [WAS_startup.png](https://jira.spring.io/secure/attachment/22071/WAS_startup.png) (_56.53 kB_)  **Issue Links:** - #12286 Major performance slowdown in AnnotationUtils.findAnnotation - #16494 Performance regression for custom autowireBean calls with many properties - #17476 AnnotationUtils should use threadsafe ConcurrentMap (contention) - #17419 Make ReflectionUtils.doWithMethods work on Java 8 default interface methods - #21216 Comprehensively cache annotated methods for interfaces and superclasses - #18357 ReflectionUtils cache uses up a fairly big chunk of heap even - #21271 Avoid repeated superclass introspection in AnnotationUtils.findAnnotation - #14830 Improve performance of ReflectionUtils#getUniqueDeclaredMethods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0298a1f093c0d11e6cf1fa034912dd1949dcf5c5, https://github.com/spring-projects/spring-framework/commit/5f695a47dbc2be055841bdcc721e61383824a58f, https://github.com/spring-projects/spring-framework/commit/682a910bb6ce52da12109433cba27db7aeba37fe  **Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-06-17T15:07:41Z","2019-01-11T22:15:26Z"
"","16801","Java 8 bridge method handling can lead to false positive detection of autowired annotations [SPR-12187]","**[Anton Ermolenko](https://jira.spring.io/secure/ViewProfile.jspa?name=dikeert)** opened **[SPR-12187](https://jira.spring.io/browse/SPR-12187?redirect=false)** and commented  Not actually false, but due to https://bugs.openjdk.java.net/browse/JDK-6695379 spring tries in inject dependencies into bridge methods in Java 8.  Test for annotations - http://pastebin.com/FRVmNmm1 Results - http://pastebin.com/k9zNpTh4  Due to this spring tries to inject dependencies into bridge methods.  Test app - for Spring - https://gist.github.com/DiKeert/1144549572771a1e3f36 - works great on Java 7, fails on Java 8.  ---  **Affects:** 3.2.11, 4.0.7, 4.1 GA  **Reference URL:** https://gist.github.com/DiKeert/1144549572771a1e3f36  **Issue Links:** - #13302 Bridged method detection leads to false positive detection of autowired annotations - #17053 Java 8 introspection causes breakage with FreeMarker Configuration bean - #17096 `@Resource` injection broken under spring-framework > 4.1.0 - #17101 Consistent bridge method handling in annotation post-processors  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ec3967a6c7e071d17cf1a65e7a9892214e81ed36, https://github.com/spring-projects/spring-framework/commit/f4219ca06bbd1c324567ab9e74d0d18693359810, https://github.com/spring-projects/spring-framework/commit/354c3e03e96f768400e963df1d09efc3e69105fb, https://github.com/spring-projects/spring-framework/commit/29abca5399c4c9deb09cea014ab66d87fbee2f56  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.13](https://github.com/spring-projects/spring-framework/milestone/101?closed=1)","closed","in: core,","spring-projects-issues","2014-09-12T07:23:10Z","2019-01-13T05:45:04Z"
"","17137","Support for apache commons-pool2 [SPR-12532]","**[Anton Antonov](https://jira.spring.io/secure/ViewProfile.jspa?name=aantonov)** opened **[SPR-12532](https://jira.spring.io/browse/SPR-12532?redirect=false)** and commented  I've tried to upgrade from commons-pool version 1.6 to commons-pool2 version 2.2 and I got the following exception:  ``` Caused by: java.lang.LinkageError: Failed to link org/springframework/aop/target/CommonsPoolTargetSource (Module ""deployment.edu-first.war:main"" from Service Module Loader) 	at org.jboss.modules.ModuleClassLoader.defineClass(ModuleClassLoader.java:428) [jboss-modules.jar:1.3.0.Final-redhat-2] 	at org.jboss.modules.ModuleClassLoader.loadClassLocal(ModuleClassLoader.java:261) [jboss-modules.jar:1.3.0.Final-redhat-2] 	at org.jboss.modules.ModuleClassLoader$1.loadClassLocal(ModuleClassLoader.java:76) [jboss-modules.jar:1.3.0.Final-redhat-2] 	at org.jboss.modules.Module.loadModuleClass(Module.java:548) [jboss-modules.jar:1.3.0.Final-redhat-2] 	at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:189) [jboss-modules.jar:1.3.0.Final-redhat-2] 	at org.jboss.modules.ConcurrentClassLoader.performLoadClassUnchecked(ConcurrentClassLoader.java:443) [jboss-modules.jar:1.3.0.Final-redhat-2] 	at org.jboss.modules.ConcurrentClassLoader.performLoadClassChecked(ConcurrentClassLoader.java:431) [jboss-modules.jar:1.3.0.Final-redhat-2] 	at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:373) [jboss-modules.jar:1.3.0.Final-redhat-2] 	at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:118) [jboss-modules.jar:1.3.0.Final-redhat-2] 	at org.springframework.util.ClassUtils.forName(ClassUtils.java:247) [spring-core-4.0.4.RELEASE.jar:4.0.4.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:395) [spring-beans-4.0.4.RELEASE.jar:4.0.4.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1348) [spring-beans-4.0.4.RELEASE.jar:4.0.4.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1319) [spring-beans-4.0.4.RELEASE.jar:4.0.4.RELEASE] 	... 36 more Caused by: java.lang.NoClassDefFoundError: org/apache/commons/pool/PoolableObjectFactory 	at java.lang.ClassLoader.defineClass1(Native Method) [rt.jar:1.7.0_21] 	at java.lang.ClassLoader.defineClass(ClassLoader.java:791) [rt.jar:1.7.0_21] 	at org.jboss.modules.ModuleClassLoader.doDefineOrLoadClass(ModuleClassLoader.java:345) [jboss-modules.jar:1.3.0.Final-redhat-2] 	at org.jboss.modules.ModuleClassLoader.defineClass(ModuleClassLoader.java:423) [jboss-modules.jar:1.3.0.Final-redhat-2] 	... 48 more Caused by: java.lang.ClassNotFoundException: org.apache.commons.pool.PoolableObjectFactory from [Module ""deployment.edu-first.war:main"" from Service Module Loader] 	at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:197) [jboss-modules.jar:1.3.0.Final-redhat-2] 	at org.jboss.modules.ConcurrentClassLoader.performLoadClassUnchecked(ConcurrentClassLoader.java:443) [jboss-modules.jar:1.3.0.Final-redhat-2] 	at org.jboss.modules.ConcurrentClassLoader.performLoadClassChecked(ConcurrentClassLoader.java:431) [jboss-modules.jar:1.3.0.Final-redhat-2] 	at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:373) [jboss-modules.jar:1.3.0.Final-redhat-2] 	at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:118) [jboss-modules.jar:1.3.0.Final-redhat-2] 	... 52 more ```    ---  **Affects:** 4.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5e43f9b88fbe266450fe00fbdb6394b688d67841, https://github.com/spring-projects/spring-framework/commit/e8441edcb7d0c59dbedc3f6994b989d02a9970bf, https://github.com/spring-projects/spring-framework/commit/aabf73dea450ea97f50292452409496424cfe535","closed","type: enhancement,","spring-projects-issues","2014-12-10T09:02:36Z","2015-05-26T01:14:53Z"
"","16854","INSERT SELECT of large CLOB causes ORA-01461 on setString [SPR-12240]","**[Anthony Yeracars](https://jira.spring.io/secure/ViewProfile.jspa?name=amcy)** opened **[SPR-12240](https://jira.spring.io/browse/SPR-12240?redirect=false)** and commented  * INSERT INTO table (col1, col2) * SELECT ?, ? * FROM DUAL * fails with ORA-01461 when col1 or col2 is an NCLOB and the associated placeholder parameter is of length > 4000 *  * while: * INSERT INTO table (col1, col2) * VALUES (?, ?) * works.  However, it is unclear that knowing that INSERT VALUES works is relevant. *  * (Note: the actual use case is as follows, which means that using INSERT VALUES as a workaround is not satisfactory:) * INSERT INTO table (col1, col2) * SELECT ?, ? * FROM DUAL * WHERE NOT EXISTS (SELECT * FROM table WHERE col1 = ?) * (in this case, col1 is an ID column, as per this test case) *  * The bug is present in StatementCreatorUtils.setValue(), where Spring JDBC assumes that a CLOB that is small enough can be established with a call to setString() (or, * if too large, with a call to setObject()).  The correct behavior, as demonstrated below, is to call setClob(new StringReader(inValue)) (or, if an NCLOB, then * setNClob()---in fact, for our use case, we use only NCLOBs).  This is consistent with Oracle documentation * (see http://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html), which states, for setString(), the following: ""Sets the designated parameter to the * given Java String value. The driver converts this to an SQL VARCHAR or LONGVARCHAR value (depending on the argument's size relative to the driver's limits on VARCHAR * values) when it sends it to the database.""  An argument could be made that Oracle's driver should undertake this conversion automatically (i.e., change the String to a * StringReader or equivalent), although that is a harder road than a Spring update, not to mention that the Oracle's PreparedStatement implementation does not actually * have enough context to make this determination. *  * This test case uses Java 7 and Spring 3.1.0; code inspection shows that the same bug is present in Spring 4.1.0. * Fails on Oracle drivers 11.2.0.2, 11.2.0.3, 11.2.0.4; server versions 10, 11.1, 11.2  ---  **Affects:** 4.1 GA  **Attachments:** - [ORA01461.java](https://jira.spring.io/secure/attachment/22215/ORA01461.java) (_9.43 kB_)  **Issue Links:** - #16555 Support for Types.NCLOB in SqlLobValue to simplify use with NamedParameterJdbcTemplate. - #16870 PreparedStatement#setBlob(int, InputStream) is not supported in DefaultLobCreator - #18688 Java boolean is not handled correctly when used with Oracle JDBC driver - #18398 Oracle 12c JDBC driver throws inconsistent exception from getParameterType (affecting setNull calls)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/390880448671077311aaa34f75182c4bf55b57c2","closed","type: enhancement,","spring-projects-issues","2014-09-23T08:41:53Z","2019-01-11T17:38:05Z"
"","17099","AnnotationAttributesReadingVisitor.doVisitEnd doesn't handle possible null return from AnnotationUtils.getAnnotations [SPR-12493]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-12493](https://jira.spring.io/browse/SPR-12493?redirect=false)** and commented  ``` [2014-12-02 11:48:18.415] - 93880 INFORMATION [main] --- org.springframework.context.annotation.AnnotationConfigApplicationContext: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@64bfbc86: startup date [Tue Dec 02 11:48:18 CET 2014]; root of context hierarchy [2014-12-02 11:48:23.159] - 93880 INFORMATION [main] --- org.springframework.core.annotation.AnnotationUtils: Failed to introspect annotations on [interface org.springframework.security.config.annotation.web.servlet.configuration.EnableWebMvcSecurity]: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy [2014-12-02 11:48:23.160] - 93880 WARNUNG [main] --- org.springframework.context.annotation.AnnotationConfigApplicationContext: Exception encountered during context initialization - cancelling refresh attempt org.springframework.beans.factory.BeanDefinitionStoreException: Failed to read candidate component class: URL [jar:file:/Users/yann/Desktop/_Spring/___boot/spring-boot-autoconfigure-1.2.0.BUILD-20141202.095010-420.jar!/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration$WebMvcSecurityConfigurationConditions$DefaultWebMvcSecurityConfiguration.class]; nested exception is java.lang.NullPointerException     at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:303)     at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:248)     at org.springframework.context.annotation.ComponentScanAnnotationParser.parse(ComponentScanAnnotationParser.java:140)     at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:262)     at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:226)     at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:193)     at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:163)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:306)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:239)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94)     at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:462)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:321)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:961)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:950)     at MySpringApplication.main(MySpringApplication.java:18)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134) Caused by: java.lang.NullPointerException     at org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor.doVisitEnd(AnnotationAttributesReadingVisitor.java:75)     at org.springframework.core.type.classreading.RecursiveAnnotationAttributesVisitor.visitEnd(RecursiveAnnotationAttributesVisitor.java:48)     at org.springframework.asm.ClassReader.readAnnotationValues(ClassReader.java:1789)     at org.springframework.asm.ClassReader.accept(ClassReader.java:642)     at org.springframework.asm.ClassReader.accept(ClassReader.java:508)     at org.springframework.core.type.classreading.SimpleMetadataReader.(SimpleMetadataReader.java:64)     at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:98)     at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:102)     at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:279)     ... 22 more ```  ---  **Affects:** 4.0.8, 4.1.2  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/2045  **Issue Links:** - #18829 Meta-`@Conditional` lookup does not work consistently with ASM - #17173 Improve diagnostics when AnnotationJmxAttributeSource triggers an ArrayStoreException from Class.getAnnotation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dfc79721cbc7b3efbf7d635f25bd6e001da0cca1, https://github.com/spring-projects/spring-framework/commit/5018889d7861bc9ee5ecf9d8c4bcc2d208274b9a  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)","closed","in: core,","spring-projects-issues","2014-12-02T03:45:17Z","2019-01-13T05:43:38Z"
"","16995","Improve diagnostics when AnnotationAttributesReadingVisitor triggers an ArrayStoreException from Class.getAnnotations() [SPR-12387]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-12387](https://jira.spring.io/browse/SPR-12387?redirect=false)** and commented  Here's an example of the failure:  `code` Caused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:673) at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:480) at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:306) at sun.reflect.annotation.AnnotationParser.parseAnnotation(AnnotationParser.java:241) at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:88) at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:70) at java.lang.Class.initAnnotationsIfNecessary(Class.java:3178) at java.lang.Class.getAnnotations(Class.java:3158) at org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor.doVisitEnd(AnnotationAttributesReadingVisitor.java:269) at org.springframework.core.type.classreading.RecursiveAnnotationAttributesVisitor.visitEnd(AnnotationAttributesReadingVisitor.java:182) `code`  As with similar issues, it'd be great to know which class was being introspected when the failure occurred  ---  **Affects:** 4.0.7, 4.1.1  **Issue Links:** - #15074 java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy exception when annotation config not found needs to specify what class is not found - #16930 AnnotationUtils provides poor diagnostics if getDeclaredAnnotations throws an exception - #17112 Useless exception message when annotations can't be parsed - #17173 Improve diagnostics when AnnotationJmxAttributeSource triggers an ArrayStoreException from Class.getAnnotation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/91940f212e8c451ca7ae0955f1ada9a96f063f73, https://github.com/spring-projects/spring-framework/commit/b70c5d1ff14df57f292c08b6ad8843cbc4e9ef7f  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-10-28T09:50:45Z","2019-01-11T19:24:08Z"
"","16962","Improve diagnostics when OrderUtils.getPriority encounters an ArrayStoreException during annotation introspection [SPR-12357]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-12357](https://jira.spring.io/browse/SPR-12357?redirect=false)** and commented  I noticed this while testing the fix for #16930. I was running an app on Tomcat 8 (where `javax.annotation.Priority` is available).  `OrderUtils.getPriority` calls `Class.getAnnotations()` directly so it doesn't benefit from the recent improvements to `AnnotationUtils`' diagnostics. Could `OrderUtils.getPriority` be updated to use `AnnotationUtils` in a similar fashion to `OrderUtils.getOrder`?  ---  **Affects:** 4.1.1  **Issue Links:** - #16262 Use javax.annotation.Priority as an alternative for `@Order` - #16930 AnnotationUtils provides poor diagnostics if getDeclaredAnnotations throws an exception - #17095 be more defensive looking up javax.annotation.Priority (jdk6 compatibility)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b6f841b03558c0e9ce36f92b2346665a69ef98b","closed","type: enhancement,","spring-projects-issues","2014-10-21T01:51:19Z","2019-01-14T05:14:31Z"
"","16945","ServerEndpointExporter causes refresh to fail with java.lang.IllegalStateException: javax.websocket.server.ServerContainer not available [SPR-12340]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-12340](https://jira.spring.io/browse/SPR-12340?redirect=false)** and commented  This is the same problem as #16725 but the symptom's changed. Sorry for not testing the fix when it was made in 4.0.7.  The failure's now an IllegalStateException:  ``` Caused by: java.lang.IllegalStateException: javax.websocket.server.ServerContainer not available 	at org.springframework.util.Assert.state(Assert.java:385) 	at org.springframework.web.socket.server.standard.ServerEndpointExporter.afterPropertiesSet(ServerEndpointExporter.java:116) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1613) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1550) 	... 15 more ```  The reason is still largely the same. In initApplicationContext, ServerEndpointExporter assumes that the ServletContext will be available on the WebApplicationContext. This isn't true in Spring Boot and leaves ServerEndpointExporter without a ServerContainer.  AFAICT, ServerEndpointExporter needs to defer its use of the ServletContext until ServletContextAware processing.  ---  **Affects:** 4.0.7, 4.1.1  **Issue Links:** - #16725 ServerEndpointExporter causes application context refresh to fail with an NPE when used in a Spring Boot app  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7507560e753717e81ba9a8a661aa956d0fd98078, https://github.com/spring-projects/spring-framework/commit/10328f1c2273204238820d751e5c7b0690163e9e  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","type: bug,","spring-projects-issues","2014-10-16T03:01:37Z","2019-01-11T19:12:20Z"
"","16930","AnnotationUtils provides poor diagnostics if getDeclaredAnnotations throws an exception [SPR-12325]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-12325](https://jira.spring.io/browse/SPR-12325?redirect=false)** and commented  This is a follow-on from #16493, triggered by [this bug report against Spring Boot](https://github.com/spring-projects/spring-boot/issues/1696).  PR showing how this could be further improved to follow.  ---  **Affects:** 4.0.7, 4.1.1  **Issue Links:** - #16493 AnnotationUtils.findAnnotation fails with poor diagnostics if it encounters an Annotation that references an unloadable class - #16934 Regression: Commons Logging setup in AnnotationUtils causes early initialization of logging system - #16960 Favor more locally declared composed annotations over interface annotations in AnnotationUtils - #18364 Defensive error reporting when ConfigurationClassParser introspects declared methods via StandardAnnotationMetadata - #16962 Improve diagnostics when OrderUtils.getPriority encounters an ArrayStoreException during annotation introspection - #16995 Improve diagnostics when AnnotationAttributesReadingVisitor triggers an ArrayStoreException from Class.getAnnotations() - #17487 AnnotatedElementUtils should leniently ignore TypeNotPresentExceptions (just like AnnotationUtils)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e16f21c28113583d6284499d73b6ad2287529ebe, https://github.com/spring-projects/spring-framework/commit/47dde91763ab09d4e9f82dcd22fe3e2127c0f08d, https://github.com/spring-projects/spring-framework/commit/716916b281d25cc843b4b98530f4550f7f6c0ca8  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-10-13T01:48:35Z","2019-01-11T19:15:14Z"
"","16920","Make it clear when configuration is being processed in lite mode [SPR-12315]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-12315](https://jira.spring.io/browse/SPR-12315?redirect=false)** and commented  I've just learned the hard way about the existence of lite mode for processing `@Bean` methods that are declared on a standard non-`@Configuration` class. It's the cause of [this bug](https://github.com/spring-projects/spring-boot/issues/1675) in Spring Boot.  The documentation says that ""only using `@Bean` methods within `@Configuration` classes is a recommended approach …. and helps to reduce subtle bugs that can be hard to track down when operating in lite mode"". Reading that makes me question the wisdom of lite mode. It means that the cost of forgetting to annotate with `@Configuration` is one or more subtle and hard to track down bugs.  Could Spring output an info message indicating that a configuration class is being processed in lite mode? I can't be sure that I would have noticed it, but it would at least provide some help when trying to figure out why multiple instances of a bean have been created.   ---  **Affects:** 4.1.1","closed","status: bulk-closed,","spring-projects-issues","2014-10-09T05:26:33Z","2019-01-12T00:18:52Z"
"","16808","Document autowiring of javax.validation.Validator with use of @EnableWebMvc [SPR-12194]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-12194](https://jira.spring.io/browse/SPR-12194?redirect=false)** and commented  I'm seeing some strange behaviour with `@EnableWebMvc` and autowiring of `javax.validation.Validator`.  When there's no explicitly-configured `LocalValidatorFactoryBean`, auto-wiring of `javax.validation.Validator` fails as no matching bean is found. When there's a single explicitly-configured `LocalValidatorFactoryBean`, auto-wiring fails as there are now two matching beans: the explicitly configured one and the one that's provided by `@EnableWebMvc`.  I'll open a Spring Framework Issues PR with some code to reproduce both behaviours.   ---  **Affects:** 4.0.7, 4.1 GA  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/1539  3 votes, 9 watchers","closed","type: documentation,","spring-projects-issues","2014-09-15T04:05:42Z","2019-01-14T05:15:09Z"
"","16744","Metadata provided by ImportAware ignores conditions and is dependent on the order of the configuration classes [SPR-12128]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-12128](https://jira.spring.io/browse/SPR-12128?redirect=false)** and commented  This is related to #16410. It's probably best illustrated with the attached tests.  There are two configuration classes involved: `ConfigurationOne` and `ConfigurationTwo`. Both import `SomeConfiguration` via `@EnableSomeConfiguration`, however `ConfigurationTwo` is skipped due to a condition. The problem appears to be that the logic that drives `setImportMetadata` doesn't consider multiple imports or that some of them may have been skipped: it always passes in the metadata from the last import that was processed. This is illustrated by the two tests in the attached file.  In the event of a single unskipped imported, I'd expect it to provide the metadata and, therefore, for the order in which the configuration classes are processed to make no difference.  ---  **Affects:** 4.0.6  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/1451  **Attachments:** - [ImportMetadataTests.java](https://jira.spring.io/secure/attachment/22194/ImportMetadataTests.java) (_3.51 kB_)  **Issue Links:** - #16410 `@Conditional` may prevent an import from taking effect - #16815 Consider backporting SPR-12128 (ImportAware with conditions)","closed","type: bug,","spring-projects-issues","2014-08-27T07:56:35Z","2019-01-13T05:45:22Z"
"","16727","PropertySources added via @PropertySource aren't available in the environment during component scanning [SPR-12111]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-12111](https://jira.spring.io/browse/SPR-12111?redirect=false)** and commented  The property sources created via `@PropertySource` aren't added to the environment in time for them to be considered when component scanning triggers the evaluation of a profile condition. This means that beans discovered via component scanning and annotated with `@Profile` aren't instantiated.  The following should illustrate the problem:  ``` package test;  import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Profile; import org.springframework.context.annotation.PropertySource; import org.springframework.stereotype.Component;  @Configuration @PropertySource(""test.properties"") @ComponentScan public class Application { 	 	public static void main(String[] args) { 		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Application.class); 		System.out.println(context.getBean(MyBean.class));         System.out.println(context.getBean(MyComponentScannedBean.class)); 	} 	 	@Bean 	@Profile(""test"") 	public MyBean myBean() { 		return new MyBean(); 	} 	 	public class MyBean { 		 	} 	 	@Component 	@Profile(""test"") 	public static class MyComponentScannedBean { 		 	} } ```  ``` spring.profiles.active=test ```  When run, `MyBean` is found but `MyComponentScannedBean` is not.  ---  **Affects:** 4.0.6  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/1417  **Issue Links:** - #16726 Placeholder resolution within `@PropertySource` resource locations can not resolve properties from prior sources - #16731 PropertySource named cannot be added relative to itself (`@PropertySource` processing fails)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7c6088861f9e59f4e29c7f9d47a2cf467c4e8cd6","closed","type: enhancement,","spring-projects-issues","2014-08-21T09:15:07Z","2019-01-13T05:45:58Z"
"","16725","ServerEndpointExporter causes application context refresh to fail with an NPE when used in a Spring Boot app [SPR-12109]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-12109](https://jira.spring.io/browse/SPR-12109?redirect=false)** and commented  This Boot app illustrates the problem:  ``` package sample;  import java.io.IOException;  import javax.servlet.ServletContext; import javax.websocket.OnMessage; import javax.websocket.Session; import javax.websocket.server.ServerEndpoint;  import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.EnableAutoConfiguration; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.web.context.ServletContextAware; import org.springframework.web.socket.server.standard.ServerEndpointExporter; import org.springframework.web.socket.server.standard.SpringConfigurator;  @ComponentScan @EnableAutoConfiguration @Configuration public class Application { 	     public static void main(String[] args) {         SpringApplication.run(Application.class, args);     }          @Bean     public EchoEndpoint echoEndpoint() {         return new EchoEndpoint();     }          @Bean     public ServerEndpointExporter endpointExporter() {     	return new ServerEndpointExporter();     }          @ServerEndpoint(value = ""/echo"", configurator = SpringConfigurator.class)     private static class EchoEndpoint {          @OnMessage         public void handleMessage(Session session, String message) throws IOException {             session.getBasicRemote().sendText(""echo: "" + message);         }     } } ```  Running it fails with a `NullPointerException`:  ``` Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'endpointExporter' defined in class sample.Application: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Failed to get javax.websocket.server.ServerContainer via ServletContext attribute 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:547) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:232) 	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:618) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:467) 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120) 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:320) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:952) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:941) 	at sample.Application.main(Application.java:26) Caused by: java.lang.IllegalStateException: Failed to get javax.websocket.server.ServerContainer via ServletContext attribute 	at org.springframework.web.socket.server.standard.ServerEndpointExporter.getServerContainer(ServerEndpointExporter.java:113) 	at org.springframework.web.socket.server.standard.ServerEndpointExporter.setApplicationContext(ServerEndpointExporter.java:86) 	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119) 	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:407) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1545) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) 	... 14 more Caused by: java.lang.NullPointerException 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:483) 	at org.springframework.web.socket.server.standard.ServerEndpointExporter.getServerContainer(ServerEndpointExporter.java:110) 	... 20 more ```  `ServerEndpointExporter` assumes that `WebApplicationContext.getServletContext()` will return a non-null value when it's called from within `setApplicationContext(context)`. This assumption doesn't hold true in a Boot application as the embedded Tomcat server hasn't been started yet.  A work around is to replace the `ServerEndpointExporter` bean with the following:  ``` @Bean public ServletContextAware endpointExporterInitializer(final ApplicationContext applicationContext) {     return new ServletContextAware() {  		@Override 		public void setServletContext(ServletContext servletContext) { 			ServerEndpointExporter serverEndpointExporter = new ServerEndpointExporter(); 				serverEndpointExporter.setApplicationContext(applicationContext); 			try { 				serverEndpointExporter.afterPropertiesSet(); 			} catch (Exception e) { 				throw new RuntimeException(e); 			}				 		}    		     }; } ```  This defers `ServerEndpointExporter`'s processing until a time when the `ServletContext` is available  ---  **Affects:** 4.0.6  **Reference URL:** http://stackoverflow.com/questions/25390100/using-java-api-for-websocket-jsr-356-with-spring-boot/25425384#25425384  **Issue Links:** - #22131 Error running the application as WAR in tomcat 9 - #16945 ServerEndpointExporter causes refresh to fail with java.lang.IllegalStateException: javax.websocket.server.ServerContainer not available  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/379e5abd833d5126450d218e427460ad652cd5fc, https://github.com/spring-projects/spring-framework/commit/11805b6a5d9e2ae959e544c0a2daa87e127ebbc9  **Backported to:** [4.0.7](https://github.com/spring-projects/spring-framework/milestone/119?closed=1)","closed","type: bug,","spring-projects-issues","2014-08-21T06:18:36Z","2019-01-11T17:23:51Z"
"","16613","ConcurrentModificationException in ConfigurationClassParser.processDeferredImportSelectors [SPR-11997]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-11997](https://jira.spring.io/browse/SPR-11997?redirect=false)** and commented  I'm trying Spring Boot against the 4.1.0 snapshots and two tests that use a parent-child context hierarchy are failing with the same `ConcurrentModificationException`:  ``` java.util.ConcurrentModificationException 	at java.util.LinkedList$ListItr.checkForComodification(LinkedList.java:761) 	at java.util.LinkedList$ListItr.next(LinkedList.java:696) 	at org.springframework.context.annotation.ConfigurationClassParser.processDeferredImportSelectors(ConfigurationClassParser.java:388) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:165) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:305) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:243) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:604) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:462) 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120) 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:320) 	at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:142) 	at org.springframework.boot.actuate.autoconfigure.SpringApplicationHierarchyTests.testChild(SpringApplicationHierarchyTests.java:49) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) ```  The cause of the concurrent modification appears to be in `processImports` which is called while looping over `this.deferredImportSelectors`. `processImports` may call `this.deferredImportSelectors.add()` which results in the `ConcurrentModificationException` being thrown the next time round the loop.  ---  **Affects:** 4.1 RC1  **Issue Links:** - #17436 ConcurrentModificationException in ConfigurationClassParser.processDeferredImportSelectors  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bbf58008314bd42dd20c92602c1133287423dc7f","closed","type: bug,","spring-projects-issues","2014-07-15T08:31:47Z","2019-01-11T22:24:30Z"
"","16493","AnnotationUtils.findAnnotation fails with poor diagnostics if it encounters an Annotation that references an unloadable class [SPR-11874]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-11874](https://jira.spring.io/browse/SPR-11874?redirect=false)** and commented  We've hit this problem quite a few times recently with Boot's `@ConditionalOnClass`, `@ConditionalOnMissingClass`, `@ConditionalOnBean`, and `@ConditionalOnMissingBean`. They can all take a Class.  If Spring introspects a class or method with one of these annotations and the class that's referenced by the Annotation cannot be loaded it fails with `java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy` and no information at all about what class could not be loaded. I don't think Spring can do anything about the lack of information about the class, but it could provide clearer information about which class/method was being introspected at the time of the failure.  We (the Boot team) have wondered if Spring should be using ASM-based annotation detection to avoid this problem altogether. An argument against this is that something else in the stack may well fail ungracefully even if Spring doesn't. In the case of the Boot conditions the problem's isolated to `@Configuration` classes. Could that reduce the chance of something else failing in a similar way and make it worthwhile to change Spring's behaviour?  ---  **Affects:** 4.0.5  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/1065  **Issue Links:** - #15074 java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy exception when annotation config not found needs to specify what class is not found - #16934 Regression: Commons Logging setup in AnnotationUtils causes early initialization of logging system - #17112 Useless exception message when annotations can't be parsed - #16930 AnnotationUtils provides poor diagnostics if getDeclaredAnnotations throws an exception  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/74c878ee0e111f0b1a3c793736feb0ca554da0d6, https://github.com/spring-projects/spring-framework/commit/2c0c081bbb31bd63efbac3c90550ff6bfd3e166a, https://github.com/spring-projects/spring-framework/commit/fd809cd18ec1603bfb2b77eda9e4c2b86de5b396","closed","in: core,","spring-projects-issues","2014-06-12T11:54:44Z","2019-01-11T22:16:50Z"
"","16477","Infinite loop caused by import of XML configuration that declares a ConfigurationClassPostProcessor [SPR-11858]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-11858](https://jira.spring.io/browse/SPR-11858?redirect=false)** and commented  A `@Configuration` class that uses `@ImportResource` to pull in XML configuration that declares a `ConfigurationClassPostProcessor` causes an infinite loop.  This:  ``` import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.ImportResource;  @Configuration @ImportResource(value = ""application-context.xml"") public class Application {  	public static void main(String[] args) { 		new AnnotationConfigApplicationContext(Application.class); 	} } ```  ```   	 	   ```  Results in the bean definitions from `application-context.xml` being loaded repeatedly:  ``` INFO: Loading XML bean definitions from class path resource [application-context.xml] Jun 9, 2014 11:13:01 AM org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition INFO: Overriding bean definition for bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor': replacing [Root bean: class [org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] with [Root bean: class [org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] Jun 9, 2014 11:13:01 AM org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition INFO: Overriding bean definition for bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.enhancedConfigurationProcessor': replacing [Root bean: class [org.springframework.context.annotation.ConfigurationClassPostProcessor$EnhancedConfigurationBeanPostProcessor]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] with [Root bean: class [org.springframework.context.annotation.ConfigurationClassPostProcessor$EnhancedConfigurationBeanPostProcessor]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] Jun 9, 2014 11:13:01 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions INFO: Loading XML bean definitions from class path resource [application-context.xml] Jun 9, 2014 11:13:01 AM org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition INFO: Overriding bean definition for bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor': replacing [Root bean: class [org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] with [Root bean: class [org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] Jun 9, 2014 11:13:01 AM org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition INFO: Overriding bean definition for bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.enhancedConfigurationProcessor': replacing [Root bean: class [org.springframework.context.annotation.ConfigurationClassPostProcessor$EnhancedConfigurationBeanPostProcessor]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] with [Root bean: class [org.springframework.context.annotation.ConfigurationClassPostProcessor$EnhancedConfigurationBeanPostProcessor]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] Jun 9, 2014 11:13:01 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions … ```  The problem is a regression introduced in 4.0.0. The infinite loop does not occur when testing with 3.2.x  ---  **Affects:** 4.0.5  **Issue Links:** - #15258 Allow BeanDefinitionRegistryPostProcessor to register other BeanDefinitionRegistryPostProcessors  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7b38b41bf5b51b9731d1382895601ccd4bd79e8f, https://github.com/spring-projects/spring-framework/commit/b6255128bf7a32384f03e985d79b8bb03c3dd8a0","closed","in: core,","spring-projects-issues","2014-06-09T03:26:03Z","2019-01-11T22:17:19Z"
"","16410","@Conditional may prevent an import from taking effect [SPR-11788]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-11788](https://jira.spring.io/browse/SPR-11788?redirect=false)** and commented  I've been investigating a problem with some auto-configuration in Boot. I've boiled it down into a simple test case (see attached) that hopefully illustrates the problem.  The problem is that if a configuration class is imported twice and one of those imports is excluded due to an unmatched condition then the ordering of the imports matters. If the unconditional import is processed first then the import is honoured and the imported configuration is processed. However, if the conditional import is processed first then the import is skipped.  I've dug around in the code a bit and the behaviour's due to a configuration class only having a single importedBy. Referring to the test case, this means that when ConditionalConfiguration is processed first it is BeanProvidingConfiguration's importedBy and TrackedConditionEvaluator skips it. Similarly, when UnconditionalConfiguration is processed first it is BeanProvidingConfiguration's importedBy and the configuration is processed.  I'm not sure if this is a bug or if it's by design, but it does seem rather brittle. The behaviour that I would like is for all of a configuration's importers to be considered and if any of them are unconditional or have a matching condition then the imported configuration should be processed.  ---  **Affects:** 4.0.4  **Attachments:** - [ImportsWithConditionsTests.java](https://jira.spring.io/secure/attachment/22011/ImportsWithConditionsTests.java) (_3.49 kB_)  **Issue Links:** - #16744 Metadata provided by ImportAware ignores conditions and is dependent on the order of the configuration classes  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2014-05-15T09:18:16Z","2019-01-11T21:14:42Z"
"","17159","VerifyError for compiled SpEL expression with primitive/reference type mix when using == [SPR-12557]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-12557](https://jira.spring.io/browse/SPR-12557?redirect=false)** and commented  When the operands to an == call are not numbers the method .equals() is used to compare them. If, in this situation, one of the operands is actually a primitive type then we need to box that primitive before calling equals. Currently this box operation is missing from the generated code, leading to a verify error.  For example: ``` new String(35) == 35  ``` ```    ---  **Affects:** 4.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/abc3cc4dc46a352264f97e0890f89b0e4a561504","closed","in: core,","spring-projects-issues","2014-12-18T13:34:07Z","2014-12-30T05:21:45Z"
"","17119","SpEL compilation problem for payload concatenation use case in Spring Integration [SPR-12514]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-12514](https://jira.spring.io/browse/SPR-12514?redirect=false)** and commented  Gary Russell pointed me to this stack overflow thread:  http://stackoverflow.com/questions/27305070/why-is-spring-expression-compiler-mode-not-able-to-compile-the-following/27305922#27305922  It contains a verify error which indicates code generation has made a mistake in this scenario. Gary has given me some testcode that recreates it.   ---  **Affects:** 4.1.2","closed","type: bug,","spring-projects-issues","2014-12-05T08:04:57Z","2014-12-18T01:05:14Z"
"","17107","SpEL: problem with static methods conflicting with instance methods [SPR-12502]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-12502](https://jira.spring.io/browse/SPR-12502?redirect=false)** and commented  This problem came up in Spring XD and I think has come up before. Consider this testcode:  ``` public class User {   public String getName() { return ""Andy""; } } ... Expression expression = null; expression = parser.parseExpression(""#root.getClass().getName()""); User u = new User(); assertEquals(NamedUser.class.getName(),expression.getValue(u)); ```  The code in ReflectiveMethodResolver.getMethods() tries to ensure static methods are easily callable so merges two sets of candidates together. This causes problems above because the root object User supports getName() but we want to invoke the getName() on the Class object.  Now it sometimes works and picks the right one - depending on the JDK you run it on. That variation is due to the ordering of elements from a collection changing across JDKs. No ordering was specified so that isn't unreasonable...  The solution is to change getMethods() - ensure the ordering is fixed by using a LinkedHashSet rather than a HashSet and ensure the candidates we are most likely interested in are first.  ---  **Affects:** 3.2.12, 4.0.8, 4.1.2  **Attachments:** - [0001-Adjust-method-resolution-to-avoid-problems-calling-C.patch](https://jira.spring.io/secure/attachment/22381/0001-Adjust-method-resolution-to-avoid-problems-calling-C.patch) (_3.67 kB_)  **Issue Links:** - [XD-2409](https://jira.spring.io/browse/XD-2409) hdfs-dataset sink with getName() method in Pojo (_**""is depended on by""**_) - [INT-3585](https://jira.spring.io/browse/INT-3585) SpEL PropertyAccessor Order - #17400 SpEL chooses wrong method to invoke when varargs method is present - #18492 ReflectiveMethodResolver chooses parent class over child for static methods  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1), [3.2.13](https://github.com/spring-projects/spring-framework/milestone/101?closed=1)","closed","in: core,","spring-projects-issues","2014-12-03T13:08:50Z","2019-01-11T18:32:31Z"
"","17032","SpEL compiler creating bad byte code for some values that are added together via OpPlus [SPR-12426]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-12426](https://jira.spring.io/browse/SPR-12426?redirect=false)** and commented  There is a problem with compilation of operands for the plus operator. If the types of the operands at runtime are strings but the statically determinable  types are not strings, then a CHECKCAST is missed out during code gen and a verify error results.  Simply example:  ``` public class Foo {   public Object getObject() { return ""hello""; } } ```  and the expression `object+' world'`.  The expression will be compiled such that getObject() is called but it is declared to return an Object.  When this happens an extra CHECKCAST is necessary during byte code generation to ensure the JVM knows it is really a string.  ---  **Affects:** 4.1.2  **Issue Links:** - #18355 VerifyError when trying to compile constructor invocation with SpEL  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/58756b023cdd28683d82c8358ef8e202d6fa5022, https://github.com/spring-projects/spring-framework/commit/e410129aafcd2a031c14976bf44dc01da4b1f5e1, https://github.com/spring-projects/spring-framework/commit/94ee763bc8bd945a79dcc3aa9330734cde6bc730  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","in: core,","spring-projects-issues","2014-11-12T12:38:34Z","2019-01-11T19:30:16Z"
"","16933","Extend SpEL compiler for few more constructs: inline lists, string concatenation and varargs invocation [SPR-12328]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-12328](https://jira.spring.io/browse/SPR-12328?redirect=false)** and commented  In feedback received from the XD team and via the jira related to SpEL compilation in a thymeleaf scenario we should look to compile a few more constructs that currently always cause expressions to stay in interpreted mode. These are:  - inline lists. The usage of constant lists like {1,2,3} should be compilable. This is tricky because all current code generation is done into a single method. For constants like this we will need to generate code into a static initializer that sets the constant value up for later usage in the main method.  - string concatenation with plus. Currently using the plus operators between numbers is compilable but using it with strings is not, this should be possible but it needs extra code generation to maintain the StringBuilder into which to append the values.  Additionally for a string of plus usages like this: 'hello ' + getTitle() + '  ' + getLastname() we should maintain one single string builder rather than using one per pair of operands.  - varargs. Currently if a method reference or function reference points to a varargs method it will not get compiled. Satisfying a varargs method invocation requires a lot of work to ensure the arguments are packaged up appropriately for the varargs target which will be expecting an array for the vararg'd parameter.  ---  **Affects:** 4.1.1","closed","type: enhancement,","spring-projects-issues","2014-10-13T09:53:44Z","2019-01-13T20:58:25Z"
"","16705","Decoupling Java from HTML [SPR-12089]","**[Andrew Luhring](https://jira.spring.io/secure/ViewProfile.jspa?name=andrewluhring)** opened **[SPR-12089](https://jira.spring.io/browse/SPR-12089?redirect=false)** and commented  1. Problem:    Spring's view technologies do not offer a method to only access the lowest level of front-end data.  ```jsp                                               SeaString:                             ```  The problem is that most of that is unnecessary. In reality the only information the front end needs is:  ```json ""form"" : {     ""name"" : ""searchCriteria""   , ""action"" : ""hotelsUrl""   , ""method"": ""get""   , ""errors"" : [{         ""name"" : (error cause)      ,  ""line"" : (line number)      ,  ""trace"": (stack trace)      } , {          (etc)      }]   ,  ""inputs"" : [{        ""name"" : ""search-string""      , ""type"" : ""text""      } , {        ""name"" : ""other-input""      , ""type"" : ""number""      } , {         ""name"" : ""another-input""      , ""type"" : ""color""      }] } ```  By giving us data as a JSON or XML object, you decouple the data requirements of the requests from the **implementation** of the html.  For instance, this:  ```jsp SeaString:  ```  will output this:  ```html SeaString:  ```  so what is a Front-End dev supposed to do if they disagree with that markup for that implementation? What if they want the markup, in this case, to be:  ```html    SeaString          ```  Most of that can actually be done with jsp (or the other templating  languages), EXCEPT this part:  ```html       ```  That seems like not a big deal, and it isn't if it were just that one case, but if you take this problem and do it for every templating element, it becomes a serious problem-- and that's assuming the Front-End isn't using any of the new frameworks like Backbone, Angular or Ember. If they ARE, they would be forced to mix JSP or worse Java, with their JavaScript.  So, please consider a shift in how spring implements the bridge between the front and back ends. The front end is growing more complicated by the day and back-end developers shouldn't have to think about whether they should template something as a section, article, main or aside element.  We collaborate through data, but lets keep our concerns separate.    ---  **Reference URL:** http://spring.io/understanding/view-templates  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2014-08-17T12:08:23Z","2019-01-11T18:17:35Z"
"","16392","Add SQL error code mapping for SAP HANA database [SPR-11770]","**[Andrew Clemons](https://jira.spring.io/secure/ViewProfile.jspa?name=aclemons)** opened **[SPR-11770](https://jira.spring.io/browse/SPR-11770?redirect=false)** and commented  Mapping of SAP HANA database error codes to Spring DataAccessExceptions  ---  **Reference URL:** http://help.sap.com/saphelp_hanaplatform/helpdata/en/20/a78d3275191014b41bae7c4a46d835/content.htm  **Attachments:** - [sql-error-codes.xml](https://jira.spring.io/secure/attachment/21999/sql-error-codes.xml) (_2.55 kB_) - [sql-error-codes.xml](https://jira.spring.io/secure/attachment/21998/sql-error-codes.xml) (_1.99 kB_)  **Issue Links:** - #18833 Add database product name for SAP HANA","closed","type: enhancement,","spring-projects-issues","2014-05-08T15:17:58Z","2019-01-11T21:15:13Z"
"","16730","MockMvc security filters causes FileUploadException: the request was rejected because no multipart boundary was found [SPR-12114]","**[Andres A](https://jira.spring.io/secure/ViewProfile.jspa?name=andresesfm)** opened **[SPR-12114](https://jira.spring.io/browse/SPR-12114?redirect=false)** and commented  When testing a controller using `MockMvc`, file upload works as expected, but when adding the Spring Security filter chain, the request fails with:  ``` org.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is org.apache.commons.fileupload.FileUploadException: the request was rejected because no multipart boundary was found 	at org.springframework.web.multipart.commons.CommonsMultipartResolver.parseRequest(CommonsMultipartResolver.java:163) 	at org.springframework.web.multipart.commons.CommonsMultipartResolver.resolveMultipart(CommonsMultipartResolver.java:139) 	at org.springframework.web.servlet.DispatcherServlet.checkMultipart(DispatcherServlet.java:1041) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:887) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:851) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:953) 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:855) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:829) 	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:65) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) 	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:168) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:136) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at com.unifylog.spring.UserFilter.doFilter(UserFilter.java:30) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:136) 	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:141) 	at com.unifylog.integration.UserIntegrationTest.testUser(UserIntegrationTest.java:124) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:606) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) 	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74) 	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) 	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83) 	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174) 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86) 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49) 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69) 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:48) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:606) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) 	at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) 	at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) 	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) 	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:105) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:606) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) 	at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:355) 	at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) 	at java.lang.Thread.run(Thread.java:745) Caused by: org.apache.commons.fileupload.FileUploadException: the request was rejected because no multipart boundary was found 	at org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl.(FileUploadBase.java:990) 	at org.apache.commons.fileupload.FileUploadBase.getItemIterator(FileUploadBase.java:310) 	at org.apache.commons.fileupload.FileUploadBase.parseRequest(FileUploadBase.java:334) 	at org.apache.commons.fileupload.servlet.ServletFileUpload.parseRequest(ServletFileUpload.java:115) 	at org.springframework.web.multipart.commons.CommonsMultipartResolver.parseRequest(CommonsMultipartResolver.java:156) 	... 69 more ```  Even if the filter is a pass through:  ```java public class UserFilter extends GenericFilterBean {      @Override     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {         HttpServletRequest httpServletRequest = (HttpServletRequest) request;         HttpServletResponse httpServletResponse = (HttpServletResponse) response;         if (validUser(request)) {             chain.doFilter(request, response);         } else {             httpServletResponse.setStatus(403);         }     } } ```  XML:  ```xml                                      ```  What I mean by adding the security filter chain is using this:  ```java this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).addFilters(this.springSecurityFilterChain).build(); ```  ... instead of just this:  ```java this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build(); ```    ---  **Affects:** 3.2.10  **Reference URL:** http://stackoverflow.com/questions/17462642/spring-rest-the-request-was-rejected-because-no-multipart-boundary-was-found  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7cf4a4ed2daaf896605bf1192060a131ea72b2ef, https://github.com/spring-projects/spring-framework/commit/249c688e9bbfddc4e7492035e11b53642836607c, https://github.com/spring-projects/spring-framework/commit/786fd927fa70a3c41bcb79a0d6adc38ff3a8cadc  **Backported to:** [4.0.7](https://github.com/spring-projects/spring-framework/milestone/119?closed=1), [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)","closed","in: core,","spring-projects-issues","2014-08-21T14:56:52Z","2021-02-17T12:02:06Z"
"","16668","InternalViewResolver and View Controllers [SPR-12052]","**[Andrei Shpakau](https://jira.spring.io/secure/ViewProfile.jspa?name=lerml)** opened **[SPR-12052](https://jira.spring.io/browse/SPR-12052?redirect=false)** and commented  I have the following configuration (Servlet 3.0+, Apache Tomcat 7/8):  ``` @Configuration @EnableWebMvc public abstract class TaskWebConf extends WebMvcConfigurerAdapter {      @Override     public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {         configurer.enable();     }      @Override     public void addViewControllers(ViewControllerRegistry registry) {         registry.addViewController(""/"").setViewName(""home"");     }      @Override     public void addResourceHandlers(ResourceHandlerRegistry registry) {         registry.addResourceHandler(""/resources/**"").addResourceLocations(""classpath:/META-INF/resources/"").setCachePeriod(31556926);     }      @Bean     public ViewResolver internalResourceViewResolver() {         InternalResourceViewResolver internalResourceViewResolver = new InternalResourceViewResolver();         internalResourceViewResolver.setViewClass(JstlView.class);         internalResourceViewResolver.setPrefix(""/WEB-INF/views/"");         internalResourceViewResolver.setSuffix("".jsp"");         return internalResourceViewResolver;     }  ```  and  ``` public class TaskInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {      @Override     public void onStartup(ServletContext servletContext) throws ServletException {         FilterRegistration.Dynamic characterEncodingFilter = servletContext.addFilter(""characterEncodingFilter"", new CharacterEncodingFilter());         characterEncodingFilter.setInitParameter(""encoding"", ""UTF-8"");         characterEncodingFilter.setInitParameter(""forceEncoding"", ""true"");         characterEncodingFilter.addMappingForServletNames(null, false, DEFAULT_SERVLET_NAME);          super.onStartup(servletContext);     }      @Override     protected Class[] getRootConfigClasses() {         return new Class[]{TaskRootConf.class};     }      @Override     protected Class[] getServletConfigClasses() {         return new Class[]{TaskWebConf.class};     }      @Override     protected String[] getServletMappings() {         return new String[]{""/""};     } } ```  TaskRootConf defines data sources, transaction manager, etc.  When I access the app (http://localhost:8080/app) the home page (located  at /WEB-INF/views/home.jsp) should be displayed (as InternalResourceViewResolver configured). The configuration works perfectly for 4.0.6.RELEASE, but fails for 4.1.0.RC1:  HTTP Status 404 - /app/home type Status report message /app/home description The requested resource is not available.   ---  **Affects:** 4.1 RC1  **Attachments:** - [spring.log](https://jira.spring.io/secure/attachment/22155/spring.log) (_8.13 kB_)","closed","in: web,","spring-projects-issues","2014-08-01T06:02:57Z","2019-01-14T05:15:38Z"
"","17010","Improve handling of missing JSF session in SessionScope [SPR-12402]","**[Andrei Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=shadow)** opened **[SPR-12402](https://jira.spring.io/browse/SPR-12402?redirect=false)** and commented  I have some JSF beans managed by Spring using `@Configurable` and compile time weaving.  Then I have a session scoped bean:  ```xml  ```  When Tomcat shuts down, it persists the active sessions. When it starts it tries to restore those sessions, which triggers this exception:  ``` SEVERE: Exception loading sessions from persistent storage org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'settings.web.bean.Users': Injection of autowired d ependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private transient settings.model.User settings.web.bean.Users.currentUser; nested exception is java.lang.NullPointerException         at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.j ava:293)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1186)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:384)         at org.springframework.beans.factory.wiring.BeanConfigurerSupport.configureBean(BeanConfigurerSupport.java:141)         at org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect.configureBean(AnnotationBeanConfigurerAspect.aj:63)         at org.springframework.beans.factory.aspectj.AbstractDependencyInjectionAspect.ajc$afterReturning$org_springframework_beans_factory_aspectj_AbstractD ependencyInjectionAspect$3$6aa27052(AbstractDependencyInjectionAspect.aj:97)         at org.springframework.beans.factory.aspectj.AbstractInterfaceDrivenDependencyInjectionAspect.ajc$interMethod$org_springframework_beans_factory_aspec tj_AbstractInterfaceDrivenDependencyInjectionAspect$org_springframework_beans_factory_aspectj_AbstractInterfaceDrivenDependencyInjectionAspect$ConfigurableDe serializationSupport$readResolve(AbstractInterfaceDrivenDependencyInjectionAspect.aj:117)         at settings.web.bean.Users.readResolve(Users.java:1)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:606)         at java.io.ObjectStreamClass.invokeReadResolve(ObjectStreamClass.java:1104)         at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1807)         at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)         at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)         at java.util.HashMap.readObject(HashMap.java:1180)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:606)         at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1017)         at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1893)         at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)         at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)         at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)         at java.util.HashMap.readObject(HashMap.java:1180)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:606)         at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1017)         at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1893)         at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)         at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)         at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1990)         at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1915)         at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)         at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)         at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)         at org.apache.catalina.session.StandardSession.readObject(StandardSession.java:1619)         at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1084)         at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:282)         at org.apache.catalina.session.StandardManager.load(StandardManager.java:202)         at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:489)         at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)         at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5501)         at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)         at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)         at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)         at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:649)         at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:1083)         at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1879)         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)         at java.util.concurrent.FutureTask.run(FutureTask.java:262)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)         at java.lang.Thread.run(Thread.java:745) Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private transient settings.model.User settings.web.bean.Users.currentUser; nested exception is java.lang.NullPointerException         at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcesso r.java:509)         at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)         at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.j ava:290)         ... 57 more Caused by: java.lang.NullPointerException         at org.springframework.web.context.request.SessionScope.get(SessionScope.java:92)         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:336)         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1021)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:964)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:862)         at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcesso r.java:481)         ... 59 more ```  As there is no current request, this exception gets thrown. I'm hoping that a better way of handling this scenario can be implemented.   ---  **Affects:** 4.0.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/042d8d0b4c699e58629d99b7860bc6b8c546c773","closed","type: enhancement,","spring-projects-issues","2014-10-31T09:37:51Z","2016-05-06T13:55:29Z"
"","16963","First invocation of org.springframework.core.task.AsyncListenableTaskExecutor executes in same thread as caller [SPR-12358]","**[Andrei Bochkov](https://jira.spring.io/secure/ViewProfile.jspa?name=abochkov)** opened **[SPR-12358](https://jira.spring.io/browse/SPR-12358?redirect=false)** and commented  Since it executes in same thread, synchronous work is blocked until asyncronous work completes.  Log after first invocation: 21-10-2014 15:01:25,540 [qtp525158878-30] INFO  TaskRunServiceImpl:taskRun():90 - Invoke new thread for asynchronous reply 21-10-2014 15:01:25,542 [qtp525158878-30] INFO  AgentTaskWrapper:\():32 - Create new instance of a class de.tsi.spl.adt.agent.exec.StepCommandCopy 21-10-2014 15:01:25,579 [qtp525158878-30] INFO  CallbackHandlerImpl:handle():88 - Build asynchronous fault message  After second invocation it is as expected executed in new thread (agentExecutor-2):  21-10-2014 15:25:56,248 [qtp525158878-30] INFO  TaskRunServiceImpl:taskRun():90 - Invoke new thread for asynchronous reply 21-10-2014 15:25:56,248 [qtp525158878-30] INFO  AgentTaskWrapper:\():32 - Create new instance of a class de.tsi.spl.adt.agent.exec.StepCommandCopy 21-10-2014 15:25:56,249 [qtp525158878-30] INFO  TaskRunServiceImpl:taskRun():109 - Creating synchonous reply 21-10-2014 15:25:56,249 [qtp525158878-30] INFO  TaskRunServiceImpl:taskRun():112 - Set status RUNNING 21-10-2014 15:25:56,250 [qtp525158878-30] INFO  TaskRunServiceImpl:taskRun():114 - Send synchonous reply 21-10-2014 15:25:56,250 [agentExecutor-2] INFO  CallbackHandlerImpl:handle():88 - Build asynchronous fault message  The callable class: public class AgentTaskWrapper implements Callable\  The issue is related to Windows. On AIX it works as expected.   ---  **Affects:** 4.1.1  0 votes, 6 watchers","closed","in: core,","spring-projects-issues","2014-10-21T05:14:53Z","2019-01-12T16:34:38Z"
"","16447","Contract of @RequestBody(required=true) not obeyed [SPR-11828]","**[Andrei Badea](https://jira.spring.io/secure/ViewProfile.jspa?name=andrei.badea)** opened **[SPR-11828](https://jira.spring.io/browse/SPR-11828?redirect=false)** and commented  When I send a HTTP request with an empty body, the respective controller method is invoked with a null argument for the parameter annotated with `@RequestBody`. Instead, a HttpMessageNotReadableException should be thrown.  This may be a regression introduced by the fix of #14575. Note that fix removed the statement that threw HttpMessageNotReadableException.  ---  **Affects:** 3.2.8  **Issue Links:** - #14575 HttpMessageNotReadableException when `@RequestBody`(required=false) - #13877 `@RequestBody` should have a required parameter to allow a request body to be optional - #17458 Contract of `@RequestPart`(required=false) not obeyed - #17459 HttpEntity controller method arguments should allow null body - #17376 Re-allow handling empty request body  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de1a41ac275da81ead9dfd241c6ca1266adab75a","closed","type: bug,","spring-projects-issues","2014-05-29T01:55:51Z","2019-01-13T06:53:49Z"
"","16554","Objects created by FactoryBeans might get processed multiple times by BeanPostProcessors if beans are created lazily [SPR-11937]","**[Andreas Benneke](https://jira.spring.io/secure/ViewProfile.jspa?name=abeani)** opened **[SPR-11937](https://jira.spring.io/browse/SPR-11937?redirect=false)** and commented  We wondered why the `ScheduledAnnotationBeanPostProcessor` schedules some of our jobs twice - and tracked this down to this situation.  The attached test case is a very simplified version:  * Our beans are created lazily. * We have a set of beans which form a circle (`BeanImpl1` requires `BeanImpl2` and vice versa). * There are **two** instances of each bean in the application context, where one is the real implementation. * The other is a Proxy (created by the `ProxyFactoryBean` in real life, but a simple stripped down `SimpleFactoryBean` is sufficient in this case). * The Proxies are marked as `primary=true` and used for injection. * We added a `TestPostProcessor` counting the number of invocations of `postProcessAfterInitialization` per beanName for testing purposes.  The test cases reproduce simpler as well as eagerly created versions of this situation:  The `TestPostProcessor` is invoked only once per bean (as expected), if  * everything is **not** created lazily (`TestEager*`). * there is no circle (not covered in the test cases). * there are no proxies and everything is defined in XML (`TestLazyXml`, `TestEagerXml`). * there are no proxies and everything is autowired (`TestLazyAutowired`, `TestEagerAutowired`).  But it is invoked twice (and the tests fail), if the proxies and objects are created lazily (`TestLazyAutowiredFactoryBean`, `TestLazyXmlFactoryBean`).  While tracing down this situation, we noticed that the `isCurrentlyInCreation`-logic is only applied to the `FactoryBeans` itself but not to the objects created by those factories - which might have helped to avoid this duplicate invocation of the `BeanPostProcessor` ...?   ---  **Affects:** 3.2.9, 4.0.5  **Attachments:** - [spring-factorybean.zip](https://jira.spring.io/secure/attachment/22092/spring-factorybean.zip) (_10.96 kB_)  **Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)","closed","in: core,","spring-projects-issues","2014-07-01T09:47:37Z","2014-07-08T00:21:27Z"
"","16965","NoClassDefFoundError with JAXB 2.2.11 [SPR-12360]","**[Andrea Quintavalle](https://jira.spring.io/secure/ViewProfile.jspa?name=pentavalle)** opened **[SPR-12360](https://jira.spring.io/browse/SPR-12360?redirect=false)** and commented  Using newly released JAXB 2.2.11 Spring OXM gives a NoClassDefFoundError for class com/sun/xml/bind/v2/model/annotation/AnnotationReader, that is not present anymore in jaxb-impl.jar.   ---  **Affects:** 3.2.11","closed","status: invalid,","spring-projects-issues","2014-10-22T03:01:56Z","2019-01-12T05:25:12Z"
"","16571","@CachePut always prevents @Cacheable even with mutually exclusive conditions [SPR-11955]","**[Andrea Polci](https://jira.spring.io/secure/ViewProfile.jspa?name=apolci)** opened **[SPR-11955](https://jira.spring.io/browse/SPR-11955?redirect=false)** and commented  Before Spring 4.0 it was possible to use both `@CachePut` and `@Cacheable` annotation when they have a mutually exclusive condition. This was also explicited in the [reference documentation](http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/cache.html#cache-annotations-put):  > Note that using `@CachePut` and `@Cacheable` annotations on the same method is generally discouraged because they have different behaviors. While the latter causes the method execution to be skipped by using the cache, the former forces the execution in order to execute a cache update. This leads to unexpected behavior and **with the exception of specific corner-cases (such as annotations having conditions that exclude them from each other)**, such declarations should be avoided.  This is an example of such use case:  ```java @Cacheable(value = ""cache"", condition = ""#useCache"", key = ""#root.args[0]"") @CachePut(value = ""cache"", condition = ""!#useCache"", key = ""#root.args[0]"") public User findUserByUID(String userId, boolean useCache) ```  With spring 4.0 this is no more possible. The offending commit is https://github.com/spring-projects/spring-framework/commit/eea230f2a8b31ee9d8248d97088d88a0ebe2be61 that introduced the following change:  ``` -		if(cachePutRequests.isEmpty()) {  +		if(cachePutRequests.isEmpty() && contexts.get(CachePutOperation.class).isEmpty()) {  			result = findCachedResult(contexts.get(CacheableOperation.class));   		} ```  ---  **Affects:** 4.0 GA, 4.0.5  **Issue Links:** - #15292 Make #result available for SpEL in `@CachePut` key attribute  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e20ac27fb4328f5a7ae9eb2120eac5416e9c09f2","closed","in: core,","spring-projects-issues","2014-07-04T07:30:27Z","2019-01-13T05:47:53Z"
"","16881","MBeanExportConfiguration WebSphere detection [SPR-12276]","**[Andre Fernandes](https://jira.spring.io/secure/ViewProfile.jspa?name=andrevtg)** opened **[SPR-12276](https://jira.spring.io/browse/SPR-12276?redirect=false)** and commented  The code for WebSphere detection is somewhat flawed, because it is based on the presence of a class (com.ibm.websphere.management.AdminServiceFactory) that is part of the EJB thin client JAR (ejb.thinclient-8.5.0.jar).  It would wrongly decide for WebSphere if someone is just packaging the EJB client JAR on a Tomcat app (for example) to call EJBs on a remote WebSphere server.  This code should be based on a WebSphere-specific class that is **not** inside any of the ""thinclient"" JARs.   ---  **Affects:** 4.1 GA  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/context/annotation/MBeanExportConfiguration.java","closed","status: bulk-closed,","spring-projects-issues","2014-09-30T13:48:54Z","2019-01-12T00:19:01Z"
"","16454","spring-boot-maven-plugin always forks [SPR-11835]","**[Anders Wallgren](https://jira.spring.io/secure/ViewProfile.jspa?name=anders)** opened **[SPR-11835](https://jira.spring.io/browse/SPR-11835?redirect=false)** and commented  spring-boot-maven-plugin 1.1.0.M2 doesn't appear to support launching inside the maven JVM -- it always forks.  It was very handy to be able to launch maven from inside the IDE (e.g. IntelliJ) and debug spring boot code.  (BTW, not sure this is the right project for this issue, but I can't find a spring boot project on jira, and the spring boot webpage doesn't list any information about where to create issues).   --- No further details from [SPR-11835](https://jira.spring.io/browse/SPR-11835?redirect=false)","closed","status: invalid,","spring-projects-issues","2014-05-29T23:53:41Z","2019-01-12T05:25:50Z"
"","16878","condition vs. conditional typo in @Cacheable reference documenation [SPR-12273]","**[Anders D. Johnson](https://jira.spring.io/secure/ViewProfile.jspa?name=adjohnson916)** opened **[SPR-12273](https://jira.spring.io/browse/SPR-12273?redirect=false)** and commented  The `condition` parameter for `@Cacheable` is referred to as `conditional` in the reference documentation. It seems this was a typo.  http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/cache.html#cache-annotations-cacheable-condition   ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6009c09f1b6e633b8ff38003bf6d133ca34cc62b, https://github.com/spring-projects/spring-framework/commit/1df81332375d14a3a64685ca65527863128551a4, https://github.com/spring-projects/spring-framework/commit/bc0e59f689242537a7983075c5120dbb51e53edf  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","in: core,","spring-projects-issues","2014-09-29T18:11:50Z","2014-10-01T03:11:46Z"
"","16419","NPE in HttpSessionEventPublisher [SPR-11799]","**[Amit Shrivastava](https://jira.spring.io/secure/ViewProfile.jspa?name=arun1607)** opened **[SPR-11799](https://jira.spring.io/browse/SPR-11799?redirect=false)** and commented  I am trying to run spring 4 mvc application in servlet 3 container (tomcat 7). I have implemented ApplicationListener\ to receive notification on session creation and session destroy events.  Whenever I try to access my application, I am getting NPE at below code in HttpSessionEventPublisher  getContext(event.getSession().getServletContext()).publishEvent(e);  I have further debugged the code and noticed that following getContext method is returning null instead of applicationContext. The webapplication context is not being set for key ""WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE"" in servlet context hence causing NPE.  Thanks, Amit  ---  **Affects:** 4.0.4  **Issue Links:** - #16417 Getting NPE in HttpSessionEventPublisher (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2014-05-16T05:51:08Z","2019-01-12T16:46:30Z"
"","16418","NPE in HttpSessionEventPublisher [SPR-11798]","**[Amit Shrivastava](https://jira.spring.io/secure/ViewProfile.jspa?name=arun1607)** opened **[SPR-11798](https://jira.spring.io/browse/SPR-11798?redirect=false)** and commented  I am trying to run spring 4 mvc application in servlet 3 container (tomcat 7). I have implemented ApplicationListener\ to receive notification on session creation and session destroy events.  Whenever I try to access my application, I am getting NPE at below code in HttpSessionEventPublisher  getContext(event.getSession().getServletContext()).publishEvent(e);  I have further debugged the code and noticed that following getContext method is returning null instead of applicationContext. The webapplication context is not being set for key ""WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE"" in servlet context hence causing NPE.  Thanks, Amit  ---  **Affects:** 4.0.4  **Issue Links:** - #16417 Getting NPE in HttpSessionEventPublisher (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2014-05-16T05:48:06Z","2019-01-12T16:46:31Z"
"","16417","Getting NPE in HttpSessionEventPublisher [SPR-11797]","**[Amit Shrivastava](https://jira.spring.io/secure/ViewProfile.jspa?name=arun1607)** opened **[SPR-11797](https://jira.spring.io/browse/SPR-11797?redirect=false)** and commented  I am trying to run spring 4 mvc application in servlet 3 container (tomcat 7). I have implemented ApplicationListener\ to receive notification on session creation and session destroy events.  Whenever I try to access my application, I am getting NPE at below code in HttpSessionEventPublisher  getContext(event.getSession().getServletContext()).publishEvent(e);  I have further debugged the code and noticed that following getContext method is returning null instead of applicationContext. The webapplication context is not being set for key ""WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE"" in servlet context hence causing NPE.  Thanks, Amit  ---  **Affects:** 4.0.4  **Issue Links:** - #16418 NPE in HttpSessionEventPublisher (_**""is duplicated by""**_) - #16419 NPE in HttpSessionEventPublisher (_**""is duplicated by""**_)","closed","status: invalid,","spring-projects-issues","2014-05-16T05:43:40Z","2019-01-12T05:25:56Z"
"","16875","Clarify the single class restriction with @JsonView for a response body advice [SPR-12270]","**[Alexey Krylov](https://jira.spring.io/secure/ViewProfile.jspa?name=lexx)** opened **[SPR-12270](https://jira.spring.io/browse/SPR-12270?redirect=false)** and commented  Currently only one `@JsonView` class is used:  JsonViewResponseBodyAdvice.java:  ``` 	@Override 	protected void beforeBodyWriteInternal(MappingJacksonValue bodyContainer, MediaType contentType, 			MethodParameter returnType, ServerHttpRequest request, ServerHttpResponse response) {  		JsonView annotation = returnType.getMethodAnnotation(JsonView.class); 		Assert.isTrue(annotation.value().length != 0, ""No view class in JsonView annotation on "" + returnType); 		bodyContainer.setSerializationView(annotation.value()[0]); 	} ```  My code:  ``` @JsonView({Category.Default.class, Product.Default.class})    @RequestMapping(""/catalog.json"")    public Collection getCatalog(@Named(""deviceId"") @RequestParam(value = ""device_id"", required = false) Integer deviceId) {        return retrieveCatalog(deviceId);    } ```  In this example only Category.Default.class will be used. It will be very nice to have full support for `@JsonView`.    ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3fd00eadbc59698a9c7870fb3539431d4579f00, https://github.com/spring-projects/spring-framework/commit/ae43b17fa0f7c6303a53a97803a8a64ce3d42b01","closed","type: enhancement,","spring-projects-issues","2014-09-29T04:35:04Z","2019-01-11T17:36:52Z"
"","16781","XML bean singleton attribute silently ignored [SPR-12167]","**[Alexander Kudrevatykh](https://jira.spring.io/secure/ViewProfile.jspa?name=akudrevatykh)** opened **[SPR-12167](https://jira.spring.io/browse/SPR-12167?redirect=false)** and commented  In commit 2c3a8a5309dd066be30346582b5d8430ad8c3ddf support of singleton attribute was dropped Now if xml contains that attribute it silently ignored, that can cause unexpected behavior in runtime. I think spring should throw exception in case of such unsupported attributes.  ---  **Affects:** 4.0.6  **Issue Links:** - #15070 Create v4 XML schema - #17433 There is no spring-beans.dtd file inside of the spring-beans-4.1.5.RELEASE jar  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","type: enhancement,","spring-projects-issues","2014-09-09T06:25:21Z","2019-01-11T17:20:36Z"
"","16786","Using websocket scope in application event listener [SPR-12172]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-12172](https://jira.spring.io/browse/SPR-12172?redirect=false)** and commented  I'm using a session bean with websocket scope and it works fine, but the bean is not available while handling the websocket application events like SessionConnectedEvent and SessionDisconnectEvent (if I try to access the bean I've an error telling me the scope is not available).  That is a problem because I'm unable to initialize the session bean during the connection phase, that could be very useful for my application.  I don't know if this can be fixed, if not a workaround will be very welcome :)   ---  **Affects:** 4.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a99ef6d9b2ca77f60e2838ff20a7957254a80fc4","closed","type: enhancement,","spring-projects-issues","2014-09-10T01:18:14Z","2014-10-01T03:11:52Z"
"","16757","Ability to send STOMP messages to particular session [SPR-12143]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-12143](https://jira.spring.io/browse/SPR-12143?redirect=false)** and commented  Using SimpMessagingTemplate.convertAndSentToUser() we can asynchronously send messages to selected user, but to do it we need to use spring security and having the connected user authenticated with it.  It would be very useful to send messages to selected sessions, e.g, having a method like convertAndSendToSession(sessionId, ....), otherwise it's impossible to send messages to selected non-authenticated users, or users authenticated using a different mechanism from spring-security.   ---  **Affects:** 4.1 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/96563c7eea7f33e5a1fc37b6491ca333b2cca2c9","closed","type: enhancement,","spring-projects-issues","2014-09-01T23:22:09Z","2019-01-11T17:21:48Z"
"","16664","Support correlation id header [SPR-12048]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-12048](https://jira.spring.io/browse/SPR-12048?redirect=false)** and commented  The issue is described on StackOverflow (http://stackoverflow.com/questions/24991275/rpc-over-stomp-using-spring-and-correctly-handling-server-side-errors-propagate) but since it seems a general problem I hope it's ok to open a ticket for it.  While using `@MessageMapping` is fine for normal messaging, I find using `@SendToUser` quite limitating for implementing RPC because the client has an hard time to understand which reply is associated with which request in a scenario when multiple simultaneous requests are being made from the client.  Of course there is no problem when just only one request is made, and the client waits for its reply, but problems arise when the client has to keep track of multiple ""open"" rpc calls.  I've managed to make the system mostly fine by associating an ID with every request, i.e.: the client sends an id together with the message, and the server replies with a special message wrapper that contains this id, so the client is able to associate asynchronous replies with requests.  This works fine but has several limitations:  * I have to develop code that needs to understand this structure, and that defies the uitlity to have simple annotated methods  * when the server side code generates an Exception the Spring `@MessageExceptionHandler` get called and the correct Exception is returned to the client, but the request id is lost because the handler has no (easy) way to access it.  I know that with rabbitmq we can add ""reply-to"" header to every request that needs to be associated with a special reply (the rpc response), and this is implemented by creating a special temporary queue that the user is automatically subscribed to, but how may I use this scheme in Spring? Also, that would tie me a specific broker.  How may I elegantly implement a correct RPC call in Spring that correctly handles server side exceptions?  I find this a general problem and I think Spring could benefit greatly to implement it natively.   ---  **Affects:** 4.0.6  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2014-07-30T04:56:33Z","2021-11-19T12:17:39Z"
"","16663","Allow @SendToUser applied to class [SPR-12047]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-12047](https://jira.spring.io/browse/SPR-12047?redirect=false)** and commented  When implementing an RPC pattern over STOMP we have to apply the `@SendToUser` annotation to every method.  It would be useful to have the possibility to annotate the class so that every method annotated with `@MessageMapping` is automatically annotated with the corresponding `@SendToUser`, in a similar way to what `@RestController` does.   ---  **Affects:** 4.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/03e3ef53abf0a5eb34fae8fd5fc4b0c38876eb10","closed","type: enhancement,","spring-projects-issues","2014-07-30T04:45:22Z","2019-01-14T05:15:40Z"
"","16636","Documentation typo  [SPR-12020]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-12020](https://jira.spring.io/browse/SPR-12020?redirect=false)** and commented  In section ""20.4.5 Sending Messages"": ""easist"" should be ""easiest""   ---  **Affects:** 4.0.6  **Reference URL:** http://docs.spring.io/spring/docs/4.0.6.RELEASE/spring-framework-reference/htmlsingle/  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0dca31c39b79824b241353107e7d6ba0fb058852, https://github.com/spring-projects/spring-framework/commit/d4fe732f469ef47d07ef15c519620663694da305","closed","type: documentation,","spring-projects-issues","2014-07-22T11:59:16Z","2014-08-15T01:52:43Z"
"","16673","Typo in spring.io platform docs [SPR-12057]","**[Alex Sherwin](https://jira.spring.io/secure/ViewProfile.jspa?name=alex.sherwin@gmail.com)** opened **[SPR-12057](https://jira.spring.io/browse/SPR-12057?redirect=false)** and commented  The example code block after  > Whichever approach you choose, no dependencies will be added to your application. However, when you do declare a dependency on something that’s part of the Platform, you will now be able to omit the version number. For example:  Says  ```               org.springframework         spring-core       ```  The closing ""dependency"" tag is missing the /   ---  **Reference URL:** http://docs.spring.io/platform/docs/1.0.1.RELEASE/reference/htmlsingle/","closed","status: declined,","spring-projects-issues","2014-08-01T19:20:09Z","2014-08-02T09:55:18Z"
"","17117","LoggingApplicationListener does not externalize property names [SPR-12512]","**[Alex Pogrebnyak](https://jira.spring.io/secure/ViewProfile.jspa?name=alex.spring@reflexion.net)** opened **[SPR-12512](https://jira.spring.io/browse/SPR-12512?redirect=false)** and commented  org.springframework.boot.logging.LoggingApplicationListener uses several properties to control its configuration.  Here is the list: - ""logging.file"", - ""logging.path"" - ""logging.config""  All these properties are used as string literals in the code.  Could you create public static constants for them? It will make integration with them much more reliable for the client code.  P.S.  I cannot find 'sprint-boot' in the list of the JIRA projects.  Please feel free to forward this request to appropriate JIRA   --- No further details from [SPR-12512](https://jira.spring.io/browse/SPR-12512?redirect=false)","closed","status: invalid,","spring-projects-issues","2014-12-05T07:43:06Z","2019-01-12T05:24:59Z"
"","16939","@Import in another annotation still results in double scan [SPR-12334]","**[Alex Pogrebnyak](https://jira.spring.io/secure/ViewProfile.jspa?name=alex.spring@reflexion.net)** opened **[SPR-12334](https://jira.spring.io/browse/SPR-12334?redirect=false)** and commented  Please reopen this issue -> #15546  It claims that it is fixed in 3.2.5, but I am able to reproduce it with 3.2.8.RELEASE  ---  **Affects:** 3.2.8  **Issue Links:** - #15546 Duplicate scan of `@Import` annotations when inherited from another annotation - #17047 When use the same configuration annotation of javaconfig, does not work on spring 3.2.12","closed","in: core,","spring-projects-issues","2014-10-14T12:34:32Z","2019-01-14T05:14:37Z"
"","17004","PersistenceAnnotationBeanPostProcessor should check for PersistenceContext.synchronization method instead of synchronizationType [SPR-12396]","**[Alex Panchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=apanchenko)** opened **[SPR-12396](https://jira.spring.io/browse/SPR-12396?redirect=false)** and commented  See https://github.com/hibernate/hibernate-jpa-api/blob/master/src/main/java/javax/persistence/PersistenceContext.java#L58   ---  **Affects:** 4.0.6  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)","closed","type: bug,","spring-projects-issues","2014-10-29T22:57:17Z","2014-11-10T23:12:26Z"
"","16383","Prevent corrupted ThreadLocals when mis-using triggerAfterCommit [SPR-11761]","**[Aldrin Seychell](https://jira.spring.io/secure/ViewProfile.jspa?name=aldrin.seychell)** opened **[SPR-11761](https://jira.spring.io/browse/SPR-11761?redirect=false)** and commented  This issue started when we noticed a number of missing data in our database and not matching our reports, all resulting from a particular thread.  This problem was being triggered after utilizing the `TransactionSynchronizationManager.registerSynchronization` method and implementing the `afterCompletion` method to trigger a separate transaction to perform some further logic afterwards.  However, when calling a method annotated with a `@Transactional(propagation=NEVER)`, this seems to be corrupting the threadLocal variables and the transactional resources being tied to thread indefinitely.  Any subsequent calls from this thread to persist new data will never reach the database but will never fail.  ---  **Affects:** 3.1.1, 4.0.4  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/74  **Attachments:** - [0001-SPR-11761.patch](https://jira.spring.io/secure/attachment/21992/0001-SPR-11761.patch) (_2.60 kB_)  **Issue Links:** - #16214 TransactionSynchronizationManager - throw an Exception or log a warning if a Synchronization wants to add a Synchronization and afterCompletion is already called (_**""duplicates""**_) - #18362 When using Programatic transaction management of SPR if the developer misses to commit or rollback the transaction ; when the thread is returned from pool next time the stale transaction is returned.  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/8945dd9568567828f9512696d5e0ff8879c2437a, https://github.com/spring-projects/spring-framework-issues/commit/41578e8c38b6d26765394893579de54ec6684cea  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2014-05-05T14:49:30Z","2019-01-11T21:16:27Z"
"","16866","org.springframework.context.support.LiveBeansView.generateJson(Set) generates invalid JSON when resources already double-quoted [SPR-12252]","**[Aldo Luciano](https://jira.spring.io/secure/ViewProfile.jspa?name=aldoluciano)** opened **[SPR-12252](https://jira.spring.io/browse/SPR-12252?redirect=false)** and commented  result.append(""\""resource\"": \"""").append(resource).append(""\"",\n"") in org.springframework.context.support.LiveBeansView.generateJson(Set\) creates invalid JSON if resource already has quotes.  Found this issue while invoking actuator's /beans endpoint:  ... { ""bean"": ""securityConfig"", ""scope"": ""singleton"", ""type"": ""demo.SecurityConfig$$EnhancerBySpringCGLIB$$79f7591d"", ""resource"": """"/C:/Users/904311/Documents/workspace-sts-3.6.1.RELEASE/.metadata/.plugins/org.jboss.ide.eclipse.as.core/JBoss_AS_6.x1410896169876/deploy/jboss-demo.war/WEB-INF/classes/demo/SecurityConfig.class"""", ...  ...then com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipComment() throws an exception.   ---  **Affects:** 3.2.11, 4.0.7  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)","closed","in: core,","spring-projects-issues","2014-09-25T15:56:19Z","2014-10-01T03:11:48Z"
"","16595","Java 8: ASM5 visitors required for parsing INVOKESPECIAL/STATIC on interfaces [SPR-11979]","**[Albert Gorski](https://jira.spring.io/secure/ViewProfile.jspa?name=albgorski)** opened **[SPR-11979](https://jira.spring.io/browse/SPR-11979?redirect=false)** and commented  Spring context does not start when Spring Bean uses, direct or indirect, new Comparator features:  java.lang.IllegalArgumentException: INVOKESPECIAL/STATIC on interfaces require ASM 5  I attached maven project which reproduces this problem.  ---  **Affects:** 3.2.9  **Attachments:** - [spring-asm-interface.zip](https://jira.spring.io/secure/attachment/22103/spring-asm-interface.zip) (_9.76 kB_)  **Issue Links:** - #16279 Basic Java 8 bytecode compatibility for Spring 3.2.x through ASM 5.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ed88155f55aa85053ae08180eeadba9157cd2c43, https://github.com/spring-projects/spring-framework/commit/10a039000b6e5c96a5c71f5ba2f36c1767307e1e, https://github.com/spring-projects/spring-framework/commit/29f6f3d7e73aa3d055c48049a7198306f5a9f4ba, https://github.com/spring-projects/spring-framework/commit/7a3dd2a42b16aecaed2ab276807076ec948eb94b","closed","in: core,","spring-projects-issues","2014-07-10T02:05:02Z","2019-01-11T22:24:43Z"
"","17156","TransactionalTestExecutionListener regression in 4.1 [SPR-12554]","**[Alan Boshier](https://jira.spring.io/secure/ViewProfile.jspa?name=wabrit)** opened **[SPR-12554](https://jira.spring.io/browse/SPR-12554?redirect=false)** and commented  This is similar but not identical to #16859.  Our base class tests are annotated as follows:  ```java @TestExecutionListeners({      DependencyInjectionTestExecutionListener.class,     DirtiesContextTestExecutionListener.class,     TransactionalTestExecutionListener.class,     DbUnitTestExecutionListener.class      }) @DbUnitConfiguration(       databaseOperationLookup=ExtendedDatabaseOperationLookup.class,                 dataSetLoader=ColumnSensingDataSetLoader.class) public abstract class FooTestBase                     extends AbstractTransactionalJUnit4SpringContextTests                     implements FooTestInterface ```  ... with an annotated subclass:  ```java @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(value = ""/foo-context-test.xml"") @TransactionConfiguration(defaultRollback = true) @Transactional public class FooTest extends FooTestBase { ```  In moving from Spring 4.0 to 4.1 we are seeing many of our tests fail with:  ``` java.lang.IllegalStateException: Cannot start a new transaction without ending the existing transaction.         at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethodTransactionalTestExecutionListener.java:175)         at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:249)         at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:72)         at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)         at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:82)         at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:73)         at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)         at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:217)         at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:83) ```  ---  **Affects:** 4.1.3  **Issue Links:** - #16859 Transactional test with TransactionalTestExecutionListener inheritance breaks backward compatibility (_**""duplicates""**_)","closed","status: declined,","spring-projects-issues","2014-12-18T04:41:15Z","2019-01-12T16:58:50Z"
"","16990","String comparison using .equals() in ASM ClassReader [SPR-12382]","**[Ahn Jung Su](https://jira.spring.io/secure/ViewProfile.jspa?name=iamjs77)** opened **[SPR-12382](https://jira.spring.io/browse/SPR-12382?redirect=false)** and commented  Comparison of String objects using == or != in org.springframework.asm.ClassReader.readMethod(ClassVisitor, Context, int)  if (mw.cw.cr == this && signature==mw.signature) { ... }  Actually Type of signature and mw.signature are String. It is better to use .equals()  ---  **Affects:** 4.1.1  **Issue Links:** - #16970 Inefficient new Byte, Integer, Character constructor calls in ASM ClassReader  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/678, and commits https://github.com/spring-projects/spring-framework/commit/cb095132b14eb61e1dfed8079a459633ea18a256","closed","type: enhancement,","spring-projects-issues","2014-10-27T19:17:28Z","2019-01-11T19:24:01Z"
"","16612","PayloadArgumentResolver should always call the MessageConverter [SPR-11996]","**[Agim Emruli](https://jira.spring.io/secure/ViewProfile.jspa?name=agim)** opened **[SPR-11996](https://jira.spring.io/browse/SPR-11996?redirect=false)** and commented  The class o.s.messaging.handler.annotation.support.PayloadArgumentResolver does not call the message converter if the payload of the Message is type compatible with the Payload Argument.  This ""short-cut"" causes problems if the message payload is a string (because the underlying messaging system allows only string payloads), but the value has to be converted anyways.  I propose to always call the converter, and in the case of org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler to add the org.springframework.messaging.converter.SimpleMessageConverter into the CompositeMessageConverter to ensure that there is always a suitable converter.   ---  **Affects:** 4.1 RC1  **Attachments:** - [MessageConversionTests.java](https://jira.spring.io/secure/attachment/22126/MessageConversionTests.java) (_2.03 kB_)  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2014-07-15T07:16:04Z","2019-01-14T05:15:49Z"
"","16556","Add support for caching destination resolver [SPR-11939]","**[Agim Emruli](https://jira.spring.io/secure/ViewProfile.jspa?name=agim)** opened **[SPR-11939](https://jira.spring.io/browse/SPR-11939?redirect=false)** and commented  Resolving destinations might expensive under some circumstances. Therefore it would be handy to have a caching destination resolver to be used along with the messaging module.   ---  **Affects:** 4.0.5  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/578","closed","type: enhancement,","spring-projects-issues","2014-07-01T14:53:57Z","2014-07-18T10:16:41Z"
"","16545","Support  for argument-resolvers and return-value-handlers in MVC namespace [SPR-11927]","**[Agim Emruli](https://jira.spring.io/secure/ViewProfile.jspa?name=agim)** opened **[SPR-11927](https://jira.spring.io/browse/SPR-11927?redirect=false)** and commented  The / allows only bean elements as sub classes. It would be very welcome to also allow \ elements to be used inside the argument-resolvers element. That would allow to reference to argument-resolver which are already defined in the application context.    ---  **Affects:** 4.0.5  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/585  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fa33ed4b4be277576270bee68bb512a586e8ee83, https://github.com/spring-projects/spring-framework/commit/19760f9eb9e2fb3a77f7633df4650b2955931b1b","closed","type: enhancement,","spring-projects-issues","2014-06-29T11:32:01Z","2014-07-18T10:16:29Z"
"","17136","Provide a standard exception hierarchy  for REST end points [SPR-12531]","**[Adib Saikali](https://jira.spring.io/secure/ViewProfile.jspa?name=asaikali)** opened **[SPR-12531](https://jira.spring.io/browse/SPR-12531?redirect=false)** and commented  When building a single page application where the client side is storing the majority of state and server is mostly stateless there is a need for a consistent way to handle errors so that the client side javascript can know what to do.  In a JavaScript heavy app with 10K+ Lines of JS or more having every rest end point do it's own thing for errors can mean a huge mess in the client side JavaScript code base.  So most SpringMVC applications I have worked with in the past few years have built a standard way to handle errors so that.  - JavaScript client knows exactly what to expect from the server when there is an error - Server side developers know exactly how to generate an error that the client side code and developers can consume  Benefits of a consistent error handling strategy  - Server side APIs are easier to consume - Server side APIs are easier to code - Server side APIs are easier to design - It is easier to log and run analytics on API errors  Three part solution - Use HTTP status codes correctly - Define a standard data structure for representing errors - Make sure that no matter what happens API’s calls always return the standard data structure when an error occurs  Wikipedia lists 83 HTTP status codes so there is a lot of confusion as to what http status codes to use on the part of developers. So the idea to use a subset of HTTP status codes to reduce confusion.  There are 3 possible types of codes - Everything worked - Blame the API - Blame the client  Recommended HTTP Status Codes - 200 – if the request is processed successfully - 500 – if the problem is the server’s fault - 400 – if the request is the client’s fault - 401 – if the user needs to log in - 403 – if the user is logged in but does not have permission - 404 – If the resource does not exist  How do we provide the client with more details about the nature of the problem?  Use a secondary API specific error code  - Complement the http status code with an optional API specific code - The API specific error code should be globally unique so that it is easy to search for the code. Use a UUID for the API specific error code  Five Part Standard Error Response  - HTTP status code   - Required and must be one of 200, 500, 400, 401, 403, 404 - API specific error code   - Optional must be a UUID so that is globally unique and searchable - User message   - Optional plain text message that the UI can display to the user if it wants - Developer message   - Optional plain text message aimed at developers to explain why the request failed - Validation messages   - Optional array of field validation messages  Here are some example error messages that would be produced  GET: /api/customers/1 response:  ``` {      ""httpStatus"":401,    ""apiCode"":""cdbfa4c6-9ae6-46da-aef7-fa167f689afe"",    ""userMessage"":""Your account was signed out for your security, because of a lack of activity."",    ""developerMessage"":""The server side http session has expired, user needs to login in again"",    ""validationErrors"":null } ```  POST: /api/customers, {""name"":""Jane"",""email"":""jane@mail.com""} response:  ``` {      ""httpStatus"":400,    ""apiCode"":""062952b8-257f-4fb5-9baf-2d2932375f9d"",    ""userMessage"":""An Error has occured and the request could not be completed"",    ""developerMessage"":""Invalid request body see validation errors"",    ""validationErrors"":[         {            ""fieldName"":""name"",          ""message"":""name must be 10 characters long""       }    ] } ```  The git repo at https://bitbucket.org/asaikali/springone-2014/ contains a demo implementation of these features from my Talk at SpringOne 2014.  As a server side developer I want to be able to simply throw an exception that produces the standard error message for example.  ``` @RequestMapping(ApiUrls.CUSTOMER) 	public CustomerJson get(@PathVariable(""id"") Integer id) 	{ 		CustomerJson customerJson = this.customers.get(id); 		if(customerJson == null) { 			 			throw new ResourceNotFoundRestApiException() 					  .userMessage(""User id %s does not exist"",id) 					  .developerMessage(""wrong user id the url""); 		} 	    return customerJson; 	} ```  The implementation of this end user experience is located in the git repo at ttps://bitbucket.org/asaikali/springone-2014/ it is a spring boot application just clone it and run the SpaApplication then go to http://localhost:8080 and login using the username/password combo user/password and try out the features.  To best understand the code look at the classes in the following order: - com.example.rest.api.RestApiHttpStatus - com.example.rest.api.RestApiError - com.example.rest.api.RestApiValidationError - com.example.rest.api.RestApiException - com.example.rest.api.RestControllerAdvice - com.example.rest.api.ApiErrorCodes  Then look at the exception classes in the package com.example.rest.api.exceptions  To see what the end user experience is like look at the class com.example.spa.customer.CustomerJson and notice that it has an `@Valid` annotation on one of the fields then go to com.example.spa.customer.CustomerController and look at the post(`@RequestBody` `@Valid` CustomerJson customerJson)  method and notice that the standard error message json gets generated if the posted json fails validation. Then look at  get(`@PathVariable`(""id"") Integer id) to see how a developer will explicitly throw a standard error.  Given the opinionated nature of this request, maybe SpringBoot is a better home for it.  ---  **Affects:** 4.1 GA  **Attachments:** - [SpringOne 2GX 2014 - Adib Saikali - GreatBackEndNeedGreatFrontEnds .pdf](https://jira.spring.io/secure/attachment/22413/SpringOne+2GX+2014+-+Adib+Saikali+-+GreatBackEndNeedGreatFrontEnds+.pdf) (_1.36 MB_)  **Issue Links:** - #19226 Improve error handling in REST Controllers - #19548 ServletRequestBindingException should be wrapped as JSON response body - #17775 Send BindingResult Errors in ResponseEntityExceptionHandler - #19461 Allow HTTP status exceptions to be easily thrown from Controllers  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/0cb6d39e1ed4a153cc728d3015338519ac802366  2 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2014-12-10T08:49:04Z","2019-01-11T18:29:13Z"
"","16988","ResourceHttpRequestHandler serves all files with must-revalidate cache header, should not do that when using a content versioning strategy [SPR-12562]","**[Adam Skogman](https://jira.spring.io/secure/ViewProfile.jspa?name=askogman)** opened **[SPR-12562](https://jira.spring.io/browse/SPR-12562?redirect=false)** and commented  When using:           The point is to server the resources once and only one per URL. The resources do not ned to be checked, if in the browser cache.  However, the default behaviour of the ResourceHttpRequestHandler is to add a must-revalidate to the Cache-Control header. This adds an un-necessary round-trip for every resource. On a single page, this can be something like 50+ unnecessary HTTP roundtrips.  The bug is in ResourceHttpRequestHandler#handleRequest:  line 250: 		checkAndPrepare(request, response, true);  That hardcoded ""true"" causes (some ways down the call-stack) WebContentGenerator#cacheForSeconds to apply the header (argument is ""mustRevalidate""):      String headerValue = ""max-age="" + seconds;     if (mustRevalidate || this.alwaysMustRevalidate) {          headerValue += "", must-revalidate"";     }     response.setHeader(HEADER_CACHE_CONTROL, headerValue);  SUGGESTION: Add a config option to :        ...   ---  **Affects:** 4.1.3  **Issue Links:** - #16413 Server-side HTTP caching improvements  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2014-12-19T08:29:25Z","2019-01-11T18:25:53Z"
"","17152","Rewriting URLs with version-resolver using JSP and c:url doesn't work when Spring dispatcher servlet is not mapped to root [SPR-12550]","**[Adam Skogman](https://jira.spring.io/secure/ViewProfile.jspa?name=askogman)** opened **[SPR-12550](https://jira.spring.io/browse/SPR-12550?redirect=false)** and commented  Trying to do use the new content versioning strategy, but the ResourceUrlEncodingFilter seems un-aware of the path of the Dispatcher servlet:  Example: localhost:8080/app/main/resources/foo.png  app: war name  main: the servlet mapping ie  ```java      dispatcher     /main/*  ```  resources: (configured in the servlet's spring XML, not in the shared context)  ```java                                                                          ```  The JSP page has:  ```java  ```  ResourceUrlEncodingFilter is configured as a filter in web.xml.  At runtime, ResourceUrlEncodingFilter#encodeURL chops off the /app prefix, and sends the rest, ""/main/resources/foo.png"", to the ResourceUrlProvider.  But, in the ResourceUrlProvider#getForLookupPath, the code loops over the handlerMap keys, which is ""/resources/**"". The ""main"" part, the servlet path, is missing.  Other info: We use Spring security. — Things I tried, that didn't work:  Omitting the servlet path in the JSP:  ```java  ```  ==> app/resources/foo-123456789.png (main missing)  Using , same problem.  ---  **Affects:** 4.1.3  **Attachments:** - [bug.zip](https://jira.spring.io/secure/attachment/22596/bug.zip) (_5.96 kB_) - [mvc-bug-0.0.1-SNAPSHOT.war](https://jira.spring.io/secure/attachment/22595/mvc-bug-0.0.1-SNAPSHOT.war) (_4.33 MB_) - [mvc-bug-0.0.1-SNAPSHOT.zip](https://jira.spring.io/secure/attachment/22597/mvc-bug-0.0.1-SNAPSHOT.zip) (_4.33 MB_)  **Issue Links:** - #21954 ResourceUrlEncodingFilter does not work with HttpServletRequestWrapper (_**""is superseded by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/ca4b1520f977a75638c4d0336afd3bbaf23c9c39  0 votes, 7 watchers","closed","in: web,","spring-projects-issues","2014-12-17T06:09:23Z","2019-01-13T20:57:50Z"
"","22186","MethodValidationPostProcessor fails for certain generic method signatures when running against Hibernate Validator 5 [SPR-12237]","**[Adam McCormick](https://jira.spring.io/secure/ViewProfile.jspa?name=amccormick)** opened **[SPR-12237](https://jira.spring.io/browse/SPR-12237?redirect=false)** and commented  I am trying to validate service layer method arguments using the `MethodValidationPostProcessor`.  This is failing on, what appears to be, different the method signatures.  With an interface such as:  ```java @Validated public interface Service {  	public T create(@Valid T item); 	 	public T update(String identifier, @Valid T item); } ```  And the following implementation:  ```java @Named public class ItemService implements Service{  	@Override 	public Item create(Item item) { 		return item; 	}  	@Override 	public Item update(String identifier, Item item) { 		return item; 	} } ```  Validation works fine when calling `update(String, Item)` but throws the following exception when calling `create(Item)`:  ``` java.lang.IllegalArgumentException: HV000162: The validated type org.commons.test.validation.ItemService does not specify the constructor/method: public abstract java.lang.Object org.commons.test.validation.Service.create(java.lang.Object) ```  This is also working fine if `Service` is an abstract class and I just extend it.  Attached is a sample application that demonstrates the problem.  ---  **Affects:** 4.0.6  **Attachments:** - [validation.zip](https://jira.spring.io/secure/attachment/22214/validation.zip) (_7.17 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7118fcff0de2993d8654a2c72597aaa629e67e9b  3 votes, 8 watchers","closed","in: core,","spring-projects-issues","2014-09-22T23:37:28Z","2019-01-12T19:47:53Z"
"","17088","tag doesn't let Spring EL translate script in location attribute [SPR-12482]","**[Adam Hardy](https://jira.spring.io/secure/ViewProfile.jspa?name=ahardy66)** opened **[SPR-12482](https://jira.spring.io/browse/SPR-12482?redirect=false)** and commented  This doesn't translate the #{systemEnvironment[]} scriptlet into the directory given in the system variable:    ""systemEnvironment[..."" causes a file not found IOException.  But this does:  \ \ \  Here's the exception:  2014-11-28 15:14:42 INFO  org.springframework.beans.factory.config.PropertiesFactoryBean.loadProperties():172 - Loading properties file from URL [file:#{systemEnvironment['ECNETL_PROPS']}/imap-extra.properties] java.io.FileNotFoundException:  (The system cannot find the path specified) at java.io.FileInputStream.open(Native Method) at java.io.FileInputStream.\(FileInputStream.java:146) at java.io.FileInputStream.\(FileInputStream.java:101) at sun.net.www.protocol.file.FileURLConnection.connect(FileURLConnection.java:90) at sun.net.www.protocol.file.FileURLConnection.getInputStream(FileURLConnection.java:188) at org.springframework.core.io.UrlResource.getInputStream(UrlResource.java:168) at org.springframework.core.io.support.EncodedResource.getInputStream(EncodedResource.java:143) at org.springframework.core.io.support.PropertiesLoaderUtils.fillProperties(PropertiesLoaderUtils.java:98) at org.springframework.core.io.support.PropertiesLoaderSupport.loadProperties(PropertiesLoaderSupport.java:175) at org.springframework.core.io.support.PropertiesLoaderSupport.mergeProperties(PropertiesLoaderSupport.java:156) at org.springframework.beans.factory.config.PropertiesFactoryBean.createProperties(PropertiesFactoryBean.java:102) at org.springframework.beans.factory.config.PropertiesFactoryBean.afterPropertiesSet(PropertiesFactoryBean.java:71) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1627) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1564) ... 21 more  ---  **Affects:** 4.1.1  **Issue Links:** - #16999 Regression:  location attribute does not resolve parameters in #{param} format (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2014-11-28T07:17:18Z","2019-01-12T16:46:19Z"
"","17081","Allow sending of binary WebSocket messages in StompSubProtocolHandler [SPR-12475]","**[Adam Granger](https://jira.spring.io/secure/ViewProfile.jspa?name=adamish)** opened **[SPR-12475](https://jira.spring.io/browse/SPR-12475?redirect=false)** and commented  The changes made on #16907 (https://github.com/spring-projects/spring-framework/commit/4a29e164a8ca222fd8b0d2043e1d44494e84544e#diff-7bc1370febf168db39f9b3a608f68fe8) only adds support for receiving websocket messages from a client.  I would like to see support for binary messages from server to client - the method handleMessageToClient(...). Currently this only supports the one case, TextMessage  byte[] bytes = this.stompEncoder.encode(stompAccessor.getMessageHeaders(), (byte[]) message.getPayload()); session.sendMessage(new TextMessage(bytes));  ---  **Affects:** 4.1.2  **Reference URL:** http://stackoverflow.com/questions/26213819/is-it-possible-to-send-binary-data-with-stomp-over-websockets-using-spring-webso  **Issue Links:** - #16907 Allow binary WebSocket messages in StompSubProtocolHandler  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/670974d76a212658498c86a4a5952194c1d653cc, https://github.com/spring-projects/spring-framework/commit/51367dec052e9acad37bed52e95885a33a610984  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2014-11-27T01:31:08Z","2019-01-14T05:14:10Z"
"","16907","Allow binary WebSocket messages in StompSubProtocolHandler [SPR-12301]","**[Adam Granger](https://jira.spring.io/secure/ViewProfile.jspa?name=adamish)** opened **[SPR-12301](https://jira.spring.io/browse/SPR-12301?redirect=false)** and commented  I believe it should be possible to send binary messages over STOMP/WebSockets according to the specification at http://stomp.github.io/stomp-specification-1.1.html.  However org.springframework.web.socket.messaging.StompSubProtocolHandler only implements the TextMessageType.  Someone else has asked about this here: http://forum.spring.io/forum/spring-projects/web/745761-spring-websockets-with-sockjs-and-stomp-not-supporting-stomp-binary-messages  ---  **Affects:** 4.0.4  **Reference URL:** http://stackoverflow.com/questions/26213819/is-it-possible-to-send-binary-data-with-stomp-over-websockets-using-spring-webso  **Issue Links:** - #17081 Allow sending of binary WebSocket messages in StompSubProtocolHandler  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a29e164a8ca222fd8b0d2043e1d44494e84544e","closed","type: enhancement,","spring-projects-issues","2014-10-06T05:15:02Z","2019-01-11T19:17:03Z"
"","16577","Ordering of MessageConverters in AbstractMessageBrokerConfiguration [SPR-11961]","**[Adam Granger](https://jira.spring.io/secure/ViewProfile.jspa?name=adamish)** opened **[SPR-11961](https://jira.spring.io/browse/SPR-11961?redirect=false)** and commented  I wish to have a controller with like this, which returns an already-encoded JSON String.  ```java @Controller public class FooController {      @SubscribeMapping(""/foo"")     public String getUser() {          return customJsonConversion();     } ```  However this is picked up by Jackson and escaped. e.g. {""foo"":123} becomes {\""foo\"":123}. Does it ever make sense to escape a single String as JSON, surely at the top level JSON can only ever start with an object or an array? See http://www.ietf.org/rfc/rfc4627.txt  The ordering is specified in AbstractMessageBrokerConfiguration#brokerMessageConverter() puts Jackson before String and ByteArray converters  ```java if (registerDefaults) {     if (jackson2Present) {         DefaultContentTypeResolver resolver = new DefaultContentTypeResolver();         resolver.setDefaultMimeType(MimeTypeUtils.APPLICATION_JSON);         MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();         converter.setContentTypeResolver(resolver);         converters.add(converter);     }     converters.add(new StringMessageConverter());     converters.add(new ByteArrayMessageConverter()); } ```  I can provide my own via WebSocketMessageBrokerConfigurer, however I believe that the out-of-the-box ordering in brokerMessageConverter() should be changed to the following:  ```java if (registerDefaults) {     converters.add(new StringMessageConverter()); // do before Jackson!     if (jackson2Present) {         DefaultContentTypeResolver resolver = new DefaultContentTypeResolver();         resolver.setDefaultMimeType(MimeTypeUtils.APPLICATION_JSON);         MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();         converter.setContentTypeResolver(resolver);         converters.add(converter);     }     converters.add(new ByteArrayMessageConverter()); } ```    ---  **Affects:** 4.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/670c216d3838807fef46cd28cc82165f9abaeb45","closed","type: enhancement,","spring-projects-issues","2014-07-06T01:24:01Z","2014-07-18T10:16:45Z"
"","17113","Separate out resource loading from spring core [SPR-12508]","**[Adam Gent](https://jira.spring.io/secure/ViewProfile.jspa?name=agentgt)** opened **[SPR-12508](https://jira.spring.io/browse/SPR-12508?redirect=false)** and commented  I have wanted many times to use how spring does resource loading in other projects that need configuration particularly bootstrapped configuration that needs to be loaded before logging does(for example the classpath*).  While I could use `spring-core` as a maven dependency the spring-core has a dependency on logging. This is particularly annoying if you want to configure logging before its loaded through resources (ie classpath files). The jar in terms of footprint is also more than just resource loading but that is a minor issue.  Basically a unified resource loading library would be very useful in many non spring projects particularly since resource loading (ie low level configuration takes precedence in terms of dependency) over almost all of the other things in spring (except maybe annotations and aop).  So I think ""`spring-resource`"" library/artifact that has zero or optional dependencies that spring-core depends on would be a good thing not just for spring but for the rest of the Java community (that is spring-resource would be close to the root dependency).  Many times I have contemplated ripping out the spring io resource classes and creating my own project which I may do but I figured I would give filing an issue to see if I'm the only one with these thoughts.   ---  **Affects:** 4.1.2","closed","status: bulk-closed,","spring-projects-issues","2014-12-04T11:21:42Z","2019-01-12T03:31:04Z"
"","16609","Make it easier to correctly configure a JPA EntityManagerFactory. [SPR-11993]","**[Adam Berlin](https://jira.spring.io/secure/ViewProfile.jspa?name=aberlin@pivotallabs.com)** opened **[SPR-11993](https://jira.spring.io/browse/SPR-11993?redirect=false)** and commented  The API for creating an EntityManagerFactory seems too easy to get wrong.  Maybe there's a better interface for interacting with the creation of this bean.  ```         LocalContainerEntityManagerFactoryBean factory = new LocalContainerEntityManagerFactoryBean();         factory.setPackagesToScan(""things"");         factory.setDataSource(getDataSource());         factory.setJpaVendorAdapter(new HibernateJpaVendorAdapter());         return factory;      @Bean(name=""dataSource"")     public DataSource getDataSource() {         PGPoolingDataSource source = new PGPoolingDataSource();         source.setDataSourceName(""Other Postgresql"");         source.setServerName(""localhost"");         source.setDatabaseName(""testing_development"");         source.setUser(""pivotal"");         source.setPassword("""");         source.setMaxConnections(10);         return source;     }      @Bean     public JpaTransactionManager transactionManager() {         return new JpaTransactionManager();     }  ```    --- No further details from [SPR-11993](https://jira.spring.io/browse/SPR-11993?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2014-05-08T13:03:31Z","2019-01-12T02:28:54Z"
"","16403","Spring Web MVC should have its own page on spring.io. [SPR-11781]","**[Adam Berlin](https://jira.spring.io/secure/ViewProfile.jspa?name=aberlin@pivotallabs.com)** opened **[SPR-11781](https://jira.spring.io/browse/SPR-11781?redirect=false)** and commented  As a developer, I want to know what Spring MVC gives me since it is included as a part of Spring Boot Starter Web.  I don't want to need to dive through Spring Framework documentation.  ---  **Issue Links:** - #16159 No real documentation on using the spring mvc artifact (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2014-05-13T08:26:17Z","2019-01-11T21:14:24Z"
"","16401","Form parameters should be in UTF-8 encoding [SPR-11779]","**[Adam Berlin](https://jira.spring.io/secure/ViewProfile.jspa?name=aberlin@pivotallabs.com)** opened **[SPR-11779](https://jira.spring.io/browse/SPR-11779?redirect=false)** and commented  Our application needs to receive UTF-8 from forms, but out of the box our high byte characters were getting mutilated.  Digging through the stack, we found that by default our RequestMappingHandlerAdapter has a coyoteRequest (a couple layers down within other request wrappers) with tomcat http parameters with an encoding attribute of ""ISO-8859-1"".  We were able to solve this in our application by manually setting the encoding to UTF-8:  ```java @Configuration public class FilterConfig {     @Bean     public Filter encodingFilter() {         CharacterEncodingFilter encodingFilter = new CharacterEncodingFilter();         encodingFilter.setEncoding(""UTF-8"");         return encodingFilter;     } } ```  We'd love it if the default encoding, instead of ISO-8859-1, were the more ubiquitous UTF-8.  Thanks, taavo (tsmith@pivotallabs.com) & tim (tjohnson@pivotallabs.com)  ---  **Issue Links:** - #16099 PathVariable encoding fails if request charset is not set","closed","type: enhancement,","spring-projects-issues","2014-05-13T06:27:55Z","2019-01-11T21:13:53Z"
"","16396","When I search for Spring documentation on Google, I should see recent documentation. [SPR-11774]","**[Adam Berlin](https://jira.spring.io/secure/ViewProfile.jspa?name=aberlin@pivotallabs.com)** opened **[SPR-11774](https://jira.spring.io/browse/SPR-11774?redirect=false)** and commented  For example:  A Google search for:  ``` spring @Profile ```  ... brings up a Spring 3.1 blog post and then a Spring 3.1 reference page.   --- No further details from [SPR-11774](https://jira.spring.io/browse/SPR-11774?redirect=false)","closed","type: task,","spring-projects-issues","2014-05-09T09:08:55Z","2018-12-05T14:32:47Z"
"","16395","@Value(""${someProperty}"") should work without having to specify a PropertySourcesPlaceholderConfigurer bean. [SPR-11773]","**[Adam Berlin](https://jira.spring.io/secure/ViewProfile.jspa?name=aberlin@pivotallabs.com)** opened **[SPR-11773](https://jira.spring.io/browse/SPR-11773?redirect=false)** and commented  This came up while discussing the injection of YAML configuration using `@Value` in Spring Boot. (https://github.com/spring-projects/spring-boot/issues/821) The configuration file is loaded by spring-boot, but it is not accessible to `@Value` until:  ``` @Bean public PropertySourcesPlaceholderConfigurer configurer() {     return new PropertySourcesPlaceholderConfigurer(); } ```  This seems like unnecessary busy-work when setting up my application.  Who knows what a PropertySourcesPlaceholderConfigurer is?  That should be something the framework sets up for me automatically.  ---  **Issue Links:** - #14537 `@Enable-style` annotation is desired for automatic registration of PropertySourcesPlaceholderConfigurer  2 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-05-09T07:50:10Z","2019-01-13T06:54:07Z"
"","16391","@ComponentScan should get processed without @Configuration as well [SPR-11769]","**[Adam Berlin](https://jira.spring.io/secure/ViewProfile.jspa?name=aberlin@pivotallabs.com)** opened **[SPR-11769](https://jira.spring.io/browse/SPR-11769?redirect=false)** and commented  Currently, If I need to use `@ComponentScan` I also need to use `@Configuration`.  I should not need to add both.  ---  **Issue Links:** - #15163 Consider `@Import` classes as lite `@Configuration` - #21739 Revisit `@Bean` introspection between `@Configuration` classes and 'lite' beans  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b4d447fc3df8572a7272f5117709d231e8a66fdb  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2014-05-08T14:10:57Z","2019-01-13T06:54:09Z"
"","16389","Move Spring Boot's YAML properties into the core framework. [SPR-11767]","**[Adam Berlin](https://jira.spring.io/secure/ViewProfile.jspa?name=aberlin@pivotallabs.com)** opened **[SPR-11767](https://jira.spring.io/browse/SPR-11767?redirect=false)** and commented  When depending spring-context, I want to be able to pull configuration out of YAML files like I could be able to with *.properties files.  ---  **Issue Links:** - #14530 YamlPropertiesFactoryBean and YamlMapFactoryBean (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2014-05-08T07:14:09Z","2019-01-11T21:14:46Z"
"","16381","@Value annotation should be able to inject List from YAML properties [SPR-11759]","**[Adam Berlin](https://jira.spring.io/secure/ViewProfile.jspa?name=aberlin@pivotallabs.com)** opened **[SPR-11759](https://jira.spring.io/browse/SPR-11759?redirect=false)** and commented  Yaml file —  ```   foobar:     ignoredUserIds:     - 57016311     - 22588218 ```  Class —  ```        public class Foobar {     @Value(""${foobar.ignoredUserIds}"")     List ignoredUserIds; }   ```  Error —  ```   Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: java.util.List foobar.Foobar.ignoredUserIds; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'foobar.ignoredUserIds' in string value ""${foobar.ignoredUserIds}""  ```    ---  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/501  21 votes, 21 watchers","closed","status: bulk-closed,","spring-projects-issues","2014-05-05T10:05:44Z","2021-11-26T09:39:36Z"
"","16929","Add a new ResponseEntity$HeadersBuilder method [SPR-12324]","**[Adam Aytul](https://jira.spring.io/secure/ViewProfile.jspa?name=blumm)** opened **[SPR-12324](https://jira.spring.io/browse/SPR-12324?redirect=false)** and commented  ResponseEntity builders are very handy, however currently there is one method which accepts a single header value;  B header(String headerName, String... headerValues);  so usage is like below.  return ResponseEntity.status(HttpStatus.OK) .header(""header_name"", ""header_values1"", ""header_values2"") .body(someClass);  This could be easily enhanced to  B headers(HttpHeaders headers);  So multiple headers can be added once.   ---  **Affects:** 4.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8760be7d6428e3b54e6486106770fe1a1ac1e18c","closed","type: enhancement,","spring-projects-issues","2014-10-11T19:35:30Z","2014-11-17T06:42:33Z"
"","17112","Useless exception message when annotations can't be parsed [SPR-12507]","**[Aaron Digulla](https://jira.spring.io/secure/ViewProfile.jspa?name=digulla)** opened **[SPR-12507](https://jira.spring.io/browse/SPR-12507?redirect=false)** and commented  When a class is missing while parsing annotations in `StandardAnnotationMetadata.isAnnotated`, you get this exception:  ``` java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy 	at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:653) 	at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:460) 	at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:286) 	at sun.reflect.annotation.AnnotationParser.parseAnnotation(AnnotationParser.java:222) 	at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:69) 	at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:52) 	at java.lang.Class.initAnnotationsIfNecessary(Class.java:3079) 	at java.lang.Class.getAnnotations(Class.java:3059) 	at org.springframework.core.type.StandardAnnotationMetadata.isAnnotated(StandardAnnotationMetadata.java:123) ```  The error means that Java couldn't find a class inside of annotation which has a `Class` value.  Can you please wrap all exceptions thrown by `Class.getAnnotations()` with the name of the class which you tried to parse? That would help to narrow down the problem.  ---  **Affects:** 3.2.10  **Issue Links:** - #15074 java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy exception when annotation config not found needs to specify what class is not found (_**""duplicates""**_) - #16493 AnnotationUtils.findAnnotation fails with poor diagnostics if it encounters an Annotation that references an unloadable class - #16995 Improve diagnostics when AnnotationAttributesReadingVisitor triggers an ArrayStoreException from Class.getAnnotations()","closed","in: core,","spring-projects-issues","2014-12-04T08:28:02Z","2019-01-12T16:46:18Z"
"","710","4.0.x","","closed","","yihuafu","2014-12-24T15:12:47Z","2014-12-27T17:37:04Z"
"","709","Correct logger in BeanTypeNotPresentCondition","","closed","","flozano","2014-12-23T12:35:01Z","2014-12-25T19:22:40Z"
"","706","Unprocessableentity","","closed","","marceloverdijk","2014-12-08T18:23:10Z","2014-12-08T21:20:38Z"
"","690","4.0.x","","closed","","wpf824","2014-11-07T06:35:17Z","2014-11-07T06:50:37Z"
"","689","3.2.x_11.04","","closed","","lxr0827","2014-11-04T02:50:29Z","2014-11-04T05:22:48Z"
"","651","fix typo","","closed","","unpush","2014-09-25T14:49:31Z","2014-10-02T08:46:18Z"
"","618","4.0.x","","closed","","jinhanyun","2014-08-06T02:41:30Z","2014-08-06T06:51:52Z"
"","577","SPR-5807/SPR-6259 - Added support for ProtobufHttpMessageConverter","","closed","","aantono","2014-07-01T17:13:33Z","2014-07-22T20:59:12Z"
"","555","4.0.x","","closed","","hussamcs","2014-06-05T12:05:51Z","2014-06-12T05:34:03Z"
"","550","spring源码解析","","closed","","zhang-yan-talendbj","2014-06-04T08:51:19Z","2014-06-12T05:34:11Z"
"","545","3.2.x","","closed","","lihuiying","2014-05-23T17:49:49Z","2014-06-22T04:31:02Z"
"","542","Un-doing the spring framework, best version yet.","","closed","","romansky","2014-05-19T13:47:23Z","2014-06-18T21:05:23Z"
"","540","Support Jackson JSON Views","","closed","","sdeleuze","2014-05-15T09:08:00Z","2021-04-28T09:55:38Z"
"","534","Update RequestMapping javadoc typo.","","closed","","Chexpir","2014-04-28T15:47:42Z","2014-06-25T11:06:07Z"