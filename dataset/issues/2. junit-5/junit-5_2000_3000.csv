"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","800","Update M5 release notes to reflect changes in `junitPlatformTest` tas…","…k in Gradle plugin  issue: https://github.com/junit-team/junit5/issues/708  ## Overview  This is to close out on the additional items required in https://github.com/junit-team/junit5/pull/751  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Platform,","mkobit","2017-04-21T14:52:58Z","2017-04-28T13:35:27Z"
"","163","Are @BeforeEach/All the most unambiguous names?","Yesterday, at Objektforum, @jlink invited us to bike-shed so here we go. :)  I think `@BeforeAll` and `@BeforeEach` are somewhat ambiguous. While [grammar](http://www.grammar.cl/english/all-every-each.htm) is on your side, the difference in detail might be overlooked by many developers, the vast majority of which speak English as a second language.  This might be aggravated when only one of the annotations is used. Without the juxtaposition ""all vs each"" a developer might have to look up when the annotation triggers the method's execution or, worse, assume the wrong interpretation.  My proposal is `@BeforeFirst`,`@BeforeEach` (and `@AfterEach`, `@AfterLast`). I generally like them but I see the drawback that they start talking about order, which JUnit eschews on purpose and with success.","closed","","nipafx","2016-02-23T05:40:33Z","2019-07-19T19:33:03Z"
"","51","Tests for gradle plugin","Write at least one test to apply the gradle-plugin so that the most stupid mistakes don't break the build.","closed","","jlink","2015-12-05T06:33:13Z","2016-02-04T15:22:31Z"
"","607","Introduce mechanism for inter-test dependencies","would be nice to have _some_ way of specifying inter-test dependencies. this could be between different methods within the same class or between classes.  such a feature is very useful in large codebases with hundreds or thousands of tests. if something really basic breaks it could cause dozens of test classes to fail, and then tracking down the root cause depends on the developer choosing which test to debug - if you pick a complicated one it'll take a while.  with such a feature you could have all the higher-level tests depend on the basic tests so that such a failure will who up 1st on tests reports causing execution to skip the higher-level tests - saving on time and noise.   ## Related Issues  - #13  - #48","open","theme: discovery,","radai-rosenblatt","2016-12-19T18:11:05Z","2022-07-03T01:09:18Z"
"","172","TestIdentifier.isDisplayNameSet()","Would be cool to have testIdentifier.isDisplayNameSet(). The background:  user may setup display name and default names are provided by the TestDescription by method/class names. Say we want to run all tests in the package, we don't want to repeat fully qualified class names when package already contains this name. In junit 4, IDE could just check startsWith on strings but now that could lead to strange results.","closed","status: duplicate,","akozlova","2016-03-08T13:57:44Z","2016-05-23T10:46:28Z"
"","50","Enable ConsoleRunner to add additional entries to classpath","Work has started on this in #37 (37ba9a2c3b8d3b1229073b7cb9fd714d3bb14e40).","closed","","marcphilipp","2015-12-04T14:32:12Z","2015-12-04T21:17:46Z"
"","862","Provide informative error message if parameterized test name pattern is invalid","Without this change an invalid test name pattern results in an error message that does not immediately point to the problem.  Before:  ``` java.lang.IllegalArgumentException: Unmatched braces in the pattern.  	at java.text.MessageFormat.applyPattern(MessageFormat.java:508) 	at java.text.MessageFormat.(MessageFormat.java:362) 	at java.text.MessageFormat.format(MessageFormat.java:840) 	at org.junit.jupiter.params.ParameterizedTestNameFormatter.format(ParameterizedTestNameFormatter.java:39) 	at org.junit.jupiter.params.ParameterizedTestInvocationContext.getDisplayName(ParameterizedTestInvocationContext.java:35) 	at org.junit.jupiter.engine.descriptor.TestTemplateInvocationTestDescriptor.(TestTemplateInvocationTestDescriptor.java:39) 	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.createInvocationTestDescriptor(TestTemplateTestDescriptor.java:117) 	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$1(TestTemplateTestDescriptor.java:92) ```  After:  ``` org.junit.platform.commons.JUnitException: The naming pattern defined for the parameterized tests is invalid: Unmatched braces in the pattern.  	at org.junit.jupiter.params.ParameterizedTestNameFormatter.format(ParameterizedTestNameFormatter.java:54) 	at org.junit.jupiter.params.ParameterizedTestInvocationContext.getDisplayName(ParameterizedTestInvocationContext.java:35) 	at org.junit.jupiter.engine.descriptor.TestTemplateInvocationTestDescriptor.(TestTemplateInvocationTestDescriptor.java:39) 	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.createInvocationTestDescriptor(TestTemplateTestDescriptor.java:112) 	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$1(TestTemplateTestDescriptor.java:87) 	... more Caused by: java.lang.IllegalArgumentException: Unmatched braces in the pattern. 	at java.text.MessageFormat.applyPattern(MessageFormat.java:508) 	at java.text.MessageFormat.(MessageFormat.java:362) 	at java.text.MessageFormat.format(MessageFormat.java:840) 	at org.junit.jupiter.params.ParameterizedTestNameFormatter.format(ParameterizedTestNameFormatter.java:50) 	... 79 more ```  Closes #861.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","nipafx","2017-05-23T14:13:21Z","2020-09-08T18:29:38Z"
"","536","Add assertion methods to handle iterators and streams","With the merging of https://github.com/junit-team/junit5/pull/294 into master, I think it's a good time now to discuss whether deep equality assertion methods for iterators and streams, like `assert(Iterator|Stream)Equals`, should be introduced.  In my opinion, since `assertIterableEquals` exists now, it would be a silly oversight to not have support for the other two enumera(ble|tor) concepts as well.  I also think that a number of users would expect such assertion methods to exist, as `@TestFactory` methods currently support returning `Iterable`s, `Iterator`s and `Stream`s of `DynamicTest`s.  What does everyone think of this?","closed","","jbduncan","2016-10-05T16:51:23Z","2016-11-01T15:48:50Z"
"","420","Support all container events in TestExecutionSummary","With the below code I get the following output:  ``` Test run finished after 35 ms [         7 tests found      ] [         0 tests skipped    ] [         3 tests started    ] [         0 tests aborted    ] [         3 tests successful ] [         0 tests failed     ] [         1 containers failed] ```  But now I don't know how many containers were found/skipped/started/aborted/successful and my number of tests found is higher than expected. I'd like to get output like this:  ``` Test run finished after 31 ms [         3 tests found          ] [         0 tests skipped        ] [         3 tests started        ] [         0 tests aborted        ] [         3 tests successful     ] [         0 tests failed         ] [         4 containers found     ] [         1 containers skipped   ] [         3 containers started   ] [         1 containers aborted   ] [         1 containers successful] [         1 containers failed    ] ```  ---  ``` java package demo;  import org.junit.jupiter.api.Test; import org.junit.platform.engine.*; import org.junit.platform.engine.support.descriptor.AbstractTestDescriptor; import org.junit.platform.engine.support.descriptor.EngineDescriptor;  public class DemoTestEngine implements TestEngine {      private UniqueId rootUniqueId;      @Override     public String getId() {         return ""demo"";     }      @Override     public TestDescriptor discover(EngineDiscoveryRequest discoveryRequest, UniqueId uniqueId) {         EngineDescriptor engineDescriptor = new EngineDescriptor(uniqueId, ""demo"");         RootTestDescriptor root = new RootTestDescriptor(uniqueId.append(""root"", ""0""), ""root #0"");         engineDescriptor.addChild(root);         rootUniqueId = root.getUniqueId();         return engineDescriptor;     }      @Override     public void execute(ExecutionRequest request) {         EngineExecutionListener engineExecutionListener = request.getEngineExecutionListener();         TestDescriptor engineDescriptor = request.getRootTestDescriptor();          engineExecutionListener.executionStarted(engineDescriptor);          TestDescriptor root = engineDescriptor.findByUniqueId(rootUniqueId).get();          engineExecutionListener.executionStarted(root);          TestDescriptor container = new ContainerTestDescriptor(rootUniqueId.append(""container"", ""1""), ""container #1"");         root.addChild(container);          engineExecutionListener.dynamicTestRegistered(container);         engineExecutionListener.executionStarted(container);          UniqueId containerUid = container.getUniqueId();          TestDescriptor dynamicTest1 = new TestTestDescriptor(containerUid.append(""test"", ""1""), ""dynamic test #1"");         container.addChild(dynamicTest1);         engineExecutionListener.dynamicTestRegistered(dynamicTest1);         engineExecutionListener.executionStarted(dynamicTest1);         engineExecutionListener.executionFinished(dynamicTest1, TestExecutionResult.successful());          TestDescriptor dynamicTest2 = new TestTestDescriptor(containerUid.append(""test"", ""2""), ""dynamic test #2"");         container.addChild(dynamicTest2);         engineExecutionListener.dynamicTestRegistered(dynamicTest2);         engineExecutionListener.executionStarted(dynamicTest2);         engineExecutionListener.executionFinished(dynamicTest2, TestExecutionResult.successful());          TestDescriptor subcontainer = new ContainerTestDescriptor(containerUid.append(""container"", ""2""), ""container #2"");         container.addChild(subcontainer);         engineExecutionListener.dynamicTestRegistered(subcontainer);         engineExecutionListener.executionStarted(subcontainer);          UniqueId subcontainerUid = subcontainer.getUniqueId();          TestDescriptor dynamicTest3 = new TestTestDescriptor(subcontainerUid.append(""test"", ""3""), ""dynamic test #3"");         subcontainer.addChild(dynamicTest3);         engineExecutionListener.dynamicTestRegistered(dynamicTest3);         engineExecutionListener.executionStarted(dynamicTest3);         engineExecutionListener.executionFinished(dynamicTest3, TestExecutionResult.successful());          TestDescriptor skippedSubcontainer = new ContainerTestDescriptor(containerUid.append(""container"", ""3""), ""container #3"");         container.addChild(skippedSubcontainer);         engineExecutionListener.dynamicTestRegistered(skippedSubcontainer);         engineExecutionListener.executionSkipped(skippedSubcontainer, ""reason"");          TestDescriptor abortedSubcontainer = new ContainerTestDescriptor(containerUid.append(""container"", ""4""), ""container #4"");         container.addChild(abortedSubcontainer);         engineExecutionListener.dynamicTestRegistered(abortedSubcontainer);         engineExecutionListener.executionStarted(abortedSubcontainer);         engineExecutionListener.executionFinished(abortedSubcontainer, TestExecutionResult.aborted(new IllegalStateException(""message"")));          engineExecutionListener.executionFinished(subcontainer, TestExecutionResult.failed(new IllegalStateException(""sad"")));          engineExecutionListener.executionFinished(container, TestExecutionResult.successful());          engineExecutionListener.executionFinished(root, TestExecutionResult.successful());          engineExecutionListener.executionFinished(engineDescriptor, TestExecutionResult.successful());     }      static class RootTestDescriptor extends AbstractTestDescriptor {         RootTestDescriptor(UniqueId uniqueId, String displayName) {             super(uniqueId, displayName);         }          @Override         public boolean isContainer() {             return true;         }          @Override         public boolean isTest() {             return false;         }          @Override         public boolean hasTests() {             return true;         }     }      static class ContainerTestDescriptor extends AbstractTestDescriptor {         ContainerTestDescriptor(UniqueId uniqueId, String displayName) {             super(uniqueId, displayName);         }          @Override         public boolean isContainer() {             return true;         }          @Override         public boolean isTest() {             return false;         }     }      static class TestTestDescriptor extends AbstractTestDescriptor {         TestTestDescriptor(UniqueId uniqueId, String displayName) {             super(uniqueId, displayName);         }          @Override         public boolean isContainer() {             return false;         }          @Override         public boolean isTest() {             return true;         }     } } ```","closed","component: Platform,","mfulton26","2016-07-22T14:19:06Z","2016-11-30T08:56:20Z"
"","827","Android plugin: PreconditionViolationException: Cannot create Launcher without at least one TestEngine;","With Junit 5.0.0-M3 and Android Gradle Plugin 2.4.0-alpha7 I get this error when running tests from gradle CLI.  It works fine with Android Gradle Plugin 2.3.1  ``` org.junit.platform.commons.util.PreconditionViolationException: Cannot create Launcher without at least one TestEngine; consider adding an engine implementation JAR to the classpath         at org.junit.platform.commons.util.Preconditions.condition(Preconditions.java:207)         at org.junit.platform.launcher.core.DefaultLauncher.(DefaultLauncher.java:52)         at org.junit.platform.launcher.core.LauncherFactory.create(LauncherFactory.java:42)         at org.junit.platform.console.tasks.ExecuteTestsTask.executeTests(ExecuteTestsTask.java:58)         at org.junit.platform.console.tasks.ExecuteTestsTask.lambda$execute$0(ExecuteTestsTask.java:54)         at org.junit.platform.console.tasks.CustomContextClassLoaderExecutor.invoke(CustomContextClassLoaderExecutor.java:33)         at org.junit.platform.console.tasks.ExecuteTestsTask.execute(ExecuteTestsTask.java:54)         at org.junit.platform.console.tasks.ConsoleTaskExecutor.executeTask(ConsoleTaskExecutor.java:38)         at org.junit.platform.console.ConsoleLauncher.execute(ConsoleLauncher.java:54)         at org.junit.platform.console.ConsoleLauncher.main(ConsoleLauncher.java:39) ```","closed","","yogurtearl","2017-05-01T20:14:37Z","2018-03-16T14:24:35Z"
"","271","Introduce a mechanism for associating multiple TestSources with a single test","With cucumber you have a feature file with the scenario definition and a Java class that implements the steps used in the scenario. If a scenario run fails and I have the test tree in my IDE I like to have the choice to navigate either to the feature file or the implementation of the failing step.  How would an implementation of TestSource look like to support this?","closed","type: enhancement,","signed","2016-05-19T21:55:11Z","2016-05-23T10:44:44Z"
"","164","Add PULL_REQUEST_TEMPLATE","With accept conditions clause.","closed","","jlink","2016-02-24T06:24:44Z","2016-02-24T10:48:22Z"
"","895","Question about gradle integration","Why was it decided to make a separate gradle plugin instead of integrating with gradle's [`TestFramework`](https://github.com/gradle/gradle/blob/master/subprojects/testing-jvm/src/main/java/org/gradle/api/tasks/testing/Test.java#L1103)?","closed","3rd-party: Gradle,","born2snipe","2017-06-21T16:26:44Z","2017-06-21T18:41:04Z"
"","564","Allows @API on ElementType.FIELD","While working on #144 I noticed that public-scoped fields (presumably constants) can only inherit their @API Usage from the enclosing class.  This change would, at a minimum, allows constants to be marked with Usage.Deprecated or Usage.Internal while their enclosing class remains accessible.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","smoyer64","2016-11-07T10:01:55Z","2016-11-07T17:43:48Z"
"","223","replace constructor with intention revealing factory method","While working on #142 I was surprised by the fact that a `new ExtensionRegistry()` already contains `MethodParameterResolver`s. I was expecting an empty `ExtensionRegistry`.  I replaced the default constructor with the factory method `ExtensionRegistry.newRootRegistryWithDefaultExtensions()` to better inform about the default extensions being added. With the single constructor remaining it is now possible to create an empty `ExtensionRegistry` what makes the tests in #142 easier to write. ## Overview - replaced default constructor of `ExtensionRegistry` with factory method `newRootRegistryWithDefaultExtensions()` - enable instantiation of empty `ExtensionRegistry`  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","signed","2016-04-11T22:24:40Z","2016-04-16T15:04:42Z"
"","208","Extensions registered within test class hierarchy are ordered bottom-up instead of top-down","While testing support for using `@ExtendWith` within a test class hierarchy in conjunction with #207, it became apparent that extensions will currently be registered bottom-up instead of top-down, with the latter being the expected behavior. ## Example  Given the following use case with extensions `A` and `B`, one would expect extension `A` to be registered before `B` for test class `ExtendedTests`; however, the opposite is true.  ``` java     @ExtendWith(A.class)     class BaseTests {     }      @ExtendWith(B.class)     class ExtendedTests extends BaseTests {     } ``` ## Related Tests  See the `findRepeatableAnnotationsWithMultipleAnnotationsOnSuperclass` and `findRepeatableAnnotationsWithContainerAnnotationOnSuperclass` test cases in `AnnotationUtilsTests` for concrete examples.","closed","theme: extensions,","sbrannen","2016-03-16T19:49:17Z","2016-08-08T03:10:12Z"
"","885","Global activation for chosen extensions","While JUnit5 provides an ability to look use SPI for extension activation, right now it activates all of the extensions.   In reality extensions could be very different - you wouldn't want to activate SpringExtension for all your tests, but others (like Reporting) would be convenient to turn on globally instead of marking literally each test class with `@ExtendWith`.  So would be great to pass some variables (like extension class names) to surefire to be able to activate that extension for all tests at once.","closed","status: stale,","ctapobep","2017-06-13T06:18:03Z","2021-06-19T12:50:04Z"
"","280","Add support for dynamic test providers to TestDescriptor (and TestIdentifier?)","While implementing support for #58 in #278 we discovered that it's currently not possible to have a `TestDescriptor` that returns `false` for `isTest()` and an empty set for `getChildren()` because it will get pruned by the launcher.  Thus, a `TestDescriptor` should have a way to signal to the launcher that it is going to produce children during the _execution phase_.","closed","type: enhancement,","marcphilipp","2016-05-24T07:50:53Z","2016-06-04T11:53:33Z"
"","246","Make core features of AnnotationUtils available to extension authors","While implementing extensions it is common to look for annotations. The easiest way to do this properly (i.e. including repeatable and meta-annotations) seems to be `AnnotationUtils`. It is currently marked as internal API.  Annotations and especially meta-annotations are a pillar of JUnit 5's extensibility. Being able to freely compose existing annotations according to ones own requirements will be a great boost for customizations. It would be counter-intuitive if third-party extensions would not compose as well. They are hence required to use the same look-up logic as official annotations.  The easiest way to do this is to _encourage_ using the same utility to find annotations.","closed","theme: extensions,","nipafx","2016-05-07T05:41:54Z","2017-03-12T15:21:40Z"
"","755","Remove final from EngineDescriptor.getType()","While implementing a minimal engine with @mmerdes we got bitten by the fact that we cannot override `EngineDescriptor.getType()` with `return Type.Test`.   This would be very useful for an engine that does nothing but delegate to an external tool for running tests. In case there is no strong rationale for not allowing an engine to be an executable test itself.   A possible workaroung might be to override `TestDescriptor.isTest()` and `isContainer()` but then `getType()` and `isTest()` would no longer be consistent.","closed","","jlink","2017-03-30T09:26:36Z","2017-07-03T10:48:17Z"
"","801","JUnit vintage failing with ""The forked VM terminated without properly saying goodbye""","While building https://github.com/xwiki/xwiki-platform/tree/master/xwiki-platform-core/xwiki-platform-oldcore with vintage 4.12.0-M4 I get the error:   ""The forked VM terminated without properly saying goodbye. VM crash or System.exit called?""  This module builds fine with ""standard"" Maven surefire:  `````                    org.apache.maven.plugins           maven-surefire-plugin           2.19.1          `````  But it fails when using:  ````` 5.0.0-M4 ...                    org.apache.maven.plugins           maven-surefire-plugin           2.19.1                                                    org.junit.platform               junit-platform-surefire-provider               1.0.0-M4                                         org.junit.jupiter               junit-jupiter-engine               ${junit5.version}                                         org.junit.vintage               junit-vintage-engine               4.12.0-M4                                  `````  The console has:  ```` [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test (default-test) on project xwiki-platform-oldcore: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test failed: The forked VM terminated without properly saying goodbye. VM crash or System.exit called? [ERROR] Command was /bin/sh -c cd /Users/vmassol/dev/xwiki/xwiki-platform/xwiki-platform-core/xwiki-platform-oldcore && /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/bin/java -jar /Users/vmassol/dev/xwiki/xwiki-platform/xwiki-platform-core/xwiki-platform-oldcore/target/surefire/surefirebooter7554021871729302969.jar /Users/vmassol/dev/xwiki/xwiki-platform/xwiki-platform-core/xwiki-platform-oldcore/target/surefire/surefire4900910245539098485tmp /Users/vmassol/dev/xwiki/xwiki-platform/xwiki-platform-core/xwiki-platform-oldcore/target/surefire/surefire_02307687931243988789tmp [ERROR] -> [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test (default-test) on project xwiki-platform-oldcore: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test failed: The forked VM terminated without properly saying goodbye. VM crash or System.exit called? Command was /bin/sh -c cd /Users/vmassol/dev/xwiki/xwiki-platform/xwiki-platform-core/xwiki-platform-oldcore && /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/bin/java -jar /Users/vmassol/dev/xwiki/xwiki-platform/xwiki-platform-core/xwiki-platform-oldcore/target/surefire/surefirebooter7554021871729302969.jar /Users/vmassol/dev/xwiki/xwiki-platform/xwiki-platform-core/xwiki-platform-oldcore/target/surefire/surefire4900910245539098485tmp /Users/vmassol/dev/xwiki/xwiki-platform/xwiki-platform-core/xwiki-platform-oldcore/target/surefire/surefire_02307687931243988789tmp 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:213) 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:154) 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:146) 	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:117) 	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:81) 	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51) 	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128) 	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:309) 	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:194) 	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:107) 	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:993) 	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:345) 	at org.apache.maven.cli.MavenCli.main(MavenCli.java:191) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289) 	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229) 	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415) 	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) Caused by: org.apache.maven.plugin.PluginExecutionException: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test failed: The forked VM terminated without properly saying goodbye. VM crash or System.exit called? Command was /bin/sh -c cd /Users/vmassol/dev/xwiki/xwiki-platform/xwiki-platform-core/xwiki-platform-oldcore && /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/bin/java -jar /Users/vmassol/dev/xwiki/xwiki-platform/xwiki-platform-core/xwiki-platform-oldcore/target/surefire/surefirebooter7554021871729302969.jar /Users/vmassol/dev/xwiki/xwiki-platform/xwiki-platform-core/xwiki-platform-oldcore/target/surefire/surefire4900910245539098485tmp /Users/vmassol/dev/xwiki/xwiki-platform/xwiki-platform-core/xwiki-platform-oldcore/target/surefire/surefire_02307687931243988789tmp 	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:145) 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208) 	... 20 more Caused by: java.lang.RuntimeException: The forked VM terminated without properly saying goodbye. VM crash or System.exit called? Command was /bin/sh -c cd /Users/vmassol/dev/xwiki/xwiki-platform/xwiki-platform-core/xwiki-platform-oldcore && /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/bin/java -jar /Users/vmassol/dev/xwiki/xwiki-platform/xwiki-platform-core/xwiki-platform-oldcore/target/surefire/surefirebooter7554021871729302969.jar /Users/vmassol/dev/xwiki/xwiki-platform/xwiki-platform-core/xwiki-platform-oldcore/target/surefire/surefire4900910245539098485tmp /Users/vmassol/dev/xwiki/xwiki-platform/xwiki-platform-core/xwiki-platform-oldcore/target/surefire/surefire_02307687931243988789tmp 	at org.apache.maven.plugin.surefire.booterclient.ForkStarter.fork(ForkStarter.java:590) 	at org.apache.maven.plugin.surefire.booterclient.ForkStarter.fork(ForkStarter.java:460) 	at org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:229) 	at org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:201) 	at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeProvider(AbstractSurefireMojo.java:1026) 	at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeAfterPreconditionsChecked(AbstractSurefireMojo.java:862) 	at org.apache.maven.plugin.surefire.AbstractSurefireMojo.execute(AbstractSurefireMojo.java:755) 	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134) 	... 21 more [ERROR]  [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException `````  To reproduce: * Git clone https://github.com/xwiki/xwiki-platform.git (see https://github.com/xwiki/xwiki-platform) * Configure you maven ~/.m2/settings.xml with what's on http://dev.xwiki.org/xwiki/bin/view/Community/Building#HInstallingMaven * Run: `mvn clean install -rf xwiki-platform-core/xwiki-platform-oldcore/`  Thanks!","closed","3rd-party: Maven Surefire,","vmassol","2017-04-21T17:40:27Z","2018-04-14T09:53:22Z"
"","211","junit-lambda URL not correct","While browsing through the project I've see in the junit5/build.gradle file the following snippet :   ```                 pom.project {                     name ""${project.group}:${project.name}""                     packaging 'jar'                     description ""Module \""${project.name}\"" of JUnit 5.""                     url 'http://junit.org/junit-lambda.html' ```  , but the URL  http://junit.org/junit-lambda.html does not exist on junit.org website (404 HTTP error code).  On the other hand, this page exists :  http://junit.org/junit4/junit-lambda.html  I guess that the issue to be fixed is actually on the junit.org site, which adds junit4 to every page. e.g. : http://junit.org/junit4/junit5.html","closed","","mariusneo","2016-03-22T07:10:44Z","2016-03-22T21:11:20Z"
"","218","New discovery mechanism","When working on dynmaic tests #58 (https://github.com/junit-team/junit5/tree/issue58-dynamic-tests) and jqwik (https://github.com/jlink/jqwik/) I learned that introducing methods with different annotation (e.g. @Dynamic and @Property) and different semantics can be more easily done by adding new test descriptors than by implementing a new test engine. In this regard this is similar to #134 but implemented with (I hope) less interdependencies. ## Overview - New discovery mechanism that lends itself more easily to extension - Alternative suggestion to #134 from @bechte  ## Todos - Add more microtests for resolvers and `MethodFinder` - Open registration of `ElementResolver` as extension point  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","jlink","2016-03-31T07:01:23Z","2016-04-29T11:46:19Z"
"","401","Classpath scanning fails for malformed class names","When using org.junit.platform:junit-platform-gradle-plugin:1.0.0-M1 (but also org.junit:junit-gradle:5.0.0-ALPHA) you can run into a crash scenario when the project somehow has classnames that are invalid.   Running `gradle check`:  ``` Jul 14, 2016 3:14:31 PM org.junit.platform.launcher.core.ServiceLoaderTestEngineRegistry loadTestEngines INFO: Discovered TestEngines with IDs: [junit-jupiter] Exception in thread ""main"" java.lang.InternalError: Malformed class name         at java.lang.Class.getSimpleName(Class.java:1330)         at java.lang.Class.isAnonymousClass(Class.java:1411)         at java.lang.Class.isLocalClass(Class.java:1422)         at org.junit.jupiter.engine.discovery.predicates.IsPotentialTestContainer.test(IsPotentialTestContainer.java:35)         at org.junit.jupiter.engine.discovery.predicates.IsTestClassWithTests.test(IsTestClassWithTests.java:43)         at org.junit.jupiter.engine.discovery.predicates.IsScannableTestClass.test(IsScannableTestClass.java:36)         at org.junit.jupiter.engine.discovery.predicates.IsScannableTestClass.test(IsScannableTestClass.java:26)         at java.util.Optional.filter(Optional.java:178)         at org.junit.platform.commons.util.ClasspathScanner.collectClassesRecursively(ClasspathScanner.java:129)         at org.junit.platform.commons.util.ClasspathScanner.collectClassesRecursively(ClasspathScanner.java:132)         at org.junit.platform.commons.util.ClasspathScanner.collectClassesRecursively(ClasspathScanner.java:132)         at org.junit.platform.commons.util.ClasspathScanner.collectClassesRecursively(ClasspathScanner.java:132)         at org.junit.platform.commons.util.ClasspathScanner.collectClassesRecursively(ClasspathScanner.java:132)         at org.junit.platform.commons.util.ClasspathScanner.collectClassesRecursively(ClasspathScanner.java:132)         at org.junit.platform.commons.util.ClasspathScanner.collectClassesRecursively(ClasspathScanner.java:132)         at org.junit.platform.commons.util.ClasspathScanner.findClassesInSourceDirRecursively(ClasspathScanner.java:116)         at org.junit.platform.commons.util.ClasspathScanner.scanForClassesInClasspathRoot(ClasspathScanner.java:87)         at org.junit.platform.commons.util.ReflectionUtils.findAllClassesInClasspathRoot(ReflectionUtils.java:376)         at org.junit.jupiter.engine.discovery.DiscoverySelectorResolver.lambda$resolveSelectors$0(DiscoverySelectorResolver.java:48)         at java.util.ArrayList.forEach(ArrayList.java:1249)         at org.junit.jupiter.engine.discovery.DiscoverySelectorResolver.resolveSelectors(DiscoverySelectorResolver.java:47)         at org.junit.jupiter.engine.JupiterTestEngine.resolveDiscoveryRequest(JupiterTestEngine.java:50)         at org.junit.jupiter.engine.JupiterTestEngine.discover(JupiterTestEngine.java:43)         at org.junit.platform.launcher.core.DefaultLauncher.discoverRoot(DefaultLauncher.java:108)         at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:84)         at org.junit.platform.console.tasks.ExecuteTestsTask.executeTests(ExecuteTestsTask.java:60)         at org.junit.platform.console.tasks.ExecuteTestsTask.lambda$execute$5(ExecuteTestsTask.java:52)         at org.junit.platform.console.tasks.CustomContextClassLoaderExecutor.invoke(CustomContextClassLoaderExecutor.java:33)         at org.junit.platform.console.tasks.ExecuteTestsTask.execute(ExecuteTestsTask.java:52)         at org.junit.platform.console.tasks.ConsoleTaskExecutor.executeTask(ConsoleTaskExecutor.java:38)         at org.junit.platform.console.ConsoleLauncher.execute(ConsoleLauncher.java:54)         at org.junit.platform.console.ConsoleLauncher.main(ConsoleLauncher.java:39) ```  On closer inspection it crashes on the following class:  ```  nl.soqua.dl.domain.projection.album.AlbumProjection$albumByIdentity$$inlined$let$lambda$lambda$1 ```  ... which is a class generated by Kotlin.   I know you can't influence the code that is generated by Kotlin, but I don't think the TestEngine should fail with an InternalError, without at least signaling the user which class actually caused that error.","closed","type: bug,","kevinvandervlist","2016-07-14T14:15:18Z","2016-07-24T15:23:31Z"
"","865","Upgrade Gradle version to 4.0","When using Gradle 4.0, a deprecation warning is displayed for the junit-platform-gradle-plugin.  Here's the full stack trace:    ``` Using a single directory for all classes from a source set. This behaviour has been deprecated and is scheduled to be removed in Gradle 5.0 	at org.gradle.api.internal.tasks.DefaultSourceSetOutput.getClassesDir(DefaultSourceSetOutput.java:79) 	at org.gradle.api.internal.tasks.DefaultSourceSetOutput_Decorated.getClassesDir(Unknown Source) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93) 	at org.codehaus.groovy.runtime.metaclass.MultipleSetterProperty.getProperty(MultipleSetterProperty.java:49) 	at org.gradle.internal.metaobject.BeanDynamicObject$MetaClassAdapter.getProperty(BeanDynamicObject.java:228) 	at org.gradle.internal.metaobject.BeanDynamicObject.tryGetProperty(BeanDynamicObject.java:171) 	at org.gradle.internal.metaobject.CompositeDynamicObject.tryGetProperty(CompositeDynamicObject.java:55) 	at org.gradle.internal.metaobject.AbstractDynamicObject.getProperty(AbstractDynamicObject.java:59) 	at org.gradle.api.internal.tasks.DefaultSourceSetOutput_Decorated.getProperty(Unknown Source) 	at org.codehaus.groovy.runtime.callsite.PogoGetPropertySite.getProperty(PogoGetPropertySite.java:50) 	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:296) 	at org.junit.platform.gradle.plugin.JUnitPlatformPlugin$_addSelectors_closure13.doCall(JUnitPlatformPlugin.groovy:171) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93) 	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325) 	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:294) 	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1022) 	at groovy.lang.Closure.call(Closure.java:414) 	at groovy.lang.Closure.call(Closure.java:430) 	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2040) 	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2025) 	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2078) 	at org.codehaus.groovy.runtime.dgm$164.invoke(Unknown Source) 	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoMetaMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:251) 	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.call(PogoMetaMethodSite.java:71) 	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125) 	at org.junit.platform.gradle.plugin.JUnitPlatformPlugin.addSelectors(JUnitPlatformPlugin.groovy:170) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210) 	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59) 	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:182) 	at org.junit.platform.gradle.plugin.JUnitPlatformPlugin.buildArgs(JUnitPlatformPlugin.groovy:131) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93) 	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325) 	at org.gradle.internal.metaobject.BeanDynamicObject$MetaClassAdapter.invokeMethod(BeanDynamicObject.java:479) 	at org.gradle.internal.metaobject.BeanDynamicObject.tryInvokeMethod(BeanDynamicObject.java:191) 	at org.gradle.internal.metaobject.ConfigureDelegate.invokeMethod(ConfigureDelegate.java:80) 	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeOnDelegationObjects(ClosureMetaClass.java:430) 	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:369) 	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1022) 	at org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:69) 	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:182) 	at org.junit.platform.gradle.plugin.JUnitPlatformPlugin$_configure_closure4.doCall(JUnitPlatformPlugin.groovy:109) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93) 	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325) 	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:294) 	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1022) 	at groovy.lang.Closure.call(Closure.java:414) 	at groovy.lang.Closure.call(Closure.java:430) 	at org.gradle.api.internal.ClosureBackedAction.execute(ClosureBackedAction.java:71) 	at org.gradle.util.ConfigureUtil.configureTarget(ConfigureUtil.java:160) 	at org.gradle.util.ConfigureUtil.configureSelf(ConfigureUtil.java:136) 	at org.gradle.api.internal.AbstractTask.configure(AbstractTask.java:595) 	at org.gradle.api.internal.project.DefaultProject.task(DefaultProject.java:1193) 	at org.gradle.api.Project$task$1.call(Unknown Source) 	at org.junit.platform.gradle.plugin.JUnitPlatformPlugin.configure(JUnitPlatformPlugin.groovy:68) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93) 	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325) 	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:384) 	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1022) 	at org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:69) 	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:174) 	at org.junit.platform.gradle.plugin.JUnitPlatformPlugin$_apply_closure2.doCall(JUnitPlatformPlugin.groovy:55) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93) 	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325) 	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:294) 	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1022) 	at groovy.lang.Closure.call(Closure.java:414) 	at org.gradle.listener.ClosureBackedMethodInvocationDispatch.dispatch(ClosureBackedMethodInvocationDispatch.java:40) 	at org.gradle.listener.ClosureBackedMethodInvocationDispatch.dispatch(ClosureBackedMethodInvocationDispatch.java:25) 	at org.gradle.internal.event.AbstractBroadcastDispatch.dispatch(AbstractBroadcastDispatch.java:42) 	at org.gradle.internal.event.BroadcastDispatch$SingletonDispatch.dispatch(BroadcastDispatch.java:230) 	at org.gradle.internal.event.BroadcastDispatch$SingletonDispatch.dispatch(BroadcastDispatch.java:149) 	at org.gradle.internal.event.AbstractBroadcastDispatch.dispatch(AbstractBroadcastDispatch.java:58) 	at org.gradle.internal.event.BroadcastDispatch$CompositeDispatch.dispatch(BroadcastDispatch.java:324) 	at org.gradle.internal.event.BroadcastDispatch$CompositeDispatch.dispatch(BroadcastDispatch.java:234) 	at org.gradle.internal.event.ListenerBroadcast.dispatch(ListenerBroadcast.java:140) 	at org.gradle.internal.event.ListenerBroadcast.dispatch(ListenerBroadcast.java:37) 	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) 	at com.sun.proxy.$Proxy23.afterEvaluate(Unknown Source) 	at org.gradle.configuration.project.LifecycleProjectEvaluator.notifyAfterEvaluate(LifecycleProjectEvaluator.java:75) 	at org.gradle.configuration.project.LifecycleProjectEvaluator.doConfigure(LifecycleProjectEvaluator.java:69) 	at org.gradle.configuration.project.LifecycleProjectEvaluator.access$100(LifecycleProjectEvaluator.java:33) 	at org.gradle.configuration.project.LifecycleProjectEvaluator$ConfigureProject.run(LifecycleProjectEvaluator.java:103) 	at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:295) 	at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:287) 	at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:176) 	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:90) 	at org.gradle.configuration.project.LifecycleProjectEvaluator.evaluate(LifecycleProjectEvaluator.java:49) 	at org.gradle.api.internal.project.DefaultProject.evaluate(DefaultProject.java:654) 	at org.gradle.api.internal.project.DefaultProject.evaluate(DefaultProject.java:132) 	at org.gradle.execution.TaskPathProjectEvaluator.configure(TaskPathProjectEvaluator.java:35) 	at org.gradle.execution.TaskPathProjectEvaluator.configureHierarchy(TaskPathProjectEvaluator.java:60) 	at org.gradle.configuration.DefaultBuildConfigurer.configure(DefaultBuildConfigurer.java:38) 	at org.gradle.initialization.DefaultGradleLauncher$ConfigureBuild.run(DefaultGradleLauncher.java:195) 	at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:295) 	at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:287) 	at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:176) 	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:90) 	at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:157) 	at org.gradle.initialization.DefaultGradleLauncher.access$200(DefaultGradleLauncher.java:44) 	at org.gradle.initialization.DefaultGradleLauncher$1.run(DefaultGradleLauncher.java:122) 	at org.gradle.internal.work.DefaultWorkerLeaseService$2.execute(DefaultWorkerLeaseService.java:124) 	at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:116) 	at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:99) 	at org.gradle.api.tasks.GradleBuild.build(GradleBuild.java:151) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73) 	at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$StandardTaskAction.doExecute(DefaultTaskClassInfoStore.java:141) 	at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$StandardTaskAction.execute(DefaultTaskClassInfoStore.java:134) 	at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$StandardTaskAction.execute(DefaultTaskClassInfoStore.java:121) 	at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:711) 	at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:694) 	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$1.run(ExecuteActionsTaskExecuter.java:122) 	at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:295) 	at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:287) 	at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:176) 	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:90) 	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:111) 	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:92) 	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:70) 	at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:61) 	at org.gradle.api.internal.tasks.execution.ResolveTaskOutputCachingStateExecuter.execute(ResolveTaskOutputCachingStateExecuter.java:54) 	at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:58) 	at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:88) 	at org.gradle.api.internal.tasks.execution.ResolveTaskArtifactStateTaskExecuter.execute(ResolveTaskArtifactStateTaskExecuter.java:52) 	at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:52) 	at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:54) 	at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43) 	at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:34) 	at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker$1.run(DefaultTaskGraphExecuter.java:248) 	at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:295) 	at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:287) 	at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:176) 	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:90) 	at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:239) 	at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:228) 	at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.processTask(DefaultTaskPlanExecutor.java:121) 	at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.access$200(DefaultTaskPlanExecutor.java:77) 	at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker$1.execute(DefaultTaskPlanExecutor.java:102) 	at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker$1.execute(DefaultTaskPlanExecutor.java:96) 	at org.gradle.execution.taskgraph.DefaultTaskExecutionPlan.execute(DefaultTaskExecutionPlan.java:615) 	at org.gradle.execution.taskgraph.DefaultTaskExecutionPlan.executeWithTask(DefaultTaskExecutionPlan.java:570) 	at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.run(DefaultTaskPlanExecutor.java:96) 	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) 	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) 	at java.lang.Thread.run(Thread.java:748) ```     Here's Gradle's API reference documenting this deprecation and what can be done to workaround. https://docs.gradle.org/4.0-milestone-2/release-notes.html#deprecated-apis","closed","component: Platform,","erikhakansson","2017-05-26T10:16:43Z","2017-06-21T17:23:42Z"
"","868","Transaction roll back is not working in test case in @Nested class of JUnit5","when use spring-boot, JUnit5 and Mybatis, Rollback of test case in nested class is not working.  ```java @SpringJUnitJupiterConfig(classes = {RepositoryTestConfig.class}) @MapperScan @Rollback @Transactional public class TestClass { 	@Autowired 	private TestMapper testMapper; 	 	@BeforeEach 	void init() { 		User user = new User(); 		testMapper.insert(user);	 	} 	 	@Test 	public void test1() { 		// (1) success rollback 	} 	 	@Nested 	class WhenExistData { 		@Test 		public void test2() { 			// (2) rollback not working 		}	 	} } ```  (1) is working rollback. And following log is output.  	2017-05-26 22:21:29 [INFO ](TransactionContext.java:136) Rolled back transaction for test context ... 	 But, (2) is not working. I want to be able to roll back into `@Nested`. I have solved it in the following way, is this normal?  ```java @SpringJUnitJupiterConfig(classes = {RepositoryTestConfig.class}) @MapperScan @Rollback @Transactional public class TestClass {     @Autowired     private TestMapper testMapper;      @BeforeEach     void init() {         User user = new User();         testMapper.insert(user);         }      @Nested     @SpringJUnitJupiterConfig(classes = {RepositoryTestConfig.class})     @MapperScan     @Rollback     @Transactional     class WhenExistData {         @Test         public void test2() {         }        } } ```","closed","status: declined,","wicksome","2017-05-27T08:07:59Z","2017-05-28T13:10:59Z"
"","935","ParameterResolutionException with TestInfo and Parameterized Tests","When trying to get the TestInfo as an argument to a parameterized test method an error is thrown. I'm attaching the pom and test java file in the simple testing project I'm seeing this with.  [Archive.zip](https://github.com/junit-team/junit5/files/1136396/Archive.zip)  The error being thrown when I run `mvn clean test` is: ``` org.junit.jupiter.api.extension.ParameterResolutionException: Discovered multiple competing ParameterResolvers for parameter [org.junit.jupiter.api.TestInfo arg0] in executable [void com.foo.FooTest.testParameterizedFoo(org.junit.jupiter.api.TestInfo,java.lang.String)]: org.junit.jupiter.engine.extension.TestInfoParameterResolver, org.junit.jupiter.params.ParameterizedTestParameterResolver ```","closed","","littleclay","2017-07-10T16:45:54Z","2017-07-11T08:54:16Z"
"","358","Clarify when returned values might be null","When the `ParameterResolver`'s `supports()` and `resolve()` methods were changed to use `ParameterContext`, the statement that the `Parameter` was never `null` was replaced by text that stated `ParamterResolver` is never null.  `ParameterResolver` itself makes no assertion that [getParameter()](https://junit.ci.cloudbees.com/job/JUnit5/javadoc/org/junit/jupiter/api/extension/ParameterContext.html#getParameter) always returns a non-null value.  Thus, I'm now checking for null parameters as follows:  ```java     boolean supported = false;     Parameter parameter = parameterContext.getParameter();     if (parameter != null && Performance.class.equals(parameter.getType())) {       supported = true;     }     return supported; ```  For the `ParameterContext`, it wouldn't make sense to ever have a non-null parameter (otherwise it would be a `SomethingElseContext`), so this code is probably completely unnecessary.  As a defensive coder, I put it in anyway.  Here are my recommendations in order of priority/complexity:  -   [ ] For every returned value, explicitly state in the Javadoc whether or not the return type may be null. -   [ ] Globally use `Optional` when a return type might be `null`. -   [ ] State in the User Guide that no public APIs ever return `null`. -   [ ] Add the JSR-305 annotation library with a provided scope and add `@CheckForNull`, `@Nonnull` and `@Nullable` to all public APIs.  I know the JUnit team's policy on avoiding dependencies - adding JSR-305 as provided allows those of us who chose to perform static analysis on our Engine, Extension and test code to choose to add the dependency to our classpath.  ## Related Resources  - There is additional detail in #741. - [SPR-15540](https://jira.spring.io/browse/SPR-15540) and the [related commit](https://github.com/spring-projects/spring-framework/commit/f813712f5b413b354560cd7cc006352e9defa9a3).","closed","status: stale,","smoyer64","2016-06-25T15:51:47Z","2021-06-19T12:50:10Z"
"","491","Dynamic tests are miscounted and unrooted when run in Eclipse","When tests produced by a @TestFactory are run in Eclipse via the JUnitPlatform runner, the dynamic test method is properly shown in the test hierarchy but the tests created by those factories are displayed under the ""Unrooted Tests"" grouping.  While the dynamic test method is shown as a test container, there are no attached children and the ""expander"" doesn't work.  The dynamic test methods are however counted as tests.  When the attached JUnit5 tests are run, Eclipse reports 19 tests instead of 16 and the dynamic tests are not shown in the hierarchy under the method that created them.  One other minor issue is that the test method name is being appended to the generated name (without a space or a trailing parenthesis).  ![junit5-dynamic-tests-in-eclipse](https://cloud.githubusercontent.com/assets/328333/18208003/95cb1198-70fb-11e6-931f-f549d32cf045.png)  [DynamicTests.java.zip](https://github.com/junit-team/junit5/files/452259/DynamicTests.java.zip)","closed","status: invalid,","smoyer64","2016-09-02T14:39:23Z","2016-09-06T13:28:16Z"
"","148","Surefire report displays wrong test count","When running the tests with `mvn test` on a console surefire displays a wrong number of executed tests. Given a single class with one test method, surefire reports ""3 tests executed"".  Debugging into the tests I found this is the sum of all TestIdentifiers of the test class: the test method, the test class and ""JUnit 5"". To display the correct test count only `TestIdentifier`s with `test==true` should be counted.","closed","3rd-party: Maven Surefire,","sbley","2016-02-05T08:23:33Z","2019-08-07T08:36:45Z"
"","284","JUnit5Plugin does not find test classes after 'gradle assemble'","When I run `gradlew build` (Gradle 2.13) locally on Windows 8.1 for my project https://github.com/bkimminich/kata-botwars, I get my tests executed:  ``` C:\Data\Github\kata-botwars>gradlew build :botwars-java:compileJava                                                                                      :botwars-java:processResources UP-TO-DATE :botwars-java:classes :botwars-java:jar :botwars-java:startScripts                  :botwars-java:distTar :botwars-java:distZip :botwars-java:assemble :botwars-java:checkstyleMain                                                                      :botwars-java:compileTestJava                  :botwars-java:processTestResources UP-TO-DATE :botwars-java:testClasses :botwars-java:checkstyleTest UP-TO-DATE :botwars-java:junit5Test                  Mai 27, 2016 4:51:07 PM org.junit.gen5.launcher.main.ServiceLoaderTestEngineRegistry loadTestEngines INFORMATION: Discovered TestEngines with IDs [junit5]  Test run finished after 100 ms:junit5Test [        11 tests found     ] [         1 tests skipped   ] [        10 tests started   ] [         0 tests aborted   ] [        10 tests successful] [         0 tests failed    ]  :botwars-java:test                                                                       :botwars-java:check :botwars-java:build  BUILD SUCCESSFUL  Total time: 9.786 secs ```  Now after pushing and having Travis-CI pick up the commit, the tests are not executed at all:  ``` Test run finished after 3 ms [         0 tests found     ] [         0 tests skipped   ] [         0 tests started   ] [         0 tests aborted   ] [         0 tests successful] [         0 tests failed    ] ```  (Full log: https://s3.amazonaws.com/archive.travis-ci.org/jobs/133152764/log.txt)","closed","theme: build,","bkimminich","2016-05-27T14:56:38Z","2016-05-27T21:14:08Z"
"","586","Error with 5.0.0-M3 in IntelliJ","When I changed the build from 5.0.0-M2 to 5.0.0-M3 within a project in IntelliJ 2016.3 I got following error, when trying to run tests; ``` Dez 05, 2016 10:30:44 PM org.junit.platform.launcher.core.ServiceLoaderTestEngineRegistry loadTestEngines INFORMATION: Discovered TestEngines with IDs: [junit-jupiter, junit-vintage] Exception in thread ""main"" java.lang.NoSuchMethodError: org.junit.platform.commons.util.Preconditions.notNull([Ljava/lang/Object;Ljava/lang/String;)[Ljava/lang/Object; 	at org.junit.platform.launcher.core.DefaultLauncher.registerTestExecutionListeners(DefaultLauncher.java:71) 	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:44) 	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:237) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147) ``` This error even comes up within the `junit5-gradle-consumer` sample project. M2 is fine, M3 produces this error, which tells me, that allegedly a method `notNull(Object, String, Object)` was called, which doesn't exists, but I don't find no clue for this strange behavior.","closed","component: Platform,","tetrodoxin","2016-12-05T21:40:09Z","2019-07-19T19:33:06Z"
"","215","[junit-console] OS X terminal: ensure to restore default font color after running tests","When executing `junit-console`, it sometimes happens (e.g., when the process is killed) that the standard font color is not restored after `junit-console` terminated.  A way to reproduce this behavior: if the current console output is painted a different color by `ColoredPrintingTestListener`, e.g., green, hitting `ctrl+c` will paint all subsequent lines also green.","closed","component: Platform,","bmalinowsky","2016-03-25T18:17:45Z","2018-12-10T12:36:26Z"
"","379","Provide opt-in support for technical names instead of display names for JUnitPlatform runner","When `JUnitPlatform` is used through build tools such as Gradle or Bamboo, using display names for test and container descriptors causes them to be shown in the default package. To provide a good interim solution, f7b93a3f2818494048b741dbbf4b10ff2e02557a changed the names in `Description` objects for test descriptors to use class and method names. ## Deliverables - [x] Introduce new annotation `@UseTechnicalNames` to enable this behavior. When the annotation is not present, display names will be used (as before). - [x] Use class name for suite descriptions, too, if `@UseTechnicalNames` is present.","closed","theme: build,","marcphilipp","2016-07-06T07:43:25Z","2019-01-24T16:28:38Z"
"","459","Enable to specify expected exception message reg exp","What we use in TestNG but miss in JUnit is possibility to specify expected exception message reg exp.  In our project we use 1 exception but throw 100s of different error codes, e.g. PROCESS_NOT_FOUND(66803), etc.  In our case, it does not make sense to create specific exception class for each such error code.  In our tests with TestNG we use: @Test(expectedExceptionsMessageRegExp = ""._errorCode=66803._"") public void testProcessNotFound() { }  We would find it helpful if similar functionality would be added to JUnit5.","closed","","ondrejlerch","2016-08-12T07:42:37Z","2016-08-12T08:28:44Z"
"","247","Improve comment on 'ExtensionContext.Store::getOrComputeIfAbsent'","What the title says... ;)  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","nipafx","2016-05-07T18:22:15Z","2016-05-07T18:37:19Z"
"","583","Load and register custom TestExecutionListener implementations automatically","What about adding support for loading custom `TestExecutionListener` implementations via the Service API to the console launcher?  Enhance (and document) [ExecuteTestsTask#registerListeners](https://github.com/junit-team/junit5/blob/master/junit-platform-console/src/main/java/org/junit/platform/console/tasks/ExecuteTestsTask.java#L90) with: ```java ServiceLoader.load(TestExecutionListener.class)   .forEach(launcher::registerTestExecutionListeners); ```  Or add the load and register functionality to the platform `DefaultLauncher` itself?","closed","component: Platform,","sormuras","2016-12-04T10:24:38Z","2016-12-09T05:33:37Z"
"","578","Error while running junitPlatformTest Gradle task","We're using Junit platform Runner for `Spek` tests in Kotlin. Since yesterday, our gradle junitPlatformTest task has been failing with the following error.   ``` 09:54:57.888 [DEBUG] [org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter] Executing actions for task ':vw-profile-api:junitPlatformTest'. 09:54:57.889 [INFO] [org.gradle.process.internal.DefaultExecHandle] Starting process 'command '/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/bin/java''. Working directory: /Users/dilabuser/workspace/reisepass/vw-profile-api Command: /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/bin/java -Dfile.encoding=UTF-8 -Duser.country=US -Duser.language=en -Duser.variant -cp /Users/dilabuser/workspace/reisepass/vw-profile-api/build/classes/test:/Users/dilabuser/workspace/reisepass/vw-profile-api/build/resources/test:/Users/dilabuser/workspace/reisepass/vw-profile-api/build/classes/main:/Users/dilabuser/workspace/reisepass/vw-profile-api/build/resources/main:/Users/dilabuser/workspace/reisepass/json-store/build/libs/json-store.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib/1.0.5-2/9a397ba5477bf49ae0418cc3e392b3c0e5a112d1/kotlin-stdlib-1.0.5-2.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.module/jackson-module-kotlin/2.8.4/4b2441ff3a2a1cf59c655df6100d5e57fe9925f1/jackson-module-kotlin-2.8.4.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-web/1.4.2.RELEASE/7145c258f8fba4067f9e3880fad23586c9b8ff10/spring-boot-starter-web-1.4.2.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-test/1.4.2.RELEASE/564b798522d811461ce6c8792c063ae2308898f8/spring-boot-starter-test-1.4.2.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.jetbrains.spek/spek-api/1.0.89/d95845968a41202319071525b87b023a42e8a685/spek-api-1.0.89.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-runner/1.0.0-M2/cd83cbb3172350ff02cd3c62a29b131c53d765b/junit-platform-runner-1.0.0-M2.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.skyscreamer/jsonassert/1.4.0/9cdbb373a06f6513e51e8c545ee6a5e981463edb/jsonassert-1.4.0.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.jetbrains.spek/spek-junit-platform-engine/1.0.89/95cf7b84f44354b761c1776fa0867cdb1da348c/spek-junit-platform-engine-1.0.89.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.mariadb.jdbc/mariadb-java-client/1.5.5/48603aa9dca7eaac8073260e7f6c206f1c8dc09c/mariadb-java-client-1.5.5.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-jdbc/1.4.2.RELEASE/706b5cd5996bd8c03248c3236e90e9d2d7c948db/spring-boot-starter-jdbc-1.4.2.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/3.2.1/88347e9a484152e9b80fbad7648d1b552a8cff78/flyway-core-3.2.1.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-runtime/1.0.5-2/16ba409719189072db06433a3c381015c0877998/kotlin-runtime-1.0.5-2.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-databind/2.8.4/1c36c81e79cacdf48116afba8495e3393d267ba1/jackson-databind-2.8.4.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-annotations/2.8.0/45b426f7796b741035581a176744d91090e2e6fb/jackson-annotations-2.8.0.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-reflect/1.0.3/ed9cbaeb8dccd2027348185044012aac145a5c61/kotlin-reflect-1.0.3.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter/1.4.2.RELEASE/c6068dc9688c12509bb1c36fcf6ff4817d46cce2/spring-boot-starter-1.4.2.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-tomcat/1.4.2.RELEASE/1ab1939bb566bbaf25cc1f50cdf955b6c927c4d3/spring-boot-starter-tomcat-1.4.2.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.hibernate/hibernate-validator/5.2.4.Final/fb18766b576aa6632bcfe9a20a023cbd52bf9769/hibernate-validator-5.2.4.Final.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework/spring-web/4.3.4.RELEASE/719f05404ba8a9de1516398d31d9622042584f0d/spring-web-4.3.4.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework/spring-webmvc/4.3.4.RELEASE/79529d7ea72045e92e3dbeb0f4f6919093f47137/spring-webmvc-4.3.4.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-test/1.4.2.RELEASE/c94582bccb1dbc5599bd8d59a703e3650f9adcf3/spring-boot-test-1.4.2.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-test-autoconfigure/1.4.2.RELEASE/12733afdfae9edcb0a1a2e98c3b07815986d1ee4/spring-boot-test-autoconfigure-1.4.2.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/com.jayway.jsonpath/json-path/2.2.0/22290d17944bd239fabf5ac69005a60a7ecbbbcb/json-path-2.2.0.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.assertj/assertj-core/2.5.0/fcd21db4c5f33e5dcac69bf1816415fe0647582f/assertj-core-2.5.0.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.mockito/mockito-core/1.10.19/e8546f5bef4e061d8dd73895b4e8f40e3fe6effe/mockito-core-1.10.19.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-library/1.3/4785a3c21320980282f9f33d0d1264a69040538f/hamcrest-library-1.3.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework/spring-core/4.3.4.RELEASE/da373e491d3863477568896089ee9457bc316783/spring-core-4.3.4.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework/spring-test/4.3.4.RELEASE/a4e28d4eaaa6174928c3edf784faba78bfc046ec/spring-test-4.3.4.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-launcher/1.0.0-M2/2c7f203cd470023891184a6e52d9562c9cc729bc/junit-platform-launcher-1.0.0-M2.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.apache.tomcat/tomcat-jdbc/8.5.6/feb10a9e22f70565c7556f327b0481dba8587bbc/tomcat-jdbc-8.5.6.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework/spring-jdbc/4.3.4.RELEASE/42175d194cf6aa7c716c0887f30255e5c0a5262c/spring-jdbc-4.3.4.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-core/2.8.4/ca365c0817cc345ea831cae7c4e9b42a72b32281/jackson-core-2.8.4.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot/1.4.2.RELEASE/19ecf2582f58722c08147918982227885f6e31b1/spring-boot-1.4.2.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-autoconfigure/1.4.2.RELEASE/368e464f9ce4622722ce0944cc4ba6fa71332b68/spring-boot-autoconfigure-1.4.2.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-logging/1.4.2.RELEASE/2799c67340d6a27af5f17a7ecdfa1f50cb1d152d/spring-boot-starter-logging-1.4.2.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.yaml/snakeyaml/1.17/7a27ea250c5130b2922b86dea63cbb1cc10a660c/snakeyaml-1.17.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.apache.tomcat.embed/tomcat-embed-core/8.5.6/960834b5abc6b2135250487abf6c060a0fa5a22e/tomcat-embed-core-8.5.6.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.apache.tomcat.embed/tomcat-embed-el/8.5.6/a102298d8dc72f4065533d5962953d753b172602/tomcat-embed-el-8.5.6.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.apache.tomcat.embed/tomcat-embed-websocket/8.5.6/6f6940a216b380ea8506530c374fcfeef820ba54/tomcat-embed-websocket-8.5.6.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/javax.validation/validation-api/1.1.0.Final/8613ae82954779d518631e05daa73a6a954817d5/validation-api-1.1.0.Final.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.2.1.Final/fedf11b3d4665a434b554a5891fe7f208f029f45/jboss-logging-3.2.1.Final.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.1.0/dbbd699a1486ad0f2ed6f5af6cfed66acacb9056/classmate-1.1.0.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework/spring-aop/4.3.4.RELEASE/43f3d4a43a8dcc91137e092b981101332a645e4b/spring-aop-4.3.4.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/4.3.4.RELEASE/4fbf4327d6c7f81c821f2d56e8695d394c7b930a/spring-beans-4.3.4.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework/spring-context/4.3.4.RELEASE/c8086505715fba4927fed3d7e3314692817413b6/spring-context-4.3.4.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework/spring-expression/4.3.4.RELEASE/5573955b5373669be0e352a1eb5dc9c87b069cb6/spring-expression-4.3.4.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/net.minidev/json-smart/2.2.1/5b9e5df7a62d1279b70dc882b041d249c4f0b002/json-smart-2.2.1.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.objenesis/objenesis/2.1/87c0ea803b69252868d09308b4618f766f135a96/objenesis-2.1.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/commons-logging/commons-logging/1.2/4bfc12adfe4842bf07b657f0369c4cb522955686/commons-logging-1.2.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-engine/1.0.0-M2/fe36ee348295ec740b068b3dd46ec5c733134eb5/junit-platform-engine-1.0.0-M2.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.apache.tomcat/tomcat-juli/8.5.6/83d2d1e3362ecca504f3bf8ed1bc4cc451754d24/tomcat-juli-8.5.6.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.springframework/spring-tx/4.3.4.RELEASE/303d00338193c04312426325121572d2fc1d4ec5/spring-tx-4.3.4.RELEASE.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/ch.qos.logback/logback-classic/1.1.7/9865cf6994f9ff13fce0bf93f2054ef6c65bb462/logback-classic-1.1.7.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.slf4j/jcl-over-slf4j/1.7.21/331b564a3a42f002a0004b039c1c430da89062cd/jcl-over-slf4j-1.7.21.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.slf4j/jul-to-slf4j/1.7.21/2f22c882ffa479d1e9ff4eb0e8e2c29f2a0871ed/jul-to-slf4j-1.7.21.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.slf4j/log4j-over-slf4j/1.7.21/b3700d97464d99bdcd42c0177d6e7951c94d75ff/log4j-over-slf4j-1.7.21.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/net.minidev/accessors-smart/1.1/a527213f2fea112a04c9bdf0ec0264e34104cd08/accessors-smart-1.1.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-commons/1.0.0-M2/a6f1f88b10512623ed14e8b93be10b7590f74c11/junit-platform-commons-1.0.0-M2.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.opentest4j/opentest4j/1.0.0-M1/b091255eafd515995a5c5fa042cd8db6f4860bf6/opentest4j-1.0.0-M1.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/ch.qos.logback/logback-core/1.1.7/7873092d39ef741575ca91378a6a21c388363ac8/logback-core-1.1.7.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.ow2.asm/asm/5.0.3/dcc2193db20e19e1feca8b1240dbbc4e190824fa/asm-5.0.3.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/junit/junit/4.12/2973d150c0dc1fefe998f834810d68f278ea58ec/junit-4.12.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-api/1.7.21/139535a69a4239db087de9bab0bee568bf8e0b70/slf4j-api-1.7.21.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-launcher/1.0.0-M3/86525f5274dee56f533f938f9aeae9a3716f8c4/junit-platform-launcher-1.0.0-M3.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-console/1.0.0-M3/fec4071130bcec4081b868a59fa6cad47f11733/junit-platform-console-1.0.0-M3.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-engine/1.0.0-M3/39a1db55680c9f32985c84ba2951912138b18ac3/junit-platform-engine-1.0.0-M3.jar:/Users/dilabuser/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-commons/1.0.0-M3/d5c77e2df6a820ae30fc17f21a3f8cfc03183980/junit-platform-commons-1.0.0-M3.jar org.junit.platform.console.ConsoleLauncher --hide-details --all -e spek -r /Users/dilabuser/workspace/reisepass/vw-profile-api/build/test-results/junit-platform /Users/dilabuser/workspace/reisepass/vw-profile-api/build/classes/main /Users/dilabuser/workspace/reisepass/vw-profile-api/build/resources/main /Users/dilabuser/workspace/reisepass/vw-profile-api/build/classes/test /Users/dilabuser/workspace/reisepass/vw-profile-api/build/resources/test 09:54:57.890 [DEBUG] [org.gradle.process.internal.DefaultExecHandle] Environment for process 'command '/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/bin/java'': {PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin, HISTCONTROL=ignorespace:erasedups, JAVA_ARCH=x86_64, GREP_COLOR=1;33, HISTSIZE=5000, TERM=xterm-256color, BASH_IT=/Users/dilabuser/.bash_it, COMMAND_MODE=unix2003, BASH_IT_THEME=bobby, AUTOFEATURE=true autotest, ITERM_SESSION_ID=w0t0p0:38D51205-34BA-4542-B13F-A7A542C0F2D0, LOGNAME=dilabuser, TERM_PROGRAM_VERSION=3.0.12, PWD=/Users/dilabuser/workspace/reisepass, XPC_SERVICE_NAME=0, SHELL=/bin/bash, APP_NAME_87385=Gradle, TERM_PROGRAM=iTerm.app, APP_ICON_87385=/Users/dilabuser/workspace/reisepass/media/gradle.icns, LSCOLORS=Gxfxcxdxdxegedabagacad, JAVA_MAIN_CLASS_87385=org.gradle.wrapper.GradleWrapperMain, OLDPWD=/Users/dilabuser/workspace/reisepass, SECURITYSESSIONID=186a7, USER=dilabuser, TMPDIR=/var/folders/z9/6hbzfm7s5jv4k6cl6k06zmbm0000gn/T/, ITERM_PROFILE=Default, SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.SgWMTdecDi/Listeners, XPC_FLAGS=0x0, TERM_SESSION_ID=w0t0p0:38D51205-34BA-4542-B13F-A7A542C0F2D0, DESTINATION=/var/folders/z9/6hbzfm7s5jv4k6cl6k06zmbm0000gn/T/iTerm 2.1.4 Update, __CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0, Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.I2R2TvhBi0/Render, com.apple.java.jvmTask=CommandLine, COLORFGBG=7;0, LC_CTYPE=UTF-8, HOME=/Users/dilabuser, SHLVL=1} 09:54:57.890 [DEBUG] [org.gradle.process.internal.DefaultExecHandle] Changing state to: STARTING 09:54:57.890 [DEBUG] [org.gradle.process.internal.DefaultExecHandle] Waiting until process started: command '/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/bin/java'. 09:54:57.898 [DEBUG] [org.gradle.process.internal.DefaultExecHandle] Changing state to: STARTED 09:54:57.898 [DEBUG] [org.gradle.process.internal.ExecHandleRunner] waiting until streams are handled... 09:54:57.898 [INFO] [org.gradle.process.internal.DefaultExecHandle] Successfully started process 'command '/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/bin/java'' 09:54:58.155 [ERROR] [system.err] Exception in thread ""main"" org.junit.platform.commons.JUnitException: Error parsing command-line arguments 09:54:58.155 [ERROR] [system.err]       at org.junit.platform.console.options.JOptSimpleCommandLineOptionsParser.parse(JOptSimpleCommandLineOptionsParser.java:44) 09:54:58.155 [ERROR] [system.err]       at org.junit.platform.console.ConsoleLauncher.execute(ConsoleLauncher.java:52) 09:54:58.155 [ERROR] [system.err]       at org.junit.platform.console.ConsoleLauncher.main(ConsoleLauncher.java:39) 09:54:58.172 [ERROR] [system.err] Caused by: org.junit.platform.joptsimple.UnrecognizedOptionException: all is not a recognized option 09:54:58.173 [ERROR] [system.err]       at org.junit.platform.joptsimple.OptionException.unrecognizedOption(OptionException.java:108) 09:54:58.173 [ERROR] [system.err]       at org.junit.platform.joptsimple.OptionParser.handleLongOptionToken(OptionParser.java:510) 09:54:58.173 [ERROR] [system.err]       at org.junit.platform.joptsimple.OptionParserState$2.handleArgument(OptionParserState.java:56) 09:54:58.173 [ERROR] [system.err]       at org.junit.platform.joptsimple.OptionParser.parse(OptionParser.java:396) 09:54:58.173 [ERROR] [system.err]       at org.junit.platform.console.options.JOptSimpleCommandLineOptionsParser.parse(JOptSimpleCommandLineOptionsParser.java:40) 09:54:58.173 [ERROR] [system.err]       ... 2 more 09:54:58.184 [DEBUG] [org.gradle.process.internal.DefaultExecHandle] Changing state to: FAILED 09:54:58.184 [DEBUG] [org.gradle.process.internal.DefaultExecHandle] Process 'command '/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/bin/java'' finished with exit value 1 (state: FAILED) ```  Our  build.gradle  file looks like below:  ```groovy buildscript {     ext {         kotlinVersion = '1.0.5-2'         springBootVersion = '1.4.2.RELEASE'     }      repositories {         mavenCentral()     }     dependencies {         classpath ""org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}""         classpath ""org.junit.platform:junit-platform-gradle-plugin:1.0.0-M2""     } }  apply plugin: 'kotlin' apply plugin: 'org.junit.platform.gradle.plugin'  repositories {     mavenCentral() }  junitPlatform {     engines {         include 'spek'     } }  dependencies {     compile(""org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"")     compile(""org.springframework.boot:spring-boot-starter-web:${springBootVersion}"")      testCompile(""org.springframework.boot:spring-boot-starter-test:${springBootVersion}"")     testCompile(""junit:junit:4.11"")      testCompile(""org.jetbrains.spek:spek-api:1.0.89"")     testCompile(""org.junit.platform:junit-platform-runner:1.0.0-M2"")     testCompile(""org.jetbrains.spek:spek-junit-platform-engine:1.0.89"") } ```  Seems like, even though we specify the version of junit-platform-runner to be `1.0.0-M2`, it uses latest `1.0.0-M3`. And it runs with `ConsoleLauncher` with a `--all` option which is not supported.  If we do not apply the junit-platform plugin and add it as a compile time dependency for our tests instead, everything seems to be working fine.  Thanks!","closed","component: Platform,","vw-reisepass","2016-12-01T09:53:41Z","2016-12-04T10:40:21Z"
"","86","Create rudimentary XML test report","We should at least provide a basic XML report to allow integration into Jenkins and other CI solutions.  The format is not formally specified, but here are some resources:  - http://help.catchsoftware.com/display/ET/JUnit+Format - Jenkin's XSD: https://svn.jenkins-ci.org/trunk/hudson/dtkit/dtkit-format/dtkit-junit-model/src/main/resources/com/thalesgroup/dtkit/junit/model/xsd/junit-4.xsd - Stack overflow: http://stackoverflow.com/questions/442556/spec-for-junit-xml-output/4926073#4926073  Things to implement: - [x] ReportGeneratingListener (probably in `junit-launcher`) - [x] Option -r / --report  in `junit-console` - [x] Trigger console option in `junit-gradle`","closed","theme: reporting,","jlink","2016-01-05T10:10:27Z","2021-03-24T14:53:09Z"
"","245","Build against opentest4j 1.0.0-M1","We are currently building against opentest4j snapshots, but before JUnit 5.0 M1 is released we will need to build against opentest4j 1.0.0-M1.","closed","theme: build,","sbrannen","2016-05-06T16:19:01Z","2016-05-24T21:27:42Z"
"","562","Documents the use of ExtensionContext.Store.","Using the existing TimingExtension as an example.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  Resolves #287","closed","component: Jupiter,","smoyer64","2016-11-04T20:19:19Z","2016-11-08T12:35:01Z"
"","789","Unable to run a single test method from idea: java.lang.Exception: No tests found matching Method ... from org.junit.vintage.engine.descriptor.RunnerRequest","Using IDEA version that provides support for junit 5 M3  IntelliJ IDEA 2017.1 Build #IC-171.3780.107, built on March 22, 2017 JRE: 1.8.0_112-release-736-b13 amd64 JVM: OpenJDK 64-Bit Server VM by JetBrains s.r.o Windows 7 6.1  When attempting to run a single java test method (right click on method name and select run) I get the exception below. If I run the entire test class everything passes successfully. Attaching the full console output (full.txt)  ```  WARNING: Method 'public void com.pcbsys.nirvana.client.nChannelToChannelJoinTests.subscribeAndPublishTest() throws java.lang.Exception' could not be resolved  java.lang.Exception: No tests found matching Method subscribeAndPublishTest(com.pcbsys.nirvana.client.nChannelToChannelJoinTests) from org.junit.vintage.engine.descriptor.RunnerRequest@3911c2a7  	  at org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:40)  at org.junit.vintage.engine.discovery.TestClassRequestResolver.determineRunnerTestDescriptor(TestClassRequestResolver.java:74)  at org.junit.vintage.engine.discovery.TestClassRequestResolver.addRunnerTestDescriptor(TestClassRequestResolver.java:63)  at org.junit.vintage.engine.discovery.TestClassRequestResolver.populateEngineDescriptorFrom(TestClassRequestResolver.java:57)  at org.junit.vintage.engine.discovery.JUnit4DiscoveryRequestResolver.populateEngineDescriptor(JUnit4DiscoveryRequestResolver.java:88)  at org.junit.vintage.engine.discovery.JUnit4DiscoveryRequestResolver.resolve(JUnit4DiscoveryRequestResolver.java:49)  at org.junit.vintage.engine.VintageTestEngine.discover(VintageTestEngine.java:47)  at org.junit.platform.launcher.core.DefaultLauncher.discoverRoot(DefaultLauncher.java:109)  at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)  at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:61)  at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51)  at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:237)  at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ```  Original issue logged under IDEA project but looks like it belongs to JUNIT: https://youtrack.jetbrains.com/issue/IDEA-170573","closed","component: Vintage,","Vazzilena","2017-04-11T09:43:20Z","2017-05-03T08:12:28Z"
"","377","User guide fix: @InjectMock -> @Mock","User guide fix: #376  I have found only 2 instances of `@InjectMock`.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","volkovs","2016-07-04T21:37:25Z","2016-07-05T11:42:01Z"
"","90","Add mechanism for launcher to detect engine capabilities","Use cases: - Launcher gives warning if a Specification (e.g. AllTestsSpecification) is not supported, so that user knows that their tests might not be picked up as expected. - IDE/Launcher switches on features (e.g. Tagging) only if all/some registered engines support it. - Launcher/IDE won't use features that break backwards compatibility  Potential capabilities to announce: - Supported specifications - Tagging - Engine filters - Support for opentest4j - Custom events - Supported API version (starting with 5.0)?  This feature needs both: - A way for engines to declare their capabilities - A way for users of launcher to find out about capabilities","open","component: Platform,","jlink","2016-01-06T11:39:11Z","2022-06-22T17:12:40Z"
"","138","Use 'actual' and 'expected' properties when instantiating AssertionFailedError","Use `new AssertionFailedError(message, expected, actual)` in the following cases: - [X] Change `expected` and `actual` instance variables and parameters to only store `Serializable` values. - [x] `Assertions.assertEquals` - [x] ~~`Assertions.assertNotEquals`~~ (see #282) - [x] `Assertions.assertSame` - [x] ~~`Assertions.assertNotSame`~~ (see #282) - [x] `Assertions.assertNull` - [x] ~~`Assertions.assertNotNull`~~ (see #282)","closed","component: OTA,","jlink","2016-01-27T12:45:49Z","2016-05-24T15:42:01Z"
"","692","Upgrade to Gradle 3.4","Upgrade gradle wrapper to use gradle 3.4  Fix UnsupportedOperationException in JUnitPlatformPluginSpec.groovy.  Closes: #690  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","theme: build,","gaganis","2017-02-26T12:27:35Z","2017-03-12T15:37:09Z"
"","446","Add JavaOne 2016 Session","Updates to speakers.json and events.json to include our 2016 JavaOne presentation.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","smoyer64","2016-08-03T02:16:14Z","2017-02-15T21:58:13Z"
"","345","Update documentation regarding JUnit Platform, Jupiter, and Vintage","Update the following documentation regarding the introduction of JUnit Platform, Jupiter, and Vintage in #286. - [x] README.md - [x] User Guide   - [x] Add a new section to the _Overview_ explaining that _JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage_ - [x] Javadoc   - [x] `junit-jupiter-api`   - [x] `junit-jupiter-engine`   - [x] `junit-platform-commons`   - [x] `junit-platform-console`   - [x] `junit-platform-engine`   - [x] `junit-platform-gradle-plugin`   - [x] `junit-platform-launcher`   - [x] `junit-platform-runner`   - [x] `junit-platform-surefire-provider`   - [x] `junit-vintage-engine`","closed","theme: web site,","sbrannen","2016-06-21T22:25:58Z","2016-06-30T20:01:23Z"
"","42","Remove sample-extension and sample-project from test execution during build","Until we have reimplemented the junit5 engine (see #39) we should not execute the tests of the sample projects, as they are built upon the new features.","closed","","bechte","2015-12-03T13:20:39Z","2015-12-03T13:55:00Z"
"","464","Introduce Assertions.assertAll(Stream)","Two new signatures for assertAll() would be useful:  ``` public static void assertAll(Stream executables) throws org.opentest4j.MultipleFailuresError;  public static void assertAll(java.lang.String heading, Stream executables) throws org.opentest4j.MultipleFailuresError; ```  When the Executable(s) enclosed by assertAll() are generated via a Stream, it's necessary to collect the Executable(s) and convert them to an array.","closed","component: Jupiter,","smoyer64","2016-08-15T16:37:33Z","2016-11-30T08:54:27Z"
"","398","Cannot build JUnit 5 on Microsoft Windows","Tried to run `gradlew clean test`, but at least two tests fail although [CI status is ""green""](https://travis-ci.org/junit-team/junit5/jobs/144558735).  ``` :platform-tests:junitPlatformTest  Test failures (2):   JUnit Jupiter:ColoredPrintingTestListenerTests:exceptionMessageIndented()     JavaMethodSource [javaClass = 'org.junit.platform.console.tasks.ColoredPrintingTestListenerTests', javaMethodName = 'exceptionMessageIndented', javaMethodParameterTypes = '']     => org.opentest4j.AssertionFailedError: expected:  Exception: Fail                expected:  but was:  > but was:  Exception: Fail                 expected:  but was:  >   JUnit Jupiter:ColoredPrintingTestListenerTests:executionSkippedMessageIndented()     JavaMethodSource [javaClass = 'org.junit.platform.console.tasks.ColoredPrintingTestListenerTests', javaMethodName = 'executionSkippedMessageIndented', javaMethodParameterTypes = '']     => org.opentest4j.AssertionFailedError: expected:  Reason: Test                   disabled > but was:  Reason: Test                    disabled >  Test run finished after 2363 ms [       360 tests found     ] [         0 tests skipped   ] [       360 tests started   ] [         0 tests aborted   ] [       358 tests successful] [         2 tests failed    ]  :platform-tests:junitPlatformTest FAILED  FAILURE: Build failed with an exception. ```  Also tried to run `gradlew clean check`, but got:  ``` :spotlessDocumentationCheck FAILED  FAILURE: Build failed with an exception.  * What went wrong: Execution failed for task ':spotlessDocumentationCheck'. > Format violations were found. Run 'gradlew spotlessApply' to fix them.     .github\PULL_REQUEST_TEMPLATE.md     CONTRIBUTING.md     documentation\README.md     documentation\src\docs\asciidoc\advanced-topics.adoc     documentation\src\docs\asciidoc\api-evolution.adoc     documentation\src\docs\asciidoc\contributors.adoc     documentation\src\docs\asciidoc\extensions.adoc     documentation\src\docs\asciidoc\index.adoc     documentation\src\docs\asciidoc\launcher-api.adoc     documentation\src\docs\asciidoc\migration-from-junit4.adoc     documentation\src\docs\asciidoc\overview.adoc     documentation\src\docs\asciidoc\release-notes-5.0.0-ALPHA.adoc     documentation\src\docs\asciidoc\release-notes-5.0.0-M1.adoc     documentation\src\docs\asciidoc\release-notes.adoc     documentation\src\docs\asciidoc\running-tests.adoc     documentation\src\docs\asciidoc\writing-tests.adoc     LICENSE.md     README.md  * Try: Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.  BUILD FAILED ```  Tried to build with Gradle 2.14 as well as 3.0-20160702000020+0000. Do I have a local problem?","closed","theme: build,","PeterWippermann","2016-07-13T22:21:11Z","2016-07-16T13:58:37Z"
"","894","Gradle ""clean build"" failure due to deprecated ""junit-jupiter-migration-support""","Tried to build master on my Mac but `:platform-tests:junitPlatformTest` failed.  ``` Failures (1):   JUnit Jupiter:AutomaticModuleNameTests:automaticModuleName(String):[3] junit-jupiter-migration-support     MethodSource [className = 'org.junit.AutomaticModuleNameTests', methodName = 'automaticModuleName', methodParameterTypes = 'java.lang.String']     => org.opentest4j.AssertionFailedError: `Automatic-Module-Name` not found in manifest of JAR: ../junit-jupiter-migration-support/build/libs/junit-jupiter-migration-support-5.0.0-SNAPSHOT.jar ==> expected: not  ```  * At SHA - 155a2dd995e98ad7ce8e6615a74e127598a0173b * Build Scan: https://scans.gradle.com/s/i7fnzauqooo36#summary  ## Reason > `junit-jupiter-migration-support` was renamed to `junit-jupiter-migrationsupport` and the directory is still present in my repository.  See https://github.com/junit-team/junit5/commit/a19e6ee83bace8554c761ff20d2a9a0cbcd1f6ec for details  ## Solution Manually remove `junit-jupiter-migration-support` or use `git clean -d`","closed","3rd-party: Gradle,","mkobit","2017-06-20T21:00:37Z","2017-06-21T06:53:17Z"
"","619","Support for discovering and launching tests on Java 7","Tool providers that want to discover and launch JUnit 5-based tests with the help of the [JUnit Platform Launcher API](http://junit.org/junit5/docs/current/user-guide/#launcher-api) are currently limited to the use of Java 8. Some of the methods exposed by the Launcher API only work with Java 8 language level and do not provide an alternative e.g. the use of static interface methods like [`ClassNameFilter.includeClassNamePatterns `](https://github.com/junit-team/junit5/blob/master/junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClassNameFilter.java#L59).  Do you have plans to support an API fully usable with Java 7? I am asking specifically as a follow up for a [discussion on the Gradle forum](https://discuss.gradle.org/t/core-support-for-junit-platform-a-k-a-junit-5/19487/3):  > It seems that JUnit Platform only supports Java 8 and higher. We will need to keep in mind that Gradle 3.x still supports Java 7. That's ok, we fork a new JVM for tests and can enforce Java8+ semantics at runtime. That just means that we cannot introduce compile-time dependencies to Gradle that don't compile on Java 7.","closed","status: declined,","bmuschko","2016-12-29T22:25:10Z","2017-03-12T10:58:40Z"
"","636","Introduce Supplier variants of timeout assertions","To whom it may concern,  I'd like to be able to have a test, which fails if a particular code snippet takes longer than a certain amount of time to execute.  As far as I can tell, there is currently only the ability to set a [timeout at the test level](https://github.com/junit-team/junit4/wiki/timeout-for-tests)... however I feel this has the undesirable side effect of validating the execution time of the test code... I'd like to test only the execution code.  More than happy to complete a pull request - depending on whether this behaviour is already supported and whether lambdas are supported.  **An example:**  Given the following timeout method  ```Java /**  * Ensures a function completes within the given timeout.  */ public static  Result timeout(final long timeoutMillis, Supplier invoke){     long start = System.currentTimeMillis();     Result result = invoke.get();     long duration = System.currentTimeMillis() - start;     if (duration > timeoutMillis) {         Assert.fail(String.format(""Actual time %s exceeded timeout %s (millis)."", duration,                  timeoutMillis));     }     return result; } ``` And the `sayHello` method takes 1000 milliseconds to return When I test the `sayHello` method  ```Java @Test public void testSomeMethod(){     String greeting = timeout(500, () -> greetingService.sayHello(""Nick""));     assertEquals(""Hello Nick"", greeting); } ```  Then the test should fail with the message `Actual time 1000 exceeded timeout 500 (millis).`","closed","component: Jupiter,","nickgrealy","2017-01-23T00:59:30Z","2017-02-07T10:42:59Z"
"","748","Introduce extension point before test instantiation","To migrate our existing framework to JUnit 5 I'd like to hook into the lifecycle of JUnit 5 test execution before any test instance is created.  We want to configure the test environment for each test right before the test instance is created.   * TestInstancePostProcessor is too late, as instance fields have already been initialized.  * BeforeAll is not appropriate, as we need to configure the environment for each test run.   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ## Overview  Please describe your changes here and list any open questions you might have.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","codecholeric","2017-03-24T16:49:50Z","2019-07-19T14:54:07Z"
"","37","Investigate getting rid of external dependencies in junit-console","To be usable on the command-line, it would be nice if junit-console were a jar that includes all of its dependencies (fat-jar, uber-jar, ...).","closed","","marcphilipp","2015-12-03T10:00:01Z","2015-12-04T18:06:39Z"
"","298","BUG: Post Discovery Filtering fails when an engine has no test descriptor to filter from","This will, for example, lead to an exception when running JUnit5 only tests through Gradle and using `requireTag`, because due to #285 the junit4 engine is always present.","closed","type: bug,","jlink","2016-06-09T06:49:36Z","2016-06-09T09:03:40Z"
"","129","Introduced interface Launcher and renamed old to JUnit5Launcher","This was done to address yesterday's discussion that `Launcher` should be a top-level abstraction in module `launcher-api`.  Moreover, it further decouples clients from implementation.","closed","type: enhancement,","jlink","2016-01-20T09:40:44Z","2016-01-21T19:03:11Z"
"","512","Introduce Ant build support for the JUnit Platform","This question came up after a JUnit5 talk of mine:  Is anybody working on a JUnit5-Ant integration?","closed","component: Platform,","schauder","2016-09-15T12:48:18Z","2018-04-01T13:15:34Z"
"","73","Checkstyle for Javadoc","This pull request is related to #67 and adds Checkstyle to the Gradle build to check the following basics for Javadoc: - Paragraphs are separated by blank lines and prefixes with `` immediately before the first word of the paragraph (`JavadocParagraph`). - Exceptions documented using `@throws` on methods must be present on their signature (`JavadocMethod`). - The order of ""tags""/""at clauses"" must be `@author`, `@param`, `@return`, `@throws`, `@exception`, `@since`, `@see` (`AtclauseOrder`). - All ""tags""/""at clauses"" must have a description. (`NonEmptyAtclauseDescription`).","closed","","marcphilipp","2015-12-19T18:08:11Z","2015-12-20T08:31:25Z"
"","890","Clean up TestDescriptor API to enable reasoning about a TestPlan before executing it","This pull request is an attempt to solve #732, #508, and #879 in three independent but related commits.  ---  ### Definition of Done  - [X] There are no TODOs left in the code - [X] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [X] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [X] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [X] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [X] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [X] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","marcphilipp","2017-06-15T21:00:22Z","2017-06-18T12:54:25Z"
"","52","Introduce TestIdentifier (DTO for TestDescriptor)","This pull request introduces `TestIdentifier`, an immutable DTO that contains all the information IDEs and build tools should need. We could even make it `Serializable` in a next step, currently `TestSource` prevents this.  A `TestIdentifier` knows only about the ID of its parent and does not know about its children. The `TestPlan` can be used to query this information. `TestPlan` no longer implements `TestDescriptor` but rather manages the `TestIdentifier` tree structure.  The `TestPlan` is returned by `Launcher.discoverTests()` and passed to `TestExecutionListener` methods. I've merged `TestPlanExecutionListener` and `TestExecutionListener` and added `EngineExecutionListener`. Launcher now uses an adapter that maps from `TestDescription` to `TestIdentifier` using the `TestPlan`.  However, `EngineExecutionListener` is IMHO just an intermediate solution. I would rather remove the need for engines to call the right listener methods as discussed in #29.","closed","","marcphilipp","2015-12-07T14:24:51Z","2015-12-11T14:22:24Z"
"","134","Resolver based discovery mechanism","This pull request contains all changes that are required to switch to another discovery process. The new process is built upon resolvers and follows a clear structure for the unique id. It encapsulates all logic that is required to create and map a `TestDescriptor` with an guaranteed unique id within the `TestResolver`.  Advantages over the current discovery process: - No hard-coded rules for test discovery: The current approach needs to be changed in code in order to add new `TestDescriptors` within the test plan tree. The new approach allows to add children to a given parent any time during the test discovery phase. In this way, extension provider could also write their own `TestResolvers` that can parse arbitrary syntax trees (e.g. lambda, XML files, etc.) - the concept of a `TestResolver` simplifies the dependencies: A `TestResolver` has no dependency on other `TestResolver`s. It only knows about the `TestDescriptor` that it want to contribute new children to, and knows how to describe them in form of a `DiscoverySelector`. In this way, discovery can be done top-down (recursively) or bottom-up (exact match only). - it provides better maintainability by adding a clear separation of concerns: A `TestResolver` is responsible for creating the executable `TestDescriptors` and to resolve the `UniqueId` for it. It needs not to know about any other `TestResolver` in the system, but only about which `TestDescriptor` it wants to add children to. - Concentration of rules for `UniqueId`s: `TestResolver`s are responsible for creating and resolving `UniqueId`s. No other module will need to contain rules for modifying or changing an `UniqueId`. - easier integration of `DiscoveryFilter`: Each `TestResolver` might provide its own `DiscoveryFilters` that it will apply during discovery. This gains performance, since a `DiscoveryFilter` is applied upfront by its `TestResolver` and no `TestDescriptor` needs to be generated, at all. `DiscoveryFilter` might be understood as 'Tuning or Configuration parameters' for the `TestResolvers`  Team decision: Everybody should review this pull request until the next team Skype call on Tuesday. Then we will decide whether or not we will switch to the new discovery process.","closed","type: enhancement,","bechte","2016-01-24T12:17:13Z","2019-07-19T19:33:02Z"
"","798","Added favicon to userguide and javadocs.","This pull request adds the favicon to the userguide and the javadocs.","closed","","Andrei94","2017-04-19T15:43:36Z","2017-04-19T16:32:03Z"
"","530","Test Factory Extension","This PR is a shot at implementing #371. It creates a new extension point _TestFactoryExtension_. As a proof of concept, the machinery behind the `@TestFactory` annotation was moved to the new extension point. All tests pass with hardly any changes. ## Details  _TestFactoryExtensions_ implement `Stream createForMethod(TestExtensionContext)` and can be applied to methods (see caveat below). The extension machinery (in `TestFactoryExtensionResolver` and `TestFactoryExtensionMethodTestDescriptor`) identifies methods that were extended with _TestFactoryExtension_, instantiates the extension implementation, calls `createForMethod` to create the dynamic tests, and finally runs the tests.  The new `TestFactoryAnnotationExtension` (automatically applied to all `@TestFactory` methods) implements `TestFactoryExtension` by reflectively calling the extended method. It then returns the `Stream` the method produced.  This means the tasks (and code) from the now removed `TestFactoryTestDescriptor` were largely split between the new `TestFactoryExtensionMethodTestDescriptor` and `TestFactoryAnnotationExtension`. ## Trouble With `ExtensionRegistry`  There seem to be no tests verifying that `@TestFactory` methods can be called with parameters. That's a lucky coincidence because it doesn't work any more...  Resolving method parameters is part of applying extensions to the called method. To this end the now removed `TestFactoryTestDescriptor` called its `executableInvoker` with the extension registry it got from the engine execution context:  ``` java Object testFactoryMethodResult = executableInvoker.invoke(     method, instance, testExtensionContext, context.getExtensionRegistry()); ```  This is no longer possible because the task of invoking the test method was moved to the `TestFactoryExtension`, which is part of _junit-jupiter-api_. The extension registry lives in _junit-jupiter-engine_ and can not be referenced in and hence not passed to the extension.  Even if it could, it would be doubtful whether that's a good idea. The registry is only really usable together with the rest of JUnit's extension machinery. This is no problem for the `TestFactoryAnnotationExtension` because it lives in the same project (or so I thought until I realized that precisely this dependency `TestFactoryAnnotationExtension ~> ExecutableInvoker` caused a dependency cycle). But third-party extensions are not in that lucky situation. If they ever were to call methods to which extensions should be applied, they'd not only need the extension registry but rather a simplified `ExecutableInvoker` that already knows the relevant `TestExtensionContext` and `ExtensionRegistry` instances - partial application so to speak.  If you think this is worth discussing I'm happy to open an issue for it.  Coming back to the dependency cycle `TestFactoryAnnotationExtension ~> ExecutableInvoker`...It creates a dependency from the package `extension` to `execution`, which creates a cycle because `execution` already depends on `extension` because the latter contains the `ExecutionRegistry`. One fix for this would be to generally allow extensions to use features from `execution` and move the registry to the latter. While this might seem wrong at first, I saw that `ExtensionValuesStore` lives there as well, maybe providing precedence. ## Methods vs Containers  The current implementation only supports extending methods. But much of the code that's needed to extend whole containers is already present. What's missing is a `TestFactoryExtensionClassTestDescriptor`, which represents the extended container and calls `TestFactoryExtension::createForContainer` to create its tests. ## Naming  Most type names contain the word ""Extension"", which allows an easy distinction of types that belong to the new extension point and those that belong to `@TestFactory`. This made implementation easier and should also ease discussions. But I'd propose to drop the ""Extension"" in all type names to make them more succinct. That being said, it is unclear how `TestFactoryExtension` and `@TestFactory` should then be named.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","nipafx","2016-09-30T19:08:17Z","2020-09-08T18:29:57Z"
"","482","Reduce configuration time impact of versioning plugin","This partially fixes #480, only calling `git status` once per build. That's already a great improvement from 1.6s down to 0.7s for `gradle help`.  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","oehme","2016-08-27T10:07:11Z","2016-08-27T10:49:06Z"
"","525","Add overload of 'ExtensionContext::publishReportEntry'","This overload, just like the one on `TestReporter`, makes it easier to publish a single key-value pair.  There is also a small fix of a collection emptiness check in there.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","nipafx","2016-09-28T11:02:06Z","2016-09-28T15:56:12Z"
"","386","Improve documentation of DynamicTest lifecycle","This might not be a bug and may be as intended, but kinda hit me by surprise as I don't see anything about it in the user guide or java docs. It appears that when you generate `DynamicTest`s they are different from regular `@Test` methods in _not_ generating separate instances of the test class containing them for each method. For example, the following code:  ``` java public class FooTest {      @Test     public void foo() {         System.out.println( this );     }      @TestFactory     public Stream< DynamicTest > testFactory() {         return Stream.of( ""A"", ""B"" )                      .map( str -> DynamicTest.dynamicTest( ""testFromFactory"" + str + ""()"",                                                            () -> System.out.println( str + "" - "" + this ) ) );     } } ```  might have sample output such as this:  ``` Running org.littleclay.FooTest org.littleclay.FooTest@5cc7c2a6 A - org.littleclay.FooTest@32d992b2 B - org.littleclay.FooTest@32d992b2 Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.032 sec - in org.littleclay.FooTest ```  Note that the method `foo` has a separate instance of `FooTest` during it's execution but that both `A` and `B` tests share the same `FooTest` instance. It seems to me like this is a bit of a ""gotcha"" in using dynamic tests and think it should probably be spelled out more clearly if this is a necessary by-product of this type of test.  In a similar vein, it seems that the extension callbacks with dynamic tests have the same ""method"" which threw me a bit by surprise when following the examples regarding storing and retrieving state with extensions. Again, it makes sense with how I'm guessing these are generated, but if they can't be made more isolated, I definitely think a bit more information regarding life-cycles and possible contention points would be nice.  It is probably _less_ of an issue if these types of dynamic tests can never be run in parallel, but I already see a few issues with my initial use case for them for creating parameterized tests if they cannot be (1) run in parallel and (2) be more isolated. ## Related Issues - #14  - #378 - #393","closed","component: Jupiter,","littleclay","2016-07-10T03:34:20Z","2016-12-22T12:35:34Z"
"","335","Favor local annotations over inherited annotations in AnnotationUtils.findRepeatableAnnotations()","This may already be completed, but we need to test the desired behavior.  See TODO in `AnnotationUtils.findRepeatableAnnotations(Annotation[], Class, Class, boolean, Set, Set)`.","closed","component: Platform,","sbrannen","2016-06-21T10:37:21Z","2016-08-08T03:12:52Z"
"","307","Introduce nested extensions for engines and tags in the Gradle plugin","This issue is sub-task for #285. ## Deliverables - [x] Introduce nested extension for tags - [x] Introduce nested extension for engines - [x] Rename and refactor `requireEngine` support so that it supports multiple _included_ engines   - via: `engines { include ... }` - [x] Introduce support for multiple _excluded_ engines   - via: `engines { exclude ... }`","closed","theme: build,","sbrannen","2016-06-12T10:21:25Z","2016-06-12T12:19:58Z"
"","120","Rebase of #119","This is merely a rebase of #119 onto master.","closed","","marcphilipp","2016-01-16T20:02:41Z","2016-01-17T08:42:34Z"
"","135","Introduce ExtensionPointConfiguration","This is an attempt to tackle some of the points discussed in #112 .  Every concrete subtype of `ExtensionPoint` can now register a configuration of type `ExtensionPointConfiguration`. For example:  ``` java public interface BeforeEachExtensionPoint extends ExtensionPoint...     /**      * Configuration for {@code BeforeEachExtensionPoint}      */     ExtensionPointConfiguration CONFIG = new ExtensionPointConfiguration(         new ExtensionPointRegistry.Position[] { OUTERMOST, OUTSIDE_DEFAULT, DEFAULT, INSIDE_DEFAULT, INNERMOST },         ExtensionPointRegistry.ApplicationOrder.FORWARD); ```  This configuration is used in `ExtensionRegistry` two things: - Determine the application order of an extension point. Formerly that was done by the applier of an extension point who had to know. - Allow only certain values for `Position` when registering an extension. All other values will lead to an `ExtensionConfigurationException`.  The concept has been introduced, because not all values make sense for all types of extension points. For example, `ExceptionHandlerExtensionPoint` allows `FIRST`, `DEFAULT` and `LAST`.  Extension point types that do not come with their own configuration only allow `DEFAULT` as position and are thus ordered by their position in the source only.","closed","","jlink","2016-01-24T14:53:01Z","2019-04-14T13:11:58Z"
"","362","Implement suite support in the JUnitPlatformProvider for Maven Surefire","This is a TODO in the [JUnitPlatformProvider](https://github.com/junit-team/junit5/blob/master/junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/JUnitPlatformProvider.java). ## Related Issues - #330  - #363","closed","theme: build,","smoyer64","2016-06-27T19:28:03Z","2016-11-30T08:58:32Z"
"","363","Implement forking support in the JUnitPlatformProvider for Maven Surefire","This is a TODO in the [JUnitPlatformProvider](https://github.com/junit-team/junit5/blob/master/junit-platform-surefire-provider/src/main/java/org/junit/platform/surefire/provider/JUnitPlatformProvider.java). ## Related Issues - #31  - #60  - #141  - #362","closed","theme: build,","smoyer64","2016-06-27T19:33:30Z","2016-11-30T08:58:32Z"
"","278","Add support for dynamic tests","This is a rebased and squashed version of `issue58-dynamic-tests-with-new-resolvers` to resolve #58.  Added: - Support discovering TestFactoryTestDescriptors by their unique ID - Support `Iterable` in additon to `Collection`, `Iterator`, and `Stream` for `@TestFactory` methods  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: programming model,","marcphilipp","2016-05-23T20:43:47Z","2016-05-24T15:32:17Z"
"","233","Introduce mechanism to pass parameters to Launcher which passes it to the TestEngines","This is a prerequisite for #78.","closed","theme: extensions,","marcphilipp","2016-04-29T11:48:08Z","2016-05-14T10:01:23Z"
"","368","Reporting tree incorrect for dynamically added containers.","This is a follow-up to #366.  I tried adding a dynamic container as a sub-container to my dynamic container. It runs fine but the report doesn't have the hierarchy I expected:  **Expected** - :white_check_mark: DemoTestEngine   - :white_check_mark: demo     - :white_check_mark: root _#_0       - :white_check_mark: container _#_1          - :white_check_mark: dynamic test _#_1         - :white_check_mark: dynamic test _#_2         - :white_check_mark: container _#_2           - :white_check_mark: dynamic test _#_3  **Actual** - :red_circle: DemoTestEngine   - :red_circle: demo     - :red_circle: root _#_0   - :white_check_mark: container _#_1      - :white_check_mark: dynamic test _#_1     - :white_check_mark: dynamic test _#_2   - :white_check_mark: container _#_2     - :white_check_mark: dynamic test _#_3  **Code**  ``` java import org.junit.platform.engine.*; import org.junit.platform.engine.support.descriptor.AbstractTestDescriptor; import org.junit.platform.engine.support.descriptor.EngineDescriptor; import org.junit.platform.runner.JUnitPlatform; import org.junit.runner.RunWith;  @RunWith(JUnitPlatform.class) public class DemoTestEngine implements TestEngine {      private UniqueId rootUniqueId;      @Override     public String getId() {         return ""demo"";     }      @Override     public TestDescriptor discover(EngineDiscoveryRequest discoveryRequest, UniqueId uniqueId) {         EngineDescriptor engineDescriptor = new EngineDescriptor(uniqueId, ""demo"");         RootTestDescriptor root = new RootTestDescriptor(uniqueId.append(""root"", ""0""), ""root #0"");         engineDescriptor.addChild(root);         rootUniqueId = root.getUniqueId();         return engineDescriptor;     }      @Override     public void execute(ExecutionRequest request) {         EngineExecutionListener engineExecutionListener = request.getEngineExecutionListener();         TestDescriptor engineDescriptor = request.getRootTestDescriptor();         TestDescriptor root = engineDescriptor.findByUniqueId(rootUniqueId).get();          TestDescriptor container = new ContainerTestDescriptor(rootUniqueId.append(""container"", ""1""), ""container #1"");         root.addChild(container);          engineExecutionListener.dynamicTestRegistered(container);         engineExecutionListener.executionStarted(container);         engineExecutionListener.executionFinished(container, TestExecutionResult.successful());          UniqueId containerUid = container.getUniqueId();          TestDescriptor dynamicTest1 = new TestTestDescriptor(containerUid.append(""test"", ""1""), ""dynamic test #1"");         container.addChild(dynamicTest1);         engineExecutionListener.dynamicTestRegistered(dynamicTest1);         engineExecutionListener.executionStarted(dynamicTest1);         engineExecutionListener.executionFinished(dynamicTest1, TestExecutionResult.successful());          TestDescriptor dynamicTest2 = new TestTestDescriptor(containerUid.append(""test"", ""2""), ""dynamic test #2"");         container.addChild(dynamicTest2);         engineExecutionListener.dynamicTestRegistered(dynamicTest2);         engineExecutionListener.executionStarted(dynamicTest2);         engineExecutionListener.executionFinished(dynamicTest2, TestExecutionResult.successful());          TestDescriptor subcontainer = new ContainerTestDescriptor(containerUid.append(""container"", ""2""), ""container #2"");         container.addChild(subcontainer);         engineExecutionListener.dynamicTestRegistered(subcontainer);         engineExecutionListener.executionStarted(subcontainer);         engineExecutionListener.executionFinished(subcontainer, TestExecutionResult.successful());          UniqueId subcontainerUid = subcontainer.getUniqueId();          TestDescriptor dynamicTest3 = new TestTestDescriptor(subcontainerUid.append(""test"", ""3""), ""dynamic test #3"");         subcontainer.addChild(dynamicTest3);         engineExecutionListener.dynamicTestRegistered(dynamicTest3);         engineExecutionListener.executionStarted(dynamicTest3);         engineExecutionListener.executionFinished(dynamicTest3, TestExecutionResult.successful());     }      static class RootTestDescriptor extends AbstractTestDescriptor {         RootTestDescriptor(UniqueId uniqueId, String displayName) {             super(uniqueId, displayName);         }          @Override         public boolean isContainer() {             return true;         }          @Override         public boolean isTest() {             return false;         }          @Override         public boolean hasTests() {             return true;         }     }      static class ContainerTestDescriptor extends AbstractTestDescriptor {         ContainerTestDescriptor(UniqueId uniqueId, String displayName) {             super(uniqueId, displayName);         }          @Override         public boolean isContainer() {             return true;         }          @Override         public boolean isTest() {             return false;         }     }      static class TestTestDescriptor extends AbstractTestDescriptor {         TestTestDescriptor(UniqueId uniqueId, String displayName) {             super(uniqueId, displayName);         }          @Override         public boolean isContainer() {             return false;         }          @Override         public boolean isTest() {             return true;         }     } } ```  I'm using IntelliJ IDEA 2016.1.3. Might this be an IDE/JUnit4 integration issue? Am I doing something wrong or is there something I can do to work around this?  Thanks!","closed","status: invalid,","mfulton26","2016-06-29T16:25:31Z","2016-06-30T09:23:09Z"
"","282","Decide how to report 'unexpected' and 'actual' values in an exception","This is a follow-up on #138 where we used `new AssertionFailedError(message, expected, actual)` to pass `expected` and `actual` for `assertEquals`, `assertSame`, and `assertNull`.  However, we should consider passing `unexpected` and `actual` for - [ ] `Assertions.assertNotEquals` - [ ] `Assertions.assertNotSame` (hmm... `unexpected == actual` in this case) - [ ] `Assertions.assertNotNull` (just `actual`?)","open","component: OTA,","marcphilipp","2016-05-24T15:39:36Z","2022-07-01T07:09:46Z"
"","591","Add new TestDescriptors to existing parents","This fixes #589.  @junit-team/junit-lambda Please take a look! I'm still astonished that we didn't discover (no pun intended) this bug until now.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: discovery,","marcphilipp","2016-12-07T20:42:12Z","2016-12-11T14:32:48Z"
"","243","junit-commons/build.gradle can be removed","This file does not provide any additional settings specific to the `junit-commons` project, thus it can be safely removed","closed","theme: build,","aalmiray","2016-05-06T10:07:28Z","2016-05-06T10:54:39Z"
"","274","Introduce composite TestSource","This commit introduces a `CompositeTestSource` that can be used to hold one or more `TestSources`. This can be useful, for example, if the programming model for a particular testing framework relies on Java classes and associated scripts in the file system.  Issue: #271  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: enhancement,","sbrannen","2016-05-22T14:22:35Z","2016-05-23T10:42:46Z"
"","696","Tracking:  Pitest/JUnit 5 integration","There's a discussion related to creating a new plugin to support JUnit 5 in Pitest at:  https://github.com/hcoles/pitest/issues/284  Potential issues:  - [ ] Removal of the ```forUniqueId``` static method from ```org.junit.platform.engine.discovery.UniqueIdSelector```.  No action should be taken until analysis is complete.  ## Deliverables","closed","","smoyer64","2017-02-28T17:22:17Z","2017-04-17T18:13:30Z"
"","590","Log version numbers with discovered engines","There have been several instance where users ended up with mismatched versions of the JUnit 5 artifacts, such as #586.  Debugging these problems would be easier if the INFO-level log message also printed out the version number of the engine.  So this message:  ``` INFO: Discovered TestEngines with IDs: [junit-jupiter] ```  Would become:  ``` INFO: Discovered TestEngines with IDs: [junit-jupiter-5.0.0-SNAPSHOT] ```  Note that the engine name can remain a constant but the version could be pulled programmatically from the JAR's manifest file.","closed","component: Platform,","smoyer64","2016-12-07T20:05:46Z","2016-12-11T00:39:48Z"
"","32","Should JUnit support mocking as a basic feature","There are some object mocking frameworks available such as Mockito. Should JUnit care and give functionality to junit users to mock variables?  If it is yes, then I would like to see some form of automatic mocking mechanism for JPA meta-model like classes. But again the mocking should should be scoped for a single test. If im explaining the problem further, now when the hibernate meta models are generated they define variables as ""SingularAttribute blah"". So each of those fields will be null on Junit testing level. So the verification will not work properly unless you first mock a value and set them.","closed","","dinesh707","2015-12-02T14:50:16Z","2015-12-02T20:03:08Z"
"","376","Update MockitoExtension example in User Guide","The user guide still uses the `@InjectMock` annotation which has been replaced by the `@Mock` annotation of Mockito 2.x.  This issue was originally raised in junit-team/junit-team.github.io#1.","closed","theme: documentation,","marcphilipp","2016-07-04T19:29:17Z","2016-07-05T08:26:54Z"
"","374","Document lifecycle callback support for dynamic tests","The user guide says:  > Specifically, `@BeforeEach` and `@AfterEach` methods and their corresponding extension callbacks are not executed for dynamic tests. The execution of those callbacks would not be useful in most dynamic testing scenarios since variables used in lambdas are bound to instance variables at execution time of the factory method rather than execution time of the lambda itself.  I interpret ""instance variables"" to be fields of the test class instance that defines the tests. If I misunderstood, possibly all that follows is wrong. Otherwise it seems to me that the argument about lambda variable binding is wrong. Take this example:  ``` private static String field = ""foo"";  public static void main(String[] args) {     Runnable r = () -> System.out.println(field);     field = ""bar"";     r.run(); } ```  The guide seems to argue that `foo` is printed to the console (which is of course not the case).  Likewise, if a dynamic test's `Executable` references fields and these are reassigned, for example because a lifecycle method creates new mocks, the test's execution should use the new instances.","closed","theme: documentation,","nipafx","2016-07-01T21:20:32Z","2016-07-05T11:29:45Z"
"","319","Generate User Guide referencing specific revision/tag of Javadoc and source code on GitHub","The user guide of a release should point to GitHub sources and Javadoc of the corresponding release tag. ### Deliverables - [x] Make path to Javadoc configurable. - [x] Link to Javadoc instead of source code whenever appropriate. - [x] Math path to the branch or tag for source code on GitHub configurable. - [x] Document how to build User Guide for a release in [wiki](https://github.com/junit-team/junit5/wiki/Releasing).","closed","theme: documentation,","marcphilipp","2016-06-19T13:38:39Z","2016-06-30T12:45:55Z"
"","98","Replace @TestName with TestInfo object","The team has decided to replace `@TestName` with a dedicated `TestInfo` object. ## Deliverables - [x] Introduce `TestInfo` interface.   - proposed methods: `getDisplayName()`, `getName()` - [x] Introduce `MethodParameterResolver` for `TestInfo`. - [x] Remove `@TestName`.","closed","type: enhancement,","sbrannen","2016-01-11T11:12:50Z","2016-01-11T20:57:08Z"
"","555","Document new selector/filter options of Gradle plugin and ConsoleLauncher in User Guide","The selector/filter options that will be added in #313, #470, #453, #452, #437, and #554 need to be documented in the User Guide.","closed","component: Platform,","marcphilipp","2016-11-01T18:49:44Z","2016-11-30T07:52:42Z"
"","387","Regression: Refer to `ConsoleLauncher` instead of `ConsoleRunner` in shell scripts","The script in the [M1 ConsoleLauncher-ZIP](https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console/1.0.0-M1/junit-platform-console-1.0.0-M1.zip) ends with  ``` exec ""$JAVACMD"" ""${JVM_OPTS[@]}"" -classpath ""$CLASSPATH"" org.junit.platform.console.ConsoleRunner ""$@"" ```  But the class is now called `ConsoleLauncher`.  The proposed change seems to fix the only reference to `ConsoleRunner`, so I assume the script is generated from this information?  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","nipafx","2016-07-10T15:34:57Z","2016-07-13T20:09:43Z"
"","79","Ensure TestIdentifier is Serializable","The only thing preventing this at the moment is `TestSource` and its subclasses, e.g. `Class` is not `Serializable` but could be replaced by the fully-qualified class name as a `String`.","closed","","marcphilipp","2015-12-22T08:52:38Z","2016-01-17T21:11:12Z"
"","861","Create more informative exception for invalid parameterized test name","The name given to `@ParameterizedTest` is used by `MessageFormat` to create the final name. If the string contains an error, e.g. missing a closing bracket, the result is a not particularly informative exception:  ``` java.lang.IllegalArgumentException: Unmatched braces in the pattern.  	at java.text.MessageFormat.applyPattern(MessageFormat.java:508) 	at java.text.MessageFormat.(MessageFormat.java:362) 	at java.text.MessageFormat.format(MessageFormat.java:840) 	at org.junit.jupiter.params.ParameterizedTestNameFormatter.format(ParameterizedTestNameFormatter.java:39) 	at org.junit.jupiter.params.ParameterizedTestInvocationContext.getDisplayName(ParameterizedTestInvocationContext.java:35) 	at org.junit.jupiter.engine.descriptor.TestTemplateInvocationTestDescriptor.(TestTemplateInvocationTestDescriptor.java:39) 	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.createInvocationTestDescriptor(TestTemplateTestDescriptor.java:117) 	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$1(TestTemplateTestDescriptor.java:92) ```  It might be helpful to users to make it blatantly obvious where the problem comes from because I think the tendency is to look into the tests instead of at the setup.","closed","","nipafx","2017-05-23T13:53:44Z","2017-06-16T18:48:28Z"
"","481","DeGraph should not be run as part of test task","The Junit 5 build is currently running DeGraph as a Junit test in `DependencyTests`. This means that someone just running `./gradlew test` will also run this very expensive check, even though they probably just were interested in running ""real"" unit tests.  Ignoring this single test cuts test execution time from 25s to 10s on my machine.  I'd suggest writing a dedicated task for DeGraph.","closed","theme: build,","oehme","2016-08-27T07:34:30Z","2016-08-27T12:08:51Z"
"","195","Provide JARs with OSGi metadata","The JARs that are produced during a build should contain OSGi metadata. This would allow to consume them as OSGi bundles right away.","closed","component: Vintage,","rherrmann","2016-03-12T17:28:41Z","2019-11-18T19:44:04Z"
"","510","Introduce @TestsFor annotation to define the test subject","The idea is to be able to define the concrete class which is subject of a given test class. An example could look like the following:  ``` java @TestsFor(Foo.class) class FooTests {     // ... } ```  `@TestsFor` should be a class level annotation. Usage should be optional.  Having such an annotation makes it explicit which class is tested by a test class without having to rely on the test class's name to obtain this information. IDE vendors can use this information to make it possible to unambiguously navigate from a production class to all related test classes. IntelliJ IDEA already provides this feature, but (as far as I know) has to use the class name of a test class to determine all test classes for a test subject.  While in the most cases it is sufficient to use the name of a class to find all related tests, there are some situations where this approach fails or is inaccurate. - A test class that only tests a subset of some class may conjugate parts of the tested class's name (especially for non-English class names). Contrived example: class under test is named `BuchVersand`, test class is named `BücherWerdenSonntagsNichtVersandtTests` - The test subject has a name which is part of other unrelated class names. Example: Classes `Condition` and `VisibilityCondition`. In IntelliJ, also the `VisibilityConditionTests` will falsely be shown as test for `Condition` in addition to `ConditionTests`.   Using a `@TestsFor` annotation could make it clear what the real class under test is for these cases. It could also be used by  reporting tools.  What do you think about this proposal? And especially, what do IDE vendors think about that?","closed","status: stale,","rolandkrueger","2016-09-15T07:31:07Z","2021-06-03T20:47:10Z"
"","397","Gradle version used by Travis CI does not match configured Gradle version","The Gradle version [configured in the wrapper](https://github.com/junit-team/junit5/blob/6055beebc9de136a6a863de51ebac03c304e4ffb/gradle/wrapper/gradle-wrapper.properties#L6) is 2.14. The version used by TravisCI is nightly-build of release 3 as you can see in [Travis' build log](https://travis-ci.org/junit-team/junit5/jobs/144558735).  I think it's a good practice to use the same version of the build tool in CI and locally.","closed","status: invalid,","PeterWippermann","2016-07-13T22:11:57Z","2016-07-14T17:18:31Z"
"","546","Introduce support for disabling --hide-details with JUnit Platform Gradle Plugin","The gradle plugin always passes --hide-details to the console launcher. I find the details to be informative without causing too much extra output.  I think it would be nice if the platform gradle plugin had a property to enable details. The default should still be to pass --hide-details.","closed","component: Platform,","leejoon","2016-10-14T14:32:22Z","2017-01-19T20:46:58Z"
"","343","Document compatibility with JUnit 4 TestRules","The following is an analysis of which JUnit 4 TestRule functionality is provided by JUnit 5.  This should be documented in an addendum to the User Guide. -   [ ] DisableOnDebug - ~~partially accomplished using [DisableIf/EnableIf](https://github.com/junit-team/junit5/issues/219), partially allowed via the use of [@Tags](https://junit.ci.cloudbees.com/job/JUnit5/javadoc/org/junit/jupiter/api/Tags.html) as described in sections [3.7 Tagging and Filtering](http://junit.org/junit5/docs/snapshot/user-guide/#tagging-and-filtering) of the user guide.  But is it completely covered?~~  I was completely off base with this assessment.  This ```@TestRule``` allows you to disable a test rule if the JVM is in debug mode and has absolutely nothing to do with deciding what tests should be run. -   [x] ExpectedException - use [Assertions.expectThrows()](https://junit.ci.cloudbees.com/job/JUnit5/javadoc/org/junit/jupiter/api/Assertions.html#expectThrows-java.lang.Class-org.junit.jupiter.api.Executable-) as described in section [3.4 Assertions](http://junit.org/junit5/docs/snapshot/user-guide/#assertions) of the User Guide. -   [ ] ExternalResource   -   [ ] TemporaryFolder - Provide [TemporaryDirectory](https://github.com/junit-team/junit5/blob/459aefa6d5eb5838e8aa36423bfe386005df9bdf/junit-tests/src/test/java/org/junit/gen5/console/tasks/TempDirectory.java) which is used for internal JUnit 5 tests as part of https://github.com/junit-team/junit5-samples.  See https://github.com/junit-team/junit5-samples/issues/4. -   [x] RuleChain - JUnit 5 extensions enable via @ExtendWith are executed in declaration order. -   [ ] Stopwatch - partially provided via the [TimingExtension](http://junit.org/junit5/docs/snapshot/user-guide/#test-lifecycle-callbacks) in section [5.6.1 Before and After Test Execution Callbacks](http://junit.org/junit5/docs/snapshot/user-guide/#test-lifecycle-callbacks) of the user guide.  See this comment: https://github.com/junit-team/junit5-samples/issues/4#issuecomment-190330403.  Reporting of the result state could be accomplished by injecting [TestReporter](https://github.com/junit-team/junit5/blob/master/junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestReporter.java) via parameter resolution (using @BeforeAll?) but there are potentially use cases that can't be handled. -   [x] TestWatcher   -   [x] TestName - inject [TestInfo](https://junit.ci.cloudbees.com/job/JUnit5/javadoc/) into the test using parameter resolution. -   [x] Timeout - JUnit 4 allows the timeout to be specified via [@Test](http://junit.org/junit4/javadoc/latest/org/junit/Test.html#timeout%28%29).  Is there an equivalent in JUnit 5?  For performance testing, it would also be nice to have the test fail if it exceeded a threshold. -   [x] Verifier   -   [x] ErrorCollector - use [Assertions.assertAll()](https://junit.ci.cloudbees.com/job/JUnit5/javadoc/org/junit/jupiter/api/Assertions.html#assertAll-java.lang.String-org.junit.jupiter.api.Executable...-) as described in section [3.4 Assertions](http://junit.org/junit5/docs/snapshot/user-guide/#assertions) of the User Guide. ## Related Issues - #169  ## Related Blog Posts - http://www.codeaffine.com/2016/04/06/replace-rules-in-junit5/ - http://blog.codefx.org/libraries/junit-5-conditions/","closed","status: stale,","smoyer64","2016-06-21T18:39:21Z","2021-06-19T12:50:10Z"
"","492","[SUREFIRE] Questionable asserts in TestPlanScannerFilterTests","The following assert in `TestPlanScannerFilterTests` does not seem to make sense.  ``` java     @Test     void emptyClassAccepted() {         assertTrue(newFilter().accept(EmptyClass.class), ""accepts empty class because it is a container"");     } ```  In this case, when you debug into `TestPlan.countTestIdentifiers`, it will return true because the test plan contains the two root identifiers for the Jupiter and the Vintage Engine. Since `EmptyClass` is empty, it should not be accepted by the filter.","closed","status: superseded,","britter","2016-09-04T16:47:40Z","2016-09-12T10:41:10Z"
"","196","NoSuchMethodError when using example setup from junit5-maven-consumer","The current SNAPSHOT version of `surefire-junit5` causes the Maven build of the example project [junit5-maven-consumer](https://github.com/junit-team/junit5-samples/tree/master/junit5-maven-consumer) to fail with a NoSuchMethodError:  ``` [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19:test (default-test) on project git-svn-remote-updates-checker: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.19:test failed: There was an error in the forked process [ERROR] java.lang.NoSuchMethodError: org.junit.gen5.commons.util.StringUtils.join(Ljava/util/stream/Stream;Ljava/lang/String;)Ljava/lang/String; [ERROR] at org.junit.gen5.engine.UniqueIdFormat.format(UniqueIdFormat.java:82) [ERROR] at org.junit.gen5.engine.UniqueId.getUniqueString(UniqueId.java:69) [ERROR] at org.junit.gen5.engine.junit4.JUnit4TestEngine.discover(JUnit4TestEngine.java:43) [ERROR] at org.junit.gen5.launcher.main.DefaultLauncher.discoverRoot(DefaultLauncher.java:88) [ERROR] at org.junit.gen5.launcher.main.DefaultLauncher.discover(DefaultLauncher.java:65) [ERROR] at org.junit.gen5.surefire.TestPlanScannerFilter.accept(TestPlanScannerFilter.java:34) [ERROR] at org.apache.maven.surefire.util.DefaultScanResult.applyFilter(DefaultScanResult.java:98) [ERROR] at org.junit.gen5.surefire.JUnitGen5Provider.scanClasspath(JUnitGen5Provider.java:61) [ERROR] at org.junit.gen5.surefire.JUnitGen5Provider.invoke(JUnitGen5Provider.java:56) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:286) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:240) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121) ```  When replacing the `surefire-junit5` with the ALPHA release the Maven build passes.","closed","","UrsMetz","2016-03-12T21:09:44Z","2016-03-14T12:40:54Z"
"","768","Publish JUnit Platform Gradle Plugin to Gradle plugin repository","The current gradle plugin implementation where Junit 5 is available doesn't support the new syntax of plugins inclusion from gradle.  Currently in order to include Junit 5 in a gradle project I have to implement the following script: ```groovy buildscript {     repositories { mavenCentral() }     dependencies { classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M4' } }  apply plugin: 'org.junit.platform.gradle.plugin'  ```  But recently gradle include a new feature that allows us to load plugins by implement a shorter script, just like down below: ```groovy plugins {     id 'org.junit.platform.gradle.plugin' version '1.0.0-M4' } ```  Unfortunately is not possible to load Junit 5 plugin in the second way because to load plugins in that way the plugins must be ""uploaded"" in the [plugins gradle repositorty](https://plugins.gradle.org)... The steps to inclue a plugin in the repository is available in the following [link](https://plugins.gradle.org/docs/submit).","closed","3rd-party: Gradle,","jackmiras","2017-04-04T13:58:45Z","2018-03-13T16:30:44Z"
"","616","Running Cucumber with JUnit5 and Surefire exposes base64 ids.","The classname set for Cucumber tests when run with Surefire in JUnit5 exposes the base64 encoding used internally in the generated XML test reports.  Original outcome when running junit4:      grep classname target/surefire-reports/TEST-nl.tudelft.cucumber64.CucumberTest.xml  Output:   ```xml                               ```  Note that the classname is not a real class, but the name of the scenario executed extracted from a `.feature` file. The underlying magic is done by the Cucumber Junit4 test runner.  Doing the same when using the JUnit 5 Surefire yields as output:  ```xml          ```  This behavior is incompatible with JUnit4. The base64 names also appear in the Surefire reports generated by the `mvn site` plugin.  In the long run, the Cucumber team will probably need to create a JUnit5 extension to run their features. But it would be nice if running Cucumber with JUnit5 would yield the same reports as when running with JUnit4.  I created a simple maven project to reproduce this issue at https://github.com/avandeursen/cucumber64","closed","3rd-party: Maven Surefire,","avandeursen","2016-12-24T16:01:46Z","2017-03-07T20:29:40Z"
"","493","Provide consistent API in LauncherDiscoveryRequestBuilder regarding nullability","The API for building a `LauncherDiscoveryRequest` seems strange to me:  `LauncherDiscoveryRequestBuilder.filters(Filter...)` accepts a `null` array but does not accept `null` values in that array.  `TagFilter.includeTags(String...)` and `TagFilter.excludeTags(String...)` only accept non null, non empty arrays.  I think it would be better if methods accepting arrays/collections behave the same way.","closed","theme: discovery,","britter","2016-09-04T16:51:39Z","2016-10-05T14:42:44Z"
"","494","Tildes (~) not expanding in command-line options for ConsoleLauncher","The aliases added to the CLI console launch in PR #468 are wonderful but the Unix-style options that take arguments should use an ""="" (equals sign) to pass in their parameters.  Currently this option will not work:  ``` --class-path=~/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.0.0-SNAPSHOT/junit-jupiter-engine-5.0.0-SNAPSHOT.jar ```  But replacing the ""="" with a "" "" (space) results in the engine being found:  ``` --class-path ~/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.0.0-SNAPSHOT/junit-jupiter-engine-5.0.0-SNAPSHOT.jar ```","closed","component: Platform,","smoyer64","2016-09-06T14:33:11Z","2019-03-05T15:40:06Z"
"","259","Configure shadow plugin to package junit5-console as a fat JAR","The `shadowJar` task takes care of merging service files. This task will generate an artifact with ""all"" as classifier; this artifact is not yet configured for publication to a maven compatible repository. ## Fixes #258  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","aalmiray","2016-05-13T09:20:48Z","2017-02-04T15:31:19Z"
"","151","ExtensionContext should contain Information about the tags of a Test","The `ExtensionContext` should offer information about Tags that apply, so extension can control their behavior based on those tags.   This is probably a precondition for implementing #143","closed","theme: extensions,","schauder","2016-02-11T09:49:45Z","2016-03-01T10:21:36Z"
"","754","Improve documentation of DynamicTest lifecycle (round 2)","The [documentation](http://junit.org/junit5/docs/5.0.0-M3/user-guide/#writing-tests-dynamic-tests) for JUnit5's dynamic tests states:  > @`BeforeEach` and @`AfterEach` methods and their corresponding extension callbacks are not executed for dynamic tests.   Reading this I thought BeforeEach methods are not executed at all if a class has dynamic tests.  What happens, however, is that such methods are executed, but just once. For example, I have a class with one `BeforeEach` method (`setUp`, which sets some fields), and 8 dynamic tests (which use these fields without modifying them). Executing these tests results in:  1. The `setUp` method is called exactly once and initializes the field 2. After that the 8 dynamic tests are executed.  So the tests work, but:  - The BeforeEach intuitively behaves more like a (non-static) BeforeAll - The behavior seems inconsistent with what is written in the documentation  Is this the correct intended behavior?  If it is, should the documentation be updated?  Bumped into this while migrating an existing @`Parameterized` test -- which relied on an @`Before` annotation.","closed","component: Jupiter,","avandeursen","2017-03-29T11:22:44Z","2017-07-03T10:48:17Z"
"","937","Spock tests with @Unroll are not supported by Vintage engine","Tests are executed but no notifications are received for the following sample code:  ```groovy package q;  import spock.lang.Specification import spock.lang.Unroll  class CalcSpec extends Specification {     @Unroll     void ""#a plus #b is equals #c""() {         println ""executed""         expect:         a + b == c          where:         a | b || c         1 | 1 || 2         1 | 2 || 3     } } ```  ``` WARNING: Runner org.spockframework.runtime.Sputnik on class q.CalcSpec reported event for unknown Description: 1 plus 1 is equals 2(q.CalcSpec). It will be ignored. ```  Checked with M5.  Linked IDEA issue: https://youtrack.jetbrains.com/issue/IDEA-159975","closed","component: Vintage,","akozlova","2017-07-11T11:20:45Z","2017-07-16T14:14:30Z"
"","520","TestIdentifier methods: isTest() and isContainer()","TestIdentifier has these two methods: `isTest()` and `isContainer()`. As per my understanding, `isTest()` is used to identify a test case that is executed and `isContainer()` is used to identify a container of these test cases. Hence, a `@TestFactory` method is a container and not a test.  Is there anything else to the meaning of `isContainer()`? If not, these two are exactly opposite of each other and one of them can be removed.  Also, it would be useful to have another method called as `isTestFactory()`, which can be used to identify a container method. Or, is there any other way to identify a test factory method?","closed","component: Platform,","noopur2507","2016-09-21T13:08:32Z","2018-03-16T14:34:27Z"
"","871","Introduce extension API for container templates","Test templates are a great way to create extensions that generate test cases per method. If an extension wants to generate suites of tests per class, though, this is not easily possible. I propose to implement a container template extension point that functions similarly to test template:  * it defines the number of executions `n` - but in this case per container, which makes Jupiter work all its ""execute tests in this class"" magic not once but `n` times * each invocation is called with a context, which most importantly contains the index of the current iteration * additional extensions can be registered  It might make sense to consider whether other extensions should be allowed to easily access the container invocation context, maybe from the `ExtensionContext` they already receive. (Thinking about that, wouldn't it make sense to do the same for test templates, i.e. give `ExtensionContext` a method that returns the invocation context?)  Where parameterized test methods were the canonical example of how to use test templates, theories would be the canonical example for container templates. With this extension point the theories extension would use reflection to find out how many parameters were defined and then have the class be executed so many times, each time dropping a different set of parameters into all test methods:  * `a = 0; b = 0`     * `testAddition(a, b)`     * `testSubtraction(a, b)` * `a = 0; b = 1`     * `testAddition(a, b)`     * `testSubtraction(a, b)` * ...  ## Related Issues  - #878  - #1141  - #723  - #1239 - #2092","open","type: new feature,","nipafx","2017-05-30T20:04:35Z","2022-04-13T10:23:42Z"
"","710","Support test matrix","Suppose we're writing an HTTP client library that is a wrapper around several different backend libraries. We support many options and we need to test all the combinations.  Protocol and security:  * HTTP over HTTP/1 * HTTPS over HTTP/1 * HTTP over HTTP/2 * HTTPS over HTTP/2  Backend library:  * Apache HTTP Client * Jetty HTTP Client * OkHttp  SOCKS proxy:  * disabled * enabled  We can write a test class `AbstractClientTests` that has methods like `testPostMethod`, `testReadTimeout`, `testResponseStatus`, etc. To run the class for each combination of the above, we create a subclass for each combination.  This approach has several advantages:  * `AbstractClientTests` is readable and looks like a normal test class * we can run and debug a specific test in the IDE * tools like Maven Surefire understand this structure, since everything is a normal test class  Of course, there are big disadvantages:  * we need `4 x 3 x 2 = 24` subclasses * we can't split up `AbstractClientTests`, since duplicating all the subclasses would be too painful  This doesn't seem like a good use case for _dynamic tests_, which requires turning everything inside out and losing tool support. It seems what we need is _dynamic test classes_.","closed","component: Jupiter,","electrum","2017-03-06T20:45:35Z","2018-04-03T09:55:53Z"
"","63","Create and communicate policy for published API lifecycle","SUGGESTION:  Introduce annotation for all interfaces and classes supposed to be used from outside:  ``` java @PublicAPI(Stable) @PublicAPI(Maintained) @PublicAPI(Experimental) @PublicAPI(Deprecated) @PublicAPI(Internal) ``` - **Stable**: Will be here forever (in this major version 5.x) - **Maintained**: Considered mostly stable. If considered for removal, it will be deprecated for at least one minor version. - **Experimental**: Use at your own risk. Might be removed at any time. - **Internal**: Only used for public members in types that have a `@PublicAPI` annotation.  Everything not annotated would be considered for internal use only. Annotation would allow to produce API change reports for all releases. ## Tasks - [x] Create annotation - [x] Add paragraph about API annotations to documentation - [x] Annotate junit-launcher - [x] Annotate junit-commons - [x] Annotate junit-console - [x] Annotate junit-engine-api - [x] Annotate junit5-api - [x] Annotate junit5-engine - [x] Annotate junit4-engine - [x] Annotate junit4-runner","closed","","jlink","2015-12-12T10:15:19Z","2016-05-24T15:34:30Z"
"","256","Gradle build revamp","Streamline gradle build configuration.  Changes performed at Zurich Hackergarten 2016-05-12 with @sbrannen & @vyazelenko  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","aalmiray","2016-05-12T18:09:04Z","2016-05-13T12:34:48Z"
"","513","Reduce log level for detected test engines to DEBUG","Starting within the IDE, the default log level of `INFO` results in `System.err` output by the `ServiceLoaderTestEngineRegistry` which lists the detected engines.  Should that really be the case, or should the log level be `DEBUG` for that information?  I can imagine this could be handy when a user writes a custom test engine. In all other cases, this information is perhaps of little interest.","closed","component: Platform,","akozlova","2016-09-15T12:54:09Z","2019-07-19T19:33:05Z"
"","353","Promote API itself to  @API(Maintained)","So that 3rd parties can use it for their own API lifecycle.","closed","status: duplicate,","jlink","2016-06-24T08:50:08Z","2016-06-24T11:39:21Z"
"","156","Add list of contributors to release notes","Since we do not use author tags. Also add it to release notes for Alpha.  Can we easily automate the creation of  this list?","closed","","jlink","2016-02-14T11:42:22Z","2016-03-01T08:47:25Z"
"","561","Updates references to AssertionFailedError to use its FQCN.","Since javadocs are produced and published to Maven Central for both the JUnit 5 and OpenTest4J projects, Eclipse and other IDES don't have a problem linking imported Javadocs between the projects.  The JUnit 5 javadocs published at http://junit.org/junit5/docs/current/api/ cannot however resolve these links, so providing the FQCN provides readers with additional information to locate the related javadocs.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  Resolves #560.","closed","component: Jupiter,","smoyer64","2016-11-04T15:26:57Z","2016-11-04T17:40:01Z"
"","498","Move JUnitPlatform, SelectPackages and SelectClasses to a public API","Separating the JUnit 5 API from it's implementation provides a concise way for a test writer to know what classes can safely be used when writing tests.  Pull request https://github.com/junit-team/junit5-samples/pull/16 changes the Maven POM to only expose the JUnit 5 public APIs to test writers when using the Maven build system as the test runner.  As soon as you you also want to run these tests using a JUnit 4 runner (whether using the console or via Eclipse), you have to add the junit-platform-runner and the junit-jupiter-engine to the test-compile classpath.  This results in the minimal dependencies shown in the referenced PR to expand to a large number of non-public classes as shown below:  ![junit5-maven-consumer-minimal-with-junit-4](https://cloud.githubusercontent.com/assets/328333/18361264/2e706a06-75cf-11e6-84ed-18eb2435404f.png)","closed","status: superseded,","smoyer64","2016-09-08T18:19:13Z","2017-03-17T17:53:20Z"
"","337","Check that segment is a runner segment in UniqueIdSelectorResolver","See TODO in `UniqueIdSelectorResolver`.","closed","type: task,","sbrannen","2016-06-21T10:43:29Z","2016-07-25T20:01:15Z"
"","336","Decide if exceptions thrown during preparation should result in node being marked as ""started"" in HierarchicalTestExecutor","See TODO in `HierarchicalTestExecutor.execute(TestDescriptor, C)`.","closed","type: task,","sbrannen","2016-06-21T10:40:31Z","2016-07-27T19:51:39Z"
"","53","Issue28: Alternative approach to JUnit 5 extensions and extension ordering","See my last comment for the new proposed extension model.","closed","","jlink","2015-12-07T14:58:14Z","2015-12-11T14:32:23Z"
"","545","Document conditional test execution evaluation algorithm","See https://github.com/junit-team/junit5/issues/543#issuecomment-253425801 for further input.","closed","component: Jupiter,","sbrannen","2016-10-13T14:06:35Z","2016-12-29T16:24:01Z"
"","18","Introduce support for declaring dependencies between test methods","See https://github.com/junit-team/junit.contrib/tree/master/assumes I hope the new JUnit add this in the core. Or, at least makes it easy to built it as an extension.","closed","theme: programming model,","nemecec","2015-11-26T10:13:47Z","2019-11-02T13:23:36Z"
"","844","Check Travis build configuration for compromised Github tokens","See https://blog.travis-ci.com/2017-05-08-security-advisory.","closed","","smoyer64","2017-05-09T00:49:26Z","2017-05-14T14:07:05Z"
"","287","Document ExtensionContext.Store in the User Guide","Section 5.8 -- ""Keeping State in Extensions"" -- in the User Guide currently states:  >   Usually, an extension is instantiated only once. So the question becomes relevant: How do you keep the state from one invocation of an extension point to the next? …​  The ParameterResolvers for upREST involve parameters that are related to each other, and regardless of the test, an HttpRequest and the subsequent HttpResponse have to be generated.  For parameters like an HTTP StatusLine or HTTP EntityBody, you don't want to make additional HTTP requests for each parameter that's being resolved  My current method is for each parameter type to understand it's dependent parameters (whether they're passed to the test method or not), and to retrieve those parameters from the `ExtensionContext.Store`.  If the dependent parameter isn't found in the store, then its parameter resolver is called and the results of that call are both added to the store and returned to the dependent parameter's resolver.  I should note that I've only found this to be necessary for ParameterResolvers called to execute a single test.  Since I'm a relatively big fan of keeping tests as decoupled as possible (so they can run concurrently), I can't foresee needing this technique in other types of extensions.  If you'd like, I could expand this section but even with a simplified scenario, it's going to be more than a few paragraphs.","closed","component: Jupiter,","smoyer64","2016-05-28T15:47:41Z","2016-11-07T19:52:56Z"
"","879","Surefire: TestPlanScannerFilter should only accept test classes with non-empty test plans","Right now, the Surefire provider tries to execute every test class that satisfies the naming pattern because it has no way of knowing whether the test plan for the test class contains any nodes that are going to produce dynamic tests.  Once #508 is solved, the `Predicate` in `TestPlanScannerFilter` should be changed to use the new API.  This is a follow-up for #769.  ## Deliverables  - [x] `TestPlanScannerFilter` only accepts test classes with non-empty test plans","closed","3rd-party: Maven Surefire,","marcphilipp","2017-06-10T14:58:15Z","2017-07-01T16:20:04Z"
"","351","TravisCI can't execute even assemble when org.junit.platform.gradle.plugin is attached","Result: ![image](https://cloud.githubusercontent.com/assets/6240704/16313771/0c881532-397b-11e6-906f-0b8031f74a40.png)  build.gradle:  ``` buildscript {     repositories {         mavenCentral()         maven { url ""https://oss.sonatype.org/content/repositories/snapshots"" }     }     dependencies {         classpath ""info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.9""         classpath ""org.junit.platform:junit-platform-gradle-plugin:1.0.0-SNAPSHOT""     } } . . . ext.junit4Version = ""4.12"" ext.junitVintageVersion = ""4.12.0-SNAPSHOT"" ext.junitPlatformVersion = ""1.0.0-SNAPSHOT"" ext.junitJupiterVersion = ""5.0.0-SNAPSHOT"" ext.log4JVersion = ""2.5"" . . . apply plugin: ""org.junit.platform.gradle.plugin"" . . . repositories {     mavenCentral()     maven { url ""https://oss.sonatype.org/content/repositories/snapshots"" } } junitPlatform {     enableStandardTestTask true     engines {         include ""junit-jupiter""     }      includeClassNamePattern "".*Test"" } ```","closed","theme: documentation,","sta-szek","2016-06-23T17:48:24Z","2016-06-28T18:24:41Z"
"","65","Feature 29 extensible discovery","Resolved and fixed all issues from #29 and #39.  Possible improvements that we can work on after this merge: - [ ] Define a concept of a ""path"" along the unique id - [ ] Use ""path"" concept to   - [ ] remove tight coupling between resolvers   - [ ] split `ClassResolver` into two classes: `TopLevelClassResolver` & `NestedClassResolver`   - [ ] extract `NestedClassResolver` & `NestedClassTestDescriptor` as an extension - [ ] Clarify whether or not to keep static inner classes on the top level - [ ] Rework the `TestPlanSpecification`: Extensibility vs. Data Structure  I would like to handle those improvements if necessary in separate tickets working on the master branch. This will allow us to work in parallel on the topics.","closed","","bechte","2015-12-15T22:37:39Z","2016-01-15T13:22:56Z"
"","515","Support parallel execution of legacy Junit Tests","Requesting to add support for parallel execution of legacy JUnit tests.  **Use case:** - Ability to execute legacy JUnit tests in parallel  - Legacy tests are implemented in older versions of JUnit. The tests and their helper classes have shared static and singleton  variables all over the place. The classes need not be modified before running (or could not be modified because there are lots of test cases to refactor)  [How it is implemented with JUnit 4 - Use custom test class loader & threads to implement this. I will later share my implementation with Junit4]","closed","","ravikulkarni","2016-09-16T02:47:23Z","2020-08-11T08:39:42Z"
"","60","Opt-in support for parallel execution","Related to #90.","closed","component: Platform,","marcphilipp","2015-12-11T13:35:06Z","2018-08-28T15:24:58Z"
"","59","Support parameterized test","Related to #58.","closed","","marcphilipp","2015-12-11T13:32:17Z","2016-01-24T17:18:33Z"
"","430","Enhance DefaultLauncherTests for null conditions in the DummyTestEngine.","Pull request #429 eliminates an NPE thrown when the TestEngine's discover() method returns null.  Looking at the DefaultLauncherTests, it appears that the DummyTestEngine should be enhanced so that the engineDescriptor can be forced to null.  Tests for the correct exception can then be added to the DefaultLauncherTests.  If this seems like the correct course of action, feel free to assign it to me (I was going to include it with the pull request but I'm just starting to learn the platform test code).","closed","type: task,","smoyer64","2016-07-25T00:01:57Z","2016-07-25T19:12:14Z"
"","108","Feature 45 testplanspecification","Provided an DSL for generating a TestPlanSpecification.","closed","","bechte","2016-01-12T18:40:01Z","2016-01-15T13:18:58Z"
"","265","Introduce deactivation mechanism for conditions","Prior to this commit, there was no way to deactivate or turn off support for conditional test execution. In other words, there was no way to execute a `@Disabled` test and no way to deactivate custom implementations of `ContainerExecutionCondition` or `TestExecutionCondition`.  This commit addresses this issue by introducing support for supplying a `junit.conditions.deactivate` pattern to the `Launcher` via a configuration parameter in the `TestDiscoveryRequest`.  If the `junit.conditions.deactivate` pattern consists solely of an asterisk (`*`), all conditions will be deactivated. Otherwise, the pattern will be used to match against the fully qualified class name (FQCN) of each registered condition. Any dot (`.`) in the pattern will match against a dot (`.`) or a dollar sign (`$`) in the FQCN. Any asterisk (`*`) will match against one or more characters in the FQCN. All other characters in the pattern will be matched one-to-one against the FQCN.  Examples: - `*`: deactivates all conditions. - `org.junit.*`: deactivates every condition under the `org.junit` base   package and any of its subpackages.. - `*.MyCondition`: deactivates every condition whose simple class   name is exactly `MyCondition`. - `*System*`: deactivates every condition whose simple class name   contains `System`. - `org.example.MyCondition`: deactivates the condition whose FQCN is   exactly `org.example.MyCondition`.  Issue: #78  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: extensions,","sbrannen","2016-05-15T15:25:00Z","2016-05-15T19:16:07Z"
"","283","Convert MethodParameterResolver to generic ParameterResolver API","Prior to this commit, the `MethodParameterResolver` API could only be applied to methods. In addition, the `MethodInvocationContext` API needlessly stored the method which could be retrieved directly from the supplied `Parameter`.  This commit addresses these issues by converting the `MethodParameterResolver` into a generic `ParameterResolver` API that can be used to resolve parameters for both methods and constructors. At the moment, however, there is no first-class support for resolving constructor parameters in the `JUnit5TestEngine`.  Specifically, this commit includes the following changes. - Renamed `MethodParameterResolver` to `ParameterResolver` - Replaced `MethodInvocationContext` arguments in `ParameterResolver` with `Optional` for the target of method invocations - Moved `MethodInvocationContext` to the `junit5-engine` module for internal use  Issue: #267  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: extensions,","sbrannen","2016-05-25T14:41:37Z","2016-05-25T19:58:20Z"
"","253","Apply InstancePostProcessor extensions for every test instance","Prior to this commit, InstancePostProcessor extensions were only applied during the execution of a MethodTestDescriptor instead of at the point when such an instance was physically instantiated. Consequently, InstancePostProcessor extensions were never applied to instances of outer classes when test methods in a nested class were executed, which lead to improperly initialized outer instances (e.g, NullPointerExceptions, etc.).  This commit fixes this bug by relocating the invocation of InstancePostProcessor extensions to places in the framework where test instances are physically instantiated (i.e., in ClassTestDescriptor and NestedClassTestDescriptor).  Furthermore, the argument list for the postProcessTestInstance() method in the InstancePostProcessor API has been modified to accept the test instance and a generic ExtensionContext.  Issue: #252  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: execution,","sbrannen","2016-05-11T17:49:14Z","2016-05-13T13:59:08Z"
"","279","Overhaul display name semantics","Previously there was considerable confusion with regard to the differences between names and display names within JUnit 5.  This pull request addresses these issues by consolidating the two competing concepts into a single ""display name"" concept. Test classes and test methods may be assigned custom display names via the `@DisplayName` annotation. Otherwise, a default display name will be generated.  Specifically, the default display name for a test class is the fully qualified name of the class.  The default display name for a test method is the name of the method concatenated with a comma-separated list of parameter types in parentheses, and the names of parameter types are retrieved using `Class#getSimpleName()`. For example, the default display name for the following test method is `testUser(TestInfo, User)`.  ``` java   @Test   void testUser(TestInfo testInfo, @Mock User user) { ... } ```  Issue: #153  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: task,","sbrannen","2016-05-23T21:07:06Z","2016-05-24T22:01:13Z"
"","858","Remove separate artifact for parameterized tests","Parameterized tests require a dependency on `junit-jupiter-params`, which is surprising and will surely be seen as superfluous by many users. Doing some research I only found #728, which references a team call but gives no background. I assume there are good reasons for that decision (in which case this issue might force them into the light) but until then I will make a suggestion based on my ignorance. :wink:  I thought the reason may be the dependency on the CSV parser and JUnit's goal to not ship with too many dependencies. If that is indeed the reason, I suggest splitting just those sources into a subproject `junit-jupiter-csv-params` (or whatever) and move the other types into `junit-jupiter-api`. That would keep JUnit's dependencies small while giving a lot of functionality out of the box. Having to include a separate artifact for CSV values (very extension-y) makes much more sense than including one for `@ParameterizedTest` (very core feature-y).","closed","component: Jupiter,","nipafx","2017-05-22T13:38:22Z","2019-07-19T19:32:41Z"
"","440","Change use of ""JUnit Platform launcher"" to ""runner""","One slight error: you've mixed up junit-platform-runner and junit-platform-launcher. The former contains the JUnitPlatform class which is a JUnit 4 based `Runner`.  :stuck_out_tongue_winking_eye:   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","nipafx","2016-07-26T15:18:15Z","2016-07-26T21:09:19Z"
"","623","Discussion: Switch the order of 'actual' and 'expected' in `Assertions` APIs","One of the things that I find unnatural is the ordering in JUnit 4 assertions. They mostly all follow the  `assert(expected, actual)` format. Hamcrest assertions have the reverse with `actual, expected` which has a more natural flow when reading the code (my opinion) and results in more fluent assertions. The [`Assertions` class](http://junit.org/junit5/docs/current/api/org/junit/jupiter/api/Assertions.html) in the Jupiter API continues with the JUnit 4 style of `expected, actual`.  Most newer assertion frameworks now seem to follow the notion of putting the ""actual"", so I think it would be a good idea to follow that paradigm with JUnit 5 over using the existing assertion ordering that is present in JUnit 4.","closed","status: works-as-designed,","mkobit","2017-01-06T02:53:39Z","2017-03-12T14:12:33Z"
"","11","Provide support for nested contexts","One more pull request. I based this branch on Stefan's branch ""contextsupport"", fixed the resolver problems and merged it with current master. The PR supports the resolution of nested contexts (inner classes with annotation @Context). It does not yet execute them (i.e. ContextExecutionNode just skipps everything).","closed","","jlink","2015-11-11T10:37:19Z","2015-11-12T20:48:02Z"
"","152","the spec failed because the path in args is OS dependent","On my system it was actually D:\any instead of /any  Fixed by creating the canonical path for the assertion  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: bug,","schauder","2016-02-12T12:05:34Z","2016-02-13T09:28:11Z"
"","254","Stack Overflow is not a forum","On [the JUnit 5 website](http://junit.org/junit5/), there is a link called ""Forum"" which points to the Stack Overflow `junit5` tag.  The problem is: [Stack Overflow is not a forum.](http://meta.stackexchange.com/q/92107/296887) I think it would be preferrable to rename the link to something like ""Q&A"", ""Question & Answer"" or ""Stack Overflow"".  ![untitled](https://cloud.githubusercontent.com/assets/1629196/15193261/32051240-17bd-11e6-9258-58f9be1ffe98.png)","closed","theme: web site,","RAnders00","2016-05-11T18:53:32Z","2016-05-12T21:07:30Z"
"","7","Simplified specification resolution","OK, guys. I've been refactoring the whole spec resolution part. Doing that  - I introduced a new little type hierarchy: JUnit5Testable|Method|Class which allowed me to get rid of the resolvers and resolver registry.  - The JUnit5TestableFactory contains all logic for creating uniqueIDs and backwards - In doing the above I introduced an AbstractTestDescriptor which has the possibility to add a child. addChild and getChildren is not exposed in TestDescriptor so nothing has changed from the perspective of the launcher. Having the hierarchy greatly simplified the code for resolving from TestSpecificationElement to TestDescriptor, so bear with me.  The current implementation can deal with both nested test classed (each level becomes a containing test descriptor) and test methods with params (even if parameter injection is still missing).","closed","","jlink","2015-11-05T14:19:54Z","2015-11-09T08:09:09Z"
"","618","Add support for test lifecycle events in TestExecutionListener","Now there's no ability to track invocations of Before/After methods with TestExecutionListener, we need it there to be able to link test invocations with all corresponding fixtures and their timings in the reporting tool (Allure). Extensions are not entirely a solution for that, since we want to track events around fixture, one callback on the finish is not enough. And also registering such an extension via annotations everywhere would be quite clumsy.  ## Related Issues  - #542","closed","status: stale,","ehborisov","2016-12-26T14:22:54Z","2021-06-03T22:11:32Z"
"","216","Module imports and exports","Now that JUnit 5 has a modular structure, at least in the sense that it is delivered as a set of artifacts or libraries, it is time to think of package visibility between modules. This is a basic requirement of all potentially relevant module systems like JDK 9, OSGi or JBoss Modules. - Is a given package supposed to be used by other modules? - Should a package be regarded as internal to the given module? - Does a module depend on packages from other modules? - Should a package be split when it contains a mixture of exported and internal classes?  It might be useful to follow a naming convention, e.g. any package named  `*.internal.*` is internal.","closed","theme: modules,","hwellmann","2016-03-28T14:30:02Z","2019-11-18T19:44:32Z"
"","855","Java heap space issue","Note: Issue created from #801   Seems using surefire 2.20 + JUnit5 is causing a java heap space issue, see https://jira.xwiki.org/browse/XCOMMONS-1189?focusedCommentId=94953&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-94953  Note that running the exact same build by commenting out the following part doesn't exhibit the ""Java Heap Space"" issue so for some reason the junit5 provider is eating more memory. FTR I'm running with `MAVEN_OPTS=""-Xmx2048m -XX:MaxPermSize=196m""` which is already quite substantial so it could be a memory leak somewhere.  ````                    org.apache.maven.plugins           maven-surefire-plugin                      2.20 ...                                                    org.junit.platform               junit-platform-surefire-provider               1.0.0-M4                                         org.junit.jupiter               junit-jupiter-engine               ${junit5.version}                                         org.junit.vintage               junit-vintage-engine               4.12.0-M4                                  `````  Thanks","closed","3rd-party: Maven Surefire,","vmassol","2017-05-17T14:29:34Z","2017-07-11T17:16:27Z"
"","693","Change Namespace equality to consider parts order.","Not taking into account the order of parts made namespace behavior non-intuitive.  Closes: #646  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","theme: programming model,","gaganis","2017-02-27T13:15:22Z","2017-03-12T15:36:44Z"
"","380","Add talk at JavaZone 2016","New talk about JUnit.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","nipafx","2016-07-06T21:02:25Z","2020-09-08T18:29:58Z"
"","738","Cannot filter by tags","My gradle task configuration looks like this:  ```groovy String category = ""${project.findProperty('requiredCategory') ?: 'com.pcbsys.nirvana.junit.categories.TestClassifier.PromotionIntegrationTest'}"" junitPlatform { 	logManager 'java.util.logging.LogManager' 	reportsDir file (reportsDirectory) 	enableStandardTestTask false	 	filters { 		engines { 			include 'junit-platform', 'junit-vintage', 'junit-jupiter' 		} 		tags { 			include category 		} 	} 	selectors { 	packages 'com.pcbsys.nirvana.nJMS', 'com.pcbsys.nirvana.client', 'com.pcbsys.foundation', 'com.pcbsys.nirvana.nAdminAPI'     } } ```  My test is annotated like this:   ```java   @PromotionIntegrationTest   @org.junit.jupiter.api.Test   public void testLoadMultiZone() throws Exception {...} ```  And the annotation itself looks like this (TestClassifier.txt):  ```java 	@Target({ ElementType.TYPE, ElementType.METHOD }) 	@Retention(RetentionPolicy.RUNTIME) 	@Categories(promotionCategory = { PromotionClassifier.PROMOTION_TEST }, technicalCategory = { 			TechnicalClassifier.INTEGRATION_TEST }) 	@Tag(""PromotionIntegrationTest"") 	public @interface PromotionIntegrationTest {  	} ```  [TestClassifier.txt](https://github.com/junit-team/junit5/files/848217/TestClassifier.txt)  When I run the test using gradle task no test is being executed. I get this:   ``` Test run finished after 47 ms [         2 containers found      ] [         0 containers skipped    ] [         2 containers started    ] [         0 containers aborted    ] [         2 containers successful ] [         0 containers failed     ] [         0 tests found           ] [         0 tests skipped         ] [         0 tests started         ] [         0 tests aborted         ] [         0 tests successful      ] [         0 tests failed          ]  :prod/java/integration-test:runTests ```  Any idea what is wrong? Perhaps some configuration on my side?","closed","","Vazzilena","2017-03-16T15:40:12Z","2018-03-16T14:24:58Z"
"","584","How can I use JUnit 5 with Spring 5?","My Email is 18643916953@163.com","closed","type: question,","poneypan","2016-12-04T13:16:15Z","2017-08-16T09:33:43Z"
"","889","Request for a warning in release notes: Unable to start tests in IntelliJ with current SNAPSHOT version using launcher bundled in the IDE","my build.gradle looks like: ``` ext.junitJupiterVersion  = 'latest.integration'  dependencies {     testRuntime(""org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"") } ``` This way launcher is added by IDE and the exception appears:  ``` Exception in thread ""main"" java.lang.NoSuchMethodError: org.junit.platform.commons.util.ReflectionUtils.getDefaultClassLoader()Ljava/lang/ClassLoader; 	at org.junit.platform.launcher.core.ServiceLoaderTestEngineRegistry.loadTestEngines(ServiceLoaderTestEngineRegistry.java:30) 	at org.junit.platform.launcher.core.LauncherFactory.create(LauncherFactory.java:53) 	at com.intellij.junit5.JUnit5IdeaTestRunner.createListeners(JUnit5IdeaTestRunner.java:39) ```  I guess, after releasing M5, many users would face this issue as well. Though they may already know how to trick the IDE and use the launcher delivered by the same version as their api, please add corresponding warnings to the user guide and in release notes. We would have to repeat this anyway, but at least we would have a good place where to point.  Thanks in advance!","closed","theme: documentation,","akozlova","2017-06-15T14:45:12Z","2017-06-22T09:30:22Z"
"","648","Add integration test to ensure Jupiter engine correctly runs tests","Most of the tests are written in JUnit5-style. This is good in the sense that we want to try out our APIs, but bad because regressions in the framework can cause failing tests to pass or can filter tests entirely. One example was in the initial version of #647 where an incorrect usage of a Stream's `filter()` method removed all tests from being run.  We should have some kind of integration test that runs some sample tests (which includes failing and passing tests), reads the output, and ensures that we get the expected result. This integration test should not be written as a JUnit5-style test (for obvious reasons).  Some initial discussion for this is in the comments for #647","closed","component: Jupiter,","kcooney","2017-02-12T19:06:04Z","2017-02-13T19:25:11Z"
"","352","Make reflection, annotation, and scanning utilities available to TestEngine authors","Most 3rd party engines will have to handle reflection and annotations and do classpath scanning. If you want engines to be consisten in how they do it and how they handle corner cases, make the important stuff of junit-platform-commons, where everything is API(Internal), available, e.g. in `org.junit.platform.engine.support`","closed","theme: extensions,","jlink","2016-06-24T08:47:04Z","2017-03-12T15:21:45Z"
"","221","Micro tests for StringUtils","Micro tests for `StringUtils`. Prerequisite for merging #220.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","marcphilipp","2016-04-02T12:20:09Z","2016-04-10T13:09:19Z"
"","346","Add possibility to disable all tests in a class except for one","Maybe you know this feature from Sound mixers (`Solo`) or Spock (`@IgnoreRest`) which mutes everything (within the context) else except the one thing you want to inspect. That's quite handy for inspecting tests so you don't need to add `@Ignore`/`@Disabled` to the other tests/steps within your test class.  Some IDEs allow selective execution but in some cases it's quite hard.","closed","3rd-party: Pioneer,","mp911de","2016-06-22T09:59:38Z","2019-02-05T13:08:28Z"
"","614","@DisplayName value as part of @Test?","May be this was discussed earlier but I couldn't find any references. As we are building new api, is there a reason why we cannot specify test name as part of test itself? Like below  Instead of ``` @Test @DisplayName(""test something"") void test() throws Exception {     //test }  ``` Can we write this as, ``` @Test(""test something"") void test() throws Exception {     //test } ```  This would save one additional annotation we need to specify for each test.","closed","component: Jupiter,","brsanthu","2016-12-23T19:26:15Z","2018-08-13T11:08:38Z"
"","321","Should there be a repository for ""official"" JUnit 5 extensions","Many JUnit 5 Extensions will be lightweight glue code that connect two disparate projects.  Examples include the MockitoExtension and the JUnitParamsExtension (which is part of my AfterDiscoveryCallback PoC).  Other Extensions will replace existing JUnit 4 @Rules, such as the TemporaryFolder rule.  This class of extensions logically are only dependent upon JUnit 4.  Would it make sense to create a junit5-extensions project (repository) where members of the various project communities could collaborate?  When posed to the Mockito team in issue https://github.com/mockito/mockito/issues/438#issuecomment-227016382, @TimvdLippe suggested that the JUnit 5 team be asked.","closed","status: declined,","smoyer64","2016-06-19T19:58:21Z","2016-06-20T10:33:45Z"
"","317","Make @API public to allow Extensions and TestEngines to adopt API semantics","Making @API public allows Extension and TestEngine developers to adopt JUnit 5's API ""typing"".  This also makes the API tools proposed in #144 more useful as they'd be applicable to the other projects.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: enhancement,","smoyer64","2016-06-18T18:04:57Z","2016-07-25T18:25:19Z"
"","950","Provide UniqueId instead of parent descriptor","Make the creation of `VintageTestDescriptor` independent from the `EngineDescriptor`. This enables us to simplify the `TestClassRequestResolver` by letting it only create `TestClassRequest`s.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","stefanbirkner","2017-07-15T14:35:10Z","2017-07-17T08:00:09Z"
"","408","Release Bug-Fixes for Milestone 1","M1 has a couple of bugs that might have a detrimental effect on early adopters' opinion of JUnit 5 (#384, #390, #396, #402). It is not unlikely that more will be found.  A bug-fix release for M1 could prevent this.  With an M1 release branch it should be easy to cherry pick the fixes (as long as they apply well) into that branch and occasionally release new versions, e.g. as M1.1. This branch would of course also have to be covered by CI.","closed","","nipafx","2016-07-14T20:13:10Z","2016-07-15T05:33:16Z"
"","457","Rerun failed tests via command line","Let's imagine that: 1. We run large number of tests via command line 2. Some tests fail 3. We investigate why they failed 4. We fix the problem, for example in the code 5. Now we want to rerun failed tests only  **It would be great to have something like --rerun-failed-tests command option**.  IntelliJ IDEA IDE has ""Rerun Failed Tests"" feature, so why not to have it directly in Junit 5 Console Launcher?","closed","status: stale,","ondrejlerch","2016-08-11T10:47:32Z","2021-06-03T22:11:26Z"
"","454","Introduce query language for selecting tags","Let's imagine that our tests are annotated with multiple tags such as fast / slow, priority1 / priority2, stable / unstable, integration / unit, subproject1 / subproject2.  If I am not mistaken:  ``` java tags {         include 'fast', 'priority1', 'stable', 'integration', 'subproject1' } ```  will run 'fast' OR 'priority1' OR 'stable' OR 'integration' OR 'subproject1'  I would like to be able to specify:  ``` java tags {         include 'fast AND priority1 AND stable AND integration AND subproject1' } ```  or even:  ``` java tags {         include 'fast AND (priority1 OR priority2) AND NOT unstable AND integration AND (subproject1 OR subproject2)' } ```  Syntax can be different but you get the idea.  Alternatively, it would be great if there is simple Java API which would help us create such queries. Benefit of Java API would be that queries could be typesafe, autocompleted by IDE and dynamic.  PS: let's make JUnit 5 great!","closed","theme: discovery,","ondrejlerch","2016-08-11T08:40:10Z","2018-01-23T20:52:07Z"
"","9","Method argument injection","just merged master into the experimental method-argument-injection branch. the latter is modeled roughly after the respective spring argument injection solution. it includes two sample argument resolvers (by type and by annotation)  and a couple of test cases to demonstrate these two resolvers. examples for overloaded test methods are included as well. there is a dummy registry for resolvers which will have to be replaced when there is a proper extension mechanism. some polishing still needs to be done (e.g., failing in the case of too many competing resolvers)","closed","","mmerdes","2015-11-07T23:09:56Z","2015-11-13T15:19:59Z"
"","250","Publish to MavenCentral","Just like `compile 'junit:junit:4.12'` can be used in Gradle and downloaded from MavenCentral, when can we upload Junit 5 to MavenCentral?","closed","status: invalid,","jaredsburrows","2016-05-08T20:11:07Z","2016-05-08T20:45:58Z"
"","350","Support UTF-16 in generated XML test reports","JUnit 5 cannot produce correct .xml report file.  While executing task `junitPlatformTest`:  ``` :junitPlatformTest                                                            cze 23, 2016 7:31:03 PM org.junit.platform.launcher.core.ServiceLoaderTestEngineRegistry loadTestEngines INFO: Discovered TestEngines with IDs: [junit-jupiter] Could not write XML report: D:\project\build\test-results\junit-platform\TEST-junit-jupiter.xml javax.xml.stream.XMLStreamException: java.nio.charset.MalformedInputException: Input length = 1         at com.sun.xml.internal.stream.writers.XMLStreamWriterImpl.writeAttribute(XMLStreamWriterImpl.java:553)         at org.junit.platform.console.tasks.XmlReportWriter.writeTestcase(XmlReportWriter.java:122)         at org.junit.platform.console.tasks.XmlReportWriter.writeTestsuite(XmlReportWriter.java:83)         at org.junit.platform.console.tasks.XmlReportWriter.writeXmlReport(XmlReportWriter.java:66)         at org.junit.platform.console.tasks.XmlReportWriter.writeXmlReport(XmlReportWriter.java:58)         at org.junit.platform.console.tasks.XmlReportsWritingListener.writeXmlReportSafely(XmlReportsWritingListener.java:100)         at org.junit.platform.console.tasks.XmlReportsWritingListener.writeXmlReportInCaseOfRoot(XmlReportsWritingListener.java:93)         at org.junit.platform.console.tasks.XmlReportsWritingListener.executionFinished(XmlReportsWritingListener.java:87)         at org.junit.platform.launcher.core.TestExecutionListenerRegistry$CompositeTestExecutionListener.lambda$executionFinished$23(TestExecutionListenerRegistry.java:63)         at java.lang.Iterable.forEach(Iterable.java:75)         at org.junit.platform.launcher.core.TestExecutionListenerRegistry.notifyTestExecutionListeners(TestExecutionListenerRegistry.java:37)         at org.junit.platform.launcher.core.TestExecutionListenerRegistry.access$100(TestExecutionListenerRegistry.java:26)         at org.junit.platform.launcher.core.TestExecutionListenerRegistry$CompositeTestExecutionListener.executionFinished(TestExecutionListenerRegistry.java:63)         at org.junit.platform.launcher.core.ExecutionListenerAdapter.executionFinished(ExecutionListenerAdapter.java:56)         at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:93)         at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)      rg.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)         at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:124)         at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:84)         at org.junit.platform.console.tasks.ExecuteTestsTask.executeTests(ExecuteTestsTask.java:60)         at org.junit.platform.console.tasks.ExecuteTestsTask.lambda$execute$6(ExecuteTestsTask.java:52)         at org.junit.platform.console.tasks.CustomContextClassLoaderExecutor.invoke(CustomContextClassLoaderExecutor.java:33)         at org.junit.platform.console.tasks.ExecuteTestsTask.execute(ExecuteTestsTask.java:52)         at org.junit.platform.console.tasks.ConsoleTaskExecutor.executeTask(ConsoleTaskExecutor.java:38)         at org.junit.platform.console.ConsoleRunner.execute(ConsoleRunner.java:51)         at org.junit.platform.console.ConsoleRunner.main(ConsoleRunner.java:36)         Suppressed: java.nio.charset.MalformedInputException: Input length = 1                 at java.nio.charset.CoderResult.throwException(CoderResult.java:281)                 at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:285)                 at sun.nio.cs.StreamEncoder.write(StreamEncoder.java:125)                 at java.io.OutputStreamWriter.write(OutputStreamWriter.java:207)                 at java.io.BufferedWriter.flushBuffer(BufferedWriter.java:129)                 at java.io.BufferedWriter.close(BufferedWriter.java:265)                 at org.junit.platform.console.tasks.XmlReportsWritingListener.writeXmlReportSafely(XmlReportsWritingListener.java:101)                 ... 20 more         Caused by: java.nio.charset.MalformedInputException: Input length = 1         at java.nio.charset.CoderResult.throwException(CoderResult.java:281)         at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:285)         at sun.nio.cs.StreamEncoder.write(StreamEncoder.java:125)         at java.io.OutputStreamWriter.write(OutputStreamWriter.java:207)         at java.io.BufferedWriter.flushBuffer(BufferedWriter.java:129)         at java.io.BufferedWriter.write(BufferedWriter.java:230)         at com.sun.xml.internal.stream.writers.XMLStrerImpl.writeXMLContent(XMLStreamWriterImpl.java:1486)         at com.sun.xml.internal.stream.writers.XMLStreamWriterImpl.writeAttribute(XMLStreamWriterImpl.java:547)         ... 25 more                  Test run finished after 744 ms      [       666 tests found     ] [         0 tests skipped   ] [       666 tests started   ] [         0 tests aborted   ] [       666 tests successful] [         0 tests failed    ] ```  The XML looks like 2 line file (which has 116 368 chars): ![image](https://cloud.githubusercontent.com/assets/6240704/16313657/78ea03d0-397a-11e6-8e2e-7c247fa78ba6.png)  and finishes in unexpected way: ![image](https://cloud.githubusercontent.com/assets/6240704/16313687/a7b2c562-397a-11e6-8a0a-9936b287fa0f.png)","closed","status: stale,","sta-szek","2016-06-23T17:43:02Z","2021-06-19T12:50:03Z"
"","318","Assertions.assertEquals() should not check identity","JUnit 4 executes the following `equals` method and therefore exits with an AssertionError (and not with `fail`):  ``` java   @Test   public void probe4() {     Object object = new Object() {       public boolean equals(Object obj) {         throw new AssertionError(); // end-of-test       }     };     Assert.assertEquals(object, object);     Assert.fail(""should not happen"");   } ```  JUnit Jupiter does not execute the `equals` method and therefore exits with `fail(""should not happen"")`:  ``` java   @Test   void probeJupiter() {     Object object = new Object() {       public boolean equals(Object obj) {         throw new AssertionError();       }     };     Assertions.assertEquals(object, object);     Assertions.fail(""should not happen""); // end-of-test   } ```  The Jupiter implementation delegates to `java.util.Objects.equals(a, b)` which uses a short-cut if a and b point to the same object:  ``` java public static boolean equals(Object a, Object b) {   return (a == b) || (a != null && a.equals(b)); } ```  Is the change of behavior intended? ## Deliverables - [x] Do not perform identity check in `assertEquals()` - [x] Do not perform identity check in `assertNotEquals()`","closed","theme: programming model,","sormuras","2016-06-19T12:12:14Z","2016-06-19T16:26:12Z"
"","391","Use diamond operator for creating Stack objects in User Guide","Java 8 code should look like Java 8 code.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","stefanbirkner","2016-07-11T12:42:12Z","2016-07-13T20:11:47Z"
"","2","Code Conventions","It would be nice to have some code conventions defined, to make it easier for non-core-committers to provide useful pull requests.  Ideally they would come with formatters/checkstyle configurations.","closed","","schauder","2015-10-24T11:17:56Z","2015-11-07T18:44:19Z"
"","240","Aggregate coverage reports with JaCoCo","It would be great to compute aggregate coverage reports with JaCoCo and perhaps post the results to coveralls.io and/or codecov.","closed","theme: build,","aalmiray","2016-05-05T17:19:31Z","2018-01-16T06:11:16Z"
"","87","Provide mechanism to order the sequence of @Before*/@After* methods","It would be great to allow explicit control of ordering things such as `@BeforeEach`, `@AfterEach`, `@BeforeAll`, `@AfterAll`, and extensions.  My use case from JUnit 4 is that I have a `WireMock` instance that I want to shutdown via `@Rule` after some other `@Rule`'s.","closed","theme: ordering,","yogurtearl","2016-01-05T21:12:17Z","2016-04-15T11:21:16Z"
"","238","Add project metadata to JAR manifest","It would be great if JAR manifests contained additional information related to the project such as  ``` Manifest-Version: 1.0 Built-By: ${user.name} Created-By: 1.8.0_92 (Oracle Corporation 25.92-b14) Build-Date: 2016-05-05 Build-Time: 18:44:48.377+0200 Build-Revision: 0ca4beaa67bd484f98fd46e776e31c89adfea234 Specification-Title: ${project.name} Specification-Version: 5.0.0-ALPHA Specification-Vendor: junit.org ```","closed","theme: build,","aalmiray","2016-05-05T16:51:15Z","2016-05-13T12:11:37Z"
"","21","Get InstancePostProcessor in sync with *Callbacks","It seems the InstancePostProcessor could be made in sync with all the Callbacks, and probably be named TestCallbacks, giving it both a pre and post method similar to the other Callbacks.  An example use case is measuring how long the execution of the test method took (without all before/after calls). We use this to measure the performance of our code, and fail the test if it runs significantly slower than earlier executions.","closed","theme: extensions,","debruyckere","2015-11-30T11:28:39Z","2015-12-02T15:55:36Z"
"","804","""Test events were not received"" and other issues under IntelliJ","It seems that `junit-platform-gradle-plugin` behaves completely differently than standard `test` task, and this makes problems: - `gradle cleanTest test` doesn't cause to rerun tests as normally IntelliJ expects - `Test events were not received` error in IntelliJ test results view - The plugin seems to ignore `--tests ...` option - Now I'm unable to reproduce it, but sometimes I got Gradle exit code 255 when I clicked test method and chose `Run` from context menu  Plugin version: 1.0.0-M4, IntelliJ version: 2017.1.1  It's more issue with this plugin, not with IntelliJ. Without backwards compatibility with `test` task, other IDEs will probably suffer same issues.  IMHO, a good cooperation with IDEs  is a must for any tool to become popular.","closed","component: Platform,","iirekm","2017-04-24T12:39:49Z","2017-04-24T14:03:43Z"
"","241","Limit publishing settings on build file","It looks like publishing settings are applied to all subprojects but only a handful of them are actually meant for publication. This leads to repeated task deactivation on the projects that should publish their artifacts. The build can be simplified in many ways, one of them would be to apply the following pattern to the build  ``` def mavenizedProjects() {     [         project(':project1'),         project(':project2')     ] }  configure(mavenizedProjects()) {    ... } ```","closed","theme: build,","aalmiray","2016-05-06T08:56:59Z","2016-05-13T12:35:29Z"
"","621","Does the Console Launcher have a flag to run all discovered tests?","It looks like in M3 `-a` is gone which allowed to simply run all discovered tests. I can see no alternative - do I have to use `-p org` or is there something shorter?","closed","component: Platform,","nipafx","2017-01-02T15:33:49Z","2017-01-02T20:33:35Z"
"","811","Feature Request: Convert underscores to spaces while reporting","It is great that we have DisplayName that helps us give meaningful names for our tests. But it means, we have to type same things twice. Once in `DisplayName` and another type in method name.  What if the junit reporter, converts the method names, changes the underscores to spaces and report it? This way, we can just name the methods longer and it will be reported in a easy to use way.  For ex., ``` @Test void handles_missing_request_body() { ... } ``` would be reported as ```      handles missing request body ```  Thank you for your review of this request.","closed","status: duplicate,","brsanthu","2017-04-27T17:11:16Z","2017-04-27T18:42:57Z"
"","167","Add assertion methods to handle arrays and collections","It could be done with external assertion libraries but it's so common and it was part of JUnit 4.  Could be added to `Assertions` or could live in separate container(s), e.gl `CollectionAssertions` and `ArrayAssertions`.","closed","up-for-grabs,","jlink","2016-03-01T09:50:46Z","2016-05-31T22:04:14Z"
"","206","Unable to extend an abstract class for my test classes","Issue: Unable to extend my test classes from an abstract class.  Workaround: remove abstract from the class. (extending a regular class works just ok)  Noticed on: 16.03.2016 jUnit versions: 5.0.0-ALPHA & 5.0.0-SNAPSHOT  Context: I usually extend my test classes from an abstract class where I have methods reading mock files and context initialisers, example: https://github.com/mkbrv/orange.api/blob/master/integration-tests/src/test/java/com/mkbrv/orange/integration/AbstractIntegrationTest.java   Error on ALPHA:   ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test (default-test) on project integration-tests: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test failed: There was an error in the forked process [ERROR] org.junit.gen5.commons.util.PreconditionViolationException: Cannot resolve class name 'com.mkbrv.orange.integration.AbstractIntegrationTest' because it's not a test container [ERROR] at org.junit.gen5.engine.junit5.discovery.JUnit5TestableFactory.throwCannotResolveClassException(JUnit5TestableFactory.java:176) [ERROR] at org.junit.gen5.engine.junit5.discovery.JUnit5TestableFactory.fromClass(JUnit5TestableFactory.java:55) [ERROR] at org.junit.gen5.engine.junit5.discovery.JUnit5Testable.fromClass(JUnit5Testable.java:24) [ERROR] at org.junit.gen5.engine.junit5.discovery.DiscoverySelectorResolver.resolveTestClass(DiscoverySelectorResolver.java:74) [ERROR] at org.junit.gen5.engine.junit5.discovery.DiscoverySelectorResolver.lambda$resolveSelectors$30(DiscoverySelectorResolver.java:63) [ERROR] at java.util.ArrayList.forEach(ArrayList.java:1249) [ERROR] at org.junit.gen5.engine.junit5.discovery.DiscoverySelectorResolver.resolveSelectors(DiscoverySelectorResolver.java:62) [ERROR] at org.junit.gen5.engine.junit5.JUnit5TestEngine.resolveDiscoveryRequest(JUnit5TestEngine.java:47) [ERROR] at org.junit.gen5.engine.junit5.JUnit5TestEngine.discover(JUnit5TestEngine.java:40) [ERROR] at org.junit.gen5.launcher.main.DefaultLauncher.discoverRoot(DefaultLauncher.java:84) [ERROR] at org.junit.gen5.launcher.main.DefaultLauncher.discover(DefaultLauncher.java:54) [ERROR] at org.junit.gen5.surefire.TestPlanScannerFilter.accept(TestPlanScannerFilter.java:34) [ERROR] at org.apache.maven.surefire.util.DefaultScanResult.applyFilter(DefaultScanResult.java:98) [ERROR] at org.junit.gen5.surefire.JUnitGen5Provider.scanClasspath(JUnitGen5Provider.java:61) [ERROR] at org.junit.gen5.surefire.JUnitGen5Provider.invoke(JUnitGen5Provider.java:56) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121) [ERROR] -> [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException  On Snapshot version, I get a NPE in the same area: [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test (default-test) on project integration-tests: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test failed: There was an error in the forked process [ERROR] java.lang.NullPointerException [ERROR] at org.junit.gen5.engine.junit5.discovery.JUnit5TestableFactory.lambda$fromClass$40(JUnit5TestableFactory.java:64) [ERROR] at java.util.logging.Logger.log(Logger.java:808) [ERROR] at java.util.logging.Logger.warning(Logger.java:1580) [ERROR] at org.junit.gen5.engine.junit5.discovery.JUnit5TestableFactory.fromClass(JUnit5TestableFactory.java:63) [ERROR] at org.junit.gen5.engine.junit5.discovery.JUnit5Testable.fromClass(JUnit5Testable.java:38) [ERROR] at org.junit.gen5.engine.junit5.discovery.DiscoverySelectorResolver.resolveTestClass(DiscoverySelectorResolver.java:72) [ERROR] at org.junit.gen5.engine.junit5.discovery.DiscoverySelectorResolver.lambda$resolveSelectors$49(DiscoverySelectorResolver.java:61) [ERROR] at java.util.ArrayList.forEach(ArrayList.java:1249) [ERROR] at org.junit.gen5.engine.junit5.discovery.DiscoverySelectorResolver.resolveSelectors(DiscoverySelectorResolver.java:60) [ERROR] at org.junit.gen5.engine.junit5.JUnit5TestEngine.resolveDiscoveryRequest(JUnit5TestEngine.java:47) [ERROR] at org.junit.gen5.engine.junit5.JUnit5TestEngine.discover(JUnit5TestEngine.java:40) [ERROR] at org.junit.gen5.launcher.main.DefaultLauncher.discoverRoot(DefaultLauncher.java:88) [ERROR] at org.junit.gen5.launcher.main.DefaultLauncher.discover(DefaultLauncher.java:65) [ERROR] at org.junit.gen5.surefire.TestPlanScannerFilter.accept(TestPlanScannerFilter.java:34) [ERROR] at org.apache.maven.surefire.util.DefaultScanResult.applyFilter(DefaultScanResult.java:98) [ERROR] at org.junit.gen5.surefire.JUnitGen5Provider.scanClasspath(JUnitGen5Provider.java:61) [ERROR] at org.junit.gen5.surefire.JUnitGen5Provider.invoke(JUnitGen5Provider.java:56) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121) [ERROR] -> [Help 1] [ERROR]","closed","type: bug,","mkbrv","2016-03-16T13:56:29Z","2016-03-16T14:58:14Z"
"","273","assertNull/Same/Equals: Fill expected/actual values in AssertionFailedError","Issue: #138   This change fills expected/actual values in AssertionFailedError for  - `assertNull` - `assertSame` - `assertEquals`  Contrary to the subtasks of #138 I don't think it makes sense to fill `expected` and `actual` for `assertNotNull`, `assertNotSame`, and `assertNotEquals` because there's no expected value in these cases. We could change `AssertionFailedError` to allow only specifying an actual value.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: enhancement,","marcphilipp","2016-05-21T16:05:02Z","2016-05-23T06:49:48Z"
"","426","Lifecycle Documentation?","Is there anywhere that explains the ""lifecycle"" so to speak of a JUnit Jupiter test run? I know the JavaDocs exist for each class, etc, and the user guide gives usage on how to write extensions and tests but I haven't seen anything that discusses the detailed breakdown of the component parts (e.g. test, test container, extensions, engines, etc) and their lifecycle (e.g. how long does each portion ""live"", when is it instantiated and by what, etc). I am sure some of this is in flux as the milestones are completed and JUnit Jupiter is finalized, but wasn't sure if there was any existing documentation that went over all of that yet.  I also am not sure if this is the right place to ask this? I thought about asking on the stack exchange site with the JUnit5 tag, but again wasn't sure if _that_ was the right place :-) ... if it is, please let me know and I'll ask there instead. Thanks!","closed","theme: documentation,","littleclay","2016-07-23T19:28:58Z","2016-07-26T13:15:12Z"
"","147","assertThat and matchers","Is there any plan to support Hamcrest matchers? Or some fluent api style similar to AssertJ?  If not, would you consider adding an assertThat method which is semantically equal to assertTrue, for better readability?","closed","status: declined,","sbley","2016-02-03T20:49:15Z","2016-02-04T11:09:03Z"
"","695","Dynamic tests, nested twice","Is there a way to create a `TestFactory`, that returns a `TestFactory`?  I have a test that reads test output from a third-party program and displays is.  So what i need is:  ``` myTest . Section #1    . Dynamically named Test A    . Dynamically Test B    . Dynamically Something else . Section #2    . Dynamically named Test A    . Dynamically Test B    . Dynamically Something else ```  This could be done with a parameter on `@TestFactory` that takes a pattern to split the returned testname into a hierarchy:  ```kotlin @TestFactory(""{0}/{1}/{rest}"") Iterable myTests() {     return Arrays.asList(         dynamicTest(              ""Section #1/Dynamically named Test A"",              () -> {}),         dynamicTest(              ""Section #2/Dynamically named Test A"",              () -> {}), 	); } ```","closed","component: Jupiter,","fab1an","2017-02-28T13:33:46Z","2021-06-09T14:01:49Z"
"","531","Deprecate expectThrows in favor of assertThrows returning the exception","Is it possible to rename `expectThrows`?  As we introduce people to `expectThrows`, we keep hearing: - (almost always) This is great. - (occasionally) This isn't what ""expect"" usually means.  I (and the people I'm hearing from) seem to be used to to ""expect"" as meaning: ""If this fails, record the failure in a list. When the test fails, show all the failures."" For example: https://github.com/google/googletest/blob/master/googletest/docs/Primer.md#assertions  Additionally, the ""assert"" vs. ""expect"" naming doesn't seem suggest ""one of these returns the exception, and the other doesn't"" to us.  I don't know if this is still open to discussion, but if it is, my first attempt would be...  ``` java     SomeException caught =         exceptionThrownBy(SomeException.class, () -> { /* code */ }); ```  ...since it returns the exception thrown by the code. I'm happy to fish around for suggestions from others if it would be worthwhile, but I figured I should check before putting significant time into this. Thanks.","closed","component: Jupiter,","cpovirk","2016-09-30T21:35:47Z","2019-07-19T19:33:05Z"
"","414","Idea: Make Assertions an interface","Is it a good idea to make https://github.com/junit-team/junit5/blob/master/junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assertions.java an **interface** with static methods ? Same for Assumptions.  This way I could have test class like:  ``` java class MyTest implements Assertions, Assumptions {   @Test   void doIt() {      assumingThat(...);      ...      assertEquals(...);   } } ```  The benefit is saving the static imports for each and every method. Especially when I add `implements Assertions, Assumptions` to my base test class.","closed","","martin-g","2016-07-19T14:51:38Z","2016-12-15T14:21:57Z"
"","19","Introduce support for before/after callbacks once per entire test run","Initially wrote it [here](https://github.com/junit-team/junit-lambda/wiki/OLD-Prototype-Feedback#lack-of-beforealltests-afteralltests-or-suitetags-level-annotations).  Nice to have callback interfaces once per entire test run or engine/tag/etc. (e.g.: _@BeforeAllTests/@AfterAllTests_) Would be nice that they receive `TestExecutionContext` in argument, so that implementations can populate beans which could be resolved/used/injected across all tests.","closed","theme: extensions,","ttddyy","2015-11-30T06:18:03Z","2019-07-20T23:41:32Z"
"","292","Clarify required JARs for ""Using JUnit 4 to Run the JUnit Platform"" in User Guide","In the Setup section in http://junit.org/junit5/docs/current/user-guide/#running-tests-junit-platform-runner we do not list transitive dependencies needed when manually setting this up which confused at least one user: https://twitter.com/LancerKind/status/737632578757263360","closed","component: Platform,","marcphilipp","2016-05-31T13:15:44Z","2016-12-29T17:17:49Z"
"","495","@AfterEach methods are not executed bottom-up within a class hierarchy","In the commit that closed issue #340, the following paragraph was added to the Javadocs to explain the explicit ordering guaranteed by the JUnit Jupiter engine:  > `@AfterEach` methods are inherited from superclasses as long as > they are not overridden. Furthermore, `@AfterEach` methods from > superclasses will be executed after `@AfterEach` methods in subclasses.  The attached test classes show that while the `@BeforeAll`, `@Afterall`, and `@BeforeEach` inheritance is working, the ordering is not correct when the `@AfterEach` methods are called.  When run with Maven the output is as follows:  ``` Running ChildTests Parent - beforeAll() Child - beforeAll() Parent - beforeEach() Child - beforeEach() Child - test1() Parent - afterEach() Child - afterEach() Parent - beforeEach() Child - beforeEach() Child - test2() Parent - afterEach() Child - afterEach() Child - afterAll() Parent - afterAll() Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in ChildTests ```  The output is the same when executed via the JUnitPlatform runner.  [after-each-order-issue.zip](https://github.com/junit-team/junit5/files/457393/after-each-order-issue.zip)","closed","component: Jupiter,","smoyer64","2016-09-06T17:50:26Z","2016-11-30T08:45:55Z"
"","560","Link to AssertionFailedError in the Javadoc","In the [Javadoc for the `Assertions` class](http://junit.org/junit5/docs/current/api/org/junit/jupiter/api/Assertions.html), the following is mentioned:  > A *failed* assertion will always throw `AssertionFailedError` or a subclass thereof.  Junit doesn't declare that `AssertionFailedError` class, nor does the JDK (see [Junit's Javadoc](http://junit.org/junit5/docs/current/api/allclasses-frame.html) and [JDK's Javadoc](http://docs.oracle.com/javase/8/docs/api/allclasses-frame.html)).  So where is that class defined? Can you please add links in the Javadoc to the class you're actually referencing? I think that simply finding the missing link will be enough in the Javadoc build.","closed","component: Jupiter,","ogregoire","2016-11-04T14:42:33Z","2016-11-05T16:39:06Z"
"","237","Revert to a simplified extension model","In order to postpone support for programmatic extension registration, the JUnit Team has decided to revert to a _simplified extension model_ with a focus on _extensions that are applied at extension points_.  The commits in this pull request therefore address the following issues. - Removal of `ExtensionPoint`, `ExtensionPointRegistry`, and `ExtensionRegistrar` - Removal of the suffix `ExtensionPoint` in extension interface names - Introduction of _before_ and _after_ test method execution lifecycle callbacks - Simplification of the implementation of JUnit 5 test descriptors - Separation of concerns regarding user code and extension code - Eager lookup and validation of user-defined lifecycle callback methods during the discovery phase  Issue: #232  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: execution,","sbrannen","2016-05-03T07:59:44Z","2019-07-19T19:33:04Z"
"","435","Add integration tests for Maven Surefire provider","In order to ensure that the Maven Surefire provider is working correctly we need a basic set of integration tests that use an actual POM, execute tests via Maven, and verify their results.","closed","component: Platform,","marcphilipp","2016-07-25T13:36:48Z","2016-12-22T13:03:55Z"
"","47","Introduce simple ToStringBuilder","In order to avoid code duplication and dependencies on third-party libraries such as Apache Commons, introduce a simple `ToStringBuilder` that generates output similar to that which is currently generated by `ConditionEvaluationResult#toString()`.","closed","type: task,","sbrannen","2015-12-03T20:51:32Z","2015-12-18T10:55:31Z"
"","96","Introduce disclaimer for junit-commons","In order to avoid any confusion about the intent of the `junit-commons` module, we need to provide a clear disclaimer to convey the fact that such utilities are intended for internal usage only.","closed","type: task,","sbrannen","2016-01-09T13:45:51Z","2016-01-09T15:08:07Z"
"","162","Introduce SPI for generating display names","In many cases the strings passed to `@DisplayName` are just a prettified version of the class/method name, e.g.:  ``` java @DisplayName(""List"") class ListTest {     @Nested     @DisplayName(""when empty"")     class WhenEmpty {         @Test         @DisplayName(""can add"")         void canAdd() {             ...         }     } } ```  It might be a nice-to-have if this could happen automatically, e.g.:  ``` java @DisplayName(prettify = true) class ListTest {     @Nested     class WhenEmpty {         @Test         void canAdd() {             ...         }         @Test         @DisplayName(""can't get"")         void cantGet() {             ...         }     } } ```  ### Related Issues  - #145 - #153 - #432  - #1036  - #1577  - #1589   ## Deliverables  - [ ] Introduce an extension for generating display names. - [ ] Provide an out-of-the-box implementation of the extension that can be enabled via a JUnit configuration property.","closed","type: new feature,","nipafx","2016-02-21T17:31:27Z","2019-07-19T19:33:03Z"
"","551","@Check instead of @Test","In JUnit there is the @Test annotation. According to James Bach and Michael Bolton, ""test"" can be considered a misleading label in that context.  More appropriate would be **@Check** because testing can't be automated whereas checking can be done by a machine.  See Bolton's blog where he explains what a test is and what an automated check is: http://www.developsense.com/blog/2009/08/testing-vs-checking/ (read the **old** version first I recommend).  What about deprecating @Test annotation and replacing it with @Check in JUnit 5?","closed","status: declined,","Ernesto-Maserati-CH","2016-10-26T15:39:14Z","2016-10-26T22:31:43Z"
"","575","assertThrows() should use getCanonicalName() for printing exception type","In JUnit 4, we changed `assertThrows()` to use `Class.getCanonicalName()` so the exception messages are more readable. See https://github.com/junit-team/junit4/pull/1394 for details.  Note in that same pull, I ensured that the message would remain readable even if the string representation of the exception classes are identical (which could happen if there are multiple classloaders). Previously, the error message would be `'expected: java.lang.String""`, which is confusing. JUnit 5 appears to have the same bug.  We should do the same thing for JUnit 5. I propose that we do this by passing the actual and expected class values to `org.opentest4j.AssertionFailedError` and have OpenTest4J print out a more human-readable message when the expected and/or actual values are classes.","closed","component: Jupiter,","kcooney","2016-11-29T06:08:39Z","2016-12-24T14:24:09Z"
"","505","Is there a corresponding concept of JUnit4's @Parameters","In JUnit 4 tests could be run as `Parameterized`. These test class had to define a method annotated with `@Parameters`. This method would return a set of parameters and the tests in the test class would be executed for every tuple of parameters. Do we have the same concept in JUnit 5?  I understand that with the `Extensions` API I can either define a `TestPostProcessor` or a `ParameterResolver`. But none of these will allow me do run the same test cases for different parameters, do they?  Should I rather use a `@TestFactory` for this purpose?","closed","type: question,","PeterWippermann","2016-09-09T14:10:25Z","2016-12-15T15:13:11Z"
"","539","Junit5 console launcher hard codes System.out, System.err streams","In https://github.com/junit-team/junit5/blob/master/junit-platform-console/src/main/java/org/junit/platform/console/ConsoleLauncher.java#L38, instead of hard coding System.out and System.err, can we instead use a standard logger that we can configure?  When using the gradle plugin, we get an enormous amount of console output that we would like to reduce.","closed","status: invalid,","leejoon","2016-10-06T17:56:30Z","2016-10-07T17:14:39Z"
"","372","XML report uses display names as class names and lacks hierarchy structure","In general this looks like it will be difficult to consume:  ``` xml                                    ```  ""A stack"" is not a class name. Short of parsing the unique IDs in the comments there is not way to generate a report based on the hierarchy of results. 1. Should the `classname` attribute be omitted where not applicable? 2. Should `testcase` elements be nestable or have an `id` attribute and an optional `parent` attribute to point to another `testcase` as its parent?  P.S. A versioned XSD for an improved/new JUnit XML format may also be helpful.","closed","theme: build,","mfulton26","2016-06-30T21:04:15Z","2022-02-28T19:47:58Z"
"","406","Add line number information to JavaClassSource","In [Specsy](http://specsy.org/), because the individual tests are not methods but lambdas, it's not possible to use `JavaMethodSource` for IDE navigation. I could dig the line numbers from the lambda classes or by creating a stack trace during test registration, but the only `TestSource` which has line number information is `FileSource` and it's not possible to reliably find out the .java file's path just based on the .class file.  For this purpose JUnit should add `Optional getPosition()` to `JavaClassSource`.","closed","theme: execution,","luontola","2016-07-14T19:56:30Z","2016-07-25T18:16:05Z"
"","611","Allow distinction of talk title and event name in events.json","In [`events.json`](https://github.com/junit-team/junit5/blob/gh-pages/data/events.json) individual events are specified as follows:  ```json   {     ""title"": ""Deep Dive into JUnit 5 - Voxxed Days Zurich 2017"",     ""date"": ""2017-02-23"",     ""location"": ""Zurich, Switzerland"",     ""link"": ""https://cfp-vdz.exteso.com/2017/talk/QSX-6316/Deep_Dive_into_JUnit_5"",     ""speakers"": [       ""sbrannen""     ] } ```  Unfortunately, `title` includes the name of the talk as well as of the event - or both. It would be better to have another field for that, preferably `event`:  ```json   {     ""title"": ""Deep Dive into JUnit 5"",     ""event"": ""Voxxed Days Zurich 2017"",     ""date"": ""2017-02-23"",     ""location"": ""Zurich, Switzerland"",     ""link"": ""https://cfp-vdz.exteso.com/2017/talk/QSX-6316/Deep_Dive_into_JUnit_5"",     ""speakers"": [       ""sbrannen""     ] } ```  Jekyll can then create better and more flexible output.","closed","theme: web site,","nipafx","2016-12-22T17:34:31Z","2016-12-23T00:08:10Z"
"","405","Should IDE check if api jar is present in the classpath before adding corresponding engine jar?","If I don't have `junit4.jar` in the classpath but add (as IDE) the vintage engine jar, then I get `ClassNotFoundException` as:  ``` Exception in thread ""main"" java.lang.NoClassDefFoundError: org/junit/runner/manipulation/Filter     at java.lang.ClassLoader.defineClass1(Native Method)     at java.lang.ClassLoader.defineClass(ClassLoader.java:763)     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)     at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)     at java.net.URLClassLoader.access$100(URLClassLoader.java:73)     at java.net.URLClassLoader$1.run(URLClassLoader.java:368)     at java.net.URLClassLoader$1.run(URLClassLoader.java:362)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:361)     at java.lang.ClassLoader.loadClass(ClassLoader.java:424)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)     at java.lang.ClassLoader.loadClass(ClassLoader.java:357)     at org.junit.vintage.engine.discovery.JUnit4DiscoveryRequestResolver.getAllDiscoverySelectorResolvers(JUnit4DiscoveryRequestResolver.java:58) ```  IDE can include vintage engine only if `TestCase` is found on the classpath. Is that a desired check, or should JUnit not throw exception on 'inconsistent' classpath?","closed","theme: build,","akozlova","2016-07-14T18:48:28Z","2016-07-15T11:45:14Z"
"","615","Assert that parent and child have different ids in AbstractTestDescriptor#addChild?","If child and parent have same uniqueId, things go wrong. An assertion could help engine writers to find that more quickly.","closed","status: stale,","akozlova","2016-12-23T19:53:44Z","2021-06-03T22:11:29Z"
"","160","ConsoleRunner uses wrong indentation for failed grouped test","If a test like this fails  ``` java @Test public void testNames() throws Exception {   Person person = new Person();    assertAll( ""names"", () -> {     assertEquals( ""John"", person.getFirstName() );     assertEquals( ""Doe"", person.getLastName() );   } ); } ```  ... the ConsoleRunner uses the wrong indentation like shown below. It seems that the `expected` line is indented with a single tab whereas the line above uses spaces.  ``` Finished:    testNames [junit5:com.codeaffine.junit5.GroupAssertionsTest#testNames()]              => Exception: names (1 failure)     expected:  but was:  ```","closed","up-for-grabs,","rherrmann","2016-02-19T15:21:22Z","2016-04-29T12:14:33Z"
"","589","Unable to discover 2 methods in the same class","IDEA allows users to run 2 test methods of the same test class. This is done now through `LauncherDiscoveryRequest`, like:  ```java         List selectors = new ArrayList<>();           while ((line = reader.readLine()) != null) {             selectors.add(createMethodSelector(line));           }           builder = builder.selectors(selectors);           if (tagName != null && !tagName.isEmpty()) {             builder = builder.filters(TagFilter.includeTags(tagName));           }           return builder.build(); ```  Works well in most cases, but if both methods belong to the same class, then only the first one would be executed. After debugging it turns out that `org.junit.jupiter.engine.discovery.JavaElementsResolver#tryToResolveWithResolver` detects that there is already a corresponding class but instead of replacing newly created `ClassTestDescriptor` with old one, newly created descriptors are returned, and second method is added there and this subtree is lost.","closed","theme: discovery,","akozlova","2016-12-07T18:54:18Z","2016-12-11T14:32:48Z"
"","381","org.junit.jupiter.api.extension.ParameterResolutionException","I've got exception:  ``` org.junit.jupiter.api.extension.ParameterResolutionException:  No ParameterResolver registered for parameter [java.lang.String arg0]  in executable [public org.junit.jupiter.api.Executable  xxx.yyy.ZZZ.Should_Create_Array_By_Qualified_Class_Name(java.lang.String)]. ```  when running test:  ```  @TestFactory     public Stream Should_Create_Array_By_Qualified_Class_Name() {         return Stream.of(""[Ljava.lang.Integer;"",                          ""[Ljava.lang.Byte;"",                          ""[Ljava.lang.Character;"",                          ""[Ljava.lang.Double;"",                          ""[Ljava.lang.Float;"",                          ""[Ljava.lang.Integer;"",                          ""[Ljava.lang.Long;"",                          ""[Ljava.lang.Short;"",                          ""[Z"",                          ""[B"",                          ""[C"",                          ""[D"",                          ""[F"",                          ""[I"",                          ""[J"",                          ""[S"")                      .map(value -> dynamicTest(getDefaultDisplayName(value), Should_Create_Array_By_Qualified_Class_Name(value)));     }      @Test     public Executable Should_Create_Array_By_Qualified_Class_Name(final String classToInstantiate) {         return () -> {             // given             final ArrayInstantiator instantiator = new ArrayInstantiator(classToInstantiate);             // when             final String result = instantiator.instantiate()                                               .getClass()                                               .getName();              // then             assertThat(result).isEqualTo(classToInstantiate);         };     } ```  it happens when I execute test by: - IDE (IntelliJ), @RunWith(JUnitPlatform.class) is present - gradlew clean build - Travis CI  I'm using latest snapshot: `junit-jupiter-engine-5.0.0-20160707.105819-90`","closed","status: invalid,","sta-szek","2016-07-07T16:52:33Z","2016-07-07T19:04:15Z"
"","46","OTA improvements","I've fixed a few things I noticed when writing assertions using our new methods in `Assertions`.  @junit-team/junit-lambda Please review!","closed","component: OTA,","marcphilipp","2015-12-03T19:31:52Z","2015-12-04T09:07:24Z"
"","62","Refined TestExecutionListener API","I've changed TestExecutionListener as proposed in #34. Documentation is still missing but I think merging this pull request would be beneficial for upcoming tasks.","closed","","marcphilipp","2015-12-11T21:45:26Z","2015-12-12T06:37:37Z"
"","155","Document how to use ConsoleLauncher archive in the User Guide","I've been trying to get the console runner working for a while now (the one from [the ZIP](http://search.maven.org/remotecontent?filepath=org/junit/junit-console/5.0.0-ALPHA/junit-console-5.0.0-ALPHA.zip) linked in #146) but failed. I'm assuming I'm doing something wrong.  After I failed to launch the script in any sensible configuration, I looked at the code and got it running from within IntelliJ with the following parameters:  ``` -p ${my_test_root_directory} -a ```  or  ``` -p ${my_test_root_directory} ${name_of_some_test_class} ```  Irritatingly, the same arguments to the script lead to an empty run:  ``` junit-console -p ~/code/JUnit-5-Demo/target/test-classes/ -a  Feb 13, 2016 7:46:04 AM org.junit.gen5.launcher.main.ServiceLoaderTestEngineRegistry loadTestEngines INFO: Discovered TestEngines with IDs [] Test execution started. Number of static tests: 0 Test execution finished. ```  As I said, I'm assuming I'm doing something wrong but I have no idea what it could be.","closed","component: Platform,","nipafx","2016-02-13T06:56:54Z","2016-12-22T12:58:28Z"
"","428","Document interoperability with third-party assertion Matchers in User Guide","I've been reading about JUnit 5 for a while and there's one thing I'm wondering about.  The [`Assertions`](http://junit.org/junit5/docs/current/api/org/junit/jupiter/api/Assertions.html) class seems to be the JUnit 5 equivalent of the [JUnit 4 `Assert` class](http://junit.org/junit4/javadoc/latest/org/junit/Assert.html)  I noticed that it doesn't support any replacement of the `assertThat` method which accepts a custom matcher that one can use to make the assertion more simple and readable.  I like the power of expressions that matchers provide, I'm a fan of the `assertThat` syntax and it's something that I'd like to keep using.  I've had a look at the [User Guide](http://junit.org/junit5/docs/current/user-guide) as well as the list of packages in the [Javadoc](http://junit.org/junit5/docs/current/api/overview-summary.html) but I couldn't find a single mention of matchers.  What's the team's view on using matchers? Are they going to be supported or replaced in favour of a different mechanism? Or is it that they are not to be part of the JUnit standard and should be confined to external libraries such as Hamcrest  (Given how [`assertThat` in JUnit 4 `Assert`](http://junit.org/junit4/javadoc/latest/org/junit/Assert.html#assertThat%28java.lang.String, T, org.hamcrest.Matcher%29) class introduces a dependency on Hamcrest)  If anything, it would be nice to refer to the subject somewhere in the documentation.","closed","theme: documentation,","toniedzwiedz","2016-07-24T19:14:10Z","2016-07-28T13:01:30Z"
"","366","JUnitPlatformTestTree does not add dynamic containers to test plan","I'm trying to register dynamic tests in a hierarchy but when I run from my IDE via `RunWith(JUnit5.class)` I get `org.junit.gen5.commons.util.PreconditionViolationException: No TestIdentifier with unique ID [$uniqueId] has been added to this TestPlan`.  I've put together a `DemoTestEngine` to reproduce the issue which you can simply run via your IDE like you'd run any JUnit 4 test after registering it as a test engine.  From a quick look at the code it appears that `JUnit5RunnerListener` does not add dynamic containers to its test plan so creating a hierarchy of dynamic tests causes the precondition to fail.  ``` Internal Error occured. org.junit.gen5.commons.util.PreconditionViolationException: No TestIdentifier with unique ID [[engine:demo]/[engine:demo]/[container:1]] has been added to this TestPlan.     at org.junit.gen5.commons.util.Preconditions.condition(Preconditions.java:161)     at org.junit.gen5.launcher.TestPlan.getTestIdentifier(TestPlan.java:162)     at org.junit.gen5.junit4.runner.JUnit5TestTree.addDynamicDescription(JUnit5TestTree.java:61)     at org.junit.gen5.junit4.runner.JUnit5RunnerListener.dynamicTestRegistered(JUnit5RunnerListener.java:41)     at org.junit.gen5.launcher.main.TestExecutionListenerRegistry$CompositeTestExecutionListener.lambda$dynamicTestRegistered$22(TestExecutionListenerRegistry.java:48)     at java.lang.Iterable.forEach(Iterable.java:75)     at org.junit.gen5.launcher.main.TestExecutionListenerRegistry.notifyTestExecutionListeners(TestExecutionListenerRegistry.java:37)     at org.junit.gen5.launcher.main.TestExecutionListenerRegistry.access$100(TestExecutionListenerRegistry.java:26)     at org.junit.gen5.launcher.main.TestExecutionListenerRegistry$CompositeTestExecutionListener.dynamicTestRegistered(TestExecutionListenerRegistry.java:48)     at org.junit.gen5.launcher.main.ExecutionListenerAdapter.dynamicTestRegistered(ExecutionListenerAdapter.java:41)     at DemoTestEngine.execute(DemoTestEngine.java:32)     at org.junit.gen5.launcher.main.DefaultLauncher.execute(DefaultLauncher.java:124)     at org.junit.gen5.launcher.main.DefaultLauncher.execute(DefaultLauncher.java:84)     at org.junit.gen5.junit4.runner.JUnit5.run(JUnit5.java:107)     at org.junit.runner.JUnitCore.run(JUnitCore.java:137)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:119)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144) ```  ``` java @RunWith(JUnit5.class) public class DemoTestEngine implements TestEngine {     @Override     public String getId() {         return ""demo"";     }      @Override     public TestDescriptor discover(EngineDiscoveryRequest discoveryRequest, UniqueId uniqueId) {         EngineDescriptor engineDescriptor = new EngineDescriptor(uniqueId.append(""engine"", ""demo""), ""demo"");         engineDescriptor.addChild(new RootTestDescriptor(engineDescriptor.getUniqueId().append(""root"", ""0""), ""0""));         return engineDescriptor;     }      @Override     public void execute(ExecutionRequest request) {         EngineExecutionListener engineExecutionListener = request.getEngineExecutionListener();         TestDescriptor root = request.getRootTestDescriptor();         TestDescriptor child = new TestTestDescriptor(root.getUniqueId().append(""container"", ""1""), ""1"");         root.addChild(child);         engineExecutionListener.dynamicTestRegistered(child);         engineExecutionListener.executionStarted(child);         engineExecutionListener.executionFinished(child, TestExecutionResult.successful());         TestDescriptor grandchild = new TestTestDescriptor(child.getUniqueId().append(""test"", ""2""), ""2"");         child.addChild(grandchild);         engineExecutionListener.dynamicTestRegistered(grandchild);         engineExecutionListener.executionStarted(grandchild);         engineExecutionListener.executionFinished(grandchild, TestExecutionResult.successful());     }      abstract static class AbstractDisplayNamedTestDescriptor extends AbstractTestDescriptor {         private final String displayName;          AbstractDisplayNamedTestDescriptor(UniqueId uniqueId, String displayName) {             super(uniqueId);             this.displayName = displayName;         }          @Override         public String getDisplayName() {             return displayName;         }     }      static class RootTestDescriptor extends AbstractDisplayNamedTestDescriptor {         RootTestDescriptor(UniqueId uniqueId, String displayName) {             super(uniqueId,displayName);         }          @Override         public boolean isContainer() {             return true;         }          @Override         public boolean isTest() {             return false;         }          @Override         public boolean hasTests() {             return true;         }     }      static class ContainerTestDescriptor extends AbstractDisplayNamedTestDescriptor {         ContainerTestDescriptor(UniqueId uniqueId, String displayName) {             super(uniqueId, displayName);         }          @Override         public boolean isContainer() {             return true;         }          @Override         public boolean isTest() {             return false;         }     }      static class TestTestDescriptor extends AbstractDisplayNamedTestDescriptor {         TestTestDescriptor(UniqueId uniqueId, String displayName) {             super(uniqueId, displayName);         }          @Override         public boolean isContainer() {             return false;         }          @Override         public boolean isTest() {             return true;         }     } } ```","closed","theme: execution,","mfulton26","2016-06-28T20:32:25Z","2016-06-29T16:26:55Z"
"","127","Can't get a report out of the gradle plugin","I'm trying to get a report for my tests out of the gradle plugin.  I created a new module in my fork (https://github.com/schauder/junit-lambda) and use a build.gradle file based the junit-tests module.  The tests get executed fine (with lots of intentional failures), but no report get's generated for my module (https://github.com/schauder/junit-lambda/tree/master/schauderhaft-examples) commit: 2d2b172f999d96  Any pointers what I'm doing wrong?","closed","","schauder","2016-01-19T14:41:06Z","2016-01-19T15:39:59Z"
"","276","Support alteration of discovered tests","I'm not sure that's a great description of what I want to ask ... in #153 the following code is discussed:  ``` package org.example;  public class TopLevel {      static class StaticNested {}      @Nested     class Inner {}      @Test     void method1() {}      @Test     void method2(TestInfo testInfo) {}      @TestFactory     Stream dynamicTests() {         return Stream.of(new DynamicTest(""dynamic test"", () -> {}));     }  } ```  Maybe I'm missing something but it looks like @TestFactory can only add tests to an existing test plan.  In order to support repeating parameterized test methods, there needs to be a mechanism to alter previously discovered tests (in essence, turning them into test containers).  While I love that a @TestFactory can creates completely dynamic tests, there's a pattern that's common to JUnit4 test runners that I think is also important.  I'll use the JUnitParams extension (one of my favorites) as an example - the generic code for a test would be something like this:  ``` @RunWith(JUnitParamsRunner.class) public void SomeTest {    @Test   @Parameter(""1"", ""2"", ""3"")   public void testThatSomethingHappens(int someParameterThatMatter) {     ...   }  } ```  The above JUnitParams test class would result in three tests being executed.  If I run that test today using JUnit4, it will use the test name as the container name and add the values of the parameters to the enclosed tests.  I don't see how the equivalent pattern could be realized with JUnit5 (obviously, I'm not an expert in the code yet).  From the digging I did into the ALPHA release, I was picturing the addition of something like a test discovery callback that could be called after each @Test was found (or for each DynamicTest returned by a @TestFactory?).  And during discovery, these test would have to be mutable so they could be expanded.  Am I missing something obvious?  How would the @junit-team/junit5 developers suggest coding this pattern?","closed","","smoyer64","2016-05-23T12:31:25Z","2018-12-04T07:53:51Z"
"","212","JUnit 5 reporting in gradle","I'm not sure if this is not a duplicate request, and if it is, please simply close it.  While browsing the documentation of the project :  http://junit.org/junit5/#running-tests  I thought to have a look how the test output is done via gradle command :   ``` ./gradlew :documentation:test ```  This command outputs in documentation/build/test-results/junit5 directory two files :  - TEST-junit4.xml - TEST-junit5.xml  My initial intention was to see what `example.DisplayNameDemo` will output in the test results (btw this is a feature that I like very much in Spock groovy framework : http://spockframework.github.io/spock/docs/1.0/spock_primer.html), but in the output (TEST-junit5.xml) I don't see any mention about the tests which successfully run.  Can you point me out how can I see the test reports for the tests from the documentation project via gradle? If you find this relevant for more users, maybe it makes sense to update the adocs of the project.","closed","","mariusneo","2016-03-22T08:05:08Z","2016-03-22T19:45:04Z"
"","393","TestReporter does not capture the correct TestIdentifier when used with DynamicTests","I'm investigating JUnit5 for a project, and I find the concept of `TestFactory` and `DynamicTests` interesting for our use case. During the execution of a `DynamicTest`, I would also like to report some additional information for that particular test, so I added a `TestReporter` parameter to the `TestFactory` method:   ``` java @TestFactory public void createTests(TestReporter reporter) {   Stream tests = createTests(reporter); } ```  Using a `TestExecutionListener`, I can see that the `ReportEntry`s are published, but they are all associated with the wrong `TestIdentifier`. Quite obvious, when thinking about it, since the `TestReporter`, once injected, is associated with the `ExtensionContext` it was assigned when it was created.  So it does not seem to be possible to use a `TestReporter` in conjunction with `DynamicTest` this way. Is it possible to achieve this some other way? Since the `TestExecutionListener` reports the correct `TestIdentifier` for lifecycle events (e.g. `executionFinished`) for the other `DynamicTest`s, it seems like it should be possible somehow to dynamically assign the correct context to a `TestReporter`. ## Related Issues - #14  - #378  - #386","closed","theme: reporting,","nilsga","2016-07-11T17:45:47Z","2016-07-13T20:11:17Z"
"","209","Gradle task type for executing tests","I'm excited to start playing with a new JUnit. I'm a Gradle user and I was wondering if there are plans to add a task type such that I can declare my own task (or even multiple tasks) with a configuration different from the configuration provided by the extension.  ``` task commitTest (type: Junit5Test) {    requireTag 'commit' }  ```  This would allow for example executing different sets of tests within a project. E.g. fast tests, slow tests, commit tests (in terms of delivery pipeline commit test), etc.","closed","","MartinAhrer","2016-03-17T16:15:20Z","2016-04-20T14:47:40Z"
"","500","Introduce component diagram in User Guide","I'm currently updating my JUnit talk and created a component diagram of all the different modules and there dependencies using plant uml.  Do want this in the user manual? At least I keep returning to that diagram all the time to understand what dependencies I need.  The current version looks like this ![image](https://cloud.githubusercontent.com/assets/136683/18376934/a4575952-7663-11e6-9544-3a3e2b4cbc61.png)  If interested I'd prepare a PR","closed","theme: documentation,","schauder","2016-09-09T06:02:48Z","2016-09-30T11:41:16Z"
"","964","Introduce support for parallel test execution in declarative test suites","I'm currently migrating a project from JUnit4 to JUnit5 (Branch: https://github.com/casid/mazebert-ladder/tree/junit5).   A feature of the JUnit4 tests is that I can run all unit tests in parallel. This is an essential feature since it a) chops down the test execution time significantly and b) prevents developers from adding shared state to unit tests.  In JUnit4 with the help of junit-toolbox: ```java @RunWith(ParallelSuite.class) @SuiteClasses(""**/*Test.class"") public class UnitTestSuite { } ```  I wished JUnit5 to support something like this: ```java @Suite(parallel = true) @SuiteClasses(""**/*Test"") public class UnitTestSuite { } ```  But I couldn't find anything that looked even slightly like it.  I think suites could greatly improve configuration options for test executions. In fact, it would remove the need for external tools to implement the same features (e.g. parallel execution / test discovery). You could simply point maven-surefire, gradle or IntelliJ to the TestSuite(s) you want to execute.  Integration tests could benefit from this too:  ```java @Suite(parallel = true) @SuiteClasses(""**/*IT"") @IncludeTags(""parallel"") public class ParallelIntegrationTestSuite {     @BeforeClass     public static void setUp() throws Exception {         TestDataSourceProvider.instance.prepare();     }      @AfterClass     public static void tearDown() throws Exception {         TestDataSourceProvider.instance.dispose();     } } ```  I would love to have something like this in JUnit5! Currently I have some mixed feelings how to proceed with adopting JUnit5 (great new features like nested tests) vs JUnit4 (great test execution control).  ## Related Issues  - #456 - #687 - #744 - #746","closed","theme: suites,","casid","2017-07-18T21:36:26Z","2020-01-07T15:25:18Z"
"","877","Upload Gradle Plugin to plugins.gradle.org to support Gradle DSL","I'd be great to use the nice [Gradle Plugin DSL](https://docs.gradle.org/3.5/userguide/plugins.html#sec:plugins_block) for running JUnit Platform in Gradle builds.  I suggest to upload the _junit-platform-gradle-plugin_ to https://plugins.gradle.org   Instead of ``` buildscript {     repositories {         mavenCentral()     }     dependencies {         classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M4'     } }  apply plugin: 'org.junit.platform.gradle.plugin' apply plugin: 'java' ```  the build.gradle could then look like:  ``` plugins {     id 'java'     id 'org.junit.platform.gradle.plugin' version '1.0.0-M4' } ```  Which is much more compact.","closed","status: duplicate,","jochenchrist","2017-06-09T09:09:24Z","2017-06-09T09:11:32Z"
"","613","Issue with JUnit 5 M3 console launcher with JAR files","I would like to run the console launcher using JAR files instead of .class files for the tests. According to the M3 release notes, it should work (""Classpath scanning now supports JAR files."") It won't pick up the tests when I run the command, though. Do I need to add any other flags or do something else?","closed","component: Platform,","danilofaria","2016-12-23T13:28:33Z","2017-01-02T20:28:09Z"
"","119","Feature #116 - Provide better names for the test plan specification","I will need to rebase it onto master, but don't have time right now. Still, I wanted to provide it to you guys for review purposes. Therefore, I've already created this pull request.","closed","","bechte","2016-01-16T18:06:34Z","2016-01-17T11:19:33Z"
"","603","InstancePostProcessor not invoked when extension is registered on test method","I was testing JUnit 5's lifecycle in regards to the different extension types for a blog I wrote. In doing so I found out that `TestInstancePostProcessor` extensions are not invoked when declared on a test method like this:  ```java public class SomeTest {   @Test   @ExtendsWith(MyTestInstancePostProcessor.class)   void testSomething(){     ..   } } ```  Was this an oversight, or a deliberate decision? On the one hand I find it hard to formulate a viable usecase for having a special post processor just for a single method. But on the other hand: Every method is invoked on its own 'personal' test class instance - so why not allow it?  The code I used to test this is available [here on GitHub](https://github.com/nt-ca-aqe/blog-junit5-test-lifecycle/tree/master/src/test/java/example), specifically the [`TestsWithExtensionsOnOneMethod`](https://github.com/nt-ca-aqe/blog-junit5-test-lifecycle/blob/master/src/test/java/example/TestsWithExtensionsOnOneMethod.java) test class.","closed","component: Jupiter,","slu-it","2016-12-14T12:46:07Z","2017-01-08T21:53:30Z"
"","150","Document the default value for --filter-classname (if any)","I was playing around with JUnit 5 and in the absence of IDE support used the _Console Runner_ to execute tests.  While tryiing to find out why no tests were executed I thought it would be useful if the documentation of the [Console Runner options](https://junit-team.github.io/junit5/#console-runner) would state if there is a default value and what it is.  Though most people will probably assume `*Test` to be the default, an explicit hint would give confidence and possibly eliminate one try-and-error step.","closed","type: task,","rherrmann","2016-02-10T17:27:46Z","2016-03-01T09:04:14Z"
"","217","Eclipse integration","I was curious to see how hard it would be to make JUnit 5 work in Eclipse, so I started hacking JDT to support JUnit 5.0.0-ALPHA.  The JDT fork is https://github.com/hwellmann/eclipse.jdt.ui. The README has detailed instructions.  I suppose this is more of an Eclipse topic than a JUnit topic, so this issue is just for the record. I'll also post on the JDT mailing list.","closed","","hwellmann","2016-03-28T17:56:28Z","2016-12-01T03:35:53Z"
"","582","Add method name to report","I used to work on a tool that parsed test results generated by different junit like tools (junit, karma, etc). One of the advantages of junit was that you could construct a unique name for each test result, because the combination of package + class + method is guaranteed to be unique in java.  This advantage has been lost, because of the `@DisplayName`. It is possible to generate output like this:             Although the programmer was stupid to copy the displayname without looking and these cases will not be present in good code, tools will always have to assume that multiple test results with the same xml text can exist.  Suggestion: Add the method name to the report (in the tag `method` for example) to guarantee a unique id for each test result. I think it can never hurt, and is possibly an improvement.","closed","component: Platform,","Jessevanbekkum","2016-12-03T11:31:45Z","2016-12-03T11:41:31Z"
"","10","Hierarchical Test Descriptor","I used the days to push the idea of an hierarchy of test descriptors further. Not the engine only gets an EngineDescriptor for resolution and just adds children to it. This makes a lot of code easier through the whol code base. Especially - Launcher - JUnit5TestEngine - SpecificationResolver - JUnit5TestTree   JUnit4TestEngine should also become simpler but I haven't had the time to look at it - just did the minimum to keep it working.   If one accepts TestDescription to be a composite, a lot of code can move to the appropriate node types. I only scratched the surface of it.  Please have a look at it and consider it as a basis for discussion.","closed","","jlink","2015-11-09T15:17:28Z","2015-11-12T19:48:14Z"
"","463","How to do before & after while using Dynamic Tests","I used Dynamic Tests, but BeforeEachCallback & BeforeTestExecutionCallback only launch once per @TestFactory","closed","status: duplicate,","ykswang","2016-08-15T09:28:41Z","2016-08-15T19:30:25Z"
"","153","Clarify differences between DisplayName & Name throughout JUnit 5","I understand the need for a UniqueId and a DisplayName, which I guess is only unique among the children of single a parent. But what is the Name for?  --- ### Related To - #145 - #162","closed","type: task,","schauder","2016-02-12T14:14:09Z","2016-05-24T22:02:18Z"
"","173","Parameterized tests: JavaSource doesn't contain method","I try to run org.junit.gen5.engine.junit4.samples.junit4.ParameterizedTestCase. I see that org.junit.gen5.engine.junit4.descriptor.JUnit4TestDescriptor#toJavaMethodSource is called and because the method name is test[foo] no methods exactly match this name, so the method returns new JavaSource(testClass).  I need initial string to get navigation, rerun, etc.  In order to determine method name I tried method copied from the junit:  ``` private static String getMethodName(TestIdentifier testIdentifier) {    return testIdentifier.getSource().filter(JavaSource.class::isInstance).map(JavaSource.class::cast).map(source -> source.getJavaMethodName().orElse(null)).orElse(null);   } ```","closed","type: bug,","akozlova","2016-03-08T15:39:21Z","2016-04-25T19:29:15Z"
"","171","JUnit 4 interoperability","I try to run method from org.junit.gen5.engine.junit4.samples.junit4.EnclosedJUnit4TestCase.  The first junit 4 test is added but then junit 5 engine proceed and I get an exception: org.junit.gen5.commons.util.PreconditionViolationException: Method 'failingTest' is not a test method.     at org.junit.gen5.engine.junit5.discovery.JUnit5TestableFactory.throwCannotResolveMethodException(JUnit5TestableFactory.java:171)     at org.junit.gen5.engine.junit5.discovery.JUnit5TestableFactory.fromMethod(JUnit5TestableFactory.java:66)     at org.junit.gen5.engine.junit5.discovery.JUnit5Testable.fromMethod(JUnit5Testable.java:28)     at org.junit.gen5.engine.junit5.discovery.DiscoverySelectorResolver.resolveTestMethod(DiscoverySelectorResolver.java:79)     at org.junit.gen5.engine.junit5.discovery.DiscoverySelectorResolver.lambda$resolveSelectors$3(DiscoverySelectorResolver.java:66)     at java.util.ArrayList.forEach(ArrayList.java:1249)     at org.junit.gen5.engine.junit5.discovery.DiscoverySelectorResolver.resolveSelectors(DiscoverySelectorResolver.java:65)     at org.junit.gen5.engine.junit5.JUnit5TestEngine.resolveDiscoveryRequest(JUnit5TestEngine.java:47)     at org.junit.gen5.engine.junit5.JUnit5TestEngine.discover(JUnit5TestEngine.java:40)     at org.junit.gen5.launcher.main.DefaultLauncher.discoverRoot(DefaultLauncher.java:84)     at org.junit.gen5.launcher.main.DefaultLauncher.discover(DefaultLauncher.java:54)     at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:)  It could be a bug in my code but actually I start tests by name and that's it: `builder.select(NameBasedSelector.forNames(mappedLines)).build()`  If it's wrong to post my issues here, please notify me.  Thanks, Anna","closed","type: bug,","akozlova","2016-03-08T13:46:53Z","2016-04-27T13:08:47Z"
"","181","ambiguous jars (with different qualified names) found for open test alliance","I tried first with https://oss.sonatype.org/content/repositories/snapshots/org/junit/open-test-alliance/ but failed because really used is https://oss.sonatype.org/content/repositories/snapshots/org/opentest4j/opentest4j/1.0.0-SNAPSHOT/   If that's correct, could you please mark the first one as outdated or hide it.","closed","type: task,","akozlova","2016-03-10T11:46:35Z","2016-03-10T20:33:35Z"
"","456","Introduce @BeforeSuite and @AfterSuite annotations","I suggest that `@BeforeSuite` and `@AfterSuite` annotations should be added to JUnit 5.  Obviously they should execute before and after the whole suite.  Or is there some other mechanism to accomplish that?  I suggest that there should not be static restriction, i.e. also non-static methods could be annotated with `@BeforeSuite` and `@AfterSuite`.  I personally prefer non-static as we use Spring in our tests and want to use injected beans in `@BeforeSuite` method.","open","theme: suites,","ondrejlerch","2016-08-11T09:27:20Z","2022-03-25T01:11:38Z"
"","572","Access To Test Artifacts","I started working on a [collection of JUnit extensions](https://github.com/CodeFX-org/junit-io) and would like to stay as close to JUnit as possible, e.g. regarding build tools, code style, etc. The same goes for testing so it would be great to have access to the `ExecutionEventRecorder` but, as far as I see it, the test jar [is not published](https://oss.sonatype.org/content/repositories/snapshots/org/junit/platform/junit-platform-engine/1.0.0-SNAPSHOT/).  Is there a chance to change that? If not, what git/Gradle magic could I use to build it locally?","closed","component: Platform,","nipafx","2016-11-19T16:07:37Z","2020-03-29T14:09:52Z"
"","49","Tests for junit-console","I started to make it testable in #37.","closed","","marcphilipp","2015-12-04T14:29:53Z","2015-12-06T21:03:06Z"
"","650","Gradle plugin doesn't have any method to pass in test jvm arguments","I seem to be having an issue with getting JUnit 5 to execute my tests with a given set of arguments.  ```groovy test { 	jvmArgs ""-ea"" 	jvmArgs ""-javaagent:"" + jar.archivePath } ```  The `javaagent` isn't set, and then, naturally, none of my tests pass.  I assume that the task that `JUnit` declares doesn't refer to the test task the `java` plugin declares at all, which I would assume that JUnit 4 did, as this gradle file worked with 4.  If there's a configuration I'm just missing, I'd appreciate the help. Otherwise, if there are no plans to introduce some bridge between the two, then I'd ask if we could get a similar field within the junitPlatform [extension](https://github.com/junit-team/junit5/blob/master/junit-platform-gradle-plugin/src/main/groovy/org/junit/platform/gradle/plugin/JUnitPlatformPlugin.groovy#L28) to configure the jvmArgs.  Thanks. :D","closed","status: duplicate,","Jezza","2017-02-13T21:40:37Z","2017-02-17T09:02:52Z"
"","581","Is it possible to have test filters use full boolean semantics?","I see in the User Guide that filters for tests use the same OR semantics as JUnit 4's categories. Unfortunately, we've run into multiple instances where the OR semantics were not powerful enough. Take the following setup:  ``` public interface Foo { } public interface Bar { }  public class SomeTest {      @Test     @Category({ Foo.class })     public void testFoo() { }      @Test     @Category({ Bar.class })     public void testBar() { }      @Test     @Category({ Foo.class, Bar.class })     public void testBoth() { } } ```  If you want to run all tests with just `Foo` or `Bar` that's easy. But what if you **only** want to run tests with **both** `Foo` and `Bar` (e.g. just the method `testBoth`)? This is only a simple example, but it would be really nice if the filters for tags in JUnit 5 allowed for the execution of tests that have full boolean expressions. Something like:  ``` mvn test --groups=Foo&Bar ```  to denote that both `Foo` and `Bar` need to be present.","closed","theme: discovery,","littleclay","2016-12-02T20:49:40Z","2017-09-11T18:12:52Z"
"","125","Compile error in junit-tests: JUnit4TestEngineDiscoveryTests","I pulled a fresh version of the project and ran  ``` gradlew clean test ```  this results in the following build failure:  ``` :junit-tests:compileTestJavaD:\workspaces\junit-lambda\junit-tests\src\test\java\org\junit\gen5\engine\junit4\JUnit4TestEngineDiscoveryTests.java:529: error: incompatible types: Predicate cannot be converted to Predicate                             .filter(where(TestDescriptor::getDisplayName, isEqual(displayName)))                                          ^   where CAP#1 is a fresh type-variable:     CAP#1 extends TestDescriptor from capture of ? extends TestDescriptor Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output 1 error  FAILED  FAILURE: Build failed with an exception. ```  IntelliJ fails to compile with basically the same message, but the on the fly compiler does not find a problem with the code, nor do I.  The problematic code is:  ``` private TestDescriptor findChildByDisplayName(TestDescriptor runnerDescriptor, String displayName) {     // @formatter:off     Set children = runnerDescriptor.getChildren();     return children             .stream()             .filter(where(TestDescriptor::getDisplayName, isEqual(displayName)))             .findAny()             .orElseThrow(() ->                 new AssertionError(format(""No child with display name \""{0}\"" in {1}"", displayName, children)));     // @formatter:on } ```  I was able to beat it into conformance by some hard casting:  ``` Set children = (Set) runnerDescriptor.getChildren(); ```  Since the CI build doesn't fail, I assume it is something on my machine, maybe the java version?  ``` $ java -version java version ""1.8.0_31"" Java(TM) SE Runtime Environment (build 1.8.0_31-b13) Java HotSpot(TM) 64-Bit Server VM (build 25.31-b07, mixed mode) ```","closed","","schauder","2016-01-19T09:02:46Z","2016-01-19T12:03:55Z"
"","503","Source of message texts for failed tests. Minor typo.","I noticed a minor typo, when running a parameterised test without registering a ParameterResolver. The summary of failed tests says: _registere..._  > Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.055 sec <<< FAILURE! - in peter.ParameterizedTest > testOdd(int)  Time elapsed: 0.052 sec  <<< FAILURE! >  > org.junit.jupiter.api.extension.ParameterResolutionException: No ParameterResolver registered for parameter [int arg0] in executable [public void peter.ParameterizedTest.testOdd(int)]. >  > Results : >  > Failed tests:  >   ParameterizedTest.testOdd » **ParameterResolution No ParameterResolver registere...**  No big thing actually. But I didn't find the source of this message. Where does it come from?","closed","status: invalid,","PeterWippermann","2016-09-09T09:27:15Z","2016-09-09T16:49:58Z"
"","8","Changed Responsibility for EngineId","I moved the responsibility for taking care about the engineId into the Engine class and its helpers. Any class outside of the junit5-engine package should not operate on the engine id.  With this change I also introduce delegate methods on the engine class which might be a good indicator in which way we should move on:  ``` public JUnit5Testable fromUniqueId(String uniqueId) {         return testableFactory.fromUniqueId(uniqueId);     }      public JUnit5Testable fromClassName(String className) {         return testableFactory.fromClassName(className);     }      public JUnit5Testable fromClass(Class clazz) {         return testableFactory.fromClass(clazz);     }      public JUnit5Testable fromMethod(Method testMethod, Class clazz) {         return testableFactory.fromMethod(testMethod, clazz);     } ```  We could extract these methods into the test engine interface, i.e. each engine is responsible for the resolution. With that approach we could extract the more generic part of the resolver into a separate class that operates on and interacts with all engines. Still a way to go, but I wanted to point into this direction. What do you think?","closed","","bechte","2015-11-06T23:08:01Z","2015-12-03T09:54:06Z"
"","863","Make Arguments creation simpler","I know nobody asked for this but it makes things a lot easier. If you think this is a good idea, I will eliminate `ObjectArrayArguments` entirely.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","nipafx","2017-05-23T16:57:05Z","2020-09-08T18:30:04Z"
"","465","Tests in default package do not get picked up via classpath scanning","I know it's bad practice, and I don't know (docs don't seem to mention) if it is intended.. but I just tried junit5 for the first time in a little demo project using the java default package. It took some time to realize, but tests only seem to be picked up by the gradle test plugin, if I move them out of the default package namespace.  I could create a sample github project from it, or you tell me this is known and intended as such. :)  Regards,  Oliver","closed","theme: discovery,","otrosien","2016-08-15T17:22:08Z","2016-11-30T08:54:27Z"
"","501","Tags annotation not documented in UserGuide","I just noticed that while `@Tag` is document, `@Tags`  seems to be missing from the [User Guide section on tagging](http://junit.org/junit5/docs/current/user-guide/#writing-tests-tagging-and-filtering)  I this an omission? Or is `@Tags` to be dropped?","closed","status: works-as-designed,","schauder","2016-09-09T08:49:47Z","2016-09-09T16:55:08Z"
"","608","ConsoleLauncher does not work on M3","I just migrated from M2 to M3 and found that the console launcher does not work. In the past I had something like the following: ```java -cp ""lib/*"" org.junit.platform.console.ConsoleLauncher -p src -a -D``` Then after migrating to M3, I updated it to: ```java org.junit.platform.console.ConsoleLauncher -cp src --scan-class-path --hide-details``` Then I found out that it was not picking up any of my tests anymore. Is this a bug?","closed","status: works-as-designed,","danilofaria","2016-12-21T21:00:35Z","2016-12-22T16:13:22Z"
"","610","Add various talks about JUnit 5","I included my talks.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: web site,","nipafx","2016-12-22T15:35:01Z","2017-03-12T10:57:20Z"
"","597","Use functional expressions for Optionals in JUnitPlatformProvider","I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","kamilszymanski","2016-12-09T22:49:41Z","2016-12-11T15:06:26Z"
"","529","A couple of small refactorings","I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Jupiter,","nipafx","2016-09-30T19:05:01Z","2016-10-05T17:39:06Z"
"","388","Delete unused field in TestingAStackDemo in User Guide","I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","stefanbirkner","2016-07-10T18:55:49Z","2016-07-13T20:12:41Z"
"","385","Fix Surefire plugin group ID in User Guide","I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","nipafx","2016-07-09T20:02:46Z","2016-07-13T20:10:17Z"
"","341","Add missing case to Javadoc.","I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","stefanbirkner","2016-06-21T18:06:58Z","2016-06-21T18:11:35Z"
"","534","DiscoverySelectors#selectJavaPackage not restricted to the provided package name","I have two packages in my Java project:  - package `samples` containing a test class `FirstTest.java` - package `samples.one` containing a test class `SecondTest.java`  I am using the API `DiscoverySelectors.selectJavaPackage(String)` to create the request and discover the test plan while passing the package name as `samples`. The returned test plan contains both the test classes `FirstTest.java` and `SecondTest.java` whereas I expect only `FirstTest.java` to be present in the result.   This causes the execution of the tests from the package `samples.one` also even though I selected to run the tests only from the package `samples`.  The problem is in the method `org.junit.platform.commons.util.ClasspathScanner#findClassesForPath` which uses `Files#walkFileTree` to walk the entire file tree.","closed","theme: discovery,","noopur2507","2016-10-03T11:24:29Z","2016-10-06T08:09:13Z"
"","892","How to separate integration tests from unit tests using testSets plugin","I have problem with test separation. We use test sets plugin to separate integration tests from unit (we keep them in different directories):  ``` buildscript {     ext {         springBootVersion = '1.5.4.RELEASE'     }     repositories {         maven {             url 'https://mvn.cin.pl/artifactory/plugins-release'         }     }     dependencies {         classpath ""org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.0.2""     } } apply plugin: 'org.unbroken-dome.test-sets' testSets {     integrationTest { dirName = 'it' } } ```  As far as we were using Junit4, there was a simple step to set up new `test module`: ``` integrationTest {     filter {         includeTestsMatching ""*E2E""         includeTestsMatching ""*IT""     }     jacoco {         destinationFile = file(""build/jacoco/integrationTest.exec"")         classDumpFile = file(""build/jacoco/integrationTestDumps"")     } } ```  Is there any way to acheive the same with Junit5 and testSets plugin?","closed","3rd-party: Gradle,","sta-szek","2017-06-19T10:25:27Z","2018-03-16T14:17:34Z"
"","384","JUnit Platform Surefire provider ignores purely dynamic test classes","I have a test project I am running some JUnit 5 experiments with using the maven surefire plugin. I am seeing an issue with dynamic tests. It apparently isn't discovering TestFactories as tests unless regular test methods also appear in the class. Take the following test class:  ``` java import org.junit.jupiter.api.DynamicTest; import org.junit.jupiter.api.Test; import org.junit.jupiter.api.TestFactory; import java.util.stream.Stream;  public class FooTest {     @Test     public void foo() {         System.out.println( ""Hello"" );     }      @TestFactory     public Stream< DynamicTest > testFactoryFoo() {         return Stream.of( ""A"", ""B"" )                      .map( str -> DynamicTest.dynamicTest( ""testFactoryFoo"" + str + ""()"",                                                            () -> System.out.println( str ) ) );     } } ```  If I run the command `mvn clean test` then I see the expected output:  ``` Running redfin.automation.junit.jupiter.FooTest A B Hello Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.059 sec - in redfin.automation.junit.jupiter.FooTest testFactoryFooA()  Time elapsed: 0.005 sec testFactoryFooB()  Time elapsed: 0 sec foo()  Time elapsed: 0.002 sec  Results :  Tests run: 3, Failures: 0, Errors: 0, Skipped: 0 ```  However, if I take out the regular test `foo` leaving only the TestFactory, and try running `mvn clean test` again, I get the following output:  ``` Results :  Tests run: 0, Failures: 0, Errors: 0, Skipped: 0 ```","closed","theme: build,","littleclay","2016-07-09T03:08:02Z","2016-07-13T20:13:25Z"
"","605","Execution of @Ignore junit 4 tests is not possible with junit 5 launcher","I have a project with mixed junit 4 and junit 5 tests, one of junit 4 test method is disabled with @Ignore annotation. If there is no junit 5 in the classpath, then IDEA is able to run the test when explicitly selected, e.g. to ensure that it still fails, etc. When there is junit 5, IDEA pass launcher with the method name has no influence on the org.junit.vintage.engine.discovery.DefensiveAllDefaultPossibilitiesBuilder which creates ignoreBuilder. Would be cool if junit.conditions.deactivate would influence this or some other mechanism would be provided.","closed","status: stale,","akozlova","2016-12-15T15:54:02Z","2021-06-19T12:50:12Z"
"","488","java.lang.ClassCastException: sun.nio.fs.WindowsPath cannot be cast to java.io.File","I don't know if that is JUnit5 issue :) This happens on `M1` and `M2` but `SNAPSHOT` is ok.  ``` gradle clean build --stacktrace :clean    :compileJava                                                              Note: Some input files use unchecked or unsafe operations. Note: Recompile with -Xlint:unchecked for details. :processResources UP-TO-DATE :classes :jar :assemble :compileTestJava                  Note: Some input files use unchecked or unsafe operations. Note: Recompile with -Xlint:unchecked for details. :processTestResources UP-TO-DATE :testClasses :junitPlatformTest                  sie 30, 2016 8:16:00 PM org.junit.platform.launcher.core.ServiceLoaderTestEngineRegistry loadTestEngines INFO: Discovered TestEngines with IDs: [junit-jupiter] java.lang.ClassCastException: sun.nio.fs.WindowsPath cannot be cast to java.io.File         at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174)         at java.util.Iterator.forEachRemaining(Iterator.java:116)         at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)         at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)         at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)         at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)         at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)         at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)         at org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathRoots(DiscoverySelectors.java:68)         at org.junit.platform.console.tasks.DiscoveryRequestCreator.createBuilderForClasspathScanning(DiscoveryRequestCreator.java:66)         at org.junit.platform.console.tasks.DiscoveryRequestCreator.createRequestBuilder(DiscoveryRequestCreator.java:59)         at org.junit.platform.console.tasks.DiscoveryRequestCreator.toDiscoveryRequest(DiscoveryRequestCreator.java:52)         at org.junit.platform.console.tasks.ExecuteTestsTask.executeTests(ExecuteTestsTask.java:61)         at org.junit.platform.console.tasks.ExecuteTestsTask.lambda$execute$1(ExecuteTestsTask.java:54)         at org.junit.platform.console.tasks.CustomContextClassLoaderExecutor.invoke(CustomContextClassLoaderExecutor.java:33)         at org.junit.platform.console.tasks.ExecuteTestsTask.execute(ExecuteTestsTask.java:54)         at org.junit.platform.console.tasks.ConsoleTaskExecutor.executeTask(ConsoleTaskExecutor.java:38)         at org.junit.platform.console.ConsoleLauncher.execute(ConsoleLauncher.java:54)         at org.junit.platform.console.ConsoleLauncher.main(ConsoleLauncher.java:39)  Non-option arguments: If --scan-class-path has been specified, non-option arguments represent explicit   classpath roots that should be considered for scanning or none if the entire classpath   should be scanned.  Option                                    Description ------                                    ----------- -h, --help                                Display help information. --disable-ansi-colors                     Disable ANSI colors in output (not                                             supported by all terminals). --hide-details                            Hide details while tests are being                                             executed. Only show the summary and test                                             failures. --class-path, --classpath, --cp                           for example, for adding engines and                                             their dependencies. This option can be                                             repeated. --reports-dir                       Enable report output into a specified                                             local directory (will be created if it                                             does not exist). --scan-class-path                         Scan entire classpath or explicit                                             classpath roots. -n, --include-classname                   Provide a regular expression to include                                             only classes whose fully qualified names                                             match. By default any class name is                                             accepted, and thus all classes with                                             tests are included. -t, --include-tag                         Provide a tag to be included in the test                                             run. This option can be repeated. -T, --exclude-tag                         Provide a tag to be excluded from the test                                             run. This option can be repeated. -e, --include-engine                      Provide the ID of an engine to be included                                             in the test run. This option can be                                             repeated. -E, --exclude-engine                      Provide the ID of an engine to be excluded                                             from the test run. This option can be                                             repeated. :junitPlatformTest FAILED  FAILURE: Build failed with an exception.  * What went wrong: Execution failed for task ':junitPlatformTest'. > Process 'command 'C:\Program Files\Java\jdk1.8.0_102\bin\java.exe'' finished with non-zero exit value -1  * Try: Run with --info or --debug option to get more log output.  * Exception is: org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':junitPlatformTest'.         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:69)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:46)         at org.gradle.api.internal.tasks.execution.PostExecutionAnalysisTaskExecuter.execute(PostExecutionAnalysisTaskExecuter.java:35)         at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:66)         at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:58)         at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:52)         at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:52)         at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:53)         at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)         at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:203)         at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:185)         at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.processTask(AbstractTaskPlanExecutor.java:66)         at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.run(AbstractTaskPlanExecutor.java:50)         at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor.process(DefaultTaskPlanExecutor.java:25)         at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter.execute(DefaultTaskGraphExecuter.java:110)         at org.gradle.execution.SelectedTaskExecutionAction.execute(SelectedTaskExecutionAction.java:37)         at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:37)         at org.gradle.execution.DefaultBuildExecuter.access$000(DefaultBuildExecuter.java:23)         at org.gradle.execution.DefaultBuildExecuter$1.proceed(DefaultBuildExecuter.java:43)         at org.gradle.execution.DryRunBuildExecutionAction.execute(DryRunBuildExecutionAction.java:32)         at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:37)         at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:30)         at org.gradle.initialization.DefaultGradleLauncher$4.run(DefaultGradleLauncher.java:153)         at org.gradle.internal.Factories$1.create(Factories.java:22)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:91)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:53)         at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:150)         at org.gradle.initialization.DefaultGradleLauncher.access$200(DefaultGradleLauncher.java:32)         at org.gradle.initialization.DefaultGradleLauncher$1.create(DefaultGradleLauncher.java:98)         at org.gradle.initialization.DefaultGradleLauncher$1.create(DefaultGradleLauncher.java:92)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:91)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:63)         at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:92)         at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:83)         at org.gradle.launcher.exec.InProcessBuildActionExecuter$DefaultBuildController.run(InProcessBuildActionExecuter.java:99)         at org.gradle.tooling.internal.provider.ExecuteBuildActionRunner.run(ExecuteBuildActionRunner.java:28)         at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)         at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:48)         at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:30)         at org.gradle.launcher.exec.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:81)         at org.gradle.launcher.exec.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:46)         at org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:52)         at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:37)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:26)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:34)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:74)         at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:72)         at org.gradle.util.Swapper.swap(Swapper.java:38)         at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.health.DaemonHealthTracker.execute(DaemonHealthTracker.java:47)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:60)         at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:72)         at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.health.HintGCAfterBuild.execute(HintGCAfterBuild.java:41)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:50)         at org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:237)         at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)         at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40) Caused by: org.gradle.process.internal.ExecException: Process 'command 'C:\Program Files\Java\jdk1.8.0_102\bin\java.exe'' finished with non-zero exit value -1         at org.gradle.process.internal.DefaultExecHandle$ExecResultImpl.assertNormalExitValue(DefaultExecHandle.java:367)         at org.gradle.process.internal.DefaultJavaExecAction.execute(DefaultJavaExecAction.java:31)         at org.gradle.api.tasks.JavaExec.exec(JavaExec.java:74)         at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:75)         at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.doExecute(AnnotationProcessingTaskFactory.java:228)         at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:221)         at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:210)         at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:621)         at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:604)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:80)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:61)         ... 68 more   BUILD FAILED  Total time: 2.875 secs ```","closed","component: Platform,","sta-szek","2016-08-30T18:21:15Z","2016-11-16T16:17:23Z"
"","884","Running tests in certain order","I do not see any equivalent of the JUnit 4 method `org.junit.runner.Request.sortWith(Comparator comparator)` in JUnit 5 M4, which can be used to run the tests in a certain order, defined by the comparator.  Is it planned to provide such support or can it be done in some other way?  Eclipse uses this to rerun a test with failures first, which has been disabled for JUnit 5: [bug 518052](https://bugs.eclipse.org/bugs/show_bug.cgi?id=518052).","closed","component: Platform,","noopur2507","2017-06-12T10:18:14Z","2017-06-14T15:11:51Z"
"","383","Dynamic test suites","I couldn't find any mention of this but support for dynamic test objects would be an excellent addition. (TestNG has a `Factory` annotation which can be used on an object array returning method with or without a `DataProvider` or placed on a constructor with a `DataProvider` but it does not  support arbitrarily deep dynamic hierarchies).  e.g.  ``` java class DynamicTestObjectDemo {     @TestObjectFactory     Stream dynamicTestObjectsFromStream() {         return Arrays.stream(Locale.getAvailableLocales()).map(locale -> {             String displayName = locale.getDisplayName();             Instantiatable instantiatable = () -> new Something(locale);             return new DynamicTestObject(displayName, instantiatable);         });     }      class Something {         final Locale locale;          Something(Locale locale) {             this.locale = locale;         }          @Test         void something() {}     } } ```  Lots of parallels to `DynamicTest` but for creating nested class instances dynamically.","closed","","mfulton26","2016-07-08T19:50:44Z","2017-01-23T21:01:07Z"
"","182","org.opentest4j.AssertionFailedError contains expected/actual fields but they are not set","I could found the only usage org.junit.gen5.api.Assertions#fail(java.lang.String) where the message is already formatted and no expected/actual is present","closed","","akozlova","2016-03-10T12:10:09Z","2016-03-10T13:58:35Z"
"","443","Can the JUnit 5 logo be used in presentations?","I can't find the JUnit 5 logo (http://junit.org/junit5/assets/img/junit5-logo.png) in any github repo of the junit-team. The footer on the JUnit 5 homepage (http://junit.org/junit5) says:  > Copyright © 2016 The JUnit Team  The questions is: Am I allowed to use the JUnit 5 logo in (possible commercial) presentations?","closed","","goerge","2016-07-29T07:09:40Z","2021-05-13T12:35:53Z"
"","418","M1: Maven Central","I can only find the alpha in maven central. Will M1 be added anytime soon? Thanks!","closed","","mfulton26","2016-07-22T10:33:46Z","2016-07-22T13:17:21Z"
"","737","Provide reliable way to get class (class name) of executed test method","I am writing a test execution listener. A little extension for Junit5 framework. There is a necessity to know what class is used when running a particular test having TestIdentifier and TestPlan.  `((MethodSource) id.getSource().get()).getClassName(); `   Gives only the class, where a test is declared. But, that does not mean that it is run from declared class.  For instance a test can be run from a subclass.  Parsing results for TestIdentifier#getUniqueId() Can differ from case to case (single test for junit4, single test for junit5, dynamic test for junit5 , parametrized test for junit4, etc)  At this moment I did not find any possibility to do that. Is there any reliable way to get class of an executed test ?  I asked that question here   http://stackoverflow.com/questions/42781020/junit5-is-there-any-reliable-way-to-get-class-of-an-executed-test/42808147  Seems like that at the moment there is no reliable way to get class (classname) of an executed test method.  If it is not really so. Suggest you providing this feature.","closed","status: stale,","SqAutoTestTeam","2017-03-15T11:20:32Z","2022-07-14T17:42:40Z"
"","449","Cannot migrate Rule to junit 5","I am using following junit 4 rule  https://github.com/google/compile-testing/blob/master/src/main/java/com/google/testing/compile/CompilationRule.java  What it basically does is it spins up a java compiler against dummy source file and provides to it a simple annotation processor. This way it gets references to `Types` and `Elements` from the processing environment that can be used by the test, and also executes the test statement within its `process` method. The new extension model currently does not provide a way to execute the test method within another execution context (as a callback). There should be a way to achieve something like this. The hard thing here is that elements and types, I believe are only available in the context of the annotation processor (i.e. the test method should be executed within the `process` of the annotation processor.","closed","component: Jupiter,","tsachev","2016-08-05T16:34:53Z","2016-08-15T19:47:31Z"
"","628","Register TestExecutionListener specific to a LauncherDiscoveryRequest","I am using a single instance of `Launcher` to execute multiple requests. For each request, I want to register a separate instance of `TestExecutionListener` with the launcher so that a listener is notified of the events only for that particular request/test plan. The listener should also provide access to the `TestPlan` to which it is listening.    I am using the existing APIs in Eclipse in the following way: - Registering a single static listener with the launcher for all the requests being executed. This is not correct as we don't want to use a single static listener. - Accessing the test plan in the listener via `TestExecutionListener.testPlanExecutionStarted(TestPlan testPlan)` API. This could be a problem if test plans are being run in parallel.  You can have a look at these files for the current implementation:  - [JUnit5TestReference.java](https://github.com/noopur2507/eclipse-junit5/blob/master/org.eclipse.jdt.junit5.runtime/src/org/eclipse/jdt/internal/junit5/runner/JUnit5TestReference.java) - [JUnit5TestListener.java](https://github.com/noopur2507/eclipse-junit5/blob/master/org.eclipse.jdt.junit5.runtime/src/org/eclipse/jdt/internal/junit5/runner/JUnit5TestListener.java)  Please let me know if I am missing something or not using these APIs in the intended way.","closed","component: Platform,","noopur2507","2017-01-12T11:58:37Z","2017-03-19T16:35:40Z"
"","553","Running tests from directory not in class path","I am trying to run tests that are in directory `src/main/resources/Calculator-1.0-SNAPSHOT-tests`, which is **not in classpath**. The launcher does not find any test. If I put tests in code in IntelliJ project it works fine, so there is no problem in actual tests. The name of the test class is `CalulatorAdditionTest`.  Here is code that I run:  ```java LauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()         .selectors(                 selectClasspathRoots(new HashSet<>(Arrays.asList(                         Paths.get(""src/main/resources/Calculator-1.0-SNAPSHOT""),                         Paths.get(""src/main/resources/Calculator-1.0-SNAPSHOT-tests"")                 )))         )         .filters(includeClassNamePatterns("".*Test""))         .build(); Launcher launcher = LauncherFactory.create();  SummaryGeneratingListener listener = new SummaryGeneratingListener();//new TestListener(); launcher.registerTestExecutionListeners(listener); launcher.execute(request);  TestExecutionSummary summary = listener.getSummary(); summary.printTo(new PrintWriter(System.out)); summary.printFailuresTo(new PrintWriter(System.out)); ```  The result of running is:  ``` Test run finished after 26 ms [         1 containers found      ] [         0 containers skipped    ] [         1 containers started    ] [         0 containers aborted    ] [         1 containers successful ] [         0 containers failed     ] [         0 tests found           ] [         0 tests skipped         ] [         0 tests started         ] [         0 tests aborted         ] [         0 tests successful      ] [         0 tests failed          ] ```  In this project I use github version with commit 0818031804f77213d04285d4b3c5d3c4039f6fef. In pom.xml I have following:  ```xml       4.0.0      testing     JUnitTester     1.0-SNAPSHOT               UTF-8         1.8         5.0.0-SNAPSHOT         4.12.0-SNAPSHOT         1.0.0-SNAPSHOT                                                 org.apache.maven.plugins                 maven-compiler-plugin                                      ${java.version}                     ${java.version}                                                                        org.junit.jupiter             junit-jupiter-engine             ${junit.jupiter.version}                               org.junit.platform             junit-platform-launcher             ${junit.platform.version}                               org.junit.platform             junit-platform-engine             ${junit.platform.version}                ```","closed","status: invalid,","MarioKusek","2016-11-01T01:28:38Z","2016-11-01T15:04:40Z"
"","222","Lists of talks about JUnit 5","I am currently writing an article about JUnit 5 and would like to raise awareness by pointing towards the talks that people start giving about JUnit 5. It would be great if there were a resource (e.g. a wiki page) that I could link to.  Would the project be interested in creating one?  (If only speakers could then enter themselves by opening pull requests.)","closed","","nipafx","2016-04-09T17:10:22Z","2016-04-27T22:51:00Z"
"","288","Surefire Plugin Fails","I am attempting to run my test suite with JUnit 5 via the maven-surefire-plugin as done in the sample Maven consumer. However, I am currently running up against the following exception:  ```  Results :  Tests run: 0, Failures: 0, Errors: 0, Skipped: 0  [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 19.297 s [INFO] Finished at: 2016-05-28T23:37:02-07:00 [INFO] Final Memory: 42M/655M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test (default-test) on project core: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test failed: There was an error in the forked process [ERROR] org.junit.gen5.commons.util.PreconditionViolationException: Class must not be null [ERROR] at org.junit.gen5.commons.util.Preconditions.condition(Preconditions.java:153) [ERROR] at org.junit.gen5.commons.util.Preconditions.notNull(Preconditions.java:84) [ERROR] at org.junit.gen5.commons.util.Preconditions.notNull(Preconditions.java:55) [ERROR] at org.junit.gen5.commons.util.ReflectionUtils.findAllMethodsInHierarchy(ReflectionUtils.java:437) [ERROR] at org.junit.gen5.commons.util.ReflectionUtils.getSuperclassMethods(ReflectionUtils.java:524) [ERROR] at org.junit.gen5.commons.util.ReflectionUtils.findAllMethodsInHierarchy(ReflectionUtils.java:445) [ERROR] at org.junit.gen5.commons.util.ReflectionUtils.findMethods(ReflectionUtils.java:427) [ERROR] at org.junit.gen5.commons.util.ReflectionUtils.findMethods(ReflectionUtils.java:418) [ERROR] at org.junit.gen5.engine.junit4.descriptor.JUnit4TestDescriptor.toJavaMethodSource(JUnit4TestDescriptor.java:128) [ERROR] at org.junit.gen5.engine.junit4.descriptor.JUnit4TestDescriptor.toJavaSource(JUnit4TestDescriptor.java:112) [ERROR] at org.junit.gen5.engine.junit4.descriptor.JUnit4TestDescriptor.(JUnit4TestDescriptor.java:53) [ERROR] at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.addChildrenRecursively(TestClassRequestResolver.java:110) [ERROR] at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.createCompleteRunnerTestDescriptor(TestClassRequestResolver.java:94) [ERROR] at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.determineRunnerTestDescriptor(TestClassRequestResolver.java:70) [ERROR] at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.addRunnerTestDescriptor(TestClassRequestResolver.java:63) [ERROR] at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.populateEngineDescriptorFrom(TestClassRequestResolver.java:57) [ERROR] at org.junit.gen5.engine.junit4.discovery.JUnit4DiscoveryRequestResolver.populateEngineDescriptor(JUnit4DiscoveryRequestResolver.java:83) [ERROR] at org.junit.gen5.engine.junit4.discovery.JUnit4DiscoveryRequestResolver.resolve(JUnit4DiscoveryRequestResolver.java:46) [ERROR] at org.junit.gen5.engine.junit4.JUnit4TestEngine.discover(JUnit4TestEngine.java:47) [ERROR] at org.junit.gen5.launcher.main.DefaultLauncher.discoverRoot(DefaultLauncher.java:101) [ERROR] at org.junit.gen5.launcher.main.DefaultLauncher.discover(DefaultLauncher.java:76) [ERROR] at org.junit.gen5.surefire.TestPlanScannerFilter.accept(TestPlanScannerFilter.java:37) [ERROR] at org.apache.maven.surefire.util.DefaultScanResult.applyFilter(DefaultScanResult.java:98) [ERROR] at org.junit.gen5.surefire.JUnitGen5Provider.scanClasspath(JUnitGen5Provider.java:65) [ERROR] at org.junit.gen5.surefire.JUnitGen5Provider.invoke(JUnitGen5Provider.java:60) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121) [ERROR] -> [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test (default-test) on project core: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test failed: There was an error in the forked process org.junit.gen5.commons.util.PreconditionViolationException: Class must not be null         at org.junit.gen5.commons.util.Preconditions.condition(Preconditions.java:153)         at org.junit.gen5.commons.util.Preconditions.notNull(Preconditions.java:84)         at org.junit.gen5.commons.util.Preconditions.notNull(Preconditions.java:55)         at org.junit.gen5.commons.util.ReflectionUtils.findAllMethodsInHierarchy(ReflectionUtils.java:437)         at org.junit.gen5.commons.util.ReflectionUtils.getSuperclassMethods(ReflectionUtils.java:524)         at org.junit.gen5.commons.util.ReflectionUtils.findAllMethodsInHierarchy(ReflectionUtils.java:445)         at org.junit.gen5.commons.util.ReflectionUtils.findMethods(ReflectionUtils.java:427)         at org.junit.gen5.commons.util.ReflectionUtils.findMethods(ReflectionUtils.java:418)         at org.junit.gen5.engine.junit4.descriptor.JUnit4TestDescriptor.toJavaMethodSource(JUnit4TestDescriptor.java:128)         at org.junit.gen5.engine.junit4.descriptor.JUnit4TestDescriptor.toJavaSource(JUnit4TestDescriptor.java:112)         at org.junit.gen5.engine.junit4.descriptor.JUnit4TestDescriptor.(JUnit4TestDescriptor.java:53)         at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.addChildrenRecursively(TestClassRequestResolver.java:110)         at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.createCompleteRunnerTestDescriptor(TestClassRequestResolver.java:94)         at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.determineRunnerTestDescriptor(TestClassRequestResolver.java:70)         at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.addRunnerTestDescriptor(TestClassRequestResolver.java:63)         at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.populateEngineDescriptorFrom(TestClassRequestResolver.java:57)         at org.junit.gen5.engine.junit4.discovery.JUnit4DiscoveryRequestResolver.populateEngineDescriptor(JUnit4DiscoveryRequestResolver.java:83)         at org.junit.gen5.engine.junit4.discovery.JUnit4DiscoveryRequestResolver.resolve(JUnit4DiscoveryRequestResolver.java:46)         at org.junit.gen5.engine.junit4.JUnit4TestEngine.discover(JUnit4TestEngine.java:47)         at org.junit.gen5.launcher.main.DefaultLauncher.discoverRoot(DefaultLauncher.java:101)         at org.junit.gen5.launcher.main.DefaultLauncher.discover(DefaultLauncher.java:76)         at org.junit.gen5.surefire.TestPlanScannerFilter.accept(TestPlanScannerFilter.java:37)         at org.apache.maven.surefire.util.DefaultScanResult.applyFilter(DefaultScanResult.java:98)         at org.junit.gen5.surefire.JUnitGen5Provider.scanClasspath(JUnitGen5Provider.java:65)         at org.junit.gen5.surefire.JUnitGen5Provider.invoke(JUnitGen5Provider.java:60)         at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)         at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)         at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)          at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)         at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)         at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)         at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)         at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)         at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)         at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)         at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)         at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)         at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)         at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)         at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)         at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)         at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) Caused by: org.apache.maven.plugin.PluginExecutionException: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test failed: There was an error in the forked process org.junit.gen5.commons.util.PreconditionViolationException: Class must not be null         at org.junit.gen5.commons.util.Preconditions.condition(Preconditions.java:153)         at org.junit.gen5.commons.util.Preconditions.notNull(Preconditions.java:84)         at org.junit.gen5.commons.util.Preconditions.notNull(Preconditions.java:55)         at org.junit.gen5.commons.util.ReflectionUtils.findAllMethodsInHierarchy(ReflectionUtils.java:437)         at org.junit.gen5.commons.util.ReflectionUtils.getSuperclassMethods(ReflectionUtils.java:524)         at org.junit.gen5.commons.util.ReflectionUtils.findAllMethodsInHierarchy(ReflectionUtils.java:445)         at org.junit.gen5.commons.util.ReflectionUtils.findMethods(ReflectionUtils.java:427)         at org.junit.gen5.commons.util.ReflectionUtils.findMethods(ReflectionUtils.java:418)         at org.junit.gen5.engine.junit4.descriptor.JUnit4TestDescriptor.toJavaMethodSource(JUnit4TestDescriptor.java:128)         at org.junit.gen5.engine.junit4.descriptor.JUnit4TestDescriptor.toJavaSource(JUnit4TestDescriptor.java:112)         at org.junit.gen5.engine.junit4.descriptor.JUnit4TestDescriptor.(JUnit4TestDescriptor.java:53)         at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.addChildrenRecursively(TestClassRequestResolver.java:110)         at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.createCompleteRunnerTestDescriptor(TestClassRequestResolver.java:94)         at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.determineRunnerTestDescriptor(TestClassRequestResolver.java:70)         at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.addRunnerTestDescriptor(TestClassRequestResolver.java:63)         at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.populateEngineDescriptorFrom(TestClassRequestResolver.java:57)         at org.junit.gen5.engine.junit4.discovery.JUnit4DiscoveryRequestResolver.populateEngineDescriptor(JUnit4DiscoveryRequestResolver.java:83)         at org.junit.gen5.engine.junit4.discovery.JUnit4DiscoveryRequestResolver.resolve(JUnit4DiscoveryRequestResolver.java:46)         at org.junit.gen5.engine.junit4.JUnit4TestEngine.discover(JUnit4TestEngine.java:47)         at org.junit.gen5.launcher.main.DefaultLauncher.discoverRoot(DefaultLauncher.java:101)         at org.junit.gen5.launcher.main.DefaultLauncher.discover(DefaultLauncher.java:76)         at org.junit.gen5.surefire.TestPlanScannerFilter.accept(TestPlanScannerFilter.java:37)         at org.apache.maven.surefire.util.DefaultScanResult.applyFilter(DefaultScanResult.java:98)         at org.junit.gen5.surefire.JUnitGen5Provider.scanClasspath(JUnitGen5Provider.java:65)         at org.junit.gen5.surefire.JUnitGen5Provider.invoke(JUnitGen5Provider.java:60)         at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)         at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)         at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)          at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:145)         at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)         ... 20 more Caused by: java.lang.RuntimeException: There was an error in the forked process org.junit.gen5.commons.util.PreconditionViolationException: Class must not be null         at org.junit.gen5.commons.util.Preconditions.condition(Preconditions.java:153)         at org.junit.gen5.commons.util.Preconditions.notNull(Preconditions.java:84)         at org.junit.gen5.commons.util.Preconditions.notNull(Preconditions.java:55)         at org.junit.gen5.commons.util.ReflectionUtils.findAllMethodsInHierarchy(ReflectionUtils.java:437)         at org.junit.gen5.commons.util.ReflectionUtils.getSuperclassMethods(ReflectionUtils.java:524)         at org.junit.gen5.commons.util.ReflectionUtils.findAllMethodsInHierarchy(ReflectionUtils.java:445)         at org.junit.gen5.commons.util.ReflectionUtils.findMethods(ReflectionUtils.java:427)         at org.junit.gen5.commons.util.ReflectionUtils.findMethods(ReflectionUtils.java:418)         at org.junit.gen5.engine.junit4.descriptor.JUnit4TestDescriptor.toJavaMethodSource(JUnit4TestDescriptor.java:128)         at org.junit.gen5.engine.junit4.descriptor.JUnit4TestDescriptor.toJavaSource(JUnit4TestDescriptor.java:112)         at org.junit.gen5.engine.junit4.descriptor.JUnit4TestDescriptor.(JUnit4TestDescriptor.java:53)         at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.addChildrenRecursively(TestClassRequestResolver.java:110)         at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.createCompleteRunnerTestDescriptor(TestClassRequestResolver.java:94)         at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.determineRunnerTestDescriptor(TestClassRequestResolver.java:70)         at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.addRunnerTestDescriptor(TestClassRequestResolver.java:63)         at org.junit.gen5.engine.junit4.discovery.TestClassRequestResolver.populateEngineDescriptorFrom(TestClassRequestResolver.java:57)         at org.junit.gen5.engine.junit4.discovery.JUnit4DiscoveryRequestResolver.populateEngineDescriptor(JUnit4DiscoveryRequestResolver.java:83)         at org.junit.gen5.engine.junit4.discovery.JUnit4DiscoveryRequestResolver.resolve(JUnit4DiscoveryRequestResolver.java:46)         at org.junit.gen5.engine.junit4.JUnit4TestEngine.discover(JUnit4TestEngine.java:47)         at org.junit.gen5.launcher.main.DefaultLauncher.discoverRoot(DefaultLauncher.java:101)         at org.junit.gen5.launcher.main.DefaultLauncher.discover(DefaultLauncher.java:76)         at org.junit.gen5.surefire.TestPlanScannerFilter.accept(TestPlanScannerFilter.java:37)         at org.apache.maven.surefire.util.DefaultScanResult.applyFilter(DefaultScanResult.java:98)         at org.junit.gen5.surefire.JUnitGen5Provider.scanClasspath(JUnitGen5Provider.java:65)         at org.junit.gen5.surefire.JUnitGen5Provider.invoke(JUnitGen5Provider.java:60)         at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)         at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)         at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)          at org.apache.maven.plugin.surefire.booterclient.ForkStarter.fork(ForkStarter.java:584)         at org.apache.maven.plugin.surefire.booterclient.ForkStarter.fork(ForkStarter.java:460)         at org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:229)         at org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:201)         at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeProvider(AbstractSurefireMojo.java:1026)         at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeAfterPreconditionsChecked(AbstractSurefireMojo.java:862)         at org.apache.maven.plugin.surefire.AbstractSurefireMojo.execute(AbstractSurefireMojo.java:755)         at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)         ... 21 more [ERROR] [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException ```  The configuration for maven-surefire-plugin in my `pom.xml` is:  ``` xml                              org.apache.maven.plugins                 maven-surefire-plugin                 2.19.1                                                               org.junit                         surefire-junit5                         5.0.0-SNAPSHOT                                                                                                 ${surefireArgLine}                     ${skip.unit.tests}                     ${surefire.excluded.groups}                                              ${project.basedir}/src/main/config                         ${java.home}/lib/ext/jfxrt.jar                                                                                                listener                             net.blah.TestRunListener                                                                             ```  Let me know if you need any more information. Thanks very much.","closed","type: bug,","brcolow","2016-05-29T06:42:21Z","2016-05-29T20:06:39Z"
"","258","Package junit-platform-console as a fat JAR","https://github.com/johnrengelman/shadow plugin can be used to achieve this goal. This plugjn is capable of merging metadata files (such as META-INF/services) and others. It's also friendly with the `application` plugin; it can produce an executable fat jar when both plugins are applied.","closed","component: Platform,","aalmiray","2016-05-13T08:40:26Z","2017-02-04T15:31:19Z"
"","604","Allow hierarchical parameterized/dynamic tests","However an extension point that allows dynamic or parameterized tests turns out (see for example #14, #371, #395 ), it would be great if it allowed to structure tests hierarchically. If, for example, two test methods `testA` and `testB` were run three times each, the test tree should be able to look as follows:  ``` testA     - run #1     - run #2     - run #3 testB     - run #1     - run #2     - run #3 ```  Allowing extensions to create a plan like that gives them the ability to better structure the generated tests, giving better feedback to developers.  This does not mean that a particular implementation for that extension point (let's say Jupiter's support for parameterized tests) should organize tests like that but that other implementations have the ability to do so.","closed","component: Jupiter,","nipafx","2016-12-15T09:03:40Z","2017-05-03T11:41:24Z"
"","395","Will JUnit 5 support anything like @Theories from JUnit 4?","hi,  yes, I asked my aunt google for quickly but not digged too deep in any discussion: so please regret this question ;)  since [Theories](https://github.com/junit-team/junit4/wiki/Theories) had some nice ideas and Popper has absorbed it but then ""accidently"" died: ❓ anything new, cool aside Parameterized tests in JUnit5?  Anything that will adress Theories?  Anything that will help to write a test class with different dataproviders for different methods?  `i.e. > run test method1 with {A,B} run test method2 with {C,D}`  Anything that will help to test combinations of different dataProvider data sets?! `i.e. > for two dataprovider {A,B} and {C,D} run each test method with {AC,AD,BC,BD}`  /me is just bored from rewriting workarounds and pasting snippets for test class templates  ~Marcel # documentation","closed","theme: programming model,","childnode","2016-07-12T22:49:31Z","2018-05-16T19:55:05Z"
"","700","Gradle-Plugin make test-task not working","Hi,  we have the following code in our build.gradle:  ```groovy test {     systemProperty 'serviceUrl', ""http://$masterServerAddress""     systemProperty 'java.io.tmpdir', file(""$buildDir/tmp"").absolutePath      doFirst {         // do something     }      finalizedBy ""stopMasterServer"" } ```  This worked unless i've added the junit5Plugin. After that, systemProperty and doFirst won't be called. Maybe this happens, because ""configureTaskDependencies"" changes this task.   Is there a way to stop this? Or can I do this above on the junitPlatformTest?","closed","3rd-party: Gradle,","michaelsiepmann","2017-03-01T12:56:18Z","2018-03-16T14:26:31Z"
"","356","Question about android support","Hi! I'm working on a JUnit Platform `TestEngine` for https://github.com/JetBrains/spek. One thing we want to keep is the ability to write tests for android projects. The platform relies heavily on Java 8 features, how would this affect android users? Or is it supported at all?","closed","","raniejade","2016-06-25T12:55:07Z","2016-07-12T15:51:12Z"
"","329","Do you like to have native support of Allure Framework","Hi there! Do you like to have native support of Allure Framework? We would like to move Allure integration code to your repository, so you could maintain it at your will and e.g. add early support of your new features such `@DisplayName`. We on our turn would like to move a little bit away from solving test framework specific issues and concentrate on general reporting problems to make Allure rock. What do you guys think?","closed","status: declined,","baev","2016-06-21T09:37:33Z","2016-06-24T18:26:36Z"
"","528","Beginner needs help!","Hi JUnit5 community,  Sorry for asking my question like this, I hope I'm not offending anyone. If I did offend anyone, I'll remove this message asap.  I'm an intermediate programmer who's new to open source and would love to contribute to JUnit5. However, there's no info here for people who are new to open source and no mailing list or common chat. Can anyone help me get started? Or is JUnit5 for people who are more experienced in open source?  Thanks a lot for your time!  Jing","closed","","JingMa87","2016-09-30T15:24:54Z","2016-10-03T07:13:27Z"
"","445","Change visibility of junit-vintage to get other test engines running","Hi junit-team,  I am the maintainer of https://github.com/TNG/junit-dataprovider and in order to be able to migrate to the new JUnit5 engine for new test cases in the future I would like to provide a test engine for it. This would make it possible to migrate step by step.  To achieve that I created the following: - The branch ""issue75-junit5-support-by-only-extend-code"" in my forked repo ""aaschmid/junit5"" with one commit which extends the visibility of various junit-vintage classes and methods, see https://github.com/junit-team/junit5/compare/master...aaschmid:issue75-junit5-support-by-only-extend-code?expand=1 - The junit-dataprovider test engine and the corresponding code, see https://github.com/TNG/junit-dataprovider/compare/issue75-junit5-support-by-only-extend-code?expand=1  Now here are my questions: 1. Are you OK with extending your (internal) APIs like that or is there an easier way which I completely overlooked? (Even if could think about better solutions to achieve what I need but this can be discussed after you do not see another solution and would be OK with extending visibility ...) 2. As I used `@Test` and `@UseDataProvider` for annotating my test cases, obviously the junit-vintage engine also tries to execute the test cases and fails with the error ""java.lang.Exception: Method testAdd should have no parameters ..."" due to ""BlockJUnit4ClassRunner"" and its validations. Can you think of a solution or do I have to create a custom runner too? (Please note that this would require even more classes and methods to be visible but it would work as I have already tested it :-) If you want to see the code to compare or so, just let me now).  I appreciate every help and your great work so far.   Thanks, Andreas","closed","status: works-as-designed,","aaschmid","2016-08-02T23:25:47Z","2016-08-31T10:18:10Z"
"","518","Possibility to customize element resolving","Hi @sbrannen,  according to your last comment on https://github.com/TNG/junit-dataprovider/issues/75, I looked deeper into the `Extension` API. I agree that I do not  want to provide a custom test engine. Maybe you can help me about implementing an extension for junit-dataprovider to run the tests with junit-jupiter rather than a complete test engine.  Correct me if I am wrong but as far as I understand the `Extension` API is currently not capable of registering additional test cases. However, extending the junit-jupiter framework to be able to register  another `ElementResolver` could discover additional (dynamic) test cases which fit the junit-dataprovider programming model.   I found no issue / feature request concerning this topic, so I opend this one. Have you already thought about the possibility of register custom `ElementResolver` or does that fit into your vision of junit5? I would love to help out providing a pull request if you give me a little vision how you could think about a good solution for it. At my first tries it felt natural to use the `Extension` API for this but while doing so, I saw that it is only available / used within `org.junit.platform.engine.TestEngine.execute(ExecutionRequest)`.   Cheers, Andreas","closed","","aaschmid","2016-09-18T16:09:10Z","2017-10-04T17:40:04Z"
"","673","Cannot create Launcher without at least one TestEngine","Hey,  I am running the following in gradle:  junitPlatform { filters { engines { include 'junit-platform', 'junit-vintage', 'junit-jupiter' } tags { include 'categories.TestClassifier.ReliableIntegrationTest' } } }  I believe I have configured the dependencies correctly:  dependencies { classpath ( ""org.junit.platform:junit-platform-gradle-plugin:1.0.0-M3"", ) }  apply plugin: ""org.junit.platform.gradle.plugin""  configurations { externalLibraries compile.extendsFrom (externalLibraries) }  externalLibraries (group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.0.0-M3') externalLibraries (group: 'org.junit.platform', name: 'junit-platform-console', version: '1.0.0-M3') externalLibraries (group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.0.0-M3') externalLibraries (group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.0.0-M3') externalLibraries (group: 'org.junit.platform', name: 'junit-platform-gradle-plugin', version: '1.0.0-M3') externalLibraries (group: 'org.junit.platform', name: 'junit-platform-engine', version: '1.0.0-M3') externalLibraries (group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '4.12.0-M3') externalLibraries (group: 'junit', name: 'junit', version: '4.12') externalLibraries (group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.0.0-M3') externalLibraries (group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.0.0-M3')  No matter how I adjust the engines (specify just one engine, list all or comment out the engine part entirely) I always run in this error. I believe it has in common with the filter option, because if I remove it all tests are picked up immediately. But I need the filter to narrow down tests with tags...  Any hints? Maybe I am missing something?   Feb 22, 2017 3:21:14 PM org.junit.platform.launcher.core.ServiceLoaderTestEngineRegistry loadTestEngines INFO: No TestEngine implementation discovered. org.junit.platform.commons.util.PreconditionViolationException: Cannot create Launcher without at least one TestEngine; consider adding an engine implementation JAR to the classpath at org.junit.platform.commons.util.Preconditions.condition(Preconditions.java:207) at org.junit.platform.launcher.core.DefaultLauncher.(DefaultLauncher.java:52) at org.junit.platform.launcher.core.LauncherFactory.create(LauncherFactory.java:53) at org.junit.platform.console.tasks.ExecuteTestsTask.executeTests(ExecuteTestsTask.java:61) at org.junit.platform.console.tasks.ExecuteTestsTask.lambda$execute$0(ExecuteTestsTask.java:57) at org.junit.platform.console.tasks.CustomContextClassLoaderExecutor.invoke(CustomContextClassLoaderExecutor.java:33) at org.junit.platform.console.tasks.ExecuteTestsTask.execute(ExecuteTestsTask.java:57) at org.junit.platform.console.tasks.ConsoleTaskExecutor.executeTask(ConsoleTaskExecutor.java:38) at org.junit.platform.console.ConsoleLauncher.execute(ConsoleLauncher.java:54) at org.junit.platform.console.ConsoleLauncher.main(ConsoleLauncher.java:39)","closed","status: works-as-designed,","Vazzilena","2017-02-22T14:09:32Z","2020-03-19T17:45:03Z"
"","480","Versioning plugin slowing down your build","Hey folks,  I just noticed this line in your build:  ``` 'Build-Revision': versioning.info.commit, ```  This effectively calls `git status` once for _every_ subproject on _every_ Gradle invocation. At the very least you'll want to call it only once. This will speed up all your builds.  Ideally you could change it so that attribute is only computed on CI builds. On local builds you probably don't care so much about the ""Build-Revision"" in the manifest.  Cheers, Stefan","closed","theme: build,","oehme","2016-08-27T07:15:23Z","2016-08-27T12:14:12Z"
"","803","Platform 1.0.0-M3 throws exception NoSuchMethodError","Hello. I tried to run a tests `./gradlew clean test` but it failed with an exception. I need to stick to M3 because of JMockit support, but when I remove it from the class path result is the same. Am I doing anything wrong? How should I set it up properly? Thanks.  Exception: ``` Exception in thread ""main"" java.lang.BootstrapMethodError: java.lang.NoSuchMethodError: org.junit.platform.engine.TestDescriptor.prune()V         at org.junit.platform.launcher.core.Root.prune(Root.java:71)         at org.junit.platform.launcher.core.DefaultLauncher.discoverRoot(DefaultLauncher.java:123)         at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:87)         at org.junit.platform.console.tasks.ConsoleTestExecutor.executeTests(ConsoleTestExecutor.java:65)         at org.junit.platform.console.tasks.ConsoleTestExecutor.lambda$execute$0(ConsoleTestExecutor.java:57)         at org.junit.platform.console.tasks.CustomContextClassLoaderExecutor.invoke(CustomContextClassLoaderExecutor.java:33)         at org.junit.platform.console.tasks.ConsoleTestExecutor.execute(ConsoleTestExecutor.java:57)         at org.junit.platform.console.ConsoleLauncher.executeTests(ConsoleLauncher.java:79)         at org.junit.platform.console.ConsoleLauncher.execute(ConsoleLauncher.java:69)         at org.junit.platform.console.ConsoleLauncher.main(ConsoleLauncher.java:41) Caused by: java.lang.NoSuchMethodError: org.junit.platform.engine.TestDescriptor.prune()V         at java.lang.invoke.MethodHandleNatives.resolve(Native Method)         at java.lang.invoke.MemberName$Factory.resolve(MemberName.java:975)         at java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:1000)         at java.lang.invoke.MethodHandles$Lookup.resolveOrFail(MethodHandles.java:1394)         at java.lang.invoke.MethodHandles$Lookup.linkMethodHandleConstant(MethodHandles.java:1750)         at java.lang.invoke.MethodHandleNatives.linkMethodHandleConstant(MethodHandleNatives.java:477)         ... 10 more ```  I am using Gradle 4.3.1, with below script. ```groovy buildscript {     ext.junitJupiterVersion = '5.0.0-M3'     ext.junitPlatformVersion = '1.0.0-M3'     repositories {         mavenCentral()     }     dependencies {         classpath ""org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}""     } }  apply plugin: 'java' apply plugin: 'jacoco' apply plugin: 'org.junit.platform.gradle.plugin'  tasks.withType(JavaCompile) {     testCompile 'org.jmockit:jmockit:1.31'     sourceCompatibility = JavaVersion.VERSION_1_8     targetCompatibility = JavaVersion.VERSION_1_8 }  repositories {     mavenCentral() }  dependencies {     testCompile ""org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}""     testRuntime ""org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"" } ```  It happens for any test. Example below. ```java public class AppTest {     @Test     public void t() {         App a = new App(new Calc());         int result = a.calculate();         Assertions.assertEquals(999, result);     } } ```","closed","","MichalMichalak","2017-04-24T03:22:04Z","2017-04-24T05:09:16Z"
"","16","Introduce support for a custom test scheduler","Hello, my use case is to execute the same testcase concurrently in different threads on the same test object to find race conditions. If I understand the api correctly this should be possible by using the annotation @TestInstance PER_CLASS and the yet to be implemented but planned ""Introduce support for registering parameterized tests  #14"". What is missing is an annotation for a custom scheduler which gets preferably the root EngineTestExecutionNode and is responsible for actually running the tests. Is something like this planned already? Thank you very much Thomas","closed","theme: extensions,","ThomasKrieger","2015-11-24T15:19:39Z","2018-12-04T07:43:13Z"
"","857","Associate a test with a method","Hello,  Why i can't set the method tested in the Test annotation ?  I think it is a good practice to test a single method. And with that, you can run all test associate with a method. It can be a string in the annotation.  For exemple :  ` @Test(method=""Class1.method"") public void test1() { ... } `  Thank you","closed","status: duplicate,","abarhub","2017-05-18T20:21:21Z","2017-06-19T14:51:27Z"
"","467","Make sure BigDecimals are formatted correctly","Hello,  this is not a bug, but instead is a feature request. With latest JUnit 4.x I want to compare `BigDecimal`  values so I do the following:  ``` assertThat(""1x125$ price - 1x25$ discount - 1x20$ voucher + 1x10$ delivery = 90$"", new BigDecimal(""90.0""),                    comparesEqualTo(cart.getTotalPrice().getNumber().numberValue(BigDecimal.class))); ```  unfortunately this prints the following in the command line:  ``` Expected: a value equal to <1.1E+2>      but: <90.0> was less than <1.1E+2> ```  I'm not sure if it is a problem in hamcrest or junit but I will just log it here so that it doesn't get lost. Please make sure with the latest JUnit 5 that you use `toPlainString()` or some other way to correctly format `BigDecimal`.","closed","status: stale,","ptahchiev","2016-08-16T08:55:03Z","2021-06-19T12:50:03Z"
"","874","Custom gradle task for run jUnit 5 tests","Hello! I need to have a custom task in a gradle script for running integration tests of a project.  Can you suggest how to create another gradle task (with different name, not ""junitPlatform"") with another filtration settings? I mean that I want to have two tasks: 1) one for fast tests and 2) for integration_test. I think it will be like a: task IntegrationTest {     filters {         engines {             include 'junit-jupiter'         }         tags {             include 'integration_test'         }     } }","closed","","ksuzu","2017-06-06T08:45:49Z","2017-06-10T14:07:27Z"
"","348","Add feature about blocks or labels for test reports how Spock Framework offers","Hello Developers  I use `Spock Framework` which is based on `Groovy`, there is a special feature very useful. It contains some special blocks or labels such as `given`, `where` etc where appears in some special kind of reports. It is very useful by itself  Such feature would be added in JUnit 5?  Thanks","closed","status: stale,","manueljordan","2016-06-22T17:50:21Z","2021-06-19T12:50:03Z"
"","68","Clarify / Introduce path concept for the unique ID of the TestDescriptors","Having a tree of `TestDescriptor`s that we use for the execution of tests, we need to guarantee that the  descriptors are always resolved in the same tree structure, i.e. a `MethodTestDescriptor` should always have its enclosing `ClassTestDescriptor` as a parent, no matter how the method was found during the resolve phase (by unique id, by class reference, by method reference, etc.).  If we guarantee the tree structure to be equal we can then deduce the `path` of a descriptor by the tree node leading to the descriptor. As for Java test the unique id of a deeper node in the tree is always prefixed by the unique id of its parent node, we could reduce the `path` such that each level only adds the corresponding part.  We should investigate some time on this idea and clarify / introduce a path concept for the `JUnit5TestEngine`.","closed","","bechte","2015-12-16T14:22:01Z","2016-01-13T11:07:00Z"
"","516","Cannot select default method by fully qualified method name","Given the code:  ``` java interface ATest {    @Test     default void testSmthCommon() {} }  class BTest implements ATest {} ```  I expect that passing `BTest#testSmthCommon` as the _fully qualified method name_ would discover test method in `BTest` class.   Instead, the JUnit Platform discovers method in the interface and then the `JupiterTestEngine` fails to run it.  I believe the problem is due to the use of `method.getDeclaringClass()` in `DiscoverySelectors#selectJavaMethod(String)`.  This was noticed in the latest `SNAPSHOT` version.","closed","component: Platform,","akozlova","2016-09-16T08:09:19Z","2016-11-30T08:29:22Z"
"","898","Ignore disabled annotations when they appear on element from DiscoverySelector","Given the code  ```java import org.junit.jupiter.api.*;  @Disabled class DisabledTest {     @Disabled     @Test     void testIgnorance() throws Exception {         Assertions.assertEquals(""1"", ""1"", ""strings doesn't match"");         System.out.println(""Assertion performed"");     }     @Test     void shouldBeExecuted() throws Exception {         Assertions.assertTrue(true, ""True is always true"");     } } ```  When user runs `testIgnorance`, IDEA disables the `DisabledCondition` and allows to run the test. Works as it was in JUnit 4. But when user runs the whole class, the same idea not really works: the disabled method also runs. I don't see how to influence the discovery mechanism to ignore `@Disabled` annotations differently. Please correct me if I am wrong.  On the other hand, from the point of JUnit 5 itself: storing information of the entry point (discovery selector root, when exactly one) and then using this information to ignore top level annotations looks not that strange (though it's strange of cause). What do you think?","closed","status: stale,","akozlova","2017-06-23T14:15:11Z","2021-06-19T12:50:13Z"
"","77","ReflectionUtils.invoke now throws Throwable.","Gets rid of Wrapper exception and a couple of catch clauses, but also requires (at least for reasons of symmetry) that ReflectionUtils.newInstance() throws Throwable.","closed","","jlink","2015-12-21T13:36:46Z","2016-01-04T10:25:07Z"
"","190","Get rid of TestDescriptor.getUniqueId","Get rid of the String-based version of unique ID.   Things to do: - [x] Use UniqueId with junit4-engine so that all unique IDs produced are instances of UniqueID - [x] Deprecate all String-based unique ID methods in TestDescriptor - [x] Get rid of internal used of deprecated methods - [x] Get riid of client uses of deprecated methods - [x] Change (most) tests so that they don't use String IDs any more - [x] Enhance interface of UniqueId to cover common usages - [x] TestEngine.discover gets engine's unique ID as additional parameter","closed","","jlink","2016-03-11T11:05:57Z","2016-03-18T08:21:14Z"
"","599","Regression: assertThrows should not use wildcard for expected exception type","For this case, instead of using a wildcard declared as `? extends Throwable`, we use a type T as the type argument of a given generic type. It will help compiler to infer correct concrete return type for method instead of returning `Throwable` every time.  For example, in IDEA, press *Cmd+Option+V* Before: ```java Throwable t = assertThrows(AwesomeException.class, () -> { /* smth */ }); ```  After: ```java AwesomeException e = assertThrows(AwesomeException.class, () -> { /* smth */ }); ```  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Jupiter,","DmitriyZaitsev","2016-12-11T21:37:52Z","2016-12-12T02:14:53Z"
"","876","Improve error message if multiple ""test"" annotations are present on a method","For the following test two descriptors will be created -- one for `@ParameterizedTest` and another for `@Test`:  ```java @ParameterizedTest @ValueSource(strings = ""blah"") @Test void blah(String blah) {} ```  The parameterized test passes, while the other one fails because JUnit Juiter cannot resolve the parameter:  ``` org.junit.jupiter.api.extension.ParameterResolutionException: No ParameterResolver registered for parameter [java.lang.String arg0] in executable [void io.qala.datagen.junit5.Junit5ParameterizedTest.blah(java.lang.String)]. ```  I don't know if it's a bug or a feature, but because I didn't know about this I spent an hour debugging JUnit. I assume many more people could step on this, so would be great to make the logic more obvious. Couple of options:  * Ignore `@Test` if some other test descriptor is created * Make error message clearer: `... This can happen e.g. if 2 different Test annotations are put on one method.` * Use mechanisms for creating Test Descriptors similar to how ParameterResolver works: `boolean supportsTest(...)`  ## Related Issues  - #242","closed","theme: diagnostics,","ctapobep","2017-06-09T08:53:41Z","2019-08-08T12:45:47Z"
"","756","Dynamic children of TestDescriptor with Type.CONTAINER_AND_TEST are not registered correctly","For some strange reason, which I couldn't figure out yet, trying to dynamically register children of a descriptor with type `Type.CONTAINER_AND_TEST` will register them (read: show them in the test plan) as children of the container above and not the intended parent. Changing type to `Type.CONTAINER` and also implementing ``` boolean hasTests() { return true; } ``` fixes the symptom.  I've observed the phenomenon in IDEA's test view but assume it's a general problem.","closed","","jlink","2017-03-31T10:57:16Z","2017-07-16T14:17:00Z"
"","297","Maintain list of third-party TestEngines and Extensions","For maintainers and users of the framework, we want to have a list of third-party engines and extensions in the wiki ~or on the website~.  ## Test Engines - [Specsy](http://specsy.org/) - [Spek](https://github.com/JetBrains/spek) - [Cucumber](https://github.com/signed/junit-cucumber-engine)  ## Extensions - [SpringExtension](https://github.com/sbrannen/spring-test-junit5) - [upREST](https://github.com/selesy/uprest) - [JUnit 5 Docker](https://faustxvi.github.io/junit5-docker/) - [JGiven](https://github.com/TNG/JGiven/tree/junit5/jgiven-junit5)","closed","theme: web site,","marcphilipp","2016-06-07T13:24:53Z","2017-02-07T16:48:59Z"
"","55","Rename junit4-launcher-runner to junit4-runner","For greater clarity: - [x] Rename the `junit4-launcher-runner` module to `junit4-runner`. - [x] Rename the `org.junit.gen5.junit4runner` package to `org.junit.gen5.junit4.runner`. - [x] Update artifact ID in README, Wiki, etc.","closed","type: task,","marcphilipp","2015-12-11T13:18:20Z","2016-01-05T21:55:08Z"
"","99","Rename @Name to @DisplayName","For greater clarity, rename `@Name` to `@DisplayName`.","closed","type: enhancement,","sbrannen","2016-01-11T11:13:35Z","2016-01-11T18:47:30Z"
"","444","Introduce mechanism for asynchronous tests to signal test completion","For example, a test method that spawns asynchronous tasks in the background may not have completed when the execution the test method completes. It would therefore be beneficial if such a test method had a mechanism for signaling that it was complete in order for _verify_ methods to be invoked at the appropriate time.","closed","status: stale,","sbrannen","2016-08-02T22:49:28Z","2021-06-03T22:11:25Z"
"","609","Investigate if dependency of launcher and engine API to commons can be avoided","Follow-up on #586.  Possible solutions from team brainstorming:  - Shadow commons into all artifacts that use it - No breaking changes in commons, not even in internal code - Isolate Launcher from rest of platform  If not possible, document [workaround](https://github.com/junit-team/junit5/issues/586#issuecomment-265012600) for IntelliJ and other IDEs.","closed","component: Vintage,","marcphilipp","2016-12-22T09:23:03Z","2019-07-19T19:32:39Z"
"","558","Align selectors and filters in Surefire provider with request builder API and Gradle plugin","Follow-up on #485:  > We [...] want to align the use of filters and selectors in the Surefire provider with the style used in the Launcher's request builder API and the Gradle plugin.  ### Related Issues  - #485  - #554   ### Goal  ```xml      maven-surefire-plugin     2.19.1                                                                 foo, bar                     acceptance, integration                                                                       org.junit.platform             junit-platform-surefire-provider             ${junit.platform.version}                ```  ### Deliverables  - [ ] Change `includeTags` and `excludeTags` to `include`/`exclude` and wrap them in a `tags` element that is wrapped in a `filters` element","closed","3rd-party: Maven Surefire,","marcphilipp","2016-11-03T17:11:02Z","2017-02-23T07:37:18Z"
"","951","Report runtime-only reported Descriptions as dynamic TestDescriptors","Fixes #937.  ### Definition of Done  - [X] There are no TODOs left in the code - [X] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [X] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [X] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [X] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Vintage,","marcphilipp","2017-07-15T19:40:25Z","2017-07-21T08:56:12Z"
"","829","Replace Node.isLeaf() with explicit tracking of executed descriptors","Fixes #812.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [X] There are no TODOs left in the code - [X] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [X] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [X] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [X] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Platform,","marcphilipp","2017-05-03T08:27:24Z","2017-05-03T09:52:59Z"
"","760","Include junit-jupiter-params in standalone JAR","Fixes #759.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [X] There are no TODOs left in the code - [X] ~~Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc~~ - [X] ~~[Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed~~ - [X] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [X] ~~Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html)~~ - [X] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [X] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Platform,","marcphilipp","2017-03-31T19:44:29Z","2017-04-01T04:49:11Z"
"","841","Introduce engine-level ExtensionContext","Fixes #671.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [X] There are no TODOs left in the code - [X] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [X] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [X] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [X] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [X] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","marcphilipp","2017-05-07T15:44:36Z","2017-12-22T18:07:59Z"
"","612","Add ""event"" to event list","Fixes #611   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: web site,","nipafx","2016-12-22T23:01:49Z","2017-03-12T10:57:05Z"
"","302","Introduce ParameterContext","Fixes #300.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: extensions,","marcphilipp","2016-06-11T14:01:34Z","2016-06-11T19:11:44Z"
"","202","Use String instead of TestId to represent unique IDs of TestIdentifiers","Fixes #189.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","marcphilipp","2016-03-13T15:11:20Z","2016-03-14T20:03:53Z"
"","188","Website: Replace ""JUnit Lambda"" references","Fix the current website so that it has areas for JUnit 4 and 5 and Lambda is replaced by JUnit 5.","closed","type: task,","jlink","2016-03-11T09:47:37Z","2016-03-16T11:41:52Z"
"","239","Configure additional metadata on JAR manifest.","Fix for #238 by adding project metadata to JAR manifest. Relies on the `versioning` plugin to pull in the latest SCM hash.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","aalmiray","2016-05-05T17:08:49Z","2016-05-13T12:10:40Z"
"","854","Fix loading of classes from Spring Boot executable jars.","Fix classpath scanning for Spring Boot jars  ## Overview  I am writing a service that handles integration testing, and it makes use of Spring Boot to create executable jars.  The classpath scanning algorithm doesn't properly handle this jar format and results in mangled classnames.  This change introduces a test case that reproduces the issue, as well as a fix.  I am not 100% sure that this is correct (with respect to the design of the ClasspathScanner class).  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","richardrak","2017-05-16T21:40:52Z","2019-07-19T19:32:41Z"
"","909","Document TestTemplate and accompanying extension point in User Guide","Fix #762.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","marcphilipp","2017-07-02T14:38:02Z","2017-07-02T15:52:34Z"
"","141","Introduce a @NotThreadSafe annotation","Feature request:  To speed up testing, one would like to run unit tests in parallel on the same JVM. This is already possible for example in the Maven Surefire plugin.  However, in some cases you cannot run some of the unit tests in parallel.  An example is when more than one test does manipulate the same static state, eg a cache. It would be good to be able to have a tag to specify that a specific test (or test class) should never be run in parallel on the same JVM.  It would be then the responsibility of the runner (eg Surefire/Failsafe plugins) to honor such constraint.   A further annotation (or an option in the above one) could be used to tag a test to never run in parallel, not even if in a different spawn JVM. This might be for example useful if a set of tests are manipulating a same external resource (eg writing/reading a file). I personally never encountered such case, but I guess it could happen.","closed","theme: concurrency,","arcuri82","2016-01-28T11:56:12Z","2018-12-04T07:41:48Z"
"","158","Add requireEngine property to Gradle plugin","Equivalent to JUnit5 in junit4-runner","closed","","jlink","2016-02-15T15:09:09Z","2016-05-24T15:33:59Z"
"","635","Ensure bridge/shadowed methods are handled correctly","Ensure the Jupiter engine behaves correctly for bridge methods (see junit-team/junit4#1411).","closed","component: Jupiter,","marcphilipp","2017-01-22T10:36:50Z","2017-01-24T18:28:48Z"
"","82","Encapsulate attributes for ExtensionContext","Encapsulate attributes for Test|ContainerExtensionContext: - do not expose map - delegate attribute retrieval to parent","closed","theme: extensions,","jlink","2015-12-29T14:47:49Z","2016-01-19T18:16:49Z"
"","25","Investigate AsciiDoc Javadoc options","e.g. https://github.com/asciidoctor/asciidoclet","closed","","marcphilipp","2015-12-02T14:29:32Z","2015-12-15T12:47:01Z"
"","638","Add support for dynamic test instances","Dynamic tests can be generated by defining test factories using `@TestFactory` but these methods cannot be used to define groups of tests or to dynamically generate nested tests. Adding support for dynamic test instances would allow defining test instance factories containing tests, test factories, and/or nested test instance factories.  e.g.  ```java import static org.junit.jupiter.api.Assertions.assertEquals; import static org.junit.jupiter.api.Assertions.assertTrue; import static org.junit.jupiter.api.DynamicTest.dynamicTest; import static org.junit.jupiter.api.DynamicTestInstance.dynamicTestInstance; // proposed type  import org.junit.jupiter.api.Test; import org.junit.jupiter.api.TestFactory; import org.junit.jupiter.api.TestInstanceFactory; // proposed annotation import org.junit.jupiter.api.function.Instantiatable; // proposed interface  class DynamicTestInstancesDemo {     // This will dynamically generate instances of `DynamicTestInstancesDemo.LocalizationTests`.     // Each instance will have a unique `locale` associated with it.     @TestInstanceFactory     Stream dynamicTestInstancesFromStream() {         return Arrays.stream(Locale.getAvailableLocales()).map(locale -> {             String displayName = locale.getDisplayName();             Instantiatable instantiatable = () -> new LocalizationTests(locale);             return dynamicTestInstance(displayName, instantiatable);         });     }      class LocalizationTests {         // Some data unique to each dynamic test instance of `LocalizationTests`         final Locale locale;          LocalizationTests(Locale locale) {             this.locale = locale;         }          // This is a test within each dynamic test instance         @Test         void something() { ... }          // This is another test within each dynamic test instance         @Test         void somethingElse() { ... }          // This will generate tests within each dynamic test instance         @TestFactory         Stream dynamicTests() { ... }          // This will generate nested test instances within each dynamic test instance         @TestInstanceFactory         Stream dynamicTestInstances() { ... }     } } ```","closed","status: duplicate,","mfulton26","2017-01-23T20:21:52Z","2017-05-03T11:29:57Z"
"","431","Introduce mechanism for terminating Dynamic Tests early","Dynamic Tests are non-deterministic in nature. Sometimes it might not be clear to the test author (let alone the IDE) when or even if the execution will terminate.  It has been suggested to introduce a timeout to stop the execution before it would terminate by itself. An alternative would be to terminate the execution when a certain number of failed (or successful tests)  have been executed.","closed","status: stale,","mmerdes","2016-07-25T10:04:15Z","2021-06-19T12:50:12Z"
"","479","Exception in thread ""main"" joptsimple.UnrecognizedOptionException: all is not a recognized option","Don't know if this exception is my fault but I don't have any clue what's wrog. After month I started developing my project again and it does't want to build with gradle.  ``` gradle --version  ------------------------------------------------------------ Gradle 2.14 ------------------------------------------------------------  Build time:   2016-06-14 07:16:37 UTC Revision:     cba5fea19f1e0c6a00cc904828a6ec4e11739abc  Groovy:       2.4.4 Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015 JVM:          1.8.0_102 (Oracle Corporation 25.102-b14) OS:           Windows 8.1 6.3 amd64 ```  ``` java -version java version ""1.8.0_102"" Java(TM) SE Runtime Environment (build 1.8.0_102-b14) Java HotSpot(TM) 64-Bit Server VM (build 25.102-b14, mixed mode) ```  and the exception  ``` 18:50:24.626 [DEBUG] [org.gradle.process.internal.DefaultExecHandle] Changing state to: STARTING 18:50:24.626 [DEBUG] [org.gradle.process.internal.DefaultExecHandle] Waiting until process started: command 'C:\Program Files\Java\jdk1.8.0_102\bin\java.exe'. 18:50:24.641 [DEBUG] [org.gradle.process.internal.DefaultExecHandle] Changing state to: STARTED 18:50:24.641 [DEBUG] [org.gradle.process.internal.ExecHandleRunner] waiting until streams are handled... 18:50:24.641 [INFO] [org.gradle.process.internal.DefaultExecHandle] Successfully started process 'command 'C:\Program Files\Java\jdk1.8.0_102\bin\java.exe'' 18:50:24.780 [ERROR] [system.err] Exception in thread ""main"" joptsimple.UnrecognizedOptionException: all is not a recognized option 18:50:24.795 [ERROR] [system.err]       at joptsimple.OptionException.unrecognizedOption(OptionException.java:108) 18:50:24.795 [ERROR] [system.err]       at joptsimple.OptionParser.handleLongOptionToken(OptionParser.java:510) 18:50:24.795 [ERROR] [system.err]       at joptsimple.OptionParserState$2.handleArgument(OptionParserState.java:56) 18:50:24.795 [ERROR] [system.err]       at joptsimple.OptionParser.parse(OptionParser.java:396) 18:50:24.795 [ERROR] [system.err]       at org.junit.platform.console.options.JOptSimpleCommandLineOptionsParser.parse(JOptSimpleCommandLineOptionsParser.java:38) 18:50:24.795 [ERROR] [system.err]       at org.junit.platform.console.ConsoleLauncher.execute(ConsoleLauncher.java:52) 18:50:24.795 [ERROR] [system.err]       at org.junit.platform.console.ConsoleLauncher.main(ConsoleLauncher.java:39) 18:50:24.795 [DEBUG] [org.gradle.process.internal.DefaultExecHandle] Changing state to: FAILED 18:50:24.795 [DEBUG] [org.gradle.process.internal.DefaultExecHandle] Process 'command 'C:\Program Files\Java\jdk1.8.0_102\bin\java.exe'' finished with exit value 1 (state: FAILED) 18:50:24.795 [DEBUG] [org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter] Finished executing task ':junitPlatformTest' 18:50:24.795 [LIFECYCLE] [class org.gradle.TaskExecutionLogger] :junitPlatformTest FAILED 18:50:24.795 [INFO] [org.gradle.execution.taskgraph.AbstractTaskPlanExecutor] :junitPlatformTest (Thread[Daemon worker,5,main]) completed. Took 0.31 secs. 18:50:24.795 [DEBUG] [org.gradle.execution.taskgraph.AbstractTaskPlanExecutor] Task worker [Thread[Daemon worker,5,main]] finished, busy: 6.06 secs, idle: 0.0 secs 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter] 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter] FAILURE: Build failed with an exception. 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter] 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter] * What went wrong: 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter] Execution failed for task ':junitPlatformTest'. 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter] > Process 'command 'C:\Program Files\Java\jdk1.8.0_102\bin\java.exe'' finished with non-zero exit value 1 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter] 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter] * Exception is: 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter] org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':junitPlatformTest'. 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:69) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:46) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.tasks.execution.PostExecutionAnalysisTaskExecuter.execute(PostExecutionAnalysisTaskExecuter.java:35) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:66) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:58) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:52) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:52) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:53) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:203) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:185) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.processTask(AbstractTaskPlanExecutor.java:66) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.run(AbstractTaskPlanExecutor.java:50) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor.process(DefaultTaskPlanExecutor.java:25) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter.execute(DefaultTaskGraphExecuter.java:110) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.execution.SelectedTaskExecutionAction.execute(SelectedTaskExecutionAction.java:37) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:37) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.execution.DefaultBuildExecuter.access$000(DefaultBuildExecuter.java:23) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.execution.DefaultBuildExecuter$1.proceed(DefaultBuildExecuter.java:43) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.execution.DryRunBuildExecutionAction.execute(DryRunBuildExecutionAction.java:32) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:37) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:30) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.initialization.DefaultGradleLauncher$4.run(DefaultGradleLauncher.java:153) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.internal.Factories$1.create(Factories.java:22) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:91) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:53) 18:50:24.795 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:150) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.initialization.DefaultGradleLauncher.access$200(DefaultGradleLauncher.java:32) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.initialization.DefaultGradleLauncher$1.create(DefaultGradleLauncher.java:98) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.initialization.DefaultGradleLauncher$1.create(DefaultGradleLauncher.java:92) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:91) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:63) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:92) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:83) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.exec.InProcessBuildActionExecuter$DefaultBuildController.run(InProcessBuildActionExecuter.java:99) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.tooling.internal.provider.ExecuteBuildActionRunner.run(ExecuteBuildActionRunner.java:28) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:48) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:30) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.exec.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:81) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.exec.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:46) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:52) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:37) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:26) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:34) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:74) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:72) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.util.Swapper.swap(Swapper.java:38) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.health.DaemonHealthTracker.execute(DaemonHealthTracker.java:47) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:60) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:72) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.health.HintGCAfterBuild.execute(HintGCAfterBuild.java:41) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:50) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:237) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter] Caused by: org.gradle.process.internal.ExecException: Process 'command 'C:\Program Files\Java\jdk1.8.0_102\bin\java.exe'' finished with non-zero exit value 1 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.process.internal.DefaultExecHandle$ExecResultImpl.assertNormalExitValue(DefaultExecHandle.java:367) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.process.internal.DefaultJavaExecAction.execute(DefaultJavaExecAction.java:31) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.tasks.JavaExec.exec(JavaExec.java:74) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:75) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.doExecute(AnnotationProcessingTaskFactory.java:228) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:221) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:210) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:621) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:604) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:80) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:61) 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter]        ... 68 more 18:50:24.811 [ERROR] [org.gradle.BuildExceptionReporter] 18:50:24.811 [LIFECYCLE] [org.gradle.BuildResultLogger] 18:50:24.811 [LIFECYCLE] [org.gradle.BuildResultLogger] BUILD FAILED ```  tested with gradle, gradlew, junit SNAPTSHOT and M2","closed","component: Platform,","sta-szek","2016-08-25T16:53:06Z","2016-12-04T10:41:13Z"
"","606","Fully document support for test interfaces","Documentation for #281 .  - Documented support for configuring extensions and tags in test interfaces via `@ExtendWith` and `@Tag`. - Documented support for declaring `@BeforeEach` and `@AfterEach` methods in test interfaces. Also included `@BeforeAll` and `@AfterAll` methods. - Documented support for declaring `@TestFactory` methods in test interfaces. - Run `gradle clean test` all test are passing. ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Jupiter,","dhilario","2016-12-18T09:03:54Z","2016-12-19T21:25:41Z"
"","244","Document TimingExtension example in the User Guide","Document (in `/documentation/src/docs/asciidoc/extensions.adoc`) how to implement `BeforeTestMethodCallback` and `AfterTestMethodCallback` extensions by demonstrating the implementation of the `TimingExtension` and its usage in `TimingExtensionTests`.","closed","theme: documentation,","sbrannen","2016-05-06T10:36:34Z","2016-06-12T18:05:34Z"
"","146","Introduce a plain-old JAR","Do you plan to package a ""plain-old JAR"" version of JUnit 5? See JUnit 4 https://github.com/junit-team/junit/wiki/Download-and-Install#plain-old-jar  Or is ""junit5-api-5.0.0-xyz.jar"" the designated standalone library?","closed","component: Vintage,","sormuras","2016-02-03T12:50:49Z","2017-02-04T15:31:19Z"
"","144","Introduce tools for @API annotation processing","Do something useful with `@API` annotations, e.g. - Extract all public APIs - Compare two versions of JUnit 5 for release notes - Check correct usage of APIs (internally and externally)","closed","","jlink","2016-02-01T13:25:19Z","2017-09-20T15:29:23Z"
"","210","Handle unparseable UniqueID consistently","Discovering tests via `UniqueIdSelector` and a string-based _unique ID_ that cannot be parsed by `UniqueId.parse()` is handled differently by each engine. Should be handled consistently in the launcher.  I see several options:  - Throw (subtype of) `JUnitException` when executing the request or when creating the selector instance - Ignore selector and log with warning  I'd prefer the first one since a syntactically wrong unique ID can only come from a bug by users of the launcher API. It's like violating a precondition.","closed","theme: diagnostics,","jlink","2016-03-18T08:20:49Z","2018-12-28T14:00:32Z"
"","107","Resolver-based discovery","Depends on #106 being done first.","closed","","jlink","2016-01-12T15:15:42Z","2016-04-29T11:42:02Z"
"","305","Brief Question About JUnit Internal Interface","Dear JUnit developers,  I am a master student at UFMG, Brazil. Currently, I am researching the use of internal interfaces by client projects. I mean, public interfaces for use only by internal modules (e.g., org.junit.internal.runners.statements.Fail).  In my research, I found 145 internal interfaces in JUnit (see the list at: [Internal Interfaces JUnit](https://www.dropbox.com/s/1n9azd2hyqxqd42/)). By mining data provided by the [Boa Language and Infrastructure](http://boa.cs.iastate.edu/), I also found 778 client projects that are using these internal interfaces. Therefore, these internal interfaces are usual in other projects. 1. Did you know that internal interfaces are used by clients? 2. From the presented interfaces, there is some interface that is a candidate to be promoted to the public one?","closed","","alinebrito","2016-06-11T19:53:58Z","2016-06-15T13:35:34Z"
"","709","Apply the 'java' plugin when the `JunitPlatformPlugin` is applied","Currently, the `JUnitPlatformPlugin` makes assumptions that the `'java'` plugin has been applied by looking at `sourceSets` and tasks that are created by it. If the `'java'` plugin is not applied, the configuration will fail during the `afterEvaluate`  This change makes it so that the `'java'` plugin is also applied.  ## Overview  * I'm not sure how this should be documented in the release notes  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Platform,","mkobit","2017-03-06T15:15:24Z","2017-04-18T14:37:46Z"
"","625","@TestFactory methods should evaluate ContainerExecutionCondition extensions instead of TestExecutionCondition extensions","Currently, `@TestFactory` nodes provide a `TestExtensionContext` and evaluate `TestExecutionConditions`. Since they are containers they should rather provide a `ContainerExtensionContext` and evaluate `ContainerExecutionConditions`.  ### Implementation Note  After changing this, `JupiterTestDescriptor` can implement `shouldBeSkipped` like this:  ```java @Override public final SkipResult shouldBeSkipped(JupiterEngineExecutionContext context) throws Exception {    return isContainer() ? shouldContainerBeSkipped(context) : shouldTestBeSkipped(context); } ```","closed","status: superseded,","marcphilipp","2017-01-07T20:55:35Z","2017-07-03T10:48:33Z"
"","207","Repeatable annotations are not discovered on superclasses","Currently, `@ExtendWith` (and any other repeatable annotation) is not detected on a superclass.  The root cause is that `AnnotationUtils.findRepeatableAnnotations()` simply ignores _indirectly present_ annotations (i.e., those that are `@Inherited`).","closed","type: bug,","sbrannen","2016-03-16T19:30:04Z","2016-03-16T19:41:18Z"
"","361","Update Store to use type-safe keys.","Currently the APIs for updating and removing values from `Store` was not type-safe. In 55175604801ada @sbrannen added methods so that you can avoid casts when getting the values, but the programmer still has to ensure that all of the places were a key is accessed uses the same type.  Instead, we can make the keys generic. In other words, we would create a key class that encapsulates two things: a key for getting the value and the type for the values.  One proposal would be to have a `Key` interface that just looks like this:  ``` public interface Key {} ```  Keys could be constructed like this:  ``` private static final Key KEY = Key.create(); ```  Then used like this:  ``` Long value = store.remove(KEY); ```  This works if you need a key that could be represented as a compile time constant. If you wanted the key to depend on a value type (for example, `Method`) we could provide a different API to create Keys:  ``` private static final KeySpace METHOD_START_TIMES = new KeySpace<>() {   @Override protected Long initialValue(Method key) {     return System.currentTimeMillis;   } };    ```  (named ""KeySpace"" because it is a namespace for keys)  A `KeySpace` would be used like this:  ``` Key key = METHOD_START_TIMES.keyFor(method); Long startTime = store.remove(key); ```  We could add methods to `Store` to make using a `KeySpace` even easier:  ``` Long startTime = store.remove(METHOD_START_TIMES, method); ```","closed","theme: extensions,","kcooney","2016-06-27T16:19:23Z","2019-07-19T19:33:04Z"
"","415","Test class with all test methods @Disabled shouldn't run @BeforeAll / @AfterAll methods","Currently the 5.0.0-M1 test class Methods annotated with `@BeforeAll` and `@AfterAll` are executed even if the Test class only contains `@Disabled` methods.  I would expect that those `@BeforeAll` and `@AfterAll` are only executed if there is work to do e.g. prepare an environment for tests and clean-up afterwards.  ``` java package demo;  import org.junit.jupiter.api.AfterAll; import org.junit.jupiter.api.AfterEach; import org.junit.jupiter.api.BeforeAll; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Disabled; import org.junit.jupiter.api.Test;  import static org.junit.jupiter.api.Assertions.assertTrue;  public class Junit5TestLifeCycleMethods {      @BeforeAll     static void beforeAll() {         System.out.println(""Before all"");     }      @BeforeEach     void beforeEach() {         System.out.println(""Before each"");     }      @AfterEach     void afterEach() {         System.out.println(""After each"");     }      @AfterAll     static void afterAll() {         System.out.println(""After all"");     }      @Test     @Disabled     void someTest() {         System.out.println(""run someTest"");         assertTrue(true);     }      @Test     @Disabled     void anotherTest() {         System.out.println(""run anotherTest"");         assertTrue(true);     } } ```  Outputs in idea:  ``` INFO: Discovered TestEngines with IDs: [junit-vintage, junit-jupiter] Empty test suite. Before all  Optional[void demo.Junit5TestLifeCycleMethods.anotherTest()] is @Disabled After all Process finished with exit code 0 ```  Maven Dependencies used:  ``` xml                                org.junit.jupiter             junit-jupiter-api             5.0.0-M1             test                                org.junit.vintage             junit-vintage-engine             4.12.0-M1               ```","closed","component: Jupiter,","thomasdarimont","2016-07-19T17:25:23Z","2018-09-22T15:07:29Z"
"","571","Discover @BeforeAll/@AfterAll on static interface methods","Currently static interface methods are not considered and thus the `@BeforeAll` / `@AfterAll` lifecycle annotations can not be used in interfaces. It would be possible to use reflection to find these methods, though.","closed","component: Platform,","nipafx","2016-11-17T22:32:34Z","2016-11-30T07:52:28Z"
"","22","Introduce method call level exception expected","Currently if we need to test some method is throwing an exception by following methods   @Test(expected=BalhException.class)  OR   @Test public void meTest() { int a = 10; int b = 20; Cat c = new Cat(); try{ c.talk() fail(""this is bad"") } catch(BalhException e) { //this is good } }  I prefer the 2nd option since there i can really tell that the point of failure is c.talk() method.   So I suggest a annotation for a method execution level tests which would look like following  @Test public void meTest() { int a = 10; int b = 20; Cat c = new Cat(); @MethodTest(expected=BalhException.class) c.talk()  }","closed","status: declined,","dinesh707","2015-11-30T12:14:27Z","2015-11-30T22:07:35Z"
"","344","Use runtime or run-time consistently in the user guide","Currently both run-time and runtime are used in the user guide.  Compile-time is consistent.  Two of the three references to execution time (without a hyphen) refer to the wall clock time of a lambda's execution (versus the use of run-time as a reference to the execution lifecycle?).  One of the uses of execution time refers to the period during which the method being timed is running.","closed","theme: documentation,","smoyer64","2016-06-21T18:46:13Z","2016-08-08T16:39:48Z"
"","118","ClassNameFilter should not be used on @Nested test classes","Currently a class name filter also filters out nested test classes. Since those are merely a means to structure the tests of a given test class, a test class filter should not be used on them.  This should probably hold for all filters derived from `ClassFilter`. Maybe `ClassFilter` should be renamed to `TopLevelClassFilter` or alike to reflect the narrower purpose.","closed","type: bug,","jlink","2016-01-16T15:10:56Z","2016-01-18T18:41:41Z"
"","486","DynamicTest.stream does not support checked exceptions","Currently `DynamicTest.stream` uses `java.util.function.Consumer` for the parameter to execute tests. This interface does not allow throwing checked exceptions. Thus, e.g., the following code will not compile:  ``` java     @TestFactory     Stream myCodeShouldDoSomethingUseful() {         return DynamicTest.stream(                 ImmutableList.of(                     new IndividualTestCase(""some data""),                     new IndividualTestCase(""some other data"")).iterator(),                 IndividualTestCase::toString,                 this::myCodeShouldDoSomethingUseful);     }      private void myCodeShouldDoSomethingUseful(IndividualTestCase testCase)             throws Exception {         throw new Exception(""This will fail"");     }      private static final class IndividualTestCase {         public IndividualTestCase(String data) {}     } ```  In analogy with `Executable`, it would be helpful to use a different functional interface for the test executor whose method throws `Throwable`. Thanks!","closed","component: Jupiter,","hovinen","2016-08-30T10:34:41Z","2016-11-30T08:48:56Z"
"","883","Add BeforeEachTemplating callback","Current `BeforeEachCallback` and `BeforeTestExecutionCallback` are invoked after ArgumentProvider finished. Would be either add more methods to the existing callbacks or to create a new callback that would run before the ArgumentProvider starts.  *Rationale*: in my extension I'd like to impact how the data is generated in the ArgumentProviders (I'm interested in `@MethodSource` in particular). So that it's possible to set the seed for randomization that happens in the `@MethodSource`.","closed","status: stale,","ctapobep","2017-06-11T20:20:55Z","2021-06-03T22:11:31Z"
"","205","New junit.org Website","Create new website: - More modern site generation, e.g. Jekyll - More modern, responsive layout - Split website in areas for JUnit4 and JUnit5","closed","","jlink","2016-03-16T10:13:05Z","2016-05-24T15:33:31Z"
"","290","Expose the ExtensionRegistry's registerExtension() method via the public API","Complex JUnit 5 extensions (as a library) will often depend upon multiple JUnit 5 `Extension` class definitions.  In cases where there are inter-dependencies, it would be nice to be able to programmatically register extensions as an addition to the declarative `@ExtendWith` annotation.  Here's an example from the upREST core project I'm working on.  If I were to declare each extension individually, the code would looks something like this:  ``` java @ExtendWith(StringEntityBodyResolver.class) @ExtendWith(StatusLineResolver.class) @ExtendWith(PerformanceResolver.class) public SomeRestTests { ```  Even if none of the test methods directly requests them as parameters, there are several other parameter resolvers that will be invoked (e.g. `HttpRequestResolver` and `HttpResponseResolver`).  Instead, what I'd like a user to declare is:  ``` java @ExtendWith(UpRest.class) public SomeRestTests { ```  As a workaround, I've created the UpRest class as a ParameterResolver, and it delegates to each of the individual parameter resolves as needed.  Since JUnit 5 is already iterating through a list of potential parameter resolvers for each parameter (using supports()), is seems like I'm repeating that functionality in UpRest.","closed","status: invalid,","smoyer64","2016-05-30T12:50:26Z","2016-05-30T13:58:41Z"
"","94","Change Preconditions.notNull() to throw NullPointerException","Change Preconditions.notNull() to throw NullPointerException instead of IllegalArgumentException. Also updated it to return the passed-in value.  I thought this might be controversial, so here's my thoughts:  According to Joshua Bloch in Effective Java, 2nd Edition, Item 60, ""If a caller passes null in some parameter for which null values are prohibited, convention dictates that NullPointerException be thrown rather than IllegalArgumentException.""  Throwing NPE in these cases is also quite common in the JDK. (see java.util.Collections for many examples).  The Guava Preconditions.checkNotNull() methods also throws a NPE.  Finally, if somehere someone deferences a null variable without checking it, a NPE would naturally be thrown. If we later add an explicit check, we wouldn't want the code to start throwing an IllegalArgumentException.","closed","","kcooney","2016-01-09T00:13:04Z","2016-01-27T21:29:51Z"
"","677","Vintage stores multiple failures using MultipleFailuresError","Change ota4jVersion to 1.0.0-SNAPSHOT because fix ota4j-team/opentest4j#34 is required for this to build succesfully.  Fix Vintage engine only storing and reporting only one in case of many failures as is the case when using JUnit4 ErrorCollector rule.  Use the new Immutable implementation of MultipleFailuresError to report the multiple failures.  Also fix AssertAll to use the new immutable MFE.  Resolves: #659 See also: ota4j-team/opentest4j#30, ota4j-team/opentest4j#33   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - ~Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes)~ Done in 0a4da4fd576705a9f6b3c1b748b09b9a1dfb7d32 - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Vintage,","gaganis","2017-02-23T06:34:45Z","2017-03-12T15:22:13Z"
"","547","Delete deprecated ClassFilter.includeClassNamePattern(String) and @IncludeClassNamePattern","Both `ClassFilter.includeClassNamePattern(String)` and `@IncludeClassNamePattern` were deprecated for M3 in #474. ## Deliverables - [x] Delete `ClassFilter.includeClassNamePattern(String)` - [x] Delete `@IncludeClassNamePattern` - [x] Update release notes","closed","component: Platform,","marcphilipp","2016-10-18T18:01:09Z","2017-01-11T16:43:39Z"
"","697","Change ConsoleLauncher execution result from int to summary","Before this commit, the result of `ConsoleLauncher#execute(...)` was reduced to an `int` primitive, the exit code used by `ConsoleLauncher#main`. That reduction limited the use of the `ConsoleLauncher` for integration tests, as the `TestExecutionSummary` created while executing wasn't passed to the calling test.  Now standard and error stream parsing tests may use of all methods defined in `TestExecutionSummary`, like:      assertEquals(2, new ConsoleLauncherWrapper().execute(args).getTestsFoundCount())  instead of former:      assertTrue(""captured out stream as string"".contains(""2 tests found""))  ## Overview  Please describe your changes here and list any open questions you might have.  ### TODO  - Rename `ExecuteTestsTask` ... there is no `ConsoleTask` anymore. Could stay for good. - Re-introduce `ConsoleTaskExecutor` to manage `PrintStream`s _out_ and _err_. - Move more integration tests from parsing text snippet to new feature. ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2017-02-28T19:25:19Z","2017-02-28T20:41:33Z"
"","43","Split TestDescriptor into two interfaces","Attempt at #33.   @junit-team/junit-lambda Please review and comment.","closed","","marcphilipp","2015-12-03T13:43:17Z","2015-12-03T15:52:52Z"
"","204","Allow Gradle plugin to support Android projects","At the moment, the `junit-gradle` plugin doesn't work on Android environments, since the handling of `SourceSet` containers and the general notion of the `runtime classpath` differ from plain Java, both syntactically and functionally. For instance, there is no [testRuntime configuration](https://github.com/junit-team/junit5/blob/master/junit-gradle/src/main/groovy/org/junit/gen5/gradle/JUnit5Plugin.groovy#L28) in Android projects, and the [testClasses task](https://github.com/junit-team/junit5/blob/master/junit-gradle/src/main/groovy/org/junit/gen5/gradle/JUnit5Plugin.groovy#L66) is missing as well.  I have [started working on Android support in my fork](https://github.com/aurae/junit5/blob/android/junit-gradle/src/main/groovy/org/junit/gen5/gradle/JUnit5Plugin.groovy), however that isn't done yet. Maybe one of you guys has already had Android support on their radar all along?  Thanks!","closed","theme: build,","mannodermaus","2016-03-15T10:21:14Z","2017-11-02T08:02:21Z"
"","130","Enhance catching expected exceptions in tests","At the moment one can catch expected exceptions in   ``` @Test(expected = IllegalArgumentException.class ```  Usually a more specific test wants to make assertions about the exceptions message or a cause.  What do you think about enhancing the Test-Annotation to be able to use the following assertions:  ``` @Test(expected = IllegalArgumentException.class, messageStartsWith = ""Error: argument invalid"") @Test(expected = IllegalArgumentException.class, message = ""Null not allowed here"")  ```  One could exactly match an exception message.  What do you think?","closed","status: invalid,","ottlinger","2016-01-20T20:08:20Z","2016-01-20T21:42:16Z"
"","587","Rename test methods not to start with `test` literal","At the current state, there're 1.281 `@Test` annotation usages in JUnit 5 testing code. 70 of the annotated methods do start with `test` literal. Namely: ``` AssumptionsDemo   testInAllEnvironments()   testOnlyOnCiServer()   testOnlyOnDeveloperWorkstation()  DisabledClassDemo   testWillBeSkipped()  DisabledTestsDemo   testWillBeExecuted()   testWillBeSkipped()  DisplayNameDemo   testWithDisplayNameContainingEmoji()   testWithDisplayNameContainingSpaces()   testWithDisplayNameContainingSpecialCharacters()  DynamicTestGenerationTests   testFactoryMethodIsCorrectlyDiscoveredForMethodSelector()   testFactoryMethodsAreCorrectlyDiscoveredForClassSelector()  ExceptionHandlingTests.FailureTestCase   testWithCheckedException()   testWithUncheckedException()  StandardTestClassTests   testsFailWhenAfterEachFails()   testsFailWhenBeforeEachFails()  StandardTestClassTests.TestCaseWithFailingAfter   test1()  StandardTestClassTests.TestCaseWithFailingBefore   test1()   test2()  TestCaseWithInheritanceTests.TestCase3   test3()  Class1WithTestCases   test1()  Class2WithTestCases   test2()  ClassWithStaticInnerTestCases.ShouldBeDiscovered   test1()  ClassWithStaticInnerTestCases.ShouldNotBeDiscovered   test2()  DiscoveryTests.LocalTestCase   test1()   test2()   test3()   test4()   test4(TestInfo)  HerTestClass     test7(String)  MyTestClass     test1()     test2()  OtherTestClass.NestedTestClass    test5()    test6()  TestCaseWithNesting    testA()  TestCaseWithNesting.NestedTestCase    testB()  TestCaseWithNesting.NestedTestCase.DoubleNestedTestCase    testC()  YourTestClass   test3()   test4()  BeforeAndAfterEachTests   testMethodThrowsAnException()  BeforeAndAfterEachTests.OuterTestCase   testOuter()  BeforeAndAfterEachTests.OuterTestCase.InnerTestCase   testInner()  BeforeAndAfterTestExecutionCallbackTests   testMethodThrowsAnException()  BeforeAndAfterTestExecutionCallbackTests.OuterTestCase   testOuter()  BeforeAndAfterTestExecutionCallbackTests.OuterTestCase.InnerTestCase   testInner()  TestExecutionExceptionHandlerTests.ATestCase   testConvert()   testRethrow()   testSeveral()   testSwallow()  TestInstancePostProcessorTests.OuterTestCase   testOuter()  TestInstancePostProcessorTests.OuterTestCase.InnerTestCase   testInner()  TestReporterParameterResolverTests   testResolve()   testSupports()  VerifierSupportForMixedMethodAndFieldRulesTests   testNothing()  WrongExtendWithForVerifierFieldTests   testNothing()  WrongExtendWithForVerifierMethodTests   testNothing()  JUnitPlatformProviderTests.TestClass1   test1()   test2()   test3()   test4()  JUnitPlatformProviderTests.TestClass2   test1()   test2()   test3()  RunListenerAdapterTests.TestClass   test1()  TestPlanScannerFilterTests.ClassWithDeeplyNestedTestClass.Level1.Level2.TestClass   test1()  TestPlanScannerFilterTests.ClassWithNestedTestClass.TestClass   test1()  TestPlanScannerFilterTests.ClassWithTestMethods   test1()   test2()  ExecutionListenerAdapterTests   testReportingEntryPublished()  LauncherFactoryTests   testCreate()  LauncherFactoryTests.JUnit5Example   testJ5() ```  Cleanup by removing `test` and lower-case new initial character? Where there's only a `1` (number) or `A` left, give it meaningful name.","closed","component: Vintage,","sormuras","2016-12-07T10:19:08Z","2016-12-09T02:04:11Z"
"","143","TestInfo should contain the list of tags of a test","At least I would expect such information there.","closed","theme: programming model,","schauder","2016-02-01T13:24:07Z","2016-03-01T11:06:16Z"
"","485","Introduce support for includeTags and excludeTags in the junit-platform-surefire-provider","As noted in #454, I've been working on a small change to JUnit 5's SurefireProvider that allows the usage of `includeTags` and `excludeTags` within the plugin configuration section of the Maven POM.  An example is as follows:  ``` xml      maven-surefire-plugin     2.19.1                           acceptance, integration                                         org.junit.platform             junit-platform-surefire-provider             ${junit.platform.version}                ```  I'll be submitting a related pull-request to the `junit5-samples` project that updates the POM and README files in addition to adding a couple of test classes that have tags.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","smoyer64","2016-08-29T19:01:58Z","2016-11-30T07:54:28Z"
"","580","Improve version display/selection in User Guide and Release Notes","As it stands the JUnit 5 project publishes a user guide (which is awesome, btw) with every milestone and also has a current one tracking master (so to speak). This is pretty cool but suffers from the problem that a lot of very similar texts exist that Google, SO, blogs and other sites index and link to in a pretty random fashion. User can easily get lost in a guide that does not apply to their version (which is hopefully current or the most recent milestone).  I have two ideas that could help users find their way around:  * Add a one-line banner that sticks to the top of the screen and announces which version this is for and whether it is the current one. Alternatively the current version could not have a banner (making the common case not annoying) and the dev version a differently styled (maybe colored) one. * Add a list to the guide (e.g. above ""1. Overview"") that links to all available versions, similarly to the drop-down box in [the Hibernate docs](http://hibernate.org/orm/documentation) (on the right).","closed","status: stale,","nipafx","2016-12-02T19:21:22Z","2022-07-12T23:11:02Z"
"","371","Introduce extension API for dynamic test generation","As it stands the creation of dynamic tests via test factory methods is, from a coding experience perspective, no improvement over simple looping:  ``` java     // should be executed for different points and distances     void testDistanceComputation(Point p1, Point p2, double distance) {         assertEquals(distance, p1.distanceTo(p2));     }      @Test     void testDistanceComputations() {         createTestData().forEach(testData ->              testDistanceComputation(datum.point1(), datum.point2(), datum.distance()));         }     }      @TestFactory     Stream testDistanceComputations() {         return DynamicTest.stream(             createTestData(),             datum -> ""Testing "" + datum,             datum -> testDistanceComputation(datum.point1(), datum.point2(), datum.distance()));     } ```  I see a couple of ways in which extensions could improve this situation but for that **an extension point for dynamic test generation** is needed.  My intuition is to create an extension interface, whose implementations must be registered on the test class and would be called at exactly the same point where `@TestFactory` is resolved now. They would have to return a stream of dynamic tests, which were then processed like those of test factories. Ideally `@TestFactory` would use the same mechanism.  This should give extensions plenty of room to create tests, especially parameterized ones, much more conveniently.  ## Related Issues  - #604 - #1444","closed","theme: dynamic tests,","nipafx","2016-06-30T20:27:44Z","2019-07-19T19:33:05Z"
"","853","Create extension point for ArgumentConverter","As it stands argument converters need to be applied (with `@ConvertWith`) either to a custom annotation (at least it looks like that; couldn't make it work) or to the argument. When the former is not an option (for example because you can't make it work :wink:), the latter quickly becomes repetitive.  An extension point that allows registering argument converters as the class and method level (much like parameter resolvers) would remedy this problem.  Beyond ease of use, this extension point would also enable creating more wholesome extensions which, applied to a test class, can register parameter resolvers, argument converters, post instance extensions, and more _all in one annotation_. It would also make it possible to do something like `@ConvertByCalling(""fromString"")` (either on class, method, or parameter), which would try to call a static method `fromString(String)` on the target type.  If you think this is a valuable feature, I'd like to take a shot at implementing it.","closed","status: stale,","nipafx","2017-05-16T07:18:44Z","2021-06-19T12:50:13Z"
"","466","Use java.nio.file.Path internally instead of java.io.File","As I discussed in https://github.com/junit-team/junit5/commit/4fa01d554e14069ee0655e7fad23a9b9ea6bc8b9#commitcomment-18607421, I think it's worth considering switching from using `java.io.File` in JUnit 5 classes to `java.nio.file.Path` and `java.nio.file.Files` instead, at least by default.  I realised that it's easy for inline comments in GitHub commits to get lost, so I decided to start an issue to continue this conversation.","closed","component: Platform,","jbduncan","2016-08-15T18:58:11Z","2016-08-31T10:54:26Z"
"","166","Proposal to enable @BeforeAll/@AfterAll in nested classes","As far as I can tell the reason to have nested test classes be static is that you usually want to build on the outer class(es)' structure and state. Unfortunately this bars the use of `@BeforeAll`/`@AfterAll` in nested classes. If it is considered beneficial to enable their use, the following could be a way to go: - Alternatively allow static nested classes. - Create a parameter injector that injects instances of the outer classes.  This might look as follows:  ``` java class Outer {      AwesomeClass unitUnderTest  ;      @Nested     static class InnerTest {          @BeforeAll         // 'Outer' instances can not be injected         // because it makes no sense to operate on them          static void initAll() {             // ...         }          @BeforeEach         // an 'Outer' instances is created;         // all '@BeforeEach' methods are run on/with;         // it is injected here         static void init(Outer outer) {             outer.unitUnderTest.prepareYourThing();         }          @Test         // same as with 'init'         static void testThatThing(Outer outer) {             outer.unitUnderTest.doYourThing();         }      }  } ```  Because this makes nested tests more verbose, it should be an alternative for the scenarios where it is direly needed. The default way to go would be non-static nested classes because the need for `@BeforeAll`/`@AfterAll` is comparatively rare (in my experience).","closed","component: Jupiter,","nipafx","2016-02-24T20:39:27Z","2020-10-01T18:33:16Z"
"","577","Adds DiscoveryCallbacks","As described in #354, this PR provides access to the test plan before it becomes immutable and facilitates the creation of extensions to process parametric tests as well as to guarantee test order.  See #354 for a much longer rationale.  Like others, I had shelved this concept until M3 was out but I'd like to participate in the discussion since parametric tests (via JUnitParams) are one of my favorite patterns and I've been waiting for this ability in upREST.  This extension point is extremely powerful and therefore also dangerous.  I'd be happy to review other ways that parametric, ordered, scenario, theories tests might work and there's definitely value in only having one supported mechanism for each.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","smoyer64","2016-11-30T20:59:21Z","2019-07-19T19:33:06Z"
"","462","Allow extensions to register TestExecutionListeners","As best I can tell, if I want to register a custom TestExecutionListener I have to go through the motions of creating a new test engine, launcher, etc., when I'd rather just have an ExtendsWith extension that can listen to test execution from one of the stock engines.  Specifically, I'd like to intercept ReportEntry's as they are published so I can process them further.","closed","component: Platform,","lewisb42","2016-08-13T14:53:52Z","2017-02-28T22:16:19Z"
"","543","Always evaluate all TestExecutionConditions","As a part of extension model TestExecutionCondition is described as :   > TestExecutionCondition defines the Extension API for programmatic, conditional test execution. > A TestExecutionCondition is evaluated to determine if a given test should be executed based on the supplied TestExtensionContext.  First. Description does not say that in case when there are more than one TestExecutionCondition - extension are used the actual evaluation is executed till first DIsabled status is returned. Later I found it in source code - but it is not obvious from interface point of view.  This feature causes some unwelcome effects   Example Ignore and IgnoreByCondition all are Extended with  ContainerExecutionCondition subclasses  ``` java     @Test     @Ignore     @IgnoreByCondition     void jupiterTest() {          // throw new IllegalStateException();     } ```  in this case method of  IgnoreByCondition extension methods    ConditionEvaluationResult evaluate(TestExtensionContext context)    ConditionEvaluationResult evaluateIfAnnotated(ExtensionContext context)   are not called at all.  ``` java     @Test     @IgnoreByCondition     @Ignore     void jupiterTest() {          // throw new IllegalStateException();     } ```  in this case  method for Ignore extension are not called  Second. Method getClass().getAnnotations() does not say about returned annotation order   it means that the order can be changed from run to run of VM or from version to version. if the code is based (or one day will be based) on this feature the evaluation order may change. As result after the extension that returns `Disabled` no evaluations will be invoked.  For instance getClass().getDeclaredFields() tells not to rely on returned order when getClass().getAnnotations()  says nothing about that.  Third. Sometimes it is needed not only return calculated result but also save some state  (via getStore()....) or by other means (not appreciated).  In current model it is not always possible - state will not be saved - for no methods are called.  I Suggest doing full evaluation - invoke methods of all TestExecutionCondition extensions even though the final result is clear on previous ones.   This will kill two (three) birds with one stone.","closed","component: Jupiter,","SqAutoTestTeam","2016-10-12T13:18:45Z","2016-10-22T11:34:00Z"
"","617","Problems with 5.0.0-M3 when using snapshot repositories","Apparently the artifacts `junit-jupiter-api` and `junit-jupiter-engine` are published in version `5.0.0-M3` on Maven central as well as the Sonatype snapshot repository `https://oss.sonatype.org/content/groups/public/`. This seem to cause problems when both repositories are used at the same time. When I add the Sonatype snapshot repository (because I need it for a different library) and try to execute `junitPlatformTest` using Gradle, I get the following exception:  ``` Exception in thread ""main"" java.lang.NoSuchMethodError: org.junit.platform.engine.TestEngine.getGroupId()Ljava/util/Optional;         at org.junit.platform.launcher.core.ServiceLoaderTestEngineRegistry.computeAttributes(ServiceLoaderTestEngineRegistry.java:48)         at org.junit.platform.launcher.core.ServiceLoaderTestEngineRegistry.createDiscoveredTestEnginesMessage(ServiceLoaderTestEngineRegistry.java:38)         at org.junit.platform.launcher.core.ServiceLoaderTestEngineRegistry.lambda$loadTestEngines$0(ServiceLoaderTestEngineRegistry.java:31)         at org.junit.platform.launcher.core.ServiceLoaderTestEngineRegistry$$Lambda$7/1685538367.get(Unknown Source)         at java.util.logging.Logger.log(Logger.java:808)         at java.util.logging.Logger.info(Logger.java:1597)         at org.junit.platform.launcher.core.ServiceLoaderTestEngineRegistry.loadTestEngines(ServiceLoaderTestEngineRegistry.java:31)         at org.junit.platform.launcher.core.LauncherFactory.create(LauncherFactory.java:53)         at org.junit.platform.console.tasks.ExecuteTestsTask$$Lambda$2/815033865.get(Unknown Source)         at org.junit.platform.console.tasks.ExecuteTestsTask.executeTests(ExecuteTestsTask.java:58)         at org.junit.platform.console.tasks.ExecuteTestsTask.lambda$execute$0(ExecuteTestsTask.java:54)         at org.junit.platform.console.tasks.ExecuteTestsTask$$Lambda$4/1146743572.call(Unknown Source)         at org.junit.platform.console.tasks.CustomContextClassLoaderExecutor.invoke(CustomContextClassLoaderExecutor.java:33)         at org.junit.platform.console.tasks.ExecuteTestsTask.execute(ExecuteTestsTask.java:54)         at org.junit.platform.console.tasks.ConsoleTaskExecutor.executeTask(ConsoleTaskExecutor.java:38)         at org.junit.platform.console.ConsoleLauncher.execute(ConsoleLauncher.java:54)         at org.junit.platform.console.ConsoleLauncher.main(ConsoleLauncher.java:39) ```  Is there any special reason, why the artifacts are published at the Sonatype snapshot repository?","closed","status: works-as-designed,","janschaefer","2016-12-26T12:01:22Z","2016-12-26T17:51:07Z"
"","624","Ant build support implementation for the JUnit Platform","Ant build support implementation for the JUnit Platform for #512 with documentation patterned from JUnit Gradle plugin.  If acceptable, I may be able to submit a PR for junit samples.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","dhilario","2017-01-06T14:31:20Z","2018-02-16T11:53:20Z"
"","390","Regression: Extension must not be registered if already registered for parent context","An extension that is applied to the test class as well to a test method therein gets called twice. As far as I can tell, this behavior was different in the alpha version.  In my scenario this had undesired consequences and came as a surprise (I expected it to be called once), so I was initially sure it was a bug. After thinking about it for a while I'm not so sure any more. Maybe there is a use case for this?  More abstract this begs the question of the extension semantics. Does it mean ""call this extension at the implemented extension points"" (then repeated calls make sense) or does it mean ""activate this extension for the implemented extension points"" (in which case it should be idempotent). ## Example  ``` java public class DoubleCallback implements BeforeTestExecutionCallback {      @Override     public void beforeTestExecution(TestExtensionContext context) throws Exception {         System.out.println(""Before "" + context.getDisplayName());     }  }  @ExtendWith(DoubleCallback.class) class DoubleCallbackTest {      @Test     @ExtendWith(DoubleCallback.class)     void test() { }  } ```  Output:  ``` Before test() Before test() ``` ## Deliverables - [x] Add tests for the previous behavior. - [x] Fix the regression. - [x] Document semantics regarding parent and child extension contexts in the User Guide.","closed","theme: programming model,","nipafx","2016-07-10T20:30:14Z","2016-07-11T11:51:09Z"
"","725","Replace AtomicInteger with int in TestTemplateTestDescriptor.execute()","An atomic integer is not really required to count the invocationIndex. A local int variable should shuffice. Rewrite using java5 for-each and while loop instead of lambdas to remove the need for an effectively final mutable number.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","status: works-as-designed,","gaganis","2017-03-11T17:18:15Z","2017-03-12T18:24:48Z"
"","28","Experiment with alternative approach for Callbacks for @Before/@After","Alternative solution for `pre`/`post` callbacks.","closed","","marcphilipp","2015-12-02T14:34:57Z","2015-12-11T11:58:12Z"
"","4","Switch to Google style","Also for Issue #2, this is the same as PR #3, but with an extra commit which uses the Google style rules.  Personally I'm not a huge fan of the Google styleguide, but to each their own :)","closed","","nedtwigg","2015-10-26T07:08:37Z","2015-11-16T15:55:48Z"
"","81","Clean up integrated engine tests","All subclasses of `AbstractJUnit5TestEngineTests` in org.junit.gen5.engine.junit5: - [x] Detect and remove duplication - [x] Migrate to JUnit5","closed","","jlink","2015-12-29T14:45:37Z","2016-01-13T14:18:08Z"
"","496","Provide consistent Precondition behavior for arrays and collections","After reading @sbrannen comment in #493 I had a look at the `Preconditions` class. Currently the implementation of `notNull(Object[])` checks that the array reference is not null and that the array does not contain any null values. The counterpart for Collections is `notEmpty(Collection)`, which checks that the given collection is not null and that it is not empty.  Looking at for example the`TagsFilter` class and how it checks its input parameters:  ``` java public static PostDiscoveryFilter excludeTags(String... tags) {     Preconditions.notNull(tags, ""tags must not be null"");     return excludeTags(asList(tags)); }  public static PostDiscoveryFilter excludeTags(List tags) {     Preconditions.notEmpty(tags, ""tags must not be null or empty"");     return descriptor -> FilterResult.includedIf(trimmedTagsOf(descriptor).noneMatch(tags::contains)); } ```  We can conclude that:  | Method call | Result | | --- | --- | | `excludeTags(null)` | Exception | | `excludeTags((String[]) null)` | Exception | | `excludeTags(new String[0]())` | okay | | `excludeTags(Collections.singletonList(null))` | okay | | `excludeTags((List) null)` | Exception | | `excludeTags(Collections.emptyList())` | Exceptions |  My proposal here would be to introduce new methods: - `Preconditions.noneNull(Collection)` - `Preconditions.noneNull(Object[])`  These would check that the reference is not null, that the collection/array does not contain any null reference and that the collection/array is not empty. The last check does not really match the method name but I can't think of a better name right now...","closed","component: Platform,","britter","2016-09-06T19:29:39Z","2016-10-05T14:17:38Z"
"","434","Consider determining line number information for dynamic tests and adding it to ClassTestSource","After #406 has been resolved we should consider determining line number information for dynamic tests in JUnit Jupiter as described there. For that we need to measure the performance impact and take an informed decision. We could also make this an opt-in feature via a configuration parameter.","closed","status: stale,","marcphilipp","2016-07-25T13:34:39Z","2021-06-19T12:50:12Z"
"","71","Testing package dependencies with Degraph","Adds a test that tests for dependency cycles on package an module level.  Modules in this sense are all classes that start with the same package: org.junit.gen5.x  In order to make the test pass I had to break to dependencies from test to the JUnit5TestEngine. Since the engine wasn't really part of the test, I replaced it with a mock.  I agree to https://github.com/junit-team/junit-lambda/blob/master/CONTRIBUTING.md","closed","","schauder","2015-12-19T09:49:44Z","2015-12-21T19:29:11Z"
"","262","Issue 225: Mention UpForGrabs in Readme","Adds a brief ""Contributing"" paragraph to the README including a link to the CONTRIBUTING document, the issue tracker and the ""up-for-grabs"" filtered issues.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","smoyer64","2016-05-13T14:04:40Z","2016-05-13T14:24:30Z"
"","417","Concurrency issues when adding/registering dynamic tests","Adding `TestDescriptor` children concurrently causes some children to be abandoned: `AbstractTestDescriptor.children` is a `LinkedHashSet`. `TestPlan` also has concurrency issues (e.g. `allIdentifiers` is a `LinkedHashMap`).  This causes issues with dynamic tests, etc. add/registered in parallel with calls to `TestDescriptor.addChild(TestDescriptor)` and calls to `EngineExecutionListener.dynamicTestRegistered(TestDescriptor)`.","closed","theme: concurrency,","mfulton26","2016-07-21T21:42:43Z","2016-07-22T19:27:21Z"
"","306","Document Timing Extension example for test execution callbacks","Added a paragraph to the extensions.adoc describing how to implement before- and after-execution callbacks, using the TimingExtension and TimingExtensionTests examples.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","ghost","2016-06-12T09:05:17Z","2016-06-12T18:05:05Z"
"","3","Enforce style rules using Spotless","Added [Spotless](https://github.com/diffplug/spotless), a Gradle plugin that checks and enforces style rules, to help with #2.  There are lots of tools that can alert you to files that don't match the style rules.  Spotless is unique in that it can also automatically apply them.  This makes it really easy for contributors to format their work correctly, while also ensuring that the project history isn't polluted by dirty whitespace.  `spotlessCheck` is added as a dependency to `build`, and it alerts the user if any files don't meet the formatting rules.  If there are any formatting errors, `spotlessApply` will fix them.  Includes rules for Java source code and project metadata.  For this PR, I found rules that closely matched the existing format.  In a follow-up PR, I'll apply the Google style rules (personally I dislike the Google style, but so long as a project provides a formatter such as Spotless, it doesn't matter what the project uses, because I can always convert back and forth when submitting commits).","closed","","nedtwigg","2015-10-26T07:05:05Z","2015-11-16T15:55:48Z"
"","458","Integrate with Gradle Build Scans","Add the new Gradle Build Scan to the JUnit 5 build. The results can then be linked from gradle.com.  See: https://scans.gradle.com/setup/step-1 ## Deliverables - [x] Add the new Gradle Build Scan to the JUnit 5 build. - [x] Link to a build scan results page from the JUnit 5 README.","closed","theme: build,","mmerdes","2016-08-11T15:12:11Z","2016-08-28T04:56:56Z"
"","1","Simple exception testing using lambdas","Add something like it was proposed in junit-team/junit#1055.","closed","","marcphilipp","2015-01-17T18:56:13Z","2015-11-16T15:55:48Z"
"","140","Release Notes for 5.0 Alpha","Add release notes to documentation.","closed","type: task,","jlink","2016-01-28T07:44:31Z","2016-02-01T08:56:07Z"
"","897","example of multiple assertions in one codeblock","Add example of multiple assertions in one code block. Can be used for dependent assertions. Based on issue #896.","closed","component: Jupiter,","FilipJirsak","2017-06-23T13:46:02Z","2017-06-23T14:18:54Z"
"","128","Integrated ExtensionContext.getStore","According to team decision today. Parameter order was changed as requested.","closed","","jlink","2016-01-19T14:47:02Z","2016-01-19T14:47:52Z"
"","389","Use assertThrows instead of expectThrows in User Guide","According to our own documentation `assertThrows` should be used if the test does not deal with the return value of `expectThrows`.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","stefanbirkner","2016-07-10T19:09:02Z","2016-07-13T20:12:11Z"
"","455","Allow non-static methods to be annotated by @BeforeAll and @AfterAll","According to documentation methods annotated by @BeforeAll and @AfterAll must be static.  TestNG equivalents @BeforeClass and @AfterClass do not have such restriction.  We usually use Spring in our tests so static methods are not much helpful as we cannot work with injected beans.  Even without Spring, I don't like if framework forces me to write static methods.  If possible, allow both static (for backward compatibility) and non-static methods to be annotated by @BeforeAll and @AfterAll.","closed","status: duplicate,","ondrejlerch","2016-08-11T08:58:21Z","2016-08-22T12:28:35Z"
"","106","Create a builder for unique ID paths","A unique ID should be built in parts, e.g.  `[engine: junit5]/[package:org]..../[class:MyClass]/[method:test1()]`  Implement in branch for team review.   Prerequisite for #107","closed","type: enhancement,","jlink","2016-01-12T15:14:31Z","2016-03-11T16:30:33Z"
"","159","Consider adding a means for annotations to require an extension","A pattern that I see from time to time when using (JUnit 4) rules is that there is a _tagging_ annotation which is evaluated by a corresponding rule at runtime. For example [@RunInThread](https://gist.github.com/fappel/65982e5ea7a6b2fde5a3) or [@ConditionalIgnore](https://gist.github.com/rherrmann/7447571).  In both cases, annotating a test method without having the corresponding rule wouldn't make sense but there is nothing either to help the user discover this relation.  While playing around with JUnit 5 and expreimentally migrating those rules to use extensions, I thought it would be useful to be able to express that an annotation depends on a certain extension being present.  For example, if there was a `@RequiresExtension` annotation, the `DisabledWhen` annotation could express that it needs a `DisabledWhenExtension` to be present at runtime.  ``` Java  @RequiresExtension( DisabledWhenExtension.class ) @interface DisabledWhen {   // ... }  class SomeTest {   @Test   @DisabledWhen( ... )   void disabledUnderCertainConditions() {   } } ```  ... and when running the above test, the execution engine could let it fail with a clear error message.  Do you think this pattern is common enough to consider having a means to declare such dependency?","closed","status: invalid,","rherrmann","2016-02-16T14:48:37Z","2016-02-18T14:40:20Z"
"","523","@BeforeEach & @AfterEach methods are not invoked using extensions registered at the test method level","A ParameterResolver, which is configured at test-method-level, is not used for the corresponding BeforeEach-method.  Given this test class:  ``` java public class DummyTest {      @BeforeEach     public void setUp(MyParameter param) {         System.out.println(""setUp with "" + param.value);     }      @Test     @ExtendWith(FirstParameterResolver.class)     public void firstTest(MyParameter param) {         System.out.println(""running with "" + param.value);     }      @Test     @ExtendWith(SecondParameterResolver.class)     public void secondTest(MyParameter param) {         System.out.println(""running with "" + param.value);     }      // inlined for completeness      static class MyParameter {          public String value;          public MyParameter(String value) {             this.value = value;         }      }      static class FirstParameterResolver implements ParameterResolver {          @Override         public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {             return true;         }          @Override         public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {             return new MyParameter(""FirstParameterResolver"");         }      }      static class SecondParameterResolver implements ParameterResolver {          @Override         public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {             return true;         }          @Override         public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {             return new MyParameter(""SecondParameterResolver"");         }      }  } ```  I expected this output:  ``` setUp with FirstParameterResolver running with FirstParameterResolver setUp with SecondParameterResolver running with SecondParameterResolver ```  but got: org.junit.jupiter.api.extension.ParameterResolutionException: No ParameterResolver registered for parameter [mypackage.DummyTest$MyParameter arg0] in executable [public void mypackage.DummyTest.setUp(mypackage.DummyTest$MyParameter)]  I also tried to add a @ExtendWith to my BeforeEach-method, but this results in the same exception.","closed","component: Jupiter,","rweisleder","2016-09-26T12:16:15Z","2016-11-30T08:37:54Z"
"","175","Simplify TestSource Class","`TestSource` with its two concrete implementations is difficult to use since a cast to one of the implementations is required. I suggest to merge the interface and the two subclasses into a single interface with subclasses as needed along the following lines:  ``` public interface TestSource extends Serializable {    SourceType getType();    Optional> getJavaClass();    Optional getJavaMethod();    Optional getFileOrDirectory();    Optional getFilePosition();    enum SourceType { JavaClass, JavaMethod, Directory, File, FilePosition } } ```","closed","type: task,","jlink","2016-03-09T20:32:19Z","2016-05-13T16:46:12Z"
"","519","Container successful, even if tests failed.","`TestExecutionListener`s receive a successful container finish status, even if it contained a failing test. Should a container report also as `FAILED` if it has more than zero failed tests?  See https://travis-ci.org/sormuras/beethoven/builds/161083042 Line 766 points to a failing test, line 872 is the end of the enclosing container, which reports a successful execution.","closed","","sormuras","2016-09-19T16:41:57Z","2016-09-27T18:00:46Z"
"","17","Introduce support for type information in TestExecutionContext","`TestExecutionContext` is hierarchical, and currently there are _""engine""_, _""class""_, and _""method""_ context types.  However, once context is created, there is no simple indication of which type it is.  I think it would be better that `TestExecutionContext` would have some API that can easily distinguish context type.  Implementation may be: - keep `TestDescriptor` which is passed at constructor of `DescriptorBasedTestExecutionContext`, then user can do  `context.getDescriptor() instanceof ClassTestDescriptor`. - or, can have `getContextType()` method that returns simple enum such like:  ``` java public enum TestExecutionContextType {   ENGINE, CLASS, METHOD } ```","closed","theme: extensions,","ttddyy","2015-11-26T08:11:26Z","2016-02-02T20:10:20Z"
"","392","Introduce DiscoverySelector for ""fully qualified method name"" with method parameters","`org.junit.platform.commons.util.ReflectionUtils#loadMethod` assumes that methods don't declare arguments (see #331), but in the injected case it could declare `TestInfo`, like:  ``` java import org.junit.jupiter.api.Test; import org.junit.jupiter.api.TestInfo;  class FirstTest {     @Test     void myFirstTest(TestInfo testInfo) {} } ```  If I start `myFirstTest` and then invoke `DiscoverySelectors.selectNames(Arrays.asList(""FirstTest#myFirstTest""))`, it finds nothing. ## Related Issues - #331   - #332","closed","component: Platform,","akozlova","2016-07-11T14:57:56Z","2016-11-30T08:56:20Z"
"","576","Gradle plugin JUnitPlatformExtension.platformVersion should default to plugin version","`JUnitPlatformExtension.platformVersion` is defined as ""1.+"" (dynamic version style, the most relevant documentation seems to be https://docs.gradle.org/current/userguide/dependency_management.html#sub:dynamic_versions_and_changing_modules and https://docs.gradle.org/current/userguide/dependency_management.html#sec:controlling_caching).  When building the project which uses JUnit5 Gradle plugin, Gradle will check whether `org.junit.platform:junit-platform-launcher` and `org.junit.platform:junit-platform-console` dependencies for `junitPlatform` configuration have updates. There is a small performance impact to do that, which is negligible when using default resolution strategy (recheck every 24 hours), but it can become quite noticeable if the project uses custom dependency resolution strategy with smaller cache period, in the worst case causing dependency update check on every build.  Another issue with dynamic version is that it introduces some variability into the build process when future updates to `junit-platform-launcher` and `junit-platform-console` can cause the build to fail even if the project itself has not been changed.  One can solve both of these issues by explicitly setting `junitPlatform.platformVersion` in their gradle.build to the version of `junit-platform-gradle-plugin` used (or to some other fixed value).  Please consider changing the default value of `JUnitPlatformExtension.platformVersion` to the version of the plugin so that the default behavior is more predictable, and explicit configuration with dynamic version range or some other specific version not matching the plugin's is needed only if really required by the user, not the other way around.  ## Related Issues  - #609","closed","component: Platform,","estekhin","2016-11-29T13:58:49Z","2018-02-18T14:20:58Z"
"","132","Clean up package structure in junit5-engine","`JUnit5TestEngine` in top-level is ok since it's the only public entry point.  But: the diverse packages make not really sense as they are, and should be restructured. E.g. since test descriptors are also responsible for execution, splitting in `discovery` and `execution` might not be the best split.","closed","type: task,","jlink","2016-01-22T09:18:16Z","2016-02-04T15:42:18Z"
"","646","Namespace potential collisions","`ExtensionContext.Namespace` is implemented via a `Set`/`HashSet`. This allows for two namespaces to easily collide: ```java @Test void test() { 	assertNotEquals(Namespace.create(""a"", ""b""), Namespace.create(""b"", ""a"")); } ``` Intuitively namespaces should nest, meaning the above two are expected to be different. This can be easily fixed by using a List in the impl.  I'm using  https://oss.sonatype.org/content/repositories/snapshots/org/junit/jupiter/junit-jupiter-api/5.0.0-SNAPSHOT/junit-jupiter-api-5.0.0-20170207.113945-373.jar","closed","theme: programming model,","TWiStErRob","2017-02-11T18:02:19Z","2017-02-28T21:00:43Z"
"","400","Support classpath scanning within JAR files","`DiscoverySelectors.selectPackage` does not currently work with packages within JAR files.  This commit resolves this issue by traversing the entries within a match, if it is a JAR file, and adding the candidate classes for discovery.   Issue: #399  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","nilsga","2016-07-14T07:14:38Z","2016-11-30T08:49:08Z"
"","706","Publish pruneTree() in junit-platform-engine support package","`DiscoverySelectorResolver.pruneTree()` is something that all test engines should do in order to not have empty packages. I see two options: 1. Publish pruneTree() in junit-platform-engine support package for all engines to use 2. Do it for all engines automatically after collecting their discovery result  Since I cannot think of a reason to not prune a branch without executable tests I'd vote for the latter.","closed","","jlink","2017-03-06T11:32:27Z","2018-03-16T14:38:54Z"
"","399","Support classpath scanning within JAR files","`DiscoverySelector.selectPackage` does not work when the package resides within a jar file. This is due to https://github.com/junit-team/junit5/blob/master/junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClasspathScanner.java#L122, since `listFiles` does not work for a ""folder"" within a jar file.","closed","component: Platform,","nilsga","2016-07-14T05:38:26Z","2016-11-30T08:47:56Z"
"","89","Executable.execute() should allow throwing Throwable","`Assertions.assertThrows()` also allows for `Throwable` classes to be checked for: https://github.com/junit-team/junit-lambda/blob/8a6a13c58d9e4a5f734037cdb088902364d1ba43/junit5-api/src/main/java/org/junit/gen5/api/Assertions.java#L204  Thus, `Throwable` must be the declared type on this `execute()` method.  This is particularyl interesting for Scala usage, where (I believe) exceptions derive from `Throwable`, not from `Exception`","closed","","lukaseder","2016-01-06T09:51:45Z","2016-01-09T21:40:06Z"
"","375","Make @API annotation available via Java reflection","`API` annotation could be retrieved from byte code (e.g. by using `org.reflections`), however it would be much more convenient (for #144) to retrieve annotations via _Java Reflection_.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","volkovs","2016-07-03T18:31:09Z","2016-07-25T18:25:27Z"
"","554","Gradle: Wrap engines and tags in filters extension/closure","```groovy junitPlatform {     ...     selectors {         ...     }     filters {         engines {             include 'junit-jupiter'             // exclude 'junit-vintage'         }         tags {             include 'fast', 'smoke'             // exclude 'slow', 'ci'         }             includeClassNamePattern '.*Tests'     } } ```","closed","theme: discovery,","marcphilipp","2016-11-01T18:08:08Z","2016-11-30T08:17:50Z"
"","203","InstancePostProcessor should return test instance","``` public interface InstancePostProcessor extends ExtensionPoint {         /** Return the original or a wrapped instance of the test object */     Object postProcessTestInstance(TestExtensionContext context) throws Exception; } ```  This seems to be necessary for PowerMock extension (see #201).   @junit-team Any objections?","closed","theme: extensions,","jlink","2016-03-14T15:31:20Z","2016-04-29T11:53:20Z"
"","882","TestReporter fails on numeric map keys","``` package io.github.deen13;  import java.util.Map;  import org.junit.jupiter.api.Test; import org.junit.jupiter.api.TestReporter;  class TestReporterTest {      @Test     void testCase(TestReporter testReporter) {         Map map = Map.of(1, ""one"", 2, ""two"", 3, ""three"");          System.out.println(map);         testReporter.publishEntry(map);     }  } ```   Fails with:  ``` JUnit Jupiter:TestReporterTest:testCase(TestReporter)     MethodSource [className = 'io.github.deen13.TestReporterTest', methodName = 'testCase', methodParameterTypes = 'org.junit.jupiter.api.TestReporter']     => java.lang.ClassCastException: java.base/java.lang.Integer cannot be cast to java.base/java.lang.String ```   Where alphabetic keys working fine","closed","","deen13","2017-06-10T20:58:51Z","2017-06-10T21:03:24Z"
"","565","Classpath scanner should not load JDK 9 module-info.class","``` java.lang.NoClassDefFoundError: java/jnlp/module-info (wrong name: module-info)  at java.lang.ClassLoader.defineClass1(java.base@9-ea/Native Method)  at java.lang.ClassLoader.defineClass(java.base@9-ea/ClassLoader.java:941)  at java.security.SecureClassLoader.defineClass(java.base@9-ea/SecureClassLoader.java:150)  at jdk.internal.loader.BuiltinClassLoader.defineClass(java.base@9-ea/BuiltinClassLoader.java:554)  at jdk.internal.loader.BuiltinClassLoader.access$200(java.base@9-ea/BuiltinClassLoader.java:89)  at jdk.internal.loader.BuiltinClassLoader$3.run(java.base@9-ea/BuiltinClassLoader.java:467)  at jdk.internal.loader.BuiltinClassLoader$3.run(java.base@9-ea/BuiltinClassLoader.java:461)  at java.security.AccessController.doPrivileged(java.base@9-ea/Native Method)  at jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(java.base@9-ea/BuiltinClassLoader.java:460)  at jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(java.base@9-ea/BuiltinClassLoader.java:407)  at jdk.internal.loader.BuiltinClassLoader.loadClass(java.base@9-ea/BuiltinClassLoader.java:365)  at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(java.base@9-ea/ClassLoaders.java:186)  at java.lang.ClassLoader.loadClass(java.base@9-ea/ClassLoader.java:419)  at org.junit.platform.commons.util.ReflectionUtils.loadClass(ReflectionUtils.java:330)  at org.junit.platform.commons.util.ClasspathScanner.processClassFileSafely(ClasspathScanner.java:154)  at org.junit.platform.commons.util.ClasspathScanner.lambda$findClassesForPath$3(ClasspathScanner.java:139)  at org.junit.platform.commons.util.ClassFileVisitor.visitFile(ClassFileVisitor.java:40)  at org.junit.platform.commons.util.ClassFileVisitor.visitFile(ClassFileVisitor.java:24)  at java.nio.file.Files.walkFileTree(java.base@9-ea/Files.java:2695)  at java.nio.file.Files.walkFileTree(java.base@9-ea/Files.java:2767)  at org.junit.platform.commons.util.ClasspathScanner.findClassesForPath(ClasspathScanner.java:139) ```  Initially reported https://youtrack.jetbrains.com/issue/IDEA-163795","closed","component: Platform,","akozlova","2016-11-10T14:46:04Z","2016-11-30T07:53:06Z"
"","579","Support tag-specific Gradle tasks","_(This is a question I asked on [StackOverflow](http://stackoverflow.com/questions/40891867/junit5-tag-specific-gradle-task) – I am filing this issue as requested by @sbrannen)_  I use the following annotation to tag my integration tests:  ```java @Target({ ElementType.TYPE, ElementType.METHOD }) @Retention(RetentionPolicy.RUNTIME) @Tag(""integration-test"") public @interface IntegrationTest { } ``` This is the filter I use in build.gradle to exclude these tests from gradle build:  ```groovy junitPlatform {     filters {         tags {             exclude 'integration-test'         }     } } ``` So far, so good.  Now I would like to offer a Gradle task which specifically runs my integration tests – what's the recommended approach?","closed","3rd-party: Gradle,","netzwerg","2016-12-01T13:54:32Z","2018-03-16T14:15:01Z"
"","70","Issue57 extensible reporting","@jlink and i prepared the pull request for the infrastructural aspects of a generic reporting facility. the reporting entries are currently of type Map but will be replaced by a dedicated value object. please review and provide feedback.","closed","","mmerdes","2015-12-17T14:50:09Z","2016-01-14T15:10:08Z"
"","69","Decide about how to handle static nested classes and implement it","@bechte brought this up in our last Skype call.  ``` java class Foo {     class Bar {     } } ```  should be handled differently than  ``` java class Foo {     static class Bar {     } } ```  --- - [x] Introduce test that checks that private static nested classes are not discovered via classpath scanning but non-private static nested classes are.","closed","","marcphilipp","2015-12-16T20:29:07Z","2016-01-11T17:13:49Z"
"","24","Prepare repository for alpha phase","1. [x] Tag current master with `prototype-1`. 2. [x] Change group id to `org.junit`. 3. [x] Delombok everything. 4. [x] Delete elements we want to rewrite (e.g. primarily the implementation of `junit5-engine`) using `JUnit Team ` as the Git author 5. [x] Remove all author tags 6. [x] Create test module and move existing tests for published modules there. 7. [x] Remove dependencies on `junit:junit:4.12` from all existing modules except junit4-engine, junit4-launcher-runner, and open-test-alliance.  _JUnit Team_ user configuration for `~/.gitconfig`:  ``` [user]     name = JUnit Team     email = team@junit.org ```","closed","","marcphilipp","2015-12-02T14:28:06Z","2015-12-03T13:00:41Z"
"","105","Specify missing parameter types","... in @TestName example","closed","","rpost","2016-01-12T14:32:34Z","2016-01-12T16:52:56Z"
"","840","update assertj to 3.7.0 for java 9 compatibility (#775)","---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","PascalSchumacher","2017-05-07T11:47:35Z","2017-05-07T11:59:02Z"
"","27","Less restrictive Spotless settings","- Try to make Spotless less strict on additional or missing newlines. - Needs to work in Eclipse and IntelliJ IDEA.","closed","","marcphilipp","2015-12-02T14:32:24Z","2015-12-03T11:45:03Z"
"","36","#27: Changed code formatting settings to be less restrictive","- raised line lengths to 160 characters - allow new lines without enforcing them  Note: This pull requests requires a `gradle spotlessApply` afterwards, reformatting the code base with the new formatting settings. Otherwise the build will break. This is also why the build breaks for this branch, but I didn't want to change to files. I could do a rebase after the cleanup of the master branch and apply the formatter afterwards.","closed","","bechte","2015-12-03T09:58:09Z","2015-12-03T14:54:40Z"
"","23","Commit message template and Git hook for Indiegogo sponsors","- Only a single sponsor at a time - Plan for 27 days with foreseeable activity (Google spreadsheet) - Local Git hook with setup instructions","closed","","marcphilipp","2015-12-02T14:19:27Z","2015-12-15T12:31:27Z"
"","626","Updated to Spotless 3.0.0.","- added removeUnusedImports() rule - removed lamda fix (no longer needed) - changed groovy target to `src/**/*.groovy`,   because it is faster to resolve than `**/*.groovy`. - renamed `customReplaceRegex` to its new name   `replaceRegex`.  Time for a `spotlessCheck` to execute before this commit: 8.4s config, 5s execution (total 13.4s) Time for a `spotlessCheck` to execute after this commit: 5.5s config, 0.3s execution (total 5.8s). So about twice as fast.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","nedtwigg","2017-01-10T00:55:59Z","2017-01-10T22:33:53Z"
"","33","Split TestDescriptor into two interfaces","- `TestDescriptor`: immutable API for users of Launcher (in junit-engine-api) - `MutableTestDescriptor` extends `TestDescriptor`: additional methods to add children etc.","closed","","marcphilipp","2015-12-02T14:53:36Z","2015-12-03T14:24:45Z"
"","44","Test the 'junit-engine-api' module","- [x] Write tests for HierarchicalTestExecutor","closed","type: task,","jlink","2015-12-03T14:25:12Z","2016-05-25T13:02:39Z"
"","333","Support bridged methods in ReflectionUtils.findAllMethodsInHierarchy()","- [x] Support bridged methods in `ReflectionUtils.findAllMethodsInHierarchy(Class, MethodSortOrder)`. - [x] Ensure the Jupiter engine behaves correctly for bridge methods (see junit-team/junit4#1411).","closed","component: Platform,","sbrannen","2016-06-21T10:34:59Z","2017-03-12T17:19:15Z"
"","30","Move Open Test Alliance to new project","- [X] separate GitHub organization - [X] register domain name - [X] create repo - [X] copy code into new repo - [x] publish artifacts in Sonatype's snapshot repo (@marcphilipp) - [x] use it in junit modules - [x] remove `open-test-alliance` module from JUnit Lambda repository - [x] invite people from #12 - [x] incorporate feedback from #12","closed","component: OTA,","marcphilipp","2015-12-02T14:38:18Z","2015-12-15T13:13:59Z"
"","299","Polish discovery package in the junit5-engine","- [x] reduce public visibility - [x] introduce sub-package for predicates - [x] introduce unit tests for predicates","closed","type: task,","mmerdes","2016-06-09T09:43:09Z","2016-06-24T21:40:53Z"
"","57","Introduce extensible reporting API","- [x] Move `TestReporter` junit5-api module - [x] Replace `Map` with a custom class, e.g. `ReportingEntry` - [x] Display entries in `ConsoleRunner` - [x] Add tests for `JUnit5EngineExecutionContext#getExecutionListener()` - [x] Add tests for `TestReporterParameterResolver` - [x] Add tests for `ExecutionListenerAdapter` - [x] Move `reportingEntryPublished` method to the end of `TestExecutionListener`, `EngineExecutionListener`, and their implementations. - [x] Move ReportEntry to `junit-engine-api`. TestReporter uses Map (instead of ReportEntry)  - [x] Added TestReporter example to documentation - [x] Output incoming ReportEntries in junit4-runner and document that in documentation.   - All formatted outputs of report entries should look alike (see XmlReportWriter, ColoredPrintingTestListener)","closed","theme: reporting,","marcphilipp","2015-12-11T13:29:51Z","2016-05-24T15:34:40Z"
"","56","Migrate documentation from wiki to AsciiDoc","- [X] Migrate documentation from wiki to AsciiDoc - [x] Extract existing Java examples from AsciiDoc into Java source files. - [x] Move tests from sample-project to Java test source folder in documentation module and include them in the AsciiDoc documentation.","closed","theme: documentation,","marcphilipp","2015-12-11T13:26:03Z","2016-05-24T15:34:50Z"
"","72","Migrate tests in junit-tests to JUnit5","- [x] meta - [x] launcher - [x] engine-api  - [x] commons - [x] junit5 engine - [x] console","closed","","jlink","2015-12-19T13:10:13Z","2016-01-17T21:11:33Z"
"","275","Add documentation for dynamic tests","- [x] Document _dynamic test_ support in the User Guide. - [x] Review/augment Javadoc for _dynamic test_ support.   - [x] `DynamicTest`   - [x] `@TestFactory`  Completes #58","closed","theme: documentation,","mmerdes","2016-05-23T09:15:22Z","2016-06-03T15:42:04Z"
"","45","Improve interface of TestPlanSpecification","- [x] Change Launcher API to just use `TestSpecificationElement` (or better name) as marker interface, and make the collection of elements accessible to engines, as a group or by specific type - [x] Build DSL on top of launcher API in separate module `junit-testplan-dsl` - ~~Change `filterWith()` from `Predicate` to `Predicate`~~ - ~~`TestPlanSpecification` must implement `Serializable`~~ - ~~`TestPlanSpecification` must be immutable~~","closed","","jlink","2015-12-03T14:29:18Z","2016-01-15T13:19:15Z"
"","34","Redefine and implement TestExecutionListener","- [X] Change interface, implementors, and callers. - [x] Document semantics in Javadoc.","closed","","marcphilipp","2015-12-02T15:18:38Z","2015-12-22T08:49:36Z"
"","39","Re-implement JUnit 5 engine","- [ ] Resolution (in #29) - [x] ExtensionRegistry honors ordering - [x] Implement getParent() of ExtensionContext - [ ] Encapsulate attributes for ExtensionContext, do not expose Map - [x] Invocation of ExtensionPoints   - [x] BeforeEach   - [x] AfterEach   - [x] BeforeAll   - [x] AfterAll   - [x] PostProcessTestInstance   - [X] MethodParameterResolver   - [x] Conditional test execution - [ ] Clean up integrated tests (subclasses of AbstractJUnit5TestEngineTestCase)","closed","","marcphilipp","2015-12-03T10:11:14Z","2015-12-29T14:48:31Z"
"","35","Update CONTRIBUTING.MD","- [ ] I hereby agree… - [X] Section about coding standards, usage of spotless - [x] Section about Javadoc:   - No author tag   - etc.","closed","","marcphilipp","2015-12-02T15:26:38Z","2016-01-12T13:58:54Z"
"","145","Clarify and document names and display names of JUnit 4 and 5 TestDescriptors","- [ ] Display Name of @Nested Test Class should probably be the simple name of the class. - [ ] Should the display name for a method really include the class it's running in?  --- ### Related To - #153 - #162","closed","type: task,","marcphilipp","2016-02-02T14:48:52Z","2019-07-19T19:33:03Z"
"","848","Update JUnit 5 dependency recommendations in Maven section of the Users Guide","- (X) **Bug report.**   When I submitted https://github.com/junit-team/junit5-samples/pull/16 (Alters POM to minimize test-compile dependencies), I purposely included only the ```junit-jupiter-api``` artifact as a test-scoped dependency and included the other packages that were needed at test-execution time as a dependency of the ```maven-surefire-plugin```.  My intention was to only expose the classes in ```junit-jupiter-api``` to the test writer's test compiler.  In this [comment](https://github.com/junit-team/junit5/issues/801#issuecomment-299856881), @Tibor17 has instructed that this is not the correct configuration and that only the ```junit-platform-surefire-provider``` should be a plugin dependency.  I'll let @Tibor17 comment on why this is important if he chooses.  The incorrect configuration has also been adopted in the Users Guide.  Related to https://github.com/junit-team/junit5-samples/issues/25#issuecomment-300209012  ## Deliverables  - [ ] Align Maven examples in the Users Guide to the ```junit5-maven-consumer``` sample project.","closed","","smoyer64","2017-05-09T13:18:29Z","2017-06-10T14:33:24Z"
"","703","Add message in JUnit report in case of pass assertion","- ( ) **Feature request.** To make the report more readable and proper, please add the success message if assertion passed.  like Assertions.assertEquals( ""John"", ""John1"" ,""Passed - Name is verified"", ""Failed - Name is not same""   ## Deliverables  - [ ] ...","closed","component: Jupiter,","anandmeher","2017-03-02T12:20:11Z","2019-03-18T10:31:45Z"
"","926","Scopes + Dependency Injection discussion","**Feature request.**   Note: this is a continuation of one part of the conversation of https://github.com/junit-team/junit5-samples/issues/29  Can we have a new callback `BeforeTestInstantiationCallback` please?   I want to be able to compose a container that is scoped for the test invocation like this https://github.com/paul-hammant/junit5-maven-picocontainer/blob/master/src/test/java/com/example/project/Composition.java#L48 on a just in time basis.  After each test, I'd expect the JUnit5 to discard the scoped store, and the way PicoContainer is coded, that'll just make the scoped container eligible for GC too.  It isn't necessary to know, but the child container has a reference to the parent, but the parent does not have a reference to any children, in this configuration.","closed","status: duplicate,","paul-hammant","2017-07-09T20:49:25Z","2017-07-10T10:44:27Z"
"","641","Gradle Plugin: Does not publish events to IntelliJ when using IntelliJ's ""delegate Gradle run actions"" feature","(Not sure the best path to file this issue since it is related to both IntelliJ and the Gradle plugin)  ## Overview  When using the [delegate Gradle run actions to Gradle](https://www.jetbrains.com/help/idea/2016.3/working-with-gradle-tasks-in-gradle-tool-window.html) option in IntelliJ test events are not received (so IDE indications).  ## Version Info  * IntelliJ version: 2017.1 EAP * Gradle Version: 3.3 * `'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M3'` * `'org.junit.jupiter:junit-jupiter-api:5.0.0-M3'` * `'org.junit.jupiter:junit-jupiter-engine:5.0.0-M3'`  ## Details  I originally posted this on the [Gradle forum](https://discuss.gradle.org/t/junit-5-gradle-and-intellij-publishing-test-events-for-tooling-api-consumers/21349)  > JUnit 5 development is in progress, and there is [gradle/gradle#1037](https://github.com/gradle/gradle/issues/1037) for integrating it natively into Gradle. Right now, the JUnit 5 team has built a [simple plugin](https://github.com/junit-team/junit5/tree/master/junit-platform-gradle-plugin) that can be used until the support is built directly in. > > IntelliJ can [delegate Gradle run actions to Gradle](https://www.jetbrains.com/help/idea/2016.3/working-with-gradle-tasks-in-gradle-tool-window.html). I believe that IntelliJ uses the [tooling API](https://docs.gradle.org/current/userguide/embedding.html) to launch these tests as well as receive events for them. > > When using the current JUnit 5 plugin and the delegating run actions, IntelliJ displays ""No events found"", which makes sense. > > What I'm trying to figure out is, how can the current JUnit 5 plugin be adapted to publish test events so that IntelliJ can receive them?  It would be nice if running Gradle in this manner from IntelliJ would produce the same results as using IntelliJ's Platform runner.","closed","theme: build,","mkobit","2017-01-26T19:10:08Z","2017-02-04T09:56:17Z"
"","67","Agree and document on conventions for Javadoc","### Where to use Javadoc? - Every class/method that we expose as API? - Every class/method that is public? ### How to write/format Javadoc? - How to format paragraphs?   - `` on a separate line or at the beginning of the new paragraph? - Where to put whitespace?   - blank line between paragraphs?   - blank line before tags? - Define/check order of tags?  There is some good advice here: - http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html - http://www.oracle.com/technetwork/java/javase/documentation/index-142372.html - https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style#javadoc","closed","","marcphilipp","2015-12-16T08:28:33Z","2016-01-17T21:11:49Z"
"","66","Agree and document team conventions for automated tests","### Test Class Naming  I think we need a naming convention for our test classes. At the moment we have test classes that end with `Test`, `Tests`, and `TestCase`. Personally, I would prefer one of the first two variants. ### Assertions  In addition, we should agree on how to write assertions. At the moment we have tests that use JUnit 4's `Assert`, some use our new `Assertions` class, others use AssertJ's `Assertions`. Since we plan to migrate our tests to use JUnit 5 at some point, I would propose that we do not use anything in JUnit 4, particularly not `org.junit.Assert`. Instead, I think, we should use our own `Assertions` were feasible and AssertJ, where we need its power. ### Test Doubles  We had a brief discussion on Skype regarding a mocking framework. I've added Mockito to the test classpath and used it in a couple of tests. Other tests use hand-written stubs or spys. I think we can go with Mockito where easier and write doubles ourselves when we think it clearer.","closed","","marcphilipp","2015-12-16T08:19:48Z","2015-12-18T07:16:33Z"
"","61","Introduce uniqueId and name properties in ExtensionContext","### Status Quo  `ExtensionContext` currently has a `displayName` property; however, this is limited in terms of robust identification. ### Deliverables - [x] Introduce `uniqueId` property in `ExtensionContext` - [x] Introduce `name` property in `ExtensionContext`","closed","theme: extensions,","sbrannen","2015-12-11T14:59:50Z","2016-01-11T20:56:52Z"
"","234","Fully document Launcher and Engine APIs","### Rationale  We want IDE and build tool vendors to start consuming these APIs starting with M1. ### Deliverables - [x] Document all `public` APIs in the `junit-launcher` module. - [x] Document all `public` APIs in the `junit-engine-api` module.   - [x] Document `AbstractTestDescriptor`, including its intended usage   - [x] Document `HierarchicalTestEngine.execute()`   - [x] Improve documentation of `Node.execute()` by explaining that containers typically do not implement `execute()` since the `HierarchicalTestEngine` handles execution of children.","closed","theme: documentation,","marcphilipp","2016-04-29T11:51:09Z","2016-06-04T14:41:12Z"
"","354","RFC: Please critique this working PoC for an AfterDiscoveryCallback.","### Rationale  JUnit 5 is trying to break the duopoly of Runners and @Rules that limits the vintage JUnit solution.  While JUnit 5 does eliminate the vintage system's inability to use more than one Runner through the use of Engines, the discovered Engines don't interact with each other.  Many types of Extensions enable functionality that can be changed during a test's execution, but there are no extensions that allow a TestDescriptor to be changed before, during or after test discovery.  The changes that provide the AfterDiscoveryCallback allow an Extension to alter the engine's (root) TestDescriptor before it becomes immutable as part of the TestPlan.  Classes of Extensions that benefit from this callback include: -   ScenarioExtension:  Using the @Scenario({""predecessor1"", ""predecessor2""}) annotation, tests can be ordered based on a list of predecessor tests (by test method name).  The AfterDiscoveryCallback would find all the instances of @Scenario (which extends @Test) in a test class and, based on the dependency graph described by the predecessors, would replace the set of child MethodTestDescriptors in the parent ClassTestDescriptor with one of the sets that maintain order.  The child @Scenario annotated methods would be reordered to honor the requested dependency graph (assuming it's acyclic). -   [JUnitParamsExtension](http://pragmatists.github.io/JUnitParams/):  This vintage JUnit Runner is a popular way of parameterizing tests.  There are multiple ways declaratively and programmatically providing a list of parameter sets to a method.  The size of the set must match number of parameters in the method declaration, but the size of the list determines how many times that method is executed.  In this case, the MethodTestDescriptor would be changed so that it was a test container, and new test methods would be added based on the size of the parameter set list.  If desired, test filtering could be a special case of this callback.  Care must be taken to make sure that filter conditions are executed first (since there's no point translating or expanding tests that are destined to be removed).  There are many more examples of these three classes of Extensions (reduce, translate or expand) that want to alter the TestDescriptor hierarchy.  ### Status  The PoC is available at https://github.com/selesy/junit5/tree/feature/discovery-callbacks.  Currently, there's a no-op AfterDiscoveryCallback installed as a default Extension - it doesn't adapt the TestDescriptor in any way but it does print TestDescriptor information to System.out.  All the existing unit and platform tests successfully execute (only one test was changed since there's now one more default extension).  No tests have been added for this code (so far).  While I've done a little clean-up and formatting, I didn't submit a pull request for this PoC since there are known issues. ### Next Steps  The next steps for this PoC are: -   [ ] Eliminate the default DiscoveryReportExtension. -   [ ] Add @Scenario and ScenarioExtension to more appropriately demonstrate how this callback operates. -   [ ] Add unit and platform tests. -   [ ] Add Javadocs. ### Problems  This PoC has the following known problems: -   The signature for the AfterDiscoveryCallback's method is void afterDiscovery(Object testDescriptor) since TestDescriptor and several of it's aggregated types are not available in junit-jupiter-api. ### Questions -   Is there are more appropriate way, given the current system's architecture, to accomplish the same functionality? -   What coding standards and conventions have I messed up? -   How is the determination made as to which tests become unit tests in the class' module and which become platform tests? -   What would be an appropriate way to make the afterDiscovery() method type-safe (not expecting Object as a parameter)?  Please feel free to comment and critique as needed - I won't break.  And just so I've stated it clearly at least once - thank you so much for all the work you're doing to upgrade JUnit to the current state of the Java art.","closed","","smoyer64","2016-06-24T21:02:46Z","2018-12-04T07:54:03Z"
"","40","Re-implement JUnit 4 engine","### Discovery - [x] Resolve `ClassSpecification` elements    - [x] Regular JUnit 4 test class   - [x] Class with `@Ignore` annotation   - [x] Class with `@RunWith` annotation   - [x] Regular JUnit 3 test class   - [x] Class with a `suite` method   - [x] Does not discover classes it should not run     - [x] Class with `@RunWith(JUnit5.class)` annotation     - [x] Class without test methods - [x] Resolve `AllTestsSpecification` - [x] Resolve `MethodSpecification`   - [x] single method   - [x] multiple methods of same class   - [x] combination with `ClassSpecification` of method's class   - [x] Non-filterable `Runner`   - [x] Method of class filtered out by a `ClassFilter` - [x] Resolve `PackageSpecification` - [x] Resolve `UniqueIdSpecification`   - [x] single unique ID of test method   - [x] single unique ID of test class   - [x] unresolvable unique ID   - [x] unique ID of method of test class in suite   - [x] multiple unique IDs for same class - [x] Logging (see TODOs in code) ### Execution - [x] Container and test events for single test class are reported correctly - [x] Container and test events for suite are reported correctly - [x] Reports `InitializationErrors` for malformed tests (e.g. non-public test methods) correctly - [X] ~~Handle dynamic tests~~ _Not supported by JUnit 3/4_ - [x] Protect against Runners that throw exceptions - [x] Test class with multiple methods of same name? - [x] Failure in `@BeforeClass` or `@AfterClass` - [x] Handle (ignore?) unknown `Descriptions` ### Complete TestDescriptors - [x] Consider `Description#fUniqueId` instead of `displayName` - [x] Report categories as tags - [x] Determine and set `TestSources` if possible  --- ### Idea for implementing container events  ![2](https://cloud.githubusercontent.com/assets/214207/11746439/766bc8dc-a01e-11e5-9589-e7a458127f66.jpg)","closed","","marcphilipp","2015-12-03T10:12:53Z","2016-01-26T13:00:04Z"
"","758","Allow possibility to change display name during execution","## Use Case  A test engine (or Jupiter extension) might want to enhance the display name with additional information, e.g. a reason for failure or random seed in case of property testing. This could make dealing with concrete failures simpler.  ## Alternatives  Additional information can already be logged via `EngineExecutionListener.reportingEntryPublished()` but this info is usually hidden in stdout or some log.  ## Possible solution  Add an additional event method, eg ``` EngineExecutionListener.changeDisplayName(descriptor, newName) ``` or  ``` EngineExecutionListener.appendDisplayName(descriptor, appendix) ```","closed","status: declined,","jlink","2017-03-31T13:15:47Z","2017-05-01T22:40:13Z"
"","511","Introduce TreePrinter and VerboseTreePrinter.","## TODO - [ ] Fine tune tree tiles and colors. - [ ] Update user guide at http://junit.org/junit5/docs/snapshot/user-guide/#running-tests-console-launcher ## Latest renderings  Using new command line option `--details=verbose` - **UTF-8** tileset https://travis-ci.org/junit-team/junit5/jobs/163260501 - **ASCII** tileset https://ci.appveyor.com/project/marcphilipp/junit5/build/221 ## Overview  Solves #369  Removes `--hide-details` command line option and introduces an enum named **`Details`** in package `org.junit.platform.console.options` with the following constants:  ``` java public enum Details {     /** No test plan execution details are printed. */     HIDDEN, // no printing test plan execution listener will be installed by the console launcher      /** Test plan execution details are rendered in a flat, line-per-line mode. */     FLAT, // the ColoredPrintingTestListener is registered      /** Test plan execution details are rendered in a simple, compact manner. */     TREE, // the simple TreePrinter is registered      /** Combines tree and flat mode. */     VERBOSE // the VerboseTreePrinter is registered } ```  The user guide needs an update showing the new `--details=[hidden|flat|tree|verbose]` option.  The proposed `VerboseTreePrinter` implementation renders the following output using extended ASCII glyphs, if the default charset is `UTF-8`:  ``` ├─ JUnit Jupiter │  ├─ DependencyTests │  │  ├─ noCycles() │  │  │       tags: [] │  │  │   uniqueId: [engine:junit-jupiter]/[class:org.junit.platform.meta.DependencyTests]/[method:noCycles()] │  │  │     parent: [engine:junit-jupiter]/[class:org.junit.platform.meta.DependencyTests] │  │  │     source: JavaMethodSource [javaClass = 'org.junit.platform.meta.DependencyTests', javaMethodName = 'noCycles', javaMethodParameterTypes = ''] │  │  │   duration: 19921 ms │  │  │     status: SUCCESSFUL │  ├─ DependencyTests finished after 19935 ms. ├─ JUnit Jupiter finished after 19977 ms. Test plan execution finished. Number of all tests: 1 ```  If the default charset points to some other than `UTF-8` (like `windows-1252`) it falls back to simple ASCII drawing tiles -- with option `--details=tree`:  ``` +-- JUnit Vintage | +-- example.JUnit4Tests | | +-- standardJUnit4Test (2 ms) +-- JUnit Jupiter | +-- AssertionsDemo | | +-- timeoutExceededWithPreemptiveTermination() (18 ms) ... | | +-- timeoutExceeded() (104 ms) | +-- AssumptionsDemo | | +-- testOnlyOnCiServer() (1 ms) org.opentest4j.TestAbortedException: Assumption failed: assumption is not true | | +-- testOnlyOnDeveloperWorkstation() (0 ms) org.opentest4j.TestAbortedException: Assumption failed: Aborting test: not on developer workstation | | +-- testInAllEnvironments() (0 ms) | +-- StringTests ... | +-- DisabledClassDemo class example.DisabledClassDemo is @Disabled | +-- DisabledTestsDemo | | +-- testWillBeSkipped() void example.DisabledTestsDemo.testWillBeSkipped() is @Disabled | | +-- testWillBeExecuted() (0 ms) | +-- A special test case | | +-- â•¯Â°â–¡Â°ï¼‰â•¯ (0 ms) | | +-- Custom test name containing spaces (0 ms) | | +-- ðŸ˜± (0 ms) | +-- DynamicTestsDemo | | +-- generateRandomNumberOfTests() | | | +-- input:27 (0 ms) | | | +-- input:48 (0 ms) ... ```  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2016-09-15T08:42:23Z","2016-09-30T11:41:44Z"
"","117","fix documentation for test inner class","## This small patch fixes the documentation for inner class sample.  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","yoelb","2016-01-15T12:32:33Z","2016-01-15T13:24:28Z"
"","487","Create dedicated org.junit.jupiter.api.function package","## Team Decision  Since we plan to introduce more functional interfaces in addition to the existing `Executable` interface, we have decided to introduce a dedicated `function` package for the JUnit Jupiter API.","closed","component: Jupiter,","sbrannen","2016-08-30T12:55:19Z","2016-11-30T08:48:21Z"
"","473","Introduce TestSource for classpath resources","## Status Quo #301 introduced a `DiscoverySelector` for classpath resources; however, there is currently no corresponding `TestSource` for such a selected resource. ## Deliverables - [x] Introduce a `TestSource` for classpath resources.","closed","component: Platform,","sbrannen","2016-08-19T17:59:28Z","2016-11-30T08:54:27Z"
"","360","Introduce centralized collection of DiscoverSelectors","## Status Quo  When working with multiple different types of `DiscoverSelector`s -- for example, when using the `TestDiscoveryRequestBuilder` DSL -- one currently has to import multiple classes or static methods. This is cumbersome and makes it difficult to users to know what `DiscoverSelector` types are currently supported by the platform. ## Deliverables - [x] Introduce a centralized collection of `DiscoverSelector`s","closed","theme: programming model,","sbrannen","2016-06-27T14:38:28Z","2016-06-27T15:52:10Z"
"","514","DisabledCondition fails to unwrap Optional element when generating reason","## Status Quo  When a test class or test method is annotated with `@Disabled` but does not provide a custom `reason`, a default reason is generated. However, the default reason currently does not _unwrap_ the `Optional` element, resulting in a reason such as the following.  ``` Optional[void example.DisabledTestsDemo.testWillBeSkipped()] is @Disabled ```  Whereas, the reason for the above should in fact be:  ``` void example.DisabledTestsDemo.testWillBeSkipped() is @Disabled ``` ## Deliverables - [x] Unwrap `Optional` element when generating a reason for `@Disabled` tests.","closed","component: Jupiter,","sbrannen","2016-09-15T15:17:45Z","2016-10-08T17:04:26Z"
"","121","Introduce validation rules for tests","## Status Quo  Using JUnit 5 annotations and mechanisms one can do a lot of things that are syntactically possible but don't make sense. For example, one can annotate a method with both `@Test` and `@BeforeEach`.  ## Proposal  Introduce a mechanism where JUnit itself but also other parties can register rules that will be checked during discovery time, e.g.:  - `AmbiguousAnnotationsRule` - `DuplicateExtensionsRule` - `ProhibitNestedTestsRule` (in case a project wants to forbid this style of testing)  Those rules should be listable and configurable from the launcher API: Error, Warning, Off  Rules could work on different level, e.g whole test plan, engine, package, class, method, etc.  ## Related Issues  - #242","closed","theme: diagnostics,","jlink","2016-01-17T18:27:40Z","2021-05-07T10:51:27Z"
"","269","Introduct 'delta' support in Assertions for doubles and floats","## Status Quo  Unlike JUnit 4, the `assertEquals()` variants in `org.junit.gen5.api.Assertions` that accept `double` and `float` arguments currently do not support a _delta_. This omission was simply an oversight on our part. ## Deliverables - [x] Add a `delta` argument to each of the existing `assertEquals()` variants in `org.junit.gen5.api.Assertions` that accept `double` and `float` arguments.","closed","up-for-grabs,","sbrannen","2016-05-16T15:46:16Z","2016-05-21T13:36:03Z"
"","93","Simplify Travis CI configuration once JDK 1.8.0_66+ is supported","## Status Quo  Travis CI builds configured to run with Java 8 currently use version 1.8.0_31 which is known to cause problems (see [broken build](https://travis-ci.org/junit-team/junit-lambda/builds/101150860)). Consequently, the JUnit 5 build has been updated in commit 1fba598f02b687409853e45c3fbd6ec371767824 to coerce Travis to use a more recent version of Java 8. ## Deliverables - [x] Once [Travis CI Issue #3259](https://github.com/travis-ci/travis-ci/issues/3259) is resolved, simplify the configuration of our Travis builds.","closed","theme: build,","sbrannen","2016-01-08T21:26:15Z","2016-07-02T16:39:22Z"
"","557","Document nullability in TestExecutionSummary.Failure","## Status Quo  This issue picks up where #552 left off. Specifically, since `Failure` is now a public API, the nullability of values returned by its accessor methods must be properly documented.  ## Deliverables  - [ ] Document nullability in `TestExecutionSummary.Failure`","closed","component: Platform,","sbrannen","2016-11-02T16:59:03Z","2016-11-04T20:05:35Z"
"","370","Dynamically generate links in User Guide based on release tag","## Status Quo  This issue picks up where #319 left off.  The user guide of a release should point to GitHub sources and Javadoc of the corresponding release tag. ## Deliverables - [ ] Investigate if it's possible to determine if the commit we're building has a release tag using the [versioning plugin](https://github.com/nemerosa/versioning). - [ ] If the release tag or branch is available via the `versioning` plugin, set the `releaseBranch` project property accordingly.","closed","status: stale,","sbrannen","2016-06-30T12:44:24Z","2021-06-19T12:50:11Z"
"","12","Launch Open Test Alliance Initiative","## Status Quo  There is no standard for testing on the JVM: the only common building block we have is `java.lang.AssertionError`.  `AssertionError` is great for signaling that a test has failed, but it doesn't go far enough. Each testing framework is therefore forced to fill the gap with custom subclasses of `AssertionError` or `RuntimeException` to provide a richer feature set to end users. The downside is that each framework has its **own** set of custom errors and exceptions, and this makes it a challenge for frameworks to interoperate.  For example, JUnit has long supported the notion of a _failed assumption_ via its `AssumptionViolatedException`, but assertion frameworks like AssertJ cannot integrate that feature without a direct dependency on JUnit. Furthermore, the status quo makes the work of IDEs and build tools more difficult than it should be. ## Proposal  The only real solution to this problem is to create a foundation that we can all build on!  Based on recent discussions with IDE and build tool developers from Eclipse, Gradle, and IntelliJ, the JUnit Lambda team is working on a proposal for an open source project to provide a minimal common foundation for testing libraries on the JVM. The primary goal of the project is to enable testing frameworks like JUnit, TestNG, Spock, etc. and third-party assertion libraries like Hamcrest, AssertJ, etc. to use a common set of exceptions that IDEs and build tools can support in a consistent manner across all testing scenarios -- for example, for consistent handling of failed assertions and failed assumptions as well as visualization of test execution in IDEs and reports. ## Draft Implementation  We have already begun with a small set of errors and exceptions that we consider to be common for all testing and assertion frameworks. In fact, we are already using these exceptions in the JUnit Lambda [Prototype](https://github.com/junit-team/junit-lambda/wiki/Prototype).  Please take a look at our current draft in the [open-test-alliance](https://github.com/junit-team/junit-lambda/tree/master/open-test-alliance) project and let us know what you think. ## Project Name and Repository  The name _Open Test Alliance_ is simply a working title for the project. As such, the name is up for discussion, and recommendations are welcome. We will of course need a name that maps to an available Internet domain name so that the code can live in an appropriate Java package.  The draft implementation is currently a part of the JUnit Lambda repository; however, as soon as additional parties join the collaboration, we will collectively work to find a new home for the project. ## Feedback is welcome!  What types of _errors_ and _exceptions_ should such a project support?  What types of properties should such errors and exceptions have?  What should the project be named? ## Projects already contacted  We've already reached out to and asked for feedback from the maintainers of the following projects. - Test NG - Hamcrest - AssertJ - Spock - Google Truth - ScalaTest - Eclipse - IntelliJ - Gradle - Maven Surefire Plugin","closed","component: OTA,","sbrannen","2015-11-17T19:00:10Z","2015-12-15T13:11:44Z"
"","301","Introduce DiscoverySelector for classpath resources","## Status Quo  There is currently support for selecting packages, classes, methods, and classpath roots; however, there is no way to _select_ a classpath resource. ## Related Issues - #123  - #313  - #314  - #452  ## Deliverables - [x] Introduce a `DiscoverySelector` for selecting classpath resources (e.g., XML files stored in the classpath)","closed","component: Platform,","sbrannen","2016-06-10T15:36:49Z","2016-11-30T08:56:20Z"
"","78","Introduce deactivation mechanism for conditional test execution","## Status Quo  There is currently no way to deactivate or turn off support for conditional test execution.  For example, if a test class or test method is annotated with `@Disabled`, it is always disabled, and there is currently no way to override this behavior. However, there are times when a developer would like to run all _disabled_ tests to see if they are still _broken_ without having to manually delete or comment out all declarations of `@Disabled`.  Similarly, a developer may wish to disable _all_ or _specific_ conditions for a given test run. ## Prerequisites - #233 ## Deliverables - [x] Introduce a mechanism for turning off conditions -- for example, via a Java system property and/or a _configuration property_ which is supplied to a `Launcher` and propagated to engines via the `ExecutionRequest`.","closed","theme: extensions,","sbrannen","2015-12-21T16:05:27Z","2016-05-15T19:38:16Z"
"","472","Rename Java selectors to align with test sources","## Status Quo  There is currently a discrepancy with regard to naming conventions for Java-based `DiscoverySelector` and `TestSource` implementations. ## Deliverables - [x] Rename `PackageSelector` to `JavaPackageSelector` to align with `JavaPackageSource`. - [x] Rename `ClassSelector` to `JavaClassSelector` to align with `JavaClassSource`. - [x] Rename `MethodSelector` to `JavaMethodSelector` to align with `JavaMethodSource`.","closed","theme: discovery,","sbrannen","2016-08-17T17:43:35Z","2016-11-30T08:54:27Z"
"","131","Clarify and test tag filters","## Status Quo  There are currently no tests for filtering based on tags. Consequently, we have no regression tests for the factory methods in `TagFilter`. ## Deliverables - [x] Introduce unit and/or integration tests for _required_ filters in `TagFilter`. - [x] Introduce unit and/or integration tests for _exclude_ filters in `TagFilter`. - [x] Rename `DiscoveryFilter#combine` and write tests for it","closed","type: task,","sbrannen","2016-01-21T17:22:10Z","2016-03-09T16:59:17Z"
"","471","Document usage of Maven Surefire Provider in User Guide","## Status Quo  The User Guide has very limited documentation for how to use the `junit-platform-surefire-provider`. In fact, the documentation is almost nonexistent.  See related topic on [Stack Overflow](http://stackoverflow.com/questions/38993446/cannot-create-launcher-without-at-least-one-testengine-consider-adding-an-engin). ## Deliverables - [ ] Introduce a ""Configuring Test Engines"" section like the [existing one for the Gradle plugin](http://junit.org/junit5/docs/5.0.0-M2/user-guide/#running-tests-build-gradle-engines-configure), demonstrating how to configure test engines with Maven.","closed","component: Platform,","sbrannen","2016-08-17T11:17:23Z","2016-09-12T09:40:03Z"
"","281","Fully document support for test interfaces","## Status Quo  The User Guide currently contains a section on [Interface Default Methods](http://junit.org/junit5/docs/current/user-guide/#interface-default-methods); however, it does not mention all features supported in _test interfaces_. ## Deliverables - [x] Document support for configuring extensions and tags in test interfaces via `@ExtendWith` and `@Tag`. - [x] Document support for declaring `@BeforeAll`, `@AfterAll`, `@BeforeEach`, and `@AfterEach` methods in test interfaces. - [x] Document support for declaring `@TestFactory` methods in test interfaces.","closed","component: Jupiter,","sbrannen","2016-05-24T14:54:10Z","2016-12-19T21:27:04Z"
"","766","Rename methods in TestTemplateInvocationContextProvider","## Status Quo  The names of methods in the `TestTemplateInvocationContextProvider` API introduced in M4 are too generic.  Consequently, there is a good chance that we will later run into naming collisions with other extension APIs that _support_ or _provide_ for a given container context. Such collisions would effectively prevent a single extension from being able to implement two such affected extension APIs. For that reason, this issue is marked as a _bug_, since it's essentially a bug waiting to happen.  ## Related Issues  - This issue depends on #793   ## Deliverables  - [ ] Rename the `supports()` and `provide()` methods in `TestTemplateInvocationContextProvider` so that naming collisions can be avoided -- akin to how the sole method in `TestInstancePostProcessor` is named `postProcessTestInstance()` as opposed to simply `postProcess()`.","closed","component: Jupiter,","sbrannen","2017-04-03T20:52:42Z","2017-04-17T19:10:16Z"
"","116","Provide better names for the test plan specification","## Status Quo  The names `TestPlanSpecification`, `EngineFilter` and `DescriptionFilter` do not communicate their intent very well and should be changed. ## Deliverables  Renaming: - [x] Rename class `TestPlanSpecification` to `DiscoveryRequest` - [x] Rename class `TestPlanSpecificationElement` to `DiscoverySelector` - [x] Rename class `TestPlanSpecificationElementVisitor` to `DiscoverySelectorVisitor` - [x] Rename filter classes  Changes: - [x] create class `FilterResult` based on `ConditionEvaluationResult` - [x] extract generic interface `GenericFIlter` providing a method `FilterResult filter(T object);` - [x] let `EngineIdFilter`, `DiscoveryFilter`, and `PostDiscoveryFilter` extend it. - [x] let the `Launcher` execute the `EngineIdFilter`  Optional: - [x] Remove the specification DSL if possible from the codebase (saving it to a feature branch) - [x] move `EngineIdFilter` & `PostDiscoveryFilter` to `junit-launcher-api` - [x] make `DiscoveryRequest` immutable and implement `Serializable`","closed","type: enhancement,","bechte","2016-01-15T12:20:31Z","2016-01-19T19:58:43Z"
"","364","Introduce support for excluding packages and classes","## Status Quo  The Maven Surefire Plugin's API provides wildcarded ""includes"" and ""excludes"" for test selection.  Having the ability to exclude a subset of packages and/or classes from those included via the `@SelectedPackages` and `@SelectedClasses` annotations would provide the equivalent ability for declarative tests.  I would also recommend that if includes and excludes configuration is not provided through the plugin's API, the `JUnitPlatformProvider` should use the underlying declarative configuration. ## Proposal  Introduce `@ExcludePackages` and `@ExcludeClasses` for use with the `JUnitPlatform` runner.  An example of use cases is provided in the code block below:  ``` java @SelectPackages(""a.b.c"") @ExcludePackages(""a.b.c.d.e"") @SelectClasses(a.b.c.d.e.SomeTest.class) class TestCase { /* ... */ } ```  Recommended rules for prioritizing includes and excludes are: -   Explicitly selected packages and classes are always run. -   Excluded packages and classes must be subsets of selected packages. -   Explicitly selecting and excluding the same package or class is an error.","closed","status: duplicate,","smoyer64","2016-06-28T14:17:05Z","2016-06-28T16:01:38Z"
"","475","Align Gradle plugin options with standard Gradle Test task","## Status Quo  The JUnit Platform Gradle Plugin currently does not support most features of the standard Gradle `Test` task. For example, without the `afterEvaluate` work-around listed in the comments section, it is impossible to contribute system properties or configure the underlying `JavaExec` task used by the plugin behind the scenes. ## Related Issues - #315 - #484  ## Deliverables - [ ] Where feasible, support all features of the standard Gradle `Test` task in the JUnit Platform Gradle plugin.   - Since the JUnit plugin should eventually implement `Test` instead of `JavaExec` anyway, this might be an opportune time to make that switch. ## Original Issue Description  The JUnit Platform Gradle Plugin should expose Gradle's `JavaExec` task properties... or at least let me pass JVM arguments to the `ConsoleLauncher` process.  I need to set `-ea` or `-Djava.util.logging.config.file=...` when running tests.   Or am I missing a built-in(?) Gradle feature?","closed","component: Platform,","sormuras","2016-08-24T10:09:08Z","2017-12-13T21:06:32Z"
"","484","Generate binary test results in JUnit Platform Gradle Plugin","## Status Quo  The JUnit Platform Gradle Plugin (""JUnit plugin"") is currently capable of generating XML reports in the de facto standard ""JUnit 4 XML report"" format; however, the JUnit plugin does not generate so called _binary test results_ analogous to the standard Gradle `test` task. Consequently, test results tracked by the JUnit plugin do not show up in Gradle's test reports and _build scans_. ## Related Issues - #315  - #475  ## Research  The `executeTests()` method in the Gradle [`Test`](https://github.com/gradle/gradle/blob/master/subprojects/testing-jvm/src/main/java/org/gradle/api/tasks/testing/Test.java) task orchestrates the entire process for the standard `test` task within a Gradle build script.    The `Test` task uses a [`TestResultSerializer`](https://github.com/gradle/gradle/blob/master/subprojects/testing-jvm/src/main/java/org/gradle/api/internal/tasks/testing/junit/result/TestResultSerializer.java) to serialize results into a binary file named `results.bin` located in the `build/test-results/test/binary` folder for the current project. The `/test/` portion of the path is the name of the `Test` task in the current project. The path to this folder can be set via the `binResultsDir` property of the `Test` task.  The binary results are actually generated by invoking the `write(Collection results)` method on the `TestResultSerializer`.  The collection of `results` is composed of instances of [`TestClassResult`](https://github.com/gradle/gradle/blob/master/subprojects/testing-jvm/src/main/java/org/gradle/api/internal/tasks/testing/junit/result/TestClassResult.java) which in turn are composed of instances of [`TestMethodResult`](https://github.com/gradle/gradle/blob/master/subprojects/testing-jvm/src/main/java/org/gradle/api/internal/tasks/testing/junit/result/TestMethodResult.java).  For the standard `Test` task, the class and method results are collected via the [`TestReportDataCollector`](https://github.com/gradle/gradle/blob/master/subprojects/testing-jvm/src/main/java/org/gradle/api/internal/tasks/testing/junit/result/TestReportDataCollector.java) which implements Gradle's [`TestListener`](https://github.com/gradle/gradle/blob/master/subprojects/testing-base/src/main/java/org/gradle/api/tasks/testing/TestListener.java) API.  For the JUnit Platform, it should be possible to generate and collect instances of `TestClassResult` and `TestMethodResult` within a JUnit `TestExecutionListener` (perhaps analogous to the existing `XmlReportsWritingListener`) and then serialize them into the required binary format via Gradle's `TestResultSerializer`. ## Deliverables - [ ]  Generate _binary test results_ in the JUnit Platform Gradle Plugin","closed","component: Platform,","sbrannen","2016-08-27T13:43:36Z","2016-12-22T13:26:14Z"
"","409","Deprecate generic name-based discovery selectors","## Status Quo  The following _generic_ name-based methods in `DiscoverySelectors` were an experiment, and over time we have come to realize that they were a mistake. Specifically, the JUnit Platform will be augmented with support for multiple new types of test artifacts (e.g., files, directories, classpath resources, etc.) Consequently, the _guessing game_ in such algorithms will become unwieldy and difficult to maintain over time. - `selectName(String)` - `selectNames(String...)` - `selectNames(Collection)` ## Deliverables - [x] Deprecate all generic name-based discovery selectors.","closed","component: Platform,","sbrannen","2016-07-15T18:29:42Z","2016-08-07T19:11:09Z"
"","112","Revisit extension registration model","## Status Quo  The extension registration model is currently a work in progress and needs to be revisited to make sure it aligns with the needs of the extension authors and the community at large. ## Topics to Review and Revisit - [x] `TestExtension` vs. `ExtensionPoint`   - What purpose does `TestExtension` serve since the introduction of `ExtensionPoint`? Do we need two maker interfaces for extensions? - [x] `ExtensionPoint` vs `RegisteredExtensionPoint` - [x] `ExtensionPointSorter`   - Why limit sorting to implementations of `ExtensionPoint`? Why not allow any type of `TestExtension` to be sorted? - [x] `ExtensionRegistry` vs. `TestExtensionRegistry`   - At the very least, the names are both misleading and confusing.   - An `ExtensionRegistry` currently allows one to register _only_ instances of `ExtensionPoint`. So why isn't it called an `ExtensionPointRegistry`? - [x] `ExtensionPoint.Position`   - Why is `Position` specific to `ExtensionPoint`?   - An extension author would likely never want an extension to be invoked ""in the middle"" (i.e., in the `DEFAULT` position) alongside user code. So what purpose does `DEFAULT` serve?   - `Position` defines only 5 options for extension authors. Why should JUnit be so restrictive? Why not allow any numerical ordering (e.g., the entire range of integers, perhaps other than `0`) beyond the hard coded 5 current values?   - Consider a solution such as `@Order` that can be reused across multiple use cases within the framework. - [x] Verify (via appropriate testing) that the current algorithm properly sorts extensions when multiple extensions exist within test class hierarchies and within a given extension execution context. - [x] The current extension model allows _additional_ extensions to be registered programmatically via the `ExtensionRegistry`; however, there is no mechanism for _overriding_ extensions that have already been registered (e.g., in superclasses).   - We need a way to override extensions that have been registered in an enclosing context.","closed","component: Jupiter,","sbrannen","2016-01-13T19:23:53Z","2016-09-10T15:24:00Z"
"","286","Rename JUnit 5 base packages and modules","## Status Quo  The base package for JUnit 5 is currently `org.junit.gen5`; however, this tightly couples current and future releases to the number `5`, which would seem illogical for later major releases such as JUnit 6, 7, etc., especially if later major releases wish to build on the stable `Launcher` and `TestEngine` APIs which are not specific to the JUnit 5 programming and extension models. ### JUnit 4 Base Packages - `org.junit` - `org.junit.experimental` - `org.junit.internal` - `org.junit.matchers` - `org.junit.rules` - `org.junit.runner` - `org.junit.runners` - `org.junit.validator` ### JUnit 5 Base Packages (currently) - `org.junit.gen5.api` - `org.junit.gen5.commons` - `org.junit.gen5.console` - `org.junit.gen5.engine` - `org.junit.gen5.engine.junit4` - `org.junit.gen5.engine.junit5` - `org.junit.gen5.gradle` - `org.junit.gen5.junit4.runner` - `org.junit.gen5.launcher` - `org.junit.gen5.surefire`  --- ## Proposals ### Proposal A  Replace `gen5` with something else, for example a code name such as `delta`, `lambda`, etc. - `org.junit.delta`: _delta_ signifies major changes with regard to previous generations of JUnit - `org.junit.jade`: _jade_ is a green gemstone, hinting at green bars for successful tests - `org.junit.jupiter`: _Jupiter_ is the fifth planet from the sun - `org.junit.lambda`: _lambda_ signifies the move to Java 8 and was the original code name for JUnit 5 ### Proposal B  Retain `org.junit` as a base package for _platform_ modules, ensuring that there are no conflicts with packages used in JUnit 4, and include version numbers in package names only where applicable.  Names in parentheses are proposed module names (i.e., artifact IDs). #### JUnit Platform - 5th Generation - `org.junit.gen5.commons`       --> `org.junit.commons`  (`junit-commons`) - `org.junit.gen5.console`       --> `org.junit.console`  (`junit-console`) - `org.junit.gen5.launcher`      --> `org.junit.launcher` (`junit-launcher`) - `org.junit.gen5.engine`        --> `org.junit.engine`   (`junit-engine`) - `org.junit.gen5.gradle`        --> `org.junit.gradle`   (`junit-gradle-plugin`) - `org.junit.gen5.surefire`      --> `org.junit.surefire` (`junit-surefire-provider`) #### JUnit 4 & JUnit 5 - Interoperability - `org.junit.gen5.engine.junit4` --> `org.junit.engine.junit4`  (`junit4-engine`) - `org.junit.gen5.junit4.runner` --> `org.junit.runners.junit5` (`junit5-runner`) #### JUnit 5 - APIs and Implementation - `org.junit.gen5.api`           --> `org.junit.api.junit5`    (`junit5-api`) - `org.junit.gen5.engine.junit5` --> `org.junit.engine.junit5` (`junit5-engine`) ### Proposal C  Introduce the concept of a _JUnit Platform_ upon which any testing framework (e.g, JUnit 4/5/6, Groovy, Kotlin, etc.) can build. Make the separation between platform modules and programming models visually distinct, both in terms of packages and artifact IDs.  Introduce a _code name_ for the JUnit 3 and JUnit 4 programming models (e.g., `legacy`, `vintage`, `retro`, `classic`).  Introduce a _code name_ for the JUnit 5 programming model (e.g., `lambda`, `delta`, `jade`, `jupiter`).  Names in parentheses are proposed module names (i.e., artifact IDs). #### JUnit Platform - `org.junit.gen5.commons`       --> `org.junit.platform.commons`  (`junit-platform-commons`) - `org.junit.gen5.launcher`      --> `org.junit.platform.launcher` (`junit-platform-launcher`) - `org.junit.gen5.engine`        --> `org.junit.platform.engine`   (`junit-platform-engine`) - `org.junit.gen5.console`       --> `org.junit.platform.console`  (`junit-platform-console`) - `org.junit.gen5.junit4.runner` --> `org.junit.platform.runner` (`junit-platform-runner`) - `org.junit.gen5.gradle`        --> `org.junit.platform.gradle.plugin`   (`junit-platform-gradle-plugin`) - `org.junit.gen5.surefire`      --> `org.junit.platform.surefire` (`junit-platform-surefire-provider`) #### JUnit 3 & JUnit 4 - `org.junit.gen5.engine.junit4` --> `org.junit.vintage.engine` (`junit-vintage-engine`) #### JUnit 5 - `org.junit.gen5.api`           --> `org.junit.lambda.api`    (`junit-lambda-api`) - `org.junit.gen5.engine.junit5` --> `org.junit.lambda.engine` (`junit-lambda-engine`)  ... or: - `org.junit.gen5.api`           --> `org.junit.jupiter.api`    (`junit-jupiter-api`) - `org.junit.gen5.engine.junit5` --> `org.junit.jupiter.engine` (`junit-jupiter-engine`)  ... or: - `org.junit.gen5.api`           --> `org.junit.jade.api`    (`junit-jade-api`) - `org.junit.gen5.engine.junit5` --> `org.junit.jade.engine` (`junit-jade-engine`)  --- ## Deliverables - [x] Decide on new names for base packages used in all 5th generation modules. - [x] Rename all packages and modules throughout the framework as appropriate.","closed","type: task,","sbrannen","2016-05-28T12:17:13Z","2016-06-21T22:27:13Z"
"","716","Rename MethodSortOrder to something generic","## Status Quo  The `MethodSortOrder` enums currently are dedicated solely for use with methods; however, once we implement #497 we will need identical functionality for fields.  ## Deliverables  - [x] Rename both `MethodSortOrder` enums to something more generic -- for example, `HierarchyTraversal`. - [x] Document changes in the User Guide.","closed","component: Platform,","sbrannen","2017-03-09T14:22:21Z","2017-03-09T14:54:50Z"
"","267","Convert MethodParameterResolver into a generic ParameterResolver API","## Status Quo  The `MethodParameterResolver` API is currently restricted to parameter resolution for methods; however, it would be beneficial to support parameter resolution for any type of `java.lang.reflect.Executable` (i.e., methods or constructors).  Furthermore, this would allow JUnit 5 to support _constructor injection_ for test instances without the need to introduce another parameter resolution API. ## Analysis  If we evolve `MethodParameterResolver` into a general purpose `ParameterResolver` API, we would then either want to completely drop the `MethodInvocationContext` API or convert it to an `ExecutableInvocationContext` for the following reasons: 1. The `Method` or `Constructor` for a `java.lang.reflect.Parameter` is always accessible via `parameter.getDeclaringExecutable()`. As such, `getMethod()` in `MethodInvocationContext` is superfluous even today. 2. The `getInstance()` method in `MethodInvocationContext` can potentially be moved to `ExtensionContext` with a return type of `java.util.Optional`; however, care must be taken with regard to which instance it contains (i.e., with regard to `@Nested` tests). A more robust solution would likely be to supply the `target` object as a parameter to the `supports()` and `resolve()` methods instead of supplying a `MethodInvocationContext`. ## Related Issues - #249 - #268 ## Deliverables - [x] Convert the current `MethodParameterResolver` API into a general purpose `ParameterResolver` API that can be applied to methods or constructors.","closed","theme: extensions,","sbrannen","2016-05-16T15:25:32Z","2016-05-25T19:58:21Z"
"","312","Align gradle plugin and runner features with Launcher API","## Status Quo  The `JUnitPlatformPlugin` (Gradle plugin), `JUnitPlatform` (JUnit 4 Runner), and `ConsoleRunner` currently have slightly different APIs and feature sets than what is supported by the Launcher APIs.3 ## Goals  For consistency and future proofing of these APIs we therefore need to align all public APIs for end users.  Specifically, actions related to `DiscoverySelectors` must be named ""select"" something. Similarly, filters must be named ""include"" or ""exclude"" something. ## Related Issues - #313  - #314  ## Deliverables - [x] Rename `@Packages` to `@SelectPackages` - [x] Rename `@Classes` to `@SelectClasses` - [x] Rename `byClassNamePattern()` in `ClassFilter` to `includeClassNamePattern()` - [x] Rename `@FilterClassName` to `@IncludeClassNamePattern` - [x] Rename `matchClassName` in Gradle plugin to `includeClassNamePattern` - [x] Rename `--filter-classname` option in `ConsoleRunner` to `--include-classname`","closed","theme: build,","sbrannen","2016-06-18T11:36:16Z","2016-06-18T13:50:42Z"
"","303","Introduce support for required and excluded engines in JUnit5 Runner","## Status Quo  The `JUnit5` `Runner` currently supports a single, required engine via the `@RequireEngine` annotation; however, `EngineFilter` now supports multiple required or excluded engines. ## Related Issues - #291 - #285 - #295  ## Deliverables - [x] Rename `@RequireEngine` to `@RequireEngines` and support multiple required engines in the `JUnit5` runner. - [x] Introduce `@ExcludeEngines` support.","closed","type: enhancement,","sbrannen","2016-06-11T16:24:52Z","2019-01-24T16:28:38Z"
"","309","Inline jopt-simple into junit-platform-console","## Status Quo  The `junit-console` module currently has a mandatory dependency on `jopt-simple`, which can have negative side effects if the consumer of `junit-console` wants to use a different version of JOpt Simple. In addition, having a mandatory, transitive dependency on a third-party library breaks the general rule for JUnit modules. ## See Also - b1746e8b00aba42823d873941d4f26d5a111ffda ## Deliverables - [x] Inline `jopt-simple` into `junit-console`   - for example, using the [Shadow Plugin](https://github.com/johnrengelman/shadow) (with a custom `Transformer`) or [jarjar](https://code.google.com/archive/p/jarjar/).","closed","component: Platform,","sbrannen","2016-06-13T22:48:56Z","2016-11-30T08:26:02Z"
"","64","ReflectionUtils.handleException() should not wrap a target exception in an IllegalStateException","## Status Quo  The `handleException()` method in `ReflectionUtils` currently extracts a _target exception_ from an `InvocationTargetException`, and if the _target exception_ is a checked `Exception` it will be wrapped in an `IllegalStateException` with the message `""Unhandled exception""`.  This behavior, however, is inappropriate for a testing framework that reflectively invokes test methods.  Specifically, any exception thrown by a test method must be reported in `TestExecutionResult`. If such an exception is wrapped in an `IllegalStateException`, that makes it very difficult to _retrieve_ the original exception, since it is impossible to know that some `IllegalStateExceptions` should be treated differently than others. ## Analysis  We do not want to have to reason about the contents of an `IllegalStateException`. Instead, we need an explicit way to retrieve an exception thrown by a test method. ## Deliverables - [x] Change everything that `throws Throwable` to `throws Exception` - [x] Change ReflectionUtlils.invokeMethod()/newInstance() to _mask_ checked exceptions as unchecked exceptions without physically wrapping them in a `RuntimeException`. - [x] Refactor `ReflectionUtils.handleException()` accordingly.","closed","","jlink","2015-12-13T21:02:20Z","2016-01-02T18:59:59Z"
"","825","MethodSelector returns null for parameter types","## Status Quo  The `getMethodParameterTypes()` method in `MethodSelector` currently returns `null` if parameter types were not explicitly provided via a constructor.  ## Deliverables  - [x] Ensure that `MethodSelector.getMethodParameterTypes()` never returns `null`.   - [x] If no parameter types were supplied and cannot be deduced, return an empty string instead of `null`.   - [x] If parameter types were not explicitly supplied but can be deduced (e.g, via a supplied `Method` reference), return a string containing the deduced parameter types. - [x] Document the return value for `MethodSelector.getMethodParameterTypes()`.","closed","theme: discovery,","sbrannen","2017-05-01T16:05:01Z","2017-05-03T21:05:59Z"
"","731","ReflectionUtils.findMethod() should search using bottom-up semantics","## Status Quo  The `findMethod()` variants in `ReflectionUtils` currently use ""top down"" search semantics.  While ""top down"" may make sense when searching for multiple methods -- for example, when searching for all `@BeforeEach` methods within a type hierarchy -- ""top down"" semantics don't make sense when searching for a single method since you typically are interested in the first such method that is not overridden.  ## Further Analysis  Further analysis shows that the `HierarchyTraversalMode` in use when searching for a single method is a moot point since our `!isMethodShadowedByLocalMethods(...)` checks take care of that logic. However, it still makes sense to use bottom-up search semantics by default, especially if we later implement a short-circuit algorithm for ""finding the first"" such method without traversing the type hierarchy needlessly.  ## Deliverables  - [x] Use bottom-up search semantics in `findMethod()` variants in `ReflectionUtils`","closed","component: Platform,","sbrannen","2017-03-12T16:14:52Z","2017-03-13T11:12:20Z"
"","502","Document IntelliJ IDEA support in the User Guide","## Status Quo  The [IDE Support](http://junit.org/junit5/docs/current/user-guide/#running-tests-ide) section in the User Guide says there is currently no IDE support, but the IDE support of IntelliJ is actually rather nice and should be mentioned there. ## Deliverables - [x] Document IntelliJ IDEA's support for the JUnit Platform in the User Guide","closed","component: Platform,","schauder","2016-09-09T08:52:54Z","2016-09-10T13:57:29Z"
"","304","Use consistent terminology for included/excluded features","## Status Quo  Tags and engines can currently be _required_ or _excluded_; however, a tag or engine is never actually _required_. In other words, specifying that a tag or engine is required does not result in a failure if such a tag or engine is not present. ## Team Decision  Use consistent terminology across the platform with regard to _things_ that can be included or excluded from a test plan, test run, etc. ## Related Issues - #285 - #295 - #291 - #303  - #307 ## Deliverables - [x] Replace all occurrences of _required_ terminology with _included_ for tags. - [x] Replace all occurrences of _required_ terminology with _included_ for engines.   - The `requireEngine` feature of the Gradle plugin will be addressed in #307","closed","type: task,","sbrannen","2016-06-11T17:08:22Z","2016-06-12T13:42:23Z"
"","404","Upgrade to Spotless 2.0","## Status Quo  Spotless 2.0 should fix issues regarding EOL characters on Windows (see https://github.com/diffplug/spotless/issues/23). ## Related Issues - #398  ## Deliverables - [x] Upgrade to Spotless 2.0 once it is released.","closed","theme: build,","sbrannen","2016-07-14T18:27:37Z","2016-08-17T09:49:35Z"
"","310","Separate snapshots from releases for published documentation","## Status Quo  Snapshots for the _User Guide_ are currently published to: http://junit.org/junit5/docs/current/user-guide  Snapshots for Javadoc are currently published to: https://junit.ci.cloudbees.com/job/JUnit5/javadoc/  This behavior has been acceptable until now since there had not yet been a first milestone release; however, with M1 we will need to devise a better scheme for where documentation is published. ## Deliverables - [x] Publish snapshots of the User Guide to:   - http://junit.org/junit5/docs/snapshot/user-guide - [x] Publish snapshots of the Javadoc to:   - http://junit.org/junit5/docs/snapshot/api - [x] Add Gradle task to replace docs/current. - [x] ~~Publish version M1 of the User Guide to:~~ will be done when releasing M1   - ~~http://junit.org/junit5/docs/5.0.0-M1/user-guide~~   - ~~http://junit.org/junit5/docs/current/user-guide~~     - ~~_current_ may simply redirect to _5.0.0-M1_ (e.g., via a symlink)~~ - [x] ~~Publish version M1 of the Javadoc to:~~ will be done when releasing M1   - ~~http://junit.org/junit5/docs/5.0.0-M1/api~~   - ~~http://junit.org/junit5/docs/current/api~~     - ~~_current_ may simply redirect to _5.0.0-M1_ (e.g., via a symlink)~~","closed","theme: web site,","sbrannen","2016-06-16T15:11:23Z","2016-07-05T18:10:21Z"
"","88","Document that @BeforeAll & @AfterAll are unsupported in @Nested test classes","## Status Quo  Since support for configuring the test instance lifecycle was dropped after the prototype, `@BeforeAll` and `@AfterAll` methods are now required to be `static`. Consequently such methods can no longer be used in `@Nested` test classes. Any attempt to do so will result in a compilation error similar to the following.  > The method myBeforeAllMethod cannot be declared static; static methods can only be declared in a static or top level type.  See the nested test classes in `com.example.HierarchyTestCase` for concrete examples. ## Deliverables - [x] Decide how to handle `@BeforeAll` and `@AfterAll` methods in nested test classes.   - The team decided that this is simply not supported since the Java language doesn't support it. - [x] Document that `@BeforeAll` and `@AfterAll` are unsupported in nested test classes. - [x] Delete `com.example.HierarchyTestCase`.","closed","type: task,","sbrannen","2016-01-05T21:20:25Z","2018-01-31T13:55:49Z"
"","369","Introduce ASCII-based tree printing TestExecutionListener","## Status Quo  Since build tools and IDEs do not yet support the JUnit Platform, test results cannot currently be viewed in their true tree based structure. This is especially true for _dynamic tests_. ## Deliverables - [x] Introduce an ASCII-based `TestExecutionListener` that prints the test tree to STDOUT (or a configurable output destination) once the `TestPlan` has completed. - [x] Allow the new listener to be automatically used by the `ConsoleLauncher`. - [x] Allow the new listener to be enabled via the JUnit Platform Gradle plugin.","closed","component: Platform,","sbrannen","2016-06-30T09:22:32Z","2019-02-05T11:31:27Z"
"","378","Enhance support for dynamic tests","## Status Quo  Since 5.0 M1, dynamic tests can be registered as lambda expressions, but there are a few limitations with the current feature set. ## Topics 1. Lifecycle callbacks and extensions are not applied _around_ the invocation of a dynamic test. 2. A dynamic test cannot directly benefit from parameter resolution.    - A dynamic test cannot make use of a `TestReporter`. ## Related Issues - #14 ~~""Introduce support for parameterized tests""~~ - #386 ~~""Improve documentation of DynamicTest lifecycle""~~ - #393 ~~""TestReporter does not capture the correct TestIdentifier when used with DynamicTests""~~ - #431 ""Introduce mechanism for terminating Dynamic Tests early"" - #694 (duplicates this issue, with example)  ## Deliverables  Address each _topic_.","open","theme: dynamic tests,","sbrannen","2016-07-05T11:17:22Z","2022-06-03T06:55:40Z"
"","460","ColoredPrintingTestListener fails to print actual exception type","## Status Quo  Similar to the previous bug in `MutableTestExecutionSummary` (see #396), `ColoredPrintingTestListener` currently prints something along the lines of the following, without including the actual type of the exception, which in this case should be `java.lang.AssertionError` or similar.  ``` => Exception: my assertion error message ``` ## Deliverables - Ensure that the actual exception type is output by `ColoredPrintingTestListener` when printing failures.","closed","component: Platform,","sbrannen","2016-08-12T18:08:42Z","2016-11-30T08:54:26Z"
"","124","Remove extensionPointType from register() methods in ExtensionPointRegistry","## Status Quo  Several `register()` methods in `ExtensionPointRegistry` make use of generics and an `extensionPointType` argument in order to provide a mechanism for having the compiler automatically infer the type of the lambda expression or method reference without requiring an explicit cast.  However, there is no concrete _need_ for `extensionPointType`. In fact, the type is completely ignored by the framework, which is misleading at best (see #122).  In summary, `extensionPointType` is just syntactical sugar.  For example, invocations of ` void register(E, Class, Position)` can be replaced with `register(ExtensionPoint, Position)` and an explicit cast as follows (see `MethodLevelCallbackTests.InnermostAndOutermost`).  ``` diff public void registerExtensions(ExtensionPointRegistry registry) { -   registry.register(this::innermostBefore, BeforeEachExtensionPoint.class, Position.INNERMOST); -   registry.register(this::innermostAfter, AfterEachExtensionPoint.class, Position.INNERMOST); -   registry.register(this::outermostBefore, BeforeEachExtensionPoint.class, Position.OUTERMOST); -   registry.register(this::outermostAfter, AfterEachExtensionPoint.class, Position.OUTERMOST);  +   registry.register((BeforeEachExtensionPoint) this::innermostBefore, Position.INNERMOST); +   registry.register((AfterEachExtensionPoint) this::innermostAfter, Position.INNERMOST); +   registry.register((BeforeEachExtensionPoint) this::outermostBefore, Position.OUTERMOST); +   registry.register((AfterEachExtensionPoint) this::outermostAfter, Position.OUTERMOST); } ```  The same holds for variants of `register()` that do not accept a `Position`. The following refactoring of `org.junit.gen5.engine.junit5.execution.MyExtensionRegistrar` results in semantically and functionally equivalent code.  ``` diff public void registerExtensions(ExtensionPointRegistry registry) { -   registry.register(this::doNothing, MyExtensionPoint.class); +   registry.register((MyExtensionPoint) this::doNothing); } ``` ## Deliverables - [x] Remove all variants of `register()` in `ExtensionPointRegistry` that accept an `extensionPointType` argument.   - This will reduce the number of overridden `register()` methods and thereby simplify the API for end users.   - In addition, the aforementioned change will avoid ambiguity about what the framework does with the `extensionPointType` (which currently is _absolutely nothing_). - [x] Document how to register lambda expressions and method references in the corresponding Javadoc and in the user guide.","closed","theme: extensions,","sbrannen","2016-01-18T17:18:43Z","2016-01-19T19:39:34Z"
"","136","junit4-runner: When skipping a container all leaves must be reported as ignored","## Status Quo  Right now the container is reported as ignored and no events are emitted for its descendants. JUnit 4 circumvents this problem by not even generating children for test classes annotated with `@Ignore`. ## Tasks - [ ] When a container is skipped: collect all leaves and report each of them as ignored. - [ ] Clarify Javadoc of `TestExecutionListener#executionSkipped` and `EngineExecutionListener#executionSkipped`: When a container is skipped no events are generated for any of its descendants.","closed","type: bug,","marcphilipp","2016-01-25T06:00:19Z","2016-05-11T17:59:42Z"
"","899","Introduce support for tracking exceptions thrown at the container level","## Status Quo  JUnit Jupiter currently tracks exceptions during the execution of test methods and test factory methods (and their corresponding callbacks) and then makes such exceptions available to extensions via `TestExtensionContext.getTestException()`; however, there is no analogous support for exceptions thrown during the execution of container-level callbacks.  ## Related Issues  - #419   ## Deliverables  - [x] Introduce support for tracking exceptions thrown at the container level and make such exceptions available to extensions.","closed","component: Jupiter,","sbrannen","2017-06-25T12:40:50Z","2017-07-01T16:18:18Z"
"","764","Support common display name placeholders for all test templates","## Status Quo  JUnit Jupiter 5.0.0-M4 introduced generic support for test templates and concrete support for repeated and parameterized tests. The latter also include support for custom display names with placeholders.  For example, `@RepeatedTest` supports `{displayName}`, `{currentRepetition}`, and `{totalRepetitions}`; whereas, `@ParameterizedTest` supports `{index}`, `{arguments}`, and `{#}` (where `#` is the current argument index: 1, 2, 3, etc.).  ## Considerations  - `{displayName}` could also be supported by `@ParameterizedTest`. - `{displayName}` and `{index}` could be supported generically for `@TestTemplate`.  ## Deliverables  - [ ] Determine if any new placeholders would be useful with test templates, in addition to the placeholders already supported by `@RepeatedTest` and `@ParameterizedTest`. - [ ] Determine which placeholders are _common_ to all test templates. - [ ] Support all _common_ placeholders in all custom display name patterns for all test templates.","closed","status: stale,","sbrannen","2017-04-03T14:33:29Z","2021-06-19T12:50:12Z"
"","226","Repeatable annotations are not found on interfaces","## Status Quo  JUnit 5's annotation search algorithm currently does not find repeatable annotations declared on interfaces. Annotations currently affected include `@Tag`, `@ExtendWith`, and their containers.  For example, this behavior makes it impossible to register an extension via `@ExtendWith` on an interface that is used to supply _default methods_ to concrete test classes that implement the interface.  The current work-around is to declare such annotations on all concrete subclasses, but this is obviously something we don't want to force users to have to do. ## Deliverables - [ ] Refine the search algorithm for repeatable annotations so that such annotations are also discovered on interfaces implemented by a test class.","closed","type: bug,","sbrannen","2016-04-17T14:18:20Z","2016-04-29T16:17:35Z"
"","113","Make LogManager configurable in JUnit5Plugin","## Status Quo  JUnit 5 uses the Java Util Logging (JUL) API in conjunction with log4j. Thus, to instruct JUL to actually use log4j as the implementation, one must configure something similar to the following in `build.gradle` when using the `JUnit5Plugin`.  ``` java afterEvaluate {      // Ensure that log4j2 is properly configured.     junit5Test.systemProperty 'java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager'  } ``` ## Proposal  The `LogManager` should be able to be configured in a manner similar to the following.  ``` java junit5 {     matchClassName '.*Tes[s'     logManager 'org.apache.logging.log4j.jul.LogManager' } ``` ## Deliverables - [x] Introduce a `logManager` property in `JUnit5Extension`. - [x] Set the `java.util.logging.manager` system property for JUL within the `JUnit5Plugin` if an explicit `logManager` has been configured. - [x] Update the Gradle builds for the `documentation` and `junit-tests` modules so that they use this new feature.","closed","type: enhancement,","sbrannen","2016-01-14T16:12:08Z","2016-01-14T17:04:38Z"
"","249","Rename extension APIs","## Status Quo  JUnit 5 currently provides the following `Extension` APIs, which can be logically assigned to three categories.  _Conditional Test Execution_ - `ContainerExecutionCondition` - `TestExecutionCondition`  _General Purpose_ - `InstancePostProcessor` - `ExceptionHandler` - `MethodParameterResolver`  _Test Lifecycle Callbacks_ - `BeforeAllCallback` - `AfterAllCallback` - `BeforeEachCallback` - `AfterEachCallback` - `BeforeTestMethodCallback` - `AfterTestMethodCallback`  The semantics of the first and third categories should be self explanatory; however, the second category needs perhaps some clarification. Based on the current names, it would _appear_ to the casual observer that these extensions are general purpose, but that is not entirely the case.  - `InstancePostProcessor` and `ExceptionHandler` are explicitly tied to the _test execution_, at the instance level and method level respectively, but their names imply that they can be used to post-process any instance (e.g., perhaps an extension instance if JUnit ever decides to support that) or handle any exception (e.g., perhaps thrown from a lifecycle callback). - Similarly, although `MethodParameterResolver` is in fact dedicated to the resolution of parameters for methods, it could just as easily be applicable for the resolution of a parameter to any `java.lang.reflect.Executable` (i.e., a `Constructor` or a `Method`). Furthermore, if JUnit 5 were to introduce a parameter resolver API for constructors, the current names of methods in `MethodParameterResolver` would then be potentially misleading if not conflicting (disregarding method signatures). ## Proposal  In light of the aforementioned drawbacks to the current extension API names, I recommend that we aim for consistency in naming based on _where_ such extensions can be applied.  The names of the `ContainerExecutionCondition` and `TestExecutionCondition` APIs serve as good examples of the direction in which we should precede, leading logically to the following renaming. - `InstancePostProcessor` --> `TestInstancePostProcessor`   - `postProcessTestInstance()` --> _unchanged_ - `ExceptionHandler` --> `TestExecutionExceptionHandler`   - `handleException()` --> `handleTestExecutionException()` - `MethodParameterResolver`: to be addressed in #267 - `BeforeTestMethodCallback` --> `BeforeTestExecutionCallback`   - `beforeTestMethod()` --> `beforeTestExecution()` - `AfterTestMethodCallback` --> `AfterTestExecutionCallback`   - `afterTestMethod()` --> `afterTestExecution()` ## Related Issues - #267 - #268  ## Deliverables - [x] Rename extension APIs as described in the aforementioned proposal.","closed","theme: extensions,","sbrannen","2016-05-08T18:33:22Z","2016-06-14T06:49:57Z"
"","425","Test against JDK 9 modules","## Status Quo  JUnit 5 currently builds and runs against JDK 9 early access builds (including Jigsaw builds), but we do not yet have any tests in place that run against user code built with module info.  ## Related Pull Requests  - PR #1061 Part I - Introduce `ModuleUtils` with `ClassFinder` SPI - PR #1057 Part II - Add module `org.junit.platform.commons.jpms`  ## Related Issues  - #296  - #600 - #775  ## Further Resources  - [Testing against JDK 9 Early Access builds](https://github.com/junit-team/junit5/wiki/Testing-against-JDK-9-Early-Access-builds) -- JUnit 5 wiki page - [Project Jigsaw: Module System Quick-Start Guide](http://openjdk.java.net/projects/jigsaw/quick-start) - [State of the Module System](http://openjdk.java.net/projects/jigsaw/spec/sotms/) - [Big Kill Switch](http://mail.openjdk.java.net/pipermail/jigsaw-dev/2017-March/011763.html) for disabling strong encapsulation on Java 9 - [Jigsaw questions](http://mail.openjdk.java.net/pipermail/jigsaw-dev/2017-July/013086.html) How to compile test classes that are packaged in same packages as production code?  ## Deliverables  - [x] Integration test JUnit 5 against sample applications that supply JDK 9 module info. - [x] Test module-path scanning within named modules. - [x] Test module-path scanning within the unnamed module. - [x] Test module-path scanning with _exploded_ modules.   - See https://jira.spring.io/browse/SPR-14579 - [x] Test the use of reflection to instantiate user classes that are loaded from named modules. - [x] Test the use of reflection to instantiate user classes that are loaded from the unnamed module. - [x] Test support for `clazz.getPackage().getImplementationVersion()` and related methods for retrieving JAR versioning metadata for classes loaded from named modules.   - See discussion in https://github.com/junit-team/junit5/pull/598 for details. - [x] Provide java[c] usage example with [`--patch-module module=file(;file)*`](https://docs.oracle.com/javase/9/tools/java.htm#JSWOR624)","closed","theme: modules,","sbrannen","2016-07-23T14:10:23Z","2018-04-23T12:47:10Z"
"","340","Verify behavior for @BeforeAll and @AfterAll methods within test class hierarchies","## Status Quo  It was brought to our attention in #339 that the behavior for `@BeforeAll` and `@AfterAll` methods within a test class hierarchy is unclear. ## Deliverables - [x] Verify behavior for `@BeforeAll` and `@AfterAll` methods within test class hierarchies by introducing explicit tests.   - See modified `BeforeAndAfterAllTests`. - [x] Update the User Guide and Javadoc to reflect the behavior for `@BeforeAll` and `@AfterAll` methods within test class hierarchies.","closed","theme: documentation,","sbrannen","2016-06-21T14:21:53Z","2016-06-24T19:18:10Z"
"","450","Impossible to select method by UID if method accepts array or primitive parameters","## Status Quo  It is currently possible to select a test method by unique ID (UID) if the method does not accept any parameters or if it accepts parameters that are not primitives or arrays.  For example, `testMethod(org.junit.jupiter.api.TestInfo)` can be selected via its UID; however, `testMethod(int)`, `testMethod(int[])`, and `testMethod(String[])` can **not** currently be selected via their UIDs.  The reason this is considered to be a _bug_ is that a test method such as `testMethod(int)` can be executed as long as there is a `ParameterResolver` registered to handle the `int` parameter; however, if the user wishes to re-run that test via the UI in the IDE, selection of the test by its UID will fail within the `JupiterTestEngine` even though the UID is perfectly valid. ## Related Issues - #332  ## Deliverables - [x] Ensure that a method which declares parameters of primitives or arrays can be selected via its UID.","closed","component: Jupiter,","sbrannen","2016-08-07T16:56:05Z","2016-11-30T08:56:20Z"
"","497","Support programmatic extension registration via fields","## Status Quo  It is currently possible to register extensions declaratively via `@ExtendWith` on a class or method but not on a field.  Furthermore, it is currently impossible for a user of an extension to provide input to the extension programmatically. Rather, in order to make an extension configurable, current extension implementations typically provide a custom annotation, but such an annotation is hindered by the limitations of what can be declared as an annotation attribute in Java.  See the discussion in [Spring REST Docs](https://github.com/spring-projects/spring-restdocs/issues/296#issuecomment-244209553) for further background information.  ## Related Issues  - #416 - #506  - #864   ## Proposal for Programmatic Extension Registration  In general, it should be possible for an extension to be registered _programmatically_ -- for example, via a field or a factory method. This would allow a user to pass arguments to the extension's constructor (or `static` factory method) or to construct the extension programmatically, for example, via a method that returns the configured extension instance.  With regard to migrations from JUnit 4 to JUnit Jupiter, it should be possible to migrate a JUnit 4 rule from this:  ``` java @Rule public JUnitRestDocumentation restDocumentation =         new JUnitRestDocumentation(""target/generated-snippets""); ```  ... to the following in JUnit Jupiter:  ``` java @RegisterExtension RestDocumentationExtension restDocumentation =         new RestDocumentationExtension(""target/generated-snippets""); ```  ## Considerations  - Although the existing `@ExtendWith` annotation _could_ technically be repurposed for such use cases, the JUnit Team feels it would be better to introduce a new annotation dedicated to this purpose. The current proposed name is `@RegisterExtension`, but this may change.  ## Deliverables  - [x] Support programmatic registration of a single extension via a field annotated with `@RegisterExtension` where the field's value is used as the extension instance. - [x] Document in User Guide. - [x] Document in Release Notes.","closed","component: Jupiter,","sbrannen","2016-09-08T14:54:26Z","2018-08-22T10:42:38Z"
"","122","Support programmatic registration of extensions that implement multiple ExtensionPoint APIs","## Status Quo  It is currently possible to register an extension that implements a single `ExtensionPoint` API via `ExtensionPointRegistry`; however, it is _seemingly_ impossible to register an extension that implements multiple `ExtensionPoint` APIs (at least not in a single registration call).  It is in fact possible, but the user has to declare that the extension only implements one of the many APIs which leads the user to believe that the extension will not be registered for all implemented APIs simultaneously. ## Deliverables - [x] Provide _obvious_ support for programmatic registration of extensions that implement multiple `ExtensionPoint` APIs","closed","","sbrannen","2016-01-17T22:23:05Z","2016-01-17T22:44:35Z"
"","743","Display names must not be allowed to be blank","## Status Quo  It is currently possible to declare `@DisplayName("""")` (or containing only white space), but this should not be permitted.  If a user explicitly declares `@DisplayName`, the user must provide a non-empty name.  The same applies to display name patterns supplied via `@RepeatedTest` and `@ParameterizedTest`.  ## Related Issues  - #242  ## Deliverables   - [x] Introduce appropriate JavaDoc for `DisplayName.value`. - ❌ Introduce precondition check to ensure that a user has supplied a non-empty name via `@DisplayName`.   - See TODO in `TestInfoParameterResolverTests.customDisplayNameThatIsEmpty()`   - [x] Instead of using precondition checks, we can currently only log a warning. See commit f03cc6dbe2452748c0da4a9496228e16531973ec for details. - [x] Ensure that the precondition check is applied to `@Test`, `@TestFactory`, and `@TestTemplate` methods (for repeated and parameterized tests as well). - [x] Ensure that all extensions or internal mechanisms that generate or return a _display name_ return non-empty values.","closed","theme: diagnostics,","sbrannen","2017-03-20T17:19:31Z","2018-12-28T13:59:06Z"
"","313","Introduce support for filtering packages","## Status Quo  It is currently possible to _select_ a package -- for example, for classpath scanning. However, it is not possible to _filter_ packages.  See use case described in #534 for additional input. ## Related Issues - #301 - #312  - #314 - #437  - #474 - #534  ## Deliverables - [x] Introduce _include_ and _exclude_ filter support for packages in a new `PackageFilter` class (similar to `ClassFilter`). - [x] Introduce _include_ and _exclude_ filter support for packages in the Gradle JUnit Platform plugin. - [x] Introduce _include_ and _exclude_ filter support for packages in the `JUnitPlatform` runner (e.g., `@IncludePackages` and `@ExcludePackages`).","closed","theme: build,","sbrannen","2016-06-18T13:41:28Z","2016-11-30T08:24:48Z"
"","314","Introduce support for excluding classes via filters","## Status Quo  It is currently possible to _filter_ a class for _inclusion_ but **not** for _exclusion_.  ## Related Issues - #301 - #312  - #313  - #474  ## Deliverables - [x] Introduce _exclude_ support in `ClassNameFilter` (e.g., `excludeClassNamePatterns()`) - [x] Introduce _exclude_ filter support for classes in the `ConsoleLauncher` (e.g., `-N` and `--exclude-classname`). - [x] Introduce _exclude_ filter support for classes in the Gradle JUnit Platform plugin (e.g., `excludeClassNamePattern()` and `excludeClassNamePatterns()`). - [x] Introduce _exclude_ filter support for classes in the `JUnitPlatform` runner (e.g., `@ExcludeClassNamePatterns`).","closed","theme: build,","sbrannen","2016-06-18T13:49:14Z","2017-02-14T08:30:02Z"
"","367","Allow TestEngines to be completely dynamic","## Status Quo  It is currently impossible to create a custom `TestEngine` that is completely dynamic in nature.  The reason is that a completely dynamic engine will not have any statically registered children and will therefore get summarily _pruned_ by `org.junit.platform.launcher.core.Root.pruneEmptyTestEngines()`. ## Deliverables - [x] Allow test engines to be completely dynamic (i.e., don't prune engines without children).","closed","theme: programming model,","sbrannen","2016-06-29T15:38:00Z","2016-07-04T12:55:44Z"
"","835","Forbid return values from test and lifecycle methods","## Status Quo  In the JUnit Jupiter programming model it is currently not forbidden for `@Test` and lifecycle methods (i.e., `@BeforeEach`, `@BeforeAll`, etc.) to have a return value, even if it's _assumed_ that no one declares anything other than `void` as a return type for such methods.  For example, the following currently execute.  ```java @Test int test() { 	fail(""Boom!""); 	return 42; } ```  ```java @BeforeEach int before() { 	fail(""Boom!""); 	return 42; } ```  ## Related Issues  - #242   ## Deliverables  - [x] Forbid return values from test and lifecycle methods via test predicates that exclude such methods.","closed","theme: diagnostics,","sbrannen","2017-05-04T14:59:10Z","2018-08-11T11:29:24Z"
"","476","Log warning if VintageTestEngine encounters @RunWith(JUnitPlatform.class)","## Status Quo  In order to avoid infinite recursion, the `VintageTestEngine` (specifically its internal `DefensiveAnnotatedBuilder`) will **silently ignore** a test class annotated with `@RunWith(JUnitPlatform.class)`.  Although this behavior is intentional, the fact that the user is not informed of it can lead to confusing results when tests are silently not executed as was the case for a user on Stack Overflow (see link below). ## Related Resources - [Stack Overflow](http://stackoverflow.com/questions/39085905/junit-5-empty-test-suite-in-intellij-idea-when-using-junit-jupiter-engine) question - [IntelliJ IDEA](https://youtrack.jetbrains.com/issue/IDEA-160253) issue on the same topic ## Deliverables - [x] Issue a `WARNING` log message informing the user whenever such a test class is ignored by the `VintageTestEngine`.","closed","theme: suites,","sbrannen","2016-08-24T17:12:32Z","2018-09-22T15:28:50Z"
"","349","Store.getOrComputeIfAbsent() shadows values from parent store","## Status Quo  In direct contrast to the `get()` methods in `ExtensionContext.Store`, the `getOrComputeIfAbsent()` methods in `ExtensionContext.Store` only perform a _local_ lookup before invoking the supplied `Function defaultCreator`. Consequently, even if a value has been stored under the supplied `key` in the parent `Store`, the `getOrComputeIfAbsent()` methods will always create a new default value and store it locally, thereby _shadowing_ the desired, existing value from the parent. ## Deliverables - [x] Ensure that `getOrComputeIfAbsent()` methods in `ExtensionContext.Store` do not shadow values from parent stores.","closed","theme: extensions,","sbrannen","2016-06-23T13:17:08Z","2016-06-23T14:01:55Z"
"","357","Jupiter engine does not invoke 'afters' if exception is thrown by test or 'befores'","## Status Quo  In contrast to the behavior of JUnit 4, the Jupiter `TestEngine` currently does not invoke any ""after each"" methods or callbacks if an exception is thrown during test execution or by a ""before each"" method or callback. ## Related Issues - #92 - #359  ## Deliverables - [x] Ensure that ""after each"" methods and callbacks are invoked even if an exception is thrown by the test method or a ""before each"" method or callback.","closed","theme: execution,","sbrannen","2016-06-25T14:33:20Z","2016-06-27T08:15:57Z"
"","359","Jupiter engine does not invoke 'after alls' if exception is thrown by 'before alls'","## Status Quo  In contrast to the behavior of JUnit 4, the Jupiter `TestEngine` currently does not invoke `AfterAllCallback`s or `@AfterAll` methods if an exception is thrown by a `BeforeAllCallback` or `@BeforeAll` method.  ## Related Issues  - #92 - #357  ## Deliverables  - [x] Ensure that ""after all"" methods and callbacks are invoked even if an exception is thrown by a ""before all"" method or callback.","closed","theme: execution,","sbrannen","2016-06-25T17:45:30Z","2018-06-09T11:07:14Z"
"","260","Include license in published archives","## Status Quo  In contrast to the `junit-4.12.jar` which contains a `LICENSE-junit.txt` file, published artifacts such as `junit5-api-5.0.0-SNAPSHOT.jar` currently do not contain the EPL license file. ## Deliverables - [x] Update the Gradle build so that the `LICENSE.md` file (from the root folder) is included in every published archive under `/META-INF/LICENSE.md`.","closed","theme: build,","sbrannen","2016-05-13T10:18:25Z","2016-05-13T17:53:31Z"
"","264","DefaultLauncher should require a non-empty list of engines","## Status Quo  If you fail to put a `TestEngine` JAR in the classpath, JUnit 5 will silently run _nothing_.  This fact recently caused a new user of JUnit 5 quite a headache since his tests were executed via the Maven Surefire plugin but not within the IDE. ## Deliverables - [x] Ensure that the `DefaultLaucher` fails loudly when supplied an empty list of test engines.","closed","type: bug,","sbrannen","2016-05-13T15:20:49Z","2016-05-13T15:53:49Z"
"","308","Gradle plugin must not disable TestNG tests","## Status Quo  If the `runJunit4` flag is set to `true` for the JUnit Gradle plugin, the standard Gradle `test` task will be disabled even if the `test` task is configured using `useTestNG()`. Consequently, no TestNG tests will be executed in this mode. ## Deliverables - [x] Ensure that the JUnit Gradle plugin does not disable the standard `test` task if it's configured to execute TestNG tests.","closed","theme: build,","sbrannen","2016-06-12T12:18:42Z","2016-06-12T12:31:42Z"
"","396","MutableTestExecutionSummary fails to print actual exception type","## Status Quo  If asked to print failures, `MutableTestExecutionSummary` currently prints something along the lines of the following, without including the actual type of the exception.  ``` => Exception: my assertion error message ``` ## Deliverables - [x] Ensure that the actual exception type is output by `MutableTestExecutionSummary` when printing failures.","closed","component: Platform,","sbrannen","2016-07-13T19:23:21Z","2016-08-12T18:08:35Z"
"","168","MethodInvoker.resolveParameters() must validate resolved parameter types","## Status Quo  If a `MethodParameterResolver` resolves a parameter object that does not match the type of the required parameter, we encounter a not-so-useful `java.lang.IllegalArgumentException: argument type mismatch` that is thrown from `ReflectionUtils.invokeMethod()`. From this information, however, we are not able to discern which resolver is the culprit or which parameter could not be resolved properly. ## Deliverables 1. [x] Revise `MethodInvoker.resolveParameters()` so that the actual types of objects returned by parameter resolvers are validated before attempting to invoke the method. 2. [x] Ensure that primitive types can be injected into methods.","closed","theme: extensions,","sbrannen","2016-03-02T17:41:33Z","2016-03-14T15:01:29Z"
"","402","Failure in container does not fail build with JUnit Gradle plugin","## Status Quo  Failing tests fail the build with the JUnit Platform Gradle plugin; however, failing containers are silently ignored (i.e., they don't break the build as they should). ## Steps to Reproduce 1. Add the following failing `@BeforeAll` method to `FirstJUnit5Tests` in the `documentation` project. 2. Run the tests via `DocumentationTestSuite`, and there is a failure as expected. 3. Run the tests via `./gradlew -a :documentation:test`, and you get _BUILD SUCCESSFUL_ with ""0 tests failed"" which is obviously incorrect.  ``` java     @BeforeAll     static void beforeAll() {         fail(""should fail entire test plan"");     } ``` ## Deliverables - [x] Ensure that failures at the container level fail the build when executed via the JUnit Platform Gradle plugin. - [x] Verify that failures at the container level also fail the build for the JUnit Platform Surefire provider.","closed","theme: build,","sbrannen","2016-07-14T15:28:16Z","2016-07-18T08:50:08Z"
"","631","Task inputs for junitPlatformTest are broken","## Status Quo  Executing `gradlew clean test; gradlew test; gradlew test` results in **all** `junitPlatformTest` tasks being executed **thrice** instead of just once. In other words, the _task inputs_ for the task created by the `JUnitPlatformPlugin` no longer work, thus rendering incremental builds with Gradle not so very useful.  ## Deliverables  - [x] Revise task inputs for `junitPlatformTest` so that incremental builds work once again.","closed","component: Platform,","sbrannen","2017-01-19T01:03:42Z","2017-01-25T19:44:20Z"
"","266","Ensure JAR manifests are not regenerated unless there are code changes","## Status Quo  Executing `gradle test` twice in a row results in all tests being executed by the `JUnit5Plugin` again, even though everything is up-to-date in the subsequent run. ## Analysis  After thorough analysis, it turns out that the `JUnit5Plugin` is not the culprit here. Rather, the underlying cause is that JAR manifests are now continuously created with a `buildDate` and `buildTime` (see ca83f28). The net result is that dependent project JARs are always rebuilt, and since these JARs serve as _inputs_ to the `junit5Test` task the tests are always executed. ## Deliverables - [x] Ensure that JAR manifests are only generated if code is compiled or recompiled.","closed","theme: build,","sbrannen","2016-05-15T16:20:53Z","2016-05-16T14:06:31Z"
"","85","Ensure junit5Test is executed by 'gradle test' task within JUnit's build","## Status Quo  Executing `gradle test` currently does not execute the `junit5Test` task within JUnit's build. ## Scope  This issue only concerns JUnit's own build. This issue does _not_ concern the `JUnit5Plugin` itself. ## Deliverables  Ensure that the `junit5Test` task is executed transitively via `gradle test` within JUnit's build.","closed","type: task,","sbrannen","2016-01-04T13:47:14Z","2016-01-05T13:54:44Z"
"","83","Introduce blacklist of errors that always terminate test plan execution","## Status Quo  Exception handling code within the `JUnit5TestEngine` currently treats all errors the same. For example, if an `OutOfMemoryError` is thrown it will be treated the same as an `AssertionError`: both will fail the test, but in the case of the former the current test plan should actually be halted. ## Deliverables - [x] Introduce a _blacklist_ of errors that should always terminate test plan execution. - [x] Refactor all exception handling code within the `JUnit5TestEngine` so that blacklisted errors always terminate the current `TestPlan` immediately.","closed","theme: execution,","sbrannen","2016-01-02T18:57:37Z","2016-01-05T16:18:14Z"
"","819","Class loading by name is not supported for multidimensional arrays","## Status Quo  Due to the investigative work performed in conjunction with #815, I noticed that the JUnit Platform currently has no support for loading classes by name for multidimensional arrays.  Consequently, it is currently impossible to create a `MethodSelector` (e.g., via `DiscoverySelectors`) which selects a method by _fully qualified method name_ if the method accepts a multidimensional array as an argument.  A soon-to-be common use case for such a method selection would be a `@ParameterizedTest` that accepts `int[][][]` or `String[][]` as an argument.  ## Analysis  As an intermediary step in #815, I added support for 2D arrays for primitives in `ReflectionUtils`. That solution is fine in terms of a hard-coded solution for common use cases; however, we need a generic solution to support multidimensional primitive arrays and object arrays.  ## Related Issues  - #810  - #815   ## Deliverables  - [x] Support class loading by name for multidimensional primitive arrays.   - [x] using JVM internal syntax   - [x] using source code syntax - [x] Support class loading by name for multidimensional object arrays.   - [x] using JVM internal syntax   - [x] using source code syntax - [x] Resolve all TODOs in `ReflectionUtilsTests` and `DiscoverySelectorsTests`.","closed","theme: discovery,","sbrannen","2017-04-30T16:03:41Z","2017-05-01T14:59:10Z"
"","556","Configure Eclipse plugin to include JOpt Simple in generated .classpath file","## Status Quo  Due to the changes introduced in #309, executing `gradle cleanEclipse eclipse` no longer results in a generated `.classpath` file that includes the JOpt Simple dependency. Consequently, it is impossible to build the `junit-platform-console` module within Eclipse when using this mechanism.  ## Deliverables  - [x] Modify `junit-platform-console.gradle` so that the JOpt Simple dependency is once again included in the generated `.classpath` file for Eclipse.","closed","component: Platform,","sbrannen","2016-11-02T16:37:02Z","2016-11-03T16:57:56Z"
"","268","Introduce support for constructor injection","## Status Quo  Dependency injection can currently be performed for methods via the `ParameterResolver` API; however, there is no support for _constructor injection_.  Since #267 has been completed it should be rather straightforward to support constructor injection as well. ## Deliverables - [x] Introduce support for constructor injection via the `ParameterResolver` API.","closed","theme: extensions,","sbrannen","2016-05-16T15:35:48Z","2016-05-26T20:25:16Z"
"","126","The UniqueID should identify the location of a test in the test plan tree","## Status Quo  Currently, we generate the unique ids for `TestDescriptor`s during the test discovery phase. The unique ids are injected into the concrete `TestDescriptor` constructor and cannot be changed.  Given a test plan tree: - `EngineDescriptor` (junit5), ID: [engine:junit5]   - `ClassDescriptor` (SomeClass), ID: [engine:junit5]/[class:SomeClass]     - `MethodDescriptor` (SomeClass, Method:test), ID: [engine:junit5]/[class:SomeClass]/[method:test]     - `NestedClassDescriptor` (SomeClass.Nested), ID: [engine:junit5]/[class:SomeClass]/[nested:Nested]       - `MethodDescriptor` (SomeClass.Nested, Method:nestedTest), ID: [engine:junit5]/[class:SomeClass]/[nested:Nested]/[method:nestedTest]  Before creating the `TestDescriptor`, we need to know the unique id for it, especially the ""local part"" that is appended to the parent's unique id. Currently, we are responsible for all the `TestDescriptor`s and, therefore, we know the local parts very well. In order to allow other people to extend this mechanism, we need to provide a more flexible solution to this.  In this way, we were thinking about providing a builder, that is aware of the current path and to which one can only append the local part (see #106). Still, this approach has a down side: It requires the id to be generated before the `TestDescriptor` is created. If we follow this path then we can never change the position of a `TestDescriptor` within the test plan tree, once it has been added to the tree. Reason: The position within the tree has a direct dependency to the execution of the tests. If a `TestDescriptor` was moved to another parent the unique id should not be equals. Otherwise, the unique id would not be unique and we could not reconstruct the test plan tree for any given unique id. ## Discussion / Proposals  Is it required or even wanted that one can change the position of a `TestDescriptor` in the test plan tree.  - Option 1: Yes, it should be possible (at least during test discovery)   - Proposal 1: The unique id should not be required as a constructor argument   - Proposal 2: The unique id should reflect any change to the position of a `TestDescriptor` and, therefore, should be calculated based on its position in the tree (e.g. parent.getUniqueId() + local part) - Option 2: No, it should not be possible   - Proposal 1: We should make the link to the parent `TestDescriptor` immutable and require it to be provided as a constructor argument as well.   - Proposal 2: #106 should be implemented","closed","","bechte","2016-01-19T13:05:25Z","2019-07-19T19:33:02Z"
"","478","ExtensionContext.Store is not thread-safe","## Status Quo  Concurrent access to an `ExtensionContext.Store` is not thread-safe. ## Deliverables - [x] Introduce thread-safety in `ExtensionContext.Store`","closed","component: Jupiter,","sbrannen","2016-08-25T16:49:08Z","2016-11-30T08:54:27Z"
"","285","Gradle plugin should not use JUnit 4 Engine when runJunit4 is false","## Status Quo  Behind the scenes, the JUnit Gradle plugin uses the `ConsoleRunner` (from the `junit-console` module) to actually execute the test plan. Due to #146, the `junit-console` includes `junit4-engine`, `junit5-engine`, and `junit4-runner` as mandatory run-time dependencies. Consequently, the `junit4` and `junit5` engines are always on the classpath for the JUnit Gradle plugin, which means that those engines are _included_ by default. The `junit4` engine is therefore _included_ even if the `runJunit4` flag for the plugin has been explicitly set to `false`, which is both misleading and unacceptable. ## Related Issues - #291 - #295 - #303  - #304  - #307 ## Deliverables - [x] Add a direct compile-time dependency on `junit-console` in `junit-gradle.gradle`. - [x] Refer to the `ConsoleRunner` via a class reference within the JUnit Gradle plugin instead of via a hard-coded string. - [x] Introduce a new `disableStandardTestTask` configuration flag for disabling execution of the standard Gradle `test` task; default the value of the flag to `true`. - [x] Remove the `runJunit4` configuration flag since it has been superseded by `engines { include ... }` and `engines { exclude ... }` support. - [x] Covert `version` property plugin configuration into a more appropriately named `platformVersion` property. - [x] Ensure that only the minimum set of dependencies on JUnit Platform modules is added to the classpath for the task created by the JUnit Gradle plugin.   - In other words, ensure that undesirable transitive dependencies of the `junit-console` module are no longer added to the classpath.   - See discussion in [Gradle Forum](https://discuss.gradle.org/t/how-to-add-plugins-dependencies-to-custom-task/18025) - [x] Ensure that standard project classpaths are no longer modified.","closed","theme: build,","marcphilipp","2016-05-27T21:00:04Z","2016-06-13T22:14:22Z"
"","734","Introduce find-first search algorithm in ReflectionUtils for methods","## Status Quo  As discussed in issue #731 and the commit message for cf4a63be5e6fa69baf5d9eedaf662b6ca0665981, the current `findMethod()` search algorithm in `ReflectionUtils` always traverses the entire type hierarchy even after having found a matching method. Note, however, that the current algorithm does not realize it has found the desired method since filtering isn't applied until the entire hierarchy has been traversed (i.e., it's _lazy_ in terms of applying the method predicate).  Traversing the entire type hierarchy is obviously unnecessary, since such a ""find first"" search should terminate as soon as a matching result has been found.  ## Analysis  In https://github.com/junit-team/junit5/issues/731#issuecomment-285960773, @gaganis proposed the user of a _visitor_ pattern in order to avoid duplication of the search algorithms used when ""finding the first such method"" and ""finding all such methods"". However, the algorithm for finding such a _first method_ would likely be considerably simpler. For example, it will not need to take into account method shadowing, since such an algorithm would only ever use _bottom-up_ search semantics and stop once it finds the first method matching the predicate. In addition, it will not need to track methods already visited in a collection. Furthermore, the predicate would have to be applied _eagerly_, not _lazily_ like in the current search algorithm.  It remains to be seen whether existing code from `findAllMethodsInHierarchy()` can be sensibly reused and/or modified. This will have to be assessed in greater detail while implementing the new algorithm.  ## Related Issues  - #969   ## Deliverables  - [x] Introduce an efficient _find-first_ search algorithm in `ReflectionUtils` for methods.","closed","component: Platform,","sbrannen","2017-03-13T11:09:59Z","2017-07-23T14:41:16Z"
"","793","Ensure extension composability in JUnit Jupiter","## Status Quo  As can be seen in #766, it is currently too easy to introduce new extensions in JUnit Jupiter that cannot be composed.  We therefore need to introduce a policy and corresponding tests to ensure the composability of all extension APIs in JUnit Jupiter.  ## Requirements  A concrete extension must be able to implement all extension APIs supported by JUnit Jupiter without any naming conflicts or ambiguities with regard to method names or method signatures.  ## Proposals  The following table displays the proposed renamings for ambiguous extension API methods.  API                                     | Old Name             | New Name --------------------------------------- | --------             | -------- `ParameterResolver`                     | `supports()`         | `supportsParameter()` `ParameterResolver`                     | `resolve()`          | `resolveParameter()` `ContainerExecutionCondition`           | `evaluate()`         | `evaluateContainerExecutionCondition()` `TestExecutionCondition`                | `evaluate()`         | `evaluateTestExecutionCondition()` `TestTemplateInvocationContextProvider` | `supports()`         | `supportsTestTemplate()` `TestTemplateInvocationContextProvider` | `provide()`          | `provideTestTemplateInvocationContexts()`  ## Deliverables  - [x] Introduce a policy to ensure extension composability in JUnit Jupiter.   - for example, in the Wiki and as a step in the release process. - [x] Introduce `KitchenSinkExtension` for visual inspection of all extension APIs implemented in a single concrete extension. - [x] Introduce tests to ensure extension composability in JUnit Jupiter. - [x] Rename existing extension API methods to ensure extension composability.","closed","component: Jupiter,","sbrannen","2017-04-15T15:57:19Z","2019-01-24T16:28:38Z"
"","251","Enable use of JUnitException in @throws Javadoc in junit-engine-api module","## Status Quo  Although the `junit-engine-api` has a compile time dependency on `junit-commons`, the Checkstyle plugin currently does _not_ allow `JUnitException` to be used in a `@throws` Javadoc declaration. Attempting to do so will result in errors similar to the following.  > :junit-engine-api:checkstyleMain[ant:checkstyle] /home/travis/build/junit-team/junit5/junit-engine-api/src/main/java/org/junit/gen5/engine/UniqueId.java:42:12: error: Unable to get class information for @throws tag 'org.junit.gen5.commons.JUnitException'. >  > [ant:checkstyle] /home/travis/build/junit-team/junit5/junit-engine-api/src/main/java/org/junit/gen5/engine/UniqueId.java:42:12: error: Unused @throws tag for 'org.junit.gen5.commons.JUnitException'. ## Deliverables - [x] Fix the Gradle build so that exceptions defined in `junit-commons` may be used in `@throws` declarations in `junit-engine-api`.","closed","theme: build,","sbrannen","2016-05-09T15:27:17Z","2016-05-09T15:39:08Z"
"","295","Introduce support for required and excluded engines in ConsoleRunner","## Status Quo  Although core support for _required_ and _excluded_ engines was introduced in #291, the `ConsoleRunner` currently only supports a single _required_ `TestEngine` ID. ## Related Issues - #285 - #291 - #303  ## Deliverables - [x] Replace `requiredEngineFilter` support in the `ConsoleRunner` with support for multiple _required_ engines - [x] Introduce support in the `ConsoleRunner` for multiple _excluded_ engines","closed","theme: build,","sbrannen","2016-06-05T14:58:19Z","2016-06-11T17:09:47Z"
"","95","Return original object in Preconditions","## Status Quo  All methods in `Preconditions` currently have `void` return types. Consequently, the acts of checking a precondition and assignment cannot be combined in a single statement.  For example:  ``` java MyClass(Class testClass) {     Preconditions.notNull(testClass, ""Class must not be null"");     this.testClass = testClass; } ``` ## Proposal  As pointed out by @kcooney in #94, returning the original object from a precondition method would allow the above constructor to be simplified as follows.  ``` java MyClass(Class testClass) {     this.testClass = Preconditions.notNull(testClass, ""Class must not be null""); } ``` ## Deliverables - [x] Refactor `Preconditions` so that precondition methods return the original value when feasible. - [x] Refactor usage of `Preconditions` to make use of this new feature.","closed","type: enhancement,","sbrannen","2016-01-09T13:16:04Z","2016-01-10T21:42:51Z"
"","477","Non-standard method names are not supported for discovery selection","## Status Quo  All `selectMethod()` variants in `DiscoverySelectors` attempt to eagerly load the selected method with the assumption that the supplied method name follows Java's standard convention for methods.  This is totally fine for standard Java methods; however, for testing frameworks such as Spock the method name might contain special characters.  For example, `""applying the plugin""` is a valid method name in a Spock specification (at least within the Groovy source code). In the decompiled byte code, however, we see that the actual Java method name is something completely different, such as `$spock_feature_0_0` in the following example.  ``` java // Method descriptor #26 ()V // Stack: 18, Locals: 3 @org.spockframework.runtime.model.FeatureMetadata(line=(int) 32,   name=""applying the plugin"",   ordinal=(int) 0,   blocks={@org.spockframework.runtime.model.BlockMetadata(kind=org.spockframework.runtime.model.BlockKind.WHEN,           texts={}),@org.spockframework.runtime.model.BlockMetadata(kind=org.spockframework.runtime.model.BlockKind.THEN,           texts={})},   parameterNames={}) public void $spock_feature_0_0(); ```  For this reason, attempting to _select_ the `""applying the plugin""` method by name (e.g., via `selectMethod(""org.junit.platform.gradle.plugin.JUnitPlatformPluginSpec#applying the plugin"")`) results in an exception similar to the following.  ``` org.junit.platform.commons.util.PreconditionViolationException:      'org.junit.platform.gradle.plugin.JUnitPlatformPluginSpec#applying the plugin'     could not be resolved to a unique method ``` ## Related Resources - [IntelliJ IDEA](https://youtrack.jetbrains.com/issue/IDEA-159975) issue on the same topic. ## Deliverables - [x] Introduce a `selectMethod()` variant that does not attempt to eagerly load the selected method.   - The `MethodSelector` could then provide the input method name as a `String` and let the `TestEngine` decide how to load or reference the method. - [x] Consider if all existing method selectors should be revised to avoid eager loading of methods using reflection. - [x] Consider if all existing class selectors should be revised to avoid eager loading of classes using reflection.","closed","theme: discovery,","sbrannen","2016-08-24T18:21:30Z","2016-11-30T08:29:22Z"
"","403","Set up JUnit 5 build on Microsoft Windows","## Status Quo  A bug reported in #398 made it apparent that the JUnit 5 build is currently not compatible with Microsoft Windows. ## Deliverables - [x] Introduce a CI build that runs on Microsoft Windows.   - [AppVeyor](https://www.appveyor.com/) may be a viable option, especially since it's free for open source projects.","closed","theme: build,","sbrannen","2016-07-14T17:55:35Z","2016-07-16T20:45:07Z"
"","815","MethodSelector should accept parameter type names supplied in source code syntax","## Status Quo  `void test(int i) {}` has signature `test(int)`, though `void test(int[] ints)` has signature `test([I)`.  Source: `org.junit.platform.commons.util.ReflectionUtils#primitiveNameToTypeMap`  ## Proposal  I'd rather expect the signature to be JVM method signature or presentable method signature.  Could you please consider to change this?","closed","component: Platform,","akozlova","2017-04-28T15:14:32Z","2018-04-09T13:22:55Z"
"","92","Test execution exceptions are not supplied to extensions","## Status Quo  `TestExtensionContext` does not provide access to any exception thrown during execution of the test method or other extensions. ## Deliverables - [x] Reintroduce a `getTestException()` method in the `TestExtensionContext` API.   - Note: the prototype actually had such a [`getTestException()`](https://github.com/junit-team/junit-lambda/blob/prototype-1/junit5-api/src/main/java/org/junit/gen5/api/extension/TestExecutionContext.java#L37-L39) method. - [x] Ensure that the JUnit Jupiter `TestEngine` infrastructure tracks any exceptions encountered during test method or extension execution and supplies the exception to extensions via the `TestExtensionContext`.   - Note: it is assumed that the engine already properly tracks the exceptions, but tests need to be introduced to verify the expected behavior. ## Further Resources  See the `afterEach()` method in the [SpringExtension](https://github.com/sbrannen/spring-test-junit5/blob/master/src/main/java/org/springframework/test/context/junit/jupiter/SpringExtension.java) for a concrete example of where the _test exception_ is required.","closed","theme: execution,","sbrannen","2016-01-08T20:07:56Z","2016-06-26T14:56:33Z"
"","293","Decide the fate of ReportEntry.appendDescription()","## Status Quo  `ReportEntry` currently has two `appendDescription()` methods. - `appendDescription(Appendable, String)` appears to exist solely for the purpose of generating XML reports in `XmlReportWriter`. - `appendDescription(Appendable)` is used in `ColoredPrintingTestListener` and `JUnit5RunnerListener`, but these invocations of `appendDescription(Appendable)` could likely be replaced with `ReportEntry#toString()` which includes the same information in a different format. ## Deliverables - [x]  Decide the fate of both `ReportEntry.appendDescription()` methods (i.e., whether we need them in `ReportEntry` at all, whether the custom formatting logic could be moved to `XmlReportWriter`, etc.) - [x] Either document the formatting logic in `appendDescription(Appendable, String)` or delete both variants","closed","theme: documentation,","sbrannen","2016-06-04T14:31:56Z","2016-06-08T13:59:31Z"
"","331","Support methods with parameters in ReflectionUtils.loadMethod()","## Status Quo  `ReflectionUtils.loadMethod(String)` currently does not support loading of a method by its _fully qualified method name_ if the method accepts parameters. ## Analysis  Ideally, `loadMethod(String)` should delegate to `ReflectionUtils.findMethod(Class, String, Class...)` internally. ## Related Issues - #331 - #332 - #392","closed","component: Platform,","sbrannen","2016-06-21T10:31:19Z","2016-08-07T17:58:28Z"
"","332","Support primitive types and arrays in ReflectionUtils.loadClass()","## Status Quo  `ReflectionUtils.loadClass(String, ClassLoader)` currently does not support loading classes by name for primitive types or arrays. ## Related Issues - #331","closed","component: Platform,","sbrannen","2016-06-21T10:32:35Z","2016-08-07T17:57:09Z"
"","272","Overhaul exception handling in MethodFinder","## Status Quo  `org.junit.gen5.engine.junit5.discovery.MethodFinder` currently explicitly throws a `RuntimeException` if a named class cannot be loaded and swallows an `IndexOutOfBoundsException` if the supplied method specification does not follow the required format. ## Deliverables - [x] Ensure that `MethodFinder` only throws instances of `JUnitException` as required by our coding guidelines.","closed","type: bug,","sbrannen","2016-05-21T14:41:50Z","2016-05-22T12:23:21Z"
"","252","Apply InstancePostProcessor extensions for every test instance","## Status Quo  `InstancePostProcessor` extensions currently only get applied during the invocation of `MethodTestDescriptor.execute()`; however the actual _instance_ is created in `MethodTestDescriptor.prepare()`. Furthermore, outer instances for `@Nested` test classes are created transparently in `NestedClassTestDescriptor.testInstanceProvider()`. ## Analysis  For _classic_ tests, this does not pose a problem; however, for `@Nested` tests it means that `InstancePostProcessor` extensions are not applied to instances of outer classes when test methods in a nested class are executed.  See _TODOs_ in `InstancePostProcessorTests`. ## Deliverables - [x] Ensure that `InstancePostProcessor` extensions are applied immediately after instance creation for _all_ test instances (including outer instances), not just when test methods are executed.","closed","theme: execution,","sbrannen","2016-05-10T18:33:31Z","2016-05-13T14:00:00Z"
"","291","Introduce support for required and excluded engines in EngineFilter","## Status Quo  `EngineIdFilter` is currently only used to _require_ a single `TestEngine` within the _entire_ test plan, which is very lacking in terms of support for multiple engines going forward.  As the number of engines supported on the JUnit Platform increases, users will need the ability to require one or more engines and to exclude one or more engines simultaneously. ## Related Issues - #285 - #295 - #303  ## Deliverables - [x] Convert `requireEngineId(String)` in `EngineIdFilter` to `requireEngines(String...)`. - [x] Introduce `excludeEngines(String...)` in `EngineIdFilter`.","closed","type: enhancement,","sbrannen","2016-05-31T12:55:41Z","2016-06-11T18:11:09Z"
"","123","Introduce DiscoverySelectors for files and folders","## Status Quo  `DiscoverySelectors` can currently select package names, class names, and method names.  Other names (files, specs, etc.) which might be needed by other engines are not yet supported. ## Related Issues - #301 - #453 ## Deliverables - [x] Support selection of files in the file system. - [x] Support selection of folders in the file system.","closed","component: Platform,","jlink","2016-01-18T10:17:48Z","2016-11-30T08:54:26Z"
"","104","DefaultLauncher must ensure uniqueness of engine IDs","## Status Quo  `DefaultLauncher.discoverRootDescriptor()` currently delegates to a `TestEngineRegistry` to retrieve all registered test engines; however, no check is performed to ensure that no two engines claim to be the same engine (i.e., have the same unique ID). ## Deliverables - [x] Ensure the uniqueness of engine IDs for registered engines within the `DefaultLauncher`.","closed","type: enhancement,","sbrannen","2016-01-12T14:17:40Z","2016-03-10T17:11:48Z"
"","461","Align classpath command-line options for ConsoleLauncher with Java","## Status Quo  `ConsoleLauncher` currently supports a `-p` command-line option for configuring additional classpath entries; however, this short form deviates from the `-cp` command-line option for the standard `java` executable. ## Rationale  It would beneficial to users of the `ConsoleLauncher` to align the classpath command-line options for `ConsoleLauncher` with Java.  Furthermore, doing so also frees up the `-p` option for later use in selecting packages for test discovery (see #437). ## Deliverables - Rename `-p` command-line option to `-cp` in the `ConsoleLauncher`","closed","component: Platform,","sbrannen","2016-08-12T18:25:54Z","2016-11-30T08:54:26Z"
"","474","Classpath scanning eagerly loads classes unnecessarily","## Status Quo  `ClasspathScanner.processClassFileSafely()` _eagerly_ loads candidate classes without applying any filtering (other than the recently adding filtering for `package-info`). Consequently, every single class in the classpath is loaded even if it will never be needed for the current test plan.  Although `ClassFilter.includeClassNamePattern(String)` can be used to filter out scanned classes, this unfortunately occurs after classpath scanning has occurred, meaning that even unused test classes are unnecessarily eagerly loaded.  This leads to unnecessary loading of classes, and since classes may have `static` initialization blocks, this also potentially leads to unnecessary execution of code. ## Worst Case Scenario  Due to the recently added support for scanning JARs in the classpath (see #399), the `ClasspathScanner` can now potentially _load every single class in the entire JVM_ if all classpath roots are scanned _and_ the user selects the default package as the base package from which to begin scanning. ## Related Issues - #313  - #314  ## Deliverables - [x] Apply filtering to classpath scanning candidates before loading the class (i.e., based solely on the file name of the `.class` file).   - [x] Supply class name patterns registered via `ClassFilter.includeClassNamePattern(String)` to the classpath scanning algorithms - [x] Change includeClassNamePattern(String pattern) to includeClassNamePatterns(String... patterns) and combine the patterns within a single filter using OR semantics - [x] Do the same for the `@IncludeClassNamePattern` annotation. - [x] Create follow-up ticket for M4 to delete deprecated `ClassFilter.includeClassNamePattern(String)` and `@IncludeClassNamePattern`","closed","component: Platform,","sbrannen","2016-08-21T16:20:00Z","2016-11-30T08:28:14Z"
"","438","Introduce lambda based timeout assertions","## Status Quo  `Assertions` provides `assertThrows` and `expectThrows` for expected exceptions but does not provide support for asserting timeouts. ## Deliverables - [x] Introduce lambda based timeout support in `Assertions`.","closed","theme: programming model,","sbrannen","2016-07-26T14:37:29Z","2016-11-30T08:56:20Z"
"","839","Introduce BeforeTestInstantiationCallback extension API","## Short story:  For our test infrastructure to create test data, we must distinguish calls during the static initialization of each test class from calls during test instantiation for each test method. This could be solved by the proposed `BeforeTestInstantiationCallback`.  ## Long story:  When we write our tests, we want to restrict the data that have to be set explicitly to those that the specific test requires. All other properties are set randomly, but valid. Naturally using random data may introduce randomly failing tests, so we need the means to easily reproduce test failures that e.g. happen in the CI environment. Reproducing such failures requires knowing the seed values for our random data when the specific test was executed. This is where we want to take advantage of a JUnit 5 extension. It has to store one seed value at the class level, for example if static constants are initialized using our random mechanism. In addition, it has to store the seed value at the instance level, for each test run. If a test should fail, the respective seed values must be reported in the failure message. If the failure is related to the use of random data, all this together allows us to reproduce it in any other environment. Example:  ```java private static final Address staticAddress =      createRandomAddress(); // determined by the class seed   private Address instanceAddress =      createRandomAddressBuilder() // determined by the instance seed         .withStreet(""some street"")         .build();   @Test void someTest() {     Address anotherAddress =          createRandomAddress(); // also determined by the instance seed     // ... } ```  We note the class seed in a `BeforeAllCallback`, which is the perfect place. The switch to using the instance seed however, has to be right before the test instance is created, to cover random data used for instance field initialization, which is a rather common use case in our tests. Obviously, the `TestInstancePostProcessor` callback is too late for switching from the class seed to the instance seed. Currently we have an ugly workaround, where we check the stacktrace to switch to the instance seed, as soon as we detect a call from the test's constructor. If there are no such calls we switch to the instance seed in the `TestInstancePostProcessor` callback.  The proposed `BeforeTestInstantiationCallback` would be the natural place to make the required switch to the instance seed trivial.  Do you think, adding the `BeforeTestInstantiationCallback` would be harmful?","closed","status: stale,","codecholeric","2017-05-05T15:19:45Z","2021-06-19T12:50:13Z"
"","235","Remove unused imports","## Removed unused imports in several classes.  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","mureinik","2016-05-01T03:02:07Z","2016-05-02T12:52:48Z"
"","224","Remove unused imports","## Remove import unused import statements.  I hereby agree to the terms of the JUnit Contributor License Agreement.  Signed-off-by: Allon Mureinik mureinik@gmail.com","closed","","mureinik","2016-04-12T06:56:23Z","2016-04-14T20:05:39Z"
"","411","Introduce DiscoverySelector for a fully qualified method name","## Related Issues - #409  - #410","closed","component: Platform,","sbrannen","2016-07-15T18:51:30Z","2016-08-07T19:11:00Z"
"","149","Document test execution lifecycle regarding user code and extensions","## Related Issues - #386  - #426  ## Deliverables - [x] Document test execution lifecycle regarding user code (i.e., test classes, test methods, before methods, and after methods) and extensions in the User Guide - [x] Add a diagram to the User Guide to visualize test lifecycle and where extensions are called. ## Original Issue Description  Hello,  I'm using JUnit 4.12 and I have a bunch of selenium tests. All I want is to have a rule that captures a screenshot when the test fails. Just like this guy here:  http://stackoverflow.com/questions/12078982/apply-rule-after-each-test-and-before-each-after-in-junit  Apparently it is not possible to do this with JUnit 4.x `Rule` because in my `@After` methods I logout the user and they see the homepage. So when tests fail I always get screenshots of homepage, rather than the page that broke the tests.  I'm reading now about Exception handling extension points here:  http://junit-team.github.io/junit5/  but to me it is still not clear if these extension points will be executed after the `@BeforeEach` and before the `@AfterEach`. Can you please clarify that?  Thanks.","closed","component: Jupiter,","ptahchiev","2016-02-06T08:59:41Z","2017-04-19T13:01:38Z"
"","900","Random Java Object Generator","## Random java Object Generator    - ( ) **Feature request.** In most cases while writing Junits we supply sample input to the methods to test. And this sample input is mostly some domain object or a list of domain objects. I feel it would be helpful, if there is a feature/class which generates the domain objects from its classes, after taking into consideration, the data types of the fields in it.  Need your inputs on this on. Thanks!","closed","","sajjusajuu","2017-06-26T17:28:12Z","2017-06-27T06:57:26Z"
"","315","Gradle plugin should support ignoring test failures","## Proposal  This mirrors Gradle's `Test` task's  [ignoreFailures](https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html#org.gradle.api.tasks.testing.Test:ignoreFailures) option.   It should allow the Gradle build to continue even if `junitPlatformTest` fails. ## Related Issues - #475","closed","3rd-party: Gradle,","raniejade","2016-06-18T14:02:22Z","2017-10-14T17:08:10Z"
"","48","Introduce first-class support for scenario tests","## Proposal  The current proposal is to introduce the following: - `@ScenarioTest`: class-level annotation used to denote that a test class contains steps that make up a single scenario test. - `@Step`: method-level annotation used to denote that a test method is a single _step_ within the scenario test.  The `@Step` annotation will need to provide an attribute that can be used to declare the next step within the scenario test. Steps will then be ordered according to the resulting dependency graph and executed in exactly that order.   For example, a scenario test could look similar to the following:  ``` java @ScenarioTest class WebSecurityScenarioTest {      @Step(next = ""login"")     void visitPageRequiringAuthorizationWhileNotLoggedIn() {         // attempt to visit page which requires that a user is logged in         // assert user is redirected to login page     }      @Step(next = ""visitSecondPageRequiringAuthorizationWhileLoggedIn"")     void login() {         // submit login form with valid credentials         // assert user is redirected back to previous page requiring authorization     }      @Step(next = ""logout"")     void visitSecondPageRequiringAuthorizationWhileLoggedIn() {         // visit another page which requires that a user is logged in         // assert user can access page     }      @Step(next = END)     void logout() {         // visit logout URL         // assert user has been logged out     }  } ```  ## Related Issues  - #13  - #419  - #607  - #884","open","component: Jupiter,","sbrannen","2015-12-03T21:27:19Z","2022-07-03T00:58:16Z"
"","103","Introduce ExceptionHandler extension point","## Proposal  ``` java interface ExceptionHandlerExtensionPoint extends ExtensionPoint {    void handleException(TestExtensionContext context, Throwable throwable) throws Throwable; } ``` ### Tasks - [x] Implement extension point with tests and everything - [x] Add example usage in documentation - [x] Introduce `@ExpectToFail` annotation in `document` module to allow sample test cases to fail  related to #92.","closed","theme: extensions,","marcphilipp","2016-01-12T10:28:58Z","2016-05-24T15:12:59Z"
"","54","Split Engine API package into subpackages","## Proposal  (not checked for package cycles etc., yet)  org.junit.gen5.engine.api - TestDescriptor - TestSource - TestTag - TestEngine - ExecutionRequest - EngineExecutionListener - EngineAwareTestDescriptor - discovery   - AllTestsSpecification   - ClassSpecification   - ClassFilter   - ClassFilters   - ClassNameFilter   - EngineFilter   - MethodSpecification   - PackageSpecification   - TestPlanSpecification   - TestPlanSpecificationElement   - TestPlanSpecificationElementVisitor   - UniqueIdSpecification - support   - descriptor     - AbstractTestDescriptor     - EngineDescriptor     - FileSystemSource     - JavaSource   - hierarchical     - Container     - EngineExecutionContext     - HierarchicalTestEngine     - HierarchicalTestExecutor     - Leaf","closed","","marcphilipp","2015-12-11T13:06:34Z","2016-01-21T08:09:22Z"
"","257","name variable properly","## proper name for lambda parameter  The parameter is a descriptor, not an engine.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: task,","signed","2016-05-12T19:52:31Z","2016-05-12T21:23:21Z"
"","724","Explicitly catch RuntimeExceptions","## Overview  I noticed several instances where `Exception` was caught, but was not sure if this was done intentionally to also catch `RuntimeException` or not.  I decided to dig a bit deeper and found that this was indeed intentional. Since this was not clear (to me) from the start I thought it might be a good idea to make it explicit.  In `platform.commons.util.ClasspathScanner.java` I was unsure whether or not `RuntimeException` was a possibility, and therefore I included it to prevent accidentally changing behaviour.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","status: works-as-designed,","jadeleeuw","2017-03-11T14:24:10Z","2017-03-16T15:42:10Z"
"","654","Legacy reporting in surefire provider","## Overview This pr implements @marcphilipp solution for subclass names in legacy reporting in #616   Open questions:  1 To make the existing ListenerAdapter tests pass with the new legacy reporting. I changed the implementation of generateDefaultDisplayName in ClassTestDescriptor. Before it used the classname but stripped the package prefix.   However there were other tests that expected just the classname, these pass now because I changed the expected value to the canocicalName instead of the simpleClassName. Since this is a display name and as mentioned in the javadoc this string is only used for display and should never be parsed, I think this is not a breaking change, however It might not be the behaviour you want for showing the name of the just the test to a user instead of a reporting tool.  The name including the packages, is however required for the default implementation to make any sense at all. Should we instead split this up into two different methods?  2 There is an override of getLegacyReportingInfo in ClassTestDescriptor, that juggles around the class name and the method name, this feels a bit hacky. Would it be possible to solve this behaviour in the default implementation by checking if the descriptor is a container?  3 What would you like to see in the javadoc for the legacy info?  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","status: superseded,","LiamClark","2017-02-16T14:37:38Z","2017-03-12T15:15:32Z"
"","723","JUnit 4 parameterized support as an extension (#715)","## Overview This allows running parameterized tests from JUnit 4 with Field and Constructor injection, fixes #715. Fail silently when asked whether we can support the test case, but fail explicitly with an exception when parameters can't be resolved.  It does this by combining a TestTemplateContextProvider that adds one context for every Object[] in the parameters Collection. These contexts contain an additional extension that performs the field injection if required.  However, when constructor injection is used, there needs to be a parameter resolver in place before the TestTemplateContextProvider is even triggered, therefore the parameter resolver is not an additional extension. Having the parameter resolver on the top level causes us to lose the context of which TemplateContext we were in and this information has to be regained by carefully counting the parameter resolutions. Is there a cleaner way to solve this?  I Store the results of the parameters factory function In the ClassContext store, so we only call the parameters function once.  The tests are all integration tests, since doing unit tests resulted in unwieldy mocking, however, the amount of 'TestSubjectClasses' needed seems a bit much any idea's to clear this up?  This also ties in with the production code, I tried to keep everything as private as possible, maybe the tests could be simpler if I open up the access modifiers a bit, what would your design goals be here?  I tried to follow the behavior of JUnit 4 as closely as possible are there perhaps any behaviors missing?  Lastly, there is a lot of passing around of ExtensionContexts perhaps extracting a class to hold this could simplify the code a bit.   I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","LiamClark","2017-03-11T13:05:48Z","2019-05-04T18:33:40Z"
"","816","Reword to clarify how callbacks affect dynamic tests.","## Overview Reworded dynamic test lifecycle warning to be clearer  Issue: #754  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Jupiter,","ghost","2017-04-28T15:18:30Z","2017-11-18T00:24:14Z"
"","647","Support bridged methods","## Overview In preparation of fixing #333, convert `testBridge()` https://github.com/junit-team/junit4/pull/1413 test from JUnit 4 and disable it because the current Jupiter implementation produces this call sequence: ``` () -> assertEquals(""static parent.beforeAll()"", bridgeMethodNameSequence.get(0)), () -> assertEquals(""parent.beforeEach()"", bridgeMethodNameSequence.get(1)), () -> assertEquals(""child.anotherBeforeEach()"", bridgeMethodNameSequence.get(2)), () -> assertEquals(""child.test()"", bridgeMethodNameSequence.get(3)), () -> assertEquals(""parent.afterEach()"", bridgeMethodNameSequence.get(4)),  // should be 5 () -> assertEquals(""child.anotherAfterEach()"", bridgeMethodNameSequence.get(5)), // should be 4 () -> assertEquals(""static parent.afterAll()"", bridgeMethodNameSequence.get(6)) ``` instead of the expected: ``` () -> assertEquals(""static parent.beforeAll()"", bridgeMethodNameSequence.get(0)), () -> assertEquals(""parent.beforeEach()"", bridgeMethodNameSequence.get(1)), () -> assertEquals(""child.anotherBeforeEach()"", bridgeMethodNameSequence.get(2)), () -> assertEquals(""child.test()"", bridgeMethodNameSequence.get(3)), () -> assertEquals(""child.anotherAfterEach()"", bridgeMethodNameSequence.get(4)), () -> assertEquals(""parent.afterEach()"", bridgeMethodNameSequence.get(5)), () -> assertEquals(""static parent.afterAll()"", bridgeMethodNameSequence.get(6)) ```  - [x] Analyze current implementation regarding bridge methods - **ignore** them in the result set of `ReflectionUtils.findAllMethodsInHierarchy(Class, MethodSortOrder)` - [x] Ensure the Jupiter engine behaves correctly for bridge methods  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2017-02-11T21:32:19Z","2017-03-12T15:14:18Z"
"","769","VintageTestEngine attempts to execute abstract test classes","## Overview I believe I stumbled on a bug, my use case is the following:  I have an abstract class containing tests and a constructor:  ```java import org.junit.Test;  public abstract class BugTest {      public BugTest(int x) {      }      @Test     public void test() {}  } ```  Please note that currently it's using the JUnit 4 `@Test` and a sub class extending this class providing the constructor argument:   ```java public class SubBugTest extends BugTest {     public SubBugTest() {         super(2);     } } ```  There are various interactions with this construct between gradle and maven.  The outputs are shown below. The build.gradle and pom.xml are copies of the sample projects.  ## Running the tests through maven ## ``` -------------------------------------------------------  T E S T S ------------------------------------------------------- Apr 05, 2017 10:30:45 AM org.junit.jupiter.engine.discovery.JavaElementsResolver resolveClass WARNING: Class 'com.BugTest' could not be resolved Running com.BugTest Apr 05, 2017 10:30:45 AM org.junit.jupiter.engine.discovery.JavaElementsResolver resolveClass WARNING: Class 'com.BugTest' could not be resolved Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.026 sec <<< FAILURE! - in com.BugTest initializationError  Time elapsed: 0.006 sec  <<< FAILURE! java.lang.Exception: Test class should have exactly one public zero-argument constructor  Running com.SubBugTest Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.SubBugTest  Results :  Failed tests:    BugTest »  Test class should have exactly one public zero-argument constructor  Tests run: 2, Failures: 1, Errors: 0, Skipped: 0 ```  # Changing the annotation in the super class to org.junit.jupiter.api.Test the error goes away:  ``` -------------------------------------------------------  T E S T S ------------------------------------------------------- Apr 05, 2017 10:33:33 AM org.junit.jupiter.engine.discovery.JavaElementsResolver resolveClass WARNING: Class 'com.BugTest' could not be resolved Running com.BugTest Apr 05, 2017 10:33:33 AM org.junit.jupiter.engine.discovery.JavaElementsResolver resolveClass WARNING: Class 'com.BugTest' could not be resolved Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec - in com.BugTest Running com.SubBugTest Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec - in com.SubBugTest  Results :  Tests run: 1, Failures: 0, Errors: 0, Skipped: 0  [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ ```  ## Running with gradle ##  ``` Running with the JUnit 4 `@Test` the results are:  Test run finished after 20 ms [         2 containers found      ] [         0 containers skipped    ] [         2 containers started    ] [         0 containers aborted    ] [         2 containers successful ] [         0 containers failed     ] [         0 tests found           ] [         0 tests skipped         ] [         0 tests started         ] [         0 tests aborted         ] [         0 tests successful      ] [         0 tests failed          ] ```  Running it through gradle gives slightly different results, using the jupiter api `@Test` everything works beautifully,   ``` Test run finished after 30 ms [         3 containers found      ] [         0 containers skipped    ] [         3 containers started    ] [         0 containers aborted    ] [         3 containers successful ] [         0 containers failed     ] [         1 tests found           ] [         0 tests skipped         ] [         1 tests started         ] [         0 tests aborted         ] [         1 tests successful      ] [         0 tests failed          ] ```  ## Deliverables  - [x] Update `VintageTestEngine` so that it no longer attempts to execute abstract test classes but rather simply logs a warning when an abstract test class is _discovered_.","closed","theme: discovery,","LiamClark","2017-04-05T08:59:31Z","2017-07-03T10:48:18Z"
"","684","Close dynamic test streams, fixes #683","## Overview Added a call to close for dynamic test streams #683 .  I decided to put the test in it's own test file, due to the considerable amount of setup. Is there any other place this test might belong to?  ### Documentation  I'm not sure where the right place would be to document this, My guess is in: https://github.com/junit-team/junit5/blob/master/junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestFactory.java#L32  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","LiamClark","2017-02-23T22:34:06Z","2017-03-12T15:46:22Z"
"","927","[RFC] tag expressions","## Overview A proof of concept implementation of a tag expression language (#454 #581). The implementation is based on [tag expressions in cucumber][cucumber-source-code]. The basic idea is documented [here](https://docs.cucumber.io/tag-expressions/).  The language consists of the reserved case sensitive characters/words `(`, `)`, `not`, `or`, `and`.  I implemented a new tokenizer to support tags with white space characters. Due to `@Tag(""my tag"")` in `TestInfoDemo` I assume this is required. If white space in tags is not required the cucumber code could be used as is.  If this is a feature you consider to merge I'll work on the code until it complies with the DoD and open a clean pull request. These are the open Todo's I see at the moment.  ## Todo's - [ ] proper attribution to the cucumber project (MIT license) - [ ] documentation in the user guide - [ ] fix test in AutomaticModuleNameTests.java - [ ] add more tests - [ ] extend gradle plugin ? - [ ] extend surefire provider ?  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass   [cucumber-source-code]: https://github.com/cucumber/cucumber/tree/master/tag-expressions/java [cucumber-documentation]: https://docs.cucumber.io/tag-expressions/","closed","","signed","2017-07-09T21:29:13Z","2017-09-11T18:09:30Z"
"","170","Issue106: Structure Unique ID","## Overview - Using domain class `UniqueId` to build unique IDs along the format: `[engine:junit5]/[type:value]...` but currently only behind the scenes, i.e. within the engines. - Will give opportunity for many simplifications in engines and launcher if spread out through whole code base - JUnit4 engine currently only uses the format for first part of unique ID - Is almost compatible with `UniqueId` class in pull request #134  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","jlink","2016-03-06T11:53:37Z","2016-03-11T10:59:03Z"
"","187","Add assertEquals for primitive types","## Overview - This pr fixes #110 . - I just added assetEquals for following primitive types.   - byte   - short   - int   - long   - char   - float   - double  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: enhancement,","hotchemi","2016-03-11T03:58:46Z","2016-03-11T15:11:50Z"
"","451","Support registration of global Extensions via java.util.ServiceLoader","## Overview - Solves Issue #448 adding the possibility of adding global extensions thru the `java.util.ServiceLoader` in favorite of adding `@ExtendWith` annotation on each test.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Jupiter,","reinhapa","2016-08-08T11:05:40Z","2017-03-25T16:22:20Z"
"","199","Replace displayHelp call with method reference.","## Overview - Replace displayHelp call with method reference.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","hotchemi","2016-03-12T22:45:25Z","2016-03-13T06:56:33Z"
"","174","Modify to follow Java8 syntax.","## Overview - Modify to use method reference at some point. - Modify to use lambda expression at some point.   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","hotchemi","2016-03-09T16:01:26Z","2016-03-09T16:58:43Z"
"","198","Refactor commons module","## Overview - Make AnnotationCacheKey's constructor package local. - Modify to use method reference. - Modify to use normal String in the toString of ToStringBuilder.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","hotchemi","2016-03-12T22:20:40Z","2016-03-17T09:46:26Z"
"","180","Just simplify some point.","## Overview - Just simplify some point.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","hotchemi","2016-03-10T08:04:37Z","2016-03-10T10:18:31Z"
"","191","Refactor getDisplayName of JUnit4TestDescriptor.","## Overview - Just replace ternary operation to Optional syntax.   - You don't have to merge this if you don't like it.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","hotchemi","2016-03-11T11:30:30Z","2016-03-11T12:14:26Z"
"","178","Just caches list size for performance improvement.","## Overview - Just a tiny little bit performance improvement.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","hotchemi","2016-03-10T07:20:54Z","2016-03-10T08:26:30Z"
"","544","Issue #489: Renamed Discovery Selectors and Sources","## Overview - JavaMethodSelector to MethodSelector - JavaClassSelector to ClassSelector - JavaPackageSelector to PackageSelector - JavaClassSource to ClassSource - JavaMethodSource to MethodSource - JavaPackageSource to PackageSource  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","bechte","2016-10-12T13:57:16Z","2016-10-13T11:11:12Z"
"","263","Include LICENSE.md inside META-INF of all jars","## Overview - Includes the `LICENSE.md` file inside `META-INF of all`.jar` files that are built by gradle. - Fixes #260.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","RAnders00","2016-05-13T14:47:50Z","2016-05-13T17:51:31Z"
"","228","Generate and upload User Guide to new directory structure","## Overview - Generate only index.html for User Guide - Remove static files kept in master that were added every time to   gh-pages branch (now kept there) - Use new directory structure for user guide (docs/current/user-guide)  Related issue: #205.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement. - Generate only index.html for User Guide - Keep existing files in gh-pages branch - Remove static files kept in master that were added every time to   gh-pages branch - Use new directory structure (docs/current/user-guide)","closed","","marcphilipp","2016-04-17T19:00:21Z","2016-04-18T12:57:36Z"
"","200","Delete unnecessary semicolon.","## Overview - Delete unnecessary semicolon.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","hotchemi","2016-03-12T22:54:53Z","2016-03-13T06:19:46Z"
"","507","Make behavior of Precondition.notEmpty(Collection) consistent with","## Overview - As discussed in #496  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  Precondition.notNull(Object[]).  Null elements in the collection will no longer be accepted. This is part of #496.","closed","","britter","2016-09-10T18:55:51Z","2016-09-11T05:15:53Z"
"","522","Fixed typo in TestingAStackDemo","## Overview - AfterPushing context contained a typo, `isEmpty()` is changed to `isNotEmpty()`. After pushing an element in a stack it is no longer empty. The display name is correct but method name was not reflecting the intention.   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  There was a typo in `AfterPushing` context, `isEmpty` is changed to `isNotEmpty`","closed","","npathai","2016-09-25T08:25:05Z","2016-09-27T12:59:20Z"
"","261","Add support for supplying configuration parameters to test engines","## Overview - Added support for adding a launch parameters, see Issue: #233  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: extensions,","bechte","2016-05-13T11:14:17Z","2016-05-14T09:10:10Z"
"","179","Add space before method name.","## Overview - Add space before method name.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","hotchemi","2016-03-10T07:44:11Z","2016-03-10T13:57:21Z"
"","165","Add PULL_REQUEST_TEMPLATE.md.","## Overview -  Fix #164. - Add PULL_REQUEST_TEMPLATE.md.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","hotchemi","2016-02-24T08:22:16Z","2016-02-24T10:49:31Z"
"","550","split assertions test into multiple smaller test classes","## Overview -     Split up AssertionsTests class into multiple  Test classes that focus on particular topics (see #509)  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Jupiter,","signed","2016-10-23T18:35:59Z","2016-11-07T21:39:50Z"
"","423","Remove unnecessary final declaration for private UniqueId.append() method","## Overview ##  ## Remove redundant final of private method  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: task,","smallyard","2016-07-23T03:34:07Z","2016-07-23T11:52:58Z"
"","421","Remove redundant final of private method","## Overview ##  ## Private methods cannot be meaningfully overridden, declaring them final is redundant  I hereby agree to the terms of the JUnit Contributor License Agreement.  private methods cannot be meaningfully overridden, declaring them final is redundant.","closed","","smallyard","2016-07-23T02:20:52Z","2016-07-23T03:20:20Z"
"","355","Add missing section anchors to documentation.","## Overview ##  ## Added unique section anchors for the user guide documentation where required.  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","ghost","2016-06-25T12:18:22Z","2016-06-25T17:44:13Z"
"","424","Add Preconditions.notBlank of key and value in ReportEntry.from","## Overview ##  ## Add Preconditions.notBlank of key and value in ReportEntry.from  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","status: invalid,","smallyard","2016-07-23T09:04:27Z","2016-07-23T11:55:27Z"
"","413","Avoid NullPointerException in StringUtils.nullSafeToString","## Overview ##   Fix that when call like StringUtils.nullSafeToString(String.class, null, Integer.class) there throws a NullException.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: enhancement,","smallyard","2016-07-19T08:22:06Z","2016-07-24T14:28:58Z"
"","422","Improve Javadoc in UniqueId.Segment constructor","## Overview ##   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","smallyard","2016-07-23T03:33:27Z","2016-07-23T11:52:41Z"
"","339","Add missing case to Javadoc.","## Overview ##   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","stefanbirkner","2016-06-21T13:06:45Z","2016-06-21T14:22:19Z"
"","334","Improve ExecuteTestsTaskTests","## Overview ##   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","stefanbirkner","2016-06-21T10:37:11Z","2016-06-21T10:50:55Z"
"","521","Added tree visuals to ColoredPrintingTestListener","## Overview  Work in progress solving #369 in an alternate fashion: display tree structure and more details within the (colored) rendering. ## Todo - [ ] Remove code duplications - [ ] Document - [ ] Tests - [ ] Introduce command line option switching verbosity level: simple tree or current very detailed version  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","sormuras","2016-09-21T13:48:27Z","2016-09-28T08:42:15Z"
"","746","Improve JavaDoc for junit-platform-suite-api annotations","## Overview  With the adoption of a declarative suite mechanism in JUnit 5 proposed in #744, the annotations that were moved to the ```junit-platform-suite-api``` will be used more broadly than for test selection using the JUnit 4 ```JUnitPlatform``` runner.  ## Original Proposal  - The javadocs for these annotations should be changed to describe their meaning without reference to this runner. - Make the javadocs for the ```junit-platform-suite-api``` annotations consistent with their expanded use.  ## Deliverables  Consider improving the JavaDoc for each of the following suite API annotations in order to better explain their _generic_ purpose vs. usage with the `JUnitPlatform` runner for JUnit 4.  -  ExcludeClassNamePatterns -  ExcludeEngines -  ExcludePackages -  ExcludeTags -  IncludeClassNamePatterns -  IncludeEngines -  IncludePackages -  IncludeTags -  SelectClasses -  SelectPackages -  UseTechnicalNames","closed","theme: suites,","smoyer64","2017-03-22T21:55:40Z","2017-11-30T11:34:20Z"
"","940","Spotless 3.4.1 only requires mavenCentral in buildscript of root project","## Overview  With #860 the mavenCentral configuration in buildscript of all projects was required. [As promised](https://github.com/junit-team/junit5/pull/860/files#r121257206), this PR contains a new version of Spotless (3.4.1) which allows to remove the previous change.   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","fvgh","2017-07-12T06:03:18Z","2017-07-12T08:51:54Z"
"","761","Remove duplicate entries from Standalone Distro","## Overview  With #714 solved, current root entries of `junit-platform-console-standalone-1.0.0-SNAPSHOT.jar/META-INF` are: ``` services/ MANIFEST.MF LICENSE-jopt-simple.md LICENSE.md LICENSE.md LICENSE-notice.md LICENSE-notice.md ```  After #760 is merged, even more duplicates will appear.  ## Deliverables  - [ ] Configure shadow jar task of `junit-platform-console-standalone` to filter duplicate entries","closed","theme: build,","sormuras","2017-03-31T21:18:08Z","2017-04-01T07:51:04Z"
"","655","Correct behavior with Throwables in Assertions.assertAll()","## Overview  While working on the ErrorCollector rule examples for issue #343, I have found a situation that I'm having an interesting time translating from JUnit 4 to JUnit 5.  In that issue I had stated that the functional behavior of the ErrorCollector rule could be accomplished via the Assertions.assertAll() method.  This is not entirely true and the canonical example provided in the JUnit 4 javadocs is one example of where the translation fails.  The JUnit 4 ErrorCollector example (without the class and rule set-up) is as follows:  ``` @Test public void example() { 	collector.addError(new Throwable(""first thing went wrong"")); 	collector.addError(new Throwable(""second thing went wrong"")); 	collector.checkThat(""ERROR! - something is broke"", not(containsString(""ERROR!""))); 	// all lines will run, and then a combined failure logged at the end. } ```  When this code is executed by JUnit 4, the test output provides three failures - two are the exceptions and the third is the AssertionError.  My attempt at a JUnit 5 equivalent is as follows (again stripped of unneeded code):  ``` @Test public void example() { 	assertAll( 		() -> { throw new Throwable(""first thing went wrong""); }, 		() -> { throw new Throwable(""second thing went wrong""); }, 		() -> assertThat(""ERROR! - something is broke"", not(containsString(""ERROR!""))) 	); } ```  When this code is executed, only the first Executable is run.  The Exception handling for assertAll() is documented at http://junit.org/junit5/docs/snapshot/api/org/junit/jupiter/api/Assertions.html#assertAll-java.lang.String-java.util.stream.Stream- and states:  > If any supplied Executable throws an AssertionError, all remaining executables will still be executed, and all failures will be aggregated and reported in a MultipleFailuresError. However, if an executable throws an exception that is not an AssertionError, execution will halt immediately, and the exception will be rethrown as is but masked as an unchecked exception.   but wouldn't it be better to run the remainder of the Executables (potentially all throwing Exceptions if there is a problem with the test harness) as opposed to simply stopping at the first Exception that's not resolvable to AssertionError?  It's my opinion that wrapping *any* Throwable inside the MultipleFailuresError is preferable as it provides the test developer/runner with more information.","closed","type: question,","smoyer64","2017-02-16T22:18:08Z","2017-03-12T10:49:06Z"
"","186","Refactor code for readability.","## Overview  While reading this class I found parts of the code that required some time for understanding because the code was not as meaningful and/or readable as it could be. I rewrote it into code that is at least better readable for me. Hopefully this helps other readers, too.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: enhancement,","stefanbirkner","2016-03-10T21:35:13Z","2016-03-11T12:08:49Z"
"","790","Add more methods to ReflectionSupport","## Overview  While implementing a test engine, I needed a couple of methods from `ReflectionUtils` that are currently not being exposed in `ReflectionSupport`  ``` public static Optional> loadClass(String name)  public static Optional findMethod(Class clazz, String methodName, String parameterTypeNames)  public static Optional findMethod(Class clazz, String methodName, Class... parameterTypes)  public static  T newInstance(Class clazz, Object... args)  public static Object invokeMethod(Method method, Object target, Object... args)  public static List> findNestedClasses(Class clazz, Predicate> predicate) ```  You might consider to add them to `ReflectionSupport`.","closed","component: Platform,","jlink","2017-04-12T07:47:07Z","2019-07-19T19:32:40Z"
"","786","Details.TREE does not gracefully handle failure exceptions that don't have a message","## Overview  When setting the details level to `Details.TREE` and a single test throws an exception without a message leads to stopping any more tests from executing.  ```groovy import org.junit.platform.console.options.Details  junitPlatform {     // other settings...     details = Details.TREE } ```  ```java     @Test     void failingTestWithNoMessage() {           throw new IllegalArgumentException();     } ```  ``` :junitPlatformTest java.lang.NullPointerException         at org.junit.platform.console.tasks.TreePrinter.printMessage(TreePrinter.java:146)         at org.junit.platform.console.tasks.TreePrinter.printThrowable(TreePrinter.java:119)         at org.junit.platform.console.tasks.TreePrinter.lambda$printVisible$0(TreePrinter.java:93)         at java.util.Optional.ifPresent(Optional.java:159)         at org.junit.platform.console.tasks.TreePrinter.printVisible(TreePrinter.java:93)         at org.junit.platform.console.tasks.TreePrinter.print(TreePrinter.java:58)         at org.junit.platform.console.tasks.TreePrinter.print(TreePrinter.java:68)         at org.junit.platform.console.tasks.TreePrinter.print(TreePrinter.java:68)         at org.junit.platform.console.tasks.TreePrinter.print(TreePrinter.java:68)         at org.junit.platform.console.tasks.TreePrinter.print(TreePrinter.java:52)         at org.junit.platform.console.tasks.TreePrintingListener.testPlanExecutionFinished(TreePrintingListener.java:44)         at org.junit.platform.launcher.core.TestExecutionListenerRegistry$CompositeTestExecutionListener.lambda$testPlanExecutionFinished$5(TestExecutionListenerRegistry.java:87)         at java.util.ArrayList.forEach(ArrayList.java:1249)         at org.junit.platform.launcher.core.TestExecutionListenerRegistry.notifyTestExecutionListeners(TestExecutionListenerRegistry.java:51)         at org.junit.platform.launcher.core.TestExecutionListenerRegistry.access$100(TestExecutionListenerRegistry.java:27)         at org.junit.platform.launcher.core.TestExecutionListenerRegistry$CompositeTestExecutionListener.testPlanExecutionFinished(TestExecutionListenerRegistry.java:87)         at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:139)         at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:87)         at org.junit.platform.console.tasks.ConsoleTestExecutor.executeTests(ConsoleTestExecutor.java:65)         at org.junit.platform.console.tasks.ConsoleTestExecutor.lambda$execute$0(ConsoleTestExecutor.java:57)         at org.junit.platform.console.tasks.CustomContextClassLoaderExecutor.invoke(CustomContextClassLoaderExecutor.java:33)         at org.junit.platform.console.tasks.ConsoleTestExecutor.execute(ConsoleTestExecutor.java:57)         at org.junit.platform.console.ConsoleLauncher.executeTests(ConsoleLauncher.java:79)         at org.junit.platform.console.ConsoleLauncher.execute(ConsoleLauncher.java:69)         at org.junit.platform.console.ConsoleLauncher.main(ConsoleLauncher.java:41)  ╷ ├─ JUnit Jupiter ✔ │  ├─ FirstTest ✔ │  │  ├─ My 1st JUnit 5 test! 😎 ✔ │  │  └─ failingTestWithNoMessage() ✘Option                                        Description ------                                        ----------- -h, --help                                    Display help information. --disable-ansi-colors                         Disable ANSI colors in output (not                                                 supported by all terminals). --hide-details                                @Deprecated. Use '--details none' instead. --details <[none,flat,tree,verbose]>          Select an output details mode for when                                                 tests are executed. Use one of: [none, ... ... ```  ## Deliverables  - [x] `TreePrinter` should handle failing tests with throwables that do not have a failure message","closed","component: Platform,","mkobit","2017-04-09T17:08:38Z","2017-04-18T14:36:45Z"
"","799","AsciiDoctor task does not support Rouge on MS Windows","## Overview  When running the `asciidoctor` task on Windows, Gradle gives the following error:   > (RuntimeError) asciidoctor: FAILED: required gem 'rouge' is not installed. Processing aborted. :documentation:asciidoctor FAILED  The ruby, jruby and ruby-devkit are installed. This problem doesn't appear on Linux and Mac systems.  ## Related Issues  - #652  - #770  - #777  - https://github.com/asciidoctor/asciidoctor/issues/1040","closed","status: superseded,","Andrei94","2017-04-20T19:40:52Z","2017-04-22T16:17:46Z"
"","958","`gradle dependencyUpdates` fails with an exception","## Overview  When running `gradlew dependencyUpdates` from the HEAD of the JUnit 5 master branch, it fails and reports the following:  ```txt :buildSrc:compileJava NO-SOURCE :buildSrc:compileGroovy NO-SOURCE :buildSrc:processResources NO-SOURCE :buildSrc:classes UP-TO-DATE :buildSrc:jar UP-TO-DATE :buildSrc:assemble UP-TO-DATE :buildSrc:compileTestJava NO-SOURCE :buildSrc:compileTestGroovy NO-SOURCE :buildSrc:processTestResources NO-SOURCE :buildSrc:testClasses UP-TO-DATE :buildSrc:test NO-SOURCE :buildSrc:check UP-TO-DATE :buildSrc:build UP-TO-DATE [versioning] WARNING - the working copy has unstaged or uncommitted changes. :dependencyUpdates FAILED  FAILURE: Build failed with an exception.  * What went wrong: Execution failed for task ':dependencyUpdates'. > java.lang.String cannot be cast to org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.Version  * Try: Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.  BUILD FAILED in 3s 1 actionable task: 1 executed ```  My `gradlew --version` information is as follows. ```txt ------------------------------------------------------------ Gradle 4.0 ------------------------------------------------------------  Build time:   2017-06-14 15:11:08 UTC Revision:     316546a5fcb4e2dfe1d6aa0b73a4e09e8cecb5a5  Groovy:       2.4.11 Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015 JVM:          1.8.0_121 (Oracle Corporation 25.121-b13) OS:           Windows 7 6.1 amd64  ```  I'm happy to create a gist with the stack trace and debug information if needed.  ## Deliverables  - [ ] `gradle dependencyUpdates` shows dependencies which aren't up-to-date again.","closed","theme: build,","jbduncan","2017-07-17T19:09:43Z","2017-07-17T20:21:46Z"
"","663","Test tree prints ReportEntry(ies) outside the hierarchy","## Overview  When printing the test tree results via Gradle or the console runner, ```ReportEntry``` rows are printed before their corresponding tests.  In the following example, I've hacked multiple ```ReportEntry``` rows into the ```TimingExtension``` to better illustrate the issue:  ``` │  ├─ TimingExtensionTests │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.559, Method execution time1 (in mS) = '21'] │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.559, Method execution time2 (in mS) = '21'] │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.559, Method execution time3 (in mS) = '21'] │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.560, Method execution time4 (in mS) = '21'] │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.560, Method execution time5 (in mS) = '21'] │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.560, Method execution time6 (in mS) = '21'] │  │  ├─ sleep20ms() ✔ │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.612, Method execution time1 (in mS) = '51'] │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.613, Method execution time2 (in mS) = '51'] │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.614, Method execution time3 (in mS) = '51'] │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.614, Method execution time4 (in mS) = '51'] │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.616, Method execution time5 (in mS) = '51'] │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.622, Method execution time6 (in mS) = '51'] │  │  ├─ sleep50ms() ✔ ```  - (X) **Bug report.** The test method name is still rooted to the test class name via the tree's connection lines, so leaving the ```ReportEntry``` lines unconnected.    ## Deliverables  - [x] Move the ```ReportEntry``` lines so that they're printed below their corresponding test's name as follows:  ``` │  ├─ TimingExtensionTests │  │  ├─ sleep20ms() ✔ │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.559, Method execution time1 (in mS) = '21'] │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.559, Method execution time2 (in mS) = '21'] │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.559, Method execution time3 (in mS) = '21'] │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.560, Method execution time4 (in mS) = '21'] │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.560, Method execution time5 (in mS) = '21'] │  │  │   ReportEntry [timestamp = 2017-02-18T19:57:24.560, Method execution time6 (in mS) = '21'] │  │  └─ sleep50ms() ✔ │  │       ReportEntry [timestamp = 2017-02-18T19:57:24.612, Method execution time1 (in mS) = '51'] │  │       ReportEntry [timestamp = 2017-02-18T19:57:24.613, Method execution time2 (in mS) = '51'] │  │       ReportEntry [timestamp = 2017-02-18T19:57:24.614, Method execution time3 (in mS) = '51'] │  │       ReportEntry [timestamp = 2017-02-18T19:57:24.614, Method execution time4 (in mS) = '51'] │  │       ReportEntry [timestamp = 2017-02-18T19:57:24.616, Method execution time5 (in mS) = '51'] │  │       ReportEntry [timestamp = 2017-02-18T19:57:24.622, Method execution time6 (in mS) = '51'] ```  Also note that I've adjusted the tree hierarchy to properly terminate the connection line at the last node of the hierarchy as described in issue #664.","closed","component: Platform,","smoyer64","2017-02-19T01:18:44Z","2017-04-25T10:37:27Z"
"","733","Console option select-method should override class name filter","## Overview  When explicitly selecting a test method via `--select-method` at the command line in a class which is not named according to default class name inclusion pattern `^.*Tests?$`, the method is not found. In such a case, you also have to set `--include-classname` to a matching pattern, like `.*`.  See https://github.com/junit-team/junit5/blob/master/platform-tests/src/test/java/org/junit/platform/console/ConsoleDetailsTests.java#L160 -- here, the canonical class name is used to allow the method within the class to be found. If that option is removed from the argument list, all 72 console details test fail.  ## Deliverables  - [x] Decide, whether `--select-method` should override `--include-classname` or not. - [x] Implement and test the implicit override.","closed","component: Jupiter,","sormuras","2017-03-13T09:03:14Z","2020-05-22T19:55:15Z"
"","429","Eliminate NPE when TestEngine's discovery() method returns null","## Overview  When creating a new TestEngine by extending HierarchicalTestEngine, there's a Precondition failure if the getId() method returns null, but an NPE is thrown if the discover() method returns null.  If the createExecutionContext() method returns null, it's up to the test engine to decide whether that's a problem.  This pull request adds a precondition (with message) after calling discover()  and before adding the engine's TestDescriptor to the root.  For reference, here's the stack trace that occurs if the discover() method returns null:  ``` java.lang.NullPointerException     at org.junit.platform.launcher.core.Root.lambda$acceptInAllTestEngines$2(Root.java:85)     at java.util.LinkedHashMap$LinkedValues.forEach(LinkedHashMap.java:600)     at org.junit.platform.launcher.core.Root.acceptInAllTestEngines(Root.java:85)     at org.junit.platform.launcher.core.Root.applyPostDiscoveryFilters(Root.java:66)     at org.junit.platform.launcher.core.DefaultLauncher.discoverRoot(DefaultLauncher.java:111)     at org.junit.platform.launcher.core.DefaultLauncher.discover(DefaultLauncher.java:78)     at org.junit.platform.runner.JUnitPlatform.generateTestTree(JUnitPlatform.java:113)     at org.junit.platform.runner.JUnitPlatform.(JUnitPlatform.java:96)     at org.junit.platform.runner.JUnitPlatform.(JUnitPlatform.java:88)     at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)     at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)     at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)     at java.lang.reflect.Constructor.newInstance(Constructor.java:423)     at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)     at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)     at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)     at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)     at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)     at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createUnfilteredTest(JUnit4TestLoader.java:84)     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createTest(JUnit4TestLoader.java:70)     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.loadTests(JUnit4TestLoader.java:43)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:444)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) ```  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: bug,","smoyer64","2016-07-24T23:39:52Z","2016-07-25T17:32:19Z"
"","668","Add boolean disableOnDebug to @ExtendWith","## Overview  When analyzing the existing JUnit 4 ```TestRules``` in #343, I completely missed the point of the ```DisableOnDebug``` rule.  It's purpose is to disable the encapsulated rule when the JVM is in debug mode and it has nothing to do with which tests are selected for execution.  - (X) **Feature request.** I'd like to propose that there's an additional member added to the ```@ExtendWith``` annotation in the following form:  ``` boolean disableOnDebug() default false; ```  This flag would conditionally allow one or more ```Extension```s to be disabled when the JVM is in debug mode.  Code using this feature might look something like:  ``` @ExtendWith(WeldExtension.class) @ExtendWith(StopwatchExtension.class, disableOnDebug = true) public void testSomething() { ... } ```  ## Deliverables  - [ ] Change the ```@ExtendWith``` annotation. - [ ] Alter the Jupiter engine to ignore extensions during debug.","closed","status: stale,","smoyer64","2017-02-20T02:29:41Z","2021-06-03T22:11:41Z"
"","704","Parameter resolvers should be able to access the invocation context for test templates","## Overview  When a ```TestTemplateInvocationContextProvider``` is created, its ```provide()``` method must return a `Stream` of ```TestTemplateInvocationContext```s.  I've extended/implemented  ```TestTemplateInvocationContext``` to include context that is specific to the tests that will be executed.  As the ```TestEngine``` iterates over these invocation contexts, parameter resolution (via one or more ```ParameterResolver```s) is performed.  It appears that there's no way for the invocation's parameter resolvers to obtain the context provided by the ```TestTemplateInvocationContextProvider```.  - **Feature request.** Make the invocation context available to the extensions that it adds to the invocation.  ## Related Issues  - #14   ## Deliverables  - ?","closed","component: Jupiter,","smoyer64","2017-03-03T13:39:49Z","2017-04-17T14:54:50Z"
"","843","Switch to Spotless Groovy formatter","## Overview  We currently use a custom formatting config for Groovy source files. Now that diffplug/spotless#13 is fixed, we should switch to use GrEclipse formatting for Groovy files.  ## Deliverables  - [ ] Change Spotless config to use Groovy extension with GrEclipse formatter settings","closed","type: task,","marcphilipp","2017-05-08T06:01:52Z","2017-07-06T07:13:13Z"
"","620","Add support for scanning JAR files as classpath roots","## Overview  We currently scan JAR files but only when resolving package selectors. We should add support for explicitly selecting a JAR as a classpath root to be scanned, i.e. using the `ConsoleLauncher` with  `--scan-classpath some.jar` should scan that JAR.  ## Deliverables  - [x] Change `DiscoverySelectors.selectClasspathRoots(Set)` to accept JAR files in addition to directories. - [x] Change `ClasspathScanner.scanForClassesInClasspathRoot(...)` to process JAR files in addition to directories.","closed","component: Platform,","marcphilipp","2017-01-02T12:01:21Z","2017-01-06T19:55:31Z"
"","907","Find annotations on interfaces","## Overview  We currently have a discrepancy between the search algorithms in `findRepeatableAnnotations()` and `findAnnotation()` in `AnnotationUtils`. The former finds annotations on interfaces; whereas, the latter does not.  Consequently, `@ExtendWith` and `@Tag` can be placed on an interface, but `@TestInstance` cannot.  ## Related Issues  - #419   ## Deliverables  - [x] Refactor `AnnotationUtils.findAnnotation()` so that it also searches on interfaces for the annotation. - [x] Update documentation (and potentially the example) in the User Guide regarding test interfaces and default methods in terms of support for `@TestInstance` on interfaces.","closed","component: Platform,","sbrannen","2017-06-30T15:03:43Z","2017-07-10T15:22:03Z"
"","834","Introduce custom logging façade on top of JUL","## Overview  We are considering to write and use our own custom façade. Something [like ](https://github.com/spring-projects/spring-framework/commit/47277f43da050e5f7caa30449a104082333fa318) was done in Spring.  Add more logging statements to the code, especially when it comes to configuration/setup with engines, listeners, test class/method invocations.  ## Related Issues  - #242  - #602   ## Deliverables  - [x] Discuss custom logging façade. - [x] Implement custom logging façade. - ❌  Make custom logging façade _testable_ -- for example, by allowing tests to _attach_ some sort of listener in order to verify that particular statements were logged at a specific log level.    - to be performed in a later release - [x] Document custom logging façade (JavaDoc).","closed","type: task,","sormuras","2017-05-04T14:53:59Z","2018-08-09T16:59:08Z"
"","242","Introduce error handling mechanism for validation and discovery errors","## Overview  Validation errors (e.g., for invalid `@BeforeEach` method declarations) should not abort the entire discovery phase. Instead the _discovery phase_ should continue, with the error tracked and reported during the _execution phase_.   ## Areas of Applicability  - invalid `@BeforeAll`, `@AfterAll`, `@BeforeEach`, and `@AfterEach` method declarations - invalid `@Test`, `@TestFactory`, `@RepeatedTest`, and `@ParameterizedTest` method declarations (see #2244) - invalid `@Nested` test class declarations (see #1223 and #2717) - invalid `@Suite` class declarations - _blank_ display names supplied by the user, as discussed in #743 - exceptions thrown by test engines, as discussed in #750 - unresolvable unique IDs, as discussed in #210   - note, however, that a TestEngine should not report a unique ID as unresolvable if the unique ID does not apply to the particular TestEngine (see #1026 ). - non-static test class declaration (see #2311)  ## Proposals  1. Allow engines to track errors by creating a special type of `TestDescriptor` such as an `AlwaysFailingTestDescriptor`, `DeadOnArrivalTestDescriptor`, or `ErrorReportingTestDescriptor`.     - Tracked errors for such a corresponding `TestDescriptor` could then be thrown as an exception during the execution phase instead of executing the corresponding container or test. 2. Introduce a new property in `TestDescriptor` that signals an error that was encountered during the _discovery phase_. 3. Pass a _reporting object_ from the `Launcher` into each `TestEngine` to report errors.     - See https://github.com/junit-team/junit5/issues/242#issuecomment-294301875  ## Related Issues  - #121  - #210  - #743  - #750  - #835 - #876   - #949  - #971  - #1026  - #1074  - #1223 - #1944 - #2244 - #2311 - #2717  ## Deliverables  - [ ] Introduce a mechanism that allows validation and configuration errors to be _tracked_ during the test engine discovery phase and then thrown or reported during the execution phase. - [ ] Use the new mechanism to replace the current ad hoc use of logging and transparent defaulting as a work-around.   - Search for `TODO [#242]` within the code base.   - See https://github.com/junit-team/junit5/issues/750#issuecomment-294296045 - [ ] Determine where else the new mechanism can be used and apply it. - [ ] Revisit the results of #835 and update the code accordingly by tracking such errors instead of just ignoring such incorrect usage. - [ ] Revisit the changes made in #971 and determine if it makes sense to move the look-up of lifecycle methods back to the constructor of `ClassTestDescriptor`.","open","status: new,","marcphilipp","2016-05-06T09:25:52Z","2021-12-21T23:06:18Z"
"","176","Use the current Gradle 2.11 instead of 2.10.","## Overview  Use the current Gradle 2.11 instead of 2.10.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","stefanbirkner","2016-03-09T22:53:47Z","2016-03-10T08:46:42Z"
"","887","Issues/810 encode unique id segments","## Overview  URL-encode `UniqueID` segment string representation.  Solves #810   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","sormuras","2017-06-14T21:01:32Z","2017-06-15T12:45:46Z"
"","568","Upgrade to Gradle 3.2","## Overview  Upgrade to Gradle 3.2  See https://discuss.gradle.org/t/gradle-3-2-released/20441 Fixes UTF-8 emission bug described in the realm of #524 -- explicitly here https://github.com/junit-team/junit5/issues/369#issuecomment-246772931  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","sormuras","2016-11-15T11:08:05Z","2016-11-15T17:59:31Z"
"","948","Use jdk-9 provided by Travis CI","## Overview  Travis CI upgraded their jdk-9 version to 175. This version supports all features JUnit 5 needs for its build process. Newer jkd-9 versions like the recent build 178 only contain fixes for bugs that don't prevent JUnit 5 to build.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","sormuras","2017-07-15T08:20:22Z","2017-07-15T08:24:46Z"
"","316","Introduce Maven BOM for JUnit Platform, Jupiter, and Vintage artifacts","## Overview  To ease consumption of _JUnit 5_ artifacts, we should introduce a Maven _Bill Of Materials_ POM ([search for BOM here](https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html)) for all published Platform, Jupiter, and Vintage artifacts.  ## Proposed Maven Coordinates  - Group ID: `org.junit` - Artifact ID: `junit-bom` - Version: `5.2.0`  ## Related Issues  - #146   ## Deliverables  - [X] Introduce `junit-bom` Gradle project.   - See the [spring-framework-bom](https://github.com/spring-projects/spring-framework/blob/master/spring-framework-bom/spring-framework-bom.gradle) Gradle project from the Spring Framework for inspiration.   - This is the actual [POM](http://search.maven.org/remotecontent?filepath=org/springframework/spring-framework-bom/5.0.3.RELEASE/spring-framework-bom-5.0.3.RELEASE.pom) generated by Spring's `spring-framework-bom` project. - [x] Add section to User Guide - [x] Publish `junit-bom` POM to Maven Central.   - either along with the JUnit 5.2 GA release or afterwards","closed","component: Vintage,","sbrannen","2016-06-18T15:39:38Z","2018-04-14T17:30:59Z"
"","714","Add notice and include third-party licenses","## Overview  To be safe, we need to include not only our license but also those of subcomponents, such as jopt-simple and univocity-csv to the corresponding JARs.  Here's how Spring does it: https://github.com/spring-projects/spring-framework/blob/master/src/docs/dist/notice.txt https://github.com/spring-projects/spring-framework/blob/master/src/docs/dist/license.txt  ## Deliverables  - [x] Add `notice.md` files to all JARs - [x] Include `LICENSE-jopt-simple.md` in junit-platform-console[-standalone] JAR - [x] Include `LICENSE-univocity-parsers.md` in junit-jupiter-params","closed","theme: documentation,","marcphilipp","2017-03-09T12:16:23Z","2017-03-31T21:20:23Z"
"","566","first draft for custom element resolver (#518)","## Overview  To be able to provide a custom `ElementResolver` (#518), I tried some things and like this one quite well at the moment.  ## Details  It fits quite nice (IMHO) into the existing code / API by resolving the `ExtensionRegistry` earlier within the affected test descriptions (problem of mutability should be solved, though). This could also be more generalized by moving the new property up to `JupiterTestDescription` and add the current default element resolvers from `DiscoverySelectorResolver` to default extensions.   ## Disclaimer  The junit-dataprovider tests would already run using some quick and dirty implementation, see https://github.com/TNG/junit-dataprovider/compare/issue75-custom-junit5-element-resolver?expand=1 Also the test fixes are a bit hacky at the moment  ## Your opinion?   Does that go into the right direction? Or do you have something different in mind? What and why do you like / not like it (such that I can think of another solution)?  P.S.: This is just a first PoC / draft to discuss it more concrete ;-)  ----  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","aaschmid","2016-11-11T21:34:07Z","2017-05-26T06:06:41Z"
"","97","Introduce JUnitException and PreconditionViolationException","## Overview  To avoid conflicts with exceptions that are typically thrown by either the JDK or client code (e.g., `IllegalArgumentException`, `NullPointerException`, etc.), utility methods in `Preconditions` should throw a dedicated JUnit-specific `RuntimeException` (i.e., `PreconditionViolationException`). See #94 for related discussions. ## Deliverables - [x] Introduce `JUnitException` as base `RuntimeException` in `junit-commons`. - [x] Introduce `PreconditionViolationException`. - [x] Refactor exceptions to extend `JUnitException`: `ExtensionConfigurationException`, `ParameterResolutionException`, `PreconditionViolationException`, `ConditionEvaluationException`","closed","type: enhancement,","sbrannen","2016-01-10T21:54:21Z","2016-01-11T18:41:53Z"
"","540","Test will now print the error to the console when they fail","## Overview  This will make debugging CI build easier without having to keep track of all the artifacts that get generated.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","ethankhall","2016-10-07T17:30:39Z","2016-10-07T19:25:05Z"
"","527","Pull request for Raw Value in DiscoverySelectors","## Overview  This pull requests solves the following issues: - Store raw values in DiscoverySelectors & TestSources #489 - Cannot select default method by fully qualified method name #516 - Non-standard method names are not supported for discovery selection #477  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: discovery,","bechte","2016-09-29T23:39:37Z","2016-11-30T08:30:54Z"
"","642","Introduce @TestTemplate and accompanying extension point","## Overview  This pull request introduces the concept of `@TestTemplate` methods. In contrast to `@Test` methods, a test template is not itself a test case but rather a template for test cases. As such, it is designed to be invoked multiple times depending on the number of `TestTemplateInvocationContexts` returned by the registered `TestTemplateInvocationContextProviders`.  Each invocation of a test template method, behaves like the execution of a regular @Test method, i.e. it supports the same lifecycle callbacks and extensions. Each context may provide a custom display name and provide additional extensions that will only be registered for the current invocation, e.g. a `ParameterResolver`, a `TestInstancePostProcessor` or both.  This extension point is a prerequisite for implementing support for parameterized tests as well as repeated tests.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Jupiter,","marcphilipp","2017-01-28T16:03:00Z","2017-03-12T14:23:26Z"
"","728","Introduce junit-jupiter-params","## Overview  This pull request adds a new module `junit-jupiter-params` as discussed in the last team call. See `ParamsApiPlayground` for examples.  This branch is still lacking Javadoc, API annotations, documentation, and, in some cases, unit tests. We've decided to merge it into master now to reduce conflicts with other pull requests and other work. The remaining tasks will be addressed in #14.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] ~There are no TODOs left in the code~ There are TODOs that will be addressed as part of #14. - [ ] ~Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc~ Javadoc will be added as part of #14. - [X] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] ~Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests)~ A few classes that I've extracted from `ParameterizedTestExtension` still lack proper unit tests. - [ ] ~Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html)~ Will be added as part of #14. - [ ] ~Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes)~ Will be added as part of #14. - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","marcphilipp","2017-03-11T21:29:51Z","2017-03-29T21:08:22Z"
"","327","Remove section about semantic versioning.","## Overview  This project uses the `@API` annotation for information about API compatibility. The rules defined for this purpose do not comply with the [semantic versioning specification](http://semver.org/).  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","stefanbirkner","2016-06-20T17:52:37Z","2019-07-19T19:33:04Z"
"","795","String#isEmpty() usage","## Overview  This PR uses the `String#isEmpty()` method to clean up the code and make it easier to read. The patches contained in it replace usages of `someString.equals("""")` and `someString.length() == 0`.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---","closed","component: Platform,","mureinik","2017-04-17T09:06:27Z","2017-04-17T15:59:38Z"
"","931","Simplify `Map.entrySet().forEach()` usage to `Map.forEach()`","## Overview  This PR simplifies a usage of `Map.entrySet().forEach()` in `XmlReportWriter` to the equivalent `Map.forEach()`, which removes a number of unneeded characters.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Platform,","jbduncan","2017-07-10T00:50:20Z","2017-07-10T12:13:09Z"
"","601","Use class from external JAR file for testing","## Overview  This PR replaces `vendorFromObjectClassIsPresent()` with `attributesFromValueWrapperClassArePresent()`  which works on Java 8 and 9, as the `ValueWrapper` class is loaded from an external JAR with all its metadata initialized from the encapsulated manifest file.  The second test, that was guarded by a _do not start on Java 9_ assumption, is removed as it didn't provide real additional test value.  Might resolve #600  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2016-12-12T12:04:16Z","2016-12-12T16:42:55Z"
"","711","ConsoleLauncher refactoring","## Overview  This PR refactors some internal and output related behaviours of the `ConsoleLauncher` and the associated `TreePrintingListener`.  - The level of abstraction was lowered within `ConsoleLauncher` and support classes, `ConsoleTask` interface was removed entirely, the correct `Charset` is now properly stored and used.  - Add new command line option `--details-theme` selecting an output details tree theme for when tests are executed. See `org.junit.platform.console.options.Theme` for available themes.  - `TreePrintingListener` now buffers all events in order to emit status results of containers and render nicer tree branches that indicate the last test of a container with a closing tile, which fixes #664  and produces trees like:  	 ├─ engine alpha ✔ 	 │  └─ container 1 ✔ 	 │     └─ test 01 ✔ 	 └─ engine omega ✔ 	    ├─ container 2 ✔ 	    │  └─ test 11 ■ aborted 	    └─ container 3 ✔ 	       ├─ skipped ↷ because 	       └─ failing ✘ BäMM  - An integration platform test named `ConsoleDetailsTest` asserting all combinations of console outputs _""test result **x** details mode **x** theme""_ ensures the expected overall behaviour of the `ConsoleLauncher`. See `platform-tests/src/test/resources/console/details/**/*out.txt` files.  --- I hereby agree to the terms of the JUnit Contributor License Agreement. ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Platform,","sormuras","2017-03-07T12:08:15Z","2017-03-09T01:06:16Z"
"","838","Introduce fail-fast feature for dynamic test execution","## Overview  This PR provides tools around the dynamic tests feature to accomplish a scenario-like way of expressing related tests. The new factory method `DynamicTest.requiredTest(String displayName, Executable executable)` creates dynamic test instances, that require to finish successfully. If the dynamic test execution loop detects an unsuccessful required test, it stops the loop immediatly. This can happen at any dynamic container level. If the execution loop is halted, no further dynamic test is registered and therefore not executed.  ## Example usage  Copied from [DynamicTestsDemo.java](https://github.com/junit-team/junit5/pull/838/files#diff-c1dd7bf1ba6a5ab0409a658da3fe71a9R48) with _Log-in_ and _third page visit_ being required dynamic test. They require to finish with a successful `TestExecutionResult`  ```java dynamicTest(""Visit page requiring authorization while not logged in"", () -> { 	// attempt to visit page which requires that a user is logged in 	// assert user is redirected to login page }), requiredTest(""Log-in"", () -> { 	// submit login form with valid credentials 	// assert user is redirected back to previous page requiring authorization 	// assertTrue(false, ""you shall not pass""); }), dynamicContainer(""Can access several pages while logged in"", 	dynamicTest(""Visit second page requiring authorization while logged in"", () -> { 		// visit another page which requires that a user is logged in 		// assert user can access page 	}), 	requiredTest(""Visit third page requiring authorization while logged in"", () -> { 		// visit another page which requires that a user is logged in 		// assert user can access page 		// assertTrue(false, ""exit here - no fourth page, not log out""); 	}), 	dynamicTest(""Visit fourth page requiring authorization while logged in"", () -> { 		// visit another page which requires that a user is logged in 		// assert user can access page 	}) ), dynamicTest(""Log-out"", () -> { 	// visit logout URL 	// assert user has been logged out }) ``` - if all tests are successful, you see every test in the tree: https://travis-ci.org/junit-team/junit5/builds/229191437#L739 - if ""Log-in"" fails, the ""access several pages while logged in"" container and ""Log-out"" won't show up  ``` ├─ dynamicNodesWithRequiredTests() ✘ │  ├─ Visit page requiring authorization while not logged in ✔ │  └─ Log-in ✘ you shall not pass ```  - if ""Visit third page..."" fails, ""Visit fourth page..."" and ""Log-out"" won't show up  ``` ├─ dynamicNodesWithRequiredTests() ✘ │  ├─ Visit page requiring authorization while not logged in ✔ │  ├─ Log-in ✔ │  └─ Can access several pages while logged in ✘ │     ├─ Visit second page ... logged in ✔ │     └─ Visit third page ... logged in ✘ exit here - no fourth page, not log out ```  ## Related issues  - #48 ""scenario tests"" -- here the original idea of ""lightweight scenarios"" was posted by - #431 ""terminating dynamic tests early""  ## Deliverables  - [ ] Discuss, if we want to add this _requiredTest(...)_ feature - if yes, finish **Definition of Done** list below  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","sormuras","2017-05-05T08:20:58Z","2018-01-08T16:00:27Z"
"","526","Issue433 adapters for junit4 rules","## Overview  This PR provides an initial implementation for #433.  Both, field and method rules are supported. Implementations of `org.junit.rules.Verifier` and `org.junit.rules.ExternalResource` are supported. Currently, this supported is activated by an explicit `@ExtendWith`. This might be replaced by a classpath-based activation (expensive) or better by some sort of meta-annotation, e.g. `@EnableJUnit4RuleSupport`. Currently, there is no warning issued if an unsupported rule type is used.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","mmerdes","2016-09-28T12:41:03Z","2016-11-30T07:51:22Z"
"","270","Improve assertEquals for floats and doubles","## Overview  This PR includes two commits: - Handle NaNs when comparing doubles and floats      This commit makes methods `assertEquals(double, double)` and   `assertEquals(float, float)` treat NaNs as equal. Same applies to variations   of those methods that accept a message or a message supplier.      Such behaviour is consistent with `Double#compare(double, double)` and   `Float#compare(float, float)` but not consistent with `==` and `!=`. It will   cause less confusion for users that execute code like   `assertEquals(Double.NaN, Double.NaN)`. - Added assertEquals for doubles & floats with delta      This commit introduces `assertEquals(double, double, double)` and   `assertEquals(float, float, float)` where the third parameter is delta. First   two parameters are compared within this given delta. Also added methods with   delta parameter that accept a message and a message supplier.      Such methods are needed because exact comparison of floating point numbers   does not always make sense.  Fixes #269   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: enhancement,","lutovich","2016-05-16T21:58:18Z","2016-05-21T13:35:32Z"
"","660","WIP: 343 - Document compatibility with JUnit 4 TestRules","## Overview  This PR includes the tasks required to complete issue #343 with the same title as this PR.  ## Deliverables  -   [x] Add section introduction paragraph(s) -   [x] DisableOnDebug **Not supported for M4 (or the foreseeable future)**     -   [x] Add text to users guide -   [ ] ExpectedException     -   [X] Create jupiter demo     -   [X] Create vintage demo     -   [ ] Add text and examples to users guide -   [ ] ExternalResource     -   [ ] TemporaryFolder         -   [ ] Create jupiter demo         -   [ ] Create vintage demo         -   [ ] Add text and examples to users guide -   [ ] RuleChain     -   [x] Create jupiter demo     -   [x] Create vintage demo     -   [ ] Add text and examples to users guide -   [x] Stopwatch     -   [x] Create jupiter demo     -   [x] Produce jupiter output     -   [x] Create vintage demo     -   [x] Produce vintage output     -   [x] Add text and examples to users guide -   [ ] TestWatcher     -   [ ] TestName         -   [X] Create jupiter demo         -   [X] Create vintage demo         -   [ ] Add text and examples to users guide -   [ ] Timeout     -   [x] Create jupiter demo     -   [x] Create vintage demo     -   [ ] Add text and examples to users guide -   [ ] Verifier     -   [ ] ErrorCollector         -   [X] Create jupiter demo         -   [X] Create vintage demo         -   [ ] Add text and examples to users guide         -   [ ] Update ```ErrorCollectorJupiterDemo``` to use ```Assertions.fail(Throwable t)``` when #656 is complete.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] There are no TODOs left in the code - [ ] ~~Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc~~ - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] ~~Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests)~~ - [ ] ~~Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html)~~ - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","smoyer64","2017-02-17T21:13:30Z","2019-04-14T13:27:20Z"
"","943","Issues/835 forbid return values from test and lifecycle methods","## Overview  This PR implements #835.  Following the existing styles in the respective parts of the codebase this is realised via predicates for `@Test` methods, but via `JUnitException`s for lifecycle methods. This might be subject to change in the context of the somewhat related issue #242.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","mmerdes","2017-07-13T10:31:21Z","2018-01-08T14:12:29Z"
"","661","Adds fail() methods that pass Throwables - closes #656.","## Overview  This PR adds two additional signatures for the ```Assertions.fail()``` methods:  -   ```Assertions.fail(String message, Throwable cause)``` -   ```Assertions.fail(Throwable cause)```  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [X] There are no TODOs left in the code - [ ] ~~Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc~~ - [X] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [X] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [X] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the ~~[User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and~~  [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [X] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","smoyer64","2017-02-17T22:41:29Z","2017-03-12T15:16:39Z"
"","946","Issues/790 add more methods to reflectionsupport","## Overview  This PR adds the requested methods to `org.junit.platform.commons.support.ReflectionSupport` by delegating to respective `org.junit.platform.commons.util.ReflectionUtils` methods.  No new tests are introduced as the implementation is delegated to existing code.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","mmerdes","2017-07-14T14:09:25Z","2017-07-17T14:57:35Z"
"","669","Adds the disableOnDebug member to @ExtendWith.  Resolves 668.","## Overview  This PR adds code to disable extensions when the JVM is running in debug mode in order to support the equivalent functionality that exists in JUnit 4.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [X] There are no TODOs left in the code - [ ] ~~Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc~~ - [X] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [X] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [X] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","status: declined,","smoyer64","2017-02-20T18:56:00Z","2017-03-12T15:20:42Z"
"","596","Add engines to console distribution runtime dependencies","## Overview  This PR adds `junit-jupiter-engine`  and `junit-vintage-engine` to the runtime dependency of `junit-platform-console` application -- resulting in the following exploded `lib` folder: ``` junit-platform-console/build/install/junit-platform-console/lib/hamcrest-core-1.3.jar junit-platform-console/build/install/junit-platform-console/lib/junit-4.12.jar junit-platform-console/build/install/junit-platform-console/lib/junit-jupiter-api-5.0.0-SNAPSHOT.jar junit-platform-console/build/install/junit-platform-console/lib/junit-jupiter-engine-5.0.0-SNAPSHOT.jar junit-platform-console/build/install/junit-platform-console/lib/junit-platform-commons-1.0.0-SNAPSHOT.jar junit-platform-console/build/install/junit-platform-console/lib/junit-platform-console-1.0.0-SNAPSHOT.jar junit-platform-console/build/install/junit-platform-console/lib/junit-platform-engine-1.0.0-SNAPSHOT.jar junit-platform-console/build/install/junit-platform-console/lib/junit-platform-launcher-1.0.0-SNAPSHOT.jar junit-platform-console/build/install/junit-platform-console/lib/junit-vintage-engine-4.12.0-SNAPSHOT.jar junit-platform-console/build/install/junit-platform-console/lib/opentest4j-1.0.0-M1.jar ``` The current zip does not contain a single engine, it only contains the platform jars: ``` junit-platform-console/build/install/junit-platform-console/lib/junit-platform-commons-1.0.0-SNAPSHOT.jar junit-platform-console/build/install/junit-platform-console/lib/junit-platform-console-1.0.0-SNAPSHOT.jar junit-platform-console/build/install/junit-platform-console/lib/junit-platform-engine-1.0.0-SNAPSHOT.jar junit-platform-console/build/install/junit-platform-console/lib/junit-platform-launcher-1.0.0-SNAPSHOT.jar junit-platform-console/build/install/junit-platform-console/lib/opentest4j-1.0.0-M1.jar ```  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2016-12-09T12:36:06Z","2017-01-22T10:27:46Z"
"","747","TestIdentifier now uses TestDescriptor.Type","## Overview  This PR addresses part of #407 by using the new `TestDescriptor.Type` enum as new property of `TestIdentifier`. `TestIdentifier.isContainer()` and `TestIdentifier.isTest()` now also only delegate their work to `TestDescriptor.Type#isContainer()/isTest()`.  This PR also removes unnecessary Optional-wrapper usages within the creation of `TestIdentifier`s.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Platform,","sormuras","2017-03-23T11:30:20Z","2017-03-23T20:38:04Z"
"","630","Issue314 exclude classname patterns","## Overview  This PR addresses issue #314.   It adds support for filtering classes for exclusion in the ConsoleLauncher, the Gradle JUnit 5 plugin, and the JUnitPlatform runner.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","mmerdes","2017-01-18T12:50:10Z","2018-01-08T14:12:28Z"
"","796","Remove semicolons at the end of enums","## Overview  This patch removes redundant semicolons in the end of enum constants lists. While these semicolons aren't technically wrong, they're redundant.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---","closed","","mureinik","2017-04-18T03:38:36Z","2017-04-18T14:58:05Z"
"","326","Delete EngineDiscoveryRequest.getSelectors().","## Overview  This method is only used by tests. Production code always uses the method `getSelectorsByType`. By removing the method `getSelectors()` we have one method less that has to be supported and may constrain future decisions.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: enhancement,","stefanbirkner","2016-06-20T17:25:58Z","2016-06-20T17:40:02Z"
"","805","TestEngines not found by ServiceLoader on Java 9","## Overview  This issue was discovered in conjunction with tests on Java 9; however, the issue is likely applicable on Java 8 as well.  The following pseudo-code, when run inside a Java 9 JShell session...  ```java println(""ServiceLoader.load(TestEngine.class)""); println(""  loader = "" + Thread.currentThread().getContextClassLoader()); ServiceLoader.load(TestEngine.class).forEach(System.out::println);  println(""ServiceLoader.load(TestEngine.class, getClass().getClassLoader())""); println(""  loader = "" + getClass().getClassLoader()); ServiceLoader.load(TestEngine.class, getClass().getClassLoader()).forEach(System.out::println);  println(""ServiceLoader.load(TestEngine.class, TestEngine.class.getClassLoader())""); println(""  loader = "" + TestEngine.class.getClassLoader()); ServiceLoader.load(TestEngine.class, TestEngine.class.getClassLoader()).forEach(System.out::println); ```  yields the following :  ``` ServiceLoader.load(TestEngine.class)   loader = jdk.jshell.execution.DefaultLoaderDelegate$RemoteClassLoader@4b952a2d -  ServiceLoader.load(TestEngine.class, getClass().getClassLoader())   loader = jdk.internal.loader.Loader@42607a4f * org.junit.jupiter.engine.JupiterTestEngine@fa36558 * org.junit.vintage.engine.VintageTestEngine@672872e1  ServiceLoader.load(TestEngine.class, TestEngine.class.getClassLoader())   loader = jdk.internal.loader.Loader@42607a4f * org.junit.jupiter.engine.JupiterTestEngine@484970b0 * org.junit.vintage.engine.VintageTestEngine@4470f8a6 ```  The problem leads to `org.junit.platform.commons.util.PreconditionViolationException: Cannot create Launcher without at least one TestEngine; consider adding an engine implementation JAR to the classpath` messages and was first encountered at https://github.com/forax/pro/issues/23#issuecomment-296707542  ## Work-around  - A work-around is to use `getClass().getClassLoader()` as the result of `ClassLoaderUtils.getDefaultClassLoader()`. - The user (tool) has to set context classloader to the one that contains the engines: https://github.com/forax/pro/issues/23#issuecomment-296985361  ## Deliverables  - [ ] Investigate a safer/better way to load available engines (and other objects) at runtime.   - see also: #806","closed","theme: discovery,","sormuras","2017-04-25T09:52:12Z","2017-04-27T14:01:02Z"
"","535","Remove deprecated expectThrows() methods in Assertions.","## Overview  This issue picks up where #531 left off. ## Deliverables - [x] Completely remove `Assertions.expectThrows()`.","closed","component: Jupiter,","sbrannen","2016-10-04T12:26:14Z","2016-12-01T02:20:12Z"
"","732","Jupiter DiscoverySelectorResolver: to prune or not to prune","## Overview  This issue is a follow up from #720 where [question](https://github.com/junit-team/junit5/pull/720#discussion_r105541997)  arose: _Do we really need to prune here (since DefaultLauncher will do it later anyway)?_  When the line `engineDescriptor.pruneTree();` is deleted, three `DiscoverySelectorResolverTests` fail:  - `resolvingSelectorOfNonTestMethodResolvesNothing()` - `resolvingUniqueIdWithWrongParamsResolvesNothing()` - `resolvingUniqueIdOfNonTestMethodResolvesNothing()`   ## Deliverables  - [x] Investigate and decide if the pruning call can be omitted","closed","component: Jupiter,","sormuras","2017-03-12T20:47:34Z","2017-07-03T10:48:17Z"
"","537","Introduce @Testable to facilitate test discovery in IDEs","## Overview  This issue is a direct result of discussions in #504. ## Deliverables - [x] Introduce and use `@Testable` annotation","closed","theme: discovery,","sbrannen","2016-10-05T17:44:18Z","2016-11-30T08:39:06Z"
"","470","Introduce support for selecting URIs in ConsoleLauncher and Gradle plugin","## Overview  This issue builds on the work performed in #469. ## Related Issues - #437 - #452  - #468 ## Deliverables - [x] Introduce support for selecting URIs in `ConsoleLauncher` via `-u` and `--select-uri` options - [x] Introduce support for selecting URIs in the JUnit Platform Gradle plugin","closed","theme: discovery,","sbrannen","2016-08-17T09:55:14Z","2016-11-30T08:24:34Z"
"","452","Introduce support for selecting classpath resources in ConsoleLauncher and Gradle plugin","## Overview  This issue builds on the work performed in #301. ## Related Issues - #437 - #453  - #468 ## Deliverables - [x] Introduce support for selecting classpath resources in `ConsoleLauncher` via `-r` |  `--select-resource` - [x] Introduce support for selecting classpath resources in the JUnit Platform Gradle plugin","closed","theme: discovery,","sbrannen","2016-08-10T20:07:44Z","2016-11-30T08:18:22Z"
"","453","Introduce support for selecting files and directories in ConsoleLauncher and Gradle plugin","## Overview  This issue builds on the work performed in #123. ## Related Issues - #437 - #452  - #468 ## Deliverables - [x] Introduce support for selecting files in `ConsoleLauncher` via `-f` |  `--select-file` - [x] Introduce support for selecting directories in `ConsoleLauncher` via `-d` |  `--select-directory` - [x] Introduce support for selecting files in the JUnit Platform Gradle plugin - [x] Introduce support for selecting directories in the JUnit Platform Gradle plugin","closed","theme: discovery,","sbrannen","2016-08-10T20:08:08Z","2016-11-30T08:18:22Z"
"","736","Assertions.assertLinesMatch(List, List) proposal","## Overview  This is PR promotes an assertion utility developed for internal `List` comparsion to the public Jupiter API as `org.junit.jupiter.api.Assertions.assertLinesMatch(List expected, List actual)`  Simple example: ``` List expected = Arrays.asList(""^first.+line"", "".[[oO)"", ""last line$""); List actual = Arrays.asList(""first line"", "".[[oO)"", ""last line""); assertLinesMatch(expected, actual); ``` File/System.out-based [example](https://github.com/junit-team/junit5/blob/assert_lines_match/platform-tests/src/test/java/org/junit/platform/console/ConsoleDetailsTests.java#L207): ``` List expectedLines = Files.readAllLines(path, UTF_8); List actualLines = asList(result.out.split(""\\R""));  assertLinesMatch(expectedLines, actualLines); ```  ## Motivation  The new assertion enhances the already existing `assertIterableEquals(Iterable expected, Iterable actual)` by supporting the following ""match outline"" in sequence:  1. test simple `String` equality fur current expected and actual line 2. treat the expected line as a regular expression pattern and match the actual line 3. interpret fast-forward marker `>> [limit | or some arbitrary comment ] >>` to skip a (limited) block of actual lines. If the fast-forward limit is not given, the skipped block grows until the next expected line is found.  See [AssertionsAssertLinesMatchTests.java](https://github.com/junit-team/junit5/blob/assert_lines_match/junit-jupiter-engine/src/test/java/org/junit/jupiter/api/AssertionsAssertLinesMatchTests.java) for more usage examples.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","sormuras","2017-03-14T13:08:12Z","2017-03-17T09:25:20Z"
"","365","Applied skeletal implementation to interface migration refactoring.","## Overview  This is a semantics-preserving refactoring. - We are evaluating a research prototype automated refactoring Eclipse plug-in called [Migrate Skeletal Implementation to Interface](https://github.com/khatchad/Migrate-Skeletal-Implementation-to-Interface-Refactoring). We have applied the tool to your project in the hopes of receiving feedback. - The approach is very conservative and you should not observe many source code changes. - The source code should be semantically equivalent to the original. - We have run tests prior to applying to the tool and following the application. All tests pass.  Thank you for your help in this evaluation!  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","status: declined,","khatchad","2016-06-28T14:44:06Z","2017-05-05T18:03:34Z"
"","255","Simplify TestSource class hierarchy","## Overview  This is a Pull Request for #175 - Simplify TestSource class hierarchy. - Refactoring of class structure for TestSource  - Applied refactoring to production and test code - Applied refactoring to surefire plugin  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: task,","bechte","2016-05-12T11:57:50Z","2016-05-13T16:45:30Z"
"","342","Don't accept flag enable-exit-code.","## Overview  This is a follow-up to e568a3563c417829a20eec988daa98797c8391b3. That commit removed support for the flag `enable-exit-code`. It is already deployed to the snapshot repository. Therefore we can now remove support for this flag from `AvailableOptions`.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","stefanbirkner","2016-06-21T18:25:32Z","2016-06-21T21:43:18Z"
"","294","Introduce assertIterableEquals() methods in Assertions","## Overview  This is a follow-on to #167 to introduce prototype `assertIterableEquals` methods to `Assertions`.  Would the JUnit team find this contribution useful? If so, is there any way it could be improved?  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Jupiter,","jbduncan","2016-06-04T16:54:49Z","2016-11-30T08:44:48Z"
"","532","Make DeGraph check faster and more user friendly","## Overview  This is a first step towards a Degraph Gradle plugin as discussed in #483. It adds a `degraph` task to every project which ensures that the code is cycle-free. We no longer need to scan the whole classpath as each project is checked individually. This makes builds quite a bit faster.  As you can see the DegraphCheck task is still hardcoded with the configuration for the JUnit project. We'd need to discuss how to model these constraints. In the simplest case we could just have a dedicated configuration file, like Degraph [already has](http://blog.schauderhaft.de/degraph/documentation.html#configuration-file) for visulization.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","oehme","2016-10-02T16:26:20Z","2016-10-03T12:40:32Z"
"","688","Add findMethods to reflection support API","## Overview  This commit publishes method ReflectionSupport#findMethods which in turn delegates to the internal utility performing hierarchical method searches.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2017-02-24T20:20:00Z","2017-03-12T17:15:46Z"
"","289","Array assertions","## Overview  This commit introduces all possible variants of `assertArrayEquals` method for: - primitive types - `float` arrays within the given `float` delta - `double` arrays within the given `double` delta - object arrays, which are examined deeply like in `Arrays#deepEquals()`  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: enhancement,","lutovich","2016-05-29T21:43:35Z","2016-05-30T16:11:55Z"
"","439","Introduce lambda based timeout assertions","## Overview  This commit introduces `assertTimeout()` methods in `Assertions` that support both lazy and preemptive timeouts for blocks of code supplied as lambda expressions.  For example, the following assertion would pass:  `assertTimeout(ofMillis(500), () -> Thread.sleep(10));`  Whereas, the following assertion would fail:  `assertTimeout(ofMillis(10), () -> Thread.sleep(500));`  The above examples execute the code block in the same thread as the caller. To perform the same assertion as the last example and have the code executed in a separate thread and then preemptively aborted, the above can be rewritten as follows.  `assertTimeoutPreemptively(ofMillis(10), () -> Thread.sleep(500));`  Issue: #438  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: programming model,","sbrannen","2016-07-26T14:49:04Z","2016-11-30T08:56:20Z"
"","788","Add ClassLoaderUtils and log location from which an engine was loaded","## Overview  This commit enhances the configuration-level log statement with the location URL from where the classloader loaded the engine class. This commit also introduces dedicated `ClassLoaderUtils` class that encapsulates static class-related helper methods.  Addresses part of #775   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2017-04-10T16:00:26Z","2017-04-13T06:44:07Z"
"","791","Add ClassLoaderUtils and log the location from which an engine was loaded","## Overview  This commit enhances the configuration-level log statement with the location URL from where the classloader loaded the engine class.  Also introduce dedicated `ClassLoaderUtils` class that encapsulates static class-related helper methods. As a first action, this commit moves `getDefaultClassLoader()` to `ClassLoaderUtils` helper.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","sormuras","2017-04-13T06:39:40Z","2017-04-13T06:44:07Z"
"","925","Add ExtensionContext.getRoot() accessor","## Overview  This commit adds a convenient accessor that retrieves the root context of the current one. It eases the work of extension authors that want to store a value in the top-most, the root context.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","sormuras","2017-07-08T16:52:07Z","2017-07-09T15:43:50Z"
"","552","Extend TestExecutionSummary to allow a list of failures to be retrieved.","## Overview  This change adds a method getFailures() to TestExecutionSummary and implements it. This makes the custom formatting and logging of failures possible instead of having to print to PrintWriter.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","gdiegel","2016-10-31T15:52:44Z","2016-11-30T08:24:22Z"
"","959","Update Gradle from 4.0 to 4.0.1","## Overview  This bug-fix release fixes a possible deadlock in parallel test execution.  The build-scan plugin has been update from 1.7.4 to 1.8, too. This update was necessary because the old plugin is not compatible anymore.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","stefanbirkner","2017-07-18T06:00:03Z","2017-07-18T06:14:53Z"
"","832","Remove unnecessary public modifiers","## Overview  This batch commit applies Jupiter feature supporting package private test classes and methods to our Jupiter tests.  Closes #679  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: task,","sormuras","2017-05-04T08:13:53Z","2017-05-04T12:27:53Z"
"","904","Gradle Plugin: Static accessors for sub-extensions on JunitPlatformExtension","## Overview  This allows statically typed build systems (eg. written in Kotlin) to configure the JUnitPlatformExtension sub-extensions without jumping through confusing syntax hoops.  Closes #902   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","3rd-party: Gradle,","JLLeitschuh","2017-06-29T15:17:13Z","2017-07-05T13:27:23Z"
"","227","Jekyll-based website","## Overview  This adds a Jekyll-based website that only consists of a single page so far. It contains links to User Guide, Javadoc, and GitHub. In addition, it includes a ""Upcoming Events"" section that has been prefilled using data from #222.  Related issue: #205.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","marcphilipp","2016-04-17T18:57:24Z","2016-04-18T12:57:12Z"
"","770","Publish PDF version of User Guide","## Overview  The User Guide is currently published in HTML; however, it would be beneficial to provide a PDF download as well.  ## Related Issues  - #777  - #1099   ## Deliverables  - [x] Configure Gradle build to generate PDF version of the User Guide. - Use the `rouge` syntax highlighting support for PDFs.   - Since `rouge` is not yet supported for the `html5` _backend_, we would need to have separate configurations for HTML and PDF; see https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/28#issuecomment-25956045   - Will be addressed in #777. - Use the `rouge` syntax highlighting support for HTML.   - Will be addressed in #777. - [x] Determine why `component-diagram.svg` is not embedded in the generated PDF.   - See https://github.com/asciidoctor/asciidoctor-pdf/issues/271. - [x] Ensure that `component-diagram.svg` gets embedded in the generated PDF.   - See https://github.com/asciidoctor/asciidoctor-pdf/issues/271#issuecomment-291992364 for details. - [x] Construct links to JavaDoc API as absolute URLs instead of the relative links used in the HTML version of the User Guide. - Determine if special characters (e.g., emoji from custom display names and glyphs used with `unicode` mode for the `ConsoleLauncher`) can be displayed in the generated PDF.   - See discussion in https://github.com/asciidoctor/asciidoctor-pdf/issues/323.   - Will be addressed in #2315. - [x] Publish PDF version of the User Guide alongside the HTML version.   - Currently published as http://junit.org/junit5/docs/snapshot/user-guide/index.pdf   - [x] ~Rename the generated `index.pdf` file to something like `junit-user-guide-5.0.0-M5.pdf`.~ Done in #2314.","closed","component: Vintage,","sbrannen","2017-04-05T15:23:12Z","2020-06-05T17:53:21Z"
"","664","Test tree printer should not continue connection lines past terminal nodes","## Overview  The tree printer continues hierarchy connection lines past terminal nodes as shown below:  ``` │  ├─ A stack │  │  ├─ is instantiated with new Stack() ✔ │  │  ├─ when new │  │  │  ├─ throws EmptyStackException when popped ✔ │  │  │  ├─ throws EmptyStackException when peeked ✔ │  │  │  ├─ is empty ✔ │  │  │  ├─ after pushing an element │  │  │  │  ├─ it is no longer empty ✔ │  │  │  │  ├─ returns the element when peeked but remains not empty ✔ │  │  │  │  ├─ returns the element when popped and is empty ✔ ```  - (X) **Bug report.** It's conventional to use the lower-left corner character to indicate that a node is the last node in a particular level of the hierarchy.  ## Deliverables  - [ ] Detect the last node in a given level of the hierarchy and use the lower-left corner character (extended ASCII 192 or the unicode equivalent) to discontinue the hierarchy's connection line as shown below:  ``` │  ├─ A stack │  │  ├─ is instantiated with new Stack() ✔ │  │  └─ when new │  │      ├─ throws EmptyStackException when popped ✔ │  │      ├─ throws EmptyStackException when peeked ✔ │  │      ├─ is empty ✔ │  │      └─ after pushing an element │  │          ├─ it is no longer empty ✔ │  │          ├─ returns the element when peeked but remains not empty ✔ │  │          └─ returns the element when popped and is empty ✔ ```","closed","type: enhancement,","smoyer64","2017-02-19T01:28:25Z","2017-04-21T09:11:32Z"
"","328","Remove abandoned TODO about configuring Launcher.","## Overview  The TODO is there since the beginning. The current `Launcher` interface does no allow any configuration except of adding listeners.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","stefanbirkner","2016-06-21T09:20:41Z","2016-06-21T10:27:21Z"
"","277","Renaming ReportingTest.java to conform the the junit5 team's conventi…","## Overview  The title says it all!  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  …ons.","closed","","smoyer64","2016-05-23T13:23:20Z","2016-05-23T15:40:44Z"
"","666","Test tree printer emits extraneous characters","## Overview  The test tree printer emits extraneous characters when an ```Extension``` uses the ```ExtensionContext.publishReportEntry()``` method.  The sample code below exhibits this problems when added to the documentation examples and included in a test via ```@ExtendWith```:  ``` import org.junit.jupiter.api.extension.BeforeTestExecutionCallback; import org.junit.jupiter.api.extension.TestExtensionContext;  public class ReportPublishingExtension implements BeforeTestExecutionCallback {  	@Override 	public void beforeTestExecution(TestExtensionContext context) throws Exception { 		context.publishReportEntry(""ReportPublishingExtension"", ""Outputs a report entry""); 	}  }    import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith;  @ExtendWith(ReportPublishingExtension.class) public class ReportPublishingDemo { 	 	@Test 	public void example() { 		 	}  } ```  In this case, the output contains the following snippet:  ``` │  ├─ AssertionsDemo │  │  ├─ groupedAssertions() ✔ │  │  ├─ exceptionTesting() ✔ │  │  ├─ standardAssertions() ✔ │  │  ├─ timeoutNotExceeded() ✔ │  │  ├─ timeoutNotExceededWithResult() ✔formTest │  │  ├─ timeoutNotExceededWithMethod() ✔ │  │  ├─ timeoutExceeded() ✔ │  │  ├─ timeoutExceededWithPreemptiveTermination() ✔ ```  Note the extra **formTest** next to the check indicating that the ```timeoutNotExceededWithResult()``` test has passed.  In the ANSI output, the text is shown in bright white and is always some portion of the phrase ""platformTest"".  - (X) **Bug report.** This problem looks like there's information sticking around in a buffer somewhere.  If there are multiple extensions that publish report entries, of even if one Extension publishes report entries multiple times, there will be one or more places where the extra characters are emitted.  The position of the extra characters in the rendered tree does not appear to be related to when the report entry is published.  ## Deliverables  - [ ] Allow extensions to publish report entries without extraneous content being printed in the tree.","closed","status: declined,","smoyer64","2017-02-19T17:39:31Z","2017-04-25T10:15:34Z"
"","683","Close the stream in org.junit.jupiter.engine.descriptor.TestFactoryTestDescriptor#invokeTestMethod()","## Overview  The stream received by a @TestFactory method should be closed after all the tests have been run.  ## Motivation  Currently, if you wish to create dynamic tests based on the data from file, you cannot call the following:  ``` @TestFactory Stream pointTests() {     return         Files.lines(fileName).map(Point::parse).map(             point -> dynamicTest(""Testing "" + p, () -> pointTest(p))         ); }  ``` because the stream represented by `Files.lines()` is a file-system-based resource and must be closed.  Unfortunately we cannot just use ``` @TestFactory Stream pointTests() { {     try (final Stream lines = Files.lines(fileName)) {     return         lines.map(Point::parse).map(             point -> dynamicTest(""Testing "" + p, () -> pointTest(p)))     ); } ``` as the source stream is closed **before** JUnit5 even starts reading from it (the termination operation is lazy).  The only solution currently is probably only using an interim collection and collect the lines to it, which is awkward:  ``` @TestFactory Stream pointTests() {     final List data;     try (final Stream lines = Files.lines(fileName)) {         data = lines.map(Point::parse).collect(Collectors.toList());     );     return data.map(point -> dynamicTest(""Testing "" + p, () -> pointTest(p)); } ```  **It would be most convenient if the contract of @TestFactory guaranteed calling Stream#close().**  ## Documentation  It is crucial that all the related documentation states that the stream is closed, so it becomes part of the contract and the clients may rely on it.","closed","component: Jupiter,","honza-zidek","2017-02-23T20:28:35Z","2017-02-26T19:00:51Z"
"","812","Remove Node.isLeaf()","## Overview  The semantics of `Node.isLeaf()` are unclear. It was introduced to handle dynamic tests. Right now it's not possible to mix dynamic and static children in a container. If `HierarchicalTestExecutor` kept track of already executed `TestDescriptors`, we should be able to get rid of `Node.isLeaf()`.  ## Deliverables  - [x] Investigate if we can get rid of `Node.isLeaf()` - [x] If so, refactor `HierarchicalTestExecutor` and remove `Node.isLeaf()`","closed","component: Platform,","marcphilipp","2017-04-28T07:53:36Z","2017-05-03T11:07:51Z"
"","296","Test with JDK 9 Early Access builds","## Overview  The OpenJDK team has asked the JUnit team to test with JDK 9 Early Access builds and report any showstopper issues to them.  The goal of this issue is therefore to perform such tests and provide feedback to them. ## Resources - [JDK 9 early access builds](https://jdk9.java.net/download/) - [Gradle 3.0 nightly builds](http://gradle.org/gradle-nightly-build/)   - [nightly release notes](https://docs.gradle.org/nightly/release-notes) - [Gradle JDK 9 Support](https://github.com/gradle/gradle/blob/master/design-docs/jdk9-support.md) wiki page - [Travis CI JDK 9 Support](https://github.com/travis-ci/travis-ci/issues/5520) ## Deliverables - [x] Set up a build using JDK 9 early access builds and Gradle 3.0 nightly builds ## Manual Test Results  The following are the results of manual JUnit 5 builds against Gradle 3.0 nightly builds with JDK 8 and JDK 9.  Note: `gct` is an alias for `gradlew clean test`. ### July 2, 2016 - ✅ `gct` with **Gradle 3.0-20160702000020+0000** and **JDK 1.8.0_92-b14** - ✅ `gct` with **3.0-20160702000020+0000** and **JDK 9-ea+124** ### June 27, 2016 - ✅ `gct` with **Gradle 3.0-20160627000036+0000** and **JDK 1.8.0_92-b14** - ✅ `gct` with **Gradle 3.0-20160627000036+0000** and **JDK 9-ea+124** ### June 15, 2016 - ✅ `gct` with **Gradle 3.0-20160615000025+0000** and **JDK 1.8.0_92-b14** - ✅ `gct` with **Gradle 3.0-20160615000025+0000** and **JDK 9-ea+122**","closed","theme: build,","marcphilipp","2016-06-07T13:21:25Z","2019-01-24T16:28:37Z"
"","918","Check that the discovery request is not null","## Overview  The JupiterTestEngine checks this already. I don't see any reason why the VintageTestEngine should behave differently.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","stefanbirkner","2017-07-05T19:55:01Z","2017-08-31T20:10:00Z"
"","776","Do not execute abstract tests in VintageTestEngine","## Overview  The Junit4DiscoveryRequestResolver did not take the isPotentialJunit4TestClass predicate in consideration. This is now added in the TestClassCollector, so Abstract classes are properly filtered.  Multiple tests however used non-JUnit 4 compliant classes as test input. These are now moved to make them proper JUnit 4 test classes.  Perhaps some of these test classes should be given better names, since they are now on the top level.  The logging follows the output maven generated for the same class when it was being run from the jupiter engine.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","theme: discovery,","LiamClark","2017-04-06T19:45:17Z","2017-04-18T14:36:06Z"
"","672","Introduce extension API for creating the test instance","## Overview  The javadocs for the JUnit 4 [```TestRule```](http://junit.org/junit4/javadoc/latest/org/junit/rules/TestRule.html) states:  >   The Statement that executes the method or suite is passed to each annotated Rule in turn, >   and each may return a substitute or modified Statement, which is passed to the next Rule, if any.  I currently have a JUnit 4 rule that uses this ability to replace the framework's provided instance with one that has been initialized via JavaEE CDI (Weld) but this isn't currently possible with JUnit 5.  The ```MockitoExtension``` post-processes the instance provided by the engine - doing that in a ```WeldExtension``` wouldn't be terribly hard if we're simply talking about processing the ```@Inject``` annotations but fully initializing the instance as a proper CDI managed object would be non-trivial and would require duplicating much of the functionality already provided by the CDI container.  ## Feature request  Provide an ```Callback``` that allows an ```Extension``` to produce or replace the test instance.  In the case of CDI, you'd replace:  ```     Object testInstance = new ClassUnderTest(); ```  with something like:  ```     Object testInstance = beanManager.select(ClassUnderTest.class).get(); ```  ## Deliverables  - [x] Provide the ability to replace or alter the engine's provided test instance.","closed","component: Jupiter,","smoyer64","2017-02-22T13:54:26Z","2018-08-08T14:59:15Z"
"","721","Update javadocs for ExtensionContextException","## Overview  The javadocs for ExtensionContextException currently read:  >   Thrown if an error is encountered regarding the use of an ExtensionContext or ExtensionContext.Store.  It seems like this exception would also be appropriate for situations where the user has caused a problem with the extension's context (lower-case ""c"").  One example might be:  ``` @EnabledIf( ... ); @DisabledIf( ... ); void someTest() { ... } ```  I'd like to propose that the javadocs be changed to read as follows:  >   Thrown if an error is encountered when evaluating an extension's context.  - (X) **Feature request.** Broaden the allowed use of the ExtensionContextException.  ## Deliverables  - [ ] Change the javadocs.","closed","component: Jupiter,","smoyer64","2017-03-10T13:53:35Z","2019-07-19T10:07:25Z"
"","691","Migrate to java-library Gradle plugin","## Overview  The java-library plugin allows for more fine-grained dependency management. In particular, it distinguishes between `api` and `implementation` dependencies.  ## Prerequisites  - Gradle 3.4 (#690)  ## Deliverables  - [x] Change all modules to use java-library plugin and appropriate dependency configurations","closed","theme: build,","marcphilipp","2017-02-26T07:29:13Z","2017-03-06T16:43:04Z"
"","787","Consider static nested classes as potential JUnit4 tests","## Overview  The IsPotentialJunit4TestClass now checks if a memberclass is declared static. If so it lets it through the filter.  Also includes unit tests for the IsPotentialJUnit4TestClass. It might be nice to use the parameters support for these tests.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","theme: discovery,","LiamClark","2017-04-09T17:33:09Z","2017-04-11T06:32:46Z"
"","432","Support simple variable expansion in display names","## Overview  The integration of a full-blown expression language for generating the strings of display names might not really be necessary. A simple alternative would be to allow for the expansion of those variables that are injected by the current method argument `ParameterResolver`. The scope of this proposal is intentionally limited to calling the `toString()` method on said arguments and replacing the variable reference in the `DisplayName` value with this output.    ## Related Issues  - #162","closed","component: Jupiter,","mmerdes","2016-07-25T10:17:02Z","2020-08-11T08:35:53Z"
"","757","Upgrade from github-pages to git-publish","## Overview  The following note is printed while building JUnit 5: ``` org.ajoberstar.github-pages is deprecated will be removed in gradle-git 2.0.0. Users should migrate to org.ajoberstar.git-publish. ```   ## Deliverables  - [X] Migrate to org.ajoberstar.git-publish https://github.com/ajoberstar/gradle-git-publish - [x] Adapt Jenkins build","closed","theme: build,","sormuras","2017-03-31T11:40:31Z","2017-04-09T19:07:43Z"
"","929","Allow setSource to be called with null","## Overview  The field source already can be `null`. This is the case as long as `setSource` is not called. Existing code always checked the provided source and didn't call `setSource` if it was `null`. This check is not needed anymore.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","stefanbirkner","2017-07-09T23:23:21Z","2017-07-14T19:17:54Z"
"","427","HierarchicalTestEngine is no longer a generic type.","## Overview  The engine did not use the type parameter. Making HierarchicalTestEngine a simple type reduces complexity.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","stefanbirkner","2016-07-23T23:33:46Z","2016-07-25T13:53:19Z"
"","915","Don't enforce syntax highlighting for markdown.","## Overview  The document is not rendered completely in my IDE when the part for the syntax highlightning is present. With a simple code markup it is rendered completely. GitHub renders itself already renders the snippet without syntax highlightning. This means this commit does not change the rendering of the page on github.com.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","stefanbirkner","2017-07-04T18:23:48Z","2017-07-19T05:51:10Z"
"","947","Delete unnecessary constructor","## Overview  The deleted constructor was only used internally by one of the other constructors.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Vintage,","stefanbirkner","2017-07-14T19:55:21Z","2017-07-15T14:22:15Z"
"","781","Static inner classes should be considered as a potential JUnit4 test classes","## Overview  The current implementation of  [isPotentialJUnit4TestClass](https://github.com/junit-team/junit5/blob/master/junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/IsPotentialJUnit4TestClass.java#L30) excludes any member class. This can be seen in #778. To reiterate, a member class is:   > A member class is a class whose declaration is directly enclosed in the body of another class or interface declaration (§8.1.6, §9.1.4).  from the java 8 specification section 8.5 page 256  This also includes static inner classes. But JUnit 4 does consider static inner classes as valid. An example for this would be the [enclosed runner](https://github.com/junit-team/junit4/wiki/'Enclosed'-test-runner-example).   If a static member class is indeed the only valid one for JUnit4, we can simply add a check: ```java ReflectionUtils.isStatic(testClass) ``` ## Deliverables  - [x] A corrected implementaiton of `isPotentialJUnit4TestClass` - [x] Unit tests for `isPotentialJUnit4TestClass` - [x] Bug fix entry in the release notes","closed","component: Vintage,","LiamClark","2017-04-08T16:26:01Z","2017-04-11T14:26:38Z"
"","701","Console standalone jar does not come alone","## Overview  The current console standalone jar is uploaded with the ""full"" pom file, which leads to too many dependent jars to be downloaded when you only want and need the standalone ""classified"" jar.  -  (standalone) -> **junit-platform-console-1.0.0-SNAPSHOT-standalone.jar** // only file needed -  (standalone) -> junit-platform-launcher-1.0.0-SNAPSHOT.jar -  (standalone) -> junit-platform-engine-1.0.0-SNAPSHOT.jar -  (standalone) -> junit-platform-commons-1.0.0-SNAPSHOT.jar -  (standalone) -> opentest4j-1.0.0-SNAPSHOT.jar  Potential caused by by-passing http://imperceptiblethoughts.com/shadow/#default_java_groovy_tasks :   _Configures the uploadShadow task (as part of the maven plugin) with the following behavior:_ - _Removes the compile and runtime configurations from the pom.xml file mapping._ - _Adds the shadow configuration to the pom.xml file as RUNTIME scope._  This is a test case in another project:  https://github.com/sormuras/beethoven/commit/669a6cb8361a97f850b8c6145aa68523870c7b20  ## Deliverables  - [ ] Only file `junit-platform-console-1.0.0-SNAPSHOT-standalone.jar` has to be resolved when depending on ""standalone"" classifier.","closed","component: Platform,","sormuras","2017-03-01T14:36:56Z","2017-03-03T12:45:23Z"
"","917","Add test for precondition of discover method","## Overview  The code that checks the precondition was not tested.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","stefanbirkner","2017-07-05T19:43:35Z","2017-07-05T20:40:34Z"
"","690","Upgrade to Gradle 3.4","## Overview  The build fails after upgrading to Gradle 3.4 with following stacktrace: ``` ... :junit-platform-gradle-plugin:spotlessCheck :junit-platform-gradle-plugin:compileTestJava NO-SOURCE :junit-platform-gradle-plugin:compileTestGroovy :junit-platform-gradle-plugin:processTestResources NO-SOURCE :junit-platform-gradle-plugin:testClasses :junit-platform-gradle-plugin:test  org.junit.platform.gradle.plugin.JUnitPlatformPluginSpec > adds dependencies to configuration FAILED     java.lang.UnsupportedOperationException         at org.gradle.api.internal.CompositeDomainObjectSet$DomainObjectCompositeCollection.containsAll(CompositeDomainObjectSet.java:228)         at org.gradle.api.internal.DefaultDomainObjectCollection.containsAll(DefaultDomainObjectCollection.java:241)         at org.gradle.api.internal.DelegatingDomainObjectSet.containsAll(DelegatingDomainObjectSet.java:98)         at org.gradle.api.internal.DelegatingDomainObjectSet.containsAll(DelegatingDomainObjectSet.java:98)         at org.junit.platform.gradle.plugin.JUnitPlatformPluginSpec.adds dependencies to configuration(JUnitPlatformPluginSpec.groovy:251)  10 tests completed, 1 failed :junit-platform-gradle-plugin:test FAILED ```  ## Deliverables  - [x] Solve `UnsupportedOperationException` - ~Make use of https://docs.gradle.org/current/userguide/java_library_plugin.html~ Moved to #691","closed","theme: build,","sormuras","2017-02-24T21:54:43Z","2017-02-26T13:03:47Z"
"","866","Set JPMS module names in all published artifacts","## Overview  The artifacts listed here https://github.com/junit-team/junit5#dependency-metadata should define their JPMS module names.  > [...] the name of a module to be specified in the MANIFEST.MF file of a JAR file. If a JAR file with such a manifest entry is not a modular JAR (i.e., it has no module-info.class file), but is used as an automatic module, then the name of the automatic module is that specified in the manifest rather than that derived from the name of the JAR file itself. This would allow the maintainer of an existing library to specify a preferred module name simply by updating the library’s manifest. [...] http://openjdk.java.net/projects/jigsaw/spec/issues/#ModuleNameInManifest  See http://mail.openjdk.java.net/pipermail/jpms-spec-experts/2017-May/000687.html for details.  ## Naming proposal  Follow reverse DNS naming convention described here http://blog.joda.org/2017/04/java-se-9-jpms-module-naming.html  - `junit-platform-commons` ➡️ `org.junit.platform.`~~console~~ `commons` - `junit-jupiter-api` ➡️ `org.junit.jupiter.api` - `junit-vintage-engine` ➡️ `org.junit.vintage.engine`","closed","theme: modules,","sormuras","2017-05-26T13:04:47Z","2017-06-07T13:01:38Z"
"","324","Don't state implementation details in Javadoc.","## Overview  The algorithm for creating the returned filter is an implementation detail that should not be fixed by the API specification (= Javadoc). This makes it easier to modify the implementation in the future.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","stefanbirkner","2016-06-20T13:59:42Z","2016-06-20T14:42:48Z"
"","373","Define a new XML report schema that supports the JUnit Platform","## Overview  The `XmlReportWriter` in the `junit-platform-console` currently generates XML that is compliant with the de facto standard for JUnit 4; however, this XSD is very limiting and does not support many of the features of the JUnit Platform.  ## Goals  Define a new XML report schema that supports the features of the JUnit Platform.  The following is only a partial list of features needed beyond the JUnit 4 de facto standard.  - unique IDs - display names - tags - test sources - custom reporting entries - nested test classes - skipped vs. aborted execution  ## Additional Considerations  - Provide a mechanism for converting between the JUnit 4 XSD and JUnit Platform XSD (e.g., via XSLT). - Provide a JSON based format compatible with the XML format.  ## Related Discussions  - https://github.com/ota4j-team/opentest4j/issues/9 - #86  - #350  - #372","closed","theme: build,","sbrannen","2016-07-01T15:45:25Z","2022-05-15T17:06:05Z"
"","585","Load and register custom TestExecutionListener implementations automa…","## Overview  The `DefaultLauncher` now uses the `ServiceLoader` API to automatically load and register custom `TestExecutionListener` implementations discussed in #583 .  ~~_If this is going in the right direction, I'll add unit tests for the new code._~~  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2016-12-05T08:56:41Z","2016-12-07T05:04:01Z"
"","833","ParameterizedTestParameterResolver conflicts with parameterized @BeforeEach","## Overview  The ```ParameterizedTestParameterResolver``` conflicts with parameter resolution in ```@BeforeEach``` methods in the class containing the ```@ParameterizedTest```.  I would presume that parameterized ```@BeforeEach``` methods in super-classes as well as ```@AfterEach``` methods will have the same problem.  ## Bug report - JUnit 5 version M4 - Current behavior: The ```ParameterizedTestParameterResolver``` attempts to provide parameter resolution for other methods.  My opinion is that the ```ParameterResolver``` should make sure it's ""injecting"" parameters only for methods annotated with ```@ParameterizedTest```. - Expected behavior: The parameters provided on a ```@ParameterizedTest``` method would only resolve parameters on the annotated test method.  ## Example  In a class annotated with ```@ExtendWith(MockitoExtension.class)```, the following set-up and test methods are present:  ```java   @BeforeEach   void setUp(@Mock Consul.Builder consulBuilder, @Mock Consul consulClient) {     doReturn(consulClient).when(consulBuilder).build();          consulKeyInjector = new ConsulKeyInjector();     consulKeyInjector.consulBuilder = consulBuilder;     consulKeyInjector.consulClient = consulClient;   }    @ParameterizedTest   @CsvSource({       ""CamelCase, CAMELCASE"",       ""dotted.java.property, DOTTED_JAVA_PROPERTY"",       ""ALREADY_AN_ENVIRONMENT_VARIABLE, ALREADY_AN_ENVIRONMENT_VARIABLE""   })   void testToEnvironmentName(String input, String expected) {     String actual = ConsulKeyInjector.toEnvironmentName(input);     assertThat(actual).isEqualTo(expected);   } ```  Note that in this case, other ```@Test``` methods in this class are actually using the mocks.  When this class' tests are executed, the following failure is logged:  ``` testToEnvironmentName(String, String)  Time elapsed: 0.001 sec  <<< FAILURE! org.junit.jupiter.api.extension.ParameterResolutionException: Discovered multiple competing ParameterResolvers for parameter [com.orbitz.consul.Consul$Builder arg0] in executable [void edu.psu.swe.consul.ConsulKeyInjectorTests.setUp(com.orbitz.consul.Consul$Builder,com.orbitz.consul.Consul)]: edu.psu.swe.consul.MockitoExtension, org.junit.jupiter.params.ParameterizedTestParameterResolver ```  ### Work-around  Allow the ```MockitoExtension```'s ```TestInstancePostProcessor``` to inject the mocks into member fields in the test class as shown below:  ```java   @Mock   Consul.Builder consulBuilder;      @Mock   Consul consulClient;      ConsulKeyInjector consulKeyInjector;      @BeforeEach   void setUp() {     doReturn(consulClient).when(consulBuilder).build();          consulKeyInjector = new ConsulKeyInjector();     consulKeyInjector.consulBuilder = consulBuilder;     consulKeyInjector.consulClient = consulClient;   } ```  ## Deliverables  - [ ] Limit the ```ParameterizedTestParameterResolver```'s scope to only the method it's annotating.","closed","component: Jupiter,","smoyer64","2017-05-04T13:17:37Z","2017-07-03T10:48:19Z"
"","436","Relocate @API to a stand-alone module","## Overview  The `@API` annotation may better serve the community at large if it is moved from `junit-platform-commons` to a stand-alone module.  ## Related Issues - #144  - #317  - #375   ## Deliverables  - [x] Refactor the `@API` annotation so that it has the following attributes:    - [x] `status: Status` (used to be `value`)    - [x] `since: String` (version the status was last changed, e.g. `""5.0.0""`, defaults to `""""`)    - [x] `consumers: String[]` (list of package patterns for intended consumers, defaults to `{""*""}`) - [x] Rename `Status` constants to align with industry standards for enum constants. - [x] Set `since` attribute across the JUnit 5 code base. - ❌  Set `consumers` attribute across the JUnit 5 code base.    - to be addressed in #1054  - [x] Move `@API` to a stand-alone project on GitHub. - [x] Use `@API` from the `@API Guardian` project and delete `@API` from `junit-platform-commons`.","closed","theme: build,","sbrannen","2016-07-25T18:23:50Z","2017-09-09T14:08:46Z"
"","193","Issue 58: Support for DynamicTest creation on runtime","## Overview  Support for DynamicTest creation on runtime. - Created a new extension point `DynamicTestCreator`. - Used the new extension point for `void` methods annotated by `@Dynamic` in `DynamicMethodTestDescriptor`. - Added a test to `DynamicTestGenerationTests` - Extended documentation including example.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: execution,","aburmeis","2016-03-11T23:01:22Z","2016-05-24T15:31:02Z"
"","230","Remove redundant toString() calls","## Overview  String.toString() just returns the string itself, so calling toString() on a String instance is pointless.  This patch removes the occurrences of this faulty pattern from the codebase, and replaces them with a straight-forward use of the strings themselves.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  Signed-off-by: Allon Mureinik mureinik@gmail.com","closed","","mureinik","2016-04-18T21:48:45Z","2016-04-18T22:00:41Z"
"","952","Exclude release tag from Travis CI build","## Overview  Specify which branches/tags that we do not want to be built, like: r5.0.0-M5 ``` branches:   except:     - /^r\d.*$/ ```  See https://docs.travis-ci.com/user/customizing-the-build/#Safelisting-or-blocklisting-branches  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","sormuras","2017-07-16T18:55:10Z","2017-07-16T18:59:54Z"
"","936","Provide TestSource in constructors","## Overview  Source has been set by the method `setSource` that was always called in the constructor. By adding a constructor with an additional `source` parameter we can make the field `source` final and remove the setter. This means we don't have to care about proper changes of the field anymore.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Vintage,","stefanbirkner","2017-07-10T22:57:25Z","2019-07-19T19:32:41Z"
"","542","Introduce TestWatcher extension API for processing test execution results","## Overview  Some functionality written in JUnit 4 is based on the usage of Rules.   There a custom rule is used to send test results to an external system - where they can be seen later.  The `TestWatcher` Rule API in JUnit 4 provides me with the following three callback methods:  - `protected void succeeded(Description desc);` - `protected void failed(Throwable e, Description desc);` - `protected void skipped(AssumptionViolatedException e, Description desc);`  This enables me to be notified what the test result is -- _failed_, _success_, or _skipped_ -- (`AssumptionViolatedException` exception is thrown during test execution).  @mmerdes has done a good job of adapting existing JUnit 4 rules to extensions in JUnit Jupiter, but this ""migration support"" unfortunately does support method result callbacks.  I've researched this topic and came to realize that for now there is no straight reliable way to implement this feature using only JUnit Jupiter's extension model.  The closest extension is `AfterTestExecutionCallback`, but its callback method  `afterTestExecution(ExtensionContext)` does not provide the necessary information (i.e., the test execution result).   So you can't tell for sure if the test succeeded, failed, or was aborted/skipped. Indirect ways to solve this problem do not look reliable.  ## Proposal  One possible solution is to introduce a new `Extension` API (e.g., `TestFinished`) that receives the test execution result via its callback method.   ```java public interface TestFinished extends Extension {     void testExecutionFinished(TestIdentifier testIdentifier, TestExtensionContext context,                             TestExecutionResult testExecutionResult) throws Exception; } ```  Each extension that implements the `TestFinished` interface will get notified of the test execution result.","closed","type: new feature,","SqAutoTestTeam","2016-10-11T11:55:45Z","2020-01-02T04:12:37Z"
"","594","Remove test literal from method names.","## Overview  Solves #587 by renaming the 3 test methods.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2016-12-08T08:56:22Z","2016-12-09T02:04:16Z"
"","524","Introduce Details, TreePrintingListener and VerboseTreePrintingListener","## Overview  Solves #369 and #546.  Removes `--hide-details` command line option and introduces an enum named **`Details`** in package `org.junit.platform.console.options` with the following constants:  ``` java enum Details { 	/** No test plan execution details are printed. */ 	NONE,  	/** Test plan execution details are rendered in a flat, line-per-line mode. */ 	FLAT,  	/** Test plan execution details are rendered as a simple tree. */ 	TREE,  	/** Combines tree and flat mode. */ 	VERBOSE } ```  ## Detailed description of `Details` constants  **NONE**  No test plan execution details are printed.  **FLAT**  The standard `ColoredPrintingTestListener` kicks in.  **TREE**  The `TreePrinter` renders the test plan execution tree in a compact manner.  - UTF-8 https://travis-ci.org/junit-team/junit5/jobs/180752503 - ASCII https://ci.appveyor.com/project/marcphilipp/junit5/build/424 - Monochrome (disabled ANSI colors) snippet below ``` ├─ JUnit Vintage │  ├─ example.JUnit4Tests │  │  ├─ standardJUnit4Test ✔ ├─ JUnit Jupiter │  ├─ AssertionsDemo │  │  ├─ timeoutNotExceeded() ✔ │  │  ├─ standardAssertions() ✔ │  │  ├─ groupedAssertions() ✔ │  │  ├─ exceptionTesting() ✔ │  │  ├─ timeoutExceeded() ✔ │  │  ├─ timeoutExceededWithPreemptiveTermination() ✔ │  ├─ AssumptionsDemo │  │  ├─ testOnlyOnCiServer() ■ Assumption failed: assumption is not true │  │  ├─ testOnlyOnDeveloperWorkstation() ■ Assumption failed: Aborting test: not on developer workstation │  │  ├─ testInAllEnvironments() ✔ │  ├─ StringTests │  │  ├─ returnsZeroWhenComparedToItself() ✔ │  │  ├─ returnsPositiveNumberComparedToSmallerValue() ✔ │  │  ├─ returnsNegativeNumberComparedToSmallerValue() ✔ │  │  ├─ valueEqualsItself() ✔ │  │  ├─ valueDoesNotEqualNull() ✔ │  │  ├─ valueDoesNotEqualDifferentValue() ✔ │  ├─ DisabledClassDemo class example.DisabledClassDemo is @Disabled │  ├─ DisabledTestsDemo │  │  ├─ testWillBeExecuted() ✔ │  │  ├─ testWillBeSkipped() void example.DisabledTestsDemo.testWillBeSkipped() is @Disabled │  ├─ A special test case │  │  ├─ 😱 ✔ │  │  ├─ Custom test name containing spaces ✔ │  │  ├─ ╯°□°）╯ ✔ │  ├─ DynamicTestsDemo │  │  ├─ dynamicTestsFromIntStream() │  │  │  ├─ test0 ✔ ... ``` **VERBOSE**  The `VerboseTreePrinter` spills almost every information available to a `TestExecutionListener`.  - UTF-8 https://travis-ci.org/junit-team/junit5/jobs/180754799 - ASCII https://ci.appveyor.com/project/marcphilipp/junit5/build/425 - Monochrome (disabled ANSI colors) snippet below  ``` Test plan execution started. Number of static tests: 47 . ├─ JUnit Vintage │  ├─ example.JUnit4Tests │  │  ├─ standardJUnit4Test │  │  │       tags: [] │  │  │   uniqueId: [engine:junit-vintage]/[runner:example.JUnit4Tests]/[test:standardJUnit4Test(example.JUnit4Tests)] │  │  │     parent: [engine:junit-vintage]/[runner:example.JUnit4Tests] │  │  │     source: MethodSource [className = 'example.JUnit4Tests', methodName = 'standardJUnit4Test', methodParameterTypes = ''] │  │  │   duration: 3 ms │  │  │     status: ✔ SUCCESSFUL │  └─ example.JUnit4Tests finished after 7 ms. └─ JUnit Vintage finished after 19 ms. ├─ JUnit Jupiter │  ├─ AssertionsDemo │  │  ├─ timeoutExceeded() │  │  │       tags: [] │  │  │   uniqueId: [engine:junit-jupiter]/[class:example.AssertionsDemo]/[method:timeoutExceeded()] │  │  │     parent: [engine:junit-jupiter]/[class:example.AssertionsDemo] │  │  │     source: MethodSource [className = 'example.AssertionsDemo', methodName = 'timeoutExceeded', methodParameterTypes = ''] │  │  │   duration: 108 ms │  │  │     status: ✔ SUCCESSFUL ... │  │  ├─ timeoutNotExceeded() │  │  │       tags: [] │  │  │   uniqueId: [engine:junit-jupiter]/[class:example.AssertionsDemo]/[method:timeoutNotExceeded()] │  │  │     parent: [engine:junit-jupiter]/[class:example.AssertionsDemo] │  │  │     source: MethodSource [className = 'example.AssertionsDemo', methodName = 'timeoutNotExceeded', methodParameterTypes = ''] │  │  │   duration: 0 ms │  │  │     status: ✔ SUCCESSFUL │  └─ AssertionsDemo finished after 138 ms. │  ├─ AssumptionsDemo │  │  ├─ testOnlyOnCiServer() │  │  │       tags: [] │  │  │   uniqueId: [engine:junit-jupiter]/[class:example.AssumptionsDemo]/[method:testOnlyOnCiServer()] │  │  │     parent: [engine:junit-jupiter]/[class:example.AssumptionsDemo] │  │  │     source: MethodSource [className = 'example.AssumptionsDemo', methodName = 'testOnlyOnCiServer', methodParameterTypes = ''] │  │  │     caught: org.opentest4j.TestAbortedException: Assumption failed: assumption is not true │  │  │               	at org.junit.jupiter.api.Assumptions.throwTestAbortedException(Assumptions.java:246) │  │  │               	at org.junit.jupiter.api.Assumptions.assumeTrue(Assumptions.java:119) │  │  │               	at org.junit.jupiter.api.Assumptions.assumeTrue(Assumptions.java:68) │  │  │               	at org.junit.jupiter.api.Assumptions.assumeTrue(Assumptions.java:58) │  │  │               	at example.AssumptionsDemo.testOnlyOnCiServer(AssumptionsDemo.java:25) ... │  │  │               	at org.junit.platform.console.ConsoleLauncher.execute(ConsoleLauncher.java:54) │  │  │               	at org.junit.platform.console.ConsoleLauncher.main(ConsoleLauncher.java:39) │  │  │   duration: 1 ms │  │  │     status: ■ ABORTED │  │  ├─ testOnlyOnDeveloperWorkstation() │  │  │       tags: [] ```  Watch ~~https://discuss.gradle.org/t/utf-8-output-regression-or-not-fixed-or-3rd-party-problem/20667~~ https://github.com/travis-ci/travis-ci/issues/7024  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2016-09-28T08:35:13Z","2017-01-19T20:46:43Z"
"","448","Support registration of global extensions via ServiceLoader mechanism","## Overview  Since we have over 2000 tests that we would have to annotate with `@ExtendWith`, it would be nice to just add also extensions using the `META-INF/service/org.junit.jupiter.api.extension.Extension` mechanism (later under JDK 9 via service within module-info).  Is there a good reason to not have this possibility?  ## Pull Requests  - #451","closed","component: Jupiter,","reinhapa","2016-08-05T14:58:04Z","2017-03-25T16:22:31Z"
"","468","Improve naming of command-line options for ConsoleLauncher","## Overview  Since we are planning on introducing several new command-line options for the `ConsoleLauncher` over the next few milestone releases, now is a good time to ensure that we have consistent, meaningful naming in place. ## Changes to Enact  The following existing options should be removed. - [x] `-C`: for disabling ANSI colors - [x] `-D`: for hiding details - [x] `-r`: for the XML reports directory  The following existing options should be renamed. - [x] `-a` | `--all` ==> `--scan-class-path` - [x] `--xml-reports-dir` ==> `--reports-dir` ## Proposed Options  The following constitute the final set of options based on current known requirements. ### General Purpose - [x] `-h`  |  `--help` - [x] `--disable-ansi-colors` - [x] `--hide-details` - [x] `-cp` |  `--classpath` | `--class-path`: provide additional classpath entries ### Reports - [x] `--reports-dir`: output directory for test reports (e.g., XML, JSON, etc.) ### Selectors - [x] `--scan-class-path`: scan all classpath roots - [x] `-c` |  `--select-java-class`: addressed in #437 - [x] `-d` |  `--select-directory`: addressed in #453 - [x] `-f` |  `--select-file`: addressed in #453 - [x] `-p` |  `--select-java-package`: addressed in #437 - [x] `-m` |  `--select-java-method`: addressed in #437 - [x] `-r` |  `--select-resource`: select classpath resource: addressed in #452 - [x] `-u` |  `--select-uri`: addressed in #470 ### Filters - [x] `-e` |  `--include-engine` - [x] `-E` |  `--exclude-engine` - [x] `-n` |  `--include-classname` - [x] `-t` |  `--include-tag` - [x] `-T` |  `--exclude-tag`","closed","theme: discovery,","sbrannen","2016-08-16T15:04:31Z","2016-11-30T08:54:27Z"
"","320","Create consistent, logical anchors in User Guide","## Overview  Since it is highly unprofessional to allow anchors to be auto-generated by AsciiDoctor based on section headers (i.e., because somebody might randomly change the wording thereby breaking bookmarked links), we must create consistent, logical anchors for every section in the User Guide. ## Example  Some work in this direction has already been started in the _Extension Model_ -- for example:  ``` [[extension-model]] == Extension Model  [[extension-registration]] === Registering Extensions  [[extension-registration-declarative]] ==== Declarative Extension Registration ```","closed","theme: documentation,","sbrannen","2016-06-19T18:45:05Z","2016-06-25T12:54:53Z"
"","490","Introduce default test class name pattern","## Overview  Since classpath scanning may potentially eagerly load classes unnecessarily, the JUnit 5 Team has decided to introduce default patterns for test class names. Doing so will help to reduce the number of candidate classes loaded when scanning the classpath for test classes. ## Related Issues - #474  ## Deliverables - [x] Introduce the regular expression `^.*Tests?$` as the default class name pattern for test classes.   - [x] in `ConsoleLauncher`   - [x] in the JUnit Platform Gradle Plugin   - [x] in the `JUnitPlatform` `Runner`, but only if the runner is used as a _suite_ - [x] Document AND vs OR semantics for class name filters (see https://github.com/junit-team/junit5/issues/474#issuecomment-246189318)","closed","theme: discovery,","sbrannen","2016-08-31T10:51:45Z","2016-11-30T08:26:27Z"
"","447","Small code maturity fixes","## Overview  Simplified if-statement and removed explicit type arguments.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","leksak","2016-08-04T09:00:21Z","2016-08-15T19:44:34Z"
"","944","Provide access to arguments of parameterized tests in lifecycle callback methods","## Overview  Simple parameter resolution for strings, ints, doubles, longs works in M4, but no longer works in M5 and throws the following exception.   ``` ParameterResolutionException: No ParameterResolver registered for parameter [java.lang.String arg0] in executable ```  Was previously using M4, upgraded to M5 and issue began occurring.  Example:  ```java @ParameterizedTest (name = ""{index} [{arguments}] User Flags CONDITION NAME"") @ValueSource(strings = { ""dev"", ""sit"" }) @DisplayName(""{index} [{arguments}] User Flags CONDITION NAME"") public void testUseTestScenario(String testEnvironment, TestInfo info, TestReporter testReporter) throws Exception { } ```  Do not get a build exception, get a runtime exception with jUnit5 with gradle 3.5 running in Jenkins.  ```     => org.junit.jupiter.api.extension.ParameterResolutionException: No ParameterResolver registered for parameter [java.lang.String arg0] in executable [public void com.orgname.TestSituation.setUpBeforeEach(java.lang.String,org.junit.jupiter.api.TestInfo,org.junit.jupiter.api.TestReporter) throws java.lang.Exception].   JUnit Jupiter:TestSituation:User Flags Situation A:2 [sit] User Flags Situation A     MethodSource [className = 'com.orgname.TestSituation', methodName = 'testSituationA', methodParameterTypes = 'java.lang.String, org.junit.jupiter.api.TestInfo, org.junit.jupiter.api.TestReporter']     => org.junit.jupiter.api.extension.ParameterResolutionException: No ParameterResolver registered for parameter [java.lang.String arg0] in executable [public void com.orgname.TestSituation.setUpBeforeEach(java.lang.String,org.junit.jupiter.api.TestInfo,org.junit.jupiter.api.TestReporter) throws java.lang.Exception]. ```  ## Related Issues  - #833  - #1139 - #1668 - #1884  ## Deliverables  - [ ] ...","open","theme: parameterized tests,","larryricker","2017-07-13T14:18:06Z","2022-06-22T17:06:27Z"
"","508","Allow TestDescriptor to state it will eventually register dynamic tests","## Overview  See the discussion in #492 for details.  ## Related Issues  - #367 - #407  - #492  - #732   ## Deliverables - [x] Investigate whether we can get rid of `isTest()` and `isContainer()`. - [ ]  Introduce support for allowing a `TestDescriptor` to state that it will _eventually_ register dynamic tests, if still desirable.  ## Initial Team Brainstorming  - For reporting, we somehow need to figure out whether or not a `TestDescriptor` points to a test. Otherwise, we won't be able to tell how many tests have been executed. Therefore, it might not be possible to get rid of `isTest()` or at least the concept of a ""test"". - Allowing the dynamic registration of `TestDescriptor`s at any time (also within a test itself) makes the concept of a ""container"" superfluous. Every `TestDescriptor` may possibly be a container or at least become one (see also #407). Therefore, removing `isContainer()` seems to be reasonable.  _Concerning eventually registering dynamic tests:_  - While we might spawn new tests during runtime, it may be difficult to state whether or not additional tests may be registered. Only after test execution of the current `TestDescriptor` can we give a guaranteed answer that no or all children have been found. - This is closely related to the extension mechanism and its implementation by a `TestEngine`. One might expect that a `TestDescriptor` `CHILD` below a `TestDescriptor` `PARENT` would inherit the context and state of `PARENT`, i.e. all `BeforeAll/Each` and `AfterAll/Each` statements will get executed. This might be difficult to guarantee (at least for the Jupiter Engine).   - Having said that, a `hasBeenExecuted()` method might be a good alternative, but it doesn't help us with pruning the `TestPlan` up-front.","closed","theme: discovery,","sbrannen","2016-09-12T10:38:23Z","2017-07-03T10:48:32Z"
"","886","Upgrade to Gradle 4.0","## Overview  See https://github.com/gradle/gradle/releases/tag/v4.0.0 for details.  Closes #865  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2017-06-14T17:54:27Z","2017-06-14T18:01:51Z"
"","873","Upgrade to Gradle 4.0","## Overview  See https://docs.gradle.org/4.0-rc-2/release-notes.html for details.  ``` BUILD SUCCESSFUL in 1m 12s 176 actionable tasks: 141 executed, 35 up-to-date ```  - [x] Verify #865 -- on my machine, no deprecation warnings are emitted - [x] Wait until 4.0 GA is available  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","status: superseded,","sormuras","2017-05-31T19:44:54Z","2017-07-03T10:29:52Z"
"","213","Add Android support to the Gradle plugin","## Overview  See #204 for a discussion on the topic. - Extended `JUnit5Plugin` to detect applied Android plugins and tailor task creation to its environment - Added tests for Android environment (**Note:** This requires an Android SDK installation on the target machine)  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","mannodermaus","2016-03-22T23:01:56Z","2017-06-18T07:21:46Z"
"","499","Add Android support to the Gradle plugin","## Overview  See #204 for a discussion on the topic.  This is the overhauled port of #213, which had become outdated in regards to the rapid development that has taken place in this project since its initial submission. The functionality remains the same: `JUnitPlatformPlugin` has been made aware of Android environments, and is now able to deal with the different variants and flavors that may be present there.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","mannodermaus","2016-09-08T22:08:16Z","2017-06-18T07:21:54Z"
"","856","Revise declarations of all @API annotations","## Overview  Right now, most of our API is marked as ""experimental"".  ## Deliverables  Before the GA release...  - [x] Remove `@API` declarations on non-public types. - [x] Go through all public APIs and decide on the correct `value` of all `@API` annotations. - [x] Apply `@API` annotations to Groovy source code for the Gradle plugin. - [x] New section/warnings in User Guide for _experimental_ APIs  **`@API(Stable)`**  - [x] jupiter test annotations, including currently maintained ones (except TestFactory) - [x] JUnitPlatform (runner) - [x] Assertions/Assumptions - [x] RepetitionInfo, TestInfo, TestReporter - [x] org.junit.jupiter.api.extension - [x] org.junit.platform.engine (except hierarchical) - [x] org.junit.platform.launcher & .core - [x] Constants   **`@API(Maintained)`**  - [x] suite api - [x] org.junit.platform.engine.support.hierarchical - [x] org.junit.platform.launcher.listeners  **`@API(Experimental)`**  - [x] DynamicContainer/… and TestFactory - [x] params  **`@API(Internal)`**  - [x] API - [x] JupiterTestEngine, VintageTestEngine (final) - [x] ClasspathScanningSupport","closed","3rd-party: Gradle,","marcphilipp","2017-05-18T19:17:42Z","2017-09-07T15:27:42Z"
"","779","revise Asciidoctor task configuration","## Overview  Revise the Asciidoctor build task configuration / setup in the following ways:  - remove dedicated task to copy images as this is built into the plugin - use AsciidoctorJ Diagram instead of low-level asciidoctor-diagram gem dependency - don't set imagesoutdir as it defaults to destination dir + imagesdir - set imagesdir in document instead of build configuration to avoid breaking HTML - no need to activate Gradle plugin defined using plugins clause - correct a few bad AsciiDoc attribute declarations  ## Related Issues  - #770  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---","closed","theme: documentation,","mojavelinux","2017-04-07T00:12:35Z","2017-04-09T02:03:47Z"
"","860","Applying spotless groovy support on groovy file format checks.","## Overview  Replaces custom formatting config for Groovy source files by GrEclipse formatting.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","fvgh","2017-05-23T05:48:46Z","2017-06-16T11:54:18Z"
"","859","Applying spotless groovy support on groovy file format checks.","## Overview  Replaces  custom formatting config for Groovy source files by GrEclipse formatting.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","fvgh","2017-05-22T19:10:34Z","2017-05-23T05:43:25Z"
"","632","Update console launcher output showing new default tree details","## Overview  Replace outdated output example with ""condensed"" test execution tree, partly copied from https://junit.ci.cloudbees.com/job/JUnit5/lastBuild/consoleFull  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2017-01-19T11:55:24Z","2017-01-19T20:25:04Z"
"","782","Replace deprecated github-pages with git-publish","## Overview  Replace deprecated github-pages with git-publish  CloudBees Jenkins build task needs to be changed, @marcphilipp   Replace ""githubPages"" with ""gitPublish"".  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","sormuras","2017-04-08T16:47:22Z","2017-04-09T18:48:02Z"
"","645","Replace sout instruction with assertion","## Overview  Replace `System.out.println` instruction with actual assertion.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2017-02-07T13:45:00Z","2017-03-12T14:27:25Z"
"","177","Rename registerListener to registerListeners.","## Overview  Rename `registerListener` to `registerListeners`.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","stefanbirkner","2016-03-09T23:14:33Z","2016-03-10T08:47:00Z"
"","563","Rename getAllDescendants() to getDescendants().","## Overview  Rename `getAllDescendants()` to `getDescendants()`. The word all is redundant. I always expect to get all `X` when I call a method `getX()`.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","stefanbirkner","2016-11-05T09:28:27Z","2016-11-30T07:53:24Z"
"","229","Remove redundant imports from the same package","## Overview  Removed unused imports from the same package.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  Signed-off-by: Allon Mureinik mureinik@gmail.com","closed","","mureinik","2016-04-17T19:05:44Z","2016-04-18T12:58:51Z"
"","934","Execute test methods in a stable order","## Overview  Related issue #13   ## Deliverables  - [x] Internally ""sort"" (stable but not predictable) test methods before executing them","closed","component: Jupiter,","sormuras","2017-07-10T11:23:16Z","2019-04-13T12:30:16Z"
"","236","Improved test coverage for junit-commons","## Overview  Pull request improves test coverage for the following utility classes from junit-commons module: - `AnnotationUtils` - `ClasspathScanner` - `ExceptionUtils` - `Preconditions` - `ReflectionUtils` - `ToStringBuilder`  Closes #109   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: task,","lutovich","2016-05-03T00:33:51Z","2016-05-08T17:03:17Z"
"","908","Issue843 gradle formatter","## Overview  Provided Gradel formatting using spotless groovy formatter, as proposed for #843. Change is split in 3 parts:  1. Modification to gradle build 2. Manual adaptations required due to groovy formatter constraints 3. Applied groovy formatter on the gradle files  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [X] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass  ## Remaining problems I am afraid that there is a test failure also occurring for the master branch, hence not all tests passed.  > AssertionFailedError: `Automatic-Module-Name` not found in manifest of JAR: ../junit-jupiter-migration-support/  Anyhow, maybe you can already let me know whether you consider the modifications useful.","closed","","fvgh","2017-07-02T14:17:41Z","2017-07-06T14:20:19Z"
"","916","Rename method to getFilterByType.","## Overview  Provide a consistent API. The method for retrieving selectors already has the name `getSelectorsByType` instead of `getDiscoverySelectorsByType`. I think it is helpful to omit the word discovery in the method name because it reduces its length but the reader still can deduce from the context (it's an `EngineDiscoveryRequest`) that the methods return `DiscoveryFilter`s and `DiscoverySelector`s.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Platform,","stefanbirkner","2017-07-05T06:03:06Z","2017-07-07T07:10:58Z"
"","517","Added tree visuals to ColoredPrintingTestListener #369","## Overview  Proof-of-concept merging ColoredPrintingTestListener with TreePrintingTestListener.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","sormuras","2016-09-16T11:34:33Z","2016-09-16T11:54:35Z"
"","847","Allow Assertions.fail methods to be used as expressions","## Overview  Prior to this commit the return type `void` prevented the use of a `fail`-method as an expression. For example, the user has to wrap the `fail` call in a lambda like:  ```java   Stream.of().map(entry -> { fail(""should not be called""); return """"; }) ```  Now, the line can be written more clearly as:  ```java   Stream.of().map(entry -> fail(""should not be called"")) ```  Addresses #845  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","sormuras","2017-05-09T08:58:40Z","2017-07-05T07:41:57Z"
"","941","Execute test methods in a stable order","## Overview  Prior to this commit the execution order of reflected test methods was not well-defined. With this commit, the execution order is stabilized by using same default order as JUnit 4 applies.  Note copied from org/junit/internal/MethodSorter.java  >   Using the JVM order is unwise since the Java platform does not >   specify any particular order, and in fact JDK 7 returns a more or less >   random order; well-written test code would not assume any order, but >   some does, and a predictable failure is better than a random failure >   on certain platforms. By default, uses an unspecified but >   deterministic order.  Closes #934   This PR does **not** provide a way to customize the method sort order. This will be addressed by #13   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","sormuras","2017-07-12T10:31:51Z","2017-07-13T14:44:14Z"
"","954","Support primitive array types as argument providers","## Overview  Prior to this commit simple 1-dimensional arrays with primitive component types were not supported. The user could circumvent the issue by using an IntStream like:  ```java   static IntStream data() {     return IntStream.of(3, 24, 12);   } ```  Now all primitive array types (from `boolean[]` to `short[]`) are supported as a return type of static argument providing methods for parameterized tests. For example:  ```java   static int[] data() {     return new int[] { 3, 24, 12 };   } ```  Fixes #953  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","sormuras","2017-07-17T07:13:46Z","2017-07-17T11:06:46Z"
"","888","URL encode reserved characters in UniqueId segment strings","## Overview  Prior to this commit segment strings could contain characters that are used by the toString-representation syntax of UniqueIdFormat. Now these ""forbidden"" (reserved) characters are URL encoded, as well as decoded when parsing unique ids.  Fixes #810  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","sormuras","2017-06-15T12:45:09Z","2017-06-15T20:56:40Z"
"","634","Add details parsing fix and tests.","## Overview  PR #524 pretended to parse option details case insensitive -- but it did not. This PR fixes that issue and provides tests ensuring all of case-wise permutations from `NONE` to `none` are allowed and valid for `--details`.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2017-01-19T19:33:29Z","2017-01-19T20:46:25Z"
"","662","Implementation of legacyreporting for the surefire provider using getLegacyName","## Overview  Please describe your changes here and list any open questions you might have. An alternative Implementation of #616 corresponding to the suggestion in the discussion in #654  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Vintage,","LiamClark","2017-02-18T17:07:50Z","2017-03-12T16:53:47Z"
"","821","Tests for FilePosition","## Overview  Please describe your changes here and list any open questions you might have.  ---Tests for FilePosition equals() method  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","stonerderek","2017-05-01T00:32:05Z","2017-05-01T02:16:50Z"
"","822","Tests for FilePosition equalsTest","## Overview  Please describe your changes here and list any open questions you might have.  ---Fixed previous errors to FilePosition equalsTests  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","stonerderek","2017-05-01T02:20:13Z","2017-05-01T02:31:44Z"
"","823","Added tests for FilePosition equals method","## Overview  Please describe your changes here and list any open questions you might have.  ---added tests for FilePosition equals method  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","stonerderek","2017-05-01T02:34:14Z","2017-05-01T03:01:28Z"
"","824","Introduce tests for FilePosition","## Overview  Please describe your changes here and list any open questions you might have.  ---added FilePosition unit tests for equals method  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","type: task,","stonerderek","2017-05-01T03:08:47Z","2017-07-27T18:07:40Z"
"","864","Support declarative extension registration on fields and parameters","## Overview  Original title: ""Support ParameterResolver registration via @ResolveWith on parameter""  While experimenting with parameter resolvers I realized that they can not be applied like argument converters can, i.e. by annotating the parameter directly. This complicates their application and implementation if they are ""annotation based"".  An example is the `@Mock` proof of concept. The resolver has to be applied to the test method or class and because of that has to check the individual parameter for the presence of the `@Mock` annotation. This indirection causes unnecessary complexity for implementers and users of the extension.  ## Original Proposal  I propose an annotation similar to `@ConvertWith`, e.g. `@ResolveWith`, that takes precedence over all registered parameter resolvers. It does not need a `supports` method because it is assumed to support the parameters it is applied to. If it turns out during `resolve` that that's not the case, the test should be aborted by an exception.  With this mechanism, `@Mock` (and I am planning to write something like `@Random`) would get simpler to use because they only need to be applied in one place.  More broadly, I think parameter resolvers and argument converters are conceptually very similar and the API would hence improve considerably if both would operate similarly as well. In that regard I already opened #853, which proposes an extension point to register converters at the method and class level. Together with this issue, the two aim to align both mechanisms.  If there is interest in this, I would give it a shot, preferably together with #853.  ## Related Issues  - #416 - #497","closed","type: new feature,","nipafx","2017-05-25T08:13:14Z","2021-08-17T09:01:59Z"
"","681","Introduce junit-platform-suite-api module","## Overview  Move the following Java types to a new `junit-platform-suite-api` module.  These types will be useful to many engine developers and, other than the references to `@RunWith(JUnitPlatform.class)` in the javadocs, should not be tied to the vintage `Runner`.  -   ExcludeClassNamePatterns.java -   ExcludeEngines.java -   ExcludePackages.java -   ExcludeTags.java -   IncludeClassNamePatterns.java -   IncludeEngines.java -   IncludePackages.java -   IncludeTags.java -   SelectClasses.java -   SelectPackages.java -   UseTechnicalNames.java  ## Feature request  I've extended the ```JupiterTestEngine``` to create the ```JupiterSuiteEngine``` which supports an arbitrary hierarchy of test containers between the engine and test classes.  At each level of the suite hierarchy, ```@BeforeSuite``` and ```@AfterSuite``` are supported, so you can also nest the hierarchy of ```setUp``` and ```tearDown```.  An example suite looks something like this:  ```java @Suite @IncludeClassNamePatterns(""**/*JmqITs"") public class RequiresJmqSuite { 	 	@BeforeSuite 	void setUpJmqConnection() { ... } 	 	@AfterSuite 	void tearDownJmqConnection() { ... }  } ```  The ```JupiterSuiteEngine``` is currently hard-coded to scan for classes that end with ""Suite"" but it's my intention to have the engine consider the class name patterns and selections passed into the engine (once I make sure there won't be collisions with the ```JupiterTestEngine```.  You can obviously have more than one suite discovered by the engine in which case they will be peers in the test hierarchy.  In any case, when importing ```junit-platform-runner``` into my project, I also get the actual JUnit 4 ```Runner``` classes which I don't need.  Worse yet, this implicit dependencies to my project which I don't need.  My current work-around is to exclude these classes from the dependency graph as follows:  ```xml  	org.junit.platform 	junit-platform-runner 	${version.junit.platform} 	 		 			junit 			junit 		 		... 	  ```  This obviously isn't the cleanest way to manage dependencies and it's my belief that the types listed above will be useful to many engine developers.  As an aside, providing maintained interfaces to the ```utils/*Utils``` classes in ```junit-platform-commons``` will also help this project tremendously  ## Deliverables  - [x] Move each of the types listed above from ```junit-platform-runner``` to `junit-platform-suite-api`.","closed","theme: suites,","smoyer64","2017-02-23T14:37:23Z","2017-08-22T15:26:55Z"
"","699","Move to java-library plugin","## Overview  Modify existing configuration names by `api` or `implementation`.  See gh-691  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [X] There are no TODOs left in the code - [X] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [X] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [X] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [X] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [X] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","theme: build,","eddumelendez","2017-03-01T02:25:16Z","2017-03-12T15:36:14Z"
"","850","EnumSource filtering","## Overview  Many times I run into a situation where some test should be repeated only for a subset of enum values. Currently we can filter which values should be used for a test using the `names` attribute, but this solution has one big drawback. Every time someone adds a new value to the enum, the same value must be added to the test in the `names` attribute. If the developer forgets to do so, the test may raise a false positive result and potentially lead to a bug.  If the `@EnumSource` annotation allowed to specify which enum values should be excluded from a test, the newly added values would be covered automatically. It would be nice if the API allowed us to specify whether values in the `names` attribute is the list of values that should be included or excluded from a test. For instance, it might be an additional boolean attribute.","closed","component: Jupiter,","danielolszewski","2017-05-10T08:58:26Z","2019-07-19T19:32:41Z"
"","394","Use meaningful names for @BeforeEach methods in User Guide","## Overview  Makes it easier for the reader to understand the purpose of the methods. Additionally it shows the reader of the user guide that they can use meaningful names for `@BeforeEach` methods.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","stefanbirkner","2016-07-11T19:44:24Z","2016-07-13T20:10:45Z"
"","945","Make UniqueId segment list immutable","## Overview  Make UniqueId segment list immutable and turn `getSegments()` into a simple getter, i.e. it does no longer create a copy of the internal list on each invocation. The single place where a modifiable list was expected was in `JavaElementsResolver`. There a copy is created explicitly.  This commit also removes the defensive copy creation of the segment list from the package-private constructor. All two internal callers do not modify the underlying list, they actually drop their list reference.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2017-07-14T07:35:22Z","2017-07-14T10:33:26Z"
"","323","Link complete phrase ""discover an ID"".","## Overview  Make all links of this sentence symmetric. The links to `discover` and `execute` contain the complete phrase, too.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","stefanbirkner","2016-06-20T12:22:44Z","2016-06-20T14:07:29Z"
"","763","3rd-party friendly entry point in ConsoleLauncher","## Overview  Make [ConsoleLauncher](https://github.com/junit-team/junit5/blob/master/junit-platform-console/src/main/java/org/junit/platform/console/ConsoleLauncher.java#L38) more re-usable by external applications by providing an `execute(String...)` method that returns an exit code and does **not** call `System.exit(code)`.  Use-case https://github.com/forax/pro plugin: https://github.com/sormuras/pro/blob/plugin_junitconsole/src/main/java/com.github.forax.pro.plugin.junitconsole/com/github/forax/pro/plugin/junitconsole/JunitConsolePlugin.java#L36  ## Deliverables  - [x] Split `static` main method into two, the normal main delegating to the new one, that is more 3rd-party friendly.","closed","component: Platform,","sormuras","2017-04-02T17:08:56Z","2017-04-18T14:23:54Z"
"","957","VintageDiscoverer","## Overview  Let the `VintageDiscoverer` handle the discovery.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","stefanbirkner","2017-07-17T17:19:14Z","2017-07-27T19:06:53Z"
"","694","Let @BeforeEach and @AfterEach work around all the tests from a single TestFactory (or introduce a new similar @Before/@After pair)","## Overview  JUnit is used not only for pure unit tests (where each unit test should be completely independent), but often also for (some kind of) integration tests. Sometimes it is extremely useful if you may assert some conditions after a bunch of tests have run. The new `@TestFactory` feature would be an excellent place for it **if** there were a place for adding `assert`s after the whole set of `DynamicTest`s have run.  Also sometimes there is a need to prepare test data for the whole set of `DynamicTest`s.  The documentation says   > The execution lifecycle of a dynamic test is quite different than it is for a standard `@Test` case. Specifically, there are not any lifecycle callbacks for dynamic tests. This means that `@BeforeEach` and `@AfterEach` methods and their corresponding extension callbacks are not executed for dynamic tests. In other words, if you access fields from the test instance within a lambda expression for a dynamic test, those fields will not be reset by callback methods or extensions between the execution of dynamic tests generated by the same `@TestFactory` method.   However, it may be nice _either_ having `@BeforeEach` and `@AfterEach` working before and after the whole bunch of dynamic tests called by one `@TestFactory` test, or _introducing_ a new pair of `@BeforeXXX` and `@AfterXXX` annotation for the same purpose.  Currently, `@BeforeEach` and `@AfterEach` does not run at all. `@BeforeAll` and `@AfterAll` runs, but they are run only once and `AssertionFailedError`s in `@AfterAll` are swallowed and not reported.  ## Code example  The following is currently not possible. Some useful use cases can be easily created if the mechanism worked.  ```java public class AssertAfterDynamicTestsTest {     private int countOfVowels;      @BeforeEach     public void init() {         // Currently does not run at all         countOfVowels = 0;         // and prepare some data for the set of DynamicTests     }      @AfterEach     public void cleanUp() {         // Currently does not run at all         assertEquals(3, countOfVowels, ""The test should have encountered 3 vowels"");     }      @TestFactory     public Stream doSomeTestsWhichSetI() {         return Stream.of(""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"")                 .map(s -> DynamicTest.dynamicTest(                         ""Testing for "" + s,                         () -> {                             final char firstChar = s.charAt(0);                             assertTrue(Character.isUpperCase(firstChar));                             if (isVowel(firstChar)) {                                 countOfVowels++;                             }                         }                 ));     }      private boolean isVowel(char c) {         return ""AEIOUaeiou"".indexOf(c) != -1;     } } ```","closed","theme: dynamic tests,","honza-zidek","2017-02-28T10:26:19Z","2020-04-27T17:54:27Z"
"","814","Display name for array parameter type can be improved","## Overview  JUnit 5 M4 introduces parameterized tests.  When a parameter is of type `String[]`, then the default display name contains `[Ljava.lang.String` instead of array presentation, e.g. `[""foo"", ""bar""]`.  The IDE shows this ugly now: ![image](https://cloud.githubusercontent.com/assets/4306070/25534806/4c4e29a6-2c35-11e7-87b1-83e81abceeee.png)  ## Analysis  Caused by substitution `org.junit.jupiter.params.ParameterizedTestNameFormatter#format`.   ## Proposal  `Arrays.deepToString` looks to be able to fix the issue.","closed","component: Jupiter,","akozlova","2017-04-28T15:09:03Z","2017-04-28T20:21:30Z"
"","330","Introduce support for programmatic test suites","## Overview  JUnit 3 had ""static Test suite()"" method where you could create suites as you wish: e.g. first add one class, then another one repeated 100 times, then another one, etc. That's quite handy when you have unstable tests that also spoil some global state, and want to increase the probability of them failing.  JUnit5 has dynamic tests with similar possibilities, but it seems that currently it only allows to generate suites of test methods (via lambdas). It would be nice if it'd also be possible to add classes there, maybe even nested dynamic test generators (aka suites).  ## Related Issues  - #744","closed","status: stale,","donnerpeter","2016-06-21T10:30:45Z","2021-06-03T20:47:26Z"
"","785","cleanup AsciiDoc source","## Overview  It's absolutely unnecessary to specify the subs attribute on a listing block until you intend to change the default subs, such as to add attribute replacements or disable callouts. When these modifications are needed, it's better to use incremental subs than an absolute list. And you almost never want to use subs=none as that can break HTML output.  It's also customary to use a literal block (four dots) instead of listing block to represent output text.  - remove superfluous subs attributes on listing blocks - use incremental subs instead of explicit subs - put output/console messages in literal block instead of listing block  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---","closed","theme: documentation,","mojavelinux","2017-04-09T02:25:53Z","2017-04-09T12:16:39Z"
"","896","Assertions dependency on another assertion","## Overview  It would be nice to have possibility to execute some assertions only if another assertion was successful. For example I test if some object is not null and then I test object's properties. It is useless to test properties when non-null check failed.  It is different  from assumes, because test should fail if condition is not fulfiled.  ## Deliverables There can be new methods in Assertions: ```java public static void assertFirstThenOthers(Executable contolExecutable, Executable... dependentExecutables); public static void assertFirstThenOthers(Executable contolExecutable, Stream dependentExecutables); //plus variants with heading ``` Then I can write test like this: ```java class BeanTest {   void testBean() {     Bean bean = new Bean();     //…     assertAll(       () -> assertEquals(""A"", bean.getPropertyA()),       () -> assertEquals(""B"", bean.getPropertyB()),       () -> assertFirstThenOthers(         () -> assertNotNull(bean.getNestedBean()),         () -> assertEquals(""C"", bean.getNestedBean().getPropertyC()),         () -> assertEquals(""D"", bean.getNestedBean().getPropertyD())       )     );   } } ```  Or even smarter one: ```java class BeanTest {   void testBean() {     Bean bean = new Bean();     //…     assertAll(       () -> assertEquals(""A"", bean.getPropertyA()),       () -> assertEquals(""B"", bean.getPropertyB()),       () -> assertFirstThenOthers(         () -> assertNotNull(bean.getNestedBean()), //inject result of first test as param to others tests         (nested) -> assertEquals(""C"", nested.getPropertyC()),         (nested) -> assertEquals(""D"", nested.getPropertyD())       )     );   } } ```  It can be written with assumptions, but it needs code duplication: ```java class BeanTest {   void testBean() {     Bean bean = new Bean();     //…     assertAll(       () -> assertEquals(""A"", bean.getPropertyA()),       () -> assertEquals(""B"", bean.getPropertyB()),       () -> assertNotNull(bean.getNestedBean()),       () -> assumingThat(bean.getNestedBean() != null,         () -> assertAll(           () -> assertEquals(""C"", bean.getNestedBean().getPropertyC()),           () -> assertEquals(""D"", bean.getNestedBean().getPropertyD())         )       )     );   } } ```","closed","status: invalid,","FilipJirsak","2017-06-22T16:42:13Z","2017-06-23T13:55:46Z"
"","214","Introduce support for repeated tests","## Overview  It would be great to have simple way of running same tests repeatedly **without changing test code**.  Currently, I'm working on async library and writing correct tests is very important. All Tests passes most of the time but some fails time to time (which we have to fix). We verify tests by running our test suites very often; our CI test job runs every 5min.  While writing/debugging test, it is very handy to have infrastructure that can repeatedly run same test over and over. For example, I would like to run single test method/class/suite 1000 times in local machine before checking in. In my case, I want result(summary) to be accumulated, but it may different by cases; aggregate all, repeat each result, or both.  If such feature is available, I foresee the integration with IDE, surefire, etc. Ideally, I can right click my IDE and specify N number to repeat, then run.  ## Deliverables  - [x] Introduce support for repeated tests based on the test template infrastructure.   - [x] Introduce a new `@RepeatedTest` annotation and related extension implementation.   - [x] Introduce support for injecting information about the current repetition into a `@RepeatedTest`, `@BeforeEach`, or `@AfterEach` method. - [x] Document `@RepeatedTest` in the annotations section of the User Guide. - [x] Introduce a new `Repeated Tests` section in the User Guide. - [x] Introduce examples in the `documentation` module and include them in the User Guide. - [x] Update the release notes accordingly.","closed","component: Jupiter,","ttddyy","2016-03-25T08:42:35Z","2017-03-21T23:06:14Z"
"","675","Create a quasi-official JUnit 5 extensions project/repository","## Overview  It turns out that @nicolaiparlog and I have both created Github repositories (https://github.com/CodeFX-org/junit-io and https://github.com/selesy/junit5-extensions respectively) with the intention of curating, enhancing and promoting community-developed JUnit 5 ```Extension```s.  This morning (my time at least) we started discussing the idea of merging our projects and sharing the work of creating the tools that extend JUnit 5 in small but broad ways.  I don't expect that large extensions or engine developers will be interested in this at all, but I think that for the smaller projects, collecting the commonly needed functions into one project will allow it to share the ""project infrastructure"".  For ```Extensions``` that are only a class or two, who want's to maintain an entire project?  - ( ) **Proposal.** Create a quasi-official repository under the junit-team group for community-developed JUnit 5 extensions.  Publish these extensions to Maven central with org.junit.jupiter.community (or something else so long as it's obviously not part of the core system), and work to align the code quality, style and conventions with the core JUnit 5 project.  Nicolai and I are volunteering to be the initial curators/committers as time permits.  Nicolai  and I will be talking at some point next week to discuss how to best merge the code we've both been working on and one of the topics is where to put the project.  I thought his project's name was superior but he pointed out that it's too ambiguous to do well with search engines.  I see a lot of advantages to having a ""non-core"" team.  The core team won't be burdened by the additional code or by managing additional contributions.  The JUnit 5 adopters will have a central location to look for extensions that they need and, it's my belief that as more use-cases are explored, we'll prove out the underlying design of JUnit 5, and can help drive the framework's future.  For me, the last week of working on #343 has shown that the best way to wring out new code is to get it into use.  Sorry for the deluge of issues and PRs.  Thanks for the consideration!","closed","","smoyer64","2017-02-22T20:47:59Z","2017-05-09T13:41:36Z"
"","665","Add alternate runners for the documentation examples","## Overview  It should be easy for new JUnit 5 users to execute the examples provided in the documentation project.  Current it's easy to run these demos and tests using the Gradle runner by executing the following command in the parent project:  ``` ./gradlew documentation:junitPlatformTest ```  - (X) **Feature request.** We should make it just as easy for Maven and Console users to execute these tests and to view the output provided by that runner.  ## Deliverables  The following files should be added to the documentation project:  - [x] A Maven POM - [ ] A Windows batch file (.bat) to launch the console runner on Windows - [x] A Bash shell file (.sh) to launch the console runner on Linux - [ ] A Bash shell file (.sh) to launch the console runner via Mac OSX (or confirm the Linux script works for this OS)","closed","status: declined,","smoyer64","2017-02-19T01:37:54Z","2017-03-12T15:19:34Z"
"","715","Introduce migration support for JUnit 4's Parameterized Runner","## Overview  Introduce migration support for JUnit 4's `@RunWith(Parameterized.class)`.  @marcphilipp mentioned through email that it would be nice to have an extension in `junit-jupiter-migration-support` that allows tests to be run that were originally written with JUnit 4 using the `Parameterized` runner.   What this would look like:  ```java import static org.junit.Assert.assertEquals;  import java.util.Arrays; import java.util.Collection; import org.junit.jupiter.api.TestTemplate; import org.junit.jupiter.api.extension.ExtendWith; import org.junit.jupiter.migrationsupport.extensions.Parameterized; import org.junit.runners.Parameterized.Parameters;  @ExtendWith(ParameterizedExtension.class) public class FibonacciTest {      @Parameters     public static Collection data() {         return Arrays.asList(new Object[][] {                       { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 5 }, { 6, 8 }              });     }      private int input;      private int expected;      public FibonacciTest(int input, int expected) {         this.input= input;         this.expected= expected;     }      @TestTemplate     public void test() {         assertEquals(expected, Fibonacci.compute(input));     } } ```  ```java public class Fibonacci {     public static int compute(int n) {     	int result = 0;     	         if (n <= 1) {          	result = n;          } else {          	result = compute(n - 1) + compute(n - 2);          }                  return result;     } } ```  If everybody agrees this is a good idea, I would like to tackle this issue.  ## Deliverables  - [ ] Introduce `ParameterizedExtension` extension in `junit-jupiter-migration-support`. - [ ] An updated section in the user guide. - [ ] Document in release notes.","closed","status: stale,","LiamClark","2017-03-09T13:16:07Z","2021-06-19T12:50:03Z"
"","698","Break build on wildcard imports","## Overview  Instead of manually checking pull requests for wildcard imports we should forbid them using a Checkstyle rule.  ## Deliverables  - [x] Remove remaining wildcard imports - [x] Add Checkstyle rule that breaks build when it finds a wildcard import","closed","theme: build,","marcphilipp","2017-02-28T20:21:30Z","2017-02-28T20:47:36Z"
"","846","Add Assertions.assertTrue/False() taking an user-defined Predicate instance","## Overview  Instead of `assertTrue(StableList.of().isEmpty())` an `assertTrue/assertFalse` that takes a predicate will make things more clear, like:  ``` assertTrue(List::isEmpty, StableList.of()); ```  The original request can be found [here](https://github.com/forax/pro/commit/eb5f1b7b6df63c75ffa7a14a61d8d4c596b627bc#commitcomment-22058065).  The signature of `assertTrue` is ```  void assertTrue(Predicate predicate, T input) {   assertTrue(predicate.test(input)); } ```  ## Deliverables  - [ ] Implement and test `Assertions.assertTrue` and `Assertions.assertFalse` an user-defined Predicate instance","closed","component: Jupiter,","sormuras","2017-05-09T07:56:20Z","2017-05-10T18:28:48Z"
"","592","Log version numbers with discovered engines","## Overview  Initial shot at #590  This PR avoids manual parsing of `MANIFEST` files -- it relies on Java's built-in feature for getting implementation version strings from package attributes. If it fails to get the implementation version `DEVELOPMENT` is returned.  The `default` method introduced in `TestEngine` can be moved to the registry class, where the logging happens. But then, an actual test engine implementation can't override the version string with an individual (maybe constant) text.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2016-12-08T00:19:51Z","2016-12-11T04:24:10Z"
"","588","Document auto-loading custom test execution listeners.","## Overview  Initial documentation for #583 done in User Guide and Release Notes.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2016-12-07T12:34:03Z","2016-12-09T05:33:59Z"
"","231","Fix indentation for failed tests in ConsoleRunner","## Overview  Indentation for failed tests was a bit off because printed exception message could be a multi line string.  This PR fixes indentation by changing exception messages to contain same amount of spaces as the rest of the output.  Fixes #160   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","lutovich","2016-04-19T22:58:39Z","2016-04-20T15:59:09Z"
"","963","Use the modern java.time API to get build times","## Overview  In the interest of keeping up-to-date with the most modern, safest APIs, I have migrated the use of `Date` and `SimpleDateFormatter` in `build.gradle` to `java.time.OffsetDateTime` and `java.time.DateTimeFormatter` for calculating build dates and times.  I've manually confirmed that the artifact produced by `gradlew clean shadowJar` for subproject _junit-platform-console-standalone_ has the same format for both the `Build-Date` and `Build-Time` in its MANIFEST.MF.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","jbduncan","2017-07-18T19:34:41Z","2017-07-30T18:56:36Z"
"","778","Demonstrate that a static class is a member class","## Overview  In the discussion https://github.com/junit-team/junit5/pull/776/files#r110263870 the concept of a member class was discussed. This pr demonstrates that static nested classes are also considered member classes.  Furthermore in the [java 8 specification](https://docs.oracle.com/javase/specs/jls/se8/jls8.pdf) section 8.5 page 256 is mentioned. >A member class is a class whose declaration is directly enclosed in the body of another class or interface declaration (§8.1.6, §9.1.4).  If JUnit 4 does indeed consider static nested classes as valid, this means there is probably a bug in the implementation of https://github.com/junit-team/junit5/blob/master/junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/IsPotentialJUnit4TestClass.java#L30  CC @sbrannen   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","LiamClark","2017-04-06T22:29:49Z","2017-04-09T12:45:20Z"
"","622","Use parent name in Surefire reporting if class source is missing","## Overview  In surefire reporting, when a test identifier has no class source attached to it, use the display name in the parent as source.  This fixes #616 (which used unique-ids of current test instead of display name of parent)  ## Test cases  Contains a new test case for the sourceless case.  Furthermore, a selection of the test cases for checking that certain events fired now also check that the events come with proper class name, method name, and trace writer, if appropriate.  Some common setup code was refactored to the BeforeEach-annotated method.  ## Refactorings  Extracted the (somewhat duplicated) code for retrieving a class name from a test identifier into a dedicated method.  ## Additional Change  The source-less case covered in this change is now reported using a regular ""SimpleReportEntry"" -- it used to be reported as an ""ignored"" entry, which seems incorrect as it is called from the 'executionStarted' method.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","3rd-party: Maven Surefire,","avandeursen","2017-01-03T20:27:18Z","2017-01-04T18:13:28Z"
"","765","Rename ObjectArrayArguments.create() to arguments()","## Overview  In order to improve the user experience and allow for the static factory method in `ObjectArrayArguments` to be used via a static import, the name should be changed to something more DSL-like.  ## Deliverables  - [x] Rename `ObjectArrayArguments.create()` to `arguments()`. - [x] Rename `ArgumentsProvider.arguments()` to `provideArguments()`.","closed","component: Jupiter,","sbrannen","2017-04-03T14:59:46Z","2017-04-03T20:43:29Z"
"","593","Define and document Definition of Done for issues","## Overview  In order to avoid forgetting to document issues in the User Guide and Release Notes, to avoid having appropriate tests and Javadoc in place, etc., we need to formulate an explicit _Definition of Done_ for accepting pull requests and closing issues.  ## Related Material  See the discussion spawned by https://github.com/junit-team/junit5/issues/583#issuecomment-265417246.  # Deliverables  - [x] Agree upon a _Definition of Done_ including a requirements checklist. - [x] Document the _Definition of Done_ in the wiki. - [X] Update pull request template to include the checklist. - [x] Update new issue template.","closed","theme: documentation,","sbrannen","2016-12-08T01:38:08Z","2017-02-16T20:14:42Z"
"","489","Store raw values in DiscoverySelectors & TestSources","## Overview  In light of issues such as #477 and the discussion in #466,  the JUnit 5 Team has decided to store _raw_ values in all `DiscoverySelector` and `TestSource` implementations for the _entire Platform_.  In other words, the JUnit Platform should not _store_ anything in either selectors or sources using a _biased_ format (e.g., `File` vs. `Path` vs. `URI` vs. `String` _and_ `Method` vs. method name), since it is up to a specific `TestEngine` or IDE to interpret the _raw_ format. ## Proposal for file system sources  Input from @marcphilipp:  > We could change `FileSource` and `DirectorySource` to store a `URI` instead of a `File` and provide methods that return a `File`/`Path` from the `URI`. ## Deliverables - [x] Ensure that each `DiscoverySelector` implementation stores the selected element in a _raw_ format.   - Add _getter_ methods for retrieving the raw format as well as technology specific representations. - [x] Ensure that each `TestSource` implementation stores the source in a _raw_ format.   - Add _getter_ methods for retrieving the raw format as well as technology specific representations.","closed","theme: discovery,","sbrannen","2016-08-31T10:44:00Z","2016-11-30T08:29:22Z"
"","20","Allow tests to be executed in a user-defined thread","## Overview  In JUnit 4, we use a specific test runner that runs the test code on a dedicated UI thread, such as the AWT/Swing thread (or the JavaFX thread). This avoids cluttering your code with `EventQueue.invokeAndWait` all over the place. As far as I understood, the current extensions proposal does not allow to do such thing.  The below runner simply wraps all calls to _before_, _after_, and _test_ methods in an `EventQueue.invokeAndWait` call. Tests simply have to declare `@RunWith(AWTThreadRunner.class)` to get this behavior.  ``` java     public class AWTThreadRunner extends BlockJUnit4ClassRunner {       public AWTThreadRunner(Class klass) throws InitializationError {         super(klass);       }        @Override       protected Statement classBlock(RunNotifier notifier) {         return onAWTThreadStatement(super.classBlock(notifier));       }        @Override       protected Statement methodBlock(FrameworkMethod method) {         return onAWTThreadStatement(super.methodBlock(method));       }        private static Statement onAWTThreadStatement(final Statement aStatement) {         return new Statement() {           @Override           public void evaluate() throws Throwable {             EventQueue.invokeAndWait(new Runnable() {               public void run() {                 aStatement.evaluate();                 // left out exception handling code improve readability               }             });           }         };       }     } ```  Note: the actual implementation is a bit more complex in that it does proper exception handling and refuses JUnit's time-outs as that doesn't work together with running on a dedicated thread.  ## Related Issues  - #157","closed","status: superseded,","debruyckere","2015-11-30T11:21:42Z","2018-06-03T11:29:49Z"
"","960","Detect annotations on overridden super type methods","## Overview  In JUnit 4, if `@Test` is declared on an `abstract` method in a superclass, then any concrete implementation of the method is not required to redeclare the `@Test` annotation. However, JUnit Jupiter currently does not support _implicitly inherited_ annotations on overridden methods.  This is an unintentional difference between JUnit 4 and JUnit Jupiter.  ## Related Discussions  - https://stackoverflow.com/questions/45162254/why-do-junit-5-tests-not-inherit-test-annotation-from-abstract-classes  - https://github.com/junit-team/junit4/issues/695 - https://github.com/junit-team/junit4/issues/468 - https://github.com/stefanbirkner/junit/commit/26077526b792168ce80cf16d52b5fbcaf17e8c42  ## Deliverables  - [ ] Tweak internal annotation utilities to find _implicitly inherited_ annotations on overridden methods. - [ ] Tweak internal annotation utilities to find _implicitly inherited_ repeated annotations on overridden methods.","closed","theme: discovery,","sormuras","2017-07-18T11:58:11Z","2020-10-03T12:14:27Z"
"","338","Always use status code on exit.","## Overview  In general I consider it helpful to always return a status code that is not 0 in case of a failure. This makes it easy for scripts to decide whether all tests succeeded. In addition I cannot imagine any use case that relies on returning 0 in case of a failure.  The old implementation returned the number of failing tests as status code if the flag `enable-exit-code` has been set. But this is only possible for a small number (< 256) of failing tests. The problem was that n*256 failing tests have been reported as 0 failing tests and therefore could not be distinguished from a successful run via status code.  The parser in `AvailableOptions` still accepts the `enable-exit-code` flag because the project is build with an older version of the Gradle plugin from https://oss.sonatype.org/content/repositories/snapshots The parser does not to have accept the flag anymore once a new version of the Gradle plugin is pushed to the snapshot repository.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: bug,","stefanbirkner","2016-06-21T12:07:53Z","2016-06-21T14:01:44Z"
"","922","Pass engine descriptor to resolve method","## Overview  In addition I renamed the method resolve to resolveSelectors. I did this change for two reasons:  1. JUnit4DiscoveryRequestResolver has now the same interface like Jupiter's DiscoverySelectorResolver. 2. The change makes the resolver stateless and I think nowadays people are more used to stateless objects. At least for me it was surprising that the resolve method writes its output to an object that was passed to the resolver by its constructor.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","stefanbirkner","2017-07-07T06:33:44Z","2017-07-17T17:20:34Z"
"","407","Does it make sense for a TestDescriptor to be both a test and a container?","## Overview  In [Specsy](http://specsy.org/), it's not known before executing a test whether its TestDescriptor has children or not. The nested tests are discovered dynamically while the test is executed. This holds true also for the top-level test, which is the test class itself. Thus conceptually all TestDescriptors are both tests and containers. This caused a problem with IntelliJ IDEA test results (see [this comment](https://youtrack.jetbrains.com/issue/IDEA-148288#comment=27-1518123) and [its reply](https://youtrack.jetbrains.com/issue/IDEA-148288#comment=27-1518474)) and I had to do [a workaround](https://youtrack.jetbrains.com/issue/IDEA-148288#comment=27-1518757).  ## Deliverables  This issue should be not closed until the following issues have been resolved.  - [ ] What does JUnit mean by the concepts of ""test"" and ""container""? - [ ] How should IDEs and other tools change their behavior based on those variables?    - If they shouldn't change behavior, then why do the variables exist? - [ ] What about the case of isTest()=false and isContainer()=false? - [ ] What about defining them dynamically based on whether there are children? (I tried it. IntelliJ IDEA doesn't notice that the values change during test execution.) - [ ] Would it be possible to remove both concepts, and just check whether a TestDescriptor has children?","closed","component: Platform,","luontola","2016-07-14T20:12:13Z","2017-07-03T10:48:31Z"
"","911","Extract isNotEngineId and isForVintageEngine.","## Overview  Improve readability of the resolve method by extracting methods `isNotEngineId`,`isForVintageEngine` and `loadTestClass`.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [X] ~Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes)~ - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","theme: discovery,","stefanbirkner","2017-07-04T05:43:59Z","2017-07-06T05:46:43Z"
"","928","Improve readability of getTags()","## Overview  Improve readability of getTags()  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Vintage,","stefanbirkner","2017-07-09T23:21:52Z","2017-07-11T16:34:33Z"
"","185","Explicitly join ids with "", "".","## Overview  IMHO this is a better approach then printing a list.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","stefanbirkner","2016-03-10T19:13:30Z","2016-03-10T19:43:57Z"
"","653","Not possible to run multiple methods in one test class","## Overview  If two or more test methods are selected to be run in a org.junit.platform.launcher.Launcher with the method org.junit.platform.engine.discovery.DiscoverySelectors#selectMethod(java.lang.String, java.lang.String), only the first of them is actually run. It seems that the other methods are removed from the TestDescriptor in org.junit.jupiter.engine.discovery.DiscoverySelectorResolver#pruneTree.  Expected behavior: All selected test methods in a test class are run. Actual behavior: Only the first test method is run.   ## Deliverables  Minimal working example in https://github.com/gdiegel/select-method.","closed","status: duplicate,","gdiegel","2017-02-16T13:27:12Z","2017-03-12T10:45:16Z"
"","809","Support maven-surefire-plugin version 2.21","## Overview  If any of my assertions fail, the Maven build fails with an `OutOfMemoryError`:    ``` java.lang.OutOfMemoryError: Java heap space 	at java.util.Arrays.copyOf(Arrays.java:3332) 	at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124) 	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:448) 	at java.lang.StringBuilder.append(StringBuilder.java:136) 	at org.apache.maven.plugin.surefire.booterclient.output.MultipleFailureException.getLocalizedMessage(MultipleFailureException.java:52) 	at org.apache.maven.plugin.surefire.booterclient.ForkStarter$CloseableCloser.run(ForkStarter.java:200) 	at org.apache.maven.surefire.shade.org.apache.maven.shared.utils.cli.CommandLineUtils$1.call(CommandLineUtils.java:282) 	at org.apache.maven.plugin.surefire.booterclient.ForkStarter.fork(ForkStarter.java:626) 	at org.apache.maven.plugin.surefire.booterclient.ForkStarter.fork(ForkStarter.java:533) 	at org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:279) 	at org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:243) 	at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeProvider(AbstractSurefireMojo.java:1077) 	at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeAfterPreconditionsChecked(AbstractSurefireMojo.java:907) 	at org.apache.maven.plugin.surefire.AbstractSurefireMojo.execute(AbstractSurefireMojo.java:785) 	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134) 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208) 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:154) 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:146) 	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:117) 	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:81) 	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51) 	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128) 	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:309) 	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:194) 	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:107) 	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:993) 	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:345) 	at org.apache.maven.cli.MavenCli.main(MavenCli.java:191) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) ```    ### Versions  * Maven 3.5 or 3.3.9 * org.junit.jupiter:junit-jupiter-api:5.0.0-M4 * org.apache.maven.plugins:maven-surefire-plugin:2.20 * org.junit.platform:junit-platform-surefire-provider:1.0.0-M4 * org.junit.jupiter:junit-jupiter-engine:1.0.0-M4  ### Repro  You should be able to reproduce this yourselves by trying to run `mvn test` for this project/commit: https://github.com/codahale/shamir/commit/0106f1b277352f4ea237c031534707978a5d326d. It should have a few failed assertions (I accidentally removed a few `byte` casts on `int` literals), but instead the build errors out. I can't reproduce this via the IntelliJ runner, FWIW.  As a simpler repro case, `assert 1 == 0;` and this in the `pom.xml` seems to produce the error:    ```xml        1.8     1.8     UTF-8     5.0.0-M4     1.0.0-M4                            org.apache.maven.plugins         maven-surefire-plugin         2.20                                 **/generated/**                                                     org.junit.platform             junit-platform-surefire-provider             ${junit.platform.version}                                   org.junit.jupiter             junit-jupiter-engine             ${junit.jupiter.version}                                    ```    ## Deliverables  - [x] Determine the cause of the `OutOfMemoryError`. - [x] Update to 2.21.0 when it's available. - [x] Remove warning from User Guide (see https://github.com/junit-team/junit5/commit/8101e241e93a0e856108fc8c113758753a63f56f#diff-3b704949fe0858ee9b4657142c7a151eR281)","closed","3rd-party: Maven Surefire,","codahale","2017-04-27T01:31:01Z","2018-12-12T05:21:46Z"
"","750","DefaultLauncher should catch exceptions thrown by test engines","## Overview  If a test engine throws an exception during discovery (see https://github.com/junit-team/junit5/blob/master/junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java#L115) other engines won't be queried any more.  I think this is a bug because one test engine can thereby prevent others from working.   ## Deliverables  - [x] `DefaultLauncher` should catch and report exceptions from engines and proceed with other engines.   - This applies to both the discovery phase and execution phase.  ## Additional Proposals  - `DefaultLauncher` could even collect discovery results concurrently.","closed","theme: diagnostics,","jlink","2017-03-26T13:48:18Z","2018-12-28T13:59:40Z"
"","705","Clean up and encourage immutability within the codebase","## Overview  I've made a number of cleanup- and immutability-related changes to the JUnit 5 codebase in my spare time, mainly for fun, but also in the hope that it makes things a little easier to maintain in the future. However, it's not clear to me if all the changes I've made are actually desirable for backwards-compatibility or other reasons.  Are all the changes I've made here OK? If not, I wonder if someone on the JUnit 5 team would kindly let me know either where I can improve or where I've overstepped my boundaries. :)  Here's a summary of the main changes I've made, as I've written in my commit message: ```     Clean up and encourage immutability within the codebase      - `Collections::unmodifiable*` has been used more for the return values       of public, non-internal, collection-returning methods, with the       intention of making them a bit easier to use and understand for       external users (since their mutability (or lack thereof) is now more       clearly defined and enforced).     - Code blocks between `// formatter:{off|on}` comments have been       manually formatted for consistenty.     - The methods of `Collectors` are statically imported more for       consistency. ```  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","type: task,","jbduncan","2017-03-05T19:08:03Z","2017-03-12T15:33:54Z"
"","851","RangeTest","## Overview  I was reading up on `ParameterizedTests` and considering the `@ValueSource` test. If you wanted to run a test over a large range of values, it could be quite a lengthy process to write out each test value. Would it be worth including a `@RangeSource` test? Something like:  ``` @ParameterizedTest @RangeSource(from = 100, to = 1000, skip = 10) void testWithRangeSource(int argument) { 	assertNotNull(argument); } ```  I'm happy to have a go at creating a PR for this if it would be useful.","closed","component: Jupiter,","ghost","2017-05-10T13:46:20Z","2018-10-31T11:42:40Z"
"","657","New issue template promotes incorrect task counts","## Overview  I used the new issue template when creating issue #656 and, for brevity deleted all the sections except for ""Feature request"" and deliverables.  Upon submission I noticed that the tasks completed shows ""1 of 3"" due to the inclusion of the checkbox next to ""Feature request"".  - [X] **Bug report.** And now this issue will exhibit the same problem  ## Deliverables  - [x] Replace the checkboxes next to ""Question"", ""Bug report"" and ""Feature request"" with some other markup.","closed","type: task,","smoyer64","2017-02-17T13:09:12Z","2017-03-12T10:46:16Z"
"","201","Introduce extension API for providing a custom ClassLoader (e.g., for Powermock)","## Overview  I tried to build a Powermock `Extension` similar to the Mockito example. I have to test some classes that create new objects within their constructors. In JUnit 4 I simply use the `PowerkmockRunner` and the `whenNew` from Powermock.  At least I ended with many problems and gave up. However in JUnit 4 Powermock creates an instrumented class loader and even duplicates everything (the test instance etc.) by using the new class loader. It is simple because the loader/rule are aware of executing the test itself. In JUnit Jupiter an `Extension` is not able to execute the test by itself.  I am wondering how this will be done in JUnit Jupiter. Are you planning to introduce some `CreateTestInstance` extension API? Something that is aware of manipulating class loaders. Or at least an `AroundAll` extension API to instrument the whole test class?  ## Related Issues  - #157 - #805 - #806  - #1680 - #1799","open","theme: discovery,","mepeisen","2016-03-13T11:22:55Z","2022-03-07T18:49:01Z"
"","749","Invoke TestExecutionExceptionHandlers in reversed order, analogous to After*Callbacks","## Overview  I think extensions should behave consistently whenever the test method is exited. This requires calling exception handlers in reversed order, the same way as after callbacks are called. In particular, if two extensions a and b implement before and exception handling callbacks, one would expect  - before-a - before-b - handle-exception-b - handle-exception-a  to provide an around like behavior (same as JUnit 4 rule chains).  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","codecholeric","2017-03-25T11:26:40Z","2017-03-25T16:45:27Z"
"","219","Introduce predefined @Disabled*/@Enabled* variants","## Overview  I just happened to have a test only failing on MS Windows machines and thought about JUnit Jupiter.  I could write a custom extension implementing `ContainerExecutionCondition` and `TestExecutionCondition`, but having a predefined `@Disabled` annotation such as `@DisabledIfWindows` or `@Disabled(condition = IsWindowsEvaluator.class)` to extend disabling feature might be handy.  ## Related Issues  - #1247  ## Deliverables  - [x] system property matches a pattern - [x] environment variable matches a pattern - ❌  current day of week matches one of the supplied enums   - The team decided not to publish `@EnabledOnDayOfWeek` and `@DisabledOnDayOfWeek`. - [x] current OS matches one of the supplied enums - [x] current JRE version matches one of the supplied enums - [x] Check for user configuration errors. For example, if a user declares `@EnabledOnOs({})`, that should result in an exception instead of a disabled result. - [x] Introduce integration tests for each condition. - [x] Write JavaDoc for each annotation. - [x] Document in User Guide. - [x] Document in Release Notes.","closed","component: Jupiter,","ttddyy","2016-03-31T23:01:29Z","2019-02-05T13:11:23Z"
"","820","Test-Coverage FilePosition","## Overview  I have written tests that cover the getLine, getColumn, and equals methods in the FilePosition.java class.  The tests for getLine and getColumn check to make sure the line and columns received are the same as what were entered into the FilePosition instantiation.  To test the equals method I check that it will equal itself, it will equal another filePosition with the same line and column.  Then I check to make sure it returns false where the line or column number do not match. ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","dweinmann141","2017-04-30T16:21:15Z","2017-05-03T13:24:47Z"
"","818","Introduce tests for MethodSource class","## Overview  I have written tests for the MethodSource class that verify MethodSource preconditions, equality, and HashCode equality. I have also introduced reflection into the tests to verify MethodSource object equality that are built with reflected methods.   The tests also ensure that class names and method names remain consistent when MethodSource objects are built with a reflected method. Say ""java.lang.String"" is a reflected class, and we reflect the ""valueOf"" method with ""int"" as its argument type, ""valueOf"" should be returned when we call MethodSource.getMethodName() and ""java.lang.String"" should be returned when we call MethodSource.getClassName().  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Platform,","sethlessard","2017-04-30T14:49:34Z","2017-05-04T15:36:09Z"
"","707","Create a ""sponsored"" open chat group","## Overview  I have felt that since joining the Kotlin Slack community I have been able to absorb the language from maintainers and the community much faster than by trying to locate these resources myself. I believe that having an active group like this will benefit extension authors, engine developers, test writers, and other consumers of JUnit.  I would like to see the the JUnit 5 team adopt a Slack/Gitter for both the community and maintainers to gather around.  ## Deliverables  - [x] A ~~Slack~~/**Gitter**/~~other~~ chat platform - [x] README documentation updated","closed","theme: documentation,","mkobit","2017-03-06T14:39:05Z","2017-07-01T16:19:43Z"
"","817","Introduce tests for Theme class","## Overview  I have created tests for the enum Theme. The tests verify that the correct Theme be given for a certain character set. The tests also verify that for each Theme, the correct result string be given from Theme.status() based on a TestExecutionResult.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Platform,","sethlessard","2017-04-29T17:45:05Z","2017-05-05T21:38:16Z"
"","752","Consideration of create a new annotation to be executed before of @Parameters","## Overview  I have assumed that `@BeforeClass` is executed before of `@Parameters`.  I did realize it is not true.   ## Situation  The situation is that `@Parameters` needs mandatorily data initializated from `@BeforeClass`.   Now, because my original assumption was wrong, my unique way to around this is through a `static` block to accomplish my goal.  ## Original Proposal  Assuming this behaviour is the expected. Create a new annotation to accomplish the following order:  * `@NewAnnotation` such as ""@BeforeParameter"" * `@Parameter` * `@BeforeClass` * `@Before` * `@Test`","closed","status: invalid,","manueljordan","2017-03-28T02:02:23Z","2017-05-12T12:59:22Z"
"","717","@Nested test classes are not inherited from superclasses","## Overview  I created an abstract test class and organized the tests in nested classes. Unfortunately it looks like the implementing test class does not inherit those nested tests. Shouldn't it? (I think it should.) Or am I just doing something wrong?  (I discovered this with M3.)  ## Deliverables  - [x] Decide whether nested test classes should be inherited. - [x] Update `ReflectionUtils` so that searches for nested classes also return inherited nested classes (regardless of whether they are static or not).","closed","theme: discovery,","nipafx","2017-03-09T20:22:02Z","2017-03-18T07:29:11Z"
"","157","Introduce extension API for executing test in user-defined thread","## Overview  I couldn't find a way to write an extension that changes the behavior of test execution.  Examples of what I would like to do are:  - let each test run 100x in 5 threads to check for race conditions - let a test execute in the Swing EDT Thread.  Such use cases were easy to implement with JUnit 4 Rules, and I used especially the second a lot. So I think it would be bad to lose this option in JUnit Jupiter.  ## Proposals  - see https://github.com/junit-team/junit5/issues/157#issuecomment-190187989  ## Related Issues  - supersedes #20  - related to #201 - related to #1248  - duplicated by #1442","closed","component: Jupiter,","schauder","2016-02-15T13:23:24Z","2019-05-01T13:36:36Z"
"","533","Remove 'clean' from build instructions","## Overview  Gradle has excellent incremental build support. Invoking 'clean' is a big waste of the developers time. As a rule of thumb, when the developer has to invoke 'clean' to make the build work,  the build is broken.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","oehme","2016-10-03T07:39:09Z","2016-10-31T14:33:19Z"
"","382","Add forking support in surefire provider","## Overview  Forking requires two methods to be implemented in JUnitPlatformProvider:  1) `#getSuites()` - defines set of test classes for the future forks to execute  2) `#invoke(Object)` - called inside a fork with a `Class` argument from (1)  This PR adds implementation of `#getSuits()` and alters `#invoke(Object)` to support forking. It also adds unit tests for all classes in junit-platform-surefire-provider module.  Fixes #362 #363   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","lutovich","2016-07-07T21:36:16Z","2016-11-30T08:58:32Z"
"","652","Add favicons to the users guide and javadocs web sites","## Overview  For those of us who always have a lot of tabs open in their browsers, it would make it much easier to get back to the JUnit 5 reference materials.  ## Deliverables  - [x]  Add a favicon to the users guide. - [x]  Add a favicon to the javadocs.","closed","theme: documentation,","smoyer64","2017-02-15T23:05:00Z","2017-06-16T12:37:53Z"
"","905","Introduce configuration parameter for setting default test instance lifecycle semantics","## Overview  For teams that prefer _per-class_ test instance lifecycle semantics, in order to prevent such teams from having to copy-n-paste `@TestInstance(Lifecycle.PER_CLASS)` across the code base, it would be beneficial to introduce a configuration flag (e.g., system property) that allows the default test instance lifecycle semantics to be set on a per-project basis (e.g., for a build).  Switching the default semantics would remain an opt-in decision but would be considerably less intrusive with the configuration flag.  See https://github.com/junit-team/junit5/issues/419#issuecomment-312001083 for background information.  In addition, we could introduce support for setting `ConfigurationParameters` via a properties file (e.g., a `junit.properties` file in the root of the classpath). This would allow such configuration to be contained in the project itself (and checked into a VCS) as opposed to having to set such a flag in the build script as well as in the IDE (perhaps on a per test run basis).  ## Related Issues  - #419  - #991  - #1002  - #1003  - #1004   ## Deliverables  - [x] Introduce `junit.jupiter.testinstance.lifecycle.default` configuration parameter for setting default test instance lifecycle semantics.   - [x] Introduce new constant in `org.junit.jupiter.engine.Constants`.   - [x] Support enum constant names from `TestInstance.Lifecycle`, ignoring case.   - [x] Introduce unit tests for the new configuration parameter.   - [x] Introduce integration tests for the new configuration parameter, including override semantics for local config, config params provided to the launcher, and system properties. - [x] Log `INFO` message if the test instance lifecycle mode has been set via the configuration parameter. - [x] Update JavaDoc for `@TestInstance`. - [x] Update User Guide. - [x] Update release notes.","closed","component: Kotlin,","sbrannen","2017-06-29T16:35:55Z","2017-08-22T13:06:18Z"
"","831","Document DynamicContainer feature","## Overview  Followup from #813  ## Deliverables  - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] Update user-guide, i.e. include a paragraph about `dynamicTestsWithContainers`","closed","component: Jupiter,","sormuras","2017-05-03T11:38:21Z","2017-07-03T10:48:19Z"
"","961","Enable error-prone static analysis checks","## Overview  Following issue #955, this is a work-in-progress PR to introduce error-prone checks to JUnit 5.  Feedback is welcome!  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","jbduncan","2017-07-18T14:55:51Z","2018-01-26T13:58:17Z"
"","751","Gradle plugin improvements","## Overview  Fixes https://github.com/junit-team/junit5/issues/708 and adds functional tests for validating Gradle plugin until the Gradle team can start implementing built-in support.  - No changelog updated yet, wasn't sure if this would get in. - Testing Uses locally built components by providing the classpath of those components as dependencies - Does not currently use the [`java-gradle-plugin`](https://docs.gradle.org/current/userguide/javaGradle_plugin.html) - I wasn't sure how that would fare with the current signing and other components used right now, so I didn't add that in (can be done later)  *Questions*  - Should we run the functional tests on every build? - Should we run the functional tests with multiple Gradle versions (very easy to add)? - Is the formatting for writing build files, java files, etc. in the functional test acceptable?   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Platform,","mkobit","2017-03-27T03:35:41Z","2017-04-18T14:41:10Z"
"","727","Properly decode jar file URI with spaces in its path","## Overview  Fixes #726 by using single String-consuming URI constructor that properly decodes paths, even when they contain escaped characters like `%20` for spaces.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2017-03-11T20:19:22Z","2017-03-12T10:41:40Z"
"","722","Include ""inherited"" nested classes in findNestedClasses()","## Overview  Fixes #717 by traversing superclasses to find all declared classes in the hierarchy of the class to scan. Declared classes of implemented (super-) interfaces are also included.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","theme: discovery,","sormuras","2017-03-10T21:20:37Z","2017-03-18T07:29:28Z"
"","702","Introduce junit-platform-console-standalone module","## Overview  Fixes #701 by moving standalone build, shadow, exec+check and Maven publish features into an own, dedicated sub-project. Here, the generated pom.xml doesn't contain any dependency to other archives.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Platform,","sormuras","2017-03-01T19:45:44Z","2017-03-12T15:34:45Z"
"","667","Continue the tree structure across line breaks","## Overview  Fixes #658 by handling potential multi-line messages within the TreePrintingListener. Before this commit, the vertical test tree tiles were interrupted when a multi-line message was provided.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) ~~Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes)~~ - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Platform,","sormuras","2017-02-19T20:55:25Z","2017-03-12T15:19:57Z"
"","649","Add integration test","## Overview  Fixes #648 by running some sample tests (which includes failing and passing tests) reads the output, and ensures that we get the expected result. This integration test relies on external test plan execution using the standalone jar.  When the something similar to the incorrect usage of a Stream's filter() method that removed all tests from being run happens, this integration test will fail.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Vintage,","sormuras","2017-02-12T23:29:09Z","2017-03-12T15:14:57Z"
"","637","Revise task inputs for Gradle plugin regarding incremental builds (#631)","## Overview  Fixes #631 by removing `path` and `configuration` from compile-time dependency declaration.  With the change applied, Gradle can quickly pass a sequence like `gradlew clean test; gradlew test; gradlew test` from the second `test` on with: ``` [...] :junit-platform-gradle-plugin:test UP-TO-DATE BUILD SUCCESSFUL Total time: 1.103 secs 11:33:56: External task execution finished 'test'. ``` ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","status: superseded,","sormuras","2017-01-23T14:06:14Z","2017-03-12T16:55:37Z"
"","689","Reduce log level for detected test engines","## Overview  Fixes #513 by using log level CONFIG instead of DEBUG.  If you want to see the information which engines were detected, use ""-Djava.util.logging.config.file=LOG"" with the content of LOG something similar to:  ```   handlers=java.util.logging.ConsoleHandler   java.util.logging.ConsoleHandler.level=CONFIG   org.junit.level=CONFIG ```  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2017-02-24T21:40:07Z","2017-03-12T17:15:40Z"
"","720","Redesign isTest() and isContainer() in TestDescriptor","## Overview  Fixes #508 by replacing logic behind `isTest()` and `isContainer()` from two independent boolean properties into an enumeration based one:  ```java enum TestDescriptor.Type {  	ENGINE, CONTAINER, TEST, CONTAINER_AND_TEST;  	public boolean isContainer() { 		return this == ENGINE || this == CONTAINER || this == CONTAINER_AND_TEST; 	}  	public boolean isTest() { 		return this == TEST || this == CONTAINER_AND_TEST; 	} } ```  Convenient and code duplicate remover methods `TestDescriptor.prune()` and `TestDescriptor.pruneTree()` are introduced.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x]  All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","sormuras","2017-03-10T12:11:16Z","2017-03-17T21:15:51Z"
"","651","Add utility API to ExtensionContext.Util","## Overview  Fixes #246 by publishing useful internal helper methods via an API facade. At the moment, only annotation-related helpers are included. The `ExtensionContext.Util` interface might grow in the future.  ## Discussion  1. Omit nested `Util` interface and pull helper methods up to `ExtensionContext`? 2. If nested interface is wanted, find a better name then `Util`? 3. Expose more helper methods, if yes, which?  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","theme: extensions,","sormuras","2017-02-15T12:24:22Z","2019-01-24T16:28:38Z"
"","674","Publish maintained utilities to dedicated support package","## Overview  Fixes #246 and #352 by publishing useful internal helper methods via an API facade. Members of the support package are maintained, which is reflected by the `@API(Maintained)` annotation. The current support facade only delegates to the internal utility methods.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","theme: extensions,","sormuras","2017-02-22T20:31:09Z","2017-03-12T15:21:36Z"
"","197","Fix typo (remove surplus comma).","## Overview  Fix typo (remove surplus comma).  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","stefanbirkner","2016-03-12T21:21:35Z","2016-03-13T12:25:06Z"
"","567","Convert NoClassDefFound error to empty class optional","## Overview  Fix for #565 by converting `NoClassDefFoundError` (like `ClassNotFoundException`) into an empty `Optional>`. This prevents warnings when trying to load `module-info` classes. The warning can be seen here: https://youtrack.jetbrains.com/issue/IDEA-163795  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","status: superseded,","sormuras","2016-11-13T10:40:07Z","2016-11-15T17:22:34Z"
"","639","Make Gradle incremental build work","## Overview  Executing `gradlew clean test; gradlew test; gradlew test` resulted in all tests being executed thrice instead of just once. By generating the shadowed `junit-platform-console-x.y.z.jar` only if code changes are made, Gradles' UP-TO-DATE checks succeed again.  Copied from `build.gradle` file: ```  // Generate JAR manifest only if code was compiled or recompiled;  // otherwise the junitPlatformTest task will always be executed even if  // no code changes were made. The reason is that the generation of  // the buildDate and buildTime causes JAR manifests to be modified  // which triggers unnecessary rebuilding of the dependent JARs. ```  Fixes #631  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","sormuras","2017-01-25T06:05:05Z","2017-01-25T19:40:20Z"
"","194","Simplify interface of the TestDescriptor.Visitor.","## Overview  Every visitor gets the instance of the TestDescriptor and a Runnable for deleting it from the hierarchy. Everybody who has access to a TestDescriptor can therefore delete it, but with an approach that is not obvious. That's why I added the delete method to the TestDescriptor interface because I think that it is easier to understand compared to the Runnable.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","stefanbirkner","2016-03-12T10:39:57Z","2016-04-29T11:44:43Z"
"","919","Don't check that the discovery request is not null","## Overview  Engines are called by a launcher. The DefaultLauncher never calls an engine with a null request. We trust all callers of the `discover` method to use the engine properly. Hence there is no need to check for null. (This change was proposed by @marcphilipp in #918.)  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","stefanbirkner","2017-07-06T06:18:31Z","2017-07-06T18:57:41Z"
"","548","Improve error reporting for failed dynamic test registration","## Overview  End-user does not have any error info about why the tests are not executed in case when @TestFactory annotated method call ends up throwing exception.  It seems like I've encountered a bug while working on description of another bug https://intellij-support.jetbrains.com/hc/en-us/requests/789874  Having method declared, it is not obvious where the error is  ``` java     @TestFactory     public Stream data() {         return Stream.of(                 DynamicTest.dynamicTest("""", () -> {                     // here we do something                 }),                  DynamicTest.dynamicTest(""NOT EMPTY"", () -> {                     // here we do something                 })         );     } ```  Actually the reason is in here --> `DynamicTest.dynamicTest("""", () -> {});` where blank value `("""")` is not allowed.  If method throws an exception - end user does NOT know about that, dynamic tests simply are not executed.  It would be nice to fire callback event in this case. Or report to the user by other means.  Details are in attached docs. start point is `JUnit5DynamicTestsBugCheck.java`  [info.zip](https://github.com/junit-team/junit5/files/541709/info.zip)","closed","component: Jupiter,","SqAutoTestTeam","2016-10-20T12:57:01Z","2016-11-16T09:00:27Z"
"","921","Provide request to DiscoverySelectorResolver.","## Overview  Each DiscoverySelectorResolver is now responsible for discovering test classes based on the provided EngineDiscoveryRequest. This minimizes the interface of DiscoverySelectorResolvers and makes it easier to use them.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","stefanbirkner","2017-07-06T19:29:34Z","2017-07-17T17:21:02Z"
"","826","Add support for dynamic display names","## Overview  Dynamic tests allow specifying display names dynamically but static tests do not. The `DisplayName` annotation takes a constant `String` as its value.  A user can create a `TestFactory` method to create a single dynamic test in order to dynamically define a single test's display name but this results in undesirable nesting. e.g.:  ```java class DemoTests {     @TestFactory     Stream createCurrentYearTest() {         Year currentYear = Year.now();         String displayName = String.format(""Year should be current year (%s)"", currentYear);         return Stream.of(dynamicTest(displayName, () -> {             // ...         }));     } } ```  ## Deliverables  - [ ] A simple way to dynamically specify a display name for a single, non-nested test.","closed","status: duplicate,","mfulton26","2017-05-01T18:37:27Z","2017-05-02T00:49:52Z"
"","910","Remove testInstance parameter from TestInstancePostProcessor","## Overview  Due to recent refactorings that made the test instance available in the `ExtensionContext`, a `TestInstancePostProcessor` now has two ways to access the test instance object in the `postProcessTestInstance()` method, thereby making the `Object testInstance` parameter superfluous.  ## Related Issues  - #419   ## Deliverables  - [x] Delete the `Object testInstance` parameter from `TestInstancePostProcessor.postProcessTestInstance(Object, ExtensionContext)`. - [x] Update all demo implementations accordingly. - [x] Update Javadoc accordingly. - [x] Add an entry in the M5 release notes.","closed","component: Jupiter,","sbrannen","2017-07-02T20:04:52Z","2017-07-04T11:40:51Z"
"","869","honor @Disabled on custom annotations","## Overview  does not honor custom tags tagging a test with ```@org.junit.jupiter.api.Disabled``` will work as expected but using a custom ```@MyCustomDisabled``` tag will not be honored.   Steps to reproduce the bug:  - create a custom tag - tag a junit5 test with it - run the test  custom tag example: ``` @Target({ ElementType.TYPE, ElementType.METHOD })     @Tag(""slow"")     @Disabled     public @interface MyCustomDisabled {} } ```  - Expected:  not to run the test - Actual: test executed  Tested using maven and **junit 5.0.0-M4**","closed","","evantill","2017-05-27T10:49:28Z","2017-05-27T12:29:20Z"
"","762","Document @TestTemplate and accompanying extension point in User Guide","## Overview  Document `@TestTemplate` and accompanying extension point in User Guide.  ## Deliverables  - [x] Document `@TestTemplate` and accompanying extension point in User Guide - [x] Provide example(s) in the `documentation` module and include in the User Guide.","closed","component: Jupiter,","marcphilipp","2017-04-01T09:27:10Z","2017-07-03T10:48:17Z"
"","753","Support for new annotation equivalent to TestInstancePostProcessor","## Overview  Currently, there is a `TestInstancePostProcessor` extension point, but there is no equivalent annotation.  Similar functionality can be achieved by instance initializer block, but it cannot have access to the context info that JUnit Jupiter DI provides.   New annotation should be annotated on instance method, so that logic that once-per-test-class but don't-want-to-be-in-static-method can be performed.  ## Deliverables  - [ ] Introduce an annotation analogous to the `TestInstancePostProcessor` extension point     for example, `@[Post|After]Instantiation`, `@AfterConstruct`, `@ProcessTestInstance`, etc.","closed","component: Jupiter,","ttddyy","2017-03-29T04:57:34Z","2019-07-19T19:32:39Z"
"","939","Consider static factory methods instead of constructors","## Overview  Currently, there aren't many classes (if any) in JUnit 5 that are instantiated via _static factory methods_, as opposed to constructors. _Effective Java 2nd Edition_, Item 1 gives a number of compelling reasons for preferring static factory methods. Therefore we should consider adopting them more, skipping over those classes where there is a more compelling reason for them to have public constructors instead.  ## Deliverables  - [x] Evaluate which classes should have public _static factory methods_. - [x] For the following classes, make their constructors private or protected and introduce static factory methods (SFMs) in their place.   - [x] `ClasspathResourceSource`   - [x] `ClassSource`   - [x] `CompositeTestSource`   - [x] `DirectorySource`   - [x] `FilePosition`   - [x] `FileSource`   - [x] `MethodSource`   - [x] `PackageSource`   - [x] `LoggingListener`: make the existing constructor private and introduce a `forBiConsumer(...)` SFM. - ❌ Introduce a new `TestSources` utility class (analogous to `DiscoverySelectors`) that will house the SFMs for `TestSource` implementations.   - The team decided to introduce `from(...)` SFMs in each `TestSource` implementation instead.","closed","component: Vintage,","jbduncan","2017-07-11T11:57:53Z","2019-07-19T19:32:42Z"
"","878","Allow @ParameterizedTest declarations at type level for TCKs","## Overview  Currently, the target of `@ParameterizedTest` is constrained to methods. When creating technology compatibility kits, it would be awesome to be able to apply this (or a similar annotation) to the test class so that all tests in that class are parameterized the same way.  ## Proposal  Rather than:  ```java class MyTest {    @ParameterizedTest    @ArgumentSource(...)    void feature1() { ... }     @ParameterizedTest    @ArgumentSource(...)    void feature2() { ... } } ```  Something like:  ```java @ParameterizedTest @ArgumentSource(...) class MyTest {    @Test // ?    void feature1() { ... }        @Test    void feature2() { ... } } ```  ## Related Issues  - #871   - #1141","open","theme: parameterized tests,","jkschneider","2017-06-09T18:57:09Z","2022-04-13T18:19:34Z"
"","708","'junitPlatformTest' task can not be retrieved at configuration time by Gradle plugin","## Overview  Currently, the `JUnitPlatformPlugin` has logic to be applied `afterEvaluate` which makes it so users must also do some lazy evaluation logic to be able to also configure it.  For example, is a user wants to apply configuraiton to the `'junitPlatformTest'` task, they might try this by:  ```groovy tasks.getByName('junitPlatformTest').dependsOn(myTask) ```  This will fail at configuration time with an NPE.  A user will have to work around this by making the configuration more lazy. One workaround for a user would be something like:  ```groovy tasks.whenTaskAdded {   if (it.name == ""junitPlatformTest"") {     it.dependsOn(myTask)   } } ```  ## Deliverables  - [x] Make the `JUnitPlatformPlugin` applied at configuration time rather than `afterEvaluate` - [x] Change is documented in the User Guide and Release Notes","closed","component: Platform,","mkobit","2017-03-06T15:08:49Z","2017-04-27T14:45:05Z"
"","923","Improperly configured @ParameterizedTest should fail instead of being disabled","## Overview  Currently, if a `@ParameterizedTest` is not configured properly (at least as demonstrated below), it will be silently _disabled_; whereas, the improper configuration is actually an error.  For example, the following test configuration...  ```java @ParameterizedTest @CsvSource({}) void parameterizedTest(String str1, String str2) { } ```  ... results in:  ``` org.opentest4j.TestAbortedException: No supporting TestTemplateInvocationContextProvider provided an invocation context ```  ... but the above is clearly a user error and not the result of a missing `TestTemplateInvocationContextProvider`.  ## Related Bug  (perhaps worthy of a separate issue)  The following configuration...  ```java @ParameterizedTest @CsvSource({""""}) void parameterizedTest(String str) { } ``` ... does not result in the test being disabled but rather fails the test with the following error, which is vague at best. What is `null`? I don't see anything `null`. I see an empty string, but that's not the same as `null`.  ``` org.junit.platform.commons.util.PreconditionViolationException: argument array must not be null ```  It turns out that the above example can be fixed by specifying an empty string as `''` within the double quotes (as follows), but I don't think anyone can be expected to infer that as the solution to the `null` claim in the exception that is thrown.  ```java @ParameterizedTest @CsvSource({""''""}) void parameterizedTest(String str) { } ```   ## Deliverables  - [x] Investigate which uses cases leading to ""No supporting TestTemplateInvocationContextProvider"" are actually user configuration errors. - [x] Fail parameterized tests that are improperly configured. - [x] Improve exception messages for scenarios such as the above ""argument array must not be null"" case.","closed","component: Jupiter,","sbrannen","2017-07-07T15:07:00Z","2017-07-10T19:44:57Z"
"","955","Consider using static analysis and formal verification tools","## Overview  Currently, AFAICT, no static analysis or formal verification tools are being used to catch bugs in the JUnit 5 code base. IMO it would be a sensible thing to do to start using a combination of various tools now, so that when we reach GA and proceed beyond GA, we are less likely to be inundated by preventable bug reports and/or suffer from potential security issues.  I'd personally suggest a combination of the following tools, but I'm more than happy to discuss the merits of the tools listed and to discuss other tools which aren't listed or that I may have not thought of: - [error-prone](http://errorprone.info/) - [SpotBugs](https://spotbugs.github.io/) or FindBugs - SpotBugs/FindBugs plugins:     - [fb-contrib](http://fb-contrib.sourceforge.net/)     - [find-sec-bugs](http://find-sec-bugs.github.io/) - PMD - [Checker Framework](https://checkerframework.org/) (specifically for [nullness formal verification](https://checkerframework.org/manual/#nullness-checker))  ## Deliverables  - [ ] A number of agreed-upon static analysis and/or formal verification tools are adopted.","closed","status: stale,","jbduncan","2017-07-17T08:54:56Z","2021-05-15T12:25:16Z"
"","938","Document which classes support inheritance and which do not","## Overview  Currently, AFAICT, no classes (apart from utilities classes) document their support for inheritance (that is, whether they are designed to be subclassed or not). _Effective Java 2nd edition_, Item 16 describes the dangers of allowing users and extension writers to subclass JUnit 5 classes that aren't designed for inheritance. Therefore we should follow Item 17's advice to prevent this.  Specifically, each class should meet the following criteria (more or less ripped from the book): 1. For classes that support inheritance:     1. Make those methods which aren't intended to be overridden final.     2. **The class must document it's _self-use_ of overridable methods**.     3. To allow programmers to write efficient subclasses without undue pain, **a class may have to provide hooks into its internal workings in the form of judiciously chosen protected methods or fields**.     4. **The _only_ way to test a class designed for inheritance is to write subclasses; classes must be tested by writing subclasses **before** releasing it.** (Before GA, in our case.)     5. **Constructors must not invoke overridable methods.**     6. For classes implementing `Cloneable` or `Serializable`, **neither `clone` nor `readObject` may invoke an overridable method, directly or indirectly.** 2. For classes that _don't_ support inheritance:     1. **Prohibit subclassing** by making the class final or replacing all public constructors with public static factory methods.  ## Deliverables  - [ ] Each and every class meets the criteria above.","open","component: Vintage,","jbduncan","2017-07-11T11:45:53Z","2022-07-01T07:08:18Z"
"","808","Revise Assertions.assertAll() to track all exceptions","## Overview  Currently, `Assertions.assertAll()` only _tracks_ instances of `AssertionError`. If any other type of exception is thrown, the invocation of `assertAll()` immediately halts, and the exception is rethrown.  Over time it has become apparent to the JUnit team that this behavior is not intuitive and likely not what the average developer would expect (even though the current behavior is well documented).  ## Deliverables  - [x] Revise `assertAll()` so that it _tracks_ exceptions of any type (i.e., via a single catch-block for `Throwable`) and only rethrows _blacklisted_ exceptions.","closed","component: Jupiter,","sbrannen","2017-04-26T18:46:21Z","2017-04-26T21:03:15Z"
"","767","Allow LauncherFactory to be configured regarding engines and listeners","## Overview  Currently the only way to create DefaultLauncher is use `LauncherFactory.create()` method, that loads engines and listeners via SPI. In some cases it would be nice to have an ability to directly specify the engines and listeners for launcher.   In my case I want to load engines with SPI, but disable SPI for listeners","closed","component: Platform,","baev","2017-04-04T12:43:30Z","2018-08-10T14:35:57Z"
"","780","Capture stdout/stderr and include in test reports","## Overview  Currently the JUnit Platform and JUnit Jupiter do not support capturing stdout/stderr emitted during tests. This is quite useful for troubleshooting test failures on CI servers, esp. if the failures are not reproducible locally.  Background: http://stackoverflow.com/questions/43151448/how-to-capture-stdout-stderr-in-junit-5-gradle-test-report/43259526","closed","component: Platform,","maxwindiff","2017-04-07T22:34:41Z","2019-07-19T19:32:40Z"
"","783","Fix Javadoc warnings","## Overview  Currently the following warnings are printed when executing `:aggregateJavadocs`:  ``` junit5/junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java:153: warning - Tag @see: reference not found: TestDescriptor.Type#isTest() junit5/junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java:164: warning - Tag @see: reference not found: TestDescriptor.Type#isContainer() junit5/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java:40: warning - Tag @link: reference not found: value junit5/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java:40: warning - Tag @link: reference not found: value junit5/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvSource.java:40: warning - Tag @link: reference not found: value 5 warnings ```  ## Deliverables  - [x] Fix Javadoc warnings","closed","theme: documentation,","marcphilipp","2017-04-08T19:42:09Z","2017-04-08T22:30:57Z"
"","842","Get jdk-9 back to build JUnit 5","## Overview  Current state of getting jdk-9 back to build JUnit 5 - not only on Travis CI.  With https://github.com/junit-team/junit5/commit/4e401dd72f2157cb6dc8a9db615e491007dba4cf the `'-Werror'` compiler option is untouched, i.e. remains activated.  Fixes #775   ### Note  Travis CI (debian trusty) is still on JDK9-B162, due to [webupd8team](https://launchpad.net/~webupd8team/+archive/ubuntu/java?field.series_filter=trusty) is on 162.  Using a manually installed JDK9-B168 with https://github.com/junit-team/junit5/pull/842/commits/d0443a35b8700cee1a2b28493981e99efb3b1591 for now.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [na] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [na] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [na] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","theme: modules,","sormuras","2017-05-07T19:49:22Z","2017-05-15T18:13:29Z"
"","640","Create platform console standalone jar","## Overview  Create `junit-console-x.y.z-standalone.jar` with all dependencies included/shadowed.  Motivated by https://github.com/junit-team/junit5/issues/258#issuecomment-268794285  Supersedes PRs: #633, #259 and #596  Closes ZIP-distribution/plain-old JAR related issues: #146 and #258  ## Created archives in ""junit-platform-console/build/libs"" - `junit-platform-console-1.0.0-SNAPSHOT.jar` **135** KB - `junit-platform-console-1.0.0-SNAPSHOT-javadoc.jar` **59** KB - `junit-platform-console-1.0.0-SNAPSHOT-sources.jar` **33** KB - `junit-platform-console-1.0.0-SNAPSHOT-standalone.jar` **846** KB  The standalone jar contains following generated `META-INF/MANIFEST.MF`, which declares the engine version numbers shadowed into it: ``` Manifest-Version: 1.0 Build-Date: 2017-01-27 Build-Revision: 8a65ec81b00a3e9b7b0fa5debb2865f5bc6339b1 Build-Time: 10:36:42.201+0100 Built-By: JUnit Team Created-By: 1.8.0_112 (Oracle Corporation 25.112-b15)  Main-Class: org.junit.platform.console.ConsoleLauncher Engine-Version-junit-jupiter: 5.0.0-SNAPSHOT Engine-Version-junit-vintage: 4.12.0-SNAPSHOT  Specification-Title: junit-platform-console-standalone Specification-Vendor: junit.org Specification-Version: 1.0.0 Implementation-Title: junit-platform-console-standalone Implementation-Vendor: junit.org Implementation-Version: 1.0.0-SNAPSHOT ``` ## Usage ## Running: ``` task standaloneExec(type: JavaExec) { 	dependsOn(standaloneJar) 	workingDir ""$buildDir/libs"" 	main = '-jar' 	args = [ 	    ""$standaloneJar.archiveName"",             '--classpath', '../../../platform-tests/build/classes/test',             '--include-classname', 'org.junit.platform.commons.util.PackageUtilsTests',             '--scan-classpath',             '--details', 'tree' 	] } ``` ...results in: ``` +-- JUnit Jupiter | +-- PackageUtilsTests | | +-- getAttributeWithNullType() [OK] | | +-- getAttributeWithNullFunction() [OK] | | +-- getAttributeWithNullClassLoader() [OK] | | +-- getAttributeWithEmptyName() [OK] | | +-- getAttributeWithNullName() [OK] | | +-- getAttributeWithFunctionReturningNullIsEmpty() [OK] | | +-- attributesFromValueWrapperClassArePresent() | | | +-- getName [OK] | | | +-- getImplementationTitle [OK] | | | +-- getImplementationVendor [OK] | | | +-- getImplementationVersion [OK] | | | +-- getSpecificationTitle [OK] | | | +-- getSpecificationVendor [OK] | | | +-- getSpecificationVersion [OK] +-- JUnit Vintage  Test run finished after 43 ms [         4 containers found      ] [         0 containers skipped    ] [         4 containers started    ] [         0 containers aborted    ] [         4 containers successful ] [         0 containers failed     ] [        13 tests found           ] [         0 tests skipped         ] [        13 tests started         ] [         0 tests aborted         ] [        13 tests successful      ] [         0 tests failed          ] ```  ## TODO ## - [x] Change `Specification-Title` and `Implementation-Title` to `junit-platform-console-standalone` - [x] Update user guide, section http://junit.org/junit5/docs/current/user-guide/#running-tests-console-launcher - [x] Update M4 release notes ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2017-01-25T11:33:16Z","2017-03-12T14:22:15Z"
"","633","Create console standalone executable jar","## Overview  Create `junit-console-standalone-x.y.z.jar` with all dependencies included/shadowed.  Motivated by https://github.com/junit-team/junit5/issues/258#issuecomment-268794285  Supersedes PR #259 and PR #596 -- might close ZIP-distribution/plain-old JAR related issues: #146 and #258  ## Created archives in ""build/libs""  ### junit-platform-console - `junit-platform-console-1.0.0-SNAPSHOT.jar` **135** KB - `junit-platform-console-1.0.0-SNAPSHOT-javadoc.jar` **59** KB - `junit-platform-console-1.0.0-SNAPSHOT-sources.jar` **33** KB  ### junit-platform-console-standalone - `junit-platform-console-standalone-1.0.0-SNAPSHOT.jar` **846** KB  Standalone jar contains following generated `META-INF/MANIFEST.MF`, which declares the engine version numbers shadowed into it: ``` Manifest-Version: 1.0 Implementation-Title: junit-platform-console-standalone Build-Date: 2017-01-23 Implementation-Version: 1.0.0-SNAPSHOT Built-By: JUnit Team Specification-Vendor: junit.org Specification-Title: junit-platform-console-standalone Implementation-Vendor: junit.org Build-Revision: 4b91f4596cabebeccbc49c9dce31e7e1c853f21f Build-Time: 10:26:59.577+0100 Created-By: 1.8.0_102 (Oracle Corporation 25.102-b14) Specification-Version: 1.0.0  Main-Class: org.junit.platform.console.ConsoleLauncher Engine-Version-junit-jupiter: 5.0.0-SNAPSHOT Engine-Version-junit-vintage: 4.12.0-SNAPSHOT ```  ## Open ends - [x] The `checkStandaloneConsole` task only prints the current **wrong** version information (see snippet below) provided by the only jar left, the standalone one. The `META-INF/MANIFEST.MF` files from the engine jars are not longer available, so the mechanism used to retrieve the version and artifact information reports the string found in the current project manifest, namely `junit-platform-console`. ``` Jan 19, 2017 9:40:31 PM org.junit.platform.launcher.core.ServiceLoaderTestEngineRegistry loadTestEngines INFORMATION: Discovered TestEngines with IDs: [ junit-jupiter (group ID: org.junit.jupiter, artifact ID: junit-platform-console, version: 1.0.0-SNAPSHOT),  junit-vintage (group ID: org.junit.vintage, artifact ID: junit-platform-console, version: 1.0.0-SNAPSHOT) ] ``` Fix proposed in https://github.com/junit-team/junit5/pull/633/commits/a900e3090ea241d87cb56478a53afd1a884463c2 - [x] _call it `junit-console-x.y.z-standalone.jar` or `junit-platform-console-x.y.z-standalone.jar`?_ https://github.com/junit-team/junit5/issues/258#issuecomment-273890999 Created new subproject `junit-console-standalone-x.y.z.jar` gathering all dependend artifacts.  - [x] Update user guide, section http://junit.org/junit5/docs/current/user-guide/#running-tests-console-launcher - [x] Update M4 or M5 release notes - [ ] Document new artifact with dependencies in https://github.com/junit-team/junit5#dependency-metadata ?  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2017-01-19T12:59:54Z","2017-03-12T14:19:57Z"
"","872","ParameterResolutionException when non-String arguments are used","## Overview  Converting arguments to [human readable formats](https://github.com/junit-team/junit5/commit/4116a6be2822df730a113dce611f0f88b6900b07#diff-bad02b6a1de0377075f17a70e70343e2R45) introduced a regression that caused following use-case to break: ``` @ParameterizedTest @MethodSource(""generateCollections"") void testCollections(Collection collection) {   assertOnCollection(collection); }  private static Iterator> generateCollections() {   Random generator = new Random();    // We'll run as many tests as possible in 500 milliseconds.   final Instant endTime = Instant.now().plusNanos(500000000);   return new Iterator>() {     @Override public boolean hasNext() {       return Instant.now().isBefore(endTime);     }      @Override public Collection next() {       // Dummy code       return Arrays.asList(""this"", ""that"", Instant.now());     }   }; } ``` Source: https://stackoverflow.com/questions/44275057/can-collections-iterables-streams-be-passed-into-paramterizedtests  ## Deliverables  - [x] Fix regression","closed","component: Jupiter,","sormuras","2017-05-31T10:30:35Z","2017-05-31T10:44:03Z"
"","719","Fix regression for class hierarchies without synthetic methods","## Overview  Code introduced by https://github.com/junit-team/junit5/commit/82174c15aba026a52a2566ee8643af89917fc1a1 broke standard support for test class hierarchies without bridge or synthetic methods present.  This commit fixes the regression by comparing the default and generic string representation of the upper method. If they are equal, the upper method does not shadow the lower one.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Platform,","sormuras","2017-03-10T09:19:30Z","2017-03-12T17:15:06Z"
"","870","Document dynamic container feature","## Overview  Closes #831  ## Deliverables  - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] Update user-guide  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Jupiter,","sormuras","2017-05-30T07:38:47Z","2017-06-08T18:11:30Z"
"","807","ConsoleLauncher --scan-classpath option fails on Java 9","## Overview  Classpath scanning fails for some implicit roots (only on Java 9):  ``` [...] Apr. 26, 2017 4:16:06 NACHM. org.junit.platform.commons.util.ClasspathScanner logWarning WARNUNG: Failed to load java.lang.Class for path [...\application-junit5-jdk9-demo\.\target\main\exploded\integration\integration\LegacyTest.class] during classpath scanning. java.lang.NoClassDefFoundError: integration/LegacyTest (wrong name: target/main/exploded/integration/integration/LegacyTest)         at java.base/java.lang.ClassLoader.defineClass1(Native Method)         at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:983)         at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:173)         at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:771)         at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:669)         at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:592)         at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:550)         at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:185)         at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:527)         at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:473)         at java.base/jdk.internal.loader.Loader.loadClass(Loader.java:492)         at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:527)         at java.base/java.net.FactoryURLClassLoader.loadClass(URLClassLoader.java:890)         at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:473)         at junit.platform.console.standalone/org.junit.platform.commons.util.ReflectionUtils.loadClass(ReflectionUtils.java:344)         at junit.platform.console.standalone/org.junit.platform.commons.util.ClasspathScanner.processClassFileSafely(ClasspathScanner.java:156)         at junit.platform.console.standalone/org.junit.platform.commons.util.ClasspathScanner.lambda$findClassesForPath$3(ClasspathScanner.java:141)         at junit.platform.console.standalone/org.junit.platform.commons.util.ClassFileVisitor.visitFile(ClassFileVisitor.java:41)         at junit.platform.console.standalone/org.junit.platform.commons.util.ClassFileVisitor.visitFile(ClassFileVisitor.java:24)         at java.base/java.nio.file.Files.walkFileTree(Files.java:2695)         at java.base/java.nio.file.Files.walkFileTree(Files.java:2767)         at junit.platform.console.standalone/org.junit.platform.commons.util.ClasspathScanner.findClassesForPath(ClasspathScanner.java:141)         at junit.platform.console.standalone/org.junit.platform.commons.util.ClasspathScanner.findClassesForUri(ClasspathScanner.java:125)         at junit.platform.console.standalone/org.junit.platform.commons.util.ClasspathScanner.scanForClassesInClasspathRoot(ClasspathScanner.java:103)         at junit.platform.console.standalone/org.junit.platform.commons.util.ReflectionUtils.findAllClassesInClasspathRoot(ReflectionUtils.java:501)         at junit.platform.console.standalone/org.junit.vintage.engine.discovery.ClasspathRootSelectorResolver.resolve(ClasspathRootSelectorResolver.java:33)         at junit.platform.console.standalone/org.junit.vintage.engine.discovery.ClasspathRootSelectorResolver.resolve(ClasspathRootSelectorResolver.java:22)         at junit.platform.console.standalone/org.junit.vintage.engine.discovery.JUnit4DiscoveryRequestResolver.lambda$resolveSelectorsOfSingleType$0(JUnit4DiscoveryRequestResolver.java:75)         at java.base/java.util.ArrayList.forEach(ArrayList.java:1378)         at junit.platform.console.standalone/org.junit.vintage.engine.discovery.JUnit4DiscoveryRequestResolver.resolveSelectorsOfSingleType(JUnit4DiscoveryRequestResolver.java:74)         at junit.platform.console.standalone/org.junit.vintage.engine.discovery.JUnit4DiscoveryRequestResolver.collectTestClasses(JUnit4DiscoveryRequestResolver.java:56)         at junit.platform.console.standalone/org.junit.vintage.engine.discovery.JUnit4DiscoveryRequestResolver.resolve(JUnit4DiscoveryRequestResolver.java:48)         at junit.platform.console.standalone/org.junit.vintage.engine.VintageTestEngine.discover(VintageTestEngine.java:64)         at junit.platform.console.standalone/org.junit.platform.launcher.core.DefaultLauncher.discoverEngineRoot(DefaultLauncher.java:130)         at junit.platform.console.standalone/org.junit.platform.launcher.core.DefaultLauncher.discoverRoot(DefaultLauncher.java:117)         at junit.platform.console.standalone/org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)         at junit.platform.console.standalone/org.junit.platform.launcher.Launcher.execute(Launcher.java:96)         at junit.platform.console.standalone/org.junit.platform.console.tasks.ConsoleTestExecutor.executeTests(ConsoleTestExecutor.java:65)         at junit.platform.console.standalone/org.junit.platform.console.tasks.ConsoleTestExecutor.lambda$execute$0(ConsoleTestExecutor.java:57)         at junit.platform.console.standalone/org.junit.platform.console.tasks.CustomContextClassLoaderExecutor.replaceThreadContextClassLoaderAndInvoke(CustomContextClassLoaderExecutor.java:41)         at junit.platform.console.standalone/org.junit.platform.console.tasks.CustomContextClassLoaderExecutor.invoke(CustomContextClassLoaderExecutor.java:31)         at junit.platform.console.standalone/org.junit.platform.console.tasks.ConsoleTestExecutor.execute(ConsoleTestExecutor.java:57)         at junit.platform.console.standalone/org.junit.platform.console.ConsoleLauncher.executeTests(ConsoleLauncher.java:85)         at junit.platform.console.standalone/org.junit.platform.console.ConsoleLauncher.execute(ConsoleLauncher.java:75)         at junit.platform.console.standalone/org.junit.platform.console.ConsoleLauncher.execute(ConsoleLauncher.java:48)         at com.github.forax.pro.plugin.tester@0.9/com.github.forax.pro.plugin.tester.TesterPlugin.executeConsoleLauncher(TesterPlugin.java:62)         at com.github.forax.pro.plugin.tester@0.9/com.github.forax.pro.plugin.tester.TesterPlugin.execute(TesterPlugin.java:53)         at com.github.forax.pro@0.9/com.github.forax.pro.Pro.execute(Pro.java:325)         at com.github.forax.pro@0.9/com.github.forax.pro.Pro.runAll(Pro.java:305)         at com.github.forax.pro@0.9/com.github.forax.pro.Pro.run(Pro.java:295)         at REPL.$JShell$17.do_it$($JShell$17.java:4)         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.base/java.lang.reflect.Method.invoke(Method.java:563)         at jdk.jshell/jdk.jshell.execution.DirectExecutionControl.invoke(DirectExecutionControl.java:198)         at jdk.jshell/jdk.jshell.execution.RemoteExecutionControl.invoke(RemoteExecutionControl.java:107)         at jdk.jshell/jdk.jshell.execution.DirectExecutionControl.invoke(DirectExecutionControl.java:108)         at jdk.jshell/jdk.jshell.execution.ExecutionControlForwarder.processCommand(ExecutionControlForwarder.java:134)         at jdk.jshell/jdk.jshell.execution.ExecutionControlForwarder.commandLoop(ExecutionControlForwarder.java:225)         at jdk.jshell/jdk.jshell.execution.Util.forwardExecutionControl(Util.java:76)         at jdk.jshell/jdk.jshell.execution.Util.forwardExecutionControlAndIO(Util.java:137)         at jdk.jshell/jdk.jshell.execution.RemoteExecutionControl.main(RemoteExecutionControl.java:70)  ?[36m.?[0m ?[36m+--?[0m ?[36mJUnit Jupiter?[0m ?[32m[OK]?[0m ?[36m| +--?[0m ?[36mApplicationPluginTests?[0m ?[32m[OK]?[0m ?[36m| | '--?[0m ?[34mloadedPluginListIsNotEmpty()?[0m ?[32m[OK]?[0m ?[36m| +--?[0m ?[36mApplicationVersionTests?[0m ?[32m[OK]?[0m ?[36m| | +--?[0m ?[34mmajorIsNine()?[0m ?[32m[OK]?[0m ?[36m| | '--?[0m ?[34mversion()?[0m ?[32m[OK]?[0m ?[36m| '--?[0m ?[36mReverseTests?[0m ?[32m[OK]?[0m ?[36m|   '--?[0m ?[34mreverse()?[0m ?[32m[OK]?[0m ?[36m'--?[0m ?[36mJUnit Vintage?[0m ?[32m[OK]?[0m  Test run finished after 40 ms [         5 containers found      ] [         0 containers skipped    ] [         5 containers started    ] [         0 containers aborted    ] [         5 containers successful ] [         0 containers failed     ] [         4 tests found           ] [         0 tests skipped         ] [         4 tests started         ] [         0 tests aborted         ] [         4 tests successful      ] [         0 tests failed          ]  [pro] DONE !          elapsed time 415 ms  ```  ## Deliverables  - [ ] Investigate and fix reason","closed","status: works-as-designed,","sormuras","2017-04-26T14:24:21Z","2017-04-27T20:13:37Z"
"","678","Remove deprecated members","## Overview  Changes like #620 created `@Deprecated` members. They should be removed in M5 or in GA.  Scope: entire source tree or public API?  ## Deliverables  - [x] Scan for deprecated members and remove them.","closed","component: Platform,","sormuras","2017-02-23T08:13:19Z","2017-04-27T11:25:47Z"
"","912","Ensure correct test class is supplied to extensions registered on outer classes","## Overview  Changes in #910 introduced a regression: the test class supplied via `ExtensionContext.getTestClass()` to extensions that are registered on outer test classes is no longer the test class where the extension is registered but rather the test class for the currently executing `@Nested` test class.  ## Deliverables  - [x] Ensure that the correct test class is supplied to extensions registered on outer test classes.","closed","component: Jupiter,","sbrannen","2017-07-04T10:06:36Z","2017-07-04T11:39:11Z"
"","849","Update JUnit 5 dependencies in the Users Guide.","## Overview  Changes dependency management for the ```maven-surefire-plugin``` in the Users Guide as described by #848.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] ~~There are no TODOs left in the code~~ - [ ] ~~Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc~~ - [X] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] ~~Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests)~~ - [ ] ~~Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html)~~ - [X] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [X] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","smoyer64","2017-05-09T15:42:58Z","2017-06-10T14:33:37Z"
"","322","Use variable ""request"" for TestDiscoveryRequest.","## Overview  Change the example in the documentation to use a more obvious name for the `TestDiscoveryRequest` variable  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","stefanbirkner","2016-06-20T12:00:26Z","2016-06-20T14:07:54Z"
"","845","Make Assertions.fail usable as an expression","## Overview  Change return value of `Assertions.fail` from `void` to ` V`, in order to make `fail` directly usable in places where an expression is needed. The original request can be found [here](https://github.com/forax/pro/commit/eb5f1b7b6df63c75ffa7a14a61d8d4c596b627bc#commitcomment-22058065).  Like: ``` public static  V fail(String message) {   AssertionUtils.fail(message);   return null; // will never return } ``` which would allow end-users to write: ```   @Test   void failUsableAsAnExpression() {     List list = new ArrayList<>();     long count = list.stream()         .peek(number -> fail(""peek should never be called""))         .filter(number -> fail(""filter should never be called""))         .map(number -> fail(""map should never be called""))         .sorted((n, m) -> fail(""sorted should never be called""))         .count();     assertEquals(0L, count);   } ``` without creating a lambda on their own.  ## Deliverables  - [x] Implement and test ` V fail()` for all 4 overloads of `Assertions.fail`","closed","component: Jupiter,","sormuras","2017-05-09T07:48:39Z","2019-07-19T19:32:40Z"
"","933","Build with maximum heap limit at Travis CI","## Overview  Build with maximum heap limit at Travis CI to prevent 'build error 137': out of memory  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","sormuras","2017-07-10T08:15:46Z","2017-07-10T10:00:38Z"
"","538","Gradle plugin will honor the build dir, and making extension more usable","## Overview  Before this change, there was an assumption that all users use the project directory as the buildDir. In some cases, they are re-mapped to a single buildDir at the root of the project to make management easier. This change uses the builDir from the project to set where the output will be.  Also to make the plugin nicer to use, users can set the reportsDir to be a GString (or any object really) and rely on the behavior of Project.file(..) to resolve it to the correct path.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","ethankhall","2016-10-06T15:54:00Z","2016-10-07T19:37:07Z"
"","169","Demonstrate migration path from JUnit 4 to JUnit 5","## Overview  Based on discussions I've had with developers in the community, it is apparent that some people fear an upgrade from JUnit 4 to JUnit 5. Aside from the fact that it's totally feasible to run JUnit 4 tests alongside JUnit 5 tests, we should still attempt to migrate an existing JUnit 4 test suite just to see where the hurdles are. ## Proposal  Demonstrate how to migrate from JUnit 4's `ExpectedException` Rule to a JUnit 5 Extension-based alternative. ## Food for Thought  Can this be achieved with simple search-and-replace?  Can a JUnit 5 extension be implemented that honors JUnit 4's `ExpectedException` transparently, without the need to modify a single line within test methods -- for example, by removing `@Rule` from the `ExpectedException` field and adding `@ExtendWith(SomeExpectedExceptionExtension.class)`? ## Related Issues - #343 ## Related Blogs - [How to Replace Rules in JUnit 5](http://www.codeaffine.com/2016/04/06/replace-rules-in-junit5/)","closed","component: Jupiter,","sbrannen","2016-03-02T18:50:26Z","2019-07-19T19:33:04Z"
"","325","Make DiscoveryRequest immutable.","## Overview  Avoid code duplication with `TestDiscoveryRequestBuilder`. Having two objects with similar responsibility is confusing, too. For the reader it is unclear which one to use.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: enhancement,","stefanbirkner","2016-06-20T15:23:54Z","2016-06-23T15:29:59Z"
"","759","Include junit-jupiter-params in standalone distro","## Overview  At the moment, the `junit-jupiter-params` is not part of the `junit-platform-console-standalone` artifact.  ## Deliverables  - [ ] Decide if we want to include params in standalone JAR","closed","component: Platform,","sormuras","2017-03-31T16:07:59Z","2019-07-19T19:32:40Z"
"","598","Prevent Java 9 on Travis CI from failing","## Overview  Assume that two tests using `Class::getPackage::getXyz()` are not executed on Java 9 -- until the reason why those methods return `null` is understood and fixed. Create new ticket to track this issue?  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2016-12-11T17:48:00Z","2016-12-12T00:47:13Z"
"","867","update assertj to v3.8.0","## Overview  assertj v3.8.0 basically contains some bug fixes, see http://joel-costigliola.github.io/assertj/assertj-core-news.html#assertj-core-3.8.0 for details.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---","closed","","epeee","2017-05-26T20:46:51Z","2017-05-27T18:02:06Z"
"","744","Introduce support for declarative test suites","## Overview  As requested in issue #681 (```Introduce junit-platform-suite-api module```), the annotations used for test discovery and selection in the ```JUnitPlatform``` runner have been refactored into the ```junit-platform-suite-api```.  This allows a purely JUnit 5 test suite to be defined declaratively, though it currently requires an alternate engine (as opposed to an extension).  This issue describes a generalized JUnit platform suite that's suitable for the Jupiter test engine as well as any others that might be chosen.  It's my opinion that unit tests rarely require test suites, but it becomes far more common when integration, system and acceptance tests are being executed due to the very common integration with external systems that should only be initialized before the entire test run.  Examples of resources that can be safely shared among tests are database connection pools (or really any connection pool), test frameworks that require significant set-up time (e.g. GWT test suites eliminate 20s of HtmlUnit set-up time for each test - it's only incurred once at the beginning of each suite).  The examples shown below indicate how the ```@Suite``` annotation can be used in conjunction with those already in the ```junit-platform-suite-api``` module.  Originally I'd also defined the ```@BeforeSuite``` and ```@AfterSuite``` annotations but after further consideration decided that since suites are really just an arbitrary collection of indeterminately nested test containers, it would be better if the ```@BeforeAll``` and ```@AfterAll``` annotations were contextual (nested in the same way the hierarchy would be presented in the test tree).  I've also assumed that these annotations no longer require the static modifier as discussed elsewhere.  Imagine if you will a set of acceptance tests that have a custom reporting mechanism that should be configured for the entire test run.  Included within this outer suite is a set of tests that require a database connection pool and a different set of tests that require an LDAP connection pool.  The top-level suite definition for the acceptance tests might look something like:  ```java @Suite @IncludeEngines(""jupiter-engine"") // not required if there's only one engine on the classpath @IncludeClassNamePatterns("".*AcceptanceTestSuite$"") public class AcceptanceTestSuite {      @BeforeAll     void setUp() {         ... // code to set-up custom test reporting     }      @AfterAll() {     void tearDown() {         ... // code to tear-down custom test reporting     }  } ```  There are two notable characteristics of this test suite:  1. It specifies which engine will be used for the entire container/test hierarchy (assuming there is more than one). 2. It includes potentially numerous other test suites as sub-containers which can each have their own contextual set-up and tear-down.  A child suite for tests that require a database connection pool might look something like this:  ```java @Suite @IncludeTags({""integration"", ""database""}) @IncludeClassNamePatterns("".*IT$"") public class DatabaseAcceptanceTestSuite {      @BeforeAll     void setUp() {         ... // code to set-up the database connection pool     }      @AfterAll() {     void tearDown() {         ... // code to tear-down the database connection pool     }  } ```  If run under Maven, test classes that end in ""IT"" would be run using the ```maven-failsafe-plugin```.  If there are other classes of integration tests not run during acceptance testing it would also be necessary to make sure the acceptance test classes were not run (as they'd fail without the suite's set-up methods).  ## Feature Request  Provide the means for arbitrarily nested, declarative tests suites in JUnit 5 including the execution of set-up and tear-down methods  ## Related Issues  - #330  - #456 - #746 - #687 (perhaps superseded by this issue) - #964  - [Eclipse IDE issue](https://bugs.eclipse.org/bugs/show_bug.cgi?id=511183) - #1243  ## Deliverables  - [ ] TBD","closed","type: new feature,","smoyer64","2017-03-22T21:43:34Z","2021-05-13T12:33:36Z"
"","602","Provide additional context in error messages","## Overview  As requested I am opening a new issue on this. See https://github.com/junit-team/junit5/issues/586#issuecomment-266522369 for background.  I'm new with JUnit, and my early attempts have been frustrated by messages such as:  `PreconditionViolationException: Could not load class with name: DirectoryTest`  Well, WHY couldn't you load the class??  I'm left trying to guess what the problem could be.  It seems to me that a lot could be done to make error messages actually helpful.   ## Related Issues  - #1666  ## Deliverables  - [ ] Where possible, provide additional context in error messages or log exceptions (e.g., in `ReflectionUtils`).","closed","theme: diagnostics,","RobLewis","2016-12-13T19:28:38Z","2018-11-09T19:12:19Z"
"","942","Ensure that tags are trimmed","## Overview  As purported in #927, it would appear that we do not consistently trim user-supplied tags.  ## Deliverables  - [x] Investigate the validity above the above claim.   - See _Analysis_ and _Correction_ comments below. - [x] Ensure that individual tags supplied to a `TagFilter` are trimmed. - [x] Ensure that individual tags supplied via `@Tag` are trimmed.","closed","component: Platform,","sbrannen","2017-07-12T20:22:35Z","2017-07-13T14:38:13Z"
"","742","Introduce lifecycle support for objects stored in ExtensionContext.Store","## Overview  As mentioned in https://github.com/junit-team/junit5/issues/710#issuecomment-287634552, JUnit Jupiter should ideally have lifecycle support for objects stored in the `ExtensionContext.Store`.  For example, when the execution of a given level in the test execution hierarchy has completed, we should properly _close_ the execution context and any objects within it.  ## Deliverables  - [x] Introduce lifecycle support for objects stored in `ExtensionContext.Store`.   - Specifically, for objects that implement `Closeable` or `AutoCloseable`.","closed","component: Jupiter,","sbrannen","2017-03-20T17:08:38Z","2019-07-19T19:32:39Z"
"","483","Migrate to dedicated Degraph Gradle plugin","## Overview  As mentioned by @oehme in #481:  > [He's] working on a [fix](https://github.com/oehme/junit5/commit/1228fd1fefec6623ef57e48364cde340f5b47e51), which is blocked on a DeGraph [issue](https://github.com/schauder/degraph/issues/67). Feel free to up-vote it :) ## Deliverables - [x] Migrate to a dedicated Gradle plugin for Degraph once such a plugin exists.","closed","theme: build,","sbrannen","2016-08-27T12:07:35Z","2018-07-27T20:04:47Z"
"","712","Add optional caption to ReportEntry","## Overview  As a followup from #664, add an optional caption to describe a test report map entry set like:  `TestReporter.publishEntry(""user table"", Map.of(...));`  which could yield in `--details tree` mode: ```    ├─ TestReporterDemo ✔    │  ├─ reportSingleValue(TestReporter) ✔    │  │     a key = `a value` @ 2017-03-07T22:12:59.510     │  └─ reportSeveralValues(TestReporter) ✔    │        user table @ 2017-03-07T22:12:59.514    │           user name  = `dk38`    │           award year = `1974` ```  ## Deliverables  - [ ] Enhance `ReportEntry` to store an optional caption of type `String` and add `void publishEntry(String caption, Map values);` to `TestReporter`. - [ ] Adopt printing of reports to emit the caption, if present.","closed","status: stale,","sormuras","2017-03-07T22:21:18Z","2021-06-19T12:50:12Z"
"","679","Make Jupiter tests package private","## Overview  Apply JUnit Jupiter feature supporting package private test classes and methods to our Jupiter tests.  Example: https://github.com/junit-team/junit5/blob/master/junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/DefaultMethodTests.java#L31  ## Deliverables  - [x] Remove `public` from all Jupiter test classes and methods.","closed","component: Jupiter,","sormuras","2017-02-23T08:22:32Z","2019-03-18T21:26:21Z"
"","930","Apply `final` modifiers to Color static instances","## Overview  Although the `static` instances in the `Color` class are effectively constants, they aren't declared as idiomatic constants, so they're technically mutable. This PR ensures that they are proper constants.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Platform,","jbduncan","2017-07-10T00:43:06Z","2017-07-25T15:59:01Z"
"","956","Restrict allowed characters in tags","## Overview  Although tags are currently _trimmed_ (see #942), they are otherwise allowed to contain any type of character. However, this makes it more difficult to reason about a tag expression language as proposed in #927 and can lead to subtle configuration errors.  ## Related Issues  - #927  - #942   ## Deliverables  - [x] Disallow [whitespace](https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#isWhitespace-int-) and [control characters](https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#isISOControl-int-) within tags, after trimming.","closed","theme: discovery,","sbrannen","2017-07-17T11:02:54Z","2017-07-18T15:57:39Z"
"","13","Provide mechanism to order the sequence of tests","## Overview  Although it is typically discouraged, having a way to order tests is useful to some people. The JUnit 4 `@FixMethodOrder` annotation [specifically and deliberately](https://github.com/matthewfarwell/junit/commit/c610a49727858597d9a10289bed0a0174053a69f#diff-429e0417e6fa5ece80ea7817add1daa7R46) makes it impossible to implement a simple ordering scheme, forcing users who want/need this to resort to method names like `test245_ensureReasonableTestName()`.  ## Proposal  - The minimal ""requirement"" would be to allow users to write their own `MethodSorter` for `@FixMethodOrder` - A reasonable implementation would be to allow `@FixMethodOrder(ORDERED)`, and then `@Order(integer)` to specify individual tests. Tests could be run from smallest number to highest, with non-annotated methods having a default of 0. Methods with the same order could be run in parallel; different order tiers could not.  ## Related Issues  - #48  - #607  - #884  - #1707  ## Deliverables  - [x] Introduce a mechanism for ordering _testable_ methods within JUnit Jupiter. - [x] Validate collection of methods ordered by an extension; log warning or error if methods were added or removed. - [x] Introduce built-in support for alphanumeric ordering. - [x] Introduce built-in support for `@Order` based ordering. - [x] Introduce built-in support for random ordering. - [x] Introduce _Configuration Parameter_ for setting the seed used in random ordering. - [x] Test ordering support in top-level classes. - [x] Test ordering of `@Test`, `@TestFactory` and `@TestTemplate` methods. - [x] Test ordering support in `@Nested` classes. - [x] Test ordering support in conjunction with parallel test execution. - [x] Extract `junit.jupiter.execution.order.random.seed` constant and document it. - [x] Write Javadoc for all new types. - [x] Update `@API` declarations for types with changed visibility, etc. - [x] Document new features in User Guide. - [x] Document new features in Release Notes.  ### Out of Scope  - ❌ Consider introducing a mechanism for ordering tests with the JUnit Platform -- potentially at a later date in conjunction with a separate dedicated issue.","closed","type: new feature,","elygre","2015-11-18T09:24:47Z","2020-07-04T15:09:50Z"
"","806","Revise ClassLoader lookups across the platform","## Overview  Although current use of `ClassLoaderUtils.getDefaultClassLoader()` works for the most common class loading scenarios, it is not always appropriate to default to using the thread context `ClassLoader` (TCCL) when loading user types via reflection.  This issue is inspired by the issues discussed in #805 and serves as an umbrella issue for potential class loading issues across the platform.  ## Related Issues  - #201  - #805   ## Comparison to class loading in Spring  If we take inspiration from the Spring Framework, we can see that `org.springframework.util.ClassUtils.forName(String, ClassLoader)` accepts a user-supplied `ClassLoader` and falls back to the ""default ClassLoader"" only if the supplied `ClassLoader` is `null`. For loading services, Spring does not use Java's `ServiceLoader` mechanism but rather its own `SpringFactoriesLoader` which performs the same task as Java's `ServiceLoader` but with explicit control over which `ClassLoader` is used. Note that `SpringFactoriesLoader` delegates to `org.springframework.util.ClassUtils.forName(String, ClassLoader)` to actually load the service class.  ## Initial Analysis  JUnit does not necessarily need the flexibility of `SpringFactoriesLoader`, but for certain scenarios we will likely have to supply a custom `ClassLoader` instead of relying on the ""default ClassLoader"" which currently is typically the thread context ClassLoader (TCCL).  Supplying `getClass().getClassLoader()` is likely a viable option. However, we should not change the implementation of `ClassLoaderUtils.getDefaultClassLoader()`. Rather, we should simply use it less often and then only as a fallback.  FWIW, we actually did have the foresight to create `org.junit.platform.commons.util.ReflectionUtils.loadClass(String, ClassLoader)`, but... we never supply it anything other than the default ClassLoader. 😉   ## Use Cases to Investigate  The following use cases should be investigated to determine how best to look up the `ClassLoader` to use.  - `TestEngine` loading in `ServiceLoaderTestEngineRegistry` - `TestExecutionListener` loading in `ServiceLoaderTestExecutionListenerRegistry` - Jupiter `Extension` loading  in `ExtensionRegistry#registerAutoDetectedExtensions` - Additional classpath entries in `ConsoleTestExecutor#createCustomClassLoader` - `ClasspathScanner` configuration/instantiation in `ReflectionUtils` - `ReflectionUtils#loadClass(String)`  ## Deliverables  - [ ] For each of the aforementioned _Use Cases to Investigate_, determine how best to look up the `ClassLoader`. - [ ] Use the `ClassLoader` for the current framework class (e.g., via `getClass().getClassLoader()`) instead of `ClassLoaderUtils.getDefaultClassLoader()` where appropriate. - [ ] Ensure that tools have the ability to set the thread context `ClassLoader` (TCCL) where necessary.","open","theme: discovery,","sbrannen","2017-04-25T16:58:54Z","2022-06-21T15:38:56Z"
"","932","Prevent subclassing of a utilities class","## Overview  Although `ClasspathScanningSupport` is an `@API(Experimental)` utilities class, it can be subclassed, which doesn't seem to make sense to allow. This PR ensures that it cannot be subclassed.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Platform,","jbduncan","2017-07-10T00:57:21Z","2017-07-10T15:50:00Z"
"","913","Introduce getRequired*() methods in the ExtensionContext API","## Overview  Along the lines of the work performed in commits 0836f8f28601d1d27d07ad302c6aa1ef9f2ab023 and 7b9267e3665c8550f4d2c9fda4cc6ce24e054cff, it would be beneficial to extension authors to provide similar `getRequired*()` methods for things like the test class, test instance, and test method.  ## Deliverables  - [x] Introduce `getRequiredTestClass()` method in the `ExtensionContext` API. - [x] Introduce `getRequiredTestInstance()` method in the `ExtensionContext` API. - [x] Introduce `getRequiredTestMethod()` method in the `ExtensionContext` API. - [x] Revert changes in 7b9267e3665c8550f4d2c9fda4cc6ce24e054cff so that the newly introduced convenience methods are used instead. - [x] Update release notes accordingly.","closed","component: Jupiter,","sbrannen","2017-07-04T10:39:04Z","2017-07-10T16:36:17Z"
"","644","Update documentation regarding exclude classname option","## Overview  After-math of https://github.com/junit-team/junit5/pull/630 adding information regarding `--exclude-classname` option  to the user documentation and release notes.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Jupiter,","sormuras","2017-02-07T09:20:16Z","2017-03-12T14:25:29Z"
"","745","Unmappable character for encoding Cp1250","## Overview  After a fresh **git clone** running **gradlew clean assemble** fails with following error.  > E:\Projects\Git\java\junit5\junit-jupiter-api\src\main\java\org\junit\jupiter\api\Assertions.java:907: error: unmappable character for encoding Cp1250 >          * Ôöé  Ôöé  Ôöé     status: Ôť? FAILED > > E:\Projects\Git\java\junit5\junit-jupiter-api\src\main\java\org\junit\jupiter\api\AssertLinesMatch.java:111: error: unmappable character for encoding Cp1250 >                                                 fail(expectedLines, actualLines, ""fast-forward(Ô?×) didn't find: `%s`"", snippet(expectedLine));  This happened with Intellij IDEA 2017.1 and gradle wrapper 3.4.1. I tried to set the encoding for whole project in IDEA but without any effect. Adding **options.encoding ""UTF-8""** to **javadoc** resolved the issue. ``` javadoc {     options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED     options.author = true     options.header = project.name     options.addStringOption('Xdoclint:html,syntax', '-quiet')     options.encoding ""UTF-8"" }","closed","theme: build,","Januson","2017-03-22T21:45:57Z","2017-03-23T17:51:29Z"
"","670","Adds alternate runners for the documentation examples per #665.","## Overview  Adds the ability to run the documentation example tests and demonstrations via the console and Maven (in addition to the native ability to run them via Gradle).  See #665 for more details and a full task list.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] There are no TODOs left in the code - [ ] ~~Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc~~ - [X] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] ~~Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests)~~ - [ ] ~~Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html)~~ - [ ] Change is documented in the ~~[User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes)~~ documentation project's README.md. - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","status: declined,","smoyer64","2017-02-20T20:44:05Z","2017-03-12T15:20:21Z"
"","718","Inheriting nested tests","## Overview  Adds a failing test demonstrating the missing inheritance of nested test classes as described in #717.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [ ] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","status: superseded,","nipafx","2017-03-10T08:01:33Z","2020-09-08T18:30:05Z"
"","740","Remove deprecated Launcher.execute() method","## Overview  Addressing issue #628 with PR #739 marked the old single-parameter `Launcher.execute(LauncherDiscoveryRequest launcherDiscoveryRequest)` as deprecated.  Remove this method and revert all explicit `Launcher.execute(request, new TestExecutionListener[0])` invocations that were introduced by #739.  ## Deliverables  - [x] Revert https://github.com/junit-team/junit5/commit/cb6ca6823ac854165246caebd6dcafe2e085d981 before RC1","closed","component: Platform,","sormuras","2017-03-18T19:48:11Z","2017-07-25T21:18:09Z"
"","852","Add enum constant selection mode attribute to EnumSource","## Overview  Addresses #850  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","sormuras","2017-05-10T13:57:43Z","2017-05-11T20:27:07Z"
"","813","Add dynamic container support in @TestFactory methods","## Overview  Addresses #695 and #604   Add dynamic container support in @TestFactory methods.  https://travis-ci.org/junit-team/junit5/builds/228235319#L596 is generated by:  ```java Stream.of(""A"", ""B"", ""C"") 	.map(input -> dynamicContainer(""Container "" + input, Stream.of( 		dynamicTest(""not null"", () -> assertNotNull(input)), 		dynamicContainer(""properties"", Stream.of( 			dynamicTest(""length > 0"", () -> assertTrue(input.length() > 0)), 			dynamicTest(""not empty"", () -> assertFalse(input.isEmpty())) 		)) 	))); ```  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Review and polish introduced methods - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Jupiter,","sormuras","2017-04-28T08:55:39Z","2017-05-03T11:39:16Z"
"","739","Add Launcher.execute(Request, Listener…) overload","## Overview  Addresses #628 by adding an overloaded execute(LauncherDiscoveryRequest, TestExecutionListener) method that uses the supplied TestExecutionListeners in addition to already registered listeners but only for the supplied LauncherDiscoveryRequest.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","component: Platform,","sormuras","2017-03-18T10:47:34Z","2017-03-19T16:33:56Z"
"","441","Document interoperability with third-party assertion Matchers in User Guide","## Overview  Added a paragraph documenting the use of 3rd party matchers in JUnit Jupiter in section 3.4 of the user guide.  This resolves #428   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","toniedzwiedz","2016-07-26T22:56:36Z","2016-07-28T14:55:37Z"
"","802","Added favicon to user guide and javadocs.","## Overview  Added a docinfo file in which there is a link to the image to be used as a favicon for the user guide and the javadoc.    Deliverables  - [x] Add a favicon to the users guide. - [x] Add a favicon to the javadocs.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---","closed","theme: web site,","Andrei94","2017-04-21T18:47:11Z","2017-06-16T15:38:50Z"
"","962","Add Java 9 compatibility documentation","## Overview  Add Java 9 compatibility documentation  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","sormuras","2017-07-18T16:56:16Z","2017-07-18T18:44:34Z"
"","920","Add info the parameters must not be null.","## Overview  Add info the parameters must not be null.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","stefanbirkner","2017-07-06T19:19:59Z","2017-07-06T19:30:27Z"
"","903","Add getting help section with links to SO and Gitter","## Overview  Add getting help section to README.md file and the User Guide with links to SO and Gitter.  Closes #707  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: documentation,","sormuras","2017-06-29T08:11:52Z","2017-06-29T15:49:51Z"
"","595","Add reference to docker extension","## Overview  Add a link to an extension that allow the user to start docker containers from their tests.  JUnit5-Docker has just been pushed to maven contral as a release candidate for version 1.0.0. It only implements one feature : start one container from your test. The idea is to have something that works early. More features to come.  I think it will be a very useful extension and adding the reference to the documentation would show that an extension can do something else than integrate with another framework.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Jupiter,","FaustXVI","2016-12-08T12:57:25Z","2016-12-09T02:27:21Z"
"","220","StringUtils: clean up nullSafeToString","## Overview  A minor cleanup in `StringUtils#nullSafeToString`: Streaming and joining an empty class list will return an empty string (`""""`), so explicitly checking for it redundant.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","mureinik","2016-04-02T09:20:57Z","2016-04-10T12:30:57Z"
"","184","Engines for DefaultLauncher must have different ids.","## Overview  A `DefaultLauncher` with `TestEngine`s that have equal ids is unusable. It fails to discover or execute tests. Hence it should not be possible to create such a launcher.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: enhancement,","stefanbirkner","2016-03-10T17:00:53Z","2016-03-10T19:46:15Z"
"","682","Apply IntelliJ-suggested code changes","## Overview  `ToStringBuilder.java` was unnecessarily creating both a `StringBuilder` and a `Stream` within `toString()`, where regular string concatenation and `String.join()` would have been equally performant and probably more readable.  `XmlReportWriter.java` was also creating a `StringBuilder` where regular string concatenation would have worked just as well. Whether it is more readable though is up for debate.  `TestExecutionListenerRegistry.java` was adding things to a collection via manual looping, where calling `Collections.addAll` would have been shorter and probably more readable.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","type: enhancement,","jbduncan","2017-02-23T15:45:52Z","2017-02-23T19:14:06Z"
"","686","Ignore all synthetic methods in ReflectionUtils#findMethod(s)","## Overview  `ReflectionUtils#findMethods` did already filter bridge methods, but let other synthetic methods through. For example a field like:    Predicate allNames = name -> true;  may yield a synthetic method to be declared in the encapsulating class. Now, all synthetic methods (including bridge methods) are filtered.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","sormuras","2017-02-24T17:13:05Z","2017-02-24T17:23:45Z"
"","949","Move @TestFactory return type validation to IsTestFactoryMethod","## Overview  `IsTestMethod` and `IsTestTemplateMethod` currently validate that `@Test` and `@TestTemplate` methods have a `void` return type; however, `IsTestFactoryMethod` only validates that `@TestFactory` methods do _not_ have a `void` return type. Consequently, `@TestFactory` return types are not validated during the discovery phase.  On the other hand, `@TestFactory` return types are in fact validated during the execution phase, but this is late and inconsistent with the behavior for all other types of _testable_ methods.  ## Related Issues  - #242  - #835   ## Deliverables  - [ ] Move `@TestFactory` method return type validation from `TestFactoryTestDescriptor` to `IsTestFactoryMethod`. - [ ] Enable `@Disabled` tests in `IsTestFactoryMethodTests`.","open","theme: diagnostics,","sbrannen","2017-07-15T13:08:12Z","2022-04-09T20:43:22Z"
"","792","Catch exceptions in DefaultLauncher and proceed","## Overview  `DefaultLauncher` now catches and reports exceptions from engines and proceeds with other engines. This applies to both the discovery phase and execution phase.  Addresses #750   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: discovery,","sormuras","2017-04-13T20:46:11Z","2017-04-15T10:27:04Z"
"","797","ConsoleLauncher implements ToolProvider","## Overview  `ConsoleLauncher` should implement `java.util.spi.ToolProvider`: _an interface for command-line tools to provide a way to be invoked without necessarily starting a new VM._  For details, see https://docs.oracle.com/javase/9/docs/api/java/util/spi/ToolProvider.html  ## Deliverables  - [x] `name()` = `""junit""`","closed","theme: modules,","sormuras","2017-04-19T14:24:52Z","2019-09-29T19:20:32Z"
"","901","Merge [Container|Test]ExtensionContext into ExtensionContext","## Overview  `ConatinerExtensionContext` is already just a _marker interface_, and with the changes being introduced in #419 the `TestExtensionContext` will soon contain a single `Optional getTestException()` method.  With these points in mind, now may be an opportune time to take the plunge and completely remove both the `ConatinerExtensionContext` and `TestExtensionContext` APIs and allow extension authors to rely solely on the `ExtensionContext` API.  ## Related Issues  - #419  - #625  - #899   ## Deliverables  - [x] Move `getTestException()` from `TestExtensionContext` to `ExtensionContext`.   - [x] Potentially rename `getTestException()` to `getExecutionException()` in preparation for #899. - [x] Remove the `ContainerExtensionContext` API. - [x] Remove the `TestExtensionContext` API. - [x] Merge `ContainerExecutionCondition` and `TestExecutionCondition` into a single, general purpose `ExecutionCondition` whose method accepts a sole `ExtensionContext` argument.","closed","component: Jupiter,","sbrannen","2017-06-28T16:11:25Z","2019-07-19T19:32:41Z"
"","676","Create two versions of the javadocs - link to the API from the users guide","## Overview  ```@Test``` writers as well as ```Extension``` developers shouldn't be using classes outside of ```org.junit.jupiter.api.*```.  While introducing developers of both ilks to JUnit 5, I've found that it would be far easier to have the javadocs they're using for reference to the users guide.  Since the users guide provides content that almost exclusively deals with the API, it should probably link to a more limited set of javadocs.  (as should the link from http://junit.org/junit5).  On the other hand, core developers and those of us who are trying to understand how it works under the hood definitely find the full set of javadocs useful.  The link to these javadocs can be a little more hidden - I'd suggest the link to the full javadocs be published in the README.md file at the top of the JUnit 5 repository.  - (X) **Feature request.** Provide a more limited set (and less intimidating) set of javadocs to ```@Test``` writers and ```Extension``` developers to facilitate platform adoption.  JUnit 5 may be much bigger (and better abstracted) than JUnit 4, but the surface area that a new user needs to learn is nicely limited to the API.  ## Deliverables  - [ ] Publish the API javadocs for most JUnit 5 users. - [ ] Create the merged version of the javadocs for JUnit 5 developers","closed","status: superseded,","smoyer64","2017-02-22T21:09:59Z","2020-01-19T18:48:57Z"
"","729","Classes containing @TestTemplate methods are detected as Test classes","## Overview  `@TestTemplate` methods are now recognized as **test** ones by the Discovery phase (see `DiscoverySelectorResolver`).  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---","closed","component: Jupiter,","ledoyen","2017-03-12T11:58:07Z","2017-03-29T21:14:31Z"
"","680","@selectpackages and @selectclasses are not working in maven test","## Overview  `@SelectPackages` and `@SelectClasses` tags are not getting parsed with maven test command.Though it is working fine in IDE.  - ( ) **Question.** http://stackoverflow.com/questions/42392512/running-test-suite-is-not-working-in-junit5-through-maven - ## Deliverables  - [ ] ...","closed","component: Platform,","sankarpadhy","2017-02-23T12:16:24Z","2017-02-23T19:36:13Z"
"","735","Invoke lifecycle hooks around each dynamic test","## Overview  `@BeforeEach`, `@AfterEach` and associated callback extensions run once around `@TestFactory` methods.  The proposition here is to run these hooks **around each dynamic tests** created by the factory method.  Hooks are not invoked around the factory method, because it is a container and type (container or test) cannot be determined from a hook implementation.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: reporting,","ledoyen","2017-03-13T22:24:52Z","2017-05-07T14:20:52Z"
"","713","Update dependencies","## Overview  - Update dev dependencies (AssertJ, Log4J, Mockito) - Update Spotless and use new removeUnusedImports() feature - Update Gradle plugins  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [X] There are no TODOs left in the code - [X] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [X] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [X] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [X] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [X] -Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes)- - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","theme: build,","marcphilipp","2017-03-08T19:25:24Z","2017-03-12T17:15:22Z"
"","559","Move implementation of Assertions into separate classes","## Overview  - Split up the implementation of Assertions into multiple classes as proposed in the [comment](https://github.com/junit-team/junit5/issues/509#issuecomment-254938200) to #509  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Jupiter,","signed","2016-11-03T23:22:25Z","2016-11-09T13:16:48Z"
"","570","PackageNameFilter for including and excluding package names","## Overview  - Solves #313   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","theme: build,","bechte","2016-11-16T20:37:12Z","2016-11-30T07:51:57Z"
"","784","set outdir instead of imagesoutdir","## Overview  - set outdir instead of imagesoutdir - allows imagesdir for PDF can be derived from default imagesdir  You want to avoid setting imagesoutdir in the plugin configuration because then you have to remember to update it if you change the imagesdir in the document. Instead, you want to set the outdir attribute based on the plugin setting. That way, you can build the imagesdir for PDF based on the outdir and the default imagesdir. This mimics what Asciidoctor Diagram does internally.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---","closed","theme: documentation,","mojavelinux","2017-04-09T02:01:10Z","2017-04-09T12:20:12Z"
"","875","Cleanup module names","## Overview  - Rename sub-project directory from `junit-jupiter-migration-support` to `junit-jupiter-migrationsupport` and treat it as a special case in the integration test. - Move shaded joptsimpel to `org.junit.platform.console.shadow.joptsimple` - Remove `AutomaticModuleName` from standalone JAR and skip it when testing the module names.  Addresses requested changes in #866   ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  ---  ### Definition of Done  - [x] There are no TODOs left in the code - [x] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed - [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) - [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html) - [x] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes) - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass","closed","","sormuras","2017-06-07T08:45:59Z","2017-06-07T13:00:55Z"
"","573","Remove unused constant EXCEPTION_MESSAGE_NO_ENGINE and fix typo","## Overview  - Remove unused constant `static final String EXCEPTION_MESSAGE_NO_ENGINE ` - Fix typo change 'pararameters' to 'parameters'  ##### Checklist - [x] Run `gradle clean test` - [x] All tests are passing  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","component: Platform,","AxelMonroyX","2016-11-24T05:23:11Z","2016-12-09T05:45:11Z"
"","627","Remove includeClassNamePattern(String) with all dependencies","## Overview  - Remove deprecated ```includeClassNamePattern(String)``` and ```@IncludeClassNamePattern```as described in #547.  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","","bechte","2017-01-11T06:00:25Z","2019-01-24T16:28:38Z"
"","656","Feature:  Add fail methods that accept Throwable to Assertions","## Overview  - (X) **Feature request.** See issue #655.  As discussed in issue #655, providing ```Assertions.fail()``` methods that accept parameters of type ```Throwable``` provides convenience for certain test patterns.  ## Deliverables  Add the following methods to the ```Assertions``` class:  - [x]  ```Assertions.fail(String message, Throwable cause);``` - [x]  ```Assertions.fail(Throwable cause);```","closed","","smoyer64","2017-02-17T13:02:32Z","2017-02-22T12:06:44Z"
"","687","Introduce an extension point to allow test container creation","## Overview  - (X) **Feature request.**  When implementing a JUnit 5 extension to provide ```@Suite```, ```@BeforeSuite``` and ```@AfterSuite```, I had to create a new test engine that recreates a lot of the discovery mechanisms already provided by the Jupiter test engine.  Ultimately the test execution is delegated to a specified engine, so all this engine really does is alter the way discovery works.  There are currently no ```Extension``` points in the Jupiter API that interact with the discovery process - they're all focused on the contextual execution of the already discovered hierarchy.  I'd like to propose the following new Jupiter API types (but I'd be happy with the equivalent functionality in any form):  -   ```@TestContainer``` -   ```ContainerDescriptorFactory```  I'm picturing the ```@TestContainer``` annotation being used like this:  ``` @TestContainer(MyContainerDescriptorFactory) ```  And the ```@Suite``` example I used as the basis for this request becomes a composed annotation like this:  ``` @Retention( ... ) @Target( ... ) @TestContainer(SuiteFactory.class) public @interface Suite ```  The ```TestDescriptorFactory``` would be a functional interface with the following method:  ```     void addTestContainer(TestDescriptor parent); ```  When called, this method would add one or more children to the parent ```TestDescriptor```.  There are a couple of beautiful (in my opinion) features of this design:  1.  A child ```TestDesciptor``` created by the factory can itself have an arbitrary test hierarchy, perhaps even by invoking other ```@TestContainer```s to help build the structure. 2.  At an arbitrary depth, ```@BeforeSuite/@AfterSuite``` become meaningless.  Every ```@TestContainer``` can simply execute ```@BeforeAll/@AfterAll``` callbacks at their own level in the test hierarchy and the set-up and tear-down is automatically nested correctly. 3.   It's not as inherently dangerous as the DiscoveryCallback described in #354 and implemented in #577. 4.  Building this into the existing ```HierarchicalTestEngine``` is trivial as it simply delegates the addition of child containers (and their contents) to the factory.  This also leaves me with a few questions:  1.   What happens in non-hierarchical test engines? 2.   How do engines that execute test concurrently (Surefire's default) make sure they don't multi-thread a hierarchy? 3.   Should ```@TestContainer``` be marked ```@Testable```?  I can argue both ways but I can see IDEs that inspect the source getting confused.  ## Deliverables (this is a long-shot at being correct on the first pass)  - [ ] Add the `@TestContainer` annotation - [ ]  Create the `ContainerDescriptorFactory` - [ ]  Move the `TestDescriptor` interface to the `junit-jupiter-api` project  Also relates to #19.","closed","status: stale,","smoyer64","2017-02-24T19:06:38Z","2021-06-03T22:11:36Z"
"","685","Non-public types should have @API(Internal)","## Overview  - (X) **Consistency.**  The javadocs for @API states:  >   Annotates public types within JUnit to indicate their level of stability and how they are intended to be used.  If the annotation is present on a type, it is considered to hold for all public members of the type as well. A member is allowed to declare a different API.Usage of lower stability.  It occurs to me that a public class with only non-public constructors is effectively internal whether or not the API annotation says so.  Classes in this state could however have public static members with API annotations that are not internal-only.  Clarifying the precise rules for the API annotations use is important for the completion of #144 (which I intend to return to when I'm done with #343).  One additional question is whether ```@API(Internal)``` types should show up in the ""developer javadocs"" (#676).  There are currently classes with package access-levels that are marked as ```@API(Experimental)``` - I've mostly noticed them in the  ```org.junit.jupiter.engine.discovery``` package:  -   ```JavaElementsResolver``` -   ``` MethodFinder``` -   ```TestContainerResolver``` -   ```TestFactoryMethodResolver``` -   ```TestMethodResolver```  ## Deliverables  - [ ] Clarify ```@API``` usage. - [ ] Mark non-public classes as ```@API(Internal)```","closed","","smoyer64","2017-02-24T13:59:23Z","2017-09-17T15:05:39Z"
"","659","Vintage engine does not report multiple errors collected by ErrorCollector","## Overview  - (X) **Bug report.** When JUnit 4 tests are run using the vintage engine, failures collected by ```ErrorCollector``` are not reported as a list of failures as shown below.  Test code for this issue is provide in the javadocs for the JUnit 4 ```ErrorCollector``` at http://junit.org/junit4/javadoc/latest/org/junit/rules/ErrorCollector.html.  ``` │  ├─ example.testrule.ErrorCollectorVintageDemo │  │  ├─ example ✘  Expected: not a string containing ""ERROR!""      but: was ""ERROR! - something is broke"" ```  ## Deliverables  - [ ]  All failures collected by the ```ErrorCollector``` should be displayed.  The output below shows how the same test executed via the JUnit 4 directly produces the expected three results.  ``` java.lang.Throwable: first thing went wrong java.lang.Throwable: second thing went wrong java.lang.AssertionError:  Expected: not a string containing ""ERROR!""      but: was ""ERROR! - something is broke"" ```","closed","component: Vintage,","smoyer64","2017-02-17T17:19:34Z","2017-02-26T18:22:41Z"
"","658","AssertionFailedError interrupts test tree in Console and Gradle","## Overview  - (X) **Bug report.** When assertions fail during a test run and provide a multi-line message (as is common with the Hamcrest assertions and matchers, the test tree is interrupted when running via the console or Gradle.  This problem is also seen when ```assertAll()``` throws a ```MultipleFailuresError```.  The example below demonstrates both these failure conditions:  ``` @Test public void assertAllExample() { 	assertAll( 		() -> { throw new AssertionError(new Throwable(""first thing went wrong"")); }, 		() -> { throw new AssertionError(new Throwable(""second thing went wrong"")); }, 		() -> assertThat(""ERROR! - something is broke"", not(containsString(""ERROR!""))) 	); }  @Test public void assertOneExample() { 	assertTrue(false, ""Wasn't expecting that!\n\nNow I've broken the tree""); } ```  The output from when these tests are run via Gradle is as follows:  ``` │  ├─ example.testrule.ErrorCollectorJupiterDemo │  │  ├─ assertAllExample ✘ Multiple Failures (3 failures)         java.lang.Throwable: first thing went wrong         java.lang.Throwable: second thing went wrong          Expected: not a string containing ""ERROR!""      but: was ""ERROR! - something is broke"" │  │  ├─ assertOneExample ✘ Wasn't expecting that!  Now I've broken the tree ```  ## Deliverables  - [ ] Continue the tree structure across line breaks similar to the following:  ``` │  ├─ example.testrule.ErrorCollectorJupiterDemo │  │  ├─ assertAllExample ✘ Multiple Failures (3 failures) │  │  │    java.lang.Throwable: first thing went wrong │  │  │    java.lang.Throwable: second thing went wrong │  │  │     │  │  │    Expected: not a string containing ""ERROR!"" │  │  │    but: was ""ERROR! - something is broke"" │  │  ├─ assertOneExample ✘ Wasn't expecting that! │  │  │     │  │  │    Now I've broken the tree ```","closed","component: Platform,","smoyer64","2017-02-17T13:48:57Z","2017-02-20T00:48:18Z"
"","730","TestTemplate methods detection is missing","## Overview  - ( ) **Bug report.** `@TestTemplate` methods are not detected by the Jupiter engine. To be specific, the `IsTestClassWithTests` predicate is missing the use of the `IsTestTemplateMethod` predicate to detect this new kind of tests introduce after the third milestone.  This problem is present using the last commit on master(ca24ac4218b87391de71daf77a3b9a82d94a2536).  Here is a pull request with the fix : #729","closed","component: Jupiter,","ledoyen","2017-03-12T11:59:26Z","2017-03-12T17:04:57Z"
"","643","Issue636 supplier timeout assertions","## Overview  - #636 Introduced `Supplier` variants of the timeout assertions  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.  Fyi @jbduncan, @marcphilipp, @sbrannen","closed","component: Jupiter,","nickgrealy","2017-02-07T05:49:40Z","2017-03-12T14:24:59Z"
"","416","Support @ExtendWith on fields","## Overview  **Is it planned for JUnit 5 to discover composed `@ExtendWith` annotations on fields?**  As far as I can see (from Milestone 1) they are only discovered in case they are used on types or methods.  For projects like Mockito it would be useful to also discover extension by analyzing field annotations.  **Example:**  ``` java // The following explicit declaration would become unnecessary. // @ExtendWith(MockitoExtension.class) public class MyServiceTest {      @Mock     FooService fooService;      @InjectMocks     MyService cut;      @Test     void testSomething() {         ....     }  } ```  In case `@Mock` and `@InjectMocks` were to be changed to composed annotations declaring `@ExtendWith(MockitoExtension.class)`, they could simply be used without having to declare the extension for each test class.  ## Related Issues  - #497 - #506  - #864   ## Deliverables  - [ ] Support registration of extensions on fields with the desired extension classes supplied via `@ExtendWith(...)`.   - This is analogous to the current support for declaring `@ExtendWith` on classes and methods.","closed","status: superseded,","slu-it","2016-07-21T08:19:54Z","2021-08-03T15:59:25Z"
"","891","Dynamic containers: Support partial dynamic tree errors","## Overview  **Feature request.** Dynamic containers provide the ability to create entire trees of tests and containers dynamically. However, if an exception is thrown while creating a sub portion of the tree then the entire tree results in an error and no test results are gathered.  Consider the following example:  ```java class DemoTests {     @TestFactory     @DisplayName(""1"")     Stream demo() {         return Stream.of(                 dynamicContainer(""1.1"", Stream.of(                         dynamicTest(""1.1.1"", () -> {                         }),                         dynamicTest(""1.1.2"", () -> {                         })                 )),                 dynamicContainer(""1.2"", IntStream.rangeClosed(1, 10)                         .mapToObj(number -> {                             if (number == 9) {                                 throw new RuntimeException();                             }                             return dynamicTest(""1.2."" + number, () -> {                             });                         })                 )         );     } } ```  The actual test result tree is * :x: Test Results   * :x: DemoTests     * :x: 1       * :x: Class Configuration  The desired test result tree is * :x: Test Results   * :x: DemoTests     * :x: 1       * ✔️ 1         * ✔️ 1         * ✔️ 2       * :x: 2         * :x: Class Configuration  Where part of the tree is executed.  ## Deliverables  - [x] Some way to provide a supplier of dynamic nodes instead of a list/stream of nodes directly. - [ ] Support for executing available tests in dynamic trees of tests even when branches of the tree are not executable due to throwing an exception.","closed","theme: programming model,","mfulton26","2017-06-16T20:29:30Z","2017-07-01T16:19:51Z"
"","741","Add nullability annotations to code base for better tooling assistance","## Overview  **Context:** When implementing extensions in Kotlin I noticed that when generating the members in IntelliJ the method signatures had nullable types like `ContainerExtensionContext?`:  ```kotlin class MyExtension : BeforeAllCallback {   override fun beforeAll(context: ContainerExtensionContext?) {     TODO(""not implemented"") //To change body of created functions use File | Settings | File Templates.   } } ```  The desired behavior when implementing something like this is to have the generated type represent what the documentation says. I would like the generated parameter to be `ContainerExtensionContext` instead of `ContainerExtensionContext?`.  It is also useful to have when looking at Javadoc or implementation as well as when using some static code analysis tools.  An overview of the support Kotlin compiler annotations can be found [here](https://kotlinlang.org/docs/reference/java-interop.html#nullability-annotations), but these can benefit authors in other languages as well.  ## Deliverables  - [ ] nullable library chosen - [ ] `@NonNull` and `@Nullable` (or other annotations) are applied to method parameters","closed","component: Jupiter,","mkobit","2017-03-20T00:18:16Z","2017-04-16T16:21:13Z"
"","953","Cannot supply primitive array to a @ParameterizedTest","## Overview  **Bug report**: `OutOfMemoryError` when running parameterized test  Sample code that will produce the error can be found here: https://github.com/braghome/primitive.array    ``` [DEBUG] Dependency collection stats: {ConflictMarker.analyzeTime=4, ConflictMarker.markTime=0, ConflictMarker.nodeCount=128, ConflictIdSorter.graphTime=1, ConflictIdSorter.topsortTime=0, ConflictIdSorter.conflictIdCount=43, ConflictIdSorter.conflictIdCycleCount=0, ConflictResolver.totalTime=7, ConflictResolver.conflictItemCount=94, DefaultDependencyCollector.collectTime=78, DefaultDependencyCollector.transformTime=12} [DEBUG] org.apache.maven.plugins:maven-surefire-plugin:jar:2.20: [DEBUG]    org.junit.platform:junit-platform-surefire-provider:jar:1.0.0-M5:runtime [DEBUG]       org.junit.platform:junit-platform-launcher:jar:1.0.0-M5:runtime [DEBUG]       org.apache.maven.surefire:common-java5:jar:2.19.1:runtime [DEBUG]    org.junit.jupiter:junit-jupiter-engine:jar:5.0.0-M5:runtime [DEBUG]       org.junit.platform:junit-platform-engine:jar:1.0.0-M5:runtime [DEBUG]          org.junit.platform:junit-platform-commons:jar:1.0.0-M5:runtime [DEBUG]          org.opentest4j:opentest4j:jar:1.0.0-M2:runtime [DEBUG]       org.junit.jupiter:junit-jupiter-api:jar:5.0.0-M5:runtime [DEBUG]    org.apache.maven:maven-plugin-api:jar:2.2.1:compile [DEBUG]    org.apache.maven.surefire:maven-surefire-common:jar:2.20:compile [DEBUG]       org.apache.maven.surefire:surefire-booter:jar:2.20:compile [DEBUG]       org.apache.maven:maven-artifact:jar:2.2.1:compile [DEBUG]          org.codehaus.plexus:plexus-utils:jar:1.5.15:compile [DEBUG]       org.apache.maven:maven-plugin-descriptor:jar:2.2.1:compile [DEBUG]          org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9-stable-1:compile [DEBUG]             junit:junit:jar:4.12:compile [DEBUG]                org.hamcrest:hamcrest-core:jar:1.3:compile [DEBUG]       org.apache.maven:maven-project:jar:2.2.1:compile [DEBUG]          org.apache.maven:maven-settings:jar:2.2.1:compile [DEBUG]          org.apache.maven:maven-profile:jar:2.2.1:compile [DEBUG]          org.apache.maven:maven-artifact-manager:jar:2.2.1:compile [DEBUG]             backport-util-concurrent:backport-util-concurrent:jar:3.1:compile [DEBUG]          org.apache.maven:maven-plugin-registry:jar:2.2.1:compile [DEBUG]          org.codehaus.plexus:plexus-interpolation:jar:1.11:compile [DEBUG]       org.apache.maven:maven-model:jar:2.2.1:compile [DEBUG]       org.apache.maven:maven-core:jar:2.2.1:compile [DEBUG]          org.apache.maven:maven-plugin-parameter-documenter:jar:2.2.1:compile [DEBUG]          org.slf4j:slf4j-jdk14:jar:1.5.6:runtime [DEBUG]             org.slf4j:slf4j-api:jar:1.5.6:runtime [DEBUG]          org.slf4j:jcl-over-slf4j:jar:1.5.6:runtime [DEBUG]          org.apache.maven.reporting:maven-reporting-api:jar:3.0:compile [DEBUG]          org.apache.maven:maven-repository-metadata:jar:2.2.1:compile [DEBUG]          org.apache.maven:maven-error-diagnostics:jar:2.2.1:compile [DEBUG]          org.apache.maven:maven-monitor:jar:2.2.1:compile [DEBUG]          classworlds:classworlds:jar:1.1:compile [DEBUG]          org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3:compile [DEBUG]             org.sonatype.plexus:plexus-cipher:jar:1.4:compile [DEBUG]       org.apache.commons:commons-lang3:jar:3.1:compile [DEBUG]    org.apache.maven.surefire:surefire-api:jar:2.20:compile [DEBUG]       org.apache.maven.surefire:surefire-logger-api:jar:2.20:compile [DEBUG]    org.apache.maven:maven-toolchain:jar:2.2.1:compile [DEBUG]    org.apache.maven.plugin-tools:maven-plugin-annotations:jar:3.3:compile [DEBUG] Created new class realm plugin>org.apache.maven.plugins:maven-surefire-plugin:2.20 [DEBUG] Importing foreign packages into class realm plugin>org.apache.maven.plugins:maven-surefire-plugin:2.20 [DEBUG]   Imported:  < maven.api [DEBUG] Populating class realm plugin>org.apache.maven.plugins:maven-surefire-plugin:2.20 [DEBUG]   Included: org.apache.maven.plugins:maven-surefire-plugin:jar:2.20 [DEBUG]   Included: org.junit.platform:junit-platform-surefire-provider:jar:1.0.0-M5 [DEBUG]   Included: org.junit.platform:junit-platform-launcher:jar:1.0.0-M5 [DEBUG]   Included: org.apache.maven.surefire:common-java5:jar:2.19.1 [DEBUG]   Included: org.junit.jupiter:junit-jupiter-engine:jar:5.0.0-M5 [DEBUG]   Included: org.junit.platform:junit-platform-engine:jar:1.0.0-M5 [DEBUG]   Included: org.junit.platform:junit-platform-commons:jar:1.0.0-M5 [DEBUG]   Included: org.opentest4j:opentest4j:jar:1.0.0-M2 [DEBUG]   Included: org.junit.jupiter:junit-jupiter-api:jar:5.0.0-M5 [DEBUG]   Included: org.apache.maven.surefire:maven-surefire-common:jar:2.20 [DEBUG]   Included: org.apache.maven.surefire:surefire-booter:jar:2.20 [DEBUG]   Included: org.codehaus.plexus:plexus-utils:jar:1.5.15 [DEBUG]   Included: junit:junit:jar:4.12 [DEBUG]   Included: org.hamcrest:hamcrest-core:jar:1.3 [DEBUG]   Included: backport-util-concurrent:backport-util-concurrent:jar:3.1 [DEBUG]   Included: org.codehaus.plexus:plexus-interpolation:jar:1.11 [DEBUG]   Included: org.slf4j:slf4j-jdk14:jar:1.5.6 [DEBUG]   Included: org.slf4j:jcl-over-slf4j:jar:1.5.6 [DEBUG]   Included: org.apache.maven.reporting:maven-reporting-api:jar:3.0 [DEBUG]   Included: org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3 [DEBUG]   Included: org.sonatype.plexus:plexus-cipher:jar:1.4 [DEBUG]   Included: org.apache.commons:commons-lang3:jar:3.1 [DEBUG]   Included: org.apache.maven.surefire:surefire-api:jar:2.20 [DEBUG]   Included: org.apache.maven.surefire:surefire-logger-api:jar:2.20 [DEBUG]   Included: org.apache.maven.plugin-tools:maven-plugin-annotations:jar:3.3 [DEBUG] Configuring mojo org.apache.maven.plugins:maven-surefire-plugin:2.20:test from plugin realm ClassRealm[plugin>org.apache.maven.plugins:maven-surefire-plugin:2.20, parent: sun.misc.Launcher$AppClassLoader@42a57993] [DEBUG] Configuring mojo 'org.apache.maven.plugins:maven-surefire-plugin:2.20:test' with basic configurator --> [DEBUG]   (s) additionalClasspathElements = [] [DEBUG]   (s) basedir = /Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array [DEBUG]   (s) childDelegation = false [DEBUG]   (s) classesDirectory = /Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array/target/classes [DEBUG]   (s) classpathDependencyExcludes = [] [DEBUG]   (s) dependenciesToScan = [] [DEBUG]   (s) disableXmlReport = false [DEBUG]   (s) enableAssertions = true [DEBUG]   (f) forkCount = 1 [DEBUG]   (s) forkMode = once [DEBUG]   (s) forkedProcessExitTimeoutInSeconds = 30 [DEBUG]   (s) junitArtifactName = junit:junit [DEBUG]   (s) localRepository =       id: local       url: file:///Users/manavdeepbrar/.m2/repository/    layout: default snapshots: [enabled => true, update => always]  releases: [enabled => true, update => always]  [DEBUG]   (f) parallelMavenExecution = false [DEBUG]   (s) parallelOptimized = true [DEBUG]   (s) perCoreThreadCount = true [DEBUG]   (s) pluginArtifactMap = {org.apache.maven.plugins:maven-surefire-plugin=org.apache.maven.plugins:maven-surefire-plugin:maven-plugin:2.20:, org.junit.platform:junit-platform-surefire-provider=org.junit.platform:junit-platform-surefire-provider:jar:1.0.0-M5:runtime, org.junit.platform:junit-platform-launcher=org.junit.platform:junit-platform-launcher:jar:1.0.0-M5:runtime, org.apache.maven.surefire:common-java5=org.apache.maven.surefire:common-java5:jar:2.19.1:runtime, org.junit.jupiter:junit-jupiter-engine=org.junit.jupiter:junit-jupiter-engine:jar:5.0.0-M5:runtime, org.junit.platform:junit-platform-engine=org.junit.platform:junit-platform-engine:jar:1.0.0-M5:runtime, org.junit.platform:junit-platform-commons=org.junit.platform:junit-platform-commons:jar:1.0.0-M5:runtime, org.opentest4j:opentest4j=org.opentest4j:opentest4j:jar:1.0.0-M2:runtime, org.junit.jupiter:junit-jupiter-api=org.junit.jupiter:junit-jupiter-api:jar:5.0.0-M5:runtime, org.apache.maven:maven-plugin-api=org.apache.maven:maven-plugin-api:jar:2.2.1:compile, org.apache.maven.surefire:maven-surefire-common=org.apache.maven.surefire:maven-surefire-common:jar:2.20:compile, org.apache.maven.surefire:surefire-booter=org.apache.maven.surefire:surefire-booter:jar:2.20:compile, org.apache.maven:maven-artifact=org.apache.maven:maven-artifact:jar:2.2.1:compile, org.codehaus.plexus:plexus-utils=org.codehaus.plexus:plexus-utils:jar:1.5.15:compile, org.apache.maven:maven-plugin-descriptor=org.apache.maven:maven-plugin-descriptor:jar:2.2.1:compile, org.codehaus.plexus:plexus-container-default=org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9-stable-1:compile, junit:junit=junit:junit:jar:4.12:compile, org.hamcrest:hamcrest-core=org.hamcrest:hamcrest-core:jar:1.3:compile, org.apache.maven:maven-project=org.apache.maven:maven-project:jar:2.2.1:compile, org.apache.maven:maven-settings=org.apache.maven:maven-settings:jar:2.2.1:compile, org.apache.maven:maven-profile=org.apache.maven:maven-profile:jar:2.2.1:compile, org.apache.maven:maven-artifact-manager=org.apache.maven:maven-artifact-manager:jar:2.2.1:compile, backport-util-concurrent:backport-util-concurrent=backport-util-concurrent:backport-util-concurrent:jar:3.1:compile, org.apache.maven:maven-plugin-registry=org.apache.maven:maven-plugin-registry:jar:2.2.1:compile, org.codehaus.plexus:plexus-interpolation=org.codehaus.plexus:plexus-interpolation:jar:1.11:compile, org.apache.maven:maven-model=org.apache.maven:maven-model:jar:2.2.1:compile, org.apache.maven:maven-core=org.apache.maven:maven-core:jar:2.2.1:compile, org.apache.maven:maven-plugin-parameter-documenter=org.apache.maven:maven-plugin-parameter-documenter:jar:2.2.1:compile, org.slf4j:slf4j-jdk14=org.slf4j:slf4j-jdk14:jar:1.5.6:runtime, org.slf4j:slf4j-api=org.slf4j:slf4j-api:jar:1.5.6:runtime, org.slf4j:jcl-over-slf4j=org.slf4j:jcl-over-slf4j:jar:1.5.6:runtime, org.apache.maven.reporting:maven-reporting-api=org.apache.maven.reporting:maven-reporting-api:jar:3.0:compile, org.apache.maven:maven-repository-metadata=org.apache.maven:maven-repository-metadata:jar:2.2.1:compile, org.apache.maven:maven-error-diagnostics=org.apache.maven:maven-error-diagnostics:jar:2.2.1:compile, org.apache.maven:maven-monitor=org.apache.maven:maven-monitor:jar:2.2.1:compile, classworlds:classworlds=classworlds:classworlds:jar:1.1:compile, org.sonatype.plexus:plexus-sec-dispatcher=org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3:compile, org.sonatype.plexus:plexus-cipher=org.sonatype.plexus:plexus-cipher:jar:1.4:compile, org.apache.commons:commons-lang3=org.apache.commons:commons-lang3:jar:3.1:compile, org.apache.maven.surefire:surefire-api=org.apache.maven.surefire:surefire-api:jar:2.20:compile, org.apache.maven.surefire:surefire-logger-api=org.apache.maven.surefire:surefire-logger-api:jar:2.20:compile, org.apache.maven:maven-toolchain=org.apache.maven:maven-toolchain:jar:2.2.1:compile, org.apache.maven.plugin-tools:maven-plugin-annotations=org.apache.maven.plugin-tools:maven-plugin-annotations:jar:3.3:compile} [DEBUG]   (f) pluginDescriptor = Component Descriptor: role: 'org.apache.maven.plugin.Mojo', implementation: 'org.apache.maven.plugin.surefire.HelpMojo', role hint: 'org.apache.maven.plugins:maven-surefire-plugin:2.20:help' role: 'org.apache.maven.plugin.Mojo', implementation: 'org.apache.maven.plugin.surefire.SurefirePlugin', role hint: 'org.apache.maven.plugins:maven-surefire-plugin:2.20:test' --- [DEBUG]   (s) printSummary = true [DEBUG]   (s) projectArtifactMap = {org.junit.jupiter:junit-jupiter-api=org.junit.jupiter:junit-jupiter-api:jar:5.0.0-M5:test, org.opentest4j:opentest4j=org.opentest4j:opentest4j:jar:1.0.0-M2:test, org.junit.platform:junit-platform-commons=org.junit.platform:junit-platform-commons:jar:1.0.0-M5:test, org.junit.jupiter:junit-jupiter-params=org.junit.jupiter:junit-jupiter-params:jar:5.0.0-M5:test, org.junit.platform:junit-platform-runner=org.junit.platform:junit-platform-runner:jar:1.0.0-M5:test, org.junit.platform:junit-platform-launcher=org.junit.platform:junit-platform-launcher:jar:1.0.0-M5:test, org.junit.platform:junit-platform-engine=org.junit.platform:junit-platform-engine:jar:1.0.0-M5:test, org.junit.platform:junit-platform-suite-api=org.junit.platform:junit-platform-suite-api:jar:1.0.0-M5:test, junit:junit=junit:junit:jar:4.12:test, org.hamcrest:hamcrest-core=org.hamcrest:hamcrest-core:jar:1.3:test} [DEBUG]   (s) projectBuildDirectory = /Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array/target [DEBUG]   (s) redirectTestOutputToFile = false [DEBUG]   (s) remoteRepositories = [      id: central       url: https://repo.maven.apache.org/maven2    layout: default snapshots: [enabled => false, update => daily]  releases: [enabled => true, update => never] ] [DEBUG]   (s) reportFormat = brief [DEBUG]   (s) reportsDirectory = /Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array/target/surefire-reports [DEBUG]   (f) rerunFailingTestsCount = 0 [DEBUG]   (f) reuseForks = true [DEBUG]   (s) runOrder = filesystem [DEBUG]   (f) shutdown = testset [DEBUG]   (s) skip = false [DEBUG]   (f) skipAfterFailureCount = 0 [DEBUG]   (s) skipTests = false [DEBUG]   (s) suiteXmlFiles = [] [DEBUG]   (s) tempDir = surefire [DEBUG]   (s) testClassesDirectory = /Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array/target/test-classes [DEBUG]   (s) testFailureIgnore = false [DEBUG]   (s) testNGArtifactName = org.testng:testng [DEBUG]   (s) testSourceDirectory = /Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array/src/test/java [DEBUG]   (s) threadCountClasses = 0 [DEBUG]   (s) threadCountMethods = 0 [DEBUG]   (s) threadCountSuites = 0 [DEBUG]   (s) trimStackTrace = true [DEBUG]   (s) useFile = true [DEBUG]   (s) useManifestOnlyJar = true [DEBUG]   (s) useSystemClassLoader = true [DEBUG]   (s) useUnlimitedThreads = false [DEBUG]   (s) workingDirectory = /Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array [DEBUG]   (s) project = MavenProject: com.gmail.manavbrar.pmitivearray:primitive.array:0.0.1-SNAPSHOT @ /Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array/pom.xml [DEBUG]   (s) session = org.apache.maven.execution.MavenSession@4e76dac [DEBUG] -- end configuration -- [DEBUG] Surefire report directory: /Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array/target/surefire-reports [DEBUG] Using configured provider org.junit.platform.surefire.provider.JUnitPlatformProvider [DEBUG] Setting system property [user.dir]=[/Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array] [DEBUG] Setting system property [localRepository]=[/Users/manavdeepbrar/.m2/repository] [DEBUG] Setting system property [basedir]=[/Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array] [DEBUG] parallel='none', perCoreThreadCount=true, threadCount=0, useUnlimitedThreads=false, threadCountSuites=0, threadCountClasses=0, threadCountMethods=0, parallelOptimized=true [DEBUG] dummy:dummy:jar:1.0 (selected for null) [DEBUG]   org.apache.maven.surefire:surefire-booter:jar:2.20:compile (selected for compile) [DEBUG]     org.apache.maven.surefire:surefire-api:jar:2.20:compile (selected for compile) [DEBUG]       org.apache.maven.surefire:surefire-logger-api:jar:2.20:compile (selected for compile) [DEBUG] Adding to surefire booter test classpath: /Users/manavdeepbrar/.m2/repository/org/apache/maven/surefire/surefire-booter/2.20/surefire-booter-2.20.jar Scope: compile [DEBUG] Adding to surefire booter test classpath: /Users/manavdeepbrar/.m2/repository/org/apache/maven/surefire/surefire-api/2.20/surefire-api-2.20.jar Scope: compile [DEBUG] Adding to surefire booter test classpath: /Users/manavdeepbrar/.m2/repository/org/apache/maven/surefire/surefire-logger-api/2.20/surefire-logger-api-2.20.jar Scope: compile [DEBUG] Using JVM: /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/bin/java [DEBUG] dummy:dummy:jar:1.0 (selected for null) [DEBUG]   org.apache.maven.plugins:maven-surefire-plugin:maven-plugin:2.20: (selected for ) [DEBUG]     org.apache.maven:maven-plugin-api:jar:2.2.1:runtime (selected for runtime) [DEBUG]     org.apache.maven.surefire:maven-surefire-common:jar:2.20:runtime (selected for runtime) [DEBUG]       org.apache.maven.plugin-tools:maven-plugin-annotations:jar:3.3:runtime (selected for runtime) [DEBUG]         org.apache.maven:maven-artifact:jar:3.0:runtime (selected for runtime) [DEBUG]           org.codehaus.plexus:plexus-utils:jar:2.0.4:runtime (selected for runtime) [DEBUG]       org.apache.maven.surefire:surefire-api:jar:2.20:runtime (selected for runtime) [DEBUG]         org.apache.maven.surefire:surefire-logger-api:jar:2.20:runtime (selected for runtime) [DEBUG]       org.apache.maven.surefire:surefire-booter:jar:2.20:runtime (selected for runtime) [DEBUG]       org.apache.maven:maven-artifact:jar:3.0:runtime (removed - nearer found: 2.2.1) [DEBUG]       org.apache.maven:maven-artifact:jar:2.2.1:runtime (selected for runtime) [DEBUG]         org.codehaus.plexus:plexus-utils:jar:1.5.15:runtime (selected for runtime) [DEBUG]       org.apache.maven:maven-plugin-descriptor:jar:2.2.1:runtime (selected for runtime) [DEBUG]         org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9-stable-1:runtime (selected for runtime) [DEBUG]           junit:junit:jar:3.8.1:runtime (selected for runtime) [DEBUG]           org.codehaus.plexus:plexus-utils:jar:1.0.4:runtime (removed - nearer found: 1.5.15) [DEBUG]           classworlds:classworlds:jar:1.1-alpha-2:runtime (selected for runtime) [DEBUG]       org.apache.maven:maven-project:jar:2.2.1:runtime (selected for runtime) [DEBUG]         org.apache.maven:maven-settings:jar:2.2.1:runtime (selected for runtime) [DEBUG]           org.apache.maven:maven-model:jar:2.2.1:runtime (selected for runtime) [DEBUG]           org.codehaus.plexus:plexus-interpolation:jar:1.11:runtime (selected for runtime) [DEBUG]         org.apache.maven:maven-profile:jar:2.2.1:runtime (selected for runtime) [DEBUG]         org.apache.maven:maven-model:jar:2.2.1:runtime (selected for runtime) [DEBUG]         org.apache.maven:maven-artifact-manager:jar:2.2.1:runtime (selected for runtime) [DEBUG]           org.apache.maven:maven-repository-metadata:jar:2.2.1:runtime (selected for runtime) [DEBUG]           org.apache.maven.wagon:wagon-provider-api:jar:1.0-beta-6:runtime (selected for runtime) [DEBUG]             org.codehaus.plexus:plexus-utils:jar:1.4.2:runtime (removed - nearer found: 1.5.15) [DEBUG]           backport-util-concurrent:backport-util-concurrent:jar:3.1:runtime (selected for runtime) [DEBUG]         org.apache.maven:maven-plugin-registry:jar:2.2.1:runtime (selected for runtime) [DEBUG]         org.codehaus.plexus:plexus-interpolation:jar:1.11:runtime (selected for runtime) [DEBUG]       org.apache.maven:maven-model:jar:2.2.1:runtime (selected for runtime) [DEBUG]       org.apache.maven:maven-core:jar:2.2.1:runtime (selected for runtime) [DEBUG]         org.apache.maven:maven-plugin-parameter-documenter:jar:2.2.1:runtime (selected for runtime) [DEBUG]         org.apache.maven.wagon:wagon-http:jar:1.0-beta-6:runtime (selected for runtime) [DEBUG]           org.apache.maven.wagon:wagon-http-shared:jar:1.0-beta-6:runtime (selected for runtime) [DEBUG]             nekohtml:xercesMinimal:jar:1.9.6.2:runtime (selected for runtime) [DEBUG]             nekohtml:nekohtml:jar:1.9.6.2:runtime (selected for runtime) [DEBUG]             commons-httpclient:commons-httpclient:jar:3.1:runtime (selected for runtime) [DEBUG]               commons-codec:commons-codec:jar:1.2:runtime (selected for runtime) [DEBUG]         org.apache.maven.wagon:wagon-webdav-jackrabbit:jar:1.0-beta-6:runtime (selected for runtime) [DEBUG]           org.apache.jackrabbit:jackrabbit-webdav:jar:1.5.0:runtime (selected for runtime) [DEBUG]             org.apache.jackrabbit:jackrabbit-jcr-commons:jar:1.5.0:runtime (selected for runtime) [DEBUG]             org.slf4j:slf4j-api:jar:1.5.3:runtime (selected for runtime) [DEBUG]             commons-httpclient:commons-httpclient:jar:3.0:runtime (removed - nearer found: 3.1) [DEBUG]           org.slf4j:slf4j-nop:jar:1.5.3:runtime (selected for runtime) [DEBUG]         org.slf4j:slf4j-jdk14:jar:1.5.6:runtime (selected for runtime) [DEBUG]           org.slf4j:slf4j-api:jar:1.5.3:runtime (removed - nearer found: 1.5.6) [DEBUG]           org.slf4j:slf4j-api:jar:1.5.6:runtime (selected for runtime) [DEBUG]         org.slf4j:jcl-over-slf4j:jar:1.5.6:runtime (selected for runtime) [DEBUG]         org.apache.maven.reporting:maven-reporting-api:jar:2.2.1:runtime (selected for runtime) [DEBUG]           org.apache.maven.doxia:doxia-logging-api:jar:1.1:runtime (selected for runtime) [DEBUG]             org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-30:runtime (removed - nearer found: 1.0-alpha-9-stable-1) [DEBUG]         org.apache.maven.wagon:wagon-provider-api:jar:1.0-beta-6:runtime (selected for runtime) [DEBUG]           org.codehaus.plexus:plexus-utils:jar:1.4.2:runtime (removed - nearer found: 1.5.15) [DEBUG]         org.apache.maven:maven-repository-metadata:jar:2.2.1:runtime (selected for runtime) [DEBUG]         org.apache.maven:maven-error-diagnostics:jar:2.2.1:runtime (selected for runtime) [DEBUG]         org.apache.maven:maven-monitor:jar:2.2.1:runtime (selected for runtime) [DEBUG]         classworlds:classworlds:jar:1.1-alpha-2:runtime (removed - nearer found: 1.1) [DEBUG]         classworlds:classworlds:jar:1.1:runtime (selected for runtime) [DEBUG]         org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3:runtime (selected for runtime) [DEBUG]           org.codehaus.plexus:plexus-utils:jar:1.5.5:runtime (removed - nearer found: 1.5.15) [DEBUG]           org.sonatype.plexus:plexus-cipher:jar:1.4:runtime (selected for runtime) [DEBUG]       org.apache.maven:maven-toolchain:jar:2.2.1:runtime (selected for runtime) [DEBUG]       org.apache.commons:commons-lang3:jar:3.1:runtime (selected for runtime) [DEBUG]     org.apache.maven.surefire:surefire-api:jar:2.20:runtime (selected for runtime) [DEBUG]       org.apache.maven.surefire:surefire-logger-api:jar:2.20:runtime (selected for runtime) [DEBUG]     org.apache.maven:maven-toolchain:jar:2.2.1:runtime (selected for runtime) [DEBUG]     org.apache.maven.plugin-tools:maven-plugin-annotations:jar:3.3:runtime (selected for runtime) [DEBUG]       org.apache.maven:maven-artifact:jar:3.0:runtime (removed - nearer found: 2.2.1) [DEBUG] test classpath:  /Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array/target/test-classes  /Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array/target/classes  /Users/manavdeepbrar/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.0.0-M5/junit-jupiter-api-5.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/opentest4j/opentest4j/1.0.0-M2/opentest4j-1.0.0-M2.jar  /Users/manavdeepbrar/.m2/repository/org/junit/platform/junit-platform-commons/1.0.0-M5/junit-platform-commons-1.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.0.0-M5/junit-jupiter-params-5.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/junit/platform/junit-platform-runner/1.0.0-M5/junit-platform-runner-1.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/junit/platform/junit-platform-launcher/1.0.0-M5/junit-platform-launcher-1.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/junit/platform/junit-platform-engine/1.0.0-M5/junit-platform-engine-1.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/junit/platform/junit-platform-suite-api/1.0.0-M5/junit-platform-suite-api-1.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/junit/junit/4.12/junit-4.12.jar  /Users/manavdeepbrar/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar [DEBUG] provider classpath:  /Users/manavdeepbrar/.m2/repository/org/junit/platform/junit-platform-surefire-provider/1.0.0-M5/junit-platform-surefire-provider-1.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/junit/platform/junit-platform-launcher/1.0.0-M5/junit-platform-launcher-1.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/apache/maven/surefire/common-java5/2.19.1/common-java5-2.19.1.jar  /Users/manavdeepbrar/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.0.0-M5/junit-jupiter-engine-5.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/junit/platform/junit-platform-engine/1.0.0-M5/junit-platform-engine-1.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/junit/platform/junit-platform-commons/1.0.0-M5/junit-platform-commons-1.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/opentest4j/opentest4j/1.0.0-M2/opentest4j-1.0.0-M2.jar  /Users/manavdeepbrar/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.0.0-M5/junit-jupiter-api-5.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/junit/junit/4.12/junit-4.12.jar  /Users/manavdeepbrar/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar  /Users/manavdeepbrar/.m2/repository/org/apache/maven/reporting/maven-reporting-api/3.0/maven-reporting-api-3.0.jar [DEBUG] test(compact) classpath:  test-classes  classes  junit-jupiter-api-5.0.0-M5.jar  opentest4j-1.0.0-M2.jar  junit-platform-commons-1.0.0-M5.jar  junit-jupiter-params-5.0.0-M5.jar  junit-platform-runner-1.0.0-M5.jar  junit-platform-launcher-1.0.0-M5.jar  junit-platform-engine-1.0.0-M5.jar  junit-platform-suite-api-1.0.0-M5.jar  junit-4.12.jar  hamcrest-core-1.3.jar [DEBUG] provider(compact) classpath:  junit-platform-surefire-provider-1.0.0-M5.jar  junit-platform-launcher-1.0.0-M5.jar  common-java5-2.19.1.jar  junit-jupiter-engine-5.0.0-M5.jar  junit-platform-engine-1.0.0-M5.jar  junit-platform-commons-1.0.0-M5.jar  opentest4j-1.0.0-M2.jar  junit-jupiter-api-5.0.0-M5.jar  junit-4.12.jar  hamcrest-core-1.3.jar  maven-reporting-api-3.0.jar [INFO]  [INFO] ------------------------------------------------------- [INFO]  T E S T S [INFO] ------------------------------------------------------- [DEBUG] boot classpath:  /Users/manavdeepbrar/.m2/repository/org/apache/maven/surefire/surefire-booter/2.20/surefire-booter-2.20.jar  /Users/manavdeepbrar/.m2/repository/org/apache/maven/surefire/surefire-api/2.20/surefire-api-2.20.jar  /Users/manavdeepbrar/.m2/repository/org/apache/maven/surefire/surefire-logger-api/2.20/surefire-logger-api-2.20.jar  /Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array/target/test-classes  /Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array/target/classes  /Users/manavdeepbrar/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.0.0-M5/junit-jupiter-api-5.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/opentest4j/opentest4j/1.0.0-M2/opentest4j-1.0.0-M2.jar  /Users/manavdeepbrar/.m2/repository/org/junit/platform/junit-platform-commons/1.0.0-M5/junit-platform-commons-1.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.0.0-M5/junit-jupiter-params-5.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/junit/platform/junit-platform-runner/1.0.0-M5/junit-platform-runner-1.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/junit/platform/junit-platform-launcher/1.0.0-M5/junit-platform-launcher-1.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/junit/platform/junit-platform-engine/1.0.0-M5/junit-platform-engine-1.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/junit/platform/junit-platform-suite-api/1.0.0-M5/junit-platform-suite-api-1.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/junit/junit/4.12/junit-4.12.jar  /Users/manavdeepbrar/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar  /Users/manavdeepbrar/.m2/repository/org/junit/platform/junit-platform-surefire-provider/1.0.0-M5/junit-platform-surefire-provider-1.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/apache/maven/surefire/common-java5/2.19.1/common-java5-2.19.1.jar  /Users/manavdeepbrar/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.0.0-M5/junit-jupiter-engine-5.0.0-M5.jar  /Users/manavdeepbrar/.m2/repository/org/apache/maven/reporting/maven-reporting-api/3.0/maven-reporting-api-3.0.jar [DEBUG] boot(compact) classpath:  surefire-booter-2.20.jar  surefire-api-2.20.jar  surefire-logger-api-2.20.jar  test-classes  classes  junit-jupiter-api-5.0.0-M5.jar  opentest4j-1.0.0-M2.jar  junit-platform-commons-1.0.0-M5.jar  junit-jupiter-params-5.0.0-M5.jar  junit-platform-runner-1.0.0-M5.jar  junit-platform-launcher-1.0.0-M5.jar  junit-platform-engine-1.0.0-M5.jar  junit-platform-suite-api-1.0.0-M5.jar  junit-4.12.jar  hamcrest-core-1.3.jar  junit-platform-surefire-provider-1.0.0-M5.jar  common-java5-2.19.1.jar  junit-jupiter-engine-5.0.0-M5.jar  maven-reporting-api-3.0.jar [DEBUG] Forking command line: /bin/sh -c cd /Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array && /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/bin/java -jar /Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array/target/surefire/surefirebooter2469316749007257509.jar /Users/manavdeepbrar/Documents/Coursera_algorithmic_toolbox/primitive.array/target/surefire 2017-07-16T18-55-03_793-jvmRun1 surefire8111336754767961212tmp surefire_06517069218495854312tmp [INFO] Running com.gmail.manavbrar.primitivearray.AppTest [INFO]  [INFO] Results: [INFO]  [INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0 [INFO]  [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 5.603 s [INFO] Finished at: 2017-07-16T18:55:07-07:00 [INFO] Final Memory: 15M/1781M [INFO] ------------------------------------------------------------------------ [ERROR] Java heap space -> [Help 1] java.lang.OutOfMemoryError: Java heap space 	at java.util.Arrays.copyOf(Arrays.java:3332) 	at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124) 	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:448) 	at java.lang.StringBuilder.append(StringBuilder.java:136) 	at org.apache.maven.plugin.surefire.booterclient.output.MultipleFailureException.getLocalizedMessage(MultipleFailureException.java:52) 	at org.apache.maven.plugin.surefire.booterclient.ForkStarter$CloseableCloser.run(ForkStarter.java:200) 	at org.apache.maven.surefire.shade.org.apache.maven.shared.utils.cli.CommandLineUtils$1.call(CommandLineUtils.java:282) 	at org.apache.maven.plugin.surefire.booterclient.ForkStarter.fork(ForkStarter.java:626) 	at org.apache.maven.plugin.surefire.booterclient.ForkStarter.fork(ForkStarter.java:533) 	at org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:279) 	at org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:243) 	at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeProvider(AbstractSurefireMojo.java:1077) 	at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeAfterPreconditionsChecked(AbstractSurefireMojo.java:907) 	at org.apache.maven.plugin.surefire.AbstractSurefireMojo.execute(AbstractSurefireMojo.java:785) 	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134) 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207) 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) 	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116) 	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80) 	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51) 	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128) 	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307) 	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193) 	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106) 	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863) 	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288) 	at org.apache.maven.cli.MavenCli.main(MavenCli.java:199) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) ```    ## Deliverables  - [x] Support primitive arrays with parameterized tests.","closed","component: Jupiter,","braghome","2017-07-17T02:02:51Z","2017-07-18T20:43:03Z"
"","419","Allow @BeforeAll and @AfterAll methods to be non-static","## Overview  #88 explains why `@BeforeAll` and `@AfterAll` methods currently must be `static`; however, the question arises again and again.  ## Related Issues  - #48  - #88  - #905   ## Proposal  Reintroduce support for `@TestInstance` as was present in the JUnit 5 Prototype, thereby allowing developers and third party extension authors to make use of the feature as well. In other words, we do not want to limit use of this feature to JUnit Jupiter itself.  ## Open Issues  Special caution must be taken with regard to `@Nested` test classes in terms of the lifecycle of the test instance against which `@BeforeAll` and `@AfterAll` methods are executed.  ## Original Issue Description  Can support be added for `@BeforeAll` and `@AfterAll` methods in `@Nested` test classes?   For example:  ``` java class Tests {     @Test     void something() {     }      @BeforeAll(nested = SubTests.class)     static void setUp() {     }      @Nested     class SubTests {          // ... ```  ## Deliverables  - [x] Reintroduce support for `@TestInstance` as was present in the JUnit 5 prototype.   - [x] Make `@TestInstance` an `@Inherited` annotation to support lifecycle inheritance semantics within a test class hierarchy. - [x] Add support for `@TestInstance` for `@Nested` test classes.   - [x] Ensure proper behavior for `@Nested` test classes in terms of the lifecycle of the test instance against which `@BeforeAll` and `@AfterAll` methods are executed. - [x] Allow `@BeforeAll` and `@AfterAll` methods to be non-static. - [x] Move the `getTestInstance()` method from `TestExtensionContext` to `ExtensionContext`.   - [x] Ensure that the proper test instance is supplied to container-level extensions via the `ExtensionContext`.   - [x] Ensure that the proper test instance is supplied to `TestInstancePostProcessor` extensions via the `ExtensionContext` as well.   - [x] Ensure that the proper test instance is supplied to `TestTemplateContainerExtensionContext` extensions via the `ExtensionContext` as well. - [x] Add documentation to the User Guide for the new features. - [x] Update existing documentation in the User Guide which states that `@BeforeAll` and `@AfterAll` methods must be `static`. - [x] Update existing JavaDoc which states that `@BeforeAll` and `@AfterAll` methods must be `static`. - [x] Update the release notes in the User Guide describing the new features. - [x] Update the release notes in the User Guide describing breaking changes.","closed","component: Kotlin,","mfulton26","2016-07-22T13:30:18Z","2017-08-19T11:11:42Z"
"","777","Use Rouge syntax highlighting in User Guide","## Overview  #770 introduced support for generating a PDF version of the User Guide and initially attempted to use _Rouge_ syntax highlighting but stopped short of doing so for the HTML version since _Rouge_ is not yet supported for the `html5` backend in Asciidoctor.  The reason we say ""initially"" is that we have now stopped using Rouge due to a bug that prevents it from being used on MS Windows. See https://github.com/jneen/rouge/issues/661 for details.  ## Related Issues  - #770  - #1099   ## Deliverables  - [x] Upgrade to Asciidoctor 1.5.7 once https://github.com/asciidoctor/asciidoctor/issues/1040 has been resolved. - [x] Change from `coderay` to `rouge` for syntax highlighting in the HTML and PDF versions of the User Guide once https://github.com/jneen/rouge/issues/661 has been resolved.","closed","component: Vintage,","sbrannen","2017-04-06T21:18:03Z","2020-06-06T08:48:42Z"
"","437","Introduce support for selecting packages, classes, and methods in ConsoleLauncher and Gradle plugin","## Overview  #410 removed the generic name based selectors previously used by the `DiscoveryRequestCreator`.  Consequently, that deleted code has been relocated to `DiscoveryRequestCreator` as a private, internal implementation detail; however, this is only a temporary solution.  This issue therefore aims to provide a robust solution that will accommodate support for additional test artifact types other than Java based packages, classes, and methods. ## Related Issues - #313  - #452  - #453  - #468 ## Deliverables - [x] Introduce explicit support for selecting packages in `ConsoleLauncher` via `-p` |  `--select-package` - [x] Introduce explicit support for selecting packages in the JUnit Platform Gradle plugin - [x] Introduce explicit support for selecting classes in `ConsoleLauncher` via `-c` |  `--select-class` - [x] Introduce explicit support for selecting classes in the JUnit Platform Gradle plugin - [x] Introduce explicit support for selecting methods in `ConsoleLauncher` via `-m` |  `--select-method` - [x] Introduce explicit support for selecting methods in the JUnit Platform Gradle plugin","closed","theme: discovery,","sbrannen","2016-07-25T18:54:11Z","2016-11-30T08:18:22Z"
"","726","Bug report: Exception thrown when building :junit-jupiter-engine on Windows 7","## Overview  ### Expected behaviour Running `./gradlew {clean} :junit-jupiter-engine:build` from JUnit 5 `master` branch should succeed.  ### Actual behaviour  When running `./gradlew clean :junit-jupiter-engine:build` on my (at time of writing) up-to-date [fork](https://github.com/jbduncan/junit5) of JUnit 5, at the `master` branch, on my Windows 7 laptop, it throws the following stack trace. For some reason, AppVeyor is not catching this.  ``` :junit-jupiter-engine:junitPlatformTest 17:12:49.138 [main] WARN  org.junit.platform.commons.util.ClasspathScanner - Error scanning files for URI file:///C:/Users/Jonathan/dev/Java/IntelliJ%20Projects/junit5/junit-jupiter-engine/build/resources/test/jupiter-testjar.jar java.nio.file.FileSystemNotFoundException: C:\Users\Jonathan\dev\Java\IntelliJ%20Projects\junit5\junit-jupiter-engine\build\resources\test\jupiter-testjar.jar         at com.sun.nio.zipfs.ZipFileSystem.(ZipFileSystem.java:120) ~[zipfs.jar:1.8.0_121]         at com.sun.nio.zipfs.ZipFileSystemProvider.newFileSystem(ZipFileSystemProvider.java:117) ~[zipfs.jar:1.8.0_121]         at java.nio.file.FileSystems.newFileSystem(FileSystems.java:326) ~[?:1.8.0_121]         at java.nio.file.FileSystems.newFileSystem(FileSystems.java:276) ~[?:1.8.0_121]         at org.junit.platform.commons.util.CloseablePath.createForJarFileSystem(CloseablePath.java:54) ~[junit-platform-commons-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.commons.util.CloseablePath.create(CloseablePath.java:46) ~[junit-platform-commons-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.commons.util.ClasspathScanner.findClassesForUri(ClasspathScanner.java:123) ~[junit-platform-commons-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.commons.util.ClasspathScanner.scanForClassesInClasspathRoot(ClasspathScanner.java:103) ~[junit-platform-commons-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.commons.util.ReflectionUtils.findAllClassesInClasspathRoot(ReflectionUtils.java:508) ~[junit-platform-commons-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.jupiter.engine.discovery.DiscoverySelectorResolver.lambda$resolveSelectors$0(DiscoverySelectorResolver.java:51) ~[main/:?]         at java.util.ArrayList.forEach(ArrayList.java:1249) ~[?:1.8.0_121]         at org.junit.jupiter.engine.discovery.DiscoverySelectorResolver.resolveSelectors(DiscoverySelectorResolver.java:50) ~[main/:?]         at org.junit.jupiter.engine.discovery.DiscoverySelectorResolverTests.classpathResolutionForJarFiles(DiscoverySelectorResolverTests.java:419) ~[test/:?]         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]         at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]         at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:312) ~[junit-platform-commons-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[main/:?]         at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:177) ~[main/:?]         at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[main/:?]         at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:173) ~[main/:?]         at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:120) ~[main/:?]         at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[main/:?]         at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$1(HierarchicalTestExecutor.java:81) ~[junit-platform-engine-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:76) ~[junit-platform-engine-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$1(HierarchicalTestExecutor.java:91) ~[junit-platform-engine-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:76) ~[junit-platform-engine-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$1(HierarchicalTestExecutor.java:91) ~[junit-platform-engine-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:76) ~[junit-platform-engine-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) ~[junit-platform-engine-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) ~[junit-platform-engine-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:133) ~[junit-platform-launcher-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85) ~[junit-platform-launcher-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.console.tasks.ConsoleTestExecutor.executeTests(ConsoleTestExecutor.java:65) ~[junit-platform-console-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.console.tasks.ConsoleTestExecutor.lambda$execute$0(ConsoleTestExecutor.java:57) ~[junit-platform-console-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.console.tasks.CustomContextClassLoaderExecutor.invoke(CustomContextClassLoaderExecutor.java:33) [junit-platform-console-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.console.tasks.ConsoleTestExecutor.execute(ConsoleTestExecutor.java:57) [junit-platform-console-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.console.ConsoleLauncher.executeTests(ConsoleLauncher.java:79) [junit-platform-console-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.console.ConsoleLauncher.execute(ConsoleLauncher.java:69) [junit-platform-console-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]         at org.junit.platform.console.ConsoleLauncher.main(ConsoleLauncher.java:41) [junit-platform-console-1.0.0-SNAPSHOT.jar:1.0.0-SNAPSHOT]  Failures (1):   JUnit Jupiter:DiscoverySelectorResolverTests:classpathResolutionForJarFiles()     MethodSource [className = 'org.junit.jupiter.engine.discovery.DiscoverySelectorResolverTests', methodName = 'classpathResolutionForJarFiles', methodParameterTypes = '']     => java.lang.AssertionError: Expecting:  <[]> to contain:  <[[engine:junit-jupiter]/[class:com.example.project.FirstTest]]> but could not find:  <[[engine:junit-jupiter]/[class:com.example.project.FirstTest]]>   Test run finished after 3482 ms [        64 containers found      ] [         0 containers skipped    ] [        64 containers started    ] [         0 containers aborted    ] [        64 containers successful ] [         0 containers failed     ] [       561 tests found           ] [         0 tests skipped         ] [       561 tests started         ] [         0 tests aborted         ] [       560 tests successful      ] [         1 tests failed          ]  :junit-jupiter-engine:junitPlatformTest FAILED  FAILURE: Build failed with an exception.  * What went wrong: Execution failed for task ':junit-jupiter-engine:junitPlatformTest'. > Process 'command 'C:\Program Files\Java\jdk1.8.0_121\bin\java.exe'' finished with non-zero exit value 1  * Try: Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.  BUILD FAILED ```  Running `./gradlew --version` outputs the following: ``` $ ./gradlew --version  ------------------------------------------------------------ Gradle 3.4.1 ------------------------------------------------------------  Build time:   2017-03-03 19:45:41 UTC Revision:     9eb76efdd3d034dc506c719dac2955efb5ff9a93  Groovy:       2.4.7 Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015 JVM:          1.8.0_121 (Oracle Corporation 25.121-b13) OS:           Windows 7 6.1 amd64 ```  ## Deliverables  - [ ] Investigate this stack trace, find its cause and fix it if applicable.","closed","component: Platform,","jbduncan","2017-03-11T17:35:32Z","2017-03-11T21:08:57Z"
"","300","Introduce ParameterContext for ParameterResolver extension API","## Original Title  ParameterResolver has Optional parameter in `supports` and `resolve` methods ## Original Description  Optional was designed to provide a limited mechanism for library method return types where there needed to be a clear way to represent ""no result"".","closed","theme: extensions,","baev","2016-06-09T15:23:11Z","2016-06-11T21:28:36Z"
"","775","Compile and test on Java 9","## Moved ""Lessons learned..."" to Wiki  [Lessons learned ""JUnit 5 compile and test on Java 9 b162""](https://github.com/junit-team/junit5/wiki/Lessons-learned-%22JUnit-5---compile-and-test-on-Java-9-b162%22)  Here, only the remaining technical steps resulting from the lessons learned are retained.  ## Related Issues  - #425 _""Test against JDK 9 modules""_ - #1951 _""Java 12""_  ## Deliverables  - [x] Upgrade to Gradle 3.5 - done in master with https://github.com/junit-team/junit5/commit/5ef538f7b7e953f89053de6986e254ee737cf918 - [x] Add information tag stating location from where an engine was loaded from - see #788  - [x] Merge main Java 8 and this Java 9 build into a single `.travis.yml` script -- via https://github.com/junit-team/junit5/commit/a313a075353a573d97b443ba57dd83db0f00f8fd - [x] Include [AssertJ 3.7.0](https://github.com/joel-costigliola/assertj-core/milestone/28) - remove jitpack from repositories - [x] Include [Gradle Shadow 2.0.0](https://github.com/johnrengelman/shadow/milestone/18) - remove jfrog.org/artifactory from repositories - [x] ~~Report and~~ remove workaround for ServiceLoader ""bug"" when ""everybody"" has access to build 163","closed","theme: modules,","sormuras","2017-04-06T16:43:33Z","2019-07-09T16:20:26Z"
"","111","Specifying the order of tests in test reports","## Motivation  With testing frameworks which consider test names as documentation/specification, the order of test results matters. IDEs and CIs should report all tests in the order they were written (not necessarily same as their execution order), especially if they are used for generating documentation.  For example see [Specsy's Fibonacci example](http://specsy.org/documentation.html#naming-tests) which has two tests (""The first two Fibonacci numbers are 0 and 1"" and ""Each remaining number is the sum of the previous two"") whose names make sense only when read in the order they were written. This is also required by Cucumber and similar tools (assuming Cucumber features, scenarios and steps are represented as nested tests). ## Current state  AFAIK, currently JUnit 5 does not maintain the order of tests, because methods like `TestPlan.getChildren` return a `Set`. I hope that the test reporting order will be made a first-class citizen. ## Ideas for a solution  JUnit 4 maintained the test order by returning a `List` from `Description.getChildren`, but relying on a mutable class has its problems, and I'm not sure whether maintaining test order was a design goal or just an implementation detail in JUnit 4.  [Jumi](http://jumi.fi/) uses the [fi.jumi.api.drivers.TestId](https://github.com/orfjackal/jumi/blob/v0.5.437/jumi-api/src/main/java/fi/jumi/api/drivers/TestId.java) class to specify both test order and test identity using a ""path"", which is a list of integers.  A solution which I think would work for JUnit 5 is to combine its string-based `org.junit.gen5.launcher.TestId` with information about the order of tests. If each part of the unique ID (see #106) would have both `String name` and `int order`, and the unique ID would be a list of those pairs, then they would be easy to sort predictably: order firstly by `part.order`, secondly by `part.name`, thirdly by the next part. The `order` may be the same for all parts at the same level, in which case the `name` will determine the order (for example packages should be sorted like this). It would need to be discussed whether the order should affect the ID's equality; I have arguments against and for it.  This issue relates to #48 (scenario tests), but not directly to #13 (runtime order). My proposed solution relates to #106 and #68 (unique ID).","closed","status: stale,","luontola","2016-01-13T16:20:05Z","2021-06-19T12:50:10Z"
"","504","Facilitate discovery of test cases for platform clients using sources only","## Motivation  Some clients of the JUnit 5 platform, notably IDEs such as IntellilJ IDEA operate only on sources  for their test detection. Thus, they cannot use the full discovery mechanism of the JUnit platform as the latter relies on compiled classes.   Therefore a mechanism is needed to detect test cases by analyzing the source code only.  In this context, a _test case_ is anything a particular test engine would like to execute as a test. For the JUnit Jupiter Engine this includes test and test factory methods. Knowing about test cases early before compilation is important to interactive platform clients such as IDEs as it can vastly improve the user experience by providing test running means within the source code and in context menus. ## Precondition  It is assumed that said interactive platform clients possess a means to find meta-annotations in non-compiled source code. This must obviously include the ability to detect meta-meta-annotations etc. ## Proposal  Introduce an annotation such as `@Testable` that all engines can use to denote which types or methods are ""testable"". As this notion of being testable solely depends on the interpretation of a (custom) engine the IDE cannot deduce this testability in general for all possible engines.  Such a `@Testable` annotation will then be used to meta-annotate the engine's 'normal' test annotation(s). Thus this approach does not put an additional burden on test authors as they can still use the familiar test annotations. An IDE however can analyze all meta-annotations of the standard test annotations to find the test cases _without_ being required to have any intimate knowledge of a particular test engine's annotations.   For the JUnit Jupiter engine such normal test annotations making use of `@Testable` would be `@Test`, `@TestFactory`, and the planned `@Step`.  According to this proposal the `@Test` annotation, for example, would be meta-annotated in the following way:  ``` java @Target({ ElementType.ANNOTATION_TYPE, ElementType.METHOD }) @Retention(RetentionPolicy.RUNTIME) @Documented @API(Stable) @Testable public @interface Test { } ```  Note that this approach would also be feasible for inheritance based test engines. These engines could put the `@Testable` annotation on their respective base classes. ## Requirements - If a class (including static nested classes or inner classes) is _not_ meta-annotated with `@Testable` but contains a method that _is_ meta-annotated with `@Testable`, the class must be considered to be a ""testable"" class. - If annotation hierarchies (containing `@Testable`) are present in compiled byte code in JARs in the user's classpath, IDEs must also take such annotation hierarchies into consideration when used in conjunction with annotation processing for not-yet-compiled source code. ## Limitations  This approach would not work for test engines unwilling or unable to use annotations at all. Examples include non-JVM languages or file formats such as XML or engines relying on naming conventions only, such as the JUnit 3 naming convention. ## Restrictions for TestEngine Implementations  A `TestEngine` must **not** in any way perform _discovery_ based on the presence of `@Testable`. In terms of _discovery_, the presence of `@Testable` should only be meaningful to clients such as IDEs. `TestEngine` implementations will therefore be required to discover tests based on information specific to that test engine (e.g., annotations specific to that test engine). ## Open Questions - If a class is annotated or meta-annotated with `@Testable` but contains methods that are _not_ annotated or meta-annotated with `@Testable` but should be considered test methods (e.g. some TestNG-like use cases), will IntelliJ consider the methods to be ""testable""?   - ✅ @akozlova says ""yes"". See [comments](https://github.com/junit-team/junit5/issues/504#issuecomment-247006899) for details.","closed","component: Platform,","mmerdes","2016-09-09T10:05:32Z","2017-01-14T18:17:26Z"
"","248","add micro tests for MethodInvoker","## Microtests for MethodInvoker  see #142  ---  I hereby agree to the terms of the JUnit Contributor License Agreement.","closed","type: task,","signed","2016-05-07T20:34:23Z","2016-05-09T21:00:25Z"
"","433","Introduce adapters for JUnit 4 Rules","## Goals  Introduce _adapters_ for common JUnit 4 Rules in the `junit-jupiter-engine`.  The dependency from `junit-jupiter-engine` to JUnit 4 must be an _optional_ dependency.  This support should be automatically enabled if `junit-4.x.jar` is on the classpath. ## Proposed Candidates - [x] `ExpectedException` - [x] `ExternalResource` - [x] `Verifier` ## Related Issues - #169  - #343  ## Related Blog Posts - http://www.codeaffine.com/2016/04/06/replace-rules-in-junit5/ - http://blog.codefx.org/libraries/junit-5-conditions/","closed","component: Jupiter,","sbrannen","2016-07-25T13:02:15Z","2016-11-30T07:48:04Z"
"","58","Add mechanism for registering dynamic tests","## Further Resources - Related to #14.","closed","component: Jupiter,","marcphilipp","2015-12-11T13:31:47Z","2016-08-31T10:27:29Z"
"","671","Introduce a top-level ExtensionContext for the JupiterTestEngine","## Feature Request  When using the available extension contexts in test runs with extensions like `BeforeAllCallback` and `BeforeTestExecutionCallback`, it only seems possible to use these contexts during one test and lose all context information in following test runs.  Trying to use the parent context of an instance of `ContainerExtensionContext` in a `beforeAllCallback` leads to an empty `Optional` object, thus no information can be used or set.  ```java import java.util.logging.Logger;  import org.junit.jupiter.api.extension.BeforeAllCallback; import org.junit.jupiter.api.extension.BeforeTestExecutionCallback; import org.junit.jupiter.api.extension.ContainerExtensionContext; import org.junit.jupiter.api.extension.TestExtensionContext;  /**  * @author Simon Ebner  */ public class ParentAwareExtension implements BeforeAllCallback, BeforeTestExecutionCallback {  	@Override 	public void beforeAll(ContainerExtensionContext context) throws Exception { 		/** 		 * Issue - no parent context during test execution available to act on 		 * or use any global context information 		 */ 		context.getParent().ifPresent(parent -> { 			Logger.getLogger(""JUnit5-Issue"").info(""'before all' has parent context "" + parent.getDisplayName()); 		}); 	}  	@Override 	public void beforeTestExecution(TestExtensionContext context) throws Exception { 		context.getParent().ifPresent(parent -> { 			Logger.getLogger(""JUnit5-Issue"").info(""'before test' has parent context "" + parent.getDisplayName()); 		}); 	} } ```  It would be great to be able to set and use context information for an entire test run, especially when needing to execute time and resource expensive operations, that could be reduced to one call per entire test run.  ## Suite Considerations  I am not sure as to how it would be necessary to look also at `@SelectClasses` and `@SelectPackages` in this case, because they also may create a distinct series of tests and thus a logical unit, that might need its own context to be able to separate tests that run in a suite and others. I would like to know your opinion in this respect.","closed","component: Jupiter,","LymanEfunktion","2017-02-21T18:42:33Z","2017-07-03T10:48:33Z"
"","924","Introduce Kotlin Assertion Helper Library","## Feature Request  This is mostly a ""nice to have"" syntactically but the current a select few methods that all take `[SomeWrapperType]` don't play as nicely as they could in kotlin.  Someone could easily create a kotlin DSL library wrapper over junit 5. I did this with the [Google Guice DI library](https://github.com/google/guice) creating [Kotlin Guiced](https://github.com/JLLeitschuh/kotlin-guiced). I could just as easily do the same thing for Junit5 but if there is an interest it would be nice if the small DSL library was vendored by the Junit team.  The methods that I've currently found that don't play the nicest are the following:  ### `assertAll(Stream executables)`: In kotlin calling this method becomes: ```kotlin assertAll(someCollection.stream().map {     Executable {          assertEquals(6,6)     } }) ``` This could be simplified by providing a method: ```kotlin fun assertAll(executables: Stream<() -> Unit>) = assertAll(executables.map { Executable(it) }) ```  This would allow for the much nicer syntax: ```kotlin assertAll(someCollection.stream().map {     { assertEquals(6,6) } })  // Or even this: assertAll(someCollection.stream().map {     listOf(         { assertEquals(6,6) }         { assertEquals(3,3) }     ) }.flatMap { it.stream() }) ```  ### `assertAll(Executable... executables)`: In kotlin calling this method becomes: ```kotlin assertAll(     Executable { assertEquals(6, 6) },     Executable { assertEquals(3, 3) },     Executable { assertEquals(10_000, 10_000) } ) ``` This could be simplified by providing a method: ```kotlin // This calls the above suggested method. fun assertAll(vararg executables: () -> Unit) = assertAll(executables.toList().stream()) ```  This would allow for the much nicer syntax: ```kotlin assertAll(    { assertEquals(6, 6) },    { assertEquals(3, 3) },    { assertEquals(10_000, 10_000) } ) ```  Similar methods would need to be provided for the methods that take `String header` as well.  ### `assertThrows(Class expectedType, Executable executable)`  Calling in Kotlin it becomes: ```kotlin assertThrows(IllegalArgumentException::class.java) { throw IllegalArgumentException() } ``` Yeay! We get auto conversion because this method takes `Executable executable` not a collection. However the `IllegalArgumentException::class.java` is kind of clunky.  This one could use reified types to make this nicer!  If we provide a method: ```kotlin inline fun  assertThrows(executable : () -> Unit) = assertThrows(T::class.java, Executable(executable)) ``` Then the syntax to call it in kotlin becomes: ```kotlin assertThrows { throw IllegalArgumentException() } ```  **Note** These problems don't exist with all methods that take `Executable`.  For example, this is completely valid given the current Junit5 API: ```kotlin assertTimeout(Duration.ZERO) { } ```   ## Deliverables  - [ ] Create a `junit-jupiter-kotlin-api`. - [ ] Provide Kotlin friendly DSL in the `junit-jupiter-kotlin-api` library.","closed","component: Kotlin,","JLLeitschuh","2017-07-07T16:25:26Z","2017-12-12T21:14:18Z"
"","902","Gradle JunitPlatform sub extensions are not Gradle Kotlin DSL friendly","## Feature request  The Junit5 Gradle plugin configuration does not lend itself well to being configured with the new [Gradle Kotlin DSL](https://github.com/gradle/kotlin-dsl).  I would like to be able to use the following syntax in my Gradle Kotlin DSL build file:  ```kotlin junitPlatform {     filters {         includeClassNamePatterns("".*Test"", "".*Tests"", "".*Spec"")     } } ```  The problem is rooted in the fundamental design decision to dynamically add properties to the `JunitPlatformExtention` at runtime with groovy. That means statically typed languages have to jump through hoops to access them.  [Lines that cause this problem](https://github.com/junit-team/junit5/blob/6ded3d033b33d313767550dbd7fc0611f6a485b4/junit-platform-gradle-plugin/src/main/groovy/org/junit/platform/gradle/plugin/JUnitPlatformPlugin.groovy#L30-L35)  There is a workaround for this problem in kotlin but it isn't the prettiest.  ```kotlin fun org.junit.platform.gradle.plugin.JUnitPlatformExtension.filters(configure: org.junit.platform.gradle.plugin.FiltersExtension.() -> Unit = {}) =     with(getProperty(""filters"") as org.junit.platform.gradle.plugin.FiltersExtension) { configure() } ```  Placing the above code snippet somewhere in my build file allows me to use the syntax I want but it would be better practice if `JUnitPlatformExtension` had member functions that are explicitly declared.  For example: ```groovy void selectors(org.gradle.api.Action closure)  void filters(org.gradle.api.Action closure)  // ect... ```  ## Deliverables  - [x] Add `selectors` method to `JUnitPlatformExtension` - [x] Add `filters` method to `JUnitPlatformExtension` - [x] Add `packages` method to `FiltersExtension ` - [x] Add `tags` method to `FiltersExtension ` - [x] Add `engines` method to `FiltersExtension `","closed","component: Kotlin,","JLLeitschuh","2017-06-28T20:34:30Z","2017-08-19T11:11:42Z"
"","794","Introduce utility for invoking private, protected, and package private methods","## Feature request  It would be nice to allow tests to invoke `private`, `protected`, and _package private_ methods. Often times these methods change and the lack for such mechanism makes testing harder, especially when changing the visibility of the method is not a feasible option.","closed","component: Platform,","Andrei94","2017-04-15T19:06:34Z","2018-04-07T09:45:25Z"
"","80","Introduce global timeouts for tests","## Feature Request  Currently, in JUnit 4 it is not possible to have global timeouts for the tests. The `Timeout` rule does not guarantee that any `@After` method will be called. See  https://github.com/junit-team/junit/issues/1231#issuecomment-167437481  and the recently updated  https://github.com/junit-team/junit/wiki/Timeout-for-tests  It would be good to have a global timeout in JUnit Jupiter. Even better, it would be great if it would be possible to set different global timeouts for `@BeforeEach` `@Test`, and `@AfterEach`, which could be overridden (if needed) directly in the test files via annotations.  ## Related Issues  - #20  - #1246","closed","component: Jupiter,","arcuri82","2015-12-28T09:18:10Z","2019-09-16T14:58:29Z"
"","837","Document JUnit 5 integration with JaCoCo and SonarQube in Maven builds","## Feature Request  Add documentation to the User Guide that describes how to enable Jacoco test coverage in Maven builds and how to make it report with SonarQube.  I currently have this running with the following configuration sections in my Maven POM:  ```xml        ...      jacoco     reuseReports     ${project.basedir}/../target/jacoco.exec      ...                            org.jacoco         jacoco-maven-plugin         0.7.9                                                prepare-agent                                                     ${sonar.jacoco.reportPath}                       ... ```  Note that while Jenkins builds have the correct test count, SonarQube does not.  SonarQube's percent-covered is however correct.  There may be additional work interacting with the JaCoCo and/or SonarQube teams as JUnit 5 hits the mainstream.  You can assign this task to me if the team decides it's worth documenting.  ## Deliverables  - [ ] Add a sub-section in the Maven instructions detailing the above.","closed","theme: documentation,","smoyer64","2017-05-04T15:47:21Z","2018-10-27T23:33:26Z"
"","881","Unable to setup dev environment","## Extending the gradle plugin  I would be very grateful if someone could help me in setting up my development environment.  Setup:  - Groovy 2.4.9 - IntelliJ IDEA 2017.1 - Build #IU-171.3780.107, built on March 22, 2017 - JRE: 1.8.0_112-release-736-b13 x86_64 - JVM: OpenJDK 64-Bit Server VM by JetBrains s.r.o - Mac OS X 10.12.5 - Gradle 3.4.1  ### What ive tried   - Resolving the dependencies by `gradle :junit-platform-gradle-plugin:--refresh-dependencies --stacktrace`  This fails with ` A problem occurred evaluating root project 'junit5'. > No signature of method: java.text.SimpleDateFormat.format() is applicable for argument types: (java.util.Date) values: [Sat Jun 10 21:53:18 CEST 2017]   Possible solutions: print(java.io.PrintWriter), print(java.lang.Object) `   - Running the tests  This fails with  ``` /Library/Java/JavaVirtualMachines/jdk-9.jdk/Contents/Home/bin/java -Dtools.jar=/Library/Java/JavaVirtualMachines/jdk-9.jdk/Contents/Home/lib/tools.jar -Dgroovy.home=/Users/deen/.sdkman/candidates/groovy/2.4.9 -Dgroovy.starter.conf=/Users/deen/.sdkman/candidates/groovy/2.4.9/conf/groovy-starter.conf -Dhttp.proxyHost=10.1.1.30 -Dhttp.proxyPort=8080 -Dhttps.proxyHost=10.1.1.30 -Dhttps.proxyPort=8080 -Dproxy.authentication.username=dennis.dierkes -Dproxy.authentication.password=schule -Dfile.encoding=UTF-8 -classpath /Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-2.4.9.jar org.codehaus.groovy.tools.GroovyStarter --conf /Users/deen/.sdkman/candidates/groovy/2.4.9/conf/groovy-starter.conf --main groovy.ui.GroovyMain --classpath .:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/ant-1.9.4.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/ant-antlr-1.9.4.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/ant-junit-1.9.4.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/ant-launcher-1.9.4.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/bsf-2.4.0.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/commons-cli-1.2.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/commons-logging-1.2.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/gpars-1.2.1.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-ant-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-bsf-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-console-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-docgenerator-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-groovydoc-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-groovysh-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-jmx-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-json-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-jsr223-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-nio-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-servlet-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-sql-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-swing-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-templates-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-test-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-testng-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/groovy-xml-2.4.9.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/hamcrest-core-1.3.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/ivy-2.4.0.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/jansi-1.11.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/jcommander-1.47.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/jline-2.12.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/jsp-api-2.0.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/jsr166y-1.7.0.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/junit-4.12.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/multiverse-core-0.7.0.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/qdox-1.12.1.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/servlet-api-2.4.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/testng-6.8.13.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/xmlpull-1.1.3.1.jar:/Users/deen/.sdkman/candidates/groovy/2.4.9/lib/xstream-1.4.7.jar --encoding=UTF-8 /Users/deen/Documents/Development/Groovy/junit5/junit-platform-gradle-plugin/src/test/groovy/org/junit/platform/gradle/plugin/JUnitPlatformPluginSpec.groovy org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed: /Users/deen/Documents/Development/Groovy/junit5/junit-platform-gradle-plugin/src/test/groovy/org/junit/platform/gradle/plugin/JUnitPlatformPluginSpec.groovy: 12: unable to resolve class org.gradle.api.Project  @ line 12, column 1.    import org.gradle.api.Project    ^  /Users/deen/Documents/Development/Groovy/junit5/junit-platform-gradle-plugin/src/test/groovy/org/junit/platform/gradle/plugin/JUnitPlatformPluginSpec.groovy: 13: unable to resolve class org.gradle.api.Task  @ line 13, column 1.    import org.gradle.api.Task    ^  /Users/deen/Documents/Development/Groovy/junit5/junit-platform-gradle-plugin/src/test/groovy/org/junit/platform/gradle/plugin/JUnitPlatformPluginSpec.groovy: 21: unable to resolve class spock.lang.Issue  @ line 21, column 1.    import spock.lang.Issue    ^  /Users/deen/Documents/Development/Groovy/junit5/junit-platform-gradle-plugin/src/test/groovy/org/junit/platform/gradle/plugin/JUnitPlatformPluginSpec.groovy: 14: unable to resolve class org.gradle.api.artifacts.Configuration  @ line 14, column 1.    import org.gradle.api.artifacts.Configuration    ^  /Users/deen/Documents/Development/Groovy/junit5/junit-platform-gradle-plugin/src/test/groovy/org/junit/platform/gradle/plugin/JUnitPlatformPluginSpec.groovy: 16: unable to resolve class org.gradle.api.tasks.JavaExec  @ line 16, column 1.    import org.gradle.api.tasks.JavaExec    ^  /Users/deen/Documents/Development/Groovy/junit5/junit-platform-gradle-plugin/src/test/groovy/org/junit/platform/gradle/plugin/JUnitPlatformPluginSpec.groovy: 18: unable to resolve class org.gradle.testfixtures.ProjectBuilder  @ line 18, column 1.    import org.gradle.testfixtures.ProjectBuilder    ^  /Users/deen/Documents/Development/Groovy/junit5/junit-platform-gradle-plugin/src/test/groovy/org/junit/platform/gradle/plugin/JUnitPlatformPluginSpec.groovy: 17: unable to resolve class org.gradle.api.tasks.testing.Test  @ line 17, column 1.    import org.gradle.api.tasks.testing.Test    ^  /Users/deen/Documents/Development/Groovy/junit5/junit-platform-gradle-plugin/src/test/groovy/org/junit/platform/gradle/plugin/JUnitPlatformPluginSpec.groovy: 20: unable to resolve class org.junit.platform.engine.discovery.ClassNameFilter  @ line 20, column 1.    import org.junit.platform.engine.discovery.ClassNameFilter    ^  /Users/deen/Documents/Development/Groovy/junit5/junit-platform-gradle-plugin/src/test/groovy/org/junit/platform/gradle/plugin/JUnitPlatformPluginSpec.groovy: 19: unable to resolve class org.junit.platform.console.ConsoleLauncher  @ line 19, column 1.    import org.junit.platform.console.ConsoleLauncher    ^  /Users/deen/Documents/Development/Groovy/junit5/junit-platform-gradle-plugin/src/test/groovy/org/junit/platform/gradle/plugin/JUnitPlatformPluginSpec.groovy: 15: unable to resolve class org.gradle.api.plugins.JavaPlugin  @ line 15, column 1.    import org.gradle.api.plugins.JavaPlugin    ^  /Users/deen/Documents/Development/Groovy/junit5/junit-platform-gradle-plugin/src/test/groovy/org/junit/platform/gradle/plugin/JUnitPlatformPluginSpec.groovy: 22: unable to resolve class spock.lang.Specification  @ line 22, column 1.    import spock.lang.Specification    ^  /Users/deen/Documents/Development/Groovy/junit5/junit-platform-gradle-plugin/src/test/groovy/org/junit/platform/gradle/plugin/JUnitPlatformPluginSpec.groovy: 50: unable to resolve class JUnitPlatformPlugin   @ line 50, column 61.    nitPlatformPlugin) instanceof JUnitPlatf                                  ^  /Users/deen/Documents/Development/Groovy/junit5/junit-platform-gradle-plugin/src/test/groovy/org/junit/platform/gradle/plugin/JUnitPlatformPluginSpec.groovy: 51: unable to resolve class JUnitPlatformExtension   @ line 51, column 61.    e('junitPlatform') instanceof JUnitPlatf                                  ^  13 errors   Process finished with exit code 1    ```","closed","","deen13","2017-06-10T20:10:13Z","2017-06-11T18:56:28Z"
"","549","Selecting one method in JUnit 4 parameterized test has no effect - test method is not executed","## Example test code  ``` java import org.junit.Assert; import org.junit.Test; import org.junit.runner.RunWith; import org.junit.runners.Parameterized;  import java.util.Arrays; import java.util.Collection;  /**  * Created 20/10/16 16:51  *  * @author Vladimir Bogodukhov  **/ @RunWith(Parameterized.class) public class JUnit4ParametrizedExample {      final boolean b;     final long l;     final int i;      @Parameterized.Parameters(name = ""{0} ---> : Test"")     public static Collection data() {         return Arrays.asList(new Object[][]{                 {false, 1L, 21},                 {true, 21L, 11},                 {false, 10L, 21},         });     }      public JUnit4ParametrizedExample(boolean b, long l, int i) {         this.b = b;         this.l = l;         this.i = i;     }       @Test     public void test1() {         throw new IllegalStateException(); /* always fails */     }      @Test     public void test2() {         /* always succeed */     } } ```  ## Test that reproduces the bug  ``` java import org.junit.Assert; import org.junit.jupiter.api.Tag; import org.junit.jupiter.api.Test; import org.junit.platform.engine.TestExecutionResult; import org.junit.platform.engine.discovery.DiscoverySelectors; import org.junit.platform.launcher.*; import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder; import org.junit.platform.launcher.core.LauncherFactory;  import java.util.HashMap; import java.util.Map;  /**  * @author Vladimir Bogodukhov  */ @Tag(""DebugRun"") public class DynamicTestsHelperRun {      enum State {         skipped,         failed,         success,         aborted     }      @Test     void test1() {         Launcher launcher = LauncherFactory.create();          Map callCounts = new HashMap<>();         launcher.registerTestExecutionListeners(new TestExecutionListener() {             @Override             public void executionSkipped(TestIdentifier identifier, String reason) {                  if (identifier.isTest()) {                     callCounts.putIfAbsent(State.skipped, 0);                     callCounts.put(State.skipped, callCounts.get(State.skipped) + 1);                 }             }              @Override             public void executionFinished(TestIdentifier identifier, TestExecutionResult result) {                 if (identifier.isTest()) {                     State state = calcState(result);                     callCounts.putIfAbsent(state, 0);                     callCounts.put(state, callCounts.get(state) + 1);                 }             }         });           final LauncherDiscoveryRequestBuilder builder = LauncherDiscoveryRequestBuilder.request();         builder.selectors(DiscoverySelectors.selectJavaClass(JUnit4ParametrizedExample.class));         LauncherDiscoveryRequest discoveryRequest = builder.build();          TestPlan discover = launcher.discover(discoveryRequest);         launcher.execute(discoveryRequest);          /* We call class with two parametrized methods - each method is called three times.  One test always fails another always succeed          And we get right result         */          Assert.assertEquals(new HashMap() {             {                 put(State.success, 3); /* Three succedd */                 put(State.failed, 3);/* Three failed */             }         }, callCounts);     }       @Test         // Test that fails but certainly mustn't     void test2() {         Launcher launcher = LauncherFactory.create();          Map callCounts = new HashMap<>();         launcher.registerTestExecutionListeners(new TestExecutionListener() {             @Override             public void executionSkipped(TestIdentifier identifier, String reason) {                  if (identifier.isTest()) {                     callCounts.putIfAbsent(State.skipped, 0);                     callCounts.put(State.skipped, callCounts.get(State.skipped) + 1);                 }             }              @Override             public void executionFinished(TestIdentifier identifier, TestExecutionResult result) {                 if (identifier.isTest()) {                     State state = calcState(result);                     callCounts.putIfAbsent(state, 0);                     callCounts.put(state, callCounts.get(state) + 1);                 }             }         });          final LauncherDiscoveryRequestBuilder builder = LauncherDiscoveryRequestBuilder.request();         builder.selectors(DiscoverySelectors.selectJavaMethod(JUnit4ParametrizedExample.class, ""test1""));          LauncherDiscoveryRequest discoveryRequest = builder.build();          TestPlan discover = launcher.discover(discoveryRequest);         launcher.execute(discoveryRequest);         /* we select  test1() method that always fails */            /* if we call to test method that fails three times it is logical to get three failures as result */         Assert.assertEquals(new HashMap() {             {                 put(State.failed, 3);/* Three failed */             }         }, callCounts);         /* However it is not so -  we get actually only one call.  and we do not stop at the breakpoint  in test code  */     }      private static State calcState(TestExecutionResult result) {         TestExecutionResult.Status status = result.getStatus();         switch (status) {             case ABORTED: {                 return State.aborted;             }              case FAILED: {                 return State.failed;             }              case SUCCESSFUL: {                 return State.success;             }              default: {                 throw new IllegalStateException(""unknown state"");             }         }     }  } ```  Not that using `DiscoverySelectors.selectJavaMethod(JUnit4ParametrizedExample.class, JUnit4ParametrizedExample.class.getMethod(""test1""))` instead of `DiscoverySelectors.selectJavaMethod(JUnit4ParametrizedExample.class, ""test1"")` has the same effect.","closed","component: Vintage,","SqAutoTestTeam","2016-10-20T14:50:59Z","2017-09-27T08:24:28Z"
"","75","Unit test and document Assumptions","## Deliverables - [x] Unit test all methods in `Assumptions`. - [x] Document `Assumptions` and all public methods.","closed","type: task,","sbrannen","2015-12-19T19:35:51Z","2016-01-22T19:35:14Z"
"","76","Unit test and document Assertions","## Deliverables - [x] Unit test all assertion methods in `Assertions`. - [x] Document `Assertions` and all public assertion methods.   - [x] Document that `assertThrows` should be used instead of `expectThrows` when it is sufficient to check for the class of the exception expected to be thrown.","closed","type: task,","sbrannen","2015-12-19T19:36:08Z","2016-01-27T20:28:06Z"
"","114","Support Before*/After* annotations as meta-annotations","## Deliverables - [x] Support `@BeforeEach` as a meta-annotation. - [x] Support `@AfterEach` as a meta-annotation. - [x] Support `@BeforeAll` as a meta-annotation. - [x] Support `@AfterAll` as a meta-annotation. - [x] Introduce tests to verify support for `@BeforeEach` as a meta-annotation. - [x] Introduce tests to verify support for `@AfterEach` as a meta-annotation. - [x] Introduce tests to verify support for `@BeforeAll` as a meta-annotation. - [x] Introduce tests to verify support for `@AfterAll` as a meta-annotation.","closed","component: Jupiter,","sbrannen","2016-01-15T10:25:39Z","2018-07-07T16:09:40Z"
"","410","Remove deprecated generic name-based discovery selectors","## Deliverables - [x] Remove all generic name-based discovery selectors that were deprecated in #409.","closed","component: Platform,","sbrannen","2016-07-15T18:31:07Z","2016-12-01T02:30:51Z"
"","311","Populate release notes for 5.0.0-M1 in the User Guide","## Deliverables - [x] Populate the _Summary of Changes_ section in `release-notes-5.0.0-M1.adoc`","closed","theme: documentation,","sbrannen","2016-06-17T14:14:47Z","2019-07-19T19:33:04Z"
"","541","Re-license Surefire Provider under ASL","## Deliverables - [x] Get agreement from all contributors of code under `junit-platform-surefire-provider` to change license to ASL 2.0   - [x] @lutovich    - [x] @hotchemi    - [x] @sbrannen    - [x] @bechte    - [x] @marcphilipp   - [x] @mmerdes   - [x] @jlink   - [x] Change license header to ASL for `junit-platform-surefire-provider` - [x] Package correct LICENSE file in JAR - [x] Update Contributor Agreement","closed","component: Platform,","marcphilipp","2016-10-11T10:44:29Z","2016-11-30T08:24:34Z"
"","412","Document bug fixes and changes in 5.0 M2 change log in User Guide","## Deliverables - [x] Document all issues and pull requests associated with M2 in the User Guide. - [x] Link to all issues and pull requests closed in conjunction with M2 in the User Guide   - https://github.com/junit-team/junit5/milestone/4?closed=1","closed","theme: documentation,","sbrannen","2016-07-15T20:49:49Z","2016-07-23T12:30:09Z"
"","442","Populate release notes for 5.0 M3","## Deliverables - [ ] Document all issues and pull requests associated with M3 in the User Guide.  The following can be used as a starting point:  ``` git --no-pager log r5.0.0-M2..HEAD --pretty=format:'* %s' --reverse | grep -vi 'Polish' > changelog.adoc ```","closed","component: Vintage,","sbrannen","2016-07-27T16:17:31Z","2016-11-30T10:02:59Z"
"","14","Introduce support for parameterized tests","## Deliverables  - [x] Introduce `@TestTemplate` and accompanying extension point. - [x] Determine if #704 should be included in M4. - [x] Determine if we need an `@InvocationIndex` annotation or `TestTemplateInfo` type for injecting the current _invocation index_, etc. into `@Test`, `@BeforeEach`, and `@AfterEach` methods.   - See https://github.com/junit-team/junit5/commit/d2e3a4dfdc8cc4b4b8609e4297f8e00b753cb5b3 - [x] Introduce `junit-jupiter-params` module   - [x] Merge initial contribution (#728)   - [x] Javadoc     - [x] `@since` tags   - [x] API annotations   - [x] Add unit tests where missing (see TODOs)   - [x] Resolve TODOs - [X] Document `@TestTemplate` and accompanying extension point ~~in User Guide and~~ Release Notes   - [X] ~~Provide example(s) in the `documentation` module and include in the User Guide.~~ Will be addresses in #762 - [x] Document parameterized tests in User Guide and Release Notes   - [x] Document the `junit-jupiter-params` module in the _Dependency Metadata_ section.   - [x] Document the `junit-jupiter-params` module in the _Dependency Diagram_.   - [x] Provide example(s) in the `documentation` module and include in the User Guide.  ----  ## Original Issue Description  At the time of writing, the https://github.com/junit-team/junit-lambda/wiki/Prototype-Test-Decorators page does not have all that much detail, so this might already be considered.  It would be good if the library shipped with ready-to-use simple parameter annotations that could be used inside a single test instance. It would in many ways look like JUnit 4's `@Parameterized` Runner, but for use inside a single class. When running the test, each `@Parameterized` method would appear many times, once for each data set.  ``` java class MyTest {     // A simple test with a specified data set    @Test @Parameterized(""mod10"")    void testMod10(String value) { ... }     @Parameterized(""mod10"")     Collection getMod10Values { ... }     // Also including a method naming convention    @Test @Parameterized(""mod11"", name=""{0}"")    void testMod11(String value) { ... }     @Parameterized(""mod11"")    Collection getMod11Values { ... }     // In the absense of a @Parameterized data provider, use reflection    @Test @Parameterized(""getMod12Values"", name=""{0}"")    void testMod12(String value) { ... }     Collection getMod12Values{ ... } } ```  ----  ## Related Issues  - #378 - #386  - #604  - #704  - #728","closed","component: Jupiter,","elygre","2015-11-18T09:58:07Z","2017-04-03T07:25:06Z"
"","830","Document annotation attributes for parameterized test configuration","## Deliverables  - [x] Document attributes for annotations such as `@ParameterizedTest`, `@CsvFileSource`, `@CsvSource`, etc.   - [x] resolve all TODOs in the `junit-jupiter-params` module.","closed","component: Jupiter,","sbrannen","2017-05-03T11:36:15Z","2017-07-03T10:48:19Z"
"","893","Make Gradle plugin compatible with Gradle 3.x again","## Deliverables  - [x] Check for `sourceSet.output.classesDirs` (note the extra **s**) and fallback to `sourceSet.output.classesDir` if it's not present","closed","3rd-party: Gradle,","marcphilipp","2017-06-20T18:24:14Z","2017-06-22T10:14:11Z"
"","836","Rename `names` attribute in @MethodSource to `value`","## Deliverables  - [x]  Rename `names` attribute in `@MethodSource` to `value`.","closed","component: Jupiter,","sbrannen","2017-05-04T15:00:41Z","2017-07-03T10:48:19Z"
"","906","Current master build is broken","## Bug report  ``` ./gradlew build (from parent) > Task :junit-jupiter-params:compileJava /Users/klamse/dev/src/junit5/junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/MethodArgumentsProvider.java:41: error: unreported exception X; must be caught or declared to be thrown                         .orElseThrow(() -> new JUnitException(""Could not find method: "" + methodName)))                                     ^   where X,T are type-variables:     X extends Throwable declared in method orElseThrow(Supplier)     T extends Object declared in class Optional 1 error ```","closed","theme: build,","klamse","2017-06-29T19:12:50Z","2017-06-30T11:38:38Z"
"","810","UniqueId.parse fails for methods with array type parameters","## Bug description ``` String idString = uniqueIdFromMethodDescriptorWithArrayParameter.toString(); UniqueId id = UniqueId.parse(idString); ``` will fail with `PreconditionViolation` since array types are described with an `[` in front but `[` chars are currently forbidden as segment values.  ## Suggested Solution  Change representation of array types in `ReflectionUtils.findMethod(clazz, methodName, parameterTypeNames)` and `StringUtils.nullSafeToString(classes)`.   Alternative: Don't use `[` as separator char in unique IDs. But some 3rd party tools might already have committed to the current format.  ## Deliverables  - [ ] Encode `segmentType` and `value` in constructor and decode in `parse`.","closed","theme: discovery,","jlink","2017-04-27T15:29:04Z","2017-07-03T10:48:18Z"
"","569","JUnit 5 Test Suites don't run in Intellij Idea","## Background Using these annotations is the existing means to make a test suite in JUnit 5:  ```java @RunWith(JUnitPlatform.class) @IncludeEngines(""junit-jupiter"") @SelectPackages(""..."") ``` ## The Problem But on running the suite in Idea, no tests run, and it declares: `Empty test suite.`  ## Related Resources #476 explains the reasons, but only offers to log a warning. (It also contains additional links to SO and an Idea bug for context)  ## Acceptance Criteria Resolution of this issue requires making some kind of recursive package test suite work in Intellij Idea.","closed","theme: suites,","ericjturley","2016-11-16T15:34:00Z","2020-03-24T13:33:04Z"
"","506","Introduce mechanism for programmatic extension management","## Background  This issue addresses some of the topics discussed in #112.  ## Status Quo  It is currently possible to register extensions _declaratively_ via `@ExtendWith` on types and methods, and #497 will support programmatic extension registration via fields. However... - Developers cannot _alter the order_ of registered extensions. - Developers cannot _remove_ a registered extension. - Developers cannot _insert_ an extension into the list of registered extensions -- for example, at the front or somewhere in the middle.  ## Rationale  In order to avoid the introduction of an overly complex declarative model for sorting, appending, prepending, inserting, and removing extensions, we have opted for a programmatic means to achieve all of the above. Providing a programmatic means to achieve these goals frees developers to manage registered extensions as they see fit without any unnecessary restrictions imposed on them by the framework itself.  ## Considerations  Such a mechanism could itself be an `Extension` registered declaratively via `@ExtendWith`; however, the current thinking in the team is that there should be one and only one such component registered at any given time. Since this is such a special case which affects all extensions which have been registered declaratively, it is therefore considered best to introduce a new declarative mechanism for registering this single _component_. Similarly, the API for such a component should therefore not extend `Extension` since doing so would allow users to incorrectly register it via `@ExtendWith` (in which case it would simply be silently ignored).  ## Proposal  - Introduce an `ExtensionManager` API that receives a list of all registered extensions as input and returns a list of extensions. - Introduce a `@ManageExtensionsWith` annotation that allows the user to declare a single class reference for an implementation of `ExtensionManager`.  ## Related Issues  - #13  - #416 - #497 - #864  - #1707   ## Deliverables  - [ ] Introduce a mechanism for programmatic extension management.","open","component: Jupiter,","sbrannen","2016-09-10T15:22:29Z","2021-08-03T16:11:32Z"
"","629","Remove 'hide-details' from console options","## Background  Option `--hide-details` is deprecated by #524 and replaced by `--details none`.  ## Deliverables  - [x] Remove the following lines in class `org.junit.platform.console.options.AvailableOptions`: ``` // TODO Remove ""hide-details"" before final release. Only here to make ""legacy"" Gradle plugin happy. // If removed, an old Gradle:junitPlatformTest will report: //   Exception in thread ""main"" joptsimple.UnrecognizedOptionException: hide-details is not a recognized option parser.accepts(""hide-details"", ""@Deprecated. Use '--details none' instead.""); ```  - [x] Update `documentation/src/docs/asciidoc/running-tests.adoc` by removing line: ``` --hide-details                                @Deprecated. Use '--details none' instead. ```  - [x] Update `documentation/src/docs/asciidoc/release-notes-5.0.0-M5.adoc` by adding line: ``` * `--hide-details` option of the `ConsoleLauncher` is removed, use `--details none` instead. ```  - [x] Update User-Guide with latest example tree http://junit.org/junit5/docs/snapshot/user-guide/#running-tests-console-launcher","closed","component: Platform,","sormuras","2017-01-16T09:48:25Z","2017-04-03T19:52:39Z"
"","600","PackageUtils do not work with modules on Java 9","## Background  Invoking `clazz.getPackage().getImplementationVersion()` can currently return `null` on Java 9 while returning a valid implementation version on Java 8. See the discussion in #598 for details.  For example `PackageUtils.getAttribute(Object.class, Package::getImplementationVersion)` returns an empty `Optional` on Java 9 when passed a class that resides in a module (e.g., `java.base`).  ## Analysis  Package versioning is **NOT** supported for _Modular JAR Files_ (i.e., JARs containing `module-info.class`).  Excerpt from the [JAR File Specification](http://download.java.net/java/jdk9/docs/technotes/guides/jar/jar.html#Modular) for Java 9:  > JAR files that are deployed as modules declare (explicitly or implicitly) their dependencies and may declare service providers too. The JAR Manifest is ignored. On the other hand, JAR files on the class path use the META-INF directory for security, versioning, or service configuration.   ## Deliverables    - [x] Determine if classes such as `Object` which reside in the `java.base` module even have such metadata associated with their packages.  - See _Analysis_ section above. - [x] Find an alternative to `PackageUtils.getAttribute(...)` for module versioning on Java 9.","closed","theme: modules,","sbrannen","2016-12-12T00:44:18Z","2017-09-24T06:23:42Z"
"","914","Include @author tags in Java source code","## Background  Historically, Java source code within the JUnit code base has not included `@author` tags.  As an exception to the rule, there are (as of the time of this writing) 15 occurrences of `@author` tags within the JUnit 4 code base.  The JUnit Lambda prototype included `@author` tags in the Javadoc for all top-level types, but those tags were removed before JUnit 5.0 Alpha was released.  While it's true that anyone can load the [contributors page](https://github.com/junit-team/junit5/graphs/contributors) to see who has contributed, that is something that very few people actually do, and it doesn't carry the same weight as an `@author` tag which finds its way into the IDEs of thousands of developers worldwide.   ## Impetus for Change  Over the course of the past year and a half, I (Sam Brannen) have had discussions with numerous would-be contributors who all said that they would find it not only appropriate to include `@author` tags but also (more importantly) an incentive to be a committer to an open source project like JUnit. The rationale varied from ""the coolness factor"" to ""something to be visibly proud of"" to ""something to impress my current employer and future potential employers"".  ### Benefits Above and Beyond Git History  The presence of `@author` tags has benefits above and beyond those provided by tools such as git history and git blame.  - `@author` tags still tell you something about the history of a file even when tools such as git history and git blame cannot tell the whole story (e.g., because the information has been lost due to refactorings, renaming/moving projects, etc.) - See the following comments for further benefits of `@author` tags    - https://github.com/junit-team/junit5/issues/914#issuecomment-312963347    - https://github.com/junit-team/junit5/issues/914#issuecomment-312965419  ### Potential Legal Ramifications  Furthermore, there are potential legal ramifications associated with *not* including `@author` tags as pointed out [here](https://twitter.com/aalmiray/status/882255680530415618). Also, the Eclipse Public License version 1.0 contains the following requirement.  > Each Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution.  ## Proposal  Avoid potential legal issues and honor all open source contributors by including `@author` tags in Java source code and including author information as part of the published Javadoc.","closed","component: Vintage,","sbrannen","2017-07-04T14:51:17Z","2017-09-08T20:10:56Z"
"","183","Upgrade to Spotless version based on Eclipse 4.5.1+","## Background  For details, see: - https://github.com/junit-team/junit5/pull/179 - https://github.com/diffplug/spotless/issues/15 ## Deliverables - [x] Once a version of Spotless that is based on Eclipse 4.5.1+ has been released, upgrade the JUnit 5 build to use it.","closed","type: task,","sbrannen","2016-03-10T13:13:34Z","2016-03-10T16:50:13Z"
"","509","Split Assertions and AssertionsTests","# Status Quo  The classes `Assertions` and `AssertionsTest` have been growing larger since the time they were created. The files are getting too large to keep them easy to maintain. # Proposals - Split `AssertionsTest` class into logical units, e.g. `AssertionsEqualsTests`, etc. - Move private and package-private helper methods from `Assertions` into a package-private `AssertionsUtil` class","closed","component: Jupiter,","bechte","2016-09-13T20:36:11Z","2016-11-12T03:24:48Z"
"","880","JUnit 5 is 10x slower than JUnit 4","# Code to reproduce  ## JUnit Jupiter  ```java     static long nOfTimes, start = System.nanoTime();      @org.junit.jupiter.api.Test     void testSpeed() {         Assertions.assertTrue(true);         if(++nOfTimes == 1000)             System.out.println(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));//10085     } ```  ## JUnit 4  ```java     static long nOfTimes, start = System.nanoTime();      @org.junit.Test     public void testSpeed() {         org.junit.Assert.assertTrue(true);         if (++nOfTimes == 1000)             System.out.println(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));//1041     } ```  # Results  **Results** on my machine (i5): ~10sec (JUnit5) and ~1sec (JUnit4).  # Environment  * IntelliJ 2017.2 EAP (see screenshot on how to setup 1K repeats) * JUnit 4.11 * Jupiter 5.0.0-20170610.145620-613 * Platform Launcher 1.0.0-20170610.145632-612 * Platform Engine 1.0.0-20170610.145629-613 * Surefire Provider 1.0.0-20170610.145635-612 * MacOS  ![intellij-repeat-tests-n-times](https://user-images.githubusercontent.com/702510/27004661-8e23804a-4e15-11e7-96df-b2bfa66010d3.png)  # Justification  The speed will be important for randomized testing since it's a common practice to repeat such tests many times. Especially if someone implements a Property Based Testing framework like QuickCheck based on JUnit5.","closed","type: question,","ctapobep","2017-06-10T16:51:27Z","2020-08-12T11:08:02Z"
"","828","My feature branch","","closed","","stonerderek","2017-05-02T04:12:56Z","2017-07-27T18:07:46Z"
"","774","Bump spotless to latest version","","closed","theme: build,","grimreaper","2017-04-06T06:30:04Z","2017-04-06T06:41:10Z"
"","773","Add a plugin to detect out of date plugins","","closed","status: works-as-designed,","grimreaper","2017-04-06T06:28:10Z","2017-04-06T07:25:49Z"
"","772","Use the latest version of the asciidoctorj plugin","","closed","","grimreaper","2017-04-06T06:24:52Z","2017-04-06T07:50:51Z"
"","771","Minor duplicate of a a word","","closed","component: Platform,","grimreaper","2017-04-06T06:03:07Z","2017-04-06T06:40:00Z"
"","574","Move TestRuleFieldSupport.findAnnotatedFields to AnnotationUtils","","closed","component: Platform,","marcphilipp","2016-11-25T16:28:42Z","2016-12-18T13:38:05Z"
"","469","Introduce DiscoverySelector for URIs","","closed","theme: discovery,","sbrannen","2016-08-17T09:53:44Z","2016-11-30T08:54:27Z"
"","347","Introduce support for type safety in ExtensionContext.Store","","closed","type: enhancement,","sbrannen","2016-06-22T14:00:06Z","2016-06-22T16:20:53Z"
"","232","Remove ExtensionPoint, ExtensionRegistrar, Position etc. and simplify implementation of JUnit 5 TestEngine","","closed","theme: execution,","marcphilipp","2016-04-29T08:52:43Z","2016-05-06T10:45:36Z"
"","225","Mention UpForGrabs in Readme","","closed","theme: documentation,","jlink","2016-04-15T11:56:01Z","2016-05-13T14:34:09Z"
"","192","Document support for interface default methods in the User Guide","","closed","type: task,","sbrannen","2016-03-11T13:34:20Z","2016-03-19T17:35:34Z"
"","189","Remove TestId class in favor of String in TestIdentifier","","closed","","marcphilipp","2016-03-11T10:06:55Z","2016-05-24T15:33:48Z"
"","161","Fix typo in JavaDoc of JUnit5 runner","","closed","","rherrmann","2016-02-21T17:08:12Z","2016-02-21T19:39:52Z"
"","154","Travis experiments to fix building pull requests","","closed","status: blocked,","marcphilipp","2016-02-12T14:16:27Z","2016-03-10T07:55:30Z"
"","142","Add Microtests for MethodInvoker","","closed","type: task,","mmerdes","2016-02-01T10:14:23Z","2016-05-08T20:29:25Z"
"","139","Improve exception message when a unique ID cannot be resolved to a class","","closed","type: enhancement,","kcooney","2016-01-27T21:04:49Z","2016-01-28T07:50:17Z"
"","137","Prepare release build infrastructure","","closed","theme: build,","marcphilipp","2016-01-26T11:02:40Z","2016-05-24T15:34:09Z"
"","133","Rename TestEngine.discoverTests to discover","","closed","","jlink","2016-01-22T09:44:33Z","2016-01-22T13:57:12Z"
"","115","Log results of condition evaluation including reason at trace level","","closed","theme: execution,","marcphilipp","2016-01-15T11:13:06Z","2016-01-22T20:19:50Z"
"","110","Add overloaded assertEquals methods for primitive types","","closed","type: enhancement,","marcphilipp","2016-01-13T13:35:43Z","2016-03-11T16:23:00Z"
"","109","Write micro-tests for classes in junit-commons","","closed","type: task,","marcphilipp","2016-01-13T11:32:16Z","2016-05-08T16:58:00Z"
"","102","Move sample-extension to junit5-samples repository","","closed","","marcphilipp","2016-01-11T14:26:55Z","2016-01-19T16:30:09Z"
"","101","Test junit4-runner","","closed","","marcphilipp","2016-01-11T13:42:33Z","2016-01-23T19:18:12Z"
"","100","JUnit5 Runner should implement Filterable","","closed","","sbrannen","2016-01-11T12:41:57Z","2016-01-14T11:17:45Z"
"","91","Assertions.assertAll() should not wrap checked exceptions","","closed","type: bug,","sbrannen","2016-01-06T15:19:02Z","2016-01-06T15:33:55Z"
"","84","Decide if/what/where/how to log","","closed","type: task,","marcphilipp","2016-01-03T21:30:51Z","2016-01-12T13:15:08Z"
"","74","Introduce support for BooleanSupplier in Assumptions","","closed","type: enhancement,","sbrannen","2015-12-19T19:17:39Z","2015-12-19T19:35:18Z"
"","41","Create/Migrate Tests for project 'junit-launcher'","","closed","type: task,","bechte","2015-12-03T12:47:52Z","2016-03-02T11:30:52Z"
"","38","Configure Spotless to add licence headers to Groovy files","","closed","","marcphilipp","2015-12-03T10:01:16Z","2015-12-03T11:44:46Z"
"","31","Reach out to Maven Surefire maintainers regarding JUnit Platform provider","","closed","3rd-party: Maven Surefire,","marcphilipp","2015-12-02T14:48:17Z","2017-03-12T09:54:17Z"
"","29","Investigate more extensible solution for test resolution","","closed","theme: execution,","marcphilipp","2015-12-02T14:36:58Z","2015-12-29T14:42:40Z"
"","26","Set up AsciiDoc-based user manual","","closed","","marcphilipp","2015-12-02T14:30:26Z","2015-12-07T21:42:24Z"
"","15","Polishing","","closed","","hwiba","2015-11-23T05:26:07Z","2015-11-23T05:52:05Z"
"","6","Testexecutors","","closed","","bechte","2015-10-30T03:09:49Z","2016-01-20T09:05:57Z"
"","5","Apply spotless","","closed","","eddumelendez","2015-10-28T23:25:24Z","2015-10-29T07:36:36Z"