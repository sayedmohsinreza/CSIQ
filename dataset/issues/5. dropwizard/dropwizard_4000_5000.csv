"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","1235","Fix issue with validation message caching when a field has more than …","…one constraint  Some hibernate validator constraints (@Min, and @Max come to mind) accept nulls as valid. This motivates you to slap @NotNull on the parameter in addition to @Min (or whatever). The Path -> validation message caching that goes on in ConstraintMessage.java generates bogus messages in these cases - with the right call pattern, you can pass in a non-null-but-still-invalid value and be told ""query param foo may not be null.""  This should fix it. I didn't quite follow the returnValueName-related stuff, but I believe I kept the behavior intact.","closed","","nagl-temporal","2015-08-26T00:17:15Z","2015-08-27T17:16:35Z"
"","1137","Bugfix for: Ensuring that JerseyRequest scoped ClientConfig gets prop…","…agated to HttpUriRequest #939  The change makes the config changes introduced via `Invocation.Builder#property(propertyName, propertyValue)` effective. We want to use this pattern because it is truely request creation scoped. In contrast the current implementation is only effective if config changes are being introduced via `WebTarget#property(propertyName, propertyValue)` which unfortunatly creates a new copy of copy of `org.glassfish.jersey.client.ClientRuntime` which effectively makes it innefective for implementing dynamic configuration (we saw OutOfMemmory errors due to that).  Original change can be founde here: https://github.com/dropwizard/dropwizard/pull/939","closed","","velocipedist","2015-06-26T13:17:07Z","2015-07-01T18:13:08Z"
"","1498","Fix handling multiple headers with the same name","~~As a simple fix, an immutable, single-element list (`Collections.singletonList`) has been wrapped in a mutable one, so it can be extended (if there will be anymore headers with the same name).~~  In this case `Lists.newArrayList` was used to create a mutable `List`, so it can be extended in case of multiple headers with the same name, i.e. `Set-Cookie`.  Fixes #1494","closed","improvement,","patrox","2016-03-29T18:42:39Z","2016-03-31T08:56:36Z"
"","1073","Update an example of using query parameters","~~\* Use a POST, rather then GET, because GET requests should return some values, no 204 return code~~ ~~\* Change name of the parameter to from `date` to `value`~~ - Use `Optional` to handle an omitted parameter - Return a passed date, so Jersey doesn't warn us about 204 error","closed","","arteam","2015-05-24T20:42:06Z","2016-01-24T08:06:44Z"
"","1348","Fix broken links to manual in javadoc","Would be nice if the docs for the latest version were available at `/latest/docs` or something like that we one could point to the docs without specifying a particular version, but lacking that, pointing to `/0.9.1/docs` is the best I can think of.","closed","documentation,","reftel","2015-11-21T12:14:19Z","2015-11-21T12:32:44Z"
"","726","DropwizardResourceConfig#logEndpoints does not work for implemented interfaces","with the current 0.8.0-SNAPSHOT, the registered resource does not get logged on startup when it implements a resource interface:  ``` java @Path(""/"") public interface LoadCalendar {     @GET     @Path(""/foo/{name}"")     public Response load(@PathParam(""name"") String name); }  public class CalendarResourceBean implements Serializable, LoadCalendar {     private static final long serialVersionUID = 1L;      @Override     public Response load(final String name) {         return Response.ok().entity(""name=""+name).build();     } }  ...  environment.jersey().register(new CalendarResourceBean()); ```  This did work in 0.7.1.  Reason is that logEndpoints filters all registered resources that do not have a @Path annotation without checking if an implemented interface does.  NOTE: this only affects the log report, the resource is registered and working fine.","closed","bug,","jangalinski","2014-10-05T09:43:23Z","2015-01-03T15:17:48Z"
"","727","DropwizardResourceConfig#logEndpoints does not work for implemented interfaces","with the current 0.8.0-SNAPSHOT, the registered resource does not get logged on startup when it implements a resource interface:  ``` java @Path(""/"") public interface LoadCalendar {     @GET     @Path(""/foo/{name}"")     public Response load(@PathParam(""name"") String name); }  public class CalendarResourceBean implements Serializable, LoadCalendar {     private static final long serialVersionUID = 1L;      @Override     public Response load(final String name) {         return Response.ok().entity(""name=""+name).build();     } }  ...  environment.jersey().register(new CalendarResourceBean()); ```  This did work in 0.7.1.  Reason is that logEndpoints filters all registered resources that do not have a @Path annotation without checking if an implemented interface does.","closed","","jangalinski","2014-10-05T10:58:26Z","2014-10-05T11:16:59Z"
"","1295","Fix HTTP Client Config User Agent Validation","With Hibernate Validator 5.2.x, when an annotation such as `@NotNull` can be applied to either the inner or wrapper type (in this case, `String` or `Optional`), the code must explicitly define `@UnwrapValidatedValue`  Fixes #1292","closed","bug,","nickbabcock","2015-10-22T15:26:46Z","2015-10-22T15:43:16Z"
"","1218","Add support for Logback's FixedWindowRollingPolicy","With [Fixed Window Rolling Policy](http://logback.qos.ch/manual/appenders.html#FixedWindowRollingPolicy) (archivedLogFilenamePattern: -%i), we have control on the size (maxFileSize) and the number of log files (archiveFileCount) that will reside on the host. We will not have to worry about disk usage warnings.   Recently Size and Time Based Archiving (archivedLogFilenamePattern: -%d-%i) with maxFileSize option has been added as part of commit: 343680b. In this archival policy we have control on the size of each log file (it will rotate the logs and increment the index after maxFileSize is reached), but the archiveFileCount only applies to the number of days worth of files that should be maintained. So on any specific day, files will keep getting rolled over indefinitely with a new index when the maxFileSize is reached. These log files will continue to accumulate as long as it is within the number of days mentioned in archiveFileCount. So we will lose control on the number and size of log files on the host, and disk usage may be a concern.  Proposed Approach:  Include FixedWindowRollingPolicy in FileAppenderFactory. Rolling policy to be used will be based on the archivedLogFilenamePattern -  Time Based Rolling Policy - /tmp/application-%d{yyyy-MM-dd}.log.gz Size and Time Based Rolling Policy - /tmp/application-%d{yyyy-MM-dd}-%i.log.gz Fixed Window Rolling Policy - /tmp/application-%i.log.gz  I hope you find this useful. I'm open to suggestions as well. Thanks.","closed","","dennyac","2015-08-17T05:01:13Z","2015-09-03T20:51:23Z"
"","580","Replacing dropwizard request logging with logback-access","WIP: This isn't ready to merge!  This is an attempt at replacing the Slf4jRequestLog with logback-access, and exposing the log pattern in configuration.  The primary driver behind this is the ability to use more complex log patterns, specifically the %replace(){} function from logback to redact sensitive information from request logs. It also adds the ability to make use of MDC in request logs. - [x] This relies on [#201](https://github.com/qos-ch/logback/pull/201) and [#202](https://github.com/qos-ch/logback/pull/202) being merged in to logback first. - [ ] It specifies logback-access 1.1.3-SNAPSHOT in the dropwizard-logging/pom.xml because I built logback locally with these changes, obviously this would actually be ${logback.version}. - [x] This removes the timeZone configuration field as the timezone is now specified as part of the logFormat configuration field instead. - [x] This needs tests written. I know, I'm a bad person :(  I'm primarily looking for feedback on this. Assuming the logback PRs get accepted, would this be considered?  There is already #370 which has similar goals, but is badly outdated now, and works by adding a new build method to each appender factory, rather than genericising them.","closed","needs code,","reines","2014-05-16T21:55:56Z","2015-04-15T21:12:04Z"
"","584","fix `db dump` to include defaultSchemaName as it currently dumps only public schema on postgresql","while using postgresql, which have options to add multiple schema to the same database(oppose to mySQL), there is no option to mentions which schema you want to dump on migrations.xml, while liquibase provide this option, I was unable to find the same on dropwizard and it is dumping only public schema on migrations.xml","closed","","DheerendraRathor","2014-05-19T07:28:00Z","2014-05-22T09:51:50Z"
"","1488","Missing rollbackOnReturn in DataSourceFactory","While trying to set `rollbackOnReturn` to true in the config, I discovered that such field is not supported, altough a bit similiar `commitOnReturn` is supported:  ```  * Unrecognized field at: database.rollbackOnReturn     Did you mean?:       - commitOnReturn       - validationQuery       - validationInterval       - useFairQueue       - removeAbandoned         [30 more] ```  Both of them are available in the properties which can be set for the Tomcat JDBC Pool, which is used as a backing pool:  https://tomcat.apache.org/tomcat-9.0-doc/jdbc-pool.html#Tomcat_JDBC_Enhanced_Attributes  1.) Are there any reasons why it's not supported ? 2.) As I actually would like to have it - can I create a PR which will add it ?","closed","improvement,","patrox","2016-03-23T11:54:36Z","2016-03-23T17:15:29Z"
"","1505","OffsetDateTimeMapperTest is failing","While testing something completely unrelated, I stumbled upon two failed tests, which IMO seem to fail because of DST offset, as:  ```   OffsetDateTimeMapperTest.mapColumnByIndex:44 expected:<...12-03T10:15:30.375+0[2]:00> but was:<...12-03T10:15:30.375+0[1]:00>   OffsetDateTimeMapperTest.mapColumnByName:25 expected:<...12-03T10:15:30.375+0[2]:00> but was:<...12-03T10:15:30.375+0[1]:00> ```  In the above output you can see that the [`actual`](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/args/OffsetDateTimeMapperTest.java#L22-L22) value:  > 2007-12-03T10:15:30.375+01:00 // doesn't include DST offset  is **NOT** equal to the [`expected`](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/args/OffsetDateTimeMapperTest.java#L25-L25) value:  > 2007-12-03T10:15:30.375+02:00 // includes DST offset  Should I take care of that ?","closed","","patrox","2016-03-31T20:50:57Z","2016-04-02T15:32:04Z"
"","608","fixing typos in the core documentation","while reading your docs, i found two typos.","closed","","derlucas","2014-06-06T16:59:56Z","2014-07-09T15:50:56Z"
"","1511","Add switch syntax to EnvironmentVariableLookup","While `EnvironmentVariableLookup` provides a mechanism to inject environment variables into a config, I often want to _switch_ on the env var rather than injecting the env var's value itself.   It's my understanding that Linux and Windows both forbid the `=` character in environment variable names, which allows us to introduce a new switch syntax to `EnvironmentVariableLookup` without breaking backwards compatibility.   Consider this YAML snippet:  ``` yaml   switchSetting: ${DW_SWITCH_SETTING foo=value-if-foo bar=value-if-bar:-default-value} ```  Because this template contains a `=` character, it would be treated as a switch statement. Cases are separated from one another by whitespace. If `$DW_SWITCH_SETTING` is set to `foo`, then the above would resolve to:  ``` yaml   switchSetting: value-if-foo ```  ---  Would the community be open to a PR to add this functionality to `EnvironmentVariableLookup`?  I have [a working implementation](https://github.com/dropwizard/dropwizard/compare/master...jklukas:envvar-substitutor?expand=1) that I could polish for submission here.  cc @wrobstory","closed","","jklukas","2016-04-06T02:17:53Z","2016-04-06T14:20:32Z"
"","806","Empty config yaml gives null pointer","Where as this is an incorrect yaml for my project it would be nicer to have a good error message as with normal missing properties etc  Exception in thread ""main"" java.lang.NullPointerException     at com.fasterxml.jackson.databind.node.TreeTraversingParser.(TreeTraversingParser.java:71)     at com.fasterxml.jackson.databind.node.TreeTraversingParser.(TreeTraversingParser.java:65)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:125)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:77)     at io.dropwizard.cli.ConfiguredCommand.parseConfiguration(ConfiguredCommand.java:114)     at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:63)     at io.dropwizard.cli.Cli.run(Cli.java:70)     at io.dropwizard.Application.run(Application.java:72)     at info.batey.eventstore.cassandra.CustomerEventsApp.main(CustomerEventsApp.java:11)","closed","","chbatey","2014-12-07T20:44:23Z","2014-12-14T15:24:45Z"
"","860","Updated Integration Test instructions in documentation","When writing tests, I noticed Integration Tests docs are slightly out of date: not using JerseyClientBuilder nor client.target(). So I've updated them accordingly.  This is a cleaned up version of PR #859","closed","","yunspace","2015-01-25T01:41:46Z","2015-02-21T02:31:25Z"
"","859","Update Integration Test documention","When writing tests, I noticed Integration Tests docs are slightly out of date: not using `JerseyClientBuilder` nor `client.target()`. So I've updated them accordingly.","closed","","yunspace","2015-01-23T12:03:48Z","2015-01-25T01:40:32Z"
"","1128","Tests with Grizzly now map exceptions properly","When using Grizzly with `ResourceTestRule`, it didn't know how to map exceptions (it would just return the generic Grizzly error page, which is not useful for testing). This pull request fixes this by turning on `RESPONSE_SET_STATUS_OVER_SEND_ERROR`  Closes #1057 (though it only mentioned protected routes)","closed","bug,","nickbabcock","2015-06-24T13:23:00Z","2015-06-25T00:39:22Z"
"","1514","Hook for writing final substituted config to disk","When using a SubstitutingSourceProvider or other ConfigurationSourceProvider that modifies the byte stream of the config file read from disk, it would be helpful to have a hook to write the final modified byte stream to disk (presumably somewhere in tmpDir).  I think the ""final"" byte stream is generated in [ConfigurationFactory.build()](https://github.com/dropwizard/dropwizard/blob/3d746d21c6e6656a59b26c2a7e92f19e1bb2e9b1/dropwizard-configuration/src/main/java/io/dropwizard/configuration/ConfigurationFactory.java#L90). I don't have a specific design in mind for such a hook, but what I'm looking for is a mechanism to provide a file path where the ConfigurationFactory will attempt to write the stream once it gets created.  This would be useful particularly in the case where the service fails to start up due to some syntax problem with the configuration file. If the stream has been modified, it can be difficult to tell from the source config what's wrong.  I'd be willing to do development work if somebody with more complete knowledge of dropwizard's config machinery can suggest a particular design that would be generically useful.","closed","stale,","jklukas","2016-04-07T13:16:20Z","2019-09-03T00:00:59Z"
"","1254","ProxyServlet and BiDiGzipFilter produces incorrect request","When using a ProxyServlet in Dropwizard the BiDiGzipFilter correctly deserializes requests, however, when proxying them forwards ProxyServlet copies the content-encoding header into the proxyRequest but BiDiGzipFilter does not actually gzip up the request content.  ``` TransparentGzipProxyServlet proxyServlet = new TransparentGzipProxyServlet(""http://localhost:9999"", ""/""); environment.servlets().addServlet(""MyProxyServlet"", proxyServlet).addMapping(""/whatever/*""); ```  If another DW container is listening at http://localhost:9999 it will not be able to deserialize the payload since content-encoding header specifies gzip but the body isn't valid gzip format.  Note: if I register a BiDiGzipFilter via `environment.servlets().addFilter(..).addMappingForServletName(..)` it breaks deserialization if the initial request (since there seems to be 2 separate BiDiGzipFilter now registered on the proxy endpoints).","closed","","dhagge","2015-09-16T20:12:27Z","2016-03-30T03:11:53Z"
"","1209","HTTP 404 status code logged as 200 in access logs","When using a `simple` server, all requests that do not include the `applicationContextPath` which return a 404 response code as seen by the client are logged as HTTP 200 in the access logs.  Example:  ``` $ curl -SI http://localhost:8080/membership/hello-world HTTP/1.1 404 Not Found Date: Fri, 07 Aug 2015 15:55:20 GMT Content-Type: text/html; charset=ISO-8859-1 Cache-Control: must-revalidate,no-cache,no-store Content-Length: 306 ```  In the access logs:  ``` 0:0:0:0:0:0:0:1 - - [07/Aug/2015:15:55:20 +0000] ""HEAD /membership/hello-world HTTP/1.1"" 200 - ""-"" ""curl/7.37.1"" 0 ```","closed","bug,","anuragkapur","2015-08-07T15:56:30Z","2015-11-25T18:29:30Z"
"","769","ManagedPooledDataSource.start() is never invoked when used with Hibernate","When used with Hibernate, ManagedDataSource is never added to the LifecycleEnvironment, thus start method is never invoked and ConnectionPool Metrics are never registered.  During SessionFactory creation in SessionFactoryFactory.build() only SessionFactoryManager is added to the LifecycleEnvironment (SessionFactoryFactory.java line 46),  although SessionFactoryManager.stop() is responsible for stopping the ManagedDataSource, it doesn’t starts it.  Jani","closed","bug,","j4n1","2014-11-09T13:19:55Z","2014-11-09T13:37:30Z"
"","691","SECURITY - Dropwizard is returning too much info when unable to parse JSON","When unable to parse a complex object from JSON, Dropwizard returns the original exception message to the user. The original exception message may include too much information such as fully qualified class names and availability of constructors.  For example, if I have a non-auth resource such as: @Path(""/resource"") @POST public Response postResource(final ComplexObject request) { // Something... }  If I pass ""{true: true}"", I'll get: ""Can not instantiate value of type [simple type, class com.example.complexobjects.api.ComplexObject] from Boolean value; no single-boolean/Boolean-arg constructor/factory method"" This is sometimes wanted (to give developers debug information), and sometimes isn't.  The behavior is determined in the JsonProcessingExceptionMapper.java class.  Possible solutions are: 1. Always give very little information (General JSON parsing error). 2. Allow developers to choose behavior in yml file. 3. Allow developers to easily override existing behavior.","closed","needs code,","meshuamam","2014-08-25T18:15:53Z","2014-08-27T21:58:31Z"
"","811","ViewMessageBodyWriter is registered for too many Media Types","When trying to use a View to render both HTML and JSON, the server will never respond with JSON. This is due to the Produces registration in the ViewMessageBodyWriter being a wild card.  I wasn't able to write a unit test for this as it seems to be more about how DW and Jersey work together to route requests. I didn't see any integration style tests in the repo so, any thoughts on how to codify this in a test so it doesn't regress?  Discussion that pointed me in the right direction: https://groups.google.com/forum/#!topic/dropwizard-user/Ewp1JSd-Lfk","closed","bug,","mcdan","2014-12-12T00:46:05Z","2014-12-14T14:24:35Z"
"","1157","Modifications of 'User-Agent' http header are ignored by DropwizardApacheConnector","When trying to set 'User-Agent' http header for `WebTarget` the changes actually don't take place and the request is always sent with 'User-Agent: ()'  That is due to DropwizardApacheConnector just ignores any modifications of 'User-Agent': https://github.com/dropwizard/dropwizard/blob/master/dropwizard-client/src/main/java/io/dropwizard/client/DropwizardApacheConnector.java#L131  Looks like it relates to a new Dropwizard configuration parameter `httpClient.userAgent` added in v0.7.1: Jun 18 2014  I guess that the proper behavior would be not to ignore user-agent if it was set by the user. I suspect that the main problem was in inability to detect if the user-agent was set by the user or by jersey `ClientRuntime` (in a form of ""Jersey/""). However, even if there is no good way to workaround this then there should be option to turn off this Dropwizard feature. Let's say if `httpClient.userAgent` is set to `null` then `DropwizardApacheConnector` should not ignore User-Agent header.","closed","bug,","parlovich","2015-07-08T13:45:29Z","2015-08-26T01:55:38Z"
"","1508","Missing template logged with DEBUG level","When trying to load a template that does not exist, the error message is logged as `DEBUG`. I think this should be `ERROR` instead.  Happened with Dropwizard v0.9.1.  ``` DEBUG [2016-04-04 12:42:36,082] javax.ws.rs.ext.MessageBodyWriter: Template Error ! freemarker.template.TemplateNotFoundException: Template not found for name ""/com/graylog/gettingstarted/resources/gettingstarted-0.ftl"". ! The name was interpreted by this TemplateLoader: ClassTemplateLoader(resourceLoaderClass=com.graylog.gettingstarted.resources.GettingStartedView, basePackagePath=""/""). ! at freemarker.template.Configuration.getTemplate(Configuration.java:1833) ~[freemarker-2.3.23.jar:2.3.23] ! at freemarker.template.Configuration.getTemplate(Configuration.java:1673) ~[freemarker-2.3.23.jar:2.3.23] ! at io.dropwizard.views.freemarker.FreemarkerViewRenderer.render(FreemarkerViewRenderer.java:72) ~[dropwizard-views-freemarker-0.9.2.jar:0.9.2] ! at io.dropwizard.views.ViewMessageBodyWriter.writeTo(ViewMessageBodyWriter.java:76) [dropwizard-views-0.9.2.jar:0.9.2] ! at io.dropwizard.views.ViewMessageBodyWriter.writeTo(ViewMessageBodyWriter.java:23) [dropwizard-views-0.9.2.jar:0.9.2] ! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.invokeWriteTo(WriterInterceptorExecutor.java:265) [jersey-common-2.22.1.jar:na] ! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.aroundWriteTo(WriterInterceptorExecutor.java:250) [jersey-common-2.22.1.jar:na] ! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) [jersey-common-2.22.1.jar:na] ! at org.glassfish.jersey.server.internal.JsonWithPaddingInterceptor.aroundWriteTo(JsonWithPaddingInterceptor.java:106) [jersey-server-2.22.1.jar:na] ! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) [jersey-common-2.22.1.jar:na] ! at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundWriteTo(MappableExceptionWrapperInterceptor.java:86) [jersey-server-2.22.1.jar:na] ! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) [jersey-common-2.22.1.jar:na] ! at org.glassfish.jersey.message.internal.MessageBodyFactory.writeTo(MessageBodyFactory.java:1130) [jersey-common-2.22.1.jar:na] ! at org.glassfish.jersey.server.ServerRuntime$Responder.writeResponse(ServerRuntime.java:711) [jersey-server-2.22.1.jar:na] ! at org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:444) [jersey-server-2.22.1.jar:na] ! at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:434) [jersey-server-2.22.1.jar:na] ! at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:329) [jersey-server-2.22.1.jar:na] ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271) [jersey-common-2.22.1.jar:na] ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267) [jersey-common-2.22.1.jar:na] ! at org.glassfish.jersey.internal.Errors.process(Errors.java:315) [jersey-common-2.22.1.jar:na] ! at org.glassfish.jersey.internal.Errors.process(Errors.java:297) [jersey-common-2.22.1.jar:na] ! at org.glassfish.jersey.internal.Errors.process(Errors.java:267) [jersey-common-2.22.1.jar:na] ! at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317) [jersey-common-2.22.1.jar:na] ! at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305) [jersey-server-2.22.1.jar:na] ! at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154) [jersey-server-2.22.1.jar:na] ! at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:471) [jersey-container-servlet-core-2.22.1.jar:na] ! at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:425) [jersey-container-servlet-core-2.22.1.jar:na] ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:383) [jersey-container-servlet-core-2.22.1.jar:na] ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:336) [jersey-container-servlet-core-2.22.1.jar:na] ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:223) [jersey-container-servlet-core-2.22.1.jar:na] ! at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49) [dropwizard-jetty-0.9.2.jar:0.9.2] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669) [jetty-servlet-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.servlets.UserAgentFilter.doFilter(UserAgentFilter.java:83) [jetty-servlets-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.servlets.GzipFilter.doFilter(GzipFilter.java:364) [jetty-servlets-9.2.13.v20150730.jar:9.2.13.v20150730] ! at io.dropwizard.jetty.BiDiGzipFilter.doFilter(BiDiGzipFilter.java:132) [dropwizard-jetty-0.9.2.jar:0.9.2] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [jetty-servlet-9.2.13.v20150730.jar:9.2.13.v20150730] ! at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:29) [dropwizard-servlets-0.9.2.jar:0.9.2] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [jetty-servlet-9.2.13.v20150730.jar:9.2.13.v20150730] ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:43) [dropwizard-jersey-0.9.2.jar:0.9.2] ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:38) [dropwizard-jersey-0.9.2.jar:0.9.2] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [jetty-servlet-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585) [jetty-servlet-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) [jetty-servlet-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:240) [metrics-jetty9-3.1.2.jar:3.1.2] ! at io.dropwizard.jetty.ContextRoutingHandler.handle(ContextRoutingHandler.java:38) [dropwizard-jetty-0.9.2.jar:0.9.2] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:95) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:159) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.Server.handle(Server.java:499) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540) [jetty-io-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45] ```","closed","bug,","lennartkoopmann","2016-04-04T12:45:21Z","2016-04-05T07:44:16Z"
"","894","OptionalArgumentFactory and PostgreSQL","When the `Optional` value is absent, PostgreSQL always fails with an exception: `org.postgresql.util.PSQLException: ERROR: could not determine data type of parameter $n`.  But changing `OptionalArgumentFactory` from  ``` java  statement.setNull(position, Types.OTHER); ```  to  ``` java statement.setNull(position, Types.VARCHAR); ```  seems to fix this problem. Anybody else has experienced this?  Postgresql JDBC: `9.4-1200-jdbc41` and `9.3-1102-jdbc41` Dropwizard: All SNAPSHOTS and RC of `0.8.0`","closed","","kilemensi","2015-02-23T15:20:07Z","2017-02-08T01:35:25Z"
"","1130","Allow passing of Configuration object, not just resource path, for `DropwizardAppRule`","When testing it is often much more convenient to just construct `Configuration` object that is needed, exactly as is, instead of hand-crafting a YAML file to store as resource, and/or add dot-path overrides. But currently it seems that only resource path approach is supported.  I will try to come up with a patch that offers alternative mechanism to use where full Configuration POJO instance is passed as is.","closed","improvement,","cowtowncoder","2015-06-24T18:37:25Z","2015-06-28T09:59:32Z"
"","847","either log or throw - remove LOGGER","when starting the server fails, the console stacktrace is redundant, the rethrown Exception is handled by the Application as well. So there shoul be no logging here.","closed","","jangalinski","2015-01-13T23:14:37Z","2015-02-15T22:08:18Z"
"","763","Recursive sub-resource locators gives StackOverflowError","When setting up a recursive sub-resource locator in DW 0.7 it crashes with a stack overflow error.  This is perfectly legal in Jersey and should be ok in DW 0.7. I found this while migrating a DW 0.6 service, and thus it worked earlier.  The problem comes when the startup tries to log the endpoints. In DW 0.6 the subr esource locators was not logged, I guess for just this reason.  I have a naive fix, but I found no good ways to unit test it (yet). The fix is skipping all endpoints that contain a return value identical with the class that contains it - but not considering inheritance and so on. I'll create a pull request, and hopefully this can go into a maintenance of DW 0.7 as well?  ``` java package com.example.helloworld.resources;  import javax.ws.rs.GET; import javax.ws.rs.Path; import javax.ws.rs.PathParam;  @Path(""/"") public class TestResource {     @GET     public String foo() {         return ""bar"";     }      @Path(""/sub"")     public  SubResource subFooLocator() {         return new SubResource();     }      public static class SubResource {         @GET         public String subfoo() {             return ""subbar"";         }           @Path(""{subPath}"")         public SubResource subfoo(@PathParam(""subPath"") String subPath) {             return new SubResource();         }      } } ```  ``` INFO  [2014-10-29 10:03:16,868] com.sun.jersey.server.impl.application.WebApplicationImpl: Initiating Jersey application, version 'Jersey: 1.18.1 02/19/2014 03:28 AM' Exception in thread ""main"" java.lang.StackOverflowError     at java.security.AccessController.doPrivileged(Native Method)     at com.sun.jersey.core.reflection.AnnotatedMethod.findAnnotatedMethod(AnnotatedMethod.java:238)     at com.sun.jersey.core.reflection.AnnotatedMethod.findAnnotatedMethod(AnnotatedMethod.java:230)     at com.sun.jersey.core.reflection.AnnotatedMethod.(AnnotatedMethod.java:113)     at com.sun.jersey.core.reflection.MethodList.(MethodList.java:84)     at com.sun.jersey.core.reflection.MethodList.(MethodList.java:64)     at com.sun.jersey.core.reflection.MethodList.(MethodList.java:60)     at com.sun.jersey.server.impl.modelapi.annotation.IntrospectionModeller.createResource(IntrospectionModeller.java:118)     at io.dropwizard.jersey.DropwizardResourceConfig.populateEndpoints(DropwizardResourceConfig.java:170)     at io.dropwizard.jersey.DropwizardResourceConfig.populateEndpoints(DropwizardResourceConfig.java:190)     at io.dropwizard.jersey.DropwizardResourceConfig.populateEndpoints(DropwizardResourceConfig.java:170)     at io.dropwizard.jersey.DropwizardResourceConfig.populateEndpoints(DropwizardResourceConfig.java:190) ```","closed","","olvesh","2014-10-29T10:13:16Z","2015-04-16T18:55:43Z"
"","1056","Ensures that unit tests always run in 'en_US' locale","When running Dropwizard unit tests on a pt-BR [locale] machine (by example), the validation tests fails.  ``` Failed tests:   getInvalidReturnIs500(io.dropwizard.jersey.validation.ConstraintViolationExceptionMapperTest): expected:<...laze. [length must be between 0 and] 3""]}""> but was:<...laze. [Tamanho deve estar entre 0 e] 3""]}"">   getInvalidBeanParamsIs400(io.dropwizard.jersey.validation.ConstraintViolationExceptionMapperTest): expected:<...:[""blazer.arg0.name [may not be empty]""]}""> but was:<...:[""blazer.arg0.name [Não pode estar vazio]""]}"">   getInvalidQueryParamsIs400(io.dropwizard.jersey.validation.ConstraintViolationExceptionMapperTest): expected:<...rrors"":[""blaze.arg0 [length must be between 3 and] 2147483647""]}""> but was:<...rrors"":[""blaze.arg0 [Tamanho deve estar entre 3 e] 2147483647""]}""> ```  The cause is that the validation messages are changed to use the current machine locale. This simple pull-request adds a surefire plugin parameter to force the tests to run using `en` as language and `US` as region. So, these tests should pass even when you run them on non-`en_US` machines.","closed","","thiagomoretto","2015-05-19T01:43:43Z","2015-05-20T14:30:14Z"
"","778","Freemarker Views output strings in wrong encoding on Windows","When running Dropwizard 0.8-RC1 on Windows 8 with Java 1.8, with a resource that returns a View that uses Freemarker to write HTML, variables are output using the system default encoding, rather than the expected encoding. Details here:   https://groups.google.com/forum/#!topic/dropwizard-user/Uyb9ZlnW2vk  Workaround: don't use Windows.","closed","","wardr","2014-11-14T05:08:37Z","2014-11-20T04:06:10Z"
"","848","Connection request timeout","When number of connections per route reaches the limit (dropwizard default is 1024) a call to fetch the next connection will block. The default timeout is not set so the wait might potentially exceed the expectations. A special case is that the thread could stuck if connections are leaked somewhere instead of generating timeout exception.  This PR adds a way to set this timeout by adding an attribute to HttpClientConfiguration and support for it for both JerseyClient and HttpClient.","closed","improvement,","mabn","2015-01-14T00:32:04Z","2020-08-17T22:03:53Z"
"","1539","JSON deserialization failures should trigger a 400","When Jackson fails to deserialize a JSON object due to object instantiation, it fails with a 500. But I think this invalid formatting error should have triggered a 400 instead. Consider the following example:  ``` java public class DemoModel {      public URL url;  }  @Path(""/demo"") @Consumes(MediaType.APPLICATION_JSON) public class DemoResource {      @POST     public Response test(DemoModel model) {         return Response.ok().build();     }  } ```  Requesting this endpoint with an invalid URL input results in a 500:  ``` curl -v http://localhost:8080/demo -H ""Content-Type: application/json"" -d '{""url"": ""no-scheme.com""}' ```  Relevant stack track is as follows:  ``` java.net.MalformedURLException: no protocol: no-scheme.com     at java.net.URL.(URL.java:586)     at java.net.URL.(URL.java:483)     at java.net.URL.(URL.java:432)     at com.fasterxml.jackson.databind.deser.std.FromStringDeserializer$Std._deserialize(FromStringDeserializer.java:212)     at com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.deserialize(FromStringDeserializer.java:122)     at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:490)     at com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet(FieldProperty.java:101)     at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserialize(SuperSonicBeanDeserializer.java:156)     at com.fasterxml.jackson.databind.ObjectReader._bind(ObjectReader.java:1535)     at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:944)     at com.fasterxml.jackson.jaxrs.base.ProviderBase.readFrom(ProviderBase.java:811)     at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:256)     at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:235)     at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:155)     at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundReadFrom(MappableExceptionWrapperInterceptor.java:74)     at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:155)     at org.glassfish.jersey.message.internal.MessageBodyFactory.readFrom(MessageBodyFactory.java:1085)     at org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:874)     at org.glassfish.jersey.server.ContainerRequest.readEntity(ContainerRequest.java:271)     at org.glassfish.jersey.server.internal.inject.EntityParamValueFactoryProvider$EntityValueFactory.provide(EntityParamValueFactoryProvider.java:96)     at org.glassfish.jersey.server.spi.internal.ParamValueFactoryWithSource.provide(ParamValueFactoryWithSource.java:71)     at org.glassfish.jersey.server.spi.internal.ParameterValueHelper.getParameterValues(ParameterValueHelper.java:94)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:127)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)     at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.process(Errors.java:267)     at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)     at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305)     at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154)     at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473)     at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)     at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1689)     at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:34)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)     at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:50)     at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:44)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)     at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581)     at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1160)     at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511)     at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1092)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)     at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:240)     at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:51)     at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:399)     at io.dropwizard.jetty.BiDiGzipHandler.handle(BiDiGzipHandler.java:68)     at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:56)     at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)     at org.eclipse.jetty.server.Server.handle(Server.java:518)     at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:308)     at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:244)     at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)     at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)     at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)     at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceAndRun(ExecuteProduceConsume.java:246)     at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:156)     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:654)     at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:572)     at java.lang.Thread.run(Thread.java:745) ```  I tried this using the most recent master branch, that is, bf528890def6be0394f038be98282c541dab689f.","closed","","vy","2016-05-10T07:20:18Z","2016-05-11T11:15:44Z"
"","937","Git `autocrlf` Settings","When it comes to windows development support, I've noticed we've gone back and forth about how should `autocrlf` settings be set.  Initially it was agreed that it should be set to `false` since it was just easier to set your editor/IDE to use `LF` as EOL marker than git auto-converting all source files (See #398 and #400). But after many months I've just done a full pull, clean and install and I see everything has been changed again.  Can we have the official Dropwizard recommendation for this? And may be a setting as well if it's supported (even using editorconfig)?  Personnaly, I prefer `autocrlf = false`, and set my ide/editors to use `LF` for EOL marker per project (with the help of editorconfig where applicable).","closed","","kilemensi","2015-03-12T09:53:09Z","2015-10-20T08:35:53Z"
"","1029","Supporting JSR 356, Java API for WebSocket","When improving my Java-skills, I decided I wanted to give the JavaEE7 Websocket API a test-drive. It's very easy to work with and it's just as simple as writing a Servlet or REST-API. Unfortunatly, I could not find the support for this JSR 356 anywhere in Dropwizard.  We are using a Jetty version that supports the new JSR introduced in JavaEE7. Yet, for now, it is not possible to add a WebSocket-class to the Jetty server through the current Dropwizard API.  I have already started to work on this and am almost finished... mostly because I wanted to dive into the Dropwizard sourcecode. However, I read that it was better to open an issue before I make a pull-request... so here i am :-).  Do you think this functionality is something you would want in Dropwizard?","closed","","TomCools","2015-05-03T17:40:04Z","2015-05-18T10:30:31Z"
"","882","Deprecation warning in logback","When I was working on #881, I stumbled upon this warning from logback:  ``` 11:06:19,038 |-WARN in ch.qos.logback.core.FileAppender[file-appender] - This appender no longer admits a layout as a sub-component, set an encoder instead. 11:06:19,038 |-WARN in ch.qos.logback.core.FileAppender[file-appender] - To ensure compatibility, wrapping your layout in LayoutWrappingEncoder. 11:06:19,038 |-WARN in ch.qos.logback.core.FileAppender[file-appender] - See also http://logback.qos.ch/codes.html#layoutInsteadOfEncoder for details ```  The warning message is generated when calling `OutputStreamAppender#setLayout` which is done in the `ConsoleAppenderFactory`, `FileAppenderFactory` and `LoggingFactory`.  The recommended way (from logback) to fix this, is to wrap the layouts in a `LayoutWrappingEncoder`:  ``` LayoutWrappingEncoder encoder = new LayoutWrappingEncoder<>(); encoder.setLayout(layout == null ? buildLayout(context, timeZone) : layout);  appender.setEncoder(encoder); ```  More info can be found here: http://logback.qos.ch/codes.html#layoutInsteadOfEncoder","closed","","eiden","2015-02-18T10:16:34Z","2015-03-01T20:20:50Z"
"","587","Companies using DropWizard","When I use a new project, I always like to see who else is using it.    Would there be any interest in creating some sort of ""Companies using DropWizard page""?  We use DropWizard to create APIs for our game clients, and we'd be really interested to show our support.  Cheers! Brian","closed","","svperfecta","2014-05-21T03:02:05Z","2014-05-22T02:57:32Z"
"","1510","Error building Dropwizard-example","When I try to run  ``` mvn package ```  I get the following errors:  ``` [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-core:jar is missing. @ line 49, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-auth:jar is missing. @ line 53, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-assets:jar is missing. @ line 57, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-http2:jar is missing. @ line 61, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-hibernate:jar is missing. @ line 65, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-migrations:jar is missing. @ line 69, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-views-freemarker:jar is missing. @ line 73, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-views-mustache:jar is missing. @ line 77, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-metrics-graphite:jar is missing. @ line 81, column 21 [ERROR]     'dependencies.dependency.version' for com.h2database:h2:jar is missing. @ line 85, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-testing:jar is missing. @ line 89, column 21 [ERROR]     'dependencies.dependency.version' for org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:jar is missing. @ line 94, column 21 [ERROR]     'dependencies.dependency.version' for org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:jar is missing. @ line 109, column 21 [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException [ERROR] [Help 2] http://cwiki.apache.org/confluence/display/MAVEN/UnresolvableModelException ```  When i add **Latest** or manually find the latest version and add that, I get the following errors:  ``` $ mvn package [INFO] Scanning for projects... [INFO] [INFO] ------------------------------------------------------------------------ [INFO] Building Dropwizard Example Application 1.0.0-rc3-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO] [INFO] --- maven-enforcer-plugin:1.4.1:enforce (enforce) @ dropwizard-example --- [WARNING] Dependency convergence error for org.glassfish.hk2.external:javax.inject:2.4.0-b31 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2         +-org.glassfish.jersey.core:jersey-common:2.22.2           +-org.glassfish.hk2.external:javax.inject:2.4.0-b31 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2         +-org.glassfish.jersey.core:jersey-client:2.22.2           +-org.glassfish.hk2.external:javax.inject:2.4.0-b31 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2         +-org.glassfish.jersey.media:jersey-media-jaxb:2.22.1           +-org.glassfish.hk2.external:javax.inject:2.4.0-b31 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2         +-org.glassfish.hk2.external:javax.inject:2.4.0-b34 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2         +-org.glassfish.hk2:hk2-locator:2.4.0-b31           +-org.glassfish.hk2.external:javax.inject:2.4.0-b31 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.ext:jersey-bean-validation:2.22.1         +-org.glassfish.hk2.external:javax.inject:2.4.0-b31 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.containers:jersey-container-servlet:2.22.1         +-org.glassfish.jersey.containers:jersey-container-servlet-core:2.22.2           +-org.glassfish.hk2.external:javax.inject:2.4.0-b31 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.22.2     +-org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.22.2       +-org.glassfish.hk2.external:javax.inject:2.4.0-b34  [WARNING] Dependency convergence error for org.eclipse.jetty:jetty-http:9.2.13.v20150730 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.eclipse.jetty:jetty-server:9.2.13.v20150730         +-org.eclipse.jetty:jetty-http:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jetty:0.9.2       +-org.eclipse.jetty:jetty-servlets:9.2.13.v20150730         +-org.eclipse.jetty:jetty-http:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jetty:0.9.2       +-org.eclipse.jetty:jetty-http:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-http2:1.0.0-rc2     +-org.eclipse.jetty.http2:http2-server:9.3.8.v20160314       +-org.eclipse.jetty.http2:http2-common:9.3.8.v20160314         +-org.eclipse.jetty.http2:http2-hpack:9.3.8.v20160314           +-org.eclipse.jetty:jetty-http:9.3.8.v20160314  [WARNING] Dependency convergence error for org.eclipse.jetty:jetty-server:9.2.13.v20150730 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.eclipse.jetty:jetty-server:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jetty:0.9.2       +-org.eclipse.jetty:jetty-server:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jetty:0.9.2       +-org.eclipse.jetty:jetty-servlet:9.2.13.v20150730         +-org.eclipse.jetty:jetty-security:9.2.13.v20150730           +-org.eclipse.jetty:jetty-server:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-lifecycle:0.9.2       +-org.eclipse.jetty:jetty-server:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-http2:1.0.0-rc2     +-org.eclipse.jetty.http2:http2-server:9.3.8.v20160314       +-org.eclipse.jetty:jetty-server:9.3.8.v20160314 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-http2:1.0.0-rc2     +-org.eclipse.jetty:jetty-alpn-server:9.3.8.v20160314       +-org.eclipse.jetty:jetty-server:9.3.8.v20160314  [WARNING] Dependency convergence error for io.dropwizard:dropwizard-jetty:0.9.2 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jetty:0.9.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-http2:1.0.0-rc2     +-io.dropwizard:dropwizard-jetty:1.0.0-rc2  [WARNING] Dependency convergence error for org.hamcrest:hamcrest-core:1.3 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-testing:1.0.0-rc2     +-junit:junit:4.12       +-org.hamcrest:hamcrest-core:1.3 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-testing:1.0.0-rc2     +-org.mockito:mockito-core:1.10.19       +-org.hamcrest:hamcrest-core:1.1  [WARNING] Dependency convergence error for org.glassfish.jersey.core:jersey-server:2.22.2 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.ext:jersey-bean-validation:2.22.1         +-org.glassfish.jersey.core:jersey-server:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.containers:jersey-container-servlet:2.22.1         +-org.glassfish.jersey.containers:jersey-container-servlet-core:2.22.2           +-org.glassfish.jersey.core:jersey-server:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.containers:jersey-container-servlet:2.22.1         +-org.glassfish.jersey.core:jersey-server:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.22.2     +-org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.22.2       +-org.glassfish.jersey.core:jersey-server:2.22.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.22.2     +-org.glassfish.jersey.containers:jersey-container-grizzly2-servlet:2.22.2       +-org.glassfish.jersey.core:jersey-server:2.22.2  [WARNING] Dependency convergence error for org.eclipse.jetty:jetty-io:9.2.13.v20150730 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.eclipse.jetty:jetty-server:9.2.13.v20150730         +-org.eclipse.jetty:jetty-io:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jetty:0.9.2       +-org.eclipse.jetty:jetty-servlets:9.2.13.v20150730         +-org.eclipse.jetty:jetty-io:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-http2:1.0.0-rc2     +-org.eclipse.jetty.http2:http2-server:9.3.8.v20160314       +-org.eclipse.jetty.http2:http2-common:9.3.8.v20160314         +-org.eclipse.jetty.http2:http2-hpack:9.3.8.v20160314           +-org.eclipse.jetty:jetty-io:9.3.8.v20160314  [WARNING] Dependency convergence error for org.objenesis:objenesis:2.1 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-testing:1.0.0-rc2     +-org.mockito:mockito-core:1.10.19       +-org.objenesis:objenesis:2.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-testing:1.0.0-rc2     +-org.objenesis:objenesis:2.2  [WARNING] Dependency convergence error for org.slf4j:slf4j-api:1.7.12 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jackson:0.9.2       +-org.slf4j:slf4j-api:1.7.12 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-logging:0.9.2       +-org.slf4j:slf4j-api:1.7.12 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-logging:0.9.2       +-org.slf4j:jul-to-slf4j:1.7.12         +-org.slf4j:slf4j-api:1.7.12 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-logging:0.9.2       +-org.slf4j:log4j-over-slf4j:1.7.12         +-org.slf4j:slf4j-api:1.7.12 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-logging:0.9.2       +-org.slf4j:jcl-over-slf4j:1.7.12         +-org.slf4j:slf4j-api:1.7.12 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-metrics:0.9.2       +-org.slf4j:slf4j-api:1.7.12 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-servlets:0.9.2       +-org.slf4j:slf4j-api:1.7.12 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-servlets:0.9.2       +-io.dropwizard.metrics:metrics-annotation:3.1.2         +-org.slf4j:slf4j-api:1.7.7 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-lifecycle:0.9.2       +-org.slf4j:slf4j-api:1.7.12  [WARNING] Dependency convergence error for org.glassfish.jersey.core:jersey-common:2.22.2 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2         +-org.glassfish.jersey.core:jersey-common:2.22.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2         +-org.glassfish.jersey.core:jersey-client:2.22.2           +-org.glassfish.jersey.core:jersey-common:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2         +-org.glassfish.jersey.media:jersey-media-jaxb:2.22.1           +-org.glassfish.jersey.core:jersey-common:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.ext:jersey-metainf-services:2.22.1         +-org.glassfish.jersey.core:jersey-common:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.ext:jersey-bean-validation:2.22.1         +-org.glassfish.jersey.core:jersey-common:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.containers:jersey-container-servlet:2.22.1         +-org.glassfish.jersey.containers:jersey-container-servlet-core:2.22.2           +-org.glassfish.jersey.core:jersey-common:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.containers:jersey-container-servlet:2.22.1         +-org.glassfish.jersey.core:jersey-common:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.22.2     +-org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.22.2       +-org.glassfish.jersey.core:jersey-common:2.22.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.22.2     +-org.glassfish.jersey.containers:jersey-container-grizzly2-servlet:2.22.2       +-org.glassfish.jersey.core:jersey-common:2.22.2  [WARNING] Dependency convergence error for org.glassfish.jersey.containers:jersey-container-servlet:2.22.1 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.containers:jersey-container-servlet:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.22.2     +-org.glassfish.jersey.containers:jersey-container-grizzly2-servlet:2.22.2       +-org.glassfish.jersey.containers:jersey-container-servlet:2.22.2  [WARNING] Dependency convergence error for io.dropwizard:dropwizard-core:0.9.2 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-auth:0.9.2     +-io.dropwizard:dropwizard-core:0.9.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-assets:0.9.2     +-io.dropwizard:dropwizard-core:0.9.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-hibernate:0.9.2     +-io.dropwizard:dropwizard-db:0.9.2       +-io.dropwizard:dropwizard-core:0.9.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-views-freemarker:0.9.2     +-io.dropwizard:dropwizard-views:0.9.2       +-io.dropwizard:dropwizard-core:0.9.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-testing:1.0.0-rc2     +-io.dropwizard:dropwizard-core:1.0.0-rc2  [WARNING] Dependency convergence error for org.eclipse.jetty:jetty-util:9.2.13.v20150730 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-logging:0.9.2       +-org.eclipse.jetty:jetty-util:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.eclipse.jetty:jetty-server:9.2.13.v20150730         +-org.eclipse.jetty:jetty-io:9.2.13.v20150730           +-org.eclipse.jetty:jetty-util:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.eclipse.jetty:jetty-webapp:9.2.13.v20150730         +-org.eclipse.jetty:jetty-xml:9.2.13.v20150730           +-org.eclipse.jetty:jetty-util:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jetty:0.9.2       +-org.eclipse.jetty:jetty-servlets:9.2.13.v20150730         +-org.eclipse.jetty:jetty-util:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jetty:0.9.2       +-org.eclipse.jetty:jetty-http:9.2.13.v20150730         +-org.eclipse.jetty:jetty-util:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-http2:1.0.0-rc2     +-org.eclipse.jetty.http2:http2-server:9.3.8.v20160314       +-org.eclipse.jetty.http2:http2-common:9.3.8.v20160314         +-org.eclipse.jetty.http2:http2-hpack:9.3.8.v20160314           +-org.eclipse.jetty:jetty-util:9.3.8.v20160314  [WARNING] Dependency convergence error for org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:2.22.2 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-testing:1.0.0-rc2     +-org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:2.22.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:LATEST  [WARNING] Rule 0: org.apache.maven.plugins.enforcer.DependencyConvergence failed with message: Failed while enforcing releasability the error(s) are [ Dependency convergence error for org.glassfish.hk2.external:javax.inject:2.4.0-b31 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2         +-org.glassfish.jersey.core:jersey-common:2.22.2           +-org.glassfish.hk2.external:javax.inject:2.4.0-b31 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2         +-org.glassfish.jersey.core:jersey-client:2.22.2           +-org.glassfish.hk2.external:javax.inject:2.4.0-b31 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2         +-org.glassfish.jersey.media:jersey-media-jaxb:2.22.1           +-org.glassfish.hk2.external:javax.inject:2.4.0-b31 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2         +-org.glassfish.hk2.external:javax.inject:2.4.0-b34 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2         +-org.glassfish.hk2:hk2-locator:2.4.0-b31           +-org.glassfish.hk2.external:javax.inject:2.4.0-b31 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.ext:jersey-bean-validation:2.22.1         +-org.glassfish.hk2.external:javax.inject:2.4.0-b31 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.containers:jersey-container-servlet:2.22.1         +-org.glassfish.jersey.containers:jersey-container-servlet-core:2.22.2           +-org.glassfish.hk2.external:javax.inject:2.4.0-b31 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.22.2     +-org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.22.2       +-org.glassfish.hk2.external:javax.inject:2.4.0-b34 , Dependency convergence error for org.eclipse.jetty:jetty-http:9.2.13.v20150730 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.eclipse.jetty:jetty-server:9.2.13.v20150730         +-org.eclipse.jetty:jetty-http:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jetty:0.9.2       +-org.eclipse.jetty:jetty-servlets:9.2.13.v20150730         +-org.eclipse.jetty:jetty-http:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jetty:0.9.2       +-org.eclipse.jetty:jetty-http:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-http2:1.0.0-rc2     +-org.eclipse.jetty.http2:http2-server:9.3.8.v20160314       +-org.eclipse.jetty.http2:http2-common:9.3.8.v20160314         +-org.eclipse.jetty.http2:http2-hpack:9.3.8.v20160314           +-org.eclipse.jetty:jetty-http:9.3.8.v20160314 , Dependency convergence error for org.eclipse.jetty:jetty-server:9.2.13.v20150730 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.eclipse.jetty:jetty-server:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jetty:0.9.2       +-org.eclipse.jetty:jetty-server:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jetty:0.9.2       +-org.eclipse.jetty:jetty-servlet:9.2.13.v20150730         +-org.eclipse.jetty:jetty-security:9.2.13.v20150730           +-org.eclipse.jetty:jetty-server:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-lifecycle:0.9.2       +-org.eclipse.jetty:jetty-server:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-http2:1.0.0-rc2     +-org.eclipse.jetty.http2:http2-server:9.3.8.v20160314       +-org.eclipse.jetty:jetty-server:9.3.8.v20160314 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-http2:1.0.0-rc2     +-org.eclipse.jetty:jetty-alpn-server:9.3.8.v20160314       +-org.eclipse.jetty:jetty-server:9.3.8.v20160314 , Dependency convergence error for io.dropwizard:dropwizard-jetty:0.9.2 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jetty:0.9.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-http2:1.0.0-rc2     +-io.dropwizard:dropwizard-jetty:1.0.0-rc2 , Dependency convergence error for org.hamcrest:hamcrest-core:1.3 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-testing:1.0.0-rc2     +-junit:junit:4.12       +-org.hamcrest:hamcrest-core:1.3 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-testing:1.0.0-rc2     +-org.mockito:mockito-core:1.10.19       +-org.hamcrest:hamcrest-core:1.1 , Dependency convergence error for org.glassfish.jersey.core:jersey-server:2.22.2 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.ext:jersey-bean-validation:2.22.1         +-org.glassfish.jersey.core:jersey-server:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.containers:jersey-container-servlet:2.22.1         +-org.glassfish.jersey.containers:jersey-container-servlet-core:2.22.2           +-org.glassfish.jersey.core:jersey-server:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.containers:jersey-container-servlet:2.22.1         +-org.glassfish.jersey.core:jersey-server:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.22.2     +-org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.22.2       +-org.glassfish.jersey.core:jersey-server:2.22.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.22.2     +-org.glassfish.jersey.containers:jersey-container-grizzly2-servlet:2.22.2       +-org.glassfish.jersey.core:jersey-server:2.22.2 , Dependency convergence error for org.eclipse.jetty:jetty-io:9.2.13.v20150730 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.eclipse.jetty:jetty-server:9.2.13.v20150730         +-org.eclipse.jetty:jetty-io:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jetty:0.9.2       +-org.eclipse.jetty:jetty-servlets:9.2.13.v20150730         +-org.eclipse.jetty:jetty-io:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-http2:1.0.0-rc2     +-org.eclipse.jetty.http2:http2-server:9.3.8.v20160314       +-org.eclipse.jetty.http2:http2-common:9.3.8.v20160314         +-org.eclipse.jetty.http2:http2-hpack:9.3.8.v20160314           +-org.eclipse.jetty:jetty-io:9.3.8.v20160314 , Dependency convergence error for org.objenesis:objenesis:2.1 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-testing:1.0.0-rc2     +-org.mockito:mockito-core:1.10.19       +-org.objenesis:objenesis:2.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-testing:1.0.0-rc2     +-org.objenesis:objenesis:2.2 , Dependency convergence error for org.slf4j:slf4j-api:1.7.12 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jackson:0.9.2       +-org.slf4j:slf4j-api:1.7.12 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-logging:0.9.2       +-org.slf4j:slf4j-api:1.7.12 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-logging:0.9.2       +-org.slf4j:jul-to-slf4j:1.7.12         +-org.slf4j:slf4j-api:1.7.12 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-logging:0.9.2       +-org.slf4j:log4j-over-slf4j:1.7.12         +-org.slf4j:slf4j-api:1.7.12 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-logging:0.9.2       +-org.slf4j:jcl-over-slf4j:1.7.12         +-org.slf4j:slf4j-api:1.7.12 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-metrics:0.9.2       +-org.slf4j:slf4j-api:1.7.12 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-servlets:0.9.2       +-org.slf4j:slf4j-api:1.7.12 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-servlets:0.9.2       +-io.dropwizard.metrics:metrics-annotation:3.1.2         +-org.slf4j:slf4j-api:1.7.7 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-lifecycle:0.9.2       +-org.slf4j:slf4j-api:1.7.12 , Dependency convergence error for org.glassfish.jersey.core:jersey-common:2.22.2 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2         +-org.glassfish.jersey.core:jersey-common:2.22.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2         +-org.glassfish.jersey.core:jersey-client:2.22.2           +-org.glassfish.jersey.core:jersey-common:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.core:jersey-server:2.22.2         +-org.glassfish.jersey.media:jersey-media-jaxb:2.22.1           +-org.glassfish.jersey.core:jersey-common:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.ext:jersey-metainf-services:2.22.1         +-org.glassfish.jersey.core:jersey-common:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.ext:jersey-bean-validation:2.22.1         +-org.glassfish.jersey.core:jersey-common:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.containers:jersey-container-servlet:2.22.1         +-org.glassfish.jersey.containers:jersey-container-servlet-core:2.22.2           +-org.glassfish.jersey.core:jersey-common:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.containers:jersey-container-servlet:2.22.1         +-org.glassfish.jersey.core:jersey-common:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.22.2     +-org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.22.2       +-org.glassfish.jersey.core:jersey-common:2.22.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.22.2     +-org.glassfish.jersey.containers:jersey-container-grizzly2-servlet:2.22.2       +-org.glassfish.jersey.core:jersey-common:2.22.2 , Dependency convergence error for org.glassfish.jersey.containers:jersey-container-servlet:2.22.1 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.glassfish.jersey.containers:jersey-container-servlet:2.22.1 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.22.2     +-org.glassfish.jersey.containers:jersey-container-grizzly2-servlet:2.22.2       +-org.glassfish.jersey.containers:jersey-container-servlet:2.22.2 , Dependency convergence error for io.dropwizard:dropwizard-core:0.9.2 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-auth:0.9.2     +-io.dropwizard:dropwizard-core:0.9.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-assets:0.9.2     +-io.dropwizard:dropwizard-core:0.9.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-hibernate:0.9.2     +-io.dropwizard:dropwizard-db:0.9.2       +-io.dropwizard:dropwizard-core:0.9.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-views-freemarker:0.9.2     +-io.dropwizard:dropwizard-views:0.9.2       +-io.dropwizard:dropwizard-core:0.9.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-testing:1.0.0-rc2     +-io.dropwizard:dropwizard-core:1.0.0-rc2 , Dependency convergence error for org.eclipse.jetty:jetty-util:9.2.13.v20150730 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-logging:0.9.2       +-org.eclipse.jetty:jetty-util:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.eclipse.jetty:jetty-server:9.2.13.v20150730         +-org.eclipse.jetty:jetty-io:9.2.13.v20150730           +-org.eclipse.jetty:jetty-util:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jersey:0.9.2       +-org.eclipse.jetty:jetty-webapp:9.2.13.v20150730         +-org.eclipse.jetty:jetty-xml:9.2.13.v20150730           +-org.eclipse.jetty:jetty-util:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jetty:0.9.2       +-org.eclipse.jetty:jetty-servlets:9.2.13.v20150730         +-org.eclipse.jetty:jetty-util:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.9.2     +-io.dropwizard:dropwizard-jetty:0.9.2       +-org.eclipse.jetty:jetty-http:9.2.13.v20150730         +-org.eclipse.jetty:jetty-util:9.2.13.v20150730 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-http2:1.0.0-rc2     +-org.eclipse.jetty.http2:http2-server:9.3.8.v20160314       +-org.eclipse.jetty.http2:http2-common:9.3.8.v20160314         +-org.eclipse.jetty.http2:http2-hpack:9.3.8.v20160314           +-org.eclipse.jetty:jetty-util:9.3.8.v20160314 , Dependency convergence error for org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:2.22.2 paths to dependency are: +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-io.dropwizard:dropwizard-testing:1.0.0-rc2     +-org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:2.22.2 and +-io.dropwizard:dropwizard-example:1.0.0-rc3-SNAPSHOT   +-org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:LATEST ] [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 12.540 s [INFO] Finished at: 2016-04-05T09:34:15-04:00 [INFO] Final Memory: 27M/600M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-enforcer-plugin:1.4.1:enforce (enforce) on project dropwizard-example: Some Enforcer rules have failed. Look above for specific messages explaining why the rule failed. -> [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException  ```","closed","","moezubair","2016-04-05T13:34:55Z","2016-04-19T15:09:19Z"
"","767","Jersey Servlet 3.x API support","When I tried to test Jersey async resource  ``` @GET @ManagedAsync public void helloWorld(@Suspended final AsyncResponse ar) {     ar.resume(""Hello world!""); } ```  I got following exception:  ``` java.lang.UnsupportedOperationException: Asynchronous processing not supported on Servlet 2.x container. ... ```  Looking at the `dropwizard-jersey` module `pom.xml` I saw that Jersey container dependency used was `jersey-container-servlet-core`. That module should be used if container implements Servlet API older than 3.0.  For Servlet 3.x support `jersey-container-servlet` module should be used.  ```      org.glassfish.jersey.containers     jersey-container-servlet     ${jersey.version}  ```  https://jersey.java.net/documentation/latest/modules-and-dependencies.html#servlet-app-general  I hope this will be added into the upcoming 0.8.0 release.","closed","feature,","zbiljic","2014-11-01T13:23:45Z","2015-01-18T19:23:53Z"
"","642","dropwizard.github.io -> redirect to dropwizard.github.io/dropwizard","when I just enter the project domain, I get a 404 ...   possible solution: place an empty index file redirecting to the dropwizard directory","closed","improvement,","jangalinski","2014-07-04T10:20:19Z","2014-08-16T12:45:06Z"
"","829","Anonymous task implementation results in (null) on start-up log","When I do  ``` environment.admin().addTask(new Task(""foo""){//implement execute//}) ```  instead of implementing a concrete Task sub-class, I end up with  ``` INFO  [2015-01-01 15:22:44,045] io.dropwizard.setup.AdminEnvironment: tasks =      POST    /tasks/foo (null) ```  on server-start-up.  ""null"" normally would be the implementing class name.   I guess, since it it just an info, a possible solution would be to just leave out the (null) part in that case.  Update: I implemented a solution that falls back to getClass().getName() when getCanonicalName() is null, so the log displays  ```     POST /tasks/foo (my.implementing.Class$1) ```  which allows me to identify the code where the Task is implemented.","closed","bug,","jangalinski","2015-01-01T15:28:24Z","2015-01-03T13:46:00Z"
"","1438","NoClassDefFoundError - RequestLogFactory does not exist","When I changed to 1.0.0, and tried to launch my application, error below occured  > java.lang.NoClassDefFoundError: io/dropwizard/jetty/RequestLogFactory  Stack trace says, that the cause of this problem is in my configuration class, at the class definition.   ``` MyConfiguration.java  import com.fasterxml.jackson.annotation.JsonProperty; import io.dropwizard.Configuration; import io.dropwizard.db.DataSourceFactory; import org.hibernate.validator.constraints.NotEmpty;  import javax.validation.constraints.NotNull;  public class MyConfiguration extends Configuration {      @JsonProperty     @NotNull     private DataSourceFactory database;      @JsonProperty     @NotEmpty     private String someString;       public DataSourceFactory getDataSourceFactory() {         return database;     }      public String getSomeString() {         return someString;     } } ```  Version 0.9.2 works fine with given code, and all my dependencies are set to 1.0.0 version.","closed","bug,","VanDavv","2016-01-31T08:07:45Z","2016-05-31T16:25:13Z"
"","698","dropwizard 0.7.1 syslog throws java.lang.AbstractMethodError","When enable logging appenders syslog in yaml, like     - type: syslog       host: localhost       port: 514       facility: local0       threshold: ALL version 0.7.1 exit with following exception when start the server,  ``` Exception in thread ""main"" java.lang.AbstractMethodError: ch.qos.logback.core.net.SyslogAppenderBase.createOutputStream()Lch/qos/logback/core/net/SyslogOutputStream;     at ch.qos.logback.core.net.SyslogAppenderBase.start(SyslogAppenderBase.java:54)     at ch.qos.logback.classic.net.SyslogAppender.start(SyslogAppender.java:48)     at io.dropwizard.logging.SyslogAppenderFactory.build(SyslogAppenderFactory.java:214)     at io.dropwizard.logging.LoggingFactory.configure(LoggingFactory.java:110)     at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:72)     at io.dropwizard.cli.Cli.run(Cli.java:70)     at io.dropwizard.Application.run(Application.java:72)     at com.cisco.cws.siem.SiemConfigurationService.main(SiemConfigurationService.java:40)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134) ```  But it works just downgrade dropwizard to version 0.7.0","closed","","wendell-bu","2014-09-02T11:16:34Z","2016-08-15T20:48:34Z"
"","643","Access to endpoints information from DropwizardResourceConfig","When Dropwizard starts, it prints into a log very useful information about configured endpoints in the application.  It gives some basic form of a documentation about API. I believe, it would be very convenient to access this information not just from the log, but from the application code too. So we can print it, say, as an HTML page.  ![screenshot from 2014-07-05 23 46 05](https://cloud.githubusercontent.com/assets/1717632/3487443/21e06e90-047e-11e4-9d5c-7e095ce56903.png) I know there special tools for that goal like Swagger, but sometimes minimal information is quite enough.  To achieve this goal, I divided logging and constructing a message in the method _logEndpoints_, set a new name for the method and made it public (it doesn't expose any internal state, so from the security point of view it's fine, I believe).  I didn't make _getResources_ and _getProviders_ public because I don't see a practical value for that.","closed","","arteam","2014-07-05T20:09:20Z","2014-07-06T18:22:03Z"
"","875","Fixed connection leak in CloseableLiquibase","When creating an instance of `CloseableLiquibase`, a jdbc connection is fetched from the supplied datasource. This connection is never closed in `CloseableLiquibase#close`, which results in a connection leak.   I'm not sure if catching `LiquibaseException` is the ""right"" thing to do, let me know if I should just propagate the exception.","closed","bug,","eiden","2015-02-04T23:41:39Z","2015-02-05T10:34:12Z"
"","1077","MustacheViewRenderer template error is misleading","When an error happens in MustacheViewRenderer the message is always ""Template xxxx not found"", leading the user into thinking that the renderer could not find the file when a template compilation could have happened. The exception thrown is also swallowed.  The message to the user could be more specific and the exception should be logged, so that he can see which line of my template is incorrect.","closed","","marcioaguiar","2015-05-25T21:21:08Z","2015-09-01T08:43:52Z"
"","986","Empty Strings are converted into absent Optionals","When an empty string is converted into an `Optional` for FormParam, CookieParam, HeaderParam, or QueryParam, the optional is absent instead of the previous behavior where the empty string would fill the optional.  Closes #983","closed","","nickbabcock","2015-04-10T19:43:21Z","2015-04-13T15:32:13Z"
"","565","Dropwizard Environment class unwantedly encodes Jersey Client request body to format other than UTF.","When a Jersey client is created via the call below I am able to send request to my Mock Server with the request body encoded in a UTF format.  ```  Client client = Client.create() ```  I initially thought it was the way i was setting the headers in the WebResource but I've now isolated the problem to lie someone in Dropwizard's Environment class. If i create my client with the following below then when i post my json its get encoded to a non UTF format.  ```  Client client =  new JerseyClientBuilder().using(Environment).build(); ```","closed","","ladams81","2014-05-09T18:39:34Z","2014-10-23T08:39:48Z"
"","819","No simple solution for secure content when dropwizard is deployed behind a reverse proxy","When a dropwizard application is deployed behind a reverse proxy that also offloads TLS, the http connector is perfectly capable of handling the x-forwarded headers set by the reverse proxy server. So the connector will properly set the javax.servlet.ServletRequest isSecure flag to true when the request was issued using https. However there does not appear to be a simple way to make a resource ""confidential"" in dropwizard. Now you have to write a servlet filter to redirect request to the secure endpoint yourself which is quite annoying, while adding a simple annotation to your resource could handle this for you regardless whether you are using a reverse proxy setup or handle TLS directly in dropwizard.  Related issue: https://stackoverflow.com/questions/27467365/openshift-diy-dropwizard-with-https","closed","stale,","martinborgman","2014-12-21T19:12:20Z","2019-09-04T00:01:13Z"
"","955","Site is not working","What happened ?","closed","","fellz","2015-03-28T10:28:29Z","2015-03-29T11:08:21Z"
"","1411","Make DropwizardAppRule start and stop app only once, even when called recursively","We've found on our projects that builds go significantly faster if we use DropwizardAppRule at the suite level.  This however makes it difficult to run individual tests in isolation.  This pull request makes DropwizardAppRule usable in a recursive way, but only starts and stops the application once for the outer call. With this change we are able to run the entire test suite, or a single test in a single class, and the application will be started/stopped once and only once.  There are usage examples in the javadoc changes.","closed","improvement,","qualidafial","2016-01-13T22:59:26Z","2016-01-14T16:58:26Z"
"","858","Adding JSONP support to Dropwizard conflicting filter order with GZip","We're trying to support JSONP requests in Dropwizard version 0.7.1. We have a custom servlet filter - it's really just a few configuration options built onto the standard [JSONP Filter](https://code.google.com/p/jsonp-java/source/browse/trunk/src/main/java/org/jsonp/JsonpFilter.java). The filter works by registering a HttpServletResponseContentWrapper when the request is detected to be JSONP. This causes the doFilter methods to be applied in a reverse order: the first filter registered is applied last.  The problem arises when we add the filter during our Application `run` method. This is surprisingly before much of the server is bootstrapped due to the `io.dropwizard.cli.EnvironmentCommand` running the Application before its own run method, the latter of which eventually calls the `AbstractServerFactory.createAppServlet`. We have GZIP enabled (because it's awesome, naturally), but that method adds a filter that works in the same way, registering a response wrapper for all requests.  As an aside, the confusing thing about diagnosing this was that responses that were small enough would not get gzipped, presumably because the server decided the response body could fit into a single packet (haven't verified this yet). So on the server side, we could detect that there was response content, and the access log would say it had non-zero bytes, but the requesting agent (cURL, browser, Postman etc.) would claim the response had 0 bytes, and give no indication that it was an invalid GZip content. Just wanted to mention this so anyone else facing a problem with periodic empty response has a clue.  The net effect is that the GZIP filter is applied first by popping the list of registered wrappers and then the response is wrapped in the JSONP callback. This results in a garbled response body like the following:  ``` jQuery13906148_139156091(  ) ```  So my question is, what's the best way to register a filter so the response wrapping takes place before the GZipping? Is there an Application, Environment or CLI class function we could override that would be called after the lengthy chain of various `run` methods had completed? Is there an application startup hook we could register a callback function with?  The `main` method of the Application class looks like it would work, but it feels kind of hacky (we would need some kludges to expose the environment and config) and would hamper our testing framework bootstrapping - or at least cause us to repeat code there in a non-intuitive location and fashion.  Also, we could just turn of GZipping, but that's not ideal for a production service.","closed","","patrick-m-m","2015-01-21T21:20:23Z","2016-06-05T21:27:57Z"
"","1045","Would it be possible to relax the final constraint on ConfiguredCommand?","We're doing some work that means it would be really helpful to be able to extend ConfiguredCommand, specifically to override the run method without having to create an entire copy of the class. Would there be any objections to removing the final modifier on this run method?  https://github.com/dropwizard/dropwizard/blob/2655ac703a0f6ddb4eae933a74dae3d12fde287f/dropwizard-core/src/main/java/io/dropwizard/cli/ConfiguredCommand.java#L60-L82  Thanks","closed","","mikeycmccarthy","2015-05-13T10:11:50Z","2015-05-13T19:48:02Z"
"","1252","Add non-JUnit integration test section","We use DropWizard from Scala and I couldn't find any documentation about how to write integration tests, apart from the discussion in #488.","closed","","MikaelAmborn","2015-09-16T12:04:20Z","2015-09-16T13:33:56Z"
"","1079","Prevent ConcurrentModificationException during stopping logger context","We should acquire the lock when we stop the context, because other threads could change it in the `configure` in the same time, which leads to `ConcurrentModificationException`. I've seen this exception in Travis several times and had to restart builds.  ``` io.dropwizard.testing.app.GzipDefaultVaryBehaviourTest  Time elapsed: 0.001 sec  <<< ERROR! java.util.ConcurrentModificationException     at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)     at java.util.ArrayList$Itr.next(ArrayList.java:851)     at ch.qos.logback.classic.LoggerContext.fireOnStop(LoggerContext.java:323)     at ch.qos.logback.classic.LoggerContext.stop(LoggerContext.java:337)     at io.dropwizard.logging.DefaultLoggingFactory.stop(DefaultLoggingFactory.java:145)     at io.dropwizard.cli.ConfiguredCommand.cleanup(ConfiguredCommand.java:91)     at io.dropwizard.cli.ServerCommand$LifeCycleListener.lifeCycleStopped(ServerCommand.java:55)     at org.eclipse.jetty.util.component.AbstractLifeCycle.setStopped(AbstractLifeCycle.java:206)     at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:90)     at io.dropwizard.testing.DropwizardTestSupport.stopIfRequired(DropwizardTestSupport.java:102)     at io.dropwizard.testing.DropwizardTestSupport.after(DropwizardTestSupport.java:87)     at io.dropwizard.testing.junit.DropwizardAppRule.after(DropwizardAppRule.java:78)     at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:50)     at org.junit.rules.RunRules.evaluate(RunRules.java:20)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.junit.runners.Suite.runChild(Suite.java:128)     at org.junit.runners.Suite.runChild(Suite.java:27)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)     at java.util.concurrent.FutureTask.run(FutureTask.java:266)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ```","closed","","arteam","2015-05-26T20:38:12Z","2016-01-24T08:03:26Z"
"","1167","Configuration fails to parse when inner classes are involved in v0.7.1","We saw this when upgrading from 0.6, where this worked, to 0.7.1, where it doesn't.  See this test, which fails with the exception noted below: https://github.com/dropwizard/dropwizard/compare/release/0.7.x...jimbodude:inner-classes-in-configs-0.7.1  Inner classes in configs appear to be working just fine on latest.  This test passes: https://github.com/dropwizard/dropwizard/compare/master...jimbodude:inner-classes-in-configs-0.9  The failure looks something like:  ``` io.dropwizard.configuration.ConfigurationParsingException: /path/to/test/factory-test-innerclass.yml has an error:   * Failed to parse configuration at: inner.bigNumber; Can not deserialize instance of long out of END_OBJECT token  at [Source: N/A; line: -1, column: -1] (through reference chain: io.dropwizard.configuration.ExampleWithInnerClasses[""inner""]->io.dropwizard.configuration.Inner[""bigNumber""])      at io.dropwizard.configuration.ConfigurationParsingException$Builder.build(ConfigurationParsingException.java:269)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:151)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:77)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:101)     at io.dropwizard.configuration.ConfigurationFactoryTest.handleInnerClasses(ConfigurationFactoryTest.java:262)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)     at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)     at org.junit.runners.ParentRunner.run(ParentRunner.java:309)     at org.junit.runner.JUnitCore.run(JUnitCore.java:160)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140) Caused by: com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of long out of END_OBJECT token  at [Source: N/A; line: -1, column: -1] (through reference chain: io.dropwizard.configuration.ExampleWithInnerClasses[""inner""]->io.dropwizard.configuration.Inner[""bigNumber""])     at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:164)     at com.fasterxml.jackson.databind.DeserializationContext.mappingException(DeserializationContext.java:691)     at com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseLong(StdDeserializer.java:395)     at com.fasterxml.jackson.databind.deser.std.NumberDeserializers$LongDeserializer.deserialize(NumberDeserializers.java:350)     at com.fasterxml.jackson.databind.deser.std.NumberDeserializers$LongDeserializer.deserialize(NumberDeserializers.java:332)     at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:525)     at com.fasterxml.jackson.module.afterburner.deser.SettableObjectFieldProperty.deserializeAndSet(SettableObjectFieldProperty.java:53)     at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserialize(SuperSonicBeanDeserializer.java:149)     at com.fasterxml.jackson.databind.deser.impl.InnerClassProperty.deserializeAndSet(InnerClassProperty.java:102)     at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserializeFromObject(SuperSonicBeanDeserializer.java:209)     at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserialize(SuperSonicBeanDeserializer.java:118)     at com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:2965)     at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:1587)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:125)     ... 31 more ```  We've seen FIELD_NAME instead of the END_OBJECT token too, depending on what the config file looks like.  FIELD_NAME occurs if you have more than one field within the inner class.  It looks like the value part is simply not making it into the tree for some reason.  The workaround for this is simple enough - pull the inner classes out into their own classes, then things work just fine.","closed","","jimbodude","2015-07-13T21:34:11Z","2015-11-25T19:28:23Z"
"","963","Repeatable Benchmarking","We need a way to identify macro performance degradations. Ideally this would be part of the build process. It may also be worth creating doing micro benchmarking.","closed","stale,","carlo-rtr","2015-03-31T16:30:08Z","2019-09-04T00:01:12Z"
"","953","Possible reflective cross site scripting in the io.dropwizard.validation.ConstraintViolations","We have come across a problem in when doing JSR-303 validation, due to dropwizard `ConstraintViolations` adding the InvalidValue back in the message.  The following request payload,  ``` json {    ""url"": ""/address/"" } ```  will result in the following error  ``` json { ""errors"": [ ""url must be a valid URL (was /address/)"" ] } ```  We don't want the ""was"" part.  Based on the investigation we found that it is being appended in the `ConstraintViolations.format()` method.  ``` java public static  String format(ConstraintViolation v) {     if (v.getConstraintDescriptor().getAnnotation() instanceof ValidationMethod) {         final ImmutableList nodes = ImmutableList.copyOf(v.getPropertyPath());         final ImmutableList usefulNodes = nodes.subList(0, nodes.size() - 1);         final String msg = v.getMessage().startsWith(""."") ? ""%s%s"" : ""%s %s"";         return String.format(msg,                              Joiner.on('.').join(usefulNodes),                              v.getMessage()).trim();     } else {         return String.format(""%s %s (was %s)"",                              v.getPropertyPath(),                              v.getMessage(),                              v.getInvalidValue());     } } ```  Is there any way that we can avoid the `invalidValue` from being attached to the message?  If not can we have a feature switch for that?","closed","security,","WarFox","2015-03-25T17:23:22Z","2015-04-25T10:17:28Z"
"","1451","Json Log File Appender","We have a requirement of including json logs creation in production.  I realize this has been brought up before, but I felt like this was a little bit of a different take on the issue.  I was looking for a simple way of implementing this in dropwizard, which was straight forward in prior versions, it seemed like [less of a hack](https://gist.github.com/jamisonhyatt/1bfc824da6882d14b453).  Unfortunately, it feels like the shared interface added in [1415](https://github.com/dropwizard/dropwizard/pull/1415) between access and event logging made adding your own appenders feel much more like a hack.   It is still manageable, but If I want to add a new file appender that does _not_ implement PatternLayout (e.g.,a [JsonLayout](https://github.com/qos-ch/logback-contrib/blob/master/json/classic/src/main/java/ch/qos/logback/contrib/json/classic/JsonLayout.java)) the previous changes force new implementations to ignore the LoggingFactory altogether, because we still need to meet the build() contract of the AppenderFactory because of the way DefaultLoggingFactory() is implemented.  The 2nd option is modifying LayoutFactory to implement a secondary build method, and changing some of the deeper return types from PatternLayout to Layout as downstream consumers don't actually need anything the higher level layouts offer.  See the branch where I did this [here](https://github.com/dropwizard/dropwizard/compare/master...jamisonhyatt:AddJsonFileAppender?expand=1).  Unfortunately, this brings up a secondary issue...where implementers of LayoutFactory must provide implementations for AccessEvent's even if there's no desire for that functionality. I believe this is 'solved' [here](https://github.com/jamisonhyatt/dropwizard/blob/AddJsonFileAppender/dropwizard-request-logging/src/main/java/io/dropwizard/request/logging/layout/LogbackAccessRequestLayoutFactory.java), and will fail fast...but it's still a hack.  In short, I'm not certain tying all future appenders hooked in through the build() of DefaultLoggingFactory to a PatternLayout for both AccessEvents and LoggingEvents leaves much wiggle room for people to cleanly extend their logging solutions.  This is all assuming I didn't miss something glaring for easily implementing the JsonLayout without ignoring the factory.","closed","","jamisonhyatt","2016-02-07T02:28:44Z","2018-03-10T10:02:16Z"
"","997","Specifying the LogBack maxFileSize parameter to limit logfile","We have a requirement at my firm to limit the logfile sizes for our production deployments.   Logback has a maxFileSize parameter than can be specified when using the ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP trigger policy. I took a look in the code, and couldn't find any obvious way to enable this feature.   Any objections to me adding the maxFileSize parameter and submitting a pull request?","closed","needs code,","ckingsbu","2015-04-17T13:12:14Z","2015-09-28T19:36:30Z"
"","750","Daemon threads with environment.lifecycle().scheduledExecutorService()","We experienced a problem with a scheduled task that due to an Exception in App.run() the server wouldn't shut down properly as the thread we created using scheduledExecutorService is not a daemon thread and blocked the vm shutdown.  We solved the issue by registering the tasks with a ThreadFactory which produces daemon threads which is a bit cumbersome:  ``` final String threadName = ""myThread""; final ThreadFactory daemonThreadFactory = new ThreadFactoryBuilder().setDaemon(true).setNameFormat(threadName).build();         environment.lifecycle().scheduledExecutorService(threadName).threadFactory(daemonThreadFactory).build().scheduleAtFixedRate(...); ```  Could you offer another method scheduledExecutorService(String nameFormat, boolean daemon) which allows you to choose easier to use daemon threads?  Of course, there are valid reasons why a job registered there should not be run in a daemon thread, which leads me to the question if in case an Exception in App.run is thrown, all Threads registered via   environment.lifecycle().scheduledExecutorService  should be stopped?  Bernhard","closed","improvement,","BernhardBln","2014-10-20T16:48:42Z","2014-11-09T14:09:18Z"
"","1419","Add a test for parsing HTTPS connector configuration","We currently don't have any tests for this. This change add a check, that the configuration, that we provide in the reference at http://dropwizard.io, is actually correctly parsed.","closed","improvement,","arteam","2016-01-17T14:05:17Z","2016-01-24T08:04:58Z"
"","1007","Close Jersey ExecutorService in tests","We create this executor, so our responsibility to close it.","closed","","arteam","2015-04-22T20:38:09Z","2016-01-24T08:03:40Z"
"","554","When will 0.7.0 be ready for production","We are using 0.6.2 in production.  We'd like to move to 0.7.0 so we can run multiple applications using one jar and different yaml files.  When will 0.7.0 be ready for production?  You might not be able to answer this question specifically, and if not can you give me a range, such as 3 months from now?  We are looking to create two applications and have 2 commands: java -jar jarname.jar app1 app1.yaml   and java -jar jarname.jar app2 app2.yaml   where both applications use the same exact jar.","closed","","lagrwilson","2014-04-28T18:39:03Z","2014-05-12T16:38:19Z"
"","1190","tomcat-jdbc and jdbi lib upgrades","versions: tomcat-jdbc 8.0.24 jdbi 2.63","closed","","profes","2015-07-27T13:37:10Z","2015-07-27T15:50:15Z"
"","786","Documentation error: Hibernate has unnecessary @Override","Using jdk1.8.0_25, the example code for creating a hibernate bundle  ``` private final HibernateBundle hibernate = new HibernateBundle(Person.class) {     @Override     public DataSourceFactory getDataSourceFactory(ExampleConfiguration configuration) {         return configuration.getDataSourceFactory();     } }; ```  results in errors in Eclipse.  Specifically,  ``` The method getDataSourceFactory(ExampleConfiguration) of type new HibernateBundle(){} must override a superclass method ```  My limited understanding suggests that @Override is improper here as the getDataSourceFactory method is abstract.","closed","documentation,","Jerry-Carter","2014-11-20T15:58:09Z","2014-12-27T12:40:13Z"
"","1362","@Auth Injection in ContainerRequestFilter","Using DW 0.9.1: At the moment (perhaps works as designed) it is not possible to inject the @Auth User into some ContainerRequestFilter. For future releases it would be nice to make this possible, perhaps combined with some restrictions for javax.ws.rs.Priorities filter annotation.  ``` WARN  [2015-11-27 17:01:15,758] [main]: /:?:?- unavailable org.glassfish.hk2.api.MultiException: A MultiException has 1 exceptions.  They are: 1. java.lang.IllegalStateException: Not inside a request scope.      at org.jvnet.hk2.internal.Utilities.createService(Utilities.java:2078) ~[hk2-locator-2.4.0-b31.jar:na]     at org.jvnet.hk2.internal.ServiceLocatorImpl.internalGetService(ServiceLocatorImpl.java:767) ~[hk2-locator-2.4.0-b31.jar:na]     at org.jvnet.hk2.internal.ServiceLocatorImpl.getUnqualifiedService(ServiceLocatorImpl.java:774) ~[hk2-locator-2.4.0-b31.jar:na]     at org.jvnet.hk2.internal.IterableProviderImpl.get(IterableProviderImpl.java:111) ~[hk2-locator-2.4.0-b31.jar:na]     at org.glassfish.jersey.server.internal.inject.AbstractContainerRequestValueFactory.getContainerRequest(AbstractContainerRequestValueFactory.java:71) ~[jersey-server-2.22.1.jar:na]     at io.dropwizard.auth.AuthValueFactoryProvider$1.provide(AuthValueFactoryProvider.java:65) ~[dropwizard-auth-0.9.1.jar:0.9.1]     at io.dropwizard.auth.AuthValueFactoryProvider$1.provide(AuthValueFactoryProvider.java:59) ~[dropwizard-auth-0.9.1.jar:0.9.1]     at org.glassfish.jersey.server.internal.inject.ParamInjectionResolver.resolve(ParamInjectionResolver.java:134) ~[jersey-server-2.22.1.jar:na]     at org.jvnet.hk2.internal.Utilities.justInject(Utilities.java:946) ~[hk2-locator-2.4.0-b31.jar:na]     at org.jvnet.hk2.internal.ServiceLocatorImpl.inject(ServiceLocatorImpl.java:981) ~[hk2-locator-2.4.0-b31.jar:na]     at org.jvnet.hk2.internal.ServiceLocatorImpl.createAndInitialize(ServiceLocatorImpl.java:1056) ~[hk2-locator-2.4.0-b31.jar:na]     at org.jvnet.hk2.internal.ServiceLocatorImpl.createAndInitialize(ServiceLocatorImpl.java:1047) ~[hk2-locator-2.4.0-b31.jar:na]     at org.glassfish.jersey.server.model.ResourceMethodInvoker.(ResourceMethodInvoker.java:195) ~[jersey-server-2.22.1.jar:na]     at org.glassfish.jersey.server.model.ResourceMethodInvoker.(ResourceMethodInvoker.java:102) ~[jersey-server-2.22.1.jar:na]     at org.glassfish.jersey.server.model.ResourceMethodInvoker$Builder.build(ResourceMethodInvoker.java:153) ~[jersey-server-2.22.1.jar:na]     at org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder.createInflector(RuntimeModelBuilder.java:128) ~[jersey-server-2.22.1.jar:na]     at org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder.createMethodRouter(RuntimeModelBuilder.java:115) ~[jersey-server-2.22.1.jar:na]     at org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder.createResourceMethodRouters(RuntimeModelBuilder.java:309) ~[jersey-server-2.22.1.jar:na]     at org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder.buildModel(RuntimeModelBuilder.java:198) ~[jersey-server-2.22.1.jar:na]     at org.glassfish.jersey.server.internal.routing.Routing$Builder.buildStage(Routing.java:196) ~[jersey-server-2.22.1.jar:na]     at org.glassfish.jersey.server.ApplicationHandler.initialize(ApplicationHandler.java:587) ~[jersey-server-2.22.1.jar:na]     at org.glassfish.jersey.server.ApplicationHandler.access$500(ApplicationHandler.java:184) ~[jersey-server-2.22.1.jar:na]     at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:350) ~[jersey-server-2.22.1.jar:na]     at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:347) ~[jersey-server-2.22.1.jar:na]     at org.glassfish.jersey.internal.Errors.process(Errors.java:315) ~[jersey-common-2.22.1.jar:na]     at org.glassfish.jersey.internal.Errors.process(Errors.java:297) ~[jersey-common-2.22.1.jar:na]     at org.glassfish.jersey.internal.Errors.processWithException(Errors.java:255) ~[jersey-common-2.22.1.jar:na]     at org.glassfish.jersey.server.ApplicationHandler.(ApplicationHandler.java:347) ~[jersey-server-2.22.1.jar:na]     at org.glassfish.jersey.servlet.WebComponent.(WebComponent.java:390) ~[jersey-container-servlet-core-2.22.1.jar:na]     at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:172) ~[jersey-container-servlet-core-2.22.1.jar:na]     at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:364) ~[jersey-container-servlet-core-2.22.1.jar:na]     at javax.servlet.GenericServlet.init(GenericServlet.java:244) ~[javax.servlet-3.1.1.jar:na]     at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:612) [jetty-servlet-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:395) [jetty-servlet-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:871) [jetty-servlet-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:298) [jetty-servlet-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:741) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730]     at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:103) [metrics-jetty9-3.1.2.jar:3.1.2]     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.server.handler.RequestLogHandler.doStart(RequestLogHandler.java:140) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:232) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.server.Server.start(Server.java:387) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.server.Server.doStart(Server.java:354) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730]     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730]     at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:43) [dropwizard-core-0.9.1.jar:0.9.1]     at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:41) [dropwizard-core-0.9.1.jar:0.9.1]     at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:77) [dropwizard-core-0.9.1.jar:0.9.1]     at io.dropwizard.testing.DropwizardTestSupport.startIfRequired(DropwizardTestSupport.java:212) [dropwizard-testing-0.9.1.jar:0.9.1]     at io.dropwizard.testing.DropwizardTestSupport.before(DropwizardTestSupport.java:115) [dropwizard-testing-0.9.1.jar:0.9.1]     at io.dropwizard.testing.junit.DropwizardAppRule.before(DropwizardAppRule.java:87) [dropwizard-testing-0.9.1.jar:0.9.1]     at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:46) [junit-4.12.jar:4.12]     at org.junit.rules.RunRules.evaluate(RunRules.java:20) [junit-4.12.jar:4.12]     at org.junit.runners.ParentRunner.run(ParentRunner.java:363) [junit-4.12.jar:4.12]     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) [.cp/:na] Caused by: java.lang.IllegalStateException: Not inside a request scope.     at jersey.repackaged.com.google.common.base.Preconditions.checkState(Preconditions.java:173) ~[jersey-guava-2.22.1.jar:na]     at org.glassfish.jersey.process.internal.RequestScope.current(RequestScope.java:233) ~[jersey-common-2.22.1.jar:na]     at org.glassfish.jersey.process.internal.RequestScope.findOrCreate(RequestScope.java:158) ~[jersey-common-2.22.1.jar:na]     at org.jvnet.hk2.internal.Utilities.createService(Utilities.java:2072) ~[hk2-locator-2.4.0-b31.jar:na]     ... 77 common frames omitted ```","closed","stale,","m8r-ubnc5g","2015-11-27T16:16:05Z","2019-09-03T00:01:01Z"
"","949","Custom ExceptionMapper not invoked when Hibernate rollback","Using DW 0.8.0, Java 8  I have one custom exception mapper to handle `hibernate` exception:  ``` java import org.hibernate.exception.ConstraintViolationException;   @Provider public class SQLConstraintViolationExceptionMapper implements ExceptionMapper {     .... } ```  I registered the mapper https://github.com/paukiatwee/budgetapp/blob/master/src/main/java/io/budgetapp/BudgetApplication.java#L143  When `org.hibernate.exception.ConstraintViolationException` exception is thrown when foreign key violation occurred, `SQLConstraintViolationExceptionMapper` is no called.  You can reproduce the problem by running this integration test https://github.com/paukiatwee/budgetapp/blob/master/src/test/java/io/budgetapp/resource/CategoryResourceIT.java#L65  This might caused by https://github.com/dropwizard/dropwizard/blob/master/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/UnitOfWorkApplicationListener.java#L87 exception not handled by container.  Working fine for DW 0.7.0","closed","","paukiatwee","2015-03-21T04:35:34Z","2015-03-30T13:28:15Z"
"","923","@Context not supported at resource class level","Using Dropwizard 0.7.1 - source code for what I'm doing is at https://github.com/michaelbraun/dropwizard-scala-skeleton  I made a dummy jersey provider that provides a simple object - https://github.com/michaelbraun/dropwizard-scala-skeleton/blob/master/src/main/scala/com/example/highroller/services/FooProvider.scala  The resource class I'm testing with is at https://github.com/michaelbraun/dropwizard-scala-skeleton/blob/master/src/main/scala/com/example/highroller/resources/DiceResource.scala - notice I put the following inside the class:   @Context var foo: Foo = null  With this in the class, upon start of the application I get the following when I boot up. (note the errors):  ``` code NFO  [2015-03-05 21:58:59,414] io.dropwizard.assets.AssetsBundle: Registering AssetBundle with name: assets for path /swagger-static/* INFO  [2015-03-05 21:58:59,563] com.sun.jersey.api.core.ScanningResourceConfig: No root resource classes found. INFO  [2015-03-05 21:58:59,564] com.sun.jersey.api.core.ScanningResourceConfig: Provider classes found:   class com.massrelevance.dropwizard.scala.inject.ScalaCollectionsQueryParamInjectableProvider   class io.dropwizard.jersey.guava.OptionalQueryParamInjectableProvider   class io.dropwizard.jersey.guava.OptionalResourceMethodDispatchAdapter   class io.dropwizard.jersey.caching.CacheControlledResourceMethodDispatchAdapter   class com.example.highroller.services.FooProvider INFO  [2015-03-05 21:58:59,566] io.dropwizard.server.ServerFactory: Starting High Roller INFO  [2015-03-05 21:59:00,519] io.dropwizard.jetty.HttpsConnectorFactory: Supported protocols: [SSLv2Hello, SSLv3, TLSv1, TLSv1.1, TLSv1.2] INFO  [2015-03-05 21:59:00,519] io.dropwizard.jetty.HttpsConnectorFactory: Supported cipher suites: [TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_RC4_128_SHA, TLS_ECDHE_RSA_WITH_RC4_128_SHA, SSL_RSA_WITH_RC4_128_SHA, TLS_ECDH_ECDSA_WITH_RC4_128_SHA, TLS_ECDH_RSA_WITH_RC4_128_SHA, TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA, SSL_RSA_WITH_RC4_128_MD5, TLS_EMPTY_RENEGOTIATION_INFO_SCSV, TLS_DH_anon_WITH_AES_128_CBC_SHA256, TLS_ECDH_anon_WITH_AES_128_CBC_SHA, TLS_DH_anon_WITH_AES_128_CBC_SHA, TLS_ECDH_anon_WITH_RC4_128_SHA, SSL_DH_anon_WITH_RC4_128_MD5, TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA, SSL_DH_anon_WITH_3DES_EDE_CBC_SHA, TLS_RSA_WITH_NULL_SHA256, TLS_ECDHE_ECDSA_WITH_NULL_SHA, TLS_ECDHE_RSA_WITH_NULL_SHA, SSL_RSA_WITH_NULL_SHA, TLS_ECDH_ECDSA_WITH_NULL_SHA, TLS_ECDH_RSA_WITH_NULL_SHA, TLS_ECDH_anon_WITH_NULL_SHA, SSL_RSA_WITH_NULL_MD5, SSL_RSA_WITH_DES_CBC_SHA, SSL_DHE_RSA_WITH_DES_CBC_SHA, SSL_DHE_DSS_WITH_DES_CBC_SHA, SSL_DH_anon_WITH_DES_CBC_SHA, SSL_RSA_EXPORT_WITH_RC4_40_MD5, SSL_DH_anon_EXPORT_WITH_RC4_40_MD5, SSL_RSA_EXPORT_WITH_DES40_CBC_SHA, SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA, SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA, SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA, TLS_KRB5_WITH_RC4_128_SHA, TLS_KRB5_WITH_RC4_128_MD5, TLS_KRB5_WITH_3DES_EDE_CBC_SHA, TLS_KRB5_WITH_3DES_EDE_CBC_MD5, TLS_KRB5_WITH_DES_CBC_SHA, TLS_KRB5_WITH_DES_CBC_MD5, TLS_KRB5_EXPORT_WITH_RC4_40_SHA, TLS_KRB5_EXPORT_WITH_RC4_40_MD5, TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA, TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5] INFO  [2015-03-05 21:59:00,622] org.eclipse.jetty.setuid.SetUIDListener: Opened application@39c748e3{HTTP/1.1}{0.0.0.0:8281} INFO  [2015-03-05 21:59:00,622] org.eclipse.jetty.setuid.SetUIDListener: Opened application@4a824cb7{SSL-HTTP/1.1}{0.0.0.0:8284} INFO  [2015-03-05 21:59:00,622] org.eclipse.jetty.setuid.SetUIDListener: Opened admin@307aa898{HTTP/1.1}{0.0.0.0:8282} INFO  [2015-03-05 21:59:00,625] org.eclipse.jetty.server.Server: jetty-9.0.7.v20131107 INFO  [2015-03-05 21:59:00,831] com.sun.jersey.server.impl.application.WebApplicationImpl: Initiating Jersey application, version 'Jersey: 1.18.1 02/19/2014 03:28 AM' INFO  [2015-03-05 21:59:00,953] io.dropwizard.jersey.DropwizardResourceConfig: The following paths were found for the configured resources:      GET     /swagger (io.federecio.dropwizard.swagger.SwaggerResource)     GET     /api-docs (com.wordnik.swagger.jaxrs.listing.ApiListingResourceJSON)     GET     /api-docs/{route: .+} (com.wordnik.swagger.jaxrs.listing.ApiListingResourceJSON)     GET     /dice (com.example.highroller.resources.DiceResource)     GET     /dice/rollMany (com.example.highroller.resources.DiceResource)     GET     /dice/settings (com.example.highroller.resources.DiceResource)     GET     /dice/testFoo (com.example.highroller.resources.DiceResource)     PUT     /dice/updateEngineConf (com.example.highroller.resources.DiceResource)  ERROR [2015-03-05 21:59:01,248] com.sun.jersey.spi.inject.Errors: The following errors and warnings have been detected with resource and/or provider classes:   SEVERE: Missing dependency for field: private com.example.highroller.services.Foo com.example.highroller.resources.DiceResource.foo Exception in thread ""main"" javax.servlet.ServletException: com.sun.jersey.spi.container.servlet.ServletContainer-33b61489@5f6d88c2==com.sun.jersey.spi.container.servlet.ServletContainer,1,false     at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:561)     at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:349)     at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:812)     at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:288)     at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:732)     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69)     at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118)     at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100)     at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60)     at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:92)     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69)     at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118)     at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100)     at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60)     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69)     at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118)     at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100)     at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60)     at org.eclipse.jetty.server.handler.RequestLogHandler.doStart(RequestLogHandler.java:131)     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69)     at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118)     at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100)     at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60)     at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:233)     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69)     at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118)     at org.eclipse.jetty.server.Server.start(Server.java:342) WARN  [2015-03-05 21:59:01,251] /: unavailable ! com.sun.jersey.spi.inject.Errors$ErrorMessagesException: null ! at com.sun.jersey.spi.inject.Errors.processErrorMessages(Errors.java:170) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.inject.Errors.postProcess(Errors.java:136) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.inject.Errors.processWithErrors(Errors.java:199) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:795) ~[jersey-server-1.18.1.jar:1.18.1] ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:790) ~[jersey-server-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.initiate(ServletContainer.java:491) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer$InternalWebComponent.initiate(ServletContainer.java:321) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.load(WebComponent.java:605) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.init(WebComponent.java:207) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:376) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:559) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at javax.servlet.GenericServlet.init(GenericServlet.java:244) ~[javax.servlet-3.0.0.v201112011016.jar:na] ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:540) [jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:349) [jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:812) [jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:288) [jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:732) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:92) [metrics-jetty9-3.0.2.jar:3.0.2] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-ut  at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100)il-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.RequestLogHandler.doStart(RequestLogHandler.java:131) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:233) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.Server.start(Server.java:342) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.Server.doStart(Server.java:290) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:43) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:43) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:76) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.Cli.run(Cli.java:70) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.Application.run(Application.java:72) [dropwizard-core-0.7.1.jar:0.7.1] ! at com.massrelevance.dropwizard.ScalaApplication.main(ScalaApplication.scala:8) [dropwizard-scala_2.10-0.7.1.jar:0.7.1] ! at com.example.highroller.HighRollerApp.main(HighRollerApp.scala) [scala-dropwizard-example-1.0-SNAPSHOT.jar:na]      at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60)     at org.eclipse.jetty.server.Server.doStart(Server.java:290)     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69)     at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:43)     at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:43)     at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:76)     at io.dropwizard.cli.Cli.run(Cli.java:70)     at io.dropwizard.Application.run(Application.java:72)     at com.massrelevance.dropwizard.ScalaApplication.main(ScalaApplication.scala:8)     at com.example.highroller.HighRollerApp.main(HighRollerApp.scala) Caused by: com.sun.jersey.spi.inject.Errors$ErrorMessagesException     at com.sun.jersey.spi.inject.Errors.processErrorMessages(Errors.java:170)     at com.sun.jersey.spi.inject.Errors.postProcess(Errors.java:136)     at com.sun.jersey.spi.inject.Errors.processWithErrors(Errors.java:199) WARN  [2015-03-05 21:59:01,253] org.eclipse.jetty.util.component.AbstractLifeCycle: FAILED i.d.j.MutableServletContextHandler@3cd6fd7f{/,null,STARTING}: javax.servlet.ServletException: com.sun.jersey.spi.container.servlet.ServletContainer-33b61489@5f6d88c2==com.sun.jersey.spi.container.servlet.ServletContainer,1,false ! com.sun.jersey.spi.inject.Errors$ErrorMessagesException: null ! at com.sun.jersey.spi.inject.Errors.processErrorMessages(Errors.java:170) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.inject.Errors.postProcess(Errors.java:136) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.inject.Errors.processWithErrors(Errors.java:199) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:795) ~[jersey-server-1.18.1.jar:1.18.1] ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:790) ~[jersey-server-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.initiate(ServletContainer.java:491) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer$InternalWebComponent.initiate(ServletContainer.java:321) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.load(WebComponent.java:605) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.init(WebComponent.java:207) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:376) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:559) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at javax.servlet.GenericServlet.init(GenericServlet.java:244) ~[javax.servlet-3.0.0.v201112011016.jar:na] ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:540) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! ... 37 common frames omitted ! Causing: javax.servlet.ServletException: com.sun.jersey.spi.container.servlet.ServletContainer-33b61489@5f6d88c2==com.sun.jersey.spi.container.servlet.ServletContainer,1,false ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:561) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:349) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:812) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:288) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:732) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:92) [metrics-jetty9-3.0.2.jar:3.0.2] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.RequestLogHandler.doStart(RequestLogHandler.java:131) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:233) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.Server.start(Server.java:342) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.Server.doStart(Server.java:290) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:43) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:43) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:76) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.Cli.run(Cli.java:70) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.Application.run(Application.java:72) [dropwizard-core-0.7.1.jar:0.7.1] ! at com.massrelevance.dropwizard.ScalaApplication.main(ScalaApplication.scala:8) [dropwizard-scala_2.10-0.7.1.jar:0.7.1] ! at com.example.highroller.HighRollerApp.main(HighRollerApp.scala) [scala-dropwizard-example-1.0-SNAPSHOT.jar:na]     at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:795)     at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:790)     at com.sun.jersey.spi.container.servlet.ServletContainer.initiate(ServletContainer.java:491)     at com.sun.jersey.spi.container.servlet.ServletContainer$InternalWebComponent.initiate(ServletContainer.java:321)     at com.sun.jersey.spi.container.servlet.WebComponent.load(WebComponent.java:605)     at com.sun.jersey.spi.container.servlet.WebComponent.init(WebComponent.java:207)     at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:376)     at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:559)     at javax.servlet.GenericServlet.init(GenericServlet.java:244)     at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:540)     ... 37 more WARN  [2015-03-05 21:59:01,253] org.eclipse.jetty.util.component.AbstractLifeCycle: FAILED com.codahale.metrics.jetty9.InstrumentedHandler@469cbc0d: javax.servlet.ServletException: com.sun.jersey.spi.container.servlet.ServletContainer-33b61489@5f6d88c2==com.sun.jersey.spi.container.servlet.ServletContainer,1,false ! com.sun.jersey.spi.inject.Errors$ErrorMessagesException: null ! at com.sun.jersey.spi.inject.Errors.processErrorMessages(Errors.java:170) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.inject.Errors.postProcess(Errors.java:136) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.inject.Errors.processWithErrors(Errors.java:199) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:795) ~[jersey-server-1.18.1.jar:1.18.1] ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:790) ~[jersey-server-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.initiate(ServletContainer.java:491) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer$InternalWebComponent.initiate(ServletContainer.java:321) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.load(WebComponent.java:605) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.init(WebComponent.java:207) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:376) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:559) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at javax.servlet.GenericServlet.init(GenericServlet.java:244) ~[javax.servlet-3.0.0.v201112011016.jar:na] ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:540) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! ... 37 common frames omitted ! Causing: javax.servlet.ServletException: com.sun.jersey.spi.container.servlet.ServletContainer-33b61489@5f6d88c2==com.sun.jersey.spi.container.servlet.ServletContainer,1,false ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:561) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:349) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:812) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:288) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:732) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:92) ~[metrics-jetty9-3.0.2.jar:3.0.2] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.RequestLogHandler.doStart(RequestLogHandler.java:131) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:233) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.Server.start(Server.java:342) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.Server.doStart(Server.java:290) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:43) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:43) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:76) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.Cli.run(Cli.java:70) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.Application.run(Application.java:72) [dropwizard-core-0.7.1.jar:0.7.1] ! at com.massrelevance.dropwizard.ScalaApplication.main(ScalaApplication.scala:8) [dropwizard-scala_2.10-0.7.1.jar:0.7.1] ! at com.example.highroller.HighRollerApp.main(HighRollerApp.scala) [scala-dropwizard-example-1.0-SNAPSHOT.jar:na] WARN  [2015-03-05 21:59:01,253] org.eclipse.jetty.util.component.AbstractLifeCycle: FAILED io.dropwizard.jetty.RoutingHandler@5bfe1db2: javax.servlet.ServletException: com.sun.jersey.spi.container.servlet.ServletContainer-33b61489@5f6d88c2==com.sun.jersey.spi.container.servlet.ServletContainer,1,false ! com.sun.jersey.spi.inject.Errors$ErrorMessagesException: null ! at com.sun.jersey.spi.inject.Errors.processErrorMessages(Errors.java:170) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.inject.Errors.postProcess(Errors.java:136) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.inject.Errors.processWithErrors(Errors.java:199) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:795) ~[jersey-server-1.18.1.jar:1.18.1] ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:790) ~[jersey-server-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.initiate(ServletContainer.java:491) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer$InternalWebComponent.initiate(ServletContainer.java:321) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.load(WebComponent.java:605) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.init(WebComponent.java:207) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:376) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:559) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at javax.servlet.GenericServlet.init(GenericServlet.java:244) ~[javax.servlet-3.0.0.v201112011016.jar:na] ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:540) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! ... 37 common frames omitted ! Causing: javax.servlet.ServletException: com.sun.jersey.spi.container.servlet.ServletContainer-33b61489@5f6d88c2==com.sun.jersey.spi.container.servlet.ServletContainer,1,false ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:561) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:349) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:812) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:288) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:732) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:92) ~[metrics-jetty9-3.0.2.jar:3.0.2] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.RequestLogHandler.doStart(RequestLogHandler.java:131) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:233) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.Server.start(Server.java:342) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.Server.doStart(Server.java:290) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:43) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:43) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:76) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.Cli.run(Cli.java:70) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.Application.run(Application.java:72) [dropwizard-core-0.7.1.jar:0.7.1] ! at com.massrelevance.dropwizard.ScalaApplication.main(ScalaApplication.scala:8) [dropwizard-scala_2.10-0.7.1.jar:0.7.1] ! at com.example.highroller.HighRollerApp.main(HighRollerApp.scala) [scala-dropwizard-example-1.0-SNAPSHOT.jar:na] WARN  [2015-03-05 21:59:01,254] org.eclipse.jetty.util.component.AbstractLifeCycle: FAILED org.eclipse.jetty.server.handler.RequestLogHandler@84fc04d: javax.servlet.ServletException: com.sun.jersey.spi.container.servlet.ServletContainer-33b61489@5f6d88c2==com.sun.jersey.spi.container.servlet.ServletContainer,1,false ! com.sun.jersey.spi.inject.Errors$ErrorMessagesException: null ! at com.sun.jersey.spi.inject.Errors.processErrorMessages(Errors.java:170) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.inject.Errors.postProcess(Errors.java:136) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.inject.Errors.processWithErrors(Errors.java:199) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:795) ~[jersey-server-1.18.1.jar:1.18.1] ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:790) ~[jersey-server-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.initiate(ServletContainer.java:491) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer$InternalWebComponent.initiate(ServletContainer.java:321) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.load(WebComponent.java:605) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.init(WebComponent.java:207) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:376) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:559) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at javax.servlet.GenericServlet.init(GenericServlet.java:244) ~[javax.servlet-3.0.0.v201112011016.jar:na] ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:540) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! ... 37 common frames omitted ! Causing: javax.servlet.ServletException: com.sun.jersey.spi.container.servlet.ServletContainer-33b61489@5f6d88c2==com.sun.jersey.spi.container.servlet.ServletContainer,1,false ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:561) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:349) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:812) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:288) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:732) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:92) ~[metrics-jetty9-3.0.2.jar:3.0.2] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.RequestLogHandler.doStart(RequestLogHandler.java:131) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:233) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.Server.start(Server.java:342) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.Server.doStart(Server.java:290) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:43) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:43) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:76) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.Cli.run(Cli.java:70) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.Application.run(Application.java:72) [dropwizard-core-0.7.1.jar:0.7.1] ! at com.massrelevance.dropwizard.ScalaApplication.main(ScalaApplication.scala:8) [dropwizard-scala_2.10-0.7.1.jar:0.7.1] ! at com.example.highroller.HighRollerApp.main(HighRollerApp.scala) [scala-dropwizard-example-1.0-SNAPSHOT.jar:na] WARN  [2015-03-05 21:59:01,254] org.eclipse.jetty.util.component.AbstractLifeCycle: FAILED org.eclipse.jetty.server.handler.StatisticsHandler@2bda037e: javax.servlet.ServletException: com.sun.jersey.spi.container.servlet.ServletContainer-33b61489@5f6d88c2==com.sun.jersey.spi.container.servlet.ServletContainer,1,false ! com.sun.jersey.spi.inject.Errors$ErrorMessagesException: null ! at com.sun.jersey.spi.inject.Errors.processErrorMessages(Errors.java:170) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.inject.Errors.postProcess(Errors.java:136) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.inject.Errors.processWithErrors(Errors.java:199) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:795) ~[jersey-server-1.18.1.jar:1.18.1] ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:790) ~[jersey-server-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.initiate(ServletContainer.java:491) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer$InternalWebComponent.initiate(ServletContainer.java:321) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.load(WebComponent.java:605) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.init(WebComponent.java:207) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:376) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:559) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at javax.servlet.GenericServlet.init(GenericServlet.java:244) ~[javax.servlet-3.0.0.v201112011016.jar:na] ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:540) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! ... 37 common frames omitted ! Causing: javax.servlet.ServletException: com.sun.jersey.spi.container.servlet.ServletContainer-33b61489@5f6d88c2==com.sun.jersey.spi.container.servlet.ServletContainer,1,false ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:561) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:349) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:812) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:288) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:732) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:92) ~[metrics-jetty9-3.0.2.jar:3.0.2] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.RequestLogHandler.doStart(RequestLogHandler.java:131) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:233) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.Server.start(Server.java:342) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.Server.doStart(Server.java:290) [jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) [jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:43) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:43) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:76) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.Cli.run(Cli.java:70) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.Application.run(Application.java:72) [dropwizard-core-0.7.1.jar:0.7.1] ! at com.massrelevance.dropwizard.ScalaApplication.main(ScalaApplication.scala:8) [dropwizard-scala_2.10-0.7.1.jar:0.7.1] ! at com.example.highroller.HighRollerApp.main(HighRollerApp.scala) [scala-dropwizard-example-1.0-SNAPSHOT.jar:na] WARN  [2015-03-05 21:59:01,255] org.eclipse.jetty.util.component.AbstractLifeCycle: FAILED org.eclipse.jetty.server.Server@761b5baf: javax.servlet.ServletException: com.sun.jersey.spi.container.servlet.ServletContainer-33b61489@5f6d88c2==com.sun.jersey.spi.container.servlet.ServletContainer,1,false ! com.sun.jersey.spi.inject.Errors$ErrorMessagesException: null ! at com.sun.jersey.spi.inject.Errors.processErrorMessages(Errors.java:170) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.inject.Errors.postProcess(Errors.java:136) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.inject.Errors.processWithErrors(Errors.java:199) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:795) ~[jersey-server-1.18.1.jar:1.18.1] ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:790) ~[jersey-server-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.initiate(ServletContainer.java:491) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer$InternalWebComponent.initiate(ServletContainer.java:321) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.load(WebComponent.java:605) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.init(WebComponent.java:207) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:376) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:559) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at javax.servlet.GenericServlet.init(GenericServlet.java:244) ~[javax.servlet-3.0.0.v201112011016.jar:na] ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:540) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! ... 37 common frames omitted ! Causing: javax.servlet.ServletException: com.sun.jersey.spi.container.servlet.ServletContainer-33b61489@5f6d88c2==com.sun.jersey.spi.container.servlet.ServletContainer,1,false ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:561) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:349) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:812) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:288) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:732) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:92) ~[metrics-jetty9-3.0.2.jar:3.0.2] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.RequestLogHandler.doStart(RequestLogHandler.java:131) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:233) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.Server.start(Server.java:342) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.Server.doStart(Server.java:290) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:43) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:43) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:76) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.Cli.run(Cli.java:70) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.Application.run(Application.java:72) [dropwizard-core-0.7.1.jar:0.7.1] ! at com.massrelevance.dropwizard.ScalaApplication.main(ScalaApplication.scala:8) [dropwizard-scala_2.10-0.7.1.jar:0.7.1] ! at com.example.highroller.HighRollerApp.main(HighRollerApp.scala) [scala-dropwizard-example-1.0-SNAPSHOT.jar:na] ERROR [2015-03-05 21:59:01,255] io.dropwizard.cli.ServerCommand: Unable to start server, shutting down ! com.sun.jersey.spi.inject.Errors$ErrorMessagesException: null ! at com.sun.jersey.spi.inject.Errors.processErrorMessages(Errors.java:170) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.inject.Errors.postProcess(Errors.java:136) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.inject.Errors.processWithErrors(Errors.java:199) ~[jersey-core-1.18.1.jar:1.18.1] ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:795) ~[jersey-server-1.18.1.jar:1.18.1] ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:790) ~[jersey-server-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.initiate(ServletContainer.java:491) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer$InternalWebComponent.initiate(ServletContainer.java:321) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.load(WebComponent.java:605) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.init(WebComponent.java:207) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:376) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:559) ~[jersey-servlet-1.18.1.jar:1.18.1] ! at javax.servlet.GenericServlet.init(GenericServlet.java:244) ~[javax.servlet-3.0.0.v201112011016.jar:na] ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:540) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! ... 37 common frames omitted ! Causing: javax.servlet.ServletException: com.sun.jersey.spi.container.servlet.ServletContainer-33b61489@5f6d88c2==com.sun.jersey.spi.container.servlet.ServletContainer,1,false ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:561) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:349) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:812) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:288) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:732) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:92) ~[metrics-jetty9-3.0.2.jar:3.0.2] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.RequestLogHandler.doStart(RequestLogHandler.java:131) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:233) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.Server.start(Server.java:342) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.server.Server.doStart(Server.java:290) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107] ! at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:43) ~[dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:43) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:76) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.cli.Cli.run(Cli.java:70) [dropwizard-core-0.7.1.jar:0.7.1] ! at io.dropwizard.Application.run(Application.java:72) [dropwizard-core-0.7.1.jar:0.7.1] ! at com.massrelevance.dropwizard.ScalaApplication.main(ScalaApplication.scala:8) [dropwizard-scala_2.10-0.7.1.jar:0.7.1] ! at com.example.highroller.HighRollerApp.main(HighRollerApp.scala) [scala-dropwizard-example-1.0-SNAPSHOT.jar:na] ```  Now if I were to instead put the @Context foo: Foo inside of the rollOneFoo() method as a parameter, everything works perfectly.  Using Jersey+Tomcat as my container, I've done this before with using a provider and adding @Context annotated variable at the object level rather than the method, and it works fine.   Not sure why this should be breaking. Help would be appreciated. Thanks!!","closed","","michaelbraun","2015-03-05T22:03:18Z","2015-03-27T21:33:36Z"
"","1222","NPE in DropwizardResourceConfig$EndpointLogger.populate","Using 0.9.0-rc3, I'm getting an NPE at startup. Here is the stack trace.  ``` ! java.lang.NullPointerException: null ! at io.dropwizard.jersey.DropwizardResourceConfig$EndpointLogger.populate(DropwizardResourceConfig.java:173) ~[dropwizard-jersey-0.9.0-rc3.jar:0.9.0-rc3] ! at io.dropwizard.jersey.DropwizardResourceConfig$EndpointLogger.populate(DropwizardResourceConfig.java:165) ~[dropwizard-jersey-0.9.0-rc3.jar:0.9.0-rc3] ! at io.dropwizard.jersey.DropwizardResourceConfig$EndpointLogger.populate(DropwizardResourceConfig.java:184) ~[dropwizard-jersey-0.9.0-rc3.jar:0.9.0-rc3] ! at io.dropwizard.jersey.DropwizardResourceConfig$EndpointLogger.populate(DropwizardResourceConfig.java:165) ~[dropwizard-jersey-0.9.0-rc3.jar:0.9.0-rc3] ! at io.dropwizard.jersey.DropwizardResourceConfig$EndpointLogger.populate(DropwizardResourceConfig.java:161) ~[dropwizard-jersey-0.9.0-rc3.jar:0.9.0-rc3] ! at io.dropwizard.jersey.DropwizardResourceConfig.getEndpointsInfo(DropwizardResourceConfig.java:130) ~[dropwizard-jersey-0.9.0-rc3.jar:0.9.0-rc3] ! at io.dropwizard.jersey.DropwizardResourceConfig.logComponents(DropwizardResourceConfig.java:80) ~[dropwizard-jersey-0.9.0-rc3.jar:0.9.0-rc3] ! at io.dropwizard.jersey.DropwizardResourceConfig$ComponentLoggingListener.onEvent(DropwizardResourceConfig.java:240) ~[dropwizard-jersey-0.9.0-rc3.jar:0.9.0-rc3] ! at org.glassfish.jersey.server.internal.monitoring.CompositeApplicationEventListener.onEvent(CompositeApplicationEventListener.java:74) ~[jersey-server-2.19.jar:na] ! at org.glassfish.jersey.server.ApplicationHandler.initialize(ApplicationHandler.java:615) ~[jersey-server-2.19.jar:na] ! at org.glassfish.jersey.server.ApplicationHandler.access$500(ApplicationHandler.java:183) ~[jersey-server-2.19.jar:na] ! at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:349) ~[jersey-server-2.19.jar:na] ! at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:346) ~[jersey-server-2.19.jar:na] ! at org.glassfish.jersey.internal.Errors.process(Errors.java:315) ~[jersey-common-2.19.jar:na] ! at org.glassfish.jersey.internal.Errors.process(Errors.java:297) ~[jersey-common-2.19.jar:na] ! at org.glassfish.jersey.internal.Errors.processWithException(Errors.java:255) ~[jersey-common-2.19.jar:na] ! at org.glassfish.jersey.server.ApplicationHandler.(ApplicationHandler.java:346) ~[jersey-server-2.19.jar:na] ! at org.glassfish.jersey.servlet.WebComponent.(WebComponent.java:339) ~[jersey-container-servlet-core-2.19.jar:na] ! at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:170) ~[jersey-container-servlet-core-2.19.jar:na] ! at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:362) ~[jersey-container-servlet-core-2.19.jar:na] ! at javax.servlet.GenericServlet.init(GenericServlet.java:244) ~[javax.servlet-api-3.1.0.jar:3.1.0] ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:612) [jetty-servlet-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:395) [jetty-servlet-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:871) [jetty-servlet-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:298) [jetty-servlet-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:741) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529] ! at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:103) [metrics-jetty9-3.1.2.jar:3.1.2] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.server.handler.RequestLogHandler.doStart(RequestLogHandler.java:140) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:232) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.server.Server.start(Server.java:387) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.server.Server.doStart(Server.java:354) [jetty-server-9.2.11.v20150529.jar:9.2.11.v20150529] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.11.v20150529.jar:9.2.11.v20150529] ! at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:43) [dropwizard-core-0.9.0-rc3.jar:0.9.0-rc3] ! at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:41) [dropwizard-core-0.9.0-rc3.jar:0.9.0-rc3] ! at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:77) [dropwizard-core-0.9.0-rc3.jar:0.9.0-rc3] ! at io.dropwizard.cli.Cli.run(Cli.java:70) [dropwizard-core-0.9.0-rc3.jar:0.9.0-rc3] ! at io.dropwizard.Application.run(Application.java:80) [dropwizard-core-0.9.0-rc3.jar:0.9.0-rc3] ! at edu.wvu.stat.rc2.Rc2Application.main(Rc2Application.java:31) [classes/:na] ```  I'm trying to use a sub-resource locator. Looking in the eclipse debugger in the third frame of populate (line 184), path is `/workspaces/{id}/files`, klass is `class edu.wvu.stat.rc2.resources.WorkspaceResource`, and method is  ``` ResourceMethod{httpMethod=null, consumedTypes=[], producedTypes=[], suspended=false, suspendTimeout=0, suspendTimeoutUnit=MILLISECONDS, invocable=Invocable{handler=ClassBasedMethodHandler{handlerClass=class edu.wvu.stat.rc2.resources.WorkspaceResource, handlerConstructors=[org.glassfish.jersey.server.model. HandlerConstructor@2e32fc22, org.glassfish.jersey.server.model.HandlerConstructor@3f5156a6]}, definitionMethod=public java.lang.Class edu.wvu.stat.rc2.resources.WorkspaceResource.fileResource(int), parameters=[Parameter [type=int, source=id, defaultValue=null]], responseType=java.lang.Class}, nameBindings=[]} ```  In the next frame up, klass is `java.lang.Class` as a result of `method.getInvocable().getRawResponseType()` in the previous frame. This line calls line 165 which calls `Resource.from(java.lang.Class)`, which then triggers the NPE in the next frame on line 173.   FileResource.java is   ``` java @Produces(MediaType.APPLICATION_JSON) public class FileResource extends BaseResource {     final static Logger log= LoggerFactory.getLogger(FileResource.class);      private int _wspaceId;      @Context UriInfo _uriInfo;      public FileResource() {}      public FileResource(int wspaceId) {         _wspaceId = wspaceId;     }      @GET     public String getFileList() {         log.info(""wspace"");;         return ""{\""wspaceId\"":"" + _uriInfo.getPathParameters().get(""wspaceId"") + ""}"";     } } ```  and the relevant part of WorkspaceResource is  ``` java @Path(""/workspaces"") @Produces(MediaType.APPLICATION_JSON) public class WorkspaceResource extends BaseResource {     final static Logger log= LoggerFactory.getLogger(WorkspaceResource.class);      public WorkspaceResource() {         super();      }      public WorkspaceResource(DBI dbi, RCUser user) {         super(dbi, user);      }      @Path(""{id}/files"")     public Class fileResource(@PathParam(""id"") int wspaceId) {         log.info(String.format(""request for wspace files %d"", wspaceId));         return FileResource.class;     } ```  Regardless of any errors I've made, dropwizard really should catch this kind of error and at least report a failure (especially since this is appears to just be logging code). Without the debugger breaking on the first throw, the stack trace has something like 5 nested exceptions that provide no useful information about what went wrong.  It would be really helpful if when releases are pushed the source and javadoc artifacts were pushed, too. That way eclipse could show help when working with dropwizard.","closed","","mlilback","2015-08-17T20:19:36Z","2015-09-25T21:07:39Z"
"","1248","Unable to load io.dropwizard.logging.LoggerFactory","Using 0.9-rc4, I see a lot of message like the following in the server log:  INFO  [2015-09-07 12:43:38,692] io.dropwizard.jackson.DiscoverableSubtypeResolver: Unable to load io.dropwizard.logging.LoggerFactory  In file META-INF/services/io.dropwizard.jackson.Discoverable there is a reference to io.dropwizard.logging.LoggerFactory, but there is no such class or interface in the source tree. However, there is an interface called LoggingFactory in the io.dropwizard.logging package, which implements Discoverable, thus I think it's only a typo (Logger vs Logging) in the service file (dropwizard-logging/.../META-INF/services/io.dropwizard.jackson.Discoverable)  I have not tested yet, and if you prefer a PR please let me know.","closed","bug,","lehcim","2015-09-08T07:56:41Z","2015-09-08T10:21:13Z"
"","734","LOGBACK: No context given for ch.qos.logback.classic.AsyncAppender[null]","Using 0.8.0-SNAPSHOT, during startup, this line is printed twice (because I have two appenders configured) to the stdout.  ``` LOGBACK: No context given for ch.qos.logback.classic.AsyncAppender[null] ```  It seems to be caused by the AbstractAppenderFactory#wrapAsync method, the AsyncAppender created there does not have a context (setContext() is never called).","closed","bug,","Athou","2014-10-07T11:14:40Z","2014-10-11T17:48:55Z"
"","732","@FormDataParam support","Using 0.8.0-SNAPSHOT, @FormDataParam is no longer supported out-of-the-box when adding a dependency to dropwizard-forms.  It now requires           ``` environment.jersey().register(MultiPartFeature.class); ```  This is not an issue with dropwizard per-se but adding this somewhere in the doc could be useful, what do you think?","closed","improvement,","Athou","2014-10-07T06:39:34Z","2015-01-11T20:39:52Z"
"","733","setUrlPattern no longer works","Using 0.7.1, I was able to configure the root path of jersey programatically using `environment.jersey().setUrlPattern(""/rest/*"");`  This no longer works in 0.8.0-SNAPSHOT, and since my angularjs client requires the api to be available on /rest, I'd rather not configure the rootPath with the yml file.  I could call `((DefaultServerFactory) config.getServerFactory()).setJerseyRootPath(""/rest/*"");` in run() as a workaround, is there a better way to do this?","closed","","Athou","2014-10-07T06:44:57Z","2014-10-07T09:51:49Z"
"","1028","Extract constraint status for public use","Useful for those who want to derive their own `ExceptionMapper` (for instance, an exception mapper that returns JSON containing constraint violations)","closed","improvement,","nickbabcock","2015-05-01T16:18:39Z","2015-05-06T05:51:35Z"
"","684","Fix client documentation","Use valid liquibase XSD version","closed","","Toilal","2014-08-14T05:35:36Z","2014-08-14T13:23:26Z"
"","984","Use Type parameter for configuration in initialize","Use Type parameter for configuration in both, run and initialize so that one can for example add another ConfigurationBundle in initialize method.  See also https://github.com/dropwizard/dropwizard/pull/795  ---  Example: There is a team-wide default set of bundles that is used for all webservices. They all use the same (superset) of configuration. Instead of adding all the bundles in every Application I'd like to add a single default bundle that adds all bundles I need.  ``` java class DeploymentConfiguration extends Configuration {     boolean production = true; }  class App extends Application {     @Override     public void initialize(Bootstrap bootstrap) {         bootstrap.addBundle(new DefaultBundle());     }      @Override     public void run(DeploymentConfiguration configuration, Environment environment) throws Exception {         // ..     } }  class DefaultBundle implements ConfiguredBundle {     @Override     public void run(DeploymentConfiguration configuration, Environment environment) throws Exception {     }      @Override     public void initialize(Bootstrap bootstrap) {         bootstrap.addBundle(new BundleA());         bootstrap.addBundle(new BundleB());     } }  class BundleA implements ConfiguredBundle {     @Override     public void run(DeploymentConfiguration configuration, Environment environment) throws Exception {         environment.servlets().addServlet(                 ""someservlet"",                 new SomeServlet(configuration.production)); // <-- using configuration     }      @Override     public void initialize(Bootstrap bootstrap) {     } } ```  With `Bootstrap` in the class `DefaultBundle` I can't add another `ConfiguredBundle`, that produces a compile error.","closed","","dhs3000","2015-04-10T18:34:41Z","2015-04-10T19:31:11Z"
"","795","Use Type parameter for configuration in initialize","Use Type parameter for configuration in both, run and initialize so that one can for example add another ConfigurationBundle in initialize method.","closed","","dhs3000","2014-11-25T20:36:36Z","2015-04-10T18:35:30Z"
"","1369","fix links to configuration manual","use project.version rather than having to change the version for each release  I got the idea from the pom.xml distribution management site","closed","","tonygaetani","2015-12-03T14:29:46Z","2015-12-04T14:54:46Z"
"","1310","Use a minimally configured Hibernate Validator everywhere","Use a minimally configured Hibernate Validator everywhere, instead of the default unconfigured Hibernate Validator that doesn't have Optional support enabled.  Good news, no other part of the code was affected by the behavior seen in #1309. So this pull request is more preventive than anything.  I do wonder if there is a better implementation out there (I'd rather not expose `BaseValidator` to the world, but it's the best I came up with). Let me know if a better implementation exists :wink:","closed","improvement,","nickbabcock","2015-10-28T20:05:32Z","2015-10-29T14:02:24Z"
"","1308","NotNull validation of BaseReporterFactory.frequency fails","Upon upgrading to Dropwizard 0.9.0, the `db migrate` task of an application I maintain failed with the following output:  ``` Exception in thread ""main"" javax.validation.UnexpectedTypeException: HV000186: The constraint of type 'javax.validation.constraints.NotNull' defined on 'metrics.reporters[0].frequency' has multiple matching constraint validators which is due to an additional value handler of type 'io.dropwizard.validation.valuehandling.OptionalValidatedValueUnwrapper'. It is unclear which value needs validating. Clarify configuration via @UnwrapValidatedValue.     at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.getConstraintValidatorInstanceForAutomaticUnwrapping(ConstraintTree.java:266)     at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.getInitializedConstraintValidator(ConstraintTree.java:163)     at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:116)     at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:87)     at org.hibernate.validator.internal.metadata.core.MetaConstraint.validateConstraint(MetaConstraint.java:73)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateMetaConstraint(ValidatorImpl.java:592)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraint(ValidatorImpl.java:555)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForDefaultGroup(ValidatorImpl.java:490)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForCurrentGroup(ValidatorImpl.java:454)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:406)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraint(ValidatorImpl.java:770)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:656)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:415)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraint(ValidatorImpl.java:770)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:656)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:415)     at org.hibernate.validator.internal.engine.ValidatorImpl.validate(ValidatorImpl.java:204)     at io.dropwizard.configuration.ConfigurationFactory.validate(ConfigurationFactory.java:257)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:149)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:95)     at io.dropwizard.cli.ConfiguredCommand.parseConfiguration(ConfiguredCommand.java:115)     at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:64)     at io.dropwizard.cli.Cli.run(Cli.java:70)     at io.dropwizard.Application.run(Application.java:80)     at com.whiskerlabs.aphid.AphidApplication.main(AphidApplication.java:50) ```  The `ReporterFactory` in play is [`DatadogReporterFactory`](https://github.com/coursera/metrics-datadog/blob/master/dropwizard-metrics-datadog/src/main/java/io/dropwizard/metrics/DatadogReporterFactory.java) from the `dropwizard-metrics-datadog` package. Following the lede of this refreshingly-helpful exception message, I tried adding a `@UnwrapValidatedValue(false)` annotation to the `BaseReporterFactory.frequency` field, which fixed the issue. With a patched `dropwizard-metrics` artifact, my application's `db migrate` task works.","closed","","evnm","2015-10-28T18:58:17Z","2015-10-28T22:37:25Z"
"","629","Upgrade to jackson-databind 2.4.1.1","Upgrade to `jackson-databind` 2.4.1.1 due to a bug in `jackson-databind` (see FasterXML/jackson-databind#490) which potentially affects our users.  Mailing list announcement: https://groups.google.com/forum/#!topic/jackson-dev/F-y4iQnxh1Q","closed","","joschi","2014-06-24T13:29:31Z","2014-07-07T08:52:46Z"
"","884","Updating the BaseReporterFactory to optionally support regex","Updating the BaseReporterFactory to optionally support regex in its includes/excludes fields. This implementation makes a few assumptions: - By default any existing implementations or configurations that use the BaseReporterFactory should not have their behavior changed - The user should be able to toggle on regular expressions by changing data, without modifications to the code - The code should be easily extended to support still-more complicated matching functionality (potentially by making the StringMatchingStrategy public and adding it as a parameter to the getFilter() call)  These assumptions influenced my design decisions.  Please let me know what you think!","closed","feature,","ToadJam","2015-02-18T22:14:24Z","2015-02-24T16:45:11Z"
"","706","Jersey 2.0","Updated Jersey 2.x branch (based on @saadmufti's branch, PR #545).","closed","feature,","joschi","2014-09-15T17:43:53Z","2014-09-30T11:54:41Z"
"","895","Fix MetricFilter per #890; add support for regex-based filters per #884","Updated docs as well. Unit test covers includesRegex but not excludesRegex (can add if required)","closed","improvement,","eepstein","2015-02-23T16:45:31Z","2015-02-25T23:43:06Z"
"","946","Merge pull request v0.8.1-SNAPSHOT from dropwizard/master","update to pull in the v0.8.0 codebase","closed","","wiquan","2015-03-17T07:21:15Z","2015-03-17T07:23:16Z"
"","671","Make DropwizardResourceConfigTest cross-platform","Update testGetEndpointsInfo to use a cross-platform `%n` in `String.format` instead of the hardcoded `\n`. This allows the maven build to work on Windows.","closed","improvement,","sghill","2014-08-02T18:21:23Z","2014-08-03T08:59:38Z"
"","1230","Update README.md","Update jar version","closed","","nisargshah95","2015-08-20T12:17:14Z","2015-08-20T14:24:50Z"
"","1501","Update link to Riak","Update broken link for Riak.","closed","","dinomite","2016-03-30T19:02:01Z","2016-03-30T19:28:36Z"
"","1117","Validation: Invalid Entities return a 422 WebDAV status code","Unprocessable Entity (422) is part of the WebDAV protocol/extension, from what I can tell (http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml), and not technically an HTTP status code.  I believe this should simply be a 400 (Bad Request) -- http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6.1.1","closed","","saem","2015-06-18T18:24:04Z","2015-07-08T10:19:09Z"
"","1416","Add a means of configuring the Jersey Client produced by ResourceTestRule","Unless I'm mistaken, there isn't a way to inject functionality into [the `configureClient(ClientConfig config)` method of `ResourceTestRule`](https://github.com/dropwizard/dropwizard/blob/cc5f7a8eef8621cfc8d2ff012b525069d032238a/dropwizard-testing/src/main/java/io/dropwizard/testing/junit/ResourceTestRule.java#L215-L220). In cases where tests require custom Jersey client configuration (e.g. when [testing PATCH endpoints](http://stackoverflow.com/questions/29499106/using-patch-with-jersey-client-api-for-unit-testing)), the developer isn't left with a straightforward recourse.  I'd like to propose adding a method to `ResourceTestRule.Builder` akin to the following:  ``` public Builder setClientConfigurator(j.u.function.Consumer configurator) {     this.configurator = configurator;     return this; } ```  This `configurator` function would then be applied in the `configureClient` method linked-to above. Thus code like the following could be used to configure clients used in tests:  ``` @ClassRule public static final ResourceTestRule resources = ResourceTestRule.builder()     .addConfigurator(clientConfig ->         clientConfig.property(HttpUrlConnectorProvider.SET_METHOD_WORKAROUND, true));     ... ```  This feature would be included in the 1.0.0 milestone, given the use of the Java 8 Consumer interface.","closed","improvement,","evnm","2016-01-15T23:02:43Z","2016-02-07T13:29:33Z"
"","796","Unable to use custom ExceptionMapper in 0.8 due to changes in Jersey 2","Under Jersey 1.x it was possible to remove the Dropwizard standard LoggingExceptionMapper during application configuration like so -   ```     for (Iterator it = environment.jersey().getResourceConfig().getSingletons().iterator(); it.hasNext();) {         Object object = it.next();         if (LoggingExceptionMapper.class.isAssignableFrom(object.getClass())) {             it.remove();         }     } ```  However, on dropwizard 0.8rc1 Jersey now returns an unmodifiable collection this for the getSingletons() call -  ``` @Override public final Set getSingletons() {     if (cachedSingletonsView == null) {         cachedSingletons = _getSingletons();         cachedSingletonsView = Collections.unmodifiableSet(cachedSingletons == null ? new HashSet<>() : cachedSingletons);     }      return cachedSingletonsView; } ```  ... so the configuration can no longer be changed after it has been registered.   Is there a workaround for this issue?","closed","","rjnichols","2014-11-25T22:55:55Z","2014-11-25T23:07:48Z"
"","1287","Fix failing Mustache view test","Two tests in Mustache assumed that the line ending of the system is '\n'. They tried to match a new line from the template file with a System.lineSeparator().  This PR is the counterpart of #1286.","closed","","fexbraun","2015-10-20T08:30:40Z","2015-10-20T09:13:21Z"
"","1286","Fixed failing Freemarker tests (on Windows OS)","Two tests in FreemarkerViewRendererTest assumed that the line ending of the system is '\n'. They tried to match a new line from the template file with a System.lineSeparator().","closed","","fexbraun","2015-10-20T07:53:12Z","2015-10-20T09:13:16Z"
"","1042","Use double quotes for string literal and fix underline to be the same length as header text","Two quick fixes to the Dropwizard Core manual page","closed","","markreddy","2015-05-12T16:47:16Z","2015-05-18T20:23:12Z"
"","1334","No session currently bound to execution context - for query in authenticator","Trying to upgrade to dropwizard 0.9.0/1. I have a OauthAuthenticator registered that is trying to make a database query but getting the following error.  ``` ERROR [2015-11-09 20:05:38,080] com.hometeamcare.apiserver.error.ThrowableMapper: Caught exception ! org.hibernate.HibernateException: No session currently bound to execution context ! at org.hibernate.context.internal.ManagedSessionContext.currentSession(ManagedSessionContext.java:75) ~[hibernate-core-4.3.11.Final.jar:4.3.11.Final] ! at org.hibernate.internal.SessionFactoryImpl.getCurrentSession(SessionFactoryImpl.java:1014) ~[hibernate-core-4.3.11.Final.jar:4.3.11.Final] ! at io.dropwizard.hibernate.AbstractDAO.currentSession(AbstractDAO.java:36) ~[dropwizard-hibernate-0.9.1.jar:0.9.1] ! at io.dropwizard.hibernate.AbstractDAO.get(AbstractDAO.java:134) ~[dropwizard-hibernate-0.9.1.jar:0.9.1] ```  I have the `@UnitOfWork` annotation on the resource method. (This works with dropwizard 0.8.x)  After spending a little time in the debugger it essentially looks like a session is never opened i.e this line is never called. https://github.com/dropwizard/dropwizard/blob/master/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/UnitOfWorkApplicationListener.java#L96  The event type never matches `RESOURCE_METHOD_START` (https://github.com/dropwizard/dropwizard/blob/master/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/UnitOfWorkApplicationListener.java#L81). The last event type triggered before it tries to go into the authenticator filters is `REQUEST_MATCHED`, and then it throws the exception.","closed","stale,","harshil07","2015-11-09T20:12:39Z","2019-09-03T00:01:02Z"
"","546","Add new Dropwizard views module - Trimou (extensible Mustache implementation)","Trimou is an open source Mustache implementation focused on extensibility and configurability. There are some useful built-in extensions: CDI, Servlet, PrettyTime, Minify and google-gson. It also has a decent test coverage and documentation. Since 1.5.0 Trimou defines a helper API inspired by Handlebars project.  See also http://trimou.org","closed","","mkouba","2014-04-17T19:26:48Z","2014-07-02T09:02:19Z"
"","1046","Documentation fixes - spelling, header text underline and indentation","Took a run through the rest of the docs while I was at it and fixed up a few more things.","closed","documentation,","markreddy","2015-05-13T10:46:10Z","2015-05-13T10:51:19Z"
"","722","Facility to set the validation query timeout in the database connection pool","Tomcat JDBC pool starting from the version 7.0.43 [supports](https://issues.apache.org/bugzilla/show_bug.cgi?id=54693) setting an independent validation query timeout.  It would be great to have facility of configuring this property by the standart YAML configuration of the database connection pool.","closed","feature,","arteam","2014-10-02T09:03:35Z","2016-01-24T08:06:59Z"
"","594","Enable validation of Optional values","To validate values contained in an `Optional` type, we need to use a new feature in Hibernate Validator 5.1, so this introduces a dependency version bump to 5.1.1.  This makes use of an _experimental_ feature in Hibernate Validator, so I'm not 100% sure we'll want to make use of it yet.  To validate the contents of an `Optional`, you need to include an `@UnwrapValidatedValue` annotation on the property being validated:  ``` java @Length(min = 32, max = 32) @UnwrapValidatedValue private Optional md5 = Optional.absent(); ```  Absent values are considered `null` when validated, so their behaviour depends on your chosen constraints' handling of `null` values.  We have to register this inside `Bootstrap`, and I noticed that we don't (currently) expose a way for users to register more validation behaviour through `Bootstrap`, so we should probably look in to that.","closed","","nicktelford","2014-05-23T10:27:12Z","2014-06-23T14:57:09Z"
"","935","Provide object mapper with Jackson JDK8 Module","To provide support for JDK datatypes included in version 8:  https://github.com/FasterXML/jackson-datatype-jdk8  Is this just as simple as adding the dependency and registering the module inside io.dropwizard.jackson.Jackson?","closed","","willwhitaker","2015-03-11T13:56:28Z","2015-03-12T11:13:09Z"
"","1251","Move validation logic from Jackson to Jersey","To discuss this pull request, see the related [dropwizard-dev thread](https://groups.google.com/forum/#!topic/dropwizard-dev/TGpJ1NVCK8s).  This pull request ~~is not meant to be merged, as it is far from complete and wanted to hear comments on it before I sink more work into it~~ (can now be merged).","closed","improvement,","nickbabcock","2015-09-09T18:53:57Z","2015-11-21T09:57:03Z"
"","1177","Fix ZLIB decompression in BiDiGzipFilter","To decompress deflate-encoded requests one should use the `InflaterInputStream` class, not `DeflaterInputStream`. The latter actually is used for compressing requests on the fly.  This change adds the parameter `gzipCompatibleInflation` for controlling the mode of ZLIB decompression.  Also it fixes a minor bug, when a broken inflater could stay in the thread local storage.","closed","","arteam","2015-07-18T15:05:49Z","2016-01-24T08:04:28Z"
"","571","Commons-logging being pulled in transitively via dropwizard-client","Through httpclient 4.3.2, dropwizard-client pulls in commons-logging. I was under the impression that you want to go out of your way to avoid bringing in commons-logging when you're using slf4j (see http://www.slf4j.org/faq.html#optional_dependency).  We use an enforcer rule to check it is not pulled into our project (built on Dropwizard) and that's what raised a flag.  If this is true (and I've been known to be wrong!) I'm happy to write a patch, either with an explicit exclusion or using one of the other techniques mentioned.","closed","","mikeycmccarthy","2014-05-12T15:33:15Z","2014-05-12T19:52:30Z"
"","961","Add configuration section to jersey client docs","Thought I'd flesh out Jersey's Client documentation a bit more.  I welcome a second pair of eyes to make sure it is alright and makes sense.  I should note that it relies on the changes in #939 to be accurate.  Closes #960","closed","","nickbabcock","2015-03-30T20:53:06Z","2015-04-01T01:38:36Z"
"","1193","#1192: Format WebApplicationException","This would fix issue https://github.com/dropwizard/dropwizard/issues/1192.","closed","","vzx","2015-07-27T15:34:32Z","2015-09-01T08:43:39Z"
"","752","Size now implements Comparable","This will be especially handy for Groovy, where it will allow comparisons such as `sizeA > sizeB` rather than `sizeA.toBytes() > sizeB.toBytes()`.","closed","","mhurne","2014-10-22T15:24:05Z","2014-10-22T19:28:50Z"
"","612","Added support for setting CredentialProvider when building HttpClient.","This will allow us to provide credentials, e.g:  ``` java     @Override     public void run(Configuration configuration, Environment environment) throws Exception {         BasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();         credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(""username"", ""password""));         HttpClient httpClient = new HttpClientBuilder(environment).using(configuration.getHttpClientConfiguration()).using(credentialsProvider).build(""httpClient"");         environment.jersey().register(new MyResource(httpClient));     } ```","closed","","bnese","2014-06-09T21:19:08Z","2014-06-12T04:37:46Z"
"","1044","Add Logback appender for logging to MongoDB","This will add a AppenderFactory for writing log messages to a runing mongoDB instance. complete configuration example:  logging:   level: INFO   loggers:     ""de.havonte"": DEBUG   appenders:     - type: mongodb       threshold: DEBUG       host: localhost       port: 27017       dbName: logs       username: logs_user       password: !secrect!       collectionName: logging       logFormat: ""%d %-5level [%thread]: %msg%n""       capped: true       size: 100MB       max: 1000000       readPreference: nearest  simple configuration example:  logging:   level: INFO   loggers:     ""de.havonte"": DEBUG   appenders:     - type: mongodb       threshold: DEBUG       host: localhost       port: 27017       dbName: logs       collectionName: logging       logFormat: ""%d %-5level [%thread]: %msg%n""  Result example:  {     ""_id"" : ObjectId(""5552fecfe4b0cb24f4247997""),     ""timestamp"" : ISODate(""2015-05-13T07:35:43.852Z""),     ""logger"" : ""de.havonte.SomeClass"",     ""level"" : ""ERROR"",     ""thread"" : ""The_name_of_the_thread_where_the_logmessage_was_sent"",     ""mdc"" : {},     ""message"" : ""Look Ma' I am logging to a MongoDB"" }","closed","","HaVonTe1","2015-05-13T07:43:56Z","2015-05-13T08:08:59Z"
"","1483","Use SVG badge for Travis CI","This tiny pull request makes use of the `dropwizard.svg` image provided by [Travis CI](https://travis-ci.org/dropwizard/dropwizard) instead of the raster image currently used. As the result, the build status will be looking much smoother on high resolution screens.  | Before | After | | --- | --- | | [![Build Status](https://travis-ci.org/dropwizard/dropwizard.png?branch=master)](https://travis-ci.org/dropwizard/dropwizard) | [![Build Status](https://travis-ci.org/dropwizard/dropwizard.svg?branch=master)](https://travis-ci.org/dropwizard/dropwizard) |","closed","","dustalov","2016-03-19T12:29:27Z","2016-03-19T12:58:17Z"
"","764","StackOverflowError example fixes #763","This shows the example (in example-app) and fixes the error a bit naively, that is for issue #763 Not sure how to unit-test this case, or if the safeguard against recursion should be altered or perhaps drop listing sub resource locators altogether.","closed","bug,","olvesh","2014-10-29T10:33:40Z","2014-10-30T10:25:42Z"
"","1261","Log sub resource locators correctly","This should close #1257.  @espenhoh let me know if I missed anything.  EDIT: Closes #1222 too","closed","","nickbabcock","2015-09-24T19:28:30Z","2015-09-30T20:18:39Z"
"","1012","Run tests in parallel","This set of changes add facility run Dropwizard tests in parallel.  The motivation is to perform the build faster and make the test environment more unstable, forcing tests not to depend on the execution order.  It solves 4 issues, that curently block us from doing so: - A [bug](http://jira.qos.ch/browse/SLF4J-167) in sl4fj. The facade doesn't behaves correctly when several threads try to acquire an uninitialized logger context.  - Integration tests for Jersey resources use the same port, so it's not possible to run them in parallel - Tests for overriding system properties for Dropwizard applications clash with each other and behave unreliebly when run in parallel. - There is a [test](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-logging/src/test/java/io/dropwizard/logging/PrefixedRootCauseFirstThrowableProxyConverterTest.java#L86), that checks that the final frame of a stack trace is a main method. It's not so, when   the test is run not from the default `JUnitRunner`, but from a custom thread.  A solution to the first problem is to extract acquiring the logger context into a separate method and create a spin-loop. A thread that didn't get the initialized context is spinned in the loop with timeout while it doesn't get one. It should be noted that we can't resolve the problem just by marking the method as `synchronized`. `LoggerFactory` doesn't correctly publish own state (access to the state is not synchronized and it's represented as a non-volatile integer). So even if the logger context has been initialized by the first arrived thread, the next threads can see a stale state and subsequently get a stub. So the condition -  returned context is always correct, if it's initialized without a race - doesn't hold.  A solution to the second issue is just to make sure that all tests on Jersey resources run on random ports.  A solution to the third issue is to add to `DropwizardAppRule` facility to specify a custom system property prefix. If tests use different prefixes, they don't impact on each other and can be run on parallel.   A solution to the fourth issue is just to remove the test.  Closes #987","closed","","arteam","2015-04-25T16:22:58Z","2015-04-27T20:26:21Z"
"","755","Upgrading mustache","This removed the scala extensions (now part of com.github.spullara.mustache.java:scala-extensions), and includes some internal refactoring. Nothing exciting...","closed","","reines","2014-10-22T21:39:32Z","2014-10-23T08:21:20Z"
"","1107","Tests for DbDumpCommand","This pull requests consists from 2 changes: - Fix descriptions of some parameters in `DbDumpCommand` - Add tests for `DbDumpCommand`  This suite checks 4 cases: - Dump the existed database schema to an XML change set - Dump the schema and data to an XML change set - Dump only data - Print a correct help page  For checking correctness of a change set, it uses a DOM XML parser, rather than regular expressions or string manipulations. The reason for this is that the resulted XML text is not a constant and depends on environment and time of a run. To overcome this, we use the XML parser, because it provides ability to make an intelligent  assertions. In the end, it makes tests more stable and easy to maintain.","closed","","arteam","2015-06-07T17:22:12Z","2016-01-24T08:03:53Z"
"","1039","Descriptive constraint violation messages","This pull requests attempts to return user friendly error messages when constraints are violated either in the response or the request.  So instead of error messages of  ``` json {""errors"":[""blazer.arg0.name may not be empty""]} ```  and  ``` json {""errors"":[""blaze. length must be between 0 and 3""]} ```  more user friendly error messages are returned  ``` json {""errors"":[""query param name may not be empty""]} ```  ``` json {""errors"":[""server response length must be between 0 and 3""]} ```  This pull request isn't done, so don't merge (hardly any documentation and I didn't completely mull over edge cases). As it happens, I'll be off the grid for the next couple weeks, but I wanted to get some eyes on the code (hence the pull request), but if someone is extremely enthusiastic they can carry this pull request the rest of the way, else I'll pick off where I left off and incorporate any suggestions in the pull request.  The code isn't fast, concise, documented, or complete -- but it passes all the test cases I wrote for it :smile:  Opinions wanted!","closed","","nickbabcock","2015-05-08T20:36:20Z","2015-05-28T21:54:47Z"
"","1397","Conditions should not unconditionally evaluate to ""TRUE"" or to ""FALSE""","This pull request is focused on resolving occurrences of Sonar rule squid:S2583 - Conditions should not unconditionally evaluate to ""TRUE"" or to ""FALSE"" You can find more information about the issue here: https://dev.eclipse.org/sonar/coding_rules#q=squid:S2583 Please let me know if you have any questions. Kirill Vlasov","closed","","kirill-vlasov","2015-12-30T11:10:00Z","2015-12-30T11:50:58Z"
"","1398","Lazy initialization of ""static"" fields should be ""synchronized""","This pull request is focused on resolving occurrences of Sonar rule squid:S2444 - Lazy initialization of ""static"" fields should be ""synchronized"" You can find more information about the issue here: https://dev.eclipse.org/sonar/coding_rules#q=squid:S2444 Please let me know if you have any questions. Kirill Vlasov","closed","","kirill-vlasov","2015-12-30T11:10:49Z","2015-12-30T12:21:31Z"
"","1401","""private"" methods that don't access instance data should be ""static""","This pull request is focused on resolving occurrences of Sonar rule squid:S2325 - ""private"" methods that don't access instance data should be ""static"" You can find more information about the issue here: https://dev.eclipse.org/sonar/coding_rules#q=squid:S2325 Please let me know if you have any questions. Kirill Vlasov","closed","","kirill-vlasov","2015-12-31T09:56:05Z","2015-12-31T10:27:29Z"
"","1399","Null pointers should not be dereferenced","This pull request is focused on resolving occurrences of Sonar rule squid:S2259 - Null pointers should not be dereferenced You can find more information about the issue here: https://dev.eclipse.org/sonar/coding_rules#q=squid:S2259 Please let me know if you have any questions. Kirill Vlasov","closed","","kirill-vlasov","2015-12-30T11:11:52Z","2015-12-30T11:57:52Z"
"","1396","Unused local variables should be removed","This pull request is focused on resolving occurrences of Sonar rule squid:S1481 - Unused local variables should be removed You can find more information about the issue here: https://dev.eclipse.org/sonar/coding_rules#q=squid:S1481 Please let me know if you have any questions. Kirill Vlasov","closed","","kirill-vlasov","2015-12-30T11:08:49Z","2015-12-30T11:55:01Z"
"","1183","Added beforeSessionFactoryCreation method to SessionFactoryFactory","This pull request follows the creation of the issue #1182 . It aims at allowing developers to create a custom SessionFactoryFactory class with which he will be able to modify programmatically the Hibernate configuration used to create session factory. For instance, it could allow the developer to define a Hibernate interceptor or Hibernate events... See","closed","improvement,","calou","2015-07-23T17:56:05Z","2015-10-18T09:40:14Z"
"","1144","Default exception mappers are overridable","This pull request annotates the default exception mappers with `@Priority(Integer.MAX_VALUE)`, which allows for a user to override one of the default exception mappers without having to set the configuration option `registerDefaultExceptionMappers` to `false`. Since the configuration option won't  be useful once this pull request is merged, it can be slated for removal at a later point.  As a corollary, we can add additional exception mappers (`ExceptionMapper`) and not fear breaking applications where the user had also defined `ExceptionMapper`","closed","","nickbabcock","2015-06-29T20:42:38Z","2015-07-01T15:43:06Z"
"","908","Lookup environment variables in configuration files","This pull request adds the capability to lookup environment variables from within configuration files.  Some PaaS offerings make it hard to modify the Java runtime environment for applications (e. g. set custom system properties) but make it rather easy to use environment variables (also see [The Twelve Factor App](http://12factor.net/)). The `SubstitutingSourceProvider` and `EnvironmentVariableSubstitutor` classes from this PR simplify using environment variables as source for individual configuration settings.","closed","","joschi","2015-02-27T13:32:02Z","2015-02-28T12:52:43Z"
"","1384","configuration: SubstitutingSourceProvider: close the delegate's stream","This probably doesn't ever cause problems, but closing streams is important if it gets called repeatedly (e.g if it is actually a zlib InputStream, it holds on to native memory until closed). Fixing this will help prevent future copy and paste bugs.  I found this because I was doing some quick code searching to determine if Dropwizard might have any obvious places where a zlib InputStream might not get closed right away, that might have caused the following native memory leak. I suspect this is _not_ the actual cause of the bug, but it might as well be fixed also.","closed","improvement,","evanj","2015-12-14T14:29:54Z","2017-12-21T03:51:16Z"
"","1449","Upgrade to Jackson 2.7.1","This PR upgrades dropwizard-jackson to Jackson 2.7.1.  Release notes: https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.7","closed","improvement,","joschi","2016-02-06T12:55:06Z","2016-03-17T09:07:18Z"
"","1330","Upgrade to Jetty 9.3.5","This PR ugrades Dropwizard baseline to Jetty 9.3.5. Relevant issue is #1036.  It consists from several changes: - `dropwizard-spdy` is removed, because it's not longer supported by Jetty 9.3. Its successor is HTTP 2.0 integration, which we wiil need to implement. - Upgaded the Jetty dependency in the BOM file.  - Added own `InstrumentConnectionFactory`, because `metrics` library doesn't support Jetty 9.3. See https://github.com/dropwizard/metrics/pull/823 - `BiDiGzipFilter` is moved to `BiDiGzipHandler`, because Jetty doesn't provide `GzipFilter` anymore.   Some parameters, that were accessible in the filter, are no longer exist. So, we had to remove them   from the handler configuration.  - ~~Finally, it looks like that Jetty now requires providing a path to a truststore in HTTPS configuration. Even with disabled peer validation. I don't know a way to get it progmatically, so I provided a path that works on Linux systems (at least on Ubuntu-based). If anyone can provide a better solution, I will gladly hear about~~ No, Jetty now by default loads a truststore as same as the keystore.","closed","improvement,","arteam","2015-11-08T18:19:09Z","2016-01-24T08:05:27Z"
"","638","Replace documentation in root directory with version for Dropwizard 0.7.1 (GitHub Pages)","This PR replaces the documentation in the root directory of the project's GitHub Pages with the Dropwizard 0.7.1 (latest release) docs.","closed","documentation,","joschi","2014-06-30T08:45:38Z","2014-06-30T10:17:29Z"
"","1361","Support  `@UnitOfWork` outside of Jersey resources","This PR provides the ability to use the `@UnitOfWork` annotation outside of Jersey resources. It consists from two changes:  - In first we move operations over `@UnitOfWork` methods from `UnitOfWorkApplicationListener` into  an aspect. It allows to perform these operations outside of the listener (for example, in proxies or AOP providers). - In second we provide a factory for creating `@UnitOfWork` aware proxies. A created proxy will   detect the annotation on component methods and will open/close a Hibernate session around them.   It uses aforementioned aspect for this. Javassist is used for creating proxies, because it has a   simple API for that and it's shipped with Hibernate.  Now to use `@UnitOfWork` in authenticators, one need just to create proxy like this:  ``` java SessionDao dao = new SessionDao(hibernateBundle.getSessionFactory()); ExampleAuthenticator exampleAuthenticator =                  new UnitOfWorkAwareProxyFactory(hibernateBundle)                 .create(ExampleAuthenticator.class, SessionDao.class, dao); ```  This change is intended to 0.9.\* branch. Reference issues: #1334 , #1240","closed","improvement,","arteam","2015-11-27T09:36:17Z","2016-01-24T08:18:03Z"
"","1394","Add ability to have config inheritance and property resolvers in configs","This PR provides a way for users to use inheritance in their configuration files.  I've seen several developers asking for this within dropwizard and we've been using this for a long time at Cvent to reduce as much boiler plate as we can from our configurations when each service has to support dev,alpha,staging,load, and production environment configs.  To use this for your service you'd initialize your service like this:  ```     MergedConfigurationFactoryFactory cff             = new MergedConfigurationFactoryFactory<>();     MultiConfigurationSourceProvider sp = new MultiConfigurationSourceProvider();      bootstrap.setConfigurationFactoryFactory(cff);     bootstrap.setConfigurationSourceProvider(sp);     bootstrap.addCommand(new DisplayMergedConfigCommand<>(this)); ```  Your yaml config files would have something like this in them:  ```     parentConfigurationFile: configs/base.yaml ```  This allows all of your configuration files to reference a parent configuration where most ""common"" settings are placed.  With this PR you also have the ability to do replacements within the config using ${property} syntax.  This is useful so that if you have a configuration property like ""environmentName"" then you can reference this property anywhere else in your configuration without having to specify the same thing multiple times.","closed","","brentryan","2015-12-24T03:21:41Z","2015-12-26T19:21:03Z"
"","1284","Move dependency declarations into dedicated BOM (Bill of materials) artifact","This PR moves all full dependency declarations into a dedicated BOM (Bill of materials) artifact which simplifies creating Dropwizard modules and applications without dependency conflicts (usually checked by the Maven Enforcer plugin).  Users can simply import the Dropwizard BOM into their projects and don't have to take care of providing a matching version of the dependencies (but are still able to explicitly override those if required):  ``` xml                        io.dropwizard         dropwizard-bom         ${dropwizard.version}         pom         import                ```  This follows the best practice of several other widely used Java libraries and frameworks like JBoss and Spring. - https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html - http://www.infoq.com/news/2014/07/springio-platform - http://howtodoinjava.com/2014/02/18/maven-bom-bill-of-materials-dependency/","closed","improvement,","joschi","2015-10-17T11:39:35Z","2015-10-17T14:43:30Z"
"","1282","Allow clients to override HttpClientBuilder#createClient method","This PR is to allow clients to override HttpClientBuilder's createClient method. Since not all configuration values can be set directly using the class or the YML configuration, this would allow clients fine grain control over the underlaying Apache's HttpClientBuilder in case they need to.  See https://github.com/dropwizard/dropwizard/issues/1186#issuecomment-148188882","closed","improvement,","jlordiales","2015-10-16T23:00:46Z","2015-10-17T08:45:52Z"
"","800","Dropwizard - Quartz Integration (Issue #797)","This PR is related to Issue #797. If after looking it over there is a desire to make this an official DW module, I can move things around and issue a new pull request over there.   As you can see the Quartz integration was done using Bundle, Managed, and a couple of Tasks to get things started. The tasks are useful for suspending Quartz jobs without having to write any custom endpoints in REST to do the work. Likewise, the simple reporting task can give a quick view into what the job queue looks like in JSON.  I'm open to expanding it further if there is interest in the code. Just let me know.  There are also a number of unit tests as well included in the PR.","closed","","ghost","2014-11-28T20:16:48Z","2014-12-27T12:27:23Z"
"","1224","Support configuration in yml of client TLS properties","This PR introduces the ability to modify the TLS behaviour of a HTTP client through a Dropwizard application's configuration file. The major benefit here is the ability to easily configure a client to connect to servers that are secured in non-trivial ways (e.g. client authentication or custom PKI).  The key features that can be configured are: - Disable hostname verification; - Use a custom truststore (when dealing with a custom PKI); - Use a custom keystore (for client authentication); - Allow self-signed certificates if necessary; - Specify supported protocols (e.g. TLSv1.2 only); - Specify supported ciphers.","closed","security,","chrisholmes","2015-08-18T13:38:22Z","2015-08-25T14:02:02Z"
"","791","JerseyClientBuilder: Add back metrics and use provided configuration values","This PR improves the JerseyClientBuilder with: - Add back metrics provided by  **InstrumentedHttpClientConnectionManager** - Respect the timeout, cookie, and credential provider configuration parameters  Additionally it: - Adds a few tests for the configuration parameters - Moves common code shared between **HttpClientBuilder** and **JerseyClientBuilder** into an **ApacheClientBuilderBase** class  I recommend including this in 0.8, as the existing JerseyClientBuilder is a bit broken without these enhancements.  **Note**:   This PR does **not** include the request timing that InstrumentedHttpRequestExecutor provided.  I have submitted a metrics PR (https://github.com/dropwizard/metrics/pull/705) to add this, and will submit a dropwizard PR when that is merged.","closed","improvement,","cmicali","2014-11-21T19:18:45Z","2015-01-06T21:47:30Z"
"","1216","1160 add shareConnectionManagerEnabled option with 'true' by default.","This PR fix bug #1160. Generally, it's copied from https://github.com/dropwizard/dropwizard/issues/1179 with minor addition regarding dependency on org.apache.httpcomponents:httpclient.  Please fill free to reject it and grab the original one provided by @carlo-rtr. We really need this to be released in 0.8.3. Thank you!","closed","","krutsko","2015-08-13T13:37:12Z","2015-08-25T22:38:39Z"
"","628","Skip deployment of io.dropwizard:docs","This PR disables the deployment of the [`docs` JAR artifact](http://search.maven.org/#artifactdetails|io.dropwizard|docs|0.7.1|jar) to Maven Central.","closed","","joschi","2014-06-24T10:24:58Z","2014-06-24T13:37:48Z"
"","590","Add `--catalog` and `--schema` to AbstractLiquibaseCommand","This PR adds the commandline parameters `--catalog` and `--schema` for specifying the database catalog and the database schema to all Liquibase commands.  If one of the parameters is omitted, the database default (e. g. schema ""public"") is being used.","closed","improvement,","joschi","2014-05-22T09:20:13Z","2014-07-09T16:00:32Z"
"","827","Testing: Add listeners to DropwizardAppRule","This PR adds the ability for tests using **DropwizardAppRule** to hook the **Application** lifecycle.  It additionally includes a convenience method to add **Managed** objects to the lifecycle.  ``` java @ClassRule public static final DropwizardAppRule RULE =     new DropwizardAppRule(MyApp.class, resourceFilePath(""my-app-config.yaml""))             .manage(new MyTestManagedObject()); ```  There are many cases where tests need to add **Managed** objects to the application lifecycle and execute code in the application **onRun** method.  For example, many of our services use an ActiveMQ bundle which handles connections to a remote ActiveMQ server.  When testing these services we want to standup a local broker and override the config to use this local broker.  The changes in this PR are what make that possible.","closed","feature,","cmicali","2014-12-30T14:35:19Z","2015-01-06T21:47:03Z"
"","665","Add application and admin context paths to DefaultServerFactory","This PR adds the `applicationContextPath` and `adminContextPath` configuration settings to `DefaultServerFactory`, as discussed in #602.  It also reintroduces the `rootPath` configuration setting to `AbstractServerFactory` and fixes the documentation regarding its usage vs. `applicationContextPath`. The latter caused some confusion with our users.","closed","improvement,","joschi","2014-07-24T12:42:16Z","2015-06-22T06:31:50Z"
"","1319","Test {Ganglia,Graphite}ReporterFactory classes","This PR adds tests for the `GangliaReporterFactory` and `GraphiteReporterFactory` classes to check whether they can be instantiated (and validated) using a `ConfigurationFactory`.","closed","","joschi","2015-10-31T12:25:41Z","2015-10-31T13:22:43Z"
"","1349","HTTP/2 and server push support","This PR adds support for HTTP/2 over TLS, HTTP/2 plain text connections and server push to Dropwizard.  This is based on the work in Jetty 9.3 branch.  We use to have SPDY support, but this protocol is completelty deprecated and supressed by HTTP/2. Jetty 9.3.\* now provides only HTTP/2 support. One important distinction from SPDY is that HTTP/2 can work over TLS, as well as over a plain connection. The latter connection type is not supported by major browsers, but could be useful for internal network installations or for handling non-enctypted traffic from load balancers.  This PR provides two connection factories for each connection type. HTTP/2 over TLS has `http2` key, HTTP/2 over plain text - `http2c`.  Other important feature is support for the server push techonology. The server can send additional resources along with the requested resource to clients on a single response. This could be a big perfomance optimization for web pages that contain many static assets.  Jetty has `ServerPushFilter` which provides a good heuristic for determining primary and additinal resources. It uses URI from the `Referer` header and request timestamps to guess that resources are linked with each other. This change adds a simple factory for enabling this filter from the configuration. By default it's disabled.","closed","feature,","arteam","2015-11-21T20:38:52Z","2016-01-24T08:04:06Z"
"","1345","HTTP/2 and server push support","This PR adds support for HTTP/2 over TLS, HTTP/2 plain text connections and server push to Dropwizard.  This is based on the work in Jetty 9.3 branch.  We use to have SPDY support, but this protocol is completelty deprecated and supressed by HTTP/2. Jetty 9.3.\* now provides only HTTP/2 support. One important distinction from SPDY is that HTTP/2 can work over TLS, as well as over a plain connection. The latter connection type is not supported by major browsers, but could be useful for internal network installations or for handling non-enctypted traffic from load balancers.  This PR provides two connection factories for each connection type. HTTP/2 over TLS has `http2` key, HTTP/2 over plain text - `http2c`.  Other important feature is support for the server push techonology. The server can send additional resources along with the requested resource to clients on a single response. This could be a big perfomance optimization for web pages that contain many static assets.  Jetty has `ServerPushFilter` which provides a good heuristic for determining primary and additinal resources. It uses URI from the `Referer` header and request timestamps to guess that resources are linked with each other. This change adds a simple factory for enabling this filter from the configuration. By default it's disabled.","closed","","arteam","2015-11-19T18:02:19Z","2015-11-21T20:39:41Z"
"","1301","Add support for custom arguments to OptionalArgumentFactory","This PR adds support for custom arguments (e. g. `JodaDateTimeArgumentFactory`) to `OptionalArgumentFactory`.  The implementation is rather clumsy because jDBI doesn't seem to provide extension points for this kind of customization.  Refs #1297.","closed","","joschi","2015-10-23T11:50:31Z","2015-10-29T04:16:06Z"
"","630","Add support for JaCoCo and Coveralls","This PR adds support for [JaCoCo](http://www.eclemma.org/jacoco/) and [Coveralls](https://coveralls.io/) to record code coverage metrics for Dropwizard. It should help to keep an eye on our overall test coverage and how it develops over time.  Example output for one of my projects: https://coveralls.io/builds/898210  Before this PR is merged, a contributor with the required permissions should add and activate the dropwizard/dropwizard project in Coveralls. Other than that, the configuration should just work™.","closed","","joschi","2014-06-24T13:36:59Z","2014-08-09T19:53:15Z"
"","568","Add Jochen Schalanda to developers in parent POM","This PR adds me to the list of contributors in the Dropwizard parent POM.","closed","","joschi","2014-05-10T09:39:40Z","2014-07-09T16:16:14Z"
"","793","jersey: Make exception mappers configurable","This PR adds a parameter to server configuration called **registerDefaultExceptionMappers** that defaults to **true**.  If set to **false**, the dropwizard-provided ExceptionMapper classes are **not** added to Jersey.    This is required if you want to customize exception handling since Jersey does not allow you to unregister classes that have already been registered.","closed","feature,","cmicali","2014-11-24T16:08:19Z","2014-12-27T15:02:23Z"
"","1448","Improve Support for Optional{Double,Int,Long} in Jersey","This PR adds `ValidatedValueUnwrapper`, `ParamConverter`, and `MessageBodyWriter` implementations for `OptionalDouble`, `OptionalInt`, and `OptionalLong` to be consistent with the already existing `GuavaOptionalValidatedValueUnwrapper` and `OptionalValidatedValueUnwrapper` classes.  Fixes #1447","closed","improvement,","joschi","2016-02-06T12:13:37Z","2016-02-06T22:45:19Z"
"","1359","Unable to set HTTP port in dropwizard 0.9.x","This page:  http://www.dropwizard.io/0.9.1/docs/manual/configuration.html#simple  suggest that this should work in the application yml config file:  ```   connector:     type: http     port: 8080 ```  I'm finding it errors though.  ``` Exception in thread ""main"" java.lang.NoSuchMethodError: com.fasterxml.jackson.core.JsonParser.hasToken(Lcom/fasterxml/jackson/core/JsonToken;)Z     at com.fasterxml.jackson.module.afterburner.deser.SettableIntMethodProperty.deserializeAndSet(SettableIntMethodProperty.java:56) ```  Seems to particularly be the port number causing the issue. Works in 0.8.5.","closed","","richmidwinter","2015-11-26T19:08:12Z","2015-11-28T10:19:52Z"
"","555","Updating healthcheck example output","This now outputs in JSON instead of plain text.","closed","","reines","2014-04-30T11:56:21Z","2014-07-01T14:37:18Z"
"","631","Added dropwizard-embedded module, to embed a service in a daemon","This new module adds a new interface to a Dropwizard HTTP(s) service, so that the HTTP server can be started/stopped at any point within an already existing daemon process (no CLI required). This allows a developer to embed Dropwizard into already existing services with their own main run loop and SLF4J logging infrastructure.  Code example:  ``` java public class WebService extends io.dropwizard.embedded.Service {     public void initialize(EmbeddedBootstrap bootstrap) {         // add bundles         bootstrap.addBundle(new ViewBundle());     }     protected void start(Configuration config, Environment env) {         // add resources         env.jersey().register(new HelloWorldResource());     }      public static void main(String ... args) {         handleCommandLine(args);         configureSlf4jLogging();         start();         new MainRunLoop().run();         stop();     } } ```","closed","","AlexTalks","2014-06-24T21:23:26Z","2015-04-09T20:27:53Z"
"","725","Let the Application.run(String[]) method accept String...","This makes it easier to redirect execution from main(String... args) when calling the application programatically. Imagine  ```  // my test runner  public static void main(String... args) {     MyRealApplication.main(""server"",""path-to-yaml"");     // instead of ...main(new String[]{""server"",""...""});  } ```","closed","","jangalinski","2014-10-03T11:20:30Z","2014-10-05T17:11:02Z"
"","703","Don't take over logging configuration or make it possible to override it","This makes it difficult to configure loggers in tests that use the DropwizardApplicationRule. Also if there's anything that happens in main that requires logging after shutting down dropwizard, all that logging is swallowed since the logging factory is stopped.","closed","","jnaous","2014-09-09T22:55:24Z","2015-05-08T13:19:02Z"
"","1444","ExecutorServiceBuilder: Set default maximumPoolSize to 1; corePoolSiz…","This is somewhat related to issue #575  For unbound queues the current warning triggers when you have a maximumPoolSize of 1, which is actually fine. Howevew, it fails to warn when you have a maximumPoolSize of Integer.MAX_VALUE but this is also misleading. Even worse the default functionality reads like its a Executors.newCachedThreadPool() but actually is limited to a single thread, ie can't run concurrent tasks.  I've added a simple test to prove if a given Executor can run concurrent tasks.  This change improves the warning to trigger in the correct situations. The change sets the default maximumPoolSize to 1, which is less misleading and won't cause a functionality change. Unless a user had done:  ``` java environment.lifecycle().executorService(""some-executor"")                 .workQueue(new SynchronousQueue<>())                 .build() ```  Before this commit this would result in a unbound cached thread pool, now you'd need to do  ``` java environment.lifecycle().executorService(""some-executor"")                 .maxThreads(Integer.MAX_VALUE)                 .workQueue(new SynchronousQueue<>())                 .build() ```  Though if you're manually setting your BlockingQueue implementation I'd suggest the user probably won't rely on default settings anyway.  --commit-message  > ExecutorServiceBuilder: Set default maximumPoolSize to 1; corePoolSize < maximumPoolSize with an unbound work queue has misleading functionality including when the maximumPoolSize is Integer.MAX_VALUE (current default). Note: This is a minor change in functionality as before the default settings would allow only a single threaded pool. > ExecutorServiceBuilder: Creating a Executors.newSingleThreadExecutor() & Executors.newCachedThreadPool() like executor should not cause a warning message > ExecutorServiceBuilder: Simply setting maxThreads to > 1 with an unbound work queue now causes a warning in all cas","closed","","alexheretic","2016-02-04T15:14:45Z","2016-02-06T11:05:52Z"
"","1215","Add additivity setting to LoggerConfiguration","This is related to dropwizard#868 and dropwizard@7ab73cd  With additive=true (the default), a logger writes to its appender -and- any appenders hierarchically above it, including the root logger. For true redirection as described in issue 868, we need to be able to set additive=false so a logger writes to its appender only.","closed","improvement,","nagl-temporal","2015-08-12T15:56:49Z","2015-08-13T08:54:27Z"
"","785","Sanitize URL pattern from rootPath","This is related to #784","closed","bug,","Toilal","2014-11-20T14:59:59Z","2015-05-21T05:50:01Z"
"","1032","Run tests in parallel","This is rebased and squashed version of #1012   I can't reproduce errors locally and on Travis. I've run the build a few dozens times and it passed. I don't want to make the build flaky, but I have a feeling that's something were wrong with CI test environment.  If the build will nevertheless fail, this PR could remain opened, while we don't find the root cause.","closed","","arteam","2015-05-04T12:23:19Z","2016-01-24T08:06:02Z"
"","1050","Allow ""either-or"" authentication methods for resources","This is more of a question about functionality:  Right now one can implement a ChainedAuthenticationFactory and have _all_ of the auth methods apply. In order to get different authentication behavior for different resources, I guess I would need to break out the resources requiring separate authentication methods into a separate service.  My situation, where I believe it would be necessary, is in my OAuth 2.0 based services, my authorization service is in the same deployable artifact as the other resources that will use the tokens vended by it. A user would call /auth/token with Basic Auth and then call /users with Bearer Token auth.  Any issue with this idea? Is there a way to do this already I'm not aware of?","closed","","alph486","2015-05-15T14:57:17Z","2016-01-17T14:42:11Z"
"","1220","Add the ability for some enums to still deserialize properly","This is just a small enhancement to the fuzzy enum deserializer so that it works when some enums (but not all) use toString()","closed","","brentryan","2015-08-17T12:54:05Z","2015-10-30T00:50:34Z"
"","576","Adding an EarlyEofExceptionMapper","This is essentially just a rebase of #385 against latest master, with the response code changed from a 204 to a 400 as per the discussion in the original PR.","closed","","reines","2014-05-12T18:32:31Z","2014-07-09T16:11:41Z"
"","1036","Upgrade to Jetty 9.3.0","This is an issue for future versions (maybe 1.0), because currently we are not ready for migration.  The Jetty development team actively works on 9.3.0 version. The main feature is HTTP/2 support, but also there are also many performance improvements and bugfixes .  I've been playing around with the last milestone build (9.3.0.M2) on HTTP/2 support in Dropwizard. The current work in this [branch](https://github.com/arteam/dropwizard/tree/jetty-93). Basically, I managed to create a module and start Dropwizard as an HTTP/2 server. But during this process I found several places, where we are not compatible: - `org.eclipse.jetty.servlet.ServletTester` was removed - `dropwizard-metrics-jetty9` doesn't support 9.3.0 - `SPDY` is not sipported in Jetty 9.3.0 - `GzipFilter` was removed (actually deprecated, but the code is stripped) and migrated to `GzipHandler` - In `RequestLog` the signature of the `log` method is changed.  I plan to update the list according to the latest Dropwizard and Jetty milestones and convert this issue to a pull request when we are ready.","closed","improvement,","arteam","2015-05-08T08:41:25Z","2015-11-25T18:28:36Z"
"","1000","add support for logback's maxFileSize attribute","This is a pull request to add support for logback's maxFileSize attribute.  Earlier discussed here: https://github.com/dropwizard/dropwizard/issues/997","closed","feature,","ckingsbu","2015-04-19T17:01:38Z","2015-10-14T11:23:34Z"
"","1204","Add logging of explicitly mentioned consumes and produces media type for jersey end points","This is a minor enhancement based on a discussion in yesterday's PR - Link.  What this does it for cases where a person has two or three functions for handling different media types of the same endpont, this prints out the consumes & produces media types, if available. Note that if there are no @Produces or @Consumes annotation for an endpoint then nothing is logged, thereby making the logging appear the same to previous users of dropwizard. (I haven't had to modify any of the other unit tests, which prove this point)  Example:-  ``` GET /abc MyResourceClass         Accepts  - application/json,  text/html         Produces - application/xml GET /abc2 MyResourceClass GET /abc3 MyResourceClass GET /abc4 MyResourceClass ```  One caveat of this change is that I had to revert back to Lists from Sets (as Sets don't support get/set operation to add-on media types from different functions for the same end point) thereby rendering my PR yesterday useless :cry: .  I'm open to suggestions/modifications/even total rejection of this idea itself :wink: . No worries!","closed","","afrin216","2015-07-31T19:41:48Z","2015-11-21T10:50:05Z"
"","1203","Add logging of explicitly mentioned consumes and produces media type for jersey end points","This is a minor enhancement based on a discussion in yesterday's PR - Link.  What this does it for cases where a person has two or three functions for handling different media types of the same endpont, this prints out the consumes & produces media types, if available. Note that if there are no @Produces or @Consumes annotation for an endpoint then nothing is logged, thereby making the logging appear the same to previous users of dropwizard. (I haven't had to modify any of the other unit tests, which prove this point)  Example:-  ``` GET /abc MyResourceClass         Accepts  - application/json,  text/html         Produces - application/xml GET /abc2 MyResourceClass GET /abc3 MyResourceClass GET /abc4 MyResourceClass ```  One caveat of this change is that I had to revert back to Lists from Sets (as Sets don't support get/set operation to add-on media types from different functions for the same end point) thereby rendering my PR yesterday useless :cry: .  I'm open to suggestions/modifications/even total rejection of this idea itself :wink: . No worries!","closed","","afrin216","2015-07-31T19:26:05Z","2015-07-31T19:27:04Z"
"","632","Upgrade to commons-lang3.","This is a minor change to use the non-legacy version of commons-lang. No functional change expected, but it does make more sense to use the latest in this case.","closed","","deverton","2014-06-25T01:19:25Z","2014-06-25T20:49:59Z"
"","641","Only use the PermissiveEnumDeserializer if there is no JsonCreator","This is a fix for #549 based on the code in a comment by @chrsan. It also adds conversion from periods to underscores for fuzzy enums.","closed","","reines","2014-07-03T17:15:39Z","2014-07-07T08:27:06Z"
"","1436","Allow Validated to annotate non-entity objects","This is a fix for #1433.  Previously, the `Validated` annotation would only be allowed on entity parameters of a resource, even though a `BeanParam` could be validated. This created a problem where one would want to specify a validation group on an endpoint that only accepted a `BeanParam`, as they would be forced to annotate a dummy request entity with `Validated`.  This pull request also handles the situation when the user supplies two or more entities with `Validated`. These annotations must be equivalent (and thus redundant), else an exception will be thrown as the underlying validator cannot validate parameters under different validation groups.  I would like critiques of the implementation because as of right now, a `WebApplicationException` is thrown, as a `RuntimeException` will result in Jersey interpreting it as a `ProcessingException`, and `WebApplicationException` works around it. Alternatively, we could define a new exception type but that would require adding a new exception mapper as well, which I feel like is more code bloat than I care for.  As a side note, it should definitely be documented (looking at me) that a single parameter annotated with `Validated` will be effect how the rest of the parameters are validated with the same group. Some would find the following surprising:  ``` java @PUT public FooBar putFoo(@Validated(Group.class) @Valid @BeanParam MyParams params,                      @Valid @NotNull FooBar entity) {     // ... } ```  In this case, both `params` and `entity` are validated under the `Group` class. The same would apply if `entity` was annotated and `params` wasn't.","closed","improvement,","nickbabcock","2016-01-29T20:08:22Z","2016-03-16T15:02:22Z"
"","1480","Upgraded to Jetty 9.3.8.v20160314","This is a bugfix release. The release notes are [here](https://github.com/eclipse/jetty.project/blob/jetty-9.3.x/VERSION.txt)","closed","improvement,","arteam","2016-03-16T15:42:19Z","2016-03-17T09:11:14Z"
"","1535","Implemented Dropwizard Codegenerator Maven Plugin #1475","This implementation is hopefully the beginning of a great code-generator for Dropwizard API's. I would appreciate a code review.  You can find a working example here - https://github.com/jansoren/akka-persistence-java-example/  Feedback on the example would also be appreciated :+1:","closed","","jansoren","2016-05-04T17:06:07Z","2016-05-05T19:02:03Z"
"","618","Updating h2 to 1.4.178","This has a bunch of changes, but considering h2 is only used in tests and the example, which are both still working fine, why not?  http://www.h2database.com/html/changelog.html","closed","","reines","2014-06-13T20:51:57Z","2014-06-13T21:33:24Z"
"","915","Bugfix for Issue #850.","This fixes bug #850. Instead of committing the transaction on the `RESOURCE_METHOD_FINISHED` event, which is emitted from Jersey before the `ON_EXCEPTION` event, the transaction is commited on `RESP_FILTERS_START` event, which is emitted after the `ON_EXCEPTION` event.","closed","","phxql","2015-03-04T21:20:02Z","2015-03-06T21:23:40Z"
"","730","Tests and fix for MetricsFilter on BaseReporterFactory","this fixes #711 and extends #713","closed","bug,","jangalinski","2014-10-05T20:03:51Z","2015-02-22T00:15:24Z"
"","637","Marking HibernateBundle#initialize as final prevents configuration of Hibernate4Module","This fix in jackson-hibernate 2.3.3 changes serialization of a bunch of entities w.r.t. 2.3.2:  https://github.com/FasterXML/jackson-datatype-hibernate/issues/47  It would be easy to disable the Transient check IF HIbernateBundle#initialize were non-final or had an overridable Hibernate4Module factory method. Since it's final, no dice.   Yes, sharing entities between Hibernate and Jackson seems a recipe for tight coupling, but it would be nice to be able to dig out from this hole without rewriting a bunch of legacy entities.","closed","","clarkbreyman","2014-06-29T01:14:34Z","2014-09-07T04:32:59Z"
"","1387","Add RegisterDefaultExceptionMappers to TestRule","This commit makes the default behavior of `ResourceTestRule` to register all the default exception mappers, much like how the default yaml configuration will register the default exception mappers.  If a user wants to override the default exception mappers, then they can call `setRegisterDefaultExceptionMappers(false)` and subsequently register their custom exception mappers.  Note that this is breaking behavior as those who registered their exception mappers will now have to call setRegisterDefaultExceptionMappers and those who wanted the default exception mappers should now remove their registrations of the default exception mappers.  The  reason behind this pull request is that, in my opinion, it is unreasonable for someone new to Dropwizard to know all the default exception mappers that they will need to register in `ResourceTestRule` to get the same behavior as their app.","closed","improvement,","nickbabcock","2015-12-15T16:46:56Z","2015-12-16T07:55:05Z"
"","1105","Use dropwizard hibernate validator in jersey validations","This commit enables `Optional` and `AbstractParam` parameters to be validated in resource endpoints. This required additional code needed in setting up the validator, so I extracted the common functionality out to a new class `Hibernate` that should be analogous to the present `Jackson` class.  Also this commit makes the `NonEmptyStringParam` constructor public like other `AbstractParam`s. The second commit registers the default `ConstraintViolationExceptionMapper` in test cases (and this can always be overridden by the user if they have a custom exception mapper for constraint violations)  The one area where this commit falls short is that it currently doesn't allow a user custom hibernate configuration in the jersey validation. Thus, request entities will be validated by the user's validator but parameters will not (they'll still be validated by the Dropwizard configured validator). Since I wasn't sure how best to incorporate this functionality, I decided to leave it out of this commit.  This allows for some interesting endpoints:  ``` java     @GET     @Path(""search"")     public String search(             @QueryParam(""limit"")             @DefaultValue(""10"")             @UnwrapValidatedValue             @Min(1) @Max(100)             IntParam limit,              @QueryParam(""offset"")             @DefaultValue(""0"")             @UnwrapValidatedValue             @Min(0)             IntParam offset) {         // ...     } ```  It's annotation overload (I believe `@UnwrapValidatedValue` will be redundant in Hibernate 5.2), but it certainly does pack a lot of functionality in the parameters.","closed","improvement,","nickbabcock","2015-06-06T15:58:48Z","2015-06-12T06:12:22Z"
"","1503","configures the environment with the context paths before the application.run()","This commit configures the context paths for the application before the application `run()` instead of setting it prior to starting the server. This allows applications to obtain the context paths during the run method.  This shouldn't break any changes to the users, but note that ServerFactory now needs to call `configure` explicitly to set the context paths in the environment","closed","improvement,","qinfchen","2016-03-31T01:35:58Z","2016-03-31T14:34:36Z"
"","1502","Added the ability to set application/admin contextPath during Application.run()","This commit allows users to set application/admin contextPath in the following priority order: 1. the yaml configuration 2. set the context path from the application/admin context in the application's `run` block 3. the default value from SimpleServerFactory or DefaultServerFactory  This should not have breaking changes for users who have configured the context path for their apps via the yaml file.","closed","","qinfchen","2016-03-30T19:09:06Z","2016-03-31T00:16:58Z"
"","1532","Allow lazy loading of ConfigOverride values.","This code below is a current workaround the fact that values must be known ahead of time. We are running into an issue where we want to have port numbers be provided dynamically, but they won't be known ahead of time.  ```     static ConfigOverride dynamicConfig(String name, Supplier valueSupplier) {         ConfigOverride override = Mockito.mock(ConfigOverride.class);          Mockito.doAnswer((inv)-> {             ConfigOverride.config(name, valueSupplier.get()).addToSystemProperties();             return null;         }).when(override).addToSystemProperties();          Mockito.doAnswer((inv)-> {             ConfigOverride.config(name, valueSupplier.get()).removeFromSystemProperties();             return null;         }).when(override).removeFromSystemProperties();          return override;     } ```  We could easily change the current implementation of ConfigOverride to allow a Supplier instead of a value to work around this specific issue.  It seems like the ConfigOverride implementation isn't really great in terms of changing global system properties rather than having better scoping.","closed","needs code,","jkolash","2016-04-27T13:49:00Z","2016-05-29T13:48:56Z"
"","936","Fix tests on windows","This change fixes some failing unit tests on Windows.","closed","","christophercurrie","2015-03-12T04:10:27Z","2015-04-01T01:39:34Z"
"","611","Tests failed in Windows. Changed test to be platform independent.","This change fixes failing tests when building on Windows 7.","closed","","bnese","2014-06-09T19:57:53Z","2014-06-13T06:20:03Z"
"","1162","Make authorization optional","This change consists from two parts: fixing behavior of the`@PermitAll` annotation and making providing an authorizer in `AuthFilterBuilder` optional.  The `@PermitAll` annotation is actually intended  for marking that a resource doesn't require authorization. Currently we treat it like the resource doesn't require authentication.   The solution is to register an auth filter for the methods marked with the `@PermitAll` annotation. The methods will require authentication, but anyone, who was given access, can use it. This simplifies the work of users who don't care about roles and authorization. They don't need create a fiction role and register `RolesAllowedDynamicFeature`.  Because users have an option to not authorize their resource methods, it makes sense to not require a custom authorizer in `AuthFilterBuilder`. By default the filter will permit access to any principal in any role.","closed","","arteam","2015-07-12T13:42:12Z","2016-01-24T08:05:32Z"
"","1415","Add a Logback Access RequestLog implementation","This change builds on top of the #1290 by applying the proposed changes from #580 with some tweaks. It still needs more javadoc and unit tests, but I thought I would get it out here to see if there is interest in this change.  A couple questions: 1. Should a warning message be logged if the LogFormat is configured but the SLF4JRequestLog is being used that states that the supplied format is being ignored? 2. Should a warning message be logged if both the LogFormat and the TimeZone are configured in the appender config that states that the TimeZone will be ignored and can be configured as part of the LogFomat?","closed","improvement,","ghenkes","2016-01-14T22:01:56Z","2017-05-09T00:35:52Z"
"","681","Expose the ability to set custom HttpRoutePlanners","This change allows the user to control proxy settings by providing a custom HttpRoutePlanner instance.  For example, the user can provide a [SystemDefaultRoutePlanner](http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/conn/SystemDefaultRoutePlanner.html) to get proxy settings from system properties (ie [http.proxyHost and friends](http://docs.oracle.com/javase/7/docs/api/java/net/doc-files/net-properties.html)).  This is an alternative to #657.  The difference is that this PR delegates the configuration responsibility to apache HttpClient and the user code, rather than having DropWizard own that responsibility.  It also has the advantage that, unlike #657, the user is given the option of specifying a proxy server by system properties, including the `http.nonProxyHosts` property which specifies a pattern of hostnames which should _not_ be proxied.  This is a common use case in networks where external public internet requests must go via a proxy server, but internal private network requests must not.  I currently have a project with exactly this use case and so I would not be able to use #657 to configure my proxy server.  Currently, in order to work around it, I am using code like the following:  ``` java     DefaultHttpClient client = (DefaultHttpClient) builder.build(name);     client.setRoutePlanner(new SystemDefaultRoutePlanner(ProxySelector.getDefault()));     return new ApacheHttpClient4Handler(client, null, true); ```  This workaround is a little hacky in that I'm having to do a typecast in order to get at the `setRoutePlanner` method, and I'm assuming a little too much knowledge about the type of HttpClient that HttpClientBuilder.build() returns.  This PR has the disadvantage that, unlike #657, this would split proxy configuration apart from the rest of a DropWizard application configuration.  I'm relatively new to DW so I don't know what the project rationale is and what the preferred configuration style would be.  Finally, this isn't actually mutually exclusive with #657.  It's entirely conceivable that both could be merged and coexist -- allowing the user to provide a custom HttpRoutePlanner for maximum flexibility, but providing a DropWizardish configuration for common proxy patterns.","closed","improvement,","philandstuff","2014-08-11T16:09:03Z","2020-08-24T14:02:15Z"
"","1392","Add support for authentication of polymorphic principals","This change adds support for polymorphic `java.security.Principal` classes for use with Dropwizard's authentication mechanism. See #1318 for background.  My company has been running these custom `AuthValueFactoryProvider` and `AuthDynamicFeature` classes in our API server for months without issue. As stated in the ticket, we have a need to issue multiple classes of API keys to different API consumers and this change has suited the job well.  Note that the new `PolymorphicAuthDynamicFeature` only supports authentication, as opposed to authorization. [`AuthDynamicFeature`'s short-circuit on `RolesAllowed`/`DenyAll`/`PermitAll`](https://github.com/dropwizard/dropwizard/blob/2c3cca983f7b844a9f4bbaf93865120eae553e2a/dropwizard-auth/src/main/java/io/dropwizard/auth/AuthDynamicFeature.java#L39-L41) doesn't jive with per-Principal-subclass filtering, so I opted to limit the feature to authentication.","closed","improvement,","evnm","2015-12-19T23:00:25Z","2017-10-25T14:40:34Z"
"","1435","Allow for supplying Filters to Logging Appenders","This change adds a seam to allow consumers to supply Logback Filters to apply to logging Appenders. These filters will be applied, in order, after the threshold filter. This allows for further refinement of what will be logged. For example, I have an endpoint that is called on a schedule to check availability that I would like to exclude from the access logs by supplying a filter for this URI.  You could also add appenders with the following: - A filter that will only log failures based on status code. - A filter that will log requests with slow responses. - A filter that will log large requests/responses.","closed","improvement,","ghenkes","2016-01-29T14:27:11Z","2016-02-01T13:17:34Z"
"","979","Add support for X.class to DropwizardClientRule","This can be helpful in cases where non-Resources are passed in that depend on `@Context` annotations or it's preferable for other reasons to have Jersey manage the object lifetime.","closed","","jkrems","2015-04-09T01:18:08Z","2015-04-16T19:16:41Z"
"","892","Potential XSS vulnerability in AbstractParam","This came up when a customer ran a scan against a Dropwizard app.  In `AbstractParam` ([here](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-jersey/src/main/java/io/dropwizard/jersey/params/AbstractParam.java#L69)), the input parameter value is sent back unescaped.  While useful, that could enable an attacker to insert scripting into a page that displays those error messages.","closed","security,","prb","2015-02-23T05:44:31Z","2015-04-27T20:24:31Z"
"","952","Auth with RolesAllowedDynamicFeature","This allows evaluating auth before processing resource method params","closed","feature,","carlo-rtr","2015-03-24T18:12:27Z","2015-05-07T13:20:04Z"
"","1150","Add links to Github issues in the 0.9.0 release notes","This affords to users more easily browse details of the new features and bug fixes.","closed","","arteam","2015-07-02T15:17:24Z","2016-01-24T08:06:11Z"
"","620","Updating slf4j-api to 1.7.7","This adds the use of generics to the internal API.  http://www.slf4j.org/news.html https://github.com/qos-ch/slf4j/commit/9e3e9a34f6264e466010982bc9df14287b692abb","closed","","reines","2014-06-13T20:56:56Z","2014-06-13T21:59:20Z"
"","1181","Add a config option to validate inactive connections","This adds an option to `HttpClientConfiguration` named `validateAfterInactivityPeriod` which enables a 'stale' connection check with the frequency of the given period.  This check helps detect connections that have become stale (half-closed) while kept inactive in a client's connection pool.  This check is disabled by default, but is configurable as a duration. ##### Reason for introduction  The HTTP/1.1 specification indicates the responsibility is with the client to handle closed keep-alive connections gracefully, and that the server can be expected to close that session at any time with or without intention.  In the HTTP/1.1 RFC#7230 it is stated in section 6.3.1 that:  > Connections can be closed at any time, with or without intention. > Implementations ought to anticipate the need to recover from asynchronous close events.  Without the 'stale' connection check in place we see regular broken connections due to this behaviour.","closed","","chrisholmes","2015-07-23T16:56:22Z","2015-07-24T10:39:44Z"
"","871","Adding a file size based FileAppenderFactory","This adds a AppenderFactory for logging with logback. The appender creates a file size based TriggerPolicy. So log files roll over when a given file size is reached.","closed","","HaVonTe1","2015-01-30T11:19:15Z","2015-04-16T07:46:46Z"
"","737","Add Jackson annotations missing from #736","These should have been in the original PR, sorry!","closed","documentation,","punya","2014-10-07T21:06:10Z","2014-10-19T19:45:23Z"
"","835","ResourceTestRule does not always use InMemoryTestContainer","There's no code in ResourceTestRule that forces it to use InMemoryTestContainerFactory for the JerseyTest instance it creates, despite the documentation saying that. The default logic in JerseyTest will default to using GrizzlyTestContainerFactory if it is on the classpath (see https://github.com/jersey/jersey/blob/master/test-framework/core/src/main/java/org/glassfish/jersey/test/TestProperties.java#L100 and https://github.com/jersey/jersey/blob/master/test-framework/core/src/main/java/org/glassfish/jersey/test/JerseyTest.java#L502). This can happen if the test using ResourceTestRule coexists with another test, that happens to subclass JerseyTest directly to use GrizzlyTestContainerFactory for its additional features.","closed","feature,","Lugribossk","2015-01-06T21:50:56Z","2015-01-17T15:47:52Z"
"","1186","Configuring the RedirectStrategy of HttpClientBuilder","There's currently no way (as far as I could see) in Dropwizard's `HttpClientBuilder` of configuring the underlaying Apache's HttpClientBuilder `RedirectStrategy`.  I just had a use case yesterday where I wanted to completely disable redirects for POST (which by default follows 303's) but couldn't do it out of the box with the builder.   Since I was already using DW's builder for the rest of my HTTP clients (and wanted to keep doing that) the best solution I could find was to create my own builder which extends `io.dropwizard.client.HttpClientBuilder` and override the `createClient` method to call `builder.disableRedirectHandling();` on the Apache's builder that is passed as a parameter to that method and then delegating to `super.createClient(builder, manager, name);`.   But since `ConfiguredCloseableHttpClient` is package protected I had to create a `io.dropwizard.client` package inside my code base. Obviously an ugly hack but I couldn't find any other way to do it at the HttpClientBuilder level.  Given how trivial this would be to implement, it seems like an easy improvement. Any thoughts? I can submit a PR if you think this would be worth having.","closed","improvement,","jlordiales","2015-07-24T16:58:40Z","2015-10-17T08:46:01Z"
"","1346","Fix typo in Getting Started section of docs","There's a typo in the ""And Friends"" section of the ""Getting Started"" docs. `JSR-349` should be `JSR-303`, as specified in the links below that section.","closed","","tomshen","2015-11-19T19:23:24Z","2015-11-20T03:53:40Z"
"","1017","Upgrade to Apache HTTP Client 4.4.1","There were 3 releases of Apache Http Client with many bug fixes since the last update.  Release notes:  - [4.3.6](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12310360&version=12327489) - [4.4](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12310360&version=12324872) - [4.4.1](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12310360&version=12329394)  Interesting fixes for us: - [Stale connections in pool cause NoHttpResponseException](https://issues.apache.org/jira/browse/HTTPCLIENT-1610)  - [Add option to create a connection eviction thread for a non-shared connection manager](https://issues.apache.org/jira/browse/HTTPCLIENT-1583) - [SSLContextBuilder does not preserve natural order of Trust / Key managers ](https://issues.apache.org/jira/browse/HTTPCLIENT-1585) - [SSLConnectionSocketFactory not respecting enabled protocols](https://issues.apache.org/jira/browse/HTTPCLIENT-1595) - [Connect timeout ignored during SSL connection setup](https://issues.apache.org/jira/browse/HTTPCLIENT-1589)","closed","","arteam","2015-04-26T16:47:26Z","2016-01-24T08:06:48Z"
"","1255","No configuration for setting PoolProperties.removeAbandoned in io.dropwizard.db.DataSourceFactory.java","There seems to be not any support for passing removeAbandoned parameter value to the tomcat jdbc pool through dropwizard 7 database config. Is there any way we can set this property?","closed","improvement,","dhankhar21","2015-09-18T12:17:03Z","2015-09-28T12:21:24Z"
"","1127","Endpoint log not finding nested resources","There is a small error in the code that prints out an application's endpoints on startup.  This causes it to not print endpoints defined in nested resources.  The error is in this line of `DropwizardResourceConfig`:  https://github.com/dropwizard/dropwizard/blob/45b37a57553897427a62b0c64a9e49413c398555/dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java#L178  ``` for (ResourceMethod method : childResource.getResourceMethods()) { ```  That line should be:  ``` for (ResourceMethod method : childResource.getAllMethods()) { ```  This error was introduced in the migration from Jersey 1 to Jersey 2, in this commit:  https://github.com/dropwizard/dropwizard/commit/e5c960b17a69dd566282ecdd71de1c4fd901f6bd#diff-ae2b89db4cf72cea96b5e6502c785af7L181  Notice the loop over ""sub resource locators"" was removed.  `resource.getResourceMethods()` (which is being used now) does not include sub resource locators.  `resource.getAllMethods()` does.  The current code is looking for sub resource locators within the loop with this line:  ``` } else if (method.getType() == ResourceMethod.JaxrsType.SUB_RESOURCE_LOCATOR) { ```  ...but it won't find any because it called the wrong method above.","closed","","michaelhixson","2015-06-24T05:38:43Z","2015-07-01T20:29:45Z"
"","968","dropwizard-jdbi: Binding joda-time DateTime objects to SQL uses JVM timezone, not the timezone in the DateTime object","There is a bug in io.dropwizard.jdbi.args.JodaDateTimeArgument that appears when the JVM timezone differs from the database timezone. This class uses:   statement.setTimestamp(position, new Timestamp(value.getMillis())); to bind a DateTime (""value"" here) to a PreparedStatement (""statement""), which creates a Timestamp using the JVM's timezone instead of the DateTime object's timezone.  The solution seems to be to use the setTimestamp method that also takes a Calendar argument (http://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html#setTimestamp%28int,%20java.sql.Timestamp,%20java.util.Calendar%29).","closed","bug,","mattmcclain","2015-04-01T15:26:43Z","2015-11-18T13:13:56Z"
"","1199","Use inmemory jersey server for view tests","The view tests were the only ones that used the `jdk-http` provider. Once I swapped it out for `inmemory`, the tests ran 25 seconds faster.","closed","improvement,","nickbabcock","2015-07-30T16:14:11Z","2015-07-30T16:42:56Z"
"","876","Update JDBI Version and Remove Unnecessary Classmate Exclusion","The version bump is straightforward.  Classmate _is_ used by jdbi, but it is shaded and renamespaced. There is no declared dependency on classmate.","closed","","brianm","2015-02-05T19:06:04Z","2015-02-06T08:53:29Z"
"","1293","Replace default validator in tests","The validator used in tests (`Validation.buildDefaultValidatorFactory().getValidator()`) is not dropwizard configured, thus bugs like #1292 slipped through. This pull request moves the tests to the dropwizard configured validator. Note that this doesn't cover all cases as some classes are not able to import dropwizard-jersey (where the dropwizard configured validator lies) into the tests, so more work will need to be done to cover all the bases.  ~~This pull request also fixes #1292~~","closed","improvement,","nickbabcock","2015-10-22T14:44:22Z","2015-10-22T16:30:10Z"
"","592","Fix output of data in DbDumpCommand","The upgrade to Liquibase 3.1.x seems to have broken the functionality to include the database contents in a dump (Liquibase Changelog) create with the `DbDumpCommand`.  This PR fixes the `DbDumpCommand` and thus #476.","closed","bug,","joschi","2014-05-22T11:41:59Z","2014-06-28T09:05:04Z"
"","1106","Width independent test","The test for the db migrate command help is dependent upon terminal width, so it fails on my mac laptop. This change fixes the test to instruct argparse4j to not detect terminal width during the test. Unfortunately the library keeps this setting as a static class variable, rather than a setting on the parser, so the try/catch block is needed to ensure it gets reset after the test is done.","closed","","christophercurrie","2015-06-06T19:13:30Z","2015-06-08T06:58:09Z"
"","772","Update testing.rst (Documentation)","The syntax provided for testing a Jersey client needed updating for the latest version of Jersey.","closed","documentation,","WilliamHerbert","2014-11-11T05:10:10Z","2014-11-11T14:24:18Z"
"","1506","Fix tests affected by the DST change","The problems with these three tests were caused by the fact, that the date used in them has been forcing non-DST timezone (i.e. `+01:00` in most of the Europe), but then it was compared to the same date, but in current (that is DST) timezone (i.e. `+02:00`).","closed","bug,","patrox","2016-04-01T20:38:39Z","2016-04-01T21:26:42Z"
"","1250","Wait for application shutdown until XYZ is done","The Problem is, that I fire a shutdown event and DW is shutting down before I can do some cleaning work before resource shutdown.  In my case, I have a loadbalancer ressource, polling every x seconds and submitting some loadbalancer informations to the DW apllication. I still want to run the application (and accept jobs) until loadbalancer excludes my DW application. After excluding the normal DW shutdown process (managed objects...) may be started.  I'm not sure, if I have not seen it yet or there is no way to to this. A ""BeforeShutdownHandler"" would be nice to handle all actions before application is stopped. On top a ""stillAcceptsJobs"" boolean trigger would be even nicer, so everyone can choose, if application will accept new jobs until ""BeforeShutdownHandler"" is finished or not.   I can not use managed objects, because at the time this objects are stopped, the application does not accepts any new requests, so my loadbalancer resource is not callable any more.  Any external call with DW task (e.g. a shutdown task) is not my way of a clean shutdown. I want to be sure, that ,for every shutdown, DW can communicate with other applications (like loadbalancer or some other services) and the DW shutdown is deferred, until this cleaning task are done.  If there is another way to implement this behavior, please let me know.","closed","","m8r-ubnc5g","2015-09-09T12:31:58Z","2015-09-10T16:39:30Z"
"","1239","Fix auth testing documentation","The previous PR #1234 was for dropwizard 0.8.*, I updated it to work with dw 0.9 :)  I think that an empty line was missing after `.. code-block:: java` so the block was not displayed well.  Do we have to keep this part of the documentation in this file or should I move it to the **Testing** section?","closed","","akraxx","2015-08-26T15:59:49Z","2015-09-29T18:46:29Z"
"","1123","Null entities return error messages","The previous behavior was returning an empty error list.","closed","","nickbabcock","2015-06-22T15:13:28Z","2015-06-22T20:19:21Z"
"","736","Docs for polymorphic configuration","The polymorphic configuration feature (using `Discoverable` and `META-INF/services`) is used extensively within Dropwizard and is valuable for users too, but isn't adequately documented anywhere. Here's a first pass at adding something.","closed","documentation,","punya","2014-10-07T16:23:57Z","2014-10-07T21:04:08Z"
"","929","Replace ImmutableMap with Map interface in ViewRenderer interface","The original change was using the concrete `ImmutableMap` implementation from Google Guava instead of the generic `Map` interface which allows the use of other map implementations.","closed","","joschi","2015-03-08T11:01:09Z","2015-03-08T15:19:11Z"
"","814","Bump SLF4J API version","The newest version has a handful of cool features, such as the ability to detect wrongly-named loggers.","closed","improvement,","punya","2014-12-16T03:36:46Z","2014-12-18T15:46:07Z"
"","878","[Regression] Created Response URI Incorrect in DW 0.8.0-rc3-SNAPSHOT","The Location header is not being created correctly in DW 0.8.0-rc3-SNAPSHOT when Response.created() is returned with a URI. This appears to be a regression from DW 0.7.1. ### To reproduce: 1. Clone the dropwizard-example folder, setup the DB, and run it. 2. Ensure `0.8.0-rc3-SNAPSHOT` is in the POM 3. Edit the [PeopleResource starting on line 27](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-example/src/main/java/com/example/helloworld/resources/PeopleResource.java#L27)    and change to:  ``` java         peopleDAO.create(person);         return Response.created(new URI(String.valueOf(person.getId()))).build(); ``` 1. The resulting response will contain a `Location` header with `http://localhost:8080/4` or similar ### Expected result:  `http://localhost:8080/people/4` ### Actual result:  `http://localhost:8080/4`","closed","","MarkHerhold","2015-02-15T22:13:29Z","2016-01-18T15:41:23Z"
"","1002","Gather all endpoints and sort before logging them","The list of endpoints logged when starting Dropwizard becomes hard to read when it grows larger. This will sort all endpoints before logging them.","closed","","softarn","2015-04-20T12:21:56Z","2015-04-27T19:43:51Z"
"","973","Upgrade to Jackson 2.5.2","The latest patch version from 2.5 is 2.5.2, so it would make sense to upgrade from 2.5.1. Changes are listed here:  https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.5.2  If necessary, I can create a PR, but since this is a one-liner I thought I'll just file an issue first. If you prefer PR, just let me know.","closed","improvement,","cowtowncoder","2015-04-07T18:39:37Z","2015-04-26T18:43:20Z"
"","1100","update the client docs in the manual","The jersey client example should use `jerseyClient` as its name to be consistent with the [configuration docs](http://www.dropwizard.io/manual/configuration.html#man-configuration-clients-jersey). While I was at it, I also trimmed some trailing whitespace.","closed","","dareonion","2015-06-04T22:33:17Z","2015-06-05T06:49:24Z"
"","1447","Java 8 - OptionalValidatedValueUnwrapper supports Optional but no classes exist for OptionalInt, OptionalLong, etc","The Java 8 module `OptionalValidatedValueUnwrapper` supports only `java.util.Optional` and there should be additional classes created for `OptionalInt`, `OptionalLong`, and `OptionalDouble`. This is necessary so `@UnwrapValidatedValue` works and can unwrap `OptionalInt` variables for things like `@Min`, `@Max`, etc. Until this is resolved we need to use `Optional`, `Optional`, `Optional` for validation to work.","closed","improvement,","michaelbraun","2016-02-05T22:04:21Z","2016-02-06T22:45:09Z"
"","551","Change tabs to spaces.","The indentation was weird on github because of using tabs.","closed","","varunl","2014-04-23T20:59:22Z","2014-06-12T18:38:59Z"
"","1335","hk2 2.4.0-b31 has a malformed Maven pom (in hk2-parent)","The HK2 issue can be found here:  https://java.net/jira/browse/HK2-277  A DW 0.9.1 project uses hk 2.4.0, which has a malformed line in its parent pom (the last one below):     javadoc-jdk8+            [1.8  This causes the Maven project import to fail in IntelliJ. I can use 'mvn idea:idea' as a workaround, but its really annoying because that blows away all your project settings. Its much nicer to just hit the refresh button, or auto-refresh when the poms change.  If DW were bumped to 2.4.0-b32 or b33 the issue would be avoided.","closed","","rupertlssmith","2015-11-10T14:02:17Z","2015-11-10T15:25:14Z"
"","1315","Cannot use metrics reporters in 0.9.0 or 0.9.0-rc5","The following works in 0.9.0-rc4.  Class  ``` import io.dropwizard.Application; import io.dropwizard.Configuration; import io.dropwizard.setup.Environment;  public class App extends Application {   public static void main(String[] args) throws Exception {     new App().run(""server"", ""config.yml"");   }    @Override   public void run(Configuration configuration, Environment env) {} } ```  config.yml (note that this also fails for other reporter types, but I'm going with the simplest example)  ``` metrics:   reporters:     - type: console       timeZone: UTC       output: stdout ```  Starting in 0.9.0-rc5 and also in 0.9.0, you get this:  ``` Exception in thread ""main"" javax.validation.UnexpectedTypeException: HV000186: The constraint of type 'javax.validation.constraints.NotNull' defined on 'metrics.reporters[0].frequency' has multiple matching constraint validators which is due to an additional value handler of type 'io.dropwizard.validation.valuehandling.OptionalValidatedValueUnwrapper'. It is unclear which value needs validating. Clarify configuration via @UnwrapValidatedValue.     at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.getConstraintValidatorInstanceForAutomaticUnwrapping(ConstraintTree.java:266)     at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.getInitializedConstraintValidator(ConstraintTree.java:163)     at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:116)     at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:87)     at org.hibernate.validator.internal.metadata.core.MetaConstraint.validateConstraint(MetaConstraint.java:73)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateMetaConstraint(ValidatorImpl.java:592)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraint(ValidatorImpl.java:555)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForDefaultGroup(ValidatorImpl.java:490)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForCurrentGroup(ValidatorImpl.java:454)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:406)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraint(ValidatorImpl.java:770)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:656)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:415)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraint(ValidatorImpl.java:770)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:656)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:415)     at org.hibernate.validator.internal.engine.ValidatorImpl.validate(ValidatorImpl.java:204)     at io.dropwizard.configuration.ConfigurationFactory.validate(ConfigurationFactory.java:257)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:149)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:95)     at io.dropwizard.cli.ConfiguredCommand.parseConfiguration(ConfiguredCommand.java:115)     at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:64)     at io.dropwizard.cli.Cli.run(Cli.java:70)     at io.dropwizard.Application.run(Application.java:80)     at testing.App.main(App.java:9) ```","closed","","achaphiv","2015-10-29T08:22:51Z","2015-10-29T08:29:09Z"
"","1339","java.util.Stream#iterator doesn't serialize properly","The following is true as of v0.9.1.  This works:  ``` @GET public Object iterators() {   return Arrays.asList(""foo"", ""bar"").iterator(); } ```  it produces:  ``` [""foo"",""bar""] ```  This does not work:  ``` @GET public Object iterators() {   return Arrays.asList(""foo"", ""bar"").stream().iterator(); } ```  it produces:  ``` {} ```  It looks like it doesn't like the fact that Stream#iterator implements multiple interfaces? Because this does work:  ``` @GET public Object iterators() {   Iterator streamIterator = Arrays.asList(""foo"", ""bar"").stream().iterator();   return new com.google.common.collect.ForwardingIterator() {     @Override     protected Iterator delegate() {       return streamIterator;     }   }; } ```  From the source of Spliterators#iterator  ``` public static Iterator iterator(Spliterator spliterator) {         Objects.requireNonNull(spliterator);         class Adapter implements Iterator, Consumer { /** left out **/ }         return new Adapter(); } ```  Note that this also works:  ``` @GET public Object iterators() {   return (Iterable) Arrays.asList(""foo"", ""bar"").stream()::iterator; } ```","closed","","achaphiv","2015-11-13T07:47:44Z","2016-01-17T14:41:01Z"
"","765","LogFormat cannot start with % or [%","The following ConfigurationParsingException is thrown when the log format is started with % or [%  java.lang.RuntimeException: io.dropwizard.configuration.ConfigurationParsingException: ./dropwizard_config.yml has an error: - Malformed YAML at line: 21, column: 21; while scanning for the next token; found character % '%' that cannot start any token. (Do not use % for indentation);  in 'reader', line 21, column 21:           logFormat: [%-5level] [%d{yyyy-dd-mm HH:mm:s ...                        ^  Given the way that logback formats are constructed Its almost inevitable that the format string will start with %.  The following is the format I would like to use  logFormat: %-5level [%d{yyyy-dd-mm HH:mm:ss.SSS}] [%thread] %logger - %msg%n  As can be seen every element starts with % the only workaround I have found is to prefix the format with a letter of the alphabet.  EG.  logFormat: X %-5level [%d{yyyy-dd-mm HH:mm:ss.SSS}] [%thread] %logger - %msg%n","closed","","piersy","2014-10-30T10:55:12Z","2015-04-12T01:29:56Z"
"","1426","Dependency on glassfish hk2 version 2.4.0-b31 missing Java 8 profile fix in version 2.4.0","The fix for the profile javadoc-jdk8+ in glassfish hk2's parent pom detailed in this ticket does not appear to have made it into Dropwizard's version of that dependency: https://java.net/jira/browse/HK2-277  The result is that I am unable to pull in Dropwizard as a dependency on a project using a version of Maven later than 3.0.3.","closed","","PeterGroesbeck","2016-01-20T19:15:45Z","2016-01-20T20:29:49Z"
"","933","BasicAuthProvider does not exist in 0.8 version","The example on http://dropwizard.io/0.8.0/docs/manual/auth.html#protecting-resources is not working. The BasicAuthProvider does not exist in 0.8 version.  Same problem with class Responses.  Is there any manual to migrate from 0.7 to 0.8?","closed","","edpichler","2015-03-10T21:26:59Z","2015-03-13T07:34:34Z"
"","708","Documentation refers to not public available method resourceFilePath(...)","The example given in section _Integrated Testing_ of the manual refers to a method called `resourceFilePath(...)` to load a configuration file during a test. Unfortunately this method is not part of the API of DropWizard since it is defined in a test called  `DropwizardAppRuleTest`.  I suggest to move this usefull helper method to the public test API of DropWizard or to update the documentation.","closed","improvement,","obfischer","2014-09-16T21:09:10Z","2014-09-29T19:58:54Z"
"","927","Fix logback error, which ultimately quiets the noise on startup","The example doesn't have a file appender which does archiving, so it wasn't triggering the issue. I've added that.  http://logback.qos.ch/codes.html#rfa_file_after  > The File property must be set before any rolling policy or triggering policy. > The File property, if present, must be placed before any rolling policy or triggering policy. Thus, in a configuration file, the File property, if present, must be declared declared before any rolling policy or triggering policy declarations.","closed","","carlo-rtr","2015-03-07T02:09:10Z","2015-04-01T01:39:47Z"
"","1465","Poor documentation for file logging","The documentation page http://www.dropwizard.io/0.9.2/docs/manual/configuration.html#file is missing: - a straightforward description of default log rolling policy (happens at midnight etc) - the maxFileSize option and description of ""fixed window"" policy","closed","needs code,","KonstantinYegupov","2016-02-18T10:24:09Z","2016-05-24T23:29:11Z"
"","578","Fix CSV Reporter","The documentation on the [CSV Reporter](https://dropwizard.github.io/dropwizard/manual/configuration.html#csv-reporter) states that the `file` parameter is ""the CSV file to write metrics to.""  This is wrong. The CSV Reporter writes files to a directory, not to a file. Also this directory must exist, or the log will quickly fill with error messages about a non-existent path. It would be nice to check to see if the directory exists, and if not, create it.  Any thoughts?","closed","bug,","nickbabcock","2014-05-14T16:48:06Z","2014-05-26T23:03:49Z"
"","1298","Improved Documentation of Example Application","The documentation of the example application was not up-to-date.  I improved the steps by grouping and removing optional steps.","closed","documentation,","fexbraun","2015-10-23T10:33:44Z","2015-10-29T18:29:08Z"
"","988","Getting Started Guide does not mention that the example.keystore is required","The documentation here - http://dropwizard.github.io/dropwizard/getting-started.html, does not mention that you need the `example.keystore` (Found at - https://github.com/dropwizard/dropwizard/blob/master/dropwizard-example/example.keystore) in order to run the application you built.  Also, the `database` and the `viewRendererConfiguration` sections had to be commented out before I could run the application. When I had these sections, I got the following error -    `* Unrecognized field at: viewRendererConfiguration     Did you mean?:       - defaultName       - server       - metrics       - template       - logging`","closed","","chaitrasuresh","2015-04-11T10:39:15Z","2015-04-11T14:32:19Z"
"","1185","Correct default value of rootPath","The documentation has default value of rootPath as `/` while it should be `/*`. Setting it to `/` causes 404 on resources","closed","","zodvik","2015-07-24T11:34:51Z","2015-08-15T14:20:20Z"
"","598","Documentation still refers to JsonHelpers","The documentation about testing serialization and deserialization refer to JsonHelpers, but this class is now gone (http://dropwizard.github.io/dropwizard/manual/testing.html)","closed","documentation,","mikeycmccarthy","2014-05-26T17:56:54Z","2014-05-30T10:54:27Z"
"","1307","`@Auth` doesn't have the documented `required` parameter","The docs at https://dropwizard.github.io/dropwizard/manual/auth.html#man-auth-resources suggest that you can use `@Auth(required = false)` to get an optionally-absent principal as a method parameter, but the actual `Auth` annotation doesn't seem to have such a parameter. Is there a way to do this? I'm happy to update the docs accordingly.","closed","","zacharyvoase","2015-10-28T18:50:55Z","2015-10-28T20:16:17Z"
"","1198","#1157 Fixed user modifications of 'User-Agent' http header on requests","The details are here: https://github.com/dropwizard/dropwizard/issues/1157 https://groups.google.com/forum/#!topic/dropwizard-user/XmSTpzz8Xx8  This commit is a part of UpWork.com initiative to maintain the 0.8.x branch. The details about it are here: https://groups.google.com/forum/#!topic/dropwizard-dev/hlK_Wi_2jis","closed","bug,","kkrushnyakov","2015-07-30T12:56:21Z","2015-08-13T12:40:29Z"
"","702","Docs: Unclear reference to ForwardedRequestCustomize","The description for the _useForwardedHeaders_ reads:  > Whether or not to look at `X-Forwarded-*` headers added by proxies. See `ForwardedRequestCustomize` for details.  It's not clear what `ForwardedRequestCustomize` is, since it's not linked nor referenced elsewhere in the code.   Eventually I figured out it should be `ForwardedRequestCustomize*r*` and it's actually a [Jetty class](http://download.eclipse.org/jetty/stable-9/apidocs/org/eclipse/jetty/server/ForwardedRequestCustomizer.html).  I'm still not sure exactly what I might be expected to do with it.","closed","documentation,","pimlottc","2014-09-09T04:58:00Z","2014-10-05T15:44:26Z"
"","1125","Register default mappers in ResourceTestRule","The default exception mappers are not registered in `ResourceTestRule`, which may be an annoyance to users, as they would have know what the defaults are and know to re-register them if their tests relied on functionality the exception mappers provided. This pull requests fixes this situation by registering them out of the box.  The only users who would be negatively affected by this pull request are those that turn off `registerDefaultExceptionMappers` in the configuration and choose not to define new mappers to replace them. Those that override default exception mappers in the application will still override them in `ResourceTestRule` as usual.  Closes #808","closed","improvement,","nickbabcock","2015-06-23T14:59:07Z","2016-04-20T18:11:57Z"
"","777","HealthCheck returns 500 on unhealthy result","The current version of dropwizard that I am using 0.7.1.  If you write a HealthCheck that is healthy then the servlet returns a 200 code, which is fine.  If there is an unhealthy result then the servlet returns with a 500.  The problem is that a 500 indicates an ""Internal Server Error"" whereas I have a requirement that it should return a 503 meaning ""Service Unavailable"".  I think the 503 is a more appropriate response code than a 500, because at the moment I cannot tell the difference between a severe server issue (which is returning a 500) and a unhealthy service which maybe operational with restrictions (which are made clear in the HealthCheck response text).","closed","","AndrewNorman","2014-11-13T13:56:46Z","2019-12-10T06:21:53Z"
"","659","Dropwizard 0.7.x, missing javax.ws.rs.container.*","The current version of Dropwizard misses the JAX-RS classes for implementing asynchronous services. I could add the javax.ws.rs-api artifact to the pom.xml but this will result in a lot of duplicates when generating the fat jar.  Am I missing something or did they forgot to include this classes?  Thomas","closed","","CaptainNTR","2014-07-15T13:19:43Z","2014-07-15T16:52:43Z"
"","989","Make tests on an exception converter reliable","The current test is not reliable, because it fails when it's run from an IDE. The reason for this is that the amount of omitted frames is different for the IDE test runner and, hence, is not reliable.  Solution is not to match whole stack trace, but split the test to two independent tests: - First checks, that every line starts with an exclamation mark - Second checks, that the exceptions ordering is correct and the root cause is placed first in the stack trace.","closed","bug,","arteam","2015-04-11T17:40:01Z","2016-01-24T08:04:32Z"
"","794","DropWizard SPDY connector only supports NPN","The current Spdy3ConnectorFactory only supports NPN. However, Jetty only supports ALPN on Java 8. The change to support ALPN looked a bit like this (I think the lack of ""http/1.1"" in the protocol list is potentially wrong but I couldn't get it to work with it in there):  ```         final ALPNServerConnectionFactory alpnFactory =                 new ALPNServerConnectionFactory(""spdy/3"");         alpnFactory.setDefaultProtocol(""http/1.1""); ```  A new required dependency was ""org.eclipse.jetty:jetty-alpn-server:9.2.4.v20141103"". Not sure how this would work in conjunction with NPN support - perhaps it makes sense to choose between NPN and ALPN based on the version of the JRE.","closed","feature,","derekcicerone","2014-11-24T21:49:52Z","2014-12-28T16:08:41Z"
"","1342","Fix nested lists and other styling in example.rst","The current rendered docs aren't displaying the nested lists as intended, but rather lumping each block into a single line: http://www.dropwizard.io/0.9.1/docs/manual/example.html","closed","","jklukas","2015-11-18T01:38:37Z","2015-11-18T15:17:27Z"
"","1522","Which third-party module has Google Guice working with 1.0.0-rc2 ?","The current module that we use for Guice integration, `com.hubspot.dropwizard:dropwizard-guice` is no longer updated and is falling far behind the current version of Dropwizard. (See https://github.com/HubSpot/dropwizard-guice/issues/79 )  Do any third-party modules enable Google Guice usage on Dropwizard 1.0.0-rc2, or is there another recommended way to perform dependency injection in 1.0.0-rc2 ?","closed","","who","2016-04-18T20:53:04Z","2016-05-24T06:37:36Z"
"","1372","Simplify auth filters","The current implementation of filters is rather cumbersome and doesn't really reuses the code.  This change: - separates parsing credentials and authentication of a request; - reuses the code of setting the security context; - improves readability of the credentials parsing methods; - adds additional documentation about the credentials format and authentication process.  The diff is better viewed with `?w=1`.","closed","improvement,","arteam","2015-12-06T19:20:28Z","2016-01-24T08:06:34Z"
"","1114","Simplify authorization","The current implementation of authorization is too cumbersome and requires implementing a big amount of boilerplate code.  This changes introduce `Authorizer` interface, which is responsible for authorizing users. It's a replacement for specifying a function for creating a new secure context.  Advantage stem from the fact that users only implement business logic for authorization and nothing more. Also this type of API is similar to `Authenticator`, which makes API more consistent.","closed","","arteam","2015-06-13T07:37:53Z","2016-01-24T08:06:32Z"
"","1425","Fixed infinite recursion bug in AuthFilter::authenticate","The current implementation of `AuthFilter.authenticate` does this:  ``` java requestContext.setSecurityContext(new SecurityContext() {                 @Override                 public boolean isSecure() {                     return requestContext.getSecurityContext().isSecure();                 }             }); ```  Calling `isSecure()` on the filtered requestContext will recurse infinitely causing a StackOverflowError.  This PR fixes this bug and adds a test. The test is quite complex for such a small fix, but I can't think of a simpler way, due to the JAX-RS class design. Because of this, I'm fine with this being merged with or without the test.","closed","bug,","minisu","2016-01-19T10:28:40Z","2016-01-22T19:32:41Z"
"","1068","Include information about the metrics annotations","The current documentation gives no indication of what the metrics annotations do, added some rudimentary documentation to explain the basics","closed","","mcgin","2015-05-24T13:55:29Z","2015-05-24T19:35:47Z"
"","673","Constructor of io.dropwizard.jdbi.NamePrependingStatementRewriter is not publicly visible","The constructor of the class `io.dropwizard.jdbi.NamePrependingStatementRewriter` has no explicit access modifier, meaning it is only visible in the corresponding package. Is there any particular reason for that? Would it be possible to make the constructor `public` to be able to use the rewriter outside of Dropwizard, too?","closed","","mzuber","2014-08-05T12:40:50Z","2014-12-27T13:35:57Z"
"","603","Documentation on ""Testing Serialization"" appears to have an error.","The code given in the most recent version of the documentation on ""Testing Serialization"" which can be found at either: - https://github.com/dropwizard/dropwizard/blob/master/docs/source/manual/testing.rst - http://dropwizard.readthedocs.org/en/latest/manual/testing.html  does not appear to actually work.  The documentation states that the JSON comparison will be done on a normalized form, but AFAICT it is actually compared as-is, resulting in a failure due to whitespace differences.  The method `JSonHelpers#jsonFixture` used to perform this normalization, but that class has been removed.  You can see its use documented here -- http://dropwizard.github.io/dropwizard/manual/testing.html.  I'm not sure if the method was moved elsewhere or if it is truly gone.  The method was equivalent to:  ``` MAPPER.writeValueAsString(MAPPER.readValue(fixture(""fixtures/person.json""), JsonNode.class)) ```  Comparing against this value instead of simply `#fixture` appears to work as expected.","closed","documentation,","sfitts","2014-05-30T15:25:06Z","2015-04-17T14:09:40Z"
"","1201","Clone method in ChainedAuthFactory always set required to true","The class `ChainedAuthFactory` always set the parameter `required` to true in the `clone` method. This is a snippet of the method:  ``` @Override public AuthFactory clone(boolean required) {     ChainedAuthFactory clone = new ChainedAuthFactory<>();     for (AuthFactory factory : factories) {         clone.addChainedProvider(factory.clone(true));     }     return clone; } ```  Instead of calling `factory.clone(true)`, it should be `factory.clone(required)`. This makes the authentication always required when `ChainedAuthFactory` is used.","closed","","mtakaki","2015-07-31T03:11:55Z","2015-07-31T17:22:47Z"
"","944","Abstract ViewBundle changes in 0.8.0","The changes in #914 make a few assumptions on the usage of ViewBundle. The class was changed to abstract[1] which now requires consumers to implement getViewConfiguration from ViewConfigurable. Not all consumers will want/need to use this new method, in fact the implementation handles when the map is null[3].  While this isn't in itself a huge issue, it created unnecessary work when I uplifted from 0.8.0-rc2 to 0.8.0. I would like to propose converting ViewBundle back to non-abstract and providing a default implementation for getViewConfigutation similar to initialize[4].  [1] https://github.com/dropwizard/dropwizard/commit/1ffa692833bc4f14b9065ded24f19634724d6311#diff-dca5c6ed489635cea5799e7409e13b55 [2] https://github.com/dropwizard/dropwizard/commit/1ffa692833bc4f14b9065ded24f19634724d6311#diff-53f7e525544679077e00d692b9dbc26b [3] https://github.com/dropwizard/dropwizard/blob/v0.8.0/dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java#L105 [4]https://github.com/dropwizard/dropwizard/blob/v0.8.0/dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java#L110-113","closed","","mattnelson","2015-03-16T16:16:44Z","2015-03-16T21:07:14Z"
"","1452","Handle redirect in WebApplicationException response","The change to ""[Format WebApplicationException](https://github.com/dropwizard/dropwizard/commit/930443a5bc5760c3319bedf7b36e13810bf0dd8e#diff-235351c1b64afb2dba6188b2bd0c5386)"" introduced a regression: namely, if the response contained within the WebApplicationException is a redirect, the redirect no longer works. Instead, a JSON entity is returned instead.  This change restores the previous behaviour for redirects in the WebApplicationException response.","closed","bug,","tumbarumba","2016-02-07T23:34:13Z","2016-03-16T15:16:45Z"
"","1453","Redirect within WebApplicationException response no longer works","The change to ""[Format WebApplicationException](https://github.com/dropwizard/dropwizard/commit/930443a5bc5760c3319bedf7b36e13810bf0dd8e#diff-235351c1b64afb2dba6188b2bd0c5386)"" caused redirects in the response of WebApplicationException to no longer work.  I have created PR dropwizard/dropwizard#1452 to fix this issue.","closed","","tumbarumba","2016-02-07T23:39:59Z","2016-02-08T03:28:23Z"
"","1311","ChainedAuthFilter throws NPE on no credentials","The chained auth filter will throw a NullPointerException if none of the filters create a securityContext or throw a WebApplicationException. In this case the `firstException` will be null and the throw fails:  https://github.com/dropwizard/dropwizard/blob/master/dropwizard-auth/src/main/java/io/dropwizard/auth/chained/ChainedAuthFilter.java#L55  Is this expected behaviour? If we use auth filters must we set the securityContext or throw a WebApplicationException? Is this the same requirement for a single filter? How is this to work with `@Auth(required=false)`? There does not appear to be a test case for this scenario?  The old `chainedAuthFactory` did check for null: https://github.com/dropwizard/dropwizard/blob/v0.8.4/dropwizard-auth/src/main/java/io/dropwizard/auth/ChainedAuthFactory.java#L104","closed","","ferdy-lw","2015-10-28T21:15:44Z","2015-10-29T20:56:11Z"
"","1014","Add a benchmark for DropwizardResourceConfig","The benchmark measures how long it takes to gather information about application endpoints for representing it to the user during the application startup.  The goal is to see is there were any perfomance problems in #1002.","closed","","arteam","2015-04-25T20:22:18Z","2016-01-24T08:04:07Z"
"","1158","Non Deterministic Test Failure","The below test failed for jdk7, but passed for jdk8, while cutting the RC  Tests in error:    JerseyClientIntegrationTest.testBufferedGzipPost:106->postRequest:140 » Processing","closed","","carlo-rtr","2015-07-09T13:52:59Z","2015-10-20T14:22:06Z"
"","1333","Removed ancient TODOs from the code","The beginning of going to a 1.0 Version is maybe a good timing to get rid of ancient list of TODOs. Important stuff pops up every day, no need to keep TODOs from two years ago.","closed","","fexbraun","2015-11-09T13:35:46Z","2015-11-10T13:14:44Z"
"","1332","Removed unused imports","The beginning of going to a 1.0 Version is maybe a good timing to get rid of a lot of the IDE warnings.","closed","","fexbraun","2015-11-09T13:34:53Z","2015-11-09T14:11:02Z"
"","798","Allow custom return header in 401 in BasicAuthProvider","The BasicAuthProvider is a convenient basis for implementing API authentication (over SSL, of course).  However, browsers are hardwired to pop up the Http Auth dialog if a 401 comes back with a 401 status and WWW-Authenticate header. This is almost never what the consumer of an API will want.   The hack that seems to be most often recommended is to change the return header to something custom; e.g. see: http://stackoverflow.com/questions/24130308/preventing-http-basic-auth-dialog-using-angularjs-interceptors  So, this is a request to simply allow the return header to be customized in BasicAuthProvider.","closed","improvement,","flavor8","2014-11-27T16:30:33Z","2014-12-14T16:12:37Z"
"","1363","Move the reportPlugins section in the archetype","The `reportPlugins` section has been deprecated since version 3.3 of `maven-site-plugin` in favour of the classic reporting configuration. Currently my IDE marks the former as not valid according to an XSD schema.   Explanation is [here](http://maven.apache.org/plugins/maven-site-plugin/maven-3.html#New_Configuration_Maven_3_only_no_reports_configuration_inheritance).  Diff is kind of weird, better to view with `?w=1`","closed","","arteam","2015-11-28T09:24:37Z","2016-01-24T08:18:03Z"
"","1322","Deprecate PooledDataSourceFactory#getHealthCheckValidation{Query,Timeout}","The `PooledDataSourceFactory#getHealthCheckValidation{Query,Timeout}` methods were introduced while refactoring `DataSourceFactory` to allow custom DB connection pools (PR #1030) but broke the serialization of the default configuration for `DataSourceFactory`.  By deprecating these methods and pulling the original `DataSourceFactory#getValidation{Query,Timeout}` methods into `PooledDataSourceFactory`, the original behaviour was restored.  Fixes #1321, refs #1030","closed","bug,","joschi","2015-11-03T09:32:42Z","2015-11-03T14:08:13Z"
"","1289","Configuration Options for dropwizard-views-mustache","The `MustacheViewRenderer` is caching templates forever so there's no chance for hot-deployment during development. Would it make sense to provide an option to disable caching during development or to define a cache-lifetime?  This should be no big change for the `MustacheViewRenderer` but as far as I've seen there's currently no way to pass any configuration to a ViewRenderer. `ViewBundle#getViewConfiguration` returns an empty Map. Am I missing something here?","closed","needs code,","lefloh","2015-10-20T13:20:47Z","2016-11-13T19:28:18Z"
"","549","FuzzyEnumModule","The `FuzzyEnumModule` should respect `@JsonCreator` annotations etc, otherwise this module breaks a lot of existing code for enum handling.","closed","","chrsan","2014-04-23T06:55:36Z","2014-08-15T16:21:43Z"
"","633","ConstraintViolationException should not always be thrown for empty request entities","The `ConstraintViolationException` with an empty request entity should only be thrown if the entity should be validated at all and is annotated with `@Valid` or `@Validated`.","closed","","joschi","2014-06-25T22:13:38Z","2015-10-19T07:56:41Z"
"","930","Documentation is out of date for Dropwizard Views","The [documentation for Dropwizard views](http://dropwizard.io/manual/views.html) does not reflect the fact that in 0.8.0 you must now implement a concrete subclass of `ViewBundle`. I think this change was introduced in the following commit: https://github.com/dropwizard/dropwizard/commit/1ffa692833bc4f14b9065ded24f19634724d6311.","closed","","johnstok","2015-03-08T16:53:18Z","2015-03-08T22:41:58Z"
"","1149","Fix endpoint log not finding nested resources","Thank you @michaelhixson, whose analysis made this a simple fix.  Closes #1127","closed","","nickbabcock","2015-07-01T19:20:49Z","2015-07-01T20:29:47Z"
"","891","Tests to verify we are not leaking any validation info before authentication","Tests to verify that issue #768 is no longer a problem in Dropwizard 8.x, presumably after the switch to Jersey 2.x.","closed","","glennmcallister","2015-02-23T02:38:27Z","2015-04-07T13:55:22Z"
"","983","The case of the empty string Optional in QueryParam","Taking a look at the [getting started page](http://www.dropwizard.io/getting-started.html#creating-a-resource-class)  ``` java @GET @Timed public Saying sayHello(@QueryParam(""name"") Optional name) {     final String value = String.format(template, name.or(defaultName));     return new Saying(counter.incrementAndGet(), value); } ```  The url `http://localhost:8080/hello-world?name=` will return ""Hello, !"".  I'm unsure how I feel about this behavior. The person I was walking through the tutorial expressed concern that it failed the principle of least astonishment because to him `name` is blank -- thus absent, and should result in a return of ""Hello, Stranger!""  A workaround had to be coded:  ``` java @GET @Timed public Saying sayHello(@QueryParam(""name"") Optional name) {     String output = name.or(defaultName);     if (Strings.isNullOrEmpty(output)) {         output = defaultName;     }      final String value = String.format(template, output);     return new Saying(counter.incrementAndGet(), value); } ```  This seems to defeat the purpose of optional. I think it would be reasonable to change the behavior of `Optional` so that a blank query parameter is absent, even though `Optional.of("""")` is completely valid.  An argument against changing the code is that it would be a breaking change. People may have come to rely on blank query params meaning a non-absent optional. Another argument is that the [spec defines](https://url.spec.whatwg.org/#concept-url-query) the query as  > either null or a string holding data  Is `name=` null or is it holding empty data?  If the change is wanted, an open question is what constitues a blank query param? Is it just a length of 0 (my bias), or can blank query param can contain all whitespace  EDIT: If the change is not wanted, there probably should be documentation informing that `Optional` can be blank.","closed","","nickbabcock","2015-04-10T17:38:03Z","2015-04-13T14:42:41Z"
"","917","Allow using a custom ValidatorFactory in Bootstrap","Swapping out the ValidatorFactory is required in order to add custom value handlers to Hibernate Validator, e. g. for Java's `Optional`.","closed","improvement,","joschi","2015-03-05T12:48:27Z","2015-03-05T13:40:55Z"
"","1380","Make SizeUnit more flexible","Support case insensitive SizeUnit suffixes. Support all single letter SizeUnit suffixes.","closed","improvement,","mattnelson","2015-12-10T23:08:47Z","2015-12-14T14:38:20Z"
"","1226","Humble question on licencing","Sorry this might be a quite humble question but Dropwizard is licensed under `Apache License Version 2.0` and it depends on Jersey that is licensed under `CDDL + GPL License`. So if I write an application that uses Dropwizard then I've to open source it in case I'm distributing it in binary form as it depends indirectly (via Dropwizard) on Jersey or? Or do I've to just take care of the Apache License when distributing my application which means I could decide on whether I want to open source it or not?  Thanks in advance!","closed","","nevson","2015-08-19T08:56:04Z","2015-08-19T17:47:37Z"
"","1113","Add support for setting a custom DB pool connection validator","Some users want to specify a custom validation logic for database connections.  Tomcat JDBC Pool provides this facility and we can support it in the YAML configuration.  Close #1089","closed","","arteam","2015-06-12T11:43:00Z","2016-01-24T08:06:39Z"
"","1112","Add facility to set a custom ObjectMapper in Bootstrap","Some users reported, that the default Dropwizard's `ObjectMapper` is too aggresive for them.  See #1111, #1095, #1098. So we should provide a way to set a more _ligthweight_ mapper. To achieve this this change: - Adds a factory method, that creates a minimal `ObjectMapper`, which still works with Dropwizard. - Adds a setter in Boostrap, allowing users to provide a custom `ObjectMapper`.","closed","","arteam","2015-06-12T09:47:57Z","2016-01-24T08:03:50Z"
"","717","Add unit tests to SQL exception mappers in dropwizard-jdbi","Some unit tests for JDBI exception mappers.  They check that we log correct things when an exception from JDBI ocurrs.","closed","improvement,","arteam","2014-09-30T07:04:04Z","2016-01-24T08:03:55Z"
"","1221","Fix handling of empty request entities that don't have any annotation …","Some request bodies are optional and if you POST an empty request body with 0 annotations like @Valid then this code blows up.  This fix allows it to work as expected.","closed","","brentryan","2015-08-17T13:34:01Z","2015-12-28T23:06:39Z"
"","1043","Fix underline to be the same length as header text and various spelling mistakes","Some quick fixes to the release notes.","closed","","markreddy","2015-05-12T17:10:00Z","2015-05-18T20:23:18Z"
"","1260","Don't require username in the data source configuration","Some platforms provide credentials to connect to a database inlined in the connection URL. Examples: - `postgres://postgres:SOME_PASSWORD@172.17.0.1:5432/lolipop` - `jdbc:h2:file:~/sample;USER=sa;PASSWORD=123` - `jdbc:postgresql://localhost/test?user=fred&password=secret`  JDBC drivers support such a type of configuration. We should respect it and provide users ability to use it.  It means we should not require the username field to be set in the data source configuration.  Fixes #1259","closed","","arteam","2015-09-24T12:03:03Z","2016-01-24T08:03:51Z"
"","845","Added test cases","Some extra test cases","closed","","gunnarahlberg","2015-01-12T23:52:12Z","2015-01-17T15:52:44Z"
"","1414","Add #getUrl() to PooledDataSourceFactory","Some downstream Dropwizard modules need access to the JDBC connection URL, which exists on DataSourceFactory but not the PooledDataSourceFactory interface.  Since this interface is JDBC-specific (i.e. all connection-pool implementations will have a connection URL), it won't restrict any implementations.  Fixes #1413.","closed","improvement,","benjamin-bader","2016-01-14T19:07:53Z","2016-01-15T05:03:32Z"
"","1323","Guava Optional: Treat null values after conversion as absent value.","Some converters return a null value (e.g. in case of empty input).","closed","bug,","Trundle","2015-11-03T11:12:01Z","2015-11-03T14:59:06Z"
"","757","Making Duration comparable","Solves #754","closed","improvement,","reines","2014-10-22T22:08:31Z","2014-10-24T10:03:18Z"
"","1200","Fixed dropwizard jersey duplicate path logging","So this was a tiny bug I discovered while using dropwizard (which is awesome by the way) on our project. The problem being if there are two separate functions present exposing same path in jersey but supporting different media type, then dropwizard logs duplicate paths. Eg:  ``` @Get @Path(""/abc"") @Produces(MediaType.TEXT_HTML) public Respone functionA(){    //some code produces html output }  @Get @Path(""/abc"") @Produces(MediaType.APPLICATION_JSON) public Respone functionB(){    //some code produces json output } ```  Now dropwizard logs the following  ``` GET /abc MyResourceClass GET /abc MyResourceClass ```  This PR fixes that and logs just one line by using a TreeSet instead of List. Its passive and doesn't affect anything outside this class (There could be an enhancement to log the one line and list all supported content types, for which I might do a PR later).  Thanks and continue being awesome guys!","closed","bug,","afrin216","2015-07-30T18:44:06Z","2017-04-26T19:05:54Z"
"","600","HTTPS supportedProtocols configuration not respected in 0.7.0","So I'm trying to restrict the protocols accepted by my DW instance to strictly TLS, but it isn't working, as verified by sslyze.  For example, if I set   ``` supportedProtocols: ['TLSv1', 'TLSv1.1','TLSv1.2'] ```  what pops out in the logs is  ``` INFO  [2014-05-28 21:27:37,170] io.dropwizard.jetty.HttpsConnectorFactory: Supported protocols: [SSLv2Hello, SSLv3, TLSv1, TLSv1.1, TLSv1.2] ```","closed","","glennmcallister","2014-05-28T21:36:18Z","2014-06-04T18:52:35Z"
"","985","DateTimeZone only accepts a subset of the IDs from TimeZone","so build fails periodically, https://travis-ci.org/dropwizard/dropwizard/jobs/57990585","closed","","carlo-rtr","2015-04-10T19:27:40Z","2015-04-10T20:04:00Z"
"","1406","Use lambdas and remove redundant type parameters","Since we're java 8 now, I figured I'd pick up some low hanging fruit by replacing explicit anonymous classes with lambdas and removing. I've opted to not convert code to use the Streams API because I know some find that more controversial.  The downside is that it may make backporting fixes to 0.{8,9}.x more difficult, but I'm optimistic it won't become a significant issue.","closed","improvement,","nickbabcock","2016-01-06T21:21:40Z","2016-01-07T16:30:17Z"
"","699","FuzzyEnumModule validation against enum name() instead of toString() breaks compatibility with jsonschema2pojo","Since upgrading from DW 0.6.2 to 0.7.1 I'm getting the following error deserializing enum values in POJOs generated by [jsonschema2pojo](https://github.com/joelittlejohn/jsonschema2pojo):  ``` partlyCloudy was not one of [PARTY_CLOUDY, CLEAR] ```  This is happening with a field in a class generated by jsonschema2pojo. When jsonschema2pojo sees a field in a JSON schema that is declared as an enum...  ``` ""weather"": {     ""enum"": [ ""partlyCloudy"", ""clear""] }, ```  It generates a Java enum like this:  ``` public static enum Weather {     PARTY_CLOUDY(""partlyCloudy""),     CLEAR(""clear"");     private final String value;      private Weather(String value) {         this.value = value;     }      @JsonValue     @Override     public String toString() {         return this.value;     } } ```  But FuzzyEnumModule.deserialize() is calling name() instead of toString() on the enum to compare its value to the deserialized value, and the literal enum name ""PARTLY_CLOUDY"" doesn't match the deserialized value ""partlyCloudy"". Changing FuzzyEnumModule to use toString() might break existing code (although presumably that's what the old deserializer did). If that's not feasible, would it be possible to provide a configuration option to make FuzzyEnumModule be even more fuzzy and call toString()? Either that, or is there a way to specify that the standard deserializer should be used?","closed","","clintfoster","2014-09-03T01:32:30Z","2016-03-30T14:26:15Z"
"","723","Fixtures.fixture should throw an unchecked exception","Since this is only used in testing, there is no real benefit in letting the developer deal with the IOException anyway.  Making this unchecked would allow creation of fixtures without  method context  ``` private static final String FIXTURE = FixtureHelpers.fixtures("".....""); ```","closed","","jangalinski","2014-10-03T10:46:39Z","2014-12-28T18:36:19Z"
"","563","Redirecting inside of @UnitOfWork forces rollback","Since the redirection mechanism requires throwing a WebApplicationException and the UnitOfWorkRequestDispatcher catches all exceptions openly and rolls back this means that no UnitOfWork method that writes to the database and redirects elsewhere can ever succeed. Worse than that it rolls back silently and requires TRACE level logging on hibernate's transaction engine to track down.  The line in question  https://github.com/dropwizard/dropwizard/blob/master/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/UnitOfWorkRequestDispatcher.java#L45-L48  An example of a resource and logging with redirect turned on and off to see the difference.  https://gist.github.com/besquared/1ca1a95c49bef0e51663","closed","","besquared","2014-05-07T17:43:44Z","2014-05-13T12:11:18Z"
"","1379","link to jersey 2.22.1 docs, not 1.18","Since dropwizard has upgraded to jersey 2, the dropwizard-client docs should link to jersey 2 docs.","closed","documentation,","philandstuff","2015-12-10T15:03:34Z","2015-12-10T20:15:55Z"
"","1383","Removal/Deprecating/Opt-in option for Joda, Guava Optional and other Pre Java 8 libraries","Since dropwizard 1.0 requires Java 8, shouldn't support for things like Joda Time, Guava Optional, etc. get removed from the main library? They could be moved to an external module just like Java 8 features are in an external module for the Dropwizard 0.9.x branch.","closed","","kilemensi","2015-12-14T08:59:49Z","2018-03-27T08:37:33Z"
"","1382","Naming of OptionalOffsetTimeArgumentFactory  and OptionalZonedTimeArgumentFactory","Since `OptionalOffsetTimeArgumentFactory` and `OptionalZonedTimeArgumentFactory` handle `OffsetDateTime` and `ZonedDateTime` respectively, shouldn't they be named `OptionalOffsetDateTimeArgumentFactory` and `OptionalZonedDateTimeArgumentFactory`?","closed","","kilemensi","2015-12-14T08:43:44Z","2016-02-05T02:47:25Z"
"","931","migration from 0.7.1 to 0.8.0, AssetsBundle not working","Simple example for serving static context.  ```   @Override   public void initialize(Bootstrap bootstrap) {     bootstrap.addBundle(new AssetsBundle(""/assets"", ""/"", ""index.html""));   } ```  In 0.7.1 works correctly, switching to 0.8.0 got an exception with: ""Multiple servlets map to path: /*""  ``` WARN  [2015-03-10 11:32:35,025] org.eclipse.jetty.util.component.AbstractLifeCycle: FAILED org.eclipse.jetty.servlet.ServletHandler@6a2e91c9: java.lang.IllegalStateException: Multiple servlets map to path: /*: org.glassfish.jersey.servlet.ServletContainer-42ffe3f2,assets ! java.lang.IllegalStateException: Multiple servlets map to path: /*: org.glassfish.jersey.servlet.ServletContainer-42ffe3f2,assets ! at org.eclipse.jetty.servlet.ServletHandler.updateMappings(ServletHandler.java:1488) ~[jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.servlet.ServletHandler.doStart(ServletHandler.java:160) ~[jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.ScopedHandler.doStart(ScopedHandler.java:120) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:784) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:294) [jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:741) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:102) [metrics-jetty9-3.1.0.jar:3.1.0] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.RequestLogHandler.doStart(RequestLogHandler.java:140) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:232) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.Server.start(Server.java:387) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.Server.doStart(Server.java:354) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:43) [dropwizard-core-0.8.0.jar:0.8.0] ! at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:43) [dropwizard-core-0.8.0.jar:0.8.0] ! at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:76) [dropwizard-core-0.8.0.jar:0.8.0] ! at io.dropwizard.cli.Cli.run(Cli.java:70) [dropwizard-core-0.8.0.jar:0.8.0] ! at io.dropwizard.Application.run(Application.java:73) [dropwizard-core-0.8.0.jar:0.8.0] ! at de.easy.spirit.usrv.HelloWorldApplication.main(HelloWorldApplication.java:18) [classes/:na] ```","closed","","willie68","2015-03-10T11:36:19Z","2015-03-17T16:32:21Z"
"","1233","fix timeouts by setting client configs","similar to DropwizardApacheConnectorTest","closed","bug,","carlo-rtr","2015-08-21T17:18:43Z","2015-08-24T00:30:33Z"
"","818","NPE in OAuthFactory with ResourceTestRule","Setting up an OAuthFactory and adding it as a resource to ResourceTestRule makes it fail with a NullPointerException when accessing an endpoint with an `@Auth` parameter. But when added in the same way to a real Application it will work fine. Example test that will throw the error: https://gist.github.com/Lugribossk/5b9d94b92a33f281c3b9 Stack trace:  ``` javax.ws.rs.ProcessingException: Server-side request processing failed with an error.     at org.glassfish.jersey.test.inmemory.InMemoryConnector$InMemoryResponseWriter.failure(InMemoryConnector.java:165)     at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:439)     at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.process(Errors.java:267)     at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:297)     at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:254)     at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1030)     at org.glassfish.jersey.test.inmemory.InMemoryConnector.apply(InMemoryConnector.java:275)     at org.glassfish.jersey.client.ClientRuntime.invoke(ClientRuntime.java:246)     at org.glassfish.jersey.client.JerseyInvocation$1.call(JerseyInvocation.java:667)     at org.glassfish.jersey.client.JerseyInvocation$1.call(JerseyInvocation.java:664)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.process(Errors.java:228)     at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:424)     at org.glassfish.jersey.client.JerseyInvocation.invoke(JerseyInvocation.java:664)     at org.glassfish.jersey.client.JerseyInvocation$Builder.method(JerseyInvocation.java:399)     at org.glassfish.jersey.client.JerseyInvocation$Builder.get(JerseyInvocation.java:303)     at bo.gotthardt.oauth2.OAuthTest.test(OAuthTest.java:26)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)     at io.dropwizard.testing.junit.ResourceTestRule$1.evaluate(ResourceTestRule.java:141)     at org.junit.rules.RunRules.evaluate(RunRules.java:20)     at org.junit.runners.ParentRunner.run(ParentRunner.java:309)     at org.junit.runner.JUnitCore.run(JUnitCore.java:160)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67) Caused by: java.lang.NullPointerException     at io.dropwizard.auth.oauth.OAuthFactory.provide(OAuthFactory.java:67)     at org.glassfish.jersey.server.spi.internal.ParameterValueHelper.getParameterValues(ParameterValueHelper.java:81)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:121)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$TypeOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:195)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:104)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:384)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:342)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:101)     at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:271)     ... 43 more ```","closed","","Lugribossk","2014-12-19T14:15:19Z","2015-01-04T22:11:28Z"
"","1408","Jersey Environment setUrlPattern no longer works","Setting the url pattern via:  ``` java environment.jersey().setUrlPattern(""/example/*""); environment.jersey().getResourceConfig().setUrlPattern(""/example/*""); ```  won't actually set the url pattern, whereas amending the 'rootPath' config for the server block in the yml will. I've narrowed it down to this code here in AbstractServerFactory:  ``` java jersey.setUrlPattern(jerseyRootPath); String urlPattern = jerseyRootPath; if (!urlPattern.endsWith(""*"") && !urlPattern.endsWith(""/"")) {    urlPattern += ""/""; } if (!urlPattern.endsWith(""*"")) {    urlPattern += ""*""; } jersey.setUrlPattern(urlPattern); ```","closed","","petey22uk","2016-01-08T14:26:15Z","2016-02-04T23:16:44Z"
"","749","ServletEnvironment setBaseResource 0.6 vs 0.7","ServletEnviroment only allows setting the (handler) base resource as a string (setResourceBase) and not as a resource object (setBaseResource). Previously with dropwizard 0.6 setBaseResource was available (on Environment).  An alternative to adding the method could be to expose handler.","closed","","brackxm","2014-10-20T12:32:33Z","2014-10-23T18:59:33Z"
"","614","Update servlet to 3.1","Servlet 3.1 has Read/Write Listener and isReady.","closed","","Downchuck","2014-06-11T22:16:22Z","2014-06-11T22:46:15Z"
"","605","Service class --> Application class in views.rst","Seems like a reference to the old Service (now called Application) class was lingering in the docs.","closed","documentation,","minisu","2014-06-04T06:41:16Z","2014-07-09T15:52:27Z"
"","771","Made names consistent in configuration examples","See next code block, where config class is named `ExampleConfiguration`. Chose the shorter variant.","closed","documentation,","dminkovsky","2014-11-11T00:03:33Z","2014-11-11T14:25:14Z"
"","842","Add Jersey Bean Validation Support","See https://jersey.java.net/documentation/latest/bean-validation.html for details about the Bean Validation support in Jersey. It enables the use of Java validation annotations like `@NotNull`, `@Min`, or `@Email` in the context of JAX-RS and Jersey.  Merging this could probably fix #625 and #633 (as both, the issue and the PR, are now outdated anyway).","closed","feature,","joschi","2015-01-11T20:59:02Z","2015-04-26T18:37:47Z"
"","1206","Sub-Resources Created With Locator Have No Metrics","See https://github.com/dropwizard/metrics/issues/825.  Current version of metrics used by dropwizard never includes metrics for subresources created using subresource locators.  Would be very nice to get a release of metrics w/ the fix & integrated into dropwizard.","closed","stale,","gilbode","2015-08-04T15:22:51Z","2019-09-03T00:01:03Z"
"","1316","Add the ability for some enums to still deserialize properly","See https://github.com/dropwizard/dropwizard/pull/1220 for more details.","closed","","brentryan","2015-10-30T00:50:12Z","2015-11-15T02:14:55Z"
"","1523","Documentation for maxFileSize option of file-based logger","See https://github.com/dropwizard/dropwizard/issues/1465","closed","documentation,","KonstantinYegupov","2016-04-19T13:23:07Z","2016-04-19T14:20:18Z"
"","1005","Make registration of JacksonMessageBodyProvider optional","see AbstractServerFactory.createAppServlet: jersey.register(new JacksonMessageBodyProvider(objectMapper, validator))  Problem description: (I noticed this during migration from 0.7.1 to 0.8.1) Given: - an entity class without a default constructor - a method @POST + @Consumes(""application/json) which takes an instance of the entity class. - A custom MessageBodyReader for deserializing the class.   When you post json to the given resource method you can get errors because JacksonMessageBodyProvider is consulted before my own messagebodyreader.  Notes: - In my environment this manifests itself as a heisenbug: when I debug an integration test exposing this problem I often end up in my own MessageBodyReader (depending on where  I installed breakpoints). Presumably it's related to timing, but I have yet to pin it down. - One could create a custom ServerFactory which extends DefaultServerFactory and overrides AbstractServerFactory.createAppServlet, but that method calls private methods and I would have to end up copying almost everything. - IIUC I may be able to work around this using @JsonIgnoreType - There are other providers being registered at AbstractServerFactory.createAppServlet, one might want to make these optional as well.","closed","","karel1980","2015-04-22T09:01:51Z","2016-11-22T02:29:23Z"
"","1540","Treat Jackson ObjectMapper#readValue failures as a 400","See #1539 for the related issue.","closed","improvement,","vy","2016-05-10T07:31:37Z","2016-05-11T16:45:34Z"
"","987","Make LoggingFactory threadsafe for parallel running tests","Running parallel unit tests in my personal project with the current Dropwizard release leads to errors in class initialization probably due to http://jira.qos.ch/browse/SLF4J-167  The change below allows me to run the unit tests in my personal project in parallel by making the log initialization `synchronized`. The change below also avoids a second initialization as this might lead to log messages getting lost.  Activating parallel tests in all dropwizard modules will lead to test failures in some modules, therefore I left it disabled in the parent pom.xml.","closed","","ahus1","2015-04-10T21:01:28Z","2015-05-17T16:23:24Z"
"","1378","How could I get Dropwizard to hot deploy locally?","Running 'mvn clean install' every time before starting the application is consuming alot of time. Is there a good way to set up hot deploy of an Dropwizard application in Intellij?","closed","","jansoren","2015-12-09T10:23:22Z","2016-06-20T06:09:24Z"
"","1400","Disable parallel tests by default","Run them in parallel only in the dev mode. Looks like that Travis CI is really flaky with a parallel test execution. The build often fails without a reason and this really confuses new contributors. Better to have a slow and stable build then fast and unreliable.","closed","","arteam","2015-12-30T16:26:59Z","2016-01-24T08:04:00Z"
"","1381","Register JerseyViolationExceptionMapper only if not overriden in ResourceTestRule","Right now inside ResourceTestResourceConfig inside ResourceTestRule, it is hardcoded to always register JerseyViolationException. This breaks in cases where we have our own ExceptionMapper for JerseyViolationException, and want to test the response from that as the default exception mapper will always have priority.  A better behaviour is to check if any exception mappers already exist for JerseyViolationException and only add the ExceptionMapper if it does not exist already.  The line is found here: https://github.com/dropwizard/dropwizard/blob/master/dropwizard-testing/src/main/java/io/dropwizard/testing/junit/ResourceTestRule.java#L158","closed","","lingz","2015-12-13T10:55:53Z","2015-12-16T13:26:09Z"
"","982","Revert ""Use Type parameter for configuration in initialize""","Reverts dropwizard/dropwizard#795 the build broke","closed","","carlo-rtr","2015-04-10T16:33:49Z","2015-05-07T00:32:29Z"
"","1180","Revert ""make connection pool shared by default""","Reverts dropwizard/dropwizard#1179","closed","","carlo-rtr","2015-07-22T14:57:14Z","2015-10-29T13:26:29Z"
"","1148","Revert ""Register default mappers in ResourceTestRule""","Reverts dropwizard/dropwizard#1125  This pull request needs to be reverted so that users that define their own exception mappers that conflict with ones that Dropwizard defines don't have their test cases fail undeterministically. I tried to make it so that overriding exception mappers can be graceful (#1144), but it is halted due to a Jersey issue. The reverted pull request didn't make it into the release notes, so those don't have to change.","closed","","nickbabcock","2015-07-01T16:09:36Z","2015-10-29T13:26:47Z"
"","1083","Revert ""Only cache present values in the CachingAuthenticator. Fixes …","Reverts dropwizard/dropwizard#1082","closed","","carlo-rtr","2015-05-27T15:58:19Z","2015-06-12T05:40:35Z"
"","1071","Revert ""Do not swallow exception cause when parsing JSON.""","Reverts dropwizard/dropwizard#1052","closed","","arteam","2015-05-24T19:20:52Z","2015-05-26T23:50:14Z"
"","1021","Revert ""Run tests in parallel""","Reverts dropwizard/dropwizard#1012","closed","","carlo-rtr","2015-04-27T16:36:31Z","2015-05-07T00:32:27Z"
"","1489","Add DataSourceFactory.rollbackOnReturn flag","Resolves: #1488","closed","improvement,","patrox","2016-03-23T13:26:13Z","2016-03-23T15:53:21Z"
"","887","Support for a custom name of a Hibernate bundle","Resolve #855  By default the name of a Hibernate bundle (actually ""hibernate)"" is hardcoded. This name is used for the database pool metrics and the health check associated with the bundle. This causes conflicts when several bundles used alongside in a project.  This change adds to the HibernateBundle class a protected method which returns a bundle name. This method can be overridden by users who want to set a custom name. The new name will be used for the bundle's database pool metrics and health check.","closed","","arteam","2015-02-21T18:10:00Z","2018-12-11T11:51:02Z"
"","820","Migrate dropwizard-spdy from NPN protocol to ALPN","Resolve #794  NPN is a deprecated protocol and ALPN it's successor. Jetty doesn't support NPN for Java 8, so it makes sense to make a switch.  Look for reference: http://www.eclipse.org/jetty/documentation/9.2.3.v20140905/alpn-chapter.html  I wasn't able to write a unit test (code is too coupled and starting a server requires alpn-boot in JVM's bootpath), so I just tested this PR on my local machine in the following configuration:  ``` Browser client:  Browser Chrome Version 39.0.2171.95 (64-bit)  Java client: com.squareup.okhttp:okhttp:2.1.0 (little hacky, because they use spdy/3.1)  JRE7: java version ""1.7.0_67"" Java(TM) SE Runtime Environment (build 1.7.0_67-b01) Java HotSpot(TM) Server VM (build 24.65-b04, mixed mode)  ALPN-boot: alpn-boot-7.1.2.v20141202.jar  JRE8: java version ""1.8.0_25"" Java(TM) SE Runtime Environment (build 1.8.0_25-b17) Java HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)  ALPN-boot: alpn-boot-8.1.2.v20141202 ```","closed","feature,","arteam","2014-12-28T00:05:18Z","2016-01-24T08:03:33Z"
"","839","Remove Jersey GZip Encoder","Resolve #774, fix #821  Jersey GZipEncoder conflicts with Jetty BiDiGzipFilter and breaks breaks backwards compatibility of Dropwizard configuration.  It always compresses responses if a client accepts gzip encoding, which is not the same behaviour as in BiDiGzipFilter. The latter is configured through a YML file, has more configuration options and could be disabled externally. As a result users can't disable response compressing even if they want to.  Also it conflicts with Jersey LoggingFilter, which is useful for debug purposes.","closed","improvement,","arteam","2015-01-10T15:52:34Z","2016-01-24T08:06:18Z"
"","1093","Registering LoggingFilter on Jersey Client","Requests cannot be logged because of the undelying apache http client implementation.","closed","","ra2085","2015-06-03T18:54:22Z","2016-02-18T09:52:53Z"
"","768","Security issue: Data representation leaks because validation takes places before authentication","Reported this on the mailing list and was asked to create an issue. I'm attaching some basic code to illustrate the problem.  My application  ``` public class TestApplication extends Application {      public static void main(String[] args) throws Exception {         new TestApplication().run(args);     }     @Override     public void initialize(Bootstrap configurationBootstrap) {      }      @Override     public void run(Configuration configuration, Environment environment) throws Exception {         environment.jersey().register(new BasicAuthProvider(new SecuredResourcesAuthenticator(),""SecuredEndpoints""));         environment.getObjectMapper().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);         ValidatedResource resource = new ValidatedResource();         environment.jersey().register(resource);     } } ```  My resource  ``` @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) @Path(""/greet"") public class ValidatedResource {      @POST     @Timed     @ExceptionMetered     public Object createSolution(@Valid TransportObject validatedObject,@Auth Object userPlaceholder) throws JsonProcessingException {         String response = ""Hello"";         return response;     } } ```  The object with ""secret"" internal representation I only want authenticated people to know about  ``` public class TransportObject {      @NotNull     @Size(min = 1)     @Pattern(regexp=""some_regexp_here"")     private String given_name;      public String getGiven_name() {         return given_name;     }      public void setGiven_name(String given_name) {         this.given_name = given_name;     } } ```  The class that ""handles"" authentication by denying everybody  ``` public class SecuredResourcesAuthenticator implements Authenticator {      @Override     public Optional authenticate(BasicCredentials credentials) throws AuthenticationException {         //Deny everybody access         return Optional.absent();     } } ```  I'm using dropwizard 0.7. A POST to http://localhost:8080/greet after the service has been started with an empty JSON body gives the following response:  ``` { errors: [1] 0:  ""given_name may not be null (was null)"" - } ```  After  getting that info I POST  ``` {     ""given_name"": """" } ```  And get basically the full internal representation of this rather simple resource  ``` { errors: [2] 0:  ""given_name must match ""some_regexp_here"" (was )"" 1:  ""given_name size must be between 1 and 2147483647 (was )"" - } ```  Now that I figured out how it works, I can POST  ``` {     ""given_name"": ""some_regexp_here"" } ```  And only then am I asked for credentials, which I don't have (valid one's that is) in the first place.","closed","security,","X3Cutor","2014-11-06T10:54:20Z","2015-05-08T13:21:15Z"
"","572","Replace Apache Commons Logging with SLF4J bridge","Replace Apache Commons Logging (pulled in by Apache HttpClient) with the appropriate SLF4J bridge. This will fix issue #571.","closed","bug,","joschi","2014-05-12T16:33:16Z","2014-06-18T02:58:29Z"
"","735","Remove assets bundle documentation that is no longer valid.","Removing this invalid documentation per the commonly reported issues: #661, #662, #676, and bazaarvoice/dropwizard-configurable-assets-bundle#28","closed","documentation,","nbauernfeind","2014-10-07T14:30:34Z","2014-10-07T15:51:31Z"
"","583","Fix csv metrics documentation. Directory creation","Related issue: #578  When the Metric's CSV reporter is enabled, it doesn't write to a file, but instead writes a series of files to a specified directory. This commit fixes all references of the single file notion.  This commit also creates the CSV reporter directory if it doesn't already exist on start up. An appropriate test was created to confirm behavior.  I chose not to implement the breaking change of renaming the CSVReporter's `file` property to something like `directory` as that would render all current configs with that parameter incompatible. If people think this is a good idea, I can do the renaming.","closed","","nickbabcock","2014-05-17T20:41:38Z","2014-06-14T10:29:34Z"
"","1066","Missing @Path annotation causes odd NPE in 0.8.1","Referring to: https://github.com/federecio/dropwizard-swagger/issues/52  If the @Path annotation is missing from a Resource a NPE is thrown in this class: io.dropwizard.jersey.DropwizardResourceConfig$EndpointLogger.normalizePath  Instead of throwing random, odd NPE it should clean show an ERROR log message stating that a path is missing from a resource ideally indicating which one.","closed","","nadenf","2015-05-23T15:01:50Z","2015-05-24T09:59:03Z"
"","1067","Fix NPE when resources have the @Path annotation just on method level","Referring this https://github.com/dropwizard/dropwizard/issues/1066 and consequently this: https://github.com/federecio/dropwizard-swagger/issues/52  This pull request fixes this referred NPE. Basically, what I've found is that resources without @Path annotation on class level the method `org.glassfish.jersey.server.model.Resource#getPath` returns null, so, causing the issue in `EndpointLogger#normalizePath`. I've just wrote a defensive code to avoid this NPE.","closed","bug,","thiagomoretto","2015-05-24T04:04:48Z","2016-08-13T18:38:20Z"
"","1258","Metrics registry duplicate metric issue","Referencing https://github.com/dropwizard/dropwizard/issues/832  This above issue still exists. I am struggling with it right now. While it is true that one can provide unique names, however, if I want to use a fresh client each time I need a new one in the same class/test class/(in general in the same context), then this issue is limiting my approaches. What are the reasons that the behaviour was changed in 0.8.0 in a way that introduces this bug/limitation. Can the metrics registry be cleared when a client is closed? Is there a plan to fix this issue? What is the work around for now short of supplying unique names.  I am using dropwizard-client 0.8.2  java.lang.IllegalArgumentException: A metric named org.apache.http.conn.HttpClientConnectionManager.cs.available-connections already exists at com.codahale.metrics.MetricRegistry.register(MetricRegistry.java:91) at com.codahale.metrics.httpclient.InstrumentedHttpClientConnectionManager.(InstrumentedHttpClientConnectionManager.java:63) at io.dropwizard.client.HttpClientBuilder.createConnectionManager(HttpClientBuilder.java:287) at io.dropwizard.client.HttpClientBuilder.buildWithDefaultRequestConfiguration(HttpClientBuilder.java:182) at io.dropwizard.client.JerseyClientBuilder.buildConfig(JerseyClientBuilder.java:347) at io.dropwizard.client.JerseyClientBuilder.build(JerseyClientBuilder.java:315) at io.dropwizard.client.JerseyClientBuilder.build(JerseyClientBuilder.java:309)","closed","","ghost","2015-09-23T23:03:22Z","2016-01-17T14:44:11Z"
"","826","Update example README according to actual DB access code","References to JDBI in the README file are confusing, because actually Hibernate is used for database related operations.","closed","documentation,","arteam","2014-12-28T20:06:01Z","2016-01-24T08:03:46Z"
"","825","Extract building connections metric name into a method","Reduce duplicate code across all HTTP connection factories.","closed","improvement,","arteam","2014-12-28T19:38:46Z","2016-01-24T08:04:16Z"
"","1507","ConfigurationFactory has extracted interface for own implementation","Recently I opened up #1484 for discussion but there doesn't seem to be a consensus about the behaviour of the configuration imports.  This PR proposes to extract an interface from the current `ConfigurationFactory` so instead of landing the feature from #1484, users can implement their own logic. https://github.com/dropwizard/dropwizard/pull/1484#issuecomment-199465047  I tried to be conservative with the PR, extracting the two generic methods on which the framework relies and adding adefault for building from `java.io.File`. Tests continue to use the default implementation and no big changes there. I chose to name the default implementation `YamlConfigurationFactory`, since it's an inherent part of it.","closed","improvement,","vvondra","2016-04-03T15:39:35Z","2016-04-08T12:42:13Z"
"","761","""Comparison method violates its general contract!"" fix LevenshteinComparator","Receiving the following IllegalArgumentException. Traced back to incomplete Levenshtein comparator.  ``` Exception in thread ""main"" java.lang.IllegalArgumentException: Comparison method violates its general contract!        at java.util.TimSort.mergeLo(TimSort.java:747)        at java.util.TimSort.mergeAt(TimSort.java:483)        at java.util.TimSort.mergeCollapse(TimSort.java:410)        at java.util.TimSort.sort(TimSort.java:214)        at java.util.TimSort.sort(TimSort.java:173)        at java.util.Arrays.sort(Arrays.java:659)        at java.util.Collections.sort(Collections.java:217)        at io.dropwizard.configuration.ConfigurationParsingException$Builder.getSuggestions(ConfigurationParsingException.java:131)        at io.dropwizard.configuration.ConfigurationParsingException$Builder.build(ConfigurationParsingException.java:251)        at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:134)        at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:77)        at io.dropwizard.cli.ConfiguredCommand.parseConfiguration(ConfiguredCommand.java:114)        at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:63)        at io.dropwizard.cli.Cli.run(Cli.java:70)        at io.dropwizard.Application.run(Application.java:72) ```","closed","bug,","devinrsmith","2014-10-27T20:11:09Z","2014-10-28T09:42:11Z"
"","675","Cleaning dropwizard-example's README.md and removing unused code","README.md was pointing to an already removed file. Person class defined a NamedQuery which wasn't used anywhere","closed","","anikiej","2014-08-06T20:27:33Z","2014-08-16T12:24:21Z"
"","890","Metric Reporter filter redux","Re issues #711 , #713  and #730   MetricFilter should use different logic for filtering.  Case 4 in #713 results in odd behavior.    Start with a non-empty includes list and an empty excludes list, then add an excludes list: items in neither list appear in the output.  Adding an excludes list to an in-place includes list starts reporting all metrics not in either list!  That is odd behavior that verges on the behavior of the original bug that was being fixed.  An alternative, semi-standard way of doing this kind of filtering is to always apply both  filters. Given the default behavior of including everything if no filter is specified, this makes senses.    In the code that might be:  ``` public MetricFilter getFilter() {     return new MetricFilter() {         @Override         public boolean matches(final String name, final Metric metric) {             boolean isNotExcluded = getExcludes().isEmpty() || !getExcludes().contains(name);             boolean isIncluded = getIncludes().isEmpty() || getIncludes().contains(name);             // Match name that isNotExcluded && isIncluded             return isNotExcluded && isIncluded;         }     }; } ```  Note that this logic correctly handles cases 1, 2, and 3 as well - the degenerate cases where either only one filter or no filter at all is specified.  The last of the unit tests changes to:  ```             new Object[]{INCLUDES, """", EXCLUDES, ""any"", false, ""case4""} ```  One further reason for this approach (used in multiple project - Spring, Eclipse, to name two) is that it makes sense with regex filters as well.","closed","improvement,","eepstein","2015-02-22T18:30:23Z","2015-02-25T23:41:43Z"
"","971","Facility to specify a database timezone","Provide facility to specify the database time zone during converting Joda-Time `DateTime` values from/to `SQL TIMESTAMP`.  It's crucial for cases when the database operates in a different timezone then the client and it doesn't handle timestamps as SQL `TIMESTAMP WITH TIME ZONE`  Resolve #968","closed","improvement,","arteam","2015-04-05T19:32:02Z","2016-01-24T08:05:17Z"
"","1309","Add UnwrapValidatedValue annotation to `BaseReporterFactory.frequency`","Proposed fix for #1308. I'm not familiar with how validations are tested in the Dropwizard codebase, so please advise on how I can write a test for this change.","closed","bug,","evnm","2015-10-28T18:59:34Z","2015-10-29T10:48:46Z"
"","981","DropwizardTestSupport: after() completes even if before() failed","Prior to this fix, DropwizardTestSupport.after() assumed that a previous execution of before() had completed successfully. But if before() failed, then after() would fail, too -- typically, with an NPE accessing an undefined jettyServer. In which case the, JUnit report for tests using DropwizardTestSupport become muddled, showing an extra failure for each test class.","closed","","kerrykimbrough","2015-04-09T19:21:42Z","2015-04-11T17:45:06Z"
"","674","`DropwizardAppRule` more strict in resetting config overrides","Prior to this change, `DropwizardAppRule` would clear _ALL_ system properties that start with `dw.`, regardless of whether they were defined as `ConfigOverride` values in the test. This caused problems with tests that relied on a combination of command-line overrides (that should not be reset) and test-specific overrides (that should be reset).  An example of where this might be useful is dynamic port allocation, where the build system (Maven, Jenkins, etc.) dynamically allocates port numbers to the app and provides these via command-line overrides (e.g. `-Ddw.cassandra.port=${SOME_DYNAMIC_PORT}`). These values should be retained (otherwise subsequent tests fail), but the configuration that was explicitly overridden using `ConfigOverride` in the test should be reset.  Note that this does _not_ revert the original value of the system property if you override an already-overridden property.","closed","improvement,","stuartgunter","2014-08-06T09:53:11Z","2015-01-04T13:18:25Z"
"","1241","Fix for #1197 - Principal instance not injected when annotated","Principal parameter which is not annotated with Auth annotation shouldn't be authenticated. This worked before but only when such parameter is not annotated with any annotation. Otherwise parameter injection failed. The prove that this didn't work is NoAuthPrincipalEntityTest.annotatedPrincipalEntityWithoutAuth test which fails without the fix.  Btw., still wondering why Auth annotation is allowed on method and type level..","closed","","StanSvec","2015-08-30T16:07:10Z","2015-09-02T18:56:34Z"
"","1424","ValidationMethod violation message is itself","Previously, when a ValidationMethod caused a constraint violation and the violation was caused by a nested object using the `@Valid` annotation, the message would contain the path of the nested object. This may be misleading to the client who sees the message because the nested code path may not have a related field in the JSON they sent (for example, the field could be a misnomer).  The fix is return the message exactly as it is transcribed in the `@ValidationMethod` annotation. Thus, it is now the user's responsibility to create descriptive enough messages, such that the client can discern the error through any amount of nesting.  This change does break APIs that relied on the message containing the code path to the object that contained the ValidationMethod violation. ValidationMethods not used in nested objects are not effected.  This fixes #1237, such that dropwizard doesn't prepend the path of the error in the message","closed","improvement,","nickbabcock","2016-01-18T19:08:58Z","2016-01-25T19:01:21Z"
"","1352","Unable to pass @Auth injected Principal into Sub-Resources","Previously, in Dropwizard 0.8.x, we were able to inject and pass down the authenticated Principle throughout the entire path.  E.g.  ``` @Path(""/protected"") @Produces(MediaType.TEXT_PLAIN) public class ProtectedResource {     @GET     public String showSecret(@Auth User user) {         return String.format(""Hey there, %s. You know the secret! %d"", user.getName(), user.getId());     }      @RolesAllowed(""ADMIN"")     @GET     @Path(""admin"")     public String showAdminSecret(@Auth User user) {         return String.format(""Hey there, %s. It looks like you are an admin. %d"", user.getName(), user.getId());     }      @Path(""sub"")     public ProtectedSubResource getSubResource(@Auth User user) {         return new ProtectedSubResource(user);     } } ```  In Dropwizard 0.9.1, this does not seem to work. Stack trace indicates   ``` ! java.lang.IllegalStateException: Cannot inject a custom principal into unauthenticated request ```  Are there any plans to implement a way to authenticating an entire resource? Can this be considered a regression?  I have also noticed that @PermitAll does not seem to apply to an entire resource, or it's subresources.","closed","","nate9","2015-11-24T04:57:10Z","2016-12-21T08:47:28Z"
"","1527","Jackson Invalid Format Exception is 400 response","Previously if a client would supply a string value where an Integer should be, for example, a 500 error would be generated. This fix will now return a 400 for all invalid conversions from JSON to Java Object.  As discovered by @mikewatt in #1347  CC'ing others from #1347: @jplock, @brentryan","closed","bug,","nickbabcock","2016-04-19T17:46:30Z","2016-05-10T14:45:04Z"
"","1281","Allow custom redirect strategy to be set","PR resulting from https://github.com/dropwizard/dropwizard/issues/1186#issuecomment-148188882","closed","improvement,","jlordiales","2015-10-16T22:03:47Z","2015-10-17T08:17:38Z"
"","1131","Allow passing explicit Configuration via `DropwizardTestSupport`, `DropwizardAppRule` (for #1130)","PR adds an alternate way to construct test scaffolding, by passing pre-constructed `Configuration` instead of relying on a YAML resource. This is useful for tests where configuration is programmatically set. Other minor access changes needed to support this functionality.","closed","","cowtowncoder","2015-06-24T21:33:14Z","2015-07-03T05:10:05Z"
"","1328","Fixed layout of the example.rst","PR #1298 broke the layout: double space before asterisk is not working in sphinx","closed","documentation,","fexbraun","2015-11-05T15:22:24Z","2015-11-05T17:11:43Z"
"","780","JerseyClient POSTs are broken due to ConfiguredGZipEncoder and Jersey 2.x","POSTing data with the dropwizard JerseyClient fails because the entity is gzip compressed without the content-encoding header, causing the target to return 400 Bad Request  **Details** When using JerseyClientBuilder gzip is enabled by default.  The ConfiguredGZipEncoder that is added to the jersey client is a WriterInterceptor which is no longer allowed to add headers in Jersey 2.x with the ApacheConnector that is being used.  The content-encoding header added by ConfiguredGZipEncoder is ignored and data is compressed and sent without that header, causing the target server to issue 400 Bad Request.  This warning is issued when POSTing data:  ``` WARN  10:48:33 | noreq |  na |  o.glassfish.jersey.message.internal.HeaderUtils | There are some request headers that have not been sent by connector [org.glassfish.jersey.apache.connector.ApacheConnector]. Probably you added those headers in WriterInterceptor or MessageBodyWriter. That feature is not supported by the connector. Please, do not modify headers in WriterInterceptor or MessageBodyWriter or use default HttpUrlConnector instead. Unsent header changes: [Content-Encoding] ```  I think this means ConfiguredGZipEncoder needs to be re-written to work property with Jersey 2.x","closed","","cmicali","2014-11-17T16:07:31Z","2014-11-21T14:13:53Z"
"","1069","Move polymorphic configuration to the end of configuration section","Polymorphic configuration is an advanced technique and should pe placed in the end of section.  Doing so, we don't confuse users, who open the section just to consult the reference.","closed","documentation,","arteam","2015-05-24T18:57:39Z","2016-01-24T08:05:52Z"
"","1528","dropwizard-metrics-kafka","Plugin to send metrics to Kafka.","closed","","mustajabakhtar","2016-04-20T14:49:05Z","2019-10-26T11:15:45Z"
"","558","Adjustments to JerseyClientBuilder to use configuration options otherwise ignored","Please see issue #557 in the issue tracker.  The basic problem was that the DW JerseyClientBuilder didn't properly take into account a lot of the configuration options you can pass to a Client object, particularly the proxying features.  This uses code taken from ApacheHttpClient4 to process those configuration options and get them into the ClientHandler object so they'll be properly picked up.  This is my first pull request, so apologies if I did it wrong.  :)","closed","improvement,","Zoroaster668","2014-05-01T15:09:38Z","2015-03-07T16:40:55Z"
"","1187","Update hibernate validator to 5.2.1.Final","Picked out a few interesting bits:  In some cases, when validating `Optional`, the `UnwrapValidatedValue` is not needed. Only one line of code in the entire code base was changed as the result of this. Since it's not entirely intuitive when `UnwrapValidatedValue` is needed, I've omitted changing the documentation because it still works with the annotation applied.  This doesn't affect dropwizard immediately, since we're not targeting jdk 8 right now, but with [new type annotations](https://blogs.oracle.com/java-platform-group/entry/java_8_s_new_type), it is possible to write code like:  ``` java List<@NotEmpty String> strs;  ```","closed","","nickbabcock","2015-07-24T18:20:10Z","2015-09-01T12:02:11Z"
"","853","change dropwizard-forms packaging","Packaging needs to be changed to jar to be able to use the new bundle.","closed","bug,","Athou","2015-01-18T09:21:05Z","2015-01-18T10:08:17Z"
"","807","protected void logSupportedParameters() {","package io.dropwizard.jetty;   We print out Supported protocols & Supported cipher suites but not the ones at INFO level that have been configured. I found this a little misleading.   Would be nice to also log the actual ones configured.","closed","improvement,","ghost","2014-12-08T09:04:25Z","2015-01-06T16:05:12Z"
"","602","Unable to set context application context path in DefaultServerFactory","Out of the box it seems you cannot use the DefaultServerFactory and specify an application context path. Line 103 of the SimpleServerFactory sets the applicationContextPath but the DefaultServerFactory is missing this line and the appropriate json property.  I'm just about to get round the issue by extending the DefaultServerFactory but it seems like an inconvenience when this worked out of the box before.   I've raised this issue on the dev Google group at https://groups.google.com/forum/#!topic/dropwizard-dev/MAXglyXJCVU - I'm interested to know if this is a regression or a deliberate decision.","closed","","mikeycmccarthy","2014-05-30T07:44:48Z","2014-10-05T12:38:28Z"
"","1404","Add support for forcing log rotation on startup/shutdown","Otherwise logs do not appear in the correct file on the correct day/hour.  http://stackoverflow.com/questions/27516746/how-to-force-a-log-rotation-when-dropwizard-service-is-shut-down","closed","stale,","stantonk","2016-01-04T21:37:23Z","2019-09-03T00:01:01Z"
"","1010","Update the tech empower benchmarks","One think we should do is make sure that empower benchmark is using the latest code.  https://www.techempower.com/benchmarks/  https://github.com/TechEmpower/FrameworkBenchmarks/tree/master/frameworks/Java/dropwizard","closed","","carlo-rtr","2015-04-23T13:12:42Z","2016-03-30T04:20:24Z"
"","682","Simplify HibernateBundle constructor","One of the constructors for HibernateBundle is somewhat clumsy. This is an attempt to simplify it. The current signature for it is:  ``` protected HibernateBundle(Class entity, Class... entities) ```  A concrete call to this would look something like:  ``` new HibernateBundle(Person.class, Email.class, Attachment.class)... ```  A (debatably) cleaner way to to this would be to simply remove the first parameter of the existing constructor, simplifying it to:  ``` protected HibernateBundle(Class... entities) ```  The concrete call to it could then look like:  ``` Class[] entities = new Class[]{Person.class, Email.class, Attachment.class}; new HibernateBundle(entities); ```  This constructor was last modified in 2012, and originally had the signature that is being proposed as part of this pull request. The comment from them mentions Hibernate requiring at least one entity, so to add this protection some code was put into place which checks for this.","closed","","jchilders","2014-08-12T20:26:40Z","2014-12-14T14:18:04Z"
"","1040","Fix test for sorting endpoints in log","On windows there is a carriage return line feed instead of just a line feed so the regex failed. The fix is more cross platform friendly.","closed","","nickbabcock","2015-05-08T20:45:24Z","2015-05-11T14:13:39Z"
"","1103","Config class locations","On the [doc](https://dropwizard.github.io/dropwizard/manual/configuration.html), it mentioned that config class should be in `META-INF` dir. where would you suggest putting this dir? should it be in `src/main/resources/` or `src/main/java`?","closed","","mattuuh7","2015-06-06T04:11:44Z","2015-06-08T07:38:14Z"
"","1154","Add toString for configuration objects","Objects which hold configuration are serialized from json/yaml files. Without proper `toString()` methods, it is impossible to log what is the configuration of the application after it was deserialized into the configuration class. It is especially important in regards to the `DefaultServerFactory` class, which holds the configuration for the `server` command. By adding the `toString()` methods, it is possible to log during application startup what is the actual configuration used by the app.","closed","improvement,","kmejka","2015-07-07T07:37:19Z","2015-07-08T12:14:55Z"
"","635","nullify jettyServer on stop()","nullify jettyServer on stop() so that shared test base-classes with a @BeforeClass DropWizardAppRule can start new jetty servers.","closed","","ellispritchard","2014-06-27T15:02:37Z","2014-06-29T22:50:39Z"
"","747","Remove reflection hacks for AsyncAppender","Now wrapper is not Dropwizard `AsyncAppender` but logback `AsyncAppender`.  So we can use directly to access the syslog appender","closed","","arteam","2014-10-18T17:48:48Z","2016-01-24T08:06:22Z"
"","1244","Add template behavior on error in release notes","Noticed I forgot to update the release notes in #1178, so here it is.","closed","","nickbabcock","2015-09-01T13:13:04Z","2015-09-01T13:32:03Z"
"","545","Port To Jersey 2.x","Note that this relies on a forked branch to Metrics for the same purpose of supporting Jersey2 that hasn't been accepted yet. The PR for that is at https://github.com/dropwizard/metrics/pull/532","closed","feature,","saadmufti","2014-04-16T20:48:32Z","2014-10-01T22:39:33Z"
"","924","Exclude slf4j-api from metrics-httpclient","Not sure why this wasn't picked up by the enforcer. metrics-httpclient relies on slf4j-api 1.7.7, not 1.7.10","closed","","thesmith","2015-03-06T13:56:17Z","2015-03-06T15:17:53Z"
"","804","Real type is not always set properly in Java","Not every time a real type of a class is set using getClass method. It is better to rely on getting class from a field than getting from this reference. Sometimes real class type is held in this$0 synthetic field. Pull request: https://github.com/dropwizard/dropwizard/pull/803","closed","","meshuga","2014-12-04T09:05:11Z","2015-11-25T18:44:30Z"
"","803","Real type is not always set properly in Java","Not every time a real type of a class is set using getClass method. It is better to rely on getting class from a field than getting from this reference. Sometimes real class type is held in this$0 synthetic field.","closed","","meshuga","2014-12-04T09:03:46Z","2015-04-10T16:42:38Z"
"","1269","Sorry! I forgot to include this. This is the most important part. Please accept.","Need to be able to override getResourceUrl() in case resource is in an external JAR","closed","","Randgalt","2015-09-29T18:01:30Z","2015-09-30T20:18:22Z"
"","883","BaseReporterFactory should support matching includes/excludes with regular expressions","My project requires a ReporterFactory that can filter out metrics using logic more complicated than the straightforward Set.contains() that the BaseReporterFactory currently uses. It would be really useful if the include/exclude fields in that class supported regular expressions.  While it IS possible to implement regular expressions on my end by overriding getFilter() to return a custom MetricFilter implementation, this unfortunately has a few drawbacks. Namely, it requires me to reproduce the includes/excludes logic already implemented in getFilter()'s default MetricFilter. This, in turn, makes my code more brittle, as any changes or fixes applied to that MetricFilter implementation (such as, say, https://github.com/dropwizard/dropwizard/commit/8d2fd813f017a91f5f31f663b5fb626720ef8d96) would have to be manually reproduced in my own copy. Ideally that MetricFilter would support regular expressions by default, or at least be extendable in a way that effectively re-uses code.","closed","","ToadJam","2015-02-18T21:56:48Z","2015-02-24T07:28:57Z"
"","911","Vote: should we add something like this to the docs?","My guess is that having it laid out like this is useful, but could easily go stale.  https://groups.google.com/d/msg/dropwizard-user/Om_N_4WIZfQ/0U03LI8oZC0J","closed","","carlo-rtr","2015-03-03T18:29:50Z","2015-03-05T14:51:20Z"
"","1274","CLI output on configuration exceptions should be more verbose","My configuration contains a list of class names which are then dynamically loaded. If a class is not found, the output on the command line is not very helpful.  I run my project like this: `$ java -jar target/myproject-1.0-SNAPSHOT.jar server config.yaml`  The output looks like this (using dropwizard 0.8.4):  > config.yaml has an error: > - Failed to parse configuration at: myfoos.order; Instantiation of [simple type, class org.example.myproject.MyFooInfo] value failed: org.example.myproject.MyFooImpl (through reference chain: org.example.myproject.MyConfiguration[""foo""]->org.example.myproject.MyFooInfo[""order""])  `MyFooInfo` is used as a property in `MyConfiguration` and tries to load the classes specified by a constructor parameter which then throws a `ClassNotFoundException` because `org.example.myproject.MyFooImpl` is not found.  The output would be more helpful if it contained at least the class name of the root exception (I didn’t expect a `ClassNotFoundException` and therefore searched for other errors first) or maybe even the stacktrace.  I tried different strategies, but none of them is satisfying: - Throwing the `ClassNotFoundException` directly: Output not very helpful like stated above - Wrapping it in `RuntimeException` with a custom message: Custom message doesn’t appear, only the message from the `ClassNotFoundException` - Throwing a `RuntimeException` with a custom message, but without a cause: command line output contains my message, but it’s bad practice to throw the stacktrace away  My current workaround is to catch, log and rethrow the `ClassNotFoundException` in `MyFooInfo` which is ugly and should not be necessary. Also, there could be other unhandled exceptions which will lead to command line output similar to the one given above.","closed","","maffe","2015-10-05T16:36:15Z","2016-06-05T21:24:53Z"
"","1440","Odd dropwizard -> jackson versioning in POM","MvnRepository suggests that dropwizard (as of 0.9.2) and all of it's subprojects should now be pointing at Jackson 2.7.1.  However, upon IDE import, and subsequent investigation of POMS, this does not seem to be the case. Excerpt from dropwizard-bom-0.9.2.pom:  ```         2.6.0         2.6.3 ```  Thus, I am getting a mish mash of jackson 2.6.3 and 2.7.1 in my IDE import, and using gradle dependencyInsight.","closed","","nheitz","2016-02-03T11:36:59Z","2016-02-03T11:50:22Z"
"","1285","Fixed failing CliTests by Setting Default Locale","Multiple tests in CliTest will fail on systems with a default locale other than English.  ArgParse4j localizes some parts of the validation error message. The tests assert the equality of the whole text. As a fix, I set the default locale to English in the setup of the tests.  FMPOV it is not necessary to save the former default locale and to switch it back after the tests because tests are executed in a separate JVM. Let me know, if you think different.","closed","","fexbraun","2015-10-20T07:20:29Z","2015-10-20T09:27:40Z"
"","1344","fix typo in document comments","Missing a single letter in the document comments  SL4J -> SLF4J","closed","documentation,","tonygaetani","2015-11-19T10:53:52Z","2015-11-19T10:56:07Z"
"","621","Updating Jackson to 2.4.0","Minor release with new functionality but backwards compatible. - Official support for Guava HostAndPort (removed Dropwizards deserializer) - Jdk7Module with support for Path - Bunch of misc improvements  https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.4 ##   It looks like Jackson 2.4.0 actually has a [couple regressions](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.4.1) from 2.3.x, so it may be worth holding off merging this until 2.4.1 is out and going straight to that. Thoughts?","closed","","reines","2014-06-13T22:20:08Z","2014-06-18T16:31:09Z"
"","1214","Documentation : Missing generic type for basic auth","Minor fix on the auth documentation","closed","","akraxx","2015-08-12T08:55:41Z","2015-08-12T14:46:46Z"
"","739","Code Cleanup","Minor code cleanup and test refactoring done during code review session.","closed","","hawkan","2014-10-10T14:01:48Z","2014-10-23T08:46:28Z"
"","1266","Dropwizard #1265 - Allow AssetBundle/AssetServlet to be customized.","minor changes so that these classes can be subclassed for customization/reuse","closed","","Randgalt","2015-09-28T19:35:04Z","2015-09-30T20:18:32Z"
"","1442","Pickled Graphite reporter for Dropwizard Metrics","Metrics library allows reporting of pickled metrics to Graphite. Having a Pickled Graphite reporter available in `dropwizard-metrics-graphite` will enables users to choose this functionality","closed","stale,","skstronghold","2016-02-03T18:31:46Z","2019-09-03T00:01:01Z"
"","1008","formatting dates in serialized json","Maybe I'm missing something, but I can't figure out how to change how dates (java.util.Date) are serialized into json.  Currently, it's output as YYYY-MM-DD in all json output.  I tried updating the object mapper, but no luck?  ```     public void run(AppConfiguration config, Environment environment) throws ClassNotFoundException {         // doesn't work         //environment.getObjectMapper().setDateFormat(new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSSZ""));         // doesn't work         // environment.getObjectMapper().setDateFormat(ISO8601DateFormat.getInstance());         // doesn't work         // doesn't work       //environment.getObjectMapper().configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, true); ```  I'm using dropwizard 0.8.1.","closed","","qmnonic","2015-04-23T01:34:31Z","2015-04-23T13:45:48Z"
"","1526","Fix newline comparison for windows test","May have been a change in the recent Jackson version, but this fixes the test on windows.","closed","improvement,","nickbabcock","2016-04-19T15:52:04Z","2016-04-20T12:36:09Z"
"","1212","Upgrade to argparse4j 0.6.0","Mailing list references: - https://groups.google.com/d/msg/dropwizard-user/WwlAslJikE0/33KM6Ettd1UJ - https://groups.google.com/d/msg/dropwizard-dev/CC2jfWLmVM4/7lF0VNJrzWUJ","closed","improvement,","joschi","2015-08-08T10:43:49Z","2015-08-08T14:40:34Z"
"","640","Fixing double definition of guava version","Looks like this was from an incorrect merge conflict resolution.","closed","","reines","2014-07-03T14:58:15Z","2014-07-03T21:13:43Z"
"","1422","Fix configuration factory test on windows","Looks like the exception message contains newlines, so this test failed on Windows. Not sure if this is the desired behavior, because as of now there is a mix of line endings -- I just got the test to pass.","closed","bug,","nickbabcock","2016-01-18T14:44:12Z","2016-01-18T17:43:49Z"
"","692","Added `LogConfigurationTask` to allow runtime changes to log levels","Logback provides a `JmxConfigurator` for changing logging levels at runtime, but this does not currently appear to be exposed in a Dropwizard-friendly manner. I didn't want to simply use the JMX approach, as that would introduce an inconsistency in managing my DW apps (everything else is managed via config or HTTP access).  I created a `Task` implementation that essentially does the same as Logback's `JmxConfigurator` and provided this via an external library (see https://github.com/stuartgunter/dropwizard-logging-config), but feel it would be appropriate to include in the main DW library. (If there's no appetite for including this in DW, I'd be happy maintaining the library separately.)  I'm not comfortable with the way it has been included, but haven't yet come up with a nice way of doing it. I would appreciate feedback (assuming there's interest in bringing this into DW) on how it should be included at a package / module level. The summary of my concerns is: - `Task` is defined in `dropwizard-servlets` - `Logback` is only explicitly included in `dropwizard-logging` - The `LogConfigurationTask` straddles both of these modules due to its dependency on both Logback and `Task` - I don't want to create a separate Maven module just for this one class, but I don't believe it truly fits in either `dropwizard-logging` or `dropwizard-servlets` - Would it be worth relocating `Tasks` to somewhere else (they may be used by `dropwizard-servlets` but there's nothing Servlet-specific about them - they're not all that different from named runnables with predefined method args)  Feedback would be very welcome.","closed","feature,","stuartgunter","2014-08-27T07:44:55Z","2015-01-17T16:24:49Z"
"","686","Allow log4j 2 loggers to be bound to slf4j logger","Log4j 2 is released and it has async loggers, which are much faster then synchronized loggers. It would bre really nice that DW removes the hard coded logback logger and allows log4j 2 loggers to be bound","closed","","tongguop","2014-08-16T23:52:50Z","2014-08-17T11:11:15Z"
"","1520","Update Maven reference link","Location of book changed.","closed","","ojongerius","2016-04-16T05:03:27Z","2016-04-16T11:03:38Z"
"","840","Make endpoints information public","List of endpoints is useful not only for logging but also as API for users.  This change was originally introduced in commit c0eb424,  but has been lost after upgrading to Jersey.   See PR #643 for reference","closed","improvement,","arteam","2015-01-10T18:01:44Z","2016-01-24T08:04:37Z"
"","696","Map uriPath without ending slash","Let's say I've got my Swagger docs at http://localhost:9000/swagger/index.html. I'd like to map the following to index.html as well: http://localhost:9000/swagger/ http://localhost:9000/swagger The former works. I'm doing the following bootstrapping: bootstrap.addBundle(new AssetsBundle(""/swagger"", ""/swagger"", ""index.html"", ""swaggerAssets""));  But http://localhost:9000/swagger gives a HTTP error 500. And looking at the source code (Dropwizard 0.7.1) for AssetBundle it looks like a slash is added at the end if it's not there: this.uriPath = uriPath.endsWith(""/"") ? uriPath : (uriPath + '/');  Is there a reason for adding this slash? So this means it's not possible to map http://localhost:9000/swagger or is there another way?","closed","","fredrikoe","2014-08-28T08:09:46Z","2015-04-17T15:30:28Z"
"","1417","Register RequestLogFactory as Discoverable","Last missing piece for #1290 (as verified by external implementation, sorry for the scattered dot connection). Also included in #1415 by this is a much smaller change.","closed","improvement,","mwhipple","2016-01-16T15:24:36Z","2016-01-16T21:10:06Z"
"","1463","Undertow Support?","Just wanted to ""re-open"" the question which was posted in Issue #475.","closed","","uromahn","2016-02-16T16:19:29Z","2020-01-03T05:56:15Z"
"","1152","FakeEntity1 was wrongly placed. Moved it to the correct package","Just moved it to the correct package","closed","bug,","wakandan","2015-07-03T17:29:19Z","2015-07-21T13:58:15Z"
"","669","@FormParam and Optional","Just discovered that using `Optional`in a `@FormParam` param annotation is not recognised by the Jersey add-ons in DW.  Guess that there must be a FormParam equivalent of `OptionalQueryParamInjectableProvider`    If someone has a quick-fix - please shout out. I'll try to make time for a pr later.","closed","feature,","olvesh","2014-07-31T12:08:25Z","2014-08-17T13:37:55Z"
"","589","Optimize Imports","Just cleaning up...","closed","","ghost","2014-05-22T01:54:35Z","2014-06-27T05:30:10Z"
"","646","Change ""Integrated testing"" to ""Integration testing"" in the docs","Just caught my eye. I believe, ""integration testing"" is a more widely used term for a process of testing a system in a whole.","closed","documentation,","arteam","2014-07-08T12:43:22Z","2016-01-24T08:05:12Z"
"","773","use correct migrations command-line option in release notes","Just a small tweak the the release notes, the notes reference `--migrations-file` but the option is actually just `--migrations`","closed","documentation,","stve","2014-11-11T16:41:38Z","2014-11-11T17:15:54Z"
"","1529","fix link to issue in release notes","Just a small formatting fix I found while looking at the release notes for v1.0.0.   Here's the before and after: ![image 2016-04-20 at 11 07 28 am](https://cloud.githubusercontent.com/assets/28044/14679511/309f26e2-06e8-11e6-80b6-9dab400633e4.png)","closed","documentation,","stve","2016-04-20T15:08:30Z","2016-04-20T15:37:04Z"
"","1147","dropwizard-jetty's BiDiGzipFilter is no longer compatible with Jetty 9.3+","Jetty 8 deprecated non-async versions of GzipFilter.  Jetty 9.3 has completely gutted the Filter based Gzip handling in favor of a more fundamental GzipHandler inserted at the Server level (before the webapp).  However, this has rendered the existing BiDiGzipFilter as useless. See https://bugs.eclipse.org/471577 on Jetty side","closed","","joakime","2015-07-01T12:42:55Z","2015-11-25T19:09:24Z"
"","863","Not being able to setup request retry count using JerseyClient","JerseyClientBuilder is not using this parameter provided in HttpClientConfiguration.  The issue is a little bit bigger though: currently there is no way to specify request retry handler for Jersey client built with ApacheConnector (it is by default 3 retries).","closed","","TheTweak","2015-01-26T13:34:56Z","2015-02-15T22:01:42Z"
"","789","JerseyClient not reporting metrics","JerseyClientBuilder does not register any metrics. In particular JerseyClientBuilder.builder is not used for anything - it's possible to pass various parameters (JerseyClientConfiguration, HttpRequestRetryHandler, etc), but they are ignored.  That affects v0.8.0-rc1","closed","","mabn","2014-11-21T10:53:12Z","2015-02-15T22:01:42Z"
"","1006","JerseyClientBuilder should accept any combo of Environment, ExecutorService, or ObjectMapper","JerseyClientBuilder currently requires the use of either a combo of ExecutorService and ObjectMapper or an Environment from which it creates a managed ExecutorService and the objectMapper from the Environment.  That means if you want to use a separate ObjectMapper for your client you have to go through the work of creating a an ExecutorService on your own. Not hard, but unnecessary.  It would be nice if we could build a JerseyClient with any combo of ExecutorService, ObjectMapper, or Environment.","closed","improvement,","roccato","2015-04-22T13:57:37Z","2015-04-26T18:42:51Z"
"","849","JerseyClient does not respect keepAlive parameter","JerseyClient does not respect keepAlive parameter - underlying HttpClient uses DefaultConnectionKeepAliveStrategy. If the server does not specify keep-alive timeout in the response headers the connection will survive in the connection pool until it's closed.  In case of idle connections they tend to be closed on the server side (which connection pool is unaware of). The result is that the next request: - leases a (stale) connection from the pool - sends the request - tried to read from the underlying socket but fails - invalidates the connection and retries   AFAIR there are 2 retry attempts (retry configuration is also ignored).  In addition it's not possible to easily fix it because the client is built inside the constructor of org.glassfish.jersey.apache.connector.ApacheConnector (which is package-protected).  It's not possible to change ConnectionKeepAliveStrategy via reflection because the field in question is final.  I see following options: 1 - spawn a separate thread which will periodically expunge idle connections - see http://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html#d5e405 2 - write own version of ApacheConnector which builds underlying HttpClient correctly (could reuse HttpClientBuilder here). It would mean reverting pull request #791 and doing it differently, but it would fix all the things that were broken in JerseyClient in 8.0  I think the 2nd seems to be the best as it would allow to have the same code/bahavior of HttpClient in both cases (when using jersey or apache clients)","closed","","mabn","2015-01-14T17:28:24Z","2015-02-15T22:01:42Z"
"","880","Jersey media multipart exceptions in 0.8.0-rc3","jersey-media-multipart artifact is throwing exceptions in 0.8.0-rc3-SNAPSHOT, previously functional in 0.8.0-rc2.  pom.xml  ```      org.glassfish.jersey.media     jersey-media-multipart     2.15  ```  Application.java  ``` import org.glassfish.jersey.media.multipart.MultiPartFeature;  environment.jersey().register(MultiPartFeature.class); ```  Throws:  org.glassfish.jersey.internal.Errors: The following warnings have been detected: WARNING: HK2 service reification failed for [org.glassfish.jersey.server.internal.inject.MultivaluedParameterExtractorFactory] 1. org.glassfish.hk2.api.UnsatisfiedDependencyException: There was no object available for injection at SystemInjecteeImpl(requiredType=MultivaluedParameterExtractorProvider,parent=CookieParamValueFactoryProvider,qualifiers={},position=0,optional=false,self=false,unqualified=null,553299831) 2. java.lang.IllegalArgumentException: While attempting to resolve the dependencies of org.glassfish.jersey.server.internal.inject.CookieParamValueFactoryProvider errors were found 3. java.lang.IllegalStateException: Unable to perform operation: resolve on org.glassfish.jersey.server.internal.inject.CookieParamValueFactoryProvider","closed","","jasonsturges","2015-02-16T21:51:15Z","2015-02-23T09:11:20Z"
"","861","SSL setup stuff is missing in JerseyClientBuilder [0.8.0-rc2]","Jersey provides the following SSL configuration: https://jersey.java.net/documentation/latest/client.html#d0e5012  I would expect to have in JerseyClientBuilder at least `sslContext` and `hostnameVerifier` options. Something like that:  ` Client client = jerseyClientBuilder.sslContext(sslContext).hostnameVerifier(hostnameVerifier).build(); `","closed","","krutsko","2015-01-26T05:49:07Z","2015-02-15T22:01:42Z"
"","1232","Don't close the client instance in DropwizardApacheConnector","Jersey expects that we create a new instance of the Apache HTTP client every time, when we create a new instance of the connector.  So, when `ClientRuntime` is garbage collected, the client is closed and new requests, that work with a new connector, use already closed client.  The fix is to not close the client in the connector. We can rely on the fact, that the client is managed by Dropwizard environment and it will be closed, when the application will be shut down.  Also users of Apache HTTP Client keep the ability to close the client manually, if they want to.  Fix #1160","closed","","arteam","2015-08-20T15:23:32Z","2016-01-24T08:05:59Z"
"","1370","Encoding of properties files is ISO-8859-1","Java properties files are assumed to be ISO-8859-1 (latin-1) encoded.","closed","","bripkens","2015-12-05T17:28:27Z","2015-12-05T18:46:04Z"
"","625","JacksonMessageBodyProvider throws exception when post body is null","JacksonMessageBodyProvider in Dropwizard 0.6 allowed null post bodies. As a result, the resource methods would get a ""default"" instance (calling the default constructor) of the parameter type.  However in 0.7, JacksonMessageBodyProvider throws an exception and the resource method never gets called. Posting {} reverts to the old behaviour.  Because our application is now expecting the old behaviour (i.e. accepted null post bodies reverting to default constructors on resource methods) in multiple places (namely many client applications) changing all the calls is likely to be a nightmare.  Is there any way we can workaround this? Expected behaviour is to get null or an instance of the parameter created with the default constructor.  Thanks.","closed","","gedl","2014-06-23T22:02:21Z","2016-02-02T23:24:32Z"
"","1347","Entities that can't be serialized now return a 500","Jackson is good about serializing types that conform to the Bean spec, but needs help serializing and deserializing types that don't (normally with the use of annotations). Previous behavior would return a 400 (Bad Request) when the server would attempt to return an entity that couldn't be serialized. This is misleading because it gives the illusion that the fault lies with the client instead of the server.","closed","improvement,","nickbabcock","2015-11-20T14:51:06Z","2016-04-19T15:36:30Z"
"","1098","PermissiveEnumDeserializer doesn't support Jackson Enum features","Jackson has two features for Enum handling, `READ_ENUMS_USING_TO_STRING` and `WRITE_ENUMS_USING_TO_STRING`, that indicate that Enums should be de/serialized using the `toString()` value of the Enum, which can be more convenient than adding `@JsonValue` and `@JsonCreator` annotations. These annotations are currently ignored by `PermissiveEnumDeserializer` that's registered by `FuzzyEnumModule`.  I'm a little leery of what that deserializer is doing anyway. I get that it wants to allow different variations of enum constants over the wire, but it seems odd to make it a default. I'd prefer that it be an opt-in feature through an annotation on the Enum type, e.g.:  ``` @FuzzyMatch public enum MyEnum { ... } ```  and the deserializer would only activate for types that had the annotation. If not that, then perhaps an opt-out annotation, to allow the reverse?","closed","","christophercurrie","2015-06-04T16:33:16Z","2015-06-18T18:46:35Z"
"","943","Provide a default view configuration.","It's awkward to demand configuration from apps, even when they don't have any need to override the defaults.","closed","","ojacobson","2015-03-15T18:18:04Z","2015-03-16T21:07:43Z"
"","1070","Migration tests","It's a first attempt to write tests for the `dropwizard-migrations` module. - First of all, this change moves [CloseableLiquibaseTest](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-example/src/test/java/io/dropwizard/migrations/CloseableLiquibaseTest.java) from `dropwizard-example` to `dropwizard-migrations`. It seems to me that it was placed there for mistake.  - It sets the test directory, Logback testing configuration and test dependencies for the module. - It adds a test for the [DbMigrate](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbMigrateCommand.java) command. The following use cases are tested:   - Migration of pending migrations to the DB.   - Dry-run mode (printing the pending change set to the console).   - Migration of limited amount of changes.   - Help page (description of the command and available arguments)","closed","","arteam","2015-05-24T19:13:20Z","2016-01-24T08:05:41Z"
"","938","Change copyright notice to be up-to-date","It would be way better to dynamically work out what year it is, I just don't know how to test build the docs site.  If someone knows, that would be better.  Also, should we remove Yammer from the Copyright? Maybe @ryankennedy would know.","closed","","thesmith","2015-03-12T10:14:55Z","2015-03-17T17:13:48Z"
"","754","Duration should implement Comparable","It would be useful for Duration to implement Comparable. Surely there are many use cases for this in Java. This would also allow expressions such as `durationA > durationB` to be used in Groovy.","closed","","mhurne","2014-10-22T17:13:38Z","2014-10-24T10:04:10Z"
"","1142","Upgrade joda-time to 2.8.1","It seems to be safe to upgrade from 2.7. Pull request https://github.com/dropwizard/dropwizard/pull/1141","closed","","profes","2015-06-29T15:11:51Z","2015-06-29T16:47:07Z"
"","1141","use joda-time 2.8.1","It seems to be safe to upgrade from 2.7 to 2.8.1 See: http://www.joda.org/joda-time/upgradeto281.html http://www.joda.org/joda-time/upgradeto280.html","closed","improvement,","profes","2015-06-29T15:10:48Z","2015-06-30T09:28:03Z"
"","898","Request Logs do not provide valid user field","It seems that the authentication schemes of Jetty and Dropwizard don't communicate enough information for the request logs to include the user field.  The user field would definitely be useful for identifying how much usage was being generated by different api users or identifying which users are still using an older version of the api so they can be targeted for upgrade, etc.  It looks like io.dropwizard.jetty.Slf4jRequestLog extends org.eclipse.jetty.server.AbstractNCSARequestLog which does the actual creation of the message.  In that class we see:  ```             Authentication authentication = request.getAuthentication();             if (authentication instanceof Authentication.User)                 buf.append(((Authentication.User)authentication).getUserIdentity().getUserPrincipal().getName());             else                 buf.append("" - ""); ```  In all of my logs, I only ever see ""-"" for the user, although dropwizard basic authentication seems to be working correctly. I can't find anywhere in the code where it attempts to push the user info back into the Jetty world for logging to work correctly though.  Am I missing something?  Thanks! Andrew","closed","stale,","abuchanan920","2015-02-25T04:05:09Z","2019-09-04T00:01:12Z"
"","604","Dropwizard and Jersey version","It seems that Dropwziard 0.7.0 is still not JAX-RS 2.0 compatible. I wanted to move a JAX-RS 2.0 application into Dropwizard but failed as there is no Response#readEntity() method in Dropwaizard's built in jersey implementation. Is there a way that I can achieve this without rewriting the REST client part of the application?  Thanks","closed","","tongguop","2014-06-01T10:51:24Z","2014-06-14T13:16:00Z"
"","969","Move Jersey test dependencies to the dependency management section","It reduces burden of upgrading dependencies to the correct version and excluding unwanted dependencies in every place.  It also excludes a duplicate dependency on javax.servlet-api 3.0.1","closed","","arteam","2015-04-02T17:03:04Z","2016-01-24T08:05:49Z"
"","660","Upgrade commons-lang to version 3","It might be an oversight because of the new name. `commons-lang:commons-lang:jar:2.6` is really old, the current version is `org.apache.commons:commons-lang3:jar:3.3.2` and usually the upgrade does not impose much work.","closed","","piefel","2014-07-16T08:42:03Z","2014-07-16T09:20:11Z"
"","1153","Make LoggingFactory discoverable.","It looks like [#996](https://github.com/dropwizard/dropwizard/pull/996) omitted these changes - I'm not sure if that was deliberate. I just pulled down 0.9.0-rc1 to play around with adding a custom LoggingFactory and it wouldn't work without these changes.","closed","","dylanscott","2015-07-07T03:05:51Z","2015-07-07T12:59:54Z"
"","1229","Should reset mock DAO in tear down","It doesn't make sense in the docs to setup mock _and_ then reset immediately. It was very confusing for me when I was setting up test","closed","documentation,","wakandan","2015-08-19T15:29:22Z","2015-08-19T15:45:37Z"
"","1087","Add tests for DbStatusCommand","It checks 4 cases: - Database that's up to date with the change set - Database that's diverged with the change set - Verbose output - Help page  This also moves common code between migration command tests into the `AbstractMigrationTest` class.","closed","","arteam","2015-05-31T19:34:46Z","2016-01-24T08:05:44Z"
"","1460","Dropwizard process hanging after exception thrown in Application.run(config, env)","It appears Server/EnvironmentCommand does not shutdown managed executors when an exception is thrown in application.run, thus causing dropwizard applications to hang even though the application has shutdown.  Historically the behavior I expected was for managed objects to be shutdown, even if they had not been started. If this is no longer the expected behavior, my apologies, just close this issue/pr.  Technically this is affecting all managed objects, not just managed executors, but is presenting itself most seriously through executors.  Unit test to demonstrate issue in #1459","closed","","randyp","2016-02-14T22:40:04Z","2016-08-27T23:11:23Z"
"","1459","test case to demonstrate possible failure, was expecting managed obje…","It appears Server/EnvironmentCommand does not shutdown managed executors when an exception is thrown in application.run, thus causing dropwizard applications to hang even though the application has shutdown.  Historically the behavior I expected was for managed objects to be shutdown, even if they had not been started. If this is no longer the expected behavior, my apologies, just close this issue/pr.  Technically this is affecting all managed objects, not just managed executors, but is presenting itself most seriously through executors.  This is just a unit test demonstrating the issue.","closed","","randyp","2016-02-14T22:39:31Z","2016-08-27T23:28:28Z"
"","1433","Hibernate validation not happening for @BeanParam with groups","Issue is [fixed](https://github.com/dropwizard/dropwizard/issues/1227) for validating @BeanParam object but it is not working when validator groups are present.  ``` public class BaseClass {      @NotNull(groups=SignupValidator.class)     @QueryParam(""startDate"")     protected LocalDate startDate;      public LocalDate getStartDate() {         return startDate;     } }  @Path(""path"") public class QuantityResource {      @GET     public ResponseEntity working(@Validated(SignupValidator.class) @BeanParam BaseClass req) {         ...         }  } ```","closed","improvement,","srengasamy","2016-01-28T23:43:25Z","2016-03-16T15:02:53Z"
"","816","Updated documentation to address issue #815.","Issue 815 points out a discrepancy in the documentation where JSON string representations are used to assert equality. This pull request replaces the example to fullfil the promise of the text.","closed","","hawkan","2014-12-19T11:16:18Z","2015-04-01T12:44:03Z"
"","1273","Support for Jetty 9.3.x or HTTP 2","Is there any specific issue why Jetty 9.3.x is not yet supported and with that HTTP 2 ?  The only reasion why this might be an issue is that the miniamal java version would be 8.  But since Java 7 has ended public updates(https://www.java.com/en/download/faq/java_7.xml) I don't really see the point it this.  Unless there is some parallel work on the same topic I could try and migrate both and make PR.","closed","","mitemitreski","2015-10-01T13:55:32Z","2015-10-01T14:01:08Z"
"","593","Protecting admin with BASIC_AUTH","Is there a way to protect admin with BASIC_AUTH with DW 0.7. If not what should be the best way of doing it? By writing own:  ``` environment.admin().setSecurityHandler(...) ```  or  ``` environment.admin().addFilter(...) ```","closed","","kagrela","2014-05-23T09:59:53Z","2014-07-11T08:42:58Z"
"","879","Ping returns pong and line feed","Is there a reason for ping returning the text pong and an line feed.  When building test that uses the response it is easier to just write ""pong"".equalTo(response) then response.startsWith(""pong"") and adding null-check and other.  The PingServlet is currently implemented as writer.println(CONTENT); instead of writer.print(CONTENT);","closed","","vilhelmpersson","2015-02-16T18:51:41Z","2015-02-20T11:15:13Z"
"","719","0.8.0 in maven?","Is 0.8.0 ready to be published to maven? /cc @mveitas","closed","","aaylward","2014-09-30T15:05:24Z","2014-09-30T15:49:12Z"
"","830","add function to retrieve className from task and test. fixes #829","instead of task.getClass().getCanonicalName(), task.getClass().getName is used for anonymous implementations of task.","closed","","jangalinski","2015-01-01T19:03:52Z","2015-01-03T13:45:41Z"
"","822","Simplify support for Guava Optional in dropwizard-jersey","Instead of multiple providers for each type of JAX-RS parameter (e. g. @QueryParam or @HeaderParam) we now have a single ParamConverterProvider.  Refs jersey/jersey#98, [JERSEY-2612](https://java.net/jira/browse/JERSEY-2612)","closed","improvement,","joschi","2014-12-28T17:36:37Z","2015-01-05T15:26:02Z"
"","1178","Improve View Template Error Message","Instead of hiding behind a sometimes deceptive error message saying that the template file was not found, ~~propagate the error message in an HTML safe way~~ return a generic error message with the actual error going to the log file. This makes the behavior more in line with validation errors (though this doesn't deal with validation errors, itself)  Closes #1077","closed","improvement,","nickbabcock","2015-07-21T18:29:32Z","2015-09-01T07:41:18Z"
"","609","Protocol Buffer support","Initial work on adding a jersey provider for Protocol Buffers.  @skamille, this is what we were discussing in https://github.com/GeneralElectric/snowizard/issues/7.  I don't think we can automatically register this provider if the module is included, so I'll be sure to include information in the docs on how that is done.  Same with the `InvalidProtocolBufferException` mapper.  I wanted to just submit this for now to get feedback on if this is the correct approach.  Remaining work: - [ ] documentation","closed","","jplock","2014-06-08T13:47:25Z","2014-10-23T23:44:14Z"
"","872","Include all metric sets from metric-jvm","Include all the metrics sets from metrics-jvm-3.1.0","closed","improvement,","mattnelson","2015-01-30T21:04:41Z","2015-02-07T08:49:59Z"
"","1168","Using @UnitOfWork with @Suspended leads to Hibernate Session leaks","In working with JAX-RS asynchronous responses and Hibernate, I've discovered an issue in how io.dropwizard.hibernate.UnitOfWork closes and de-registers Session instances.  To reproduce this issue, I've created [a small proof-of-bug project](https://github.com/ryankennedy/buggy-unitofwork). Start the Dropwizard service and execute the following in a terminal:  `curl -XPOST -d sleep=60000 http://localhost:8080/sessions`  In another terminal, repeatedly execute the following:  `curl http://localhost:8080/sessions/current`  until you see something other than `No session bound to thread`. You're looking for something like this:  `SessionImpl(PersistenceContext[entityKeys=[],collectionKeys=[]];ActionQueue[insertions=org.hibernate.engine.spi.ExecutableList@18a38141 updates=org.hibernate.engine.spi.ExecutableList@690a9353 deletions=org.hibernate.engine.spi.ExecutableList@1600330d orphanRemovals=org.hibernate.engine.spi.ExecutableList@3968dd7c collectionCreations=org.hibernate.engine.spi.ExecutableList@3dc5fa99 collectionRemovals=org.hibernate.engine.spi.ExecutableList@e86679 collectionUpdates=org.hibernate.engine.spi.ExecutableList@1767b532 collectionQueuedOps=org.hibernate.engine.spi.ExecutableList@689b199f unresolvedInsertDependencies=UnresolvedEntityInsertActions[]])`  or this:  `SessionImpl()`  Here's what's happening: 1. The `POST /sessions` request is to a UnitOfWork annotated resource that has a Suspended AsyncResponse parameter (it's a JAX-RS asynchronous resource). 2. UnitOfWorkApplicationListener intercepts the call (it catches the RESOURCE_METHOD_START event), creates a new Hibernate Session, and registers it with ManagedSessionContext, which puts the Session into a ThreadLocal Map for later retrieval. 3. UnitOfWorkApplicationListener dispatches to the resource method, SessionGrabbingResource.grabSession(). 4. grabSession() (inappropriately named since it already has a Session by virtue of the UnitOfWork annotation) constructs a CompletableFuture, which is supplied by a lambda that sleeps for 60 seconds (see the `sleep` POST parameter in the request), and chains calls to AsyncResponse.resume() when that completes. 5. grabSession() returns, even though the sleep isn't finished. 6. The Jetty pool is returned to the free pool while ForkJoinPool.commonPool() is left to execute the CompletableFuture. That Thread from the ForkJoinPool will now block for 60 seconds. 7. The `GET /sessions/current` request is to a non-UnitOfWork annotated resource (SessionDebugResource.getCurrentSession()) that has a String return value. 8. The GET request is dispatched to one of two waiting Jetty threads. When executed repeatedly, anytime the Jetty thread used by the earlier POST request is utilized to dispatch the GET, SessionDebugResource will find the Session previously allocated to the earlier POST request (because it hasn't been detached from the Jetty Thread). 9. The GET request responds with `SessionImpl(PersistenceContext[entityKeys=[],collectionKeys=[]];ActionQueue[insertions=org.hibernate.engine.spi.ExecutableList@18a38141 updates=org.hibernate.engine.spi.ExecutableList@690a9353 deletions=org.hibernate.engine.spi.ExecutableList@1600330d orphanRemovals=org.hibernate.engine.spi.ExecutableList@3968dd7c collectionCreations=org.hibernate.engine.spi.ExecutableList@3dc5fa99 collectionRemovals=org.hibernate.engine.spi.ExecutableList@e86679 collectionUpdates=org.hibernate.engine.spi.ExecutableList@1767b532 collectionQueuedOps=org.hibernate.engine.spi.ExecutableList@689b199f unresolvedInsertDependencies=UnresolvedEntityInsertActions[]])`, the result of Session.toString() on whatever Session is currently bound to the Thread. 10. Eventually the CompletableFuture finishes sleeping and returns the String and AsyncResponse.resume() is invoked. 11. UnitOfWorkApplicationListener catches the RESP_FILTERS_START event, commits any open transactions, closes the session, and unbinds the Session from whatever the current thread is. Hint, it's not the Jetty thread that it was bound to previously. 12. The POST request completes and the response is returned to the user. 13. Subsequent calls to `GET /sessions/current` are still able to see the bound Session, it's simply closed. `SessionImpl()`  In the worst case, this can lead to Session tainting as Sessions opened in one request are made accessible to another request. In all cases, closed Session objects are being leaked by virtue of being ""stuck"" to the side of an increasing number of Jetty threads over time.  I don't believe this is exploitable outside of the application. Internally, however, it may lead to strange behavior as well as some amount of resource overhead due to the object leak.","closed","bug,","ryankennedy","2015-07-13T21:47:48Z","2016-03-30T14:17:49Z"
"","678","JerseyClientBuilder may not be checking properly preconditions on ""build"" method","In the JerseyClientBuilder class 'build' method there's this code:  ``` if ((environment == null) && (executorService == null) && (objectMapper == null)) {     throw new IllegalStateException(""Must have either an environment or both "" +                             ""an executor service and an object mapper""); } ```  Based on the exception message the condition seems to be wrong. My understanding is that it should be like this:  ``` (environment == null) || ((executorService == null) && (objectMapper == null)) ```","closed","","xabierlaiseca","2014-08-08T14:42:12Z","2014-08-08T18:58:12Z"
"","1074","Saying class in the tutorial should be moved to the api package","In the Getting Started guide, the ""Saying"" representation is placed in the core package: http://www.dropwizard.io/getting-started.html#creating-a-representation-class  However in the Organizing your project section in the manual it states representations should be placed in the api package http://www.dropwizard.io/manual/core.html#organizing-your-project  I believe Saying should be moved to the api package in the example solution for consistency.  I'm going to start making the necessary changes and submit a pull request, but open to input as to whether this is the correct approach","closed","","mcgin","2015-05-25T13:36:33Z","2015-05-25T20:29:06Z"
"","815","When testing JSON serialization, whitespace is not ignored","In the [Testing Docs](https://dropwizard.github.io/dropwizard/manual/testing.html#man-testing-representations-serialization), there is a note: _The comparison is done via a normalized JSON string representation, so whitespace doesn’t affect the results._  However, when testing serialization, I get a Comparison Failure: `org.junit.ComparisonFailure:  ...     at com.example.core.user.SubscriberTest.serializesToJSON(SubscriberTest.java:64)` ## Test Code  ``` @Test public void serializesToJSON() throws Exception {      assertThat(MAPPER.writeValueAsString(user))             .isEqualTo(fixture(""fixtures/Subscriber.json"")); } ``` ## Subscriber.json  ``` {   ""email"": ""test@example.com"",   ""password"": ""1234567890"",   ""displayName"": ""Test User"",   ""role"": ""SUBSCRIBER"",   ""added"": 1400429532000000,   ""modified"": 1400429532000000,   ""id"": 1,   ""emailConfirmed"": true,   ""active"": true } ``` ## Differences  I used IDEA to check the differences ### Whitespaced not ignored  When I set IDEA to not ignore whitespace, it shows that there is a difference:  ![Imgur](http://i.imgur.com/F90rIzi.png) ### Whitespace ignored  When I set IDEA to ignore all whitespace, it shows that there is no difference:  ![Imgur](http://i.imgur.com/aJvrjIF.png)","closed","","MarkyC","2014-12-16T18:07:36Z","2015-04-17T14:13:06Z"
"","1061","Manage Apache HTTP and Jersey HTTP clients","In the [documentation](http://www.dropwizard.io/manual/client.html#apache-httpclient) we say that we create managed instances of Apache HTTP client. But in the fact, it's not true.   To follow this contract, we should tie the lifecyle of the client to the lifecycle of the server, if the user specified the environment in the builder. The rationale is the same for Jersey HTTP client.  If the user has already created own managed object for the client  - it's not an issue, because the close method of the HTTP client is idempotent.","closed","","arteam","2015-05-20T21:20:21Z","2016-01-24T08:05:35Z"
"","1276","Add support for several Hibernate bundles","In some cases one need to simultaneously connect to several relational databases. Users want to use Hibernate to access each database. The problem that the current implementation of `UnitOfWorkApplicationListener` supports only one session factory, which ultimately restricts ability to support several session factories.  Another problem is that users should have the ability to specify the name of datasource, against which a transaction should be opened in a resource method.  This change: - Adds the method `value` to the `@UnitOfWork` annotation. It allows to specify the name of Hibernate bundle (session factory). By default it specifies the default bundle. - Replaces the single session factory in `UnitOfWorkApplicationListener` to a map of session factories by names of bundles. - The correct session factory is determined in runtime, based on the `value` method in the corresponding `@UnitOfWork` annotation.  In the result users can simultaneously use declarative transactions on several databases, access to which is managed by Hibernate.  Fixes #1217","closed","","arteam","2015-10-10T13:31:20Z","2021-08-10T13:19:59Z"
"","1062","Use configuration class from Application object","In some case, configuration class retrieved by MigrationsBundle is invalid (in my case, when MigrationsBundle is constructed from an abstract Application class where configuration is still a Generic Type).  This fix the issue by retrieving the configuration class from Application object.","closed","","Toilal","2015-05-21T06:04:58Z","2015-05-21T07:09:16Z"
"","1430","Added naming to migration bundles","In similar lines to HibernateBundles, having the possibility of unique names. This PR attempts to do the same for MigrationBundles, so that multiple migration bundles can be provided for.","closed","improvement,","souravmitra","2016-01-26T12:39:19Z","2016-01-28T13:37:02Z"
"","854","Configure Jersey client thread pool with a bounded queue","In relation to #834   Jersey's async thread pool is configured with 2 parameters: _minThreads_ and _maxThreads_.  The problem is that the pool will not grow up than _minThread_ because its work queue is  unbounded. It's a property of JDK _ThreadPoolExecutor_.  A solution to this problem is to set a bounded queue as the work queue and provide facility  to users to set the queue size.  By default queue size is set to 8. It's a middle ground between creating too many threads  and waiting too much time in the queue without spawning new threads.","closed","","arteam","2015-01-18T19:31:54Z","2016-01-24T08:05:17Z"
"","687","document that dropwizard-metrics-graphite should be added as a pom dependency","In reading https://dropwizard.github.io/dropwizard/manual/configuration.html#graphite-reporter there' no mention that in order to get metrics into graphite, you need to add dropwizard-metrics-graphite as a dependency in your pom.  I eventually figured it out and mentioned it in #dropwizard-user, joschi asked me to make a new issue here.","closed","documentation,","jconnolly","2014-08-18T19:59:51Z","2014-10-05T15:28:49Z"
"","1432","ClassCastException using @Valid on getter with Optional field","In our project, we have the situation that we internally store values in (Java8) `Optional` types in order to make it easier, to pick one over the other in case one is not set. Validation using `@Valid` fails though.  We are currently using DW `0.9.2`.  Our solution for now is to not use Optional in this case. Then, everything works as expected.  Here is an example:  ``` java class Record {   private Optional field;   private Optional alternativeForField;    @NotNull   @Valid   public String getField(){     return field.orElse(alternativeForField.orElse(null));   } } ```  Here is the stack trace:  ``` Stacktrace was: java.lang.ClassCastException: java.lang.String cannot be cast to java.util.Optional     at org.hibernate.validator.internal.engine.valuehandling.OptionalValueUnwrapper.handleValidatedValue(OptionalValueUnwrapper.java:20)     at org.hibernate.validator.internal.engine.ValidatorImpl.getValue(ValidatorImpl.java:1609)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:622)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:415)     at org.hibernate.validator.internal.engine.ValidatorImpl.validate(ValidatorImpl.java:204)  ```","closed","","scho","2016-01-28T13:25:10Z","2016-11-14T10:57:53Z"
"","579","Discrepancy in defaults for MetricsFactory vs. BaseReporterFactory","In our first DW 0.7 application, we were bitten during development by a discrepancy in the defaults for MetricsFactory vs. BaseReporterFactory. I had assumed that specifying a frequency (of 1m - the default) on the MetricsFactory would affect all reporters w/ no frequencies specified.  However, the BaseReporterFactory specifies a default of 1s frequency.  MetricsFactory: https://github.com/dropwizard/dropwizard/blob/master/dropwizard-metrics/src/main/java/io/dropwizard/metrics/MetricsFactory.java#L44 BaseReporterFactory: https://github.com/dropwizard/dropwizard/blob/master/dropwizard-metrics/src/main/java/io/dropwizard/metrics/BaseReporterFactory.java#L72  Is there a reason for the difference in the defaults? Would it be possible to not specify a default value (use Optional.absent()) on the BaseReporterFactory, thus using one default for all metrics unless overridden?","closed","","pkwarren","2014-05-14T22:11:08Z","2014-05-28T14:28:52Z"
"","1457","Recreating a Http Client throws IllegalArgumentException: A metric named * already exists","In our application, we re-create the http client using the `JerseyClientBuilder` from time to time because it's configured with Basic Authentication credentials, which may change over time.  Doing so after the first time throws a `IllegalArgumentException` though:  ``` java.lang.IllegalArgumentException: A metric named org.apache.http.conn.HttpClientConnectionManager.my.package.available-connections already exists ```  Is their a way to prevent this from happening?","closed","","scho","2016-02-12T15:00:03Z","2016-02-25T20:06:07Z"
"","694","Replaced JSON parsing error with a simple one","In order to not give unnecessary information to a potential attacker. Issue #691.","closed","improvement,","meshuamam","2014-08-27T17:50:19Z","2014-09-23T22:31:05Z"
"","1288","doc fix - set method is also required","In order to create a new configuration class you need to provide also a setter for HttpClientConfiguration","closed","documentation,","vitorreis","2015-10-20T09:50:42Z","2015-10-20T12:15:54Z"
"","1064","[Documentation] Specify boolean false parameter in EnvironmentVariableSubstitutor constructor","In order for the app startup not to fail if an env var defined in the yaml config file cannot be found I had to add a boolean false parameter to the EnvironmentVariableSubstitutor constructor","closed","","jnwelzel","2015-05-22T20:08:14Z","2015-05-25T11:54:31Z"
"","1192","WebApplicationException should be formatted","In my eyes, the result of thrown `WebApplicationException` should be formatted like other unhandled bubbled exceptions, in `LoggingExceptionMapper`. Currently they are just passed through:  ``` java         if (exception instanceof WebApplicationException) {             return ((WebApplicationException) exception).getResponse();         } ```  Any `WebApplicationException` which was thrown with a response entity set (eg. through `throw new WebApplicationException(Response.status(..).entity(...)...)`) will _not_ be passed to any `ExceptionMapper`: it's just processed in the way the thrower intended.  However, this leaves `WebApplicationExceptions` which were thrown with a message, but without any entity (eg. `throw new WebApplicationException(""not found"", 404)`). These end up in `LoggingExceptionMapper`, in the code branch shown above.  The problem is that even though a message was specified, the returned `Response` does not have any entity data. That means the error will end up in Jetty, which will just produce a generic HTML page for the associated HTTP status code, without the message.  It would be nicer to format these exceptions in the same other unhandled exceptions are formatted (like `{""code"": 404, ""message"": ""not found""}`).  Even if someone throws `WebApplicationException` with some specific format (eg. a `text/plain` entity), it will not be re-formatted, because these are not passed to the `ExceptionMapper`. And finally, if someone wants a different for _all_ `WebApplicationExceptions`, they can just implement their own `ExceptionMapper` because the mappers are chosen by most specific first.","closed","bug,","vzx","2015-07-27T15:34:07Z","2015-09-01T07:40:58Z"
"","801","Exception thrown by a view template doesn't get picked up by ExceptionMapper","In my Dropwizard app I am using Freemarker templates through the ViewBundle. I've defined a set of ExceptionMappers to provide a nice-ish page whenever an Exception is thrown.  However, I've noticed that if there's a template error (for instance, a <#broken /> somewhere), an Exception is thrown, but it doesn't get handled by any of the defined ExceptionMappers. The page being display is the default Jetty error (HTTP ERROR 500).  I was wondering if this is by design, or perhaps I am misconfiguring something?  Thanks!","closed","","phss","2014-12-01T22:49:06Z","2015-03-19T18:09:10Z"
"","1078","Add option to disable collecting counter metrics for paths ending in forward slash","In most (possibly all) REST applications, the following two URL's hit the same endpoint: `http://localhost:8080/myapp/v1/persons` and `http://localhost:8080/myapp/v1/persons/`. However, the counter metrics generated for the two are distinct `counter.status.200.v1.persons.count` and `counter.status.200.v1.persons.root.count`. There should be a way to prevent the `.root.count` metric from being created. I'm using the GraphiteReporter in my app.","closed","","peterdmello","2015-05-26T19:49:58Z","2016-01-17T15:02:34Z"
"","606","Support for simple http port/scheme redirection","In Jetty, you could easily do this by assigning a secure port and secure scheme and editing web.xml to use a confidential connection. From what I can tell, doing this in Dropwizard involves a fair bit of manual configuration of Filters and seems hacky.  This can be changed fairly succinctly by hooking into the internal Jetty at the right places.","closed","","Cannoliopsida","2014-06-04T15:13:17Z","2014-10-05T16:21:29Z"
"","557","JerseyClientBuilder ignores most configuration settings","In io.dropwizard.client.JerseyClientBuilder, the ""buildHandler"" method ignores most settings that can be passed in from a ClientConfig (including but not limited to proxy settings), which makes those settings unusable in DropWizard.  I dug into the ApacheHttpClient4 source and found where they actually create the client handler object.  They do a bunch of logic based on various things in that ClientConfig to get the client set up properly that Dropwizard's JerseyClientBuilder does not - DW's version ignored most of that stuff.  I've got a new version of JerseyClientBuilder that includes that code.  This configures the client properly and allows the use of those features without (apparently) breaking anything else.  Pull request forthcoming; I'd appreciate comments on whether or not my fix looks like it might cause other problems or if I've missed something about how this was intended to work.","closed","","Zoroaster668","2014-05-01T15:05:20Z","2015-03-09T19:50:46Z"
"","855","Multiple HibernateBundles in the same application registers healthcheck and metrics twice with ""hibernate""","In https://github.com/dropwizard/dropwizard/blob/master/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/SessionFactoryFactory.java the line: `final ManagedDataSource dataSource = dbConfig.build(environment.metrics(), ""hibernate"");`  causes issues for us because we use several different session factories for different databases. This causes invalid metrics in the old 0.7.0 dropwizard and in 0.8.0\* dropwizard doesn't start because it discovers that the metric is registered twice.  One solution would be to support a configuration in DataSourceFactory which would default to hibernate to not break legacy code that depends on this metric.","closed","bug,","jontejj","2015-01-20T09:50:58Z","2015-02-22T00:48:39Z"
"","912","make metrics fail harder?","In DW 0.8 RC2 and 5.  My config looked like:  ``` metrics:   reporters:     - type: graphite       host: {{graphite_host}}       port: {{graphite_port}}       prefix: {{graphite_prefix}}. ```  And nothing happened. Saw no log or warning or metrics.  I changed my config to include  ``` frequency: 60 seconds ```  And everything started working.  Not totally sure why..   If frequency IS required, it should be added to the Graphite Reporter part of the docs. I see it listed as defaulting to 1 second, but I did not experience this.   If it is not required, then maybe something is amiss?    In either case, would love some info level debugging on what the frequency for metrics is set to, and maybe a warn if I have a metric that will never run for whatever reason,.","closed","","brianwawok","2015-03-03T19:14:06Z","2016-05-19T17:50:39Z"
"","647","Make it possible to override Jetty ErrorHandler","In DW 0.6 there was `com.yammer.dropwizard.jetty.UnbrandedErrorHandler`. In DW 0.7, `AbstractServerFactory#buildServer` creates an instance of `org.eclipse.jetty.server.handler.ErrorHandler` directly, and configures it into the locally scoped `Server` instance. This `Server` instance gets passed back to `DefaultServerFactory#build`, and then back to `ServerCommand#run`, where it ends its scope.  Previously, overriding the behaviour of `ErrorHandler` was as simple as just declaring another `UnbrandedErrorHandler` class in the right package and making sure it was earlier in the class path than the DW supplied version. Unconventional, untidy, but simple.  Now, it appears that the only sensible way to override this would be by creating a custom `ServerFactory` and then override/reimplement some code from `AbstractServerFactory`.  Would it not be far simpler to allow `AbstractServerFactory` to either: - provide a template method, returning an instance of `ErrorHandler`, to allow simpler overriding of this very important feature (i.e.: design `AbstractServerFactory` for subclassing) - be provided with a class name, in configuration, of the `ErrorHandler` to use (IoC/DI)  Overriding the various error mechanisms DW has to deal with (Jetty `ErrorHandler`, Jersey `ExceptionMapper`) has come up a number of times","closed","needs code,","ptomli","2014-07-09T09:11:15Z","2015-06-05T09:49:20Z"
"","821","LoggingFilter output is gzip-encoded in 0.8.0-rc1, change from 0.7.1 behavior","In DropWizard 0.7.1, I used LoggingFilter with gzip enabled (default).  ```     environment.jersey().property(ResourceConfig.PROPERTY_CONTAINER_REQUEST_FILTERS, new String[]{LoggingFilter.class.getName(), PMSRequestFilter.class.getName()});     environment.jersey().property(ResourceConfig.PROPERTY_CONTAINER_RESPONSE_FILTERS, LoggingFilter.class.getName()); ```  In DropWizard 0.8.0-rc1, I configured the same as:  ```     environment.jersey().register(new LoggingFilter(Logger.getLogger(LoggingFilter.class.getName()), true)); ```  In Jersey 1.x, LoggingFilter logged the request and response entities by default. In Jersey 2, this is configured by with the ""true"" param.  Whereas with 0.7.1 the entities outputted by LoggingFilter were in plain text, in 0.8.0-rc1 they are GZIP-encoded. I have not modified gzip-related configurations from their defaults defaults or added any additional gzip filters when using either DW 0.7 or 0.8.","closed","","clamothe","2014-12-28T09:47:50Z","2015-01-11T12:00:24Z"
"","745","Expose a way to get http port in run()","In dropwizard 0.6 you could get the http port from the configuration in the run() method with `configuration.getHttpConfiguration().getPort()`. In 0.7.x this isn't accessible.  We tried using jetty's connectors, but it hasn't started yet in run(), so we can't use that. Are there any other ways of getting the port?","closed","","henrikno","2014-10-17T09:49:13Z","2018-09-20T20:06:12Z"
"","577","Unable to start application with no resources","In Dropwizard 0.6 it was possible to start a service with no resources configured. While uncommon, we do have a couple Dropwizard services in this situation.  In 0.7 this seems to no longer work, causing a ServletException which causes the ServerCommand to bail out. I assume this is a change in behaviour from Jersey.  ```     ERROR [2014-05-12 20:35:59,855] io.dropwizard.cli.ServerCommand: Unable to start server, shutting down     ! com.sun.jersey.api.container.ContainerException: The ResourceConfig instance does not contain any root resource classes.     ! at com.sun.jersey.server.impl.application.RootResourceUriRules.(RootResourceUriRules.java:99) ~[jersey-server-1.18.1.jar:1.18.1]     ! at com.sun.jersey.server.impl.application.WebApplicationImpl._initiate(WebApplicationImpl.java:1359) ~[jersey-server-1.18.1.jar:1.18.1]     ! at com.sun.jersey.server.impl.application.WebApplicationImpl.access$700(WebApplicationImpl.java:180) ~[jersey-server-1.18.1.jar:1.18.1]     ! at com.sun.jersey.server.impl.application.WebApplicationImpl$13.f(WebApplicationImpl.java:799) ~[jersey-server-1.18.1.jar:1.18.1]     ! at com.sun.jersey.server.impl.application.WebApplicationImpl$13.f(WebApplicationImpl.java:795) ~[jersey-server-1.18.1.jar:1.18.1]     ! at com.sun.jersey.spi.inject.Errors.processWithErrors(Errors.java:193) ~[jersey-core-1.18.1.jar:1.18.1]     ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:795) ~[jersey-server-1.18.1.jar:1.18.1]     ! at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:790) ~[jersey-server-1.18.1.jar:1.18.1]     ! at com.sun.jersey.spi.container.servlet.ServletContainer.initiate(ServletContainer.java:491) ~[jersey-servlet-1.18.1.jar:1.18.1]     ! at com.sun.jersey.spi.container.servlet.ServletContainer$InternalWebComponent.initiate(ServletContainer.java:321) ~[jersey-servlet-1.18.1.jar:1.18.1]     ! at com.sun.jersey.spi.container.servlet.WebComponent.load(WebComponent.java:605) ~[jersey-servlet-1.18.1.jar:1.18.1]     ! at com.sun.jersey.spi.container.servlet.WebComponent.init(WebComponent.java:207) ~[jersey-servlet-1.18.1.jar:1.18.1]     ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:376) ~[jersey-servlet-1.18.1.jar:1.18.1]     ! at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:559) ~[jersey-servlet-1.18.1.jar:1.18.1]     ! at javax.servlet.GenericServlet.init(GenericServlet.java:244) ~[javax.servlet-3.0.0.v201112011016.jar:na]     ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:540) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107]     ! ... 41 common frames omitted     ! Causing: javax.servlet.ServletException: com.sun.jersey.spi.container.servlet.ServletContainer-177ed108@1c912cb3==com.sun.jersey.spi.container.servlet.ServletContainer,1,false     ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:561) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:349) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:812) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:288) ~[jetty-servlet-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:732) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:89) ~[metrics-jetty9-3.0.1.jar:3.0.1]     ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.server.handler.RequestLogHandler.doStart(RequestLogHandler.java:131) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:233) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:118) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.server.Server.start(Server.java:342) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:100) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:60) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.server.Server.doStart(Server.java:290) ~[jetty-server-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69) ~[jetty-util-9.0.7.v20131107.jar:9.0.7.v20131107]     ! at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:43) ~[dropwizard-core-0.7.0.jar:0.7.0]     ! at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:43) [dropwizard-core-0.7.0.jar:0.7.0]     ! at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:76) [dropwizard-core-0.7.0.jar:0.7.0]     ! at io.dropwizard.cli.Cli.run(Cli.java:70) [dropwizard-core-0.7.0.jar:0.7.0]     ! at io.dropwizard.Application.run(Application.java:72) [dropwizard-core-0.7.0.jar:0.7.0]     ! at com.jamierf.test.TestApplication.main(TestApplication.java:19) [classes/:na] ```","closed","","reines","2014-05-12T20:42:24Z","2017-02-20T16:56:50Z"
"","664","Return JSON errors when parameter validation fails.","In common with other errors, parameter validation errors should be in JSON format (currently they are in plain text).","closed","improvement,","matt-thomson","2014-07-24T10:23:28Z","2014-07-24T11:15:53Z"
"","1173","logback's maxFileSize in combination with archivedFileCount not working as expected","In commit 343680b8036a3d1bcb9432ca9b4d02b747c215a9 I've noticed that the `archivedFileCount` parameter in the YML configuration file is not working as expected.  The name suggests that older archives will be deleted once the `archivedFileCount` threshold has been reached. The `archivedFileCount` parameter is mapped to the [setMaxHistory](https://github.com/dropwizard/dropwizard/blob/343680b8036a3d1bcb9432ca9b4d02b747c215a9/dropwizard-logging/src/main/java/io/dropwizard/logging/FileAppenderFactory.java#L227) of the rolling policy.  Reading through Logback's documentation on [SizeAndTimeBasedFNATP](http://logback.qos.ch/manual/appenders.html#SizeAndTimeBasedFNATP) it states that:   _Size and time based archiving supports deletion of old archive files. You need to specify the number of periods to preserve with the maxHistory property._  If you follow the `archivedFileCount` parameter you'll see that it is used by Logback as a way of specifying how many days log archives are allowed to be kept.  See [DefaultArchiveRemover](https://github.com/qos-ch/logback/blob/master/logback-core/src/main/java/ch/qos/logback/core/rolling/helper/DefaultArchiveRemover.java#L135) and [SizeAndTimeBasedArchiveRemover](https://github.com/qos-ch/logback/blob/master/logback-core/src/main/java/ch/qos/logback/core/rolling/helper/SizeAndTimeBasedArchiveRemover.java#L26)  I am happy to provide a pull request once I know how you want this to be fixed.  Cheers","closed","needs code,","ToastShaman","2015-07-16T12:13:27Z","2016-08-04T02:13:36Z"
"","948","Use same ObjectMapper for client and server in ResourceTestRule","In `ResourceTestRule` configure the client in `JerseyTest` to use the same provided `ObjectMapper` as the server to prevent serialization/deserialization issues.  See https://github.com/dropwizard/dropwizard-java8/issues/8 for details.","closed","","froden","2015-03-18T21:10:12Z","2015-04-01T01:38:04Z"
"","1492","Internal usages of Optional in 1.0.0?","In 1.0.0, should we settle on using `java.util.Optional` instead of Guava Optional for consistency?  Ex: - https://github.com/dropwizard/dropwizard/blob/master/dropwizard-jersey/src/main/java/io/dropwizard/jersey/sessions/Flash.java#L22 - https://github.com/dropwizard/dropwizard/blob/master/dropwizard-example/src/main/java/com/example/helloworld/core/Template.java#L17 - https://github.com/dropwizard/dropwizard/blob/master/dropwizard-util/src/main/java/io/dropwizard/util/JarLocation.java#L19 - https://github.com/dropwizard/dropwizard/blob/master/dropwizard-views/src/main/java/io/dropwizard/views/View.java#L51 - https://github.com/dropwizard/dropwizard/blob/master/dropwizard-db/src/main/java/io/dropwizard/db/PooledDataSourceFactory.java#L35 - https://github.com/dropwizard/dropwizard/blob/master/dropwizard-example/src/main/java/com/example/helloworld/resources/PersonResource.java#L50  etc.?  My vote would be to standardize on Java8's `Optional` but there may be some backward compatibility breaks if we do this.","closed","improvement,","jplock","2016-03-24T19:23:52Z","2016-03-25T12:24:35Z"
"","1428","NPE when trying to validate metrics configuration","In 0.9.1 trying to load up the configuration  ``` metrics:   reporters:     - type: log ```  I get  ``` Exception in thread ""main"" java.lang.NullPointerException     at io.dropwizard.validation.valuehandling.OptionalValidatedValueUnwrapper.getValidatedValueType(OptionalValidatedValueUnwrapper.java:27)     at org.hibernate.validator.internal.engine.ValueContext.getTypeOfAnnotatedElement(ValueContext.java:192)     at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:125)     at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:91)     at org.hibernate.validator.internal.metadata.core.MetaConstraint.validateConstraint(MetaConstraint.java:83)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraint(ValidatorImpl.java:547)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForDefaultGroup(ValidatorImpl.java:487)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForCurrentGroup(ValidatorImpl.java:451)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:403)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraint(ValidatorImpl.java:723)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:617)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:412)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraint(ValidatorImpl.java:723)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:601)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:412)     at org.hibernate.validator.internal.engine.ValidatorImpl.validate(ValidatorImpl.java:206)     at io.dropwizard.configuration.ConfigurationFactory.validate(ConfigurationFactory.java:257)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:149)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:95)     at io.dropwizard.cli.ConfiguredCommand.parseConfiguration(ConfiguredCommand.java:115)     at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:64)     at io.dropwizard.cli.Cli.run(Cli.java:70)     at io.dropwizard.Application.run(Application.java:80)     at com.redcurrent.server.ServerApplication.main(ServerApplication.java:52) ```  Maybe fallout from #1308?","closed","","devinrsmith","2016-01-25T18:28:15Z","2016-03-04T18:35:49Z"
"","573","Maven enforcer should ensure correct logging dependencies","In #571 unwanted dependencies were being pulled in transitively, in particular ones related to logging. The enforcer plugin can help with this - using it on our project was actually what picked up the issue in the first place.   I've got a PR coming for this.","closed","","mikeycmccarthy","2014-05-12T16:55:40Z","2014-05-13T11:40:01Z"
"","1515","Feature/improve command reuse and inheritability","Improving command reuse by: - making `EnvironmentCommand`s  `run` non final, so that inheritors can use the configured bootstrap (instead of having to cast the wildcard bootstrap) - adding a way to configure the file argument further (like adding a default) - and adding a protected constructor to the server command to call it differently  Currently at work we end up copying the guts of `ServerCommand` into a new command so that we can override the argument names.","closed","improvement,","jakeswenson","2016-04-10T14:09:33Z","2016-04-13T06:43:16Z"
"","617","Updating httpclient to 4.3.4","Improved performance under high concurrency.  > This version replaces dynamic proxies with custom proxy classes and eliminates thread contention in java.reflect.Proxy.newInstance() when leasing connections from the connection pool and processing response messages.  http://hc.apache.org/news.html","closed","","reines","2014-06-13T20:50:44Z","2014-06-13T21:34:59Z"
"","662","AssetsBundle stops working if you cann setContextPath()","If you register AssetsBundle in your app  ``` java     public void initialize(Bootstrap bootstrap) {         //serve some HTML resources         bootstrap.addBundle(new AssetsBundle());     } ```  It only works with the DefaultServer if you do not call setContextPath. Once you do that:  ``` java     public void run(MyAppConfiguration configuration, Environment environment) throws Exception {          //set context paths         environment.getApplicationContext().setContextPath(""/myapp""); ```  you get a 404 on all the assets.","closed","","jacek99","2014-07-21T16:12:08Z","2014-08-08T12:16:14Z"
"","559","BiDiGzipFilter decompresses but leaves Content-Encoding header.","If there are any Filters/Servlets further downstream (e.g. JGit's UploadPackServlet) they'll try to decompress the input an another time because the Content-Encoding header says so.","closed","bug,","rkapsi","2014-05-02T15:35:01Z","2014-07-06T18:32:26Z"
"","1104","Respect deserialization of enums using toString()","If Jackson if configured with _READ_ENUMS_USING_TO_STRING_ feature, `PermissiveEnumDeserializer` should respect it and let Jackson to correctly deserialize an enum using its `toString` method.  Fix #1098","closed","","arteam","2015-06-06T06:08:04Z","2016-01-24T08:06:23Z"
"","711","MetricFilter's matches returns true if Includes are specified and Excludes are not","If Includes are not empty and excludes are empty, this should be the includes-only case that  no metrics should be reported, except those with a name listed in includes.  But !getExcludes().contains(name) would always return true which ends up reporting all the metrics.","closed","","qinfchen","2014-09-23T20:25:11Z","2015-02-21T19:38:38Z"
"","1357","Command help printer incorrectly reports errors","If I add a command that has required arguments, the ""-h"" option doesn't suppress error messages. E.g., add this command:  ``` java public class MyCommand extends Command {     public MyCommand() {         super(""test"", ""Do a test"");     }           @Override     public void configure(Subparser subparser)     {         subparser.addArgument(""types"").choices(""a"", ""b"", ""c"").help(""Type to use"");     }      @Override     public void run(Bootstrap bootstrap, Namespace namespace) throws Exception {         // ...     } } ```  If you run this in an app with the arguments ""test -h"". You get this:  ``` usage: java -jar project.jar test [-h] {a,b,c}  Do a test  positional arguments:   {a,b,c}                Type to use  optional arguments:   -h, --help             show this help message and exit  too few arguments usage: java -jar project.jar test [-h] {a,b,c}  Do a test  positional arguments:   {a,b,c}                Type to use  optional arguments:   -h, --help             show this help message and exit  Process finished with exit code 1 ```  Note the ""too few arguments"" message. Passing ""-h"" should stop any argument validation and just print help.","closed","","Randgalt","2015-11-25T12:21:52Z","2015-12-12T19:21:16Z"
"","1052","Do not swallow exception cause when parsing JSON.","If an error occurs processing JSON by default we just receive a message in the response indicating the dropwizard was ""Unable to process JSON"". This should be logged at least as a warning so a developer/sysadmin can see the cause.","closed","","richmidwinter","2015-05-16T10:48:16Z","2015-06-28T10:57:59Z"
"","958","Rethrow Hibernate exceptions as Jersey exceptions","If a database commit fails, it's better not to rethrow an Hibernate exception in the original form, but wrap it as a MappableException.  This way users can map sql exceptions to web responses and derive a business value from the database validation checks.  Resolve #949","closed","","arteam","2015-03-29T08:19:36Z","2016-01-24T08:05:37Z"
"","1356","Dropwizard always adds ""server"" and ""check"" commands. This is restrictive","I've started using Dropwizard for CLI apps and other types of things. This way, I can create an entire system that consumes config in the same way, etc. However, DW always adds server and check commands. I don't always want this. Add a method to not add these.","closed","improvement,","Randgalt","2015-11-25T12:07:41Z","2015-12-31T15:38:24Z"
"","1355","Dropwizard always adds ""server"" and ""check"" commands. This is restrictive","I've started using Dropwizard for CLI apps and other types of things. This way, I can create an entire system that consumes config in the same way, etc. However, DW always adds server and check commands. I don't always want this. Add a method to not add these.","closed","","Randgalt","2015-11-25T12:04:00Z","2015-11-25T12:05:21Z"
"","1536","Polymorphic Configuration doesn't handle system property overrides for collections if not specified in config file","I've run into an issue where system property overrides are not properly handled for Polymorphic Configuration when the configuration value is a collection and a default is not specified in the config file.  For example, with the below configuration both 'strings' and 'integer' can be overridden using '-Ddw.persistence.strings' and '-Ddw.persistence.integer':  ``` persistence:     type: testpersistence     strings: ['string1', 'string2']     integer: 2"" ```  However, only integer can be overridden using '-Ddw.persistence.integer' with:  ``` persistence:     type: testpersistence ```  Attempting to override 'strings' using '-Ddw.persistence.strings' will result in:  ``` io.dropwizard.configuration.ConfigurationParsingException: /var/folders/38/_80f5n7s4hv2llzmyt444d4m0000gn/T/junit3726267359703086845/junit8775153942057281016.tmp has an error:   * Failed to parse configuration at: persistence.strings; Can not deserialize instance of java.util.HashSet out of VALUE_STRING token  at [Source: N/A; line: -1, column: -1] (through reference chain: jackson.polymorphic.test.TestDropwizardConfiguration[""persistence""]->jackson.polymorphic.test.TestPersistenceServiceConfigurationBuilder[""strings""])      at io.dropwizard.configuration.ConfigurationParsingException$Builder.build(ConfigurationParsingException.java:271)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:179)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:95)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:119)     at jackson.polymorphic.test.DropwizardPolymorphicConfigOverridesTest.dwConfiguration(DropwizardPolymorphicConfigOverridesTest.java:40)     at jackson.polymorphic.test.DropwizardPolymorphicConfigOverridesTest.testConstructionWithSystemPropertyOverridesNoFileConfigForCollection(DropwizardPolymorphicConfigOverridesTest.java:67)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)     at org.junit.rules.RunRules.evaluate(RunRules.java:20)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) Caused by: com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.util.HashSet out of VALUE_STRING token  at [Source: N/A; line: -1, column: -1] (through reference chain: jackson.polymorphic.test.TestDropwizardConfiguration[""persistence""]->jackson.polymorphic.test.TestPersistenceServiceConfigurationBuilder[""strings""])     at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:148)     at com.fasterxml.jackson.databind.DeserializationContext.mappingException(DeserializationContext.java:857)     at com.fasterxml.jackson.databind.DeserializationContext.mappingException(DeserializationContext.java:853)     at com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer.handleNonArray(StringCollectionDeserializer.java:240)     at com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer.deserialize(StringCollectionDeserializer.java:171)     at com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer.deserialize(StringCollectionDeserializer.java:161)     at com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer.deserialize(StringCollectionDeserializer.java:19)     at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:520)     at com.fasterxml.jackson.module.afterburner.deser.SettableObjectMethodProperty.deserializeSetAndReturn(SettableObjectMethodProperty.java:66)     at com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer.deserializeFromObject(BuilderBasedDeserializer.java:300)     at com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer.deserialize(BuilderBasedDeserializer.java:168)     at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:122)     at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:93)     at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:131)     at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:518)     at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:95)     at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserialize(SuperSonicBeanDeserializer.java:156)     at com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:3708)     at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2005)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:148)     ... 29 more ```   I've included a test for this case, see the attachment 'DropwizardPolymorphicConfigOverridesTest.testConstructionWithSystemPropertyOverridesNoFileConfigForCollection()'.  [dropwizard-polymorphic-config.zip](https://github.com/dropwizard/dropwizard/files/251031/dropwizard-polymorphic-config.zip)","closed","stale,","bmlining","2016-05-05T19:20:03Z","2020-02-03T21:16:52Z"
"","715","String literal not working?","I've got a String variable in my configuration file. I'm setting it via YAML:  ``` mystring: 001 ```  It's getting converted into ""1"".  I also tried   ``` mystring: '001' mystring: ""001"" mystring: !!str ""001"" ```  with no luck. I'm assuming there is some YAML parser... not sure who is at fault.","closed","","devinrsmith","2014-09-25T22:00:33Z","2014-09-26T07:43:54Z"
"","1095","AnnotationSensitivePropertyNamingStrategy Causing Deserialization Errors","I've got a few POJOs that have fields of type ObjectNode.  When I try to deserialize them w/ the Dropwizard ObjectMapper I get the following error from Jackson:  ``` com.fasterxml.jackson.databind.JsonMappingException: Conflicting setter definitions for property ""all"": com.fasterxml.jackson.databind.node.ObjectNode#setAll(1 params) vs com.fasterxml.jackson.databind.node.ObjectNode#setAll(1 params) ```  I've tracked it down to AnnotationSensitivePropertyNamingStrategy.  Here's a reproducer:  ``` java   public class AnnotationSensitiveExample {     public String id;     public ObjectNode json;   }    ObjectMapper mapper = new ObjectMapper();   mapper.setPropertyNamingStrategy(new AnnotationSensitivePropertyNamingStrategy());   AnnotationSensitiveExample deserialized =         mapper.readValue(""{ \""id\"": \""1\"", \""json\"": { \""foo\"": \""bar\"", \""baz\"": \""bing\"" } }"", AnnotationSensitiveExample.class); ```  If you remove the call to mapper.setPropertyNamingStrategy() or add a call to mapper.setPropertyNamingStrategy(null); after the 1st call, deserialization works fine.","closed","","gilbode","2015-06-04T03:01:14Z","2015-07-10T13:18:46Z"
"","1464","Validation failing","I've followed the example [here](http://www.dropwizard.io/0.9.2/docs/manual/validation.html), however I am getting an empty `204 No Content` instead of a proper error message.  It's working as expected when I provide the name.  This is my resource method:  ```     @POST     @Path(""/register-user"")     public User registerUser(@Valid User user) {         return user;     } ```  This is my `User` model:  ``` public class User {      @NotEmpty     private final String name;      @JsonCreator     public User(@JsonProperty(""name"") String name) {         this.name = name;     }      @JsonProperty(""name"")     public String getName() {         return name;     }  } ```  Am I doing something wrong, or is this not working as intended?","closed","","patrickreck","2016-02-17T20:22:44Z","2016-02-18T11:19:28Z"
"","770","0.8.0-rc1 DropwizardAppRule fails to initialize application","I've decided to check out new release of dropwizard with implementation of JAX-RS 2.0 and it works just fine when run in the normal server mode, but crashes in testing. I've debugged the exception and i've found out, that first exception is caught in ServletHandler initialize method in line 871 while initializing ServletContainter. The stacktrace is attached in the gist:  https://gist.github.com/bandrzejczak/456e06e5674a536457b6  My configuration is fairly simple and worked fine with dropwizard 0.7.1.","closed","","bandrzejczak","2014-11-10T15:45:01Z","2014-11-10T16:18:07Z"
"","1110","Read Timed out with jersey-media-moxy","I've created a maven project to showcase this issue : https://github.com/Toilal/dropwizard-moxy-issue.  The project contains a minimalist [Dropwizard application](https://github.com/Toilal/dropwizard-moxy-issue/blob/master/src/main/java/App.java) with a [single resource](https://github.com/Toilal/dropwizard-moxy-issue/blob/master/src/main/java/Ressource.java), a single @GET returning a basic [Entity](https://github.com/Toilal/dropwizard-moxy-issue/blob/master/src/main/java/Entity.java) object.  It also contains a dependency to `jersey-media-moxy` which seems to cause the issue.  ``` xml      org.glassfish.jersey.media     jersey-media-moxy     ${jersey.version}  ```  When creating a simple [Integration test calling this method through JerseyClientBuilder](https://github.com/Toilal/dropwizard-moxy-issue/blob/master/src/test/java/AppTest.java#L31), first call to the method fails with `java.net.SocketTimeoutException: Read timed out` :   ``` > git clone https://github.com/Toilal/dropwizard-moxy-issue ... > cd dropwizard-moxy-issue > mvn test [INFO] Scanning for projects... [INFO] [INFO] ------------------------------------------------------------------------ [INFO] Building read-timeout-issue 0.0.1-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ read-timeout-issue --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 0 resource [INFO] [INFO] --- maven-compiler-plugin:3.3:compile (default-compile) @ read-timeout-issue --- [INFO] Nothing to compile - all classes are up to date [INFO] [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ read-timeout-issue --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 1 resource [INFO] [INFO] --- maven-compiler-plugin:3.3:testCompile (default-testCompile) @ read-timeout-issue --- [INFO] Nothing to compile - all classes are up to date [INFO] [INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ read-timeout-issue --- [INFO] Surefire report directory: C:\Users\QFXS1905\Documents\workspace442\read-timeout-issue\target\surefire-reports  -------------------------------------------------------  T E S T S ------------------------------------------------------- Running AppTest INFO  [2015-06-09 14:32:35,408] org.eclipse.jetty.util.log: Logging initialized @3553ms INFO  [2015-06-09 14:32:35,755] io.dropwizard.server.ServerFactory: Starting App INFO  [2015-06-09 14:32:35,941] org.eclipse.jetty.setuid.SetUIDListener: Opened App@53687596{HTTP/1.1}{0.0.0.0:9914} INFO  [2015-06-09 14:32:35,947] org.eclipse.jetty.server.Server: jetty-9.2.9.v20150224 INFO  [2015-06-09 14:32:37,704] io.dropwizard.jersey.DropwizardResourceConfig: The following paths were found for the configured resources:      GET     / (Ressource)  INFO  [2015-06-09 14:32:37,718] org.eclipse.jetty.server.handler.ContextHandler: Started i.d.j.MutableServletContextHandler@597b2bb1{/,null,AVAILABLE} INFO  [2015-06-09 14:32:37,737] io.dropwizard.setup.AdminEnvironment: tasks =      POST    /tasks/log-level (io.dropwizard.servlets.tasks.LogConfigurationTask)     POST    /tasks/gc (io.dropwizard.servlets.tasks.GarbageCollectionTask)  WARN  [2015-06-09 14:32:37,738] io.dropwizard.setup.AdminEnvironment: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !    THIS APPLICATION HAS NO HEALTHCHECKS. THIS MEANS YOU WILL NEVER KNOW      ! !     IF IT DIES IN PRODUCTION, WHICH MEANS YOU WILL NEVER KNOW IF YOU'RE      ! !    LETTING YOUR USERS DOWN. YOU SHOULD ADD A HEALTHCHECK FOR EACH OF YOUR    ! !         APPLICATION'S DEPENDENCIES WHICH FULLY (BUT LIGHTLY) TESTS IT.       ! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! INFO  [2015-06-09 14:32:37,753] org.eclipse.jetty.server.handler.ContextHandler: Started i.d.j.MutableServletContextHandler@aacc7fa{/admin,null,AVAILABLE} INFO  [2015-06-09 14:32:37,821] org.eclipse.jetty.server.ServerConnector: Started App@53687596{HTTP/1.1}{0.0.0.0:9914} INFO  [2015-06-09 14:32:37,822] org.eclipse.jetty.server.Server: Started @5969ms 127.0.0.1 - - [09/juin/2015:14:32:40 +0000] ""GET / HTTP/1.1"" 200 20 ""-"" ""App (test client)"" 1836 INFO  [2015-06-09 14:32:42,210] org.eclipse.jetty.server.ServerConnector: Stopped App@53687596{HTTP/1.1}{0.0.0.0:9914} INFO  [2015-06-09 14:32:42,212] org.eclipse.jetty.server.handler.ContextHandler: Stopped i.d.j.MutableServletContextHandler@aacc7fa{/admin,null,UNAVAILABLE} INFO  [2015-06-09 14:32:42,223] org.eclipse.jetty.server.handler.ContextHandler: Stopped i.d.j.MutableServletContextHandler@597b2bb1{/,null,UNAVAILABLE} Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 9.949 sec <<< FAILURE! testImpl(AppTest)  Time elapsed: 3.08 sec  <<< ERROR! javax.ws.rs.ProcessingException: java.net.SocketTimeoutException: Read timed out         at io.dropwizard.client.DropwizardApacheConnector.apply(DropwizardApacheConnector.java:111)         at org.glassfish.jersey.client.ClientRuntime.invoke(ClientRuntime.java:245)         at org.glassfish.jersey.client.JerseyInvocation$2.call(JerseyInvocation.java:687)         at org.glassfish.jersey.internal.Errors.process(Errors.java:315)         at org.glassfish.jersey.internal.Errors.process(Errors.java:297)         at org.glassfish.jersey.internal.Errors.process(Errors.java:228)         at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:444)         at org.glassfish.jersey.client.JerseyInvocation.invoke(JerseyInvocation.java:683)         at org.glassfish.jersey.client.JerseyInvocation$Builder.method(JerseyInvocation.java:411)         at org.glassfish.jersey.client.JerseyInvocation$Builder.get(JerseyInvocation.java:307)         at AppTest.testImpl(AppTest.java:31)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:606)         at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)         at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)         at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)         at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)         at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)         at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)         at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)         at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)         at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)         at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)         at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)         at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)         at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)         at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)         at org.junit.rules.RunRules.evaluate(RunRules.java:20)         at org.junit.runners.ParentRunner.run(ParentRunner.java:363)         at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)         at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)         at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:606)         at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)         at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)         at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)         at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)         at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75) Caused by: java.net.SocketTimeoutException: Read timed out         at java.net.SocketInputStream.socketRead0(Native Method)         at java.net.SocketInputStream.read(SocketInputStream.java:152)         at java.net.SocketInputStream.read(SocketInputStream.java:122)         at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:136)         at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:152)         at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:270)         at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)         at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)         at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:260)         at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:161)         at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:153)         at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:271)         at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:123)         at com.codahale.metrics.httpclient.InstrumentedHttpRequestExecutor.execute(InstrumentedHttpRequestExecutor.java:44)         at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:254)         at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:195)         at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:86)         at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:108)         at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)         at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)         at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:106)         at io.dropwizard.client.DropwizardApacheConnector.apply(DropwizardApacheConnector.java:89)         ... 42 more   Results :  Tests in error:   testImpl(AppTest): java.net.SocketTimeoutException: Read timed out  Tests run: 1, Failures: 0, Errors: 1, Skipped: 0  [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 17.122 s [INFO] Finished at: 2015-06-09T16:32:42+02:00 [INFO] Final Memory: 14M/177M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test (default-test) on project read-timeout-issue: There are test failures. [ERROR] [ERROR] Please refer to C:\Users\QFXS1905\Documents\workspace442\read-timeout-issue\target\surefire-reports for the individual test results. [ERROR] -> [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException ```  Removing the dependency to `jersey-media-moxy` make the test pass properly. Also, next calls will work (i've tested by catching the first call and adding others later, it just works as expected).  Maybe the configuration of moxy occurs while server is responding, reseting connections to current clients ?","closed","","Toilal","2015-06-09T14:43:21Z","2015-06-12T13:13:47Z"
"","1096","dropwizard-jdbi with MySQL connection closed error","I've configured my application exactly as instructed on http://www.dropwizard.io/manual/jdbi.html, with mysql. Everything works perfectly fine but after the application goes into idle for a long time i start getting these errors:  ``` ! at java.lang.reflect.Constructor.newInstance(Constructor.java:422) ~[na:1.8.0_45-internal] ! at com.mysql.jdbc.Util.handleNewInstance(Util.java:377) ~[giftblock-pos.jar:na] ! at com.mysql.jdbc.Util.getInstance(Util.java:360) ~[giftblock-pos.jar:na] ! at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:956) ~[giftblock-pos.jar:na] ! at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:935) ~[giftblock-pos.jar:na] ! at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:924) ~[giftblock-pos.jar:na] ! at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:870) ~[giftblock-pos.jar:na] ! at com.mysql.jdbc.ConnectionImpl.throwConnectionClosedException(ConnectionImpl.java:1232) ~[giftblock-pos.jar:na] ! at com.mysql.jdbc.ConnectionImpl.checkClosed(ConnectionImpl.java:1225) ~[giftblock-pos.jar:na] ! at com.mysql.jdbc.ConnectionImpl.prepareStatement(ConnectionImpl.java:4100) ~[giftblock-pos.jar:na] ! at com.mysql.jdbc.ConnectionImpl.prepareStatement(ConnectionImpl.java:4069) ~[giftblock-pos.jar:na] ! at sun.reflect.GeneratedMethodAccessor19.invoke(Unknown Source) ~[na:na] ! at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_45-internal] ! at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_45-internal] ! at org.apache.tomcat.jdbc.pool.ProxyConnection.invoke(ProxyConnection.java:126) ~[giftblock-pos.jar:na] ! at org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:108) ~[giftblock-pos.jar:na] ! at org.apache.tomcat.jdbc.pool.DisposableConnectionFacade.invoke(DisposableConnectionFacade.java:81) ~[giftblock-pos.jar:na] ! at com.sun.proxy.$Proxy65.prepareStatement(Unknown Source) ~[na:na] ! at org.skife.jdbi.v2.DefaultStatementBuilder.create(DefaultStatementBuilder.java:48) ~[giftblock-pos.jar:na] ! at org.skife.jdbi.v2.SQLStatement.internalExecute(SQLStatement.java:1304) ~[giftblock-pos.jar:na] ! ... 73 common frames omitted ! Causing: org.skife.jdbi.v2.exceptions.UnableToCreateStatementException: com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: No operations allowed after connection closed. ```","closed","","martintreurnicht","2015-06-04T13:43:46Z","2015-07-09T17:13:50Z"
"","746","Add hook after org.eclipse.jetty.server.Server creation in ServerCommand#run","I've already posted here https://groups.google.com/forum/#!topic/dropwizard-dev/G6N5rzUEKnI the reasons that I think such capability would be useful. Since Dropwizard exposes the Server through environment.getApplicationContext().getServer() I think that it would be reasonable to be able to access the Server before it is started in order to enable features like Distributed Session Clustering.  What do you think?","closed","needs code,","aantoniadis","2014-10-17T13:31:19Z","2016-10-12T18:46:30Z"
"","1327","Adding Websockets support to dropwizard","I've added a bundle, including some integration tests and docs.","closed","","eitan101","2015-11-05T14:44:19Z","2015-11-10T21:43:41Z"
"","940","applicationContextPath doesn't work when SSL","I'm using this configuration:  ``` server: #  softNofileLimit: 1000 #  hardNofileLimit: 1000   type: default   applicationContextPath: /v1   #adminContextPath: /admin   applicationConnectors:     - type: http       port: 8080     - type: https       port: 8443       keyStorePath: my.keystore       keyStorePassword: 123456       validateCerts: false   adminConnectors:     - type: http       port: 8081     - type: https       port: 8444       keyStorePath: my.keystore       keyStorePassword: 123456       validateCerts: false ```  This error is being throw:  ``` server.yml has an error:   * Unrecognized field at: server.applicationContextPath     Did you mean?:       - applicationConnectors       - adminConnectors       - adminMinThreads       - allowedMethods       - adminMaxThreads         [15 more] ```  How do I configure the context path when SSL?","closed","","edpichler","2015-03-13T00:35:36Z","2015-03-13T01:17:10Z"
"","1267","JerseyClientConfiguration.setGzipEnabled(false) not working as expected","I'm using dropwizard 0.9.0-rc4 to build a service which uses another Rest API. In order to debug my application, I'm trying to observe the requests and responses between a local jersey client and the remote server on a logging proxy. To make the logs human readables, I tried to disable the compression on the client side like this:  ``` java JerseyClientConfiguration clientConfig = new JerseyClientConfiguration(); clientConfig.setGzipEnabled(false); clientConfig.setGzipEnabledForRequests(false);  Client client = new JerseyClientBuilder(environment).using(clientConfig).build(""myClient"") ```  but the  remote server answered with a compressed answer, because the request was looking like this:  ``` GET /foo/bar HTTP/1.1 Host: localhost:8080 Connection: Keep-Alive User-Agent: myClient Accept: application/json,application/xml Accept-Encoding: gzip,deflate ```  Where do this 'Accept-Encoding' header come from, since gzip is disabled in the JerseyClientConfiguration ? In short, if you disable compression at the Jersey level, then apache will enable it for you again... - The io.dropwizard.client.JerseyClientBuilder delegates client creation to io.dropwizard.client.HttpClientBuilder, which uses org.apache.http.impl.client.HttpClientBuilder to really create the instance. - In the apache builder, compression is enabled by default, if you don't call explicitely disableContentCompression() then the ""gzip,deflate"" is automatically added by org.apache.http.client.protocol.RequestAcceptEncoding ... - Thus, to honor the .setGzipEnabled(false) call, the dropwizard JerseyClientBuilder should tell the dropwizard HttpClientBuidlder to disable the compression in the apache HttpClientBuilder... but the gzipEnabled flag is not visible in dropwizard HttpClientBuilder, because it is a member of the above JerseyClientConfiguration   A possible way to solve this issue is to force disableContentCompression() in apache HttpClientBuilder, because Gzip is managed at the Jersey level (see io.dropwizard.jersey.gzip.GzipDecoder). It should work in my use case, but I can't say it will not break something elsewhere.  Any thoughts ?","closed","","lehcim","2015-09-29T12:47:04Z","2015-10-10T10:09:45Z"
"","1197","@Valid on object parameter implementing Principal without @Auth","I'm using Dropwizard **0.9.0-rc3** and I'm running into some trouble with the new auth system.  I have a User model that implements Principal and a POST resource method for signing up new users. The signup method has a validated User parameter but it's not authenticated. When I try access that resource, I get an IllegalStateException with the message: `Cannot inject a custom principal into unauthenticated request`. Is there an easy way to handle this scenario?  **EDIT:** I should note that it works just fine if I don't use `@Valid`.   My signup method looks like this:  ``` java @POST @Path(""signup"") @Timed @UnitOfWork public Response signup(@Valid final User user, @Context final HttpServletRequest request) throws JOSEException {     dao.setFilteredByTenantId(false);     user.setInterceptorBypassed(true);     user.setRole(""Admin"");     final Optional newUser = dao.create(user);     dao.resetFilters();      if (newUser.isPresent()) {         final Token token = AuthUtils.createToken(request.getRemoteHost(), newUser.get().getId());         return Response.status(Status.CREATED).entity(token).build();     } else {         return JSONErrorResponse.build(Status.CONFLICT, ""Failed to create new user."");     } } ```","closed","","derrikcurran","2015-07-29T14:47:36Z","2015-09-09T18:23:32Z"
"","1313","Dropwizard gzip compression not working","I'm using dropwizard  0.8.1 version and have added following compression parameters in config.yaml Also the HTTP Requet has a header ""Accept-Encoding: gzip, deflate"", And my output response is Application/Json and its size is approximately 32 KB and not compressed. I'don't see any ERROR logs for not initializing the compression on the server side.  server:       gzip:       enabled: true        minimumEntitySize: 256B        bufferSize: 8KB   Following are the Request Headers:  User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36       Origin: chrome-extension://hgmloofddffdnphfgcellkdfbfbjeloo       Content-Type: application/x-www-form-urlencoded        Accept: _/_       Accept-Encoding: gzip, deflate       Accept-Language: en-US,en;q=0.8,hi;q=0.6  Response Headers:       Date: Wed, 28 Oct 2015 22:49:45 GMT        Access-Control-Allow-Origin: *       Access-Control-Allow-Methods: GET, POST, DELETE, PUT, OPTIONS       Content-Type: application/json        Transfer-Encoding: chunked","closed","","narunarthy-invn","2015-10-29T00:31:24Z","2016-06-15T13:24:21Z"
"","1119","Unable to log after RULE.getApplication().run(""db"", ""migrate"", CONFIG_PATH);","I'm unable see any logs after calling `RULE.getApplication().run(""db"", ""migrate"", CONFIG_PATH);`. Take the following example:   If I add some loggers to `com.example.helloworld.IntegrationTest.migrateDb()`:  ```     @BeforeClass     public static void migrateDb() throws Exception {         LoggerFactory.getLogger(IntegrationTest.class).warn(""now you see me"");         RULE.getApplication().run(""db"", ""migrate"", CONFIG_PATH);         LoggerFactory.getLogger(IntegrationTest.class).warn(""now you don't"");         System.out.println(""+++++++++ just a control line +++++++++"");     } ```  I'll get the following output:  ``` WARN  [2015-06-19 09:31:53,676] com.example.helloworld.IntegrationTest: now you see me INFO  [2015-06-19 09:31:54,767] liquibase: Successfully acquired change log lock INFO  [2015-06-19 09:31:55,964] liquibase: Creating database history table with name: PUBLIC.DATABASECHANGELOG INFO  [2015-06-19 09:31:55,969] liquibase: Reading from PUBLIC.DATABASECHANGELOG INFO  [2015-06-19 09:31:55,983] liquibase: migrations.xml: 1::codahale: Table people created INFO  [2015-06-19 09:31:55,983] liquibase: migrations.xml: 1::codahale: ChangeSet migrations.xml::1::codahale ran successfully in 6ms INFO  [2015-06-19 09:31:56,114] liquibase: Successfully released change log lock +++++++++ just a control line +++++++++ ```  After that I can't see any logs from slf4j (from the test class, applications class etc). I've tried to change logging settings in `test-example.yml` but without success.   I'm using maven 3.0.5 and openjdk 1.7.0_79.","closed","","joaocenoura","2015-06-19T09:35:39Z","2017-03-06T17:34:16Z"
"","934","Migration guide from 0.7.1 to 0.8.0","I'm trying to update Dropwizard 0.7.1 to 0.8.0 in one of my applications. I could not get it to work for about 2 complete business days. I have compile errors in every class (really every class, I have no single class without compile errors). It is really hard to find information what to do. I had to search the internet for hours. That was the reason to stop the migration because it is a lot too expensive.  Am I the only one with these problems? I don't think so because I develop software for a long time and I don't think (or hope) that I'm really such bad. Can you please provide a migration guide what has to be done to upgrade Dropwizard?","closed","","McPringle","2015-03-11T13:07:26Z","2015-03-13T21:12:02Z"
"","1321","Error when running with no config file specified","I'm trying to set up my `*Configuration` classes with defaults in the class, so I don't need to tell the app a config file when it's run in development.  However, when I run the app, I get this error:  ``` default configuration has an error:   * Unrecognized field at: database.healthCheckValidationTimeout     Did you mean?:       - logValidationErrors       - removeAbandonedTimeout       - validationQueryTimeout       - initializationQuery       - validationQuery         [30 more] ```  I can see that `DataSourceFactory` has a `getHealthCheckValidationTimeout`, method, but I see no matching setter.  From what I see in the code, `getValidationQueryTimeout` and `setValidationQueryTimeout` read/write the same field as `getHealthCheckValidationTimeout`. I'm unable to find the ""default configuration"" that specifies `database.healthCheckValidationTimeout` to attempt changing it to `database.validationQueryTimeout` and see if that works. I think this is a bug, but I'm not sure.","closed","bug,","lewisd32","2015-11-02T19:58:41Z","2016-03-24T22:41:18Z"
"","922","BasicAuthFactory in dropwizard-testing.","I'm trying to get the `BasicAuthFactory` in dropwizard testing to work. As stated in the documentation, I'm using `GrizzlyTestContainerFactory` as test container factory. `BasicAuthFactory` still isn't working because `@Context private HttpServletRequest request;` isn't injected. I also tried `GrizzlyWebTestContainerFactory`, this throws an exception:  ``` java.lang.IllegalArgumentException: The deployment context must be an instance of ServletDeploymentContext.     at org.glassfish.jersey.test.grizzly.GrizzlyWebTestContainerFactory.create(GrizzlyWebTestContainerFactory.java:85)     at org.glassfish.jersey.test.JerseyTest.createTestContainer(JerseyTest.java:277)     at org.glassfish.jersey.test.JerseyTest.setUp(JerseyTest.java:609)     at io.dropwizard.testing.junit.ResourceTestRule$1.evaluate(ResourceTestRule.java:157)     at org.junit.rules.RunRules.evaluate(RunRules.java:20)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ```  How to test basic auth protected resources?","closed","","phxql","2015-03-05T21:36:12Z","2015-04-01T13:37:00Z"
"","1482","Null fields aren't included on `JsonInclude.Include.ALWAYS`","I'm trying to force null fields to be written. When I tried it with a newly constructed object mapper, it works fine. But the object mapper used in the message body writer doesn't write them out.  I'm configuring the ObjectMapper in the run method of my application subclass:   ``` env.getObjectMapper().setSerializationInclusion(JsonInclude.Include.ALWAYS); ```","closed","","toadzky","2016-03-16T22:12:44Z","2016-03-30T20:13:25Z"
"","741","Add support for excluding https protocols","I'm trying to disable SSLv3 but its kinda cumbersome to list everything else and I worry that if a new version of TLS is introduced in the future, it won't automatically be enabled if we have to whitelist the protocols.  In terms of style, I tried to mirror the excludedCipherSuites change.","closed","improvement,","derekcicerone","2014-10-11T02:21:55Z","2014-10-23T08:19:54Z"
"","1170","Allow decoupling of dropwizard and joda-time","I'm starting a new dropwizard project and would like to use the new java8 time library instead of joda-time.  I tried excluding joda-time from the dropwizard dependencies:   `io.dropwizard:dropwizard-core` -> `io.dropwizard:dropwizard-util` -> `joda-time:joda-time`  AND  `io.dropwizard:dropwizard-core` ->  `io.dropwizard:dropwizard-jackson` -> `com.fasterxml.jackson.datatype:jackson-datatype-joda` -> `joda-time:joda-time`  ...but I get CNFEs at runtime, becase `Bootstrap.java` calls `Jackson.newObjectMapper()` which has a hard dependency on `JodaModule` which depends on joda.    Ideally I'd be able to specify my own `ObjectMapper` in the application so I can avoid that code path entirely, and safely be able to exclude joda-time.  Thoughts?  If I start down the path of making a PR to allow this, would it be accepted?","closed","","edenman","2015-07-14T20:32:11Z","2016-01-17T15:01:48Z"
"","920","EntityManager / JPA","I'm looking to use the general JPA APIs for persistence.  No need for any of the hibernate-specific functionality.  Is that something that already exists or is being contemplated?","closed","","eepstein","2015-03-05T17:41:43Z","2016-09-28T11:30:44Z"
"","1494","dropwizard-client 1.0.0rc1 can't handle multiple Set-Cookie headers","I'm having trouble with the implementation of the DropwizardApacheConnector. Specifically, its use of Collections.singletonList on line 98 of this file     https://github.com/dropwizard/dropwizard/blob/master/dropwizard-client/src/main/java/io/dropwizard/client/DropwizardApacheConnector.java  When receiveing a response with multiple cookies, they will all have a Set-Cookie header (with different data). Only the first such header will succeed. Subsequent headers can't be added since the headerValues, as far as I can tell, then always will be a Collections.singletonList, thus causing line 100 to fail since it can't add to such a ""singleton"" list. This results in headerValues.add causing an UnsupportedOperationException.  In order to move forward, I hacked around the problem for the time being as shown below. Please let me know if I'm totally missing the point here. If not, hopefully this helps helps someone else and shows a possible solution.  ```     for (Header header : apacheResponse.getAllHeaders()) {         final List headerValues = jerseyResponse.getHeaders().get(header.getName());         if (headerValues == null) {             List list = new ArrayList<>(1);             list.add(header.getValue());             jerseyResponse.getHeaders().put(header.getName(), list);         } else {             headerValues.add(header.getValue());         }     } ```  -JM","closed","bug,","TheWizz","2016-03-25T09:04:07Z","2016-03-30T17:04:28Z"
"","1389","Hibernate configuration settings","I'm having issues adding complex settings to hibernate, namely, event listeners.   https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/events.html  I see I can add it via the hibernate config file, or programmatically. Both ways seem unsupported https://github.com/dropwizard/dropwizard/blob/master/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/SessionFactoryFactory.java#L83. Programmatically, we do not have access to the configuration object ever, and the setting it seems like it's in a nested format in the config file, which we cannot set in our dropwizard database config for it to read. Any thoughts on how to get around this?","closed","","knguyen142","2015-12-16T00:37:49Z","2015-12-16T01:11:50Z"
"","731","Dropwizard 0.8.0 AuthFactory","I'm getting an error here trying to move my authentication to dropwizard 0.8.0.  Error: cannot access org.glassfish.jersey.server.internal.inject.AbstractContainerRequestValueFactory class file for org.glassfish.jersey.server.internal.inject.AbstractContainerRequestValueFactory not found  In my class:  public final class TokenAuthFactory< T > extends AuthFactory< String, T > { ... @Override <- Does not override method in superclass public T provide() { ...  as soon as I replace AuthFactory< String, T > by AuthFactory< BasicCredentials, T > it works.  What did I missed?","closed","","CaptainNTR","2014-10-06T12:20:30Z","2014-10-20T20:49:35Z"
"","1391","Liquibase works with  but not","I'm finding (with 0.9.1) that this fails:  ```  ```  Event though this works:  ```  ```  This is the stacktrace:  `````` Exception in thread ""main"" liquibase.exception.ChangeLogParseException: liquibase.exception.SetupException: /var/folders/m_/jvmrmqx90n54v276_xvtgxcw0000gn/T/liquibase-unzip5492890813073634394.dir/license/LICENSE.dom-documentation.txt (Not a directory)     at liquibase.parser.core.xml.AbstractChangeLogParser.parse(AbstractChangeLogParser.java:27)     at liquibase.Liquibase.getDatabaseChangeLog(Liquibase.java:225)     at liquibase.Liquibase.update(Liquibase.java:200)     at liquibase.Liquibase.update(Liquibase.java:190)     at liquibase.Liquibase.update(Liquibase.java:186)     at liquibase.Liquibase.update(Liquibase.java:179)     at io.dropwizard.migrations.DbMigrateCommand.run(DbMigrateCommand.java:68)     at io.dropwizard.migrations.DbCommand.run(DbCommand.java:52)     at io.dropwizard.migrations.AbstractLiquibaseCommand.run(AbstractLiquibaseCommand.java:61)     at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:77)     at io.dropwizard.cli.Cli.run(Cli.java:70)     at io.dropwizard.Application.run(Application.java:80)     at uk.co.wansdykehouse.pr.PRApplication.main(PRApplication.java:58) Caused by: liquibase.exception.SetupException: /var/folders/m_/jvmrmqx90n54v276_xvtgxcw0000gn/T/liquibase-unzip5492890813073634394.dir/license/LICENSE.dom-documentation.txt (Not a directory)     at liquibase.changelog.DatabaseChangeLog.includeAll(DatabaseChangeLog.java:367)     at liquibase.changelog.DatabaseChangeLog.handleChildNode(DatabaseChangeLog.java:274)     at liquibase.changelog.DatabaseChangeLog.load(DatabaseChangeLog.java:221)     at liquibase.parser.core.xml.AbstractChangeLogParser.parse(AbstractChangeLogParser.java:25)     ... 12 more Caused by: java.io.FileNotFoundException: /var/folders/m_/jvmrmqx90n54v276_xvtgxcw0000gn/T/liquibase-unzip5492890813073634394.dir/license/LICENSE.dom-documentation.txt (Not a directory)     at java.io.FileOutputStream.open0(Native Method)     at java.io.FileOutputStream.open(FileOutputStream.java:270)     at java.io.FileOutputStream.(FileOutputStream.java:213)     at java.io.FileOutputStream.(FileOutputStream.java:162)     at liquibase.util.FileUtil.unzip(FileUtil.java:76)     at liquibase.resource.ClassLoaderResourceAccessor.list(ClassLoaderResourceAccessor.java:87)     at liquibase.changelog.DatabaseChangeLog.includeAll(DatabaseChangeLog.java:344)     ... 15 more``` ``````","closed","","richmidwinter","2015-12-19T13:01:51Z","2016-03-25T09:36:05Z"
"","1037","On demand initialization of database connection pools","I'm currently facing the problem that DW fails to start when there are unreachable databases configured as data sources.  On startup process, DW tries to init the connection pools for all configured data sources. If there is e.g. an unreachable database configured, DW will fail to start with an exception.  **Desirable behaviour:** DW starts even if there are connection pools which could not be set up. Everytime the application tries to borrow a connection from the connection pool, DW retries to init this connection pool. Even better: Connection pools are just tried to be initialized when they are used for the first time (i.e. kind of lazy initialization; also can help saving resources).  **Background:** If e.g. a non-critical database is down in production environment which is only required by let's say 1 of 10 resources, I want DW to start properly so I can use 9 of 10 resources correctly and only requests to the one resource which requires the down database will fail.","closed","","tblasche","2015-05-08T08:51:01Z","2016-04-26T13:58:57Z"
"","956","Allow to customize MetricsRegistry","I'd like to customize MetricRegistry. It's used to create all the timers and histograms, but I don't like the defaults. In particular I don't like the fact that MetricBuilder for timers uses default constructor for Timer, which in turn builds a timer backed by ExponentiallyDecayingReservoir.  Why is it bad? Because ExponentiallyDecayingReservoir; 1) ""[default setting] heavily biases the reservoir to the past 5 minutes of measurements"". I report every 30 seconds, the remaining 4.5 min just skews the results. 2) when nothing is reported the values for percentiles stay on the same level indefinitely instead of dropping to 0 or null.  There are better options, e.g. HdrHistogramResetOnSnapshotReservoir, but right now it's not possible to plug it in.","closed","","mabn","2015-03-28T10:44:29Z","2015-05-19T13:34:51Z"
"","705","dropwizard-views-handlebars","I'd like to contribute a module to allow views written in handlebars templating language based on [jnack/handlebars.java](https://github.com/jknack/handlebars.java). Handlebars is a superset of Mustache.   Some features of Handlebars that are not features of Mustache: - adds the control statements and iterations with #if, #unless, #with, and #each keywords. - adds the keyword {{this}} in blocks (which outputs the current item's string value). - adds the concept of [helpers](http://handlebarsjs.com/block_helpers.html).  [Here](https://github.com/wycats/handlebars.js#differences-between-handlebarsjs-and-mustache) is a complete discussion of the difference between the two. [Here](https://github.com/wycats/handlebars.js#compatibility) are the notes on compatibility, however the first and third are supported by Handlebars.java, and the second point is not applicable because the current implementation of `dropwizard-views-mustache` does not expose an api for registration of TemplateFunctions with Mustache.java.  Per the CONTRIBUTING doc, I'm opening this issue to discuss the possible inclusion of this module (potentially replacing `dropwizard-views-mustache`). Here is an initial [implementation](https://github.com/mikedanese/dropwizard/tree/dropwizard-views-handlebars/dropwizard-views-handlebars), modeled after `dropwizard-views-mustache`. I will be adding a couple more unit tests before I pull request and the bundle is definitely optional . Any thoughts?","closed","","mikedanese","2014-09-13T23:34:01Z","2014-10-02T09:57:16Z"
"","896","Hibernate validation - adding a ValidatedValueUnwrapper (java-8 Optional)","I'd like to be able to validate java-8 Optional fields by using `@Valid` on them. But that doesn't seem to be possible at this point. The solution seems to be adding a ValidatedValueUnwrapper which dropwizard has implemented for Guava Optionals and registered to the hibernate validator. It looks like unwrappers are registered when the `ValidatorFactory` is created and that's done by dropwizard before `Application.initialize()`.  [Bootstrap.java](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-core/src/main/java/io/dropwizard/setup/Bootstrap.java):  ``` java this.validatorFactory = Validation         .byProvider(HibernateValidator.class)         .configure()         .addValidatedValueHandler(new OptionalValidatedValueUnwrapper())         .buildValidatorFactory(); ```  After this point, I couldn't find any way to register my own ValueUnwrappers. And since the piece of code above is very static, I got stuck.  I've been following dropwizard-java8 bundle for this. It does the following for 0.7.1 and the PR for 0.8.0-rc doesn't have any changes.  [Java8Bundle.java](https://github.com/dropwizard/dropwizard-java8/blob/master/dropwizard-java8/src/main/java/io/dropwizard/java8/Java8Bundle.java)  ``` java public void run(Environment environment, Configuration configuration){    environment.jersey().register(OptionalValidatedValueUnwrapper.class); } ```  This approach doesn't work for 0.8.0-rc2. I haven't tried it 0.7.1 (because there is no point), but I started doubting that it was working then.  I've been creating extra ""OptionalXXXXValidator"" for primitive types so far until a solution comes out, but I cannot do that for @Valid on an Optional. Or can I?  I could create a PR for this but I'm not sure how to make it customizable since everything happens before `Application.initialize()`.","closed","","natnan","2015-02-24T10:24:55Z","2015-03-09T09:26:08Z"
"","1469","add example for Configured Bundles docs","I'd like to add an example to the docs to show the structure of a simple configured bundle. I recently did some work creating a configured bundle and I think this would have helped.","closed","documentation,","mclarke47","2016-03-01T22:14:32Z","2016-03-16T15:15:30Z"
"","1076","""No session currently bound to execution context"" error when configuring multiple data sources","I""m upgrading one of our internal apps to 0.8.1which connects to several data bases.  After the upgrade, we started getting ""No session currently bound to execution context"" when we attempt to connect to additional databases.  The first one will work, all others fail.    I'm still wrapping my head around DW's internals, but i think the issue may lie with the UnitOfWorkApplicationListener.  Per the code notes, UnitOfWorkApplicationListener is registered as a singleton with Jersey.  I think DW is creating a UnitOfWorkApplicationListener per DataSourceFactory and thus attempting to add a second singleton of UnitOfWorkApplicationListener into Jersey.  Here is a gist showing this behavior.    https://gist.github.com/cbehrends/08caebdb747e1f7e8a31 and another showing the same test passing in 0.7.1 https://gist.github.com/cbehrends/e3717140a52b4f7d78ff  I've noticed that when my app loads I get the the following warning.     WARN  [2015-05-25 15:50:20,443] org.glassfish.jersey.internal.Errors: The following warnings have been detected: WARNING: Cannot create new registration for component type class io.dropwizard.hibernate.UnitOfWorkApplicationListener: Existing previous registration found for the type.  If you think I'm on the right track here, I'd be more than happy to submit a patch.  Any guidance would be appreciated.","closed","","cbehrends","2015-05-25T17:50:11Z","2015-11-25T19:00:43Z"
"","1296","Enable extenders of AssetBundle to support static assets in the AdminEnvironment","I would like to refactor `AssetBundle` to enable extenders of the class to specify the `ServletEnvironment` to which the created `AssetServlet` is added.  This would allow for static assets to be served from the `AdminEnvironment` or the standard `ServletEnvironment`. This would also allow for an `AssetBundle` to be added for the admin and a different `AssetBundle` to be added standard.  My proposed changes can be previewed here: https://github.com/jarrad/dropwizard/commit/20b15c2fbbea2f8c541ddc22a5f8651760a4c1ef","closed","stale,","jarrad","2015-10-23T03:04:11Z","2019-09-03T00:01:03Z"
"","744","Bundles run for ConfiguredCommand and Command","I would like to be able to specify that some of my bundles be run before a ConfiguredCommand or Command is run, when I don't need the entire environment built up.  I would be happy to provide a pull request, if this would fit in with the project. The way I would like to implement it: Add additional Bundle interfaces so that we have 4 versions: - Bundle has a run that takes no arguments - ConfiguredBundle's run takes a configuration - EnvironmentBundle's run takes a configuration and an environment - ServerBundle's run is a duplicate of EnvironmentBundle  A Command will call run on any Bundles. A ConfiguredCommand will run all ConfiguredBundles and all Bundles. etc.  Would this be acceptable?  There is a problem with backwards compatibility, however.  The currently existing ConfiguredBundle would be an EnvironmentBundle in the above naming scheme.","closed","stale,","oillio","2014-10-15T17:56:01Z","2019-09-04T00:01:13Z"
"","1388","Ability to Configure Custom Logback Encoder/Layout","I would like the ability to log output in JSON to help with ingesting them into an ELK setup.  This can be accomplished by adding a custom Encoder or Layout on the appender.  The current way of configuring appenders doesn't expose this and so it must be done manually at run-time.  I don't have a strong opinion but I feel like either layout or encoder would be fine, and that we shouldn't use both.  I see that there is already a layout being passed into `AppenderFactory.build` which may create some issues.  Ideally, we could just pass in a class name with a no-arg constructor as a string parameters in the appenders config section.  Would a PR that added this feature be welcome?","closed","","ajmath","2015-12-15T18:39:25Z","2018-03-10T10:02:53Z"
"","1518","Environment aware ViewRenderer","I was looking at creating a Pebble view renderer and one of the nice features of Pebble is that you can crunch different parts of a template in parallel. This requires you building a ThreadPoolExecutor and passing it to the Pebble engine. I'd like to have the thread pool be managed by dropwizard and configured from the ViewRenderer. This is currently not possible as the Environment from the ViewBundle is not passed to the ViewRenderer's configure method.  I could quite easily make my own ViewBundle but I thought I'd ask if this is something that might be useful in the core dropwizard-views code. That way my pebble-views library could fit into the ""existing"" infrastructure along side the handlebars, freemarker etc views.","closed","","pacey","2016-04-13T13:05:08Z","2017-03-10T12:55:30Z"
"","753","Example project doesn't build","I was interested in DropWizard and decided I'd give the example project a whirl. I cloned the repo, and followed instructions in the README.md to set up the application.  The build fails initially with this error:  ``` [ERROR] Failed to execute goal on project dropwizard-example: Could not resolve dependencies for project io.dropwizard:dropwizard-example:jar:0.8.0-SNAPSHOT: The following artifacts could not be resolved: io.dropwizard:dropwizard-core:jar:0.8.0-SNAPSHOT, io.dropwizard:dropwizard-auth:jar:0.8.0-SNAPSHOT, io.dropwizard:dropwizard-assets:jar:0.8.0-SNAPSHOT, io.dropwizard:dropwizard-spdy:jar:0.8.0-SNAPSHOT, io.dropwizard:dropwizard-hibernate:jar:0.8.0-SNAPSHOT, io.dropwizard:dropwizard-migrations:jar:0.8.0-SNAPSHOT, io.dropwizard:dropwizard-views-freemarker:jar:0.8.0-SNAPSHOT, io.dropwizard:dropwizard-views-mustache:jar:0.8.0-SNAPSHOT, io.dropwizard:dropwizard-testing:jar:0.8.0-SNAPSHOT: Failure to find io.dropwizard:dropwizard-core:jar:0.8.0-SNAPSHOT in http://oss.sonatype.org/content/repositories/snapshots was cached in the local repository, resolution will not be reattempted until the update interval of sonatype-nexus-snapshots has elapsed or updates are forced -> [Help 1] ```  After checking the quickstart guide on the website, I found that the problem could be in pom.xml. I changed `0.8.0-SNAPSHOT` to `0.7.0`. This seemed to resolve dependency issues, but it still has a build failure.  ``` [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project dropwizard-example: Fatal error compiling: invalid target release: 1.7 -> [Help 1] ```  I have not yet figured out how to get past this one yet though.   Instructions should be added to the README for resolving these issues, or else the example project should be edited to be buildable out-of-the-box.","closed","","johnpc","2014-10-22T16:22:00Z","2014-10-23T15:20:51Z"
"","690","Application#run(args) -> make not final","I want to use deltaspike with weld, and it would be nice and clean to just let the run() method @Observes an args-event. I can't, because to add the annotation I have to overwrite the method, but it is final. Any good reason to keep this final? Wouldn't a ""do not overwrite unless you have to/know what you are doing"" be sufficent?","closed","","jangalinski","2014-08-20T08:07:19Z","2014-11-09T14:14:23Z"
"","1353","HttpClientConfiguration can't configure default headers","I want to set default headers for my `HttpClient` instances (via `org.apache.http.impl.client.HttpClientBuilder.setDefaultHeaders`), but `HttpClientConfiguration` doesn't support it.  To make this happen I had to subclass both `HttpClientConfiguration` and `HttpClientBuilder`. It would be nice if it were just built in.  My solution is pretty simple. Doubtless better solutions exist. But it looks like this:  - Subclass `HttpClientConfiguration`, adding this:  ```     @JsonProperty(""defaultHeaders"")     private Collection defaultHeaders;      public void setDefaultHeaders(final Map map) {         final List headers = map.entrySet().stream()             .map((e) -> new BasicHeader(e.getKey(), e.getValue()))             .collect(Collectors.toList());         defaultHeaders = Collections.unmodifiableList(headers);     }      public Collection getDefaultHeaders() {         return defaultHeaders;     } ``` - Subclass `HttpClientBuilder` with this:  ```    private HttpClientConfiguration config;      @Override     public MyHttpClientBuilder using(final HttpClientConfiguration config) {         this.config = config;         super.using(config);         return this;     }      @Override     protected ConfiguredCloseableHttpClient createClient(             final org.apache.http.impl.client.HttpClientBuilder builder,             final InstrumentedHttpClientConnectionManager manager,             final String name) {         if (config instanceof MyHttpClientConfiguration) {             final MyHttpClientConfiguration myConfig =                     (MyHttpClientConfiguration)config;             builder.setDefaultHeaders(myConfig.getDefaultHeaders());         }         return super.createClient(builder, manager, name);     } ```","closed","improvement,","conleym","2015-11-24T14:17:35Z","2015-11-25T14:53:04Z"
"","1088","Add Spring Dependency Injection into Dropwizard","I want to add Spring DI into my Dropwizard application. I have tried to import [Fallwizard](https://github.com/Fallwizard/Fallwizard), and [Spring Boot](http://projects.spring.io/spring-boot/), but not working as expected. Therefore, I directly add Spring Servlet into /WEB-INF/web.xml as following:  ```              Spring         org.springframework.web.servlet.DispatcherServlet                      contextConfigLocation             /WEB-INF/applicationContext.xml                  1                   Spring         /      ```  However, it seems by default Dropwizard didn't recognize this file. Then I also tried to add Spring Servlet directly through:  ``` public void run(ServicesAPIConfigurations conf, Environment env) { ... env.getApplicationContext().addServlet(""org.springframework.web.servlet.DispatcherServlet"", ""/""); .... } ```  But it gave the class not found exception for DispatcherServlet.  Do you have any suggestion on how to include Spring DI into Dropwizard? Thanks.","closed","","teamwork523","2015-05-31T22:40:17Z","2015-06-02T06:32:14Z"
"","805","Custom HttpMethod causes 405 in dropwizard 0.8.0","I used some custom HttpMethods (LOCK, UNLOCK, PROPFIND) with dropwizard 0.7.0.   For example:  @Target(METHOD) @Retention(RUNTIME) @HttpMethod(""PROPFIND"") public @interface PROPFIND { }  And I could use it like:  @PROPFIND @Path(""/{id}/{virtual}"") @Produces(""text/xml"") public Response ....  But it seems Jetty 9 or Jersey 2 block this methods as they are not standard? Or what is the reason for this behaviour? Do I need to register something?  Any help would be appreciated.  Thomas","closed","","CaptainNTR","2014-12-05T14:34:19Z","2014-12-05T16:37:02Z"
"","783","[0.8.0 migration] No injection source found for a parameter","I try to migrate my app from 0.7.x to 0.8.x (github master). But this method doesn't pass the jersey model validation:  ``` java @Path(""/users"") @Produces(MediaType.APPLICATION_JSON) public class UserResource {     ...      @POST     @Path(""/changePassword"")     @Consumes(MediaType.APPLICATION_JSON)     public void changePassword(@Auth User user, String password) {         ...     }  } ```  Error message is about 10 meters wide and unreadable, but short version says : `No injection source found for a parameter of type public void com.pragmasphere.tictac.planning.services.auth.UserResource.changePassword(com.pragmasphere.tictac.planning.services.auth.User,java.lang.String) at index 0.`  Here is the full stacktrace:  ``` Caused by: org.glassfish.jersey.server.model.ModelValidationException: Validation of the application resource model has failed during application initialization. [[FATAL] No injection source found for a parameter of type public void com.pragmasphere.tictac.planning.services.auth.UserResource.changePassword(com.pragmasphere.tictac.planning.services.auth.User,java.lang.String) at index 0.; source='ResourceMethod{httpMethod=POST, consumedTypes=[application/json], producedTypes=[application/json], suspended=false, suspendTimeout=0, suspendTimeoutUnit=MILLISECONDS, invocable=Invocable{handler=ClassBasedMethodHandler{handlerClass=class com.pragmasphere.tictac.planning.services.auth.UserResource, handlerConstructors=[org.glassfish.jersey.server.model.HandlerConstructor@2582b0ef]}, definitionMethod=public void com.pragmasphere.tictac.planning.services.auth.UserResource.changePassword(com.pragmasphere.tictac.planning.services.auth.User,java.lang.String), parameters=[Parameter [type=class com.pragmasphere.tictac.planning.services.auth.User, source=null, defaultValue=null], Parameter [type=class java.lang.String, source=null, defaultValue=null]], responseType=void}, nameBindings=[]}', [FATAL] No injection source found for a parameter of type public void com.pragmasphere.tictac.planning.services.person.PersonResource.update(com.pragmasphere.tictac.planning.services.auth.User,long,long,com.pragmasphere.tictac.planning.services.person.Person) at index 0.; source='ResourceMethod{httpMethod=POST, consumedTypes=[application/json], producedTypes=[application/json], suspended=false, suspendTimeout=0, suspendTimeoutUnit=MILLISECONDS, invocable=Invocable{handler=ClassBasedMethodHandler{handlerClass=class com.pragmasphere.tictac.planning.services.person.PersonResource, handlerConstructors=[org.glassfish.jersey.server.model.HandlerConstructor@70721c12]}, definitionMethod=public void com.pragmasphere.tictac.planning.services.person.PersonResource.update(com.pragmasphere.tictac.planning.services.auth.User,long,long,com.pragmasphere.tictac.planning.services.person.Person), parameters=[Parameter [type=class com.pragmasphere.tictac.planning.services.auth.User, source=null, defaultValue=null], Parameter [type=long, source=environmentId, defaultValue=null], Parameter [type=long, source=id, defaultValue=null], Parameter [type=class com.pragmasphere.tictac.planning.services.person.Person, source=null, defaultValue=null]], responseType=void}, nameBindings=[]}', [FATAL] No injection source found for a parameter of type public void com.pragmasphere.tictac.planning.services.person.PersonResource.save(com.pragmasphere.tictac.planning.services.auth.User,long,javax.ws.rs.core.HttpHeaders,long,com.pragmasphere.tictac.planning.services.person.Person) at index 0.; source='ResourceMethod{httpMethod=PUT, consumedTypes=[application/json], producedTypes=[application/json], suspended=false, suspendTimeout=0, suspendTimeoutUnit=MILLISECONDS, invocable=Invocable{handler=ClassBasedMethodHandler{handlerClass=class com.pragmasphere.tictac.planning.services.person.PersonResource, handlerConstructors=[org.glassfish.jersey.server.model.HandlerConstructor@769bd849]}, definitionMethod=public void com.pragmasphere.tictac.planning.services.person.PersonResource.save(com.pragmasphere.tictac.planning.services.auth.User,long,javax.ws.rs.core.HttpHeaders,long,com.pragmasphere.tictac.planning.services.person.Person), parameters=[Parameter [type=class com.pragmasphere.tictac.planning.services.auth.User, source=null, defaultValue=null], Parameter [type=long, source=environmentId, defaultValue=null], Parameter [type=interface javax.ws.rs.core.HttpHeaders, source=null, defaultValue=null], Parameter [type=long, source=id, defaultValue=null], Parameter [type=class com.pragmasphere.tictac.planning.services.person.Person, source=null, defaultValue=null]], responseType=void}, nameBindings=[]}', [FATAL] No injection source found for a parameter of type public com.pragmasphere.tictac.planning.services.person.Person com.pragmasphere.tictac.planning.services.person.PersonResource.create(com.pragmasphere.tictac.planning.services.auth.User,long,com.pragmasphere.tictac.planning.services.person.Person) at index 0.; source='ResourceMethod{httpMethod=POST, consumedTypes=[application/json], producedTypes=[application/json], suspended=false, suspendTimeout=0, suspendTimeoutUnit=MILLISECONDS, invocable=Invocable{handler=ClassBasedMethodHandler{handlerClass=class com.pragmasphere.tictac.planning.services.person.PersonResource, handlerConstructors=[org.glassfish.jersey.server.model.HandlerConstructor@101ca8da]}, definitionMethod=public com.pragmasphere.tictac.planning.services.person.Person com.pragmasphere.tictac.planning.services.person.PersonResource.create(com.pragmasphere.tictac.planning.services.auth.User,long,com.pragmasphere.tictac.planning.services.person.Person), parameters=[Parameter [type=class com.pragmasphere.tictac.planning.services.auth.User, source=null, defaultValue=null], Parameter [type=long, source=environmentId, defaultValue=null], Parameter [type=class com.pragmasphere.tictac.planning.services.person.Person, source=null, defaultValue=null]], responseType=class com.pragmasphere.tictac.planning.services.person.Person}, nameBindings=[]}', [FATAL] No injection source found for a parameter of type public void com.pragmasphere.utils.dropwizard.CrudAuthResource.save(java.lang.Object,javax.ws.rs.core.HttpHeaders,java.lang.Object,java.lang.Object) at index 0.; source='ResourceMethod{httpMethod=PUT, consumedTypes=[application/json], producedTypes=[application/json], suspended=false, suspendTimeout=0, suspendTimeoutUnit=MILLISECONDS, invocable=Invocable{handler=ClassBasedMethodHandler{handlerClass=class com.pragmasphere.tictac.planning.services.environment.EnvironmentResource, handlerConstructors=[org.glassfish.jersey.server.model.HandlerConstructor@20a967fe]}, definitionMethod=public void com.pragmasphere.utils.dropwizard.CrudAuthResource.save(java.lang.Object,javax.ws.rs.core.HttpHeaders,java.lang.Object,java.lang.Object), parameters=[Parameter [type=class com.pragmasphere.tictac.planning.services.auth.User, source=null, defaultValue=null], Parameter [type=interface javax.ws.rs.core.HttpHeaders, source=null, defaultValue=null], Parameter [type=class java.lang.Long, source=id, defaultValue=null], Parameter [type=class com.pragmasphere.tictac.planning.services.environment.Environment, source=null, defaultValue=null]], responseType=void}, nameBindings=[]}', [FATAL] No injection source found for a parameter of type public void com.pragmasphere.utils.dropwizard.CrudAuthResource.update(java.lang.Object,java.lang.Object,java.lang.Object) at index 0.; source='ResourceMethod{httpMethod=POST, consumedTypes=[application/json], producedTypes=[application/json], suspended=false, suspendTimeout=0, suspendTimeoutUnit=MILLISECONDS, invocable=Invocable{handler=ClassBasedMethodHandler{handlerClass=class com.pragmasphere.tictac.planning.services.environment.EnvironmentResource, handlerConstructors=[org.glassfish.jersey.server.model.HandlerConstructor@405b6d75]}, definitionMethod=public void com.pragmasphere.utils.dropwizard.CrudAuthResource.update(java.lang.Object,java.lang.Object,java.lang.Object), parameters=[Parameter [type=class com.pragmasphere.tictac.planning.services.auth.User, source=null, defaultValue=null], Parameter [type=class java.lang.Long, source=id, defaultValue=null], Parameter [type=class com.pragmasphere.tictac.planning.services.environment.Environment, source=null, defaultValue=null]], responseType=void}, nameBindings=[]}', [FATAL] No injection source found for a parameter of type public java.lang.Object com.pragmasphere.utils.dropwizard.CrudAuthResource.create(java.lang.Object,java.lang.Object) at index 0.; source='ResourceMethod{httpMethod=POST, consumedTypes=[application/json], producedTypes=[application/json], suspended=false, suspendTimeout=0, suspendTimeoutUnit=MILLISECONDS, invocable=Invocable{handler=ClassBasedMethodHandler{handlerClass=class com.pragmasphere.tictac.planning.services.environment.EnvironmentResource, handlerConstructors=[org.glassfish.jersey.server.model.HandlerConstructor@682abca7]}, definitionMethod=public java.lang.Object com.pragmasphere.utils.dropwizard.CrudAuthResource.create(java.lang.Object,java.lang.Object), parameters=[Parameter [type=class com.pragmasphere.tictac.planning.services.auth.User, source=null, defaultValue=null], Parameter [type=class com.pragmasphere.tictac.planning.services.environment.Environment, source=null, defaultValue=null]], responseType=class com.pragmasphere.tictac.planning.services.environment.Environment}, nameBindings=[]}']     at org.glassfish.jersey.server.ApplicationHandler.initialize(ApplicationHandler.java:467)     at org.glassfish.jersey.server.ApplicationHandler.access$500(ApplicationHandler.java:163)     at org.glassfish.jersey.server.ApplicationHandler$3.run(ApplicationHandler.java:323)     at org.glassfish.jersey.internal.Errors$2.call(Errors.java:289)     at org.glassfish.jersey.internal.Errors$2.call(Errors.java:286)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.processWithException(Errors.java:286)     at org.glassfish.jersey.server.ApplicationHandler.(ApplicationHandler.java:320)     at org.glassfish.jersey.server.ApplicationHandler.(ApplicationHandler.java:285)     at org.glassfish.jersey.servlet.WebComponent.(WebComponent.java:311)     at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:170)     at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:358)     at javax.servlet.GenericServlet.init(GenericServlet.java:244)     at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:612)     ... 36 more ```","closed","","Toilal","2014-11-19T21:57:47Z","2015-06-16T23:50:12Z"
"","1496","ResourceTestRule does not support testing file upload","I tried to write a unit test for testing a file upload by using the ResourceTestRule as described in the manual under ""Testing Resources"" http://www.dropwizard.io/0.9.2/docs/manual/testing.html  But doing something like this, will result in an exception when running the test case.  ``` CsvUpload response = resource.client().target(""/csvupload"")                 .request().post(Entity.entity(formDataMultiPart, formDataMultiPart.getMediaType()), CsvUpload.class); ```  ``` org.glassfish.jersey.message.internal.MessageBodyProviderNotFoundException: MessageBodyWriter not found for media type=multipart/form-data, type=class org.glassfish.jersey.media.multipart.FormDataMultiPart, genericType=class org.glassfish.jersey.media.multipart.FormDataMultiPart.      at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.aroundWriteTo(WriterInterceptorExecutor.java:247)     at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162)     at org.glassfish.jersey.message.internal.MessageBodyFactory.writeTo(MessageBodyFactory.java:1130)     at org.glassfish.jersey.client.ClientRequest.writeEntity(ClientRequest.java:502)     at org.glassfish.jersey.test.inmemory.InMemoryConnector.apply(InMemoryConnector.java:239)     at org.glassfish.jersey.client.ClientRuntime.invoke(ClientRuntime.java:255)     at org.glassfish.jersey.client.JerseyInvocation$2.call(JerseyInvocation.java:700)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.process(Errors.java:228)     at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:444)     at org.glassfish.jersey.client.JerseyInvocation.invoke(JerseyInvocation.java:696)     at org.glassfish.jersey.client.JerseyInvocation$Builder.method(JerseyInvocation.java:448)     at org.glassfish.jersey.client.JerseyInvocation$Builder.post(JerseyInvocation.java:349)     at CsvUploadResourceTest.testCsvUpload(CsvUploadResourceTest.java:71)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)     at io.dropwizard.testing.junit.ResourceTestRule$1.evaluate(ResourceTestRule.java:202)     at org.junit.rules.RunRules.evaluate(RunRules.java:20)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.junit.runner.JUnitCore.run(JUnitCore.java:137)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:119)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144) ```  I guess MultiPartFeature is not configured for the JerseyTest?  ``` @Override     protected Application configure() {         ResourceConfig rc = new ResourceConfig(ServerSideResource.class);         rc.register(MultiPartFeature.class);         return rc;     }      @Override     protected void configureClient(ClientConfig config) {         config.register(MultiPartFeature.class);     } ```  I might have missed something. Would be great to have test support for file uploads.  Cheers, Sven","closed","","svenwb","2016-03-28T08:30:38Z","2016-03-29T08:09:52Z"
"","1155","NoClassDefFoundError on clean checkout","I tried doing a fresh clone of dropwizard, and tried testing the sample application. The tests (4) all fail with this error:   ``` Running com.example.helloworld.resources.ProtectedResourceTest Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.01 sec <<< FAILURE! com.example.helloworld.resources.ProtectedResourceTest  Time elapsed: 0.01 sec  <<< ERROR! java.lang.NoClassDefFoundError: javax/servlet/DispatcherType     at org.glassfish.jersey.test.ServletDeploymentContext.builder(ServletDeploymentContext.java:103)     at io.dropwizard.testing.junit.ResourceTestRule$1$1.configureDeployment(ResourceTestRule.java:188)     at org.glassfish.jersey.test.JerseyTest.(JerseyTest.java:206)     at io.dropwizard.testing.junit.ResourceTestRule$1$1.(ResourceTestRule.java:179)     at io.dropwizard.testing.junit.ResourceTestRule$1.evaluate(ResourceTestRule.java:179)     at org.junit.rules.RunRules.evaluate(RunRules.java:20)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)     at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)     at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)     at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)     at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)     at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)     at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75) Caused by: java.lang.ClassNotFoundException: javax.servlet.DispatcherType     at java.net.URLClassLoader$1.run(URLClassLoader.java:372)     at java.net.URLClassLoader$1.run(URLClassLoader.java:361)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:360)     at java.lang.ClassLoader.loadClass(ClassLoader.java:424)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)     at java.lang.ClassLoader.loadClass(ClassLoader.java:357)     ... 19 more ```  It appears that javax.servlet-api is being pulled in and DispatcherType should be in there, so not sure where the issue is, but wanted to file the issue.","closed","","jtmelton","2015-07-07T20:39:50Z","2015-07-10T06:06:44Z"
"","885","purpose of ""realm"" attribute when using OAuth","I think I understand the purpose of a ""realm"" when using basic auth. How does this apply to oauth and the OAuthFactory? I am a bit confused what to use here.  ```     public OAuthFactory(final Authenticator authenticator,                         final String realm,                         final Class generatedClass ```  As far as I can tell, this realm is used only in the error response when authentication fails, similar to basic auth. Again, in the context of oauth, wouldn't it make more sense to use scopes instead? Thanks for your comments.","closed","","johnwiesel","2015-02-20T09:14:33Z","2017-02-08T19:25:21Z"
"","1468","Provide access to configuration object within Application.initialize()","I tend to use Guice in my app, but there is no way to create guice injector module, which depends on configuration to provide DI for bundles.","closed","","AndreyKarandey","2016-02-24T08:46:27Z","2016-05-24T19:55:48Z"
"","897","Exporting ehCache metrics to Elasticsearch causes NaN error","I set up ehCache metrics collection with the Dropwizard metrics in my Spring Boot app. I set up a vanilla elasticsearch server and set up a Scheduled job to use ElasticsearchReporter. Looks like the timestamp data from the ehcache metrics is causing elasticsearch to stumble:   [2015-02-24 18:07:28,426][DEBUG][action.bulk              ] [Bora] [metrics-2015-02][4] failed to execute bulk item (index) index {[metrics-2015-02][gauge][szcN3Lg4QcCm7aZP3UyOhA], source[{""name"":""net.sf.ehcache.Cache.com.xxx.xxx.xxx.CustomerPromotion.mean-search-time"",""@timestamp"":""2015-02-24T18:07:26.000+0000"",""value"":""NaN""}]} org.elasticsearch.index.mapper.MapperParsingException: failed to parse [value]     at org.elasticsearch.index.mapper.core.AbstractFieldMapper.parse(AbstractFieldMapper.java:418)     at org.elasticsearch.index.mapper.object.ObjectMapper.serializeValue(ObjectMapper.java:616)     at org.elasticsearch.index.mapper.object.ObjectMapper.parse(ObjectMapper.java:469)     at org.elasticsearch.index.mapper.DocumentMapper.parse(DocumentMapper.java:515)     at org.elasticsearch.index.mapper.DocumentMapper.parse(DocumentMapper.java:462)     at org.elasticsearch.index.shard.service.InternalIndexShard.prepareCreate(InternalIndexShard.java:363)     at org.elasticsearch.action.bulk.TransportShardBulkAction.shardIndexOperation(TransportShardBulkAction.java:406)     at org.elasticsearch.action.bulk.TransportShardBulkAction.shardOperationOnPrimary(TransportShardBulkAction.java:157)     at org.elasticsearch.action.support.replication.TransportShardReplicationOperationAction$AsyncShardOperationAction.performOnPrimary(TransportShardReplicationOperationAction.java:556)     at org.elasticsearch.action.support.replication.TransportShardReplicationOperationAction$AsyncShardOperationAction$1.run(TransportShardReplicationOperationAction.java:426)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)     at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.NumberFormatException: For input string: ""NaN""     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)     at java.lang.Long.parseLong(Long.java:441)     at java.lang.Long.parseLong(Long.java:483)     at org.elasticsearch.common.xcontent.support.AbstractXContentParser.longValue(AbstractXContentParser.java:145)     at org.elasticsearch.index.mapper.core.LongFieldMapper.innerParseCreateField(LongFieldMapper.java:297)     at org.elasticsearch.index.mapper.core.NumberFieldMapper.parseCreateField(NumberFieldMapper.java:215)     at org.elasticsearch.index.mapper.core.AbstractFieldMapper.parse(AbstractFieldMapper.java:408)","closed","","kmandeville","2015-02-24T18:09:03Z","2015-02-25T09:59:19Z"
"","1195","Upgraded Jackson/Joda causes breaking change on `DataTime`","I see `RC4-SNAPSHOT` has upgraded jackson library to the latest `2.6.0` and withit comes a breaking change where previously `2015-07-28` would be perfectly serialized into a joda `DataTime` object, now any request containing Resource in this format is denied by dropwizard as `400: Bad Request`. It requires a full ISO format string like `2015-07-28T22:30:35Z`.  Was this discussed previous? Personally I can't think of any reason why this change is required and especially since `RC3` works just fine.  /cc @cowtowncoder","closed","","kilemensi","2015-07-28T15:20:06Z","2015-07-30T13:56:07Z"
"","601","Returns the result in Chinese garbled","I return to the Chinese information in the Resource class, see Chinese garbled in the result of the request.","closed","","fye","2014-05-30T03:22:09Z","2014-06-25T20:53:20Z"
"","552","Fix absence of metrics logging to JMX","I recently ran into an issue using dropwizard 0.7.0: metrics are no longer being logged to JMX.  I did some digging and it turns out this is due to the fact that at one point the metrics library was revamped to no longer contain a default metrics registry.  Dropwizard used to use this default metrics registry, which was always configured to use JmxReporter to configure reporting of metrics to JMX.  You can see the original code below:  https://github.com/dropwizard/metrics/commit/934dbc95c605299999ad68bd63afa61d0c17f22f#diff-9e111793422e2f47ca2e35936c8a66e7  This pull request will add back support for logging metrics to JMX.  I tried writing a unit test for this pull request, but there's no easy way to get a list of listeners added to a MetricRegistry (unless you can mock it yourself to intercept addListener), and there's no easy way to detect that the listener with a given type was added (because JmxListener is private, unless you use getEnclosingClass() to check it against JmxReporter, but then you assume JmxListener will always be an inner class of JmxReporter).  Another possibility was to allow specifying a MetricRegistryFactory or something similar that will allow you to change how MetricRegistry is created/configured, but, this would greatly change Bootstrap, and I didn't want to introduce a breaking change if people already rely on Bootstrap to have getMetricRegistry()","closed","","gtrog","2014-04-25T18:18:11Z","2014-06-16T15:30:45Z"
"","868","Configuration/Implementation of Logging to Multiple Files","I recently had a request from my DevOps group to have specific logs route to a separate log file so they could handle them differently than the standard dropwizard file logs. Think Personally Identifiable Information (PII) or Private Health Information (PHI) in logs.  I looked through some other discussions on this topic and it seemed like people were taking a few different approaches. Namely PR #567 via standard logback.xml which I'd like to avoid. My understanding is we'd like to enable this functionality without having to open up external configuration files.  I took a stab at implementing this via standard dropwizard yaml configuration to solve our issue as follows:  ``` yaml level: INFO loggers:   com.example.app: DEBUG console:   enabled: true   threshold: ALL file:   enabled: true   threshold: ALL   currentLogFilename: ./logs/example.log   archivedLogFilenamePattern: ./logs/example-%d.log.gz   archivedFileCount: 5   appenders:     - enabled: true       threshold: INFO       currentLogFilename: ./logs/activity.log       archivedLogFilenamePattern: ./logs/activity-%d.log.gz       logger: com.example.app.logging.LoggingFilter       additive: false     - enabled: true       threshold: DEBUG       currentLogFilename: ./logs/foo.log       archivedLogFilenamePattern: ./logs/foo-%d.log.gz       logger: com.example.app.logging.Foo syslog:   enabled: false   host: localhost   facility: local0 ```  With the above configuration, logs for `com.example.app.logging.LoggingFilter` will be logged to an additional file `./logs/activity.log` and will _NOT_ show up in the main log file for the service. Logs for `com.example.app.logging.Foo` will show up in the main log file and will also be logged to a separate file `./logs/foo.log`.  I'd love to get some feedback on this implementation: https://github.com/DeanPoulin/dropwizard/tree/0.6.2.x  I'd like to get this into 0.6.x since that's the version we're running in production. Hopefully this would also be trivial to get into 0.7.x and 0.8.x as well.","closed","","DeanPoulin","2015-01-29T00:58:49Z","2016-08-02T22:38:30Z"
"","1470","Validation being skipped on resource methods","I realized on my upgrade from version 0.7 to 0.9 that validations are being skipped on resource methods. This seems to be a racing condition problem, since it is happening with some frequency, but not all the time. The JacksonMessageBodyProvider gets executed instead of my custom validation, and as a result no validation is performed.  Example:  ``` @POST @Timed @CacheControl(noCache = true, isPrivate = true, noStore = true) public Response create(@Context User user, **@Validation** AnyObject anyObject) {     return ok().build(); } ```","closed","","guilhermemt21","2016-03-02T13:45:17Z","2016-03-02T15:01:18Z"
"","657","Proxy support for Dropwizard HTTP client","I often encounter with a situation when in closed corporate environments direct access to the Internet is blocked by security reasons. So all connections to external resources happen through a proxy server (usually with BASIC authentication).  Deploying applications in such environments becomes a huge pain, because usually you don't know in advance that an application will need proxy connection support and sometimes you just don't have possibility to change code to add this facility.  I believe, it would be quite useful to have this facility in the Dropwizard config. It frees an application developer from thoughts about environments where an application will be used and shifts this responsibility to operations guys. And they can configure proxy client support just in the application config without using external tools.   PS I've added the docs to proxy configuration. But I'm not a skilled english speaker, so, please, fix them if I messed up something.","closed","feature,","arteam","2014-07-12T18:33:13Z","2016-01-24T08:06:04Z"
"","1454","Default JerseyRootPath","I noticed that with this PR, https://github.com/dropwizard/dropwizard/commit/c436e5e28406ece6ae1250be3268a638ed90bc5b, the default root path is changed from `/` to '/*'. Is that the expected? if so, should that be mentioned in the 1.0 changelog/release notes?","closed","","qinfchen","2016-02-09T00:32:54Z","2016-02-09T15:25:29Z"
"","851","fixing an issue where the ""name"" prefix for HttpClient metrics would not...","I noticed that the metrics for HttpClients, when named, did not include the name.  For example: org.apache.http.client.HttpClient./api/v1/services.get-requests even though I specified a name and the connection manager metrics correctly showed it.  I found a simple omission of this parameter in the HttpClientBuilder.  Now my metrics look like this: org.apache.http.client.HttpClient.PagerDuty./api/v1/services.get-requests and I am happy (PagerDuty == the name I used to build the client)","closed","bug,","smolloy","2015-01-16T17:00:04Z","2015-01-16T17:25:55Z"
"","1101","Minor ""Getting started"" Hibernate-validator documentation error","I noticed on the getting started page states the following about hibernate-valdiator:  Hibernate Validator, the **JSR-303 reference implementation**, provides an easy, declarative framework for validating user input and generating helpful, i18n-friendly error messages.  When the version of Hibernate Validator used is 5.0+, this is NOT the reference implementation of JSR-303 -- it is the reference implementation of JSR-349. See the Hibernate FAQ:  > Hibernate Validator is the original validation framework from the Hibernate team and is now referred to as ""Legacy Hibernate Validator"". Hibernate Validator 4.x is the reference implementation of Bean Validation 1.0 (JSR 303), while Hibernate Validator 5.x is the reference implementation of Bean Validation 1.1 (JSR 349). Active development happens on the 5.x codebase.  http://hibernate.org/validator/faq/","closed","documentation,","RawToast","2015-06-05T10:57:52Z","2015-06-05T13:34:23Z"
"","685","Add support for multiple authentication factories","I needed to get support for both OAuth2 and Basic Authentication on my REST service. So i wrote this class. I think it could be useful to other people.","closed","feature,","Toilal","2014-08-14T17:59:04Z","2015-05-21T05:49:56Z"
"","846","Add CommandRunner to dropwizard-testing","I needed a way to run commands during integration testing.  This PR adds a CommandRunner that supports running Commands against a provided Application and configuration.  I also refactored DropwizardTestSupport so that it and CommandRunner can share code.","closed","","oillio","2015-01-13T20:08:21Z","2015-04-10T06:42:42Z"
"","1277","dropwizard-metrics-elasticsearch module?","I need to push metrics from a dropwizard application to an elasticsearch instance. https://github.com/dropwizard/dropwizard/blob/master/CONTRIBUTING.md#new-features says I should first bring the subject here: So, would a PR providing a dropwizard-metrics-elasticsearch module, similar to dropwizard-metrics-ganglia and dropwizard-metrics-graphite, be welcome?  TIA for any answer","closed","","rgbj","2015-10-13T14:57:26Z","2015-10-13T16:34:22Z"
"","1531","Cannot use two different databases in the same resource method","I need to access two different databases in the same resource method. I have set up the yml file correctly and the two hibernate bundle variables. All that is working fine. But when it comes to my resource method, I can only annotate it with a UnitOfWork belonging to one hibernateBundle/sessionFactory, so accessing the other database gives a ""No session was associated"" error.","closed","","vandanagopal","2016-04-25T04:11:27Z","2016-04-25T13:46:22Z"
"","740","Get both json message and deserialized object when consuming application/json","I need md5 content validation in my service and for that I need the json content of the message sent to me. I would like to also deserialize the json to an instance of a class. Unfortunately when I declare a method like this:  ``` @POST     @Path(""/{countryCode}/users/{customerId}/payments"")     @Consumes(MediaType.APPLICATION_JSON)     @Produces(MediaType.APPLICATION_JSON)     public Response processPaymentAction(             final String body,             @Context HttpServletRequest request,             @Nonnull @PathParam(""countryCode"") final String countryCode,             @Nonnull @PathParam(""customerId"") final String customerId,             @Valid PaymentMessage paymentMessage ```  I get an exception:  `SEVERE: Missing dependency for method public javax.ws.rs.core.Response com.lgi.paymentsclerk.resource.PaymentsClerkResource.processPaymentAction(java.lang.String,javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String,com.lgi.paymentsclerk.resource.model.PaymentMessage) throws java.io.IOException,javax.servlet.ServletException at parameter at index 4`  I can either have the body of the message or the serialized object. Is this a bug/missing feature or am I doing something wrong?","closed","","kmejka","2014-10-10T14:30:05Z","2014-10-13T12:33:34Z"
"","627","Failed to manage multiple media types since 0.7.x","I migrated from Dropwizard 0.6.x to 0.7.x. Since then, I face an issue with all the resource methods that handles many Media types.  Here is a code example:  ```  @Path(RESOURCE_PATH)  public class Resource extends AbstractResource{  ...      @GET     @Produces({MediaType.TEXT_HTML, MediaType.APPLICATION_JSON})     @Path(ServerAPI.SOMETHING)     public Response getSomething(){           Something something = getSomething();           ...           return Response.ok(something).build();      }   } ```  ""Something"" extends View.  When I am performing a GET at ...resource/something, I always get a HTML answer; even if the ""Accept"" header of the request is set at ""application/json"".  Here is a peace of code and some curl commands to reproduce the problem: https://gist.github.com/jdcoffre/acded33fb0b7fc039bbd","closed","","jdcoffre","2014-06-24T06:32:50Z","2014-12-02T09:12:09Z"
"","1375","Inconsistent `maxThreads` default for JerseyClient","I might have misunderstood this completely but it felt wrong enough to create an issue here :).  Dropwizard's default `maxThreads` count is defaulted to 1024. While jersey client's is `128`. So, if you have a resource where you make some asynchronous request to another service and burst this resource with 1000 requests simultaneously, 872 of the requests will fail because of jersey client's thread pool reaching its limit. So, maybe, both `maxThreads` fields must have the same default value?","closed","documentation,","natnan","2015-12-07T16:58:18Z","2016-01-21T21:51:49Z"
"","738","dropwizard-discovery as an official module?","I made a post (https://groups.google.com/d/msg/dropwizard-dev/eiiTDVFqmTc/2vFdQ01U9zsJ) on the dropwizard-dev google group, but didn't get any feedback from any committers on whether they'd like to include https://github.com/jplock/dropwizard-discovery as an official module or not.  Any feedback would be appreciated.  Thanks!","closed","","jplock","2014-10-08T15:10:39Z","2014-10-11T11:40:57Z"
"","980","Expand documentation around commands","I like to use commands and I thought the documentation surrounding them were a little light.  Let me know if everything looks alright, or if there is someway to improve it.","closed","","nickbabcock","2015-04-09T15:50:05Z","2015-04-09T20:17:03Z"
"","1317","0.9.0 Metrics configuration issue","I just upgraded to 0.9.0 and get the following error while lunching application  Exception in thread ""main"" javax.validation.UnexpectedTypeException: HV000186: The constraint of type 'javax.validation.constraints.NotNull' defined on 'metrics.reporters[0].frequency' has multiple matching constraint validators which is due to an additional value handler of type 'io.dropwizard.validation.valuehandling.OptionalValidatedValueUnwrapper'. It is unclear which value needs validating. Clarify configuration via @UnwrapValidatedValue.  My metrics configuration in yml  metrics:   reporters:     - type: console       timeZone: Asia/Kolkata       output: stdout       durationUnit: milliseconds       rateUnit: seconds        frequency: 1 minute","closed","","sheldon-sminq","2015-10-30T06:35:09Z","2015-10-30T09:02:16Z"
"","856","SPDY not working in 0.8 RC2 for Chrome","I just updated to DropWizard 0.8 RC2 with a spdy3 connector. SPDY works fine from Firefox but doesn't seem to work for Chrome. I debugged this a bit and the issue may be in Spdy3ConnectorFactory. It is setting up ALPN with http/1.1 and spdy3 protocols which is used in this code in ALPNServerConnection:  ```     public String select(List clientProtocols)     {         List serverProtocols = getProtocols();         String negotiated = null;         for (String clientProtocol : clientProtocols)         {             if (serverProtocols.contains(clientProtocol))             {                 negotiated = clientProtocol;                 break;             }         } ```  When testing with the latest Chrome release, it looks like the ""clientProtocols"" is coming in as [http/1.1, spdy/3, spdy/3.1]. This seems to result in http/1.1 being selected instead of SPDY.","closed","bug,","derekcicerone","2015-01-20T18:31:33Z","2015-02-26T12:12:37Z"
"","1294","Critical bug in Jackson for null values in Dropwizard 0.8.4","I just noticed a critical bug that makes Jackson deserialization impossible in Dropwizard 0.8.4 (0.8.3 and lower seems not to be affected by this bug). When I try to deserialize (eg: pass a JSON to a resource) an JSON that contains at least one field with value ""null"", the whole stack fails and Jersey sends a 500 error.  Here's the stacktrace:  ``` WARN  [2015-10-22 14:00:31,419] org.eclipse.jetty.servlet.ServletHandler:  ! java.lang.NoSuchFieldError: _nullProvider ! at com.fasterxml.jackson.module.afterburner.deser.OptimizedSettableBeanProperty._deserializeString(OptimizedSettableBeanProperty.java:161) ~[jackson-module-afterburner-2.5.1.jar:2.5.1] ! at com.fasterxml.jackson.module.afterburner.deser.SettableStringMethodProperty.deserializeAndSet(SettableStringMethodProperty.java:54) ~[jackson-module-afterburner-2.5.1.jar:2.5.1] ! at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserializeFromObject(SuperSonicBeanDeserializer.java:240) ~[jackson-module-afterburner-2.5.1.jar:2.5.1] ! at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserialize(SuperSonicBeanDeserializer.java:122) ~[jackson-module-afterburner-2.5.1.jar:2.5.1] ! at com.fasterxml.jackson.databind.ObjectReader._bind(ObjectReader.java:1470) ~[jackson-databind-2.6.0.jar:2.6.0] ! at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:912) ~[jackson-databind-2.6.0.jar:2.6.0] ! at com.fasterxml.jackson.jaxrs.base.ProviderBase.readFrom(ProviderBase.java:808) ~[jackson-jaxrs-base-2.5.1.jar:2.5.1] ! at io.dropwizard.jersey.jackson.JacksonMessageBodyProvider.readFrom(JacksonMessageBodyProvider.java:60) ~[dropwizard-jersey-0.8.4.jar:0.8.4] ! at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:256) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:235) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:155) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundReadFrom(MappableExceptionWrapperInterceptor.java:74) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:155) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.message.internal.MessageBodyFactory.readFrom(MessageBodyFactory.java:1085) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:852) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.server.ContainerRequest.readEntity(ContainerRequest.java:270) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.internal.inject.EntityParamValueFactoryProvider$EntityValueFactory.provide(EntityParamValueFactoryProvider.java:96) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.spi.internal.ParamValueFactoryWithSource.provide(ParamValueFactoryWithSource.java:71) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.spi.internal.ParameterValueHelper.getParameterValues(ParameterValueHelper.java:93) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:127) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309) ~[jersey-server-2.21.jar:na] ! ... 46 common frames omitted ! Causing: org.glassfish.jersey.server.ContainerException: java.lang.NoSuchFieldError: _nullProvider ! at org.glassfish.jersey.servlet.internal.ResponseWriter.rethrow(ResponseWriter.java:256) ~[jersey-container-servlet-core-2.21.jar:na] ! at org.glassfish.jersey.servlet.internal.ResponseWriter.failure(ResponseWriter.java:238) ~[jersey-container-servlet-core-2.21.jar:na] ! at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:486) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:317) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.internal.Errors.process(Errors.java:315) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.internal.Errors.process(Errors.java:297) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.internal.Errors.process(Errors.java:267) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460) ~[jersey-container-servlet-core-2.21.jar:na] ! ... 37 common frames omitted ! Causing: javax.servlet.ServletException: org.glassfish.jersey.server.ContainerException: java.lang.NoSuchFieldError: _nullProvider ! at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:485) ~[jersey-container-servlet-core-2.21.jar:na] ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386) ~[jersey-container-servlet-core-2.21.jar:na] ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334) ~[jersey-container-servlet-core-2.21.jar:na] ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221) ~[jersey-container-servlet-core-2.21.jar:na] ! at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49) ~[dropwizard-jetty-0.8.4.jar:0.8.4] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669) ~[jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.servlets.UserAgentFilter.doFilter(UserAgentFilter.java:83) ~[jetty-servlets-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.servlets.GzipFilter.doFilter(GzipFilter.java:300) ~[jetty-servlets-9.2.9.v20150224.jar:9.2.9.v20150224] ! at io.dropwizard.jetty.BiDiGzipFilter.doFilter(BiDiGzipFilter.java:134) ~[dropwizard-jetty-0.8.4.jar:0.8.4] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) ~[jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] ! at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:29) ~[dropwizard-servlets-0.8.4.jar:0.8.4] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) ~[jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:44) ~[dropwizard-jersey-0.8.4.jar:0.8.4] ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:39) ~[dropwizard-jersey-0.8.4.jar:0.8.4] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) ~[jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.servlets.CrossOriginFilter.handle(CrossOriginFilter.java:259) ~[jetty-servlets-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.servlets.CrossOriginFilter.doFilter(CrossOriginFilter.java:222) ~[jetty-servlets-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) ~[jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585) [jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) [jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:240) [metrics-jetty9-3.1.1.jar:3.1.1] ! at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:51) [dropwizard-jetty-0.8.4.jar:0.8.4] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:95) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:159) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.Server.handle(Server.java:497) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540) [jetty-io-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at java.lang.Thread.run(Thread.java:745) [na:1.8.0_25] WARN  [2015-10-22 14:00:31,422] org.eclipse.jetty.server.HttpChannel: /my/resource ! java.lang.NoSuchFieldError: _nullProvider ! at com.fasterxml.jackson.module.afterburner.deser.OptimizedSettableBeanProperty._deserializeString(OptimizedSettableBeanProperty.java:161) ~[jackson-module-afterburner-2.5.1.jar:2.5.1] ! at com.fasterxml.jackson.module.afterburner.deser.SettableStringMethodProperty.deserializeAndSet(SettableStringMethodProperty.java:54) ~[jackson-module-afterburner-2.5.1.jar:2.5.1] ! at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserializeFromObject(SuperSonicBeanDeserializer.java:240) ~[jackson-module-afterburner-2.5.1.jar:2.5.1] ! at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserialize(SuperSonicBeanDeserializer.java:122) ~[jackson-module-afterburner-2.5.1.jar:2.5.1] ! at com.fasterxml.jackson.databind.ObjectReader._bind(ObjectReader.java:1470) ~[jackson-databind-2.6.0.jar:2.6.0] ! at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:912) ~[jackson-databind-2.6.0.jar:2.6.0] ! at com.fasterxml.jackson.jaxrs.base.ProviderBase.readFrom(ProviderBase.java:808) ~[jackson-jaxrs-base-2.5.1.jar:2.5.1] ! at io.dropwizard.jersey.jackson.JacksonMessageBodyProvider.readFrom(JacksonMessageBodyProvider.java:60) ~[dropwizard-jersey-0.8.4.jar:0.8.4] ! at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:256) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:235) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:155) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundReadFrom(MappableExceptionWrapperInterceptor.java:74) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:155) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.message.internal.MessageBodyFactory.readFrom(MessageBodyFactory.java:1085) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:852) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.server.ContainerRequest.readEntity(ContainerRequest.java:270) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.internal.inject.EntityParamValueFactoryProvider$EntityValueFactory.provide(EntityParamValueFactoryProvider.java:96) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.spi.internal.ParamValueFactoryWithSource.provide(ParamValueFactoryWithSource.java:71) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.spi.internal.ParameterValueHelper.getParameterValues(ParameterValueHelper.java:93) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:127) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:309) ~[jersey-server-2.21.jar:na] ! ... 46 common frames omitted ! Causing: org.glassfish.jersey.server.ContainerException: java.lang.NoSuchFieldError: _nullProvider ! at org.glassfish.jersey.servlet.internal.ResponseWriter.rethrow(ResponseWriter.java:256) ~[jersey-container-servlet-core-2.21.jar:na] ! at org.glassfish.jersey.servlet.internal.ResponseWriter.failure(ResponseWriter.java:238) ~[jersey-container-servlet-core-2.21.jar:na] ! at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:486) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:317) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.internal.Errors.process(Errors.java:315) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.internal.Errors.process(Errors.java:297) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.internal.Errors.process(Errors.java:267) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317) ~[jersey-common-2.21.jar:na] ! at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:292) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1139) ~[jersey-server-2.21.jar:na] ! at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:460) ~[jersey-container-servlet-core-2.21.jar:na] ! ... 37 common frames omitted ! Causing: javax.servlet.ServletException: org.glassfish.jersey.server.ContainerException: java.lang.NoSuchFieldError: _nullProvider ! at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:485) ~[jersey-container-servlet-core-2.21.jar:na] ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:386) ~[jersey-container-servlet-core-2.21.jar:na] ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:334) ~[jersey-container-servlet-core-2.21.jar:na] ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221) ~[jersey-container-servlet-core-2.21.jar:na] ! at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49) ~[dropwizard-jetty-0.8.4.jar:0.8.4] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669) ~[jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.servlets.UserAgentFilter.doFilter(UserAgentFilter.java:83) ~[jetty-servlets-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.servlets.GzipFilter.doFilter(GzipFilter.java:300) ~[jetty-servlets-9.2.9.v20150224.jar:9.2.9.v20150224] ! at io.dropwizard.jetty.BiDiGzipFilter.doFilter(BiDiGzipFilter.java:134) ~[dropwizard-jetty-0.8.4.jar:0.8.4] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) ~[jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] ! at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:29) ~[dropwizard-servlets-0.8.4.jar:0.8.4] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) ~[jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:44) ~[dropwizard-jersey-0.8.4.jar:0.8.4] ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:39) ~[dropwizard-jersey-0.8.4.jar:0.8.4] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) ~[jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.servlets.CrossOriginFilter.handle(CrossOriginFilter.java:259) ~[jetty-servlets-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.servlets.CrossOriginFilter.doFilter(CrossOriginFilter.java:222) ~[jetty-servlets-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) ~[jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585) ~[jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127) ~[jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) ~[jetty-servlet-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061) ~[jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) ~[jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) ~[jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:240) ~[metrics-jetty9-3.1.1.jar:3.1.1] ! at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:51) ~[dropwizard-jetty-0.8.4.jar:0.8.4] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) ~[jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:95) ~[jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) ~[jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:159) ~[jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) ~[jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.Server.handle(Server.java:497) ~[jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310) ~[jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540) [jetty-io-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555) [jetty-util-9.2.9.v20150224.jar:9.2.9.v20150224] ! at java.lang.Thread.run(Thread.java:745) [na:1.8.0_25] ```","closed","bug,","carminexx","2015-10-22T14:49:36Z","2016-07-27T16:24:07Z"
"","797","Quartz Scheduler 2.2.1 Bundle (New Feature available for pull request)","I have written a Quartz Scheduler (2.2.1) bundle. Internally it is also Managed so as to properly shutdown the scheduler. I have defined several mapping files for easily defining the Quartz thread pool, either a RAM or JDBC TX job store, and other general configuration properties.   I modeled the design after the existing Hibernate bundle, which also uses a Managed class to properly shutdown.   It is JavaDoc's at the Bundle and config class levels to clearly communicate what the yml section needs to look like, what properties are supported, etc. The design also includes a single custom context callback to support Quartz's ability to define custom (arbitrary) context keys in the scheduler - keeps things simple and flexible without cluttering the yml.  If there is interest in this new bundle, I can issue a pull request -- guidelines suggested that I open an issue prior to executing the pull request, so here you go :-)","closed","","ghost","2014-11-27T00:03:31Z","2014-12-27T12:27:45Z"
"","661","Asset bundles not able to be served from root path.","I have tried the following to move my rest app to an isolated path:  ``` server:   type: simple   applicationContextPath: /application/*  # Default value* ```  And then followed the documentation to add:  ``` public void initialize(Bootstrap matchUiConfigurationBootstrap) {         matchUiConfigurationBootstrap.addBundle(new AssetsBundle(""/webapp/"", ""/"", ""index.html"", ""static""));     } ```  But no matter what I do, anything above /application will return a 404, if I however access /application/index.html it will serve my file.  According to the manual this should not be intended behaviour? http://dropwizard.readthedocs.org/en/latest/manual/core.html#bundles","closed","","ghost","2014-07-18T13:58:10Z","2014-10-31T17:32:40Z"
"","974","AsyncResponse.resume(Throwable) does not trigger ExceptionMapper","i have the following API  ``` @Timed @Path(""{id}"") @DELETE public void delete(@Suspended final AsyncResponse asyncResponse, @PathParam(""id"") String id ){ ... asyncResponse.resume( new NoSuchElementException(""can't find id"") ); } ```  and exception mapper  ``` @Provider @Singleton public class NoSuchElementExceptionMapper implements ExceptionMapper{     @Override     public Response toResponse(NoSuchElementException exception) {         return ErrorResponse.status(404).throwable(exception).build();     } } ```  and registered it at a ConfiguredBundle's run method  ``` @Override     public void run(SearchConfiguration searchConfiguration, Environment environment) throws Exception { ...         environment.jersey().register(new NoSuchElementExceptionMapper());     } ```  the exception mapper was never triggered.  however, if i throw the exception directly in the API method, it works.","closed","","arthurtsang","2015-04-07T19:05:46Z","2021-10-20T06:28:25Z"
"","864","AuthFactory.binder() doesn't support multiple calls with different parameterized types","I have some `@Auth` providers I'm migrating to 0.8.0. Some of the injected Auth types are `User` and `AdminUser`. There's common code for authenticating the two. I'm running into problems when trying to bind multiple auth factories for different parameterized types.  Here's an artificial, yet runnable example:  ``` package io.dropwizard.auth;  import com.codahale.metrics.MetricRegistry; import com.google.common.base.Optional; import io.dropwizard.auth.Auth; import io.dropwizard.auth.AuthFactory; import io.dropwizard.auth.AuthenticationException; import io.dropwizard.auth.Authenticator; import io.dropwizard.jersey.DropwizardResourceConfig; import io.dropwizard.logging.LoggingFactory; import javax.servlet.http.HttpServletRequest; import javax.ws.rs.GET; import javax.ws.rs.Path; import javax.ws.rs.Produces; import javax.ws.rs.core.Context; import javax.ws.rs.core.MediaType; import org.glassfish.jersey.servlet.ServletProperties; import org.glassfish.jersey.test.DeploymentContext; import org.glassfish.jersey.test.JerseyTest; import org.glassfish.jersey.test.ServletDeploymentContext; import org.glassfish.jersey.test.grizzly.GrizzlyWebTestContainerFactory; import org.glassfish.jersey.test.spi.TestContainerException; import org.glassfish.jersey.test.spi.TestContainerFactory; import org.junit.Test;  import static org.assertj.core.api.Assertions.assertThat;  public class MultipleAuthFactoryTest extends JerseyTest {   static {     LoggingFactory.bootstrap();   }    @Override   protected TestContainerFactory getTestContainerFactory()       throws TestContainerException {     return new GrizzlyWebTestContainerFactory();   }    @Override   protected DeploymentContext configureDeployment() {     return ServletDeploymentContext.builder(new BasicAuthTestResourceConfig())         .initParam(ServletProperties.JAXRS_APPLICATION_CLASS, BasicAuthTestResourceConfig.class.getName())         .build();   }    @Test   public void transformsCredentialsToPrincipalsA() throws Exception {     assertThat(target(""/test/a"").request()         .header(""Foo"", ""good-guy"")         .get(String.class))         .isEqualTo(""good-guy-a"");   }    @Test   public void transformsCredentialsToPrincipalsB() throws Exception {     assertThat(target(""/test/b"").request()         .header(""Foo"", ""good-guy"")         .get(String.class))         .isEqualTo(""good-guy-b"");   }    @Path(""/test"")   @Produces(MediaType.TEXT_PLAIN)   public static class ExampleResource {     @Path(""/a"")     @GET     public String showA(@Auth UserA principal) {       return principal.getName();     }      @Path(""/b"")     @GET     public String showB(@Auth UserB principal) {       return principal.getName();     }   }    public static class UserA {     private final String name;      public UserA(String name) {       this.name = name;     }      public String getName() {       return name;     }   }    public static class UserB {     private final String name;      public UserB(String name) {       this.name = name;     }      public String getName() {       return name;     }   }    public static class UserAuthFactory extends AuthFactory {     private final Class generatedClass;     @Context HttpServletRequest request;      public UserAuthFactory(Authenticator authenticator, Class generatedClass) {       super(authenticator);       this.generatedClass = generatedClass;     }      @Override public void setRequest(HttpServletRequest request) {       this.request = request;     }      @Override public U provide() {       String fooHeader = request.getHeader(""Foo"");       if (fooHeader != null) {         try {           Optional user = authenticator().authenticate(fooHeader);           if (user.isPresent()) {             return user.get();           }         } catch (AuthenticationException e) {           throw new RuntimeException(e);         }       }        return null;     }      @Override public AuthFactory clone(boolean required) {       return new UserAuthFactory<>(authenticator(), generatedClass);     }      @Override public Class getGeneratedClass() {       return generatedClass;     }   }    public static class BasicAuthTestResourceConfig extends DropwizardResourceConfig {     public BasicAuthTestResourceConfig() {       super(true, new MetricRegistry());        final Authenticator authenticatorA = new Authenticator() {         @Override         public Optional authenticate(String credential) throws AuthenticationException {           if (""good-guy"".equals(credential)) {             return Optional.of(new UserA(""good-guy-a""));           }           return Optional.absent();         }       };        final Authenticator authenticatorB = new Authenticator() {         @Override         public Optional authenticate(String credential) throws AuthenticationException {           if (""good-guy"".equals(credential)) {             return Optional.of(new UserB(""good-guy-b""));           }           return Optional.absent();         }       };        // Which ever factory is registered second, a 500 is generated       register(AuthFactory.binder(new UserAuthFactory<>(authenticatorA, UserA.class)));       register(AuthFactory.binder(new UserAuthFactory<>(authenticatorB, UserB.class)));       register(ExampleResource.class);     }   } } ```  If I register the `UserA` auth factory first, then the `UserB` test returns 500. If I switch the order, the `UserA` test returns 500.","closed","","sul3n3t","2015-01-27T00:59:15Z","2015-08-17T01:18:29Z"
"","689","Application#initialize() -> provide empty default implementation","I have seen many examples where no implementation in bootstrap is needed.  Shouldn't this be an optional hook (provide empty default method, overwrite if needed= instead of an abstract method?","closed","improvement,","jangalinski","2014-08-20T08:02:59Z","2014-09-28T19:02:39Z"
"","1060","Require JDK 8","I have seen https://github.com/dropwizard/dropwizard-java8 this project recently and thought why there is such a project. One of the core values Dropwizard brings is security. Given that the end of public updates of Java 7 has been announced, supporting a publicly not updated version of Java is not necessary.  I am in favor of supporting JDK8 as a minimum version and bring all nice features implemented by @joschi and JDK8 features into directly Dropwizard.","closed","","cemo","2015-05-20T18:57:14Z","2015-05-20T20:10:54Z"
"","1219","Add support for Logback's FixedWindowRollingpolicy to FileAppenderFactory in dropwizard-logging","I have noticed support for maxFileSize has been included in FileAppenderFactory using Size and Time based archiving in commit 343680b.   With Size and Time Based Archiving (archivedLogFilenamePattern: -%d-%i) we have control on the size of each log file (it will rotate the logs and increment the index after maxFileSize is reached), but the archiveFileCount only applies to the number of days worth of files that should be maintained. So on any specific day, files will keep getting rolled over indefinitely with a new index when the maxFileSize is reached. These log files will continue to accumulate as long as it is within the number of days mentioned in archiveFileCount. So we will lose control on the number and size of log files on the host, and disk usage may be a concern.   With [Fixed Window Rolling Policy](http://logback.qos.ch/manual/appenders.html#FixedWindowRollingPolicy) (archivedLogFilenamePattern: -%i), we have control on the size (maxFileSize) and the number of log files (archiveFileCount) that will reside on the host.  Proposed Approach: Pull Request - https://github.com/dropwizard/dropwizard/pull/1218 Include FixedWindowRollingPolicy in FileAppenderFactory. Rolling policy to be used will be based on the archivedLogFilenamePattern -  Time Based Rolling Policy - /tmp/application-%d{yyyy-MM-dd}.log.gz Size and Time Based Rolling Policy - /tmp/application-%d{yyyy-MM-dd}-%i.log.gz Fixed Window Rolling Policy - /tmp/application-%i.log.gz  I hope you find this useful. I'm open to suggestions as well. Thanks.","closed","","dennyac","2015-08-17T05:08:54Z","2015-09-03T20:59:33Z"
"","1038","0.8+ with Jersey 1.x","I have an existing 3rd party servlet that is using Jersey 1.x that I would like to add in to my Dropwizard app. I’d like to stay current with Dropwizard (0.8+); however it currently uses Jersey 2.x. We have Jersey 1 transitive dependencies of existing projects that we utilize, making it difficult for us to use the latest versions of Dropwiazard (since we can’t uplift all of these dependencies yet).  In order to get this to work I managed the version of dropwizard-jersey to 0.7.1, as it still uses Jersey 1 and made a couple tweaks to dropwizard-core and dropwizard-jersey. Reading https://github.com/dropwizard/dropwizard/issues/934 and [here](https://groups.google.com/forum/#!topic/dropwizard-dev/VInOW_ebiAc) it sounds like the Jersey upgrade has caused other users problems when upgrading as well. Is there interest in having a dropwizard-jersey1 module included so consumers of dropwizard-core can choose which jersey version to use? If so, I'll contribute that and the changes needed in dropwizard-core and dropwizard-jersey.","closed","","ghenkes","2015-05-08T15:11:52Z","2015-06-06T19:14:56Z"
"","1247","Add FileAppenderFactory validations and tests","I have added validations and corresponding tests to FileAppenderFactory so that the error messages are understandable.","closed","","dennyac","2015-09-07T23:07:19Z","2015-09-30T20:18:44Z"
"","1188","dropwizard jetty server request responds with empty server instead of waiting for the response","I have a webservice built on top of dropwizard. There is a request which is supposed to take a long time and the request client is supposed to wait for the server response. But what i am observing is that the request is being responded by the server even before the application can process it. Here is an output of curl  ``` curl -vvv  --max-time 600 -H ""Content-Type: application/json"" -X POST -d '{""sourceId"":0,""pastNMinutes"":1440,""metricIds"":[33570, 33571, 33572, 33573, 33574, 33575]}' http://localhost:30000/blitz-reader/metric-reader/reportedNodes * Hostname was NOT found in DNS cache *   Trying ::1... * Connected to localhost (::1) port 30000 (#0) > POST /blitz-reader/metric-reader/reportedNodes HTTP/1.1 > User-Agent: curl/7.37.1 > Host: localhost:30000 > Accept: */* > Content-Type: application/json > Content-Length: 89 >  * upload completely sent off: 89 out of 89 bytes * Empty reply from server * Connection #0 to host localhost left intact curl: (52) Empty reply from server ```  Below is the http part of the configuration yml  ``` # HTTP-specific options. http:    # The port on which the HTTP server listens for service requests.   port: ${blitzReaderPort}    # The port on which the HTTP server listens for administrative requests.   adminPort: ${blitzReaderAdminPort}    # Maximum number of threads.   maxThreads: 300    # Minimum number of thread to keep alive.   minThreads: 10    # The type of connector to use. Other valid values are ""nonblocking"" or ""legacy"". In general, the   # blocking connector should be used for low-latency services with short request durations. The   # nonblocking connector should be used for services with long request durations or which   # specifically take advantage of Jetty's continuation support.   # If you need SSL support, you can either choose from ""nonblocking+ssl"" or ""legacy+ssl"".   connectorType: blocking    # The maximum amount of time a connection is allowed to be idle before being closed.   maxIdleTime: 60s    # The number of threads dedicated to accepting connections. If omitted, this defaults to the   # number of logical CPUs on the current machine.   #acceptorThreads: 3    # The offset of the acceptor threads' priorities. Can be [-5...5], with -5 dropping the acceptor   # threads to the lowest possible priority and with 5 raising them to the highest priority.   acceptorThreadPriorityOffset: 0    # The number of unaccepted requests to keep in the accept queue before refusing connections. If   # set to -1 or omitted, the system default is used.   acceptQueueSize: 100    # The maximum number of buffers to keep in memory.   maxBufferCount: 1024    # The initial buffer size for reading requests.   requestBufferSize: 32KB    # The initial buffer size for reading request headers.   requestHeaderBufferSize: 6KB    # The initial buffer size for writing responses.   responseBufferSize: 32KB    # The initial buffer size for writing response headers.   responseHeaderBufferSize: 6KB    # Enables SO_REUSEADDR on the server socket.   reuseAddress: true    # Enables SO_LINGER on the server socket with the specified linger time.   soLingerTime: 1s    # The number of open connections at which the server transitions to a ""low-resources"" mode.   lowResourcesConnectionThreshold: 25000    # When in low-resources mode, the maximum amount of time a connection is allowed to be idle before   # being closed. Overrides maxIdleTime.   lowResourcesMaxIdleTime: 10s    # If non-zero, the server will allow worker threads to finish processing requests after the server   # socket has been closed for the given amount of time.   shutdownGracePeriod: 2s    # If true, the HTTP server will prefer X-Forwarded headers over their non-forwarded equivalents.   useForwardedHeaders: true    # If true, forces the HTTP connector to use off-heap, direct buffers.   useDirectBuffers: true    # The hostname of the interface to which the HTTP server socket wil be found. If omitted, the   # socket will listen on all interfaces.   # bindHost: app1.example.com  #  ssl: #    keyStore: ./example.keystore #    keyStorePassword: example # #    keyStoreType: JKS # (optional, JKS is default)    # HTTP request log settings   requestLog:     # Settings for logging to stdout.     console:       # If true, write log statements to stdout.       enabled: false      # Settings for logging to a file.     file:       # If true, write log statements to a file.       enabled: true        # The file to which statements will be logged.       currentLogFilename: ../logs/reader/requests.log        #  When the log file rolls over, the file will be archived to example-2012-03-15.log.gz,       # example.log will be truncated, and new statements written to it.       archivedLogFilenamePattern: ../logs/reader/requests-%d.log.gz        # The maximum number of log files to archive.       archivedFileCount: 5      # Settings for logging to syslog.     syslog:        # If true, write log statements to syslog.       enabled: false        # The hostname of the syslog server to which statements will be sent.       # N.B.: If this is the local host, the local syslog instance will need to be configured to       # listen on an inet socket, not just a Unix socket.       host: localhost        # The syslog facility to which statements will be sent.       facility: local0 ```  What is the parameter i can give to let the server wait and not respond with empty response?","closed","","raghuiitr","2015-07-24T23:27:29Z","2015-11-25T19:24:31Z"
"","1543","add support for customizing the name of the migrations file","I have a use case where I'd like to run multiple `DropwizardAppRule` instances in an integration test and each DropwizardAppRule is from a different fat jar dependency. Each DropwizardAppRule will need to migrate its own database, however the `migration.xml` files collide because they have the same name. This PR allows the migrations filename to be set in the `MigrationsBundle` by overriding `getMigrationsFileName()`, which defaults to `migrations.xml`.","closed","improvement,","tburch","2016-05-10T22:24:58Z","2016-05-25T17:42:24Z"
"","1124","No validator could be found for type: org.joda.time.LocalTime","I have a simple use case with a NotBlank validator and it seems that DW doesn't have a validator registered for localtime.  Model:  @Entity @Table(name = ""hour"") public class Hour{  ``` @Id @Column(name=""id"") @GeneratedValue(strategy = GenerationType.IDENTITY) private int id;  @Column(name=""entrance_hour"") @NotBlank private LocalTime entranceHour;  @Column(name=""exit_hour"") @NotBlank private LocalTime exitHour; ```  }  Resource method:   ``` @POST @UnitOfWork public Horario createHour(@Valid Hour h){     return hourDAO.create(h); } ```","closed","","AndresGuerraMax","2015-06-22T16:50:42Z","2015-06-22T17:03:33Z"
"","1059","Serving static content with AssetsBundle doesn't work in 0.8.1","I have a REST API app and now I am trying to add also some static content.  I follow https://dropwizard.github.io/dropwizard/manual/core.html, ""Bundles"" section. - I created ""assets"" folder under /src/main/resources with an index.html file - edited config file, added      server:       type: simple       rootPath: /app/* - added ""bootstrap.addBundle(new AssetsBundle(""/assets"", ""/"", ""index.html""));"" to initialize()   ==> result: - the app starts - endpoints registered, e.g. ""GET     /app/hello-world"" - attempt to access /app/hello-world: 404 - attempt to access /app: 404 - attempt to access /: 404  Simply nothing can be used  I also tried not to change anything in the config, only register jersey at e.g. /app/\* as described in http://spin.atomicobject.com/2014/10/11/serving-static-assets-with-dropwizard/: the the app didn't start, URL conflict.","closed","","rskokan","2015-05-20T08:31:08Z","2015-07-06T15:14:41Z"
"","1443","Deal correctly with nested JAR resources","I have a project JAR (call it lib) containing a Bundle that exposes resources via the AssetsServlet. The resources live inside that JAR also. I am including this JAR as a dependency in another project (call it app) that uses the maven-spring-boot-plugin to create a self-contained, runnable JAR. When the asset servlet is hit, the code in lib attempts to load the resource. It fails in io.dropwizard.servlets.assets.ResourceUrl#isDirectory at this point:  ```                 String filename = resourceURL.getFile();                 filename = filename.substring(filename.indexOf('!') + 2);                 JarFile jarFile = e.getJarFile();                 ZipEntry zipEntry = jarFile.getEntry(filename);                 InputStream inputStream = jarFile.getInputStream(zipEntry); ```  filename starts out as: `jar:file:app.jar!/lib/lib.jar!/resource/file.txt`  The code converts it to: `lib/lib.jar!/resource/file.txt`  jarFile is set (correctly I think) to: `app.jar!/lib/lib.jar`  The call to `jarFile.getEntry` fails with the modified filename.  This PR uses `lastIndexOf('!')` to work around this problem and we end up with a call to get the entry `resource/file.txt` from the embedded JAR. Of course, this fix makes it impossible to correctly load a resource file with an ! in its name, so it might be better to use `lastIndexOf('.jar!')` instead to limit the damage.  Looking for alternative suggestions and ideas on how best to unit test this.","closed","improvement,","AlasdairBruce","2016-02-04T02:59:06Z","2016-03-16T15:14:59Z"
"","844","@Pattern constraint not working","I have a POJO method annotated with:  ``` @Pattern(regexp = ""^[A-Z_]{2,32}$"") ```  Despite that, JSON objects with a non-valid field are accepted.  Other constraints on other properties, like `@Size(min = 2, max = 64)` or `@NotNull` work fine.","closed","","ddossot","2015-01-12T14:37:17Z","2015-01-13T09:09:57Z"
"","1240","@UnitOfWork usable outside of Jersey Resource classes","I have a few use cases where I want to be able to use the slick transaction handling that `@UnitOfWork` provides within a backend service class that is not a Jersey resource.  As you may be aware, Spring has something similar to this  in the form of  [`@Transactional`](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/transaction.html#transaction-declarative-annotations).  There are Stack Overflow [answers](http://stackoverflow.com/questions/26411823/dropwizard-nested-transactions) to this problem where people have given the solution of manually wrapping your business logic transaction and there was also [blog post on using Hibernate DAOs within Dropwizard Tasks](http://spin.atomicobject.com/2015/02/03/dropwizard-hibernate-dao/).  I am simply asking if there is a **""best practice""** way to abstract some basic transaction handling (like what `@UnitOfWork` does without having to manually wrap my business logic with transaction handling code.  If there is no functionality as part of Dropwizard, then this could be a chance to add it to the Hibernate Bundle.","closed","","dotCipher","2015-08-27T00:15:18Z","2016-01-17T15:01:24Z"
"","799","DropwizardAppRule cannot be shared in a parent class.","I have 2 JUnit test classes that are sub-classes of a parent containing a DropwizardAppRule. While tests run correctly on the first class, the tests on the second will fail with a MalformedUrlException indicating a port equal to -2.  The reason is that the DropwizardAppRule.after() method stops the jettyServer within a try/catch which propagate any exception. When an exception occurs, the jettyServer member variable isn't nullified and the next attempt to start it within the same DropwizardAppRule instance will fail since the code believes the server is still up.  The fix is to make sure the jettyServer is nullified within a finally block; this way the jettyServer will be correctly restarted when the 2nd test class is executed. ##### Bugged  ``` java @Override     protected void after() {         resetConfigOverrides();         try {             jettyServer.stop();         } catch (Exception e) {             propagate(e);         }         jettyServer = null;     } ``` ##### Fixed  Note the addition of a finally block to ensure jettyServer is null once the test class completes.  ``` java @Override     protected void after() {         resetConfigOverrides();         try {             jettyServer.stop();         } catch (Exception e) {             propagate(e);         }         finally {             jettyServer = null;         }     } ```","closed","bug,","evanova","2014-11-27T18:15:53Z","2015-10-30T13:58:50Z"
"","774","GZipEncoder is forcibly enabled in DropwizardResourceConfig","I guess we need configuration for this instead of forcibly  ``` EncodingFilter.enableFor(this, GZipEncoder.class); ```  in `DropwizardResourceConfig` consturctor","closed","","alim-akbashev","2014-11-11T18:10:43Z","2015-01-11T12:00:24Z"
"","721","shade overlapping classes org.glassfish.jersey","I get the following warnings when running the shade plugin on the latest 0.8.0-SNAPSHOT  [WARNING] jersey-metainf-services-2.11.jar, jersey-common-2.11.jar define 205 overlappping classes:  [WARNING]   - org.glassfish.jersey.message.internal.HeaderValueException [WARNING]   - org.glassfish.jersey.message.internal.BasicTypesMessageProvider$1 [WARNING]   - org.glassfish.jersey.message.internal.XmlCollectionJaxbProvider$Text [WARNING]   - org.glassfish.jersey.message.internal.FormMultivaluedMapProvider [WARNING]   - org.glassfish.jersey.message.internal.HttpHeaderReader$1 [WARNING]   - org.glassfish.jersey.message.internal.VariantSelector$2 [WARNING]   - org.glassfish.jersey.message.internal.MessagingBinders [WARNING]   - org.glassfish.jersey.message.internal.XmlJaxbElementProvider$General [WARNING]   - org.glassfish.jersey.message.internal.HttpHeaderReader$8 [WARNING]   - org.glassfish.jersey.message.internal.StreamingOutputProvider [WARNING]   - 195 more... [WARNING] maven-shade-plugin has detected that some .class files [WARNING] are present in two or more JARs. When this happens, only [WARNING] one single version of the class is copied in the uberjar. [WARNING] Usually this is not harmful and you can skeep these [WARNING] warnings, otherwise try to manually exclude artifacts [WARNING] based on mvn dependency:tree -Ddetail=true and the above [WARNING] output [WARNING] See http://docs.codehaus.org/display/MAVENUSER/Shade+Plugin [INFO] Replacing original artifact with shaded artifact.","closed","","jangalinski","2014-10-01T19:03:50Z","2014-10-02T10:16:09Z"
"","701","How","I found that when I used Spring AOP on the project which used the dropwizard ,the resource which is adviced would be disappeared . how to solute it","closed","","zhilongweng","2014-09-04T10:08:30Z","2014-09-05T02:24:47Z"
"","788","Jersey filter documentation update","I found that the latest documentation was not quite up to date with filters in Jersey 2.x and have some suggestions for improvement for your review.","closed","documentation,","oddmar","2014-11-21T00:35:40Z","2014-11-26T09:28:27Z"
"","1420","Add ConfigurationParsingException tests","I found out that we currently don't have tests for handling errors during parsing and binding YAML configuration files. This changes fixes this by adding several tests: - A test that we print the `Did you mean?` suggestions on an unrecognized field in the configuration class. The suggestions are sorted based on an edit distance from the input. The limit is 5 suggestions. - A test that we print a detailed error message, when there are type data type errors during binding a YAML tree to the configuration class. - A test that we print a line number, a position of an error, and a parser error message, if a YAML file is malformed.  As a result, this provides the ability to catch regressions during Jackson and SnakeYAML updates.","closed","improvement,","arteam","2016-01-17T19:12:27Z","2016-01-24T08:03:41Z"
"","596","added documentation for tasks","I found it difficult to develop a `Task` without reading through the source, so I thought it'd be helpful to add some documentation.","closed","","stve","2014-05-23T18:21:33Z","2014-06-12T12:58:24Z"
"","1314","ConfigurationSourceProvider","I found a configuration source provider that works on resources very useful since _src/main/resources_ is already on the classpath.  ``` public class ResourceConfigurationSourceProvider implements ConfigurationSourceProvider {      @Override     public InputStream open(String path) throws IOException {         return getClass().getClassLoader().getResourceAsStream(path);     }   } ```","closed","improvement,","fzakaria","2015-10-29T01:30:20Z","2015-10-29T10:38:05Z"
"","900","Port binding for tests could fail more transparently","I forgot I had a ruby unicorn server running locally on port 8080. I then preceded to run DW test suite. DropwizardAppRuleWithoutConfigTest failed, stating that there wasn't message body provider for Map with mime type of html. I then proceeded to fitz with maven as travis CI said master was OK. I was really confused until I debugged some more, and realized the test was actually receiving a response from the already running server which the client (test) didn't understand.  For some reason, jetty doesn't throw an exception on binding to the port already in use. I suspect it's because one is IPv4 and the other is IPv6, but I'm not sure. I don't think this is a big issue. I just wanted to share my story, and see if anyone knew why the double binding didn't result in an exception.  => lsof -i :8080 COMMAND   PID         USER   FD   TYPE            DEVICE SIZE/OFF NODE NAME ruby    50344 carlobarbara    9u  IPv4 0x11cd9d75f1dfc8d      0t0  TCP *:http-alt (LISTEN) ruby    50364 carlobarbara    9u  IPv4 0x11cd9d75f1dfc8d      0t0  TCP *:http-alt (LISTEN) java    51420 carlobarbara  119u  IPv6 0x11cd9d769b8483d      0t0  TCP *:http-alt (LISTEN)","closed","","carlo-rtr","2015-02-26T01:59:43Z","2016-10-22T15:52:47Z"
"","873","Throwing exception to the client","I followed the instructions here http://dropwizard.io/manual/core.html#error-handling but nothing is being throwed to the client.  I must inherit the WebApplicationException or do I can throw directly a WebApplicationException object? I just need to throw it from a resource method?  Any more concrete example on internet? The documentation is not good on this part  PS: I' m really enjoying using this framework. Lot of hours saved!","closed","","edpichler","2015-02-02T00:52:51Z","2016-03-01T01:10:07Z"
"","941","[Reissuing] How to set the applicationContextPath when using SSL on 0.7.1 version?","I followed the documentation (http://dropwizard.io/manual/configuration.html) and it's not working.  Documentation said: _""HTTPS: Extends the attributes that are available to the HTTP connector Default: Extends the attributes that are available to all servers""_  I'm using this configuration:  ``` server: #  softNofileLimit: 1000 #  hardNofileLimit: 1000   type: default   applicationContextPath: /v1   #adminContextPath: /admin   applicationConnectors:     - type: http       port: 8080     - type: https       port: 8443       keyStorePath: my.keystore       keyStorePassword: 123456       validateCerts: false   adminConnectors:     - type: http       port: 8081     - type: https       port: 8444       keyStorePath: my.keystore       keyStorePassword: 123456       validateCerts: false ```  This error is being throw:  ``` server.yml has an error:  * Unrecognized field at: server.applicationContextPath     Did you mean?:       - applicationConnectors       - adminConnectors       - adminMinThreads       - allowedMethods       - adminMaxThreads         [15 more] ```  How do I configure the context path when SSL?","closed","","edpichler","2015-03-13T14:16:46Z","2015-03-13T19:36:13Z"
"","784","rootPath name, validation and docs","I finally upgraded to master, but it take me really much time to figure out why nothing was working at first time.  This was due to `rootPath` configuration parameter. From the docs [configuration page](http://dropwizard.io/0.8.0-rc1/docs/manual/configuration.html#man-configuration-all), this parameter default is `/`.  So i've configured my app with `rootPath : /api/`. But it doesn't work because `rootPath` real default is `/*` (https://github.com/dropwizard/dropwizard/blob/master/dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java#L229-L230).  0.8.0 is still not released, but the path parameters `rootPath` `applicationContextPath` and `adminContextPath` are confusing. Maybe `rootPath` could be renamed as `resourcesPathSpec` because it's only for resources (others bundles will lie in applicationContextPath), it's a pathSpec (jersey denomination) that must terminate with a wildcard to work. It should also be validated as a valid pathSpec at configuration time.  Another solution could be to keep the parameter like this, and add the wildcard if missing ?","closed","","Toilal","2014-11-20T14:50:01Z","2015-04-16T13:15:22Z"
"","1174","documentation in getting started should have the root URI","I faced https://github.com/dropwizard/dropwizard/issues/1058 and only after debugging into the dropwizard code, did I realise the problem. But the getting-started guide says nothing about this. It should be modified accordingly so that others don't have to go through this problem.","closed","","abhishekagarwal87","2015-07-16T15:56:58Z","2015-11-25T19:21:35Z"
"","1537","NullPointerException when using @Valid with HttpClientConfiguration","I faced an NPE when adding `@Valid` to my HTTP client configuration:  ``` java   @Valid   @NotNull   @JsonProperty(""http"")   private HttpClientConfiguration httpClient; ```  The issue is due to `@UnwrapValidatedValue` that is validated for `userAgent` and it's not cleaned up for the next attribute so it tries to apply it to `maxConnections`, for example.  DW version: 0.9.2  ``` java     //ValueContext.java #191     public final Type getTypeOfAnnotatedElement() {         return validatedValueHandler != null ? validatedValueHandler.getValidatedValueType( typeOfAnnotatedElement ) : typeOfAnnotatedElement;     } ```  After validating the wrapped attribute, `validatedValueHandler` is no longer null and tries to do the same logic to an `int`, for example, failing in the method below:  ``` java    //OptionalValidatedValueUnwrapper.java #26     public Type getValidatedValueType(Type type) {         ResolvedType resolvedType = this.resolver.resolve(type, new Type[0]);         return ((ResolvedType)resolvedType.typeParametersFor(Optional.class).get(0)).getErasedType();     } ```  In order to reproduce, just add `@Valid` to `HttpClientConfiguration`.","closed","","danielfc","2016-05-06T21:38:00Z","2016-05-31T11:18:57Z"
"","1513","Register the default MetricRegistry as the ""default""","I end up doing this a lot in my code so I can reference the `MetricRegistry` throughout my app.","closed","improvement,","jplock","2016-04-06T20:54:14Z","2016-09-07T09:48:21Z"
"","907","Performance degradation in 0.8.0-rc4","I discovered that simple app using hibernate degrades in performance from 12k req/sec to 2.2k req/sec when switching dropwizard version from 0.7.1 to 0.8.0-rc4.  Steps to reproduce: 1. `git clone git@github.com:kenota/dropwizard-perf-issue.git` 2. `cd dropwizard-perf-issue` 3. `gradle singleJar` 4. `java -jar ./build/libs/app.jar server hello-world.yml  > /dev/null`  At this point you should run some benchmark, against http://localhost:8080/video-hibernate URL. I was able to achieve 12k req/sec using 50 threads on my MacbookPro. 1. Ctrl+C to stop the running app 2. Uncomment `dropwizardVersion = ""0.8.0-rc4""` line in `build.gradle` and comment out `dropwizardVersion = ""0.7.1""` 3. `gradle singleJar` 4. `java -jar ./build/libs/app.jar server hello-world.yml  > /dev/null`  Run benchmark again. At this point, I was able to get only 2.2k req/sec using same 50 threads.  [Repo with code showing problem](https://github.com/kenota/dropwizard-perf-issue)","closed","","kenota","2015-02-27T13:31:08Z","2015-03-01T17:32:31Z"
"","586","Allow configuration of stackTracePattern via SyslogAppenderFactory","I came across an issue using syslog whereby tabs `\t` were escaped with `#011` in our logs. Considering this is an option configurable on the appender, it'd be useful to expose it via `SyslogAppenderFactory`.  In my particular case, the ops guys weren't keen to change rsyslog config because of the risk of impacting other existing apps. It's also conceivable that some deployments may want to use other patterns for stack traces.  I've changed the docs to reflect the additional configuration parameter.","closed","improvement,","stuartgunter","2014-05-20T19:34:04Z","2014-07-09T16:01:03Z"
"","1471","Getting Unauthorized response of signin api in test case","I am writing automated test cases for sign in api. I am constantly getting `Unauthorized` response from signin api, it's working fine in production server.  ``` public class SigninResourceTest extends ResourceTest {     private static final UserDAO userDao = mock(UserDAO.class);     private static final AccessTokenDAO tokenDao = mock(AccessTokenDAO.class);      @ClassRule     public static final ResourceTestRule resources = ResourceTestRule.builder()             .addProvider(AuthFactory.binder(new BasicAuthFactory(new SimpleAuthenticator(userDao), ""realm"", User.class)))             .addResource(new SigninResource(userDao, tokenDao))             .build();      private static Optional user;      @Before     public void setup() {         final String userName = ""xyz1988"";         final String password = ""xyz@1988"";         final String emailId = ""xyz1988@gmail.com"";         user = Optional.of(new User(1, userName, password, emailId));          when(userDao.findUserByUsername(any(String.class))).thenReturn(user);     }      @After     public void tearDown() {         reset(userDao);         reset(tokenDao);     }      private Response signin(String username, String password) {         String usernameAndPassword = username + "":"" + password;         String authorizationHeaderValue = ""Basic "" + java.util.Base64.getEncoder().encodeToString( usernameAndPassword.getBytes() );         return resources.client().target(""/api/v1/signin"").request()                 .header(HttpHeaders.AUTHORIZATION, authorizationHeaderValue).get();     }      @Test(timeout = API_TIMEOUT)     public void signInWithProperCredentials() {         final String username = ""xyz1988"";         final String password = ""xyz@1988"";         final Response response = signin(username, password);         Assertions.assertThat(response.getStatusInfo()).isEqualTo(Response.Status.OK);     } ```  ``` public class ResourceTest {     public static final int API_TIMEOUT = 10000; // milliseconds      public static final Environment environment = mock(Environment.class);     public static final JerseyEnvironment jersey = mock(JerseyEnvironment.class);     public static final MyApplication application = mock(MyApplication.class);     public static final MyConfiguration config = mock(MyConfiguration.class);      @Before     public void setup() throws Exception {         when(environment.jersey()).thenReturn(jersey);         application.run(config, environment);     } } ```  ``` public class SimpleAuthenticator implements         Authenticator { // Authentication code here } ```  `0.8.2`  Thanks!","closed","","bipinvaylu","2016-03-02T20:43:49Z","2017-02-08T18:40:48Z"
"","970","Unable to use ResourceTestRule with individual unit tests","I am using DW 0.8.0.  I am trying to test my resources by creating an instance of ResourceTestRule in setUp() method of my unit test in the following way -   ``` java  @Rule private ResourceTestRule testRule;  @Before public void setUp() throws Exception {     testRule = ResourceTestRule.builder().setMapper(objectMapper).build(); }  ```  However whenever I call testRule.client() after executing above code, I am getting NullPointerException. This is due to the fact that JerseyTest instance variable is not getting initialized.  However JerseyTest is getting initialized when I am using static variable with ClassRule annotation -   ``` java @ClassRule public static ResourceTestRule testRule;  static {     testRule = ResourceTestRule.builder().setMapper(objectMapper).build(); } ```  Am I missing something ? Is there any initialization step which is a prerequisite for running tests ?","closed","","r0goyal","2015-04-05T01:02:47Z","2015-04-09T18:35:02Z"
"","1350","Add support for 'layout-aware' Dropwizard Views","I am using `dropwizard-views-freemarker` and am loving it so far, with one exception.  Freemarker doesn't natively support the concept of ""**layouts**""; that is, ways of saying ""_Hey, this page/FTL here uses a prescribed 'layout' that needs to be a applied at runtime._"" A typical layout might be:  ```    ```  With Freemarker, the only way to accomplish this layout is to repeat it (over and over again) inside each and every FTL file:  ``` fizz.ftl ====== <#include ""header.ftl"">  <#include ""footer.ftl"">  buzz.ftl ====== <#include ""header.ftl"">  <#include ""footer.ftl""> ```  This repetition of importing the header/footer inside _each and every FTL_ makes for annoying copy pasta that becomes a nightmare to maintain over time.  **Ideally**, there would be some way in Freemarker to define a layout:  ``` layout.ftl ======== <#include ""header.ftl""> <@content> <#include ""footer.ftl""> ```  And then, for each page/view/FTL, you just say ""_Freemarker, this FTL uses the 'layout.ftl' layout, so inject its content in lieu of the `<@content>` portion of that layout._"" That way, you might have pages that look like:  ``` fizz.ftl ====== <#applyLayout ""layout.ftl"">  ```  etc. Anyone with Grails experience will attest that this ""layout"" concept is well implemented in that framework. **Unfortunately, Freemarker does not support such a concept**, but there is a generally accepted solution for accomplishing it:  ``` layout.ftl ======== <#include ""header.ftl""> <#include body> <#include ""footer.ftl"">  // Then, in Java, every time you go to render a template (in this case, fizz): dataModel.put(""body"", ""fizz.ftl""); configuration.getTemplate(""layout.ftl"").process(dataModel, ostream); ```  --- ### Feature request:  > Add the concept of ""layout aware"" Dropwizard views.  Since I am only (selfishly) interested in seeing this feature in DW Views Freemarker, and since I only have experience with Freemarker (not Mustache), I can only venture a guess as to how this would work in the Freemarker binding jar.  It does not appear possible to access the `ViewRenderer` nor the Freemarker `Configuration` class from any of the code that the application has access to. Instead, it seems that the DW `ViewBundle` looks for a Java service at runtime called `io.dropwizard.views.ViewRenderer` (which it looks for under `META-INF/services/`). So obviously, in the Freemarker binding jar, the value for this class-to-load is `io.dropwizard.views.freemarker.FreemarkerViewRenderer`.  Unless someone with better-trained-eyes-than-myself can weigh in here, I think this would require the addition of a whole new (optional) layout-aware set of classes:  ``` // Groovy pseudo-code abstract class LayoutAwareView extends View {     String layoutName // 'layout.ftl' }  class LayoutAwareFreemarkerViewRenderer extends FreemarkerViewRenderer {     @Override     void render(View view, Locale locale, OutputStream output) throws IOException {         // Again, rough pseudo-code         if(LayoutAwareView.isAssignableFrom(view.class)) {             // Implement the generally-accepted Freemarker solution mentioned above using             // the new 'view.layoutName' property.         } else {             // Implement normal FreemarkerViewRenderer functionality.         }     } } ```  The contents of the `dropwizard-views-freemarker#META-INF/services/io.dropwizard.views.ViewRenderer` file could then be:  ``` io.dropwizard.views.freemarker.FreemarkerViewRenderer io.dropwizard.views.freemarker.LayoutAwareFreemarkerViewRenderer ```  The only thing I haven't worked out so far would be how to make the selection of those two renderers configurable.  Thoughts? Criticisms? Hate mail?","closed","","ghost","2015-11-22T12:16:13Z","2016-05-25T13:14:26Z"
"","1243","swagger ui stuck at ""fetching resource list:"" (Uncaught TypeError: Cannot read property 'length' of null)","I am trying to integrate swagger in the application and swagger ui is stuck at ""fetching resource list: /api/swagger.json""  F12 on the browser indicates the below issue @ swagger-client.js line no. 626  Uncaught TypeError: Cannot read property 'length' of null  swagger-client.js: line no. 626 if(typeof param['enum'] !== 'undefined') {  I am using dropwizard-swagger 0.7 version with swagger-core / swagger-annotation / swagger-jaxrs / swagger-jersey2-jaxrs version of 1.5.1-M2.  I have tried to direct access the /api/swagger.json and I think the problem seems to be below ""null"" parameters returned in the json.  Any thoughts on the issue.  parameters: [ { name: ""type"", in: ""query"", description: null, required: false, type: ""string"", items: null, collectionFormat: null, default: null, pattern: null, format: null, enum: null }","closed","","saurabhsyzhi","2015-09-01T00:02:55Z","2015-09-01T08:42:38Z"
"","1262","WebSocketEnvironment","I am trying to integrate jetty 9 websockets with dw without any additional libraries. Has anybody done this ?  A WebSocketEnvironment similar to ServletEnvironment will be great feature for this.","closed","","crudbug","2015-09-27T20:46:57Z","2015-11-25T18:31:57Z"
"","561","JDK version for Dropwizard 0.7.0","I am trying to convert my company's DW 0.6.2 applications to DW 0.7.0-rc3, but it seems that the DW 0.7.0-rc3 artifacts are all compiled with Java 7. As my compnay is still on Java 6, is it possible that DW 0.7.0 release with Java 6?","closed","","tongguop","2014-05-03T20:40:16Z","2014-05-05T21:51:19Z"
"","550","Could not resolve dependencies for project io.dropwizard:dropwizard-example:jar:0.7.1-SNAPSHOT:","I am trying to compile dropwizard 0.7.1 and I get the following error:  Failed to execute goal on project dropwizard-example: Could not resolve dependencies for project io.dropwizard:dropwizard-example:jar:0.7.1-SNAPSHOT: The following artifacts could not be resolved: io.dropwizard:dropwizard-core:jar:0.7.1-SNAPSHOT, io.dropwizard:dropwizard-auth:jar:0.7.1-SNAPSHOT, io.dropwizard:dropwizard-assets:jar:0.7.1-SNAPSHOT, io.dropwizard:dropwizard-spdy:jar:0.7.1-SNAPSHOT, io.dropwizard:dropwizard-hibernate:jar:0.7.1-SNAPSHOT, io.dropwizard:dropwizard-migrations:jar:0.7.1-SNAPSHOT, io.dropwizard:dropwizard-views-freemarker:jar:0.7.1-SNAPSHOT, io.dropwizard:dropwizard-views-mustache:jar:0.7.1-SNAPSHOT: Could not find artifact io.dropwizard:dropwizard-core:jar:0.7.1-SNAPSHOT in sonatype-nexus-snapshots (http://oss.sonatype.org/content/repositories/snapshots) -> [Help 1]  These files are not on sonatype-nexus-snapshots server.","closed","","lagrwilson","2014-04-23T18:22:54Z","2015-01-19T09:30:57Z"
"","1058","Warn about changes to applicationContextPath","I am trying out Dropwizard and really like it so far, but I was nearly tempted to give up during the Getting Started tutorial. I have an application that binds to port 8080, so I modified my example Dropwizard app to use another port, copying the simple server factory config from https://github.com/dropwizard/dropwizard/blob/master/dropwizard-example/example.yml for convenience. Unbeknownst to me, this changed the applicationContextPath from `""/""` to `""/application""`, and I spent several hours wondering why my application seemed to be running without error but I kept getting 404 errors when I went to the paths that the tutorial suggested, which also matched what the application log had printed out. Perhaps there could be a warning of this effect in the sample YAML file. Or better yet, perhaps the application log could print out the `applicationContextPath` on startup, and show it in the paths of resources that are registered. There's an inconsistency when the log says that the path for a resource is `GET    /hello` but the server returns a 404 status unless you request `GET    /application/hello`.","closed","","scathers","2015-05-20T07:34:36Z","2015-05-26T07:20:14Z"
"","850","UnitOfWorkApplicationListener.java commits transaction after exception is thrown in a request.","I am on 0.8.0-rc2  After an exception is thrown in the request, RESOURCE_METHOD_FINISHED event is dispatched first, then ON_EXCEPTION event is dispatched, so we have two problems with the following code: 1. Transaction is committed when exception is thrown. It should be rolled back. 2. If the commit fails, the original exception is lost, replaced by a database exception.  My recommended fix is to check for existing exceptions in RESOURCE_METHOD_FINISHED.   ``` java @Override public void onEvent(RequestEvent event) {     if (event.getType() == RequestEvent.Type.RESOURCE_METHOD_START) {         this.unitOfWork = this.methodMap.get(event.getUriInfo()                 .getMatchedResourceMethod().getInvocable().getDefinitionMethod());         if (unitOfWork != null) {             this.session = this.sessionFactory.openSession();             try {                 configureSession();                 ManagedSessionContext.bind(this.session);                 beginTransaction();             } catch (Throwable th) {                 this.session.close();                 this.session = null;                 ManagedSessionContext.unbind(this.sessionFactory);                 throw th;             }         }     }     else if (event.getType() == RequestEvent.Type.RESOURCE_METHOD_FINISHED) {         if (this.session != null) {             try {                 commitTransaction();             } catch (Exception e) {                 rollbackTransaction();                 this.rethrow(e);             }             finally {                 this.session.close();                 this.session = null;                 ManagedSessionContext.unbind(this.sessionFactory);             }         }     }     else if (event.getType() == RequestEvent.Type.ON_EXCEPTION) {         if (this.session != null) {             try {                 rollbackTransaction();             }             finally {                 this.session.close();                 this.session = null;                 ManagedSessionContext.unbind(this.sessionFactory);             }         }     } } ```","closed","bug,","lhcjackson-toast","2015-01-15T16:26:54Z","2015-03-06T21:24:32Z"
"","1329","ERROR [0.8 -> 0.9] @Auth No injection source found","I am migrating from 0.8 to 0.9, one of the methods has @Auth, jersey is throwing an error  ```     @POST     @Path(""/auth/"")     @Timed(name = ""collect-post-auth"")     @Consumes(MediaType.APPLICATION_JSON)     @Produces(MediaType.APPLICATION_JSON)     public Response consumeEvent(@Context HttpServletRequest hsr, @Auth User user, @Valid Event event) { ```  ``` WARNING: No injection source found for a parameter of type public javax.ws.rs.core.Response io.example.resource.Collect.consumeEvent(javax.servlet.http.HttpServletRequest,io.example.model.User,io.example.event.Event) at index 1. ```  ``` WARN  [2015-11-07 16:25:10,071] /: unavailable ! org.glassfish.jersey.server.model.ModelValidationException: Validation of the application resource model has failed during application initialization. ! [[FATAL] No injection source found for a parameter of type public javax.ws.rs.core.Response io.example.resource.CollectResource.consumeEvent(javax.servlet.http.HttpServletRequest,io.example.model.User,io.example.event.Event) at index 1.; source='ResourceMethod{httpMethod=POST, consumedTypes=[application/json], producedTypes=[application/json], suspended=false, suspendTimeout=0, suspendTimeoutUnit=MILLISECONDS, invocable=Invocable{handler=ClassBasedMethodHandler{handlerClass=class io.example.resource.CollectResource, handlerConstructors=[org.glassfish.jersey.server.model.HandlerConstructor@1acb74ad]}, definitionMethod=public javax.ws.rs.core.Response io.example.resource.CollectResource.consumeEvent(javax.servlet.http.HttpServletRequest,io.example.model.User,io.example.event.Event), parameters=[Parameter [type=interface javax.servlet.http.HttpServletRequest, source=null, defaultValue=null], Parameter [type=class io.example.model.User, source=null, defaultValue=null], Parameter [type=class io.example.event.Event, source=null, defaultValue=null]], responseType=class javax.ws.rs.core.Response}, nameBindings=[]}', [FATAL] No injection source found for a parameter of type public javax.ws.rs.core.Response  ! at org.glassfish.jersey.server.ApplicationHandler.initialize(ApplicationHandler.java:555) ~[jersey-server-2.22.1.jar:na] ! at org.glassfish.jersey.server.ApplicationHandler.access$500(ApplicationHandler.java:184) ~[jersey-server-2.22.1.jar:na] ! at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:350) ~[jersey-server-2.22.1.jar:na] ! at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:347) ~[jersey-server-2.22.1.jar:na] ! at org.glassfish.jersey.internal.Errors.process(Errors.java:315) ~[jersey-common-2.22.1.jar:na] ! at org.glassfish.jersey.internal.Errors.process(Errors.java:297) ~[jersey-common-2.22.1.jar:na] ! at org.glassfish.jersey.internal.Errors.processWithException(Errors.java:255) ~[jersey-common-2.22.1.jar:na] ! at org.glassfish.jersey.server.ApplicationHandler.(ApplicationHandler.java:347) ~[jersey-server-2.22.1.jar:na] ! at org.glassfish.jersey.servlet.WebComponent.(WebComponent.java:390) ~[jersey-container-servlet-core-2.22.1.jar:na] ! at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:172) ~[jersey-container-servlet-core-2.22.1.jar:na] ! at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:364) ~[jersey-container-servlet-core-2.22.1.jar:na] ! at javax.servlet.GenericServlet.init(GenericServlet.java:244) ~[javax.servlet-api-3.1.0.jar:3.1.0] ! at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:612) [jetty-servlet-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:395) [jetty-servlet-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:871) [jetty-servlet-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:298) [jetty-servlet-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:741) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:103) [metrics-jetty9-3.1.2.jar:3.1.2] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.handler.RequestLogHandler.doStart(RequestLogHandler.java:140) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:232) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.Server.start(Server.java:387) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.server.Server.doStart(Server.java:354) [jetty-server-9.2.13.v20150730.jar:9.2.13.v20150730] ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) [jetty-util-9.2.13.v20150730.jar:9.2.13.v20150730] ! at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:43) [dropwizard-core-0.9.1.jar:0.9.1] ! at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:41) [dropwizard-core-0.9.1.jar:0.9.1] ! at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:77) [dropwizard-core-0.9.1.jar:0.9.1] ! at io.dropwizard.cli.Cli.run(Cli.java:70) [dropwizard-core-0.9.1.jar:0.9.1] ! at io.dropwizard.Application.run(Application.java:80) [dropwizard-core-0.9.1.jar:0.9.1] ```","closed","","crudbug","2015-11-07T16:54:02Z","2015-11-07T17:36:32Z"
"","1189","Error while starting the application using java -jar","I am getting the following error while I start the server using ""java -jar abc.jar server configuration.yml""  Exception in thread ""main"" java.lang.VerifyError: class com.fasterxml.jackson.datatype.guava.deser.HostAndPortDeserializer overrides final method deserialize.(Lcom/fasterxml/jackson/core/JsonParser;Lcom/fasterxml/jackson/databind/DeserializationContext;)Ljava/lang/Object;         at java.lang.ClassLoader.defineClass1(Native Method)         at java.lang.ClassLoader.defineClass(ClassLoader.java:800)         at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)         at java.net.URLClassLoader.defineClass(URLClassLoader.java:449)         at java.net.URLClassLoader.access$100(URLClassLoader.java:71)         at java.net.URLClassLoader$1.run(URLClassLoader.java:361)         at java.net.URLClassLoader$1.run(URLClassLoader.java:355)         at java.security.AccessController.doPrivileged(Native Method)         at java.net.URLClassLoader.findClass(URLClassLoader.java:354)         at java.lang.ClassLoader.loadClass(ClassLoader.java:425)         at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)         at java.lang.ClassLoader.loadClass(ClassLoader.java:358)         at com.fasterxml.jackson.datatype.guava.GuavaModule.setupModule(GuavaModule.java:22)         at com.fasterxml.jackson.databind.ObjectMapper.registerModule(ObjectMapper.java:537)         at io.dropwizard.jackson.Jackson.configure(Jackson.java:41)         at io.dropwizard.jackson.Jackson.newObjectMapper(Jackson.java:23)         at io.dropwizard.setup.Bootstrap.(Bootstrap.java:64)         at io.dropwizard.Application.run(Application.java:68)","closed","","zarub2k","2015-07-25T18:16:53Z","2017-05-08T09:34:31Z"
"","704","DropwizardResourceConfig does not support reload","I am building an extension framework on top of dropwizard that requires the resource config to be reloaded. Unfortunately, Dropwizard extends ScanningResourceConfig unnecessarily, and does not init it properly, which causes a NullPointerException when ResourceConfig.onReload() is called. Instead, DropwizardResourceConfig should probably extend DefaultResourceConfig.","closed","","jnaous","2014-09-09T22:58:05Z","2015-03-17T20:40:06Z"
"","1156","Expose the application configuration with information about the source","I am a member of an organization which actively uses dropwizard to develop its services. I have to say it is a really nice framework, carefuly thought out, a pleasure to use.  I have recently started out with a task an I found a feature in dropwizard which IMHO is missing.  I would like to be able to print out the configuration which was used to start the application along with what is the source of the configuration parameter.  I'd like to see something like this in the startup log of the application:  ``` log Starting application ${APPLICATION_NAME} Configuration parameters passed to the application:     server.applicationConnectors.[0].type = ""http""           default     server.applicationConnectors.[0].port = ""9100""          json/yaml     server.adminConnectors.[0].type = ""http""                   default     server.adminConnectors.[0].port = 9101                    jvm param . . .  ```  I would be more than glad implementing this, but I'd need first of all your acceptance on the whole idea. Of course some pointers/directions are more than welcome.","closed","stale,","kmejka","2015-07-08T10:26:57Z","2019-09-03T00:01:04Z"
"","921","Dbi shortcircuit","https://groups.google.com/d/msg/dropwizard-user/SLi4deSPXus/Q0Bz1De_vfYJ","closed","","carlo-rtr","2015-03-05T19:34:24Z","2015-04-01T01:41:55Z"
"","913","ViewRenderers should be configurable","https://groups.google.com/d/msg/dropwizard-dev/XrVjYsBXl8w/DaMcvXqq054J  https://groups.google.com/d/msg/dropwizard-user/EJM_Wx2YDV4/zuEntG6V9AcJ","closed","","carlo-rtr","2015-03-04T14:10:09Z","2015-03-04T19:00:55Z"
"","1033","Initial draft of the migration guide to 0.9.X","https://github.com/dropwizard/dropwizard/wiki/Upgrade-guide-0.8.x-to-0.9.x","closed","","carlo-rtr","2015-05-06T13:29:04Z","2015-05-20T20:57:54Z"
"","1504","configures the context paths before the application.run()","https://github.com/dropwizard/dropwizard/pull/1503 including a build fix","closed","improvement,","qinfchen","2016-03-31T14:34:02Z","2016-03-31T16:30:06Z"
"","926","docs for ViewBundle configuration","https://github.com/dropwizard/dropwizard/issues/925","closed","","carlo-rtr","2015-03-07T01:28:58Z","2015-03-08T15:19:40Z"
"","914","allow view renderer configuration","https://github.com/dropwizard/dropwizard/issues/913","closed","","carlo-rtr","2015-03-04T16:40:58Z","2015-04-01T01:42:45Z"
"","945","Auth rewrite using filters","https://github.com/dropwizard/dropwizard/issues/768","closed","","carlo-rtr","2015-03-16T19:19:48Z","2015-03-26T13:02:59Z"
"","713","issue 711 fix matches logic in BaseReporterFactory","https://github.com/dropwizard/dropwizard/issues/711 1. If include list is empty and exclude list is empty, everything should be included  2. If include list is NOT empty and exclude list is empty, only the ones specified in the list should be included 3. if include list is empty and exclude list is NOT empty, everything should be included except the ones in the exclude list 4. if include list is NOT empty and exclude list is NOT empty, everything should be included except the ones that are not in the include list AND are in the exclude list","closed","","qinfchen","2014-09-25T17:26:14Z","2015-02-22T05:03:07Z"
"","1423","Add a note to jersey maxThread configuration documentation","https://github.com/dropwizard/dropwizard/issues/1375 It's a little difficult for me to explain the situation in the documentation, but I did my best :). I can update it as you see fit.  I could also move it to above like this note: ![image](https://cloud.githubusercontent.com/assets/5628051/12396950/7bb56578-be0a-11e5-87fc-75a0b4e2b6cd.png)","closed","documentation,","natnan","2016-01-18T16:41:08Z","2016-01-21T21:51:41Z"
"","1179","make connection pool shared by default","https://github.com/dropwizard/dropwizard/issues/1160","closed","","carlo-rtr","2015-07-21T20:12:55Z","2015-07-21T23:02:07Z"
"","1135","massage commit messages into release notes","https://github.com/dropwizard/dropwizard/issues/1120","closed","documentation,","carlo-rtr","2015-06-26T01:43:00Z","2015-06-26T08:42:18Z"
"","1132","Use Bearer realm for OAuth","https://github.com/dropwizard/dropwizard/issues/1120","closed","documentation,","carlo-rtr","2015-06-25T13:36:30Z","2015-06-25T14:05:04Z"
"","1246","Make DropwizardApacheConnectorTest runnable in Travis CI","https://github.com/dropwizard/dropwizard/commit/17961d8838ca614f811debf98f79986fea271f71","closed","bug,","carlo-rtr","2015-09-02T19:21:45Z","2016-06-06T08:14:58Z"
"","712","Documentation bug - mockito any does not assert specific class type","https://dropwizard.github.io/dropwizard/manual/core.html#testing-applications gives a misleading/incorrect example for a unit test that verifies a particular resource's registation. All this unit test actually does is verify that register was called at least once with some argument, since Mockito's any() method does not provide a specific type.  From their javadoc: ""Any kind object, not necessary of the given class. The class argument is provided only to avoid casting."".  See http://docs.mockito.googlecode.com/hg/latest/org/mockito/Matchers.html#any(java.lang.Class)  Thus, if the test was:  verify(jersey).register(any(BahResource.class));  and the application actually had:  environment.jersey().register(new GoatResource());  ...the test would erroneously pass.","closed","documentation,","flavor8","2014-09-24T20:13:22Z","2014-09-27T09:37:23Z"
"","639","Remove getters/setters from examples and use Lombok instead","https://dropwizard.github.io/dropwizard/manual/core.html#configuration says  > In order to keep your configuration file and class manageable, we recommend grouping related configuration parameters into independent configuration classes.  Which I find...funny.  Removing getters/setters and using Lombok instead would improve manageability a lot more. For example here's my `Saying` class from the intro tutorial:  ``` java import com.fasterxml.jackson.annotation.JsonProperty; import lombok.AllArgsConstructor; import lombok.Getter; import org.hibernate.validator.constraints.Length;  @Getter @AllArgsConstructor public class Saying {   @JsonProperty   private long id;    @JsonProperty   @Length(max = 3)   private String content;    public Saying() {     // Jackson deserialization   } } ```  Or the `HelloWorldConfiguration`:  ``` java import com.fasterxml.jackson.annotation.JsonProperty; import io.dropwizard.Configuration; import lombok.Getter; import lombok.Setter; import org.hibernate.validator.constraints.NotEmpty;  @Getter @Setter public class HelloWorldConfiguration extends Configuration {   @NotEmpty   @JsonProperty   private String template;    @NotEmpty   @JsonProperty   private String defaultName = ""Stranger""; } ```","closed","","marcelstoer","2014-06-30T20:14:07Z","2014-07-01T04:51:29Z"
"","670","client documentation uses environment.addResource()","https://dropwizard.github.io/dropwizard/manual/client.html Not quite sure if older version of code is intended to be here. dw-core doc uses jersey().register","closed","documentation,","scientist1642","2014-07-31T23:54:58Z","2014-08-01T08:28:44Z"
"","1497","liquibase db dump not working","https://dropwizard.github.io/dropwizard/0.9.2/docs/manual/migrations.html  suggests that `java -jar hello-world.jar db dump helloworld.yml` will generate a liquibase schema. I've definitely got a non-empty db, configured like:  ```   database:     driverClass: org.h2.Driver     user: username     password: super_secret     url: jdbc:h2:./target/mydb ```  I've added the correct bundle, and the command executes but outputs an empty xml tree:  ```   ```","closed","","devinrsmith","2016-03-28T22:12:20Z","2016-07-28T20:25:39Z"
"","1519","Broken link to metrics.codahale.com in dropwizard getting started","http://www.dropwizard.io/0.9.2/docs/getting-started.html#metrics-for-metrics links to http://metrics.codahale.com/ which is a broken link.","closed","","mcpherrinm","2016-04-15T20:36:50Z","2016-04-19T20:59:50Z"
"","1524","Should update logback.version version to 1.1.7","http://mvnrepository.com/artifact/ch.qos.logback/logback-classic","closed","","timmolter","2016-04-19T15:04:41Z","2016-04-20T08:20:32Z"
"","564","Health check docs are incorrect","http://dropwizard.github.io/dropwizard/manual/core.html#health-checks  It still shows the check name in the constructor as   ``` super(""database"") ```  instead  of     environment.register(""database"", new DatabaseHealthCheck());","closed","documentation,","jacek99","2014-05-09T18:35:28Z","2014-05-10T09:44:53Z"
"","1031","Don't override the JVM timezone in a Hibernate integration test","HSQLDB correctly retrieves a timestamp from the DB in the JVM timezone, Jadira converts it to DateTime and then Jackson serializes it to JSON in UTC.  So all assertions in UTC will pass regardless of the JVM timezone.","closed","","arteam","2015-05-04T09:13:28Z","2016-01-24T08:06:43Z"
"","624","how to set contextpath in dropwizard6.2 ?","how to set contextpath in dropwizard6.2 ? like applicationContextPath: /application in 7.0.","closed","","kaelrock","2014-06-19T06:56:21Z","2014-06-23T20:37:54Z"
"","888","Re-open an issue","How does one request that an issue be re-opened?  Or should it be listed as a new issue?","closed","","eepstein","2015-02-22T05:40:21Z","2015-02-22T07:43:01Z"
"","1223","Upgrade to jersey 2.21","Hot on the heels of 2.20 is [2.21](https://github.com/jersey/jersey/releases/tag/2.21)","closed","feature,","nickbabcock","2015-08-17T20:27:41Z","2015-08-18T09:57:52Z"
"","1023","@Auth principal injection","Hopefully this eases the burden on the transition","closed","security,","carlo-rtr","2015-04-29T19:16:04Z","2015-05-06T05:51:05Z"
"","1429","Updated to Hibernate 5.0.7","Hibernate 5 has been out for a while; there are a few patch releases and it seems fairly stable, so I updated the dropwizard-hibernate module to use Hibernate 5.  This is a big advantage to people who want to use Java 8 time classes such as Instant, because they won't have to include extra Jadira jars to make hibernate persist the new types.  I'm not aware of any downside since those not using Java 8 can still use the Jadira support for Joda time etc. as before.","closed","improvement,","ant3","2016-01-25T23:04:17Z","2016-09-23T06:33:52Z"
"","569","Refactor Duration and Size a bit","Hi. I don't know if refactoring pull-requests are considering for merging, but I'm making a try. If they are not, then it could be a good point for starting a discussion or review.  It's a little refactoring of Duration and Size util classes. Just adding simplicity and reducing overhead. Changes: - Initialize suffixes at one shot  - Delegate whitespace handling to the regex  - Remove redundant checking on unit type from the regex - Derive count and unit from the regex matching result - Add tests to wrong data units","closed","","arteam","2014-05-10T21:35:59Z","2016-01-24T08:06:09Z"
"","899","Upgrade to Jetty 9.2.9","Hi, I notice that there's a commit upgrading jetty to 9.2.9. I am wondering when is the expected release date for that change?  Thanks!","closed","","sixinli","2015-02-25T18:33:14Z","2015-02-25T19:55:06Z"
"","1373","MySQL Driver Issue","Hi, I am truing to run the dropwizard app and it's failing because it's unable to load the class `com.mysql.jdbc.Driver`  **Error Log**  ``` INFO  [2015-12-07 05:27:13,377] org.eclipse.jetty.util.log: Logging initialized @4557ms INFO  [2015-12-07 05:27:13,924] org.hibernate.Version: HHH000412: Hibernate Core {5.0.2.Final} INFO  [2015-12-07 05:27:13,928] org.hibernate.cfg.Environment: HHH000206: hibernate.properties not found INFO  [2015-12-07 05:27:13,932] org.hibernate.cfg.Environment: HHH000021: Bytecode provider name : javassist INFO  [2015-12-07 05:27:13,954] io.dropwizard.hibernate.SessionFactoryFactory: Entity classes: [org.solarcoin.claimingapi.entities.Claimant, org.solarcoin.claimingapi.entities.Project] INFO  [2015-12-07 05:27:14,048] org.hibernate.annotations.common.Version: HCANN000001: Hibernate Commons Annotations {5.0.0.Final} ERROR [2015-12-07 05:27:14,485] org.apache.tomcat.jdbc.pool.ConnectionPool: Unable to create initial connections of pool. ! java.lang.ClassNotFoundException: com.mysql.jdbc.driver ! at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_66] ! at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_66] ! at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[na:1.8.0_66] ! at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_66] ! at java.lang.Class.forName0(Native Method) ~[na:1.8.0_66] ! at java.lang.Class.forName(Class.java:348) ~[na:1.8.0_66] ! at org.apache.tomcat.jdbc.pool.ClassLoaderUtil.loadClass(ClassLoaderUtil.java:38) ~[tomcat-jdbc-8.0.28.jar:na] ! ... 43 common frames omitted ! Causing: java.lang.ClassNotFoundException: Unable to load class: com.mysql.jdbc.driver from ClassLoader:sun.misc.Launcher$AppClassLoader@7e6cbb7a;ClassLoader:sun.misc.Launcher$AppClassLoader@7e6cbb7a ! at org.apache.tomcat.jdbc.pool.ClassLoaderUtil.loadClass(ClassLoaderUtil.java:56) ~[tomcat-jdbc-8.0.28.jar:na] ! at org.apache.tomcat.jdbc.pool.PooledConnection.connectUsingDriver(PooledConnection.java:268) ~[tomcat-jdbc-8.0.28.jar:na] ! ... 42 common frames omitted ! Causing: java.sql.SQLException: Unable to load class: com.mysql.jdbc.driver from ClassLoader:sun.misc.Launcher$AppClassLoader@7e6cbb7a;ClassLoader:sun.misc.Launcher$AppClassLoader@7e6cbb7a ! at org.apache.tomcat.jdbc.pool.PooledConnection.connectUsingDriver(PooledConnection.java:280) ~[tomcat-jdbc-8.0.28.jar:na] ! at org.apache.tomcat.jdbc.pool.PooledConnection.connect(PooledConnection.java:200) ~[tomcat-jdbc-8.0.28.jar:na] ! at org.apache.tomcat.jdbc.pool.ConnectionPool.createConnection(ConnectionPool.java:708) [tomcat-jdbc-8.0.28.jar:na] ! at org.apache.tomcat.jdbc.pool.ConnectionPool.borrowConnection(ConnectionPool.java:642) [tomcat-jdbc-8.0.28.jar:na] ! at org.apache.tomcat.jdbc.pool.ConnectionPool.init(ConnectionPool.java:464) [tomcat-jdbc-8.0.28.jar:na] ! at org.apache.tomcat.jdbc.pool.ConnectionPool.(ConnectionPool.java:141) [tomcat-jdbc-8.0.28.jar:na] ! at org.apache.tomcat.jdbc.pool.DataSourceProxy.pCreatePool(DataSourceProxy.java:115) [tomcat-jdbc-8.0.28.jar:na] ! at org.apache.tomcat.jdbc.pool.DataSourceProxy.createPool(DataSourceProxy.java:102) [tomcat-jdbc-8.0.28.jar:na] ! at org.apache.tomcat.jdbc.pool.DataSourceProxy.getConnection(DataSourceProxy.java:126) [tomcat-jdbc-8.0.28.jar:na] ! at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:180) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:88) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:234) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:208) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:189) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at org.hibernate.engine.jdbc.internal.JdbcServicesImpl.configure(JdbcServicesImpl.java:51) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.configureService(StandardServiceRegistryImpl.java:94) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:217) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:189) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.handleTypes(MetadataBuildingProcess.java:352) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:111) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.build(MetadataBuildingProcess.java:83) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:418) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:87) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:692) [hibernate-core-5.0.2.Final.jar:5.0.2.Final] ! at io.dropwizard.hibernate.SessionFactoryFactory.buildSessionFactory(SessionFactoryFactory.java:96) [dropwizard-hibernate-0.9.1.jar:0.9.1] ! at io.dropwizard.hibernate.SessionFactoryFactory.build(SessionFactoryFactory.java:49) [dropwizard-hibernate-0.9.1.jar:0.9.1] ! at io.dropwizard.hibernate.SessionFactoryFactory.build(SessionFactoryFactory.java:39) [dropwizard-hibernate-0.9.1.jar:0.9.1] ! at io.dropwizard.hibernate.HibernateBundle.run(HibernateBundle.java:56) [dropwizard-hibernate-0.9.1.jar:0.9.1] ! at io.dropwizard.hibernate.HibernateBundle.run(HibernateBundle.java:14) [dropwizard-hibernate-0.9.1.jar:0.9.1] ! at io.dropwizard.setup.Bootstrap.run(Bootstrap.java:199) [dropwizard-core-0.9.1.jar:0.9.1] ! at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:39) [dropwizard-core-0.9.1.jar:0.9.1] ! at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:77) [dropwizard-core-0.9.1.jar:0.9.1] ! at io.dropwizard.cli.Cli.run(Cli.java:70) [dropwizard-core-0.9.1.jar:0.9.1] ! at io.dropwizard.Application.run(Application.java:80) [dropwizard-core-0.9.1.jar:0.9.1] ! at org.solarcoin.claimingapi.ClaimingAPIApplication.main(ClaimingAPIApplication.java:59) [classes/:na] ! at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_66] ! at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_66] ! at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_66] ! at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_66] ! at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144) [idea_rt.jar:na] WARN  [2015-12-07 05:27:14,496] org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator: HHH000342: Could not obtain connection to query metadata : Unable to load class: com.mysql.jdbc.driver from ClassLoader:sun.misc.Launcher$AppClassLoader@7e6cbb7a;ClassLoader:sun.misc.Launcher$AppClassLoader@7e6cbb7a INFO  [2015-12-07 05:27:14,528] org.hibernate.dialect.Dialect: HHH000400: Using dialect: org.hibernate.dialect.MySQLDialect INFO  [2015-12-07 05:27:14,579] org.hibernate.engine.jdbc.env.internal.LobCreatorBuilderImpl: HHH000422: Disabling contextual LOB creation as connection was null ```  I am using IntelliJ -not sure if that matters :smile:-  **POM File**  ``` xml       4.0.0      SolarCoin     ClaimingAPI     1.0-SNAPSHOT                            org.hibernate             hibernate-core             5.0.2.Final                                io.dropwizard             dropwizard-core             0.9.1                                org.projectlombok             lombok             1.14.2                                com.google.inject             guice             3.0                                org.apache.commons             commons-lang3             3.4                                com.google.guava             guava             19.0-rc2                                org.slf4j             slf4j-api             1.7.12                                io.dropwizard             dropwizard-hibernate             0.9.1                                mysql             mysql-connector-java             5.1.37                                ch.qos.logback             logback-classic             1.1.3                                                             org.apache.maven.plugins                 maven-compiler-plugin                                      1.8                     1.8                     UTF-8                                                            org.apache.maven.plugins                 maven-dependency-plugin                                                               copy-dependencies                         package                                                      copy-dependencies                                                                               ${project.build.directory}                             false                             true                                                                                                          org.apache.maven.plugins                 maven-resources-plugin                 2.7                                                           UTF-8                                               ```  To be honest, I know this might not be a direct dropwizard problem, rather than my problem working with Maven, but I would still appreciate the help here from dropwizard pros :smile:","closed","","ahmed-alamer","2015-12-07T05:34:11Z","2015-12-28T20:24:24Z"
"","648","DefaultServerFactoryTest randomly fails","Hi, Dropwizard team!  In the mailing list a couple of users pointed to an issue with an execution of the test **DefaultServerFactoryTest#testGracefulShutdown**. - https://groups.google.com/forum/#!topic/dropwizard-user/D1dXRyeeceM - https://groups.google.com/forum/#!topic/dropwizard-user/XGEpSMPItxU - https://groups.google.com/forum/#!topic/dropwizard-user/ec0K4KN5444  This test randomly fails in different environments on different conditions. I tried to to reproduce this issue and got a failure rate about 7-8 times per 100 invocations.  As I believe, it's a [bug](https://bugs.eclipse.org/bugs/show_bug.cgi?id=420142) in Jetty 9, where a graceful shutdown policy was changed in a comparison to Jetty 8. So because of it success of this test is really depends on a race condition between a shutdown thread and a working thread. See my comment: https://groups.google.com/d/msg/dropwizard-user/D1dXRyeeceM/ClolLPHYRrkJ  In the result this test is nondeterministic and I think it's best to remove it from the current test suite.  Thanks.","closed","","arteam","2014-07-09T16:47:37Z","2014-07-23T09:54:39Z"
"","1461","How to view custom 404 page","Hi, can anyone point me how to view my custom 404 page. I searched and tried implementing `ExceptionMapper` but this did not work.  I'm using 0.8.1 version","closed","","kedarjavalkar","2016-02-15T05:06:29Z","2017-08-09T10:41:10Z"
"","1473","dropwizard-guice integration with Dropwizard 1.0.0-SNAPSHOT","Hi,  I'm using Hubspot's dropwizard-guice with DW 0.9.2 without any problems. However, I'm unable to upgrade to 1.0.0-SNAPSHOT, because of certain issues, which I've detailed here: [https://github.com/HubSpot/dropwizard-guice/issues/79#issuecomment-193982950](https://github.com/HubSpot/dropwizard-guice/issues/79#issuecomment-193982950) . Is there anyone who has been able to get this to work?  Thanks for the great library!","closed","","infprime","2016-03-09T06:36:28Z","2016-03-12T09:40:54Z"
"","975","line number not printing for ""logFormat"" in v0.8","Hi,  I have the following log format in my yml  ``` logFormat: ""[%date{dd MMM yyyy;HH:mm:ss.SSS,UTC}] - [%-5level] [%logger{0}:%line] - %msg %ex{full}%n"" ```  For some reason it does not print the %line .. the output comes out to something like this:   ``` [07 Apr 2015;21:39:38.377] - [WARN ] [CacheBuilder ?] - ignoring weigher specified without maximumWeight  [07 Apr 2015;21:39:38.406] - [WARN ] [CacheBuilder ?] - ignoring weigher specified without maximumWeight  ```  I also tried with %L per logback documentation, but still no luck  It gives a ""?"" instead of the line number. This log format used to work fine with v 0.7.1  All help appreciated !  EDIT:   I tested the exact same thing with another standalone project using logback.xml and it worked just fine:  ```                       [%date{dd MMM yyyy;HH:mm:ss.SSS,UTC}] - %level [%logger{0}:%line] - %msg%n%ex{1}               ```","closed","","shivangshah","2015-04-07T21:42:52Z","2015-04-16T13:02:21Z"
"","957","Getting ApplicationContextPath with 0.8 doesn't work","Hi,   I just upgraded to 0.8 of dropwizard and it seems like the getting of applicationContextPath doesn't work.   ``` System.out.println(""CONTEXT PATH: "" +environment.getApplicationContext().getContextPath()); ```  Output:  ``` CONTEXT PATH: / ```  my yml configuration:  ``` server:     type: context     maxThreads: 1024     minThreads: 8     maxQueuedRequests: 1024     adminMinThreads: 1     adminMaxThreads: 64     applicationContextPath: /mdm/*     adminContextPath: /admin ```  Any inputs on this? Is this actually a bug or something changed in 0.8 ?","closed","","shivangshah","2015-03-28T21:32:40Z","2016-06-16T14:37:12Z"
"","810","Could not resolve type id 'file' into a subtype of [simple type, class io.dropwizard.logging.AppenderFactory]","Hi, I'm using Dropwizard 0.8.0-rc1; and I'm having issues configuring log output. Logger works perfectly to stdout, but if I add in my configuration.yml the example provided on dropwizard.io:  ``` logging:   appenders:     - type: file       # The file to which current statements will be logged.       currentLogFilename: ./logs/example.log        # When the log file rotates, the archived log will be renamed to this and gzipped. The       # %d is replaced with the previous day (yyyy-MM-dd). Custom rolling windows can be created       # by passing a SimpleDateFormat-compatible format as an argument: ""%d{yyyy-MM-dd-hh}"".       archivedLogFilenamePattern: ./logs/example-%d.log.gz        # The number of archived files to keep.       archivedFileCount: 5        # The timezone used to format dates. HINT: USE THE DEFAULT, UTC.       timeZone: UTC ```  But, when I start the application, I get:  ``` 2014-12-11 12:23:02 INFO  Version:27 - HV000001: Hibernate Validator 5.1.3.Final /path/to/configuration.yml has an error:   * Failed to parse configuration at: logging.appenders.[0]; Could not resolve type id 'file' into a subtype of [simple type, class io.dropwizard.logging.AppenderFactory]  at [Source: N/A; line: -1, column: -1] (through reference chain: com.myapp.config.Configuration[""logging""]->io.dropwizard.logging.LoggingFactory[""appenders""]->java.util.ArrayList[0]) ```  Is this a Dropwizard bug or I am missing something?","closed","","carminexx","2014-12-11T17:34:17Z","2015-05-08T15:04:22Z"
"","1475","Client code generator","Hi, I'm struggling to find a client code generator for Dropwizard apis that generates java code. Does this exist, or should we create one?","closed","","jansoren","2016-03-09T13:44:23Z","2017-08-09T20:21:10Z"
"","1160","Http Client Connection Pool Error","Hi, I have a series of Tasks that connect to multiple targets that have an hourly cronjob running them.  The multiple tasks are using the same JerseyClient instance from JerseyClientConfiguration.  After a while, I start getting **javax.ws.rs.ProcessingException: java.lang.IllegalStateException: Connection pool shut down**  The only way to recover is restarting the application.  This only started to occur in Dropwizard 0.8.2.  Thanks for any help!","closed","bug,","ruimateus","2015-07-11T12:23:15Z","2015-08-24T12:49:46Z"
"","1271","Could you push the latest doc to dropwizard.io?","Hi, Can you push the latest doc to dropwizard.io, especially the part around testing dropwizard? Currently, the Dropwizard site tells you to use ""GrizzlyTestContainerFactory"" when your tests involve Auth/Context annotation. But you actually need to use ""GrizzlyWebTestContainerFactory""  I see that this typo has already been fixed back in April, 2015 (https://github.com/dropwizard/dropwizard/commit/333dea7df2efda99a1d341cb2878fb59d354fb5e). But the site still says to use ""GrizzlyTestContainerFactory""  Thanks!","closed","documentation,","TurtleShip","2015-09-30T20:31:17Z","2015-10-29T05:55:08Z"
"","886","Atmosphere in Dropwizard: Unable to use Dropwizard-Testing","Hi,  when combining Dropwizard with [Atmosphere-Jersey](https://github.com/Atmosphere/atmosphere/wiki/Getting-Started-with-The-Atmosphere-Framework-and-WebSocket), Dropwizard-Testing will break when using the `ResourceTestRule`.  I get the following error messages:  ``` ERROR [2015-02-20 16:08:06,098] com.sun.jersey.spi.inject.Errors: The following errors and warnings have been detected with resource and/or provider classes:   SEVERE: Missing dependency for field: javax.servlet.http.HttpServletRequest org.atmosphere.jersey.BaseInjectableProvider.req   SEVERE: Missing dependency for field: javax.servlet.http.HttpServletRequest org.atmosphere.jersey.BaseInjectableProvider.req   SEVERE: Missing dependency for field: javax.servlet.http.HttpServletRequest org.atmosphere.jersey.AtmosphereProviders$BroadcasterProvider.req   SEVERE: Missing dependency for field: javax.servlet.http.HttpServletRequest org.atmosphere.jersey.BaseInjectableProvider.req   SEVERE: Missing dependency for field: javax.servlet.http.HttpServletRequest org.atmosphere.jersey.BaseInjectableProvider.req   SEVERE: Missing dependency for field: protected javax.servlet.http.HttpServletRequest org.atmosphere.jersey.AtmosphereFilter.servletReq   SEVERE: Missing dependency for field: javax.servlet.http.HttpServletRequest org.atmosphere.jersey.BaseInjectableProvider.req   SEVERE: Missing dependency for field: javax.servlet.http.HttpServletRequest org.atmosphere.jersey.BaseInjectableProvider.req  com.sun.jersey.spi.inject.Errors$ErrorMessagesException     at com.sun.jersey.spi.inject.Errors.processErrorMessages(Errors.java:170)     at com.sun.jersey.spi.inject.Errors.postProcess(Errors.java:136)     at com.sun.jersey.spi.inject.Errors.processWithErrors(Errors.java:199)     at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:795)     at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:790)     at com.sun.jersey.test.framework.spi.container.inmemory.InMemoryTestContainerFactory$InMemoryTestContainer.start(InMemoryTestContainerFactory.java:165)     at com.sun.jersey.test.framework.JerseyTest.setUp(JerseyTest.java:310)     at io.dropwizard.testing.junit.ResourceTestRule$1.evaluate(ResourceTestRule.java:149)     at org.junit.rules.RunRules.evaluate(RunRules.java:20)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.junit.runner.JUnitCore.run(JUnitCore.java:137)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134) ```  I assume Jersey tries to load the Atmosphere Jersey providers and fails. Is there a way to disable that behaviour?  If i remove `atmosphere-jersey` from classpath and use `atmosphere-runtime` instead, the error disappears. It is enough to have the `atmosphere-jersey` on the classpath to provoke that error.  DISCLAIMER: I already tried my luck on the atmosphere project: https://github.com/Atmosphere/atmosphere/issues/1868","closed","","phxql","2015-02-20T16:12:19Z","2016-05-25T13:54:34Z"
"","585","Pluggable jersey - for quasar/comsat integration","Hi,  This is what we need in order to integrate Dropwizard with [comsat](https://github.com/puniverse/comsat) as we've discussed it [here](https://groups.google.com/forum/#!topic/dropwizard-dev/ycKsW910kf4).  Thanks.","closed","","eitan101","2014-05-19T10:44:31Z","2014-06-12T13:07:00Z"
"","1484","Support importing and overriding multiple configuration files","Hi,  this is a quick PoC implementation of https://github.com/dropwizard/dropwizard/issues/125 The issue was closed, but I think the feature could be introduced without adding too much complexity. I deliberately ignored some details such as other paths then files in the quick prototype, but those could be added by specifying the type of the import.  The merging of the configs is done early on the JsonNode level, with same semantics as implementations of extending objects like `$.extends`.  Stuff to add: - [ ] Circular deps check - [ ] Different resource path types (URL, resource, file path) - [ ] Test coverage  Would this feature be considered to be accepted? I'll gladly put in more work on it.  The use case would be:  `base.yml`:  ``` yml database:     driverClass: org.postgresql.Driver     logValidationErrors: true ```  `dev.yml`:  ``` yml import:    - base.yml  database:    user: postgres ```  `prod.yml`:  ``` yml imports:    - base.yml  database:    user: ${PROD_DB_USER}    logValidationErrors: false ```  Running the app with `prod.yml` would result in configuration loaded as:  ``` yml database:     driverClass: org.postgresql.Driver     user: ${PROD_DB_USER}     logValidationErrors: false # Overridden the value from base ```","closed","feature,","vvondra","2016-03-19T19:59:49Z","2016-04-08T12:43:51Z"
"","1182","Add support to Hibernate interceptor and events","Hi,  it would be nice to be able to allow developers to configure [Hibernate interceptor and events](http://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html/ch14.html).  Best regards","closed","improvement,","calou","2015-07-23T17:44:59Z","2015-10-18T09:40:37Z"
"","1472","RequestLogFactory custom logging format","Hi,  it appears to me, that the RequestLogFactory ignored all log formats that are passed in the configuration. It also hardcodes the RequestLogFactory as a layout. I know one can overwrite this factory and create a custom logger, however it would be nice if this could be done through configuration.   Thanks, Artur","closed","","pandaadb","2016-03-08T10:37:24Z","2016-05-25T01:35:26Z"
"","1019","ErrorMessage serialization","Hi,  in our project we configured the `ObjectMapper` in that manner, that we have to annotate getters/setters or fields with `@JsonProperty` explicitly. Usually dropwizard does the same, except for the `ErrorMessage` class. In our project serialized error messages result in `{}`.  I'd like to annotate the getters with `@JsonProperty`. If you guys agree with this approach I'll send a PR.  Cheers Georg","closed","","scho","2015-04-27T08:44:53Z","2015-04-27T09:18:56Z"
"","553","Documentation on filters","Hi,  I've found the documentation on filters pretty non-existent (they're mentioned once in the ""core"" page of the documentation), and the answers on the internet are hard to come by and didn't always work. I added a simple sample for filtering based on how I got my filters up and running. If there's another way, please let me know and I will change the example (I only started working with Dropwizard recently).","closed","","wonderb0lt","2014-04-28T11:30:36Z","2014-06-12T10:38:10Z"
"","697","added DropwizardClientRule","Hi,  I've added another rule to dropwizard-testing, so I can test my http client code against a test double written as JAX-RS resource and deployed in a Dropwizard application.  We already use that code for our tests, but this requires a separate dependency.  Cheers Rüdiger","closed","feature,","t1","2014-08-29T09:50:48Z","2014-09-28T13:40:03Z"
"","1368","Yaml property extension","Hi,  I would like to suggest an addition to the configuration for dropwizard projects to have base configs that can be extended. I am thinking of something like for example:  (1) configure base.yml to have a logging config that for example looks something like:   ```  name: timerLog  threshold: ALL  archive: true  archivedLogFilenamePattern: %{LOGPATH}  archivedFileCount: 31  timeZone: UTC  logFormat: ""%msg%n"" ```  (2) have a property file that can be associated with the yaml file that defines properties   ``` LOGPATH=""path/to/my/log/file""  ```  (3) with the startup one can define the property location and the configuration will automatically expand the yaml file with those properties.  That way one can have deployment specific information. And that way people could run their app on specific hosts by specifying their config.  Currently We have to copy/paste the entire yaml file and replace the properties that don't fit with the correct values.","closed","","pandaadb","2015-12-02T15:50:57Z","2015-12-14T18:28:47Z"
"","1213","Resource @Valid validation","Hi,  I was struggling with @Valid annotation on resource methods like .put(@Valid foo).  Turns out if I add   ``` xml                      org.glassfish.jersey.ext             jersey-bean-validation             2.19                                                   org.hibernate                     hibernate-validator                                        ```  I am getting an expected 422 response on invalid entities.   Am I missing something? If not, would you mind adding this to the already very nice doc?  Thanks","closed","","andrejserafim","2015-08-11T06:50:55Z","2015-10-28T05:49:22Z"
"","1297","Optional Support for Dropwizard JDBI broken","Hi,  I recently noticed there is a bug in the optional handling for JDBi and joda DateTime objects. There is a serialisation issue that prevents any Optional datetimes to be inserted into a table.   I created following unittest to demonstrate the problem:  ``` java public class TestJDBIOptional {      protected static DBI dbi;     protected static Environment env;      static DataSourceFactory getDataSourceFactory() {         DataSourceFactory dataSourceFactory = new DataSourceFactory();         dataSourceFactory.setDriverClass(""org.h2.Driver"");         dataSourceFactory.setUrl(""jdbc:h2:mem:testDb"");         dataSourceFactory.setUser(""sa"");         dataSourceFactory.setPassword("""");         return dataSourceFactory;     }      String createTable = ""CREATE TABLE IF NOT EXISTS test ( id varchar(255) primary key, ""             + "" time timestamp);"";      @Before     public void setupTests() throws IOException {         dbi.open().createStatement(createTable).execute();     }      @BeforeClass     public static void setup() {         env = new Environment(""test-env"", Jackson.newObjectMapper(), null, new MetricRegistry(), null);         dbi = new DBIFactory().build(env, getDataSourceFactory(), ""test"");         dbi.registerArgumentFactory(new JodaDateTimeArgumentFactory());         dbi.registerMapper(new JodaDateTimeMapper(Optional.absent()));     }      @Test     public void testInsert() {         JDBIDao onDemand = dbi.onDemand(JDBIDao.class);         onDemand.insert(Optional.of(DateTime.now()));     }      @Test      public void testAbsent() {         JDBIDao onDemand = dbi.onDemand(JDBIDao.class);         onDemand.insert(Optional.absent());     }      public interface JDBIDao {          @SqlUpdate(""INSERT INTO test VALUES ('test', :ts)"")         abstract int insert(@Bind(""ts"") Optional dt);     } } ```","closed","bug,","pandaadb","2015-10-23T08:20:10Z","2015-10-28T10:37:03Z"
"","1253","@UnitOfWork is not wrapping the resource method with Hibernate session","Hi,  I have an issue where `@UnitOfWork` is not doing what it should, I've made sure that all the dependencies are in place in the POM file and the bundle and configuration are correct. I am using DW 0.6.2  Thanks","closed","","ahmed-alamer","2015-09-16T16:01:42Z","2015-11-25T19:27:46Z"
"","1512","Change HealthCheck json payload","Hi,  First thanks for your amazing work. I'd like to propose an enhancement in the HealthCheck payload. # Current situation  Currently the healthcheck payload, according to this configuration http://www.dropwizard.io/0.9.2/docs/manual/core.html#health-checks, is  ``` json {""deadlocks"":{""healthy"":true},""database"":{""healthy"":true}} ```  The problem with this payload in a production environment is that we don't know directly if the whole system is healthy or not. Instead we have to check each healthcheck entry and check if the field healthy is true. # Proposal solution  I think it would be better to have a payload similar to what we have with spring-boot. For the same configuration in the spring-boot way, I'd have:   ``` json {""status"": ""UP"", ""deadlocks"":{""status"":""UP""},""database"":{""status"":""UP""}} ```  Where status can be UP, DOWN or UNKNOWN (for example in case we can't find HealthCheck).  I can see 2 advantage with this payload:  1. There is a global status which is an aggregation of the others (it will be UP if all status is UP, DOWN otherwise). This way, with only one check we can check the system health. 2. It will be the same kind of payload than spring-boot which means we facilitate the life of OPS guys.  What do you think ? I'd love to contribute it if you want to.","closed","","arnaud-deprez","2016-04-06T15:21:28Z","2016-04-06T16:39:58Z"
"","1393","Support DropwizardClientRule with custom ObjectMapper config","Hi,  As far as I can tell, it's not possible to apply any custom configuration to the ObjectMapper used by DropwizardClientRule's FakeApplication (since the application and its environment are kept private). Is this by design?  I'd like to register a Module and set some SerializationFeatures on the ObjectMapper used - without that, the JSON the client under test sends cannot be deserialized.  It looks like at the moment I'm forced to run a full integration test with DropwizardAppRule (which is a shame, as it's slower and much more difficult to manipulate). Is there any alternative, or if not, is there any argument against exposing the application and/or environment from DropwizardClientRule?  Thanks, Rowan","closed","","rowanhill","2015-12-21T12:40:53Z","2016-02-06T11:13:17Z"
"","1485","Revise code example in docs for testing non-junit","Hi,  after reading the docs of 0.9.2, I've tried the given example for non-junit tests. In my case I'm using TestNG. Unfortunately the give code doesn't compile and there where 'BindException' because port 8080 was already in use.  So I've added an overriding config to get a random port and I fixed the wrong var-name. Additionally I removed the parameter from JerseyClientBuilder, because 'environment' and 'test-name' aren't supported. My tests are running fine without them, but I have to admit, that I'm not using any ""special"" Jackson mappings.  Feedback is always welcome.  Kind regards Martin","closed","","nitram509","2016-03-19T22:51:43Z","2016-03-20T19:03:52Z"
"","667","SchemeRegistry is deprecated.","Hi,  `org.apache.http.conn.scheme.SchemeRegistry` has been deprecated since `org.apache.httpcomponents` v4.3, and Dropwizard is using version 4.3.4  httpcomponents documentation recommends using `org.apache.http.config.Registry` instead of `SchemeRegistry`. However, Dropwizard 7 JerseyClientBuilder does not yet have a method for using `Registry`. It only has a method signature  ``` java  public JerseyClientBuilder using(SchemeRegistry registry) ```  I was wondering if Dropwizard users should continue to use depreated SchemeRegistry until further changes are made to JerseyClientBuilder, or is there a way to build JerseyClient with Registry in Dropwizard? I need to create a JerseyClient that uses SSL certificate, and I used SchemeRegistry to do so in DW6 world.  Thanks!","closed","","TurtleShip","2014-07-27T23:47:34Z","2014-12-27T13:33:26Z"
"","1169","Powermock and Dropwizard","Hi team, I have posted similarly on google group, but haven't got reply yet. I have been trying to use PowerMock with Dropwizard, but got a few problem get it working with liquibase and cannot load Junit ClassRules properly because PowerMockRunner does not extend ParentRunner. Any suggestion for an alternative? I need to mock static, that's why I need to use PowerMock. Also, the code I am trying to mock static from a dependency, so no option of using factory pattern to make the static code more testable. Thanks,","closed","","mattuuh7","2015-07-14T07:12:30Z","2015-08-09T12:04:06Z"
"","1395","Authentication","Hi I am trying to follow the example on the website here is my code from A-Z  ``` java public class ClaimingAPIApplication extends Application {      private Injector injector;      private AuthDynamicFeature buildBasicAPIAuthDynamicFeature() {         BasicAPIAuthenticator basicAPIAuthenticator = injector.getInstance(BasicAPIAuthenticator.class);         BasicAPIAuthorizer basicAPIAuthorizer = new BasicAPIAuthorizer();          BasicCredentialAuthFilter authFilter = new BasicCredentialAuthFilter.Builder()                 .setAuthenticator(basicAPIAuthenticator)                 .setRealm(""SolarCoin API Users"")                 .setAuthorizer(basicAPIAuthorizer)                 .buildAuthFilter();          return new AuthDynamicFeature(authFilter);     }       ClaimingAPIApplication() {         this.injector = Guice.createInjector(new AbstractModule() {             @Override             protected void configure() {                 bind(MongoClient.class).toInstance(new MongoClient());                 bind(ObjectMapper.class).toInstance(new ObjectMapper());             }         });     }      @Override     public void run(ClaimingAPIConfiguration claimingAPIConfiguration,                     Environment environment) throws Exception {          TemplateHealthCheck templateHealthCheck = new TemplateHealthCheck(""Crap"");          environment.healthChecks().register(""template"", templateHealthCheck);          environment.jersey().register(buildBasicAPIAuthDynamicFeature());         environment.jersey().register(RolesAllowedDynamicFeature.class);         environment.jersey().register(new AuthValueFactoryProvider.Binder<>(User.class));          environment.jersey().register(injector.getInstance(ClaimsResource.class));         environment.jersey().register(injector.getInstance(TestResource.class));     }      @Override     public String getName() {         return ""SolarCoin-Claiming-API"";     }      public static void main(String[] args) throws Exception {         /* TODO: extract this to it's own class file */          ClaimingAPIApplication application = new ClaimingAPIApplication();         application.run(args);     } } ```  ``` java public class BasicAPIAuthenticator implements Authenticator {       private final UserDAO userDAO;      @Inject     BasicAPIAuthenticator(UserDAO userDAO) {         this.userDAO = userDAO;     }      @Override     public Optional authenticate(BasicCredentials basicCredentials) throws AuthenticationException {         log.debug(""Credentials - {}:{}"", basicCredentials.getUsername(), basicCredentials.getPassword());         return userDAO.findUser(basicCredentials.getUsername());     } } ```  ``` java public class BasicAPIAuthorizer implements Authorizer {      @Override     public boolean authorize(User user, String role) {         return user != null && user.getAccessLevel() == User.AccessLevel.fromString(role);     } } ```  ``` java public class TestResource {      @Inject     TestResource() {} //What!? Yes! I am addicted to DI and Guice!      @GET     public Response ping() {         return Response.ok(ImmutableMap.of(""Result"", ""It Works!"")).build();     }      @GET     @Path(""/auth"")     @RolesAllowed(""admin"")     public Response sneak(@Auth User user) {         log.debug(""{}"", user);         return Response.ok(user).type(MediaType.APPLICATION_JSON).build();     } } ```  ``` java public class UserDAO {      private final MongoCollection collection;     private final ObjectMapper mapper;      @Inject     UserDAO(MongoClient client, ObjectMapper mapper) {         this.collection = client.getDatabase(Context.API_DATABASE).getCollection(Context.USERS_COLLECTION);         this.mapper = mapper;     }      public String create(User user) {         Document document = user.toDocument();         collection.insertOne(document);         return document.getObjectId(""_id"").toString();     }      public Optional findUser(String token) {         FindIterable users = collection.find(Filters.eq(""token"", token));         Document currentUser = users.first();          try {             return Optional.of(mapper.readValue(JSON.serialize(currentUser), User.class));         } catch (Exception e) {             return Optional.absent();         }     }  } ```  ``` java @Data @AllArgsConstructor public class User implements Principal {      private String token;     private String userName;     private AccessLevel accessLevel;      public User() {}      @Override     public String getName() {         return userName;     }      @Override     public boolean implies(Subject subject) {         return true;     }      public Document toDocument() {         return new Document()                 .append(""token"", token)                 .append(""userName"", userName)                 .append(""accessLevel"", accessLevel.toString());     }      public enum AccessLevel {         USER(""user""),         ADMIN(""admin"");          private String roleName;          AccessLevel(String roleName) {             this.roleName = roleName;         }          public String getRoleName() {             return roleName;         }          @Override         public String toString() {             return roleName;         }         public static AccessLevel fromString(String role) {             for (AccessLevel accessLevel : values()) {                 if (accessLevel.getRoleName().equals(role)) {                     return accessLevel;                 }             }              return null;         }      } } ```  ``` shell curl -X GET -H ""Content-Type: application/json"" -H ""Authorization: Basic ZnVja2luZ0J1bGxzaGl0Og=="" -H ""Cache-Control: no-cache"" -H ""Postman-Token: 2a32f510-b87b-2a45-3a67-4de3999b7807"" -i 'http://localhost:8080/test/auth/' HTTP/1.1 401 Unauthorized Date: Mon, 28 Dec 2015 02:52:40 GMT WWW-Authenticate: Basic realm=""SolarCoin API Users"" Content-Type: text/plain Content-Length: 49  Credentials are required to access this resource. ```  So as you can see, I can't get authenticated, I am definitely missing something here, help would appreciated","closed","","ahmed-alamer","2015-12-28T03:01:35Z","2016-01-01T01:59:58Z"
"","766","Applications and Assets in ""/""","Hi guys,  I have an issue related with #661, with the diference that I need serve both application and assets in ""/"". Any ideas?","closed","","ARSBento","2014-10-31T17:36:08Z","2014-11-01T11:17:30Z"
"","1351","Does dropwizard support Oracle Native Network Encryption?","Hi all,  The database we connected to just change the connections to be encrypted. And as a result, our application which written with dropwizard(0.6.1) occurred an error said invalid database address.  Is there anyone who have met this issue? How can we make dropwizard application connect to database through the encryption connections?","closed","","CzarScar","2015-11-23T09:19:39Z","2015-11-23T10:12:52Z"
"","1116","JerseyClientConfiguration timeout not properly set on Client object from yaml","Hi all,  AFAICT, dropwizard isn't actually setting the timeout values for jersey clients when they're specified in a config file. Here's my quick example (CatConfiguration is cut down for brevity):  ``` java public class CatConfiguration extends Configuration {   @Valid   @NotNull   @JsonProperty(""jerseyClient"")   private JerseyClientConfiguration jerseyClientConfiguration;    public JerseyClientConfiguration getJerseyClientConfiguration() {     return jerseyClientConfiguration;   }    public void setJerseyClientConfiguration(JerseyClientConfiguration jcc) {     this.jerseyClientConfiguration = jcc;   } } ```  Config file contains:  ``` yaml jerseyClient:   timeout: 3s ```  And when I build it (I've tried this with and without the ""using"" method)  ``` java final Client jerseyClient = new JerseyClientBuilder(environment)         .using(catCfg.getJerseyClientConfiguration()).build(getName()); System.out.println(""Timeout:""); System.out.println(jerseyClient.getConfiguration().getProperty(ClientProperties.READ_TIMEOUT)); System.out.println(catCfg.getJerseyClientConfiguration().getTimeout()); ```  This prints  ``` Timeout: null 3 seconds ```  So seems like it's read from the config just fine, but not actually set on the client object.  I fairly sure I haven't messed this up - is the timeout simply failing to be set? Right now I'm just manually setting the timeout as a temporary workaround. Let me know if I've done something wrong, otherwise hopefully this is an easy fix. Thanks!","closed","","Sushisource","2015-06-17T18:11:11Z","2015-11-25T19:05:00Z"
"","1477","Specifying maxThreads per application","Hi all  Ran into this one issue when trying to specify maxThreads. With this config:  ``` yml server:   applicationConnectors:     - type: http       port: 8080       acceptorThreads: 4       selectorThreads: 8   adminConnectors:     - type: http       port: 8081       acceptorThreads: 4       selectorThreads: 8   maxThreads: 20 ```  the server won't start due to an exception:  ``` java.lang.IllegalStateException: Insufficient threads: max=20 < needed(acceptors=8 + selectors=16 + request=1)     at org.eclipse.jetty.server.Server.doStart(Server.java:350) ```  Looking at the source `maxThreads` only applies to the `applicationConnectors` and the `InstrumentedQueuedThreadPool` that they use (`AbstractServerFactory::createThreadPool`). Admin connectors have their own QueuedThreadPool and `maxThreads` doesn't apply to it.  Seems like `maxThreads: 20` should have been enough: 4 acceptor + 8 selector + 8 request threads. Should it not?  Using Dropwizard 0.9.2. Thanks!","closed","stale,","ajermakovics","2016-03-12T10:21:16Z","2019-09-03T00:00:59Z"
"","1146","Post gives unable to parse json error","Hi   If i use the Post request using  curl -H ""Content-Type: application/json"" -X POST -d '{""fullName"":""Other Person"",""jobTitle"":""Other Title""}' http://localhost:8080/people  it gives   unable to parse json error  How to resolve it ?  Thanks Syan","closed","","syanpriyajot","2015-06-30T06:31:18Z","2015-06-30T06:42:16Z"
"","1159","ContainerRequestFilter executed before Authentication happens","Hey,  when registering an AuthFactory and a ContainerRequestFilter (the latter via a dynamic feature), it seems the filter is called before the authentication happens.  Is this really wanted? I'd like to use the principal returned by the authenticator in my filter, but that's obviously not possible if the filter is called before.  My colleague says when programming directly against jetty, the authentication usually happens before any filter is triggered.  What's your opinion about that?  Bernhard","closed","","BernhardBln","2015-07-09T15:35:17Z","2015-07-10T13:48:22Z"
"","1278","FileAppenderFactory not valid for null currentLogFilename","Hey,  just noticed this.   The currentLogFilename can be empty in case the RollingFileAppender is used. By default, this will result in the rollingFileAppender creating new names rather than using a static name. This is particularly helpful if one does not want renaming of files on rollover.   Thanks,  Artur","closed","documentation,","pandaadb","2015-10-13T15:34:36Z","2016-05-26T17:06:17Z"
"","1122","Injection in tests not working?","Hey Guys,  I've an issue on testing my resource. The issue is about injecting and mocking variable in my resource code. As examples helping most to explain issues, see consecutively.  Pretend I've (minimal) Resource like this one:  ``` java @Path(""/myURL"") @Produces(MediaType.APPLICATION_JSON) public class ExportResource {      // ----------------------------------------------     // CONSTANTS     // ----------------------------------------------     /** Resource-Logger. */     protected static final Logger LOGGER = LoggerFactory             .getLogger(AbstractExportResource.class);      // ----------------------------------------------     // Class Variables     // ----------------------------------------------     @Inject     protected Subject subject;  // methods not given, as they are not necessary here } ```  Injection works fine, as I'm using this (minimal) Application code:  ``` java public class ExportApplication extends         Application {      public static void main(String[] args) throws Exception {         new ExportApplication().run(args);     }      @Override     public String getName() {         return ""Export"";     }      @Override     public void initialize(Bootstrap bootstrap) {         // nothing to do yet     }      @Override     public void run(ExportServiceConfiguration configuration,             Environment environment) {          final Client httpClient = new JerseyClientBuilder(environment).using(                 configuration.getJerseyClientConfiguration()).build(getName());          // register Subject as SubjectFactory         environment.jersey().register(new AbstractBinder() {             @Override             protected void configure() {                 bindFactory(SubjectFactory.class).to(Subject.class).in(RequestScoped.class).proxy(true);             }         });          // register resource         environment.jersey().register(                 new ExportResource(httpClient, configuration));     }// run }// ExportApplication ```  Just to provide full code, see (minimal) SubjectFactory:  ``` java public class SubjectFactory implements Factory {      @Inject     private  HttpServletRequest request;      @Override     public Subject provide() {         Subject s = new Subject();         s.setName(""Paul"");         return s;     }      @Override     public void dispose(Subject instance) {     } } ```  and (minimal) Subject:  ``` java public class Subject {     private String name;      public String getName() {         return name;     }      public void setName(String name) {         this.name = name;     } } ```  If I want to test the resource, I'm using ResourceTestRule:  ``` java RunWith(MockitoJUnitRunner.class) public class ExportTest {      protected static final ExportConfiguration configuration = new ExportConfiguration();      @Mock (name=""subject"")     protected static final Subject subject = mock(Subject.class);      // ----------------------------------------------------     // JUNIT specific variables     // ----------------------------------------------------     @InjectMocks     private static ExportResource exportResource = new ExportResource();      @ClassRule     public static final ResourceTestRule resources = ResourceTestRule.builder()             .addResource(exportResource).build();      @Before     public void setup() throws Exception {               MockitoAnnotations.initMocks(this);         reset(subject);     }// setup     @AfterClass     public static void tearDownClass() {         // nothing to do atm     }      @Test     public void testSuccessTestConnection() {         Response response = resources.client().target(""/myURL/test"")                 .request().get(Response.class);          /** Check: Response.getCode = 200 */         Assert.assertEquals(""Different status code expected"", 200,                 response.getStatus());     }// testSuccessTestConnection } ```  Doesn't work, as I get faced with this error:  ``` MultiException stack 1 of 1 org.glassfish.hk2.api.UnsatisfiedDependencyException: There was no object available for injection at SystemInjecteeImpl(requiredType=Subject,parent=AbstractExportResource,qualifiers={},position=-1,optional=false,self=false,unqualified=null,1921028872)     at org.jvnet.hk2.internal.ThreeThirtyResolver.resolve(ThreeThirtyResolver.java:74)     at org.jvnet.hk2.internal.Utilities.justInject(Utilities.java:945)     at org.jvnet.hk2.internal.ServiceLocatorImpl.inject(ServiceLocatorImpl.java:923)     at org.jvnet.hk2.internal.ServiceLocatorImpl.inject(ServiceLocatorImpl.java:913)     at org.glassfish.jersey.server.ApplicationHandler.initialize(ApplicationHandler.java:575)     at org.glassfish.jersey.server.ApplicationHandler.access$500(ApplicationHandler.java:166)     at org.glassfish.jersey.server.ApplicationHandler$3.run(ApplicationHandler.java:327)     at org.glassfish.jersey.internal.Errors$2.call(Errors.java:289)     at org.glassfish.jersey.internal.Errors$2.call(Errors.java:286)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.processWithException(Errors.java:286)     at org.glassfish.jersey.server.ApplicationHandler.(ApplicationHandler.java:324)     at org.glassfish.jersey.server.ApplicationHandler.(ApplicationHandler.java:277)     at org.glassfish.jersey.test.inmemory.InMemoryTestContainerFactory$InMemoryTestContainer.(InMemoryTestContainerFactory.java:77)     at org.glassfish.jersey.test.inmemory.InMemoryTestContainerFactory$InMemoryTestContainer.(InMemoryTestContainerFactory.java:63)     at org.glassfish.jersey.test.inmemory.InMemoryTestContainerFactory.create(InMemoryTestContainerFactory.java:111)     at org.glassfish.jersey.test.JerseyTest.createTestContainer(JerseyTest.java:277)     at org.glassfish.jersey.test.JerseyTest.setUp(JerseyTest.java:609)     at io.dropwizard.testing.junit.ResourceTestRule$1.evaluate(ResourceTestRule.java:198)     at org.junit.rules.RunRules.evaluate(RunRules.java:20)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.mockito.internal.runners.JUnit45AndHigherRunnerImpl.run(JUnit45AndHigherRunnerImpl.java:37)     at org.mockito.runners.MockitoJUnitRunner.run(MockitoJUnitRunner.java:62)     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) ```  Obviously, the injection is not working. After googling for a while and doing research on this topic it has turned out, injectMocks doesn't wok on static variables. And as we see above, the ResourceTestRule is static and the Rule needs to be static. Therefore, the ExportResource needs to be static as well which is causing the problem.   Do you guys know to deal with that?  Thanks in advance.  All the best!","closed","","pornex","2015-06-22T10:37:32Z","2016-02-10T13:50:43Z"
"","1259","Dropwizard DataSourceFactory on with just DATABASE_URL","Heroku and Dokku only offer a single DATABASE_URL when deploying an application. It would be convenient to create a DataSourceFactory using just this url.  The alternative is to parse the DATABASE_URL and pluck username and password from there, but this is error-prone and makes it hard to use different databases, like h2 in test.  Example database_url:  `DATABASE_URL=postgres://postgres:SOME_PASSWORD@172.17.0.1:5432/lolipop`  Example database-configuration:  ``` database:     driverClass: org.postgresql.Driver     url: ${DATABASE_URL} ```  Also, see http://stackoverflow.com/questions/32705394/dropwizard-datasourcefactory-on-heroku-with-just-database-url","closed","","andersem","2015-09-24T10:52:14Z","2015-09-24T12:36:44Z"
"","588","V0.7 cvent","Here it is.  Taps into upstream project at the 0.7.0 release tag.","closed","","alindsey","2014-05-21T16:09:52Z","2014-07-09T16:03:04Z"
"","1500","Running unit test with sqlite3 in memory","Hello,   I'm trying to run my unit test with sqlite3 in memory and I encountered a problem with the parsing of the config.yml file... The tests works fine when I'm using a regular url i.e `url: jdbc:sqlite:database.db` but when I'm trying to use a in memory i get this error:  ```     at com.google.common.base.Throwables.propagate(Throwables.java:160)     at io.dropwizard.testing.DropwizardTestSupport.startIfRequired(DropwizardTestSupport.java:214)     at io.dropwizard.testing.DropwizardTestSupport.before(DropwizardTestSupport.java:115)     at io.dropwizard.testing.junit.DropwizardAppRule.before(DropwizardAppRule.java:87)     at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:46)     at org.junit.rules.RunRules.evaluate(RunRules.java:20)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.mockito.internal.runners.JUnit45AndHigherRunnerImpl.run(JUnit45AndHigherRunnerImpl.java:37)     at org.mockito.runners.MockitoJUnitRunner.run(MockitoJUnitRunner.java:62)     at org.junit.runner.JUnitCore.run(JUnitCore.java:137)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144) Caused by: io.dropwizard.configuration.ConfigurationParsingException: src/main/java/gaas/cb/config/ConfigTest.yml has an error:   * Malformed YAML at line: 14, column: 27; mapping values are not allowed here  in 'reader', line 14, column 27:       url: jdbc:sqlite::memory: ```  The yml file looks like this (minus unrelated stuff..)  ``` database:   driverClass: org.sqlite.JDBC   url: jdbc:sqlite::memory:   properties:     charSet: UTF-8 ```  According to [this](https://bitbucket.org/xerial/sqlite-jdbc/wiki/Usage) the url should be correct.  Do you guys have any idea what I can do to run the db in memory?","closed","","foikila","2016-03-30T09:42:09Z","2016-03-30T11:01:42Z"
"","1099","Testing async request using ResourceTestRule","Hello, I am setting up testing my rest endpoints with `ResourceTestRule`. With jersey api I am able to get the `Future` object from the `async().post(Entity)` call, but then got the below warning:  ``` WARN  [2015-06-04 10:46:47,508] org.glassfish.jersey.test.inmemory.InMemoryConnector: Asynchronous server side invocations are not supported by InMemoryContainer. ```  and the test keep hanging. This Warning seems to be coming from jersey `org.glassfish.jersey.test.inmemory.InMemoryConnector` is there any plan for tackling this so async request could work with `InMemoryConnector`? Or any resource we can look at while this is not available yet.  Thanks,","closed","","mattuuh7","2015-06-04T17:58:47Z","2015-06-08T16:52:36Z"
"","870","Add AssetsBundle as an admin Servlet","Hello,  Since DW 0.7 we can select to add servlet on the admin port, but the AssetsBundle hasn't been updated to reflect that.  I created an AdminAssetsBundle. Since all fields are private, I had to duplicate the whole class, just to change one line:  ``` java environment.admin().addServlet(assetsName, createServlet()).addMapping(uriPath + '*'); ```  We could also keep a single Bundle and add boolean in one of the constructors.","closed","","BorisNaguet","2015-01-29T14:24:55Z","2015-10-05T09:14:12Z"
"","1115","No injection source found for a parameter","Hello,  I am having troubles adding Basic Authentication to my Dropwizard application. I am using DW 0.8.1  I have followed this artciles http://java.dzone.com/articles/getting-started-dropwizard-0 but I keep getting the following  ``` java WARN  [2015-06-17 08:55:10,030] /: unavailable ! org.glassfish.jersey.server.model.ModelValidationException: Validation of the application resource model has failed during application initialization. ! [[FATAL] No injection source found for a parameter of type ```  Initially I thought that the issue was related to https://github.com/dropwizard/dropwizard/issues/783 but my configuration follows the ones in the doc:  ``` java    @PATCH    @Path(""/books/{id}"")    @Consumes(""application/json"")    public void updateTitle(            @Auth User user,            @PathParam(""id"") String bookId, BookBean bookBean) {     } ```  the application configuration  ``` java  environment.jersey().register(AuthFactory.binder(               new BasicAuthFactory<>(                       new UserBasicAuthenticator(configuration.getAuthenticationConfiguration().getUser(),                               configuration.getAuthenticationConfiguration().getPassword()),                       ""SECURITY REALM"",                       User.class)));  ```  and UserBasicAuthenticator is  ``` java  ...  public Optional authenticate(BasicCredentials credentials)             throws AuthenticationException {         if (password.equals(credentials.getPassword())                 && user.equals(credentials.getUsername())) {             return Optional.of(new User(credentials.getUsername()));         } else {             return Optional.absent();         }     } ...  ```","closed","stale,","almy","2015-06-17T09:08:19Z","2019-09-03T00:01:04Z"
"","1474","Dropwizard mustache view response header","Hello! When returning Mustache view response header is: `Content-Type: {text/html, q=1000}` Is there any way to tune this? I would like to return: `Content-Type: text/html; charset=UTF-8` and open it in a browser like a regular web page.","closed","","garntsev","2016-03-09T07:20:25Z","2016-03-09T07:48:39Z"
"","1089","dropwizard-db 0.8.1 closed connections are returned to pool","Hello guys, we have migrated to Dropwizard 0.8.1 from 0.6.2 recently and faced the following issue while using JDBI: after database restart (Postgres), our application wasn't been able to restore connectivity to DB, all connections were closed and every time, after failed attempt to execute some SQL statement, returned back to pool. Pool is configured with all tests (on borrow, on return, on connect, while idle) disabled. Dropwizard 0.8.1 is using Tomcat DBCP 8.0.18 vs 7.0.37 on 0.6.2. Database configuration we are using is the same for both Dropwizard versions. Dropwizard 0.6.2 is using 7.0.37 DBCP and is able to restore from DB restart, because PoolableConnection class performs explicit check if underlying SQL connection is closed:  ```  public synchronized void close() throws SQLException {     if (_closed) {         // already closed         return;     }      boolean isUnderlyingConectionClosed;     try {         isUnderlyingConectionClosed = _conn.isClosed();     } catch (SQLException e) {         try {             _pool.invalidateObject(this); // XXX should be guarded to happen at most once         } catch(IllegalStateException ise) {             // pool is closed, so close the connection             passivate();             getInnermostDelegate().close();         } catch (Exception ie) {             // DO NOTHING the original exception will be rethrown         }         throw (SQLException) new SQLException(""Cannot close connection (isClosed check failed)"").initCause(e);     }    ... ```  There is no such check in DBCP 8.0.18.   Have anybody else faced this? We don't want to enable on borrow/on return validation checks just to overcome it.  P.S.: I've asked in Tomcat mailing list why they have removed this underlying connection check, will update this issue with response.","closed","","TheTweak","2015-06-01T17:41:46Z","2015-06-18T18:42:57Z"
"","1138","Upgrade to Jersey 2.18","Hello  We are using dropwizard 0.8.1 which rely in Jersey 2.17 (org.glassfish.jersey.core:jersey-client:jar:2.17). Jersey 2.17 has a known major issue https://java.net/jira/browse/JERSEY-2786 fixed in 2.18,  but we can't update this dependency directly, cause it's a breaking change and migration is needed. https://jersey.java.net/documentation/latest/migration.html  Please consider the upgrade to jersey 2.18 Thanks","closed","","krutsko","2015-06-27T11:34:58Z","2015-07-01T19:33:10Z"
"","1026","DropwizardAppRule handling lifecycle of Jersey Client's ExecutorService when injected from another HK2 ServiceLocator","Gosh, that's impossible to set a proper title to explain this..  As I was trying to fix #862, I came across a couple of solutions in [this Stackoverflow Question](http://stackoverflow.com/questions/23224234/how-can-i-cleanly-override-the-default-servicelocator-used-by-jersey). Unfortunately, my `DropwizardAppRule` tests that involve jersey client making async calls started to fail with the following stacktrace:  ``` java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@3f3bdbb9 rejected from java.util.concurrent.ThreadPoolExecutor@7a39523a[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1] ! at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2047) ~[na:1.8.0_25] ! at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:823) ~[na:1.8.0_25] ! at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1369) ~[na:1.8.0_25] ! at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:112) ~[na:1.8.0_25] ! at org.glassfish.jersey.client.ClientRuntime.submit(ClientRuntime.java:197) ~[jersey-client-2.17.jar:na] ! at org.glassfish.jersey.client.ClientRuntime.submit(ClientRuntime.java:141) ~[jersey-client-2.17.jar:na] ! at org.glassfish.jersey.client.JerseyInvocation.submit(JerseyInvocation.java:723) ~[jersey-client-2.17.jar:na] ! at org.glassfish.jersey.client.JerseyInvocation$AsyncInvoker.method(JerseyInvocation.java:602) ~[jersey-client-2.17.jar:na] ! at org.glassfish.jersey.client.JerseyInvocation$AsyncInvoker.get(JerseyInvocation.java:471) ~[jersey-client-2.17.jar:na] ..... ```  The first test in the class doesn't produce this, but the following ones do. This doesn't occur when I use `environment.jersey().register(new AbstractBinder(){...})` but only occurs when I overwrite `ServletContext`s `SERVICE_LOCATOR` attribute or bridge my own `ServiceLocator` to jersey's.   It's very difficult for me to explain the whole thing because it involves too many actors. So I've created a simple test project at https://github.com/natnan/dropwizard-executor-test which should explain it better.  I've tried going into TestSupport code, and debug it to find the difference between two approaches but couldn't find anything.","closed","","natnan","2015-05-01T14:02:06Z","2015-07-21T14:41:24Z"
"","828","Null pointer Exception (NPE) creating ResourceTestRule","Good day Will be awesome if you can help me I'm trying to upgrade dropwizard from 0.6 to 0.8. And Then I run my tests i get NPE:  ``` java java.lang.NullPointerException     at org.glassfish.jersey.test.JerseyTest.tearDown(JerseyTest.java:634)     at io.dropwizard.testing.junit.ResourceTestRule$1.evaluate(ResourceTestRule.java:144)     at org.junit.rules.RunRules.evaluate(RunRules.java:20)     at org.junit.runners.ParentRunner.run(ParentRunner.java:309)     at org.junit.runner.JUnitCore.run(JUnitCore.java:160) ```  However, I'm able to run tests from example project without any issues. It looks liek it's failing due to unknown reasons in InMemoryTestContainerFactory:  ``` java     public TestContainer create(final URI baseUri, final DeploymentContext context) throws IllegalArgumentException {         return new InMemoryTestContainer(baseUri, context);     } ```  Since exception or smth is consumed I have no idea why it's failing. Have you faced such issues ?  I'm thinking of amending ResourceTestRule#apply method to add some catch\log\rethrow logic since original exception got suppresed by NPE later. May it  be linked with that I'm trying to use guice DI instead of HK2. Thank you!","closed","","artemabalmasov","2014-12-30T19:00:03Z","2017-05-09T14:02:41Z"
"","1217","No two hibernateBundles can listen in parallel to @UnitOfWork","given two active hibernate-bundles, it is not possible that both are used concurrently. The sketch below is roughly what i use atm. The problem is caused by HibernateBundle#run(), which - in my case - registers a ´UnitOfWorkApplicationListener´ instance two times as jersey singletons. So, as a result ´@UnitOfWork´ wont find any session when i access the BResource methods, because jersey only registers the first call.  https://github.com/dropwizard/dropwizard/blob/50d906e17bfb29cad76c6f7a2c24da8f2fa02003/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/HibernateBundle.java#L57  ``` java public class BrokenApplication extends Application {     private final HibernateBundle bundleA = new HibernateBundle(A.class) {         @Override         public DataSourceFactory getDataSourceFactory(MyConfiguration configuration) {             return configuration.getDatabaseFactoryA();         }          @Override         protected String name() {             return ""hibernate.A"";         }     };      private final HibernateBundle bundleB = new HibernateBundle(B.class) {         @Override         public DataSourceFactory getDataSourceFactory(MyConfiguration configuration) {             return configuration.getDataSourceFactoryB();         }          @Override         protected String name() {             return ""hibernate.B"";         }      };      @Override     public void initialize(final Bootstrap bootstrap) {         bootstrap.addBundle(bundleA);         bootstrap.addBundle(bundleB);     }      @Override     public void run(final MyConfiguration configuration, final Environment environment) {         // each repo contains accessors to the Daos.          final ARepository repoA = new ARepository(bundleA.getSessionFactory());         environment.jersey().register(new AResource(repoA));          final BRepository repo = new BRepository(bundleB.getSessionFactory());         environment.jersey().register(new BResource(repo));     } } ```","closed","","helt","2015-08-14T11:53:14Z","2015-12-23T12:15:35Z"
"","1495","Update on README.md in dropwizard-archetypes","Given that $name is used to generate Configuration and Application classes, it is vital for new users not to inappropriately name it during maven interactive mode.   Also the hard-coded 0.9.1 archetype version is replaced with a place holder (there might be a better solution to have a token put in that is value-replaced by release version?).","closed","","cwang","2016-03-25T20:08:05Z","2016-03-29T10:02:14Z"
"","1227","Query param validation not working properly on bean param subclasses","Given following classes:  ``` java public class BaseClass {      @NotNull     @QueryParam(""startDate"")     protected LocalDate startDate;      public LocalDate getStartDate() {         return startDate;     } }  public class SubcClass extends BaseClass {     ... }  @Path(""path"") public class QuantityResource {      @GET     public ResponseEntity working(@Valid @BeanParam BaseClass req) {         ...         }      @GET     public ResponseEntity notWorking(@Valid @BeanParam SubClass req) {         ...         } } ```  If `working` method is executed and startDate query param is missing then correct HTTP Bad Request response with corresponding message is returned. However if `notWorking` method is executed and startDate query param is missing then 500 interval server error is returned and an exception is logged:  ``` ERROR [2015-08-19 12:27:42,396] org.glassfish.jersey.server.ServerRuntime$Responder: An exception has been thrown from an exception mapper class io.dropwizard.jersey.validation.ConstraintViolationExceptionMapper. ! java.lang.NullPointerException: null ! at io.dropwizard.jersey.validation.ConstraintMessage.getMemberName(ConstraintMessage.java:74) ~[dropwizard-jersey-0.9.0-rc3.jar:0.9.0-rc3] ! at io.dropwizard.jersey.validation.ConstraintMessage.calculateMessage(ConstraintMessage.java:54) ~[dropwizard-jersey-0.9.0-rc3.jar:0.9.0-rc3] ! at io.dropwizard.jersey.validation.ConstraintMessage.getMessage(ConstraintMessage.java:39) ~[dropwizard-jersey-0.9.0-rc3.jar:0.9.0-rc3] ! at io.dropwizard.jersey.validation.ConstraintViolationExceptionMapper$1.apply(ConstraintViolationExceptionMapper.java:24) ~[dropwizard-jersey-0.9.0-rc3.jar:0.9.0-rc3] ! at io.dropwizard.jersey.validation.ConstraintViolationExceptionMapper$1.apply(ConstraintViolationExceptionMapper.java:21) ~[dropwizard-jersey-0.9.0-rc3.jar:0.9.0-rc3] ! at com.google.common.collect.Iterators$8.transform(Iterators.java:799) ~[guava-18.0.jar:na] ```  The cause is that `io.dropwizard.jersey.validation.ConstraintMessage.getMemberName` method is using `FieldUtils.getDeclaredField` method for getting required instance field. However this method returns only fields declared on the class and not on superclasses. Using `FieldUtils.getField` might help???","closed","bug,","StanSvec","2015-08-19T12:18:13Z","2015-08-19T14:22:27Z"
"","1057","ExceptionMapper response body is not being returned in tests (protected routes only)","Given a custom exception mapper like this one:   ``` public class CustomExceptionMapper implements ExceptionMapper {      @Override     public Response toResponse(final Exception exception) {         return Response.status(599) //                 .entity(exception.getMessage()) //                 .type(""text/plain"") //                 .build();     } } ```  And a resource route that fails (throwing a business exception or something). Using as example, this one:  ```     @RolesAllowed({""ADMIN""})     @GET     @Path(""fail"")     public String thisFails(@Context SecurityContext securityContext) {         throw new RuntimeException(""My exception message"");     } ```  It's expected to this test to pass:  ``` Response response = target(""/test/fail"").request()                        .header(HttpHeaders.AUTHORIZATION, ""Basic Z29vZC1ndXk6c2VjcmV0"")                        .get();  assertThat(response.getStatus()).isEqualTo(599); // This is ok. assertThat(response.readEntity(String.class)).isEqualTo(""My exception message""); // This fails. ```  But just only the status code is respected, the body is not.  ``` org.junit.ComparisonFailure: expected:<""[My exception message]""> but was:<""[Grizzly 2.3.16 CUSTOMCUSTOMGrizzly 2.3.16]"">     at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)     at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)     at      ...omitted ```  I'm trying to figure out how to fix this issue. I've been working on this in my fork, here is the commit with unit test that fails: https://github.com/thiagomoretto/dropwizard/commit/ef6537609cdfbf13312a349ee693ebaf27cdc3f3. Would be awesome if someone could help me to find out how to solve this issue, a tip or something like. I could work on this to send a PR, but still I didn't found the root cause of the problem.","closed","","thiagomoretto","2015-05-19T02:07:01Z","2015-06-24T21:10:55Z"
"","1161","Remove Authenticator generic parameter from AuthFilterBuilder","Generic parameter that controls a type of a passed authenticator to the `AuthFilterBuilder` is not actually needed. Type-safety is already forced by the generic parameters C(credentials) and P(principal). The user has to provide a class that implements interface `Authenticator`, and we don't care about concrete type of this implementation, because it doesn't affect the auth filter.  This commit also moves the common logic of building auth filters to the `AuthFilterBuilder` and adds some comments for the public API.","closed","","arteam","2015-07-11T18:11:31Z","2016-01-24T08:06:14Z"
"","1231","How to test a resource protected with `@Auth`?","From the documentation it's unclear how to by pass the authentication. What I read [here](https://groups.google.com/forum/#!topic/dropwizard-user/7ES9GPs2O2k) doesn't work because the methods used are simply not there (e.g: `client.addFilter(new HTTPBasicAuthFilter(“user”, “secret""));` - seems to be from jersey). If I can make this work I would update the documentation to make it easier for others to do testing.  Here is my class rule  ``` java @ClassRule     public static final ResourceTestRule resources = ResourceTestRule             .builder()             .addProvider(                     AuthFactory.binder(new BasicAuthFactory(                             new TokenAuthenticator(userDAO),                             ""SUPER SECRET STUFF"", User.class)))             .addResource(new ShopResource(shopDAO, userDAO)).build(); ```  where `TokenAuthenticator` is a derivation of a username/password scheme. I want to basically have the username:password send to `BasicAuthentication` to the specified realm. However when I send my request   ``` java Builder builder = resources                 .client()                 .register(                         HttpAuthenticationFeature                                 .basic(""test@test.com"", ""test""))                 .target(R.URL_SHOPS).request();         Response response = builder.post(Entity.json(shop));         System.out.println(response.getStringHeaders()); ```  my authenticator simple doesn't get called at all.   For more details, here is my token validator   ``` java public class TokenAuthenticator implements         Authenticator {     UserDAO userDAO;      public TokenAuthenticator(UserDAO userDAO) {         super();         this.userDAO = userDAO;     }      /**      * Need to send in email:auth_token      */     @Override     public Optional authenticate(BasicCredentials credentials)             throws AuthenticationException {         Optional userOptional = userDAO.findByEmail(credentials                 .getUsername());         if (!userOptional.isPresent()                 || userOptional.get().getAuthToken() != credentials                         .getPassword())             return Optional.absent();         return userOptional;     }  } ```  and here is my resource  ``` java     @POST     public Response create(@Auth User user, Shop shop) {         if (shopDAO.findByName(shop.getName()).isPresent()) {             return Response.status(Status.NOT_ACCEPTABLE).entity(""Name existed"").build();         }          if (!userDAO.findById(shop.getUserId()).isPresent()) {             return Response.status(Status.NOT_FOUND).entity(""User id not found"").build();         }          long shopId = shopDAO.create(shop);         return Response.status(Status.CREATED).entity(shopId).build();     } ```","closed","","wakandan","2015-08-20T14:04:28Z","2015-08-25T02:28:12Z"
"","865","[0.8.0-rc2] Setting the port on the command line fails.","From the docs,  ``` java -Ddw.server.applicationConnectors[0].port=9090 [...] ```  Trying this with a Dropwizard 0.8.0-rc2 app fails as follows:  ``` $ java -Ddw.server.applicationConnectors[0].port=9090 -jar build/libs/dropbear-all.jar server Exception in thread ""main"" java.lang.IllegalArgumentException: Unable to override server.applicationConnectors[0].port; node with index not found. ```  I was rather hoping that'd set the port, instead, so I could run Dropwizard on Heroku.  An app reproducing this problem is available at [ojacobson/dropbear](/ojacobson/dropbear). To reproduce:  ``` ./gradlew build java -Ddw.server.applicationConnectors[0].port=9090 -jar build/libs/dropbear-all.jar server ```","closed","","ojacobson","2015-01-28T03:58:23Z","2015-02-15T22:01:42Z"
"","613","Documentation on AssetsBundle should mention dropwizard-assets","From the docs I did not understand that I needed to include dropwizard-assets in my pom.xml in order to use AssetsBundle.. I think the docs should mention in which package AssetsBundle can be found.","closed","documentation,","jankazemier","2014-06-10T14:29:22Z","2014-07-07T08:24:46Z"
"","1175","Update README.md","Found a typo in the readme. fixed.","closed","","yiweig","2015-07-17T17:07:31Z","2015-07-17T17:34:51Z"
"","1134","Add Justin Plock to the developers list","Forgot about this, sorry","closed","","jplock","2015-06-25T14:18:52Z","2015-06-26T12:26:02Z"
"","1525","How to turn off connection logging now in new release?","For logs like this:  ``` 127.0.0.1 - - [19/Apr/2016:15:01:19 +0000] ""GET /service/async HTTP/1.1"" 404 43 ""-"" ""Jersey/2.22.2 (HttpUrlConnection 1.8.0_45)"" 105 127.0.0.1 - - [19/Apr/2016:15:02:01 +0000] ""GET /async HTTP/1.1"" 200 12 ""-"" ""Jersey/2.22.2 (HttpUrlConnection 1.8.0_45)"" 5027 ```  how do we suppress these in the logs? In 0.9.2, we did it with adding the following under the server section in the YML file:  ``` requestLog:   timeZone: UTC   appenders: [] ```  But now, during startup a validation error pops up:    ``` klslave.yml has an error:   * Unrecognized field at: server.requestLog.timeZone     Did you mean?:       - appenders ```","closed","","timmolter","2016-04-19T15:11:00Z","2016-04-19T15:15:40Z"
"","1225","Validation is not done with @FormParam","For `application/x-www-form-urlencoded` content type the validation of parameter should also be done.  The following code does not return an error when email is missing or is not valid.  ``` java @POST @Path(""/subscription"") public String subscribe(@FormParam(""email"") @NotNull @Email String email) {     return email; } ```  ``` sh curl -H ""Content-Type: application/x-www-form-urlencoded"" -X POST \   -d 'email=test@test' http://localhost:8080/subscription ```","closed","","a14n","2015-08-18T16:17:16Z","2015-08-18T16:33:21Z"
"","1257","Child resource injection not working","Following the jersey documentation this is supposed to work and it has worked before but not with 0.9.0-rc5:  ``` @Path(""logg_ut"") public Class loggUtResource(){     return LoggUtResource.class; } ```  However this works:  ``` @Path(""logg_ut"") public LoggUtResource loggUtResource(){     return new LoggUtResource(null, null, null); } ```  Debugging I found this in DropwizardResourceConfig.java:168  ``` for (ResourceMethod method : resource.getResourceMethods()) {      endpointLogLines.add(new EndpointLogLine(method.getHttpMethod(), basePath, klass)); } ```  The resource contains  0 resouce methods but one and causes a null pointer exception : _Resource{""/lobby/"", 1 child resources, 0 resource methods, 0 sub-resource locator, 1 method handler classes, 0 method handler instances}_  And then: _resource: null_ for the sub resource  EDIT: I found this in line 179: `populate(path, method.getInvocable().getRawResponseType(), true, endpointLogLines);` rawresponsetype: class java.lang.Class responsetype: java.lang.Class  I hope I did'nt miss anything and perhaps Dropwizard isn't supposed to support this feature?","closed","","espenhoh","2015-09-23T18:32:02Z","2015-09-25T21:07:39Z"
"","991","Add documentation and tests surrounding empty string optionals","Following the discussions in #986 and #983, this pull requests adds documentation and tests around empty string params, such as cases like `/hello-world?name=` where the param will evaluate to `Optional.of("""")`  I decided to add in a sample implementation for those following along in the getting started, so `/hello-world?name=` will return ""Hello, Stranger"". The implementation derives from `AbstractParam`. Alternatively, a custom `ParamConverterProvider` could be registered but that would affect all String params for all endpoints (so I decided against that).  Also this pull request fixes a link that was missing (originally my fault :blush:)","closed","documentation,","nickbabcock","2015-04-13T17:59:59Z","2017-11-30T15:21:58Z"
"","857","JerseyClient fails to set Content-Encoding to gzip","Following code in JerseyClientBuilder enables gzip compression:  ``` if (configuration.isGzipEnabled()) {     client.register(new GZipDecoder());     client.register(new ConfiguredGZipEncoder(configuration.isGzipEnabledForRequests())); } ```  Unfortunately it fails to set Content-Encoding header when using this test code:  ``` WebTarget target = client.target(uri); Response response = null; try {     response = target         .request(MediaType.APPLICATION_JSON)         .post(Entity.entity(string, MediaType.APPLICATION_JSON));     return response.getStatus(); } finally {     response.close(); } ```  It's easy to spot that the header is missing when DEBUG logging is enabled. Also a warning is logged indicating that ConfiguredGZipEncoder implementation is unsupported:  ``` 2015-01-21 18:45:15,078Z WARN o.g.j.m.i.HeaderUtils: There are some request headers that have not been sent by connector [org.glassfish.jersey.apache.connector.ApacheConnector]. Probably you added those headers in WriterInterceptor or MessageBodyWrite r. That feature is not supported by the connector. Please, do not modify headers in WriterInterceptor or MessageBodyWriter or use default HttpUrlConnector instead. Unsent header changes: [Content-Encoding] ```","closed","","mabn","2015-01-21T18:53:28Z","2015-02-15T22:01:42Z"
"","1063","Option to use SelectChannelConnector in Jetty for NIO","Folks,  I'm trying to look for a way to use NIO in my dropwizard app. Would it be better to take fetch this as a server config?","closed","","kgdinesh","2015-05-22T12:35:26Z","2015-05-22T13:42:51Z"
"","1202","Fixing issue with ChainedAuthFactory to allow not required authentication","Fixing issue #1201.  `ChainedAuthFactory` currently defaults `required` parameter to true, instead of using the annotation `required` value.","closed","bug,","mtakaki","2015-07-31T04:51:37Z","2015-07-31T14:59:20Z"
"","619","Updating Guava to 17.0","Fixes some issues with Bloomfilters. Bloomfilters created with Guava 17 are not readable by pre Guava 17.  https://code.google.com/p/guava-libraries/wiki/Release17","closed","","reines","2014-06-13T20:53:04Z","2014-06-13T21:51:31Z"
"","836","Add option to change test container factory, and explicitly default to InMemoryTestContainer","Fixes https://github.com/dropwizard/dropwizard/issues/835","closed","feature,","Lugribossk","2015-01-06T23:14:50Z","2015-01-17T15:48:41Z"
"","645","Update pom to 0.7.2-SNAPSHOT","Fixes https://github.com/dropwizard/dropwizard/issues/644","closed","","mveitas","2014-07-06T18:14:47Z","2014-07-07T08:10:21Z"
"","1446","Expose the ObjectMapper and Environment from the FakeApplication","Fixes https://github.com/dropwizard/dropwizard/issues/1393","closed","improvement,","jplock","2016-02-05T00:22:52Z","2016-02-06T13:19:47Z"
"","616","Updating jdbi to 2.55","Fixes a race condition in which queries could be directed to the wrong database.  https://www.twilio.com/engineering/2014/06/03/jdbi-race-condition","closed","","reines","2014-06-13T20:48:45Z","2014-06-13T21:34:40Z"
"","1084","Update caching implementation to not cache absent values.","Fixes #947","closed","","jplock","2015-05-27T18:10:56Z","2015-05-28T00:07:49Z"
"","813","Fixes #806 with a more descriptive error when an empty config file is provided","Fixes #806 with a more descriptive error when an empty config file is provided","closed","improvement,","markreddy","2014-12-13T17:32:20Z","2015-05-12T16:43:56Z"
"","728","Refactoring logEndpoints, filter by Resource.from() != null","fixes #726","closed","","jangalinski","2014-10-05T15:41:18Z","2015-01-03T15:18:00Z"
"","654","Fixes #653","Fixes #653","closed","documentation,","mikeycmccarthy","2014-07-11T08:49:51Z","2014-07-11T09:49:04Z"
"","782","Enable TravisCI to deploy SNAPSHOT builds","Fixes #440 by providing TravisCI's build environment with an encrypted username and password to use when deploying to Sonatype's snapshot repository. The username and password being used are from the new [continuous integration account set up by the Sonatype team](https://issues.sonatype.org/browse/OSSRH-12020).  The values are [encrypted](http://docs.travis-ci.com/user/encryption-keys/) using the keys for the dropwizard/dropwizard repository. They will not work (by design) for any forks of the project, preventing others from getting access to the raw credentials. We should take care not to accept any subsequent pull requests that may expose those credentials (i.e. by `echo`'ing them to the console).  I've tested these changes in a fork, including forking my fork to create a pull request and verify that the pull request doesn't subsequently deploy its changes. Allowing a pull request to deploy a SNAPSHOT would expose us to nefarious individuals seeking to taint the SNAPSHOT repo with bad code. While TravisCI prevents this by not making encrypted values available to builds based off of pull requests, I've added an additional check to the TravisCI build to skip the deploy step altogether in a pull request build.","closed","","ryankennedy","2014-11-18T04:45:47Z","2014-11-18T19:51:16Z"
"","889","Range header support. Replaces #418","Fixes #418","closed","","jplock","2015-02-22T18:28:24Z","2015-02-23T18:15:39Z"
"","759","Add JerseyClientConfiguration option for disabling chunked encoding.","Fixes #403","closed","improvement,","reines","2014-10-24T15:30:09Z","2017-03-13T13:57:48Z"
"","1509","Log missing template at ERROR instead of DEBUG","Fixes #1508","closed","improvement,","jplock","2016-04-05T00:55:54Z","2016-04-05T07:43:42Z"
"","1264","Add settings for removeAbandonedTimeout and removeAbandoned","Fixes #1255","closed","improvement,","joschi","2015-09-28T09:58:27Z","2015-09-28T13:43:38Z"
"","1331","Feature fix maven version warning","Fixed two Version Override Warnings","closed","","fexbraun","2015-11-09T13:33:18Z","2015-11-09T14:11:48Z"
"","1049","Update core.rst","Fixed the `DateNotSpecifiedServletFilter` example.","closed","documentation,","souravmitra","2015-05-14T19:04:05Z","2015-05-15T08:11:22Z"
"","574","Add enforcer rules to stop unwanted logging dependencies being pulled in","Fixed #573. Note that this relies on the current pull request from @joschi. If this gets pulled in first the build will fail (which proves it works conveniently). Let me know if you want me to limit this just to commons-logging for now.","closed","","mikeycmccarthy","2014-05-12T17:05:45Z","2014-06-16T14:44:38Z"
"","1065","Fix Checkstyle warnings","Fix various Checkstyle warnings about whitespaces, formatting, modifiers visibility and common code style.  I ran [Checkstyle](http://checkstyle.sourceforge.net/) on the project other day and fixed a couple of simple warnings that were reported.  I don't think there is much value in this change, but it doesn't break anything, makes the code more easy to read, and, in some degree, reduces the technical dept. We can fix all these style warnings in one step and don't worry about them in future.","closed","","arteam","2015-05-22T20:59:45Z","2016-01-24T08:03:37Z"
"","1481","Fix issue when upgrading logback to 1.1.5 beyond","Fix https://github.com/dropwizard/dropwizard/issues/1478","closed","improvement,","xiaodong-xie","2016-03-16T20:06:34Z","2016-03-26T18:23:02Z"
"","781","jersey: update gzip encoder to work with Jersey 2.x","Fix for issue #780   Update ConfiguredGZipEncoder to work with Jersey 2.x which no longer allows setting headers via WriterInterceptor","closed","","cmicali","2014-11-17T16:44:26Z","2014-11-17T19:21:30Z"
"","1102","1101 - JSR reference for Hibernate-validator","Fix for #1101 Minor ""Getting started"" Hibernate-validator documentation error (https://github.com/dropwizard/dropwizard/issues/1101)","closed","documentation,","RawToast","2015-06-05T13:29:22Z","2015-06-05T13:48:40Z"
"","1009","Fix a package structure of dropwizard-benchmarks","Fix an incorrect package structure of the module _dropwizard-benchmarks_.  - Benchmarks should be placed in the standard Maven _src/main/java_ hierarchy. Otherwise they are not compiled. - Add a descriptive name for the module - Exclude the generated code by JMH from the FindBugs analysis","closed","task,","arteam","2015-04-23T08:41:28Z","2016-01-24T08:04:30Z"
"","909","Fix typos in release notes.","Fix a few small typos in the 0.8 release notes.","closed","","pkwarren","2015-02-28T02:07:00Z","2015-03-01T21:57:04Z"
"","874","Add Jersey DropwizardApacheConnector","Fix #861, Fix #857, Fix #849, Fix #789, Fix #863  Add our own version that uses the pre-configured Apache HTTP client.  Dropwizard has a stable and mature Apache HTTP client with an extensive configuration. Rather than trying to simulate configuration with Jersey properties, we can just use a built Apache client and write a custom connector that does a glue work between Jersey and Apache client's abstractions.  With this approach we have a single place of configuration. That reduces burden of supporting a new feature both in Apache and Jersey clients.  This also reverts the approach taken in #791 with a base class that contains common configuration.  It would be great if someone could try to test this more thoroughly because I did only sanity tests.","closed","improvement,","arteam","2015-02-03T18:10:18Z","2016-01-24T08:04:09Z"
"","649","Remove testGracefulShutdown test, because it's nondeterministic in Jetty 9","Fix #648 Remove testGracefulShutdown test, because it's nondeterministic in Jetty 9","closed","","arteam","2014-07-09T16:53:25Z","2016-01-24T08:18:03Z"
"","866","Add facility to override the default configuration","Fix #636, Fix #865  If a YAML configuration file is not provided, Dropwizard by default uses an empty object tree as a config representation.  This approach has a flaw in case of configuration overriding. For this to work, a full object tree analogous by structure with the configuration should be present.  A better approach is to instantiate a configuration object with defaults, ask Jackson to build an object tree and pass this tree to the overriding routine. After that Jackson will create a desired configuration from a changed tree.  In case if there is no overriding Jackson will just build the same configuration object as the default.","closed","improvement,","arteam","2015-01-28T09:52:48Z","2019-11-09T17:38:11Z"
"","834","Warning about maximum pool size and unbounded queues","Fix #575 JDK ThreadPoolExecutor behaves a rather different than users can expect.  A user expects that parameter 'maximumPoolSize' controls maximum amount of worker threads for processing tasks. When there is more tasks than amount of worker threads then the pool grows incrementally to that size.  But actually ThreadPoolExecutor will grow the pool only if a queue is reached it's bound. If the queue is unbounded then it won't increase pool size beyond 'corePoolSize' limit. This seems rather awkward because queue type shouldn't be related with speed of it's processing.  Anyway we should give a warning to users to improve their awareness of the situation.","closed","improvement,","arteam","2015-01-06T21:03:41Z","2016-01-24T08:07:03Z"
"","852","Dropwizard & Apache Cassandra?","First off, let me say I'm blown away by the brilliance of Dropwizard (bravo!!).  I noticed at the moment you only have a module for RDBMS, and was hoping I could peak interest in expanding into the NoSQL space.    The folks over at Datastax provide an Apache v2 licensed driver for Apache Cassandra: https://github.com/datastax/java-driver  Recently, they added a really nice abstraction layer to execute queries through annotations, which smells very similar to JDBI's interface.  If Dropwizard provided an optional module to leverage this, you'd have a pretty powerful & scalable stack out of the box for analytics, etc.  Has this been discussed already? Or no?","closed","","gordysc","2015-01-17T02:36:22Z","2015-01-17T13:58:10Z"
"","610","First attempt at an Eclipse formatter settings file","First attempt at an Eclipse formatter settings file to format contributions according to Dropwizard's preferred style.  Note that this file started out as the Google Java Code Style settings at https://code.google.com/p/google-styleguide/source/browse/trunk/eclipse-java-google-style.xml and I tweaked them a little. I am mostly looking for feedback at this point and refinements as this settings file has many moving parts. The best way to play with it is to use it in Eclipse and modify it using the Eclipse GUI for project specific Java Code Style->Formatter settings. The individual elements in the XML file itself can be a bit opaque and are not very well documented.  The intent is to include this in Dropwizard once we agree on the settings so that contributors can have an easier time conforming to the project's code formatting style.  Cheers.","closed","","saadmufti","2014-06-08T17:46:32Z","2015-04-09T20:32:42Z"
"","1151","Fix hibernate error","FakeEntity1 was wrongl placed in io.dropwizard.hibernate package while it should have been in io.dropwizard.hibernate.fake.entities.pckg in its code","closed","","wakandan","2015-07-03T17:22:36Z","2015-07-03T17:23:18Z"
"","760","Make DropwizardAppRule extend ExternalResource","ExternalResource is a junit rule that standardizes the try-before-apply-finally-after pattern already used in the original code implementing TestRule.  By using the ExternalResource, everything works as before, but you can now use before() and after() hooks as extension points. In my case, I would run flyway db initialization in my own rule extending DwAppRule by using super.before();.","closed","improvement,","jangalinski","2014-10-25T08:31:20Z","2014-10-26T20:46:15Z"
"","1412","Allow RequestLogFactory implementation discovery","Extend Discoverable for standard ServiceLoader based extensibility.","closed","improvement,","mwhipple","2016-01-14T02:11:39Z","2016-01-14T05:19:18Z"
"","756","Upgrading freemarker","Exceptions are now more descriptive so we build the web error message ourselves rather than leaking internal class information.  See the final bullet point at http://freemarker.org/docs/versions_2_3_17.html#autoid_145","closed","","reines","2014-10-22T21:41:34Z","2014-10-23T12:54:15Z"
"","1048","added setter to ExampleConfiguration class","ExampleConfiguration class in JDBI example lacks setter for database json property, and it doesn't work until it's added.","closed","documentation,","akoncius","2015-05-13T21:20:12Z","2015-05-14T10:12:12Z"
"","683","Enhenced Jackson#newObjectMapper to take optional JsonFactory","Enhenced Jackson#newObjectMapper to take an custom provided instance of com.fasterxml.jackson.core.JsonFactory. This allows further customizations of the ObjectMapper as allowing comments in JSON files...","closed","","obfischer","2014-08-12T20:43:38Z","2014-08-17T11:48:09Z"
"","925","Dropwizard Views Documentation incorrect for version 0.8.0","Due to the change in commit 1ffa692833bc4f14b9065ded24f19634724d6311 the documentation for setting up the dropwizard-views module is no longer correct. More plumbing needs to be added to the application's configuration and the getViewConfiguration abstract method of ViewBundle needs to be implemented.","closed","","dstutz","2015-03-06T15:42:26Z","2015-03-08T22:48:37Z"
"","993","ConstraintViolations context determines HTTP status","Due to #842, validation opens up new opportunities and by happenstance, a new bug. Now validations can be done on resource query parameters, return values, etc, and this, in my opinion is a good thing.  The pitfall I ran into is that the current `ConstraintViolationExceptionMapper` with the new bean validation in place, does not follow the [jersey documentation](https://jersey.java.net/documentation/latest/bean-validation.html#d0e13792), which states that:  > 500 (Internal Server Error): If the exception was thrown while validating a method return type. >  > 400 (Bad Request): Otherwise.  This pull request attempts to fix the current behavior, which will return 422 on return values and `*Params`. The violations in `*Params` now return a 400 and a return value violation is a 500.  There is an issue with this implementation: I'm uncomfortable that the only sane implementation for checking if constraint violation was fired on a parameter is by regex. Please advise.  EDIT: I found a better way than regex from the [Jersey code](https://github.com/jersey/jersey/blob/54e27f31205de49004331db2d714c1be9a52bb76/ext/bean-validation/src/main/java/org/glassfish/jersey/server/validation/internal/ValidationHelper.java)","closed","bug,","nickbabcock","2015-04-15T19:53:46Z","2015-05-06T05:52:26Z"
"","832","Metrics registry duplicate metric issue (regression).","dropwizard-client-0.8.0-rc2-20150104.140645-65.jar regression  A unit test in my project has started failing with the dropwizard-client jar from a few hours ago.  I put the previous snapshot version into my pom and it works as it always has so I believe something in commit: https://github.com/dropwizard/dropwizard/commit/637f48c7e28451aec52dddb6fb77f5bbc69a17dc  or https://github.com/dropwizard/dropwizard/commit/f12d6cb43212f9dd091287a05d18bde290c1c02b has regressed this behavior.  ``` whenCreateEventItShouldPersist(org.coner.it.CreateEventIntegrationTest)  Time elapsed: 0.01 sec  <<< ERROR! java.lang.IllegalArgumentException: A metric named     org.apache.http.conn.HttpClientConnectionManager.test-client.available-connections already exists at com.codahale.metrics.MetricRegistry.register(MetricRegistry.java:91) at com.codahale.metrics.httpclient.InstrumentedHttpClientConnectionManager.(InstrumentedHttpClientConnectionManager.java:57) at io.dropwizard.client.ApacheClientBuilderBase.createConnectionManager(ApacheClientBuilderBase.java:184) at io.dropwizard.client.JerseyClientBuilder.buildConfig(JerseyClientBuilder.java:185) at io.dropwizard.client.JerseyClientBuilder.build(JerseyClientBuilder.java:166) at io.dropwizard.client.JerseyClientBuilder.build(JerseyClientBuilder.java:152) at org.coner.it.IntegrationTestUtils.buildClient(IntegrationTestUtils.java:31) at org.coner.it.CreateEventIntegrationTest.whenCreateEventItShouldPersist(CreateEventIntegrationTest.java:38) ```","closed","bug,","jshort","2015-01-04T17:22:21Z","2015-09-23T23:01:54Z"
"","1208","Apache HttpClient 4.4.x Certificate Bug","dropwizard-client 0.9.0-rc3 is using a version of Apache HttpClient (4.4.x) that causes a certificate error when connecting to googleapis.com (and others?) The issue has been fixed in HttpClient 4.5. See here: https://issues.apache.org/jira/browse/HTTPCLIENT-1613","closed","improvement,","derrikcurran","2015-08-06T13:51:46Z","2015-08-06T13:59:47Z"
"","1341","Bootstrap ObjectMapper not used in Jersey MessageBodyWriter","Dropwizard's bootstrap object has an ObjectMapper in it that we've been trying to get to understand java8 datatypes (Optional / DateTime / etc).  Initially we thought the `dropwizard-java8` bundle would do this for us, as it's setting up bootstrap.getObjectMapper() with the appropriate jackson modules, and allows us to return Optional resources.  However, in order to return objects that contain Optionals it appears we need to do the following in our Application's run() method:  ``` java JacksonJaxbJsonProvider provider = new JacksonJaxbJsonProvider(); provider.setMapper(objectMapperWithAppropriateModules); environment.jersey().register(provider);  ```  It feels like a bug in dropwizard the the boostrap ObjectMapper is not being used by the reflection-instantiated JacksonJaxbJsonProvider?  We're seeing this behavior with Dropwizard 0.9.1 and dropwizard-java8 0.9.0-1","closed","stale,","josephlbarnett","2015-11-16T23:23:34Z","2021-06-21T13:06:36Z"
"","1145","Jackon Afterburner Module Registration Prevents Package Property Deserialization","Dropwizard registers the jackson Afterburner module but doesn't give any way to customize its configuration.  The Afterburner module provides the property _cfgUseValueClassLoader which can be set so that afterburner can deserialize protected / package visible properties.  We've got some classes with package visible properties and when we try to serialize/deserialize them we get all sorts of warnings like below:   WARNING: Disabling Afterburner serialization for type class MyClass, field #1, due to access error (type java.lang.IllegalAccessError, message=mypackage/MyClass) 17:41:19.071 [ERROR] [system.err] 17:41:19.071 [ERROR] [system.err] java.lang.IllegalAccessError: mypackage/MyClass  Seems that dropwizard should either allow end users to control whether the after burner module is loaded or not via configuration and/or allow setting of its configuration properties.","closed","","gilbode","2015-06-29T21:56:52Z","2015-07-06T15:31:09Z"
"","1092","Allow specifying configurations for each logger","Dropwizard doesn't have the ability to specify configurations for individual loggers yet. With this patch user can do something like this:  ``` logging:   level: INFO   loggers:     wego.curiosity:       level: DEBUG       appenders:          - type: console           target: stdout           logFormat: ""%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{16} - %msg%n""           ...   appenders:     - type: file      ...     - type: console       target: stdout       logFormat: ""%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{16} - %msg%n""     - type: loggly     ... ```","closed","","wakandan","2015-06-03T08:26:45Z","2015-07-22T18:51:10Z"
"","1176","add configuration option for Proxy Protocol","Dropwizard currently provides a configuration option to read `X-Forwarded-*` headers, `useForwardedHeaders`, but provides no similar configuration option to read [HAProxy PROXY protocol](http://www.haproxy.org/download/1.5/doc/proxy-protocol.txt) data frames, such as those able to be sent through by [AWS ELBs](http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/enable-proxy-protocol.html). The NGINX blog has [a write-up](https://www.nginx.com/blog/realtime-applications-nginx/) about this as well.  In vanilla Jetty, this is accomplished using the [ProxyConnectionFactory](http://download.eclipse.org/jetty/stable-9/apidocs/org/eclipse/jetty/server/ProxyConnectionFactory.html), as described in [Jetty's docs on configuring Connectors](http://www.eclipse.org/jetty/documentation/current/configuring-connectors.html#d0e4404).  Dropwizard should include a configuration option to support reading the PROXY protocol.","closed","","devmage","2015-07-17T23:00:50Z","2019-03-27T17:08:26Z"
"","1343","docs: Explain HTTP based log level configuration","Dropwizard contains the task `LogConfigurationTask` and adds it by default to the [admin environment](https://github.com/dropwizard/dropwizard/blob/49ff92712a936554d2cf9bd7a2b09a0fc07eaf25/dropwizard-core/src/main/java/io/dropwizard/setup/AdminEnvironment.java#L42). Unfortunately this task is not yet documented.","closed","documentation,","bripkens","2015-11-18T14:05:16Z","2015-11-23T13:05:05Z"
"","1030","Add facility to plug-in custom DB connection pools","Dropwizard by default is shipped with the Tomcat JDBC Connection pool. It's mostly fine, but has some disadvantages (performance, limited metrics, handling network failures). It would be great if we had facility to plug-in other DB pools into Dropwizard. For example, Brett Wooldridge's wonderful [HikariCP](https://github.com/brettwooldridge/HikariCP) or [BoneCP](http://jolbox.com/).  Of cource, nothing stops us from implementing a factory, that creates a `ManagedDataSource`. The problem is that `dropwizard-jdb`i, `dropwizard-hibernate` and`dropwizard-migrations` modules require `DataSourceFactory` for the configuration. `DataSourceFactory` is closely tied with the Tomcat pool. So if we use an another pool, we are forced to write own factories for JDBI, Hibernate, etc...  A solution is to provide an interface that abstracts a configuration of a connection pool. Database manipulation modules will be linked with the interface, but not with `DataSourceFactory`. A custom pool factory just need to implement this interface, and it could be plug-in as a Tomcat pool replacement.  If we writed Dropwizard from the scratch we would move the Tomcat pool to a separate module from `dropwizard-db`. But now we have many users and it would be a nightmare for them to migrate to a new implementation.  So we are forced to retain the Tomcat JDBC pool in `dropwizard-db`. New pool users should be advised to exclude it manually in the Maven configuration.","closed","","arteam","2015-05-03T19:16:11Z","2016-08-24T00:25:48Z"
"","710","Default Dropwizard-added ExceptionMappers to be configurable","Dropwizard by default adds jersey exception mappers. There have been various discussions related to how these can be disabled, like: https://groups.google.com/forum/#!searchin/dropwizard-user/exception$20mappers/dropwizard-user/CgPjcY4SLFg/xSDzOCvyx0gJ  A workaround is described here: http://thoughtspark.org/2013/02/25/dropwizard-and-jersey-exceptionmappers/  This all worked great with jersey 1. However, with jersey 2 there are no way (that I have found) to ""deregister"" exception mappers once they have been registered. The jersey provider singletons (in org.glassfish.jersey.server.ResourceConfig) are wrapped in an unmodifiable Set which results in an exception being thrown if attempting to use the approach referenced above.  The motivation for removing/overriding dropwizard exception mappers can of course be debated, but we have currently been doing so in order to have full control over what is being used. Since the underlying jersey implementation uses a Set to hold the exception mappers and the iteration order of a Set cannot be guaranteed, then it has been the safest bet to just remove all dropwizard exception mappers to guarantee that our custom ones are being used.  Therefore, I propose a feature request: Make it possible in dropwizard configuraton to override the way exception mappers are being added.  Would it be interesting if I created a pull request for something like this? And if so, would it be possible to get this into the upcoming 0.8.0 relase if I move quickly?","closed","feature,","kschulst","2014-09-19T12:04:29Z","2014-12-27T13:44:06Z"
"","1478","new logback versions do not log to file","Dropwizard 0.9.2 uses Logback 1.1.3.  Attempting to use newer versions of Logback 1.1.5 + 1.1.6 mean that logs are longer written to file when configured to do so in the YAML which violates the principle of least astonishment. ## Steps to reproduce 1. change pom to use logback version 1.1.5 or 1.1.6 2. Run a service locally with a file appender configured in the YAML - for example:   ``` yaml logging:   level: INFO   loggers:     ""com.example"": DEBUG   appenders:     - type: console       target: stdout       timeZone: UTC       logFormat: ""%-5p [%d{ISO8601,UTC}] %7X{userUUID} %c: %m%n%rEx""     - type: file       threshold: ALL       currentLogFilename: /tmp/example-service/server.log       archivedLogFilenamePattern: /tmp/app/example-service/server-%d.log.gz       archivedFileCount: 20       timeZone: UTC       logFormat: ""%-5p [%d{ISO8601,UTC}] %7X{userUUID} %c: %m%n%rEx"" ``` ## Expected results - Log goes to console and also to file at `/tmp/example-service/server.log` ## Actual results - log goes to console, but no file is created in `/tmp/example-service/server.log` ## Suspicion/Guess as to cause  Logback has changed the way MDC is inherited by threads . ## Refs - Logback release notes : http://logback.qos.ch/news.html","closed","","chas678","2016-03-16T09:27:12Z","2016-09-22T18:43:42Z"
"","1325","Invalid JDK verison in profile","Dropwizard 0.9.1 org.glassfish.jersey.core does exist on nexus Reason: Invalid JDK version in profile 'javadoc-jdk8+': Unbounded range: [1.8 for project unknown:hk2-parent  Some names are changed, but the structure is the same  maven:  ``` Unable to get dependency information: Unable to read the metadata file for artif act 'org.glassfish.hk2:hk2-api:jar': Invalid JDK version in profile 'javadoc-jdk 8+': Unbounded range: [1.8 for project unknown:hk2-parent   org.glassfish.hk2:hk2-api:jar:2.4.0-b31  from the specified remote repositories:   central (http://repo1.maven.org/maven2),   abc-snapshots (http://:8081/nexus/content/repositories/snapshots),   sonatype-nexus-snapshots (http://oss.sonatype.org/content/repositories/snapsho ts)  Path to dependency:         1) .admin:rgadmin:jar:1.0.0-SNAPSHOT         2) io.dropwizard:dropwizard-core:jar:0.9.1         3) io.dropwizard:dropwizard-jersey:jar:0.9.1         4) org.glassfish.jersey.core:jersey-server:jar:2.22.1         5) org.glassfish.jersey.core:jersey-common:jar:2.22.1 ```  code:  ```     4.0.0         parent     parent     3.0.0        com.abc.admin   rgadmin   1.0.0-SNAPSHOT         UTF-8     0.9.1                   io.dropwizard       dropwizard-core       ${dropwizard.version}           ```","closed","","blommish","2015-11-04T12:47:35Z","2015-11-05T08:36:22Z"
"","1320","Migration 0.8 -> 0.9 / @Auth doesn't have required attribute any more","Dropwizard 0.8 had an attribute to `@Auth` so you could annotate a method with  ``` @Auth(required = false) ```  Dropwizard 0.9 doesn't. The [Migration Guide](https://github.com/dropwizard/dropwizard/wiki/Upgrade-guide-0.8.x-to-0.9.x) doesn't describe how to solve this. I found a discussion #1162 about `@PermitAll` but I am not sure if I read it correctly and if this discussion is up to date with the release of 0.9.   Please write a short paragraph in the migration guide on how to handle this.   Thanks!","closed","stale,","ahus1","2015-11-01T13:35:54Z","2019-09-03T00:01:03Z"
"","1027","Add docs on constraint violations","Documents some of the changes implemented in #993","closed","documentation,","nickbabcock","2015-05-01T15:15:37Z","2015-05-07T21:14:49Z"
"","1467","Docs - testing resources - mention threadsafety","Docs on testing resources describe the technique of using a static mock which makes the test class stateful at http://www.dropwizard.io/0.9.2/docs/manual/testing.html#testing-resources  The docs should mention that multiple test methods in this class that use these static mocks will potentially interfere with each others expectations; therefore the class should be marked with the JCIP annotation `@net.jcip.annotations.NotThreadSafe` as described in https://maven.apache.org/surefire/maven-failsafe-plugin/examples/fork-options-and-parallel-execution.html to discourage maven+failsafe/surefire from running the test methods in parrallel.","closed","stale,","chas678","2016-02-23T14:32:46Z","2019-09-03T00:01:00Z"
"","1013","JerseyClientBuilder with MultiPartFeature causes HTTP 400 Bad Request with org.jvnet.mimepull.MIMEParsingException: Missing start boundary.","Defect is briefly described in a subject. Please, find a project by this [link](https://drive.google.com/file/d/0B55JU7RHUffndGVGX29pZkpQUjA/view?usp=sharing) where after running an integration test you can see that JerseyClientBuilder (with Apache client inside I think) causes HTTP 400 when uploading a multipart form but default Jersey client works fine. It can be related to a problem described [here](https://jersey.java.net/documentation/latest/client.html#connectors.warning).","closed","","young-druid","2015-04-25T18:43:51Z","2017-11-13T04:21:04Z"
"","1090","Remove Jersey dependency from dropwizard-core.","Decouple dropwizard-core from Jersey by providing a JerseyServletContainer in dropwizard-jersey. This would allow consumers to implement their own dropwizard-jersey using Jersey 1.  See: https://github.com/dropwizard/dropwizard/issues/1038","closed","","ghenkes","2015-06-02T15:51:05Z","2015-06-06T19:17:27Z"
"","1054","Allow for RolesAllowed annotation on classes","Currently, the `AuthDynamicFeature` checks `@RolesAllowed` annotation only on method level. This prevents creating class level annotations on resources.  Expected behavior: Check also for the annotation on resource class and register the authentication filter in case the annotation is found  Proposed code:  ``` java public class AuthDynamicFeature implements DynamicFeature {     private ContainerRequestFilter authFilter;     public AuthDynamicFeature(ContainerRequestFilter authFilter) {         this.authFilter = authFilter;     }      @Override     public void configure(ResourceInfo resourceInfo, FeatureContext context) {         //get the RolesAllowed on the class level         RolesAllowed ra = resourceInfo.getResourceClass().getAnnotation(RolesAllowed.class);          AnnotatedMethod am = new AnnotatedMethod(resourceInfo.getResourceMethod());         if(ra != null || am.isAnnotationPresent(RolesAllowed.class) || am.isAnnotationPresent(DenyAll.class)) {             context.register(authFilter);         }     } } ```","closed","improvement,","tocr","2015-05-18T07:32:03Z","2016-03-31T17:18:53Z"
"","1376","Print help once on invalid command line arguments","Currently, if `-h` is provided on the commandline and invalid arguments are specified as well, the help message will be printed twice. This is not desired (the help message should only be printed once)  This change is not backwards compatible for those who need to see that `is-help` is set in the `run` command (this would only be when the case when all arguments are optional)  Closes #1357","closed","improvement,","nickbabcock","2015-12-07T21:29:45Z","2015-12-12T19:21:37Z"
"","1279","No logger config per file possible.","Currently, I don't see an option to assign one Logger to a specific file appender. By default, DW will add every logger to the root logger.   The way LoggingFactory is implemented also makes this hard to overwrite. I created a workaround/hack to solve this, but this is not ideal:   see: http://stackoverflow.com/questions/27483442/dropwizard-doesnt-log-custom-loggers-to-file/33085996#33085996  Thanks,  Artur","closed","","pandaadb","2015-10-13T15:36:48Z","2015-12-04T11:49:14Z"
"","869","Add the database (connection pool) configuration reference","Currently there is no database (connection pool) configuration reference in the official documentation. There are only YML examples in JDBI and Hibernate sections.  It would be great to have this configuration in the single place along with others modules.","closed","","arteam","2015-01-29T14:14:28Z","2016-01-24T08:03:26Z"
"","1326","Make HealthCheck ExecutorService configurable in the yml-file","Currently the threadpool used by the HealthChecks executorservice is hardcoded. Perhaps it is useful to make it configurable from the yml-file.  Please provide feedback ...","closed","","rvs-fluid-it","2015-11-04T13:24:18Z","2019-03-03T10:56:16Z"
"","1305","Fix Tests with LF Line Endings in Windows","Currently the tests will fail Windows because of 9f14b2e and 518d4b5  Having .gitattributes set to `auto` will convert `lf` to `crlf` on windows on checkout (and `crlf` to `lf` on checkin), which makes the tests fail (as the tests only check for `\n`). There are a couple solutions ### Solution 1:  Change gitattributes for mustache and freemarker files to force `lf` endings even on windows machines.  ``` *.mustache eol=lf *.ftl eol=lf ```  Not entirely thrilled with this solution as freemarker and mustache files would be treated special. We could set `eol=lf` for all file types, though carelessly doing it may have other tests, which rely on `System.lineSeparator()` to fail. ### Solution 2:  Keep on using `System.lineSeparator()` everywhere and put up with the annoyance it may bring","closed","bug,","nickbabcock","2015-10-27T16:16:40Z","2015-10-28T13:44:46Z"
"","1111","Allow better customization of Jackson ObjectMapper","Currently the only way to customize the Jackson `ObjectMapper` is either through the `io.dropwizard.Application#initialize` method's `bootstrap` parameter (using `bootstrap.getObjectMapper()`) , or the `io.dropwizard.Application#run` method's `environment` parameter (using `environment.getObjectMapper()`). However in these cases, the `ObjectMapper` is already fully initialized using some default modules and settings, and there is no way for Jackson to remove modules from the `ObjectMapper`.  For example, I'm having a very strange issue with the `AfterburnerModule` and since I'm unable to make a reproducible test case for it, I just want to disable it (I don't need this module at all).  Similarly, I might want to configure the `JodaModule` using a different date format, which is also not possible right now.  As such it would be nicer if in the `initialize` method the `Bootstrap` exposes some builder which you can add to, but also remove from, and the final `ObjectMapper` is then built using the settings of this builder. This will allow users to for example remove undesired modules, or reconfigure existing modules by overwriting them with a new configuration.  Or perhaps there could be some configuration settings to indicate how the `ObjectMapper` should be configured.","closed","","vzx","2015-06-09T16:00:33Z","2015-06-18T17:39:34Z"
"","947","CachingAuthenticator caches Optional.absent()","Currently the CachingAuthenticator loads Optional.absent() into the cache which means that if you had a failed credential for whatever reason then it gets cached as absent() by the underlying authenticator.  Instead I think this should be updated to something like:  ```         @Override         public Optional load(K key) throws Exception {             cacheMisses.mark();              //Only cache successful operations, not failures             Optional g = underlying.authenticate(key);             if (g.isPresent()) {                 return g;             }              throw new AuthenticationException(""Failed to load security context into cache"");         } ```  Or at the very least, it should be an option to not cache these failures.  Or would be prefer that each individual authenticator throw an exception instead of returning Optional.absent() ?","closed","security,","brentryan","2015-03-18T16:22:02Z","2015-05-27T21:56:07Z"
"","1418","Refactor ResourceTestRule","Currently the `ResourceTestResourceConfig` class is kind of a mess. It uses several inner classes, a static map of test rules, and doesn't have any comments. It's hard to see what's going on there.  This change: - moves the inner class `ResourceTestResourceConfig` to a separate class named `DropwizardTestResourceConfig`. This name is more meaningful and suitable in my opinion; - introduces the class `ResourceTestJerseyConfiguration` which contains a configuration passed by a user via `ResourceTest.Builder`. It allows to decouple `DropwizardTestResourceConfig` from `ResourceTestRule`. - this class is also used for passing the current `ResourceConfig` configuration via a servlet context instead of the `ResourceTestRule` class in a Grizzly web test container. This removes additinal responsibility from the `ResourceTestRule` class. - adds a minimal documentation for every class, describing their goals.  As a result, this change should make easier to make future improvements to the `ResourceTestRule` class, because of separation of concerns, better class names and added documentation.","closed","","arteam","2016-01-16T19:23:57Z","2016-01-24T08:06:07Z"
"","838","Shouldn't Tasks get their parameters from the body rather than the url","Currently Tasks get their parameters from the URL of the request rather than the POST body of the request. I'm no HTTP expert but I believe it would be more correct to get them from the body instead","closed","","RichoDemus","2015-01-08T13:21:11Z","2016-10-22T14:31:56Z"
"","1367","Logback is used directly","Currently both logback and slf4j are required dependencies in Dropwizard. And since you can only have one implementation of slf4j in your class path it's not possible to use slf4j-log4j12, for example.  As far as I understand it's suppose to be up to the developer as to what implementation of slf4j to use. I suggest that logback is not used directly but only through slf4j and that logback-classic, logback-core and logback-parent are added as runtime dependencies. This would make it possible to exclude then and use a different implementation.  From the [slf4j manual](http://www.slf4j.org/codes.html#multiple_bindings):  > Embedded components such as libraries or frameworks should not declare a dependency on any SLF4J binding but only depend on slf4j-api. When a library declares a compile-time dependency on a SLF4J binding, it imposes that binding on the end-user, thus negating SLF4J's purpose. When you come across an embedded component declaring a compile-time dependency on any SLF4J binding, please take the time to contact the authors of said component/library and kindly ask them to mend their ways.    My case:  If I chose to include both logback and slf4j-log4j12 the following messages are shown:   ``` SLF4J: Class path contains multiple SLF4J bindings. SLF4J: Found binding in [jar:file:/.../.m2/repository/org/slf4j/slf4j-log4j12/1.7.13/slf4j-log4j12-1.7.13.jar!/org/slf4j/impl/StaticLoggerBinder.class] SLF4J: Found binding in [jar:file:/.../.m2/repository/ch/qos/logback/logback-classic/1.1.3/logback-classic-1.1.3.jar!/org/slf4j/impl/StaticLoggerBinder.class] SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation. SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory] ```  ``` Exception in thread ""main"" java.lang.IllegalStateException: Unable to acquire the logger context     at io.dropwizard.logging.LoggingUtil.getLoggerContext(LoggingUtil.java:46)     at io.dropwizard.logging.BootstrapLogging.bootstrap(BootstrapLogging.java:45)     at io.dropwizard.logging.BootstrapLogging.bootstrap(BootstrapLogging.java:34)     at io.dropwizard.Application.(Application.java:24)     ... ```  If I chose to include only slf4j-log4j12 and exclude logback the following messages are shown:   ``` Exception in thread ""main"" java.lang.NoClassDefFoundError: ch/qos/logback/core/filter/Filter     at io.dropwizard.Application.(Application.java:24)     ... Caused by: java.lang.ClassNotFoundException: ch.qos.logback.core.filter.Filter     at java.net.URLClassLoader.findClass(URLClassLoader.java:381)     at java.lang.ClassLoader.loadClass(ClassLoader.java:424)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)     at java.lang.ClassLoader.loadClass(ClassLoader.java:357)     ... 4 more ```  As you can see neither approach works out.","closed","","trond-oydna","2015-12-02T12:08:03Z","2017-10-26T23:36:05Z"
"","1466","Support serialisation of lazy loaded POJOs","Currently any hibernate loaded objects must be fully loaded before the resource method ends, otherwise the Jackson serialiser fails.  This forces developers to annotate associations for eager loading, or walk the object graph to force hibernate to load associations - neither is very nice.  However, the Hibernate5Module can handle lazy loading proxies, but doesn't do this by default (not sure why not) - and developers could enable it.  The problem is that UnitOfWorkApplicationListener closes the hibernate session before the results have been seriazised, so even if developers turn on the lazy-loading support it won't work.  The changes I have made cause the session to be closed later and switch on lazy-loading support by default, as well as adding a test for this functionality.  Possible problems:  Closing the session later may have knock-on effects?  It doesn't seem likely but I'm no expert.  The test is a little messy and there may be a better way of doing it.  Also, I have a somewhat messy commit history (3 instead of 1).  I accidentally committed to my master branch :-(.","closed","improvement,","ant3","2016-02-20T00:00:57Z","2016-06-22T11:07:56Z"
"","843","[0.7.1] dropwizard-example localhost:8443 fails","curl https://localhost:8443/hello-world curl: (35) Server aborted the SSL handshake  Server DEBUG: DEBUG [2015-01-12 10:25:24,809] org.eclipse.jetty.io.ssl.SslConnection: SslConnection@5476d583{NEED_WRAP,eio=-1/-1,di=-1} -> HttpConnection@6f8c3003{FILLING},g=HttpGenerator{s=START},p=HttpParser{s=START,0 of 0} fill exit DEBUG [2015-01-12 10:25:24,810] org.eclipse.jetty.server.HttpConnection: ! javax.net.ssl.SSLHandshakeException: no cipher suites in common  I was expecting the example.keystore to work. Perhaps I'm missing something with the mixture of 0.8.0 rc?","closed","","chook","2015-01-12T10:27:46Z","2015-03-05T14:25:56Z"
"","743","Filter Ordering","Curious if this is intended behavior - when multiple filters are added via ServletEnvironment.addFilter(), the filters are pushed onto the front of the filter chain, instead of being appended to the end of the chain as I was expecting.  This boils down to the behavior of the ArrayUtil.addToArray() method.  Is this a bug or by design?  I've worked around it for now, but would happily contribute a test/fix if deemed an issue.  Thanks.","closed","","mfisher","2014-10-13T19:14:18Z","2014-10-13T19:17:54Z"
"","776","Add simple java maven archetype","Credit to @nicktelford for the majority of this work and @parichards for pairing on this.  See https://github.com/dropwizard/dropwizard/pull/156 for all of Nick's hard work.  I tried to rebase Nick's branch on master, but it didn't seem worth the effort.    Differences from Nick's branch: - Shaded by default.  It seemed appropriate that the default should be a shaded jar since the docs and example app show a shaded JAR. - Fixed a small bug where the main class still had *Service instead of *Application as the suffix.","closed","feature,","JonMR","2014-11-12T02:33:59Z","2014-12-14T16:13:18Z"
"","1080","Fix Coveralls integration","Coveralls-plugin 3.x changed the plugin goal.  Now it's just `coveralls:report`.  See [this](https://github.com/trautonen/coveralls-maven-plugin/commit/355b2e73715bdde4375bb151aeeddaf446b0779c).","closed","","arteam","2015-05-26T21:03:26Z","2016-01-24T08:04:25Z"
"","1534","Issues using dropwizard 1.0.0-rc2 with lombok","Couple of issues I noticed, both i think were due to interactions between lombok and jackson: 1. If config classes have @AllArgsConstructor and @Builder annotation at class level, class level defaults are not prepopulated while parsing config YAML file. For example:  ``` @Data @NoArgsConstructor @AllArgsConstructor @Builder public class TestConfig {     @NotNull     @NotEmpty     private String value = ""Hello""; }  //Used in config public class MyConfig extends Configuration {     @NotNull     @Valid     @Getter     private TestConfig test = new TestConfig(); } ```  If the ""test"" section is omitted in the YAML, d/w will throw an error  2) Check the issue: https://github.com/FasterXML/jackson-databind/issues/1122  Both might be related as moving the @Builder to a clas level constructor in case 1 fixes the problem.  This breaks code written in even d/w version 0.9.2 and would seem like a critical to me.  Can jackson be upgraded before 1.0.0 release?","closed","","santanusinha","2016-05-03T18:02:41Z","2016-05-31T11:01:22Z"
"","1268","JerseyClientConfiguration.setGzipEnabled(false) not working as expected","Correction for issue #1267: - force disableContentCompression() in HttpClientBuilder - set Content-Encoding in GzipDecoder","closed","","lehcim","2015-09-29T15:40:15Z","2015-10-10T10:10:06Z"
"","1205","LoggingFactory race condition","Context: I inherited a maven parent pom which had parallel testing setup in surefire with  ``` classes 2 true ```  Issue: I have multiple test classes in a JUnit test suite which use `ResourceTestRule`s and/or `DropwizardClientRule`s. These are `@ClassRule`s which have to be `public static`, thus they are initialized at class load time.  They internally call `LoggingFactory.bootstrap()`, which ends up in a race condition because of the parallelization over the test classes, which in the end will lead to a `ClassCastException` at `io.dropwizard.logging.LoggingFactory.bootstrap(LoggingFactory.java:43)`. The exception is because the SLF4J `org.slf4j.helpers.SubstituteLogger` cannot be cast to `ch.qos.logback.classic.Logger`.  Proposed fix: If I understand correctly any logging calls to the `SubstituteLogger` are anyways dropped by the logger framework, thus encapsulating the cast at `LoggingFactory.java:43` into a try-catch and doing nothing with the exception would solve the issue - maybe emitting a warning that this has happened during init, but that warning should be anyways emitted by SLF4 (""The following set of substitute loggers may have been accessed [...]""). No idea how to write tests for this though.","closed","","AFulgens","2015-08-04T08:20:39Z","2015-10-21T12:37:45Z"
"","841","Make test instance constructors package-protected","Constructors that don't accept Environment should be package-protected because they are needed only in tests.   In application code they confuse users.","closed","","arteam","2015-01-10T20:15:33Z","2016-01-24T08:18:03Z"
"","808","500 error on malformed JSON","Consider the following test:  ``` java import javax.ws.rs.*; import javax.ws.rs.client.Entity; import javax.ws.rs.core.Response;  import io.dropwizard.testing.junit.ResourceTestRule; import org.junit.ClassRule; import org.junit.Test;  import static javax.ws.rs.core.MediaType.APPLICATION_JSON; import static javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE; import static org.assertj.core.api.Assertions.assertThat;  public class PersonResourceTest {     @ClassRule     public static final ResourceTestRule resources = ResourceTestRule.builder()             .addResource(new PersonResource())             .build();      @Test     public void testShouldThrowBadRequestOnDodgyJson() {         String json = ""{\""name\"":\""blah\u0006\"", \""email\"":\""blah\u0006@example.com\""}"";         Response response = resources.client().target(""/person"").request().post(Entity.entity(json, APPLICATION_JSON_TYPE));         assertThat(response.getStatus()).isEqualTo(400);     }      @Path(""/person"")     private static class PersonResource {         @POST         @Consumes(APPLICATION_JSON)         public void save(Person person) {         }     } } ```  The JSON posted to the resource contains an unescaped control character - according to [RFC 4627, section 2.5](https://tools.ietf.org/html/rfc4627#section-2.5), these should be escaped with a backslash.  However, in this case, Dropwizard returns a 500 error, logging this stack trace:  ``` Illegal unquoted character ((CTRL-CHAR, code 6)): has to be escaped using backslash to be included in string value  at [Source: org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream@464649c; line: 1, column: 15]     at com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1419)     at com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:508)     at com.fasterxml.jackson.core.base.ParserMinimalBase._throwUnquotedSpace(ParserMinimalBase.java:472)     at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString2(UTF8StreamJsonParser.java:2235)     at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString(UTF8StreamJsonParser.java:2165)     at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText(UTF8StreamJsonParser.java:279)     at com.fasterxml.jackson.databind.deser.std.StringDeserializer.deserialize(StringDeserializer.java:29)     at com.fasterxml.jackson.databind.deser.std.StringDeserializer.deserialize(StringDeserializer.java:12)     at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:538)     at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:344)     at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1056)     at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserializeFromObject(SuperSonicBeanDeserializer.java:199)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:124)     at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserialize(SuperSonicBeanDeserializer.java:118)     at com.fasterxml.jackson.databind.ObjectReader._bind(ObjectReader.java:1232)     at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:676)     at com.fasterxml.jackson.jaxrs.base.ProviderBase.readFrom(ProviderBase.java:808)     at io.dropwizard.jersey.jackson.JacksonMessageBodyProvider.readFrom(JacksonMessageBodyProvider.java:60)     at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:258)     at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:234)     at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:154)     at org.glassfish.jersey.spi.ContentEncoder.aroundReadFrom(ContentEncoder.java:126)     at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:154)     at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundReadFrom(MappableExceptionWrapperInterceptor.java:73)     at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:154)     at org.glassfish.jersey.message.internal.MessageBodyFactory.readFrom(MessageBodyFactory.java:1124)     at org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:851)     at org.glassfish.jersey.server.ContainerRequest.readEntity(ContainerRequest.java:270)     at org.glassfish.jersey.server.internal.inject.EntityParamValueFactoryProvider$EntityValueFactory.provide(EntityParamValueFactoryProvider.java:96)     at org.glassfish.jersey.server.spi.internal.ParameterValueHelper.getParameterValues(ParameterValueHelper.java:81)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:121)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$VoidOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:136)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:104)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:384)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:342)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:101)     at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:271)     ... ```  We should return a 400 response instead, common with other JSON processing failures.  Observed on DW 0.7.0 and 0.8.0-rc1.","closed","","matt-thomson","2014-12-08T12:24:33Z","2015-06-23T17:37:38Z"
"","867","Syntax error in docs scrubbed, and MultiPartBundle includes config interface now","Configuration interface is now carried into the MultiPartForm bundle and I grabbed a quick syntax error in the docs.  Everything should match up.","closed","","pavgup","2015-01-28T18:54:48Z","2015-01-30T20:24:38Z"
"","729","move dependency commons-lang3 to dropwizard-util","commons-lang3 is used by dw-configuration and thus ends up in the shaded jar anyway. By moving it to util, other modules can benefit from having StringUtils, DateUtils ... on the classpath without changing the resulting artefact.","closed","","jangalinski","2014-10-05T17:08:05Z","2014-10-11T11:56:59Z"
"","1291","com.sun.jersey.spi.container.servlet.WebComponent$Writer.write taking long time","com.sun.jersey.spi.container.servlet.WebComponent$Writer.write  process is taking more time  upto 4 mins. This is happening mostly when there is a lot of response in the service call.  com.sun.jersey.spi.container.servlet.WebComponent$Writer:write 199963  How to tune  the DW  to handle high response calls ? Dropwizard version is 0.6.2","closed","","SeshuNagalla","2015-10-22T01:45:22Z","2015-10-22T08:14:07Z"
"","622","Updating Hibernate to 4.3.5.Final.","Collection of misc improvements and bug fixes. - 4.3.2 was a bunch of misc improvements and bug fixes, but introduced a critical bug. - 4.3.3 was released by mistake and == 4.3.2. - 4.3.4 is just a revert of the commit in 4.3.2 that introduced the bug. - 4.3.5 is more misc improvements and bug fixes.  [Change log](https://hibernate.atlassian.net/issues/?jql=project%20%3D%20HHH%20AND%20fixVersion%20in%20%284.3.2%2C%204.3.3%2C%204.3.4%2C%204.3.5%29%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC%2C%20created%20ASC)","closed","","reines","2014-06-14T10:09:13Z","2014-06-14T10:38:32Z"
"","1306","Enforce LF line endings on Mustache and Freemarker template files","Closes #1305.  @nickbabcock I've assigned this PR to you because you seem to have a Windows build machine to actually test it. :wink:","closed","","joschi","2015-10-28T11:17:27Z","2015-10-28T14:54:57Z"
"","1228","Validate sub classed BeanParameters","Closes #1227","closed","bug,","nickbabcock","2015-08-19T13:25:03Z","2015-08-19T13:45:54Z"
"","658","Update views.html","Clarified ""localized templates"" feature in the tip box.","closed","documentation,","marcelstoer","2014-07-14T14:39:41Z","2014-07-14T14:47:06Z"
"","1300","Added an introduction to internal + Minor Typos on other pages","Checked the documentation with grammarly. Fixed some issues.","closed","documentation,","fexbraun","2015-10-23T11:39:11Z","2015-10-26T11:08:57Z"
"","959","Serving static assets example","Changed server type from `simple` to `default`. Having `simple` will lead to 404 errors. I just experienced this when toying around, so maybe someone more experienced should have a closer look at this.","closed","","micheee","2015-03-30T14:26:39Z","2015-04-10T22:11:55Z"
"","1249","LoggingFactory in io.dropwizard.jackson.Discoverable","Changed LoggerFactory to LoggingFactory in META-INF/services/io.dropwizard.jackson.Discoverable Solves issue #1248 : ""Unable to load io.dropwizard.logging.LoggerFactory""","closed","bug,","lehcim","2015-09-08T08:43:13Z","2015-09-08T11:25:45Z"
"","950","User manual mentions outdated Maven Shade Plugin","Changed 1.6 in 2.3 which provides amongst others better error messages.","closed","","rkettelerij","2015-03-23T13:23:39Z","2015-04-01T01:39:04Z"
"","964","Blended Capacity Metric","Capacity and utilization metrics. Basically a synthesized metric representing how much more traffic a node can handle before a new one is required. We will need assistance from OS, perhaps we can use https://support.hyperic.com/display/SIGAR/Home","closed","stale,","carlo-rtr","2015-03-31T16:30:45Z","2019-09-04T00:01:11Z"
"","1094","MultipartFeature Jersey Client","Cannot be used as intended because of the underlying apache http client implementation. Mime boundaries are not being sent properly.","closed","","ra2085","2015-06-03T18:57:00Z","2015-06-03T21:41:55Z"
"","1003","GraphiteReporterFactory defer IP resolution at connect time","Can we please add support for https://github.com/dropwizard/metrics/issues/606,   i.e: public ScheduledReporter build(MetricRegistry registry) {      final Graphite graphite = new Graphite(**host**, **port**);      ... }","closed","improvement,","adrianmkng","2015-04-21T14:59:44Z","2015-04-26T18:41:10Z"
"","905","Is metrics in metric-graphite thread safe?","Can I use only one meter instance as a static variable and use that throught objects?  seems like there's not any mention about thread-safety explicitly, nor the 'synchronized' code inside Meter.mark()","closed","","sweetest","2015-02-27T10:15:56Z","2015-02-27T10:21:24Z"
"","714","Fix auth docs","CachingAuthenticator.wrap() no longer exists","closed","documentation,","jplock","2014-09-25T17:30:27Z","2014-09-28T15:18:06Z"
"","1256","Make io.dropwizard.metrics.servlets.AdminServlet produce JSON","By default, `AdminServlet` produces a `text/html` page which links to the following resources: - Metrics (`application/json`), - Ping (`text/plain`), - Threads (`text/plain`), and - Healthcheck (`application/json`).  My team suggests that since [Dropwizard heavily favors JSON](http://www.dropwizard.io/manual/core.html#representations), it would be more consistent for `AdminServlet` to return `application/json`. The `text/html` resource could be replaced or selected via a configuration option.  The relevant code is in [lines 24-42 of AdminServlet.java](https://github.com/dropwizard/metrics/blob/master/metrics-servlets/src/main/java/io/dropwizard/metrics/servlets/AdminServlet.java#L24-L42). If the Dropwizard team considers this feature worthwhile, we are prepared to implement it and submit a pull request.","closed","","ghost","2015-09-18T21:42:29Z","2016-01-17T14:45:46Z"
"","581","Adding a configurable AllowedMethodsFilter","By default this allows GET, POST, PUT, DELETE, HEAD, and OPTIONS. In other words, TRACE and CONNECT are blocked. This is enabled on both the application servlet and admin servlet.","closed","improvement,","reines","2014-05-16T23:10:07Z","2014-07-09T15:54:28Z"
"","1270","Support for disabling decompression of HTTP responses","By default Apache HTTP client builder enables decompression of responses. If we want to disable this feature in Jersey HTTP client, we should explicitly disable it in the underlying Apache HTTP client during building.","closed","","arteam","2015-09-29T20:06:00Z","2016-01-24T08:03:57Z"
"","548","Support bring-your-own MetricsRegistry in Bootstrap.","Bootstrap takes the newly constructed registry and registers a few JVM metrics. The way this is done makes it difficult to bring your own registry (say, if you are embedding a DW app within another app).  This PR uses the registry getter in the constructor to add those JVM metrics.","closed","","gdusbabek","2014-04-21T15:15:51Z","2014-06-18T17:29:28Z"
"","812","Fix #881 - Change ViewMessageBodyWriter to produce only HTML and XML.","Being more restrictive allows the view be serialize to both JSON and HTML.","closed","bug,","mcdan","2014-12-12T00:51:49Z","2014-12-15T16:05:31Z"
"","1431","Added ability to set the Jersey URL pattern in Application.run()","Before this commit, the only way to set the Jersey URL pattern was to add it in the YAML configuration, under `rootpath`. This commit now allows the following priority order for the Jersey URL pattern: 1. the YAML config 2. the value set in the applications `run()` block 3. the default value from `DropwizardResourceConfig`, which is `/*`  with this priority order, there should be no breaking changes for users who have set the value in the YAML. it will now allow applications to have this value hardcoded, making the YAML file simpler  fixes #1408","closed","improvement,","jmcampanini","2016-01-26T18:03:42Z","2016-02-08T21:24:33Z"
"","1405","Fix: allow validation of Param nullable instances","Before if you had a resource that was like:  ``` java @GET @Path(""nullable-int-param"") public String nullableIntParam(@QueryParam(""num"") @Max(3) IntParam secretSauce) {     return secretSauce == null ? ""I was null"" : secretSauce.get().toString(); } ```  And you passed in `null`, the validator will fail due to an null dereference in the unwrapper class.  This fixes the behavior by checking if the param is null before attempting to unwrap","closed","bug,","nickbabcock","2016-01-06T20:17:17Z","2016-01-06T23:56:32Z"
"","663","Allow configuration of the Hibernate4Bundle.","Because the initialize method is finalized there should be some way to configure the Hibernate4Module.","closed","","mcarrierastonish","2014-07-22T20:28:05Z","2014-08-12T02:06:41Z"
"","1409","Add support Jetty's System.inheritedChannel option","At the application deploy never stop the service, If add support Jetty's System.inheritedChannel option.  It Realize by [Server::Starter](https://github.com/kazuho/p5-Server-Starter).  I want to add DropWizard configure option about this feature. # Introduce about Server::Starter  Server::Starter is superdaemon for hot-deploying server programs.   And popular OSS in Japan. ## How to use Server::Starter  Run app by Server::Starter  e.g.  ``` $ start_server --port=8080=0 -- java -jar /path/to/app.jar ```  `port: 8080`   `fd: 0` ## First process  Server::Starte` is create socket.  ![](https://i.gyazo.com/aa266ae7ef65aa2bddec0848744c73f0.png) ## Next process  fork and exec Jetty process.  ![](https://i.gyazo.com/3be7a7187919d8f97eb04dcab6f14ec5.png)  And Jetty process refers Server::Starter shares socket.  ![](https://i.gyazo.com/4b63b7d0af081ed39cb1bfbd08984f2d.png) ## When deploy new version app  Server::Starter lauches new process. And new Jetty process refers Server::Starter shares socket too. And kill old version app Jetty process.  ![](https://i.gyazo.com/475cfe602145c4fd7b485458082029e3.png) # FYI - If call System.inheritedChannel, JVM can refer socket  [sun.nio.ch.InheritedChannel](http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/sun/nio/ch/InheritedChannel.java#143) - Enable System.inheritedChannel in Jetty  [ServerConnector#setInheritChannel(boolean)](https://github.com/eclipse/jetty.project/blob/master/jetty-server/src/main/java/org/eclipse/jetty/server/ServerConnector.java#L312) - I already customized the source in my repository  [matsumana/dropwizard](https://github.com/matsumana/dropwizard/tree/feature/jetty-inheritChannel)","closed","","matsumana","2016-01-10T18:19:53Z","2016-01-14T16:57:16Z"
"","1265","Make AssetBundle/AssetServlet customizable","AssetBundle/AssetServlet are very useful as is. But, with a few minor changes, they could be subclasses and customized.","closed","","Randgalt","2015-09-28T19:26:18Z","2015-09-29T08:04:40Z"
"","567","Allow normal Logback facilities to be used to configure logging","As the title states, this PR allows the normal Logback facilities to be used to configure logging.   Basically what it does is extract LoggingFactory into an interface like ServerFactory. It is a discoverable interface and defaults to DefaultLoggingFactory (which is the current code renamed).  You have to do three things in order to use the normal Logback facilities... 1. Add a constructor to your Application derived class that passes false to the super class. This tells Dropwizard to not bootstrap logging. Logback is lazy and doesn't initialize until it has to (which given the current code is when ServerCommand is created in Application.run). 2. In your YML file, make the type of logging noop.        ```    logging:    -type: noop    ``` 3. Add a logback.xml, logback.groovy, or other configuration file to your classpath.","closed","","justrudd","2014-05-09T22:32:27Z","2015-02-13T22:41:44Z"
"","591","update migration docs, added details about `--schema` and `--catalog`","As the migrations are update by yoschi (fix #590) a little time ago, I am updating the docs related to it.","closed","","DheerendraRathor","2014-05-22T10:52:12Z","2014-06-19T08:24:54Z"
"","1434","Remove SLF4J request logging","As requested in #1415 this is a follow up PR that removes the SLF4J request logging now that dropwizard has switched to using Logback Access for the request logs.","closed","improvement,","ghenkes","2016-01-29T13:49:29Z","2016-01-31T01:50:57Z"
"","709","(Potentially) add shade plugin gotcha to the documentation","As per the thread at https://groups.google.com/forum/#!topic/dropwizard-user/daVL_uQO-EQ, setting the minimizeJar to be true on the shade plugin can cause issues that are quite hard to smoke out. The errors seem to occur with Java 6 and 7, Maven 3 and the version 2.3 of the shade plugin (and quite possibly more combinations of the above).  This isn't a Dropwizard problem in any way, shape or form, but maybe adding a note in the documentation might save people some debugging time and help with the general 'new to DW' experience.","closed","documentation,","mikeycmccarthy","2014-09-17T19:50:09Z","2014-10-05T15:44:26Z"
"","595","Add documentation on HttpClientConfiguration and JerseyClientConfiguration","As per the discussion in #582 there is currently no documentation of the client configuration. I'm happy to do so, but I'm opening this issue to remind myself.  Where is the right place for this documentation? configuration.rst or client.rst? I'm feeling  configuration.rst, with a link back from client.rst?","closed","documentation,","reines","2014-05-23T15:56:08Z","2014-06-09T15:00:19Z"
"","672","Add Glenn McAllister to developers in parent pom.xml","As per Carlo's request, this PR is to add myself to the parent pom.xml as a committer.","closed","","glennmcallister","2014-08-04T16:25:18Z","2014-08-04T17:20:17Z"
"","599","Adding HttpClient and JerseyClient documentation","As per #595.  I wasn't quite sure how best to describe the relationship between timeToLive and keepAlive in the HttpClientConfiguration. Any suggestions?","closed","documentation,","reines","2014-05-27T11:02:53Z","2014-06-12T13:09:09Z"
"","1207","Dropwizard Truck Factor","As part of my PhD research on code authorship, we calculated the Truck Factor (TF) of some popular GitHub repositories.  As you probably know, the [Truck (or Bus) Factor](https://en.wikipedia.org/wiki/Bus_factor) designates the minimal number of developers that have to be hit by a truck (or quit) before a project is incapacitated. In our work, we consider that a system is in trouble if more than 50% of its files become orphan (i.e., without a main author).  More details on our work in this preprint: https://peerj.com/preprints/1233  We calculated the TF for **Dropwizard** and obtained a value of **1**.  The developer responsible for this TF is:  Coda Hale - author of 74% of the files   To validate our results, we would like to ask **Dropwizard** developers the following three brief questions:  (a) Do you agree that the listed developer is the main developer of **Dropwizard**?  (b) Do you agree that **Dropwizard** will be in trouble if the listed developer leave the project (e.g., if he wins in the lottery, to be less morbid)?  (c) Does **Dropwizard** have some characteristics that would attenuate the loss of the listed developer (e.g., detailed documentation)?  Thanks in advance for your collaboration,  Guilherme Avelino PhD Student Applied Software Engineering Group (ASERG) UFMG, Brazil http://aserg.labsoft.dcc.ufmg.br/","closed","","gavelino","2015-08-06T11:58:04Z","2015-08-06T12:25:51Z"
"","607","Fix view renderers are recreated in every request","As of v0.7.0, the list viewRenderers is not cloned but using jersey ServiceFinder directly. However, ServiceFinder iterator always creates a new instance when iterating through viewRenderers. As a result, the renderer must be reconfigured every time the view is requested. For example, turning DEBUG mode for freemarker in config.yaml  ``` loggers:   freemarker: DEBUG ```  Then it can be seen that freemarker is not able to cache templates and the configuration in FreemarkerViewRenderer is always refreshed.  ``` DEBUG [2014-06-05 15:10:17,746] freemarker.cache: Could not find template in cache, creating new one; id=["".../SimpleView.ftl""[""en_US"",UTF-8,parsed] ] DEBUG [2014-06-05 15:10:17,749] freemarker.cache: Compiling FreeMarker template "".../SimpleView.ftl""[""en_US"",UTF-8,parsed]  from ""file:/.../SimpleView.ftl"" 0:0:0:0:0:0:0:1 -  -  [05/Jun/2014:15:10:10 +0000] ""GET /say/hello HTTP/1.1"" 200 - ""-"" 7459 0:0:0:0:0:0:0:1 -  -  [05/Jun/2014:15:10:23 +0000] ""GET /say/hello HTTP/1.1"" 200 - ""-"" 24 DEBUG [2014-06-05 15:10:23,705] freemarker.cache: Could not find template in cache, creating new one; id=["".../SimpleView.ftl""[""en_US"",UTF-8,parsed] ] DEBUG [2014-06-05 15:10:23,708] freemarker.cache: Compiling FreeMarker template "".../SimpleView.ftl""[""en_US"",UTF-8,parsed]  from ""file:/.../SimpleView.ftl"" ```  This patch reverts to use of ImmutableList which is working in v0.6.  ``` DEBUG [2014-06-05 15:25:36,093] freemarker.cache: Could not find template in cache, creating new one; id=["".../SimpleView.ftl""[""en_US"",UTF-8,parsed] ] DEBUG [2014-06-05 15:25:36,095] freemarker.cache: Compiling FreeMarker template "".../SimpleView.ftl""[""en_US"",UTF-8,parsed]  from ""file:/.../SimpleView.ftl"" 0:0:0:0:0:0:0:1 -  -  [05/Jun/2014:15:25:35 +0000] ""GET /say/hello HTTP/1.1"" 200 - ""-"" 343 DEBUG [2014-06-05 15:25:42,357] freemarker.cache: "".../SimpleView.ftl""[""en_US"",UTF-8,parsed]  using cached since file:/.../SimpleView.ftl didn't change. 0:0:0:0:0:0:0:1 -  -  [05/Jun/2014:15:25:42 +0000] ""GET /say/hello HTTP/1.1"" 200 - ""-"" 6 ``` ##   Quoc-Viet Nguyen","closed","bug,","nqv","2014-06-05T15:29:31Z","2014-08-10T14:59:29Z"
"","762","README from example refers to JDBI","As of today ( fc20f7d9c) dropwizard-example/README.md mentions JDBI, but this seems to be outdated, as the example now uses Hibernate, if I'm not mistaken:  > The examples provided illustrate a few of the features available in [JDBI](http://jdbi.org), along with demonstrating how these are used from within dropwizard. >  ... >  > The `PersonDAO` illustrates using the [SQL Object Queries](http://jdbi.org/sql_object_api_queries/) and string template features in JDBI","closed","documentation,","leonbloy","2014-10-28T17:21:25Z","2014-12-28T21:06:19Z"
"","1237","Send Validation Errors with Property Name","As of now there is no way to map Resource properties to their corresponding validation methods. You can use annotation ValidationMethod, which will return a set with error messages, but there is no way to find the cause (propertyname) of the error. Validator has a method validateProperty (where you can pass the property name which can come from an added field in Validationmethod annotation), but JacksonMessageBodyProvider uses the validate method.  The propertyPath field of the Violation is of no use, as it is substring of the method name, For example, if your validation method name is isValidName, the property path will be ""validName"".. It should be just name.","closed","","jimmy100r","2015-08-26T06:36:47Z","2016-01-25T18:47:22Z"
"","1439","Yaml configuration now broken","As of an upgrade to dropwizard 0.9.2, this now appears in the logs, both using the command line to launch or a ServerRule in test: - Unrecognized field at: server.maxThreads   Did you mean?:   - adminMaxThreads   - adminMinThreads   - adminConnectors   - adminContextPath   - applicationConnectors     [1 more]  The yml is question has: server:   gzip:     enabled: false    maxThreads: 1024   minThreads: 8  This seems like a regression, and I can't find anything in the release notes to indicate a change here.","closed","","nheitz","2016-02-03T11:32:01Z","2016-02-03T11:52:52Z"
"","1118","Refactor CLI drivers for non-http use","As discussed on the mailing list, this change pulls out the CLI and configuration parsing drivers of Dropwizard applications into a library that can be used by applications that want the infrastructure of dropwizard without the dependency on Jetty. It does not yet provide any `Command` implementations other than `check`; it is up to consumers to determine what commands make sense for their application.  This is a breaking change; I know that the 0.9-rc1 is already out, but think it would be better to get this out as a part of 0.9 to allow users more opportunity to use it and provide feedback.","closed","","christophercurrie","2015-06-19T03:22:17Z","2015-07-27T18:53:02Z"
"","653","Standardise how Jackson annotations are used in documentation","As discussed on the mailing list (https://groups.google.com/forum/#!topic/dropwizard-dev/5htLrStAju8) in 0.7 the prevailing style for Jackson changed to annotating the accessors methods rather than the fields. There are a few places in the docs where these changes haven't been reflected. PR on the way.","closed","documentation,","mikeycmccarthy","2014-07-11T08:46:26Z","2014-07-11T12:17:28Z"
"","992","Add logging (on TRACE) for failed validation of Jackson data.","As discussed on https://groups.google.com/forum/#!topic/dropwizard-user/FQd_Y4ihb7I, I have prepared a little patch that will print the failed validation alongside the object that was validated, on TRACE only.","closed","improvement,","piefel","2015-04-14T15:16:07Z","2015-04-26T18:39:42Z"
"","758","Simplifying Size comparison","As discussed in #757","closed","","reines","2014-10-24T09:45:30Z","2014-10-24T10:02:54Z"
"","676","Serve static content at root does not work as the documentation says","As described in http://stackoverflow.com/questions/24822939/dropwizard-serving-assets-help-needed/25156603#25156603 , the assetsbundle does not work as described in the documentation.","closed","","nilsmagnus","2014-08-08T11:14:50Z","2014-10-02T02:40:11Z"
"","1544","Fix invalid JSON reporting server errors","As a follow up to #1527  This PR does a couple things: - Entities that throw an `IOException` on deserialization will now map to a client error on invalid input instead of being handled by the logging exception handler - New implementation determining whether a Jackson exception is due to the server (programmer's) or client's fault. New implementation was needed because the new tests that were written exposed flaws. After scratching my head for far too long, the best solution was peeking at the exception message. Not cleanest, but the tests will show if the error messages change in a future version. - Clean up the tests a tad  Closes #1539, #1540","closed","","nickbabcock","2016-05-11T02:43:44Z","2016-05-11T11:15:44Z"
"","1390","Add imports in the example code blocks of the documentation","As a developer I would like to explicit be able to see the imports of the code example, often I need to search for the package of a specific class that is in the example.  What do you think about it?","closed","documentation,","vitorreis","2015-12-16T11:32:58Z","2016-05-20T11:04:00Z"
"","1360","Simplify the ordering of Bundles and ConfiguredBundles.","Applications that use both are vulnerable to surprises if 1. The order of bundle initialization matters (eg. if some bundles provide resources that can't be initialized until `run`, that are then used in later bundles), and 2. A `Bundle` implementation wants to depend on a resource provided by a `ConfiguredBundle`.  This simplifies the ordering: bundles are run in a strict FIFO order, regardless of bundle type.  (This bit me when a refactoring turned a `Bundle` into a `ConfiguredBundle` and silently moved it _way later_ in the initialization order.)","closed","","ojacobson","2015-11-27T06:10:29Z","2018-10-03T20:26:36Z"
"","652","Support for other ConnectionProvider on Hibernate","Any plan to support other ConnectionProvider (like c3p0) on Hibernate?","closed","","nottix","2014-07-10T22:09:20Z","2016-06-08T12:50:31Z"
"","1302","Fixing failing tests on non-English OS by changing default locale","Another tests which was failing on non-English system because the whole (L10ned) validation message is verified.","closed","","fexbraun","2015-10-23T12:24:27Z","2015-10-23T13:15:04Z"
"","1191","tomcat-jdbc and jdbi lib upgrades","Another small portion of lib upgrades - both maintenance releases: tomcat-jdbc 8.0.24 jdbi 2.63  PR https://github.com/dropwizard/dropwizard/pull/1190","closed","","profes","2015-07-27T13:43:59Z","2015-07-27T14:26:52Z"
"","1371","Fix Checkstyle warnings","Another round of fixing Checkstyle warnings. In general: - Remove star imports; - Enforce immutability of local variables; - Enforce the maximum line length of 128 symbols.","closed","","arteam","2015-12-06T16:45:59Z","2016-01-24T08:04:24Z"
"","1304","Add support for optional JodaTime arguments in JDBI","An alternative implementation of an argument factory that handles JodaTime arguments wrapped by Guava's Optional.  It uses the fact that JDBI processes argument factories in the specific order, so we can process optional JodaTime arguments before other optional arguments.","closed","","arteam","2015-10-27T15:14:49Z","2016-01-24T08:03:35Z"
"","1196","Fix DefaultLoggingFactoryTest on Windows","Also it is unnecessary to delete the log files after the test is done because the log files are zeroed out when the test runs.","closed","","nickbabcock","2015-07-28T16:17:45Z","2015-07-30T06:57:28Z"
"","680","Allow application to replace the default pattern for all log appenders","Allows the single, default pattern to be customized by the application (e.g. to include certain MDC values) without requiring individual deployments to copy-paste the same format override in their YAML files.","closed","","wrprice","2014-08-08T21:06:48Z","2015-05-08T13:23:10Z"
"","1290","Add SPI for RequestLogFactory","Allows for overriding of `RequestLog` implementation such as to allow use of logback-access","closed","","mwhipple","2015-10-20T15:17:37Z","2016-01-14T14:06:58Z"
"","570","Invalidate credentials by predicate","Allow discarding any cached principal for a collection of credentials satisfying a given predicate.","closed","","florinn","2014-05-12T09:03:28Z","2014-07-09T16:15:13Z"
"","809","Allow alternate ConnectorProvider to be used. This makes the client more...","Allow alternate ConnectorProvider to be used. This makes the client more flexible. For example, I need to have a wrapper ConnectorProvider to do some pre/post request processing. This is a trivial change. Please include it. Thank you!","closed","improvement,","Randgalt","2014-12-08T17:30:23Z","2014-12-14T15:40:15Z"
"","1450","Hibernate in 1.0.0-Snapshot","All the imports which worked fine in 0.9.2 are now incorrect in 1.0.0-Snapshot, where did the packages go?","closed","","VanDavv","2016-02-06T17:56:31Z","2016-03-30T02:48:54Z"
"","966","test rule supports auth","All of the relevant discussion is in the issue https://github.com/dropwizard/dropwizard/issues/922  this also would close https://github.com/dropwizard/dropwizard/issues/513","closed","","carlo-rtr","2015-03-31T22:10:33Z","2015-03-31T23:12:28Z"
"","1516","NotNull validation of LoggerConfiguration.appenders fails","After upgrading to the latest versions (dropwizard ver '1.0.0-rc2'), I am having compilation issues with my app. It looks like a solution proposed/provided in #1308 and #1309 may work here as well.  _LoggerConfiguration.appenders_ may need to utilize @UnwrapValidatedValue(false)   ``` javax.validation.UnexpectedTypeException: HV000186: The constraint of type 'javax.validation.constraints.NotNull' defined on 'logging.appenders[0].facility' has multiple matching constraint validators which is due to an additional value handler of type 'io.dropwizard.validation.valuehandling.GuavaOptionalValidatedValueUnwrapper'. It is unclear which value needs validating. Clarify configuration via @UnwrapValidatedValue.     at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.getConstraintValidatorInstanceForAutomaticUnwrapping(ConstraintTree.java:266)     at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.getInitializedConstraintValidator(ConstraintTree.java:163)     at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:116)     at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:87)     at org.hibernate.validator.internal.metadata.core.MetaConstraint.validateConstraint(MetaConstraint.java:73)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateMetaConstraint(ValidatorImpl.java:617)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraint(ValidatorImpl.java:580)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForSingleDefaultGroupElement(ValidatorImpl.java:524)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForDefaultGroup(ValidatorImpl.java:492)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForCurrentGroup(ValidatorImpl.java:457)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:407)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraint(ValidatorImpl.java:795)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:681)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:416)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraint(ValidatorImpl.java:795)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:681)     at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:416)     at org.hibernate.validator.internal.engine.ValidatorImpl.validate(ValidatorImpl.java:205)     at io.dropwizard.configuration.ConfigurationFactory.validate(ConfigurationFactory.java:260)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:154)     at io.dropwizard.configuration.ConfigurationFactory.build(ConfigurationFactory.java:99)     at io.dropwizard.cli.ConfiguredCommand.parseConfiguration(ConfiguredCommand.java:115)     at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:63)     at io.dropwizard.testing.DropwizardTestSupport.startIfRequired(DropwizardTestSupport.java:194)     at io.dropwizard.testing.DropwizardTestSupport.before(DropwizardTestSupport.java:112)     at io.dropwizard.testing.junit.DropwizardAppRule.before(DropwizardAppRule.java:128)     at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:46) ```  my config...  ``` logging:   level: INFO   appenders:     - type: gelf       host: log-external.nexgen.myco.biz       facility: myco.myapp.default ```","closed","","rturgut","2016-04-12T23:08:42Z","2016-04-13T01:07:48Z"
"","902","Noisy logback on startup","after upgrading to rc-4, there's this log when I start my server:  ``` 18:51:28,291 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.groovy] 18:51:28,292 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback-test.xml] 18:51:28,292 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.xml] 18:51:28,292 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Setting up default configuration. 18:51:28,357 |-WARN in ch.qos.logback.core.ConsoleAppender[null] - This appender no longer admits a layout as a sub-component, set an encoder instead. 18:51:28,357 |-WARN in ch.qos.logback.core.ConsoleAppender[null] - To ensure compatibility, wrapping your layout in LayoutWrappingEncoder. 18:51:28,357 |-WARN in ch.qos.logback.core.ConsoleAppender[null] - See also http://logback.qos.ch/codes.html#layoutInsteadOfEncoder for details 18:51:29,400 |-INFO in ch.qos.logback.classic.jul.LevelChangePropagator@6dd93a21 - Propagating INFO level on Logger[ROOT] onto the JUL framework 18:51:29,410 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy - No compression will be used 18:51:29,412 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy - Will use the pattern ./log/server.log for the active file 18:51:29,415 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - The date pattern is 'yyyy-MM-dd' from file name pattern './log/server.log'. 18:51:29,415 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Roll-over at midnight. 18:51:29,417 |-INFO in c.q.l.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy - Setting initial period to Thu Feb 26 18:51:29 EST 2015 18:51:29,419 |-WARN in ch.qos.logback.core.rolling.RollingFileAppender[file-appender] - This appender no longer admits a layout as a sub-component, set an encoder instead. 18:51:29,419 |-WARN in ch.qos.logback.core.rolling.RollingFileAppender[file-appender] - To ensure compatibility, wrapping your layout in LayoutWrappingEncoder. 18:51:29,419 |-WARN in ch.qos.logback.core.rolling.RollingFileAppender[file-appender] - See also http://logback.qos.ch/codes.html#layoutInsteadOfEncoder for details 18:51:29,419 |-ERROR in ch.qos.logback.core.rolling.RollingFileAppender[file-appender] - File property must be set before any triggeringPolicy or rollingPolicy properties 18:51:29,419 |-ERROR in ch.qos.logback.core.rolling.RollingFileAppender[file-appender] - Visit http://logback.qos.ch/codes.html#rfa_file_after for more information 18:51:29,419 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[file-appender] - Active log file name: ./log/server.log 18:51:29,419 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[file-appender] - File property is set to [./log/server.log] 18:51:29,422 |-INFO in ch.qos.logback.classic.AsyncAppender[async-file-appender] - Attaching appender named [file-appender] to AsyncAppender. 18:51:29,422 |-INFO in ch.qos.logback.classic.AsyncAppender[async-file-appender] - Setting discardingThreshold to 51 18:51:29,423 |-WARN in ch.qos.logback.core.ConsoleAppender[console-appender] - This appender no longer admits a layout as a sub-component, set an encoder instead. 18:51:29,423 |-WARN in ch.qos.logback.core.ConsoleAppender[console-appender] - To ensure compatibility, wrapping your layout in LayoutWrappingEncoder. 18:51:29,423 |-WARN in ch.qos.logback.core.ConsoleAppender[console-appender] - See also http://logback.qos.ch/codes.html#layoutInsteadOfEncoder for details 18:51:29,423 |-INFO in ch.qos.logback.classic.AsyncAppender[async-console-appender] - Attaching appender named [console-appender] to AsyncAppender. 18:51:29,423 |-INFO in ch.qos.logback.classic.AsyncAppender[async-console-appender] - Setting discardingThreshold to 51 ```","closed","","sixinli","2015-02-27T00:13:00Z","2015-03-31T13:26:23Z"
"","718","DefaultServerFactoryTest#testGracefulShutdown works as expected","After upgrading to Jersey 2.11 in #706  and to Jetty 9.2.3 in #453 this test works as expected.  I can't reproduce the issue.  ``` java     @Test     public void testManyGracefulShutdowns() {         int successes = 0;         int fails = 0;         for (int i = 0; i < 1000; i++) {             try {                 testGracefulShutdown();                 successes++;             } catch (Exception e) {                 e.printStackTrace();                 fails++;             }         }         System.out.printf(""%d successes. %d fails"", successes, fails);     } ```  ``` 1000 successes. 0 fails ```  As I beleive, Jersey 1.\* is to blame, because I didn't reproduce this issue with Jersey 2.11 and Jetty 9.0.7","closed","","arteam","2014-09-30T11:54:41Z","2016-01-24T08:05:08Z"
"","893","0.8.0-rc3 IllegalStateException on 2nd PUT returning 400","After upgrading from 0.7.1 to 0.8.0-rc3 i get an IllegalStateException. The first put works (returning 400). The second put throws an exception; the client (curl) hangs.  curl:  ``` curl -XPUT http://localhost:8000/1/q/w -d hello ```  log:  ``` 127.0.0.1 - - [23/Feb/2015:14:51:44 +0000] ""PUT /1/q/w HTTP/1.1"" 400 23 ""-"" ""curl/7.37.1"" 72 ERROR [2015-02-23 14:51:45,829] org.glassfish.jersey.server.ServerRuntime$Responder: An I/O error has occurred while writing a response message entity to the container output stream. ! java.lang.IllegalStateException: The output stream has already been closed. ! at org.glassfish.jersey.message.internal.CommittingOutputStream.setStreamProvider(CommittingOutputStream.java:147) ~[app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.message.internal.OutboundMessageContext.setStreamProvider(OutboundMessageContext.java:803) ~[app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.server.ContainerResponse.setStreamProvider(ContainerResponse.java:372) ~[app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.server.ServerRuntime$Responder.writeResponse(ServerRuntime.java:647) [app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:418) [app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:408) [app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:306) [app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271) [app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267) [app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.internal.Errors.process(Errors.java:315) [app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.internal.Errors.process(Errors.java:297) [app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.internal.Errors.process(Errors.java:267) [app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317) [app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:286) [app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1072) [app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:399) [app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:381) [app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:344) [app.jar:1.13.3-SNAPSHOT] ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221) [app.jar:1.13.3-SNAPSHOT] ! at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.servlets.UserAgentFilter.doFilter(UserAgentFilter.java:83) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.servlets.GzipFilter.doFilter(GzipFilter.java:300) [app.jar:1.13.3-SNAPSHOT] ! at io.dropwizard.jetty.BiDiGzipFilter.doFilter(BiDiGzipFilter.java:134) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [app.jar:1.13.3-SNAPSHOT] ! at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:29) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [app.jar:1.13.3-SNAPSHOT] ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:44) [app.jar:1.13.3-SNAPSHOT] ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:39) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [app.jar:1.13.3-SNAPSHOT] ! at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:190) [app.jar:1.13.3-SNAPSHOT] ! at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:51) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:95) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:159) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.server.Server.handle(Server.java:497) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:245) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635) [app.jar:1.13.3-SNAPSHOT] ! at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555) [app.jar:1.13.3-SNAPSHOT] ! at java.lang.Thread.run(Thread.java:745) [na:1.8.0_20] ```","closed","","brackxm","2015-02-23T15:01:11Z","2015-09-22T14:13:55Z"
"","1487","upgrade from 0.9.2 to 1.0.0-rc1 -- previously working tests fails in the bowels of jetty","After upgrade from the 0.9.2 bom to the 1.0.0-rc1 I get an exception from deep in the bowels of jetty.  First, the output from the test under 0.9.2  ``` Running io.dropwizard.ext.tests.JettyCrossOriginIntegrationTest INFO  [2016-03-22 16:31:41,931] org.eclipse.jetty.util.log: Logging initialized @1007ms INFO  [2016-03-22 16:31:41,996] io.dropwizard.server.ServerFactory: Starting CORSApplication INFO  [2016-03-22 16:31:42,003] io.dropwizard.server.SimpleServerFactory: Registering jersey handler with root path prefix: / INFO  [2016-03-22 16:31:42,014] io.dropwizard.server.SimpleServerFactory: Registering admin handler with root path prefix: /admin INFO  [2016-03-22 16:31:42,056] org.eclipse.jetty.setuid.SetUIDListener: Opened CORSApplication@fd0e5b6{HTTP/1.1}{0.0.0.0:8080} INFO  [2016-03-22 16:31:42,058] org.eclipse.jetty.server.Server: jetty-9.2.13.v20150730 INFO  [2016-03-22 16:31:42,412] io.dropwizard.jersey.DropwizardResourceConfig: The following paths were found for the configured resources:      NONE  INFO  [2016-03-22 16:31:42,413] org.eclipse.jetty.server.handler.ContextHandler: Started i.d.j.MutableServletContextHandler@4e628b52{/,null,AVAILABLE} INFO  [2016-03-22 16:31:42,417] io.dropwizard.setup.AdminEnvironment: tasks =       POST    /tasks/log-level (io.dropwizard.servlets.tasks.LogConfigurationTask)     POST    /tasks/gc (io.dropwizard.servlets.tasks.GarbageCollectionTask)  WARN  [2016-03-22 16:31:42,417] io.dropwizard.setup.AdminEnvironment:  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !    THIS APPLICATION HAS NO HEALTHCHECKS. THIS MEANS YOU WILL NEVER KNOW      ! !     IF IT DIES IN PRODUCTION, WHICH MEANS YOU WILL NEVER KNOW IF YOU'RE      ! !    LETTING YOUR USERS DOWN. YOU SHOULD ADD A HEALTHCHECK FOR EACH OF YOUR    ! !         APPLICATION'S DEPENDENCIES WHICH FULLY (BUT LIGHTLY) TESTS IT.       ! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! INFO  [2016-03-22 16:31:42,420] org.eclipse.jetty.server.handler.ContextHandler: Started i.d.j.MutableServletContextHandler@173373b4{/admin,null,AVAILABLE} INFO  [2016-03-22 16:31:42,426] org.eclipse.jetty.server.ServerConnector: Started CORSApplication@fd0e5b6{HTTP/1.1}{0.0.0.0:8080} INFO  [2016-03-22 16:31:42,426] org.eclipse.jetty.server.Server: Started @1503ms INFO  [2016-03-22 16:31:42,609] io.dropwizard.ext.tests.JettyCrossOriginIntegrationTest: JettyCrossOriginIntegrationTest target: http://localhost:8080/ 127.0.0.1 - - [22/Mar/2016:16:31:42 +0000] ""GET / HTTP/1.1"" 404 43 ""-"" ""CORSApplication (test client)"" 62 INFO  [2016-03-22 16:31:42,821] io.dropwizard.ext.tests.JettyCrossOriginIntegrationTest: JettyCrossOriginIntegrationTest target: http://localhost:8080/ 127.0.0.1 - - [22/Mar/2016:16:31:42 +0000] ""DELETE / HTTP/1.1"" 404 43 ""-"" ""CORSApplication (test client)"" 1 INFO  [2016-03-22 16:31:42,826] io.dropwizard.ext.tests.JettyCrossOriginIntegrationTest: JettyCrossOriginIntegrationTest target: http://localhost:8080/ 127.0.0.1 - - [22/Mar/2016:16:31:42 +0000] ""OPTIONS / HTTP/1.1"" 200 - ""-"" ""CORSApplication (test client)"" 1 INFO  [2016-03-22 16:31:42,830] io.dropwizard.ext.tests.JettyCrossOriginIntegrationTest: JettyCrossOriginIntegrationTest target: http://localhost:8080/ 127.0.0.1 - - [22/Mar/2016:16:31:42 +0000] ""OPTIONS / HTTP/1.1"" 404 43 ""-"" ""CORSApplication (test client)"" 1 INFO  [2016-03-22 16:31:42,833] io.dropwizard.ext.tests.JettyCrossOriginIntegrationTest: JettyCrossOriginIntegrationTest target: http://localhost:8080/ 127.0.0.1 - - [22/Mar/2016:16:31:42 +0000] ""DELETE / HTTP/1.1"" 400 - ""-"" ""CORSApplication (test client)"" 1 INFO  [2016-03-22 16:31:42,836] io.dropwizard.ext.tests.JettyCrossOriginIntegrationTest: JettyCrossOriginIntegrationTest target: http://localhost:8080/ 127.0.0.1 - - [22/Mar/2016:16:31:42 +0000] ""OPTIONS / HTTP/1.1"" 404 43 ""-"" ""CORSApplication (test client)"" 1 INFO  [2016-03-22 16:31:42,840] io.dropwizard.ext.tests.JettyCrossOriginIntegrationTest: JettyCrossOriginIntegrationTest target: http://localhost:8080/ 127.0.0.1 - - [22/Mar/2016:16:31:42 +0000] ""GET / HTTP/1.1"" 404 43 ""-"" ""CORSApplication (test client)"" 2 INFO  [2016-03-22 16:31:42,843] io.dropwizard.ext.tests.JettyCrossOriginIntegrationTest: JettyCrossOriginIntegrationTest target: http://localhost:8080/ 127.0.0.1 - - [22/Mar/2016:16:31:42 +0000] ""OPTIONS / HTTP/1.1"" 200 - ""-"" ""CORSApplication (test client)"" 0 INFO  [2016-03-22 16:31:42,850] org.eclipse.jetty.server.ServerConnector: Stopped CORSApplication@fd0e5b6{HTTP/1.1}{0.0.0.0:8080} INFO  [2016-03-22 16:31:42,851] org.eclipse.jetty.server.handler.ContextHandler: Stopped i.d.j.MutableServletContextHandler@173373b4{/admin,null,UNAVAILABLE} INFO  [2016-03-22 16:31:42,853] org.eclipse.jetty.server.handler.ContextHandler: Stopped i.d.j.MutableServletContextHandler@4e628b52{/,null,UNAVAILABLE} Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.647 sec ```  Now after the uprev of drop wizard  ``` Running io.dropwizard.ext.tests.JettyCrossOriginIntegrationTest INFO  [2016-03-22 16:39:03,339] org.eclipse.jetty.util.log: Logging initialized @1129ms INFO  [2016-03-22 16:39:03,416] io.dropwizard.server.ServerFactory: Starting CORSApplication INFO  [2016-03-22 16:39:03,422] io.dropwizard.server.SimpleServerFactory: Registering jersey handler with root path prefix: / INFO  [2016-03-22 16:39:03,432] io.dropwizard.server.SimpleServerFactory: Registering admin handler with root path prefix: /admin INFO  [2016-03-22 16:39:03,519] org.eclipse.jetty.setuid.SetUIDListener: Opened CORSApplication@158d255c{HTTP/1.1,[http/1.1]}{0.0.0.0:8080} INFO  [2016-03-22 16:39:03,520] org.eclipse.jetty.server.Server: jetty-9.3.8.v20160314 INFO  [2016-03-22 16:39:03,851] io.dropwizard.jersey.DropwizardResourceConfig: The following paths were found for the configured resources:      NONE  INFO  [2016-03-22 16:39:03,853] org.eclipse.jetty.server.handler.ContextHandler: Started i.d.j.MutableServletContextHandler@6eb82908{/,null,AVAILABLE} INFO  [2016-03-22 16:39:03,861] io.dropwizard.setup.AdminEnvironment: tasks =       POST    /tasks/log-level (io.dropwizard.servlets.tasks.LogConfigurationTask)     POST    /tasks/gc (io.dropwizard.servlets.tasks.GarbageCollectionTask)  WARN  [2016-03-22 16:39:03,861] io.dropwizard.setup.AdminEnvironment:  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !    THIS APPLICATION HAS NO HEALTHCHECKS. THIS MEANS YOU WILL NEVER KNOW      ! !     IF IT DIES IN PRODUCTION, WHICH MEANS YOU WILL NEVER KNOW IF YOU'RE      ! !    LETTING YOUR USERS DOWN. YOU SHOULD ADD A HEALTHCHECK FOR EACH OF YOUR    ! !         APPLICATION'S DEPENDENCIES WHICH FULLY (BUT LIGHTLY) TESTS IT.       ! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! INFO  [2016-03-22 16:39:03,866] org.eclipse.jetty.server.handler.ContextHandler: Started i.d.j.MutableServletContextHandler@6c03fb16{/admin,null,AVAILABLE} Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.374 sec <<< FAILURE! io.dropwizard.ext.tests.JettyCrossOriginIntegrationTest  Time elapsed: 1.373 sec  <<< ERROR! java.lang.NoClassDefFoundError: org/eclipse/jetty/util/thread/NonBlockingThread         at org.eclipse.jetty.io.SelectorManager.doStart(SelectorManager.java:258)         at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)         at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)         at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:106)         at org.eclipse.jetty.server.AbstractConnector.doStart(AbstractConnector.java:260)         at org.eclipse.jetty.server.AbstractNetworkConnector.doStart(AbstractNetworkConnector.java:81)         at org.eclipse.jetty.server.ServerConnector.doStart(ServerConnector.java:244)         at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)         at org.eclipse.jetty.server.Server.doStart(Server.java:384)         at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)         at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:43)         at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:41)         at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:76)         at io.dropwizard.testing.DropwizardTestSupport.startIfRequired(DropwizardTestSupport.java:197)         at io.dropwizard.testing.DropwizardTestSupport.before(DropwizardTestSupport.java:115)         at io.dropwizard.testing.junit.DropwizardAppRule.before(DropwizardAppRule.java:128)         at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:46)         at org.junit.rules.RunRules.evaluate(RunRules.java:20)         at org.junit.runners.ParentRunner.run(ParentRunner.java:363)         at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)         at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)         at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:497)         at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)         at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)         at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)         at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)         at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75) Caused by: java.lang.ClassNotFoundException: org.eclipse.jetty.util.thread.NonBlockingThread         at java.net.URLClassLoader.findClass(URLClassLoader.java:381)         at java.lang.ClassLoader.loadClass(ClassLoader.java:424)         at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)         at java.lang.ClassLoader.loadClass(ClassLoader.java:357)         ... 31 more   Results :  Tests in error:    io.dropwizard.ext.tests.JettyCrossOriginIntegrationTest: org/eclipse/jetty/util/thread/NonBlockingThread  Tests run: 1, Failures: 0, Errors: 1, Skipped: 0 ```  For the record, the boiler plate of my test case follows.  ``` public class JettyCrossOriginIntegrationTest {     private static final String targetURLFormat         = ""http://localhost:%d/"";     private static final Logger LOGGER                  = LoggerFactory.getLogger(JettyCrossOriginIntegrationTest.class);     private static final String ALLOWED_HEADERS_LIST    = ""*""; //""Accept, Content-Type, Content-Length, Authorization"";     private static final String ALLOWED_METHODS_LIST    = ""GET, OPTIONS, PATCH, POST, PUT"";     private static final String GOOD_ORIGIN             = ""allowed_host"";     private static final String BAD_ORIGIN              = ""denied_host"";      public static class CORSApplication extends Application     {          @Override         public void run(Configuration configuration, Environment environment) throws Exception {             FilterRegistration.Dynamic filter = environment.servlets().addFilter(""CORSFilter"", CrossOriginFilter.class);              filter.addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), false, environment.getApplicationContext().getContextPath() + ""*"");             filter.setInitParameter(ALLOWED_METHODS_PARAM, ALLOWED_METHODS_LIST);             filter.setInitParameter(ALLOWED_ORIGINS_PARAM, GOOD_ORIGIN);             filter.setInitParameter(ALLOWED_HEADERS_PARAM, ALLOWED_HEADERS_LIST);             filter.setInitParameter(ALLOW_CREDENTIALS_PARAM, ""true"");             filter.setInitParameter(CHAIN_PREFLIGHT_PARAM, ""false"");             filter.setInitParameter(CrossOriginFilter.ACCESS_CONTROL_EXPOSE_HEADERS_HEADER, ""true"");             //filter.setInitParameter(CrossOriginFilter.EXPOSED_HEADERS_PARAM, ""X-AUTH-TOKEN"");         }     }      @ClassRule     public static final DropwizardAppRule RULE =         new DropwizardAppRule<>(CORSApplication.class,                                     resourceFilePath(""configs/jetty-cors-config.yml""));      @BeforeClass     public static void setUp()     {         System.setProperty(""sun.net.http.allowRestrictedHeaders"", ""true"");         client = new JerseyClientBuilder(RULE.getEnvironment()).build(""test client"");     }      private String buildTargetURI()     {         final String targetURI = String.format(targetURLFormat, RULE.getLocalPort());          LOGGER.info( ""JettyCrossOriginIntegrationTest target: "" + targetURI);         return targetURI;     }      @Test     public void allowedOriginPreflightOptions()     {         // when         Response response = client.target( buildTargetURI()).request()                                   .header(""Origin"", GOOD_ORIGIN)                                   .header(ACCESS_CONTROL_REQUEST_METHOD_HEADER, ""GET"")                                   .header(ACCESS_CONTROL_REQUEST_HEADERS_HEADER, ""Content-Type"")                                   .options();          // then         MultivaluedMap headers = response.getHeaders();          assertThat(headers).contains(MapEntry.entry(ACCESS_CONTROL_ALLOW_ORIGIN_HEADER, asList(GOOD_ORIGIN)));         assertThat(headers).contains(MapEntry.entry(ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER, asList(""true"")));         assertThat(headers).contains(MapEntry.entry(ACCESS_CONTROL_MAX_AGE_HEADER, asList(""1800"")));         assertThat(headers).contains(MapEntry.entry(ACCESS_CONTROL_ALLOW_METHODS_HEADER, asList(ALLOWED_METHODS_LIST)));          //uncomment this if headers are restricted         //assertThat(headers).contains(MapEntry.entry(ACCESS_CONTROL_ALLOW_HEADERS_HEADER, asList(ALLOWED_HEADERS_LIST)));      }  // test class continues past this point ```  I've slimmed this down a bit and produced the smallest example I could from our actual code.  Thoughts? Guidance?","closed","","raymerd","2016-03-22T16:52:12Z","2016-08-19T08:37:49Z"
"","1292","Optional configuration parameter validation problem in 0.90-rc5","After swtiching to version 0.90-rc5, my server failed to load its configuration with the following error message :  ``` Exception in thread ""main"" javax.validation.UnexpectedTypeException: HV000186:  The constraint of type 'javax.validation.constraints.NotNull' defined on 'client.userAgent'  has multiple matching constraint validators which is due to an additional value handler of type  'io.dropwizard.validation.valuehandling.OptionalValidatedValueUnwrapper'.  It is unclear which value needs validating. Clarify configuration via @UnwrapValidatedValue. ```  The configuration field which trigger the exception is a dropwizard `HttpClientConfiguration` with a `@Valid` annotation:  ``` java public class PetConfiguration extends Configuration {     @Valid    // remove this annotation to avoid HV000186     public HttpClientConfiguration client ; } ```  The problem is caused by the annotation `@NotNull` on the property userAgent in class HttpClientConfiguration. It can be reproduced  with a simple String parameter, like this :  ``` java public class PetConfiguration extends Configuration {     @NotNull     @Valid    // remove this annotation to avoid HV000186      public Optional foo = Optional.absent() ; } ```  Everything is fine with the two configurations classes above using 0.90-rc4, I think it's a 0.90-rc5 regression, but I don't known the cause yet : to my knowledge, there was no change on HttpClientConfiguration.userAgent between rc4 and rc5 ...","closed","bug,","lehcim","2015-10-22T09:38:07Z","2015-10-22T15:43:16Z"
"","1476","Double bean validation","After migration from 0.8.3 to 0.9.1 I found that bean validation is performed twice. First time in  `org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:127)` it calls `io.dropwizard.jersey.jackson.JacksonMessageBodyProvider.readFrom(JacksonMessageBodyProvider.java:63)`  Second time in  `org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:134) `Here ""validator"" is not null now, probably because of https://github.com/dropwizard/dropwizard/pull/842   I like jersey bean validation. Is it possible to disable validation in JacksonMessageBodyProvider?","closed","","pavelkokush","2016-03-10T11:30:25Z","2016-03-30T07:24:17Z"
"","716","#712 Improved 'Testing Applications' example","Addresses issue #712","closed","documentation,","mhurne","2014-09-27T03:47:17Z","2014-09-27T09:37:37Z"
"","1075","Moving the Saying representation to the api package","Addresses https://github.com/dropwizard/dropwizard/issues/1074","closed","documentation,","mcgin","2015-05-25T16:24:16Z","2015-05-25T20:29:26Z"
"","1421","dropwizard-testing: Add Jersey Client configurability to ResourceTestRule","Addresses #1416.  Adds a `setClientConfigurator` method to the `ResourceTestRule.Builder` class which allows configuration of the Jersey Clients used in test rules. Adds a test to `PersonResourceTest` which ensures that custom providers installed by this new builder method are reflected in the produced clients.","closed","improvement,","evnm","2016-01-18T00:32:23Z","2016-01-29T07:18:26Z"
"","677","Adding Optional @FormParam injectable.","Adding the ability to wrap a @FormParam resource parameter in a Guava Optional.  The behaviour mimics that of the Optional wrapper for the @QueryParam.  There are also some very minor code improvements removing unneeded imports and a rouge semicolon.","closed","feature,","krismassey","2014-08-08T12:42:35Z","2014-08-17T12:51:36Z"
"","582","Adding a user agent via the HttpClientBuilder","Adding a user agent configuration field to HttpClientConfiguration, and a default user agent to HttpClients, consisting of `{serviceName} ({clientName})`.  In our environment we often wonder where requests are coming from. Using the source IP is less visual, requires being able to map that IP to something meaningful, and requires load balancers to be correctly configured to send a `HTTP_X_FORWARDED_FOR` header. By setting the user agent we can include it in the request logs and easily identify traffic sources.","closed","","reines","2014-05-17T09:24:38Z","2014-06-12T13:09:31Z"
"","1047","JDBI documentation fix - setter for Jackson added","added setter for database property, otherwise this code doesn't work","closed","","akoncius","2015-05-13T20:18:26Z","2015-05-13T21:13:29Z"
"","1172","Added hook for UnauthorizedHandler to be customized in the builder.","Added hook for `UnauthorizedHandler` to be customized in the `AuthFilterBuilder`. Not sure how to test it though.","closed","","mnrasul","2015-07-16T05:58:36Z","2017-04-05T21:59:39Z"
"","942","Improve extraction of full URL from HttpServletRequest.","Added fast-path for the case where a query string is not present in the request. Previously a potentially unused StringBuilder instance was allocated for every request.","closed","","thomasdarimont","2015-03-13T15:08:30Z","2015-04-01T01:39:24Z"
"","790","Simple DropwizardAppRule integration test","Added a simple test of the Hello, World! service which uses DropwizardAppRule and demonstrates the correct syntax for Jersey 2.13.","closed","","Jerry-Carter","2014-11-21T16:40:43Z","2014-11-23T22:22:34Z"
"","1025","Doc update: Generic checks when creating AuthFilter","Added `` when calling `AuthFilter.Builder`","closed","documentation,","yunspace","2015-05-01T01:53:40Z","2015-05-18T20:23:33Z"
"","1108","Update validationmethod documentation to use JsonIgnore","Added @JsonIgnore to example validation method. Whilst the application will work without this flag, it will fail during testing as additional paramters will be added to the created JSON StackOverflow: http://stackoverflow.com/questions/26551726/dropwizard-validationmethod-adding-a-json-property  To be safe, and promote unit testing, this should be included in the example documentation.","closed","","RawToast","2015-06-08T16:30:52Z","2015-06-08T19:13:46Z"
"","1283","Synchronize 0.9.0 release notes","Add the major contributed fixes and improvements since the last update.","closed","documentation,","arteam","2015-10-17T09:40:42Z","2016-01-24T08:06:37Z"
"","666","Add the error code into the JSON response","Add the HTTP response code into the JSON error response","closed","","jplock","2014-07-24T13:19:25Z","2014-08-05T23:41:19Z"
"","1354","Add support for setting default headers in Apache HTTP client","Add the ability to set predefined HTTP headers for each HTTP request of an HTTP client.  Apache `HttpClientBuilder` already supports such functionality and we should just delegate building from Dropwizard `HttpClientBuilder`.  In the result users can provide own headers without subclassing Dropwizard `HttpClientBuilder`.  Resolves #1353","closed","improvement,","arteam","2015-11-25T09:55:23Z","2016-01-24T08:04:46Z"
"","1234","Add docs for dropwizard auth","Add some docs to test resources with `@Auth`","closed","documentation,","wakandan","2015-08-25T14:14:01Z","2015-08-26T11:08:53Z"
"","802","Make auth factories flexible","Add prefix and responseBuilder options to Basic and OAuth factories to make them more flexible.  Close #798","closed","improvement,","Toilal","2014-12-03T08:33:05Z","2015-05-21T05:49:59Z"
"","1542","Update documentation on hibernate resource method example","Add Path annotation, as method expects PathParam (will get NullPointerException otherwise)","closed","documentation,","sreyseng","2016-05-10T21:17:58Z","2016-05-10T22:30:41Z"
"","1184","Add missing closing parenthesis in configuration example","Add missing closing parenthesis in MessageQueueFactory build method","closed","documentation,","neurodesign","2015-07-23T18:07:08Z","2015-07-24T07:48:28Z"
"","1072","Log context paths in `SimpleServerFactory` during startup","Add logging of application and admin context paths during server startup. `DefaultServerFactory` already does [that](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-core/src/main/java/io/dropwizard/server/DefaultServerFactory.java#L160).  It should help to avoid confusion for users who use this configuration for the first time and expect that application resources are served from the root path.  Resolve #1058","closed","improvement,","arteam","2015-05-24T20:15:14Z","2016-01-24T08:05:30Z"
"","626","Add links to Maven Site and dropwizard-devel to docs","Add links to Maven Site and dropwizard-devel to the Sphinx documentation.","closed","documentation,","joschi","2014-06-24T01:10:04Z","2014-07-07T08:53:06Z"
"","837","Jadira Usertype Extended","add http://mvnrepository.com/artifact/org.jadira.usertype/usertype.extended/3.2.0.GA to the dependencies of dropwizard-hibernate to add support for new JDK8 Time API in hibernate.","closed","","Athou","2015-01-08T10:06:43Z","2015-01-09T11:25:57Z"
"","547","Add Dropwizard 0.7.0 documentation","Add documentation (user guide and Maven sites) for Dropwizard 0.7.0.  The Maven site for the parent project will be at http://www.dropwizard.io/0.7.0/ and the user guide at http://www.dropwizard.io/0.7.0/docs/  It was generated by running `mvn clean site:site site:stage` from the `v0.7.0` tag after rerverting 915800e7e08174ea3cfed13510854752040fe50a.  If you're already on Java 8 you might want to add `-Dadditionalparam=-Xdoclint:none` when rebuilding (or if you want to reproduce the output).","closed","","joschi","2014-04-18T12:20:09Z","2014-06-18T11:48:38Z"
"","990","First stab on dropwizard-benchmarks","Add benchmarks for [Duration](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-util/src/main/java/io/dropwizard/util/Duration.java) and [Size](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-util/src/main/java/io/dropwizard/util/Size.java)  The benchmarks measure an average time to parse a string to Duration and Size representations.","closed","task,","arteam","2015-04-11T22:22:39Z","2016-02-06T06:01:57Z"
"","1364","Add a development profile to Maven","Add a development profile that allow to skip following things during project installation: - Running Findbugs checks; - Generating Javadoc; - Creating a verifying a sample project from the archetype; - Generating a shadowed artifact for the example project.  This allows to decrease the time to clean and install project from 4-5 minutes to 20-30 seconds during development.","closed","","arteam","2015-11-28T10:55:09Z","2016-01-24T08:05:39Z"
"","656","Overriding Configuration that doesnt exist in config.yml","According to the dropwizard manual:  > You can override configuration settings by passing special Java system properties when starting your application. Overrides must start with prefix dw., followed by the path to the configuration value being overridden. > For example, to override the Logging level, you could start your application like this: > java -Ddw.logging.level=DEBUG server my-config.json > This will work even if the configuration setting in question does not exist in your config file, in which case it will get added. > You can override configuration settings in arrays of objects like this:  However, when running the example from dropwizard.io, with the following config.yml:  ``` server:     applicationConnectors:     -   type: http         port: 8800     adminConnectors:     -   type: http         port: 9800 ```  The following works (as per the getting started manual):  ``` java -Dw.logging.level=DEBUG -jar myapi.jar server config.yml ```  However, the following does not work:  ``` java -Dw.dbconnection={somestring} -jar myapi.jar server config.yml config.yml has an error:   * Unrecognized field at: dbconnection     Did you mean?: ... ```  Was this overriding functionality for new configuration properties removed?  Thanks! Love the work!  Sincerely,  Samuel Raghunath","closed","","Onewaysidewalks","2014-07-11T14:24:10Z","2014-07-11T16:52:08Z"
"","787","Documentation issue: Testing contains unnecessary 'ResourceHelpers.'","According to the current documentation http://dropwizard.io/0.8.0-rc1/docs/manual/testing.html, integration testing defines a class rule along these lines:  @ClassRule public static final DropwizardAppRule RULE = new DropwizardAppRule(MyApp.class, ResourceHelpers.resourceFilePath(""my-app-config.yaml""));  The ‘ResourceHelpers.’ appears to be unnecessary here and was added between 0.7.1 and 0.8.0.","closed","","Jerry-Carter","2014-11-20T15:59:23Z","2014-12-27T14:09:06Z"
"","960","Honor Jersey Client Timeout Defaults","According to the [latest Jersey configuration documentation](https://jersey.java.net/documentation/latest/appendix-properties.html#appendix-properties-client), a client has a read and connect timeout of infinity. Dropwizard assumes a default read and connect timeout for HttpClient and Jersey's client of 500 milliseconds. This was not obvious, especially because I was led down the path of trying to set Jersey Client Properties on the Builder, and didn't realize until later that [the docs say](https://github.com/dropwizard/dropwizard/blob/9c7adb21ac5abd5768f029ca1b2331e4b4e29ed9/dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java#L103-L116)  > WARNING:The default connector ignores Jersey properties  It took me an embarrassingly long time to realize how everything was connected (and that I could change the timeouts with a yaml change), and I'd like to save some time for those in the future.  Solutions: 1. Mention in docs that the timeouts are in effect (which deviates from the default). Provide a sentence stating how to change them. 2. Change the code such that Jersey configuration defaults are actually the default for the Jersey Client. I understand if there is hesitation towards this change as this may break applications that implicitly rely on the 500 millisecond timeout (which is currently the default).  If there are any other deviations, it would probably be fruitful to document them too.  Which solution is preferable?","closed","","nickbabcock","2015-03-30T17:27:13Z","2015-03-31T07:19:15Z"
"","636","Problem with setting port on command line","According to SimpleServerFactory docs:  > A startup script can override the port via {@code -Ddw.server.connector.port=$PORT}.  However, when I try:  ``` java -Ddw.server.connector.port=8081 -jar my.jar server config.yml ```  I get:  > config.yml has an error: >  Failed to parse configuration at: server.connector; Unexpected token (END_OBJECT), expected FIELD_NAME: missing property 'type' that is to contain type id  (for class io.dropwizard.jetty.ConnectorFactory) > at [Source: N/A; line: -1, column: -1](through reference chain: com.acmerocket.stratum.StratumConfiguration[""server""]->io.dropwizard.server.SimpleServerFactory[""connector""])  Without `-Ddw.server.connector.port=8081`, the app comes up fine.","closed","","philion","2014-06-27T17:25:32Z","2020-01-28T12:44:47Z"
"","932","Jackson does not serialize @Transient fields in Hibernate","According to an [issue in Jackson](https://github.com/FasterXML/jackson-databind/issues/573), `@Transient` annotated fields/getters are not serialized to JSON in Jackson > 2.0.  The solution is simple, disable the feature in the Jackson Hibernate4Module, i.e.   ``` java module.disable(Hibernate4Module.Feature.USE_TRANSIENT_ANNOTATION); ```   However, this method is marked final in `HibernateBundle`, thus there is no way to disable this feature when using the Bundle:  ``` java     @Override     public final void initialize(Bootstrap bootstrap) {         bootstrap.getObjectMapper().registerModule(new Hibernate4Module());     } ```  This creates subtle problems when generating JSON from Hibernate objects...","closed","","blezek","2015-03-10T17:14:29Z","2020-12-10T08:29:35Z"
"","1318","Support authentication of polymorphic Principal classes","A web service that I'm implementing requires the notion of different classes of API keys for authenticating requests to different endpoints (e.g. read vs write keys). I thought that the natural way to implement this would be to form a simple class hierarchy of `java.security.Principal`s:  ``` public abstract class ApiKey implements Principal { ... } public class ReadApiKey extends ApiKey { ... } public class WriteApiKey extends ApiKey { ... } ```  And then use the `@Auth` annotation to inject these keys in endpoints accordingly:  ``` @POST public Response writeSomething(@Auth WriteApiKey apiKey, ...) { ... } @GET public Response readSomething(@Auth ReadApiKey apiKey, ...) { ... } ```  However, Dropwizard is [currently](https://github.com/dropwizard/dropwizard/blob/23f353a896c9e5ad5e963fece3f82d227b7c0f5f/dropwizard-auth/src/main/java/io/dropwizard/auth/AuthValueFactoryProvider.java#L55) unable to achieve this because `io.dw.auth.AuthValueFactoryProvider` enforces that only a single Principal implementation can be used per application.  I got around this deficiency by writing a custom `AbstractValueFactoryProvider` subclass that operates on a `Set` rather than a single Principal. This seems like a useful thing to have in dropwizard-auth proper, so I was wondering if others would entertain the idea of introducing it. To make sure this is feasible, I [moved the class into dropwizard-auth as a superclass of `io.dw.auth.AuthValueFactoryProvider`](https://github.com/evnm/dropwizard/commit/f1194a02271e1353945fedaa1c7a07f9a4265e53), since it's technically a generalization thereof.  Please let me know if this is a) ill-advised or b) worthy of a PR.","closed","","evnm","2015-10-31T04:57:37Z","2016-01-17T14:42:28Z"
"","720","Add tests to the SimpleServerFactory","A unit/integration test that checks configuration of a server with a single available port.","closed","","arteam","2014-10-01T12:57:07Z","2016-01-24T08:06:31Z"
"","651","Injected HttpServletRequest is not supported in tests?","A resource defined as:  ``` @Produces(MediaType.APPLICATION_XML) @Singleton public final class MemberNodeResource implements MemberNode {   @Context   private HttpServletRequest request; ```  Cannot be unit tested with `ResourceTestRule` since it fails with  ``` ERROR [2014-07-10 14:57:38,285] com.sun.jersey.spi.inject.Errors: The following errors and warnings have been detected with resource and/or provider classes:   SEVERE: Missing dependency for field: private javax.servlet.http.HttpServletRequest org.gbif.d1.mn.rest.MemberNodeResource.request ```  I've tried creating a provider for the test:  ``` @Provider public class MockRequestProvider extends AbstractHttpContextInjectable implements   InjectableProvider {    @Override   public Injectable getInjectable(ComponentContext ic, Context a, Type c) {     if (c.equals(HttpServletRequest.class)) {       return this;     }     return null;   }    @Override   public ComponentScope getScope() {     return ComponentScope.PerRequest;   }    @Override   public HttpServletRequest getValue(HttpContext c) {     return Mockito.mock(HttpServletRequest.class);   } } ```  Adding it as:  ```   @ClassRule   public static final ResourceTestRule resources = ResourceTestRule.builder()     .addResource(new MemberNodeResource(backend, mockNode()))     .addProvider(new MockRequestProvider())     .build(); ```  But the same happens.  Any ideas?  Googling around I think I am not alone in this, but I am yet to find a workaround.","closed","","timrobertson100","2014-07-10T13:03:35Z","2015-06-26T12:41:53Z"
"","928","Depending on dropwizard-client-0.8.0 causes maven enforcer failures","A project with the following dependencies…  ```                      io.dropwizard             dropwizard-core             0.8.0                               io.dropwizard             dropwizard-client             0.8.0                               io.dropwizard             dropwizard-views-freemarker             0.8.0          ```  …fails during packaging because Maven enforcer can't converge on the proper version of org.slf4j:slf4j-api.  ``` Dependency convergence error for org.slf4j:slf4j-api:1.7.10 paths to dependency are: +-com.hypnoticocelot:pickpocket:0.0.1-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.8.0     +-io.dropwizard:dropwizard-jackson:0.8.0       +-org.slf4j:slf4j-api:1.7.10 and +-com.hypnoticocelot:pickpocket:0.0.1-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.8.0     +-io.dropwizard:dropwizard-logging:0.8.0       +-org.slf4j:slf4j-api:1.7.10 and +-com.hypnoticocelot:pickpocket:0.0.1-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.8.0     +-io.dropwizard:dropwizard-logging:0.8.0       +-org.slf4j:jul-to-slf4j:1.7.10         +-org.slf4j:slf4j-api:1.7.10 and +-com.hypnoticocelot:pickpocket:0.0.1-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.8.0     +-io.dropwizard:dropwizard-logging:0.8.0       +-org.slf4j:log4j-over-slf4j:1.7.10         +-org.slf4j:slf4j-api:1.7.10 and +-com.hypnoticocelot:pickpocket:0.0.1-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.8.0     +-io.dropwizard:dropwizard-logging:0.8.0       +-org.slf4j:jcl-over-slf4j:1.7.10         +-org.slf4j:slf4j-api:1.7.10 and +-com.hypnoticocelot:pickpocket:0.0.1-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.8.0     +-io.dropwizard:dropwizard-metrics:0.8.0       +-org.slf4j:slf4j-api:1.7.10 and +-com.hypnoticocelot:pickpocket:0.0.1-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.8.0     +-io.dropwizard:dropwizard-servlets:0.8.0       +-org.slf4j:slf4j-api:1.7.10 and +-com.hypnoticocelot:pickpocket:0.0.1-SNAPSHOT   +-io.dropwizard:dropwizard-core:0.8.0     +-io.dropwizard:dropwizard-lifecycle:0.8.0       +-org.slf4j:slf4j-api:1.7.10 and +-com.hypnoticocelot:pickpocket:0.0.1-SNAPSHOT   +-io.dropwizard:dropwizard-client:0.8.0     +-io.dropwizard.metrics:metrics-httpclient:3.1.0       +-org.slf4j:slf4j-api:1.7.7 ```  This appears to be because Metrics is aggressively interfering with [a dependencyManagement section in their POM](https://github.com/dropwizard/metrics/blob/master/pom.xml#L107-L115).  This can be worked around with the following exclusion:  ```                      io.dropwizard             dropwizard-client             ${dropwizard.version}                                                   org.slf4j                     slf4j-api                                        ```  However, doing so should not be necessary for Dropwizard users.","closed","bug,","ryankennedy","2015-03-07T05:54:58Z","2015-03-07T10:13:38Z"
"","1358","Upgrade to JDBI 2.70","A pretty big JDBI upgrade. See the release announcement [here](https://groups.google.com/forum/#!topic/jdbi/onYQtaBeEng).","closed","improvement,","arteam","2015-11-25T17:07:14Z","2016-01-24T08:06:52Z"
"","1402","Synchronize 1.0.0 release notes","A number of improvements have already been [contributed](https://github.com/dropwizard/dropwizard/pulls?q=is%3Apr+milestone%3A1.0.0+is%3Aclosed) in 1.0.0, and it would be great to write them down to the changelog.   This PR synchronizes the release notes in the docs with the current mainline state, which should allows users to more easily track progress in 1.0.0.","closed","documentation,","arteam","2016-01-02T10:57:40Z","2016-01-24T08:03:24Z"
"","1051","Use a custom mustache resolver then a custom factory","A more canonical way to provide a custom resource loader is through delegation, rather then inheritance.  There is the `MustacheResolver` interface, that gives ability to provide own strategy of loading resources and pass it to the `DefaultMustacheFactory` class in the constructor.  Also this removes throwing `MustacheException`, because internally Mustache already handles the case when a returned reader is null and throws a `MustacheNotFoundException` with the same semantic.","closed","","arteam","2015-05-15T20:46:23Z","2016-01-24T08:05:55Z"
"","1091","Update Validation Documentation","A hefty chunk of documentation on validation that covers previously undocumented features and updates others. I made it into it's own page due to its length. If this is not desired (due to potentially broken links to the documentation), I can merge it back  **The documentation is currently not accurate (so it may not be a good idea to merge just yet)**: as  ``` java @PUT @Valid public Person replace(@Valid Person person) {     // Oops, we got a bug, a person can't have a null name     return new Person(null); } ```  will return a `200 OK` and not `500 Internal Server Error`.   Let me know if there are any corrections/suggestions.","closed","","nickbabcock","2015-06-02T20:59:24Z","2015-07-17T13:54:06Z"
"","1413","Add JDBC url to PooledDataSourceFactory","A Dropwizard module I maintain uses `DataSourceFactory#getUrl()` as part of its configuration; as of 0.9.0, the new interface `PooledDataSourceFactory` does not expose this info.  Per [a dropwizard-dev message](https://groups.google.com/forum/#!topic/dropwizard-dev/4-N8ahwLFy0), adding this to the new interface shouldn't be an issue for any current or future implementations - they all will be JDBC connection pools, and will all need a DB URL to function.  I have a PR ready, if nobody objects.","closed","","benjamin-bader","2016-01-14T17:47:58Z","2016-01-15T05:00:19Z"
"","1366","Apache HTTP Client doc fixes","A couple of fixes to the documentation of integration with Apache HTTP Client.","closed","documentation,","arteam","2015-12-01T19:39:24Z","2016-01-24T08:18:03Z"
"","881","Print error messages (if any) when initializing loggers","A couple of days ago, I spent a ridiculous amount of time tracking down a relatively stupid issue.   Turned out that I had messed up write permission in my log directly. So the file appender couldn't write to my configured log directory.  My own fault, I know. But I got no warning when I started up the application.   So, I'm proposing a change :)  In `LoggingFactory#configure`, after the appenders are set up, logback's `StatusPrinter#printIfErrorsOccured` is called. If any errors has occurred, those are printed to `System.out`.   I'm not sure if printing to `System.out` is smart, perhaps we should print to `System.err` instead? Printing to `System.out` could interfere with output from other commands.  Example of an error message:  ``` 10:51:26,122 |-ERROR in ch.qos.logback.core.FileAppender[file-appender] - openFile(/var/folders/p7/81qg63wn2p14k0kgpk5_wz8m0000gn/T/junit888714839740087763/folder-without-write-permission/my-log-file.log,true) call failed. java.io.FileNotFoundException: /var/folders/p7/81qg63wn2p14k0kgpk5_wz8m0000gn/T/junit888714839740087763/folder-without-write-permission/my-log-file.log (Permission denied)     at java.io.FileNotFoundException: /var/folders/p7/81qg63wn2p14k0kgpk5_wz8m0000gn/T/junit888714839740087763/folder-without-write-permission/my-log-file.log (Permission denied)     at  at java.io.FileOutputStream.open(Native Method)     at  at java.io.FileOutputStream.(FileOutputStream.java:221)     at  at ch.qos.logback.core.recovery.ResilientFileOutputStream.(ResilientFileOutputStream.java:28)     at  at ch.qos.logback.core.FileAppender.openFile(FileAppender.java:150)     at  at ch.qos.logback.core.FileAppender.start(FileAppender.java:108)     at  at io.dropwizard.logging.FileAppenderFactory.build(FileAppenderFactory.java:168)     at  at io.dropwizard.logging.LoggingFactory.configure(LoggingFactory.java:126)     at  at io.dropwizard.logging.LoggingFactoryPrintErrorMessagesTest.configureAndCaptureSystemOut(LoggingFactoryPrintErrorMessagesTest.java:66)     at  at io.dropwizard.logging.LoggingFactoryPrintErrorMessagesTest.testWhenFileAppenderDoesNotHaveWritePermissionToFolder_PrintsErrorMessageToConsole(LoggingFactoryPrintErrorMessagesTest.java:79)     at  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at  at java.lang.reflect.Method.invoke(Method.java:606)     [...] ```","closed","","eiden","2015-02-18T10:05:49Z","2015-02-22T07:16:08Z"
"","751","Added setBaseResource() method missing from 0.7","`setBaseResource()` existed in DW 0.6.2 but was missing in 0.7.0.  Fixes #749","closed","","jplock","2014-10-21T12:46:11Z","2014-10-23T23:43:31Z"
"","1303","Flaky test: io.dropwizard.cli.ServerCommandTest","`ServerCommandTest` occasionally fails with a `ConcurrentModificationException`: [Travis CI log.txt](https://github.com/dropwizard/dropwizard/files/19422/ConcurrentModificationException-log.txt)","closed","","joschi","2015-10-23T13:52:13Z","2016-05-25T13:19:13Z"
"","906","Ability to un-manage lifecycle objects","`LifecycleEnvironment` currently have `manage` method which adds managed object to lifecycle. It should also have some way to remove object from lifecycle management with calling `stop` before removing the object.   This will allow creation of more dynamic applications in dropwizard.   Example use case, which actually highlighted requirement of this feature: I needed to build a dropwizard application with ability to dynamically change hibernate session, effectively switching database on the fly without restarting the app.  Currently this is not possible to do following framework rules, since once you add `SessionFactoryManager` to `LifecycleEnvironment` through `manage()` there is no way to remove it from there, effectively creating memory leak.","closed","stale,","kenota","2015-02-27T11:07:38Z","2019-09-04T00:01:12Z"
"","976","Return back the default constructor for JodaDateTimeMapper","`JodaTimeMapper` is a public class and should provide the default constructor because of: - backwards compatibility - users, who don't care about timezones - consistency with `JodaTimeArgumentFactory`","closed","bug,","arteam","2015-04-08T21:05:16Z","2016-01-24T08:05:27Z"
"","1004","Defer DNS resolution in GraphiteReporter","`InetSockedAddres` performs DNS resolution during construction time, which is not great if the Graphite server moves to a different IP-address.  The solution is to initialize `Graphite` gateway with a hostname and port. In such configuration it will resolve an address just before connecting to the server.  Resolve #1003","closed","improvement,","arteam","2015-04-21T19:59:33Z","2016-01-24T08:04:41Z"
"","1441","Ability to add interceptors to Instrumented Apache's Http Client","`HttpClientBuilder` for instrumented Apache's Http-Client doesn't provides an api to add interceptors. Vanilla `HttpClientBuilder` from Apache's Http-Client exposes this functionality via an API.","closed","","skstronghold","2016-02-03T18:22:36Z","2017-02-07T19:23:39Z"
"","1403","Use h2 and h2c as the HTTP/2 connector names","`h2` and `h2c` are official identificators for the HTTP/2 over TLS and HTTP/2 clear text protocols. It would be more consistent with the spec and less confusing for users, if we used these them instead `http2` and `http2c`.  See [HTTP/2 implementation list](https://github.com/http2/http2-spec/wiki/Implementations) for the reference.","closed","documentation,","arteam","2016-01-04T13:49:45Z","2016-01-24T08:05:57Z"
"","998","Reference correct Grizzly server in testing docs","`GrizzlyWebTestContainerFactory` is what is recommended to allow `Context` injections but the docs use `GrizzlyTestContainerFactory`.","closed","documentation,","nickbabcock","2015-04-17T17:58:04Z","2015-04-26T18:40:18Z"
"","1491","FileAppenderFactory doesn't support infinite archive option","`FileAppenderFactory` has  ``` java     @Min(1)     private int archivedFileCount = 5; ```  `TimeBasedRollingPolicy` specifies   ``` java   static final int INFINITE_HISTORY = 0; ```  But I can never set infinite history due to the constraint.","closed","","devinrsmith","2016-03-24T16:27:31Z","2016-05-20T08:29:23Z"
"","634","Remove 'Content-Encoding' header after decompressing request body","`BiDiGzipFilter` will now remove the `Content-Encoding` HTTP header after decompressing the request body and handing the request over to the next filter.  This PR fixes #559 when being merged.","closed","","joschi","2014-06-25T23:00:21Z","2014-07-07T08:15:50Z"
"","916","0.8.0-rc3 IllegalArgumentException using JerseyClient with a webtarget having a registered component","``` java Client client = new JerseyClientBuilder(environment).build(""jerseyclient"");  WebTarget wt = client.target(""http://google.com""); wt.register(new LoggingFilter(java.util.logging.Logger.getLogger(""loggingfilter""), false)); wt.request().get(String.class);  WebTarget wt2 = client.target(""http://google.com""); wt2.request().get(String.class); ```  the 2nd get will fail with he following exception:  ``` Exception in thread ""main"" java.lang.IllegalArgumentException: A metric named org.apache.http.conn.HttpClientConnectionManager.jerseyclient.available-connections already exists     at com.codahale.metrics.MetricRegistry.register(MetricRegistry.java:91)     at com.codahale.metrics.httpclient.InstrumentedHttpClientConnectionManager.(InstrumentedHttpClientConnectionManager.java:57)     at io.dropwizard.client.HttpClientBuilder.createConnectionManager(HttpClientBuilder.java:278)     at io.dropwizard.client.HttpClientBuilder.build(HttpClientBuilder.java:173)     at io.dropwizard.client.JerseyClientBuilder$1.getConnector(JerseyClientBuilder.java:317)     at org.glassfish.jersey.client.ClientConfig$State.initRuntime(ClientConfig.java:414)     at org.glassfish.jersey.client.ClientConfig$State.access$000(ClientConfig.java:87)     at org.glassfish.jersey.client.ClientConfig$State$3.get(ClientConfig.java:119)     at org.glassfish.jersey.client.ClientConfig$State$3.get(ClientConfig.java:116)     at org.glassfish.jersey.internal.util.collection.Values$LazyValueImpl.get(Values.java:340)     at org.glassfish.jersey.client.ClientConfig.getRuntime(ClientConfig.java:722)     at org.glassfish.jersey.client.ClientRequest.getConfiguration(ClientRequest.java:284)     at org.glassfish.jersey.client.JerseyInvocation.validateHttpMethodAndEntity(JerseyInvocation.java:126)     at org.glassfish.jersey.client.JerseyInvocation.(JerseyInvocation.java:98)     at org.glassfish.jersey.client.JerseyInvocation.(JerseyInvocation.java:91)     at org.glassfish.jersey.client.JerseyInvocation$Builder.method(JerseyInvocation.java:408)     at org.glassfish.jersey.client.JerseyInvocation$Builder.get(JerseyInvocation.java:308) ```  This does not fail in 0.8.0-rc2. This fails in the same manner in rc4 & rc5","closed","bug,","ESPNMichaelKidd","2015-03-05T10:53:48Z","2015-03-05T14:45:35Z"
"","919","SSL on the example project doesn't work","``` carlobarbara@c02mq2hmfd58:~|⇒  curl -vvvvvvv https://localhost:8443/hello-world * Hostname was NOT found in DNS cache *   Trying ::1... * Connected to localhost (::1) port 8443 (#0) * Server aborted the SSL handshake * Closing connection 0 curl: (35) Server aborted the SSL handshake ```  I suspect the certs in the keystore expired:  ``` carlobarbara@c02mq2hmfd58:~|⇒  OpenSSL s_client -host localhost -port 8443 -prexit CONNECTED(00000003) depth=0 /C=EX/ST=Examplia/L=Exampleville/O=Examples, Inc./OU=Example Team/CN=Example Person verify error:num=18:self signed certificate verify return:1 depth=0 /C=EX/ST=Examplia/L=Exampleville/O=Examples, Inc./OU=Example Team/CN=Example Person verify error:num=10:certificate has expired notAfter=Jul 18 16:09:52 2012 GMT verify return:1 depth=0 /C=EX/ST=Examplia/L=Exampleville/O=Examples, Inc./OU=Example Team/CN=Example Person notAfter=Jul 18 16:09:52 2012 GMT verify return:1  --- Certificate chain  0 s:/C=EX/ST=Examplia/L=Exampleville/O=Examples, Inc./OU=Example Team/CN=Example Person    i:/C=EX/ST=Examplia/L=Exampleville/O=Examples, Inc./OU=Example Team/CN=Example Person  --- Server certificate -----BEGIN CERTIFICATE----- MIIDYTCCAx2gAwIBAgIEUMK/ZzALBgcqhkjOOAQDBQAwgYAxCzAJBgNVBAYTAkVY MREwDwYDVQQIEwhFeGFtcGxpYTEVMBMGA1UEBxMMRXhhbXBsZXZpbGxlMRcwFQYD VQQKEw5FeGFtcGxlcywgSW5jLjEVMBMGA1UECxMMRXhhbXBsZSBUZWFtMRcwFQYD VQQDEw5FeGFtcGxlIFBlcnNvbjAeFw0xMjA0MTkxNjA5NTJaFw0xMjA3MTgxNjA5 NTJaMIGAMQswCQYDVQQGEwJFWDERMA8GA1UECBMIRXhhbXBsaWExFTATBgNVBAcT DEV4YW1wbGV2aWxsZTEXMBUGA1UEChMORXhhbXBsZXMsIEluYy4xFTATBgNVBAsT DEV4YW1wbGUgVGVhbTEXMBUGA1UEAxMORXhhbXBsZSBQZXJzb24wggG4MIIBLAYH KoZIzjgEATCCAR8CgYEA/X9TgR11EilS30qcLuzk5/YRt1I870QAwx4/gLZRJmlF XUAiUftZPY1Y+r/F9bow9subVWzXgTuAHTRv8mZgt2uZUKWkn5/oBHsQIsJPu6nX /rfGG/g7V+fGqKYVDwT7g/bTxR7DAjVUE1oWkTL2dfOuK2HXKu/yIgMZndFIAccC FQCXYFCPFSMLzLKSuYKi64QL8Fgc9QKBgQD34aCF1ps93su8q1w2uFe5eZSvu/o6 6oL5V0wLPQeCZ1FZV4661FlP5nEHEIGAtEkWcSPoTCgWE7fPCTKMyKbhPBZ6i1R8 jSjgo64eK7OmdZFuo38L+iE1YvH7YnoBJDvMpPG+qFGQiaiD3+Fa5Z8GkotmXoB7 VSVkAUw7/s9JKgOBhQACgYEA89EEWfI87spxqi/5HUQ50b7y3upsaefAj6K6L+gY Dr/yl1yB9zOSKRUl0YMygYKU5Kc8w+7YjcWolbaHkhfmqcRtqy4RrPK+zn7tmkFt P3lP4NAe7kpjyo/A1JJIZAvrPoVi5GPxRmhYmQkdA/COLiZO4DmnvYrnjl7TWpsV H5ejITAfMB0GA1UdDgQWBBQi3lH7jB8A4JLryzU0IJuLueS16DALBgcqhkjOOAQD BQADMQAwLgIVAJL7f1PfqCO6xBODEu5yTuX0iOJMAhUAjR/ksAXzwuug82EbT7aY snarxp0= -----END CERTIFICATE----- subject=/C=EX/ST=Examplia/L=Exampleville/O=Examples, Inc./OU=Example Team/CN=Example Person issuer=/C=EX/ST=Examplia/L=Exampleville/O=Examples, Inc./OU=Example Team/CN=Example Person  --- No client certificate CA names sent  --- SSL handshake has read 1366 bytes and written 288 bytes  --- New, TLSv1/SSLv3, Cipher is EDH-DSS-DES-CBC3-SHA Server public key is 1024 bit Secure Renegotiation IS supported Compression: NONE Expansion: NONE SSL-Session:     Protocol  : TLSv1     Cipher    : EDH-DSS-DES-CBC3-SHA     Session-ID: 54F865B32CE710AE3AC5CE032B277111DCC4CC4A1451098D3729843FCBC829C8     Session-ID-ctx:     Master-Key: 549EFF0061919DEF53E33AD85479EB1E016CFB811796AD5159BF992C4504DD454E9455A8B2073CA4D75EB807FF0BE1ED     Key-Arg   : None     Start Time: 1425565107     Timeout   : 300 (sec)     Verify return code: 10 (certificate has expired)  --- closed  --- Certificate chain  0 s:/C=EX/ST=Examplia/L=Exampleville/O=Examples, Inc./OU=Example Team/CN=Example Person    i:/C=EX/ST=Examplia/L=Exampleville/O=Examples, Inc./OU=Example Team/CN=Example Person  --- Server certificate -----BEGIN CERTIFICATE----- MIIDYTCCAx2gAwIBAgIEUMK/ZzALBgcqhkjOOAQDBQAwgYAxCzAJBgNVBAYTAkVY MREwDwYDVQQIEwhFeGFtcGxpYTEVMBMGA1UEBxMMRXhhbXBsZXZpbGxlMRcwFQYD VQQKEw5FeGFtcGxlcywgSW5jLjEVMBMGA1UECxMMRXhhbXBsZSBUZWFtMRcwFQYD VQQDEw5FeGFtcGxlIFBlcnNvbjAeFw0xMjA0MTkxNjA5NTJaFw0xMjA3MTgxNjA5 NTJaMIGAMQswCQYDVQQGEwJFWDERMA8GA1UECBMIRXhhbXBsaWExFTATBgNVBAcT DEV4YW1wbGV2aWxsZTEXMBUGA1UEChMORXhhbXBsZXMsIEluYy4xFTATBgNVBAsT DEV4YW1wbGUgVGVhbTEXMBUGA1UEAxMORXhhbXBsZSBQZXJzb24wggG4MIIBLAYH KoZIzjgEATCCAR8CgYEA/X9TgR11EilS30qcLuzk5/YRt1I870QAwx4/gLZRJmlF XUAiUftZPY1Y+r/F9bow9subVWzXgTuAHTRv8mZgt2uZUKWkn5/oBHsQIsJPu6nX /rfGG/g7V+fGqKYVDwT7g/bTxR7DAjVUE1oWkTL2dfOuK2HXKu/yIgMZndFIAccC FQCXYFCPFSMLzLKSuYKi64QL8Fgc9QKBgQD34aCF1ps93su8q1w2uFe5eZSvu/o6 6oL5V0wLPQeCZ1FZV4661FlP5nEHEIGAtEkWcSPoTCgWE7fPCTKMyKbhPBZ6i1R8 jSjgo64eK7OmdZFuo38L+iE1YvH7YnoBJDvMpPG+qFGQiaiD3+Fa5Z8GkotmXoB7 VSVkAUw7/s9JKgOBhQACgYEA89EEWfI87spxqi/5HUQ50b7y3upsaefAj6K6L+gY Dr/yl1yB9zOSKRUl0YMygYKU5Kc8w+7YjcWolbaHkhfmqcRtqy4RrPK+zn7tmkFt P3lP4NAe7kpjyo/A1JJIZAvrPoVi5GPxRmhYmQkdA/COLiZO4DmnvYrnjl7TWpsV H5ejITAfMB0GA1UdDgQWBBQi3lH7jB8A4JLryzU0IJuLueS16DALBgcqhkjOOAQD BQADMQAwLgIVAJL7f1PfqCO6xBODEu5yTuX0iOJMAhUAjR/ksAXzwuug82EbT7aY snarxp0= -----END CERTIFICATE----- subject=/C=EX/ST=Examplia/L=Exampleville/O=Examples, Inc./OU=Example Team/CN=Example Person issuer=/C=EX/ST=Examplia/L=Exampleville/O=Examples, Inc./OU=Example Team/CN=Example Person  --- No client certificate CA names sent  --- SSL handshake has read 1395 bytes and written 317 bytes  --- New, TLSv1/SSLv3, Cipher is EDH-DSS-DES-CBC3-SHA Server public key is 1024 bit Secure Renegotiation IS supported Compression: NONE Expansion: NONE SSL-Session:     Protocol  : TLSv1     Cipher    : EDH-DSS-DES-CBC3-SHA     Session-ID: 54F865B32CE710AE3AC5CE032B277111DCC4CC4A1451098D3729843FCBC829C8     Session-ID-ctx:     Master-Key: 549EFF0061919DEF53E33AD85479EB1E016CFB811796AD5159BF992C4504DD454E9455A8B2073CA4D75EB807FF0BE1ED     Key-Arg   : None     Start Time: 1425565107     Timeout   : 300 (sec)     Verify return code: 10 (certificate has expired)  --- ```","closed","","carlo-rtr","2015-03-05T14:21:29Z","2015-03-05T14:48:03Z"
"","1018","Remove javax.el 2.x dependencies","_Dropwizard-jersey_ module has a dependency via _dropwizard-validation_ on _org.glassfish.javax.el-3.0.0_, which includes API as well as an implementation of the expression language.  This also removes warnings from the _maven-shade plugin_ about duplicated classes in the classpath.","closed","improvement,","arteam","2015-04-26T20:02:42Z","2016-01-24T08:06:16Z"
"","977","Upgrade to JDBI 2.62","[Release notes](https://github.com/jdbi/jdbi/blob/master/RELEASE_NOTES)  JDBI 2.62 has several useful features such as: - Positional bindings in SqlObject API (incidentally contributed by me) - Ability to bind arguments in SqlObject API as Map - Better Java 8 support","closed","","arteam","2015-04-08T21:28:38Z","2016-01-24T08:06:50Z"
"","1486","Joda Time in v1.0.0?","[Release notes of v1.0.0](https://github.com/dropwizard/dropwizard/releases/tag/v1.0.0-rc1) mentions ""_Upgraded to Joda-Time 2.9.2_"".  If we're targeting first-class Java 8 support in v1.0.0, why use Joda-Time at all? `java.time` library replaces `joda-time` project.   https://jcp.org/en/jsr/detail?id=310 http://www.joda.org/joda-time/","closed","","m-manu","2016-03-22T06:05:46Z","2016-09-25T14:30:50Z"
"","1499","fix for metrics library url at getting started section","[Metrics for metrics](http://www.dropwizard.io/0.9.2/docs/getting-started.html#metrics-for-metrics)  Metrics project url `http://metrics.codahale.com/` does not point to valid url, how about pointing to `http://metrics.dropwizard.io/`?","closed","documentation,","burakdede","2016-03-29T19:49:25Z","2016-03-29T20:22:46Z"
"","1324","Wrong unit in FileAppenderFactory documentation","[FileAppenderFactory](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-logging/src/main/java/io/dropwizard/logging/FileAppenderFactory.java) says `K` is a valid unit for `maxFileSize`, but [Size](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-util/src/main/java/io/dropwizard/util/Size.java) requires `KB`.  Starting the application will fail:  > config.yaml has an error: > - Failed to parse configuration at: logging.appenders.[1].maxFileSize; Instantiation of [simple type, class io.dropwizard.util.Size] value failed: Invalid size: 1K. Wrong size unit (through reference chain: org.example.MyConfig[""logging""]->io.dropwizard.logging.DefaultLoggingFactory[""appenders""]->java.util.ArrayList[1]->io.dropwizard.logging.FileAppenderFactory[""maxFileSize""])","closed","","maffe","2015-11-03T17:12:38Z","2016-01-19T11:23:31Z"
"","1365","Merge dropwizard-java8 addon into mainline","[`dropwizard-java8`](https://github.com/dropwizard/dropwizard-java8) used to provide support for Java 8 classes like `Optional` and the Java Date and Time API (JSR-310) for Dropwizard. Given that the baseline for Dropwizard is now Java 8, those additions can be maintained in the mainline repository.  The only backward-incompatible change is in the `io.dropwizard.auth.Authenticator` interface which is now using `java.util.Optional` instead of the equivalent class from Google Guava.  Closes #962","closed","improvement,","joschi","2015-11-28T15:25:34Z","2015-12-05T15:49:00Z"
"","644","Current Version / Snapshot Version","@Team  It's my understanding version `0.7.1` was released around _2014-06-18_ but looking at the current base `pom.xml`, I see it still shows `0.7.1-SNAPSHOT` as the current version.  Did I miss something here? Shouldn't it be `0.7.2-SNAPSHOT`?  Cheers","closed","","kilemensi","2014-07-06T09:50:07Z","2014-07-07T08:09:34Z"
"","1458","Allow Multiple Roles in Authorizer.authorize method","@RolesAllowed takes a string array as a parameter for roles however the Authorizer.authorize method takes a single string. It would be great if the Authorizer interface took an array of strings for roles as well.","closed","stale,","akdev","2016-02-13T00:31:35Z","2019-09-03T00:01:00Z"
"","1538","Add an example of using the GraphiteReporter to the example application","@postwait mentioned this on twitter, but the example application didn't attempt to send any metrics to Graphite.","closed","improvement,","jplock","2016-05-09T15:14:34Z","2016-05-09T19:20:30Z"
"","823","Drop support of SPDY/2 protocol","2nd version of SPDY is deprecated and removed from major browsers.  It doesn't make sense to continue maintain it.","closed","","arteam","2014-12-28T17:59:18Z","2016-01-24T08:04:03Z"
"","1085","Upgrade to Jackson 2.6.0","2.6.0 is a cross-module update for Jackson, so we can remove the mess with the dependencies exclusion.  It's a release candidate, but pretty stable. This upgrade is backward-compatible, so it should not affect Dropwizard users.","closed","improvement,","arteam","2015-05-30T08:38:49Z","2016-01-24T08:06:58Z"
"","695","Update release-notes.rst","0.7.1 uses Hibernate 4.3.5, not 5.3.5","closed","documentation,","chaten","2014-08-28T06:49:51Z","2014-08-28T07:25:02Z"
"","1011","Fix issue #1006: JerseyClientBuilder should accept any combo of Environme...","...nt, ExecutorService, or ObjectMapper https://github.com/dropwizard/dropwizard/issues/1006","closed","improvement,","roccato","2015-04-23T15:04:18Z","2015-04-26T18:42:07Z"
"","724","Instead of IOException which has to be handled by the developer, an unch...","...ecked exception is sufficient and makes it easier to statically create fixtures used in more than one test case.  Also, the existing documentation was wrong, when the resource does not exist, fixture() threw an IllegalArgumentException (Preconditions.checkArgument) not an IOException as stated in the javadoc.  This fixes #723.","closed","","jangalinski","2014-10-03T10:57:56Z","2014-12-28T18:36:10Z"
"","1022","Exclude orig input value from param validation results","...ability  https://github.com/dropwizard/dropwizard/issues/892","closed","security,","carlo-rtr","2015-04-27T18:15:51Z","2015-05-06T05:50:50Z"
"","742","Allow setting the HttpClientMetricNameStrategy in Jersey and Http client...","... builders  Could not find any other way to do it.","closed","improvement,","neg3ntropy","2014-10-12T15:49:02Z","2014-11-09T13:27:39Z"
"","1055","Remove deprecated Apache HTTP client API","- Use the default cookie policy as a replacement for deprecated ""best-match"" - Set 'setValidateAfterInactivity' instead of deprecated 'staleConnectionCheckEnabled' - Use 'NoopHostnameVerifier' as a replacement for 'AllowAllHostnameVerifier'","closed","","arteam","2015-05-18T20:11:34Z","2016-01-24T08:04:56Z"
"","978","Fix an example of dropwizard-assets configuration","- Use the default configuration as more common - Add a note about the path of API for the simple server configuration  Close #959","closed","documentation,","arteam","2015-04-08T21:51:46Z","2016-01-24T08:06:27Z"
"","1034","Auth documentation & minor refactors","- Use Filter instead of Handler - java docs for ChainedAuthFilter  - limit type warning suppression in ChainedAuthFilterTest","closed","","carlo-rtr","2015-05-07T14:50:52Z","2015-05-07T17:20:50Z"
"","1479","Upgrade to Jackson 2.7.3","- Upgrade to the latest Jackson version that correctly handles subtyping - Remove JDK7 module, because it has been merged to jackson-databind - Upgrade deprecated API - Fix the test for printing a detailed YAML parsing error  See the discussion of the previous update attempt in issue #1449.","closed","improvement,","arteam","2016-03-16T15:27:26Z","2016-03-18T08:08:01Z"
"","951","Improvements of IntegrationTest in the example application","- The test can be executed from an IDE - Use a test, not a real configuration - Dynamically assign application and admin ports - Close an HTTP client in the test - Replace tabs to spaces - Add an integration test for work with a database   - Create a temporary folder - Override the DW database config - Migrate the DB schema - Test that database-related resource is working","closed","","arteam","2015-03-23T18:59:28Z","2016-01-24T08:04:14Z"
"","1445","Rename JDBI argument factories to match class names","- Renamed `OptionalOffsetTimeArgumentFactory` to `OptionalOffsetDateTimeArgumentFactory` - Renamed `OptionalZonedTimeArgumentFactory` to `OptionalZonedDateTimeArgumentFactory`  Fixes https://github.com/dropwizard/dropwizard/issues/1382","closed","improvement,","jplock","2016-02-04T23:28:42Z","2016-02-05T02:51:44Z"
"","954","Enabling UnitOfWork on implementations of interfaces","- patched `UnitOfWorkApplicationListener` to detect `UnitOfWork` annotation on methods that implement a resource method defined on an interface - caused by difference between `definitionMethod` (interface) and `handlingMethod` (implementation) for a jersey resouce - behavior:   - listener checks `definitionMethod` for `UnitOfWork`   - if found, this annotation wins (as before)   - if not found, listener now checks `handlingMethod` for `UnitOfWork` - extended tests to cover the new behavior  Minimal example to share jersey definitions among clients and the server: - an interface defines the jersey resources (without `UnitOfWork`)  ``` java @Path(""user"") public interface UserResource {     @GET     @Path(""list"")     @Produces(MediaType.APPLICATION_JSON)     List getAllUsers();//definitionMethod } ``` - the implementation adds the `UnitOfWork` annotation (server project, to avoid a leaked dependency).  ``` java public class UserResourceImpl implements UserResource {     @Override     @UnitOfWork     public List getAllUsers() { //... }//handlingMethod } ```","closed","","akumlehn","2015-03-27T17:27:43Z","2015-03-31T13:27:19Z"
"","824","Report the DB connection pool size and saturation","- Metric of the size helps to quickly find that the pool is oversized.  - Metric of amount waiting requests helps to track the pool saturation.","closed","improvement,","arteam","2014-12-28T19:11:33Z","2016-01-24T08:03:28Z"
"","792","Update DataSourceFactory.maxSize api docs","- maxSize is initialized to 100, not 10","closed","documentation,","MichaelKearnsSoftwire","2014-11-22T16:52:23Z","2014-11-23T12:51:39Z"
"","1163","Improve AuthFactoryProvider","- Make sure users pass the type inherited from `Principal`. - Remove unchecked cast warnings. - Remove unnecessary static class `AuthValueFactory`, which could be replaced by an anonymous class. - Make `PrincipalClassProvider` a holder class, rather then an interface. Doing so, we don't create a new anonymous class in `Binder`. - Documentation and style improvements.","closed","","arteam","2015-07-12T20:47:24Z","2016-01-24T08:05:07Z"
"","1490","Fixed broken or outdated links","- link to JSR 349 did not render correctly, removed hyphen (which seems   to be the official variant anyway) - fixed broken link to Gant (codehaus shut down) - use updated link to Guava (Google Code shut down)","closed","","rbarbey","2016-03-23T22:12:37Z","2016-03-23T23:52:56Z"
"","1016","Improve DropwizardApacheConnectorTest","- Expect `NoRouteException` as well as `ConnectionTimeoutException`.  If a local network is configured to reject request to non-routable addresses, then this exception is returned by JVM. We should handle such situations. - Add a health check, so the application doesn't yell on us in logs. - Add code style and documentation improvements.","closed","improvement,","arteam","2015-04-26T16:13:54Z","2016-01-24T08:05:05Z"
"","1001","fix #953 Possible reflective cross site scripting in ConstraintViolations","- ConstraintViolations should not print the invalid value as it may cause reflective-cross-site scripting issue - Fixed all unit tests that expect the (was {invalidValue}) in the violation message.","closed","bug,","WarFox","2015-04-19T22:47:26Z","2021-10-31T08:13:48Z"
"","779","Remove unneeded throws declaration","- ClassNotFoundException is checked, - but is not thrown by this method","closed","improvement,","MichaelKearnsSoftwire","2014-11-15T18:23:03Z","2014-11-16T13:27:45Z"
"","748","Unit tests for HttpConnectorFactory","- Check parsing a custom YAML configuration - Check the default configuration - Check building a correct server Jetty connector","closed","","arteam","2014-10-18T20:06:15Z","2016-01-24T08:04:56Z"
"","1166","Register auth filter when @Auth is present","- Auth alone should be enough to trigger the authentication servlet filter (https://github.com/dropwizard/dropwizard/pull/1162) - There was a lot of duplication in auth tests, this should be more maintainable","closed","","carlo-rtr","2015-07-13T20:41:15Z","2015-07-14T21:06:40Z"
"","1455","Allow selection of `TCP` or `UDP` for Graphite Reporter","- allows usage of TCP or UDP graphite reporter from metrics lib  Welcome to feedback. I only tackled the UDP/TCP variant to start. Likely, other graphite reports (pickle, rabbitmq) would be separate reporter factory/config options","closed","improvement,","vanvlack","2016-02-11T22:02:50Z","2016-02-12T16:38:30Z"
"","1299","Enhanced Views In Example Application","- added a reference to a css served by the AssetsBundle - added one line to with jobTitle to html","closed","improvement,","fexbraun","2015-10-23T10:43:45Z","2015-10-26T11:09:08Z"
"","1015","Add facility to specify a custom MetricRegistry in Bootstrap","- Add a setter for the metric registry in `Bootstrap`, so users can provide own customized instance during initialization. - Move system metrics registration into a separate method from the constructor. - Invoke the method after `Application#initialize`, where users can customize `Bootstrap`.  Resolve #956","closed","","arteam","2015-04-26T11:56:00Z","2016-01-24T08:03:46Z"
"","1541","can't register exceptionmapper in 0.9.2","**This is my exceptionmapper.**  `@Provider public class RuntimeExceptionMapper implements ExceptionMapper  {  ``` private static final Logger LOG = Logger.getLogger(RuntimeExceptionMapper.class.getName());  @Override public Response toResponse(Throwable exception) {      Response defaultResponse = Response.status(Response.Status.NOT_FOUND)             .entity(new ErrorView(""/500.mustache""))             .build();      if (exception instanceof WebApplicationException) {         return handleWebApplicationException(exception, defaultResponse);     }      LOG.warn(exception.getMessage(), exception);     return defaultResponse; }  private Response handleWebApplicationException(Throwable exception, Response defaultResponse) {     WebApplicationException webAppException = (WebApplicationException) exception;      if (webAppException.getResponse().getStatus() == 404) {         return Response                 .status(Response.Status.NOT_FOUND)                 .entity(new ErrorView(""404.mustache""))                 .build();     }     LOG.warn(exception.getMessage(), exception);      return defaultResponse; } ```  }`  **i have defined:** `registerDefaultExceptionMappers: false` in my config.yml and i have checked that it doesn't register any default jersey exceptionmappers.  **I register my exceptionmapper with the lines:** `RuntimeExceptionMapper runtimeExceptionMapper = new RuntimeExceptionMapper();  environment.jersey().register(runtimeExceptionMapper);`  **but when i throw:** `throw new WebApplicationException(response);`  **it deosn't trigger my exception mapper and i get a:** `{   ""type"": ""error"",   ""message"": ""No HTTP resource was found that matches the request URI xxxxxxxx."" }` as response.  What have i missed? what have i done wrong? im loosing my mind here. Is there a bug?","closed","","Tandolf","2016-05-10T15:39:40Z","2016-11-08T14:53:47Z"
"","939","Ensuring that JerseyRequest scoped ClientConfig gets propagated to HttpUriRequest","**Motivation**  JerseyClient and the ApacheHttpClient are statically configured at creation time. Dropwizard configuration builders ensure those configs are in sync. However, `WebTarget` objects can have the configuration overridden per generated request. This information will be added to the `JerseyRequest`. Unfortunately, the current implementation of the `DropwizardApacheConnector` does not propagate this onto the `RequestConfig` in the created `HttpUriRequest`.  In DW 0.7.1 this was working thanks to this code: http://grepcode.com/file/repo1.maven.org/maven2/com.sun.jersey.contribs/jersey-apache-client4/1.18.1/com/sun/jersey/client/apache4/ApacheHttpClient4Handler.java#241  This is currently blocking the migration of https://github.com/yammer/tenacity project to DW 0.8.0, as we need this functionality to sync Hystrix timeouts with those of the HttpClient.  **Solution**  The solution is to update the `DropwizardApacheConnector` to check the `JerseyRequest#getConfiguration` for properties (present only if overridden) that should be propagated to the `HttpUriRequest` specific `RequestConfig` instance.  I didn't want to loose the default values for not overridden properties, so I wrapped the `CloseableHttpClient` in a delegating class that exposes the default `RequestConfig` to use as basis.","closed","","velocipedist","2015-03-12T12:13:53Z","2015-04-07T11:58:00Z"
"","562","A collection of minor version bumps for dependencies","**HttpClient 4.3.3** (GA) is a bug fix release that fixes a regression introduced by the previous release causing a significant performance degradation in compressed content processing.  **hsqldb 2.3.2** [Misc bug fixes/improvements](http://hsqldb.org/doc/2.0/changelist_2_0.txt).  **mustache.java** Misc bug fixes and updating to Guava 16.  **Metrics 3.0.2** Misc bug fixes, including correcting swapping of m1 and m15 rates in the MetricsModule.  **Logback 1.1.2** Misc improvements, including [using fair locking in OutputStreamAppender](http://jira.qos.ch/browse/LOGBACK-268).","closed","","reines","2014-05-03T22:28:01Z","2014-06-17T11:02:05Z"
"","1238","@JsonView Behavior","**EDIT:** I just updated to v0.9.0-rc4 and this issue seems to have been resolved.   My apologies if I'm missing something here but I don't think the `@JsonView` annotation is working properly in v0.9.0-rc3.  If I add, for example, `@JsonView(Access.Elevated.class)`  to a class member and then return an instance of that class from a Jersey resource, the annotated member is serialized even without annotating the resource method. If I add `@JsonView(Object.class)` to the resource method, then the annotated class member is (correctly) not serialized. Because of this, I have to either add `@JsonView( ... )` to every resource method or to every class member.   Other than being cumbersome, it's risky because forgetting the annotation could result in exposure of sensitive data.","closed","","derrikcurran","2015-08-26T13:12:30Z","2015-08-26T15:01:53Z"
"","862","Using jersey's HK2 to inject healthchecks, lifecycle Manageds etc.","(I have asked this on google dropwizard-user groups)[https://groups.google.com/forum/#!topic/dropwizard-user/dmT8BGi9Wcc] and couldn't find a solution. To me it looks like it should be supported given the jersey interface provided by dropwizard.  Let's say I'm using HK2 for dependency injection throughout the application. That's what `´environment.jersey().register(MyResource.class)` does after all.  I bind my service classes via AbstractBinder, while resource classes via directly registering to jersey.  ``` java environment.jersey().register(new AbstractBinder() {           @Override           protected void configure() {             ...             bind(MyService.class):             ...           }         }); environment.jersey().register(MyResource.class); //MyResource uses MyService ```  so my resources etc. can get their dependencies via @Inject.  There are some cases where our healthchecks and Lifecycle classes require those singleton service dependencies (MyService). Even without those specific dependencies, I'd prefer to stick to using dependency injection throughout the application.  However, `environment.healthchecks().register(myHealthCheckObject) //Healtcheck also uses MyService` and  `environment.lifecycle().register(myManagedObject)` only accept instances, not classes; which means they are not injected through the DI framework.  I don't have access to the `ServiceLocator` of jersey, hence cannot create an instance of Healthcheck. I couldn't find a way to access jersey's `ServiceLocator`, probably also because it's not initialized until after `Application.run()` is run.   Nor I could `environment.lifecycle().register(MyManaged.class)`, which I think should be possible and is the aim of this issue.  I understand dropwizard is in a different context than jersey, and isn't utilizing hk2 directly itself. But this limits our dependency capabilities entirely.  Creating my own `ServiceLocator`, and handling DI through that is an option but will fail when I start implementing my own `AuthFactoryProvider` because it requires dependencies from Jersey. Also I won't be able to ´environment.jersey().register(MyResource.class)` directly.","closed","","natnan","2015-01-26T11:53:17Z","2016-09-29T18:15:01Z"
"","1129","Default exception mappers in test can be overridden","#1125 registered the default exception mappers in the wrong place in the `ResourceTestRule`, such that one couldn't register their own `ExceptionMapper` with the same signature and have it be used :blush:  This pull request fixes the behavior and adds a test to ensure that the default exception mappers can be overridden in `ResourceTestRule`","closed","","nickbabcock","2015-06-24T17:18:21Z","2015-06-29T15:09:51Z"
"","1517","Issue 1037","#1037 Simple fix to make it possible to instantiate an empty connection pool. For cases where you still want the webapp to load, e.g. you want a service to be able to start and show an error page when a DB isn't available.  Includes tests. Please ignore the changes to `travis.yml`","closed","","arienkock","2016-04-13T11:35:58Z","2016-04-26T13:58:35Z"
"","1139","Fixed typo in v0.7.0 release notes","""startAsRoot"" should be ""startsAsRoot"" per AbstractServerFactory.java","closed","","charlieg","2015-06-28T00:54:43Z","2015-06-28T09:44:14Z"
"","575","ExecutorServiceBuilder should not allow maxThreads() on unbounded queues.","""If there are more than corePoolSize but less than maximumPoolSize threads running, a new thread will be created only if the queue is full.""   Setting maxThreads on an unbounded queue has no effect. Throwing an exception in the builder would help avoid reasoning errors regarding the behavior of the executor.","closed","","clarkbreyman-yammer","2014-05-12T17:25:34Z","2015-01-17T16:41:04Z"
"","1533","Can we inject any class in the filter associated with the dropwizard application","","closed","","pritam620","2016-04-29T07:34:00Z","2016-04-29T09:54:15Z"
"","1530","Upgrade to Liquibase 3.5.0","","closed","improvement,","joschi","2016-04-22T16:01:13Z","2016-04-22T19:41:40Z"
"","1521","mention configuration reference","","closed","documentation,","vvavrychuk","2016-04-18T07:40:05Z","2016-04-18T08:05:56Z"
"","1493","Replace guava's Optional with java.util's one","","closed","improvement,","patrox","2016-03-24T23:48:08Z","2016-03-25T12:06:01Z"
"","1462","Demo","","closed","","aansh09889","2016-02-16T13:08:45Z","2016-02-16T13:13:07Z"
"","1456","Added support for multiple packages in Scanning Hibernate Bundle","","closed","improvement,","souravmitra","2016-02-12T06:41:50Z","2016-02-12T15:32:15Z"
"","1437","Support for @RolesAllowed on the class level","","closed","improvement,","tocr","2016-01-30T19:40:23Z","2016-02-05T22:31:42Z"
"","1427","Update copyright for 2016.","","closed","","ryankennedy","2016-01-24T21:50:48Z","2016-01-25T07:11:09Z"
"","1410","Add support Jetty's System.inheritedChannel option","","closed","improvement,","matsumana","2016-01-13T14:36:09Z","2016-01-15T05:36:27Z"
"","1407","Update validation docs for 1.0","","closed","documentation,","nickbabcock","2016-01-06T21:56:06Z","2016-01-06T22:24:48Z"
"","1386","Release/0.9.x","","closed","","dennisd22","2015-12-14T21:53:01Z","2015-12-14T21:53:51Z"
"","1385","Make logging outputs configurable.","","closed","","yunglin","2015-12-14T20:33:24Z","2015-12-15T14:26:16Z"
"","1377","Added documentation on how to get started with Dropwizard Archetype","","closed","documentation,","jansoren","2015-12-07T23:33:52Z","2015-12-10T03:15:02Z"
"","1374","Added documentation on how to get started with Dropwizard Archetype","","closed","documentation,","jansoren","2015-12-07T16:13:38Z","2015-12-07T22:45:29Z"
"","1340","Add toString detection to fuzzy enum logic","","closed","improvement,","brentryan","2015-11-15T02:13:55Z","2015-11-21T13:02:58Z"
"","1338","Add equals(), hashCode() and toString() to `ErrorMessage`","","closed","improvement,","jplock","2015-11-13T02:00:09Z","2015-11-13T14:03:47Z"
"","1337","Added a `toString()` method to `PrincipalImpl`","","closed","","jplock","2015-11-12T14:29:11Z","2015-11-12T17:31:49Z"
"","1336","Release/0.9.x","","closed","","kwcox2","2015-11-11T13:10:01Z","2015-11-11T13:10:53Z"
"","1312","Fix error in auth docs rename handlers -> filters","","closed","documentation,","jplock","2015-10-28T22:00:04Z","2015-10-28T22:38:03Z"
"","1280","Updating with the new version","","closed","","markez92","2015-10-13T19:08:26Z","2015-10-14T08:05:46Z"
"","1275","Verbose logging of server errors","","closed","improvement,","maffe","2015-10-09T13:11:22Z","2015-10-17T09:13:26Z"
"","1272","Fix documentation on servlet filters","","closed","documentation,","douzzi","2015-10-01T06:55:15Z","2015-10-01T07:34:08Z"
"","1263","Upgrade to Jersey 2.22","","closed","improvement,","tjcutajar","2015-09-28T09:56:41Z","2015-09-28T10:54:09Z"
"","1245","disable flaky tests","","closed","","carlo-rtr","2015-09-02T18:55:52Z","2015-09-03T08:24:05Z"
"","1242","remove method element type","","closed","","carlo-rtr","2015-08-31T14:56:05Z","2015-09-02T18:56:22Z"
"","1236","upgrade jersey 2.21 and httpclient 4.5","","closed","","carlo-rtr","2015-08-26T01:40:39Z","2015-08-26T01:52:28Z"
"","1211","Upgrade to Jetty 9.2.13.v20150730","","closed","","tjcutajar","2015-08-07T16:48:26Z","2015-08-08T00:00:35Z"
"","1210","Upgrade to Jersey 2.20","","closed","improvement,","tjcutajar","2015-08-07T16:34:00Z","2015-08-08T09:55:25Z"
"","1194","Jdbi 2.63.1","","closed","","profes","2015-07-27T15:49:44Z","2015-07-27T17:59:39Z"
"","1171","Upgrade to Jetty 9.2.12.v20150709","","closed","improvement,","tjcutajar","2015-07-15T15:21:23Z","2015-07-15T16:16:57Z"
"","1165","Cache maven repository in travis","","closed","","jplock","2015-07-13T18:47:19Z","2015-07-14T14:29:55Z"
"","1164","fix copy/paste error (comment only)","","closed","","apetersson","2015-07-13T12:15:13Z","2015-07-13T12:50:28Z"
"","1143","Upgrade to Jersey 2.19","","closed","","tjcutajar","2015-06-29T20:26:40Z","2015-07-01T18:13:16Z"
"","1140","Make 0.9.0 release notes more human-readable and organized","","closed","","arteam","2015-06-28T11:19:10Z","2016-01-24T08:05:02Z"
"","1136","Typos","","closed","documentation,","dmartinpro","2015-06-26T10:22:33Z","2015-06-26T12:40:55Z"
"","1133","Add Nick Babcock to developers in parent POM","","closed","","nickbabcock","2015-06-25T14:01:20Z","2015-06-25T14:04:34Z"
"","1126","code excerpt in docs should be 'static final', not 'final static'","","closed","documentation,","dareonion","2015-06-24T05:36:33Z","2015-06-24T07:56:23Z"
"","1121","update contributors for v0.9.0","","closed","","carlo-rtr","2015-06-19T17:24:55Z","2015-06-19T17:55:01Z"
"","1120","Update docs & release notes to support v0.9.0","","closed","","carlo-rtr","2015-06-19T15:59:54Z","2015-10-28T22:52:58Z"
"","1109","Upgrade to Jersey 2.18","","closed","improvement,","tjcutajar","2015-06-08T19:28:31Z","2015-06-18T17:32:34Z"
"","1097","Fix DbStatusCommandTest on Windows","","closed","","nickbabcock","2015-06-04T14:21:25Z","2015-06-04T14:52:27Z"
"","1086","Upgrade to Jetty 9.2.11.v20150529","","closed","","tjcutajar","2015-05-31T13:14:52Z","2015-06-01T19:34:16Z"
"","1082","Only cache present values in the CachingAuthenticator. Fixes #947","","closed","","jplock","2015-05-27T15:17:40Z","2015-05-27T18:13:57Z"
"","1081","short circuit routing test if there is no connection","","closed","","carlo-rtr","2015-05-27T13:33:03Z","2015-05-27T14:24:21Z"
"","1053","Fixed a typo in sample code in configuration.rst","","closed","documentation,","aingram","2015-05-18T06:45:06Z","2015-05-18T07:41:40Z"
"","1041","Correct javadoc for @MaxSize validation annotation","","closed","","mhurne","2015-05-11T17:28:22Z","2015-05-11T20:42:37Z"
"","1035","Fix syntax highlighting in dropwizard views","","closed","","nickbabcock","2015-05-07T19:03:55Z","2015-05-07T19:21:36Z"
"","1024","Corrected `AuthHandler` to `AuthFilter` in User Manual","","closed","documentation,","yunspace","2015-04-30T05:47:19Z","2015-05-06T05:51:22Z"
"","1020","Change register object method to take varargs in Jersey Environment","","closed","","ayushvora","2015-04-27T15:16:04Z","2015-05-01T15:34:00Z"
"","999","fix docs around function creation","","closed","documentation,","carlo-rtr","2015-04-17T19:58:03Z","2015-05-06T05:52:04Z"
"","996","allow the opportunity to customize your logging factory","","closed","","carlo-rtr","2015-04-16T20:56:12Z","2016-12-08T05:01:25Z"
"","995","includeCallerData should be configurable","","closed","improvement,","carlo-rtr","2015-04-16T13:00:30Z","2015-04-26T18:40:06Z"
"","994","log the context path","","closed","improvement,","carlo-rtr","2015-04-15T22:01:34Z","2015-04-26T18:39:56Z"
"","972","Provide a way to customize the request logging","","closed","feature,","carlo-rtr","2015-04-06T19:56:33Z","2015-11-25T18:54:43Z"
"","967","0.8.1 release notes","","closed","","carlo-rtr","2015-04-01T13:40:42Z","2015-04-01T13:41:10Z"
"","965","Ease deployment process to AWS and Heroku","","closed","stale,","carlo-rtr","2015-03-31T16:32:54Z","2019-09-03T00:01:05Z"
"","962","Upgrade to jdk 8","","closed","","carlo-rtr","2015-03-31T16:26:52Z","2015-12-05T15:46:25Z"
"","918","internals docs, prepare for release","","closed","","carlo-rtr","2015-03-05T13:50:06Z","2015-03-05T14:49:19Z"
"","910","docs index","","closed","","carlo-rtr","2015-03-02T01:01:46Z","2015-03-02T01:06:29Z"
"","904","security note, fix my name","","closed","","carlo-rtr","2015-02-27T02:18:31Z","2015-02-27T02:47:12Z"
"","903","additional release notes","","closed","","carlo-rtr","2015-02-27T02:01:26Z","2015-02-27T02:47:37Z"
"","901","example put, trying to replicate issue 893","","closed","","carlo-rtr","2015-02-26T02:52:17Z","2015-02-26T12:09:23Z"
"","877","fewer regrets","","closed","","d2fn","2015-02-06T23:10:04Z","2015-02-07T08:49:22Z"
"","833","Update README.md","","closed","","aausch","2015-01-06T19:33:19Z","2015-01-06T20:30:53Z"
"","831","Updated ""Getting Started"" to list 0.7.1 as the current version for POM","","closed","","charlieg","2015-01-03T04:10:22Z","2015-01-05T20:40:09Z"
"","817","Release/0.7.x","","closed","","SSaxena","2014-12-19T11:32:34Z","2014-12-19T11:34:57Z"
"","775","upgraded el version to 3.0.0","","closed","","cemo","2014-11-11T20:44:02Z","2014-11-12T10:34:15Z"
"","707","Adding dev list to CONTRIBUTING.md","","closed","","justinrmiller","2014-09-16T08:06:43Z","2014-09-16T08:26:21Z"
"","700","example of filtering","","closed","","carlo-rtr","2014-09-03T20:23:21Z","2014-09-03T20:53:52Z"
"","693","Fixed typo in hibernate docs","","closed","documentation,","chena","2014-08-27T16:08:17Z","2014-08-27T16:32:59Z"
"","688","Add unit tests for Person and People resources","","closed","","anikiej","2014-08-18T20:08:02Z","2014-09-28T12:27:49Z"
"","679","Fixes #678","","closed","","mcarrierastonish","2014-08-08T15:49:17Z","2014-08-08T18:58:10Z"
"","668","Extended support for Joda Time (LocalDate class).","","closed","","clamothe","2014-07-30T21:59:05Z","2014-07-31T09:00:34Z"
"","655","Securing admin with basic auth","","closed","","kagrela","2014-07-11T09:12:47Z","2014-08-06T00:22:14Z"
"","650","Release/0.7.x","","closed","","razyalov","2014-07-09T23:57:42Z","2014-07-10T00:47:29Z"
"","623","Fixing a bunch of javadoc warnings","","closed","","reines","2014-06-14T10:24:05Z","2014-06-14T10:41:47Z"
"","615","Release/0.7.x","","closed","","jyc4617","2014-06-12T15:26:07Z","2014-06-13T21:01:15Z"
"","597","Make the classloader used in DiscoverableSubtypeResolver more easily changeable","","closed","","reines","2014-05-24T21:45:35Z","2014-06-23T04:40:38Z"
"","566","Updating healthcheck output in documentation","","closed","","reines","2014-05-09T22:07:53Z","2014-07-01T14:37:13Z"
"","560","When will Dropwizard 0.7.0 be released?","","closed","","tongguop","2014-05-03T14:24:11Z","2014-05-03T22:39:54Z"
"","556","Updated README to reflect version in pom.xml","","closed","documentation,","betrcode","2014-04-30T14:34:26Z","2014-07-09T16:04:36Z"